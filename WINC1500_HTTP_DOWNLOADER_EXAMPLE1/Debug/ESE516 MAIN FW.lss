
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0002a8f8  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0003c8f8  0003c8f8  0002c8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000002f0  20000000  0003c900  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000055cc  200002f0  0003cbf0  000302f0  2**4
                  ALLOC
  4 .stack        00002004  200058bc  000421bc  000302f0  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030318  2**0
                  CONTENTS, READONLY
  7 .debug_info   0012bd54  00000000  00000000  00030371  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000109ee  00000000  00000000  0015c0c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000173ed  00000000  00000000  0016cab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00003e00  00000000  00000000  00183ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003a88  00000000  00000000  00187ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002a310  00000000  00000000  0018b728  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0005d917  00000000  00000000  001b5a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000c564d  00000000  00000000  0021334f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000ebec  00000000  00000000  002d899c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	c0 78 00 20 cd cc 02 00 c5 cd 02 00 c5 cd 02 00     .x. ............
	...
   1202c:	e9 c1 01 00 00 00 00 00 00 00 00 00 11 c3 01 00     ................
   1203c:	59 c3 01 00 c5 cd 02 00 c5 cd 02 00 c5 cd 02 00     Y...............
   1204c:	c1 8d 02 00 ed 82 02 00 c5 cd 02 00 61 24 01 00     ............a$..
   1205c:	c5 cd 02 00 a5 25 01 00 65 94 02 00 7d 94 02 00     .....%..e...}...
   1206c:	95 94 02 00 ad 94 02 00 c5 94 02 00 dd 94 02 00     ................
   1207c:	15 cc 02 00 29 cc 02 00 3d cc 02 00 d5 9e 01 00     ....)...=.......
   1208c:	e9 9e 01 00 fd 9e 01 00 00 00 00 00 00 00 00 00     ................
   1209c:	e9 22 01 00 c5 cd 02 00 25 24 01 00 c5 cd 02 00     ."......%$......
   120ac:	c5 cd 02 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	200002f0 	.word	0x200002f0
   120d4:	00000000 	.word	0x00000000
   120d8:	0003c900 	.word	0x0003c900

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	200002f4 	.word	0x200002f4
   12108:	0003c900 	.word	0x0003c900
   1210c:	0003c900 	.word	0x0003c900
   12110:	00000000 	.word	0x00000000

00012114 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12114:	b580      	push	{r7, lr}
   12116:	b084      	sub	sp, #16
   12118:	af00      	add	r7, sp, #0
   1211a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   1211c:	687b      	ldr	r3, [r7, #4]
   1211e:	681b      	ldr	r3, [r3, #0]
   12120:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12122:	68fb      	ldr	r3, [r7, #12]
   12124:	7e5b      	ldrb	r3, [r3, #25]
   12126:	b2db      	uxtb	r3, r3
   12128:	b25b      	sxtb	r3, r3
   1212a:	2b00      	cmp	r3, #0
   1212c:	da01      	bge.n	12132 <adc_is_syncing+0x1e>
		return true;
   1212e:	2301      	movs	r3, #1
   12130:	e000      	b.n	12134 <adc_is_syncing+0x20>
	}

	return false;
   12132:	2300      	movs	r3, #0
}
   12134:	0018      	movs	r0, r3
   12136:	46bd      	mov	sp, r7
   12138:	b004      	add	sp, #16
   1213a:	bd80      	pop	{r7, pc}

0001213c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   1213c:	b580      	push	{r7, lr}
   1213e:	b084      	sub	sp, #16
   12140:	af00      	add	r7, sp, #0
   12142:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12144:	687b      	ldr	r3, [r7, #4]
   12146:	681b      	ldr	r3, [r3, #0]
   12148:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   1214a:	46c0      	nop			; (mov r8, r8)
   1214c:	687b      	ldr	r3, [r7, #4]
   1214e:	0018      	movs	r0, r3
   12150:	4b0b      	ldr	r3, [pc, #44]	; (12180 <adc_start_conversion+0x44>)
   12152:	4798      	blx	r3
   12154:	1e03      	subs	r3, r0, #0
   12156:	d1f9      	bne.n	1214c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12158:	68fb      	ldr	r3, [r7, #12]
   1215a:	7b1b      	ldrb	r3, [r3, #12]
   1215c:	b2db      	uxtb	r3, r3
   1215e:	2202      	movs	r2, #2
   12160:	4313      	orrs	r3, r2
   12162:	b2da      	uxtb	r2, r3
   12164:	68fb      	ldr	r3, [r7, #12]
   12166:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12168:	46c0      	nop			; (mov r8, r8)
   1216a:	687b      	ldr	r3, [r7, #4]
   1216c:	0018      	movs	r0, r3
   1216e:	4b04      	ldr	r3, [pc, #16]	; (12180 <adc_start_conversion+0x44>)
   12170:	4798      	blx	r3
   12172:	1e03      	subs	r3, r0, #0
   12174:	d1f9      	bne.n	1216a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12176:	46c0      	nop			; (mov r8, r8)
   12178:	46bd      	mov	sp, r7
   1217a:	b004      	add	sp, #16
   1217c:	bd80      	pop	{r7, pc}
   1217e:	46c0      	nop			; (mov r8, r8)
   12180:	00012115 	.word	0x00012115

00012184 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12184:	b580      	push	{r7, lr}
   12186:	b084      	sub	sp, #16
   12188:	af00      	add	r7, sp, #0
   1218a:	6078      	str	r0, [r7, #4]
   1218c:	000a      	movs	r2, r1
   1218e:	1cfb      	adds	r3, r7, #3
   12190:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12192:	687b      	ldr	r3, [r7, #4]
   12194:	681b      	ldr	r3, [r3, #0]
   12196:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12198:	68fb      	ldr	r3, [r7, #12]
   1219a:	1cfa      	adds	r2, r7, #3
   1219c:	7812      	ldrb	r2, [r2, #0]
   1219e:	759a      	strb	r2, [r3, #22]
}
   121a0:	46c0      	nop			; (mov r8, r8)
   121a2:	46bd      	mov	sp, r7
   121a4:	b004      	add	sp, #16
   121a6:	bd80      	pop	{r7, pc}

000121a8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   121a8:	b580      	push	{r7, lr}
   121aa:	b084      	sub	sp, #16
   121ac:	af00      	add	r7, sp, #0
   121ae:	0002      	movs	r2, r0
   121b0:	1dfb      	adds	r3, r7, #7
   121b2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   121b4:	1dfb      	adds	r3, r7, #7
   121b6:	781a      	ldrb	r2, [r3, #0]
   121b8:	4b47      	ldr	r3, [pc, #284]	; (122d8 <_adc_interrupt_handler+0x130>)
   121ba:	0092      	lsls	r2, r2, #2
   121bc:	58d3      	ldr	r3, [r2, r3]
   121be:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   121c0:	68fb      	ldr	r3, [r7, #12]
   121c2:	681b      	ldr	r3, [r3, #0]
   121c4:	7e1b      	ldrb	r3, [r3, #24]
   121c6:	b2da      	uxtb	r2, r3
   121c8:	68fb      	ldr	r3, [r7, #12]
   121ca:	681b      	ldr	r3, [r3, #0]
   121cc:	7ddb      	ldrb	r3, [r3, #23]
   121ce:	b2db      	uxtb	r3, r3
   121d0:	4013      	ands	r3, r2
   121d2:	b2db      	uxtb	r3, r3
   121d4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   121d6:	68bb      	ldr	r3, [r7, #8]
   121d8:	2201      	movs	r2, #1
   121da:	4013      	ands	r3, r2
   121dc:	d045      	beq.n	1226a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   121de:	68fb      	ldr	r3, [r7, #12]
   121e0:	681b      	ldr	r3, [r3, #0]
   121e2:	2201      	movs	r2, #1
   121e4:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   121e6:	46c0      	nop			; (mov r8, r8)
   121e8:	68fb      	ldr	r3, [r7, #12]
   121ea:	0018      	movs	r0, r3
   121ec:	4b3b      	ldr	r3, [pc, #236]	; (122dc <_adc_interrupt_handler+0x134>)
   121ee:	4798      	blx	r3
   121f0:	1e03      	subs	r3, r0, #0
   121f2:	d1f9      	bne.n	121e8 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   121f4:	68fb      	ldr	r3, [r7, #12]
   121f6:	695b      	ldr	r3, [r3, #20]
   121f8:	1c99      	adds	r1, r3, #2
   121fa:	68fa      	ldr	r2, [r7, #12]
   121fc:	6151      	str	r1, [r2, #20]
   121fe:	68fa      	ldr	r2, [r7, #12]
   12200:	6812      	ldr	r2, [r2, #0]
   12202:	8b52      	ldrh	r2, [r2, #26]
   12204:	b292      	uxth	r2, r2
   12206:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12208:	68fb      	ldr	r3, [r7, #12]
   1220a:	8b1b      	ldrh	r3, [r3, #24]
   1220c:	b29b      	uxth	r3, r3
   1220e:	3b01      	subs	r3, #1
   12210:	b29b      	uxth	r3, r3
   12212:	68fa      	ldr	r2, [r7, #12]
   12214:	1c19      	adds	r1, r3, #0
   12216:	8311      	strh	r1, [r2, #24]
   12218:	2b00      	cmp	r3, #0
   1221a:	d008      	beq.n	1222e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1221c:	68fb      	ldr	r3, [r7, #12]
   1221e:	7f5b      	ldrb	r3, [r3, #29]
   12220:	2b00      	cmp	r3, #0
   12222:	d022      	beq.n	1226a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12224:	68fb      	ldr	r3, [r7, #12]
   12226:	0018      	movs	r0, r3
   12228:	4b2d      	ldr	r3, [pc, #180]	; (122e0 <_adc_interrupt_handler+0x138>)
   1222a:	4798      	blx	r3
   1222c:	e01d      	b.n	1226a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1222e:	68fb      	ldr	r3, [r7, #12]
   12230:	2101      	movs	r1, #1
   12232:	0018      	movs	r0, r3
   12234:	4b2b      	ldr	r3, [pc, #172]	; (122e4 <_adc_interrupt_handler+0x13c>)
   12236:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12238:	68fb      	ldr	r3, [r7, #12]
   1223a:	7f1b      	ldrb	r3, [r3, #28]
   1223c:	b2db      	uxtb	r3, r3
   1223e:	2b05      	cmp	r3, #5
   12240:	d113      	bne.n	1226a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12242:	68fb      	ldr	r3, [r7, #12]
   12244:	2200      	movs	r2, #0
   12246:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12248:	68fb      	ldr	r3, [r7, #12]
   1224a:	7edb      	ldrb	r3, [r3, #27]
   1224c:	001a      	movs	r2, r3
   1224e:	2301      	movs	r3, #1
   12250:	4013      	ands	r3, r2
   12252:	d00a      	beq.n	1226a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12254:	68fb      	ldr	r3, [r7, #12]
   12256:	7e9b      	ldrb	r3, [r3, #26]
   12258:	001a      	movs	r2, r3
   1225a:	2301      	movs	r3, #1
   1225c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1225e:	d004      	beq.n	1226a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12260:	68fb      	ldr	r3, [r7, #12]
   12262:	689b      	ldr	r3, [r3, #8]
   12264:	68fa      	ldr	r2, [r7, #12]
   12266:	0010      	movs	r0, r2
   12268:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1226a:	68bb      	ldr	r3, [r7, #8]
   1226c:	2204      	movs	r2, #4
   1226e:	4013      	ands	r3, r2
   12270:	d014      	beq.n	1229c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12272:	68fb      	ldr	r3, [r7, #12]
   12274:	681b      	ldr	r3, [r3, #0]
   12276:	2204      	movs	r2, #4
   12278:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1227a:	68fb      	ldr	r3, [r7, #12]
   1227c:	7edb      	ldrb	r3, [r3, #27]
   1227e:	001a      	movs	r2, r3
   12280:	2302      	movs	r3, #2
   12282:	4013      	ands	r3, r2
   12284:	d00a      	beq.n	1229c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12286:	68fb      	ldr	r3, [r7, #12]
   12288:	7e9b      	ldrb	r3, [r3, #26]
   1228a:	001a      	movs	r2, r3
   1228c:	2302      	movs	r3, #2
   1228e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12290:	d004      	beq.n	1229c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12292:	68fb      	ldr	r3, [r7, #12]
   12294:	68db      	ldr	r3, [r3, #12]
   12296:	68fa      	ldr	r2, [r7, #12]
   12298:	0010      	movs	r0, r2
   1229a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   1229c:	68bb      	ldr	r3, [r7, #8]
   1229e:	2202      	movs	r2, #2
   122a0:	4013      	ands	r3, r2
   122a2:	d014      	beq.n	122ce <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   122a4:	68fb      	ldr	r3, [r7, #12]
   122a6:	681b      	ldr	r3, [r3, #0]
   122a8:	2202      	movs	r2, #2
   122aa:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   122ac:	68fb      	ldr	r3, [r7, #12]
   122ae:	7edb      	ldrb	r3, [r3, #27]
   122b0:	001a      	movs	r2, r3
   122b2:	2304      	movs	r3, #4
   122b4:	4013      	ands	r3, r2
   122b6:	d00a      	beq.n	122ce <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   122b8:	68fb      	ldr	r3, [r7, #12]
   122ba:	7e9b      	ldrb	r3, [r3, #26]
   122bc:	001a      	movs	r2, r3
   122be:	2304      	movs	r3, #4
   122c0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   122c2:	d004      	beq.n	122ce <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   122c4:	68fb      	ldr	r3, [r7, #12]
   122c6:	691b      	ldr	r3, [r3, #16]
   122c8:	68fa      	ldr	r2, [r7, #12]
   122ca:	0010      	movs	r0, r2
   122cc:	4798      	blx	r3
		}
	}
}
   122ce:	46c0      	nop			; (mov r8, r8)
   122d0:	46bd      	mov	sp, r7
   122d2:	b004      	add	sp, #16
   122d4:	bd80      	pop	{r7, pc}
   122d6:	46c0      	nop			; (mov r8, r8)
   122d8:	2000434c 	.word	0x2000434c
   122dc:	00012115 	.word	0x00012115
   122e0:	0001213d 	.word	0x0001213d
   122e4:	00012185 	.word	0x00012185

000122e8 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   122e8:	b580      	push	{r7, lr}
   122ea:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   122ec:	2000      	movs	r0, #0
   122ee:	4b02      	ldr	r3, [pc, #8]	; (122f8 <ADC_Handler+0x10>)
   122f0:	4798      	blx	r3
}
   122f2:	46c0      	nop			; (mov r8, r8)
   122f4:	46bd      	mov	sp, r7
   122f6:	bd80      	pop	{r7, pc}
   122f8:	000121a9 	.word	0x000121a9

000122fc <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   122fc:	b580      	push	{r7, lr}
   122fe:	b082      	sub	sp, #8
   12300:	af00      	add	r7, sp, #0
   12302:	0002      	movs	r2, r0
   12304:	1dfb      	adds	r3, r7, #7
   12306:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12308:	4a07      	ldr	r2, [pc, #28]	; (12328 <system_interrupt_disable+0x2c>)
   1230a:	1dfb      	adds	r3, r7, #7
   1230c:	781b      	ldrb	r3, [r3, #0]
   1230e:	0019      	movs	r1, r3
   12310:	231f      	movs	r3, #31
   12312:	400b      	ands	r3, r1
   12314:	2101      	movs	r1, #1
   12316:	4099      	lsls	r1, r3
   12318:	000b      	movs	r3, r1
   1231a:	0019      	movs	r1, r3
   1231c:	2380      	movs	r3, #128	; 0x80
   1231e:	50d1      	str	r1, [r2, r3]
}
   12320:	46c0      	nop			; (mov r8, r8)
   12322:	46bd      	mov	sp, r7
   12324:	b002      	add	sp, #8
   12326:	bd80      	pop	{r7, pc}
   12328:	e000e100 	.word	0xe000e100

0001232c <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1232c:	b580      	push	{r7, lr}
   1232e:	b084      	sub	sp, #16
   12330:	af00      	add	r7, sp, #0
   12332:	0002      	movs	r2, r0
   12334:	1dfb      	adds	r3, r7, #7
   12336:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12338:	1dfb      	adds	r3, r7, #7
   1233a:	781a      	ldrb	r2, [r3, #0]
   1233c:	4b37      	ldr	r3, [pc, #220]	; (1241c <_dac_interrupt_handler+0xf0>)
   1233e:	0092      	lsls	r2, r2, #2
   12340:	58d3      	ldr	r3, [r2, r3]
   12342:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12344:	68fb      	ldr	r3, [r7, #12]
   12346:	681b      	ldr	r3, [r3, #0]
   12348:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1234a:	68bb      	ldr	r3, [r7, #8]
   1234c:	799b      	ldrb	r3, [r3, #6]
   1234e:	b2db      	uxtb	r3, r3
   12350:	001a      	movs	r2, r3
   12352:	2301      	movs	r3, #1
   12354:	4013      	ands	r3, r2
   12356:	d00e      	beq.n	12376 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12358:	68bb      	ldr	r3, [r7, #8]
   1235a:	2201      	movs	r2, #1
   1235c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1235e:	68fb      	ldr	r3, [r7, #12]
   12360:	3314      	adds	r3, #20
   12362:	2b00      	cmp	r3, #0
   12364:	d007      	beq.n	12376 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12366:	68fb      	ldr	r3, [r7, #12]
   12368:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1236a:	2b00      	cmp	r3, #0
   1236c:	d003      	beq.n	12376 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1236e:	68fb      	ldr	r3, [r7, #12]
   12370:	699b      	ldr	r3, [r3, #24]
   12372:	2000      	movs	r0, #0
   12374:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12376:	68bb      	ldr	r3, [r7, #8]
   12378:	799b      	ldrb	r3, [r3, #6]
   1237a:	b2db      	uxtb	r3, r3
   1237c:	001a      	movs	r2, r3
   1237e:	2302      	movs	r3, #2
   12380:	4013      	ands	r3, r2
   12382:	d047      	beq.n	12414 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12384:	68bb      	ldr	r3, [r7, #8]
   12386:	2202      	movs	r2, #2
   12388:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   1238a:	68fb      	ldr	r3, [r7, #12]
   1238c:	899b      	ldrh	r3, [r3, #12]
   1238e:	b29b      	uxth	r3, r3
   12390:	2b00      	cmp	r3, #0
   12392:	d033      	beq.n	123fc <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12394:	68fb      	ldr	r3, [r7, #12]
   12396:	689a      	ldr	r2, [r3, #8]
   12398:	68fb      	ldr	r3, [r7, #12]
   1239a:	89db      	ldrh	r3, [r3, #14]
   1239c:	b29b      	uxth	r3, r3
   1239e:	1c59      	adds	r1, r3, #1
   123a0:	b288      	uxth	r0, r1
   123a2:	68f9      	ldr	r1, [r7, #12]
   123a4:	81c8      	strh	r0, [r1, #14]
   123a6:	005b      	lsls	r3, r3, #1
   123a8:	18d3      	adds	r3, r2, r3
   123aa:	881b      	ldrh	r3, [r3, #0]
   123ac:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   123ae:	68bb      	ldr	r3, [r7, #8]
   123b0:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   123b2:	68fb      	ldr	r3, [r7, #12]
   123b4:	899b      	ldrh	r3, [r3, #12]
   123b6:	b29b      	uxth	r3, r3
   123b8:	3b01      	subs	r3, #1
   123ba:	b29a      	uxth	r2, r3
   123bc:	68fb      	ldr	r3, [r7, #12]
   123be:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   123c0:	68fb      	ldr	r3, [r7, #12]
   123c2:	899b      	ldrh	r3, [r3, #12]
   123c4:	b29b      	uxth	r3, r3
   123c6:	2b00      	cmp	r3, #0
   123c8:	d118      	bne.n	123fc <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   123ca:	68fb      	ldr	r3, [r7, #12]
   123cc:	2220      	movs	r2, #32
   123ce:	2100      	movs	r1, #0
   123d0:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   123d2:	68bb      	ldr	r3, [r7, #8]
   123d4:	2202      	movs	r2, #2
   123d6:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   123d8:	68bb      	ldr	r3, [r7, #8]
   123da:	2202      	movs	r2, #2
   123dc:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   123de:	2019      	movs	r0, #25
   123e0:	4b0f      	ldr	r3, [pc, #60]	; (12420 <_dac_interrupt_handler+0xf4>)
   123e2:	4798      	blx	r3

				if ((module->callback) &&
   123e4:	68fb      	ldr	r3, [r7, #12]
   123e6:	3314      	adds	r3, #20
   123e8:	2b00      	cmp	r3, #0
   123ea:	d007      	beq.n	123fc <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   123ec:	68fb      	ldr	r3, [r7, #12]
   123ee:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   123f0:	2b00      	cmp	r3, #0
   123f2:	d003      	beq.n	123fc <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   123f4:	68fb      	ldr	r3, [r7, #12]
   123f6:	69db      	ldr	r3, [r3, #28]
   123f8:	2000      	movs	r0, #0
   123fa:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   123fc:	68fb      	ldr	r3, [r7, #12]
   123fe:	3314      	adds	r3, #20
   12400:	2b00      	cmp	r3, #0
   12402:	d007      	beq.n	12414 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12404:	68fb      	ldr	r3, [r7, #12]
   12406:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12408:	2b00      	cmp	r3, #0
   1240a:	d003      	beq.n	12414 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1240c:	68fb      	ldr	r3, [r7, #12]
   1240e:	695b      	ldr	r3, [r3, #20]
   12410:	2000      	movs	r0, #0
   12412:	4798      	blx	r3
		}
	}
}
   12414:	46c0      	nop			; (mov r8, r8)
   12416:	46bd      	mov	sp, r7
   12418:	b004      	add	sp, #16
   1241a:	bd80      	pop	{r7, pc}
   1241c:	20004350 	.word	0x20004350
   12420:	000122fd 	.word	0x000122fd

00012424 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12424:	b580      	push	{r7, lr}
   12426:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12428:	2000      	movs	r0, #0
   1242a:	4b02      	ldr	r3, [pc, #8]	; (12434 <DAC_Handler+0x10>)
   1242c:	4798      	blx	r3
}
   1242e:	46c0      	nop			; (mov r8, r8)
   12430:	46bd      	mov	sp, r7
   12432:	bd80      	pop	{r7, pc}
   12434:	0001232d 	.word	0x0001232d

00012438 <system_interrupt_enter_critical_section>:
{
   12438:	b580      	push	{r7, lr}
   1243a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1243c:	4b02      	ldr	r3, [pc, #8]	; (12448 <system_interrupt_enter_critical_section+0x10>)
   1243e:	4798      	blx	r3
}
   12440:	46c0      	nop			; (mov r8, r8)
   12442:	46bd      	mov	sp, r7
   12444:	bd80      	pop	{r7, pc}
   12446:	46c0      	nop			; (mov r8, r8)
   12448:	00027f4d 	.word	0x00027f4d

0001244c <system_interrupt_leave_critical_section>:
{
   1244c:	b580      	push	{r7, lr}
   1244e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12450:	4b02      	ldr	r3, [pc, #8]	; (1245c <system_interrupt_leave_critical_section+0x10>)
   12452:	4798      	blx	r3
}
   12454:	46c0      	nop			; (mov r8, r8)
   12456:	46bd      	mov	sp, r7
   12458:	bd80      	pop	{r7, pc}
   1245a:	46c0      	nop			; (mov r8, r8)
   1245c:	00027fa1 	.word	0x00027fa1

00012460 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12460:	b580      	push	{r7, lr}
   12462:	b086      	sub	sp, #24
   12464:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12466:	4b49      	ldr	r3, [pc, #292]	; (1258c <DMAC_Handler+0x12c>)
   12468:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1246a:	4b49      	ldr	r3, [pc, #292]	; (12590 <DMAC_Handler+0x130>)
   1246c:	8c1b      	ldrh	r3, [r3, #32]
   1246e:	b29b      	uxth	r3, r3
   12470:	b2da      	uxtb	r2, r3
   12472:	2317      	movs	r3, #23
   12474:	18fb      	adds	r3, r7, r3
   12476:	210f      	movs	r1, #15
   12478:	400a      	ands	r2, r1
   1247a:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1247c:	2317      	movs	r3, #23
   1247e:	18fb      	adds	r3, r7, r3
   12480:	781a      	ldrb	r2, [r3, #0]
   12482:	4b44      	ldr	r3, [pc, #272]	; (12594 <DMAC_Handler+0x134>)
   12484:	0092      	lsls	r2, r2, #2
   12486:	58d3      	ldr	r3, [r2, r3]
   12488:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1248a:	4a41      	ldr	r2, [pc, #260]	; (12590 <DMAC_Handler+0x130>)
   1248c:	693b      	ldr	r3, [r7, #16]
   1248e:	781b      	ldrb	r3, [r3, #0]
   12490:	210f      	movs	r1, #15
   12492:	400b      	ands	r3, r1
   12494:	b2d9      	uxtb	r1, r3
   12496:	233f      	movs	r3, #63	; 0x3f
   12498:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   1249a:	493d      	ldr	r1, [pc, #244]	; (12590 <DMAC_Handler+0x130>)
   1249c:	230f      	movs	r3, #15
   1249e:	18fb      	adds	r3, r7, r3
   124a0:	224e      	movs	r2, #78	; 0x4e
   124a2:	5c8a      	ldrb	r2, [r1, r2]
   124a4:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   124a6:	693b      	ldr	r3, [r7, #16]
   124a8:	781b      	ldrb	r3, [r3, #0]
   124aa:	4a3b      	ldr	r2, [pc, #236]	; (12598 <DMAC_Handler+0x138>)
   124ac:	011b      	lsls	r3, r3, #4
   124ae:	18d3      	adds	r3, r2, r3
   124b0:	3302      	adds	r3, #2
   124b2:	881b      	ldrh	r3, [r3, #0]
   124b4:	b29b      	uxth	r3, r3
   124b6:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   124b8:	693b      	ldr	r3, [r7, #16]
   124ba:	781b      	ldrb	r3, [r3, #0]
   124bc:	4a37      	ldr	r2, [pc, #220]	; (1259c <DMAC_Handler+0x13c>)
   124be:	011b      	lsls	r3, r3, #4
   124c0:	18d3      	adds	r3, r2, r3
   124c2:	3302      	adds	r3, #2
   124c4:	881b      	ldrh	r3, [r3, #0]
   124c6:	b29b      	uxth	r3, r3
   124c8:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   124ca:	68ba      	ldr	r2, [r7, #8]
   124cc:	687b      	ldr	r3, [r7, #4]
   124ce:	1ad2      	subs	r2, r2, r3
   124d0:	693b      	ldr	r3, [r7, #16]
   124d2:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   124d4:	230f      	movs	r3, #15
   124d6:	18fb      	adds	r3, r7, r3
   124d8:	781b      	ldrb	r3, [r3, #0]
   124da:	2201      	movs	r2, #1
   124dc:	4013      	ands	r3, r2
   124de:	d016      	beq.n	1250e <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   124e0:	4a2b      	ldr	r2, [pc, #172]	; (12590 <DMAC_Handler+0x130>)
   124e2:	234e      	movs	r3, #78	; 0x4e
   124e4:	2101      	movs	r1, #1
   124e6:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   124e8:	693b      	ldr	r3, [r7, #16]
   124ea:	2210      	movs	r2, #16
   124ec:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   124ee:	693b      	ldr	r3, [r7, #16]
   124f0:	7c1b      	ldrb	r3, [r3, #16]
   124f2:	001a      	movs	r2, r3
   124f4:	2301      	movs	r3, #1
   124f6:	4013      	ands	r3, r2
   124f8:	d042      	beq.n	12580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   124fa:	693b      	ldr	r3, [r7, #16]
   124fc:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   124fe:	2b00      	cmp	r3, #0
   12500:	d03e      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12502:	693b      	ldr	r3, [r7, #16]
   12504:	685b      	ldr	r3, [r3, #4]
   12506:	693a      	ldr	r2, [r7, #16]
   12508:	0010      	movs	r0, r2
   1250a:	4798      	blx	r3
   1250c:	e038      	b.n	12580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1250e:	230f      	movs	r3, #15
   12510:	18fb      	adds	r3, r7, r3
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	2202      	movs	r2, #2
   12516:	4013      	ands	r3, r2
   12518:	d016      	beq.n	12548 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1251a:	4a1d      	ldr	r2, [pc, #116]	; (12590 <DMAC_Handler+0x130>)
   1251c:	234e      	movs	r3, #78	; 0x4e
   1251e:	2102      	movs	r1, #2
   12520:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12522:	693b      	ldr	r3, [r7, #16]
   12524:	2200      	movs	r2, #0
   12526:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12528:	693b      	ldr	r3, [r7, #16]
   1252a:	7c1b      	ldrb	r3, [r3, #16]
   1252c:	001a      	movs	r2, r3
   1252e:	2302      	movs	r3, #2
   12530:	4013      	ands	r3, r2
   12532:	d025      	beq.n	12580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12534:	693b      	ldr	r3, [r7, #16]
   12536:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12538:	2b00      	cmp	r3, #0
   1253a:	d021      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1253c:	693b      	ldr	r3, [r7, #16]
   1253e:	689b      	ldr	r3, [r3, #8]
   12540:	693a      	ldr	r2, [r7, #16]
   12542:	0010      	movs	r0, r2
   12544:	4798      	blx	r3
   12546:	e01b      	b.n	12580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12548:	230f      	movs	r3, #15
   1254a:	18fb      	adds	r3, r7, r3
   1254c:	781b      	ldrb	r3, [r3, #0]
   1254e:	2204      	movs	r2, #4
   12550:	4013      	ands	r3, r2
   12552:	d015      	beq.n	12580 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12554:	4a0e      	ldr	r2, [pc, #56]	; (12590 <DMAC_Handler+0x130>)
   12556:	234e      	movs	r3, #78	; 0x4e
   12558:	2104      	movs	r1, #4
   1255a:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1255c:	693b      	ldr	r3, [r7, #16]
   1255e:	2206      	movs	r2, #6
   12560:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12562:	693b      	ldr	r3, [r7, #16]
   12564:	7c1b      	ldrb	r3, [r3, #16]
   12566:	001a      	movs	r2, r3
   12568:	2304      	movs	r3, #4
   1256a:	4013      	ands	r3, r2
   1256c:	d008      	beq.n	12580 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1256e:	693b      	ldr	r3, [r7, #16]
   12570:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12572:	2b00      	cmp	r3, #0
   12574:	d004      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12576:	693b      	ldr	r3, [r7, #16]
   12578:	68db      	ldr	r3, [r3, #12]
   1257a:	693a      	ldr	r2, [r7, #16]
   1257c:	0010      	movs	r0, r2
   1257e:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12580:	4b07      	ldr	r3, [pc, #28]	; (125a0 <DMAC_Handler+0x140>)
   12582:	4798      	blx	r3
}
   12584:	46c0      	nop			; (mov r8, r8)
   12586:	46bd      	mov	sp, r7
   12588:	b006      	add	sp, #24
   1258a:	bd80      	pop	{r7, pc}
   1258c:	00012439 	.word	0x00012439
   12590:	41004800 	.word	0x41004800
   12594:	20000360 	.word	0x20000360
   12598:	20004360 	.word	0x20004360
   1259c:	20000310 	.word	0x20000310
   125a0:	0001244d 	.word	0x0001244d

000125a4 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   125a4:	b580      	push	{r7, lr}
   125a6:	b082      	sub	sp, #8
   125a8:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   125aa:	4b15      	ldr	r3, [pc, #84]	; (12600 <EVSYS_Handler+0x5c>)
   125ac:	691b      	ldr	r3, [r3, #16]
   125ae:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   125b0:	4b14      	ldr	r3, [pc, #80]	; (12604 <EVSYS_Handler+0x60>)
   125b2:	699b      	ldr	r3, [r3, #24]
   125b4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   125b6:	4b12      	ldr	r3, [pc, #72]	; (12600 <EVSYS_Handler+0x5c>)
   125b8:	689a      	ldr	r2, [r3, #8]
   125ba:	683b      	ldr	r3, [r7, #0]
   125bc:	431a      	orrs	r2, r3
   125be:	4b10      	ldr	r3, [pc, #64]	; (12600 <EVSYS_Handler+0x5c>)
   125c0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   125c2:	4b10      	ldr	r3, [pc, #64]	; (12604 <EVSYS_Handler+0x60>)
   125c4:	4a10      	ldr	r2, [pc, #64]	; (12608 <EVSYS_Handler+0x64>)
   125c6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   125c8:	e008      	b.n	125dc <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   125ca:	687b      	ldr	r3, [r7, #4]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	687b      	ldr	r3, [r7, #4]
   125d0:	681b      	ldr	r3, [r3, #0]
   125d2:	0018      	movs	r0, r3
   125d4:	4790      	blx	r2
		current_hook = current_hook->next;
   125d6:	687b      	ldr	r3, [r7, #4]
   125d8:	689b      	ldr	r3, [r3, #8]
   125da:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   125dc:	687b      	ldr	r3, [r7, #4]
   125de:	2b00      	cmp	r3, #0
   125e0:	d1f3      	bne.n	125ca <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   125e2:	4b07      	ldr	r3, [pc, #28]	; (12600 <EVSYS_Handler+0x5c>)
   125e4:	68db      	ldr	r3, [r3, #12]
   125e6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   125e8:	4b05      	ldr	r3, [pc, #20]	; (12600 <EVSYS_Handler+0x5c>)
   125ea:	689b      	ldr	r3, [r3, #8]
   125ec:	683a      	ldr	r2, [r7, #0]
   125ee:	43d2      	mvns	r2, r2
   125f0:	401a      	ands	r2, r3
   125f2:	4b03      	ldr	r3, [pc, #12]	; (12600 <EVSYS_Handler+0x5c>)
   125f4:	609a      	str	r2, [r3, #8]
}
   125f6:	46c0      	nop			; (mov r8, r8)
   125f8:	46bd      	mov	sp, r7
   125fa:	b002      	add	sp, #8
   125fc:	bd80      	pop	{r7, pc}
   125fe:	46c0      	nop			; (mov r8, r8)
   12600:	20000000 	.word	0x20000000
   12604:	42000400 	.word	0x42000400
   12608:	0f0fffff 	.word	0x0f0fffff

0001260c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1260c:	b580      	push	{r7, lr}
   1260e:	b082      	sub	sp, #8
   12610:	af00      	add	r7, sp, #0
   12612:	0002      	movs	r2, r0
   12614:	6039      	str	r1, [r7, #0]
   12616:	1dfb      	adds	r3, r7, #7
   12618:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1261a:	1dfb      	adds	r3, r7, #7
   1261c:	781b      	ldrb	r3, [r3, #0]
   1261e:	2b01      	cmp	r3, #1
   12620:	d00a      	beq.n	12638 <system_apb_clock_set_mask+0x2c>
   12622:	2b02      	cmp	r3, #2
   12624:	d00f      	beq.n	12646 <system_apb_clock_set_mask+0x3a>
   12626:	2b00      	cmp	r3, #0
   12628:	d114      	bne.n	12654 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1262a:	4b0e      	ldr	r3, [pc, #56]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262c:	4a0d      	ldr	r2, [pc, #52]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262e:	6991      	ldr	r1, [r2, #24]
   12630:	683a      	ldr	r2, [r7, #0]
   12632:	430a      	orrs	r2, r1
   12634:	619a      	str	r2, [r3, #24]
			break;
   12636:	e00f      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12638:	4b0a      	ldr	r3, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263a:	4a0a      	ldr	r2, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263c:	69d1      	ldr	r1, [r2, #28]
   1263e:	683a      	ldr	r2, [r7, #0]
   12640:	430a      	orrs	r2, r1
   12642:	61da      	str	r2, [r3, #28]
			break;
   12644:	e008      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12646:	4b07      	ldr	r3, [pc, #28]	; (12664 <system_apb_clock_set_mask+0x58>)
   12648:	4a06      	ldr	r2, [pc, #24]	; (12664 <system_apb_clock_set_mask+0x58>)
   1264a:	6a11      	ldr	r1, [r2, #32]
   1264c:	683a      	ldr	r2, [r7, #0]
   1264e:	430a      	orrs	r2, r1
   12650:	621a      	str	r2, [r3, #32]
			break;
   12652:	e001      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12654:	2317      	movs	r3, #23
   12656:	e000      	b.n	1265a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   12658:	2300      	movs	r3, #0
}
   1265a:	0018      	movs	r0, r3
   1265c:	46bd      	mov	sp, r7
   1265e:	b002      	add	sp, #8
   12660:	bd80      	pop	{r7, pc}
   12662:	46c0      	nop			; (mov r8, r8)
   12664:	40000400 	.word	0x40000400

00012668 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   12668:	b580      	push	{r7, lr}
   1266a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   1266c:	2102      	movs	r1, #2
   1266e:	2002      	movs	r0, #2
   12670:	4b07      	ldr	r3, [pc, #28]	; (12690 <_system_events_init+0x28>)
   12672:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   12674:	4b07      	ldr	r3, [pc, #28]	; (12694 <_system_events_init+0x2c>)
   12676:	2201      	movs	r2, #1
   12678:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   1267a:	46c0      	nop			; (mov r8, r8)
   1267c:	4b05      	ldr	r3, [pc, #20]	; (12694 <_system_events_init+0x2c>)
   1267e:	781b      	ldrb	r3, [r3, #0]
   12680:	b2db      	uxtb	r3, r3
   12682:	001a      	movs	r2, r3
   12684:	2301      	movs	r3, #1
   12686:	4013      	ands	r3, r2
   12688:	d1f8      	bne.n	1267c <_system_events_init+0x14>
	}
}
   1268a:	46c0      	nop			; (mov r8, r8)
   1268c:	46bd      	mov	sp, r7
   1268e:	bd80      	pop	{r7, pc}
   12690:	0001260d 	.word	0x0001260d
   12694:	42000400 	.word	0x42000400

00012698 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   12698:	b580      	push	{r7, lr}
   1269a:	b084      	sub	sp, #16
   1269c:	af00      	add	r7, sp, #0
   1269e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   126a0:	687b      	ldr	r3, [r7, #4]
   126a2:	681b      	ldr	r3, [r3, #0]
   126a4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   126a6:	68fb      	ldr	r3, [r7, #12]
   126a8:	69db      	ldr	r3, [r3, #28]
   126aa:	2207      	movs	r2, #7
   126ac:	4013      	ands	r3, r2
   126ae:	1e5a      	subs	r2, r3, #1
   126b0:	4193      	sbcs	r3, r2
   126b2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   126b4:	0018      	movs	r0, r3
   126b6:	46bd      	mov	sp, r7
   126b8:	b004      	add	sp, #16
   126ba:	bd80      	pop	{r7, pc}

000126bc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   126bc:	b580      	push	{r7, lr}
   126be:	b082      	sub	sp, #8
   126c0:	af00      	add	r7, sp, #0
   126c2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   126c4:	46c0      	nop			; (mov r8, r8)
   126c6:	687b      	ldr	r3, [r7, #4]
   126c8:	0018      	movs	r0, r3
   126ca:	4b04      	ldr	r3, [pc, #16]	; (126dc <_i2c_master_wait_for_sync+0x20>)
   126cc:	4798      	blx	r3
   126ce:	1e03      	subs	r3, r0, #0
   126d0:	d1f9      	bne.n	126c6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   126d2:	46c0      	nop			; (mov r8, r8)
   126d4:	46bd      	mov	sp, r7
   126d6:	b002      	add	sp, #8
   126d8:	bd80      	pop	{r7, pc}
   126da:	46c0      	nop			; (mov r8, r8)
   126dc:	00012699 	.word	0x00012699

000126e0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   126e0:	b580      	push	{r7, lr}
   126e2:	b084      	sub	sp, #16
   126e4:	af00      	add	r7, sp, #0
   126e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   126e8:	687b      	ldr	r3, [r7, #4]
   126ea:	681b      	ldr	r3, [r3, #0]
   126ec:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   126ee:	68fb      	ldr	r3, [r7, #12]
   126f0:	681b      	ldr	r3, [r3, #0]
   126f2:	011b      	lsls	r3, r3, #4
   126f4:	0fdb      	lsrs	r3, r3, #31
   126f6:	b2db      	uxtb	r3, r3
   126f8:	001a      	movs	r2, r3
   126fa:	230b      	movs	r3, #11
   126fc:	18fb      	adds	r3, r7, r3
   126fe:	1e51      	subs	r1, r2, #1
   12700:	418a      	sbcs	r2, r1
   12702:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   12704:	2308      	movs	r3, #8
   12706:	18fb      	adds	r3, r7, r3
   12708:	687a      	ldr	r2, [r7, #4]
   1270a:	8b52      	ldrh	r2, [r2, #26]
   1270c:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   1270e:	687b      	ldr	r3, [r7, #4]
   12710:	8b9b      	ldrh	r3, [r3, #28]
   12712:	b29a      	uxth	r2, r3
   12714:	2308      	movs	r3, #8
   12716:	18fb      	adds	r3, r7, r3
   12718:	2108      	movs	r1, #8
   1271a:	1879      	adds	r1, r7, r1
   1271c:	8809      	ldrh	r1, [r1, #0]
   1271e:	1a8a      	subs	r2, r1, r2
   12720:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12722:	687b      	ldr	r3, [r7, #4]
   12724:	8b9b      	ldrh	r3, [r3, #28]
   12726:	b29b      	uxth	r3, r3
   12728:	3b01      	subs	r3, #1
   1272a:	b29a      	uxth	r2, r3
   1272c:	687b      	ldr	r3, [r7, #4]
   1272e:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   12730:	230b      	movs	r3, #11
   12732:	18fb      	adds	r3, r7, r3
   12734:	781b      	ldrb	r3, [r3, #0]
   12736:	2b00      	cmp	r3, #0
   12738:	d010      	beq.n	1275c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   1273a:	687b      	ldr	r3, [r7, #4]
   1273c:	7adb      	ldrb	r3, [r3, #11]
   1273e:	2b00      	cmp	r3, #0
   12740:	d01c      	beq.n	1277c <_i2c_master_read+0x9c>
   12742:	687b      	ldr	r3, [r7, #4]
   12744:	8b9b      	ldrh	r3, [r3, #28]
   12746:	b29b      	uxth	r3, r3
   12748:	2b01      	cmp	r3, #1
   1274a:	d117      	bne.n	1277c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1274c:	68fb      	ldr	r3, [r7, #12]
   1274e:	685b      	ldr	r3, [r3, #4]
   12750:	2280      	movs	r2, #128	; 0x80
   12752:	02d2      	lsls	r2, r2, #11
   12754:	431a      	orrs	r2, r3
   12756:	68fb      	ldr	r3, [r7, #12]
   12758:	605a      	str	r2, [r3, #4]
   1275a:	e00f      	b.n	1277c <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   1275c:	687b      	ldr	r3, [r7, #4]
   1275e:	7adb      	ldrb	r3, [r3, #11]
   12760:	2b00      	cmp	r3, #0
   12762:	d00b      	beq.n	1277c <_i2c_master_read+0x9c>
   12764:	687b      	ldr	r3, [r7, #4]
   12766:	8b9b      	ldrh	r3, [r3, #28]
   12768:	b29b      	uxth	r3, r3
   1276a:	2b00      	cmp	r3, #0
   1276c:	d106      	bne.n	1277c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1276e:	68fb      	ldr	r3, [r7, #12]
   12770:	685b      	ldr	r3, [r3, #4]
   12772:	2280      	movs	r2, #128	; 0x80
   12774:	02d2      	lsls	r2, r2, #11
   12776:	431a      	orrs	r2, r3
   12778:	68fb      	ldr	r3, [r7, #12]
   1277a:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   1277c:	687b      	ldr	r3, [r7, #4]
   1277e:	8b9b      	ldrh	r3, [r3, #28]
   12780:	b29b      	uxth	r3, r3
   12782:	2b00      	cmp	r3, #0
   12784:	d10e      	bne.n	127a4 <_i2c_master_read+0xc4>
		if (module->send_stop) {
   12786:	687b      	ldr	r3, [r7, #4]
   12788:	7a9b      	ldrb	r3, [r3, #10]
   1278a:	2b00      	cmp	r3, #0
   1278c:	d00a      	beq.n	127a4 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1278e:	687b      	ldr	r3, [r7, #4]
   12790:	0018      	movs	r0, r3
   12792:	4b0e      	ldr	r3, [pc, #56]	; (127cc <_i2c_master_read+0xec>)
   12794:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12796:	68fb      	ldr	r3, [r7, #12]
   12798:	685b      	ldr	r3, [r3, #4]
   1279a:	22c0      	movs	r2, #192	; 0xc0
   1279c:	0292      	lsls	r2, r2, #10
   1279e:	431a      	orrs	r2, r3
   127a0:	68fb      	ldr	r3, [r7, #12]
   127a2:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   127a4:	687b      	ldr	r3, [r7, #4]
   127a6:	0018      	movs	r0, r3
   127a8:	4b08      	ldr	r3, [pc, #32]	; (127cc <_i2c_master_read+0xec>)
   127aa:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   127ac:	687b      	ldr	r3, [r7, #4]
   127ae:	6a1a      	ldr	r2, [r3, #32]
   127b0:	2308      	movs	r3, #8
   127b2:	18fb      	adds	r3, r7, r3
   127b4:	881b      	ldrh	r3, [r3, #0]
   127b6:	18d3      	adds	r3, r2, r3
   127b8:	68fa      	ldr	r2, [r7, #12]
   127ba:	2128      	movs	r1, #40	; 0x28
   127bc:	5c52      	ldrb	r2, [r2, r1]
   127be:	b2d2      	uxtb	r2, r2
   127c0:	701a      	strb	r2, [r3, #0]
}
   127c2:	46c0      	nop			; (mov r8, r8)
   127c4:	46bd      	mov	sp, r7
   127c6:	b004      	add	sp, #16
   127c8:	bd80      	pop	{r7, pc}
   127ca:	46c0      	nop			; (mov r8, r8)
   127cc:	000126bd 	.word	0x000126bd

000127d0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   127d0:	b580      	push	{r7, lr}
   127d2:	b084      	sub	sp, #16
   127d4:	af00      	add	r7, sp, #0
   127d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   127d8:	687b      	ldr	r3, [r7, #4]
   127da:	681b      	ldr	r3, [r3, #0]
   127dc:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   127de:	68fb      	ldr	r3, [r7, #12]
   127e0:	8b5b      	ldrh	r3, [r3, #26]
   127e2:	b29b      	uxth	r3, r3
   127e4:	001a      	movs	r2, r3
   127e6:	2304      	movs	r3, #4
   127e8:	4013      	ands	r3, r2
   127ea:	d004      	beq.n	127f6 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   127ec:	687b      	ldr	r3, [r7, #4]
   127ee:	2225      	movs	r2, #37	; 0x25
   127f0:	211e      	movs	r1, #30
   127f2:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   127f4:	e024      	b.n	12840 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   127f6:	230a      	movs	r3, #10
   127f8:	18fb      	adds	r3, r7, r3
   127fa:	687a      	ldr	r2, [r7, #4]
   127fc:	8b52      	ldrh	r2, [r2, #26]
   127fe:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   12800:	687b      	ldr	r3, [r7, #4]
   12802:	8b9b      	ldrh	r3, [r3, #28]
   12804:	b29a      	uxth	r2, r3
   12806:	230a      	movs	r3, #10
   12808:	18fb      	adds	r3, r7, r3
   1280a:	210a      	movs	r1, #10
   1280c:	1879      	adds	r1, r7, r1
   1280e:	8809      	ldrh	r1, [r1, #0]
   12810:	1a8a      	subs	r2, r1, r2
   12812:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12814:	687b      	ldr	r3, [r7, #4]
   12816:	8b9b      	ldrh	r3, [r3, #28]
   12818:	b29b      	uxth	r3, r3
   1281a:	3b01      	subs	r3, #1
   1281c:	b29a      	uxth	r2, r3
   1281e:	687b      	ldr	r3, [r7, #4]
   12820:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   12822:	687b      	ldr	r3, [r7, #4]
   12824:	0018      	movs	r0, r3
   12826:	4b08      	ldr	r3, [pc, #32]	; (12848 <_i2c_master_write+0x78>)
   12828:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   1282a:	687b      	ldr	r3, [r7, #4]
   1282c:	6a1a      	ldr	r2, [r3, #32]
   1282e:	230a      	movs	r3, #10
   12830:	18fb      	adds	r3, r7, r3
   12832:	881b      	ldrh	r3, [r3, #0]
   12834:	18d3      	adds	r3, r2, r3
   12836:	781b      	ldrb	r3, [r3, #0]
   12838:	b2d9      	uxtb	r1, r3
   1283a:	68fb      	ldr	r3, [r7, #12]
   1283c:	2228      	movs	r2, #40	; 0x28
   1283e:	5499      	strb	r1, [r3, r2]
}
   12840:	46bd      	mov	sp, r7
   12842:	b004      	add	sp, #16
   12844:	bd80      	pop	{r7, pc}
   12846:	46c0      	nop			; (mov r8, r8)
   12848:	000126bd 	.word	0x000126bd

0001284c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   1284c:	b580      	push	{r7, lr}
   1284e:	b084      	sub	sp, #16
   12850:	af00      	add	r7, sp, #0
   12852:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12854:	687b      	ldr	r3, [r7, #4]
   12856:	681b      	ldr	r3, [r3, #0]
   12858:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   1285a:	68fb      	ldr	r3, [r7, #12]
   1285c:	7e1b      	ldrb	r3, [r3, #24]
   1285e:	b2db      	uxtb	r3, r3
   12860:	001a      	movs	r2, r3
   12862:	2301      	movs	r3, #1
   12864:	4013      	ands	r3, r2
   12866:	d02b      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   12868:	68fb      	ldr	r3, [r7, #12]
   1286a:	2201      	movs	r2, #1
   1286c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1286e:	68fb      	ldr	r3, [r7, #12]
   12870:	8b5b      	ldrh	r3, [r3, #26]
   12872:	b29b      	uxth	r3, r3
   12874:	001a      	movs	r2, r3
   12876:	2302      	movs	r3, #2
   12878:	4013      	ands	r3, r2
   1287a:	d004      	beq.n	12886 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   1287c:	687b      	ldr	r3, [r7, #4]
   1287e:	2225      	movs	r2, #37	; 0x25
   12880:	2141      	movs	r1, #65	; 0x41
   12882:	5499      	strb	r1, [r3, r2]
   12884:	e01c      	b.n	128c0 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   12886:	68fb      	ldr	r3, [r7, #12]
   12888:	8b5b      	ldrh	r3, [r3, #26]
   1288a:	b29b      	uxth	r3, r3
   1288c:	001a      	movs	r2, r3
   1288e:	2304      	movs	r3, #4
   12890:	4013      	ands	r3, r2
   12892:	d015      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   12894:	687b      	ldr	r3, [r7, #4]
   12896:	2225      	movs	r2, #37	; 0x25
   12898:	2118      	movs	r1, #24
   1289a:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   1289c:	687b      	ldr	r3, [r7, #4]
   1289e:	2200      	movs	r2, #0
   128a0:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   128a2:	687b      	ldr	r3, [r7, #4]
   128a4:	7a9b      	ldrb	r3, [r3, #10]
   128a6:	2b00      	cmp	r3, #0
   128a8:	d00a      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   128aa:	687b      	ldr	r3, [r7, #4]
   128ac:	0018      	movs	r0, r3
   128ae:	4b13      	ldr	r3, [pc, #76]	; (128fc <_i2c_master_async_address_response+0xb0>)
   128b0:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   128b2:	68fb      	ldr	r3, [r7, #12]
   128b4:	685b      	ldr	r3, [r3, #4]
   128b6:	22c0      	movs	r2, #192	; 0xc0
   128b8:	0292      	lsls	r2, r2, #10
   128ba:	431a      	orrs	r2, r3
   128bc:	68fb      	ldr	r3, [r7, #12]
   128be:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   128c0:	687b      	ldr	r3, [r7, #4]
   128c2:	8b9b      	ldrh	r3, [r3, #28]
   128c4:	b29a      	uxth	r2, r3
   128c6:	687b      	ldr	r3, [r7, #4]
   128c8:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   128ca:	687b      	ldr	r3, [r7, #4]
   128cc:	2225      	movs	r2, #37	; 0x25
   128ce:	5c9b      	ldrb	r3, [r3, r2]
   128d0:	b2db      	uxtb	r3, r3
   128d2:	2b05      	cmp	r3, #5
   128d4:	d10e      	bne.n	128f4 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   128d6:	687b      	ldr	r3, [r7, #4]
   128d8:	2224      	movs	r2, #36	; 0x24
   128da:	5c9b      	ldrb	r3, [r3, r2]
   128dc:	b2db      	uxtb	r3, r3
   128de:	2b00      	cmp	r3, #0
   128e0:	d104      	bne.n	128ec <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   128e2:	687b      	ldr	r3, [r7, #4]
   128e4:	0018      	movs	r0, r3
   128e6:	4b06      	ldr	r3, [pc, #24]	; (12900 <_i2c_master_async_address_response+0xb4>)
   128e8:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   128ea:	e003      	b.n	128f4 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   128ec:	687b      	ldr	r3, [r7, #4]
   128ee:	0018      	movs	r0, r3
   128f0:	4b04      	ldr	r3, [pc, #16]	; (12904 <_i2c_master_async_address_response+0xb8>)
   128f2:	4798      	blx	r3
}
   128f4:	46c0      	nop			; (mov r8, r8)
   128f6:	46bd      	mov	sp, r7
   128f8:	b004      	add	sp, #16
   128fa:	bd80      	pop	{r7, pc}
   128fc:	000126bd 	.word	0x000126bd
   12900:	000127d1 	.word	0x000127d1
   12904:	000126e1 	.word	0x000126e1

00012908 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   12908:	b580      	push	{r7, lr}
   1290a:	b084      	sub	sp, #16
   1290c:	af00      	add	r7, sp, #0
   1290e:	60f8      	str	r0, [r7, #12]
   12910:	60b9      	str	r1, [r7, #8]
   12912:	1dfb      	adds	r3, r7, #7
   12914:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	68fa      	ldr	r2, [r7, #12]
   1291c:	3302      	adds	r3, #2
   1291e:	009b      	lsls	r3, r3, #2
   12920:	18d3      	adds	r3, r2, r3
   12922:	3304      	adds	r3, #4
   12924:	68ba      	ldr	r2, [r7, #8]
   12926:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   12928:	68fb      	ldr	r3, [r7, #12]
   1292a:	7e1b      	ldrb	r3, [r3, #24]
   1292c:	b2db      	uxtb	r3, r3
   1292e:	b25a      	sxtb	r2, r3
   12930:	1dfb      	adds	r3, r7, #7
   12932:	781b      	ldrb	r3, [r3, #0]
   12934:	2101      	movs	r1, #1
   12936:	4099      	lsls	r1, r3
   12938:	000b      	movs	r3, r1
   1293a:	b25b      	sxtb	r3, r3
   1293c:	4313      	orrs	r3, r2
   1293e:	b25b      	sxtb	r3, r3
   12940:	b2da      	uxtb	r2, r3
   12942:	68fb      	ldr	r3, [r7, #12]
   12944:	761a      	strb	r2, [r3, #24]
}
   12946:	46c0      	nop			; (mov r8, r8)
   12948:	46bd      	mov	sp, r7
   1294a:	b004      	add	sp, #16
   1294c:	bd80      	pop	{r7, pc}
	...

00012950 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12950:	b590      	push	{r4, r7, lr}
   12952:	b087      	sub	sp, #28
   12954:	af00      	add	r7, sp, #0
   12956:	6078      	str	r0, [r7, #4]
   12958:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1295a:	687b      	ldr	r3, [r7, #4]
   1295c:	681b      	ldr	r3, [r3, #0]
   1295e:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   12960:	683b      	ldr	r3, [r7, #0]
   12962:	685a      	ldr	r2, [r3, #4]
   12964:	687b      	ldr	r3, [r7, #4]
   12966:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12968:	683b      	ldr	r3, [r7, #0]
   1296a:	885a      	ldrh	r2, [r3, #2]
   1296c:	687b      	ldr	r3, [r7, #4]
   1296e:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   12970:	687b      	ldr	r3, [r7, #4]
   12972:	2224      	movs	r2, #36	; 0x24
   12974:	2101      	movs	r1, #1
   12976:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12978:	687b      	ldr	r3, [r7, #4]
   1297a:	2225      	movs	r2, #37	; 0x25
   1297c:	2105      	movs	r1, #5
   1297e:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12980:	693b      	ldr	r3, [r7, #16]
   12982:	681b      	ldr	r3, [r3, #0]
   12984:	011b      	lsls	r3, r3, #4
   12986:	0fdb      	lsrs	r3, r3, #31
   12988:	b2db      	uxtb	r3, r3
   1298a:	001a      	movs	r2, r3
   1298c:	230f      	movs	r3, #15
   1298e:	18fb      	adds	r3, r7, r3
   12990:	1e51      	subs	r1, r2, #1
   12992:	418a      	sbcs	r2, r1
   12994:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12996:	683b      	ldr	r3, [r7, #0]
   12998:	7a5b      	ldrb	r3, [r3, #9]
   1299a:	2b00      	cmp	r3, #0
   1299c:	d006      	beq.n	129ac <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   1299e:	683b      	ldr	r3, [r7, #0]
   129a0:	7a9a      	ldrb	r2, [r3, #10]
   129a2:	687b      	ldr	r3, [r7, #4]
   129a4:	0011      	movs	r1, r2
   129a6:	0018      	movs	r0, r3
   129a8:	4b3b      	ldr	r3, [pc, #236]	; (12a98 <_i2c_master_read_packet+0x148>)
   129aa:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   129ac:	230f      	movs	r3, #15
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	781b      	ldrb	r3, [r3, #0]
   129b2:	2b00      	cmp	r3, #0
   129b4:	d00b      	beq.n	129ce <_i2c_master_read_packet+0x7e>
   129b6:	683b      	ldr	r3, [r7, #0]
   129b8:	885b      	ldrh	r3, [r3, #2]
   129ba:	2b01      	cmp	r3, #1
   129bc:	d107      	bne.n	129ce <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   129be:	693b      	ldr	r3, [r7, #16]
   129c0:	685b      	ldr	r3, [r3, #4]
   129c2:	2280      	movs	r2, #128	; 0x80
   129c4:	02d2      	lsls	r2, r2, #11
   129c6:	431a      	orrs	r2, r3
   129c8:	693b      	ldr	r3, [r7, #16]
   129ca:	605a      	str	r2, [r3, #4]
   129cc:	e005      	b.n	129da <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   129ce:	693b      	ldr	r3, [r7, #16]
   129d0:	685b      	ldr	r3, [r3, #4]
   129d2:	4a32      	ldr	r2, [pc, #200]	; (12a9c <_i2c_master_read_packet+0x14c>)
   129d4:	401a      	ands	r2, r3
   129d6:	693b      	ldr	r3, [r7, #16]
   129d8:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   129da:	683b      	ldr	r3, [r7, #0]
   129dc:	7a1b      	ldrb	r3, [r3, #8]
   129de:	2b00      	cmp	r3, #0
   129e0:	d045      	beq.n	12a6e <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   129e2:	683b      	ldr	r3, [r7, #0]
   129e4:	881b      	ldrh	r3, [r3, #0]
   129e6:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129e8:	683b      	ldr	r3, [r7, #0]
   129ea:	7a5b      	ldrb	r3, [r3, #9]
   129ec:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   129ee:	4313      	orrs	r3, r2
   129f0:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129f2:	2380      	movs	r3, #128	; 0x80
   129f4:	021b      	lsls	r3, r3, #8
   129f6:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   129f8:	693b      	ldr	r3, [r7, #16]
   129fa:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   129fc:	2317      	movs	r3, #23
   129fe:	18fc      	adds	r4, r7, r3
   12a00:	687b      	ldr	r3, [r7, #4]
   12a02:	0018      	movs	r0, r3
   12a04:	4b26      	ldr	r3, [pc, #152]	; (12aa0 <_i2c_master_read_packet+0x150>)
   12a06:	4798      	blx	r3
   12a08:	0003      	movs	r3, r0
   12a0a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12a0c:	693b      	ldr	r3, [r7, #16]
   12a0e:	685b      	ldr	r3, [r3, #4]
   12a10:	4a22      	ldr	r2, [pc, #136]	; (12a9c <_i2c_master_read_packet+0x14c>)
   12a12:	401a      	ands	r2, r3
   12a14:	693b      	ldr	r3, [r7, #16]
   12a16:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   12a18:	2317      	movs	r3, #23
   12a1a:	18fb      	adds	r3, r7, r3
   12a1c:	781b      	ldrb	r3, [r3, #0]
   12a1e:	2b00      	cmp	r3, #0
   12a20:	d107      	bne.n	12a32 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   12a22:	2317      	movs	r3, #23
   12a24:	18fc      	adds	r4, r7, r3
   12a26:	687b      	ldr	r3, [r7, #4]
   12a28:	0018      	movs	r0, r3
   12a2a:	4b1e      	ldr	r3, [pc, #120]	; (12aa4 <_i2c_master_read_packet+0x154>)
   12a2c:	4798      	blx	r3
   12a2e:	0003      	movs	r3, r0
   12a30:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   12a32:	2317      	movs	r3, #23
   12a34:	18fb      	adds	r3, r7, r3
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	2b00      	cmp	r3, #0
   12a3a:	d114      	bne.n	12a66 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   12a3c:	693b      	ldr	r3, [r7, #16]
   12a3e:	2203      	movs	r2, #3
   12a40:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a42:	683b      	ldr	r3, [r7, #0]
   12a44:	881b      	ldrh	r3, [r3, #0]
   12a46:	0a1b      	lsrs	r3, r3, #8
   12a48:	b29b      	uxth	r3, r3
   12a4a:	2278      	movs	r2, #120	; 0x78
   12a4c:	4313      	orrs	r3, r2
   12a4e:	b29b      	uxth	r3, r3
   12a50:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a52:	683b      	ldr	r3, [r7, #0]
   12a54:	7a5b      	ldrb	r3, [r3, #9]
   12a56:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a58:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a5a:	2201      	movs	r2, #1
   12a5c:	4313      	orrs	r3, r2
   12a5e:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a60:	693b      	ldr	r3, [r7, #16]
   12a62:	625a      	str	r2, [r3, #36]	; 0x24
   12a64:	e012      	b.n	12a8c <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   12a66:	2317      	movs	r3, #23
   12a68:	18fb      	adds	r3, r7, r3
   12a6a:	781b      	ldrb	r3, [r3, #0]
   12a6c:	e00f      	b.n	12a8e <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   12a6e:	693b      	ldr	r3, [r7, #16]
   12a70:	2203      	movs	r2, #3
   12a72:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a74:	683b      	ldr	r3, [r7, #0]
   12a76:	881b      	ldrh	r3, [r3, #0]
   12a78:	005b      	lsls	r3, r3, #1
   12a7a:	2201      	movs	r2, #1
   12a7c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12a7e:	683b      	ldr	r3, [r7, #0]
   12a80:	7a5b      	ldrb	r3, [r3, #9]
   12a82:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a84:	4313      	orrs	r3, r2
   12a86:	001a      	movs	r2, r3
   12a88:	693b      	ldr	r3, [r7, #16]
   12a8a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12a8c:	2300      	movs	r3, #0
}
   12a8e:	0018      	movs	r0, r3
   12a90:	46bd      	mov	sp, r7
   12a92:	b007      	add	sp, #28
   12a94:	bd90      	pop	{r4, r7, pc}
   12a96:	46c0      	nop			; (mov r8, r8)
   12a98:	00019e81 	.word	0x00019e81
   12a9c:	fffbffff 	.word	0xfffbffff
   12aa0:	00019e23 	.word	0x00019e23
   12aa4:	00019dc5 	.word	0x00019dc5

00012aa8 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12aa8:	b580      	push	{r7, lr}
   12aaa:	b082      	sub	sp, #8
   12aac:	af00      	add	r7, sp, #0
   12aae:	6078      	str	r0, [r7, #4]
   12ab0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   12ab2:	687b      	ldr	r3, [r7, #4]
   12ab4:	8b9b      	ldrh	r3, [r3, #28]
   12ab6:	b29b      	uxth	r3, r3
   12ab8:	2b00      	cmp	r3, #0
   12aba:	d001      	beq.n	12ac0 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   12abc:	2305      	movs	r3, #5
   12abe:	e00c      	b.n	12ada <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   12ac0:	687b      	ldr	r3, [r7, #4]
   12ac2:	2201      	movs	r2, #1
   12ac4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12ac6:	687b      	ldr	r3, [r7, #4]
   12ac8:	2201      	movs	r2, #1
   12aca:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   12acc:	683a      	ldr	r2, [r7, #0]
   12ace:	687b      	ldr	r3, [r7, #4]
   12ad0:	0011      	movs	r1, r2
   12ad2:	0018      	movs	r0, r3
   12ad4:	4b03      	ldr	r3, [pc, #12]	; (12ae4 <i2c_master_read_packet_job+0x3c>)
   12ad6:	4798      	blx	r3
   12ad8:	0003      	movs	r3, r0
}
   12ada:	0018      	movs	r0, r3
   12adc:	46bd      	mov	sp, r7
   12ade:	b002      	add	sp, #8
   12ae0:	bd80      	pop	{r7, pc}
   12ae2:	46c0      	nop			; (mov r8, r8)
   12ae4:	00012951 	.word	0x00012951

00012ae8 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12ae8:	b580      	push	{r7, lr}
   12aea:	b084      	sub	sp, #16
   12aec:	af00      	add	r7, sp, #0
   12aee:	6078      	str	r0, [r7, #4]
   12af0:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12af2:	687b      	ldr	r3, [r7, #4]
   12af4:	681b      	ldr	r3, [r3, #0]
   12af6:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12af8:	683b      	ldr	r3, [r7, #0]
   12afa:	7a5b      	ldrb	r3, [r3, #9]
   12afc:	2b00      	cmp	r3, #0
   12afe:	d006      	beq.n	12b0e <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   12b00:	683b      	ldr	r3, [r7, #0]
   12b02:	7a9a      	ldrb	r2, [r3, #10]
   12b04:	687b      	ldr	r3, [r7, #4]
   12b06:	0011      	movs	r1, r2
   12b08:	0018      	movs	r0, r3
   12b0a:	4b1e      	ldr	r3, [pc, #120]	; (12b84 <_i2c_master_write_packet+0x9c>)
   12b0c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12b0e:	68fb      	ldr	r3, [r7, #12]
   12b10:	685b      	ldr	r3, [r3, #4]
   12b12:	4a1d      	ldr	r2, [pc, #116]	; (12b88 <_i2c_master_write_packet+0xa0>)
   12b14:	401a      	ands	r2, r3
   12b16:	68fb      	ldr	r3, [r7, #12]
   12b18:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   12b1a:	683b      	ldr	r3, [r7, #0]
   12b1c:	685a      	ldr	r2, [r3, #4]
   12b1e:	687b      	ldr	r3, [r7, #4]
   12b20:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12b22:	683b      	ldr	r3, [r7, #0]
   12b24:	885a      	ldrh	r2, [r3, #2]
   12b26:	687b      	ldr	r3, [r7, #4]
   12b28:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   12b2a:	687b      	ldr	r3, [r7, #4]
   12b2c:	2224      	movs	r2, #36	; 0x24
   12b2e:	2100      	movs	r1, #0
   12b30:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12b32:	687b      	ldr	r3, [r7, #4]
   12b34:	2225      	movs	r2, #37	; 0x25
   12b36:	2105      	movs	r1, #5
   12b38:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   12b3a:	68fb      	ldr	r3, [r7, #12]
   12b3c:	2203      	movs	r2, #3
   12b3e:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   12b40:	683b      	ldr	r3, [r7, #0]
   12b42:	7a1b      	ldrb	r3, [r3, #8]
   12b44:	2b00      	cmp	r3, #0
   12b46:	d00d      	beq.n	12b64 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b48:	683b      	ldr	r3, [r7, #0]
   12b4a:	881b      	ldrh	r3, [r3, #0]
   12b4c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12b4e:	683b      	ldr	r3, [r7, #0]
   12b50:	7a5b      	ldrb	r3, [r3, #9]
   12b52:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b54:	4313      	orrs	r3, r2
   12b56:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12b58:	2380      	movs	r3, #128	; 0x80
   12b5a:	021b      	lsls	r3, r3, #8
   12b5c:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b5e:	68fb      	ldr	r3, [r7, #12]
   12b60:	625a      	str	r2, [r3, #36]	; 0x24
   12b62:	e009      	b.n	12b78 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b64:	683b      	ldr	r3, [r7, #0]
   12b66:	881b      	ldrh	r3, [r3, #0]
   12b68:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12b6a:	683b      	ldr	r3, [r7, #0]
   12b6c:	7a5b      	ldrb	r3, [r3, #9]
   12b6e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b70:	4313      	orrs	r3, r2
   12b72:	001a      	movs	r2, r3
   12b74:	68fb      	ldr	r3, [r7, #12]
   12b76:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12b78:	2300      	movs	r3, #0
}
   12b7a:	0018      	movs	r0, r3
   12b7c:	46bd      	mov	sp, r7
   12b7e:	b004      	add	sp, #16
   12b80:	bd80      	pop	{r7, pc}
   12b82:	46c0      	nop			; (mov r8, r8)
   12b84:	00019e81 	.word	0x00019e81
   12b88:	fffbffff 	.word	0xfffbffff

00012b8c <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12b8c:	b580      	push	{r7, lr}
   12b8e:	b082      	sub	sp, #8
   12b90:	af00      	add	r7, sp, #0
   12b92:	6078      	str	r0, [r7, #4]
   12b94:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   12b96:	687b      	ldr	r3, [r7, #4]
   12b98:	8b9b      	ldrh	r3, [r3, #28]
   12b9a:	b29b      	uxth	r3, r3
   12b9c:	2b00      	cmp	r3, #0
   12b9e:	d001      	beq.n	12ba4 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   12ba0:	2305      	movs	r3, #5
   12ba2:	e00c      	b.n	12bbe <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   12ba4:	687b      	ldr	r3, [r7, #4]
   12ba6:	2201      	movs	r2, #1
   12ba8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12baa:	687b      	ldr	r3, [r7, #4]
   12bac:	2201      	movs	r2, #1
   12bae:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   12bb0:	683a      	ldr	r2, [r7, #0]
   12bb2:	687b      	ldr	r3, [r7, #4]
   12bb4:	0011      	movs	r1, r2
   12bb6:	0018      	movs	r0, r3
   12bb8:	4b03      	ldr	r3, [pc, #12]	; (12bc8 <i2c_master_write_packet_job+0x3c>)
   12bba:	4798      	blx	r3
   12bbc:	0003      	movs	r3, r0
}
   12bbe:	0018      	movs	r0, r3
   12bc0:	46bd      	mov	sp, r7
   12bc2:	b002      	add	sp, #8
   12bc4:	bd80      	pop	{r7, pc}
   12bc6:	46c0      	nop			; (mov r8, r8)
   12bc8:	00012ae9 	.word	0x00012ae9

00012bcc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   12bcc:	b580      	push	{r7, lr}
   12bce:	b086      	sub	sp, #24
   12bd0:	af00      	add	r7, sp, #0
   12bd2:	0002      	movs	r2, r0
   12bd4:	1dfb      	adds	r3, r7, #7
   12bd6:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   12bd8:	1dfb      	adds	r3, r7, #7
   12bda:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   12bdc:	4b93      	ldr	r3, [pc, #588]	; (12e2c <_i2c_master_interrupt_handler+0x260>)
   12bde:	0092      	lsls	r2, r2, #2
   12be0:	58d3      	ldr	r3, [r2, r3]
   12be2:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12be4:	697b      	ldr	r3, [r7, #20]
   12be6:	681b      	ldr	r3, [r3, #0]
   12be8:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12bea:	693b      	ldr	r3, [r7, #16]
   12bec:	681b      	ldr	r3, [r3, #0]
   12bee:	011b      	lsls	r3, r3, #4
   12bf0:	0fdb      	lsrs	r3, r3, #31
   12bf2:	b2db      	uxtb	r3, r3
   12bf4:	001a      	movs	r2, r3
   12bf6:	230f      	movs	r3, #15
   12bf8:	18fb      	adds	r3, r7, r3
   12bfa:	1e51      	subs	r1, r2, #1
   12bfc:	418a      	sbcs	r2, r1
   12bfe:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   12c00:	230e      	movs	r3, #14
   12c02:	18fb      	adds	r3, r7, r3
   12c04:	697a      	ldr	r2, [r7, #20]
   12c06:	7e52      	ldrb	r2, [r2, #25]
   12c08:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   12c0a:	697b      	ldr	r3, [r7, #20]
   12c0c:	7e1b      	ldrb	r3, [r3, #24]
   12c0e:	b2da      	uxtb	r2, r3
   12c10:	230e      	movs	r3, #14
   12c12:	18fb      	adds	r3, r7, r3
   12c14:	210e      	movs	r1, #14
   12c16:	1879      	adds	r1, r7, r1
   12c18:	7809      	ldrb	r1, [r1, #0]
   12c1a:	400a      	ands	r2, r1
   12c1c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   12c1e:	697b      	ldr	r3, [r7, #20]
   12c20:	8b5b      	ldrh	r3, [r3, #26]
   12c22:	b29b      	uxth	r3, r3
   12c24:	2b00      	cmp	r3, #0
   12c26:	d109      	bne.n	12c3c <_i2c_master_interrupt_handler+0x70>
   12c28:	697b      	ldr	r3, [r7, #20]
   12c2a:	8b9b      	ldrh	r3, [r3, #28]
   12c2c:	b29b      	uxth	r3, r3
   12c2e:	2b00      	cmp	r3, #0
   12c30:	d004      	beq.n	12c3c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   12c32:	697b      	ldr	r3, [r7, #20]
   12c34:	0018      	movs	r0, r3
   12c36:	4b7e      	ldr	r3, [pc, #504]	; (12e30 <_i2c_master_interrupt_handler+0x264>)
   12c38:	4798      	blx	r3
   12c3a:	e070      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12c3c:	697b      	ldr	r3, [r7, #20]
   12c3e:	8b5b      	ldrh	r3, [r3, #26]
   12c40:	b29b      	uxth	r3, r3
   12c42:	2b00      	cmp	r3, #0
   12c44:	d039      	beq.n	12cba <_i2c_master_interrupt_handler+0xee>
   12c46:	697b      	ldr	r3, [r7, #20]
   12c48:	8b9b      	ldrh	r3, [r3, #28]
   12c4a:	b29b      	uxth	r3, r3
   12c4c:	2b00      	cmp	r3, #0
   12c4e:	d134      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   12c50:	697b      	ldr	r3, [r7, #20]
   12c52:	2225      	movs	r2, #37	; 0x25
   12c54:	5c9b      	ldrb	r3, [r3, r2]
   12c56:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12c58:	2b05      	cmp	r3, #5
   12c5a:	d12e      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12c5c:	697b      	ldr	r3, [r7, #20]
   12c5e:	2224      	movs	r2, #36	; 0x24
   12c60:	5c9b      	ldrb	r3, [r3, r2]
   12c62:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12c64:	2b00      	cmp	r3, #0
   12c66:	d128      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12c68:	693b      	ldr	r3, [r7, #16]
   12c6a:	2203      	movs	r2, #3
   12c6c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12c6e:	697b      	ldr	r3, [r7, #20]
   12c70:	2200      	movs	r2, #0
   12c72:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12c74:	697b      	ldr	r3, [r7, #20]
   12c76:	2225      	movs	r2, #37	; 0x25
   12c78:	2100      	movs	r1, #0
   12c7a:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   12c7c:	697b      	ldr	r3, [r7, #20]
   12c7e:	7a9b      	ldrb	r3, [r3, #10]
   12c80:	2b00      	cmp	r3, #0
   12c82:	d00b      	beq.n	12c9c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   12c84:	697b      	ldr	r3, [r7, #20]
   12c86:	0018      	movs	r0, r3
   12c88:	4b6a      	ldr	r3, [pc, #424]	; (12e34 <_i2c_master_interrupt_handler+0x268>)
   12c8a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12c8c:	693b      	ldr	r3, [r7, #16]
   12c8e:	685b      	ldr	r3, [r3, #4]
   12c90:	22c0      	movs	r2, #192	; 0xc0
   12c92:	0292      	lsls	r2, r2, #10
   12c94:	431a      	orrs	r2, r3
   12c96:	693b      	ldr	r3, [r7, #16]
   12c98:	605a      	str	r2, [r3, #4]
   12c9a:	e002      	b.n	12ca2 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   12c9c:	693b      	ldr	r3, [r7, #16]
   12c9e:	2201      	movs	r2, #1
   12ca0:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12ca2:	230e      	movs	r3, #14
   12ca4:	18fb      	adds	r3, r7, r3
   12ca6:	781b      	ldrb	r3, [r3, #0]
   12ca8:	2201      	movs	r2, #1
   12caa:	4013      	ands	r3, r2
   12cac:	d037      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12cae:	697b      	ldr	r3, [r7, #20]
   12cb0:	68db      	ldr	r3, [r3, #12]
   12cb2:	697a      	ldr	r2, [r7, #20]
   12cb4:	0010      	movs	r0, r2
   12cb6:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12cb8:	e031      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   12cba:	697b      	ldr	r3, [r7, #20]
   12cbc:	8b5b      	ldrh	r3, [r3, #26]
   12cbe:	b29b      	uxth	r3, r3
   12cc0:	2b00      	cmp	r3, #0
   12cc2:	d02c      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
   12cc4:	697b      	ldr	r3, [r7, #20]
   12cc6:	8b9b      	ldrh	r3, [r3, #28]
   12cc8:	b29b      	uxth	r3, r3
   12cca:	2b00      	cmp	r3, #0
   12ccc:	d027      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12cce:	693b      	ldr	r3, [r7, #16]
   12cd0:	8b5b      	ldrh	r3, [r3, #26]
   12cd2:	b29b      	uxth	r3, r3
   12cd4:	001a      	movs	r2, r3
   12cd6:	2320      	movs	r3, #32
   12cd8:	4013      	ands	r3, r2
   12cda:	d111      	bne.n	12d00 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12cdc:	230f      	movs	r3, #15
   12cde:	18fb      	adds	r3, r7, r3
   12ce0:	781b      	ldrb	r3, [r3, #0]
   12ce2:	2201      	movs	r2, #1
   12ce4:	4053      	eors	r3, r2
   12ce6:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12ce8:	2b00      	cmp	r3, #0
   12cea:	d104      	bne.n	12cf6 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12cec:	697b      	ldr	r3, [r7, #20]
   12cee:	8b9b      	ldrh	r3, [r3, #28]
   12cf0:	b29b      	uxth	r3, r3
   12cf2:	2b01      	cmp	r3, #1
   12cf4:	d004      	beq.n	12d00 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   12cf6:	697b      	ldr	r3, [r7, #20]
   12cf8:	2225      	movs	r2, #37	; 0x25
   12cfa:	2141      	movs	r1, #65	; 0x41
   12cfc:	5499      	strb	r1, [r3, r2]
   12cfe:	e00e      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   12d00:	697b      	ldr	r3, [r7, #20]
   12d02:	2224      	movs	r2, #36	; 0x24
   12d04:	5c9b      	ldrb	r3, [r3, r2]
   12d06:	b2db      	uxtb	r3, r3
   12d08:	2b00      	cmp	r3, #0
   12d0a:	d104      	bne.n	12d16 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   12d0c:	697b      	ldr	r3, [r7, #20]
   12d0e:	0018      	movs	r0, r3
   12d10:	4b49      	ldr	r3, [pc, #292]	; (12e38 <_i2c_master_interrupt_handler+0x26c>)
   12d12:	4798      	blx	r3
   12d14:	e003      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   12d16:	697b      	ldr	r3, [r7, #20]
   12d18:	0018      	movs	r0, r3
   12d1a:	4b48      	ldr	r3, [pc, #288]	; (12e3c <_i2c_master_interrupt_handler+0x270>)
   12d1c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12d1e:	697b      	ldr	r3, [r7, #20]
   12d20:	8b5b      	ldrh	r3, [r3, #26]
   12d22:	b29b      	uxth	r3, r3
   12d24:	2b00      	cmp	r3, #0
   12d26:	d047      	beq.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
   12d28:	697b      	ldr	r3, [r7, #20]
   12d2a:	8b9b      	ldrh	r3, [r3, #28]
   12d2c:	b29b      	uxth	r3, r3
   12d2e:	2b00      	cmp	r3, #0
   12d30:	d142      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   12d32:	697b      	ldr	r3, [r7, #20]
   12d34:	2225      	movs	r2, #37	; 0x25
   12d36:	5c9b      	ldrb	r3, [r3, r2]
   12d38:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12d3a:	2b05      	cmp	r3, #5
   12d3c:	d13c      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   12d3e:	697b      	ldr	r3, [r7, #20]
   12d40:	2224      	movs	r2, #36	; 0x24
   12d42:	5c9b      	ldrb	r3, [r3, r2]
   12d44:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12d46:	2b01      	cmp	r3, #1
   12d48:	d136      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   12d4a:	693b      	ldr	r3, [r7, #16]
   12d4c:	7e1b      	ldrb	r3, [r3, #24]
   12d4e:	b2db      	uxtb	r3, r3
   12d50:	001a      	movs	r2, r3
   12d52:	2302      	movs	r3, #2
   12d54:	4013      	ands	r3, r2
   12d56:	d002      	beq.n	12d5e <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   12d58:	693b      	ldr	r3, [r7, #16]
   12d5a:	2202      	movs	r2, #2
   12d5c:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12d5e:	693b      	ldr	r3, [r7, #16]
   12d60:	2203      	movs	r2, #3
   12d62:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   12d64:	697b      	ldr	r3, [r7, #20]
   12d66:	2200      	movs	r2, #0
   12d68:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12d6a:	697b      	ldr	r3, [r7, #20]
   12d6c:	2225      	movs	r2, #37	; 0x25
   12d6e:	2100      	movs	r1, #0
   12d70:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   12d72:	230e      	movs	r3, #14
   12d74:	18fb      	adds	r3, r7, r3
   12d76:	781b      	ldrb	r3, [r3, #0]
   12d78:	2202      	movs	r2, #2
   12d7a:	4013      	ands	r3, r2
   12d7c:	d00b      	beq.n	12d96 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   12d7e:	697b      	ldr	r3, [r7, #20]
   12d80:	2224      	movs	r2, #36	; 0x24
   12d82:	5c9b      	ldrb	r3, [r3, r2]
   12d84:	b2db      	uxtb	r3, r3
   12d86:	2b01      	cmp	r3, #1
   12d88:	d105      	bne.n	12d96 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   12d8a:	697b      	ldr	r3, [r7, #20]
   12d8c:	691b      	ldr	r3, [r3, #16]
   12d8e:	697a      	ldr	r2, [r7, #20]
   12d90:	0010      	movs	r0, r2
   12d92:	4798      	blx	r3
   12d94:	e010      	b.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   12d96:	230e      	movs	r3, #14
   12d98:	18fb      	adds	r3, r7, r3
   12d9a:	781b      	ldrb	r3, [r3, #0]
   12d9c:	2201      	movs	r2, #1
   12d9e:	4013      	ands	r3, r2
   12da0:	d00a      	beq.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12da2:	697b      	ldr	r3, [r7, #20]
   12da4:	2224      	movs	r2, #36	; 0x24
   12da6:	5c9b      	ldrb	r3, [r3, r2]
   12da8:	b2db      	uxtb	r3, r3
   12daa:	2b00      	cmp	r3, #0
   12dac:	d104      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12dae:	697b      	ldr	r3, [r7, #20]
   12db0:	68db      	ldr	r3, [r3, #12]
   12db2:	697a      	ldr	r2, [r7, #20]
   12db4:	0010      	movs	r0, r2
   12db6:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   12db8:	697b      	ldr	r3, [r7, #20]
   12dba:	2225      	movs	r2, #37	; 0x25
   12dbc:	5c9b      	ldrb	r3, [r3, r2]
   12dbe:	b2db      	uxtb	r3, r3
   12dc0:	2b05      	cmp	r3, #5
   12dc2:	d02e      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
   12dc4:	697b      	ldr	r3, [r7, #20]
   12dc6:	2225      	movs	r2, #37	; 0x25
   12dc8:	5c9b      	ldrb	r3, [r3, r2]
   12dca:	b2db      	uxtb	r3, r3
   12dcc:	2b00      	cmp	r3, #0
   12dce:	d028      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   12dd0:	693b      	ldr	r3, [r7, #16]
   12dd2:	2203      	movs	r2, #3
   12dd4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12dd6:	697b      	ldr	r3, [r7, #20]
   12dd8:	2200      	movs	r2, #0
   12dda:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   12ddc:	697b      	ldr	r3, [r7, #20]
   12dde:	2200      	movs	r2, #0
   12de0:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12de2:	697b      	ldr	r3, [r7, #20]
   12de4:	2225      	movs	r2, #37	; 0x25
   12de6:	5c9b      	ldrb	r3, [r3, r2]
   12de8:	b2db      	uxtb	r3, r3
   12dea:	2b41      	cmp	r3, #65	; 0x41
   12dec:	d00e      	beq.n	12e0c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   12dee:	697b      	ldr	r3, [r7, #20]
   12df0:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12df2:	2b00      	cmp	r3, #0
   12df4:	d00a      	beq.n	12e0c <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   12df6:	697b      	ldr	r3, [r7, #20]
   12df8:	0018      	movs	r0, r3
   12dfa:	4b0e      	ldr	r3, [pc, #56]	; (12e34 <_i2c_master_interrupt_handler+0x268>)
   12dfc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   12dfe:	693b      	ldr	r3, [r7, #16]
   12e00:	685b      	ldr	r3, [r3, #4]
   12e02:	22e0      	movs	r2, #224	; 0xe0
   12e04:	02d2      	lsls	r2, r2, #11
   12e06:	431a      	orrs	r2, r3
   12e08:	693b      	ldr	r3, [r7, #16]
   12e0a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   12e0c:	230e      	movs	r3, #14
   12e0e:	18fb      	adds	r3, r7, r3
   12e10:	781b      	ldrb	r3, [r3, #0]
   12e12:	2204      	movs	r2, #4
   12e14:	4013      	ands	r3, r2
   12e16:	d004      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   12e18:	697b      	ldr	r3, [r7, #20]
   12e1a:	695b      	ldr	r3, [r3, #20]
   12e1c:	697a      	ldr	r2, [r7, #20]
   12e1e:	0010      	movs	r0, r2
   12e20:	4798      	blx	r3
		}
	}
}
   12e22:	46c0      	nop			; (mov r8, r8)
   12e24:	46bd      	mov	sp, r7
   12e26:	b006      	add	sp, #24
   12e28:	bd80      	pop	{r7, pc}
   12e2a:	46c0      	nop			; (mov r8, r8)
   12e2c:	20005834 	.word	0x20005834
   12e30:	0001284d 	.word	0x0001284d
   12e34:	000126bd 	.word	0x000126bd
   12e38:	000127d1 	.word	0x000127d1
   12e3c:	000126e1 	.word	0x000126e1

00012e40 <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
   12e40:	b5b0      	push	{r4, r5, r7, lr}
   12e42:	b084      	sub	sp, #16
   12e44:	af00      	add	r7, sp, #0
   12e46:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   12e48:	230f      	movs	r3, #15
   12e4a:	18fc      	adds	r4, r7, r3
   12e4c:	687b      	ldr	r3, [r7, #4]
   12e4e:	0018      	movs	r0, r3
   12e50:	4b20      	ldr	r3, [pc, #128]	; (12ed4 <bme680_init+0x94>)
   12e52:	4798      	blx	r3
   12e54:	0003      	movs	r3, r0
   12e56:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   12e58:	230f      	movs	r3, #15
   12e5a:	18fb      	adds	r3, r7, r3
   12e5c:	781b      	ldrb	r3, [r3, #0]
   12e5e:	b25b      	sxtb	r3, r3
   12e60:	2b00      	cmp	r3, #0
   12e62:	d12e      	bne.n	12ec2 <bme680_init+0x82>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
   12e64:	230f      	movs	r3, #15
   12e66:	18fc      	adds	r4, r7, r3
   12e68:	687b      	ldr	r3, [r7, #4]
   12e6a:	0018      	movs	r0, r3
   12e6c:	4b1a      	ldr	r3, [pc, #104]	; (12ed8 <bme680_init+0x98>)
   12e6e:	4798      	blx	r3
   12e70:	0003      	movs	r3, r0
   12e72:	7023      	strb	r3, [r4, #0]
		if (rslt == BME680_OK) {
   12e74:	230f      	movs	r3, #15
   12e76:	18fb      	adds	r3, r7, r3
   12e78:	781b      	ldrb	r3, [r3, #0]
   12e7a:	b25b      	sxtb	r3, r3
   12e7c:	2b00      	cmp	r3, #0
   12e7e:	d120      	bne.n	12ec2 <bme680_init+0x82>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
   12e80:	6879      	ldr	r1, [r7, #4]
   12e82:	230f      	movs	r3, #15
   12e84:	18fc      	adds	r4, r7, r3
   12e86:	687b      	ldr	r3, [r7, #4]
   12e88:	2201      	movs	r2, #1
   12e8a:	20d0      	movs	r0, #208	; 0xd0
   12e8c:	4d13      	ldr	r5, [pc, #76]	; (12edc <bme680_init+0x9c>)
   12e8e:	47a8      	blx	r5
   12e90:	0003      	movs	r3, r0
   12e92:	7023      	strb	r3, [r4, #0]
			if (rslt == BME680_OK) {
   12e94:	230f      	movs	r3, #15
   12e96:	18fb      	adds	r3, r7, r3
   12e98:	781b      	ldrb	r3, [r3, #0]
   12e9a:	b25b      	sxtb	r3, r3
   12e9c:	2b00      	cmp	r3, #0
   12e9e:	d110      	bne.n	12ec2 <bme680_init+0x82>
				if (dev->chip_id == BME680_CHIP_ID) {
   12ea0:	687b      	ldr	r3, [r7, #4]
   12ea2:	781b      	ldrb	r3, [r3, #0]
   12ea4:	2b61      	cmp	r3, #97	; 0x61
   12ea6:	d108      	bne.n	12eba <bme680_init+0x7a>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
   12ea8:	230f      	movs	r3, #15
   12eaa:	18fc      	adds	r4, r7, r3
   12eac:	687b      	ldr	r3, [r7, #4]
   12eae:	0018      	movs	r0, r3
   12eb0:	4b0b      	ldr	r3, [pc, #44]	; (12ee0 <bme680_init+0xa0>)
   12eb2:	4798      	blx	r3
   12eb4:	0003      	movs	r3, r0
   12eb6:	7023      	strb	r3, [r4, #0]
   12eb8:	e003      	b.n	12ec2 <bme680_init+0x82>
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
   12eba:	230f      	movs	r3, #15
   12ebc:	18fb      	adds	r3, r7, r3
   12ebe:	22fd      	movs	r2, #253	; 0xfd
   12ec0:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	return rslt;
   12ec2:	230f      	movs	r3, #15
   12ec4:	18fb      	adds	r3, r7, r3
   12ec6:	781b      	ldrb	r3, [r3, #0]
   12ec8:	b25b      	sxtb	r3, r3
}
   12eca:	0018      	movs	r0, r3
   12ecc:	46bd      	mov	sp, r7
   12ece:	b004      	add	sp, #16
   12ed0:	bdb0      	pop	{r4, r5, r7, pc}
   12ed2:	46c0      	nop			; (mov r8, r8)
   12ed4:	0001482f 	.word	0x0001482f
   12ed8:	00013119 	.word	0x00013119
   12edc:	00012ee5 	.word	0x00012ee5
   12ee0:	00013951 	.word	0x00013951

00012ee4 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
   12ee4:	b5b0      	push	{r4, r5, r7, lr}
   12ee6:	b086      	sub	sp, #24
   12ee8:	af00      	add	r7, sp, #0
   12eea:	60b9      	str	r1, [r7, #8]
   12eec:	0011      	movs	r1, r2
   12eee:	607b      	str	r3, [r7, #4]
   12ef0:	230f      	movs	r3, #15
   12ef2:	18fb      	adds	r3, r7, r3
   12ef4:	1c02      	adds	r2, r0, #0
   12ef6:	701a      	strb	r2, [r3, #0]
   12ef8:	230c      	movs	r3, #12
   12efa:	18fb      	adds	r3, r7, r3
   12efc:	1c0a      	adds	r2, r1, #0
   12efe:	801a      	strh	r2, [r3, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   12f00:	2317      	movs	r3, #23
   12f02:	18fc      	adds	r4, r7, r3
   12f04:	687b      	ldr	r3, [r7, #4]
   12f06:	0018      	movs	r0, r3
   12f08:	4b25      	ldr	r3, [pc, #148]	; (12fa0 <bme680_get_regs+0xbc>)
   12f0a:	4798      	blx	r3
   12f0c:	0003      	movs	r3, r0
   12f0e:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   12f10:	2317      	movs	r3, #23
   12f12:	18fb      	adds	r3, r7, r3
   12f14:	781b      	ldrb	r3, [r3, #0]
   12f16:	b25b      	sxtb	r3, r3
   12f18:	2b00      	cmp	r3, #0
   12f1a:	d139      	bne.n	12f90 <bme680_get_regs+0xac>
		if (dev->intf == BME680_SPI_INTF) {
   12f1c:	687b      	ldr	r3, [r7, #4]
   12f1e:	789b      	ldrb	r3, [r3, #2]
   12f20:	2b00      	cmp	r3, #0
   12f22:	d11a      	bne.n	12f5a <bme680_get_regs+0x76>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
   12f24:	2317      	movs	r3, #23
   12f26:	18fc      	adds	r4, r7, r3
   12f28:	687a      	ldr	r2, [r7, #4]
   12f2a:	230f      	movs	r3, #15
   12f2c:	18fb      	adds	r3, r7, r3
   12f2e:	781b      	ldrb	r3, [r3, #0]
   12f30:	0011      	movs	r1, r2
   12f32:	0018      	movs	r0, r3
   12f34:	4b1b      	ldr	r3, [pc, #108]	; (12fa4 <bme680_get_regs+0xc0>)
   12f36:	4798      	blx	r3
   12f38:	0003      	movs	r3, r0
   12f3a:	7023      	strb	r3, [r4, #0]
			if (rslt == BME680_OK)
   12f3c:	2317      	movs	r3, #23
   12f3e:	18fb      	adds	r3, r7, r3
   12f40:	781b      	ldrb	r3, [r3, #0]
   12f42:	b25b      	sxtb	r3, r3
   12f44:	2b00      	cmp	r3, #0
   12f46:	d108      	bne.n	12f5a <bme680_get_regs+0x76>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
   12f48:	230f      	movs	r3, #15
   12f4a:	18fb      	adds	r3, r7, r3
   12f4c:	220f      	movs	r2, #15
   12f4e:	18ba      	adds	r2, r7, r2
   12f50:	7812      	ldrb	r2, [r2, #0]
   12f52:	2180      	movs	r1, #128	; 0x80
   12f54:	4249      	negs	r1, r1
   12f56:	430a      	orrs	r2, r1
   12f58:	701a      	strb	r2, [r3, #0]
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
   12f5a:	687b      	ldr	r3, [r7, #4]
   12f5c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   12f5e:	687b      	ldr	r3, [r7, #4]
   12f60:	7858      	ldrb	r0, [r3, #1]
   12f62:	230c      	movs	r3, #12
   12f64:	18fb      	adds	r3, r7, r3
   12f66:	881d      	ldrh	r5, [r3, #0]
   12f68:	68ba      	ldr	r2, [r7, #8]
   12f6a:	230f      	movs	r3, #15
   12f6c:	18fb      	adds	r3, r7, r3
   12f6e:	7819      	ldrb	r1, [r3, #0]
   12f70:	002b      	movs	r3, r5
   12f72:	47a0      	blx	r4
   12f74:	0003      	movs	r3, r0
   12f76:	0019      	movs	r1, r3
   12f78:	687b      	ldr	r3, [r7, #4]
   12f7a:	2254      	movs	r2, #84	; 0x54
   12f7c:	5499      	strb	r1, [r3, r2]
		if (dev->com_rslt != 0)
   12f7e:	687b      	ldr	r3, [r7, #4]
   12f80:	2254      	movs	r2, #84	; 0x54
   12f82:	569b      	ldrsb	r3, [r3, r2]
   12f84:	2b00      	cmp	r3, #0
   12f86:	d003      	beq.n	12f90 <bme680_get_regs+0xac>
			rslt = BME680_E_COM_FAIL;
   12f88:	2317      	movs	r3, #23
   12f8a:	18fb      	adds	r3, r7, r3
   12f8c:	22fe      	movs	r2, #254	; 0xfe
   12f8e:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
   12f90:	2317      	movs	r3, #23
   12f92:	18fb      	adds	r3, r7, r3
   12f94:	781b      	ldrb	r3, [r3, #0]
   12f96:	b25b      	sxtb	r3, r3
}
   12f98:	0018      	movs	r0, r3
   12f9a:	46bd      	mov	sp, r7
   12f9c:	b006      	add	sp, #24
   12f9e:	bdb0      	pop	{r4, r5, r7, pc}
   12fa0:	0001482f 	.word	0x0001482f
   12fa4:	00014611 	.word	0x00014611

00012fa8 <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
   12fa8:	b5b0      	push	{r4, r5, r7, lr}
   12faa:	b090      	sub	sp, #64	; 0x40
   12fac:	af00      	add	r7, sp, #0
   12fae:	60f8      	str	r0, [r7, #12]
   12fb0:	60b9      	str	r1, [r7, #8]
   12fb2:	603b      	str	r3, [r7, #0]
   12fb4:	1dfb      	adds	r3, r7, #7
   12fb6:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
   12fb8:	2314      	movs	r3, #20
   12fba:	18fb      	adds	r3, r7, r3
   12fbc:	0018      	movs	r0, r3
   12fbe:	2328      	movs	r3, #40	; 0x28
   12fc0:	001a      	movs	r2, r3
   12fc2:	2100      	movs	r1, #0
   12fc4:	4b51      	ldr	r3, [pc, #324]	; (1310c <bme680_set_regs+0x164>)
   12fc6:	4798      	blx	r3
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   12fc8:	233f      	movs	r3, #63	; 0x3f
   12fca:	18fc      	adds	r4, r7, r3
   12fcc:	683b      	ldr	r3, [r7, #0]
   12fce:	0018      	movs	r0, r3
   12fd0:	4b4f      	ldr	r3, [pc, #316]	; (13110 <bme680_set_regs+0x168>)
   12fd2:	4798      	blx	r3
   12fd4:	0003      	movs	r3, r0
   12fd6:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   12fd8:	233f      	movs	r3, #63	; 0x3f
   12fda:	18fb      	adds	r3, r7, r3
   12fdc:	781b      	ldrb	r3, [r3, #0]
   12fde:	b25b      	sxtb	r3, r3
   12fe0:	2b00      	cmp	r3, #0
   12fe2:	d000      	beq.n	12fe6 <bme680_set_regs+0x3e>
   12fe4:	e08a      	b.n	130fc <bme680_set_regs+0x154>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
   12fe6:	1dfb      	adds	r3, r7, #7
   12fe8:	781b      	ldrb	r3, [r3, #0]
   12fea:	2b00      	cmp	r3, #0
   12fec:	d100      	bne.n	12ff0 <bme680_set_regs+0x48>
   12fee:	e07f      	b.n	130f0 <bme680_set_regs+0x148>
   12ff0:	1dfb      	adds	r3, r7, #7
   12ff2:	781b      	ldrb	r3, [r3, #0]
   12ff4:	2b13      	cmp	r3, #19
   12ff6:	d900      	bls.n	12ffa <bme680_set_regs+0x52>
   12ff8:	e07a      	b.n	130f0 <bme680_set_regs+0x148>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
   12ffa:	233c      	movs	r3, #60	; 0x3c
   12ffc:	18fb      	adds	r3, r7, r3
   12ffe:	2200      	movs	r2, #0
   13000:	801a      	strh	r2, [r3, #0]
   13002:	e045      	b.n	13090 <bme680_set_regs+0xe8>
				if (dev->intf == BME680_SPI_INTF) {
   13004:	683b      	ldr	r3, [r7, #0]
   13006:	789b      	ldrb	r3, [r3, #2]
   13008:	2b00      	cmp	r3, #0
   1300a:	d11f      	bne.n	1304c <bme680_set_regs+0xa4>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
   1300c:	233c      	movs	r3, #60	; 0x3c
   1300e:	18fb      	adds	r3, r7, r3
   13010:	881b      	ldrh	r3, [r3, #0]
   13012:	68fa      	ldr	r2, [r7, #12]
   13014:	18d3      	adds	r3, r2, r3
   13016:	781b      	ldrb	r3, [r3, #0]
   13018:	223f      	movs	r2, #63	; 0x3f
   1301a:	18bc      	adds	r4, r7, r2
   1301c:	683a      	ldr	r2, [r7, #0]
   1301e:	0011      	movs	r1, r2
   13020:	0018      	movs	r0, r3
   13022:	4b3c      	ldr	r3, [pc, #240]	; (13114 <bme680_set_regs+0x16c>)
   13024:	4798      	blx	r3
   13026:	0003      	movs	r3, r0
   13028:	7023      	strb	r3, [r4, #0]
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
   1302a:	233c      	movs	r3, #60	; 0x3c
   1302c:	18fb      	adds	r3, r7, r3
   1302e:	881b      	ldrh	r3, [r3, #0]
   13030:	005b      	lsls	r3, r3, #1
   13032:	223c      	movs	r2, #60	; 0x3c
   13034:	18ba      	adds	r2, r7, r2
   13036:	8812      	ldrh	r2, [r2, #0]
   13038:	68f9      	ldr	r1, [r7, #12]
   1303a:	188a      	adds	r2, r1, r2
   1303c:	7812      	ldrb	r2, [r2, #0]
   1303e:	217f      	movs	r1, #127	; 0x7f
   13040:	400a      	ands	r2, r1
   13042:	b2d1      	uxtb	r1, r2
   13044:	2214      	movs	r2, #20
   13046:	18ba      	adds	r2, r7, r2
   13048:	54d1      	strb	r1, [r2, r3]
   1304a:	e00c      	b.n	13066 <bme680_set_regs+0xbe>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
   1304c:	233c      	movs	r3, #60	; 0x3c
   1304e:	18fb      	adds	r3, r7, r3
   13050:	881b      	ldrh	r3, [r3, #0]
   13052:	005b      	lsls	r3, r3, #1
   13054:	223c      	movs	r2, #60	; 0x3c
   13056:	18ba      	adds	r2, r7, r2
   13058:	8812      	ldrh	r2, [r2, #0]
   1305a:	68f9      	ldr	r1, [r7, #12]
   1305c:	188a      	adds	r2, r1, r2
   1305e:	7811      	ldrb	r1, [r2, #0]
   13060:	2214      	movs	r2, #20
   13062:	18ba      	adds	r2, r7, r2
   13064:	54d1      	strb	r1, [r2, r3]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
   13066:	233c      	movs	r3, #60	; 0x3c
   13068:	18fb      	adds	r3, r7, r3
   1306a:	881b      	ldrh	r3, [r3, #0]
   1306c:	005b      	lsls	r3, r3, #1
   1306e:	3301      	adds	r3, #1
   13070:	223c      	movs	r2, #60	; 0x3c
   13072:	18ba      	adds	r2, r7, r2
   13074:	8812      	ldrh	r2, [r2, #0]
   13076:	68b9      	ldr	r1, [r7, #8]
   13078:	188a      	adds	r2, r1, r2
   1307a:	7811      	ldrb	r1, [r2, #0]
   1307c:	2214      	movs	r2, #20
   1307e:	18ba      	adds	r2, r7, r2
   13080:	54d1      	strb	r1, [r2, r3]
			for (index = 0; index < len; index++) {
   13082:	233c      	movs	r3, #60	; 0x3c
   13084:	18fb      	adds	r3, r7, r3
   13086:	881a      	ldrh	r2, [r3, #0]
   13088:	233c      	movs	r3, #60	; 0x3c
   1308a:	18fb      	adds	r3, r7, r3
   1308c:	3201      	adds	r2, #1
   1308e:	801a      	strh	r2, [r3, #0]
   13090:	1dfb      	adds	r3, r7, #7
   13092:	781b      	ldrb	r3, [r3, #0]
   13094:	b29b      	uxth	r3, r3
   13096:	223c      	movs	r2, #60	; 0x3c
   13098:	18ba      	adds	r2, r7, r2
   1309a:	8812      	ldrh	r2, [r2, #0]
   1309c:	429a      	cmp	r2, r3
   1309e:	d3b1      	bcc.n	13004 <bme680_set_regs+0x5c>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
   130a0:	233f      	movs	r3, #63	; 0x3f
   130a2:	18fb      	adds	r3, r7, r3
   130a4:	781b      	ldrb	r3, [r3, #0]
   130a6:	b25b      	sxtb	r3, r3
   130a8:	2b00      	cmp	r3, #0
   130aa:	d126      	bne.n	130fa <bme680_set_regs+0x152>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
   130ac:	683b      	ldr	r3, [r7, #0]
   130ae:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
   130b0:	683b      	ldr	r3, [r7, #0]
   130b2:	7858      	ldrb	r0, [r3, #1]
   130b4:	2314      	movs	r3, #20
   130b6:	18fb      	adds	r3, r7, r3
   130b8:	7819      	ldrb	r1, [r3, #0]
   130ba:	1dfb      	adds	r3, r7, #7
   130bc:	781b      	ldrb	r3, [r3, #0]
   130be:	b29b      	uxth	r3, r3
   130c0:	18db      	adds	r3, r3, r3
   130c2:	b29b      	uxth	r3, r3
   130c4:	3b01      	subs	r3, #1
   130c6:	b29d      	uxth	r5, r3
   130c8:	2314      	movs	r3, #20
   130ca:	18fb      	adds	r3, r7, r3
   130cc:	1c5a      	adds	r2, r3, #1
   130ce:	002b      	movs	r3, r5
   130d0:	47a0      	blx	r4
   130d2:	0003      	movs	r3, r0
   130d4:	0019      	movs	r1, r3
   130d6:	683b      	ldr	r3, [r7, #0]
   130d8:	2254      	movs	r2, #84	; 0x54
   130da:	5499      	strb	r1, [r3, r2]
				if (dev->com_rslt != 0)
   130dc:	683b      	ldr	r3, [r7, #0]
   130de:	2254      	movs	r2, #84	; 0x54
   130e0:	569b      	ldrsb	r3, [r3, r2]
   130e2:	2b00      	cmp	r3, #0
   130e4:	d009      	beq.n	130fa <bme680_set_regs+0x152>
					rslt = BME680_E_COM_FAIL;
   130e6:	233f      	movs	r3, #63	; 0x3f
   130e8:	18fb      	adds	r3, r7, r3
   130ea:	22fe      	movs	r2, #254	; 0xfe
   130ec:	701a      	strb	r2, [r3, #0]
			if (rslt == BME680_OK) {
   130ee:	e004      	b.n	130fa <bme680_set_regs+0x152>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
   130f0:	233f      	movs	r3, #63	; 0x3f
   130f2:	18fb      	adds	r3, r7, r3
   130f4:	22fc      	movs	r2, #252	; 0xfc
   130f6:	701a      	strb	r2, [r3, #0]
   130f8:	e000      	b.n	130fc <bme680_set_regs+0x154>
			if (rslt == BME680_OK) {
   130fa:	46c0      	nop			; (mov r8, r8)
		}
	}

	return rslt;
   130fc:	233f      	movs	r3, #63	; 0x3f
   130fe:	18fb      	adds	r3, r7, r3
   13100:	781b      	ldrb	r3, [r3, #0]
   13102:	b25b      	sxtb	r3, r3
}
   13104:	0018      	movs	r0, r3
   13106:	46bd      	mov	sp, r7
   13108:	b010      	add	sp, #64	; 0x40
   1310a:	bdb0      	pop	{r4, r5, r7, pc}
   1310c:	00036c9f 	.word	0x00036c9f
   13110:	0001482f 	.word	0x0001482f
   13114:	00014611 	.word	0x00014611

00013118 <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
   13118:	b5b0      	push	{r4, r5, r7, lr}
   1311a:	b084      	sub	sp, #16
   1311c:	af00      	add	r7, sp, #0
   1311e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
   13120:	230e      	movs	r3, #14
   13122:	18fb      	adds	r3, r7, r3
   13124:	22e0      	movs	r2, #224	; 0xe0
   13126:	701a      	strb	r2, [r3, #0]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
   13128:	230d      	movs	r3, #13
   1312a:	18fb      	adds	r3, r7, r3
   1312c:	22b6      	movs	r2, #182	; 0xb6
   1312e:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   13130:	230f      	movs	r3, #15
   13132:	18fc      	adds	r4, r7, r3
   13134:	687b      	ldr	r3, [r7, #4]
   13136:	0018      	movs	r0, r3
   13138:	4b22      	ldr	r3, [pc, #136]	; (131c4 <bme680_soft_reset+0xac>)
   1313a:	4798      	blx	r3
   1313c:	0003      	movs	r3, r0
   1313e:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   13140:	230f      	movs	r3, #15
   13142:	18fb      	adds	r3, r7, r3
   13144:	781b      	ldrb	r3, [r3, #0]
   13146:	b25b      	sxtb	r3, r3
   13148:	2b00      	cmp	r3, #0
   1314a:	d133      	bne.n	131b4 <bme680_soft_reset+0x9c>
		if (dev->intf == BME680_SPI_INTF)
   1314c:	687b      	ldr	r3, [r7, #4]
   1314e:	789b      	ldrb	r3, [r3, #2]
   13150:	2b00      	cmp	r3, #0
   13152:	d107      	bne.n	13164 <bme680_soft_reset+0x4c>
			rslt = get_mem_page(dev);
   13154:	230f      	movs	r3, #15
   13156:	18fc      	adds	r4, r7, r3
   13158:	687b      	ldr	r3, [r7, #4]
   1315a:	0018      	movs	r0, r3
   1315c:	4b1a      	ldr	r3, [pc, #104]	; (131c8 <bme680_soft_reset+0xb0>)
   1315e:	4798      	blx	r3
   13160:	0003      	movs	r3, r0
   13162:	7023      	strb	r3, [r4, #0]

		/* Reset the device */
		if (rslt == BME680_OK) {
   13164:	230f      	movs	r3, #15
   13166:	18fb      	adds	r3, r7, r3
   13168:	781b      	ldrb	r3, [r3, #0]
   1316a:	b25b      	sxtb	r3, r3
   1316c:	2b00      	cmp	r3, #0
   1316e:	d121      	bne.n	131b4 <bme680_soft_reset+0x9c>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   13170:	230f      	movs	r3, #15
   13172:	18fc      	adds	r4, r7, r3
   13174:	687b      	ldr	r3, [r7, #4]
   13176:	220d      	movs	r2, #13
   13178:	18b9      	adds	r1, r7, r2
   1317a:	220e      	movs	r2, #14
   1317c:	18b8      	adds	r0, r7, r2
   1317e:	2201      	movs	r2, #1
   13180:	4d12      	ldr	r5, [pc, #72]	; (131cc <bme680_soft_reset+0xb4>)
   13182:	47a8      	blx	r5
   13184:	0003      	movs	r3, r0
   13186:	7023      	strb	r3, [r4, #0]
			/* Wait for 5ms */
			dev->delay_ms_bme(BME680_RESET_PERIOD);
   13188:	687b      	ldr	r3, [r7, #4]
   1318a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1318c:	200a      	movs	r0, #10
   1318e:	4798      	blx	r3

			if (rslt == BME680_OK) {
   13190:	230f      	movs	r3, #15
   13192:	18fb      	adds	r3, r7, r3
   13194:	781b      	ldrb	r3, [r3, #0]
   13196:	b25b      	sxtb	r3, r3
   13198:	2b00      	cmp	r3, #0
   1319a:	d10b      	bne.n	131b4 <bme680_soft_reset+0x9c>
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
   1319c:	687b      	ldr	r3, [r7, #4]
   1319e:	789b      	ldrb	r3, [r3, #2]
   131a0:	2b00      	cmp	r3, #0
   131a2:	d107      	bne.n	131b4 <bme680_soft_reset+0x9c>
					rslt = get_mem_page(dev);
   131a4:	230f      	movs	r3, #15
   131a6:	18fc      	adds	r4, r7, r3
   131a8:	687b      	ldr	r3, [r7, #4]
   131aa:	0018      	movs	r0, r3
   131ac:	4b06      	ldr	r3, [pc, #24]	; (131c8 <bme680_soft_reset+0xb0>)
   131ae:	4798      	blx	r3
   131b0:	0003      	movs	r3, r0
   131b2:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return rslt;
   131b4:	230f      	movs	r3, #15
   131b6:	18fb      	adds	r3, r7, r3
   131b8:	781b      	ldrb	r3, [r3, #0]
   131ba:	b25b      	sxtb	r3, r3
}
   131bc:	0018      	movs	r0, r3
   131be:	46bd      	mov	sp, r7
   131c0:	b004      	add	sp, #16
   131c2:	bdb0      	pop	{r4, r5, r7, pc}
   131c4:	0001482f 	.word	0x0001482f
   131c8:	0001471d 	.word	0x0001471d
   131cc:	00012fa9 	.word	0x00012fa9

000131d0 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
   131d0:	b5b0      	push	{r4, r5, r7, lr}
   131d2:	b088      	sub	sp, #32
   131d4:	af00      	add	r7, sp, #0
   131d6:	0002      	movs	r2, r0
   131d8:	6039      	str	r1, [r7, #0]
   131da:	1dbb      	adds	r3, r7, #6
   131dc:	801a      	strh	r2, [r3, #0]
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
   131de:	231b      	movs	r3, #27
   131e0:	18fb      	adds	r3, r7, r3
   131e2:	2200      	movs	r2, #0
   131e4:	701a      	strb	r2, [r3, #0]
	uint8_t count = 0;
   131e6:	231e      	movs	r3, #30
   131e8:	18fb      	adds	r3, r7, r3
   131ea:	2200      	movs	r2, #0
   131ec:	701a      	strb	r2, [r3, #0]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   131ee:	2314      	movs	r3, #20
   131f0:	18fb      	adds	r3, r7, r3
   131f2:	0018      	movs	r0, r3
   131f4:	2306      	movs	r3, #6
   131f6:	001a      	movs	r2, r3
   131f8:	2100      	movs	r1, #0
   131fa:	4be7      	ldr	r3, [pc, #924]	; (13598 <bme680_set_sensor_settings+0x3c8>)
   131fc:	4798      	blx	r3
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   131fe:	230c      	movs	r3, #12
   13200:	18fb      	adds	r3, r7, r3
   13202:	0018      	movs	r0, r3
   13204:	2306      	movs	r3, #6
   13206:	001a      	movs	r2, r3
   13208:	2100      	movs	r1, #0
   1320a:	4be3      	ldr	r3, [pc, #908]	; (13598 <bme680_set_sensor_settings+0x3c8>)
   1320c:	4798      	blx	r3
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
   1320e:	231d      	movs	r3, #29
   13210:	18fb      	adds	r3, r7, r3
   13212:	683a      	ldr	r2, [r7, #0]
   13214:	2144      	movs	r1, #68	; 0x44
   13216:	5c52      	ldrb	r2, [r2, r1]
   13218:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   1321a:	231f      	movs	r3, #31
   1321c:	18fc      	adds	r4, r7, r3
   1321e:	683b      	ldr	r3, [r7, #0]
   13220:	0018      	movs	r0, r3
   13222:	4bde      	ldr	r3, [pc, #888]	; (1359c <bme680_set_sensor_settings+0x3cc>)
   13224:	4798      	blx	r3
   13226:	0003      	movs	r3, r0
   13228:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   1322a:	231f      	movs	r3, #31
   1322c:	18fb      	adds	r3, r7, r3
   1322e:	781b      	ldrb	r3, [r3, #0]
   13230:	b25b      	sxtb	r3, r3
   13232:	2b00      	cmp	r3, #0
   13234:	d000      	beq.n	13238 <bme680_set_sensor_settings+0x68>
   13236:	e249      	b.n	136cc <bme680_set_sensor_settings+0x4fc>
		if (desired_settings & BME680_GAS_MEAS_SEL)
   13238:	1dbb      	adds	r3, r7, #6
   1323a:	881b      	ldrh	r3, [r3, #0]
   1323c:	2208      	movs	r2, #8
   1323e:	4013      	ands	r3, r2
   13240:	d007      	beq.n	13252 <bme680_set_sensor_settings+0x82>
			rslt = set_gas_config(dev);
   13242:	231f      	movs	r3, #31
   13244:	18fc      	adds	r4, r7, r3
   13246:	683b      	ldr	r3, [r7, #0]
   13248:	0018      	movs	r0, r3
   1324a:	4bd5      	ldr	r3, [pc, #852]	; (135a0 <bme680_set_sensor_settings+0x3d0>)
   1324c:	4798      	blx	r3
   1324e:	0003      	movs	r3, r0
   13250:	7023      	strb	r3, [r4, #0]

		dev->power_mode = BME680_SLEEP_MODE;
   13252:	683b      	ldr	r3, [r7, #0]
   13254:	2244      	movs	r2, #68	; 0x44
   13256:	2100      	movs	r1, #0
   13258:	5499      	strb	r1, [r3, r2]
		if (rslt == BME680_OK)
   1325a:	231f      	movs	r3, #31
   1325c:	18fb      	adds	r3, r7, r3
   1325e:	781b      	ldrb	r3, [r3, #0]
   13260:	b25b      	sxtb	r3, r3
   13262:	2b00      	cmp	r3, #0
   13264:	d107      	bne.n	13276 <bme680_set_sensor_settings+0xa6>
			rslt = bme680_set_sensor_mode(dev);
   13266:	231f      	movs	r3, #31
   13268:	18fc      	adds	r4, r7, r3
   1326a:	683b      	ldr	r3, [r7, #0]
   1326c:	0018      	movs	r0, r3
   1326e:	4bcd      	ldr	r3, [pc, #820]	; (135a4 <bme680_set_sensor_settings+0x3d4>)
   13270:	4798      	blx	r3
   13272:	0003      	movs	r3, r0
   13274:	7023      	strb	r3, [r4, #0]

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
   13276:	1dbb      	adds	r3, r7, #6
   13278:	881b      	ldrh	r3, [r3, #0]
   1327a:	2210      	movs	r2, #16
   1327c:	4013      	ands	r3, r2
   1327e:	d056      	beq.n	1332e <bme680_set_sensor_settings+0x15e>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
   13280:	683b      	ldr	r3, [r7, #0]
   13282:	333b      	adds	r3, #59	; 0x3b
   13284:	0018      	movs	r0, r3
   13286:	231f      	movs	r3, #31
   13288:	18fc      	adds	r4, r7, r3
   1328a:	683b      	ldr	r3, [r7, #0]
   1328c:	2207      	movs	r2, #7
   1328e:	2100      	movs	r1, #0
   13290:	4dc5      	ldr	r5, [pc, #788]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   13292:	47a8      	blx	r5
   13294:	0003      	movs	r3, r0
   13296:	7023      	strb	r3, [r4, #0]
			reg_addr = BME680_CONF_ODR_FILT_ADDR;
   13298:	231c      	movs	r3, #28
   1329a:	18fb      	adds	r3, r7, r3
   1329c:	2275      	movs	r2, #117	; 0x75
   1329e:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   132a0:	231f      	movs	r3, #31
   132a2:	18fb      	adds	r3, r7, r3
   132a4:	781b      	ldrb	r3, [r3, #0]
   132a6:	b25b      	sxtb	r3, r3
   132a8:	2b00      	cmp	r3, #0
   132aa:	d10d      	bne.n	132c8 <bme680_set_sensor_settings+0xf8>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   132ac:	231f      	movs	r3, #31
   132ae:	18fc      	adds	r4, r7, r3
   132b0:	683a      	ldr	r2, [r7, #0]
   132b2:	231b      	movs	r3, #27
   132b4:	18f9      	adds	r1, r7, r3
   132b6:	231c      	movs	r3, #28
   132b8:	18fb      	adds	r3, r7, r3
   132ba:	7818      	ldrb	r0, [r3, #0]
   132bc:	0013      	movs	r3, r2
   132be:	2201      	movs	r2, #1
   132c0:	4dba      	ldr	r5, [pc, #744]	; (135ac <bme680_set_sensor_settings+0x3dc>)
   132c2:	47a8      	blx	r5
   132c4:	0003      	movs	r3, r0
   132c6:	7023      	strb	r3, [r4, #0]

			if (desired_settings & BME680_FILTER_SEL)
   132c8:	1dbb      	adds	r3, r7, #6
   132ca:	881b      	ldrh	r3, [r3, #0]
   132cc:	2210      	movs	r2, #16
   132ce:	4013      	ands	r3, r2
   132d0:	d014      	beq.n	132fc <bme680_set_sensor_settings+0x12c>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
   132d2:	231b      	movs	r3, #27
   132d4:	18fb      	adds	r3, r7, r3
   132d6:	781b      	ldrb	r3, [r3, #0]
   132d8:	b25b      	sxtb	r3, r3
   132da:	221c      	movs	r2, #28
   132dc:	4393      	bics	r3, r2
   132de:	b25a      	sxtb	r2, r3
   132e0:	683b      	ldr	r3, [r7, #0]
   132e2:	213b      	movs	r1, #59	; 0x3b
   132e4:	5c5b      	ldrb	r3, [r3, r1]
   132e6:	009b      	lsls	r3, r3, #2
   132e8:	b25b      	sxtb	r3, r3
   132ea:	211c      	movs	r1, #28
   132ec:	400b      	ands	r3, r1
   132ee:	b25b      	sxtb	r3, r3
   132f0:	4313      	orrs	r3, r2
   132f2:	b25b      	sxtb	r3, r3
   132f4:	b2da      	uxtb	r2, r3
   132f6:	231b      	movs	r3, #27
   132f8:	18fb      	adds	r3, r7, r3
   132fa:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr; /* Append configuration */
   132fc:	231e      	movs	r3, #30
   132fe:	18fb      	adds	r3, r7, r3
   13300:	781b      	ldrb	r3, [r3, #0]
   13302:	2214      	movs	r2, #20
   13304:	18ba      	adds	r2, r7, r2
   13306:	211c      	movs	r1, #28
   13308:	1879      	adds	r1, r7, r1
   1330a:	7809      	ldrb	r1, [r1, #0]
   1330c:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   1330e:	231e      	movs	r3, #30
   13310:	18fb      	adds	r3, r7, r3
   13312:	781b      	ldrb	r3, [r3, #0]
   13314:	221b      	movs	r2, #27
   13316:	18ba      	adds	r2, r7, r2
   13318:	7811      	ldrb	r1, [r2, #0]
   1331a:	220c      	movs	r2, #12
   1331c:	18ba      	adds	r2, r7, r2
   1331e:	54d1      	strb	r1, [r2, r3]
			count++;
   13320:	231e      	movs	r3, #30
   13322:	18fb      	adds	r3, r7, r3
   13324:	781a      	ldrb	r2, [r3, #0]
   13326:	231e      	movs	r3, #30
   13328:	18fb      	adds	r3, r7, r3
   1332a:	3201      	adds	r2, #1
   1332c:	701a      	strb	r2, [r3, #0]
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
   1332e:	1dbb      	adds	r3, r7, #6
   13330:	881b      	ldrh	r3, [r3, #0]
   13332:	2220      	movs	r2, #32
   13334:	4013      	ands	r3, r2
   13336:	d050      	beq.n	133da <bme680_set_sensor_settings+0x20a>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
   13338:	683b      	ldr	r3, [r7, #0]
   1333a:	333d      	adds	r3, #61	; 0x3d
   1333c:	0018      	movs	r0, r3
   1333e:	231f      	movs	r3, #31
   13340:	18fc      	adds	r4, r7, r3
   13342:	683b      	ldr	r3, [r7, #0]
   13344:	2208      	movs	r2, #8
   13346:	2100      	movs	r1, #0
   13348:	4d97      	ldr	r5, [pc, #604]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   1334a:	47a8      	blx	r5
   1334c:	0003      	movs	r3, r0
   1334e:	7023      	strb	r3, [r4, #0]
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;
   13350:	231c      	movs	r3, #28
   13352:	18fb      	adds	r3, r7, r3
   13354:	2270      	movs	r2, #112	; 0x70
   13356:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   13358:	231f      	movs	r3, #31
   1335a:	18fb      	adds	r3, r7, r3
   1335c:	781b      	ldrb	r3, [r3, #0]
   1335e:	b25b      	sxtb	r3, r3
   13360:	2b00      	cmp	r3, #0
   13362:	d10d      	bne.n	13380 <bme680_set_sensor_settings+0x1b0>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   13364:	231f      	movs	r3, #31
   13366:	18fc      	adds	r4, r7, r3
   13368:	683a      	ldr	r2, [r7, #0]
   1336a:	231b      	movs	r3, #27
   1336c:	18f9      	adds	r1, r7, r3
   1336e:	231c      	movs	r3, #28
   13370:	18fb      	adds	r3, r7, r3
   13372:	7818      	ldrb	r0, [r3, #0]
   13374:	0013      	movs	r3, r2
   13376:	2201      	movs	r2, #1
   13378:	4d8c      	ldr	r5, [pc, #560]	; (135ac <bme680_set_sensor_settings+0x3dc>)
   1337a:	47a8      	blx	r5
   1337c:	0003      	movs	r3, r0
   1337e:	7023      	strb	r3, [r4, #0]
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
   13380:	231b      	movs	r3, #27
   13382:	18fb      	adds	r3, r7, r3
   13384:	781b      	ldrb	r3, [r3, #0]
   13386:	b25b      	sxtb	r3, r3
   13388:	2208      	movs	r2, #8
   1338a:	4393      	bics	r3, r2
   1338c:	b25a      	sxtb	r2, r3
   1338e:	683b      	ldr	r3, [r7, #0]
   13390:	213d      	movs	r1, #61	; 0x3d
   13392:	5c5b      	ldrb	r3, [r3, r1]
   13394:	b25b      	sxtb	r3, r3
   13396:	2108      	movs	r1, #8
   13398:	400b      	ands	r3, r1
   1339a:	b25b      	sxtb	r3, r3
   1339c:	4313      	orrs	r3, r2
   1339e:	b25b      	sxtb	r3, r3
   133a0:	b2da      	uxtb	r2, r3
   133a2:	231b      	movs	r3, #27
   133a4:	18fb      	adds	r3, r7, r3
   133a6:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr; /* Append configuration */
   133a8:	231e      	movs	r3, #30
   133aa:	18fb      	adds	r3, r7, r3
   133ac:	781b      	ldrb	r3, [r3, #0]
   133ae:	2214      	movs	r2, #20
   133b0:	18ba      	adds	r2, r7, r2
   133b2:	211c      	movs	r1, #28
   133b4:	1879      	adds	r1, r7, r1
   133b6:	7809      	ldrb	r1, [r1, #0]
   133b8:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   133ba:	231e      	movs	r3, #30
   133bc:	18fb      	adds	r3, r7, r3
   133be:	781b      	ldrb	r3, [r3, #0]
   133c0:	221b      	movs	r2, #27
   133c2:	18ba      	adds	r2, r7, r2
   133c4:	7811      	ldrb	r1, [r2, #0]
   133c6:	220c      	movs	r2, #12
   133c8:	18ba      	adds	r2, r7, r2
   133ca:	54d1      	strb	r1, [r2, r3]
			count++;
   133cc:	231e      	movs	r3, #30
   133ce:	18fb      	adds	r3, r7, r3
   133d0:	781a      	ldrb	r2, [r3, #0]
   133d2:	231e      	movs	r3, #30
   133d4:	18fb      	adds	r3, r7, r3
   133d6:	3201      	adds	r2, #1
   133d8:	701a      	strb	r2, [r3, #0]
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
   133da:	1dbb      	adds	r3, r7, #6
   133dc:	881b      	ldrh	r3, [r3, #0]
   133de:	2203      	movs	r2, #3
   133e0:	4013      	ands	r3, r2
   133e2:	d06d      	beq.n	134c0 <bme680_set_sensor_settings+0x2f0>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
   133e4:	683b      	ldr	r3, [r7, #0]
   133e6:	3339      	adds	r3, #57	; 0x39
   133e8:	0018      	movs	r0, r3
   133ea:	231f      	movs	r3, #31
   133ec:	18fc      	adds	r4, r7, r3
   133ee:	683b      	ldr	r3, [r7, #0]
   133f0:	2205      	movs	r2, #5
   133f2:	2100      	movs	r1, #0
   133f4:	4d6c      	ldr	r5, [pc, #432]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   133f6:	47a8      	blx	r5
   133f8:	0003      	movs	r3, r0
   133fa:	7023      	strb	r3, [r4, #0]
			reg_addr = BME680_CONF_T_P_MODE_ADDR;
   133fc:	231c      	movs	r3, #28
   133fe:	18fb      	adds	r3, r7, r3
   13400:	2274      	movs	r2, #116	; 0x74
   13402:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   13404:	231f      	movs	r3, #31
   13406:	18fb      	adds	r3, r7, r3
   13408:	781b      	ldrb	r3, [r3, #0]
   1340a:	b25b      	sxtb	r3, r3
   1340c:	2b00      	cmp	r3, #0
   1340e:	d10d      	bne.n	1342c <bme680_set_sensor_settings+0x25c>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   13410:	231f      	movs	r3, #31
   13412:	18fc      	adds	r4, r7, r3
   13414:	683a      	ldr	r2, [r7, #0]
   13416:	231b      	movs	r3, #27
   13418:	18f9      	adds	r1, r7, r3
   1341a:	231c      	movs	r3, #28
   1341c:	18fb      	adds	r3, r7, r3
   1341e:	7818      	ldrb	r0, [r3, #0]
   13420:	0013      	movs	r3, r2
   13422:	2201      	movs	r2, #1
   13424:	4d61      	ldr	r5, [pc, #388]	; (135ac <bme680_set_sensor_settings+0x3dc>)
   13426:	47a8      	blx	r5
   13428:	0003      	movs	r3, r0
   1342a:	7023      	strb	r3, [r4, #0]

			if (desired_settings & BME680_OST_SEL)
   1342c:	1dbb      	adds	r3, r7, #6
   1342e:	881b      	ldrh	r3, [r3, #0]
   13430:	2201      	movs	r2, #1
   13432:	4013      	ands	r3, r2
   13434:	d011      	beq.n	1345a <bme680_set_sensor_settings+0x28a>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
   13436:	231b      	movs	r3, #27
   13438:	18fb      	adds	r3, r7, r3
   1343a:	781b      	ldrb	r3, [r3, #0]
   1343c:	b25b      	sxtb	r3, r3
   1343e:	221f      	movs	r2, #31
   13440:	4013      	ands	r3, r2
   13442:	b25a      	sxtb	r2, r3
   13444:	683b      	ldr	r3, [r7, #0]
   13446:	2139      	movs	r1, #57	; 0x39
   13448:	5c5b      	ldrb	r3, [r3, r1]
   1344a:	015b      	lsls	r3, r3, #5
   1344c:	b25b      	sxtb	r3, r3
   1344e:	4313      	orrs	r3, r2
   13450:	b25b      	sxtb	r3, r3
   13452:	b2da      	uxtb	r2, r3
   13454:	231b      	movs	r3, #27
   13456:	18fb      	adds	r3, r7, r3
   13458:	701a      	strb	r2, [r3, #0]

			if (desired_settings & BME680_OSP_SEL)
   1345a:	1dbb      	adds	r3, r7, #6
   1345c:	881b      	ldrh	r3, [r3, #0]
   1345e:	2202      	movs	r2, #2
   13460:	4013      	ands	r3, r2
   13462:	d014      	beq.n	1348e <bme680_set_sensor_settings+0x2be>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
   13464:	231b      	movs	r3, #27
   13466:	18fb      	adds	r3, r7, r3
   13468:	781b      	ldrb	r3, [r3, #0]
   1346a:	b25b      	sxtb	r3, r3
   1346c:	221c      	movs	r2, #28
   1346e:	4393      	bics	r3, r2
   13470:	b25a      	sxtb	r2, r3
   13472:	683b      	ldr	r3, [r7, #0]
   13474:	213a      	movs	r1, #58	; 0x3a
   13476:	5c5b      	ldrb	r3, [r3, r1]
   13478:	009b      	lsls	r3, r3, #2
   1347a:	b25b      	sxtb	r3, r3
   1347c:	211c      	movs	r1, #28
   1347e:	400b      	ands	r3, r1
   13480:	b25b      	sxtb	r3, r3
   13482:	4313      	orrs	r3, r2
   13484:	b25b      	sxtb	r3, r3
   13486:	b2da      	uxtb	r2, r3
   13488:	231b      	movs	r3, #27
   1348a:	18fb      	adds	r3, r7, r3
   1348c:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr;
   1348e:	231e      	movs	r3, #30
   13490:	18fb      	adds	r3, r7, r3
   13492:	781b      	ldrb	r3, [r3, #0]
   13494:	2214      	movs	r2, #20
   13496:	18ba      	adds	r2, r7, r2
   13498:	211c      	movs	r1, #28
   1349a:	1879      	adds	r1, r7, r1
   1349c:	7809      	ldrb	r1, [r1, #0]
   1349e:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   134a0:	231e      	movs	r3, #30
   134a2:	18fb      	adds	r3, r7, r3
   134a4:	781b      	ldrb	r3, [r3, #0]
   134a6:	221b      	movs	r2, #27
   134a8:	18ba      	adds	r2, r7, r2
   134aa:	7811      	ldrb	r1, [r2, #0]
   134ac:	220c      	movs	r2, #12
   134ae:	18ba      	adds	r2, r7, r2
   134b0:	54d1      	strb	r1, [r2, r3]
			count++;
   134b2:	231e      	movs	r3, #30
   134b4:	18fb      	adds	r3, r7, r3
   134b6:	781a      	ldrb	r2, [r3, #0]
   134b8:	231e      	movs	r3, #30
   134ba:	18fb      	adds	r3, r7, r3
   134bc:	3201      	adds	r2, #1
   134be:	701a      	strb	r2, [r3, #0]
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
   134c0:	1dbb      	adds	r3, r7, #6
   134c2:	881b      	ldrh	r3, [r3, #0]
   134c4:	2204      	movs	r2, #4
   134c6:	4013      	ands	r3, r2
   134c8:	d050      	beq.n	1356c <bme680_set_sensor_settings+0x39c>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
   134ca:	683b      	ldr	r3, [r7, #0]
   134cc:	3338      	adds	r3, #56	; 0x38
   134ce:	0018      	movs	r0, r3
   134d0:	231f      	movs	r3, #31
   134d2:	18fc      	adds	r4, r7, r3
   134d4:	683b      	ldr	r3, [r7, #0]
   134d6:	2205      	movs	r2, #5
   134d8:	2100      	movs	r1, #0
   134da:	4d33      	ldr	r5, [pc, #204]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   134dc:	47a8      	blx	r5
   134de:	0003      	movs	r3, r0
   134e0:	7023      	strb	r3, [r4, #0]
			reg_addr = BME680_CONF_OS_H_ADDR;
   134e2:	231c      	movs	r3, #28
   134e4:	18fb      	adds	r3, r7, r3
   134e6:	2272      	movs	r2, #114	; 0x72
   134e8:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   134ea:	231f      	movs	r3, #31
   134ec:	18fb      	adds	r3, r7, r3
   134ee:	781b      	ldrb	r3, [r3, #0]
   134f0:	b25b      	sxtb	r3, r3
   134f2:	2b00      	cmp	r3, #0
   134f4:	d10d      	bne.n	13512 <bme680_set_sensor_settings+0x342>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   134f6:	231f      	movs	r3, #31
   134f8:	18fc      	adds	r4, r7, r3
   134fa:	683a      	ldr	r2, [r7, #0]
   134fc:	231b      	movs	r3, #27
   134fe:	18f9      	adds	r1, r7, r3
   13500:	231c      	movs	r3, #28
   13502:	18fb      	adds	r3, r7, r3
   13504:	7818      	ldrb	r0, [r3, #0]
   13506:	0013      	movs	r3, r2
   13508:	2201      	movs	r2, #1
   1350a:	4d28      	ldr	r5, [pc, #160]	; (135ac <bme680_set_sensor_settings+0x3dc>)
   1350c:	47a8      	blx	r5
   1350e:	0003      	movs	r3, r0
   13510:	7023      	strb	r3, [r4, #0]
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
   13512:	231b      	movs	r3, #27
   13514:	18fb      	adds	r3, r7, r3
   13516:	781b      	ldrb	r3, [r3, #0]
   13518:	b25b      	sxtb	r3, r3
   1351a:	2207      	movs	r2, #7
   1351c:	4393      	bics	r3, r2
   1351e:	b25a      	sxtb	r2, r3
   13520:	683b      	ldr	r3, [r7, #0]
   13522:	2138      	movs	r1, #56	; 0x38
   13524:	5c5b      	ldrb	r3, [r3, r1]
   13526:	b25b      	sxtb	r3, r3
   13528:	2107      	movs	r1, #7
   1352a:	400b      	ands	r3, r1
   1352c:	b25b      	sxtb	r3, r3
   1352e:	4313      	orrs	r3, r2
   13530:	b25b      	sxtb	r3, r3
   13532:	b2da      	uxtb	r2, r3
   13534:	231b      	movs	r3, #27
   13536:	18fb      	adds	r3, r7, r3
   13538:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr; /* Append configuration */
   1353a:	231e      	movs	r3, #30
   1353c:	18fb      	adds	r3, r7, r3
   1353e:	781b      	ldrb	r3, [r3, #0]
   13540:	2214      	movs	r2, #20
   13542:	18ba      	adds	r2, r7, r2
   13544:	211c      	movs	r1, #28
   13546:	1879      	adds	r1, r7, r1
   13548:	7809      	ldrb	r1, [r1, #0]
   1354a:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   1354c:	231e      	movs	r3, #30
   1354e:	18fb      	adds	r3, r7, r3
   13550:	781b      	ldrb	r3, [r3, #0]
   13552:	221b      	movs	r2, #27
   13554:	18ba      	adds	r2, r7, r2
   13556:	7811      	ldrb	r1, [r2, #0]
   13558:	220c      	movs	r2, #12
   1355a:	18ba      	adds	r2, r7, r2
   1355c:	54d1      	strb	r1, [r2, r3]
			count++;
   1355e:	231e      	movs	r3, #30
   13560:	18fb      	adds	r3, r7, r3
   13562:	781a      	ldrb	r2, [r3, #0]
   13564:	231e      	movs	r3, #30
   13566:	18fb      	adds	r3, r7, r3
   13568:	3201      	adds	r2, #1
   1356a:	701a      	strb	r2, [r3, #0]
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
   1356c:	1dbb      	adds	r3, r7, #6
   1356e:	881b      	ldrh	r3, [r3, #0]
   13570:	22c0      	movs	r2, #192	; 0xc0
   13572:	4013      	ands	r3, r2
   13574:	d100      	bne.n	13578 <bme680_set_sensor_settings+0x3a8>
   13576:	e08e      	b.n	13696 <bme680_set_sensor_settings+0x4c6>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
   13578:	683b      	ldr	r3, [r7, #0]
   1357a:	333e      	adds	r3, #62	; 0x3e
   1357c:	0018      	movs	r0, r3
   1357e:	231f      	movs	r3, #31
   13580:	18fc      	adds	r4, r7, r3
   13582:	683b      	ldr	r3, [r7, #0]
   13584:	2201      	movs	r2, #1
   13586:	2100      	movs	r1, #0
   13588:	4d07      	ldr	r5, [pc, #28]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   1358a:	47a8      	blx	r5
   1358c:	0003      	movs	r3, r0
   1358e:	7023      	strb	r3, [r4, #0]
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
   13590:	231f      	movs	r3, #31
   13592:	18fb      	adds	r3, r7, r3
   13594:	781b      	ldrb	r3, [r3, #0]
   13596:	e00b      	b.n	135b0 <bme680_set_sensor_settings+0x3e0>
   13598:	00036c9f 	.word	0x00036c9f
   1359c:	0001482f 	.word	0x0001482f
   135a0:	00013c5d 	.word	0x00013c5d
   135a4:	000136e9 	.word	0x000136e9
   135a8:	00014795 	.word	0x00014795
   135ac:	00012ee5 	.word	0x00012ee5
   135b0:	b25b      	sxtb	r3, r3
   135b2:	2b00      	cmp	r3, #0
   135b4:	d10b      	bne.n	135ce <bme680_set_sensor_settings+0x3fe>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
   135b6:	683b      	ldr	r3, [r7, #0]
   135b8:	333c      	adds	r3, #60	; 0x3c
   135ba:	0018      	movs	r0, r3
   135bc:	231f      	movs	r3, #31
   135be:	18fc      	adds	r4, r7, r3
   135c0:	683b      	ldr	r3, [r7, #0]
   135c2:	220a      	movs	r2, #10
   135c4:	2100      	movs	r1, #0
   135c6:	4d45      	ldr	r5, [pc, #276]	; (136dc <bme680_set_sensor_settings+0x50c>)
   135c8:	47a8      	blx	r5
   135ca:	0003      	movs	r3, r0
   135cc:	7023      	strb	r3, [r4, #0]
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;
   135ce:	231c      	movs	r3, #28
   135d0:	18fb      	adds	r3, r7, r3
   135d2:	2271      	movs	r2, #113	; 0x71
   135d4:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   135d6:	231f      	movs	r3, #31
   135d8:	18fb      	adds	r3, r7, r3
   135da:	781b      	ldrb	r3, [r3, #0]
   135dc:	b25b      	sxtb	r3, r3
   135de:	2b00      	cmp	r3, #0
   135e0:	d10d      	bne.n	135fe <bme680_set_sensor_settings+0x42e>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   135e2:	231f      	movs	r3, #31
   135e4:	18fc      	adds	r4, r7, r3
   135e6:	683a      	ldr	r2, [r7, #0]
   135e8:	231b      	movs	r3, #27
   135ea:	18f9      	adds	r1, r7, r3
   135ec:	231c      	movs	r3, #28
   135ee:	18fb      	adds	r3, r7, r3
   135f0:	7818      	ldrb	r0, [r3, #0]
   135f2:	0013      	movs	r3, r2
   135f4:	2201      	movs	r2, #1
   135f6:	4d3a      	ldr	r5, [pc, #232]	; (136e0 <bme680_set_sensor_settings+0x510>)
   135f8:	47a8      	blx	r5
   135fa:	0003      	movs	r3, r0
   135fc:	7023      	strb	r3, [r4, #0]

			if (desired_settings & BME680_RUN_GAS_SEL)
   135fe:	1dbb      	adds	r3, r7, #6
   13600:	881b      	ldrh	r3, [r3, #0]
   13602:	2240      	movs	r2, #64	; 0x40
   13604:	4013      	ands	r3, r2
   13606:	d014      	beq.n	13632 <bme680_set_sensor_settings+0x462>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
   13608:	231b      	movs	r3, #27
   1360a:	18fb      	adds	r3, r7, r3
   1360c:	781b      	ldrb	r3, [r3, #0]
   1360e:	b25b      	sxtb	r3, r3
   13610:	2210      	movs	r2, #16
   13612:	4393      	bics	r3, r2
   13614:	b25a      	sxtb	r2, r3
   13616:	683b      	ldr	r3, [r7, #0]
   13618:	213e      	movs	r1, #62	; 0x3e
   1361a:	5c5b      	ldrb	r3, [r3, r1]
   1361c:	011b      	lsls	r3, r3, #4
   1361e:	b25b      	sxtb	r3, r3
   13620:	2110      	movs	r1, #16
   13622:	400b      	ands	r3, r1
   13624:	b25b      	sxtb	r3, r3
   13626:	4313      	orrs	r3, r2
   13628:	b25b      	sxtb	r3, r3
   1362a:	b2da      	uxtb	r2, r3
   1362c:	231b      	movs	r3, #27
   1362e:	18fb      	adds	r3, r7, r3
   13630:	701a      	strb	r2, [r3, #0]

			if (desired_settings & BME680_NBCONV_SEL)
   13632:	1dbb      	adds	r3, r7, #6
   13634:	881b      	ldrh	r3, [r3, #0]
   13636:	2280      	movs	r2, #128	; 0x80
   13638:	4013      	ands	r3, r2
   1363a:	d013      	beq.n	13664 <bme680_set_sensor_settings+0x494>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
   1363c:	231b      	movs	r3, #27
   1363e:	18fb      	adds	r3, r7, r3
   13640:	781b      	ldrb	r3, [r3, #0]
   13642:	b25b      	sxtb	r3, r3
   13644:	220f      	movs	r2, #15
   13646:	4393      	bics	r3, r2
   13648:	b25a      	sxtb	r2, r3
   1364a:	683b      	ldr	r3, [r7, #0]
   1364c:	213c      	movs	r1, #60	; 0x3c
   1364e:	5c5b      	ldrb	r3, [r3, r1]
   13650:	b25b      	sxtb	r3, r3
   13652:	210f      	movs	r1, #15
   13654:	400b      	ands	r3, r1
   13656:	b25b      	sxtb	r3, r3
   13658:	4313      	orrs	r3, r2
   1365a:	b25b      	sxtb	r3, r3
   1365c:	b2da      	uxtb	r2, r3
   1365e:	231b      	movs	r3, #27
   13660:	18fb      	adds	r3, r7, r3
   13662:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr; /* Append configuration */
   13664:	231e      	movs	r3, #30
   13666:	18fb      	adds	r3, r7, r3
   13668:	781b      	ldrb	r3, [r3, #0]
   1366a:	2214      	movs	r2, #20
   1366c:	18ba      	adds	r2, r7, r2
   1366e:	211c      	movs	r1, #28
   13670:	1879      	adds	r1, r7, r1
   13672:	7809      	ldrb	r1, [r1, #0]
   13674:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   13676:	231e      	movs	r3, #30
   13678:	18fb      	adds	r3, r7, r3
   1367a:	781b      	ldrb	r3, [r3, #0]
   1367c:	221b      	movs	r2, #27
   1367e:	18ba      	adds	r2, r7, r2
   13680:	7811      	ldrb	r1, [r2, #0]
   13682:	220c      	movs	r2, #12
   13684:	18ba      	adds	r2, r7, r2
   13686:	54d1      	strb	r1, [r2, r3]
			count++;
   13688:	231e      	movs	r3, #30
   1368a:	18fb      	adds	r3, r7, r3
   1368c:	781a      	ldrb	r2, [r3, #0]
   1368e:	231e      	movs	r3, #30
   13690:	18fb      	adds	r3, r7, r3
   13692:	3201      	adds	r2, #1
   13694:	701a      	strb	r2, [r3, #0]
		}

		if (rslt == BME680_OK)
   13696:	231f      	movs	r3, #31
   13698:	18fb      	adds	r3, r7, r3
   1369a:	781b      	ldrb	r3, [r3, #0]
   1369c:	b25b      	sxtb	r3, r3
   1369e:	2b00      	cmp	r3, #0
   136a0:	d10e      	bne.n	136c0 <bme680_set_sensor_settings+0x4f0>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
   136a2:	231f      	movs	r3, #31
   136a4:	18fc      	adds	r4, r7, r3
   136a6:	683d      	ldr	r5, [r7, #0]
   136a8:	231e      	movs	r3, #30
   136aa:	18fb      	adds	r3, r7, r3
   136ac:	781a      	ldrb	r2, [r3, #0]
   136ae:	230c      	movs	r3, #12
   136b0:	18f9      	adds	r1, r7, r3
   136b2:	2314      	movs	r3, #20
   136b4:	18f8      	adds	r0, r7, r3
   136b6:	002b      	movs	r3, r5
   136b8:	4d0a      	ldr	r5, [pc, #40]	; (136e4 <bme680_set_sensor_settings+0x514>)
   136ba:	47a8      	blx	r5
   136bc:	0003      	movs	r3, r0
   136be:	7023      	strb	r3, [r4, #0]

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
   136c0:	683b      	ldr	r3, [r7, #0]
   136c2:	221d      	movs	r2, #29
   136c4:	18ba      	adds	r2, r7, r2
   136c6:	2144      	movs	r1, #68	; 0x44
   136c8:	7812      	ldrb	r2, [r2, #0]
   136ca:	545a      	strb	r2, [r3, r1]
	}

	return rslt;
   136cc:	231f      	movs	r3, #31
   136ce:	18fb      	adds	r3, r7, r3
   136d0:	781b      	ldrb	r3, [r3, #0]
   136d2:	b25b      	sxtb	r3, r3
}
   136d4:	0018      	movs	r0, r3
   136d6:	46bd      	mov	sp, r7
   136d8:	b008      	add	sp, #32
   136da:	bdb0      	pop	{r4, r5, r7, pc}
   136dc:	00014795 	.word	0x00014795
   136e0:	00012ee5 	.word	0x00012ee5
   136e4:	00012fa9 	.word	0x00012fa9

000136e8 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
   136e8:	b5b0      	push	{r4, r5, r7, lr}
   136ea:	b084      	sub	sp, #16
   136ec:	af00      	add	r7, sp, #0
   136ee:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
   136f0:	230e      	movs	r3, #14
   136f2:	18fb      	adds	r3, r7, r3
   136f4:	2200      	movs	r2, #0
   136f6:	701a      	strb	r2, [r3, #0]
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
   136f8:	230c      	movs	r3, #12
   136fa:	18fb      	adds	r3, r7, r3
   136fc:	2274      	movs	r2, #116	; 0x74
   136fe:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   13700:	230f      	movs	r3, #15
   13702:	18fc      	adds	r4, r7, r3
   13704:	687b      	ldr	r3, [r7, #4]
   13706:	0018      	movs	r0, r3
   13708:	4b3c      	ldr	r3, [pc, #240]	; (137fc <bme680_set_sensor_mode+0x114>)
   1370a:	4798      	blx	r3
   1370c:	0003      	movs	r3, r0
   1370e:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   13710:	230f      	movs	r3, #15
   13712:	18fb      	adds	r3, r7, r3
   13714:	781b      	ldrb	r3, [r3, #0]
   13716:	b25b      	sxtb	r3, r3
   13718:	2b00      	cmp	r3, #0
   1371a:	d166      	bne.n	137ea <bme680_set_sensor_mode+0x102>
		/* Call repeatedly until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
   1371c:	230f      	movs	r3, #15
   1371e:	18fc      	adds	r4, r7, r3
   13720:	687b      	ldr	r3, [r7, #4]
   13722:	220d      	movs	r2, #13
   13724:	18b9      	adds	r1, r7, r2
   13726:	2201      	movs	r2, #1
   13728:	2074      	movs	r0, #116	; 0x74
   1372a:	4d35      	ldr	r5, [pc, #212]	; (13800 <bme680_set_sensor_mode+0x118>)
   1372c:	47a8      	blx	r5
   1372e:	0003      	movs	r3, r0
   13730:	7023      	strb	r3, [r4, #0]
			if (rslt == BME680_OK) {
   13732:	230f      	movs	r3, #15
   13734:	18fb      	adds	r3, r7, r3
   13736:	781b      	ldrb	r3, [r3, #0]
   13738:	b25b      	sxtb	r3, r3
   1373a:	2b00      	cmp	r3, #0
   1373c:	d125      	bne.n	1378a <bme680_set_sensor_mode+0xa2>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
   1373e:	230d      	movs	r3, #13
   13740:	18fb      	adds	r3, r7, r3
   13742:	781a      	ldrb	r2, [r3, #0]
   13744:	230e      	movs	r3, #14
   13746:	18fb      	adds	r3, r7, r3
   13748:	2103      	movs	r1, #3
   1374a:	400a      	ands	r2, r1
   1374c:	701a      	strb	r2, [r3, #0]

				if (pow_mode != BME680_SLEEP_MODE) {
   1374e:	230e      	movs	r3, #14
   13750:	18fb      	adds	r3, r7, r3
   13752:	781b      	ldrb	r3, [r3, #0]
   13754:	2b00      	cmp	r3, #0
   13756:	d018      	beq.n	1378a <bme680_set_sensor_mode+0xa2>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
   13758:	230d      	movs	r3, #13
   1375a:	18fb      	adds	r3, r7, r3
   1375c:	781b      	ldrb	r3, [r3, #0]
   1375e:	2203      	movs	r2, #3
   13760:	4393      	bics	r3, r2
   13762:	b2da      	uxtb	r2, r3
   13764:	230d      	movs	r3, #13
   13766:	18fb      	adds	r3, r7, r3
   13768:	701a      	strb	r2, [r3, #0]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   1376a:	230f      	movs	r3, #15
   1376c:	18fc      	adds	r4, r7, r3
   1376e:	687b      	ldr	r3, [r7, #4]
   13770:	220d      	movs	r2, #13
   13772:	18b9      	adds	r1, r7, r2
   13774:	220c      	movs	r2, #12
   13776:	18b8      	adds	r0, r7, r2
   13778:	2201      	movs	r2, #1
   1377a:	4d22      	ldr	r5, [pc, #136]	; (13804 <bme680_set_sensor_mode+0x11c>)
   1377c:	47a8      	blx	r5
   1377e:	0003      	movs	r3, r0
   13780:	7023      	strb	r3, [r4, #0]
					dev->delay_ms_bme(BME680_POLL_PERIOD_MS);
   13782:	687b      	ldr	r3, [r7, #4]
   13784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   13786:	200a      	movs	r0, #10
   13788:	4798      	blx	r3
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
   1378a:	230e      	movs	r3, #14
   1378c:	18fb      	adds	r3, r7, r3
   1378e:	781b      	ldrb	r3, [r3, #0]
   13790:	2b00      	cmp	r3, #0
   13792:	d1c3      	bne.n	1371c <bme680_set_sensor_mode+0x34>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
   13794:	687b      	ldr	r3, [r7, #4]
   13796:	2244      	movs	r2, #68	; 0x44
   13798:	5c9b      	ldrb	r3, [r3, r2]
   1379a:	2b00      	cmp	r3, #0
   1379c:	d025      	beq.n	137ea <bme680_set_sensor_mode+0x102>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
   1379e:	230d      	movs	r3, #13
   137a0:	18fb      	adds	r3, r7, r3
   137a2:	781b      	ldrb	r3, [r3, #0]
   137a4:	b25b      	sxtb	r3, r3
   137a6:	2203      	movs	r2, #3
   137a8:	4393      	bics	r3, r2
   137aa:	b25a      	sxtb	r2, r3
   137ac:	687b      	ldr	r3, [r7, #4]
   137ae:	2144      	movs	r1, #68	; 0x44
   137b0:	5c5b      	ldrb	r3, [r3, r1]
   137b2:	b25b      	sxtb	r3, r3
   137b4:	2103      	movs	r1, #3
   137b6:	400b      	ands	r3, r1
   137b8:	b25b      	sxtb	r3, r3
   137ba:	4313      	orrs	r3, r2
   137bc:	b25b      	sxtb	r3, r3
   137be:	b2da      	uxtb	r2, r3
   137c0:	230d      	movs	r3, #13
   137c2:	18fb      	adds	r3, r7, r3
   137c4:	701a      	strb	r2, [r3, #0]
			if (rslt == BME680_OK)
   137c6:	230f      	movs	r3, #15
   137c8:	18fb      	adds	r3, r7, r3
   137ca:	781b      	ldrb	r3, [r3, #0]
   137cc:	b25b      	sxtb	r3, r3
   137ce:	2b00      	cmp	r3, #0
   137d0:	d10b      	bne.n	137ea <bme680_set_sensor_mode+0x102>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   137d2:	230f      	movs	r3, #15
   137d4:	18fc      	adds	r4, r7, r3
   137d6:	687b      	ldr	r3, [r7, #4]
   137d8:	220d      	movs	r2, #13
   137da:	18b9      	adds	r1, r7, r2
   137dc:	220c      	movs	r2, #12
   137de:	18b8      	adds	r0, r7, r2
   137e0:	2201      	movs	r2, #1
   137e2:	4d08      	ldr	r5, [pc, #32]	; (13804 <bme680_set_sensor_mode+0x11c>)
   137e4:	47a8      	blx	r5
   137e6:	0003      	movs	r3, r0
   137e8:	7023      	strb	r3, [r4, #0]
		}
	}

	return rslt;
   137ea:	230f      	movs	r3, #15
   137ec:	18fb      	adds	r3, r7, r3
   137ee:	781b      	ldrb	r3, [r3, #0]
   137f0:	b25b      	sxtb	r3, r3
}
   137f2:	0018      	movs	r0, r3
   137f4:	46bd      	mov	sp, r7
   137f6:	b004      	add	sp, #16
   137f8:	bdb0      	pop	{r4, r5, r7, pc}
   137fa:	46c0      	nop			; (mov r8, r8)
   137fc:	0001482f 	.word	0x0001482f
   13800:	00012ee5 	.word	0x00012ee5
   13804:	00012fa9 	.word	0x00012fa9

00013808 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
   13808:	b580      	push	{r7, lr}
   1380a:	b086      	sub	sp, #24
   1380c:	af00      	add	r7, sp, #0
   1380e:	6078      	str	r0, [r7, #4]
   13810:	6039      	str	r1, [r7, #0]
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   13812:	2308      	movs	r3, #8
   13814:	18fb      	adds	r3, r7, r3
   13816:	4a2a      	ldr	r2, [pc, #168]	; (138c0 <bme680_get_profile_dur+0xb8>)
   13818:	6811      	ldr	r1, [r2, #0]
   1381a:	6019      	str	r1, [r3, #0]
   1381c:	8892      	ldrh	r2, [r2, #4]
   1381e:	809a      	strh	r2, [r3, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   13820:	683b      	ldr	r3, [r7, #0]
   13822:	2239      	movs	r2, #57	; 0x39
   13824:	5c9b      	ldrb	r3, [r3, r2]
   13826:	001a      	movs	r2, r3
   13828:	2308      	movs	r3, #8
   1382a:	18fb      	adds	r3, r7, r3
   1382c:	5c9b      	ldrb	r3, [r3, r2]
   1382e:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
   13830:	683b      	ldr	r3, [r7, #0]
   13832:	223a      	movs	r2, #58	; 0x3a
   13834:	5c9b      	ldrb	r3, [r3, r2]
   13836:	001a      	movs	r2, r3
   13838:	2308      	movs	r3, #8
   1383a:	18fb      	adds	r3, r7, r3
   1383c:	5c9b      	ldrb	r3, [r3, r2]
   1383e:	001a      	movs	r2, r3
   13840:	697b      	ldr	r3, [r7, #20]
   13842:	189b      	adds	r3, r3, r2
   13844:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
   13846:	683b      	ldr	r3, [r7, #0]
   13848:	2238      	movs	r2, #56	; 0x38
   1384a:	5c9b      	ldrb	r3, [r3, r2]
   1384c:	001a      	movs	r2, r3
   1384e:	2308      	movs	r3, #8
   13850:	18fb      	adds	r3, r7, r3
   13852:	5c9b      	ldrb	r3, [r3, r2]
   13854:	001a      	movs	r2, r3
   13856:	697b      	ldr	r3, [r7, #20]
   13858:	189b      	adds	r3, r3, r2
   1385a:	617b      	str	r3, [r7, #20]

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
   1385c:	697b      	ldr	r3, [r7, #20]
   1385e:	4a19      	ldr	r2, [pc, #100]	; (138c4 <bme680_get_profile_dur+0xbc>)
   13860:	4353      	muls	r3, r2
   13862:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
   13864:	693b      	ldr	r3, [r7, #16]
   13866:	4a18      	ldr	r2, [pc, #96]	; (138c8 <bme680_get_profile_dur+0xc0>)
   13868:	4694      	mov	ip, r2
   1386a:	4463      	add	r3, ip
   1386c:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
   1386e:	693b      	ldr	r3, [r7, #16]
   13870:	4a16      	ldr	r2, [pc, #88]	; (138cc <bme680_get_profile_dur+0xc4>)
   13872:	4694      	mov	ip, r2
   13874:	4463      	add	r3, ip
   13876:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
   13878:	693b      	ldr	r3, [r7, #16]
   1387a:	33f5      	adds	r3, #245	; 0xf5
   1387c:	33ff      	adds	r3, #255	; 0xff
   1387e:	613b      	str	r3, [r7, #16]
	tph_dur /= UINT32_C(1000); /* Convert to ms */
   13880:	6938      	ldr	r0, [r7, #16]
   13882:	4b13      	ldr	r3, [pc, #76]	; (138d0 <bme680_get_profile_dur+0xc8>)
   13884:	22fa      	movs	r2, #250	; 0xfa
   13886:	0091      	lsls	r1, r2, #2
   13888:	4798      	blx	r3
   1388a:	0003      	movs	r3, r0
   1388c:	613b      	str	r3, [r7, #16]

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
   1388e:	693b      	ldr	r3, [r7, #16]
   13890:	3301      	adds	r3, #1
   13892:	613b      	str	r3, [r7, #16]

	*duration = (uint16_t) tph_dur;
   13894:	693b      	ldr	r3, [r7, #16]
   13896:	b29a      	uxth	r2, r3
   13898:	687b      	ldr	r3, [r7, #4]
   1389a:	801a      	strh	r2, [r3, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
   1389c:	683b      	ldr	r3, [r7, #0]
   1389e:	223e      	movs	r2, #62	; 0x3e
   138a0:	5c9b      	ldrb	r3, [r3, r2]
   138a2:	2b00      	cmp	r3, #0
   138a4:	d008      	beq.n	138b8 <bme680_get_profile_dur+0xb0>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
   138a6:	687b      	ldr	r3, [r7, #4]
   138a8:	881a      	ldrh	r2, [r3, #0]
   138aa:	683b      	ldr	r3, [r7, #0]
   138ac:	2142      	movs	r1, #66	; 0x42
   138ae:	5a5b      	ldrh	r3, [r3, r1]
   138b0:	18d3      	adds	r3, r2, r3
   138b2:	b29a      	uxth	r2, r3
   138b4:	687b      	ldr	r3, [r7, #4]
   138b6:	801a      	strh	r2, [r3, #0]
	}
}
   138b8:	46c0      	nop			; (mov r8, r8)
   138ba:	46bd      	mov	sp, r7
   138bc:	b006      	add	sp, #24
   138be:	bd80      	pop	{r7, pc}
   138c0:	0003807c 	.word	0x0003807c
   138c4:	000007ab 	.word	0x000007ab
   138c8:	00000774 	.word	0x00000774
   138cc:	00000951 	.word	0x00000951
   138d0:	00034759 	.word	0x00034759

000138d4 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
   138d4:	b590      	push	{r4, r7, lr}
   138d6:	b085      	sub	sp, #20
   138d8:	af00      	add	r7, sp, #0
   138da:	6078      	str	r0, [r7, #4]
   138dc:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   138de:	230f      	movs	r3, #15
   138e0:	18fc      	adds	r4, r7, r3
   138e2:	683b      	ldr	r3, [r7, #0]
   138e4:	0018      	movs	r0, r3
   138e6:	4b18      	ldr	r3, [pc, #96]	; (13948 <bme680_get_sensor_data+0x74>)
   138e8:	4798      	blx	r3
   138ea:	0003      	movs	r3, r0
   138ec:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   138ee:	230f      	movs	r3, #15
   138f0:	18fb      	adds	r3, r7, r3
   138f2:	781b      	ldrb	r3, [r3, #0]
   138f4:	b25b      	sxtb	r3, r3
   138f6:	2b00      	cmp	r3, #0
   138f8:	d11d      	bne.n	13936 <bme680_get_sensor_data+0x62>
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
   138fa:	230f      	movs	r3, #15
   138fc:	18fc      	adds	r4, r7, r3
   138fe:	683a      	ldr	r2, [r7, #0]
   13900:	687b      	ldr	r3, [r7, #4]
   13902:	0011      	movs	r1, r2
   13904:	0018      	movs	r0, r3
   13906:	4b11      	ldr	r3, [pc, #68]	; (1394c <bme680_get_sensor_data+0x78>)
   13908:	4798      	blx	r3
   1390a:	0003      	movs	r3, r0
   1390c:	7023      	strb	r3, [r4, #0]
		if (rslt == BME680_OK) {
   1390e:	230f      	movs	r3, #15
   13910:	18fb      	adds	r3, r7, r3
   13912:	781b      	ldrb	r3, [r3, #0]
   13914:	b25b      	sxtb	r3, r3
   13916:	2b00      	cmp	r3, #0
   13918:	d10d      	bne.n	13936 <bme680_get_sensor_data+0x62>
			if (data->status & BME680_NEW_DATA_MSK)
   1391a:	687b      	ldr	r3, [r7, #4]
   1391c:	781b      	ldrb	r3, [r3, #0]
   1391e:	b25b      	sxtb	r3, r3
   13920:	2b00      	cmp	r3, #0
   13922:	da04      	bge.n	1392e <bme680_get_sensor_data+0x5a>
				dev->new_fields = 1;
   13924:	683b      	ldr	r3, [r7, #0]
   13926:	2245      	movs	r2, #69	; 0x45
   13928:	2101      	movs	r1, #1
   1392a:	5499      	strb	r1, [r3, r2]
   1392c:	e003      	b.n	13936 <bme680_get_sensor_data+0x62>
			else
				dev->new_fields = 0;
   1392e:	683b      	ldr	r3, [r7, #0]
   13930:	2245      	movs	r2, #69	; 0x45
   13932:	2100      	movs	r1, #0
   13934:	5499      	strb	r1, [r3, r2]
		}
	}

	return rslt;
   13936:	230f      	movs	r3, #15
   13938:	18fb      	adds	r3, r7, r3
   1393a:	781b      	ldrb	r3, [r3, #0]
   1393c:	b25b      	sxtb	r3, r3
}
   1393e:	0018      	movs	r0, r3
   13940:	46bd      	mov	sp, r7
   13942:	b005      	add	sp, #20
   13944:	bd90      	pop	{r4, r7, pc}
   13946:	46c0      	nop			; (mov r8, r8)
   13948:	0001482f 	.word	0x0001482f
   1394c:	00014405 	.word	0x00014405

00013950 <get_calib_data>:

/*!
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
   13950:	b5b0      	push	{r4, r5, r7, lr}
   13952:	b08e      	sub	sp, #56	; 0x38
   13954:	af00      	add	r7, sp, #0
   13956:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
   13958:	230c      	movs	r3, #12
   1395a:	18fb      	adds	r3, r7, r3
   1395c:	0018      	movs	r0, r3
   1395e:	2329      	movs	r3, #41	; 0x29
   13960:	001a      	movs	r2, r3
   13962:	2100      	movs	r1, #0
   13964:	4bba      	ldr	r3, [pc, #744]	; (13c50 <get_calib_data+0x300>)
   13966:	4798      	blx	r3
	uint8_t temp_var = 0; /* Temporary variable */
   13968:	230b      	movs	r3, #11
   1396a:	18fb      	adds	r3, r7, r3
   1396c:	2200      	movs	r2, #0
   1396e:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   13970:	2337      	movs	r3, #55	; 0x37
   13972:	18fc      	adds	r4, r7, r3
   13974:	687b      	ldr	r3, [r7, #4]
   13976:	0018      	movs	r0, r3
   13978:	4bb6      	ldr	r3, [pc, #728]	; (13c54 <get_calib_data+0x304>)
   1397a:	4798      	blx	r3
   1397c:	0003      	movs	r3, r0
   1397e:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   13980:	2337      	movs	r3, #55	; 0x37
   13982:	18fb      	adds	r3, r7, r3
   13984:	781b      	ldrb	r3, [r3, #0]
   13986:	b25b      	sxtb	r3, r3
   13988:	2b00      	cmp	r3, #0
   1398a:	d000      	beq.n	1398e <get_calib_data+0x3e>
   1398c:	e157      	b.n	13c3e <get_calib_data+0x2ee>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
   1398e:	2337      	movs	r3, #55	; 0x37
   13990:	18fc      	adds	r4, r7, r3
   13992:	687b      	ldr	r3, [r7, #4]
   13994:	220c      	movs	r2, #12
   13996:	18b9      	adds	r1, r7, r2
   13998:	2219      	movs	r2, #25
   1399a:	2089      	movs	r0, #137	; 0x89
   1399c:	4dae      	ldr	r5, [pc, #696]	; (13c58 <get_calib_data+0x308>)
   1399e:	47a8      	blx	r5
   139a0:	0003      	movs	r3, r0
   139a2:	7023      	strb	r3, [r4, #0]
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
   139a4:	2337      	movs	r3, #55	; 0x37
   139a6:	18fb      	adds	r3, r7, r3
   139a8:	781b      	ldrb	r3, [r3, #0]
   139aa:	b25b      	sxtb	r3, r3
   139ac:	2b00      	cmp	r3, #0
   139ae:	d10d      	bne.n	139cc <get_calib_data+0x7c>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
   139b0:	2337      	movs	r3, #55	; 0x37
   139b2:	18fc      	adds	r4, r7, r3
   139b4:	687a      	ldr	r2, [r7, #4]
   139b6:	230c      	movs	r3, #12
   139b8:	18fb      	adds	r3, r7, r3
   139ba:	3319      	adds	r3, #25
   139bc:	0019      	movs	r1, r3
   139be:	0013      	movs	r3, r2
   139c0:	2210      	movs	r2, #16
   139c2:	20e1      	movs	r0, #225	; 0xe1
   139c4:	4da4      	ldr	r5, [pc, #656]	; (13c58 <get_calib_data+0x308>)
   139c6:	47a8      	blx	r5
   139c8:	0003      	movs	r3, r0
   139ca:	7023      	strb	r3, [r4, #0]
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
   139cc:	230c      	movs	r3, #12
   139ce:	18fb      	adds	r3, r7, r3
   139d0:	2222      	movs	r2, #34	; 0x22
   139d2:	5c9b      	ldrb	r3, [r3, r2]
   139d4:	021b      	lsls	r3, r3, #8
   139d6:	b21a      	sxth	r2, r3
   139d8:	230c      	movs	r3, #12
   139da:	18fb      	adds	r3, r7, r3
   139dc:	2121      	movs	r1, #33	; 0x21
   139de:	5c5b      	ldrb	r3, [r3, r1]
   139e0:	b21b      	sxth	r3, r3
   139e2:	4313      	orrs	r3, r2
   139e4:	b21b      	sxth	r3, r3
   139e6:	b29a      	uxth	r2, r3
   139e8:	687b      	ldr	r3, [r7, #4]
   139ea:	82da      	strh	r2, [r3, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
   139ec:	230c      	movs	r3, #12
   139ee:	18fb      	adds	r3, r7, r3
   139f0:	789b      	ldrb	r3, [r3, #2]
   139f2:	021b      	lsls	r3, r3, #8
   139f4:	b21a      	sxth	r2, r3
   139f6:	230c      	movs	r3, #12
   139f8:	18fb      	adds	r3, r7, r3
   139fa:	785b      	ldrb	r3, [r3, #1]
   139fc:	b21b      	sxth	r3, r3
   139fe:	4313      	orrs	r3, r2
   13a00:	b21a      	sxth	r2, r3
   13a02:	687b      	ldr	r3, [r7, #4]
   13a04:	831a      	strh	r2, [r3, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
   13a06:	230c      	movs	r3, #12
   13a08:	18fb      	adds	r3, r7, r3
   13a0a:	78db      	ldrb	r3, [r3, #3]
   13a0c:	b25a      	sxtb	r2, r3
   13a0e:	687b      	ldr	r3, [r7, #4]
   13a10:	769a      	strb	r2, [r3, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
   13a12:	230c      	movs	r3, #12
   13a14:	18fb      	adds	r3, r7, r3
   13a16:	799b      	ldrb	r3, [r3, #6]
   13a18:	021b      	lsls	r3, r3, #8
   13a1a:	b21a      	sxth	r2, r3
   13a1c:	230c      	movs	r3, #12
   13a1e:	18fb      	adds	r3, r7, r3
   13a20:	795b      	ldrb	r3, [r3, #5]
   13a22:	b21b      	sxth	r3, r3
   13a24:	4313      	orrs	r3, r2
   13a26:	b21b      	sxth	r3, r3
   13a28:	b29a      	uxth	r2, r3
   13a2a:	687b      	ldr	r3, [r7, #4]
   13a2c:	839a      	strh	r2, [r3, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
   13a2e:	230c      	movs	r3, #12
   13a30:	18fb      	adds	r3, r7, r3
   13a32:	7a1b      	ldrb	r3, [r3, #8]
   13a34:	021b      	lsls	r3, r3, #8
   13a36:	b21a      	sxth	r2, r3
   13a38:	230c      	movs	r3, #12
   13a3a:	18fb      	adds	r3, r7, r3
   13a3c:	79db      	ldrb	r3, [r3, #7]
   13a3e:	b21b      	sxth	r3, r3
   13a40:	4313      	orrs	r3, r2
   13a42:	b21a      	sxth	r2, r3
   13a44:	687b      	ldr	r3, [r7, #4]
   13a46:	83da      	strh	r2, [r3, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
   13a48:	230c      	movs	r3, #12
   13a4a:	18fb      	adds	r3, r7, r3
   13a4c:	7a5b      	ldrb	r3, [r3, #9]
   13a4e:	b259      	sxtb	r1, r3
   13a50:	687b      	ldr	r3, [r7, #4]
   13a52:	2220      	movs	r2, #32
   13a54:	5499      	strb	r1, [r3, r2]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
   13a56:	230c      	movs	r3, #12
   13a58:	18fb      	adds	r3, r7, r3
   13a5a:	7b1b      	ldrb	r3, [r3, #12]
   13a5c:	021b      	lsls	r3, r3, #8
   13a5e:	b21a      	sxth	r2, r3
   13a60:	230c      	movs	r3, #12
   13a62:	18fb      	adds	r3, r7, r3
   13a64:	7adb      	ldrb	r3, [r3, #11]
   13a66:	b21b      	sxth	r3, r3
   13a68:	4313      	orrs	r3, r2
   13a6a:	b21a      	sxth	r2, r3
   13a6c:	687b      	ldr	r3, [r7, #4]
   13a6e:	845a      	strh	r2, [r3, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
   13a70:	230c      	movs	r3, #12
   13a72:	18fb      	adds	r3, r7, r3
   13a74:	7b9b      	ldrb	r3, [r3, #14]
   13a76:	021b      	lsls	r3, r3, #8
   13a78:	b21a      	sxth	r2, r3
   13a7a:	230c      	movs	r3, #12
   13a7c:	18fb      	adds	r3, r7, r3
   13a7e:	7b5b      	ldrb	r3, [r3, #13]
   13a80:	b21b      	sxth	r3, r3
   13a82:	4313      	orrs	r3, r2
   13a84:	b21a      	sxth	r2, r3
   13a86:	687b      	ldr	r3, [r7, #4]
   13a88:	849a      	strh	r2, [r3, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
   13a8a:	230c      	movs	r3, #12
   13a8c:	18fb      	adds	r3, r7, r3
   13a8e:	7c1b      	ldrb	r3, [r3, #16]
   13a90:	b259      	sxtb	r1, r3
   13a92:	687b      	ldr	r3, [r7, #4]
   13a94:	2226      	movs	r2, #38	; 0x26
   13a96:	5499      	strb	r1, [r3, r2]
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
   13a98:	230c      	movs	r3, #12
   13a9a:	18fb      	adds	r3, r7, r3
   13a9c:	7bdb      	ldrb	r3, [r3, #15]
   13a9e:	b259      	sxtb	r1, r3
   13aa0:	687b      	ldr	r3, [r7, #4]
   13aa2:	2227      	movs	r2, #39	; 0x27
   13aa4:	5499      	strb	r1, [r3, r2]
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
   13aa6:	230c      	movs	r3, #12
   13aa8:	18fb      	adds	r3, r7, r3
   13aaa:	7d1b      	ldrb	r3, [r3, #20]
   13aac:	021b      	lsls	r3, r3, #8
   13aae:	b21a      	sxth	r2, r3
   13ab0:	230c      	movs	r3, #12
   13ab2:	18fb      	adds	r3, r7, r3
   13ab4:	7cdb      	ldrb	r3, [r3, #19]
   13ab6:	b21b      	sxth	r3, r3
   13ab8:	4313      	orrs	r3, r2
   13aba:	b21a      	sxth	r2, r3
   13abc:	687b      	ldr	r3, [r7, #4]
   13abe:	851a      	strh	r2, [r3, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
   13ac0:	230c      	movs	r3, #12
   13ac2:	18fb      	adds	r3, r7, r3
   13ac4:	7d9b      	ldrb	r3, [r3, #22]
   13ac6:	021b      	lsls	r3, r3, #8
   13ac8:	b21a      	sxth	r2, r3
   13aca:	230c      	movs	r3, #12
   13acc:	18fb      	adds	r3, r7, r3
   13ace:	7d5b      	ldrb	r3, [r3, #21]
   13ad0:	b21b      	sxth	r3, r3
   13ad2:	4313      	orrs	r3, r2
   13ad4:	b21a      	sxth	r2, r3
   13ad6:	687b      	ldr	r3, [r7, #4]
   13ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
   13ada:	230c      	movs	r3, #12
   13adc:	18fb      	adds	r3, r7, r3
   13ade:	7dd9      	ldrb	r1, [r3, #23]
   13ae0:	687b      	ldr	r3, [r7, #4]
   13ae2:	222c      	movs	r2, #44	; 0x2c
   13ae4:	5499      	strb	r1, [r3, r2]

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   13ae6:	230c      	movs	r3, #12
   13ae8:	18fb      	adds	r3, r7, r3
   13aea:	7edb      	ldrb	r3, [r3, #27]
   13aec:	011b      	lsls	r3, r3, #4
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
   13aee:	b21a      	sxth	r2, r3
   13af0:	230c      	movs	r3, #12
   13af2:	18fb      	adds	r3, r7, r3
   13af4:	7e9b      	ldrb	r3, [r3, #26]
   13af6:	b21b      	sxth	r3, r3
   13af8:	210f      	movs	r1, #15
   13afa:	400b      	ands	r3, r1
   13afc:	b21b      	sxth	r3, r3
   13afe:	4313      	orrs	r3, r2
   13b00:	b21b      	sxth	r3, r3
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   13b02:	b29a      	uxth	r2, r3
   13b04:	687b      	ldr	r3, [r7, #4]
   13b06:	811a      	strh	r2, [r3, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   13b08:	230c      	movs	r3, #12
   13b0a:	18fb      	adds	r3, r7, r3
   13b0c:	7e5b      	ldrb	r3, [r3, #25]
   13b0e:	011b      	lsls	r3, r3, #4
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
   13b10:	b21a      	sxth	r2, r3
   13b12:	230c      	movs	r3, #12
   13b14:	18fb      	adds	r3, r7, r3
   13b16:	7e9b      	ldrb	r3, [r3, #26]
   13b18:	091b      	lsrs	r3, r3, #4
   13b1a:	b2db      	uxtb	r3, r3
   13b1c:	b21b      	sxth	r3, r3
   13b1e:	4313      	orrs	r3, r2
   13b20:	b21b      	sxth	r3, r3
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   13b22:	b29a      	uxth	r2, r3
   13b24:	687b      	ldr	r3, [r7, #4]
   13b26:	815a      	strh	r2, [r3, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
   13b28:	230c      	movs	r3, #12
   13b2a:	18fb      	adds	r3, r7, r3
   13b2c:	7f1b      	ldrb	r3, [r3, #28]
   13b2e:	b25a      	sxtb	r2, r3
   13b30:	687b      	ldr	r3, [r7, #4]
   13b32:	731a      	strb	r2, [r3, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
   13b34:	230c      	movs	r3, #12
   13b36:	18fb      	adds	r3, r7, r3
   13b38:	7f5b      	ldrb	r3, [r3, #29]
   13b3a:	b25a      	sxtb	r2, r3
   13b3c:	687b      	ldr	r3, [r7, #4]
   13b3e:	735a      	strb	r2, [r3, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
   13b40:	230c      	movs	r3, #12
   13b42:	18fb      	adds	r3, r7, r3
   13b44:	7f9b      	ldrb	r3, [r3, #30]
   13b46:	b25a      	sxtb	r2, r3
   13b48:	687b      	ldr	r3, [r7, #4]
   13b4a:	739a      	strb	r2, [r3, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
   13b4c:	230c      	movs	r3, #12
   13b4e:	18fb      	adds	r3, r7, r3
   13b50:	7fda      	ldrb	r2, [r3, #31]
   13b52:	687b      	ldr	r3, [r7, #4]
   13b54:	73da      	strb	r2, [r3, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
   13b56:	230c      	movs	r3, #12
   13b58:	18fb      	adds	r3, r7, r3
   13b5a:	2220      	movs	r2, #32
   13b5c:	5c9b      	ldrb	r3, [r3, r2]
   13b5e:	b25a      	sxtb	r2, r3
   13b60:	687b      	ldr	r3, [r7, #4]
   13b62:	741a      	strb	r2, [r3, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
   13b64:	230c      	movs	r3, #12
   13b66:	18fb      	adds	r3, r7, r3
   13b68:	2225      	movs	r2, #37	; 0x25
   13b6a:	5c9b      	ldrb	r3, [r3, r2]
   13b6c:	b25a      	sxtb	r2, r3
   13b6e:	687b      	ldr	r3, [r7, #4]
   13b70:	745a      	strb	r2, [r3, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
   13b72:	230c      	movs	r3, #12
   13b74:	18fb      	adds	r3, r7, r3
   13b76:	2224      	movs	r2, #36	; 0x24
   13b78:	5c9b      	ldrb	r3, [r3, r2]
   13b7a:	021b      	lsls	r3, r3, #8
   13b7c:	b21a      	sxth	r2, r3
   13b7e:	230c      	movs	r3, #12
   13b80:	18fb      	adds	r3, r7, r3
   13b82:	2123      	movs	r1, #35	; 0x23
   13b84:	5c5b      	ldrb	r3, [r3, r1]
   13b86:	b21b      	sxth	r3, r3
   13b88:	4313      	orrs	r3, r2
   13b8a:	b21a      	sxth	r2, r3
   13b8c:	687b      	ldr	r3, [r7, #4]
   13b8e:	825a      	strh	r2, [r3, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
   13b90:	230c      	movs	r3, #12
   13b92:	18fb      	adds	r3, r7, r3
   13b94:	2226      	movs	r2, #38	; 0x26
   13b96:	5c9b      	ldrb	r3, [r3, r2]
   13b98:	b25a      	sxtb	r2, r3
   13b9a:	687b      	ldr	r3, [r7, #4]
   13b9c:	751a      	strb	r2, [r3, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
   13b9e:	2337      	movs	r3, #55	; 0x37
   13ba0:	18fb      	adds	r3, r7, r3
   13ba2:	781b      	ldrb	r3, [r3, #0]
   13ba4:	b25b      	sxtb	r3, r3
   13ba6:	2b00      	cmp	r3, #0
   13ba8:	d140      	bne.n	13c2c <get_calib_data+0x2dc>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
   13baa:	2337      	movs	r3, #55	; 0x37
   13bac:	18fc      	adds	r4, r7, r3
   13bae:	687b      	ldr	r3, [r7, #4]
   13bb0:	220b      	movs	r2, #11
   13bb2:	18b9      	adds	r1, r7, r2
   13bb4:	2201      	movs	r2, #1
   13bb6:	2002      	movs	r0, #2
   13bb8:	4d27      	ldr	r5, [pc, #156]	; (13c58 <get_calib_data+0x308>)
   13bba:	47a8      	blx	r5
   13bbc:	0003      	movs	r3, r0
   13bbe:	7023      	strb	r3, [r4, #0]

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
   13bc0:	230b      	movs	r3, #11
   13bc2:	18fb      	adds	r3, r7, r3
   13bc4:	781b      	ldrb	r3, [r3, #0]
   13bc6:	001a      	movs	r2, r3
   13bc8:	2330      	movs	r3, #48	; 0x30
   13bca:	4013      	ands	r3, r2
   13bcc:	d500      	bpl.n	13bd0 <get_calib_data+0x280>
   13bce:	330f      	adds	r3, #15
   13bd0:	111b      	asrs	r3, r3, #4
   13bd2:	b2d9      	uxtb	r1, r3
   13bd4:	687b      	ldr	r3, [r7, #4]
   13bd6:	2234      	movs	r2, #52	; 0x34
   13bd8:	5499      	strb	r1, [r3, r2]
			if (rslt == BME680_OK) {
   13bda:	2337      	movs	r3, #55	; 0x37
   13bdc:	18fb      	adds	r3, r7, r3
   13bde:	781b      	ldrb	r3, [r3, #0]
   13be0:	b25b      	sxtb	r3, r3
   13be2:	2b00      	cmp	r3, #0
   13be4:	d122      	bne.n	13c2c <get_calib_data+0x2dc>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
   13be6:	2337      	movs	r3, #55	; 0x37
   13be8:	18fc      	adds	r4, r7, r3
   13bea:	687b      	ldr	r3, [r7, #4]
   13bec:	220b      	movs	r2, #11
   13bee:	18b9      	adds	r1, r7, r2
   13bf0:	2201      	movs	r2, #1
   13bf2:	2000      	movs	r0, #0
   13bf4:	4d18      	ldr	r5, [pc, #96]	; (13c58 <get_calib_data+0x308>)
   13bf6:	47a8      	blx	r5
   13bf8:	0003      	movs	r3, r0
   13bfa:	7023      	strb	r3, [r4, #0]

				dev->calib.res_heat_val = (int8_t) temp_var;
   13bfc:	230b      	movs	r3, #11
   13bfe:	18fb      	adds	r3, r7, r3
   13c00:	781b      	ldrb	r3, [r3, #0]
   13c02:	b259      	sxtb	r1, r3
   13c04:	687b      	ldr	r3, [r7, #4]
   13c06:	2235      	movs	r2, #53	; 0x35
   13c08:	5499      	strb	r1, [r3, r2]
				if (rslt == BME680_OK)
   13c0a:	2337      	movs	r3, #55	; 0x37
   13c0c:	18fb      	adds	r3, r7, r3
   13c0e:	781b      	ldrb	r3, [r3, #0]
   13c10:	b25b      	sxtb	r3, r3
   13c12:	2b00      	cmp	r3, #0
   13c14:	d10a      	bne.n	13c2c <get_calib_data+0x2dc>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
   13c16:	2337      	movs	r3, #55	; 0x37
   13c18:	18fc      	adds	r4, r7, r3
   13c1a:	687b      	ldr	r3, [r7, #4]
   13c1c:	220b      	movs	r2, #11
   13c1e:	18b9      	adds	r1, r7, r2
   13c20:	2201      	movs	r2, #1
   13c22:	2004      	movs	r0, #4
   13c24:	4d0c      	ldr	r5, [pc, #48]	; (13c58 <get_calib_data+0x308>)
   13c26:	47a8      	blx	r5
   13c28:	0003      	movs	r3, r0
   13c2a:	7023      	strb	r3, [r4, #0]
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
   13c2c:	230b      	movs	r3, #11
   13c2e:	18fb      	adds	r3, r7, r3
   13c30:	781b      	ldrb	r3, [r3, #0]
   13c32:	b25b      	sxtb	r3, r3
   13c34:	111b      	asrs	r3, r3, #4
   13c36:	b259      	sxtb	r1, r3
   13c38:	687b      	ldr	r3, [r7, #4]
   13c3a:	2236      	movs	r2, #54	; 0x36
   13c3c:	5499      	strb	r1, [r3, r2]
	}

	return rslt;
   13c3e:	2337      	movs	r3, #55	; 0x37
   13c40:	18fb      	adds	r3, r7, r3
   13c42:	781b      	ldrb	r3, [r3, #0]
   13c44:	b25b      	sxtb	r3, r3
}
   13c46:	0018      	movs	r0, r3
   13c48:	46bd      	mov	sp, r7
   13c4a:	b00e      	add	sp, #56	; 0x38
   13c4c:	bdb0      	pop	{r4, r5, r7, pc}
   13c4e:	46c0      	nop			; (mov r8, r8)
   13c50:	00036c9f 	.word	0x00036c9f
   13c54:	0001482f 	.word	0x0001482f
   13c58:	00012ee5 	.word	0x00012ee5

00013c5c <set_gas_config>:

/*!
 * @brief This internal API is used to set the gas configuration of the sensor.
 */
static int8_t set_gas_config(struct bme680_dev *dev)
{
   13c5c:	b5b0      	push	{r4, r5, r7, lr}
   13c5e:	b084      	sub	sp, #16
   13c60:	af00      	add	r7, sp, #0
   13c62:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   13c64:	230f      	movs	r3, #15
   13c66:	18fc      	adds	r4, r7, r3
   13c68:	687b      	ldr	r3, [r7, #4]
   13c6a:	0018      	movs	r0, r3
   13c6c:	4b2c      	ldr	r3, [pc, #176]	; (13d20 <set_gas_config+0xc4>)
   13c6e:	4798      	blx	r3
   13c70:	0003      	movs	r3, r0
   13c72:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   13c74:	230f      	movs	r3, #15
   13c76:	18fb      	adds	r3, r7, r3
   13c78:	781b      	ldrb	r3, [r3, #0]
   13c7a:	b25b      	sxtb	r3, r3
   13c7c:	2b00      	cmp	r3, #0
   13c7e:	d147      	bne.n	13d10 <set_gas_config+0xb4>

		uint8_t reg_addr[2] = {0};
   13c80:	230c      	movs	r3, #12
   13c82:	18fb      	adds	r3, r7, r3
   13c84:	2200      	movs	r2, #0
   13c86:	801a      	strh	r2, [r3, #0]
		uint8_t reg_data[2] = {0};
   13c88:	2308      	movs	r3, #8
   13c8a:	18fb      	adds	r3, r7, r3
   13c8c:	2200      	movs	r2, #0
   13c8e:	801a      	strh	r2, [r3, #0]

		if (dev->power_mode == BME680_FORCED_MODE) {
   13c90:	687b      	ldr	r3, [r7, #4]
   13c92:	2244      	movs	r2, #68	; 0x44
   13c94:	5c9b      	ldrb	r3, [r3, r2]
   13c96:	2b01      	cmp	r3, #1
   13c98:	d124      	bne.n	13ce4 <set_gas_config+0x88>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
   13c9a:	230c      	movs	r3, #12
   13c9c:	18fb      	adds	r3, r7, r3
   13c9e:	225a      	movs	r2, #90	; 0x5a
   13ca0:	701a      	strb	r2, [r3, #0]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
   13ca2:	687b      	ldr	r3, [r7, #4]
   13ca4:	2240      	movs	r2, #64	; 0x40
   13ca6:	5a9b      	ldrh	r3, [r3, r2]
   13ca8:	687a      	ldr	r2, [r7, #4]
   13caa:	0011      	movs	r1, r2
   13cac:	0018      	movs	r0, r3
   13cae:	4b1d      	ldr	r3, [pc, #116]	; (13d24 <set_gas_config+0xc8>)
   13cb0:	4798      	blx	r3
   13cb2:	0003      	movs	r3, r0
   13cb4:	001a      	movs	r2, r3
   13cb6:	2308      	movs	r3, #8
   13cb8:	18fb      	adds	r3, r7, r3
   13cba:	701a      	strb	r2, [r3, #0]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
   13cbc:	230c      	movs	r3, #12
   13cbe:	18fb      	adds	r3, r7, r3
   13cc0:	2264      	movs	r2, #100	; 0x64
   13cc2:	705a      	strb	r2, [r3, #1]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
   13cc4:	687b      	ldr	r3, [r7, #4]
   13cc6:	2242      	movs	r2, #66	; 0x42
   13cc8:	5a9b      	ldrh	r3, [r3, r2]
   13cca:	0018      	movs	r0, r3
   13ccc:	4b16      	ldr	r3, [pc, #88]	; (13d28 <set_gas_config+0xcc>)
   13cce:	4798      	blx	r3
   13cd0:	0003      	movs	r3, r0
   13cd2:	001a      	movs	r2, r3
   13cd4:	2308      	movs	r3, #8
   13cd6:	18fb      	adds	r3, r7, r3
   13cd8:	705a      	strb	r2, [r3, #1]
			dev->gas_sett.nb_conv = 0;
   13cda:	687b      	ldr	r3, [r7, #4]
   13cdc:	223c      	movs	r2, #60	; 0x3c
   13cde:	2100      	movs	r1, #0
   13ce0:	5499      	strb	r1, [r3, r2]
   13ce2:	e003      	b.n	13cec <set_gas_config+0x90>
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
   13ce4:	230f      	movs	r3, #15
   13ce6:	18fb      	adds	r3, r7, r3
   13ce8:	2201      	movs	r2, #1
   13cea:	701a      	strb	r2, [r3, #0]
		}
		if (rslt == BME680_OK)
   13cec:	230f      	movs	r3, #15
   13cee:	18fb      	adds	r3, r7, r3
   13cf0:	781b      	ldrb	r3, [r3, #0]
   13cf2:	b25b      	sxtb	r3, r3
   13cf4:	2b00      	cmp	r3, #0
   13cf6:	d10b      	bne.n	13d10 <set_gas_config+0xb4>
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
   13cf8:	230f      	movs	r3, #15
   13cfa:	18fc      	adds	r4, r7, r3
   13cfc:	687b      	ldr	r3, [r7, #4]
   13cfe:	2208      	movs	r2, #8
   13d00:	18b9      	adds	r1, r7, r2
   13d02:	220c      	movs	r2, #12
   13d04:	18b8      	adds	r0, r7, r2
   13d06:	2202      	movs	r2, #2
   13d08:	4d08      	ldr	r5, [pc, #32]	; (13d2c <set_gas_config+0xd0>)
   13d0a:	47a8      	blx	r5
   13d0c:	0003      	movs	r3, r0
   13d0e:	7023      	strb	r3, [r4, #0]
	}

	return rslt;
   13d10:	230f      	movs	r3, #15
   13d12:	18fb      	adds	r3, r7, r3
   13d14:	781b      	ldrb	r3, [r3, #0]
   13d16:	b25b      	sxtb	r3, r3
}
   13d18:	0018      	movs	r0, r3
   13d1a:	46bd      	mov	sp, r7
   13d1c:	b004      	add	sp, #16
   13d1e:	bdb0      	pop	{r4, r5, r7, pc}
   13d20:	0001482f 	.word	0x0001482f
   13d24:	00014285 	.word	0x00014285
   13d28:	00014391 	.word	0x00014391
   13d2c:	00012fa9 	.word	0x00012fa9

00013d30 <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
   13d30:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d32:	b091      	sub	sp, #68	; 0x44
   13d34:	af00      	add	r7, sp, #0
   13d36:	61f8      	str	r0, [r7, #28]
   13d38:	61b9      	str	r1, [r7, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
   13d3a:	69fb      	ldr	r3, [r7, #28]
   13d3c:	10da      	asrs	r2, r3, #3
   13d3e:	69bb      	ldr	r3, [r7, #24]
   13d40:	8adb      	ldrh	r3, [r3, #22]
   13d42:	005b      	lsls	r3, r3, #1
   13d44:	1ad3      	subs	r3, r2, r3
   13d46:	63bb      	str	r3, [r7, #56]	; 0x38
   13d48:	17db      	asrs	r3, r3, #31
   13d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
   13d4c:	69bb      	ldr	r3, [r7, #24]
   13d4e:	2218      	movs	r2, #24
   13d50:	5e9b      	ldrsh	r3, [r3, r2]
   13d52:	60bb      	str	r3, [r7, #8]
   13d54:	17db      	asrs	r3, r3, #31
   13d56:	60fb      	str	r3, [r7, #12]
   13d58:	4e30      	ldr	r6, [pc, #192]	; (13e1c <calc_temperature+0xec>)
   13d5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   13d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13d5e:	68b8      	ldr	r0, [r7, #8]
   13d60:	68f9      	ldr	r1, [r7, #12]
   13d62:	47b0      	blx	r6
   13d64:	0002      	movs	r2, r0
   13d66:	000b      	movs	r3, r1
   13d68:	0559      	lsls	r1, r3, #21
   13d6a:	0ad0      	lsrs	r0, r2, #11
   13d6c:	4301      	orrs	r1, r0
   13d6e:	6339      	str	r1, [r7, #48]	; 0x30
   13d70:	12db      	asrs	r3, r3, #11
   13d72:	637b      	str	r3, [r7, #52]	; 0x34
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   13d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13d76:	07db      	lsls	r3, r3, #31
   13d78:	6bba      	ldr	r2, [r7, #56]	; 0x38
   13d7a:	0854      	lsrs	r4, r2, #1
   13d7c:	431c      	orrs	r4, r3
   13d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13d80:	105d      	asrs	r5, r3, #1
   13d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13d84:	07db      	lsls	r3, r3, #31
   13d86:	6bba      	ldr	r2, [r7, #56]	; 0x38
   13d88:	0852      	lsrs	r2, r2, #1
   13d8a:	613a      	str	r2, [r7, #16]
   13d8c:	693a      	ldr	r2, [r7, #16]
   13d8e:	431a      	orrs	r2, r3
   13d90:	613a      	str	r2, [r7, #16]
   13d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13d94:	105b      	asrs	r3, r3, #1
   13d96:	617b      	str	r3, [r7, #20]
   13d98:	4e20      	ldr	r6, [pc, #128]	; (13e1c <calc_temperature+0xec>)
   13d9a:	693a      	ldr	r2, [r7, #16]
   13d9c:	697b      	ldr	r3, [r7, #20]
   13d9e:	0020      	movs	r0, r4
   13da0:	0029      	movs	r1, r5
   13da2:	47b0      	blx	r6
   13da4:	0003      	movs	r3, r0
   13da6:	000c      	movs	r4, r1
   13da8:	0522      	lsls	r2, r4, #20
   13daa:	0b19      	lsrs	r1, r3, #12
   13dac:	430a      	orrs	r2, r1
   13dae:	62ba      	str	r2, [r7, #40]	; 0x28
   13db0:	1323      	asrs	r3, r4, #12
   13db2:	62fb      	str	r3, [r7, #44]	; 0x2c
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   13db4:	69bb      	ldr	r3, [r7, #24]
   13db6:	7e9b      	ldrb	r3, [r3, #26]
   13db8:	b25b      	sxtb	r3, r3
   13dba:	011b      	lsls	r3, r3, #4
   13dbc:	603b      	str	r3, [r7, #0]
   13dbe:	17db      	asrs	r3, r3, #31
   13dc0:	607b      	str	r3, [r7, #4]
   13dc2:	4c16      	ldr	r4, [pc, #88]	; (13e1c <calc_temperature+0xec>)
   13dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   13dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13dc8:	6838      	ldr	r0, [r7, #0]
   13dca:	6879      	ldr	r1, [r7, #4]
   13dcc:	47a0      	blx	r4
   13dce:	0003      	movs	r3, r0
   13dd0:	000c      	movs	r4, r1
   13dd2:	04a2      	lsls	r2, r4, #18
   13dd4:	0b99      	lsrs	r1, r3, #14
   13dd6:	430a      	orrs	r2, r1
   13dd8:	62ba      	str	r2, [r7, #40]	; 0x28
   13dda:	13a3      	asrs	r3, r4, #14
   13ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
	dev->calib.t_fine = (int32_t) (var2 + var3);
   13dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   13de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13de2:	18d3      	adds	r3, r2, r3
   13de4:	001a      	movs	r2, r3
   13de6:	69bb      	ldr	r3, [r7, #24]
   13de8:	631a      	str	r2, [r3, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
   13dea:	69bb      	ldr	r3, [r7, #24]
   13dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   13dee:	0013      	movs	r3, r2
   13df0:	009b      	lsls	r3, r3, #2
   13df2:	189b      	adds	r3, r3, r2
   13df4:	3380      	adds	r3, #128	; 0x80
   13df6:	121a      	asrs	r2, r3, #8
   13df8:	230e      	movs	r3, #14
   13dfa:	2118      	movs	r1, #24
   13dfc:	468c      	mov	ip, r1
   13dfe:	44bc      	add	ip, r7
   13e00:	4463      	add	r3, ip
   13e02:	801a      	strh	r2, [r3, #0]

	return calc_temp;
   13e04:	230e      	movs	r3, #14
   13e06:	2218      	movs	r2, #24
   13e08:	4694      	mov	ip, r2
   13e0a:	44bc      	add	ip, r7
   13e0c:	4463      	add	r3, ip
   13e0e:	2200      	movs	r2, #0
   13e10:	5e9b      	ldrsh	r3, [r3, r2]
}
   13e12:	0018      	movs	r0, r3
   13e14:	46bd      	mov	sp, r7
   13e16:	b011      	add	sp, #68	; 0x44
   13e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13e1a:	46c0      	nop			; (mov r8, r8)
   13e1c:	00034a8d 	.word	0x00034a8d

00013e20 <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
   13e20:	b580      	push	{r7, lr}
   13e22:	b086      	sub	sp, #24
   13e24:	af00      	add	r7, sp, #0
   13e26:	6078      	str	r0, [r7, #4]
   13e28:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
   13e2a:	683b      	ldr	r3, [r7, #0]
   13e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   13e2e:	105b      	asrs	r3, r3, #1
   13e30:	4a4d      	ldr	r2, [pc, #308]	; (13f68 <calc_pressure+0x148>)
   13e32:	4694      	mov	ip, r2
   13e34:	4463      	add	r3, ip
   13e36:	613b      	str	r3, [r7, #16]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   13e38:	693b      	ldr	r3, [r7, #16]
   13e3a:	109b      	asrs	r3, r3, #2
   13e3c:	693a      	ldr	r2, [r7, #16]
   13e3e:	1092      	asrs	r2, r2, #2
   13e40:	4353      	muls	r3, r2
   13e42:	12db      	asrs	r3, r3, #11
		(int32_t)dev->calib.par_p6) >> 2;
   13e44:	683a      	ldr	r2, [r7, #0]
   13e46:	2126      	movs	r1, #38	; 0x26
   13e48:	5652      	ldrsb	r2, [r2, r1]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   13e4a:	4353      	muls	r3, r2
   13e4c:	109b      	asrs	r3, r3, #2
   13e4e:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
   13e50:	683b      	ldr	r3, [r7, #0]
   13e52:	2224      	movs	r2, #36	; 0x24
   13e54:	5e9b      	ldrsh	r3, [r3, r2]
   13e56:	001a      	movs	r2, r3
   13e58:	693b      	ldr	r3, [r7, #16]
   13e5a:	4353      	muls	r3, r2
   13e5c:	005b      	lsls	r3, r3, #1
   13e5e:	68fa      	ldr	r2, [r7, #12]
   13e60:	18d3      	adds	r3, r2, r3
   13e62:	60fb      	str	r3, [r7, #12]
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
   13e64:	68fb      	ldr	r3, [r7, #12]
   13e66:	109a      	asrs	r2, r3, #2
   13e68:	683b      	ldr	r3, [r7, #0]
   13e6a:	2122      	movs	r1, #34	; 0x22
   13e6c:	5e5b      	ldrsh	r3, [r3, r1]
   13e6e:	041b      	lsls	r3, r3, #16
   13e70:	18d3      	adds	r3, r2, r3
   13e72:	60fb      	str	r3, [r7, #12]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   13e74:	693b      	ldr	r3, [r7, #16]
   13e76:	109b      	asrs	r3, r3, #2
   13e78:	693a      	ldr	r2, [r7, #16]
   13e7a:	1092      	asrs	r2, r2, #2
   13e7c:	4353      	muls	r3, r2
   13e7e:	135b      	asrs	r3, r3, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
   13e80:	683a      	ldr	r2, [r7, #0]
   13e82:	2120      	movs	r1, #32
   13e84:	5652      	ldrsb	r2, [r2, r1]
   13e86:	0152      	lsls	r2, r2, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   13e88:	4353      	muls	r3, r2
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
   13e8a:	10da      	asrs	r2, r3, #3
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
   13e8c:	683b      	ldr	r3, [r7, #0]
   13e8e:	211e      	movs	r1, #30
   13e90:	5e5b      	ldrsh	r3, [r3, r1]
   13e92:	0019      	movs	r1, r3
   13e94:	693b      	ldr	r3, [r7, #16]
   13e96:	434b      	muls	r3, r1
   13e98:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   13e9a:	18d3      	adds	r3, r2, r3
   13e9c:	613b      	str	r3, [r7, #16]
	var1 = var1 >> 18;
   13e9e:	693b      	ldr	r3, [r7, #16]
   13ea0:	149b      	asrs	r3, r3, #18
   13ea2:	613b      	str	r3, [r7, #16]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   13ea4:	693b      	ldr	r3, [r7, #16]
   13ea6:	2280      	movs	r2, #128	; 0x80
   13ea8:	0212      	lsls	r2, r2, #8
   13eaa:	4694      	mov	ip, r2
   13eac:	4463      	add	r3, ip
   13eae:	683a      	ldr	r2, [r7, #0]
   13eb0:	8b92      	ldrh	r2, [r2, #28]
   13eb2:	4353      	muls	r3, r2
   13eb4:	13db      	asrs	r3, r3, #15
   13eb6:	613b      	str	r3, [r7, #16]
	pressure_comp = 1048576 - pres_adc;
   13eb8:	687b      	ldr	r3, [r7, #4]
   13eba:	2280      	movs	r2, #128	; 0x80
   13ebc:	0352      	lsls	r2, r2, #13
   13ebe:	1ad3      	subs	r3, r2, r3
   13ec0:	617b      	str	r3, [r7, #20]
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
   13ec2:	68fb      	ldr	r3, [r7, #12]
   13ec4:	131b      	asrs	r3, r3, #12
   13ec6:	697a      	ldr	r2, [r7, #20]
   13ec8:	1ad3      	subs	r3, r2, r3
   13eca:	001a      	movs	r2, r3
   13ecc:	4b27      	ldr	r3, [pc, #156]	; (13f6c <calc_pressure+0x14c>)
   13ece:	4353      	muls	r3, r2
   13ed0:	617b      	str	r3, [r7, #20]
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
   13ed2:	697b      	ldr	r3, [r7, #20]
   13ed4:	4a26      	ldr	r2, [pc, #152]	; (13f70 <calc_pressure+0x150>)
   13ed6:	4293      	cmp	r3, r2
   13ed8:	dd07      	ble.n	13eea <calc_pressure+0xca>
		pressure_comp = ((pressure_comp / var1) << 1);
   13eda:	4b26      	ldr	r3, [pc, #152]	; (13f74 <calc_pressure+0x154>)
   13edc:	6939      	ldr	r1, [r7, #16]
   13ede:	6978      	ldr	r0, [r7, #20]
   13ee0:	4798      	blx	r3
   13ee2:	0003      	movs	r3, r0
   13ee4:	005b      	lsls	r3, r3, #1
   13ee6:	617b      	str	r3, [r7, #20]
   13ee8:	e007      	b.n	13efa <calc_pressure+0xda>
	else
		pressure_comp = ((pressure_comp << 1) / var1);
   13eea:	697b      	ldr	r3, [r7, #20]
   13eec:	005a      	lsls	r2, r3, #1
   13eee:	4b21      	ldr	r3, [pc, #132]	; (13f74 <calc_pressure+0x154>)
   13ef0:	6939      	ldr	r1, [r7, #16]
   13ef2:	0010      	movs	r0, r2
   13ef4:	4798      	blx	r3
   13ef6:	0003      	movs	r3, r0
   13ef8:	617b      	str	r3, [r7, #20]
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   13efa:	683b      	ldr	r3, [r7, #0]
   13efc:	222a      	movs	r2, #42	; 0x2a
   13efe:	5e9b      	ldrsh	r3, [r3, r2]
   13f00:	0019      	movs	r1, r3
   13f02:	697b      	ldr	r3, [r7, #20]
   13f04:	10db      	asrs	r3, r3, #3
		(pressure_comp >> 3)) >> 13)) >> 12;
   13f06:	697a      	ldr	r2, [r7, #20]
   13f08:	10d2      	asrs	r2, r2, #3
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   13f0a:	4353      	muls	r3, r2
		(pressure_comp >> 3)) >> 13)) >> 12;
   13f0c:	135b      	asrs	r3, r3, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   13f0e:	434b      	muls	r3, r1
   13f10:	131b      	asrs	r3, r3, #12
   13f12:	613b      	str	r3, [r7, #16]
	var2 = ((int32_t)(pressure_comp >> 2) *
   13f14:	697b      	ldr	r3, [r7, #20]
   13f16:	109b      	asrs	r3, r3, #2
		(int32_t)dev->calib.par_p8) >> 13;
   13f18:	683a      	ldr	r2, [r7, #0]
   13f1a:	2128      	movs	r1, #40	; 0x28
   13f1c:	5e52      	ldrsh	r2, [r2, r1]
	var2 = ((int32_t)(pressure_comp >> 2) *
   13f1e:	4353      	muls	r3, r2
   13f20:	135b      	asrs	r3, r3, #13
   13f22:	60fb      	str	r3, [r7, #12]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
   13f24:	697b      	ldr	r3, [r7, #20]
   13f26:	121b      	asrs	r3, r3, #8
   13f28:	697a      	ldr	r2, [r7, #20]
   13f2a:	1212      	asrs	r2, r2, #8
   13f2c:	4353      	muls	r3, r2
		(int32_t)(pressure_comp >> 8) *
   13f2e:	697a      	ldr	r2, [r7, #20]
   13f30:	1212      	asrs	r2, r2, #8
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
   13f32:	4353      	muls	r3, r2
		(int32_t)dev->calib.par_p10) >> 17;
   13f34:	683a      	ldr	r2, [r7, #0]
   13f36:	212c      	movs	r1, #44	; 0x2c
   13f38:	5c52      	ldrb	r2, [r2, r1]
		(int32_t)(pressure_comp >> 8) *
   13f3a:	4353      	muls	r3, r2
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
   13f3c:	145b      	asrs	r3, r3, #17
   13f3e:	60bb      	str	r3, [r7, #8]

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   13f40:	693a      	ldr	r2, [r7, #16]
   13f42:	68fb      	ldr	r3, [r7, #12]
   13f44:	18d2      	adds	r2, r2, r3
   13f46:	68bb      	ldr	r3, [r7, #8]
   13f48:	18d2      	adds	r2, r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   13f4a:	683b      	ldr	r3, [r7, #0]
   13f4c:	2127      	movs	r1, #39	; 0x27
   13f4e:	565b      	ldrsb	r3, [r3, r1]
   13f50:	01db      	lsls	r3, r3, #7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   13f52:	18d3      	adds	r3, r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   13f54:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   13f56:	697a      	ldr	r2, [r7, #20]
   13f58:	18d3      	adds	r3, r2, r3
   13f5a:	617b      	str	r3, [r7, #20]

	return (uint32_t)pressure_comp;
   13f5c:	697b      	ldr	r3, [r7, #20]

}
   13f5e:	0018      	movs	r0, r3
   13f60:	46bd      	mov	sp, r7
   13f62:	b006      	add	sp, #24
   13f64:	bd80      	pop	{r7, pc}
   13f66:	46c0      	nop			; (mov r8, r8)
   13f68:	ffff0600 	.word	0xffff0600
   13f6c:	00000c35 	.word	0x00000c35
   13f70:	3fffffff 	.word	0x3fffffff
   13f74:	0003486d 	.word	0x0003486d

00013f78 <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
   13f78:	b5b0      	push	{r4, r5, r7, lr}
   13f7a:	b08a      	sub	sp, #40	; 0x28
   13f7c:	af00      	add	r7, sp, #0
   13f7e:	0002      	movs	r2, r0
   13f80:	6039      	str	r1, [r7, #0]
   13f82:	1dbb      	adds	r3, r7, #6
   13f84:	801a      	strh	r2, [r3, #0]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
   13f86:	683b      	ldr	r3, [r7, #0]
   13f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   13f8a:	0013      	movs	r3, r2
   13f8c:	009b      	lsls	r3, r3, #2
   13f8e:	189b      	adds	r3, r3, r2
   13f90:	3380      	adds	r3, #128	; 0x80
   13f92:	121b      	asrs	r3, r3, #8
   13f94:	623b      	str	r3, [r7, #32]
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
   13f96:	1dbb      	adds	r3, r7, #6
   13f98:	881a      	ldrh	r2, [r3, #0]
   13f9a:	683b      	ldr	r3, [r7, #0]
   13f9c:	891b      	ldrh	r3, [r3, #8]
   13f9e:	011b      	lsls	r3, r3, #4
   13fa0:	1ad4      	subs	r4, r2, r3
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
   13fa2:	683b      	ldr	r3, [r7, #0]
   13fa4:	7b1b      	ldrb	r3, [r3, #12]
   13fa6:	b25b      	sxtb	r3, r3
   13fa8:	001a      	movs	r2, r3
   13faa:	6a3b      	ldr	r3, [r7, #32]
   13fac:	435a      	muls	r2, r3
   13fae:	4b38      	ldr	r3, [pc, #224]	; (14090 <calc_humidity+0x118>)
   13fb0:	2164      	movs	r1, #100	; 0x64
   13fb2:	0010      	movs	r0, r2
   13fb4:	4798      	blx	r3
   13fb6:	0003      	movs	r3, r0
   13fb8:	105b      	asrs	r3, r3, #1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
   13fba:	1ae3      	subs	r3, r4, r3
   13fbc:	61fb      	str	r3, [r7, #28]
	var2 = ((int32_t) dev->calib.par_h2
   13fbe:	683b      	ldr	r3, [r7, #0]
   13fc0:	895b      	ldrh	r3, [r3, #10]
   13fc2:	001c      	movs	r4, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   13fc4:	683b      	ldr	r3, [r7, #0]
   13fc6:	7b5b      	ldrb	r3, [r3, #13]
   13fc8:	b25b      	sxtb	r3, r3
   13fca:	001a      	movs	r2, r3
   13fcc:	6a3b      	ldr	r3, [r7, #32]
   13fce:	435a      	muls	r2, r3
   13fd0:	4b2f      	ldr	r3, [pc, #188]	; (14090 <calc_humidity+0x118>)
   13fd2:	2164      	movs	r1, #100	; 0x64
   13fd4:	0010      	movs	r0, r2
   13fd6:	4798      	blx	r3
   13fd8:	0003      	movs	r3, r0
   13fda:	001d      	movs	r5, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   13fdc:	683b      	ldr	r3, [r7, #0]
   13fde:	7b9b      	ldrb	r3, [r3, #14]
   13fe0:	b25b      	sxtb	r3, r3
   13fe2:	001a      	movs	r2, r3
   13fe4:	6a3b      	ldr	r3, [r7, #32]
   13fe6:	435a      	muls	r2, r3
   13fe8:	4b29      	ldr	r3, [pc, #164]	; (14090 <calc_humidity+0x118>)
   13fea:	2164      	movs	r1, #100	; 0x64
   13fec:	0010      	movs	r0, r2
   13fee:	4798      	blx	r3
   13ff0:	0003      	movs	r3, r0
   13ff2:	001a      	movs	r2, r3
   13ff4:	6a3b      	ldr	r3, [r7, #32]
   13ff6:	4353      	muls	r3, r2
   13ff8:	119a      	asrs	r2, r3, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
   13ffa:	4b25      	ldr	r3, [pc, #148]	; (14090 <calc_humidity+0x118>)
   13ffc:	2164      	movs	r1, #100	; 0x64
   13ffe:	0010      	movs	r0, r2
   14000:	4798      	blx	r3
   14002:	0003      	movs	r3, r0
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   14004:	18eb      	adds	r3, r5, r3
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
   14006:	2280      	movs	r2, #128	; 0x80
   14008:	01d2      	lsls	r2, r2, #7
   1400a:	4694      	mov	ip, r2
   1400c:	4463      	add	r3, ip
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   1400e:	4363      	muls	r3, r4
	var2 = ((int32_t) dev->calib.par_h2
   14010:	129b      	asrs	r3, r3, #10
   14012:	61bb      	str	r3, [r7, #24]
	var3 = var1 * var2;
   14014:	69fb      	ldr	r3, [r7, #28]
   14016:	69ba      	ldr	r2, [r7, #24]
   14018:	4353      	muls	r3, r2
   1401a:	617b      	str	r3, [r7, #20]
	var4 = (int32_t) dev->calib.par_h6 << 7;
   1401c:	683b      	ldr	r3, [r7, #0]
   1401e:	7bdb      	ldrb	r3, [r3, #15]
   14020:	01db      	lsls	r3, r3, #7
   14022:	613b      	str	r3, [r7, #16]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
   14024:	683b      	ldr	r3, [r7, #0]
   14026:	7c1b      	ldrb	r3, [r3, #16]
   14028:	b25b      	sxtb	r3, r3
   1402a:	001a      	movs	r2, r3
   1402c:	6a3b      	ldr	r3, [r7, #32]
   1402e:	435a      	muls	r2, r3
   14030:	4b17      	ldr	r3, [pc, #92]	; (14090 <calc_humidity+0x118>)
   14032:	2164      	movs	r1, #100	; 0x64
   14034:	0010      	movs	r0, r2
   14036:	4798      	blx	r3
   14038:	0003      	movs	r3, r0
   1403a:	001a      	movs	r2, r3
   1403c:	693b      	ldr	r3, [r7, #16]
   1403e:	18d3      	adds	r3, r2, r3
   14040:	111b      	asrs	r3, r3, #4
   14042:	613b      	str	r3, [r7, #16]
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
   14044:	697b      	ldr	r3, [r7, #20]
   14046:	139b      	asrs	r3, r3, #14
   14048:	697a      	ldr	r2, [r7, #20]
   1404a:	1392      	asrs	r2, r2, #14
   1404c:	4353      	muls	r3, r2
   1404e:	129b      	asrs	r3, r3, #10
   14050:	60fb      	str	r3, [r7, #12]
	var6 = (var4 * var5) >> 1;
   14052:	693b      	ldr	r3, [r7, #16]
   14054:	68fa      	ldr	r2, [r7, #12]
   14056:	4353      	muls	r3, r2
   14058:	105b      	asrs	r3, r3, #1
   1405a:	60bb      	str	r3, [r7, #8]
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
   1405c:	697a      	ldr	r2, [r7, #20]
   1405e:	68bb      	ldr	r3, [r7, #8]
   14060:	18d3      	adds	r3, r2, r3
   14062:	129b      	asrs	r3, r3, #10
   14064:	22fa      	movs	r2, #250	; 0xfa
   14066:	0092      	lsls	r2, r2, #2
   14068:	4353      	muls	r3, r2
   1406a:	131b      	asrs	r3, r3, #12
   1406c:	627b      	str	r3, [r7, #36]	; 0x24

	if (calc_hum > 100000) /* Cap at 100%rH */
   1406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14070:	4a08      	ldr	r2, [pc, #32]	; (14094 <calc_humidity+0x11c>)
   14072:	4293      	cmp	r3, r2
   14074:	dd02      	ble.n	1407c <calc_humidity+0x104>
		calc_hum = 100000;
   14076:	4b07      	ldr	r3, [pc, #28]	; (14094 <calc_humidity+0x11c>)
   14078:	627b      	str	r3, [r7, #36]	; 0x24
   1407a:	e004      	b.n	14086 <calc_humidity+0x10e>
	else if (calc_hum < 0)
   1407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1407e:	2b00      	cmp	r3, #0
   14080:	da01      	bge.n	14086 <calc_humidity+0x10e>
		calc_hum = 0;
   14082:	2300      	movs	r3, #0
   14084:	627b      	str	r3, [r7, #36]	; 0x24

	return (uint32_t) calc_hum;
   14086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   14088:	0018      	movs	r0, r3
   1408a:	46bd      	mov	sp, r7
   1408c:	b00a      	add	sp, #40	; 0x28
   1408e:	bdb0      	pop	{r4, r5, r7, pc}
   14090:	0003486d 	.word	0x0003486d
   14094:	000186a0 	.word	0x000186a0

00014098 <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
   14098:	b5f0      	push	{r4, r5, r6, r7, lr}
   1409a:	b0b7      	sub	sp, #220	; 0xdc
   1409c:	af00      	add	r7, sp, #0
   1409e:	0003      	movs	r3, r0
   140a0:	633a      	str	r2, [r7, #48]	; 0x30
   140a2:	2236      	movs	r2, #54	; 0x36
   140a4:	18ba      	adds	r2, r7, r2
   140a6:	8013      	strh	r3, [r2, #0]
   140a8:	2335      	movs	r3, #53	; 0x35
   140aa:	18fa      	adds	r2, r7, r3
   140ac:	1c0b      	adds	r3, r1, #0
   140ae:	7013      	strb	r3, [r2, #0]
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
   140b0:	234c      	movs	r3, #76	; 0x4c
   140b2:	2230      	movs	r2, #48	; 0x30
   140b4:	18ba      	adds	r2, r7, r2
   140b6:	18d2      	adds	r2, r2, r3
   140b8:	4b6c      	ldr	r3, [pc, #432]	; (1426c <calc_gas_resistance+0x1d4>)
   140ba:	0010      	movs	r0, r2
   140bc:	0019      	movs	r1, r3
   140be:	2340      	movs	r3, #64	; 0x40
   140c0:	001a      	movs	r2, r3
   140c2:	4b6b      	ldr	r3, [pc, #428]	; (14270 <calc_gas_resistance+0x1d8>)
   140c4:	4798      	blx	r3
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
   140c6:	230c      	movs	r3, #12
   140c8:	2230      	movs	r2, #48	; 0x30
   140ca:	18ba      	adds	r2, r7, r2
   140cc:	18d2      	adds	r2, r2, r3
   140ce:	4b69      	ldr	r3, [pc, #420]	; (14274 <calc_gas_resistance+0x1dc>)
   140d0:	0010      	movs	r0, r2
   140d2:	0019      	movs	r1, r3
   140d4:	2340      	movs	r3, #64	; 0x40
   140d6:	001a      	movs	r2, r3
   140d8:	4b65      	ldr	r3, [pc, #404]	; (14270 <calc_gas_resistance+0x1d8>)
   140da:	4798      	blx	r3
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   140dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   140de:	2336      	movs	r3, #54	; 0x36
   140e0:	56d3      	ldrsb	r3, [r2, r3]
   140e2:	61bb      	str	r3, [r7, #24]
   140e4:	17db      	asrs	r3, r3, #31
   140e6:	61fb      	str	r3, [r7, #28]
   140e8:	69b8      	ldr	r0, [r7, #24]
   140ea:	69f9      	ldr	r1, [r7, #28]
   140ec:	0003      	movs	r3, r0
   140ee:	000c      	movs	r4, r1
   140f0:	0f9a      	lsrs	r2, r3, #30
   140f2:	00a6      	lsls	r6, r4, #2
   140f4:	4316      	orrs	r6, r2
   140f6:	009d      	lsls	r5, r3, #2
   140f8:	0003      	movs	r3, r0
   140fa:	000c      	movs	r4, r1
   140fc:	195b      	adds	r3, r3, r5
   140fe:	4174      	adcs	r4, r6
   14100:	495d      	ldr	r1, [pc, #372]	; (14278 <calc_gas_resistance+0x1e0>)
   14102:	2200      	movs	r2, #0
   14104:	185b      	adds	r3, r3, r1
   14106:	4154      	adcs	r4, r2
   14108:	0018      	movs	r0, r3
   1410a:	0021      	movs	r1, r4
		((int64_t) lookupTable1[gas_range])) >> 16;
   1410c:	2335      	movs	r3, #53	; 0x35
   1410e:	18fb      	adds	r3, r7, r3
   14110:	781b      	ldrb	r3, [r3, #0]
   14112:	224c      	movs	r2, #76	; 0x4c
   14114:	2430      	movs	r4, #48	; 0x30
   14116:	46a4      	mov	ip, r4
   14118:	44bc      	add	ip, r7
   1411a:	4462      	add	r2, ip
   1411c:	009b      	lsls	r3, r3, #2
   1411e:	589b      	ldr	r3, [r3, r2]
   14120:	613b      	str	r3, [r7, #16]
   14122:	2300      	movs	r3, #0
   14124:	617b      	str	r3, [r7, #20]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   14126:	4c55      	ldr	r4, [pc, #340]	; (1427c <calc_gas_resistance+0x1e4>)
   14128:	693a      	ldr	r2, [r7, #16]
   1412a:	697b      	ldr	r3, [r7, #20]
   1412c:	47a0      	blx	r4
   1412e:	0003      	movs	r3, r0
   14130:	000c      	movs	r4, r1
   14132:	0422      	lsls	r2, r4, #16
   14134:	0c19      	lsrs	r1, r3, #16
   14136:	430a      	orrs	r2, r1
   14138:	21a0      	movs	r1, #160	; 0xa0
   1413a:	2030      	movs	r0, #48	; 0x30
   1413c:	4684      	mov	ip, r0
   1413e:	44bc      	add	ip, r7
   14140:	4461      	add	r1, ip
   14142:	600a      	str	r2, [r1, #0]
   14144:	1423      	asrs	r3, r4, #16
   14146:	22a4      	movs	r2, #164	; 0xa4
   14148:	2130      	movs	r1, #48	; 0x30
   1414a:	468c      	mov	ip, r1
   1414c:	44bc      	add	ip, r7
   1414e:	4462      	add	r2, ip
   14150:	6013      	str	r3, [r2, #0]
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   14152:	2336      	movs	r3, #54	; 0x36
   14154:	18fb      	adds	r3, r7, r3
   14156:	881b      	ldrh	r3, [r3, #0]
   14158:	b29b      	uxth	r3, r3
   1415a:	60bb      	str	r3, [r7, #8]
   1415c:	2300      	movs	r3, #0
   1415e:	60fb      	str	r3, [r7, #12]
   14160:	68b9      	ldr	r1, [r7, #8]
   14162:	68fa      	ldr	r2, [r7, #12]
   14164:	000b      	movs	r3, r1
   14166:	0c5b      	lsrs	r3, r3, #17
   14168:	0010      	movs	r0, r2
   1416a:	03c0      	lsls	r0, r0, #15
   1416c:	62f8      	str	r0, [r7, #44]	; 0x2c
   1416e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   14170:	4318      	orrs	r0, r3
   14172:	62f8      	str	r0, [r7, #44]	; 0x2c
   14174:	000b      	movs	r3, r1
   14176:	03db      	lsls	r3, r3, #15
   14178:	62bb      	str	r3, [r7, #40]	; 0x28
   1417a:	23ff      	movs	r3, #255	; 0xff
   1417c:	061b      	lsls	r3, r3, #24
   1417e:	2401      	movs	r4, #1
   14180:	4264      	negs	r4, r4
   14182:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   14184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   14186:	18c9      	adds	r1, r1, r3
   14188:	4162      	adcs	r2, r4
   1418a:	23a0      	movs	r3, #160	; 0xa0
   1418c:	2030      	movs	r0, #48	; 0x30
   1418e:	4684      	mov	ip, r0
   14190:	44bc      	add	ip, r7
   14192:	4463      	add	r3, ip
   14194:	685c      	ldr	r4, [r3, #4]
   14196:	681b      	ldr	r3, [r3, #0]
   14198:	185b      	adds	r3, r3, r1
   1419a:	4154      	adcs	r4, r2
   1419c:	2298      	movs	r2, #152	; 0x98
   1419e:	2130      	movs	r1, #48	; 0x30
   141a0:	468c      	mov	ip, r1
   141a2:	44bc      	add	ip, r7
   141a4:	4462      	add	r2, ip
   141a6:	6013      	str	r3, [r2, #0]
   141a8:	6054      	str	r4, [r2, #4]
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
   141aa:	2335      	movs	r3, #53	; 0x35
   141ac:	18fb      	adds	r3, r7, r3
   141ae:	781a      	ldrb	r2, [r3, #0]
   141b0:	230c      	movs	r3, #12
   141b2:	2130      	movs	r1, #48	; 0x30
   141b4:	468c      	mov	ip, r1
   141b6:	44bc      	add	ip, r7
   141b8:	4463      	add	r3, ip
   141ba:	0092      	lsls	r2, r2, #2
   141bc:	58d3      	ldr	r3, [r2, r3]
   141be:	603b      	str	r3, [r7, #0]
   141c0:	2300      	movs	r3, #0
   141c2:	607b      	str	r3, [r7, #4]
   141c4:	4c2d      	ldr	r4, [pc, #180]	; (1427c <calc_gas_resistance+0x1e4>)
   141c6:	23a0      	movs	r3, #160	; 0xa0
   141c8:	2230      	movs	r2, #48	; 0x30
   141ca:	4694      	mov	ip, r2
   141cc:	44bc      	add	ip, r7
   141ce:	4463      	add	r3, ip
   141d0:	681a      	ldr	r2, [r3, #0]
   141d2:	685b      	ldr	r3, [r3, #4]
   141d4:	6838      	ldr	r0, [r7, #0]
   141d6:	6879      	ldr	r1, [r7, #4]
   141d8:	47a0      	blx	r4
   141da:	0003      	movs	r3, r0
   141dc:	000c      	movs	r4, r1
   141de:	05e2      	lsls	r2, r4, #23
   141e0:	0a59      	lsrs	r1, r3, #9
   141e2:	430a      	orrs	r2, r1
   141e4:	2190      	movs	r1, #144	; 0x90
   141e6:	2030      	movs	r0, #48	; 0x30
   141e8:	4684      	mov	ip, r0
   141ea:	44bc      	add	ip, r7
   141ec:	4461      	add	r1, ip
   141ee:	600a      	str	r2, [r1, #0]
   141f0:	1263      	asrs	r3, r4, #9
   141f2:	2294      	movs	r2, #148	; 0x94
   141f4:	2130      	movs	r1, #48	; 0x30
   141f6:	468c      	mov	ip, r1
   141f8:	44bc      	add	ip, r7
   141fa:	4462      	add	r2, ip
   141fc:	6013      	str	r3, [r2, #0]
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
   141fe:	2398      	movs	r3, #152	; 0x98
   14200:	2230      	movs	r2, #48	; 0x30
   14202:	4694      	mov	ip, r2
   14204:	44bc      	add	ip, r7
   14206:	4463      	add	r3, ip
   14208:	685c      	ldr	r4, [r3, #4]
   1420a:	681b      	ldr	r3, [r3, #0]
   1420c:	07e2      	lsls	r2, r4, #31
   1420e:	0859      	lsrs	r1, r3, #1
   14210:	6239      	str	r1, [r7, #32]
   14212:	6a39      	ldr	r1, [r7, #32]
   14214:	4311      	orrs	r1, r2
   14216:	6239      	str	r1, [r7, #32]
   14218:	1063      	asrs	r3, r4, #1
   1421a:	627b      	str	r3, [r7, #36]	; 0x24
   1421c:	2390      	movs	r3, #144	; 0x90
   1421e:	2230      	movs	r2, #48	; 0x30
   14220:	4694      	mov	ip, r2
   14222:	44bc      	add	ip, r7
   14224:	4463      	add	r3, ip
   14226:	685c      	ldr	r4, [r3, #4]
   14228:	681b      	ldr	r3, [r3, #0]
   1422a:	6a38      	ldr	r0, [r7, #32]
   1422c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1422e:	18c0      	adds	r0, r0, r3
   14230:	4161      	adcs	r1, r4
   14232:	2398      	movs	r3, #152	; 0x98
   14234:	2230      	movs	r2, #48	; 0x30
   14236:	4694      	mov	ip, r2
   14238:	44bc      	add	ip, r7
   1423a:	4463      	add	r3, ip
   1423c:	685c      	ldr	r4, [r3, #4]
   1423e:	681b      	ldr	r3, [r3, #0]
   14240:	4d0f      	ldr	r5, [pc, #60]	; (14280 <calc_gas_resistance+0x1e8>)
   14242:	001a      	movs	r2, r3
   14244:	0023      	movs	r3, r4
   14246:	47a8      	blx	r5
   14248:	0003      	movs	r3, r0
   1424a:	000c      	movs	r4, r1
   1424c:	228c      	movs	r2, #140	; 0x8c
   1424e:	2130      	movs	r1, #48	; 0x30
   14250:	468c      	mov	ip, r1
   14252:	44bc      	add	ip, r7
   14254:	4462      	add	r2, ip
   14256:	6013      	str	r3, [r2, #0]

	return calc_gas_res;
   14258:	238c      	movs	r3, #140	; 0x8c
   1425a:	2230      	movs	r2, #48	; 0x30
   1425c:	4694      	mov	ip, r2
   1425e:	44bc      	add	ip, r7
   14260:	4463      	add	r3, ip
   14262:	681b      	ldr	r3, [r3, #0]
}
   14264:	0018      	movs	r0, r3
   14266:	46bd      	mov	sp, r7
   14268:	b037      	add	sp, #220	; 0xdc
   1426a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1426c:	00038084 	.word	0x00038084
   14270:	00036c69 	.word	0x00036c69
   14274:	000380c4 	.word	0x000380c4
   14278:	0000053c 	.word	0x0000053c
   1427c:	00034a8d 	.word	0x00034a8d
   14280:	00034a45 	.word	0x00034a45

00014284 <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
   14284:	b590      	push	{r4, r7, lr}
   14286:	b08b      	sub	sp, #44	; 0x2c
   14288:	af00      	add	r7, sp, #0
   1428a:	0002      	movs	r2, r0
   1428c:	6039      	str	r1, [r7, #0]
   1428e:	1dbb      	adds	r3, r7, #6
   14290:	801a      	strh	r2, [r3, #0]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
   14292:	1dbb      	adds	r3, r7, #6
   14294:	881a      	ldrh	r2, [r3, #0]
   14296:	23c8      	movs	r3, #200	; 0xc8
   14298:	005b      	lsls	r3, r3, #1
   1429a:	429a      	cmp	r2, r3
   1429c:	d903      	bls.n	142a6 <calc_heater_res+0x22>
		temp = 400;
   1429e:	1dbb      	adds	r3, r7, #6
   142a0:	22c8      	movs	r2, #200	; 0xc8
   142a2:	0052      	lsls	r2, r2, #1
   142a4:	801a      	strh	r2, [r3, #0]

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
   142a6:	683b      	ldr	r3, [r7, #0]
   142a8:	791b      	ldrb	r3, [r3, #4]
   142aa:	b25b      	sxtb	r3, r3
   142ac:	001a      	movs	r2, r3
   142ae:	683b      	ldr	r3, [r7, #0]
   142b0:	7d1b      	ldrb	r3, [r3, #20]
   142b2:	b25b      	sxtb	r3, r3
   142b4:	4353      	muls	r3, r2
   142b6:	0018      	movs	r0, r3
   142b8:	4b33      	ldr	r3, [pc, #204]	; (14388 <calc_heater_res+0x104>)
   142ba:	22fa      	movs	r2, #250	; 0xfa
   142bc:	0091      	lsls	r1, r2, #2
   142be:	4798      	blx	r3
   142c0:	0003      	movs	r3, r0
   142c2:	021b      	lsls	r3, r3, #8
   142c4:	627b      	str	r3, [r7, #36]	; 0x24
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
   142c6:	683b      	ldr	r3, [r7, #0]
   142c8:	7c5b      	ldrb	r3, [r3, #17]
   142ca:	b25b      	sxtb	r3, r3
   142cc:	22c4      	movs	r2, #196	; 0xc4
   142ce:	0092      	lsls	r2, r2, #2
   142d0:	189c      	adds	r4, r3, r2
   142d2:	683b      	ldr	r3, [r7, #0]
   142d4:	2212      	movs	r2, #18
   142d6:	5e9b      	ldrsh	r3, [r3, r2]
   142d8:	4a2c      	ldr	r2, [pc, #176]	; (1438c <calc_heater_res+0x108>)
   142da:	4694      	mov	ip, r2
   142dc:	4463      	add	r3, ip
   142de:	1dba      	adds	r2, r7, #6
   142e0:	8812      	ldrh	r2, [r2, #0]
   142e2:	435a      	muls	r2, r3
   142e4:	0013      	movs	r3, r2
   142e6:	009b      	lsls	r3, r3, #2
   142e8:	189a      	adds	r2, r3, r2
   142ea:	4b27      	ldr	r3, [pc, #156]	; (14388 <calc_heater_res+0x104>)
   142ec:	2164      	movs	r1, #100	; 0x64
   142ee:	0010      	movs	r0, r2
   142f0:	4798      	blx	r3
   142f2:	0003      	movs	r3, r0
   142f4:	22c8      	movs	r2, #200	; 0xc8
   142f6:	0392      	lsls	r2, r2, #14
   142f8:	189a      	adds	r2, r3, r2
   142fa:	4b23      	ldr	r3, [pc, #140]	; (14388 <calc_heater_res+0x104>)
   142fc:	210a      	movs	r1, #10
   142fe:	0010      	movs	r0, r2
   14300:	4798      	blx	r3
   14302:	0003      	movs	r3, r0
   14304:	4363      	muls	r3, r4
   14306:	623b      	str	r3, [r7, #32]
	var3 = var1 + (var2 / 2);
   14308:	6a3b      	ldr	r3, [r7, #32]
   1430a:	2b00      	cmp	r3, #0
   1430c:	da00      	bge.n	14310 <calc_heater_res+0x8c>
   1430e:	3301      	adds	r3, #1
   14310:	105b      	asrs	r3, r3, #1
   14312:	001a      	movs	r2, r3
   14314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14316:	18d3      	adds	r3, r2, r3
   14318:	61fb      	str	r3, [r7, #28]
	var4 = (var3 / (dev->calib.res_heat_range + 4));
   1431a:	683b      	ldr	r3, [r7, #0]
   1431c:	2234      	movs	r2, #52	; 0x34
   1431e:	5c9b      	ldrb	r3, [r3, r2]
   14320:	1d1a      	adds	r2, r3, #4
   14322:	4b19      	ldr	r3, [pc, #100]	; (14388 <calc_heater_res+0x104>)
   14324:	0011      	movs	r1, r2
   14326:	69f8      	ldr	r0, [r7, #28]
   14328:	4798      	blx	r3
   1432a:	0003      	movs	r3, r0
   1432c:	61bb      	str	r3, [r7, #24]
	var5 = (131 * dev->calib.res_heat_val) + 65536;
   1432e:	683b      	ldr	r3, [r7, #0]
   14330:	2235      	movs	r2, #53	; 0x35
   14332:	569b      	ldrsb	r3, [r3, r2]
   14334:	001a      	movs	r2, r3
   14336:	0013      	movs	r3, r2
   14338:	019b      	lsls	r3, r3, #6
   1433a:	189b      	adds	r3, r3, r2
   1433c:	005b      	lsls	r3, r3, #1
   1433e:	189b      	adds	r3, r3, r2
   14340:	2280      	movs	r2, #128	; 0x80
   14342:	0252      	lsls	r2, r2, #9
   14344:	4694      	mov	ip, r2
   14346:	4463      	add	r3, ip
   14348:	617b      	str	r3, [r7, #20]
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
   1434a:	4b0f      	ldr	r3, [pc, #60]	; (14388 <calc_heater_res+0x104>)
   1434c:	6979      	ldr	r1, [r7, #20]
   1434e:	69b8      	ldr	r0, [r7, #24]
   14350:	4798      	blx	r3
   14352:	0003      	movs	r3, r0
   14354:	3bfa      	subs	r3, #250	; 0xfa
   14356:	001a      	movs	r2, r3
   14358:	0013      	movs	r3, r2
   1435a:	011b      	lsls	r3, r3, #4
   1435c:	189b      	adds	r3, r3, r2
   1435e:	005b      	lsls	r3, r3, #1
   14360:	613b      	str	r3, [r7, #16]
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
   14362:	693b      	ldr	r3, [r7, #16]
   14364:	3332      	adds	r3, #50	; 0x32
   14366:	001a      	movs	r2, r3
   14368:	4b07      	ldr	r3, [pc, #28]	; (14388 <calc_heater_res+0x104>)
   1436a:	2164      	movs	r1, #100	; 0x64
   1436c:	0010      	movs	r0, r2
   1436e:	4798      	blx	r3
   14370:	0003      	movs	r3, r0
   14372:	001a      	movs	r2, r3
   14374:	230f      	movs	r3, #15
   14376:	18fb      	adds	r3, r7, r3
   14378:	701a      	strb	r2, [r3, #0]

	return heatr_res;
   1437a:	230f      	movs	r3, #15
   1437c:	18fb      	adds	r3, r7, r3
   1437e:	781b      	ldrb	r3, [r3, #0]
}
   14380:	0018      	movs	r0, r3
   14382:	46bd      	mov	sp, r7
   14384:	b00b      	add	sp, #44	; 0x2c
   14386:	bd90      	pop	{r4, r7, pc}
   14388:	0003486d 	.word	0x0003486d
   1438c:	00025999 	.word	0x00025999

00014390 <calc_heater_dur>:

/*!
 * @brief This internal API is used to calculate the Heat duration value.
 */
static uint8_t calc_heater_dur(uint16_t dur)
{
   14390:	b580      	push	{r7, lr}
   14392:	b084      	sub	sp, #16
   14394:	af00      	add	r7, sp, #0
   14396:	0002      	movs	r2, r0
   14398:	1dbb      	adds	r3, r7, #6
   1439a:	801a      	strh	r2, [r3, #0]
	uint8_t factor = 0;
   1439c:	230f      	movs	r3, #15
   1439e:	18fb      	adds	r3, r7, r3
   143a0:	2200      	movs	r2, #0
   143a2:	701a      	strb	r2, [r3, #0]
	uint8_t durval;

	if (dur >= 0xfc0) {
   143a4:	1dbb      	adds	r3, r7, #6
   143a6:	881b      	ldrh	r3, [r3, #0]
   143a8:	4a15      	ldr	r2, [pc, #84]	; (14400 <calc_heater_dur+0x70>)
   143aa:	4293      	cmp	r3, r2
   143ac:	d910      	bls.n	143d0 <calc_heater_dur+0x40>
		durval = 0xff; /* Max duration*/
   143ae:	230e      	movs	r3, #14
   143b0:	18fb      	adds	r3, r7, r3
   143b2:	22ff      	movs	r2, #255	; 0xff
   143b4:	701a      	strb	r2, [r3, #0]
   143b6:	e01b      	b.n	143f0 <calc_heater_dur+0x60>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
   143b8:	1dbb      	adds	r3, r7, #6
   143ba:	1dba      	adds	r2, r7, #6
   143bc:	8812      	ldrh	r2, [r2, #0]
   143be:	0892      	lsrs	r2, r2, #2
   143c0:	801a      	strh	r2, [r3, #0]
			factor += 1;
   143c2:	230f      	movs	r3, #15
   143c4:	18fb      	adds	r3, r7, r3
   143c6:	220f      	movs	r2, #15
   143c8:	18ba      	adds	r2, r7, r2
   143ca:	7812      	ldrb	r2, [r2, #0]
   143cc:	3201      	adds	r2, #1
   143ce:	701a      	strb	r2, [r3, #0]
		while (dur > 0x3F) {
   143d0:	1dbb      	adds	r3, r7, #6
   143d2:	881b      	ldrh	r3, [r3, #0]
   143d4:	2b3f      	cmp	r3, #63	; 0x3f
   143d6:	d8ef      	bhi.n	143b8 <calc_heater_dur+0x28>
		}
		durval = (uint8_t) (dur + (factor * 64));
   143d8:	1dbb      	adds	r3, r7, #6
   143da:	881b      	ldrh	r3, [r3, #0]
   143dc:	b2d9      	uxtb	r1, r3
   143de:	230f      	movs	r3, #15
   143e0:	18fb      	adds	r3, r7, r3
   143e2:	781b      	ldrb	r3, [r3, #0]
   143e4:	019b      	lsls	r3, r3, #6
   143e6:	b2da      	uxtb	r2, r3
   143e8:	230e      	movs	r3, #14
   143ea:	18fb      	adds	r3, r7, r3
   143ec:	188a      	adds	r2, r1, r2
   143ee:	701a      	strb	r2, [r3, #0]
	}

	return durval;
   143f0:	230e      	movs	r3, #14
   143f2:	18fb      	adds	r3, r7, r3
   143f4:	781b      	ldrb	r3, [r3, #0]
}
   143f6:	0018      	movs	r0, r3
   143f8:	46bd      	mov	sp, r7
   143fa:	b004      	add	sp, #16
   143fc:	bd80      	pop	{r7, pc}
   143fe:	46c0      	nop			; (mov r8, r8)
   14400:	00000fbf 	.word	0x00000fbf

00014404 <read_field_data>:

/*!
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
   14404:	b5b0      	push	{r4, r5, r7, lr}
   14406:	b08a      	sub	sp, #40	; 0x28
   14408:	af00      	add	r7, sp, #0
   1440a:	6078      	str	r0, [r7, #4]
   1440c:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
   1440e:	2308      	movs	r3, #8
   14410:	18fb      	adds	r3, r7, r3
   14412:	0018      	movs	r0, r3
   14414:	230f      	movs	r3, #15
   14416:	001a      	movs	r2, r3
   14418:	2100      	movs	r1, #0
   1441a:	4b76      	ldr	r3, [pc, #472]	; (145f4 <read_field_data+0x1f0>)
   1441c:	4798      	blx	r3
	uint8_t gas_range;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;
   1441e:	2326      	movs	r3, #38	; 0x26
   14420:	18fb      	adds	r3, r7, r3
   14422:	220a      	movs	r2, #10
   14424:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   14426:	2327      	movs	r3, #39	; 0x27
   14428:	18fc      	adds	r4, r7, r3
   1442a:	683b      	ldr	r3, [r7, #0]
   1442c:	0018      	movs	r0, r3
   1442e:	4b72      	ldr	r3, [pc, #456]	; (145f8 <read_field_data+0x1f4>)
   14430:	4798      	blx	r3
   14432:	0003      	movs	r3, r0
   14434:	7023      	strb	r3, [r4, #0]
	do {
		if (rslt == BME680_OK) {
   14436:	2327      	movs	r3, #39	; 0x27
   14438:	18fb      	adds	r3, r7, r3
   1443a:	781b      	ldrb	r3, [r3, #0]
   1443c:	b25b      	sxtb	r3, r3
   1443e:	2b00      	cmp	r3, #0
   14440:	d000      	beq.n	14444 <read_field_data+0x40>
   14442:	e0b8      	b.n	145b6 <read_field_data+0x1b2>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
   14444:	2327      	movs	r3, #39	; 0x27
   14446:	18fc      	adds	r4, r7, r3
   14448:	683b      	ldr	r3, [r7, #0]
   1444a:	2208      	movs	r2, #8
   1444c:	18b9      	adds	r1, r7, r2
   1444e:	220f      	movs	r2, #15
   14450:	201d      	movs	r0, #29
   14452:	4d6a      	ldr	r5, [pc, #424]	; (145fc <read_field_data+0x1f8>)
   14454:	47a8      	blx	r5
   14456:	0003      	movs	r3, r0
   14458:	7023      	strb	r3, [r4, #0]
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
   1445a:	2308      	movs	r3, #8
   1445c:	18fb      	adds	r3, r7, r3
   1445e:	781b      	ldrb	r3, [r3, #0]
   14460:	227f      	movs	r2, #127	; 0x7f
   14462:	4393      	bics	r3, r2
   14464:	b2da      	uxtb	r2, r3
   14466:	687b      	ldr	r3, [r7, #4]
   14468:	701a      	strb	r2, [r3, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
   1446a:	2308      	movs	r3, #8
   1446c:	18fb      	adds	r3, r7, r3
   1446e:	781b      	ldrb	r3, [r3, #0]
   14470:	220f      	movs	r2, #15
   14472:	4013      	ands	r3, r2
   14474:	b2da      	uxtb	r2, r3
   14476:	687b      	ldr	r3, [r7, #4]
   14478:	705a      	strb	r2, [r3, #1]
			data->meas_index = buff[1];
   1447a:	2308      	movs	r3, #8
   1447c:	18fb      	adds	r3, r7, r3
   1447e:	785a      	ldrb	r2, [r3, #1]
   14480:	687b      	ldr	r3, [r7, #4]
   14482:	709a      	strb	r2, [r3, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   14484:	2308      	movs	r3, #8
   14486:	18fb      	adds	r3, r7, r3
   14488:	789b      	ldrb	r3, [r3, #2]
   1448a:	031a      	lsls	r2, r3, #12
   1448c:	2308      	movs	r3, #8
   1448e:	18fb      	adds	r3, r7, r3
   14490:	78db      	ldrb	r3, [r3, #3]
   14492:	011b      	lsls	r3, r3, #4
   14494:	4313      	orrs	r3, r2
				| ((uint32_t) buff[4] / 16));
   14496:	2208      	movs	r2, #8
   14498:	18ba      	adds	r2, r7, r2
   1449a:	7912      	ldrb	r2, [r2, #4]
   1449c:	0912      	lsrs	r2, r2, #4
   1449e:	b2d2      	uxtb	r2, r2
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   144a0:	4313      	orrs	r3, r2
   144a2:	623b      	str	r3, [r7, #32]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
   144a4:	2308      	movs	r3, #8
   144a6:	18fb      	adds	r3, r7, r3
   144a8:	795b      	ldrb	r3, [r3, #5]
   144aa:	031a      	lsls	r2, r3, #12
   144ac:	2308      	movs	r3, #8
   144ae:	18fb      	adds	r3, r7, r3
   144b0:	799b      	ldrb	r3, [r3, #6]
   144b2:	011b      	lsls	r3, r3, #4
   144b4:	4313      	orrs	r3, r2
				| ((uint32_t) buff[7] / 16));
   144b6:	2208      	movs	r2, #8
   144b8:	18ba      	adds	r2, r7, r2
   144ba:	79d2      	ldrb	r2, [r2, #7]
   144bc:	0912      	lsrs	r2, r2, #4
   144be:	b2d2      	uxtb	r2, r2
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
   144c0:	4313      	orrs	r3, r2
   144c2:	61fb      	str	r3, [r7, #28]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
   144c4:	2308      	movs	r3, #8
   144c6:	18fb      	adds	r3, r7, r3
   144c8:	7a1b      	ldrb	r3, [r3, #8]
   144ca:	b29b      	uxth	r3, r3
   144cc:	021b      	lsls	r3, r3, #8
   144ce:	b299      	uxth	r1, r3
   144d0:	2308      	movs	r3, #8
   144d2:	18fb      	adds	r3, r7, r3
   144d4:	7a5b      	ldrb	r3, [r3, #9]
   144d6:	b29a      	uxth	r2, r3
   144d8:	231a      	movs	r3, #26
   144da:	18fb      	adds	r3, r7, r3
   144dc:	430a      	orrs	r2, r1
   144de:	801a      	strh	r2, [r3, #0]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   144e0:	2308      	movs	r3, #8
   144e2:	18fb      	adds	r3, r7, r3
   144e4:	7b5b      	ldrb	r3, [r3, #13]
   144e6:	b29b      	uxth	r3, r3
   144e8:	009b      	lsls	r3, r3, #2
   144ea:	b299      	uxth	r1, r3
   144ec:	2308      	movs	r3, #8
   144ee:	18fb      	adds	r3, r7, r3
   144f0:	7b9b      	ldrb	r3, [r3, #14]
   144f2:	099b      	lsrs	r3, r3, #6
   144f4:	b2db      	uxtb	r3, r3
   144f6:	b29a      	uxth	r2, r3
   144f8:	2318      	movs	r3, #24
   144fa:	18fb      	adds	r3, r7, r3
   144fc:	430a      	orrs	r2, r1
   144fe:	801a      	strh	r2, [r3, #0]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
   14500:	2308      	movs	r3, #8
   14502:	18fb      	adds	r3, r7, r3
   14504:	7b9a      	ldrb	r2, [r3, #14]
   14506:	2317      	movs	r3, #23
   14508:	18fb      	adds	r3, r7, r3
   1450a:	210f      	movs	r1, #15
   1450c:	400a      	ands	r2, r1
   1450e:	701a      	strb	r2, [r3, #0]

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
   14510:	687b      	ldr	r3, [r7, #4]
   14512:	781b      	ldrb	r3, [r3, #0]
   14514:	b25a      	sxtb	r2, r3
   14516:	2308      	movs	r3, #8
   14518:	18fb      	adds	r3, r7, r3
   1451a:	7b9b      	ldrb	r3, [r3, #14]
   1451c:	b25b      	sxtb	r3, r3
   1451e:	2120      	movs	r1, #32
   14520:	400b      	ands	r3, r1
   14522:	b25b      	sxtb	r3, r3
   14524:	4313      	orrs	r3, r2
   14526:	b25b      	sxtb	r3, r3
   14528:	b2da      	uxtb	r2, r3
   1452a:	687b      	ldr	r3, [r7, #4]
   1452c:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
   1452e:	687b      	ldr	r3, [r7, #4]
   14530:	781b      	ldrb	r3, [r3, #0]
   14532:	b25a      	sxtb	r2, r3
   14534:	2308      	movs	r3, #8
   14536:	18fb      	adds	r3, r7, r3
   14538:	7b9b      	ldrb	r3, [r3, #14]
   1453a:	b25b      	sxtb	r3, r3
   1453c:	2110      	movs	r1, #16
   1453e:	400b      	ands	r3, r1
   14540:	b25b      	sxtb	r3, r3
   14542:	4313      	orrs	r3, r2
   14544:	b25b      	sxtb	r3, r3
   14546:	b2da      	uxtb	r2, r3
   14548:	687b      	ldr	r3, [r7, #4]
   1454a:	701a      	strb	r2, [r3, #0]

			if (data->status & BME680_NEW_DATA_MSK) {
   1454c:	687b      	ldr	r3, [r7, #4]
   1454e:	781b      	ldrb	r3, [r3, #0]
   14550:	b25b      	sxtb	r3, r3
   14552:	2b00      	cmp	r3, #0
   14554:	da2b      	bge.n	145ae <read_field_data+0x1aa>
				data->temperature = calc_temperature(adc_temp, dev);
   14556:	683a      	ldr	r2, [r7, #0]
   14558:	69fb      	ldr	r3, [r7, #28]
   1455a:	0011      	movs	r1, r2
   1455c:	0018      	movs	r0, r3
   1455e:	4b28      	ldr	r3, [pc, #160]	; (14600 <read_field_data+0x1fc>)
   14560:	4798      	blx	r3
   14562:	0003      	movs	r3, r0
   14564:	001a      	movs	r2, r3
   14566:	687b      	ldr	r3, [r7, #4]
   14568:	809a      	strh	r2, [r3, #4]
				data->pressure = calc_pressure(adc_pres, dev);
   1456a:	683a      	ldr	r2, [r7, #0]
   1456c:	6a3b      	ldr	r3, [r7, #32]
   1456e:	0011      	movs	r1, r2
   14570:	0018      	movs	r0, r3
   14572:	4b24      	ldr	r3, [pc, #144]	; (14604 <read_field_data+0x200>)
   14574:	4798      	blx	r3
   14576:	0002      	movs	r2, r0
   14578:	687b      	ldr	r3, [r7, #4]
   1457a:	609a      	str	r2, [r3, #8]
				data->humidity = calc_humidity(adc_hum, dev);
   1457c:	683a      	ldr	r2, [r7, #0]
   1457e:	231a      	movs	r3, #26
   14580:	18fb      	adds	r3, r7, r3
   14582:	881b      	ldrh	r3, [r3, #0]
   14584:	0011      	movs	r1, r2
   14586:	0018      	movs	r0, r3
   14588:	4b1f      	ldr	r3, [pc, #124]	; (14608 <read_field_data+0x204>)
   1458a:	4798      	blx	r3
   1458c:	0002      	movs	r2, r0
   1458e:	687b      	ldr	r3, [r7, #4]
   14590:	60da      	str	r2, [r3, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
   14592:	683a      	ldr	r2, [r7, #0]
   14594:	2317      	movs	r3, #23
   14596:	18fb      	adds	r3, r7, r3
   14598:	7819      	ldrb	r1, [r3, #0]
   1459a:	2318      	movs	r3, #24
   1459c:	18fb      	adds	r3, r7, r3
   1459e:	881b      	ldrh	r3, [r3, #0]
   145a0:	0018      	movs	r0, r3
   145a2:	4b1a      	ldr	r3, [pc, #104]	; (1460c <read_field_data+0x208>)
   145a4:	4798      	blx	r3
   145a6:	0002      	movs	r2, r0
   145a8:	687b      	ldr	r3, [r7, #4]
   145aa:	611a      	str	r2, [r3, #16]
				break;
   145ac:	e010      	b.n	145d0 <read_field_data+0x1cc>
			}
			/* Delay to poll the data */
			dev->delay_ms_bme(BME680_POLL_PERIOD_MS);
   145ae:	683b      	ldr	r3, [r7, #0]
   145b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   145b2:	200a      	movs	r0, #10
   145b4:	4798      	blx	r3
		}
		tries--;
   145b6:	2326      	movs	r3, #38	; 0x26
   145b8:	18fb      	adds	r3, r7, r3
   145ba:	781a      	ldrb	r2, [r3, #0]
   145bc:	2326      	movs	r3, #38	; 0x26
   145be:	18fb      	adds	r3, r7, r3
   145c0:	3a01      	subs	r2, #1
   145c2:	701a      	strb	r2, [r3, #0]
	} while (tries);
   145c4:	2326      	movs	r3, #38	; 0x26
   145c6:	18fb      	adds	r3, r7, r3
   145c8:	781b      	ldrb	r3, [r3, #0]
   145ca:	2b00      	cmp	r3, #0
   145cc:	d000      	beq.n	145d0 <read_field_data+0x1cc>
   145ce:	e732      	b.n	14436 <read_field_data+0x32>

	if (!tries)
   145d0:	2326      	movs	r3, #38	; 0x26
   145d2:	18fb      	adds	r3, r7, r3
   145d4:	781b      	ldrb	r3, [r3, #0]
   145d6:	2b00      	cmp	r3, #0
   145d8:	d103      	bne.n	145e2 <read_field_data+0x1de>
		rslt = BME680_W_NO_NEW_DATA;
   145da:	2327      	movs	r3, #39	; 0x27
   145dc:	18fb      	adds	r3, r7, r3
   145de:	2202      	movs	r2, #2
   145e0:	701a      	strb	r2, [r3, #0]

	return rslt;
   145e2:	2327      	movs	r3, #39	; 0x27
   145e4:	18fb      	adds	r3, r7, r3
   145e6:	781b      	ldrb	r3, [r3, #0]
   145e8:	b25b      	sxtb	r3, r3
}
   145ea:	0018      	movs	r0, r3
   145ec:	46bd      	mov	sp, r7
   145ee:	b00a      	add	sp, #40	; 0x28
   145f0:	bdb0      	pop	{r4, r5, r7, pc}
   145f2:	46c0      	nop			; (mov r8, r8)
   145f4:	00036c9f 	.word	0x00036c9f
   145f8:	0001482f 	.word	0x0001482f
   145fc:	00012ee5 	.word	0x00012ee5
   14600:	00013d31 	.word	0x00013d31
   14604:	00013e21 	.word	0x00013e21
   14608:	00013f79 	.word	0x00013f79
   1460c:	00014099 	.word	0x00014099

00014610 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
   14610:	b590      	push	{r4, r7, lr}
   14612:	b085      	sub	sp, #20
   14614:	af00      	add	r7, sp, #0
   14616:	0002      	movs	r2, r0
   14618:	6039      	str	r1, [r7, #0]
   1461a:	1dfb      	adds	r3, r7, #7
   1461c:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
   1461e:	230f      	movs	r3, #15
   14620:	18fc      	adds	r4, r7, r3
   14622:	683b      	ldr	r3, [r7, #0]
   14624:	0018      	movs	r0, r3
   14626:	4b3c      	ldr	r3, [pc, #240]	; (14718 <set_mem_page+0x108>)
   14628:	4798      	blx	r3
   1462a:	0003      	movs	r3, r0
   1462c:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   1462e:	230f      	movs	r3, #15
   14630:	18fb      	adds	r3, r7, r3
   14632:	781b      	ldrb	r3, [r3, #0]
   14634:	b25b      	sxtb	r3, r3
   14636:	2b00      	cmp	r3, #0
   14638:	d166      	bne.n	14708 <set_mem_page+0xf8>
		if (reg_addr > 0x7f)
   1463a:	1dfb      	adds	r3, r7, #7
   1463c:	781b      	ldrb	r3, [r3, #0]
   1463e:	b25b      	sxtb	r3, r3
   14640:	2b00      	cmp	r3, #0
   14642:	da04      	bge.n	1464e <set_mem_page+0x3e>
			mem_page = BME680_MEM_PAGE1;
   14644:	230e      	movs	r3, #14
   14646:	18fb      	adds	r3, r7, r3
   14648:	2200      	movs	r2, #0
   1464a:	701a      	strb	r2, [r3, #0]
   1464c:	e003      	b.n	14656 <set_mem_page+0x46>
		else
			mem_page = BME680_MEM_PAGE0;
   1464e:	230e      	movs	r3, #14
   14650:	18fb      	adds	r3, r7, r3
   14652:	2210      	movs	r2, #16
   14654:	701a      	strb	r2, [r3, #0]

		if (mem_page != dev->mem_page) {
   14656:	683b      	ldr	r3, [r7, #0]
   14658:	78db      	ldrb	r3, [r3, #3]
   1465a:	220e      	movs	r2, #14
   1465c:	18ba      	adds	r2, r7, r2
   1465e:	7812      	ldrb	r2, [r2, #0]
   14660:	429a      	cmp	r2, r3
   14662:	d051      	beq.n	14708 <set_mem_page+0xf8>
			dev->mem_page = mem_page;
   14664:	683b      	ldr	r3, [r7, #0]
   14666:	220e      	movs	r2, #14
   14668:	18ba      	adds	r2, r7, r2
   1466a:	7812      	ldrb	r2, [r2, #0]
   1466c:	70da      	strb	r2, [r3, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   1466e:	683b      	ldr	r3, [r7, #0]
   14670:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   14672:	683b      	ldr	r3, [r7, #0]
   14674:	7858      	ldrb	r0, [r3, #1]
   14676:	230d      	movs	r3, #13
   14678:	18fa      	adds	r2, r7, r3
   1467a:	2301      	movs	r3, #1
   1467c:	21f3      	movs	r1, #243	; 0xf3
   1467e:	47a0      	blx	r4
   14680:	0003      	movs	r3, r0
   14682:	0019      	movs	r1, r3
   14684:	683b      	ldr	r3, [r7, #0]
   14686:	2254      	movs	r2, #84	; 0x54
   14688:	5499      	strb	r1, [r3, r2]
			if (dev->com_rslt != 0)
   1468a:	683b      	ldr	r3, [r7, #0]
   1468c:	2254      	movs	r2, #84	; 0x54
   1468e:	569b      	ldrsb	r3, [r3, r2]
   14690:	2b00      	cmp	r3, #0
   14692:	d003      	beq.n	1469c <set_mem_page+0x8c>
				rslt = BME680_E_COM_FAIL;
   14694:	230f      	movs	r3, #15
   14696:	18fb      	adds	r3, r7, r3
   14698:	22fe      	movs	r2, #254	; 0xfe
   1469a:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK) {
   1469c:	230f      	movs	r3, #15
   1469e:	18fb      	adds	r3, r7, r3
   146a0:	781b      	ldrb	r3, [r3, #0]
   146a2:	b25b      	sxtb	r3, r3
   146a4:	2b00      	cmp	r3, #0
   146a6:	d12f      	bne.n	14708 <set_mem_page+0xf8>
				reg = reg & (~BME680_MEM_PAGE_MSK);
   146a8:	230d      	movs	r3, #13
   146aa:	18fb      	adds	r3, r7, r3
   146ac:	781b      	ldrb	r3, [r3, #0]
   146ae:	2210      	movs	r2, #16
   146b0:	4393      	bics	r3, r2
   146b2:	b2da      	uxtb	r2, r3
   146b4:	230d      	movs	r3, #13
   146b6:	18fb      	adds	r3, r7, r3
   146b8:	701a      	strb	r2, [r3, #0]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
   146ba:	683b      	ldr	r3, [r7, #0]
   146bc:	78db      	ldrb	r3, [r3, #3]
   146be:	b25b      	sxtb	r3, r3
   146c0:	2210      	movs	r2, #16
   146c2:	4013      	ands	r3, r2
   146c4:	b25a      	sxtb	r2, r3
   146c6:	230d      	movs	r3, #13
   146c8:	18fb      	adds	r3, r7, r3
   146ca:	781b      	ldrb	r3, [r3, #0]
   146cc:	b25b      	sxtb	r3, r3
   146ce:	4313      	orrs	r3, r2
   146d0:	b25b      	sxtb	r3, r3
   146d2:	b2da      	uxtb	r2, r3
   146d4:	230d      	movs	r3, #13
   146d6:	18fb      	adds	r3, r7, r3
   146d8:	701a      	strb	r2, [r3, #0]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
   146da:	683b      	ldr	r3, [r7, #0]
   146dc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
   146de:	683b      	ldr	r3, [r7, #0]
   146e0:	7858      	ldrb	r0, [r3, #1]
   146e2:	230d      	movs	r3, #13
   146e4:	18fa      	adds	r2, r7, r3
   146e6:	2301      	movs	r3, #1
   146e8:	2173      	movs	r1, #115	; 0x73
   146ea:	47a0      	blx	r4
   146ec:	0003      	movs	r3, r0
   146ee:	0019      	movs	r1, r3
   146f0:	683b      	ldr	r3, [r7, #0]
   146f2:	2254      	movs	r2, #84	; 0x54
   146f4:	5499      	strb	r1, [r3, r2]
					&reg, 1);
				if (dev->com_rslt != 0)
   146f6:	683b      	ldr	r3, [r7, #0]
   146f8:	2254      	movs	r2, #84	; 0x54
   146fa:	569b      	ldrsb	r3, [r3, r2]
   146fc:	2b00      	cmp	r3, #0
   146fe:	d003      	beq.n	14708 <set_mem_page+0xf8>
					rslt = BME680_E_COM_FAIL;
   14700:	230f      	movs	r3, #15
   14702:	18fb      	adds	r3, r7, r3
   14704:	22fe      	movs	r2, #254	; 0xfe
   14706:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	return rslt;
   14708:	230f      	movs	r3, #15
   1470a:	18fb      	adds	r3, r7, r3
   1470c:	781b      	ldrb	r3, [r3, #0]
   1470e:	b25b      	sxtb	r3, r3
}
   14710:	0018      	movs	r0, r3
   14712:	46bd      	mov	sp, r7
   14714:	b005      	add	sp, #20
   14716:	bd90      	pop	{r4, r7, pc}
   14718:	0001482f 	.word	0x0001482f

0001471c <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
   1471c:	b590      	push	{r4, r7, lr}
   1471e:	b085      	sub	sp, #20
   14720:	af00      	add	r7, sp, #0
   14722:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   14724:	230f      	movs	r3, #15
   14726:	18fc      	adds	r4, r7, r3
   14728:	687b      	ldr	r3, [r7, #4]
   1472a:	0018      	movs	r0, r3
   1472c:	4b18      	ldr	r3, [pc, #96]	; (14790 <get_mem_page+0x74>)
   1472e:	4798      	blx	r3
   14730:	0003      	movs	r3, r0
   14732:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   14734:	230f      	movs	r3, #15
   14736:	18fb      	adds	r3, r7, r3
   14738:	781b      	ldrb	r3, [r3, #0]
   1473a:	b25b      	sxtb	r3, r3
   1473c:	2b00      	cmp	r3, #0
   1473e:	d11f      	bne.n	14780 <get_mem_page+0x64>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   14740:	687b      	ldr	r3, [r7, #4]
   14742:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   14744:	687b      	ldr	r3, [r7, #4]
   14746:	7858      	ldrb	r0, [r3, #1]
   14748:	230e      	movs	r3, #14
   1474a:	18fa      	adds	r2, r7, r3
   1474c:	2301      	movs	r3, #1
   1474e:	21f3      	movs	r1, #243	; 0xf3
   14750:	47a0      	blx	r4
   14752:	0003      	movs	r3, r0
   14754:	0019      	movs	r1, r3
   14756:	687b      	ldr	r3, [r7, #4]
   14758:	2254      	movs	r2, #84	; 0x54
   1475a:	5499      	strb	r1, [r3, r2]
		if (dev->com_rslt != 0)
   1475c:	687b      	ldr	r3, [r7, #4]
   1475e:	2254      	movs	r2, #84	; 0x54
   14760:	569b      	ldrsb	r3, [r3, r2]
   14762:	2b00      	cmp	r3, #0
   14764:	d004      	beq.n	14770 <get_mem_page+0x54>
			rslt = BME680_E_COM_FAIL;
   14766:	230f      	movs	r3, #15
   14768:	18fb      	adds	r3, r7, r3
   1476a:	22fe      	movs	r2, #254	; 0xfe
   1476c:	701a      	strb	r2, [r3, #0]
   1476e:	e007      	b.n	14780 <get_mem_page+0x64>
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
   14770:	230e      	movs	r3, #14
   14772:	18fb      	adds	r3, r7, r3
   14774:	781b      	ldrb	r3, [r3, #0]
   14776:	2210      	movs	r2, #16
   14778:	4013      	ands	r3, r2
   1477a:	b2da      	uxtb	r2, r3
   1477c:	687b      	ldr	r3, [r7, #4]
   1477e:	70da      	strb	r2, [r3, #3]
	}

	return rslt;
   14780:	230f      	movs	r3, #15
   14782:	18fb      	adds	r3, r7, r3
   14784:	781b      	ldrb	r3, [r3, #0]
   14786:	b25b      	sxtb	r3, r3
}
   14788:	0018      	movs	r0, r3
   1478a:	46bd      	mov	sp, r7
   1478c:	b005      	add	sp, #20
   1478e:	bd90      	pop	{r4, r7, pc}
   14790:	0001482f 	.word	0x0001482f

00014794 <boundary_check>:
/*!
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
   14794:	b580      	push	{r7, lr}
   14796:	b086      	sub	sp, #24
   14798:	af00      	add	r7, sp, #0
   1479a:	60f8      	str	r0, [r7, #12]
   1479c:	0008      	movs	r0, r1
   1479e:	0011      	movs	r1, r2
   147a0:	607b      	str	r3, [r7, #4]
   147a2:	230b      	movs	r3, #11
   147a4:	18fb      	adds	r3, r7, r3
   147a6:	1c02      	adds	r2, r0, #0
   147a8:	701a      	strb	r2, [r3, #0]
   147aa:	230a      	movs	r3, #10
   147ac:	18fb      	adds	r3, r7, r3
   147ae:	1c0a      	adds	r2, r1, #0
   147b0:	701a      	strb	r2, [r3, #0]
	int8_t rslt = BME680_OK;
   147b2:	2317      	movs	r3, #23
   147b4:	18fb      	adds	r3, r7, r3
   147b6:	2200      	movs	r2, #0
   147b8:	701a      	strb	r2, [r3, #0]

	if (value != NULL) {
   147ba:	68fb      	ldr	r3, [r7, #12]
   147bc:	2b00      	cmp	r3, #0
   147be:	d02a      	beq.n	14816 <boundary_check+0x82>
		/* Check if value is below minimum value */
		if (*value < min) {
   147c0:	68fb      	ldr	r3, [r7, #12]
   147c2:	781b      	ldrb	r3, [r3, #0]
   147c4:	220b      	movs	r2, #11
   147c6:	18ba      	adds	r2, r7, r2
   147c8:	7812      	ldrb	r2, [r2, #0]
   147ca:	429a      	cmp	r2, r3
   147cc:	d90d      	bls.n	147ea <boundary_check+0x56>
			/* Auto correct the invalid value to minimum value */
			*value = min;
   147ce:	68fb      	ldr	r3, [r7, #12]
   147d0:	220b      	movs	r2, #11
   147d2:	18ba      	adds	r2, r7, r2
   147d4:	7812      	ldrb	r2, [r2, #0]
   147d6:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
   147d8:	687b      	ldr	r3, [r7, #4]
   147da:	2246      	movs	r2, #70	; 0x46
   147dc:	5c9b      	ldrb	r3, [r3, r2]
   147de:	2201      	movs	r2, #1
   147e0:	4313      	orrs	r3, r2
   147e2:	b2d9      	uxtb	r1, r3
   147e4:	687b      	ldr	r3, [r7, #4]
   147e6:	2246      	movs	r2, #70	; 0x46
   147e8:	5499      	strb	r1, [r3, r2]
		}
		/* Check if value is above maximum value */
		if (*value > max) {
   147ea:	68fb      	ldr	r3, [r7, #12]
   147ec:	781b      	ldrb	r3, [r3, #0]
   147ee:	220a      	movs	r2, #10
   147f0:	18ba      	adds	r2, r7, r2
   147f2:	7812      	ldrb	r2, [r2, #0]
   147f4:	429a      	cmp	r2, r3
   147f6:	d212      	bcs.n	1481e <boundary_check+0x8a>
			/* Auto correct the invalid value to maximum value */
			*value = max;
   147f8:	68fb      	ldr	r3, [r7, #12]
   147fa:	220a      	movs	r2, #10
   147fc:	18ba      	adds	r2, r7, r2
   147fe:	7812      	ldrb	r2, [r2, #0]
   14800:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
   14802:	687b      	ldr	r3, [r7, #4]
   14804:	2246      	movs	r2, #70	; 0x46
   14806:	5c9b      	ldrb	r3, [r3, r2]
   14808:	2202      	movs	r2, #2
   1480a:	4313      	orrs	r3, r2
   1480c:	b2d9      	uxtb	r1, r3
   1480e:	687b      	ldr	r3, [r7, #4]
   14810:	2246      	movs	r2, #70	; 0x46
   14812:	5499      	strb	r1, [r3, r2]
   14814:	e003      	b.n	1481e <boundary_check+0x8a>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
   14816:	2317      	movs	r3, #23
   14818:	18fb      	adds	r3, r7, r3
   1481a:	22ff      	movs	r2, #255	; 0xff
   1481c:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
   1481e:	2317      	movs	r3, #23
   14820:	18fb      	adds	r3, r7, r3
   14822:	781b      	ldrb	r3, [r3, #0]
   14824:	b25b      	sxtb	r3, r3
}
   14826:	0018      	movs	r0, r3
   14828:	46bd      	mov	sp, r7
   1482a:	b006      	add	sp, #24
   1482c:	bd80      	pop	{r7, pc}

0001482e <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
   1482e:	b580      	push	{r7, lr}
   14830:	b084      	sub	sp, #16
   14832:	af00      	add	r7, sp, #0
   14834:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms_bme == NULL)) {
   14836:	687b      	ldr	r3, [r7, #4]
   14838:	2b00      	cmp	r3, #0
   1483a:	d00b      	beq.n	14854 <null_ptr_check+0x26>
   1483c:	687b      	ldr	r3, [r7, #4]
   1483e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   14840:	2b00      	cmp	r3, #0
   14842:	d007      	beq.n	14854 <null_ptr_check+0x26>
   14844:	687b      	ldr	r3, [r7, #4]
   14846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   14848:	2b00      	cmp	r3, #0
   1484a:	d003      	beq.n	14854 <null_ptr_check+0x26>
   1484c:	687b      	ldr	r3, [r7, #4]
   1484e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   14850:	2b00      	cmp	r3, #0
   14852:	d104      	bne.n	1485e <null_ptr_check+0x30>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
   14854:	230f      	movs	r3, #15
   14856:	18fb      	adds	r3, r7, r3
   14858:	22ff      	movs	r2, #255	; 0xff
   1485a:	701a      	strb	r2, [r3, #0]
   1485c:	e003      	b.n	14866 <null_ptr_check+0x38>
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
   1485e:	230f      	movs	r3, #15
   14860:	18fb      	adds	r3, r7, r3
   14862:	2200      	movs	r2, #0
   14864:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
   14866:	230f      	movs	r3, #15
   14868:	18fb      	adds	r3, r7, r3
   1486a:	781b      	ldrb	r3, [r3, #0]
   1486c:	b25b      	sxtb	r3, r3
}
   1486e:	0018      	movs	r0, r3
   14870:	46bd      	mov	sp, r7
   14872:	b004      	add	sp, #16
   14874:	bd80      	pop	{r7, pc}
	...

00014878 <bme_write>:
//read buffer and write buffer function
uint8_t msgOutImu[64]; ///<USE ME AS A BUFFER FOR platform_write and platform_read
I2C_Data bmeData;
int8_t bme_write(uint8_t dev_id,uint8_t reg, uint8_t *bufp,uint16_t len)
{
   14878:	b5f0      	push	{r4, r5, r6, r7, lr}
   1487a:	b087      	sub	sp, #28
   1487c:	af00      	add	r7, sp, #0
   1487e:	0006      	movs	r6, r0
   14880:	0008      	movs	r0, r1
   14882:	603a      	str	r2, [r7, #0]
   14884:	0019      	movs	r1, r3
   14886:	1dfb      	adds	r3, r7, #7
   14888:	1c32      	adds	r2, r6, #0
   1488a:	701a      	strb	r2, [r3, #0]
   1488c:	1dbb      	adds	r3, r7, #6
   1488e:	1c02      	adds	r2, r0, #0
   14890:	701a      	strb	r2, [r3, #0]
   14892:	1d3b      	adds	r3, r7, #4
   14894:	1c0a      	adds	r2, r1, #0
   14896:	801a      	strh	r2, [r3, #0]
	int8_t error = ERROR_NONE;
   14898:	230f      	movs	r3, #15
   1489a:	18fb      	adds	r3, r7, r3
   1489c:	2200      	movs	r2, #0
   1489e:	701a      	strb	r2, [r3, #0]

	msgOutImu[0] = reg;
   148a0:	4b25      	ldr	r3, [pc, #148]	; (14938 <bme_write+0xc0>)
   148a2:	1dba      	adds	r2, r7, #6
   148a4:	7812      	ldrb	r2, [r2, #0]
   148a6:	701a      	strb	r2, [r3, #0]
	for (uint64_t i = 0; i < len; i++) {
   148a8:	2200      	movs	r2, #0
   148aa:	2300      	movs	r3, #0
   148ac:	613a      	str	r2, [r7, #16]
   148ae:	617b      	str	r3, [r7, #20]
   148b0:	e015      	b.n	148de <bme_write+0x66>
		msgOutImu[i+1] = bufp[i];
   148b2:	693a      	ldr	r2, [r7, #16]
   148b4:	697b      	ldr	r3, [r7, #20]
   148b6:	2001      	movs	r0, #1
   148b8:	2100      	movs	r1, #0
   148ba:	1812      	adds	r2, r2, r0
   148bc:	414b      	adcs	r3, r1
   148be:	6939      	ldr	r1, [r7, #16]
   148c0:	6838      	ldr	r0, [r7, #0]
   148c2:	1841      	adds	r1, r0, r1
   148c4:	7808      	ldrb	r0, [r1, #0]
   148c6:	491c      	ldr	r1, [pc, #112]	; (14938 <bme_write+0xc0>)
   148c8:	188b      	adds	r3, r1, r2
   148ca:	1c02      	adds	r2, r0, #0
   148cc:	701a      	strb	r2, [r3, #0]
	for (uint64_t i = 0; i < len; i++) {
   148ce:	693a      	ldr	r2, [r7, #16]
   148d0:	697b      	ldr	r3, [r7, #20]
   148d2:	2001      	movs	r0, #1
   148d4:	2100      	movs	r1, #0
   148d6:	1812      	adds	r2, r2, r0
   148d8:	414b      	adcs	r3, r1
   148da:	613a      	str	r2, [r7, #16]
   148dc:	617b      	str	r3, [r7, #20]
   148de:	1d3b      	adds	r3, r7, #4
   148e0:	881b      	ldrh	r3, [r3, #0]
   148e2:	b29b      	uxth	r3, r3
   148e4:	001c      	movs	r4, r3
   148e6:	2300      	movs	r3, #0
   148e8:	001d      	movs	r5, r3
   148ea:	697b      	ldr	r3, [r7, #20]
   148ec:	42ab      	cmp	r3, r5
   148ee:	d3e0      	bcc.n	148b2 <bme_write+0x3a>
   148f0:	697b      	ldr	r3, [r7, #20]
   148f2:	42ab      	cmp	r3, r5
   148f4:	d102      	bne.n	148fc <bme_write+0x84>
   148f6:	693b      	ldr	r3, [r7, #16]
   148f8:	42a3      	cmp	r3, r4
   148fa:	d3da      	bcc.n	148b2 <bme_write+0x3a>
	}

	bmeData.address = 0x76;
   148fc:	4b0f      	ldr	r3, [pc, #60]	; (1493c <bme_write+0xc4>)
   148fe:	2276      	movs	r2, #118	; 0x76
   14900:	701a      	strb	r2, [r3, #0]
	bmeData.msgOut = &msgOutImu;
   14902:	4b0e      	ldr	r3, [pc, #56]	; (1493c <bme_write+0xc4>)
   14904:	4a0c      	ldr	r2, [pc, #48]	; (14938 <bme_write+0xc0>)
   14906:	605a      	str	r2, [r3, #4]
	bmeData.lenOut = len + 1;
   14908:	1d3b      	adds	r3, r7, #4
   1490a:	881b      	ldrh	r3, [r3, #0]
   1490c:	3301      	adds	r3, #1
   1490e:	b29a      	uxth	r2, r3
   14910:	4b0a      	ldr	r3, [pc, #40]	; (1493c <bme_write+0xc4>)
   14912:	81da      	strh	r2, [r3, #14]

	error = (int8_t)I2cWriteDataWait(&bmeData, 100);
   14914:	4b09      	ldr	r3, [pc, #36]	; (1493c <bme_write+0xc4>)
   14916:	2164      	movs	r1, #100	; 0x64
   14918:	0018      	movs	r0, r3
   1491a:	4b09      	ldr	r3, [pc, #36]	; (14940 <bme_write+0xc8>)
   1491c:	4798      	blx	r3
   1491e:	0002      	movs	r2, r0
   14920:	230f      	movs	r3, #15
   14922:	18fb      	adds	r3, r7, r3
   14924:	701a      	strb	r2, [r3, #0]
	return error;
   14926:	230f      	movs	r3, #15
   14928:	18fb      	adds	r3, r7, r3
   1492a:	781b      	ldrb	r3, [r3, #0]
   1492c:	b25b      	sxtb	r3, r3
}
   1492e:	0018      	movs	r0, r3
   14930:	46bd      	mov	sp, r7
   14932:	b007      	add	sp, #28
   14934:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14936:	46c0      	nop			; (mov r8, r8)
   14938:	200043b0 	.word	0x200043b0
   1493c:	200043f0 	.word	0x200043f0
   14940:	00015ab9 	.word	0x00015ab9

00014944 <bme_read>:
int8_t bme_read(uint8_t dev_id,uint8_t reg, uint8_t *bufp, uint16_t len)
{
   14944:	b590      	push	{r4, r7, lr}
   14946:	b085      	sub	sp, #20
   14948:	af00      	add	r7, sp, #0
   1494a:	0004      	movs	r4, r0
   1494c:	0008      	movs	r0, r1
   1494e:	603a      	str	r2, [r7, #0]
   14950:	0019      	movs	r1, r3
   14952:	1dfb      	adds	r3, r7, #7
   14954:	1c22      	adds	r2, r4, #0
   14956:	701a      	strb	r2, [r3, #0]
   14958:	1dbb      	adds	r3, r7, #6
   1495a:	1c02      	adds	r2, r0, #0
   1495c:	701a      	strb	r2, [r3, #0]
   1495e:	1d3b      	adds	r3, r7, #4
   14960:	1c0a      	adds	r2, r1, #0
   14962:	801a      	strh	r2, [r3, #0]
	
	int8_t error = ERROR_NONE;
   14964:	230f      	movs	r3, #15
   14966:	18fb      	adds	r3, r7, r3
   14968:	2200      	movs	r2, #0
   1496a:	701a      	strb	r2, [r3, #0]

	bmeData.address = 0x76;
   1496c:	4b12      	ldr	r3, [pc, #72]	; (149b8 <bme_read+0x74>)
   1496e:	2276      	movs	r2, #118	; 0x76
   14970:	701a      	strb	r2, [r3, #0]
	bmeData.lenIn = len;
   14972:	4b11      	ldr	r3, [pc, #68]	; (149b8 <bme_read+0x74>)
   14974:	1d3a      	adds	r2, r7, #4
   14976:	8812      	ldrh	r2, [r2, #0]
   14978:	819a      	strh	r2, [r3, #12]
	bmeData.msgIn = bufp;
   1497a:	4b0f      	ldr	r3, [pc, #60]	; (149b8 <bme_read+0x74>)
   1497c:	683a      	ldr	r2, [r7, #0]
   1497e:	609a      	str	r2, [r3, #8]
	bmeData.lenOut = 1;
   14980:	4b0d      	ldr	r3, [pc, #52]	; (149b8 <bme_read+0x74>)
   14982:	2201      	movs	r2, #1
   14984:	81da      	strh	r2, [r3, #14]
	msgOutImu[0] = reg;
   14986:	4b0d      	ldr	r3, [pc, #52]	; (149bc <bme_read+0x78>)
   14988:	1dba      	adds	r2, r7, #6
   1498a:	7812      	ldrb	r2, [r2, #0]
   1498c:	701a      	strb	r2, [r3, #0]
	bmeData.msgOut = &msgOutImu;
   1498e:	4b0a      	ldr	r3, [pc, #40]	; (149b8 <bme_read+0x74>)
   14990:	4a0a      	ldr	r2, [pc, #40]	; (149bc <bme_read+0x78>)
   14992:	605a      	str	r2, [r3, #4]

	error = (int8_t)I2cReadDataWait(&bmeData, 50, 100);
   14994:	4b08      	ldr	r3, [pc, #32]	; (149b8 <bme_read+0x74>)
   14996:	2264      	movs	r2, #100	; 0x64
   14998:	2132      	movs	r1, #50	; 0x32
   1499a:	0018      	movs	r0, r3
   1499c:	4b08      	ldr	r3, [pc, #32]	; (149c0 <bme_read+0x7c>)
   1499e:	4798      	blx	r3
   149a0:	0002      	movs	r2, r0
   149a2:	230f      	movs	r3, #15
   149a4:	18fb      	adds	r3, r7, r3
   149a6:	701a      	strb	r2, [r3, #0]
	return error;
   149a8:	230f      	movs	r3, #15
   149aa:	18fb      	adds	r3, r7, r3
   149ac:	781b      	ldrb	r3, [r3, #0]
   149ae:	b25b      	sxtb	r3, r3
}
   149b0:	0018      	movs	r0, r3
   149b2:	46bd      	mov	sp, r7
   149b4:	b005      	add	sp, #20
   149b6:	bd90      	pop	{r4, r7, pc}
   149b8:	200043f0 	.word	0x200043f0
   149bc:	200043b0 	.word	0x200043b0
   149c0:	00015b91 	.word	0x00015b91

000149c4 <user_delay_ms>:
void user_delay_ms(uint32_t period){
   149c4:	b580      	push	{r7, lr}
   149c6:	b084      	sub	sp, #16
   149c8:	af00      	add	r7, sp, #0
   149ca:	6078      	str	r0, [r7, #4]
	{
	for(int j = 0;j<period;j++)
   149cc:	2300      	movs	r3, #0
   149ce:	60fb      	str	r3, [r7, #12]
   149d0:	e00e      	b.n	149f0 <user_delay_ms+0x2c>
	for(int i = 0;i<307;i++)
   149d2:	2300      	movs	r3, #0
   149d4:	60bb      	str	r3, [r7, #8]
   149d6:	e003      	b.n	149e0 <user_delay_ms+0x1c>
	__asm("nop");
   149d8:	46c0      	nop			; (mov r8, r8)
	for(int i = 0;i<307;i++)
   149da:	68bb      	ldr	r3, [r7, #8]
   149dc:	3301      	adds	r3, #1
   149de:	60bb      	str	r3, [r7, #8]
   149e0:	68ba      	ldr	r2, [r7, #8]
   149e2:	2399      	movs	r3, #153	; 0x99
   149e4:	005b      	lsls	r3, r3, #1
   149e6:	429a      	cmp	r2, r3
   149e8:	ddf6      	ble.n	149d8 <user_delay_ms+0x14>
	for(int j = 0;j<period;j++)
   149ea:	68fb      	ldr	r3, [r7, #12]
   149ec:	3301      	adds	r3, #1
   149ee:	60fb      	str	r3, [r7, #12]
   149f0:	68fa      	ldr	r2, [r7, #12]
   149f2:	687b      	ldr	r3, [r7, #4]
   149f4:	429a      	cmp	r2, r3
   149f6:	d3ec      	bcc.n	149d2 <user_delay_ms+0xe>
	}
}
   149f8:	46c0      	nop			; (mov r8, r8)
   149fa:	46bd      	mov	sp, r7
   149fc:	b004      	add	sp, #16
   149fe:	bd80      	pop	{r7, pc}

00014a00 <init_bme680>:
float bme_temperature = 0;
float bme_humidity = 0;
float bme_pressure = 0;
int bme_gas_resistence = 0;

void init_bme680(){
   14a00:	b590      	push	{r4, r7, lr}
   14a02:	b083      	sub	sp, #12
   14a04:	af00      	add	r7, sp, #0
	int8_t ret;
	gas_sensor.dev_id = BME680_I2C_ADDR_PRIMARY;
   14a06:	4b2b      	ldr	r3, [pc, #172]	; (14ab4 <init_bme680+0xb4>)
   14a08:	2276      	movs	r2, #118	; 0x76
   14a0a:	705a      	strb	r2, [r3, #1]
	gas_sensor.intf = BME680_I2C_INTF;
   14a0c:	4b29      	ldr	r3, [pc, #164]	; (14ab4 <init_bme680+0xb4>)
   14a0e:	2201      	movs	r2, #1
   14a10:	709a      	strb	r2, [r3, #2]
	gas_sensor.write = bme_write;
   14a12:	4b28      	ldr	r3, [pc, #160]	; (14ab4 <init_bme680+0xb4>)
   14a14:	4a28      	ldr	r2, [pc, #160]	; (14ab8 <init_bme680+0xb8>)
   14a16:	64da      	str	r2, [r3, #76]	; 0x4c
	gas_sensor.read = bme_read;
   14a18:	4b26      	ldr	r3, [pc, #152]	; (14ab4 <init_bme680+0xb4>)
   14a1a:	4a28      	ldr	r2, [pc, #160]	; (14abc <init_bme680+0xbc>)
   14a1c:	649a      	str	r2, [r3, #72]	; 0x48
	gas_sensor.delay_ms_bme = user_delay_ms;
   14a1e:	4b25      	ldr	r3, [pc, #148]	; (14ab4 <init_bme680+0xb4>)
   14a20:	4a27      	ldr	r2, [pc, #156]	; (14ac0 <init_bme680+0xc0>)
   14a22:	651a      	str	r2, [r3, #80]	; 0x50
	gas_sensor.amb_temp = 25;
   14a24:	4b23      	ldr	r3, [pc, #140]	; (14ab4 <init_bme680+0xb4>)
   14a26:	2219      	movs	r2, #25
   14a28:	711a      	strb	r2, [r3, #4]
	ret = BME680_OK;
   14a2a:	1dfb      	adds	r3, r7, #7
   14a2c:	2200      	movs	r2, #0
   14a2e:	701a      	strb	r2, [r3, #0]
	ret = bme680_init(&gas_sensor);
   14a30:	1dfc      	adds	r4, r7, #7
   14a32:	4b20      	ldr	r3, [pc, #128]	; (14ab4 <init_bme680+0xb4>)
   14a34:	0018      	movs	r0, r3
   14a36:	4b23      	ldr	r3, [pc, #140]	; (14ac4 <init_bme680+0xc4>)
   14a38:	4798      	blx	r3
   14a3a:	0003      	movs	r3, r0
   14a3c:	7023      	strb	r3, [r4, #0]
	
	
	uint8_t set_required_settings;
	gas_sensor.tph_sett.os_hum = BME680_OS_2X;
   14a3e:	4b1d      	ldr	r3, [pc, #116]	; (14ab4 <init_bme680+0xb4>)
   14a40:	2238      	movs	r2, #56	; 0x38
   14a42:	2102      	movs	r1, #2
   14a44:	5499      	strb	r1, [r3, r2]
	gas_sensor.tph_sett.os_pres = BME680_OS_4X;
   14a46:	4b1b      	ldr	r3, [pc, #108]	; (14ab4 <init_bme680+0xb4>)
   14a48:	223a      	movs	r2, #58	; 0x3a
   14a4a:	2103      	movs	r1, #3
   14a4c:	5499      	strb	r1, [r3, r2]
	gas_sensor.tph_sett.os_temp = BME680_OS_8X;
   14a4e:	4b19      	ldr	r3, [pc, #100]	; (14ab4 <init_bme680+0xb4>)
   14a50:	2239      	movs	r2, #57	; 0x39
   14a52:	2104      	movs	r1, #4
   14a54:	5499      	strb	r1, [r3, r2]
	gas_sensor.tph_sett.filter = BME680_FILTER_SIZE_3;
   14a56:	4b17      	ldr	r3, [pc, #92]	; (14ab4 <init_bme680+0xb4>)
   14a58:	223b      	movs	r2, #59	; 0x3b
   14a5a:	2102      	movs	r1, #2
   14a5c:	5499      	strb	r1, [r3, r2]
	gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
   14a5e:	4b15      	ldr	r3, [pc, #84]	; (14ab4 <init_bme680+0xb4>)
   14a60:	223e      	movs	r2, #62	; 0x3e
   14a62:	2101      	movs	r1, #1
   14a64:	5499      	strb	r1, [r3, r2]
	gas_sensor.gas_sett.heatr_temp = 320;
   14a66:	4b13      	ldr	r3, [pc, #76]	; (14ab4 <init_bme680+0xb4>)
   14a68:	2240      	movs	r2, #64	; 0x40
   14a6a:	21a0      	movs	r1, #160	; 0xa0
   14a6c:	0049      	lsls	r1, r1, #1
   14a6e:	5299      	strh	r1, [r3, r2]
	gas_sensor.gas_sett.heatr_dur = 150;
   14a70:	4b10      	ldr	r3, [pc, #64]	; (14ab4 <init_bme680+0xb4>)
   14a72:	2242      	movs	r2, #66	; 0x42
   14a74:	2196      	movs	r1, #150	; 0x96
   14a76:	5299      	strh	r1, [r3, r2]
	gas_sensor.power_mode = BME680_FORCED_MODE;
   14a78:	4b0e      	ldr	r3, [pc, #56]	; (14ab4 <init_bme680+0xb4>)
   14a7a:	2244      	movs	r2, #68	; 0x44
   14a7c:	2101      	movs	r1, #1
   14a7e:	5499      	strb	r1, [r3, r2]
	set_required_settings =BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL |BME680_FILTER_SEL | BME680_GAS_SENSOR_SEL;
   14a80:	1dbb      	adds	r3, r7, #6
   14a82:	22df      	movs	r2, #223	; 0xdf
   14a84:	701a      	strb	r2, [r3, #0]
	
	ret = bme680_set_sensor_settings(set_required_settings,&gas_sensor);
   14a86:	1dbb      	adds	r3, r7, #6
   14a88:	781b      	ldrb	r3, [r3, #0]
   14a8a:	b29b      	uxth	r3, r3
   14a8c:	1dfc      	adds	r4, r7, #7
   14a8e:	4a09      	ldr	r2, [pc, #36]	; (14ab4 <init_bme680+0xb4>)
   14a90:	0011      	movs	r1, r2
   14a92:	0018      	movs	r0, r3
   14a94:	4b0c      	ldr	r3, [pc, #48]	; (14ac8 <init_bme680+0xc8>)
   14a96:	4798      	blx	r3
   14a98:	0003      	movs	r3, r0
   14a9a:	7023      	strb	r3, [r4, #0]

	ret = bme680_set_sensor_mode(&gas_sensor);
   14a9c:	1dfc      	adds	r4, r7, #7
   14a9e:	4b05      	ldr	r3, [pc, #20]	; (14ab4 <init_bme680+0xb4>)
   14aa0:	0018      	movs	r0, r3
   14aa2:	4b0a      	ldr	r3, [pc, #40]	; (14acc <init_bme680+0xcc>)
   14aa4:	4798      	blx	r3
   14aa6:	0003      	movs	r3, r0
   14aa8:	7023      	strb	r3, [r4, #0]

}
   14aaa:	46c0      	nop			; (mov r8, r8)
   14aac:	46bd      	mov	sp, r7
   14aae:	b003      	add	sp, #12
   14ab0:	bd90      	pop	{r4, r7, pc}
   14ab2:	46c0      	nop			; (mov r8, r8)
   14ab4:	20004400 	.word	0x20004400
   14ab8:	00014879 	.word	0x00014879
   14abc:	00014945 	.word	0x00014945
   14ac0:	000149c5 	.word	0x000149c5
   14ac4:	00012e41 	.word	0x00012e41
   14ac8:	000131d1 	.word	0x000131d1
   14acc:	000136e9 	.word	0x000136e9

00014ad0 <read_sensor_data>:
void read_sensor_data(){
   14ad0:	b580      	push	{r7, lr}
   14ad2:	b082      	sub	sp, #8
   14ad4:	af00      	add	r7, sp, #0
	init_bme680();
   14ad6:	4b2a      	ldr	r3, [pc, #168]	; (14b80 <read_sensor_data+0xb0>)
   14ad8:	4798      	blx	r3
	bme_temperature = 0;
   14ada:	4b2a      	ldr	r3, [pc, #168]	; (14b84 <read_sensor_data+0xb4>)
   14adc:	2200      	movs	r2, #0
   14ade:	601a      	str	r2, [r3, #0]
	bme_humidity = 0;
   14ae0:	4b29      	ldr	r3, [pc, #164]	; (14b88 <read_sensor_data+0xb8>)
   14ae2:	2200      	movs	r2, #0
   14ae4:	601a      	str	r2, [r3, #0]
	bme_pressure = 0;
   14ae6:	4b29      	ldr	r3, [pc, #164]	; (14b8c <read_sensor_data+0xbc>)
   14ae8:	2200      	movs	r2, #0
   14aea:	601a      	str	r2, [r3, #0]
	uint8_t rslt;
	uint16_t meas_period;
	bme680_get_profile_dur(&meas_period, &gas_sensor);
   14aec:	4a28      	ldr	r2, [pc, #160]	; (14b90 <read_sensor_data+0xc0>)
   14aee:	1d3b      	adds	r3, r7, #4
   14af0:	0011      	movs	r1, r2
   14af2:	0018      	movs	r0, r3
   14af4:	4b27      	ldr	r3, [pc, #156]	; (14b94 <read_sensor_data+0xc4>)
   14af6:	4798      	blx	r3
	
	user_delay_ms(meas_period); /* Delay till the measurement is ready */
   14af8:	1d3b      	adds	r3, r7, #4
   14afa:	881b      	ldrh	r3, [r3, #0]
   14afc:	0018      	movs	r0, r3
   14afe:	4b26      	ldr	r3, [pc, #152]	; (14b98 <read_sensor_data+0xc8>)
   14b00:	4798      	blx	r3

	rslt = bme680_get_sensor_data(&data, &gas_sensor);
   14b02:	4a23      	ldr	r2, [pc, #140]	; (14b90 <read_sensor_data+0xc0>)
   14b04:	4b25      	ldr	r3, [pc, #148]	; (14b9c <read_sensor_data+0xcc>)
   14b06:	0011      	movs	r1, r2
   14b08:	0018      	movs	r0, r3
   14b0a:	4b25      	ldr	r3, [pc, #148]	; (14ba0 <read_sensor_data+0xd0>)
   14b0c:	4798      	blx	r3
   14b0e:	0003      	movs	r3, r0
   14b10:	001a      	movs	r2, r3
   14b12:	1dfb      	adds	r3, r7, #7
   14b14:	701a      	strb	r2, [r3, #0]
	
	bme_temperature = data.temperature / 100.0f;
   14b16:	4b21      	ldr	r3, [pc, #132]	; (14b9c <read_sensor_data+0xcc>)
   14b18:	2204      	movs	r2, #4
   14b1a:	5e9a      	ldrsh	r2, [r3, r2]
   14b1c:	4b21      	ldr	r3, [pc, #132]	; (14ba4 <read_sensor_data+0xd4>)
   14b1e:	0010      	movs	r0, r2
   14b20:	4798      	blx	r3
   14b22:	1c02      	adds	r2, r0, #0
   14b24:	4b20      	ldr	r3, [pc, #128]	; (14ba8 <read_sensor_data+0xd8>)
   14b26:	4921      	ldr	r1, [pc, #132]	; (14bac <read_sensor_data+0xdc>)
   14b28:	1c10      	adds	r0, r2, #0
   14b2a:	4798      	blx	r3
   14b2c:	1c03      	adds	r3, r0, #0
   14b2e:	1c1a      	adds	r2, r3, #0
   14b30:	4b14      	ldr	r3, [pc, #80]	; (14b84 <read_sensor_data+0xb4>)
   14b32:	601a      	str	r2, [r3, #0]
	bme_pressure = data.pressure / 100.0f;
   14b34:	4b19      	ldr	r3, [pc, #100]	; (14b9c <read_sensor_data+0xcc>)
   14b36:	689a      	ldr	r2, [r3, #8]
   14b38:	4b1d      	ldr	r3, [pc, #116]	; (14bb0 <read_sensor_data+0xe0>)
   14b3a:	0010      	movs	r0, r2
   14b3c:	4798      	blx	r3
   14b3e:	1c02      	adds	r2, r0, #0
   14b40:	4b19      	ldr	r3, [pc, #100]	; (14ba8 <read_sensor_data+0xd8>)
   14b42:	491a      	ldr	r1, [pc, #104]	; (14bac <read_sensor_data+0xdc>)
   14b44:	1c10      	adds	r0, r2, #0
   14b46:	4798      	blx	r3
   14b48:	1c03      	adds	r3, r0, #0
   14b4a:	1c1a      	adds	r2, r3, #0
   14b4c:	4b0f      	ldr	r3, [pc, #60]	; (14b8c <read_sensor_data+0xbc>)
   14b4e:	601a      	str	r2, [r3, #0]
	bme_humidity = data.humidity / 1000.0f;
   14b50:	4b12      	ldr	r3, [pc, #72]	; (14b9c <read_sensor_data+0xcc>)
   14b52:	68da      	ldr	r2, [r3, #12]
   14b54:	4b16      	ldr	r3, [pc, #88]	; (14bb0 <read_sensor_data+0xe0>)
   14b56:	0010      	movs	r0, r2
   14b58:	4798      	blx	r3
   14b5a:	1c02      	adds	r2, r0, #0
   14b5c:	4b12      	ldr	r3, [pc, #72]	; (14ba8 <read_sensor_data+0xd8>)
   14b5e:	4915      	ldr	r1, [pc, #84]	; (14bb4 <read_sensor_data+0xe4>)
   14b60:	1c10      	adds	r0, r2, #0
   14b62:	4798      	blx	r3
   14b64:	1c03      	adds	r3, r0, #0
   14b66:	1c1a      	adds	r2, r3, #0
   14b68:	4b07      	ldr	r3, [pc, #28]	; (14b88 <read_sensor_data+0xb8>)
   14b6a:	601a      	str	r2, [r3, #0]
	bme_gas_resistence = data.gas_resistance;
   14b6c:	4b0b      	ldr	r3, [pc, #44]	; (14b9c <read_sensor_data+0xcc>)
   14b6e:	691b      	ldr	r3, [r3, #16]
   14b70:	001a      	movs	r2, r3
   14b72:	4b11      	ldr	r3, [pc, #68]	; (14bb8 <read_sensor_data+0xe8>)
   14b74:	601a      	str	r2, [r3, #0]
}
   14b76:	46c0      	nop			; (mov r8, r8)
   14b78:	46bd      	mov	sp, r7
   14b7a:	b002      	add	sp, #8
   14b7c:	bd80      	pop	{r7, pc}
   14b7e:	46c0      	nop			; (mov r8, r8)
   14b80:	00014a01 	.word	0x00014a01
   14b84:	20000374 	.word	0x20000374
   14b88:	20000378 	.word	0x20000378
   14b8c:	2000037c 	.word	0x2000037c
   14b90:	20004400 	.word	0x20004400
   14b94:	00013809 	.word	0x00013809
   14b98:	000149c5 	.word	0x000149c5
   14b9c:	20004458 	.word	0x20004458
   14ba0:	000138d5 	.word	0x000138d5
   14ba4:	00035029 	.word	0x00035029
   14ba8:	00034b19 	.word	0x00034b19
   14bac:	42c80000 	.word	0x42c80000
   14bb0:	000350c9 	.word	0x000350c9
   14bb4:	447a0000 	.word	0x447a0000
   14bb8:	20000380 	.word	0x20000380

00014bbc <getTemperature>:

float getTemperature(){
   14bbc:	b580      	push	{r7, lr}
   14bbe:	af00      	add	r7, sp, #0
	return bme_temperature;
   14bc0:	4b02      	ldr	r3, [pc, #8]	; (14bcc <getTemperature+0x10>)
   14bc2:	681b      	ldr	r3, [r3, #0]
}
   14bc4:	1c18      	adds	r0, r3, #0
   14bc6:	46bd      	mov	sp, r7
   14bc8:	bd80      	pop	{r7, pc}
   14bca:	46c0      	nop			; (mov r8, r8)
   14bcc:	20000374 	.word	0x20000374

00014bd0 <getHumidity>:
float getHumidity(){
   14bd0:	b580      	push	{r7, lr}
   14bd2:	af00      	add	r7, sp, #0
	return bme_humidity;
   14bd4:	4b02      	ldr	r3, [pc, #8]	; (14be0 <getHumidity+0x10>)
   14bd6:	681b      	ldr	r3, [r3, #0]
}
   14bd8:	1c18      	adds	r0, r3, #0
   14bda:	46bd      	mov	sp, r7
   14bdc:	bd80      	pop	{r7, pc}
   14bde:	46c0      	nop			; (mov r8, r8)
   14be0:	20000378 	.word	0x20000378

00014be4 <getPressure>:
float getPressure(){
   14be4:	b580      	push	{r7, lr}
   14be6:	af00      	add	r7, sp, #0
	return bme_pressure;
   14be8:	4b02      	ldr	r3, [pc, #8]	; (14bf4 <getPressure+0x10>)
   14bea:	681b      	ldr	r3, [r3, #0]
}
   14bec:	1c18      	adds	r0, r3, #0
   14bee:	46bd      	mov	sp, r7
   14bf0:	bd80      	pop	{r7, pc}
   14bf2:	46c0      	nop			; (mov r8, r8)
   14bf4:	2000037c 	.word	0x2000037c

00014bf8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   14bf8:	b580      	push	{r7, lr}
   14bfa:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   14bfc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   14c00:	4b02      	ldr	r3, [pc, #8]	; (14c0c <NVIC_SystemReset+0x14>)
   14c02:	4a03      	ldr	r2, [pc, #12]	; (14c10 <NVIC_SystemReset+0x18>)
   14c04:	60da      	str	r2, [r3, #12]
   14c06:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   14c0a:	e7fe      	b.n	14c0a <NVIC_SystemReset+0x12>
   14c0c:	e000ed00 	.word	0xe000ed00
   14c10:	05fa0004 	.word	0x05fa0004

00014c14 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   14c14:	b580      	push	{r7, lr}
   14c16:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   14c18:	4b02      	ldr	r3, [pc, #8]	; (14c24 <system_reset+0x10>)
   14c1a:	4798      	blx	r3
}
   14c1c:	46c0      	nop			; (mov r8, r8)
   14c1e:	46bd      	mov	sp, r7
   14c20:	bd80      	pop	{r7, pc}
   14c22:	46c0      	nop			; (mov r8, r8)
   14c24:	00014bf9 	.word	0x00014bf9

00014c28 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   14c28:	b580      	push	{r7, lr}
   14c2a:	b086      	sub	sp, #24
   14c2c:	af00      	add	r7, sp, #0
   14c2e:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   14c30:	4b9c      	ldr	r3, [pc, #624]	; (14ea4 <vCommandConsoleTask+0x27c>)
   14c32:	0018      	movs	r0, r3
   14c34:	4b9c      	ldr	r3, [pc, #624]	; (14ea8 <vCommandConsoleTask+0x280>)
   14c36:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
   14c38:	4b9c      	ldr	r3, [pc, #624]	; (14eac <vCommandConsoleTask+0x284>)
   14c3a:	0018      	movs	r0, r3
   14c3c:	4b9a      	ldr	r3, [pc, #616]	; (14ea8 <vCommandConsoleTask+0x280>)
   14c3e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   14c40:	4b9b      	ldr	r3, [pc, #620]	; (14eb0 <vCommandConsoleTask+0x288>)
   14c42:	0018      	movs	r0, r3
   14c44:	4b98      	ldr	r3, [pc, #608]	; (14ea8 <vCommandConsoleTask+0x280>)
   14c46:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   14c48:	4b9a      	ldr	r3, [pc, #616]	; (14eb4 <vCommandConsoleTask+0x28c>)
   14c4a:	0018      	movs	r0, r3
   14c4c:	4b96      	ldr	r3, [pc, #600]	; (14ea8 <vCommandConsoleTask+0x280>)
   14c4e:	4798      	blx	r3
    // FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
    // FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
    // FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
    // FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   14c50:	4b99      	ldr	r3, [pc, #612]	; (14eb8 <vCommandConsoleTask+0x290>)
   14c52:	0018      	movs	r0, r3
   14c54:	4b94      	ldr	r3, [pc, #592]	; (14ea8 <vCommandConsoleTask+0x280>)
   14c56:	4798      	blx	r3
	//FreeRTOS_CLIRegisterCommand(&xDC);
	//FreeRTOS_CLIRegisterCommand(&xClear);
	FreeRTOS_CLIRegisterCommand(&xLock);
   14c58:	4b98      	ldr	r3, [pc, #608]	; (14ebc <vCommandConsoleTask+0x294>)
   14c5a:	0018      	movs	r0, r3
   14c5c:	4b92      	ldr	r3, [pc, #584]	; (14ea8 <vCommandConsoleTask+0x280>)
   14c5e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xUNLock);
   14c60:	4b97      	ldr	r3, [pc, #604]	; (14ec0 <vCommandConsoleTask+0x298>)
   14c62:	0018      	movs	r0, r3
   14c64:	4b90      	ldr	r3, [pc, #576]	; (14ea8 <vCommandConsoleTask+0x280>)
   14c66:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xBME);
   14c68:	4b96      	ldr	r3, [pc, #600]	; (14ec4 <vCommandConsoleTask+0x29c>)
   14c6a:	0018      	movs	r0, r3
   14c6c:	4b8e      	ldr	r3, [pc, #568]	; (14ea8 <vCommandConsoleTask+0x280>)
   14c6e:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   14c70:	2317      	movs	r3, #23
   14c72:	18fb      	adds	r3, r7, r3
   14c74:	2200      	movs	r2, #0
   14c76:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   14c78:	4b93      	ldr	r3, [pc, #588]	; (14ec8 <vCommandConsoleTask+0x2a0>)
   14c7a:	0018      	movs	r0, r3
   14c7c:	4b93      	ldr	r3, [pc, #588]	; (14ecc <vCommandConsoleTask+0x2a4>)
   14c7e:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   14c80:	2203      	movs	r2, #3
   14c82:	2100      	movs	r1, #0
   14c84:	2001      	movs	r0, #1
   14c86:	4b92      	ldr	r3, [pc, #584]	; (14ed0 <vCommandConsoleTask+0x2a8>)
   14c88:	4798      	blx	r3
   14c8a:	0002      	movs	r2, r0
   14c8c:	4b91      	ldr	r3, [pc, #580]	; (14ed4 <vCommandConsoleTask+0x2ac>)
   14c8e:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   14c90:	4b90      	ldr	r3, [pc, #576]	; (14ed4 <vCommandConsoleTask+0x2ac>)
   14c92:	681b      	ldr	r3, [r3, #0]
   14c94:	2b00      	cmp	r3, #0
   14c96:	d107      	bne.n	14ca8 <vCommandConsoleTask+0x80>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   14c98:	4b8f      	ldr	r3, [pc, #572]	; (14ed8 <vCommandConsoleTask+0x2b0>)
   14c9a:	0019      	movs	r1, r3
   14c9c:	2003      	movs	r0, #3
   14c9e:	4b8f      	ldr	r3, [pc, #572]	; (14edc <vCommandConsoleTask+0x2b4>)
   14ca0:	4798      	blx	r3
        vTaskSuspend(NULL);
   14ca2:	2000      	movs	r0, #0
   14ca4:	4b8e      	ldr	r3, [pc, #568]	; (14ee0 <vCommandConsoleTask+0x2b8>)
   14ca6:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   14ca8:	230c      	movs	r3, #12
   14caa:	18fb      	adds	r3, r7, r3
   14cac:	0018      	movs	r0, r3
   14cae:	4b8d      	ldr	r3, [pc, #564]	; (14ee4 <vCommandConsoleTask+0x2bc>)
   14cb0:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   14cb2:	230c      	movs	r3, #12
   14cb4:	18fb      	adds	r3, r7, r3
   14cb6:	781b      	ldrb	r3, [r3, #0]
   14cb8:	2b0a      	cmp	r3, #10
   14cba:	d004      	beq.n	14cc6 <vCommandConsoleTask+0x9e>
   14cbc:	230c      	movs	r3, #12
   14cbe:	18fb      	adds	r3, r7, r3
   14cc0:	781b      	ldrb	r3, [r3, #0]
   14cc2:	2b0d      	cmp	r3, #13
   14cc4:	d137      	bne.n	14d36 <vCommandConsoleTask+0x10e>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   14cc6:	4b88      	ldr	r3, [pc, #544]	; (14ee8 <vCommandConsoleTask+0x2c0>)
   14cc8:	0018      	movs	r0, r3
   14cca:	4b80      	ldr	r3, [pc, #512]	; (14ecc <vCommandConsoleTask+0x2a4>)
   14ccc:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   14cce:	4b87      	ldr	r3, [pc, #540]	; (14eec <vCommandConsoleTask+0x2c4>)
   14cd0:	2200      	movs	r2, #0
   14cd2:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   14cd4:	4b86      	ldr	r3, [pc, #536]	; (14ef0 <vCommandConsoleTask+0x2c8>)
   14cd6:	2200      	movs	r2, #0
   14cd8:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   14cda:	4986      	ldr	r1, [pc, #536]	; (14ef4 <vCommandConsoleTask+0x2cc>)
   14cdc:	4b86      	ldr	r3, [pc, #536]	; (14ef8 <vCommandConsoleTask+0x2d0>)
   14cde:	2231      	movs	r2, #49	; 0x31
   14ce0:	0018      	movs	r0, r3
   14ce2:	4b86      	ldr	r3, [pc, #536]	; (14efc <vCommandConsoleTask+0x2d4>)
   14ce4:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   14ce6:	4b84      	ldr	r3, [pc, #528]	; (14ef8 <vCommandConsoleTask+0x2d0>)
   14ce8:	2231      	movs	r2, #49	; 0x31
   14cea:	2100      	movs	r1, #0
   14cec:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   14cee:	4984      	ldr	r1, [pc, #528]	; (14f00 <vCommandConsoleTask+0x2d8>)
   14cf0:	4b80      	ldr	r3, [pc, #512]	; (14ef4 <vCommandConsoleTask+0x2cc>)
   14cf2:	2264      	movs	r2, #100	; 0x64
   14cf4:	0018      	movs	r0, r3
   14cf6:	4b83      	ldr	r3, [pc, #524]	; (14f04 <vCommandConsoleTask+0x2dc>)
   14cf8:	4798      	blx	r3
   14cfa:	0003      	movs	r3, r0
   14cfc:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   14cfe:	4b80      	ldr	r3, [pc, #512]	; (14f00 <vCommandConsoleTask+0x2d8>)
   14d00:	2263      	movs	r2, #99	; 0x63
   14d02:	2100      	movs	r1, #0
   14d04:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   14d06:	4b7e      	ldr	r3, [pc, #504]	; (14f00 <vCommandConsoleTask+0x2d8>)
   14d08:	0018      	movs	r0, r3
   14d0a:	4b70      	ldr	r3, [pc, #448]	; (14ecc <vCommandConsoleTask+0x2a4>)
   14d0c:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   14d0e:	693b      	ldr	r3, [r7, #16]
   14d10:	2b00      	cmp	r3, #0
   14d12:	d1ec      	bne.n	14cee <vCommandConsoleTask+0xc6>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   14d14:	2317      	movs	r3, #23
   14d16:	18fb      	adds	r3, r7, r3
   14d18:	2200      	movs	r2, #0
   14d1a:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   14d1c:	4b75      	ldr	r3, [pc, #468]	; (14ef4 <vCommandConsoleTask+0x2cc>)
   14d1e:	2232      	movs	r2, #50	; 0x32
   14d20:	2100      	movs	r1, #0
   14d22:	0018      	movs	r0, r3
   14d24:	4b78      	ldr	r3, [pc, #480]	; (14f08 <vCommandConsoleTask+0x2e0>)
   14d26:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   14d28:	4b75      	ldr	r3, [pc, #468]	; (14f00 <vCommandConsoleTask+0x2d8>)
   14d2a:	2264      	movs	r2, #100	; 0x64
   14d2c:	2100      	movs	r1, #0
   14d2e:	0018      	movs	r0, r3
   14d30:	4b75      	ldr	r3, [pc, #468]	; (14f08 <vCommandConsoleTask+0x2e0>)
   14d32:	4798      	blx	r3
   14d34:	e0b5      	b.n	14ea2 <vCommandConsoleTask+0x27a>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   14d36:	4b6d      	ldr	r3, [pc, #436]	; (14eec <vCommandConsoleTask+0x2c4>)
   14d38:	781b      	ldrb	r3, [r3, #0]
   14d3a:	2b00      	cmp	r3, #0
   14d3c:	d059      	beq.n	14df2 <vCommandConsoleTask+0x1ca>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   14d3e:	4b6c      	ldr	r3, [pc, #432]	; (14ef0 <vCommandConsoleTask+0x2c8>)
   14d40:	781b      	ldrb	r3, [r3, #0]
   14d42:	2b03      	cmp	r3, #3
   14d44:	d80c      	bhi.n	14d60 <vCommandConsoleTask+0x138>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   14d46:	4b6a      	ldr	r3, [pc, #424]	; (14ef0 <vCommandConsoleTask+0x2c8>)
   14d48:	781b      	ldrb	r3, [r3, #0]
   14d4a:	1c5a      	adds	r2, r3, #1
   14d4c:	b2d1      	uxtb	r1, r2
   14d4e:	4a68      	ldr	r2, [pc, #416]	; (14ef0 <vCommandConsoleTask+0x2c8>)
   14d50:	7011      	strb	r1, [r2, #0]
   14d52:	001a      	movs	r2, r3
   14d54:	230c      	movs	r3, #12
   14d56:	18fb      	adds	r3, r7, r3
   14d58:	7819      	ldrb	r1, [r3, #0]
   14d5a:	4b6c      	ldr	r3, [pc, #432]	; (14f0c <vCommandConsoleTask+0x2e4>)
   14d5c:	5499      	strb	r1, [r3, r2]
   14d5e:	e005      	b.n	14d6c <vCommandConsoleTask+0x144>
                } else {
                    isEscapeCode = false;
   14d60:	4b62      	ldr	r3, [pc, #392]	; (14eec <vCommandConsoleTask+0x2c4>)
   14d62:	2200      	movs	r2, #0
   14d64:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   14d66:	4b62      	ldr	r3, [pc, #392]	; (14ef0 <vCommandConsoleTask+0x2c8>)
   14d68:	2200      	movs	r2, #0
   14d6a:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   14d6c:	4b60      	ldr	r3, [pc, #384]	; (14ef0 <vCommandConsoleTask+0x2c8>)
   14d6e:	781b      	ldrb	r3, [r3, #0]
   14d70:	2b01      	cmp	r3, #1
   14d72:	d999      	bls.n	14ca8 <vCommandConsoleTask+0x80>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   14d74:	4a66      	ldr	r2, [pc, #408]	; (14f10 <vCommandConsoleTask+0x2e8>)
   14d76:	4b65      	ldr	r3, [pc, #404]	; (14f0c <vCommandConsoleTask+0x2e4>)
   14d78:	0011      	movs	r1, r2
   14d7a:	0018      	movs	r0, r3
   14d7c:	4b65      	ldr	r3, [pc, #404]	; (14f14 <vCommandConsoleTask+0x2ec>)
   14d7e:	4798      	blx	r3
   14d80:	1e03      	subs	r3, r0, #0
   14d82:	d02f      	beq.n	14de4 <vCommandConsoleTask+0x1bc>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   14d84:	4964      	ldr	r1, [pc, #400]	; (14f18 <vCommandConsoleTask+0x2f0>)
   14d86:	4b5b      	ldr	r3, [pc, #364]	; (14ef4 <vCommandConsoleTask+0x2cc>)
   14d88:	221b      	movs	r2, #27
   14d8a:	0018      	movs	r0, r3
   14d8c:	4b63      	ldr	r3, [pc, #396]	; (14f1c <vCommandConsoleTask+0x2f4>)
   14d8e:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   14d90:	4b58      	ldr	r3, [pc, #352]	; (14ef4 <vCommandConsoleTask+0x2cc>)
   14d92:	0018      	movs	r0, r3
   14d94:	4b4d      	ldr	r3, [pc, #308]	; (14ecc <vCommandConsoleTask+0x2a4>)
   14d96:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   14d98:	2317      	movs	r3, #23
   14d9a:	18fb      	adds	r3, r7, r3
   14d9c:	2200      	movs	r2, #0
   14d9e:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   14da0:	4b54      	ldr	r3, [pc, #336]	; (14ef4 <vCommandConsoleTask+0x2cc>)
   14da2:	2232      	movs	r2, #50	; 0x32
   14da4:	2100      	movs	r1, #0
   14da6:	0018      	movs	r0, r3
   14da8:	4b57      	ldr	r3, [pc, #348]	; (14f08 <vCommandConsoleTask+0x2e0>)
   14daa:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   14dac:	4952      	ldr	r1, [pc, #328]	; (14ef8 <vCommandConsoleTask+0x2d0>)
   14dae:	4b51      	ldr	r3, [pc, #324]	; (14ef4 <vCommandConsoleTask+0x2cc>)
   14db0:	2231      	movs	r2, #49	; 0x31
   14db2:	0018      	movs	r0, r3
   14db4:	4b51      	ldr	r3, [pc, #324]	; (14efc <vCommandConsoleTask+0x2d4>)
   14db6:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   14db8:	4b4e      	ldr	r3, [pc, #312]	; (14ef4 <vCommandConsoleTask+0x2cc>)
   14dba:	0018      	movs	r0, r3
   14dbc:	4b58      	ldr	r3, [pc, #352]	; (14f20 <vCommandConsoleTask+0x2f8>)
   14dbe:	4798      	blx	r3
   14dc0:	0003      	movs	r3, r0
   14dc2:	2b30      	cmp	r3, #48	; 0x30
   14dc4:	d806      	bhi.n	14dd4 <vCommandConsoleTask+0x1ac>
   14dc6:	4b4c      	ldr	r3, [pc, #304]	; (14ef8 <vCommandConsoleTask+0x2d0>)
   14dc8:	0018      	movs	r0, r3
   14dca:	4b55      	ldr	r3, [pc, #340]	; (14f20 <vCommandConsoleTask+0x2f8>)
   14dcc:	4798      	blx	r3
   14dce:	0003      	movs	r3, r0
   14dd0:	b2da      	uxtb	r2, r3
   14dd2:	e000      	b.n	14dd6 <vCommandConsoleTask+0x1ae>
   14dd4:	2231      	movs	r2, #49	; 0x31
   14dd6:	2317      	movs	r3, #23
   14dd8:	18fb      	adds	r3, r7, r3
   14dda:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   14ddc:	4b45      	ldr	r3, [pc, #276]	; (14ef4 <vCommandConsoleTask+0x2cc>)
   14dde:	0018      	movs	r0, r3
   14de0:	4b3a      	ldr	r3, [pc, #232]	; (14ecc <vCommandConsoleTask+0x2a4>)
   14de2:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   14de4:	4b41      	ldr	r3, [pc, #260]	; (14eec <vCommandConsoleTask+0x2c4>)
   14de6:	2200      	movs	r2, #0
   14de8:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   14dea:	4b41      	ldr	r3, [pc, #260]	; (14ef0 <vCommandConsoleTask+0x2c8>)
   14dec:	2200      	movs	r2, #0
   14dee:	701a      	strb	r2, [r3, #0]
   14df0:	e75a      	b.n	14ca8 <vCommandConsoleTask+0x80>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   14df2:	230c      	movs	r3, #12
   14df4:	18fb      	adds	r3, r7, r3
   14df6:	781b      	ldrb	r3, [r3, #0]
   14df8:	2b0d      	cmp	r3, #13
   14dfa:	d100      	bne.n	14dfe <vCommandConsoleTask+0x1d6>
   14dfc:	e754      	b.n	14ca8 <vCommandConsoleTask+0x80>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   14dfe:	230c      	movs	r3, #12
   14e00:	18fb      	adds	r3, r7, r3
   14e02:	781b      	ldrb	r3, [r3, #0]
   14e04:	2b08      	cmp	r3, #8
   14e06:	d004      	beq.n	14e12 <vCommandConsoleTask+0x1ea>
   14e08:	230c      	movs	r3, #12
   14e0a:	18fb      	adds	r3, r7, r3
   14e0c:	781b      	ldrb	r3, [r3, #0]
   14e0e:	2b7f      	cmp	r3, #127	; 0x7f
   14e10:	d11c      	bne.n	14e4c <vCommandConsoleTask+0x224>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   14e12:	2308      	movs	r3, #8
   14e14:	18fb      	adds	r3, r7, r3
   14e16:	4a43      	ldr	r2, [pc, #268]	; (14f24 <vCommandConsoleTask+0x2fc>)
   14e18:	6812      	ldr	r2, [r2, #0]
   14e1a:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   14e1c:	2308      	movs	r3, #8
   14e1e:	18fb      	adds	r3, r7, r3
   14e20:	0018      	movs	r0, r3
   14e22:	4b2a      	ldr	r3, [pc, #168]	; (14ecc <vCommandConsoleTask+0x2a4>)
   14e24:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   14e26:	2317      	movs	r3, #23
   14e28:	18fb      	adds	r3, r7, r3
   14e2a:	781b      	ldrb	r3, [r3, #0]
   14e2c:	2b00      	cmp	r3, #0
   14e2e:	d037      	beq.n	14ea0 <vCommandConsoleTask+0x278>
                    cInputIndex--;
   14e30:	2317      	movs	r3, #23
   14e32:	18fb      	adds	r3, r7, r3
   14e34:	781a      	ldrb	r2, [r3, #0]
   14e36:	2317      	movs	r3, #23
   14e38:	18fb      	adds	r3, r7, r3
   14e3a:	3a01      	subs	r2, #1
   14e3c:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   14e3e:	2317      	movs	r3, #23
   14e40:	18fb      	adds	r3, r7, r3
   14e42:	781b      	ldrb	r3, [r3, #0]
   14e44:	4a2b      	ldr	r2, [pc, #172]	; (14ef4 <vCommandConsoleTask+0x2cc>)
   14e46:	2100      	movs	r1, #0
   14e48:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   14e4a:	e029      	b.n	14ea0 <vCommandConsoleTask+0x278>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   14e4c:	230c      	movs	r3, #12
   14e4e:	18fb      	adds	r3, r7, r3
   14e50:	781b      	ldrb	r3, [r3, #0]
   14e52:	2b1b      	cmp	r3, #27
   14e54:	d106      	bne.n	14e64 <vCommandConsoleTask+0x23c>
                isEscapeCode = true;  // Next characters will be code arguments
   14e56:	4b25      	ldr	r3, [pc, #148]	; (14eec <vCommandConsoleTask+0x2c4>)
   14e58:	2201      	movs	r2, #1
   14e5a:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   14e5c:	4b24      	ldr	r3, [pc, #144]	; (14ef0 <vCommandConsoleTask+0x2c8>)
   14e5e:	2200      	movs	r2, #0
   14e60:	701a      	strb	r2, [r3, #0]
   14e62:	e721      	b.n	14ca8 <vCommandConsoleTask+0x80>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   14e64:	2317      	movs	r3, #23
   14e66:	18fb      	adds	r3, r7, r3
   14e68:	781b      	ldrb	r3, [r3, #0]
   14e6a:	2b31      	cmp	r3, #49	; 0x31
   14e6c:	d80e      	bhi.n	14e8c <vCommandConsoleTask+0x264>
                    pcInputString[cInputIndex] = cRxedChar[0];
   14e6e:	2317      	movs	r3, #23
   14e70:	18fb      	adds	r3, r7, r3
   14e72:	781b      	ldrb	r3, [r3, #0]
   14e74:	220c      	movs	r2, #12
   14e76:	18ba      	adds	r2, r7, r2
   14e78:	7811      	ldrb	r1, [r2, #0]
   14e7a:	4a1e      	ldr	r2, [pc, #120]	; (14ef4 <vCommandConsoleTask+0x2cc>)
   14e7c:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   14e7e:	2317      	movs	r3, #23
   14e80:	18fb      	adds	r3, r7, r3
   14e82:	781a      	ldrb	r2, [r3, #0]
   14e84:	2317      	movs	r3, #23
   14e86:	18fb      	adds	r3, r7, r3
   14e88:	3201      	adds	r2, #1
   14e8a:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   14e8c:	230c      	movs	r3, #12
   14e8e:	18fb      	adds	r3, r7, r3
   14e90:	2200      	movs	r2, #0
   14e92:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   14e94:	230c      	movs	r3, #12
   14e96:	18fb      	adds	r3, r7, r3
   14e98:	0018      	movs	r0, r3
   14e9a:	4b0c      	ldr	r3, [pc, #48]	; (14ecc <vCommandConsoleTask+0x2a4>)
   14e9c:	4798      	blx	r3
   14e9e:	e703      	b.n	14ca8 <vCommandConsoleTask+0x80>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   14ea0:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   14ea2:	e701      	b.n	14ca8 <vCommandConsoleTask+0x80>
   14ea4:	0003849c 	.word	0x0003849c
   14ea8:	00019fc9 	.word	0x00019fc9
   14eac:	0003848c 	.word	0x0003848c
   14eb0:	000384fc 	.word	0x000384fc
   14eb4:	000384cc 	.word	0x000384cc
   14eb8:	000384dc 	.word	0x000384dc
   14ebc:	000384ac 	.word	0x000384ac
   14ec0:	000384bc 	.word	0x000384bc
   14ec4:	000384ec 	.word	0x000384ec
   14ec8:	00038104 	.word	0x00038104
   14ecc:	0001fef5 	.word	0x0001fef5
   14ed0:	0001c595 	.word	0x0001c595
   14ed4:	2000446c 	.word	0x2000446c
   14ed8:	0003832c 	.word	0x0003832c
   14edc:	0001ffe1 	.word	0x0001ffe1
   14ee0:	0001e381 	.word	0x0001e381
   14ee4:	00014f29 	.word	0x00014f29
   14ee8:	0003834c 	.word	0x0003834c
   14eec:	20000394 	.word	0x20000394
   14ef0:	20000395 	.word	0x20000395
   14ef4:	200003cc 	.word	0x200003cc
   14ef8:	20000398 	.word	0x20000398
   14efc:	00037087 	.word	0x00037087
   14f00:	20000400 	.word	0x20000400
   14f04:	0001a039 	.word	0x0001a039
   14f08:	00036c9f 	.word	0x00036c9f
   14f0c:	20000464 	.word	0x20000464
   14f10:	00038350 	.word	0x00038350
   14f14:	00036fa1 	.word	0x00036fa1
   14f18:	00038354 	.word	0x00038354
   14f1c:	00036f5d 	.word	0x00036f5d
   14f20:	00037057 	.word	0x00037057
   14f24:	0003835c 	.word	0x0003835c

00014f28 <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   14f28:	b580      	push	{r7, lr}
   14f2a:	b084      	sub	sp, #16
   14f2c:	af00      	add	r7, sp, #0
   14f2e:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   14f30:	687b      	ldr	r3, [r7, #4]
   14f32:	0018      	movs	r0, r3
   14f34:	4b0c      	ldr	r3, [pc, #48]	; (14f68 <FreeRTOS_read+0x40>)
   14f36:	4798      	blx	r3
   14f38:	0003      	movs	r3, r0
   14f3a:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   14f3c:	e00d      	b.n	14f5a <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   14f3e:	4b0b      	ldr	r3, [pc, #44]	; (14f6c <FreeRTOS_read+0x44>)
   14f40:	681a      	ldr	r2, [r3, #0]
   14f42:	2301      	movs	r3, #1
   14f44:	425b      	negs	r3, r3
   14f46:	0019      	movs	r1, r3
   14f48:	0010      	movs	r0, r2
   14f4a:	4b09      	ldr	r3, [pc, #36]	; (14f70 <FreeRTOS_read+0x48>)
   14f4c:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   14f4e:	687b      	ldr	r3, [r7, #4]
   14f50:	0018      	movs	r0, r3
   14f52:	4b05      	ldr	r3, [pc, #20]	; (14f68 <FreeRTOS_read+0x40>)
   14f54:	4798      	blx	r3
   14f56:	0003      	movs	r3, r0
   14f58:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   14f5a:	68fb      	ldr	r3, [r7, #12]
   14f5c:	3301      	adds	r3, #1
   14f5e:	d0ee      	beq.n	14f3e <FreeRTOS_read+0x16>
    }
}
   14f60:	46c0      	nop			; (mov r8, r8)
   14f62:	46bd      	mov	sp, r7
   14f64:	b004      	add	sp, #16
   14f66:	bd80      	pop	{r7, pc}
   14f68:	0001ff91 	.word	0x0001ff91
   14f6c:	2000446c 	.word	0x2000446c
   14f70:	0001d54d 	.word	0x0001d54d

00014f74 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   14f74:	b580      	push	{r7, lr}
   14f76:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   14f78:	4b0a      	ldr	r3, [pc, #40]	; (14fa4 <CliCharReadySemaphoreGiveFromISR+0x30>)
   14f7a:	2200      	movs	r2, #0
   14f7c:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   14f7e:	4b0a      	ldr	r3, [pc, #40]	; (14fa8 <CliCharReadySemaphoreGiveFromISR+0x34>)
   14f80:	681b      	ldr	r3, [r3, #0]
   14f82:	4a08      	ldr	r2, [pc, #32]	; (14fa4 <CliCharReadySemaphoreGiveFromISR+0x30>)
   14f84:	0011      	movs	r1, r2
   14f86:	0018      	movs	r0, r3
   14f88:	4b08      	ldr	r3, [pc, #32]	; (14fac <CliCharReadySemaphoreGiveFromISR+0x38>)
   14f8a:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14f8c:	4b05      	ldr	r3, [pc, #20]	; (14fa4 <CliCharReadySemaphoreGiveFromISR+0x30>)
   14f8e:	681b      	ldr	r3, [r3, #0]
   14f90:	2b00      	cmp	r3, #0
   14f92:	d003      	beq.n	14f9c <CliCharReadySemaphoreGiveFromISR+0x28>
   14f94:	4b06      	ldr	r3, [pc, #24]	; (14fb0 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   14f96:	2280      	movs	r2, #128	; 0x80
   14f98:	0552      	lsls	r2, r2, #21
   14f9a:	601a      	str	r2, [r3, #0]
}
   14f9c:	46c0      	nop			; (mov r8, r8)
   14f9e:	46bd      	mov	sp, r7
   14fa0:	bd80      	pop	{r7, pc}
   14fa2:	46c0      	nop			; (mov r8, r8)
   14fa4:	20000468 	.word	0x20000468
   14fa8:	2000446c 	.word	0x2000446c
   14fac:	0001cec5 	.word	0x0001cec5
   14fb0:	e000ed04 	.word	0xe000ed04

00014fb4 <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14fb4:	b5b0      	push	{r4, r5, r7, lr}
   14fb6:	b08a      	sub	sp, #40	; 0x28
   14fb8:	af02      	add	r7, sp, #8
   14fba:	60f8      	str	r0, [r7, #12]
   14fbc:	60b9      	str	r1, [r7, #8]
   14fbe:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   14fc0:	4b49      	ldr	r3, [pc, #292]	; (150e8 <CLI_GetImuData+0x134>)
   14fc2:	4798      	blx	r3
   14fc4:	0003      	movs	r3, r0
   14fc6:	61fb      	str	r3, [r7, #28]
	struct ImuDataPacket imuPacket;

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
   14fc8:	231b      	movs	r3, #27
   14fca:	18fa      	adds	r2, r7, r3
   14fcc:	69fb      	ldr	r3, [r7, #28]
   14fce:	0011      	movs	r1, r2
   14fd0:	0018      	movs	r0, r3
   14fd2:	4b46      	ldr	r3, [pc, #280]	; (150ec <CLI_GetImuData+0x138>)
   14fd4:	4798      	blx	r3

    if (reg) {
   14fd6:	231b      	movs	r3, #27
   14fd8:	18fb      	adds	r3, r7, r3
   14fda:	781b      	ldrb	r3, [r3, #0]
   14fdc:	2b00      	cmp	r3, #0
   14fde:	d064      	beq.n	150aa <CLI_GetImuData+0xf6>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   14fe0:	4b43      	ldr	r3, [pc, #268]	; (150f0 <CLI_GetImuData+0x13c>)
   14fe2:	2206      	movs	r2, #6
   14fe4:	2100      	movs	r1, #0
   14fe6:	0018      	movs	r0, r3
   14fe8:	4b42      	ldr	r3, [pc, #264]	; (150f4 <CLI_GetImuData+0x140>)
   14fea:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
   14fec:	4a40      	ldr	r2, [pc, #256]	; (150f0 <CLI_GetImuData+0x13c>)
   14fee:	69fb      	ldr	r3, [r7, #28]
   14ff0:	0011      	movs	r1, r2
   14ff2:	0018      	movs	r0, r3
   14ff4:	4b40      	ldr	r3, [pc, #256]	; (150f8 <CLI_GetImuData+0x144>)
   14ff6:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
   14ff8:	4b3d      	ldr	r3, [pc, #244]	; (150f0 <CLI_GetImuData+0x13c>)
   14ffa:	2200      	movs	r2, #0
   14ffc:	5e9b      	ldrsh	r3, [r3, r2]
   14ffe:	0018      	movs	r0, r3
   15000:	4b3e      	ldr	r3, [pc, #248]	; (150fc <CLI_GetImuData+0x148>)
   15002:	4798      	blx	r3
   15004:	1c02      	adds	r2, r0, #0
   15006:	4b3e      	ldr	r3, [pc, #248]	; (15100 <CLI_GetImuData+0x14c>)
   15008:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
   1500a:	4b39      	ldr	r3, [pc, #228]	; (150f0 <CLI_GetImuData+0x13c>)
   1500c:	2202      	movs	r2, #2
   1500e:	5e9b      	ldrsh	r3, [r3, r2]
   15010:	0018      	movs	r0, r3
   15012:	4b3a      	ldr	r3, [pc, #232]	; (150fc <CLI_GetImuData+0x148>)
   15014:	4798      	blx	r3
   15016:	1c02      	adds	r2, r0, #0
   15018:	4b39      	ldr	r3, [pc, #228]	; (15100 <CLI_GetImuData+0x14c>)
   1501a:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
   1501c:	4b34      	ldr	r3, [pc, #208]	; (150f0 <CLI_GetImuData+0x13c>)
   1501e:	2204      	movs	r2, #4
   15020:	5e9b      	ldrsh	r3, [r3, r2]
   15022:	0018      	movs	r0, r3
   15024:	4b35      	ldr	r3, [pc, #212]	; (150fc <CLI_GetImuData+0x148>)
   15026:	4798      	blx	r3
   15028:	1c02      	adds	r2, r0, #0
   1502a:	4b35      	ldr	r3, [pc, #212]	; (15100 <CLI_GetImuData+0x14c>)
   1502c:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   1502e:	4b34      	ldr	r3, [pc, #208]	; (15100 <CLI_GetImuData+0x14c>)
   15030:	681a      	ldr	r2, [r3, #0]
   15032:	4b34      	ldr	r3, [pc, #208]	; (15104 <CLI_GetImuData+0x150>)
   15034:	1c10      	adds	r0, r2, #0
   15036:	4798      	blx	r3
   15038:	0005      	movs	r5, r0
   1503a:	4b31      	ldr	r3, [pc, #196]	; (15100 <CLI_GetImuData+0x14c>)
   1503c:	685a      	ldr	r2, [r3, #4]
   1503e:	4b31      	ldr	r3, [pc, #196]	; (15104 <CLI_GetImuData+0x150>)
   15040:	1c10      	adds	r0, r2, #0
   15042:	4798      	blx	r3
   15044:	0004      	movs	r4, r0
   15046:	4b2e      	ldr	r3, [pc, #184]	; (15100 <CLI_GetImuData+0x14c>)
   15048:	689a      	ldr	r2, [r3, #8]
   1504a:	4b2e      	ldr	r3, [pc, #184]	; (15104 <CLI_GetImuData+0x150>)
   1504c:	1c10      	adds	r0, r2, #0
   1504e:	4798      	blx	r3
   15050:	0003      	movs	r3, r0
   15052:	4a2d      	ldr	r2, [pc, #180]	; (15108 <CLI_GetImuData+0x154>)
   15054:	68b9      	ldr	r1, [r7, #8]
   15056:	68f8      	ldr	r0, [r7, #12]
   15058:	9301      	str	r3, [sp, #4]
   1505a:	9400      	str	r4, [sp, #0]
   1505c:	002b      	movs	r3, r5
   1505e:	4c2b      	ldr	r4, [pc, #172]	; (1510c <CLI_GetImuData+0x158>)
   15060:	47a0      	blx	r4
		imuPacket.xmg = (int)acceleration_mg[0];
   15062:	4b27      	ldr	r3, [pc, #156]	; (15100 <CLI_GetImuData+0x14c>)
   15064:	681a      	ldr	r2, [r3, #0]
   15066:	4b27      	ldr	r3, [pc, #156]	; (15104 <CLI_GetImuData+0x150>)
   15068:	1c10      	adds	r0, r2, #0
   1506a:	4798      	blx	r3
   1506c:	0003      	movs	r3, r0
   1506e:	b21a      	sxth	r2, r3
   15070:	2314      	movs	r3, #20
   15072:	18fb      	adds	r3, r7, r3
   15074:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = (int)acceleration_mg[1];
   15076:	4b22      	ldr	r3, [pc, #136]	; (15100 <CLI_GetImuData+0x14c>)
   15078:	685a      	ldr	r2, [r3, #4]
   1507a:	4b22      	ldr	r3, [pc, #136]	; (15104 <CLI_GetImuData+0x150>)
   1507c:	1c10      	adds	r0, r2, #0
   1507e:	4798      	blx	r3
   15080:	0003      	movs	r3, r0
   15082:	b21a      	sxth	r2, r3
   15084:	2314      	movs	r3, #20
   15086:	18fb      	adds	r3, r7, r3
   15088:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = (int)acceleration_mg[2];
   1508a:	4b1d      	ldr	r3, [pc, #116]	; (15100 <CLI_GetImuData+0x14c>)
   1508c:	689a      	ldr	r2, [r3, #8]
   1508e:	4b1d      	ldr	r3, [pc, #116]	; (15104 <CLI_GetImuData+0x150>)
   15090:	1c10      	adds	r0, r2, #0
   15092:	4798      	blx	r3
   15094:	0003      	movs	r3, r0
   15096:	b21a      	sxth	r2, r3
   15098:	2314      	movs	r3, #20
   1509a:	18fb      	adds	r3, r7, r3
   1509c:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   1509e:	2314      	movs	r3, #20
   150a0:	18fb      	adds	r3, r7, r3
   150a2:	0018      	movs	r0, r3
   150a4:	4b1a      	ldr	r3, [pc, #104]	; (15110 <CLI_GetImuData+0x15c>)
   150a6:	4798      	blx	r3
   150a8:	e019      	b.n	150de <CLI_GetImuData+0x12a>
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! Sending dummy data \r\n");
   150aa:	4a1a      	ldr	r2, [pc, #104]	; (15114 <CLI_GetImuData+0x160>)
   150ac:	68b9      	ldr	r1, [r7, #8]
   150ae:	68fb      	ldr	r3, [r7, #12]
   150b0:	0018      	movs	r0, r3
   150b2:	4b16      	ldr	r3, [pc, #88]	; (1510c <CLI_GetImuData+0x158>)
   150b4:	4798      	blx	r3
		imuPacket.xmg = -1;
   150b6:	2314      	movs	r3, #20
   150b8:	18fb      	adds	r3, r7, r3
   150ba:	2201      	movs	r2, #1
   150bc:	4252      	negs	r2, r2
   150be:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = -2;
   150c0:	2314      	movs	r3, #20
   150c2:	18fb      	adds	r3, r7, r3
   150c4:	2202      	movs	r2, #2
   150c6:	4252      	negs	r2, r2
   150c8:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = -3;
   150ca:	2314      	movs	r3, #20
   150cc:	18fb      	adds	r3, r7, r3
   150ce:	2203      	movs	r2, #3
   150d0:	4252      	negs	r2, r2
   150d2:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   150d4:	2314      	movs	r3, #20
   150d6:	18fb      	adds	r3, r7, r3
   150d8:	0018      	movs	r0, r3
   150da:	4b0d      	ldr	r3, [pc, #52]	; (15110 <CLI_GetImuData+0x15c>)
   150dc:	4798      	blx	r3
    }
    return pdFALSE;
   150de:	2300      	movs	r3, #0
}
   150e0:	0018      	movs	r0, r3
   150e2:	46bd      	mov	sp, r7
   150e4:	b008      	add	sp, #32
   150e6:	bdb0      	pop	{r4, r5, r7, pc}
   150e8:	00016ac1 	.word	0x00016ac1
   150ec:	0001656d 	.word	0x0001656d
   150f0:	2000046c 	.word	0x2000046c
   150f4:	00036c9f 	.word	0x00036c9f
   150f8:	000165a9 	.word	0x000165a9
   150fc:	00015dfd 	.word	0x00015dfd
   15100:	20000474 	.word	0x20000474
   15104:	00034fe9 	.word	0x00034fe9
   15108:	00038360 	.word	0x00038360
   1510c:	00036ef9 	.word	0x00036ef9
   15110:	0001960d 	.word	0x0001960d
   15114:	00038384 	.word	0x00038384

00015118 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   15118:	b590      	push	{r4, r7, lr}
   1511a:	b087      	sub	sp, #28
   1511c:	af00      	add	r7, sp, #0
   1511e:	60f8      	str	r0, [r7, #12]
   15120:	60b9      	str	r1, [r7, #8]
   15122:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   15124:	2317      	movs	r3, #23
   15126:	18fb      	adds	r3, r7, r3
   15128:	221b      	movs	r2, #27
   1512a:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   1512c:	2317      	movs	r3, #23
   1512e:	18fb      	adds	r3, r7, r3
   15130:	781b      	ldrb	r3, [r3, #0]
   15132:	4a08      	ldr	r2, [pc, #32]	; (15154 <xCliClearTerminalScreen+0x3c>)
   15134:	4808      	ldr	r0, [pc, #32]	; (15158 <xCliClearTerminalScreen+0x40>)
   15136:	210f      	movs	r1, #15
   15138:	4c08      	ldr	r4, [pc, #32]	; (1515c <xCliClearTerminalScreen+0x44>)
   1513a:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   1513c:	4a06      	ldr	r2, [pc, #24]	; (15158 <xCliClearTerminalScreen+0x40>)
   1513e:	68b9      	ldr	r1, [r7, #8]
   15140:	68fb      	ldr	r3, [r7, #12]
   15142:	0018      	movs	r0, r3
   15144:	4b05      	ldr	r3, [pc, #20]	; (1515c <xCliClearTerminalScreen+0x44>)
   15146:	4798      	blx	r3
    return pdFALSE;
   15148:	2300      	movs	r3, #0
}
   1514a:	0018      	movs	r0, r3
   1514c:	46bd      	mov	sp, r7
   1514e:	b007      	add	sp, #28
   15150:	bd90      	pop	{r4, r7, pc}
   15152:	46c0      	nop			; (mov r8, r8)
   15154:	000383ac 	.word	0x000383ac
   15158:	20000384 	.word	0x20000384
   1515c:	00036ef9 	.word	0x00036ef9

00015160 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   15160:	b580      	push	{r7, lr}
   15162:	b084      	sub	sp, #16
   15164:	af00      	add	r7, sp, #0
   15166:	60f8      	str	r0, [r7, #12]
   15168:	60b9      	str	r1, [r7, #8]
   1516a:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   1516c:	2002      	movs	r0, #2
   1516e:	4b03      	ldr	r3, [pc, #12]	; (1517c <CLI_OTAU+0x1c>)
   15170:	4798      	blx	r3

    return pdFALSE;
   15172:	2300      	movs	r3, #0
}
   15174:	0018      	movs	r0, r3
   15176:	46bd      	mov	sp, r7
   15178:	b004      	add	sp, #16
   1517a:	bd80      	pop	{r7, pc}
   1517c:	000195d9 	.word	0x000195d9

00015180 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   15180:	b580      	push	{r7, lr}
   15182:	b084      	sub	sp, #16
   15184:	af00      	add	r7, sp, #0
   15186:	60f8      	str	r0, [r7, #12]
   15188:	60b9      	str	r1, [r7, #8]
   1518a:	607a      	str	r2, [r7, #4]
    system_reset();
   1518c:	4b03      	ldr	r3, [pc, #12]	; (1519c <CLI_ResetDevice+0x1c>)
   1518e:	4798      	blx	r3
    return pdFALSE;
   15190:	2300      	movs	r3, #0
}
   15192:	0018      	movs	r0, r3
   15194:	46bd      	mov	sp, r7
   15196:	b004      	add	sp, #16
   15198:	bd80      	pop	{r7, pc}
   1519a:	46c0      	nop			; (mov r8, r8)
   1519c:	00014c15 	.word	0x00014c15

000151a0 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   151a0:	b590      	push	{r4, r7, lr}
   151a2:	b08f      	sub	sp, #60	; 0x3c
   151a4:	af00      	add	r7, sp, #0
   151a6:	60f8      	str	r0, [r7, #12]
   151a8:	60b9      	str	r1, [r7, #8]
   151aa:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   151ac:	2318      	movs	r3, #24
   151ae:	18fb      	adds	r3, r7, r3
   151b0:	2200      	movs	r2, #0
   151b2:	701a      	strb	r2, [r3, #0]
   151b4:	2318      	movs	r3, #24
   151b6:	18fb      	adds	r3, r7, r3
   151b8:	2200      	movs	r2, #0
   151ba:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   151bc:	2318      	movs	r3, #24
   151be:	18fb      	adds	r3, r7, r3
   151c0:	2200      	movs	r2, #0
   151c2:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   151c4:	2318      	movs	r3, #24
   151c6:	18fb      	adds	r3, r7, r3
   151c8:	2200      	movs	r2, #0
   151ca:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   151cc:	231c      	movs	r3, #28
   151ce:	18fb      	adds	r3, r7, r3
   151d0:	2200      	movs	r2, #0
   151d2:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   151d4:	231c      	movs	r3, #28
   151d6:	18fb      	adds	r3, r7, r3
   151d8:	2214      	movs	r2, #20
   151da:	18ba      	adds	r2, r7, r2
   151dc:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   151de:	231c      	movs	r3, #28
   151e0:	18fb      	adds	r3, r7, r3
   151e2:	2201      	movs	r2, #1
   151e4:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   151e6:	231c      	movs	r3, #28
   151e8:	18fb      	adds	r3, r7, r3
   151ea:	2218      	movs	r2, #24
   151ec:	18ba      	adds	r2, r7, r2
   151ee:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   151f0:	231c      	movs	r3, #28
   151f2:	18fb      	adds	r3, r7, r3
   151f4:	2201      	movs	r2, #1
   151f6:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   151f8:	4b2a      	ldr	r3, [pc, #168]	; (152a4 <CLI_i2cScan+0x104>)
   151fa:	0018      	movs	r0, r3
   151fc:	4b2a      	ldr	r3, [pc, #168]	; (152a8 <CLI_i2cScan+0x108>)
   151fe:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   15200:	2300      	movs	r3, #0
   15202:	637b      	str	r3, [r7, #52]	; 0x34
   15204:	e042      	b.n	1528c <CLI_i2cScan+0xec>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   15206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15208:	4a28      	ldr	r2, [pc, #160]	; (152ac <CLI_i2cScan+0x10c>)
   1520a:	4829      	ldr	r0, [pc, #164]	; (152b0 <CLI_i2cScan+0x110>)
   1520c:	210f      	movs	r1, #15
   1520e:	4c29      	ldr	r4, [pc, #164]	; (152b4 <CLI_i2cScan+0x114>)
   15210:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   15212:	4b27      	ldr	r3, [pc, #156]	; (152b0 <CLI_i2cScan+0x110>)
   15214:	0018      	movs	r0, r3
   15216:	4b24      	ldr	r3, [pc, #144]	; (152a8 <CLI_i2cScan+0x108>)
   15218:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   1521a:	2300      	movs	r3, #0
   1521c:	633b      	str	r3, [r7, #48]	; 0x30
   1521e:	e02b      	b.n	15278 <CLI_i2cScan+0xd8>
                {

                    i2cOled.address = (i + j);
   15220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15222:	b2da      	uxtb	r2, r3
   15224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15226:	b2db      	uxtb	r3, r3
   15228:	18d3      	adds	r3, r2, r3
   1522a:	b2da      	uxtb	r2, r3
   1522c:	231c      	movs	r3, #28
   1522e:	18fb      	adds	r3, r7, r3
   15230:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cPingAddressWait(&i2cOled, 100, 100);
   15232:	231c      	movs	r3, #28
   15234:	18fb      	adds	r3, r7, r3
   15236:	2264      	movs	r2, #100	; 0x64
   15238:	2164      	movs	r1, #100	; 0x64
   1523a:	0018      	movs	r0, r3
   1523c:	4b1e      	ldr	r3, [pc, #120]	; (152b8 <CLI_i2cScan+0x118>)
   1523e:	4798      	blx	r3
   15240:	0003      	movs	r3, r0
   15242:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   15244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15246:	2b00      	cmp	r3, #0
   15248:	d10c      	bne.n	15264 <CLI_i2cScan+0xc4>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x ", i2cOled.address);
   1524a:	231c      	movs	r3, #28
   1524c:	18fb      	adds	r3, r7, r3
   1524e:	781b      	ldrb	r3, [r3, #0]
   15250:	4a1a      	ldr	r2, [pc, #104]	; (152bc <CLI_i2cScan+0x11c>)
   15252:	4817      	ldr	r0, [pc, #92]	; (152b0 <CLI_i2cScan+0x110>)
   15254:	210f      	movs	r1, #15
   15256:	4c17      	ldr	r4, [pc, #92]	; (152b4 <CLI_i2cScan+0x114>)
   15258:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   1525a:	4b15      	ldr	r3, [pc, #84]	; (152b0 <CLI_i2cScan+0x110>)
   1525c:	0018      	movs	r0, r3
   1525e:	4b12      	ldr	r3, [pc, #72]	; (152a8 <CLI_i2cScan+0x108>)
   15260:	4798      	blx	r3
   15262:	e006      	b.n	15272 <CLI_i2cScan+0xd2>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X  ");
   15264:	4b12      	ldr	r3, [pc, #72]	; (152b0 <CLI_i2cScan+0x110>)
   15266:	4a16      	ldr	r2, [pc, #88]	; (152c0 <CLI_i2cScan+0x120>)
   15268:	601a      	str	r2, [r3, #0]
						SerialConsoleWriteString(bufCli);
   1526a:	4b11      	ldr	r3, [pc, #68]	; (152b0 <CLI_i2cScan+0x110>)
   1526c:	0018      	movs	r0, r3
   1526e:	4b0e      	ldr	r3, [pc, #56]	; (152a8 <CLI_i2cScan+0x108>)
   15270:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   15272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15274:	3301      	adds	r3, #1
   15276:	633b      	str	r3, [r7, #48]	; 0x30
   15278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1527a:	2b0f      	cmp	r3, #15
   1527c:	ddd0      	ble.n	15220 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   1527e:	4b11      	ldr	r3, [pc, #68]	; (152c4 <CLI_i2cScan+0x124>)
   15280:	0018      	movs	r0, r3
   15282:	4b09      	ldr	r3, [pc, #36]	; (152a8 <CLI_i2cScan+0x108>)
   15284:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   15286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15288:	3310      	adds	r3, #16
   1528a:	637b      	str	r3, [r7, #52]	; 0x34
   1528c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1528e:	2b7f      	cmp	r3, #127	; 0x7f
   15290:	ddb9      	ble.n	15206 <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   15292:	4b0c      	ldr	r3, [pc, #48]	; (152c4 <CLI_i2cScan+0x124>)
   15294:	0018      	movs	r0, r3
   15296:	4b04      	ldr	r3, [pc, #16]	; (152a8 <CLI_i2cScan+0x108>)
   15298:	4798      	blx	r3
			return pdFALSE;
   1529a:	2300      	movs	r3, #0

}
   1529c:	0018      	movs	r0, r3
   1529e:	46bd      	mov	sp, r7
   152a0:	b00f      	add	sp, #60	; 0x3c
   152a2:	bd90      	pop	{r4, r7, pc}
   152a4:	0003842c 	.word	0x0003842c
   152a8:	0001fef5 	.word	0x0001fef5
   152ac:	00038460 	.word	0x00038460
   152b0:	20000384 	.word	0x20000384
   152b4:	00036ef9 	.word	0x00036ef9
   152b8:	00015ca5 	.word	0x00015ca5
   152bc:	00038468 	.word	0x00038468
   152c0:	00202058 	.word	0x00202058
   152c4:	0003834c 	.word	0x0003834c

000152c8 <CLI_LOCK>:
}
BaseType_t CLI_CLLCD(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
	//LCD_clearScreen(WHITE);
	    return pdFALSE;
}
BaseType_t CLI_LOCK(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   152c8:	b580      	push	{r7, lr}
   152ca:	b084      	sub	sp, #16
   152cc:	af00      	add	r7, sp, #0
   152ce:	60f8      	str	r0, [r7, #12]
   152d0:	60b9      	str	r1, [r7, #8]
   152d2:	607a      	str	r2, [r7, #4]
	lock();
   152d4:	4b03      	ldr	r3, [pc, #12]	; (152e4 <CLI_LOCK+0x1c>)
   152d6:	4798      	blx	r3
	    return pdFALSE;
   152d8:	2300      	movs	r3, #0
}
   152da:	0018      	movs	r0, r3
   152dc:	46bd      	mov	sp, r7
   152de:	b004      	add	sp, #16
   152e0:	bd80      	pop	{r7, pc}
   152e2:	46c0      	nop			; (mov r8, r8)
   152e4:	00016cc5 	.word	0x00016cc5

000152e8 <CLI_UNLOCK>:
BaseType_t CLI_UNLOCK(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   152e8:	b580      	push	{r7, lr}
   152ea:	b084      	sub	sp, #16
   152ec:	af00      	add	r7, sp, #0
   152ee:	60f8      	str	r0, [r7, #12]
   152f0:	60b9      	str	r1, [r7, #8]
   152f2:	607a      	str	r2, [r7, #4]
	unlock();
   152f4:	4b03      	ldr	r3, [pc, #12]	; (15304 <CLI_UNLOCK+0x1c>)
   152f6:	4798      	blx	r3
	    return pdFALSE;
   152f8:	2300      	movs	r3, #0
}
   152fa:	0018      	movs	r0, r3
   152fc:	46bd      	mov	sp, r7
   152fe:	b004      	add	sp, #16
   15300:	bd80      	pop	{r7, pc}
   15302:	46c0      	nop			; (mov r8, r8)
   15304:	00016d41 	.word	0x00016d41

00015308 <CLI_BME>:
BaseType_t CLI_BME(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   15308:	b5b0      	push	{r4, r5, r7, lr}
   1530a:	b096      	sub	sp, #88	; 0x58
   1530c:	af02      	add	r7, sp, #8
   1530e:	60f8      	str	r0, [r7, #12]
   15310:	60b9      	str	r1, [r7, #8]
   15312:	607a      	str	r2, [r7, #4]
	int8_t buffer[50];
	
	read_sensor_data();
   15314:	4b13      	ldr	r3, [pc, #76]	; (15364 <CLI_BME+0x5c>)
   15316:	4798      	blx	r3
	//float temp = getTemperature();
	float hum = getHumidity();
   15318:	4b13      	ldr	r3, [pc, #76]	; (15368 <CLI_BME+0x60>)
   1531a:	4798      	blx	r3
   1531c:	1c03      	adds	r3, r0, #0
   1531e:	64fb      	str	r3, [r7, #76]	; 0x4c
	float pressure = getPressure();
   15320:	4b12      	ldr	r3, [pc, #72]	; (1536c <CLI_BME+0x64>)
   15322:	4798      	blx	r3
   15324:	1c03      	adds	r3, r0, #0
   15326:	64bb      	str	r3, [r7, #72]	; 0x48
   snprintf(buffer, sizeof(buffer), "BME Sensor Data: %d %d %d\r\n", (int)getTemperature(), (int)hum, (int)pressure);
   15328:	4b11      	ldr	r3, [pc, #68]	; (15370 <CLI_BME+0x68>)
   1532a:	4798      	blx	r3
   1532c:	1c02      	adds	r2, r0, #0
   1532e:	4b11      	ldr	r3, [pc, #68]	; (15374 <CLI_BME+0x6c>)
   15330:	1c10      	adds	r0, r2, #0
   15332:	4798      	blx	r3
   15334:	0005      	movs	r5, r0
   15336:	4b0f      	ldr	r3, [pc, #60]	; (15374 <CLI_BME+0x6c>)
   15338:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   1533a:	4798      	blx	r3
   1533c:	0004      	movs	r4, r0
   1533e:	4b0d      	ldr	r3, [pc, #52]	; (15374 <CLI_BME+0x6c>)
   15340:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   15342:	4798      	blx	r3
   15344:	0003      	movs	r3, r0
   15346:	4a0c      	ldr	r2, [pc, #48]	; (15378 <CLI_BME+0x70>)
   15348:	2114      	movs	r1, #20
   1534a:	1878      	adds	r0, r7, r1
   1534c:	9301      	str	r3, [sp, #4]
   1534e:	9400      	str	r4, [sp, #0]
   15350:	002b      	movs	r3, r5
   15352:	2132      	movs	r1, #50	; 0x32
   15354:	4c09      	ldr	r4, [pc, #36]	; (1537c <CLI_BME+0x74>)
   15356:	47a0      	blx	r4
	return pdFALSE;
   15358:	2300      	movs	r3, #0
   1535a:	0018      	movs	r0, r3
   1535c:	46bd      	mov	sp, r7
   1535e:	b014      	add	sp, #80	; 0x50
   15360:	bdb0      	pop	{r4, r5, r7, pc}
   15362:	46c0      	nop			; (mov r8, r8)
   15364:	00014ad1 	.word	0x00014ad1
   15368:	00014bd1 	.word	0x00014bd1
   1536c:	00014be5 	.word	0x00014be5
   15370:	00014bbd 	.word	0x00014bbd
   15374:	00034fe9 	.word	0x00034fe9
   15378:	00038470 	.word	0x00038470
   1537c:	00036ef9 	.word	0x00036ef9

00015380 <vControlHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vControlHandlerTask(void *pvParameters)
{
   15380:	b580      	push	{r7, lr}
   15382:	b088      	sub	sp, #32
   15384:	af00      	add	r7, sp, #0
   15386:	6078      	str	r0, [r7, #4]
    SerialConsoleWriteString((char *)"ESE516 - Control Init Code\r\n");
   15388:	4b33      	ldr	r3, [pc, #204]	; (15458 <vControlHandlerTask+0xd8>)
   1538a:	0018      	movs	r0, r3
   1538c:	4b33      	ldr	r3, [pc, #204]	; (1545c <vControlHandlerTask+0xdc>)
   1538e:	4798      	blx	r3

    // Initialize Queues
    xQueueGameBufferIn = xQueueCreate(2, sizeof(struct GameDataPacket));
   15390:	2200      	movs	r2, #0
   15392:	2114      	movs	r1, #20
   15394:	2002      	movs	r0, #2
   15396:	4b32      	ldr	r3, [pc, #200]	; (15460 <vControlHandlerTask+0xe0>)
   15398:	4798      	blx	r3
   1539a:	0002      	movs	r2, r0
   1539c:	4b31      	ldr	r3, [pc, #196]	; (15464 <vControlHandlerTask+0xe4>)
   1539e:	601a      	str	r2, [r3, #0]
    xQueueRgbColorBuffer = xQueueCreate(2, sizeof(struct RgbColorPacket));
   153a0:	2200      	movs	r2, #0
   153a2:	2103      	movs	r1, #3
   153a4:	2002      	movs	r0, #2
   153a6:	4b2e      	ldr	r3, [pc, #184]	; (15460 <vControlHandlerTask+0xe0>)
   153a8:	4798      	blx	r3
   153aa:	0002      	movs	r2, r0
   153ac:	4b2e      	ldr	r3, [pc, #184]	; (15468 <vControlHandlerTask+0xe8>)
   153ae:	601a      	str	r2, [r3, #0]

    if (xQueueGameBufferIn == NULL || xQueueRgbColorBuffer == NULL) {
   153b0:	4b2c      	ldr	r3, [pc, #176]	; (15464 <vControlHandlerTask+0xe4>)
   153b2:	681b      	ldr	r3, [r3, #0]
   153b4:	2b00      	cmp	r3, #0
   153b6:	d003      	beq.n	153c0 <vControlHandlerTask+0x40>
   153b8:	4b2b      	ldr	r3, [pc, #172]	; (15468 <vControlHandlerTask+0xe8>)
   153ba:	681b      	ldr	r3, [r3, #0]
   153bc:	2b00      	cmp	r3, #0
   153be:	d103      	bne.n	153c8 <vControlHandlerTask+0x48>
        SerialConsoleWriteString((char *)"ERROR Initializing Control Data queues!\r\n");
   153c0:	4b2a      	ldr	r3, [pc, #168]	; (1546c <vControlHandlerTask+0xec>)
   153c2:	0018      	movs	r0, r3
   153c4:	4b25      	ldr	r3, [pc, #148]	; (1545c <vControlHandlerTask+0xdc>)
   153c6:	4798      	blx	r3
    }
    controlState = CONTROL_WAIT_FOR_GAME;  // Initial state
   153c8:	4b29      	ldr	r3, [pc, #164]	; (15470 <vControlHandlerTask+0xf0>)
   153ca:	2200      	movs	r2, #0
   153cc:	701a      	strb	r2, [r3, #0]

    while (1) {
        switch (controlState) {
   153ce:	4b28      	ldr	r3, [pc, #160]	; (15470 <vControlHandlerTask+0xf0>)
   153d0:	781b      	ldrb	r3, [r3, #0]
   153d2:	2b01      	cmp	r3, #1
   153d4:	d01d      	beq.n	15412 <vControlHandlerTask+0x92>
   153d6:	2b02      	cmp	r3, #2
   153d8:	d035      	beq.n	15446 <vControlHandlerTask+0xc6>
   153da:	2b00      	cmp	r3, #0
   153dc:	d12f      	bne.n	1543e <vControlHandlerTask+0xbe>
            case (CONTROL_WAIT_FOR_GAME): {  // Should set the UI to ignore button presses and should wait until there is a message from the server with a new play.
                struct GameDataPacket gamePacketIn;
                if (pdPASS == xQueueReceive(xQueueGameBufferIn, &gamePacketIn, 0)) {
   153de:	4b21      	ldr	r3, [pc, #132]	; (15464 <vControlHandlerTask+0xe4>)
   153e0:	681b      	ldr	r3, [r3, #0]
   153e2:	220c      	movs	r2, #12
   153e4:	18b9      	adds	r1, r7, r2
   153e6:	2200      	movs	r2, #0
   153e8:	0018      	movs	r0, r3
   153ea:	4b22      	ldr	r3, [pc, #136]	; (15474 <vControlHandlerTask+0xf4>)
   153ec:	4798      	blx	r3
   153ee:	0003      	movs	r3, r0
   153f0:	2b01      	cmp	r3, #1
   153f2:	d12a      	bne.n	1544a <vControlHandlerTask+0xca>
                    LogMessage(LOG_DEBUG_LVL, "Control Thread: Consumed game packet!\r\n");
   153f4:	4b20      	ldr	r3, [pc, #128]	; (15478 <vControlHandlerTask+0xf8>)
   153f6:	0019      	movs	r1, r3
   153f8:	2001      	movs	r0, #1
   153fa:	4b20      	ldr	r3, [pc, #128]	; (1547c <vControlHandlerTask+0xfc>)
   153fc:	4798      	blx	r3
                    UiOrderShowMoves(&gamePacketIn);
   153fe:	230c      	movs	r3, #12
   15400:	18fb      	adds	r3, r7, r3
   15402:	0018      	movs	r0, r3
   15404:	4b1e      	ldr	r3, [pc, #120]	; (15480 <vControlHandlerTask+0x100>)
   15406:	4798      	blx	r3
                    controlState = CONTROL_PLAYING_MOVE;
   15408:	4b19      	ldr	r3, [pc, #100]	; (15470 <vControlHandlerTask+0xf0>)
   1540a:	2201      	movs	r2, #1
   1540c:	701a      	strb	r2, [r3, #0]
                }

                break;
   1540e:	46c0      	nop			; (mov r8, r8)
   15410:	e01b      	b.n	1544a <vControlHandlerTask+0xca>
            }

            case (CONTROL_PLAYING_MOVE): {  // Should wait until the UI thread has showed the move AND comes back with the play from the user. Should go back to CONTROL_WAIT_FOR_GAME
                // after posting the game to MQTT
                if (UiPlayIsDone() == true) {
   15412:	4b1c      	ldr	r3, [pc, #112]	; (15484 <vControlHandlerTask+0x104>)
   15414:	4798      	blx	r3
   15416:	1e03      	subs	r3, r0, #0
   15418:	d019      	beq.n	1544e <vControlHandlerTask+0xce>
                    // Send back local game packet
                    if (pdTRUE != WifiAddGameDataToQueue(UiGetGamePacketOut())) {
   1541a:	4b1b      	ldr	r3, [pc, #108]	; (15488 <vControlHandlerTask+0x108>)
   1541c:	4798      	blx	r3
   1541e:	0003      	movs	r3, r0
   15420:	0018      	movs	r0, r3
   15422:	4b1a      	ldr	r3, [pc, #104]	; (1548c <vControlHandlerTask+0x10c>)
   15424:	4798      	blx	r3
   15426:	0003      	movs	r3, r0
   15428:	2b01      	cmp	r3, #1
   1542a:	d004      	beq.n	15436 <vControlHandlerTask+0xb6>
                        LogMessage(LOG_DEBUG_LVL, "Control Thread: Could not send game packet!\r\n");
   1542c:	4b18      	ldr	r3, [pc, #96]	; (15490 <vControlHandlerTask+0x110>)
   1542e:	0019      	movs	r1, r3
   15430:	2001      	movs	r0, #1
   15432:	4b12      	ldr	r3, [pc, #72]	; (1547c <vControlHandlerTask+0xfc>)
   15434:	4798      	blx	r3
                    }
                    controlState = CONTROL_WAIT_FOR_GAME;
   15436:	4b0e      	ldr	r3, [pc, #56]	; (15470 <vControlHandlerTask+0xf0>)
   15438:	2200      	movs	r2, #0
   1543a:	701a      	strb	r2, [r3, #0]
                }

                break;
   1543c:	e007      	b.n	1544e <vControlHandlerTask+0xce>
            case (CONTROL_END_GAME): {
                break;
            }

            default:
                controlState = CONTROL_WAIT_FOR_GAME;
   1543e:	4b0c      	ldr	r3, [pc, #48]	; (15470 <vControlHandlerTask+0xf0>)
   15440:	2200      	movs	r2, #0
   15442:	701a      	strb	r2, [r3, #0]
                break;
   15444:	e004      	b.n	15450 <vControlHandlerTask+0xd0>
                break;
   15446:	46c0      	nop			; (mov r8, r8)
   15448:	e002      	b.n	15450 <vControlHandlerTask+0xd0>
                break;
   1544a:	46c0      	nop			; (mov r8, r8)
   1544c:	e000      	b.n	15450 <vControlHandlerTask+0xd0>
                break;
   1544e:	46c0      	nop			; (mov r8, r8)
        }
        vTaskDelay(40);
   15450:	2028      	movs	r0, #40	; 0x28
   15452:	4b10      	ldr	r3, [pc, #64]	; (15494 <vControlHandlerTask+0x114>)
   15454:	4798      	blx	r3
        switch (controlState) {
   15456:	e7ba      	b.n	153ce <vControlHandlerTask+0x4e>
   15458:	0003850c 	.word	0x0003850c
   1545c:	0001fef5 	.word	0x0001fef5
   15460:	0001c595 	.word	0x0001c595
   15464:	20000480 	.word	0x20000480
   15468:	20000484 	.word	0x20000484
   1546c:	0003852c 	.word	0x0003852c
   15470:	20004470 	.word	0x20004470
   15474:	0001d0f5 	.word	0x0001d0f5
   15478:	00038558 	.word	0x00038558
   1547c:	0001ffe1 	.word	0x0001ffe1
   15480:	00017dd9 	.word	0x00017dd9
   15484:	00017e15 	.word	0x00017e15
   15488:	00017e29 	.word	0x00017e29
   1548c:	00019639 	.word	0x00019639
   15490:	00038580 	.word	0x00038580
   15494:	0001e2a1 	.word	0x0001e2a1

00015498 <ControlAddGameData>:
 * @return		Returns pdTrue if data can be added to queue, 0 if queue is full
 * @note

 */
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   15498:	b590      	push	{r4, r7, lr}
   1549a:	b085      	sub	sp, #20
   1549c:	af00      	add	r7, sp, #0
   1549e:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBufferIn, gameIn, (TickType_t)10);
   154a0:	4b06      	ldr	r3, [pc, #24]	; (154bc <ControlAddGameData+0x24>)
   154a2:	6818      	ldr	r0, [r3, #0]
   154a4:	6879      	ldr	r1, [r7, #4]
   154a6:	2300      	movs	r3, #0
   154a8:	220a      	movs	r2, #10
   154aa:	4c05      	ldr	r4, [pc, #20]	; (154c0 <ControlAddGameData+0x28>)
   154ac:	47a0      	blx	r4
   154ae:	0003      	movs	r3, r0
   154b0:	60fb      	str	r3, [r7, #12]
    return error;
   154b2:	68fb      	ldr	r3, [r7, #12]
}
   154b4:	0018      	movs	r0, r3
   154b6:	46bd      	mov	sp, r7
   154b8:	b005      	add	sp, #20
   154ba:	bd90      	pop	{r4, r7, pc}
   154bc:	20000480 	.word	0x20000480
   154c0:	0001c83d 	.word	0x0001c83d

000154c4 <system_interrupt_enable>:
{
   154c4:	b580      	push	{r7, lr}
   154c6:	b082      	sub	sp, #8
   154c8:	af00      	add	r7, sp, #0
   154ca:	0002      	movs	r2, r0
   154cc:	1dfb      	adds	r3, r7, #7
   154ce:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   154d0:	4b06      	ldr	r3, [pc, #24]	; (154ec <system_interrupt_enable+0x28>)
   154d2:	1dfa      	adds	r2, r7, #7
   154d4:	7812      	ldrb	r2, [r2, #0]
   154d6:	0011      	movs	r1, r2
   154d8:	221f      	movs	r2, #31
   154da:	400a      	ands	r2, r1
   154dc:	2101      	movs	r1, #1
   154de:	4091      	lsls	r1, r2
   154e0:	000a      	movs	r2, r1
   154e2:	601a      	str	r2, [r3, #0]
}
   154e4:	46c0      	nop			; (mov r8, r8)
   154e6:	46bd      	mov	sp, r7
   154e8:	b002      	add	sp, #8
   154ea:	bd80      	pop	{r7, pc}
   154ec:	e000e100 	.word	0xe000e100

000154f0 <i2c_master_is_syncing>:
{
   154f0:	b580      	push	{r7, lr}
   154f2:	b084      	sub	sp, #16
   154f4:	af00      	add	r7, sp, #0
   154f6:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   154f8:	687b      	ldr	r3, [r7, #4]
   154fa:	681b      	ldr	r3, [r3, #0]
   154fc:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   154fe:	68fb      	ldr	r3, [r7, #12]
   15500:	69db      	ldr	r3, [r3, #28]
   15502:	2207      	movs	r2, #7
   15504:	4013      	ands	r3, r2
   15506:	1e5a      	subs	r2, r3, #1
   15508:	4193      	sbcs	r3, r2
   1550a:	b2db      	uxtb	r3, r3
}
   1550c:	0018      	movs	r0, r3
   1550e:	46bd      	mov	sp, r7
   15510:	b004      	add	sp, #16
   15512:	bd80      	pop	{r7, pc}

00015514 <_i2c_master_wait_for_sync>:
{
   15514:	b580      	push	{r7, lr}
   15516:	b082      	sub	sp, #8
   15518:	af00      	add	r7, sp, #0
   1551a:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   1551c:	46c0      	nop			; (mov r8, r8)
   1551e:	687b      	ldr	r3, [r7, #4]
   15520:	0018      	movs	r0, r3
   15522:	4b04      	ldr	r3, [pc, #16]	; (15534 <_i2c_master_wait_for_sync+0x20>)
   15524:	4798      	blx	r3
   15526:	1e03      	subs	r3, r0, #0
   15528:	d1f9      	bne.n	1551e <_i2c_master_wait_for_sync+0xa>
}
   1552a:	46c0      	nop			; (mov r8, r8)
   1552c:	46bd      	mov	sp, r7
   1552e:	b002      	add	sp, #8
   15530:	bd80      	pop	{r7, pc}
   15532:	46c0      	nop			; (mov r8, r8)
   15534:	000154f1 	.word	0x000154f1

00015538 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   15538:	b580      	push	{r7, lr}
   1553a:	b082      	sub	sp, #8
   1553c:	af00      	add	r7, sp, #0
   1553e:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   15540:	687b      	ldr	r3, [r7, #4]
   15542:	2264      	movs	r2, #100	; 0x64
   15544:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   15546:	687b      	ldr	r3, [r7, #4]
   15548:	4a1b      	ldr	r2, [pc, #108]	; (155b8 <i2c_master_get_config_defaults+0x80>)
   1554a:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   1554c:	687b      	ldr	r3, [r7, #4]
   1554e:	2200      	movs	r2, #0
   15550:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   15552:	687b      	ldr	r3, [r7, #4]
   15554:	2200      	movs	r2, #0
   15556:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   15558:	687b      	ldr	r3, [r7, #4]
   1555a:	2200      	movs	r2, #0
   1555c:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   1555e:	687b      	ldr	r3, [r7, #4]
   15560:	2280      	movs	r2, #128	; 0x80
   15562:	0392      	lsls	r2, r2, #14
   15564:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   15566:	687b      	ldr	r3, [r7, #4]
   15568:	2201      	movs	r2, #1
   1556a:	4252      	negs	r2, r2
   1556c:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   1556e:	687b      	ldr	r3, [r7, #4]
   15570:	2201      	movs	r2, #1
   15572:	4252      	negs	r2, r2
   15574:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   15576:	687b      	ldr	r3, [r7, #4]
   15578:	2200      	movs	r2, #0
   1557a:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1557c:	687b      	ldr	r3, [r7, #4]
   1557e:	2200      	movs	r2, #0
   15580:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   15582:	687b      	ldr	r3, [r7, #4]
   15584:	2224      	movs	r2, #36	; 0x24
   15586:	2100      	movs	r1, #0
   15588:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   1558a:	687b      	ldr	r3, [r7, #4]
   1558c:	2200      	movs	r2, #0
   1558e:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   15590:	687b      	ldr	r3, [r7, #4]
   15592:	222c      	movs	r2, #44	; 0x2c
   15594:	2100      	movs	r1, #0
   15596:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   15598:	687b      	ldr	r3, [r7, #4]
   1559a:	222d      	movs	r2, #45	; 0x2d
   1559c:	2100      	movs	r1, #0
   1559e:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   155a0:	687b      	ldr	r3, [r7, #4]
   155a2:	222e      	movs	r2, #46	; 0x2e
   155a4:	2100      	movs	r1, #0
   155a6:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   155a8:	687b      	ldr	r3, [r7, #4]
   155aa:	22d7      	movs	r2, #215	; 0xd7
   155ac:	861a      	strh	r2, [r3, #48]	; 0x30
}
   155ae:	46c0      	nop			; (mov r8, r8)
   155b0:	46bd      	mov	sp, r7
   155b2:	b002      	add	sp, #8
   155b4:	bd80      	pop	{r7, pc}
   155b6:	46c0      	nop			; (mov r8, r8)
   155b8:	00000d48 	.word	0x00000d48

000155bc <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   155bc:	b580      	push	{r7, lr}
   155be:	b084      	sub	sp, #16
   155c0:	af00      	add	r7, sp, #0
   155c2:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   155c4:	687b      	ldr	r3, [r7, #4]
   155c6:	681b      	ldr	r3, [r3, #0]
   155c8:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   155ca:	2300      	movs	r3, #0
   155cc:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   155ce:	687b      	ldr	r3, [r7, #4]
   155d0:	0018      	movs	r0, r3
   155d2:	4b14      	ldr	r3, [pc, #80]	; (15624 <i2c_master_enable+0x68>)
   155d4:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   155d6:	68bb      	ldr	r3, [r7, #8]
   155d8:	681b      	ldr	r3, [r3, #0]
   155da:	2202      	movs	r2, #2
   155dc:	431a      	orrs	r2, r3
   155de:	68bb      	ldr	r3, [r7, #8]
   155e0:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   155e2:	687b      	ldr	r3, [r7, #4]
   155e4:	681b      	ldr	r3, [r3, #0]
   155e6:	0018      	movs	r0, r3
   155e8:	4b0f      	ldr	r3, [pc, #60]	; (15628 <i2c_master_enable+0x6c>)
   155ea:	4798      	blx	r3
   155ec:	0003      	movs	r3, r0
   155ee:	0018      	movs	r0, r3
   155f0:	4b0e      	ldr	r3, [pc, #56]	; (1562c <i2c_master_enable+0x70>)
   155f2:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   155f4:	e00c      	b.n	15610 <i2c_master_enable+0x54>
		timeout_counter++;
   155f6:	68fb      	ldr	r3, [r7, #12]
   155f8:	3301      	adds	r3, #1
   155fa:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   155fc:	687b      	ldr	r3, [r7, #4]
   155fe:	88db      	ldrh	r3, [r3, #6]
   15600:	001a      	movs	r2, r3
   15602:	68fb      	ldr	r3, [r7, #12]
   15604:	429a      	cmp	r2, r3
   15606:	d803      	bhi.n	15610 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   15608:	68bb      	ldr	r3, [r7, #8]
   1560a:	2210      	movs	r2, #16
   1560c:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   1560e:	e006      	b.n	1561e <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   15610:	68bb      	ldr	r3, [r7, #8]
   15612:	8b5b      	ldrh	r3, [r3, #26]
   15614:	b29b      	uxth	r3, r3
   15616:	001a      	movs	r2, r3
   15618:	2310      	movs	r3, #16
   1561a:	4013      	ands	r3, r2
   1561c:	d0eb      	beq.n	155f6 <i2c_master_enable+0x3a>
		}
	}
}
   1561e:	46bd      	mov	sp, r7
   15620:	b004      	add	sp, #16
   15622:	bd80      	pop	{r7, pc}
   15624:	00015515 	.word	0x00015515
   15628:	00029421 	.word	0x00029421
   1562c:	000154c5 	.word	0x000154c5

00015630 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   15630:	b580      	push	{r7, lr}
   15632:	b082      	sub	sp, #8
   15634:	af00      	add	r7, sp, #0
   15636:	6078      	str	r0, [r7, #4]
   15638:	000a      	movs	r2, r1
   1563a:	1cfb      	adds	r3, r7, #3
   1563c:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   1563e:	687b      	ldr	r3, [r7, #4]
   15640:	7e5b      	ldrb	r3, [r3, #25]
   15642:	b2db      	uxtb	r3, r3
   15644:	b25a      	sxtb	r2, r3
   15646:	1cfb      	adds	r3, r7, #3
   15648:	781b      	ldrb	r3, [r3, #0]
   1564a:	2101      	movs	r1, #1
   1564c:	4099      	lsls	r1, r3
   1564e:	000b      	movs	r3, r1
   15650:	b25b      	sxtb	r3, r3
   15652:	4313      	orrs	r3, r2
   15654:	b25b      	sxtb	r3, r3
   15656:	b2da      	uxtb	r2, r3
   15658:	687b      	ldr	r3, [r7, #4]
   1565a:	765a      	strb	r2, [r3, #25]
}
   1565c:	46c0      	nop			; (mov r8, r8)
   1565e:	46bd      	mov	sp, r7
   15660:	b002      	add	sp, #8
   15662:	bd80      	pop	{r7, pc}

00015664 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   15664:	b590      	push	{r4, r7, lr}
   15666:	b091      	sub	sp, #68	; 0x44
   15668:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   1566a:	2300      	movs	r3, #0
   1566c:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   1566e:	233a      	movs	r3, #58	; 0x3a
   15670:	18fb      	adds	r3, r7, r3
   15672:	2200      	movs	r2, #0
   15674:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   15676:	1d3b      	adds	r3, r7, #4
   15678:	0018      	movs	r0, r3
   1567a:	4b21      	ldr	r3, [pc, #132]	; (15700 <I2cDriverConfigureSensorBus+0x9c>)
   1567c:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
   1567e:	1d3b      	adds	r3, r7, #4
   15680:	4a20      	ldr	r2, [pc, #128]	; (15704 <I2cDriverConfigureSensorBus+0xa0>)
   15682:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
   15684:	1d3b      	adds	r3, r7, #4
   15686:	4a20      	ldr	r2, [pc, #128]	; (15708 <I2cDriverConfigureSensorBus+0xa4>)
   15688:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   1568a:	1d3b      	adds	r3, r7, #4
   1568c:	22fa      	movs	r2, #250	; 0xfa
   1568e:	0092      	lsls	r2, r2, #2
   15690:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   15692:	233b      	movs	r3, #59	; 0x3b
   15694:	18fb      	adds	r3, r7, r3
   15696:	2203      	movs	r2, #3
   15698:	701a      	strb	r2, [r3, #0]
   1569a:	e01e      	b.n	156da <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM2, &config_i2c_master);
   1569c:	233a      	movs	r3, #58	; 0x3a
   1569e:	18fc      	adds	r4, r7, r3
   156a0:	1d3a      	adds	r2, r7, #4
   156a2:	491a      	ldr	r1, [pc, #104]	; (1570c <I2cDriverConfigureSensorBus+0xa8>)
   156a4:	4b1a      	ldr	r3, [pc, #104]	; (15710 <I2cDriverConfigureSensorBus+0xac>)
   156a6:	0018      	movs	r0, r3
   156a8:	4b1a      	ldr	r3, [pc, #104]	; (15714 <I2cDriverConfigureSensorBus+0xb0>)
   156aa:	4798      	blx	r3
   156ac:	0003      	movs	r3, r0
   156ae:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   156b0:	233a      	movs	r3, #58	; 0x3a
   156b2:	18fb      	adds	r3, r7, r3
   156b4:	781b      	ldrb	r3, [r3, #0]
   156b6:	2b00      	cmp	r3, #0
   156b8:	d104      	bne.n	156c4 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   156ba:	233a      	movs	r3, #58	; 0x3a
   156bc:	18fb      	adds	r3, r7, r3
   156be:	781b      	ldrb	r3, [r3, #0]
   156c0:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   156c2:	e00f      	b.n	156e4 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   156c4:	4b12      	ldr	r3, [pc, #72]	; (15710 <I2cDriverConfigureSensorBus+0xac>)
   156c6:	0018      	movs	r0, r3
   156c8:	4b13      	ldr	r3, [pc, #76]	; (15718 <I2cDriverConfigureSensorBus+0xb4>)
   156ca:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   156cc:	233b      	movs	r3, #59	; 0x3b
   156ce:	18fb      	adds	r3, r7, r3
   156d0:	781a      	ldrb	r2, [r3, #0]
   156d2:	233b      	movs	r3, #59	; 0x3b
   156d4:	18fb      	adds	r3, r7, r3
   156d6:	3a01      	subs	r2, #1
   156d8:	701a      	strb	r2, [r3, #0]
   156da:	233b      	movs	r3, #59	; 0x3b
   156dc:	18fb      	adds	r3, r7, r3
   156de:	781b      	ldrb	r3, [r3, #0]
   156e0:	2b00      	cmp	r3, #0
   156e2:	d1db      	bne.n	1569c <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   156e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   156e6:	2b00      	cmp	r3, #0
   156e8:	d104      	bne.n	156f4 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   156ea:	4b09      	ldr	r3, [pc, #36]	; (15710 <I2cDriverConfigureSensorBus+0xac>)
   156ec:	0018      	movs	r0, r3
   156ee:	4b0b      	ldr	r3, [pc, #44]	; (1571c <I2cDriverConfigureSensorBus+0xb8>)
   156f0:	4798      	blx	r3
   156f2:	e000      	b.n	156f6 <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   156f4:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   156f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   156f8:	0018      	movs	r0, r3
   156fa:	46bd      	mov	sp, r7
   156fc:	b011      	add	sp, #68	; 0x44
   156fe:	bd90      	pop	{r4, r7, pc}
   15700:	00015539 	.word	0x00015539
   15704:	00080003 	.word	0x00080003
   15708:	00090003 	.word	0x00090003
   1570c:	42001000 	.word	0x42001000
   15710:	20004478 	.word	0x20004478
   15714:	00019c29 	.word	0x00019c29
   15718:	00019d5d 	.word	0x00019d5d
   1571c:	000155bd 	.word	0x000155bd

00015720 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   15720:	b580      	push	{r7, lr}
   15722:	b084      	sub	sp, #16
   15724:	af00      	add	r7, sp, #0
   15726:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   15728:	4b0e      	ldr	r3, [pc, #56]	; (15764 <I2cSensorsTxComplete+0x44>)
   1572a:	2200      	movs	r2, #0
   1572c:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   1572e:	4b0d      	ldr	r3, [pc, #52]	; (15764 <I2cSensorsTxComplete+0x44>)
   15730:	2201      	movs	r2, #1
   15732:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   15734:	2300      	movs	r3, #0
   15736:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   15738:	4b0b      	ldr	r3, [pc, #44]	; (15768 <I2cSensorsTxComplete+0x48>)
   1573a:	681b      	ldr	r3, [r3, #0]
   1573c:	220c      	movs	r2, #12
   1573e:	18ba      	adds	r2, r7, r2
   15740:	0011      	movs	r1, r2
   15742:	0018      	movs	r0, r3
   15744:	4b09      	ldr	r3, [pc, #36]	; (1576c <I2cSensorsTxComplete+0x4c>)
   15746:	4798      	blx	r3
    sensorTransmitError = false;
   15748:	4b09      	ldr	r3, [pc, #36]	; (15770 <I2cSensorsTxComplete+0x50>)
   1574a:	2200      	movs	r2, #0
   1574c:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   1574e:	68fb      	ldr	r3, [r7, #12]
   15750:	2b00      	cmp	r3, #0
   15752:	d003      	beq.n	1575c <I2cSensorsTxComplete+0x3c>
   15754:	4b07      	ldr	r3, [pc, #28]	; (15774 <I2cSensorsTxComplete+0x54>)
   15756:	2280      	movs	r2, #128	; 0x80
   15758:	0552      	lsls	r2, r2, #21
   1575a:	601a      	str	r2, [r3, #0]
}
   1575c:	46c0      	nop			; (mov r8, r8)
   1575e:	46bd      	mov	sp, r7
   15760:	b004      	add	sp, #16
   15762:	bd80      	pop	{r7, pc}
   15764:	2000048c 	.word	0x2000048c
   15768:	200044a0 	.word	0x200044a0
   1576c:	0001cec5 	.word	0x0001cec5
   15770:	20000488 	.word	0x20000488
   15774:	e000ed04 	.word	0xe000ed04

00015778 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   15778:	b580      	push	{r7, lr}
   1577a:	b084      	sub	sp, #16
   1577c:	af00      	add	r7, sp, #0
   1577e:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   15780:	4b0e      	ldr	r3, [pc, #56]	; (157bc <I2cSensorsRxComplete+0x44>)
   15782:	2200      	movs	r2, #0
   15784:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   15786:	4b0d      	ldr	r3, [pc, #52]	; (157bc <I2cSensorsRxComplete+0x44>)
   15788:	2201      	movs	r2, #1
   1578a:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   1578c:	2300      	movs	r3, #0
   1578e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   15790:	4b0b      	ldr	r3, [pc, #44]	; (157c0 <I2cSensorsRxComplete+0x48>)
   15792:	681b      	ldr	r3, [r3, #0]
   15794:	220c      	movs	r2, #12
   15796:	18ba      	adds	r2, r7, r2
   15798:	0011      	movs	r1, r2
   1579a:	0018      	movs	r0, r3
   1579c:	4b09      	ldr	r3, [pc, #36]	; (157c4 <I2cSensorsRxComplete+0x4c>)
   1579e:	4798      	blx	r3
    sensorTransmitError = false;
   157a0:	4b09      	ldr	r3, [pc, #36]	; (157c8 <I2cSensorsRxComplete+0x50>)
   157a2:	2200      	movs	r2, #0
   157a4:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   157a6:	68fb      	ldr	r3, [r7, #12]
   157a8:	2b00      	cmp	r3, #0
   157aa:	d003      	beq.n	157b4 <I2cSensorsRxComplete+0x3c>
   157ac:	4b07      	ldr	r3, [pc, #28]	; (157cc <I2cSensorsRxComplete+0x54>)
   157ae:	2280      	movs	r2, #128	; 0x80
   157b0:	0552      	lsls	r2, r2, #21
   157b2:	601a      	str	r2, [r3, #0]
}
   157b4:	46c0      	nop			; (mov r8, r8)
   157b6:	46bd      	mov	sp, r7
   157b8:	b004      	add	sp, #16
   157ba:	bd80      	pop	{r7, pc}
   157bc:	2000048c 	.word	0x2000048c
   157c0:	200044a0 	.word	0x200044a0
   157c4:	0001cec5 	.word	0x0001cec5
   157c8:	20000488 	.word	0x20000488
   157cc:	e000ed04 	.word	0xe000ed04

000157d0 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   157d0:	b580      	push	{r7, lr}
   157d2:	b084      	sub	sp, #16
   157d4:	af00      	add	r7, sp, #0
   157d6:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   157d8:	4b0e      	ldr	r3, [pc, #56]	; (15814 <I2cSensorsError+0x44>)
   157da:	2200      	movs	r2, #0
   157dc:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   157de:	4b0d      	ldr	r3, [pc, #52]	; (15814 <I2cSensorsError+0x44>)
   157e0:	2201      	movs	r2, #1
   157e2:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   157e4:	2300      	movs	r3, #0
   157e6:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   157e8:	4b0b      	ldr	r3, [pc, #44]	; (15818 <I2cSensorsError+0x48>)
   157ea:	681b      	ldr	r3, [r3, #0]
   157ec:	220c      	movs	r2, #12
   157ee:	18ba      	adds	r2, r7, r2
   157f0:	0011      	movs	r1, r2
   157f2:	0018      	movs	r0, r3
   157f4:	4b09      	ldr	r3, [pc, #36]	; (1581c <I2cSensorsError+0x4c>)
   157f6:	4798      	blx	r3
    sensorTransmitError = true;
   157f8:	4b09      	ldr	r3, [pc, #36]	; (15820 <I2cSensorsError+0x50>)
   157fa:	2201      	movs	r2, #1
   157fc:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   157fe:	68fb      	ldr	r3, [r7, #12]
   15800:	2b00      	cmp	r3, #0
   15802:	d003      	beq.n	1580c <I2cSensorsError+0x3c>
   15804:	4b07      	ldr	r3, [pc, #28]	; (15824 <I2cSensorsError+0x54>)
   15806:	2280      	movs	r2, #128	; 0x80
   15808:	0552      	lsls	r2, r2, #21
   1580a:	601a      	str	r2, [r3, #0]
}
   1580c:	46c0      	nop			; (mov r8, r8)
   1580e:	46bd      	mov	sp, r7
   15810:	b004      	add	sp, #16
   15812:	bd80      	pop	{r7, pc}
   15814:	2000048c 	.word	0x2000048c
   15818:	200044a0 	.word	0x200044a0
   1581c:	0001cec5 	.word	0x0001cec5
   15820:	20000488 	.word	0x20000488
   15824:	e000ed04 	.word	0xe000ed04

00015828 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   15828:	b580      	push	{r7, lr}
   1582a:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   1582c:	4911      	ldr	r1, [pc, #68]	; (15874 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   1582e:	4b12      	ldr	r3, [pc, #72]	; (15878 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15830:	2200      	movs	r2, #0
   15832:	0018      	movs	r0, r3
   15834:	4b11      	ldr	r3, [pc, #68]	; (1587c <I2cDriverRegisterSensorBusCallbacks+0x54>)
   15836:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   15838:	4b0f      	ldr	r3, [pc, #60]	; (15878 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1583a:	2100      	movs	r1, #0
   1583c:	0018      	movs	r0, r3
   1583e:	4b10      	ldr	r3, [pc, #64]	; (15880 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   15840:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   15842:	4910      	ldr	r1, [pc, #64]	; (15884 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   15844:	4b0c      	ldr	r3, [pc, #48]	; (15878 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15846:	2201      	movs	r2, #1
   15848:	0018      	movs	r0, r3
   1584a:	4b0c      	ldr	r3, [pc, #48]	; (1587c <I2cDriverRegisterSensorBusCallbacks+0x54>)
   1584c:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   1584e:	4b0a      	ldr	r3, [pc, #40]	; (15878 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15850:	2101      	movs	r1, #1
   15852:	0018      	movs	r0, r3
   15854:	4b0a      	ldr	r3, [pc, #40]	; (15880 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   15856:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   15858:	490b      	ldr	r1, [pc, #44]	; (15888 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   1585a:	4b07      	ldr	r3, [pc, #28]	; (15878 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1585c:	2202      	movs	r2, #2
   1585e:	0018      	movs	r0, r3
   15860:	4b06      	ldr	r3, [pc, #24]	; (1587c <I2cDriverRegisterSensorBusCallbacks+0x54>)
   15862:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   15864:	4b04      	ldr	r3, [pc, #16]	; (15878 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15866:	2102      	movs	r1, #2
   15868:	0018      	movs	r0, r3
   1586a:	4b05      	ldr	r3, [pc, #20]	; (15880 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   1586c:	4798      	blx	r3
}
   1586e:	46c0      	nop			; (mov r8, r8)
   15870:	46bd      	mov	sp, r7
   15872:	bd80      	pop	{r7, pc}
   15874:	00015721 	.word	0x00015721
   15878:	20004478 	.word	0x20004478
   1587c:	00012909 	.word	0x00012909
   15880:	00015631 	.word	0x00015631
   15884:	00015779 	.word	0x00015779
   15888:	000157d1 	.word	0x000157d1

0001588c <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   1588c:	b580      	push	{r7, lr}
   1588e:	b082      	sub	sp, #8
   15890:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   15892:	2300      	movs	r3, #0
   15894:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   15896:	4b14      	ldr	r3, [pc, #80]	; (158e8 <I2cInitializeDriver+0x5c>)
   15898:	4798      	blx	r3
   1589a:	0003      	movs	r3, r0
   1589c:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   1589e:	687b      	ldr	r3, [r7, #4]
   158a0:	2b00      	cmp	r3, #0
   158a2:	d11a      	bne.n	158da <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   158a4:	4b11      	ldr	r3, [pc, #68]	; (158ec <I2cInitializeDriver+0x60>)
   158a6:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   158a8:	2001      	movs	r0, #1
   158aa:	4b11      	ldr	r3, [pc, #68]	; (158f0 <I2cInitializeDriver+0x64>)
   158ac:	4798      	blx	r3
   158ae:	0002      	movs	r2, r0
   158b0:	4b10      	ldr	r3, [pc, #64]	; (158f4 <I2cInitializeDriver+0x68>)
   158b2:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   158b4:	2203      	movs	r2, #3
   158b6:	2100      	movs	r1, #0
   158b8:	2001      	movs	r0, #1
   158ba:	4b0f      	ldr	r3, [pc, #60]	; (158f8 <I2cInitializeDriver+0x6c>)
   158bc:	4798      	blx	r3
   158be:	0002      	movs	r2, r0
   158c0:	4b0e      	ldr	r3, [pc, #56]	; (158fc <I2cInitializeDriver+0x70>)
   158c2:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   158c4:	4b0b      	ldr	r3, [pc, #44]	; (158f4 <I2cInitializeDriver+0x68>)
   158c6:	681b      	ldr	r3, [r3, #0]
   158c8:	2b00      	cmp	r3, #0
   158ca:	d003      	beq.n	158d4 <I2cInitializeDriver+0x48>
   158cc:	4b0b      	ldr	r3, [pc, #44]	; (158fc <I2cInitializeDriver+0x70>)
   158ce:	681b      	ldr	r3, [r3, #0]
   158d0:	2b00      	cmp	r3, #0
   158d2:	d103      	bne.n	158dc <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   158d4:	2306      	movs	r3, #6
   158d6:	607b      	str	r3, [r7, #4]
        goto exit;
   158d8:	e000      	b.n	158dc <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   158da:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   158dc:	687b      	ldr	r3, [r7, #4]
}
   158de:	0018      	movs	r0, r3
   158e0:	46bd      	mov	sp, r7
   158e2:	b002      	add	sp, #8
   158e4:	bd80      	pop	{r7, pc}
   158e6:	46c0      	nop			; (mov r8, r8)
   158e8:	00015665 	.word	0x00015665
   158ec:	00015829 	.word	0x00015829
   158f0:	0001c7fd 	.word	0x0001c7fd
   158f4:	20004474 	.word	0x20004474
   158f8:	0001c595 	.word	0x0001c595
   158fc:	200044a0 	.word	0x200044a0

00015900 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   15900:	b590      	push	{r4, r7, lr}
   15902:	b085      	sub	sp, #20
   15904:	af00      	add	r7, sp, #0
   15906:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   15908:	2300      	movs	r3, #0
   1590a:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   1590c:	687b      	ldr	r3, [r7, #4]
   1590e:	2b00      	cmp	r3, #0
   15910:	d003      	beq.n	1591a <I2cWriteData+0x1a>
   15912:	687b      	ldr	r3, [r7, #4]
   15914:	685b      	ldr	r3, [r3, #4]
   15916:	2b00      	cmp	r3, #0
   15918:	d103      	bne.n	15922 <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   1591a:	2308      	movs	r3, #8
   1591c:	425b      	negs	r3, r3
   1591e:	60fb      	str	r3, [r7, #12]
        goto exit;
   15920:	e01f      	b.n	15962 <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   15922:	687b      	ldr	r3, [r7, #4]
   15924:	781b      	ldrb	r3, [r3, #0]
   15926:	b29a      	uxth	r2, r3
   15928:	4b10      	ldr	r3, [pc, #64]	; (1596c <I2cWriteData+0x6c>)
   1592a:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   1592c:	687b      	ldr	r3, [r7, #4]
   1592e:	685a      	ldr	r2, [r3, #4]
   15930:	4b0e      	ldr	r3, [pc, #56]	; (1596c <I2cWriteData+0x6c>)
   15932:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   15934:	687b      	ldr	r3, [r7, #4]
   15936:	89da      	ldrh	r2, [r3, #14]
   15938:	4b0c      	ldr	r3, [pc, #48]	; (1596c <I2cWriteData+0x6c>)
   1593a:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   1593c:	230b      	movs	r3, #11
   1593e:	18fc      	adds	r4, r7, r3
   15940:	4a0a      	ldr	r2, [pc, #40]	; (1596c <I2cWriteData+0x6c>)
   15942:	4b0b      	ldr	r3, [pc, #44]	; (15970 <I2cWriteData+0x70>)
   15944:	0011      	movs	r1, r2
   15946:	0018      	movs	r0, r3
   15948:	4b0a      	ldr	r3, [pc, #40]	; (15974 <I2cWriteData+0x74>)
   1594a:	4798      	blx	r3
   1594c:	0003      	movs	r3, r0
   1594e:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   15950:	230b      	movs	r3, #11
   15952:	18fb      	adds	r3, r7, r3
   15954:	781b      	ldrb	r3, [r3, #0]
   15956:	2b00      	cmp	r3, #0
   15958:	d003      	beq.n	15962 <I2cWriteData+0x62>
        error = ERROR_IO;
   1595a:	2306      	movs	r3, #6
   1595c:	425b      	negs	r3, r3
   1595e:	60fb      	str	r3, [r7, #12]
        goto exit;
   15960:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   15962:	68fb      	ldr	r3, [r7, #12]
}
   15964:	0018      	movs	r0, r3
   15966:	46bd      	mov	sp, r7
   15968:	b005      	add	sp, #20
   1596a:	bd90      	pop	{r4, r7, pc}
   1596c:	200044a4 	.word	0x200044a4
   15970:	20004478 	.word	0x20004478
   15974:	00012b8d 	.word	0x00012b8d

00015978 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   15978:	b590      	push	{r4, r7, lr}
   1597a:	b085      	sub	sp, #20
   1597c:	af00      	add	r7, sp, #0
   1597e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   15980:	2300      	movs	r3, #0
   15982:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   15984:	687b      	ldr	r3, [r7, #4]
   15986:	2b00      	cmp	r3, #0
   15988:	d003      	beq.n	15992 <I2cReadData+0x1a>
   1598a:	687b      	ldr	r3, [r7, #4]
   1598c:	685b      	ldr	r3, [r3, #4]
   1598e:	2b00      	cmp	r3, #0
   15990:	d103      	bne.n	1599a <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   15992:	2308      	movs	r3, #8
   15994:	425b      	negs	r3, r3
   15996:	60fb      	str	r3, [r7, #12]
        goto exit;
   15998:	e01f      	b.n	159da <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   1599a:	687b      	ldr	r3, [r7, #4]
   1599c:	781b      	ldrb	r3, [r3, #0]
   1599e:	b29a      	uxth	r2, r3
   159a0:	4b10      	ldr	r3, [pc, #64]	; (159e4 <I2cReadData+0x6c>)
   159a2:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   159a4:	687b      	ldr	r3, [r7, #4]
   159a6:	689a      	ldr	r2, [r3, #8]
   159a8:	4b0e      	ldr	r3, [pc, #56]	; (159e4 <I2cReadData+0x6c>)
   159aa:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   159ac:	687b      	ldr	r3, [r7, #4]
   159ae:	899a      	ldrh	r2, [r3, #12]
   159b0:	4b0c      	ldr	r3, [pc, #48]	; (159e4 <I2cReadData+0x6c>)
   159b2:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   159b4:	230b      	movs	r3, #11
   159b6:	18fc      	adds	r4, r7, r3
   159b8:	4a0a      	ldr	r2, [pc, #40]	; (159e4 <I2cReadData+0x6c>)
   159ba:	4b0b      	ldr	r3, [pc, #44]	; (159e8 <I2cReadData+0x70>)
   159bc:	0011      	movs	r1, r2
   159be:	0018      	movs	r0, r3
   159c0:	4b0a      	ldr	r3, [pc, #40]	; (159ec <I2cReadData+0x74>)
   159c2:	4798      	blx	r3
   159c4:	0003      	movs	r3, r0
   159c6:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   159c8:	230b      	movs	r3, #11
   159ca:	18fb      	adds	r3, r7, r3
   159cc:	781b      	ldrb	r3, [r3, #0]
   159ce:	2b00      	cmp	r3, #0
   159d0:	d003      	beq.n	159da <I2cReadData+0x62>
        error = ERROR_IO;
   159d2:	2306      	movs	r3, #6
   159d4:	425b      	negs	r3, r3
   159d6:	60fb      	str	r3, [r7, #12]
        goto exit;
   159d8:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   159da:	68fb      	ldr	r3, [r7, #12]
}
   159dc:	0018      	movs	r0, r3
   159de:	46bd      	mov	sp, r7
   159e0:	b005      	add	sp, #20
   159e2:	bd90      	pop	{r4, r7, pc}
   159e4:	200044a4 	.word	0x200044a4
   159e8:	20004478 	.word	0x20004478
   159ec:	00012aa9 	.word	0x00012aa9

000159f0 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   159f0:	b590      	push	{r4, r7, lr}
   159f2:	b083      	sub	sp, #12
   159f4:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   159f6:	2300      	movs	r3, #0
   159f8:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   159fa:	4b09      	ldr	r3, [pc, #36]	; (15a20 <I2cFreeMutex+0x30>)
   159fc:	6818      	ldr	r0, [r3, #0]
   159fe:	2300      	movs	r3, #0
   15a00:	2200      	movs	r2, #0
   15a02:	2100      	movs	r1, #0
   15a04:	4c07      	ldr	r4, [pc, #28]	; (15a24 <I2cFreeMutex+0x34>)
   15a06:	47a0      	blx	r4
   15a08:	0003      	movs	r3, r0
   15a0a:	2b01      	cmp	r3, #1
   15a0c:	d002      	beq.n	15a14 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   15a0e:	2314      	movs	r3, #20
   15a10:	425b      	negs	r3, r3
   15a12:	607b      	str	r3, [r7, #4]
    }
    return error;
   15a14:	687b      	ldr	r3, [r7, #4]
}
   15a16:	0018      	movs	r0, r3
   15a18:	46bd      	mov	sp, r7
   15a1a:	b003      	add	sp, #12
   15a1c:	bd90      	pop	{r4, r7, pc}
   15a1e:	46c0      	nop			; (mov r8, r8)
   15a20:	20004474 	.word	0x20004474
   15a24:	0001c83d 	.word	0x0001c83d

00015a28 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   15a28:	b580      	push	{r7, lr}
   15a2a:	b084      	sub	sp, #16
   15a2c:	af00      	add	r7, sp, #0
   15a2e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   15a30:	2300      	movs	r3, #0
   15a32:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   15a34:	4b08      	ldr	r3, [pc, #32]	; (15a58 <I2cGetMutex+0x30>)
   15a36:	681b      	ldr	r3, [r3, #0]
   15a38:	687a      	ldr	r2, [r7, #4]
   15a3a:	0011      	movs	r1, r2
   15a3c:	0018      	movs	r0, r3
   15a3e:	4b07      	ldr	r3, [pc, #28]	; (15a5c <I2cGetMutex+0x34>)
   15a40:	4798      	blx	r3
   15a42:	0003      	movs	r3, r0
   15a44:	2b01      	cmp	r3, #1
   15a46:	d002      	beq.n	15a4e <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   15a48:	231d      	movs	r3, #29
   15a4a:	425b      	negs	r3, r3
   15a4c:	60fb      	str	r3, [r7, #12]
    }
    return error;
   15a4e:	68fb      	ldr	r3, [r7, #12]
}
   15a50:	0018      	movs	r0, r3
   15a52:	46bd      	mov	sp, r7
   15a54:	b004      	add	sp, #16
   15a56:	bd80      	pop	{r7, pc}
   15a58:	20004474 	.word	0x20004474
   15a5c:	0001d54d 	.word	0x0001d54d

00015a60 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   15a60:	b580      	push	{r7, lr}
   15a62:	b084      	sub	sp, #16
   15a64:	af00      	add	r7, sp, #0
   15a66:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   15a68:	2300      	movs	r3, #0
   15a6a:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   15a6c:	4b04      	ldr	r3, [pc, #16]	; (15a80 <I2cGetSemaphoreHandle+0x20>)
   15a6e:	681a      	ldr	r2, [r3, #0]
   15a70:	687b      	ldr	r3, [r7, #4]
   15a72:	601a      	str	r2, [r3, #0]
    return error;
   15a74:	68fb      	ldr	r3, [r7, #12]
}
   15a76:	0018      	movs	r0, r3
   15a78:	46bd      	mov	sp, r7
   15a7a:	b004      	add	sp, #16
   15a7c:	bd80      	pop	{r7, pc}
   15a7e:	46c0      	nop			; (mov r8, r8)
   15a80:	200044a0 	.word	0x200044a0

00015a84 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   15a84:	b580      	push	{r7, lr}
   15a86:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   15a88:	4b02      	ldr	r3, [pc, #8]	; (15a94 <I2cGetTaskErrorStatus+0x10>)
   15a8a:	781b      	ldrb	r3, [r3, #0]
}
   15a8c:	0018      	movs	r0, r3
   15a8e:	46bd      	mov	sp, r7
   15a90:	bd80      	pop	{r7, pc}
   15a92:	46c0      	nop			; (mov r8, r8)
   15a94:	20000488 	.word	0x20000488

00015a98 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   15a98:	b580      	push	{r7, lr}
   15a9a:	b082      	sub	sp, #8
   15a9c:	af00      	add	r7, sp, #0
   15a9e:	0002      	movs	r2, r0
   15aa0:	1dfb      	adds	r3, r7, #7
   15aa2:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   15aa4:	4b03      	ldr	r3, [pc, #12]	; (15ab4 <I2cSetTaskErrorStatus+0x1c>)
   15aa6:	1dfa      	adds	r2, r7, #7
   15aa8:	7812      	ldrb	r2, [r2, #0]
   15aaa:	701a      	strb	r2, [r3, #0]
}
   15aac:	46c0      	nop			; (mov r8, r8)
   15aae:	46bd      	mov	sp, r7
   15ab0:	b002      	add	sp, #8
   15ab2:	bd80      	pop	{r7, pc}
   15ab4:	20000488 	.word	0x20000488

00015ab8 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   15ab8:	b580      	push	{r7, lr}
   15aba:	b084      	sub	sp, #16
   15abc:	af00      	add	r7, sp, #0
   15abe:	6078      	str	r0, [r7, #4]
   15ac0:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   15ac2:	2300      	movs	r3, #0
   15ac4:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   15ac6:	2300      	movs	r3, #0
   15ac8:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   15aca:	2396      	movs	r3, #150	; 0x96
   15acc:	005b      	lsls	r3, r3, #1
   15ace:	0018      	movs	r0, r3
   15ad0:	4b28      	ldr	r3, [pc, #160]	; (15b74 <I2cWriteDataWait+0xbc>)
   15ad2:	4798      	blx	r3
   15ad4:	0003      	movs	r3, r0
   15ad6:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   15ad8:	68fb      	ldr	r3, [r7, #12]
   15ada:	2b00      	cmp	r3, #0
   15adc:	d138      	bne.n	15b50 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   15ade:	2308      	movs	r3, #8
   15ae0:	18fb      	adds	r3, r7, r3
   15ae2:	0018      	movs	r0, r3
   15ae4:	4b24      	ldr	r3, [pc, #144]	; (15b78 <I2cWriteDataWait+0xc0>)
   15ae6:	4798      	blx	r3
   15ae8:	0003      	movs	r3, r0
   15aea:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   15aec:	68fb      	ldr	r3, [r7, #12]
   15aee:	2b00      	cmp	r3, #0
   15af0:	d130      	bne.n	15b54 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   15af2:	687b      	ldr	r3, [r7, #4]
   15af4:	0018      	movs	r0, r3
   15af6:	4b21      	ldr	r3, [pc, #132]	; (15b7c <I2cWriteDataWait+0xc4>)
   15af8:	4798      	blx	r3
   15afa:	0003      	movs	r3, r0
   15afc:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   15afe:	68fb      	ldr	r3, [r7, #12]
   15b00:	2b00      	cmp	r3, #0
   15b02:	d12a      	bne.n	15b5a <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   15b04:	68bb      	ldr	r3, [r7, #8]
   15b06:	683a      	ldr	r2, [r7, #0]
   15b08:	0011      	movs	r1, r2
   15b0a:	0018      	movs	r0, r3
   15b0c:	4b1c      	ldr	r3, [pc, #112]	; (15b80 <I2cWriteDataWait+0xc8>)
   15b0e:	4798      	blx	r3
   15b10:	0003      	movs	r3, r0
   15b12:	2b01      	cmp	r3, #1
   15b14:	d111      	bne.n	15b3a <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   15b16:	4b1b      	ldr	r3, [pc, #108]	; (15b84 <I2cWriteDataWait+0xcc>)
   15b18:	4798      	blx	r3
   15b1a:	1e03      	subs	r3, r0, #0
   15b1c:	d011      	beq.n	15b42 <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   15b1e:	2000      	movs	r0, #0
   15b20:	4b19      	ldr	r3, [pc, #100]	; (15b88 <I2cWriteDataWait+0xd0>)
   15b22:	4798      	blx	r3
            if (error != ERROR_NONE) {
   15b24:	68fb      	ldr	r3, [r7, #12]
   15b26:	2b00      	cmp	r3, #0
   15b28:	d003      	beq.n	15b32 <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   15b2a:	2321      	movs	r3, #33	; 0x21
   15b2c:	425b      	negs	r3, r3
   15b2e:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   15b30:	e014      	b.n	15b5c <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   15b32:	2303      	movs	r3, #3
   15b34:	425b      	negs	r3, r3
   15b36:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   15b38:	e010      	b.n	15b5c <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   15b3a:	2303      	movs	r3, #3
   15b3c:	425b      	negs	r3, r3
   15b3e:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   15b40:	e00c      	b.n	15b5c <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   15b42:	4b12      	ldr	r3, [pc, #72]	; (15b8c <I2cWriteDataWait+0xd4>)
   15b44:	4798      	blx	r3
   15b46:	0002      	movs	r2, r0
   15b48:	68fb      	ldr	r3, [r7, #12]
   15b4a:	4313      	orrs	r3, r2
   15b4c:	60fb      	str	r3, [r7, #12]
   15b4e:	e002      	b.n	15b56 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   15b50:	46c0      	nop			; (mov r8, r8)
   15b52:	e000      	b.n	15b56 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   15b54:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   15b56:	68fb      	ldr	r3, [r7, #12]
   15b58:	e007      	b.n	15b6a <I2cWriteDataWait+0xb2>
        goto exitError0;
   15b5a:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   15b5c:	4b0b      	ldr	r3, [pc, #44]	; (15b8c <I2cWriteDataWait+0xd4>)
   15b5e:	4798      	blx	r3
   15b60:	0002      	movs	r2, r0
   15b62:	68fb      	ldr	r3, [r7, #12]
   15b64:	4313      	orrs	r3, r2
   15b66:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   15b68:	68fb      	ldr	r3, [r7, #12]
}
   15b6a:	0018      	movs	r0, r3
   15b6c:	46bd      	mov	sp, r7
   15b6e:	b004      	add	sp, #16
   15b70:	bd80      	pop	{r7, pc}
   15b72:	46c0      	nop			; (mov r8, r8)
   15b74:	00015a29 	.word	0x00015a29
   15b78:	00015a61 	.word	0x00015a61
   15b7c:	00015901 	.word	0x00015901
   15b80:	0001d54d 	.word	0x0001d54d
   15b84:	00015a85 	.word	0x00015a85
   15b88:	00015a99 	.word	0x00015a99
   15b8c:	000159f1 	.word	0x000159f1

00015b90 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   15b90:	b580      	push	{r7, lr}
   15b92:	b086      	sub	sp, #24
   15b94:	af00      	add	r7, sp, #0
   15b96:	60f8      	str	r0, [r7, #12]
   15b98:	60b9      	str	r1, [r7, #8]
   15b9a:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   15b9c:	2300      	movs	r3, #0
   15b9e:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   15ba0:	2300      	movs	r3, #0
   15ba2:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   15ba4:	2396      	movs	r3, #150	; 0x96
   15ba6:	005b      	lsls	r3, r3, #1
   15ba8:	0018      	movs	r0, r3
   15baa:	4b35      	ldr	r3, [pc, #212]	; (15c80 <I2cReadDataWait+0xf0>)
   15bac:	4798      	blx	r3
   15bae:	0003      	movs	r3, r0
   15bb0:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   15bb2:	697b      	ldr	r3, [r7, #20]
   15bb4:	2b00      	cmp	r3, #0
   15bb6:	d155      	bne.n	15c64 <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   15bb8:	2310      	movs	r3, #16
   15bba:	18fb      	adds	r3, r7, r3
   15bbc:	0018      	movs	r0, r3
   15bbe:	4b31      	ldr	r3, [pc, #196]	; (15c84 <I2cReadDataWait+0xf4>)
   15bc0:	4798      	blx	r3
   15bc2:	0003      	movs	r3, r0
   15bc4:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   15bc6:	697b      	ldr	r3, [r7, #20]
   15bc8:	2b00      	cmp	r3, #0
   15bca:	d14d      	bne.n	15c68 <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   15bcc:	68fb      	ldr	r3, [r7, #12]
   15bce:	0018      	movs	r0, r3
   15bd0:	4b2d      	ldr	r3, [pc, #180]	; (15c88 <I2cReadDataWait+0xf8>)
   15bd2:	4798      	blx	r3
   15bd4:	0003      	movs	r3, r0
   15bd6:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   15bd8:	697b      	ldr	r3, [r7, #20]
   15bda:	2b00      	cmp	r3, #0
   15bdc:	d147      	bne.n	15c6e <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   15bde:	693b      	ldr	r3, [r7, #16]
   15be0:	687a      	ldr	r2, [r7, #4]
   15be2:	0011      	movs	r1, r2
   15be4:	0018      	movs	r0, r3
   15be6:	4b29      	ldr	r3, [pc, #164]	; (15c8c <I2cReadDataWait+0xfc>)
   15be8:	4798      	blx	r3
   15bea:	0003      	movs	r3, r0
   15bec:	2b01      	cmp	r3, #1
   15bee:	d118      	bne.n	15c22 <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   15bf0:	4b27      	ldr	r3, [pc, #156]	; (15c90 <I2cReadDataWait+0x100>)
   15bf2:	4798      	blx	r3
   15bf4:	1e03      	subs	r3, r0, #0
   15bf6:	d006      	beq.n	15c06 <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   15bf8:	2000      	movs	r0, #0
   15bfa:	4b26      	ldr	r3, [pc, #152]	; (15c94 <I2cReadDataWait+0x104>)
   15bfc:	4798      	blx	r3
            error = ERROR_ABORTED;
   15bfe:	2303      	movs	r3, #3
   15c00:	425b      	negs	r3, r3
   15c02:	617b      	str	r3, [r7, #20]
            goto exitError0;
   15c04:	e034      	b.n	15c70 <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   15c06:	68bb      	ldr	r3, [r7, #8]
   15c08:	0018      	movs	r0, r3
   15c0a:	4b23      	ldr	r3, [pc, #140]	; (15c98 <I2cReadDataWait+0x108>)
   15c0c:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   15c0e:	68fb      	ldr	r3, [r7, #12]
   15c10:	0018      	movs	r0, r3
   15c12:	4b22      	ldr	r3, [pc, #136]	; (15c9c <I2cReadDataWait+0x10c>)
   15c14:	4798      	blx	r3
   15c16:	0003      	movs	r3, r0
   15c18:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   15c1a:	697b      	ldr	r3, [r7, #20]
   15c1c:	2b00      	cmp	r3, #0
   15c1e:	d004      	beq.n	15c2a <I2cReadDataWait+0x9a>
        goto exitError0;
   15c20:	e026      	b.n	15c70 <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   15c22:	2303      	movs	r3, #3
   15c24:	425b      	negs	r3, r3
   15c26:	617b      	str	r3, [r7, #20]
        goto exitError0;
   15c28:	e022      	b.n	15c70 <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   15c2a:	693b      	ldr	r3, [r7, #16]
   15c2c:	687a      	ldr	r2, [r7, #4]
   15c2e:	0011      	movs	r1, r2
   15c30:	0018      	movs	r0, r3
   15c32:	4b16      	ldr	r3, [pc, #88]	; (15c8c <I2cReadDataWait+0xfc>)
   15c34:	4798      	blx	r3
   15c36:	0003      	movs	r3, r0
   15c38:	2b01      	cmp	r3, #1
   15c3a:	d10a      	bne.n	15c52 <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   15c3c:	4b14      	ldr	r3, [pc, #80]	; (15c90 <I2cReadDataWait+0x100>)
   15c3e:	4798      	blx	r3
   15c40:	1e03      	subs	r3, r0, #0
   15c42:	d00a      	beq.n	15c5a <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   15c44:	2000      	movs	r0, #0
   15c46:	4b13      	ldr	r3, [pc, #76]	; (15c94 <I2cReadDataWait+0x104>)
   15c48:	4798      	blx	r3
            error = ERROR_ABORTED;
   15c4a:	2303      	movs	r3, #3
   15c4c:	425b      	negs	r3, r3
   15c4e:	617b      	str	r3, [r7, #20]
            goto exitError0;
   15c50:	e00e      	b.n	15c70 <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   15c52:	2303      	movs	r3, #3
   15c54:	425b      	negs	r3, r3
   15c56:	617b      	str	r3, [r7, #20]
        goto exitError0;
   15c58:	e00a      	b.n	15c70 <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   15c5a:	4b11      	ldr	r3, [pc, #68]	; (15ca0 <I2cReadDataWait+0x110>)
   15c5c:	4798      	blx	r3
   15c5e:	0003      	movs	r3, r0
   15c60:	617b      	str	r3, [r7, #20]
   15c62:	e002      	b.n	15c6a <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   15c64:	46c0      	nop			; (mov r8, r8)
   15c66:	e000      	b.n	15c6a <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   15c68:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   15c6a:	697b      	ldr	r3, [r7, #20]
   15c6c:	e003      	b.n	15c76 <I2cReadDataWait+0xe6>
        goto exitError0;
   15c6e:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   15c70:	4b0b      	ldr	r3, [pc, #44]	; (15ca0 <I2cReadDataWait+0x110>)
   15c72:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   15c74:	697b      	ldr	r3, [r7, #20]
}
   15c76:	0018      	movs	r0, r3
   15c78:	46bd      	mov	sp, r7
   15c7a:	b006      	add	sp, #24
   15c7c:	bd80      	pop	{r7, pc}
   15c7e:	46c0      	nop			; (mov r8, r8)
   15c80:	00015a29 	.word	0x00015a29
   15c84:	00015a61 	.word	0x00015a61
   15c88:	00015901 	.word	0x00015901
   15c8c:	0001d54d 	.word	0x0001d54d
   15c90:	00015a85 	.word	0x00015a85
   15c94:	00015a99 	.word	0x00015a99
   15c98:	0001e2a1 	.word	0x0001e2a1
   15c9c:	00015979 	.word	0x00015979
   15ca0:	000159f1 	.word	0x000159f1

00015ca4 <I2cPingAddressWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cPingAddressWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   15ca4:	b580      	push	{r7, lr}
   15ca6:	b086      	sub	sp, #24
   15ca8:	af00      	add	r7, sp, #0
   15caa:	60f8      	str	r0, [r7, #12]
   15cac:	60b9      	str	r1, [r7, #8]
   15cae:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   15cb0:	2300      	movs	r3, #0
   15cb2:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   15cb4:	2300      	movs	r3, #0
   15cb6:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   15cb8:	2396      	movs	r3, #150	; 0x96
   15cba:	005b      	lsls	r3, r3, #1
   15cbc:	0018      	movs	r0, r3
   15cbe:	4b24      	ldr	r3, [pc, #144]	; (15d50 <I2cPingAddressWait+0xac>)
   15cc0:	4798      	blx	r3
   15cc2:	0003      	movs	r3, r0
   15cc4:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   15cc6:	697b      	ldr	r3, [r7, #20]
   15cc8:	2b00      	cmp	r3, #0
   15cca:	d133      	bne.n	15d34 <I2cPingAddressWait+0x90>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   15ccc:	2310      	movs	r3, #16
   15cce:	18fb      	adds	r3, r7, r3
   15cd0:	0018      	movs	r0, r3
   15cd2:	4b20      	ldr	r3, [pc, #128]	; (15d54 <I2cPingAddressWait+0xb0>)
   15cd4:	4798      	blx	r3
   15cd6:	0003      	movs	r3, r0
   15cd8:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   15cda:	697b      	ldr	r3, [r7, #20]
   15cdc:	2b00      	cmp	r3, #0
   15cde:	d12b      	bne.n	15d38 <I2cPingAddressWait+0x94>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   15ce0:	68fb      	ldr	r3, [r7, #12]
   15ce2:	0018      	movs	r0, r3
   15ce4:	4b1c      	ldr	r3, [pc, #112]	; (15d58 <I2cPingAddressWait+0xb4>)
   15ce6:	4798      	blx	r3
   15ce8:	0003      	movs	r3, r0
   15cea:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   15cec:	697b      	ldr	r3, [r7, #20]
   15cee:	2b00      	cmp	r3, #0
   15cf0:	d125      	bne.n	15d3e <I2cPingAddressWait+0x9a>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   15cf2:	693b      	ldr	r3, [r7, #16]
   15cf4:	687a      	ldr	r2, [r7, #4]
   15cf6:	0011      	movs	r1, r2
   15cf8:	0018      	movs	r0, r3
   15cfa:	4b18      	ldr	r3, [pc, #96]	; (15d5c <I2cPingAddressWait+0xb8>)
   15cfc:	4798      	blx	r3
   15cfe:	0003      	movs	r3, r0
   15d00:	2b01      	cmp	r3, #1
   15d02:	d113      	bne.n	15d2c <I2cPingAddressWait+0x88>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   15d04:	4b16      	ldr	r3, [pc, #88]	; (15d60 <I2cPingAddressWait+0xbc>)
   15d06:	4798      	blx	r3
   15d08:	1e03      	subs	r3, r0, #0
   15d0a:	d006      	beq.n	15d1a <I2cPingAddressWait+0x76>
            I2cSetTaskErrorStatus(false);
   15d0c:	2000      	movs	r0, #0
   15d0e:	4b15      	ldr	r3, [pc, #84]	; (15d64 <I2cPingAddressWait+0xc0>)
   15d10:	4798      	blx	r3
            error = ERROR_ABORTED;
   15d12:	2303      	movs	r3, #3
   15d14:	425b      	negs	r3, r3
   15d16:	617b      	str	r3, [r7, #20]
            goto exitError0;
   15d18:	e012      	b.n	15d40 <I2cPingAddressWait+0x9c>
        }
        vTaskDelay(delay);
   15d1a:	68bb      	ldr	r3, [r7, #8]
   15d1c:	0018      	movs	r0, r3
   15d1e:	4b12      	ldr	r3, [pc, #72]	; (15d68 <I2cPingAddressWait+0xc4>)
   15d20:	4798      	blx	r3
        goto exitError0;
    }


    //---8. Release Mutex
    error = I2cFreeMutex();
   15d22:	4b12      	ldr	r3, [pc, #72]	; (15d6c <I2cPingAddressWait+0xc8>)
   15d24:	4798      	blx	r3
   15d26:	0003      	movs	r3, r0
   15d28:	617b      	str	r3, [r7, #20]
   15d2a:	e006      	b.n	15d3a <I2cPingAddressWait+0x96>
        error = ERR_TIMEOUT;
   15d2c:	2303      	movs	r3, #3
   15d2e:	425b      	negs	r3, r3
   15d30:	617b      	str	r3, [r7, #20]
        goto exitError0;
   15d32:	e005      	b.n	15d40 <I2cPingAddressWait+0x9c>
    if (ERROR_NONE != error) goto exit;
   15d34:	46c0      	nop			; (mov r8, r8)
   15d36:	e000      	b.n	15d3a <I2cPingAddressWait+0x96>
    if (ERROR_NONE != error) goto exit;
   15d38:	46c0      	nop			; (mov r8, r8)
exit:
    return error;
   15d3a:	697b      	ldr	r3, [r7, #20]
   15d3c:	e003      	b.n	15d46 <I2cPingAddressWait+0xa2>
        goto exitError0;
   15d3e:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   15d40:	4b0a      	ldr	r3, [pc, #40]	; (15d6c <I2cPingAddressWait+0xc8>)
   15d42:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   15d44:	697b      	ldr	r3, [r7, #20]
}
   15d46:	0018      	movs	r0, r3
   15d48:	46bd      	mov	sp, r7
   15d4a:	b006      	add	sp, #24
   15d4c:	bd80      	pop	{r7, pc}
   15d4e:	46c0      	nop			; (mov r8, r8)
   15d50:	00015a29 	.word	0x00015a29
   15d54:	00015a61 	.word	0x00015a61
   15d58:	00015901 	.word	0x00015901
   15d5c:	0001d54d 	.word	0x0001d54d
   15d60:	00015a85 	.word	0x00015a85
   15d64:	00015a99 	.word	0x00015a99
   15d68:	0001e2a1 	.word	0x0001e2a1
   15d6c:	000159f1 	.word	0x000159f1

00015d70 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   15d70:	b5b0      	push	{r4, r5, r7, lr}
   15d72:	b086      	sub	sp, #24
   15d74:	af00      	add	r7, sp, #0
   15d76:	60f8      	str	r0, [r7, #12]
   15d78:	0008      	movs	r0, r1
   15d7a:	607a      	str	r2, [r7, #4]
   15d7c:	0019      	movs	r1, r3
   15d7e:	230b      	movs	r3, #11
   15d80:	18fb      	adds	r3, r7, r3
   15d82:	1c02      	adds	r2, r0, #0
   15d84:	701a      	strb	r2, [r3, #0]
   15d86:	2308      	movs	r3, #8
   15d88:	18fb      	adds	r3, r7, r3
   15d8a:	1c0a      	adds	r2, r1, #0
   15d8c:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   15d8e:	68fb      	ldr	r3, [r7, #12]
   15d90:	685c      	ldr	r4, [r3, #4]
   15d92:	68fb      	ldr	r3, [r7, #12]
   15d94:	6898      	ldr	r0, [r3, #8]
   15d96:	2308      	movs	r3, #8
   15d98:	18fb      	adds	r3, r7, r3
   15d9a:	881d      	ldrh	r5, [r3, #0]
   15d9c:	687a      	ldr	r2, [r7, #4]
   15d9e:	230b      	movs	r3, #11
   15da0:	18fb      	adds	r3, r7, r3
   15da2:	7819      	ldrb	r1, [r3, #0]
   15da4:	002b      	movs	r3, r5
   15da6:	47a0      	blx	r4
   15da8:	0003      	movs	r3, r0
   15daa:	617b      	str	r3, [r7, #20]

  return ret;
   15dac:	697b      	ldr	r3, [r7, #20]
}
   15dae:	0018      	movs	r0, r3
   15db0:	46bd      	mov	sp, r7
   15db2:	b006      	add	sp, #24
   15db4:	bdb0      	pop	{r4, r5, r7, pc}

00015db6 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   15db6:	b5b0      	push	{r4, r5, r7, lr}
   15db8:	b086      	sub	sp, #24
   15dba:	af00      	add	r7, sp, #0
   15dbc:	60f8      	str	r0, [r7, #12]
   15dbe:	0008      	movs	r0, r1
   15dc0:	607a      	str	r2, [r7, #4]
   15dc2:	0019      	movs	r1, r3
   15dc4:	230b      	movs	r3, #11
   15dc6:	18fb      	adds	r3, r7, r3
   15dc8:	1c02      	adds	r2, r0, #0
   15dca:	701a      	strb	r2, [r3, #0]
   15dcc:	2308      	movs	r3, #8
   15dce:	18fb      	adds	r3, r7, r3
   15dd0:	1c0a      	adds	r2, r1, #0
   15dd2:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   15dd4:	68fb      	ldr	r3, [r7, #12]
   15dd6:	681c      	ldr	r4, [r3, #0]
   15dd8:	68fb      	ldr	r3, [r7, #12]
   15dda:	6898      	ldr	r0, [r3, #8]
   15ddc:	2308      	movs	r3, #8
   15dde:	18fb      	adds	r3, r7, r3
   15de0:	881d      	ldrh	r5, [r3, #0]
   15de2:	687a      	ldr	r2, [r7, #4]
   15de4:	230b      	movs	r3, #11
   15de6:	18fb      	adds	r3, r7, r3
   15de8:	7819      	ldrb	r1, [r3, #0]
   15dea:	002b      	movs	r3, r5
   15dec:	47a0      	blx	r4
   15dee:	0003      	movs	r3, r0
   15df0:	617b      	str	r3, [r7, #20]

  return ret;
   15df2:	697b      	ldr	r3, [r7, #20]
}
   15df4:	0018      	movs	r0, r3
   15df6:	46bd      	mov	sp, r7
   15df8:	b006      	add	sp, #24
   15dfa:	bdb0      	pop	{r4, r5, r7, pc}

00015dfc <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
   15dfc:	b580      	push	{r7, lr}
   15dfe:	b082      	sub	sp, #8
   15e00:	af00      	add	r7, sp, #0
   15e02:	0002      	movs	r2, r0
   15e04:	1dbb      	adds	r3, r7, #6
   15e06:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
   15e08:	1dbb      	adds	r3, r7, #6
   15e0a:	2200      	movs	r2, #0
   15e0c:	5e9a      	ldrsh	r2, [r3, r2]
   15e0e:	4b06      	ldr	r3, [pc, #24]	; (15e28 <lsm6dso_from_fs2_to_mg+0x2c>)
   15e10:	0010      	movs	r0, r2
   15e12:	4798      	blx	r3
   15e14:	1c02      	adds	r2, r0, #0
   15e16:	4b05      	ldr	r3, [pc, #20]	; (15e2c <lsm6dso_from_fs2_to_mg+0x30>)
   15e18:	4905      	ldr	r1, [pc, #20]	; (15e30 <lsm6dso_from_fs2_to_mg+0x34>)
   15e1a:	1c10      	adds	r0, r2, #0
   15e1c:	4798      	blx	r3
   15e1e:	1c03      	adds	r3, r0, #0
}
   15e20:	1c18      	adds	r0, r3, #0
   15e22:	46bd      	mov	sp, r7
   15e24:	b002      	add	sp, #8
   15e26:	bd80      	pop	{r7, pc}
   15e28:	00035029 	.word	0x00035029
   15e2c:	00034da9 	.word	0x00034da9
   15e30:	3d79db23 	.word	0x3d79db23

00015e34 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
   15e34:	b590      	push	{r4, r7, lr}
   15e36:	b085      	sub	sp, #20
   15e38:	af00      	add	r7, sp, #0
   15e3a:	6078      	str	r0, [r7, #4]
   15e3c:	000a      	movs	r2, r1
   15e3e:	1cfb      	adds	r3, r7, #3
   15e40:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15e42:	2308      	movs	r3, #8
   15e44:	18fa      	adds	r2, r7, r3
   15e46:	6878      	ldr	r0, [r7, #4]
   15e48:	2301      	movs	r3, #1
   15e4a:	2110      	movs	r1, #16
   15e4c:	4c12      	ldr	r4, [pc, #72]	; (15e98 <lsm6dso_xl_full_scale_set+0x64>)
   15e4e:	47a0      	blx	r4
   15e50:	0003      	movs	r3, r0
   15e52:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15e54:	68fb      	ldr	r3, [r7, #12]
   15e56:	2b00      	cmp	r3, #0
   15e58:	d119      	bne.n	15e8e <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
   15e5a:	1cfb      	adds	r3, r7, #3
   15e5c:	781b      	ldrb	r3, [r3, #0]
   15e5e:	2203      	movs	r2, #3
   15e60:	4013      	ands	r3, r2
   15e62:	b2da      	uxtb	r2, r3
   15e64:	2308      	movs	r3, #8
   15e66:	18fb      	adds	r3, r7, r3
   15e68:	2103      	movs	r1, #3
   15e6a:	400a      	ands	r2, r1
   15e6c:	0090      	lsls	r0, r2, #2
   15e6e:	781a      	ldrb	r2, [r3, #0]
   15e70:	210c      	movs	r1, #12
   15e72:	438a      	bics	r2, r1
   15e74:	1c11      	adds	r1, r2, #0
   15e76:	1c02      	adds	r2, r0, #0
   15e78:	430a      	orrs	r2, r1
   15e7a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15e7c:	2308      	movs	r3, #8
   15e7e:	18fa      	adds	r2, r7, r3
   15e80:	6878      	ldr	r0, [r7, #4]
   15e82:	2301      	movs	r3, #1
   15e84:	2110      	movs	r1, #16
   15e86:	4c05      	ldr	r4, [pc, #20]	; (15e9c <lsm6dso_xl_full_scale_set+0x68>)
   15e88:	47a0      	blx	r4
   15e8a:	0003      	movs	r3, r0
   15e8c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15e8e:	68fb      	ldr	r3, [r7, #12]
}
   15e90:	0018      	movs	r0, r3
   15e92:	46bd      	mov	sp, r7
   15e94:	b005      	add	sp, #20
   15e96:	bd90      	pop	{r4, r7, pc}
   15e98:	00015d71 	.word	0x00015d71
   15e9c:	00015db7 	.word	0x00015db7

00015ea0 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
   15ea0:	b590      	push	{r4, r7, lr}
   15ea2:	b087      	sub	sp, #28
   15ea4:	af00      	add	r7, sp, #0
   15ea6:	6078      	str	r0, [r7, #4]
   15ea8:	000a      	movs	r2, r1
   15eaa:	1cfb      	adds	r3, r7, #3
   15eac:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
   15eae:	2317      	movs	r3, #23
   15eb0:	18fb      	adds	r3, r7, r3
   15eb2:	1cfa      	adds	r2, r7, #3
   15eb4:	7812      	ldrb	r2, [r2, #0]
   15eb6:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   15eb8:	230c      	movs	r3, #12
   15eba:	18fa      	adds	r2, r7, r3
   15ebc:	687b      	ldr	r3, [r7, #4]
   15ebe:	0011      	movs	r1, r2
   15ec0:	0018      	movs	r0, r3
   15ec2:	4ba4      	ldr	r3, [pc, #656]	; (16154 <lsm6dso_xl_data_rate_set+0x2b4>)
   15ec4:	4798      	blx	r3
   15ec6:	0003      	movs	r3, r0
   15ec8:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   15eca:	693b      	ldr	r3, [r7, #16]
   15ecc:	2b00      	cmp	r3, #0
   15ece:	d000      	beq.n	15ed2 <lsm6dso_xl_data_rate_set+0x32>
   15ed0:	e113      	b.n	160fa <lsm6dso_xl_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15ed2:	230c      	movs	r3, #12
   15ed4:	18fb      	adds	r3, r7, r3
   15ed6:	781b      	ldrb	r3, [r3, #0]
   15ed8:	07db      	lsls	r3, r3, #31
   15eda:	0fdb      	lsrs	r3, r3, #31
   15edc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   15ede:	230c      	movs	r3, #12
   15ee0:	18fb      	adds	r3, r7, r3
   15ee2:	781b      	ldrb	r3, [r3, #0]
   15ee4:	079b      	lsls	r3, r3, #30
   15ee6:	0fdb      	lsrs	r3, r3, #31
   15ee8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15eea:	4313      	orrs	r3, r2
   15eec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   15eee:	230c      	movs	r3, #12
   15ef0:	18fb      	adds	r3, r7, r3
   15ef2:	781b      	ldrb	r3, [r3, #0]
   15ef4:	075b      	lsls	r3, r3, #29
   15ef6:	0fdb      	lsrs	r3, r3, #31
   15ef8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   15efa:	4313      	orrs	r3, r2
   15efc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   15efe:	230c      	movs	r3, #12
   15f00:	18fb      	adds	r3, r7, r3
   15f02:	781b      	ldrb	r3, [r3, #0]
   15f04:	071b      	lsls	r3, r3, #28
   15f06:	0fdb      	lsrs	r3, r3, #31
   15f08:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   15f0a:	4313      	orrs	r3, r2
   15f0c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   15f0e:	230c      	movs	r3, #12
   15f10:	18fb      	adds	r3, r7, r3
   15f12:	781b      	ldrb	r3, [r3, #0]
   15f14:	06db      	lsls	r3, r3, #27
   15f16:	0fdb      	lsrs	r3, r3, #31
   15f18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   15f1a:	4313      	orrs	r3, r2
   15f1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15f1e:	230c      	movs	r3, #12
   15f20:	18fb      	adds	r3, r7, r3
   15f22:	781b      	ldrb	r3, [r3, #0]
   15f24:	069b      	lsls	r3, r3, #26
   15f26:	0fdb      	lsrs	r3, r3, #31
   15f28:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   15f2a:	4313      	orrs	r3, r2
   15f2c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15f2e:	230c      	movs	r3, #12
   15f30:	18fb      	adds	r3, r7, r3
   15f32:	781b      	ldrb	r3, [r3, #0]
   15f34:	065b      	lsls	r3, r3, #25
   15f36:	0fdb      	lsrs	r3, r3, #31
   15f38:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15f3a:	4313      	orrs	r3, r2
   15f3c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15f3e:	230c      	movs	r3, #12
   15f40:	18fb      	adds	r3, r7, r3
   15f42:	781b      	ldrb	r3, [r3, #0]
   15f44:	061b      	lsls	r3, r3, #24
   15f46:	0fdb      	lsrs	r3, r3, #31
   15f48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15f4a:	4313      	orrs	r3, r2
   15f4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   15f4e:	230c      	movs	r3, #12
   15f50:	18fb      	adds	r3, r7, r3
   15f52:	785b      	ldrb	r3, [r3, #1]
   15f54:	07db      	lsls	r3, r3, #31
   15f56:	0fdb      	lsrs	r3, r3, #31
   15f58:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15f5a:	4313      	orrs	r3, r2
   15f5c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   15f5e:	230c      	movs	r3, #12
   15f60:	18fb      	adds	r3, r7, r3
   15f62:	785b      	ldrb	r3, [r3, #1]
   15f64:	079b      	lsls	r3, r3, #30
   15f66:	0fdb      	lsrs	r3, r3, #31
   15f68:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   15f6a:	4313      	orrs	r3, r2
   15f6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   15f6e:	230c      	movs	r3, #12
   15f70:	18fb      	adds	r3, r7, r3
   15f72:	785b      	ldrb	r3, [r3, #1]
   15f74:	075b      	lsls	r3, r3, #29
   15f76:	0fdb      	lsrs	r3, r3, #31
   15f78:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   15f7a:	4313      	orrs	r3, r2
   15f7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   15f7e:	230c      	movs	r3, #12
   15f80:	18fb      	adds	r3, r7, r3
   15f82:	785b      	ldrb	r3, [r3, #1]
   15f84:	071b      	lsls	r3, r3, #28
   15f86:	0fdb      	lsrs	r3, r3, #31
   15f88:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   15f8a:	4313      	orrs	r3, r2
   15f8c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   15f8e:	230c      	movs	r3, #12
   15f90:	18fb      	adds	r3, r7, r3
   15f92:	785b      	ldrb	r3, [r3, #1]
   15f94:	06db      	lsls	r3, r3, #27
   15f96:	0fdb      	lsrs	r3, r3, #31
   15f98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   15f9a:	4313      	orrs	r3, r2
   15f9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   15f9e:	230c      	movs	r3, #12
   15fa0:	18fb      	adds	r3, r7, r3
   15fa2:	785b      	ldrb	r3, [r3, #1]
   15fa4:	069b      	lsls	r3, r3, #26
   15fa6:	0fdb      	lsrs	r3, r3, #31
   15fa8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   15faa:	4313      	orrs	r3, r2
   15fac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15fae:	230c      	movs	r3, #12
   15fb0:	18fb      	adds	r3, r7, r3
   15fb2:	785b      	ldrb	r3, [r3, #1]
   15fb4:	065b      	lsls	r3, r3, #25
   15fb6:	0fdb      	lsrs	r3, r3, #31
   15fb8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   15fba:	4313      	orrs	r3, r2
   15fbc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   15fbe:	230c      	movs	r3, #12
   15fc0:	18fb      	adds	r3, r7, r3
   15fc2:	785b      	ldrb	r3, [r3, #1]
   15fc4:	061b      	lsls	r3, r3, #24
   15fc6:	0fdb      	lsrs	r3, r3, #31
   15fc8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15fca:	4313      	orrs	r3, r2
   15fcc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15fce:	2b01      	cmp	r3, #1
   15fd0:	d000      	beq.n	15fd4 <lsm6dso_xl_data_rate_set+0x134>
   15fd2:	e092      	b.n	160fa <lsm6dso_xl_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   15fd4:	230b      	movs	r3, #11
   15fd6:	18fa      	adds	r2, r7, r3
   15fd8:	687b      	ldr	r3, [r7, #4]
   15fda:	0011      	movs	r1, r2
   15fdc:	0018      	movs	r0, r3
   15fde:	4b5e      	ldr	r3, [pc, #376]	; (16158 <lsm6dso_xl_data_rate_set+0x2b8>)
   15fe0:	4798      	blx	r3
   15fe2:	0003      	movs	r3, r0
   15fe4:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   15fe6:	693b      	ldr	r3, [r7, #16]
   15fe8:	2b00      	cmp	r3, #0
   15fea:	d000      	beq.n	15fee <lsm6dso_xl_data_rate_set+0x14e>
   15fec:	e085      	b.n	160fa <lsm6dso_xl_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   15fee:	230b      	movs	r3, #11
   15ff0:	18fb      	adds	r3, r7, r3
   15ff2:	781b      	ldrb	r3, [r3, #0]
   15ff4:	2b01      	cmp	r3, #1
   15ff6:	d017      	beq.n	16028 <lsm6dso_xl_data_rate_set+0x188>
   15ff8:	dc02      	bgt.n	16000 <lsm6dso_xl_data_rate_set+0x160>
   15ffa:	2b00      	cmp	r3, #0
   15ffc:	d005      	beq.n	1600a <lsm6dso_xl_data_rate_set+0x16a>
   15ffe:	e076      	b.n	160ee <lsm6dso_xl_data_rate_set+0x24e>
   16000:	2b02      	cmp	r3, #2
   16002:	d029      	beq.n	16058 <lsm6dso_xl_data_rate_set+0x1b8>
   16004:	2b03      	cmp	r3, #3
   16006:	d048      	beq.n	1609a <lsm6dso_xl_data_rate_set+0x1fa>
   16008:	e071      	b.n	160ee <lsm6dso_xl_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
   1600a:	1cfb      	adds	r3, r7, #3
   1600c:	781b      	ldrb	r3, [r3, #0]
   1600e:	2b00      	cmp	r3, #0
   16010:	d104      	bne.n	1601c <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
   16012:	2317      	movs	r3, #23
   16014:	18fb      	adds	r3, r7, r3
   16016:	2201      	movs	r2, #1
   16018:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   1601a:	e06e      	b.n	160fa <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   1601c:	2317      	movs	r3, #23
   1601e:	18fb      	adds	r3, r7, r3
   16020:	1cfa      	adds	r2, r7, #3
   16022:	7812      	ldrb	r2, [r2, #0]
   16024:	701a      	strb	r2, [r3, #0]
            break;
   16026:	e068      	b.n	160fa <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   16028:	1cfb      	adds	r3, r7, #3
   1602a:	781b      	ldrb	r3, [r3, #0]
   1602c:	2b00      	cmp	r3, #0
   1602e:	d104      	bne.n	1603a <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   16030:	2317      	movs	r3, #23
   16032:	18fb      	adds	r3, r7, r3
   16034:	2202      	movs	r2, #2
   16036:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   16038:	e05f      	b.n	160fa <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   1603a:	1cfb      	adds	r3, r7, #3
   1603c:	781b      	ldrb	r3, [r3, #0]
   1603e:	2b01      	cmp	r3, #1
   16040:	d104      	bne.n	1604c <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   16042:	2317      	movs	r3, #23
   16044:	18fb      	adds	r3, r7, r3
   16046:	2202      	movs	r2, #2
   16048:	701a      	strb	r2, [r3, #0]
            break;
   1604a:	e056      	b.n	160fa <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   1604c:	2317      	movs	r3, #23
   1604e:	18fb      	adds	r3, r7, r3
   16050:	1cfa      	adds	r2, r7, #3
   16052:	7812      	ldrb	r2, [r2, #0]
   16054:	701a      	strb	r2, [r3, #0]
            break;
   16056:	e050      	b.n	160fa <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   16058:	1cfb      	adds	r3, r7, #3
   1605a:	781b      	ldrb	r3, [r3, #0]
   1605c:	2b00      	cmp	r3, #0
   1605e:	d104      	bne.n	1606a <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   16060:	2317      	movs	r3, #23
   16062:	18fb      	adds	r3, r7, r3
   16064:	2203      	movs	r2, #3
   16066:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   16068:	e047      	b.n	160fa <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   1606a:	1cfb      	adds	r3, r7, #3
   1606c:	781b      	ldrb	r3, [r3, #0]
   1606e:	2b01      	cmp	r3, #1
   16070:	d104      	bne.n	1607c <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   16072:	2317      	movs	r3, #23
   16074:	18fb      	adds	r3, r7, r3
   16076:	2203      	movs	r2, #3
   16078:	701a      	strb	r2, [r3, #0]
            break;
   1607a:	e03e      	b.n	160fa <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   1607c:	1cfb      	adds	r3, r7, #3
   1607e:	781b      	ldrb	r3, [r3, #0]
   16080:	2b02      	cmp	r3, #2
   16082:	d104      	bne.n	1608e <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   16084:	2317      	movs	r3, #23
   16086:	18fb      	adds	r3, r7, r3
   16088:	2203      	movs	r2, #3
   1608a:	701a      	strb	r2, [r3, #0]
            break;
   1608c:	e035      	b.n	160fa <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   1608e:	2317      	movs	r3, #23
   16090:	18fb      	adds	r3, r7, r3
   16092:	1cfa      	adds	r2, r7, #3
   16094:	7812      	ldrb	r2, [r2, #0]
   16096:	701a      	strb	r2, [r3, #0]
            break;
   16098:	e02f      	b.n	160fa <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   1609a:	1cfb      	adds	r3, r7, #3
   1609c:	781b      	ldrb	r3, [r3, #0]
   1609e:	2b00      	cmp	r3, #0
   160a0:	d104      	bne.n	160ac <lsm6dso_xl_data_rate_set+0x20c>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   160a2:	2317      	movs	r3, #23
   160a4:	18fb      	adds	r3, r7, r3
   160a6:	2204      	movs	r2, #4
   160a8:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   160aa:	e026      	b.n	160fa <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   160ac:	1cfb      	adds	r3, r7, #3
   160ae:	781b      	ldrb	r3, [r3, #0]
   160b0:	2b01      	cmp	r3, #1
   160b2:	d104      	bne.n	160be <lsm6dso_xl_data_rate_set+0x21e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   160b4:	2317      	movs	r3, #23
   160b6:	18fb      	adds	r3, r7, r3
   160b8:	2204      	movs	r2, #4
   160ba:	701a      	strb	r2, [r3, #0]
            break;
   160bc:	e01d      	b.n	160fa <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   160be:	1cfb      	adds	r3, r7, #3
   160c0:	781b      	ldrb	r3, [r3, #0]
   160c2:	2b02      	cmp	r3, #2
   160c4:	d104      	bne.n	160d0 <lsm6dso_xl_data_rate_set+0x230>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   160c6:	2317      	movs	r3, #23
   160c8:	18fb      	adds	r3, r7, r3
   160ca:	2204      	movs	r2, #4
   160cc:	701a      	strb	r2, [r3, #0]
            break;
   160ce:	e014      	b.n	160fa <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_52Hz)
   160d0:	1cfb      	adds	r3, r7, #3
   160d2:	781b      	ldrb	r3, [r3, #0]
   160d4:	2b03      	cmp	r3, #3
   160d6:	d104      	bne.n	160e2 <lsm6dso_xl_data_rate_set+0x242>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   160d8:	2317      	movs	r3, #23
   160da:	18fb      	adds	r3, r7, r3
   160dc:	2204      	movs	r2, #4
   160de:	701a      	strb	r2, [r3, #0]
            break;
   160e0:	e00b      	b.n	160fa <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   160e2:	2317      	movs	r3, #23
   160e4:	18fb      	adds	r3, r7, r3
   160e6:	1cfa      	adds	r2, r7, #3
   160e8:	7812      	ldrb	r2, [r2, #0]
   160ea:	701a      	strb	r2, [r3, #0]
            break;
   160ec:	e005      	b.n	160fa <lsm6dso_xl_data_rate_set+0x25a>

          default:
            odr_xl = val;
   160ee:	2317      	movs	r3, #23
   160f0:	18fb      	adds	r3, r7, r3
   160f2:	1cfa      	adds	r2, r7, #3
   160f4:	7812      	ldrb	r2, [r2, #0]
   160f6:	701a      	strb	r2, [r3, #0]
            break;
   160f8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   160fa:	693b      	ldr	r3, [r7, #16]
   160fc:	2b00      	cmp	r3, #0
   160fe:	d108      	bne.n	16112 <lsm6dso_xl_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   16100:	2308      	movs	r3, #8
   16102:	18fa      	adds	r2, r7, r3
   16104:	6878      	ldr	r0, [r7, #4]
   16106:	2301      	movs	r3, #1
   16108:	2110      	movs	r1, #16
   1610a:	4c14      	ldr	r4, [pc, #80]	; (1615c <lsm6dso_xl_data_rate_set+0x2bc>)
   1610c:	47a0      	blx	r4
   1610e:	0003      	movs	r3, r0
   16110:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   16112:	693b      	ldr	r3, [r7, #16]
   16114:	2b00      	cmp	r3, #0
   16116:	d118      	bne.n	1614a <lsm6dso_xl_data_rate_set+0x2aa>
  {
    reg.odr_xl = (uint8_t) odr_xl;
   16118:	2317      	movs	r3, #23
   1611a:	18fb      	adds	r3, r7, r3
   1611c:	781b      	ldrb	r3, [r3, #0]
   1611e:	220f      	movs	r2, #15
   16120:	4013      	ands	r3, r2
   16122:	b2da      	uxtb	r2, r3
   16124:	2308      	movs	r3, #8
   16126:	18fb      	adds	r3, r7, r3
   16128:	0110      	lsls	r0, r2, #4
   1612a:	781a      	ldrb	r2, [r3, #0]
   1612c:	210f      	movs	r1, #15
   1612e:	400a      	ands	r2, r1
   16130:	1c11      	adds	r1, r2, #0
   16132:	1c02      	adds	r2, r0, #0
   16134:	430a      	orrs	r2, r1
   16136:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   16138:	2308      	movs	r3, #8
   1613a:	18fa      	adds	r2, r7, r3
   1613c:	6878      	ldr	r0, [r7, #4]
   1613e:	2301      	movs	r3, #1
   16140:	2110      	movs	r1, #16
   16142:	4c07      	ldr	r4, [pc, #28]	; (16160 <lsm6dso_xl_data_rate_set+0x2c0>)
   16144:	47a0      	blx	r4
   16146:	0003      	movs	r3, r0
   16148:	613b      	str	r3, [r7, #16]
  }

  return ret;
   1614a:	693b      	ldr	r3, [r7, #16]
}
   1614c:	0018      	movs	r0, r3
   1614e:	46bd      	mov	sp, r7
   16150:	b007      	add	sp, #28
   16152:	bd90      	pop	{r4, r7, pc}
   16154:	0001697d 	.word	0x0001697d
   16158:	000169d1 	.word	0x000169d1
   1615c:	00015d71 	.word	0x00015d71
   16160:	00015db7 	.word	0x00015db7

00016164 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
   16164:	b590      	push	{r4, r7, lr}
   16166:	b085      	sub	sp, #20
   16168:	af00      	add	r7, sp, #0
   1616a:	6078      	str	r0, [r7, #4]
   1616c:	000a      	movs	r2, r1
   1616e:	1cfb      	adds	r3, r7, #3
   16170:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   16172:	2308      	movs	r3, #8
   16174:	18fa      	adds	r2, r7, r3
   16176:	6878      	ldr	r0, [r7, #4]
   16178:	2301      	movs	r3, #1
   1617a:	2111      	movs	r1, #17
   1617c:	4c12      	ldr	r4, [pc, #72]	; (161c8 <lsm6dso_gy_full_scale_set+0x64>)
   1617e:	47a0      	blx	r4
   16180:	0003      	movs	r3, r0
   16182:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16184:	68fb      	ldr	r3, [r7, #12]
   16186:	2b00      	cmp	r3, #0
   16188:	d119      	bne.n	161be <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
   1618a:	1cfb      	adds	r3, r7, #3
   1618c:	781b      	ldrb	r3, [r3, #0]
   1618e:	2207      	movs	r2, #7
   16190:	4013      	ands	r3, r2
   16192:	b2da      	uxtb	r2, r3
   16194:	2308      	movs	r3, #8
   16196:	18fb      	adds	r3, r7, r3
   16198:	2107      	movs	r1, #7
   1619a:	400a      	ands	r2, r1
   1619c:	1890      	adds	r0, r2, r2
   1619e:	781a      	ldrb	r2, [r3, #0]
   161a0:	210e      	movs	r1, #14
   161a2:	438a      	bics	r2, r1
   161a4:	1c11      	adds	r1, r2, #0
   161a6:	1c02      	adds	r2, r0, #0
   161a8:	430a      	orrs	r2, r1
   161aa:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   161ac:	2308      	movs	r3, #8
   161ae:	18fa      	adds	r2, r7, r3
   161b0:	6878      	ldr	r0, [r7, #4]
   161b2:	2301      	movs	r3, #1
   161b4:	2111      	movs	r1, #17
   161b6:	4c05      	ldr	r4, [pc, #20]	; (161cc <lsm6dso_gy_full_scale_set+0x68>)
   161b8:	47a0      	blx	r4
   161ba:	0003      	movs	r3, r0
   161bc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   161be:	68fb      	ldr	r3, [r7, #12]
}
   161c0:	0018      	movs	r0, r3
   161c2:	46bd      	mov	sp, r7
   161c4:	b005      	add	sp, #20
   161c6:	bd90      	pop	{r4, r7, pc}
   161c8:	00015d71 	.word	0x00015d71
   161cc:	00015db7 	.word	0x00015db7

000161d0 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
   161d0:	b590      	push	{r4, r7, lr}
   161d2:	b087      	sub	sp, #28
   161d4:	af00      	add	r7, sp, #0
   161d6:	6078      	str	r0, [r7, #4]
   161d8:	000a      	movs	r2, r1
   161da:	1cfb      	adds	r3, r7, #3
   161dc:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
   161de:	2317      	movs	r3, #23
   161e0:	18fb      	adds	r3, r7, r3
   161e2:	1cfa      	adds	r2, r7, #3
   161e4:	7812      	ldrb	r2, [r2, #0]
   161e6:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   161e8:	230c      	movs	r3, #12
   161ea:	18fa      	adds	r2, r7, r3
   161ec:	687b      	ldr	r3, [r7, #4]
   161ee:	0011      	movs	r1, r2
   161f0:	0018      	movs	r0, r3
   161f2:	4ba4      	ldr	r3, [pc, #656]	; (16484 <lsm6dso_gy_data_rate_set+0x2b4>)
   161f4:	4798      	blx	r3
   161f6:	0003      	movs	r3, r0
   161f8:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   161fa:	693b      	ldr	r3, [r7, #16]
   161fc:	2b00      	cmp	r3, #0
   161fe:	d000      	beq.n	16202 <lsm6dso_gy_data_rate_set+0x32>
   16200:	e113      	b.n	1642a <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   16202:	230c      	movs	r3, #12
   16204:	18fb      	adds	r3, r7, r3
   16206:	781b      	ldrb	r3, [r3, #0]
   16208:	07db      	lsls	r3, r3, #31
   1620a:	0fdb      	lsrs	r3, r3, #31
   1620c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   1620e:	230c      	movs	r3, #12
   16210:	18fb      	adds	r3, r7, r3
   16212:	781b      	ldrb	r3, [r3, #0]
   16214:	079b      	lsls	r3, r3, #30
   16216:	0fdb      	lsrs	r3, r3, #31
   16218:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1621a:	4313      	orrs	r3, r2
   1621c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   1621e:	230c      	movs	r3, #12
   16220:	18fb      	adds	r3, r7, r3
   16222:	781b      	ldrb	r3, [r3, #0]
   16224:	075b      	lsls	r3, r3, #29
   16226:	0fdb      	lsrs	r3, r3, #31
   16228:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   1622a:	4313      	orrs	r3, r2
   1622c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   1622e:	230c      	movs	r3, #12
   16230:	18fb      	adds	r3, r7, r3
   16232:	781b      	ldrb	r3, [r3, #0]
   16234:	071b      	lsls	r3, r3, #28
   16236:	0fdb      	lsrs	r3, r3, #31
   16238:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   1623a:	4313      	orrs	r3, r2
   1623c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   1623e:	230c      	movs	r3, #12
   16240:	18fb      	adds	r3, r7, r3
   16242:	781b      	ldrb	r3, [r3, #0]
   16244:	06db      	lsls	r3, r3, #27
   16246:	0fdb      	lsrs	r3, r3, #31
   16248:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   1624a:	4313      	orrs	r3, r2
   1624c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   1624e:	230c      	movs	r3, #12
   16250:	18fb      	adds	r3, r7, r3
   16252:	781b      	ldrb	r3, [r3, #0]
   16254:	069b      	lsls	r3, r3, #26
   16256:	0fdb      	lsrs	r3, r3, #31
   16258:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   1625a:	4313      	orrs	r3, r2
   1625c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   1625e:	230c      	movs	r3, #12
   16260:	18fb      	adds	r3, r7, r3
   16262:	781b      	ldrb	r3, [r3, #0]
   16264:	065b      	lsls	r3, r3, #25
   16266:	0fdb      	lsrs	r3, r3, #31
   16268:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   1626a:	4313      	orrs	r3, r2
   1626c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   1626e:	230c      	movs	r3, #12
   16270:	18fb      	adds	r3, r7, r3
   16272:	781b      	ldrb	r3, [r3, #0]
   16274:	061b      	lsls	r3, r3, #24
   16276:	0fdb      	lsrs	r3, r3, #31
   16278:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   1627a:	4313      	orrs	r3, r2
   1627c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   1627e:	230c      	movs	r3, #12
   16280:	18fb      	adds	r3, r7, r3
   16282:	785b      	ldrb	r3, [r3, #1]
   16284:	07db      	lsls	r3, r3, #31
   16286:	0fdb      	lsrs	r3, r3, #31
   16288:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   1628a:	4313      	orrs	r3, r2
   1628c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   1628e:	230c      	movs	r3, #12
   16290:	18fb      	adds	r3, r7, r3
   16292:	785b      	ldrb	r3, [r3, #1]
   16294:	079b      	lsls	r3, r3, #30
   16296:	0fdb      	lsrs	r3, r3, #31
   16298:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   1629a:	4313      	orrs	r3, r2
   1629c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   1629e:	230c      	movs	r3, #12
   162a0:	18fb      	adds	r3, r7, r3
   162a2:	785b      	ldrb	r3, [r3, #1]
   162a4:	075b      	lsls	r3, r3, #29
   162a6:	0fdb      	lsrs	r3, r3, #31
   162a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   162aa:	4313      	orrs	r3, r2
   162ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   162ae:	230c      	movs	r3, #12
   162b0:	18fb      	adds	r3, r7, r3
   162b2:	785b      	ldrb	r3, [r3, #1]
   162b4:	071b      	lsls	r3, r3, #28
   162b6:	0fdb      	lsrs	r3, r3, #31
   162b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   162ba:	4313      	orrs	r3, r2
   162bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   162be:	230c      	movs	r3, #12
   162c0:	18fb      	adds	r3, r7, r3
   162c2:	785b      	ldrb	r3, [r3, #1]
   162c4:	06db      	lsls	r3, r3, #27
   162c6:	0fdb      	lsrs	r3, r3, #31
   162c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   162ca:	4313      	orrs	r3, r2
   162cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   162ce:	230c      	movs	r3, #12
   162d0:	18fb      	adds	r3, r7, r3
   162d2:	785b      	ldrb	r3, [r3, #1]
   162d4:	069b      	lsls	r3, r3, #26
   162d6:	0fdb      	lsrs	r3, r3, #31
   162d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   162da:	4313      	orrs	r3, r2
   162dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   162de:	230c      	movs	r3, #12
   162e0:	18fb      	adds	r3, r7, r3
   162e2:	785b      	ldrb	r3, [r3, #1]
   162e4:	065b      	lsls	r3, r3, #25
   162e6:	0fdb      	lsrs	r3, r3, #31
   162e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   162ea:	4313      	orrs	r3, r2
   162ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   162ee:	230c      	movs	r3, #12
   162f0:	18fb      	adds	r3, r7, r3
   162f2:	785b      	ldrb	r3, [r3, #1]
   162f4:	061b      	lsls	r3, r3, #24
   162f6:	0fdb      	lsrs	r3, r3, #31
   162f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   162fa:	4313      	orrs	r3, r2
   162fc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   162fe:	2b01      	cmp	r3, #1
   16300:	d000      	beq.n	16304 <lsm6dso_gy_data_rate_set+0x134>
   16302:	e092      	b.n	1642a <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   16304:	230b      	movs	r3, #11
   16306:	18fa      	adds	r2, r7, r3
   16308:	687b      	ldr	r3, [r7, #4]
   1630a:	0011      	movs	r1, r2
   1630c:	0018      	movs	r0, r3
   1630e:	4b5e      	ldr	r3, [pc, #376]	; (16488 <lsm6dso_gy_data_rate_set+0x2b8>)
   16310:	4798      	blx	r3
   16312:	0003      	movs	r3, r0
   16314:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   16316:	693b      	ldr	r3, [r7, #16]
   16318:	2b00      	cmp	r3, #0
   1631a:	d000      	beq.n	1631e <lsm6dso_gy_data_rate_set+0x14e>
   1631c:	e085      	b.n	1642a <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   1631e:	230b      	movs	r3, #11
   16320:	18fb      	adds	r3, r7, r3
   16322:	781b      	ldrb	r3, [r3, #0]
   16324:	2b01      	cmp	r3, #1
   16326:	d017      	beq.n	16358 <lsm6dso_gy_data_rate_set+0x188>
   16328:	dc02      	bgt.n	16330 <lsm6dso_gy_data_rate_set+0x160>
   1632a:	2b00      	cmp	r3, #0
   1632c:	d005      	beq.n	1633a <lsm6dso_gy_data_rate_set+0x16a>
   1632e:	e076      	b.n	1641e <lsm6dso_gy_data_rate_set+0x24e>
   16330:	2b02      	cmp	r3, #2
   16332:	d029      	beq.n	16388 <lsm6dso_gy_data_rate_set+0x1b8>
   16334:	2b03      	cmp	r3, #3
   16336:	d048      	beq.n	163ca <lsm6dso_gy_data_rate_set+0x1fa>
   16338:	e071      	b.n	1641e <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
   1633a:	1cfb      	adds	r3, r7, #3
   1633c:	781b      	ldrb	r3, [r3, #0]
   1633e:	2b00      	cmp	r3, #0
   16340:	d104      	bne.n	1634c <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
   16342:	2317      	movs	r3, #23
   16344:	18fb      	adds	r3, r7, r3
   16346:	2201      	movs	r2, #1
   16348:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   1634a:	e06e      	b.n	1642a <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   1634c:	2317      	movs	r3, #23
   1634e:	18fb      	adds	r3, r7, r3
   16350:	1cfa      	adds	r2, r7, #3
   16352:	7812      	ldrb	r2, [r2, #0]
   16354:	701a      	strb	r2, [r3, #0]
            break;
   16356:	e068      	b.n	1642a <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   16358:	1cfb      	adds	r3, r7, #3
   1635a:	781b      	ldrb	r3, [r3, #0]
   1635c:	2b00      	cmp	r3, #0
   1635e:	d104      	bne.n	1636a <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   16360:	2317      	movs	r3, #23
   16362:	18fb      	adds	r3, r7, r3
   16364:	2202      	movs	r2, #2
   16366:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   16368:	e05f      	b.n	1642a <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   1636a:	1cfb      	adds	r3, r7, #3
   1636c:	781b      	ldrb	r3, [r3, #0]
   1636e:	2b01      	cmp	r3, #1
   16370:	d104      	bne.n	1637c <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   16372:	2317      	movs	r3, #23
   16374:	18fb      	adds	r3, r7, r3
   16376:	2202      	movs	r2, #2
   16378:	701a      	strb	r2, [r3, #0]
            break;
   1637a:	e056      	b.n	1642a <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   1637c:	2317      	movs	r3, #23
   1637e:	18fb      	adds	r3, r7, r3
   16380:	1cfa      	adds	r2, r7, #3
   16382:	7812      	ldrb	r2, [r2, #0]
   16384:	701a      	strb	r2, [r3, #0]
            break;
   16386:	e050      	b.n	1642a <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   16388:	1cfb      	adds	r3, r7, #3
   1638a:	781b      	ldrb	r3, [r3, #0]
   1638c:	2b00      	cmp	r3, #0
   1638e:	d104      	bne.n	1639a <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   16390:	2317      	movs	r3, #23
   16392:	18fb      	adds	r3, r7, r3
   16394:	2203      	movs	r2, #3
   16396:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   16398:	e047      	b.n	1642a <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   1639a:	1cfb      	adds	r3, r7, #3
   1639c:	781b      	ldrb	r3, [r3, #0]
   1639e:	2b01      	cmp	r3, #1
   163a0:	d104      	bne.n	163ac <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   163a2:	2317      	movs	r3, #23
   163a4:	18fb      	adds	r3, r7, r3
   163a6:	2203      	movs	r2, #3
   163a8:	701a      	strb	r2, [r3, #0]
            break;
   163aa:	e03e      	b.n	1642a <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   163ac:	1cfb      	adds	r3, r7, #3
   163ae:	781b      	ldrb	r3, [r3, #0]
   163b0:	2b02      	cmp	r3, #2
   163b2:	d104      	bne.n	163be <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   163b4:	2317      	movs	r3, #23
   163b6:	18fb      	adds	r3, r7, r3
   163b8:	2203      	movs	r2, #3
   163ba:	701a      	strb	r2, [r3, #0]
            break;
   163bc:	e035      	b.n	1642a <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   163be:	2317      	movs	r3, #23
   163c0:	18fb      	adds	r3, r7, r3
   163c2:	1cfa      	adds	r2, r7, #3
   163c4:	7812      	ldrb	r2, [r2, #0]
   163c6:	701a      	strb	r2, [r3, #0]
            break;
   163c8:	e02f      	b.n	1642a <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   163ca:	1cfb      	adds	r3, r7, #3
   163cc:	781b      	ldrb	r3, [r3, #0]
   163ce:	2b00      	cmp	r3, #0
   163d0:	d104      	bne.n	163dc <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   163d2:	2317      	movs	r3, #23
   163d4:	18fb      	adds	r3, r7, r3
   163d6:	2204      	movs	r2, #4
   163d8:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   163da:	e026      	b.n	1642a <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   163dc:	1cfb      	adds	r3, r7, #3
   163de:	781b      	ldrb	r3, [r3, #0]
   163e0:	2b01      	cmp	r3, #1
   163e2:	d104      	bne.n	163ee <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   163e4:	2317      	movs	r3, #23
   163e6:	18fb      	adds	r3, r7, r3
   163e8:	2204      	movs	r2, #4
   163ea:	701a      	strb	r2, [r3, #0]
            break;
   163ec:	e01d      	b.n	1642a <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   163ee:	1cfb      	adds	r3, r7, #3
   163f0:	781b      	ldrb	r3, [r3, #0]
   163f2:	2b02      	cmp	r3, #2
   163f4:	d104      	bne.n	16400 <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   163f6:	2317      	movs	r3, #23
   163f8:	18fb      	adds	r3, r7, r3
   163fa:	2204      	movs	r2, #4
   163fc:	701a      	strb	r2, [r3, #0]
            break;
   163fe:	e014      	b.n	1642a <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
   16400:	1cfb      	adds	r3, r7, #3
   16402:	781b      	ldrb	r3, [r3, #0]
   16404:	2b03      	cmp	r3, #3
   16406:	d104      	bne.n	16412 <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   16408:	2317      	movs	r3, #23
   1640a:	18fb      	adds	r3, r7, r3
   1640c:	2204      	movs	r2, #4
   1640e:	701a      	strb	r2, [r3, #0]
            break;
   16410:	e00b      	b.n	1642a <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   16412:	2317      	movs	r3, #23
   16414:	18fb      	adds	r3, r7, r3
   16416:	1cfa      	adds	r2, r7, #3
   16418:	7812      	ldrb	r2, [r2, #0]
   1641a:	701a      	strb	r2, [r3, #0]
            break;
   1641c:	e005      	b.n	1642a <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
   1641e:	2317      	movs	r3, #23
   16420:	18fb      	adds	r3, r7, r3
   16422:	1cfa      	adds	r2, r7, #3
   16424:	7812      	ldrb	r2, [r2, #0]
   16426:	701a      	strb	r2, [r3, #0]
            break;
   16428:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   1642a:	693b      	ldr	r3, [r7, #16]
   1642c:	2b00      	cmp	r3, #0
   1642e:	d108      	bne.n	16442 <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   16430:	2308      	movs	r3, #8
   16432:	18fa      	adds	r2, r7, r3
   16434:	6878      	ldr	r0, [r7, #4]
   16436:	2301      	movs	r3, #1
   16438:	2111      	movs	r1, #17
   1643a:	4c14      	ldr	r4, [pc, #80]	; (1648c <lsm6dso_gy_data_rate_set+0x2bc>)
   1643c:	47a0      	blx	r4
   1643e:	0003      	movs	r3, r0
   16440:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   16442:	693b      	ldr	r3, [r7, #16]
   16444:	2b00      	cmp	r3, #0
   16446:	d118      	bne.n	1647a <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
   16448:	2317      	movs	r3, #23
   1644a:	18fb      	adds	r3, r7, r3
   1644c:	781b      	ldrb	r3, [r3, #0]
   1644e:	220f      	movs	r2, #15
   16450:	4013      	ands	r3, r2
   16452:	b2da      	uxtb	r2, r3
   16454:	2308      	movs	r3, #8
   16456:	18fb      	adds	r3, r7, r3
   16458:	0110      	lsls	r0, r2, #4
   1645a:	781a      	ldrb	r2, [r3, #0]
   1645c:	210f      	movs	r1, #15
   1645e:	400a      	ands	r2, r1
   16460:	1c11      	adds	r1, r2, #0
   16462:	1c02      	adds	r2, r0, #0
   16464:	430a      	orrs	r2, r1
   16466:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   16468:	2308      	movs	r3, #8
   1646a:	18fa      	adds	r2, r7, r3
   1646c:	6878      	ldr	r0, [r7, #4]
   1646e:	2301      	movs	r3, #1
   16470:	2111      	movs	r1, #17
   16472:	4c07      	ldr	r4, [pc, #28]	; (16490 <lsm6dso_gy_data_rate_set+0x2c0>)
   16474:	47a0      	blx	r4
   16476:	0003      	movs	r3, r0
   16478:	613b      	str	r3, [r7, #16]
  }

  return ret;
   1647a:	693b      	ldr	r3, [r7, #16]
}
   1647c:	0018      	movs	r0, r3
   1647e:	46bd      	mov	sp, r7
   16480:	b007      	add	sp, #28
   16482:	bd90      	pop	{r4, r7, pc}
   16484:	0001697d 	.word	0x0001697d
   16488:	000169d1 	.word	0x000169d1
   1648c:	00015d71 	.word	0x00015d71
   16490:	00015db7 	.word	0x00015db7

00016494 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   16494:	b590      	push	{r4, r7, lr}
   16496:	b085      	sub	sp, #20
   16498:	af00      	add	r7, sp, #0
   1649a:	6078      	str	r0, [r7, #4]
   1649c:	000a      	movs	r2, r1
   1649e:	1cfb      	adds	r3, r7, #3
   164a0:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   164a2:	2308      	movs	r3, #8
   164a4:	18fa      	adds	r2, r7, r3
   164a6:	6878      	ldr	r0, [r7, #4]
   164a8:	2301      	movs	r3, #1
   164aa:	2112      	movs	r1, #18
   164ac:	4c12      	ldr	r4, [pc, #72]	; (164f8 <lsm6dso_block_data_update_set+0x64>)
   164ae:	47a0      	blx	r4
   164b0:	0003      	movs	r3, r0
   164b2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   164b4:	68fb      	ldr	r3, [r7, #12]
   164b6:	2b00      	cmp	r3, #0
   164b8:	d119      	bne.n	164ee <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
   164ba:	1cfb      	adds	r3, r7, #3
   164bc:	781b      	ldrb	r3, [r3, #0]
   164be:	2201      	movs	r2, #1
   164c0:	4013      	ands	r3, r2
   164c2:	b2da      	uxtb	r2, r3
   164c4:	2308      	movs	r3, #8
   164c6:	18fb      	adds	r3, r7, r3
   164c8:	2101      	movs	r1, #1
   164ca:	400a      	ands	r2, r1
   164cc:	0190      	lsls	r0, r2, #6
   164ce:	781a      	ldrb	r2, [r3, #0]
   164d0:	2140      	movs	r1, #64	; 0x40
   164d2:	438a      	bics	r2, r1
   164d4:	1c11      	adds	r1, r2, #0
   164d6:	1c02      	adds	r2, r0, #0
   164d8:	430a      	orrs	r2, r1
   164da:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   164dc:	2308      	movs	r3, #8
   164de:	18fa      	adds	r2, r7, r3
   164e0:	6878      	ldr	r0, [r7, #4]
   164e2:	2301      	movs	r3, #1
   164e4:	2112      	movs	r1, #18
   164e6:	4c05      	ldr	r4, [pc, #20]	; (164fc <lsm6dso_block_data_update_set+0x68>)
   164e8:	47a0      	blx	r4
   164ea:	0003      	movs	r3, r0
   164ec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   164ee:	68fb      	ldr	r3, [r7, #12]
}
   164f0:	0018      	movs	r0, r3
   164f2:	46bd      	mov	sp, r7
   164f4:	b005      	add	sp, #20
   164f6:	bd90      	pop	{r4, r7, pc}
   164f8:	00015d71 	.word	0x00015d71
   164fc:	00015db7 	.word	0x00015db7

00016500 <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
   16500:	b590      	push	{r4, r7, lr}
   16502:	b085      	sub	sp, #20
   16504:	af00      	add	r7, sp, #0
   16506:	6078      	str	r0, [r7, #4]
   16508:	000a      	movs	r2, r1
   1650a:	1cfb      	adds	r3, r7, #3
   1650c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   1650e:	2308      	movs	r3, #8
   16510:	18fa      	adds	r2, r7, r3
   16512:	6878      	ldr	r0, [r7, #4]
   16514:	2301      	movs	r3, #1
   16516:	2115      	movs	r1, #21
   16518:	4c12      	ldr	r4, [pc, #72]	; (16564 <lsm6dso_xl_offset_weight_set+0x64>)
   1651a:	47a0      	blx	r4
   1651c:	0003      	movs	r3, r0
   1651e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16520:	68fb      	ldr	r3, [r7, #12]
   16522:	2b00      	cmp	r3, #0
   16524:	d119      	bne.n	1655a <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
   16526:	1cfb      	adds	r3, r7, #3
   16528:	781b      	ldrb	r3, [r3, #0]
   1652a:	2201      	movs	r2, #1
   1652c:	4013      	ands	r3, r2
   1652e:	b2da      	uxtb	r2, r3
   16530:	2308      	movs	r3, #8
   16532:	18fb      	adds	r3, r7, r3
   16534:	2101      	movs	r1, #1
   16536:	400a      	ands	r2, r1
   16538:	00d0      	lsls	r0, r2, #3
   1653a:	781a      	ldrb	r2, [r3, #0]
   1653c:	2108      	movs	r1, #8
   1653e:	438a      	bics	r2, r1
   16540:	1c11      	adds	r1, r2, #0
   16542:	1c02      	adds	r2, r0, #0
   16544:	430a      	orrs	r2, r1
   16546:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   16548:	2308      	movs	r3, #8
   1654a:	18fa      	adds	r2, r7, r3
   1654c:	6878      	ldr	r0, [r7, #4]
   1654e:	2301      	movs	r3, #1
   16550:	2115      	movs	r1, #21
   16552:	4c05      	ldr	r4, [pc, #20]	; (16568 <lsm6dso_xl_offset_weight_set+0x68>)
   16554:	47a0      	blx	r4
   16556:	0003      	movs	r3, r0
   16558:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1655a:	68fb      	ldr	r3, [r7, #12]
}
   1655c:	0018      	movs	r0, r3
   1655e:	46bd      	mov	sp, r7
   16560:	b005      	add	sp, #20
   16562:	bd90      	pop	{r4, r7, pc}
   16564:	00015d71 	.word	0x00015d71
   16568:	00015db7 	.word	0x00015db7

0001656c <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
   1656c:	b590      	push	{r4, r7, lr}
   1656e:	b085      	sub	sp, #20
   16570:	af00      	add	r7, sp, #0
   16572:	6078      	str	r0, [r7, #4]
   16574:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
   16576:	2308      	movs	r3, #8
   16578:	18fa      	adds	r2, r7, r3
   1657a:	6878      	ldr	r0, [r7, #4]
   1657c:	2301      	movs	r3, #1
   1657e:	211e      	movs	r1, #30
   16580:	4c08      	ldr	r4, [pc, #32]	; (165a4 <lsm6dso_xl_flag_data_ready_get+0x38>)
   16582:	47a0      	blx	r4
   16584:	0003      	movs	r3, r0
   16586:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
   16588:	2308      	movs	r3, #8
   1658a:	18fb      	adds	r3, r7, r3
   1658c:	781b      	ldrb	r3, [r3, #0]
   1658e:	07db      	lsls	r3, r3, #31
   16590:	0fdb      	lsrs	r3, r3, #31
   16592:	b2db      	uxtb	r3, r3
   16594:	001a      	movs	r2, r3
   16596:	683b      	ldr	r3, [r7, #0]
   16598:	701a      	strb	r2, [r3, #0]

  return ret;
   1659a:	68fb      	ldr	r3, [r7, #12]
}
   1659c:	0018      	movs	r0, r3
   1659e:	46bd      	mov	sp, r7
   165a0:	b005      	add	sp, #20
   165a2:	bd90      	pop	{r4, r7, pc}
   165a4:	00015d71 	.word	0x00015d71

000165a8 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
   165a8:	b590      	push	{r4, r7, lr}
   165aa:	b087      	sub	sp, #28
   165ac:	af00      	add	r7, sp, #0
   165ae:	6078      	str	r0, [r7, #4]
   165b0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
   165b2:	230c      	movs	r3, #12
   165b4:	18fa      	adds	r2, r7, r3
   165b6:	6878      	ldr	r0, [r7, #4]
   165b8:	2306      	movs	r3, #6
   165ba:	2128      	movs	r1, #40	; 0x28
   165bc:	4c26      	ldr	r4, [pc, #152]	; (16658 <lsm6dso_acceleration_raw_get+0xb0>)
   165be:	47a0      	blx	r4
   165c0:	0003      	movs	r3, r0
   165c2:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
   165c4:	230c      	movs	r3, #12
   165c6:	18fb      	adds	r3, r7, r3
   165c8:	785b      	ldrb	r3, [r3, #1]
   165ca:	b21a      	sxth	r2, r3
   165cc:	683b      	ldr	r3, [r7, #0]
   165ce:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   165d0:	683b      	ldr	r3, [r7, #0]
   165d2:	2200      	movs	r2, #0
   165d4:	5e9b      	ldrsh	r3, [r3, r2]
   165d6:	b29b      	uxth	r3, r3
   165d8:	021b      	lsls	r3, r3, #8
   165da:	b29a      	uxth	r2, r3
   165dc:	230c      	movs	r3, #12
   165de:	18fb      	adds	r3, r7, r3
   165e0:	781b      	ldrb	r3, [r3, #0]
   165e2:	b29b      	uxth	r3, r3
   165e4:	18d3      	adds	r3, r2, r3
   165e6:	b29b      	uxth	r3, r3
   165e8:	b21a      	sxth	r2, r3
   165ea:	683b      	ldr	r3, [r7, #0]
   165ec:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
   165ee:	683b      	ldr	r3, [r7, #0]
   165f0:	3302      	adds	r3, #2
   165f2:	220c      	movs	r2, #12
   165f4:	18ba      	adds	r2, r7, r2
   165f6:	78d2      	ldrb	r2, [r2, #3]
   165f8:	b212      	sxth	r2, r2
   165fa:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   165fc:	683b      	ldr	r3, [r7, #0]
   165fe:	3302      	adds	r3, #2
   16600:	683a      	ldr	r2, [r7, #0]
   16602:	3202      	adds	r2, #2
   16604:	2100      	movs	r1, #0
   16606:	5e52      	ldrsh	r2, [r2, r1]
   16608:	b292      	uxth	r2, r2
   1660a:	0212      	lsls	r2, r2, #8
   1660c:	b291      	uxth	r1, r2
   1660e:	220c      	movs	r2, #12
   16610:	18ba      	adds	r2, r7, r2
   16612:	7892      	ldrb	r2, [r2, #2]
   16614:	b292      	uxth	r2, r2
   16616:	188a      	adds	r2, r1, r2
   16618:	b292      	uxth	r2, r2
   1661a:	b212      	sxth	r2, r2
   1661c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
   1661e:	683b      	ldr	r3, [r7, #0]
   16620:	3304      	adds	r3, #4
   16622:	220c      	movs	r2, #12
   16624:	18ba      	adds	r2, r7, r2
   16626:	7952      	ldrb	r2, [r2, #5]
   16628:	b212      	sxth	r2, r2
   1662a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   1662c:	683b      	ldr	r3, [r7, #0]
   1662e:	3304      	adds	r3, #4
   16630:	683a      	ldr	r2, [r7, #0]
   16632:	3204      	adds	r2, #4
   16634:	2100      	movs	r1, #0
   16636:	5e52      	ldrsh	r2, [r2, r1]
   16638:	b292      	uxth	r2, r2
   1663a:	0212      	lsls	r2, r2, #8
   1663c:	b291      	uxth	r1, r2
   1663e:	220c      	movs	r2, #12
   16640:	18ba      	adds	r2, r7, r2
   16642:	7912      	ldrb	r2, [r2, #4]
   16644:	b292      	uxth	r2, r2
   16646:	188a      	adds	r2, r1, r2
   16648:	b292      	uxth	r2, r2
   1664a:	b212      	sxth	r2, r2
   1664c:	801a      	strh	r2, [r3, #0]

  return ret;
   1664e:	697b      	ldr	r3, [r7, #20]
}
   16650:	0018      	movs	r0, r3
   16652:	46bd      	mov	sp, r7
   16654:	b007      	add	sp, #28
   16656:	bd90      	pop	{r4, r7, pc}
   16658:	00015d71 	.word	0x00015d71

0001665c <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
   1665c:	b590      	push	{r4, r7, lr}
   1665e:	b085      	sub	sp, #20
   16660:	af00      	add	r7, sp, #0
   16662:	6078      	str	r0, [r7, #4]
   16664:	000a      	movs	r2, r1
   16666:	1cfb      	adds	r3, r7, #3
   16668:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   1666a:	2308      	movs	r3, #8
   1666c:	18fa      	adds	r2, r7, r3
   1666e:	6878      	ldr	r0, [r7, #4]
   16670:	2301      	movs	r3, #1
   16672:	2101      	movs	r1, #1
   16674:	4c11      	ldr	r4, [pc, #68]	; (166bc <lsm6dso_mem_bank_set+0x60>)
   16676:	47a0      	blx	r4
   16678:	0003      	movs	r3, r0
   1667a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   1667c:	68fb      	ldr	r3, [r7, #12]
   1667e:	2b00      	cmp	r3, #0
   16680:	d117      	bne.n	166b2 <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
   16682:	1cfb      	adds	r3, r7, #3
   16684:	781b      	ldrb	r3, [r3, #0]
   16686:	2203      	movs	r2, #3
   16688:	4013      	ands	r3, r2
   1668a:	b2da      	uxtb	r2, r3
   1668c:	2308      	movs	r3, #8
   1668e:	18fb      	adds	r3, r7, r3
   16690:	0190      	lsls	r0, r2, #6
   16692:	781a      	ldrb	r2, [r3, #0]
   16694:	213f      	movs	r1, #63	; 0x3f
   16696:	400a      	ands	r2, r1
   16698:	1c11      	adds	r1, r2, #0
   1669a:	1c02      	adds	r2, r0, #0
   1669c:	430a      	orrs	r2, r1
   1669e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   166a0:	2308      	movs	r3, #8
   166a2:	18fa      	adds	r2, r7, r3
   166a4:	6878      	ldr	r0, [r7, #4]
   166a6:	2301      	movs	r3, #1
   166a8:	2101      	movs	r1, #1
   166aa:	4c05      	ldr	r4, [pc, #20]	; (166c0 <lsm6dso_mem_bank_set+0x64>)
   166ac:	47a0      	blx	r4
   166ae:	0003      	movs	r3, r0
   166b0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   166b2:	68fb      	ldr	r3, [r7, #12]
}
   166b4:	0018      	movs	r0, r3
   166b6:	46bd      	mov	sp, r7
   166b8:	b005      	add	sp, #20
   166ba:	bd90      	pop	{r4, r7, pc}
   166bc:	00015d71 	.word	0x00015d71
   166c0:	00015db7 	.word	0x00015db7

000166c4 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   166c4:	b590      	push	{r4, r7, lr}
   166c6:	b085      	sub	sp, #20
   166c8:	af00      	add	r7, sp, #0
   166ca:	6078      	str	r0, [r7, #4]
   166cc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
   166ce:	683a      	ldr	r2, [r7, #0]
   166d0:	6878      	ldr	r0, [r7, #4]
   166d2:	2301      	movs	r3, #1
   166d4:	210f      	movs	r1, #15
   166d6:	4c04      	ldr	r4, [pc, #16]	; (166e8 <lsm6dso_device_id_get+0x24>)
   166d8:	47a0      	blx	r4
   166da:	0003      	movs	r3, r0
   166dc:	60fb      	str	r3, [r7, #12]

  return ret;
   166de:	68fb      	ldr	r3, [r7, #12]
}
   166e0:	0018      	movs	r0, r3
   166e2:	46bd      	mov	sp, r7
   166e4:	b005      	add	sp, #20
   166e6:	bd90      	pop	{r4, r7, pc}
   166e8:	00015d71 	.word	0x00015d71

000166ec <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
   166ec:	b590      	push	{r4, r7, lr}
   166ee:	b085      	sub	sp, #20
   166f0:	af00      	add	r7, sp, #0
   166f2:	6078      	str	r0, [r7, #4]
   166f4:	000a      	movs	r2, r1
   166f6:	1cfb      	adds	r3, r7, #3
   166f8:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   166fa:	2308      	movs	r3, #8
   166fc:	18fa      	adds	r2, r7, r3
   166fe:	6878      	ldr	r0, [r7, #4]
   16700:	2301      	movs	r3, #1
   16702:	2112      	movs	r1, #18
   16704:	4c12      	ldr	r4, [pc, #72]	; (16750 <lsm6dso_reset_set+0x64>)
   16706:	47a0      	blx	r4
   16708:	0003      	movs	r3, r0
   1670a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   1670c:	68fb      	ldr	r3, [r7, #12]
   1670e:	2b00      	cmp	r3, #0
   16710:	d119      	bne.n	16746 <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
   16712:	1cfb      	adds	r3, r7, #3
   16714:	781b      	ldrb	r3, [r3, #0]
   16716:	2201      	movs	r2, #1
   16718:	4013      	ands	r3, r2
   1671a:	b2da      	uxtb	r2, r3
   1671c:	2308      	movs	r3, #8
   1671e:	18fb      	adds	r3, r7, r3
   16720:	2101      	movs	r1, #1
   16722:	400a      	ands	r2, r1
   16724:	0010      	movs	r0, r2
   16726:	781a      	ldrb	r2, [r3, #0]
   16728:	2101      	movs	r1, #1
   1672a:	438a      	bics	r2, r1
   1672c:	1c11      	adds	r1, r2, #0
   1672e:	1c02      	adds	r2, r0, #0
   16730:	430a      	orrs	r2, r1
   16732:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   16734:	2308      	movs	r3, #8
   16736:	18fa      	adds	r2, r7, r3
   16738:	6878      	ldr	r0, [r7, #4]
   1673a:	2301      	movs	r3, #1
   1673c:	2112      	movs	r1, #18
   1673e:	4c05      	ldr	r4, [pc, #20]	; (16754 <lsm6dso_reset_set+0x68>)
   16740:	47a0      	blx	r4
   16742:	0003      	movs	r3, r0
   16744:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   16746:	68fb      	ldr	r3, [r7, #12]
}
   16748:	0018      	movs	r0, r3
   1674a:	46bd      	mov	sp, r7
   1674c:	b005      	add	sp, #20
   1674e:	bd90      	pop	{r4, r7, pc}
   16750:	00015d71 	.word	0x00015d71
   16754:	00015db7 	.word	0x00015db7

00016758 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
   16758:	b590      	push	{r4, r7, lr}
   1675a:	b085      	sub	sp, #20
   1675c:	af00      	add	r7, sp, #0
   1675e:	6078      	str	r0, [r7, #4]
   16760:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   16762:	2308      	movs	r3, #8
   16764:	18fa      	adds	r2, r7, r3
   16766:	6878      	ldr	r0, [r7, #4]
   16768:	2301      	movs	r3, #1
   1676a:	2112      	movs	r1, #18
   1676c:	4c08      	ldr	r4, [pc, #32]	; (16790 <lsm6dso_reset_get+0x38>)
   1676e:	47a0      	blx	r4
   16770:	0003      	movs	r3, r0
   16772:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
   16774:	2308      	movs	r3, #8
   16776:	18fb      	adds	r3, r7, r3
   16778:	781b      	ldrb	r3, [r3, #0]
   1677a:	07db      	lsls	r3, r3, #31
   1677c:	0fdb      	lsrs	r3, r3, #31
   1677e:	b2db      	uxtb	r3, r3
   16780:	001a      	movs	r2, r3
   16782:	683b      	ldr	r3, [r7, #0]
   16784:	701a      	strb	r2, [r3, #0]

  return ret;
   16786:	68fb      	ldr	r3, [r7, #12]
}
   16788:	0018      	movs	r0, r3
   1678a:	46bd      	mov	sp, r7
   1678c:	b005      	add	sp, #20
   1678e:	bd90      	pop	{r4, r7, pc}
   16790:	00015d71 	.word	0x00015d71

00016794 <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
   16794:	b590      	push	{r4, r7, lr}
   16796:	b085      	sub	sp, #20
   16798:	af00      	add	r7, sp, #0
   1679a:	6078      	str	r0, [r7, #4]
   1679c:	000a      	movs	r2, r1
   1679e:	1cfb      	adds	r3, r7, #3
   167a0:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   167a2:	2308      	movs	r3, #8
   167a4:	18fa      	adds	r2, r7, r3
   167a6:	6878      	ldr	r0, [r7, #4]
   167a8:	2301      	movs	r3, #1
   167aa:	2110      	movs	r1, #16
   167ac:	4c12      	ldr	r4, [pc, #72]	; (167f8 <lsm6dso_xl_filter_lp2_set+0x64>)
   167ae:	47a0      	blx	r4
   167b0:	0003      	movs	r3, r0
   167b2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   167b4:	68fb      	ldr	r3, [r7, #12]
   167b6:	2b00      	cmp	r3, #0
   167b8:	d119      	bne.n	167ee <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
   167ba:	1cfb      	adds	r3, r7, #3
   167bc:	781b      	ldrb	r3, [r3, #0]
   167be:	2201      	movs	r2, #1
   167c0:	4013      	ands	r3, r2
   167c2:	b2da      	uxtb	r2, r3
   167c4:	2308      	movs	r3, #8
   167c6:	18fb      	adds	r3, r7, r3
   167c8:	2101      	movs	r1, #1
   167ca:	400a      	ands	r2, r1
   167cc:	1890      	adds	r0, r2, r2
   167ce:	781a      	ldrb	r2, [r3, #0]
   167d0:	2102      	movs	r1, #2
   167d2:	438a      	bics	r2, r1
   167d4:	1c11      	adds	r1, r2, #0
   167d6:	1c02      	adds	r2, r0, #0
   167d8:	430a      	orrs	r2, r1
   167da:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   167dc:	2308      	movs	r3, #8
   167de:	18fa      	adds	r2, r7, r3
   167e0:	6878      	ldr	r0, [r7, #4]
   167e2:	2301      	movs	r3, #1
   167e4:	2110      	movs	r1, #16
   167e6:	4c05      	ldr	r4, [pc, #20]	; (167fc <lsm6dso_xl_filter_lp2_set+0x68>)
   167e8:	47a0      	blx	r4
   167ea:	0003      	movs	r3, r0
   167ec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   167ee:	68fb      	ldr	r3, [r7, #12]
}
   167f0:	0018      	movs	r0, r3
   167f2:	46bd      	mov	sp, r7
   167f4:	b005      	add	sp, #20
   167f6:	bd90      	pop	{r4, r7, pc}
   167f8:	00015d71 	.word	0x00015d71
   167fc:	00015db7 	.word	0x00015db7

00016800 <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
   16800:	b590      	push	{r4, r7, lr}
   16802:	b085      	sub	sp, #20
   16804:	af00      	add	r7, sp, #0
   16806:	6078      	str	r0, [r7, #4]
   16808:	000a      	movs	r2, r1
   1680a:	1cfb      	adds	r3, r7, #3
   1680c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   1680e:	2308      	movs	r3, #8
   16810:	18fa      	adds	r2, r7, r3
   16812:	6878      	ldr	r0, [r7, #4]
   16814:	2301      	movs	r3, #1
   16816:	2117      	movs	r1, #23
   16818:	4c25      	ldr	r4, [pc, #148]	; (168b0 <lsm6dso_xl_hp_path_on_out_set+0xb0>)
   1681a:	47a0      	blx	r4
   1681c:	0003      	movs	r3, r0
   1681e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16820:	68fb      	ldr	r3, [r7, #12]
   16822:	2b00      	cmp	r3, #0
   16824:	d13f      	bne.n	168a6 <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
   16826:	1cfb      	adds	r3, r7, #3
   16828:	781b      	ldrb	r3, [r3, #0]
   1682a:	091b      	lsrs	r3, r3, #4
   1682c:	b2db      	uxtb	r3, r3
   1682e:	1c1a      	adds	r2, r3, #0
   16830:	2301      	movs	r3, #1
   16832:	4013      	ands	r3, r2
   16834:	b2da      	uxtb	r2, r3
   16836:	2308      	movs	r3, #8
   16838:	18fb      	adds	r3, r7, r3
   1683a:	2101      	movs	r1, #1
   1683c:	400a      	ands	r2, r1
   1683e:	0090      	lsls	r0, r2, #2
   16840:	781a      	ldrb	r2, [r3, #0]
   16842:	2104      	movs	r1, #4
   16844:	438a      	bics	r2, r1
   16846:	1c11      	adds	r1, r2, #0
   16848:	1c02      	adds	r2, r0, #0
   1684a:	430a      	orrs	r2, r1
   1684c:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
   1684e:	1cfb      	adds	r3, r7, #3
   16850:	781b      	ldrb	r3, [r3, #0]
   16852:	095b      	lsrs	r3, r3, #5
   16854:	b2db      	uxtb	r3, r3
   16856:	1c1a      	adds	r2, r3, #0
   16858:	2301      	movs	r3, #1
   1685a:	4013      	ands	r3, r2
   1685c:	b2da      	uxtb	r2, r3
   1685e:	2308      	movs	r3, #8
   16860:	18fb      	adds	r3, r7, r3
   16862:	2101      	movs	r1, #1
   16864:	400a      	ands	r2, r1
   16866:	0110      	lsls	r0, r2, #4
   16868:	781a      	ldrb	r2, [r3, #0]
   1686a:	2110      	movs	r1, #16
   1686c:	438a      	bics	r2, r1
   1686e:	1c11      	adds	r1, r2, #0
   16870:	1c02      	adds	r2, r0, #0
   16872:	430a      	orrs	r2, r1
   16874:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
   16876:	1cfb      	adds	r3, r7, #3
   16878:	781b      	ldrb	r3, [r3, #0]
   1687a:	2207      	movs	r2, #7
   1687c:	4013      	ands	r3, r2
   1687e:	b2da      	uxtb	r2, r3
   16880:	2308      	movs	r3, #8
   16882:	18fb      	adds	r3, r7, r3
   16884:	0150      	lsls	r0, r2, #5
   16886:	781a      	ldrb	r2, [r3, #0]
   16888:	211f      	movs	r1, #31
   1688a:	400a      	ands	r2, r1
   1688c:	1c11      	adds	r1, r2, #0
   1688e:	1c02      	adds	r2, r0, #0
   16890:	430a      	orrs	r2, r1
   16892:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   16894:	2308      	movs	r3, #8
   16896:	18fa      	adds	r2, r7, r3
   16898:	6878      	ldr	r0, [r7, #4]
   1689a:	2301      	movs	r3, #1
   1689c:	2117      	movs	r1, #23
   1689e:	4c05      	ldr	r4, [pc, #20]	; (168b4 <lsm6dso_xl_hp_path_on_out_set+0xb4>)
   168a0:	47a0      	blx	r4
   168a2:	0003      	movs	r3, r0
   168a4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   168a6:	68fb      	ldr	r3, [r7, #12]
}
   168a8:	0018      	movs	r0, r3
   168aa:	46bd      	mov	sp, r7
   168ac:	b005      	add	sp, #20
   168ae:	bd90      	pop	{r4, r7, pc}
   168b0:	00015d71 	.word	0x00015d71
   168b4:	00015db7 	.word	0x00015db7

000168b8 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
   168b8:	b590      	push	{r4, r7, lr}
   168ba:	b087      	sub	sp, #28
   168bc:	af00      	add	r7, sp, #0
   168be:	6078      	str	r0, [r7, #4]
   168c0:	000a      	movs	r2, r1
   168c2:	1cfb      	adds	r3, r7, #3
   168c4:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   168c6:	230c      	movs	r3, #12
   168c8:	18fa      	adds	r2, r7, r3
   168ca:	6878      	ldr	r0, [r7, #4]
   168cc:	2301      	movs	r3, #1
   168ce:	2118      	movs	r1, #24
   168d0:	4c28      	ldr	r4, [pc, #160]	; (16974 <lsm6dso_i3c_disable_set+0xbc>)
   168d2:	47a0      	blx	r4
   168d4:	0003      	movs	r3, r0
   168d6:	617b      	str	r3, [r7, #20]

  if (ret == 0)
   168d8:	697b      	ldr	r3, [r7, #20]
   168da:	2b00      	cmp	r3, #0
   168dc:	d11c      	bne.n	16918 <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
   168de:	1cfb      	adds	r3, r7, #3
   168e0:	781b      	ldrb	r3, [r3, #0]
   168e2:	09db      	lsrs	r3, r3, #7
   168e4:	b2db      	uxtb	r3, r3
   168e6:	1c1a      	adds	r2, r3, #0
   168e8:	2301      	movs	r3, #1
   168ea:	4013      	ands	r3, r2
   168ec:	b2da      	uxtb	r2, r3
   168ee:	230c      	movs	r3, #12
   168f0:	18fb      	adds	r3, r7, r3
   168f2:	2101      	movs	r1, #1
   168f4:	400a      	ands	r2, r1
   168f6:	1890      	adds	r0, r2, r2
   168f8:	781a      	ldrb	r2, [r3, #0]
   168fa:	2102      	movs	r1, #2
   168fc:	438a      	bics	r2, r1
   168fe:	1c11      	adds	r1, r2, #0
   16900:	1c02      	adds	r2, r0, #0
   16902:	430a      	orrs	r2, r1
   16904:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   16906:	230c      	movs	r3, #12
   16908:	18fa      	adds	r2, r7, r3
   1690a:	6878      	ldr	r0, [r7, #4]
   1690c:	2301      	movs	r3, #1
   1690e:	2118      	movs	r1, #24
   16910:	4c19      	ldr	r4, [pc, #100]	; (16978 <lsm6dso_i3c_disable_set+0xc0>)
   16912:	47a0      	blx	r4
   16914:	0003      	movs	r3, r0
   16916:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
   16918:	697b      	ldr	r3, [r7, #20]
   1691a:	2b00      	cmp	r3, #0
   1691c:	d108      	bne.n	16930 <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   1691e:	2310      	movs	r3, #16
   16920:	18fa      	adds	r2, r7, r3
   16922:	6878      	ldr	r0, [r7, #4]
   16924:	2301      	movs	r3, #1
   16926:	2162      	movs	r1, #98	; 0x62
   16928:	4c12      	ldr	r4, [pc, #72]	; (16974 <lsm6dso_i3c_disable_set+0xbc>)
   1692a:	47a0      	blx	r4
   1692c:	0003      	movs	r3, r0
   1692e:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
   16930:	697b      	ldr	r3, [r7, #20]
   16932:	2b00      	cmp	r3, #0
   16934:	d119      	bne.n	1696a <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
   16936:	1cfb      	adds	r3, r7, #3
   16938:	781b      	ldrb	r3, [r3, #0]
   1693a:	2203      	movs	r2, #3
   1693c:	4013      	ands	r3, r2
   1693e:	b2da      	uxtb	r2, r3
   16940:	2310      	movs	r3, #16
   16942:	18fb      	adds	r3, r7, r3
   16944:	2103      	movs	r1, #3
   16946:	400a      	ands	r2, r1
   16948:	00d0      	lsls	r0, r2, #3
   1694a:	781a      	ldrb	r2, [r3, #0]
   1694c:	2118      	movs	r1, #24
   1694e:	438a      	bics	r2, r1
   16950:	1c11      	adds	r1, r2, #0
   16952:	1c02      	adds	r2, r0, #0
   16954:	430a      	orrs	r2, r1
   16956:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   16958:	2310      	movs	r3, #16
   1695a:	18fa      	adds	r2, r7, r3
   1695c:	6878      	ldr	r0, [r7, #4]
   1695e:	2301      	movs	r3, #1
   16960:	2162      	movs	r1, #98	; 0x62
   16962:	4c05      	ldr	r4, [pc, #20]	; (16978 <lsm6dso_i3c_disable_set+0xc0>)
   16964:	47a0      	blx	r4
   16966:	0003      	movs	r3, r0
   16968:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
   1696a:	697b      	ldr	r3, [r7, #20]
}
   1696c:	0018      	movs	r0, r3
   1696e:	46bd      	mov	sp, r7
   16970:	b007      	add	sp, #28
   16972:	bd90      	pop	{r4, r7, pc}
   16974:	00015d71 	.word	0x00015d71
   16978:	00015db7 	.word	0x00015db7

0001697c <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
   1697c:	b590      	push	{r4, r7, lr}
   1697e:	b085      	sub	sp, #20
   16980:	af00      	add	r7, sp, #0
   16982:	6078      	str	r0, [r7, #4]
   16984:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   16986:	687b      	ldr	r3, [r7, #4]
   16988:	2102      	movs	r1, #2
   1698a:	0018      	movs	r0, r3
   1698c:	4b0e      	ldr	r3, [pc, #56]	; (169c8 <lsm6dso_fsm_enable_get+0x4c>)
   1698e:	4798      	blx	r3
   16990:	0003      	movs	r3, r0
   16992:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16994:	68fb      	ldr	r3, [r7, #12]
   16996:	2b00      	cmp	r3, #0
   16998:	d107      	bne.n	169aa <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
   1699a:	683a      	ldr	r2, [r7, #0]
   1699c:	6878      	ldr	r0, [r7, #4]
   1699e:	2302      	movs	r3, #2
   169a0:	2146      	movs	r1, #70	; 0x46
   169a2:	4c0a      	ldr	r4, [pc, #40]	; (169cc <lsm6dso_fsm_enable_get+0x50>)
   169a4:	47a0      	blx	r4
   169a6:	0003      	movs	r3, r0
   169a8:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
   169aa:	68fb      	ldr	r3, [r7, #12]
   169ac:	2b00      	cmp	r3, #0
   169ae:	d106      	bne.n	169be <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   169b0:	687b      	ldr	r3, [r7, #4]
   169b2:	2100      	movs	r1, #0
   169b4:	0018      	movs	r0, r3
   169b6:	4b04      	ldr	r3, [pc, #16]	; (169c8 <lsm6dso_fsm_enable_get+0x4c>)
   169b8:	4798      	blx	r3
   169ba:	0003      	movs	r3, r0
   169bc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   169be:	68fb      	ldr	r3, [r7, #12]
}
   169c0:	0018      	movs	r0, r3
   169c2:	46bd      	mov	sp, r7
   169c4:	b005      	add	sp, #20
   169c6:	bd90      	pop	{r4, r7, pc}
   169c8:	0001665d 	.word	0x0001665d
   169cc:	00015d71 	.word	0x00015d71

000169d0 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
   169d0:	b590      	push	{r4, r7, lr}
   169d2:	b085      	sub	sp, #20
   169d4:	af00      	add	r7, sp, #0
   169d6:	6078      	str	r0, [r7, #4]
   169d8:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   169da:	687b      	ldr	r3, [r7, #4]
   169dc:	2102      	movs	r1, #2
   169de:	0018      	movs	r0, r3
   169e0:	4b21      	ldr	r3, [pc, #132]	; (16a68 <lsm6dso_fsm_data_rate_get+0x98>)
   169e2:	4798      	blx	r3
   169e4:	0003      	movs	r3, r0
   169e6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   169e8:	68fb      	ldr	r3, [r7, #12]
   169ea:	2b00      	cmp	r3, #0
   169ec:	d108      	bne.n	16a00 <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
   169ee:	2308      	movs	r3, #8
   169f0:	18fa      	adds	r2, r7, r3
   169f2:	6878      	ldr	r0, [r7, #4]
   169f4:	2301      	movs	r3, #1
   169f6:	215f      	movs	r1, #95	; 0x5f
   169f8:	4c1c      	ldr	r4, [pc, #112]	; (16a6c <lsm6dso_fsm_data_rate_get+0x9c>)
   169fa:	47a0      	blx	r4
   169fc:	0003      	movs	r3, r0
   169fe:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
   16a00:	68fb      	ldr	r3, [r7, #12]
   16a02:	2b00      	cmp	r3, #0
   16a04:	d12b      	bne.n	16a5e <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
   16a06:	2308      	movs	r3, #8
   16a08:	18fb      	adds	r3, r7, r3
   16a0a:	781b      	ldrb	r3, [r3, #0]
   16a0c:	06db      	lsls	r3, r3, #27
   16a0e:	0f9b      	lsrs	r3, r3, #30
   16a10:	b2db      	uxtb	r3, r3
   16a12:	2b01      	cmp	r3, #1
   16a14:	d00c      	beq.n	16a30 <lsm6dso_fsm_data_rate_get+0x60>
   16a16:	dc02      	bgt.n	16a1e <lsm6dso_fsm_data_rate_get+0x4e>
   16a18:	2b00      	cmp	r3, #0
   16a1a:	d005      	beq.n	16a28 <lsm6dso_fsm_data_rate_get+0x58>
   16a1c:	e014      	b.n	16a48 <lsm6dso_fsm_data_rate_get+0x78>
   16a1e:	2b02      	cmp	r3, #2
   16a20:	d00a      	beq.n	16a38 <lsm6dso_fsm_data_rate_get+0x68>
   16a22:	2b03      	cmp	r3, #3
   16a24:	d00c      	beq.n	16a40 <lsm6dso_fsm_data_rate_get+0x70>
   16a26:	e00f      	b.n	16a48 <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   16a28:	683b      	ldr	r3, [r7, #0]
   16a2a:	2200      	movs	r2, #0
   16a2c:	701a      	strb	r2, [r3, #0]
        break;
   16a2e:	e00f      	b.n	16a50 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
   16a30:	683b      	ldr	r3, [r7, #0]
   16a32:	2201      	movs	r2, #1
   16a34:	701a      	strb	r2, [r3, #0]
        break;
   16a36:	e00b      	b.n	16a50 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
   16a38:	683b      	ldr	r3, [r7, #0]
   16a3a:	2202      	movs	r2, #2
   16a3c:	701a      	strb	r2, [r3, #0]
        break;
   16a3e:	e007      	b.n	16a50 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
   16a40:	683b      	ldr	r3, [r7, #0]
   16a42:	2203      	movs	r2, #3
   16a44:	701a      	strb	r2, [r3, #0]
        break;
   16a46:	e003      	b.n	16a50 <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   16a48:	683b      	ldr	r3, [r7, #0]
   16a4a:	2200      	movs	r2, #0
   16a4c:	701a      	strb	r2, [r3, #0]
        break;
   16a4e:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   16a50:	687b      	ldr	r3, [r7, #4]
   16a52:	2100      	movs	r1, #0
   16a54:	0018      	movs	r0, r3
   16a56:	4b04      	ldr	r3, [pc, #16]	; (16a68 <lsm6dso_fsm_data_rate_get+0x98>)
   16a58:	4798      	blx	r3
   16a5a:	0003      	movs	r3, r0
   16a5c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   16a5e:	68fb      	ldr	r3, [r7, #12]
}
   16a60:	0018      	movs	r0, r3
   16a62:	46bd      	mov	sp, r7
   16a64:	b005      	add	sp, #20
   16a66:	bd90      	pop	{r4, r7, pc}
   16a68:	0001665d 	.word	0x0001665d
   16a6c:	00015d71 	.word	0x00015d71

00016a70 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   16a70:	b580      	push	{r7, lr}
   16a72:	b084      	sub	sp, #16
   16a74:	af00      	add	r7, sp, #0
   16a76:	60f8      	str	r0, [r7, #12]
   16a78:	0008      	movs	r0, r1
   16a7a:	607a      	str	r2, [r7, #4]
   16a7c:	0019      	movs	r1, r3
   16a7e:	230b      	movs	r3, #11
   16a80:	18fb      	adds	r3, r7, r3
   16a82:	1c02      	adds	r2, r0, #0
   16a84:	701a      	strb	r2, [r3, #0]
   16a86:	2308      	movs	r3, #8
   16a88:	18fb      	adds	r3, r7, r3
   16a8a:	1c0a      	adds	r2, r1, #0
   16a8c:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
return 0;
   16a8e:	2300      	movs	r3, #0

}
   16a90:	0018      	movs	r0, r3
   16a92:	46bd      	mov	sp, r7
   16a94:	b004      	add	sp, #16
   16a96:	bd80      	pop	{r7, pc}

00016a98 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   16a98:	b580      	push	{r7, lr}
   16a9a:	b084      	sub	sp, #16
   16a9c:	af00      	add	r7, sp, #0
   16a9e:	60f8      	str	r0, [r7, #12]
   16aa0:	0008      	movs	r0, r1
   16aa2:	607a      	str	r2, [r7, #4]
   16aa4:	0019      	movs	r1, r3
   16aa6:	230b      	movs	r3, #11
   16aa8:	18fb      	adds	r3, r7, r3
   16aaa:	1c02      	adds	r2, r0, #0
   16aac:	701a      	strb	r2, [r3, #0]
   16aae:	2308      	movs	r3, #8
   16ab0:	18fb      	adds	r3, r7, r3
   16ab2:	1c0a      	adds	r2, r1, #0
   16ab4:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
return 0;
   16ab6:	2300      	movs	r3, #0


}
   16ab8:	0018      	movs	r0, r3
   16aba:	46bd      	mov	sp, r7
   16abc:	b004      	add	sp, #16
   16abe:	bd80      	pop	{r7, pc}

00016ac0 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
   16ac0:	b580      	push	{r7, lr}
   16ac2:	af00      	add	r7, sp, #0
return &dev_ctx;
   16ac4:	4b01      	ldr	r3, [pc, #4]	; (16acc <GetImuStruct+0xc>)
}
   16ac6:	0018      	movs	r0, r3
   16ac8:	46bd      	mov	sp, r7
   16aca:	bd80      	pop	{r7, pc}
   16acc:	20000014 	.word	0x20000014

00016ad0 <InitImu>:



int32_t InitImu(void)
{
   16ad0:	b580      	push	{r7, lr}
   16ad2:	b082      	sub	sp, #8
   16ad4:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
   16ad6:	2300      	movs	r3, #0
   16ad8:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
   16ada:	4b23      	ldr	r3, [pc, #140]	; (16b68 <InitImu+0x98>)
   16adc:	2101      	movs	r1, #1
   16ade:	0018      	movs	r0, r3
   16ae0:	4b22      	ldr	r3, [pc, #136]	; (16b6c <InitImu+0x9c>)
   16ae2:	4798      	blx	r3
   16ae4:	0003      	movs	r3, r0
   16ae6:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
   16ae8:	1cfa      	adds	r2, r7, #3
   16aea:	4b1f      	ldr	r3, [pc, #124]	; (16b68 <InitImu+0x98>)
   16aec:	0011      	movs	r1, r2
   16aee:	0018      	movs	r0, r3
   16af0:	4b1f      	ldr	r3, [pc, #124]	; (16b70 <InitImu+0xa0>)
   16af2:	4798      	blx	r3
   16af4:	0002      	movs	r2, r0
   16af6:	687b      	ldr	r3, [r7, #4]
   16af8:	4313      	orrs	r3, r2
   16afa:	607b      	str	r3, [r7, #4]
  } while (rst);
   16afc:	1cfb      	adds	r3, r7, #3
   16afe:	781b      	ldrb	r3, [r3, #0]
   16b00:	2b00      	cmp	r3, #0
   16b02:	d1f1      	bne.n	16ae8 <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
   16b04:	4b18      	ldr	r3, [pc, #96]	; (16b68 <InitImu+0x98>)
   16b06:	2180      	movs	r1, #128	; 0x80
   16b08:	0018      	movs	r0, r3
   16b0a:	4b1a      	ldr	r3, [pc, #104]	; (16b74 <InitImu+0xa4>)
   16b0c:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
   16b0e:	4b16      	ldr	r3, [pc, #88]	; (16b68 <InitImu+0x98>)
   16b10:	2101      	movs	r1, #1
   16b12:	0018      	movs	r0, r3
   16b14:	4b18      	ldr	r3, [pc, #96]	; (16b78 <InitImu+0xa8>)
   16b16:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
   16b18:	4b13      	ldr	r3, [pc, #76]	; (16b68 <InitImu+0x98>)
   16b1a:	2100      	movs	r1, #0
   16b1c:	0018      	movs	r0, r3
   16b1e:	4b17      	ldr	r3, [pc, #92]	; (16b7c <InitImu+0xac>)
   16b20:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
   16b22:	4b11      	ldr	r3, [pc, #68]	; (16b68 <InitImu+0x98>)
   16b24:	2101      	movs	r1, #1
   16b26:	0018      	movs	r0, r3
   16b28:	4b15      	ldr	r3, [pc, #84]	; (16b80 <InitImu+0xb0>)
   16b2a:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
   16b2c:	4b0e      	ldr	r3, [pc, #56]	; (16b68 <InitImu+0x98>)
   16b2e:	2101      	movs	r1, #1
   16b30:	0018      	movs	r0, r3
   16b32:	4b14      	ldr	r3, [pc, #80]	; (16b84 <InitImu+0xb4>)
   16b34:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
   16b36:	4b0c      	ldr	r3, [pc, #48]	; (16b68 <InitImu+0x98>)
   16b38:	2100      	movs	r1, #0
   16b3a:	0018      	movs	r0, r3
   16b3c:	4b12      	ldr	r3, [pc, #72]	; (16b88 <InitImu+0xb8>)
   16b3e:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
   16b40:	4b09      	ldr	r3, [pc, #36]	; (16b68 <InitImu+0x98>)
   16b42:	2106      	movs	r1, #6
   16b44:	0018      	movs	r0, r3
   16b46:	4b11      	ldr	r3, [pc, #68]	; (16b8c <InitImu+0xbc>)
   16b48:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
   16b4a:	4b07      	ldr	r3, [pc, #28]	; (16b68 <InitImu+0x98>)
   16b4c:	2104      	movs	r1, #4
   16b4e:	0018      	movs	r0, r3
   16b50:	4b0f      	ldr	r3, [pc, #60]	; (16b90 <InitImu+0xc0>)
   16b52:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
   16b54:	4b04      	ldr	r3, [pc, #16]	; (16b68 <InitImu+0x98>)
   16b56:	2101      	movs	r1, #1
   16b58:	0018      	movs	r0, r3
   16b5a:	4b0e      	ldr	r3, [pc, #56]	; (16b94 <InitImu+0xc4>)
   16b5c:	4798      	blx	r3

  return error;
   16b5e:	687b      	ldr	r3, [r7, #4]
}
   16b60:	0018      	movs	r0, r3
   16b62:	46bd      	mov	sp, r7
   16b64:	b002      	add	sp, #8
   16b66:	bd80      	pop	{r7, pc}
   16b68:	20000014 	.word	0x20000014
   16b6c:	000166ed 	.word	0x000166ed
   16b70:	00016759 	.word	0x00016759
   16b74:	000168b9 	.word	0x000168b9
   16b78:	00016495 	.word	0x00016495
   16b7c:	00016501 	.word	0x00016501
   16b80:	00015ea1 	.word	0x00015ea1
   16b84:	000161d1 	.word	0x000161d1
   16b88:	00015e35 	.word	0x00015e35
   16b8c:	00016165 	.word	0x00016165
   16b90:	00016801 	.word	0x00016801
   16b94:	00016795 	.word	0x00016795

00016b98 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16b98:	b580      	push	{r7, lr}
   16b9a:	b084      	sub	sp, #16
   16b9c:	af00      	add	r7, sp, #0
   16b9e:	0002      	movs	r2, r0
   16ba0:	1dfb      	adds	r3, r7, #7
   16ba2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   16ba4:	230f      	movs	r3, #15
   16ba6:	18fb      	adds	r3, r7, r3
   16ba8:	1dfa      	adds	r2, r7, #7
   16baa:	7812      	ldrb	r2, [r2, #0]
   16bac:	09d2      	lsrs	r2, r2, #7
   16bae:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   16bb0:	230e      	movs	r3, #14
   16bb2:	18fb      	adds	r3, r7, r3
   16bb4:	1dfa      	adds	r2, r7, #7
   16bb6:	7812      	ldrb	r2, [r2, #0]
   16bb8:	0952      	lsrs	r2, r2, #5
   16bba:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   16bbc:	4b0d      	ldr	r3, [pc, #52]	; (16bf4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   16bbe:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   16bc0:	230f      	movs	r3, #15
   16bc2:	18fb      	adds	r3, r7, r3
   16bc4:	781b      	ldrb	r3, [r3, #0]
   16bc6:	2b00      	cmp	r3, #0
   16bc8:	d10f      	bne.n	16bea <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   16bca:	230f      	movs	r3, #15
   16bcc:	18fb      	adds	r3, r7, r3
   16bce:	781b      	ldrb	r3, [r3, #0]
   16bd0:	009b      	lsls	r3, r3, #2
   16bd2:	2210      	movs	r2, #16
   16bd4:	4694      	mov	ip, r2
   16bd6:	44bc      	add	ip, r7
   16bd8:	4463      	add	r3, ip
   16bda:	3b08      	subs	r3, #8
   16bdc:	681a      	ldr	r2, [r3, #0]
   16bde:	230e      	movs	r3, #14
   16be0:	18fb      	adds	r3, r7, r3
   16be2:	781b      	ldrb	r3, [r3, #0]
   16be4:	01db      	lsls	r3, r3, #7
   16be6:	18d3      	adds	r3, r2, r3
   16be8:	e000      	b.n	16bec <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   16bea:	2300      	movs	r3, #0
	}
}
   16bec:	0018      	movs	r0, r3
   16bee:	46bd      	mov	sp, r7
   16bf0:	b004      	add	sp, #16
   16bf2:	bd80      	pop	{r7, pc}
   16bf4:	41004400 	.word	0x41004400

00016bf8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16bf8:	b580      	push	{r7, lr}
   16bfa:	b082      	sub	sp, #8
   16bfc:	af00      	add	r7, sp, #0
   16bfe:	0002      	movs	r2, r0
   16c00:	1dfb      	adds	r3, r7, #7
   16c02:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   16c04:	1dfb      	adds	r3, r7, #7
   16c06:	781b      	ldrb	r3, [r3, #0]
   16c08:	0018      	movs	r0, r3
   16c0a:	4b03      	ldr	r3, [pc, #12]	; (16c18 <port_get_group_from_gpio_pin+0x20>)
   16c0c:	4798      	blx	r3
   16c0e:	0003      	movs	r3, r0
}
   16c10:	0018      	movs	r0, r3
   16c12:	46bd      	mov	sp, r7
   16c14:	b002      	add	sp, #8
   16c16:	bd80      	pop	{r7, pc}
   16c18:	00016b99 	.word	0x00016b99

00016c1c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   16c1c:	b580      	push	{r7, lr}
   16c1e:	b082      	sub	sp, #8
   16c20:	af00      	add	r7, sp, #0
   16c22:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   16c24:	687b      	ldr	r3, [r7, #4]
   16c26:	2200      	movs	r2, #0
   16c28:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   16c2a:	687b      	ldr	r3, [r7, #4]
   16c2c:	2201      	movs	r2, #1
   16c2e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   16c30:	687b      	ldr	r3, [r7, #4]
   16c32:	2200      	movs	r2, #0
   16c34:	709a      	strb	r2, [r3, #2]
}
   16c36:	46c0      	nop			; (mov r8, r8)
   16c38:	46bd      	mov	sp, r7
   16c3a:	b002      	add	sp, #8
   16c3c:	bd80      	pop	{r7, pc}
	...

00016c40 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   16c40:	b580      	push	{r7, lr}
   16c42:	b084      	sub	sp, #16
   16c44:	af00      	add	r7, sp, #0
   16c46:	0002      	movs	r2, r0
   16c48:	1dfb      	adds	r3, r7, #7
   16c4a:	701a      	strb	r2, [r3, #0]
   16c4c:	1dbb      	adds	r3, r7, #6
   16c4e:	1c0a      	adds	r2, r1, #0
   16c50:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   16c52:	1dfb      	adds	r3, r7, #7
   16c54:	781b      	ldrb	r3, [r3, #0]
   16c56:	0018      	movs	r0, r3
   16c58:	4b0d      	ldr	r3, [pc, #52]	; (16c90 <port_pin_set_output_level+0x50>)
   16c5a:	4798      	blx	r3
   16c5c:	0003      	movs	r3, r0
   16c5e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   16c60:	1dfb      	adds	r3, r7, #7
   16c62:	781b      	ldrb	r3, [r3, #0]
   16c64:	221f      	movs	r2, #31
   16c66:	4013      	ands	r3, r2
   16c68:	2201      	movs	r2, #1
   16c6a:	409a      	lsls	r2, r3
   16c6c:	0013      	movs	r3, r2
   16c6e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   16c70:	1dbb      	adds	r3, r7, #6
   16c72:	781b      	ldrb	r3, [r3, #0]
   16c74:	2b00      	cmp	r3, #0
   16c76:	d003      	beq.n	16c80 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   16c78:	68fb      	ldr	r3, [r7, #12]
   16c7a:	68ba      	ldr	r2, [r7, #8]
   16c7c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   16c7e:	e002      	b.n	16c86 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   16c80:	68fb      	ldr	r3, [r7, #12]
   16c82:	68ba      	ldr	r2, [r7, #8]
   16c84:	615a      	str	r2, [r3, #20]
}
   16c86:	46c0      	nop			; (mov r8, r8)
   16c88:	46bd      	mov	sp, r7
   16c8a:	b004      	add	sp, #16
   16c8c:	bd80      	pop	{r7, pc}
   16c8e:	46c0      	nop			; (mov r8, r8)
   16c90:	00016bf9 	.word	0x00016bf9

00016c94 <configure_port_servo_pins>:
#define SERVO_PIN PIN_PA03
bool LOCKER_STATUS_LOCKED = true;
bool LOCKER_STATUS_UNLOCKED = false;
bool locker_status = true;
void configure_port_servo_pins(void)
{
   16c94:	b580      	push	{r7, lr}
   16c96:	b082      	sub	sp, #8
   16c98:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   16c9a:	1d3b      	adds	r3, r7, #4
   16c9c:	0018      	movs	r0, r3
   16c9e:	4b07      	ldr	r3, [pc, #28]	; (16cbc <configure_port_servo_pins+0x28>)
   16ca0:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   16ca2:	1d3b      	adds	r3, r7, #4
   16ca4:	2201      	movs	r2, #1
   16ca6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SERVO_PIN, &config_port_pin);
   16ca8:	1d3b      	adds	r3, r7, #4
   16caa:	0019      	movs	r1, r3
   16cac:	2003      	movs	r0, #3
   16cae:	4b04      	ldr	r3, [pc, #16]	; (16cc0 <configure_port_servo_pins+0x2c>)
   16cb0:	4798      	blx	r3
	
}
   16cb2:	46c0      	nop			; (mov r8, r8)
   16cb4:	46bd      	mov	sp, r7
   16cb6:	b002      	add	sp, #8
   16cb8:	bd80      	pop	{r7, pc}
   16cba:	46c0      	nop			; (mov r8, r8)
   16cbc:	00016c1d 	.word	0x00016c1d
   16cc0:	00028751 	.word	0x00028751

00016cc4 <lock>:

void lock()
{
   16cc4:	b580      	push	{r7, lr}
   16cc6:	b082      	sub	sp, #8
   16cc8:	af00      	add	r7, sp, #0
	int count = 0;
   16cca:	2300      	movs	r3, #0
   16ccc:	607b      	str	r3, [r7, #4]
	port_pin_set_output_level(SERVO_PIN,0);
   16cce:	2100      	movs	r1, #0
   16cd0:	2003      	movs	r0, #3
   16cd2:	4b16      	ldr	r3, [pc, #88]	; (16d2c <lock+0x68>)
   16cd4:	4798      	blx	r3
    for(int i = 0;i<1750;i++){
   16cd6:	2300      	movs	r3, #0
   16cd8:	603b      	str	r3, [r7, #0]
   16cda:	e016      	b.n	16d0a <lock+0x46>
		if(count == 4)
   16cdc:	687b      	ldr	r3, [r7, #4]
   16cde:	2b04      	cmp	r3, #4
   16ce0:	d106      	bne.n	16cf0 <lock+0x2c>
		{
			port_pin_set_output_level(SERVO_PIN,1);
   16ce2:	2101      	movs	r1, #1
   16ce4:	2003      	movs	r0, #3
   16ce6:	4b11      	ldr	r3, [pc, #68]	; (16d2c <lock+0x68>)
   16ce8:	4798      	blx	r3
			count = 0;
   16cea:	2300      	movs	r3, #0
   16cec:	607b      	str	r3, [r7, #4]
   16cee:	e003      	b.n	16cf8 <lock+0x34>
			
		}
		else{
			port_pin_set_output_level(SERVO_PIN,0);
   16cf0:	2100      	movs	r1, #0
   16cf2:	2003      	movs	r0, #3
   16cf4:	4b0d      	ldr	r3, [pc, #52]	; (16d2c <lock+0x68>)
   16cf6:	4798      	blx	r3
			
		}
		vTaskDelay(2);
   16cf8:	2002      	movs	r0, #2
   16cfa:	4b0d      	ldr	r3, [pc, #52]	; (16d30 <lock+0x6c>)
   16cfc:	4798      	blx	r3
		//delay_ms(1.5);
		count++;
   16cfe:	687b      	ldr	r3, [r7, #4]
   16d00:	3301      	adds	r3, #1
   16d02:	607b      	str	r3, [r7, #4]
    for(int i = 0;i<1750;i++){
   16d04:	683b      	ldr	r3, [r7, #0]
   16d06:	3301      	adds	r3, #1
   16d08:	603b      	str	r3, [r7, #0]
   16d0a:	683b      	ldr	r3, [r7, #0]
   16d0c:	4a09      	ldr	r2, [pc, #36]	; (16d34 <lock+0x70>)
   16d0e:	4293      	cmp	r3, r2
   16d10:	dde4      	ble.n	16cdc <lock+0x18>
	}
	port_pin_set_output_level(SERVO_PIN,0);
   16d12:	2100      	movs	r1, #0
   16d14:	2003      	movs	r0, #3
   16d16:	4b05      	ldr	r3, [pc, #20]	; (16d2c <lock+0x68>)
   16d18:	4798      	blx	r3
	locker_status = LOCKER_STATUS_LOCKED;
   16d1a:	4b07      	ldr	r3, [pc, #28]	; (16d38 <lock+0x74>)
   16d1c:	781a      	ldrb	r2, [r3, #0]
   16d1e:	4b07      	ldr	r3, [pc, #28]	; (16d3c <lock+0x78>)
   16d20:	701a      	strb	r2, [r3, #0]
}
   16d22:	46c0      	nop			; (mov r8, r8)
   16d24:	46bd      	mov	sp, r7
   16d26:	b002      	add	sp, #8
   16d28:	bd80      	pop	{r7, pc}
   16d2a:	46c0      	nop			; (mov r8, r8)
   16d2c:	00016c41 	.word	0x00016c41
   16d30:	0001e2a1 	.word	0x0001e2a1
   16d34:	000006d5 	.word	0x000006d5
   16d38:	20000020 	.word	0x20000020
   16d3c:	20000021 	.word	0x20000021

00016d40 <unlock>:

void unlock(){
   16d40:	b580      	push	{r7, lr}
   16d42:	b082      	sub	sp, #8
   16d44:	af00      	add	r7, sp, #0
	int count = 0;
   16d46:	2300      	movs	r3, #0
   16d48:	607b      	str	r3, [r7, #4]
	port_pin_set_output_level(SERVO_PIN,0);
   16d4a:	2100      	movs	r1, #0
   16d4c:	2003      	movs	r0, #3
   16d4e:	4b16      	ldr	r3, [pc, #88]	; (16da8 <unlock+0x68>)
   16d50:	4798      	blx	r3
	 for(int i = 0;i<500;i++){
   16d52:	2300      	movs	r3, #0
   16d54:	603b      	str	r3, [r7, #0]
   16d56:	e016      	b.n	16d86 <unlock+0x46>
		if(count == 4)
   16d58:	687b      	ldr	r3, [r7, #4]
   16d5a:	2b04      	cmp	r3, #4
   16d5c:	d106      	bne.n	16d6c <unlock+0x2c>
		{
			port_pin_set_output_level(SERVO_PIN,1);
   16d5e:	2101      	movs	r1, #1
   16d60:	2003      	movs	r0, #3
   16d62:	4b11      	ldr	r3, [pc, #68]	; (16da8 <unlock+0x68>)
   16d64:	4798      	blx	r3
			count = 0;
   16d66:	2300      	movs	r3, #0
   16d68:	607b      	str	r3, [r7, #4]
   16d6a:	e003      	b.n	16d74 <unlock+0x34>
		}
		else{
			port_pin_set_output_level(SERVO_PIN,0);
   16d6c:	2100      	movs	r1, #0
   16d6e:	2003      	movs	r0, #3
   16d70:	4b0d      	ldr	r3, [pc, #52]	; (16da8 <unlock+0x68>)
   16d72:	4798      	blx	r3
		}
		vTaskDelay(7);
   16d74:	2007      	movs	r0, #7
   16d76:	4b0d      	ldr	r3, [pc, #52]	; (16dac <unlock+0x6c>)
   16d78:	4798      	blx	r3
		//delay_ms(2);
		count++;
   16d7a:	687b      	ldr	r3, [r7, #4]
   16d7c:	3301      	adds	r3, #1
   16d7e:	607b      	str	r3, [r7, #4]
	 for(int i = 0;i<500;i++){
   16d80:	683b      	ldr	r3, [r7, #0]
   16d82:	3301      	adds	r3, #1
   16d84:	603b      	str	r3, [r7, #0]
   16d86:	683a      	ldr	r2, [r7, #0]
   16d88:	23f4      	movs	r3, #244	; 0xf4
   16d8a:	33ff      	adds	r3, #255	; 0xff
   16d8c:	429a      	cmp	r2, r3
   16d8e:	dde3      	ble.n	16d58 <unlock+0x18>
	}
	port_pin_set_output_level(SERVO_PIN,0);
   16d90:	2100      	movs	r1, #0
   16d92:	2003      	movs	r0, #3
   16d94:	4b04      	ldr	r3, [pc, #16]	; (16da8 <unlock+0x68>)
   16d96:	4798      	blx	r3
	locker_status = LOCKER_STATUS_UNLOCKED;
   16d98:	4b05      	ldr	r3, [pc, #20]	; (16db0 <unlock+0x70>)
   16d9a:	781a      	ldrb	r2, [r3, #0]
   16d9c:	4b05      	ldr	r3, [pc, #20]	; (16db4 <unlock+0x74>)
   16d9e:	701a      	strb	r2, [r3, #0]
}
   16da0:	46c0      	nop			; (mov r8, r8)
   16da2:	46bd      	mov	sp, r7
   16da4:	b002      	add	sp, #8
   16da6:	bd80      	pop	{r7, pc}
   16da8:	00016c41 	.word	0x00016c41
   16dac:	0001e2a1 	.word	0x0001e2a1
   16db0:	200004a0 	.word	0x200004a0
   16db4:	20000021 	.word	0x20000021

00016db8 <getLock>:
bool getLock(){
   16db8:	b580      	push	{r7, lr}
   16dba:	af00      	add	r7, sp, #0
	return locker_status;
   16dbc:	4b02      	ldr	r3, [pc, #8]	; (16dc8 <getLock+0x10>)
   16dbe:	781b      	ldrb	r3, [r3, #0]
   16dc0:	0018      	movs	r0, r3
   16dc2:	46bd      	mov	sp, r7
   16dc4:	bd80      	pop	{r7, pc}
   16dc6:	46c0      	nop			; (mov r8, r8)
   16dc8:	20000021 	.word	0x20000021

00016dcc <SeesawGetKeypadCount>:

 * @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
 * @note
*/
uint8_t SeesawGetKeypadCount(void)
{
   16dcc:	b580      	push	{r7, lr}
   16dce:	b082      	sub	sp, #8
   16dd0:	af00      	add	r7, sp, #0
    uint8_t count = 0;
   16dd2:	1cfb      	adds	r3, r7, #3
   16dd4:	2200      	movs	r2, #0
   16dd6:	701a      	strb	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   16dd8:	4b11      	ldr	r3, [pc, #68]	; (16e20 <SeesawGetKeypadCount+0x54>)
   16dda:	222e      	movs	r2, #46	; 0x2e
   16ddc:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadGetCount[0];
   16dde:	4b10      	ldr	r3, [pc, #64]	; (16e20 <SeesawGetKeypadCount+0x54>)
   16de0:	4a10      	ldr	r2, [pc, #64]	; (16e24 <SeesawGetKeypadCount+0x58>)
   16de2:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadGetCount);
   16de4:	4b0e      	ldr	r3, [pc, #56]	; (16e20 <SeesawGetKeypadCount+0x54>)
   16de6:	2202      	movs	r2, #2
   16de8:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &count;
   16dea:	4b0d      	ldr	r3, [pc, #52]	; (16e20 <SeesawGetKeypadCount+0x54>)
   16dec:	1cfa      	adds	r2, r7, #3
   16dee:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   16df0:	4b0b      	ldr	r3, [pc, #44]	; (16e20 <SeesawGetKeypadCount+0x54>)
   16df2:	2201      	movs	r2, #1
   16df4:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   16df6:	4b0a      	ldr	r3, [pc, #40]	; (16e20 <SeesawGetKeypadCount+0x54>)
   16df8:	2264      	movs	r2, #100	; 0x64
   16dfa:	2100      	movs	r1, #0
   16dfc:	0018      	movs	r0, r3
   16dfe:	4b0a      	ldr	r3, [pc, #40]	; (16e28 <SeesawGetKeypadCount+0x5c>)
   16e00:	4798      	blx	r3
   16e02:	0003      	movs	r3, r0
   16e04:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   16e06:	687b      	ldr	r3, [r7, #4]
   16e08:	2b00      	cmp	r3, #0
   16e0a:	d003      	beq.n	16e14 <SeesawGetKeypadCount+0x48>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   16e0c:	4b07      	ldr	r3, [pc, #28]	; (16e2c <SeesawGetKeypadCount+0x60>)
   16e0e:	0018      	movs	r0, r3
   16e10:	4b07      	ldr	r3, [pc, #28]	; (16e30 <SeesawGetKeypadCount+0x64>)
   16e12:	4798      	blx	r3
    }
    return count;
   16e14:	1cfb      	adds	r3, r7, #3
   16e16:	781b      	ldrb	r3, [r3, #0]
}
   16e18:	0018      	movs	r0, r3
   16e1a:	46bd      	mov	sp, r7
   16e1c:	b002      	add	sp, #8
   16e1e:	bd80      	pop	{r7, pc}
   16e20:	200044b0 	.word	0x200044b0
   16e24:	000385b0 	.word	0x000385b0
   16e28:	00015b91 	.word	0x00015b91
   16e2c:	00038674 	.word	0x00038674
   16e30:	0001fef5 	.word	0x0001fef5

00016e34 <SeesawReadKeypad>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
{
   16e34:	b580      	push	{r7, lr}
   16e36:	b084      	sub	sp, #16
   16e38:	af00      	add	r7, sp, #0
   16e3a:	6078      	str	r0, [r7, #4]
   16e3c:	000a      	movs	r2, r1
   16e3e:	1cfb      	adds	r3, r7, #3
   16e40:	701a      	strb	r2, [r3, #0]
    if (count == 0) return ERROR_NONE;
   16e42:	1cfb      	adds	r3, r7, #3
   16e44:	781b      	ldrb	r3, [r3, #0]
   16e46:	2b00      	cmp	r3, #0
   16e48:	d101      	bne.n	16e4e <SeesawReadKeypad+0x1a>
   16e4a:	2300      	movs	r3, #0
   16e4c:	e026      	b.n	16e9c <SeesawReadKeypad+0x68>
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   16e4e:	2308      	movs	r3, #8
   16e50:	18fb      	adds	r3, r7, r3
   16e52:	4a14      	ldr	r2, [pc, #80]	; (16ea4 <SeesawReadKeypad+0x70>)
   16e54:	8812      	ldrh	r2, [r2, #0]
   16e56:	801a      	strh	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   16e58:	4b13      	ldr	r3, [pc, #76]	; (16ea8 <SeesawReadKeypad+0x74>)
   16e5a:	222e      	movs	r2, #46	; 0x2e
   16e5c:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t*) &cmd[0];
   16e5e:	4b12      	ldr	r3, [pc, #72]	; (16ea8 <SeesawReadKeypad+0x74>)
   16e60:	2208      	movs	r2, #8
   16e62:	18ba      	adds	r2, r7, r2
   16e64:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   16e66:	4b10      	ldr	r3, [pc, #64]	; (16ea8 <SeesawReadKeypad+0x74>)
   16e68:	2202      	movs	r2, #2
   16e6a:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = buffer;
   16e6c:	4b0e      	ldr	r3, [pc, #56]	; (16ea8 <SeesawReadKeypad+0x74>)
   16e6e:	687a      	ldr	r2, [r7, #4]
   16e70:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = count;
   16e72:	1cfb      	adds	r3, r7, #3
   16e74:	781b      	ldrb	r3, [r3, #0]
   16e76:	b29a      	uxth	r2, r3
   16e78:	4b0b      	ldr	r3, [pc, #44]	; (16ea8 <SeesawReadKeypad+0x74>)
   16e7a:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   16e7c:	4b0a      	ldr	r3, [pc, #40]	; (16ea8 <SeesawReadKeypad+0x74>)
   16e7e:	2264      	movs	r2, #100	; 0x64
   16e80:	2100      	movs	r1, #0
   16e82:	0018      	movs	r0, r3
   16e84:	4b09      	ldr	r3, [pc, #36]	; (16eac <SeesawReadKeypad+0x78>)
   16e86:	4798      	blx	r3
   16e88:	0003      	movs	r3, r0
   16e8a:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   16e8c:	68fb      	ldr	r3, [r7, #12]
   16e8e:	2b00      	cmp	r3, #0
   16e90:	d003      	beq.n	16e9a <SeesawReadKeypad+0x66>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   16e92:	4b07      	ldr	r3, [pc, #28]	; (16eb0 <SeesawReadKeypad+0x7c>)
   16e94:	0018      	movs	r0, r3
   16e96:	4b07      	ldr	r3, [pc, #28]	; (16eb4 <SeesawReadKeypad+0x80>)
   16e98:	4798      	blx	r3
    }
    return error;
   16e9a:	68fb      	ldr	r3, [r7, #12]
}
   16e9c:	0018      	movs	r0, r3
   16e9e:	46bd      	mov	sp, r7
   16ea0:	b004      	add	sp, #16
   16ea2:	bd80      	pop	{r7, pc}
   16ea4:	00038698 	.word	0x00038698
   16ea8:	200044b0 	.word	0x200044b0
   16eac:	00015b91 	.word	0x00015b91
   16eb0:	00038674 	.word	0x00038674
   16eb4:	0001fef5 	.word	0x0001fef5

00016eb8 <SeesawSetLed>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
         FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   16eb8:	b5b0      	push	{r4, r5, r7, lr}
   16eba:	b086      	sub	sp, #24
   16ebc:	af00      	add	r7, sp, #0
   16ebe:	0005      	movs	r5, r0
   16ec0:	000c      	movs	r4, r1
   16ec2:	0010      	movs	r0, r2
   16ec4:	0019      	movs	r1, r3
   16ec6:	1dfb      	adds	r3, r7, #7
   16ec8:	1c2a      	adds	r2, r5, #0
   16eca:	701a      	strb	r2, [r3, #0]
   16ecc:	1dbb      	adds	r3, r7, #6
   16ece:	1c22      	adds	r2, r4, #0
   16ed0:	701a      	strb	r2, [r3, #0]
   16ed2:	1d7b      	adds	r3, r7, #5
   16ed4:	1c02      	adds	r2, r0, #0
   16ed6:	701a      	strb	r2, [r3, #0]
   16ed8:	1d3b      	adds	r3, r7, #4
   16eda:	1c0a      	adds	r2, r1, #0
   16edc:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
   16ede:	2308      	movs	r3, #8
   16ee0:	18fb      	adds	r3, r7, r3
   16ee2:	220e      	movs	r2, #14
   16ee4:	701a      	strb	r2, [r3, #0]
   16ee6:	2308      	movs	r3, #8
   16ee8:	18fb      	adds	r3, r7, r3
   16eea:	2204      	movs	r2, #4
   16eec:	705a      	strb	r2, [r3, #1]
   16eee:	2308      	movs	r3, #8
   16ef0:	18fb      	adds	r3, r7, r3
   16ef2:	2200      	movs	r2, #0
   16ef4:	709a      	strb	r2, [r3, #2]
   16ef6:	2308      	movs	r3, #8
   16ef8:	18fb      	adds	r3, r7, r3
   16efa:	2200      	movs	r2, #0
   16efc:	70da      	strb	r2, [r3, #3]
   16efe:	2308      	movs	r3, #8
   16f00:	18fb      	adds	r3, r7, r3
   16f02:	1d7a      	adds	r2, r7, #5
   16f04:	7812      	ldrb	r2, [r2, #0]
   16f06:	711a      	strb	r2, [r3, #4]
   16f08:	2308      	movs	r3, #8
   16f0a:	18fb      	adds	r3, r7, r3
   16f0c:	1dba      	adds	r2, r7, #6
   16f0e:	7812      	ldrb	r2, [r2, #0]
   16f10:	715a      	strb	r2, [r3, #5]
   16f12:	2308      	movs	r3, #8
   16f14:	18fb      	adds	r3, r7, r3
   16f16:	1d3a      	adds	r2, r7, #4
   16f18:	7812      	ldrb	r2, [r2, #0]
   16f1a:	719a      	strb	r2, [r3, #6]

    uint16_t offset = 3 * key;  // RGB LED
   16f1c:	1dfb      	adds	r3, r7, #7
   16f1e:	781b      	ldrb	r3, [r3, #0]
   16f20:	b29b      	uxth	r3, r3
   16f22:	2216      	movs	r2, #22
   16f24:	18ba      	adds	r2, r7, r2
   16f26:	1c19      	adds	r1, r3, #0
   16f28:	1c0b      	adds	r3, r1, #0
   16f2a:	18db      	adds	r3, r3, r3
   16f2c:	185b      	adds	r3, r3, r1
   16f2e:	8013      	strh	r3, [r2, #0]
    write_buffer1[2] = (offset >> 8);
   16f30:	2316      	movs	r3, #22
   16f32:	18fb      	adds	r3, r7, r3
   16f34:	881b      	ldrh	r3, [r3, #0]
   16f36:	0a1b      	lsrs	r3, r3, #8
   16f38:	b29b      	uxth	r3, r3
   16f3a:	b2da      	uxtb	r2, r3
   16f3c:	2308      	movs	r3, #8
   16f3e:	18fb      	adds	r3, r7, r3
   16f40:	709a      	strb	r2, [r3, #2]
    write_buffer1[3] = (offset);
   16f42:	2316      	movs	r3, #22
   16f44:	18fb      	adds	r3, r7, r3
   16f46:	881b      	ldrh	r3, [r3, #0]
   16f48:	b2da      	uxtb	r2, r3
   16f4a:	2308      	movs	r3, #8
   16f4c:	18fb      	adds	r3, r7, r3
   16f4e:	70da      	strb	r2, [r3, #3]

    seesawData.msgOut = (const uint8_t *)&write_buffer1[0];
   16f50:	4b09      	ldr	r3, [pc, #36]	; (16f78 <SeesawSetLed+0xc0>)
   16f52:	2208      	movs	r2, #8
   16f54:	18ba      	adds	r2, r7, r2
   16f56:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(write_buffer1);
   16f58:	4b07      	ldr	r3, [pc, #28]	; (16f78 <SeesawSetLed+0xc0>)
   16f5a:	2207      	movs	r2, #7
   16f5c:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   16f5e:	4b06      	ldr	r3, [pc, #24]	; (16f78 <SeesawSetLed+0xc0>)
   16f60:	2164      	movs	r1, #100	; 0x64
   16f62:	0018      	movs	r0, r3
   16f64:	4b05      	ldr	r3, [pc, #20]	; (16f7c <SeesawSetLed+0xc4>)
   16f66:	4798      	blx	r3
   16f68:	0003      	movs	r3, r0
   16f6a:	613b      	str	r3, [r7, #16]
    return error;
   16f6c:	693b      	ldr	r3, [r7, #16]
}
   16f6e:	0018      	movs	r0, r3
   16f70:	46bd      	mov	sp, r7
   16f72:	b006      	add	sp, #24
   16f74:	bdb0      	pop	{r4, r5, r7, pc}
   16f76:	46c0      	nop			; (mov r8, r8)
   16f78:	200044b0 	.word	0x200044b0
   16f7c:	00015ab9 	.word	0x00015ab9

00016f80 <SeesawOrderLedUpdate>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*/
int32_t SeesawOrderLedUpdate(void)
{
   16f80:	b580      	push	{r7, lr}
   16f82:	b082      	sub	sp, #8
   16f84:	af00      	add	r7, sp, #0
    uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   16f86:	003b      	movs	r3, r7
   16f88:	4a0a      	ldr	r2, [pc, #40]	; (16fb4 <SeesawOrderLedUpdate+0x34>)
   16f8a:	8812      	ldrh	r2, [r2, #0]
   16f8c:	801a      	strh	r2, [r3, #0]

    seesawData.msgOut = (const uint8_t *) &orderBuffer[0];
   16f8e:	4b0a      	ldr	r3, [pc, #40]	; (16fb8 <SeesawOrderLedUpdate+0x38>)
   16f90:	003a      	movs	r2, r7
   16f92:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(orderBuffer);
   16f94:	4b08      	ldr	r3, [pc, #32]	; (16fb8 <SeesawOrderLedUpdate+0x38>)
   16f96:	2202      	movs	r2, #2
   16f98:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   16f9a:	4b07      	ldr	r3, [pc, #28]	; (16fb8 <SeesawOrderLedUpdate+0x38>)
   16f9c:	2164      	movs	r1, #100	; 0x64
   16f9e:	0018      	movs	r0, r3
   16fa0:	4b06      	ldr	r3, [pc, #24]	; (16fbc <SeesawOrderLedUpdate+0x3c>)
   16fa2:	4798      	blx	r3
   16fa4:	0003      	movs	r3, r0
   16fa6:	607b      	str	r3, [r7, #4]
    return error;
   16fa8:	687b      	ldr	r3, [r7, #4]
}
   16faa:	0018      	movs	r0, r3
   16fac:	46bd      	mov	sp, r7
   16fae:	b002      	add	sp, #8
   16fb0:	bd80      	pop	{r7, pc}
   16fb2:	46c0      	nop			; (mov r8, r8)
   16fb4:	0003869c 	.word	0x0003869c
   16fb8:	200044b0 	.word	0x200044b0
   16fbc:	00015ab9 	.word	0x00015ab9

00016fc0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16fc0:	b580      	push	{r7, lr}
   16fc2:	b084      	sub	sp, #16
   16fc4:	af00      	add	r7, sp, #0
   16fc6:	0002      	movs	r2, r0
   16fc8:	1dfb      	adds	r3, r7, #7
   16fca:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   16fcc:	230f      	movs	r3, #15
   16fce:	18fb      	adds	r3, r7, r3
   16fd0:	1dfa      	adds	r2, r7, #7
   16fd2:	7812      	ldrb	r2, [r2, #0]
   16fd4:	09d2      	lsrs	r2, r2, #7
   16fd6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   16fd8:	230e      	movs	r3, #14
   16fda:	18fb      	adds	r3, r7, r3
   16fdc:	1dfa      	adds	r2, r7, #7
   16fde:	7812      	ldrb	r2, [r2, #0]
   16fe0:	0952      	lsrs	r2, r2, #5
   16fe2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   16fe4:	4b0d      	ldr	r3, [pc, #52]	; (1701c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   16fe6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   16fe8:	230f      	movs	r3, #15
   16fea:	18fb      	adds	r3, r7, r3
   16fec:	781b      	ldrb	r3, [r3, #0]
   16fee:	2b00      	cmp	r3, #0
   16ff0:	d10f      	bne.n	17012 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   16ff2:	230f      	movs	r3, #15
   16ff4:	18fb      	adds	r3, r7, r3
   16ff6:	781b      	ldrb	r3, [r3, #0]
   16ff8:	009b      	lsls	r3, r3, #2
   16ffa:	2210      	movs	r2, #16
   16ffc:	4694      	mov	ip, r2
   16ffe:	44bc      	add	ip, r7
   17000:	4463      	add	r3, ip
   17002:	3b08      	subs	r3, #8
   17004:	681a      	ldr	r2, [r3, #0]
   17006:	230e      	movs	r3, #14
   17008:	18fb      	adds	r3, r7, r3
   1700a:	781b      	ldrb	r3, [r3, #0]
   1700c:	01db      	lsls	r3, r3, #7
   1700e:	18d3      	adds	r3, r2, r3
   17010:	e000      	b.n	17014 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   17012:	2300      	movs	r3, #0
	}
}
   17014:	0018      	movs	r0, r3
   17016:	46bd      	mov	sp, r7
   17018:	b004      	add	sp, #16
   1701a:	bd80      	pop	{r7, pc}
   1701c:	41004400 	.word	0x41004400

00017020 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   17020:	b580      	push	{r7, lr}
   17022:	b082      	sub	sp, #8
   17024:	af00      	add	r7, sp, #0
   17026:	0002      	movs	r2, r0
   17028:	1dfb      	adds	r3, r7, #7
   1702a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1702c:	1dfb      	adds	r3, r7, #7
   1702e:	781b      	ldrb	r3, [r3, #0]
   17030:	0018      	movs	r0, r3
   17032:	4b03      	ldr	r3, [pc, #12]	; (17040 <port_get_group_from_gpio_pin+0x20>)
   17034:	4798      	blx	r3
   17036:	0003      	movs	r3, r0
}
   17038:	0018      	movs	r0, r3
   1703a:	46bd      	mov	sp, r7
   1703c:	b002      	add	sp, #8
   1703e:	bd80      	pop	{r7, pc}
   17040:	00016fc1 	.word	0x00016fc1

00017044 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   17044:	b580      	push	{r7, lr}
   17046:	b082      	sub	sp, #8
   17048:	af00      	add	r7, sp, #0
   1704a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   1704c:	687b      	ldr	r3, [r7, #4]
   1704e:	2200      	movs	r2, #0
   17050:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   17052:	687b      	ldr	r3, [r7, #4]
   17054:	2201      	movs	r2, #1
   17056:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   17058:	687b      	ldr	r3, [r7, #4]
   1705a:	2200      	movs	r2, #0
   1705c:	709a      	strb	r2, [r3, #2]
}
   1705e:	46c0      	nop			; (mov r8, r8)
   17060:	46bd      	mov	sp, r7
   17062:	b002      	add	sp, #8
   17064:	bd80      	pop	{r7, pc}
	...

00017068 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   17068:	b580      	push	{r7, lr}
   1706a:	b084      	sub	sp, #16
   1706c:	af00      	add	r7, sp, #0
   1706e:	0002      	movs	r2, r0
   17070:	1dfb      	adds	r3, r7, #7
   17072:	701a      	strb	r2, [r3, #0]
   17074:	1dbb      	adds	r3, r7, #6
   17076:	1c0a      	adds	r2, r1, #0
   17078:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1707a:	1dfb      	adds	r3, r7, #7
   1707c:	781b      	ldrb	r3, [r3, #0]
   1707e:	0018      	movs	r0, r3
   17080:	4b0d      	ldr	r3, [pc, #52]	; (170b8 <port_pin_set_output_level+0x50>)
   17082:	4798      	blx	r3
   17084:	0003      	movs	r3, r0
   17086:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   17088:	1dfb      	adds	r3, r7, #7
   1708a:	781b      	ldrb	r3, [r3, #0]
   1708c:	221f      	movs	r2, #31
   1708e:	4013      	ands	r3, r2
   17090:	2201      	movs	r2, #1
   17092:	409a      	lsls	r2, r3
   17094:	0013      	movs	r3, r2
   17096:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   17098:	1dbb      	adds	r3, r7, #6
   1709a:	781b      	ldrb	r3, [r3, #0]
   1709c:	2b00      	cmp	r3, #0
   1709e:	d003      	beq.n	170a8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   170a0:	68fb      	ldr	r3, [r7, #12]
   170a2:	68ba      	ldr	r2, [r7, #8]
   170a4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   170a6:	e002      	b.n	170ae <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   170a8:	68fb      	ldr	r3, [r7, #12]
   170aa:	68ba      	ldr	r2, [r7, #8]
   170ac:	615a      	str	r2, [r3, #20]
}
   170ae:	46c0      	nop			; (mov r8, r8)
   170b0:	46bd      	mov	sp, r7
   170b2:	b004      	add	sp, #16
   170b4:	bd80      	pop	{r7, pc}
   170b6:	46c0      	nop			; (mov r8, r8)
   170b8:	00017021 	.word	0x00017021

000170bc <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   170bc:	b580      	push	{r7, lr}
   170be:	b084      	sub	sp, #16
   170c0:	af00      	add	r7, sp, #0
   170c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   170c4:	687b      	ldr	r3, [r7, #4]
   170c6:	681b      	ldr	r3, [r3, #0]
   170c8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   170ca:	68fb      	ldr	r3, [r7, #12]
   170cc:	69db      	ldr	r3, [r3, #28]
   170ce:	1e5a      	subs	r2, r3, #1
   170d0:	4193      	sbcs	r3, r2
   170d2:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   170d4:	0018      	movs	r0, r3
   170d6:	46bd      	mov	sp, r7
   170d8:	b004      	add	sp, #16
   170da:	bd80      	pop	{r7, pc}

000170dc <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   170dc:	b580      	push	{r7, lr}
   170de:	b082      	sub	sp, #8
   170e0:	af00      	add	r7, sp, #0
   170e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   170e4:	687b      	ldr	r3, [r7, #4]
   170e6:	2201      	movs	r2, #1
   170e8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   170ea:	687b      	ldr	r3, [r7, #4]
   170ec:	2200      	movs	r2, #0
   170ee:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   170f0:	687b      	ldr	r3, [r7, #4]
   170f2:	2200      	movs	r2, #0
   170f4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   170f6:	687b      	ldr	r3, [r7, #4]
   170f8:	22c0      	movs	r2, #192	; 0xc0
   170fa:	0392      	lsls	r2, r2, #14
   170fc:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   170fe:	687b      	ldr	r3, [r7, #4]
   17100:	2200      	movs	r2, #0
   17102:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   17104:	687b      	ldr	r3, [r7, #4]
   17106:	2200      	movs	r2, #0
   17108:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1710a:	687b      	ldr	r3, [r7, #4]
   1710c:	2201      	movs	r2, #1
   1710e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   17110:	687b      	ldr	r3, [r7, #4]
   17112:	2201      	movs	r2, #1
   17114:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   17116:	687b      	ldr	r3, [r7, #4]
   17118:	2200      	movs	r2, #0
   1711a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   1711c:	687b      	ldr	r3, [r7, #4]
   1711e:	2224      	movs	r2, #36	; 0x24
   17120:	2100      	movs	r1, #0
   17122:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   17124:	687b      	ldr	r3, [r7, #4]
   17126:	3318      	adds	r3, #24
   17128:	220c      	movs	r2, #12
   1712a:	2100      	movs	r1, #0
   1712c:	0018      	movs	r0, r3
   1712e:	4b0a      	ldr	r3, [pc, #40]	; (17158 <spi_get_config_defaults+0x7c>)
   17130:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   17132:	687b      	ldr	r3, [r7, #4]
   17134:	4a09      	ldr	r2, [pc, #36]	; (1715c <spi_get_config_defaults+0x80>)
   17136:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   17138:	687b      	ldr	r3, [r7, #4]
   1713a:	2200      	movs	r2, #0
   1713c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1713e:	687b      	ldr	r3, [r7, #4]
   17140:	2200      	movs	r2, #0
   17142:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   17144:	687b      	ldr	r3, [r7, #4]
   17146:	2200      	movs	r2, #0
   17148:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1714a:	687b      	ldr	r3, [r7, #4]
   1714c:	2200      	movs	r2, #0
   1714e:	635a      	str	r2, [r3, #52]	; 0x34

};
   17150:	46c0      	nop			; (mov r8, r8)
   17152:	46bd      	mov	sp, r7
   17154:	b002      	add	sp, #8
   17156:	bd80      	pop	{r7, pc}
   17158:	00036c9f 	.word	0x00036c9f
   1715c:	000186a0 	.word	0x000186a0

00017160 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   17160:	b580      	push	{r7, lr}
   17162:	b082      	sub	sp, #8
   17164:	af00      	add	r7, sp, #0
   17166:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   17168:	687b      	ldr	r3, [r7, #4]
   1716a:	220a      	movs	r2, #10
   1716c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1716e:	687b      	ldr	r3, [r7, #4]
   17170:	2200      	movs	r2, #0
   17172:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   17174:	687b      	ldr	r3, [r7, #4]
   17176:	2200      	movs	r2, #0
   17178:	709a      	strb	r2, [r3, #2]
}
   1717a:	46c0      	nop			; (mov r8, r8)
   1717c:	46bd      	mov	sp, r7
   1717e:	b002      	add	sp, #8
   17180:	bd80      	pop	{r7, pc}
	...

00017184 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   17184:	b580      	push	{r7, lr}
   17186:	b084      	sub	sp, #16
   17188:	af00      	add	r7, sp, #0
   1718a:	6078      	str	r0, [r7, #4]
   1718c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   1718e:	683b      	ldr	r3, [r7, #0]
   17190:	781a      	ldrb	r2, [r3, #0]
   17192:	687b      	ldr	r3, [r7, #4]
   17194:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   17196:	683b      	ldr	r3, [r7, #0]
   17198:	785a      	ldrb	r2, [r3, #1]
   1719a:	687b      	ldr	r3, [r7, #4]
   1719c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1719e:	683b      	ldr	r3, [r7, #0]
   171a0:	789a      	ldrb	r2, [r3, #2]
   171a2:	687b      	ldr	r3, [r7, #4]
   171a4:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   171a6:	230c      	movs	r3, #12
   171a8:	18fb      	adds	r3, r7, r3
   171aa:	0018      	movs	r0, r3
   171ac:	4b0b      	ldr	r3, [pc, #44]	; (171dc <spi_attach_slave+0x58>)
   171ae:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   171b0:	230c      	movs	r3, #12
   171b2:	18fb      	adds	r3, r7, r3
   171b4:	2201      	movs	r2, #1
   171b6:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   171b8:	687b      	ldr	r3, [r7, #4]
   171ba:	781b      	ldrb	r3, [r3, #0]
   171bc:	220c      	movs	r2, #12
   171be:	18ba      	adds	r2, r7, r2
   171c0:	0011      	movs	r1, r2
   171c2:	0018      	movs	r0, r3
   171c4:	4b06      	ldr	r3, [pc, #24]	; (171e0 <spi_attach_slave+0x5c>)
   171c6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   171c8:	687b      	ldr	r3, [r7, #4]
   171ca:	781b      	ldrb	r3, [r3, #0]
   171cc:	2101      	movs	r1, #1
   171ce:	0018      	movs	r0, r3
   171d0:	4b04      	ldr	r3, [pc, #16]	; (171e4 <spi_attach_slave+0x60>)
   171d2:	4798      	blx	r3
}
   171d4:	46c0      	nop			; (mov r8, r8)
   171d6:	46bd      	mov	sp, r7
   171d8:	b004      	add	sp, #16
   171da:	bd80      	pop	{r7, pc}
   171dc:	00017045 	.word	0x00017045
   171e0:	00028751 	.word	0x00028751
   171e4:	00017069 	.word	0x00017069

000171e8 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   171e8:	b580      	push	{r7, lr}
   171ea:	b084      	sub	sp, #16
   171ec:	af00      	add	r7, sp, #0
   171ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   171f0:	687b      	ldr	r3, [r7, #4]
   171f2:	681b      	ldr	r3, [r3, #0]
   171f4:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
   171f6:	46c0      	nop			; (mov r8, r8)
   171f8:	687b      	ldr	r3, [r7, #4]
   171fa:	0018      	movs	r0, r3
   171fc:	4b06      	ldr	r3, [pc, #24]	; (17218 <spi_enable+0x30>)
   171fe:	4798      	blx	r3
   17200:	1e03      	subs	r3, r0, #0
   17202:	d1f9      	bne.n	171f8 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   17204:	68fb      	ldr	r3, [r7, #12]
   17206:	681b      	ldr	r3, [r3, #0]
   17208:	2202      	movs	r2, #2
   1720a:	431a      	orrs	r2, r3
   1720c:	68fb      	ldr	r3, [r7, #12]
   1720e:	601a      	str	r2, [r3, #0]
}
   17210:	46c0      	nop			; (mov r8, r8)
   17212:	46bd      	mov	sp, r7
   17214:	b004      	add	sp, #16
   17216:	bd80      	pop	{r7, pc}
   17218:	000170bd 	.word	0x000170bd

0001721c <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   1721c:	b580      	push	{r7, lr}
   1721e:	b084      	sub	sp, #16
   17220:	af00      	add	r7, sp, #0
   17222:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   17224:	687b      	ldr	r3, [r7, #4]
   17226:	681b      	ldr	r3, [r3, #0]
   17228:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1722a:	68fb      	ldr	r3, [r7, #12]
   1722c:	7e1b      	ldrb	r3, [r3, #24]
   1722e:	b2db      	uxtb	r3, r3
   17230:	001a      	movs	r2, r3
   17232:	2301      	movs	r3, #1
   17234:	4013      	ands	r3, r2
   17236:	1e5a      	subs	r2, r3, #1
   17238:	4193      	sbcs	r3, r2
   1723a:	b2db      	uxtb	r3, r3
}
   1723c:	0018      	movs	r0, r3
   1723e:	46bd      	mov	sp, r7
   17240:	b004      	add	sp, #16
   17242:	bd80      	pop	{r7, pc}

00017244 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   17244:	b580      	push	{r7, lr}
   17246:	b084      	sub	sp, #16
   17248:	af00      	add	r7, sp, #0
   1724a:	6078      	str	r0, [r7, #4]
   1724c:	000a      	movs	r2, r1
   1724e:	1cbb      	adds	r3, r7, #2
   17250:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   17252:	687b      	ldr	r3, [r7, #4]
   17254:	681b      	ldr	r3, [r3, #0]
   17256:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   17258:	687b      	ldr	r3, [r7, #4]
   1725a:	0018      	movs	r0, r3
   1725c:	4b0a      	ldr	r3, [pc, #40]	; (17288 <spi_write+0x44>)
   1725e:	4798      	blx	r3
   17260:	0003      	movs	r3, r0
   17262:	001a      	movs	r2, r3
   17264:	2301      	movs	r3, #1
   17266:	4053      	eors	r3, r2
   17268:	b2db      	uxtb	r3, r3
   1726a:	2b00      	cmp	r3, #0
   1726c:	d001      	beq.n	17272 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   1726e:	2305      	movs	r3, #5
   17270:	e006      	b.n	17280 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   17272:	1cbb      	adds	r3, r7, #2
   17274:	881b      	ldrh	r3, [r3, #0]
   17276:	05db      	lsls	r3, r3, #23
   17278:	0dda      	lsrs	r2, r3, #23
   1727a:	68fb      	ldr	r3, [r7, #12]
   1727c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   1727e:	2300      	movs	r3, #0
}
   17280:	0018      	movs	r0, r3
   17282:	46bd      	mov	sp, r7
   17284:	b004      	add	sp, #16
   17286:	bd80      	pop	{r7, pc}
   17288:	0001721d 	.word	0x0001721d

0001728c <configure_port_pins>:
	LCD_data(madctl);
}


void configure_port_pins(void)
{
   1728c:	b580      	push	{r7, lr}
   1728e:	b082      	sub	sp, #8
   17290:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   17292:	1d3b      	adds	r3, r7, #4
   17294:	0018      	movs	r0, r3
   17296:	4b0f      	ldr	r3, [pc, #60]	; (172d4 <configure_port_pins+0x48>)
   17298:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   1729a:	1d3b      	adds	r3, r7, #4
   1729c:	2201      	movs	r2, #1
   1729e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PB02, &config_port_pin);
   172a0:	1d3b      	adds	r3, r7, #4
   172a2:	0019      	movs	r1, r3
   172a4:	2022      	movs	r0, #34	; 0x22
   172a6:	4b0c      	ldr	r3, [pc, #48]	; (172d8 <configure_port_pins+0x4c>)
   172a8:	4798      	blx	r3
	struct port_config config_port_pins;
	port_get_config_defaults(&config_port_pins);
   172aa:	003b      	movs	r3, r7
   172ac:	0018      	movs	r0, r3
   172ae:	4b09      	ldr	r3, [pc, #36]	; (172d4 <configure_port_pins+0x48>)
   172b0:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   172b2:	1d3b      	adds	r3, r7, #4
   172b4:	2201      	movs	r2, #1
   172b6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA20, &config_port_pins);
   172b8:	003b      	movs	r3, r7
   172ba:	0019      	movs	r1, r3
   172bc:	2014      	movs	r0, #20
   172be:	4b06      	ldr	r3, [pc, #24]	; (172d8 <configure_port_pins+0x4c>)
   172c0:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA20,1);
   172c2:	2101      	movs	r1, #1
   172c4:	2014      	movs	r0, #20
   172c6:	4b05      	ldr	r3, [pc, #20]	; (172dc <configure_port_pins+0x50>)
   172c8:	4798      	blx	r3
}
   172ca:	46c0      	nop			; (mov r8, r8)
   172cc:	46bd      	mov	sp, r7
   172ce:	b002      	add	sp, #8
   172d0:	bd80      	pop	{r7, pc}
   172d2:	46c0      	nop			; (mov r8, r8)
   172d4:	00017045 	.word	0x00017045
   172d8:	00028751 	.word	0x00028751
   172dc:	00017069 	.word	0x00017069

000172e0 <drawString>:
            LCD_drawPixel(x+i,y+j,c2);
        }
    }
}

void drawString(short x, short y, char* str, short fg, short bg){
   172e0:	b5b0      	push	{r4, r5, r7, lr}
   172e2:	b088      	sub	sp, #32
   172e4:	af02      	add	r7, sp, #8
   172e6:	0004      	movs	r4, r0
   172e8:	0008      	movs	r0, r1
   172ea:	60ba      	str	r2, [r7, #8]
   172ec:	0019      	movs	r1, r3
   172ee:	230e      	movs	r3, #14
   172f0:	18fb      	adds	r3, r7, r3
   172f2:	1c22      	adds	r2, r4, #0
   172f4:	801a      	strh	r2, [r3, #0]
   172f6:	230c      	movs	r3, #12
   172f8:	18fb      	adds	r3, r7, r3
   172fa:	1c02      	adds	r2, r0, #0
   172fc:	801a      	strh	r2, [r3, #0]
   172fe:	1dbb      	adds	r3, r7, #6
   17300:	1c0a      	adds	r2, r1, #0
   17302:	801a      	strh	r2, [r3, #0]
    int i = 0;
   17304:	2300      	movs	r3, #0
   17306:	617b      	str	r3, [r7, #20]
    while(str[i]){
   17308:	e021      	b.n	1734e <drawString+0x6e>
        drawChar(x+5*i,y,str[i],fg,bg);
   1730a:	697b      	ldr	r3, [r7, #20]
   1730c:	b29b      	uxth	r3, r3
   1730e:	1c1a      	adds	r2, r3, #0
   17310:	0092      	lsls	r2, r2, #2
   17312:	18d3      	adds	r3, r2, r3
   17314:	b29a      	uxth	r2, r3
   17316:	230e      	movs	r3, #14
   17318:	18fb      	adds	r3, r7, r3
   1731a:	881b      	ldrh	r3, [r3, #0]
   1731c:	18d3      	adds	r3, r2, r3
   1731e:	b29b      	uxth	r3, r3
   17320:	b218      	sxth	r0, r3
   17322:	697b      	ldr	r3, [r7, #20]
   17324:	68ba      	ldr	r2, [r7, #8]
   17326:	18d3      	adds	r3, r2, r3
   17328:	781a      	ldrb	r2, [r3, #0]
   1732a:	1dbb      	adds	r3, r7, #6
   1732c:	2400      	movs	r4, #0
   1732e:	5f1c      	ldrsh	r4, [r3, r4]
   17330:	230c      	movs	r3, #12
   17332:	18fb      	adds	r3, r7, r3
   17334:	2100      	movs	r1, #0
   17336:	5e59      	ldrsh	r1, [r3, r1]
   17338:	2328      	movs	r3, #40	; 0x28
   1733a:	18fb      	adds	r3, r7, r3
   1733c:	2500      	movs	r5, #0
   1733e:	5f5b      	ldrsh	r3, [r3, r5]
   17340:	9300      	str	r3, [sp, #0]
   17342:	0023      	movs	r3, r4
   17344:	4c07      	ldr	r4, [pc, #28]	; (17364 <drawString+0x84>)
   17346:	47a0      	blx	r4
        i++;
   17348:	697b      	ldr	r3, [r7, #20]
   1734a:	3301      	adds	r3, #1
   1734c:	617b      	str	r3, [r7, #20]
    while(str[i]){
   1734e:	697b      	ldr	r3, [r7, #20]
   17350:	68ba      	ldr	r2, [r7, #8]
   17352:	18d3      	adds	r3, r2, r3
   17354:	781b      	ldrb	r3, [r3, #0]
   17356:	2b00      	cmp	r3, #0
   17358:	d1d7      	bne.n	1730a <drawString+0x2a>
    }
}
   1735a:	46c0      	nop			; (mov r8, r8)
   1735c:	46bd      	mov	sp, r7
   1735e:	b006      	add	sp, #24
   17360:	bdb0      	pop	{r4, r5, r7, pc}
   17362:	46c0      	nop			; (mov r8, r8)
   17364:	00017369 	.word	0x00017369

00017368 <drawChar>:


void drawChar(short x, short y, unsigned char c, short fg, short bg){
   17368:	b5b0      	push	{r4, r5, r7, lr}
   1736a:	b086      	sub	sp, #24
   1736c:	af00      	add	r7, sp, #0
   1736e:	0005      	movs	r5, r0
   17370:	000c      	movs	r4, r1
   17372:	0010      	movs	r0, r2
   17374:	0019      	movs	r1, r3
   17376:	1dbb      	adds	r3, r7, #6
   17378:	1c2a      	adds	r2, r5, #0
   1737a:	801a      	strh	r2, [r3, #0]
   1737c:	1d3b      	adds	r3, r7, #4
   1737e:	1c22      	adds	r2, r4, #0
   17380:	801a      	strh	r2, [r3, #0]
   17382:	1cfb      	adds	r3, r7, #3
   17384:	1c02      	adds	r2, r0, #0
   17386:	701a      	strb	r2, [r3, #0]
   17388:	003b      	movs	r3, r7
   1738a:	1c0a      	adds	r2, r1, #0
   1738c:	801a      	strh	r2, [r3, #0]
    char row = c - 0x20;
   1738e:	230f      	movs	r3, #15
   17390:	18fb      	adds	r3, r7, r3
   17392:	1cfa      	adds	r2, r7, #3
   17394:	7812      	ldrb	r2, [r2, #0]
   17396:	3a20      	subs	r2, #32
   17398:	701a      	strb	r2, [r3, #0]
    int i;
    if ((MAX_X-x>7)&&(MAX_Y-y>7)){
   1739a:	1dbb      	adds	r3, r7, #6
   1739c:	2200      	movs	r2, #0
   1739e:	5e9b      	ldrsh	r3, [r3, r2]
   173a0:	22a0      	movs	r2, #160	; 0xa0
   173a2:	1ad3      	subs	r3, r2, r3
   173a4:	2b07      	cmp	r3, #7
   173a6:	dd53      	ble.n	17450 <drawChar+0xe8>
   173a8:	1d3b      	adds	r3, r7, #4
   173aa:	2200      	movs	r2, #0
   173ac:	5e9b      	ldrsh	r3, [r3, r2]
   173ae:	2280      	movs	r2, #128	; 0x80
   173b0:	1ad3      	subs	r3, r2, r3
   173b2:	2b07      	cmp	r3, #7
   173b4:	dd4c      	ble.n	17450 <drawChar+0xe8>
        for(i=0;i<5;i++){
   173b6:	2300      	movs	r3, #0
   173b8:	617b      	str	r3, [r7, #20]
   173ba:	e046      	b.n	1744a <drawChar+0xe2>
            char pixels = ASCII[row][i]; // so we have a list of pixies to go through
   173bc:	230f      	movs	r3, #15
   173be:	18fb      	adds	r3, r7, r3
   173c0:	781a      	ldrb	r2, [r3, #0]
   173c2:	230e      	movs	r3, #14
   173c4:	18f9      	adds	r1, r7, r3
   173c6:	4824      	ldr	r0, [pc, #144]	; (17458 <drawChar+0xf0>)
   173c8:	0013      	movs	r3, r2
   173ca:	009b      	lsls	r3, r3, #2
   173cc:	189b      	adds	r3, r3, r2
   173ce:	18c2      	adds	r2, r0, r3
   173d0:	697b      	ldr	r3, [r7, #20]
   173d2:	18d3      	adds	r3, r2, r3
   173d4:	781b      	ldrb	r3, [r3, #0]
   173d6:	700b      	strb	r3, [r1, #0]
            int j;
            for(j=0;j<8;j++){
   173d8:	2300      	movs	r3, #0
   173da:	613b      	str	r3, [r7, #16]
   173dc:	e02f      	b.n	1743e <drawChar+0xd6>
                if ((pixels>>j)&1==1){
   173de:	230e      	movs	r3, #14
   173e0:	18fb      	adds	r3, r7, r3
   173e2:	781a      	ldrb	r2, [r3, #0]
   173e4:	693b      	ldr	r3, [r7, #16]
   173e6:	411a      	asrs	r2, r3
   173e8:	0013      	movs	r3, r2
   173ea:	2201      	movs	r2, #1
   173ec:	4013      	ands	r3, r2
   173ee:	d011      	beq.n	17414 <drawChar+0xac>
                    LCD_drawPixel(x+i,y+j,fg);
   173f0:	697b      	ldr	r3, [r7, #20]
   173f2:	b29a      	uxth	r2, r3
   173f4:	1dbb      	adds	r3, r7, #6
   173f6:	881b      	ldrh	r3, [r3, #0]
   173f8:	18d3      	adds	r3, r2, r3
   173fa:	b298      	uxth	r0, r3
   173fc:	693b      	ldr	r3, [r7, #16]
   173fe:	b29a      	uxth	r2, r3
   17400:	1d3b      	adds	r3, r7, #4
   17402:	881b      	ldrh	r3, [r3, #0]
   17404:	18d3      	adds	r3, r2, r3
   17406:	b299      	uxth	r1, r3
   17408:	003b      	movs	r3, r7
   1740a:	881b      	ldrh	r3, [r3, #0]
   1740c:	001a      	movs	r2, r3
   1740e:	4b13      	ldr	r3, [pc, #76]	; (1745c <drawChar+0xf4>)
   17410:	4798      	blx	r3
   17412:	e011      	b.n	17438 <drawChar+0xd0>
                }
                else {
                    LCD_drawPixel(x+i,y+j,bg);
   17414:	697b      	ldr	r3, [r7, #20]
   17416:	b29a      	uxth	r2, r3
   17418:	1dbb      	adds	r3, r7, #6
   1741a:	881b      	ldrh	r3, [r3, #0]
   1741c:	18d3      	adds	r3, r2, r3
   1741e:	b298      	uxth	r0, r3
   17420:	693b      	ldr	r3, [r7, #16]
   17422:	b29a      	uxth	r2, r3
   17424:	1d3b      	adds	r3, r7, #4
   17426:	881b      	ldrh	r3, [r3, #0]
   17428:	18d3      	adds	r3, r2, r3
   1742a:	b29b      	uxth	r3, r3
   1742c:	2228      	movs	r2, #40	; 0x28
   1742e:	18ba      	adds	r2, r7, r2
   17430:	8812      	ldrh	r2, [r2, #0]
   17432:	0019      	movs	r1, r3
   17434:	4b09      	ldr	r3, [pc, #36]	; (1745c <drawChar+0xf4>)
   17436:	4798      	blx	r3
            for(j=0;j<8;j++){
   17438:	693b      	ldr	r3, [r7, #16]
   1743a:	3301      	adds	r3, #1
   1743c:	613b      	str	r3, [r7, #16]
   1743e:	693b      	ldr	r3, [r7, #16]
   17440:	2b07      	cmp	r3, #7
   17442:	ddcc      	ble.n	173de <drawChar+0x76>
        for(i=0;i<5;i++){
   17444:	697b      	ldr	r3, [r7, #20]
   17446:	3301      	adds	r3, #1
   17448:	617b      	str	r3, [r7, #20]
   1744a:	697b      	ldr	r3, [r7, #20]
   1744c:	2b04      	cmp	r3, #4
   1744e:	ddb5      	ble.n	173bc <drawChar+0x54>
                }
            }
        }
    }
}
   17450:	46c0      	nop			; (mov r8, r8)
   17452:	46bd      	mov	sp, r7
   17454:	b006      	add	sp, #24
   17456:	bdb0      	pop	{r4, r5, r7, pc}
   17458:	000386c4 	.word	0x000386c4
   1745c:	00017911 	.word	0x00017911

00017460 <configure_spi_master>:




void configure_spi_master(void)
{
   17460:	b580      	push	{r7, lr}
   17462:	b090      	sub	sp, #64	; 0x40
   17464:	af00      	add	r7, sp, #0
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	/* Configure and initialize software device instance of peripheral slave */
	spi_slave_inst_get_config_defaults(&slave_dev_config);
   17466:	1d3b      	adds	r3, r7, #4
   17468:	0018      	movs	r0, r3
   1746a:	4b1c      	ldr	r3, [pc, #112]	; (174dc <configure_spi_master+0x7c>)
   1746c:	4798      	blx	r3
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
   1746e:	1d3b      	adds	r3, r7, #4
   17470:	2223      	movs	r2, #35	; 0x23
   17472:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave, &slave_dev_config);
   17474:	1d3a      	adds	r2, r7, #4
   17476:	4b1a      	ldr	r3, [pc, #104]	; (174e0 <configure_spi_master+0x80>)
   17478:	0011      	movs	r1, r2
   1747a:	0018      	movs	r0, r3
   1747c:	4b19      	ldr	r3, [pc, #100]	; (174e4 <configure_spi_master+0x84>)
   1747e:	4798      	blx	r3
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
   17480:	2308      	movs	r3, #8
   17482:	18fb      	adds	r3, r7, r3
   17484:	0018      	movs	r0, r3
   17486:	4b18      	ldr	r3, [pc, #96]	; (174e8 <configure_spi_master+0x88>)
   17488:	4798      	blx	r3
	/*config_spi_master.transfer_mode = SPI_TRANSFER_MODE_1;*/
	config_spi_master.mux_setting = CONF_MASTER_MUX_SETTING;
   1748a:	2308      	movs	r3, #8
   1748c:	18fb      	adds	r3, r7, r3
   1748e:	2200      	movs	r2, #0
   17490:	60da      	str	r2, [r3, #12]
	config_spi_master.pinmux_pad0 = CONF_MASTER_PINMUX_PAD0;
   17492:	2308      	movs	r3, #8
   17494:	18fb      	adds	r3, r7, r3
   17496:	4a15      	ldr	r2, [pc, #84]	; (174ec <configure_spi_master+0x8c>)
   17498:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad1 = CONF_MASTER_PINMUX_PAD1;
   1749a:	2308      	movs	r3, #8
   1749c:	18fb      	adds	r3, r7, r3
   1749e:	4a14      	ldr	r2, [pc, #80]	; (174f0 <configure_spi_master+0x90>)
   174a0:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = CONF_MASTER_PINMUX_PAD2;
   174a2:	2308      	movs	r3, #8
   174a4:	18fb      	adds	r3, r7, r3
   174a6:	2201      	movs	r2, #1
   174a8:	4252      	negs	r2, r2
   174aa:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = CONF_MASTER_PINMUX_PAD3;
   174ac:	2308      	movs	r3, #8
   174ae:	18fb      	adds	r3, r7, r3
   174b0:	2201      	movs	r2, #1
   174b2:	4252      	negs	r2, r2
   174b4:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate =  12000000; //12MHz  = 400ns per signal
   174b6:	2308      	movs	r3, #8
   174b8:	18fb      	adds	r3, r7, r3
   174ba:	4a0e      	ldr	r2, [pc, #56]	; (174f4 <configure_spi_master+0x94>)
   174bc:	619a      	str	r2, [r3, #24]
	spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);
   174be:	2308      	movs	r3, #8
   174c0:	18fa      	adds	r2, r7, r3
   174c2:	490d      	ldr	r1, [pc, #52]	; (174f8 <configure_spi_master+0x98>)
   174c4:	4b0d      	ldr	r3, [pc, #52]	; (174fc <configure_spi_master+0x9c>)
   174c6:	0018      	movs	r0, r3
   174c8:	4b0d      	ldr	r3, [pc, #52]	; (17500 <configure_spi_master+0xa0>)
   174ca:	4798      	blx	r3
	spi_enable(&spi_master_instance);
   174cc:	4b0b      	ldr	r3, [pc, #44]	; (174fc <configure_spi_master+0x9c>)
   174ce:	0018      	movs	r0, r3
   174d0:	4b0c      	ldr	r3, [pc, #48]	; (17504 <configure_spi_master+0xa4>)
   174d2:	4798      	blx	r3
}
   174d4:	46c0      	nop			; (mov r8, r8)
   174d6:	46bd      	mov	sp, r7
   174d8:	b010      	add	sp, #64	; 0x40
   174da:	bd80      	pop	{r7, pc}
   174dc:	00017161 	.word	0x00017161
   174e0:	200044cc 	.word	0x200044cc
   174e4:	00017185 	.word	0x00017185
   174e8:	000170dd 	.word	0x000170dd
   174ec:	00040003 	.word	0x00040003
   174f0:	00050003 	.word	0x00050003
   174f4:	00b71b00 	.word	0x00b71b00
   174f8:	42000800 	.word	0x42000800
   174fc:	200044c0 	.word	0x200044c0
   17500:	00029e4d 	.word	0x00029e4d
   17504:	000171e9 	.word	0x000171e9

00017508 <spi_io>:



void spi_io(unsigned char o) {
   17508:	b580      	push	{r7, lr}
   1750a:	b082      	sub	sp, #8
   1750c:	af00      	add	r7, sp, #0
   1750e:	0002      	movs	r2, r0
   17510:	1dfb      	adds	r3, r7, #7
   17512:	701a      	strb	r2, [r3, #0]
	spi_write(&spi_master_instance,o);
   17514:	1dfb      	adds	r3, r7, #7
   17516:	781b      	ldrb	r3, [r3, #0]
   17518:	b29a      	uxth	r2, r3
   1751a:	4b04      	ldr	r3, [pc, #16]	; (1752c <spi_io+0x24>)
   1751c:	0011      	movs	r1, r2
   1751e:	0018      	movs	r0, r3
   17520:	4b03      	ldr	r3, [pc, #12]	; (17530 <spi_io+0x28>)
   17522:	4798      	blx	r3
}
   17524:	46c0      	nop			; (mov r8, r8)
   17526:	46bd      	mov	sp, r7
   17528:	b002      	add	sp, #8
   1752a:	bd80      	pop	{r7, pc}
   1752c:	200044c0 	.word	0x200044c0
   17530:	00017245 	.word	0x00017245

00017534 <LCD_command>:

void LCD_command(unsigned char com) {
   17534:	b580      	push	{r7, lr}
   17536:	b082      	sub	sp, #8
   17538:	af00      	add	r7, sp, #0
   1753a:	0002      	movs	r2, r0
   1753c:	1dfb      	adds	r3, r7, #7
   1753e:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(DAT_PIN,false);
   17540:	2100      	movs	r1, #0
   17542:	2014      	movs	r0, #20
   17544:	4b0b      	ldr	r3, [pc, #44]	; (17574 <LCD_command+0x40>)
   17546:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, true);
   17548:	490b      	ldr	r1, [pc, #44]	; (17578 <LCD_command+0x44>)
   1754a:	4b0c      	ldr	r3, [pc, #48]	; (1757c <LCD_command+0x48>)
   1754c:	2201      	movs	r2, #1
   1754e:	0018      	movs	r0, r3
   17550:	4b0b      	ldr	r3, [pc, #44]	; (17580 <LCD_command+0x4c>)
   17552:	4798      	blx	r3
	spi_io(com);
   17554:	1dfb      	adds	r3, r7, #7
   17556:	781b      	ldrb	r3, [r3, #0]
   17558:	0018      	movs	r0, r3
   1755a:	4b0a      	ldr	r3, [pc, #40]	; (17584 <LCD_command+0x50>)
   1755c:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, false);
   1755e:	4906      	ldr	r1, [pc, #24]	; (17578 <LCD_command+0x44>)
   17560:	4b06      	ldr	r3, [pc, #24]	; (1757c <LCD_command+0x48>)
   17562:	2200      	movs	r2, #0
   17564:	0018      	movs	r0, r3
   17566:	4b06      	ldr	r3, [pc, #24]	; (17580 <LCD_command+0x4c>)
   17568:	4798      	blx	r3
}
   1756a:	46c0      	nop			; (mov r8, r8)
   1756c:	46bd      	mov	sp, r7
   1756e:	b002      	add	sp, #8
   17570:	bd80      	pop	{r7, pc}
   17572:	46c0      	nop			; (mov r8, r8)
   17574:	00017069 	.word	0x00017069
   17578:	200044cc 	.word	0x200044cc
   1757c:	200044c0 	.word	0x200044c0
   17580:	0002a101 	.word	0x0002a101
   17584:	00017509 	.word	0x00017509

00017588 <LCD_data>:

void LCD_data(unsigned char dat) {
   17588:	b580      	push	{r7, lr}
   1758a:	b082      	sub	sp, #8
   1758c:	af00      	add	r7, sp, #0
   1758e:	0002      	movs	r2, r0
   17590:	1dfb      	adds	r3, r7, #7
   17592:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(DAT_PIN,true);
   17594:	2101      	movs	r1, #1
   17596:	2014      	movs	r0, #20
   17598:	4b0b      	ldr	r3, [pc, #44]	; (175c8 <LCD_data+0x40>)
   1759a:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, true);
   1759c:	490b      	ldr	r1, [pc, #44]	; (175cc <LCD_data+0x44>)
   1759e:	4b0c      	ldr	r3, [pc, #48]	; (175d0 <LCD_data+0x48>)
   175a0:	2201      	movs	r2, #1
   175a2:	0018      	movs	r0, r3
   175a4:	4b0b      	ldr	r3, [pc, #44]	; (175d4 <LCD_data+0x4c>)
   175a6:	4798      	blx	r3
	spi_io(dat);
   175a8:	1dfb      	adds	r3, r7, #7
   175aa:	781b      	ldrb	r3, [r3, #0]
   175ac:	0018      	movs	r0, r3
   175ae:	4b0a      	ldr	r3, [pc, #40]	; (175d8 <LCD_data+0x50>)
   175b0:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, false);
   175b2:	4906      	ldr	r1, [pc, #24]	; (175cc <LCD_data+0x44>)
   175b4:	4b06      	ldr	r3, [pc, #24]	; (175d0 <LCD_data+0x48>)
   175b6:	2200      	movs	r2, #0
   175b8:	0018      	movs	r0, r3
   175ba:	4b06      	ldr	r3, [pc, #24]	; (175d4 <LCD_data+0x4c>)
   175bc:	4798      	blx	r3
}
   175be:	46c0      	nop			; (mov r8, r8)
   175c0:	46bd      	mov	sp, r7
   175c2:	b002      	add	sp, #8
   175c4:	bd80      	pop	{r7, pc}
   175c6:	46c0      	nop			; (mov r8, r8)
   175c8:	00017069 	.word	0x00017069
   175cc:	200044cc 	.word	0x200044cc
   175d0:	200044c0 	.word	0x200044c0
   175d4:	0002a101 	.word	0x0002a101
   175d8:	00017509 	.word	0x00017509

000175dc <LCD_data16>:

void LCD_data16(unsigned short dat) {
   175dc:	b580      	push	{r7, lr}
   175de:	b082      	sub	sp, #8
   175e0:	af00      	add	r7, sp, #0
   175e2:	0002      	movs	r2, r0
   175e4:	1dbb      	adds	r3, r7, #6
   175e6:	801a      	strh	r2, [r3, #0]
	port_pin_set_output_level(DAT_PIN,true);
   175e8:	2101      	movs	r1, #1
   175ea:	2014      	movs	r0, #20
   175ec:	4b0f      	ldr	r3, [pc, #60]	; (1762c <LCD_data16+0x50>)
   175ee:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, true);
   175f0:	490f      	ldr	r1, [pc, #60]	; (17630 <LCD_data16+0x54>)
   175f2:	4b10      	ldr	r3, [pc, #64]	; (17634 <LCD_data16+0x58>)
   175f4:	2201      	movs	r2, #1
   175f6:	0018      	movs	r0, r3
   175f8:	4b0f      	ldr	r3, [pc, #60]	; (17638 <LCD_data16+0x5c>)
   175fa:	4798      	blx	r3
	spi_io(dat>>8);
   175fc:	1dbb      	adds	r3, r7, #6
   175fe:	881b      	ldrh	r3, [r3, #0]
   17600:	0a1b      	lsrs	r3, r3, #8
   17602:	b29b      	uxth	r3, r3
   17604:	b2db      	uxtb	r3, r3
   17606:	0018      	movs	r0, r3
   17608:	4b0c      	ldr	r3, [pc, #48]	; (1763c <LCD_data16+0x60>)
   1760a:	4798      	blx	r3
	spi_io(dat);
   1760c:	1dbb      	adds	r3, r7, #6
   1760e:	881b      	ldrh	r3, [r3, #0]
   17610:	b2db      	uxtb	r3, r3
   17612:	0018      	movs	r0, r3
   17614:	4b09      	ldr	r3, [pc, #36]	; (1763c <LCD_data16+0x60>)
   17616:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, false);
   17618:	4905      	ldr	r1, [pc, #20]	; (17630 <LCD_data16+0x54>)
   1761a:	4b06      	ldr	r3, [pc, #24]	; (17634 <LCD_data16+0x58>)
   1761c:	2200      	movs	r2, #0
   1761e:	0018      	movs	r0, r3
   17620:	4b05      	ldr	r3, [pc, #20]	; (17638 <LCD_data16+0x5c>)
   17622:	4798      	blx	r3
}
   17624:	46c0      	nop			; (mov r8, r8)
   17626:	46bd      	mov	sp, r7
   17628:	b002      	add	sp, #8
   1762a:	bd80      	pop	{r7, pc}
   1762c:	00017069 	.word	0x00017069
   17630:	200044cc 	.word	0x200044cc
   17634:	200044c0 	.word	0x200044c0
   17638:	0002a101 	.word	0x0002a101
   1763c:	00017509 	.word	0x00017509

00017640 <LCD_init>:




void LCD_init() {
   17640:	b580      	push	{r7, lr}
   17642:	af00      	add	r7, sp, #0
	configure_spi_master();
   17644:	4baa      	ldr	r3, [pc, #680]	; (178f0 <LCD_init+0x2b0>)
   17646:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, false);
   17648:	49aa      	ldr	r1, [pc, #680]	; (178f4 <LCD_init+0x2b4>)
   1764a:	4bab      	ldr	r3, [pc, #684]	; (178f8 <LCD_init+0x2b8>)
   1764c:	2200      	movs	r2, #0
   1764e:	0018      	movs	r0, r3
   17650:	4baa      	ldr	r3, [pc, #680]	; (178fc <LCD_init+0x2bc>)
   17652:	4798      	blx	r3
	delay_ms(10000);
   17654:	4baa      	ldr	r3, [pc, #680]	; (17900 <LCD_init+0x2c0>)
   17656:	0018      	movs	r0, r3
   17658:	4baa      	ldr	r3, [pc, #680]	; (17904 <LCD_init+0x2c4>)
   1765a:	4798      	blx	r3
  LCD_command(ST7735_SWRESET);//software reset
   1765c:	2001      	movs	r0, #1
   1765e:	4baa      	ldr	r3, [pc, #680]	; (17908 <LCD_init+0x2c8>)
   17660:	4798      	blx	r3
  delay_ms(50);
   17662:	2032      	movs	r0, #50	; 0x32
   17664:	4ba7      	ldr	r3, [pc, #668]	; (17904 <LCD_init+0x2c4>)
   17666:	4798      	blx	r3
	LCD_command(ST7735_SLPOUT);//exit sleep
   17668:	2011      	movs	r0, #17
   1766a:	4ba7      	ldr	r3, [pc, #668]	; (17908 <LCD_init+0x2c8>)
   1766c:	4798      	blx	r3
	delay_ms(5);
   1766e:	2005      	movs	r0, #5
   17670:	4ba4      	ldr	r3, [pc, #656]	; (17904 <LCD_init+0x2c4>)
   17672:	4798      	blx	r3
	LCD_command(ST7735_FRMCTR1);//Frame Rate Control (In normal mode/Full colors)
   17674:	20b1      	movs	r0, #177	; 0xb1
   17676:	4ba4      	ldr	r3, [pc, #656]	; (17908 <LCD_init+0x2c8>)
   17678:	4798      	blx	r3
	LCD_data(0x01);
   1767a:	2001      	movs	r0, #1
   1767c:	4ba3      	ldr	r3, [pc, #652]	; (1790c <LCD_init+0x2cc>)
   1767e:	4798      	blx	r3
	LCD_data(0x2C);
   17680:	202c      	movs	r0, #44	; 0x2c
   17682:	4ba2      	ldr	r3, [pc, #648]	; (1790c <LCD_init+0x2cc>)
   17684:	4798      	blx	r3
	LCD_data(0x2D);
   17686:	202d      	movs	r0, #45	; 0x2d
   17688:	4ba0      	ldr	r3, [pc, #640]	; (1790c <LCD_init+0x2cc>)
   1768a:	4798      	blx	r3
	delay_ms(1);
   1768c:	2001      	movs	r0, #1
   1768e:	4b9d      	ldr	r3, [pc, #628]	; (17904 <LCD_init+0x2c4>)
   17690:	4798      	blx	r3
	LCD_command(ST7735_FRMCTR2);//Frame Rate Control (In normal mode/Full colors)
   17692:	20b2      	movs	r0, #178	; 0xb2
   17694:	4b9c      	ldr	r3, [pc, #624]	; (17908 <LCD_init+0x2c8>)
   17696:	4798      	blx	r3
	LCD_data(0x01);
   17698:	2001      	movs	r0, #1
   1769a:	4b9c      	ldr	r3, [pc, #624]	; (1790c <LCD_init+0x2cc>)
   1769c:	4798      	blx	r3
	LCD_data(0x2C);
   1769e:	202c      	movs	r0, #44	; 0x2c
   176a0:	4b9a      	ldr	r3, [pc, #616]	; (1790c <LCD_init+0x2cc>)
   176a2:	4798      	blx	r3
	LCD_data(0x2D);
   176a4:	202d      	movs	r0, #45	; 0x2d
   176a6:	4b99      	ldr	r3, [pc, #612]	; (1790c <LCD_init+0x2cc>)
   176a8:	4798      	blx	r3
	delay_ms(1);
   176aa:	2001      	movs	r0, #1
   176ac:	4b95      	ldr	r3, [pc, #596]	; (17904 <LCD_init+0x2c4>)
   176ae:	4798      	blx	r3
	LCD_command(ST7735_FRMCTR3);//Frame Rate Control (In normal mode/Full colors)
   176b0:	20b3      	movs	r0, #179	; 0xb3
   176b2:	4b95      	ldr	r3, [pc, #596]	; (17908 <LCD_init+0x2c8>)
   176b4:	4798      	blx	r3
	LCD_data(0x01);
   176b6:	2001      	movs	r0, #1
   176b8:	4b94      	ldr	r3, [pc, #592]	; (1790c <LCD_init+0x2cc>)
   176ba:	4798      	blx	r3
	LCD_data(0x2C);
   176bc:	202c      	movs	r0, #44	; 0x2c
   176be:	4b93      	ldr	r3, [pc, #588]	; (1790c <LCD_init+0x2cc>)
   176c0:	4798      	blx	r3
	LCD_data(0x2D);
   176c2:	202d      	movs	r0, #45	; 0x2d
   176c4:	4b91      	ldr	r3, [pc, #580]	; (1790c <LCD_init+0x2cc>)
   176c6:	4798      	blx	r3
	LCD_data(0x01);
   176c8:	2001      	movs	r0, #1
   176ca:	4b90      	ldr	r3, [pc, #576]	; (1790c <LCD_init+0x2cc>)
   176cc:	4798      	blx	r3
	LCD_data(0x2C);
   176ce:	202c      	movs	r0, #44	; 0x2c
   176d0:	4b8e      	ldr	r3, [pc, #568]	; (1790c <LCD_init+0x2cc>)
   176d2:	4798      	blx	r3
	LCD_data(0x2D);
   176d4:	202d      	movs	r0, #45	; 0x2d
   176d6:	4b8d      	ldr	r3, [pc, #564]	; (1790c <LCD_init+0x2cc>)
   176d8:	4798      	blx	r3
	delay_ms(1);
   176da:	2001      	movs	r0, #1
   176dc:	4b89      	ldr	r3, [pc, #548]	; (17904 <LCD_init+0x2c4>)
   176de:	4798      	blx	r3
	LCD_command(ST7735_INVCTR);//display inversion
   176e0:	20b4      	movs	r0, #180	; 0xb4
   176e2:	4b89      	ldr	r3, [pc, #548]	; (17908 <LCD_init+0x2c8>)
   176e4:	4798      	blx	r3
	LCD_data(0x07);
   176e6:	2007      	movs	r0, #7
   176e8:	4b88      	ldr	r3, [pc, #544]	; (1790c <LCD_init+0x2cc>)
   176ea:	4798      	blx	r3
	delay_ms(1);
   176ec:	2001      	movs	r0, #1
   176ee:	4b85      	ldr	r3, [pc, #532]	; (17904 <LCD_init+0x2c4>)
   176f0:	4798      	blx	r3
	LCD_command(ST7735_PWCTR1);
   176f2:	20c0      	movs	r0, #192	; 0xc0
   176f4:	4b84      	ldr	r3, [pc, #528]	; (17908 <LCD_init+0x2c8>)
   176f6:	4798      	blx	r3
	LCD_data(0x0A);//4.30 - 0x0A
   176f8:	200a      	movs	r0, #10
   176fa:	4b84      	ldr	r3, [pc, #528]	; (1790c <LCD_init+0x2cc>)
   176fc:	4798      	blx	r3
	LCD_data(0x02);//0x05
   176fe:	2002      	movs	r0, #2
   17700:	4b82      	ldr	r3, [pc, #520]	; (1790c <LCD_init+0x2cc>)
   17702:	4798      	blx	r3
	LCD_data(0x84);//added auto mode
   17704:	2084      	movs	r0, #132	; 0x84
   17706:	4b81      	ldr	r3, [pc, #516]	; (1790c <LCD_init+0x2cc>)
   17708:	4798      	blx	r3
	delay_ms(1);
   1770a:	2001      	movs	r0, #1
   1770c:	4b7d      	ldr	r3, [pc, #500]	; (17904 <LCD_init+0x2c4>)
   1770e:	4798      	blx	r3
	LCD_command(ST7735_PWCTR2);
   17710:	20c1      	movs	r0, #193	; 0xc1
   17712:	4b7d      	ldr	r3, [pc, #500]	; (17908 <LCD_init+0x2c8>)
   17714:	4798      	blx	r3
	LCD_data(0xC5);
   17716:	20c5      	movs	r0, #197	; 0xc5
   17718:	4b7c      	ldr	r3, [pc, #496]	; (1790c <LCD_init+0x2cc>)
   1771a:	4798      	blx	r3
	delay_ms(1);
   1771c:	2001      	movs	r0, #1
   1771e:	4b79      	ldr	r3, [pc, #484]	; (17904 <LCD_init+0x2c4>)
   17720:	4798      	blx	r3
	LCD_command( ST7735_PWCTR3);
   17722:	20c2      	movs	r0, #194	; 0xc2
   17724:	4b78      	ldr	r3, [pc, #480]	; (17908 <LCD_init+0x2c8>)
   17726:	4798      	blx	r3
	LCD_data(0x0A);
   17728:	200a      	movs	r0, #10
   1772a:	4b78      	ldr	r3, [pc, #480]	; (1790c <LCD_init+0x2cc>)
   1772c:	4798      	blx	r3
	LCD_data(0x00);
   1772e:	2000      	movs	r0, #0
   17730:	4b76      	ldr	r3, [pc, #472]	; (1790c <LCD_init+0x2cc>)
   17732:	4798      	blx	r3
	delay_ms(1);
   17734:	2001      	movs	r0, #1
   17736:	4b73      	ldr	r3, [pc, #460]	; (17904 <LCD_init+0x2c4>)
   17738:	4798      	blx	r3
	LCD_command( ST7735_PWCTR4);
   1773a:	20c3      	movs	r0, #195	; 0xc3
   1773c:	4b72      	ldr	r3, [pc, #456]	; (17908 <LCD_init+0x2c8>)
   1773e:	4798      	blx	r3
	LCD_data(0x8A);
   17740:	208a      	movs	r0, #138	; 0x8a
   17742:	4b72      	ldr	r3, [pc, #456]	; (1790c <LCD_init+0x2cc>)
   17744:	4798      	blx	r3
	LCD_data(0x2A);
   17746:	202a      	movs	r0, #42	; 0x2a
   17748:	4b70      	ldr	r3, [pc, #448]	; (1790c <LCD_init+0x2cc>)
   1774a:	4798      	blx	r3
	delay_ms(1);
   1774c:	2001      	movs	r0, #1
   1774e:	4b6d      	ldr	r3, [pc, #436]	; (17904 <LCD_init+0x2c4>)
   17750:	4798      	blx	r3
	LCD_command( ST7735_PWCTR5);
   17752:	20c4      	movs	r0, #196	; 0xc4
   17754:	4b6c      	ldr	r3, [pc, #432]	; (17908 <LCD_init+0x2c8>)
   17756:	4798      	blx	r3
	LCD_data(0x8A);
   17758:	208a      	movs	r0, #138	; 0x8a
   1775a:	4b6c      	ldr	r3, [pc, #432]	; (1790c <LCD_init+0x2cc>)
   1775c:	4798      	blx	r3
	LCD_data(0xEE);
   1775e:	20ee      	movs	r0, #238	; 0xee
   17760:	4b6a      	ldr	r3, [pc, #424]	; (1790c <LCD_init+0x2cc>)
   17762:	4798      	blx	r3
	delay_ms(1);
   17764:	2001      	movs	r0, #1
   17766:	4b67      	ldr	r3, [pc, #412]	; (17904 <LCD_init+0x2c4>)
   17768:	4798      	blx	r3
	LCD_command(ST7735_VMCTR1);
   1776a:	20c5      	movs	r0, #197	; 0xc5
   1776c:	4b66      	ldr	r3, [pc, #408]	; (17908 <LCD_init+0x2c8>)
   1776e:	4798      	blx	r3
	LCD_data(0x0E);
   17770:	200e      	movs	r0, #14
   17772:	4b66      	ldr	r3, [pc, #408]	; (1790c <LCD_init+0x2cc>)
   17774:	4798      	blx	r3
	delay_ms(1);
   17776:	2001      	movs	r0, #1
   17778:	4b62      	ldr	r3, [pc, #392]	; (17904 <LCD_init+0x2c4>)
   1777a:	4798      	blx	r3
	LCD_command(ST7735_INVOFF);
   1777c:	2020      	movs	r0, #32
   1777e:	4b62      	ldr	r3, [pc, #392]	; (17908 <LCD_init+0x2c8>)
   17780:	4798      	blx	r3
	LCD_command(ST7735_MADCTL);
   17782:	2036      	movs	r0, #54	; 0x36
   17784:	4b60      	ldr	r3, [pc, #384]	; (17908 <LCD_init+0x2c8>)
   17786:	4798      	blx	r3
	LCD_data(0xC8);
   17788:	20c8      	movs	r0, #200	; 0xc8
   1778a:	4b60      	ldr	r3, [pc, #384]	; (1790c <LCD_init+0x2cc>)
   1778c:	4798      	blx	r3
	delay_ms(1);
   1778e:	2001      	movs	r0, #1
   17790:	4b5c      	ldr	r3, [pc, #368]	; (17904 <LCD_init+0x2c4>)
   17792:	4798      	blx	r3
	LCD_command(ST7735_COLMOD);
   17794:	203a      	movs	r0, #58	; 0x3a
   17796:	4b5c      	ldr	r3, [pc, #368]	; (17908 <LCD_init+0x2c8>)
   17798:	4798      	blx	r3
	LCD_data(0x05);
   1779a:	2005      	movs	r0, #5
   1779c:	4b5b      	ldr	r3, [pc, #364]	; (1790c <LCD_init+0x2cc>)
   1779e:	4798      	blx	r3
	delay_ms(1);
   177a0:	2001      	movs	r0, #1
   177a2:	4b58      	ldr	r3, [pc, #352]	; (17904 <LCD_init+0x2c4>)
   177a4:	4798      	blx	r3
	LCD_command(ST7735_CASET);
   177a6:	202a      	movs	r0, #42	; 0x2a
   177a8:	4b57      	ldr	r3, [pc, #348]	; (17908 <LCD_init+0x2c8>)
   177aa:	4798      	blx	r3
	LCD_data(0x00);
   177ac:	2000      	movs	r0, #0
   177ae:	4b57      	ldr	r3, [pc, #348]	; (1790c <LCD_init+0x2cc>)
   177b0:	4798      	blx	r3
	LCD_data(0x00);
   177b2:	2000      	movs	r0, #0
   177b4:	4b55      	ldr	r3, [pc, #340]	; (1790c <LCD_init+0x2cc>)
   177b6:	4798      	blx	r3
	LCD_data(0x00);
   177b8:	2000      	movs	r0, #0
   177ba:	4b54      	ldr	r3, [pc, #336]	; (1790c <LCD_init+0x2cc>)
   177bc:	4798      	blx	r3
	LCD_data(0x7F);
   177be:	207f      	movs	r0, #127	; 0x7f
   177c0:	4b52      	ldr	r3, [pc, #328]	; (1790c <LCD_init+0x2cc>)
   177c2:	4798      	blx	r3
	delay_ms(1);
   177c4:	2001      	movs	r0, #1
   177c6:	4b4f      	ldr	r3, [pc, #316]	; (17904 <LCD_init+0x2c4>)
   177c8:	4798      	blx	r3
	LCD_command(ST7735_RASET);
   177ca:	202b      	movs	r0, #43	; 0x2b
   177cc:	4b4e      	ldr	r3, [pc, #312]	; (17908 <LCD_init+0x2c8>)
   177ce:	4798      	blx	r3
	LCD_data(0x00);
   177d0:	2000      	movs	r0, #0
   177d2:	4b4e      	ldr	r3, [pc, #312]	; (1790c <LCD_init+0x2cc>)
   177d4:	4798      	blx	r3
	LCD_data(0x00);
   177d6:	2000      	movs	r0, #0
   177d8:	4b4c      	ldr	r3, [pc, #304]	; (1790c <LCD_init+0x2cc>)
   177da:	4798      	blx	r3
	LCD_data(0x00);
   177dc:	2000      	movs	r0, #0
   177de:	4b4b      	ldr	r3, [pc, #300]	; (1790c <LCD_init+0x2cc>)
   177e0:	4798      	blx	r3
	LCD_data(0x9F);
   177e2:	209f      	movs	r0, #159	; 0x9f
   177e4:	4b49      	ldr	r3, [pc, #292]	; (1790c <LCD_init+0x2cc>)
   177e6:	4798      	blx	r3
	delay_ms(1);
   177e8:	2001      	movs	r0, #1
   177ea:	4b46      	ldr	r3, [pc, #280]	; (17904 <LCD_init+0x2c4>)
   177ec:	4798      	blx	r3
	LCD_command(ST7735_GMCTRP1);
   177ee:	20e0      	movs	r0, #224	; 0xe0
   177f0:	4b45      	ldr	r3, [pc, #276]	; (17908 <LCD_init+0x2c8>)
   177f2:	4798      	blx	r3
	LCD_data(0x02);
   177f4:	2002      	movs	r0, #2
   177f6:	4b45      	ldr	r3, [pc, #276]	; (1790c <LCD_init+0x2cc>)
   177f8:	4798      	blx	r3
	LCD_data(0x1C);
   177fa:	201c      	movs	r0, #28
   177fc:	4b43      	ldr	r3, [pc, #268]	; (1790c <LCD_init+0x2cc>)
   177fe:	4798      	blx	r3
	LCD_data(0x07);
   17800:	2007      	movs	r0, #7
   17802:	4b42      	ldr	r3, [pc, #264]	; (1790c <LCD_init+0x2cc>)
   17804:	4798      	blx	r3
	LCD_data(0x12);
   17806:	2012      	movs	r0, #18
   17808:	4b40      	ldr	r3, [pc, #256]	; (1790c <LCD_init+0x2cc>)
   1780a:	4798      	blx	r3
	LCD_data(0x37);
   1780c:	2037      	movs	r0, #55	; 0x37
   1780e:	4b3f      	ldr	r3, [pc, #252]	; (1790c <LCD_init+0x2cc>)
   17810:	4798      	blx	r3
	LCD_data(0x32);
   17812:	2032      	movs	r0, #50	; 0x32
   17814:	4b3d      	ldr	r3, [pc, #244]	; (1790c <LCD_init+0x2cc>)
   17816:	4798      	blx	r3
	LCD_data(0x29);
   17818:	2029      	movs	r0, #41	; 0x29
   1781a:	4b3c      	ldr	r3, [pc, #240]	; (1790c <LCD_init+0x2cc>)
   1781c:	4798      	blx	r3
	LCD_data(0x2D);
   1781e:	202d      	movs	r0, #45	; 0x2d
   17820:	4b3a      	ldr	r3, [pc, #232]	; (1790c <LCD_init+0x2cc>)
   17822:	4798      	blx	r3
	LCD_data(0x29);
   17824:	2029      	movs	r0, #41	; 0x29
   17826:	4b39      	ldr	r3, [pc, #228]	; (1790c <LCD_init+0x2cc>)
   17828:	4798      	blx	r3
	LCD_data(0x25);
   1782a:	2025      	movs	r0, #37	; 0x25
   1782c:	4b37      	ldr	r3, [pc, #220]	; (1790c <LCD_init+0x2cc>)
   1782e:	4798      	blx	r3
	LCD_data(0x2B);
   17830:	202b      	movs	r0, #43	; 0x2b
   17832:	4b36      	ldr	r3, [pc, #216]	; (1790c <LCD_init+0x2cc>)
   17834:	4798      	blx	r3
	LCD_data(0x39);
   17836:	2039      	movs	r0, #57	; 0x39
   17838:	4b34      	ldr	r3, [pc, #208]	; (1790c <LCD_init+0x2cc>)
   1783a:	4798      	blx	r3
	LCD_data(0x00);
   1783c:	2000      	movs	r0, #0
   1783e:	4b33      	ldr	r3, [pc, #204]	; (1790c <LCD_init+0x2cc>)
   17840:	4798      	blx	r3
	LCD_data(0x01);
   17842:	2001      	movs	r0, #1
   17844:	4b31      	ldr	r3, [pc, #196]	; (1790c <LCD_init+0x2cc>)
   17846:	4798      	blx	r3
	LCD_data(0x03);
   17848:	2003      	movs	r0, #3
   1784a:	4b30      	ldr	r3, [pc, #192]	; (1790c <LCD_init+0x2cc>)
   1784c:	4798      	blx	r3
	LCD_data(0x10);
   1784e:	2010      	movs	r0, #16
   17850:	4b2e      	ldr	r3, [pc, #184]	; (1790c <LCD_init+0x2cc>)
   17852:	4798      	blx	r3
	delay_ms(1);
   17854:	2001      	movs	r0, #1
   17856:	4b2b      	ldr	r3, [pc, #172]	; (17904 <LCD_init+0x2c4>)
   17858:	4798      	blx	r3
	LCD_command(ST7735_GMCTRN1);
   1785a:	20e1      	movs	r0, #225	; 0xe1
   1785c:	4b2a      	ldr	r3, [pc, #168]	; (17908 <LCD_init+0x2c8>)
   1785e:	4798      	blx	r3
	LCD_data(0x03);
   17860:	2003      	movs	r0, #3
   17862:	4b2a      	ldr	r3, [pc, #168]	; (1790c <LCD_init+0x2cc>)
   17864:	4798      	blx	r3
	LCD_data(0x1D);
   17866:	201d      	movs	r0, #29
   17868:	4b28      	ldr	r3, [pc, #160]	; (1790c <LCD_init+0x2cc>)
   1786a:	4798      	blx	r3
	LCD_data(0x07);
   1786c:	2007      	movs	r0, #7
   1786e:	4b27      	ldr	r3, [pc, #156]	; (1790c <LCD_init+0x2cc>)
   17870:	4798      	blx	r3
	LCD_data(0x06);
   17872:	2006      	movs	r0, #6
   17874:	4b25      	ldr	r3, [pc, #148]	; (1790c <LCD_init+0x2cc>)
   17876:	4798      	blx	r3
	LCD_data(0x2E);
   17878:	202e      	movs	r0, #46	; 0x2e
   1787a:	4b24      	ldr	r3, [pc, #144]	; (1790c <LCD_init+0x2cc>)
   1787c:	4798      	blx	r3
	LCD_data(0x2C);
   1787e:	202c      	movs	r0, #44	; 0x2c
   17880:	4b22      	ldr	r3, [pc, #136]	; (1790c <LCD_init+0x2cc>)
   17882:	4798      	blx	r3
	LCD_data(0x29);
   17884:	2029      	movs	r0, #41	; 0x29
   17886:	4b21      	ldr	r3, [pc, #132]	; (1790c <LCD_init+0x2cc>)
   17888:	4798      	blx	r3
	LCD_data(0x2D);
   1788a:	202d      	movs	r0, #45	; 0x2d
   1788c:	4b1f      	ldr	r3, [pc, #124]	; (1790c <LCD_init+0x2cc>)
   1788e:	4798      	blx	r3
	LCD_data(0x2E);
   17890:	202e      	movs	r0, #46	; 0x2e
   17892:	4b1e      	ldr	r3, [pc, #120]	; (1790c <LCD_init+0x2cc>)
   17894:	4798      	blx	r3
	LCD_data(0x2E);
   17896:	202e      	movs	r0, #46	; 0x2e
   17898:	4b1c      	ldr	r3, [pc, #112]	; (1790c <LCD_init+0x2cc>)
   1789a:	4798      	blx	r3
	LCD_data(0x37);
   1789c:	2037      	movs	r0, #55	; 0x37
   1789e:	4b1b      	ldr	r3, [pc, #108]	; (1790c <LCD_init+0x2cc>)
   178a0:	4798      	blx	r3
	LCD_data(0x3F);
   178a2:	203f      	movs	r0, #63	; 0x3f
   178a4:	4b19      	ldr	r3, [pc, #100]	; (1790c <LCD_init+0x2cc>)
   178a6:	4798      	blx	r3
	LCD_data(0x00);
   178a8:	2000      	movs	r0, #0
   178aa:	4b18      	ldr	r3, [pc, #96]	; (1790c <LCD_init+0x2cc>)
   178ac:	4798      	blx	r3
	LCD_data(0x00);
   178ae:	2000      	movs	r0, #0
   178b0:	4b16      	ldr	r3, [pc, #88]	; (1790c <LCD_init+0x2cc>)
   178b2:	4798      	blx	r3
	LCD_data(0x02);
   178b4:	2002      	movs	r0, #2
   178b6:	4b15      	ldr	r3, [pc, #84]	; (1790c <LCD_init+0x2cc>)
   178b8:	4798      	blx	r3
	LCD_data(0x10);
   178ba:	2010      	movs	r0, #16
   178bc:	4b13      	ldr	r3, [pc, #76]	; (1790c <LCD_init+0x2cc>)
   178be:	4798      	blx	r3
	delay_ms(1);
   178c0:	2001      	movs	r0, #1
   178c2:	4b10      	ldr	r3, [pc, #64]	; (17904 <LCD_init+0x2c4>)
   178c4:	4798      	blx	r3
	LCD_command(ST7735_NORON);
   178c6:	2013      	movs	r0, #19
   178c8:	4b0f      	ldr	r3, [pc, #60]	; (17908 <LCD_init+0x2c8>)
   178ca:	4798      	blx	r3
	delay_ms(10);
   178cc:	200a      	movs	r0, #10
   178ce:	4b0d      	ldr	r3, [pc, #52]	; (17904 <LCD_init+0x2c4>)
   178d0:	4798      	blx	r3
	LCD_command(ST7735_DISPON);
   178d2:	2029      	movs	r0, #41	; 0x29
   178d4:	4b0c      	ldr	r3, [pc, #48]	; (17908 <LCD_init+0x2c8>)
   178d6:	4798      	blx	r3
	delay_ms(100);
   178d8:	2064      	movs	r0, #100	; 0x64
   178da:	4b0a      	ldr	r3, [pc, #40]	; (17904 <LCD_init+0x2c4>)
   178dc:	4798      	blx	r3
	LCD_command(ST7735_MADCTL); // rotation
   178de:	2036      	movs	r0, #54	; 0x36
   178e0:	4b09      	ldr	r3, [pc, #36]	; (17908 <LCD_init+0x2c8>)
   178e2:	4798      	blx	r3
    LCD_data(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
   178e4:	20a0      	movs	r0, #160	; 0xa0
   178e6:	4b09      	ldr	r3, [pc, #36]	; (1790c <LCD_init+0x2cc>)
   178e8:	4798      	blx	r3
}
   178ea:	46c0      	nop			; (mov r8, r8)
   178ec:	46bd      	mov	sp, r7
   178ee:	bd80      	pop	{r7, pc}
   178f0:	00017461 	.word	0x00017461
   178f4:	200044cc 	.word	0x200044cc
   178f8:	200044c0 	.word	0x200044c0
   178fc:	0002a101 	.word	0x0002a101
   17900:	00002710 	.word	0x00002710
   17904:	00021ef1 	.word	0x00021ef1
   17908:	00017535 	.word	0x00017535
   1790c:	00017589 	.word	0x00017589

00017910 <LCD_drawPixel>:

void LCD_drawPixel(unsigned short x, unsigned short y, unsigned short color) {
   17910:	b590      	push	{r4, r7, lr}
   17912:	b083      	sub	sp, #12
   17914:	af00      	add	r7, sp, #0
   17916:	0004      	movs	r4, r0
   17918:	0008      	movs	r0, r1
   1791a:	0011      	movs	r1, r2
   1791c:	1dbb      	adds	r3, r7, #6
   1791e:	1c22      	adds	r2, r4, #0
   17920:	801a      	strh	r2, [r3, #0]
   17922:	1d3b      	adds	r3, r7, #4
   17924:	1c02      	adds	r2, r0, #0
   17926:	801a      	strh	r2, [r3, #0]
   17928:	1cbb      	adds	r3, r7, #2
   1792a:	1c0a      	adds	r2, r1, #0
   1792c:	801a      	strh	r2, [r3, #0]
  // check boundary
  LCD_setAddr(x,y,x+1,y+1);
   1792e:	1dbb      	adds	r3, r7, #6
   17930:	881b      	ldrh	r3, [r3, #0]
   17932:	3301      	adds	r3, #1
   17934:	b29a      	uxth	r2, r3
   17936:	1d3b      	adds	r3, r7, #4
   17938:	881b      	ldrh	r3, [r3, #0]
   1793a:	3301      	adds	r3, #1
   1793c:	b29c      	uxth	r4, r3
   1793e:	1d3b      	adds	r3, r7, #4
   17940:	8819      	ldrh	r1, [r3, #0]
   17942:	1dbb      	adds	r3, r7, #6
   17944:	8818      	ldrh	r0, [r3, #0]
   17946:	0023      	movs	r3, r4
   17948:	4c05      	ldr	r4, [pc, #20]	; (17960 <LCD_drawPixel+0x50>)
   1794a:	47a0      	blx	r4
  LCD_data16(color);
   1794c:	1cbb      	adds	r3, r7, #2
   1794e:	881b      	ldrh	r3, [r3, #0]
   17950:	0018      	movs	r0, r3
   17952:	4b04      	ldr	r3, [pc, #16]	; (17964 <LCD_drawPixel+0x54>)
   17954:	4798      	blx	r3
}
   17956:	46c0      	nop			; (mov r8, r8)
   17958:	46bd      	mov	sp, r7
   1795a:	b003      	add	sp, #12
   1795c:	bd90      	pop	{r4, r7, pc}
   1795e:	46c0      	nop			; (mov r8, r8)
   17960:	00017969 	.word	0x00017969
   17964:	000175dd 	.word	0x000175dd

00017968 <LCD_setAddr>:

void LCD_setAddr(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1) {
   17968:	b5b0      	push	{r4, r5, r7, lr}
   1796a:	b082      	sub	sp, #8
   1796c:	af00      	add	r7, sp, #0
   1796e:	0005      	movs	r5, r0
   17970:	000c      	movs	r4, r1
   17972:	0010      	movs	r0, r2
   17974:	0019      	movs	r1, r3
   17976:	1dbb      	adds	r3, r7, #6
   17978:	1c2a      	adds	r2, r5, #0
   1797a:	801a      	strh	r2, [r3, #0]
   1797c:	1d3b      	adds	r3, r7, #4
   1797e:	1c22      	adds	r2, r4, #0
   17980:	801a      	strh	r2, [r3, #0]
   17982:	1cbb      	adds	r3, r7, #2
   17984:	1c02      	adds	r2, r0, #0
   17986:	801a      	strh	r2, [r3, #0]
   17988:	003b      	movs	r3, r7
   1798a:	1c0a      	adds	r2, r1, #0
   1798c:	801a      	strh	r2, [r3, #0]
  LCD_command(ST7735_CASET); // Column
   1798e:	202a      	movs	r0, #42	; 0x2a
   17990:	4b0f      	ldr	r3, [pc, #60]	; (179d0 <LCD_setAddr+0x68>)
   17992:	4798      	blx	r3
  LCD_data16(x0);
   17994:	1dbb      	adds	r3, r7, #6
   17996:	881b      	ldrh	r3, [r3, #0]
   17998:	0018      	movs	r0, r3
   1799a:	4b0e      	ldr	r3, [pc, #56]	; (179d4 <LCD_setAddr+0x6c>)
   1799c:	4798      	blx	r3
	LCD_data16(x1);
   1799e:	1cbb      	adds	r3, r7, #2
   179a0:	881b      	ldrh	r3, [r3, #0]
   179a2:	0018      	movs	r0, r3
   179a4:	4b0b      	ldr	r3, [pc, #44]	; (179d4 <LCD_setAddr+0x6c>)
   179a6:	4798      	blx	r3
	LCD_command(ST7735_RASET); // Page
   179a8:	202b      	movs	r0, #43	; 0x2b
   179aa:	4b09      	ldr	r3, [pc, #36]	; (179d0 <LCD_setAddr+0x68>)
   179ac:	4798      	blx	r3
	LCD_data16(y0);
   179ae:	1d3b      	adds	r3, r7, #4
   179b0:	881b      	ldrh	r3, [r3, #0]
   179b2:	0018      	movs	r0, r3
   179b4:	4b07      	ldr	r3, [pc, #28]	; (179d4 <LCD_setAddr+0x6c>)
   179b6:	4798      	blx	r3
	LCD_data16(y1);
   179b8:	003b      	movs	r3, r7
   179ba:	881b      	ldrh	r3, [r3, #0]
   179bc:	0018      	movs	r0, r3
   179be:	4b05      	ldr	r3, [pc, #20]	; (179d4 <LCD_setAddr+0x6c>)
   179c0:	4798      	blx	r3
	LCD_command(ST7735_RAMWR); // Into RAM
   179c2:	202c      	movs	r0, #44	; 0x2c
   179c4:	4b02      	ldr	r3, [pc, #8]	; (179d0 <LCD_setAddr+0x68>)
   179c6:	4798      	blx	r3
}
   179c8:	46c0      	nop			; (mov r8, r8)
   179ca:	46bd      	mov	sp, r7
   179cc:	b002      	add	sp, #8
   179ce:	bdb0      	pop	{r4, r5, r7, pc}
   179d0:	00017535 	.word	0x00017535
   179d4:	000175dd 	.word	0x000175dd

000179d8 <LCD_clearScreen>:

void LCD_clearScreen(unsigned short color) {
   179d8:	b590      	push	{r4, r7, lr}
   179da:	b085      	sub	sp, #20
   179dc:	af00      	add	r7, sp, #0
   179de:	0002      	movs	r2, r0
   179e0:	1dbb      	adds	r3, r7, #6
   179e2:	801a      	strh	r2, [r3, #0]
  int i;
  LCD_setAddr(0,0,_GRAMWIDTH,_GRAMHEIGH);
   179e4:	2380      	movs	r3, #128	; 0x80
   179e6:	22a0      	movs	r2, #160	; 0xa0
   179e8:	2100      	movs	r1, #0
   179ea:	2000      	movs	r0, #0
   179ec:	4c0a      	ldr	r4, [pc, #40]	; (17a18 <LCD_clearScreen+0x40>)
   179ee:	47a0      	blx	r4
	for (i = 0;i < _GRAMSIZE; i++){
   179f0:	2300      	movs	r3, #0
   179f2:	60fb      	str	r3, [r7, #12]
   179f4:	e007      	b.n	17a06 <LCD_clearScreen+0x2e>
		LCD_data16(color);
   179f6:	1dbb      	adds	r3, r7, #6
   179f8:	881b      	ldrh	r3, [r3, #0]
   179fa:	0018      	movs	r0, r3
   179fc:	4b07      	ldr	r3, [pc, #28]	; (17a1c <LCD_clearScreen+0x44>)
   179fe:	4798      	blx	r3
	for (i = 0;i < _GRAMSIZE; i++){
   17a00:	68fb      	ldr	r3, [r7, #12]
   17a02:	3301      	adds	r3, #1
   17a04:	60fb      	str	r3, [r7, #12]
   17a06:	68fb      	ldr	r3, [r7, #12]
   17a08:	4a05      	ldr	r2, [pc, #20]	; (17a20 <LCD_clearScreen+0x48>)
   17a0a:	4293      	cmp	r3, r2
   17a0c:	ddf3      	ble.n	179f6 <LCD_clearScreen+0x1e>
	}
}
   17a0e:	46c0      	nop			; (mov r8, r8)
   17a10:	46bd      	mov	sp, r7
   17a12:	b005      	add	sp, #20
   17a14:	bd90      	pop	{r4, r7, pc}
   17a16:	46c0      	nop			; (mov r8, r8)
   17a18:	00017969 	.word	0x00017969
   17a1c:	000175dd 	.word	0x000175dd
   17a20:	00004fff 	.word	0x00004fff

00017a24 <LCD_menu>:
			}
		}
}*/


void LCD_menu(void){
   17a24:	b590      	push	{r4, r7, lr}
   17a26:	b08b      	sub	sp, #44	; 0x2c
   17a28:	af02      	add	r7, sp, #8
	LCD_clearScreen(WHITE);
   17a2a:	4b2c      	ldr	r3, [pc, #176]	; (17adc <LCD_menu+0xb8>)
   17a2c:	0018      	movs	r0, r3
   17a2e:	4b2c      	ldr	r3, [pc, #176]	; (17ae0 <LCD_menu+0xbc>)
   17a30:	4798      	blx	r3
	drawString(20,40,"ESE-516",BLACK,WHITE);
   17a32:	4a2c      	ldr	r2, [pc, #176]	; (17ae4 <LCD_menu+0xc0>)
   17a34:	2301      	movs	r3, #1
   17a36:	425b      	negs	r3, r3
   17a38:	9300      	str	r3, [sp, #0]
   17a3a:	2300      	movs	r3, #0
   17a3c:	2128      	movs	r1, #40	; 0x28
   17a3e:	2014      	movs	r0, #20
   17a40:	4c29      	ldr	r4, [pc, #164]	; (17ae8 <LCD_menu+0xc4>)
   17a42:	47a0      	blx	r4
	drawString(50,50,"Welcome",BLACK,WHITE);
   17a44:	4a29      	ldr	r2, [pc, #164]	; (17aec <LCD_menu+0xc8>)
   17a46:	2301      	movs	r3, #1
   17a48:	425b      	negs	r3, r3
   17a4a:	9300      	str	r3, [sp, #0]
   17a4c:	2300      	movs	r3, #0
   17a4e:	2132      	movs	r1, #50	; 0x32
   17a50:	2032      	movs	r0, #50	; 0x32
   17a52:	4c25      	ldr	r4, [pc, #148]	; (17ae8 <LCD_menu+0xc4>)
   17a54:	47a0      	blx	r4
	if(getLock()){
   17a56:	4b26      	ldr	r3, [pc, #152]	; (17af0 <LCD_menu+0xcc>)
   17a58:	4798      	blx	r3
   17a5a:	1e03      	subs	r3, r0, #0
   17a5c:	d00a      	beq.n	17a74 <LCD_menu+0x50>
		drawString(20,60,"WatchDog Status:Locked",RED,WHITE);
   17a5e:	4925      	ldr	r1, [pc, #148]	; (17af4 <LCD_menu+0xd0>)
   17a60:	4a25      	ldr	r2, [pc, #148]	; (17af8 <LCD_menu+0xd4>)
   17a62:	2301      	movs	r3, #1
   17a64:	425b      	negs	r3, r3
   17a66:	9300      	str	r3, [sp, #0]
   17a68:	000b      	movs	r3, r1
   17a6a:	213c      	movs	r1, #60	; 0x3c
   17a6c:	2014      	movs	r0, #20
   17a6e:	4c1e      	ldr	r4, [pc, #120]	; (17ae8 <LCD_menu+0xc4>)
   17a70:	47a0      	blx	r4
   17a72:	e009      	b.n	17a88 <LCD_menu+0x64>
	}
	else{drawString(20,60,"WatchDog Status:Unlocked",RED,WHITE);}
   17a74:	491f      	ldr	r1, [pc, #124]	; (17af4 <LCD_menu+0xd0>)
   17a76:	4a21      	ldr	r2, [pc, #132]	; (17afc <LCD_menu+0xd8>)
   17a78:	2301      	movs	r3, #1
   17a7a:	425b      	negs	r3, r3
   17a7c:	9300      	str	r3, [sp, #0]
   17a7e:	000b      	movs	r3, r1
   17a80:	213c      	movs	r1, #60	; 0x3c
   17a82:	2014      	movs	r0, #20
   17a84:	4c18      	ldr	r4, [pc, #96]	; (17ae8 <LCD_menu+0xc4>)
   17a86:	47a0      	blx	r4
	
	char buffer[20];
	memset(buffer,0,sizeof(buffer));
   17a88:	003b      	movs	r3, r7
   17a8a:	2214      	movs	r2, #20
   17a8c:	2100      	movs	r1, #0
   17a8e:	0018      	movs	r0, r3
   17a90:	4b1b      	ldr	r3, [pc, #108]	; (17b00 <LCD_menu+0xdc>)
   17a92:	4798      	blx	r3
	read_sensor_data();
   17a94:	4b1b      	ldr	r3, [pc, #108]	; (17b04 <LCD_menu+0xe0>)
   17a96:	4798      	blx	r3
	float temp = getTemperature();
   17a98:	4b1b      	ldr	r3, [pc, #108]	; (17b08 <LCD_menu+0xe4>)
   17a9a:	4798      	blx	r3
   17a9c:	1c03      	adds	r3, r0, #0
   17a9e:	61fb      	str	r3, [r7, #28]
	float hum = getHumidity();
   17aa0:	4b1a      	ldr	r3, [pc, #104]	; (17b0c <LCD_menu+0xe8>)
   17aa2:	4798      	blx	r3
   17aa4:	1c03      	adds	r3, r0, #0
   17aa6:	61bb      	str	r3, [r7, #24]
	float pressure = getPressure();
   17aa8:	4b19      	ldr	r3, [pc, #100]	; (17b10 <LCD_menu+0xec>)
   17aaa:	4798      	blx	r3
   17aac:	1c03      	adds	r3, r0, #0
   17aae:	617b      	str	r3, [r7, #20]
	snprintf(buffer,sizeof(buffer),"Temperature: %d ",(int)temp);
   17ab0:	4b18      	ldr	r3, [pc, #96]	; (17b14 <LCD_menu+0xf0>)
   17ab2:	69f8      	ldr	r0, [r7, #28]
   17ab4:	4798      	blx	r3
   17ab6:	0003      	movs	r3, r0
   17ab8:	4a17      	ldr	r2, [pc, #92]	; (17b18 <LCD_menu+0xf4>)
   17aba:	0038      	movs	r0, r7
   17abc:	2114      	movs	r1, #20
   17abe:	4c17      	ldr	r4, [pc, #92]	; (17b1c <LCD_menu+0xf8>)
   17ac0:	47a0      	blx	r4
	drawString(20,70,buffer,BLACK,WHITE);
   17ac2:	003a      	movs	r2, r7
   17ac4:	2301      	movs	r3, #1
   17ac6:	425b      	negs	r3, r3
   17ac8:	9300      	str	r3, [sp, #0]
   17aca:	2300      	movs	r3, #0
   17acc:	2146      	movs	r1, #70	; 0x46
   17ace:	2014      	movs	r0, #20
   17ad0:	4c05      	ldr	r4, [pc, #20]	; (17ae8 <LCD_menu+0xc4>)
   17ad2:	47a0      	blx	r4
	

   17ad4:	46c0      	nop			; (mov r8, r8)
   17ad6:	46bd      	mov	sp, r7
   17ad8:	b009      	add	sp, #36	; 0x24
   17ada:	bd90      	pop	{r4, r7, pc}
   17adc:	0000ffff 	.word	0x0000ffff
   17ae0:	000179d9 	.word	0x000179d9
   17ae4:	000388a4 	.word	0x000388a4
   17ae8:	000172e1 	.word	0x000172e1
   17aec:	000388ac 	.word	0x000388ac
   17af0:	00016db9 	.word	0x00016db9
   17af4:	fffff800 	.word	0xfffff800
   17af8:	000388b4 	.word	0x000388b4
   17afc:	000388cc 	.word	0x000388cc
   17b00:	00036c9f 	.word	0x00036c9f
   17b04:	00014ad1 	.word	0x00014ad1
   17b08:	00014bbd 	.word	0x00014bbd
   17b0c:	00014bd1 	.word	0x00014bd1
   17b10:	00014be5 	.word	0x00014be5
   17b14:	00034fe9 	.word	0x00034fe9
   17b18:	000388e8 	.word	0x000388e8
   17b1c:	00036ef9 	.word	0x00036ef9

00017b20 <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   17b20:	b590      	push	{r4, r7, lr}
   17b22:	b087      	sub	sp, #28
   17b24:	af00      	add	r7, sp, #0
   17b26:	6078      	str	r0, [r7, #4]
    // Do initialization code here
    SerialConsoleWriteString("UI Task Started!");
   17b28:	4b92      	ldr	r3, [pc, #584]	; (17d74 <vUiHandlerTask+0x254>)
   17b2a:	0018      	movs	r0, r3
   17b2c:	4b92      	ldr	r3, [pc, #584]	; (17d78 <vUiHandlerTask+0x258>)
   17b2e:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   17b30:	4b92      	ldr	r3, [pc, #584]	; (17d7c <vUiHandlerTask+0x25c>)
   17b32:	2201      	movs	r2, #1
   17b34:	701a      	strb	r2, [r3, #0]
   
	configure_port_servo_pins();
   17b36:	4b92      	ldr	r3, [pc, #584]	; (17d80 <vUiHandlerTask+0x260>)
   17b38:	4798      	blx	r3
	init_bme680();
   17b3a:	4b92      	ldr	r3, [pc, #584]	; (17d84 <vUiHandlerTask+0x264>)
   17b3c:	4798      	blx	r3
	read_sensor_data();
   17b3e:	4b92      	ldr	r3, [pc, #584]	; (17d88 <vUiHandlerTask+0x268>)
   17b40:	4798      	blx	r3

	
	
	
	
    configure_port_pins();
   17b42:	4b92      	ldr	r3, [pc, #584]	; (17d8c <vUiHandlerTask+0x26c>)
   17b44:	4798      	blx	r3
	//servopulse(200);
	//configure_tcc();
	//setPulse(2.4);
	 //lock();
	 
	 LCD_init();
   17b46:	4b92      	ldr	r3, [pc, #584]	; (17d90 <vUiHandlerTask+0x270>)
   17b48:	4798      	blx	r3
	LCD_clearScreen(WHITE);
   17b4a:	4b92      	ldr	r3, [pc, #584]	; (17d94 <vUiHandlerTask+0x274>)
   17b4c:	0018      	movs	r0, r3
   17b4e:	4b92      	ldr	r3, [pc, #584]	; (17d98 <vUiHandlerTask+0x278>)
   17b50:	4798      	blx	r3
    // Here we start the loop for the UI State Machine
	
	
    while (1) {
	
		LCD_menu();
   17b52:	4b92      	ldr	r3, [pc, #584]	; (17d9c <vUiHandlerTask+0x27c>)
   17b54:	4798      	blx	r3
        switch (uiState) {
   17b56:	4b89      	ldr	r3, [pc, #548]	; (17d7c <vUiHandlerTask+0x25c>)
   17b58:	781b      	ldrb	r3, [r3, #0]
   17b5a:	2b01      	cmp	r3, #1
   17b5c:	d100      	bne.n	17b60 <vUiHandlerTask+0x40>
   17b5e:	e101      	b.n	17d64 <vUiHandlerTask+0x244>
   17b60:	2b02      	cmp	r3, #2
   17b62:	d002      	beq.n	17b6a <vUiHandlerTask+0x4a>
   17b64:	2b00      	cmp	r3, #0
   17b66:	d068      	beq.n	17c3a <vUiHandlerTask+0x11a>
   17b68:	e0f8      	b.n	17d5c <vUiHandlerTask+0x23c>
            }

            case (UI_STATE_SHOW_MOVES): {
                // Set initial state variable that will be used on the
                // UI_STATE_Handle_Buttons and need to be initialized once
                pressedKeys = 0;  // Set number of keys pressed by player to 0.
   17b6a:	4b8d      	ldr	r3, [pc, #564]	; (17da0 <vUiHandlerTask+0x280>)
   17b6c:	2200      	movs	r2, #0
   17b6e:	701a      	strb	r2, [r3, #0]
                keysToPress = 1;  // Set as an example to 1. STUDENTS should change this
   17b70:	4b8c      	ldr	r3, [pc, #560]	; (17da4 <vUiHandlerTask+0x284>)
   17b72:	2201      	movs	r2, #1
   17b74:	701a      	strb	r2, [r3, #0]
                                  // to the number of key presses needed.
                memset(gamePacketOut.game, 0xff,
   17b76:	4b8c      	ldr	r3, [pc, #560]	; (17da8 <vUiHandlerTask+0x288>)
   17b78:	2214      	movs	r2, #20
   17b7a:	21ff      	movs	r1, #255	; 0xff
   17b7c:	0018      	movs	r0, r3
   17b7e:	4b8b      	ldr	r3, [pc, #556]	; (17dac <vUiHandlerTask+0x28c>)
   17b80:	4798      	blx	r3
                       sizeof(gamePacketOut.game));  // Erase gamePacketOut to an initial state
                playIsDone = false;                  // Set play to false
   17b82:	4b8b      	ldr	r3, [pc, #556]	; (17db0 <vUiHandlerTask+0x290>)
   17b84:	2200      	movs	r2, #0
   17b86:	701a      	strb	r2, [r3, #0]
                uint8_t presses = SeesawGetKeypadCount();
   17b88:	2317      	movs	r3, #23
   17b8a:	18fc      	adds	r4, r7, r3
   17b8c:	4b89      	ldr	r3, [pc, #548]	; (17db4 <vUiHandlerTask+0x294>)
   17b8e:	4798      	blx	r3
   17b90:	0003      	movs	r3, r0
   17b92:	7023      	strb	r3, [r4, #0]
                if (presses >= BUTTON_PRESSES_MAX) presses = BUTTON_PRESSES_MAX;
   17b94:	2317      	movs	r3, #23
   17b96:	18fb      	adds	r3, r7, r3
   17b98:	781b      	ldrb	r3, [r3, #0]
   17b9a:	2b0f      	cmp	r3, #15
   17b9c:	d903      	bls.n	17ba6 <vUiHandlerTask+0x86>
   17b9e:	2317      	movs	r3, #23
   17ba0:	18fb      	adds	r3, r7, r3
   17ba2:	2210      	movs	r2, #16
   17ba4:	701a      	strb	r2, [r3, #0]
                if (presses != 0)
   17ba6:	2317      	movs	r3, #23
   17ba8:	18fb      	adds	r3, r7, r3
   17baa:	781b      	ldrb	r3, [r3, #0]
   17bac:	2b00      	cmp	r3, #0
   17bae:	d007      	beq.n	17bc0 <vUiHandlerTask+0xa0>
                    SeesawReadKeypad(buttons,
   17bb0:	2317      	movs	r3, #23
   17bb2:	18fb      	adds	r3, r7, r3
   17bb4:	781a      	ldrb	r2, [r3, #0]
   17bb6:	4b80      	ldr	r3, [pc, #512]	; (17db8 <vUiHandlerTask+0x298>)
   17bb8:	0011      	movs	r1, r2
   17bba:	0018      	movs	r0, r3
   17bbc:	4b7f      	ldr	r3, [pc, #508]	; (17dbc <vUiHandlerTask+0x29c>)
   17bbe:	4798      	blx	r3
                                     presses);  // Empty Seesaw buffer just in case
                                                // it has latent presses on it!
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   17bc0:	4b7d      	ldr	r3, [pc, #500]	; (17db8 <vUiHandlerTask+0x298>)
   17bc2:	2210      	movs	r2, #16
   17bc4:	2100      	movs	r1, #0
   17bc6:	0018      	movs	r0, r3
   17bc8:	4b78      	ldr	r3, [pc, #480]	; (17dac <vUiHandlerTask+0x28c>)
   17bca:	4798      	blx	r3
                // the message gets longer might be more fun! After you finish showing
                // the move should go to state UI_STATE_HANDLE_BUTTONS

                // In the beginner example we turn LED0 and LED15 will turn on for 500
                // ms then we go to UI_STATE_HANDLE_BUTTONS
                SeesawSetLed(0, red, green, blue);  // Turn button 1 on
   17bcc:	4b7c      	ldr	r3, [pc, #496]	; (17dc0 <vUiHandlerTask+0x2a0>)
   17bce:	781b      	ldrb	r3, [r3, #0]
   17bd0:	b2d9      	uxtb	r1, r3
   17bd2:	4b7c      	ldr	r3, [pc, #496]	; (17dc4 <vUiHandlerTask+0x2a4>)
   17bd4:	781b      	ldrb	r3, [r3, #0]
   17bd6:	b2da      	uxtb	r2, r3
   17bd8:	4b7b      	ldr	r3, [pc, #492]	; (17dc8 <vUiHandlerTask+0x2a8>)
   17bda:	781b      	ldrb	r3, [r3, #0]
   17bdc:	b2db      	uxtb	r3, r3
   17bde:	2000      	movs	r0, #0
   17be0:	4c7a      	ldr	r4, [pc, #488]	; (17dcc <vUiHandlerTask+0x2ac>)
   17be2:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   17be4:	4b7a      	ldr	r3, [pc, #488]	; (17dd0 <vUiHandlerTask+0x2b0>)
   17be6:	4798      	blx	r3
                vTaskDelay(10);
   17be8:	200a      	movs	r0, #10
   17bea:	4b7a      	ldr	r3, [pc, #488]	; (17dd4 <vUiHandlerTask+0x2b4>)
   17bec:	4798      	blx	r3
                SeesawSetLed(0, 0, 0, 0);            // Turn button 0 off
   17bee:	2300      	movs	r3, #0
   17bf0:	2200      	movs	r2, #0
   17bf2:	2100      	movs	r1, #0
   17bf4:	2000      	movs	r0, #0
   17bf6:	4c75      	ldr	r4, [pc, #468]	; (17dcc <vUiHandlerTask+0x2ac>)
   17bf8:	47a0      	blx	r4
                SeesawSetLed(15, red, green, blue);  // Turn button 15 on
   17bfa:	4b71      	ldr	r3, [pc, #452]	; (17dc0 <vUiHandlerTask+0x2a0>)
   17bfc:	781b      	ldrb	r3, [r3, #0]
   17bfe:	b2d9      	uxtb	r1, r3
   17c00:	4b70      	ldr	r3, [pc, #448]	; (17dc4 <vUiHandlerTask+0x2a4>)
   17c02:	781b      	ldrb	r3, [r3, #0]
   17c04:	b2da      	uxtb	r2, r3
   17c06:	4b70      	ldr	r3, [pc, #448]	; (17dc8 <vUiHandlerTask+0x2a8>)
   17c08:	781b      	ldrb	r3, [r3, #0]
   17c0a:	b2db      	uxtb	r3, r3
   17c0c:	200f      	movs	r0, #15
   17c0e:	4c6f      	ldr	r4, [pc, #444]	; (17dcc <vUiHandlerTask+0x2ac>)
   17c10:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   17c12:	4b6f      	ldr	r3, [pc, #444]	; (17dd0 <vUiHandlerTask+0x2b0>)
   17c14:	4798      	blx	r3
                vTaskDelay(10);
   17c16:	200a      	movs	r0, #10
   17c18:	4b6e      	ldr	r3, [pc, #440]	; (17dd4 <vUiHandlerTask+0x2b4>)
   17c1a:	4798      	blx	r3
                SeesawSetLed(15, 0, 0, 0);  // Turn button 15 off
   17c1c:	2300      	movs	r3, #0
   17c1e:	2200      	movs	r2, #0
   17c20:	2100      	movs	r1, #0
   17c22:	200f      	movs	r0, #15
   17c24:	4c69      	ldr	r4, [pc, #420]	; (17dcc <vUiHandlerTask+0x2ac>)
   17c26:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   17c28:	4b69      	ldr	r3, [pc, #420]	; (17dd0 <vUiHandlerTask+0x2b0>)
   17c2a:	4798      	blx	r3
                vTaskDelay(10);
   17c2c:	200a      	movs	r0, #10
   17c2e:	4b69      	ldr	r3, [pc, #420]	; (17dd4 <vUiHandlerTask+0x2b4>)
   17c30:	4798      	blx	r3
                uiState = UI_STATE_HANDLE_BUTTONS;
   17c32:	4b52      	ldr	r3, [pc, #328]	; (17d7c <vUiHandlerTask+0x25c>)
   17c34:	2200      	movs	r2, #0
   17c36:	701a      	strb	r2, [r3, #0]

                break;
   17c38:	e097      	b.n	17d6a <vUiHandlerTask+0x24a>
                // should be stored on "gamePacketOut". The keypresses that should count
                // are when the player RELEASES the button.

                // In this example, we return after only one button press!

                uint8_t numPresses = SeesawGetKeypadCount();
   17c3a:	2316      	movs	r3, #22
   17c3c:	18fc      	adds	r4, r7, r3
   17c3e:	4b5d      	ldr	r3, [pc, #372]	; (17db4 <vUiHandlerTask+0x294>)
   17c40:	4798      	blx	r3
   17c42:	0003      	movs	r3, r0
   17c44:	7023      	strb	r3, [r4, #0]
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   17c46:	4b5c      	ldr	r3, [pc, #368]	; (17db8 <vUiHandlerTask+0x298>)
   17c48:	2210      	movs	r2, #16
   17c4a:	2100      	movs	r1, #0
   17c4c:	0018      	movs	r0, r3
   17c4e:	4b57      	ldr	r3, [pc, #348]	; (17dac <vUiHandlerTask+0x28c>)
   17c50:	4798      	blx	r3

                if (numPresses >= BUTTON_PRESSES_MAX) {
   17c52:	2316      	movs	r3, #22
   17c54:	18fb      	adds	r3, r7, r3
   17c56:	781b      	ldrb	r3, [r3, #0]
   17c58:	2b0f      	cmp	r3, #15
   17c5a:	d903      	bls.n	17c64 <vUiHandlerTask+0x144>
                    numPresses = BUTTON_PRESSES_MAX;
   17c5c:	2316      	movs	r3, #22
   17c5e:	18fb      	adds	r3, r7, r3
   17c60:	2210      	movs	r2, #16
   17c62:	701a      	strb	r2, [r3, #0]
                }
                if (numPresses != 0 && ERROR_NONE == SeesawReadKeypad(buttons, numPresses)) {
   17c64:	2316      	movs	r3, #22
   17c66:	18fb      	adds	r3, r7, r3
   17c68:	781b      	ldrb	r3, [r3, #0]
   17c6a:	2b00      	cmp	r3, #0
   17c6c:	d065      	beq.n	17d3a <vUiHandlerTask+0x21a>
   17c6e:	2316      	movs	r3, #22
   17c70:	18fb      	adds	r3, r7, r3
   17c72:	781a      	ldrb	r2, [r3, #0]
   17c74:	4b50      	ldr	r3, [pc, #320]	; (17db8 <vUiHandlerTask+0x298>)
   17c76:	0011      	movs	r1, r2
   17c78:	0018      	movs	r0, r3
   17c7a:	4b50      	ldr	r3, [pc, #320]	; (17dbc <vUiHandlerTask+0x29c>)
   17c7c:	4798      	blx	r3
   17c7e:	1e03      	subs	r3, r0, #0
   17c80:	d15b      	bne.n	17d3a <vUiHandlerTask+0x21a>
                    // Process Buttons
                    for (int iter = 0; iter < numPresses; iter++) {
   17c82:	2300      	movs	r3, #0
   17c84:	613b      	str	r3, [r7, #16]
   17c86:	e050      	b.n	17d2a <vUiHandlerTask+0x20a>
                        uint8_t keynum = NEO_TRELLIS_SEESAW_KEY((buttons[iter] & 0xFD) >> 2);
   17c88:	4a4b      	ldr	r2, [pc, #300]	; (17db8 <vUiHandlerTask+0x298>)
   17c8a:	693b      	ldr	r3, [r7, #16]
   17c8c:	18d3      	adds	r3, r2, r3
   17c8e:	781b      	ldrb	r3, [r3, #0]
   17c90:	089b      	lsrs	r3, r3, #2
   17c92:	b2db      	uxtb	r3, r3
   17c94:	2b00      	cmp	r3, #0
   17c96:	da00      	bge.n	17c9a <vUiHandlerTask+0x17a>
   17c98:	3307      	adds	r3, #7
   17c9a:	10db      	asrs	r3, r3, #3
   17c9c:	b2db      	uxtb	r3, r3
   17c9e:	009b      	lsls	r3, r3, #2
   17ca0:	b2d9      	uxtb	r1, r3
   17ca2:	4a45      	ldr	r2, [pc, #276]	; (17db8 <vUiHandlerTask+0x298>)
   17ca4:	693b      	ldr	r3, [r7, #16]
   17ca6:	18d3      	adds	r3, r2, r3
   17ca8:	781b      	ldrb	r3, [r3, #0]
   17caa:	089b      	lsrs	r3, r3, #2
   17cac:	b2db      	uxtb	r3, r3
   17cae:	2207      	movs	r2, #7
   17cb0:	4013      	ands	r3, r2
   17cb2:	b2da      	uxtb	r2, r3
   17cb4:	230f      	movs	r3, #15
   17cb6:	18fb      	adds	r3, r7, r3
   17cb8:	188a      	adds	r2, r1, r2
   17cba:	701a      	strb	r2, [r3, #0]
                        uint8_t actionButton = buttons[iter] & 0x03;
   17cbc:	4a3e      	ldr	r2, [pc, #248]	; (17db8 <vUiHandlerTask+0x298>)
   17cbe:	693b      	ldr	r3, [r7, #16]
   17cc0:	18d3      	adds	r3, r2, r3
   17cc2:	781a      	ldrb	r2, [r3, #0]
   17cc4:	230e      	movs	r3, #14
   17cc6:	18fb      	adds	r3, r7, r3
   17cc8:	2103      	movs	r1, #3
   17cca:	400a      	ands	r2, r1
   17ccc:	701a      	strb	r2, [r3, #0]
                        if (actionButton == 0x03) {
   17cce:	230e      	movs	r3, #14
   17cd0:	18fb      	adds	r3, r7, r3
   17cd2:	781b      	ldrb	r3, [r3, #0]
   17cd4:	2b03      	cmp	r3, #3
   17cd6:	d10f      	bne.n	17cf8 <vUiHandlerTask+0x1d8>
                            SeesawSetLed(keynum, red, green, blue);
   17cd8:	4b39      	ldr	r3, [pc, #228]	; (17dc0 <vUiHandlerTask+0x2a0>)
   17cda:	781b      	ldrb	r3, [r3, #0]
   17cdc:	b2d9      	uxtb	r1, r3
   17cde:	4b39      	ldr	r3, [pc, #228]	; (17dc4 <vUiHandlerTask+0x2a4>)
   17ce0:	781b      	ldrb	r3, [r3, #0]
   17ce2:	b2da      	uxtb	r2, r3
   17ce4:	4b38      	ldr	r3, [pc, #224]	; (17dc8 <vUiHandlerTask+0x2a8>)
   17ce6:	781b      	ldrb	r3, [r3, #0]
   17ce8:	b2dc      	uxtb	r4, r3
   17cea:	230f      	movs	r3, #15
   17cec:	18fb      	adds	r3, r7, r3
   17cee:	7818      	ldrb	r0, [r3, #0]
   17cf0:	0023      	movs	r3, r4
   17cf2:	4c36      	ldr	r4, [pc, #216]	; (17dcc <vUiHandlerTask+0x2ac>)
   17cf4:	47a0      	blx	r4
   17cf6:	e015      	b.n	17d24 <vUiHandlerTask+0x204>
                        } else {
                            SeesawSetLed(keynum, 0, 0, 0);
   17cf8:	230f      	movs	r3, #15
   17cfa:	18fb      	adds	r3, r7, r3
   17cfc:	7818      	ldrb	r0, [r3, #0]
   17cfe:	2300      	movs	r3, #0
   17d00:	2200      	movs	r2, #0
   17d02:	2100      	movs	r1, #0
   17d04:	4c31      	ldr	r4, [pc, #196]	; (17dcc <vUiHandlerTask+0x2ac>)
   17d06:	47a0      	blx	r4
                            // Button released! Count this into the buttons pressed by user.
                            gamePacketOut.game[pressedKeys] = keynum;
   17d08:	4b25      	ldr	r3, [pc, #148]	; (17da0 <vUiHandlerTask+0x280>)
   17d0a:	781b      	ldrb	r3, [r3, #0]
   17d0c:	0019      	movs	r1, r3
   17d0e:	4b26      	ldr	r3, [pc, #152]	; (17da8 <vUiHandlerTask+0x288>)
   17d10:	220f      	movs	r2, #15
   17d12:	18ba      	adds	r2, r7, r2
   17d14:	7812      	ldrb	r2, [r2, #0]
   17d16:	545a      	strb	r2, [r3, r1]
                            pressedKeys++;
   17d18:	4b21      	ldr	r3, [pc, #132]	; (17da0 <vUiHandlerTask+0x280>)
   17d1a:	781b      	ldrb	r3, [r3, #0]
   17d1c:	3301      	adds	r3, #1
   17d1e:	b2da      	uxtb	r2, r3
   17d20:	4b1f      	ldr	r3, [pc, #124]	; (17da0 <vUiHandlerTask+0x280>)
   17d22:	701a      	strb	r2, [r3, #0]
                    for (int iter = 0; iter < numPresses; iter++) {
   17d24:	693b      	ldr	r3, [r7, #16]
   17d26:	3301      	adds	r3, #1
   17d28:	613b      	str	r3, [r7, #16]
   17d2a:	2316      	movs	r3, #22
   17d2c:	18fb      	adds	r3, r7, r3
   17d2e:	781a      	ldrb	r2, [r3, #0]
   17d30:	693b      	ldr	r3, [r7, #16]
   17d32:	429a      	cmp	r2, r3
   17d34:	dca8      	bgt.n	17c88 <vUiHandlerTask+0x168>
                        }
                    }
                    SeesawOrderLedUpdate();
   17d36:	4b26      	ldr	r3, [pc, #152]	; (17dd0 <vUiHandlerTask+0x2b0>)
   17d38:	4798      	blx	r3
                }

                // Check if we are done!
                if (pressedKeys >= keysToPress || pressedKeys >= GAME_SIZE) {
   17d3a:	4b19      	ldr	r3, [pc, #100]	; (17da0 <vUiHandlerTask+0x280>)
   17d3c:	781a      	ldrb	r2, [r3, #0]
   17d3e:	4b19      	ldr	r3, [pc, #100]	; (17da4 <vUiHandlerTask+0x284>)
   17d40:	781b      	ldrb	r3, [r3, #0]
   17d42:	429a      	cmp	r2, r3
   17d44:	d203      	bcs.n	17d4e <vUiHandlerTask+0x22e>
   17d46:	4b16      	ldr	r3, [pc, #88]	; (17da0 <vUiHandlerTask+0x280>)
   17d48:	781b      	ldrb	r3, [r3, #0]
   17d4a:	2b13      	cmp	r3, #19
   17d4c:	d90c      	bls.n	17d68 <vUiHandlerTask+0x248>
                    // Tell control gamePacketOut is ready to be send out AND go back to
                    // UI_STATE_IGNORE_PRESSES
                    playIsDone = true;
   17d4e:	4b18      	ldr	r3, [pc, #96]	; (17db0 <vUiHandlerTask+0x290>)
   17d50:	2201      	movs	r2, #1
   17d52:	701a      	strb	r2, [r3, #0]
                    uiState = UI_STATE_IGNORE_PRESSES;
   17d54:	4b09      	ldr	r3, [pc, #36]	; (17d7c <vUiHandlerTask+0x25c>)
   17d56:	2201      	movs	r2, #1
   17d58:	701a      	strb	r2, [r3, #0]
                }

                break;
   17d5a:	e005      	b.n	17d68 <vUiHandlerTask+0x248>
            }

            default:  // In case of unforseen error, it is always good to sent state
                      // machine to an initial state.
                uiState = UI_STATE_HANDLE_BUTTONS;
   17d5c:	4b07      	ldr	r3, [pc, #28]	; (17d7c <vUiHandlerTask+0x25c>)
   17d5e:	2200      	movs	r2, #0
   17d60:	701a      	strb	r2, [r3, #0]
                break;
   17d62:	e002      	b.n	17d6a <vUiHandlerTask+0x24a>
                break;
   17d64:	46c0      	nop			; (mov r8, r8)
   17d66:	e000      	b.n	17d6a <vUiHandlerTask+0x24a>
                break;
   17d68:	46c0      	nop			; (mov r8, r8)
        }

        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
   17d6a:	2032      	movs	r0, #50	; 0x32
   17d6c:	4b19      	ldr	r3, [pc, #100]	; (17dd4 <vUiHandlerTask+0x2b4>)
   17d6e:	4798      	blx	r3
		LCD_menu();
   17d70:	e6ef      	b.n	17b52 <vUiHandlerTask+0x32>
   17d72:	46c0      	nop			; (mov r8, r8)
   17d74:	000388fc 	.word	0x000388fc
   17d78:	0001fef5 	.word	0x0001fef5
   17d7c:	20004508 	.word	0x20004508
   17d80:	00016c95 	.word	0x00016c95
   17d84:	00014a01 	.word	0x00014a01
   17d88:	00014ad1 	.word	0x00014ad1
   17d8c:	0001728d 	.word	0x0001728d
   17d90:	00017641 	.word	0x00017641
   17d94:	0000ffff 	.word	0x0000ffff
   17d98:	000179d9 	.word	0x000179d9
   17d9c:	00017a25 	.word	0x00017a25
   17da0:	200004a2 	.word	0x200004a2
   17da4:	200004a3 	.word	0x200004a3
   17da8:	200044d0 	.word	0x200044d0
   17dac:	00036c9f 	.word	0x00036c9f
   17db0:	200004a4 	.word	0x200004a4
   17db4:	00016dcd 	.word	0x00016dcd
   17db8:	200044f8 	.word	0x200044f8
   17dbc:	00016e35 	.word	0x00016e35
   17dc0:	200004a1 	.word	0x200004a1
   17dc4:	20000022 	.word	0x20000022
   17dc8:	20000023 	.word	0x20000023
   17dcc:	00016eb9 	.word	0x00016eb9
   17dd0:	00016f81 	.word	0x00016f81
   17dd4:	0001e2a1 	.word	0x0001e2a1

00017dd8 <UiOrderShowMoves>:

/******************************************************************************
 * Functions
 ******************************************************************************/
void UiOrderShowMoves(struct GameDataPacket *packetIn)
{
   17dd8:	b580      	push	{r7, lr}
   17dda:	b082      	sub	sp, #8
   17ddc:	af00      	add	r7, sp, #0
   17dde:	6078      	str	r0, [r7, #4]
    memcpy(&gamePacketIn, packetIn, sizeof(gamePacketIn));
   17de0:	4a08      	ldr	r2, [pc, #32]	; (17e04 <UiOrderShowMoves+0x2c>)
   17de2:	687b      	ldr	r3, [r7, #4]
   17de4:	0010      	movs	r0, r2
   17de6:	0019      	movs	r1, r3
   17de8:	2314      	movs	r3, #20
   17dea:	001a      	movs	r2, r3
   17dec:	4b06      	ldr	r3, [pc, #24]	; (17e08 <UiOrderShowMoves+0x30>)
   17dee:	4798      	blx	r3
    uiState = UI_STATE_SHOW_MOVES;
   17df0:	4b06      	ldr	r3, [pc, #24]	; (17e0c <UiOrderShowMoves+0x34>)
   17df2:	2202      	movs	r2, #2
   17df4:	701a      	strb	r2, [r3, #0]
    playIsDone = false;  // Set play to false
   17df6:	4b06      	ldr	r3, [pc, #24]	; (17e10 <UiOrderShowMoves+0x38>)
   17df8:	2200      	movs	r2, #0
   17dfa:	701a      	strb	r2, [r3, #0]
}
   17dfc:	46c0      	nop			; (mov r8, r8)
   17dfe:	46bd      	mov	sp, r7
   17e00:	b002      	add	sp, #8
   17e02:	bd80      	pop	{r7, pc}
   17e04:	200044e4 	.word	0x200044e4
   17e08:	00036c69 	.word	0x00036c69
   17e0c:	20004508 	.word	0x20004508
   17e10:	200004a4 	.word	0x200004a4

00017e14 <UiPlayIsDone>:

bool UiPlayIsDone(void)
{
   17e14:	b580      	push	{r7, lr}
   17e16:	af00      	add	r7, sp, #0
    return playIsDone;
   17e18:	4b02      	ldr	r3, [pc, #8]	; (17e24 <UiPlayIsDone+0x10>)
   17e1a:	781b      	ldrb	r3, [r3, #0]
}
   17e1c:	0018      	movs	r0, r3
   17e1e:	46bd      	mov	sp, r7
   17e20:	bd80      	pop	{r7, pc}
   17e22:	46c0      	nop			; (mov r8, r8)
   17e24:	200004a4 	.word	0x200004a4

00017e28 <UiGetGamePacketOut>:

struct GameDataPacket *UiGetGamePacketOut(void)
{
   17e28:	b580      	push	{r7, lr}
   17e2a:	af00      	add	r7, sp, #0
    return &gamePacketOut;
   17e2c:	4b01      	ldr	r3, [pc, #4]	; (17e34 <UiGetGamePacketOut+0xc>)
}
   17e2e:	0018      	movs	r0, r3
   17e30:	46bd      	mov	sp, r7
   17e32:	bd80      	pop	{r7, pc}
   17e34:	200044d0 	.word	0x200044d0

00017e38 <UIChangeColors>:
 * @return
 * @note

*/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
   17e38:	b590      	push	{r4, r7, lr}
   17e3a:	b083      	sub	sp, #12
   17e3c:	af00      	add	r7, sp, #0
   17e3e:	0004      	movs	r4, r0
   17e40:	0008      	movs	r0, r1
   17e42:	0011      	movs	r1, r2
   17e44:	1dfb      	adds	r3, r7, #7
   17e46:	1c22      	adds	r2, r4, #0
   17e48:	701a      	strb	r2, [r3, #0]
   17e4a:	1dbb      	adds	r3, r7, #6
   17e4c:	1c02      	adds	r2, r0, #0
   17e4e:	701a      	strb	r2, [r3, #0]
   17e50:	1d7b      	adds	r3, r7, #5
   17e52:	1c0a      	adds	r2, r1, #0
   17e54:	701a      	strb	r2, [r3, #0]
    red = r;
   17e56:	4b08      	ldr	r3, [pc, #32]	; (17e78 <UIChangeColors+0x40>)
   17e58:	1dfa      	adds	r2, r7, #7
   17e5a:	7812      	ldrb	r2, [r2, #0]
   17e5c:	701a      	strb	r2, [r3, #0]
    green = g;
   17e5e:	4b07      	ldr	r3, [pc, #28]	; (17e7c <UIChangeColors+0x44>)
   17e60:	1dba      	adds	r2, r7, #6
   17e62:	7812      	ldrb	r2, [r2, #0]
   17e64:	701a      	strb	r2, [r3, #0]
    blue = b;
   17e66:	4b06      	ldr	r3, [pc, #24]	; (17e80 <UIChangeColors+0x48>)
   17e68:	1d7a      	adds	r2, r7, #5
   17e6a:	7812      	ldrb	r2, [r2, #0]
   17e6c:	701a      	strb	r2, [r3, #0]
}
   17e6e:	46c0      	nop			; (mov r8, r8)
   17e70:	46bd      	mov	sp, r7
   17e72:	b003      	add	sp, #12
   17e74:	bd90      	pop	{r4, r7, pc}
   17e76:	46c0      	nop			; (mov r8, r8)
   17e78:	200004a1 	.word	0x200004a1
   17e7c:	20000022 	.word	0x20000022
   17e80:	20000023 	.word	0x20000023

00017e84 <system_pinmux_get_group_from_gpio_pin>:
{
   17e84:	b580      	push	{r7, lr}
   17e86:	b084      	sub	sp, #16
   17e88:	af00      	add	r7, sp, #0
   17e8a:	0002      	movs	r2, r0
   17e8c:	1dfb      	adds	r3, r7, #7
   17e8e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   17e90:	230f      	movs	r3, #15
   17e92:	18fb      	adds	r3, r7, r3
   17e94:	1dfa      	adds	r2, r7, #7
   17e96:	7812      	ldrb	r2, [r2, #0]
   17e98:	09d2      	lsrs	r2, r2, #7
   17e9a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   17e9c:	230e      	movs	r3, #14
   17e9e:	18fb      	adds	r3, r7, r3
   17ea0:	1dfa      	adds	r2, r7, #7
   17ea2:	7812      	ldrb	r2, [r2, #0]
   17ea4:	0952      	lsrs	r2, r2, #5
   17ea6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   17ea8:	4b0d      	ldr	r3, [pc, #52]	; (17ee0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   17eaa:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   17eac:	230f      	movs	r3, #15
   17eae:	18fb      	adds	r3, r7, r3
   17eb0:	781b      	ldrb	r3, [r3, #0]
   17eb2:	2b00      	cmp	r3, #0
   17eb4:	d10f      	bne.n	17ed6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   17eb6:	230f      	movs	r3, #15
   17eb8:	18fb      	adds	r3, r7, r3
   17eba:	781b      	ldrb	r3, [r3, #0]
   17ebc:	009b      	lsls	r3, r3, #2
   17ebe:	2210      	movs	r2, #16
   17ec0:	4694      	mov	ip, r2
   17ec2:	44bc      	add	ip, r7
   17ec4:	4463      	add	r3, ip
   17ec6:	3b08      	subs	r3, #8
   17ec8:	681a      	ldr	r2, [r3, #0]
   17eca:	230e      	movs	r3, #14
   17ecc:	18fb      	adds	r3, r7, r3
   17ece:	781b      	ldrb	r3, [r3, #0]
   17ed0:	01db      	lsls	r3, r3, #7
   17ed2:	18d3      	adds	r3, r2, r3
   17ed4:	e000      	b.n	17ed8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   17ed6:	2300      	movs	r3, #0
}
   17ed8:	0018      	movs	r0, r3
   17eda:	46bd      	mov	sp, r7
   17edc:	b004      	add	sp, #16
   17ede:	bd80      	pop	{r7, pc}
   17ee0:	41004400 	.word	0x41004400

00017ee4 <port_get_group_from_gpio_pin>:
{
   17ee4:	b580      	push	{r7, lr}
   17ee6:	b082      	sub	sp, #8
   17ee8:	af00      	add	r7, sp, #0
   17eea:	0002      	movs	r2, r0
   17eec:	1dfb      	adds	r3, r7, #7
   17eee:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   17ef0:	1dfb      	adds	r3, r7, #7
   17ef2:	781b      	ldrb	r3, [r3, #0]
   17ef4:	0018      	movs	r0, r3
   17ef6:	4b03      	ldr	r3, [pc, #12]	; (17f04 <port_get_group_from_gpio_pin+0x20>)
   17ef8:	4798      	blx	r3
   17efa:	0003      	movs	r3, r0
}
   17efc:	0018      	movs	r0, r3
   17efe:	46bd      	mov	sp, r7
   17f00:	b002      	add	sp, #8
   17f02:	bd80      	pop	{r7, pc}
   17f04:	00017e85 	.word	0x00017e85

00017f08 <port_pin_set_output_level>:
{
   17f08:	b580      	push	{r7, lr}
   17f0a:	b084      	sub	sp, #16
   17f0c:	af00      	add	r7, sp, #0
   17f0e:	0002      	movs	r2, r0
   17f10:	1dfb      	adds	r3, r7, #7
   17f12:	701a      	strb	r2, [r3, #0]
   17f14:	1dbb      	adds	r3, r7, #6
   17f16:	1c0a      	adds	r2, r1, #0
   17f18:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   17f1a:	1dfb      	adds	r3, r7, #7
   17f1c:	781b      	ldrb	r3, [r3, #0]
   17f1e:	0018      	movs	r0, r3
   17f20:	4b0d      	ldr	r3, [pc, #52]	; (17f58 <port_pin_set_output_level+0x50>)
   17f22:	4798      	blx	r3
   17f24:	0003      	movs	r3, r0
   17f26:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   17f28:	1dfb      	adds	r3, r7, #7
   17f2a:	781b      	ldrb	r3, [r3, #0]
   17f2c:	221f      	movs	r2, #31
   17f2e:	4013      	ands	r3, r2
   17f30:	2201      	movs	r2, #1
   17f32:	409a      	lsls	r2, r3
   17f34:	0013      	movs	r3, r2
   17f36:	60bb      	str	r3, [r7, #8]
	if (level) {
   17f38:	1dbb      	adds	r3, r7, #6
   17f3a:	781b      	ldrb	r3, [r3, #0]
   17f3c:	2b00      	cmp	r3, #0
   17f3e:	d003      	beq.n	17f48 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   17f40:	68fb      	ldr	r3, [r7, #12]
   17f42:	68ba      	ldr	r2, [r7, #8]
   17f44:	619a      	str	r2, [r3, #24]
}
   17f46:	e002      	b.n	17f4e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   17f48:	68fb      	ldr	r3, [r7, #12]
   17f4a:	68ba      	ldr	r2, [r7, #8]
   17f4c:	615a      	str	r2, [r3, #20]
}
   17f4e:	46c0      	nop			; (mov r8, r8)
   17f50:	46bd      	mov	sp, r7
   17f52:	b004      	add	sp, #16
   17f54:	bd80      	pop	{r7, pc}
   17f56:	46c0      	nop			; (mov r8, r8)
   17f58:	00017ee5 	.word	0x00017ee5

00017f5c <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   17f5c:	b580      	push	{r7, lr}
   17f5e:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   17f60:	4b02      	ldr	r3, [pc, #8]	; (17f6c <init_state+0x10>)
   17f62:	2200      	movs	r2, #0
   17f64:	701a      	strb	r2, [r3, #0]
}
   17f66:	46c0      	nop			; (mov r8, r8)
   17f68:	46bd      	mov	sp, r7
   17f6a:	bd80      	pop	{r7, pc}
   17f6c:	200004b9 	.word	0x200004b9

00017f70 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   17f70:	b580      	push	{r7, lr}
   17f72:	b082      	sub	sp, #8
   17f74:	af00      	add	r7, sp, #0
   17f76:	0002      	movs	r2, r0
   17f78:	1dfb      	adds	r3, r7, #7
   17f7a:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   17f7c:	1dfb      	adds	r3, r7, #7
   17f7e:	781b      	ldrb	r3, [r3, #0]
   17f80:	b25b      	sxtb	r3, r3
   17f82:	43db      	mvns	r3, r3
   17f84:	b25b      	sxtb	r3, r3
   17f86:	4a06      	ldr	r2, [pc, #24]	; (17fa0 <clear_state+0x30>)
   17f88:	7812      	ldrb	r2, [r2, #0]
   17f8a:	b252      	sxtb	r2, r2
   17f8c:	4013      	ands	r3, r2
   17f8e:	b25b      	sxtb	r3, r3
   17f90:	b2da      	uxtb	r2, r3
   17f92:	4b03      	ldr	r3, [pc, #12]	; (17fa0 <clear_state+0x30>)
   17f94:	701a      	strb	r2, [r3, #0]
}
   17f96:	46c0      	nop			; (mov r8, r8)
   17f98:	46bd      	mov	sp, r7
   17f9a:	b002      	add	sp, #8
   17f9c:	bd80      	pop	{r7, pc}
   17f9e:	46c0      	nop			; (mov r8, r8)
   17fa0:	200004b9 	.word	0x200004b9

00017fa4 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   17fa4:	b580      	push	{r7, lr}
   17fa6:	b082      	sub	sp, #8
   17fa8:	af00      	add	r7, sp, #0
   17faa:	0002      	movs	r2, r0
   17fac:	1dfb      	adds	r3, r7, #7
   17fae:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   17fb0:	4b05      	ldr	r3, [pc, #20]	; (17fc8 <add_state+0x24>)
   17fb2:	781a      	ldrb	r2, [r3, #0]
   17fb4:	1dfb      	adds	r3, r7, #7
   17fb6:	781b      	ldrb	r3, [r3, #0]
   17fb8:	4313      	orrs	r3, r2
   17fba:	b2da      	uxtb	r2, r3
   17fbc:	4b02      	ldr	r3, [pc, #8]	; (17fc8 <add_state+0x24>)
   17fbe:	701a      	strb	r2, [r3, #0]
}
   17fc0:	46c0      	nop			; (mov r8, r8)
   17fc2:	46bd      	mov	sp, r7
   17fc4:	b002      	add	sp, #8
   17fc6:	bd80      	pop	{r7, pc}
   17fc8:	200004b9 	.word	0x200004b9

00017fcc <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   17fcc:	b580      	push	{r7, lr}
   17fce:	b082      	sub	sp, #8
   17fd0:	af00      	add	r7, sp, #0
   17fd2:	0002      	movs	r2, r0
   17fd4:	1dfb      	adds	r3, r7, #7
   17fd6:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   17fd8:	4b06      	ldr	r3, [pc, #24]	; (17ff4 <is_state_set+0x28>)
   17fda:	781b      	ldrb	r3, [r3, #0]
   17fdc:	1dfa      	adds	r2, r7, #7
   17fde:	7812      	ldrb	r2, [r2, #0]
   17fe0:	4013      	ands	r3, r2
   17fe2:	b2db      	uxtb	r3, r3
   17fe4:	1e5a      	subs	r2, r3, #1
   17fe6:	4193      	sbcs	r3, r2
   17fe8:	b2db      	uxtb	r3, r3
}
   17fea:	0018      	movs	r0, r3
   17fec:	46bd      	mov	sp, r7
   17fee:	b002      	add	sp, #8
   17ff0:	bd80      	pop	{r7, pc}
   17ff2:	46c0      	nop			; (mov r8, r8)
   17ff4:	200004b9 	.word	0x200004b9

00017ff8 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   17ff8:	b590      	push	{r4, r7, lr}
   17ffa:	b085      	sub	sp, #20
   17ffc:	af00      	add	r7, sp, #0
   17ffe:	6078      	str	r0, [r7, #4]
   18000:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   18002:	687b      	ldr	r3, [r7, #4]
   18004:	2b00      	cmp	r3, #0
   18006:	d002      	beq.n	1800e <is_exist_file+0x16>
   18008:	683b      	ldr	r3, [r7, #0]
   1800a:	2b00      	cmp	r3, #0
   1800c:	d101      	bne.n	18012 <is_exist_file+0x1a>
        return false;
   1800e:	2300      	movs	r3, #0
   18010:	e013      	b.n	1803a <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   18012:	230f      	movs	r3, #15
   18014:	18fc      	adds	r4, r7, r3
   18016:	6839      	ldr	r1, [r7, #0]
   18018:	4b0a      	ldr	r3, [pc, #40]	; (18044 <is_exist_file+0x4c>)
   1801a:	2200      	movs	r2, #0
   1801c:	0018      	movs	r0, r3
   1801e:	4b0a      	ldr	r3, [pc, #40]	; (18048 <is_exist_file+0x50>)
   18020:	4798      	blx	r3
   18022:	0003      	movs	r3, r0
   18024:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   18026:	4b07      	ldr	r3, [pc, #28]	; (18044 <is_exist_file+0x4c>)
   18028:	0018      	movs	r0, r3
   1802a:	4b08      	ldr	r3, [pc, #32]	; (1804c <is_exist_file+0x54>)
   1802c:	4798      	blx	r3
    return (ret == FR_OK);
   1802e:	230f      	movs	r3, #15
   18030:	18fb      	adds	r3, r7, r3
   18032:	781b      	ldrb	r3, [r3, #0]
   18034:	425a      	negs	r2, r3
   18036:	4153      	adcs	r3, r2
   18038:	b2db      	uxtb	r3, r3
}
   1803a:	0018      	movs	r0, r3
   1803c:	46bd      	mov	sp, r7
   1803e:	b005      	add	sp, #20
   18040:	bd90      	pop	{r4, r7, pc}
   18042:	46c0      	nop			; (mov r8, r8)
   18044:	200004bc 	.word	0x200004bc
   18048:	0002f6a9 	.word	0x0002f6a9
   1804c:	000300a9 	.word	0x000300a9

00018050 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   18050:	b580      	push	{r7, lr}
   18052:	b09e      	sub	sp, #120	; 0x78
   18054:	af00      	add	r7, sp, #0
   18056:	60f8      	str	r0, [r7, #12]
   18058:	60b9      	str	r1, [r7, #8]
   1805a:	1dfb      	adds	r3, r7, #7
   1805c:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   1805e:	2376      	movs	r3, #118	; 0x76
   18060:	18fb      	adds	r3, r7, r3
   18062:	2201      	movs	r2, #1
   18064:	801a      	strh	r2, [r3, #0]
   18066:	2374      	movs	r3, #116	; 0x74
   18068:	18fb      	adds	r3, r7, r3
   1806a:	2200      	movs	r2, #0
   1806c:	801a      	strh	r2, [r3, #0]
   1806e:	236e      	movs	r3, #110	; 0x6e
   18070:	18fb      	adds	r3, r7, r3
   18072:	2200      	movs	r2, #0
   18074:	801a      	strh	r2, [r3, #0]
   18076:	2372      	movs	r3, #114	; 0x72
   18078:	18fb      	adds	r3, r7, r3
   1807a:	2200      	movs	r2, #0
   1807c:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   1807e:	2324      	movs	r3, #36	; 0x24
   18080:	18fb      	adds	r3, r7, r3
   18082:	0018      	movs	r0, r3
   18084:	2341      	movs	r3, #65	; 0x41
   18086:	001a      	movs	r2, r3
   18088:	2100      	movs	r1, #0
   1808a:	4b92      	ldr	r3, [pc, #584]	; (182d4 <rename_to_unique+0x284>)
   1808c:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   1808e:	2318      	movs	r3, #24
   18090:	18fb      	adds	r3, r7, r3
   18092:	0018      	movs	r0, r3
   18094:	2309      	movs	r3, #9
   18096:	001a      	movs	r2, r3
   18098:	2100      	movs	r1, #0
   1809a:	4b8e      	ldr	r3, [pc, #568]	; (182d4 <rename_to_unique+0x284>)
   1809c:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   1809e:	2314      	movs	r3, #20
   180a0:	18fb      	adds	r3, r7, r3
   180a2:	2200      	movs	r2, #0
   180a4:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   180a6:	2300      	movs	r3, #0
   180a8:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   180aa:	2371      	movs	r3, #113	; 0x71
   180ac:	18fb      	adds	r3, r7, r3
   180ae:	2200      	movs	r2, #0
   180b0:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   180b2:	68bb      	ldr	r3, [r7, #8]
   180b4:	2b00      	cmp	r3, #0
   180b6:	d101      	bne.n	180bc <rename_to_unique+0x6c>
        return false;
   180b8:	2300      	movs	r3, #0
   180ba:	e106      	b.n	182ca <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   180bc:	68ba      	ldr	r2, [r7, #8]
   180be:	68fb      	ldr	r3, [r7, #12]
   180c0:	0011      	movs	r1, r2
   180c2:	0018      	movs	r0, r3
   180c4:	4b84      	ldr	r3, [pc, #528]	; (182d8 <rename_to_unique+0x288>)
   180c6:	4798      	blx	r3
   180c8:	0003      	movs	r3, r0
   180ca:	001a      	movs	r2, r3
   180cc:	2301      	movs	r3, #1
   180ce:	4053      	eors	r3, r2
   180d0:	b2db      	uxtb	r3, r3
   180d2:	2b00      	cmp	r3, #0
   180d4:	d001      	beq.n	180da <rename_to_unique+0x8a>
        return true;
   180d6:	2301      	movs	r3, #1
   180d8:	e0f7      	b.n	182ca <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   180da:	68bb      	ldr	r3, [r7, #8]
   180dc:	0018      	movs	r0, r3
   180de:	4b7f      	ldr	r3, [pc, #508]	; (182dc <rename_to_unique+0x28c>)
   180e0:	4798      	blx	r3
   180e2:	0003      	movs	r3, r0
   180e4:	2b40      	cmp	r3, #64	; 0x40
   180e6:	d901      	bls.n	180ec <rename_to_unique+0x9c>
        return false;
   180e8:	2300      	movs	r3, #0
   180ea:	e0ee      	b.n	182ca <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   180ec:	68bb      	ldr	r3, [r7, #8]
   180ee:	212e      	movs	r1, #46	; 0x2e
   180f0:	0018      	movs	r0, r3
   180f2:	4b7b      	ldr	r3, [pc, #492]	; (182e0 <rename_to_unique+0x290>)
   180f4:	4798      	blx	r3
   180f6:	0003      	movs	r3, r0
   180f8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   180fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   180fc:	2b00      	cmp	r3, #0
   180fe:	d052      	beq.n	181a6 <rename_to_unique+0x156>
        ext_len = strlen(p);
   18100:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   18102:	0018      	movs	r0, r3
   18104:	4b75      	ldr	r3, [pc, #468]	; (182dc <rename_to_unique+0x28c>)
   18106:	4798      	blx	r3
   18108:	0002      	movs	r2, r0
   1810a:	236e      	movs	r3, #110	; 0x6e
   1810c:	18fb      	adds	r3, r7, r3
   1810e:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   18110:	236e      	movs	r3, #110	; 0x6e
   18112:	18fb      	adds	r3, r7, r3
   18114:	881b      	ldrh	r3, [r3, #0]
   18116:	2b07      	cmp	r3, #7
   18118:	d837      	bhi.n	1818a <rename_to_unique+0x13a>
            valid_ext = true;
   1811a:	2371      	movs	r3, #113	; 0x71
   1811c:	18fb      	adds	r3, r7, r3
   1811e:	2201      	movs	r2, #1
   18120:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   18122:	6eba      	ldr	r2, [r7, #104]	; 0x68
   18124:	2318      	movs	r3, #24
   18126:	18fb      	adds	r3, r7, r3
   18128:	0011      	movs	r1, r2
   1812a:	0018      	movs	r0, r3
   1812c:	4b6d      	ldr	r3, [pc, #436]	; (182e4 <rename_to_unique+0x294>)
   1812e:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   18130:	68bb      	ldr	r3, [r7, #8]
   18132:	0018      	movs	r0, r3
   18134:	4b69      	ldr	r3, [pc, #420]	; (182dc <rename_to_unique+0x28c>)
   18136:	4798      	blx	r3
   18138:	0002      	movs	r2, r0
   1813a:	236e      	movs	r3, #110	; 0x6e
   1813c:	18fb      	adds	r3, r7, r3
   1813e:	881b      	ldrh	r3, [r3, #0]
   18140:	1ad3      	subs	r3, r2, r3
   18142:	2b3c      	cmp	r3, #60	; 0x3c
   18144:	d911      	bls.n	1816a <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   18146:	2374      	movs	r3, #116	; 0x74
   18148:	18fb      	adds	r3, r7, r3
   1814a:	226e      	movs	r2, #110	; 0x6e
   1814c:	18ba      	adds	r2, r7, r2
   1814e:	8812      	ldrh	r2, [r2, #0]
   18150:	213c      	movs	r1, #60	; 0x3c
   18152:	1a8a      	subs	r2, r1, r2
   18154:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   18156:	2374      	movs	r3, #116	; 0x74
   18158:	18fb      	adds	r3, r7, r3
   1815a:	881a      	ldrh	r2, [r3, #0]
   1815c:	68b9      	ldr	r1, [r7, #8]
   1815e:	2324      	movs	r3, #36	; 0x24
   18160:	18fb      	adds	r3, r7, r3
   18162:	0018      	movs	r0, r3
   18164:	4b60      	ldr	r3, [pc, #384]	; (182e8 <rename_to_unique+0x298>)
   18166:	4798      	blx	r3
   18168:	e02a      	b.n	181c0 <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   1816a:	6eba      	ldr	r2, [r7, #104]	; 0x68
   1816c:	68bb      	ldr	r3, [r7, #8]
   1816e:	1ad2      	subs	r2, r2, r3
   18170:	2374      	movs	r3, #116	; 0x74
   18172:	18fb      	adds	r3, r7, r3
   18174:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   18176:	2374      	movs	r3, #116	; 0x74
   18178:	18fb      	adds	r3, r7, r3
   1817a:	881a      	ldrh	r2, [r3, #0]
   1817c:	68b9      	ldr	r1, [r7, #8]
   1817e:	2324      	movs	r3, #36	; 0x24
   18180:	18fb      	adds	r3, r7, r3
   18182:	0018      	movs	r0, r3
   18184:	4b58      	ldr	r3, [pc, #352]	; (182e8 <rename_to_unique+0x298>)
   18186:	4798      	blx	r3
   18188:	e01a      	b.n	181c0 <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   1818a:	2374      	movs	r3, #116	; 0x74
   1818c:	18fb      	adds	r3, r7, r3
   1818e:	223c      	movs	r2, #60	; 0x3c
   18190:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   18192:	2374      	movs	r3, #116	; 0x74
   18194:	18fb      	adds	r3, r7, r3
   18196:	881a      	ldrh	r2, [r3, #0]
   18198:	68b9      	ldr	r1, [r7, #8]
   1819a:	2324      	movs	r3, #36	; 0x24
   1819c:	18fb      	adds	r3, r7, r3
   1819e:	0018      	movs	r0, r3
   181a0:	4b51      	ldr	r3, [pc, #324]	; (182e8 <rename_to_unique+0x298>)
   181a2:	4798      	blx	r3
   181a4:	e00c      	b.n	181c0 <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   181a6:	2374      	movs	r3, #116	; 0x74
   181a8:	18fb      	adds	r3, r7, r3
   181aa:	223c      	movs	r2, #60	; 0x3c
   181ac:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   181ae:	2374      	movs	r3, #116	; 0x74
   181b0:	18fb      	adds	r3, r7, r3
   181b2:	881a      	ldrh	r2, [r3, #0]
   181b4:	68b9      	ldr	r1, [r7, #8]
   181b6:	2324      	movs	r3, #36	; 0x24
   181b8:	18fb      	adds	r3, r7, r3
   181ba:	0018      	movs	r0, r3
   181bc:	4b4a      	ldr	r3, [pc, #296]	; (182e8 <rename_to_unique+0x298>)
   181be:	4798      	blx	r3
    }

    name[name_len++] = '-';
   181c0:	2374      	movs	r3, #116	; 0x74
   181c2:	18fb      	adds	r3, r7, r3
   181c4:	881b      	ldrh	r3, [r3, #0]
   181c6:	2274      	movs	r2, #116	; 0x74
   181c8:	18ba      	adds	r2, r7, r2
   181ca:	1c59      	adds	r1, r3, #1
   181cc:	8011      	strh	r1, [r2, #0]
   181ce:	001a      	movs	r2, r3
   181d0:	2324      	movs	r3, #36	; 0x24
   181d2:	18fb      	adds	r3, r7, r3
   181d4:	212d      	movs	r1, #45	; 0x2d
   181d6:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   181d8:	2376      	movs	r3, #118	; 0x76
   181da:	18fb      	adds	r3, r7, r3
   181dc:	2200      	movs	r2, #0
   181de:	801a      	strh	r2, [r3, #0]
   181e0:	2372      	movs	r3, #114	; 0x72
   181e2:	18fb      	adds	r3, r7, r3
   181e4:	2201      	movs	r2, #1
   181e6:	801a      	strh	r2, [r3, #0]
   181e8:	e010      	b.n	1820c <rename_to_unique+0x1bc>
        count *= 10;
   181ea:	2372      	movs	r3, #114	; 0x72
   181ec:	18fa      	adds	r2, r7, r3
   181ee:	2372      	movs	r3, #114	; 0x72
   181f0:	18fb      	adds	r3, r7, r3
   181f2:	881b      	ldrh	r3, [r3, #0]
   181f4:	1c19      	adds	r1, r3, #0
   181f6:	0089      	lsls	r1, r1, #2
   181f8:	18cb      	adds	r3, r1, r3
   181fa:	18db      	adds	r3, r3, r3
   181fc:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   181fe:	2376      	movs	r3, #118	; 0x76
   18200:	18fb      	adds	r3, r7, r3
   18202:	881a      	ldrh	r2, [r3, #0]
   18204:	2376      	movs	r3, #118	; 0x76
   18206:	18fb      	adds	r3, r7, r3
   18208:	3201      	adds	r2, #1
   1820a:	801a      	strh	r2, [r3, #0]
   1820c:	2376      	movs	r3, #118	; 0x76
   1820e:	18fb      	adds	r3, r7, r3
   18210:	881b      	ldrh	r3, [r3, #0]
   18212:	2b02      	cmp	r3, #2
   18214:	d9e9      	bls.n	181ea <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   18216:	2376      	movs	r3, #118	; 0x76
   18218:	18fb      	adds	r3, r7, r3
   1821a:	2201      	movs	r2, #1
   1821c:	801a      	strh	r2, [r3, #0]
   1821e:	e04b      	b.n	182b8 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   18220:	2376      	movs	r3, #118	; 0x76
   18222:	18fb      	adds	r3, r7, r3
   18224:	881a      	ldrh	r2, [r3, #0]
   18226:	4931      	ldr	r1, [pc, #196]	; (182ec <rename_to_unique+0x29c>)
   18228:	2314      	movs	r3, #20
   1822a:	18fb      	adds	r3, r7, r3
   1822c:	0018      	movs	r0, r3
   1822e:	4b30      	ldr	r3, [pc, #192]	; (182f0 <rename_to_unique+0x2a0>)
   18230:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   18232:	2374      	movs	r3, #116	; 0x74
   18234:	18fb      	adds	r3, r7, r3
   18236:	881b      	ldrh	r3, [r3, #0]
   18238:	2224      	movs	r2, #36	; 0x24
   1823a:	18ba      	adds	r2, r7, r2
   1823c:	18d3      	adds	r3, r2, r3
   1823e:	2214      	movs	r2, #20
   18240:	18b9      	adds	r1, r7, r2
   18242:	2203      	movs	r2, #3
   18244:	0018      	movs	r0, r3
   18246:	4b28      	ldr	r3, [pc, #160]	; (182e8 <rename_to_unique+0x298>)
   18248:	4798      	blx	r3
        if (valid_ext) {
   1824a:	2371      	movs	r3, #113	; 0x71
   1824c:	18fb      	adds	r3, r7, r3
   1824e:	781b      	ldrb	r3, [r3, #0]
   18250:	2b00      	cmp	r3, #0
   18252:	d00c      	beq.n	1826e <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   18254:	2374      	movs	r3, #116	; 0x74
   18256:	18fb      	adds	r3, r7, r3
   18258:	881b      	ldrh	r3, [r3, #0]
   1825a:	3303      	adds	r3, #3
   1825c:	2224      	movs	r2, #36	; 0x24
   1825e:	18ba      	adds	r2, r7, r2
   18260:	18d3      	adds	r3, r2, r3
   18262:	2218      	movs	r2, #24
   18264:	18ba      	adds	r2, r7, r2
   18266:	0011      	movs	r1, r2
   18268:	0018      	movs	r0, r3
   1826a:	4b1e      	ldr	r3, [pc, #120]	; (182e4 <rename_to_unique+0x294>)
   1826c:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   1826e:	2324      	movs	r3, #36	; 0x24
   18270:	18fa      	adds	r2, r7, r3
   18272:	68fb      	ldr	r3, [r7, #12]
   18274:	0011      	movs	r1, r2
   18276:	0018      	movs	r0, r3
   18278:	4b17      	ldr	r3, [pc, #92]	; (182d8 <rename_to_unique+0x288>)
   1827a:	4798      	blx	r3
   1827c:	0003      	movs	r3, r0
   1827e:	001a      	movs	r2, r3
   18280:	2301      	movs	r3, #1
   18282:	4053      	eors	r3, r2
   18284:	b2db      	uxtb	r3, r3
   18286:	2b00      	cmp	r3, #0
   18288:	d00f      	beq.n	182aa <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   1828a:	1dfb      	adds	r3, r7, #7
   1828c:	781a      	ldrb	r2, [r3, #0]
   1828e:	68bb      	ldr	r3, [r7, #8]
   18290:	2100      	movs	r1, #0
   18292:	0018      	movs	r0, r3
   18294:	4b0f      	ldr	r3, [pc, #60]	; (182d4 <rename_to_unique+0x284>)
   18296:	4798      	blx	r3
            strcpy(file_path_name, name);
   18298:	2324      	movs	r3, #36	; 0x24
   1829a:	18fa      	adds	r2, r7, r3
   1829c:	68bb      	ldr	r3, [r7, #8]
   1829e:	0011      	movs	r1, r2
   182a0:	0018      	movs	r0, r3
   182a2:	4b10      	ldr	r3, [pc, #64]	; (182e4 <rename_to_unique+0x294>)
   182a4:	4798      	blx	r3
            return true;
   182a6:	2301      	movs	r3, #1
   182a8:	e00f      	b.n	182ca <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   182aa:	2376      	movs	r3, #118	; 0x76
   182ac:	18fb      	adds	r3, r7, r3
   182ae:	881a      	ldrh	r2, [r3, #0]
   182b0:	2376      	movs	r3, #118	; 0x76
   182b2:	18fb      	adds	r3, r7, r3
   182b4:	3201      	adds	r2, #1
   182b6:	801a      	strh	r2, [r3, #0]
   182b8:	2376      	movs	r3, #118	; 0x76
   182ba:	18fa      	adds	r2, r7, r3
   182bc:	2372      	movs	r3, #114	; 0x72
   182be:	18fb      	adds	r3, r7, r3
   182c0:	8812      	ldrh	r2, [r2, #0]
   182c2:	881b      	ldrh	r3, [r3, #0]
   182c4:	429a      	cmp	r2, r3
   182c6:	d3ab      	bcc.n	18220 <rename_to_unique+0x1d0>
        }
    }
    return false;
   182c8:	2300      	movs	r3, #0
}
   182ca:	0018      	movs	r0, r3
   182cc:	46bd      	mov	sp, r7
   182ce:	b01e      	add	sp, #120	; 0x78
   182d0:	bd80      	pop	{r7, pc}
   182d2:	46c0      	nop			; (mov r8, r8)
   182d4:	00036c9f 	.word	0x00036c9f
   182d8:	00017ff9 	.word	0x00017ff9
   182dc:	00037057 	.word	0x00037057
   182e0:	000370b1 	.word	0x000370b1
   182e4:	0003700b 	.word	0x0003700b
   182e8:	00037087 	.word	0x00037087
   182ec:	00038924 	.word	0x00038924
   182f0:	00036f5d 	.word	0x00036f5d

000182f4 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   182f4:	b590      	push	{r4, r7, lr}
   182f6:	b083      	sub	sp, #12
   182f8:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   182fa:	2001      	movs	r0, #1
   182fc:	4b22      	ldr	r3, [pc, #136]	; (18388 <start_download+0x94>)
   182fe:	4798      	blx	r3
   18300:	0003      	movs	r3, r0
   18302:	001a      	movs	r2, r3
   18304:	2301      	movs	r3, #1
   18306:	4053      	eors	r3, r2
   18308:	b2db      	uxtb	r3, r3
   1830a:	2b00      	cmp	r3, #0
   1830c:	d005      	beq.n	1831a <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   1830e:	4b1f      	ldr	r3, [pc, #124]	; (1838c <start_download+0x98>)
   18310:	0019      	movs	r1, r3
   18312:	2001      	movs	r0, #1
   18314:	4b1e      	ldr	r3, [pc, #120]	; (18390 <start_download+0x9c>)
   18316:	4798      	blx	r3
        return;
   18318:	e032      	b.n	18380 <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   1831a:	2002      	movs	r0, #2
   1831c:	4b1a      	ldr	r3, [pc, #104]	; (18388 <start_download+0x94>)
   1831e:	4798      	blx	r3
   18320:	0003      	movs	r3, r0
   18322:	001a      	movs	r2, r3
   18324:	2301      	movs	r3, #1
   18326:	4053      	eors	r3, r2
   18328:	b2db      	uxtb	r3, r3
   1832a:	2b00      	cmp	r3, #0
   1832c:	d005      	beq.n	1833a <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   1832e:	4b19      	ldr	r3, [pc, #100]	; (18394 <start_download+0xa0>)
   18330:	0019      	movs	r1, r3
   18332:	2001      	movs	r0, #1
   18334:	4b16      	ldr	r3, [pc, #88]	; (18390 <start_download+0x9c>)
   18336:	4798      	blx	r3
        return;
   18338:	e022      	b.n	18380 <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   1833a:	2004      	movs	r0, #4
   1833c:	4b12      	ldr	r3, [pc, #72]	; (18388 <start_download+0x94>)
   1833e:	4798      	blx	r3
   18340:	1e03      	subs	r3, r0, #0
   18342:	d005      	beq.n	18350 <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   18344:	4b14      	ldr	r3, [pc, #80]	; (18398 <start_download+0xa4>)
   18346:	0019      	movs	r1, r3
   18348:	2001      	movs	r0, #1
   1834a:	4b11      	ldr	r3, [pc, #68]	; (18390 <start_download+0x9c>)
   1834c:	4798      	blx	r3
        return;
   1834e:	e017      	b.n	18380 <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   18350:	2008      	movs	r0, #8
   18352:	4b0d      	ldr	r3, [pc, #52]	; (18388 <start_download+0x94>)
   18354:	4798      	blx	r3
   18356:	1e03      	subs	r3, r0, #0
   18358:	d005      	beq.n	18366 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   1835a:	4b10      	ldr	r3, [pc, #64]	; (1839c <start_download+0xa8>)
   1835c:	0019      	movs	r1, r3
   1835e:	2001      	movs	r0, #1
   18360:	4b0b      	ldr	r3, [pc, #44]	; (18390 <start_download+0x9c>)
   18362:	4798      	blx	r3
        return;
   18364:	e00c      	b.n	18380 <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   18366:	4b0e      	ldr	r3, [pc, #56]	; (183a0 <start_download+0xac>)
   18368:	0019      	movs	r1, r3
   1836a:	2001      	movs	r0, #1
   1836c:	4b08      	ldr	r3, [pc, #32]	; (18390 <start_download+0x9c>)
   1836e:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   18370:	490c      	ldr	r1, [pc, #48]	; (183a4 <start_download+0xb0>)
   18372:	480d      	ldr	r0, [pc, #52]	; (183a8 <start_download+0xb4>)
   18374:	2300      	movs	r3, #0
   18376:	9300      	str	r3, [sp, #0]
   18378:	2300      	movs	r3, #0
   1837a:	2201      	movs	r2, #1
   1837c:	4c0b      	ldr	r4, [pc, #44]	; (183ac <start_download+0xb8>)
   1837e:	47a0      	blx	r4
}
   18380:	46bd      	mov	sp, r7
   18382:	b001      	add	sp, #4
   18384:	bd90      	pop	{r4, r7, pc}
   18386:	46c0      	nop			; (mov r8, r8)
   18388:	00017fcd 	.word	0x00017fcd
   1838c:	0003892c 	.word	0x0003892c
   18390:	0001ffe1 	.word	0x0001ffe1
   18394:	00038958 	.word	0x00038958
   18398:	00038984 	.word	0x00038984
   1839c:	000389b0 	.word	0x000389b0
   183a0:	000389dc 	.word	0x000389dc
   183a4:	00038a08 	.word	0x00038a08
   183a8:	20004564 	.word	0x20004564
   183ac:	00032cfd 	.word	0x00032cfd

000183b0 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   183b0:	b5b0      	push	{r4, r5, r7, lr}
   183b2:	b086      	sub	sp, #24
   183b4:	af00      	add	r7, sp, #0
   183b6:	6078      	str	r0, [r7, #4]
   183b8:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   183ba:	687b      	ldr	r3, [r7, #4]
   183bc:	2b00      	cmp	r3, #0
   183be:	d002      	beq.n	183c6 <store_file_packet+0x16>
   183c0:	683b      	ldr	r3, [r7, #0]
   183c2:	2b00      	cmp	r3, #0
   183c4:	d105      	bne.n	183d2 <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   183c6:	4b58      	ldr	r3, [pc, #352]	; (18528 <store_file_packet+0x178>)
   183c8:	0019      	movs	r1, r3
   183ca:	2001      	movs	r0, #1
   183cc:	4b57      	ldr	r3, [pc, #348]	; (1852c <store_file_packet+0x17c>)
   183ce:	4798      	blx	r3
        return;
   183d0:	e0a6      	b.n	18520 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   183d2:	2008      	movs	r0, #8
   183d4:	4b56      	ldr	r3, [pc, #344]	; (18530 <store_file_packet+0x180>)
   183d6:	4798      	blx	r3
   183d8:	0003      	movs	r3, r0
   183da:	001a      	movs	r2, r3
   183dc:	2301      	movs	r3, #1
   183de:	4053      	eors	r3, r2
   183e0:	b2db      	uxtb	r3, r3
   183e2:	2b00      	cmp	r3, #0
   183e4:	d055      	beq.n	18492 <store_file_packet+0xe2>
        char *cp = NULL;
   183e6:	2300      	movs	r3, #0
   183e8:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   183ea:	4b52      	ldr	r3, [pc, #328]	; (18534 <store_file_packet+0x184>)
   183ec:	2230      	movs	r2, #48	; 0x30
   183ee:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   183f0:	4b50      	ldr	r3, [pc, #320]	; (18534 <store_file_packet+0x184>)
   183f2:	223a      	movs	r2, #58	; 0x3a
   183f4:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   183f6:	4b50      	ldr	r3, [pc, #320]	; (18538 <store_file_packet+0x188>)
   183f8:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   183fa:	e002      	b.n	18402 <store_file_packet+0x52>
            cp--;
   183fc:	697b      	ldr	r3, [r7, #20]
   183fe:	3b01      	subs	r3, #1
   18400:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   18402:	697b      	ldr	r3, [r7, #20]
   18404:	781b      	ldrb	r3, [r3, #0]
   18406:	2b2f      	cmp	r3, #47	; 0x2f
   18408:	d1f8      	bne.n	183fc <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   1840a:	697b      	ldr	r3, [r7, #20]
   1840c:	0018      	movs	r0, r3
   1840e:	4b4b      	ldr	r3, [pc, #300]	; (1853c <store_file_packet+0x18c>)
   18410:	4798      	blx	r3
   18412:	0003      	movs	r3, r0
   18414:	2b01      	cmp	r3, #1
   18416:	d924      	bls.n	18462 <store_file_packet+0xb2>
            cp++;
   18418:	697b      	ldr	r3, [r7, #20]
   1841a:	3301      	adds	r3, #1
   1841c:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   1841e:	697a      	ldr	r2, [r7, #20]
   18420:	4b47      	ldr	r3, [pc, #284]	; (18540 <store_file_packet+0x190>)
   18422:	0011      	movs	r1, r2
   18424:	0018      	movs	r0, r3
   18426:	4b47      	ldr	r3, [pc, #284]	; (18544 <store_file_packet+0x194>)
   18428:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   1842a:	4942      	ldr	r1, [pc, #264]	; (18534 <store_file_packet+0x184>)
   1842c:	4b46      	ldr	r3, [pc, #280]	; (18548 <store_file_packet+0x198>)
   1842e:	2240      	movs	r2, #64	; 0x40
   18430:	0018      	movs	r0, r3
   18432:	4b46      	ldr	r3, [pc, #280]	; (1854c <store_file_packet+0x19c>)
   18434:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   18436:	4a3f      	ldr	r2, [pc, #252]	; (18534 <store_file_packet+0x184>)
   18438:	4b45      	ldr	r3, [pc, #276]	; (18550 <store_file_packet+0x1a0>)
   1843a:	0019      	movs	r1, r3
   1843c:	2001      	movs	r0, #1
   1843e:	4b3b      	ldr	r3, [pc, #236]	; (1852c <store_file_packet+0x17c>)
   18440:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   18442:	2313      	movs	r3, #19
   18444:	18fc      	adds	r4, r7, r3
   18446:	493b      	ldr	r1, [pc, #236]	; (18534 <store_file_packet+0x184>)
   18448:	4b3f      	ldr	r3, [pc, #252]	; (18548 <store_file_packet+0x198>)
   1844a:	220a      	movs	r2, #10
   1844c:	0018      	movs	r0, r3
   1844e:	4b41      	ldr	r3, [pc, #260]	; (18554 <store_file_packet+0x1a4>)
   18450:	4798      	blx	r3
   18452:	0003      	movs	r3, r0
   18454:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   18456:	2313      	movs	r3, #19
   18458:	18fb      	adds	r3, r7, r3
   1845a:	781b      	ldrb	r3, [r3, #0]
   1845c:	2b00      	cmp	r3, #0
   1845e:	d012      	beq.n	18486 <store_file_packet+0xd6>
   18460:	e008      	b.n	18474 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   18462:	4b3d      	ldr	r3, [pc, #244]	; (18558 <store_file_packet+0x1a8>)
   18464:	0019      	movs	r1, r3
   18466:	2001      	movs	r0, #1
   18468:	4b30      	ldr	r3, [pc, #192]	; (1852c <store_file_packet+0x17c>)
   1846a:	4798      	blx	r3
            add_state(CANCELED);
   1846c:	2020      	movs	r0, #32
   1846e:	4b3b      	ldr	r3, [pc, #236]	; (1855c <store_file_packet+0x1ac>)
   18470:	4798      	blx	r3
            return;
   18472:	e055      	b.n	18520 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   18474:	2313      	movs	r3, #19
   18476:	18fb      	adds	r3, r7, r3
   18478:	781a      	ldrb	r2, [r3, #0]
   1847a:	4b39      	ldr	r3, [pc, #228]	; (18560 <store_file_packet+0x1b0>)
   1847c:	0019      	movs	r1, r3
   1847e:	2001      	movs	r0, #1
   18480:	4b2a      	ldr	r3, [pc, #168]	; (1852c <store_file_packet+0x17c>)
   18482:	4798      	blx	r3
            return;
   18484:	e04c      	b.n	18520 <store_file_packet+0x170>
        }

        received_file_size = 0;
   18486:	4b37      	ldr	r3, [pc, #220]	; (18564 <store_file_packet+0x1b4>)
   18488:	2200      	movs	r2, #0
   1848a:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   1848c:	2008      	movs	r0, #8
   1848e:	4b33      	ldr	r3, [pc, #204]	; (1855c <store_file_packet+0x1ac>)
   18490:	4798      	blx	r3
    }

    if (data != NULL) {
   18492:	687b      	ldr	r3, [r7, #4]
   18494:	2b00      	cmp	r3, #0
   18496:	d043      	beq.n	18520 <store_file_packet+0x170>
        UINT wsize = 0;
   18498:	2300      	movs	r3, #0
   1849a:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   1849c:	2313      	movs	r3, #19
   1849e:	18fc      	adds	r4, r7, r3
   184a0:	230c      	movs	r3, #12
   184a2:	18fb      	adds	r3, r7, r3
   184a4:	683a      	ldr	r2, [r7, #0]
   184a6:	6879      	ldr	r1, [r7, #4]
   184a8:	4827      	ldr	r0, [pc, #156]	; (18548 <store_file_packet+0x198>)
   184aa:	4d2f      	ldr	r5, [pc, #188]	; (18568 <store_file_packet+0x1b8>)
   184ac:	47a8      	blx	r5
   184ae:	0003      	movs	r3, r0
   184b0:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   184b2:	2313      	movs	r3, #19
   184b4:	18fb      	adds	r3, r7, r3
   184b6:	781b      	ldrb	r3, [r3, #0]
   184b8:	2b00      	cmp	r3, #0
   184ba:	d00c      	beq.n	184d6 <store_file_packet+0x126>
            f_close(&file_object);
   184bc:	4b22      	ldr	r3, [pc, #136]	; (18548 <store_file_packet+0x198>)
   184be:	0018      	movs	r0, r3
   184c0:	4b2a      	ldr	r3, [pc, #168]	; (1856c <store_file_packet+0x1bc>)
   184c2:	4798      	blx	r3
            add_state(CANCELED);
   184c4:	2020      	movs	r0, #32
   184c6:	4b25      	ldr	r3, [pc, #148]	; (1855c <store_file_packet+0x1ac>)
   184c8:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   184ca:	4b29      	ldr	r3, [pc, #164]	; (18570 <store_file_packet+0x1c0>)
   184cc:	0019      	movs	r1, r3
   184ce:	2001      	movs	r0, #1
   184d0:	4b16      	ldr	r3, [pc, #88]	; (1852c <store_file_packet+0x17c>)
   184d2:	4798      	blx	r3
            return;
   184d4:	e024      	b.n	18520 <store_file_packet+0x170>
        }

        received_file_size += wsize;
   184d6:	4b23      	ldr	r3, [pc, #140]	; (18564 <store_file_packet+0x1b4>)
   184d8:	681a      	ldr	r2, [r3, #0]
   184da:	68fb      	ldr	r3, [r7, #12]
   184dc:	18d2      	adds	r2, r2, r3
   184de:	4b21      	ldr	r3, [pc, #132]	; (18564 <store_file_packet+0x1b4>)
   184e0:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   184e2:	4b20      	ldr	r3, [pc, #128]	; (18564 <store_file_packet+0x1b4>)
   184e4:	681a      	ldr	r2, [r3, #0]
   184e6:	4b23      	ldr	r3, [pc, #140]	; (18574 <store_file_packet+0x1c4>)
   184e8:	681b      	ldr	r3, [r3, #0]
   184ea:	4923      	ldr	r1, [pc, #140]	; (18578 <store_file_packet+0x1c8>)
   184ec:	2001      	movs	r0, #1
   184ee:	4c0f      	ldr	r4, [pc, #60]	; (1852c <store_file_packet+0x17c>)
   184f0:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   184f2:	4b1c      	ldr	r3, [pc, #112]	; (18564 <store_file_packet+0x1b4>)
   184f4:	681a      	ldr	r2, [r3, #0]
   184f6:	4b1f      	ldr	r3, [pc, #124]	; (18574 <store_file_packet+0x1c4>)
   184f8:	681b      	ldr	r3, [r3, #0]
   184fa:	429a      	cmp	r2, r3
   184fc:	d310      	bcc.n	18520 <store_file_packet+0x170>
            f_close(&file_object);
   184fe:	4b12      	ldr	r3, [pc, #72]	; (18548 <store_file_packet+0x198>)
   18500:	0018      	movs	r0, r3
   18502:	4b1a      	ldr	r3, [pc, #104]	; (1856c <store_file_packet+0x1bc>)
   18504:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   18506:	4b1d      	ldr	r3, [pc, #116]	; (1857c <store_file_packet+0x1cc>)
   18508:	0019      	movs	r1, r3
   1850a:	2001      	movs	r0, #1
   1850c:	4b07      	ldr	r3, [pc, #28]	; (1852c <store_file_packet+0x17c>)
   1850e:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   18510:	2100      	movs	r1, #0
   18512:	2017      	movs	r0, #23
   18514:	4b1a      	ldr	r3, [pc, #104]	; (18580 <store_file_packet+0x1d0>)
   18516:	4798      	blx	r3
            add_state(COMPLETED);
   18518:	2010      	movs	r0, #16
   1851a:	4b10      	ldr	r3, [pc, #64]	; (1855c <store_file_packet+0x1ac>)
   1851c:	4798      	blx	r3
            return;
   1851e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   18520:	46bd      	mov	sp, r7
   18522:	b006      	add	sp, #24
   18524:	bdb0      	pop	{r4, r5, r7, pc}
   18526:	46c0      	nop			; (mov r8, r8)
   18528:	00038a34 	.word	0x00038a34
   1852c:	0001ffe1 	.word	0x0001ffe1
   18530:	00017fcd 	.word	0x00017fcd
   18534:	200000a8 	.word	0x200000a8
   18538:	00038a32 	.word	0x00038a32
   1853c:	00037057 	.word	0x00037057
   18540:	200000aa 	.word	0x200000aa
   18544:	0003700b 	.word	0x0003700b
   18548:	200004bc 	.word	0x200004bc
   1854c:	00018051 	.word	0x00018051
   18550:	00038a98 	.word	0x00038a98
   18554:	0002f6a9 	.word	0x0002f6a9
   18558:	00038a58 	.word	0x00038a58
   1855c:	00017fa5 	.word	0x00017fa5
   18560:	00038ac0 	.word	0x00038ac0
   18564:	200004e4 	.word	0x200004e4
   18568:	0002fbd9 	.word	0x0002fbd9
   1856c:	000300a9 	.word	0x000300a9
   18570:	00038af4 	.word	0x00038af4
   18574:	200004e0 	.word	0x200004e0
   18578:	00038b30 	.word	0x00038b30
   1857c:	00038b64 	.word	0x00038b64
   18580:	00017f09 	.word	0x00017f09

00018584 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   18584:	b590      	push	{r4, r7, lr}
   18586:	b085      	sub	sp, #20
   18588:	af00      	add	r7, sp, #0
   1858a:	60f8      	str	r0, [r7, #12]
   1858c:	60b9      	str	r1, [r7, #8]
   1858e:	607a      	str	r2, [r7, #4]
    switch (type) {
   18590:	68bb      	ldr	r3, [r7, #8]
   18592:	2b04      	cmp	r3, #4
   18594:	d900      	bls.n	18598 <http_client_callback+0x14>
   18596:	e077      	b.n	18688 <http_client_callback+0x104>
   18598:	68bb      	ldr	r3, [r7, #8]
   1859a:	009a      	lsls	r2, r3, #2
   1859c:	4b3c      	ldr	r3, [pc, #240]	; (18690 <http_client_callback+0x10c>)
   1859e:	18d3      	adds	r3, r2, r3
   185a0:	681b      	ldr	r3, [r3, #0]
   185a2:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   185a4:	4b3b      	ldr	r3, [pc, #236]	; (18694 <http_client_callback+0x110>)
   185a6:	0019      	movs	r1, r3
   185a8:	2001      	movs	r0, #1
   185aa:	4b3b      	ldr	r3, [pc, #236]	; (18698 <http_client_callback+0x114>)
   185ac:	4798      	blx	r3
            break;
   185ae:	e06b      	b.n	18688 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   185b0:	4b3a      	ldr	r3, [pc, #232]	; (1869c <http_client_callback+0x118>)
   185b2:	0019      	movs	r1, r3
   185b4:	2001      	movs	r0, #1
   185b6:	4b38      	ldr	r3, [pc, #224]	; (18698 <http_client_callback+0x114>)
   185b8:	4798      	blx	r3
            add_state(GET_REQUESTED);
   185ba:	2004      	movs	r0, #4
   185bc:	4b38      	ldr	r3, [pc, #224]	; (186a0 <http_client_callback+0x11c>)
   185be:	4798      	blx	r3
            break;
   185c0:	e062      	b.n	18688 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   185c2:	687b      	ldr	r3, [r7, #4]
   185c4:	881b      	ldrh	r3, [r3, #0]
   185c6:	001a      	movs	r2, r3
   185c8:	687b      	ldr	r3, [r7, #4]
   185ca:	685b      	ldr	r3, [r3, #4]
   185cc:	4935      	ldr	r1, [pc, #212]	; (186a4 <http_client_callback+0x120>)
   185ce:	2001      	movs	r0, #1
   185d0:	4c31      	ldr	r4, [pc, #196]	; (18698 <http_client_callback+0x114>)
   185d2:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   185d4:	687b      	ldr	r3, [r7, #4]
   185d6:	881b      	ldrh	r3, [r3, #0]
   185d8:	2bc8      	cmp	r3, #200	; 0xc8
   185da:	d10d      	bne.n	185f8 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   185dc:	687b      	ldr	r3, [r7, #4]
   185de:	685a      	ldr	r2, [r3, #4]
   185e0:	4b31      	ldr	r3, [pc, #196]	; (186a8 <http_client_callback+0x124>)
   185e2:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   185e4:	4b31      	ldr	r3, [pc, #196]	; (186ac <http_client_callback+0x128>)
   185e6:	2200      	movs	r2, #0
   185e8:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   185ea:	687b      	ldr	r3, [r7, #4]
   185ec:	685a      	ldr	r2, [r3, #4]
   185ee:	2380      	movs	r3, #128	; 0x80
   185f0:	009b      	lsls	r3, r3, #2
   185f2:	429a      	cmp	r2, r3
   185f4:	d843      	bhi.n	1867e <http_client_callback+0xfa>
   185f6:	e003      	b.n	18600 <http_client_callback+0x7c>
                add_state(CANCELED);
   185f8:	2020      	movs	r0, #32
   185fa:	4b29      	ldr	r3, [pc, #164]	; (186a0 <http_client_callback+0x11c>)
   185fc:	4798      	blx	r3
                return;
   185fe:	e043      	b.n	18688 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   18600:	687b      	ldr	r3, [r7, #4]
   18602:	689a      	ldr	r2, [r3, #8]
   18604:	687b      	ldr	r3, [r7, #4]
   18606:	685b      	ldr	r3, [r3, #4]
   18608:	0019      	movs	r1, r3
   1860a:	0010      	movs	r0, r2
   1860c:	4b28      	ldr	r3, [pc, #160]	; (186b0 <http_client_callback+0x12c>)
   1860e:	4798      	blx	r3
                add_state(COMPLETED);
   18610:	2010      	movs	r0, #16
   18612:	4b23      	ldr	r3, [pc, #140]	; (186a0 <http_client_callback+0x11c>)
   18614:	4798      	blx	r3
            }
            break;
   18616:	e032      	b.n	1867e <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   18618:	687b      	ldr	r3, [r7, #4]
   1861a:	685a      	ldr	r2, [r3, #4]
   1861c:	687b      	ldr	r3, [r7, #4]
   1861e:	681b      	ldr	r3, [r3, #0]
   18620:	0019      	movs	r1, r3
   18622:	0010      	movs	r0, r2
   18624:	4b22      	ldr	r3, [pc, #136]	; (186b0 <http_client_callback+0x12c>)
   18626:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   18628:	687b      	ldr	r3, [r7, #4]
   1862a:	7a1b      	ldrb	r3, [r3, #8]
   1862c:	2b00      	cmp	r3, #0
   1862e:	d028      	beq.n	18682 <http_client_callback+0xfe>
                add_state(COMPLETED);
   18630:	2010      	movs	r0, #16
   18632:	4b1b      	ldr	r3, [pc, #108]	; (186a0 <http_client_callback+0x11c>)
   18634:	4798      	blx	r3
            }

            break;
   18636:	e024      	b.n	18682 <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   18638:	687b      	ldr	r3, [r7, #4]
   1863a:	681a      	ldr	r2, [r3, #0]
   1863c:	4b1d      	ldr	r3, [pc, #116]	; (186b4 <http_client_callback+0x130>)
   1863e:	0019      	movs	r1, r3
   18640:	2001      	movs	r0, #1
   18642:	4b15      	ldr	r3, [pc, #84]	; (18698 <http_client_callback+0x114>)
   18644:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   18646:	687b      	ldr	r3, [r7, #4]
   18648:	681b      	ldr	r3, [r3, #0]
   1864a:	330b      	adds	r3, #11
   1864c:	d11b      	bne.n	18686 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   1864e:	2008      	movs	r0, #8
   18650:	4b19      	ldr	r3, [pc, #100]	; (186b8 <http_client_callback+0x134>)
   18652:	4798      	blx	r3
   18654:	1e03      	subs	r3, r0, #0
   18656:	d006      	beq.n	18666 <http_client_callback+0xe2>
                    f_close(&file_object);
   18658:	4b18      	ldr	r3, [pc, #96]	; (186bc <http_client_callback+0x138>)
   1865a:	0018      	movs	r0, r3
   1865c:	4b18      	ldr	r3, [pc, #96]	; (186c0 <http_client_callback+0x13c>)
   1865e:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   18660:	2008      	movs	r0, #8
   18662:	4b18      	ldr	r3, [pc, #96]	; (186c4 <http_client_callback+0x140>)
   18664:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   18666:	2004      	movs	r0, #4
   18668:	4b13      	ldr	r3, [pc, #76]	; (186b8 <http_client_callback+0x134>)
   1866a:	4798      	blx	r3
   1866c:	1e03      	subs	r3, r0, #0
   1866e:	d002      	beq.n	18676 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   18670:	2004      	movs	r0, #4
   18672:	4b14      	ldr	r3, [pc, #80]	; (186c4 <http_client_callback+0x140>)
   18674:	4798      	blx	r3
                }

                start_download();
   18676:	4b14      	ldr	r3, [pc, #80]	; (186c8 <http_client_callback+0x144>)
   18678:	4798      	blx	r3
            }

            break;
   1867a:	46c0      	nop			; (mov r8, r8)
   1867c:	e003      	b.n	18686 <http_client_callback+0x102>
            break;
   1867e:	46c0      	nop			; (mov r8, r8)
   18680:	e002      	b.n	18688 <http_client_callback+0x104>
            break;
   18682:	46c0      	nop			; (mov r8, r8)
   18684:	e000      	b.n	18688 <http_client_callback+0x104>
            break;
   18686:	46c0      	nop			; (mov r8, r8)
    }
}
   18688:	46bd      	mov	sp, r7
   1868a:	b005      	add	sp, #20
   1868c:	bd90      	pop	{r4, r7, pc}
   1868e:	46c0      	nop			; (mov r8, r8)
   18690:	000392ac 	.word	0x000392ac
   18694:	00038b98 	.word	0x00038b98
   18698:	0001ffe1 	.word	0x0001ffe1
   1869c:	00038bd0 	.word	0x00038bd0
   186a0:	00017fa5 	.word	0x00017fa5
   186a4:	00038bfc 	.word	0x00038bfc
   186a8:	200004e0 	.word	0x200004e0
   186ac:	200004e4 	.word	0x200004e4
   186b0:	000183b1 	.word	0x000183b1
   186b4:	00038c38 	.word	0x00038c38
   186b8:	00017fcd 	.word	0x00017fcd
   186bc:	200004bc 	.word	0x200004bc
   186c0:	000300a9 	.word	0x000300a9
   186c4:	00017f71 	.word	0x00017f71
   186c8:	000182f5 	.word	0x000182f5

000186cc <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   186cc:	b580      	push	{r7, lr}
   186ce:	b082      	sub	sp, #8
   186d0:	af00      	add	r7, sp, #0
   186d2:	603a      	str	r2, [r7, #0]
   186d4:	1dfb      	adds	r3, r7, #7
   186d6:	1c02      	adds	r2, r0, #0
   186d8:	701a      	strb	r2, [r3, #0]
   186da:	1dbb      	adds	r3, r7, #6
   186dc:	1c0a      	adds	r2, r1, #0
   186de:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   186e0:	683a      	ldr	r2, [r7, #0]
   186e2:	1dbb      	adds	r3, r7, #6
   186e4:	7819      	ldrb	r1, [r3, #0]
   186e6:	1dfb      	adds	r3, r7, #7
   186e8:	781b      	ldrb	r3, [r3, #0]
   186ea:	b25b      	sxtb	r3, r3
   186ec:	0018      	movs	r0, r3
   186ee:	4b03      	ldr	r3, [pc, #12]	; (186fc <socket_cb+0x30>)
   186f0:	4798      	blx	r3
}
   186f2:	46c0      	nop			; (mov r8, r8)
   186f4:	46bd      	mov	sp, r7
   186f6:	b002      	add	sp, #8
   186f8:	bd80      	pop	{r7, pc}
   186fa:	46c0      	nop			; (mov r8, r8)
   186fc:	00032a0d 	.word	0x00032a0d

00018700 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   18700:	b5b0      	push	{r4, r5, r7, lr}
   18702:	b086      	sub	sp, #24
   18704:	af04      	add	r7, sp, #16
   18706:	6078      	str	r0, [r7, #4]
   18708:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   1870a:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   1870c:	22ff      	movs	r2, #255	; 0xff
   1870e:	4013      	ands	r3, r2
   18710:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   18712:	683b      	ldr	r3, [r7, #0]
   18714:	0a1b      	lsrs	r3, r3, #8
   18716:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   18718:	23ff      	movs	r3, #255	; 0xff
   1871a:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   1871c:	683a      	ldr	r2, [r7, #0]
   1871e:	0c12      	lsrs	r2, r2, #16
   18720:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   18722:	22ff      	movs	r2, #255	; 0xff
   18724:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   18726:	6839      	ldr	r1, [r7, #0]
   18728:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   1872a:	000d      	movs	r5, r1
   1872c:	6878      	ldr	r0, [r7, #4]
   1872e:	4909      	ldr	r1, [pc, #36]	; (18754 <resolve_cb+0x54>)
   18730:	9502      	str	r5, [sp, #8]
   18732:	9201      	str	r2, [sp, #4]
   18734:	9300      	str	r3, [sp, #0]
   18736:	0023      	movs	r3, r4
   18738:	0002      	movs	r2, r0
   1873a:	2001      	movs	r0, #1
   1873c:	4c06      	ldr	r4, [pc, #24]	; (18758 <resolve_cb+0x58>)
   1873e:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   18740:	683a      	ldr	r2, [r7, #0]
   18742:	687b      	ldr	r3, [r7, #4]
   18744:	0011      	movs	r1, r2
   18746:	0018      	movs	r0, r3
   18748:	4b04      	ldr	r3, [pc, #16]	; (1875c <resolve_cb+0x5c>)
   1874a:	4798      	blx	r3
}
   1874c:	46c0      	nop			; (mov r8, r8)
   1874e:	46bd      	mov	sp, r7
   18750:	b002      	add	sp, #8
   18752:	bdb0      	pop	{r4, r5, r7, pc}
   18754:	00038c68 	.word	0x00038c68
   18758:	0001ffe1 	.word	0x0001ffe1
   1875c:	00032b71 	.word	0x00032b71

00018760 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   18760:	b590      	push	{r4, r7, lr}
   18762:	b087      	sub	sp, #28
   18764:	af02      	add	r7, sp, #8
   18766:	0002      	movs	r2, r0
   18768:	6039      	str	r1, [r7, #0]
   1876a:	1dfb      	adds	r3, r7, #7
   1876c:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   1876e:	1dfb      	adds	r3, r7, #7
   18770:	781b      	ldrb	r3, [r3, #0]
   18772:	2b2c      	cmp	r3, #44	; 0x2c
   18774:	d002      	beq.n	1877c <wifi_cb+0x1c>
   18776:	2b32      	cmp	r3, #50	; 0x32
   18778:	d03d      	beq.n	187f6 <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   1877a:	e06f      	b.n	1885c <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   1877c:	683b      	ldr	r3, [r7, #0]
   1877e:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   18780:	68fb      	ldr	r3, [r7, #12]
   18782:	781b      	ldrb	r3, [r3, #0]
   18784:	2b01      	cmp	r3, #1
   18786:	d107      	bne.n	18798 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   18788:	4b36      	ldr	r3, [pc, #216]	; (18864 <wifi_cb+0x104>)
   1878a:	0019      	movs	r1, r3
   1878c:	2001      	movs	r0, #1
   1878e:	4b36      	ldr	r3, [pc, #216]	; (18868 <wifi_cb+0x108>)
   18790:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   18792:	4b36      	ldr	r3, [pc, #216]	; (1886c <wifi_cb+0x10c>)
   18794:	4798      	blx	r3
            break;
   18796:	e05e      	b.n	18856 <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   18798:	68fb      	ldr	r3, [r7, #12]
   1879a:	781b      	ldrb	r3, [r3, #0]
   1879c:	2b00      	cmp	r3, #0
   1879e:	d15a      	bne.n	18856 <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   187a0:	4b33      	ldr	r3, [pc, #204]	; (18870 <wifi_cb+0x110>)
   187a2:	0019      	movs	r1, r3
   187a4:	2001      	movs	r0, #1
   187a6:	4b30      	ldr	r3, [pc, #192]	; (18868 <wifi_cb+0x108>)
   187a8:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   187aa:	2002      	movs	r0, #2
   187ac:	4b31      	ldr	r3, [pc, #196]	; (18874 <wifi_cb+0x114>)
   187ae:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   187b0:	2008      	movs	r0, #8
   187b2:	4b31      	ldr	r3, [pc, #196]	; (18878 <wifi_cb+0x118>)
   187b4:	4798      	blx	r3
   187b6:	1e03      	subs	r3, r0, #0
   187b8:	d006      	beq.n	187c8 <wifi_cb+0x68>
                    f_close(&file_object);
   187ba:	4b30      	ldr	r3, [pc, #192]	; (1887c <wifi_cb+0x11c>)
   187bc:	0018      	movs	r0, r3
   187be:	4b30      	ldr	r3, [pc, #192]	; (18880 <wifi_cb+0x120>)
   187c0:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   187c2:	2008      	movs	r0, #8
   187c4:	4b2b      	ldr	r3, [pc, #172]	; (18874 <wifi_cb+0x114>)
   187c6:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   187c8:	2004      	movs	r0, #4
   187ca:	4b2b      	ldr	r3, [pc, #172]	; (18878 <wifi_cb+0x118>)
   187cc:	4798      	blx	r3
   187ce:	1e03      	subs	r3, r0, #0
   187d0:	d002      	beq.n	187d8 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   187d2:	2004      	movs	r0, #4
   187d4:	4b27      	ldr	r3, [pc, #156]	; (18874 <wifi_cb+0x114>)
   187d6:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   187d8:	4b2a      	ldr	r3, [pc, #168]	; (18884 <wifi_cb+0x124>)
   187da:	2101      	movs	r1, #1
   187dc:	0018      	movs	r0, r3
   187de:	4b2a      	ldr	r3, [pc, #168]	; (18888 <wifi_cb+0x128>)
   187e0:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   187e2:	4a2a      	ldr	r2, [pc, #168]	; (1888c <wifi_cb+0x12c>)
   187e4:	482a      	ldr	r0, [pc, #168]	; (18890 <wifi_cb+0x130>)
   187e6:	23ff      	movs	r3, #255	; 0xff
   187e8:	9300      	str	r3, [sp, #0]
   187ea:	0013      	movs	r3, r2
   187ec:	2202      	movs	r2, #2
   187ee:	2102      	movs	r1, #2
   187f0:	4c28      	ldr	r4, [pc, #160]	; (18894 <wifi_cb+0x134>)
   187f2:	47a0      	blx	r4
            break;
   187f4:	e02f      	b.n	18856 <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   187f6:	683b      	ldr	r3, [r7, #0]
   187f8:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   187fa:	68bb      	ldr	r3, [r7, #8]
   187fc:	781b      	ldrb	r3, [r3, #0]
   187fe:	0018      	movs	r0, r3
   18800:	68bb      	ldr	r3, [r7, #8]
   18802:	3301      	adds	r3, #1
   18804:	781b      	ldrb	r3, [r3, #0]
   18806:	001c      	movs	r4, r3
   18808:	68bb      	ldr	r3, [r7, #8]
   1880a:	3302      	adds	r3, #2
   1880c:	781b      	ldrb	r3, [r3, #0]
   1880e:	001a      	movs	r2, r3
   18810:	68bb      	ldr	r3, [r7, #8]
   18812:	3303      	adds	r3, #3
   18814:	781b      	ldrb	r3, [r3, #0]
   18816:	4920      	ldr	r1, [pc, #128]	; (18898 <wifi_cb+0x138>)
   18818:	9301      	str	r3, [sp, #4]
   1881a:	9200      	str	r2, [sp, #0]
   1881c:	0023      	movs	r3, r4
   1881e:	0002      	movs	r2, r0
   18820:	2001      	movs	r0, #1
   18822:	4c11      	ldr	r4, [pc, #68]	; (18868 <wifi_cb+0x108>)
   18824:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   18826:	2002      	movs	r0, #2
   18828:	4b1c      	ldr	r3, [pc, #112]	; (1889c <wifi_cb+0x13c>)
   1882a:	4798      	blx	r3
            if (do_download_flag == 1) {
   1882c:	4b1c      	ldr	r3, [pc, #112]	; (188a0 <wifi_cb+0x140>)
   1882e:	781b      	ldrb	r3, [r3, #0]
   18830:	2b01      	cmp	r3, #1
   18832:	d102      	bne.n	1883a <wifi_cb+0xda>
                start_download();
   18834:	4b1b      	ldr	r3, [pc, #108]	; (188a4 <wifi_cb+0x144>)
   18836:	4798      	blx	r3
        } break;
   18838:	e00f      	b.n	1885a <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   1883a:	4a1b      	ldr	r2, [pc, #108]	; (188a8 <wifi_cb+0x148>)
   1883c:	4b11      	ldr	r3, [pc, #68]	; (18884 <wifi_cb+0x124>)
   1883e:	0011      	movs	r1, r2
   18840:	0018      	movs	r0, r3
   18842:	4b1a      	ldr	r3, [pc, #104]	; (188ac <wifi_cb+0x14c>)
   18844:	4798      	blx	r3
   18846:	1e03      	subs	r3, r0, #0
   18848:	d007      	beq.n	1885a <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   1884a:	4b19      	ldr	r3, [pc, #100]	; (188b0 <wifi_cb+0x150>)
   1884c:	0019      	movs	r1, r3
   1884e:	2001      	movs	r0, #1
   18850:	4b05      	ldr	r3, [pc, #20]	; (18868 <wifi_cb+0x108>)
   18852:	4798      	blx	r3
        } break;
   18854:	e001      	b.n	1885a <wifi_cb+0xfa>
            break;
   18856:	46c0      	nop			; (mov r8, r8)
   18858:	e000      	b.n	1885c <wifi_cb+0xfc>
        } break;
   1885a:	46c0      	nop			; (mov r8, r8)
    }
}
   1885c:	46c0      	nop			; (mov r8, r8)
   1885e:	46bd      	mov	sp, r7
   18860:	b005      	add	sp, #20
   18862:	bd90      	pop	{r4, r7, pc}
   18864:	00038c98 	.word	0x00038c98
   18868:	0001ffe1 	.word	0x0001ffe1
   1886c:	000241d9 	.word	0x000241d9
   18870:	00038cb8 	.word	0x00038cb8
   18874:	00017f71 	.word	0x00017f71
   18878:	00017fcd 	.word	0x00017fcd
   1887c:	200004bc 	.word	0x200004bc
   18880:	000300a9 	.word	0x000300a9
   18884:	200004e8 	.word	0x200004e8
   18888:	000316b9 	.word	0x000316b9
   1888c:	00038cdc 	.word	0x00038cdc
   18890:	00038ce8 	.word	0x00038ce8
   18894:	00023d05 	.word	0x00023d05
   18898:	00038cec 	.word	0x00038cec
   1889c:	00017fa5 	.word	0x00017fa5
   188a0:	200004b8 	.word	0x200004b8
   188a4:	000182f5 	.word	0x000182f5
   188a8:	00038910 	.word	0x00038910
   188ac:	00031585 	.word	0x00031585
   188b0:	00038d14 	.word	0x00038d14

000188b4 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   188b4:	b580      	push	{r7, lr}
   188b6:	b082      	sub	sp, #8
   188b8:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   188ba:	1d3b      	adds	r3, r7, #4
   188bc:	0018      	movs	r0, r3
   188be:	4b08      	ldr	r3, [pc, #32]	; (188e0 <configure_timer+0x2c>)
   188c0:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   188c2:	1d3a      	adds	r2, r7, #4
   188c4:	4b07      	ldr	r3, [pc, #28]	; (188e4 <configure_timer+0x30>)
   188c6:	0011      	movs	r1, r2
   188c8:	0018      	movs	r0, r3
   188ca:	4b07      	ldr	r3, [pc, #28]	; (188e8 <configure_timer+0x34>)
   188cc:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   188ce:	4b05      	ldr	r3, [pc, #20]	; (188e4 <configure_timer+0x30>)
   188d0:	0018      	movs	r0, r3
   188d2:	4b06      	ldr	r3, [pc, #24]	; (188ec <configure_timer+0x38>)
   188d4:	4798      	blx	r3
}
   188d6:	46c0      	nop			; (mov r8, r8)
   188d8:	46bd      	mov	sp, r7
   188da:	b002      	add	sp, #8
   188dc:	bd80      	pop	{r7, pc}
   188de:	46c0      	nop			; (mov r8, r8)
   188e0:	000341a1 	.word	0x000341a1
   188e4:	2000450c 	.word	0x2000450c
   188e8:	000341c5 	.word	0x000341c5
   188ec:	000342b1 	.word	0x000342b1

000188f0 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   188f0:	b580      	push	{r7, lr}
   188f2:	b088      	sub	sp, #32
   188f4:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   188f6:	003b      	movs	r3, r7
   188f8:	0018      	movs	r0, r3
   188fa:	4b16      	ldr	r3, [pc, #88]	; (18954 <configure_http_client+0x64>)
   188fc:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   188fe:	003b      	movs	r3, r7
   18900:	2280      	movs	r2, #128	; 0x80
   18902:	0092      	lsls	r2, r2, #2
   18904:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   18906:	003b      	movs	r3, r7
   18908:	4a13      	ldr	r2, [pc, #76]	; (18958 <configure_http_client+0x68>)
   1890a:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 443;
   1890c:	003b      	movs	r3, r7
   1890e:	22bc      	movs	r2, #188	; 0xbc
   18910:	32ff      	adds	r2, #255	; 0xff
   18912:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 1;
   18914:	003b      	movs	r3, r7
   18916:	2201      	movs	r2, #1
   18918:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   1891a:	003a      	movs	r2, r7
   1891c:	4b0f      	ldr	r3, [pc, #60]	; (1895c <configure_http_client+0x6c>)
   1891e:	0011      	movs	r1, r2
   18920:	0018      	movs	r0, r3
   18922:	4b0f      	ldr	r3, [pc, #60]	; (18960 <configure_http_client+0x70>)
   18924:	4798      	blx	r3
   18926:	0003      	movs	r3, r0
   18928:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   1892a:	69fb      	ldr	r3, [r7, #28]
   1892c:	2b00      	cmp	r3, #0
   1892e:	da06      	bge.n	1893e <configure_http_client+0x4e>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   18930:	69fa      	ldr	r2, [r7, #28]
   18932:	4b0c      	ldr	r3, [pc, #48]	; (18964 <configure_http_client+0x74>)
   18934:	0019      	movs	r1, r3
   18936:	2001      	movs	r0, #1
   18938:	4b0b      	ldr	r3, [pc, #44]	; (18968 <configure_http_client+0x78>)
   1893a:	4798      	blx	r3
        while (1) {
   1893c:	e7fe      	b.n	1893c <configure_http_client+0x4c>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   1893e:	4a0b      	ldr	r2, [pc, #44]	; (1896c <configure_http_client+0x7c>)
   18940:	4b06      	ldr	r3, [pc, #24]	; (1895c <configure_http_client+0x6c>)
   18942:	0011      	movs	r1, r2
   18944:	0018      	movs	r0, r3
   18946:	4b0a      	ldr	r3, [pc, #40]	; (18970 <configure_http_client+0x80>)
   18948:	4798      	blx	r3
}
   1894a:	46c0      	nop			; (mov r8, r8)
   1894c:	46bd      	mov	sp, r7
   1894e:	b008      	add	sp, #32
   18950:	bd80      	pop	{r7, pc}
   18952:	46c0      	nop			; (mov r8, r8)
   18954:	00032835 	.word	0x00032835
   18958:	2000450c 	.word	0x2000450c
   1895c:	20004564 	.word	0x20004564
   18960:	00032881 	.word	0x00032881
   18964:	00038e44 	.word	0x00038e44
   18968:	0001ffe1 	.word	0x0001ffe1
   1896c:	00018585 	.word	0x00018585
   18970:	0003296d 	.word	0x0003296d

00018974 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   18974:	b580      	push	{r7, lr}
   18976:	b082      	sub	sp, #8
   18978:	af00      	add	r7, sp, #0
   1897a:	603a      	str	r2, [r7, #0]
   1897c:	1dfb      	adds	r3, r7, #7
   1897e:	1c02      	adds	r2, r0, #0
   18980:	701a      	strb	r2, [r3, #0]
   18982:	1dbb      	adds	r3, r7, #6
   18984:	1c0a      	adds	r2, r1, #0
   18986:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   18988:	683a      	ldr	r2, [r7, #0]
   1898a:	1dbb      	adds	r3, r7, #6
   1898c:	7819      	ldrb	r1, [r3, #0]
   1898e:	1dfb      	adds	r3, r7, #7
   18990:	781b      	ldrb	r3, [r3, #0]
   18992:	b25b      	sxtb	r3, r3
   18994:	0018      	movs	r0, r3
   18996:	4b03      	ldr	r3, [pc, #12]	; (189a4 <socket_event_handler+0x30>)
   18998:	4798      	blx	r3
}
   1899a:	46c0      	nop			; (mov r8, r8)
   1899c:	46bd      	mov	sp, r7
   1899e:	b002      	add	sp, #8
   189a0:	bd80      	pop	{r7, pc}
   189a2:	46c0      	nop			; (mov r8, r8)
   189a4:	0003152d 	.word	0x0003152d

000189a8 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   189a8:	b580      	push	{r7, lr}
   189aa:	b082      	sub	sp, #8
   189ac:	af00      	add	r7, sp, #0
   189ae:	6078      	str	r0, [r7, #4]
   189b0:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   189b2:	683a      	ldr	r2, [r7, #0]
   189b4:	687b      	ldr	r3, [r7, #4]
   189b6:	0011      	movs	r1, r2
   189b8:	0018      	movs	r0, r3
   189ba:	4b03      	ldr	r3, [pc, #12]	; (189c8 <socket_resolve_handler+0x20>)
   189bc:	4798      	blx	r3
}
   189be:	46c0      	nop			; (mov r8, r8)
   189c0:	46bd      	mov	sp, r7
   189c2:	b002      	add	sp, #8
   189c4:	bd80      	pop	{r7, pc}
   189c6:	46c0      	nop			; (mov r8, r8)
   189c8:	00031561 	.word	0x00031561

000189cc <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
   189cc:	b590      	push	{r4, r7, lr}
   189ce:	b089      	sub	sp, #36	; 0x24
   189d0:	af02      	add	r7, sp, #8
   189d2:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
   189d4:	2310      	movs	r3, #16
   189d6:	18fb      	adds	r3, r7, r3
   189d8:	2200      	movs	r2, #0
   189da:	701a      	strb	r2, [r3, #0]
   189dc:	2310      	movs	r3, #16
   189de:	18fb      	adds	r3, r7, r3
   189e0:	2200      	movs	r2, #0
   189e2:	705a      	strb	r2, [r3, #1]
   189e4:	2310      	movs	r3, #16
   189e6:	18fb      	adds	r3, r7, r3
   189e8:	2200      	movs	r2, #0
   189ea:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   189ec:	687b      	ldr	r3, [r7, #4]
   189ee:	685b      	ldr	r3, [r3, #4]
   189f0:	685a      	ldr	r2, [r3, #4]
   189f2:	687b      	ldr	r3, [r7, #4]
   189f4:	685b      	ldr	r3, [r3, #4]
   189f6:	689b      	ldr	r3, [r3, #8]
   189f8:	492a      	ldr	r1, [pc, #168]	; (18aa4 <SubscribeHandlerLedTopic+0xd8>)
   189fa:	2001      	movs	r0, #1
   189fc:	4c2a      	ldr	r4, [pc, #168]	; (18aa8 <SubscribeHandlerLedTopic+0xdc>)
   189fe:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
   18a00:	687b      	ldr	r3, [r7, #4]
   18a02:	681b      	ldr	r3, [r3, #0]
   18a04:	689b      	ldr	r3, [r3, #8]
   18a06:	4929      	ldr	r1, [pc, #164]	; (18aac <SubscribeHandlerLedTopic+0xe0>)
   18a08:	2204      	movs	r2, #4
   18a0a:	0018      	movs	r0, r3
   18a0c:	4b28      	ldr	r3, [pc, #160]	; (18ab0 <SubscribeHandlerLedTopic+0xe4>)
   18a0e:	4798      	blx	r3
   18a10:	1e03      	subs	r3, r0, #0
   18a12:	d143      	bne.n	18a9c <SubscribeHandlerLedTopic+0xd0>
        char *p = (char *)&msgData->message->payload[4];
   18a14:	687b      	ldr	r3, [r7, #4]
   18a16:	681b      	ldr	r3, [r3, #0]
   18a18:	689b      	ldr	r3, [r3, #8]
   18a1a:	3304      	adds	r3, #4
   18a1c:	60fb      	str	r3, [r7, #12]
        int nb = 0;
   18a1e:	2300      	movs	r3, #0
   18a20:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
   18a22:	e015      	b.n	18a50 <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
   18a24:	697c      	ldr	r4, [r7, #20]
   18a26:	1c63      	adds	r3, r4, #1
   18a28:	617b      	str	r3, [r7, #20]
   18a2a:	68fb      	ldr	r3, [r7, #12]
   18a2c:	220c      	movs	r2, #12
   18a2e:	18b9      	adds	r1, r7, r2
   18a30:	220a      	movs	r2, #10
   18a32:	0018      	movs	r0, r3
   18a34:	4b1f      	ldr	r3, [pc, #124]	; (18ab4 <SubscribeHandlerLedTopic+0xe8>)
   18a36:	4798      	blx	r3
   18a38:	0003      	movs	r3, r0
   18a3a:	b2da      	uxtb	r2, r3
   18a3c:	2310      	movs	r3, #16
   18a3e:	18fb      	adds	r3, r7, r3
   18a40:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   18a42:	68fb      	ldr	r3, [r7, #12]
   18a44:	781b      	ldrb	r3, [r3, #0]
   18a46:	2b2c      	cmp	r3, #44	; 0x2c
   18a48:	d10a      	bne.n	18a60 <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
   18a4a:	68fb      	ldr	r3, [r7, #12]
   18a4c:	3301      	adds	r3, #1
   18a4e:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
   18a50:	697b      	ldr	r3, [r7, #20]
   18a52:	2b02      	cmp	r3, #2
   18a54:	dc05      	bgt.n	18a62 <SubscribeHandlerLedTopic+0x96>
   18a56:	68fb      	ldr	r3, [r7, #12]
   18a58:	781b      	ldrb	r3, [r3, #0]
   18a5a:	2b00      	cmp	r3, #0
   18a5c:	d1e2      	bne.n	18a24 <SubscribeHandlerLedTopic+0x58>
   18a5e:	e000      	b.n	18a62 <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
   18a60:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   18a62:	2310      	movs	r3, #16
   18a64:	18fb      	adds	r3, r7, r3
   18a66:	781b      	ldrb	r3, [r3, #0]
   18a68:	001a      	movs	r2, r3
   18a6a:	2310      	movs	r3, #16
   18a6c:	18fb      	adds	r3, r7, r3
   18a6e:	785b      	ldrb	r3, [r3, #1]
   18a70:	0018      	movs	r0, r3
   18a72:	2310      	movs	r3, #16
   18a74:	18fb      	adds	r3, r7, r3
   18a76:	789b      	ldrb	r3, [r3, #2]
   18a78:	490f      	ldr	r1, [pc, #60]	; (18ab8 <SubscribeHandlerLedTopic+0xec>)
   18a7a:	9300      	str	r3, [sp, #0]
   18a7c:	0003      	movs	r3, r0
   18a7e:	2001      	movs	r0, #1
   18a80:	4c09      	ldr	r4, [pc, #36]	; (18aa8 <SubscribeHandlerLedTopic+0xdc>)
   18a82:	47a0      	blx	r4
        UIChangeColors(rgb[0], rgb[1], rgb[2]);
   18a84:	2310      	movs	r3, #16
   18a86:	18fb      	adds	r3, r7, r3
   18a88:	7818      	ldrb	r0, [r3, #0]
   18a8a:	2310      	movs	r3, #16
   18a8c:	18fb      	adds	r3, r7, r3
   18a8e:	7859      	ldrb	r1, [r3, #1]
   18a90:	2310      	movs	r3, #16
   18a92:	18fb      	adds	r3, r7, r3
   18a94:	789b      	ldrb	r3, [r3, #2]
   18a96:	001a      	movs	r2, r3
   18a98:	4b08      	ldr	r3, [pc, #32]	; (18abc <SubscribeHandlerLedTopic+0xf0>)
   18a9a:	4798      	blx	r3
    }
}
   18a9c:	46c0      	nop			; (mov r8, r8)
   18a9e:	46bd      	mov	sp, r7
   18aa0:	b007      	add	sp, #28
   18aa2:	bd90      	pop	{r4, r7, pc}
   18aa4:	00038e8c 	.word	0x00038e8c
   18aa8:	0001ffe1 	.word	0x0001ffe1
   18aac:	00038e94 	.word	0x00038e94
   18ab0:	00037065 	.word	0x00037065
   18ab4:	00037211 	.word	0x00037211
   18ab8:	00038e9c 	.word	0x00038e9c
   18abc:	00017e39 	.word	0x00017e39

00018ac0 <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   18ac0:	b590      	push	{r4, r7, lr}
   18ac2:	b08b      	sub	sp, #44	; 0x2c
   18ac4:	af00      	add	r7, sp, #0
   18ac6:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
   18ac8:	230c      	movs	r3, #12
   18aca:	18fb      	adds	r3, r7, r3
   18acc:	2214      	movs	r2, #20
   18ace:	21ff      	movs	r1, #255	; 0xff
   18ad0:	0018      	movs	r0, r3
   18ad2:	4b48      	ldr	r3, [pc, #288]	; (18bf4 <SubscribeHandlerGameTopic+0x134>)
   18ad4:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
   18ad6:	687b      	ldr	r3, [r7, #4]
   18ad8:	681b      	ldr	r3, [r3, #0]
   18ada:	689b      	ldr	r3, [r3, #8]
   18adc:	4946      	ldr	r1, [pc, #280]	; (18bf8 <SubscribeHandlerGameTopic+0x138>)
   18ade:	2209      	movs	r2, #9
   18ae0:	0018      	movs	r0, r3
   18ae2:	4b46      	ldr	r3, [pc, #280]	; (18bfc <SubscribeHandlerGameTopic+0x13c>)
   18ae4:	4798      	blx	r3
   18ae6:	1e03      	subs	r3, r0, #0
   18ae8:	d166      	bne.n	18bb8 <SubscribeHandlerGameTopic+0xf8>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
   18aea:	4b45      	ldr	r3, [pc, #276]	; (18c00 <SubscribeHandlerGameTopic+0x140>)
   18aec:	0019      	movs	r1, r3
   18aee:	2001      	movs	r0, #1
   18af0:	4b44      	ldr	r3, [pc, #272]	; (18c04 <SubscribeHandlerGameTopic+0x144>)
   18af2:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   18af4:	687b      	ldr	r3, [r7, #4]
   18af6:	685b      	ldr	r3, [r3, #4]
   18af8:	685a      	ldr	r2, [r3, #4]
   18afa:	687b      	ldr	r3, [r7, #4]
   18afc:	685b      	ldr	r3, [r3, #4]
   18afe:	689b      	ldr	r3, [r3, #8]
   18b00:	4941      	ldr	r1, [pc, #260]	; (18c08 <SubscribeHandlerGameTopic+0x148>)
   18b02:	2001      	movs	r0, #1
   18b04:	4c3f      	ldr	r4, [pc, #252]	; (18c04 <SubscribeHandlerGameTopic+0x144>)
   18b06:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   18b08:	687b      	ldr	r3, [r7, #4]
   18b0a:	681b      	ldr	r3, [r3, #0]
   18b0c:	68da      	ldr	r2, [r3, #12]
   18b0e:	687b      	ldr	r3, [r7, #4]
   18b10:	681b      	ldr	r3, [r3, #0]
   18b12:	689b      	ldr	r3, [r3, #8]
   18b14:	493d      	ldr	r1, [pc, #244]	; (18c0c <SubscribeHandlerGameTopic+0x14c>)
   18b16:	2001      	movs	r0, #1
   18b18:	4c3a      	ldr	r4, [pc, #232]	; (18c04 <SubscribeHandlerGameTopic+0x144>)
   18b1a:	47a0      	blx	r4

        int nb = 0;
   18b1c:	2300      	movs	r3, #0
   18b1e:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
   18b20:	687b      	ldr	r3, [r7, #4]
   18b22:	681b      	ldr	r3, [r3, #0]
   18b24:	689b      	ldr	r3, [r3, #8]
   18b26:	3309      	adds	r3, #9
   18b28:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   18b2a:	e015      	b.n	18b58 <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
   18b2c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   18b2e:	1c63      	adds	r3, r4, #1
   18b30:	627b      	str	r3, [r7, #36]	; 0x24
   18b32:	68bb      	ldr	r3, [r7, #8]
   18b34:	2208      	movs	r2, #8
   18b36:	18b9      	adds	r1, r7, r2
   18b38:	220a      	movs	r2, #10
   18b3a:	0018      	movs	r0, r3
   18b3c:	4b34      	ldr	r3, [pc, #208]	; (18c10 <SubscribeHandlerGameTopic+0x150>)
   18b3e:	4798      	blx	r3
   18b40:	0003      	movs	r3, r0
   18b42:	b2da      	uxtb	r2, r3
   18b44:	230c      	movs	r3, #12
   18b46:	18fb      	adds	r3, r7, r3
   18b48:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   18b4a:	68bb      	ldr	r3, [r7, #8]
   18b4c:	781b      	ldrb	r3, [r3, #0]
   18b4e:	2b2c      	cmp	r3, #44	; 0x2c
   18b50:	d10a      	bne.n	18b68 <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
   18b52:	68bb      	ldr	r3, [r7, #8]
   18b54:	3301      	adds	r3, #1
   18b56:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   18b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18b5a:	2b13      	cmp	r3, #19
   18b5c:	dc05      	bgt.n	18b6a <SubscribeHandlerGameTopic+0xaa>
   18b5e:	68bb      	ldr	r3, [r7, #8]
   18b60:	781b      	ldrb	r3, [r3, #0]
   18b62:	2b00      	cmp	r3, #0
   18b64:	d1e2      	bne.n	18b2c <SubscribeHandlerGameTopic+0x6c>
   18b66:	e000      	b.n	18b6a <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
   18b68:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
   18b6a:	4b2a      	ldr	r3, [pc, #168]	; (18c14 <SubscribeHandlerGameTopic+0x154>)
   18b6c:	0019      	movs	r1, r3
   18b6e:	2001      	movs	r0, #1
   18b70:	4b24      	ldr	r3, [pc, #144]	; (18c04 <SubscribeHandlerGameTopic+0x144>)
   18b72:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   18b74:	2300      	movs	r3, #0
   18b76:	623b      	str	r3, [r7, #32]
   18b78:	e00d      	b.n	18b96 <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
   18b7a:	230c      	movs	r3, #12
   18b7c:	18fa      	adds	r2, r7, r3
   18b7e:	6a3b      	ldr	r3, [r7, #32]
   18b80:	18d3      	adds	r3, r2, r3
   18b82:	781b      	ldrb	r3, [r3, #0]
   18b84:	001a      	movs	r2, r3
   18b86:	4b24      	ldr	r3, [pc, #144]	; (18c18 <SubscribeHandlerGameTopic+0x158>)
   18b88:	0019      	movs	r1, r3
   18b8a:	2001      	movs	r0, #1
   18b8c:	4b1d      	ldr	r3, [pc, #116]	; (18c04 <SubscribeHandlerGameTopic+0x144>)
   18b8e:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   18b90:	6a3b      	ldr	r3, [r7, #32]
   18b92:	3301      	adds	r3, #1
   18b94:	623b      	str	r3, [r7, #32]
   18b96:	6a3b      	ldr	r3, [r7, #32]
   18b98:	2b13      	cmp	r3, #19
   18b9a:	ddee      	ble.n	18b7a <SubscribeHandlerGameTopic+0xba>
        }

        if (pdTRUE == ControlAddGameData(&game)) {
   18b9c:	230c      	movs	r3, #12
   18b9e:	18fb      	adds	r3, r7, r3
   18ba0:	0018      	movs	r0, r3
   18ba2:	4b1e      	ldr	r3, [pc, #120]	; (18c1c <SubscribeHandlerGameTopic+0x15c>)
   18ba4:	4798      	blx	r3
   18ba6:	0003      	movs	r3, r0
   18ba8:	2b01      	cmp	r3, #1
   18baa:	d11e      	bne.n	18bea <SubscribeHandlerGameTopic+0x12a>
            LogMessage(LOG_DEBUG_LVL, "\r\nSent play to control!\r\n");
   18bac:	4b1c      	ldr	r3, [pc, #112]	; (18c20 <SubscribeHandlerGameTopic+0x160>)
   18bae:	0019      	movs	r1, r3
   18bb0:	2001      	movs	r0, #1
   18bb2:	4b14      	ldr	r3, [pc, #80]	; (18c04 <SubscribeHandlerGameTopic+0x144>)
   18bb4:	4798      	blx	r3
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
   18bb6:	e018      	b.n	18bea <SubscribeHandlerGameTopic+0x12a>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
   18bb8:	4b1a      	ldr	r3, [pc, #104]	; (18c24 <SubscribeHandlerGameTopic+0x164>)
   18bba:	0019      	movs	r1, r3
   18bbc:	2001      	movs	r0, #1
   18bbe:	4b11      	ldr	r3, [pc, #68]	; (18c04 <SubscribeHandlerGameTopic+0x144>)
   18bc0:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   18bc2:	687b      	ldr	r3, [r7, #4]
   18bc4:	685b      	ldr	r3, [r3, #4]
   18bc6:	685a      	ldr	r2, [r3, #4]
   18bc8:	687b      	ldr	r3, [r7, #4]
   18bca:	685b      	ldr	r3, [r3, #4]
   18bcc:	689b      	ldr	r3, [r3, #8]
   18bce:	490e      	ldr	r1, [pc, #56]	; (18c08 <SubscribeHandlerGameTopic+0x148>)
   18bd0:	2001      	movs	r0, #1
   18bd2:	4c0c      	ldr	r4, [pc, #48]	; (18c04 <SubscribeHandlerGameTopic+0x144>)
   18bd4:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   18bd6:	687b      	ldr	r3, [r7, #4]
   18bd8:	681b      	ldr	r3, [r3, #0]
   18bda:	68da      	ldr	r2, [r3, #12]
   18bdc:	687b      	ldr	r3, [r7, #4]
   18bde:	681b      	ldr	r3, [r3, #0]
   18be0:	689b      	ldr	r3, [r3, #8]
   18be2:	490a      	ldr	r1, [pc, #40]	; (18c0c <SubscribeHandlerGameTopic+0x14c>)
   18be4:	2001      	movs	r0, #1
   18be6:	4c07      	ldr	r4, [pc, #28]	; (18c04 <SubscribeHandlerGameTopic+0x144>)
   18be8:	47a0      	blx	r4
}
   18bea:	46c0      	nop			; (mov r8, r8)
   18bec:	46bd      	mov	sp, r7
   18bee:	b00b      	add	sp, #44	; 0x2c
   18bf0:	bd90      	pop	{r4, r7, pc}
   18bf2:	46c0      	nop			; (mov r8, r8)
   18bf4:	00036c9f 	.word	0x00036c9f
   18bf8:	00038eb0 	.word	0x00038eb0
   18bfc:	00037065 	.word	0x00037065
   18c00:	00038ebc 	.word	0x00038ebc
   18c04:	0001ffe1 	.word	0x0001ffe1
   18c08:	00038e8c 	.word	0x00038e8c
   18c0c:	00038ed8 	.word	0x00038ed8
   18c10:	00037211 	.word	0x00037211
   18c14:	00038ee0 	.word	0x00038ee0
   18c18:	00038ef4 	.word	0x00038ef4
   18c1c:	00015499 	.word	0x00015499
   18c20:	00038ef8 	.word	0x00038ef8
   18c24:	00038f14 	.word	0x00038f14

00018c28 <SubscribeHandlerImuTopic>:

void SubscribeHandlerImuTopic(MessageData *msgData)
{
   18c28:	b590      	push	{r4, r7, lr}
   18c2a:	b083      	sub	sp, #12
   18c2c:	af00      	add	r7, sp, #0
   18c2e:	6078      	str	r0, [r7, #4]
	LogMessage(LOG_DEBUG_LVL, "\r\nIMU topic received!\r\n");
   18c30:	4b09      	ldr	r3, [pc, #36]	; (18c58 <SubscribeHandlerImuTopic+0x30>)
   18c32:	0019      	movs	r1, r3
   18c34:	2001      	movs	r0, #1
   18c36:	4b09      	ldr	r3, [pc, #36]	; (18c5c <SubscribeHandlerImuTopic+0x34>)
   18c38:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   18c3a:	687b      	ldr	r3, [r7, #4]
   18c3c:	685b      	ldr	r3, [r3, #4]
   18c3e:	685a      	ldr	r2, [r3, #4]
   18c40:	687b      	ldr	r3, [r7, #4]
   18c42:	685b      	ldr	r3, [r3, #4]
   18c44:	689b      	ldr	r3, [r3, #8]
   18c46:	4906      	ldr	r1, [pc, #24]	; (18c60 <SubscribeHandlerImuTopic+0x38>)
   18c48:	2001      	movs	r0, #1
   18c4a:	4c04      	ldr	r4, [pc, #16]	; (18c5c <SubscribeHandlerImuTopic+0x34>)
   18c4c:	47a0      	blx	r4
}
   18c4e:	46c0      	nop			; (mov r8, r8)
   18c50:	46bd      	mov	sp, r7
   18c52:	b003      	add	sp, #12
   18c54:	bd90      	pop	{r4, r7, pc}
   18c56:	46c0      	nop			; (mov r8, r8)
   18c58:	00038f44 	.word	0x00038f44
   18c5c:	0001ffe1 	.word	0x0001ffe1
   18c60:	00038e8c 	.word	0x00038e8c

00018c64 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   18c64:	b590      	push	{r4, r7, lr}
   18c66:	b08b      	sub	sp, #44	; 0x2c
   18c68:	af06      	add	r7, sp, #24
   18c6a:	60f8      	str	r0, [r7, #12]
   18c6c:	60b9      	str	r1, [r7, #8]
   18c6e:	607a      	str	r2, [r7, #4]
    switch (type) {
   18c70:	68bb      	ldr	r3, [r7, #8]
   18c72:	2b01      	cmp	r3, #1
   18c74:	d03b      	beq.n	18cee <mqtt_callback+0x8a>
   18c76:	2b05      	cmp	r3, #5
   18c78:	d05e      	beq.n	18d38 <mqtt_callback+0xd4>
   18c7a:	2b00      	cmp	r3, #0
   18c7c:	d000      	beq.n	18c80 <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   18c7e:	e061      	b.n	18d44 <mqtt_callback+0xe0>
            if (data->sock_connected.result >= 0) {
   18c80:	687b      	ldr	r3, [r7, #4]
   18c82:	681b      	ldr	r3, [r3, #0]
   18c84:	2b00      	cmp	r3, #0
   18c86:	db25      	blt.n	18cd4 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   18c88:	4b30      	ldr	r3, [pc, #192]	; (18d4c <mqtt_callback+0xe8>)
   18c8a:	0019      	movs	r1, r3
   18c8c:	2001      	movs	r0, #1
   18c8e:	4b30      	ldr	r3, [pc, #192]	; (18d50 <mqtt_callback+0xec>)
   18c90:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   18c92:	4930      	ldr	r1, [pc, #192]	; (18d54 <mqtt_callback+0xf0>)
   18c94:	4a30      	ldr	r2, [pc, #192]	; (18d58 <mqtt_callback+0xf4>)
   18c96:	68f8      	ldr	r0, [r7, #12]
   18c98:	2300      	movs	r3, #0
   18c9a:	9305      	str	r3, [sp, #20]
   18c9c:	2300      	movs	r3, #0
   18c9e:	9304      	str	r3, [sp, #16]
   18ca0:	2300      	movs	r3, #0
   18ca2:	9303      	str	r3, [sp, #12]
   18ca4:	2300      	movs	r3, #0
   18ca6:	9302      	str	r3, [sp, #8]
   18ca8:	2300      	movs	r3, #0
   18caa:	9301      	str	r3, [sp, #4]
   18cac:	4b2a      	ldr	r3, [pc, #168]	; (18d58 <mqtt_callback+0xf4>)
   18cae:	9300      	str	r3, [sp, #0]
   18cb0:	000b      	movs	r3, r1
   18cb2:	2101      	movs	r1, #1
   18cb4:	4c29      	ldr	r4, [pc, #164]	; (18d5c <mqtt_callback+0xf8>)
   18cb6:	47a0      	blx	r4
   18cb8:	1e03      	subs	r3, r0, #0
   18cba:	d005      	beq.n	18cc8 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   18cbc:	4b28      	ldr	r3, [pc, #160]	; (18d60 <mqtt_callback+0xfc>)
   18cbe:	0019      	movs	r1, r3
   18cc0:	2001      	movs	r0, #1
   18cc2:	4b23      	ldr	r3, [pc, #140]	; (18d50 <mqtt_callback+0xec>)
   18cc4:	4798      	blx	r3
        } break;
   18cc6:	e03d      	b.n	18d44 <mqtt_callback+0xe0>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   18cc8:	4b26      	ldr	r3, [pc, #152]	; (18d64 <mqtt_callback+0x100>)
   18cca:	0019      	movs	r1, r3
   18ccc:	2001      	movs	r0, #1
   18cce:	4b20      	ldr	r3, [pc, #128]	; (18d50 <mqtt_callback+0xec>)
   18cd0:	4798      	blx	r3
        } break;
   18cd2:	e037      	b.n	18d44 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   18cd4:	4a24      	ldr	r2, [pc, #144]	; (18d68 <mqtt_callback+0x104>)
   18cd6:	4b25      	ldr	r3, [pc, #148]	; (18d6c <mqtt_callback+0x108>)
   18cd8:	0019      	movs	r1, r3
   18cda:	2001      	movs	r0, #1
   18cdc:	4b1c      	ldr	r3, [pc, #112]	; (18d50 <mqtt_callback+0xec>)
   18cde:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   18ce0:	4a21      	ldr	r2, [pc, #132]	; (18d68 <mqtt_callback+0x104>)
   18ce2:	68fb      	ldr	r3, [r7, #12]
   18ce4:	0011      	movs	r1, r2
   18ce6:	0018      	movs	r0, r3
   18ce8:	4b21      	ldr	r3, [pc, #132]	; (18d70 <mqtt_callback+0x10c>)
   18cea:	4798      	blx	r3
        } break;
   18cec:	e02a      	b.n	18d44 <mqtt_callback+0xe0>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   18cee:	687b      	ldr	r3, [r7, #4]
   18cf0:	781b      	ldrb	r3, [r3, #0]
   18cf2:	2b00      	cmp	r3, #0
   18cf4:	d117      	bne.n	18d26 <mqtt_callback+0xc2>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   18cf6:	4b1f      	ldr	r3, [pc, #124]	; (18d74 <mqtt_callback+0x110>)
   18cf8:	491f      	ldr	r1, [pc, #124]	; (18d78 <mqtt_callback+0x114>)
   18cfa:	68f8      	ldr	r0, [r7, #12]
   18cfc:	2202      	movs	r2, #2
   18cfe:	4c1f      	ldr	r4, [pc, #124]	; (18d7c <mqtt_callback+0x118>)
   18d00:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   18d02:	4b1f      	ldr	r3, [pc, #124]	; (18d80 <mqtt_callback+0x11c>)
   18d04:	491f      	ldr	r1, [pc, #124]	; (18d84 <mqtt_callback+0x120>)
   18d06:	68f8      	ldr	r0, [r7, #12]
   18d08:	2202      	movs	r2, #2
   18d0a:	4c1c      	ldr	r4, [pc, #112]	; (18d7c <mqtt_callback+0x118>)
   18d0c:	47a0      	blx	r4
                mqtt_subscribe(module_inst, IMU_TOPIC, 2, SubscribeHandlerImuTopic);
   18d0e:	4b1e      	ldr	r3, [pc, #120]	; (18d88 <mqtt_callback+0x124>)
   18d10:	491e      	ldr	r1, [pc, #120]	; (18d8c <mqtt_callback+0x128>)
   18d12:	68f8      	ldr	r0, [r7, #12]
   18d14:	2202      	movs	r2, #2
   18d16:	4c19      	ldr	r4, [pc, #100]	; (18d7c <mqtt_callback+0x118>)
   18d18:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   18d1a:	4b1d      	ldr	r3, [pc, #116]	; (18d90 <mqtt_callback+0x12c>)
   18d1c:	0019      	movs	r1, r3
   18d1e:	2001      	movs	r0, #1
   18d20:	4b0b      	ldr	r3, [pc, #44]	; (18d50 <mqtt_callback+0xec>)
   18d22:	4798      	blx	r3
            break;
   18d24:	e00e      	b.n	18d44 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   18d26:	687b      	ldr	r3, [r7, #4]
   18d28:	781b      	ldrb	r3, [r3, #0]
   18d2a:	001a      	movs	r2, r3
   18d2c:	4b19      	ldr	r3, [pc, #100]	; (18d94 <mqtt_callback+0x130>)
   18d2e:	0019      	movs	r1, r3
   18d30:	2001      	movs	r0, #1
   18d32:	4b07      	ldr	r3, [pc, #28]	; (18d50 <mqtt_callback+0xec>)
   18d34:	4798      	blx	r3
            break;
   18d36:	e005      	b.n	18d44 <mqtt_callback+0xe0>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   18d38:	4b17      	ldr	r3, [pc, #92]	; (18d98 <mqtt_callback+0x134>)
   18d3a:	0019      	movs	r1, r3
   18d3c:	2001      	movs	r0, #1
   18d3e:	4b04      	ldr	r3, [pc, #16]	; (18d50 <mqtt_callback+0xec>)
   18d40:	4798      	blx	r3
            break;
   18d42:	46c0      	nop			; (mov r8, r8)
}
   18d44:	46c0      	nop			; (mov r8, r8)
   18d46:	46bd      	mov	sp, r7
   18d48:	b005      	add	sp, #20
   18d4a:	bd90      	pop	{r4, r7, pc}
   18d4c:	00038fa8 	.word	0x00038fa8
   18d50:	0001ffe1 	.word	0x0001ffe1
   18d54:	00038fc4 	.word	0x00038fc4
   18d58:	00038fd4 	.word	0x00038fd4
   18d5c:	000315cd 	.word	0x000315cd
   18d60:	00038fe0 	.word	0x00038fe0
   18d64:	00039008 	.word	0x00039008
   18d68:	00038910 	.word	0x00038910
   18d6c:	00039024 	.word	0x00039024
   18d70:	00031585 	.word	0x00031585
   18d74:	00018ac1 	.word	0x00018ac1
   18d78:	0003905c 	.word	0x0003905c
   18d7c:	0003176d 	.word	0x0003176d
   18d80:	000189cd 	.word	0x000189cd
   18d84:	00038f84 	.word	0x00038f84
   18d88:	00018c29 	.word	0x00018c29
   18d8c:	00039070 	.word	0x00039070
   18d90:	00039084 	.word	0x00039084
   18d94:	00039098 	.word	0x00039098
   18d98:	000390cc 	.word	0x000390cc

00018d9c <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   18d9c:	b580      	push	{r7, lr}
   18d9e:	b088      	sub	sp, #32
   18da0:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   18da2:	1d3b      	adds	r3, r7, #4
   18da4:	0018      	movs	r0, r3
   18da6:	4b1f      	ldr	r3, [pc, #124]	; (18e24 <configure_mqtt+0x88>)
   18da8:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   18daa:	1d3b      	adds	r3, r7, #4
   18dac:	4a1e      	ldr	r2, [pc, #120]	; (18e28 <configure_mqtt+0x8c>)
   18dae:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   18db0:	1d3b      	adds	r3, r7, #4
   18db2:	2280      	movs	r2, #128	; 0x80
   18db4:	0092      	lsls	r2, r2, #2
   18db6:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   18db8:	1d3b      	adds	r3, r7, #4
   18dba:	4a1c      	ldr	r2, [pc, #112]	; (18e2c <configure_mqtt+0x90>)
   18dbc:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   18dbe:	1d3b      	adds	r3, r7, #4
   18dc0:	2280      	movs	r2, #128	; 0x80
   18dc2:	0092      	lsls	r2, r2, #2
   18dc4:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   18dc6:	1d3b      	adds	r3, r7, #4
   18dc8:	4a19      	ldr	r2, [pc, #100]	; (18e30 <configure_mqtt+0x94>)
   18dca:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   18dcc:	1d3b      	adds	r3, r7, #4
   18dce:	4a19      	ldr	r2, [pc, #100]	; (18e34 <configure_mqtt+0x98>)
   18dd0:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   18dd2:	1d3a      	adds	r2, r7, #4
   18dd4:	4b18      	ldr	r3, [pc, #96]	; (18e38 <configure_mqtt+0x9c>)
   18dd6:	0011      	movs	r1, r2
   18dd8:	0018      	movs	r0, r3
   18dda:	4b18      	ldr	r3, [pc, #96]	; (18e3c <configure_mqtt+0xa0>)
   18ddc:	4798      	blx	r3
   18dde:	0003      	movs	r3, r0
   18de0:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   18de2:	69fb      	ldr	r3, [r7, #28]
   18de4:	2b00      	cmp	r3, #0
   18de6:	da06      	bge.n	18df6 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   18de8:	69fa      	ldr	r2, [r7, #28]
   18dea:	4b15      	ldr	r3, [pc, #84]	; (18e40 <configure_mqtt+0xa4>)
   18dec:	0019      	movs	r1, r3
   18dee:	2001      	movs	r0, #1
   18df0:	4b14      	ldr	r3, [pc, #80]	; (18e44 <configure_mqtt+0xa8>)
   18df2:	4798      	blx	r3
        while (1) {
   18df4:	e7fe      	b.n	18df4 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   18df6:	4a14      	ldr	r2, [pc, #80]	; (18e48 <configure_mqtt+0xac>)
   18df8:	4b0f      	ldr	r3, [pc, #60]	; (18e38 <configure_mqtt+0x9c>)
   18dfa:	0011      	movs	r1, r2
   18dfc:	0018      	movs	r0, r3
   18dfe:	4b13      	ldr	r3, [pc, #76]	; (18e4c <configure_mqtt+0xb0>)
   18e00:	4798      	blx	r3
   18e02:	0003      	movs	r3, r0
   18e04:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   18e06:	69fb      	ldr	r3, [r7, #28]
   18e08:	2b00      	cmp	r3, #0
   18e0a:	da06      	bge.n	18e1a <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   18e0c:	69fa      	ldr	r2, [r7, #28]
   18e0e:	4b10      	ldr	r3, [pc, #64]	; (18e50 <configure_mqtt+0xb4>)
   18e10:	0019      	movs	r1, r3
   18e12:	2001      	movs	r0, #1
   18e14:	4b0b      	ldr	r3, [pc, #44]	; (18e44 <configure_mqtt+0xa8>)
   18e16:	4798      	blx	r3
        while (1) {
   18e18:	e7fe      	b.n	18e18 <configure_mqtt+0x7c>
        }
    }
}
   18e1a:	46c0      	nop			; (mov r8, r8)
   18e1c:	46bd      	mov	sp, r7
   18e1e:	b008      	add	sp, #32
   18e20:	bd80      	pop	{r7, pc}
   18e22:	46c0      	nop			; (mov r8, r8)
   18e24:	000314c5 	.word	0x000314c5
   18e28:	20000520 	.word	0x20000520
   18e2c:	20000720 	.word	0x20000720
   18e30:	0000075b 	.word	0x0000075b
   18e34:	00001770 	.word	0x00001770
   18e38:	200004e8 	.word	0x200004e8
   18e3c:	00031415 	.word	0x00031415
   18e40:	000390e0 	.word	0x000390e0
   18e44:	0001ffe1 	.word	0x0001ffe1
   18e48:	00018c65 	.word	0x00018c65
   18e4c:	00031505 	.word	0x00031505
   18e50:	00039114 	.word	0x00039114

00018e54 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   18e54:	b580      	push	{r7, lr}
   18e56:	b084      	sub	sp, #16
   18e58:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   18e5a:	1d3b      	adds	r3, r7, #4
   18e5c:	0018      	movs	r0, r3
   18e5e:	4b0b      	ldr	r3, [pc, #44]	; (18e8c <configure_extint_channel+0x38>)
   18e60:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   18e62:	1d3b      	adds	r3, r7, #4
   18e64:	2237      	movs	r2, #55	; 0x37
   18e66:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   18e68:	1d3b      	adds	r3, r7, #4
   18e6a:	2200      	movs	r2, #0
   18e6c:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   18e6e:	1d3b      	adds	r3, r7, #4
   18e70:	2201      	movs	r2, #1
   18e72:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   18e74:	1d3b      	adds	r3, r7, #4
   18e76:	2202      	movs	r2, #2
   18e78:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   18e7a:	1d3b      	adds	r3, r7, #4
   18e7c:	0019      	movs	r1, r3
   18e7e:	2007      	movs	r0, #7
   18e80:	4b03      	ldr	r3, [pc, #12]	; (18e90 <configure_extint_channel+0x3c>)
   18e82:	4798      	blx	r3
}
   18e84:	46c0      	nop			; (mov r8, r8)
   18e86:	46bd      	mov	sp, r7
   18e88:	b004      	add	sp, #16
   18e8a:	bd80      	pop	{r7, pc}
   18e8c:	000285f9 	.word	0x000285f9
   18e90:	0002862d 	.word	0x0002862d

00018e94 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   18e94:	b580      	push	{r7, lr}
   18e96:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   18e98:	4b06      	ldr	r3, [pc, #24]	; (18eb4 <configure_extint_callbacks+0x20>)
   18e9a:	2200      	movs	r2, #0
   18e9c:	2107      	movs	r1, #7
   18e9e:	0018      	movs	r0, r3
   18ea0:	4b05      	ldr	r3, [pc, #20]	; (18eb8 <configure_extint_callbacks+0x24>)
   18ea2:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   18ea4:	2100      	movs	r1, #0
   18ea6:	2007      	movs	r0, #7
   18ea8:	4b04      	ldr	r3, [pc, #16]	; (18ebc <configure_extint_callbacks+0x28>)
   18eaa:	4798      	blx	r3
}
   18eac:	46c0      	nop			; (mov r8, r8)
   18eae:	46bd      	mov	sp, r7
   18eb0:	bd80      	pop	{r7, pc}
   18eb2:	46c0      	nop			; (mov r8, r8)
   18eb4:	00018ec1 	.word	0x00018ec1
   18eb8:	000281f9 	.word	0x000281f9
   18ebc:	0002825d 	.word	0x0002825d

00018ec0 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   18ec0:	b5b0      	push	{r4, r5, r7, lr}
   18ec2:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   18ec4:	4b0c      	ldr	r3, [pc, #48]	; (18ef8 <extint_detection_callback+0x38>)
   18ec6:	681b      	ldr	r3, [r3, #0]
   18ec8:	1c5a      	adds	r2, r3, #1
   18eca:	4b0b      	ldr	r3, [pc, #44]	; (18ef8 <extint_detection_callback+0x38>)
   18ecc:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   18ece:	4b0a      	ldr	r3, [pc, #40]	; (18ef8 <extint_detection_callback+0x38>)
   18ed0:	681b      	ldr	r3, [r3, #0]
   18ed2:	2b28      	cmp	r3, #40	; 0x28
   18ed4:	d902      	bls.n	18edc <extint_detection_callback+0x1c>
   18ed6:	4b08      	ldr	r3, [pc, #32]	; (18ef8 <extint_detection_callback+0x38>)
   18ed8:	2201      	movs	r2, #1
   18eda:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   18edc:	4b06      	ldr	r3, [pc, #24]	; (18ef8 <extint_detection_callback+0x38>)
   18ede:	681b      	ldr	r3, [r3, #0]
   18ee0:	4a06      	ldr	r2, [pc, #24]	; (18efc <extint_detection_callback+0x3c>)
   18ee2:	4807      	ldr	r0, [pc, #28]	; (18f00 <extint_detection_callback+0x40>)
   18ee4:	213f      	movs	r1, #63	; 0x3f
   18ee6:	4c07      	ldr	r4, [pc, #28]	; (18f04 <extint_detection_callback+0x44>)
   18ee8:	47a0      	blx	r4
    isPressed = true;
   18eea:	4b07      	ldr	r3, [pc, #28]	; (18f08 <extint_detection_callback+0x48>)
   18eec:	2201      	movs	r2, #1
   18eee:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   18ef0:	46c0      	nop			; (mov r8, r8)
   18ef2:	46bd      	mov	sp, r7
   18ef4:	bdb0      	pop	{r4, r5, r7, pc}
   18ef6:	46c0      	nop			; (mov r8, r8)
   18ef8:	200000a4 	.word	0x200000a4
   18efc:	00039148 	.word	0x00039148
   18f00:	20000064 	.word	0x20000064
   18f04:	00036ef9 	.word	0x00036ef9
   18f08:	20000920 	.word	0x20000920

00018f0c <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   18f0c:	b580      	push	{r7, lr}
   18f0e:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   18f10:	4a15      	ldr	r2, [pc, #84]	; (18f68 <HTTP_DownloadFileInit+0x5c>)
   18f12:	4b16      	ldr	r3, [pc, #88]	; (18f6c <HTTP_DownloadFileInit+0x60>)
   18f14:	0011      	movs	r1, r2
   18f16:	0018      	movs	r0, r3
   18f18:	4b15      	ldr	r3, [pc, #84]	; (18f70 <HTTP_DownloadFileInit+0x64>)
   18f1a:	4798      	blx	r3
   18f1c:	1e03      	subs	r3, r0, #0
   18f1e:	d008      	beq.n	18f32 <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   18f20:	4b14      	ldr	r3, [pc, #80]	; (18f74 <HTTP_DownloadFileInit+0x68>)
   18f22:	0019      	movs	r1, r3
   18f24:	2001      	movs	r0, #1
   18f26:	4b14      	ldr	r3, [pc, #80]	; (18f78 <HTTP_DownloadFileInit+0x6c>)
   18f28:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   18f2a:	e002      	b.n	18f32 <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   18f2c:	2000      	movs	r0, #0
   18f2e:	4b13      	ldr	r3, [pc, #76]	; (18f7c <HTTP_DownloadFileInit+0x70>)
   18f30:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   18f32:	4b0e      	ldr	r3, [pc, #56]	; (18f6c <HTTP_DownloadFileInit+0x60>)
   18f34:	2234      	movs	r2, #52	; 0x34
   18f36:	5c9b      	ldrb	r3, [r3, r2]
   18f38:	2b00      	cmp	r3, #0
   18f3a:	d1f7      	bne.n	18f2c <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   18f3c:	4b10      	ldr	r3, [pc, #64]	; (18f80 <HTTP_DownloadFileInit+0x74>)
   18f3e:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   18f40:	4b10      	ldr	r3, [pc, #64]	; (18f84 <HTTP_DownloadFileInit+0x78>)
   18f42:	2201      	movs	r2, #1
   18f44:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   18f46:	4a10      	ldr	r2, [pc, #64]	; (18f88 <HTTP_DownloadFileInit+0x7c>)
   18f48:	4b10      	ldr	r3, [pc, #64]	; (18f8c <HTTP_DownloadFileInit+0x80>)
   18f4a:	0011      	movs	r1, r2
   18f4c:	0018      	movs	r0, r3
   18f4e:	4b10      	ldr	r3, [pc, #64]	; (18f90 <HTTP_DownloadFileInit+0x84>)
   18f50:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   18f52:	4b10      	ldr	r3, [pc, #64]	; (18f94 <HTTP_DownloadFileInit+0x88>)
   18f54:	4798      	blx	r3

    start_download();
   18f56:	4b10      	ldr	r3, [pc, #64]	; (18f98 <HTTP_DownloadFileInit+0x8c>)
   18f58:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   18f5a:	4b10      	ldr	r3, [pc, #64]	; (18f9c <HTTP_DownloadFileInit+0x90>)
   18f5c:	2203      	movs	r2, #3
   18f5e:	701a      	strb	r2, [r3, #0]
}
   18f60:	46c0      	nop			; (mov r8, r8)
   18f62:	46bd      	mov	sp, r7
   18f64:	bd80      	pop	{r7, pc}
   18f66:	46c0      	nop			; (mov r8, r8)
   18f68:	00038910 	.word	0x00038910
   18f6c:	200004e8 	.word	0x200004e8
   18f70:	000316b9 	.word	0x000316b9
   18f74:	00038d14 	.word	0x00038d14
   18f78:	0001ffe1 	.word	0x0001ffe1
   18f7c:	00023ce9 	.word	0x00023ce9
   18f80:	000272a5 	.word	0x000272a5
   18f84:	200004b8 	.word	0x200004b8
   18f88:	00018701 	.word	0x00018701
   18f8c:	000186cd 	.word	0x000186cd
   18f90:	000272ed 	.word	0x000272ed
   18f94:	00027255 	.word	0x00027255
   18f98:	000182f5 	.word	0x000182f5
   18f9c:	200004a5 	.word	0x200004a5

00018fa0 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   18fa0:	b590      	push	{r4, r7, lr}
   18fa2:	b085      	sub	sp, #20
   18fa4:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   18fa6:	e009      	b.n	18fbc <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   18fa8:	2000      	movs	r0, #0
   18faa:	4b2a      	ldr	r3, [pc, #168]	; (19054 <HTTP_DownloadFileTransaction+0xb4>)
   18fac:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   18fae:	4b2a      	ldr	r3, [pc, #168]	; (19058 <HTTP_DownloadFileTransaction+0xb8>)
   18fb0:	0018      	movs	r0, r3
   18fb2:	4b2a      	ldr	r3, [pc, #168]	; (1905c <HTTP_DownloadFileTransaction+0xbc>)
   18fb4:	4798      	blx	r3
        vTaskDelay(5);
   18fb6:	2005      	movs	r0, #5
   18fb8:	4b29      	ldr	r3, [pc, #164]	; (19060 <HTTP_DownloadFileTransaction+0xc0>)
   18fba:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   18fbc:	2010      	movs	r0, #16
   18fbe:	4b29      	ldr	r3, [pc, #164]	; (19064 <HTTP_DownloadFileTransaction+0xc4>)
   18fc0:	4798      	blx	r3
   18fc2:	0003      	movs	r3, r0
   18fc4:	001a      	movs	r2, r3
   18fc6:	2301      	movs	r3, #1
   18fc8:	4053      	eors	r3, r2
   18fca:	b2db      	uxtb	r3, r3
   18fcc:	2b00      	cmp	r3, #0
   18fce:	d009      	beq.n	18fe4 <HTTP_DownloadFileTransaction+0x44>
   18fd0:	2020      	movs	r0, #32
   18fd2:	4b24      	ldr	r3, [pc, #144]	; (19064 <HTTP_DownloadFileTransaction+0xc4>)
   18fd4:	4798      	blx	r3
   18fd6:	0003      	movs	r3, r0
   18fd8:	001a      	movs	r2, r3
   18fda:	2301      	movs	r3, #1
   18fdc:	4053      	eors	r3, r2
   18fde:	b2db      	uxtb	r3, r3
   18fe0:	2b00      	cmp	r3, #0
   18fe2:	d1e1      	bne.n	18fa8 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   18fe4:	4b20      	ldr	r3, [pc, #128]	; (19068 <HTTP_DownloadFileTransaction+0xc8>)
   18fe6:	4798      	blx	r3
    vTaskDelay(1000);
   18fe8:	23fa      	movs	r3, #250	; 0xfa
   18fea:	009b      	lsls	r3, r3, #2
   18fec:	0018      	movs	r0, r3
   18fee:	4b1c      	ldr	r3, [pc, #112]	; (19060 <HTTP_DownloadFileTransaction+0xc0>)
   18ff0:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   18ff2:	4b1e      	ldr	r3, [pc, #120]	; (1906c <HTTP_DownloadFileTransaction+0xcc>)
   18ff4:	2200      	movs	r2, #0
   18ff6:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   18ff8:	003b      	movs	r3, r7
   18ffa:	4a1d      	ldr	r2, [pc, #116]	; (19070 <HTTP_DownloadFileTransaction+0xd0>)
   18ffc:	ca13      	ldmia	r2!, {r0, r1, r4}
   18ffe:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   19000:	003b      	movs	r3, r7
   19002:	2230      	movs	r2, #48	; 0x30
   19004:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   19006:	230f      	movs	r3, #15
   19008:	18fc      	adds	r4, r7, r3
   1900a:	0039      	movs	r1, r7
   1900c:	4b19      	ldr	r3, [pc, #100]	; (19074 <HTTP_DownloadFileTransaction+0xd4>)
   1900e:	220a      	movs	r2, #10
   19010:	0018      	movs	r0, r3
   19012:	4b19      	ldr	r3, [pc, #100]	; (19078 <HTTP_DownloadFileTransaction+0xd8>)
   19014:	4798      	blx	r3
   19016:	0003      	movs	r3, r0
   19018:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   1901a:	230f      	movs	r3, #15
   1901c:	18fb      	adds	r3, r7, r3
   1901e:	781b      	ldrb	r3, [r3, #0]
   19020:	2b00      	cmp	r3, #0
   19022:	d008      	beq.n	19036 <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   19024:	230f      	movs	r3, #15
   19026:	18fb      	adds	r3, r7, r3
   19028:	781a      	ldrb	r2, [r3, #0]
   1902a:	4b14      	ldr	r3, [pc, #80]	; (1907c <HTTP_DownloadFileTransaction+0xdc>)
   1902c:	0019      	movs	r1, r3
   1902e:	2000      	movs	r0, #0
   19030:	4b13      	ldr	r3, [pc, #76]	; (19080 <HTTP_DownloadFileTransaction+0xe0>)
   19032:	4798      	blx	r3
   19034:	e003      	b.n	1903e <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   19036:	4b13      	ldr	r3, [pc, #76]	; (19084 <HTTP_DownloadFileTransaction+0xe4>)
   19038:	0018      	movs	r0, r3
   1903a:	4b13      	ldr	r3, [pc, #76]	; (19088 <HTTP_DownloadFileTransaction+0xe8>)
   1903c:	4798      	blx	r3
    }
	
	f_close(&file_object);
   1903e:	4b0d      	ldr	r3, [pc, #52]	; (19074 <HTTP_DownloadFileTransaction+0xd4>)
   19040:	0018      	movs	r0, r3
   19042:	4b12      	ldr	r3, [pc, #72]	; (1908c <HTTP_DownloadFileTransaction+0xec>)
   19044:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   19046:	4b12      	ldr	r3, [pc, #72]	; (19090 <HTTP_DownloadFileTransaction+0xf0>)
   19048:	2200      	movs	r2, #0
   1904a:	701a      	strb	r2, [r3, #0]
}
   1904c:	46c0      	nop			; (mov r8, r8)
   1904e:	46bd      	mov	sp, r7
   19050:	b005      	add	sp, #20
   19052:	bd90      	pop	{r4, r7, pc}
   19054:	00023ce9 	.word	0x00023ce9
   19058:	2000450c 	.word	0x2000450c
   1905c:	000343e1 	.word	0x000343e1
   19060:	0001e2a1 	.word	0x0001e2a1
   19064:	00017fcd 	.word	0x00017fcd
   19068:	000272a5 	.word	0x000272a5
   1906c:	200004b8 	.word	0x200004b8
   19070:	00039180 	.word	0x00039180
   19074:	200004bc 	.word	0x200004bc
   19078:	0002f6a9 	.word	0x0002f6a9
   1907c:	0003915c 	.word	0x0003915c
   19080:	0001ffe1 	.word	0x0001ffe1
   19084:	0003916c 	.word	0x0003916c
   19088:	0001fef5 	.word	0x0001fef5
   1908c:	000300a9 	.word	0x000300a9
   19090:	200004a5 	.word	0x200004a5

00019094 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   19094:	b580      	push	{r7, lr}
   19096:	af00      	add	r7, sp, #0
    socketDeinit();
   19098:	4b18      	ldr	r3, [pc, #96]	; (190fc <MQTT_InitRoutine+0x68>)
   1909a:	4798      	blx	r3
    configure_mqtt();
   1909c:	4b18      	ldr	r3, [pc, #96]	; (19100 <MQTT_InitRoutine+0x6c>)
   1909e:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   190a0:	4a18      	ldr	r2, [pc, #96]	; (19104 <MQTT_InitRoutine+0x70>)
   190a2:	4b19      	ldr	r3, [pc, #100]	; (19108 <MQTT_InitRoutine+0x74>)
   190a4:	0011      	movs	r1, r2
   190a6:	0018      	movs	r0, r3
   190a8:	4b18      	ldr	r3, [pc, #96]	; (1910c <MQTT_InitRoutine+0x78>)
   190aa:	4798      	blx	r3
    socketInit();
   190ac:	4b18      	ldr	r3, [pc, #96]	; (19110 <MQTT_InitRoutine+0x7c>)
   190ae:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   190b0:	4b18      	ldr	r3, [pc, #96]	; (19114 <MQTT_InitRoutine+0x80>)
   190b2:	2234      	movs	r2, #52	; 0x34
   190b4:	5c9b      	ldrb	r3, [r3, r2]
   190b6:	2201      	movs	r2, #1
   190b8:	4053      	eors	r3, r2
   190ba:	b2db      	uxtb	r3, r3
   190bc:	2b00      	cmp	r3, #0
   190be:	d00c      	beq.n	190da <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   190c0:	4a15      	ldr	r2, [pc, #84]	; (19118 <MQTT_InitRoutine+0x84>)
   190c2:	4b14      	ldr	r3, [pc, #80]	; (19114 <MQTT_InitRoutine+0x80>)
   190c4:	0011      	movs	r1, r2
   190c6:	0018      	movs	r0, r3
   190c8:	4b14      	ldr	r3, [pc, #80]	; (1911c <MQTT_InitRoutine+0x88>)
   190ca:	4798      	blx	r3
   190cc:	1e03      	subs	r3, r0, #0
   190ce:	d004      	beq.n	190da <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   190d0:	4b13      	ldr	r3, [pc, #76]	; (19120 <MQTT_InitRoutine+0x8c>)
   190d2:	0019      	movs	r1, r3
   190d4:	2001      	movs	r0, #1
   190d6:	4b13      	ldr	r3, [pc, #76]	; (19124 <MQTT_InitRoutine+0x90>)
   190d8:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   190da:	4b0e      	ldr	r3, [pc, #56]	; (19114 <MQTT_InitRoutine+0x80>)
   190dc:	2234      	movs	r2, #52	; 0x34
   190de:	5c9b      	ldrb	r3, [r3, r2]
   190e0:	2b00      	cmp	r3, #0
   190e2:	d004      	beq.n	190ee <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   190e4:	4b10      	ldr	r3, [pc, #64]	; (19128 <MQTT_InitRoutine+0x94>)
   190e6:	0019      	movs	r1, r3
   190e8:	2001      	movs	r0, #1
   190ea:	4b0e      	ldr	r3, [pc, #56]	; (19124 <MQTT_InitRoutine+0x90>)
   190ec:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   190ee:	4b0f      	ldr	r3, [pc, #60]	; (1912c <MQTT_InitRoutine+0x98>)
   190f0:	2201      	movs	r2, #1
   190f2:	701a      	strb	r2, [r3, #0]
}
   190f4:	46c0      	nop			; (mov r8, r8)
   190f6:	46bd      	mov	sp, r7
   190f8:	bd80      	pop	{r7, pc}
   190fa:	46c0      	nop			; (mov r8, r8)
   190fc:	000272a5 	.word	0x000272a5
   19100:	00018d9d 	.word	0x00018d9d
   19104:	000189a9 	.word	0x000189a9
   19108:	00018975 	.word	0x00018975
   1910c:	000272ed 	.word	0x000272ed
   19110:	00027255 	.word	0x00027255
   19114:	200004e8 	.word	0x200004e8
   19118:	00038910 	.word	0x00038910
   1911c:	00031585 	.word	0x00031585
   19120:	00038d14 	.word	0x00038d14
   19124:	0001ffe1 	.word	0x0001ffe1
   19128:	0003918c 	.word	0x0003918c
   1912c:	200004a5 	.word	0x200004a5

00019130 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   19130:	b580      	push	{r7, lr}
   19132:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   19134:	2000      	movs	r0, #0
   19136:	4b0b      	ldr	r3, [pc, #44]	; (19164 <MQTT_HandleTransactions+0x34>)
   19138:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   1913a:	4b0b      	ldr	r3, [pc, #44]	; (19168 <MQTT_HandleTransactions+0x38>)
   1913c:	0018      	movs	r0, r3
   1913e:	4b0b      	ldr	r3, [pc, #44]	; (1916c <MQTT_HandleTransactions+0x3c>)
   19140:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   19142:	4b0b      	ldr	r3, [pc, #44]	; (19170 <MQTT_HandleTransactions+0x40>)
   19144:	4798      	blx	r3
    MQTT_HandleImuMessages();
   19146:	4b0b      	ldr	r3, [pc, #44]	; (19174 <MQTT_HandleTransactions+0x44>)
   19148:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   1914a:	4b0b      	ldr	r3, [pc, #44]	; (19178 <MQTT_HandleTransactions+0x48>)
   1914c:	2234      	movs	r2, #52	; 0x34
   1914e:	5c9b      	ldrb	r3, [r3, r2]
   19150:	2b00      	cmp	r3, #0
   19152:	d004      	beq.n	1915e <MQTT_HandleTransactions+0x2e>
   19154:	4b08      	ldr	r3, [pc, #32]	; (19178 <MQTT_HandleTransactions+0x48>)
   19156:	2164      	movs	r1, #100	; 0x64
   19158:	0018      	movs	r0, r3
   1915a:	4b08      	ldr	r3, [pc, #32]	; (1917c <MQTT_HandleTransactions+0x4c>)
   1915c:	4798      	blx	r3
}
   1915e:	46c0      	nop			; (mov r8, r8)
   19160:	46bd      	mov	sp, r7
   19162:	bd80      	pop	{r7, pc}
   19164:	00023ce9 	.word	0x00023ce9
   19168:	2000450c 	.word	0x2000450c
   1916c:	000343e1 	.word	0x000343e1
   19170:	0001920d 	.word	0x0001920d
   19174:	00019181 	.word	0x00019181
   19178:	200004e8 	.word	0x200004e8
   1917c:	000317b5 	.word	0x000317b5

00019180 <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   19180:	b590      	push	{r4, r7, lr}
   19182:	b085      	sub	sp, #20
   19184:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   19186:	4b18      	ldr	r3, [pc, #96]	; (191e8 <MQTT_HandleImuMessages+0x68>)
   19188:	681b      	ldr	r3, [r3, #0]
   1918a:	0039      	movs	r1, r7
   1918c:	2200      	movs	r2, #0
   1918e:	0018      	movs	r0, r3
   19190:	4b16      	ldr	r3, [pc, #88]	; (191ec <MQTT_HandleImuMessages+0x6c>)
   19192:	4798      	blx	r3
   19194:	0003      	movs	r3, r0
   19196:	2b01      	cmp	r3, #1
   19198:	d121      	bne.n	191de <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   1919a:	003b      	movs	r3, r7
   1919c:	2200      	movs	r2, #0
   1919e:	5e9b      	ldrsh	r3, [r3, r2]
   191a0:	001c      	movs	r4, r3
   191a2:	003b      	movs	r3, r7
   191a4:	2202      	movs	r2, #2
   191a6:	5e9b      	ldrsh	r3, [r3, r2]
   191a8:	0019      	movs	r1, r3
   191aa:	003b      	movs	r3, r7
   191ac:	2204      	movs	r2, #4
   191ae:	5e9b      	ldrsh	r3, [r3, r2]
   191b0:	4a0f      	ldr	r2, [pc, #60]	; (191f0 <MQTT_HandleImuMessages+0x70>)
   191b2:	4810      	ldr	r0, [pc, #64]	; (191f4 <MQTT_HandleImuMessages+0x74>)
   191b4:	9301      	str	r3, [sp, #4]
   191b6:	9100      	str	r1, [sp, #0]
   191b8:	0023      	movs	r3, r4
   191ba:	213f      	movs	r1, #63	; 0x3f
   191bc:	4c0e      	ldr	r4, [pc, #56]	; (191f8 <MQTT_HandleImuMessages+0x78>)
   191be:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   191c0:	4b0c      	ldr	r3, [pc, #48]	; (191f4 <MQTT_HandleImuMessages+0x74>)
   191c2:	0018      	movs	r0, r3
   191c4:	4b0d      	ldr	r3, [pc, #52]	; (191fc <MQTT_HandleImuMessages+0x7c>)
   191c6:	4798      	blx	r3
   191c8:	0004      	movs	r4, r0
   191ca:	4a0a      	ldr	r2, [pc, #40]	; (191f4 <MQTT_HandleImuMessages+0x74>)
   191cc:	490c      	ldr	r1, [pc, #48]	; (19200 <MQTT_HandleImuMessages+0x80>)
   191ce:	480d      	ldr	r0, [pc, #52]	; (19204 <MQTT_HandleImuMessages+0x84>)
   191d0:	2300      	movs	r3, #0
   191d2:	9301      	str	r3, [sp, #4]
   191d4:	2301      	movs	r3, #1
   191d6:	9300      	str	r3, [sp, #0]
   191d8:	0023      	movs	r3, r4
   191da:	4c0b      	ldr	r4, [pc, #44]	; (19208 <MQTT_HandleImuMessages+0x88>)
   191dc:	47a0      	blx	r4
    }
}
   191de:	46c0      	nop			; (mov r8, r8)
   191e0:	46bd      	mov	sp, r7
   191e2:	b003      	add	sp, #12
   191e4:	bd90      	pop	{r4, r7, pc}
   191e6:	46c0      	nop			; (mov r8, r8)
   191e8:	200004b0 	.word	0x200004b0
   191ec:	0001d0f5 	.word	0x0001d0f5
   191f0:	000391a8 	.word	0x000391a8
   191f4:	20000024 	.word	0x20000024
   191f8:	00036ef9 	.word	0x00036ef9
   191fc:	00037057 	.word	0x00037057
   19200:	00039070 	.word	0x00039070
   19204:	200004e8 	.word	0x200004e8
   19208:	00031701 	.word	0x00031701

0001920c <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
   1920c:	b590      	push	{r4, r7, lr}
   1920e:	b08b      	sub	sp, #44	; 0x2c
   19210:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   19212:	4b39      	ldr	r3, [pc, #228]	; (192f8 <MQTT_HandleGameMessages+0xec>)
   19214:	681b      	ldr	r3, [r3, #0]
   19216:	2208      	movs	r2, #8
   19218:	18b9      	adds	r1, r7, r2
   1921a:	2200      	movs	r2, #0
   1921c:	0018      	movs	r0, r3
   1921e:	4b37      	ldr	r3, [pc, #220]	; (192fc <MQTT_HandleGameMessages+0xf0>)
   19220:	4798      	blx	r3
   19222:	0003      	movs	r3, r0
   19224:	2b01      	cmp	r3, #1
   19226:	d163      	bne.n	192f0 <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   19228:	4b35      	ldr	r3, [pc, #212]	; (19300 <MQTT_HandleGameMessages+0xf4>)
   1922a:	4a36      	ldr	r2, [pc, #216]	; (19304 <MQTT_HandleGameMessages+0xf8>)
   1922c:	ca03      	ldmia	r2!, {r0, r1}
   1922e:	c303      	stmia	r3!, {r0, r1}
   19230:	8812      	ldrh	r2, [r2, #0]
   19232:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   19234:	2300      	movs	r3, #0
   19236:	61fb      	str	r3, [r7, #28]
   19238:	e02d      	b.n	19296 <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   1923a:	2308      	movs	r3, #8
   1923c:	18fa      	adds	r2, r7, r3
   1923e:	69fb      	ldr	r3, [r7, #28]
   19240:	18d3      	adds	r3, r2, r3
   19242:	781b      	ldrb	r3, [r3, #0]
   19244:	2bff      	cmp	r3, #255	; 0xff
   19246:	d02a      	beq.n	1929e <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   19248:	2308      	movs	r3, #8
   1924a:	18fa      	adds	r2, r7, r3
   1924c:	69fb      	ldr	r3, [r7, #28]
   1924e:	18d3      	adds	r3, r2, r3
   19250:	781b      	ldrb	r3, [r3, #0]
   19252:	4a2d      	ldr	r2, [pc, #180]	; (19308 <MQTT_HandleGameMessages+0xfc>)
   19254:	0038      	movs	r0, r7
   19256:	2103      	movs	r1, #3
   19258:	4c2c      	ldr	r4, [pc, #176]	; (1930c <MQTT_HandleGameMessages+0x100>)
   1925a:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   1925c:	003a      	movs	r2, r7
   1925e:	4b28      	ldr	r3, [pc, #160]	; (19300 <MQTT_HandleGameMessages+0xf4>)
   19260:	0011      	movs	r1, r2
   19262:	0018      	movs	r0, r3
   19264:	4b2a      	ldr	r3, [pc, #168]	; (19310 <MQTT_HandleGameMessages+0x104>)
   19266:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   19268:	69fb      	ldr	r3, [r7, #28]
   1926a:	3301      	adds	r3, #1
   1926c:	2208      	movs	r2, #8
   1926e:	18ba      	adds	r2, r7, r2
   19270:	5cd3      	ldrb	r3, [r2, r3]
   19272:	2bff      	cmp	r3, #255	; 0xff
   19274:	d00c      	beq.n	19290 <MQTT_HandleGameMessages+0x84>
   19276:	69fb      	ldr	r3, [r7, #28]
   19278:	3301      	adds	r3, #1
   1927a:	2b13      	cmp	r3, #19
   1927c:	dc08      	bgt.n	19290 <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   1927e:	003b      	movs	r3, r7
   19280:	222c      	movs	r2, #44	; 0x2c
   19282:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   19284:	003a      	movs	r2, r7
   19286:	4b1e      	ldr	r3, [pc, #120]	; (19300 <MQTT_HandleGameMessages+0xf4>)
   19288:	0011      	movs	r1, r2
   1928a:	0018      	movs	r0, r3
   1928c:	4b20      	ldr	r3, [pc, #128]	; (19310 <MQTT_HandleGameMessages+0x104>)
   1928e:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   19290:	69fb      	ldr	r3, [r7, #28]
   19292:	3301      	adds	r3, #1
   19294:	61fb      	str	r3, [r7, #28]
   19296:	69fb      	ldr	r3, [r7, #28]
   19298:	2b13      	cmp	r3, #19
   1929a:	ddce      	ble.n	1923a <MQTT_HandleGameMessages+0x2e>
   1929c:	e000      	b.n	192a0 <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   1929e:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   192a0:	4b17      	ldr	r3, [pc, #92]	; (19300 <MQTT_HandleGameMessages+0xf4>)
   192a2:	0018      	movs	r0, r3
   192a4:	4b1b      	ldr	r3, [pc, #108]	; (19314 <MQTT_HandleGameMessages+0x108>)
   192a6:	4798      	blx	r3
   192a8:	0003      	movs	r3, r0
   192aa:	001a      	movs	r2, r3
   192ac:	4b14      	ldr	r3, [pc, #80]	; (19300 <MQTT_HandleGameMessages+0xf4>)
   192ae:	18d2      	adds	r2, r2, r3
   192b0:	4b19      	ldr	r3, [pc, #100]	; (19318 <MQTT_HandleGameMessages+0x10c>)
   192b2:	0010      	movs	r0, r2
   192b4:	0019      	movs	r1, r3
   192b6:	2303      	movs	r3, #3
   192b8:	001a      	movs	r2, r3
   192ba:	4b18      	ldr	r3, [pc, #96]	; (1931c <MQTT_HandleGameMessages+0x110>)
   192bc:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   192be:	4b10      	ldr	r3, [pc, #64]	; (19300 <MQTT_HandleGameMessages+0xf4>)
   192c0:	0019      	movs	r1, r3
   192c2:	2001      	movs	r0, #1
   192c4:	4b16      	ldr	r3, [pc, #88]	; (19320 <MQTT_HandleGameMessages+0x114>)
   192c6:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   192c8:	4b16      	ldr	r3, [pc, #88]	; (19324 <MQTT_HandleGameMessages+0x118>)
   192ca:	0019      	movs	r1, r3
   192cc:	2001      	movs	r0, #1
   192ce:	4b14      	ldr	r3, [pc, #80]	; (19320 <MQTT_HandleGameMessages+0x114>)
   192d0:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   192d2:	4b0b      	ldr	r3, [pc, #44]	; (19300 <MQTT_HandleGameMessages+0xf4>)
   192d4:	0018      	movs	r0, r3
   192d6:	4b0f      	ldr	r3, [pc, #60]	; (19314 <MQTT_HandleGameMessages+0x108>)
   192d8:	4798      	blx	r3
   192da:	0004      	movs	r4, r0
   192dc:	4a08      	ldr	r2, [pc, #32]	; (19300 <MQTT_HandleGameMessages+0xf4>)
   192de:	4912      	ldr	r1, [pc, #72]	; (19328 <MQTT_HandleGameMessages+0x11c>)
   192e0:	4812      	ldr	r0, [pc, #72]	; (1932c <MQTT_HandleGameMessages+0x120>)
   192e2:	2300      	movs	r3, #0
   192e4:	9301      	str	r3, [sp, #4]
   192e6:	2301      	movs	r3, #1
   192e8:	9300      	str	r3, [sp, #0]
   192ea:	0023      	movs	r3, r4
   192ec:	4c10      	ldr	r4, [pc, #64]	; (19330 <MQTT_HandleGameMessages+0x124>)
   192ee:	47a0      	blx	r4
    }
}
   192f0:	46c0      	nop			; (mov r8, r8)
   192f2:	46bd      	mov	sp, r7
   192f4:	b009      	add	sp, #36	; 0x24
   192f6:	bd90      	pop	{r4, r7, pc}
   192f8:	200004ac 	.word	0x200004ac
   192fc:	0001d0f5 	.word	0x0001d0f5
   19300:	20000024 	.word	0x20000024
   19304:	00038eb0 	.word	0x00038eb0
   19308:	000391cc 	.word	0x000391cc
   1930c:	00036ef9 	.word	0x00036ef9
   19310:	00036fdd 	.word	0x00036fdd
   19314:	00037057 	.word	0x00037057
   19318:	000391d0 	.word	0x000391d0
   1931c:	00036c69 	.word	0x00036c69
   19320:	0001ffe1 	.word	0x0001ffe1
   19324:	000391d4 	.word	0x000391d4
   19328:	000391d8 	.word	0x000391d8
   1932c:	200004e8 	.word	0x200004e8
   19330:	00031701 	.word	0x00031701

00019334 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   19334:	b590      	push	{r4, r7, lr}
   19336:	b08d      	sub	sp, #52	; 0x34
   19338:	af02      	add	r7, sp, #8
   1933a:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   1933c:	2064      	movs	r0, #100	; 0x64
   1933e:	4b78      	ldr	r3, [pc, #480]	; (19520 <vWifiTask+0x1ec>)
   19340:	4798      	blx	r3
    init_state();
   19342:	4b78      	ldr	r3, [pc, #480]	; (19524 <vWifiTask+0x1f0>)
   19344:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   19346:	2200      	movs	r2, #0
   19348:	2104      	movs	r1, #4
   1934a:	2005      	movs	r0, #5
   1934c:	4b76      	ldr	r3, [pc, #472]	; (19528 <vWifiTask+0x1f4>)
   1934e:	4798      	blx	r3
   19350:	0002      	movs	r2, r0
   19352:	4b76      	ldr	r3, [pc, #472]	; (1952c <vWifiTask+0x1f8>)
   19354:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   19356:	2200      	movs	r2, #0
   19358:	2106      	movs	r1, #6
   1935a:	2005      	movs	r0, #5
   1935c:	4b72      	ldr	r3, [pc, #456]	; (19528 <vWifiTask+0x1f4>)
   1935e:	4798      	blx	r3
   19360:	0002      	movs	r2, r0
   19362:	4b73      	ldr	r3, [pc, #460]	; (19530 <vWifiTask+0x1fc>)
   19364:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   19366:	2200      	movs	r2, #0
   19368:	2114      	movs	r1, #20
   1936a:	2002      	movs	r0, #2
   1936c:	4b6e      	ldr	r3, [pc, #440]	; (19528 <vWifiTask+0x1f4>)
   1936e:	4798      	blx	r3
   19370:	0002      	movs	r2, r0
   19372:	4b70      	ldr	r3, [pc, #448]	; (19534 <vWifiTask+0x200>)
   19374:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   19376:	2200      	movs	r2, #0
   19378:	2102      	movs	r1, #2
   1937a:	2005      	movs	r0, #5
   1937c:	4b6a      	ldr	r3, [pc, #424]	; (19528 <vWifiTask+0x1f4>)
   1937e:	4798      	blx	r3
   19380:	0002      	movs	r2, r0
   19382:	4b6d      	ldr	r3, [pc, #436]	; (19538 <vWifiTask+0x204>)
   19384:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
   19386:	4b69      	ldr	r3, [pc, #420]	; (1952c <vWifiTask+0x1f8>)
   19388:	681b      	ldr	r3, [r3, #0]
   1938a:	2b00      	cmp	r3, #0
   1938c:	d00b      	beq.n	193a6 <vWifiTask+0x72>
   1938e:	4b68      	ldr	r3, [pc, #416]	; (19530 <vWifiTask+0x1fc>)
   19390:	681b      	ldr	r3, [r3, #0]
   19392:	2b00      	cmp	r3, #0
   19394:	d007      	beq.n	193a6 <vWifiTask+0x72>
   19396:	4b67      	ldr	r3, [pc, #412]	; (19534 <vWifiTask+0x200>)
   19398:	681b      	ldr	r3, [r3, #0]
   1939a:	2b00      	cmp	r3, #0
   1939c:	d003      	beq.n	193a6 <vWifiTask+0x72>
   1939e:	4b66      	ldr	r3, [pc, #408]	; (19538 <vWifiTask+0x204>)
   193a0:	681b      	ldr	r3, [r3, #0]
   193a2:	2b00      	cmp	r3, #0
   193a4:	d103      	bne.n	193ae <vWifiTask+0x7a>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   193a6:	4b65      	ldr	r3, [pc, #404]	; (1953c <vWifiTask+0x208>)
   193a8:	0018      	movs	r0, r3
   193aa:	4b65      	ldr	r3, [pc, #404]	; (19540 <vWifiTask+0x20c>)
   193ac:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   193ae:	4b65      	ldr	r3, [pc, #404]	; (19544 <vWifiTask+0x210>)
   193b0:	0018      	movs	r0, r3
   193b2:	4b63      	ldr	r3, [pc, #396]	; (19540 <vWifiTask+0x20c>)
   193b4:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   193b6:	4b64      	ldr	r3, [pc, #400]	; (19548 <vWifiTask+0x214>)
   193b8:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   193ba:	4b64      	ldr	r3, [pc, #400]	; (1954c <vWifiTask+0x218>)
   193bc:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   193be:	4b64      	ldr	r3, [pc, #400]	; (19550 <vWifiTask+0x21c>)
   193c0:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    //init_storage();

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   193c2:	4b64      	ldr	r3, [pc, #400]	; (19554 <vWifiTask+0x220>)
   193c4:	4798      	blx	r3
    configure_extint_callbacks();
   193c6:	4b64      	ldr	r3, [pc, #400]	; (19558 <vWifiTask+0x224>)
   193c8:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   193ca:	230c      	movs	r3, #12
   193cc:	18fb      	adds	r3, r7, r3
   193ce:	2218      	movs	r2, #24
   193d0:	2100      	movs	r1, #0
   193d2:	0018      	movs	r0, r3
   193d4:	4b61      	ldr	r3, [pc, #388]	; (1955c <vWifiTask+0x228>)
   193d6:	4798      	blx	r3

    nm_bsp_init();
   193d8:	4b61      	ldr	r3, [pc, #388]	; (19560 <vWifiTask+0x22c>)
   193da:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   193dc:	230c      	movs	r3, #12
   193de:	18fb      	adds	r3, r7, r3
   193e0:	4a60      	ldr	r2, [pc, #384]	; (19564 <vWifiTask+0x230>)
   193e2:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   193e4:	2327      	movs	r3, #39	; 0x27
   193e6:	18fc      	adds	r4, r7, r3
   193e8:	230c      	movs	r3, #12
   193ea:	18fb      	adds	r3, r7, r3
   193ec:	0018      	movs	r0, r3
   193ee:	4b5e      	ldr	r3, [pc, #376]	; (19568 <vWifiTask+0x234>)
   193f0:	4798      	blx	r3
   193f2:	0003      	movs	r3, r0
   193f4:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   193f6:	2327      	movs	r3, #39	; 0x27
   193f8:	18fb      	adds	r3, r7, r3
   193fa:	781b      	ldrb	r3, [r3, #0]
   193fc:	b25b      	sxtb	r3, r3
   193fe:	2b00      	cmp	r3, #0
   19400:	d009      	beq.n	19416 <vWifiTask+0xe2>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   19402:	2327      	movs	r3, #39	; 0x27
   19404:	18fb      	adds	r3, r7, r3
   19406:	2200      	movs	r2, #0
   19408:	569a      	ldrsb	r2, [r3, r2]
   1940a:	4b58      	ldr	r3, [pc, #352]	; (1956c <vWifiTask+0x238>)
   1940c:	0019      	movs	r1, r3
   1940e:	2001      	movs	r0, #1
   19410:	4b57      	ldr	r3, [pc, #348]	; (19570 <vWifiTask+0x23c>)
   19412:	4798      	blx	r3
        while (1) {
   19414:	e7fe      	b.n	19414 <vWifiTask+0xe0>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   19416:	4a57      	ldr	r2, [pc, #348]	; (19574 <vWifiTask+0x240>)
   19418:	4b57      	ldr	r3, [pc, #348]	; (19578 <vWifiTask+0x244>)
   1941a:	0019      	movs	r1, r3
   1941c:	2001      	movs	r0, #1
   1941e:	4b54      	ldr	r3, [pc, #336]	; (19570 <vWifiTask+0x23c>)
   19420:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   19422:	4b56      	ldr	r3, [pc, #344]	; (1957c <vWifiTask+0x248>)
   19424:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   19426:	4a56      	ldr	r2, [pc, #344]	; (19580 <vWifiTask+0x24c>)
   19428:	4b56      	ldr	r3, [pc, #344]	; (19584 <vWifiTask+0x250>)
   1942a:	0011      	movs	r1, r2
   1942c:	0018      	movs	r0, r3
   1942e:	4b56      	ldr	r3, [pc, #344]	; (19588 <vWifiTask+0x254>)
   19430:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   19432:	4a56      	ldr	r2, [pc, #344]	; (1958c <vWifiTask+0x258>)
   19434:	484f      	ldr	r0, [pc, #316]	; (19574 <vWifiTask+0x240>)
   19436:	23ff      	movs	r3, #255	; 0xff
   19438:	9300      	str	r3, [sp, #0]
   1943a:	0013      	movs	r3, r2
   1943c:	2202      	movs	r2, #2
   1943e:	2102      	movs	r1, #2
   19440:	4c53      	ldr	r4, [pc, #332]	; (19590 <vWifiTask+0x25c>)
   19442:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   19444:	e006      	b.n	19454 <vWifiTask+0x120>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   19446:	2000      	movs	r0, #0
   19448:	4b52      	ldr	r3, [pc, #328]	; (19594 <vWifiTask+0x260>)
   1944a:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   1944c:	4b52      	ldr	r3, [pc, #328]	; (19598 <vWifiTask+0x264>)
   1944e:	0018      	movs	r0, r3
   19450:	4b52      	ldr	r3, [pc, #328]	; (1959c <vWifiTask+0x268>)
   19452:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   19454:	2002      	movs	r0, #2
   19456:	4b52      	ldr	r3, [pc, #328]	; (195a0 <vWifiTask+0x26c>)
   19458:	4798      	blx	r3
   1945a:	0003      	movs	r3, r0
   1945c:	001a      	movs	r2, r3
   1945e:	2301      	movs	r3, #1
   19460:	4053      	eors	r3, r2
   19462:	b2db      	uxtb	r3, r3
   19464:	2b00      	cmp	r3, #0
   19466:	d1ee      	bne.n	19446 <vWifiTask+0x112>
    }

    vTaskDelay(1000);
   19468:	23fa      	movs	r3, #250	; 0xfa
   1946a:	009b      	lsls	r3, r3, #2
   1946c:	0018      	movs	r0, r3
   1946e:	4b2c      	ldr	r3, [pc, #176]	; (19520 <vWifiTask+0x1ec>)
   19470:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   19472:	4b4c      	ldr	r3, [pc, #304]	; (195a4 <vWifiTask+0x270>)
   19474:	2201      	movs	r2, #1
   19476:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   19478:	4b4a      	ldr	r3, [pc, #296]	; (195a4 <vWifiTask+0x270>)
   1947a:	781b      	ldrb	r3, [r3, #0]
   1947c:	b25b      	sxtb	r3, r3
   1947e:	2b01      	cmp	r3, #1
   19480:	d00b      	beq.n	1949a <vWifiTask+0x166>
   19482:	dc02      	bgt.n	1948a <vWifiTask+0x156>
   19484:	2b00      	cmp	r3, #0
   19486:	d005      	beq.n	19494 <vWifiTask+0x160>
   19488:	e010      	b.n	194ac <vWifiTask+0x178>
   1948a:	2b02      	cmp	r3, #2
   1948c:	d008      	beq.n	194a0 <vWifiTask+0x16c>
   1948e:	2b03      	cmp	r3, #3
   19490:	d009      	beq.n	194a6 <vWifiTask+0x172>
   19492:	e00b      	b.n	194ac <vWifiTask+0x178>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   19494:	4b44      	ldr	r3, [pc, #272]	; (195a8 <vWifiTask+0x274>)
   19496:	4798      	blx	r3

                break;
   19498:	e00c      	b.n	194b4 <vWifiTask+0x180>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   1949a:	4b44      	ldr	r3, [pc, #272]	; (195ac <vWifiTask+0x278>)
   1949c:	4798      	blx	r3
                break;
   1949e:	e009      	b.n	194b4 <vWifiTask+0x180>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   194a0:	4b43      	ldr	r3, [pc, #268]	; (195b0 <vWifiTask+0x27c>)
   194a2:	4798      	blx	r3
                break;
   194a4:	e006      	b.n	194b4 <vWifiTask+0x180>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   194a6:	4b43      	ldr	r3, [pc, #268]	; (195b4 <vWifiTask+0x280>)
   194a8:	4798      	blx	r3
                break;
   194aa:	e003      	b.n	194b4 <vWifiTask+0x180>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   194ac:	4b3d      	ldr	r3, [pc, #244]	; (195a4 <vWifiTask+0x270>)
   194ae:	2200      	movs	r2, #0
   194b0:	701a      	strb	r2, [r3, #0]
                break;
   194b2:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   194b4:	230b      	movs	r3, #11
   194b6:	18fb      	adds	r3, r7, r3
   194b8:	2200      	movs	r2, #0
   194ba:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   194bc:	4b1b      	ldr	r3, [pc, #108]	; (1952c <vWifiTask+0x1f8>)
   194be:	681b      	ldr	r3, [r3, #0]
   194c0:	220b      	movs	r2, #11
   194c2:	18b9      	adds	r1, r7, r2
   194c4:	2200      	movs	r2, #0
   194c6:	0018      	movs	r0, r3
   194c8:	4b3b      	ldr	r3, [pc, #236]	; (195b8 <vWifiTask+0x284>)
   194ca:	4798      	blx	r3
   194cc:	0003      	movs	r3, r0
   194ce:	2b01      	cmp	r3, #1
   194d0:	d105      	bne.n	194de <vWifiTask+0x1aa>
            wifiStateMachine = DataToReceive;  // Update new state
   194d2:	230b      	movs	r3, #11
   194d4:	18fb      	adds	r3, r7, r3
   194d6:	781b      	ldrb	r3, [r3, #0]
   194d8:	b25a      	sxtb	r2, r3
   194da:	4b32      	ldr	r3, [pc, #200]	; (195a4 <vWifiTask+0x270>)
   194dc:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   194de:	4b37      	ldr	r3, [pc, #220]	; (195bc <vWifiTask+0x288>)
   194e0:	781b      	ldrb	r3, [r3, #0]
   194e2:	b2db      	uxtb	r3, r3
   194e4:	2b00      	cmp	r3, #0
   194e6:	d017      	beq.n	19518 <vWifiTask+0x1e4>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   194e8:	4b35      	ldr	r3, [pc, #212]	; (195c0 <vWifiTask+0x28c>)
   194ea:	0018      	movs	r0, r3
   194ec:	4b35      	ldr	r3, [pc, #212]	; (195c4 <vWifiTask+0x290>)
   194ee:	4798      	blx	r3
   194f0:	0004      	movs	r4, r0
   194f2:	4a33      	ldr	r2, [pc, #204]	; (195c0 <vWifiTask+0x28c>)
   194f4:	4934      	ldr	r1, [pc, #208]	; (195c8 <vWifiTask+0x294>)
   194f6:	4835      	ldr	r0, [pc, #212]	; (195cc <vWifiTask+0x298>)
   194f8:	2300      	movs	r3, #0
   194fa:	9301      	str	r3, [sp, #4]
   194fc:	2301      	movs	r3, #1
   194fe:	9300      	str	r3, [sp, #0]
   19500:	0023      	movs	r3, r4
   19502:	4c33      	ldr	r4, [pc, #204]	; (195d0 <vWifiTask+0x29c>)
   19504:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   19506:	4a2e      	ldr	r2, [pc, #184]	; (195c0 <vWifiTask+0x28c>)
   19508:	4b32      	ldr	r3, [pc, #200]	; (195d4 <vWifiTask+0x2a0>)
   1950a:	0019      	movs	r1, r3
   1950c:	2001      	movs	r0, #1
   1950e:	4b18      	ldr	r3, [pc, #96]	; (19570 <vWifiTask+0x23c>)
   19510:	4798      	blx	r3
            isPressed = false;
   19512:	4b2a      	ldr	r3, [pc, #168]	; (195bc <vWifiTask+0x288>)
   19514:	2200      	movs	r2, #0
   19516:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(100);
   19518:	2064      	movs	r0, #100	; 0x64
   1951a:	4b01      	ldr	r3, [pc, #4]	; (19520 <vWifiTask+0x1ec>)
   1951c:	4798      	blx	r3
    while (1) {
   1951e:	e7ab      	b.n	19478 <vWifiTask+0x144>
   19520:	0001e2a1 	.word	0x0001e2a1
   19524:	00017f5d 	.word	0x00017f5d
   19528:	0001c595 	.word	0x0001c595
   1952c:	200004a8 	.word	0x200004a8
   19530:	200004b0 	.word	0x200004b0
   19534:	200004ac 	.word	0x200004ac
   19538:	200004b4 	.word	0x200004b4
   1953c:	000391ec 	.word	0x000391ec
   19540:	0001fef5 	.word	0x0001fef5
   19544:	00039214 	.word	0x00039214
   19548:	000188b5 	.word	0x000188b5
   1954c:	000188f1 	.word	0x000188f1
   19550:	00018d9d 	.word	0x00018d9d
   19554:	00018e55 	.word	0x00018e55
   19558:	00018e95 	.word	0x00018e95
   1955c:	00036c9f 	.word	0x00036c9f
   19560:	000220ad 	.word	0x000220ad
   19564:	00018761 	.word	0x00018761
   19568:	00023af5 	.word	0x00023af5
   1956c:	00039230 	.word	0x00039230
   19570:	0001ffe1 	.word	0x0001ffe1
   19574:	00038ce8 	.word	0x00038ce8
   19578:	0003925c 	.word	0x0003925c
   1957c:	00027255 	.word	0x00027255
   19580:	000189a9 	.word	0x000189a9
   19584:	00018975 	.word	0x00018975
   19588:	000272ed 	.word	0x000272ed
   1958c:	00038cdc 	.word	0x00038cdc
   19590:	00023d05 	.word	0x00023d05
   19594:	00023ce9 	.word	0x00023ce9
   19598:	2000450c 	.word	0x2000450c
   1959c:	000343e1 	.word	0x000343e1
   195a0:	00017fcd 	.word	0x00017fcd
   195a4:	200004a5 	.word	0x200004a5
   195a8:	00019095 	.word	0x00019095
   195ac:	00019131 	.word	0x00019131
   195b0:	00018f0d 	.word	0x00018f0d
   195b4:	00018fa1 	.word	0x00018fa1
   195b8:	0001d0f5 	.word	0x0001d0f5
   195bc:	20000920 	.word	0x20000920
   195c0:	20000064 	.word	0x20000064
   195c4:	00037057 	.word	0x00037057
   195c8:	00039280 	.word	0x00039280
   195cc:	200004e8 	.word	0x200004e8
   195d0:	00031701 	.word	0x00031701
   195d4:	0003929c 	.word	0x0003929c

000195d8 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   195d8:	b590      	push	{r4, r7, lr}
   195da:	b083      	sub	sp, #12
   195dc:	af00      	add	r7, sp, #0
   195de:	0002      	movs	r2, r0
   195e0:	1dfb      	adds	r3, r7, #7
   195e2:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   195e4:	1dfb      	adds	r3, r7, #7
   195e6:	781b      	ldrb	r3, [r3, #0]
   195e8:	2b03      	cmp	r3, #3
   195ea:	d806      	bhi.n	195fa <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   195ec:	4b05      	ldr	r3, [pc, #20]	; (19604 <WifiHandlerSetState+0x2c>)
   195ee:	6818      	ldr	r0, [r3, #0]
   195f0:	1df9      	adds	r1, r7, #7
   195f2:	2300      	movs	r3, #0
   195f4:	220a      	movs	r2, #10
   195f6:	4c04      	ldr	r4, [pc, #16]	; (19608 <WifiHandlerSetState+0x30>)
   195f8:	47a0      	blx	r4
    }
}
   195fa:	46c0      	nop			; (mov r8, r8)
   195fc:	46bd      	mov	sp, r7
   195fe:	b003      	add	sp, #12
   19600:	bd90      	pop	{r4, r7, pc}
   19602:	46c0      	nop			; (mov r8, r8)
   19604:	200004a8 	.word	0x200004a8
   19608:	0001c83d 	.word	0x0001c83d

0001960c <WifiAddImuDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddImuDataToQueue(struct ImuDataPacket *imuPacket)
{
   1960c:	b590      	push	{r4, r7, lr}
   1960e:	b085      	sub	sp, #20
   19610:	af00      	add	r7, sp, #0
   19612:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueImuBuffer, imuPacket, (TickType_t)10);
   19614:	4b06      	ldr	r3, [pc, #24]	; (19630 <WifiAddImuDataToQueue+0x24>)
   19616:	6818      	ldr	r0, [r3, #0]
   19618:	6879      	ldr	r1, [r7, #4]
   1961a:	2300      	movs	r3, #0
   1961c:	220a      	movs	r2, #10
   1961e:	4c05      	ldr	r4, [pc, #20]	; (19634 <WifiAddImuDataToQueue+0x28>)
   19620:	47a0      	blx	r4
   19622:	0003      	movs	r3, r0
   19624:	60fb      	str	r3, [r7, #12]
    return error;
   19626:	68fb      	ldr	r3, [r7, #12]
}
   19628:	0018      	movs	r0, r3
   1962a:	46bd      	mov	sp, r7
   1962c:	b005      	add	sp, #20
   1962e:	bd90      	pop	{r4, r7, pc}
   19630:	200004b0 	.word	0x200004b0
   19634:	0001c83d 	.word	0x0001c83d

00019638 <WifiAddGameDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddGameDataToQueue(struct GameDataPacket *game)
{
   19638:	b590      	push	{r4, r7, lr}
   1963a:	b085      	sub	sp, #20
   1963c:	af00      	add	r7, sp, #0
   1963e:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBuffer, game, (TickType_t)10);
   19640:	4b06      	ldr	r3, [pc, #24]	; (1965c <WifiAddGameDataToQueue+0x24>)
   19642:	6818      	ldr	r0, [r3, #0]
   19644:	6879      	ldr	r1, [r7, #4]
   19646:	2300      	movs	r3, #0
   19648:	220a      	movs	r2, #10
   1964a:	4c05      	ldr	r4, [pc, #20]	; (19660 <WifiAddGameDataToQueue+0x28>)
   1964c:	47a0      	blx	r4
   1964e:	0003      	movs	r3, r0
   19650:	60fb      	str	r3, [r7, #12]
    return error;
   19652:	68fb      	ldr	r3, [r7, #12]
}
   19654:	0018      	movs	r0, r3
   19656:	46bd      	mov	sp, r7
   19658:	b005      	add	sp, #20
   1965a:	bd90      	pop	{r4, r7, pc}
   1965c:	200004ac 	.word	0x200004ac
   19660:	0001c83d 	.word	0x0001c83d

00019664 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   19664:	b580      	push	{r7, lr}
   19666:	b082      	sub	sp, #8
   19668:	af00      	add	r7, sp, #0
   1966a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1966c:	687b      	ldr	r3, [r7, #4]
   1966e:	2200      	movs	r2, #0
   19670:	701a      	strb	r2, [r3, #0]
}
   19672:	46c0      	nop			; (mov r8, r8)
   19674:	46bd      	mov	sp, r7
   19676:	b002      	add	sp, #8
   19678:	bd80      	pop	{r7, pc}
	...

0001967c <system_apb_clock_set_mask>:
{
   1967c:	b580      	push	{r7, lr}
   1967e:	b082      	sub	sp, #8
   19680:	af00      	add	r7, sp, #0
   19682:	0002      	movs	r2, r0
   19684:	6039      	str	r1, [r7, #0]
   19686:	1dfb      	adds	r3, r7, #7
   19688:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1968a:	1dfb      	adds	r3, r7, #7
   1968c:	781b      	ldrb	r3, [r3, #0]
   1968e:	2b01      	cmp	r3, #1
   19690:	d00a      	beq.n	196a8 <system_apb_clock_set_mask+0x2c>
   19692:	2b02      	cmp	r3, #2
   19694:	d00f      	beq.n	196b6 <system_apb_clock_set_mask+0x3a>
   19696:	2b00      	cmp	r3, #0
   19698:	d114      	bne.n	196c4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1969a:	4b0e      	ldr	r3, [pc, #56]	; (196d4 <system_apb_clock_set_mask+0x58>)
   1969c:	4a0d      	ldr	r2, [pc, #52]	; (196d4 <system_apb_clock_set_mask+0x58>)
   1969e:	6991      	ldr	r1, [r2, #24]
   196a0:	683a      	ldr	r2, [r7, #0]
   196a2:	430a      	orrs	r2, r1
   196a4:	619a      	str	r2, [r3, #24]
			break;
   196a6:	e00f      	b.n	196c8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   196a8:	4b0a      	ldr	r3, [pc, #40]	; (196d4 <system_apb_clock_set_mask+0x58>)
   196aa:	4a0a      	ldr	r2, [pc, #40]	; (196d4 <system_apb_clock_set_mask+0x58>)
   196ac:	69d1      	ldr	r1, [r2, #28]
   196ae:	683a      	ldr	r2, [r7, #0]
   196b0:	430a      	orrs	r2, r1
   196b2:	61da      	str	r2, [r3, #28]
			break;
   196b4:	e008      	b.n	196c8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   196b6:	4b07      	ldr	r3, [pc, #28]	; (196d4 <system_apb_clock_set_mask+0x58>)
   196b8:	4a06      	ldr	r2, [pc, #24]	; (196d4 <system_apb_clock_set_mask+0x58>)
   196ba:	6a11      	ldr	r1, [r2, #32]
   196bc:	683a      	ldr	r2, [r7, #0]
   196be:	430a      	orrs	r2, r1
   196c0:	621a      	str	r2, [r3, #32]
			break;
   196c2:	e001      	b.n	196c8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   196c4:	2317      	movs	r3, #23
   196c6:	e000      	b.n	196ca <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   196c8:	2300      	movs	r3, #0
}
   196ca:	0018      	movs	r0, r3
   196cc:	46bd      	mov	sp, r7
   196ce:	b002      	add	sp, #8
   196d0:	bd80      	pop	{r7, pc}
   196d2:	46c0      	nop			; (mov r8, r8)
   196d4:	40000400 	.word	0x40000400

000196d8 <system_pinmux_get_config_defaults>:
{
   196d8:	b580      	push	{r7, lr}
   196da:	b082      	sub	sp, #8
   196dc:	af00      	add	r7, sp, #0
   196de:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   196e0:	687b      	ldr	r3, [r7, #4]
   196e2:	2280      	movs	r2, #128	; 0x80
   196e4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   196e6:	687b      	ldr	r3, [r7, #4]
   196e8:	2200      	movs	r2, #0
   196ea:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   196ec:	687b      	ldr	r3, [r7, #4]
   196ee:	2201      	movs	r2, #1
   196f0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   196f2:	687b      	ldr	r3, [r7, #4]
   196f4:	2200      	movs	r2, #0
   196f6:	70da      	strb	r2, [r3, #3]
}
   196f8:	46c0      	nop			; (mov r8, r8)
   196fa:	46bd      	mov	sp, r7
   196fc:	b002      	add	sp, #8
   196fe:	bd80      	pop	{r7, pc}

00019700 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   19700:	b580      	push	{r7, lr}
   19702:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   19704:	4b05      	ldr	r3, [pc, #20]	; (1971c <system_is_debugger_present+0x1c>)
   19706:	789b      	ldrb	r3, [r3, #2]
   19708:	b2db      	uxtb	r3, r3
   1970a:	001a      	movs	r2, r3
   1970c:	2302      	movs	r3, #2
   1970e:	4013      	ands	r3, r2
   19710:	1e5a      	subs	r2, r3, #1
   19712:	4193      	sbcs	r3, r2
   19714:	b2db      	uxtb	r3, r3
}
   19716:	0018      	movs	r0, r3
   19718:	46bd      	mov	sp, r7
   1971a:	bd80      	pop	{r7, pc}
   1971c:	41002000 	.word	0x41002000

00019720 <system_interrupt_enter_critical_section>:
{
   19720:	b580      	push	{r7, lr}
   19722:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   19724:	4b02      	ldr	r3, [pc, #8]	; (19730 <system_interrupt_enter_critical_section+0x10>)
   19726:	4798      	blx	r3
}
   19728:	46c0      	nop			; (mov r8, r8)
   1972a:	46bd      	mov	sp, r7
   1972c:	bd80      	pop	{r7, pc}
   1972e:	46c0      	nop			; (mov r8, r8)
   19730:	00027f4d 	.word	0x00027f4d

00019734 <system_interrupt_leave_critical_section>:
{
   19734:	b580      	push	{r7, lr}
   19736:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   19738:	4b02      	ldr	r3, [pc, #8]	; (19744 <system_interrupt_leave_critical_section+0x10>)
   1973a:	4798      	blx	r3
}
   1973c:	46c0      	nop			; (mov r8, r8)
   1973e:	46bd      	mov	sp, r7
   19740:	bd80      	pop	{r7, pc}
   19742:	46c0      	nop			; (mov r8, r8)
   19744:	00027fa1 	.word	0x00027fa1

00019748 <system_interrupt_disable>:
{
   19748:	b580      	push	{r7, lr}
   1974a:	b082      	sub	sp, #8
   1974c:	af00      	add	r7, sp, #0
   1974e:	0002      	movs	r2, r0
   19750:	1dfb      	adds	r3, r7, #7
   19752:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   19754:	4a07      	ldr	r2, [pc, #28]	; (19774 <system_interrupt_disable+0x2c>)
   19756:	1dfb      	adds	r3, r7, #7
   19758:	781b      	ldrb	r3, [r3, #0]
   1975a:	0019      	movs	r1, r3
   1975c:	231f      	movs	r3, #31
   1975e:	400b      	ands	r3, r1
   19760:	2101      	movs	r1, #1
   19762:	4099      	lsls	r1, r3
   19764:	000b      	movs	r3, r1
   19766:	0019      	movs	r1, r3
   19768:	2380      	movs	r3, #128	; 0x80
   1976a:	50d1      	str	r1, [r2, r3]
}
   1976c:	46c0      	nop			; (mov r8, r8)
   1976e:	46bd      	mov	sp, r7
   19770:	b002      	add	sp, #8
   19772:	bd80      	pop	{r7, pc}
   19774:	e000e100 	.word	0xe000e100

00019778 <i2c_master_is_syncing>:
{
   19778:	b580      	push	{r7, lr}
   1977a:	b084      	sub	sp, #16
   1977c:	af00      	add	r7, sp, #0
   1977e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   19780:	687b      	ldr	r3, [r7, #4]
   19782:	681b      	ldr	r3, [r3, #0]
   19784:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   19786:	68fb      	ldr	r3, [r7, #12]
   19788:	69db      	ldr	r3, [r3, #28]
   1978a:	2207      	movs	r2, #7
   1978c:	4013      	ands	r3, r2
   1978e:	1e5a      	subs	r2, r3, #1
   19790:	4193      	sbcs	r3, r2
   19792:	b2db      	uxtb	r3, r3
}
   19794:	0018      	movs	r0, r3
   19796:	46bd      	mov	sp, r7
   19798:	b004      	add	sp, #16
   1979a:	bd80      	pop	{r7, pc}

0001979c <_i2c_master_wait_for_sync>:
{
   1979c:	b580      	push	{r7, lr}
   1979e:	b082      	sub	sp, #8
   197a0:	af00      	add	r7, sp, #0
   197a2:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   197a4:	46c0      	nop			; (mov r8, r8)
   197a6:	687b      	ldr	r3, [r7, #4]
   197a8:	0018      	movs	r0, r3
   197aa:	4b04      	ldr	r3, [pc, #16]	; (197bc <_i2c_master_wait_for_sync+0x20>)
   197ac:	4798      	blx	r3
   197ae:	1e03      	subs	r3, r0, #0
   197b0:	d1f9      	bne.n	197a6 <_i2c_master_wait_for_sync+0xa>
}
   197b2:	46c0      	nop			; (mov r8, r8)
   197b4:	46bd      	mov	sp, r7
   197b6:	b002      	add	sp, #8
   197b8:	bd80      	pop	{r7, pc}
   197ba:	46c0      	nop			; (mov r8, r8)
   197bc:	00019779 	.word	0x00019779

000197c0 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   197c0:	b580      	push	{r7, lr}
   197c2:	b084      	sub	sp, #16
   197c4:	af00      	add	r7, sp, #0
   197c6:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   197c8:	687b      	ldr	r3, [r7, #4]
   197ca:	681b      	ldr	r3, [r3, #0]
   197cc:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   197ce:	687b      	ldr	r3, [r7, #4]
   197d0:	681b      	ldr	r3, [r3, #0]
   197d2:	0018      	movs	r0, r3
   197d4:	4b0d      	ldr	r3, [pc, #52]	; (1980c <i2c_master_disable+0x4c>)
   197d6:	4798      	blx	r3
   197d8:	0003      	movs	r3, r0
   197da:	0018      	movs	r0, r3
   197dc:	4b0c      	ldr	r3, [pc, #48]	; (19810 <i2c_master_disable+0x50>)
   197de:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   197e0:	687b      	ldr	r3, [r7, #4]
   197e2:	0018      	movs	r0, r3
   197e4:	4b0b      	ldr	r3, [pc, #44]	; (19814 <i2c_master_disable+0x54>)
   197e6:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   197e8:	68fb      	ldr	r3, [r7, #12]
   197ea:	2283      	movs	r2, #131	; 0x83
   197ec:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   197ee:	68fb      	ldr	r3, [r7, #12]
   197f0:	2283      	movs	r2, #131	; 0x83
   197f2:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   197f4:	68fb      	ldr	r3, [r7, #12]
   197f6:	681b      	ldr	r3, [r3, #0]
   197f8:	2202      	movs	r2, #2
   197fa:	4393      	bics	r3, r2
   197fc:	001a      	movs	r2, r3
   197fe:	68fb      	ldr	r3, [r7, #12]
   19800:	601a      	str	r2, [r3, #0]

}
   19802:	46c0      	nop			; (mov r8, r8)
   19804:	46bd      	mov	sp, r7
   19806:	b004      	add	sp, #16
   19808:	bd80      	pop	{r7, pc}
   1980a:	46c0      	nop			; (mov r8, r8)
   1980c:	00029421 	.word	0x00029421
   19810:	00019749 	.word	0x00019749
   19814:	0001979d 	.word	0x0001979d

00019818 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   19818:	b5f0      	push	{r4, r5, r6, r7, lr}
   1981a:	b097      	sub	sp, #92	; 0x5c
   1981c:	af00      	add	r7, sp, #0
   1981e:	6178      	str	r0, [r7, #20]
   19820:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   19822:	2300      	movs	r3, #0
   19824:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   19826:	2300      	movs	r3, #0
   19828:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   1982a:	2300      	movs	r3, #0
   1982c:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   1982e:	233b      	movs	r3, #59	; 0x3b
   19830:	2210      	movs	r2, #16
   19832:	4694      	mov	ip, r2
   19834:	44bc      	add	ip, r7
   19836:	4463      	add	r3, ip
   19838:	2200      	movs	r2, #0
   1983a:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1983c:	697b      	ldr	r3, [r7, #20]
   1983e:	681b      	ldr	r3, [r3, #0]
   19840:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   19842:	697b      	ldr	r3, [r7, #20]
   19844:	681b      	ldr	r3, [r3, #0]
   19846:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   19848:	2323      	movs	r3, #35	; 0x23
   1984a:	2210      	movs	r2, #16
   1984c:	18ba      	adds	r2, r7, r2
   1984e:	18d4      	adds	r4, r2, r3
   19850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19852:	0018      	movs	r0, r3
   19854:	4bc0      	ldr	r3, [pc, #768]	; (19b58 <_i2c_master_set_config+0x340>)
   19856:	4798      	blx	r3
   19858:	0003      	movs	r3, r0
   1985a:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   1985c:	230c      	movs	r3, #12
   1985e:	2210      	movs	r2, #16
   19860:	4694      	mov	ip, r2
   19862:	44bc      	add	ip, r7
   19864:	4463      	add	r3, ip
   19866:	0018      	movs	r0, r3
   19868:	4bbc      	ldr	r3, [pc, #752]	; (19b5c <_i2c_master_set_config+0x344>)
   1986a:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   1986c:	693b      	ldr	r3, [r7, #16]
   1986e:	69db      	ldr	r3, [r3, #28]
   19870:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   19872:	693b      	ldr	r3, [r7, #16]
   19874:	6a1b      	ldr	r3, [r3, #32]
   19876:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   19878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1987a:	2b00      	cmp	r3, #0
   1987c:	d106      	bne.n	1988c <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   1987e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19880:	2100      	movs	r1, #0
   19882:	0018      	movs	r0, r3
   19884:	4bb6      	ldr	r3, [pc, #728]	; (19b60 <_i2c_master_set_config+0x348>)
   19886:	4798      	blx	r3
   19888:	0003      	movs	r3, r0
   1988a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   1988c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1988e:	b2da      	uxtb	r2, r3
   19890:	230c      	movs	r3, #12
   19892:	2110      	movs	r1, #16
   19894:	468c      	mov	ip, r1
   19896:	44bc      	add	ip, r7
   19898:	4463      	add	r3, ip
   1989a:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   1989c:	230c      	movs	r3, #12
   1989e:	2210      	movs	r2, #16
   198a0:	4694      	mov	ip, r2
   198a2:	44bc      	add	ip, r7
   198a4:	4463      	add	r3, ip
   198a6:	2202      	movs	r2, #2
   198a8:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   198aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   198ac:	0c1b      	lsrs	r3, r3, #16
   198ae:	b2db      	uxtb	r3, r3
   198b0:	220c      	movs	r2, #12
   198b2:	2110      	movs	r1, #16
   198b4:	468c      	mov	ip, r1
   198b6:	44bc      	add	ip, r7
   198b8:	4462      	add	r2, ip
   198ba:	0011      	movs	r1, r2
   198bc:	0018      	movs	r0, r3
   198be:	4ba9      	ldr	r3, [pc, #676]	; (19b64 <_i2c_master_set_config+0x34c>)
   198c0:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   198c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   198c4:	2b00      	cmp	r3, #0
   198c6:	d106      	bne.n	198d6 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   198c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   198ca:	2101      	movs	r1, #1
   198cc:	0018      	movs	r0, r3
   198ce:	4ba4      	ldr	r3, [pc, #656]	; (19b60 <_i2c_master_set_config+0x348>)
   198d0:	4798      	blx	r3
   198d2:	0003      	movs	r3, r0
   198d4:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   198d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   198d8:	b2da      	uxtb	r2, r3
   198da:	230c      	movs	r3, #12
   198dc:	2110      	movs	r1, #16
   198de:	468c      	mov	ip, r1
   198e0:	44bc      	add	ip, r7
   198e2:	4463      	add	r3, ip
   198e4:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   198e6:	230c      	movs	r3, #12
   198e8:	2210      	movs	r2, #16
   198ea:	4694      	mov	ip, r2
   198ec:	44bc      	add	ip, r7
   198ee:	4463      	add	r3, ip
   198f0:	2202      	movs	r2, #2
   198f2:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   198f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   198f6:	0c1b      	lsrs	r3, r3, #16
   198f8:	b2db      	uxtb	r3, r3
   198fa:	220c      	movs	r2, #12
   198fc:	2110      	movs	r1, #16
   198fe:	468c      	mov	ip, r1
   19900:	44bc      	add	ip, r7
   19902:	4462      	add	r2, ip
   19904:	0011      	movs	r1, r2
   19906:	0018      	movs	r0, r3
   19908:	4b96      	ldr	r3, [pc, #600]	; (19b64 <_i2c_master_set_config+0x34c>)
   1990a:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   1990c:	693b      	ldr	r3, [r7, #16]
   1990e:	8a9a      	ldrh	r2, [r3, #20]
   19910:	697b      	ldr	r3, [r7, #20]
   19912:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   19914:	693b      	ldr	r3, [r7, #16]
   19916:	8ada      	ldrh	r2, [r3, #22]
   19918:	697b      	ldr	r3, [r7, #20]
   1991a:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   1991c:	693b      	ldr	r3, [r7, #16]
   1991e:	7e1b      	ldrb	r3, [r3, #24]
   19920:	2b00      	cmp	r3, #0
   19922:	d103      	bne.n	1992c <_i2c_master_set_config+0x114>
   19924:	4b90      	ldr	r3, [pc, #576]	; (19b68 <_i2c_master_set_config+0x350>)
   19926:	4798      	blx	r3
   19928:	1e03      	subs	r3, r0, #0
   1992a:	d002      	beq.n	19932 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   1992c:	2380      	movs	r3, #128	; 0x80
   1992e:	657b      	str	r3, [r7, #84]	; 0x54
   19930:	e001      	b.n	19936 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   19932:	2300      	movs	r3, #0
   19934:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   19936:	693b      	ldr	r3, [r7, #16]
   19938:	691b      	ldr	r3, [r3, #16]
   1993a:	2b00      	cmp	r3, #0
   1993c:	d004      	beq.n	19948 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   1993e:	693b      	ldr	r3, [r7, #16]
   19940:	691b      	ldr	r3, [r3, #16]
   19942:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   19944:	4313      	orrs	r3, r2
   19946:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   19948:	693b      	ldr	r3, [r7, #16]
   1994a:	689b      	ldr	r3, [r3, #8]
   1994c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1994e:	4313      	orrs	r3, r2
   19950:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   19952:	693b      	ldr	r3, [r7, #16]
   19954:	2224      	movs	r2, #36	; 0x24
   19956:	5c9b      	ldrb	r3, [r3, r2]
   19958:	2b00      	cmp	r3, #0
   1995a:	d004      	beq.n	19966 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   1995c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1995e:	2280      	movs	r2, #128	; 0x80
   19960:	05d2      	lsls	r2, r2, #23
   19962:	4313      	orrs	r3, r2
   19964:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   19966:	693b      	ldr	r3, [r7, #16]
   19968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1996a:	2b00      	cmp	r3, #0
   1996c:	d004      	beq.n	19978 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   1996e:	693b      	ldr	r3, [r7, #16]
   19970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19972:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   19974:	4313      	orrs	r3, r2
   19976:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   19978:	693b      	ldr	r3, [r7, #16]
   1997a:	222c      	movs	r2, #44	; 0x2c
   1997c:	5c9b      	ldrb	r3, [r3, r2]
   1997e:	2b00      	cmp	r3, #0
   19980:	d105      	bne.n	1998e <_i2c_master_set_config+0x176>
   19982:	693b      	ldr	r3, [r7, #16]
   19984:	689a      	ldr	r2, [r3, #8]
   19986:	2380      	movs	r3, #128	; 0x80
   19988:	049b      	lsls	r3, r3, #18
   1998a:	429a      	cmp	r2, r3
   1998c:	d104      	bne.n	19998 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   1998e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   19990:	2280      	movs	r2, #128	; 0x80
   19992:	0512      	lsls	r2, r2, #20
   19994:	4313      	orrs	r3, r2
   19996:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   19998:	693b      	ldr	r3, [r7, #16]
   1999a:	222d      	movs	r2, #45	; 0x2d
   1999c:	5c9b      	ldrb	r3, [r3, r2]
   1999e:	2b00      	cmp	r3, #0
   199a0:	d004      	beq.n	199ac <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   199a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   199a4:	2280      	movs	r2, #128	; 0x80
   199a6:	0412      	lsls	r2, r2, #16
   199a8:	4313      	orrs	r3, r2
   199aa:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   199ac:	693b      	ldr	r3, [r7, #16]
   199ae:	222e      	movs	r2, #46	; 0x2e
   199b0:	5c9b      	ldrb	r3, [r3, r2]
   199b2:	2b00      	cmp	r3, #0
   199b4:	d004      	beq.n	199c0 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   199b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   199b8:	2280      	movs	r2, #128	; 0x80
   199ba:	03d2      	lsls	r2, r2, #15
   199bc:	4313      	orrs	r3, r2
   199be:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   199c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   199c2:	681a      	ldr	r2, [r3, #0]
   199c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   199c6:	431a      	orrs	r2, r3
   199c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   199ca:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   199cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   199ce:	2280      	movs	r2, #128	; 0x80
   199d0:	0052      	lsls	r2, r2, #1
   199d2:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   199d4:	2323      	movs	r3, #35	; 0x23
   199d6:	2210      	movs	r2, #16
   199d8:	4694      	mov	ip, r2
   199da:	44bc      	add	ip, r7
   199dc:	4463      	add	r3, ip
   199de:	781b      	ldrb	r3, [r3, #0]
   199e0:	3314      	adds	r3, #20
   199e2:	b2db      	uxtb	r3, r3
   199e4:	0018      	movs	r0, r3
   199e6:	4b61      	ldr	r3, [pc, #388]	; (19b6c <_i2c_master_set_config+0x354>)
   199e8:	4798      	blx	r3
   199ea:	0003      	movs	r3, r0
   199ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   199ee:	693b      	ldr	r3, [r7, #16]
   199f0:	681b      	ldr	r3, [r3, #0]
   199f2:	22fa      	movs	r2, #250	; 0xfa
   199f4:	0092      	lsls	r2, r2, #2
   199f6:	4353      	muls	r3, r2
   199f8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   199fa:	693b      	ldr	r3, [r7, #16]
   199fc:	685b      	ldr	r3, [r3, #4]
   199fe:	22fa      	movs	r2, #250	; 0xfa
   19a00:	0092      	lsls	r2, r2, #2
   19a02:	4353      	muls	r3, r2
   19a04:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   19a06:	693b      	ldr	r3, [r7, #16]
   19a08:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   19a0a:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   19a0c:	4b58      	ldr	r3, [pc, #352]	; (19b70 <_i2c_master_set_config+0x358>)
   19a0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   19a10:	4798      	blx	r3
   19a12:	0005      	movs	r5, r0
   19a14:	000e      	movs	r6, r1
   19a16:	4b56      	ldr	r3, [pc, #344]	; (19b70 <_i2c_master_set_config+0x358>)
   19a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   19a1a:	4798      	blx	r3
   19a1c:	60b8      	str	r0, [r7, #8]
   19a1e:	60f9      	str	r1, [r7, #12]
   19a20:	4b53      	ldr	r3, [pc, #332]	; (19b70 <_i2c_master_set_config+0x358>)
   19a22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   19a24:	4798      	blx	r3
   19a26:	4c53      	ldr	r4, [pc, #332]	; (19b74 <_i2c_master_set_config+0x35c>)
   19a28:	4a53      	ldr	r2, [pc, #332]	; (19b78 <_i2c_master_set_config+0x360>)
   19a2a:	4b54      	ldr	r3, [pc, #336]	; (19b7c <_i2c_master_set_config+0x364>)
   19a2c:	47a0      	blx	r4
   19a2e:	0003      	movs	r3, r0
   19a30:	000c      	movs	r4, r1
   19a32:	603b      	str	r3, [r7, #0]
   19a34:	607c      	str	r4, [r7, #4]
   19a36:	4b4e      	ldr	r3, [pc, #312]	; (19b70 <_i2c_master_set_config+0x358>)
   19a38:	6a38      	ldr	r0, [r7, #32]
   19a3a:	4798      	blx	r3
   19a3c:	0002      	movs	r2, r0
   19a3e:	000b      	movs	r3, r1
   19a40:	4c4c      	ldr	r4, [pc, #304]	; (19b74 <_i2c_master_set_config+0x35c>)
   19a42:	6838      	ldr	r0, [r7, #0]
   19a44:	6879      	ldr	r1, [r7, #4]
   19a46:	47a0      	blx	r4
   19a48:	0003      	movs	r3, r0
   19a4a:	000c      	movs	r4, r1
   19a4c:	0018      	movs	r0, r3
   19a4e:	0021      	movs	r1, r4
   19a50:	4c4b      	ldr	r4, [pc, #300]	; (19b80 <_i2c_master_set_config+0x368>)
   19a52:	2200      	movs	r2, #0
   19a54:	4b4b      	ldr	r3, [pc, #300]	; (19b84 <_i2c_master_set_config+0x36c>)
   19a56:	47a0      	blx	r4
   19a58:	0003      	movs	r3, r0
   19a5a:	000c      	movs	r4, r1
   19a5c:	001a      	movs	r2, r3
   19a5e:	0023      	movs	r3, r4
   19a60:	4c44      	ldr	r4, [pc, #272]	; (19b74 <_i2c_master_set_config+0x35c>)
   19a62:	68b8      	ldr	r0, [r7, #8]
   19a64:	68f9      	ldr	r1, [r7, #12]
   19a66:	47a0      	blx	r4
   19a68:	0003      	movs	r3, r0
   19a6a:	000c      	movs	r4, r1
   19a6c:	001a      	movs	r2, r3
   19a6e:	0023      	movs	r3, r4
   19a70:	4c45      	ldr	r4, [pc, #276]	; (19b88 <_i2c_master_set_config+0x370>)
   19a72:	0028      	movs	r0, r5
   19a74:	0031      	movs	r1, r6
   19a76:	47a0      	blx	r4
   19a78:	0003      	movs	r3, r0
   19a7a:	000c      	movs	r4, r1
   19a7c:	001d      	movs	r5, r3
   19a7e:	0026      	movs	r6, r4
   19a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19a82:	005a      	lsls	r2, r3, #1
   19a84:	4b3a      	ldr	r3, [pc, #232]	; (19b70 <_i2c_master_set_config+0x358>)
   19a86:	0010      	movs	r0, r2
   19a88:	4798      	blx	r3
   19a8a:	0002      	movs	r2, r0
   19a8c:	000b      	movs	r3, r1
   19a8e:	4c3c      	ldr	r4, [pc, #240]	; (19b80 <_i2c_master_set_config+0x368>)
   19a90:	0028      	movs	r0, r5
   19a92:	0031      	movs	r1, r6
   19a94:	47a0      	blx	r4
   19a96:	0003      	movs	r3, r0
   19a98:	000c      	movs	r4, r1
   19a9a:	0018      	movs	r0, r3
   19a9c:	0021      	movs	r1, r4
   19a9e:	4c3a      	ldr	r4, [pc, #232]	; (19b88 <_i2c_master_set_config+0x370>)
   19aa0:	2200      	movs	r2, #0
   19aa2:	4b3a      	ldr	r3, [pc, #232]	; (19b8c <_i2c_master_set_config+0x374>)
   19aa4:	47a0      	blx	r4
   19aa6:	0003      	movs	r3, r0
   19aa8:	000c      	movs	r4, r1
   19aaa:	001d      	movs	r5, r3
   19aac:	0026      	movs	r6, r4
   19aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19ab0:	005a      	lsls	r2, r3, #1
   19ab2:	4b2f      	ldr	r3, [pc, #188]	; (19b70 <_i2c_master_set_config+0x358>)
   19ab4:	0010      	movs	r0, r2
   19ab6:	4798      	blx	r3
   19ab8:	0002      	movs	r2, r0
   19aba:	000b      	movs	r3, r1
   19abc:	4c34      	ldr	r4, [pc, #208]	; (19b90 <_i2c_master_set_config+0x378>)
   19abe:	0028      	movs	r0, r5
   19ac0:	0031      	movs	r1, r6
   19ac2:	47a0      	blx	r4
   19ac4:	0003      	movs	r3, r0
   19ac6:	000c      	movs	r4, r1
   19ac8:	0019      	movs	r1, r3
   19aca:	0022      	movs	r2, r4
   19acc:	4b31      	ldr	r3, [pc, #196]	; (19b94 <_i2c_master_set_config+0x37c>)
   19ace:	0008      	movs	r0, r1
   19ad0:	0011      	movs	r1, r2
   19ad2:	4798      	blx	r3
   19ad4:	0003      	movs	r3, r0
   19ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   19ad8:	693b      	ldr	r3, [r7, #16]
   19ada:	689a      	ldr	r2, [r3, #8]
   19adc:	2380      	movs	r3, #128	; 0x80
   19ade:	049b      	lsls	r3, r3, #18
   19ae0:	429a      	cmp	r2, r3
   19ae2:	d16a      	bne.n	19bba <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   19ae4:	4b22      	ldr	r3, [pc, #136]	; (19b70 <_i2c_master_set_config+0x358>)
   19ae6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   19ae8:	4798      	blx	r3
   19aea:	4c25      	ldr	r4, [pc, #148]	; (19b80 <_i2c_master_set_config+0x368>)
   19aec:	0002      	movs	r2, r0
   19aee:	000b      	movs	r3, r1
   19af0:	47a0      	blx	r4
   19af2:	0003      	movs	r3, r0
   19af4:	000c      	movs	r4, r1
   19af6:	001d      	movs	r5, r3
   19af8:	0026      	movs	r6, r4
   19afa:	4b1d      	ldr	r3, [pc, #116]	; (19b70 <_i2c_master_set_config+0x358>)
   19afc:	6a78      	ldr	r0, [r7, #36]	; 0x24
   19afe:	4798      	blx	r3
   19b00:	4c1c      	ldr	r4, [pc, #112]	; (19b74 <_i2c_master_set_config+0x35c>)
   19b02:	2200      	movs	r2, #0
   19b04:	4b24      	ldr	r3, [pc, #144]	; (19b98 <_i2c_master_set_config+0x380>)
   19b06:	47a0      	blx	r4
   19b08:	0003      	movs	r3, r0
   19b0a:	000c      	movs	r4, r1
   19b0c:	001a      	movs	r2, r3
   19b0e:	0023      	movs	r3, r4
   19b10:	4c1f      	ldr	r4, [pc, #124]	; (19b90 <_i2c_master_set_config+0x378>)
   19b12:	0028      	movs	r0, r5
   19b14:	0031      	movs	r1, r6
   19b16:	47a0      	blx	r4
   19b18:	0003      	movs	r3, r0
   19b1a:	000c      	movs	r4, r1
   19b1c:	0018      	movs	r0, r3
   19b1e:	0021      	movs	r1, r4
   19b20:	4c19      	ldr	r4, [pc, #100]	; (19b88 <_i2c_master_set_config+0x370>)
   19b22:	2200      	movs	r2, #0
   19b24:	4b19      	ldr	r3, [pc, #100]	; (19b8c <_i2c_master_set_config+0x374>)
   19b26:	47a0      	blx	r4
   19b28:	0003      	movs	r3, r0
   19b2a:	000c      	movs	r4, r1
   19b2c:	0019      	movs	r1, r3
   19b2e:	0022      	movs	r2, r4
   19b30:	4b18      	ldr	r3, [pc, #96]	; (19b94 <_i2c_master_set_config+0x37c>)
   19b32:	0008      	movs	r0, r1
   19b34:	0011      	movs	r1, r2
   19b36:	4798      	blx	r3
   19b38:	0003      	movs	r3, r0
   19b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   19b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   19b3e:	2b00      	cmp	r3, #0
   19b40:	d02e      	beq.n	19ba0 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   19b42:	4b16      	ldr	r3, [pc, #88]	; (19b9c <_i2c_master_set_config+0x384>)
   19b44:	6a79      	ldr	r1, [r7, #36]	; 0x24
   19b46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   19b48:	4798      	blx	r3
   19b4a:	0003      	movs	r3, r0
   19b4c:	1e9a      	subs	r2, r3, #2
   19b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   19b50:	1ad3      	subs	r3, r2, r3
   19b52:	653b      	str	r3, [r7, #80]	; 0x50
   19b54:	e031      	b.n	19bba <_i2c_master_set_config+0x3a2>
   19b56:	46c0      	nop			; (mov r8, r8)
   19b58:	00029351 	.word	0x00029351
   19b5c:	000196d9 	.word	0x000196d9
   19b60:	00029195 	.word	0x00029195
   19b64:	0002bf9d 	.word	0x0002bf9d
   19b68:	00019701 	.word	0x00019701
   19b6c:	0002bd61 	.word	0x0002bd61
   19b70:	00036971 	.word	0x00036971
   19b74:	00035ddd 	.word	0x00035ddd
   19b78:	e826d695 	.word	0xe826d695
   19b7c:	3e112e0b 	.word	0x3e112e0b
   19b80:	00035155 	.word	0x00035155
   19b84:	40240000 	.word	0x40240000
   19b88:	000362dd 	.word	0x000362dd
   19b8c:	3ff00000 	.word	0x3ff00000
   19b90:	00035775 	.word	0x00035775
   19b94:	00036909 	.word	0x00036909
   19b98:	40080000 	.word	0x40080000
   19b9c:	00034759 	.word	0x00034759
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   19ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19ba2:	005a      	lsls	r2, r3, #1
   19ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19ba6:	18d3      	adds	r3, r2, r3
   19ba8:	1e5a      	subs	r2, r3, #1
   19baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19bac:	0059      	lsls	r1, r3, #1
   19bae:	4b1d      	ldr	r3, [pc, #116]	; (19c24 <_i2c_master_set_config+0x40c>)
   19bb0:	0010      	movs	r0, r2
   19bb2:	4798      	blx	r3
   19bb4:	0003      	movs	r3, r0
   19bb6:	3b01      	subs	r3, #1
   19bb8:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   19bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19bbc:	2bff      	cmp	r3, #255	; 0xff
   19bbe:	dc08      	bgt.n	19bd2 <_i2c_master_set_config+0x3ba>
   19bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19bc2:	2b00      	cmp	r3, #0
   19bc4:	db05      	blt.n	19bd2 <_i2c_master_set_config+0x3ba>
   19bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   19bc8:	2bff      	cmp	r3, #255	; 0xff
   19bca:	dc02      	bgt.n	19bd2 <_i2c_master_set_config+0x3ba>
   19bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   19bce:	2b00      	cmp	r3, #0
   19bd0:	da06      	bge.n	19be0 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   19bd2:	233b      	movs	r3, #59	; 0x3b
   19bd4:	2210      	movs	r2, #16
   19bd6:	4694      	mov	ip, r2
   19bd8:	44bc      	add	ip, r7
   19bda:	4463      	add	r3, ip
   19bdc:	2240      	movs	r2, #64	; 0x40
   19bde:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   19be0:	233b      	movs	r3, #59	; 0x3b
   19be2:	2210      	movs	r2, #16
   19be4:	4694      	mov	ip, r2
   19be6:	44bc      	add	ip, r7
   19be8:	4463      	add	r3, ip
   19bea:	781b      	ldrb	r3, [r3, #0]
   19bec:	2b40      	cmp	r3, #64	; 0x40
   19bee:	d00e      	beq.n	19c0e <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   19bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19bf2:	22ff      	movs	r2, #255	; 0xff
   19bf4:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   19bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   19bf8:	041b      	lsls	r3, r3, #16
   19bfa:	0019      	movs	r1, r3
   19bfc:	23ff      	movs	r3, #255	; 0xff
   19bfe:	041b      	lsls	r3, r3, #16
   19c00:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   19c02:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   19c04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   19c06:	0612      	lsls	r2, r2, #24
   19c08:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   19c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19c0c:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   19c0e:	233b      	movs	r3, #59	; 0x3b
   19c10:	2210      	movs	r2, #16
   19c12:	4694      	mov	ip, r2
   19c14:	44bc      	add	ip, r7
   19c16:	4463      	add	r3, ip
   19c18:	781b      	ldrb	r3, [r3, #0]
}
   19c1a:	0018      	movs	r0, r3
   19c1c:	46bd      	mov	sp, r7
   19c1e:	b017      	add	sp, #92	; 0x5c
   19c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19c22:	46c0      	nop			; (mov r8, r8)
   19c24:	00034759 	.word	0x00034759

00019c28 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   19c28:	b590      	push	{r4, r7, lr}
   19c2a:	b08b      	sub	sp, #44	; 0x2c
   19c2c:	af00      	add	r7, sp, #0
   19c2e:	60f8      	str	r0, [r7, #12]
   19c30:	60b9      	str	r1, [r7, #8]
   19c32:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   19c34:	68fb      	ldr	r3, [r7, #12]
   19c36:	68ba      	ldr	r2, [r7, #8]
   19c38:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   19c3a:	68fb      	ldr	r3, [r7, #12]
   19c3c:	681b      	ldr	r3, [r3, #0]
   19c3e:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   19c40:	68fb      	ldr	r3, [r7, #12]
   19c42:	681b      	ldr	r3, [r3, #0]
   19c44:	0018      	movs	r0, r3
   19c46:	4b3b      	ldr	r3, [pc, #236]	; (19d34 <i2c_master_init+0x10c>)
   19c48:	4798      	blx	r3
   19c4a:	0003      	movs	r3, r0
   19c4c:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   19c4e:	6a3b      	ldr	r3, [r7, #32]
   19c50:	3302      	adds	r3, #2
   19c52:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   19c54:	6a3b      	ldr	r3, [r7, #32]
   19c56:	3314      	adds	r3, #20
   19c58:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   19c5a:	2201      	movs	r2, #1
   19c5c:	69fb      	ldr	r3, [r7, #28]
   19c5e:	409a      	lsls	r2, r3
   19c60:	0013      	movs	r3, r2
   19c62:	0019      	movs	r1, r3
   19c64:	2002      	movs	r0, #2
   19c66:	4b34      	ldr	r3, [pc, #208]	; (19d38 <i2c_master_init+0x110>)
   19c68:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   19c6a:	2314      	movs	r3, #20
   19c6c:	18fb      	adds	r3, r7, r3
   19c6e:	0018      	movs	r0, r3
   19c70:	4b32      	ldr	r3, [pc, #200]	; (19d3c <i2c_master_init+0x114>)
   19c72:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   19c74:	687b      	ldr	r3, [r7, #4]
   19c76:	7b1a      	ldrb	r2, [r3, #12]
   19c78:	2314      	movs	r3, #20
   19c7a:	18fb      	adds	r3, r7, r3
   19c7c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   19c7e:	69bb      	ldr	r3, [r7, #24]
   19c80:	b2db      	uxtb	r3, r3
   19c82:	2214      	movs	r2, #20
   19c84:	18ba      	adds	r2, r7, r2
   19c86:	0011      	movs	r1, r2
   19c88:	0018      	movs	r0, r3
   19c8a:	4b2d      	ldr	r3, [pc, #180]	; (19d40 <i2c_master_init+0x118>)
   19c8c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   19c8e:	69bb      	ldr	r3, [r7, #24]
   19c90:	b2db      	uxtb	r3, r3
   19c92:	0018      	movs	r0, r3
   19c94:	4b2b      	ldr	r3, [pc, #172]	; (19d44 <i2c_master_init+0x11c>)
   19c96:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   19c98:	687b      	ldr	r3, [r7, #4]
   19c9a:	7b1b      	ldrb	r3, [r3, #12]
   19c9c:	2100      	movs	r1, #0
   19c9e:	0018      	movs	r0, r3
   19ca0:	4b29      	ldr	r3, [pc, #164]	; (19d48 <i2c_master_init+0x120>)
   19ca2:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   19ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19ca6:	681b      	ldr	r3, [r3, #0]
   19ca8:	2202      	movs	r2, #2
   19caa:	4013      	ands	r3, r2
   19cac:	d001      	beq.n	19cb2 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   19cae:	231c      	movs	r3, #28
   19cb0:	e03b      	b.n	19d2a <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   19cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19cb4:	681b      	ldr	r3, [r3, #0]
   19cb6:	2201      	movs	r2, #1
   19cb8:	4013      	ands	r3, r2
   19cba:	d001      	beq.n	19cc0 <i2c_master_init+0x98>
		return STATUS_BUSY;
   19cbc:	2305      	movs	r3, #5
   19cbe:	e034      	b.n	19d2a <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   19cc0:	68fb      	ldr	r3, [r7, #12]
   19cc2:	681b      	ldr	r3, [r3, #0]
   19cc4:	2217      	movs	r2, #23
   19cc6:	18bc      	adds	r4, r7, r2
   19cc8:	0018      	movs	r0, r3
   19cca:	4b1a      	ldr	r3, [pc, #104]	; (19d34 <i2c_master_init+0x10c>)
   19ccc:	4798      	blx	r3
   19cce:	0003      	movs	r3, r0
   19cd0:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   19cd2:	4a1e      	ldr	r2, [pc, #120]	; (19d4c <i2c_master_init+0x124>)
   19cd4:	2317      	movs	r3, #23
   19cd6:	18fb      	adds	r3, r7, r3
   19cd8:	781b      	ldrb	r3, [r3, #0]
   19cda:	0011      	movs	r1, r2
   19cdc:	0018      	movs	r0, r3
   19cde:	4b1c      	ldr	r3, [pc, #112]	; (19d50 <i2c_master_init+0x128>)
   19ce0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   19ce2:	2317      	movs	r3, #23
   19ce4:	18fb      	adds	r3, r7, r3
   19ce6:	781a      	ldrb	r2, [r3, #0]
   19ce8:	4b1a      	ldr	r3, [pc, #104]	; (19d54 <i2c_master_init+0x12c>)
   19cea:	0092      	lsls	r2, r2, #2
   19cec:	68f9      	ldr	r1, [r7, #12]
   19cee:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   19cf0:	68fb      	ldr	r3, [r7, #12]
   19cf2:	2200      	movs	r2, #0
   19cf4:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   19cf6:	68fb      	ldr	r3, [r7, #12]
   19cf8:	2200      	movs	r2, #0
   19cfa:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   19cfc:	68fb      	ldr	r3, [r7, #12]
   19cfe:	2200      	movs	r2, #0
   19d00:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   19d02:	68fb      	ldr	r3, [r7, #12]
   19d04:	2200      	movs	r2, #0
   19d06:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   19d08:	68fb      	ldr	r3, [r7, #12]
   19d0a:	2225      	movs	r2, #37	; 0x25
   19d0c:	2100      	movs	r1, #0
   19d0e:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   19d10:	68fb      	ldr	r3, [r7, #12]
   19d12:	2200      	movs	r2, #0
   19d14:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   19d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19d18:	2214      	movs	r2, #20
   19d1a:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   19d1c:	687a      	ldr	r2, [r7, #4]
   19d1e:	68fb      	ldr	r3, [r7, #12]
   19d20:	0011      	movs	r1, r2
   19d22:	0018      	movs	r0, r3
   19d24:	4b0c      	ldr	r3, [pc, #48]	; (19d58 <i2c_master_init+0x130>)
   19d26:	4798      	blx	r3
   19d28:	0003      	movs	r3, r0
}
   19d2a:	0018      	movs	r0, r3
   19d2c:	46bd      	mov	sp, r7
   19d2e:	b00b      	add	sp, #44	; 0x2c
   19d30:	bd90      	pop	{r4, r7, pc}
   19d32:	46c0      	nop			; (mov r8, r8)
   19d34:	00029351 	.word	0x00029351
   19d38:	0001967d 	.word	0x0001967d
   19d3c:	00019665 	.word	0x00019665
   19d40:	0002bc3d 	.word	0x0002bc3d
   19d44:	0002bc81 	.word	0x0002bc81
   19d48:	00029109 	.word	0x00029109
   19d4c:	00012bcd 	.word	0x00012bcd
   19d50:	000293b5 	.word	0x000293b5
   19d54:	20005834 	.word	0x20005834
   19d58:	00019819 	.word	0x00019819

00019d5c <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   19d5c:	b580      	push	{r7, lr}
   19d5e:	b084      	sub	sp, #16
   19d60:	af00      	add	r7, sp, #0
   19d62:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   19d64:	687b      	ldr	r3, [r7, #4]
   19d66:	681b      	ldr	r3, [r3, #0]
   19d68:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   19d6a:	687b      	ldr	r3, [r7, #4]
   19d6c:	0018      	movs	r0, r3
   19d6e:	4b0f      	ldr	r3, [pc, #60]	; (19dac <i2c_master_reset+0x50>)
   19d70:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   19d72:	687b      	ldr	r3, [r7, #4]
   19d74:	0018      	movs	r0, r3
   19d76:	4b0e      	ldr	r3, [pc, #56]	; (19db0 <i2c_master_reset+0x54>)
   19d78:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   19d7a:	4b0e      	ldr	r3, [pc, #56]	; (19db4 <i2c_master_reset+0x58>)
   19d7c:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   19d7e:	687b      	ldr	r3, [r7, #4]
   19d80:	681b      	ldr	r3, [r3, #0]
   19d82:	0018      	movs	r0, r3
   19d84:	4b0c      	ldr	r3, [pc, #48]	; (19db8 <i2c_master_reset+0x5c>)
   19d86:	4798      	blx	r3
   19d88:	0003      	movs	r3, r0
   19d8a:	0018      	movs	r0, r3
   19d8c:	4b0b      	ldr	r3, [pc, #44]	; (19dbc <i2c_master_reset+0x60>)
   19d8e:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   19d90:	4b0b      	ldr	r3, [pc, #44]	; (19dc0 <i2c_master_reset+0x64>)
   19d92:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   19d94:	687b      	ldr	r3, [r7, #4]
   19d96:	0018      	movs	r0, r3
   19d98:	4b04      	ldr	r3, [pc, #16]	; (19dac <i2c_master_reset+0x50>)
   19d9a:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   19d9c:	68fb      	ldr	r3, [r7, #12]
   19d9e:	2201      	movs	r2, #1
   19da0:	601a      	str	r2, [r3, #0]
}
   19da2:	46c0      	nop			; (mov r8, r8)
   19da4:	46bd      	mov	sp, r7
   19da6:	b004      	add	sp, #16
   19da8:	bd80      	pop	{r7, pc}
   19daa:	46c0      	nop			; (mov r8, r8)
   19dac:	0001979d 	.word	0x0001979d
   19db0:	000197c1 	.word	0x000197c1
   19db4:	00019721 	.word	0x00019721
   19db8:	00029421 	.word	0x00029421
   19dbc:	0002bdb9 	.word	0x0002bdb9
   19dc0:	00019735 	.word	0x00019735

00019dc4 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   19dc4:	b580      	push	{r7, lr}
   19dc6:	b084      	sub	sp, #16
   19dc8:	af00      	add	r7, sp, #0
   19dca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   19dcc:	687b      	ldr	r3, [r7, #4]
   19dce:	681b      	ldr	r3, [r3, #0]
   19dd0:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   19dd2:	68fb      	ldr	r3, [r7, #12]
   19dd4:	7e1b      	ldrb	r3, [r3, #24]
   19dd6:	b2db      	uxtb	r3, r3
   19dd8:	001a      	movs	r2, r3
   19dda:	2302      	movs	r3, #2
   19ddc:	4013      	ands	r3, r2
   19dde:	d00b      	beq.n	19df8 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   19de0:	68fb      	ldr	r3, [r7, #12]
   19de2:	2202      	movs	r2, #2
   19de4:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   19de6:	68fb      	ldr	r3, [r7, #12]
   19de8:	8b5b      	ldrh	r3, [r3, #26]
   19dea:	b29b      	uxth	r3, r3
   19dec:	001a      	movs	r2, r3
   19dee:	2302      	movs	r3, #2
   19df0:	4013      	ands	r3, r2
   19df2:	d011      	beq.n	19e18 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   19df4:	2341      	movs	r3, #65	; 0x41
   19df6:	e010      	b.n	19e1a <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   19df8:	68fb      	ldr	r3, [r7, #12]
   19dfa:	8b5b      	ldrh	r3, [r3, #26]
   19dfc:	b29b      	uxth	r3, r3
   19dfe:	001a      	movs	r2, r3
   19e00:	2304      	movs	r3, #4
   19e02:	4013      	ands	r3, r2
   19e04:	d008      	beq.n	19e18 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   19e06:	68fb      	ldr	r3, [r7, #12]
   19e08:	685b      	ldr	r3, [r3, #4]
   19e0a:	22c0      	movs	r2, #192	; 0xc0
   19e0c:	0292      	lsls	r2, r2, #10
   19e0e:	431a      	orrs	r2, r3
   19e10:	68fb      	ldr	r3, [r7, #12]
   19e12:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   19e14:	2318      	movs	r3, #24
   19e16:	e000      	b.n	19e1a <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   19e18:	2300      	movs	r3, #0
}
   19e1a:	0018      	movs	r0, r3
   19e1c:	46bd      	mov	sp, r7
   19e1e:	b004      	add	sp, #16
   19e20:	bd80      	pop	{r7, pc}

00019e22 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   19e22:	b580      	push	{r7, lr}
   19e24:	b084      	sub	sp, #16
   19e26:	af00      	add	r7, sp, #0
   19e28:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   19e2a:	687b      	ldr	r3, [r7, #4]
   19e2c:	681b      	ldr	r3, [r3, #0]
   19e2e:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   19e30:	230e      	movs	r3, #14
   19e32:	18fb      	adds	r3, r7, r3
   19e34:	2200      	movs	r2, #0
   19e36:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   19e38:	e00f      	b.n	19e5a <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   19e3a:	230e      	movs	r3, #14
   19e3c:	18fb      	adds	r3, r7, r3
   19e3e:	220e      	movs	r2, #14
   19e40:	18ba      	adds	r2, r7, r2
   19e42:	8812      	ldrh	r2, [r2, #0]
   19e44:	3201      	adds	r2, #1
   19e46:	801a      	strh	r2, [r3, #0]
   19e48:	687b      	ldr	r3, [r7, #4]
   19e4a:	891b      	ldrh	r3, [r3, #8]
   19e4c:	220e      	movs	r2, #14
   19e4e:	18ba      	adds	r2, r7, r2
   19e50:	8812      	ldrh	r2, [r2, #0]
   19e52:	429a      	cmp	r2, r3
   19e54:	d301      	bcc.n	19e5a <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   19e56:	2312      	movs	r3, #18
   19e58:	e00e      	b.n	19e78 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   19e5a:	68bb      	ldr	r3, [r7, #8]
   19e5c:	7e1b      	ldrb	r3, [r3, #24]
   19e5e:	b2db      	uxtb	r3, r3
   19e60:	001a      	movs	r2, r3
   19e62:	2301      	movs	r3, #1
   19e64:	4013      	ands	r3, r2
   19e66:	d106      	bne.n	19e76 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   19e68:	68bb      	ldr	r3, [r7, #8]
   19e6a:	7e1b      	ldrb	r3, [r3, #24]
   19e6c:	b2db      	uxtb	r3, r3
   19e6e:	001a      	movs	r2, r3
   19e70:	2302      	movs	r3, #2
   19e72:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   19e74:	d0e1      	beq.n	19e3a <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   19e76:	2300      	movs	r3, #0
}
   19e78:	0018      	movs	r0, r3
   19e7a:	46bd      	mov	sp, r7
   19e7c:	b004      	add	sp, #16
   19e7e:	bd80      	pop	{r7, pc}

00019e80 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   19e80:	b590      	push	{r4, r7, lr}
   19e82:	b085      	sub	sp, #20
   19e84:	af00      	add	r7, sp, #0
   19e86:	6078      	str	r0, [r7, #4]
   19e88:	000a      	movs	r2, r1
   19e8a:	1cfb      	adds	r3, r7, #3
   19e8c:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   19e8e:	687b      	ldr	r3, [r7, #4]
   19e90:	681b      	ldr	r3, [r3, #0]
   19e92:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   19e94:	68fb      	ldr	r3, [r7, #12]
   19e96:	685b      	ldr	r3, [r3, #4]
   19e98:	2280      	movs	r2, #128	; 0x80
   19e9a:	02d2      	lsls	r2, r2, #11
   19e9c:	431a      	orrs	r2, r3
   19e9e:	68fb      	ldr	r3, [r7, #12]
   19ea0:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   19ea2:	1cfb      	adds	r3, r7, #3
   19ea4:	781a      	ldrb	r2, [r3, #0]
   19ea6:	68fb      	ldr	r3, [r7, #12]
   19ea8:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   19eaa:	230b      	movs	r3, #11
   19eac:	18fc      	adds	r4, r7, r3
   19eae:	687b      	ldr	r3, [r7, #4]
   19eb0:	0018      	movs	r0, r3
   19eb2:	4b07      	ldr	r3, [pc, #28]	; (19ed0 <_i2c_master_send_hs_master_code+0x50>)
   19eb4:	4798      	blx	r3
   19eb6:	0003      	movs	r3, r0
   19eb8:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   19eba:	68fb      	ldr	r3, [r7, #12]
   19ebc:	2201      	movs	r2, #1
   19ebe:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   19ec0:	230b      	movs	r3, #11
   19ec2:	18fb      	adds	r3, r7, r3
   19ec4:	781b      	ldrb	r3, [r3, #0]
}
   19ec6:	0018      	movs	r0, r3
   19ec8:	46bd      	mov	sp, r7
   19eca:	b005      	add	sp, #20
   19ecc:	bd90      	pop	{r4, r7, pc}
   19ece:	46c0      	nop			; (mov r8, r8)
   19ed0:	00019e23 	.word	0x00019e23

00019ed4 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   19ed4:	b580      	push	{r7, lr}
   19ed6:	af00      	add	r7, sp, #0
   19ed8:	2000      	movs	r0, #0
   19eda:	4b02      	ldr	r3, [pc, #8]	; (19ee4 <TC3_Handler+0x10>)
   19edc:	4798      	blx	r3
   19ede:	46c0      	nop			; (mov r8, r8)
   19ee0:	46bd      	mov	sp, r7
   19ee2:	bd80      	pop	{r7, pc}
   19ee4:	00019f11 	.word	0x00019f11

00019ee8 <TC4_Handler>:
   19ee8:	b580      	push	{r7, lr}
   19eea:	af00      	add	r7, sp, #0
   19eec:	2001      	movs	r0, #1
   19eee:	4b02      	ldr	r3, [pc, #8]	; (19ef8 <TC4_Handler+0x10>)
   19ef0:	4798      	blx	r3
   19ef2:	46c0      	nop			; (mov r8, r8)
   19ef4:	46bd      	mov	sp, r7
   19ef6:	bd80      	pop	{r7, pc}
   19ef8:	00019f11 	.word	0x00019f11

00019efc <TC5_Handler>:
   19efc:	b580      	push	{r7, lr}
   19efe:	af00      	add	r7, sp, #0
   19f00:	2002      	movs	r0, #2
   19f02:	4b02      	ldr	r3, [pc, #8]	; (19f0c <TC5_Handler+0x10>)
   19f04:	4798      	blx	r3
   19f06:	46c0      	nop			; (mov r8, r8)
   19f08:	46bd      	mov	sp, r7
   19f0a:	bd80      	pop	{r7, pc}
   19f0c:	00019f11 	.word	0x00019f11

00019f10 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   19f10:	b580      	push	{r7, lr}
   19f12:	b084      	sub	sp, #16
   19f14:	af00      	add	r7, sp, #0
   19f16:	0002      	movs	r2, r0
   19f18:	1dfb      	adds	r3, r7, #7
   19f1a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   19f1c:	1dfb      	adds	r3, r7, #7
   19f1e:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   19f20:	4b28      	ldr	r3, [pc, #160]	; (19fc4 <_tc_interrupt_handler+0xb4>)
   19f22:	0092      	lsls	r2, r2, #2
   19f24:	58d3      	ldr	r3, [r2, r3]
   19f26:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   19f28:	68fb      	ldr	r3, [r7, #12]
   19f2a:	681b      	ldr	r3, [r3, #0]
   19f2c:	7b9b      	ldrb	r3, [r3, #14]
   19f2e:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   19f30:	68fa      	ldr	r2, [r7, #12]
   19f32:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   19f34:	4013      	ands	r3, r2
   19f36:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   19f38:	68fb      	ldr	r3, [r7, #12]
   19f3a:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   19f3c:	230b      	movs	r3, #11
   19f3e:	18fb      	adds	r3, r7, r3
   19f40:	400a      	ands	r2, r1
   19f42:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   19f44:	230b      	movs	r3, #11
   19f46:	18fb      	adds	r3, r7, r3
   19f48:	781b      	ldrb	r3, [r3, #0]
   19f4a:	2201      	movs	r2, #1
   19f4c:	4013      	ands	r3, r2
   19f4e:	d008      	beq.n	19f62 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   19f50:	68fb      	ldr	r3, [r7, #12]
   19f52:	689b      	ldr	r3, [r3, #8]
   19f54:	68fa      	ldr	r2, [r7, #12]
   19f56:	0010      	movs	r0, r2
   19f58:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   19f5a:	68fb      	ldr	r3, [r7, #12]
   19f5c:	681b      	ldr	r3, [r3, #0]
   19f5e:	2201      	movs	r2, #1
   19f60:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   19f62:	230b      	movs	r3, #11
   19f64:	18fb      	adds	r3, r7, r3
   19f66:	781b      	ldrb	r3, [r3, #0]
   19f68:	2202      	movs	r2, #2
   19f6a:	4013      	ands	r3, r2
   19f6c:	d008      	beq.n	19f80 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   19f6e:	68fb      	ldr	r3, [r7, #12]
   19f70:	68db      	ldr	r3, [r3, #12]
   19f72:	68fa      	ldr	r2, [r7, #12]
   19f74:	0010      	movs	r0, r2
   19f76:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   19f78:	68fb      	ldr	r3, [r7, #12]
   19f7a:	681b      	ldr	r3, [r3, #0]
   19f7c:	2202      	movs	r2, #2
   19f7e:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   19f80:	230b      	movs	r3, #11
   19f82:	18fb      	adds	r3, r7, r3
   19f84:	781b      	ldrb	r3, [r3, #0]
   19f86:	2210      	movs	r2, #16
   19f88:	4013      	ands	r3, r2
   19f8a:	d008      	beq.n	19f9e <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   19f8c:	68fb      	ldr	r3, [r7, #12]
   19f8e:	691b      	ldr	r3, [r3, #16]
   19f90:	68fa      	ldr	r2, [r7, #12]
   19f92:	0010      	movs	r0, r2
   19f94:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   19f96:	68fb      	ldr	r3, [r7, #12]
   19f98:	681b      	ldr	r3, [r3, #0]
   19f9a:	2210      	movs	r2, #16
   19f9c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   19f9e:	230b      	movs	r3, #11
   19fa0:	18fb      	adds	r3, r7, r3
   19fa2:	781b      	ldrb	r3, [r3, #0]
   19fa4:	2220      	movs	r2, #32
   19fa6:	4013      	ands	r3, r2
   19fa8:	d008      	beq.n	19fbc <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   19faa:	68fb      	ldr	r3, [r7, #12]
   19fac:	695b      	ldr	r3, [r3, #20]
   19fae:	68fa      	ldr	r2, [r7, #12]
   19fb0:	0010      	movs	r0, r2
   19fb2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   19fb4:	68fb      	ldr	r3, [r7, #12]
   19fb6:	681b      	ldr	r3, [r3, #0]
   19fb8:	2220      	movs	r2, #32
   19fba:	739a      	strb	r2, [r3, #14]
	}
}
   19fbc:	46c0      	nop			; (mov r8, r8)
   19fbe:	46bd      	mov	sp, r7
   19fc0:	b004      	add	sp, #16
   19fc2:	bd80      	pop	{r7, pc}
   19fc4:	2000464c 	.word	0x2000464c

00019fc8 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   19fc8:	b580      	push	{r7, lr}
   19fca:	b084      	sub	sp, #16
   19fcc:	af00      	add	r7, sp, #0
   19fce:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   19fd0:	2300      	movs	r3, #0
   19fd2:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   19fd4:	687b      	ldr	r3, [r7, #4]
   19fd6:	2b00      	cmp	r3, #0
   19fd8:	d101      	bne.n	19fde <FreeRTOS_CLIRegisterCommand+0x16>
   19fda:	b672      	cpsid	i
   19fdc:	e7fe      	b.n	19fdc <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   19fde:	2008      	movs	r0, #8
   19fe0:	4b11      	ldr	r3, [pc, #68]	; (1a028 <FreeRTOS_CLIRegisterCommand+0x60>)
   19fe2:	4798      	blx	r3
   19fe4:	0003      	movs	r3, r0
   19fe6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   19fe8:	68bb      	ldr	r3, [r7, #8]
   19fea:	2b00      	cmp	r3, #0
   19fec:	d101      	bne.n	19ff2 <FreeRTOS_CLIRegisterCommand+0x2a>
   19fee:	b672      	cpsid	i
   19ff0:	e7fe      	b.n	19ff0 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   19ff2:	68bb      	ldr	r3, [r7, #8]
   19ff4:	2b00      	cmp	r3, #0
   19ff6:	d012      	beq.n	1a01e <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   19ff8:	4b0c      	ldr	r3, [pc, #48]	; (1a02c <FreeRTOS_CLIRegisterCommand+0x64>)
   19ffa:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   19ffc:	68bb      	ldr	r3, [r7, #8]
   19ffe:	687a      	ldr	r2, [r7, #4]
   1a000:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   1a002:	68bb      	ldr	r3, [r7, #8]
   1a004:	2200      	movs	r2, #0
   1a006:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   1a008:	4b09      	ldr	r3, [pc, #36]	; (1a030 <FreeRTOS_CLIRegisterCommand+0x68>)
   1a00a:	681b      	ldr	r3, [r3, #0]
   1a00c:	68ba      	ldr	r2, [r7, #8]
   1a00e:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   1a010:	4b07      	ldr	r3, [pc, #28]	; (1a030 <FreeRTOS_CLIRegisterCommand+0x68>)
   1a012:	68ba      	ldr	r2, [r7, #8]
   1a014:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   1a016:	4b07      	ldr	r3, [pc, #28]	; (1a034 <FreeRTOS_CLIRegisterCommand+0x6c>)
   1a018:	4798      	blx	r3

		xReturn = pdPASS;
   1a01a:	2301      	movs	r3, #1
   1a01c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   1a01e:	68fb      	ldr	r3, [r7, #12]
}
   1a020:	0018      	movs	r0, r3
   1a022:	46bd      	mov	sp, r7
   1a024:	b004      	add	sp, #16
   1a026:	bd80      	pop	{r7, pc}
   1a028:	0001c3e1 	.word	0x0001c3e1
   1a02c:	0001c2a9 	.word	0x0001c2a9
   1a030:	200000f4 	.word	0x200000f4
   1a034:	0001c2cd 	.word	0x0001c2cd

0001a038 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   1a038:	b580      	push	{r7, lr}
   1a03a:	b088      	sub	sp, #32
   1a03c:	af00      	add	r7, sp, #0
   1a03e:	60f8      	str	r0, [r7, #12]
   1a040:	60b9      	str	r1, [r7, #8]
   1a042:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   1a044:	2301      	movs	r3, #1
   1a046:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   1a048:	4b3d      	ldr	r3, [pc, #244]	; (1a140 <FreeRTOS_CLIProcessCommand+0x108>)
   1a04a:	681b      	ldr	r3, [r3, #0]
   1a04c:	2b00      	cmp	r3, #0
   1a04e:	d144      	bne.n	1a0da <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   1a050:	4b3b      	ldr	r3, [pc, #236]	; (1a140 <FreeRTOS_CLIProcessCommand+0x108>)
   1a052:	4a3c      	ldr	r2, [pc, #240]	; (1a144 <FreeRTOS_CLIProcessCommand+0x10c>)
   1a054:	601a      	str	r2, [r3, #0]
   1a056:	e03a      	b.n	1a0ce <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   1a058:	4b39      	ldr	r3, [pc, #228]	; (1a140 <FreeRTOS_CLIProcessCommand+0x108>)
   1a05a:	681b      	ldr	r3, [r3, #0]
   1a05c:	681b      	ldr	r3, [r3, #0]
   1a05e:	681b      	ldr	r3, [r3, #0]
   1a060:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   1a062:	69bb      	ldr	r3, [r7, #24]
   1a064:	0018      	movs	r0, r3
   1a066:	4b38      	ldr	r3, [pc, #224]	; (1a148 <FreeRTOS_CLIProcessCommand+0x110>)
   1a068:	4798      	blx	r3
   1a06a:	0003      	movs	r3, r0
   1a06c:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   1a06e:	68fa      	ldr	r2, [r7, #12]
   1a070:	697b      	ldr	r3, [r7, #20]
   1a072:	18d3      	adds	r3, r2, r3
   1a074:	781b      	ldrb	r3, [r3, #0]
   1a076:	2b20      	cmp	r3, #32
   1a078:	d005      	beq.n	1a086 <FreeRTOS_CLIProcessCommand+0x4e>
   1a07a:	68fa      	ldr	r2, [r7, #12]
   1a07c:	697b      	ldr	r3, [r7, #20]
   1a07e:	18d3      	adds	r3, r2, r3
   1a080:	781b      	ldrb	r3, [r3, #0]
   1a082:	2b00      	cmp	r3, #0
   1a084:	d11e      	bne.n	1a0c4 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   1a086:	697a      	ldr	r2, [r7, #20]
   1a088:	69b9      	ldr	r1, [r7, #24]
   1a08a:	68fb      	ldr	r3, [r7, #12]
   1a08c:	0018      	movs	r0, r3
   1a08e:	4b2f      	ldr	r3, [pc, #188]	; (1a14c <FreeRTOS_CLIProcessCommand+0x114>)
   1a090:	4798      	blx	r3
   1a092:	1e03      	subs	r3, r0, #0
   1a094:	d116      	bne.n	1a0c4 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   1a096:	4b2a      	ldr	r3, [pc, #168]	; (1a140 <FreeRTOS_CLIProcessCommand+0x108>)
   1a098:	681b      	ldr	r3, [r3, #0]
   1a09a:	681b      	ldr	r3, [r3, #0]
   1a09c:	7b1b      	ldrb	r3, [r3, #12]
   1a09e:	b25b      	sxtb	r3, r3
   1a0a0:	2b00      	cmp	r3, #0
   1a0a2:	db19      	blt.n	1a0d8 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   1a0a4:	68fb      	ldr	r3, [r7, #12]
   1a0a6:	0018      	movs	r0, r3
   1a0a8:	4b29      	ldr	r3, [pc, #164]	; (1a150 <FreeRTOS_CLIProcessCommand+0x118>)
   1a0aa:	4798      	blx	r3
   1a0ac:	0003      	movs	r3, r0
   1a0ae:	001a      	movs	r2, r3
   1a0b0:	4b23      	ldr	r3, [pc, #140]	; (1a140 <FreeRTOS_CLIProcessCommand+0x108>)
   1a0b2:	681b      	ldr	r3, [r3, #0]
   1a0b4:	681b      	ldr	r3, [r3, #0]
   1a0b6:	7b1b      	ldrb	r3, [r3, #12]
   1a0b8:	b25b      	sxtb	r3, r3
   1a0ba:	429a      	cmp	r2, r3
   1a0bc:	d00c      	beq.n	1a0d8 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   1a0be:	2300      	movs	r3, #0
   1a0c0:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   1a0c2:	e009      	b.n	1a0d8 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   1a0c4:	4b1e      	ldr	r3, [pc, #120]	; (1a140 <FreeRTOS_CLIProcessCommand+0x108>)
   1a0c6:	681b      	ldr	r3, [r3, #0]
   1a0c8:	685a      	ldr	r2, [r3, #4]
   1a0ca:	4b1d      	ldr	r3, [pc, #116]	; (1a140 <FreeRTOS_CLIProcessCommand+0x108>)
   1a0cc:	601a      	str	r2, [r3, #0]
   1a0ce:	4b1c      	ldr	r3, [pc, #112]	; (1a140 <FreeRTOS_CLIProcessCommand+0x108>)
   1a0d0:	681b      	ldr	r3, [r3, #0]
   1a0d2:	2b00      	cmp	r3, #0
   1a0d4:	d1c0      	bne.n	1a058 <FreeRTOS_CLIProcessCommand+0x20>
   1a0d6:	e000      	b.n	1a0da <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   1a0d8:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   1a0da:	4b19      	ldr	r3, [pc, #100]	; (1a140 <FreeRTOS_CLIProcessCommand+0x108>)
   1a0dc:	681b      	ldr	r3, [r3, #0]
   1a0de:	2b00      	cmp	r3, #0
   1a0e0:	d00c      	beq.n	1a0fc <FreeRTOS_CLIProcessCommand+0xc4>
   1a0e2:	69fb      	ldr	r3, [r7, #28]
   1a0e4:	2b00      	cmp	r3, #0
   1a0e6:	d109      	bne.n	1a0fc <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1a0e8:	687a      	ldr	r2, [r7, #4]
   1a0ea:	491a      	ldr	r1, [pc, #104]	; (1a154 <FreeRTOS_CLIProcessCommand+0x11c>)
   1a0ec:	68bb      	ldr	r3, [r7, #8]
   1a0ee:	0018      	movs	r0, r3
   1a0f0:	4b19      	ldr	r3, [pc, #100]	; (1a158 <FreeRTOS_CLIProcessCommand+0x120>)
   1a0f2:	4798      	blx	r3
		pxCommand = NULL;
   1a0f4:	4b12      	ldr	r3, [pc, #72]	; (1a140 <FreeRTOS_CLIProcessCommand+0x108>)
   1a0f6:	2200      	movs	r2, #0
   1a0f8:	601a      	str	r2, [r3, #0]
   1a0fa:	e01c      	b.n	1a136 <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   1a0fc:	4b10      	ldr	r3, [pc, #64]	; (1a140 <FreeRTOS_CLIProcessCommand+0x108>)
   1a0fe:	681b      	ldr	r3, [r3, #0]
   1a100:	2b00      	cmp	r3, #0
   1a102:	d010      	beq.n	1a126 <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   1a104:	4b0e      	ldr	r3, [pc, #56]	; (1a140 <FreeRTOS_CLIProcessCommand+0x108>)
   1a106:	681b      	ldr	r3, [r3, #0]
   1a108:	681b      	ldr	r3, [r3, #0]
   1a10a:	689b      	ldr	r3, [r3, #8]
   1a10c:	68fa      	ldr	r2, [r7, #12]
   1a10e:	6879      	ldr	r1, [r7, #4]
   1a110:	68b8      	ldr	r0, [r7, #8]
   1a112:	4798      	blx	r3
   1a114:	0003      	movs	r3, r0
   1a116:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   1a118:	69fb      	ldr	r3, [r7, #28]
   1a11a:	2b00      	cmp	r3, #0
   1a11c:	d10b      	bne.n	1a136 <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   1a11e:	4b08      	ldr	r3, [pc, #32]	; (1a140 <FreeRTOS_CLIProcessCommand+0x108>)
   1a120:	2200      	movs	r2, #0
   1a122:	601a      	str	r2, [r3, #0]
   1a124:	e007      	b.n	1a136 <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1a126:	687a      	ldr	r2, [r7, #4]
   1a128:	490c      	ldr	r1, [pc, #48]	; (1a15c <FreeRTOS_CLIProcessCommand+0x124>)
   1a12a:	68bb      	ldr	r3, [r7, #8]
   1a12c:	0018      	movs	r0, r3
   1a12e:	4b0a      	ldr	r3, [pc, #40]	; (1a158 <FreeRTOS_CLIProcessCommand+0x120>)
   1a130:	4798      	blx	r3
		xReturn = pdFALSE;
   1a132:	2300      	movs	r3, #0
   1a134:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   1a136:	69fb      	ldr	r3, [r7, #28]
}
   1a138:	0018      	movs	r0, r3
   1a13a:	46bd      	mov	sp, r7
   1a13c:	b008      	add	sp, #32
   1a13e:	bd80      	pop	{r7, pc}
   1a140:	20000924 	.word	0x20000924
   1a144:	200000ec 	.word	0x200000ec
   1a148:	00037057 	.word	0x00037057
   1a14c:	00037065 	.word	0x00037065
   1a150:	0001a1c1 	.word	0x0001a1c1
   1a154:	000392f8 	.word	0x000392f8
   1a158:	00037087 	.word	0x00037087
   1a15c:	00039350 	.word	0x00039350

0001a160 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   1a160:	b580      	push	{r7, lr}
   1a162:	b086      	sub	sp, #24
   1a164:	af00      	add	r7, sp, #0
   1a166:	60f8      	str	r0, [r7, #12]
   1a168:	60b9      	str	r1, [r7, #8]
   1a16a:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   1a16c:	4b11      	ldr	r3, [pc, #68]	; (1a1b4 <prvHelpCommand+0x54>)
   1a16e:	681b      	ldr	r3, [r3, #0]
   1a170:	2b00      	cmp	r3, #0
   1a172:	d102      	bne.n	1a17a <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   1a174:	4b0f      	ldr	r3, [pc, #60]	; (1a1b4 <prvHelpCommand+0x54>)
   1a176:	4a10      	ldr	r2, [pc, #64]	; (1a1b8 <prvHelpCommand+0x58>)
   1a178:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   1a17a:	4b0e      	ldr	r3, [pc, #56]	; (1a1b4 <prvHelpCommand+0x54>)
   1a17c:	681b      	ldr	r3, [r3, #0]
   1a17e:	681b      	ldr	r3, [r3, #0]
   1a180:	6859      	ldr	r1, [r3, #4]
   1a182:	68ba      	ldr	r2, [r7, #8]
   1a184:	68fb      	ldr	r3, [r7, #12]
   1a186:	0018      	movs	r0, r3
   1a188:	4b0c      	ldr	r3, [pc, #48]	; (1a1bc <prvHelpCommand+0x5c>)
   1a18a:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   1a18c:	4b09      	ldr	r3, [pc, #36]	; (1a1b4 <prvHelpCommand+0x54>)
   1a18e:	681b      	ldr	r3, [r3, #0]
   1a190:	685a      	ldr	r2, [r3, #4]
   1a192:	4b08      	ldr	r3, [pc, #32]	; (1a1b4 <prvHelpCommand+0x54>)
   1a194:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   1a196:	4b07      	ldr	r3, [pc, #28]	; (1a1b4 <prvHelpCommand+0x54>)
   1a198:	681b      	ldr	r3, [r3, #0]
   1a19a:	2b00      	cmp	r3, #0
   1a19c:	d102      	bne.n	1a1a4 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   1a19e:	2300      	movs	r3, #0
   1a1a0:	617b      	str	r3, [r7, #20]
   1a1a2:	e001      	b.n	1a1a8 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   1a1a4:	2301      	movs	r3, #1
   1a1a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   1a1a8:	697b      	ldr	r3, [r7, #20]
}
   1a1aa:	0018      	movs	r0, r3
   1a1ac:	46bd      	mov	sp, r7
   1a1ae:	b006      	add	sp, #24
   1a1b0:	bd80      	pop	{r7, pc}
   1a1b2:	46c0      	nop			; (mov r8, r8)
   1a1b4:	20000928 	.word	0x20000928
   1a1b8:	200000ec 	.word	0x200000ec
   1a1bc:	00037087 	.word	0x00037087

0001a1c0 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   1a1c0:	b580      	push	{r7, lr}
   1a1c2:	b084      	sub	sp, #16
   1a1c4:	af00      	add	r7, sp, #0
   1a1c6:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   1a1c8:	230f      	movs	r3, #15
   1a1ca:	18fb      	adds	r3, r7, r3
   1a1cc:	2200      	movs	r2, #0
   1a1ce:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   1a1d0:	2300      	movs	r3, #0
   1a1d2:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   1a1d4:	e018      	b.n	1a208 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   1a1d6:	687b      	ldr	r3, [r7, #4]
   1a1d8:	781b      	ldrb	r3, [r3, #0]
   1a1da:	2b20      	cmp	r3, #32
   1a1dc:	d10f      	bne.n	1a1fe <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   1a1de:	68bb      	ldr	r3, [r7, #8]
   1a1e0:	2b01      	cmp	r3, #1
   1a1e2:	d00e      	beq.n	1a202 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   1a1e4:	230f      	movs	r3, #15
   1a1e6:	18fb      	adds	r3, r7, r3
   1a1e8:	781b      	ldrb	r3, [r3, #0]
   1a1ea:	b25b      	sxtb	r3, r3
   1a1ec:	b2db      	uxtb	r3, r3
   1a1ee:	3301      	adds	r3, #1
   1a1f0:	b2da      	uxtb	r2, r3
   1a1f2:	230f      	movs	r3, #15
   1a1f4:	18fb      	adds	r3, r7, r3
   1a1f6:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   1a1f8:	2301      	movs	r3, #1
   1a1fa:	60bb      	str	r3, [r7, #8]
   1a1fc:	e001      	b.n	1a202 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   1a1fe:	2300      	movs	r3, #0
   1a200:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   1a202:	687b      	ldr	r3, [r7, #4]
   1a204:	3301      	adds	r3, #1
   1a206:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   1a208:	687b      	ldr	r3, [r7, #4]
   1a20a:	781b      	ldrb	r3, [r3, #0]
   1a20c:	2b00      	cmp	r3, #0
   1a20e:	d1e2      	bne.n	1a1d6 <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   1a210:	68bb      	ldr	r3, [r7, #8]
   1a212:	2b01      	cmp	r3, #1
   1a214:	d109      	bne.n	1a22a <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   1a216:	230f      	movs	r3, #15
   1a218:	18fb      	adds	r3, r7, r3
   1a21a:	781b      	ldrb	r3, [r3, #0]
   1a21c:	b25b      	sxtb	r3, r3
   1a21e:	b2db      	uxtb	r3, r3
   1a220:	3b01      	subs	r3, #1
   1a222:	b2da      	uxtb	r2, r3
   1a224:	230f      	movs	r3, #15
   1a226:	18fb      	adds	r3, r7, r3
   1a228:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   1a22a:	230f      	movs	r3, #15
   1a22c:	18fb      	adds	r3, r7, r3
   1a22e:	781b      	ldrb	r3, [r3, #0]
   1a230:	b25b      	sxtb	r3, r3
}
   1a232:	0018      	movs	r0, r3
   1a234:	46bd      	mov	sp, r7
   1a236:	b004      	add	sp, #16
   1a238:	bd80      	pop	{r7, pc}
	...

0001a23c <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   1a23c:	b580      	push	{r7, lr}
   1a23e:	b082      	sub	sp, #8
   1a240:	af00      	add	r7, sp, #0
   1a242:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   1a244:	687b      	ldr	r3, [r7, #4]
   1a246:	0018      	movs	r0, r3
   1a248:	4b03      	ldr	r3, [pc, #12]	; (1a258 <prvTraceGetQueueNumber+0x1c>)
   1a24a:	4798      	blx	r3
   1a24c:	0003      	movs	r3, r0
}
   1a24e:	0018      	movs	r0, r3
   1a250:	46bd      	mov	sp, r7
   1a252:	b002      	add	sp, #8
   1a254:	bd80      	pop	{r7, pc}
   1a256:	46c0      	nop			; (mov r8, r8)
   1a258:	0001da05 	.word	0x0001da05

0001a25c <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   1a25c:	b580      	push	{r7, lr}
   1a25e:	b082      	sub	sp, #8
   1a260:	af00      	add	r7, sp, #0
   1a262:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   1a264:	687b      	ldr	r3, [r7, #4]
   1a266:	0018      	movs	r0, r3
   1a268:	4b03      	ldr	r3, [pc, #12]	; (1a278 <prvTraceGetQueueType+0x1c>)
   1a26a:	4798      	blx	r3
   1a26c:	0003      	movs	r3, r0
}
   1a26e:	0018      	movs	r0, r3
   1a270:	46bd      	mov	sp, r7
   1a272:	b002      	add	sp, #8
   1a274:	bd80      	pop	{r7, pc}
   1a276:	46c0      	nop			; (mov r8, r8)
   1a278:	0001da31 	.word	0x0001da31

0001a27c <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   1a27c:	b580      	push	{r7, lr}
   1a27e:	b082      	sub	sp, #8
   1a280:	af00      	add	r7, sp, #0
   1a282:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   1a284:	687b      	ldr	r3, [r7, #4]
   1a286:	0018      	movs	r0, r3
   1a288:	4b03      	ldr	r3, [pc, #12]	; (1a298 <prvTraceGetTaskNumberLow16+0x1c>)
   1a28a:	4798      	blx	r3
   1a28c:	0003      	movs	r3, r0
   1a28e:	b29b      	uxth	r3, r3
}
   1a290:	0018      	movs	r0, r3
   1a292:	46bd      	mov	sp, r7
   1a294:	b002      	add	sp, #8
   1a296:	bd80      	pop	{r7, pc}
   1a298:	0001ed61 	.word	0x0001ed61

0001a29c <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   1a29c:	b580      	push	{r7, lr}
   1a29e:	b082      	sub	sp, #8
   1a2a0:	af00      	add	r7, sp, #0
   1a2a2:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   1a2a4:	687b      	ldr	r3, [r7, #4]
   1a2a6:	0018      	movs	r0, r3
   1a2a8:	4b04      	ldr	r3, [pc, #16]	; (1a2bc <prvTraceGetTaskNumberHigh16+0x20>)
   1a2aa:	4798      	blx	r3
   1a2ac:	0003      	movs	r3, r0
   1a2ae:	0c1b      	lsrs	r3, r3, #16
   1a2b0:	b29b      	uxth	r3, r3
}
   1a2b2:	0018      	movs	r0, r3
   1a2b4:	46bd      	mov	sp, r7
   1a2b6:	b002      	add	sp, #8
   1a2b8:	bd80      	pop	{r7, pc}
   1a2ba:	46c0      	nop			; (mov r8, r8)
   1a2bc:	0001ed61 	.word	0x0001ed61

0001a2c0 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   1a2c0:	b580      	push	{r7, lr}
   1a2c2:	b082      	sub	sp, #8
   1a2c4:	af00      	add	r7, sp, #0
   1a2c6:	6078      	str	r0, [r7, #4]
   1a2c8:	000a      	movs	r2, r1
   1a2ca:	1cbb      	adds	r3, r7, #2
   1a2cc:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   1a2ce:	687b      	ldr	r3, [r7, #4]
   1a2d0:	0018      	movs	r0, r3
   1a2d2:	4b08      	ldr	r3, [pc, #32]	; (1a2f4 <prvTraceSetTaskNumberLow16+0x34>)
   1a2d4:	4798      	blx	r3
   1a2d6:	0003      	movs	r3, r0
   1a2d8:	0c1b      	lsrs	r3, r3, #16
   1a2da:	041a      	lsls	r2, r3, #16
   1a2dc:	1cbb      	adds	r3, r7, #2
   1a2de:	881b      	ldrh	r3, [r3, #0]
   1a2e0:	431a      	orrs	r2, r3
   1a2e2:	687b      	ldr	r3, [r7, #4]
   1a2e4:	0011      	movs	r1, r2
   1a2e6:	0018      	movs	r0, r3
   1a2e8:	4b03      	ldr	r3, [pc, #12]	; (1a2f8 <prvTraceSetTaskNumberLow16+0x38>)
   1a2ea:	4798      	blx	r3
}
   1a2ec:	46c0      	nop			; (mov r8, r8)
   1a2ee:	46bd      	mov	sp, r7
   1a2f0:	b002      	add	sp, #8
   1a2f2:	bd80      	pop	{r7, pc}
   1a2f4:	0001ed61 	.word	0x0001ed61
   1a2f8:	0001ed89 	.word	0x0001ed89

0001a2fc <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   1a2fc:	b580      	push	{r7, lr}
   1a2fe:	b082      	sub	sp, #8
   1a300:	af00      	add	r7, sp, #0
   1a302:	6078      	str	r0, [r7, #4]
   1a304:	000a      	movs	r2, r1
   1a306:	1cbb      	adds	r3, r7, #2
   1a308:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   1a30a:	687b      	ldr	r3, [r7, #4]
   1a30c:	0018      	movs	r0, r3
   1a30e:	4b09      	ldr	r3, [pc, #36]	; (1a334 <prvTraceSetTaskNumberHigh16+0x38>)
   1a310:	4798      	blx	r3
   1a312:	0003      	movs	r3, r0
   1a314:	041b      	lsls	r3, r3, #16
   1a316:	0c1a      	lsrs	r2, r3, #16
   1a318:	1cbb      	adds	r3, r7, #2
   1a31a:	881b      	ldrh	r3, [r3, #0]
   1a31c:	041b      	lsls	r3, r3, #16
   1a31e:	431a      	orrs	r2, r3
   1a320:	687b      	ldr	r3, [r7, #4]
   1a322:	0011      	movs	r1, r2
   1a324:	0018      	movs	r0, r3
   1a326:	4b04      	ldr	r3, [pc, #16]	; (1a338 <prvTraceSetTaskNumberHigh16+0x3c>)
   1a328:	4798      	blx	r3
}
   1a32a:	46c0      	nop			; (mov r8, r8)
   1a32c:	46bd      	mov	sp, r7
   1a32e:	b002      	add	sp, #8
   1a330:	bd80      	pop	{r7, pc}
   1a332:	46c0      	nop			; (mov r8, r8)
   1a334:	0001ed61 	.word	0x0001ed61
   1a338:	0001ed89 	.word	0x0001ed89

0001a33c <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   1a33c:	b580      	push	{r7, lr}
   1a33e:	b082      	sub	sp, #8
   1a340:	af00      	add	r7, sp, #0
   1a342:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   1a344:	687b      	ldr	r3, [r7, #4]
   1a346:	0018      	movs	r0, r3
   1a348:	4b03      	ldr	r3, [pc, #12]	; (1a358 <prvTraceGetQueueNumberLow16+0x1c>)
   1a34a:	4798      	blx	r3
   1a34c:	0003      	movs	r3, r0
   1a34e:	b29b      	uxth	r3, r3
}
   1a350:	0018      	movs	r0, r3
   1a352:	46bd      	mov	sp, r7
   1a354:	b002      	add	sp, #8
   1a356:	bd80      	pop	{r7, pc}
   1a358:	0001a23d 	.word	0x0001a23d

0001a35c <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   1a35c:	b580      	push	{r7, lr}
   1a35e:	b082      	sub	sp, #8
   1a360:	af00      	add	r7, sp, #0
   1a362:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   1a364:	687b      	ldr	r3, [r7, #4]
   1a366:	0018      	movs	r0, r3
   1a368:	4b04      	ldr	r3, [pc, #16]	; (1a37c <prvTraceGetQueueNumberHigh16+0x20>)
   1a36a:	4798      	blx	r3
   1a36c:	0003      	movs	r3, r0
   1a36e:	0c1b      	lsrs	r3, r3, #16
   1a370:	b29b      	uxth	r3, r3
}
   1a372:	0018      	movs	r0, r3
   1a374:	46bd      	mov	sp, r7
   1a376:	b002      	add	sp, #8
   1a378:	bd80      	pop	{r7, pc}
   1a37a:	46c0      	nop			; (mov r8, r8)
   1a37c:	0001a23d 	.word	0x0001a23d

0001a380 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   1a380:	b580      	push	{r7, lr}
   1a382:	b082      	sub	sp, #8
   1a384:	af00      	add	r7, sp, #0
   1a386:	6078      	str	r0, [r7, #4]
   1a388:	000a      	movs	r2, r1
   1a38a:	1cbb      	adds	r3, r7, #2
   1a38c:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   1a38e:	687b      	ldr	r3, [r7, #4]
   1a390:	0018      	movs	r0, r3
   1a392:	4b08      	ldr	r3, [pc, #32]	; (1a3b4 <prvTraceSetQueueNumberLow16+0x34>)
   1a394:	4798      	blx	r3
   1a396:	0003      	movs	r3, r0
   1a398:	0c1b      	lsrs	r3, r3, #16
   1a39a:	041a      	lsls	r2, r3, #16
   1a39c:	1cbb      	adds	r3, r7, #2
   1a39e:	881b      	ldrh	r3, [r3, #0]
   1a3a0:	431a      	orrs	r2, r3
   1a3a2:	687b      	ldr	r3, [r7, #4]
   1a3a4:	0011      	movs	r1, r2
   1a3a6:	0018      	movs	r0, r3
   1a3a8:	4b03      	ldr	r3, [pc, #12]	; (1a3b8 <prvTraceSetQueueNumberLow16+0x38>)
   1a3aa:	4798      	blx	r3
}
   1a3ac:	46c0      	nop			; (mov r8, r8)
   1a3ae:	46bd      	mov	sp, r7
   1a3b0:	b002      	add	sp, #8
   1a3b2:	bd80      	pop	{r7, pc}
   1a3b4:	0001a23d 	.word	0x0001a23d
   1a3b8:	0001da19 	.word	0x0001da19

0001a3bc <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   1a3bc:	b580      	push	{r7, lr}
   1a3be:	b082      	sub	sp, #8
   1a3c0:	af00      	add	r7, sp, #0
   1a3c2:	6078      	str	r0, [r7, #4]
   1a3c4:	000a      	movs	r2, r1
   1a3c6:	1cbb      	adds	r3, r7, #2
   1a3c8:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   1a3ca:	687b      	ldr	r3, [r7, #4]
   1a3cc:	0018      	movs	r0, r3
   1a3ce:	4b09      	ldr	r3, [pc, #36]	; (1a3f4 <prvTraceSetQueueNumberHigh16+0x38>)
   1a3d0:	4798      	blx	r3
   1a3d2:	0003      	movs	r3, r0
   1a3d4:	041b      	lsls	r3, r3, #16
   1a3d6:	0c1a      	lsrs	r2, r3, #16
   1a3d8:	1cbb      	adds	r3, r7, #2
   1a3da:	881b      	ldrh	r3, [r3, #0]
   1a3dc:	041b      	lsls	r3, r3, #16
   1a3de:	431a      	orrs	r2, r3
   1a3e0:	687b      	ldr	r3, [r7, #4]
   1a3e2:	0011      	movs	r1, r2
   1a3e4:	0018      	movs	r0, r3
   1a3e6:	4b04      	ldr	r3, [pc, #16]	; (1a3f8 <prvTraceSetQueueNumberHigh16+0x3c>)
   1a3e8:	4798      	blx	r3
}
   1a3ea:	46c0      	nop			; (mov r8, r8)
   1a3ec:	46bd      	mov	sp, r7
   1a3ee:	b002      	add	sp, #8
   1a3f0:	bd80      	pop	{r7, pc}
   1a3f2:	46c0      	nop			; (mov r8, r8)
   1a3f4:	0001a23d 	.word	0x0001a23d
   1a3f8:	0001da19 	.word	0x0001da19

0001a3fc <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   1a3fc:	b580      	push	{r7, lr}
   1a3fe:	b084      	sub	sp, #16
   1a400:	af00      	add	r7, sp, #0
   1a402:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   1a404:	2300      	movs	r3, #0
   1a406:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1a408:	2300      	movs	r3, #0
   1a40a:	60bb      	str	r3, [r7, #8]
   1a40c:	e018      	b.n	1a440 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   1a40e:	4b14      	ldr	r3, [pc, #80]	; (1a460 <prvAddTaskToStackMonitor+0x64>)
   1a410:	68ba      	ldr	r2, [r7, #8]
   1a412:	00d2      	lsls	r2, r2, #3
   1a414:	58d3      	ldr	r3, [r2, r3]
   1a416:	2b00      	cmp	r3, #0
   1a418:	d10f      	bne.n	1a43a <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   1a41a:	4b11      	ldr	r3, [pc, #68]	; (1a460 <prvAddTaskToStackMonitor+0x64>)
   1a41c:	68ba      	ldr	r2, [r7, #8]
   1a41e:	00d2      	lsls	r2, r2, #3
   1a420:	6879      	ldr	r1, [r7, #4]
   1a422:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   1a424:	4a0e      	ldr	r2, [pc, #56]	; (1a460 <prvAddTaskToStackMonitor+0x64>)
   1a426:	68bb      	ldr	r3, [r7, #8]
   1a428:	00db      	lsls	r3, r3, #3
   1a42a:	18d3      	adds	r3, r2, r3
   1a42c:	3304      	adds	r3, #4
   1a42e:	2201      	movs	r2, #1
   1a430:	4252      	negs	r2, r2
   1a432:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   1a434:	2301      	movs	r3, #1
   1a436:	60fb      	str	r3, [r7, #12]
			break;
   1a438:	e005      	b.n	1a446 <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1a43a:	68bb      	ldr	r3, [r7, #8]
   1a43c:	3301      	adds	r3, #1
   1a43e:	60bb      	str	r3, [r7, #8]
   1a440:	68bb      	ldr	r3, [r7, #8]
   1a442:	2b09      	cmp	r3, #9
   1a444:	dde3      	ble.n	1a40e <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   1a446:	68fb      	ldr	r3, [r7, #12]
   1a448:	2b00      	cmp	r3, #0
   1a44a:	d104      	bne.n	1a456 <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   1a44c:	4b05      	ldr	r3, [pc, #20]	; (1a464 <prvAddTaskToStackMonitor+0x68>)
   1a44e:	681b      	ldr	r3, [r3, #0]
   1a450:	1c5a      	adds	r2, r3, #1
   1a452:	4b04      	ldr	r3, [pc, #16]	; (1a464 <prvAddTaskToStackMonitor+0x68>)
   1a454:	601a      	str	r2, [r3, #0]
	}
}
   1a456:	46c0      	nop			; (mov r8, r8)
   1a458:	46bd      	mov	sp, r7
   1a45a:	b004      	add	sp, #16
   1a45c:	bd80      	pop	{r7, pc}
   1a45e:	46c0      	nop			; (mov r8, r8)
   1a460:	20000930 	.word	0x20000930
   1a464:	20000980 	.word	0x20000980

0001a468 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   1a468:	b590      	push	{r4, r7, lr}
   1a46a:	b085      	sub	sp, #20
   1a46c:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   1a46e:	2300      	movs	r3, #0
   1a470:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   1a472:	4b2b      	ldr	r3, [pc, #172]	; (1a520 <prvReportStackUsage+0xb8>)
   1a474:	681b      	ldr	r3, [r3, #0]
   1a476:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   1a478:	4b29      	ldr	r3, [pc, #164]	; (1a520 <prvReportStackUsage+0xb8>)
   1a47a:	681a      	ldr	r2, [r3, #0]
   1a47c:	4b29      	ldr	r3, [pc, #164]	; (1a524 <prvReportStackUsage+0xbc>)
   1a47e:	00d2      	lsls	r2, r2, #3
   1a480:	58d3      	ldr	r3, [r2, r3]
   1a482:	2b00      	cmp	r3, #0
   1a484:	d035      	beq.n	1a4f2 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   1a486:	4b26      	ldr	r3, [pc, #152]	; (1a520 <prvReportStackUsage+0xb8>)
   1a488:	681a      	ldr	r2, [r3, #0]
   1a48a:	4b26      	ldr	r3, [pc, #152]	; (1a524 <prvReportStackUsage+0xbc>)
   1a48c:	00d2      	lsls	r2, r2, #3
   1a48e:	58d3      	ldr	r3, [r2, r3]
   1a490:	0018      	movs	r0, r3
   1a492:	4b25      	ldr	r3, [pc, #148]	; (1a528 <prvReportStackUsage+0xc0>)
   1a494:	4798      	blx	r3
   1a496:	0003      	movs	r3, r0
   1a498:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   1a49a:	4b21      	ldr	r3, [pc, #132]	; (1a520 <prvReportStackUsage+0xb8>)
   1a49c:	681b      	ldr	r3, [r3, #0]
   1a49e:	4a21      	ldr	r2, [pc, #132]	; (1a524 <prvReportStackUsage+0xbc>)
   1a4a0:	00db      	lsls	r3, r3, #3
   1a4a2:	18d3      	adds	r3, r2, r3
   1a4a4:	3304      	adds	r3, #4
   1a4a6:	681a      	ldr	r2, [r3, #0]
   1a4a8:	687b      	ldr	r3, [r7, #4]
   1a4aa:	429a      	cmp	r2, r3
   1a4ac:	d907      	bls.n	1a4be <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   1a4ae:	4b1c      	ldr	r3, [pc, #112]	; (1a520 <prvReportStackUsage+0xb8>)
   1a4b0:	681b      	ldr	r3, [r3, #0]
   1a4b2:	4a1c      	ldr	r2, [pc, #112]	; (1a524 <prvReportStackUsage+0xbc>)
   1a4b4:	00db      	lsls	r3, r3, #3
   1a4b6:	18d3      	adds	r3, r2, r3
   1a4b8:	3304      	adds	r3, #4
   1a4ba:	687a      	ldr	r2, [r7, #4]
   1a4bc:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   1a4be:	4b18      	ldr	r3, [pc, #96]	; (1a520 <prvReportStackUsage+0xb8>)
   1a4c0:	681a      	ldr	r2, [r3, #0]
   1a4c2:	4b18      	ldr	r3, [pc, #96]	; (1a524 <prvReportStackUsage+0xbc>)
   1a4c4:	00d2      	lsls	r2, r2, #3
   1a4c6:	58d3      	ldr	r3, [r2, r3]
   1a4c8:	0018      	movs	r0, r3
   1a4ca:	4b18      	ldr	r3, [pc, #96]	; (1a52c <prvReportStackUsage+0xc4>)
   1a4cc:	4798      	blx	r3
   1a4ce:	0003      	movs	r3, r0
   1a4d0:	b2db      	uxtb	r3, r3
   1a4d2:	0019      	movs	r1, r3
   1a4d4:	4b12      	ldr	r3, [pc, #72]	; (1a520 <prvReportStackUsage+0xb8>)
   1a4d6:	681b      	ldr	r3, [r3, #0]
   1a4d8:	4a12      	ldr	r2, [pc, #72]	; (1a524 <prvReportStackUsage+0xbc>)
   1a4da:	00db      	lsls	r3, r3, #3
   1a4dc:	18d3      	adds	r3, r2, r3
   1a4de:	3304      	adds	r3, #4
   1a4e0:	681b      	ldr	r3, [r3, #0]
   1a4e2:	000a      	movs	r2, r1
   1a4e4:	2103      	movs	r1, #3
   1a4e6:	20ea      	movs	r0, #234	; 0xea
   1a4e8:	4c11      	ldr	r4, [pc, #68]	; (1a530 <prvReportStackUsage+0xc8>)
   1a4ea:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   1a4ec:	68fb      	ldr	r3, [r7, #12]
   1a4ee:	3301      	adds	r3, #1
   1a4f0:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   1a4f2:	4b0b      	ldr	r3, [pc, #44]	; (1a520 <prvReportStackUsage+0xb8>)
   1a4f4:	681b      	ldr	r3, [r3, #0]
   1a4f6:	1c5a      	adds	r2, r3, #1
   1a4f8:	4b0e      	ldr	r3, [pc, #56]	; (1a534 <prvReportStackUsage+0xcc>)
   1a4fa:	210a      	movs	r1, #10
   1a4fc:	0010      	movs	r0, r2
   1a4fe:	4798      	blx	r3
   1a500:	000b      	movs	r3, r1
   1a502:	001a      	movs	r2, r3
   1a504:	4b06      	ldr	r3, [pc, #24]	; (1a520 <prvReportStackUsage+0xb8>)
   1a506:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   1a508:	68fb      	ldr	r3, [r7, #12]
   1a50a:	2b00      	cmp	r3, #0
   1a50c:	dc04      	bgt.n	1a518 <prvReportStackUsage+0xb0>
   1a50e:	4b04      	ldr	r3, [pc, #16]	; (1a520 <prvReportStackUsage+0xb8>)
   1a510:	681a      	ldr	r2, [r3, #0]
   1a512:	68bb      	ldr	r3, [r7, #8]
   1a514:	429a      	cmp	r2, r3
   1a516:	d1af      	bne.n	1a478 <prvReportStackUsage+0x10>
}
   1a518:	46c0      	nop			; (mov r8, r8)
   1a51a:	46bd      	mov	sp, r7
   1a51c:	b005      	add	sp, #20
   1a51e:	bd90      	pop	{r4, r7, pc}
   1a520:	20000984 	.word	0x20000984
   1a524:	20000930 	.word	0x20000930
   1a528:	0001ef01 	.word	0x0001ef01
   1a52c:	0001a27d 	.word	0x0001a27d
   1a530:	0001adc5 	.word	0x0001adc5
   1a534:	00034a39 	.word	0x00034a39

0001a538 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   1a538:	b580      	push	{r7, lr}
   1a53a:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   1a53c:	4b02      	ldr	r3, [pc, #8]	; (1a548 <prvTraceGetCurrentTaskHandle+0x10>)
   1a53e:	4798      	blx	r3
   1a540:	0003      	movs	r3, r0
}
   1a542:	0018      	movs	r0, r3
   1a544:	46bd      	mov	sp, r7
   1a546:	bd80      	pop	{r7, pc}
   1a548:	0001efad 	.word	0x0001efad

0001a54c <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   1a54c:	b590      	push	{r4, r7, lr}
   1a54e:	b085      	sub	sp, #20
   1a550:	af02      	add	r7, sp, #8
   1a552:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   1a554:	4b14      	ldr	r3, [pc, #80]	; (1a5a8 <vTraceEnable+0x5c>)
   1a556:	4798      	blx	r3

	if (startOption == TRC_START)
   1a558:	687b      	ldr	r3, [r7, #4]
   1a55a:	2b01      	cmp	r3, #1
   1a55c:	d102      	bne.n	1a564 <vTraceEnable+0x18>
	{
		vTraceStart();
   1a55e:	4b13      	ldr	r3, [pc, #76]	; (1a5ac <vTraceEnable+0x60>)
   1a560:	4798      	blx	r3
   1a562:	e00e      	b.n	1a582 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   1a564:	687b      	ldr	r3, [r7, #4]
   1a566:	2b02      	cmp	r3, #2
   1a568:	d104      	bne.n	1a574 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   1a56a:	4b11      	ldr	r3, [pc, #68]	; (1a5b0 <vTraceEnable+0x64>)
   1a56c:	0018      	movs	r0, r3
   1a56e:	4b11      	ldr	r3, [pc, #68]	; (1a5b4 <vTraceEnable+0x68>)
   1a570:	4798      	blx	r3
   1a572:	e006      	b.n	1a582 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   1a574:	687b      	ldr	r3, [r7, #4]
   1a576:	2b00      	cmp	r3, #0
   1a578:	d003      	beq.n	1a582 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   1a57a:	4b0f      	ldr	r3, [pc, #60]	; (1a5b8 <vTraceEnable+0x6c>)
   1a57c:	0018      	movs	r0, r3
   1a57e:	4b0d      	ldr	r3, [pc, #52]	; (1a5b4 <vTraceEnable+0x68>)
   1a580:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   1a582:	4b0e      	ldr	r3, [pc, #56]	; (1a5bc <vTraceEnable+0x70>)
   1a584:	681b      	ldr	r3, [r3, #0]
   1a586:	2b00      	cmp	r3, #0
   1a588:	d10a      	bne.n	1a5a0 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   1a58a:	2396      	movs	r3, #150	; 0x96
   1a58c:	005a      	lsls	r2, r3, #1
   1a58e:	490c      	ldr	r1, [pc, #48]	; (1a5c0 <vTraceEnable+0x74>)
   1a590:	480c      	ldr	r0, [pc, #48]	; (1a5c4 <vTraceEnable+0x78>)
   1a592:	4b0a      	ldr	r3, [pc, #40]	; (1a5bc <vTraceEnable+0x70>)
   1a594:	9301      	str	r3, [sp, #4]
   1a596:	2304      	movs	r3, #4
   1a598:	9300      	str	r3, [sp, #0]
   1a59a:	2300      	movs	r3, #0
   1a59c:	4c0a      	ldr	r4, [pc, #40]	; (1a5c8 <vTraceEnable+0x7c>)
   1a59e:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   1a5a0:	46c0      	nop			; (mov r8, r8)
   1a5a2:	46bd      	mov	sp, r7
   1a5a4:	b003      	add	sp, #12
   1a5a6:	bd90      	pop	{r4, r7, pc}
   1a5a8:	0001b491 	.word	0x0001b491
   1a5ac:	0001a9e9 	.word	0x0001a9e9
   1a5b0:	000393b0 	.word	0x000393b0
   1a5b4:	0001bb39 	.word	0x0001bb39
   1a5b8:	000393f0 	.word	0x000393f0
   1a5bc:	2000092c 	.word	0x2000092c
   1a5c0:	00039424 	.word	0x00039424
   1a5c4:	0001a5cd 	.word	0x0001a5cd
   1a5c8:	0001df05 	.word	0x0001df05

0001a5cc <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   1a5cc:	b580      	push	{r7, lr}
   1a5ce:	b082      	sub	sp, #8
   1a5d0:	af00      	add	r7, sp, #0
   1a5d2:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   1a5d4:	4b04      	ldr	r3, [pc, #16]	; (1a5e8 <TzCtrl+0x1c>)
   1a5d6:	4798      	blx	r3
   1a5d8:	1e03      	subs	r3, r0, #0
   1a5da:	d001      	beq.n	1a5e0 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   1a5dc:	4b03      	ldr	r3, [pc, #12]	; (1a5ec <TzCtrl+0x20>)
   1a5de:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   1a5e0:	2004      	movs	r0, #4
   1a5e2:	4b03      	ldr	r3, [pc, #12]	; (1a5f0 <TzCtrl+0x24>)
   1a5e4:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   1a5e6:	e7f5      	b.n	1a5d4 <TzCtrl+0x8>
   1a5e8:	0001aa2d 	.word	0x0001aa2d
   1a5ec:	0001a469 	.word	0x0001a469
   1a5f0:	0001e2a1 	.word	0x0001e2a1

0001a5f4 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   1a5f4:	b580      	push	{r7, lr}
   1a5f6:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   1a5f8:	4b60      	ldr	r3, [pc, #384]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a5fa:	681b      	ldr	r3, [r3, #0]
   1a5fc:	2209      	movs	r2, #9
   1a5fe:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   1a600:	4b5e      	ldr	r3, [pc, #376]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a602:	681b      	ldr	r3, [r3, #0]
   1a604:	2264      	movs	r2, #100	; 0x64
   1a606:	210a      	movs	r1, #10
   1a608:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   1a60a:	4b5c      	ldr	r3, [pc, #368]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a60c:	681b      	ldr	r3, [r3, #0]
   1a60e:	2265      	movs	r2, #101	; 0x65
   1a610:	210a      	movs	r1, #10
   1a612:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   1a614:	4b59      	ldr	r3, [pc, #356]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a616:	681b      	ldr	r3, [r3, #0]
   1a618:	2266      	movs	r2, #102	; 0x66
   1a61a:	210a      	movs	r1, #10
   1a61c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   1a61e:	4b57      	ldr	r3, [pc, #348]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a620:	681b      	ldr	r3, [r3, #0]
   1a622:	2267      	movs	r2, #103	; 0x67
   1a624:	210f      	movs	r1, #15
   1a626:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   1a628:	4b54      	ldr	r3, [pc, #336]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a62a:	681b      	ldr	r3, [r3, #0]
   1a62c:	2268      	movs	r2, #104	; 0x68
   1a62e:	2105      	movs	r1, #5
   1a630:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   1a632:	4b52      	ldr	r3, [pc, #328]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a634:	681b      	ldr	r3, [r3, #0]
   1a636:	2269      	movs	r2, #105	; 0x69
   1a638:	2105      	movs	r1, #5
   1a63a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   1a63c:	4b4f      	ldr	r3, [pc, #316]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a63e:	681b      	ldr	r3, [r3, #0]
   1a640:	226a      	movs	r2, #106	; 0x6a
   1a642:	2105      	movs	r1, #5
   1a644:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   1a646:	4b4d      	ldr	r3, [pc, #308]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a648:	681b      	ldr	r3, [r3, #0]
   1a64a:	226b      	movs	r2, #107	; 0x6b
   1a64c:	2105      	movs	r1, #5
   1a64e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   1a650:	4b4a      	ldr	r3, [pc, #296]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a652:	681b      	ldr	r3, [r3, #0]
   1a654:	226c      	movs	r2, #108	; 0x6c
   1a656:	2105      	movs	r1, #5
   1a658:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   1a65a:	4b48      	ldr	r3, [pc, #288]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a65c:	681b      	ldr	r3, [r3, #0]
   1a65e:	2270      	movs	r2, #112	; 0x70
   1a660:	210f      	movs	r1, #15
   1a662:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   1a664:	4b45      	ldr	r3, [pc, #276]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a666:	681b      	ldr	r3, [r3, #0]
   1a668:	2271      	movs	r2, #113	; 0x71
   1a66a:	210f      	movs	r1, #15
   1a66c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   1a66e:	4b43      	ldr	r3, [pc, #268]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a670:	681b      	ldr	r3, [r3, #0]
   1a672:	2272      	movs	r2, #114	; 0x72
   1a674:	210f      	movs	r1, #15
   1a676:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   1a678:	4b40      	ldr	r3, [pc, #256]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a67a:	681b      	ldr	r3, [r3, #0]
   1a67c:	2273      	movs	r2, #115	; 0x73
   1a67e:	210f      	movs	r1, #15
   1a680:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   1a682:	4b3e      	ldr	r3, [pc, #248]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a684:	681b      	ldr	r3, [r3, #0]
   1a686:	2274      	movs	r2, #116	; 0x74
   1a688:	210f      	movs	r1, #15
   1a68a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   1a68c:	4b3b      	ldr	r3, [pc, #236]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a68e:	681b      	ldr	r3, [r3, #0]
   1a690:	2275      	movs	r2, #117	; 0x75
   1a692:	210f      	movs	r1, #15
   1a694:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   1a696:	4b39      	ldr	r3, [pc, #228]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a698:	681b      	ldr	r3, [r3, #0]
   1a69a:	2276      	movs	r2, #118	; 0x76
   1a69c:	210f      	movs	r1, #15
   1a69e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   1a6a0:	4b36      	ldr	r3, [pc, #216]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a6a2:	681b      	ldr	r3, [r3, #0]
   1a6a4:	2277      	movs	r2, #119	; 0x77
   1a6a6:	210f      	movs	r1, #15
   1a6a8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   1a6aa:	4b34      	ldr	r3, [pc, #208]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a6ac:	681b      	ldr	r3, [r3, #0]
   1a6ae:	2278      	movs	r2, #120	; 0x78
   1a6b0:	210f      	movs	r1, #15
   1a6b2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   1a6b4:	4b31      	ldr	r3, [pc, #196]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a6b6:	681b      	ldr	r3, [r3, #0]
   1a6b8:	227c      	movs	r2, #124	; 0x7c
   1a6ba:	2110      	movs	r1, #16
   1a6bc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   1a6be:	4b2f      	ldr	r3, [pc, #188]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a6c0:	681b      	ldr	r3, [r3, #0]
   1a6c2:	227d      	movs	r2, #125	; 0x7d
   1a6c4:	2110      	movs	r1, #16
   1a6c6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   1a6c8:	4b2c      	ldr	r3, [pc, #176]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a6ca:	681b      	ldr	r3, [r3, #0]
   1a6cc:	227e      	movs	r2, #126	; 0x7e
   1a6ce:	2110      	movs	r1, #16
   1a6d0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   1a6d2:	4b2a      	ldr	r3, [pc, #168]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a6d4:	681b      	ldr	r3, [r3, #0]
   1a6d6:	227f      	movs	r2, #127	; 0x7f
   1a6d8:	2113      	movs	r1, #19
   1a6da:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   1a6dc:	4b27      	ldr	r3, [pc, #156]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a6de:	681b      	ldr	r3, [r3, #0]
   1a6e0:	2280      	movs	r2, #128	; 0x80
   1a6e2:	2111      	movs	r1, #17
   1a6e4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   1a6e6:	4b25      	ldr	r3, [pc, #148]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a6e8:	681b      	ldr	r3, [r3, #0]
   1a6ea:	2281      	movs	r2, #129	; 0x81
   1a6ec:	2110      	movs	r1, #16
   1a6ee:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   1a6f0:	4b22      	ldr	r3, [pc, #136]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a6f2:	681b      	ldr	r3, [r3, #0]
   1a6f4:	2282      	movs	r2, #130	; 0x82
   1a6f6:	2113      	movs	r1, #19
   1a6f8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   1a6fa:	4b20      	ldr	r3, [pc, #128]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a6fc:	681b      	ldr	r3, [r3, #0]
   1a6fe:	2283      	movs	r2, #131	; 0x83
   1a700:	2113      	movs	r1, #19
   1a702:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   1a704:	4b1d      	ldr	r3, [pc, #116]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a706:	681b      	ldr	r3, [r3, #0]
   1a708:	2284      	movs	r2, #132	; 0x84
   1a70a:	2113      	movs	r1, #19
   1a70c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   1a70e:	4b1b      	ldr	r3, [pc, #108]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a710:	681b      	ldr	r3, [r3, #0]
   1a712:	2288      	movs	r2, #136	; 0x88
   1a714:	2100      	movs	r1, #0
   1a716:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   1a718:	4b18      	ldr	r3, [pc, #96]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a71a:	681b      	ldr	r3, [r3, #0]
   1a71c:	228a      	movs	r2, #138	; 0x8a
   1a71e:	21a0      	movs	r1, #160	; 0xa0
   1a720:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   1a722:	4b16      	ldr	r3, [pc, #88]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a724:	681b      	ldr	r3, [r3, #0]
   1a726:	228c      	movs	r2, #140	; 0x8c
   1a728:	21a0      	movs	r1, #160	; 0xa0
   1a72a:	0049      	lsls	r1, r1, #1
   1a72c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   1a72e:	4b13      	ldr	r3, [pc, #76]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a730:	681b      	ldr	r3, [r3, #0]
   1a732:	228e      	movs	r2, #142	; 0x8e
   1a734:	21f0      	movs	r1, #240	; 0xf0
   1a736:	0049      	lsls	r1, r1, #1
   1a738:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   1a73a:	4b10      	ldr	r3, [pc, #64]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a73c:	681b      	ldr	r3, [r3, #0]
   1a73e:	2290      	movs	r2, #144	; 0x90
   1a740:	490f      	ldr	r1, [pc, #60]	; (1a780 <vTraceInitObjectPropertyTable+0x18c>)
   1a742:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   1a744:	4b0d      	ldr	r3, [pc, #52]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a746:	681b      	ldr	r3, [r3, #0]
   1a748:	2292      	movs	r2, #146	; 0x92
   1a74a:	490e      	ldr	r1, [pc, #56]	; (1a784 <vTraceInitObjectPropertyTable+0x190>)
   1a74c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   1a74e:	4b0b      	ldr	r3, [pc, #44]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a750:	681b      	ldr	r3, [r3, #0]
   1a752:	2294      	movs	r2, #148	; 0x94
   1a754:	490c      	ldr	r1, [pc, #48]	; (1a788 <vTraceInitObjectPropertyTable+0x194>)
   1a756:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   1a758:	4b08      	ldr	r3, [pc, #32]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a75a:	681b      	ldr	r3, [r3, #0]
   1a75c:	2296      	movs	r2, #150	; 0x96
   1a75e:	490b      	ldr	r1, [pc, #44]	; (1a78c <vTraceInitObjectPropertyTable+0x198>)
   1a760:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   1a762:	4b06      	ldr	r3, [pc, #24]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a764:	681b      	ldr	r3, [r3, #0]
   1a766:	2298      	movs	r2, #152	; 0x98
   1a768:	218c      	movs	r1, #140	; 0x8c
   1a76a:	00c9      	lsls	r1, r1, #3
   1a76c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   1a76e:	4b03      	ldr	r3, [pc, #12]	; (1a77c <vTraceInitObjectPropertyTable+0x188>)
   1a770:	681b      	ldr	r3, [r3, #0]
   1a772:	4a07      	ldr	r2, [pc, #28]	; (1a790 <vTraceInitObjectPropertyTable+0x19c>)
   1a774:	661a      	str	r2, [r3, #96]	; 0x60
}
   1a776:	46c0      	nop			; (mov r8, r8)
   1a778:	46bd      	mov	sp, r7
   1a77a:	bd80      	pop	{r7, pc}
   1a77c:	20000a44 	.word	0x20000a44
   1a780:	000002fd 	.word	0x000002fd
   1a784:	00000352 	.word	0x00000352
   1a788:	000003a2 	.word	0x000003a2
   1a78c:	00000401 	.word	0x00000401
   1a790:	000004bf 	.word	0x000004bf

0001a794 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   1a794:	b580      	push	{r7, lr}
   1a796:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   1a798:	4b2e      	ldr	r3, [pc, #184]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a79a:	2200      	movs	r2, #0
   1a79c:	825a      	strh	r2, [r3, #18]
   1a79e:	4b2d      	ldr	r3, [pc, #180]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a7a0:	8a5a      	ldrh	r2, [r3, #18]
   1a7a2:	4b2c      	ldr	r3, [pc, #176]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a7a4:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   1a7a6:	4b2b      	ldr	r3, [pc, #172]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a7a8:	220a      	movs	r2, #10
   1a7aa:	829a      	strh	r2, [r3, #20]
   1a7ac:	4b29      	ldr	r3, [pc, #164]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a7ae:	8a9a      	ldrh	r2, [r3, #20]
   1a7b0:	4b28      	ldr	r3, [pc, #160]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a7b2:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   1a7b4:	4b27      	ldr	r3, [pc, #156]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a7b6:	2214      	movs	r2, #20
   1a7b8:	82da      	strh	r2, [r3, #22]
   1a7ba:	4b26      	ldr	r3, [pc, #152]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a7bc:	8ada      	ldrh	r2, [r3, #22]
   1a7be:	4b25      	ldr	r3, [pc, #148]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a7c0:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   1a7c2:	4b24      	ldr	r3, [pc, #144]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a7c4:	221e      	movs	r2, #30
   1a7c6:	831a      	strh	r2, [r3, #24]
   1a7c8:	4b22      	ldr	r3, [pc, #136]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a7ca:	8b1a      	ldrh	r2, [r3, #24]
   1a7cc:	4b21      	ldr	r3, [pc, #132]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a7ce:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   1a7d0:	4b20      	ldr	r3, [pc, #128]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a7d2:	222d      	movs	r2, #45	; 0x2d
   1a7d4:	835a      	strh	r2, [r3, #26]
   1a7d6:	4b1f      	ldr	r3, [pc, #124]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a7d8:	8b5a      	ldrh	r2, [r3, #26]
   1a7da:	4b1e      	ldr	r3, [pc, #120]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a7dc:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   1a7de:	4b1d      	ldr	r3, [pc, #116]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a7e0:	2232      	movs	r2, #50	; 0x32
   1a7e2:	839a      	strh	r2, [r3, #28]
   1a7e4:	4b1b      	ldr	r3, [pc, #108]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a7e6:	8b9a      	ldrh	r2, [r3, #28]
   1a7e8:	4b1a      	ldr	r3, [pc, #104]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a7ea:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   1a7ec:	4b19      	ldr	r3, [pc, #100]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a7ee:	2237      	movs	r2, #55	; 0x37
   1a7f0:	83da      	strh	r2, [r3, #30]
   1a7f2:	4b18      	ldr	r3, [pc, #96]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a7f4:	8bda      	ldrh	r2, [r3, #30]
   1a7f6:	4b17      	ldr	r3, [pc, #92]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a7f8:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   1a7fa:	4b16      	ldr	r3, [pc, #88]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a7fc:	223c      	movs	r2, #60	; 0x3c
   1a7fe:	841a      	strh	r2, [r3, #32]
   1a800:	4b14      	ldr	r3, [pc, #80]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a802:	8c1a      	ldrh	r2, [r3, #32]
   1a804:	4b13      	ldr	r3, [pc, #76]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a806:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   1a808:	4b12      	ldr	r3, [pc, #72]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a80a:	2241      	movs	r2, #65	; 0x41
   1a80c:	845a      	strh	r2, [r3, #34]	; 0x22
   1a80e:	4b11      	ldr	r3, [pc, #68]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a810:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   1a812:	4b10      	ldr	r3, [pc, #64]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a814:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   1a816:	4b0f      	ldr	r3, [pc, #60]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a818:	2209      	movs	r2, #9
   1a81a:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   1a81c:	4b0d      	ldr	r3, [pc, #52]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a81e:	2213      	movs	r2, #19
   1a820:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   1a822:	4b0c      	ldr	r3, [pc, #48]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a824:	221d      	movs	r2, #29
   1a826:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   1a828:	4b0a      	ldr	r3, [pc, #40]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a82a:	222c      	movs	r2, #44	; 0x2c
   1a82c:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   1a82e:	4b09      	ldr	r3, [pc, #36]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a830:	2231      	movs	r2, #49	; 0x31
   1a832:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   1a834:	4b07      	ldr	r3, [pc, #28]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a836:	2236      	movs	r2, #54	; 0x36
   1a838:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   1a83a:	4b06      	ldr	r3, [pc, #24]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a83c:	223b      	movs	r2, #59	; 0x3b
   1a83e:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   1a840:	4b04      	ldr	r3, [pc, #16]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a842:	2240      	movs	r2, #64	; 0x40
   1a844:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   1a846:	4b03      	ldr	r3, [pc, #12]	; (1a854 <vTraceInitObjectHandleStack+0xc0>)
   1a848:	2245      	movs	r2, #69	; 0x45
   1a84a:	869a      	strh	r2, [r3, #52]	; 0x34
}
   1a84c:	46c0      	nop			; (mov r8, r8)
   1a84e:	46bd      	mov	sp, r7
   1a850:	bd80      	pop	{r7, pc}
   1a852:	46c0      	nop			; (mov r8, r8)
   1a854:	200009b4 	.word	0x200009b4

0001a858 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   1a858:	b580      	push	{r7, lr}
   1a85a:	b082      	sub	sp, #8
   1a85c:	af00      	add	r7, sp, #0
   1a85e:	0002      	movs	r2, r0
   1a860:	1dfb      	adds	r3, r7, #7
   1a862:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   1a864:	1dfb      	adds	r3, r7, #7
   1a866:	781b      	ldrb	r3, [r3, #0]
   1a868:	2b08      	cmp	r3, #8
   1a86a:	d816      	bhi.n	1a89a <pszTraceGetErrorNotEnoughHandles+0x42>
   1a86c:	009a      	lsls	r2, r3, #2
   1a86e:	4b0d      	ldr	r3, [pc, #52]	; (1a8a4 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   1a870:	18d3      	adds	r3, r2, r3
   1a872:	681b      	ldr	r3, [r3, #0]
   1a874:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   1a876:	4b0c      	ldr	r3, [pc, #48]	; (1a8a8 <pszTraceGetErrorNotEnoughHandles+0x50>)
   1a878:	e010      	b.n	1a89c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   1a87a:	4b0c      	ldr	r3, [pc, #48]	; (1a8ac <pszTraceGetErrorNotEnoughHandles+0x54>)
   1a87c:	e00e      	b.n	1a89c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   1a87e:	4b0c      	ldr	r3, [pc, #48]	; (1a8b0 <pszTraceGetErrorNotEnoughHandles+0x58>)
   1a880:	e00c      	b.n	1a89c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   1a882:	4b0c      	ldr	r3, [pc, #48]	; (1a8b4 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   1a884:	e00a      	b.n	1a89c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   1a886:	4b0c      	ldr	r3, [pc, #48]	; (1a8b8 <pszTraceGetErrorNotEnoughHandles+0x60>)
   1a888:	e008      	b.n	1a89c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   1a88a:	4b0c      	ldr	r3, [pc, #48]	; (1a8bc <pszTraceGetErrorNotEnoughHandles+0x64>)
   1a88c:	e006      	b.n	1a89c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   1a88e:	4b0c      	ldr	r3, [pc, #48]	; (1a8c0 <pszTraceGetErrorNotEnoughHandles+0x68>)
   1a890:	e004      	b.n	1a89c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   1a892:	4b0c      	ldr	r3, [pc, #48]	; (1a8c4 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   1a894:	e002      	b.n	1a89c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   1a896:	4b0c      	ldr	r3, [pc, #48]	; (1a8c8 <pszTraceGetErrorNotEnoughHandles+0x70>)
   1a898:	e000      	b.n	1a89c <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   1a89a:	4b0c      	ldr	r3, [pc, #48]	; (1a8cc <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   1a89c:	0018      	movs	r0, r3
   1a89e:	46bd      	mov	sp, r7
   1a8a0:	b002      	add	sp, #8
   1a8a2:	bd80      	pop	{r7, pc}
   1a8a4:	0003972c 	.word	0x0003972c
   1a8a8:	0003942c 	.word	0x0003942c
   1a8ac:	00039474 	.word	0x00039474
   1a8b0:	000394bc 	.word	0x000394bc
   1a8b4:	00039510 	.word	0x00039510
   1a8b8:	0003955c 	.word	0x0003955c
   1a8bc:	000395a8 	.word	0x000395a8
   1a8c0:	000395f4 	.word	0x000395f4
   1a8c4:	00039648 	.word	0x00039648
   1a8c8:	000396a0 	.word	0x000396a0
   1a8cc:	000396fc 	.word	0x000396fc

0001a8d0 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   1a8d0:	b590      	push	{r4, r7, lr}
   1a8d2:	b087      	sub	sp, #28
   1a8d4:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   1a8d6:	2317      	movs	r3, #23
   1a8d8:	18fb      	adds	r3, r7, r3
   1a8da:	2200      	movs	r2, #0
   1a8dc:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   1a8de:	4b36      	ldr	r3, [pc, #216]	; (1a9b8 <uiTraceStart+0xe8>)
   1a8e0:	681b      	ldr	r3, [r3, #0]
   1a8e2:	2b00      	cmp	r3, #0
   1a8e4:	d10b      	bne.n	1a8fe <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   1a8e6:	4b34      	ldr	r3, [pc, #208]	; (1a9b8 <uiTraceStart+0xe8>)
   1a8e8:	681b      	ldr	r3, [r3, #0]
   1a8ea:	2b00      	cmp	r3, #0
   1a8ec:	d105      	bne.n	1a8fa <uiTraceStart+0x2a>
   1a8ee:	4b33      	ldr	r3, [pc, #204]	; (1a9bc <uiTraceStart+0xec>)
   1a8f0:	0018      	movs	r0, r3
   1a8f2:	4b33      	ldr	r3, [pc, #204]	; (1a9c0 <uiTraceStart+0xf0>)
   1a8f4:	4798      	blx	r3
   1a8f6:	2300      	movs	r3, #0
   1a8f8:	e059      	b.n	1a9ae <uiTraceStart+0xde>
		return 0;
   1a8fa:	2300      	movs	r3, #0
   1a8fc:	e057      	b.n	1a9ae <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   1a8fe:	4b2e      	ldr	r3, [pc, #184]	; (1a9b8 <uiTraceStart+0xe8>)
   1a900:	681b      	ldr	r3, [r3, #0]
   1a902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a904:	2b01      	cmp	r3, #1
   1a906:	d101      	bne.n	1a90c <uiTraceStart+0x3c>
		return 1; /* Already running */
   1a908:	2301      	movs	r3, #1
   1a90a:	e050      	b.n	1a9ae <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   1a90c:	4b2d      	ldr	r3, [pc, #180]	; (1a9c4 <uiTraceStart+0xf4>)
   1a90e:	681b      	ldr	r3, [r3, #0]
   1a910:	2b00      	cmp	r3, #0
   1a912:	d149      	bne.n	1a9a8 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1a914:	f3ef 8310 	mrs	r3, PRIMASK
   1a918:	60bb      	str	r3, [r7, #8]
  return(result);
   1a91a:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   1a91c:	613b      	str	r3, [r7, #16]
   1a91e:	2301      	movs	r3, #1
   1a920:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1a922:	68fb      	ldr	r3, [r7, #12]
   1a924:	f383 8810 	msr	PRIMASK, r3
   1a928:	4b27      	ldr	r3, [pc, #156]	; (1a9c8 <uiTraceStart+0xf8>)
   1a92a:	681b      	ldr	r3, [r3, #0]
   1a92c:	1c5a      	adds	r2, r3, #1
   1a92e:	4b26      	ldr	r3, [pc, #152]	; (1a9c8 <uiTraceStart+0xf8>)
   1a930:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   1a932:	4b21      	ldr	r3, [pc, #132]	; (1a9b8 <uiTraceStart+0xe8>)
   1a934:	681b      	ldr	r3, [r3, #0]
   1a936:	2201      	movs	r2, #1
   1a938:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   1a93a:	4b24      	ldr	r3, [pc, #144]	; (1a9cc <uiTraceStart+0xfc>)
   1a93c:	4798      	blx	r3
   1a93e:	0003      	movs	r3, r0
   1a940:	0018      	movs	r0, r3
   1a942:	4b23      	ldr	r3, [pc, #140]	; (1a9d0 <uiTraceStart+0x100>)
   1a944:	4798      	blx	r3
   1a946:	0003      	movs	r3, r0
   1a948:	001a      	movs	r2, r3
   1a94a:	2317      	movs	r3, #23
   1a94c:	18fb      	adds	r3, r7, r3
   1a94e:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   1a950:	2317      	movs	r3, #23
   1a952:	18fb      	adds	r3, r7, r3
   1a954:	781b      	ldrb	r3, [r3, #0]
   1a956:	2b00      	cmp	r3, #0
   1a958:	d116      	bne.n	1a988 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   1a95a:	2317      	movs	r3, #23
   1a95c:	18fc      	adds	r4, r7, r3
   1a95e:	2003      	movs	r0, #3
   1a960:	4b1c      	ldr	r3, [pc, #112]	; (1a9d4 <uiTraceStart+0x104>)
   1a962:	4798      	blx	r3
   1a964:	0003      	movs	r3, r0
   1a966:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   1a968:	4a1b      	ldr	r2, [pc, #108]	; (1a9d8 <uiTraceStart+0x108>)
   1a96a:	2317      	movs	r3, #23
   1a96c:	18fb      	adds	r3, r7, r3
   1a96e:	781b      	ldrb	r3, [r3, #0]
   1a970:	0019      	movs	r1, r3
   1a972:	2003      	movs	r0, #3
   1a974:	4b19      	ldr	r3, [pc, #100]	; (1a9dc <uiTraceStart+0x10c>)
   1a976:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   1a978:	2317      	movs	r3, #23
   1a97a:	18fb      	adds	r3, r7, r3
   1a97c:	781b      	ldrb	r3, [r3, #0]
   1a97e:	2200      	movs	r2, #0
   1a980:	0019      	movs	r1, r3
   1a982:	2003      	movs	r0, #3
   1a984:	4b16      	ldr	r3, [pc, #88]	; (1a9e0 <uiTraceStart+0x110>)
   1a986:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   1a988:	2317      	movs	r3, #23
   1a98a:	18fb      	adds	r3, r7, r3
   1a98c:	781b      	ldrb	r3, [r3, #0]
   1a98e:	0018      	movs	r0, r3
   1a990:	4b14      	ldr	r3, [pc, #80]	; (1a9e4 <uiTraceStart+0x114>)
   1a992:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   1a994:	4b0c      	ldr	r3, [pc, #48]	; (1a9c8 <uiTraceStart+0xf8>)
   1a996:	681b      	ldr	r3, [r3, #0]
   1a998:	1e5a      	subs	r2, r3, #1
   1a99a:	4b0b      	ldr	r3, [pc, #44]	; (1a9c8 <uiTraceStart+0xf8>)
   1a99c:	601a      	str	r2, [r3, #0]
   1a99e:	693b      	ldr	r3, [r7, #16]
   1a9a0:	607b      	str	r3, [r7, #4]
   1a9a2:	687b      	ldr	r3, [r7, #4]
   1a9a4:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   1a9a8:	4b03      	ldr	r3, [pc, #12]	; (1a9b8 <uiTraceStart+0xe8>)
   1a9aa:	681b      	ldr	r3, [r3, #0]
   1a9ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   1a9ae:	0018      	movs	r0, r3
   1a9b0:	46bd      	mov	sp, r7
   1a9b2:	b007      	add	sp, #28
   1a9b4:	bd90      	pop	{r4, r7, pc}
   1a9b6:	46c0      	nop			; (mov r8, r8)
   1a9b8:	20000a44 	.word	0x20000a44
   1a9bc:	00039750 	.word	0x00039750
   1a9c0:	0001bb39 	.word	0x0001bb39
   1a9c4:	200009a4 	.word	0x200009a4
   1a9c8:	2000099c 	.word	0x2000099c
   1a9cc:	0001a539 	.word	0x0001a539
   1a9d0:	0001a27d 	.word	0x0001a27d
   1a9d4:	0001b81d 	.word	0x0001b81d
   1a9d8:	00039794 	.word	0x00039794
   1a9dc:	0001ba4d 	.word	0x0001ba4d
   1a9e0:	0001b1b1 	.word	0x0001b1b1
   1a9e4:	0001b099 	.word	0x0001b099

0001a9e8 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   1a9e8:	b580      	push	{r7, lr}
   1a9ea:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   1a9ec:	4b02      	ldr	r3, [pc, #8]	; (1a9f8 <vTraceStart+0x10>)
   1a9ee:	4798      	blx	r3
}
   1a9f0:	46c0      	nop			; (mov r8, r8)
   1a9f2:	46bd      	mov	sp, r7
   1a9f4:	bd80      	pop	{r7, pc}
   1a9f6:	46c0      	nop			; (mov r8, r8)
   1a9f8:	0001a8d1 	.word	0x0001a8d1

0001a9fc <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   1a9fc:	b580      	push	{r7, lr}
   1a9fe:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   1aa00:	4b08      	ldr	r3, [pc, #32]	; (1aa24 <vTraceStop+0x28>)
   1aa02:	681b      	ldr	r3, [r3, #0]
   1aa04:	2b00      	cmp	r3, #0
   1aa06:	d003      	beq.n	1aa10 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   1aa08:	4b06      	ldr	r3, [pc, #24]	; (1aa24 <vTraceStop+0x28>)
   1aa0a:	681b      	ldr	r3, [r3, #0]
   1aa0c:	2200      	movs	r2, #0
   1aa0e:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   1aa10:	4b05      	ldr	r3, [pc, #20]	; (1aa28 <vTraceStop+0x2c>)
   1aa12:	681b      	ldr	r3, [r3, #0]
   1aa14:	2b00      	cmp	r3, #0
   1aa16:	d002      	beq.n	1aa1e <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   1aa18:	4b03      	ldr	r3, [pc, #12]	; (1aa28 <vTraceStop+0x2c>)
   1aa1a:	681b      	ldr	r3, [r3, #0]
   1aa1c:	4798      	blx	r3
	}
}
   1aa1e:	46c0      	nop			; (mov r8, r8)
   1aa20:	46bd      	mov	sp, r7
   1aa22:	bd80      	pop	{r7, pc}
   1aa24:	20000a44 	.word	0x20000a44
   1aa28:	200009ac 	.word	0x200009ac

0001aa2c <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   1aa2c:	b580      	push	{r7, lr}
   1aa2e:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   1aa30:	4b05      	ldr	r3, [pc, #20]	; (1aa48 <xTraceIsRecordingEnabled+0x1c>)
   1aa32:	681b      	ldr	r3, [r3, #0]
   1aa34:	2b00      	cmp	r3, #0
   1aa36:	d003      	beq.n	1aa40 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   1aa38:	4b03      	ldr	r3, [pc, #12]	; (1aa48 <xTraceIsRecordingEnabled+0x1c>)
   1aa3a:	681b      	ldr	r3, [r3, #0]
   1aa3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1aa3e:	e000      	b.n	1aa42 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   1aa40:	2300      	movs	r3, #0
	}
}
   1aa42:	0018      	movs	r0, r3
   1aa44:	46bd      	mov	sp, r7
   1aa46:	bd80      	pop	{r7, pc}
   1aa48:	20000a44 	.word	0x20000a44

0001aa4c <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   1aa4c:	b590      	push	{r4, r7, lr}
   1aa4e:	b089      	sub	sp, #36	; 0x24
   1aa50:	af00      	add	r7, sp, #0
   1aa52:	0002      	movs	r2, r0
   1aa54:	1dfb      	adds	r3, r7, #7
   1aa56:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   1aa58:	1dfb      	adds	r3, r7, #7
   1aa5a:	781b      	ldrb	r3, [r3, #0]
   1aa5c:	2b00      	cmp	r3, #0
   1aa5e:	d057      	beq.n	1ab10 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   1aa60:	4b2e      	ldr	r3, [pc, #184]	; (1ab1c <prvTraceStoreTaskReady+0xd0>)
   1aa62:	681b      	ldr	r3, [r3, #0]
   1aa64:	2b00      	cmp	r3, #0
   1aa66:	d055      	beq.n	1ab14 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   1aa68:	1dfb      	adds	r3, r7, #7
   1aa6a:	781b      	ldrb	r3, [r3, #0]
   1aa6c:	2b0f      	cmp	r3, #15
   1aa6e:	d904      	bls.n	1aa7a <prvTraceStoreTaskReady+0x2e>
   1aa70:	4b2b      	ldr	r3, [pc, #172]	; (1ab20 <prvTraceStoreTaskReady+0xd4>)
   1aa72:	0018      	movs	r0, r3
   1aa74:	4b2b      	ldr	r3, [pc, #172]	; (1ab24 <prvTraceStoreTaskReady+0xd8>)
   1aa76:	4798      	blx	r3
   1aa78:	e04d      	b.n	1ab16 <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   1aa7a:	4b2b      	ldr	r3, [pc, #172]	; (1ab28 <prvTraceStoreTaskReady+0xdc>)
   1aa7c:	681b      	ldr	r3, [r3, #0]
   1aa7e:	2b00      	cmp	r3, #0
   1aa80:	d004      	beq.n	1aa8c <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   1aa82:	4b2a      	ldr	r3, [pc, #168]	; (1ab2c <prvTraceStoreTaskReady+0xe0>)
   1aa84:	0018      	movs	r0, r3
   1aa86:	4b27      	ldr	r3, [pc, #156]	; (1ab24 <prvTraceStoreTaskReady+0xd8>)
   1aa88:	4798      	blx	r3
		return;
   1aa8a:	e044      	b.n	1ab16 <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1aa8c:	f3ef 8310 	mrs	r3, PRIMASK
   1aa90:	60fb      	str	r3, [r7, #12]
  return(result);
   1aa92:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   1aa94:	61fb      	str	r3, [r7, #28]
   1aa96:	2301      	movs	r3, #1
   1aa98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1aa9a:	693b      	ldr	r3, [r7, #16]
   1aa9c:	f383 8810 	msr	PRIMASK, r3
   1aaa0:	4b21      	ldr	r3, [pc, #132]	; (1ab28 <prvTraceStoreTaskReady+0xdc>)
   1aaa2:	681b      	ldr	r3, [r3, #0]
   1aaa4:	1c5a      	adds	r2, r3, #1
   1aaa6:	4b20      	ldr	r3, [pc, #128]	; (1ab28 <prvTraceStoreTaskReady+0xdc>)
   1aaa8:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   1aaaa:	4b21      	ldr	r3, [pc, #132]	; (1ab30 <prvTraceStoreTaskReady+0xe4>)
   1aaac:	681b      	ldr	r3, [r3, #0]
   1aaae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1aab0:	2b00      	cmp	r3, #0
   1aab2:	d022      	beq.n	1aafa <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1aab4:	231a      	movs	r3, #26
   1aab6:	18fc      	adds	r4, r7, r3
   1aab8:	4b1e      	ldr	r3, [pc, #120]	; (1ab34 <prvTraceStoreTaskReady+0xe8>)
   1aaba:	0018      	movs	r0, r3
   1aabc:	4b1e      	ldr	r3, [pc, #120]	; (1ab38 <prvTraceStoreTaskReady+0xec>)
   1aabe:	4798      	blx	r3
   1aac0:	0003      	movs	r3, r0
   1aac2:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   1aac4:	2319      	movs	r3, #25
   1aac6:	18fb      	adds	r3, r7, r3
   1aac8:	1dfa      	adds	r2, r7, #7
   1aaca:	7812      	ldrb	r2, [r2, #0]
   1aacc:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   1aace:	4b1b      	ldr	r3, [pc, #108]	; (1ab3c <prvTraceStoreTaskReady+0xf0>)
   1aad0:	4798      	blx	r3
   1aad2:	0003      	movs	r3, r0
   1aad4:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   1aad6:	697b      	ldr	r3, [r7, #20]
   1aad8:	2b00      	cmp	r3, #0
   1aada:	d00e      	beq.n	1aafa <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   1aadc:	697b      	ldr	r3, [r7, #20]
   1aade:	2202      	movs	r2, #2
   1aae0:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   1aae2:	697b      	ldr	r3, [r7, #20]
   1aae4:	221a      	movs	r2, #26
   1aae6:	18ba      	adds	r2, r7, r2
   1aae8:	8812      	ldrh	r2, [r2, #0]
   1aaea:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   1aaec:	697b      	ldr	r3, [r7, #20]
   1aaee:	2219      	movs	r2, #25
   1aaf0:	18ba      	adds	r2, r7, r2
   1aaf2:	7812      	ldrb	r2, [r2, #0]
   1aaf4:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1aaf6:	4b12      	ldr	r3, [pc, #72]	; (1ab40 <prvTraceStoreTaskReady+0xf4>)
   1aaf8:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1aafa:	4b0b      	ldr	r3, [pc, #44]	; (1ab28 <prvTraceStoreTaskReady+0xdc>)
   1aafc:	681b      	ldr	r3, [r3, #0]
   1aafe:	1e5a      	subs	r2, r3, #1
   1ab00:	4b09      	ldr	r3, [pc, #36]	; (1ab28 <prvTraceStoreTaskReady+0xdc>)
   1ab02:	601a      	str	r2, [r3, #0]
   1ab04:	69fb      	ldr	r3, [r7, #28]
   1ab06:	60bb      	str	r3, [r7, #8]
   1ab08:	68bb      	ldr	r3, [r7, #8]
   1ab0a:	f383 8810 	msr	PRIMASK, r3
   1ab0e:	e002      	b.n	1ab16 <prvTraceStoreTaskReady+0xca>
		return;
   1ab10:	46c0      	nop			; (mov r8, r8)
   1ab12:	e000      	b.n	1ab16 <prvTraceStoreTaskReady+0xca>
		return;
   1ab14:	46c0      	nop			; (mov r8, r8)
}
   1ab16:	46bd      	mov	sp, r7
   1ab18:	b009      	add	sp, #36	; 0x24
   1ab1a:	bd90      	pop	{r4, r7, pc}
   1ab1c:	20000100 	.word	0x20000100
   1ab20:	00039afc 	.word	0x00039afc
   1ab24:	0001bb39 	.word	0x0001bb39
   1ab28:	2000099c 	.word	0x2000099c
   1ab2c:	00039b3c 	.word	0x00039b3c
   1ab30:	20000a44 	.word	0x20000a44
   1ab34:	0000ffff 	.word	0x0000ffff
   1ab38:	0001bd4d 	.word	0x0001bd4d
   1ab3c:	0001b6f1 	.word	0x0001b6f1
   1ab40:	0001bcf5 	.word	0x0001bcf5

0001ab44 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   1ab44:	b580      	push	{r7, lr}
   1ab46:	b08e      	sub	sp, #56	; 0x38
   1ab48:	af00      	add	r7, sp, #0
   1ab4a:	60f8      	str	r0, [r7, #12]
   1ab4c:	60b9      	str	r1, [r7, #8]
   1ab4e:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   1ab50:	4b48      	ldr	r3, [pc, #288]	; (1ac74 <vTraceStoreMemMangEvent+0x130>)
   1ab52:	681b      	ldr	r3, [r3, #0]
   1ab54:	2b00      	cmp	r3, #0
   1ab56:	d100      	bne.n	1ab5a <vTraceStoreMemMangEvent+0x16>
   1ab58:	e088      	b.n	1ac6c <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   1ab5a:	687b      	ldr	r3, [r7, #4]
   1ab5c:	2b00      	cmp	r3, #0
   1ab5e:	da03      	bge.n	1ab68 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   1ab60:	687b      	ldr	r3, [r7, #4]
   1ab62:	425b      	negs	r3, r3
   1ab64:	637b      	str	r3, [r7, #52]	; 0x34
   1ab66:	e001      	b.n	1ab6c <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   1ab68:	687b      	ldr	r3, [r7, #4]
   1ab6a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1ab6c:	f3ef 8310 	mrs	r3, PRIMASK
   1ab70:	61bb      	str	r3, [r7, #24]
  return(result);
   1ab72:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   1ab74:	633b      	str	r3, [r7, #48]	; 0x30
   1ab76:	2301      	movs	r3, #1
   1ab78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1ab7a:	69fb      	ldr	r3, [r7, #28]
   1ab7c:	f383 8810 	msr	PRIMASK, r3
   1ab80:	4b3d      	ldr	r3, [pc, #244]	; (1ac78 <vTraceStoreMemMangEvent+0x134>)
   1ab82:	681b      	ldr	r3, [r3, #0]
   1ab84:	1c5a      	adds	r2, r3, #1
   1ab86:	4b3c      	ldr	r3, [pc, #240]	; (1ac78 <vTraceStoreMemMangEvent+0x134>)
   1ab88:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   1ab8a:	68bb      	ldr	r3, [r7, #8]
   1ab8c:	2b00      	cmp	r3, #0
   1ab8e:	d005      	beq.n	1ab9c <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   1ab90:	4b3a      	ldr	r3, [pc, #232]	; (1ac7c <vTraceStoreMemMangEvent+0x138>)
   1ab92:	681a      	ldr	r2, [r3, #0]
   1ab94:	687b      	ldr	r3, [r7, #4]
   1ab96:	18d2      	adds	r2, r2, r3
   1ab98:	4b38      	ldr	r3, [pc, #224]	; (1ac7c <vTraceStoreMemMangEvent+0x138>)
   1ab9a:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   1ab9c:	4b35      	ldr	r3, [pc, #212]	; (1ac74 <vTraceStoreMemMangEvent+0x130>)
   1ab9e:	681b      	ldr	r3, [r3, #0]
   1aba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1aba2:	2b00      	cmp	r3, #0
   1aba4:	d057      	beq.n	1ac56 <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   1aba6:	20ff      	movs	r0, #255	; 0xff
   1aba8:	4b35      	ldr	r3, [pc, #212]	; (1ac80 <vTraceStoreMemMangEvent+0x13c>)
   1abaa:	4798      	blx	r3
   1abac:	0003      	movs	r3, r0
   1abae:	001a      	movs	r2, r3
   1abb0:	232f      	movs	r3, #47	; 0x2f
   1abb2:	18fb      	adds	r3, r7, r3
   1abb4:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   1abb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1abb8:	4a32      	ldr	r2, [pc, #200]	; (1ac84 <vTraceStoreMemMangEvent+0x140>)
   1abba:	0019      	movs	r1, r3
   1abbc:	0010      	movs	r0, r2
   1abbe:	4b32      	ldr	r3, [pc, #200]	; (1ac88 <vTraceStoreMemMangEvent+0x144>)
   1abc0:	4798      	blx	r3
   1abc2:	0002      	movs	r2, r0
   1abc4:	232c      	movs	r3, #44	; 0x2c
   1abc6:	18fb      	adds	r3, r7, r3
   1abc8:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   1abca:	4b30      	ldr	r3, [pc, #192]	; (1ac8c <vTraceStoreMemMangEvent+0x148>)
   1abcc:	4798      	blx	r3
   1abce:	0003      	movs	r3, r0
   1abd0:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   1abd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1abd4:	2b00      	cmp	r3, #0
   1abd6:	d03e      	beq.n	1ac56 <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   1abd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1abda:	222f      	movs	r2, #47	; 0x2f
   1abdc:	18ba      	adds	r2, r7, r2
   1abde:	7812      	ldrb	r2, [r2, #0]
   1abe0:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   1abe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1abe4:	2200      	movs	r2, #0
   1abe6:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   1abe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1abea:	222c      	movs	r2, #44	; 0x2c
   1abec:	18ba      	adds	r2, r7, r2
   1abee:	8812      	ldrh	r2, [r2, #0]
   1abf0:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1abf2:	4b27      	ldr	r3, [pc, #156]	; (1ac90 <vTraceStoreMemMangEvent+0x14c>)
   1abf4:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   1abf6:	68bb      	ldr	r3, [r7, #8]
   1abf8:	4a22      	ldr	r2, [pc, #136]	; (1ac84 <vTraceStoreMemMangEvent+0x140>)
   1abfa:	0019      	movs	r1, r3
   1abfc:	0010      	movs	r0, r2
   1abfe:	4b22      	ldr	r3, [pc, #136]	; (1ac88 <vTraceStoreMemMangEvent+0x144>)
   1ac00:	4798      	blx	r3
   1ac02:	0002      	movs	r2, r0
   1ac04:	2326      	movs	r3, #38	; 0x26
   1ac06:	18fb      	adds	r3, r7, r3
   1ac08:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   1ac0a:	2325      	movs	r3, #37	; 0x25
   1ac0c:	18fb      	adds	r3, r7, r3
   1ac0e:	2200      	movs	r2, #0
   1ac10:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   1ac12:	4b1e      	ldr	r3, [pc, #120]	; (1ac8c <vTraceStoreMemMangEvent+0x148>)
   1ac14:	4798      	blx	r3
   1ac16:	0003      	movs	r3, r0
   1ac18:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   1ac1a:	6a3b      	ldr	r3, [r7, #32]
   1ac1c:	2b00      	cmp	r3, #0
   1ac1e:	d01a      	beq.n	1ac56 <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   1ac20:	6a3b      	ldr	r3, [r7, #32]
   1ac22:	2226      	movs	r2, #38	; 0x26
   1ac24:	18ba      	adds	r2, r7, r2
   1ac26:	8812      	ldrh	r2, [r2, #0]
   1ac28:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   1ac2a:	6a3b      	ldr	r3, [r7, #32]
   1ac2c:	2225      	movs	r2, #37	; 0x25
   1ac2e:	18ba      	adds	r2, r7, r2
   1ac30:	7812      	ldrb	r2, [r2, #0]
   1ac32:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   1ac34:	68fb      	ldr	r3, [r7, #12]
   1ac36:	b2db      	uxtb	r3, r3
   1ac38:	3301      	adds	r3, #1
   1ac3a:	b2da      	uxtb	r2, r3
   1ac3c:	6a3b      	ldr	r3, [r7, #32]
   1ac3e:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   1ac40:	68fb      	ldr	r3, [r7, #12]
   1ac42:	b2da      	uxtb	r2, r3
   1ac44:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ac46:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   1ac48:	4b11      	ldr	r3, [pc, #68]	; (1ac90 <vTraceStoreMemMangEvent+0x14c>)
   1ac4a:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   1ac4c:	4b09      	ldr	r3, [pc, #36]	; (1ac74 <vTraceStoreMemMangEvent+0x130>)
   1ac4e:	681b      	ldr	r3, [r3, #0]
   1ac50:	4a0a      	ldr	r2, [pc, #40]	; (1ac7c <vTraceStoreMemMangEvent+0x138>)
   1ac52:	6812      	ldr	r2, [r2, #0]
   1ac54:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   1ac56:	4b08      	ldr	r3, [pc, #32]	; (1ac78 <vTraceStoreMemMangEvent+0x134>)
   1ac58:	681b      	ldr	r3, [r3, #0]
   1ac5a:	1e5a      	subs	r2, r3, #1
   1ac5c:	4b06      	ldr	r3, [pc, #24]	; (1ac78 <vTraceStoreMemMangEvent+0x134>)
   1ac5e:	601a      	str	r2, [r3, #0]
   1ac60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ac62:	617b      	str	r3, [r7, #20]
   1ac64:	697b      	ldr	r3, [r7, #20]
   1ac66:	f383 8810 	msr	PRIMASK, r3
   1ac6a:	e000      	b.n	1ac6e <vTraceStoreMemMangEvent+0x12a>
		return;
   1ac6c:	46c0      	nop			; (mov r8, r8)
}
   1ac6e:	46bd      	mov	sp, r7
   1ac70:	b00e      	add	sp, #56	; 0x38
   1ac72:	bd80      	pop	{r7, pc}
   1ac74:	20000a44 	.word	0x20000a44
   1ac78:	2000099c 	.word	0x2000099c
   1ac7c:	200009b0 	.word	0x200009b0
   1ac80:	0001bd4d 	.word	0x0001bd4d
   1ac84:	0000ffff 	.word	0x0000ffff
   1ac88:	0001af11 	.word	0x0001af11
   1ac8c:	0001b6f1 	.word	0x0001b6f1
   1ac90:	0001bcf5 	.word	0x0001bcf5

0001ac94 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   1ac94:	b590      	push	{r4, r7, lr}
   1ac96:	b08b      	sub	sp, #44	; 0x2c
   1ac98:	af00      	add	r7, sp, #0
   1ac9a:	60f8      	str	r0, [r7, #12]
   1ac9c:	607a      	str	r2, [r7, #4]
   1ac9e:	230b      	movs	r3, #11
   1aca0:	18fb      	adds	r3, r7, r3
   1aca2:	1c0a      	adds	r2, r1, #0
   1aca4:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   1aca6:	68fb      	ldr	r3, [r7, #12]
   1aca8:	2bfe      	cmp	r3, #254	; 0xfe
   1acaa:	d904      	bls.n	1acb6 <prvTraceStoreKernelCall+0x22>
   1acac:	4b39      	ldr	r3, [pc, #228]	; (1ad94 <prvTraceStoreKernelCall+0x100>)
   1acae:	0018      	movs	r0, r3
   1acb0:	4b39      	ldr	r3, [pc, #228]	; (1ad98 <prvTraceStoreKernelCall+0x104>)
   1acb2:	4798      	blx	r3
   1acb4:	e06b      	b.n	1ad8e <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1acb6:	230b      	movs	r3, #11
   1acb8:	18fb      	adds	r3, r7, r3
   1acba:	781b      	ldrb	r3, [r3, #0]
   1acbc:	2b08      	cmp	r3, #8
   1acbe:	d904      	bls.n	1acca <prvTraceStoreKernelCall+0x36>
   1acc0:	4b36      	ldr	r3, [pc, #216]	; (1ad9c <prvTraceStoreKernelCall+0x108>)
   1acc2:	0018      	movs	r0, r3
   1acc4:	4b34      	ldr	r3, [pc, #208]	; (1ad98 <prvTraceStoreKernelCall+0x104>)
   1acc6:	4798      	blx	r3
   1acc8:	e061      	b.n	1ad8e <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   1acca:	4b35      	ldr	r3, [pc, #212]	; (1ada0 <prvTraceStoreKernelCall+0x10c>)
   1accc:	681a      	ldr	r2, [r3, #0]
   1acce:	230b      	movs	r3, #11
   1acd0:	18fb      	adds	r3, r7, r3
   1acd2:	781b      	ldrb	r3, [r3, #0]
   1acd4:	2164      	movs	r1, #100	; 0x64
   1acd6:	18d3      	adds	r3, r2, r3
   1acd8:	185b      	adds	r3, r3, r1
   1acda:	781b      	ldrb	r3, [r3, #0]
   1acdc:	001a      	movs	r2, r3
   1acde:	687b      	ldr	r3, [r7, #4]
   1ace0:	429a      	cmp	r2, r3
   1ace2:	d204      	bcs.n	1acee <prvTraceStoreKernelCall+0x5a>
   1ace4:	4b2f      	ldr	r3, [pc, #188]	; (1ada4 <prvTraceStoreKernelCall+0x110>)
   1ace6:	0018      	movs	r0, r3
   1ace8:	4b2b      	ldr	r3, [pc, #172]	; (1ad98 <prvTraceStoreKernelCall+0x104>)
   1acea:	4798      	blx	r3
   1acec:	e04f      	b.n	1ad8e <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   1acee:	4b2e      	ldr	r3, [pc, #184]	; (1ada8 <prvTraceStoreKernelCall+0x114>)
   1acf0:	681b      	ldr	r3, [r3, #0]
   1acf2:	2b00      	cmp	r3, #0
   1acf4:	d004      	beq.n	1ad00 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   1acf6:	4b2d      	ldr	r3, [pc, #180]	; (1adac <prvTraceStoreKernelCall+0x118>)
   1acf8:	0018      	movs	r0, r3
   1acfa:	4b27      	ldr	r3, [pc, #156]	; (1ad98 <prvTraceStoreKernelCall+0x104>)
   1acfc:	4798      	blx	r3
		return;
   1acfe:	e046      	b.n	1ad8e <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   1ad00:	4b2b      	ldr	r3, [pc, #172]	; (1adb0 <prvTraceStoreKernelCall+0x11c>)
   1ad02:	781b      	ldrb	r3, [r3, #0]
   1ad04:	2b00      	cmp	r3, #0
   1ad06:	d041      	beq.n	1ad8c <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1ad08:	f3ef 8310 	mrs	r3, PRIMASK
   1ad0c:	617b      	str	r3, [r7, #20]
  return(result);
   1ad0e:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   1ad10:	627b      	str	r3, [r7, #36]	; 0x24
   1ad12:	2301      	movs	r3, #1
   1ad14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1ad16:	69bb      	ldr	r3, [r7, #24]
   1ad18:	f383 8810 	msr	PRIMASK, r3
   1ad1c:	4b22      	ldr	r3, [pc, #136]	; (1ada8 <prvTraceStoreKernelCall+0x114>)
   1ad1e:	681b      	ldr	r3, [r3, #0]
   1ad20:	1c5a      	adds	r2, r3, #1
   1ad22:	4b21      	ldr	r3, [pc, #132]	; (1ada8 <prvTraceStoreKernelCall+0x114>)
   1ad24:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   1ad26:	4b1e      	ldr	r3, [pc, #120]	; (1ada0 <prvTraceStoreKernelCall+0x10c>)
   1ad28:	681b      	ldr	r3, [r3, #0]
   1ad2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ad2c:	2b00      	cmp	r3, #0
   1ad2e:	d022      	beq.n	1ad76 <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1ad30:	2322      	movs	r3, #34	; 0x22
   1ad32:	18fc      	adds	r4, r7, r3
   1ad34:	4b1f      	ldr	r3, [pc, #124]	; (1adb4 <prvTraceStoreKernelCall+0x120>)
   1ad36:	0018      	movs	r0, r3
   1ad38:	4b1f      	ldr	r3, [pc, #124]	; (1adb8 <prvTraceStoreKernelCall+0x124>)
   1ad3a:	4798      	blx	r3
   1ad3c:	0003      	movs	r3, r0
   1ad3e:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   1ad40:	2321      	movs	r3, #33	; 0x21
   1ad42:	18fb      	adds	r3, r7, r3
   1ad44:	687a      	ldr	r2, [r7, #4]
   1ad46:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   1ad48:	4b1c      	ldr	r3, [pc, #112]	; (1adbc <prvTraceStoreKernelCall+0x128>)
   1ad4a:	4798      	blx	r3
   1ad4c:	0003      	movs	r3, r0
   1ad4e:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   1ad50:	69fb      	ldr	r3, [r7, #28]
   1ad52:	2b00      	cmp	r3, #0
   1ad54:	d00f      	beq.n	1ad76 <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   1ad56:	69fb      	ldr	r3, [r7, #28]
   1ad58:	2222      	movs	r2, #34	; 0x22
   1ad5a:	18ba      	adds	r2, r7, r2
   1ad5c:	8812      	ldrh	r2, [r2, #0]
   1ad5e:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   1ad60:	68fb      	ldr	r3, [r7, #12]
   1ad62:	b2da      	uxtb	r2, r3
   1ad64:	69fb      	ldr	r3, [r7, #28]
   1ad66:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   1ad68:	69fb      	ldr	r3, [r7, #28]
   1ad6a:	2221      	movs	r2, #33	; 0x21
   1ad6c:	18ba      	adds	r2, r7, r2
   1ad6e:	7812      	ldrb	r2, [r2, #0]
   1ad70:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1ad72:	4b13      	ldr	r3, [pc, #76]	; (1adc0 <prvTraceStoreKernelCall+0x12c>)
   1ad74:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1ad76:	4b0c      	ldr	r3, [pc, #48]	; (1ada8 <prvTraceStoreKernelCall+0x114>)
   1ad78:	681b      	ldr	r3, [r3, #0]
   1ad7a:	1e5a      	subs	r2, r3, #1
   1ad7c:	4b0a      	ldr	r3, [pc, #40]	; (1ada8 <prvTraceStoreKernelCall+0x114>)
   1ad7e:	601a      	str	r2, [r3, #0]
   1ad80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ad82:	613b      	str	r3, [r7, #16]
   1ad84:	693b      	ldr	r3, [r7, #16]
   1ad86:	f383 8810 	msr	PRIMASK, r3
   1ad8a:	e000      	b.n	1ad8e <prvTraceStoreKernelCall+0xfa>
		return;
   1ad8c:	46c0      	nop			; (mov r8, r8)
}
   1ad8e:	46bd      	mov	sp, r7
   1ad90:	b00b      	add	sp, #44	; 0x2c
   1ad92:	bd90      	pop	{r4, r7, pc}
   1ad94:	00039bac 	.word	0x00039bac
   1ad98:	0001bb39 	.word	0x0001bb39
   1ad9c:	00039be4 	.word	0x00039be4
   1ada0:	20000a44 	.word	0x20000a44
   1ada4:	00039c2c 	.word	0x00039c2c
   1ada8:	2000099c 	.word	0x2000099c
   1adac:	00039c74 	.word	0x00039c74
   1adb0:	200009a8 	.word	0x200009a8
   1adb4:	0000ffff 	.word	0x0000ffff
   1adb8:	0001bd4d 	.word	0x0001bd4d
   1adbc:	0001b6f1 	.word	0x0001b6f1
   1adc0:	0001bcf5 	.word	0x0001bcf5

0001adc4 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   1adc4:	b580      	push	{r7, lr}
   1adc6:	b08a      	sub	sp, #40	; 0x28
   1adc8:	af00      	add	r7, sp, #0
   1adca:	60f8      	str	r0, [r7, #12]
   1adcc:	607a      	str	r2, [r7, #4]
   1adce:	603b      	str	r3, [r7, #0]
   1add0:	230b      	movs	r3, #11
   1add2:	18fb      	adds	r3, r7, r3
   1add4:	1c0a      	adds	r2, r1, #0
   1add6:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   1add8:	68fb      	ldr	r3, [r7, #12]
   1adda:	2bfe      	cmp	r3, #254	; 0xfe
   1addc:	d904      	bls.n	1ade8 <prvTraceStoreKernelCallWithParam+0x24>
   1adde:	4b40      	ldr	r3, [pc, #256]	; (1aee0 <prvTraceStoreKernelCallWithParam+0x11c>)
   1ade0:	0018      	movs	r0, r3
   1ade2:	4b40      	ldr	r3, [pc, #256]	; (1aee4 <prvTraceStoreKernelCallWithParam+0x120>)
   1ade4:	4798      	blx	r3
   1ade6:	e077      	b.n	1aed8 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1ade8:	230b      	movs	r3, #11
   1adea:	18fb      	adds	r3, r7, r3
   1adec:	781b      	ldrb	r3, [r3, #0]
   1adee:	2b08      	cmp	r3, #8
   1adf0:	d904      	bls.n	1adfc <prvTraceStoreKernelCallWithParam+0x38>
   1adf2:	4b3d      	ldr	r3, [pc, #244]	; (1aee8 <prvTraceStoreKernelCallWithParam+0x124>)
   1adf4:	0018      	movs	r0, r3
   1adf6:	4b3b      	ldr	r3, [pc, #236]	; (1aee4 <prvTraceStoreKernelCallWithParam+0x120>)
   1adf8:	4798      	blx	r3
   1adfa:	e06d      	b.n	1aed8 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   1adfc:	4b3b      	ldr	r3, [pc, #236]	; (1aeec <prvTraceStoreKernelCallWithParam+0x128>)
   1adfe:	681a      	ldr	r2, [r3, #0]
   1ae00:	230b      	movs	r3, #11
   1ae02:	18fb      	adds	r3, r7, r3
   1ae04:	781b      	ldrb	r3, [r3, #0]
   1ae06:	2164      	movs	r1, #100	; 0x64
   1ae08:	18d3      	adds	r3, r2, r3
   1ae0a:	185b      	adds	r3, r3, r1
   1ae0c:	781b      	ldrb	r3, [r3, #0]
   1ae0e:	001a      	movs	r2, r3
   1ae10:	687b      	ldr	r3, [r7, #4]
   1ae12:	429a      	cmp	r2, r3
   1ae14:	d204      	bcs.n	1ae20 <prvTraceStoreKernelCallWithParam+0x5c>
   1ae16:	4b36      	ldr	r3, [pc, #216]	; (1aef0 <prvTraceStoreKernelCallWithParam+0x12c>)
   1ae18:	0018      	movs	r0, r3
   1ae1a:	4b32      	ldr	r3, [pc, #200]	; (1aee4 <prvTraceStoreKernelCallWithParam+0x120>)
   1ae1c:	4798      	blx	r3
   1ae1e:	e05b      	b.n	1aed8 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   1ae20:	4b34      	ldr	r3, [pc, #208]	; (1aef4 <prvTraceStoreKernelCallWithParam+0x130>)
   1ae22:	681b      	ldr	r3, [r3, #0]
   1ae24:	2b00      	cmp	r3, #0
   1ae26:	d004      	beq.n	1ae32 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   1ae28:	4b33      	ldr	r3, [pc, #204]	; (1aef8 <prvTraceStoreKernelCallWithParam+0x134>)
   1ae2a:	0018      	movs	r0, r3
   1ae2c:	4b2d      	ldr	r3, [pc, #180]	; (1aee4 <prvTraceStoreKernelCallWithParam+0x120>)
   1ae2e:	4798      	blx	r3
		return;
   1ae30:	e052      	b.n	1aed8 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1ae32:	f3ef 8310 	mrs	r3, PRIMASK
   1ae36:	617b      	str	r3, [r7, #20]
  return(result);
   1ae38:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   1ae3a:	627b      	str	r3, [r7, #36]	; 0x24
   1ae3c:	2301      	movs	r3, #1
   1ae3e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1ae40:	69bb      	ldr	r3, [r7, #24]
   1ae42:	f383 8810 	msr	PRIMASK, r3
   1ae46:	4b2b      	ldr	r3, [pc, #172]	; (1aef4 <prvTraceStoreKernelCallWithParam+0x130>)
   1ae48:	681b      	ldr	r3, [r3, #0]
   1ae4a:	1c5a      	adds	r2, r3, #1
   1ae4c:	4b29      	ldr	r3, [pc, #164]	; (1aef4 <prvTraceStoreKernelCallWithParam+0x130>)
   1ae4e:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   1ae50:	4b26      	ldr	r3, [pc, #152]	; (1aeec <prvTraceStoreKernelCallWithParam+0x128>)
   1ae52:	681b      	ldr	r3, [r3, #0]
   1ae54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ae56:	2b00      	cmp	r3, #0
   1ae58:	d034      	beq.n	1aec4 <prvTraceStoreKernelCallWithParam+0x100>
   1ae5a:	4b28      	ldr	r3, [pc, #160]	; (1aefc <prvTraceStoreKernelCallWithParam+0x138>)
   1ae5c:	781b      	ldrb	r3, [r3, #0]
   1ae5e:	2b00      	cmp	r3, #0
   1ae60:	d030      	beq.n	1aec4 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   1ae62:	20ff      	movs	r0, #255	; 0xff
   1ae64:	4b26      	ldr	r3, [pc, #152]	; (1af00 <prvTraceStoreKernelCallWithParam+0x13c>)
   1ae66:	4798      	blx	r3
   1ae68:	0003      	movs	r3, r0
   1ae6a:	001a      	movs	r2, r3
   1ae6c:	2323      	movs	r3, #35	; 0x23
   1ae6e:	18fb      	adds	r3, r7, r3
   1ae70:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   1ae72:	683b      	ldr	r3, [r7, #0]
   1ae74:	0019      	movs	r1, r3
   1ae76:	20ff      	movs	r0, #255	; 0xff
   1ae78:	4b22      	ldr	r3, [pc, #136]	; (1af04 <prvTraceStoreKernelCallWithParam+0x140>)
   1ae7a:	4798      	blx	r3
   1ae7c:	0002      	movs	r2, r0
   1ae7e:	2322      	movs	r3, #34	; 0x22
   1ae80:	18fb      	adds	r3, r7, r3
   1ae82:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   1ae84:	2321      	movs	r3, #33	; 0x21
   1ae86:	18fb      	adds	r3, r7, r3
   1ae88:	687a      	ldr	r2, [r7, #4]
   1ae8a:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   1ae8c:	4b1e      	ldr	r3, [pc, #120]	; (1af08 <prvTraceStoreKernelCallWithParam+0x144>)
   1ae8e:	4798      	blx	r3
   1ae90:	0003      	movs	r3, r0
   1ae92:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   1ae94:	69fb      	ldr	r3, [r7, #28]
   1ae96:	2b00      	cmp	r3, #0
   1ae98:	d014      	beq.n	1aec4 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   1ae9a:	69fb      	ldr	r3, [r7, #28]
   1ae9c:	2223      	movs	r2, #35	; 0x23
   1ae9e:	18ba      	adds	r2, r7, r2
   1aea0:	7812      	ldrb	r2, [r2, #0]
   1aea2:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   1aea4:	68fb      	ldr	r3, [r7, #12]
   1aea6:	b2da      	uxtb	r2, r3
   1aea8:	69fb      	ldr	r3, [r7, #28]
   1aeaa:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   1aeac:	69fb      	ldr	r3, [r7, #28]
   1aeae:	2221      	movs	r2, #33	; 0x21
   1aeb0:	18ba      	adds	r2, r7, r2
   1aeb2:	7812      	ldrb	r2, [r2, #0]
   1aeb4:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   1aeb6:	69fb      	ldr	r3, [r7, #28]
   1aeb8:	2222      	movs	r2, #34	; 0x22
   1aeba:	18ba      	adds	r2, r7, r2
   1aebc:	7812      	ldrb	r2, [r2, #0]
   1aebe:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   1aec0:	4b12      	ldr	r3, [pc, #72]	; (1af0c <prvTraceStoreKernelCallWithParam+0x148>)
   1aec2:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1aec4:	4b0b      	ldr	r3, [pc, #44]	; (1aef4 <prvTraceStoreKernelCallWithParam+0x130>)
   1aec6:	681b      	ldr	r3, [r3, #0]
   1aec8:	1e5a      	subs	r2, r3, #1
   1aeca:	4b0a      	ldr	r3, [pc, #40]	; (1aef4 <prvTraceStoreKernelCallWithParam+0x130>)
   1aecc:	601a      	str	r2, [r3, #0]
   1aece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aed0:	613b      	str	r3, [r7, #16]
   1aed2:	693b      	ldr	r3, [r7, #16]
   1aed4:	f383 8810 	msr	PRIMASK, r3
}
   1aed8:	46bd      	mov	sp, r7
   1aeda:	b00a      	add	sp, #40	; 0x28
   1aedc:	bd80      	pop	{r7, pc}
   1aede:	46c0      	nop			; (mov r8, r8)
   1aee0:	00039cac 	.word	0x00039cac
   1aee4:	0001bb39 	.word	0x0001bb39
   1aee8:	00039cec 	.word	0x00039cec
   1aeec:	20000a44 	.word	0x20000a44
   1aef0:	00039d3c 	.word	0x00039d3c
   1aef4:	2000099c 	.word	0x2000099c
   1aef8:	00039d8c 	.word	0x00039d8c
   1aefc:	200009a8 	.word	0x200009a8
   1af00:	0001bd4d 	.word	0x0001bd4d
   1af04:	0001af11 	.word	0x0001af11
   1af08:	0001b6f1 	.word	0x0001b6f1
   1af0c:	0001bcf5 	.word	0x0001bcf5

0001af10 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   1af10:	b580      	push	{r7, lr}
   1af12:	b084      	sub	sp, #16
   1af14:	af00      	add	r7, sp, #0
   1af16:	6078      	str	r0, [r7, #4]
   1af18:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   1af1a:	687b      	ldr	r3, [r7, #4]
   1af1c:	2bff      	cmp	r3, #255	; 0xff
   1af1e:	d009      	beq.n	1af34 <prvTraceGetParam+0x24>
   1af20:	687b      	ldr	r3, [r7, #4]
   1af22:	4a19      	ldr	r2, [pc, #100]	; (1af88 <prvTraceGetParam+0x78>)
   1af24:	4293      	cmp	r3, r2
   1af26:	d005      	beq.n	1af34 <prvTraceGetParam+0x24>
   1af28:	4b18      	ldr	r3, [pc, #96]	; (1af8c <prvTraceGetParam+0x7c>)
   1af2a:	0018      	movs	r0, r3
   1af2c:	4b18      	ldr	r3, [pc, #96]	; (1af90 <prvTraceGetParam+0x80>)
   1af2e:	4798      	blx	r3
   1af30:	683b      	ldr	r3, [r7, #0]
   1af32:	e024      	b.n	1af7e <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   1af34:	683a      	ldr	r2, [r7, #0]
   1af36:	687b      	ldr	r3, [r7, #4]
   1af38:	429a      	cmp	r2, r3
   1af3a:	d801      	bhi.n	1af40 <prvTraceGetParam+0x30>
	{
		return param;
   1af3c:	683b      	ldr	r3, [r7, #0]
   1af3e:	e01e      	b.n	1af7e <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   1af40:	4b14      	ldr	r3, [pc, #80]	; (1af94 <prvTraceGetParam+0x84>)
   1af42:	4798      	blx	r3
   1af44:	0003      	movs	r3, r0
   1af46:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   1af48:	68fb      	ldr	r3, [r7, #12]
   1af4a:	2b00      	cmp	r3, #0
   1af4c:	d014      	beq.n	1af78 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   1af4e:	68fb      	ldr	r3, [r7, #12]
   1af50:	2201      	movs	r2, #1
   1af52:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   1af54:	687b      	ldr	r3, [r7, #4]
   1af56:	43db      	mvns	r3, r3
   1af58:	683a      	ldr	r2, [r7, #0]
   1af5a:	4013      	ands	r3, r2
   1af5c:	0a1b      	lsrs	r3, r3, #8
   1af5e:	b2da      	uxtb	r2, r3
   1af60:	68fb      	ldr	r3, [r7, #12]
   1af62:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   1af64:	687b      	ldr	r3, [r7, #4]
   1af66:	43db      	mvns	r3, r3
   1af68:	683a      	ldr	r2, [r7, #0]
   1af6a:	4013      	ands	r3, r2
   1af6c:	0c1b      	lsrs	r3, r3, #16
   1af6e:	b29a      	uxth	r2, r3
   1af70:	68fb      	ldr	r3, [r7, #12]
   1af72:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1af74:	4b08      	ldr	r3, [pc, #32]	; (1af98 <prvTraceGetParam+0x88>)
   1af76:	4798      	blx	r3
		}

		return param & param_max;
   1af78:	683b      	ldr	r3, [r7, #0]
   1af7a:	687a      	ldr	r2, [r7, #4]
   1af7c:	4013      	ands	r3, r2
	}
}
   1af7e:	0018      	movs	r0, r3
   1af80:	46bd      	mov	sp, r7
   1af82:	b004      	add	sp, #16
   1af84:	bd80      	pop	{r7, pc}
   1af86:	46c0      	nop			; (mov r8, r8)
   1af88:	0000ffff 	.word	0x0000ffff
   1af8c:	00039dc4 	.word	0x00039dc4
   1af90:	0001bb39 	.word	0x0001bb39
   1af94:	0001b6f1 	.word	0x0001b6f1
   1af98:	0001bcf5 	.word	0x0001bcf5

0001af9c <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   1af9c:	b580      	push	{r7, lr}
   1af9e:	b08a      	sub	sp, #40	; 0x28
   1afa0:	af00      	add	r7, sp, #0
   1afa2:	6078      	str	r0, [r7, #4]
   1afa4:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   1afa6:	2326      	movs	r3, #38	; 0x26
   1afa8:	18fb      	adds	r3, r7, r3
   1afaa:	2200      	movs	r2, #0
   1afac:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   1afae:	687b      	ldr	r3, [r7, #4]
   1afb0:	2bfe      	cmp	r3, #254	; 0xfe
   1afb2:	d904      	bls.n	1afbe <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   1afb4:	4b2d      	ldr	r3, [pc, #180]	; (1b06c <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   1afb6:	0018      	movs	r0, r3
   1afb8:	4b2d      	ldr	r3, [pc, #180]	; (1b070 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   1afba:	4798      	blx	r3
   1afbc:	e053      	b.n	1b066 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   1afbe:	4b2d      	ldr	r3, [pc, #180]	; (1b074 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1afc0:	681b      	ldr	r3, [r3, #0]
   1afc2:	2b00      	cmp	r3, #0
   1afc4:	d004      	beq.n	1afd0 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   1afc6:	4b2c      	ldr	r3, [pc, #176]	; (1b078 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   1afc8:	0018      	movs	r0, r3
   1afca:	4b29      	ldr	r3, [pc, #164]	; (1b070 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   1afcc:	4798      	blx	r3
		return;
   1afce:	e04a      	b.n	1b066 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1afd0:	f3ef 8310 	mrs	r3, PRIMASK
   1afd4:	613b      	str	r3, [r7, #16]
  return(result);
   1afd6:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   1afd8:	623b      	str	r3, [r7, #32]
   1afda:	2301      	movs	r3, #1
   1afdc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1afde:	697b      	ldr	r3, [r7, #20]
   1afe0:	f383 8810 	msr	PRIMASK, r3
   1afe4:	4b23      	ldr	r3, [pc, #140]	; (1b074 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1afe6:	681b      	ldr	r3, [r3, #0]
   1afe8:	1c5a      	adds	r2, r3, #1
   1afea:	4b22      	ldr	r3, [pc, #136]	; (1b074 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1afec:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   1afee:	4b23      	ldr	r3, [pc, #140]	; (1b07c <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   1aff0:	681b      	ldr	r3, [r3, #0]
   1aff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1aff4:	2b00      	cmp	r3, #0
   1aff6:	d02c      	beq.n	1b052 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   1aff8:	4b21      	ldr	r3, [pc, #132]	; (1b080 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   1affa:	781b      	ldrb	r3, [r3, #0]
   1affc:	2b00      	cmp	r3, #0
   1affe:	d028      	beq.n	1b052 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   1b000:	20ff      	movs	r0, #255	; 0xff
   1b002:	4b20      	ldr	r3, [pc, #128]	; (1b084 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   1b004:	4798      	blx	r3
   1b006:	0003      	movs	r3, r0
   1b008:	001a      	movs	r2, r3
   1b00a:	231f      	movs	r3, #31
   1b00c:	18fb      	adds	r3, r7, r3
   1b00e:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   1b010:	683b      	ldr	r3, [r7, #0]
   1b012:	4a1d      	ldr	r2, [pc, #116]	; (1b088 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   1b014:	0019      	movs	r1, r3
   1b016:	0010      	movs	r0, r2
   1b018:	4b1c      	ldr	r3, [pc, #112]	; (1b08c <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   1b01a:	4798      	blx	r3
   1b01c:	0002      	movs	r2, r0
   1b01e:	2326      	movs	r3, #38	; 0x26
   1b020:	18fb      	adds	r3, r7, r3
   1b022:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   1b024:	4b1a      	ldr	r3, [pc, #104]	; (1b090 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   1b026:	4798      	blx	r3
   1b028:	0003      	movs	r3, r0
   1b02a:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   1b02c:	69bb      	ldr	r3, [r7, #24]
   1b02e:	2b00      	cmp	r3, #0
   1b030:	d00f      	beq.n	1b052 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   1b032:	69bb      	ldr	r3, [r7, #24]
   1b034:	221f      	movs	r2, #31
   1b036:	18ba      	adds	r2, r7, r2
   1b038:	7812      	ldrb	r2, [r2, #0]
   1b03a:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   1b03c:	687b      	ldr	r3, [r7, #4]
   1b03e:	b2da      	uxtb	r2, r3
   1b040:	69bb      	ldr	r3, [r7, #24]
   1b042:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   1b044:	69bb      	ldr	r3, [r7, #24]
   1b046:	2226      	movs	r2, #38	; 0x26
   1b048:	18ba      	adds	r2, r7, r2
   1b04a:	8812      	ldrh	r2, [r2, #0]
   1b04c:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1b04e:	4b11      	ldr	r3, [pc, #68]	; (1b094 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   1b050:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1b052:	4b08      	ldr	r3, [pc, #32]	; (1b074 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1b054:	681b      	ldr	r3, [r3, #0]
   1b056:	1e5a      	subs	r2, r3, #1
   1b058:	4b06      	ldr	r3, [pc, #24]	; (1b074 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1b05a:	601a      	str	r2, [r3, #0]
   1b05c:	6a3b      	ldr	r3, [r7, #32]
   1b05e:	60fb      	str	r3, [r7, #12]
   1b060:	68fb      	ldr	r3, [r7, #12]
   1b062:	f383 8810 	msr	PRIMASK, r3
}
   1b066:	46bd      	mov	sp, r7
   1b068:	b00a      	add	sp, #40	; 0x28
   1b06a:	bd80      	pop	{r7, pc}
   1b06c:	00039e00 	.word	0x00039e00
   1b070:	0001bb39 	.word	0x0001bb39
   1b074:	2000099c 	.word	0x2000099c
   1b078:	00039e58 	.word	0x00039e58
   1b07c:	20000a44 	.word	0x20000a44
   1b080:	200009a8 	.word	0x200009a8
   1b084:	0001bd4d 	.word	0x0001bd4d
   1b088:	0000ffff 	.word	0x0000ffff
   1b08c:	0001af11 	.word	0x0001af11
   1b090:	0001b6f1 	.word	0x0001b6f1
   1b094:	0001bcf5 	.word	0x0001bcf5

0001b098 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   1b098:	b590      	push	{r4, r7, lr}
   1b09a:	b089      	sub	sp, #36	; 0x24
   1b09c:	af00      	add	r7, sp, #0
   1b09e:	0002      	movs	r2, r0
   1b0a0:	1dfb      	adds	r3, r7, #7
   1b0a2:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   1b0a4:	1dfb      	adds	r3, r7, #7
   1b0a6:	781b      	ldrb	r3, [r3, #0]
   1b0a8:	2b0f      	cmp	r3, #15
   1b0aa:	d904      	bls.n	1b0b6 <prvTraceStoreTaskswitch+0x1e>
   1b0ac:	4b34      	ldr	r3, [pc, #208]	; (1b180 <prvTraceStoreTaskswitch+0xe8>)
   1b0ae:	0018      	movs	r0, r3
   1b0b0:	4b34      	ldr	r3, [pc, #208]	; (1b184 <prvTraceStoreTaskswitch+0xec>)
   1b0b2:	4798      	blx	r3
   1b0b4:	e061      	b.n	1b17a <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b0b6:	f3ef 8310 	mrs	r3, PRIMASK
   1b0ba:	60fb      	str	r3, [r7, #12]
  return(result);
   1b0bc:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   1b0be:	61fb      	str	r3, [r7, #28]
   1b0c0:	2301      	movs	r3, #1
   1b0c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b0c4:	693b      	ldr	r3, [r7, #16]
   1b0c6:	f383 8810 	msr	PRIMASK, r3
   1b0ca:	4b2f      	ldr	r3, [pc, #188]	; (1b188 <prvTraceStoreTaskswitch+0xf0>)
   1b0cc:	681b      	ldr	r3, [r3, #0]
   1b0ce:	1c5a      	adds	r2, r3, #1
   1b0d0:	4b2d      	ldr	r3, [pc, #180]	; (1b188 <prvTraceStoreTaskswitch+0xf0>)
   1b0d2:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   1b0d4:	4b2d      	ldr	r3, [pc, #180]	; (1b18c <prvTraceStoreTaskswitch+0xf4>)
   1b0d6:	781b      	ldrb	r3, [r3, #0]
   1b0d8:	1dfa      	adds	r2, r7, #7
   1b0da:	7812      	ldrb	r2, [r2, #0]
   1b0dc:	429a      	cmp	r2, r3
   1b0de:	d042      	beq.n	1b166 <prvTraceStoreTaskswitch+0xce>
   1b0e0:	4b2b      	ldr	r3, [pc, #172]	; (1b190 <prvTraceStoreTaskswitch+0xf8>)
   1b0e2:	681b      	ldr	r3, [r3, #0]
   1b0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b0e6:	2b00      	cmp	r3, #0
   1b0e8:	d03d      	beq.n	1b166 <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   1b0ea:	4b2a      	ldr	r3, [pc, #168]	; (1b194 <prvTraceStoreTaskswitch+0xfc>)
   1b0ec:	2200      	movs	r2, #0
   1b0ee:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1b0f0:	231a      	movs	r3, #26
   1b0f2:	18fc      	adds	r4, r7, r3
   1b0f4:	4b28      	ldr	r3, [pc, #160]	; (1b198 <prvTraceStoreTaskswitch+0x100>)
   1b0f6:	0018      	movs	r0, r3
   1b0f8:	4b28      	ldr	r3, [pc, #160]	; (1b19c <prvTraceStoreTaskswitch+0x104>)
   1b0fa:	4798      	blx	r3
   1b0fc:	0003      	movs	r3, r0
   1b0fe:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   1b100:	4b22      	ldr	r3, [pc, #136]	; (1b18c <prvTraceStoreTaskswitch+0xf4>)
   1b102:	1dfa      	adds	r2, r7, #7
   1b104:	7812      	ldrb	r2, [r2, #0]
   1b106:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   1b108:	2319      	movs	r3, #25
   1b10a:	18fb      	adds	r3, r7, r3
   1b10c:	4a1f      	ldr	r2, [pc, #124]	; (1b18c <prvTraceStoreTaskswitch+0xf4>)
   1b10e:	7812      	ldrb	r2, [r2, #0]
   1b110:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   1b112:	4b23      	ldr	r3, [pc, #140]	; (1b1a0 <prvTraceStoreTaskswitch+0x108>)
   1b114:	4798      	blx	r3
   1b116:	0003      	movs	r3, r0
   1b118:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   1b11a:	697b      	ldr	r3, [r7, #20]
   1b11c:	2b00      	cmp	r3, #0
   1b11e:	d022      	beq.n	1b166 <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   1b120:	4b1a      	ldr	r3, [pc, #104]	; (1b18c <prvTraceStoreTaskswitch+0xf4>)
   1b122:	781b      	ldrb	r3, [r3, #0]
   1b124:	0019      	movs	r1, r3
   1b126:	2003      	movs	r0, #3
   1b128:	4b1e      	ldr	r3, [pc, #120]	; (1b1a4 <prvTraceStoreTaskswitch+0x10c>)
   1b12a:	4798      	blx	r3
   1b12c:	0003      	movs	r3, r0
   1b12e:	2b01      	cmp	r3, #1
   1b130:	d103      	bne.n	1b13a <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   1b132:	697b      	ldr	r3, [r7, #20]
   1b134:	2207      	movs	r2, #7
   1b136:	701a      	strb	r2, [r3, #0]
   1b138:	e002      	b.n	1b140 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   1b13a:	697b      	ldr	r3, [r7, #20]
   1b13c:	2206      	movs	r2, #6
   1b13e:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   1b140:	697b      	ldr	r3, [r7, #20]
   1b142:	221a      	movs	r2, #26
   1b144:	18ba      	adds	r2, r7, r2
   1b146:	8812      	ldrh	r2, [r2, #0]
   1b148:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   1b14a:	697b      	ldr	r3, [r7, #20]
   1b14c:	2219      	movs	r2, #25
   1b14e:	18ba      	adds	r2, r7, r2
   1b150:	7812      	ldrb	r2, [r2, #0]
   1b152:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   1b154:	4b0d      	ldr	r3, [pc, #52]	; (1b18c <prvTraceStoreTaskswitch+0xf4>)
   1b156:	781b      	ldrb	r3, [r3, #0]
   1b158:	2201      	movs	r2, #1
   1b15a:	0019      	movs	r1, r3
   1b15c:	2003      	movs	r0, #3
   1b15e:	4b12      	ldr	r3, [pc, #72]	; (1b1a8 <prvTraceStoreTaskswitch+0x110>)
   1b160:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   1b162:	4b12      	ldr	r3, [pc, #72]	; (1b1ac <prvTraceStoreTaskswitch+0x114>)
   1b164:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   1b166:	4b08      	ldr	r3, [pc, #32]	; (1b188 <prvTraceStoreTaskswitch+0xf0>)
   1b168:	681b      	ldr	r3, [r3, #0]
   1b16a:	1e5a      	subs	r2, r3, #1
   1b16c:	4b06      	ldr	r3, [pc, #24]	; (1b188 <prvTraceStoreTaskswitch+0xf0>)
   1b16e:	601a      	str	r2, [r3, #0]
   1b170:	69fb      	ldr	r3, [r7, #28]
   1b172:	60bb      	str	r3, [r7, #8]
   1b174:	68bb      	ldr	r3, [r7, #8]
   1b176:	f383 8810 	msr	PRIMASK, r3
}
   1b17a:	46bd      	mov	sp, r7
   1b17c:	b009      	add	sp, #36	; 0x24
   1b17e:	bd90      	pop	{r4, r7, pc}
   1b180:	00039e90 	.word	0x00039e90
   1b184:	0001bb39 	.word	0x0001bb39
   1b188:	2000099c 	.word	0x2000099c
   1b18c:	200009a8 	.word	0x200009a8
   1b190:	20000a44 	.word	0x20000a44
   1b194:	20000988 	.word	0x20000988
   1b198:	0000ffff 	.word	0x0000ffff
   1b19c:	0001bd4d 	.word	0x0001bd4d
   1b1a0:	0001b6f1 	.word	0x0001b6f1
   1b1a4:	0001b395 	.word	0x0001b395
   1b1a8:	0001b2f1 	.word	0x0001b2f1
   1b1ac:	0001bcf5 	.word	0x0001bcf5

0001b1b0 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   1b1b0:	b590      	push	{r4, r7, lr}
   1b1b2:	b083      	sub	sp, #12
   1b1b4:	af00      	add	r7, sp, #0
   1b1b6:	0004      	movs	r4, r0
   1b1b8:	0008      	movs	r0, r1
   1b1ba:	0011      	movs	r1, r2
   1b1bc:	1dfb      	adds	r3, r7, #7
   1b1be:	1c22      	adds	r2, r4, #0
   1b1c0:	701a      	strb	r2, [r3, #0]
   1b1c2:	1dbb      	adds	r3, r7, #6
   1b1c4:	1c02      	adds	r2, r0, #0
   1b1c6:	701a      	strb	r2, [r3, #0]
   1b1c8:	1d7b      	adds	r3, r7, #5
   1b1ca:	1c0a      	adds	r2, r1, #0
   1b1cc:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1b1ce:	1dfb      	adds	r3, r7, #7
   1b1d0:	781b      	ldrb	r3, [r3, #0]
   1b1d2:	2b08      	cmp	r3, #8
   1b1d4:	d904      	bls.n	1b1e0 <prvTraceSetPriorityProperty+0x30>
   1b1d6:	4b1a      	ldr	r3, [pc, #104]	; (1b240 <prvTraceSetPriorityProperty+0x90>)
   1b1d8:	0018      	movs	r0, r3
   1b1da:	4b1a      	ldr	r3, [pc, #104]	; (1b244 <prvTraceSetPriorityProperty+0x94>)
   1b1dc:	4798      	blx	r3
   1b1de:	e02c      	b.n	1b23a <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1b1e0:	4b19      	ldr	r3, [pc, #100]	; (1b248 <prvTraceSetPriorityProperty+0x98>)
   1b1e2:	681a      	ldr	r2, [r3, #0]
   1b1e4:	1dfb      	adds	r3, r7, #7
   1b1e6:	781b      	ldrb	r3, [r3, #0]
   1b1e8:	2164      	movs	r1, #100	; 0x64
   1b1ea:	18d3      	adds	r3, r2, r3
   1b1ec:	185b      	adds	r3, r3, r1
   1b1ee:	781b      	ldrb	r3, [r3, #0]
   1b1f0:	1dba      	adds	r2, r7, #6
   1b1f2:	7812      	ldrb	r2, [r2, #0]
   1b1f4:	429a      	cmp	r2, r3
   1b1f6:	d904      	bls.n	1b202 <prvTraceSetPriorityProperty+0x52>
   1b1f8:	4b14      	ldr	r3, [pc, #80]	; (1b24c <prvTraceSetPriorityProperty+0x9c>)
   1b1fa:	0018      	movs	r0, r3
   1b1fc:	4b11      	ldr	r3, [pc, #68]	; (1b244 <prvTraceSetPriorityProperty+0x94>)
   1b1fe:	4798      	blx	r3
   1b200:	e01b      	b.n	1b23a <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   1b202:	4b11      	ldr	r3, [pc, #68]	; (1b248 <prvTraceSetPriorityProperty+0x98>)
   1b204:	681c      	ldr	r4, [r3, #0]
   1b206:	1dfb      	adds	r3, r7, #7
   1b208:	781a      	ldrb	r2, [r3, #0]
   1b20a:	1dbb      	adds	r3, r7, #6
   1b20c:	781b      	ldrb	r3, [r3, #0]
   1b20e:	0011      	movs	r1, r2
   1b210:	0018      	movs	r0, r3
   1b212:	4b0f      	ldr	r3, [pc, #60]	; (1b250 <prvTraceSetPriorityProperty+0xa0>)
   1b214:	4798      	blx	r3
   1b216:	0003      	movs	r3, r0
   1b218:	0018      	movs	r0, r3
   1b21a:	4b0b      	ldr	r3, [pc, #44]	; (1b248 <prvTraceSetPriorityProperty+0x98>)
   1b21c:	681a      	ldr	r2, [r3, #0]
   1b21e:	1dfb      	adds	r3, r7, #7
   1b220:	781b      	ldrb	r3, [r3, #0]
   1b222:	2170      	movs	r1, #112	; 0x70
   1b224:	18d3      	adds	r3, r2, r3
   1b226:	185b      	adds	r3, r3, r1
   1b228:	781b      	ldrb	r3, [r3, #0]
   1b22a:	18c3      	adds	r3, r0, r3
   1b22c:	3301      	adds	r3, #1
   1b22e:	229c      	movs	r2, #156	; 0x9c
   1b230:	18e3      	adds	r3, r4, r3
   1b232:	189b      	adds	r3, r3, r2
   1b234:	1d7a      	adds	r2, r7, #5
   1b236:	7812      	ldrb	r2, [r2, #0]
   1b238:	701a      	strb	r2, [r3, #0]
}
   1b23a:	46bd      	mov	sp, r7
   1b23c:	b003      	add	sp, #12
   1b23e:	bd90      	pop	{r4, r7, pc}
   1b240:	0003a024 	.word	0x0003a024
   1b244:	0001bb39 	.word	0x0001bb39
   1b248:	20000a44 	.word	0x20000a44
   1b24c:	0003a070 	.word	0x0003a070
   1b250:	0001b745 	.word	0x0001b745

0001b254 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   1b254:	b590      	push	{r4, r7, lr}
   1b256:	b083      	sub	sp, #12
   1b258:	af00      	add	r7, sp, #0
   1b25a:	0002      	movs	r2, r0
   1b25c:	1dfb      	adds	r3, r7, #7
   1b25e:	701a      	strb	r2, [r3, #0]
   1b260:	1dbb      	adds	r3, r7, #6
   1b262:	1c0a      	adds	r2, r1, #0
   1b264:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1b266:	1dfb      	adds	r3, r7, #7
   1b268:	781b      	ldrb	r3, [r3, #0]
   1b26a:	2b08      	cmp	r3, #8
   1b26c:	d905      	bls.n	1b27a <prvTraceGetPriorityProperty+0x26>
   1b26e:	4b1b      	ldr	r3, [pc, #108]	; (1b2dc <prvTraceGetPriorityProperty+0x88>)
   1b270:	0018      	movs	r0, r3
   1b272:	4b1b      	ldr	r3, [pc, #108]	; (1b2e0 <prvTraceGetPriorityProperty+0x8c>)
   1b274:	4798      	blx	r3
   1b276:	2300      	movs	r3, #0
   1b278:	e02b      	b.n	1b2d2 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1b27a:	4b1a      	ldr	r3, [pc, #104]	; (1b2e4 <prvTraceGetPriorityProperty+0x90>)
   1b27c:	681a      	ldr	r2, [r3, #0]
   1b27e:	1dfb      	adds	r3, r7, #7
   1b280:	781b      	ldrb	r3, [r3, #0]
   1b282:	2164      	movs	r1, #100	; 0x64
   1b284:	18d3      	adds	r3, r2, r3
   1b286:	185b      	adds	r3, r3, r1
   1b288:	781b      	ldrb	r3, [r3, #0]
   1b28a:	1dba      	adds	r2, r7, #6
   1b28c:	7812      	ldrb	r2, [r2, #0]
   1b28e:	429a      	cmp	r2, r3
   1b290:	d905      	bls.n	1b29e <prvTraceGetPriorityProperty+0x4a>
   1b292:	4b15      	ldr	r3, [pc, #84]	; (1b2e8 <prvTraceGetPriorityProperty+0x94>)
   1b294:	0018      	movs	r0, r3
   1b296:	4b12      	ldr	r3, [pc, #72]	; (1b2e0 <prvTraceGetPriorityProperty+0x8c>)
   1b298:	4798      	blx	r3
   1b29a:	2300      	movs	r3, #0
   1b29c:	e019      	b.n	1b2d2 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   1b29e:	4b11      	ldr	r3, [pc, #68]	; (1b2e4 <prvTraceGetPriorityProperty+0x90>)
   1b2a0:	681c      	ldr	r4, [r3, #0]
   1b2a2:	1dfb      	adds	r3, r7, #7
   1b2a4:	781a      	ldrb	r2, [r3, #0]
   1b2a6:	1dbb      	adds	r3, r7, #6
   1b2a8:	781b      	ldrb	r3, [r3, #0]
   1b2aa:	0011      	movs	r1, r2
   1b2ac:	0018      	movs	r0, r3
   1b2ae:	4b0f      	ldr	r3, [pc, #60]	; (1b2ec <prvTraceGetPriorityProperty+0x98>)
   1b2b0:	4798      	blx	r3
   1b2b2:	0003      	movs	r3, r0
   1b2b4:	0018      	movs	r0, r3
   1b2b6:	4b0b      	ldr	r3, [pc, #44]	; (1b2e4 <prvTraceGetPriorityProperty+0x90>)
   1b2b8:	681a      	ldr	r2, [r3, #0]
   1b2ba:	1dfb      	adds	r3, r7, #7
   1b2bc:	781b      	ldrb	r3, [r3, #0]
   1b2be:	2170      	movs	r1, #112	; 0x70
   1b2c0:	18d3      	adds	r3, r2, r3
   1b2c2:	185b      	adds	r3, r3, r1
   1b2c4:	781b      	ldrb	r3, [r3, #0]
   1b2c6:	18c3      	adds	r3, r0, r3
   1b2c8:	3301      	adds	r3, #1
   1b2ca:	229c      	movs	r2, #156	; 0x9c
   1b2cc:	18e3      	adds	r3, r4, r3
   1b2ce:	189b      	adds	r3, r3, r2
   1b2d0:	781b      	ldrb	r3, [r3, #0]
}
   1b2d2:	0018      	movs	r0, r3
   1b2d4:	46bd      	mov	sp, r7
   1b2d6:	b003      	add	sp, #12
   1b2d8:	bd90      	pop	{r4, r7, pc}
   1b2da:	46c0      	nop			; (mov r8, r8)
   1b2dc:	0003a0b0 	.word	0x0003a0b0
   1b2e0:	0001bb39 	.word	0x0001bb39
   1b2e4:	20000a44 	.word	0x20000a44
   1b2e8:	0003a0fc 	.word	0x0003a0fc
   1b2ec:	0001b745 	.word	0x0001b745

0001b2f0 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   1b2f0:	b590      	push	{r4, r7, lr}
   1b2f2:	b083      	sub	sp, #12
   1b2f4:	af00      	add	r7, sp, #0
   1b2f6:	0004      	movs	r4, r0
   1b2f8:	0008      	movs	r0, r1
   1b2fa:	0011      	movs	r1, r2
   1b2fc:	1dfb      	adds	r3, r7, #7
   1b2fe:	1c22      	adds	r2, r4, #0
   1b300:	701a      	strb	r2, [r3, #0]
   1b302:	1dbb      	adds	r3, r7, #6
   1b304:	1c02      	adds	r2, r0, #0
   1b306:	701a      	strb	r2, [r3, #0]
   1b308:	1d7b      	adds	r3, r7, #5
   1b30a:	1c0a      	adds	r2, r1, #0
   1b30c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1b30e:	1dfb      	adds	r3, r7, #7
   1b310:	781b      	ldrb	r3, [r3, #0]
   1b312:	2b08      	cmp	r3, #8
   1b314:	d904      	bls.n	1b320 <prvTraceSetObjectState+0x30>
   1b316:	4b1a      	ldr	r3, [pc, #104]	; (1b380 <prvTraceSetObjectState+0x90>)
   1b318:	0018      	movs	r0, r3
   1b31a:	4b1a      	ldr	r3, [pc, #104]	; (1b384 <prvTraceSetObjectState+0x94>)
   1b31c:	4798      	blx	r3
   1b31e:	e02b      	b.n	1b378 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1b320:	4b19      	ldr	r3, [pc, #100]	; (1b388 <prvTraceSetObjectState+0x98>)
   1b322:	681a      	ldr	r2, [r3, #0]
   1b324:	1dfb      	adds	r3, r7, #7
   1b326:	781b      	ldrb	r3, [r3, #0]
   1b328:	2164      	movs	r1, #100	; 0x64
   1b32a:	18d3      	adds	r3, r2, r3
   1b32c:	185b      	adds	r3, r3, r1
   1b32e:	781b      	ldrb	r3, [r3, #0]
   1b330:	1dba      	adds	r2, r7, #6
   1b332:	7812      	ldrb	r2, [r2, #0]
   1b334:	429a      	cmp	r2, r3
   1b336:	d904      	bls.n	1b342 <prvTraceSetObjectState+0x52>
   1b338:	4b14      	ldr	r3, [pc, #80]	; (1b38c <prvTraceSetObjectState+0x9c>)
   1b33a:	0018      	movs	r0, r3
   1b33c:	4b11      	ldr	r3, [pc, #68]	; (1b384 <prvTraceSetObjectState+0x94>)
   1b33e:	4798      	blx	r3
   1b340:	e01a      	b.n	1b378 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   1b342:	4b11      	ldr	r3, [pc, #68]	; (1b388 <prvTraceSetObjectState+0x98>)
   1b344:	681c      	ldr	r4, [r3, #0]
   1b346:	1dfb      	adds	r3, r7, #7
   1b348:	781a      	ldrb	r2, [r3, #0]
   1b34a:	1dbb      	adds	r3, r7, #6
   1b34c:	781b      	ldrb	r3, [r3, #0]
   1b34e:	0011      	movs	r1, r2
   1b350:	0018      	movs	r0, r3
   1b352:	4b0f      	ldr	r3, [pc, #60]	; (1b390 <prvTraceSetObjectState+0xa0>)
   1b354:	4798      	blx	r3
   1b356:	0003      	movs	r3, r0
   1b358:	0018      	movs	r0, r3
   1b35a:	4b0b      	ldr	r3, [pc, #44]	; (1b388 <prvTraceSetObjectState+0x98>)
   1b35c:	681a      	ldr	r2, [r3, #0]
   1b35e:	1dfb      	adds	r3, r7, #7
   1b360:	781b      	ldrb	r3, [r3, #0]
   1b362:	2170      	movs	r1, #112	; 0x70
   1b364:	18d3      	adds	r3, r2, r3
   1b366:	185b      	adds	r3, r3, r1
   1b368:	781b      	ldrb	r3, [r3, #0]
   1b36a:	18c3      	adds	r3, r0, r3
   1b36c:	229c      	movs	r2, #156	; 0x9c
   1b36e:	18e3      	adds	r3, r4, r3
   1b370:	189b      	adds	r3, r3, r2
   1b372:	1d7a      	adds	r2, r7, #5
   1b374:	7812      	ldrb	r2, [r2, #0]
   1b376:	701a      	strb	r2, [r3, #0]
}
   1b378:	46bd      	mov	sp, r7
   1b37a:	b003      	add	sp, #12
   1b37c:	bd90      	pop	{r4, r7, pc}
   1b37e:	46c0      	nop			; (mov r8, r8)
   1b380:	0003a13c 	.word	0x0003a13c
   1b384:	0001bb39 	.word	0x0001bb39
   1b388:	20000a44 	.word	0x20000a44
   1b38c:	0003a180 	.word	0x0003a180
   1b390:	0001b745 	.word	0x0001b745

0001b394 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   1b394:	b590      	push	{r4, r7, lr}
   1b396:	b083      	sub	sp, #12
   1b398:	af00      	add	r7, sp, #0
   1b39a:	0002      	movs	r2, r0
   1b39c:	1dfb      	adds	r3, r7, #7
   1b39e:	701a      	strb	r2, [r3, #0]
   1b3a0:	1dbb      	adds	r3, r7, #6
   1b3a2:	1c0a      	adds	r2, r1, #0
   1b3a4:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1b3a6:	1dfb      	adds	r3, r7, #7
   1b3a8:	781b      	ldrb	r3, [r3, #0]
   1b3aa:	2b08      	cmp	r3, #8
   1b3ac:	d905      	bls.n	1b3ba <prvTraceGetObjectState+0x26>
   1b3ae:	4b1a      	ldr	r3, [pc, #104]	; (1b418 <prvTraceGetObjectState+0x84>)
   1b3b0:	0018      	movs	r0, r3
   1b3b2:	4b1a      	ldr	r3, [pc, #104]	; (1b41c <prvTraceGetObjectState+0x88>)
   1b3b4:	4798      	blx	r3
   1b3b6:	2300      	movs	r3, #0
   1b3b8:	e02a      	b.n	1b410 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1b3ba:	4b19      	ldr	r3, [pc, #100]	; (1b420 <prvTraceGetObjectState+0x8c>)
   1b3bc:	681a      	ldr	r2, [r3, #0]
   1b3be:	1dfb      	adds	r3, r7, #7
   1b3c0:	781b      	ldrb	r3, [r3, #0]
   1b3c2:	2164      	movs	r1, #100	; 0x64
   1b3c4:	18d3      	adds	r3, r2, r3
   1b3c6:	185b      	adds	r3, r3, r1
   1b3c8:	781b      	ldrb	r3, [r3, #0]
   1b3ca:	1dba      	adds	r2, r7, #6
   1b3cc:	7812      	ldrb	r2, [r2, #0]
   1b3ce:	429a      	cmp	r2, r3
   1b3d0:	d905      	bls.n	1b3de <prvTraceGetObjectState+0x4a>
   1b3d2:	4b14      	ldr	r3, [pc, #80]	; (1b424 <prvTraceGetObjectState+0x90>)
   1b3d4:	0018      	movs	r0, r3
   1b3d6:	4b11      	ldr	r3, [pc, #68]	; (1b41c <prvTraceGetObjectState+0x88>)
   1b3d8:	4798      	blx	r3
   1b3da:	2300      	movs	r3, #0
   1b3dc:	e018      	b.n	1b410 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   1b3de:	4b10      	ldr	r3, [pc, #64]	; (1b420 <prvTraceGetObjectState+0x8c>)
   1b3e0:	681c      	ldr	r4, [r3, #0]
   1b3e2:	1dfb      	adds	r3, r7, #7
   1b3e4:	781a      	ldrb	r2, [r3, #0]
   1b3e6:	1dbb      	adds	r3, r7, #6
   1b3e8:	781b      	ldrb	r3, [r3, #0]
   1b3ea:	0011      	movs	r1, r2
   1b3ec:	0018      	movs	r0, r3
   1b3ee:	4b0e      	ldr	r3, [pc, #56]	; (1b428 <prvTraceGetObjectState+0x94>)
   1b3f0:	4798      	blx	r3
   1b3f2:	0003      	movs	r3, r0
   1b3f4:	0018      	movs	r0, r3
   1b3f6:	4b0a      	ldr	r3, [pc, #40]	; (1b420 <prvTraceGetObjectState+0x8c>)
   1b3f8:	681a      	ldr	r2, [r3, #0]
   1b3fa:	1dfb      	adds	r3, r7, #7
   1b3fc:	781b      	ldrb	r3, [r3, #0]
   1b3fe:	2170      	movs	r1, #112	; 0x70
   1b400:	18d3      	adds	r3, r2, r3
   1b402:	185b      	adds	r3, r3, r1
   1b404:	781b      	ldrb	r3, [r3, #0]
   1b406:	18c3      	adds	r3, r0, r3
   1b408:	229c      	movs	r2, #156	; 0x9c
   1b40a:	18e3      	adds	r3, r4, r3
   1b40c:	189b      	adds	r3, r3, r2
   1b40e:	781b      	ldrb	r3, [r3, #0]
}
   1b410:	0018      	movs	r0, r3
   1b412:	46bd      	mov	sp, r7
   1b414:	b003      	add	sp, #12
   1b416:	bd90      	pop	{r4, r7, pc}
   1b418:	0003a1bc 	.word	0x0003a1bc
   1b41c:	0001bb39 	.word	0x0001bb39
   1b420:	20000a44 	.word	0x20000a44
   1b424:	0003a200 	.word	0x0003a200
   1b428:	0001b745 	.word	0x0001b745

0001b42c <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   1b42c:	b590      	push	{r4, r7, lr}
   1b42e:	b083      	sub	sp, #12
   1b430:	af00      	add	r7, sp, #0
   1b432:	0002      	movs	r2, r0
   1b434:	1dfb      	adds	r3, r7, #7
   1b436:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   1b438:	4b11      	ldr	r3, [pc, #68]	; (1b480 <prvTraceSetTaskInstanceFinished+0x54>)
   1b43a:	681b      	ldr	r3, [r3, #0]
   1b43c:	2267      	movs	r2, #103	; 0x67
   1b43e:	5c9b      	ldrb	r3, [r3, r2]
   1b440:	1dfa      	adds	r2, r7, #7
   1b442:	7812      	ldrb	r2, [r2, #0]
   1b444:	429a      	cmp	r2, r3
   1b446:	d904      	bls.n	1b452 <prvTraceSetTaskInstanceFinished+0x26>
   1b448:	4b0e      	ldr	r3, [pc, #56]	; (1b484 <prvTraceSetTaskInstanceFinished+0x58>)
   1b44a:	0018      	movs	r0, r3
   1b44c:	4b0e      	ldr	r3, [pc, #56]	; (1b488 <prvTraceSetTaskInstanceFinished+0x5c>)
   1b44e:	4798      	blx	r3
   1b450:	e013      	b.n	1b47a <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   1b452:	4b0b      	ldr	r3, [pc, #44]	; (1b480 <prvTraceSetTaskInstanceFinished+0x54>)
   1b454:	681c      	ldr	r4, [r3, #0]
   1b456:	1dfb      	adds	r3, r7, #7
   1b458:	781b      	ldrb	r3, [r3, #0]
   1b45a:	2103      	movs	r1, #3
   1b45c:	0018      	movs	r0, r3
   1b45e:	4b0b      	ldr	r3, [pc, #44]	; (1b48c <prvTraceSetTaskInstanceFinished+0x60>)
   1b460:	4798      	blx	r3
   1b462:	0003      	movs	r3, r0
   1b464:	0019      	movs	r1, r3
   1b466:	4b06      	ldr	r3, [pc, #24]	; (1b480 <prvTraceSetTaskInstanceFinished+0x54>)
   1b468:	681b      	ldr	r3, [r3, #0]
   1b46a:	2273      	movs	r2, #115	; 0x73
   1b46c:	5c9b      	ldrb	r3, [r3, r2]
   1b46e:	18cb      	adds	r3, r1, r3
   1b470:	229c      	movs	r2, #156	; 0x9c
   1b472:	18e3      	adds	r3, r4, r3
   1b474:	189b      	adds	r3, r3, r2
   1b476:	2200      	movs	r2, #0
   1b478:	701a      	strb	r2, [r3, #0]
#endif
}
   1b47a:	46bd      	mov	sp, r7
   1b47c:	b003      	add	sp, #12
   1b47e:	bd90      	pop	{r4, r7, pc}
   1b480:	20000a44 	.word	0x20000a44
   1b484:	0003a23c 	.word	0x0003a23c
   1b488:	0001bb39 	.word	0x0001bb39
   1b48c:	0001b745 	.word	0x0001b745

0001b490 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   1b490:	b580      	push	{r7, lr}
   1b492:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   1b494:	4b75      	ldr	r3, [pc, #468]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b496:	681b      	ldr	r3, [r3, #0]
   1b498:	2b00      	cmp	r3, #0
   1b49a:	d103      	bne.n	1b4a4 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   1b49c:	4b73      	ldr	r3, [pc, #460]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b49e:	4a74      	ldr	r2, [pc, #464]	; (1b670 <prvTraceInitTraceData+0x1e0>)
   1b4a0:	601a      	str	r2, [r3, #0]
   1b4a2:	e006      	b.n	1b4b2 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   1b4a4:	4b71      	ldr	r3, [pc, #452]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b4a6:	681b      	ldr	r3, [r3, #0]
   1b4a8:	781b      	ldrb	r3, [r3, #0]
   1b4aa:	b2db      	uxtb	r3, r3
   1b4ac:	2b01      	cmp	r3, #1
   1b4ae:	d100      	bne.n	1b4b2 <prvTraceInitTraceData+0x22>
   1b4b0:	e0d8      	b.n	1b664 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   1b4b2:	4b70      	ldr	r3, [pc, #448]	; (1b674 <prvTraceInitTraceData+0x1e4>)
   1b4b4:	681a      	ldr	r2, [r3, #0]
   1b4b6:	4b70      	ldr	r3, [pc, #448]	; (1b678 <prvTraceInitTraceData+0x1e8>)
   1b4b8:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   1b4ba:	4b6c      	ldr	r3, [pc, #432]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b4bc:	6818      	ldr	r0, [r3, #0]
   1b4be:	23bd      	movs	r3, #189	; 0xbd
   1b4c0:	011b      	lsls	r3, r3, #4
   1b4c2:	001a      	movs	r2, r3
   1b4c4:	2100      	movs	r1, #0
   1b4c6:	4b6d      	ldr	r3, [pc, #436]	; (1b67c <prvTraceInitTraceData+0x1ec>)
   1b4c8:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   1b4ca:	4b68      	ldr	r3, [pc, #416]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b4cc:	681b      	ldr	r3, [r3, #0]
   1b4ce:	4a6c      	ldr	r2, [pc, #432]	; (1b680 <prvTraceInitTraceData+0x1f0>)
   1b4d0:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   1b4d2:	4b66      	ldr	r3, [pc, #408]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b4d4:	681b      	ldr	r3, [r3, #0]
   1b4d6:	2205      	movs	r2, #5
   1b4d8:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   1b4da:	4b64      	ldr	r3, [pc, #400]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b4dc:	681b      	ldr	r3, [r3, #0]
   1b4de:	2200      	movs	r2, #0
   1b4e0:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   1b4e2:	4b62      	ldr	r3, [pc, #392]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b4e4:	681b      	ldr	r3, [r3, #0]
   1b4e6:	22bd      	movs	r2, #189	; 0xbd
   1b4e8:	0112      	lsls	r2, r2, #4
   1b4ea:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   1b4ec:	4b5f      	ldr	r3, [pc, #380]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b4ee:	681b      	ldr	r3, [r3, #0]
   1b4f0:	2296      	movs	r2, #150	; 0x96
   1b4f2:	0052      	lsls	r2, r2, #1
   1b4f4:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   1b4f6:	4b5d      	ldr	r3, [pc, #372]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b4f8:	681b      	ldr	r3, [r3, #0]
   1b4fa:	4a62      	ldr	r2, [pc, #392]	; (1b684 <prvTraceInitTraceData+0x1f4>)
   1b4fc:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   1b4fe:	4b5b      	ldr	r3, [pc, #364]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b500:	681b      	ldr	r3, [r3, #0]
   1b502:	2200      	movs	r2, #0
   1b504:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   1b506:	4b59      	ldr	r3, [pc, #356]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b508:	681b      	ldr	r3, [r3, #0]
   1b50a:	2200      	movs	r2, #0
   1b50c:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   1b50e:	4b5e      	ldr	r3, [pc, #376]	; (1b688 <prvTraceInitTraceData+0x1f8>)
   1b510:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   1b512:	4b56      	ldr	r3, [pc, #344]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b514:	681b      	ldr	r3, [r3, #0]
   1b516:	4a5d      	ldr	r2, [pc, #372]	; (1b68c <prvTraceInitTraceData+0x1fc>)
   1b518:	495d      	ldr	r1, [pc, #372]	; (1b690 <prvTraceInitTraceData+0x200>)
   1b51a:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   1b51c:	4b53      	ldr	r3, [pc, #332]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b51e:	681a      	ldr	r2, [r3, #0]
   1b520:	23ac      	movs	r3, #172	; 0xac
   1b522:	00db      	lsls	r3, r3, #3
   1b524:	21c8      	movs	r1, #200	; 0xc8
   1b526:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   1b528:	4b50      	ldr	r3, [pc, #320]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b52a:	681b      	ldr	r3, [r3, #0]
   1b52c:	4a59      	ldr	r2, [pc, #356]	; (1b694 <prvTraceInitTraceData+0x204>)
   1b52e:	2101      	movs	r1, #1
   1b530:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   1b532:	4b4e      	ldr	r3, [pc, #312]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b534:	681a      	ldr	r2, [r3, #0]
   1b536:	23d7      	movs	r3, #215	; 0xd7
   1b538:	00db      	lsls	r3, r3, #3
   1b53a:	4957      	ldr	r1, [pc, #348]	; (1b698 <prvTraceInitTraceData+0x208>)
   1b53c:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   1b53e:	4b4b      	ldr	r3, [pc, #300]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b540:	681b      	ldr	r3, [r3, #0]
   1b542:	4a56      	ldr	r2, [pc, #344]	; (1b69c <prvTraceInitTraceData+0x20c>)
   1b544:	4694      	mov	ip, r2
   1b546:	4463      	add	r3, ip
   1b548:	4955      	ldr	r1, [pc, #340]	; (1b6a0 <prvTraceInitTraceData+0x210>)
   1b54a:	2250      	movs	r2, #80	; 0x50
   1b54c:	0018      	movs	r0, r3
   1b54e:	4b55      	ldr	r3, [pc, #340]	; (1b6a4 <prvTraceInitTraceData+0x214>)
   1b550:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   1b552:	4b46      	ldr	r3, [pc, #280]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b554:	681b      	ldr	r3, [r3, #0]
   1b556:	4a54      	ldr	r2, [pc, #336]	; (1b6a8 <prvTraceInitTraceData+0x218>)
   1b558:	4954      	ldr	r1, [pc, #336]	; (1b6ac <prvTraceInitTraceData+0x21c>)
   1b55a:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   1b55c:	4b43      	ldr	r3, [pc, #268]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b55e:	681b      	ldr	r3, [r3, #0]
   1b560:	4a53      	ldr	r2, [pc, #332]	; (1b6b0 <prvTraceInitTraceData+0x220>)
   1b562:	210a      	movs	r1, #10
   1b564:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   1b566:	4b41      	ldr	r3, [pc, #260]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b568:	681b      	ldr	r3, [r3, #0]
   1b56a:	4a52      	ldr	r2, [pc, #328]	; (1b6b4 <prvTraceInitTraceData+0x224>)
   1b56c:	210b      	movs	r1, #11
   1b56e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   1b570:	4b3e      	ldr	r3, [pc, #248]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b572:	681b      	ldr	r3, [r3, #0]
   1b574:	4a50      	ldr	r2, [pc, #320]	; (1b6b8 <prvTraceInitTraceData+0x228>)
   1b576:	210c      	movs	r1, #12
   1b578:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   1b57a:	4b3c      	ldr	r3, [pc, #240]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b57c:	681b      	ldr	r3, [r3, #0]
   1b57e:	4a4f      	ldr	r2, [pc, #316]	; (1b6bc <prvTraceInitTraceData+0x22c>)
   1b580:	210d      	movs	r1, #13
   1b582:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   1b584:	4b39      	ldr	r3, [pc, #228]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b586:	681b      	ldr	r3, [r3, #0]
   1b588:	4a4d      	ldr	r2, [pc, #308]	; (1b6c0 <prvTraceInitTraceData+0x230>)
   1b58a:	2171      	movs	r1, #113	; 0x71
   1b58c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   1b58e:	4b37      	ldr	r3, [pc, #220]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b590:	681b      	ldr	r3, [r3, #0]
   1b592:	4a4c      	ldr	r2, [pc, #304]	; (1b6c4 <prvTraceInitTraceData+0x234>)
   1b594:	2172      	movs	r1, #114	; 0x72
   1b596:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   1b598:	4b34      	ldr	r3, [pc, #208]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b59a:	681b      	ldr	r3, [r3, #0]
   1b59c:	4a4a      	ldr	r2, [pc, #296]	; (1b6c8 <prvTraceInitTraceData+0x238>)
   1b59e:	2173      	movs	r1, #115	; 0x73
   1b5a0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   1b5a2:	4b32      	ldr	r3, [pc, #200]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b5a4:	681b      	ldr	r3, [r3, #0]
   1b5a6:	4a49      	ldr	r2, [pc, #292]	; (1b6cc <prvTraceInitTraceData+0x23c>)
   1b5a8:	2174      	movs	r1, #116	; 0x74
   1b5aa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   1b5ac:	4b2f      	ldr	r3, [pc, #188]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b5ae:	681b      	ldr	r3, [r3, #0]
   1b5b0:	4a47      	ldr	r2, [pc, #284]	; (1b6d0 <prvTraceInitTraceData+0x240>)
   1b5b2:	21f1      	movs	r1, #241	; 0xf1
   1b5b4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   1b5b6:	4b2d      	ldr	r3, [pc, #180]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b5b8:	681b      	ldr	r3, [r3, #0]
   1b5ba:	4a46      	ldr	r2, [pc, #280]	; (1b6d4 <prvTraceInitTraceData+0x244>)
   1b5bc:	21f2      	movs	r1, #242	; 0xf2
   1b5be:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   1b5c0:	4b2a      	ldr	r3, [pc, #168]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b5c2:	681b      	ldr	r3, [r3, #0]
   1b5c4:	4a44      	ldr	r2, [pc, #272]	; (1b6d8 <prvTraceInitTraceData+0x248>)
   1b5c6:	21f3      	movs	r1, #243	; 0xf3
   1b5c8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   1b5ca:	4b28      	ldr	r3, [pc, #160]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b5cc:	681b      	ldr	r3, [r3, #0]
   1b5ce:	4a43      	ldr	r2, [pc, #268]	; (1b6dc <prvTraceInitTraceData+0x24c>)
   1b5d0:	21f4      	movs	r1, #244	; 0xf4
   1b5d2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   1b5d4:	4b42      	ldr	r3, [pc, #264]	; (1b6e0 <prvTraceInitTraceData+0x250>)
   1b5d6:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   1b5d8:	4b24      	ldr	r3, [pc, #144]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b5da:	681b      	ldr	r3, [r3, #0]
   1b5dc:	22f4      	movs	r2, #244	; 0xf4
   1b5de:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   1b5e0:	4b22      	ldr	r3, [pc, #136]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b5e2:	681b      	ldr	r3, [r3, #0]
   1b5e4:	22f3      	movs	r2, #243	; 0xf3
   1b5e6:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   1b5e8:	4b20      	ldr	r3, [pc, #128]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b5ea:	681b      	ldr	r3, [r3, #0]
   1b5ec:	22f2      	movs	r2, #242	; 0xf2
   1b5ee:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   1b5f0:	4b1e      	ldr	r3, [pc, #120]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b5f2:	681b      	ldr	r3, [r3, #0]
   1b5f4:	22f1      	movs	r2, #241	; 0xf1
   1b5f6:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   1b5f8:	4b1c      	ldr	r3, [pc, #112]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b5fa:	681b      	ldr	r3, [r3, #0]
   1b5fc:	2274      	movs	r2, #116	; 0x74
   1b5fe:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   1b600:	4b1a      	ldr	r3, [pc, #104]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b602:	681b      	ldr	r3, [r3, #0]
   1b604:	2273      	movs	r2, #115	; 0x73
   1b606:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   1b608:	4b18      	ldr	r3, [pc, #96]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b60a:	681b      	ldr	r3, [r3, #0]
   1b60c:	2272      	movs	r2, #114	; 0x72
   1b60e:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   1b610:	4b16      	ldr	r3, [pc, #88]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b612:	681b      	ldr	r3, [r3, #0]
   1b614:	2271      	movs	r2, #113	; 0x71
   1b616:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   1b618:	4b14      	ldr	r3, [pc, #80]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b61a:	681b      	ldr	r3, [r3, #0]
   1b61c:	2204      	movs	r2, #4
   1b61e:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   1b620:	4b12      	ldr	r3, [pc, #72]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b622:	681b      	ldr	r3, [r3, #0]
   1b624:	2203      	movs	r2, #3
   1b626:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   1b628:	4b10      	ldr	r3, [pc, #64]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b62a:	681b      	ldr	r3, [r3, #0]
   1b62c:	2202      	movs	r2, #2
   1b62e:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   1b630:	4b0e      	ldr	r3, [pc, #56]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b632:	681b      	ldr	r3, [r3, #0]
   1b634:	2201      	movs	r2, #1
   1b636:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   1b638:	4b2a      	ldr	r3, [pc, #168]	; (1b6e4 <prvTraceInitTraceData+0x254>)
   1b63a:	681b      	ldr	r3, [r3, #0]
   1b63c:	2b00      	cmp	r3, #0
   1b63e:	d012      	beq.n	1b666 <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1b640:	4b0a      	ldr	r3, [pc, #40]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b642:	681b      	ldr	r3, [r3, #0]
   1b644:	4a15      	ldr	r2, [pc, #84]	; (1b69c <prvTraceInitTraceData+0x20c>)
   1b646:	1898      	adds	r0, r3, r2
   1b648:	4b26      	ldr	r3, [pc, #152]	; (1b6e4 <prvTraceInitTraceData+0x254>)
   1b64a:	681b      	ldr	r3, [r3, #0]
   1b64c:	2250      	movs	r2, #80	; 0x50
   1b64e:	0019      	movs	r1, r3
   1b650:	4b14      	ldr	r3, [pc, #80]	; (1b6a4 <prvTraceInitTraceData+0x214>)
   1b652:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   1b654:	4b05      	ldr	r3, [pc, #20]	; (1b66c <prvTraceInitTraceData+0x1dc>)
   1b656:	681b      	ldr	r3, [r3, #0]
   1b658:	4a23      	ldr	r2, [pc, #140]	; (1b6e8 <prvTraceInitTraceData+0x258>)
   1b65a:	2101      	movs	r1, #1
   1b65c:	5099      	str	r1, [r3, r2]
		vTraceStop();
   1b65e:	4b23      	ldr	r3, [pc, #140]	; (1b6ec <prvTraceInitTraceData+0x25c>)
   1b660:	4798      	blx	r3
   1b662:	e000      	b.n	1b666 <prvTraceInitTraceData+0x1d6>
			return;
   1b664:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   1b666:	46bd      	mov	sp, r7
   1b668:	bd80      	pop	{r7, pc}
   1b66a:	46c0      	nop			; (mov r8, r8)
   1b66c:	20000a44 	.word	0x20000a44
   1b670:	20004658 	.word	0x20004658
   1b674:	e000e018 	.word	0xe000e018
   1b678:	20005228 	.word	0x20005228
   1b67c:	00036c9f 	.word	0x00036c9f
   1b680:	00001aa1 	.word	0x00001aa1
   1b684:	f0f0f0f0 	.word	0xf0f0f0f0
   1b688:	0001a5f5 	.word	0x0001a5f5
   1b68c:	0000055c 	.word	0x0000055c
   1b690:	f1f1f1f1 	.word	0xf1f1f1f1
   1b694:	00000564 	.word	0x00000564
   1b698:	f2f2f2f2 	.word	0xf2f2f2f2
   1b69c:	000006bc 	.word	0x000006bc
   1b6a0:	0003a284 	.word	0x0003a284
   1b6a4:	0001ba05 	.word	0x0001ba05
   1b6a8:	0000070c 	.word	0x0000070c
   1b6ac:	f3f3f3f3 	.word	0xf3f3f3f3
   1b6b0:	00000bc4 	.word	0x00000bc4
   1b6b4:	00000bc5 	.word	0x00000bc5
   1b6b8:	00000bc6 	.word	0x00000bc6
   1b6bc:	00000bc7 	.word	0x00000bc7
   1b6c0:	00000bc8 	.word	0x00000bc8
   1b6c4:	00000bc9 	.word	0x00000bc9
   1b6c8:	00000bca 	.word	0x00000bca
   1b6cc:	00000bcb 	.word	0x00000bcb
   1b6d0:	00000bcc 	.word	0x00000bcc
   1b6d4:	00000bcd 	.word	0x00000bcd
   1b6d8:	00000bce 	.word	0x00000bce
   1b6dc:	00000bcf 	.word	0x00000bcf
   1b6e0:	0001a795 	.word	0x0001a795
   1b6e4:	200009a4 	.word	0x200009a4
   1b6e8:	000006b4 	.word	0x000006b4
   1b6ec:	0001a9fd 	.word	0x0001a9fd

0001b6f0 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   1b6f0:	b580      	push	{r7, lr}
   1b6f2:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   1b6f4:	4b10      	ldr	r3, [pc, #64]	; (1b738 <prvTraceNextFreeEventBufferSlot+0x48>)
   1b6f6:	681b      	ldr	r3, [r3, #0]
   1b6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b6fa:	2b00      	cmp	r3, #0
   1b6fc:	d101      	bne.n	1b702 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   1b6fe:	2300      	movs	r3, #0
   1b700:	e017      	b.n	1b732 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1b702:	4b0d      	ldr	r3, [pc, #52]	; (1b738 <prvTraceNextFreeEventBufferSlot+0x48>)
   1b704:	681b      	ldr	r3, [r3, #0]
   1b706:	69da      	ldr	r2, [r3, #28]
   1b708:	232c      	movs	r3, #44	; 0x2c
   1b70a:	33ff      	adds	r3, #255	; 0xff
   1b70c:	429a      	cmp	r2, r3
   1b70e:	d905      	bls.n	1b71c <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   1b710:	4b0a      	ldr	r3, [pc, #40]	; (1b73c <prvTraceNextFreeEventBufferSlot+0x4c>)
   1b712:	0018      	movs	r0, r3
   1b714:	4b0a      	ldr	r3, [pc, #40]	; (1b740 <prvTraceNextFreeEventBufferSlot+0x50>)
   1b716:	4798      	blx	r3
		return NULL;
   1b718:	2300      	movs	r3, #0
   1b71a:	e00a      	b.n	1b732 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   1b71c:	4b06      	ldr	r3, [pc, #24]	; (1b738 <prvTraceNextFreeEventBufferSlot+0x48>)
   1b71e:	681a      	ldr	r2, [r3, #0]
   1b720:	4b05      	ldr	r3, [pc, #20]	; (1b738 <prvTraceNextFreeEventBufferSlot+0x48>)
   1b722:	681b      	ldr	r3, [r3, #0]
   1b724:	69db      	ldr	r3, [r3, #28]
   1b726:	009b      	lsls	r3, r3, #2
   1b728:	21e2      	movs	r1, #226	; 0xe2
   1b72a:	00c9      	lsls	r1, r1, #3
   1b72c:	468c      	mov	ip, r1
   1b72e:	4463      	add	r3, ip
   1b730:	18d3      	adds	r3, r2, r3
}
   1b732:	0018      	movs	r0, r3
   1b734:	46bd      	mov	sp, r7
   1b736:	bd80      	pop	{r7, pc}
   1b738:	20000a44 	.word	0x20000a44
   1b73c:	0003a298 	.word	0x0003a298
   1b740:	0001bb39 	.word	0x0001bb39

0001b744 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   1b744:	b580      	push	{r7, lr}
   1b746:	b082      	sub	sp, #8
   1b748:	af00      	add	r7, sp, #0
   1b74a:	0002      	movs	r2, r0
   1b74c:	1dfb      	adds	r3, r7, #7
   1b74e:	701a      	strb	r2, [r3, #0]
   1b750:	1dbb      	adds	r3, r7, #6
   1b752:	1c0a      	adds	r2, r1, #0
   1b754:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1b756:	1dbb      	adds	r3, r7, #6
   1b758:	781b      	ldrb	r3, [r3, #0]
   1b75a:	2b08      	cmp	r3, #8
   1b75c:	d905      	bls.n	1b76a <uiIndexOfObject+0x26>
   1b75e:	4b2a      	ldr	r3, [pc, #168]	; (1b808 <uiIndexOfObject+0xc4>)
   1b760:	0018      	movs	r0, r3
   1b762:	4b2a      	ldr	r3, [pc, #168]	; (1b80c <uiIndexOfObject+0xc8>)
   1b764:	4798      	blx	r3
   1b766:	2300      	movs	r3, #0
   1b768:	e049      	b.n	1b7fe <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   1b76a:	1dfb      	adds	r3, r7, #7
   1b76c:	781b      	ldrb	r3, [r3, #0]
   1b76e:	2b00      	cmp	r3, #0
   1b770:	d00b      	beq.n	1b78a <uiIndexOfObject+0x46>
   1b772:	4b27      	ldr	r3, [pc, #156]	; (1b810 <uiIndexOfObject+0xcc>)
   1b774:	681a      	ldr	r2, [r3, #0]
   1b776:	1dbb      	adds	r3, r7, #6
   1b778:	781b      	ldrb	r3, [r3, #0]
   1b77a:	2164      	movs	r1, #100	; 0x64
   1b77c:	18d3      	adds	r3, r2, r3
   1b77e:	185b      	adds	r3, r3, r1
   1b780:	781b      	ldrb	r3, [r3, #0]
   1b782:	1dfa      	adds	r2, r7, #7
   1b784:	7812      	ldrb	r2, [r2, #0]
   1b786:	429a      	cmp	r2, r3
   1b788:	d905      	bls.n	1b796 <uiIndexOfObject+0x52>
   1b78a:	4b22      	ldr	r3, [pc, #136]	; (1b814 <uiIndexOfObject+0xd0>)
   1b78c:	0018      	movs	r0, r3
   1b78e:	4b1f      	ldr	r3, [pc, #124]	; (1b80c <uiIndexOfObject+0xc8>)
   1b790:	4798      	blx	r3
   1b792:	2300      	movs	r3, #0
   1b794:	e033      	b.n	1b7fe <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1b796:	1dbb      	adds	r3, r7, #6
   1b798:	781b      	ldrb	r3, [r3, #0]
   1b79a:	2b08      	cmp	r3, #8
   1b79c:	d82a      	bhi.n	1b7f4 <uiIndexOfObject+0xb0>
   1b79e:	1dfb      	adds	r3, r7, #7
   1b7a0:	781b      	ldrb	r3, [r3, #0]
   1b7a2:	2b00      	cmp	r3, #0
   1b7a4:	d026      	beq.n	1b7f4 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   1b7a6:	4b1a      	ldr	r3, [pc, #104]	; (1b810 <uiIndexOfObject+0xcc>)
   1b7a8:	681a      	ldr	r2, [r3, #0]
   1b7aa:	1dbb      	adds	r3, r7, #6
   1b7ac:	781b      	ldrb	r3, [r3, #0]
   1b7ae:	2164      	movs	r1, #100	; 0x64
   1b7b0:	18d3      	adds	r3, r2, r3
   1b7b2:	185b      	adds	r3, r3, r1
   1b7b4:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1b7b6:	1dfa      	adds	r2, r7, #7
   1b7b8:	7812      	ldrb	r2, [r2, #0]
   1b7ba:	429a      	cmp	r2, r3
   1b7bc:	d81a      	bhi.n	1b7f4 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1b7be:	4b14      	ldr	r3, [pc, #80]	; (1b810 <uiIndexOfObject+0xcc>)
   1b7c0:	681a      	ldr	r2, [r3, #0]
   1b7c2:	1dbb      	adds	r3, r7, #6
   1b7c4:	781b      	ldrb	r3, [r3, #0]
   1b7c6:	3340      	adds	r3, #64	; 0x40
   1b7c8:	005b      	lsls	r3, r3, #1
   1b7ca:	18d3      	adds	r3, r2, r3
   1b7cc:	3308      	adds	r3, #8
   1b7ce:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1b7d0:	4b0f      	ldr	r3, [pc, #60]	; (1b810 <uiIndexOfObject+0xcc>)
   1b7d2:	6819      	ldr	r1, [r3, #0]
   1b7d4:	1dbb      	adds	r3, r7, #6
   1b7d6:	781b      	ldrb	r3, [r3, #0]
   1b7d8:	207c      	movs	r0, #124	; 0x7c
   1b7da:	18cb      	adds	r3, r1, r3
   1b7dc:	181b      	adds	r3, r3, r0
   1b7de:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1b7e0:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1b7e2:	1df9      	adds	r1, r7, #7
   1b7e4:	7809      	ldrb	r1, [r1, #0]
   1b7e6:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1b7e8:	b289      	uxth	r1, r1
   1b7ea:	434b      	muls	r3, r1
   1b7ec:	b29b      	uxth	r3, r3
   1b7ee:	18d3      	adds	r3, r2, r3
   1b7f0:	b29b      	uxth	r3, r3
   1b7f2:	e004      	b.n	1b7fe <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   1b7f4:	4b08      	ldr	r3, [pc, #32]	; (1b818 <uiIndexOfObject+0xd4>)
   1b7f6:	0018      	movs	r0, r3
   1b7f8:	4b04      	ldr	r3, [pc, #16]	; (1b80c <uiIndexOfObject+0xc8>)
   1b7fa:	4798      	blx	r3
	return 0;
   1b7fc:	2300      	movs	r3, #0
}
   1b7fe:	0018      	movs	r0, r3
   1b800:	46bd      	mov	sp, r7
   1b802:	b002      	add	sp, #8
   1b804:	bd80      	pop	{r7, pc}
   1b806:	46c0      	nop			; (mov r8, r8)
   1b808:	0003a2c0 	.word	0x0003a2c0
   1b80c:	0001bb39 	.word	0x0001bb39
   1b810:	20000a44 	.word	0x20000a44
   1b814:	0003a300 	.word	0x0003a300
   1b818:	0003a340 	.word	0x0003a340

0001b81c <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   1b81c:	b580      	push	{r7, lr}
   1b81e:	b088      	sub	sp, #32
   1b820:	af00      	add	r7, sp, #0
   1b822:	0002      	movs	r2, r0
   1b824:	1dfb      	adds	r3, r7, #7
   1b826:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   1b828:	4b5a      	ldr	r3, [pc, #360]	; (1b994 <prvTraceGetObjectHandle+0x178>)
   1b82a:	681b      	ldr	r3, [r3, #0]
   1b82c:	2b00      	cmp	r3, #0
   1b82e:	d105      	bne.n	1b83c <prvTraceGetObjectHandle+0x20>
   1b830:	4b59      	ldr	r3, [pc, #356]	; (1b998 <prvTraceGetObjectHandle+0x17c>)
   1b832:	0018      	movs	r0, r3
   1b834:	4b59      	ldr	r3, [pc, #356]	; (1b99c <prvTraceGetObjectHandle+0x180>)
   1b836:	4798      	blx	r3
   1b838:	2300      	movs	r3, #0
   1b83a:	e0a7      	b.n	1b98c <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1b83c:	1dfb      	adds	r3, r7, #7
   1b83e:	781b      	ldrb	r3, [r3, #0]
   1b840:	2b08      	cmp	r3, #8
   1b842:	d905      	bls.n	1b850 <prvTraceGetObjectHandle+0x34>
   1b844:	4b56      	ldr	r3, [pc, #344]	; (1b9a0 <prvTraceGetObjectHandle+0x184>)
   1b846:	0018      	movs	r0, r3
   1b848:	4b54      	ldr	r3, [pc, #336]	; (1b99c <prvTraceGetObjectHandle+0x180>)
   1b84a:	4798      	blx	r3
   1b84c:	2300      	movs	r3, #0
   1b84e:	e09d      	b.n	1b98c <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b850:	f3ef 8310 	mrs	r3, PRIMASK
   1b854:	60fb      	str	r3, [r7, #12]
  return(result);
   1b856:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   1b858:	61bb      	str	r3, [r7, #24]
   1b85a:	2301      	movs	r3, #1
   1b85c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b85e:	693b      	ldr	r3, [r7, #16]
   1b860:	f383 8810 	msr	PRIMASK, r3
   1b864:	4b4f      	ldr	r3, [pc, #316]	; (1b9a4 <prvTraceGetObjectHandle+0x188>)
   1b866:	681b      	ldr	r3, [r3, #0]
   1b868:	1c5a      	adds	r2, r3, #1
   1b86a:	4b4e      	ldr	r3, [pc, #312]	; (1b9a4 <prvTraceGetObjectHandle+0x188>)
   1b86c:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   1b86e:	1dfb      	adds	r3, r7, #7
   1b870:	781a      	ldrb	r2, [r3, #0]
   1b872:	4b4d      	ldr	r3, [pc, #308]	; (1b9a8 <prvTraceGetObjectHandle+0x18c>)
   1b874:	0052      	lsls	r2, r2, #1
   1b876:	5ad3      	ldrh	r3, [r2, r3]
   1b878:	001a      	movs	r2, r3
   1b87a:	4b4c      	ldr	r3, [pc, #304]	; (1b9ac <prvTraceGetObjectHandle+0x190>)
   1b87c:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   1b87e:	4b4b      	ldr	r3, [pc, #300]	; (1b9ac <prvTraceGetObjectHandle+0x190>)
   1b880:	681b      	ldr	r3, [r3, #0]
   1b882:	4a49      	ldr	r2, [pc, #292]	; (1b9a8 <prvTraceGetObjectHandle+0x18c>)
   1b884:	2148      	movs	r1, #72	; 0x48
   1b886:	18d3      	adds	r3, r2, r3
   1b888:	185b      	adds	r3, r3, r1
   1b88a:	781b      	ldrb	r3, [r3, #0]
   1b88c:	2b00      	cmp	r3, #0
   1b88e:	d117      	bne.n	1b8c0 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   1b890:	4b46      	ldr	r3, [pc, #280]	; (1b9ac <prvTraceGetObjectHandle+0x190>)
   1b892:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1b894:	4b45      	ldr	r3, [pc, #276]	; (1b9ac <prvTraceGetObjectHandle+0x190>)
   1b896:	681b      	ldr	r3, [r3, #0]
   1b898:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   1b89a:	1dfb      	adds	r3, r7, #7
   1b89c:	781b      	ldrb	r3, [r3, #0]
   1b89e:	4842      	ldr	r0, [pc, #264]	; (1b9a8 <prvTraceGetObjectHandle+0x18c>)
   1b8a0:	3308      	adds	r3, #8
   1b8a2:	005b      	lsls	r3, r3, #1
   1b8a4:	18c3      	adds	r3, r0, r3
   1b8a6:	3302      	adds	r3, #2
   1b8a8:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1b8aa:	b2db      	uxtb	r3, r3
   1b8ac:	1acb      	subs	r3, r1, r3
   1b8ae:	b2db      	uxtb	r3, r3
   1b8b0:	3301      	adds	r3, #1
   1b8b2:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   1b8b4:	4b3c      	ldr	r3, [pc, #240]	; (1b9a8 <prvTraceGetObjectHandle+0x18c>)
   1b8b6:	2148      	movs	r1, #72	; 0x48
   1b8b8:	189b      	adds	r3, r3, r2
   1b8ba:	185b      	adds	r3, r3, r1
   1b8bc:	1c02      	adds	r2, r0, #0
   1b8be:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   1b8c0:	4b3a      	ldr	r3, [pc, #232]	; (1b9ac <prvTraceGetObjectHandle+0x190>)
   1b8c2:	681a      	ldr	r2, [r3, #0]
   1b8c4:	231f      	movs	r3, #31
   1b8c6:	18fb      	adds	r3, r7, r3
   1b8c8:	4937      	ldr	r1, [pc, #220]	; (1b9a8 <prvTraceGetObjectHandle+0x18c>)
   1b8ca:	2048      	movs	r0, #72	; 0x48
   1b8cc:	188a      	adds	r2, r1, r2
   1b8ce:	1812      	adds	r2, r2, r0
   1b8d0:	7812      	ldrb	r2, [r2, #0]
   1b8d2:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1b8d4:	1dfb      	adds	r3, r7, #7
   1b8d6:	781a      	ldrb	r2, [r3, #0]
   1b8d8:	4b33      	ldr	r3, [pc, #204]	; (1b9a8 <prvTraceGetObjectHandle+0x18c>)
   1b8da:	0052      	lsls	r2, r2, #1
   1b8dc:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   1b8de:	1dfb      	adds	r3, r7, #7
   1b8e0:	781b      	ldrb	r3, [r3, #0]
   1b8e2:	4931      	ldr	r1, [pc, #196]	; (1b9a8 <prvTraceGetObjectHandle+0x18c>)
   1b8e4:	3310      	adds	r3, #16
   1b8e6:	005b      	lsls	r3, r3, #1
   1b8e8:	18cb      	adds	r3, r1, r3
   1b8ea:	3304      	adds	r3, #4
   1b8ec:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1b8ee:	429a      	cmp	r2, r3
   1b8f0:	d90d      	bls.n	1b90e <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1b8f2:	1dfb      	adds	r3, r7, #7
   1b8f4:	781b      	ldrb	r3, [r3, #0]
   1b8f6:	0018      	movs	r0, r3
   1b8f8:	4b2d      	ldr	r3, [pc, #180]	; (1b9b0 <prvTraceGetObjectHandle+0x194>)
   1b8fa:	4798      	blx	r3
   1b8fc:	0003      	movs	r3, r0
   1b8fe:	0018      	movs	r0, r3
   1b900:	4b26      	ldr	r3, [pc, #152]	; (1b99c <prvTraceGetObjectHandle+0x180>)
   1b902:	4798      	blx	r3
		handle = 0;
   1b904:	231f      	movs	r3, #31
   1b906:	18fb      	adds	r3, r7, r3
   1b908:	2200      	movs	r2, #0
   1b90a:	701a      	strb	r2, [r3, #0]
   1b90c:	e031      	b.n	1b972 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   1b90e:	1dfb      	adds	r3, r7, #7
   1b910:	781b      	ldrb	r3, [r3, #0]
   1b912:	4a25      	ldr	r2, [pc, #148]	; (1b9a8 <prvTraceGetObjectHandle+0x18c>)
   1b914:	0059      	lsls	r1, r3, #1
   1b916:	5a8a      	ldrh	r2, [r1, r2]
   1b918:	3201      	adds	r2, #1
   1b91a:	b291      	uxth	r1, r2
   1b91c:	4a22      	ldr	r2, [pc, #136]	; (1b9a8 <prvTraceGetObjectHandle+0x18c>)
   1b91e:	005b      	lsls	r3, r3, #1
   1b920:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1b922:	1dfb      	adds	r3, r7, #7
   1b924:	781a      	ldrb	r2, [r3, #0]
   1b926:	4b20      	ldr	r3, [pc, #128]	; (1b9a8 <prvTraceGetObjectHandle+0x18c>)
   1b928:	0052      	lsls	r2, r2, #1
   1b92a:	5ad3      	ldrh	r3, [r2, r3]
   1b92c:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   1b92e:	1dfb      	adds	r3, r7, #7
   1b930:	781b      	ldrb	r3, [r3, #0]
   1b932:	4a1d      	ldr	r2, [pc, #116]	; (1b9a8 <prvTraceGetObjectHandle+0x18c>)
   1b934:	3308      	adds	r3, #8
   1b936:	005b      	lsls	r3, r3, #1
   1b938:	18d3      	adds	r3, r2, r3
   1b93a:	3302      	adds	r3, #2
   1b93c:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1b93e:	1acb      	subs	r3, r1, r3
   1b940:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   1b942:	1dfb      	adds	r3, r7, #7
   1b944:	781b      	ldrb	r3, [r3, #0]
   1b946:	4a18      	ldr	r2, [pc, #96]	; (1b9a8 <prvTraceGetObjectHandle+0x18c>)
   1b948:	3318      	adds	r3, #24
   1b94a:	005b      	lsls	r3, r3, #1
   1b94c:	18d3      	adds	r3, r2, r3
   1b94e:	3306      	adds	r3, #6
   1b950:	881b      	ldrh	r3, [r3, #0]
   1b952:	001a      	movs	r2, r3
		if (hndCount >
   1b954:	697b      	ldr	r3, [r7, #20]
   1b956:	429a      	cmp	r2, r3
   1b958:	da0b      	bge.n	1b972 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1b95a:	1dfb      	adds	r3, r7, #7
   1b95c:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   1b95e:	697a      	ldr	r2, [r7, #20]
   1b960:	b2d2      	uxtb	r2, r2
   1b962:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1b964:	4a10      	ldr	r2, [pc, #64]	; (1b9a8 <prvTraceGetObjectHandle+0x18c>)
   1b966:	3318      	adds	r3, #24
   1b968:	005b      	lsls	r3, r3, #1
   1b96a:	18d3      	adds	r3, r2, r3
   1b96c:	3306      	adds	r3, #6
   1b96e:	1c0a      	adds	r2, r1, #0
   1b970:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   1b972:	4b0c      	ldr	r3, [pc, #48]	; (1b9a4 <prvTraceGetObjectHandle+0x188>)
   1b974:	681b      	ldr	r3, [r3, #0]
   1b976:	1e5a      	subs	r2, r3, #1
   1b978:	4b0a      	ldr	r3, [pc, #40]	; (1b9a4 <prvTraceGetObjectHandle+0x188>)
   1b97a:	601a      	str	r2, [r3, #0]
   1b97c:	69bb      	ldr	r3, [r7, #24]
   1b97e:	60bb      	str	r3, [r7, #8]
   1b980:	68bb      	ldr	r3, [r7, #8]
   1b982:	f383 8810 	msr	PRIMASK, r3

	return handle;
   1b986:	231f      	movs	r3, #31
   1b988:	18fb      	adds	r3, r7, r3
   1b98a:	781b      	ldrb	r3, [r3, #0]
}
   1b98c:	0018      	movs	r0, r3
   1b98e:	46bd      	mov	sp, r7
   1b990:	b008      	add	sp, #32
   1b992:	bd80      	pop	{r7, pc}
   1b994:	20000a44 	.word	0x20000a44
   1b998:	000397a0 	.word	0x000397a0
   1b99c:	0001bb39 	.word	0x0001bb39
   1b9a0:	0003a380 	.word	0x0003a380
   1b9a4:	2000099c 	.word	0x2000099c
   1b9a8:	200009b4 	.word	0x200009b4
   1b9ac:	20000a48 	.word	0x20000a48
   1b9b0:	0001a859 	.word	0x0001a859

0001b9b4 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   1b9b4:	b590      	push	{r4, r7, lr}
   1b9b6:	b085      	sub	sp, #20
   1b9b8:	af00      	add	r7, sp, #0
   1b9ba:	0002      	movs	r2, r0
   1b9bc:	1dfb      	adds	r3, r7, #7
   1b9be:	701a      	strb	r2, [r3, #0]
   1b9c0:	1dbb      	adds	r3, r7, #6
   1b9c2:	1c0a      	adds	r2, r1, #0
   1b9c4:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   1b9c6:	230e      	movs	r3, #14
   1b9c8:	18fc      	adds	r4, r7, r3
   1b9ca:	1dfb      	adds	r3, r7, #7
   1b9cc:	781a      	ldrb	r2, [r3, #0]
   1b9ce:	1dbb      	adds	r3, r7, #6
   1b9d0:	781b      	ldrb	r3, [r3, #0]
   1b9d2:	0011      	movs	r1, r2
   1b9d4:	0018      	movs	r0, r3
   1b9d6:	4b09      	ldr	r3, [pc, #36]	; (1b9fc <prvMarkObjectAsUsed+0x48>)
   1b9d8:	4798      	blx	r3
   1b9da:	0003      	movs	r3, r0
   1b9dc:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   1b9de:	4b08      	ldr	r3, [pc, #32]	; (1ba00 <prvMarkObjectAsUsed+0x4c>)
   1b9e0:	681a      	ldr	r2, [r3, #0]
   1b9e2:	230e      	movs	r3, #14
   1b9e4:	18fb      	adds	r3, r7, r3
   1b9e6:	881b      	ldrh	r3, [r3, #0]
   1b9e8:	219c      	movs	r1, #156	; 0x9c
   1b9ea:	18d3      	adds	r3, r2, r3
   1b9ec:	185b      	adds	r3, r3, r1
   1b9ee:	2201      	movs	r2, #1
   1b9f0:	701a      	strb	r2, [r3, #0]
}
   1b9f2:	46c0      	nop			; (mov r8, r8)
   1b9f4:	46bd      	mov	sp, r7
   1b9f6:	b005      	add	sp, #20
   1b9f8:	bd90      	pop	{r4, r7, pc}
   1b9fa:	46c0      	nop			; (mov r8, r8)
   1b9fc:	0001b745 	.word	0x0001b745
   1ba00:	20000a44 	.word	0x20000a44

0001ba04 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   1ba04:	b580      	push	{r7, lr}
   1ba06:	b086      	sub	sp, #24
   1ba08:	af00      	add	r7, sp, #0
   1ba0a:	60f8      	str	r0, [r7, #12]
   1ba0c:	60b9      	str	r1, [r7, #8]
   1ba0e:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   1ba10:	2300      	movs	r3, #0
   1ba12:	617b      	str	r3, [r7, #20]
   1ba14:	e010      	b.n	1ba38 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   1ba16:	68fa      	ldr	r2, [r7, #12]
   1ba18:	697b      	ldr	r3, [r7, #20]
   1ba1a:	18d3      	adds	r3, r2, r3
   1ba1c:	68b9      	ldr	r1, [r7, #8]
   1ba1e:	697a      	ldr	r2, [r7, #20]
   1ba20:	188a      	adds	r2, r1, r2
   1ba22:	7812      	ldrb	r2, [r2, #0]
   1ba24:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   1ba26:	68ba      	ldr	r2, [r7, #8]
   1ba28:	697b      	ldr	r3, [r7, #20]
   1ba2a:	18d3      	adds	r3, r2, r3
   1ba2c:	781b      	ldrb	r3, [r3, #0]
   1ba2e:	2b00      	cmp	r3, #0
   1ba30:	d007      	beq.n	1ba42 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   1ba32:	697b      	ldr	r3, [r7, #20]
   1ba34:	3301      	adds	r3, #1
   1ba36:	617b      	str	r3, [r7, #20]
   1ba38:	697a      	ldr	r2, [r7, #20]
   1ba3a:	687b      	ldr	r3, [r7, #4]
   1ba3c:	429a      	cmp	r2, r3
   1ba3e:	d3ea      	bcc.n	1ba16 <prvStrncpy+0x12>
			break;
	}
}
   1ba40:	e000      	b.n	1ba44 <prvStrncpy+0x40>
			break;
   1ba42:	46c0      	nop			; (mov r8, r8)
}
   1ba44:	46c0      	nop			; (mov r8, r8)
   1ba46:	46bd      	mov	sp, r7
   1ba48:	b006      	add	sp, #24
   1ba4a:	bd80      	pop	{r7, pc}

0001ba4c <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   1ba4c:	b580      	push	{r7, lr}
   1ba4e:	b082      	sub	sp, #8
   1ba50:	af00      	add	r7, sp, #0
   1ba52:	603a      	str	r2, [r7, #0]
   1ba54:	1dfb      	adds	r3, r7, #7
   1ba56:	1c02      	adds	r2, r0, #0
   1ba58:	701a      	strb	r2, [r3, #0]
   1ba5a:	1dbb      	adds	r3, r7, #6
   1ba5c:	1c0a      	adds	r2, r1, #0
   1ba5e:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   1ba60:	683b      	ldr	r3, [r7, #0]
   1ba62:	2b00      	cmp	r3, #0
   1ba64:	d104      	bne.n	1ba70 <prvTraceSetObjectName+0x24>
   1ba66:	4b2a      	ldr	r3, [pc, #168]	; (1bb10 <prvTraceSetObjectName+0xc4>)
   1ba68:	0018      	movs	r0, r3
   1ba6a:	4b2a      	ldr	r3, [pc, #168]	; (1bb14 <prvTraceSetObjectName+0xc8>)
   1ba6c:	4798      	blx	r3
   1ba6e:	e04b      	b.n	1bb08 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   1ba70:	1dfb      	adds	r3, r7, #7
   1ba72:	781b      	ldrb	r3, [r3, #0]
   1ba74:	2b08      	cmp	r3, #8
   1ba76:	d904      	bls.n	1ba82 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   1ba78:	4b27      	ldr	r3, [pc, #156]	; (1bb18 <prvTraceSetObjectName+0xcc>)
   1ba7a:	0018      	movs	r0, r3
   1ba7c:	4b25      	ldr	r3, [pc, #148]	; (1bb14 <prvTraceSetObjectName+0xc8>)
   1ba7e:	4798      	blx	r3
		return;
   1ba80:	e042      	b.n	1bb08 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   1ba82:	1dbb      	adds	r3, r7, #6
   1ba84:	781b      	ldrb	r3, [r3, #0]
   1ba86:	2b00      	cmp	r3, #0
   1ba88:	d104      	bne.n	1ba94 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   1ba8a:	4b24      	ldr	r3, [pc, #144]	; (1bb1c <prvTraceSetObjectName+0xd0>)
   1ba8c:	0018      	movs	r0, r3
   1ba8e:	4b21      	ldr	r3, [pc, #132]	; (1bb14 <prvTraceSetObjectName+0xc8>)
   1ba90:	4798      	blx	r3
		return;
   1ba92:	e039      	b.n	1bb08 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   1ba94:	4b22      	ldr	r3, [pc, #136]	; (1bb20 <prvTraceSetObjectName+0xd4>)
   1ba96:	681a      	ldr	r2, [r3, #0]
   1ba98:	1dfb      	adds	r3, r7, #7
   1ba9a:	781b      	ldrb	r3, [r3, #0]
   1ba9c:	2164      	movs	r1, #100	; 0x64
   1ba9e:	18d3      	adds	r3, r2, r3
   1baa0:	185b      	adds	r3, r3, r1
   1baa2:	781b      	ldrb	r3, [r3, #0]
   1baa4:	1dba      	adds	r2, r7, #6
   1baa6:	7812      	ldrb	r2, [r2, #0]
   1baa8:	429a      	cmp	r2, r3
   1baaa:	d909      	bls.n	1bac0 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1baac:	1dfb      	adds	r3, r7, #7
   1baae:	781b      	ldrb	r3, [r3, #0]
   1bab0:	0018      	movs	r0, r3
   1bab2:	4b1c      	ldr	r3, [pc, #112]	; (1bb24 <prvTraceSetObjectName+0xd8>)
   1bab4:	4798      	blx	r3
   1bab6:	0003      	movs	r3, r0
   1bab8:	0018      	movs	r0, r3
   1baba:	4b16      	ldr	r3, [pc, #88]	; (1bb14 <prvTraceSetObjectName+0xc8>)
   1babc:	4798      	blx	r3
   1babe:	e023      	b.n	1bb08 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   1bac0:	1dfb      	adds	r3, r7, #7
   1bac2:	781a      	ldrb	r2, [r3, #0]
   1bac4:	1dbb      	adds	r3, r7, #6
   1bac6:	781b      	ldrb	r3, [r3, #0]
   1bac8:	0011      	movs	r1, r2
   1baca:	0018      	movs	r0, r3
   1bacc:	4b16      	ldr	r3, [pc, #88]	; (1bb28 <prvTraceSetObjectName+0xdc>)
   1bace:	4798      	blx	r3
   1bad0:	0003      	movs	r3, r0
   1bad2:	001a      	movs	r2, r3
   1bad4:	4b15      	ldr	r3, [pc, #84]	; (1bb2c <prvTraceSetObjectName+0xe0>)
   1bad6:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   1bad8:	4b15      	ldr	r3, [pc, #84]	; (1bb30 <prvTraceSetObjectName+0xe4>)
   1bada:	681b      	ldr	r3, [r3, #0]
   1badc:	2b00      	cmp	r3, #0
   1bade:	d113      	bne.n	1bb08 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1bae0:	4b0f      	ldr	r3, [pc, #60]	; (1bb20 <prvTraceSetObjectName+0xd4>)
   1bae2:	681a      	ldr	r2, [r3, #0]
   1bae4:	4b11      	ldr	r3, [pc, #68]	; (1bb2c <prvTraceSetObjectName+0xe0>)
   1bae6:	881b      	ldrh	r3, [r3, #0]
   1bae8:	3398      	adds	r3, #152	; 0x98
   1baea:	18d3      	adds	r3, r2, r3
   1baec:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   1baee:	4b0c      	ldr	r3, [pc, #48]	; (1bb20 <prvTraceSetObjectName+0xd4>)
   1baf0:	681a      	ldr	r2, [r3, #0]
   1baf2:	1dfb      	adds	r3, r7, #7
   1baf4:	781b      	ldrb	r3, [r3, #0]
   1baf6:	2170      	movs	r1, #112	; 0x70
   1baf8:	18d3      	adds	r3, r2, r3
   1bafa:	185b      	adds	r3, r3, r1
   1bafc:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1bafe:	001a      	movs	r2, r3
   1bb00:	683b      	ldr	r3, [r7, #0]
   1bb02:	0019      	movs	r1, r3
   1bb04:	4b0b      	ldr	r3, [pc, #44]	; (1bb34 <prvTraceSetObjectName+0xe8>)
   1bb06:	4798      	blx	r3
		}
	}
}
   1bb08:	46bd      	mov	sp, r7
   1bb0a:	b002      	add	sp, #8
   1bb0c:	bd80      	pop	{r7, pc}
   1bb0e:	46c0      	nop			; (mov r8, r8)
   1bb10:	0003a484 	.word	0x0003a484
   1bb14:	0001bb39 	.word	0x0001bb39
   1bb18:	0003a4b8 	.word	0x0003a4b8
   1bb1c:	0003a4e8 	.word	0x0003a4e8
   1bb20:	20000a44 	.word	0x20000a44
   1bb24:	0001a859 	.word	0x0001a859
   1bb28:	0001b745 	.word	0x0001b745
   1bb2c:	20000a4c 	.word	0x20000a4c
   1bb30:	200009a4 	.word	0x200009a4
   1bb34:	0001ba05 	.word	0x0001ba05

0001bb38 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   1bb38:	b580      	push	{r7, lr}
   1bb3a:	b082      	sub	sp, #8
   1bb3c:	af00      	add	r7, sp, #0
   1bb3e:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   1bb40:	4b11      	ldr	r3, [pc, #68]	; (1bb88 <prvTraceError+0x50>)
   1bb42:	681b      	ldr	r3, [r3, #0]
   1bb44:	2b00      	cmp	r3, #0
   1bb46:	d001      	beq.n	1bb4c <prvTraceError+0x14>
	{
		vTraceStop();
   1bb48:	4b10      	ldr	r3, [pc, #64]	; (1bb8c <prvTraceError+0x54>)
   1bb4a:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   1bb4c:	4b10      	ldr	r3, [pc, #64]	; (1bb90 <prvTraceError+0x58>)
   1bb4e:	681b      	ldr	r3, [r3, #0]
   1bb50:	2b00      	cmp	r3, #0
   1bb52:	d115      	bne.n	1bb80 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   1bb54:	4b0e      	ldr	r3, [pc, #56]	; (1bb90 <prvTraceError+0x58>)
   1bb56:	687a      	ldr	r2, [r7, #4]
   1bb58:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   1bb5a:	4b0b      	ldr	r3, [pc, #44]	; (1bb88 <prvTraceError+0x50>)
   1bb5c:	681b      	ldr	r3, [r3, #0]
   1bb5e:	2b00      	cmp	r3, #0
   1bb60:	d00e      	beq.n	1bb80 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1bb62:	4b09      	ldr	r3, [pc, #36]	; (1bb88 <prvTraceError+0x50>)
   1bb64:	681b      	ldr	r3, [r3, #0]
   1bb66:	4a0b      	ldr	r2, [pc, #44]	; (1bb94 <prvTraceError+0x5c>)
   1bb68:	1898      	adds	r0, r3, r2
   1bb6a:	4b09      	ldr	r3, [pc, #36]	; (1bb90 <prvTraceError+0x58>)
   1bb6c:	681b      	ldr	r3, [r3, #0]
   1bb6e:	2250      	movs	r2, #80	; 0x50
   1bb70:	0019      	movs	r1, r3
   1bb72:	4b09      	ldr	r3, [pc, #36]	; (1bb98 <prvTraceError+0x60>)
   1bb74:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   1bb76:	4b04      	ldr	r3, [pc, #16]	; (1bb88 <prvTraceError+0x50>)
   1bb78:	681b      	ldr	r3, [r3, #0]
   1bb7a:	4a08      	ldr	r2, [pc, #32]	; (1bb9c <prvTraceError+0x64>)
   1bb7c:	2101      	movs	r1, #1
   1bb7e:	5099      	str	r1, [r3, r2]
		}
	}
}
   1bb80:	46c0      	nop			; (mov r8, r8)
   1bb82:	46bd      	mov	sp, r7
   1bb84:	b002      	add	sp, #8
   1bb86:	bd80      	pop	{r7, pc}
   1bb88:	20000a44 	.word	0x20000a44
   1bb8c:	0001a9fd 	.word	0x0001a9fd
   1bb90:	200009a4 	.word	0x200009a4
   1bb94:	000006bc 	.word	0x000006bc
   1bb98:	0001ba05 	.word	0x0001ba05
   1bb9c:	000006b4 	.word	0x000006b4

0001bba0 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   1bba0:	b580      	push	{r7, lr}
   1bba2:	b086      	sub	sp, #24
   1bba4:	af00      	add	r7, sp, #0
   1bba6:	0002      	movs	r2, r0
   1bba8:	1dfb      	adds	r3, r7, #7
   1bbaa:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   1bbac:	2300      	movs	r3, #0
   1bbae:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   1bbb0:	2300      	movs	r3, #0
   1bbb2:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   1bbb4:	1dfb      	adds	r3, r7, #7
   1bbb6:	781b      	ldrb	r3, [r3, #0]
   1bbb8:	2b00      	cmp	r3, #0
   1bbba:	d000      	beq.n	1bbbe <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   1bbbc:	e089      	b.n	1bcd2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   1bbbe:	4b49      	ldr	r3, [pc, #292]	; (1bce4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   1bbc0:	0018      	movs	r0, r3
   1bbc2:	4b49      	ldr	r3, [pc, #292]	; (1bce8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   1bbc4:	4798      	blx	r3
   1bbc6:	e08a      	b.n	1bcde <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   1bbc8:	4b48      	ldr	r3, [pc, #288]	; (1bcec <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bbca:	681b      	ldr	r3, [r3, #0]
   1bbcc:	69da      	ldr	r2, [r3, #28]
   1bbce:	697b      	ldr	r3, [r7, #20]
   1bbd0:	18d3      	adds	r3, r2, r3
   1bbd2:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1bbd4:	4b45      	ldr	r3, [pc, #276]	; (1bcec <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bbd6:	6819      	ldr	r1, [r3, #0]
   1bbd8:	693b      	ldr	r3, [r7, #16]
   1bbda:	009a      	lsls	r2, r3, #2
   1bbdc:	23e2      	movs	r3, #226	; 0xe2
   1bbde:	00db      	lsls	r3, r3, #3
   1bbe0:	188a      	adds	r2, r1, r2
   1bbe2:	18d3      	adds	r3, r2, r3
   1bbe4:	781b      	ldrb	r3, [r3, #0]
   1bbe6:	2b98      	cmp	r3, #152	; 0x98
   1bbe8:	d934      	bls.n	1bc54 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   1bbea:	4b40      	ldr	r3, [pc, #256]	; (1bcec <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bbec:	6819      	ldr	r1, [r3, #0]
   1bbee:	693b      	ldr	r3, [r7, #16]
   1bbf0:	009a      	lsls	r2, r3, #2
   1bbf2:	23e2      	movs	r3, #226	; 0xe2
   1bbf4:	00db      	lsls	r3, r3, #3
   1bbf6:	188a      	adds	r2, r1, r2
   1bbf8:	18d3      	adds	r3, r2, r3
   1bbfa:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1bbfc:	2ba7      	cmp	r3, #167	; 0xa7
   1bbfe:	d829      	bhi.n	1bc54 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   1bc00:	4b3a      	ldr	r3, [pc, #232]	; (1bcec <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bc02:	6819      	ldr	r1, [r3, #0]
   1bc04:	693b      	ldr	r3, [r7, #16]
   1bc06:	009a      	lsls	r2, r3, #2
   1bc08:	23e2      	movs	r3, #226	; 0xe2
   1bc0a:	00db      	lsls	r3, r3, #3
   1bc0c:	188a      	adds	r2, r1, r2
   1bc0e:	18d3      	adds	r3, r2, r3
   1bc10:	781a      	ldrb	r2, [r3, #0]
   1bc12:	230f      	movs	r3, #15
   1bc14:	18fb      	adds	r3, r7, r3
   1bc16:	3268      	adds	r2, #104	; 0x68
   1bc18:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   1bc1a:	230f      	movs	r3, #15
   1bc1c:	18fb      	adds	r3, r7, r3
   1bc1e:	781a      	ldrb	r2, [r3, #0]
   1bc20:	693b      	ldr	r3, [r7, #16]
   1bc22:	18d2      	adds	r2, r2, r3
   1bc24:	4b31      	ldr	r3, [pc, #196]	; (1bcec <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bc26:	681b      	ldr	r3, [r3, #0]
   1bc28:	699b      	ldr	r3, [r3, #24]
   1bc2a:	429a      	cmp	r2, r3
   1bc2c:	d24d      	bcs.n	1bcca <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   1bc2e:	4b2f      	ldr	r3, [pc, #188]	; (1bcec <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bc30:	681a      	ldr	r2, [r3, #0]
   1bc32:	693b      	ldr	r3, [r7, #16]
   1bc34:	009b      	lsls	r3, r3, #2
   1bc36:	21e2      	movs	r1, #226	; 0xe2
   1bc38:	00c9      	lsls	r1, r1, #3
   1bc3a:	468c      	mov	ip, r1
   1bc3c:	4463      	add	r3, ip
   1bc3e:	18d0      	adds	r0, r2, r3
   1bc40:	230f      	movs	r3, #15
   1bc42:	18fb      	adds	r3, r7, r3
   1bc44:	781b      	ldrb	r3, [r3, #0]
   1bc46:	3301      	adds	r3, #1
   1bc48:	009b      	lsls	r3, r3, #2
   1bc4a:	001a      	movs	r2, r3
   1bc4c:	2100      	movs	r1, #0
   1bc4e:	4b28      	ldr	r3, [pc, #160]	; (1bcf0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1bc50:	4798      	blx	r3
		{
   1bc52:	e03a      	b.n	1bcca <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   1bc54:	4b25      	ldr	r3, [pc, #148]	; (1bcec <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bc56:	6819      	ldr	r1, [r3, #0]
   1bc58:	693b      	ldr	r3, [r7, #16]
   1bc5a:	009a      	lsls	r2, r3, #2
   1bc5c:	23e2      	movs	r3, #226	; 0xe2
   1bc5e:	00db      	lsls	r3, r3, #3
   1bc60:	188a      	adds	r2, r1, r2
   1bc62:	18d3      	adds	r3, r2, r3
   1bc64:	781b      	ldrb	r3, [r3, #0]
   1bc66:	2b01      	cmp	r3, #1
   1bc68:	d130      	bne.n	1bccc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   1bc6a:	693b      	ldr	r3, [r7, #16]
   1bc6c:	1c5a      	adds	r2, r3, #1
   1bc6e:	4b1f      	ldr	r3, [pc, #124]	; (1bcec <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bc70:	681b      	ldr	r3, [r3, #0]
   1bc72:	699b      	ldr	r3, [r3, #24]
   1bc74:	429a      	cmp	r2, r3
   1bc76:	d20e      	bcs.n	1bc96 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   1bc78:	4b1c      	ldr	r3, [pc, #112]	; (1bcec <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bc7a:	681a      	ldr	r2, [r3, #0]
   1bc7c:	693b      	ldr	r3, [r7, #16]
   1bc7e:	009b      	lsls	r3, r3, #2
   1bc80:	21e2      	movs	r1, #226	; 0xe2
   1bc82:	00c9      	lsls	r1, r1, #3
   1bc84:	468c      	mov	ip, r1
   1bc86:	4463      	add	r3, ip
   1bc88:	18d3      	adds	r3, r2, r3
   1bc8a:	2208      	movs	r2, #8
   1bc8c:	2100      	movs	r1, #0
   1bc8e:	0018      	movs	r0, r3
   1bc90:	4b17      	ldr	r3, [pc, #92]	; (1bcf0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1bc92:	4798      	blx	r3
   1bc94:	e01a      	b.n	1bccc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   1bc96:	4b15      	ldr	r3, [pc, #84]	; (1bcec <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bc98:	681b      	ldr	r3, [r3, #0]
   1bc9a:	22e2      	movs	r2, #226	; 0xe2
   1bc9c:	00d2      	lsls	r2, r2, #3
   1bc9e:	4694      	mov	ip, r2
   1bca0:	4463      	add	r3, ip
   1bca2:	2204      	movs	r2, #4
   1bca4:	2100      	movs	r1, #0
   1bca6:	0018      	movs	r0, r3
   1bca8:	4b11      	ldr	r3, [pc, #68]	; (1bcf0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1bcaa:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   1bcac:	4b0f      	ldr	r3, [pc, #60]	; (1bcec <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bcae:	681a      	ldr	r2, [r3, #0]
   1bcb0:	693b      	ldr	r3, [r7, #16]
   1bcb2:	009b      	lsls	r3, r3, #2
   1bcb4:	21e2      	movs	r1, #226	; 0xe2
   1bcb6:	00c9      	lsls	r1, r1, #3
   1bcb8:	468c      	mov	ip, r1
   1bcba:	4463      	add	r3, ip
   1bcbc:	18d3      	adds	r3, r2, r3
   1bcbe:	2204      	movs	r2, #4
   1bcc0:	2100      	movs	r1, #0
   1bcc2:	0018      	movs	r0, r3
   1bcc4:	4b0a      	ldr	r3, [pc, #40]	; (1bcf0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1bcc6:	4798      	blx	r3
   1bcc8:	e000      	b.n	1bccc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   1bcca:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   1bccc:	697b      	ldr	r3, [r7, #20]
   1bcce:	3301      	adds	r3, #1
   1bcd0:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   1bcd2:	1dfb      	adds	r3, r7, #7
   1bcd4:	781a      	ldrb	r2, [r3, #0]
   1bcd6:	697b      	ldr	r3, [r7, #20]
   1bcd8:	429a      	cmp	r2, r3
   1bcda:	d900      	bls.n	1bcde <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   1bcdc:	e774      	b.n	1bbc8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   1bcde:	46bd      	mov	sp, r7
   1bce0:	b006      	add	sp, #24
   1bce2:	bd80      	pop	{r7, pc}
   1bce4:	0003a548 	.word	0x0003a548
   1bce8:	0001bb39 	.word	0x0001bb39
   1bcec:	20000a44 	.word	0x20000a44
   1bcf0:	00036c9f 	.word	0x00036c9f

0001bcf4 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   1bcf4:	b580      	push	{r7, lr}
   1bcf6:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   1bcf8:	4b12      	ldr	r3, [pc, #72]	; (1bd44 <prvTraceUpdateCounters+0x50>)
   1bcfa:	681b      	ldr	r3, [r3, #0]
   1bcfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1bcfe:	2b00      	cmp	r3, #0
   1bd00:	d01c      	beq.n	1bd3c <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   1bd02:	4b10      	ldr	r3, [pc, #64]	; (1bd44 <prvTraceUpdateCounters+0x50>)
   1bd04:	681b      	ldr	r3, [r3, #0]
   1bd06:	695a      	ldr	r2, [r3, #20]
   1bd08:	3201      	adds	r2, #1
   1bd0a:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   1bd0c:	4b0d      	ldr	r3, [pc, #52]	; (1bd44 <prvTraceUpdateCounters+0x50>)
   1bd0e:	681b      	ldr	r3, [r3, #0]
   1bd10:	69da      	ldr	r2, [r3, #28]
   1bd12:	3201      	adds	r2, #1
   1bd14:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1bd16:	4b0b      	ldr	r3, [pc, #44]	; (1bd44 <prvTraceUpdateCounters+0x50>)
   1bd18:	681b      	ldr	r3, [r3, #0]
   1bd1a:	69da      	ldr	r2, [r3, #28]
   1bd1c:	232c      	movs	r3, #44	; 0x2c
   1bd1e:	33ff      	adds	r3, #255	; 0xff
   1bd20:	429a      	cmp	r2, r3
   1bd22:	d907      	bls.n	1bd34 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   1bd24:	4b07      	ldr	r3, [pc, #28]	; (1bd44 <prvTraceUpdateCounters+0x50>)
   1bd26:	681b      	ldr	r3, [r3, #0]
   1bd28:	2201      	movs	r2, #1
   1bd2a:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   1bd2c:	4b05      	ldr	r3, [pc, #20]	; (1bd44 <prvTraceUpdateCounters+0x50>)
   1bd2e:	681b      	ldr	r3, [r3, #0]
   1bd30:	2200      	movs	r2, #0
   1bd32:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   1bd34:	2001      	movs	r0, #1
   1bd36:	4b04      	ldr	r3, [pc, #16]	; (1bd48 <prvTraceUpdateCounters+0x54>)
   1bd38:	4798      	blx	r3
   1bd3a:	e000      	b.n	1bd3e <prvTraceUpdateCounters+0x4a>
		return;
   1bd3c:	46c0      	nop			; (mov r8, r8)
#endif
}
   1bd3e:	46bd      	mov	sp, r7
   1bd40:	bd80      	pop	{r7, pc}
   1bd42:	46c0      	nop			; (mov r8, r8)
   1bd44:	20000a44 	.word	0x20000a44
   1bd48:	0001bba1 	.word	0x0001bba1

0001bd4c <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   1bd4c:	b5b0      	push	{r4, r5, r7, lr}
   1bd4e:	b086      	sub	sp, #24
   1bd50:	af00      	add	r7, sp, #0
   1bd52:	0002      	movs	r2, r0
   1bd54:	1dbb      	adds	r3, r7, #6
   1bd56:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   1bd58:	2300      	movs	r3, #0
   1bd5a:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   1bd5c:	2300      	movs	r3, #0
   1bd5e:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   1bd60:	2300      	movs	r3, #0
   1bd62:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   1bd64:	1dbb      	adds	r3, r7, #6
   1bd66:	881b      	ldrh	r3, [r3, #0]
   1bd68:	2bff      	cmp	r3, #255	; 0xff
   1bd6a:	d00a      	beq.n	1bd82 <prvTraceGetDTS+0x36>
   1bd6c:	1dbb      	adds	r3, r7, #6
   1bd6e:	881b      	ldrh	r3, [r3, #0]
   1bd70:	4a60      	ldr	r2, [pc, #384]	; (1bef4 <prvTraceGetDTS+0x1a8>)
   1bd72:	4293      	cmp	r3, r2
   1bd74:	d005      	beq.n	1bd82 <prvTraceGetDTS+0x36>
   1bd76:	4b60      	ldr	r3, [pc, #384]	; (1bef8 <prvTraceGetDTS+0x1ac>)
   1bd78:	0018      	movs	r0, r3
   1bd7a:	4b60      	ldr	r3, [pc, #384]	; (1befc <prvTraceGetDTS+0x1b0>)
   1bd7c:	4798      	blx	r3
   1bd7e:	2300      	movs	r3, #0
   1bd80:	e0b3      	b.n	1beea <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   1bd82:	4b5f      	ldr	r3, [pc, #380]	; (1bf00 <prvTraceGetDTS+0x1b4>)
   1bd84:	681b      	ldr	r3, [r3, #0]
   1bd86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bd88:	2b00      	cmp	r3, #0
   1bd8a:	d118      	bne.n	1bdbe <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   1bd8c:	4b5d      	ldr	r3, [pc, #372]	; (1bf04 <prvTraceGetDTS+0x1b8>)
   1bd8e:	681b      	ldr	r3, [r3, #0]
   1bd90:	2b00      	cmp	r3, #0
   1bd92:	d006      	beq.n	1bda2 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   1bd94:	4b5a      	ldr	r3, [pc, #360]	; (1bf00 <prvTraceGetDTS+0x1b4>)
   1bd96:	681b      	ldr	r3, [r3, #0]
   1bd98:	4a5a      	ldr	r2, [pc, #360]	; (1bf04 <prvTraceGetDTS+0x1b8>)
   1bd9a:	6812      	ldr	r2, [r2, #0]
   1bd9c:	0892      	lsrs	r2, r2, #2
   1bd9e:	625a      	str	r2, [r3, #36]	; 0x24
   1bda0:	e00d      	b.n	1bdbe <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   1bda2:	4b59      	ldr	r3, [pc, #356]	; (1bf08 <prvTraceGetDTS+0x1bc>)
   1bda4:	681a      	ldr	r2, [r3, #0]
   1bda6:	4b59      	ldr	r3, [pc, #356]	; (1bf0c <prvTraceGetDTS+0x1c0>)
   1bda8:	681b      	ldr	r3, [r3, #0]
   1bdaa:	429a      	cmp	r2, r3
   1bdac:	d007      	beq.n	1bdbe <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   1bdae:	4b54      	ldr	r3, [pc, #336]	; (1bf00 <prvTraceGetDTS+0x1b4>)
   1bdb0:	681c      	ldr	r4, [r3, #0]
   1bdb2:	2000      	movs	r0, #0
   1bdb4:	4b56      	ldr	r3, [pc, #344]	; (1bf10 <prvTraceGetDTS+0x1c4>)
   1bdb6:	4798      	blx	r3
   1bdb8:	0003      	movs	r3, r0
   1bdba:	089b      	lsrs	r3, r3, #2
   1bdbc:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   1bdbe:	230c      	movs	r3, #12
   1bdc0:	18fb      	adds	r3, r7, r3
   1bdc2:	0018      	movs	r0, r3
   1bdc4:	4b53      	ldr	r3, [pc, #332]	; (1bf14 <prvTraceGetDTS+0x1c8>)
   1bdc6:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   1bdc8:	68fa      	ldr	r2, [r7, #12]
   1bdca:	4b53      	ldr	r3, [pc, #332]	; (1bf18 <prvTraceGetDTS+0x1cc>)
   1bdcc:	681b      	ldr	r3, [r3, #0]
   1bdce:	1ad3      	subs	r3, r2, r3
   1bdd0:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   1bdd2:	68fa      	ldr	r2, [r7, #12]
   1bdd4:	4b50      	ldr	r3, [pc, #320]	; (1bf18 <prvTraceGetDTS+0x1cc>)
   1bdd6:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   1bdd8:	4b49      	ldr	r3, [pc, #292]	; (1bf00 <prvTraceGetDTS+0x1b4>)
   1bdda:	681b      	ldr	r3, [r3, #0]
   1bddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bdde:	2b00      	cmp	r3, #0
   1bde0:	d044      	beq.n	1be6c <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   1bde2:	4b47      	ldr	r3, [pc, #284]	; (1bf00 <prvTraceGetDTS+0x1b4>)
   1bde4:	681b      	ldr	r3, [r3, #0]
   1bde6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1bde8:	693b      	ldr	r3, [r7, #16]
   1bdea:	429a      	cmp	r2, r3
   1bdec:	d21e      	bcs.n	1be2c <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   1bdee:	4b44      	ldr	r3, [pc, #272]	; (1bf00 <prvTraceGetDTS+0x1b4>)
   1bdf0:	681c      	ldr	r4, [r3, #0]
   1bdf2:	4b43      	ldr	r3, [pc, #268]	; (1bf00 <prvTraceGetDTS+0x1b4>)
   1bdf4:	681b      	ldr	r3, [r3, #0]
   1bdf6:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1bdf8:	4b41      	ldr	r3, [pc, #260]	; (1bf00 <prvTraceGetDTS+0x1b4>)
   1bdfa:	681b      	ldr	r3, [r3, #0]
   1bdfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1bdfe:	4b47      	ldr	r3, [pc, #284]	; (1bf1c <prvTraceGetDTS+0x1d0>)
   1be00:	0011      	movs	r1, r2
   1be02:	6938      	ldr	r0, [r7, #16]
   1be04:	4798      	blx	r3
   1be06:	0003      	movs	r3, r0
   1be08:	18eb      	adds	r3, r5, r3
   1be0a:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   1be0c:	4b3c      	ldr	r3, [pc, #240]	; (1bf00 <prvTraceGetDTS+0x1b4>)
   1be0e:	681c      	ldr	r4, [r3, #0]
   1be10:	4b3b      	ldr	r3, [pc, #236]	; (1bf00 <prvTraceGetDTS+0x1b4>)
   1be12:	681b      	ldr	r3, [r3, #0]
   1be14:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1be16:	4b3a      	ldr	r3, [pc, #232]	; (1bf00 <prvTraceGetDTS+0x1b4>)
   1be18:	681b      	ldr	r3, [r3, #0]
   1be1a:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1be1c:	693a      	ldr	r2, [r7, #16]
   1be1e:	4b40      	ldr	r3, [pc, #256]	; (1bf20 <prvTraceGetDTS+0x1d4>)
   1be20:	0010      	movs	r0, r2
   1be22:	4798      	blx	r3
   1be24:	000b      	movs	r3, r1
   1be26:	18eb      	adds	r3, r5, r3
   1be28:	62a3      	str	r3, [r4, #40]	; 0x28
   1be2a:	e007      	b.n	1be3c <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   1be2c:	4b34      	ldr	r3, [pc, #208]	; (1bf00 <prvTraceGetDTS+0x1b4>)
   1be2e:	681b      	ldr	r3, [r3, #0]
   1be30:	4a33      	ldr	r2, [pc, #204]	; (1bf00 <prvTraceGetDTS+0x1b4>)
   1be32:	6812      	ldr	r2, [r2, #0]
   1be34:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1be36:	693a      	ldr	r2, [r7, #16]
   1be38:	188a      	adds	r2, r1, r2
   1be3a:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   1be3c:	4b30      	ldr	r3, [pc, #192]	; (1bf00 <prvTraceGetDTS+0x1b4>)
   1be3e:	681b      	ldr	r3, [r3, #0]
   1be40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1be42:	4b2f      	ldr	r3, [pc, #188]	; (1bf00 <prvTraceGetDTS+0x1b4>)
   1be44:	681b      	ldr	r3, [r3, #0]
   1be46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1be48:	429a      	cmp	r2, r3
   1be4a:	d313      	bcc.n	1be74 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   1be4c:	4b2c      	ldr	r3, [pc, #176]	; (1bf00 <prvTraceGetDTS+0x1b4>)
   1be4e:	681b      	ldr	r3, [r3, #0]
   1be50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1be52:	3201      	adds	r2, #1
   1be54:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   1be56:	4b2a      	ldr	r3, [pc, #168]	; (1bf00 <prvTraceGetDTS+0x1b4>)
   1be58:	681b      	ldr	r3, [r3, #0]
   1be5a:	4a29      	ldr	r2, [pc, #164]	; (1bf00 <prvTraceGetDTS+0x1b4>)
   1be5c:	6812      	ldr	r2, [r2, #0]
   1be5e:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1be60:	4a27      	ldr	r2, [pc, #156]	; (1bf00 <prvTraceGetDTS+0x1b4>)
   1be62:	6812      	ldr	r2, [r2, #0]
   1be64:	6a52      	ldr	r2, [r2, #36]	; 0x24
   1be66:	1a8a      	subs	r2, r1, r2
   1be68:	629a      	str	r2, [r3, #40]	; 0x28
   1be6a:	e003      	b.n	1be74 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   1be6c:	4b24      	ldr	r3, [pc, #144]	; (1bf00 <prvTraceGetDTS+0x1b4>)
   1be6e:	681b      	ldr	r3, [r3, #0]
   1be70:	68fa      	ldr	r2, [r7, #12]
   1be72:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   1be74:	1dbb      	adds	r3, r7, #6
   1be76:	881a      	ldrh	r2, [r3, #0]
   1be78:	693b      	ldr	r3, [r7, #16]
   1be7a:	429a      	cmp	r2, r3
   1be7c:	d22f      	bcs.n	1bede <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   1be7e:	4b29      	ldr	r3, [pc, #164]	; (1bf24 <prvTraceGetDTS+0x1d8>)
   1be80:	4798      	blx	r3
   1be82:	0003      	movs	r3, r0
   1be84:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   1be86:	697b      	ldr	r3, [r7, #20]
   1be88:	2b00      	cmp	r3, #0
   1be8a:	d028      	beq.n	1bede <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   1be8c:	1dbb      	adds	r3, r7, #6
   1be8e:	881b      	ldrh	r3, [r3, #0]
   1be90:	4a18      	ldr	r2, [pc, #96]	; (1bef4 <prvTraceGetDTS+0x1a8>)
   1be92:	4293      	cmp	r3, r2
   1be94:	d10b      	bne.n	1beae <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   1be96:	697b      	ldr	r3, [r7, #20]
   1be98:	22a9      	movs	r2, #169	; 0xa9
   1be9a:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   1be9c:	693b      	ldr	r3, [r7, #16]
   1be9e:	0c1b      	lsrs	r3, r3, #16
   1bea0:	b29a      	uxth	r2, r3
   1bea2:	697b      	ldr	r3, [r7, #20]
   1bea4:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   1bea6:	697b      	ldr	r3, [r7, #20]
   1bea8:	2200      	movs	r2, #0
   1beaa:	705a      	strb	r2, [r3, #1]
   1beac:	e015      	b.n	1beda <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   1beae:	1dbb      	adds	r3, r7, #6
   1beb0:	881b      	ldrh	r3, [r3, #0]
   1beb2:	2bff      	cmp	r3, #255	; 0xff
   1beb4:	d10d      	bne.n	1bed2 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   1beb6:	697b      	ldr	r3, [r7, #20]
   1beb8:	22a8      	movs	r2, #168	; 0xa8
   1beba:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   1bebc:	693b      	ldr	r3, [r7, #16]
   1bebe:	0a1b      	lsrs	r3, r3, #8
   1bec0:	b29a      	uxth	r2, r3
   1bec2:	697b      	ldr	r3, [r7, #20]
   1bec4:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   1bec6:	693b      	ldr	r3, [r7, #16]
   1bec8:	0e1b      	lsrs	r3, r3, #24
   1beca:	b2da      	uxtb	r2, r3
   1becc:	697b      	ldr	r3, [r7, #20]
   1bece:	705a      	strb	r2, [r3, #1]
   1bed0:	e003      	b.n	1beda <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   1bed2:	4b15      	ldr	r3, [pc, #84]	; (1bf28 <prvTraceGetDTS+0x1dc>)
   1bed4:	0018      	movs	r0, r3
   1bed6:	4b09      	ldr	r3, [pc, #36]	; (1befc <prvTraceGetDTS+0x1b0>)
   1bed8:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   1beda:	4b14      	ldr	r3, [pc, #80]	; (1bf2c <prvTraceGetDTS+0x1e0>)
   1bedc:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   1bede:	693b      	ldr	r3, [r7, #16]
   1bee0:	b29b      	uxth	r3, r3
   1bee2:	1dba      	adds	r2, r7, #6
   1bee4:	8812      	ldrh	r2, [r2, #0]
   1bee6:	4013      	ands	r3, r2
   1bee8:	b29b      	uxth	r3, r3
}
   1beea:	0018      	movs	r0, r3
   1beec:	46bd      	mov	sp, r7
   1beee:	b006      	add	sp, #24
   1bef0:	bdb0      	pop	{r4, r5, r7, pc}
   1bef2:	46c0      	nop			; (mov r8, r8)
   1bef4:	0000ffff 	.word	0x0000ffff
   1bef8:	0003a5a0 	.word	0x0003a5a0
   1befc:	0001bb39 	.word	0x0001bb39
   1bf00:	20000a44 	.word	0x20000a44
   1bf04:	200009a0 	.word	0x200009a0
   1bf08:	e000e018 	.word	0xe000e018
   1bf0c:	20005228 	.word	0x20005228
   1bf10:	0002bb65 	.word	0x0002bb65
   1bf14:	0001bf31 	.word	0x0001bf31
   1bf18:	20000a50 	.word	0x20000a50
   1bf1c:	00034759 	.word	0x00034759
   1bf20:	00034865 	.word	0x00034865
   1bf24:	0001b6f1 	.word	0x0001b6f1
   1bf28:	0003a5e0 	.word	0x0003a5e0
   1bf2c:	0001bcf5 	.word	0x0001bcf5

0001bf30 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   1bf30:	b580      	push	{r7, lr}
   1bf32:	b084      	sub	sp, #16
   1bf34:	af00      	add	r7, sp, #0
   1bf36:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   1bf38:	2300      	movs	r3, #0
   1bf3a:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   1bf3c:	2300      	movs	r3, #0
   1bf3e:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   1bf40:	4b2d      	ldr	r3, [pc, #180]	; (1bff8 <prvTracePortGetTimeStamp+0xc8>)
   1bf42:	681b      	ldr	r3, [r3, #0]
   1bf44:	2b01      	cmp	r3, #1
   1bf46:	d107      	bne.n	1bf58 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   1bf48:	687b      	ldr	r3, [r7, #4]
   1bf4a:	2b00      	cmp	r3, #0
   1bf4c:	d04f      	beq.n	1bfee <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   1bf4e:	4b2b      	ldr	r3, [pc, #172]	; (1bffc <prvTracePortGetTimeStamp+0xcc>)
   1bf50:	681a      	ldr	r2, [r3, #0]
   1bf52:	687b      	ldr	r3, [r7, #4]
   1bf54:	601a      	str	r2, [r3, #0]
		return;
   1bf56:	e04a      	b.n	1bfee <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   1bf58:	4b29      	ldr	r3, [pc, #164]	; (1c000 <prvTracePortGetTimeStamp+0xd0>)
   1bf5a:	681a      	ldr	r2, [r3, #0]
   1bf5c:	4b29      	ldr	r3, [pc, #164]	; (1c004 <prvTracePortGetTimeStamp+0xd4>)
   1bf5e:	681b      	ldr	r3, [r3, #0]
   1bf60:	1ad3      	subs	r3, r2, r3
   1bf62:	3301      	adds	r3, #1
   1bf64:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   1bf66:	4b28      	ldr	r3, [pc, #160]	; (1c008 <prvTracePortGetTimeStamp+0xd8>)
   1bf68:	681a      	ldr	r2, [r3, #0]
   1bf6a:	4b28      	ldr	r3, [pc, #160]	; (1c00c <prvTracePortGetTimeStamp+0xdc>)
   1bf6c:	681b      	ldr	r3, [r3, #0]
   1bf6e:	1ad3      	subs	r3, r2, r3
   1bf70:	3b01      	subs	r3, #1
   1bf72:	2b00      	cmp	r3, #0
   1bf74:	db03      	blt.n	1bf7e <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   1bf76:	4b24      	ldr	r3, [pc, #144]	; (1c008 <prvTracePortGetTimeStamp+0xd8>)
   1bf78:	681b      	ldr	r3, [r3, #0]
   1bf7a:	60fb      	str	r3, [r7, #12]
   1bf7c:	e002      	b.n	1bf84 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   1bf7e:	4b23      	ldr	r3, [pc, #140]	; (1c00c <prvTracePortGetTimeStamp+0xdc>)
   1bf80:	681b      	ldr	r3, [r3, #0]
   1bf82:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   1bf84:	4b20      	ldr	r3, [pc, #128]	; (1c008 <prvTracePortGetTimeStamp+0xd8>)
   1bf86:	681b      	ldr	r3, [r3, #0]
   1bf88:	68fa      	ldr	r2, [r7, #12]
   1bf8a:	429a      	cmp	r2, r3
   1bf8c:	d107      	bne.n	1bf9e <prvTracePortGetTimeStamp+0x6e>
   1bf8e:	4b20      	ldr	r3, [pc, #128]	; (1c010 <prvTracePortGetTimeStamp+0xe0>)
   1bf90:	681b      	ldr	r3, [r3, #0]
   1bf92:	68ba      	ldr	r2, [r7, #8]
   1bf94:	429a      	cmp	r2, r3
   1bf96:	d202      	bcs.n	1bf9e <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   1bf98:	68fb      	ldr	r3, [r7, #12]
   1bf9a:	3301      	adds	r3, #1
   1bf9c:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   1bf9e:	687b      	ldr	r3, [r7, #4]
   1bfa0:	2b00      	cmp	r3, #0
   1bfa2:	d016      	beq.n	1bfd2 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   1bfa4:	4b16      	ldr	r3, [pc, #88]	; (1c000 <prvTracePortGetTimeStamp+0xd0>)
   1bfa6:	681b      	ldr	r3, [r3, #0]
   1bfa8:	3301      	adds	r3, #1
   1bfaa:	089b      	lsrs	r3, r3, #2
   1bfac:	68fa      	ldr	r2, [r7, #12]
   1bfae:	435a      	muls	r2, r3
   1bfb0:	4b12      	ldr	r3, [pc, #72]	; (1bffc <prvTracePortGetTimeStamp+0xcc>)
   1bfb2:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   1bfb4:	4b12      	ldr	r3, [pc, #72]	; (1c000 <prvTracePortGetTimeStamp+0xd0>)
   1bfb6:	681b      	ldr	r3, [r3, #0]
   1bfb8:	3301      	adds	r3, #1
   1bfba:	2203      	movs	r2, #3
   1bfbc:	4013      	ands	r3, r2
   1bfbe:	68fa      	ldr	r2, [r7, #12]
   1bfc0:	435a      	muls	r2, r3
   1bfc2:	68bb      	ldr	r3, [r7, #8]
   1bfc4:	18d3      	adds	r3, r2, r3
   1bfc6:	089a      	lsrs	r2, r3, #2
   1bfc8:	4b0c      	ldr	r3, [pc, #48]	; (1bffc <prvTracePortGetTimeStamp+0xcc>)
   1bfca:	681b      	ldr	r3, [r3, #0]
   1bfcc:	18d2      	adds	r2, r2, r3
   1bfce:	4b0b      	ldr	r3, [pc, #44]	; (1bffc <prvTracePortGetTimeStamp+0xcc>)
   1bfd0:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   1bfd2:	4b0d      	ldr	r3, [pc, #52]	; (1c008 <prvTracePortGetTimeStamp+0xd8>)
   1bfd4:	68fa      	ldr	r2, [r7, #12]
   1bfd6:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   1bfd8:	687b      	ldr	r3, [r7, #4]
   1bfda:	2b00      	cmp	r3, #0
   1bfdc:	d003      	beq.n	1bfe6 <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   1bfde:	4b07      	ldr	r3, [pc, #28]	; (1bffc <prvTracePortGetTimeStamp+0xcc>)
   1bfe0:	681a      	ldr	r2, [r3, #0]
   1bfe2:	687b      	ldr	r3, [r7, #4]
   1bfe4:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1bfe6:	4b0a      	ldr	r3, [pc, #40]	; (1c010 <prvTracePortGetTimeStamp+0xe0>)
   1bfe8:	68ba      	ldr	r2, [r7, #8]
   1bfea:	601a      	str	r2, [r3, #0]
   1bfec:	e000      	b.n	1bff0 <prvTracePortGetTimeStamp+0xc0>
		return;
   1bfee:	46c0      	nop			; (mov r8, r8)
}
   1bff0:	46bd      	mov	sp, r7
   1bff2:	b004      	add	sp, #16
   1bff4:	bd80      	pop	{r7, pc}
   1bff6:	46c0      	nop			; (mov r8, r8)
   1bff8:	20000990 	.word	0x20000990
   1bffc:	20000994 	.word	0x20000994
   1c000:	e000e014 	.word	0xe000e014
   1c004:	e000e018 	.word	0xe000e018
   1c008:	20000a54 	.word	0x20000a54
   1c00c:	2000098c 	.word	0x2000098c
   1c010:	20000a58 	.word	0x20000a58

0001c014 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1c014:	b580      	push	{r7, lr}
   1c016:	b082      	sub	sp, #8
   1c018:	af00      	add	r7, sp, #0
   1c01a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1c01c:	687b      	ldr	r3, [r7, #4]
   1c01e:	3308      	adds	r3, #8
   1c020:	001a      	movs	r2, r3
   1c022:	687b      	ldr	r3, [r7, #4]
   1c024:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1c026:	687b      	ldr	r3, [r7, #4]
   1c028:	2201      	movs	r2, #1
   1c02a:	4252      	negs	r2, r2
   1c02c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1c02e:	687b      	ldr	r3, [r7, #4]
   1c030:	3308      	adds	r3, #8
   1c032:	001a      	movs	r2, r3
   1c034:	687b      	ldr	r3, [r7, #4]
   1c036:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1c038:	687b      	ldr	r3, [r7, #4]
   1c03a:	3308      	adds	r3, #8
   1c03c:	001a      	movs	r2, r3
   1c03e:	687b      	ldr	r3, [r7, #4]
   1c040:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1c042:	687b      	ldr	r3, [r7, #4]
   1c044:	2200      	movs	r2, #0
   1c046:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1c048:	46c0      	nop			; (mov r8, r8)
   1c04a:	46bd      	mov	sp, r7
   1c04c:	b002      	add	sp, #8
   1c04e:	bd80      	pop	{r7, pc}

0001c050 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1c050:	b580      	push	{r7, lr}
   1c052:	b082      	sub	sp, #8
   1c054:	af00      	add	r7, sp, #0
   1c056:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1c058:	687b      	ldr	r3, [r7, #4]
   1c05a:	2200      	movs	r2, #0
   1c05c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1c05e:	46c0      	nop			; (mov r8, r8)
   1c060:	46bd      	mov	sp, r7
   1c062:	b002      	add	sp, #8
   1c064:	bd80      	pop	{r7, pc}

0001c066 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1c066:	b580      	push	{r7, lr}
   1c068:	b084      	sub	sp, #16
   1c06a:	af00      	add	r7, sp, #0
   1c06c:	6078      	str	r0, [r7, #4]
   1c06e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1c070:	687b      	ldr	r3, [r7, #4]
   1c072:	685b      	ldr	r3, [r3, #4]
   1c074:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1c076:	683b      	ldr	r3, [r7, #0]
   1c078:	68fa      	ldr	r2, [r7, #12]
   1c07a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1c07c:	68fb      	ldr	r3, [r7, #12]
   1c07e:	689a      	ldr	r2, [r3, #8]
   1c080:	683b      	ldr	r3, [r7, #0]
   1c082:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1c084:	68fb      	ldr	r3, [r7, #12]
   1c086:	689b      	ldr	r3, [r3, #8]
   1c088:	683a      	ldr	r2, [r7, #0]
   1c08a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1c08c:	68fb      	ldr	r3, [r7, #12]
   1c08e:	683a      	ldr	r2, [r7, #0]
   1c090:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1c092:	683b      	ldr	r3, [r7, #0]
   1c094:	687a      	ldr	r2, [r7, #4]
   1c096:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1c098:	687b      	ldr	r3, [r7, #4]
   1c09a:	681b      	ldr	r3, [r3, #0]
   1c09c:	1c5a      	adds	r2, r3, #1
   1c09e:	687b      	ldr	r3, [r7, #4]
   1c0a0:	601a      	str	r2, [r3, #0]
}
   1c0a2:	46c0      	nop			; (mov r8, r8)
   1c0a4:	46bd      	mov	sp, r7
   1c0a6:	b004      	add	sp, #16
   1c0a8:	bd80      	pop	{r7, pc}

0001c0aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1c0aa:	b580      	push	{r7, lr}
   1c0ac:	b084      	sub	sp, #16
   1c0ae:	af00      	add	r7, sp, #0
   1c0b0:	6078      	str	r0, [r7, #4]
   1c0b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1c0b4:	683b      	ldr	r3, [r7, #0]
   1c0b6:	681b      	ldr	r3, [r3, #0]
   1c0b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1c0ba:	68bb      	ldr	r3, [r7, #8]
   1c0bc:	3301      	adds	r3, #1
   1c0be:	d103      	bne.n	1c0c8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1c0c0:	687b      	ldr	r3, [r7, #4]
   1c0c2:	691b      	ldr	r3, [r3, #16]
   1c0c4:	60fb      	str	r3, [r7, #12]
   1c0c6:	e00c      	b.n	1c0e2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1c0c8:	687b      	ldr	r3, [r7, #4]
   1c0ca:	3308      	adds	r3, #8
   1c0cc:	60fb      	str	r3, [r7, #12]
   1c0ce:	e002      	b.n	1c0d6 <vListInsert+0x2c>
   1c0d0:	68fb      	ldr	r3, [r7, #12]
   1c0d2:	685b      	ldr	r3, [r3, #4]
   1c0d4:	60fb      	str	r3, [r7, #12]
   1c0d6:	68fb      	ldr	r3, [r7, #12]
   1c0d8:	685b      	ldr	r3, [r3, #4]
   1c0da:	681a      	ldr	r2, [r3, #0]
   1c0dc:	68bb      	ldr	r3, [r7, #8]
   1c0de:	429a      	cmp	r2, r3
   1c0e0:	d9f6      	bls.n	1c0d0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1c0e2:	68fb      	ldr	r3, [r7, #12]
   1c0e4:	685a      	ldr	r2, [r3, #4]
   1c0e6:	683b      	ldr	r3, [r7, #0]
   1c0e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1c0ea:	683b      	ldr	r3, [r7, #0]
   1c0ec:	685b      	ldr	r3, [r3, #4]
   1c0ee:	683a      	ldr	r2, [r7, #0]
   1c0f0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1c0f2:	683b      	ldr	r3, [r7, #0]
   1c0f4:	68fa      	ldr	r2, [r7, #12]
   1c0f6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1c0f8:	68fb      	ldr	r3, [r7, #12]
   1c0fa:	683a      	ldr	r2, [r7, #0]
   1c0fc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1c0fe:	683b      	ldr	r3, [r7, #0]
   1c100:	687a      	ldr	r2, [r7, #4]
   1c102:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1c104:	687b      	ldr	r3, [r7, #4]
   1c106:	681b      	ldr	r3, [r3, #0]
   1c108:	1c5a      	adds	r2, r3, #1
   1c10a:	687b      	ldr	r3, [r7, #4]
   1c10c:	601a      	str	r2, [r3, #0]
}
   1c10e:	46c0      	nop			; (mov r8, r8)
   1c110:	46bd      	mov	sp, r7
   1c112:	b004      	add	sp, #16
   1c114:	bd80      	pop	{r7, pc}

0001c116 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1c116:	b580      	push	{r7, lr}
   1c118:	b084      	sub	sp, #16
   1c11a:	af00      	add	r7, sp, #0
   1c11c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1c11e:	687b      	ldr	r3, [r7, #4]
   1c120:	691b      	ldr	r3, [r3, #16]
   1c122:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1c124:	687b      	ldr	r3, [r7, #4]
   1c126:	685b      	ldr	r3, [r3, #4]
   1c128:	687a      	ldr	r2, [r7, #4]
   1c12a:	6892      	ldr	r2, [r2, #8]
   1c12c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1c12e:	687b      	ldr	r3, [r7, #4]
   1c130:	689b      	ldr	r3, [r3, #8]
   1c132:	687a      	ldr	r2, [r7, #4]
   1c134:	6852      	ldr	r2, [r2, #4]
   1c136:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1c138:	68fb      	ldr	r3, [r7, #12]
   1c13a:	685a      	ldr	r2, [r3, #4]
   1c13c:	687b      	ldr	r3, [r7, #4]
   1c13e:	429a      	cmp	r2, r3
   1c140:	d103      	bne.n	1c14a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1c142:	687b      	ldr	r3, [r7, #4]
   1c144:	689a      	ldr	r2, [r3, #8]
   1c146:	68fb      	ldr	r3, [r7, #12]
   1c148:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1c14a:	687b      	ldr	r3, [r7, #4]
   1c14c:	2200      	movs	r2, #0
   1c14e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1c150:	68fb      	ldr	r3, [r7, #12]
   1c152:	681b      	ldr	r3, [r3, #0]
   1c154:	1e5a      	subs	r2, r3, #1
   1c156:	68fb      	ldr	r3, [r7, #12]
   1c158:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1c15a:	68fb      	ldr	r3, [r7, #12]
   1c15c:	681b      	ldr	r3, [r3, #0]
}
   1c15e:	0018      	movs	r0, r3
   1c160:	46bd      	mov	sp, r7
   1c162:	b004      	add	sp, #16
   1c164:	bd80      	pop	{r7, pc}
	...

0001c168 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1c168:	b580      	push	{r7, lr}
   1c16a:	b084      	sub	sp, #16
   1c16c:	af00      	add	r7, sp, #0
   1c16e:	60f8      	str	r0, [r7, #12]
   1c170:	60b9      	str	r1, [r7, #8]
   1c172:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1c174:	68fb      	ldr	r3, [r7, #12]
   1c176:	3b04      	subs	r3, #4
   1c178:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1c17a:	68fb      	ldr	r3, [r7, #12]
   1c17c:	2280      	movs	r2, #128	; 0x80
   1c17e:	0452      	lsls	r2, r2, #17
   1c180:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1c182:	68fb      	ldr	r3, [r7, #12]
   1c184:	3b04      	subs	r3, #4
   1c186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1c188:	68ba      	ldr	r2, [r7, #8]
   1c18a:	68fb      	ldr	r3, [r7, #12]
   1c18c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1c18e:	68fb      	ldr	r3, [r7, #12]
   1c190:	3b04      	subs	r3, #4
   1c192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1c194:	4a08      	ldr	r2, [pc, #32]	; (1c1b8 <pxPortInitialiseStack+0x50>)
   1c196:	68fb      	ldr	r3, [r7, #12]
   1c198:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1c19a:	68fb      	ldr	r3, [r7, #12]
   1c19c:	3b14      	subs	r3, #20
   1c19e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1c1a0:	687a      	ldr	r2, [r7, #4]
   1c1a2:	68fb      	ldr	r3, [r7, #12]
   1c1a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1c1a6:	68fb      	ldr	r3, [r7, #12]
   1c1a8:	3b20      	subs	r3, #32
   1c1aa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1c1ac:	68fb      	ldr	r3, [r7, #12]
}
   1c1ae:	0018      	movs	r0, r3
   1c1b0:	46bd      	mov	sp, r7
   1c1b2:	b004      	add	sp, #16
   1c1b4:	bd80      	pop	{r7, pc}
   1c1b6:	46c0      	nop			; (mov r8, r8)
   1c1b8:	0001c1bd 	.word	0x0001c1bd

0001c1bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1c1bc:	b580      	push	{r7, lr}
   1c1be:	b082      	sub	sp, #8
   1c1c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1c1c2:	2300      	movs	r3, #0
   1c1c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1c1c6:	4b07      	ldr	r3, [pc, #28]	; (1c1e4 <prvTaskExitError+0x28>)
   1c1c8:	681b      	ldr	r3, [r3, #0]
   1c1ca:	3301      	adds	r3, #1
   1c1cc:	d001      	beq.n	1c1d2 <prvTaskExitError+0x16>
   1c1ce:	b672      	cpsid	i
   1c1d0:	e7fe      	b.n	1c1d0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1c1d2:	b672      	cpsid	i
	while( ulDummy == 0 )
   1c1d4:	46c0      	nop			; (mov r8, r8)
   1c1d6:	687b      	ldr	r3, [r7, #4]
   1c1d8:	2b00      	cmp	r3, #0
   1c1da:	d0fc      	beq.n	1c1d6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1c1dc:	46c0      	nop			; (mov r8, r8)
   1c1de:	46bd      	mov	sp, r7
   1c1e0:	b002      	add	sp, #8
   1c1e2:	bd80      	pop	{r7, pc}
   1c1e4:	20000108 	.word	0x20000108

0001c1e8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1c1e8:	b580      	push	{r7, lr}
   1c1ea:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1c1ec:	46c0      	nop			; (mov r8, r8)
   1c1ee:	46bd      	mov	sp, r7
   1c1f0:	bd80      	pop	{r7, pc}
	...

0001c200 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1c200:	4a0b      	ldr	r2, [pc, #44]	; (1c230 <pxCurrentTCBConst2>)
   1c202:	6813      	ldr	r3, [r2, #0]
   1c204:	6818      	ldr	r0, [r3, #0]
   1c206:	3020      	adds	r0, #32
   1c208:	f380 8809 	msr	PSP, r0
   1c20c:	2002      	movs	r0, #2
   1c20e:	f380 8814 	msr	CONTROL, r0
   1c212:	f3bf 8f6f 	isb	sy
   1c216:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1c218:	46ae      	mov	lr, r5
   1c21a:	bc08      	pop	{r3}
   1c21c:	bc04      	pop	{r2}
   1c21e:	b662      	cpsie	i
   1c220:	4718      	bx	r3
   1c222:	46c0      	nop			; (mov r8, r8)
   1c224:	46c0      	nop			; (mov r8, r8)
   1c226:	46c0      	nop			; (mov r8, r8)
   1c228:	46c0      	nop			; (mov r8, r8)
   1c22a:	46c0      	nop			; (mov r8, r8)
   1c22c:	46c0      	nop			; (mov r8, r8)
   1c22e:	46c0      	nop			; (mov r8, r8)

0001c230 <pxCurrentTCBConst2>:
   1c230:	20003d2c 	.word	0x20003d2c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1c234:	46c0      	nop			; (mov r8, r8)
   1c236:	46c0      	nop			; (mov r8, r8)

0001c238 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1c238:	b580      	push	{r7, lr}
   1c23a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1c23c:	4b0e      	ldr	r3, [pc, #56]	; (1c278 <xPortStartScheduler+0x40>)
   1c23e:	4a0e      	ldr	r2, [pc, #56]	; (1c278 <xPortStartScheduler+0x40>)
   1c240:	6812      	ldr	r2, [r2, #0]
   1c242:	21ff      	movs	r1, #255	; 0xff
   1c244:	0409      	lsls	r1, r1, #16
   1c246:	430a      	orrs	r2, r1
   1c248:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1c24a:	4b0b      	ldr	r3, [pc, #44]	; (1c278 <xPortStartScheduler+0x40>)
   1c24c:	4a0a      	ldr	r2, [pc, #40]	; (1c278 <xPortStartScheduler+0x40>)
   1c24e:	6812      	ldr	r2, [r2, #0]
   1c250:	21ff      	movs	r1, #255	; 0xff
   1c252:	0609      	lsls	r1, r1, #24
   1c254:	430a      	orrs	r2, r1
   1c256:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1c258:	4b08      	ldr	r3, [pc, #32]	; (1c27c <xPortStartScheduler+0x44>)
   1c25a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1c25c:	4b08      	ldr	r3, [pc, #32]	; (1c280 <xPortStartScheduler+0x48>)
   1c25e:	2200      	movs	r2, #0
   1c260:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1c262:	4b08      	ldr	r3, [pc, #32]	; (1c284 <xPortStartScheduler+0x4c>)
   1c264:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1c266:	4b08      	ldr	r3, [pc, #32]	; (1c288 <xPortStartScheduler+0x50>)
   1c268:	4798      	blx	r3
	prvTaskExitError();
   1c26a:	4b08      	ldr	r3, [pc, #32]	; (1c28c <xPortStartScheduler+0x54>)
   1c26c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1c26e:	2300      	movs	r3, #0
}
   1c270:	0018      	movs	r0, r3
   1c272:	46bd      	mov	sp, r7
   1c274:	bd80      	pop	{r7, pc}
   1c276:	46c0      	nop			; (mov r8, r8)
   1c278:	e000ed20 	.word	0xe000ed20
   1c27c:	0001c399 	.word	0x0001c399
   1c280:	20000108 	.word	0x20000108
   1c284:	0001c201 	.word	0x0001c201
   1c288:	0001e8f5 	.word	0x0001e8f5
   1c28c:	0001c1bd 	.word	0x0001c1bd

0001c290 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1c290:	b580      	push	{r7, lr}
   1c292:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1c294:	4b03      	ldr	r3, [pc, #12]	; (1c2a4 <vPortYield+0x14>)
   1c296:	2280      	movs	r2, #128	; 0x80
   1c298:	0552      	lsls	r2, r2, #21
   1c29a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1c29c:	46c0      	nop			; (mov r8, r8)
   1c29e:	46bd      	mov	sp, r7
   1c2a0:	bd80      	pop	{r7, pc}
   1c2a2:	46c0      	nop			; (mov r8, r8)
   1c2a4:	e000ed04 	.word	0xe000ed04

0001c2a8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1c2a8:	b580      	push	{r7, lr}
   1c2aa:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1c2ac:	b672      	cpsid	i
    uxCriticalNesting++;
   1c2ae:	4b06      	ldr	r3, [pc, #24]	; (1c2c8 <vPortEnterCritical+0x20>)
   1c2b0:	681b      	ldr	r3, [r3, #0]
   1c2b2:	1c5a      	adds	r2, r3, #1
   1c2b4:	4b04      	ldr	r3, [pc, #16]	; (1c2c8 <vPortEnterCritical+0x20>)
   1c2b6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1c2b8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1c2bc:	f3bf 8f6f 	isb	sy
}
   1c2c0:	46c0      	nop			; (mov r8, r8)
   1c2c2:	46bd      	mov	sp, r7
   1c2c4:	bd80      	pop	{r7, pc}
   1c2c6:	46c0      	nop			; (mov r8, r8)
   1c2c8:	20000108 	.word	0x20000108

0001c2cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1c2cc:	b580      	push	{r7, lr}
   1c2ce:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1c2d0:	4b09      	ldr	r3, [pc, #36]	; (1c2f8 <vPortExitCritical+0x2c>)
   1c2d2:	681b      	ldr	r3, [r3, #0]
   1c2d4:	2b00      	cmp	r3, #0
   1c2d6:	d101      	bne.n	1c2dc <vPortExitCritical+0x10>
   1c2d8:	b672      	cpsid	i
   1c2da:	e7fe      	b.n	1c2da <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1c2dc:	4b06      	ldr	r3, [pc, #24]	; (1c2f8 <vPortExitCritical+0x2c>)
   1c2de:	681b      	ldr	r3, [r3, #0]
   1c2e0:	1e5a      	subs	r2, r3, #1
   1c2e2:	4b05      	ldr	r3, [pc, #20]	; (1c2f8 <vPortExitCritical+0x2c>)
   1c2e4:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1c2e6:	4b04      	ldr	r3, [pc, #16]	; (1c2f8 <vPortExitCritical+0x2c>)
   1c2e8:	681b      	ldr	r3, [r3, #0]
   1c2ea:	2b00      	cmp	r3, #0
   1c2ec:	d100      	bne.n	1c2f0 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1c2ee:	b662      	cpsie	i
    }
}
   1c2f0:	46c0      	nop			; (mov r8, r8)
   1c2f2:	46bd      	mov	sp, r7
   1c2f4:	bd80      	pop	{r7, pc}
   1c2f6:	46c0      	nop			; (mov r8, r8)
   1c2f8:	20000108 	.word	0x20000108

0001c2fc <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1c2fc:	f3ef 8010 	mrs	r0, PRIMASK
   1c300:	b672      	cpsid	i
   1c302:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1c304:	46c0      	nop			; (mov r8, r8)
   1c306:	0018      	movs	r0, r3

0001c308 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1c308:	f380 8810 	msr	PRIMASK, r0
   1c30c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1c30e:	46c0      	nop			; (mov r8, r8)

0001c310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1c310:	f3ef 8009 	mrs	r0, PSP
   1c314:	4b0e      	ldr	r3, [pc, #56]	; (1c350 <pxCurrentTCBConst>)
   1c316:	681a      	ldr	r2, [r3, #0]
   1c318:	3820      	subs	r0, #32
   1c31a:	6010      	str	r0, [r2, #0]
   1c31c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1c31e:	4644      	mov	r4, r8
   1c320:	464d      	mov	r5, r9
   1c322:	4656      	mov	r6, sl
   1c324:	465f      	mov	r7, fp
   1c326:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1c328:	b508      	push	{r3, lr}
   1c32a:	b672      	cpsid	i
   1c32c:	f002 fae2 	bl	1e8f4 <vTaskSwitchContext>
   1c330:	b662      	cpsie	i
   1c332:	bc0c      	pop	{r2, r3}
   1c334:	6811      	ldr	r1, [r2, #0]
   1c336:	6808      	ldr	r0, [r1, #0]
   1c338:	3010      	adds	r0, #16
   1c33a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1c33c:	46a0      	mov	r8, r4
   1c33e:	46a9      	mov	r9, r5
   1c340:	46b2      	mov	sl, r6
   1c342:	46bb      	mov	fp, r7
   1c344:	f380 8809 	msr	PSP, r0
   1c348:	3820      	subs	r0, #32
   1c34a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1c34c:	4718      	bx	r3
   1c34e:	46c0      	nop			; (mov r8, r8)

0001c350 <pxCurrentTCBConst>:
   1c350:	20003d2c 	.word	0x20003d2c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1c354:	46c0      	nop			; (mov r8, r8)
   1c356:	46c0      	nop			; (mov r8, r8)

0001c358 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1c358:	b580      	push	{r7, lr}
   1c35a:	b082      	sub	sp, #8
   1c35c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1c35e:	4b0a      	ldr	r3, [pc, #40]	; (1c388 <SysTick_Handler+0x30>)
   1c360:	4798      	blx	r3
   1c362:	0003      	movs	r3, r0
   1c364:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1c366:	4b09      	ldr	r3, [pc, #36]	; (1c38c <SysTick_Handler+0x34>)
   1c368:	4798      	blx	r3
   1c36a:	1e03      	subs	r3, r0, #0
   1c36c:	d003      	beq.n	1c376 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1c36e:	4b08      	ldr	r3, [pc, #32]	; (1c390 <SysTick_Handler+0x38>)
   1c370:	2280      	movs	r2, #128	; 0x80
   1c372:	0552      	lsls	r2, r2, #21
   1c374:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1c376:	687b      	ldr	r3, [r7, #4]
   1c378:	0018      	movs	r0, r3
   1c37a:	4b06      	ldr	r3, [pc, #24]	; (1c394 <SysTick_Handler+0x3c>)
   1c37c:	4798      	blx	r3
}
   1c37e:	46c0      	nop			; (mov r8, r8)
   1c380:	46bd      	mov	sp, r7
   1c382:	b002      	add	sp, #8
   1c384:	bd80      	pop	{r7, pc}
   1c386:	46c0      	nop			; (mov r8, r8)
   1c388:	0001c2fd 	.word	0x0001c2fd
   1c38c:	0001e705 	.word	0x0001e705
   1c390:	e000ed04 	.word	0xe000ed04
   1c394:	0001c309 	.word	0x0001c309

0001c398 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1c398:	b5b0      	push	{r4, r5, r7, lr}
   1c39a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1c39c:	4b0b      	ldr	r3, [pc, #44]	; (1c3cc <prvSetupTimerInterrupt+0x34>)
   1c39e:	2200      	movs	r2, #0
   1c3a0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1c3a2:	4b0b      	ldr	r3, [pc, #44]	; (1c3d0 <prvSetupTimerInterrupt+0x38>)
   1c3a4:	2200      	movs	r2, #0
   1c3a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1c3a8:	4c0a      	ldr	r4, [pc, #40]	; (1c3d4 <prvSetupTimerInterrupt+0x3c>)
   1c3aa:	2000      	movs	r0, #0
   1c3ac:	4b0a      	ldr	r3, [pc, #40]	; (1c3d8 <prvSetupTimerInterrupt+0x40>)
   1c3ae:	4798      	blx	r3
   1c3b0:	4b0a      	ldr	r3, [pc, #40]	; (1c3dc <prvSetupTimerInterrupt+0x44>)
   1c3b2:	22fa      	movs	r2, #250	; 0xfa
   1c3b4:	0091      	lsls	r1, r2, #2
   1c3b6:	4798      	blx	r3
   1c3b8:	0003      	movs	r3, r0
   1c3ba:	3b01      	subs	r3, #1
   1c3bc:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1c3be:	4b03      	ldr	r3, [pc, #12]	; (1c3cc <prvSetupTimerInterrupt+0x34>)
   1c3c0:	2207      	movs	r2, #7
   1c3c2:	601a      	str	r2, [r3, #0]
}
   1c3c4:	46c0      	nop			; (mov r8, r8)
   1c3c6:	46bd      	mov	sp, r7
   1c3c8:	bdb0      	pop	{r4, r5, r7, pc}
   1c3ca:	46c0      	nop			; (mov r8, r8)
   1c3cc:	e000e010 	.word	0xe000e010
   1c3d0:	e000e018 	.word	0xe000e018
   1c3d4:	e000e014 	.word	0xe000e014
   1c3d8:	0002bb65 	.word	0x0002bb65
   1c3dc:	00034759 	.word	0x00034759

0001c3e0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1c3e0:	b580      	push	{r7, lr}
   1c3e2:	b084      	sub	sp, #16
   1c3e4:	af00      	add	r7, sp, #0
   1c3e6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   1c3e8:	2300      	movs	r3, #0
   1c3ea:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1c3ec:	687b      	ldr	r3, [r7, #4]
   1c3ee:	2207      	movs	r2, #7
   1c3f0:	4013      	ands	r3, r2
   1c3f2:	d004      	beq.n	1c3fe <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1c3f4:	687b      	ldr	r3, [r7, #4]
   1c3f6:	2207      	movs	r2, #7
   1c3f8:	4393      	bics	r3, r2
   1c3fa:	3308      	adds	r3, #8
   1c3fc:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1c3fe:	4b21      	ldr	r3, [pc, #132]	; (1c484 <pvPortMalloc+0xa4>)
   1c400:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   1c402:	4b21      	ldr	r3, [pc, #132]	; (1c488 <pvPortMalloc+0xa8>)
   1c404:	681b      	ldr	r3, [r3, #0]
   1c406:	2b00      	cmp	r3, #0
   1c408:	d105      	bne.n	1c416 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1c40a:	4b20      	ldr	r3, [pc, #128]	; (1c48c <pvPortMalloc+0xac>)
   1c40c:	2207      	movs	r2, #7
   1c40e:	4393      	bics	r3, r2
   1c410:	001a      	movs	r2, r3
   1c412:	4b1d      	ldr	r3, [pc, #116]	; (1c488 <pvPortMalloc+0xa8>)
   1c414:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1c416:	4b1e      	ldr	r3, [pc, #120]	; (1c490 <pvPortMalloc+0xb0>)
   1c418:	681a      	ldr	r2, [r3, #0]
   1c41a:	687b      	ldr	r3, [r7, #4]
   1c41c:	18d3      	adds	r3, r2, r3
   1c41e:	4a1d      	ldr	r2, [pc, #116]	; (1c494 <pvPortMalloc+0xb4>)
   1c420:	4293      	cmp	r3, r2
   1c422:	d813      	bhi.n	1c44c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   1c424:	4b1a      	ldr	r3, [pc, #104]	; (1c490 <pvPortMalloc+0xb0>)
   1c426:	681a      	ldr	r2, [r3, #0]
   1c428:	687b      	ldr	r3, [r7, #4]
   1c42a:	18d2      	adds	r2, r2, r3
   1c42c:	4b18      	ldr	r3, [pc, #96]	; (1c490 <pvPortMalloc+0xb0>)
   1c42e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1c430:	429a      	cmp	r2, r3
   1c432:	d90b      	bls.n	1c44c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1c434:	4b14      	ldr	r3, [pc, #80]	; (1c488 <pvPortMalloc+0xa8>)
   1c436:	681a      	ldr	r2, [r3, #0]
   1c438:	4b15      	ldr	r3, [pc, #84]	; (1c490 <pvPortMalloc+0xb0>)
   1c43a:	681b      	ldr	r3, [r3, #0]
   1c43c:	18d3      	adds	r3, r2, r3
   1c43e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   1c440:	4b13      	ldr	r3, [pc, #76]	; (1c490 <pvPortMalloc+0xb0>)
   1c442:	681a      	ldr	r2, [r3, #0]
   1c444:	687b      	ldr	r3, [r7, #4]
   1c446:	18d2      	adds	r2, r2, r3
   1c448:	4b11      	ldr	r3, [pc, #68]	; (1c490 <pvPortMalloc+0xb0>)
   1c44a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1c44c:	68fb      	ldr	r3, [r7, #12]
   1c44e:	2b00      	cmp	r3, #0
   1c450:	d006      	beq.n	1c460 <pvPortMalloc+0x80>
   1c452:	68fb      	ldr	r3, [r7, #12]
   1c454:	687a      	ldr	r2, [r7, #4]
   1c456:	0019      	movs	r1, r3
   1c458:	2094      	movs	r0, #148	; 0x94
   1c45a:	4b0f      	ldr	r3, [pc, #60]	; (1c498 <pvPortMalloc+0xb8>)
   1c45c:	4798      	blx	r3
   1c45e:	e005      	b.n	1c46c <pvPortMalloc+0x8c>
   1c460:	68fb      	ldr	r3, [r7, #12]
   1c462:	687a      	ldr	r2, [r7, #4]
   1c464:	0019      	movs	r1, r3
   1c466:	20e8      	movs	r0, #232	; 0xe8
   1c468:	4b0b      	ldr	r3, [pc, #44]	; (1c498 <pvPortMalloc+0xb8>)
   1c46a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1c46c:	4b0b      	ldr	r3, [pc, #44]	; (1c49c <pvPortMalloc+0xbc>)
   1c46e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1c470:	68fb      	ldr	r3, [r7, #12]
   1c472:	2b00      	cmp	r3, #0
   1c474:	d101      	bne.n	1c47a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1c476:	4b0a      	ldr	r3, [pc, #40]	; (1c4a0 <pvPortMalloc+0xc0>)
   1c478:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1c47a:	68fb      	ldr	r3, [r7, #12]
}
   1c47c:	0018      	movs	r0, r3
   1c47e:	46bd      	mov	sp, r7
   1c480:	b004      	add	sp, #16
   1c482:	bd80      	pop	{r7, pc}
   1c484:	0001e561 	.word	0x0001e561
   1c488:	20003d28 	.word	0x20003d28
   1c48c:	20000a64 	.word	0x20000a64
   1c490:	20003d24 	.word	0x20003d24
   1c494:	000032bf 	.word	0x000032bf
   1c498:	0001ab45 	.word	0x0001ab45
   1c49c:	0001e579 	.word	0x0001e579
   1c4a0:	00034729 	.word	0x00034729

0001c4a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1c4a4:	b580      	push	{r7, lr}
   1c4a6:	b082      	sub	sp, #8
   1c4a8:	af00      	add	r7, sp, #0
   1c4aa:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1c4ac:	687b      	ldr	r3, [r7, #4]
   1c4ae:	2b00      	cmp	r3, #0
   1c4b0:	d001      	beq.n	1c4b6 <vPortFree+0x12>
   1c4b2:	b672      	cpsid	i
   1c4b4:	e7fe      	b.n	1c4b4 <vPortFree+0x10>
}
   1c4b6:	46c0      	nop			; (mov r8, r8)
   1c4b8:	46bd      	mov	sp, r7
   1c4ba:	b002      	add	sp, #8
   1c4bc:	bd80      	pop	{r7, pc}
	...

0001c4c0 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1c4c0:	b580      	push	{r7, lr}
   1c4c2:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   1c4c4:	4b03      	ldr	r3, [pc, #12]	; (1c4d4 <xPortGetFreeHeapSize+0x14>)
   1c4c6:	681b      	ldr	r3, [r3, #0]
   1c4c8:	22cb      	movs	r2, #203	; 0xcb
   1c4ca:	0192      	lsls	r2, r2, #6
   1c4cc:	1ad3      	subs	r3, r2, r3
}
   1c4ce:	0018      	movs	r0, r3
   1c4d0:	46bd      	mov	sp, r7
   1c4d2:	bd80      	pop	{r7, pc}
   1c4d4:	20003d24 	.word	0x20003d24

0001c4d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1c4d8:	b580      	push	{r7, lr}
   1c4da:	b084      	sub	sp, #16
   1c4dc:	af00      	add	r7, sp, #0
   1c4de:	6078      	str	r0, [r7, #4]
   1c4e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1c4e2:	687b      	ldr	r3, [r7, #4]
   1c4e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1c4e6:	68fb      	ldr	r3, [r7, #12]
   1c4e8:	2b00      	cmp	r3, #0
   1c4ea:	d101      	bne.n	1c4f0 <xQueueGenericReset+0x18>
   1c4ec:	b672      	cpsid	i
   1c4ee:	e7fe      	b.n	1c4ee <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1c4f0:	4b23      	ldr	r3, [pc, #140]	; (1c580 <xQueueGenericReset+0xa8>)
   1c4f2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1c4f4:	68fb      	ldr	r3, [r7, #12]
   1c4f6:	681a      	ldr	r2, [r3, #0]
   1c4f8:	68fb      	ldr	r3, [r7, #12]
   1c4fa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1c4fc:	68fb      	ldr	r3, [r7, #12]
   1c4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c500:	434b      	muls	r3, r1
   1c502:	18d2      	adds	r2, r2, r3
   1c504:	68fb      	ldr	r3, [r7, #12]
   1c506:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1c508:	68fb      	ldr	r3, [r7, #12]
   1c50a:	2200      	movs	r2, #0
   1c50c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1c50e:	68fb      	ldr	r3, [r7, #12]
   1c510:	681a      	ldr	r2, [r3, #0]
   1c512:	68fb      	ldr	r3, [r7, #12]
   1c514:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1c516:	68fb      	ldr	r3, [r7, #12]
   1c518:	681a      	ldr	r2, [r3, #0]
   1c51a:	68fb      	ldr	r3, [r7, #12]
   1c51c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c51e:	1e59      	subs	r1, r3, #1
   1c520:	68fb      	ldr	r3, [r7, #12]
   1c522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c524:	434b      	muls	r3, r1
   1c526:	18d2      	adds	r2, r2, r3
   1c528:	68fb      	ldr	r3, [r7, #12]
   1c52a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1c52c:	68fb      	ldr	r3, [r7, #12]
   1c52e:	2244      	movs	r2, #68	; 0x44
   1c530:	21ff      	movs	r1, #255	; 0xff
   1c532:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1c534:	68fb      	ldr	r3, [r7, #12]
   1c536:	2245      	movs	r2, #69	; 0x45
   1c538:	21ff      	movs	r1, #255	; 0xff
   1c53a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1c53c:	683b      	ldr	r3, [r7, #0]
   1c53e:	2b00      	cmp	r3, #0
   1c540:	d10d      	bne.n	1c55e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c542:	68fb      	ldr	r3, [r7, #12]
   1c544:	691b      	ldr	r3, [r3, #16]
   1c546:	2b00      	cmp	r3, #0
   1c548:	d013      	beq.n	1c572 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c54a:	68fb      	ldr	r3, [r7, #12]
   1c54c:	3310      	adds	r3, #16
   1c54e:	0018      	movs	r0, r3
   1c550:	4b0c      	ldr	r3, [pc, #48]	; (1c584 <xQueueGenericReset+0xac>)
   1c552:	4798      	blx	r3
   1c554:	1e03      	subs	r3, r0, #0
   1c556:	d00c      	beq.n	1c572 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1c558:	4b0b      	ldr	r3, [pc, #44]	; (1c588 <xQueueGenericReset+0xb0>)
   1c55a:	4798      	blx	r3
   1c55c:	e009      	b.n	1c572 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1c55e:	68fb      	ldr	r3, [r7, #12]
   1c560:	3310      	adds	r3, #16
   1c562:	0018      	movs	r0, r3
   1c564:	4b09      	ldr	r3, [pc, #36]	; (1c58c <xQueueGenericReset+0xb4>)
   1c566:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1c568:	68fb      	ldr	r3, [r7, #12]
   1c56a:	3324      	adds	r3, #36	; 0x24
   1c56c:	0018      	movs	r0, r3
   1c56e:	4b07      	ldr	r3, [pc, #28]	; (1c58c <xQueueGenericReset+0xb4>)
   1c570:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1c572:	4b07      	ldr	r3, [pc, #28]	; (1c590 <xQueueGenericReset+0xb8>)
   1c574:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1c576:	2301      	movs	r3, #1
}
   1c578:	0018      	movs	r0, r3
   1c57a:	46bd      	mov	sp, r7
   1c57c:	b004      	add	sp, #16
   1c57e:	bd80      	pop	{r7, pc}
   1c580:	0001c2a9 	.word	0x0001c2a9
   1c584:	0001eb39 	.word	0x0001eb39
   1c588:	0001c291 	.word	0x0001c291
   1c58c:	0001c015 	.word	0x0001c015
   1c590:	0001c2cd 	.word	0x0001c2cd

0001c594 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1c594:	b590      	push	{r4, r7, lr}
   1c596:	b08b      	sub	sp, #44	; 0x2c
   1c598:	af02      	add	r7, sp, #8
   1c59a:	60f8      	str	r0, [r7, #12]
   1c59c:	60b9      	str	r1, [r7, #8]
   1c59e:	1dfb      	adds	r3, r7, #7
   1c5a0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1c5a2:	68fb      	ldr	r3, [r7, #12]
   1c5a4:	2b00      	cmp	r3, #0
   1c5a6:	d101      	bne.n	1c5ac <xQueueGenericCreate+0x18>
   1c5a8:	b672      	cpsid	i
   1c5aa:	e7fe      	b.n	1c5aa <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1c5ac:	68bb      	ldr	r3, [r7, #8]
   1c5ae:	2b00      	cmp	r3, #0
   1c5b0:	d102      	bne.n	1c5b8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1c5b2:	2300      	movs	r3, #0
   1c5b4:	61fb      	str	r3, [r7, #28]
   1c5b6:	e003      	b.n	1c5c0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c5b8:	68fb      	ldr	r3, [r7, #12]
   1c5ba:	68ba      	ldr	r2, [r7, #8]
   1c5bc:	4353      	muls	r3, r2
   1c5be:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1c5c0:	69fb      	ldr	r3, [r7, #28]
   1c5c2:	3354      	adds	r3, #84	; 0x54
   1c5c4:	0018      	movs	r0, r3
   1c5c6:	4b19      	ldr	r3, [pc, #100]	; (1c62c <xQueueGenericCreate+0x98>)
   1c5c8:	4798      	blx	r3
   1c5ca:	0003      	movs	r3, r0
   1c5cc:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1c5ce:	69bb      	ldr	r3, [r7, #24]
   1c5d0:	2b00      	cmp	r3, #0
   1c5d2:	d00d      	beq.n	1c5f0 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1c5d4:	69bb      	ldr	r3, [r7, #24]
   1c5d6:	3354      	adds	r3, #84	; 0x54
   1c5d8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1c5da:	1dfb      	adds	r3, r7, #7
   1c5dc:	781c      	ldrb	r4, [r3, #0]
   1c5de:	697a      	ldr	r2, [r7, #20]
   1c5e0:	68b9      	ldr	r1, [r7, #8]
   1c5e2:	68f8      	ldr	r0, [r7, #12]
   1c5e4:	69bb      	ldr	r3, [r7, #24]
   1c5e6:	9300      	str	r3, [sp, #0]
   1c5e8:	0023      	movs	r3, r4
   1c5ea:	4c11      	ldr	r4, [pc, #68]	; (1c630 <xQueueGenericCreate+0x9c>)
   1c5ec:	47a0      	blx	r4
   1c5ee:	e017      	b.n	1c620 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1c5f0:	4b10      	ldr	r3, [pc, #64]	; (1c634 <xQueueGenericCreate+0xa0>)
   1c5f2:	4798      	blx	r3
   1c5f4:	0003      	movs	r3, r0
   1c5f6:	0018      	movs	r0, r3
   1c5f8:	4b0f      	ldr	r3, [pc, #60]	; (1c638 <xQueueGenericCreate+0xa4>)
   1c5fa:	4798      	blx	r3
   1c5fc:	0003      	movs	r3, r0
   1c5fe:	001a      	movs	r2, r3
   1c600:	4b0e      	ldr	r3, [pc, #56]	; (1c63c <xQueueGenericCreate+0xa8>)
   1c602:	881b      	ldrh	r3, [r3, #0]
   1c604:	4013      	ands	r3, r2
   1c606:	b29b      	uxth	r3, r3
   1c608:	2b00      	cmp	r3, #0
   1c60a:	d009      	beq.n	1c620 <xQueueGenericCreate+0x8c>
   1c60c:	1dfb      	adds	r3, r7, #7
   1c60e:	781b      	ldrb	r3, [r3, #0]
   1c610:	4a0b      	ldr	r2, [pc, #44]	; (1c640 <xQueueGenericCreate+0xac>)
   1c612:	5cd3      	ldrb	r3, [r2, r3]
   1c614:	3340      	adds	r3, #64	; 0x40
   1c616:	b2db      	uxtb	r3, r3
   1c618:	2100      	movs	r1, #0
   1c61a:	0018      	movs	r0, r3
   1c61c:	4b09      	ldr	r3, [pc, #36]	; (1c644 <xQueueGenericCreate+0xb0>)
   1c61e:	4798      	blx	r3
		}

		return pxNewQueue;
   1c620:	69bb      	ldr	r3, [r7, #24]
	}
   1c622:	0018      	movs	r0, r3
   1c624:	46bd      	mov	sp, r7
   1c626:	b009      	add	sp, #36	; 0x24
   1c628:	bd90      	pop	{r4, r7, pc}
   1c62a:	46c0      	nop			; (mov r8, r8)
   1c62c:	0001c3e1 	.word	0x0001c3e1
   1c630:	0001c649 	.word	0x0001c649
   1c634:	0001a539 	.word	0x0001a539
   1c638:	0001a29d 	.word	0x0001a29d
   1c63c:	20000104 	.word	0x20000104
   1c640:	200000f8 	.word	0x200000f8
   1c644:	0001af9d 	.word	0x0001af9d

0001c648 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1c648:	b5b0      	push	{r4, r5, r7, lr}
   1c64a:	b084      	sub	sp, #16
   1c64c:	af00      	add	r7, sp, #0
   1c64e:	60f8      	str	r0, [r7, #12]
   1c650:	60b9      	str	r1, [r7, #8]
   1c652:	607a      	str	r2, [r7, #4]
   1c654:	001a      	movs	r2, r3
   1c656:	1cfb      	adds	r3, r7, #3
   1c658:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1c65a:	68bb      	ldr	r3, [r7, #8]
   1c65c:	2b00      	cmp	r3, #0
   1c65e:	d103      	bne.n	1c668 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1c660:	6a3b      	ldr	r3, [r7, #32]
   1c662:	6a3a      	ldr	r2, [r7, #32]
   1c664:	601a      	str	r2, [r3, #0]
   1c666:	e002      	b.n	1c66e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1c668:	6a3b      	ldr	r3, [r7, #32]
   1c66a:	687a      	ldr	r2, [r7, #4]
   1c66c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1c66e:	6a3b      	ldr	r3, [r7, #32]
   1c670:	68fa      	ldr	r2, [r7, #12]
   1c672:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1c674:	6a3b      	ldr	r3, [r7, #32]
   1c676:	68ba      	ldr	r2, [r7, #8]
   1c678:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1c67a:	6a3b      	ldr	r3, [r7, #32]
   1c67c:	2101      	movs	r1, #1
   1c67e:	0018      	movs	r0, r3
   1c680:	4b41      	ldr	r3, [pc, #260]	; (1c788 <prvInitialiseNewQueue+0x140>)
   1c682:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1c684:	6a3b      	ldr	r3, [r7, #32]
   1c686:	1cfa      	adds	r2, r7, #3
   1c688:	2150      	movs	r1, #80	; 0x50
   1c68a:	7812      	ldrb	r2, [r2, #0]
   1c68c:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1c68e:	6a3b      	ldr	r3, [r7, #32]
   1c690:	2200      	movs	r2, #0
   1c692:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1c694:	6a3b      	ldr	r3, [r7, #32]
   1c696:	0018      	movs	r0, r3
   1c698:	4b3c      	ldr	r3, [pc, #240]	; (1c78c <prvInitialiseNewQueue+0x144>)
   1c69a:	4798      	blx	r3
   1c69c:	0003      	movs	r3, r0
   1c69e:	001a      	movs	r2, r3
   1c6a0:	4b3b      	ldr	r3, [pc, #236]	; (1c790 <prvInitialiseNewQueue+0x148>)
   1c6a2:	5c9b      	ldrb	r3, [r3, r2]
   1c6a4:	0018      	movs	r0, r3
   1c6a6:	4b3b      	ldr	r3, [pc, #236]	; (1c794 <prvInitialiseNewQueue+0x14c>)
   1c6a8:	4798      	blx	r3
   1c6aa:	0003      	movs	r3, r0
   1c6ac:	b29a      	uxth	r2, r3
   1c6ae:	6a3b      	ldr	r3, [r7, #32]
   1c6b0:	0011      	movs	r1, r2
   1c6b2:	0018      	movs	r0, r3
   1c6b4:	4b38      	ldr	r3, [pc, #224]	; (1c798 <prvInitialiseNewQueue+0x150>)
   1c6b6:	4798      	blx	r3
   1c6b8:	4b38      	ldr	r3, [pc, #224]	; (1c79c <prvInitialiseNewQueue+0x154>)
   1c6ba:	881a      	ldrh	r2, [r3, #0]
   1c6bc:	6a3b      	ldr	r3, [r7, #32]
   1c6be:	0011      	movs	r1, r2
   1c6c0:	0018      	movs	r0, r3
   1c6c2:	4b37      	ldr	r3, [pc, #220]	; (1c7a0 <prvInitialiseNewQueue+0x158>)
   1c6c4:	4798      	blx	r3
   1c6c6:	6a3b      	ldr	r3, [r7, #32]
   1c6c8:	0018      	movs	r0, r3
   1c6ca:	4b30      	ldr	r3, [pc, #192]	; (1c78c <prvInitialiseNewQueue+0x144>)
   1c6cc:	4798      	blx	r3
   1c6ce:	0003      	movs	r3, r0
   1c6d0:	001a      	movs	r2, r3
   1c6d2:	4b2f      	ldr	r3, [pc, #188]	; (1c790 <prvInitialiseNewQueue+0x148>)
   1c6d4:	5c9c      	ldrb	r4, [r3, r2]
   1c6d6:	6a3b      	ldr	r3, [r7, #32]
   1c6d8:	0018      	movs	r0, r3
   1c6da:	4b32      	ldr	r3, [pc, #200]	; (1c7a4 <prvInitialiseNewQueue+0x15c>)
   1c6dc:	4798      	blx	r3
   1c6de:	0003      	movs	r3, r0
   1c6e0:	b2db      	uxtb	r3, r3
   1c6e2:	0019      	movs	r1, r3
   1c6e4:	0020      	movs	r0, r4
   1c6e6:	4b30      	ldr	r3, [pc, #192]	; (1c7a8 <prvInitialiseNewQueue+0x160>)
   1c6e8:	4798      	blx	r3
   1c6ea:	4b30      	ldr	r3, [pc, #192]	; (1c7ac <prvInitialiseNewQueue+0x164>)
   1c6ec:	4798      	blx	r3
   1c6ee:	0003      	movs	r3, r0
   1c6f0:	0018      	movs	r0, r3
   1c6f2:	4b2f      	ldr	r3, [pc, #188]	; (1c7b0 <prvInitialiseNewQueue+0x168>)
   1c6f4:	4798      	blx	r3
   1c6f6:	0003      	movs	r3, r0
   1c6f8:	001a      	movs	r2, r3
   1c6fa:	4b2e      	ldr	r3, [pc, #184]	; (1c7b4 <prvInitialiseNewQueue+0x16c>)
   1c6fc:	881b      	ldrh	r3, [r3, #0]
   1c6fe:	4013      	ands	r3, r2
   1c700:	b29b      	uxth	r3, r3
   1c702:	2b00      	cmp	r3, #0
   1c704:	d029      	beq.n	1c75a <prvInitialiseNewQueue+0x112>
   1c706:	6a3b      	ldr	r3, [r7, #32]
   1c708:	0018      	movs	r0, r3
   1c70a:	4b2b      	ldr	r3, [pc, #172]	; (1c7b8 <prvInitialiseNewQueue+0x170>)
   1c70c:	4798      	blx	r3
   1c70e:	0003      	movs	r3, r0
   1c710:	001a      	movs	r2, r3
   1c712:	4b28      	ldr	r3, [pc, #160]	; (1c7b4 <prvInitialiseNewQueue+0x16c>)
   1c714:	881b      	ldrh	r3, [r3, #0]
   1c716:	4013      	ands	r3, r2
   1c718:	b29b      	uxth	r3, r3
   1c71a:	2b00      	cmp	r3, #0
   1c71c:	d01d      	beq.n	1c75a <prvInitialiseNewQueue+0x112>
   1c71e:	6a3b      	ldr	r3, [r7, #32]
   1c720:	0018      	movs	r0, r3
   1c722:	4b1a      	ldr	r3, [pc, #104]	; (1c78c <prvInitialiseNewQueue+0x144>)
   1c724:	4798      	blx	r3
   1c726:	0003      	movs	r3, r0
   1c728:	001a      	movs	r2, r3
   1c72a:	4b19      	ldr	r3, [pc, #100]	; (1c790 <prvInitialiseNewQueue+0x148>)
   1c72c:	5c9b      	ldrb	r3, [r3, r2]
   1c72e:	3318      	adds	r3, #24
   1c730:	b2db      	uxtb	r3, r3
   1c732:	001d      	movs	r5, r3
   1c734:	6a3b      	ldr	r3, [r7, #32]
   1c736:	0018      	movs	r0, r3
   1c738:	4b14      	ldr	r3, [pc, #80]	; (1c78c <prvInitialiseNewQueue+0x144>)
   1c73a:	4798      	blx	r3
   1c73c:	0003      	movs	r3, r0
   1c73e:	001a      	movs	r2, r3
   1c740:	4b13      	ldr	r3, [pc, #76]	; (1c790 <prvInitialiseNewQueue+0x148>)
   1c742:	5c9c      	ldrb	r4, [r3, r2]
   1c744:	6a3b      	ldr	r3, [r7, #32]
   1c746:	0018      	movs	r0, r3
   1c748:	4b16      	ldr	r3, [pc, #88]	; (1c7a4 <prvInitialiseNewQueue+0x15c>)
   1c74a:	4798      	blx	r3
   1c74c:	0003      	movs	r3, r0
   1c74e:	b2db      	uxtb	r3, r3
   1c750:	001a      	movs	r2, r3
   1c752:	0021      	movs	r1, r4
   1c754:	0028      	movs	r0, r5
   1c756:	4b19      	ldr	r3, [pc, #100]	; (1c7bc <prvInitialiseNewQueue+0x174>)
   1c758:	4798      	blx	r3
   1c75a:	6a3b      	ldr	r3, [r7, #32]
   1c75c:	0018      	movs	r0, r3
   1c75e:	4b0b      	ldr	r3, [pc, #44]	; (1c78c <prvInitialiseNewQueue+0x144>)
   1c760:	4798      	blx	r3
   1c762:	0003      	movs	r3, r0
   1c764:	001a      	movs	r2, r3
   1c766:	4b0a      	ldr	r3, [pc, #40]	; (1c790 <prvInitialiseNewQueue+0x148>)
   1c768:	5c9c      	ldrb	r4, [r3, r2]
   1c76a:	6a3b      	ldr	r3, [r7, #32]
   1c76c:	0018      	movs	r0, r3
   1c76e:	4b0d      	ldr	r3, [pc, #52]	; (1c7a4 <prvInitialiseNewQueue+0x15c>)
   1c770:	4798      	blx	r3
   1c772:	0003      	movs	r3, r0
   1c774:	b2db      	uxtb	r3, r3
   1c776:	2200      	movs	r2, #0
   1c778:	0019      	movs	r1, r3
   1c77a:	0020      	movs	r0, r4
   1c77c:	4b10      	ldr	r3, [pc, #64]	; (1c7c0 <prvInitialiseNewQueue+0x178>)
   1c77e:	4798      	blx	r3
}
   1c780:	46c0      	nop			; (mov r8, r8)
   1c782:	46bd      	mov	sp, r7
   1c784:	b004      	add	sp, #16
   1c786:	bdb0      	pop	{r4, r5, r7, pc}
   1c788:	0001c4d9 	.word	0x0001c4d9
   1c78c:	0001a25d 	.word	0x0001a25d
   1c790:	200000f8 	.word	0x200000f8
   1c794:	0001b81d 	.word	0x0001b81d
   1c798:	0001a381 	.word	0x0001a381
   1c79c:	20000106 	.word	0x20000106
   1c7a0:	0001a3bd 	.word	0x0001a3bd
   1c7a4:	0001a33d 	.word	0x0001a33d
   1c7a8:	0001b9b5 	.word	0x0001b9b5
   1c7ac:	0001a539 	.word	0x0001a539
   1c7b0:	0001a29d 	.word	0x0001a29d
   1c7b4:	20000104 	.word	0x20000104
   1c7b8:	0001a35d 	.word	0x0001a35d
   1c7bc:	0001ac95 	.word	0x0001ac95
   1c7c0:	0001b2f1 	.word	0x0001b2f1

0001c7c4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1c7c4:	b590      	push	{r4, r7, lr}
   1c7c6:	b083      	sub	sp, #12
   1c7c8:	af00      	add	r7, sp, #0
   1c7ca:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1c7cc:	687b      	ldr	r3, [r7, #4]
   1c7ce:	2b00      	cmp	r3, #0
   1c7d0:	d00e      	beq.n	1c7f0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1c7d2:	687b      	ldr	r3, [r7, #4]
   1c7d4:	2200      	movs	r2, #0
   1c7d6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1c7d8:	687b      	ldr	r3, [r7, #4]
   1c7da:	2200      	movs	r2, #0
   1c7dc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1c7de:	687b      	ldr	r3, [r7, #4]
   1c7e0:	2200      	movs	r2, #0
   1c7e2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1c7e4:	6878      	ldr	r0, [r7, #4]
   1c7e6:	2300      	movs	r3, #0
   1c7e8:	2200      	movs	r2, #0
   1c7ea:	2100      	movs	r1, #0
   1c7ec:	4c02      	ldr	r4, [pc, #8]	; (1c7f8 <prvInitialiseMutex+0x34>)
   1c7ee:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1c7f0:	46c0      	nop			; (mov r8, r8)
   1c7f2:	46bd      	mov	sp, r7
   1c7f4:	b003      	add	sp, #12
   1c7f6:	bd90      	pop	{r4, r7, pc}
   1c7f8:	0001c83d 	.word	0x0001c83d

0001c7fc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1c7fc:	b580      	push	{r7, lr}
   1c7fe:	b086      	sub	sp, #24
   1c800:	af00      	add	r7, sp, #0
   1c802:	0002      	movs	r2, r0
   1c804:	1dfb      	adds	r3, r7, #7
   1c806:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1c808:	2301      	movs	r3, #1
   1c80a:	617b      	str	r3, [r7, #20]
   1c80c:	2300      	movs	r3, #0
   1c80e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1c810:	1dfb      	adds	r3, r7, #7
   1c812:	781a      	ldrb	r2, [r3, #0]
   1c814:	6939      	ldr	r1, [r7, #16]
   1c816:	697b      	ldr	r3, [r7, #20]
   1c818:	0018      	movs	r0, r3
   1c81a:	4b06      	ldr	r3, [pc, #24]	; (1c834 <xQueueCreateMutex+0x38>)
   1c81c:	4798      	blx	r3
   1c81e:	0003      	movs	r3, r0
   1c820:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1c822:	68fb      	ldr	r3, [r7, #12]
   1c824:	0018      	movs	r0, r3
   1c826:	4b04      	ldr	r3, [pc, #16]	; (1c838 <xQueueCreateMutex+0x3c>)
   1c828:	4798      	blx	r3

		return pxNewQueue;
   1c82a:	68fb      	ldr	r3, [r7, #12]
	}
   1c82c:	0018      	movs	r0, r3
   1c82e:	46bd      	mov	sp, r7
   1c830:	b006      	add	sp, #24
   1c832:	bd80      	pop	{r7, pc}
   1c834:	0001c595 	.word	0x0001c595
   1c838:	0001c7c5 	.word	0x0001c7c5

0001c83c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1c83c:	b5b0      	push	{r4, r5, r7, lr}
   1c83e:	b08a      	sub	sp, #40	; 0x28
   1c840:	af00      	add	r7, sp, #0
   1c842:	60f8      	str	r0, [r7, #12]
   1c844:	60b9      	str	r1, [r7, #8]
   1c846:	607a      	str	r2, [r7, #4]
   1c848:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1c84a:	2300      	movs	r3, #0
   1c84c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1c84e:	68fb      	ldr	r3, [r7, #12]
   1c850:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1c852:	6a3b      	ldr	r3, [r7, #32]
   1c854:	2b00      	cmp	r3, #0
   1c856:	d101      	bne.n	1c85c <xQueueGenericSend+0x20>
   1c858:	b672      	cpsid	i
   1c85a:	e7fe      	b.n	1c85a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1c85c:	68bb      	ldr	r3, [r7, #8]
   1c85e:	2b00      	cmp	r3, #0
   1c860:	d103      	bne.n	1c86a <xQueueGenericSend+0x2e>
   1c862:	6a3b      	ldr	r3, [r7, #32]
   1c864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c866:	2b00      	cmp	r3, #0
   1c868:	d101      	bne.n	1c86e <xQueueGenericSend+0x32>
   1c86a:	2301      	movs	r3, #1
   1c86c:	e000      	b.n	1c870 <xQueueGenericSend+0x34>
   1c86e:	2300      	movs	r3, #0
   1c870:	2b00      	cmp	r3, #0
   1c872:	d101      	bne.n	1c878 <xQueueGenericSend+0x3c>
   1c874:	b672      	cpsid	i
   1c876:	e7fe      	b.n	1c876 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1c878:	683b      	ldr	r3, [r7, #0]
   1c87a:	2b02      	cmp	r3, #2
   1c87c:	d103      	bne.n	1c886 <xQueueGenericSend+0x4a>
   1c87e:	6a3b      	ldr	r3, [r7, #32]
   1c880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c882:	2b01      	cmp	r3, #1
   1c884:	d101      	bne.n	1c88a <xQueueGenericSend+0x4e>
   1c886:	2301      	movs	r3, #1
   1c888:	e000      	b.n	1c88c <xQueueGenericSend+0x50>
   1c88a:	2300      	movs	r3, #0
   1c88c:	2b00      	cmp	r3, #0
   1c88e:	d101      	bne.n	1c894 <xQueueGenericSend+0x58>
   1c890:	b672      	cpsid	i
   1c892:	e7fe      	b.n	1c892 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1c894:	4bbc      	ldr	r3, [pc, #752]	; (1cb88 <xQueueGenericSend+0x34c>)
   1c896:	4798      	blx	r3
   1c898:	1e03      	subs	r3, r0, #0
   1c89a:	d102      	bne.n	1c8a2 <xQueueGenericSend+0x66>
   1c89c:	687b      	ldr	r3, [r7, #4]
   1c89e:	2b00      	cmp	r3, #0
   1c8a0:	d101      	bne.n	1c8a6 <xQueueGenericSend+0x6a>
   1c8a2:	2301      	movs	r3, #1
   1c8a4:	e000      	b.n	1c8a8 <xQueueGenericSend+0x6c>
   1c8a6:	2300      	movs	r3, #0
   1c8a8:	2b00      	cmp	r3, #0
   1c8aa:	d101      	bne.n	1c8b0 <xQueueGenericSend+0x74>
   1c8ac:	b672      	cpsid	i
   1c8ae:	e7fe      	b.n	1c8ae <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1c8b0:	4bb6      	ldr	r3, [pc, #728]	; (1cb8c <xQueueGenericSend+0x350>)
   1c8b2:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1c8b4:	6a3b      	ldr	r3, [r7, #32]
   1c8b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c8b8:	6a3b      	ldr	r3, [r7, #32]
   1c8ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c8bc:	429a      	cmp	r2, r3
   1c8be:	d303      	bcc.n	1c8c8 <xQueueGenericSend+0x8c>
   1c8c0:	683b      	ldr	r3, [r7, #0]
   1c8c2:	2b02      	cmp	r3, #2
   1c8c4:	d000      	beq.n	1c8c8 <xQueueGenericSend+0x8c>
   1c8c6:	e08e      	b.n	1c9e6 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1c8c8:	4bb1      	ldr	r3, [pc, #708]	; (1cb90 <xQueueGenericSend+0x354>)
   1c8ca:	4798      	blx	r3
   1c8cc:	0003      	movs	r3, r0
   1c8ce:	0018      	movs	r0, r3
   1c8d0:	4bb0      	ldr	r3, [pc, #704]	; (1cb94 <xQueueGenericSend+0x358>)
   1c8d2:	4798      	blx	r3
   1c8d4:	0003      	movs	r3, r0
   1c8d6:	001a      	movs	r2, r3
   1c8d8:	4baf      	ldr	r3, [pc, #700]	; (1cb98 <xQueueGenericSend+0x35c>)
   1c8da:	881b      	ldrh	r3, [r3, #0]
   1c8dc:	4013      	ands	r3, r2
   1c8de:	b29b      	uxth	r3, r3
   1c8e0:	2b00      	cmp	r3, #0
   1c8e2:	d02e      	beq.n	1c942 <xQueueGenericSend+0x106>
   1c8e4:	6a3b      	ldr	r3, [r7, #32]
   1c8e6:	0018      	movs	r0, r3
   1c8e8:	4bac      	ldr	r3, [pc, #688]	; (1cb9c <xQueueGenericSend+0x360>)
   1c8ea:	4798      	blx	r3
   1c8ec:	0003      	movs	r3, r0
   1c8ee:	001a      	movs	r2, r3
   1c8f0:	4ba9      	ldr	r3, [pc, #676]	; (1cb98 <xQueueGenericSend+0x35c>)
   1c8f2:	881b      	ldrh	r3, [r3, #0]
   1c8f4:	4013      	ands	r3, r2
   1c8f6:	b29b      	uxth	r3, r3
   1c8f8:	2b00      	cmp	r3, #0
   1c8fa:	d022      	beq.n	1c942 <xQueueGenericSend+0x106>
   1c8fc:	683b      	ldr	r3, [r7, #0]
   1c8fe:	2b00      	cmp	r3, #0
   1c900:	d10b      	bne.n	1c91a <xQueueGenericSend+0xde>
   1c902:	6a3b      	ldr	r3, [r7, #32]
   1c904:	0018      	movs	r0, r3
   1c906:	4ba6      	ldr	r3, [pc, #664]	; (1cba0 <xQueueGenericSend+0x364>)
   1c908:	4798      	blx	r3
   1c90a:	0003      	movs	r3, r0
   1c90c:	001a      	movs	r2, r3
   1c90e:	4ba5      	ldr	r3, [pc, #660]	; (1cba4 <xQueueGenericSend+0x368>)
   1c910:	5c9b      	ldrb	r3, [r3, r2]
   1c912:	3320      	adds	r3, #32
   1c914:	b2db      	uxtb	r3, r3
   1c916:	001d      	movs	r5, r3
   1c918:	e000      	b.n	1c91c <xQueueGenericSend+0xe0>
   1c91a:	2525      	movs	r5, #37	; 0x25
   1c91c:	6a3b      	ldr	r3, [r7, #32]
   1c91e:	0018      	movs	r0, r3
   1c920:	4b9f      	ldr	r3, [pc, #636]	; (1cba0 <xQueueGenericSend+0x364>)
   1c922:	4798      	blx	r3
   1c924:	0003      	movs	r3, r0
   1c926:	001a      	movs	r2, r3
   1c928:	4b9e      	ldr	r3, [pc, #632]	; (1cba4 <xQueueGenericSend+0x368>)
   1c92a:	5c9c      	ldrb	r4, [r3, r2]
   1c92c:	6a3b      	ldr	r3, [r7, #32]
   1c92e:	0018      	movs	r0, r3
   1c930:	4b9d      	ldr	r3, [pc, #628]	; (1cba8 <xQueueGenericSend+0x36c>)
   1c932:	4798      	blx	r3
   1c934:	0003      	movs	r3, r0
   1c936:	b2db      	uxtb	r3, r3
   1c938:	001a      	movs	r2, r3
   1c93a:	0021      	movs	r1, r4
   1c93c:	0028      	movs	r0, r5
   1c93e:	4b9b      	ldr	r3, [pc, #620]	; (1cbac <xQueueGenericSend+0x370>)
   1c940:	4798      	blx	r3
   1c942:	6a3b      	ldr	r3, [r7, #32]
   1c944:	0018      	movs	r0, r3
   1c946:	4b96      	ldr	r3, [pc, #600]	; (1cba0 <xQueueGenericSend+0x364>)
   1c948:	4798      	blx	r3
   1c94a:	0003      	movs	r3, r0
   1c94c:	001a      	movs	r2, r3
   1c94e:	4b95      	ldr	r3, [pc, #596]	; (1cba4 <xQueueGenericSend+0x368>)
   1c950:	5c9c      	ldrb	r4, [r3, r2]
   1c952:	6a3b      	ldr	r3, [r7, #32]
   1c954:	0018      	movs	r0, r3
   1c956:	4b94      	ldr	r3, [pc, #592]	; (1cba8 <xQueueGenericSend+0x36c>)
   1c958:	4798      	blx	r3
   1c95a:	0003      	movs	r3, r0
   1c95c:	b2dd      	uxtb	r5, r3
   1c95e:	6a3b      	ldr	r3, [r7, #32]
   1c960:	0018      	movs	r0, r3
   1c962:	4b8f      	ldr	r3, [pc, #572]	; (1cba0 <xQueueGenericSend+0x364>)
   1c964:	4798      	blx	r3
   1c966:	0003      	movs	r3, r0
   1c968:	001a      	movs	r2, r3
   1c96a:	4b8e      	ldr	r3, [pc, #568]	; (1cba4 <xQueueGenericSend+0x368>)
   1c96c:	5c9b      	ldrb	r3, [r3, r2]
   1c96e:	2b02      	cmp	r3, #2
   1c970:	d005      	beq.n	1c97e <xQueueGenericSend+0x142>
   1c972:	6a3b      	ldr	r3, [r7, #32]
   1c974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c976:	b2db      	uxtb	r3, r3
   1c978:	3301      	adds	r3, #1
   1c97a:	b2db      	uxtb	r3, r3
   1c97c:	e000      	b.n	1c980 <xQueueGenericSend+0x144>
   1c97e:	2300      	movs	r3, #0
   1c980:	001a      	movs	r2, r3
   1c982:	0029      	movs	r1, r5
   1c984:	0020      	movs	r0, r4
   1c986:	4b8a      	ldr	r3, [pc, #552]	; (1cbb0 <xQueueGenericSend+0x374>)
   1c988:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1c98a:	683a      	ldr	r2, [r7, #0]
   1c98c:	68b9      	ldr	r1, [r7, #8]
   1c98e:	6a3b      	ldr	r3, [r7, #32]
   1c990:	0018      	movs	r0, r3
   1c992:	4b88      	ldr	r3, [pc, #544]	; (1cbb4 <xQueueGenericSend+0x378>)
   1c994:	4798      	blx	r3
   1c996:	0003      	movs	r3, r0
   1c998:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1c99a:	6a3b      	ldr	r3, [r7, #32]
   1c99c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c99e:	2b00      	cmp	r3, #0
   1c9a0:	d00a      	beq.n	1c9b8 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1c9a2:	683a      	ldr	r2, [r7, #0]
   1c9a4:	6a3b      	ldr	r3, [r7, #32]
   1c9a6:	0011      	movs	r1, r2
   1c9a8:	0018      	movs	r0, r3
   1c9aa:	4b83      	ldr	r3, [pc, #524]	; (1cbb8 <xQueueGenericSend+0x37c>)
   1c9ac:	4798      	blx	r3
   1c9ae:	1e03      	subs	r3, r0, #0
   1c9b0:	d015      	beq.n	1c9de <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1c9b2:	4b82      	ldr	r3, [pc, #520]	; (1cbbc <xQueueGenericSend+0x380>)
   1c9b4:	4798      	blx	r3
   1c9b6:	e012      	b.n	1c9de <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1c9b8:	6a3b      	ldr	r3, [r7, #32]
   1c9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c9bc:	2b00      	cmp	r3, #0
   1c9be:	d009      	beq.n	1c9d4 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1c9c0:	6a3b      	ldr	r3, [r7, #32]
   1c9c2:	3324      	adds	r3, #36	; 0x24
   1c9c4:	0018      	movs	r0, r3
   1c9c6:	4b7e      	ldr	r3, [pc, #504]	; (1cbc0 <xQueueGenericSend+0x384>)
   1c9c8:	4798      	blx	r3
   1c9ca:	1e03      	subs	r3, r0, #0
   1c9cc:	d007      	beq.n	1c9de <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1c9ce:	4b7b      	ldr	r3, [pc, #492]	; (1cbbc <xQueueGenericSend+0x380>)
   1c9d0:	4798      	blx	r3
   1c9d2:	e004      	b.n	1c9de <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1c9d4:	69fb      	ldr	r3, [r7, #28]
   1c9d6:	2b00      	cmp	r3, #0
   1c9d8:	d001      	beq.n	1c9de <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1c9da:	4b78      	ldr	r3, [pc, #480]	; (1cbbc <xQueueGenericSend+0x380>)
   1c9dc:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1c9de:	4b79      	ldr	r3, [pc, #484]	; (1cbc4 <xQueueGenericSend+0x388>)
   1c9e0:	4798      	blx	r3
				return pdPASS;
   1c9e2:	2301      	movs	r3, #1
   1c9e4:	e142      	b.n	1cc6c <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1c9e6:	687b      	ldr	r3, [r7, #4]
   1c9e8:	2b00      	cmp	r3, #0
   1c9ea:	d140      	bne.n	1ca6e <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1c9ec:	4b75      	ldr	r3, [pc, #468]	; (1cbc4 <xQueueGenericSend+0x388>)
   1c9ee:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1c9f0:	4b67      	ldr	r3, [pc, #412]	; (1cb90 <xQueueGenericSend+0x354>)
   1c9f2:	4798      	blx	r3
   1c9f4:	0003      	movs	r3, r0
   1c9f6:	0018      	movs	r0, r3
   1c9f8:	4b66      	ldr	r3, [pc, #408]	; (1cb94 <xQueueGenericSend+0x358>)
   1c9fa:	4798      	blx	r3
   1c9fc:	0003      	movs	r3, r0
   1c9fe:	001a      	movs	r2, r3
   1ca00:	4b65      	ldr	r3, [pc, #404]	; (1cb98 <xQueueGenericSend+0x35c>)
   1ca02:	881b      	ldrh	r3, [r3, #0]
   1ca04:	4013      	ands	r3, r2
   1ca06:	b29b      	uxth	r3, r3
   1ca08:	2b00      	cmp	r3, #0
   1ca0a:	d02e      	beq.n	1ca6a <xQueueGenericSend+0x22e>
   1ca0c:	6a3b      	ldr	r3, [r7, #32]
   1ca0e:	0018      	movs	r0, r3
   1ca10:	4b62      	ldr	r3, [pc, #392]	; (1cb9c <xQueueGenericSend+0x360>)
   1ca12:	4798      	blx	r3
   1ca14:	0003      	movs	r3, r0
   1ca16:	001a      	movs	r2, r3
   1ca18:	4b5f      	ldr	r3, [pc, #380]	; (1cb98 <xQueueGenericSend+0x35c>)
   1ca1a:	881b      	ldrh	r3, [r3, #0]
   1ca1c:	4013      	ands	r3, r2
   1ca1e:	b29b      	uxth	r3, r3
   1ca20:	2b00      	cmp	r3, #0
   1ca22:	d022      	beq.n	1ca6a <xQueueGenericSend+0x22e>
   1ca24:	683b      	ldr	r3, [r7, #0]
   1ca26:	2b00      	cmp	r3, #0
   1ca28:	d10b      	bne.n	1ca42 <xQueueGenericSend+0x206>
   1ca2a:	6a3b      	ldr	r3, [r7, #32]
   1ca2c:	0018      	movs	r0, r3
   1ca2e:	4b5c      	ldr	r3, [pc, #368]	; (1cba0 <xQueueGenericSend+0x364>)
   1ca30:	4798      	blx	r3
   1ca32:	0003      	movs	r3, r0
   1ca34:	001a      	movs	r2, r3
   1ca36:	4b5b      	ldr	r3, [pc, #364]	; (1cba4 <xQueueGenericSend+0x368>)
   1ca38:	5c9b      	ldrb	r3, [r3, r2]
   1ca3a:	3348      	adds	r3, #72	; 0x48
   1ca3c:	b2db      	uxtb	r3, r3
   1ca3e:	001d      	movs	r5, r3
   1ca40:	e000      	b.n	1ca44 <xQueueGenericSend+0x208>
   1ca42:	254d      	movs	r5, #77	; 0x4d
   1ca44:	6a3b      	ldr	r3, [r7, #32]
   1ca46:	0018      	movs	r0, r3
   1ca48:	4b55      	ldr	r3, [pc, #340]	; (1cba0 <xQueueGenericSend+0x364>)
   1ca4a:	4798      	blx	r3
   1ca4c:	0003      	movs	r3, r0
   1ca4e:	001a      	movs	r2, r3
   1ca50:	4b54      	ldr	r3, [pc, #336]	; (1cba4 <xQueueGenericSend+0x368>)
   1ca52:	5c9c      	ldrb	r4, [r3, r2]
   1ca54:	6a3b      	ldr	r3, [r7, #32]
   1ca56:	0018      	movs	r0, r3
   1ca58:	4b53      	ldr	r3, [pc, #332]	; (1cba8 <xQueueGenericSend+0x36c>)
   1ca5a:	4798      	blx	r3
   1ca5c:	0003      	movs	r3, r0
   1ca5e:	b2db      	uxtb	r3, r3
   1ca60:	001a      	movs	r2, r3
   1ca62:	0021      	movs	r1, r4
   1ca64:	0028      	movs	r0, r5
   1ca66:	4b51      	ldr	r3, [pc, #324]	; (1cbac <xQueueGenericSend+0x370>)
   1ca68:	4798      	blx	r3
					return errQUEUE_FULL;
   1ca6a:	2300      	movs	r3, #0
   1ca6c:	e0fe      	b.n	1cc6c <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1ca6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ca70:	2b00      	cmp	r3, #0
   1ca72:	d106      	bne.n	1ca82 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1ca74:	2314      	movs	r3, #20
   1ca76:	18fb      	adds	r3, r7, r3
   1ca78:	0018      	movs	r0, r3
   1ca7a:	4b53      	ldr	r3, [pc, #332]	; (1cbc8 <xQueueGenericSend+0x38c>)
   1ca7c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1ca7e:	2301      	movs	r3, #1
   1ca80:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1ca82:	4b50      	ldr	r3, [pc, #320]	; (1cbc4 <xQueueGenericSend+0x388>)
   1ca84:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1ca86:	4b51      	ldr	r3, [pc, #324]	; (1cbcc <xQueueGenericSend+0x390>)
   1ca88:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1ca8a:	4b40      	ldr	r3, [pc, #256]	; (1cb8c <xQueueGenericSend+0x350>)
   1ca8c:	4798      	blx	r3
   1ca8e:	6a3b      	ldr	r3, [r7, #32]
   1ca90:	2244      	movs	r2, #68	; 0x44
   1ca92:	5c9b      	ldrb	r3, [r3, r2]
   1ca94:	b25b      	sxtb	r3, r3
   1ca96:	3301      	adds	r3, #1
   1ca98:	d103      	bne.n	1caa2 <xQueueGenericSend+0x266>
   1ca9a:	6a3b      	ldr	r3, [r7, #32]
   1ca9c:	2244      	movs	r2, #68	; 0x44
   1ca9e:	2100      	movs	r1, #0
   1caa0:	5499      	strb	r1, [r3, r2]
   1caa2:	6a3b      	ldr	r3, [r7, #32]
   1caa4:	2245      	movs	r2, #69	; 0x45
   1caa6:	5c9b      	ldrb	r3, [r3, r2]
   1caa8:	b25b      	sxtb	r3, r3
   1caaa:	3301      	adds	r3, #1
   1caac:	d103      	bne.n	1cab6 <xQueueGenericSend+0x27a>
   1caae:	6a3b      	ldr	r3, [r7, #32]
   1cab0:	2245      	movs	r2, #69	; 0x45
   1cab2:	2100      	movs	r1, #0
   1cab4:	5499      	strb	r1, [r3, r2]
   1cab6:	4b43      	ldr	r3, [pc, #268]	; (1cbc4 <xQueueGenericSend+0x388>)
   1cab8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1caba:	1d3a      	adds	r2, r7, #4
   1cabc:	2314      	movs	r3, #20
   1cabe:	18fb      	adds	r3, r7, r3
   1cac0:	0011      	movs	r1, r2
   1cac2:	0018      	movs	r0, r3
   1cac4:	4b42      	ldr	r3, [pc, #264]	; (1cbd0 <xQueueGenericSend+0x394>)
   1cac6:	4798      	blx	r3
   1cac8:	1e03      	subs	r3, r0, #0
   1caca:	d000      	beq.n	1cace <xQueueGenericSend+0x292>
   1cacc:	e08a      	b.n	1cbe4 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1cace:	6a3b      	ldr	r3, [r7, #32]
   1cad0:	0018      	movs	r0, r3
   1cad2:	4b40      	ldr	r3, [pc, #256]	; (1cbd4 <xQueueGenericSend+0x398>)
   1cad4:	4798      	blx	r3
   1cad6:	1e03      	subs	r3, r0, #0
   1cad8:	d04f      	beq.n	1cb7a <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1cada:	4b2d      	ldr	r3, [pc, #180]	; (1cb90 <xQueueGenericSend+0x354>)
   1cadc:	4798      	blx	r3
   1cade:	0003      	movs	r3, r0
   1cae0:	0018      	movs	r0, r3
   1cae2:	4b2c      	ldr	r3, [pc, #176]	; (1cb94 <xQueueGenericSend+0x358>)
   1cae4:	4798      	blx	r3
   1cae6:	0003      	movs	r3, r0
   1cae8:	001a      	movs	r2, r3
   1caea:	4b2b      	ldr	r3, [pc, #172]	; (1cb98 <xQueueGenericSend+0x35c>)
   1caec:	881b      	ldrh	r3, [r3, #0]
   1caee:	4013      	ands	r3, r2
   1caf0:	b29b      	uxth	r3, r3
   1caf2:	2b00      	cmp	r3, #0
   1caf4:	d02e      	beq.n	1cb54 <xQueueGenericSend+0x318>
   1caf6:	6a3b      	ldr	r3, [r7, #32]
   1caf8:	0018      	movs	r0, r3
   1cafa:	4b28      	ldr	r3, [pc, #160]	; (1cb9c <xQueueGenericSend+0x360>)
   1cafc:	4798      	blx	r3
   1cafe:	0003      	movs	r3, r0
   1cb00:	001a      	movs	r2, r3
   1cb02:	4b25      	ldr	r3, [pc, #148]	; (1cb98 <xQueueGenericSend+0x35c>)
   1cb04:	881b      	ldrh	r3, [r3, #0]
   1cb06:	4013      	ands	r3, r2
   1cb08:	b29b      	uxth	r3, r3
   1cb0a:	2b00      	cmp	r3, #0
   1cb0c:	d022      	beq.n	1cb54 <xQueueGenericSend+0x318>
   1cb0e:	683b      	ldr	r3, [r7, #0]
   1cb10:	2b00      	cmp	r3, #0
   1cb12:	d10b      	bne.n	1cb2c <xQueueGenericSend+0x2f0>
   1cb14:	6a3b      	ldr	r3, [r7, #32]
   1cb16:	0018      	movs	r0, r3
   1cb18:	4b21      	ldr	r3, [pc, #132]	; (1cba0 <xQueueGenericSend+0x364>)
   1cb1a:	4798      	blx	r3
   1cb1c:	0003      	movs	r3, r0
   1cb1e:	001a      	movs	r2, r3
   1cb20:	4b20      	ldr	r3, [pc, #128]	; (1cba4 <xQueueGenericSend+0x368>)
   1cb22:	5c9b      	ldrb	r3, [r3, r2]
   1cb24:	3370      	adds	r3, #112	; 0x70
   1cb26:	b2db      	uxtb	r3, r3
   1cb28:	001d      	movs	r5, r3
   1cb2a:	e000      	b.n	1cb2e <xQueueGenericSend+0x2f2>
   1cb2c:	2575      	movs	r5, #117	; 0x75
   1cb2e:	6a3b      	ldr	r3, [r7, #32]
   1cb30:	0018      	movs	r0, r3
   1cb32:	4b1b      	ldr	r3, [pc, #108]	; (1cba0 <xQueueGenericSend+0x364>)
   1cb34:	4798      	blx	r3
   1cb36:	0003      	movs	r3, r0
   1cb38:	001a      	movs	r2, r3
   1cb3a:	4b1a      	ldr	r3, [pc, #104]	; (1cba4 <xQueueGenericSend+0x368>)
   1cb3c:	5c9c      	ldrb	r4, [r3, r2]
   1cb3e:	6a3b      	ldr	r3, [r7, #32]
   1cb40:	0018      	movs	r0, r3
   1cb42:	4b19      	ldr	r3, [pc, #100]	; (1cba8 <xQueueGenericSend+0x36c>)
   1cb44:	4798      	blx	r3
   1cb46:	0003      	movs	r3, r0
   1cb48:	b2db      	uxtb	r3, r3
   1cb4a:	001a      	movs	r2, r3
   1cb4c:	0021      	movs	r1, r4
   1cb4e:	0028      	movs	r0, r5
   1cb50:	4b16      	ldr	r3, [pc, #88]	; (1cbac <xQueueGenericSend+0x370>)
   1cb52:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1cb54:	6a3b      	ldr	r3, [r7, #32]
   1cb56:	3310      	adds	r3, #16
   1cb58:	687a      	ldr	r2, [r7, #4]
   1cb5a:	0011      	movs	r1, r2
   1cb5c:	0018      	movs	r0, r3
   1cb5e:	4b1e      	ldr	r3, [pc, #120]	; (1cbd8 <xQueueGenericSend+0x39c>)
   1cb60:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1cb62:	6a3b      	ldr	r3, [r7, #32]
   1cb64:	0018      	movs	r0, r3
   1cb66:	4b1d      	ldr	r3, [pc, #116]	; (1cbdc <xQueueGenericSend+0x3a0>)
   1cb68:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1cb6a:	4b1d      	ldr	r3, [pc, #116]	; (1cbe0 <xQueueGenericSend+0x3a4>)
   1cb6c:	4798      	blx	r3
   1cb6e:	1e03      	subs	r3, r0, #0
   1cb70:	d000      	beq.n	1cb74 <xQueueGenericSend+0x338>
   1cb72:	e69d      	b.n	1c8b0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1cb74:	4b11      	ldr	r3, [pc, #68]	; (1cbbc <xQueueGenericSend+0x380>)
   1cb76:	4798      	blx	r3
   1cb78:	e69a      	b.n	1c8b0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1cb7a:	6a3b      	ldr	r3, [r7, #32]
   1cb7c:	0018      	movs	r0, r3
   1cb7e:	4b17      	ldr	r3, [pc, #92]	; (1cbdc <xQueueGenericSend+0x3a0>)
   1cb80:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1cb82:	4b17      	ldr	r3, [pc, #92]	; (1cbe0 <xQueueGenericSend+0x3a4>)
   1cb84:	4798      	blx	r3
   1cb86:	e693      	b.n	1c8b0 <xQueueGenericSend+0x74>
   1cb88:	0001efc9 	.word	0x0001efc9
   1cb8c:	0001c2a9 	.word	0x0001c2a9
   1cb90:	0001a539 	.word	0x0001a539
   1cb94:	0001a29d 	.word	0x0001a29d
   1cb98:	20000104 	.word	0x20000104
   1cb9c:	0001a35d 	.word	0x0001a35d
   1cba0:	0001a25d 	.word	0x0001a25d
   1cba4:	200000f8 	.word	0x200000f8
   1cba8:	0001a33d 	.word	0x0001a33d
   1cbac:	0001ac95 	.word	0x0001ac95
   1cbb0:	0001b2f1 	.word	0x0001b2f1
   1cbb4:	0001da75 	.word	0x0001da75
   1cbb8:	0001dd79 	.word	0x0001dd79
   1cbbc:	0001c291 	.word	0x0001c291
   1cbc0:	0001eb39 	.word	0x0001eb39
   1cbc4:	0001c2cd 	.word	0x0001c2cd
   1cbc8:	0001ec79 	.word	0x0001ec79
   1cbcc:	0001e561 	.word	0x0001e561
   1cbd0:	0001eca1 	.word	0x0001eca1
   1cbd4:	0001dcc9 	.word	0x0001dcc9
   1cbd8:	0001ea15 	.word	0x0001ea15
   1cbdc:	0001dba5 	.word	0x0001dba5
   1cbe0:	0001e579 	.word	0x0001e579
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1cbe4:	6a3b      	ldr	r3, [r7, #32]
   1cbe6:	0018      	movs	r0, r3
   1cbe8:	4b22      	ldr	r3, [pc, #136]	; (1cc74 <xQueueGenericSend+0x438>)
   1cbea:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1cbec:	4b22      	ldr	r3, [pc, #136]	; (1cc78 <xQueueGenericSend+0x43c>)
   1cbee:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1cbf0:	4b22      	ldr	r3, [pc, #136]	; (1cc7c <xQueueGenericSend+0x440>)
   1cbf2:	4798      	blx	r3
   1cbf4:	0003      	movs	r3, r0
   1cbf6:	0018      	movs	r0, r3
   1cbf8:	4b21      	ldr	r3, [pc, #132]	; (1cc80 <xQueueGenericSend+0x444>)
   1cbfa:	4798      	blx	r3
   1cbfc:	0003      	movs	r3, r0
   1cbfe:	001a      	movs	r2, r3
   1cc00:	4b20      	ldr	r3, [pc, #128]	; (1cc84 <xQueueGenericSend+0x448>)
   1cc02:	881b      	ldrh	r3, [r3, #0]
   1cc04:	4013      	ands	r3, r2
   1cc06:	b29b      	uxth	r3, r3
   1cc08:	2b00      	cmp	r3, #0
   1cc0a:	d02e      	beq.n	1cc6a <xQueueGenericSend+0x42e>
   1cc0c:	6a3b      	ldr	r3, [r7, #32]
   1cc0e:	0018      	movs	r0, r3
   1cc10:	4b1d      	ldr	r3, [pc, #116]	; (1cc88 <xQueueGenericSend+0x44c>)
   1cc12:	4798      	blx	r3
   1cc14:	0003      	movs	r3, r0
   1cc16:	001a      	movs	r2, r3
   1cc18:	4b1a      	ldr	r3, [pc, #104]	; (1cc84 <xQueueGenericSend+0x448>)
   1cc1a:	881b      	ldrh	r3, [r3, #0]
   1cc1c:	4013      	ands	r3, r2
   1cc1e:	b29b      	uxth	r3, r3
   1cc20:	2b00      	cmp	r3, #0
   1cc22:	d022      	beq.n	1cc6a <xQueueGenericSend+0x42e>
   1cc24:	683b      	ldr	r3, [r7, #0]
   1cc26:	2b00      	cmp	r3, #0
   1cc28:	d10b      	bne.n	1cc42 <xQueueGenericSend+0x406>
   1cc2a:	6a3b      	ldr	r3, [r7, #32]
   1cc2c:	0018      	movs	r0, r3
   1cc2e:	4b17      	ldr	r3, [pc, #92]	; (1cc8c <xQueueGenericSend+0x450>)
   1cc30:	4798      	blx	r3
   1cc32:	0003      	movs	r3, r0
   1cc34:	001a      	movs	r2, r3
   1cc36:	4b16      	ldr	r3, [pc, #88]	; (1cc90 <xQueueGenericSend+0x454>)
   1cc38:	5c9b      	ldrb	r3, [r3, r2]
   1cc3a:	3348      	adds	r3, #72	; 0x48
   1cc3c:	b2db      	uxtb	r3, r3
   1cc3e:	001d      	movs	r5, r3
   1cc40:	e000      	b.n	1cc44 <xQueueGenericSend+0x408>
   1cc42:	254d      	movs	r5, #77	; 0x4d
   1cc44:	6a3b      	ldr	r3, [r7, #32]
   1cc46:	0018      	movs	r0, r3
   1cc48:	4b10      	ldr	r3, [pc, #64]	; (1cc8c <xQueueGenericSend+0x450>)
   1cc4a:	4798      	blx	r3
   1cc4c:	0003      	movs	r3, r0
   1cc4e:	001a      	movs	r2, r3
   1cc50:	4b0f      	ldr	r3, [pc, #60]	; (1cc90 <xQueueGenericSend+0x454>)
   1cc52:	5c9c      	ldrb	r4, [r3, r2]
   1cc54:	6a3b      	ldr	r3, [r7, #32]
   1cc56:	0018      	movs	r0, r3
   1cc58:	4b0e      	ldr	r3, [pc, #56]	; (1cc94 <xQueueGenericSend+0x458>)
   1cc5a:	4798      	blx	r3
   1cc5c:	0003      	movs	r3, r0
   1cc5e:	b2db      	uxtb	r3, r3
   1cc60:	001a      	movs	r2, r3
   1cc62:	0021      	movs	r1, r4
   1cc64:	0028      	movs	r0, r5
   1cc66:	4b0c      	ldr	r3, [pc, #48]	; (1cc98 <xQueueGenericSend+0x45c>)
   1cc68:	4798      	blx	r3
			return errQUEUE_FULL;
   1cc6a:	2300      	movs	r3, #0
		}
	}
}
   1cc6c:	0018      	movs	r0, r3
   1cc6e:	46bd      	mov	sp, r7
   1cc70:	b00a      	add	sp, #40	; 0x28
   1cc72:	bdb0      	pop	{r4, r5, r7, pc}
   1cc74:	0001dba5 	.word	0x0001dba5
   1cc78:	0001e579 	.word	0x0001e579
   1cc7c:	0001a539 	.word	0x0001a539
   1cc80:	0001a29d 	.word	0x0001a29d
   1cc84:	20000104 	.word	0x20000104
   1cc88:	0001a35d 	.word	0x0001a35d
   1cc8c:	0001a25d 	.word	0x0001a25d
   1cc90:	200000f8 	.word	0x200000f8
   1cc94:	0001a33d 	.word	0x0001a33d
   1cc98:	0001ac95 	.word	0x0001ac95

0001cc9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1cc9c:	b5b0      	push	{r4, r5, r7, lr}
   1cc9e:	b088      	sub	sp, #32
   1cca0:	af00      	add	r7, sp, #0
   1cca2:	60f8      	str	r0, [r7, #12]
   1cca4:	60b9      	str	r1, [r7, #8]
   1cca6:	607a      	str	r2, [r7, #4]
   1cca8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ccaa:	68fb      	ldr	r3, [r7, #12]
   1ccac:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1ccae:	69bb      	ldr	r3, [r7, #24]
   1ccb0:	2b00      	cmp	r3, #0
   1ccb2:	d101      	bne.n	1ccb8 <xQueueGenericSendFromISR+0x1c>
   1ccb4:	b672      	cpsid	i
   1ccb6:	e7fe      	b.n	1ccb6 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1ccb8:	68bb      	ldr	r3, [r7, #8]
   1ccba:	2b00      	cmp	r3, #0
   1ccbc:	d103      	bne.n	1ccc6 <xQueueGenericSendFromISR+0x2a>
   1ccbe:	69bb      	ldr	r3, [r7, #24]
   1ccc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ccc2:	2b00      	cmp	r3, #0
   1ccc4:	d101      	bne.n	1ccca <xQueueGenericSendFromISR+0x2e>
   1ccc6:	2301      	movs	r3, #1
   1ccc8:	e000      	b.n	1cccc <xQueueGenericSendFromISR+0x30>
   1ccca:	2300      	movs	r3, #0
   1cccc:	2b00      	cmp	r3, #0
   1ccce:	d101      	bne.n	1ccd4 <xQueueGenericSendFromISR+0x38>
   1ccd0:	b672      	cpsid	i
   1ccd2:	e7fe      	b.n	1ccd2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1ccd4:	683b      	ldr	r3, [r7, #0]
   1ccd6:	2b02      	cmp	r3, #2
   1ccd8:	d103      	bne.n	1cce2 <xQueueGenericSendFromISR+0x46>
   1ccda:	69bb      	ldr	r3, [r7, #24]
   1ccdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ccde:	2b01      	cmp	r3, #1
   1cce0:	d101      	bne.n	1cce6 <xQueueGenericSendFromISR+0x4a>
   1cce2:	2301      	movs	r3, #1
   1cce4:	e000      	b.n	1cce8 <xQueueGenericSendFromISR+0x4c>
   1cce6:	2300      	movs	r3, #0
   1cce8:	2b00      	cmp	r3, #0
   1ccea:	d101      	bne.n	1ccf0 <xQueueGenericSendFromISR+0x54>
   1ccec:	b672      	cpsid	i
   1ccee:	e7fe      	b.n	1ccee <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1ccf0:	4b68      	ldr	r3, [pc, #416]	; (1ce94 <xQueueGenericSendFromISR+0x1f8>)
   1ccf2:	4798      	blx	r3
   1ccf4:	0003      	movs	r3, r0
   1ccf6:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1ccf8:	69bb      	ldr	r3, [r7, #24]
   1ccfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ccfc:	69bb      	ldr	r3, [r7, #24]
   1ccfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1cd00:	429a      	cmp	r2, r3
   1cd02:	d303      	bcc.n	1cd0c <xQueueGenericSendFromISR+0x70>
   1cd04:	683b      	ldr	r3, [r7, #0]
   1cd06:	2b02      	cmp	r3, #2
   1cd08:	d000      	beq.n	1cd0c <xQueueGenericSendFromISR+0x70>
   1cd0a:	e088      	b.n	1ce1e <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1cd0c:	2313      	movs	r3, #19
   1cd0e:	18fb      	adds	r3, r7, r3
   1cd10:	69ba      	ldr	r2, [r7, #24]
   1cd12:	2145      	movs	r1, #69	; 0x45
   1cd14:	5c52      	ldrb	r2, [r2, r1]
   1cd16:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1cd18:	69bb      	ldr	r3, [r7, #24]
   1cd1a:	0018      	movs	r0, r3
   1cd1c:	4b5e      	ldr	r3, [pc, #376]	; (1ce98 <xQueueGenericSendFromISR+0x1fc>)
   1cd1e:	4798      	blx	r3
   1cd20:	0003      	movs	r3, r0
   1cd22:	001a      	movs	r2, r3
   1cd24:	4b5d      	ldr	r3, [pc, #372]	; (1ce9c <xQueueGenericSendFromISR+0x200>)
   1cd26:	881b      	ldrh	r3, [r3, #0]
   1cd28:	4013      	ands	r3, r2
   1cd2a:	b29b      	uxth	r3, r3
   1cd2c:	2b00      	cmp	r3, #0
   1cd2e:	d022      	beq.n	1cd76 <xQueueGenericSendFromISR+0xda>
   1cd30:	683b      	ldr	r3, [r7, #0]
   1cd32:	2b00      	cmp	r3, #0
   1cd34:	d10b      	bne.n	1cd4e <xQueueGenericSendFromISR+0xb2>
   1cd36:	69bb      	ldr	r3, [r7, #24]
   1cd38:	0018      	movs	r0, r3
   1cd3a:	4b59      	ldr	r3, [pc, #356]	; (1cea0 <xQueueGenericSendFromISR+0x204>)
   1cd3c:	4798      	blx	r3
   1cd3e:	0003      	movs	r3, r0
   1cd40:	001a      	movs	r2, r3
   1cd42:	4b58      	ldr	r3, [pc, #352]	; (1cea4 <xQueueGenericSendFromISR+0x208>)
   1cd44:	5c9b      	ldrb	r3, [r3, r2]
   1cd46:	3330      	adds	r3, #48	; 0x30
   1cd48:	b2db      	uxtb	r3, r3
   1cd4a:	001d      	movs	r5, r3
   1cd4c:	e000      	b.n	1cd50 <xQueueGenericSendFromISR+0xb4>
   1cd4e:	2535      	movs	r5, #53	; 0x35
   1cd50:	69bb      	ldr	r3, [r7, #24]
   1cd52:	0018      	movs	r0, r3
   1cd54:	4b52      	ldr	r3, [pc, #328]	; (1cea0 <xQueueGenericSendFromISR+0x204>)
   1cd56:	4798      	blx	r3
   1cd58:	0003      	movs	r3, r0
   1cd5a:	001a      	movs	r2, r3
   1cd5c:	4b51      	ldr	r3, [pc, #324]	; (1cea4 <xQueueGenericSendFromISR+0x208>)
   1cd5e:	5c9c      	ldrb	r4, [r3, r2]
   1cd60:	69bb      	ldr	r3, [r7, #24]
   1cd62:	0018      	movs	r0, r3
   1cd64:	4b50      	ldr	r3, [pc, #320]	; (1cea8 <xQueueGenericSendFromISR+0x20c>)
   1cd66:	4798      	blx	r3
   1cd68:	0003      	movs	r3, r0
   1cd6a:	b2db      	uxtb	r3, r3
   1cd6c:	001a      	movs	r2, r3
   1cd6e:	0021      	movs	r1, r4
   1cd70:	0028      	movs	r0, r5
   1cd72:	4b4e      	ldr	r3, [pc, #312]	; (1ceac <xQueueGenericSendFromISR+0x210>)
   1cd74:	4798      	blx	r3
   1cd76:	69bb      	ldr	r3, [r7, #24]
   1cd78:	0018      	movs	r0, r3
   1cd7a:	4b49      	ldr	r3, [pc, #292]	; (1cea0 <xQueueGenericSendFromISR+0x204>)
   1cd7c:	4798      	blx	r3
   1cd7e:	0003      	movs	r3, r0
   1cd80:	001a      	movs	r2, r3
   1cd82:	4b48      	ldr	r3, [pc, #288]	; (1cea4 <xQueueGenericSendFromISR+0x208>)
   1cd84:	5c9c      	ldrb	r4, [r3, r2]
   1cd86:	69bb      	ldr	r3, [r7, #24]
   1cd88:	0018      	movs	r0, r3
   1cd8a:	4b47      	ldr	r3, [pc, #284]	; (1cea8 <xQueueGenericSendFromISR+0x20c>)
   1cd8c:	4798      	blx	r3
   1cd8e:	0003      	movs	r3, r0
   1cd90:	b2d9      	uxtb	r1, r3
   1cd92:	69bb      	ldr	r3, [r7, #24]
   1cd94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1cd96:	b2db      	uxtb	r3, r3
   1cd98:	3301      	adds	r3, #1
   1cd9a:	b2db      	uxtb	r3, r3
   1cd9c:	001a      	movs	r2, r3
   1cd9e:	0020      	movs	r0, r4
   1cda0:	4b43      	ldr	r3, [pc, #268]	; (1ceb0 <xQueueGenericSendFromISR+0x214>)
   1cda2:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1cda4:	683a      	ldr	r2, [r7, #0]
   1cda6:	68b9      	ldr	r1, [r7, #8]
   1cda8:	69bb      	ldr	r3, [r7, #24]
   1cdaa:	0018      	movs	r0, r3
   1cdac:	4b41      	ldr	r3, [pc, #260]	; (1ceb4 <xQueueGenericSendFromISR+0x218>)
   1cdae:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1cdb0:	2313      	movs	r3, #19
   1cdb2:	18fb      	adds	r3, r7, r3
   1cdb4:	781b      	ldrb	r3, [r3, #0]
   1cdb6:	b25b      	sxtb	r3, r3
   1cdb8:	3301      	adds	r3, #1
   1cdba:	d124      	bne.n	1ce06 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1cdbc:	69bb      	ldr	r3, [r7, #24]
   1cdbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1cdc0:	2b00      	cmp	r3, #0
   1cdc2:	d00e      	beq.n	1cde2 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1cdc4:	683a      	ldr	r2, [r7, #0]
   1cdc6:	69bb      	ldr	r3, [r7, #24]
   1cdc8:	0011      	movs	r1, r2
   1cdca:	0018      	movs	r0, r3
   1cdcc:	4b3a      	ldr	r3, [pc, #232]	; (1ceb8 <xQueueGenericSendFromISR+0x21c>)
   1cdce:	4798      	blx	r3
   1cdd0:	1e03      	subs	r3, r0, #0
   1cdd2:	d021      	beq.n	1ce18 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1cdd4:	687b      	ldr	r3, [r7, #4]
   1cdd6:	2b00      	cmp	r3, #0
   1cdd8:	d01e      	beq.n	1ce18 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1cdda:	687b      	ldr	r3, [r7, #4]
   1cddc:	2201      	movs	r2, #1
   1cdde:	601a      	str	r2, [r3, #0]
   1cde0:	e01a      	b.n	1ce18 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1cde2:	69bb      	ldr	r3, [r7, #24]
   1cde4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cde6:	2b00      	cmp	r3, #0
   1cde8:	d016      	beq.n	1ce18 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1cdea:	69bb      	ldr	r3, [r7, #24]
   1cdec:	3324      	adds	r3, #36	; 0x24
   1cdee:	0018      	movs	r0, r3
   1cdf0:	4b32      	ldr	r3, [pc, #200]	; (1cebc <xQueueGenericSendFromISR+0x220>)
   1cdf2:	4798      	blx	r3
   1cdf4:	1e03      	subs	r3, r0, #0
   1cdf6:	d00f      	beq.n	1ce18 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1cdf8:	687b      	ldr	r3, [r7, #4]
   1cdfa:	2b00      	cmp	r3, #0
   1cdfc:	d00c      	beq.n	1ce18 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1cdfe:	687b      	ldr	r3, [r7, #4]
   1ce00:	2201      	movs	r2, #1
   1ce02:	601a      	str	r2, [r3, #0]
   1ce04:	e008      	b.n	1ce18 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1ce06:	2313      	movs	r3, #19
   1ce08:	18fb      	adds	r3, r7, r3
   1ce0a:	781b      	ldrb	r3, [r3, #0]
   1ce0c:	3301      	adds	r3, #1
   1ce0e:	b2db      	uxtb	r3, r3
   1ce10:	b259      	sxtb	r1, r3
   1ce12:	69bb      	ldr	r3, [r7, #24]
   1ce14:	2245      	movs	r2, #69	; 0x45
   1ce16:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1ce18:	2301      	movs	r3, #1
   1ce1a:	61fb      	str	r3, [r7, #28]
		{
   1ce1c:	e030      	b.n	1ce80 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1ce1e:	69bb      	ldr	r3, [r7, #24]
   1ce20:	0018      	movs	r0, r3
   1ce22:	4b1d      	ldr	r3, [pc, #116]	; (1ce98 <xQueueGenericSendFromISR+0x1fc>)
   1ce24:	4798      	blx	r3
   1ce26:	0003      	movs	r3, r0
   1ce28:	001a      	movs	r2, r3
   1ce2a:	4b1c      	ldr	r3, [pc, #112]	; (1ce9c <xQueueGenericSendFromISR+0x200>)
   1ce2c:	881b      	ldrh	r3, [r3, #0]
   1ce2e:	4013      	ands	r3, r2
   1ce30:	b29b      	uxth	r3, r3
   1ce32:	2b00      	cmp	r3, #0
   1ce34:	d022      	beq.n	1ce7c <xQueueGenericSendFromISR+0x1e0>
   1ce36:	683b      	ldr	r3, [r7, #0]
   1ce38:	2b00      	cmp	r3, #0
   1ce3a:	d10b      	bne.n	1ce54 <xQueueGenericSendFromISR+0x1b8>
   1ce3c:	69bb      	ldr	r3, [r7, #24]
   1ce3e:	0018      	movs	r0, r3
   1ce40:	4b17      	ldr	r3, [pc, #92]	; (1cea0 <xQueueGenericSendFromISR+0x204>)
   1ce42:	4798      	blx	r3
   1ce44:	0003      	movs	r3, r0
   1ce46:	001a      	movs	r2, r3
   1ce48:	4b16      	ldr	r3, [pc, #88]	; (1cea4 <xQueueGenericSendFromISR+0x208>)
   1ce4a:	5c9b      	ldrb	r3, [r3, r2]
   1ce4c:	3358      	adds	r3, #88	; 0x58
   1ce4e:	b2db      	uxtb	r3, r3
   1ce50:	001d      	movs	r5, r3
   1ce52:	e000      	b.n	1ce56 <xQueueGenericSendFromISR+0x1ba>
   1ce54:	255d      	movs	r5, #93	; 0x5d
   1ce56:	69bb      	ldr	r3, [r7, #24]
   1ce58:	0018      	movs	r0, r3
   1ce5a:	4b11      	ldr	r3, [pc, #68]	; (1cea0 <xQueueGenericSendFromISR+0x204>)
   1ce5c:	4798      	blx	r3
   1ce5e:	0003      	movs	r3, r0
   1ce60:	001a      	movs	r2, r3
   1ce62:	4b10      	ldr	r3, [pc, #64]	; (1cea4 <xQueueGenericSendFromISR+0x208>)
   1ce64:	5c9c      	ldrb	r4, [r3, r2]
   1ce66:	69bb      	ldr	r3, [r7, #24]
   1ce68:	0018      	movs	r0, r3
   1ce6a:	4b0f      	ldr	r3, [pc, #60]	; (1cea8 <xQueueGenericSendFromISR+0x20c>)
   1ce6c:	4798      	blx	r3
   1ce6e:	0003      	movs	r3, r0
   1ce70:	b2db      	uxtb	r3, r3
   1ce72:	001a      	movs	r2, r3
   1ce74:	0021      	movs	r1, r4
   1ce76:	0028      	movs	r0, r5
   1ce78:	4b0c      	ldr	r3, [pc, #48]	; (1ceac <xQueueGenericSendFromISR+0x210>)
   1ce7a:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1ce7c:	2300      	movs	r3, #0
   1ce7e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1ce80:	697b      	ldr	r3, [r7, #20]
   1ce82:	0018      	movs	r0, r3
   1ce84:	4b0e      	ldr	r3, [pc, #56]	; (1cec0 <xQueueGenericSendFromISR+0x224>)
   1ce86:	4798      	blx	r3

	return xReturn;
   1ce88:	69fb      	ldr	r3, [r7, #28]
}
   1ce8a:	0018      	movs	r0, r3
   1ce8c:	46bd      	mov	sp, r7
   1ce8e:	b008      	add	sp, #32
   1ce90:	bdb0      	pop	{r4, r5, r7, pc}
   1ce92:	46c0      	nop			; (mov r8, r8)
   1ce94:	0001c2fd 	.word	0x0001c2fd
   1ce98:	0001a35d 	.word	0x0001a35d
   1ce9c:	20000104 	.word	0x20000104
   1cea0:	0001a25d 	.word	0x0001a25d
   1cea4:	200000f8 	.word	0x200000f8
   1cea8:	0001a33d 	.word	0x0001a33d
   1ceac:	0001ac95 	.word	0x0001ac95
   1ceb0:	0001b2f1 	.word	0x0001b2f1
   1ceb4:	0001da75 	.word	0x0001da75
   1ceb8:	0001dd79 	.word	0x0001dd79
   1cebc:	0001eb39 	.word	0x0001eb39
   1cec0:	0001c309 	.word	0x0001c309

0001cec4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1cec4:	b580      	push	{r7, lr}
   1cec6:	b082      	sub	sp, #8
   1cec8:	af00      	add	r7, sp, #0
   1ceca:	6078      	str	r0, [r7, #4]
   1cecc:	6039      	str	r1, [r7, #0]
   1cece:	6839      	ldr	r1, [r7, #0]
   1ced0:	687b      	ldr	r3, [r7, #4]
   1ced2:	2200      	movs	r2, #0
   1ced4:	0018      	movs	r0, r3
   1ced6:	4b03      	ldr	r3, [pc, #12]	; (1cee4 <xQueueGiveFromISR+0x20>)
   1ced8:	4798      	blx	r3
   1ceda:	0003      	movs	r3, r0
   1cedc:	0018      	movs	r0, r3
   1cede:	46bd      	mov	sp, r7
   1cee0:	b002      	add	sp, #8
   1cee2:	bd80      	pop	{r7, pc}
   1cee4:	0001cee9 	.word	0x0001cee9

0001cee8 <MyWrapper>:
{
   1cee8:	b5b0      	push	{r4, r5, r7, lr}
   1ceea:	b08a      	sub	sp, #40	; 0x28
   1ceec:	af00      	add	r7, sp, #0
   1ceee:	60f8      	str	r0, [r7, #12]
   1cef0:	60b9      	str	r1, [r7, #8]
   1cef2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1cef4:	68fb      	ldr	r3, [r7, #12]
   1cef6:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1cef8:	6a3b      	ldr	r3, [r7, #32]
   1cefa:	2b00      	cmp	r3, #0
   1cefc:	d101      	bne.n	1cf02 <MyWrapper+0x1a>
   1cefe:	b672      	cpsid	i
   1cf00:	e7fe      	b.n	1cf00 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1cf02:	6a3b      	ldr	r3, [r7, #32]
   1cf04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1cf06:	2b00      	cmp	r3, #0
   1cf08:	d001      	beq.n	1cf0e <MyWrapper+0x26>
   1cf0a:	b672      	cpsid	i
   1cf0c:	e7fe      	b.n	1cf0c <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1cf0e:	6a3b      	ldr	r3, [r7, #32]
   1cf10:	681b      	ldr	r3, [r3, #0]
   1cf12:	2b00      	cmp	r3, #0
   1cf14:	d103      	bne.n	1cf1e <MyWrapper+0x36>
   1cf16:	6a3b      	ldr	r3, [r7, #32]
   1cf18:	685b      	ldr	r3, [r3, #4]
   1cf1a:	2b00      	cmp	r3, #0
   1cf1c:	d101      	bne.n	1cf22 <MyWrapper+0x3a>
   1cf1e:	2301      	movs	r3, #1
   1cf20:	e000      	b.n	1cf24 <MyWrapper+0x3c>
   1cf22:	2300      	movs	r3, #0
   1cf24:	2b00      	cmp	r3, #0
   1cf26:	d101      	bne.n	1cf2c <MyWrapper+0x44>
   1cf28:	b672      	cpsid	i
   1cf2a:	e7fe      	b.n	1cf2a <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1cf2c:	4b66      	ldr	r3, [pc, #408]	; (1d0c8 <MyWrapper+0x1e0>)
   1cf2e:	4798      	blx	r3
   1cf30:	0003      	movs	r3, r0
   1cf32:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1cf34:	6a3b      	ldr	r3, [r7, #32]
   1cf36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1cf38:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1cf3a:	6a3b      	ldr	r3, [r7, #32]
   1cf3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1cf3e:	69bb      	ldr	r3, [r7, #24]
   1cf40:	429a      	cmp	r2, r3
   1cf42:	d800      	bhi.n	1cf46 <MyWrapper+0x5e>
   1cf44:	e085      	b.n	1d052 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1cf46:	2317      	movs	r3, #23
   1cf48:	18fb      	adds	r3, r7, r3
   1cf4a:	6a3a      	ldr	r2, [r7, #32]
   1cf4c:	2145      	movs	r1, #69	; 0x45
   1cf4e:	5c52      	ldrb	r2, [r2, r1]
   1cf50:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1cf52:	6a3b      	ldr	r3, [r7, #32]
   1cf54:	0018      	movs	r0, r3
   1cf56:	4b5d      	ldr	r3, [pc, #372]	; (1d0cc <MyWrapper+0x1e4>)
   1cf58:	4798      	blx	r3
   1cf5a:	0003      	movs	r3, r0
   1cf5c:	001a      	movs	r2, r3
   1cf5e:	4b5c      	ldr	r3, [pc, #368]	; (1d0d0 <MyWrapper+0x1e8>)
   1cf60:	881b      	ldrh	r3, [r3, #0]
   1cf62:	4013      	ands	r3, r2
   1cf64:	b29b      	uxth	r3, r3
   1cf66:	2b00      	cmp	r3, #0
   1cf68:	d022      	beq.n	1cfb0 <MyWrapper+0xc8>
   1cf6a:	687b      	ldr	r3, [r7, #4]
   1cf6c:	2b00      	cmp	r3, #0
   1cf6e:	d10b      	bne.n	1cf88 <MyWrapper+0xa0>
   1cf70:	6a3b      	ldr	r3, [r7, #32]
   1cf72:	0018      	movs	r0, r3
   1cf74:	4b57      	ldr	r3, [pc, #348]	; (1d0d4 <MyWrapper+0x1ec>)
   1cf76:	4798      	blx	r3
   1cf78:	0003      	movs	r3, r0
   1cf7a:	001a      	movs	r2, r3
   1cf7c:	4b56      	ldr	r3, [pc, #344]	; (1d0d8 <MyWrapper+0x1f0>)
   1cf7e:	5c9b      	ldrb	r3, [r3, r2]
   1cf80:	3330      	adds	r3, #48	; 0x30
   1cf82:	b2db      	uxtb	r3, r3
   1cf84:	001d      	movs	r5, r3
   1cf86:	e000      	b.n	1cf8a <MyWrapper+0xa2>
   1cf88:	2535      	movs	r5, #53	; 0x35
   1cf8a:	6a3b      	ldr	r3, [r7, #32]
   1cf8c:	0018      	movs	r0, r3
   1cf8e:	4b51      	ldr	r3, [pc, #324]	; (1d0d4 <MyWrapper+0x1ec>)
   1cf90:	4798      	blx	r3
   1cf92:	0003      	movs	r3, r0
   1cf94:	001a      	movs	r2, r3
   1cf96:	4b50      	ldr	r3, [pc, #320]	; (1d0d8 <MyWrapper+0x1f0>)
   1cf98:	5c9c      	ldrb	r4, [r3, r2]
   1cf9a:	6a3b      	ldr	r3, [r7, #32]
   1cf9c:	0018      	movs	r0, r3
   1cf9e:	4b4f      	ldr	r3, [pc, #316]	; (1d0dc <MyWrapper+0x1f4>)
   1cfa0:	4798      	blx	r3
   1cfa2:	0003      	movs	r3, r0
   1cfa4:	b2db      	uxtb	r3, r3
   1cfa6:	001a      	movs	r2, r3
   1cfa8:	0021      	movs	r1, r4
   1cfaa:	0028      	movs	r0, r5
   1cfac:	4b4c      	ldr	r3, [pc, #304]	; (1d0e0 <MyWrapper+0x1f8>)
   1cfae:	4798      	blx	r3
   1cfb0:	6a3b      	ldr	r3, [r7, #32]
   1cfb2:	0018      	movs	r0, r3
   1cfb4:	4b47      	ldr	r3, [pc, #284]	; (1d0d4 <MyWrapper+0x1ec>)
   1cfb6:	4798      	blx	r3
   1cfb8:	0003      	movs	r3, r0
   1cfba:	001a      	movs	r2, r3
   1cfbc:	4b46      	ldr	r3, [pc, #280]	; (1d0d8 <MyWrapper+0x1f0>)
   1cfbe:	5c9c      	ldrb	r4, [r3, r2]
   1cfc0:	6a3b      	ldr	r3, [r7, #32]
   1cfc2:	0018      	movs	r0, r3
   1cfc4:	4b45      	ldr	r3, [pc, #276]	; (1d0dc <MyWrapper+0x1f4>)
   1cfc6:	4798      	blx	r3
   1cfc8:	0003      	movs	r3, r0
   1cfca:	b2d9      	uxtb	r1, r3
   1cfcc:	6a3b      	ldr	r3, [r7, #32]
   1cfce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1cfd0:	b2db      	uxtb	r3, r3
   1cfd2:	3301      	adds	r3, #1
   1cfd4:	b2db      	uxtb	r3, r3
   1cfd6:	001a      	movs	r2, r3
   1cfd8:	0020      	movs	r0, r4
   1cfda:	4b42      	ldr	r3, [pc, #264]	; (1d0e4 <MyWrapper+0x1fc>)
   1cfdc:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1cfde:	69bb      	ldr	r3, [r7, #24]
   1cfe0:	1c5a      	adds	r2, r3, #1
   1cfe2:	6a3b      	ldr	r3, [r7, #32]
   1cfe4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1cfe6:	2317      	movs	r3, #23
   1cfe8:	18fb      	adds	r3, r7, r3
   1cfea:	781b      	ldrb	r3, [r3, #0]
   1cfec:	b25b      	sxtb	r3, r3
   1cfee:	3301      	adds	r3, #1
   1cff0:	d123      	bne.n	1d03a <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1cff2:	6a3b      	ldr	r3, [r7, #32]
   1cff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1cff6:	2b00      	cmp	r3, #0
   1cff8:	d00d      	beq.n	1d016 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1cffa:	6a3b      	ldr	r3, [r7, #32]
   1cffc:	2100      	movs	r1, #0
   1cffe:	0018      	movs	r0, r3
   1d000:	4b39      	ldr	r3, [pc, #228]	; (1d0e8 <MyWrapper+0x200>)
   1d002:	4798      	blx	r3
   1d004:	1e03      	subs	r3, r0, #0
   1d006:	d021      	beq.n	1d04c <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1d008:	68bb      	ldr	r3, [r7, #8]
   1d00a:	2b00      	cmp	r3, #0
   1d00c:	d01e      	beq.n	1d04c <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1d00e:	68bb      	ldr	r3, [r7, #8]
   1d010:	2201      	movs	r2, #1
   1d012:	601a      	str	r2, [r3, #0]
   1d014:	e01a      	b.n	1d04c <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1d016:	6a3b      	ldr	r3, [r7, #32]
   1d018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d01a:	2b00      	cmp	r3, #0
   1d01c:	d016      	beq.n	1d04c <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1d01e:	6a3b      	ldr	r3, [r7, #32]
   1d020:	3324      	adds	r3, #36	; 0x24
   1d022:	0018      	movs	r0, r3
   1d024:	4b31      	ldr	r3, [pc, #196]	; (1d0ec <MyWrapper+0x204>)
   1d026:	4798      	blx	r3
   1d028:	1e03      	subs	r3, r0, #0
   1d02a:	d00f      	beq.n	1d04c <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1d02c:	68bb      	ldr	r3, [r7, #8]
   1d02e:	2b00      	cmp	r3, #0
   1d030:	d00c      	beq.n	1d04c <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1d032:	68bb      	ldr	r3, [r7, #8]
   1d034:	2201      	movs	r2, #1
   1d036:	601a      	str	r2, [r3, #0]
   1d038:	e008      	b.n	1d04c <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1d03a:	2317      	movs	r3, #23
   1d03c:	18fb      	adds	r3, r7, r3
   1d03e:	781b      	ldrb	r3, [r3, #0]
   1d040:	3301      	adds	r3, #1
   1d042:	b2db      	uxtb	r3, r3
   1d044:	b259      	sxtb	r1, r3
   1d046:	6a3b      	ldr	r3, [r7, #32]
   1d048:	2245      	movs	r2, #69	; 0x45
   1d04a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1d04c:	2301      	movs	r3, #1
   1d04e:	627b      	str	r3, [r7, #36]	; 0x24
   1d050:	e030      	b.n	1d0b4 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1d052:	6a3b      	ldr	r3, [r7, #32]
   1d054:	0018      	movs	r0, r3
   1d056:	4b1d      	ldr	r3, [pc, #116]	; (1d0cc <MyWrapper+0x1e4>)
   1d058:	4798      	blx	r3
   1d05a:	0003      	movs	r3, r0
   1d05c:	001a      	movs	r2, r3
   1d05e:	4b1c      	ldr	r3, [pc, #112]	; (1d0d0 <MyWrapper+0x1e8>)
   1d060:	881b      	ldrh	r3, [r3, #0]
   1d062:	4013      	ands	r3, r2
   1d064:	b29b      	uxth	r3, r3
   1d066:	2b00      	cmp	r3, #0
   1d068:	d022      	beq.n	1d0b0 <MyWrapper+0x1c8>
   1d06a:	687b      	ldr	r3, [r7, #4]
   1d06c:	2b00      	cmp	r3, #0
   1d06e:	d10b      	bne.n	1d088 <MyWrapper+0x1a0>
   1d070:	6a3b      	ldr	r3, [r7, #32]
   1d072:	0018      	movs	r0, r3
   1d074:	4b17      	ldr	r3, [pc, #92]	; (1d0d4 <MyWrapper+0x1ec>)
   1d076:	4798      	blx	r3
   1d078:	0003      	movs	r3, r0
   1d07a:	001a      	movs	r2, r3
   1d07c:	4b16      	ldr	r3, [pc, #88]	; (1d0d8 <MyWrapper+0x1f0>)
   1d07e:	5c9b      	ldrb	r3, [r3, r2]
   1d080:	3358      	adds	r3, #88	; 0x58
   1d082:	b2db      	uxtb	r3, r3
   1d084:	001d      	movs	r5, r3
   1d086:	e000      	b.n	1d08a <MyWrapper+0x1a2>
   1d088:	255d      	movs	r5, #93	; 0x5d
   1d08a:	6a3b      	ldr	r3, [r7, #32]
   1d08c:	0018      	movs	r0, r3
   1d08e:	4b11      	ldr	r3, [pc, #68]	; (1d0d4 <MyWrapper+0x1ec>)
   1d090:	4798      	blx	r3
   1d092:	0003      	movs	r3, r0
   1d094:	001a      	movs	r2, r3
   1d096:	4b10      	ldr	r3, [pc, #64]	; (1d0d8 <MyWrapper+0x1f0>)
   1d098:	5c9c      	ldrb	r4, [r3, r2]
   1d09a:	6a3b      	ldr	r3, [r7, #32]
   1d09c:	0018      	movs	r0, r3
   1d09e:	4b0f      	ldr	r3, [pc, #60]	; (1d0dc <MyWrapper+0x1f4>)
   1d0a0:	4798      	blx	r3
   1d0a2:	0003      	movs	r3, r0
   1d0a4:	b2db      	uxtb	r3, r3
   1d0a6:	001a      	movs	r2, r3
   1d0a8:	0021      	movs	r1, r4
   1d0aa:	0028      	movs	r0, r5
   1d0ac:	4b0c      	ldr	r3, [pc, #48]	; (1d0e0 <MyWrapper+0x1f8>)
   1d0ae:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1d0b0:	2300      	movs	r3, #0
   1d0b2:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1d0b4:	69fb      	ldr	r3, [r7, #28]
   1d0b6:	0018      	movs	r0, r3
   1d0b8:	4b0d      	ldr	r3, [pc, #52]	; (1d0f0 <MyWrapper+0x208>)
   1d0ba:	4798      	blx	r3

	return xReturn;
   1d0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1d0be:	0018      	movs	r0, r3
   1d0c0:	46bd      	mov	sp, r7
   1d0c2:	b00a      	add	sp, #40	; 0x28
   1d0c4:	bdb0      	pop	{r4, r5, r7, pc}
   1d0c6:	46c0      	nop			; (mov r8, r8)
   1d0c8:	0001c2fd 	.word	0x0001c2fd
   1d0cc:	0001a35d 	.word	0x0001a35d
   1d0d0:	20000104 	.word	0x20000104
   1d0d4:	0001a25d 	.word	0x0001a25d
   1d0d8:	200000f8 	.word	0x200000f8
   1d0dc:	0001a33d 	.word	0x0001a33d
   1d0e0:	0001ac95 	.word	0x0001ac95
   1d0e4:	0001b2f1 	.word	0x0001b2f1
   1d0e8:	0001dd79 	.word	0x0001dd79
   1d0ec:	0001eb39 	.word	0x0001eb39
   1d0f0:	0001c309 	.word	0x0001c309

0001d0f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1d0f4:	b5b0      	push	{r4, r5, r7, lr}
   1d0f6:	b08a      	sub	sp, #40	; 0x28
   1d0f8:	af00      	add	r7, sp, #0
   1d0fa:	60f8      	str	r0, [r7, #12]
   1d0fc:	60b9      	str	r1, [r7, #8]
   1d0fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1d100:	2300      	movs	r3, #0
   1d102:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1d104:	68fb      	ldr	r3, [r7, #12]
   1d106:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1d108:	6a3b      	ldr	r3, [r7, #32]
   1d10a:	2b00      	cmp	r3, #0
   1d10c:	d101      	bne.n	1d112 <xQueueReceive+0x1e>
   1d10e:	b672      	cpsid	i
   1d110:	e7fe      	b.n	1d110 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1d112:	68bb      	ldr	r3, [r7, #8]
   1d114:	2b00      	cmp	r3, #0
   1d116:	d103      	bne.n	1d120 <xQueueReceive+0x2c>
   1d118:	6a3b      	ldr	r3, [r7, #32]
   1d11a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d11c:	2b00      	cmp	r3, #0
   1d11e:	d101      	bne.n	1d124 <xQueueReceive+0x30>
   1d120:	2301      	movs	r3, #1
   1d122:	e000      	b.n	1d126 <xQueueReceive+0x32>
   1d124:	2300      	movs	r3, #0
   1d126:	2b00      	cmp	r3, #0
   1d128:	d101      	bne.n	1d12e <xQueueReceive+0x3a>
   1d12a:	b672      	cpsid	i
   1d12c:	e7fe      	b.n	1d12c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1d12e:	4bbf      	ldr	r3, [pc, #764]	; (1d42c <xQueueReceive+0x338>)
   1d130:	4798      	blx	r3
   1d132:	1e03      	subs	r3, r0, #0
   1d134:	d102      	bne.n	1d13c <xQueueReceive+0x48>
   1d136:	687b      	ldr	r3, [r7, #4]
   1d138:	2b00      	cmp	r3, #0
   1d13a:	d101      	bne.n	1d140 <xQueueReceive+0x4c>
   1d13c:	2301      	movs	r3, #1
   1d13e:	e000      	b.n	1d142 <xQueueReceive+0x4e>
   1d140:	2300      	movs	r3, #0
   1d142:	2b00      	cmp	r3, #0
   1d144:	d101      	bne.n	1d14a <xQueueReceive+0x56>
   1d146:	b672      	cpsid	i
   1d148:	e7fe      	b.n	1d148 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1d14a:	4bb9      	ldr	r3, [pc, #740]	; (1d430 <xQueueReceive+0x33c>)
   1d14c:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1d14e:	6a3b      	ldr	r3, [r7, #32]
   1d150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d152:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1d154:	69fb      	ldr	r3, [r7, #28]
   1d156:	2b00      	cmp	r3, #0
   1d158:	d100      	bne.n	1d15c <xQueueReceive+0x68>
   1d15a:	e07d      	b.n	1d258 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1d15c:	68ba      	ldr	r2, [r7, #8]
   1d15e:	6a3b      	ldr	r3, [r7, #32]
   1d160:	0011      	movs	r1, r2
   1d162:	0018      	movs	r0, r3
   1d164:	4bb3      	ldr	r3, [pc, #716]	; (1d434 <xQueueReceive+0x340>)
   1d166:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1d168:	4bb3      	ldr	r3, [pc, #716]	; (1d438 <xQueueReceive+0x344>)
   1d16a:	4798      	blx	r3
   1d16c:	0003      	movs	r3, r0
   1d16e:	0018      	movs	r0, r3
   1d170:	4bb2      	ldr	r3, [pc, #712]	; (1d43c <xQueueReceive+0x348>)
   1d172:	4798      	blx	r3
   1d174:	0003      	movs	r3, r0
   1d176:	001a      	movs	r2, r3
   1d178:	4bb1      	ldr	r3, [pc, #708]	; (1d440 <xQueueReceive+0x34c>)
   1d17a:	881b      	ldrh	r3, [r3, #0]
   1d17c:	4013      	ands	r3, r2
   1d17e:	b29b      	uxth	r3, r3
   1d180:	2b00      	cmp	r3, #0
   1d182:	d029      	beq.n	1d1d8 <xQueueReceive+0xe4>
   1d184:	6a3b      	ldr	r3, [r7, #32]
   1d186:	0018      	movs	r0, r3
   1d188:	4bae      	ldr	r3, [pc, #696]	; (1d444 <xQueueReceive+0x350>)
   1d18a:	4798      	blx	r3
   1d18c:	0003      	movs	r3, r0
   1d18e:	001a      	movs	r2, r3
   1d190:	4bab      	ldr	r3, [pc, #684]	; (1d440 <xQueueReceive+0x34c>)
   1d192:	881b      	ldrh	r3, [r3, #0]
   1d194:	4013      	ands	r3, r2
   1d196:	b29b      	uxth	r3, r3
   1d198:	2b00      	cmp	r3, #0
   1d19a:	d01d      	beq.n	1d1d8 <xQueueReceive+0xe4>
   1d19c:	6a3b      	ldr	r3, [r7, #32]
   1d19e:	0018      	movs	r0, r3
   1d1a0:	4ba9      	ldr	r3, [pc, #676]	; (1d448 <xQueueReceive+0x354>)
   1d1a2:	4798      	blx	r3
   1d1a4:	0003      	movs	r3, r0
   1d1a6:	001a      	movs	r2, r3
   1d1a8:	4ba8      	ldr	r3, [pc, #672]	; (1d44c <xQueueReceive+0x358>)
   1d1aa:	5c9b      	ldrb	r3, [r3, r2]
   1d1ac:	3328      	adds	r3, #40	; 0x28
   1d1ae:	b2db      	uxtb	r3, r3
   1d1b0:	001d      	movs	r5, r3
   1d1b2:	6a3b      	ldr	r3, [r7, #32]
   1d1b4:	0018      	movs	r0, r3
   1d1b6:	4ba4      	ldr	r3, [pc, #656]	; (1d448 <xQueueReceive+0x354>)
   1d1b8:	4798      	blx	r3
   1d1ba:	0003      	movs	r3, r0
   1d1bc:	001a      	movs	r2, r3
   1d1be:	4ba3      	ldr	r3, [pc, #652]	; (1d44c <xQueueReceive+0x358>)
   1d1c0:	5c9c      	ldrb	r4, [r3, r2]
   1d1c2:	6a3b      	ldr	r3, [r7, #32]
   1d1c4:	0018      	movs	r0, r3
   1d1c6:	4ba2      	ldr	r3, [pc, #648]	; (1d450 <xQueueReceive+0x35c>)
   1d1c8:	4798      	blx	r3
   1d1ca:	0003      	movs	r3, r0
   1d1cc:	b2db      	uxtb	r3, r3
   1d1ce:	001a      	movs	r2, r3
   1d1d0:	0021      	movs	r1, r4
   1d1d2:	0028      	movs	r0, r5
   1d1d4:	4b9f      	ldr	r3, [pc, #636]	; (1d454 <xQueueReceive+0x360>)
   1d1d6:	4798      	blx	r3
   1d1d8:	6a3b      	ldr	r3, [r7, #32]
   1d1da:	0018      	movs	r0, r3
   1d1dc:	4b9a      	ldr	r3, [pc, #616]	; (1d448 <xQueueReceive+0x354>)
   1d1de:	4798      	blx	r3
   1d1e0:	0003      	movs	r3, r0
   1d1e2:	001a      	movs	r2, r3
   1d1e4:	4b99      	ldr	r3, [pc, #612]	; (1d44c <xQueueReceive+0x358>)
   1d1e6:	5c9c      	ldrb	r4, [r3, r2]
   1d1e8:	6a3b      	ldr	r3, [r7, #32]
   1d1ea:	0018      	movs	r0, r3
   1d1ec:	4b98      	ldr	r3, [pc, #608]	; (1d450 <xQueueReceive+0x35c>)
   1d1ee:	4798      	blx	r3
   1d1f0:	0003      	movs	r3, r0
   1d1f2:	b2dd      	uxtb	r5, r3
   1d1f4:	6a3b      	ldr	r3, [r7, #32]
   1d1f6:	0018      	movs	r0, r3
   1d1f8:	4b93      	ldr	r3, [pc, #588]	; (1d448 <xQueueReceive+0x354>)
   1d1fa:	4798      	blx	r3
   1d1fc:	0003      	movs	r3, r0
   1d1fe:	001a      	movs	r2, r3
   1d200:	4b92      	ldr	r3, [pc, #584]	; (1d44c <xQueueReceive+0x358>)
   1d202:	5c9b      	ldrb	r3, [r3, r2]
   1d204:	2b02      	cmp	r3, #2
   1d206:	d108      	bne.n	1d21a <xQueueReceive+0x126>
   1d208:	4b8b      	ldr	r3, [pc, #556]	; (1d438 <xQueueReceive+0x344>)
   1d20a:	4798      	blx	r3
   1d20c:	0003      	movs	r3, r0
   1d20e:	0018      	movs	r0, r3
   1d210:	4b91      	ldr	r3, [pc, #580]	; (1d458 <xQueueReceive+0x364>)
   1d212:	4798      	blx	r3
   1d214:	0003      	movs	r3, r0
   1d216:	b2db      	uxtb	r3, r3
   1d218:	e004      	b.n	1d224 <xQueueReceive+0x130>
   1d21a:	6a3b      	ldr	r3, [r7, #32]
   1d21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d21e:	b2db      	uxtb	r3, r3
   1d220:	3b01      	subs	r3, #1
   1d222:	b2db      	uxtb	r3, r3
   1d224:	001a      	movs	r2, r3
   1d226:	0029      	movs	r1, r5
   1d228:	0020      	movs	r0, r4
   1d22a:	4b8c      	ldr	r3, [pc, #560]	; (1d45c <xQueueReceive+0x368>)
   1d22c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1d22e:	69fb      	ldr	r3, [r7, #28]
   1d230:	1e5a      	subs	r2, r3, #1
   1d232:	6a3b      	ldr	r3, [r7, #32]
   1d234:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1d236:	6a3b      	ldr	r3, [r7, #32]
   1d238:	691b      	ldr	r3, [r3, #16]
   1d23a:	2b00      	cmp	r3, #0
   1d23c:	d008      	beq.n	1d250 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1d23e:	6a3b      	ldr	r3, [r7, #32]
   1d240:	3310      	adds	r3, #16
   1d242:	0018      	movs	r0, r3
   1d244:	4b86      	ldr	r3, [pc, #536]	; (1d460 <xQueueReceive+0x36c>)
   1d246:	4798      	blx	r3
   1d248:	1e03      	subs	r3, r0, #0
   1d24a:	d001      	beq.n	1d250 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1d24c:	4b85      	ldr	r3, [pc, #532]	; (1d464 <xQueueReceive+0x370>)
   1d24e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1d250:	4b85      	ldr	r3, [pc, #532]	; (1d468 <xQueueReceive+0x374>)
   1d252:	4798      	blx	r3
				return pdPASS;
   1d254:	2301      	movs	r3, #1
   1d256:	e15f      	b.n	1d518 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1d258:	687b      	ldr	r3, [r7, #4]
   1d25a:	2b00      	cmp	r3, #0
   1d25c:	d13b      	bne.n	1d2d6 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1d25e:	4b82      	ldr	r3, [pc, #520]	; (1d468 <xQueueReceive+0x374>)
   1d260:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1d262:	4b75      	ldr	r3, [pc, #468]	; (1d438 <xQueueReceive+0x344>)
   1d264:	4798      	blx	r3
   1d266:	0003      	movs	r3, r0
   1d268:	0018      	movs	r0, r3
   1d26a:	4b74      	ldr	r3, [pc, #464]	; (1d43c <xQueueReceive+0x348>)
   1d26c:	4798      	blx	r3
   1d26e:	0003      	movs	r3, r0
   1d270:	001a      	movs	r2, r3
   1d272:	4b73      	ldr	r3, [pc, #460]	; (1d440 <xQueueReceive+0x34c>)
   1d274:	881b      	ldrh	r3, [r3, #0]
   1d276:	4013      	ands	r3, r2
   1d278:	b29b      	uxth	r3, r3
   1d27a:	2b00      	cmp	r3, #0
   1d27c:	d029      	beq.n	1d2d2 <xQueueReceive+0x1de>
   1d27e:	6a3b      	ldr	r3, [r7, #32]
   1d280:	0018      	movs	r0, r3
   1d282:	4b70      	ldr	r3, [pc, #448]	; (1d444 <xQueueReceive+0x350>)
   1d284:	4798      	blx	r3
   1d286:	0003      	movs	r3, r0
   1d288:	001a      	movs	r2, r3
   1d28a:	4b6d      	ldr	r3, [pc, #436]	; (1d440 <xQueueReceive+0x34c>)
   1d28c:	881b      	ldrh	r3, [r3, #0]
   1d28e:	4013      	ands	r3, r2
   1d290:	b29b      	uxth	r3, r3
   1d292:	2b00      	cmp	r3, #0
   1d294:	d01d      	beq.n	1d2d2 <xQueueReceive+0x1de>
   1d296:	6a3b      	ldr	r3, [r7, #32]
   1d298:	0018      	movs	r0, r3
   1d29a:	4b6b      	ldr	r3, [pc, #428]	; (1d448 <xQueueReceive+0x354>)
   1d29c:	4798      	blx	r3
   1d29e:	0003      	movs	r3, r0
   1d2a0:	001a      	movs	r2, r3
   1d2a2:	4b6a      	ldr	r3, [pc, #424]	; (1d44c <xQueueReceive+0x358>)
   1d2a4:	5c9b      	ldrb	r3, [r3, r2]
   1d2a6:	3350      	adds	r3, #80	; 0x50
   1d2a8:	b2db      	uxtb	r3, r3
   1d2aa:	001d      	movs	r5, r3
   1d2ac:	6a3b      	ldr	r3, [r7, #32]
   1d2ae:	0018      	movs	r0, r3
   1d2b0:	4b65      	ldr	r3, [pc, #404]	; (1d448 <xQueueReceive+0x354>)
   1d2b2:	4798      	blx	r3
   1d2b4:	0003      	movs	r3, r0
   1d2b6:	001a      	movs	r2, r3
   1d2b8:	4b64      	ldr	r3, [pc, #400]	; (1d44c <xQueueReceive+0x358>)
   1d2ba:	5c9c      	ldrb	r4, [r3, r2]
   1d2bc:	6a3b      	ldr	r3, [r7, #32]
   1d2be:	0018      	movs	r0, r3
   1d2c0:	4b63      	ldr	r3, [pc, #396]	; (1d450 <xQueueReceive+0x35c>)
   1d2c2:	4798      	blx	r3
   1d2c4:	0003      	movs	r3, r0
   1d2c6:	b2db      	uxtb	r3, r3
   1d2c8:	001a      	movs	r2, r3
   1d2ca:	0021      	movs	r1, r4
   1d2cc:	0028      	movs	r0, r5
   1d2ce:	4b61      	ldr	r3, [pc, #388]	; (1d454 <xQueueReceive+0x360>)
   1d2d0:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1d2d2:	2300      	movs	r3, #0
   1d2d4:	e120      	b.n	1d518 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1d2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d2d8:	2b00      	cmp	r3, #0
   1d2da:	d106      	bne.n	1d2ea <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1d2dc:	2314      	movs	r3, #20
   1d2de:	18fb      	adds	r3, r7, r3
   1d2e0:	0018      	movs	r0, r3
   1d2e2:	4b62      	ldr	r3, [pc, #392]	; (1d46c <xQueueReceive+0x378>)
   1d2e4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1d2e6:	2301      	movs	r3, #1
   1d2e8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1d2ea:	4b5f      	ldr	r3, [pc, #380]	; (1d468 <xQueueReceive+0x374>)
   1d2ec:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1d2ee:	4b60      	ldr	r3, [pc, #384]	; (1d470 <xQueueReceive+0x37c>)
   1d2f0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1d2f2:	4b4f      	ldr	r3, [pc, #316]	; (1d430 <xQueueReceive+0x33c>)
   1d2f4:	4798      	blx	r3
   1d2f6:	6a3b      	ldr	r3, [r7, #32]
   1d2f8:	2244      	movs	r2, #68	; 0x44
   1d2fa:	5c9b      	ldrb	r3, [r3, r2]
   1d2fc:	b25b      	sxtb	r3, r3
   1d2fe:	3301      	adds	r3, #1
   1d300:	d103      	bne.n	1d30a <xQueueReceive+0x216>
   1d302:	6a3b      	ldr	r3, [r7, #32]
   1d304:	2244      	movs	r2, #68	; 0x44
   1d306:	2100      	movs	r1, #0
   1d308:	5499      	strb	r1, [r3, r2]
   1d30a:	6a3b      	ldr	r3, [r7, #32]
   1d30c:	2245      	movs	r2, #69	; 0x45
   1d30e:	5c9b      	ldrb	r3, [r3, r2]
   1d310:	b25b      	sxtb	r3, r3
   1d312:	3301      	adds	r3, #1
   1d314:	d103      	bne.n	1d31e <xQueueReceive+0x22a>
   1d316:	6a3b      	ldr	r3, [r7, #32]
   1d318:	2245      	movs	r2, #69	; 0x45
   1d31a:	2100      	movs	r1, #0
   1d31c:	5499      	strb	r1, [r3, r2]
   1d31e:	4b52      	ldr	r3, [pc, #328]	; (1d468 <xQueueReceive+0x374>)
   1d320:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1d322:	1d3a      	adds	r2, r7, #4
   1d324:	2314      	movs	r3, #20
   1d326:	18fb      	adds	r3, r7, r3
   1d328:	0011      	movs	r1, r2
   1d32a:	0018      	movs	r0, r3
   1d32c:	4b51      	ldr	r3, [pc, #324]	; (1d474 <xQueueReceive+0x380>)
   1d32e:	4798      	blx	r3
   1d330:	1e03      	subs	r3, r0, #0
   1d332:	d000      	beq.n	1d336 <xQueueReceive+0x242>
   1d334:	e0aa      	b.n	1d48c <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1d336:	6a3b      	ldr	r3, [r7, #32]
   1d338:	0018      	movs	r0, r3
   1d33a:	4b4f      	ldr	r3, [pc, #316]	; (1d478 <xQueueReceive+0x384>)
   1d33c:	4798      	blx	r3
   1d33e:	1e03      	subs	r3, r0, #0
   1d340:	d06d      	beq.n	1d41e <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1d342:	4b3d      	ldr	r3, [pc, #244]	; (1d438 <xQueueReceive+0x344>)
   1d344:	4798      	blx	r3
   1d346:	0003      	movs	r3, r0
   1d348:	0018      	movs	r0, r3
   1d34a:	4b3c      	ldr	r3, [pc, #240]	; (1d43c <xQueueReceive+0x348>)
   1d34c:	4798      	blx	r3
   1d34e:	0003      	movs	r3, r0
   1d350:	001a      	movs	r2, r3
   1d352:	4b3b      	ldr	r3, [pc, #236]	; (1d440 <xQueueReceive+0x34c>)
   1d354:	881b      	ldrh	r3, [r3, #0]
   1d356:	4013      	ands	r3, r2
   1d358:	b29b      	uxth	r3, r3
   1d35a:	2b00      	cmp	r3, #0
   1d35c:	d029      	beq.n	1d3b2 <xQueueReceive+0x2be>
   1d35e:	6a3b      	ldr	r3, [r7, #32]
   1d360:	0018      	movs	r0, r3
   1d362:	4b38      	ldr	r3, [pc, #224]	; (1d444 <xQueueReceive+0x350>)
   1d364:	4798      	blx	r3
   1d366:	0003      	movs	r3, r0
   1d368:	001a      	movs	r2, r3
   1d36a:	4b35      	ldr	r3, [pc, #212]	; (1d440 <xQueueReceive+0x34c>)
   1d36c:	881b      	ldrh	r3, [r3, #0]
   1d36e:	4013      	ands	r3, r2
   1d370:	b29b      	uxth	r3, r3
   1d372:	2b00      	cmp	r3, #0
   1d374:	d01d      	beq.n	1d3b2 <xQueueReceive+0x2be>
   1d376:	6a3b      	ldr	r3, [r7, #32]
   1d378:	0018      	movs	r0, r3
   1d37a:	4b33      	ldr	r3, [pc, #204]	; (1d448 <xQueueReceive+0x354>)
   1d37c:	4798      	blx	r3
   1d37e:	0003      	movs	r3, r0
   1d380:	001a      	movs	r2, r3
   1d382:	4b32      	ldr	r3, [pc, #200]	; (1d44c <xQueueReceive+0x358>)
   1d384:	5c9b      	ldrb	r3, [r3, r2]
   1d386:	3368      	adds	r3, #104	; 0x68
   1d388:	b2db      	uxtb	r3, r3
   1d38a:	001d      	movs	r5, r3
   1d38c:	6a3b      	ldr	r3, [r7, #32]
   1d38e:	0018      	movs	r0, r3
   1d390:	4b2d      	ldr	r3, [pc, #180]	; (1d448 <xQueueReceive+0x354>)
   1d392:	4798      	blx	r3
   1d394:	0003      	movs	r3, r0
   1d396:	001a      	movs	r2, r3
   1d398:	4b2c      	ldr	r3, [pc, #176]	; (1d44c <xQueueReceive+0x358>)
   1d39a:	5c9c      	ldrb	r4, [r3, r2]
   1d39c:	6a3b      	ldr	r3, [r7, #32]
   1d39e:	0018      	movs	r0, r3
   1d3a0:	4b2b      	ldr	r3, [pc, #172]	; (1d450 <xQueueReceive+0x35c>)
   1d3a2:	4798      	blx	r3
   1d3a4:	0003      	movs	r3, r0
   1d3a6:	b2db      	uxtb	r3, r3
   1d3a8:	001a      	movs	r2, r3
   1d3aa:	0021      	movs	r1, r4
   1d3ac:	0028      	movs	r0, r5
   1d3ae:	4b29      	ldr	r3, [pc, #164]	; (1d454 <xQueueReceive+0x360>)
   1d3b0:	4798      	blx	r3
   1d3b2:	6a3b      	ldr	r3, [r7, #32]
   1d3b4:	0018      	movs	r0, r3
   1d3b6:	4b24      	ldr	r3, [pc, #144]	; (1d448 <xQueueReceive+0x354>)
   1d3b8:	4798      	blx	r3
   1d3ba:	0003      	movs	r3, r0
   1d3bc:	001a      	movs	r2, r3
   1d3be:	4b23      	ldr	r3, [pc, #140]	; (1d44c <xQueueReceive+0x358>)
   1d3c0:	5c9b      	ldrb	r3, [r3, r2]
   1d3c2:	2b02      	cmp	r3, #2
   1d3c4:	d018      	beq.n	1d3f8 <xQueueReceive+0x304>
   1d3c6:	4b1c      	ldr	r3, [pc, #112]	; (1d438 <xQueueReceive+0x344>)
   1d3c8:	4798      	blx	r3
   1d3ca:	0003      	movs	r3, r0
   1d3cc:	0018      	movs	r0, r3
   1d3ce:	4b1b      	ldr	r3, [pc, #108]	; (1d43c <xQueueReceive+0x348>)
   1d3d0:	4798      	blx	r3
   1d3d2:	0003      	movs	r3, r0
   1d3d4:	001a      	movs	r2, r3
   1d3d6:	4b1a      	ldr	r3, [pc, #104]	; (1d440 <xQueueReceive+0x34c>)
   1d3d8:	881b      	ldrh	r3, [r3, #0]
   1d3da:	4013      	ands	r3, r2
   1d3dc:	b29b      	uxth	r3, r3
   1d3de:	2b00      	cmp	r3, #0
   1d3e0:	d00a      	beq.n	1d3f8 <xQueueReceive+0x304>
   1d3e2:	4b15      	ldr	r3, [pc, #84]	; (1d438 <xQueueReceive+0x344>)
   1d3e4:	4798      	blx	r3
   1d3e6:	0003      	movs	r3, r0
   1d3e8:	0018      	movs	r0, r3
   1d3ea:	4b1b      	ldr	r3, [pc, #108]	; (1d458 <xQueueReceive+0x364>)
   1d3ec:	4798      	blx	r3
   1d3ee:	0003      	movs	r3, r0
   1d3f0:	b2db      	uxtb	r3, r3
   1d3f2:	0018      	movs	r0, r3
   1d3f4:	4b21      	ldr	r3, [pc, #132]	; (1d47c <xQueueReceive+0x388>)
   1d3f6:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1d3f8:	6a3b      	ldr	r3, [r7, #32]
   1d3fa:	3324      	adds	r3, #36	; 0x24
   1d3fc:	687a      	ldr	r2, [r7, #4]
   1d3fe:	0011      	movs	r1, r2
   1d400:	0018      	movs	r0, r3
   1d402:	4b1f      	ldr	r3, [pc, #124]	; (1d480 <xQueueReceive+0x38c>)
   1d404:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1d406:	6a3b      	ldr	r3, [r7, #32]
   1d408:	0018      	movs	r0, r3
   1d40a:	4b1e      	ldr	r3, [pc, #120]	; (1d484 <xQueueReceive+0x390>)
   1d40c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1d40e:	4b1e      	ldr	r3, [pc, #120]	; (1d488 <xQueueReceive+0x394>)
   1d410:	4798      	blx	r3
   1d412:	1e03      	subs	r3, r0, #0
   1d414:	d000      	beq.n	1d418 <xQueueReceive+0x324>
   1d416:	e698      	b.n	1d14a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1d418:	4b12      	ldr	r3, [pc, #72]	; (1d464 <xQueueReceive+0x370>)
   1d41a:	4798      	blx	r3
   1d41c:	e695      	b.n	1d14a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1d41e:	6a3b      	ldr	r3, [r7, #32]
   1d420:	0018      	movs	r0, r3
   1d422:	4b18      	ldr	r3, [pc, #96]	; (1d484 <xQueueReceive+0x390>)
   1d424:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1d426:	4b18      	ldr	r3, [pc, #96]	; (1d488 <xQueueReceive+0x394>)
   1d428:	4798      	blx	r3
   1d42a:	e68e      	b.n	1d14a <xQueueReceive+0x56>
   1d42c:	0001efc9 	.word	0x0001efc9
   1d430:	0001c2a9 	.word	0x0001c2a9
   1d434:	0001db55 	.word	0x0001db55
   1d438:	0001a539 	.word	0x0001a539
   1d43c:	0001a29d 	.word	0x0001a29d
   1d440:	20000104 	.word	0x20000104
   1d444:	0001a35d 	.word	0x0001a35d
   1d448:	0001a25d 	.word	0x0001a25d
   1d44c:	200000f8 	.word	0x200000f8
   1d450:	0001a33d 	.word	0x0001a33d
   1d454:	0001ac95 	.word	0x0001ac95
   1d458:	0001a27d 	.word	0x0001a27d
   1d45c:	0001b2f1 	.word	0x0001b2f1
   1d460:	0001eb39 	.word	0x0001eb39
   1d464:	0001c291 	.word	0x0001c291
   1d468:	0001c2cd 	.word	0x0001c2cd
   1d46c:	0001ec79 	.word	0x0001ec79
   1d470:	0001e561 	.word	0x0001e561
   1d474:	0001eca1 	.word	0x0001eca1
   1d478:	0001dc95 	.word	0x0001dc95
   1d47c:	0001b42d 	.word	0x0001b42d
   1d480:	0001ea15 	.word	0x0001ea15
   1d484:	0001dba5 	.word	0x0001dba5
   1d488:	0001e579 	.word	0x0001e579
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1d48c:	6a3b      	ldr	r3, [r7, #32]
   1d48e:	0018      	movs	r0, r3
   1d490:	4b23      	ldr	r3, [pc, #140]	; (1d520 <xQueueReceive+0x42c>)
   1d492:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1d494:	4b23      	ldr	r3, [pc, #140]	; (1d524 <xQueueReceive+0x430>)
   1d496:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1d498:	6a3b      	ldr	r3, [r7, #32]
   1d49a:	0018      	movs	r0, r3
   1d49c:	4b22      	ldr	r3, [pc, #136]	; (1d528 <xQueueReceive+0x434>)
   1d49e:	4798      	blx	r3
   1d4a0:	1e03      	subs	r3, r0, #0
   1d4a2:	d100      	bne.n	1d4a6 <xQueueReceive+0x3b2>
   1d4a4:	e651      	b.n	1d14a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1d4a6:	4b21      	ldr	r3, [pc, #132]	; (1d52c <xQueueReceive+0x438>)
   1d4a8:	4798      	blx	r3
   1d4aa:	0003      	movs	r3, r0
   1d4ac:	0018      	movs	r0, r3
   1d4ae:	4b20      	ldr	r3, [pc, #128]	; (1d530 <xQueueReceive+0x43c>)
   1d4b0:	4798      	blx	r3
   1d4b2:	0003      	movs	r3, r0
   1d4b4:	001a      	movs	r2, r3
   1d4b6:	4b1f      	ldr	r3, [pc, #124]	; (1d534 <xQueueReceive+0x440>)
   1d4b8:	881b      	ldrh	r3, [r3, #0]
   1d4ba:	4013      	ands	r3, r2
   1d4bc:	b29b      	uxth	r3, r3
   1d4be:	2b00      	cmp	r3, #0
   1d4c0:	d029      	beq.n	1d516 <xQueueReceive+0x422>
   1d4c2:	6a3b      	ldr	r3, [r7, #32]
   1d4c4:	0018      	movs	r0, r3
   1d4c6:	4b1c      	ldr	r3, [pc, #112]	; (1d538 <xQueueReceive+0x444>)
   1d4c8:	4798      	blx	r3
   1d4ca:	0003      	movs	r3, r0
   1d4cc:	001a      	movs	r2, r3
   1d4ce:	4b19      	ldr	r3, [pc, #100]	; (1d534 <xQueueReceive+0x440>)
   1d4d0:	881b      	ldrh	r3, [r3, #0]
   1d4d2:	4013      	ands	r3, r2
   1d4d4:	b29b      	uxth	r3, r3
   1d4d6:	2b00      	cmp	r3, #0
   1d4d8:	d01d      	beq.n	1d516 <xQueueReceive+0x422>
   1d4da:	6a3b      	ldr	r3, [r7, #32]
   1d4dc:	0018      	movs	r0, r3
   1d4de:	4b17      	ldr	r3, [pc, #92]	; (1d53c <xQueueReceive+0x448>)
   1d4e0:	4798      	blx	r3
   1d4e2:	0003      	movs	r3, r0
   1d4e4:	001a      	movs	r2, r3
   1d4e6:	4b16      	ldr	r3, [pc, #88]	; (1d540 <xQueueReceive+0x44c>)
   1d4e8:	5c9b      	ldrb	r3, [r3, r2]
   1d4ea:	3350      	adds	r3, #80	; 0x50
   1d4ec:	b2db      	uxtb	r3, r3
   1d4ee:	001d      	movs	r5, r3
   1d4f0:	6a3b      	ldr	r3, [r7, #32]
   1d4f2:	0018      	movs	r0, r3
   1d4f4:	4b11      	ldr	r3, [pc, #68]	; (1d53c <xQueueReceive+0x448>)
   1d4f6:	4798      	blx	r3
   1d4f8:	0003      	movs	r3, r0
   1d4fa:	001a      	movs	r2, r3
   1d4fc:	4b10      	ldr	r3, [pc, #64]	; (1d540 <xQueueReceive+0x44c>)
   1d4fe:	5c9c      	ldrb	r4, [r3, r2]
   1d500:	6a3b      	ldr	r3, [r7, #32]
   1d502:	0018      	movs	r0, r3
   1d504:	4b0f      	ldr	r3, [pc, #60]	; (1d544 <xQueueReceive+0x450>)
   1d506:	4798      	blx	r3
   1d508:	0003      	movs	r3, r0
   1d50a:	b2db      	uxtb	r3, r3
   1d50c:	001a      	movs	r2, r3
   1d50e:	0021      	movs	r1, r4
   1d510:	0028      	movs	r0, r5
   1d512:	4b0d      	ldr	r3, [pc, #52]	; (1d548 <xQueueReceive+0x454>)
   1d514:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1d516:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1d518:	0018      	movs	r0, r3
   1d51a:	46bd      	mov	sp, r7
   1d51c:	b00a      	add	sp, #40	; 0x28
   1d51e:	bdb0      	pop	{r4, r5, r7, pc}
   1d520:	0001dba5 	.word	0x0001dba5
   1d524:	0001e579 	.word	0x0001e579
   1d528:	0001dc95 	.word	0x0001dc95
   1d52c:	0001a539 	.word	0x0001a539
   1d530:	0001a29d 	.word	0x0001a29d
   1d534:	20000104 	.word	0x20000104
   1d538:	0001a35d 	.word	0x0001a35d
   1d53c:	0001a25d 	.word	0x0001a25d
   1d540:	200000f8 	.word	0x200000f8
   1d544:	0001a33d 	.word	0x0001a33d
   1d548:	0001ac95 	.word	0x0001ac95

0001d54c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1d54c:	b5b0      	push	{r4, r5, r7, lr}
   1d54e:	b08a      	sub	sp, #40	; 0x28
   1d550:	af00      	add	r7, sp, #0
   1d552:	6078      	str	r0, [r7, #4]
   1d554:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1d556:	2300      	movs	r3, #0
   1d558:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1d55a:	687b      	ldr	r3, [r7, #4]
   1d55c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1d55e:	2300      	movs	r3, #0
   1d560:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1d562:	69fb      	ldr	r3, [r7, #28]
   1d564:	2b00      	cmp	r3, #0
   1d566:	d101      	bne.n	1d56c <xQueueSemaphoreTake+0x20>
   1d568:	b672      	cpsid	i
   1d56a:	e7fe      	b.n	1d56a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1d56c:	69fb      	ldr	r3, [r7, #28]
   1d56e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d570:	2b00      	cmp	r3, #0
   1d572:	d001      	beq.n	1d578 <xQueueSemaphoreTake+0x2c>
   1d574:	b672      	cpsid	i
   1d576:	e7fe      	b.n	1d576 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1d578:	4bcb      	ldr	r3, [pc, #812]	; (1d8a8 <xQueueSemaphoreTake+0x35c>)
   1d57a:	4798      	blx	r3
   1d57c:	1e03      	subs	r3, r0, #0
   1d57e:	d102      	bne.n	1d586 <xQueueSemaphoreTake+0x3a>
   1d580:	683b      	ldr	r3, [r7, #0]
   1d582:	2b00      	cmp	r3, #0
   1d584:	d101      	bne.n	1d58a <xQueueSemaphoreTake+0x3e>
   1d586:	2301      	movs	r3, #1
   1d588:	e000      	b.n	1d58c <xQueueSemaphoreTake+0x40>
   1d58a:	2300      	movs	r3, #0
   1d58c:	2b00      	cmp	r3, #0
   1d58e:	d101      	bne.n	1d594 <xQueueSemaphoreTake+0x48>
   1d590:	b672      	cpsid	i
   1d592:	e7fe      	b.n	1d592 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1d594:	4bc5      	ldr	r3, [pc, #788]	; (1d8ac <xQueueSemaphoreTake+0x360>)
   1d596:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1d598:	69fb      	ldr	r3, [r7, #28]
   1d59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d59c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1d59e:	69bb      	ldr	r3, [r7, #24]
   1d5a0:	2b00      	cmp	r3, #0
   1d5a2:	d100      	bne.n	1d5a6 <xQueueSemaphoreTake+0x5a>
   1d5a4:	e080      	b.n	1d6a8 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1d5a6:	4bc2      	ldr	r3, [pc, #776]	; (1d8b0 <xQueueSemaphoreTake+0x364>)
   1d5a8:	4798      	blx	r3
   1d5aa:	0003      	movs	r3, r0
   1d5ac:	0018      	movs	r0, r3
   1d5ae:	4bc1      	ldr	r3, [pc, #772]	; (1d8b4 <xQueueSemaphoreTake+0x368>)
   1d5b0:	4798      	blx	r3
   1d5b2:	0003      	movs	r3, r0
   1d5b4:	001a      	movs	r2, r3
   1d5b6:	4bc0      	ldr	r3, [pc, #768]	; (1d8b8 <xQueueSemaphoreTake+0x36c>)
   1d5b8:	881b      	ldrh	r3, [r3, #0]
   1d5ba:	4013      	ands	r3, r2
   1d5bc:	b29b      	uxth	r3, r3
   1d5be:	2b00      	cmp	r3, #0
   1d5c0:	d029      	beq.n	1d616 <xQueueSemaphoreTake+0xca>
   1d5c2:	69fb      	ldr	r3, [r7, #28]
   1d5c4:	0018      	movs	r0, r3
   1d5c6:	4bbd      	ldr	r3, [pc, #756]	; (1d8bc <xQueueSemaphoreTake+0x370>)
   1d5c8:	4798      	blx	r3
   1d5ca:	0003      	movs	r3, r0
   1d5cc:	001a      	movs	r2, r3
   1d5ce:	4bba      	ldr	r3, [pc, #744]	; (1d8b8 <xQueueSemaphoreTake+0x36c>)
   1d5d0:	881b      	ldrh	r3, [r3, #0]
   1d5d2:	4013      	ands	r3, r2
   1d5d4:	b29b      	uxth	r3, r3
   1d5d6:	2b00      	cmp	r3, #0
   1d5d8:	d01d      	beq.n	1d616 <xQueueSemaphoreTake+0xca>
   1d5da:	69fb      	ldr	r3, [r7, #28]
   1d5dc:	0018      	movs	r0, r3
   1d5de:	4bb8      	ldr	r3, [pc, #736]	; (1d8c0 <xQueueSemaphoreTake+0x374>)
   1d5e0:	4798      	blx	r3
   1d5e2:	0003      	movs	r3, r0
   1d5e4:	001a      	movs	r2, r3
   1d5e6:	4bb7      	ldr	r3, [pc, #732]	; (1d8c4 <xQueueSemaphoreTake+0x378>)
   1d5e8:	5c9b      	ldrb	r3, [r3, r2]
   1d5ea:	3328      	adds	r3, #40	; 0x28
   1d5ec:	b2db      	uxtb	r3, r3
   1d5ee:	001d      	movs	r5, r3
   1d5f0:	69fb      	ldr	r3, [r7, #28]
   1d5f2:	0018      	movs	r0, r3
   1d5f4:	4bb2      	ldr	r3, [pc, #712]	; (1d8c0 <xQueueSemaphoreTake+0x374>)
   1d5f6:	4798      	blx	r3
   1d5f8:	0003      	movs	r3, r0
   1d5fa:	001a      	movs	r2, r3
   1d5fc:	4bb1      	ldr	r3, [pc, #708]	; (1d8c4 <xQueueSemaphoreTake+0x378>)
   1d5fe:	5c9c      	ldrb	r4, [r3, r2]
   1d600:	69fb      	ldr	r3, [r7, #28]
   1d602:	0018      	movs	r0, r3
   1d604:	4bb0      	ldr	r3, [pc, #704]	; (1d8c8 <xQueueSemaphoreTake+0x37c>)
   1d606:	4798      	blx	r3
   1d608:	0003      	movs	r3, r0
   1d60a:	b2db      	uxtb	r3, r3
   1d60c:	001a      	movs	r2, r3
   1d60e:	0021      	movs	r1, r4
   1d610:	0028      	movs	r0, r5
   1d612:	4bae      	ldr	r3, [pc, #696]	; (1d8cc <xQueueSemaphoreTake+0x380>)
   1d614:	4798      	blx	r3
   1d616:	69fb      	ldr	r3, [r7, #28]
   1d618:	0018      	movs	r0, r3
   1d61a:	4ba9      	ldr	r3, [pc, #676]	; (1d8c0 <xQueueSemaphoreTake+0x374>)
   1d61c:	4798      	blx	r3
   1d61e:	0003      	movs	r3, r0
   1d620:	001a      	movs	r2, r3
   1d622:	4ba8      	ldr	r3, [pc, #672]	; (1d8c4 <xQueueSemaphoreTake+0x378>)
   1d624:	5c9c      	ldrb	r4, [r3, r2]
   1d626:	69fb      	ldr	r3, [r7, #28]
   1d628:	0018      	movs	r0, r3
   1d62a:	4ba7      	ldr	r3, [pc, #668]	; (1d8c8 <xQueueSemaphoreTake+0x37c>)
   1d62c:	4798      	blx	r3
   1d62e:	0003      	movs	r3, r0
   1d630:	b2dd      	uxtb	r5, r3
   1d632:	69fb      	ldr	r3, [r7, #28]
   1d634:	0018      	movs	r0, r3
   1d636:	4ba2      	ldr	r3, [pc, #648]	; (1d8c0 <xQueueSemaphoreTake+0x374>)
   1d638:	4798      	blx	r3
   1d63a:	0003      	movs	r3, r0
   1d63c:	001a      	movs	r2, r3
   1d63e:	4ba1      	ldr	r3, [pc, #644]	; (1d8c4 <xQueueSemaphoreTake+0x378>)
   1d640:	5c9b      	ldrb	r3, [r3, r2]
   1d642:	2b02      	cmp	r3, #2
   1d644:	d108      	bne.n	1d658 <xQueueSemaphoreTake+0x10c>
   1d646:	4b9a      	ldr	r3, [pc, #616]	; (1d8b0 <xQueueSemaphoreTake+0x364>)
   1d648:	4798      	blx	r3
   1d64a:	0003      	movs	r3, r0
   1d64c:	0018      	movs	r0, r3
   1d64e:	4ba0      	ldr	r3, [pc, #640]	; (1d8d0 <xQueueSemaphoreTake+0x384>)
   1d650:	4798      	blx	r3
   1d652:	0003      	movs	r3, r0
   1d654:	b2db      	uxtb	r3, r3
   1d656:	e004      	b.n	1d662 <xQueueSemaphoreTake+0x116>
   1d658:	69fb      	ldr	r3, [r7, #28]
   1d65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d65c:	b2db      	uxtb	r3, r3
   1d65e:	3b01      	subs	r3, #1
   1d660:	b2db      	uxtb	r3, r3
   1d662:	001a      	movs	r2, r3
   1d664:	0029      	movs	r1, r5
   1d666:	0020      	movs	r0, r4
   1d668:	4b9a      	ldr	r3, [pc, #616]	; (1d8d4 <xQueueSemaphoreTake+0x388>)
   1d66a:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1d66c:	69bb      	ldr	r3, [r7, #24]
   1d66e:	1e5a      	subs	r2, r3, #1
   1d670:	69fb      	ldr	r3, [r7, #28]
   1d672:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1d674:	69fb      	ldr	r3, [r7, #28]
   1d676:	681b      	ldr	r3, [r3, #0]
   1d678:	2b00      	cmp	r3, #0
   1d67a:	d104      	bne.n	1d686 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1d67c:	4b96      	ldr	r3, [pc, #600]	; (1d8d8 <xQueueSemaphoreTake+0x38c>)
   1d67e:	4798      	blx	r3
   1d680:	0002      	movs	r2, r0
   1d682:	69fb      	ldr	r3, [r7, #28]
   1d684:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1d686:	69fb      	ldr	r3, [r7, #28]
   1d688:	691b      	ldr	r3, [r3, #16]
   1d68a:	2b00      	cmp	r3, #0
   1d68c:	d008      	beq.n	1d6a0 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1d68e:	69fb      	ldr	r3, [r7, #28]
   1d690:	3310      	adds	r3, #16
   1d692:	0018      	movs	r0, r3
   1d694:	4b91      	ldr	r3, [pc, #580]	; (1d8dc <xQueueSemaphoreTake+0x390>)
   1d696:	4798      	blx	r3
   1d698:	1e03      	subs	r3, r0, #0
   1d69a:	d001      	beq.n	1d6a0 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1d69c:	4b90      	ldr	r3, [pc, #576]	; (1d8e0 <xQueueSemaphoreTake+0x394>)
   1d69e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1d6a0:	4b90      	ldr	r3, [pc, #576]	; (1d8e4 <xQueueSemaphoreTake+0x398>)
   1d6a2:	4798      	blx	r3
				return pdPASS;
   1d6a4:	2301      	movs	r3, #1
   1d6a6:	e18b      	b.n	1d9c0 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1d6a8:	683b      	ldr	r3, [r7, #0]
   1d6aa:	2b00      	cmp	r3, #0
   1d6ac:	d140      	bne.n	1d730 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1d6ae:	6a3b      	ldr	r3, [r7, #32]
   1d6b0:	2b00      	cmp	r3, #0
   1d6b2:	d001      	beq.n	1d6b8 <xQueueSemaphoreTake+0x16c>
   1d6b4:	b672      	cpsid	i
   1d6b6:	e7fe      	b.n	1d6b6 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1d6b8:	4b8a      	ldr	r3, [pc, #552]	; (1d8e4 <xQueueSemaphoreTake+0x398>)
   1d6ba:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1d6bc:	4b7c      	ldr	r3, [pc, #496]	; (1d8b0 <xQueueSemaphoreTake+0x364>)
   1d6be:	4798      	blx	r3
   1d6c0:	0003      	movs	r3, r0
   1d6c2:	0018      	movs	r0, r3
   1d6c4:	4b7b      	ldr	r3, [pc, #492]	; (1d8b4 <xQueueSemaphoreTake+0x368>)
   1d6c6:	4798      	blx	r3
   1d6c8:	0003      	movs	r3, r0
   1d6ca:	001a      	movs	r2, r3
   1d6cc:	4b7a      	ldr	r3, [pc, #488]	; (1d8b8 <xQueueSemaphoreTake+0x36c>)
   1d6ce:	881b      	ldrh	r3, [r3, #0]
   1d6d0:	4013      	ands	r3, r2
   1d6d2:	b29b      	uxth	r3, r3
   1d6d4:	2b00      	cmp	r3, #0
   1d6d6:	d029      	beq.n	1d72c <xQueueSemaphoreTake+0x1e0>
   1d6d8:	69fb      	ldr	r3, [r7, #28]
   1d6da:	0018      	movs	r0, r3
   1d6dc:	4b77      	ldr	r3, [pc, #476]	; (1d8bc <xQueueSemaphoreTake+0x370>)
   1d6de:	4798      	blx	r3
   1d6e0:	0003      	movs	r3, r0
   1d6e2:	001a      	movs	r2, r3
   1d6e4:	4b74      	ldr	r3, [pc, #464]	; (1d8b8 <xQueueSemaphoreTake+0x36c>)
   1d6e6:	881b      	ldrh	r3, [r3, #0]
   1d6e8:	4013      	ands	r3, r2
   1d6ea:	b29b      	uxth	r3, r3
   1d6ec:	2b00      	cmp	r3, #0
   1d6ee:	d01d      	beq.n	1d72c <xQueueSemaphoreTake+0x1e0>
   1d6f0:	69fb      	ldr	r3, [r7, #28]
   1d6f2:	0018      	movs	r0, r3
   1d6f4:	4b72      	ldr	r3, [pc, #456]	; (1d8c0 <xQueueSemaphoreTake+0x374>)
   1d6f6:	4798      	blx	r3
   1d6f8:	0003      	movs	r3, r0
   1d6fa:	001a      	movs	r2, r3
   1d6fc:	4b71      	ldr	r3, [pc, #452]	; (1d8c4 <xQueueSemaphoreTake+0x378>)
   1d6fe:	5c9b      	ldrb	r3, [r3, r2]
   1d700:	3350      	adds	r3, #80	; 0x50
   1d702:	b2db      	uxtb	r3, r3
   1d704:	001d      	movs	r5, r3
   1d706:	69fb      	ldr	r3, [r7, #28]
   1d708:	0018      	movs	r0, r3
   1d70a:	4b6d      	ldr	r3, [pc, #436]	; (1d8c0 <xQueueSemaphoreTake+0x374>)
   1d70c:	4798      	blx	r3
   1d70e:	0003      	movs	r3, r0
   1d710:	001a      	movs	r2, r3
   1d712:	4b6c      	ldr	r3, [pc, #432]	; (1d8c4 <xQueueSemaphoreTake+0x378>)
   1d714:	5c9c      	ldrb	r4, [r3, r2]
   1d716:	69fb      	ldr	r3, [r7, #28]
   1d718:	0018      	movs	r0, r3
   1d71a:	4b6b      	ldr	r3, [pc, #428]	; (1d8c8 <xQueueSemaphoreTake+0x37c>)
   1d71c:	4798      	blx	r3
   1d71e:	0003      	movs	r3, r0
   1d720:	b2db      	uxtb	r3, r3
   1d722:	001a      	movs	r2, r3
   1d724:	0021      	movs	r1, r4
   1d726:	0028      	movs	r0, r5
   1d728:	4b68      	ldr	r3, [pc, #416]	; (1d8cc <xQueueSemaphoreTake+0x380>)
   1d72a:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1d72c:	2300      	movs	r3, #0
   1d72e:	e147      	b.n	1d9c0 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1d730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d732:	2b00      	cmp	r3, #0
   1d734:	d106      	bne.n	1d744 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1d736:	230c      	movs	r3, #12
   1d738:	18fb      	adds	r3, r7, r3
   1d73a:	0018      	movs	r0, r3
   1d73c:	4b6a      	ldr	r3, [pc, #424]	; (1d8e8 <xQueueSemaphoreTake+0x39c>)
   1d73e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1d740:	2301      	movs	r3, #1
   1d742:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1d744:	4b67      	ldr	r3, [pc, #412]	; (1d8e4 <xQueueSemaphoreTake+0x398>)
   1d746:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1d748:	4b68      	ldr	r3, [pc, #416]	; (1d8ec <xQueueSemaphoreTake+0x3a0>)
   1d74a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1d74c:	4b57      	ldr	r3, [pc, #348]	; (1d8ac <xQueueSemaphoreTake+0x360>)
   1d74e:	4798      	blx	r3
   1d750:	69fb      	ldr	r3, [r7, #28]
   1d752:	2244      	movs	r2, #68	; 0x44
   1d754:	5c9b      	ldrb	r3, [r3, r2]
   1d756:	b25b      	sxtb	r3, r3
   1d758:	3301      	adds	r3, #1
   1d75a:	d103      	bne.n	1d764 <xQueueSemaphoreTake+0x218>
   1d75c:	69fb      	ldr	r3, [r7, #28]
   1d75e:	2244      	movs	r2, #68	; 0x44
   1d760:	2100      	movs	r1, #0
   1d762:	5499      	strb	r1, [r3, r2]
   1d764:	69fb      	ldr	r3, [r7, #28]
   1d766:	2245      	movs	r2, #69	; 0x45
   1d768:	5c9b      	ldrb	r3, [r3, r2]
   1d76a:	b25b      	sxtb	r3, r3
   1d76c:	3301      	adds	r3, #1
   1d76e:	d103      	bne.n	1d778 <xQueueSemaphoreTake+0x22c>
   1d770:	69fb      	ldr	r3, [r7, #28]
   1d772:	2245      	movs	r2, #69	; 0x45
   1d774:	2100      	movs	r1, #0
   1d776:	5499      	strb	r1, [r3, r2]
   1d778:	4b5a      	ldr	r3, [pc, #360]	; (1d8e4 <xQueueSemaphoreTake+0x398>)
   1d77a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1d77c:	003a      	movs	r2, r7
   1d77e:	230c      	movs	r3, #12
   1d780:	18fb      	adds	r3, r7, r3
   1d782:	0011      	movs	r1, r2
   1d784:	0018      	movs	r0, r3
   1d786:	4b5a      	ldr	r3, [pc, #360]	; (1d8f0 <xQueueSemaphoreTake+0x3a4>)
   1d788:	4798      	blx	r3
   1d78a:	1e03      	subs	r3, r0, #0
   1d78c:	d000      	beq.n	1d790 <xQueueSemaphoreTake+0x244>
   1d78e:	e0bd      	b.n	1d90c <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1d790:	69fb      	ldr	r3, [r7, #28]
   1d792:	0018      	movs	r0, r3
   1d794:	4b57      	ldr	r3, [pc, #348]	; (1d8f4 <xQueueSemaphoreTake+0x3a8>)
   1d796:	4798      	blx	r3
   1d798:	1e03      	subs	r3, r0, #0
   1d79a:	d100      	bne.n	1d79e <xQueueSemaphoreTake+0x252>
   1d79c:	e07c      	b.n	1d898 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1d79e:	4b44      	ldr	r3, [pc, #272]	; (1d8b0 <xQueueSemaphoreTake+0x364>)
   1d7a0:	4798      	blx	r3
   1d7a2:	0003      	movs	r3, r0
   1d7a4:	0018      	movs	r0, r3
   1d7a6:	4b43      	ldr	r3, [pc, #268]	; (1d8b4 <xQueueSemaphoreTake+0x368>)
   1d7a8:	4798      	blx	r3
   1d7aa:	0003      	movs	r3, r0
   1d7ac:	001a      	movs	r2, r3
   1d7ae:	4b42      	ldr	r3, [pc, #264]	; (1d8b8 <xQueueSemaphoreTake+0x36c>)
   1d7b0:	881b      	ldrh	r3, [r3, #0]
   1d7b2:	4013      	ands	r3, r2
   1d7b4:	b29b      	uxth	r3, r3
   1d7b6:	2b00      	cmp	r3, #0
   1d7b8:	d029      	beq.n	1d80e <xQueueSemaphoreTake+0x2c2>
   1d7ba:	69fb      	ldr	r3, [r7, #28]
   1d7bc:	0018      	movs	r0, r3
   1d7be:	4b3f      	ldr	r3, [pc, #252]	; (1d8bc <xQueueSemaphoreTake+0x370>)
   1d7c0:	4798      	blx	r3
   1d7c2:	0003      	movs	r3, r0
   1d7c4:	001a      	movs	r2, r3
   1d7c6:	4b3c      	ldr	r3, [pc, #240]	; (1d8b8 <xQueueSemaphoreTake+0x36c>)
   1d7c8:	881b      	ldrh	r3, [r3, #0]
   1d7ca:	4013      	ands	r3, r2
   1d7cc:	b29b      	uxth	r3, r3
   1d7ce:	2b00      	cmp	r3, #0
   1d7d0:	d01d      	beq.n	1d80e <xQueueSemaphoreTake+0x2c2>
   1d7d2:	69fb      	ldr	r3, [r7, #28]
   1d7d4:	0018      	movs	r0, r3
   1d7d6:	4b3a      	ldr	r3, [pc, #232]	; (1d8c0 <xQueueSemaphoreTake+0x374>)
   1d7d8:	4798      	blx	r3
   1d7da:	0003      	movs	r3, r0
   1d7dc:	001a      	movs	r2, r3
   1d7de:	4b39      	ldr	r3, [pc, #228]	; (1d8c4 <xQueueSemaphoreTake+0x378>)
   1d7e0:	5c9b      	ldrb	r3, [r3, r2]
   1d7e2:	3368      	adds	r3, #104	; 0x68
   1d7e4:	b2db      	uxtb	r3, r3
   1d7e6:	001d      	movs	r5, r3
   1d7e8:	69fb      	ldr	r3, [r7, #28]
   1d7ea:	0018      	movs	r0, r3
   1d7ec:	4b34      	ldr	r3, [pc, #208]	; (1d8c0 <xQueueSemaphoreTake+0x374>)
   1d7ee:	4798      	blx	r3
   1d7f0:	0003      	movs	r3, r0
   1d7f2:	001a      	movs	r2, r3
   1d7f4:	4b33      	ldr	r3, [pc, #204]	; (1d8c4 <xQueueSemaphoreTake+0x378>)
   1d7f6:	5c9c      	ldrb	r4, [r3, r2]
   1d7f8:	69fb      	ldr	r3, [r7, #28]
   1d7fa:	0018      	movs	r0, r3
   1d7fc:	4b32      	ldr	r3, [pc, #200]	; (1d8c8 <xQueueSemaphoreTake+0x37c>)
   1d7fe:	4798      	blx	r3
   1d800:	0003      	movs	r3, r0
   1d802:	b2db      	uxtb	r3, r3
   1d804:	001a      	movs	r2, r3
   1d806:	0021      	movs	r1, r4
   1d808:	0028      	movs	r0, r5
   1d80a:	4b30      	ldr	r3, [pc, #192]	; (1d8cc <xQueueSemaphoreTake+0x380>)
   1d80c:	4798      	blx	r3
   1d80e:	69fb      	ldr	r3, [r7, #28]
   1d810:	0018      	movs	r0, r3
   1d812:	4b2b      	ldr	r3, [pc, #172]	; (1d8c0 <xQueueSemaphoreTake+0x374>)
   1d814:	4798      	blx	r3
   1d816:	0003      	movs	r3, r0
   1d818:	001a      	movs	r2, r3
   1d81a:	4b2a      	ldr	r3, [pc, #168]	; (1d8c4 <xQueueSemaphoreTake+0x378>)
   1d81c:	5c9b      	ldrb	r3, [r3, r2]
   1d81e:	2b02      	cmp	r3, #2
   1d820:	d018      	beq.n	1d854 <xQueueSemaphoreTake+0x308>
   1d822:	4b23      	ldr	r3, [pc, #140]	; (1d8b0 <xQueueSemaphoreTake+0x364>)
   1d824:	4798      	blx	r3
   1d826:	0003      	movs	r3, r0
   1d828:	0018      	movs	r0, r3
   1d82a:	4b22      	ldr	r3, [pc, #136]	; (1d8b4 <xQueueSemaphoreTake+0x368>)
   1d82c:	4798      	blx	r3
   1d82e:	0003      	movs	r3, r0
   1d830:	001a      	movs	r2, r3
   1d832:	4b21      	ldr	r3, [pc, #132]	; (1d8b8 <xQueueSemaphoreTake+0x36c>)
   1d834:	881b      	ldrh	r3, [r3, #0]
   1d836:	4013      	ands	r3, r2
   1d838:	b29b      	uxth	r3, r3
   1d83a:	2b00      	cmp	r3, #0
   1d83c:	d00a      	beq.n	1d854 <xQueueSemaphoreTake+0x308>
   1d83e:	4b1c      	ldr	r3, [pc, #112]	; (1d8b0 <xQueueSemaphoreTake+0x364>)
   1d840:	4798      	blx	r3
   1d842:	0003      	movs	r3, r0
   1d844:	0018      	movs	r0, r3
   1d846:	4b22      	ldr	r3, [pc, #136]	; (1d8d0 <xQueueSemaphoreTake+0x384>)
   1d848:	4798      	blx	r3
   1d84a:	0003      	movs	r3, r0
   1d84c:	b2db      	uxtb	r3, r3
   1d84e:	0018      	movs	r0, r3
   1d850:	4b29      	ldr	r3, [pc, #164]	; (1d8f8 <xQueueSemaphoreTake+0x3ac>)
   1d852:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1d854:	69fb      	ldr	r3, [r7, #28]
   1d856:	681b      	ldr	r3, [r3, #0]
   1d858:	2b00      	cmp	r3, #0
   1d85a:	d10a      	bne.n	1d872 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1d85c:	4b13      	ldr	r3, [pc, #76]	; (1d8ac <xQueueSemaphoreTake+0x360>)
   1d85e:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1d860:	69fb      	ldr	r3, [r7, #28]
   1d862:	685b      	ldr	r3, [r3, #4]
   1d864:	0018      	movs	r0, r3
   1d866:	4b25      	ldr	r3, [pc, #148]	; (1d8fc <xQueueSemaphoreTake+0x3b0>)
   1d868:	4798      	blx	r3
   1d86a:	0003      	movs	r3, r0
   1d86c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1d86e:	4b1d      	ldr	r3, [pc, #116]	; (1d8e4 <xQueueSemaphoreTake+0x398>)
   1d870:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1d872:	69fb      	ldr	r3, [r7, #28]
   1d874:	3324      	adds	r3, #36	; 0x24
   1d876:	683a      	ldr	r2, [r7, #0]
   1d878:	0011      	movs	r1, r2
   1d87a:	0018      	movs	r0, r3
   1d87c:	4b20      	ldr	r3, [pc, #128]	; (1d900 <xQueueSemaphoreTake+0x3b4>)
   1d87e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1d880:	69fb      	ldr	r3, [r7, #28]
   1d882:	0018      	movs	r0, r3
   1d884:	4b1f      	ldr	r3, [pc, #124]	; (1d904 <xQueueSemaphoreTake+0x3b8>)
   1d886:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1d888:	4b1f      	ldr	r3, [pc, #124]	; (1d908 <xQueueSemaphoreTake+0x3bc>)
   1d88a:	4798      	blx	r3
   1d88c:	1e03      	subs	r3, r0, #0
   1d88e:	d000      	beq.n	1d892 <xQueueSemaphoreTake+0x346>
   1d890:	e680      	b.n	1d594 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1d892:	4b13      	ldr	r3, [pc, #76]	; (1d8e0 <xQueueSemaphoreTake+0x394>)
   1d894:	4798      	blx	r3
   1d896:	e67d      	b.n	1d594 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1d898:	69fb      	ldr	r3, [r7, #28]
   1d89a:	0018      	movs	r0, r3
   1d89c:	4b19      	ldr	r3, [pc, #100]	; (1d904 <xQueueSemaphoreTake+0x3b8>)
   1d89e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1d8a0:	4b19      	ldr	r3, [pc, #100]	; (1d908 <xQueueSemaphoreTake+0x3bc>)
   1d8a2:	4798      	blx	r3
   1d8a4:	e676      	b.n	1d594 <xQueueSemaphoreTake+0x48>
   1d8a6:	46c0      	nop			; (mov r8, r8)
   1d8a8:	0001efc9 	.word	0x0001efc9
   1d8ac:	0001c2a9 	.word	0x0001c2a9
   1d8b0:	0001a539 	.word	0x0001a539
   1d8b4:	0001a29d 	.word	0x0001a29d
   1d8b8:	20000104 	.word	0x20000104
   1d8bc:	0001a35d 	.word	0x0001a35d
   1d8c0:	0001a25d 	.word	0x0001a25d
   1d8c4:	200000f8 	.word	0x200000f8
   1d8c8:	0001a33d 	.word	0x0001a33d
   1d8cc:	0001ac95 	.word	0x0001ac95
   1d8d0:	0001a27d 	.word	0x0001a27d
   1d8d4:	0001b2f1 	.word	0x0001b2f1
   1d8d8:	0001f495 	.word	0x0001f495
   1d8dc:	0001eb39 	.word	0x0001eb39
   1d8e0:	0001c291 	.word	0x0001c291
   1d8e4:	0001c2cd 	.word	0x0001c2cd
   1d8e8:	0001ec79 	.word	0x0001ec79
   1d8ec:	0001e561 	.word	0x0001e561
   1d8f0:	0001eca1 	.word	0x0001eca1
   1d8f4:	0001dc95 	.word	0x0001dc95
   1d8f8:	0001b42d 	.word	0x0001b42d
   1d8fc:	0001f001 	.word	0x0001f001
   1d900:	0001ea15 	.word	0x0001ea15
   1d904:	0001dba5 	.word	0x0001dba5
   1d908:	0001e579 	.word	0x0001e579
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1d90c:	69fb      	ldr	r3, [r7, #28]
   1d90e:	0018      	movs	r0, r3
   1d910:	4b2d      	ldr	r3, [pc, #180]	; (1d9c8 <xQueueSemaphoreTake+0x47c>)
   1d912:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1d914:	4b2d      	ldr	r3, [pc, #180]	; (1d9cc <xQueueSemaphoreTake+0x480>)
   1d916:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1d918:	69fb      	ldr	r3, [r7, #28]
   1d91a:	0018      	movs	r0, r3
   1d91c:	4b2c      	ldr	r3, [pc, #176]	; (1d9d0 <xQueueSemaphoreTake+0x484>)
   1d91e:	4798      	blx	r3
   1d920:	1e03      	subs	r3, r0, #0
   1d922:	d100      	bne.n	1d926 <xQueueSemaphoreTake+0x3da>
   1d924:	e636      	b.n	1d594 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1d926:	6a3b      	ldr	r3, [r7, #32]
   1d928:	2b00      	cmp	r3, #0
   1d92a:	d010      	beq.n	1d94e <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1d92c:	4b29      	ldr	r3, [pc, #164]	; (1d9d4 <xQueueSemaphoreTake+0x488>)
   1d92e:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1d930:	69fb      	ldr	r3, [r7, #28]
   1d932:	0018      	movs	r0, r3
   1d934:	4b28      	ldr	r3, [pc, #160]	; (1d9d8 <xQueueSemaphoreTake+0x48c>)
   1d936:	4798      	blx	r3
   1d938:	0003      	movs	r3, r0
   1d93a:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1d93c:	69fb      	ldr	r3, [r7, #28]
   1d93e:	685b      	ldr	r3, [r3, #4]
   1d940:	697a      	ldr	r2, [r7, #20]
   1d942:	0011      	movs	r1, r2
   1d944:	0018      	movs	r0, r3
   1d946:	4b25      	ldr	r3, [pc, #148]	; (1d9dc <xQueueSemaphoreTake+0x490>)
   1d948:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1d94a:	4b25      	ldr	r3, [pc, #148]	; (1d9e0 <xQueueSemaphoreTake+0x494>)
   1d94c:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1d94e:	4b25      	ldr	r3, [pc, #148]	; (1d9e4 <xQueueSemaphoreTake+0x498>)
   1d950:	4798      	blx	r3
   1d952:	0003      	movs	r3, r0
   1d954:	0018      	movs	r0, r3
   1d956:	4b24      	ldr	r3, [pc, #144]	; (1d9e8 <xQueueSemaphoreTake+0x49c>)
   1d958:	4798      	blx	r3
   1d95a:	0003      	movs	r3, r0
   1d95c:	001a      	movs	r2, r3
   1d95e:	4b23      	ldr	r3, [pc, #140]	; (1d9ec <xQueueSemaphoreTake+0x4a0>)
   1d960:	881b      	ldrh	r3, [r3, #0]
   1d962:	4013      	ands	r3, r2
   1d964:	b29b      	uxth	r3, r3
   1d966:	2b00      	cmp	r3, #0
   1d968:	d029      	beq.n	1d9be <xQueueSemaphoreTake+0x472>
   1d96a:	69fb      	ldr	r3, [r7, #28]
   1d96c:	0018      	movs	r0, r3
   1d96e:	4b20      	ldr	r3, [pc, #128]	; (1d9f0 <xQueueSemaphoreTake+0x4a4>)
   1d970:	4798      	blx	r3
   1d972:	0003      	movs	r3, r0
   1d974:	001a      	movs	r2, r3
   1d976:	4b1d      	ldr	r3, [pc, #116]	; (1d9ec <xQueueSemaphoreTake+0x4a0>)
   1d978:	881b      	ldrh	r3, [r3, #0]
   1d97a:	4013      	ands	r3, r2
   1d97c:	b29b      	uxth	r3, r3
   1d97e:	2b00      	cmp	r3, #0
   1d980:	d01d      	beq.n	1d9be <xQueueSemaphoreTake+0x472>
   1d982:	69fb      	ldr	r3, [r7, #28]
   1d984:	0018      	movs	r0, r3
   1d986:	4b1b      	ldr	r3, [pc, #108]	; (1d9f4 <xQueueSemaphoreTake+0x4a8>)
   1d988:	4798      	blx	r3
   1d98a:	0003      	movs	r3, r0
   1d98c:	001a      	movs	r2, r3
   1d98e:	4b1a      	ldr	r3, [pc, #104]	; (1d9f8 <xQueueSemaphoreTake+0x4ac>)
   1d990:	5c9b      	ldrb	r3, [r3, r2]
   1d992:	3350      	adds	r3, #80	; 0x50
   1d994:	b2db      	uxtb	r3, r3
   1d996:	001d      	movs	r5, r3
   1d998:	69fb      	ldr	r3, [r7, #28]
   1d99a:	0018      	movs	r0, r3
   1d99c:	4b15      	ldr	r3, [pc, #84]	; (1d9f4 <xQueueSemaphoreTake+0x4a8>)
   1d99e:	4798      	blx	r3
   1d9a0:	0003      	movs	r3, r0
   1d9a2:	001a      	movs	r2, r3
   1d9a4:	4b14      	ldr	r3, [pc, #80]	; (1d9f8 <xQueueSemaphoreTake+0x4ac>)
   1d9a6:	5c9c      	ldrb	r4, [r3, r2]
   1d9a8:	69fb      	ldr	r3, [r7, #28]
   1d9aa:	0018      	movs	r0, r3
   1d9ac:	4b13      	ldr	r3, [pc, #76]	; (1d9fc <xQueueSemaphoreTake+0x4b0>)
   1d9ae:	4798      	blx	r3
   1d9b0:	0003      	movs	r3, r0
   1d9b2:	b2db      	uxtb	r3, r3
   1d9b4:	001a      	movs	r2, r3
   1d9b6:	0021      	movs	r1, r4
   1d9b8:	0028      	movs	r0, r5
   1d9ba:	4b11      	ldr	r3, [pc, #68]	; (1da00 <xQueueSemaphoreTake+0x4b4>)
   1d9bc:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1d9be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1d9c0:	0018      	movs	r0, r3
   1d9c2:	46bd      	mov	sp, r7
   1d9c4:	b00a      	add	sp, #40	; 0x28
   1d9c6:	bdb0      	pop	{r4, r5, r7, pc}
   1d9c8:	0001dba5 	.word	0x0001dba5
   1d9cc:	0001e579 	.word	0x0001e579
   1d9d0:	0001dc95 	.word	0x0001dc95
   1d9d4:	0001c2a9 	.word	0x0001c2a9
   1d9d8:	0001da47 	.word	0x0001da47
   1d9dc:	0001f2f9 	.word	0x0001f2f9
   1d9e0:	0001c2cd 	.word	0x0001c2cd
   1d9e4:	0001a539 	.word	0x0001a539
   1d9e8:	0001a29d 	.word	0x0001a29d
   1d9ec:	20000104 	.word	0x20000104
   1d9f0:	0001a35d 	.word	0x0001a35d
   1d9f4:	0001a25d 	.word	0x0001a25d
   1d9f8:	200000f8 	.word	0x200000f8
   1d9fc:	0001a33d 	.word	0x0001a33d
   1da00:	0001ac95 	.word	0x0001ac95

0001da04 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1da04:	b580      	push	{r7, lr}
   1da06:	b082      	sub	sp, #8
   1da08:	af00      	add	r7, sp, #0
   1da0a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1da0c:	687b      	ldr	r3, [r7, #4]
   1da0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1da10:	0018      	movs	r0, r3
   1da12:	46bd      	mov	sp, r7
   1da14:	b002      	add	sp, #8
   1da16:	bd80      	pop	{r7, pc}

0001da18 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1da18:	b580      	push	{r7, lr}
   1da1a:	b082      	sub	sp, #8
   1da1c:	af00      	add	r7, sp, #0
   1da1e:	6078      	str	r0, [r7, #4]
   1da20:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1da22:	687b      	ldr	r3, [r7, #4]
   1da24:	683a      	ldr	r2, [r7, #0]
   1da26:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1da28:	46c0      	nop			; (mov r8, r8)
   1da2a:	46bd      	mov	sp, r7
   1da2c:	b002      	add	sp, #8
   1da2e:	bd80      	pop	{r7, pc}

0001da30 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1da30:	b580      	push	{r7, lr}
   1da32:	b082      	sub	sp, #8
   1da34:	af00      	add	r7, sp, #0
   1da36:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1da38:	687b      	ldr	r3, [r7, #4]
   1da3a:	2250      	movs	r2, #80	; 0x50
   1da3c:	5c9b      	ldrb	r3, [r3, r2]
	}
   1da3e:	0018      	movs	r0, r3
   1da40:	46bd      	mov	sp, r7
   1da42:	b002      	add	sp, #8
   1da44:	bd80      	pop	{r7, pc}

0001da46 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1da46:	b580      	push	{r7, lr}
   1da48:	b084      	sub	sp, #16
   1da4a:	af00      	add	r7, sp, #0
   1da4c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1da4e:	687b      	ldr	r3, [r7, #4]
   1da50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1da52:	2b00      	cmp	r3, #0
   1da54:	d006      	beq.n	1da64 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1da56:	687b      	ldr	r3, [r7, #4]
   1da58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1da5a:	681b      	ldr	r3, [r3, #0]
   1da5c:	2205      	movs	r2, #5
   1da5e:	1ad3      	subs	r3, r2, r3
   1da60:	60fb      	str	r3, [r7, #12]
   1da62:	e001      	b.n	1da68 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1da64:	2300      	movs	r3, #0
   1da66:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1da68:	68fb      	ldr	r3, [r7, #12]
	}
   1da6a:	0018      	movs	r0, r3
   1da6c:	46bd      	mov	sp, r7
   1da6e:	b004      	add	sp, #16
   1da70:	bd80      	pop	{r7, pc}
	...

0001da74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1da74:	b580      	push	{r7, lr}
   1da76:	b086      	sub	sp, #24
   1da78:	af00      	add	r7, sp, #0
   1da7a:	60f8      	str	r0, [r7, #12]
   1da7c:	60b9      	str	r1, [r7, #8]
   1da7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1da80:	2300      	movs	r3, #0
   1da82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1da84:	68fb      	ldr	r3, [r7, #12]
   1da86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1da88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1da8a:	68fb      	ldr	r3, [r7, #12]
   1da8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1da8e:	2b00      	cmp	r3, #0
   1da90:	d10e      	bne.n	1dab0 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1da92:	68fb      	ldr	r3, [r7, #12]
   1da94:	681b      	ldr	r3, [r3, #0]
   1da96:	2b00      	cmp	r3, #0
   1da98:	d14e      	bne.n	1db38 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1da9a:	68fb      	ldr	r3, [r7, #12]
   1da9c:	685b      	ldr	r3, [r3, #4]
   1da9e:	0018      	movs	r0, r3
   1daa0:	4b2a      	ldr	r3, [pc, #168]	; (1db4c <prvCopyDataToQueue+0xd8>)
   1daa2:	4798      	blx	r3
   1daa4:	0003      	movs	r3, r0
   1daa6:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1daa8:	68fb      	ldr	r3, [r7, #12]
   1daaa:	2200      	movs	r2, #0
   1daac:	605a      	str	r2, [r3, #4]
   1daae:	e043      	b.n	1db38 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1dab0:	687b      	ldr	r3, [r7, #4]
   1dab2:	2b00      	cmp	r3, #0
   1dab4:	d119      	bne.n	1daea <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1dab6:	68fb      	ldr	r3, [r7, #12]
   1dab8:	6898      	ldr	r0, [r3, #8]
   1daba:	68fb      	ldr	r3, [r7, #12]
   1dabc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1dabe:	68bb      	ldr	r3, [r7, #8]
   1dac0:	0019      	movs	r1, r3
   1dac2:	4b23      	ldr	r3, [pc, #140]	; (1db50 <prvCopyDataToQueue+0xdc>)
   1dac4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1dac6:	68fb      	ldr	r3, [r7, #12]
   1dac8:	689a      	ldr	r2, [r3, #8]
   1daca:	68fb      	ldr	r3, [r7, #12]
   1dacc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1dace:	18d2      	adds	r2, r2, r3
   1dad0:	68fb      	ldr	r3, [r7, #12]
   1dad2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1dad4:	68fb      	ldr	r3, [r7, #12]
   1dad6:	689a      	ldr	r2, [r3, #8]
   1dad8:	68fb      	ldr	r3, [r7, #12]
   1dada:	685b      	ldr	r3, [r3, #4]
   1dadc:	429a      	cmp	r2, r3
   1dade:	d32b      	bcc.n	1db38 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1dae0:	68fb      	ldr	r3, [r7, #12]
   1dae2:	681a      	ldr	r2, [r3, #0]
   1dae4:	68fb      	ldr	r3, [r7, #12]
   1dae6:	609a      	str	r2, [r3, #8]
   1dae8:	e026      	b.n	1db38 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1daea:	68fb      	ldr	r3, [r7, #12]
   1daec:	68d8      	ldr	r0, [r3, #12]
   1daee:	68fb      	ldr	r3, [r7, #12]
   1daf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1daf2:	68bb      	ldr	r3, [r7, #8]
   1daf4:	0019      	movs	r1, r3
   1daf6:	4b16      	ldr	r3, [pc, #88]	; (1db50 <prvCopyDataToQueue+0xdc>)
   1daf8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1dafa:	68fb      	ldr	r3, [r7, #12]
   1dafc:	68da      	ldr	r2, [r3, #12]
   1dafe:	68fb      	ldr	r3, [r7, #12]
   1db00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1db02:	425b      	negs	r3, r3
   1db04:	18d2      	adds	r2, r2, r3
   1db06:	68fb      	ldr	r3, [r7, #12]
   1db08:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1db0a:	68fb      	ldr	r3, [r7, #12]
   1db0c:	68da      	ldr	r2, [r3, #12]
   1db0e:	68fb      	ldr	r3, [r7, #12]
   1db10:	681b      	ldr	r3, [r3, #0]
   1db12:	429a      	cmp	r2, r3
   1db14:	d207      	bcs.n	1db26 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1db16:	68fb      	ldr	r3, [r7, #12]
   1db18:	685a      	ldr	r2, [r3, #4]
   1db1a:	68fb      	ldr	r3, [r7, #12]
   1db1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1db1e:	425b      	negs	r3, r3
   1db20:	18d2      	adds	r2, r2, r3
   1db22:	68fb      	ldr	r3, [r7, #12]
   1db24:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1db26:	687b      	ldr	r3, [r7, #4]
   1db28:	2b02      	cmp	r3, #2
   1db2a:	d105      	bne.n	1db38 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1db2c:	693b      	ldr	r3, [r7, #16]
   1db2e:	2b00      	cmp	r3, #0
   1db30:	d002      	beq.n	1db38 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1db32:	693b      	ldr	r3, [r7, #16]
   1db34:	3b01      	subs	r3, #1
   1db36:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1db38:	693b      	ldr	r3, [r7, #16]
   1db3a:	1c5a      	adds	r2, r3, #1
   1db3c:	68fb      	ldr	r3, [r7, #12]
   1db3e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1db40:	697b      	ldr	r3, [r7, #20]
}
   1db42:	0018      	movs	r0, r3
   1db44:	46bd      	mov	sp, r7
   1db46:	b006      	add	sp, #24
   1db48:	bd80      	pop	{r7, pc}
   1db4a:	46c0      	nop			; (mov r8, r8)
   1db4c:	0001f191 	.word	0x0001f191
   1db50:	00036c69 	.word	0x00036c69

0001db54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1db54:	b580      	push	{r7, lr}
   1db56:	b082      	sub	sp, #8
   1db58:	af00      	add	r7, sp, #0
   1db5a:	6078      	str	r0, [r7, #4]
   1db5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1db5e:	687b      	ldr	r3, [r7, #4]
   1db60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1db62:	2b00      	cmp	r3, #0
   1db64:	d018      	beq.n	1db98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1db66:	687b      	ldr	r3, [r7, #4]
   1db68:	68da      	ldr	r2, [r3, #12]
   1db6a:	687b      	ldr	r3, [r7, #4]
   1db6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1db6e:	18d2      	adds	r2, r2, r3
   1db70:	687b      	ldr	r3, [r7, #4]
   1db72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1db74:	687b      	ldr	r3, [r7, #4]
   1db76:	68da      	ldr	r2, [r3, #12]
   1db78:	687b      	ldr	r3, [r7, #4]
   1db7a:	685b      	ldr	r3, [r3, #4]
   1db7c:	429a      	cmp	r2, r3
   1db7e:	d303      	bcc.n	1db88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1db80:	687b      	ldr	r3, [r7, #4]
   1db82:	681a      	ldr	r2, [r3, #0]
   1db84:	687b      	ldr	r3, [r7, #4]
   1db86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1db88:	687b      	ldr	r3, [r7, #4]
   1db8a:	68d9      	ldr	r1, [r3, #12]
   1db8c:	687b      	ldr	r3, [r7, #4]
   1db8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1db90:	683b      	ldr	r3, [r7, #0]
   1db92:	0018      	movs	r0, r3
   1db94:	4b02      	ldr	r3, [pc, #8]	; (1dba0 <prvCopyDataFromQueue+0x4c>)
   1db96:	4798      	blx	r3
	}
}
   1db98:	46c0      	nop			; (mov r8, r8)
   1db9a:	46bd      	mov	sp, r7
   1db9c:	b002      	add	sp, #8
   1db9e:	bd80      	pop	{r7, pc}
   1dba0:	00036c69 	.word	0x00036c69

0001dba4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1dba4:	b580      	push	{r7, lr}
   1dba6:	b084      	sub	sp, #16
   1dba8:	af00      	add	r7, sp, #0
   1dbaa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1dbac:	4b34      	ldr	r3, [pc, #208]	; (1dc80 <prvUnlockQueue+0xdc>)
   1dbae:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1dbb0:	230f      	movs	r3, #15
   1dbb2:	18fb      	adds	r3, r7, r3
   1dbb4:	687a      	ldr	r2, [r7, #4]
   1dbb6:	2145      	movs	r1, #69	; 0x45
   1dbb8:	5c52      	ldrb	r2, [r2, r1]
   1dbba:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1dbbc:	e022      	b.n	1dc04 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1dbbe:	687b      	ldr	r3, [r7, #4]
   1dbc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dbc2:	2b00      	cmp	r3, #0
   1dbc4:	d009      	beq.n	1dbda <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1dbc6:	687b      	ldr	r3, [r7, #4]
   1dbc8:	2100      	movs	r1, #0
   1dbca:	0018      	movs	r0, r3
   1dbcc:	4b2d      	ldr	r3, [pc, #180]	; (1dc84 <prvUnlockQueue+0xe0>)
   1dbce:	4798      	blx	r3
   1dbd0:	1e03      	subs	r3, r0, #0
   1dbd2:	d00f      	beq.n	1dbf4 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1dbd4:	4b2c      	ldr	r3, [pc, #176]	; (1dc88 <prvUnlockQueue+0xe4>)
   1dbd6:	4798      	blx	r3
   1dbd8:	e00c      	b.n	1dbf4 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1dbda:	687b      	ldr	r3, [r7, #4]
   1dbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1dbde:	2b00      	cmp	r3, #0
   1dbe0:	d017      	beq.n	1dc12 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1dbe2:	687b      	ldr	r3, [r7, #4]
   1dbe4:	3324      	adds	r3, #36	; 0x24
   1dbe6:	0018      	movs	r0, r3
   1dbe8:	4b28      	ldr	r3, [pc, #160]	; (1dc8c <prvUnlockQueue+0xe8>)
   1dbea:	4798      	blx	r3
   1dbec:	1e03      	subs	r3, r0, #0
   1dbee:	d001      	beq.n	1dbf4 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1dbf0:	4b25      	ldr	r3, [pc, #148]	; (1dc88 <prvUnlockQueue+0xe4>)
   1dbf2:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1dbf4:	230f      	movs	r3, #15
   1dbf6:	18fb      	adds	r3, r7, r3
   1dbf8:	781b      	ldrb	r3, [r3, #0]
   1dbfa:	3b01      	subs	r3, #1
   1dbfc:	b2da      	uxtb	r2, r3
   1dbfe:	230f      	movs	r3, #15
   1dc00:	18fb      	adds	r3, r7, r3
   1dc02:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1dc04:	230f      	movs	r3, #15
   1dc06:	18fb      	adds	r3, r7, r3
   1dc08:	781b      	ldrb	r3, [r3, #0]
   1dc0a:	b25b      	sxtb	r3, r3
   1dc0c:	2b00      	cmp	r3, #0
   1dc0e:	dcd6      	bgt.n	1dbbe <prvUnlockQueue+0x1a>
   1dc10:	e000      	b.n	1dc14 <prvUnlockQueue+0x70>
						break;
   1dc12:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1dc14:	687b      	ldr	r3, [r7, #4]
   1dc16:	2245      	movs	r2, #69	; 0x45
   1dc18:	21ff      	movs	r1, #255	; 0xff
   1dc1a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1dc1c:	4b1c      	ldr	r3, [pc, #112]	; (1dc90 <prvUnlockQueue+0xec>)
   1dc1e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1dc20:	4b17      	ldr	r3, [pc, #92]	; (1dc80 <prvUnlockQueue+0xdc>)
   1dc22:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1dc24:	230e      	movs	r3, #14
   1dc26:	18fb      	adds	r3, r7, r3
   1dc28:	687a      	ldr	r2, [r7, #4]
   1dc2a:	2144      	movs	r1, #68	; 0x44
   1dc2c:	5c52      	ldrb	r2, [r2, r1]
   1dc2e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1dc30:	e014      	b.n	1dc5c <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1dc32:	687b      	ldr	r3, [r7, #4]
   1dc34:	691b      	ldr	r3, [r3, #16]
   1dc36:	2b00      	cmp	r3, #0
   1dc38:	d017      	beq.n	1dc6a <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1dc3a:	687b      	ldr	r3, [r7, #4]
   1dc3c:	3310      	adds	r3, #16
   1dc3e:	0018      	movs	r0, r3
   1dc40:	4b12      	ldr	r3, [pc, #72]	; (1dc8c <prvUnlockQueue+0xe8>)
   1dc42:	4798      	blx	r3
   1dc44:	1e03      	subs	r3, r0, #0
   1dc46:	d001      	beq.n	1dc4c <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1dc48:	4b0f      	ldr	r3, [pc, #60]	; (1dc88 <prvUnlockQueue+0xe4>)
   1dc4a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1dc4c:	230e      	movs	r3, #14
   1dc4e:	18fb      	adds	r3, r7, r3
   1dc50:	781b      	ldrb	r3, [r3, #0]
   1dc52:	3b01      	subs	r3, #1
   1dc54:	b2da      	uxtb	r2, r3
   1dc56:	230e      	movs	r3, #14
   1dc58:	18fb      	adds	r3, r7, r3
   1dc5a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1dc5c:	230e      	movs	r3, #14
   1dc5e:	18fb      	adds	r3, r7, r3
   1dc60:	781b      	ldrb	r3, [r3, #0]
   1dc62:	b25b      	sxtb	r3, r3
   1dc64:	2b00      	cmp	r3, #0
   1dc66:	dce4      	bgt.n	1dc32 <prvUnlockQueue+0x8e>
   1dc68:	e000      	b.n	1dc6c <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1dc6a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1dc6c:	687b      	ldr	r3, [r7, #4]
   1dc6e:	2244      	movs	r2, #68	; 0x44
   1dc70:	21ff      	movs	r1, #255	; 0xff
   1dc72:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1dc74:	4b06      	ldr	r3, [pc, #24]	; (1dc90 <prvUnlockQueue+0xec>)
   1dc76:	4798      	blx	r3
}
   1dc78:	46c0      	nop			; (mov r8, r8)
   1dc7a:	46bd      	mov	sp, r7
   1dc7c:	b004      	add	sp, #16
   1dc7e:	bd80      	pop	{r7, pc}
   1dc80:	0001c2a9 	.word	0x0001c2a9
   1dc84:	0001dd79 	.word	0x0001dd79
   1dc88:	0001ed4d 	.word	0x0001ed4d
   1dc8c:	0001eb39 	.word	0x0001eb39
   1dc90:	0001c2cd 	.word	0x0001c2cd

0001dc94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1dc94:	b580      	push	{r7, lr}
   1dc96:	b084      	sub	sp, #16
   1dc98:	af00      	add	r7, sp, #0
   1dc9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1dc9c:	4b08      	ldr	r3, [pc, #32]	; (1dcc0 <prvIsQueueEmpty+0x2c>)
   1dc9e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1dca0:	687b      	ldr	r3, [r7, #4]
   1dca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1dca4:	2b00      	cmp	r3, #0
   1dca6:	d102      	bne.n	1dcae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1dca8:	2301      	movs	r3, #1
   1dcaa:	60fb      	str	r3, [r7, #12]
   1dcac:	e001      	b.n	1dcb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1dcae:	2300      	movs	r3, #0
   1dcb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1dcb2:	4b04      	ldr	r3, [pc, #16]	; (1dcc4 <prvIsQueueEmpty+0x30>)
   1dcb4:	4798      	blx	r3

	return xReturn;
   1dcb6:	68fb      	ldr	r3, [r7, #12]
}
   1dcb8:	0018      	movs	r0, r3
   1dcba:	46bd      	mov	sp, r7
   1dcbc:	b004      	add	sp, #16
   1dcbe:	bd80      	pop	{r7, pc}
   1dcc0:	0001c2a9 	.word	0x0001c2a9
   1dcc4:	0001c2cd 	.word	0x0001c2cd

0001dcc8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1dcc8:	b580      	push	{r7, lr}
   1dcca:	b084      	sub	sp, #16
   1dccc:	af00      	add	r7, sp, #0
   1dcce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1dcd0:	4b09      	ldr	r3, [pc, #36]	; (1dcf8 <prvIsQueueFull+0x30>)
   1dcd2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1dcd4:	687b      	ldr	r3, [r7, #4]
   1dcd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1dcd8:	687b      	ldr	r3, [r7, #4]
   1dcda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1dcdc:	429a      	cmp	r2, r3
   1dcde:	d102      	bne.n	1dce6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1dce0:	2301      	movs	r3, #1
   1dce2:	60fb      	str	r3, [r7, #12]
   1dce4:	e001      	b.n	1dcea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1dce6:	2300      	movs	r3, #0
   1dce8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1dcea:	4b04      	ldr	r3, [pc, #16]	; (1dcfc <prvIsQueueFull+0x34>)
   1dcec:	4798      	blx	r3

	return xReturn;
   1dcee:	68fb      	ldr	r3, [r7, #12]
}
   1dcf0:	0018      	movs	r0, r3
   1dcf2:	46bd      	mov	sp, r7
   1dcf4:	b004      	add	sp, #16
   1dcf6:	bd80      	pop	{r7, pc}
   1dcf8:	0001c2a9 	.word	0x0001c2a9
   1dcfc:	0001c2cd 	.word	0x0001c2cd

0001dd00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1dd00:	b580      	push	{r7, lr}
   1dd02:	b086      	sub	sp, #24
   1dd04:	af00      	add	r7, sp, #0
   1dd06:	60f8      	str	r0, [r7, #12]
   1dd08:	60b9      	str	r1, [r7, #8]
   1dd0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1dd0c:	68fb      	ldr	r3, [r7, #12]
   1dd0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1dd10:	4b15      	ldr	r3, [pc, #84]	; (1dd68 <vQueueWaitForMessageRestricted+0x68>)
   1dd12:	4798      	blx	r3
   1dd14:	697b      	ldr	r3, [r7, #20]
   1dd16:	2244      	movs	r2, #68	; 0x44
   1dd18:	5c9b      	ldrb	r3, [r3, r2]
   1dd1a:	b25b      	sxtb	r3, r3
   1dd1c:	3301      	adds	r3, #1
   1dd1e:	d103      	bne.n	1dd28 <vQueueWaitForMessageRestricted+0x28>
   1dd20:	697b      	ldr	r3, [r7, #20]
   1dd22:	2244      	movs	r2, #68	; 0x44
   1dd24:	2100      	movs	r1, #0
   1dd26:	5499      	strb	r1, [r3, r2]
   1dd28:	697b      	ldr	r3, [r7, #20]
   1dd2a:	2245      	movs	r2, #69	; 0x45
   1dd2c:	5c9b      	ldrb	r3, [r3, r2]
   1dd2e:	b25b      	sxtb	r3, r3
   1dd30:	3301      	adds	r3, #1
   1dd32:	d103      	bne.n	1dd3c <vQueueWaitForMessageRestricted+0x3c>
   1dd34:	697b      	ldr	r3, [r7, #20]
   1dd36:	2245      	movs	r2, #69	; 0x45
   1dd38:	2100      	movs	r1, #0
   1dd3a:	5499      	strb	r1, [r3, r2]
   1dd3c:	4b0b      	ldr	r3, [pc, #44]	; (1dd6c <vQueueWaitForMessageRestricted+0x6c>)
   1dd3e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1dd40:	697b      	ldr	r3, [r7, #20]
   1dd42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1dd44:	2b00      	cmp	r3, #0
   1dd46:	d106      	bne.n	1dd56 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1dd48:	697b      	ldr	r3, [r7, #20]
   1dd4a:	3324      	adds	r3, #36	; 0x24
   1dd4c:	687a      	ldr	r2, [r7, #4]
   1dd4e:	68b9      	ldr	r1, [r7, #8]
   1dd50:	0018      	movs	r0, r3
   1dd52:	4b07      	ldr	r3, [pc, #28]	; (1dd70 <vQueueWaitForMessageRestricted+0x70>)
   1dd54:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1dd56:	697b      	ldr	r3, [r7, #20]
   1dd58:	0018      	movs	r0, r3
   1dd5a:	4b06      	ldr	r3, [pc, #24]	; (1dd74 <vQueueWaitForMessageRestricted+0x74>)
   1dd5c:	4798      	blx	r3
	}
   1dd5e:	46c0      	nop			; (mov r8, r8)
   1dd60:	46bd      	mov	sp, r7
   1dd62:	b006      	add	sp, #24
   1dd64:	bd80      	pop	{r7, pc}
   1dd66:	46c0      	nop			; (mov r8, r8)
   1dd68:	0001c2a9 	.word	0x0001c2a9
   1dd6c:	0001c2cd 	.word	0x0001c2cd
   1dd70:	0001ea59 	.word	0x0001ea59
   1dd74:	0001dba5 	.word	0x0001dba5

0001dd78 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1dd78:	b5b0      	push	{r4, r5, r7, lr}
   1dd7a:	b086      	sub	sp, #24
   1dd7c:	af00      	add	r7, sp, #0
   1dd7e:	6078      	str	r0, [r7, #4]
   1dd80:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1dd82:	687b      	ldr	r3, [r7, #4]
   1dd84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dd86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1dd88:	2300      	movs	r3, #0
   1dd8a:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1dd8c:	693b      	ldr	r3, [r7, #16]
   1dd8e:	2b00      	cmp	r3, #0
   1dd90:	d101      	bne.n	1dd96 <prvNotifyQueueSetContainer+0x1e>
   1dd92:	b672      	cpsid	i
   1dd94:	e7fe      	b.n	1dd94 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1dd96:	693b      	ldr	r3, [r7, #16]
   1dd98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1dd9a:	693b      	ldr	r3, [r7, #16]
   1dd9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1dd9e:	429a      	cmp	r2, r3
   1dda0:	d301      	bcc.n	1dda6 <prvNotifyQueueSetContainer+0x2e>
   1dda2:	b672      	cpsid	i
   1dda4:	e7fe      	b.n	1dda4 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1dda6:	693b      	ldr	r3, [r7, #16]
   1dda8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ddaa:	693b      	ldr	r3, [r7, #16]
   1ddac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ddae:	429a      	cmp	r2, r3
   1ddb0:	d300      	bcc.n	1ddb4 <prvNotifyQueueSetContainer+0x3c>
   1ddb2:	e08b      	b.n	1decc <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1ddb4:	230f      	movs	r3, #15
   1ddb6:	18fb      	adds	r3, r7, r3
   1ddb8:	693a      	ldr	r2, [r7, #16]
   1ddba:	2145      	movs	r1, #69	; 0x45
   1ddbc:	5c52      	ldrb	r2, [r2, r1]
   1ddbe:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1ddc0:	4b45      	ldr	r3, [pc, #276]	; (1ded8 <prvNotifyQueueSetContainer+0x160>)
   1ddc2:	4798      	blx	r3
   1ddc4:	0003      	movs	r3, r0
   1ddc6:	0018      	movs	r0, r3
   1ddc8:	4b44      	ldr	r3, [pc, #272]	; (1dedc <prvNotifyQueueSetContainer+0x164>)
   1ddca:	4798      	blx	r3
   1ddcc:	0003      	movs	r3, r0
   1ddce:	001a      	movs	r2, r3
   1ddd0:	4b43      	ldr	r3, [pc, #268]	; (1dee0 <prvNotifyQueueSetContainer+0x168>)
   1ddd2:	881b      	ldrh	r3, [r3, #0]
   1ddd4:	4013      	ands	r3, r2
   1ddd6:	b29b      	uxth	r3, r3
   1ddd8:	2b00      	cmp	r3, #0
   1ddda:	d02e      	beq.n	1de3a <prvNotifyQueueSetContainer+0xc2>
   1dddc:	693b      	ldr	r3, [r7, #16]
   1ddde:	0018      	movs	r0, r3
   1dde0:	4b40      	ldr	r3, [pc, #256]	; (1dee4 <prvNotifyQueueSetContainer+0x16c>)
   1dde2:	4798      	blx	r3
   1dde4:	0003      	movs	r3, r0
   1dde6:	001a      	movs	r2, r3
   1dde8:	4b3d      	ldr	r3, [pc, #244]	; (1dee0 <prvNotifyQueueSetContainer+0x168>)
   1ddea:	881b      	ldrh	r3, [r3, #0]
   1ddec:	4013      	ands	r3, r2
   1ddee:	b29b      	uxth	r3, r3
   1ddf0:	2b00      	cmp	r3, #0
   1ddf2:	d022      	beq.n	1de3a <prvNotifyQueueSetContainer+0xc2>
   1ddf4:	683b      	ldr	r3, [r7, #0]
   1ddf6:	2b00      	cmp	r3, #0
   1ddf8:	d10b      	bne.n	1de12 <prvNotifyQueueSetContainer+0x9a>
   1ddfa:	693b      	ldr	r3, [r7, #16]
   1ddfc:	0018      	movs	r0, r3
   1ddfe:	4b3a      	ldr	r3, [pc, #232]	; (1dee8 <prvNotifyQueueSetContainer+0x170>)
   1de00:	4798      	blx	r3
   1de02:	0003      	movs	r3, r0
   1de04:	001a      	movs	r2, r3
   1de06:	4b39      	ldr	r3, [pc, #228]	; (1deec <prvNotifyQueueSetContainer+0x174>)
   1de08:	5c9b      	ldrb	r3, [r3, r2]
   1de0a:	3320      	adds	r3, #32
   1de0c:	b2db      	uxtb	r3, r3
   1de0e:	001d      	movs	r5, r3
   1de10:	e000      	b.n	1de14 <prvNotifyQueueSetContainer+0x9c>
   1de12:	2525      	movs	r5, #37	; 0x25
   1de14:	693b      	ldr	r3, [r7, #16]
   1de16:	0018      	movs	r0, r3
   1de18:	4b33      	ldr	r3, [pc, #204]	; (1dee8 <prvNotifyQueueSetContainer+0x170>)
   1de1a:	4798      	blx	r3
   1de1c:	0003      	movs	r3, r0
   1de1e:	001a      	movs	r2, r3
   1de20:	4b32      	ldr	r3, [pc, #200]	; (1deec <prvNotifyQueueSetContainer+0x174>)
   1de22:	5c9c      	ldrb	r4, [r3, r2]
   1de24:	693b      	ldr	r3, [r7, #16]
   1de26:	0018      	movs	r0, r3
   1de28:	4b31      	ldr	r3, [pc, #196]	; (1def0 <prvNotifyQueueSetContainer+0x178>)
   1de2a:	4798      	blx	r3
   1de2c:	0003      	movs	r3, r0
   1de2e:	b2db      	uxtb	r3, r3
   1de30:	001a      	movs	r2, r3
   1de32:	0021      	movs	r1, r4
   1de34:	0028      	movs	r0, r5
   1de36:	4b2f      	ldr	r3, [pc, #188]	; (1def4 <prvNotifyQueueSetContainer+0x17c>)
   1de38:	4798      	blx	r3
   1de3a:	693b      	ldr	r3, [r7, #16]
   1de3c:	0018      	movs	r0, r3
   1de3e:	4b2a      	ldr	r3, [pc, #168]	; (1dee8 <prvNotifyQueueSetContainer+0x170>)
   1de40:	4798      	blx	r3
   1de42:	0003      	movs	r3, r0
   1de44:	001a      	movs	r2, r3
   1de46:	4b29      	ldr	r3, [pc, #164]	; (1deec <prvNotifyQueueSetContainer+0x174>)
   1de48:	5c9c      	ldrb	r4, [r3, r2]
   1de4a:	693b      	ldr	r3, [r7, #16]
   1de4c:	0018      	movs	r0, r3
   1de4e:	4b28      	ldr	r3, [pc, #160]	; (1def0 <prvNotifyQueueSetContainer+0x178>)
   1de50:	4798      	blx	r3
   1de52:	0003      	movs	r3, r0
   1de54:	b2dd      	uxtb	r5, r3
   1de56:	693b      	ldr	r3, [r7, #16]
   1de58:	0018      	movs	r0, r3
   1de5a:	4b23      	ldr	r3, [pc, #140]	; (1dee8 <prvNotifyQueueSetContainer+0x170>)
   1de5c:	4798      	blx	r3
   1de5e:	0003      	movs	r3, r0
   1de60:	001a      	movs	r2, r3
   1de62:	4b22      	ldr	r3, [pc, #136]	; (1deec <prvNotifyQueueSetContainer+0x174>)
   1de64:	5c9b      	ldrb	r3, [r3, r2]
   1de66:	2b02      	cmp	r3, #2
   1de68:	d005      	beq.n	1de76 <prvNotifyQueueSetContainer+0xfe>
   1de6a:	693b      	ldr	r3, [r7, #16]
   1de6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1de6e:	b2db      	uxtb	r3, r3
   1de70:	3301      	adds	r3, #1
   1de72:	b2db      	uxtb	r3, r3
   1de74:	e000      	b.n	1de78 <prvNotifyQueueSetContainer+0x100>
   1de76:	2300      	movs	r3, #0
   1de78:	001a      	movs	r2, r3
   1de7a:	0029      	movs	r1, r5
   1de7c:	0020      	movs	r0, r4
   1de7e:	4b1e      	ldr	r3, [pc, #120]	; (1def8 <prvNotifyQueueSetContainer+0x180>)
   1de80:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1de82:	683a      	ldr	r2, [r7, #0]
   1de84:	1d39      	adds	r1, r7, #4
   1de86:	693b      	ldr	r3, [r7, #16]
   1de88:	0018      	movs	r0, r3
   1de8a:	4b1c      	ldr	r3, [pc, #112]	; (1defc <prvNotifyQueueSetContainer+0x184>)
   1de8c:	4798      	blx	r3
   1de8e:	0003      	movs	r3, r0
   1de90:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1de92:	230f      	movs	r3, #15
   1de94:	18fb      	adds	r3, r7, r3
   1de96:	781b      	ldrb	r3, [r3, #0]
   1de98:	b25b      	sxtb	r3, r3
   1de9a:	3301      	adds	r3, #1
   1de9c:	d10d      	bne.n	1deba <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1de9e:	693b      	ldr	r3, [r7, #16]
   1dea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1dea2:	2b00      	cmp	r3, #0
   1dea4:	d012      	beq.n	1decc <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1dea6:	693b      	ldr	r3, [r7, #16]
   1dea8:	3324      	adds	r3, #36	; 0x24
   1deaa:	0018      	movs	r0, r3
   1deac:	4b14      	ldr	r3, [pc, #80]	; (1df00 <prvNotifyQueueSetContainer+0x188>)
   1deae:	4798      	blx	r3
   1deb0:	1e03      	subs	r3, r0, #0
   1deb2:	d00b      	beq.n	1decc <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1deb4:	2301      	movs	r3, #1
   1deb6:	617b      	str	r3, [r7, #20]
   1deb8:	e008      	b.n	1decc <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1deba:	230f      	movs	r3, #15
   1debc:	18fb      	adds	r3, r7, r3
   1debe:	781b      	ldrb	r3, [r3, #0]
   1dec0:	3301      	adds	r3, #1
   1dec2:	b2db      	uxtb	r3, r3
   1dec4:	b259      	sxtb	r1, r3
   1dec6:	693b      	ldr	r3, [r7, #16]
   1dec8:	2245      	movs	r2, #69	; 0x45
   1deca:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1decc:	697b      	ldr	r3, [r7, #20]
	}
   1dece:	0018      	movs	r0, r3
   1ded0:	46bd      	mov	sp, r7
   1ded2:	b006      	add	sp, #24
   1ded4:	bdb0      	pop	{r4, r5, r7, pc}
   1ded6:	46c0      	nop			; (mov r8, r8)
   1ded8:	0001a539 	.word	0x0001a539
   1dedc:	0001a29d 	.word	0x0001a29d
   1dee0:	20000104 	.word	0x20000104
   1dee4:	0001a35d 	.word	0x0001a35d
   1dee8:	0001a25d 	.word	0x0001a25d
   1deec:	200000f8 	.word	0x200000f8
   1def0:	0001a33d 	.word	0x0001a33d
   1def4:	0001ac95 	.word	0x0001ac95
   1def8:	0001b2f1 	.word	0x0001b2f1
   1defc:	0001da75 	.word	0x0001da75
   1df00:	0001eb39 	.word	0x0001eb39

0001df04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1df04:	b590      	push	{r4, r7, lr}
   1df06:	b08d      	sub	sp, #52	; 0x34
   1df08:	af04      	add	r7, sp, #16
   1df0a:	60f8      	str	r0, [r7, #12]
   1df0c:	60b9      	str	r1, [r7, #8]
   1df0e:	603b      	str	r3, [r7, #0]
   1df10:	1dbb      	adds	r3, r7, #6
   1df12:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1df14:	1dbb      	adds	r3, r7, #6
   1df16:	881b      	ldrh	r3, [r3, #0]
   1df18:	009b      	lsls	r3, r3, #2
   1df1a:	0018      	movs	r0, r3
   1df1c:	4b1d      	ldr	r3, [pc, #116]	; (1df94 <xTaskCreate+0x90>)
   1df1e:	4798      	blx	r3
   1df20:	0003      	movs	r3, r0
   1df22:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1df24:	697b      	ldr	r3, [r7, #20]
   1df26:	2b00      	cmp	r3, #0
   1df28:	d010      	beq.n	1df4c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1df2a:	2054      	movs	r0, #84	; 0x54
   1df2c:	4b19      	ldr	r3, [pc, #100]	; (1df94 <xTaskCreate+0x90>)
   1df2e:	4798      	blx	r3
   1df30:	0003      	movs	r3, r0
   1df32:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1df34:	69fb      	ldr	r3, [r7, #28]
   1df36:	2b00      	cmp	r3, #0
   1df38:	d003      	beq.n	1df42 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1df3a:	69fb      	ldr	r3, [r7, #28]
   1df3c:	697a      	ldr	r2, [r7, #20]
   1df3e:	631a      	str	r2, [r3, #48]	; 0x30
   1df40:	e006      	b.n	1df50 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1df42:	697b      	ldr	r3, [r7, #20]
   1df44:	0018      	movs	r0, r3
   1df46:	4b14      	ldr	r3, [pc, #80]	; (1df98 <xTaskCreate+0x94>)
   1df48:	4798      	blx	r3
   1df4a:	e001      	b.n	1df50 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1df4c:	2300      	movs	r3, #0
   1df4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1df50:	69fb      	ldr	r3, [r7, #28]
   1df52:	2b00      	cmp	r3, #0
   1df54:	d016      	beq.n	1df84 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1df56:	1dbb      	adds	r3, r7, #6
   1df58:	881a      	ldrh	r2, [r3, #0]
   1df5a:	683c      	ldr	r4, [r7, #0]
   1df5c:	68b9      	ldr	r1, [r7, #8]
   1df5e:	68f8      	ldr	r0, [r7, #12]
   1df60:	2300      	movs	r3, #0
   1df62:	9303      	str	r3, [sp, #12]
   1df64:	69fb      	ldr	r3, [r7, #28]
   1df66:	9302      	str	r3, [sp, #8]
   1df68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1df6a:	9301      	str	r3, [sp, #4]
   1df6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1df6e:	9300      	str	r3, [sp, #0]
   1df70:	0023      	movs	r3, r4
   1df72:	4c0a      	ldr	r4, [pc, #40]	; (1df9c <xTaskCreate+0x98>)
   1df74:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1df76:	69fb      	ldr	r3, [r7, #28]
   1df78:	0018      	movs	r0, r3
   1df7a:	4b09      	ldr	r3, [pc, #36]	; (1dfa0 <xTaskCreate+0x9c>)
   1df7c:	4798      	blx	r3
			xReturn = pdPASS;
   1df7e:	2301      	movs	r3, #1
   1df80:	61bb      	str	r3, [r7, #24]
   1df82:	e002      	b.n	1df8a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1df84:	2301      	movs	r3, #1
   1df86:	425b      	negs	r3, r3
   1df88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1df8a:	69bb      	ldr	r3, [r7, #24]
	}
   1df8c:	0018      	movs	r0, r3
   1df8e:	46bd      	mov	sp, r7
   1df90:	b009      	add	sp, #36	; 0x24
   1df92:	bd90      	pop	{r4, r7, pc}
   1df94:	0001c3e1 	.word	0x0001c3e1
   1df98:	0001c4a5 	.word	0x0001c4a5
   1df9c:	0001dfa5 	.word	0x0001dfa5
   1dfa0:	0001e0b5 	.word	0x0001e0b5

0001dfa4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1dfa4:	b580      	push	{r7, lr}
   1dfa6:	b086      	sub	sp, #24
   1dfa8:	af00      	add	r7, sp, #0
   1dfaa:	60f8      	str	r0, [r7, #12]
   1dfac:	60b9      	str	r1, [r7, #8]
   1dfae:	607a      	str	r2, [r7, #4]
   1dfb0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1dfb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1dfb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1dfb6:	687b      	ldr	r3, [r7, #4]
   1dfb8:	009b      	lsls	r3, r3, #2
   1dfba:	001a      	movs	r2, r3
   1dfbc:	21a5      	movs	r1, #165	; 0xa5
   1dfbe:	4b39      	ldr	r3, [pc, #228]	; (1e0a4 <prvInitialiseNewTask+0x100>)
   1dfc0:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1dfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1dfc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1dfc6:	687b      	ldr	r3, [r7, #4]
   1dfc8:	4937      	ldr	r1, [pc, #220]	; (1e0a8 <prvInitialiseNewTask+0x104>)
   1dfca:	468c      	mov	ip, r1
   1dfcc:	4463      	add	r3, ip
   1dfce:	009b      	lsls	r3, r3, #2
   1dfd0:	18d3      	adds	r3, r2, r3
   1dfd2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1dfd4:	693b      	ldr	r3, [r7, #16]
   1dfd6:	2207      	movs	r2, #7
   1dfd8:	4393      	bics	r3, r2
   1dfda:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1dfdc:	693b      	ldr	r3, [r7, #16]
   1dfde:	2207      	movs	r2, #7
   1dfe0:	4013      	ands	r3, r2
   1dfe2:	d001      	beq.n	1dfe8 <prvInitialiseNewTask+0x44>
   1dfe4:	b672      	cpsid	i
   1dfe6:	e7fe      	b.n	1dfe6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1dfe8:	2300      	movs	r3, #0
   1dfea:	617b      	str	r3, [r7, #20]
   1dfec:	e013      	b.n	1e016 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1dfee:	68ba      	ldr	r2, [r7, #8]
   1dff0:	697b      	ldr	r3, [r7, #20]
   1dff2:	18d3      	adds	r3, r2, r3
   1dff4:	7818      	ldrb	r0, [r3, #0]
   1dff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1dff8:	2134      	movs	r1, #52	; 0x34
   1dffa:	697b      	ldr	r3, [r7, #20]
   1dffc:	18d3      	adds	r3, r2, r3
   1dffe:	185b      	adds	r3, r3, r1
   1e000:	1c02      	adds	r2, r0, #0
   1e002:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1e004:	68ba      	ldr	r2, [r7, #8]
   1e006:	697b      	ldr	r3, [r7, #20]
   1e008:	18d3      	adds	r3, r2, r3
   1e00a:	781b      	ldrb	r3, [r3, #0]
   1e00c:	2b00      	cmp	r3, #0
   1e00e:	d006      	beq.n	1e01e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1e010:	697b      	ldr	r3, [r7, #20]
   1e012:	3301      	adds	r3, #1
   1e014:	617b      	str	r3, [r7, #20]
   1e016:	697b      	ldr	r3, [r7, #20]
   1e018:	2b07      	cmp	r3, #7
   1e01a:	d9e8      	bls.n	1dfee <prvInitialiseNewTask+0x4a>
   1e01c:	e000      	b.n	1e020 <prvInitialiseNewTask+0x7c>
		{
			break;
   1e01e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1e020:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e022:	223b      	movs	r2, #59	; 0x3b
   1e024:	2100      	movs	r1, #0
   1e026:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1e028:	6a3b      	ldr	r3, [r7, #32]
   1e02a:	2b04      	cmp	r3, #4
   1e02c:	d901      	bls.n	1e032 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1e02e:	2304      	movs	r3, #4
   1e030:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1e032:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e034:	6a3a      	ldr	r2, [r7, #32]
   1e036:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1e038:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e03a:	6a3a      	ldr	r2, [r7, #32]
   1e03c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1e03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e040:	2200      	movs	r2, #0
   1e042:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1e044:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e046:	3304      	adds	r3, #4
   1e048:	0018      	movs	r0, r3
   1e04a:	4b18      	ldr	r3, [pc, #96]	; (1e0ac <prvInitialiseNewTask+0x108>)
   1e04c:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1e04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e050:	3318      	adds	r3, #24
   1e052:	0018      	movs	r0, r3
   1e054:	4b15      	ldr	r3, [pc, #84]	; (1e0ac <prvInitialiseNewTask+0x108>)
   1e056:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1e058:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e05a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e05c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e05e:	6a3b      	ldr	r3, [r7, #32]
   1e060:	2205      	movs	r2, #5
   1e062:	1ad2      	subs	r2, r2, r3
   1e064:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e066:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1e068:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e06a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e06c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1e06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e070:	2200      	movs	r2, #0
   1e072:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1e074:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e076:	2250      	movs	r2, #80	; 0x50
   1e078:	2100      	movs	r1, #0
   1e07a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1e07c:	683a      	ldr	r2, [r7, #0]
   1e07e:	68f9      	ldr	r1, [r7, #12]
   1e080:	693b      	ldr	r3, [r7, #16]
   1e082:	0018      	movs	r0, r3
   1e084:	4b0a      	ldr	r3, [pc, #40]	; (1e0b0 <prvInitialiseNewTask+0x10c>)
   1e086:	4798      	blx	r3
   1e088:	0002      	movs	r2, r0
   1e08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e08c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1e08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e090:	2b00      	cmp	r3, #0
   1e092:	d002      	beq.n	1e09a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1e094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e096:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e098:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1e09a:	46c0      	nop			; (mov r8, r8)
   1e09c:	46bd      	mov	sp, r7
   1e09e:	b006      	add	sp, #24
   1e0a0:	bd80      	pop	{r7, pc}
   1e0a2:	46c0      	nop			; (mov r8, r8)
   1e0a4:	00036c9f 	.word	0x00036c9f
   1e0a8:	3fffffff 	.word	0x3fffffff
   1e0ac:	0001c051 	.word	0x0001c051
   1e0b0:	0001c169 	.word	0x0001c169

0001e0b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1e0b4:	b580      	push	{r7, lr}
   1e0b6:	b082      	sub	sp, #8
   1e0b8:	af00      	add	r7, sp, #0
   1e0ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1e0bc:	4b60      	ldr	r3, [pc, #384]	; (1e240 <prvAddNewTaskToReadyList+0x18c>)
   1e0be:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1e0c0:	4b60      	ldr	r3, [pc, #384]	; (1e244 <prvAddNewTaskToReadyList+0x190>)
   1e0c2:	681b      	ldr	r3, [r3, #0]
   1e0c4:	1c5a      	adds	r2, r3, #1
   1e0c6:	4b5f      	ldr	r3, [pc, #380]	; (1e244 <prvAddNewTaskToReadyList+0x190>)
   1e0c8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1e0ca:	4b5f      	ldr	r3, [pc, #380]	; (1e248 <prvAddNewTaskToReadyList+0x194>)
   1e0cc:	681b      	ldr	r3, [r3, #0]
   1e0ce:	2b00      	cmp	r3, #0
   1e0d0:	d109      	bne.n	1e0e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1e0d2:	4b5d      	ldr	r3, [pc, #372]	; (1e248 <prvAddNewTaskToReadyList+0x194>)
   1e0d4:	687a      	ldr	r2, [r7, #4]
   1e0d6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1e0d8:	4b5a      	ldr	r3, [pc, #360]	; (1e244 <prvAddNewTaskToReadyList+0x190>)
   1e0da:	681b      	ldr	r3, [r3, #0]
   1e0dc:	2b01      	cmp	r3, #1
   1e0de:	d110      	bne.n	1e102 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1e0e0:	4b5a      	ldr	r3, [pc, #360]	; (1e24c <prvAddNewTaskToReadyList+0x198>)
   1e0e2:	4798      	blx	r3
   1e0e4:	e00d      	b.n	1e102 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1e0e6:	4b5a      	ldr	r3, [pc, #360]	; (1e250 <prvAddNewTaskToReadyList+0x19c>)
   1e0e8:	681b      	ldr	r3, [r3, #0]
   1e0ea:	2b00      	cmp	r3, #0
   1e0ec:	d109      	bne.n	1e102 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1e0ee:	4b56      	ldr	r3, [pc, #344]	; (1e248 <prvAddNewTaskToReadyList+0x194>)
   1e0f0:	681b      	ldr	r3, [r3, #0]
   1e0f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e0f4:	687b      	ldr	r3, [r7, #4]
   1e0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e0f8:	429a      	cmp	r2, r3
   1e0fa:	d802      	bhi.n	1e102 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1e0fc:	4b52      	ldr	r3, [pc, #328]	; (1e248 <prvAddNewTaskToReadyList+0x194>)
   1e0fe:	687a      	ldr	r2, [r7, #4]
   1e100:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1e102:	4b54      	ldr	r3, [pc, #336]	; (1e254 <prvAddNewTaskToReadyList+0x1a0>)
   1e104:	681b      	ldr	r3, [r3, #0]
   1e106:	1c5a      	adds	r2, r3, #1
   1e108:	4b52      	ldr	r3, [pc, #328]	; (1e254 <prvAddNewTaskToReadyList+0x1a0>)
   1e10a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1e10c:	4b51      	ldr	r3, [pc, #324]	; (1e254 <prvAddNewTaskToReadyList+0x1a0>)
   1e10e:	681a      	ldr	r2, [r3, #0]
   1e110:	687b      	ldr	r3, [r7, #4]
   1e112:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1e114:	687b      	ldr	r3, [r7, #4]
   1e116:	2b00      	cmp	r3, #0
   1e118:	d052      	beq.n	1e1c0 <prvAddNewTaskToReadyList+0x10c>
   1e11a:	2003      	movs	r0, #3
   1e11c:	4b4e      	ldr	r3, [pc, #312]	; (1e258 <prvAddNewTaskToReadyList+0x1a4>)
   1e11e:	4798      	blx	r3
   1e120:	0003      	movs	r3, r0
   1e122:	b29a      	uxth	r2, r3
   1e124:	687b      	ldr	r3, [r7, #4]
   1e126:	0011      	movs	r1, r2
   1e128:	0018      	movs	r0, r3
   1e12a:	4b4c      	ldr	r3, [pc, #304]	; (1e25c <prvAddNewTaskToReadyList+0x1a8>)
   1e12c:	4798      	blx	r3
   1e12e:	4b4c      	ldr	r3, [pc, #304]	; (1e260 <prvAddNewTaskToReadyList+0x1ac>)
   1e130:	881a      	ldrh	r2, [r3, #0]
   1e132:	687b      	ldr	r3, [r7, #4]
   1e134:	0011      	movs	r1, r2
   1e136:	0018      	movs	r0, r3
   1e138:	4b4a      	ldr	r3, [pc, #296]	; (1e264 <prvAddNewTaskToReadyList+0x1b0>)
   1e13a:	4798      	blx	r3
   1e13c:	687b      	ldr	r3, [r7, #4]
   1e13e:	0018      	movs	r0, r3
   1e140:	4b49      	ldr	r3, [pc, #292]	; (1e268 <prvAddNewTaskToReadyList+0x1b4>)
   1e142:	4798      	blx	r3
   1e144:	0003      	movs	r3, r0
   1e146:	b2d9      	uxtb	r1, r3
   1e148:	687b      	ldr	r3, [r7, #4]
   1e14a:	3334      	adds	r3, #52	; 0x34
   1e14c:	001a      	movs	r2, r3
   1e14e:	2003      	movs	r0, #3
   1e150:	4b46      	ldr	r3, [pc, #280]	; (1e26c <prvAddNewTaskToReadyList+0x1b8>)
   1e152:	4798      	blx	r3
   1e154:	687b      	ldr	r3, [r7, #4]
   1e156:	0018      	movs	r0, r3
   1e158:	4b43      	ldr	r3, [pc, #268]	; (1e268 <prvAddNewTaskToReadyList+0x1b4>)
   1e15a:	4798      	blx	r3
   1e15c:	0003      	movs	r3, r0
   1e15e:	b2d9      	uxtb	r1, r3
   1e160:	687b      	ldr	r3, [r7, #4]
   1e162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e164:	b2db      	uxtb	r3, r3
   1e166:	001a      	movs	r2, r3
   1e168:	2003      	movs	r0, #3
   1e16a:	4b41      	ldr	r3, [pc, #260]	; (1e270 <prvAddNewTaskToReadyList+0x1bc>)
   1e16c:	4798      	blx	r3
   1e16e:	4b41      	ldr	r3, [pc, #260]	; (1e274 <prvAddNewTaskToReadyList+0x1c0>)
   1e170:	4798      	blx	r3
   1e172:	0003      	movs	r3, r0
   1e174:	0018      	movs	r0, r3
   1e176:	4b40      	ldr	r3, [pc, #256]	; (1e278 <prvAddNewTaskToReadyList+0x1c4>)
   1e178:	4798      	blx	r3
   1e17a:	0003      	movs	r3, r0
   1e17c:	001a      	movs	r2, r3
   1e17e:	4b3f      	ldr	r3, [pc, #252]	; (1e27c <prvAddNewTaskToReadyList+0x1c8>)
   1e180:	881b      	ldrh	r3, [r3, #0]
   1e182:	4013      	ands	r3, r2
   1e184:	b29b      	uxth	r3, r3
   1e186:	2b00      	cmp	r3, #0
   1e188:	d016      	beq.n	1e1b8 <prvAddNewTaskToReadyList+0x104>
   1e18a:	687b      	ldr	r3, [r7, #4]
   1e18c:	0018      	movs	r0, r3
   1e18e:	4b3a      	ldr	r3, [pc, #232]	; (1e278 <prvAddNewTaskToReadyList+0x1c4>)
   1e190:	4798      	blx	r3
   1e192:	0003      	movs	r3, r0
   1e194:	001a      	movs	r2, r3
   1e196:	4b39      	ldr	r3, [pc, #228]	; (1e27c <prvAddNewTaskToReadyList+0x1c8>)
   1e198:	881b      	ldrh	r3, [r3, #0]
   1e19a:	4013      	ands	r3, r2
   1e19c:	b29b      	uxth	r3, r3
   1e19e:	2b00      	cmp	r3, #0
   1e1a0:	d00a      	beq.n	1e1b8 <prvAddNewTaskToReadyList+0x104>
   1e1a2:	687b      	ldr	r3, [r7, #4]
   1e1a4:	0018      	movs	r0, r3
   1e1a6:	4b30      	ldr	r3, [pc, #192]	; (1e268 <prvAddNewTaskToReadyList+0x1b4>)
   1e1a8:	4798      	blx	r3
   1e1aa:	0003      	movs	r3, r0
   1e1ac:	b2db      	uxtb	r3, r3
   1e1ae:	001a      	movs	r2, r3
   1e1b0:	2103      	movs	r1, #3
   1e1b2:	201b      	movs	r0, #27
   1e1b4:	4b32      	ldr	r3, [pc, #200]	; (1e280 <prvAddNewTaskToReadyList+0x1cc>)
   1e1b6:	4798      	blx	r3
   1e1b8:	687b      	ldr	r3, [r7, #4]
   1e1ba:	0018      	movs	r0, r3
   1e1bc:	4b31      	ldr	r3, [pc, #196]	; (1e284 <prvAddNewTaskToReadyList+0x1d0>)
   1e1be:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1e1c0:	687b      	ldr	r3, [r7, #4]
   1e1c2:	0018      	movs	r0, r3
   1e1c4:	4b2c      	ldr	r3, [pc, #176]	; (1e278 <prvAddNewTaskToReadyList+0x1c4>)
   1e1c6:	4798      	blx	r3
   1e1c8:	0003      	movs	r3, r0
   1e1ca:	001a      	movs	r2, r3
   1e1cc:	4b2b      	ldr	r3, [pc, #172]	; (1e27c <prvAddNewTaskToReadyList+0x1c8>)
   1e1ce:	881b      	ldrh	r3, [r3, #0]
   1e1d0:	4013      	ands	r3, r2
   1e1d2:	b29b      	uxth	r3, r3
   1e1d4:	2b00      	cmp	r3, #0
   1e1d6:	d008      	beq.n	1e1ea <prvAddNewTaskToReadyList+0x136>
   1e1d8:	687b      	ldr	r3, [r7, #4]
   1e1da:	0018      	movs	r0, r3
   1e1dc:	4b22      	ldr	r3, [pc, #136]	; (1e268 <prvAddNewTaskToReadyList+0x1b4>)
   1e1de:	4798      	blx	r3
   1e1e0:	0003      	movs	r3, r0
   1e1e2:	b2db      	uxtb	r3, r3
   1e1e4:	0018      	movs	r0, r3
   1e1e6:	4b28      	ldr	r3, [pc, #160]	; (1e288 <prvAddNewTaskToReadyList+0x1d4>)
   1e1e8:	4798      	blx	r3
   1e1ea:	687b      	ldr	r3, [r7, #4]
   1e1ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e1ee:	4b27      	ldr	r3, [pc, #156]	; (1e28c <prvAddNewTaskToReadyList+0x1d8>)
   1e1f0:	681b      	ldr	r3, [r3, #0]
   1e1f2:	429a      	cmp	r2, r3
   1e1f4:	d903      	bls.n	1e1fe <prvAddNewTaskToReadyList+0x14a>
   1e1f6:	687b      	ldr	r3, [r7, #4]
   1e1f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e1fa:	4b24      	ldr	r3, [pc, #144]	; (1e28c <prvAddNewTaskToReadyList+0x1d8>)
   1e1fc:	601a      	str	r2, [r3, #0]
   1e1fe:	687b      	ldr	r3, [r7, #4]
   1e200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e202:	0013      	movs	r3, r2
   1e204:	009b      	lsls	r3, r3, #2
   1e206:	189b      	adds	r3, r3, r2
   1e208:	009b      	lsls	r3, r3, #2
   1e20a:	4a21      	ldr	r2, [pc, #132]	; (1e290 <prvAddNewTaskToReadyList+0x1dc>)
   1e20c:	189a      	adds	r2, r3, r2
   1e20e:	687b      	ldr	r3, [r7, #4]
   1e210:	3304      	adds	r3, #4
   1e212:	0019      	movs	r1, r3
   1e214:	0010      	movs	r0, r2
   1e216:	4b1f      	ldr	r3, [pc, #124]	; (1e294 <prvAddNewTaskToReadyList+0x1e0>)
   1e218:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1e21a:	4b1f      	ldr	r3, [pc, #124]	; (1e298 <prvAddNewTaskToReadyList+0x1e4>)
   1e21c:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1e21e:	4b0c      	ldr	r3, [pc, #48]	; (1e250 <prvAddNewTaskToReadyList+0x19c>)
   1e220:	681b      	ldr	r3, [r3, #0]
   1e222:	2b00      	cmp	r3, #0
   1e224:	d008      	beq.n	1e238 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1e226:	4b08      	ldr	r3, [pc, #32]	; (1e248 <prvAddNewTaskToReadyList+0x194>)
   1e228:	681b      	ldr	r3, [r3, #0]
   1e22a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e22c:	687b      	ldr	r3, [r7, #4]
   1e22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e230:	429a      	cmp	r2, r3
   1e232:	d201      	bcs.n	1e238 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1e234:	4b19      	ldr	r3, [pc, #100]	; (1e29c <prvAddNewTaskToReadyList+0x1e8>)
   1e236:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1e238:	46c0      	nop			; (mov r8, r8)
   1e23a:	46bd      	mov	sp, r7
   1e23c:	b002      	add	sp, #8
   1e23e:	bd80      	pop	{r7, pc}
   1e240:	0001c2a9 	.word	0x0001c2a9
   1e244:	20003e04 	.word	0x20003e04
   1e248:	20003d2c 	.word	0x20003d2c
   1e24c:	0001edd5 	.word	0x0001edd5
   1e250:	20003e10 	.word	0x20003e10
   1e254:	20003e20 	.word	0x20003e20
   1e258:	0001b81d 	.word	0x0001b81d
   1e25c:	0001a2c1 	.word	0x0001a2c1
   1e260:	20000106 	.word	0x20000106
   1e264:	0001a2fd 	.word	0x0001a2fd
   1e268:	0001a27d 	.word	0x0001a27d
   1e26c:	0001ba4d 	.word	0x0001ba4d
   1e270:	0001b1b1 	.word	0x0001b1b1
   1e274:	0001a539 	.word	0x0001a539
   1e278:	0001a29d 	.word	0x0001a29d
   1e27c:	20000104 	.word	0x20000104
   1e280:	0001ac95 	.word	0x0001ac95
   1e284:	0001a3fd 	.word	0x0001a3fd
   1e288:	0001aa4d 	.word	0x0001aa4d
   1e28c:	20003e0c 	.word	0x20003e0c
   1e290:	20003d30 	.word	0x20003d30
   1e294:	0001c067 	.word	0x0001c067
   1e298:	0001c2cd 	.word	0x0001c2cd
   1e29c:	0001c291 	.word	0x0001c291

0001e2a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1e2a0:	b580      	push	{r7, lr}
   1e2a2:	b084      	sub	sp, #16
   1e2a4:	af00      	add	r7, sp, #0
   1e2a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1e2a8:	2300      	movs	r3, #0
   1e2aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1e2ac:	687b      	ldr	r3, [r7, #4]
   1e2ae:	2b00      	cmp	r3, #0
   1e2b0:	d045      	beq.n	1e33e <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1e2b2:	4b27      	ldr	r3, [pc, #156]	; (1e350 <vTaskDelay+0xb0>)
   1e2b4:	681b      	ldr	r3, [r3, #0]
   1e2b6:	2b00      	cmp	r3, #0
   1e2b8:	d001      	beq.n	1e2be <vTaskDelay+0x1e>
   1e2ba:	b672      	cpsid	i
   1e2bc:	e7fe      	b.n	1e2bc <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1e2be:	4b25      	ldr	r3, [pc, #148]	; (1e354 <vTaskDelay+0xb4>)
   1e2c0:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1e2c2:	4b25      	ldr	r3, [pc, #148]	; (1e358 <vTaskDelay+0xb8>)
   1e2c4:	681b      	ldr	r3, [r3, #0]
   1e2c6:	0018      	movs	r0, r3
   1e2c8:	4b24      	ldr	r3, [pc, #144]	; (1e35c <vTaskDelay+0xbc>)
   1e2ca:	4798      	blx	r3
   1e2cc:	0003      	movs	r3, r0
   1e2ce:	001a      	movs	r2, r3
   1e2d0:	4b23      	ldr	r3, [pc, #140]	; (1e360 <vTaskDelay+0xc0>)
   1e2d2:	881b      	ldrh	r3, [r3, #0]
   1e2d4:	4013      	ands	r3, r2
   1e2d6:	b29b      	uxth	r3, r3
   1e2d8:	2b00      	cmp	r3, #0
   1e2da:	d00e      	beq.n	1e2fa <vTaskDelay+0x5a>
   1e2dc:	687b      	ldr	r3, [r7, #4]
   1e2de:	0019      	movs	r1, r3
   1e2e0:	2089      	movs	r0, #137	; 0x89
   1e2e2:	4b20      	ldr	r3, [pc, #128]	; (1e364 <vTaskDelay+0xc4>)
   1e2e4:	4798      	blx	r3
   1e2e6:	4b1c      	ldr	r3, [pc, #112]	; (1e358 <vTaskDelay+0xb8>)
   1e2e8:	681b      	ldr	r3, [r3, #0]
   1e2ea:	0018      	movs	r0, r3
   1e2ec:	4b1e      	ldr	r3, [pc, #120]	; (1e368 <vTaskDelay+0xc8>)
   1e2ee:	4798      	blx	r3
   1e2f0:	0003      	movs	r3, r0
   1e2f2:	b2db      	uxtb	r3, r3
   1e2f4:	0018      	movs	r0, r3
   1e2f6:	4b1d      	ldr	r3, [pc, #116]	; (1e36c <vTaskDelay+0xcc>)
   1e2f8:	4798      	blx	r3
   1e2fa:	4b1d      	ldr	r3, [pc, #116]	; (1e370 <vTaskDelay+0xd0>)
   1e2fc:	4798      	blx	r3
   1e2fe:	0003      	movs	r3, r0
   1e300:	0018      	movs	r0, r3
   1e302:	4b16      	ldr	r3, [pc, #88]	; (1e35c <vTaskDelay+0xbc>)
   1e304:	4798      	blx	r3
   1e306:	0003      	movs	r3, r0
   1e308:	001a      	movs	r2, r3
   1e30a:	4b15      	ldr	r3, [pc, #84]	; (1e360 <vTaskDelay+0xc0>)
   1e30c:	881b      	ldrh	r3, [r3, #0]
   1e30e:	4013      	ands	r3, r2
   1e310:	b29b      	uxth	r3, r3
   1e312:	2b00      	cmp	r3, #0
   1e314:	d00a      	beq.n	1e32c <vTaskDelay+0x8c>
   1e316:	4b16      	ldr	r3, [pc, #88]	; (1e370 <vTaskDelay+0xd0>)
   1e318:	4798      	blx	r3
   1e31a:	0003      	movs	r3, r0
   1e31c:	0018      	movs	r0, r3
   1e31e:	4b12      	ldr	r3, [pc, #72]	; (1e368 <vTaskDelay+0xc8>)
   1e320:	4798      	blx	r3
   1e322:	0003      	movs	r3, r0
   1e324:	b2db      	uxtb	r3, r3
   1e326:	0018      	movs	r0, r3
   1e328:	4b10      	ldr	r3, [pc, #64]	; (1e36c <vTaskDelay+0xcc>)
   1e32a:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1e32c:	687b      	ldr	r3, [r7, #4]
   1e32e:	2100      	movs	r1, #0
   1e330:	0018      	movs	r0, r3
   1e332:	4b10      	ldr	r3, [pc, #64]	; (1e374 <vTaskDelay+0xd4>)
   1e334:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1e336:	4b10      	ldr	r3, [pc, #64]	; (1e378 <vTaskDelay+0xd8>)
   1e338:	4798      	blx	r3
   1e33a:	0003      	movs	r3, r0
   1e33c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1e33e:	68fb      	ldr	r3, [r7, #12]
   1e340:	2b00      	cmp	r3, #0
   1e342:	d101      	bne.n	1e348 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1e344:	4b0d      	ldr	r3, [pc, #52]	; (1e37c <vTaskDelay+0xdc>)
   1e346:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1e348:	46c0      	nop			; (mov r8, r8)
   1e34a:	46bd      	mov	sp, r7
   1e34c:	b004      	add	sp, #16
   1e34e:	bd80      	pop	{r7, pc}
   1e350:	20003e2c 	.word	0x20003e2c
   1e354:	0001e561 	.word	0x0001e561
   1e358:	20003d2c 	.word	0x20003d2c
   1e35c:	0001a29d 	.word	0x0001a29d
   1e360:	20000104 	.word	0x20000104
   1e364:	0001af9d 	.word	0x0001af9d
   1e368:	0001a27d 	.word	0x0001a27d
   1e36c:	0001b42d 	.word	0x0001b42d
   1e370:	0001a539 	.word	0x0001a539
   1e374:	0001f4b9 	.word	0x0001f4b9
   1e378:	0001e579 	.word	0x0001e579
   1e37c:	0001c291 	.word	0x0001c291

0001e380 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1e380:	b580      	push	{r7, lr}
   1e382:	b084      	sub	sp, #16
   1e384:	af00      	add	r7, sp, #0
   1e386:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1e388:	4b42      	ldr	r3, [pc, #264]	; (1e494 <vTaskSuspend+0x114>)
   1e38a:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1e38c:	687b      	ldr	r3, [r7, #4]
   1e38e:	2b00      	cmp	r3, #0
   1e390:	d102      	bne.n	1e398 <vTaskSuspend+0x18>
   1e392:	4b41      	ldr	r3, [pc, #260]	; (1e498 <vTaskSuspend+0x118>)
   1e394:	681b      	ldr	r3, [r3, #0]
   1e396:	e000      	b.n	1e39a <vTaskSuspend+0x1a>
   1e398:	687b      	ldr	r3, [r7, #4]
   1e39a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1e39c:	4b3f      	ldr	r3, [pc, #252]	; (1e49c <vTaskSuspend+0x11c>)
   1e39e:	4798      	blx	r3
   1e3a0:	0003      	movs	r3, r0
   1e3a2:	0018      	movs	r0, r3
   1e3a4:	4b3e      	ldr	r3, [pc, #248]	; (1e4a0 <vTaskSuspend+0x120>)
   1e3a6:	4798      	blx	r3
   1e3a8:	0003      	movs	r3, r0
   1e3aa:	001a      	movs	r2, r3
   1e3ac:	4b3d      	ldr	r3, [pc, #244]	; (1e4a4 <vTaskSuspend+0x124>)
   1e3ae:	881b      	ldrh	r3, [r3, #0]
   1e3b0:	4013      	ands	r3, r2
   1e3b2:	b29b      	uxth	r3, r3
   1e3b4:	2b00      	cmp	r3, #0
   1e3b6:	d016      	beq.n	1e3e6 <vTaskSuspend+0x66>
   1e3b8:	68fb      	ldr	r3, [r7, #12]
   1e3ba:	0018      	movs	r0, r3
   1e3bc:	4b38      	ldr	r3, [pc, #224]	; (1e4a0 <vTaskSuspend+0x120>)
   1e3be:	4798      	blx	r3
   1e3c0:	0003      	movs	r3, r0
   1e3c2:	001a      	movs	r2, r3
   1e3c4:	4b37      	ldr	r3, [pc, #220]	; (1e4a4 <vTaskSuspend+0x124>)
   1e3c6:	881b      	ldrh	r3, [r3, #0]
   1e3c8:	4013      	ands	r3, r2
   1e3ca:	b29b      	uxth	r3, r3
   1e3cc:	2b00      	cmp	r3, #0
   1e3ce:	d00a      	beq.n	1e3e6 <vTaskSuspend+0x66>
   1e3d0:	68fb      	ldr	r3, [r7, #12]
   1e3d2:	0018      	movs	r0, r3
   1e3d4:	4b34      	ldr	r3, [pc, #208]	; (1e4a8 <vTaskSuspend+0x128>)
   1e3d6:	4798      	blx	r3
   1e3d8:	0003      	movs	r3, r0
   1e3da:	b2db      	uxtb	r3, r3
   1e3dc:	001a      	movs	r2, r3
   1e3de:	2103      	movs	r1, #3
   1e3e0:	208a      	movs	r0, #138	; 0x8a
   1e3e2:	4b32      	ldr	r3, [pc, #200]	; (1e4ac <vTaskSuspend+0x12c>)
   1e3e4:	4798      	blx	r3
   1e3e6:	68fb      	ldr	r3, [r7, #12]
   1e3e8:	0018      	movs	r0, r3
   1e3ea:	4b2f      	ldr	r3, [pc, #188]	; (1e4a8 <vTaskSuspend+0x128>)
   1e3ec:	4798      	blx	r3
   1e3ee:	0003      	movs	r3, r0
   1e3f0:	b2db      	uxtb	r3, r3
   1e3f2:	0018      	movs	r0, r3
   1e3f4:	4b2e      	ldr	r3, [pc, #184]	; (1e4b0 <vTaskSuspend+0x130>)
   1e3f6:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1e3f8:	68fb      	ldr	r3, [r7, #12]
   1e3fa:	3304      	adds	r3, #4
   1e3fc:	0018      	movs	r0, r3
   1e3fe:	4b2d      	ldr	r3, [pc, #180]	; (1e4b4 <vTaskSuspend+0x134>)
   1e400:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1e402:	68fb      	ldr	r3, [r7, #12]
   1e404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e406:	2b00      	cmp	r3, #0
   1e408:	d004      	beq.n	1e414 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1e40a:	68fb      	ldr	r3, [r7, #12]
   1e40c:	3318      	adds	r3, #24
   1e40e:	0018      	movs	r0, r3
   1e410:	4b28      	ldr	r3, [pc, #160]	; (1e4b4 <vTaskSuspend+0x134>)
   1e412:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1e414:	68fb      	ldr	r3, [r7, #12]
   1e416:	1d1a      	adds	r2, r3, #4
   1e418:	4b27      	ldr	r3, [pc, #156]	; (1e4b8 <vTaskSuspend+0x138>)
   1e41a:	0011      	movs	r1, r2
   1e41c:	0018      	movs	r0, r3
   1e41e:	4b27      	ldr	r3, [pc, #156]	; (1e4bc <vTaskSuspend+0x13c>)
   1e420:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1e422:	68fb      	ldr	r3, [r7, #12]
   1e424:	2250      	movs	r2, #80	; 0x50
   1e426:	5c9b      	ldrb	r3, [r3, r2]
   1e428:	b2db      	uxtb	r3, r3
   1e42a:	2b01      	cmp	r3, #1
   1e42c:	d103      	bne.n	1e436 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1e42e:	68fb      	ldr	r3, [r7, #12]
   1e430:	2250      	movs	r2, #80	; 0x50
   1e432:	2100      	movs	r1, #0
   1e434:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1e436:	4b22      	ldr	r3, [pc, #136]	; (1e4c0 <vTaskSuspend+0x140>)
   1e438:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1e43a:	4b22      	ldr	r3, [pc, #136]	; (1e4c4 <vTaskSuspend+0x144>)
   1e43c:	681b      	ldr	r3, [r3, #0]
   1e43e:	2b00      	cmp	r3, #0
   1e440:	d005      	beq.n	1e44e <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1e442:	4b14      	ldr	r3, [pc, #80]	; (1e494 <vTaskSuspend+0x114>)
   1e444:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1e446:	4b20      	ldr	r3, [pc, #128]	; (1e4c8 <vTaskSuspend+0x148>)
   1e448:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1e44a:	4b1d      	ldr	r3, [pc, #116]	; (1e4c0 <vTaskSuspend+0x140>)
   1e44c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1e44e:	4b12      	ldr	r3, [pc, #72]	; (1e498 <vTaskSuspend+0x118>)
   1e450:	681b      	ldr	r3, [r3, #0]
   1e452:	68fa      	ldr	r2, [r7, #12]
   1e454:	429a      	cmp	r2, r3
   1e456:	d118      	bne.n	1e48a <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1e458:	4b1a      	ldr	r3, [pc, #104]	; (1e4c4 <vTaskSuspend+0x144>)
   1e45a:	681b      	ldr	r3, [r3, #0]
   1e45c:	2b00      	cmp	r3, #0
   1e45e:	d008      	beq.n	1e472 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1e460:	4b1a      	ldr	r3, [pc, #104]	; (1e4cc <vTaskSuspend+0x14c>)
   1e462:	681b      	ldr	r3, [r3, #0]
   1e464:	2b00      	cmp	r3, #0
   1e466:	d001      	beq.n	1e46c <vTaskSuspend+0xec>
   1e468:	b672      	cpsid	i
   1e46a:	e7fe      	b.n	1e46a <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1e46c:	4b18      	ldr	r3, [pc, #96]	; (1e4d0 <vTaskSuspend+0x150>)
   1e46e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1e470:	e00b      	b.n	1e48a <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1e472:	4b11      	ldr	r3, [pc, #68]	; (1e4b8 <vTaskSuspend+0x138>)
   1e474:	681a      	ldr	r2, [r3, #0]
   1e476:	4b17      	ldr	r3, [pc, #92]	; (1e4d4 <vTaskSuspend+0x154>)
   1e478:	681b      	ldr	r3, [r3, #0]
   1e47a:	429a      	cmp	r2, r3
   1e47c:	d103      	bne.n	1e486 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1e47e:	4b06      	ldr	r3, [pc, #24]	; (1e498 <vTaskSuspend+0x118>)
   1e480:	2200      	movs	r2, #0
   1e482:	601a      	str	r2, [r3, #0]
	}
   1e484:	e001      	b.n	1e48a <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1e486:	4b14      	ldr	r3, [pc, #80]	; (1e4d8 <vTaskSuspend+0x158>)
   1e488:	4798      	blx	r3
	}
   1e48a:	46c0      	nop			; (mov r8, r8)
   1e48c:	46bd      	mov	sp, r7
   1e48e:	b004      	add	sp, #16
   1e490:	bd80      	pop	{r7, pc}
   1e492:	46c0      	nop			; (mov r8, r8)
   1e494:	0001c2a9 	.word	0x0001c2a9
   1e498:	20003d2c 	.word	0x20003d2c
   1e49c:	0001a539 	.word	0x0001a539
   1e4a0:	0001a29d 	.word	0x0001a29d
   1e4a4:	20000104 	.word	0x20000104
   1e4a8:	0001a27d 	.word	0x0001a27d
   1e4ac:	0001ac95 	.word	0x0001ac95
   1e4b0:	0001b42d 	.word	0x0001b42d
   1e4b4:	0001c117 	.word	0x0001c117
   1e4b8:	20003df0 	.word	0x20003df0
   1e4bc:	0001c067 	.word	0x0001c067
   1e4c0:	0001c2cd 	.word	0x0001c2cd
   1e4c4:	20003e10 	.word	0x20003e10
   1e4c8:	0001ef65 	.word	0x0001ef65
   1e4cc:	20003e2c 	.word	0x20003e2c
   1e4d0:	0001c291 	.word	0x0001c291
   1e4d4:	20003e04 	.word	0x20003e04
   1e4d8:	0001e8f5 	.word	0x0001e8f5

0001e4dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1e4dc:	b590      	push	{r4, r7, lr}
   1e4de:	b085      	sub	sp, #20
   1e4e0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1e4e2:	4916      	ldr	r1, [pc, #88]	; (1e53c <vTaskStartScheduler+0x60>)
   1e4e4:	4816      	ldr	r0, [pc, #88]	; (1e540 <vTaskStartScheduler+0x64>)
   1e4e6:	4b17      	ldr	r3, [pc, #92]	; (1e544 <vTaskStartScheduler+0x68>)
   1e4e8:	9301      	str	r3, [sp, #4]
   1e4ea:	2300      	movs	r3, #0
   1e4ec:	9300      	str	r3, [sp, #0]
   1e4ee:	2300      	movs	r3, #0
   1e4f0:	2296      	movs	r2, #150	; 0x96
   1e4f2:	4c15      	ldr	r4, [pc, #84]	; (1e548 <vTaskStartScheduler+0x6c>)
   1e4f4:	47a0      	blx	r4
   1e4f6:	0003      	movs	r3, r0
   1e4f8:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1e4fa:	687b      	ldr	r3, [r7, #4]
   1e4fc:	2b01      	cmp	r3, #1
   1e4fe:	d103      	bne.n	1e508 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1e500:	4b12      	ldr	r3, [pc, #72]	; (1e54c <vTaskStartScheduler+0x70>)
   1e502:	4798      	blx	r3
   1e504:	0003      	movs	r3, r0
   1e506:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1e508:	687b      	ldr	r3, [r7, #4]
   1e50a:	2b01      	cmp	r3, #1
   1e50c:	d10d      	bne.n	1e52a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1e50e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1e510:	4b0f      	ldr	r3, [pc, #60]	; (1e550 <vTaskStartScheduler+0x74>)
   1e512:	2201      	movs	r2, #1
   1e514:	4252      	negs	r2, r2
   1e516:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1e518:	4b0e      	ldr	r3, [pc, #56]	; (1e554 <vTaskStartScheduler+0x78>)
   1e51a:	2201      	movs	r2, #1
   1e51c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1e51e:	4b0e      	ldr	r3, [pc, #56]	; (1e558 <vTaskStartScheduler+0x7c>)
   1e520:	2200      	movs	r2, #0
   1e522:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1e524:	4b0d      	ldr	r3, [pc, #52]	; (1e55c <vTaskStartScheduler+0x80>)
   1e526:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1e528:	e004      	b.n	1e534 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1e52a:	687b      	ldr	r3, [r7, #4]
   1e52c:	3301      	adds	r3, #1
   1e52e:	d101      	bne.n	1e534 <vTaskStartScheduler+0x58>
   1e530:	b672      	cpsid	i
   1e532:	e7fe      	b.n	1e532 <vTaskStartScheduler+0x56>
}
   1e534:	46c0      	nop			; (mov r8, r8)
   1e536:	46bd      	mov	sp, r7
   1e538:	b003      	add	sp, #12
   1e53a:	bd90      	pop	{r4, r7, pc}
   1e53c:	0003a7cc 	.word	0x0003a7cc
   1e540:	0001edad 	.word	0x0001edad
   1e544:	20003e28 	.word	0x20003e28
   1e548:	0001df05 	.word	0x0001df05
   1e54c:	0001f56d 	.word	0x0001f56d
   1e550:	20003e24 	.word	0x20003e24
   1e554:	20003e10 	.word	0x20003e10
   1e558:	20003e08 	.word	0x20003e08
   1e55c:	0001c239 	.word	0x0001c239

0001e560 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1e560:	b580      	push	{r7, lr}
   1e562:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1e564:	4b03      	ldr	r3, [pc, #12]	; (1e574 <vTaskSuspendAll+0x14>)
   1e566:	681b      	ldr	r3, [r3, #0]
   1e568:	1c5a      	adds	r2, r3, #1
   1e56a:	4b02      	ldr	r3, [pc, #8]	; (1e574 <vTaskSuspendAll+0x14>)
   1e56c:	601a      	str	r2, [r3, #0]
}
   1e56e:	46c0      	nop			; (mov r8, r8)
   1e570:	46bd      	mov	sp, r7
   1e572:	bd80      	pop	{r7, pc}
   1e574:	20003e2c 	.word	0x20003e2c

0001e578 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1e578:	b580      	push	{r7, lr}
   1e57a:	b084      	sub	sp, #16
   1e57c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1e57e:	2300      	movs	r3, #0
   1e580:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1e582:	2300      	movs	r3, #0
   1e584:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1e586:	4b45      	ldr	r3, [pc, #276]	; (1e69c <xTaskResumeAll+0x124>)
   1e588:	681b      	ldr	r3, [r3, #0]
   1e58a:	2b00      	cmp	r3, #0
   1e58c:	d101      	bne.n	1e592 <xTaskResumeAll+0x1a>
   1e58e:	b672      	cpsid	i
   1e590:	e7fe      	b.n	1e590 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1e592:	4b43      	ldr	r3, [pc, #268]	; (1e6a0 <xTaskResumeAll+0x128>)
   1e594:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1e596:	4b41      	ldr	r3, [pc, #260]	; (1e69c <xTaskResumeAll+0x124>)
   1e598:	681b      	ldr	r3, [r3, #0]
   1e59a:	1e5a      	subs	r2, r3, #1
   1e59c:	4b3f      	ldr	r3, [pc, #252]	; (1e69c <xTaskResumeAll+0x124>)
   1e59e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1e5a0:	4b3e      	ldr	r3, [pc, #248]	; (1e69c <xTaskResumeAll+0x124>)
   1e5a2:	681b      	ldr	r3, [r3, #0]
   1e5a4:	2b00      	cmp	r3, #0
   1e5a6:	d000      	beq.n	1e5aa <xTaskResumeAll+0x32>
   1e5a8:	e071      	b.n	1e68e <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1e5aa:	4b3e      	ldr	r3, [pc, #248]	; (1e6a4 <xTaskResumeAll+0x12c>)
   1e5ac:	681b      	ldr	r3, [r3, #0]
   1e5ae:	2b00      	cmp	r3, #0
   1e5b0:	d100      	bne.n	1e5b4 <xTaskResumeAll+0x3c>
   1e5b2:	e06c      	b.n	1e68e <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1e5b4:	e044      	b.n	1e640 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1e5b6:	4b3c      	ldr	r3, [pc, #240]	; (1e6a8 <xTaskResumeAll+0x130>)
   1e5b8:	68db      	ldr	r3, [r3, #12]
   1e5ba:	68db      	ldr	r3, [r3, #12]
   1e5bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1e5be:	68fb      	ldr	r3, [r7, #12]
   1e5c0:	3318      	adds	r3, #24
   1e5c2:	0018      	movs	r0, r3
   1e5c4:	4b39      	ldr	r3, [pc, #228]	; (1e6ac <xTaskResumeAll+0x134>)
   1e5c6:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1e5c8:	68fb      	ldr	r3, [r7, #12]
   1e5ca:	3304      	adds	r3, #4
   1e5cc:	0018      	movs	r0, r3
   1e5ce:	4b37      	ldr	r3, [pc, #220]	; (1e6ac <xTaskResumeAll+0x134>)
   1e5d0:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1e5d2:	68fb      	ldr	r3, [r7, #12]
   1e5d4:	0018      	movs	r0, r3
   1e5d6:	4b36      	ldr	r3, [pc, #216]	; (1e6b0 <xTaskResumeAll+0x138>)
   1e5d8:	4798      	blx	r3
   1e5da:	0003      	movs	r3, r0
   1e5dc:	001a      	movs	r2, r3
   1e5de:	4b35      	ldr	r3, [pc, #212]	; (1e6b4 <xTaskResumeAll+0x13c>)
   1e5e0:	881b      	ldrh	r3, [r3, #0]
   1e5e2:	4013      	ands	r3, r2
   1e5e4:	b29b      	uxth	r3, r3
   1e5e6:	2b00      	cmp	r3, #0
   1e5e8:	d008      	beq.n	1e5fc <xTaskResumeAll+0x84>
   1e5ea:	68fb      	ldr	r3, [r7, #12]
   1e5ec:	0018      	movs	r0, r3
   1e5ee:	4b32      	ldr	r3, [pc, #200]	; (1e6b8 <xTaskResumeAll+0x140>)
   1e5f0:	4798      	blx	r3
   1e5f2:	0003      	movs	r3, r0
   1e5f4:	b2db      	uxtb	r3, r3
   1e5f6:	0018      	movs	r0, r3
   1e5f8:	4b30      	ldr	r3, [pc, #192]	; (1e6bc <xTaskResumeAll+0x144>)
   1e5fa:	4798      	blx	r3
   1e5fc:	68fb      	ldr	r3, [r7, #12]
   1e5fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e600:	4b2f      	ldr	r3, [pc, #188]	; (1e6c0 <xTaskResumeAll+0x148>)
   1e602:	681b      	ldr	r3, [r3, #0]
   1e604:	429a      	cmp	r2, r3
   1e606:	d903      	bls.n	1e610 <xTaskResumeAll+0x98>
   1e608:	68fb      	ldr	r3, [r7, #12]
   1e60a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e60c:	4b2c      	ldr	r3, [pc, #176]	; (1e6c0 <xTaskResumeAll+0x148>)
   1e60e:	601a      	str	r2, [r3, #0]
   1e610:	68fb      	ldr	r3, [r7, #12]
   1e612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e614:	0013      	movs	r3, r2
   1e616:	009b      	lsls	r3, r3, #2
   1e618:	189b      	adds	r3, r3, r2
   1e61a:	009b      	lsls	r3, r3, #2
   1e61c:	4a29      	ldr	r2, [pc, #164]	; (1e6c4 <xTaskResumeAll+0x14c>)
   1e61e:	189a      	adds	r2, r3, r2
   1e620:	68fb      	ldr	r3, [r7, #12]
   1e622:	3304      	adds	r3, #4
   1e624:	0019      	movs	r1, r3
   1e626:	0010      	movs	r0, r2
   1e628:	4b27      	ldr	r3, [pc, #156]	; (1e6c8 <xTaskResumeAll+0x150>)
   1e62a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1e62c:	68fb      	ldr	r3, [r7, #12]
   1e62e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e630:	4b26      	ldr	r3, [pc, #152]	; (1e6cc <xTaskResumeAll+0x154>)
   1e632:	681b      	ldr	r3, [r3, #0]
   1e634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e636:	429a      	cmp	r2, r3
   1e638:	d302      	bcc.n	1e640 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1e63a:	4b25      	ldr	r3, [pc, #148]	; (1e6d0 <xTaskResumeAll+0x158>)
   1e63c:	2201      	movs	r2, #1
   1e63e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1e640:	4b19      	ldr	r3, [pc, #100]	; (1e6a8 <xTaskResumeAll+0x130>)
   1e642:	681b      	ldr	r3, [r3, #0]
   1e644:	2b00      	cmp	r3, #0
   1e646:	d1b6      	bne.n	1e5b6 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1e648:	68fb      	ldr	r3, [r7, #12]
   1e64a:	2b00      	cmp	r3, #0
   1e64c:	d001      	beq.n	1e652 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1e64e:	4b21      	ldr	r3, [pc, #132]	; (1e6d4 <xTaskResumeAll+0x15c>)
   1e650:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1e652:	4b21      	ldr	r3, [pc, #132]	; (1e6d8 <xTaskResumeAll+0x160>)
   1e654:	681b      	ldr	r3, [r3, #0]
   1e656:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1e658:	687b      	ldr	r3, [r7, #4]
   1e65a:	2b00      	cmp	r3, #0
   1e65c:	d00f      	beq.n	1e67e <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1e65e:	4b1f      	ldr	r3, [pc, #124]	; (1e6dc <xTaskResumeAll+0x164>)
   1e660:	4798      	blx	r3
   1e662:	1e03      	subs	r3, r0, #0
   1e664:	d002      	beq.n	1e66c <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1e666:	4b1a      	ldr	r3, [pc, #104]	; (1e6d0 <xTaskResumeAll+0x158>)
   1e668:	2201      	movs	r2, #1
   1e66a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1e66c:	687b      	ldr	r3, [r7, #4]
   1e66e:	3b01      	subs	r3, #1
   1e670:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1e672:	687b      	ldr	r3, [r7, #4]
   1e674:	2b00      	cmp	r3, #0
   1e676:	d1f2      	bne.n	1e65e <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1e678:	4b17      	ldr	r3, [pc, #92]	; (1e6d8 <xTaskResumeAll+0x160>)
   1e67a:	2200      	movs	r2, #0
   1e67c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1e67e:	4b14      	ldr	r3, [pc, #80]	; (1e6d0 <xTaskResumeAll+0x158>)
   1e680:	681b      	ldr	r3, [r3, #0]
   1e682:	2b00      	cmp	r3, #0
   1e684:	d003      	beq.n	1e68e <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1e686:	2301      	movs	r3, #1
   1e688:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1e68a:	4b15      	ldr	r3, [pc, #84]	; (1e6e0 <xTaskResumeAll+0x168>)
   1e68c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1e68e:	4b15      	ldr	r3, [pc, #84]	; (1e6e4 <xTaskResumeAll+0x16c>)
   1e690:	4798      	blx	r3

	return xAlreadyYielded;
   1e692:	68bb      	ldr	r3, [r7, #8]
}
   1e694:	0018      	movs	r0, r3
   1e696:	46bd      	mov	sp, r7
   1e698:	b004      	add	sp, #16
   1e69a:	bd80      	pop	{r7, pc}
   1e69c:	20003e2c 	.word	0x20003e2c
   1e6a0:	0001c2a9 	.word	0x0001c2a9
   1e6a4:	20003e04 	.word	0x20003e04
   1e6a8:	20003dc4 	.word	0x20003dc4
   1e6ac:	0001c117 	.word	0x0001c117
   1e6b0:	0001a29d 	.word	0x0001a29d
   1e6b4:	20000104 	.word	0x20000104
   1e6b8:	0001a27d 	.word	0x0001a27d
   1e6bc:	0001aa4d 	.word	0x0001aa4d
   1e6c0:	20003e0c 	.word	0x20003e0c
   1e6c4:	20003d30 	.word	0x20003d30
   1e6c8:	0001c067 	.word	0x0001c067
   1e6cc:	20003d2c 	.word	0x20003d2c
   1e6d0:	20003e18 	.word	0x20003e18
   1e6d4:	0001ef65 	.word	0x0001ef65
   1e6d8:	20003e14 	.word	0x20003e14
   1e6dc:	0001e705 	.word	0x0001e705
   1e6e0:	0001c291 	.word	0x0001c291
   1e6e4:	0001c2cd 	.word	0x0001c2cd

0001e6e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1e6e8:	b580      	push	{r7, lr}
   1e6ea:	b082      	sub	sp, #8
   1e6ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1e6ee:	4b04      	ldr	r3, [pc, #16]	; (1e700 <xTaskGetTickCount+0x18>)
   1e6f0:	681b      	ldr	r3, [r3, #0]
   1e6f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1e6f4:	687b      	ldr	r3, [r7, #4]
}
   1e6f6:	0018      	movs	r0, r3
   1e6f8:	46bd      	mov	sp, r7
   1e6fa:	b002      	add	sp, #8
   1e6fc:	bd80      	pop	{r7, pc}
   1e6fe:	46c0      	nop			; (mov r8, r8)
   1e700:	20003e08 	.word	0x20003e08

0001e704 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1e704:	b580      	push	{r7, lr}
   1e706:	b086      	sub	sp, #24
   1e708:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1e70a:	2300      	movs	r3, #0
   1e70c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1e70e:	4b64      	ldr	r3, [pc, #400]	; (1e8a0 <xTaskIncrementTick+0x19c>)
   1e710:	681b      	ldr	r3, [r3, #0]
   1e712:	2b01      	cmp	r3, #1
   1e714:	d003      	beq.n	1e71e <xTaskIncrementTick+0x1a>
   1e716:	4b63      	ldr	r3, [pc, #396]	; (1e8a4 <xTaskIncrementTick+0x1a0>)
   1e718:	681b      	ldr	r3, [r3, #0]
   1e71a:	2b00      	cmp	r3, #0
   1e71c:	d107      	bne.n	1e72e <xTaskIncrementTick+0x2a>
   1e71e:	4b62      	ldr	r3, [pc, #392]	; (1e8a8 <xTaskIncrementTick+0x1a4>)
   1e720:	681b      	ldr	r3, [r3, #0]
   1e722:	1c5a      	adds	r2, r3, #1
   1e724:	4b60      	ldr	r3, [pc, #384]	; (1e8a8 <xTaskIncrementTick+0x1a4>)
   1e726:	601a      	str	r2, [r3, #0]
   1e728:	2000      	movs	r0, #0
   1e72a:	4b60      	ldr	r3, [pc, #384]	; (1e8ac <xTaskIncrementTick+0x1a8>)
   1e72c:	4798      	blx	r3
   1e72e:	4b5c      	ldr	r3, [pc, #368]	; (1e8a0 <xTaskIncrementTick+0x19c>)
   1e730:	681b      	ldr	r3, [r3, #0]
   1e732:	2b00      	cmp	r3, #0
   1e734:	d106      	bne.n	1e744 <xTaskIncrementTick+0x40>
   1e736:	4b5e      	ldr	r3, [pc, #376]	; (1e8b0 <xTaskIncrementTick+0x1ac>)
   1e738:	681b      	ldr	r3, [r3, #0]
   1e73a:	3301      	adds	r3, #1
   1e73c:	0019      	movs	r1, r3
   1e73e:	2003      	movs	r0, #3
   1e740:	4b5c      	ldr	r3, [pc, #368]	; (1e8b4 <xTaskIncrementTick+0x1b0>)
   1e742:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1e744:	4b56      	ldr	r3, [pc, #344]	; (1e8a0 <xTaskIncrementTick+0x19c>)
   1e746:	681b      	ldr	r3, [r3, #0]
   1e748:	2b00      	cmp	r3, #0
   1e74a:	d000      	beq.n	1e74e <xTaskIncrementTick+0x4a>
   1e74c:	e098      	b.n	1e880 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1e74e:	4b58      	ldr	r3, [pc, #352]	; (1e8b0 <xTaskIncrementTick+0x1ac>)
   1e750:	681b      	ldr	r3, [r3, #0]
   1e752:	3301      	adds	r3, #1
   1e754:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1e756:	4b56      	ldr	r3, [pc, #344]	; (1e8b0 <xTaskIncrementTick+0x1ac>)
   1e758:	693a      	ldr	r2, [r7, #16]
   1e75a:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1e75c:	693b      	ldr	r3, [r7, #16]
   1e75e:	2b00      	cmp	r3, #0
   1e760:	d117      	bne.n	1e792 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1e762:	4b55      	ldr	r3, [pc, #340]	; (1e8b8 <xTaskIncrementTick+0x1b4>)
   1e764:	681b      	ldr	r3, [r3, #0]
   1e766:	681b      	ldr	r3, [r3, #0]
   1e768:	2b00      	cmp	r3, #0
   1e76a:	d001      	beq.n	1e770 <xTaskIncrementTick+0x6c>
   1e76c:	b672      	cpsid	i
   1e76e:	e7fe      	b.n	1e76e <xTaskIncrementTick+0x6a>
   1e770:	4b51      	ldr	r3, [pc, #324]	; (1e8b8 <xTaskIncrementTick+0x1b4>)
   1e772:	681b      	ldr	r3, [r3, #0]
   1e774:	60fb      	str	r3, [r7, #12]
   1e776:	4b51      	ldr	r3, [pc, #324]	; (1e8bc <xTaskIncrementTick+0x1b8>)
   1e778:	681a      	ldr	r2, [r3, #0]
   1e77a:	4b4f      	ldr	r3, [pc, #316]	; (1e8b8 <xTaskIncrementTick+0x1b4>)
   1e77c:	601a      	str	r2, [r3, #0]
   1e77e:	4b4f      	ldr	r3, [pc, #316]	; (1e8bc <xTaskIncrementTick+0x1b8>)
   1e780:	68fa      	ldr	r2, [r7, #12]
   1e782:	601a      	str	r2, [r3, #0]
   1e784:	4b4e      	ldr	r3, [pc, #312]	; (1e8c0 <xTaskIncrementTick+0x1bc>)
   1e786:	681b      	ldr	r3, [r3, #0]
   1e788:	1c5a      	adds	r2, r3, #1
   1e78a:	4b4d      	ldr	r3, [pc, #308]	; (1e8c0 <xTaskIncrementTick+0x1bc>)
   1e78c:	601a      	str	r2, [r3, #0]
   1e78e:	4b4d      	ldr	r3, [pc, #308]	; (1e8c4 <xTaskIncrementTick+0x1c0>)
   1e790:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1e792:	4b4d      	ldr	r3, [pc, #308]	; (1e8c8 <xTaskIncrementTick+0x1c4>)
   1e794:	681b      	ldr	r3, [r3, #0]
   1e796:	693a      	ldr	r2, [r7, #16]
   1e798:	429a      	cmp	r2, r3
   1e79a:	d363      	bcc.n	1e864 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1e79c:	4b46      	ldr	r3, [pc, #280]	; (1e8b8 <xTaskIncrementTick+0x1b4>)
   1e79e:	681b      	ldr	r3, [r3, #0]
   1e7a0:	681b      	ldr	r3, [r3, #0]
   1e7a2:	2b00      	cmp	r3, #0
   1e7a4:	d101      	bne.n	1e7aa <xTaskIncrementTick+0xa6>
   1e7a6:	2301      	movs	r3, #1
   1e7a8:	e000      	b.n	1e7ac <xTaskIncrementTick+0xa8>
   1e7aa:	2300      	movs	r3, #0
   1e7ac:	2b00      	cmp	r3, #0
   1e7ae:	d004      	beq.n	1e7ba <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e7b0:	4b45      	ldr	r3, [pc, #276]	; (1e8c8 <xTaskIncrementTick+0x1c4>)
   1e7b2:	2201      	movs	r2, #1
   1e7b4:	4252      	negs	r2, r2
   1e7b6:	601a      	str	r2, [r3, #0]
					break;
   1e7b8:	e054      	b.n	1e864 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1e7ba:	4b3f      	ldr	r3, [pc, #252]	; (1e8b8 <xTaskIncrementTick+0x1b4>)
   1e7bc:	681b      	ldr	r3, [r3, #0]
   1e7be:	68db      	ldr	r3, [r3, #12]
   1e7c0:	68db      	ldr	r3, [r3, #12]
   1e7c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1e7c4:	68bb      	ldr	r3, [r7, #8]
   1e7c6:	685b      	ldr	r3, [r3, #4]
   1e7c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1e7ca:	693a      	ldr	r2, [r7, #16]
   1e7cc:	687b      	ldr	r3, [r7, #4]
   1e7ce:	429a      	cmp	r2, r3
   1e7d0:	d203      	bcs.n	1e7da <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1e7d2:	4b3d      	ldr	r3, [pc, #244]	; (1e8c8 <xTaskIncrementTick+0x1c4>)
   1e7d4:	687a      	ldr	r2, [r7, #4]
   1e7d6:	601a      	str	r2, [r3, #0]
						break;
   1e7d8:	e044      	b.n	1e864 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1e7da:	68bb      	ldr	r3, [r7, #8]
   1e7dc:	3304      	adds	r3, #4
   1e7de:	0018      	movs	r0, r3
   1e7e0:	4b3a      	ldr	r3, [pc, #232]	; (1e8cc <xTaskIncrementTick+0x1c8>)
   1e7e2:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1e7e4:	68bb      	ldr	r3, [r7, #8]
   1e7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e7e8:	2b00      	cmp	r3, #0
   1e7ea:	d004      	beq.n	1e7f6 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1e7ec:	68bb      	ldr	r3, [r7, #8]
   1e7ee:	3318      	adds	r3, #24
   1e7f0:	0018      	movs	r0, r3
   1e7f2:	4b36      	ldr	r3, [pc, #216]	; (1e8cc <xTaskIncrementTick+0x1c8>)
   1e7f4:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1e7f6:	68bb      	ldr	r3, [r7, #8]
   1e7f8:	0018      	movs	r0, r3
   1e7fa:	4b35      	ldr	r3, [pc, #212]	; (1e8d0 <xTaskIncrementTick+0x1cc>)
   1e7fc:	4798      	blx	r3
   1e7fe:	0003      	movs	r3, r0
   1e800:	001a      	movs	r2, r3
   1e802:	4b34      	ldr	r3, [pc, #208]	; (1e8d4 <xTaskIncrementTick+0x1d0>)
   1e804:	881b      	ldrh	r3, [r3, #0]
   1e806:	4013      	ands	r3, r2
   1e808:	b29b      	uxth	r3, r3
   1e80a:	2b00      	cmp	r3, #0
   1e80c:	d008      	beq.n	1e820 <xTaskIncrementTick+0x11c>
   1e80e:	68bb      	ldr	r3, [r7, #8]
   1e810:	0018      	movs	r0, r3
   1e812:	4b31      	ldr	r3, [pc, #196]	; (1e8d8 <xTaskIncrementTick+0x1d4>)
   1e814:	4798      	blx	r3
   1e816:	0003      	movs	r3, r0
   1e818:	b2db      	uxtb	r3, r3
   1e81a:	0018      	movs	r0, r3
   1e81c:	4b2f      	ldr	r3, [pc, #188]	; (1e8dc <xTaskIncrementTick+0x1d8>)
   1e81e:	4798      	blx	r3
   1e820:	68bb      	ldr	r3, [r7, #8]
   1e822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e824:	4b2e      	ldr	r3, [pc, #184]	; (1e8e0 <xTaskIncrementTick+0x1dc>)
   1e826:	681b      	ldr	r3, [r3, #0]
   1e828:	429a      	cmp	r2, r3
   1e82a:	d903      	bls.n	1e834 <xTaskIncrementTick+0x130>
   1e82c:	68bb      	ldr	r3, [r7, #8]
   1e82e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e830:	4b2b      	ldr	r3, [pc, #172]	; (1e8e0 <xTaskIncrementTick+0x1dc>)
   1e832:	601a      	str	r2, [r3, #0]
   1e834:	68bb      	ldr	r3, [r7, #8]
   1e836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e838:	0013      	movs	r3, r2
   1e83a:	009b      	lsls	r3, r3, #2
   1e83c:	189b      	adds	r3, r3, r2
   1e83e:	009b      	lsls	r3, r3, #2
   1e840:	4a28      	ldr	r2, [pc, #160]	; (1e8e4 <xTaskIncrementTick+0x1e0>)
   1e842:	189a      	adds	r2, r3, r2
   1e844:	68bb      	ldr	r3, [r7, #8]
   1e846:	3304      	adds	r3, #4
   1e848:	0019      	movs	r1, r3
   1e84a:	0010      	movs	r0, r2
   1e84c:	4b26      	ldr	r3, [pc, #152]	; (1e8e8 <xTaskIncrementTick+0x1e4>)
   1e84e:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1e850:	68bb      	ldr	r3, [r7, #8]
   1e852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e854:	4b25      	ldr	r3, [pc, #148]	; (1e8ec <xTaskIncrementTick+0x1e8>)
   1e856:	681b      	ldr	r3, [r3, #0]
   1e858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e85a:	429a      	cmp	r2, r3
   1e85c:	d39e      	bcc.n	1e79c <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1e85e:	2301      	movs	r3, #1
   1e860:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1e862:	e79b      	b.n	1e79c <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1e864:	4b21      	ldr	r3, [pc, #132]	; (1e8ec <xTaskIncrementTick+0x1e8>)
   1e866:	681b      	ldr	r3, [r3, #0]
   1e868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e86a:	491e      	ldr	r1, [pc, #120]	; (1e8e4 <xTaskIncrementTick+0x1e0>)
   1e86c:	0013      	movs	r3, r2
   1e86e:	009b      	lsls	r3, r3, #2
   1e870:	189b      	adds	r3, r3, r2
   1e872:	009b      	lsls	r3, r3, #2
   1e874:	585b      	ldr	r3, [r3, r1]
   1e876:	2b01      	cmp	r3, #1
   1e878:	d907      	bls.n	1e88a <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1e87a:	2301      	movs	r3, #1
   1e87c:	617b      	str	r3, [r7, #20]
   1e87e:	e004      	b.n	1e88a <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1e880:	4b08      	ldr	r3, [pc, #32]	; (1e8a4 <xTaskIncrementTick+0x1a0>)
   1e882:	681b      	ldr	r3, [r3, #0]
   1e884:	1c5a      	adds	r2, r3, #1
   1e886:	4b07      	ldr	r3, [pc, #28]	; (1e8a4 <xTaskIncrementTick+0x1a0>)
   1e888:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1e88a:	4b19      	ldr	r3, [pc, #100]	; (1e8f0 <xTaskIncrementTick+0x1ec>)
   1e88c:	681b      	ldr	r3, [r3, #0]
   1e88e:	2b00      	cmp	r3, #0
   1e890:	d001      	beq.n	1e896 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1e892:	2301      	movs	r3, #1
   1e894:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1e896:	697b      	ldr	r3, [r7, #20]
}
   1e898:	0018      	movs	r0, r3
   1e89a:	46bd      	mov	sp, r7
   1e89c:	b006      	add	sp, #24
   1e89e:	bd80      	pop	{r7, pc}
   1e8a0:	20003e2c 	.word	0x20003e2c
   1e8a4:	20003e14 	.word	0x20003e14
   1e8a8:	2000098c 	.word	0x2000098c
   1e8ac:	0001bf31 	.word	0x0001bf31
   1e8b0:	20003e08 	.word	0x20003e08
   1e8b4:	0001af9d 	.word	0x0001af9d
   1e8b8:	20003dbc 	.word	0x20003dbc
   1e8bc:	20003dc0 	.word	0x20003dc0
   1e8c0:	20003e1c 	.word	0x20003e1c
   1e8c4:	0001ef65 	.word	0x0001ef65
   1e8c8:	20003e24 	.word	0x20003e24
   1e8cc:	0001c117 	.word	0x0001c117
   1e8d0:	0001a29d 	.word	0x0001a29d
   1e8d4:	20000104 	.word	0x20000104
   1e8d8:	0001a27d 	.word	0x0001a27d
   1e8dc:	0001aa4d 	.word	0x0001aa4d
   1e8e0:	20003e0c 	.word	0x20003e0c
   1e8e4:	20003d30 	.word	0x20003d30
   1e8e8:	0001c067 	.word	0x0001c067
   1e8ec:	20003d2c 	.word	0x20003d2c
   1e8f0:	20003e18 	.word	0x20003e18

0001e8f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1e8f4:	b580      	push	{r7, lr}
   1e8f6:	b082      	sub	sp, #8
   1e8f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1e8fa:	4b3a      	ldr	r3, [pc, #232]	; (1e9e4 <vTaskSwitchContext+0xf0>)
   1e8fc:	681b      	ldr	r3, [r3, #0]
   1e8fe:	2b00      	cmp	r3, #0
   1e900:	d003      	beq.n	1e90a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1e902:	4b39      	ldr	r3, [pc, #228]	; (1e9e8 <vTaskSwitchContext+0xf4>)
   1e904:	2201      	movs	r2, #1
   1e906:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1e908:	e067      	b.n	1e9da <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1e90a:	4b37      	ldr	r3, [pc, #220]	; (1e9e8 <vTaskSwitchContext+0xf4>)
   1e90c:	2200      	movs	r2, #0
   1e90e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1e910:	4b36      	ldr	r3, [pc, #216]	; (1e9ec <vTaskSwitchContext+0xf8>)
   1e912:	681b      	ldr	r3, [r3, #0]
   1e914:	681a      	ldr	r2, [r3, #0]
   1e916:	4b35      	ldr	r3, [pc, #212]	; (1e9ec <vTaskSwitchContext+0xf8>)
   1e918:	681b      	ldr	r3, [r3, #0]
   1e91a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1e91c:	429a      	cmp	r2, r3
   1e91e:	d808      	bhi.n	1e932 <vTaskSwitchContext+0x3e>
   1e920:	4b32      	ldr	r3, [pc, #200]	; (1e9ec <vTaskSwitchContext+0xf8>)
   1e922:	681a      	ldr	r2, [r3, #0]
   1e924:	4b31      	ldr	r3, [pc, #196]	; (1e9ec <vTaskSwitchContext+0xf8>)
   1e926:	681b      	ldr	r3, [r3, #0]
   1e928:	3334      	adds	r3, #52	; 0x34
   1e92a:	0019      	movs	r1, r3
   1e92c:	0010      	movs	r0, r2
   1e92e:	4b30      	ldr	r3, [pc, #192]	; (1e9f0 <vTaskSwitchContext+0xfc>)
   1e930:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1e932:	4b30      	ldr	r3, [pc, #192]	; (1e9f4 <vTaskSwitchContext+0x100>)
   1e934:	681b      	ldr	r3, [r3, #0]
   1e936:	607b      	str	r3, [r7, #4]
   1e938:	e007      	b.n	1e94a <vTaskSwitchContext+0x56>
   1e93a:	687b      	ldr	r3, [r7, #4]
   1e93c:	2b00      	cmp	r3, #0
   1e93e:	d101      	bne.n	1e944 <vTaskSwitchContext+0x50>
   1e940:	b672      	cpsid	i
   1e942:	e7fe      	b.n	1e942 <vTaskSwitchContext+0x4e>
   1e944:	687b      	ldr	r3, [r7, #4]
   1e946:	3b01      	subs	r3, #1
   1e948:	607b      	str	r3, [r7, #4]
   1e94a:	492b      	ldr	r1, [pc, #172]	; (1e9f8 <vTaskSwitchContext+0x104>)
   1e94c:	687a      	ldr	r2, [r7, #4]
   1e94e:	0013      	movs	r3, r2
   1e950:	009b      	lsls	r3, r3, #2
   1e952:	189b      	adds	r3, r3, r2
   1e954:	009b      	lsls	r3, r3, #2
   1e956:	585b      	ldr	r3, [r3, r1]
   1e958:	2b00      	cmp	r3, #0
   1e95a:	d0ee      	beq.n	1e93a <vTaskSwitchContext+0x46>
   1e95c:	687a      	ldr	r2, [r7, #4]
   1e95e:	0013      	movs	r3, r2
   1e960:	009b      	lsls	r3, r3, #2
   1e962:	189b      	adds	r3, r3, r2
   1e964:	009b      	lsls	r3, r3, #2
   1e966:	4a24      	ldr	r2, [pc, #144]	; (1e9f8 <vTaskSwitchContext+0x104>)
   1e968:	189b      	adds	r3, r3, r2
   1e96a:	603b      	str	r3, [r7, #0]
   1e96c:	683b      	ldr	r3, [r7, #0]
   1e96e:	685b      	ldr	r3, [r3, #4]
   1e970:	685a      	ldr	r2, [r3, #4]
   1e972:	683b      	ldr	r3, [r7, #0]
   1e974:	605a      	str	r2, [r3, #4]
   1e976:	683b      	ldr	r3, [r7, #0]
   1e978:	685a      	ldr	r2, [r3, #4]
   1e97a:	683b      	ldr	r3, [r7, #0]
   1e97c:	3308      	adds	r3, #8
   1e97e:	429a      	cmp	r2, r3
   1e980:	d104      	bne.n	1e98c <vTaskSwitchContext+0x98>
   1e982:	683b      	ldr	r3, [r7, #0]
   1e984:	685b      	ldr	r3, [r3, #4]
   1e986:	685a      	ldr	r2, [r3, #4]
   1e988:	683b      	ldr	r3, [r7, #0]
   1e98a:	605a      	str	r2, [r3, #4]
   1e98c:	683b      	ldr	r3, [r7, #0]
   1e98e:	685b      	ldr	r3, [r3, #4]
   1e990:	68da      	ldr	r2, [r3, #12]
   1e992:	4b16      	ldr	r3, [pc, #88]	; (1e9ec <vTaskSwitchContext+0xf8>)
   1e994:	601a      	str	r2, [r3, #0]
   1e996:	4b17      	ldr	r3, [pc, #92]	; (1e9f4 <vTaskSwitchContext+0x100>)
   1e998:	687a      	ldr	r2, [r7, #4]
   1e99a:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1e99c:	4b17      	ldr	r3, [pc, #92]	; (1e9fc <vTaskSwitchContext+0x108>)
   1e99e:	2201      	movs	r2, #1
   1e9a0:	601a      	str	r2, [r3, #0]
   1e9a2:	4b17      	ldr	r3, [pc, #92]	; (1ea00 <vTaskSwitchContext+0x10c>)
   1e9a4:	4798      	blx	r3
   1e9a6:	0003      	movs	r3, r0
   1e9a8:	0018      	movs	r0, r3
   1e9aa:	4b16      	ldr	r3, [pc, #88]	; (1ea04 <vTaskSwitchContext+0x110>)
   1e9ac:	4798      	blx	r3
   1e9ae:	0003      	movs	r3, r0
   1e9b0:	001a      	movs	r2, r3
   1e9b2:	4b15      	ldr	r3, [pc, #84]	; (1ea08 <vTaskSwitchContext+0x114>)
   1e9b4:	881b      	ldrh	r3, [r3, #0]
   1e9b6:	4013      	ands	r3, r2
   1e9b8:	b29b      	uxth	r3, r3
   1e9ba:	2b00      	cmp	r3, #0
   1e9bc:	d00a      	beq.n	1e9d4 <vTaskSwitchContext+0xe0>
   1e9be:	4b10      	ldr	r3, [pc, #64]	; (1ea00 <vTaskSwitchContext+0x10c>)
   1e9c0:	4798      	blx	r3
   1e9c2:	0003      	movs	r3, r0
   1e9c4:	0018      	movs	r0, r3
   1e9c6:	4b11      	ldr	r3, [pc, #68]	; (1ea0c <vTaskSwitchContext+0x118>)
   1e9c8:	4798      	blx	r3
   1e9ca:	0003      	movs	r3, r0
   1e9cc:	b2db      	uxtb	r3, r3
   1e9ce:	0018      	movs	r0, r3
   1e9d0:	4b0f      	ldr	r3, [pc, #60]	; (1ea10 <vTaskSwitchContext+0x11c>)
   1e9d2:	4798      	blx	r3
   1e9d4:	4b09      	ldr	r3, [pc, #36]	; (1e9fc <vTaskSwitchContext+0x108>)
   1e9d6:	2202      	movs	r2, #2
   1e9d8:	601a      	str	r2, [r3, #0]
}
   1e9da:	46c0      	nop			; (mov r8, r8)
   1e9dc:	46bd      	mov	sp, r7
   1e9de:	b002      	add	sp, #8
   1e9e0:	bd80      	pop	{r7, pc}
   1e9e2:	46c0      	nop			; (mov r8, r8)
   1e9e4:	20003e2c 	.word	0x20003e2c
   1e9e8:	20003e18 	.word	0x20003e18
   1e9ec:	20003d2c 	.word	0x20003d2c
   1e9f0:	00034741 	.word	0x00034741
   1e9f4:	20003e0c 	.word	0x20003e0c
   1e9f8:	20003d30 	.word	0x20003d30
   1e9fc:	20000998 	.word	0x20000998
   1ea00:	0001a539 	.word	0x0001a539
   1ea04:	0001a29d 	.word	0x0001a29d
   1ea08:	20000104 	.word	0x20000104
   1ea0c:	0001a27d 	.word	0x0001a27d
   1ea10:	0001b099 	.word	0x0001b099

0001ea14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1ea14:	b580      	push	{r7, lr}
   1ea16:	b082      	sub	sp, #8
   1ea18:	af00      	add	r7, sp, #0
   1ea1a:	6078      	str	r0, [r7, #4]
   1ea1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1ea1e:	687b      	ldr	r3, [r7, #4]
   1ea20:	2b00      	cmp	r3, #0
   1ea22:	d101      	bne.n	1ea28 <vTaskPlaceOnEventList+0x14>
   1ea24:	b672      	cpsid	i
   1ea26:	e7fe      	b.n	1ea26 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1ea28:	4b08      	ldr	r3, [pc, #32]	; (1ea4c <vTaskPlaceOnEventList+0x38>)
   1ea2a:	681b      	ldr	r3, [r3, #0]
   1ea2c:	3318      	adds	r3, #24
   1ea2e:	001a      	movs	r2, r3
   1ea30:	687b      	ldr	r3, [r7, #4]
   1ea32:	0011      	movs	r1, r2
   1ea34:	0018      	movs	r0, r3
   1ea36:	4b06      	ldr	r3, [pc, #24]	; (1ea50 <vTaskPlaceOnEventList+0x3c>)
   1ea38:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1ea3a:	683b      	ldr	r3, [r7, #0]
   1ea3c:	2101      	movs	r1, #1
   1ea3e:	0018      	movs	r0, r3
   1ea40:	4b04      	ldr	r3, [pc, #16]	; (1ea54 <vTaskPlaceOnEventList+0x40>)
   1ea42:	4798      	blx	r3
}
   1ea44:	46c0      	nop			; (mov r8, r8)
   1ea46:	46bd      	mov	sp, r7
   1ea48:	b002      	add	sp, #8
   1ea4a:	bd80      	pop	{r7, pc}
   1ea4c:	20003d2c 	.word	0x20003d2c
   1ea50:	0001c0ab 	.word	0x0001c0ab
   1ea54:	0001f4b9 	.word	0x0001f4b9

0001ea58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1ea58:	b580      	push	{r7, lr}
   1ea5a:	b084      	sub	sp, #16
   1ea5c:	af00      	add	r7, sp, #0
   1ea5e:	60f8      	str	r0, [r7, #12]
   1ea60:	60b9      	str	r1, [r7, #8]
   1ea62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1ea64:	68fb      	ldr	r3, [r7, #12]
   1ea66:	2b00      	cmp	r3, #0
   1ea68:	d101      	bne.n	1ea6e <vTaskPlaceOnEventListRestricted+0x16>
   1ea6a:	b672      	cpsid	i
   1ea6c:	e7fe      	b.n	1ea6c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1ea6e:	4b28      	ldr	r3, [pc, #160]	; (1eb10 <vTaskPlaceOnEventListRestricted+0xb8>)
   1ea70:	681b      	ldr	r3, [r3, #0]
   1ea72:	3318      	adds	r3, #24
   1ea74:	001a      	movs	r2, r3
   1ea76:	68fb      	ldr	r3, [r7, #12]
   1ea78:	0011      	movs	r1, r2
   1ea7a:	0018      	movs	r0, r3
   1ea7c:	4b25      	ldr	r3, [pc, #148]	; (1eb14 <vTaskPlaceOnEventListRestricted+0xbc>)
   1ea7e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1ea80:	687b      	ldr	r3, [r7, #4]
   1ea82:	2b00      	cmp	r3, #0
   1ea84:	d002      	beq.n	1ea8c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1ea86:	2301      	movs	r3, #1
   1ea88:	425b      	negs	r3, r3
   1ea8a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1ea8c:	4b20      	ldr	r3, [pc, #128]	; (1eb10 <vTaskPlaceOnEventListRestricted+0xb8>)
   1ea8e:	681b      	ldr	r3, [r3, #0]
   1ea90:	0018      	movs	r0, r3
   1ea92:	4b21      	ldr	r3, [pc, #132]	; (1eb18 <vTaskPlaceOnEventListRestricted+0xc0>)
   1ea94:	4798      	blx	r3
   1ea96:	0003      	movs	r3, r0
   1ea98:	001a      	movs	r2, r3
   1ea9a:	4b20      	ldr	r3, [pc, #128]	; (1eb1c <vTaskPlaceOnEventListRestricted+0xc4>)
   1ea9c:	881b      	ldrh	r3, [r3, #0]
   1ea9e:	4013      	ands	r3, r2
   1eaa0:	b29b      	uxth	r3, r3
   1eaa2:	2b00      	cmp	r3, #0
   1eaa4:	d011      	beq.n	1eaca <vTaskPlaceOnEventListRestricted+0x72>
   1eaa6:	4b1e      	ldr	r3, [pc, #120]	; (1eb20 <vTaskPlaceOnEventListRestricted+0xc8>)
   1eaa8:	681a      	ldr	r2, [r3, #0]
   1eaaa:	68bb      	ldr	r3, [r7, #8]
   1eaac:	18d3      	adds	r3, r2, r3
   1eaae:	0019      	movs	r1, r3
   1eab0:	2088      	movs	r0, #136	; 0x88
   1eab2:	4b1c      	ldr	r3, [pc, #112]	; (1eb24 <vTaskPlaceOnEventListRestricted+0xcc>)
   1eab4:	4798      	blx	r3
   1eab6:	4b16      	ldr	r3, [pc, #88]	; (1eb10 <vTaskPlaceOnEventListRestricted+0xb8>)
   1eab8:	681b      	ldr	r3, [r3, #0]
   1eaba:	0018      	movs	r0, r3
   1eabc:	4b1a      	ldr	r3, [pc, #104]	; (1eb28 <vTaskPlaceOnEventListRestricted+0xd0>)
   1eabe:	4798      	blx	r3
   1eac0:	0003      	movs	r3, r0
   1eac2:	b2db      	uxtb	r3, r3
   1eac4:	0018      	movs	r0, r3
   1eac6:	4b19      	ldr	r3, [pc, #100]	; (1eb2c <vTaskPlaceOnEventListRestricted+0xd4>)
   1eac8:	4798      	blx	r3
   1eaca:	4b19      	ldr	r3, [pc, #100]	; (1eb30 <vTaskPlaceOnEventListRestricted+0xd8>)
   1eacc:	4798      	blx	r3
   1eace:	0003      	movs	r3, r0
   1ead0:	0018      	movs	r0, r3
   1ead2:	4b11      	ldr	r3, [pc, #68]	; (1eb18 <vTaskPlaceOnEventListRestricted+0xc0>)
   1ead4:	4798      	blx	r3
   1ead6:	0003      	movs	r3, r0
   1ead8:	001a      	movs	r2, r3
   1eada:	4b10      	ldr	r3, [pc, #64]	; (1eb1c <vTaskPlaceOnEventListRestricted+0xc4>)
   1eadc:	881b      	ldrh	r3, [r3, #0]
   1eade:	4013      	ands	r3, r2
   1eae0:	b29b      	uxth	r3, r3
   1eae2:	2b00      	cmp	r3, #0
   1eae4:	d00a      	beq.n	1eafc <vTaskPlaceOnEventListRestricted+0xa4>
   1eae6:	4b12      	ldr	r3, [pc, #72]	; (1eb30 <vTaskPlaceOnEventListRestricted+0xd8>)
   1eae8:	4798      	blx	r3
   1eaea:	0003      	movs	r3, r0
   1eaec:	0018      	movs	r0, r3
   1eaee:	4b0e      	ldr	r3, [pc, #56]	; (1eb28 <vTaskPlaceOnEventListRestricted+0xd0>)
   1eaf0:	4798      	blx	r3
   1eaf2:	0003      	movs	r3, r0
   1eaf4:	b2db      	uxtb	r3, r3
   1eaf6:	0018      	movs	r0, r3
   1eaf8:	4b0c      	ldr	r3, [pc, #48]	; (1eb2c <vTaskPlaceOnEventListRestricted+0xd4>)
   1eafa:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1eafc:	687a      	ldr	r2, [r7, #4]
   1eafe:	68bb      	ldr	r3, [r7, #8]
   1eb00:	0011      	movs	r1, r2
   1eb02:	0018      	movs	r0, r3
   1eb04:	4b0b      	ldr	r3, [pc, #44]	; (1eb34 <vTaskPlaceOnEventListRestricted+0xdc>)
   1eb06:	4798      	blx	r3
	}
   1eb08:	46c0      	nop			; (mov r8, r8)
   1eb0a:	46bd      	mov	sp, r7
   1eb0c:	b004      	add	sp, #16
   1eb0e:	bd80      	pop	{r7, pc}
   1eb10:	20003d2c 	.word	0x20003d2c
   1eb14:	0001c067 	.word	0x0001c067
   1eb18:	0001a29d 	.word	0x0001a29d
   1eb1c:	20000104 	.word	0x20000104
   1eb20:	20003e08 	.word	0x20003e08
   1eb24:	0001af9d 	.word	0x0001af9d
   1eb28:	0001a27d 	.word	0x0001a27d
   1eb2c:	0001b42d 	.word	0x0001b42d
   1eb30:	0001a539 	.word	0x0001a539
   1eb34:	0001f4b9 	.word	0x0001f4b9

0001eb38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1eb38:	b580      	push	{r7, lr}
   1eb3a:	b084      	sub	sp, #16
   1eb3c:	af00      	add	r7, sp, #0
   1eb3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1eb40:	687b      	ldr	r3, [r7, #4]
   1eb42:	68db      	ldr	r3, [r3, #12]
   1eb44:	68db      	ldr	r3, [r3, #12]
   1eb46:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1eb48:	68bb      	ldr	r3, [r7, #8]
   1eb4a:	2b00      	cmp	r3, #0
   1eb4c:	d101      	bne.n	1eb52 <xTaskRemoveFromEventList+0x1a>
   1eb4e:	b672      	cpsid	i
   1eb50:	e7fe      	b.n	1eb50 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1eb52:	68bb      	ldr	r3, [r7, #8]
   1eb54:	3318      	adds	r3, #24
   1eb56:	0018      	movs	r0, r3
   1eb58:	4b2a      	ldr	r3, [pc, #168]	; (1ec04 <xTaskRemoveFromEventList+0xcc>)
   1eb5a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1eb5c:	4b2a      	ldr	r3, [pc, #168]	; (1ec08 <xTaskRemoveFromEventList+0xd0>)
   1eb5e:	681b      	ldr	r3, [r3, #0]
   1eb60:	2b00      	cmp	r3, #0
   1eb62:	d132      	bne.n	1ebca <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1eb64:	68bb      	ldr	r3, [r7, #8]
   1eb66:	3304      	adds	r3, #4
   1eb68:	0018      	movs	r0, r3
   1eb6a:	4b26      	ldr	r3, [pc, #152]	; (1ec04 <xTaskRemoveFromEventList+0xcc>)
   1eb6c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1eb6e:	68bb      	ldr	r3, [r7, #8]
   1eb70:	0018      	movs	r0, r3
   1eb72:	4b26      	ldr	r3, [pc, #152]	; (1ec0c <xTaskRemoveFromEventList+0xd4>)
   1eb74:	4798      	blx	r3
   1eb76:	0003      	movs	r3, r0
   1eb78:	001a      	movs	r2, r3
   1eb7a:	4b25      	ldr	r3, [pc, #148]	; (1ec10 <xTaskRemoveFromEventList+0xd8>)
   1eb7c:	881b      	ldrh	r3, [r3, #0]
   1eb7e:	4013      	ands	r3, r2
   1eb80:	b29b      	uxth	r3, r3
   1eb82:	2b00      	cmp	r3, #0
   1eb84:	d008      	beq.n	1eb98 <xTaskRemoveFromEventList+0x60>
   1eb86:	68bb      	ldr	r3, [r7, #8]
   1eb88:	0018      	movs	r0, r3
   1eb8a:	4b22      	ldr	r3, [pc, #136]	; (1ec14 <xTaskRemoveFromEventList+0xdc>)
   1eb8c:	4798      	blx	r3
   1eb8e:	0003      	movs	r3, r0
   1eb90:	b2db      	uxtb	r3, r3
   1eb92:	0018      	movs	r0, r3
   1eb94:	4b20      	ldr	r3, [pc, #128]	; (1ec18 <xTaskRemoveFromEventList+0xe0>)
   1eb96:	4798      	blx	r3
   1eb98:	68bb      	ldr	r3, [r7, #8]
   1eb9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1eb9c:	4b1f      	ldr	r3, [pc, #124]	; (1ec1c <xTaskRemoveFromEventList+0xe4>)
   1eb9e:	681b      	ldr	r3, [r3, #0]
   1eba0:	429a      	cmp	r2, r3
   1eba2:	d903      	bls.n	1ebac <xTaskRemoveFromEventList+0x74>
   1eba4:	68bb      	ldr	r3, [r7, #8]
   1eba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1eba8:	4b1c      	ldr	r3, [pc, #112]	; (1ec1c <xTaskRemoveFromEventList+0xe4>)
   1ebaa:	601a      	str	r2, [r3, #0]
   1ebac:	68bb      	ldr	r3, [r7, #8]
   1ebae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ebb0:	0013      	movs	r3, r2
   1ebb2:	009b      	lsls	r3, r3, #2
   1ebb4:	189b      	adds	r3, r3, r2
   1ebb6:	009b      	lsls	r3, r3, #2
   1ebb8:	4a19      	ldr	r2, [pc, #100]	; (1ec20 <xTaskRemoveFromEventList+0xe8>)
   1ebba:	189a      	adds	r2, r3, r2
   1ebbc:	68bb      	ldr	r3, [r7, #8]
   1ebbe:	3304      	adds	r3, #4
   1ebc0:	0019      	movs	r1, r3
   1ebc2:	0010      	movs	r0, r2
   1ebc4:	4b17      	ldr	r3, [pc, #92]	; (1ec24 <xTaskRemoveFromEventList+0xec>)
   1ebc6:	4798      	blx	r3
   1ebc8:	e007      	b.n	1ebda <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1ebca:	68bb      	ldr	r3, [r7, #8]
   1ebcc:	3318      	adds	r3, #24
   1ebce:	001a      	movs	r2, r3
   1ebd0:	4b15      	ldr	r3, [pc, #84]	; (1ec28 <xTaskRemoveFromEventList+0xf0>)
   1ebd2:	0011      	movs	r1, r2
   1ebd4:	0018      	movs	r0, r3
   1ebd6:	4b13      	ldr	r3, [pc, #76]	; (1ec24 <xTaskRemoveFromEventList+0xec>)
   1ebd8:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1ebda:	68bb      	ldr	r3, [r7, #8]
   1ebdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ebde:	4b13      	ldr	r3, [pc, #76]	; (1ec2c <xTaskRemoveFromEventList+0xf4>)
   1ebe0:	681b      	ldr	r3, [r3, #0]
   1ebe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ebe4:	429a      	cmp	r2, r3
   1ebe6:	d905      	bls.n	1ebf4 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1ebe8:	2301      	movs	r3, #1
   1ebea:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1ebec:	4b10      	ldr	r3, [pc, #64]	; (1ec30 <xTaskRemoveFromEventList+0xf8>)
   1ebee:	2201      	movs	r2, #1
   1ebf0:	601a      	str	r2, [r3, #0]
   1ebf2:	e001      	b.n	1ebf8 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1ebf4:	2300      	movs	r3, #0
   1ebf6:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1ebf8:	68fb      	ldr	r3, [r7, #12]
}
   1ebfa:	0018      	movs	r0, r3
   1ebfc:	46bd      	mov	sp, r7
   1ebfe:	b004      	add	sp, #16
   1ec00:	bd80      	pop	{r7, pc}
   1ec02:	46c0      	nop			; (mov r8, r8)
   1ec04:	0001c117 	.word	0x0001c117
   1ec08:	20003e2c 	.word	0x20003e2c
   1ec0c:	0001a29d 	.word	0x0001a29d
   1ec10:	20000104 	.word	0x20000104
   1ec14:	0001a27d 	.word	0x0001a27d
   1ec18:	0001aa4d 	.word	0x0001aa4d
   1ec1c:	20003e0c 	.word	0x20003e0c
   1ec20:	20003d30 	.word	0x20003d30
   1ec24:	0001c067 	.word	0x0001c067
   1ec28:	20003dc4 	.word	0x20003dc4
   1ec2c:	20003d2c 	.word	0x20003d2c
   1ec30:	20003e18 	.word	0x20003e18

0001ec34 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1ec34:	b580      	push	{r7, lr}
   1ec36:	b082      	sub	sp, #8
   1ec38:	af00      	add	r7, sp, #0
   1ec3a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1ec3c:	687b      	ldr	r3, [r7, #4]
   1ec3e:	2b00      	cmp	r3, #0
   1ec40:	d101      	bne.n	1ec46 <vTaskSetTimeOutState+0x12>
   1ec42:	b672      	cpsid	i
   1ec44:	e7fe      	b.n	1ec44 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1ec46:	4b08      	ldr	r3, [pc, #32]	; (1ec68 <vTaskSetTimeOutState+0x34>)
   1ec48:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1ec4a:	4b08      	ldr	r3, [pc, #32]	; (1ec6c <vTaskSetTimeOutState+0x38>)
   1ec4c:	681a      	ldr	r2, [r3, #0]
   1ec4e:	687b      	ldr	r3, [r7, #4]
   1ec50:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1ec52:	4b07      	ldr	r3, [pc, #28]	; (1ec70 <vTaskSetTimeOutState+0x3c>)
   1ec54:	681a      	ldr	r2, [r3, #0]
   1ec56:	687b      	ldr	r3, [r7, #4]
   1ec58:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1ec5a:	4b06      	ldr	r3, [pc, #24]	; (1ec74 <vTaskSetTimeOutState+0x40>)
   1ec5c:	4798      	blx	r3
}
   1ec5e:	46c0      	nop			; (mov r8, r8)
   1ec60:	46bd      	mov	sp, r7
   1ec62:	b002      	add	sp, #8
   1ec64:	bd80      	pop	{r7, pc}
   1ec66:	46c0      	nop			; (mov r8, r8)
   1ec68:	0001c2a9 	.word	0x0001c2a9
   1ec6c:	20003e1c 	.word	0x20003e1c
   1ec70:	20003e08 	.word	0x20003e08
   1ec74:	0001c2cd 	.word	0x0001c2cd

0001ec78 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1ec78:	b580      	push	{r7, lr}
   1ec7a:	b082      	sub	sp, #8
   1ec7c:	af00      	add	r7, sp, #0
   1ec7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1ec80:	4b05      	ldr	r3, [pc, #20]	; (1ec98 <vTaskInternalSetTimeOutState+0x20>)
   1ec82:	681a      	ldr	r2, [r3, #0]
   1ec84:	687b      	ldr	r3, [r7, #4]
   1ec86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1ec88:	4b04      	ldr	r3, [pc, #16]	; (1ec9c <vTaskInternalSetTimeOutState+0x24>)
   1ec8a:	681a      	ldr	r2, [r3, #0]
   1ec8c:	687b      	ldr	r3, [r7, #4]
   1ec8e:	605a      	str	r2, [r3, #4]
}
   1ec90:	46c0      	nop			; (mov r8, r8)
   1ec92:	46bd      	mov	sp, r7
   1ec94:	b002      	add	sp, #8
   1ec96:	bd80      	pop	{r7, pc}
   1ec98:	20003e1c 	.word	0x20003e1c
   1ec9c:	20003e08 	.word	0x20003e08

0001eca0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1eca0:	b580      	push	{r7, lr}
   1eca2:	b086      	sub	sp, #24
   1eca4:	af00      	add	r7, sp, #0
   1eca6:	6078      	str	r0, [r7, #4]
   1eca8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1ecaa:	687b      	ldr	r3, [r7, #4]
   1ecac:	2b00      	cmp	r3, #0
   1ecae:	d101      	bne.n	1ecb4 <xTaskCheckForTimeOut+0x14>
   1ecb0:	b672      	cpsid	i
   1ecb2:	e7fe      	b.n	1ecb2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1ecb4:	683b      	ldr	r3, [r7, #0]
   1ecb6:	2b00      	cmp	r3, #0
   1ecb8:	d101      	bne.n	1ecbe <xTaskCheckForTimeOut+0x1e>
   1ecba:	b672      	cpsid	i
   1ecbc:	e7fe      	b.n	1ecbc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1ecbe:	4b1e      	ldr	r3, [pc, #120]	; (1ed38 <xTaskCheckForTimeOut+0x98>)
   1ecc0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1ecc2:	4b1e      	ldr	r3, [pc, #120]	; (1ed3c <xTaskCheckForTimeOut+0x9c>)
   1ecc4:	681b      	ldr	r3, [r3, #0]
   1ecc6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1ecc8:	687b      	ldr	r3, [r7, #4]
   1ecca:	685b      	ldr	r3, [r3, #4]
   1eccc:	693a      	ldr	r2, [r7, #16]
   1ecce:	1ad3      	subs	r3, r2, r3
   1ecd0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1ecd2:	683b      	ldr	r3, [r7, #0]
   1ecd4:	681b      	ldr	r3, [r3, #0]
   1ecd6:	3301      	adds	r3, #1
   1ecd8:	d102      	bne.n	1ece0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1ecda:	2300      	movs	r3, #0
   1ecdc:	617b      	str	r3, [r7, #20]
   1ecde:	e024      	b.n	1ed2a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1ece0:	687b      	ldr	r3, [r7, #4]
   1ece2:	681a      	ldr	r2, [r3, #0]
   1ece4:	4b16      	ldr	r3, [pc, #88]	; (1ed40 <xTaskCheckForTimeOut+0xa0>)
   1ece6:	681b      	ldr	r3, [r3, #0]
   1ece8:	429a      	cmp	r2, r3
   1ecea:	d007      	beq.n	1ecfc <xTaskCheckForTimeOut+0x5c>
   1ecec:	687b      	ldr	r3, [r7, #4]
   1ecee:	685a      	ldr	r2, [r3, #4]
   1ecf0:	693b      	ldr	r3, [r7, #16]
   1ecf2:	429a      	cmp	r2, r3
   1ecf4:	d802      	bhi.n	1ecfc <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1ecf6:	2301      	movs	r3, #1
   1ecf8:	617b      	str	r3, [r7, #20]
   1ecfa:	e016      	b.n	1ed2a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1ecfc:	683b      	ldr	r3, [r7, #0]
   1ecfe:	681a      	ldr	r2, [r3, #0]
   1ed00:	68fb      	ldr	r3, [r7, #12]
   1ed02:	429a      	cmp	r2, r3
   1ed04:	d90c      	bls.n	1ed20 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1ed06:	683b      	ldr	r3, [r7, #0]
   1ed08:	681a      	ldr	r2, [r3, #0]
   1ed0a:	68fb      	ldr	r3, [r7, #12]
   1ed0c:	1ad2      	subs	r2, r2, r3
   1ed0e:	683b      	ldr	r3, [r7, #0]
   1ed10:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1ed12:	687b      	ldr	r3, [r7, #4]
   1ed14:	0018      	movs	r0, r3
   1ed16:	4b0b      	ldr	r3, [pc, #44]	; (1ed44 <xTaskCheckForTimeOut+0xa4>)
   1ed18:	4798      	blx	r3
			xReturn = pdFALSE;
   1ed1a:	2300      	movs	r3, #0
   1ed1c:	617b      	str	r3, [r7, #20]
   1ed1e:	e004      	b.n	1ed2a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1ed20:	683b      	ldr	r3, [r7, #0]
   1ed22:	2200      	movs	r2, #0
   1ed24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1ed26:	2301      	movs	r3, #1
   1ed28:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1ed2a:	4b07      	ldr	r3, [pc, #28]	; (1ed48 <xTaskCheckForTimeOut+0xa8>)
   1ed2c:	4798      	blx	r3

	return xReturn;
   1ed2e:	697b      	ldr	r3, [r7, #20]
}
   1ed30:	0018      	movs	r0, r3
   1ed32:	46bd      	mov	sp, r7
   1ed34:	b006      	add	sp, #24
   1ed36:	bd80      	pop	{r7, pc}
   1ed38:	0001c2a9 	.word	0x0001c2a9
   1ed3c:	20003e08 	.word	0x20003e08
   1ed40:	20003e1c 	.word	0x20003e1c
   1ed44:	0001ec79 	.word	0x0001ec79
   1ed48:	0001c2cd 	.word	0x0001c2cd

0001ed4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1ed4c:	b580      	push	{r7, lr}
   1ed4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1ed50:	4b02      	ldr	r3, [pc, #8]	; (1ed5c <vTaskMissedYield+0x10>)
   1ed52:	2201      	movs	r2, #1
   1ed54:	601a      	str	r2, [r3, #0]
}
   1ed56:	46c0      	nop			; (mov r8, r8)
   1ed58:	46bd      	mov	sp, r7
   1ed5a:	bd80      	pop	{r7, pc}
   1ed5c:	20003e18 	.word	0x20003e18

0001ed60 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1ed60:	b580      	push	{r7, lr}
   1ed62:	b084      	sub	sp, #16
   1ed64:	af00      	add	r7, sp, #0
   1ed66:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1ed68:	687b      	ldr	r3, [r7, #4]
   1ed6a:	2b00      	cmp	r3, #0
   1ed6c:	d005      	beq.n	1ed7a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1ed6e:	687b      	ldr	r3, [r7, #4]
   1ed70:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1ed72:	68bb      	ldr	r3, [r7, #8]
   1ed74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ed76:	60fb      	str	r3, [r7, #12]
   1ed78:	e001      	b.n	1ed7e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1ed7a:	2300      	movs	r3, #0
   1ed7c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1ed7e:	68fb      	ldr	r3, [r7, #12]
	}
   1ed80:	0018      	movs	r0, r3
   1ed82:	46bd      	mov	sp, r7
   1ed84:	b004      	add	sp, #16
   1ed86:	bd80      	pop	{r7, pc}

0001ed88 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1ed88:	b580      	push	{r7, lr}
   1ed8a:	b084      	sub	sp, #16
   1ed8c:	af00      	add	r7, sp, #0
   1ed8e:	6078      	str	r0, [r7, #4]
   1ed90:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1ed92:	687b      	ldr	r3, [r7, #4]
   1ed94:	2b00      	cmp	r3, #0
   1ed96:	d004      	beq.n	1eda2 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1ed98:	687b      	ldr	r3, [r7, #4]
   1ed9a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1ed9c:	68fb      	ldr	r3, [r7, #12]
   1ed9e:	683a      	ldr	r2, [r7, #0]
   1eda0:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1eda2:	46c0      	nop			; (mov r8, r8)
   1eda4:	46bd      	mov	sp, r7
   1eda6:	b004      	add	sp, #16
   1eda8:	bd80      	pop	{r7, pc}
	...

0001edac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1edac:	b580      	push	{r7, lr}
   1edae:	b082      	sub	sp, #8
   1edb0:	af00      	add	r7, sp, #0
   1edb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1edb4:	4b04      	ldr	r3, [pc, #16]	; (1edc8 <prvIdleTask+0x1c>)
   1edb6:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1edb8:	4b04      	ldr	r3, [pc, #16]	; (1edcc <prvIdleTask+0x20>)
   1edba:	681b      	ldr	r3, [r3, #0]
   1edbc:	2b01      	cmp	r3, #1
   1edbe:	d9f9      	bls.n	1edb4 <prvIdleTask+0x8>
			{
				taskYIELD();
   1edc0:	4b03      	ldr	r3, [pc, #12]	; (1edd0 <prvIdleTask+0x24>)
   1edc2:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1edc4:	e7f6      	b.n	1edb4 <prvIdleTask+0x8>
   1edc6:	46c0      	nop			; (mov r8, r8)
   1edc8:	0001ee61 	.word	0x0001ee61
   1edcc:	20003d30 	.word	0x20003d30
   1edd0:	0001c291 	.word	0x0001c291

0001edd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1edd4:	b580      	push	{r7, lr}
   1edd6:	b082      	sub	sp, #8
   1edd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1edda:	2300      	movs	r3, #0
   1eddc:	607b      	str	r3, [r7, #4]
   1edde:	e00c      	b.n	1edfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1ede0:	687a      	ldr	r2, [r7, #4]
   1ede2:	0013      	movs	r3, r2
   1ede4:	009b      	lsls	r3, r3, #2
   1ede6:	189b      	adds	r3, r3, r2
   1ede8:	009b      	lsls	r3, r3, #2
   1edea:	4a14      	ldr	r2, [pc, #80]	; (1ee3c <prvInitialiseTaskLists+0x68>)
   1edec:	189b      	adds	r3, r3, r2
   1edee:	0018      	movs	r0, r3
   1edf0:	4b13      	ldr	r3, [pc, #76]	; (1ee40 <prvInitialiseTaskLists+0x6c>)
   1edf2:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1edf4:	687b      	ldr	r3, [r7, #4]
   1edf6:	3301      	adds	r3, #1
   1edf8:	607b      	str	r3, [r7, #4]
   1edfa:	687b      	ldr	r3, [r7, #4]
   1edfc:	2b04      	cmp	r3, #4
   1edfe:	d9ef      	bls.n	1ede0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1ee00:	4b10      	ldr	r3, [pc, #64]	; (1ee44 <prvInitialiseTaskLists+0x70>)
   1ee02:	0018      	movs	r0, r3
   1ee04:	4b0e      	ldr	r3, [pc, #56]	; (1ee40 <prvInitialiseTaskLists+0x6c>)
   1ee06:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1ee08:	4b0f      	ldr	r3, [pc, #60]	; (1ee48 <prvInitialiseTaskLists+0x74>)
   1ee0a:	0018      	movs	r0, r3
   1ee0c:	4b0c      	ldr	r3, [pc, #48]	; (1ee40 <prvInitialiseTaskLists+0x6c>)
   1ee0e:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1ee10:	4b0e      	ldr	r3, [pc, #56]	; (1ee4c <prvInitialiseTaskLists+0x78>)
   1ee12:	0018      	movs	r0, r3
   1ee14:	4b0a      	ldr	r3, [pc, #40]	; (1ee40 <prvInitialiseTaskLists+0x6c>)
   1ee16:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1ee18:	4b0d      	ldr	r3, [pc, #52]	; (1ee50 <prvInitialiseTaskLists+0x7c>)
   1ee1a:	0018      	movs	r0, r3
   1ee1c:	4b08      	ldr	r3, [pc, #32]	; (1ee40 <prvInitialiseTaskLists+0x6c>)
   1ee1e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1ee20:	4b0c      	ldr	r3, [pc, #48]	; (1ee54 <prvInitialiseTaskLists+0x80>)
   1ee22:	0018      	movs	r0, r3
   1ee24:	4b06      	ldr	r3, [pc, #24]	; (1ee40 <prvInitialiseTaskLists+0x6c>)
   1ee26:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1ee28:	4b0b      	ldr	r3, [pc, #44]	; (1ee58 <prvInitialiseTaskLists+0x84>)
   1ee2a:	4a06      	ldr	r2, [pc, #24]	; (1ee44 <prvInitialiseTaskLists+0x70>)
   1ee2c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1ee2e:	4b0b      	ldr	r3, [pc, #44]	; (1ee5c <prvInitialiseTaskLists+0x88>)
   1ee30:	4a05      	ldr	r2, [pc, #20]	; (1ee48 <prvInitialiseTaskLists+0x74>)
   1ee32:	601a      	str	r2, [r3, #0]
}
   1ee34:	46c0      	nop			; (mov r8, r8)
   1ee36:	46bd      	mov	sp, r7
   1ee38:	b002      	add	sp, #8
   1ee3a:	bd80      	pop	{r7, pc}
   1ee3c:	20003d30 	.word	0x20003d30
   1ee40:	0001c015 	.word	0x0001c015
   1ee44:	20003d94 	.word	0x20003d94
   1ee48:	20003da8 	.word	0x20003da8
   1ee4c:	20003dc4 	.word	0x20003dc4
   1ee50:	20003dd8 	.word	0x20003dd8
   1ee54:	20003df0 	.word	0x20003df0
   1ee58:	20003dbc 	.word	0x20003dbc
   1ee5c:	20003dc0 	.word	0x20003dc0

0001ee60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1ee60:	b580      	push	{r7, lr}
   1ee62:	b082      	sub	sp, #8
   1ee64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1ee66:	e01a      	b.n	1ee9e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1ee68:	4b11      	ldr	r3, [pc, #68]	; (1eeb0 <prvCheckTasksWaitingTermination+0x50>)
   1ee6a:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1ee6c:	4b11      	ldr	r3, [pc, #68]	; (1eeb4 <prvCheckTasksWaitingTermination+0x54>)
   1ee6e:	68db      	ldr	r3, [r3, #12]
   1ee70:	68db      	ldr	r3, [r3, #12]
   1ee72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1ee74:	687b      	ldr	r3, [r7, #4]
   1ee76:	3304      	adds	r3, #4
   1ee78:	0018      	movs	r0, r3
   1ee7a:	4b0f      	ldr	r3, [pc, #60]	; (1eeb8 <prvCheckTasksWaitingTermination+0x58>)
   1ee7c:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1ee7e:	4b0f      	ldr	r3, [pc, #60]	; (1eebc <prvCheckTasksWaitingTermination+0x5c>)
   1ee80:	681b      	ldr	r3, [r3, #0]
   1ee82:	1e5a      	subs	r2, r3, #1
   1ee84:	4b0d      	ldr	r3, [pc, #52]	; (1eebc <prvCheckTasksWaitingTermination+0x5c>)
   1ee86:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1ee88:	4b0d      	ldr	r3, [pc, #52]	; (1eec0 <prvCheckTasksWaitingTermination+0x60>)
   1ee8a:	681b      	ldr	r3, [r3, #0]
   1ee8c:	1e5a      	subs	r2, r3, #1
   1ee8e:	4b0c      	ldr	r3, [pc, #48]	; (1eec0 <prvCheckTasksWaitingTermination+0x60>)
   1ee90:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1ee92:	4b0c      	ldr	r3, [pc, #48]	; (1eec4 <prvCheckTasksWaitingTermination+0x64>)
   1ee94:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1ee96:	687b      	ldr	r3, [r7, #4]
   1ee98:	0018      	movs	r0, r3
   1ee9a:	4b0b      	ldr	r3, [pc, #44]	; (1eec8 <prvCheckTasksWaitingTermination+0x68>)
   1ee9c:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1ee9e:	4b08      	ldr	r3, [pc, #32]	; (1eec0 <prvCheckTasksWaitingTermination+0x60>)
   1eea0:	681b      	ldr	r3, [r3, #0]
   1eea2:	2b00      	cmp	r3, #0
   1eea4:	d1e0      	bne.n	1ee68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1eea6:	46c0      	nop			; (mov r8, r8)
   1eea8:	46bd      	mov	sp, r7
   1eeaa:	b002      	add	sp, #8
   1eeac:	bd80      	pop	{r7, pc}
   1eeae:	46c0      	nop			; (mov r8, r8)
   1eeb0:	0001c2a9 	.word	0x0001c2a9
   1eeb4:	20003dd8 	.word	0x20003dd8
   1eeb8:	0001c117 	.word	0x0001c117
   1eebc:	20003e04 	.word	0x20003e04
   1eec0:	20003dec 	.word	0x20003dec
   1eec4:	0001c2cd 	.word	0x0001c2cd
   1eec8:	0001ef3d 	.word	0x0001ef3d

0001eecc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1eecc:	b580      	push	{r7, lr}
   1eece:	b084      	sub	sp, #16
   1eed0:	af00      	add	r7, sp, #0
   1eed2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1eed4:	2300      	movs	r3, #0
   1eed6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1eed8:	e005      	b.n	1eee6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1eeda:	687b      	ldr	r3, [r7, #4]
   1eedc:	3301      	adds	r3, #1
   1eede:	607b      	str	r3, [r7, #4]
			ulCount++;
   1eee0:	68fb      	ldr	r3, [r7, #12]
   1eee2:	3301      	adds	r3, #1
   1eee4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1eee6:	687b      	ldr	r3, [r7, #4]
   1eee8:	781b      	ldrb	r3, [r3, #0]
   1eeea:	2ba5      	cmp	r3, #165	; 0xa5
   1eeec:	d0f5      	beq.n	1eeda <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1eeee:	68fb      	ldr	r3, [r7, #12]
   1eef0:	089b      	lsrs	r3, r3, #2
   1eef2:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1eef4:	68fb      	ldr	r3, [r7, #12]
   1eef6:	b29b      	uxth	r3, r3
	}
   1eef8:	0018      	movs	r0, r3
   1eefa:	46bd      	mov	sp, r7
   1eefc:	b004      	add	sp, #16
   1eefe:	bd80      	pop	{r7, pc}

0001ef00 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1ef00:	b580      	push	{r7, lr}
   1ef02:	b086      	sub	sp, #24
   1ef04:	af00      	add	r7, sp, #0
   1ef06:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1ef08:	687b      	ldr	r3, [r7, #4]
   1ef0a:	2b00      	cmp	r3, #0
   1ef0c:	d102      	bne.n	1ef14 <uxTaskGetStackHighWaterMark+0x14>
   1ef0e:	4b09      	ldr	r3, [pc, #36]	; (1ef34 <uxTaskGetStackHighWaterMark+0x34>)
   1ef10:	681b      	ldr	r3, [r3, #0]
   1ef12:	e000      	b.n	1ef16 <uxTaskGetStackHighWaterMark+0x16>
   1ef14:	687b      	ldr	r3, [r7, #4]
   1ef16:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1ef18:	697b      	ldr	r3, [r7, #20]
   1ef1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ef1c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1ef1e:	693b      	ldr	r3, [r7, #16]
   1ef20:	0018      	movs	r0, r3
   1ef22:	4b05      	ldr	r3, [pc, #20]	; (1ef38 <uxTaskGetStackHighWaterMark+0x38>)
   1ef24:	4798      	blx	r3
   1ef26:	0003      	movs	r3, r0
   1ef28:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1ef2a:	68fb      	ldr	r3, [r7, #12]
	}
   1ef2c:	0018      	movs	r0, r3
   1ef2e:	46bd      	mov	sp, r7
   1ef30:	b006      	add	sp, #24
   1ef32:	bd80      	pop	{r7, pc}
   1ef34:	20003d2c 	.word	0x20003d2c
   1ef38:	0001eecd 	.word	0x0001eecd

0001ef3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1ef3c:	b580      	push	{r7, lr}
   1ef3e:	b082      	sub	sp, #8
   1ef40:	af00      	add	r7, sp, #0
   1ef42:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1ef44:	687b      	ldr	r3, [r7, #4]
   1ef46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ef48:	0018      	movs	r0, r3
   1ef4a:	4b05      	ldr	r3, [pc, #20]	; (1ef60 <prvDeleteTCB+0x24>)
   1ef4c:	4798      	blx	r3
			vPortFree( pxTCB );
   1ef4e:	687b      	ldr	r3, [r7, #4]
   1ef50:	0018      	movs	r0, r3
   1ef52:	4b03      	ldr	r3, [pc, #12]	; (1ef60 <prvDeleteTCB+0x24>)
   1ef54:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1ef56:	46c0      	nop			; (mov r8, r8)
   1ef58:	46bd      	mov	sp, r7
   1ef5a:	b002      	add	sp, #8
   1ef5c:	bd80      	pop	{r7, pc}
   1ef5e:	46c0      	nop			; (mov r8, r8)
   1ef60:	0001c4a5 	.word	0x0001c4a5

0001ef64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1ef64:	b580      	push	{r7, lr}
   1ef66:	b082      	sub	sp, #8
   1ef68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1ef6a:	4b0e      	ldr	r3, [pc, #56]	; (1efa4 <prvResetNextTaskUnblockTime+0x40>)
   1ef6c:	681b      	ldr	r3, [r3, #0]
   1ef6e:	681b      	ldr	r3, [r3, #0]
   1ef70:	2b00      	cmp	r3, #0
   1ef72:	d101      	bne.n	1ef78 <prvResetNextTaskUnblockTime+0x14>
   1ef74:	2301      	movs	r3, #1
   1ef76:	e000      	b.n	1ef7a <prvResetNextTaskUnblockTime+0x16>
   1ef78:	2300      	movs	r3, #0
   1ef7a:	2b00      	cmp	r3, #0
   1ef7c:	d004      	beq.n	1ef88 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1ef7e:	4b0a      	ldr	r3, [pc, #40]	; (1efa8 <prvResetNextTaskUnblockTime+0x44>)
   1ef80:	2201      	movs	r2, #1
   1ef82:	4252      	negs	r2, r2
   1ef84:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1ef86:	e008      	b.n	1ef9a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1ef88:	4b06      	ldr	r3, [pc, #24]	; (1efa4 <prvResetNextTaskUnblockTime+0x40>)
   1ef8a:	681b      	ldr	r3, [r3, #0]
   1ef8c:	68db      	ldr	r3, [r3, #12]
   1ef8e:	68db      	ldr	r3, [r3, #12]
   1ef90:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1ef92:	687b      	ldr	r3, [r7, #4]
   1ef94:	685a      	ldr	r2, [r3, #4]
   1ef96:	4b04      	ldr	r3, [pc, #16]	; (1efa8 <prvResetNextTaskUnblockTime+0x44>)
   1ef98:	601a      	str	r2, [r3, #0]
}
   1ef9a:	46c0      	nop			; (mov r8, r8)
   1ef9c:	46bd      	mov	sp, r7
   1ef9e:	b002      	add	sp, #8
   1efa0:	bd80      	pop	{r7, pc}
   1efa2:	46c0      	nop			; (mov r8, r8)
   1efa4:	20003dbc 	.word	0x20003dbc
   1efa8:	20003e24 	.word	0x20003e24

0001efac <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1efac:	b580      	push	{r7, lr}
   1efae:	b082      	sub	sp, #8
   1efb0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1efb2:	4b04      	ldr	r3, [pc, #16]	; (1efc4 <xTaskGetCurrentTaskHandle+0x18>)
   1efb4:	681b      	ldr	r3, [r3, #0]
   1efb6:	607b      	str	r3, [r7, #4]

		return xReturn;
   1efb8:	687b      	ldr	r3, [r7, #4]
	}
   1efba:	0018      	movs	r0, r3
   1efbc:	46bd      	mov	sp, r7
   1efbe:	b002      	add	sp, #8
   1efc0:	bd80      	pop	{r7, pc}
   1efc2:	46c0      	nop			; (mov r8, r8)
   1efc4:	20003d2c 	.word	0x20003d2c

0001efc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1efc8:	b580      	push	{r7, lr}
   1efca:	b082      	sub	sp, #8
   1efcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1efce:	4b0a      	ldr	r3, [pc, #40]	; (1eff8 <xTaskGetSchedulerState+0x30>)
   1efd0:	681b      	ldr	r3, [r3, #0]
   1efd2:	2b00      	cmp	r3, #0
   1efd4:	d102      	bne.n	1efdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1efd6:	2301      	movs	r3, #1
   1efd8:	607b      	str	r3, [r7, #4]
   1efda:	e008      	b.n	1efee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1efdc:	4b07      	ldr	r3, [pc, #28]	; (1effc <xTaskGetSchedulerState+0x34>)
   1efde:	681b      	ldr	r3, [r3, #0]
   1efe0:	2b00      	cmp	r3, #0
   1efe2:	d102      	bne.n	1efea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1efe4:	2302      	movs	r3, #2
   1efe6:	607b      	str	r3, [r7, #4]
   1efe8:	e001      	b.n	1efee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1efea:	2300      	movs	r3, #0
   1efec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1efee:	687b      	ldr	r3, [r7, #4]
	}
   1eff0:	0018      	movs	r0, r3
   1eff2:	46bd      	mov	sp, r7
   1eff4:	b002      	add	sp, #8
   1eff6:	bd80      	pop	{r7, pc}
   1eff8:	20003e10 	.word	0x20003e10
   1effc:	20003e2c 	.word	0x20003e2c

0001f000 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1f000:	b590      	push	{r4, r7, lr}
   1f002:	b085      	sub	sp, #20
   1f004:	af00      	add	r7, sp, #0
   1f006:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1f008:	687b      	ldr	r3, [r7, #4]
   1f00a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1f00c:	2300      	movs	r3, #0
   1f00e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1f010:	687b      	ldr	r3, [r7, #4]
   1f012:	2b00      	cmp	r3, #0
   1f014:	d100      	bne.n	1f018 <xTaskPriorityInherit+0x18>
   1f016:	e09d      	b.n	1f154 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1f018:	68bb      	ldr	r3, [r7, #8]
   1f01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f01c:	4b50      	ldr	r3, [pc, #320]	; (1f160 <xTaskPriorityInherit+0x160>)
   1f01e:	681b      	ldr	r3, [r3, #0]
   1f020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f022:	429a      	cmp	r2, r3
   1f024:	d300      	bcc.n	1f028 <xTaskPriorityInherit+0x28>
   1f026:	e08c      	b.n	1f142 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1f028:	68bb      	ldr	r3, [r7, #8]
   1f02a:	699b      	ldr	r3, [r3, #24]
   1f02c:	2b00      	cmp	r3, #0
   1f02e:	db06      	blt.n	1f03e <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f030:	4b4b      	ldr	r3, [pc, #300]	; (1f160 <xTaskPriorityInherit+0x160>)
   1f032:	681b      	ldr	r3, [r3, #0]
   1f034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f036:	2205      	movs	r2, #5
   1f038:	1ad2      	subs	r2, r2, r3
   1f03a:	68bb      	ldr	r3, [r7, #8]
   1f03c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1f03e:	68bb      	ldr	r3, [r7, #8]
   1f040:	6959      	ldr	r1, [r3, #20]
   1f042:	68bb      	ldr	r3, [r7, #8]
   1f044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f046:	0013      	movs	r3, r2
   1f048:	009b      	lsls	r3, r3, #2
   1f04a:	189b      	adds	r3, r3, r2
   1f04c:	009b      	lsls	r3, r3, #2
   1f04e:	4a45      	ldr	r2, [pc, #276]	; (1f164 <xTaskPriorityInherit+0x164>)
   1f050:	189b      	adds	r3, r3, r2
   1f052:	4299      	cmp	r1, r3
   1f054:	d101      	bne.n	1f05a <xTaskPriorityInherit+0x5a>
   1f056:	2301      	movs	r3, #1
   1f058:	e000      	b.n	1f05c <xTaskPriorityInherit+0x5c>
   1f05a:	2300      	movs	r3, #0
   1f05c:	2b00      	cmp	r3, #0
   1f05e:	d037      	beq.n	1f0d0 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1f060:	68bb      	ldr	r3, [r7, #8]
   1f062:	3304      	adds	r3, #4
   1f064:	0018      	movs	r0, r3
   1f066:	4b40      	ldr	r3, [pc, #256]	; (1f168 <xTaskPriorityInherit+0x168>)
   1f068:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1f06a:	4b3d      	ldr	r3, [pc, #244]	; (1f160 <xTaskPriorityInherit+0x160>)
   1f06c:	681b      	ldr	r3, [r3, #0]
   1f06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f070:	68bb      	ldr	r3, [r7, #8]
   1f072:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1f074:	68bb      	ldr	r3, [r7, #8]
   1f076:	0018      	movs	r0, r3
   1f078:	4b3c      	ldr	r3, [pc, #240]	; (1f16c <xTaskPriorityInherit+0x16c>)
   1f07a:	4798      	blx	r3
   1f07c:	0003      	movs	r3, r0
   1f07e:	001a      	movs	r2, r3
   1f080:	4b3b      	ldr	r3, [pc, #236]	; (1f170 <xTaskPriorityInherit+0x170>)
   1f082:	881b      	ldrh	r3, [r3, #0]
   1f084:	4013      	ands	r3, r2
   1f086:	b29b      	uxth	r3, r3
   1f088:	2b00      	cmp	r3, #0
   1f08a:	d008      	beq.n	1f09e <xTaskPriorityInherit+0x9e>
   1f08c:	68bb      	ldr	r3, [r7, #8]
   1f08e:	0018      	movs	r0, r3
   1f090:	4b38      	ldr	r3, [pc, #224]	; (1f174 <xTaskPriorityInherit+0x174>)
   1f092:	4798      	blx	r3
   1f094:	0003      	movs	r3, r0
   1f096:	b2db      	uxtb	r3, r3
   1f098:	0018      	movs	r0, r3
   1f09a:	4b37      	ldr	r3, [pc, #220]	; (1f178 <xTaskPriorityInherit+0x178>)
   1f09c:	4798      	blx	r3
   1f09e:	68bb      	ldr	r3, [r7, #8]
   1f0a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f0a2:	4b36      	ldr	r3, [pc, #216]	; (1f17c <xTaskPriorityInherit+0x17c>)
   1f0a4:	681b      	ldr	r3, [r3, #0]
   1f0a6:	429a      	cmp	r2, r3
   1f0a8:	d903      	bls.n	1f0b2 <xTaskPriorityInherit+0xb2>
   1f0aa:	68bb      	ldr	r3, [r7, #8]
   1f0ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f0ae:	4b33      	ldr	r3, [pc, #204]	; (1f17c <xTaskPriorityInherit+0x17c>)
   1f0b0:	601a      	str	r2, [r3, #0]
   1f0b2:	68bb      	ldr	r3, [r7, #8]
   1f0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f0b6:	0013      	movs	r3, r2
   1f0b8:	009b      	lsls	r3, r3, #2
   1f0ba:	189b      	adds	r3, r3, r2
   1f0bc:	009b      	lsls	r3, r3, #2
   1f0be:	4a29      	ldr	r2, [pc, #164]	; (1f164 <xTaskPriorityInherit+0x164>)
   1f0c0:	189a      	adds	r2, r3, r2
   1f0c2:	68bb      	ldr	r3, [r7, #8]
   1f0c4:	3304      	adds	r3, #4
   1f0c6:	0019      	movs	r1, r3
   1f0c8:	0010      	movs	r0, r2
   1f0ca:	4b2d      	ldr	r3, [pc, #180]	; (1f180 <xTaskPriorityInherit+0x180>)
   1f0cc:	4798      	blx	r3
   1f0ce:	e004      	b.n	1f0da <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1f0d0:	4b23      	ldr	r3, [pc, #140]	; (1f160 <xTaskPriorityInherit+0x160>)
   1f0d2:	681b      	ldr	r3, [r3, #0]
   1f0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f0d6:	68bb      	ldr	r3, [r7, #8]
   1f0d8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1f0da:	68bb      	ldr	r3, [r7, #8]
   1f0dc:	0018      	movs	r0, r3
   1f0de:	4b23      	ldr	r3, [pc, #140]	; (1f16c <xTaskPriorityInherit+0x16c>)
   1f0e0:	4798      	blx	r3
   1f0e2:	0003      	movs	r3, r0
   1f0e4:	001a      	movs	r2, r3
   1f0e6:	4b22      	ldr	r3, [pc, #136]	; (1f170 <xTaskPriorityInherit+0x170>)
   1f0e8:	881b      	ldrh	r3, [r3, #0]
   1f0ea:	4013      	ands	r3, r2
   1f0ec:	b29b      	uxth	r3, r3
   1f0ee:	2b00      	cmp	r3, #0
   1f0f0:	d024      	beq.n	1f13c <xTaskPriorityInherit+0x13c>
   1f0f2:	68bb      	ldr	r3, [r7, #8]
   1f0f4:	0018      	movs	r0, r3
   1f0f6:	4b1f      	ldr	r3, [pc, #124]	; (1f174 <xTaskPriorityInherit+0x174>)
   1f0f8:	4798      	blx	r3
   1f0fa:	0003      	movs	r3, r0
   1f0fc:	b2db      	uxtb	r3, r3
   1f0fe:	001c      	movs	r4, r3
   1f100:	68bb      	ldr	r3, [r7, #8]
   1f102:	0018      	movs	r0, r3
   1f104:	4b1b      	ldr	r3, [pc, #108]	; (1f174 <xTaskPriorityInherit+0x174>)
   1f106:	4798      	blx	r3
   1f108:	0003      	movs	r3, r0
   1f10a:	b2db      	uxtb	r3, r3
   1f10c:	0019      	movs	r1, r3
   1f10e:	2003      	movs	r0, #3
   1f110:	4b1c      	ldr	r3, [pc, #112]	; (1f184 <xTaskPriorityInherit+0x184>)
   1f112:	4798      	blx	r3
   1f114:	0003      	movs	r3, r0
   1f116:	0022      	movs	r2, r4
   1f118:	2103      	movs	r1, #3
   1f11a:	208e      	movs	r0, #142	; 0x8e
   1f11c:	4c1a      	ldr	r4, [pc, #104]	; (1f188 <xTaskPriorityInherit+0x188>)
   1f11e:	47a0      	blx	r4
   1f120:	68bb      	ldr	r3, [r7, #8]
   1f122:	0018      	movs	r0, r3
   1f124:	4b13      	ldr	r3, [pc, #76]	; (1f174 <xTaskPriorityInherit+0x174>)
   1f126:	4798      	blx	r3
   1f128:	0003      	movs	r3, r0
   1f12a:	b2d9      	uxtb	r1, r3
   1f12c:	4b0c      	ldr	r3, [pc, #48]	; (1f160 <xTaskPriorityInherit+0x160>)
   1f12e:	681b      	ldr	r3, [r3, #0]
   1f130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f132:	b2db      	uxtb	r3, r3
   1f134:	001a      	movs	r2, r3
   1f136:	2003      	movs	r0, #3
   1f138:	4b14      	ldr	r3, [pc, #80]	; (1f18c <xTaskPriorityInherit+0x18c>)
   1f13a:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1f13c:	2301      	movs	r3, #1
   1f13e:	60fb      	str	r3, [r7, #12]
   1f140:	e008      	b.n	1f154 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1f142:	68bb      	ldr	r3, [r7, #8]
   1f144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1f146:	4b06      	ldr	r3, [pc, #24]	; (1f160 <xTaskPriorityInherit+0x160>)
   1f148:	681b      	ldr	r3, [r3, #0]
   1f14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f14c:	429a      	cmp	r2, r3
   1f14e:	d201      	bcs.n	1f154 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1f150:	2301      	movs	r3, #1
   1f152:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1f154:	68fb      	ldr	r3, [r7, #12]
	}
   1f156:	0018      	movs	r0, r3
   1f158:	46bd      	mov	sp, r7
   1f15a:	b005      	add	sp, #20
   1f15c:	bd90      	pop	{r4, r7, pc}
   1f15e:	46c0      	nop			; (mov r8, r8)
   1f160:	20003d2c 	.word	0x20003d2c
   1f164:	20003d30 	.word	0x20003d30
   1f168:	0001c117 	.word	0x0001c117
   1f16c:	0001a29d 	.word	0x0001a29d
   1f170:	20000104 	.word	0x20000104
   1f174:	0001a27d 	.word	0x0001a27d
   1f178:	0001aa4d 	.word	0x0001aa4d
   1f17c:	20003e0c 	.word	0x20003e0c
   1f180:	0001c067 	.word	0x0001c067
   1f184:	0001b255 	.word	0x0001b255
   1f188:	0001adc5 	.word	0x0001adc5
   1f18c:	0001b1b1 	.word	0x0001b1b1

0001f190 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1f190:	b590      	push	{r4, r7, lr}
   1f192:	b085      	sub	sp, #20
   1f194:	af00      	add	r7, sp, #0
   1f196:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1f198:	687b      	ldr	r3, [r7, #4]
   1f19a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1f19c:	2300      	movs	r3, #0
   1f19e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1f1a0:	687b      	ldr	r3, [r7, #4]
   1f1a2:	2b00      	cmp	r3, #0
   1f1a4:	d100      	bne.n	1f1a8 <xTaskPriorityDisinherit+0x18>
   1f1a6:	e089      	b.n	1f2bc <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1f1a8:	4b47      	ldr	r3, [pc, #284]	; (1f2c8 <xTaskPriorityDisinherit+0x138>)
   1f1aa:	681b      	ldr	r3, [r3, #0]
   1f1ac:	68ba      	ldr	r2, [r7, #8]
   1f1ae:	429a      	cmp	r2, r3
   1f1b0:	d001      	beq.n	1f1b6 <xTaskPriorityDisinherit+0x26>
   1f1b2:	b672      	cpsid	i
   1f1b4:	e7fe      	b.n	1f1b4 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1f1b6:	68bb      	ldr	r3, [r7, #8]
   1f1b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f1ba:	2b00      	cmp	r3, #0
   1f1bc:	d101      	bne.n	1f1c2 <xTaskPriorityDisinherit+0x32>
   1f1be:	b672      	cpsid	i
   1f1c0:	e7fe      	b.n	1f1c0 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1f1c2:	68bb      	ldr	r3, [r7, #8]
   1f1c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f1c6:	1e5a      	subs	r2, r3, #1
   1f1c8:	68bb      	ldr	r3, [r7, #8]
   1f1ca:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1f1cc:	68bb      	ldr	r3, [r7, #8]
   1f1ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f1d0:	68bb      	ldr	r3, [r7, #8]
   1f1d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f1d4:	429a      	cmp	r2, r3
   1f1d6:	d071      	beq.n	1f2bc <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1f1d8:	68bb      	ldr	r3, [r7, #8]
   1f1da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f1dc:	2b00      	cmp	r3, #0
   1f1de:	d16d      	bne.n	1f2bc <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1f1e0:	68bb      	ldr	r3, [r7, #8]
   1f1e2:	3304      	adds	r3, #4
   1f1e4:	0018      	movs	r0, r3
   1f1e6:	4b39      	ldr	r3, [pc, #228]	; (1f2cc <xTaskPriorityDisinherit+0x13c>)
   1f1e8:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1f1ea:	68bb      	ldr	r3, [r7, #8]
   1f1ec:	0018      	movs	r0, r3
   1f1ee:	4b38      	ldr	r3, [pc, #224]	; (1f2d0 <xTaskPriorityDisinherit+0x140>)
   1f1f0:	4798      	blx	r3
   1f1f2:	0003      	movs	r3, r0
   1f1f4:	001a      	movs	r2, r3
   1f1f6:	4b37      	ldr	r3, [pc, #220]	; (1f2d4 <xTaskPriorityDisinherit+0x144>)
   1f1f8:	881b      	ldrh	r3, [r3, #0]
   1f1fa:	4013      	ands	r3, r2
   1f1fc:	b29b      	uxth	r3, r3
   1f1fe:	2b00      	cmp	r3, #0
   1f200:	d023      	beq.n	1f24a <xTaskPriorityDisinherit+0xba>
   1f202:	68bb      	ldr	r3, [r7, #8]
   1f204:	0018      	movs	r0, r3
   1f206:	4b34      	ldr	r3, [pc, #208]	; (1f2d8 <xTaskPriorityDisinherit+0x148>)
   1f208:	4798      	blx	r3
   1f20a:	0003      	movs	r3, r0
   1f20c:	b2db      	uxtb	r3, r3
   1f20e:	001c      	movs	r4, r3
   1f210:	68bb      	ldr	r3, [r7, #8]
   1f212:	0018      	movs	r0, r3
   1f214:	4b30      	ldr	r3, [pc, #192]	; (1f2d8 <xTaskPriorityDisinherit+0x148>)
   1f216:	4798      	blx	r3
   1f218:	0003      	movs	r3, r0
   1f21a:	b2db      	uxtb	r3, r3
   1f21c:	0019      	movs	r1, r3
   1f21e:	2003      	movs	r0, #3
   1f220:	4b2e      	ldr	r3, [pc, #184]	; (1f2dc <xTaskPriorityDisinherit+0x14c>)
   1f222:	4798      	blx	r3
   1f224:	0003      	movs	r3, r0
   1f226:	0022      	movs	r2, r4
   1f228:	2103      	movs	r1, #3
   1f22a:	208f      	movs	r0, #143	; 0x8f
   1f22c:	4c2c      	ldr	r4, [pc, #176]	; (1f2e0 <xTaskPriorityDisinherit+0x150>)
   1f22e:	47a0      	blx	r4
   1f230:	68bb      	ldr	r3, [r7, #8]
   1f232:	0018      	movs	r0, r3
   1f234:	4b28      	ldr	r3, [pc, #160]	; (1f2d8 <xTaskPriorityDisinherit+0x148>)
   1f236:	4798      	blx	r3
   1f238:	0003      	movs	r3, r0
   1f23a:	b2d9      	uxtb	r1, r3
   1f23c:	68bb      	ldr	r3, [r7, #8]
   1f23e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f240:	b2db      	uxtb	r3, r3
   1f242:	001a      	movs	r2, r3
   1f244:	2003      	movs	r0, #3
   1f246:	4b27      	ldr	r3, [pc, #156]	; (1f2e4 <xTaskPriorityDisinherit+0x154>)
   1f248:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1f24a:	68bb      	ldr	r3, [r7, #8]
   1f24c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1f24e:	68bb      	ldr	r3, [r7, #8]
   1f250:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f252:	68bb      	ldr	r3, [r7, #8]
   1f254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f256:	2205      	movs	r2, #5
   1f258:	1ad2      	subs	r2, r2, r3
   1f25a:	68bb      	ldr	r3, [r7, #8]
   1f25c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1f25e:	68bb      	ldr	r3, [r7, #8]
   1f260:	0018      	movs	r0, r3
   1f262:	4b1b      	ldr	r3, [pc, #108]	; (1f2d0 <xTaskPriorityDisinherit+0x140>)
   1f264:	4798      	blx	r3
   1f266:	0003      	movs	r3, r0
   1f268:	001a      	movs	r2, r3
   1f26a:	4b1a      	ldr	r3, [pc, #104]	; (1f2d4 <xTaskPriorityDisinherit+0x144>)
   1f26c:	881b      	ldrh	r3, [r3, #0]
   1f26e:	4013      	ands	r3, r2
   1f270:	b29b      	uxth	r3, r3
   1f272:	2b00      	cmp	r3, #0
   1f274:	d008      	beq.n	1f288 <xTaskPriorityDisinherit+0xf8>
   1f276:	68bb      	ldr	r3, [r7, #8]
   1f278:	0018      	movs	r0, r3
   1f27a:	4b17      	ldr	r3, [pc, #92]	; (1f2d8 <xTaskPriorityDisinherit+0x148>)
   1f27c:	4798      	blx	r3
   1f27e:	0003      	movs	r3, r0
   1f280:	b2db      	uxtb	r3, r3
   1f282:	0018      	movs	r0, r3
   1f284:	4b18      	ldr	r3, [pc, #96]	; (1f2e8 <xTaskPriorityDisinherit+0x158>)
   1f286:	4798      	blx	r3
   1f288:	68bb      	ldr	r3, [r7, #8]
   1f28a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f28c:	4b17      	ldr	r3, [pc, #92]	; (1f2ec <xTaskPriorityDisinherit+0x15c>)
   1f28e:	681b      	ldr	r3, [r3, #0]
   1f290:	429a      	cmp	r2, r3
   1f292:	d903      	bls.n	1f29c <xTaskPriorityDisinherit+0x10c>
   1f294:	68bb      	ldr	r3, [r7, #8]
   1f296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f298:	4b14      	ldr	r3, [pc, #80]	; (1f2ec <xTaskPriorityDisinherit+0x15c>)
   1f29a:	601a      	str	r2, [r3, #0]
   1f29c:	68bb      	ldr	r3, [r7, #8]
   1f29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f2a0:	0013      	movs	r3, r2
   1f2a2:	009b      	lsls	r3, r3, #2
   1f2a4:	189b      	adds	r3, r3, r2
   1f2a6:	009b      	lsls	r3, r3, #2
   1f2a8:	4a11      	ldr	r2, [pc, #68]	; (1f2f0 <xTaskPriorityDisinherit+0x160>)
   1f2aa:	189a      	adds	r2, r3, r2
   1f2ac:	68bb      	ldr	r3, [r7, #8]
   1f2ae:	3304      	adds	r3, #4
   1f2b0:	0019      	movs	r1, r3
   1f2b2:	0010      	movs	r0, r2
   1f2b4:	4b0f      	ldr	r3, [pc, #60]	; (1f2f4 <xTaskPriorityDisinherit+0x164>)
   1f2b6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1f2b8:	2301      	movs	r3, #1
   1f2ba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1f2bc:	68fb      	ldr	r3, [r7, #12]
	}
   1f2be:	0018      	movs	r0, r3
   1f2c0:	46bd      	mov	sp, r7
   1f2c2:	b005      	add	sp, #20
   1f2c4:	bd90      	pop	{r4, r7, pc}
   1f2c6:	46c0      	nop			; (mov r8, r8)
   1f2c8:	20003d2c 	.word	0x20003d2c
   1f2cc:	0001c117 	.word	0x0001c117
   1f2d0:	0001a29d 	.word	0x0001a29d
   1f2d4:	20000104 	.word	0x20000104
   1f2d8:	0001a27d 	.word	0x0001a27d
   1f2dc:	0001b255 	.word	0x0001b255
   1f2e0:	0001adc5 	.word	0x0001adc5
   1f2e4:	0001b1b1 	.word	0x0001b1b1
   1f2e8:	0001aa4d 	.word	0x0001aa4d
   1f2ec:	20003e0c 	.word	0x20003e0c
   1f2f0:	20003d30 	.word	0x20003d30
   1f2f4:	0001c067 	.word	0x0001c067

0001f2f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1f2f8:	b590      	push	{r4, r7, lr}
   1f2fa:	b087      	sub	sp, #28
   1f2fc:	af00      	add	r7, sp, #0
   1f2fe:	6078      	str	r0, [r7, #4]
   1f300:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1f302:	687b      	ldr	r3, [r7, #4]
   1f304:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1f306:	2301      	movs	r3, #1
   1f308:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1f30a:	687b      	ldr	r3, [r7, #4]
   1f30c:	2b00      	cmp	r3, #0
   1f30e:	d100      	bne.n	1f312 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1f310:	e0a4      	b.n	1f45c <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1f312:	693b      	ldr	r3, [r7, #16]
   1f314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f316:	2b00      	cmp	r3, #0
   1f318:	d101      	bne.n	1f31e <vTaskPriorityDisinheritAfterTimeout+0x26>
   1f31a:	b672      	cpsid	i
   1f31c:	e7fe      	b.n	1f31c <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1f31e:	693b      	ldr	r3, [r7, #16]
   1f320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1f322:	683b      	ldr	r3, [r7, #0]
   1f324:	429a      	cmp	r2, r3
   1f326:	d202      	bcs.n	1f32e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1f328:	683b      	ldr	r3, [r7, #0]
   1f32a:	617b      	str	r3, [r7, #20]
   1f32c:	e002      	b.n	1f334 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1f32e:	693b      	ldr	r3, [r7, #16]
   1f330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f332:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1f334:	693b      	ldr	r3, [r7, #16]
   1f336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f338:	697b      	ldr	r3, [r7, #20]
   1f33a:	429a      	cmp	r2, r3
   1f33c:	d100      	bne.n	1f340 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1f33e:	e08d      	b.n	1f45c <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1f340:	693b      	ldr	r3, [r7, #16]
   1f342:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1f344:	68fb      	ldr	r3, [r7, #12]
   1f346:	429a      	cmp	r2, r3
   1f348:	d000      	beq.n	1f34c <vTaskPriorityDisinheritAfterTimeout+0x54>
   1f34a:	e087      	b.n	1f45c <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1f34c:	4b45      	ldr	r3, [pc, #276]	; (1f464 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1f34e:	681b      	ldr	r3, [r3, #0]
   1f350:	693a      	ldr	r2, [r7, #16]
   1f352:	429a      	cmp	r2, r3
   1f354:	d101      	bne.n	1f35a <vTaskPriorityDisinheritAfterTimeout+0x62>
   1f356:	b672      	cpsid	i
   1f358:	e7fe      	b.n	1f358 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1f35a:	693b      	ldr	r3, [r7, #16]
   1f35c:	0018      	movs	r0, r3
   1f35e:	4b42      	ldr	r3, [pc, #264]	; (1f468 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1f360:	4798      	blx	r3
   1f362:	0003      	movs	r3, r0
   1f364:	001a      	movs	r2, r3
   1f366:	4b41      	ldr	r3, [pc, #260]	; (1f46c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1f368:	881b      	ldrh	r3, [r3, #0]
   1f36a:	4013      	ands	r3, r2
   1f36c:	b29b      	uxth	r3, r3
   1f36e:	2b00      	cmp	r3, #0
   1f370:	d023      	beq.n	1f3ba <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1f372:	693b      	ldr	r3, [r7, #16]
   1f374:	0018      	movs	r0, r3
   1f376:	4b3e      	ldr	r3, [pc, #248]	; (1f470 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1f378:	4798      	blx	r3
   1f37a:	0003      	movs	r3, r0
   1f37c:	b2db      	uxtb	r3, r3
   1f37e:	001c      	movs	r4, r3
   1f380:	693b      	ldr	r3, [r7, #16]
   1f382:	0018      	movs	r0, r3
   1f384:	4b3a      	ldr	r3, [pc, #232]	; (1f470 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1f386:	4798      	blx	r3
   1f388:	0003      	movs	r3, r0
   1f38a:	b2db      	uxtb	r3, r3
   1f38c:	0019      	movs	r1, r3
   1f38e:	2003      	movs	r0, #3
   1f390:	4b38      	ldr	r3, [pc, #224]	; (1f474 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1f392:	4798      	blx	r3
   1f394:	0003      	movs	r3, r0
   1f396:	0022      	movs	r2, r4
   1f398:	2103      	movs	r1, #3
   1f39a:	208f      	movs	r0, #143	; 0x8f
   1f39c:	4c36      	ldr	r4, [pc, #216]	; (1f478 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1f39e:	47a0      	blx	r4
   1f3a0:	693b      	ldr	r3, [r7, #16]
   1f3a2:	0018      	movs	r0, r3
   1f3a4:	4b32      	ldr	r3, [pc, #200]	; (1f470 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1f3a6:	4798      	blx	r3
   1f3a8:	0003      	movs	r3, r0
   1f3aa:	b2d9      	uxtb	r1, r3
   1f3ac:	693b      	ldr	r3, [r7, #16]
   1f3ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f3b0:	b2db      	uxtb	r3, r3
   1f3b2:	001a      	movs	r2, r3
   1f3b4:	2003      	movs	r0, #3
   1f3b6:	4b31      	ldr	r3, [pc, #196]	; (1f47c <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1f3b8:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1f3ba:	693b      	ldr	r3, [r7, #16]
   1f3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f3be:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1f3c0:	693b      	ldr	r3, [r7, #16]
   1f3c2:	697a      	ldr	r2, [r7, #20]
   1f3c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1f3c6:	693b      	ldr	r3, [r7, #16]
   1f3c8:	699b      	ldr	r3, [r3, #24]
   1f3ca:	2b00      	cmp	r3, #0
   1f3cc:	db04      	blt.n	1f3d8 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f3ce:	697b      	ldr	r3, [r7, #20]
   1f3d0:	2205      	movs	r2, #5
   1f3d2:	1ad2      	subs	r2, r2, r3
   1f3d4:	693b      	ldr	r3, [r7, #16]
   1f3d6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1f3d8:	693b      	ldr	r3, [r7, #16]
   1f3da:	6959      	ldr	r1, [r3, #20]
   1f3dc:	68ba      	ldr	r2, [r7, #8]
   1f3de:	0013      	movs	r3, r2
   1f3e0:	009b      	lsls	r3, r3, #2
   1f3e2:	189b      	adds	r3, r3, r2
   1f3e4:	009b      	lsls	r3, r3, #2
   1f3e6:	4a26      	ldr	r2, [pc, #152]	; (1f480 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1f3e8:	189b      	adds	r3, r3, r2
   1f3ea:	4299      	cmp	r1, r3
   1f3ec:	d101      	bne.n	1f3f2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1f3ee:	2301      	movs	r3, #1
   1f3f0:	e000      	b.n	1f3f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1f3f2:	2300      	movs	r3, #0
   1f3f4:	2b00      	cmp	r3, #0
   1f3f6:	d031      	beq.n	1f45c <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1f3f8:	693b      	ldr	r3, [r7, #16]
   1f3fa:	3304      	adds	r3, #4
   1f3fc:	0018      	movs	r0, r3
   1f3fe:	4b21      	ldr	r3, [pc, #132]	; (1f484 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1f400:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1f402:	693b      	ldr	r3, [r7, #16]
   1f404:	0018      	movs	r0, r3
   1f406:	4b18      	ldr	r3, [pc, #96]	; (1f468 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1f408:	4798      	blx	r3
   1f40a:	0003      	movs	r3, r0
   1f40c:	001a      	movs	r2, r3
   1f40e:	4b17      	ldr	r3, [pc, #92]	; (1f46c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1f410:	881b      	ldrh	r3, [r3, #0]
   1f412:	4013      	ands	r3, r2
   1f414:	b29b      	uxth	r3, r3
   1f416:	2b00      	cmp	r3, #0
   1f418:	d008      	beq.n	1f42c <vTaskPriorityDisinheritAfterTimeout+0x134>
   1f41a:	693b      	ldr	r3, [r7, #16]
   1f41c:	0018      	movs	r0, r3
   1f41e:	4b14      	ldr	r3, [pc, #80]	; (1f470 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1f420:	4798      	blx	r3
   1f422:	0003      	movs	r3, r0
   1f424:	b2db      	uxtb	r3, r3
   1f426:	0018      	movs	r0, r3
   1f428:	4b17      	ldr	r3, [pc, #92]	; (1f488 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1f42a:	4798      	blx	r3
   1f42c:	693b      	ldr	r3, [r7, #16]
   1f42e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f430:	4b16      	ldr	r3, [pc, #88]	; (1f48c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1f432:	681b      	ldr	r3, [r3, #0]
   1f434:	429a      	cmp	r2, r3
   1f436:	d903      	bls.n	1f440 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1f438:	693b      	ldr	r3, [r7, #16]
   1f43a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f43c:	4b13      	ldr	r3, [pc, #76]	; (1f48c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1f43e:	601a      	str	r2, [r3, #0]
   1f440:	693b      	ldr	r3, [r7, #16]
   1f442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f444:	0013      	movs	r3, r2
   1f446:	009b      	lsls	r3, r3, #2
   1f448:	189b      	adds	r3, r3, r2
   1f44a:	009b      	lsls	r3, r3, #2
   1f44c:	4a0c      	ldr	r2, [pc, #48]	; (1f480 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1f44e:	189a      	adds	r2, r3, r2
   1f450:	693b      	ldr	r3, [r7, #16]
   1f452:	3304      	adds	r3, #4
   1f454:	0019      	movs	r1, r3
   1f456:	0010      	movs	r0, r2
   1f458:	4b0d      	ldr	r3, [pc, #52]	; (1f490 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1f45a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1f45c:	46c0      	nop			; (mov r8, r8)
   1f45e:	46bd      	mov	sp, r7
   1f460:	b007      	add	sp, #28
   1f462:	bd90      	pop	{r4, r7, pc}
   1f464:	20003d2c 	.word	0x20003d2c
   1f468:	0001a29d 	.word	0x0001a29d
   1f46c:	20000104 	.word	0x20000104
   1f470:	0001a27d 	.word	0x0001a27d
   1f474:	0001b255 	.word	0x0001b255
   1f478:	0001adc5 	.word	0x0001adc5
   1f47c:	0001b1b1 	.word	0x0001b1b1
   1f480:	20003d30 	.word	0x20003d30
   1f484:	0001c117 	.word	0x0001c117
   1f488:	0001aa4d 	.word	0x0001aa4d
   1f48c:	20003e0c 	.word	0x20003e0c
   1f490:	0001c067 	.word	0x0001c067

0001f494 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1f494:	b580      	push	{r7, lr}
   1f496:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1f498:	4b06      	ldr	r3, [pc, #24]	; (1f4b4 <pvTaskIncrementMutexHeldCount+0x20>)
   1f49a:	681b      	ldr	r3, [r3, #0]
   1f49c:	2b00      	cmp	r3, #0
   1f49e:	d004      	beq.n	1f4aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1f4a0:	4b04      	ldr	r3, [pc, #16]	; (1f4b4 <pvTaskIncrementMutexHeldCount+0x20>)
   1f4a2:	681b      	ldr	r3, [r3, #0]
   1f4a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1f4a6:	3201      	adds	r2, #1
   1f4a8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1f4aa:	4b02      	ldr	r3, [pc, #8]	; (1f4b4 <pvTaskIncrementMutexHeldCount+0x20>)
   1f4ac:	681b      	ldr	r3, [r3, #0]
	}
   1f4ae:	0018      	movs	r0, r3
   1f4b0:	46bd      	mov	sp, r7
   1f4b2:	bd80      	pop	{r7, pc}
   1f4b4:	20003d2c 	.word	0x20003d2c

0001f4b8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1f4b8:	b580      	push	{r7, lr}
   1f4ba:	b084      	sub	sp, #16
   1f4bc:	af00      	add	r7, sp, #0
   1f4be:	6078      	str	r0, [r7, #4]
   1f4c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1f4c2:	4b21      	ldr	r3, [pc, #132]	; (1f548 <prvAddCurrentTaskToDelayedList+0x90>)
   1f4c4:	681b      	ldr	r3, [r3, #0]
   1f4c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1f4c8:	4b20      	ldr	r3, [pc, #128]	; (1f54c <prvAddCurrentTaskToDelayedList+0x94>)
   1f4ca:	681b      	ldr	r3, [r3, #0]
   1f4cc:	3304      	adds	r3, #4
   1f4ce:	0018      	movs	r0, r3
   1f4d0:	4b1f      	ldr	r3, [pc, #124]	; (1f550 <prvAddCurrentTaskToDelayedList+0x98>)
   1f4d2:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1f4d4:	687b      	ldr	r3, [r7, #4]
   1f4d6:	3301      	adds	r3, #1
   1f4d8:	d10b      	bne.n	1f4f2 <prvAddCurrentTaskToDelayedList+0x3a>
   1f4da:	683b      	ldr	r3, [r7, #0]
   1f4dc:	2b00      	cmp	r3, #0
   1f4de:	d008      	beq.n	1f4f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1f4e0:	4b1a      	ldr	r3, [pc, #104]	; (1f54c <prvAddCurrentTaskToDelayedList+0x94>)
   1f4e2:	681b      	ldr	r3, [r3, #0]
   1f4e4:	1d1a      	adds	r2, r3, #4
   1f4e6:	4b1b      	ldr	r3, [pc, #108]	; (1f554 <prvAddCurrentTaskToDelayedList+0x9c>)
   1f4e8:	0011      	movs	r1, r2
   1f4ea:	0018      	movs	r0, r3
   1f4ec:	4b1a      	ldr	r3, [pc, #104]	; (1f558 <prvAddCurrentTaskToDelayedList+0xa0>)
   1f4ee:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1f4f0:	e026      	b.n	1f540 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1f4f2:	68fa      	ldr	r2, [r7, #12]
   1f4f4:	687b      	ldr	r3, [r7, #4]
   1f4f6:	18d3      	adds	r3, r2, r3
   1f4f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1f4fa:	4b14      	ldr	r3, [pc, #80]	; (1f54c <prvAddCurrentTaskToDelayedList+0x94>)
   1f4fc:	681b      	ldr	r3, [r3, #0]
   1f4fe:	68ba      	ldr	r2, [r7, #8]
   1f500:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1f502:	68ba      	ldr	r2, [r7, #8]
   1f504:	68fb      	ldr	r3, [r7, #12]
   1f506:	429a      	cmp	r2, r3
   1f508:	d209      	bcs.n	1f51e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1f50a:	4b14      	ldr	r3, [pc, #80]	; (1f55c <prvAddCurrentTaskToDelayedList+0xa4>)
   1f50c:	681a      	ldr	r2, [r3, #0]
   1f50e:	4b0f      	ldr	r3, [pc, #60]	; (1f54c <prvAddCurrentTaskToDelayedList+0x94>)
   1f510:	681b      	ldr	r3, [r3, #0]
   1f512:	3304      	adds	r3, #4
   1f514:	0019      	movs	r1, r3
   1f516:	0010      	movs	r0, r2
   1f518:	4b11      	ldr	r3, [pc, #68]	; (1f560 <prvAddCurrentTaskToDelayedList+0xa8>)
   1f51a:	4798      	blx	r3
}
   1f51c:	e010      	b.n	1f540 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1f51e:	4b11      	ldr	r3, [pc, #68]	; (1f564 <prvAddCurrentTaskToDelayedList+0xac>)
   1f520:	681a      	ldr	r2, [r3, #0]
   1f522:	4b0a      	ldr	r3, [pc, #40]	; (1f54c <prvAddCurrentTaskToDelayedList+0x94>)
   1f524:	681b      	ldr	r3, [r3, #0]
   1f526:	3304      	adds	r3, #4
   1f528:	0019      	movs	r1, r3
   1f52a:	0010      	movs	r0, r2
   1f52c:	4b0c      	ldr	r3, [pc, #48]	; (1f560 <prvAddCurrentTaskToDelayedList+0xa8>)
   1f52e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1f530:	4b0d      	ldr	r3, [pc, #52]	; (1f568 <prvAddCurrentTaskToDelayedList+0xb0>)
   1f532:	681b      	ldr	r3, [r3, #0]
   1f534:	68ba      	ldr	r2, [r7, #8]
   1f536:	429a      	cmp	r2, r3
   1f538:	d202      	bcs.n	1f540 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1f53a:	4b0b      	ldr	r3, [pc, #44]	; (1f568 <prvAddCurrentTaskToDelayedList+0xb0>)
   1f53c:	68ba      	ldr	r2, [r7, #8]
   1f53e:	601a      	str	r2, [r3, #0]
}
   1f540:	46c0      	nop			; (mov r8, r8)
   1f542:	46bd      	mov	sp, r7
   1f544:	b004      	add	sp, #16
   1f546:	bd80      	pop	{r7, pc}
   1f548:	20003e08 	.word	0x20003e08
   1f54c:	20003d2c 	.word	0x20003d2c
   1f550:	0001c117 	.word	0x0001c117
   1f554:	20003df0 	.word	0x20003df0
   1f558:	0001c067 	.word	0x0001c067
   1f55c:	20003dc0 	.word	0x20003dc0
   1f560:	0001c0ab 	.word	0x0001c0ab
   1f564:	20003dbc 	.word	0x20003dbc
   1f568:	20003e24 	.word	0x20003e24

0001f56c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1f56c:	b590      	push	{r4, r7, lr}
   1f56e:	b085      	sub	sp, #20
   1f570:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1f572:	2300      	movs	r3, #0
   1f574:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1f576:	4b0e      	ldr	r3, [pc, #56]	; (1f5b0 <xTimerCreateTimerTask+0x44>)
   1f578:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1f57a:	4b0e      	ldr	r3, [pc, #56]	; (1f5b4 <xTimerCreateTimerTask+0x48>)
   1f57c:	681b      	ldr	r3, [r3, #0]
   1f57e:	2b00      	cmp	r3, #0
   1f580:	d00b      	beq.n	1f59a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1f582:	490d      	ldr	r1, [pc, #52]	; (1f5b8 <xTimerCreateTimerTask+0x4c>)
   1f584:	480d      	ldr	r0, [pc, #52]	; (1f5bc <xTimerCreateTimerTask+0x50>)
   1f586:	4b0e      	ldr	r3, [pc, #56]	; (1f5c0 <xTimerCreateTimerTask+0x54>)
   1f588:	9301      	str	r3, [sp, #4]
   1f58a:	2302      	movs	r3, #2
   1f58c:	9300      	str	r3, [sp, #0]
   1f58e:	2300      	movs	r3, #0
   1f590:	2280      	movs	r2, #128	; 0x80
   1f592:	4c0c      	ldr	r4, [pc, #48]	; (1f5c4 <xTimerCreateTimerTask+0x58>)
   1f594:	47a0      	blx	r4
   1f596:	0003      	movs	r3, r0
   1f598:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1f59a:	687b      	ldr	r3, [r7, #4]
   1f59c:	2b00      	cmp	r3, #0
   1f59e:	d101      	bne.n	1f5a4 <xTimerCreateTimerTask+0x38>
   1f5a0:	b672      	cpsid	i
   1f5a2:	e7fe      	b.n	1f5a2 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1f5a4:	687b      	ldr	r3, [r7, #4]
}
   1f5a6:	0018      	movs	r0, r3
   1f5a8:	46bd      	mov	sp, r7
   1f5aa:	b003      	add	sp, #12
   1f5ac:	bd90      	pop	{r4, r7, pc}
   1f5ae:	46c0      	nop			; (mov r8, r8)
   1f5b0:	0001fab5 	.word	0x0001fab5
   1f5b4:	20003e60 	.word	0x20003e60
   1f5b8:	0003a7d4 	.word	0x0003a7d4
   1f5bc:	0001f6ed 	.word	0x0001f6ed
   1f5c0:	20003e64 	.word	0x20003e64
   1f5c4:	0001df05 	.word	0x0001df05

0001f5c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1f5c8:	b590      	push	{r4, r7, lr}
   1f5ca:	b089      	sub	sp, #36	; 0x24
   1f5cc:	af00      	add	r7, sp, #0
   1f5ce:	60f8      	str	r0, [r7, #12]
   1f5d0:	60b9      	str	r1, [r7, #8]
   1f5d2:	607a      	str	r2, [r7, #4]
   1f5d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1f5d6:	2300      	movs	r3, #0
   1f5d8:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1f5da:	68fb      	ldr	r3, [r7, #12]
   1f5dc:	2b00      	cmp	r3, #0
   1f5de:	d101      	bne.n	1f5e4 <xTimerGenericCommand+0x1c>
   1f5e0:	b672      	cpsid	i
   1f5e2:	e7fe      	b.n	1f5e2 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1f5e4:	4b1e      	ldr	r3, [pc, #120]	; (1f660 <xTimerGenericCommand+0x98>)
   1f5e6:	681b      	ldr	r3, [r3, #0]
   1f5e8:	2b00      	cmp	r3, #0
   1f5ea:	d033      	beq.n	1f654 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1f5ec:	2310      	movs	r3, #16
   1f5ee:	18fb      	adds	r3, r7, r3
   1f5f0:	68ba      	ldr	r2, [r7, #8]
   1f5f2:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1f5f4:	2310      	movs	r3, #16
   1f5f6:	18fb      	adds	r3, r7, r3
   1f5f8:	687a      	ldr	r2, [r7, #4]
   1f5fa:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1f5fc:	2310      	movs	r3, #16
   1f5fe:	18fb      	adds	r3, r7, r3
   1f600:	68fa      	ldr	r2, [r7, #12]
   1f602:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1f604:	68bb      	ldr	r3, [r7, #8]
   1f606:	2b05      	cmp	r3, #5
   1f608:	dc1a      	bgt.n	1f640 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1f60a:	4b16      	ldr	r3, [pc, #88]	; (1f664 <xTimerGenericCommand+0x9c>)
   1f60c:	4798      	blx	r3
   1f60e:	0003      	movs	r3, r0
   1f610:	2b02      	cmp	r3, #2
   1f612:	d10a      	bne.n	1f62a <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1f614:	4b12      	ldr	r3, [pc, #72]	; (1f660 <xTimerGenericCommand+0x98>)
   1f616:	6818      	ldr	r0, [r3, #0]
   1f618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1f61a:	2310      	movs	r3, #16
   1f61c:	18f9      	adds	r1, r7, r3
   1f61e:	2300      	movs	r3, #0
   1f620:	4c11      	ldr	r4, [pc, #68]	; (1f668 <xTimerGenericCommand+0xa0>)
   1f622:	47a0      	blx	r4
   1f624:	0003      	movs	r3, r0
   1f626:	61fb      	str	r3, [r7, #28]
   1f628:	e014      	b.n	1f654 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1f62a:	4b0d      	ldr	r3, [pc, #52]	; (1f660 <xTimerGenericCommand+0x98>)
   1f62c:	6818      	ldr	r0, [r3, #0]
   1f62e:	2310      	movs	r3, #16
   1f630:	18f9      	adds	r1, r7, r3
   1f632:	2300      	movs	r3, #0
   1f634:	2200      	movs	r2, #0
   1f636:	4c0c      	ldr	r4, [pc, #48]	; (1f668 <xTimerGenericCommand+0xa0>)
   1f638:	47a0      	blx	r4
   1f63a:	0003      	movs	r3, r0
   1f63c:	61fb      	str	r3, [r7, #28]
   1f63e:	e009      	b.n	1f654 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1f640:	4b07      	ldr	r3, [pc, #28]	; (1f660 <xTimerGenericCommand+0x98>)
   1f642:	6818      	ldr	r0, [r3, #0]
   1f644:	683a      	ldr	r2, [r7, #0]
   1f646:	2310      	movs	r3, #16
   1f648:	18f9      	adds	r1, r7, r3
   1f64a:	2300      	movs	r3, #0
   1f64c:	4c07      	ldr	r4, [pc, #28]	; (1f66c <xTimerGenericCommand+0xa4>)
   1f64e:	47a0      	blx	r4
   1f650:	0003      	movs	r3, r0
   1f652:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1f654:	69fb      	ldr	r3, [r7, #28]
}
   1f656:	0018      	movs	r0, r3
   1f658:	46bd      	mov	sp, r7
   1f65a:	b009      	add	sp, #36	; 0x24
   1f65c:	bd90      	pop	{r4, r7, pc}
   1f65e:	46c0      	nop			; (mov r8, r8)
   1f660:	20003e60 	.word	0x20003e60
   1f664:	0001efc9 	.word	0x0001efc9
   1f668:	0001c83d 	.word	0x0001c83d
   1f66c:	0001cc9d 	.word	0x0001cc9d

0001f670 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1f670:	b590      	push	{r4, r7, lr}
   1f672:	b087      	sub	sp, #28
   1f674:	af02      	add	r7, sp, #8
   1f676:	6078      	str	r0, [r7, #4]
   1f678:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1f67a:	4b18      	ldr	r3, [pc, #96]	; (1f6dc <prvProcessExpiredTimer+0x6c>)
   1f67c:	681b      	ldr	r3, [r3, #0]
   1f67e:	68db      	ldr	r3, [r3, #12]
   1f680:	68db      	ldr	r3, [r3, #12]
   1f682:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1f684:	68fb      	ldr	r3, [r7, #12]
   1f686:	3304      	adds	r3, #4
   1f688:	0018      	movs	r0, r3
   1f68a:	4b15      	ldr	r3, [pc, #84]	; (1f6e0 <prvProcessExpiredTimer+0x70>)
   1f68c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1f68e:	68fb      	ldr	r3, [r7, #12]
   1f690:	69db      	ldr	r3, [r3, #28]
   1f692:	2b01      	cmp	r3, #1
   1f694:	d119      	bne.n	1f6ca <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1f696:	68fb      	ldr	r3, [r7, #12]
   1f698:	699a      	ldr	r2, [r3, #24]
   1f69a:	687b      	ldr	r3, [r7, #4]
   1f69c:	18d1      	adds	r1, r2, r3
   1f69e:	687b      	ldr	r3, [r7, #4]
   1f6a0:	683a      	ldr	r2, [r7, #0]
   1f6a2:	68f8      	ldr	r0, [r7, #12]
   1f6a4:	4c0f      	ldr	r4, [pc, #60]	; (1f6e4 <prvProcessExpiredTimer+0x74>)
   1f6a6:	47a0      	blx	r4
   1f6a8:	1e03      	subs	r3, r0, #0
   1f6aa:	d00e      	beq.n	1f6ca <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1f6ac:	687a      	ldr	r2, [r7, #4]
   1f6ae:	68f8      	ldr	r0, [r7, #12]
   1f6b0:	2300      	movs	r3, #0
   1f6b2:	9300      	str	r3, [sp, #0]
   1f6b4:	2300      	movs	r3, #0
   1f6b6:	2100      	movs	r1, #0
   1f6b8:	4c0b      	ldr	r4, [pc, #44]	; (1f6e8 <prvProcessExpiredTimer+0x78>)
   1f6ba:	47a0      	blx	r4
   1f6bc:	0003      	movs	r3, r0
   1f6be:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1f6c0:	68bb      	ldr	r3, [r7, #8]
   1f6c2:	2b00      	cmp	r3, #0
   1f6c4:	d101      	bne.n	1f6ca <prvProcessExpiredTimer+0x5a>
   1f6c6:	b672      	cpsid	i
   1f6c8:	e7fe      	b.n	1f6c8 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1f6ca:	68fb      	ldr	r3, [r7, #12]
   1f6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f6ce:	68fa      	ldr	r2, [r7, #12]
   1f6d0:	0010      	movs	r0, r2
   1f6d2:	4798      	blx	r3
}
   1f6d4:	46c0      	nop			; (mov r8, r8)
   1f6d6:	46bd      	mov	sp, r7
   1f6d8:	b005      	add	sp, #20
   1f6da:	bd90      	pop	{r4, r7, pc}
   1f6dc:	20003e58 	.word	0x20003e58
   1f6e0:	0001c117 	.word	0x0001c117
   1f6e4:	0001f855 	.word	0x0001f855
   1f6e8:	0001f5c9 	.word	0x0001f5c9

0001f6ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1f6ec:	b580      	push	{r7, lr}
   1f6ee:	b084      	sub	sp, #16
   1f6f0:	af00      	add	r7, sp, #0
   1f6f2:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1f6f4:	4b08      	ldr	r3, [pc, #32]	; (1f718 <prvTimerTask+0x2c>)
   1f6f6:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1f6f8:	2308      	movs	r3, #8
   1f6fa:	18fb      	adds	r3, r7, r3
   1f6fc:	0018      	movs	r0, r3
   1f6fe:	4b07      	ldr	r3, [pc, #28]	; (1f71c <prvTimerTask+0x30>)
   1f700:	4798      	blx	r3
   1f702:	0003      	movs	r3, r0
   1f704:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1f706:	68ba      	ldr	r2, [r7, #8]
   1f708:	68fb      	ldr	r3, [r7, #12]
   1f70a:	0011      	movs	r1, r2
   1f70c:	0018      	movs	r0, r3
   1f70e:	4b04      	ldr	r3, [pc, #16]	; (1f720 <prvTimerTask+0x34>)
   1f710:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1f712:	4b04      	ldr	r3, [pc, #16]	; (1f724 <prvTimerTask+0x38>)
   1f714:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1f716:	e7ef      	b.n	1f6f8 <prvTimerTask+0xc>
   1f718:	000344d9 	.word	0x000344d9
   1f71c:	0001f7cd 	.word	0x0001f7cd
   1f720:	0001f729 	.word	0x0001f729
   1f724:	0001f8dd 	.word	0x0001f8dd

0001f728 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1f728:	b580      	push	{r7, lr}
   1f72a:	b084      	sub	sp, #16
   1f72c:	af00      	add	r7, sp, #0
   1f72e:	6078      	str	r0, [r7, #4]
   1f730:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1f732:	4b1e      	ldr	r3, [pc, #120]	; (1f7ac <prvProcessTimerOrBlockTask+0x84>)
   1f734:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1f736:	2308      	movs	r3, #8
   1f738:	18fb      	adds	r3, r7, r3
   1f73a:	0018      	movs	r0, r3
   1f73c:	4b1c      	ldr	r3, [pc, #112]	; (1f7b0 <prvProcessTimerOrBlockTask+0x88>)
   1f73e:	4798      	blx	r3
   1f740:	0003      	movs	r3, r0
   1f742:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1f744:	68bb      	ldr	r3, [r7, #8]
   1f746:	2b00      	cmp	r3, #0
   1f748:	d129      	bne.n	1f79e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1f74a:	683b      	ldr	r3, [r7, #0]
   1f74c:	2b00      	cmp	r3, #0
   1f74e:	d10c      	bne.n	1f76a <prvProcessTimerOrBlockTask+0x42>
   1f750:	687a      	ldr	r2, [r7, #4]
   1f752:	68fb      	ldr	r3, [r7, #12]
   1f754:	429a      	cmp	r2, r3
   1f756:	d808      	bhi.n	1f76a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1f758:	4b16      	ldr	r3, [pc, #88]	; (1f7b4 <prvProcessTimerOrBlockTask+0x8c>)
   1f75a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1f75c:	68fa      	ldr	r2, [r7, #12]
   1f75e:	687b      	ldr	r3, [r7, #4]
   1f760:	0011      	movs	r1, r2
   1f762:	0018      	movs	r0, r3
   1f764:	4b14      	ldr	r3, [pc, #80]	; (1f7b8 <prvProcessTimerOrBlockTask+0x90>)
   1f766:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1f768:	e01b      	b.n	1f7a2 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1f76a:	683b      	ldr	r3, [r7, #0]
   1f76c:	2b00      	cmp	r3, #0
   1f76e:	d006      	beq.n	1f77e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1f770:	4b12      	ldr	r3, [pc, #72]	; (1f7bc <prvProcessTimerOrBlockTask+0x94>)
   1f772:	681b      	ldr	r3, [r3, #0]
   1f774:	681b      	ldr	r3, [r3, #0]
   1f776:	425a      	negs	r2, r3
   1f778:	4153      	adcs	r3, r2
   1f77a:	b2db      	uxtb	r3, r3
   1f77c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1f77e:	4b10      	ldr	r3, [pc, #64]	; (1f7c0 <prvProcessTimerOrBlockTask+0x98>)
   1f780:	6818      	ldr	r0, [r3, #0]
   1f782:	687a      	ldr	r2, [r7, #4]
   1f784:	68fb      	ldr	r3, [r7, #12]
   1f786:	1ad3      	subs	r3, r2, r3
   1f788:	683a      	ldr	r2, [r7, #0]
   1f78a:	0019      	movs	r1, r3
   1f78c:	4b0d      	ldr	r3, [pc, #52]	; (1f7c4 <prvProcessTimerOrBlockTask+0x9c>)
   1f78e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1f790:	4b08      	ldr	r3, [pc, #32]	; (1f7b4 <prvProcessTimerOrBlockTask+0x8c>)
   1f792:	4798      	blx	r3
   1f794:	1e03      	subs	r3, r0, #0
   1f796:	d104      	bne.n	1f7a2 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1f798:	4b0b      	ldr	r3, [pc, #44]	; (1f7c8 <prvProcessTimerOrBlockTask+0xa0>)
   1f79a:	4798      	blx	r3
}
   1f79c:	e001      	b.n	1f7a2 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1f79e:	4b05      	ldr	r3, [pc, #20]	; (1f7b4 <prvProcessTimerOrBlockTask+0x8c>)
   1f7a0:	4798      	blx	r3
}
   1f7a2:	46c0      	nop			; (mov r8, r8)
   1f7a4:	46bd      	mov	sp, r7
   1f7a6:	b004      	add	sp, #16
   1f7a8:	bd80      	pop	{r7, pc}
   1f7aa:	46c0      	nop			; (mov r8, r8)
   1f7ac:	0001e561 	.word	0x0001e561
   1f7b0:	0001f80d 	.word	0x0001f80d
   1f7b4:	0001e579 	.word	0x0001e579
   1f7b8:	0001f671 	.word	0x0001f671
   1f7bc:	20003e5c 	.word	0x20003e5c
   1f7c0:	20003e60 	.word	0x20003e60
   1f7c4:	0001dd01 	.word	0x0001dd01
   1f7c8:	0001c291 	.word	0x0001c291

0001f7cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1f7cc:	b580      	push	{r7, lr}
   1f7ce:	b084      	sub	sp, #16
   1f7d0:	af00      	add	r7, sp, #0
   1f7d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1f7d4:	4b0c      	ldr	r3, [pc, #48]	; (1f808 <prvGetNextExpireTime+0x3c>)
   1f7d6:	681b      	ldr	r3, [r3, #0]
   1f7d8:	681b      	ldr	r3, [r3, #0]
   1f7da:	425a      	negs	r2, r3
   1f7dc:	4153      	adcs	r3, r2
   1f7de:	b2db      	uxtb	r3, r3
   1f7e0:	001a      	movs	r2, r3
   1f7e2:	687b      	ldr	r3, [r7, #4]
   1f7e4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1f7e6:	687b      	ldr	r3, [r7, #4]
   1f7e8:	681b      	ldr	r3, [r3, #0]
   1f7ea:	2b00      	cmp	r3, #0
   1f7ec:	d105      	bne.n	1f7fa <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1f7ee:	4b06      	ldr	r3, [pc, #24]	; (1f808 <prvGetNextExpireTime+0x3c>)
   1f7f0:	681b      	ldr	r3, [r3, #0]
   1f7f2:	68db      	ldr	r3, [r3, #12]
   1f7f4:	681b      	ldr	r3, [r3, #0]
   1f7f6:	60fb      	str	r3, [r7, #12]
   1f7f8:	e001      	b.n	1f7fe <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1f7fa:	2300      	movs	r3, #0
   1f7fc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1f7fe:	68fb      	ldr	r3, [r7, #12]
}
   1f800:	0018      	movs	r0, r3
   1f802:	46bd      	mov	sp, r7
   1f804:	b004      	add	sp, #16
   1f806:	bd80      	pop	{r7, pc}
   1f808:	20003e58 	.word	0x20003e58

0001f80c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1f80c:	b580      	push	{r7, lr}
   1f80e:	b084      	sub	sp, #16
   1f810:	af00      	add	r7, sp, #0
   1f812:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1f814:	4b0c      	ldr	r3, [pc, #48]	; (1f848 <prvSampleTimeNow+0x3c>)
   1f816:	4798      	blx	r3
   1f818:	0003      	movs	r3, r0
   1f81a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1f81c:	4b0b      	ldr	r3, [pc, #44]	; (1f84c <prvSampleTimeNow+0x40>)
   1f81e:	681b      	ldr	r3, [r3, #0]
   1f820:	68fa      	ldr	r2, [r7, #12]
   1f822:	429a      	cmp	r2, r3
   1f824:	d205      	bcs.n	1f832 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1f826:	4b0a      	ldr	r3, [pc, #40]	; (1f850 <prvSampleTimeNow+0x44>)
   1f828:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1f82a:	687b      	ldr	r3, [r7, #4]
   1f82c:	2201      	movs	r2, #1
   1f82e:	601a      	str	r2, [r3, #0]
   1f830:	e002      	b.n	1f838 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1f832:	687b      	ldr	r3, [r7, #4]
   1f834:	2200      	movs	r2, #0
   1f836:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1f838:	4b04      	ldr	r3, [pc, #16]	; (1f84c <prvSampleTimeNow+0x40>)
   1f83a:	68fa      	ldr	r2, [r7, #12]
   1f83c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1f83e:	68fb      	ldr	r3, [r7, #12]
}
   1f840:	0018      	movs	r0, r3
   1f842:	46bd      	mov	sp, r7
   1f844:	b004      	add	sp, #16
   1f846:	bd80      	pop	{r7, pc}
   1f848:	0001e6e9 	.word	0x0001e6e9
   1f84c:	20003e68 	.word	0x20003e68
   1f850:	0001f9f5 	.word	0x0001f9f5

0001f854 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1f854:	b580      	push	{r7, lr}
   1f856:	b086      	sub	sp, #24
   1f858:	af00      	add	r7, sp, #0
   1f85a:	60f8      	str	r0, [r7, #12]
   1f85c:	60b9      	str	r1, [r7, #8]
   1f85e:	607a      	str	r2, [r7, #4]
   1f860:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1f862:	2300      	movs	r3, #0
   1f864:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1f866:	68fb      	ldr	r3, [r7, #12]
   1f868:	68ba      	ldr	r2, [r7, #8]
   1f86a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1f86c:	68fb      	ldr	r3, [r7, #12]
   1f86e:	68fa      	ldr	r2, [r7, #12]
   1f870:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1f872:	68ba      	ldr	r2, [r7, #8]
   1f874:	687b      	ldr	r3, [r7, #4]
   1f876:	429a      	cmp	r2, r3
   1f878:	d812      	bhi.n	1f8a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f87a:	687a      	ldr	r2, [r7, #4]
   1f87c:	683b      	ldr	r3, [r7, #0]
   1f87e:	1ad2      	subs	r2, r2, r3
   1f880:	68fb      	ldr	r3, [r7, #12]
   1f882:	699b      	ldr	r3, [r3, #24]
   1f884:	429a      	cmp	r2, r3
   1f886:	d302      	bcc.n	1f88e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1f888:	2301      	movs	r3, #1
   1f88a:	617b      	str	r3, [r7, #20]
   1f88c:	e01b      	b.n	1f8c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1f88e:	4b10      	ldr	r3, [pc, #64]	; (1f8d0 <prvInsertTimerInActiveList+0x7c>)
   1f890:	681a      	ldr	r2, [r3, #0]
   1f892:	68fb      	ldr	r3, [r7, #12]
   1f894:	3304      	adds	r3, #4
   1f896:	0019      	movs	r1, r3
   1f898:	0010      	movs	r0, r2
   1f89a:	4b0e      	ldr	r3, [pc, #56]	; (1f8d4 <prvInsertTimerInActiveList+0x80>)
   1f89c:	4798      	blx	r3
   1f89e:	e012      	b.n	1f8c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1f8a0:	687a      	ldr	r2, [r7, #4]
   1f8a2:	683b      	ldr	r3, [r7, #0]
   1f8a4:	429a      	cmp	r2, r3
   1f8a6:	d206      	bcs.n	1f8b6 <prvInsertTimerInActiveList+0x62>
   1f8a8:	68ba      	ldr	r2, [r7, #8]
   1f8aa:	683b      	ldr	r3, [r7, #0]
   1f8ac:	429a      	cmp	r2, r3
   1f8ae:	d302      	bcc.n	1f8b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1f8b0:	2301      	movs	r3, #1
   1f8b2:	617b      	str	r3, [r7, #20]
   1f8b4:	e007      	b.n	1f8c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1f8b6:	4b08      	ldr	r3, [pc, #32]	; (1f8d8 <prvInsertTimerInActiveList+0x84>)
   1f8b8:	681a      	ldr	r2, [r3, #0]
   1f8ba:	68fb      	ldr	r3, [r7, #12]
   1f8bc:	3304      	adds	r3, #4
   1f8be:	0019      	movs	r1, r3
   1f8c0:	0010      	movs	r0, r2
   1f8c2:	4b04      	ldr	r3, [pc, #16]	; (1f8d4 <prvInsertTimerInActiveList+0x80>)
   1f8c4:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1f8c6:	697b      	ldr	r3, [r7, #20]
}
   1f8c8:	0018      	movs	r0, r3
   1f8ca:	46bd      	mov	sp, r7
   1f8cc:	b006      	add	sp, #24
   1f8ce:	bd80      	pop	{r7, pc}
   1f8d0:	20003e5c 	.word	0x20003e5c
   1f8d4:	0001c0ab 	.word	0x0001c0ab
   1f8d8:	20003e58 	.word	0x20003e58

0001f8dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1f8dc:	b590      	push	{r4, r7, lr}
   1f8de:	b08b      	sub	sp, #44	; 0x2c
   1f8e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1f8e2:	e068      	b.n	1f9b6 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1f8e4:	2308      	movs	r3, #8
   1f8e6:	18fb      	adds	r3, r7, r3
   1f8e8:	681b      	ldr	r3, [r3, #0]
   1f8ea:	2b00      	cmp	r3, #0
   1f8ec:	db63      	blt.n	1f9b6 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1f8ee:	2308      	movs	r3, #8
   1f8f0:	18fb      	adds	r3, r7, r3
   1f8f2:	689b      	ldr	r3, [r3, #8]
   1f8f4:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1f8f6:	69fb      	ldr	r3, [r7, #28]
   1f8f8:	695b      	ldr	r3, [r3, #20]
   1f8fa:	2b00      	cmp	r3, #0
   1f8fc:	d004      	beq.n	1f908 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1f8fe:	69fb      	ldr	r3, [r7, #28]
   1f900:	3304      	adds	r3, #4
   1f902:	0018      	movs	r0, r3
   1f904:	4b33      	ldr	r3, [pc, #204]	; (1f9d4 <prvProcessReceivedCommands+0xf8>)
   1f906:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1f908:	1d3b      	adds	r3, r7, #4
   1f90a:	0018      	movs	r0, r3
   1f90c:	4b32      	ldr	r3, [pc, #200]	; (1f9d8 <prvProcessReceivedCommands+0xfc>)
   1f90e:	4798      	blx	r3
   1f910:	0003      	movs	r3, r0
   1f912:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1f914:	2308      	movs	r3, #8
   1f916:	18fb      	adds	r3, r7, r3
   1f918:	681b      	ldr	r3, [r3, #0]
   1f91a:	2b09      	cmp	r3, #9
   1f91c:	d84a      	bhi.n	1f9b4 <prvProcessReceivedCommands+0xd8>
   1f91e:	009a      	lsls	r2, r3, #2
   1f920:	4b2e      	ldr	r3, [pc, #184]	; (1f9dc <prvProcessReceivedCommands+0x100>)
   1f922:	18d3      	adds	r3, r2, r3
   1f924:	681b      	ldr	r3, [r3, #0]
   1f926:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1f928:	2308      	movs	r3, #8
   1f92a:	18fb      	adds	r3, r7, r3
   1f92c:	685a      	ldr	r2, [r3, #4]
   1f92e:	69fb      	ldr	r3, [r7, #28]
   1f930:	699b      	ldr	r3, [r3, #24]
   1f932:	18d1      	adds	r1, r2, r3
   1f934:	2308      	movs	r3, #8
   1f936:	18fb      	adds	r3, r7, r3
   1f938:	685b      	ldr	r3, [r3, #4]
   1f93a:	69ba      	ldr	r2, [r7, #24]
   1f93c:	69f8      	ldr	r0, [r7, #28]
   1f93e:	4c28      	ldr	r4, [pc, #160]	; (1f9e0 <prvProcessReceivedCommands+0x104>)
   1f940:	47a0      	blx	r4
   1f942:	1e03      	subs	r3, r0, #0
   1f944:	d037      	beq.n	1f9b6 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1f946:	69fb      	ldr	r3, [r7, #28]
   1f948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f94a:	69fa      	ldr	r2, [r7, #28]
   1f94c:	0010      	movs	r0, r2
   1f94e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1f950:	69fb      	ldr	r3, [r7, #28]
   1f952:	69db      	ldr	r3, [r3, #28]
   1f954:	2b01      	cmp	r3, #1
   1f956:	d12e      	bne.n	1f9b6 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1f958:	2308      	movs	r3, #8
   1f95a:	18fb      	adds	r3, r7, r3
   1f95c:	685a      	ldr	r2, [r3, #4]
   1f95e:	69fb      	ldr	r3, [r7, #28]
   1f960:	699b      	ldr	r3, [r3, #24]
   1f962:	18d2      	adds	r2, r2, r3
   1f964:	69f8      	ldr	r0, [r7, #28]
   1f966:	2300      	movs	r3, #0
   1f968:	9300      	str	r3, [sp, #0]
   1f96a:	2300      	movs	r3, #0
   1f96c:	2100      	movs	r1, #0
   1f96e:	4c1d      	ldr	r4, [pc, #116]	; (1f9e4 <prvProcessReceivedCommands+0x108>)
   1f970:	47a0      	blx	r4
   1f972:	0003      	movs	r3, r0
   1f974:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1f976:	697b      	ldr	r3, [r7, #20]
   1f978:	2b00      	cmp	r3, #0
   1f97a:	d11c      	bne.n	1f9b6 <prvProcessReceivedCommands+0xda>
   1f97c:	b672      	cpsid	i
   1f97e:	e7fe      	b.n	1f97e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1f980:	2308      	movs	r3, #8
   1f982:	18fb      	adds	r3, r7, r3
   1f984:	685a      	ldr	r2, [r3, #4]
   1f986:	69fb      	ldr	r3, [r7, #28]
   1f988:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1f98a:	69fb      	ldr	r3, [r7, #28]
   1f98c:	699b      	ldr	r3, [r3, #24]
   1f98e:	2b00      	cmp	r3, #0
   1f990:	d101      	bne.n	1f996 <prvProcessReceivedCommands+0xba>
   1f992:	b672      	cpsid	i
   1f994:	e7fe      	b.n	1f994 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1f996:	69fb      	ldr	r3, [r7, #28]
   1f998:	699a      	ldr	r2, [r3, #24]
   1f99a:	69bb      	ldr	r3, [r7, #24]
   1f99c:	18d1      	adds	r1, r2, r3
   1f99e:	69bb      	ldr	r3, [r7, #24]
   1f9a0:	69ba      	ldr	r2, [r7, #24]
   1f9a2:	69f8      	ldr	r0, [r7, #28]
   1f9a4:	4c0e      	ldr	r4, [pc, #56]	; (1f9e0 <prvProcessReceivedCommands+0x104>)
   1f9a6:	47a0      	blx	r4
					break;
   1f9a8:	e005      	b.n	1f9b6 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1f9aa:	69fb      	ldr	r3, [r7, #28]
   1f9ac:	0018      	movs	r0, r3
   1f9ae:	4b0e      	ldr	r3, [pc, #56]	; (1f9e8 <prvProcessReceivedCommands+0x10c>)
   1f9b0:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1f9b2:	e000      	b.n	1f9b6 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1f9b4:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1f9b6:	4b0d      	ldr	r3, [pc, #52]	; (1f9ec <prvProcessReceivedCommands+0x110>)
   1f9b8:	681b      	ldr	r3, [r3, #0]
   1f9ba:	2208      	movs	r2, #8
   1f9bc:	18b9      	adds	r1, r7, r2
   1f9be:	2200      	movs	r2, #0
   1f9c0:	0018      	movs	r0, r3
   1f9c2:	4b0b      	ldr	r3, [pc, #44]	; (1f9f0 <prvProcessReceivedCommands+0x114>)
   1f9c4:	4798      	blx	r3
   1f9c6:	1e03      	subs	r3, r0, #0
   1f9c8:	d18c      	bne.n	1f8e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1f9ca:	46c0      	nop			; (mov r8, r8)
   1f9cc:	46bd      	mov	sp, r7
   1f9ce:	b009      	add	sp, #36	; 0x24
   1f9d0:	bd90      	pop	{r4, r7, pc}
   1f9d2:	46c0      	nop			; (mov r8, r8)
   1f9d4:	0001c117 	.word	0x0001c117
   1f9d8:	0001f80d 	.word	0x0001f80d
   1f9dc:	0003a7dc 	.word	0x0003a7dc
   1f9e0:	0001f855 	.word	0x0001f855
   1f9e4:	0001f5c9 	.word	0x0001f5c9
   1f9e8:	0001c4a5 	.word	0x0001c4a5
   1f9ec:	20003e60 	.word	0x20003e60
   1f9f0:	0001d0f5 	.word	0x0001d0f5

0001f9f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1f9f4:	b590      	push	{r4, r7, lr}
   1f9f6:	b089      	sub	sp, #36	; 0x24
   1f9f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1f9fa:	e03e      	b.n	1fa7a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1f9fc:	4b28      	ldr	r3, [pc, #160]	; (1faa0 <prvSwitchTimerLists+0xac>)
   1f9fe:	681b      	ldr	r3, [r3, #0]
   1fa00:	68db      	ldr	r3, [r3, #12]
   1fa02:	681b      	ldr	r3, [r3, #0]
   1fa04:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1fa06:	4b26      	ldr	r3, [pc, #152]	; (1faa0 <prvSwitchTimerLists+0xac>)
   1fa08:	681b      	ldr	r3, [r3, #0]
   1fa0a:	68db      	ldr	r3, [r3, #12]
   1fa0c:	68db      	ldr	r3, [r3, #12]
   1fa0e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1fa10:	693b      	ldr	r3, [r7, #16]
   1fa12:	3304      	adds	r3, #4
   1fa14:	0018      	movs	r0, r3
   1fa16:	4b23      	ldr	r3, [pc, #140]	; (1faa4 <prvSwitchTimerLists+0xb0>)
   1fa18:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1fa1a:	693b      	ldr	r3, [r7, #16]
   1fa1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fa1e:	693a      	ldr	r2, [r7, #16]
   1fa20:	0010      	movs	r0, r2
   1fa22:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1fa24:	693b      	ldr	r3, [r7, #16]
   1fa26:	69db      	ldr	r3, [r3, #28]
   1fa28:	2b01      	cmp	r3, #1
   1fa2a:	d126      	bne.n	1fa7a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1fa2c:	693b      	ldr	r3, [r7, #16]
   1fa2e:	699a      	ldr	r2, [r3, #24]
   1fa30:	697b      	ldr	r3, [r7, #20]
   1fa32:	18d3      	adds	r3, r2, r3
   1fa34:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1fa36:	68fa      	ldr	r2, [r7, #12]
   1fa38:	697b      	ldr	r3, [r7, #20]
   1fa3a:	429a      	cmp	r2, r3
   1fa3c:	d90e      	bls.n	1fa5c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1fa3e:	693b      	ldr	r3, [r7, #16]
   1fa40:	68fa      	ldr	r2, [r7, #12]
   1fa42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1fa44:	693b      	ldr	r3, [r7, #16]
   1fa46:	693a      	ldr	r2, [r7, #16]
   1fa48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1fa4a:	4b15      	ldr	r3, [pc, #84]	; (1faa0 <prvSwitchTimerLists+0xac>)
   1fa4c:	681a      	ldr	r2, [r3, #0]
   1fa4e:	693b      	ldr	r3, [r7, #16]
   1fa50:	3304      	adds	r3, #4
   1fa52:	0019      	movs	r1, r3
   1fa54:	0010      	movs	r0, r2
   1fa56:	4b14      	ldr	r3, [pc, #80]	; (1faa8 <prvSwitchTimerLists+0xb4>)
   1fa58:	4798      	blx	r3
   1fa5a:	e00e      	b.n	1fa7a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1fa5c:	697a      	ldr	r2, [r7, #20]
   1fa5e:	6938      	ldr	r0, [r7, #16]
   1fa60:	2300      	movs	r3, #0
   1fa62:	9300      	str	r3, [sp, #0]
   1fa64:	2300      	movs	r3, #0
   1fa66:	2100      	movs	r1, #0
   1fa68:	4c10      	ldr	r4, [pc, #64]	; (1faac <prvSwitchTimerLists+0xb8>)
   1fa6a:	47a0      	blx	r4
   1fa6c:	0003      	movs	r3, r0
   1fa6e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1fa70:	68bb      	ldr	r3, [r7, #8]
   1fa72:	2b00      	cmp	r3, #0
   1fa74:	d101      	bne.n	1fa7a <prvSwitchTimerLists+0x86>
   1fa76:	b672      	cpsid	i
   1fa78:	e7fe      	b.n	1fa78 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1fa7a:	4b09      	ldr	r3, [pc, #36]	; (1faa0 <prvSwitchTimerLists+0xac>)
   1fa7c:	681b      	ldr	r3, [r3, #0]
   1fa7e:	681b      	ldr	r3, [r3, #0]
   1fa80:	2b00      	cmp	r3, #0
   1fa82:	d1bb      	bne.n	1f9fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1fa84:	4b06      	ldr	r3, [pc, #24]	; (1faa0 <prvSwitchTimerLists+0xac>)
   1fa86:	681b      	ldr	r3, [r3, #0]
   1fa88:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1fa8a:	4b09      	ldr	r3, [pc, #36]	; (1fab0 <prvSwitchTimerLists+0xbc>)
   1fa8c:	681a      	ldr	r2, [r3, #0]
   1fa8e:	4b04      	ldr	r3, [pc, #16]	; (1faa0 <prvSwitchTimerLists+0xac>)
   1fa90:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1fa92:	4b07      	ldr	r3, [pc, #28]	; (1fab0 <prvSwitchTimerLists+0xbc>)
   1fa94:	687a      	ldr	r2, [r7, #4]
   1fa96:	601a      	str	r2, [r3, #0]
}
   1fa98:	46c0      	nop			; (mov r8, r8)
   1fa9a:	46bd      	mov	sp, r7
   1fa9c:	b007      	add	sp, #28
   1fa9e:	bd90      	pop	{r4, r7, pc}
   1faa0:	20003e58 	.word	0x20003e58
   1faa4:	0001c117 	.word	0x0001c117
   1faa8:	0001c0ab 	.word	0x0001c0ab
   1faac:	0001f5c9 	.word	0x0001f5c9
   1fab0:	20003e5c 	.word	0x20003e5c

0001fab4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1fab4:	b580      	push	{r7, lr}
   1fab6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1fab8:	4b10      	ldr	r3, [pc, #64]	; (1fafc <prvCheckForValidListAndQueue+0x48>)
   1faba:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1fabc:	4b10      	ldr	r3, [pc, #64]	; (1fb00 <prvCheckForValidListAndQueue+0x4c>)
   1fabe:	681b      	ldr	r3, [r3, #0]
   1fac0:	2b00      	cmp	r3, #0
   1fac2:	d115      	bne.n	1faf0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1fac4:	4b0f      	ldr	r3, [pc, #60]	; (1fb04 <prvCheckForValidListAndQueue+0x50>)
   1fac6:	0018      	movs	r0, r3
   1fac8:	4b0f      	ldr	r3, [pc, #60]	; (1fb08 <prvCheckForValidListAndQueue+0x54>)
   1faca:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1facc:	4b0f      	ldr	r3, [pc, #60]	; (1fb0c <prvCheckForValidListAndQueue+0x58>)
   1face:	0018      	movs	r0, r3
   1fad0:	4b0d      	ldr	r3, [pc, #52]	; (1fb08 <prvCheckForValidListAndQueue+0x54>)
   1fad2:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1fad4:	4b0e      	ldr	r3, [pc, #56]	; (1fb10 <prvCheckForValidListAndQueue+0x5c>)
   1fad6:	4a0b      	ldr	r2, [pc, #44]	; (1fb04 <prvCheckForValidListAndQueue+0x50>)
   1fad8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1fada:	4b0e      	ldr	r3, [pc, #56]	; (1fb14 <prvCheckForValidListAndQueue+0x60>)
   1fadc:	4a0b      	ldr	r2, [pc, #44]	; (1fb0c <prvCheckForValidListAndQueue+0x58>)
   1fade:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1fae0:	2200      	movs	r2, #0
   1fae2:	210c      	movs	r1, #12
   1fae4:	2005      	movs	r0, #5
   1fae6:	4b0c      	ldr	r3, [pc, #48]	; (1fb18 <prvCheckForValidListAndQueue+0x64>)
   1fae8:	4798      	blx	r3
   1faea:	0002      	movs	r2, r0
   1faec:	4b04      	ldr	r3, [pc, #16]	; (1fb00 <prvCheckForValidListAndQueue+0x4c>)
   1faee:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1faf0:	4b0a      	ldr	r3, [pc, #40]	; (1fb1c <prvCheckForValidListAndQueue+0x68>)
   1faf2:	4798      	blx	r3
}
   1faf4:	46c0      	nop			; (mov r8, r8)
   1faf6:	46bd      	mov	sp, r7
   1faf8:	bd80      	pop	{r7, pc}
   1fafa:	46c0      	nop			; (mov r8, r8)
   1fafc:	0001c2a9 	.word	0x0001c2a9
   1fb00:	20003e60 	.word	0x20003e60
   1fb04:	20003e30 	.word	0x20003e30
   1fb08:	0001c015 	.word	0x0001c015
   1fb0c:	20003e44 	.word	0x20003e44
   1fb10:	20003e58 	.word	0x20003e58
   1fb14:	20003e5c 	.word	0x20003e5c
   1fb18:	0001c595 	.word	0x0001c595
   1fb1c:	0001c2cd 	.word	0x0001c2cd

0001fb20 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1fb20:	b580      	push	{r7, lr}
   1fb22:	b082      	sub	sp, #8
   1fb24:	af00      	add	r7, sp, #0
   1fb26:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1fb28:	687b      	ldr	r3, [r7, #4]
   1fb2a:	7c1b      	ldrb	r3, [r3, #16]
   1fb2c:	2b00      	cmp	r3, #0
   1fb2e:	d00b      	beq.n	1fb48 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1fb30:	687b      	ldr	r3, [r7, #4]
   1fb32:	689b      	ldr	r3, [r3, #8]
   1fb34:	1c5a      	adds	r2, r3, #1
   1fb36:	687b      	ldr	r3, [r7, #4]
   1fb38:	68d9      	ldr	r1, [r3, #12]
   1fb3a:	4b10      	ldr	r3, [pc, #64]	; (1fb7c <advance_pointer+0x5c>)
   1fb3c:	0010      	movs	r0, r2
   1fb3e:	4798      	blx	r3
   1fb40:	000b      	movs	r3, r1
   1fb42:	001a      	movs	r2, r3
   1fb44:	687b      	ldr	r3, [r7, #4]
   1fb46:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1fb48:	687b      	ldr	r3, [r7, #4]
   1fb4a:	685b      	ldr	r3, [r3, #4]
   1fb4c:	1c5a      	adds	r2, r3, #1
   1fb4e:	687b      	ldr	r3, [r7, #4]
   1fb50:	68d9      	ldr	r1, [r3, #12]
   1fb52:	4b0a      	ldr	r3, [pc, #40]	; (1fb7c <advance_pointer+0x5c>)
   1fb54:	0010      	movs	r0, r2
   1fb56:	4798      	blx	r3
   1fb58:	000b      	movs	r3, r1
   1fb5a:	001a      	movs	r2, r3
   1fb5c:	687b      	ldr	r3, [r7, #4]
   1fb5e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1fb60:	687b      	ldr	r3, [r7, #4]
   1fb62:	685a      	ldr	r2, [r3, #4]
   1fb64:	687b      	ldr	r3, [r7, #4]
   1fb66:	689b      	ldr	r3, [r3, #8]
   1fb68:	1ad3      	subs	r3, r2, r3
   1fb6a:	425a      	negs	r2, r3
   1fb6c:	4153      	adcs	r3, r2
   1fb6e:	b2da      	uxtb	r2, r3
   1fb70:	687b      	ldr	r3, [r7, #4]
   1fb72:	741a      	strb	r2, [r3, #16]
 }
   1fb74:	46c0      	nop			; (mov r8, r8)
   1fb76:	46bd      	mov	sp, r7
   1fb78:	b002      	add	sp, #8
   1fb7a:	bd80      	pop	{r7, pc}
   1fb7c:	00034865 	.word	0x00034865

0001fb80 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1fb80:	b580      	push	{r7, lr}
   1fb82:	b082      	sub	sp, #8
   1fb84:	af00      	add	r7, sp, #0
   1fb86:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1fb88:	687b      	ldr	r3, [r7, #4]
   1fb8a:	2200      	movs	r2, #0
   1fb8c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1fb8e:	687b      	ldr	r3, [r7, #4]
   1fb90:	689b      	ldr	r3, [r3, #8]
   1fb92:	1c5a      	adds	r2, r3, #1
   1fb94:	687b      	ldr	r3, [r7, #4]
   1fb96:	68d9      	ldr	r1, [r3, #12]
   1fb98:	4b05      	ldr	r3, [pc, #20]	; (1fbb0 <retreat_pointer+0x30>)
   1fb9a:	0010      	movs	r0, r2
   1fb9c:	4798      	blx	r3
   1fb9e:	000b      	movs	r3, r1
   1fba0:	001a      	movs	r2, r3
   1fba2:	687b      	ldr	r3, [r7, #4]
   1fba4:	609a      	str	r2, [r3, #8]
 }
   1fba6:	46c0      	nop			; (mov r8, r8)
   1fba8:	46bd      	mov	sp, r7
   1fbaa:	b002      	add	sp, #8
   1fbac:	bd80      	pop	{r7, pc}
   1fbae:	46c0      	nop			; (mov r8, r8)
   1fbb0:	00034865 	.word	0x00034865

0001fbb4 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1fbb4:	b580      	push	{r7, lr}
   1fbb6:	b084      	sub	sp, #16
   1fbb8:	af00      	add	r7, sp, #0
   1fbba:	6078      	str	r0, [r7, #4]
   1fbbc:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1fbbe:	2014      	movs	r0, #20
   1fbc0:	4b09      	ldr	r3, [pc, #36]	; (1fbe8 <circular_buf_init+0x34>)
   1fbc2:	4798      	blx	r3
   1fbc4:	0003      	movs	r3, r0
   1fbc6:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1fbc8:	68fb      	ldr	r3, [r7, #12]
   1fbca:	687a      	ldr	r2, [r7, #4]
   1fbcc:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1fbce:	68fb      	ldr	r3, [r7, #12]
   1fbd0:	683a      	ldr	r2, [r7, #0]
   1fbd2:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1fbd4:	68fb      	ldr	r3, [r7, #12]
   1fbd6:	0018      	movs	r0, r3
   1fbd8:	4b04      	ldr	r3, [pc, #16]	; (1fbec <circular_buf_init+0x38>)
   1fbda:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1fbdc:	68fb      	ldr	r3, [r7, #12]
 }
   1fbde:	0018      	movs	r0, r3
   1fbe0:	46bd      	mov	sp, r7
   1fbe2:	b004      	add	sp, #16
   1fbe4:	bd80      	pop	{r7, pc}
   1fbe6:	46c0      	nop			; (mov r8, r8)
   1fbe8:	00036c41 	.word	0x00036c41
   1fbec:	0001fbf1 	.word	0x0001fbf1

0001fbf0 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1fbf0:	b580      	push	{r7, lr}
   1fbf2:	b082      	sub	sp, #8
   1fbf4:	af00      	add	r7, sp, #0
   1fbf6:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1fbf8:	687b      	ldr	r3, [r7, #4]
   1fbfa:	2200      	movs	r2, #0
   1fbfc:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1fbfe:	687b      	ldr	r3, [r7, #4]
   1fc00:	2200      	movs	r2, #0
   1fc02:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1fc04:	687b      	ldr	r3, [r7, #4]
   1fc06:	2200      	movs	r2, #0
   1fc08:	741a      	strb	r2, [r3, #16]
 }
   1fc0a:	46c0      	nop			; (mov r8, r8)
   1fc0c:	46bd      	mov	sp, r7
   1fc0e:	b002      	add	sp, #8
   1fc10:	bd80      	pop	{r7, pc}
	...

0001fc14 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1fc14:	b580      	push	{r7, lr}
   1fc16:	b082      	sub	sp, #8
   1fc18:	af00      	add	r7, sp, #0
   1fc1a:	6078      	str	r0, [r7, #4]
   1fc1c:	000a      	movs	r2, r1
   1fc1e:	1cfb      	adds	r3, r7, #3
   1fc20:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1fc22:	687b      	ldr	r3, [r7, #4]
   1fc24:	681a      	ldr	r2, [r3, #0]
   1fc26:	687b      	ldr	r3, [r7, #4]
   1fc28:	685b      	ldr	r3, [r3, #4]
   1fc2a:	18d3      	adds	r3, r2, r3
   1fc2c:	1cfa      	adds	r2, r7, #3
   1fc2e:	7812      	ldrb	r2, [r2, #0]
   1fc30:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1fc32:	687b      	ldr	r3, [r7, #4]
   1fc34:	0018      	movs	r0, r3
   1fc36:	4b03      	ldr	r3, [pc, #12]	; (1fc44 <circular_buf_put+0x30>)
   1fc38:	4798      	blx	r3
 }
   1fc3a:	46c0      	nop			; (mov r8, r8)
   1fc3c:	46bd      	mov	sp, r7
   1fc3e:	b002      	add	sp, #8
   1fc40:	bd80      	pop	{r7, pc}
   1fc42:	46c0      	nop			; (mov r8, r8)
   1fc44:	0001fb21 	.word	0x0001fb21

0001fc48 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1fc48:	b580      	push	{r7, lr}
   1fc4a:	b084      	sub	sp, #16
   1fc4c:	af00      	add	r7, sp, #0
   1fc4e:	6078      	str	r0, [r7, #4]
   1fc50:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1fc52:	2301      	movs	r3, #1
   1fc54:	425b      	negs	r3, r3
   1fc56:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1fc58:	687b      	ldr	r3, [r7, #4]
   1fc5a:	0018      	movs	r0, r3
   1fc5c:	4b0d      	ldr	r3, [pc, #52]	; (1fc94 <circular_buf_get+0x4c>)
   1fc5e:	4798      	blx	r3
   1fc60:	0003      	movs	r3, r0
   1fc62:	001a      	movs	r2, r3
   1fc64:	2301      	movs	r3, #1
   1fc66:	4053      	eors	r3, r2
   1fc68:	b2db      	uxtb	r3, r3
   1fc6a:	2b00      	cmp	r3, #0
   1fc6c:	d00d      	beq.n	1fc8a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1fc6e:	687b      	ldr	r3, [r7, #4]
   1fc70:	681a      	ldr	r2, [r3, #0]
   1fc72:	687b      	ldr	r3, [r7, #4]
   1fc74:	689b      	ldr	r3, [r3, #8]
   1fc76:	18d3      	adds	r3, r2, r3
   1fc78:	781a      	ldrb	r2, [r3, #0]
   1fc7a:	683b      	ldr	r3, [r7, #0]
   1fc7c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1fc7e:	687b      	ldr	r3, [r7, #4]
   1fc80:	0018      	movs	r0, r3
   1fc82:	4b05      	ldr	r3, [pc, #20]	; (1fc98 <circular_buf_get+0x50>)
   1fc84:	4798      	blx	r3

		 r = 0;
   1fc86:	2300      	movs	r3, #0
   1fc88:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1fc8a:	68fb      	ldr	r3, [r7, #12]
 }
   1fc8c:	0018      	movs	r0, r3
   1fc8e:	46bd      	mov	sp, r7
   1fc90:	b004      	add	sp, #16
   1fc92:	bd80      	pop	{r7, pc}
   1fc94:	0001fc9d 	.word	0x0001fc9d
   1fc98:	0001fb81 	.word	0x0001fb81

0001fc9c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1fc9c:	b580      	push	{r7, lr}
   1fc9e:	b082      	sub	sp, #8
   1fca0:	af00      	add	r7, sp, #0
   1fca2:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1fca4:	687b      	ldr	r3, [r7, #4]
   1fca6:	7c1b      	ldrb	r3, [r3, #16]
   1fca8:	2201      	movs	r2, #1
   1fcaa:	4053      	eors	r3, r2
   1fcac:	b2db      	uxtb	r3, r3
   1fcae:	2b00      	cmp	r3, #0
   1fcb0:	d007      	beq.n	1fcc2 <circular_buf_empty+0x26>
   1fcb2:	687b      	ldr	r3, [r7, #4]
   1fcb4:	685a      	ldr	r2, [r3, #4]
   1fcb6:	687b      	ldr	r3, [r7, #4]
   1fcb8:	689b      	ldr	r3, [r3, #8]
   1fcba:	429a      	cmp	r2, r3
   1fcbc:	d101      	bne.n	1fcc2 <circular_buf_empty+0x26>
   1fcbe:	2301      	movs	r3, #1
   1fcc0:	e000      	b.n	1fcc4 <circular_buf_empty+0x28>
   1fcc2:	2300      	movs	r3, #0
   1fcc4:	1c1a      	adds	r2, r3, #0
   1fcc6:	2301      	movs	r3, #1
   1fcc8:	4013      	ands	r3, r2
   1fcca:	b2db      	uxtb	r3, r3
 }
   1fccc:	0018      	movs	r0, r3
   1fcce:	46bd      	mov	sp, r7
   1fcd0:	b002      	add	sp, #8
   1fcd2:	bd80      	pop	{r7, pc}

0001fcd4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   1fcd4:	b580      	push	{r7, lr}
   1fcd6:	b082      	sub	sp, #8
   1fcd8:	af00      	add	r7, sp, #0
   1fcda:	0002      	movs	r2, r0
   1fcdc:	1dfb      	adds	r3, r7, #7
   1fcde:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1fce0:	4b06      	ldr	r3, [pc, #24]	; (1fcfc <system_interrupt_enable+0x28>)
   1fce2:	1dfa      	adds	r2, r7, #7
   1fce4:	7812      	ldrb	r2, [r2, #0]
   1fce6:	0011      	movs	r1, r2
   1fce8:	221f      	movs	r2, #31
   1fcea:	400a      	ands	r2, r1
   1fcec:	2101      	movs	r1, #1
   1fcee:	4091      	lsls	r1, r2
   1fcf0:	000a      	movs	r2, r1
   1fcf2:	601a      	str	r2, [r3, #0]
}
   1fcf4:	46c0      	nop			; (mov r8, r8)
   1fcf6:	46bd      	mov	sp, r7
   1fcf8:	b002      	add	sp, #8
   1fcfa:	bd80      	pop	{r7, pc}
   1fcfc:	e000e100 	.word	0xe000e100

0001fd00 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1fd00:	b580      	push	{r7, lr}
   1fd02:	b084      	sub	sp, #16
   1fd04:	af00      	add	r7, sp, #0
   1fd06:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1fd08:	687b      	ldr	r3, [r7, #4]
   1fd0a:	681b      	ldr	r3, [r3, #0]
   1fd0c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1fd0e:	68fb      	ldr	r3, [r7, #12]
   1fd10:	69db      	ldr	r3, [r3, #28]
   1fd12:	1e5a      	subs	r2, r3, #1
   1fd14:	4193      	sbcs	r3, r2
   1fd16:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1fd18:	0018      	movs	r0, r3
   1fd1a:	46bd      	mov	sp, r7
   1fd1c:	b004      	add	sp, #16
   1fd1e:	bd80      	pop	{r7, pc}

0001fd20 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1fd20:	b580      	push	{r7, lr}
   1fd22:	b082      	sub	sp, #8
   1fd24:	af00      	add	r7, sp, #0
   1fd26:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1fd28:	46c0      	nop			; (mov r8, r8)
   1fd2a:	687b      	ldr	r3, [r7, #4]
   1fd2c:	0018      	movs	r0, r3
   1fd2e:	4b04      	ldr	r3, [pc, #16]	; (1fd40 <_usart_wait_for_sync+0x20>)
   1fd30:	4798      	blx	r3
   1fd32:	1e03      	subs	r3, r0, #0
   1fd34:	d1f9      	bne.n	1fd2a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1fd36:	46c0      	nop			; (mov r8, r8)
   1fd38:	46bd      	mov	sp, r7
   1fd3a:	b002      	add	sp, #8
   1fd3c:	bd80      	pop	{r7, pc}
   1fd3e:	46c0      	nop			; (mov r8, r8)
   1fd40:	0001fd01 	.word	0x0001fd01

0001fd44 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1fd44:	b580      	push	{r7, lr}
   1fd46:	b082      	sub	sp, #8
   1fd48:	af00      	add	r7, sp, #0
   1fd4a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1fd4c:	687b      	ldr	r3, [r7, #4]
   1fd4e:	2280      	movs	r2, #128	; 0x80
   1fd50:	05d2      	lsls	r2, r2, #23
   1fd52:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1fd54:	687b      	ldr	r3, [r7, #4]
   1fd56:	2200      	movs	r2, #0
   1fd58:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1fd5a:	687b      	ldr	r3, [r7, #4]
   1fd5c:	22ff      	movs	r2, #255	; 0xff
   1fd5e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1fd60:	687b      	ldr	r3, [r7, #4]
   1fd62:	2200      	movs	r2, #0
   1fd64:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1fd66:	687b      	ldr	r3, [r7, #4]
   1fd68:	2200      	movs	r2, #0
   1fd6a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1fd6c:	687b      	ldr	r3, [r7, #4]
   1fd6e:	2296      	movs	r2, #150	; 0x96
   1fd70:	0192      	lsls	r2, r2, #6
   1fd72:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1fd74:	687b      	ldr	r3, [r7, #4]
   1fd76:	2224      	movs	r2, #36	; 0x24
   1fd78:	2101      	movs	r1, #1
   1fd7a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1fd7c:	687b      	ldr	r3, [r7, #4]
   1fd7e:	2225      	movs	r2, #37	; 0x25
   1fd80:	2101      	movs	r1, #1
   1fd82:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1fd84:	687b      	ldr	r3, [r7, #4]
   1fd86:	2226      	movs	r2, #38	; 0x26
   1fd88:	2100      	movs	r1, #0
   1fd8a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1fd8c:	687b      	ldr	r3, [r7, #4]
   1fd8e:	2227      	movs	r2, #39	; 0x27
   1fd90:	2100      	movs	r1, #0
   1fd92:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1fd94:	687b      	ldr	r3, [r7, #4]
   1fd96:	2200      	movs	r2, #0
   1fd98:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1fd9a:	687b      	ldr	r3, [r7, #4]
   1fd9c:	2288      	movs	r2, #136	; 0x88
   1fd9e:	0352      	lsls	r2, r2, #13
   1fda0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1fda2:	687b      	ldr	r3, [r7, #4]
   1fda4:	222c      	movs	r2, #44	; 0x2c
   1fda6:	2100      	movs	r1, #0
   1fda8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1fdaa:	687b      	ldr	r3, [r7, #4]
   1fdac:	222d      	movs	r2, #45	; 0x2d
   1fdae:	2100      	movs	r1, #0
   1fdb0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1fdb2:	687b      	ldr	r3, [r7, #4]
   1fdb4:	2200      	movs	r2, #0
   1fdb6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1fdb8:	687b      	ldr	r3, [r7, #4]
   1fdba:	2200      	movs	r2, #0
   1fdbc:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1fdbe:	687b      	ldr	r3, [r7, #4]
   1fdc0:	2200      	movs	r2, #0
   1fdc2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1fdc4:	687b      	ldr	r3, [r7, #4]
   1fdc6:	2200      	movs	r2, #0
   1fdc8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1fdca:	687b      	ldr	r3, [r7, #4]
   1fdcc:	2200      	movs	r2, #0
   1fdce:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1fdd0:	687b      	ldr	r3, [r7, #4]
   1fdd2:	2200      	movs	r2, #0
   1fdd4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1fdd6:	687b      	ldr	r3, [r7, #4]
   1fdd8:	2200      	movs	r2, #0
   1fdda:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1fddc:	687b      	ldr	r3, [r7, #4]
   1fdde:	2200      	movs	r2, #0
   1fde0:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1fde2:	687b      	ldr	r3, [r7, #4]
   1fde4:	2200      	movs	r2, #0
   1fde6:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1fde8:	687b      	ldr	r3, [r7, #4]
   1fdea:	2200      	movs	r2, #0
   1fdec:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1fdee:	687b      	ldr	r3, [r7, #4]
   1fdf0:	2213      	movs	r2, #19
   1fdf2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1fdf4:	687b      	ldr	r3, [r7, #4]
   1fdf6:	2200      	movs	r2, #0
   1fdf8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1fdfa:	46c0      	nop			; (mov r8, r8)
   1fdfc:	46bd      	mov	sp, r7
   1fdfe:	b002      	add	sp, #8
   1fe00:	bd80      	pop	{r7, pc}
	...

0001fe04 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1fe04:	b580      	push	{r7, lr}
   1fe06:	b084      	sub	sp, #16
   1fe08:	af00      	add	r7, sp, #0
   1fe0a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1fe0c:	687b      	ldr	r3, [r7, #4]
   1fe0e:	681b      	ldr	r3, [r3, #0]
   1fe10:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1fe12:	687b      	ldr	r3, [r7, #4]
   1fe14:	681b      	ldr	r3, [r3, #0]
   1fe16:	0018      	movs	r0, r3
   1fe18:	4b09      	ldr	r3, [pc, #36]	; (1fe40 <usart_enable+0x3c>)
   1fe1a:	4798      	blx	r3
   1fe1c:	0003      	movs	r3, r0
   1fe1e:	0018      	movs	r0, r3
   1fe20:	4b08      	ldr	r3, [pc, #32]	; (1fe44 <usart_enable+0x40>)
   1fe22:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1fe24:	687b      	ldr	r3, [r7, #4]
   1fe26:	0018      	movs	r0, r3
   1fe28:	4b07      	ldr	r3, [pc, #28]	; (1fe48 <usart_enable+0x44>)
   1fe2a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1fe2c:	68fb      	ldr	r3, [r7, #12]
   1fe2e:	681b      	ldr	r3, [r3, #0]
   1fe30:	2202      	movs	r2, #2
   1fe32:	431a      	orrs	r2, r3
   1fe34:	68fb      	ldr	r3, [r7, #12]
   1fe36:	601a      	str	r2, [r3, #0]
}
   1fe38:	46c0      	nop			; (mov r8, r8)
   1fe3a:	46bd      	mov	sp, r7
   1fe3c:	b004      	add	sp, #16
   1fe3e:	bd80      	pop	{r7, pc}
   1fe40:	00029421 	.word	0x00029421
   1fe44:	0001fcd5 	.word	0x0001fcd5
   1fe48:	0001fd21 	.word	0x0001fd21

0001fe4c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1fe4c:	b580      	push	{r7, lr}
   1fe4e:	b082      	sub	sp, #8
   1fe50:	af00      	add	r7, sp, #0
   1fe52:	6078      	str	r0, [r7, #4]
   1fe54:	000a      	movs	r2, r1
   1fe56:	1cfb      	adds	r3, r7, #3
   1fe58:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1fe5a:	687b      	ldr	r3, [r7, #4]
   1fe5c:	2231      	movs	r2, #49	; 0x31
   1fe5e:	5c9b      	ldrb	r3, [r3, r2]
   1fe60:	b25a      	sxtb	r2, r3
   1fe62:	1cfb      	adds	r3, r7, #3
   1fe64:	781b      	ldrb	r3, [r3, #0]
   1fe66:	2101      	movs	r1, #1
   1fe68:	4099      	lsls	r1, r3
   1fe6a:	000b      	movs	r3, r1
   1fe6c:	b25b      	sxtb	r3, r3
   1fe6e:	4313      	orrs	r3, r2
   1fe70:	b25b      	sxtb	r3, r3
   1fe72:	b2d9      	uxtb	r1, r3
   1fe74:	687b      	ldr	r3, [r7, #4]
   1fe76:	2231      	movs	r2, #49	; 0x31
   1fe78:	5499      	strb	r1, [r3, r2]

}
   1fe7a:	46c0      	nop			; (mov r8, r8)
   1fe7c:	46bd      	mov	sp, r7
   1fe7e:	b002      	add	sp, #8
   1fe80:	bd80      	pop	{r7, pc}
	...

0001fe84 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1fe84:	b580      	push	{r7, lr}
   1fe86:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1fe88:	2380      	movs	r3, #128	; 0x80
   1fe8a:	009a      	lsls	r2, r3, #2
   1fe8c:	4b0f      	ldr	r3, [pc, #60]	; (1fecc <InitializeSerialConsole+0x48>)
   1fe8e:	0011      	movs	r1, r2
   1fe90:	0018      	movs	r0, r3
   1fe92:	4b0f      	ldr	r3, [pc, #60]	; (1fed0 <InitializeSerialConsole+0x4c>)
   1fe94:	4798      	blx	r3
   1fe96:	0002      	movs	r2, r0
   1fe98:	4b0e      	ldr	r3, [pc, #56]	; (1fed4 <InitializeSerialConsole+0x50>)
   1fe9a:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1fe9c:	2380      	movs	r3, #128	; 0x80
   1fe9e:	009a      	lsls	r2, r3, #2
   1fea0:	4b0d      	ldr	r3, [pc, #52]	; (1fed8 <InitializeSerialConsole+0x54>)
   1fea2:	0011      	movs	r1, r2
   1fea4:	0018      	movs	r0, r3
   1fea6:	4b0a      	ldr	r3, [pc, #40]	; (1fed0 <InitializeSerialConsole+0x4c>)
   1fea8:	4798      	blx	r3
   1feaa:	0002      	movs	r2, r0
   1feac:	4b0b      	ldr	r3, [pc, #44]	; (1fedc <InitializeSerialConsole+0x58>)
   1feae:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1feb0:	4b0b      	ldr	r3, [pc, #44]	; (1fee0 <InitializeSerialConsole+0x5c>)
   1feb2:	4798      	blx	r3
    configure_usart_callbacks();
   1feb4:	4b0b      	ldr	r3, [pc, #44]	; (1fee4 <InitializeSerialConsole+0x60>)
   1feb6:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1feb8:	490b      	ldr	r1, [pc, #44]	; (1fee8 <InitializeSerialConsole+0x64>)
   1feba:	4b0c      	ldr	r3, [pc, #48]	; (1feec <InitializeSerialConsole+0x68>)
   1febc:	2201      	movs	r2, #1
   1febe:	0018      	movs	r0, r3
   1fec0:	4b0b      	ldr	r3, [pc, #44]	; (1fef0 <InitializeSerialConsole+0x6c>)
   1fec2:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1fec4:	46c0      	nop			; (mov r8, r8)
   1fec6:	46bd      	mov	sp, r7
   1fec8:	bd80      	pop	{r7, pc}
   1feca:	46c0      	nop			; (mov r8, r8)
   1fecc:	200054e8 	.word	0x200054e8
   1fed0:	0001fbb5 	.word	0x0001fbb5
   1fed4:	200052e0 	.word	0x200052e0
   1fed8:	200052e8 	.word	0x200052e8
   1fedc:	200056ec 	.word	0x200056ec
   1fee0:	00020059 	.word	0x00020059
   1fee4:	000200d1 	.word	0x000200d1
   1fee8:	200052e4 	.word	0x200052e4
   1feec:	200052ac 	.word	0x200052ac
   1fef0:	0002ad25 	.word	0x0002ad25

0001fef4 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1fef4:	b580      	push	{r7, lr}
   1fef6:	b084      	sub	sp, #16
   1fef8:	af00      	add	r7, sp, #0
   1fefa:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1fefc:	4b1a      	ldr	r3, [pc, #104]	; (1ff68 <SerialConsoleWriteString+0x74>)
   1fefe:	4798      	blx	r3
    if (string != NULL) {
   1ff00:	687b      	ldr	r3, [r7, #4]
   1ff02:	2b00      	cmp	r3, #0
   1ff04:	d02a      	beq.n	1ff5c <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1ff06:	2300      	movs	r3, #0
   1ff08:	60fb      	str	r3, [r7, #12]
   1ff0a:	e00b      	b.n	1ff24 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1ff0c:	4b17      	ldr	r3, [pc, #92]	; (1ff6c <SerialConsoleWriteString+0x78>)
   1ff0e:	6818      	ldr	r0, [r3, #0]
   1ff10:	687a      	ldr	r2, [r7, #4]
   1ff12:	68fb      	ldr	r3, [r7, #12]
   1ff14:	18d3      	adds	r3, r2, r3
   1ff16:	781b      	ldrb	r3, [r3, #0]
   1ff18:	0019      	movs	r1, r3
   1ff1a:	4b15      	ldr	r3, [pc, #84]	; (1ff70 <SerialConsoleWriteString+0x7c>)
   1ff1c:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1ff1e:	68fb      	ldr	r3, [r7, #12]
   1ff20:	3301      	adds	r3, #1
   1ff22:	60fb      	str	r3, [r7, #12]
   1ff24:	687b      	ldr	r3, [r7, #4]
   1ff26:	0018      	movs	r0, r3
   1ff28:	4b12      	ldr	r3, [pc, #72]	; (1ff74 <SerialConsoleWriteString+0x80>)
   1ff2a:	4798      	blx	r3
   1ff2c:	0002      	movs	r2, r0
   1ff2e:	68fb      	ldr	r3, [r7, #12]
   1ff30:	429a      	cmp	r2, r3
   1ff32:	d8eb      	bhi.n	1ff0c <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1ff34:	4b10      	ldr	r3, [pc, #64]	; (1ff78 <SerialConsoleWriteString+0x84>)
   1ff36:	2101      	movs	r1, #1
   1ff38:	0018      	movs	r0, r3
   1ff3a:	4b10      	ldr	r3, [pc, #64]	; (1ff7c <SerialConsoleWriteString+0x88>)
   1ff3c:	4798      	blx	r3
   1ff3e:	1e03      	subs	r3, r0, #0
   1ff40:	d10c      	bne.n	1ff5c <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1ff42:	4b0a      	ldr	r3, [pc, #40]	; (1ff6c <SerialConsoleWriteString+0x78>)
   1ff44:	681b      	ldr	r3, [r3, #0]
   1ff46:	4a0e      	ldr	r2, [pc, #56]	; (1ff80 <SerialConsoleWriteString+0x8c>)
   1ff48:	0011      	movs	r1, r2
   1ff4a:	0018      	movs	r0, r3
   1ff4c:	4b0d      	ldr	r3, [pc, #52]	; (1ff84 <SerialConsoleWriteString+0x90>)
   1ff4e:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1ff50:	490b      	ldr	r1, [pc, #44]	; (1ff80 <SerialConsoleWriteString+0x8c>)
   1ff52:	4b09      	ldr	r3, [pc, #36]	; (1ff78 <SerialConsoleWriteString+0x84>)
   1ff54:	2201      	movs	r2, #1
   1ff56:	0018      	movs	r0, r3
   1ff58:	4b0b      	ldr	r3, [pc, #44]	; (1ff88 <SerialConsoleWriteString+0x94>)
   1ff5a:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1ff5c:	4b0b      	ldr	r3, [pc, #44]	; (1ff8c <SerialConsoleWriteString+0x98>)
   1ff5e:	4798      	blx	r3
}
   1ff60:	46c0      	nop			; (mov r8, r8)
   1ff62:	46bd      	mov	sp, r7
   1ff64:	b004      	add	sp, #16
   1ff66:	bd80      	pop	{r7, pc}
   1ff68:	0001e561 	.word	0x0001e561
   1ff6c:	200056ec 	.word	0x200056ec
   1ff70:	0001fc15 	.word	0x0001fc15
   1ff74:	00037057 	.word	0x00037057
   1ff78:	200052ac 	.word	0x200052ac
   1ff7c:	0002ad6d 	.word	0x0002ad6d
   1ff80:	200056e8 	.word	0x200056e8
   1ff84:	0001fc49 	.word	0x0001fc49
   1ff88:	0002acdd 	.word	0x0002acdd
   1ff8c:	0001e579 	.word	0x0001e579

0001ff90 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1ff90:	b580      	push	{r7, lr}
   1ff92:	b084      	sub	sp, #16
   1ff94:	af00      	add	r7, sp, #0
   1ff96:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1ff98:	4b08      	ldr	r3, [pc, #32]	; (1ffbc <SerialConsoleReadCharacter+0x2c>)
   1ff9a:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1ff9c:	4b08      	ldr	r3, [pc, #32]	; (1ffc0 <SerialConsoleReadCharacter+0x30>)
   1ff9e:	681b      	ldr	r3, [r3, #0]
   1ffa0:	687a      	ldr	r2, [r7, #4]
   1ffa2:	0011      	movs	r1, r2
   1ffa4:	0018      	movs	r0, r3
   1ffa6:	4b07      	ldr	r3, [pc, #28]	; (1ffc4 <SerialConsoleReadCharacter+0x34>)
   1ffa8:	4798      	blx	r3
   1ffaa:	0003      	movs	r3, r0
   1ffac:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1ffae:	4b06      	ldr	r3, [pc, #24]	; (1ffc8 <SerialConsoleReadCharacter+0x38>)
   1ffb0:	4798      	blx	r3
    return a;
   1ffb2:	68fb      	ldr	r3, [r7, #12]
}
   1ffb4:	0018      	movs	r0, r3
   1ffb6:	46bd      	mov	sp, r7
   1ffb8:	b004      	add	sp, #16
   1ffba:	bd80      	pop	{r7, pc}
   1ffbc:	0001e561 	.word	0x0001e561
   1ffc0:	200052e0 	.word	0x200052e0
   1ffc4:	0001fc49 	.word	0x0001fc49
   1ffc8:	0001e579 	.word	0x0001e579

0001ffcc <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1ffcc:	b580      	push	{r7, lr}
   1ffce:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1ffd0:	4b02      	ldr	r3, [pc, #8]	; (1ffdc <getLogLevel+0x10>)
   1ffd2:	781b      	ldrb	r3, [r3, #0]
}
   1ffd4:	0018      	movs	r0, r3
   1ffd6:	46bd      	mov	sp, r7
   1ffd8:	bd80      	pop	{r7, pc}
   1ffda:	46c0      	nop			; (mov r8, r8)
   1ffdc:	20003e6c 	.word	0x20003e6c

0001ffe0 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1ffe0:	b40e      	push	{r1, r2, r3}
   1ffe2:	b590      	push	{r4, r7, lr}
   1ffe4:	b084      	sub	sp, #16
   1ffe6:	af00      	add	r7, sp, #0
   1ffe8:	0002      	movs	r2, r0
   1ffea:	1dfb      	adds	r3, r7, #7
   1ffec:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1ffee:	4b0e      	ldr	r3, [pc, #56]	; (20028 <LogMessage+0x48>)
   1fff0:	4798      	blx	r3
   1fff2:	0003      	movs	r3, r0
   1fff4:	001a      	movs	r2, r3
   1fff6:	1dfb      	adds	r3, r7, #7
   1fff8:	781b      	ldrb	r3, [r3, #0]
   1fffa:	4293      	cmp	r3, r2
   1fffc:	d30c      	bcc.n	20018 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1fffe:	2320      	movs	r3, #32
   20000:	18fb      	adds	r3, r7, r3
   20002:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   20004:	68fb      	ldr	r3, [r7, #12]
   20006:	69fa      	ldr	r2, [r7, #28]
   20008:	4808      	ldr	r0, [pc, #32]	; (2002c <LogMessage+0x4c>)
   2000a:	217f      	movs	r1, #127	; 0x7f
   2000c:	4c08      	ldr	r4, [pc, #32]	; (20030 <LogMessage+0x50>)
   2000e:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   20010:	4b06      	ldr	r3, [pc, #24]	; (2002c <LogMessage+0x4c>)
   20012:	0018      	movs	r0, r3
   20014:	4b07      	ldr	r3, [pc, #28]	; (20034 <LogMessage+0x54>)
   20016:	4798      	blx	r3
        va_end(ap);
    }
};
   20018:	46c0      	nop			; (mov r8, r8)
   2001a:	46bd      	mov	sp, r7
   2001c:	b004      	add	sp, #16
   2001e:	bc90      	pop	{r4, r7}
   20020:	bc08      	pop	{r3}
   20022:	b003      	add	sp, #12
   20024:	4718      	bx	r3
   20026:	46c0      	nop			; (mov r8, r8)
   20028:	0001ffcd 	.word	0x0001ffcd
   2002c:	2000522c 	.word	0x2000522c
   20030:	00037291 	.word	0x00037291
   20034:	0001fef5 	.word	0x0001fef5

00020038 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   20038:	b40f      	push	{r0, r1, r2, r3}
   2003a:	b580      	push	{r7, lr}
   2003c:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   2003e:	68bb      	ldr	r3, [r7, #8]
   20040:	0019      	movs	r1, r3
   20042:	2001      	movs	r0, #1
   20044:	4b03      	ldr	r3, [pc, #12]	; (20054 <LogMessageDebug+0x1c>)
   20046:	4798      	blx	r3
};
   20048:	46c0      	nop			; (mov r8, r8)
   2004a:	46bd      	mov	sp, r7
   2004c:	bc80      	pop	{r7}
   2004e:	bc08      	pop	{r3}
   20050:	b004      	add	sp, #16
   20052:	4718      	bx	r3
   20054:	0001ffe1 	.word	0x0001ffe1

00020058 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   20058:	b580      	push	{r7, lr}
   2005a:	b090      	sub	sp, #64	; 0x40
   2005c:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   2005e:	003b      	movs	r3, r7
   20060:	0018      	movs	r0, r3
   20062:	4b14      	ldr	r3, [pc, #80]	; (200b4 <configure_usart+0x5c>)
   20064:	4798      	blx	r3

    config_usart.baudrate = 115200;
   20066:	003b      	movs	r3, r7
   20068:	22e1      	movs	r2, #225	; 0xe1
   2006a:	0252      	lsls	r2, r2, #9
   2006c:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   2006e:	003b      	movs	r3, r7
   20070:	22c4      	movs	r2, #196	; 0xc4
   20072:	0392      	lsls	r2, r2, #14
   20074:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   20076:	003b      	movs	r3, r7
   20078:	2201      	movs	r2, #1
   2007a:	4252      	negs	r2, r2
   2007c:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   2007e:	003b      	movs	r3, r7
   20080:	2201      	movs	r2, #1
   20082:	4252      	negs	r2, r2
   20084:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   20086:	003b      	movs	r3, r7
   20088:	4a0b      	ldr	r2, [pc, #44]	; (200b8 <configure_usart+0x60>)
   2008a:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   2008c:	003b      	movs	r3, r7
   2008e:	4a0b      	ldr	r2, [pc, #44]	; (200bc <configure_usart+0x64>)
   20090:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   20092:	46c0      	nop			; (mov r8, r8)
   20094:	003a      	movs	r2, r7
   20096:	490a      	ldr	r1, [pc, #40]	; (200c0 <configure_usart+0x68>)
   20098:	4b0a      	ldr	r3, [pc, #40]	; (200c4 <configure_usart+0x6c>)
   2009a:	0018      	movs	r0, r3
   2009c:	4b0a      	ldr	r3, [pc, #40]	; (200c8 <configure_usart+0x70>)
   2009e:	4798      	blx	r3
   200a0:	1e03      	subs	r3, r0, #0
   200a2:	d1f7      	bne.n	20094 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   200a4:	4b07      	ldr	r3, [pc, #28]	; (200c4 <configure_usart+0x6c>)
   200a6:	0018      	movs	r0, r3
   200a8:	4b08      	ldr	r3, [pc, #32]	; (200cc <configure_usart+0x74>)
   200aa:	4798      	blx	r3
}
   200ac:	46c0      	nop			; (mov r8, r8)
   200ae:	46bd      	mov	sp, r7
   200b0:	b010      	add	sp, #64	; 0x40
   200b2:	bd80      	pop	{r7, pc}
   200b4:	0001fd45 	.word	0x0001fd45
   200b8:	002a0003 	.word	0x002a0003
   200bc:	002b0003 	.word	0x002b0003
   200c0:	42001800 	.word	0x42001800
   200c4:	200052ac 	.word	0x200052ac
   200c8:	0002a8e1 	.word	0x0002a8e1
   200cc:	0001fe05 	.word	0x0001fe05

000200d0 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   200d0:	b580      	push	{r7, lr}
   200d2:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   200d4:	490c      	ldr	r1, [pc, #48]	; (20108 <configure_usart_callbacks+0x38>)
   200d6:	4b0d      	ldr	r3, [pc, #52]	; (2010c <configure_usart_callbacks+0x3c>)
   200d8:	2200      	movs	r2, #0
   200da:	0018      	movs	r0, r3
   200dc:	4b0c      	ldr	r3, [pc, #48]	; (20110 <configure_usart_callbacks+0x40>)
   200de:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   200e0:	490c      	ldr	r1, [pc, #48]	; (20114 <configure_usart_callbacks+0x44>)
   200e2:	4b0a      	ldr	r3, [pc, #40]	; (2010c <configure_usart_callbacks+0x3c>)
   200e4:	2201      	movs	r2, #1
   200e6:	0018      	movs	r0, r3
   200e8:	4b09      	ldr	r3, [pc, #36]	; (20110 <configure_usart_callbacks+0x40>)
   200ea:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   200ec:	4b07      	ldr	r3, [pc, #28]	; (2010c <configure_usart_callbacks+0x3c>)
   200ee:	2100      	movs	r1, #0
   200f0:	0018      	movs	r0, r3
   200f2:	4b09      	ldr	r3, [pc, #36]	; (20118 <configure_usart_callbacks+0x48>)
   200f4:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   200f6:	4b05      	ldr	r3, [pc, #20]	; (2010c <configure_usart_callbacks+0x3c>)
   200f8:	2101      	movs	r1, #1
   200fa:	0018      	movs	r0, r3
   200fc:	4b06      	ldr	r3, [pc, #24]	; (20118 <configure_usart_callbacks+0x48>)
   200fe:	4798      	blx	r3
}
   20100:	46c0      	nop			; (mov r8, r8)
   20102:	46bd      	mov	sp, r7
   20104:	bd80      	pop	{r7, pc}
   20106:	46c0      	nop			; (mov r8, r8)
   20108:	00020165 	.word	0x00020165
   2010c:	200052ac 	.word	0x200052ac
   20110:	0002ac95 	.word	0x0002ac95
   20114:	0002011d 	.word	0x0002011d
   20118:	0001fe4d 	.word	0x0001fe4d

0002011c <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   2011c:	b580      	push	{r7, lr}
   2011e:	b082      	sub	sp, #8
   20120:	af00      	add	r7, sp, #0
   20122:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   20124:	4b09      	ldr	r3, [pc, #36]	; (2014c <usart_read_callback+0x30>)
   20126:	681a      	ldr	r2, [r3, #0]
   20128:	4b09      	ldr	r3, [pc, #36]	; (20150 <usart_read_callback+0x34>)
   2012a:	781b      	ldrb	r3, [r3, #0]
   2012c:	0019      	movs	r1, r3
   2012e:	0010      	movs	r0, r2
   20130:	4b08      	ldr	r3, [pc, #32]	; (20154 <usart_read_callback+0x38>)
   20132:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   20134:	4906      	ldr	r1, [pc, #24]	; (20150 <usart_read_callback+0x34>)
   20136:	4b08      	ldr	r3, [pc, #32]	; (20158 <usart_read_callback+0x3c>)
   20138:	2201      	movs	r2, #1
   2013a:	0018      	movs	r0, r3
   2013c:	4b07      	ldr	r3, [pc, #28]	; (2015c <usart_read_callback+0x40>)
   2013e:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   20140:	4b07      	ldr	r3, [pc, #28]	; (20160 <usart_read_callback+0x44>)
   20142:	4798      	blx	r3
}
   20144:	46c0      	nop			; (mov r8, r8)
   20146:	46bd      	mov	sp, r7
   20148:	b002      	add	sp, #8
   2014a:	bd80      	pop	{r7, pc}
   2014c:	200052e0 	.word	0x200052e0
   20150:	200052e4 	.word	0x200052e4
   20154:	0001fc15 	.word	0x0001fc15
   20158:	200052ac 	.word	0x200052ac
   2015c:	0002ad25 	.word	0x0002ad25
   20160:	00014f75 	.word	0x00014f75

00020164 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   20164:	b580      	push	{r7, lr}
   20166:	b082      	sub	sp, #8
   20168:	af00      	add	r7, sp, #0
   2016a:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   2016c:	4b09      	ldr	r3, [pc, #36]	; (20194 <usart_write_callback+0x30>)
   2016e:	681b      	ldr	r3, [r3, #0]
   20170:	4a09      	ldr	r2, [pc, #36]	; (20198 <usart_write_callback+0x34>)
   20172:	0011      	movs	r1, r2
   20174:	0018      	movs	r0, r3
   20176:	4b09      	ldr	r3, [pc, #36]	; (2019c <usart_write_callback+0x38>)
   20178:	4798      	blx	r3
   2017a:	0003      	movs	r3, r0
   2017c:	3301      	adds	r3, #1
   2017e:	d005      	beq.n	2018c <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   20180:	4905      	ldr	r1, [pc, #20]	; (20198 <usart_write_callback+0x34>)
   20182:	4b07      	ldr	r3, [pc, #28]	; (201a0 <usart_write_callback+0x3c>)
   20184:	2201      	movs	r2, #1
   20186:	0018      	movs	r0, r3
   20188:	4b06      	ldr	r3, [pc, #24]	; (201a4 <usart_write_callback+0x40>)
   2018a:	4798      	blx	r3
    }
}
   2018c:	46c0      	nop			; (mov r8, r8)
   2018e:	46bd      	mov	sp, r7
   20190:	b002      	add	sp, #8
   20192:	bd80      	pop	{r7, pc}
   20194:	200056ec 	.word	0x200056ec
   20198:	200056e8 	.word	0x200056e8
   2019c:	0001fc49 	.word	0x0001fc49
   201a0:	200052ac 	.word	0x200052ac
   201a4:	0002acdd 	.word	0x0002acdd

000201a8 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   201a8:	b590      	push	{r4, r7, lr}
   201aa:	b087      	sub	sp, #28
   201ac:	af00      	add	r7, sp, #0
   201ae:	60f8      	str	r0, [r7, #12]
   201b0:	000c      	movs	r4, r1
   201b2:	0010      	movs	r0, r2
   201b4:	0019      	movs	r1, r3
   201b6:	230a      	movs	r3, #10
   201b8:	18fb      	adds	r3, r7, r3
   201ba:	1c22      	adds	r2, r4, #0
   201bc:	801a      	strh	r2, [r3, #0]
   201be:	2308      	movs	r3, #8
   201c0:	18fb      	adds	r3, r7, r3
   201c2:	1c02      	adds	r2, r0, #0
   201c4:	801a      	strh	r2, [r3, #0]
   201c6:	1dfb      	adds	r3, r7, #7
   201c8:	1c0a      	adds	r2, r1, #0
   201ca:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   201cc:	230a      	movs	r3, #10
   201ce:	18fb      	adds	r3, r7, r3
   201d0:	881a      	ldrh	r2, [r3, #0]
   201d2:	2308      	movs	r3, #8
   201d4:	18fb      	adds	r3, r7, r3
   201d6:	881b      	ldrh	r3, [r3, #0]
   201d8:	1ad3      	subs	r3, r2, r3
   201da:	3307      	adds	r3, #7
   201dc:	2b00      	cmp	r3, #0
   201de:	da00      	bge.n	201e2 <SDMMC_UNSTUFF_BITS+0x3a>
   201e0:	3307      	adds	r3, #7
   201e2:	10db      	asrs	r3, r3, #3
   201e4:	3b01      	subs	r3, #1
   201e6:	68fa      	ldr	r2, [r7, #12]
   201e8:	18d3      	adds	r3, r2, r3
   201ea:	781b      	ldrb	r3, [r3, #0]
   201ec:	0019      	movs	r1, r3
   201ee:	2308      	movs	r3, #8
   201f0:	18fb      	adds	r3, r7, r3
   201f2:	881b      	ldrh	r3, [r3, #0]
   201f4:	2207      	movs	r2, #7
   201f6:	4013      	ands	r3, r2
   201f8:	4119      	asrs	r1, r3
   201fa:	000b      	movs	r3, r1
   201fc:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   201fe:	2308      	movs	r3, #8
   20200:	18fb      	adds	r3, r7, r3
   20202:	881b      	ldrh	r3, [r3, #0]
   20204:	2207      	movs	r2, #7
   20206:	401a      	ands	r2, r3
   20208:	1dfb      	adds	r3, r7, #7
   2020a:	781b      	ldrb	r3, [r3, #0]
   2020c:	18d3      	adds	r3, r2, r3
   2020e:	2b08      	cmp	r3, #8
   20210:	dd1c      	ble.n	2024c <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   20212:	230a      	movs	r3, #10
   20214:	18fb      	adds	r3, r7, r3
   20216:	881a      	ldrh	r2, [r3, #0]
   20218:	2308      	movs	r3, #8
   2021a:	18fb      	adds	r3, r7, r3
   2021c:	881b      	ldrh	r3, [r3, #0]
   2021e:	1ad3      	subs	r3, r2, r3
   20220:	3307      	adds	r3, #7
   20222:	2b00      	cmp	r3, #0
   20224:	da00      	bge.n	20228 <SDMMC_UNSTUFF_BITS+0x80>
   20226:	3307      	adds	r3, #7
   20228:	10db      	asrs	r3, r3, #3
   2022a:	3b02      	subs	r3, #2
   2022c:	68fa      	ldr	r2, [r7, #12]
   2022e:	18d3      	adds	r3, r2, r3
   20230:	781b      	ldrb	r3, [r3, #0]
   20232:	0019      	movs	r1, r3
   20234:	2308      	movs	r3, #8
   20236:	18fb      	adds	r3, r7, r3
   20238:	881b      	ldrh	r3, [r3, #0]
   2023a:	2207      	movs	r2, #7
   2023c:	4013      	ands	r3, r2
   2023e:	2208      	movs	r2, #8
   20240:	1ad3      	subs	r3, r2, r3
   20242:	4099      	lsls	r1, r3
   20244:	000b      	movs	r3, r1
   20246:	697a      	ldr	r2, [r7, #20]
   20248:	4313      	orrs	r3, r2
   2024a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   2024c:	2308      	movs	r3, #8
   2024e:	18fb      	adds	r3, r7, r3
   20250:	881b      	ldrh	r3, [r3, #0]
   20252:	2207      	movs	r2, #7
   20254:	401a      	ands	r2, r3
   20256:	1dfb      	adds	r3, r7, #7
   20258:	781b      	ldrb	r3, [r3, #0]
   2025a:	18d3      	adds	r3, r2, r3
   2025c:	2b10      	cmp	r3, #16
   2025e:	dd1c      	ble.n	2029a <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   20260:	230a      	movs	r3, #10
   20262:	18fb      	adds	r3, r7, r3
   20264:	881a      	ldrh	r2, [r3, #0]
   20266:	2308      	movs	r3, #8
   20268:	18fb      	adds	r3, r7, r3
   2026a:	881b      	ldrh	r3, [r3, #0]
   2026c:	1ad3      	subs	r3, r2, r3
   2026e:	3307      	adds	r3, #7
   20270:	2b00      	cmp	r3, #0
   20272:	da00      	bge.n	20276 <SDMMC_UNSTUFF_BITS+0xce>
   20274:	3307      	adds	r3, #7
   20276:	10db      	asrs	r3, r3, #3
   20278:	3b03      	subs	r3, #3
   2027a:	68fa      	ldr	r2, [r7, #12]
   2027c:	18d3      	adds	r3, r2, r3
   2027e:	781b      	ldrb	r3, [r3, #0]
   20280:	0019      	movs	r1, r3
   20282:	2308      	movs	r3, #8
   20284:	18fb      	adds	r3, r7, r3
   20286:	881b      	ldrh	r3, [r3, #0]
   20288:	2207      	movs	r2, #7
   2028a:	4013      	ands	r3, r2
   2028c:	2210      	movs	r2, #16
   2028e:	1ad3      	subs	r3, r2, r3
   20290:	4099      	lsls	r1, r3
   20292:	000b      	movs	r3, r1
   20294:	697a      	ldr	r2, [r7, #20]
   20296:	4313      	orrs	r3, r2
   20298:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   2029a:	2308      	movs	r3, #8
   2029c:	18fb      	adds	r3, r7, r3
   2029e:	881b      	ldrh	r3, [r3, #0]
   202a0:	2207      	movs	r2, #7
   202a2:	401a      	ands	r2, r3
   202a4:	1dfb      	adds	r3, r7, #7
   202a6:	781b      	ldrb	r3, [r3, #0]
   202a8:	18d3      	adds	r3, r2, r3
   202aa:	2b10      	cmp	r3, #16
   202ac:	dd1c      	ble.n	202e8 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   202ae:	230a      	movs	r3, #10
   202b0:	18fb      	adds	r3, r7, r3
   202b2:	881a      	ldrh	r2, [r3, #0]
   202b4:	2308      	movs	r3, #8
   202b6:	18fb      	adds	r3, r7, r3
   202b8:	881b      	ldrh	r3, [r3, #0]
   202ba:	1ad3      	subs	r3, r2, r3
   202bc:	3307      	adds	r3, #7
   202be:	2b00      	cmp	r3, #0
   202c0:	da00      	bge.n	202c4 <SDMMC_UNSTUFF_BITS+0x11c>
   202c2:	3307      	adds	r3, #7
   202c4:	10db      	asrs	r3, r3, #3
   202c6:	3b03      	subs	r3, #3
   202c8:	68fa      	ldr	r2, [r7, #12]
   202ca:	18d3      	adds	r3, r2, r3
   202cc:	781b      	ldrb	r3, [r3, #0]
   202ce:	0019      	movs	r1, r3
   202d0:	2308      	movs	r3, #8
   202d2:	18fb      	adds	r3, r7, r3
   202d4:	881b      	ldrh	r3, [r3, #0]
   202d6:	2207      	movs	r2, #7
   202d8:	4013      	ands	r3, r2
   202da:	2210      	movs	r2, #16
   202dc:	1ad3      	subs	r3, r2, r3
   202de:	4099      	lsls	r1, r3
   202e0:	000b      	movs	r3, r1
   202e2:	697a      	ldr	r2, [r7, #20]
   202e4:	4313      	orrs	r3, r2
   202e6:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   202e8:	1dfb      	adds	r3, r7, #7
   202ea:	781b      	ldrb	r3, [r3, #0]
   202ec:	2201      	movs	r2, #1
   202ee:	409a      	lsls	r2, r3
   202f0:	0013      	movs	r3, r2
   202f2:	1e5a      	subs	r2, r3, #1
   202f4:	697b      	ldr	r3, [r7, #20]
   202f6:	4013      	ands	r3, r2
   202f8:	617b      	str	r3, [r7, #20]
	return value;
   202fa:	697b      	ldr	r3, [r7, #20]
}
   202fc:	0018      	movs	r0, r3
   202fe:	46bd      	mov	sp, r7
   20300:	b007      	add	sp, #28
   20302:	bd90      	pop	{r4, r7, pc}

00020304 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   20304:	b580      	push	{r7, lr}
   20306:	b082      	sub	sp, #8
   20308:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   2030a:	4b23      	ldr	r3, [pc, #140]	; (20398 <mmc_spi_op_cond+0x94>)
   2030c:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   2030e:	4b23      	ldr	r3, [pc, #140]	; (2039c <mmc_spi_op_cond+0x98>)
   20310:	2100      	movs	r1, #0
   20312:	0018      	movs	r0, r3
   20314:	4b22      	ldr	r3, [pc, #136]	; (203a0 <mmc_spi_op_cond+0x9c>)
   20316:	4798      	blx	r3
   20318:	0003      	movs	r3, r0
   2031a:	001a      	movs	r2, r3
   2031c:	2301      	movs	r3, #1
   2031e:	4053      	eors	r3, r2
   20320:	b2db      	uxtb	r3, r3
   20322:	2b00      	cmp	r3, #0
   20324:	d001      	beq.n	2032a <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   20326:	2300      	movs	r3, #0
   20328:	e031      	b.n	2038e <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   2032a:	4b1e      	ldr	r3, [pc, #120]	; (203a4 <mmc_spi_op_cond+0xa0>)
   2032c:	4798      	blx	r3
   2032e:	0003      	movs	r3, r0
   20330:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   20332:	683b      	ldr	r3, [r7, #0]
   20334:	2201      	movs	r2, #1
   20336:	4013      	ands	r3, r2
   20338:	d006      	beq.n	20348 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   2033a:	687b      	ldr	r3, [r7, #4]
   2033c:	1e5a      	subs	r2, r3, #1
   2033e:	607a      	str	r2, [r7, #4]
   20340:	2b00      	cmp	r3, #0
   20342:	d1e4      	bne.n	2030e <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   20344:	2300      	movs	r3, #0
   20346:	e022      	b.n	2038e <mmc_spi_op_cond+0x8a>
			break;
   20348:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   2034a:	4b17      	ldr	r3, [pc, #92]	; (203a8 <mmc_spi_op_cond+0xa4>)
   2034c:	2100      	movs	r1, #0
   2034e:	0018      	movs	r0, r3
   20350:	4b13      	ldr	r3, [pc, #76]	; (203a0 <mmc_spi_op_cond+0x9c>)
   20352:	4798      	blx	r3
   20354:	0003      	movs	r3, r0
   20356:	001a      	movs	r2, r3
   20358:	2301      	movs	r3, #1
   2035a:	4053      	eors	r3, r2
   2035c:	b2db      	uxtb	r3, r3
   2035e:	2b00      	cmp	r3, #0
   20360:	d001      	beq.n	20366 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   20362:	2300      	movs	r3, #0
   20364:	e013      	b.n	2038e <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   20366:	4b0f      	ldr	r3, [pc, #60]	; (203a4 <mmc_spi_op_cond+0xa0>)
   20368:	4798      	blx	r3
   2036a:	0002      	movs	r2, r0
   2036c:	23c0      	movs	r3, #192	; 0xc0
   2036e:	05db      	lsls	r3, r3, #23
   20370:	401a      	ands	r2, r3
   20372:	2380      	movs	r3, #128	; 0x80
   20374:	05db      	lsls	r3, r3, #23
   20376:	429a      	cmp	r2, r3
   20378:	d108      	bne.n	2038c <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   2037a:	4b0c      	ldr	r3, [pc, #48]	; (203ac <mmc_spi_op_cond+0xa8>)
   2037c:	681a      	ldr	r2, [r3, #0]
   2037e:	4b0b      	ldr	r3, [pc, #44]	; (203ac <mmc_spi_op_cond+0xa8>)
   20380:	681b      	ldr	r3, [r3, #0]
   20382:	7adb      	ldrb	r3, [r3, #11]
   20384:	2108      	movs	r1, #8
   20386:	430b      	orrs	r3, r1
   20388:	b2db      	uxtb	r3, r3
   2038a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   2038c:	2301      	movs	r3, #1
}
   2038e:	0018      	movs	r0, r3
   20390:	46bd      	mov	sp, r7
   20392:	b002      	add	sp, #8
   20394:	bd80      	pop	{r7, pc}
   20396:	46c0      	nop			; (mov r8, r8)
   20398:	00001bee 	.word	0x00001bee
   2039c:	00001101 	.word	0x00001101
   203a0:	000219c5 	.word	0x000219c5
   203a4:	00021c05 	.word	0x00021c05
   203a8:	0000053a 	.word	0x0000053a
   203ac:	20003e94 	.word	0x20003e94

000203b0 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   203b0:	b580      	push	{r7, lr}
   203b2:	b086      	sub	sp, #24
   203b4:	af00      	add	r7, sp, #0
   203b6:	0002      	movs	r2, r0
   203b8:	1dfb      	adds	r3, r7, #7
   203ba:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   203bc:	4b2e      	ldr	r3, [pc, #184]	; (20478 <sd_spi_op_cond+0xc8>)
   203be:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   203c0:	4b2e      	ldr	r3, [pc, #184]	; (2047c <sd_spi_op_cond+0xcc>)
   203c2:	2100      	movs	r1, #0
   203c4:	0018      	movs	r0, r3
   203c6:	4b2e      	ldr	r3, [pc, #184]	; (20480 <sd_spi_op_cond+0xd0>)
   203c8:	4798      	blx	r3
   203ca:	0003      	movs	r3, r0
   203cc:	001a      	movs	r2, r3
   203ce:	2301      	movs	r3, #1
   203d0:	4053      	eors	r3, r2
   203d2:	b2db      	uxtb	r3, r3
   203d4:	2b00      	cmp	r3, #0
   203d6:	d001      	beq.n	203dc <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   203d8:	2300      	movs	r3, #0
   203da:	e048      	b.n	2046e <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   203dc:	2300      	movs	r3, #0
   203de:	617b      	str	r3, [r7, #20]
		if (v2) {
   203e0:	1dfb      	adds	r3, r7, #7
   203e2:	781b      	ldrb	r3, [r3, #0]
   203e4:	2b00      	cmp	r3, #0
   203e6:	d004      	beq.n	203f2 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   203e8:	697b      	ldr	r3, [r7, #20]
   203ea:	2280      	movs	r2, #128	; 0x80
   203ec:	05d2      	lsls	r2, r2, #23
   203ee:	4313      	orrs	r3, r2
   203f0:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   203f2:	697b      	ldr	r3, [r7, #20]
   203f4:	4a23      	ldr	r2, [pc, #140]	; (20484 <sd_spi_op_cond+0xd4>)
   203f6:	0019      	movs	r1, r3
   203f8:	0010      	movs	r0, r2
   203fa:	4b21      	ldr	r3, [pc, #132]	; (20480 <sd_spi_op_cond+0xd0>)
   203fc:	4798      	blx	r3
   203fe:	0003      	movs	r3, r0
   20400:	001a      	movs	r2, r3
   20402:	2301      	movs	r3, #1
   20404:	4053      	eors	r3, r2
   20406:	b2db      	uxtb	r3, r3
   20408:	2b00      	cmp	r3, #0
   2040a:	d001      	beq.n	20410 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   2040c:	2300      	movs	r3, #0
   2040e:	e02e      	b.n	2046e <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   20410:	4b1d      	ldr	r3, [pc, #116]	; (20488 <sd_spi_op_cond+0xd8>)
   20412:	4798      	blx	r3
   20414:	0003      	movs	r3, r0
   20416:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   20418:	68fb      	ldr	r3, [r7, #12]
   2041a:	2201      	movs	r2, #1
   2041c:	4013      	ands	r3, r2
   2041e:	d006      	beq.n	2042e <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   20420:	693b      	ldr	r3, [r7, #16]
   20422:	1e5a      	subs	r2, r3, #1
   20424:	613a      	str	r2, [r7, #16]
   20426:	2b00      	cmp	r3, #0
   20428:	d1ca      	bne.n	203c0 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   2042a:	2300      	movs	r3, #0
   2042c:	e01f      	b.n	2046e <sd_spi_op_cond+0xbe>
			break;
   2042e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   20430:	4b16      	ldr	r3, [pc, #88]	; (2048c <sd_spi_op_cond+0xdc>)
   20432:	2100      	movs	r1, #0
   20434:	0018      	movs	r0, r3
   20436:	4b12      	ldr	r3, [pc, #72]	; (20480 <sd_spi_op_cond+0xd0>)
   20438:	4798      	blx	r3
   2043a:	0003      	movs	r3, r0
   2043c:	001a      	movs	r2, r3
   2043e:	2301      	movs	r3, #1
   20440:	4053      	eors	r3, r2
   20442:	b2db      	uxtb	r3, r3
   20444:	2b00      	cmp	r3, #0
   20446:	d001      	beq.n	2044c <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   20448:	2300      	movs	r3, #0
   2044a:	e010      	b.n	2046e <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   2044c:	4b0e      	ldr	r3, [pc, #56]	; (20488 <sd_spi_op_cond+0xd8>)
   2044e:	4798      	blx	r3
   20450:	0002      	movs	r2, r0
   20452:	2380      	movs	r3, #128	; 0x80
   20454:	05db      	lsls	r3, r3, #23
   20456:	4013      	ands	r3, r2
   20458:	d008      	beq.n	2046c <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   2045a:	4b0d      	ldr	r3, [pc, #52]	; (20490 <sd_spi_op_cond+0xe0>)
   2045c:	681a      	ldr	r2, [r3, #0]
   2045e:	4b0c      	ldr	r3, [pc, #48]	; (20490 <sd_spi_op_cond+0xe0>)
   20460:	681b      	ldr	r3, [r3, #0]
   20462:	7adb      	ldrb	r3, [r3, #11]
   20464:	2108      	movs	r1, #8
   20466:	430b      	orrs	r3, r1
   20468:	b2db      	uxtb	r3, r3
   2046a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   2046c:	2301      	movs	r3, #1
}
   2046e:	0018      	movs	r0, r3
   20470:	46bd      	mov	sp, r7
   20472:	b006      	add	sp, #24
   20474:	bd80      	pop	{r7, pc}
   20476:	46c0      	nop			; (mov r8, r8)
   20478:	00001bee 	.word	0x00001bee
   2047c:	00001137 	.word	0x00001137
   20480:	000219c5 	.word	0x000219c5
   20484:	00001129 	.word	0x00001129
   20488:	00021c05 	.word	0x00021c05
   2048c:	0000053a 	.word	0x0000053a
   20490:	20003e94 	.word	0x20003e94

00020494 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   20494:	b580      	push	{r7, lr}
   20496:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   20498:	2301      	movs	r3, #1
}
   2049a:	0018      	movs	r0, r3
   2049c:	46bd      	mov	sp, r7
   2049e:	bd80      	pop	{r7, pc}

000204a0 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   204a0:	b580      	push	{r7, lr}
   204a2:	b084      	sub	sp, #16
   204a4:	af00      	add	r7, sp, #0
   204a6:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   204a8:	687b      	ldr	r3, [r7, #4]
   204aa:	2200      	movs	r2, #0
   204ac:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   204ae:	23d5      	movs	r3, #213	; 0xd5
   204b0:	005b      	lsls	r3, r3, #1
   204b2:	4a14      	ldr	r2, [pc, #80]	; (20504 <sd_cmd8+0x64>)
   204b4:	0019      	movs	r1, r3
   204b6:	0010      	movs	r0, r2
   204b8:	4b13      	ldr	r3, [pc, #76]	; (20508 <sd_cmd8+0x68>)
   204ba:	4798      	blx	r3
   204bc:	0003      	movs	r3, r0
   204be:	001a      	movs	r2, r3
   204c0:	2301      	movs	r3, #1
   204c2:	4053      	eors	r3, r2
   204c4:	b2db      	uxtb	r3, r3
   204c6:	2b00      	cmp	r3, #0
   204c8:	d001      	beq.n	204ce <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   204ca:	2301      	movs	r3, #1
   204cc:	e015      	b.n	204fa <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   204ce:	4b0f      	ldr	r3, [pc, #60]	; (2050c <sd_cmd8+0x6c>)
   204d0:	4798      	blx	r3
   204d2:	0003      	movs	r3, r0
   204d4:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   204d6:	68fb      	ldr	r3, [r7, #12]
   204d8:	3301      	adds	r3, #1
   204da:	d101      	bne.n	204e0 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   204dc:	2301      	movs	r3, #1
   204de:	e00c      	b.n	204fa <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   204e0:	68fb      	ldr	r3, [r7, #12]
   204e2:	051b      	lsls	r3, r3, #20
   204e4:	0d1a      	lsrs	r2, r3, #20
   204e6:	23d5      	movs	r3, #213	; 0xd5
   204e8:	005b      	lsls	r3, r3, #1
   204ea:	429a      	cmp	r2, r3
   204ec:	d001      	beq.n	204f2 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   204ee:	2300      	movs	r3, #0
   204f0:	e003      	b.n	204fa <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   204f2:	687b      	ldr	r3, [r7, #4]
   204f4:	2201      	movs	r2, #1
   204f6:	701a      	strb	r2, [r3, #0]
	return true;
   204f8:	2301      	movs	r3, #1
}
   204fa:	0018      	movs	r0, r3
   204fc:	46bd      	mov	sp, r7
   204fe:	b004      	add	sp, #16
   20500:	bd80      	pop	{r7, pc}
   20502:	46c0      	nop			; (mov r8, r8)
   20504:	00005508 	.word	0x00005508
   20508:	000219c5 	.word	0x000219c5
   2050c:	00021c05 	.word	0x00021c05

00020510 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   20510:	b590      	push	{r4, r7, lr}
   20512:	b089      	sub	sp, #36	; 0x24
   20514:	af02      	add	r7, sp, #8
   20516:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   20518:	2380      	movs	r3, #128	; 0x80
   2051a:	009a      	lsls	r2, r3, #2
   2051c:	4841      	ldr	r0, [pc, #260]	; (20624 <mmc_cmd8+0x114>)
   2051e:	2300      	movs	r3, #0
   20520:	9300      	str	r3, [sp, #0]
   20522:	2301      	movs	r3, #1
   20524:	2100      	movs	r1, #0
   20526:	4c40      	ldr	r4, [pc, #256]	; (20628 <mmc_cmd8+0x118>)
   20528:	47a0      	blx	r4
   2052a:	0003      	movs	r3, r0
   2052c:	001a      	movs	r2, r3
   2052e:	2301      	movs	r3, #1
   20530:	4053      	eors	r3, r2
   20532:	b2db      	uxtb	r3, r3
   20534:	2b00      	cmp	r3, #0
   20536:	d001      	beq.n	2053c <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   20538:	2300      	movs	r3, #0
   2053a:	e06e      	b.n	2061a <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   2053c:	2316      	movs	r3, #22
   2053e:	18fb      	adds	r3, r7, r3
   20540:	2200      	movs	r2, #0
   20542:	801a      	strh	r2, [r3, #0]
   20544:	e014      	b.n	20570 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   20546:	2310      	movs	r3, #16
   20548:	18fb      	adds	r3, r7, r3
   2054a:	0018      	movs	r0, r3
   2054c:	4b37      	ldr	r3, [pc, #220]	; (2062c <mmc_cmd8+0x11c>)
   2054e:	4798      	blx	r3
   20550:	0003      	movs	r3, r0
   20552:	001a      	movs	r2, r3
   20554:	2301      	movs	r3, #1
   20556:	4053      	eors	r3, r2
   20558:	b2db      	uxtb	r3, r3
   2055a:	2b00      	cmp	r3, #0
   2055c:	d001      	beq.n	20562 <mmc_cmd8+0x52>
			return false;
   2055e:	2300      	movs	r3, #0
   20560:	e05b      	b.n	2061a <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   20562:	2316      	movs	r3, #22
   20564:	18fb      	adds	r3, r7, r3
   20566:	881a      	ldrh	r2, [r3, #0]
   20568:	2316      	movs	r3, #22
   2056a:	18fb      	adds	r3, r7, r3
   2056c:	3201      	adds	r2, #1
   2056e:	801a      	strh	r2, [r3, #0]
   20570:	2316      	movs	r3, #22
   20572:	18fb      	adds	r3, r7, r3
   20574:	881b      	ldrh	r3, [r3, #0]
   20576:	2b31      	cmp	r3, #49	; 0x31
   20578:	d9e5      	bls.n	20546 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   2057a:	693b      	ldr	r3, [r7, #16]
   2057c:	b2db      	uxtb	r3, r3
   2057e:	2202      	movs	r2, #2
   20580:	4013      	ands	r3, r2
   20582:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   20584:	687b      	ldr	r3, [r7, #4]
   20586:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   20588:	4b29      	ldr	r3, [pc, #164]	; (20630 <mmc_cmd8+0x120>)
   2058a:	681b      	ldr	r3, [r3, #0]
   2058c:	330e      	adds	r3, #14
   2058e:	0018      	movs	r0, r3
   20590:	230c      	movs	r3, #12
   20592:	223e      	movs	r2, #62	; 0x3e
   20594:	2180      	movs	r1, #128	; 0x80
   20596:	4c27      	ldr	r4, [pc, #156]	; (20634 <mmc_cmd8+0x124>)
   20598:	47a0      	blx	r4
   2059a:	0002      	movs	r2, r0
   2059c:	4b26      	ldr	r3, [pc, #152]	; (20638 <mmc_cmd8+0x128>)
   2059e:	429a      	cmp	r2, r3
   205a0:	d135      	bne.n	2060e <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   205a2:	e014      	b.n	205ce <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   205a4:	230c      	movs	r3, #12
   205a6:	18fb      	adds	r3, r7, r3
   205a8:	0018      	movs	r0, r3
   205aa:	4b20      	ldr	r3, [pc, #128]	; (2062c <mmc_cmd8+0x11c>)
   205ac:	4798      	blx	r3
   205ae:	0003      	movs	r3, r0
   205b0:	001a      	movs	r2, r3
   205b2:	2301      	movs	r3, #1
   205b4:	4053      	eors	r3, r2
   205b6:	b2db      	uxtb	r3, r3
   205b8:	2b00      	cmp	r3, #0
   205ba:	d001      	beq.n	205c0 <mmc_cmd8+0xb0>
				return false;
   205bc:	2300      	movs	r3, #0
   205be:	e02c      	b.n	2061a <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   205c0:	2316      	movs	r3, #22
   205c2:	18fb      	adds	r3, r7, r3
   205c4:	881a      	ldrh	r2, [r3, #0]
   205c6:	2316      	movs	r3, #22
   205c8:	18fb      	adds	r3, r7, r3
   205ca:	3201      	adds	r2, #1
   205cc:	801a      	strh	r2, [r3, #0]
   205ce:	2316      	movs	r3, #22
   205d0:	18fb      	adds	r3, r7, r3
   205d2:	881b      	ldrh	r3, [r3, #0]
   205d4:	2b35      	cmp	r3, #53	; 0x35
   205d6:	d9e5      	bls.n	205a4 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   205d8:	4b15      	ldr	r3, [pc, #84]	; (20630 <mmc_cmd8+0x120>)
   205da:	681b      	ldr	r3, [r3, #0]
   205dc:	68fa      	ldr	r2, [r7, #12]
   205de:	0852      	lsrs	r2, r2, #1
   205e0:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   205e2:	e014      	b.n	2060e <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   205e4:	230c      	movs	r3, #12
   205e6:	18fb      	adds	r3, r7, r3
   205e8:	0018      	movs	r0, r3
   205ea:	4b10      	ldr	r3, [pc, #64]	; (2062c <mmc_cmd8+0x11c>)
   205ec:	4798      	blx	r3
   205ee:	0003      	movs	r3, r0
   205f0:	001a      	movs	r2, r3
   205f2:	2301      	movs	r3, #1
   205f4:	4053      	eors	r3, r2
   205f6:	b2db      	uxtb	r3, r3
   205f8:	2b00      	cmp	r3, #0
   205fa:	d001      	beq.n	20600 <mmc_cmd8+0xf0>
			return false;
   205fc:	2300      	movs	r3, #0
   205fe:	e00c      	b.n	2061a <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   20600:	2316      	movs	r3, #22
   20602:	18fb      	adds	r3, r7, r3
   20604:	881a      	ldrh	r2, [r3, #0]
   20606:	2316      	movs	r3, #22
   20608:	18fb      	adds	r3, r7, r3
   2060a:	3201      	adds	r2, #1
   2060c:	801a      	strh	r2, [r3, #0]
   2060e:	2316      	movs	r3, #22
   20610:	18fb      	adds	r3, r7, r3
   20612:	881b      	ldrh	r3, [r3, #0]
   20614:	2b7f      	cmp	r3, #127	; 0x7f
   20616:	d9e5      	bls.n	205e4 <mmc_cmd8+0xd4>
		}
	}
	return true;
   20618:	2301      	movs	r3, #1
}
   2061a:	0018      	movs	r0, r3
   2061c:	46bd      	mov	sp, r7
   2061e:	b007      	add	sp, #28
   20620:	bd90      	pop	{r4, r7, pc}
   20622:	46c0      	nop			; (mov r8, r8)
   20624:	00081108 	.word	0x00081108
   20628:	000219ed 	.word	0x000219ed
   2062c:	00021c19 	.word	0x00021c19
   20630:	20003e94 	.word	0x20003e94
   20634:	000201a9 	.word	0x000201a9
   20638:	00000fff 	.word	0x00000fff

0002063c <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   2063c:	b590      	push	{r4, r7, lr}
   2063e:	b083      	sub	sp, #12
   20640:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   20642:	4b15      	ldr	r3, [pc, #84]	; (20698 <sd_mmc_cmd9_spi+0x5c>)
   20644:	681b      	ldr	r3, [r3, #0]
   20646:	891b      	ldrh	r3, [r3, #8]
   20648:	0419      	lsls	r1, r3, #16
   2064a:	4814      	ldr	r0, [pc, #80]	; (2069c <sd_mmc_cmd9_spi+0x60>)
   2064c:	2301      	movs	r3, #1
   2064e:	9300      	str	r3, [sp, #0]
   20650:	2301      	movs	r3, #1
   20652:	2210      	movs	r2, #16
   20654:	4c12      	ldr	r4, [pc, #72]	; (206a0 <sd_mmc_cmd9_spi+0x64>)
   20656:	47a0      	blx	r4
   20658:	0003      	movs	r3, r0
   2065a:	001a      	movs	r2, r3
   2065c:	2301      	movs	r3, #1
   2065e:	4053      	eors	r3, r2
   20660:	b2db      	uxtb	r3, r3
   20662:	2b00      	cmp	r3, #0
   20664:	d001      	beq.n	2066a <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   20666:	2300      	movs	r3, #0
   20668:	e012      	b.n	20690 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   2066a:	4b0b      	ldr	r3, [pc, #44]	; (20698 <sd_mmc_cmd9_spi+0x5c>)
   2066c:	681b      	ldr	r3, [r3, #0]
   2066e:	330e      	adds	r3, #14
   20670:	2101      	movs	r1, #1
   20672:	0018      	movs	r0, r3
   20674:	4b0b      	ldr	r3, [pc, #44]	; (206a4 <sd_mmc_cmd9_spi+0x68>)
   20676:	4798      	blx	r3
   20678:	0003      	movs	r3, r0
   2067a:	001a      	movs	r2, r3
   2067c:	2301      	movs	r3, #1
   2067e:	4053      	eors	r3, r2
   20680:	b2db      	uxtb	r3, r3
   20682:	2b00      	cmp	r3, #0
   20684:	d001      	beq.n	2068a <sd_mmc_cmd9_spi+0x4e>
		return false;
   20686:	2300      	movs	r3, #0
   20688:	e002      	b.n	20690 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   2068a:	4b07      	ldr	r3, [pc, #28]	; (206a8 <sd_mmc_cmd9_spi+0x6c>)
   2068c:	4798      	blx	r3
   2068e:	0003      	movs	r3, r0
}
   20690:	0018      	movs	r0, r3
   20692:	46bd      	mov	sp, r7
   20694:	b001      	add	sp, #4
   20696:	bd90      	pop	{r4, r7, pc}
   20698:	20003e94 	.word	0x20003e94
   2069c:	00081109 	.word	0x00081109
   206a0:	000219ed 	.word	0x000219ed
   206a4:	00021cbd 	.word	0x00021cbd
   206a8:	00021d61 	.word	0x00021d61

000206ac <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   206ac:	b5b0      	push	{r4, r5, r7, lr}
   206ae:	b084      	sub	sp, #16
   206b0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   206b2:	4b45      	ldr	r3, [pc, #276]	; (207c8 <mmc_decode_csd+0x11c>)
   206b4:	681b      	ldr	r3, [r3, #0]
   206b6:	330e      	adds	r3, #14
   206b8:	0018      	movs	r0, r3
   206ba:	2304      	movs	r3, #4
   206bc:	227a      	movs	r2, #122	; 0x7a
   206be:	2180      	movs	r1, #128	; 0x80
   206c0:	4c42      	ldr	r4, [pc, #264]	; (207cc <mmc_decode_csd+0x120>)
   206c2:	47a0      	blx	r4
   206c4:	0003      	movs	r3, r0
   206c6:	2b02      	cmp	r3, #2
   206c8:	d011      	beq.n	206ee <mmc_decode_csd+0x42>
   206ca:	d802      	bhi.n	206d2 <mmc_decode_csd+0x26>
   206cc:	2b01      	cmp	r3, #1
   206ce:	d009      	beq.n	206e4 <mmc_decode_csd+0x38>
   206d0:	e003      	b.n	206da <mmc_decode_csd+0x2e>
   206d2:	2b03      	cmp	r3, #3
   206d4:	d010      	beq.n	206f8 <mmc_decode_csd+0x4c>
   206d6:	2b04      	cmp	r3, #4
   206d8:	d013      	beq.n	20702 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   206da:	4b3b      	ldr	r3, [pc, #236]	; (207c8 <mmc_decode_csd+0x11c>)
   206dc:	681b      	ldr	r3, [r3, #0]
   206de:	2212      	movs	r2, #18
   206e0:	731a      	strb	r2, [r3, #12]
		break;
   206e2:	e013      	b.n	2070c <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   206e4:	4b38      	ldr	r3, [pc, #224]	; (207c8 <mmc_decode_csd+0x11c>)
   206e6:	681b      	ldr	r3, [r3, #0]
   206e8:	2214      	movs	r2, #20
   206ea:	731a      	strb	r2, [r3, #12]
		break;
   206ec:	e00e      	b.n	2070c <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   206ee:	4b36      	ldr	r3, [pc, #216]	; (207c8 <mmc_decode_csd+0x11c>)
   206f0:	681b      	ldr	r3, [r3, #0]
   206f2:	2222      	movs	r2, #34	; 0x22
   206f4:	731a      	strb	r2, [r3, #12]
		break;
   206f6:	e009      	b.n	2070c <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   206f8:	4b33      	ldr	r3, [pc, #204]	; (207c8 <mmc_decode_csd+0x11c>)
   206fa:	681b      	ldr	r3, [r3, #0]
   206fc:	2230      	movs	r2, #48	; 0x30
   206fe:	731a      	strb	r2, [r3, #12]
		break;
   20700:	e004      	b.n	2070c <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   20702:	4b31      	ldr	r3, [pc, #196]	; (207c8 <mmc_decode_csd+0x11c>)
   20704:	681b      	ldr	r3, [r3, #0]
   20706:	2240      	movs	r2, #64	; 0x40
   20708:	731a      	strb	r2, [r3, #12]
		break;
   2070a:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   2070c:	4b2e      	ldr	r3, [pc, #184]	; (207c8 <mmc_decode_csd+0x11c>)
   2070e:	681b      	ldr	r3, [r3, #0]
   20710:	330e      	adds	r3, #14
   20712:	0018      	movs	r0, r3
   20714:	2308      	movs	r3, #8
   20716:	2260      	movs	r2, #96	; 0x60
   20718:	2180      	movs	r1, #128	; 0x80
   2071a:	4c2c      	ldr	r4, [pc, #176]	; (207cc <mmc_decode_csd+0x120>)
   2071c:	47a0      	blx	r4
   2071e:	0003      	movs	r3, r0
   20720:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   20722:	68fb      	ldr	r3, [r7, #12]
   20724:	2207      	movs	r2, #7
   20726:	401a      	ands	r2, r3
   20728:	4b29      	ldr	r3, [pc, #164]	; (207d0 <mmc_decode_csd+0x124>)
   2072a:	0092      	lsls	r2, r2, #2
   2072c:	58d3      	ldr	r3, [r2, r3]
   2072e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   20730:	68fb      	ldr	r3, [r7, #12]
   20732:	08db      	lsrs	r3, r3, #3
   20734:	220f      	movs	r2, #15
   20736:	401a      	ands	r2, r3
   20738:	4b26      	ldr	r3, [pc, #152]	; (207d4 <mmc_decode_csd+0x128>)
   2073a:	0092      	lsls	r2, r2, #2
   2073c:	58d3      	ldr	r3, [r2, r3]
   2073e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   20740:	4b21      	ldr	r3, [pc, #132]	; (207c8 <mmc_decode_csd+0x11c>)
   20742:	681b      	ldr	r3, [r3, #0]
   20744:	68ba      	ldr	r2, [r7, #8]
   20746:	6879      	ldr	r1, [r7, #4]
   20748:	434a      	muls	r2, r1
   2074a:	21fa      	movs	r1, #250	; 0xfa
   2074c:	0089      	lsls	r1, r1, #2
   2074e:	434a      	muls	r2, r1
   20750:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   20752:	4b1d      	ldr	r3, [pc, #116]	; (207c8 <mmc_decode_csd+0x11c>)
   20754:	681b      	ldr	r3, [r3, #0]
   20756:	330e      	adds	r3, #14
   20758:	0018      	movs	r0, r3
   2075a:	230c      	movs	r3, #12
   2075c:	223e      	movs	r2, #62	; 0x3e
   2075e:	2180      	movs	r1, #128	; 0x80
   20760:	4c1a      	ldr	r4, [pc, #104]	; (207cc <mmc_decode_csd+0x120>)
   20762:	47a0      	blx	r4
   20764:	0002      	movs	r2, r0
   20766:	4b1c      	ldr	r3, [pc, #112]	; (207d8 <mmc_decode_csd+0x12c>)
   20768:	429a      	cmp	r2, r3
   2076a:	d028      	beq.n	207be <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   2076c:	4b16      	ldr	r3, [pc, #88]	; (207c8 <mmc_decode_csd+0x11c>)
   2076e:	681b      	ldr	r3, [r3, #0]
   20770:	330e      	adds	r3, #14
   20772:	0018      	movs	r0, r3
   20774:	230c      	movs	r3, #12
   20776:	223e      	movs	r2, #62	; 0x3e
   20778:	2180      	movs	r1, #128	; 0x80
   2077a:	4c14      	ldr	r4, [pc, #80]	; (207cc <mmc_decode_csd+0x120>)
   2077c:	47a0      	blx	r4
   2077e:	0003      	movs	r3, r0
   20780:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   20782:	4b11      	ldr	r3, [pc, #68]	; (207c8 <mmc_decode_csd+0x11c>)
   20784:	681b      	ldr	r3, [r3, #0]
   20786:	330e      	adds	r3, #14
   20788:	0018      	movs	r0, r3
   2078a:	2303      	movs	r3, #3
   2078c:	222f      	movs	r2, #47	; 0x2f
   2078e:	2180      	movs	r1, #128	; 0x80
   20790:	4d0e      	ldr	r5, [pc, #56]	; (207cc <mmc_decode_csd+0x120>)
   20792:	47a8      	blx	r5
   20794:	0003      	movs	r3, r0
   20796:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   20798:	409c      	lsls	r4, r3
   2079a:	0023      	movs	r3, r4
   2079c:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   2079e:	4b0a      	ldr	r3, [pc, #40]	; (207c8 <mmc_decode_csd+0x11c>)
   207a0:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   207a2:	4b09      	ldr	r3, [pc, #36]	; (207c8 <mmc_decode_csd+0x11c>)
   207a4:	681b      	ldr	r3, [r3, #0]
   207a6:	330e      	adds	r3, #14
   207a8:	0018      	movs	r0, r3
   207aa:	2304      	movs	r3, #4
   207ac:	2250      	movs	r2, #80	; 0x50
   207ae:	2180      	movs	r1, #128	; 0x80
   207b0:	4d06      	ldr	r5, [pc, #24]	; (207cc <mmc_decode_csd+0x120>)
   207b2:	47a8      	blx	r5
   207b4:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   207b6:	683b      	ldr	r3, [r7, #0]
   207b8:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   207ba:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   207bc:	6063      	str	r3, [r4, #4]
	}
}
   207be:	46c0      	nop			; (mov r8, r8)
   207c0:	46bd      	mov	sp, r7
   207c2:	b004      	add	sp, #16
   207c4:	bdb0      	pop	{r4, r5, r7, pc}
   207c6:	46c0      	nop			; (mov r8, r8)
   207c8:	20003e94 	.word	0x20003e94
   207cc:	000201a9 	.word	0x000201a9
   207d0:	0003a804 	.word	0x0003a804
   207d4:	0003a860 	.word	0x0003a860
   207d8:	00000fff 	.word	0x00000fff

000207dc <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   207dc:	b5b0      	push	{r4, r5, r7, lr}
   207de:	b084      	sub	sp, #16
   207e0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   207e2:	4b35      	ldr	r3, [pc, #212]	; (208b8 <sd_decode_csd+0xdc>)
   207e4:	681b      	ldr	r3, [r3, #0]
   207e6:	330e      	adds	r3, #14
   207e8:	0018      	movs	r0, r3
   207ea:	2308      	movs	r3, #8
   207ec:	2260      	movs	r2, #96	; 0x60
   207ee:	2180      	movs	r1, #128	; 0x80
   207f0:	4c32      	ldr	r4, [pc, #200]	; (208bc <sd_decode_csd+0xe0>)
   207f2:	47a0      	blx	r4
   207f4:	0003      	movs	r3, r0
   207f6:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   207f8:	68fb      	ldr	r3, [r7, #12]
   207fa:	2207      	movs	r2, #7
   207fc:	401a      	ands	r2, r3
   207fe:	4b30      	ldr	r3, [pc, #192]	; (208c0 <sd_decode_csd+0xe4>)
   20800:	0092      	lsls	r2, r2, #2
   20802:	58d3      	ldr	r3, [r2, r3]
   20804:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   20806:	68fb      	ldr	r3, [r7, #12]
   20808:	08db      	lsrs	r3, r3, #3
   2080a:	220f      	movs	r2, #15
   2080c:	401a      	ands	r2, r3
   2080e:	4b2d      	ldr	r3, [pc, #180]	; (208c4 <sd_decode_csd+0xe8>)
   20810:	0092      	lsls	r2, r2, #2
   20812:	58d3      	ldr	r3, [r2, r3]
   20814:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   20816:	4b28      	ldr	r3, [pc, #160]	; (208b8 <sd_decode_csd+0xdc>)
   20818:	681b      	ldr	r3, [r3, #0]
   2081a:	68ba      	ldr	r2, [r7, #8]
   2081c:	6879      	ldr	r1, [r7, #4]
   2081e:	434a      	muls	r2, r1
   20820:	21fa      	movs	r1, #250	; 0xfa
   20822:	0089      	lsls	r1, r1, #2
   20824:	434a      	muls	r2, r1
   20826:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   20828:	4b23      	ldr	r3, [pc, #140]	; (208b8 <sd_decode_csd+0xdc>)
   2082a:	681b      	ldr	r3, [r3, #0]
   2082c:	330e      	adds	r3, #14
   2082e:	0018      	movs	r0, r3
   20830:	2302      	movs	r3, #2
   20832:	227e      	movs	r2, #126	; 0x7e
   20834:	2180      	movs	r1, #128	; 0x80
   20836:	4c21      	ldr	r4, [pc, #132]	; (208bc <sd_decode_csd+0xe0>)
   20838:	47a0      	blx	r4
   2083a:	1e03      	subs	r3, r0, #0
   2083c:	d00f      	beq.n	2085e <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   2083e:	4b1e      	ldr	r3, [pc, #120]	; (208b8 <sd_decode_csd+0xdc>)
   20840:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   20842:	4b1d      	ldr	r3, [pc, #116]	; (208b8 <sd_decode_csd+0xdc>)
   20844:	681b      	ldr	r3, [r3, #0]
   20846:	330e      	adds	r3, #14
   20848:	0018      	movs	r0, r3
   2084a:	2316      	movs	r3, #22
   2084c:	2230      	movs	r2, #48	; 0x30
   2084e:	2180      	movs	r1, #128	; 0x80
   20850:	4d1a      	ldr	r5, [pc, #104]	; (208bc <sd_decode_csd+0xe0>)
   20852:	47a8      	blx	r5
   20854:	0003      	movs	r3, r0
				* 512;
   20856:	3301      	adds	r3, #1
   20858:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   2085a:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   2085c:	e028      	b.n	208b0 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   2085e:	4b16      	ldr	r3, [pc, #88]	; (208b8 <sd_decode_csd+0xdc>)
   20860:	681b      	ldr	r3, [r3, #0]
   20862:	330e      	adds	r3, #14
   20864:	0018      	movs	r0, r3
   20866:	230c      	movs	r3, #12
   20868:	223e      	movs	r2, #62	; 0x3e
   2086a:	2180      	movs	r1, #128	; 0x80
   2086c:	4c13      	ldr	r4, [pc, #76]	; (208bc <sd_decode_csd+0xe0>)
   2086e:	47a0      	blx	r4
   20870:	0003      	movs	r3, r0
   20872:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   20874:	4b10      	ldr	r3, [pc, #64]	; (208b8 <sd_decode_csd+0xdc>)
   20876:	681b      	ldr	r3, [r3, #0]
   20878:	330e      	adds	r3, #14
   2087a:	0018      	movs	r0, r3
   2087c:	2303      	movs	r3, #3
   2087e:	222f      	movs	r2, #47	; 0x2f
   20880:	2180      	movs	r1, #128	; 0x80
   20882:	4d0e      	ldr	r5, [pc, #56]	; (208bc <sd_decode_csd+0xe0>)
   20884:	47a8      	blx	r5
   20886:	0003      	movs	r3, r0
   20888:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   2088a:	409c      	lsls	r4, r3
   2088c:	0023      	movs	r3, r4
   2088e:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   20890:	4b09      	ldr	r3, [pc, #36]	; (208b8 <sd_decode_csd+0xdc>)
   20892:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   20894:	4b08      	ldr	r3, [pc, #32]	; (208b8 <sd_decode_csd+0xdc>)
   20896:	681b      	ldr	r3, [r3, #0]
   20898:	330e      	adds	r3, #14
   2089a:	0018      	movs	r0, r3
   2089c:	2304      	movs	r3, #4
   2089e:	2250      	movs	r2, #80	; 0x50
   208a0:	2180      	movs	r1, #128	; 0x80
   208a2:	4d06      	ldr	r5, [pc, #24]	; (208bc <sd_decode_csd+0xe0>)
   208a4:	47a8      	blx	r5
   208a6:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   208a8:	683b      	ldr	r3, [r7, #0]
   208aa:	4093      	lsls	r3, r2
				/ 1024;
   208ac:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   208ae:	6063      	str	r3, [r4, #4]
}
   208b0:	46c0      	nop			; (mov r8, r8)
   208b2:	46bd      	mov	sp, r7
   208b4:	b004      	add	sp, #16
   208b6:	bdb0      	pop	{r4, r5, r7, pc}
   208b8:	20003e94 	.word	0x20003e94
   208bc:	000201a9 	.word	0x000201a9
   208c0:	0003a804 	.word	0x0003a804
   208c4:	0003a820 	.word	0x0003a820

000208c8 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   208c8:	b580      	push	{r7, lr}
   208ca:	b082      	sub	sp, #8
   208cc:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   208ce:	4b11      	ldr	r3, [pc, #68]	; (20914 <sd_mmc_cmd13+0x4c>)
   208d0:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   208d2:	4b11      	ldr	r3, [pc, #68]	; (20918 <sd_mmc_cmd13+0x50>)
   208d4:	2100      	movs	r1, #0
   208d6:	0018      	movs	r0, r3
   208d8:	4b10      	ldr	r3, [pc, #64]	; (2091c <sd_mmc_cmd13+0x54>)
   208da:	4798      	blx	r3
   208dc:	0003      	movs	r3, r0
   208de:	001a      	movs	r2, r3
   208e0:	2301      	movs	r3, #1
   208e2:	4053      	eors	r3, r2
   208e4:	b2db      	uxtb	r3, r3
   208e6:	2b00      	cmp	r3, #0
   208e8:	d001      	beq.n	208ee <sd_mmc_cmd13+0x26>
				return false;
   208ea:	2300      	movs	r3, #0
   208ec:	e00e      	b.n	2090c <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   208ee:	4b0c      	ldr	r3, [pc, #48]	; (20920 <sd_mmc_cmd13+0x58>)
   208f0:	4798      	blx	r3
   208f2:	0002      	movs	r2, r0
   208f4:	23ff      	movs	r3, #255	; 0xff
   208f6:	4013      	ands	r3, r2
   208f8:	d006      	beq.n	20908 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   208fa:	687b      	ldr	r3, [r7, #4]
   208fc:	1e5a      	subs	r2, r3, #1
   208fe:	607a      	str	r2, [r7, #4]
   20900:	2b00      	cmp	r3, #0
   20902:	d1e6      	bne.n	208d2 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   20904:	2300      	movs	r3, #0
   20906:	e001      	b.n	2090c <sd_mmc_cmd13+0x44>
				break;
   20908:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   2090a:	2301      	movs	r3, #1
}
   2090c:	0018      	movs	r0, r3
   2090e:	46bd      	mov	sp, r7
   20910:	b002      	add	sp, #8
   20912:	bd80      	pop	{r7, pc}
   20914:	00030d40 	.word	0x00030d40
   20918:	00001b0d 	.word	0x00001b0d
   2091c:	000219c5 	.word	0x000219c5
   20920:	00021c05 	.word	0x00021c05

00020924 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   20924:	b590      	push	{r4, r7, lr}
   20926:	b085      	sub	sp, #20
   20928:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   2092a:	4b38      	ldr	r3, [pc, #224]	; (20a0c <sd_acmd51+0xe8>)
   2092c:	681b      	ldr	r3, [r3, #0]
   2092e:	891b      	ldrh	r3, [r3, #8]
   20930:	041b      	lsls	r3, r3, #16
   20932:	4a37      	ldr	r2, [pc, #220]	; (20a10 <sd_acmd51+0xec>)
   20934:	0019      	movs	r1, r3
   20936:	0010      	movs	r0, r2
   20938:	4b36      	ldr	r3, [pc, #216]	; (20a14 <sd_acmd51+0xf0>)
   2093a:	4798      	blx	r3
   2093c:	0003      	movs	r3, r0
   2093e:	001a      	movs	r2, r3
   20940:	2301      	movs	r3, #1
   20942:	4053      	eors	r3, r2
   20944:	b2db      	uxtb	r3, r3
   20946:	2b00      	cmp	r3, #0
   20948:	d001      	beq.n	2094e <sd_acmd51+0x2a>
		return false;
   2094a:	2300      	movs	r3, #0
   2094c:	e059      	b.n	20a02 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   2094e:	4832      	ldr	r0, [pc, #200]	; (20a18 <sd_acmd51+0xf4>)
   20950:	2301      	movs	r3, #1
   20952:	9300      	str	r3, [sp, #0]
   20954:	2301      	movs	r3, #1
   20956:	2208      	movs	r2, #8
   20958:	2100      	movs	r1, #0
   2095a:	4c30      	ldr	r4, [pc, #192]	; (20a1c <sd_acmd51+0xf8>)
   2095c:	47a0      	blx	r4
   2095e:	0003      	movs	r3, r0
   20960:	001a      	movs	r2, r3
   20962:	2301      	movs	r3, #1
   20964:	4053      	eors	r3, r2
   20966:	b2db      	uxtb	r3, r3
   20968:	2b00      	cmp	r3, #0
   2096a:	d001      	beq.n	20970 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   2096c:	2300      	movs	r3, #0
   2096e:	e048      	b.n	20a02 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   20970:	003b      	movs	r3, r7
   20972:	2101      	movs	r1, #1
   20974:	0018      	movs	r0, r3
   20976:	4b2a      	ldr	r3, [pc, #168]	; (20a20 <sd_acmd51+0xfc>)
   20978:	4798      	blx	r3
   2097a:	0003      	movs	r3, r0
   2097c:	001a      	movs	r2, r3
   2097e:	2301      	movs	r3, #1
   20980:	4053      	eors	r3, r2
   20982:	b2db      	uxtb	r3, r3
   20984:	2b00      	cmp	r3, #0
   20986:	d001      	beq.n	2098c <sd_acmd51+0x68>
		return false;
   20988:	2300      	movs	r3, #0
   2098a:	e03a      	b.n	20a02 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   2098c:	4b25      	ldr	r3, [pc, #148]	; (20a24 <sd_acmd51+0x100>)
   2098e:	4798      	blx	r3
   20990:	0003      	movs	r3, r0
   20992:	001a      	movs	r2, r3
   20994:	2301      	movs	r3, #1
   20996:	4053      	eors	r3, r2
   20998:	b2db      	uxtb	r3, r3
   2099a:	2b00      	cmp	r3, #0
   2099c:	d001      	beq.n	209a2 <sd_acmd51+0x7e>
		return false;
   2099e:	2300      	movs	r3, #0
   209a0:	e02f      	b.n	20a02 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   209a2:	0038      	movs	r0, r7
   209a4:	2304      	movs	r3, #4
   209a6:	2238      	movs	r2, #56	; 0x38
   209a8:	2140      	movs	r1, #64	; 0x40
   209aa:	4c1f      	ldr	r4, [pc, #124]	; (20a28 <sd_acmd51+0x104>)
   209ac:	47a0      	blx	r4
   209ae:	0003      	movs	r3, r0
   209b0:	2b01      	cmp	r3, #1
   209b2:	d008      	beq.n	209c6 <sd_acmd51+0xa2>
   209b4:	d302      	bcc.n	209bc <sd_acmd51+0x98>
   209b6:	2b02      	cmp	r3, #2
   209b8:	d00a      	beq.n	209d0 <sd_acmd51+0xac>
   209ba:	e01c      	b.n	209f6 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   209bc:	4b13      	ldr	r3, [pc, #76]	; (20a0c <sd_acmd51+0xe8>)
   209be:	681b      	ldr	r3, [r3, #0]
   209c0:	2210      	movs	r2, #16
   209c2:	731a      	strb	r2, [r3, #12]
		break;
   209c4:	e01c      	b.n	20a00 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   209c6:	4b11      	ldr	r3, [pc, #68]	; (20a0c <sd_acmd51+0xe8>)
   209c8:	681b      	ldr	r3, [r3, #0]
   209ca:	221a      	movs	r2, #26
   209cc:	731a      	strb	r2, [r3, #12]
		break;
   209ce:	e017      	b.n	20a00 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   209d0:	0038      	movs	r0, r7
   209d2:	2301      	movs	r3, #1
   209d4:	222f      	movs	r2, #47	; 0x2f
   209d6:	2140      	movs	r1, #64	; 0x40
   209d8:	4c13      	ldr	r4, [pc, #76]	; (20a28 <sd_acmd51+0x104>)
   209da:	47a0      	blx	r4
   209dc:	0003      	movs	r3, r0
   209de:	2b01      	cmp	r3, #1
   209e0:	d104      	bne.n	209ec <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   209e2:	4b0a      	ldr	r3, [pc, #40]	; (20a0c <sd_acmd51+0xe8>)
   209e4:	681b      	ldr	r3, [r3, #0]
   209e6:	2230      	movs	r2, #48	; 0x30
   209e8:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   209ea:	e009      	b.n	20a00 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   209ec:	4b07      	ldr	r3, [pc, #28]	; (20a0c <sd_acmd51+0xe8>)
   209ee:	681b      	ldr	r3, [r3, #0]
   209f0:	2220      	movs	r2, #32
   209f2:	731a      	strb	r2, [r3, #12]
		break;
   209f4:	e004      	b.n	20a00 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   209f6:	4b05      	ldr	r3, [pc, #20]	; (20a0c <sd_acmd51+0xe8>)
   209f8:	681b      	ldr	r3, [r3, #0]
   209fa:	2210      	movs	r2, #16
   209fc:	731a      	strb	r2, [r3, #12]
		break;
   209fe:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   20a00:	2301      	movs	r3, #1
}
   20a02:	0018      	movs	r0, r3
   20a04:	46bd      	mov	sp, r7
   20a06:	b003      	add	sp, #12
   20a08:	bd90      	pop	{r4, r7, pc}
   20a0a:	46c0      	nop			; (mov r8, r8)
   20a0c:	20003e94 	.word	0x20003e94
   20a10:	00001137 	.word	0x00001137
   20a14:	000219c5 	.word	0x000219c5
   20a18:	00081133 	.word	0x00081133
   20a1c:	000219ed 	.word	0x000219ed
   20a20:	00021cbd 	.word	0x00021cbd
   20a24:	00021d61 	.word	0x00021d61
   20a28:	000201a9 	.word	0x000201a9

00020a2c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   20a2c:	b580      	push	{r7, lr}
   20a2e:	b082      	sub	sp, #8
   20a30:	af00      	add	r7, sp, #0
   20a32:	0002      	movs	r2, r0
   20a34:	1dfb      	adds	r3, r7, #7
   20a36:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   20a38:	1dfb      	adds	r3, r7, #7
   20a3a:	781b      	ldrb	r3, [r3, #0]
   20a3c:	2b00      	cmp	r3, #0
   20a3e:	d001      	beq.n	20a44 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   20a40:	2304      	movs	r3, #4
   20a42:	e047      	b.n	20ad4 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   20a44:	1dfb      	adds	r3, r7, #7
   20a46:	781b      	ldrb	r3, [r3, #0]
   20a48:	4a24      	ldr	r2, [pc, #144]	; (20adc <sd_mmc_select_slot+0xb0>)
   20a4a:	015b      	lsls	r3, r3, #5
   20a4c:	18d3      	adds	r3, r2, r3
   20a4e:	330a      	adds	r3, #10
   20a50:	781b      	ldrb	r3, [r3, #0]
   20a52:	2b04      	cmp	r3, #4
   20a54:	d008      	beq.n	20a68 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   20a56:	1dfb      	adds	r3, r7, #7
   20a58:	781b      	ldrb	r3, [r3, #0]
   20a5a:	4a20      	ldr	r2, [pc, #128]	; (20adc <sd_mmc_select_slot+0xb0>)
   20a5c:	015b      	lsls	r3, r3, #5
   20a5e:	18d3      	adds	r3, r2, r3
   20a60:	330a      	adds	r3, #10
   20a62:	781b      	ldrb	r3, [r3, #0]
   20a64:	2b03      	cmp	r3, #3
   20a66:	d11d      	bne.n	20aa4 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   20a68:	1dfb      	adds	r3, r7, #7
   20a6a:	781b      	ldrb	r3, [r3, #0]
   20a6c:	4a1b      	ldr	r2, [pc, #108]	; (20adc <sd_mmc_select_slot+0xb0>)
   20a6e:	015b      	lsls	r3, r3, #5
   20a70:	18d3      	adds	r3, r2, r3
   20a72:	330a      	adds	r3, #10
   20a74:	2202      	movs	r2, #2
   20a76:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   20a78:	1dfb      	adds	r3, r7, #7
   20a7a:	781a      	ldrb	r2, [r3, #0]
   20a7c:	4b17      	ldr	r3, [pc, #92]	; (20adc <sd_mmc_select_slot+0xb0>)
   20a7e:	0152      	lsls	r2, r2, #5
   20a80:	4917      	ldr	r1, [pc, #92]	; (20ae0 <sd_mmc_select_slot+0xb4>)
   20a82:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   20a84:	1dfb      	adds	r3, r7, #7
   20a86:	781b      	ldrb	r3, [r3, #0]
   20a88:	4a14      	ldr	r2, [pc, #80]	; (20adc <sd_mmc_select_slot+0xb0>)
   20a8a:	015b      	lsls	r3, r3, #5
   20a8c:	18d3      	adds	r3, r2, r3
   20a8e:	330d      	adds	r3, #13
   20a90:	2201      	movs	r2, #1
   20a92:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   20a94:	1dfb      	adds	r3, r7, #7
   20a96:	781b      	ldrb	r3, [r3, #0]
   20a98:	4a10      	ldr	r2, [pc, #64]	; (20adc <sd_mmc_select_slot+0xb0>)
   20a9a:	015b      	lsls	r3, r3, #5
   20a9c:	18d3      	adds	r3, r2, r3
   20a9e:	331e      	adds	r3, #30
   20aa0:	2200      	movs	r2, #0
   20aa2:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   20aa4:	4b0f      	ldr	r3, [pc, #60]	; (20ae4 <sd_mmc_select_slot+0xb8>)
   20aa6:	1dfa      	adds	r2, r7, #7
   20aa8:	7812      	ldrb	r2, [r2, #0]
   20aaa:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   20aac:	1dfb      	adds	r3, r7, #7
   20aae:	781b      	ldrb	r3, [r3, #0]
   20ab0:	015a      	lsls	r2, r3, #5
   20ab2:	4b0a      	ldr	r3, [pc, #40]	; (20adc <sd_mmc_select_slot+0xb0>)
   20ab4:	18d2      	adds	r2, r2, r3
   20ab6:	4b0c      	ldr	r3, [pc, #48]	; (20ae8 <sd_mmc_select_slot+0xbc>)
   20ab8:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   20aba:	4b0c      	ldr	r3, [pc, #48]	; (20aec <sd_mmc_select_slot+0xc0>)
   20abc:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   20abe:	1dfb      	adds	r3, r7, #7
   20ac0:	781b      	ldrb	r3, [r3, #0]
   20ac2:	4a06      	ldr	r2, [pc, #24]	; (20adc <sd_mmc_select_slot+0xb0>)
   20ac4:	015b      	lsls	r3, r3, #5
   20ac6:	18d3      	adds	r3, r2, r3
   20ac8:	330a      	adds	r3, #10
   20aca:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   20acc:	3b02      	subs	r3, #2
   20ace:	425a      	negs	r2, r3
   20ad0:	4153      	adcs	r3, r2
   20ad2:	b2db      	uxtb	r3, r3
}
   20ad4:	0018      	movs	r0, r3
   20ad6:	46bd      	mov	sp, r7
   20ad8:	b002      	add	sp, #8
   20ada:	bd80      	pop	{r7, pc}
   20adc:	20003e70 	.word	0x20003e70
   20ae0:	00061a80 	.word	0x00061a80
   20ae4:	20003e90 	.word	0x20003e90
   20ae8:	20003e94 	.word	0x20003e94
   20aec:	00020af1 	.word	0x00020af1

00020af0 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   20af0:	b5b0      	push	{r4, r5, r7, lr}
   20af2:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   20af4:	4b09      	ldr	r3, [pc, #36]	; (20b1c <sd_mmc_configure_slot+0x2c>)
   20af6:	7818      	ldrb	r0, [r3, #0]
   20af8:	4b09      	ldr	r3, [pc, #36]	; (20b20 <sd_mmc_configure_slot+0x30>)
   20afa:	681b      	ldr	r3, [r3, #0]
   20afc:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   20afe:	4b08      	ldr	r3, [pc, #32]	; (20b20 <sd_mmc_configure_slot+0x30>)
   20b00:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   20b02:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   20b04:	4b06      	ldr	r3, [pc, #24]	; (20b20 <sd_mmc_configure_slot+0x30>)
   20b06:	681b      	ldr	r3, [r3, #0]
   20b08:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   20b0a:	1e5c      	subs	r4, r3, #1
   20b0c:	41a3      	sbcs	r3, r4
   20b0e:	b2db      	uxtb	r3, r3
   20b10:	4c04      	ldr	r4, [pc, #16]	; (20b24 <sd_mmc_configure_slot+0x34>)
   20b12:	47a0      	blx	r4
}
   20b14:	46c0      	nop			; (mov r8, r8)
   20b16:	46bd      	mov	sp, r7
   20b18:	bdb0      	pop	{r4, r5, r7, pc}
   20b1a:	46c0      	nop			; (mov r8, r8)
   20b1c:	20003e90 	.word	0x20003e90
   20b20:	20003e94 	.word	0x20003e94
   20b24:	000218ad 	.word	0x000218ad

00020b28 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   20b28:	b580      	push	{r7, lr}
   20b2a:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   20b2c:	4b05      	ldr	r3, [pc, #20]	; (20b44 <sd_mmc_deselect_slot+0x1c>)
   20b2e:	781b      	ldrb	r3, [r3, #0]
   20b30:	2b00      	cmp	r3, #0
   20b32:	d104      	bne.n	20b3e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   20b34:	4b03      	ldr	r3, [pc, #12]	; (20b44 <sd_mmc_deselect_slot+0x1c>)
   20b36:	781b      	ldrb	r3, [r3, #0]
   20b38:	0018      	movs	r0, r3
   20b3a:	4b03      	ldr	r3, [pc, #12]	; (20b48 <sd_mmc_deselect_slot+0x20>)
   20b3c:	4798      	blx	r3
	}
}
   20b3e:	46c0      	nop			; (mov r8, r8)
   20b40:	46bd      	mov	sp, r7
   20b42:	bd80      	pop	{r7, pc}
   20b44:	20003e90 	.word	0x20003e90
   20b48:	00021935 	.word	0x00021935

00020b4c <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   20b4c:	b580      	push	{r7, lr}
   20b4e:	b082      	sub	sp, #8
   20b50:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   20b52:	1dfb      	adds	r3, r7, #7
   20b54:	2200      	movs	r2, #0
   20b56:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   20b58:	4b59      	ldr	r3, [pc, #356]	; (20cc0 <sd_mmc_spi_card_init+0x174>)
   20b5a:	681b      	ldr	r3, [r3, #0]
   20b5c:	2201      	movs	r2, #1
   20b5e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   20b60:	4b57      	ldr	r3, [pc, #348]	; (20cc0 <sd_mmc_spi_card_init+0x174>)
   20b62:	681b      	ldr	r3, [r3, #0]
   20b64:	2200      	movs	r2, #0
   20b66:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   20b68:	4b55      	ldr	r3, [pc, #340]	; (20cc0 <sd_mmc_spi_card_init+0x174>)
   20b6a:	681b      	ldr	r3, [r3, #0]
   20b6c:	2200      	movs	r2, #0
   20b6e:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   20b70:	4b54      	ldr	r3, [pc, #336]	; (20cc4 <sd_mmc_spi_card_init+0x178>)
   20b72:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   20b74:	2388      	movs	r3, #136	; 0x88
   20b76:	015b      	lsls	r3, r3, #5
   20b78:	2100      	movs	r1, #0
   20b7a:	0018      	movs	r0, r3
   20b7c:	4b52      	ldr	r3, [pc, #328]	; (20cc8 <sd_mmc_spi_card_init+0x17c>)
   20b7e:	4798      	blx	r3
   20b80:	0003      	movs	r3, r0
   20b82:	001a      	movs	r2, r3
   20b84:	2301      	movs	r3, #1
   20b86:	4053      	eors	r3, r2
   20b88:	b2db      	uxtb	r3, r3
   20b8a:	2b00      	cmp	r3, #0
   20b8c:	d001      	beq.n	20b92 <sd_mmc_spi_card_init+0x46>
		return false;
   20b8e:	2300      	movs	r3, #0
   20b90:	e092      	b.n	20cb8 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   20b92:	1dfb      	adds	r3, r7, #7
   20b94:	0018      	movs	r0, r3
   20b96:	4b4d      	ldr	r3, [pc, #308]	; (20ccc <sd_mmc_spi_card_init+0x180>)
   20b98:	4798      	blx	r3
   20b9a:	0003      	movs	r3, r0
   20b9c:	001a      	movs	r2, r3
   20b9e:	2301      	movs	r3, #1
   20ba0:	4053      	eors	r3, r2
   20ba2:	b2db      	uxtb	r3, r3
   20ba4:	2b00      	cmp	r3, #0
   20ba6:	d001      	beq.n	20bac <sd_mmc_spi_card_init+0x60>
		return false;
   20ba8:	2300      	movs	r3, #0
   20baa:	e085      	b.n	20cb8 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   20bac:	4b48      	ldr	r3, [pc, #288]	; (20cd0 <sd_mmc_spi_card_init+0x184>)
   20bae:	4798      	blx	r3
   20bb0:	0003      	movs	r3, r0
   20bb2:	001a      	movs	r2, r3
   20bb4:	2301      	movs	r3, #1
   20bb6:	4053      	eors	r3, r2
   20bb8:	b2db      	uxtb	r3, r3
   20bba:	2b00      	cmp	r3, #0
   20bbc:	d001      	beq.n	20bc2 <sd_mmc_spi_card_init+0x76>
		return false;
   20bbe:	2300      	movs	r3, #0
   20bc0:	e07a      	b.n	20cb8 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   20bc2:	4b3f      	ldr	r3, [pc, #252]	; (20cc0 <sd_mmc_spi_card_init+0x174>)
   20bc4:	681b      	ldr	r3, [r3, #0]
   20bc6:	7adb      	ldrb	r3, [r3, #11]
   20bc8:	001a      	movs	r2, r3
   20bca:	2301      	movs	r3, #1
   20bcc:	4013      	ands	r3, r2
   20bce:	d021      	beq.n	20c14 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   20bd0:	1dfb      	adds	r3, r7, #7
   20bd2:	781b      	ldrb	r3, [r3, #0]
   20bd4:	0018      	movs	r0, r3
   20bd6:	4b3f      	ldr	r3, [pc, #252]	; (20cd4 <sd_mmc_spi_card_init+0x188>)
   20bd8:	4798      	blx	r3
   20bda:	0003      	movs	r3, r0
   20bdc:	001a      	movs	r2, r3
   20bde:	2301      	movs	r3, #1
   20be0:	4053      	eors	r3, r2
   20be2:	b2db      	uxtb	r3, r3
   20be4:	2b00      	cmp	r3, #0
   20be6:	d007      	beq.n	20bf8 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   20be8:	4b35      	ldr	r3, [pc, #212]	; (20cc0 <sd_mmc_spi_card_init+0x174>)
   20bea:	681b      	ldr	r3, [r3, #0]
   20bec:	2202      	movs	r2, #2
   20bee:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   20bf0:	4b39      	ldr	r3, [pc, #228]	; (20cd8 <sd_mmc_spi_card_init+0x18c>)
   20bf2:	4798      	blx	r3
   20bf4:	0003      	movs	r3, r0
   20bf6:	e05f      	b.n	20cb8 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   20bf8:	4b38      	ldr	r3, [pc, #224]	; (20cdc <sd_mmc_spi_card_init+0x190>)
   20bfa:	2100      	movs	r1, #0
   20bfc:	0018      	movs	r0, r3
   20bfe:	4b32      	ldr	r3, [pc, #200]	; (20cc8 <sd_mmc_spi_card_init+0x17c>)
   20c00:	4798      	blx	r3
   20c02:	0003      	movs	r3, r0
   20c04:	001a      	movs	r2, r3
   20c06:	2301      	movs	r3, #1
   20c08:	4053      	eors	r3, r2
   20c0a:	b2db      	uxtb	r3, r3
   20c0c:	2b00      	cmp	r3, #0
   20c0e:	d001      	beq.n	20c14 <sd_mmc_spi_card_init+0xc8>
			return false;
   20c10:	2300      	movs	r3, #0
   20c12:	e051      	b.n	20cb8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   20c14:	4b2a      	ldr	r3, [pc, #168]	; (20cc0 <sd_mmc_spi_card_init+0x174>)
   20c16:	681b      	ldr	r3, [r3, #0]
   20c18:	7adb      	ldrb	r3, [r3, #11]
   20c1a:	001a      	movs	r2, r3
   20c1c:	2301      	movs	r3, #1
   20c1e:	4013      	ands	r3, r2
   20c20:	d017      	beq.n	20c52 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   20c22:	4b2f      	ldr	r3, [pc, #188]	; (20ce0 <sd_mmc_spi_card_init+0x194>)
   20c24:	4798      	blx	r3
   20c26:	0003      	movs	r3, r0
   20c28:	001a      	movs	r2, r3
   20c2a:	2301      	movs	r3, #1
   20c2c:	4053      	eors	r3, r2
   20c2e:	b2db      	uxtb	r3, r3
   20c30:	2b00      	cmp	r3, #0
   20c32:	d001      	beq.n	20c38 <sd_mmc_spi_card_init+0xec>
			return false;
   20c34:	2300      	movs	r3, #0
   20c36:	e03f      	b.n	20cb8 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   20c38:	4b2a      	ldr	r3, [pc, #168]	; (20ce4 <sd_mmc_spi_card_init+0x198>)
   20c3a:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   20c3c:	4b2a      	ldr	r3, [pc, #168]	; (20ce8 <sd_mmc_spi_card_init+0x19c>)
   20c3e:	4798      	blx	r3
   20c40:	0003      	movs	r3, r0
   20c42:	001a      	movs	r2, r3
   20c44:	2301      	movs	r3, #1
   20c46:	4053      	eors	r3, r2
   20c48:	b2db      	uxtb	r3, r3
   20c4a:	2b00      	cmp	r3, #0
   20c4c:	d001      	beq.n	20c52 <sd_mmc_spi_card_init+0x106>
			return false;
   20c4e:	2300      	movs	r3, #0
   20c50:	e032      	b.n	20cb8 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   20c52:	4b1b      	ldr	r3, [pc, #108]	; (20cc0 <sd_mmc_spi_card_init+0x174>)
   20c54:	681b      	ldr	r3, [r3, #0]
   20c56:	7adb      	ldrb	r3, [r3, #11]
   20c58:	001a      	movs	r2, r3
   20c5a:	2301      	movs	r3, #1
   20c5c:	4013      	ands	r3, r2
   20c5e:	d016      	beq.n	20c8e <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   20c60:	4b17      	ldr	r3, [pc, #92]	; (20cc0 <sd_mmc_spi_card_init+0x174>)
   20c62:	681b      	ldr	r3, [r3, #0]
   20c64:	7adb      	ldrb	r3, [r3, #11]
   20c66:	001a      	movs	r2, r3
   20c68:	2308      	movs	r3, #8
   20c6a:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   20c6c:	d10f      	bne.n	20c8e <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   20c6e:	2380      	movs	r3, #128	; 0x80
   20c70:	009b      	lsls	r3, r3, #2
   20c72:	4a1e      	ldr	r2, [pc, #120]	; (20cec <sd_mmc_spi_card_init+0x1a0>)
   20c74:	0019      	movs	r1, r3
   20c76:	0010      	movs	r0, r2
   20c78:	4b13      	ldr	r3, [pc, #76]	; (20cc8 <sd_mmc_spi_card_init+0x17c>)
   20c7a:	4798      	blx	r3
   20c7c:	0003      	movs	r3, r0
   20c7e:	001a      	movs	r2, r3
   20c80:	2301      	movs	r3, #1
   20c82:	4053      	eors	r3, r2
   20c84:	b2db      	uxtb	r3, r3
   20c86:	2b00      	cmp	r3, #0
   20c88:	d001      	beq.n	20c8e <sd_mmc_spi_card_init+0x142>
			return false;
   20c8a:	2300      	movs	r3, #0
   20c8c:	e014      	b.n	20cb8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   20c8e:	4b0c      	ldr	r3, [pc, #48]	; (20cc0 <sd_mmc_spi_card_init+0x174>)
   20c90:	681b      	ldr	r3, [r3, #0]
   20c92:	7adb      	ldrb	r3, [r3, #11]
   20c94:	001a      	movs	r2, r3
   20c96:	2301      	movs	r3, #1
   20c98:	4013      	ands	r3, r2
   20c9a:	d00a      	beq.n	20cb2 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   20c9c:	4b14      	ldr	r3, [pc, #80]	; (20cf0 <sd_mmc_spi_card_init+0x1a4>)
   20c9e:	4798      	blx	r3
   20ca0:	0003      	movs	r3, r0
   20ca2:	001a      	movs	r2, r3
   20ca4:	2301      	movs	r3, #1
   20ca6:	4053      	eors	r3, r2
   20ca8:	b2db      	uxtb	r3, r3
   20caa:	2b00      	cmp	r3, #0
   20cac:	d001      	beq.n	20cb2 <sd_mmc_spi_card_init+0x166>
			return false;
   20cae:	2300      	movs	r3, #0
   20cb0:	e002      	b.n	20cb8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   20cb2:	4b10      	ldr	r3, [pc, #64]	; (20cf4 <sd_mmc_spi_card_init+0x1a8>)
   20cb4:	4798      	blx	r3
	return true;
   20cb6:	2301      	movs	r3, #1
}
   20cb8:	0018      	movs	r0, r3
   20cba:	46bd      	mov	sp, r7
   20cbc:	b002      	add	sp, #8
   20cbe:	bd80      	pop	{r7, pc}
   20cc0:	20003e94 	.word	0x20003e94
   20cc4:	00021979 	.word	0x00021979
   20cc8:	000219c5 	.word	0x000219c5
   20ccc:	000204a1 	.word	0x000204a1
   20cd0:	00020495 	.word	0x00020495
   20cd4:	000203b1 	.word	0x000203b1
   20cd8:	00020cf9 	.word	0x00020cf9
   20cdc:	0000113b 	.word	0x0000113b
   20ce0:	0002063d 	.word	0x0002063d
   20ce4:	000207dd 	.word	0x000207dd
   20ce8:	00020925 	.word	0x00020925
   20cec:	00001110 	.word	0x00001110
   20cf0:	000208c9 	.word	0x000208c9
   20cf4:	00020af1 	.word	0x00020af1

00020cf8 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   20cf8:	b580      	push	{r7, lr}
   20cfa:	b082      	sub	sp, #8
   20cfc:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   20cfe:	2388      	movs	r3, #136	; 0x88
   20d00:	015b      	lsls	r3, r3, #5
   20d02:	2100      	movs	r1, #0
   20d04:	0018      	movs	r0, r3
   20d06:	4b32      	ldr	r3, [pc, #200]	; (20dd0 <sd_mmc_spi_install_mmc+0xd8>)
   20d08:	4798      	blx	r3
   20d0a:	0003      	movs	r3, r0
   20d0c:	001a      	movs	r2, r3
   20d0e:	2301      	movs	r3, #1
   20d10:	4053      	eors	r3, r2
   20d12:	b2db      	uxtb	r3, r3
   20d14:	2b00      	cmp	r3, #0
   20d16:	d001      	beq.n	20d1c <sd_mmc_spi_install_mmc+0x24>
		return false;
   20d18:	2300      	movs	r3, #0
   20d1a:	e055      	b.n	20dc8 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   20d1c:	4b2d      	ldr	r3, [pc, #180]	; (20dd4 <sd_mmc_spi_install_mmc+0xdc>)
   20d1e:	4798      	blx	r3
   20d20:	0003      	movs	r3, r0
   20d22:	001a      	movs	r2, r3
   20d24:	2301      	movs	r3, #1
   20d26:	4053      	eors	r3, r2
   20d28:	b2db      	uxtb	r3, r3
   20d2a:	2b00      	cmp	r3, #0
   20d2c:	d001      	beq.n	20d32 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   20d2e:	2300      	movs	r3, #0
   20d30:	e04a      	b.n	20dc8 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   20d32:	4b29      	ldr	r3, [pc, #164]	; (20dd8 <sd_mmc_spi_install_mmc+0xe0>)
   20d34:	2100      	movs	r1, #0
   20d36:	0018      	movs	r0, r3
   20d38:	4b25      	ldr	r3, [pc, #148]	; (20dd0 <sd_mmc_spi_install_mmc+0xd8>)
   20d3a:	4798      	blx	r3
   20d3c:	0003      	movs	r3, r0
   20d3e:	001a      	movs	r2, r3
   20d40:	2301      	movs	r3, #1
   20d42:	4053      	eors	r3, r2
   20d44:	b2db      	uxtb	r3, r3
   20d46:	2b00      	cmp	r3, #0
   20d48:	d001      	beq.n	20d4e <sd_mmc_spi_install_mmc+0x56>
		return false;
   20d4a:	2300      	movs	r3, #0
   20d4c:	e03c      	b.n	20dc8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   20d4e:	4b23      	ldr	r3, [pc, #140]	; (20ddc <sd_mmc_spi_install_mmc+0xe4>)
   20d50:	4798      	blx	r3
   20d52:	0003      	movs	r3, r0
   20d54:	001a      	movs	r2, r3
   20d56:	2301      	movs	r3, #1
   20d58:	4053      	eors	r3, r2
   20d5a:	b2db      	uxtb	r3, r3
   20d5c:	2b00      	cmp	r3, #0
   20d5e:	d001      	beq.n	20d64 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   20d60:	2300      	movs	r3, #0
   20d62:	e031      	b.n	20dc8 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   20d64:	4b1e      	ldr	r3, [pc, #120]	; (20de0 <sd_mmc_spi_install_mmc+0xe8>)
   20d66:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   20d68:	4b1e      	ldr	r3, [pc, #120]	; (20de4 <sd_mmc_spi_install_mmc+0xec>)
   20d6a:	681b      	ldr	r3, [r3, #0]
   20d6c:	7b1b      	ldrb	r3, [r3, #12]
   20d6e:	2b3f      	cmp	r3, #63	; 0x3f
   20d70:	d90c      	bls.n	20d8c <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   20d72:	1dfb      	adds	r3, r7, #7
   20d74:	0018      	movs	r0, r3
   20d76:	4b1c      	ldr	r3, [pc, #112]	; (20de8 <sd_mmc_spi_install_mmc+0xf0>)
   20d78:	4798      	blx	r3
   20d7a:	0003      	movs	r3, r0
   20d7c:	001a      	movs	r2, r3
   20d7e:	2301      	movs	r3, #1
   20d80:	4053      	eors	r3, r2
   20d82:	b2db      	uxtb	r3, r3
   20d84:	2b00      	cmp	r3, #0
   20d86:	d001      	beq.n	20d8c <sd_mmc_spi_install_mmc+0x94>
			return false;
   20d88:	2300      	movs	r3, #0
   20d8a:	e01d      	b.n	20dc8 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   20d8c:	2380      	movs	r3, #128	; 0x80
   20d8e:	009b      	lsls	r3, r3, #2
   20d90:	4a16      	ldr	r2, [pc, #88]	; (20dec <sd_mmc_spi_install_mmc+0xf4>)
   20d92:	0019      	movs	r1, r3
   20d94:	0010      	movs	r0, r2
   20d96:	4b0e      	ldr	r3, [pc, #56]	; (20dd0 <sd_mmc_spi_install_mmc+0xd8>)
   20d98:	4798      	blx	r3
   20d9a:	0003      	movs	r3, r0
   20d9c:	001a      	movs	r2, r3
   20d9e:	2301      	movs	r3, #1
   20da0:	4053      	eors	r3, r2
   20da2:	b2db      	uxtb	r3, r3
   20da4:	2b00      	cmp	r3, #0
   20da6:	d001      	beq.n	20dac <sd_mmc_spi_install_mmc+0xb4>
		return false;
   20da8:	2300      	movs	r3, #0
   20daa:	e00d      	b.n	20dc8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   20dac:	4b10      	ldr	r3, [pc, #64]	; (20df0 <sd_mmc_spi_install_mmc+0xf8>)
   20dae:	4798      	blx	r3
   20db0:	0003      	movs	r3, r0
   20db2:	001a      	movs	r2, r3
   20db4:	2301      	movs	r3, #1
   20db6:	4053      	eors	r3, r2
   20db8:	b2db      	uxtb	r3, r3
   20dba:	2b00      	cmp	r3, #0
   20dbc:	d001      	beq.n	20dc2 <sd_mmc_spi_install_mmc+0xca>
		return false;
   20dbe:	2300      	movs	r3, #0
   20dc0:	e002      	b.n	20dc8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   20dc2:	4b0c      	ldr	r3, [pc, #48]	; (20df4 <sd_mmc_spi_install_mmc+0xfc>)
   20dc4:	4798      	blx	r3
	return true;
   20dc6:	2301      	movs	r3, #1
}
   20dc8:	0018      	movs	r0, r3
   20dca:	46bd      	mov	sp, r7
   20dcc:	b002      	add	sp, #8
   20dce:	bd80      	pop	{r7, pc}
   20dd0:	000219c5 	.word	0x000219c5
   20dd4:	00020305 	.word	0x00020305
   20dd8:	0000113b 	.word	0x0000113b
   20ddc:	0002063d 	.word	0x0002063d
   20de0:	000206ad 	.word	0x000206ad
   20de4:	20003e94 	.word	0x20003e94
   20de8:	00020511 	.word	0x00020511
   20dec:	00001110 	.word	0x00001110
   20df0:	000208c9 	.word	0x000208c9
   20df4:	00020af1 	.word	0x00020af1

00020df8 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   20df8:	b590      	push	{r4, r7, lr}
   20dfa:	b085      	sub	sp, #20
   20dfc:	af00      	add	r7, sp, #0
   20dfe:	0002      	movs	r2, r0
   20e00:	1dfb      	adds	r3, r7, #7
   20e02:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   20e04:	230f      	movs	r3, #15
   20e06:	18fc      	adds	r4, r7, r3
   20e08:	1dfb      	adds	r3, r7, #7
   20e0a:	781b      	ldrb	r3, [r3, #0]
   20e0c:	0018      	movs	r0, r3
   20e0e:	4b13      	ldr	r3, [pc, #76]	; (20e5c <sd_mmc_check+0x64>)
   20e10:	4798      	blx	r3
   20e12:	0003      	movs	r3, r0
   20e14:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   20e16:	230f      	movs	r3, #15
   20e18:	18fb      	adds	r3, r7, r3
   20e1a:	781b      	ldrb	r3, [r3, #0]
   20e1c:	2b01      	cmp	r3, #1
   20e1e:	d005      	beq.n	20e2c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   20e20:	4b0f      	ldr	r3, [pc, #60]	; (20e60 <sd_mmc_check+0x68>)
   20e22:	4798      	blx	r3
		return sd_mmc_err;
   20e24:	230f      	movs	r3, #15
   20e26:	18fb      	adds	r3, r7, r3
   20e28:	781b      	ldrb	r3, [r3, #0]
   20e2a:	e012      	b.n	20e52 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   20e2c:	4b0d      	ldr	r3, [pc, #52]	; (20e64 <sd_mmc_check+0x6c>)
   20e2e:	4798      	blx	r3
   20e30:	1e03      	subs	r3, r0, #0
   20e32:	d007      	beq.n	20e44 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   20e34:	4b0c      	ldr	r3, [pc, #48]	; (20e68 <sd_mmc_check+0x70>)
   20e36:	681b      	ldr	r3, [r3, #0]
   20e38:	2200      	movs	r2, #0
   20e3a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   20e3c:	4b08      	ldr	r3, [pc, #32]	; (20e60 <sd_mmc_check+0x68>)
   20e3e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   20e40:	2301      	movs	r3, #1
   20e42:	e006      	b.n	20e52 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   20e44:	4b08      	ldr	r3, [pc, #32]	; (20e68 <sd_mmc_check+0x70>)
   20e46:	681b      	ldr	r3, [r3, #0]
   20e48:	2203      	movs	r2, #3
   20e4a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   20e4c:	4b04      	ldr	r3, [pc, #16]	; (20e60 <sd_mmc_check+0x68>)
   20e4e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   20e50:	2303      	movs	r3, #3
}
   20e52:	0018      	movs	r0, r3
   20e54:	46bd      	mov	sp, r7
   20e56:	b005      	add	sp, #20
   20e58:	bd90      	pop	{r4, r7, pc}
   20e5a:	46c0      	nop			; (mov r8, r8)
   20e5c:	00020a2d 	.word	0x00020a2d
   20e60:	00020b29 	.word	0x00020b29
   20e64:	00020b4d 	.word	0x00020b4d
   20e68:	20003e94 	.word	0x20003e94

00020e6c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   20e6c:	b580      	push	{r7, lr}
   20e6e:	b082      	sub	sp, #8
   20e70:	af00      	add	r7, sp, #0
   20e72:	0002      	movs	r2, r0
   20e74:	1dfb      	adds	r3, r7, #7
   20e76:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   20e78:	1dfb      	adds	r3, r7, #7
   20e7a:	781b      	ldrb	r3, [r3, #0]
   20e7c:	0018      	movs	r0, r3
   20e7e:	4b07      	ldr	r3, [pc, #28]	; (20e9c <sd_mmc_get_type+0x30>)
   20e80:	4798      	blx	r3
   20e82:	1e03      	subs	r3, r0, #0
   20e84:	d001      	beq.n	20e8a <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   20e86:	2300      	movs	r3, #0
   20e88:	e004      	b.n	20e94 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   20e8a:	4b05      	ldr	r3, [pc, #20]	; (20ea0 <sd_mmc_get_type+0x34>)
   20e8c:	4798      	blx	r3
	return sd_mmc_card->type;
   20e8e:	4b05      	ldr	r3, [pc, #20]	; (20ea4 <sd_mmc_get_type+0x38>)
   20e90:	681b      	ldr	r3, [r3, #0]
   20e92:	7adb      	ldrb	r3, [r3, #11]
}
   20e94:	0018      	movs	r0, r3
   20e96:	46bd      	mov	sp, r7
   20e98:	b002      	add	sp, #8
   20e9a:	bd80      	pop	{r7, pc}
   20e9c:	00020a2d 	.word	0x00020a2d
   20ea0:	00020b29 	.word	0x00020b29
   20ea4:	20003e94 	.word	0x20003e94

00020ea8 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   20ea8:	b580      	push	{r7, lr}
   20eaa:	b082      	sub	sp, #8
   20eac:	af00      	add	r7, sp, #0
   20eae:	0002      	movs	r2, r0
   20eb0:	1dfb      	adds	r3, r7, #7
   20eb2:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   20eb4:	1dfb      	adds	r3, r7, #7
   20eb6:	781b      	ldrb	r3, [r3, #0]
   20eb8:	0018      	movs	r0, r3
   20eba:	4b07      	ldr	r3, [pc, #28]	; (20ed8 <sd_mmc_get_capacity+0x30>)
   20ebc:	4798      	blx	r3
   20ebe:	1e03      	subs	r3, r0, #0
   20ec0:	d001      	beq.n	20ec6 <sd_mmc_get_capacity+0x1e>
		return 0;
   20ec2:	2300      	movs	r3, #0
   20ec4:	e004      	b.n	20ed0 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   20ec6:	4b05      	ldr	r3, [pc, #20]	; (20edc <sd_mmc_get_capacity+0x34>)
   20ec8:	4798      	blx	r3
	return sd_mmc_card->capacity;
   20eca:	4b05      	ldr	r3, [pc, #20]	; (20ee0 <sd_mmc_get_capacity+0x38>)
   20ecc:	681b      	ldr	r3, [r3, #0]
   20ece:	685b      	ldr	r3, [r3, #4]
}
   20ed0:	0018      	movs	r0, r3
   20ed2:	46bd      	mov	sp, r7
   20ed4:	b002      	add	sp, #8
   20ed6:	bd80      	pop	{r7, pc}
   20ed8:	00020a2d 	.word	0x00020a2d
   20edc:	00020b29 	.word	0x00020b29
   20ee0:	20003e94 	.word	0x20003e94

00020ee4 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   20ee4:	b580      	push	{r7, lr}
   20ee6:	b082      	sub	sp, #8
   20ee8:	af00      	add	r7, sp, #0
   20eea:	0002      	movs	r2, r0
   20eec:	1dfb      	adds	r3, r7, #7
   20eee:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   20ef0:	2300      	movs	r3, #0
}
   20ef2:	0018      	movs	r0, r3
   20ef4:	46bd      	mov	sp, r7
   20ef6:	b002      	add	sp, #8
   20ef8:	bd80      	pop	{r7, pc}
	...

00020efc <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   20efc:	b590      	push	{r4, r7, lr}
   20efe:	b089      	sub	sp, #36	; 0x24
   20f00:	af02      	add	r7, sp, #8
   20f02:	6039      	str	r1, [r7, #0]
   20f04:	0011      	movs	r1, r2
   20f06:	1dfb      	adds	r3, r7, #7
   20f08:	1c02      	adds	r2, r0, #0
   20f0a:	701a      	strb	r2, [r3, #0]
   20f0c:	1d3b      	adds	r3, r7, #4
   20f0e:	1c0a      	adds	r2, r1, #0
   20f10:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   20f12:	230f      	movs	r3, #15
   20f14:	18fc      	adds	r4, r7, r3
   20f16:	1dfb      	adds	r3, r7, #7
   20f18:	781b      	ldrb	r3, [r3, #0]
   20f1a:	0018      	movs	r0, r3
   20f1c:	4b29      	ldr	r3, [pc, #164]	; (20fc4 <sd_mmc_init_read_blocks+0xc8>)
   20f1e:	4798      	blx	r3
   20f20:	0003      	movs	r3, r0
   20f22:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   20f24:	230f      	movs	r3, #15
   20f26:	18fb      	adds	r3, r7, r3
   20f28:	781b      	ldrb	r3, [r3, #0]
   20f2a:	2b00      	cmp	r3, #0
   20f2c:	d003      	beq.n	20f36 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   20f2e:	230f      	movs	r3, #15
   20f30:	18fb      	adds	r3, r7, r3
   20f32:	781b      	ldrb	r3, [r3, #0]
   20f34:	e041      	b.n	20fba <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   20f36:	4b24      	ldr	r3, [pc, #144]	; (20fc8 <sd_mmc_init_read_blocks+0xcc>)
   20f38:	4798      	blx	r3
   20f3a:	0003      	movs	r3, r0
   20f3c:	001a      	movs	r2, r3
   20f3e:	2301      	movs	r3, #1
   20f40:	4053      	eors	r3, r2
   20f42:	b2db      	uxtb	r3, r3
   20f44:	2b00      	cmp	r3, #0
   20f46:	d003      	beq.n	20f50 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   20f48:	4b20      	ldr	r3, [pc, #128]	; (20fcc <sd_mmc_init_read_blocks+0xd0>)
   20f4a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   20f4c:	2305      	movs	r3, #5
   20f4e:	e034      	b.n	20fba <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   20f50:	1d3b      	adds	r3, r7, #4
   20f52:	881b      	ldrh	r3, [r3, #0]
   20f54:	2b01      	cmp	r3, #1
   20f56:	d902      	bls.n	20f5e <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   20f58:	4b1d      	ldr	r3, [pc, #116]	; (20fd0 <sd_mmc_init_read_blocks+0xd4>)
   20f5a:	617b      	str	r3, [r7, #20]
   20f5c:	e001      	b.n	20f62 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   20f5e:	4b1d      	ldr	r3, [pc, #116]	; (20fd4 <sd_mmc_init_read_blocks+0xd8>)
   20f60:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   20f62:	4b1d      	ldr	r3, [pc, #116]	; (20fd8 <sd_mmc_init_read_blocks+0xdc>)
   20f64:	681b      	ldr	r3, [r3, #0]
   20f66:	7adb      	ldrb	r3, [r3, #11]
   20f68:	001a      	movs	r2, r3
   20f6a:	2308      	movs	r3, #8
   20f6c:	4013      	ands	r3, r2
   20f6e:	d002      	beq.n	20f76 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   20f70:	683b      	ldr	r3, [r7, #0]
   20f72:	613b      	str	r3, [r7, #16]
   20f74:	e002      	b.n	20f7c <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   20f76:	683b      	ldr	r3, [r7, #0]
   20f78:	025b      	lsls	r3, r3, #9
   20f7a:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   20f7c:	1d3b      	adds	r3, r7, #4
   20f7e:	881c      	ldrh	r4, [r3, #0]
   20f80:	2380      	movs	r3, #128	; 0x80
   20f82:	009a      	lsls	r2, r3, #2
   20f84:	6939      	ldr	r1, [r7, #16]
   20f86:	6978      	ldr	r0, [r7, #20]
   20f88:	2301      	movs	r3, #1
   20f8a:	9300      	str	r3, [sp, #0]
   20f8c:	0023      	movs	r3, r4
   20f8e:	4c13      	ldr	r4, [pc, #76]	; (20fdc <sd_mmc_init_read_blocks+0xe0>)
   20f90:	47a0      	blx	r4
   20f92:	0003      	movs	r3, r0
   20f94:	001a      	movs	r2, r3
   20f96:	2301      	movs	r3, #1
   20f98:	4053      	eors	r3, r2
   20f9a:	b2db      	uxtb	r3, r3
   20f9c:	2b00      	cmp	r3, #0
   20f9e:	d003      	beq.n	20fa8 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   20fa0:	4b0a      	ldr	r3, [pc, #40]	; (20fcc <sd_mmc_init_read_blocks+0xd0>)
   20fa2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   20fa4:	2305      	movs	r3, #5
   20fa6:	e008      	b.n	20fba <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   20fa8:	4b0d      	ldr	r3, [pc, #52]	; (20fe0 <sd_mmc_init_read_blocks+0xe4>)
   20faa:	1d3a      	adds	r2, r7, #4
   20fac:	8812      	ldrh	r2, [r2, #0]
   20fae:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   20fb0:	4b0c      	ldr	r3, [pc, #48]	; (20fe4 <sd_mmc_init_read_blocks+0xe8>)
   20fb2:	1d3a      	adds	r2, r7, #4
   20fb4:	8812      	ldrh	r2, [r2, #0]
   20fb6:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   20fb8:	2300      	movs	r3, #0
}
   20fba:	0018      	movs	r0, r3
   20fbc:	46bd      	mov	sp, r7
   20fbe:	b007      	add	sp, #28
   20fc0:	bd90      	pop	{r4, r7, pc}
   20fc2:	46c0      	nop			; (mov r8, r8)
   20fc4:	00020a2d 	.word	0x00020a2d
   20fc8:	000208c9 	.word	0x000208c9
   20fcc:	00020b29 	.word	0x00020b29
   20fd0:	00101112 	.word	0x00101112
   20fd4:	00081111 	.word	0x00081111
   20fd8:	20003e94 	.word	0x20003e94
   20fdc:	000219ed 	.word	0x000219ed
   20fe0:	20003e9a 	.word	0x20003e9a
   20fe4:	20003e98 	.word	0x20003e98

00020fe8 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   20fe8:	b580      	push	{r7, lr}
   20fea:	b082      	sub	sp, #8
   20fec:	af00      	add	r7, sp, #0
   20fee:	6078      	str	r0, [r7, #4]
   20ff0:	000a      	movs	r2, r1
   20ff2:	1cbb      	adds	r3, r7, #2
   20ff4:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   20ff6:	1cbb      	adds	r3, r7, #2
   20ff8:	881a      	ldrh	r2, [r3, #0]
   20ffa:	687b      	ldr	r3, [r7, #4]
   20ffc:	0011      	movs	r1, r2
   20ffe:	0018      	movs	r0, r3
   21000:	4b0d      	ldr	r3, [pc, #52]	; (21038 <sd_mmc_start_read_blocks+0x50>)
   21002:	4798      	blx	r3
   21004:	0003      	movs	r3, r0
   21006:	001a      	movs	r2, r3
   21008:	2301      	movs	r3, #1
   2100a:	4053      	eors	r3, r2
   2100c:	b2db      	uxtb	r3, r3
   2100e:	2b00      	cmp	r3, #0
   21010:	d004      	beq.n	2101c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   21012:	4b0a      	ldr	r3, [pc, #40]	; (2103c <sd_mmc_start_read_blocks+0x54>)
   21014:	2200      	movs	r2, #0
   21016:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   21018:	2305      	movs	r3, #5
   2101a:	e008      	b.n	2102e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   2101c:	4b07      	ldr	r3, [pc, #28]	; (2103c <sd_mmc_start_read_blocks+0x54>)
   2101e:	881a      	ldrh	r2, [r3, #0]
   21020:	1cbb      	adds	r3, r7, #2
   21022:	881b      	ldrh	r3, [r3, #0]
   21024:	1ad3      	subs	r3, r2, r3
   21026:	b29a      	uxth	r2, r3
   21028:	4b04      	ldr	r3, [pc, #16]	; (2103c <sd_mmc_start_read_blocks+0x54>)
   2102a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   2102c:	2300      	movs	r3, #0
}
   2102e:	0018      	movs	r0, r3
   21030:	46bd      	mov	sp, r7
   21032:	b002      	add	sp, #8
   21034:	bd80      	pop	{r7, pc}
   21036:	46c0      	nop			; (mov r8, r8)
   21038:	00021cbd 	.word	0x00021cbd
   2103c:	20003e9a 	.word	0x20003e9a

00021040 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   21040:	b580      	push	{r7, lr}
   21042:	b082      	sub	sp, #8
   21044:	af00      	add	r7, sp, #0
   21046:	0002      	movs	r2, r0
   21048:	1dfb      	adds	r3, r7, #7
   2104a:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   2104c:	4b1c      	ldr	r3, [pc, #112]	; (210c0 <sd_mmc_wait_end_of_read_blocks+0x80>)
   2104e:	4798      	blx	r3
   21050:	0003      	movs	r3, r0
   21052:	001a      	movs	r2, r3
   21054:	2301      	movs	r3, #1
   21056:	4053      	eors	r3, r2
   21058:	b2db      	uxtb	r3, r3
   2105a:	2b00      	cmp	r3, #0
   2105c:	d001      	beq.n	21062 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   2105e:	2305      	movs	r3, #5
   21060:	e029      	b.n	210b6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   21062:	1dfb      	adds	r3, r7, #7
   21064:	781b      	ldrb	r3, [r3, #0]
   21066:	2b00      	cmp	r3, #0
   21068:	d003      	beq.n	21072 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   2106a:	4b16      	ldr	r3, [pc, #88]	; (210c4 <sd_mmc_wait_end_of_read_blocks+0x84>)
   2106c:	2200      	movs	r2, #0
   2106e:	801a      	strh	r2, [r3, #0]
   21070:	e005      	b.n	2107e <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   21072:	4b14      	ldr	r3, [pc, #80]	; (210c4 <sd_mmc_wait_end_of_read_blocks+0x84>)
   21074:	881b      	ldrh	r3, [r3, #0]
   21076:	2b00      	cmp	r3, #0
   21078:	d001      	beq.n	2107e <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   2107a:	2300      	movs	r3, #0
   2107c:	e01b      	b.n	210b6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   2107e:	4b12      	ldr	r3, [pc, #72]	; (210c8 <sd_mmc_wait_end_of_read_blocks+0x88>)
   21080:	881b      	ldrh	r3, [r3, #0]
   21082:	2b01      	cmp	r3, #1
   21084:	d103      	bne.n	2108e <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   21086:	4b11      	ldr	r3, [pc, #68]	; (210cc <sd_mmc_wait_end_of_read_blocks+0x8c>)
   21088:	4798      	blx	r3
		return SD_MMC_OK;
   2108a:	2300      	movs	r3, #0
   2108c:	e013      	b.n	210b6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   2108e:	4b10      	ldr	r3, [pc, #64]	; (210d0 <sd_mmc_wait_end_of_read_blocks+0x90>)
   21090:	2100      	movs	r1, #0
   21092:	0018      	movs	r0, r3
   21094:	4b0f      	ldr	r3, [pc, #60]	; (210d4 <sd_mmc_wait_end_of_read_blocks+0x94>)
   21096:	4798      	blx	r3
   21098:	0003      	movs	r3, r0
   2109a:	001a      	movs	r2, r3
   2109c:	2301      	movs	r3, #1
   2109e:	4053      	eors	r3, r2
   210a0:	b2db      	uxtb	r3, r3
   210a2:	2b00      	cmp	r3, #0
   210a4:	d004      	beq.n	210b0 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   210a6:	4b0a      	ldr	r3, [pc, #40]	; (210d0 <sd_mmc_wait_end_of_read_blocks+0x90>)
   210a8:	2100      	movs	r1, #0
   210aa:	0018      	movs	r0, r3
   210ac:	4b09      	ldr	r3, [pc, #36]	; (210d4 <sd_mmc_wait_end_of_read_blocks+0x94>)
   210ae:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   210b0:	4b06      	ldr	r3, [pc, #24]	; (210cc <sd_mmc_wait_end_of_read_blocks+0x8c>)
   210b2:	4798      	blx	r3
	return SD_MMC_OK;
   210b4:	2300      	movs	r3, #0
}
   210b6:	0018      	movs	r0, r3
   210b8:	46bd      	mov	sp, r7
   210ba:	b002      	add	sp, #8
   210bc:	bd80      	pop	{r7, pc}
   210be:	46c0      	nop			; (mov r8, r8)
   210c0:	00021d61 	.word	0x00021d61
   210c4:	20003e9a 	.word	0x20003e9a
   210c8:	20003e98 	.word	0x20003e98
   210cc:	00020b29 	.word	0x00020b29
   210d0:	0000310c 	.word	0x0000310c
   210d4:	000219c5 	.word	0x000219c5

000210d8 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   210d8:	b590      	push	{r4, r7, lr}
   210da:	b089      	sub	sp, #36	; 0x24
   210dc:	af02      	add	r7, sp, #8
   210de:	6039      	str	r1, [r7, #0]
   210e0:	0011      	movs	r1, r2
   210e2:	1dfb      	adds	r3, r7, #7
   210e4:	1c02      	adds	r2, r0, #0
   210e6:	701a      	strb	r2, [r3, #0]
   210e8:	1d3b      	adds	r3, r7, #4
   210ea:	1c0a      	adds	r2, r1, #0
   210ec:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   210ee:	230f      	movs	r3, #15
   210f0:	18fc      	adds	r4, r7, r3
   210f2:	1dfb      	adds	r3, r7, #7
   210f4:	781b      	ldrb	r3, [r3, #0]
   210f6:	0018      	movs	r0, r3
   210f8:	4b28      	ldr	r3, [pc, #160]	; (2119c <sd_mmc_init_write_blocks+0xc4>)
   210fa:	4798      	blx	r3
   210fc:	0003      	movs	r3, r0
   210fe:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   21100:	230f      	movs	r3, #15
   21102:	18fb      	adds	r3, r7, r3
   21104:	781b      	ldrb	r3, [r3, #0]
   21106:	2b00      	cmp	r3, #0
   21108:	d003      	beq.n	21112 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   2110a:	230f      	movs	r3, #15
   2110c:	18fb      	adds	r3, r7, r3
   2110e:	781b      	ldrb	r3, [r3, #0]
   21110:	e03f      	b.n	21192 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   21112:	1dfb      	adds	r3, r7, #7
   21114:	781b      	ldrb	r3, [r3, #0]
   21116:	0018      	movs	r0, r3
   21118:	4b21      	ldr	r3, [pc, #132]	; (211a0 <sd_mmc_init_write_blocks+0xc8>)
   2111a:	4798      	blx	r3
   2111c:	1e03      	subs	r3, r0, #0
   2111e:	d003      	beq.n	21128 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   21120:	4b20      	ldr	r3, [pc, #128]	; (211a4 <sd_mmc_init_write_blocks+0xcc>)
   21122:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   21124:	2307      	movs	r3, #7
   21126:	e034      	b.n	21192 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   21128:	1d3b      	adds	r3, r7, #4
   2112a:	881b      	ldrh	r3, [r3, #0]
   2112c:	2b01      	cmp	r3, #1
   2112e:	d902      	bls.n	21136 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   21130:	4b1d      	ldr	r3, [pc, #116]	; (211a8 <sd_mmc_init_write_blocks+0xd0>)
   21132:	617b      	str	r3, [r7, #20]
   21134:	e001      	b.n	2113a <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   21136:	4b1d      	ldr	r3, [pc, #116]	; (211ac <sd_mmc_init_write_blocks+0xd4>)
   21138:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   2113a:	4b1d      	ldr	r3, [pc, #116]	; (211b0 <sd_mmc_init_write_blocks+0xd8>)
   2113c:	681b      	ldr	r3, [r3, #0]
   2113e:	7adb      	ldrb	r3, [r3, #11]
   21140:	001a      	movs	r2, r3
   21142:	2308      	movs	r3, #8
   21144:	4013      	ands	r3, r2
   21146:	d002      	beq.n	2114e <sd_mmc_init_write_blocks+0x76>
		arg = start;
   21148:	683b      	ldr	r3, [r7, #0]
   2114a:	613b      	str	r3, [r7, #16]
   2114c:	e002      	b.n	21154 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   2114e:	683b      	ldr	r3, [r7, #0]
   21150:	025b      	lsls	r3, r3, #9
   21152:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   21154:	1d3b      	adds	r3, r7, #4
   21156:	881c      	ldrh	r4, [r3, #0]
   21158:	2380      	movs	r3, #128	; 0x80
   2115a:	009a      	lsls	r2, r3, #2
   2115c:	6939      	ldr	r1, [r7, #16]
   2115e:	6978      	ldr	r0, [r7, #20]
   21160:	2301      	movs	r3, #1
   21162:	9300      	str	r3, [sp, #0]
   21164:	0023      	movs	r3, r4
   21166:	4c13      	ldr	r4, [pc, #76]	; (211b4 <sd_mmc_init_write_blocks+0xdc>)
   21168:	47a0      	blx	r4
   2116a:	0003      	movs	r3, r0
   2116c:	001a      	movs	r2, r3
   2116e:	2301      	movs	r3, #1
   21170:	4053      	eors	r3, r2
   21172:	b2db      	uxtb	r3, r3
   21174:	2b00      	cmp	r3, #0
   21176:	d003      	beq.n	21180 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   21178:	4b0a      	ldr	r3, [pc, #40]	; (211a4 <sd_mmc_init_write_blocks+0xcc>)
   2117a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   2117c:	2305      	movs	r3, #5
   2117e:	e008      	b.n	21192 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   21180:	4b0d      	ldr	r3, [pc, #52]	; (211b8 <sd_mmc_init_write_blocks+0xe0>)
   21182:	1d3a      	adds	r2, r7, #4
   21184:	8812      	ldrh	r2, [r2, #0]
   21186:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   21188:	4b0c      	ldr	r3, [pc, #48]	; (211bc <sd_mmc_init_write_blocks+0xe4>)
   2118a:	1d3a      	adds	r2, r7, #4
   2118c:	8812      	ldrh	r2, [r2, #0]
   2118e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   21190:	2300      	movs	r3, #0
}
   21192:	0018      	movs	r0, r3
   21194:	46bd      	mov	sp, r7
   21196:	b007      	add	sp, #28
   21198:	bd90      	pop	{r4, r7, pc}
   2119a:	46c0      	nop			; (mov r8, r8)
   2119c:	00020a2d 	.word	0x00020a2d
   211a0:	00020ee5 	.word	0x00020ee5
   211a4:	00020b29 	.word	0x00020b29
   211a8:	00109119 	.word	0x00109119
   211ac:	00089118 	.word	0x00089118
   211b0:	20003e94 	.word	0x20003e94
   211b4:	000219ed 	.word	0x000219ed
   211b8:	20003e9a 	.word	0x20003e9a
   211bc:	20003e98 	.word	0x20003e98

000211c0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   211c0:	b580      	push	{r7, lr}
   211c2:	b082      	sub	sp, #8
   211c4:	af00      	add	r7, sp, #0
   211c6:	6078      	str	r0, [r7, #4]
   211c8:	000a      	movs	r2, r1
   211ca:	1cbb      	adds	r3, r7, #2
   211cc:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   211ce:	1cbb      	adds	r3, r7, #2
   211d0:	881a      	ldrh	r2, [r3, #0]
   211d2:	687b      	ldr	r3, [r7, #4]
   211d4:	0011      	movs	r1, r2
   211d6:	0018      	movs	r0, r3
   211d8:	4b0d      	ldr	r3, [pc, #52]	; (21210 <sd_mmc_start_write_blocks+0x50>)
   211da:	4798      	blx	r3
   211dc:	0003      	movs	r3, r0
   211de:	001a      	movs	r2, r3
   211e0:	2301      	movs	r3, #1
   211e2:	4053      	eors	r3, r2
   211e4:	b2db      	uxtb	r3, r3
   211e6:	2b00      	cmp	r3, #0
   211e8:	d004      	beq.n	211f4 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   211ea:	4b0a      	ldr	r3, [pc, #40]	; (21214 <sd_mmc_start_write_blocks+0x54>)
   211ec:	2200      	movs	r2, #0
   211ee:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   211f0:	2305      	movs	r3, #5
   211f2:	e008      	b.n	21206 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   211f4:	4b07      	ldr	r3, [pc, #28]	; (21214 <sd_mmc_start_write_blocks+0x54>)
   211f6:	881a      	ldrh	r2, [r3, #0]
   211f8:	1cbb      	adds	r3, r7, #2
   211fa:	881b      	ldrh	r3, [r3, #0]
   211fc:	1ad3      	subs	r3, r2, r3
   211fe:	b29a      	uxth	r2, r3
   21200:	4b04      	ldr	r3, [pc, #16]	; (21214 <sd_mmc_start_write_blocks+0x54>)
   21202:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   21204:	2300      	movs	r3, #0
}
   21206:	0018      	movs	r0, r3
   21208:	46bd      	mov	sp, r7
   2120a:	b002      	add	sp, #8
   2120c:	bd80      	pop	{r7, pc}
   2120e:	46c0      	nop			; (mov r8, r8)
   21210:	00021d6d 	.word	0x00021d6d
   21214:	20003e9a 	.word	0x20003e9a

00021218 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   21218:	b580      	push	{r7, lr}
   2121a:	b082      	sub	sp, #8
   2121c:	af00      	add	r7, sp, #0
   2121e:	0002      	movs	r2, r0
   21220:	1dfb      	adds	r3, r7, #7
   21222:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   21224:	4b13      	ldr	r3, [pc, #76]	; (21274 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   21226:	4798      	blx	r3
   21228:	0003      	movs	r3, r0
   2122a:	001a      	movs	r2, r3
   2122c:	2301      	movs	r3, #1
   2122e:	4053      	eors	r3, r2
   21230:	b2db      	uxtb	r3, r3
   21232:	2b00      	cmp	r3, #0
   21234:	d001      	beq.n	2123a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   21236:	2305      	movs	r3, #5
   21238:	e018      	b.n	2126c <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   2123a:	1dfb      	adds	r3, r7, #7
   2123c:	781b      	ldrb	r3, [r3, #0]
   2123e:	2b00      	cmp	r3, #0
   21240:	d003      	beq.n	2124a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   21242:	4b0d      	ldr	r3, [pc, #52]	; (21278 <sd_mmc_wait_end_of_write_blocks+0x60>)
   21244:	2200      	movs	r2, #0
   21246:	801a      	strh	r2, [r3, #0]
   21248:	e005      	b.n	21256 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   2124a:	4b0b      	ldr	r3, [pc, #44]	; (21278 <sd_mmc_wait_end_of_write_blocks+0x60>)
   2124c:	881b      	ldrh	r3, [r3, #0]
   2124e:	2b00      	cmp	r3, #0
   21250:	d001      	beq.n	21256 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   21252:	2300      	movs	r3, #0
   21254:	e00a      	b.n	2126c <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   21256:	4b09      	ldr	r3, [pc, #36]	; (2127c <sd_mmc_wait_end_of_write_blocks+0x64>)
   21258:	881b      	ldrh	r3, [r3, #0]
   2125a:	2b01      	cmp	r3, #1
   2125c:	d103      	bne.n	21266 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   2125e:	4b08      	ldr	r3, [pc, #32]	; (21280 <sd_mmc_wait_end_of_write_blocks+0x68>)
   21260:	4798      	blx	r3
		return SD_MMC_OK;
   21262:	2300      	movs	r3, #0
   21264:	e002      	b.n	2126c <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   21266:	4b06      	ldr	r3, [pc, #24]	; (21280 <sd_mmc_wait_end_of_write_blocks+0x68>)
   21268:	4798      	blx	r3
	return SD_MMC_OK;
   2126a:	2300      	movs	r3, #0
}
   2126c:	0018      	movs	r0, r3
   2126e:	46bd      	mov	sp, r7
   21270:	b002      	add	sp, #8
   21272:	bd80      	pop	{r7, pc}
   21274:	00021e2d 	.word	0x00021e2d
   21278:	20003e9a 	.word	0x20003e9a
   2127c:	20003e98 	.word	0x20003e98
   21280:	00020b29 	.word	0x00020b29

00021284 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   21284:	b580      	push	{r7, lr}
   21286:	b082      	sub	sp, #8
   21288:	af00      	add	r7, sp, #0
   2128a:	0002      	movs	r2, r0
   2128c:	1dfb      	adds	r3, r7, #7
   2128e:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   21290:	1dfb      	adds	r3, r7, #7
   21292:	781b      	ldrb	r3, [r3, #0]
   21294:	0018      	movs	r0, r3
   21296:	4b16      	ldr	r3, [pc, #88]	; (212f0 <sd_mmc_test_unit_ready+0x6c>)
   21298:	4798      	blx	r3
   2129a:	0003      	movs	r3, r0
   2129c:	2b01      	cmp	r3, #1
   2129e:	d019      	beq.n	212d4 <sd_mmc_test_unit_ready+0x50>
   212a0:	2b02      	cmp	r3, #2
   212a2:	d019      	beq.n	212d8 <sd_mmc_test_unit_ready+0x54>
   212a4:	2b00      	cmp	r3, #0
   212a6:	d11e      	bne.n	212e6 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   212a8:	1dfb      	adds	r3, r7, #7
   212aa:	781b      	ldrb	r3, [r3, #0]
   212ac:	4a11      	ldr	r2, [pc, #68]	; (212f4 <sd_mmc_test_unit_ready+0x70>)
   212ae:	5cd3      	ldrb	r3, [r2, r3]
   212b0:	2b00      	cmp	r3, #0
   212b2:	d001      	beq.n	212b8 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   212b4:	2302      	movs	r3, #2
   212b6:	e017      	b.n	212e8 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   212b8:	1dfb      	adds	r3, r7, #7
   212ba:	781b      	ldrb	r3, [r3, #0]
   212bc:	0018      	movs	r0, r3
   212be:	4b0e      	ldr	r3, [pc, #56]	; (212f8 <sd_mmc_test_unit_ready+0x74>)
   212c0:	4798      	blx	r3
   212c2:	0003      	movs	r3, r0
   212c4:	001a      	movs	r2, r3
   212c6:	2303      	movs	r3, #3
   212c8:	4013      	ands	r3, r2
   212ca:	d001      	beq.n	212d0 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   212cc:	2300      	movs	r3, #0
   212ce:	e00b      	b.n	212e8 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   212d0:	2302      	movs	r3, #2
   212d2:	e009      	b.n	212e8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   212d4:	2303      	movs	r3, #3
   212d6:	e007      	b.n	212e8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   212d8:	1dfb      	adds	r3, r7, #7
   212da:	781b      	ldrb	r3, [r3, #0]
   212dc:	4a05      	ldr	r2, [pc, #20]	; (212f4 <sd_mmc_test_unit_ready+0x70>)
   212de:	2100      	movs	r1, #0
   212e0:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   212e2:	2302      	movs	r3, #2
   212e4:	e000      	b.n	212e8 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   212e6:	2301      	movs	r3, #1
	}
}
   212e8:	0018      	movs	r0, r3
   212ea:	46bd      	mov	sp, r7
   212ec:	b002      	add	sp, #8
   212ee:	bd80      	pop	{r7, pc}
   212f0:	00020df9 	.word	0x00020df9
   212f4:	20003e9c 	.word	0x20003e9c
   212f8:	00020e6d 	.word	0x00020e6d

000212fc <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   212fc:	b580      	push	{r7, lr}
   212fe:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   21300:	2000      	movs	r0, #0
   21302:	4b03      	ldr	r3, [pc, #12]	; (21310 <sd_mmc_test_unit_ready_0+0x14>)
   21304:	4798      	blx	r3
   21306:	0003      	movs	r3, r0
}
   21308:	0018      	movs	r0, r3
   2130a:	46bd      	mov	sp, r7
   2130c:	bd80      	pop	{r7, pc}
   2130e:	46c0      	nop			; (mov r8, r8)
   21310:	00021285 	.word	0x00021285

00021314 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   21314:	b580      	push	{r7, lr}
   21316:	b082      	sub	sp, #8
   21318:	af00      	add	r7, sp, #0
   2131a:	0002      	movs	r2, r0
   2131c:	6039      	str	r1, [r7, #0]
   2131e:	1dfb      	adds	r3, r7, #7
   21320:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   21322:	1dfb      	adds	r3, r7, #7
   21324:	781b      	ldrb	r3, [r3, #0]
   21326:	0018      	movs	r0, r3
   21328:	4b08      	ldr	r3, [pc, #32]	; (2134c <sd_mmc_read_capacity+0x38>)
   2132a:	4798      	blx	r3
   2132c:	0003      	movs	r3, r0
   2132e:	005b      	lsls	r3, r3, #1
   21330:	1e5a      	subs	r2, r3, #1
   21332:	683b      	ldr	r3, [r7, #0]
   21334:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   21336:	1dfb      	adds	r3, r7, #7
   21338:	781b      	ldrb	r3, [r3, #0]
   2133a:	0018      	movs	r0, r3
   2133c:	4b04      	ldr	r3, [pc, #16]	; (21350 <sd_mmc_read_capacity+0x3c>)
   2133e:	4798      	blx	r3
   21340:	0003      	movs	r3, r0
}
   21342:	0018      	movs	r0, r3
   21344:	46bd      	mov	sp, r7
   21346:	b002      	add	sp, #8
   21348:	bd80      	pop	{r7, pc}
   2134a:	46c0      	nop			; (mov r8, r8)
   2134c:	00020ea9 	.word	0x00020ea9
   21350:	00021285 	.word	0x00021285

00021354 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   21354:	b580      	push	{r7, lr}
   21356:	b082      	sub	sp, #8
   21358:	af00      	add	r7, sp, #0
   2135a:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   2135c:	687b      	ldr	r3, [r7, #4]
   2135e:	0019      	movs	r1, r3
   21360:	2000      	movs	r0, #0
   21362:	4b03      	ldr	r3, [pc, #12]	; (21370 <sd_mmc_read_capacity_0+0x1c>)
   21364:	4798      	blx	r3
   21366:	0003      	movs	r3, r0
}
   21368:	0018      	movs	r0, r3
   2136a:	46bd      	mov	sp, r7
   2136c:	b002      	add	sp, #8
   2136e:	bd80      	pop	{r7, pc}
   21370:	00021315 	.word	0x00021315

00021374 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   21374:	b580      	push	{r7, lr}
   21376:	b082      	sub	sp, #8
   21378:	af00      	add	r7, sp, #0
   2137a:	0002      	movs	r2, r0
   2137c:	1dfb      	adds	r3, r7, #7
   2137e:	701a      	strb	r2, [r3, #0]
   21380:	1dbb      	adds	r3, r7, #6
   21382:	1c0a      	adds	r2, r1, #0
   21384:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   21386:	1dfb      	adds	r3, r7, #7
   21388:	781b      	ldrb	r3, [r3, #0]
   2138a:	4a04      	ldr	r2, [pc, #16]	; (2139c <sd_mmc_unload+0x28>)
   2138c:	1db9      	adds	r1, r7, #6
   2138e:	7809      	ldrb	r1, [r1, #0]
   21390:	54d1      	strb	r1, [r2, r3]
	return true;
   21392:	2301      	movs	r3, #1
}
   21394:	0018      	movs	r0, r3
   21396:	46bd      	mov	sp, r7
   21398:	b002      	add	sp, #8
   2139a:	bd80      	pop	{r7, pc}
   2139c:	20003e9c 	.word	0x20003e9c

000213a0 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   213a0:	b580      	push	{r7, lr}
   213a2:	b082      	sub	sp, #8
   213a4:	af00      	add	r7, sp, #0
   213a6:	0002      	movs	r2, r0
   213a8:	1dfb      	adds	r3, r7, #7
   213aa:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   213ac:	1dfb      	adds	r3, r7, #7
   213ae:	781b      	ldrb	r3, [r3, #0]
   213b0:	0019      	movs	r1, r3
   213b2:	2000      	movs	r0, #0
   213b4:	4b03      	ldr	r3, [pc, #12]	; (213c4 <sd_mmc_unload_0+0x24>)
   213b6:	4798      	blx	r3
   213b8:	0003      	movs	r3, r0
}
   213ba:	0018      	movs	r0, r3
   213bc:	46bd      	mov	sp, r7
   213be:	b002      	add	sp, #8
   213c0:	bd80      	pop	{r7, pc}
   213c2:	46c0      	nop			; (mov r8, r8)
   213c4:	00021375 	.word	0x00021375

000213c8 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   213c8:	b580      	push	{r7, lr}
   213ca:	b082      	sub	sp, #8
   213cc:	af00      	add	r7, sp, #0
   213ce:	0002      	movs	r2, r0
   213d0:	1dfb      	adds	r3, r7, #7
   213d2:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   213d4:	1dfb      	adds	r3, r7, #7
   213d6:	781b      	ldrb	r3, [r3, #0]
   213d8:	0018      	movs	r0, r3
   213da:	4b03      	ldr	r3, [pc, #12]	; (213e8 <sd_mmc_wr_protect+0x20>)
   213dc:	4798      	blx	r3
   213de:	0003      	movs	r3, r0
}
   213e0:	0018      	movs	r0, r3
   213e2:	46bd      	mov	sp, r7
   213e4:	b002      	add	sp, #8
   213e6:	bd80      	pop	{r7, pc}
   213e8:	00020ee5 	.word	0x00020ee5

000213ec <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   213ec:	b580      	push	{r7, lr}
   213ee:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   213f0:	2000      	movs	r0, #0
   213f2:	4b03      	ldr	r3, [pc, #12]	; (21400 <sd_mmc_wr_protect_0+0x14>)
   213f4:	4798      	blx	r3
   213f6:	0003      	movs	r3, r0
}
   213f8:	0018      	movs	r0, r3
   213fa:	46bd      	mov	sp, r7
   213fc:	bd80      	pop	{r7, pc}
   213fe:	46c0      	nop			; (mov r8, r8)
   21400:	000213c9 	.word	0x000213c9

00021404 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   21404:	b580      	push	{r7, lr}
   21406:	b082      	sub	sp, #8
   21408:	af00      	add	r7, sp, #0
   2140a:	0002      	movs	r2, r0
   2140c:	1dfb      	adds	r3, r7, #7
   2140e:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   21410:	2301      	movs	r3, #1
}
   21412:	0018      	movs	r0, r3
   21414:	46bd      	mov	sp, r7
   21416:	b002      	add	sp, #8
   21418:	bd80      	pop	{r7, pc}
	...

0002141c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   2141c:	b580      	push	{r7, lr}
   2141e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   21420:	2000      	movs	r0, #0
   21422:	4b03      	ldr	r3, [pc, #12]	; (21430 <sd_mmc_removal_0+0x14>)
   21424:	4798      	blx	r3
   21426:	0003      	movs	r3, r0
}
   21428:	0018      	movs	r0, r3
   2142a:	46bd      	mov	sp, r7
   2142c:	bd80      	pop	{r7, pc}
   2142e:	46c0      	nop			; (mov r8, r8)
   21430:	00021405 	.word	0x00021405

00021434 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   21434:	b580      	push	{r7, lr}
   21436:	b084      	sub	sp, #16
   21438:	af00      	add	r7, sp, #0
   2143a:	60b9      	str	r1, [r7, #8]
   2143c:	607a      	str	r2, [r7, #4]
   2143e:	230f      	movs	r3, #15
   21440:	18fb      	adds	r3, r7, r3
   21442:	1c02      	adds	r2, r0, #0
   21444:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   21446:	68b9      	ldr	r1, [r7, #8]
   21448:	230f      	movs	r3, #15
   2144a:	18fb      	adds	r3, r7, r3
   2144c:	781b      	ldrb	r3, [r3, #0]
   2144e:	2201      	movs	r2, #1
   21450:	0018      	movs	r0, r3
   21452:	4b10      	ldr	r3, [pc, #64]	; (21494 <sd_mmc_mem_2_ram+0x60>)
   21454:	4798      	blx	r3
   21456:	1e03      	subs	r3, r0, #0
   21458:	d005      	beq.n	21466 <sd_mmc_mem_2_ram+0x32>
   2145a:	2b02      	cmp	r3, #2
   2145c:	d101      	bne.n	21462 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   2145e:	2302      	movs	r3, #2
   21460:	e013      	b.n	2148a <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   21462:	2301      	movs	r3, #1
   21464:	e011      	b.n	2148a <sd_mmc_mem_2_ram+0x56>
		break;
   21466:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   21468:	687b      	ldr	r3, [r7, #4]
   2146a:	2101      	movs	r1, #1
   2146c:	0018      	movs	r0, r3
   2146e:	4b0a      	ldr	r3, [pc, #40]	; (21498 <sd_mmc_mem_2_ram+0x64>)
   21470:	4798      	blx	r3
   21472:	1e03      	subs	r3, r0, #0
   21474:	d001      	beq.n	2147a <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   21476:	2301      	movs	r3, #1
   21478:	e007      	b.n	2148a <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   2147a:	2000      	movs	r0, #0
   2147c:	4b07      	ldr	r3, [pc, #28]	; (2149c <sd_mmc_mem_2_ram+0x68>)
   2147e:	4798      	blx	r3
   21480:	1e03      	subs	r3, r0, #0
   21482:	d001      	beq.n	21488 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   21484:	2301      	movs	r3, #1
   21486:	e000      	b.n	2148a <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   21488:	2300      	movs	r3, #0
}
   2148a:	0018      	movs	r0, r3
   2148c:	46bd      	mov	sp, r7
   2148e:	b004      	add	sp, #16
   21490:	bd80      	pop	{r7, pc}
   21492:	46c0      	nop			; (mov r8, r8)
   21494:	00020efd 	.word	0x00020efd
   21498:	00020fe9 	.word	0x00020fe9
   2149c:	00021041 	.word	0x00021041

000214a0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   214a0:	b580      	push	{r7, lr}
   214a2:	b082      	sub	sp, #8
   214a4:	af00      	add	r7, sp, #0
   214a6:	6078      	str	r0, [r7, #4]
   214a8:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   214aa:	683a      	ldr	r2, [r7, #0]
   214ac:	687b      	ldr	r3, [r7, #4]
   214ae:	0019      	movs	r1, r3
   214b0:	2000      	movs	r0, #0
   214b2:	4b03      	ldr	r3, [pc, #12]	; (214c0 <sd_mmc_mem_2_ram_0+0x20>)
   214b4:	4798      	blx	r3
   214b6:	0003      	movs	r3, r0
}
   214b8:	0018      	movs	r0, r3
   214ba:	46bd      	mov	sp, r7
   214bc:	b002      	add	sp, #8
   214be:	bd80      	pop	{r7, pc}
   214c0:	00021435 	.word	0x00021435

000214c4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   214c4:	b580      	push	{r7, lr}
   214c6:	b084      	sub	sp, #16
   214c8:	af00      	add	r7, sp, #0
   214ca:	60b9      	str	r1, [r7, #8]
   214cc:	607a      	str	r2, [r7, #4]
   214ce:	230f      	movs	r3, #15
   214d0:	18fb      	adds	r3, r7, r3
   214d2:	1c02      	adds	r2, r0, #0
   214d4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   214d6:	68b9      	ldr	r1, [r7, #8]
   214d8:	230f      	movs	r3, #15
   214da:	18fb      	adds	r3, r7, r3
   214dc:	781b      	ldrb	r3, [r3, #0]
   214de:	2201      	movs	r2, #1
   214e0:	0018      	movs	r0, r3
   214e2:	4b10      	ldr	r3, [pc, #64]	; (21524 <sd_mmc_ram_2_mem+0x60>)
   214e4:	4798      	blx	r3
   214e6:	1e03      	subs	r3, r0, #0
   214e8:	d005      	beq.n	214f6 <sd_mmc_ram_2_mem+0x32>
   214ea:	2b02      	cmp	r3, #2
   214ec:	d101      	bne.n	214f2 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   214ee:	2302      	movs	r3, #2
   214f0:	e013      	b.n	2151a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   214f2:	2301      	movs	r3, #1
   214f4:	e011      	b.n	2151a <sd_mmc_ram_2_mem+0x56>
		break;
   214f6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   214f8:	687b      	ldr	r3, [r7, #4]
   214fa:	2101      	movs	r1, #1
   214fc:	0018      	movs	r0, r3
   214fe:	4b0a      	ldr	r3, [pc, #40]	; (21528 <sd_mmc_ram_2_mem+0x64>)
   21500:	4798      	blx	r3
   21502:	1e03      	subs	r3, r0, #0
   21504:	d001      	beq.n	2150a <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   21506:	2301      	movs	r3, #1
   21508:	e007      	b.n	2151a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   2150a:	2000      	movs	r0, #0
   2150c:	4b07      	ldr	r3, [pc, #28]	; (2152c <sd_mmc_ram_2_mem+0x68>)
   2150e:	4798      	blx	r3
   21510:	1e03      	subs	r3, r0, #0
   21512:	d001      	beq.n	21518 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   21514:	2301      	movs	r3, #1
   21516:	e000      	b.n	2151a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   21518:	2300      	movs	r3, #0
}
   2151a:	0018      	movs	r0, r3
   2151c:	46bd      	mov	sp, r7
   2151e:	b004      	add	sp, #16
   21520:	bd80      	pop	{r7, pc}
   21522:	46c0      	nop			; (mov r8, r8)
   21524:	000210d9 	.word	0x000210d9
   21528:	000211c1 	.word	0x000211c1
   2152c:	00021219 	.word	0x00021219

00021530 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   21530:	b580      	push	{r7, lr}
   21532:	b082      	sub	sp, #8
   21534:	af00      	add	r7, sp, #0
   21536:	6078      	str	r0, [r7, #4]
   21538:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   2153a:	683a      	ldr	r2, [r7, #0]
   2153c:	687b      	ldr	r3, [r7, #4]
   2153e:	0019      	movs	r1, r3
   21540:	2000      	movs	r0, #0
   21542:	4b03      	ldr	r3, [pc, #12]	; (21550 <sd_mmc_ram_2_mem_0+0x20>)
   21544:	4798      	blx	r3
   21546:	0003      	movs	r3, r0
}
   21548:	0018      	movs	r0, r3
   2154a:	46bd      	mov	sp, r7
   2154c:	b002      	add	sp, #8
   2154e:	bd80      	pop	{r7, pc}
   21550:	000214c5 	.word	0x000214c5

00021554 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   21554:	b580      	push	{r7, lr}
   21556:	b084      	sub	sp, #16
   21558:	af00      	add	r7, sp, #0
   2155a:	6078      	str	r0, [r7, #4]
   2155c:	000a      	movs	r2, r1
   2155e:	1cfb      	adds	r3, r7, #3
   21560:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   21562:	230f      	movs	r3, #15
   21564:	18fb      	adds	r3, r7, r3
   21566:	2200      	movs	r2, #0
   21568:	701a      	strb	r2, [r3, #0]
	while (size--) {
   2156a:	e038      	b.n	215de <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   2156c:	687b      	ldr	r3, [r7, #4]
   2156e:	1c5a      	adds	r2, r3, #1
   21570:	607a      	str	r2, [r7, #4]
   21572:	220e      	movs	r2, #14
   21574:	18ba      	adds	r2, r7, r2
   21576:	781b      	ldrb	r3, [r3, #0]
   21578:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   2157a:	230d      	movs	r3, #13
   2157c:	18fb      	adds	r3, r7, r3
   2157e:	2200      	movs	r2, #0
   21580:	701a      	strb	r2, [r3, #0]
   21582:	e027      	b.n	215d4 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   21584:	230f      	movs	r3, #15
   21586:	18fa      	adds	r2, r7, r3
   21588:	230f      	movs	r3, #15
   2158a:	18fb      	adds	r3, r7, r3
   2158c:	781b      	ldrb	r3, [r3, #0]
   2158e:	18db      	adds	r3, r3, r3
   21590:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   21592:	230e      	movs	r3, #14
   21594:	18fa      	adds	r2, r7, r3
   21596:	230f      	movs	r3, #15
   21598:	18fb      	adds	r3, r7, r3
   2159a:	7812      	ldrb	r2, [r2, #0]
   2159c:	781b      	ldrb	r3, [r3, #0]
   2159e:	4053      	eors	r3, r2
   215a0:	b2db      	uxtb	r3, r3
   215a2:	b25b      	sxtb	r3, r3
   215a4:	2b00      	cmp	r3, #0
   215a6:	da07      	bge.n	215b8 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   215a8:	230f      	movs	r3, #15
   215aa:	18fb      	adds	r3, r7, r3
   215ac:	220f      	movs	r2, #15
   215ae:	18ba      	adds	r2, r7, r2
   215b0:	7812      	ldrb	r2, [r2, #0]
   215b2:	2109      	movs	r1, #9
   215b4:	404a      	eors	r2, r1
   215b6:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   215b8:	230e      	movs	r3, #14
   215ba:	18fa      	adds	r2, r7, r3
   215bc:	230e      	movs	r3, #14
   215be:	18fb      	adds	r3, r7, r3
   215c0:	781b      	ldrb	r3, [r3, #0]
   215c2:	18db      	adds	r3, r3, r3
   215c4:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   215c6:	230d      	movs	r3, #13
   215c8:	18fb      	adds	r3, r7, r3
   215ca:	781a      	ldrb	r2, [r3, #0]
   215cc:	230d      	movs	r3, #13
   215ce:	18fb      	adds	r3, r7, r3
   215d0:	3201      	adds	r2, #1
   215d2:	701a      	strb	r2, [r3, #0]
   215d4:	230d      	movs	r3, #13
   215d6:	18fb      	adds	r3, r7, r3
   215d8:	781b      	ldrb	r3, [r3, #0]
   215da:	2b07      	cmp	r3, #7
   215dc:	d9d2      	bls.n	21584 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   215de:	1cfb      	adds	r3, r7, #3
   215e0:	781b      	ldrb	r3, [r3, #0]
   215e2:	1cfa      	adds	r2, r7, #3
   215e4:	1e59      	subs	r1, r3, #1
   215e6:	7011      	strb	r1, [r2, #0]
   215e8:	2b00      	cmp	r3, #0
   215ea:	d1bf      	bne.n	2156c <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   215ec:	230f      	movs	r3, #15
   215ee:	18fb      	adds	r3, r7, r3
   215f0:	781b      	ldrb	r3, [r3, #0]
   215f2:	005b      	lsls	r3, r3, #1
   215f4:	b25b      	sxtb	r3, r3
   215f6:	2201      	movs	r2, #1
   215f8:	4313      	orrs	r3, r2
   215fa:	b25a      	sxtb	r2, r3
   215fc:	230f      	movs	r3, #15
   215fe:	18fb      	adds	r3, r7, r3
   21600:	701a      	strb	r2, [r3, #0]
	return crc;
   21602:	230f      	movs	r3, #15
   21604:	18fb      	adds	r3, r7, r3
   21606:	781b      	ldrb	r3, [r3, #0]
}
   21608:	0018      	movs	r0, r3
   2160a:	46bd      	mov	sp, r7
   2160c:	b004      	add	sp, #16
   2160e:	bd80      	pop	{r7, pc}

00021610 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   21610:	b590      	push	{r4, r7, lr}
   21612:	b083      	sub	sp, #12
   21614:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   21616:	1c7b      	adds	r3, r7, #1
   21618:	22ff      	movs	r2, #255	; 0xff
   2161a:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   2161c:	1cbb      	adds	r3, r7, #2
   2161e:	22ff      	movs	r2, #255	; 0xff
   21620:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   21622:	1cbb      	adds	r3, r7, #2
   21624:	881b      	ldrh	r3, [r3, #0]
   21626:	1c79      	adds	r1, r7, #1
   21628:	4811      	ldr	r0, [pc, #68]	; (21670 <sd_mmc_spi_wait_busy+0x60>)
   2162a:	2201      	movs	r2, #1
   2162c:	4c11      	ldr	r4, [pc, #68]	; (21674 <sd_mmc_spi_wait_busy+0x64>)
   2162e:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   21630:	4b11      	ldr	r3, [pc, #68]	; (21678 <sd_mmc_spi_wait_busy+0x68>)
   21632:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   21634:	1cbb      	adds	r3, r7, #2
   21636:	881b      	ldrh	r3, [r3, #0]
   21638:	1c79      	adds	r1, r7, #1
   2163a:	480d      	ldr	r0, [pc, #52]	; (21670 <sd_mmc_spi_wait_busy+0x60>)
   2163c:	2201      	movs	r2, #1
   2163e:	4c0d      	ldr	r4, [pc, #52]	; (21674 <sd_mmc_spi_wait_busy+0x64>)
   21640:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   21642:	1cbb      	adds	r3, r7, #2
   21644:	881b      	ldrh	r3, [r3, #0]
   21646:	1c79      	adds	r1, r7, #1
   21648:	4809      	ldr	r0, [pc, #36]	; (21670 <sd_mmc_spi_wait_busy+0x60>)
   2164a:	2201      	movs	r2, #1
   2164c:	4c09      	ldr	r4, [pc, #36]	; (21674 <sd_mmc_spi_wait_busy+0x64>)
   2164e:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   21650:	687b      	ldr	r3, [r7, #4]
   21652:	1e5a      	subs	r2, r3, #1
   21654:	607a      	str	r2, [r7, #4]
   21656:	2b00      	cmp	r3, #0
   21658:	d101      	bne.n	2165e <sd_mmc_spi_wait_busy+0x4e>
			return false;
   2165a:	2300      	movs	r3, #0
   2165c:	e004      	b.n	21668 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   2165e:	1c7b      	adds	r3, r7, #1
   21660:	781b      	ldrb	r3, [r3, #0]
   21662:	2bff      	cmp	r3, #255	; 0xff
   21664:	d1ed      	bne.n	21642 <sd_mmc_spi_wait_busy+0x32>
	return true;
   21666:	2301      	movs	r3, #1
}
   21668:	0018      	movs	r0, r3
   2166a:	46bd      	mov	sp, r7
   2166c:	b003      	add	sp, #12
   2166e:	bd90      	pop	{r4, r7, pc}
   21670:	20003ea0 	.word	0x20003ea0
   21674:	00029f55 	.word	0x00029f55
   21678:	00030d40 	.word	0x00030d40

0002167c <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   2167c:	b590      	push	{r4, r7, lr}
   2167e:	b083      	sub	sp, #12
   21680:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   21682:	1cbb      	adds	r3, r7, #2
   21684:	22ff      	movs	r2, #255	; 0xff
   21686:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   21688:	1c7b      	adds	r3, r7, #1
   2168a:	2200      	movs	r2, #0
   2168c:	701a      	strb	r2, [r3, #0]
	i = 500000;
   2168e:	4b18      	ldr	r3, [pc, #96]	; (216f0 <sd_mmc_spi_start_read_block+0x74>)
   21690:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   21692:	687b      	ldr	r3, [r7, #4]
   21694:	1e5a      	subs	r2, r3, #1
   21696:	607a      	str	r2, [r7, #4]
   21698:	2b00      	cmp	r3, #0
   2169a:	d104      	bne.n	216a6 <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   2169c:	4b15      	ldr	r3, [pc, #84]	; (216f4 <sd_mmc_spi_start_read_block+0x78>)
   2169e:	2204      	movs	r2, #4
   216a0:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   216a2:	2300      	movs	r3, #0
   216a4:	e020      	b.n	216e8 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   216a6:	1cbb      	adds	r3, r7, #2
   216a8:	881b      	ldrh	r3, [r3, #0]
   216aa:	1c79      	adds	r1, r7, #1
   216ac:	4812      	ldr	r0, [pc, #72]	; (216f8 <sd_mmc_spi_start_read_block+0x7c>)
   216ae:	2201      	movs	r2, #1
   216b0:	4c12      	ldr	r4, [pc, #72]	; (216fc <sd_mmc_spi_start_read_block+0x80>)
   216b2:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   216b4:	1c7b      	adds	r3, r7, #1
   216b6:	781b      	ldrb	r3, [r3, #0]
   216b8:	001a      	movs	r2, r3
   216ba:	23f0      	movs	r3, #240	; 0xf0
   216bc:	4013      	ands	r3, r2
   216be:	d10e      	bne.n	216de <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   216c0:	1c7b      	adds	r3, r7, #1
   216c2:	781b      	ldrb	r3, [r3, #0]
   216c4:	001a      	movs	r2, r3
   216c6:	2307      	movs	r3, #7
   216c8:	4013      	ands	r3, r2
   216ca:	d003      	beq.n	216d4 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   216cc:	4b09      	ldr	r3, [pc, #36]	; (216f4 <sd_mmc_spi_start_read_block+0x78>)
   216ce:	2207      	movs	r2, #7
   216d0:	701a      	strb	r2, [r3, #0]
   216d2:	e002      	b.n	216da <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   216d4:	4b07      	ldr	r3, [pc, #28]	; (216f4 <sd_mmc_spi_start_read_block+0x78>)
   216d6:	220b      	movs	r2, #11
   216d8:	701a      	strb	r2, [r3, #0]
			}
			return false;
   216da:	2300      	movs	r3, #0
   216dc:	e004      	b.n	216e8 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   216de:	1c7b      	adds	r3, r7, #1
   216e0:	781b      	ldrb	r3, [r3, #0]
   216e2:	2bfe      	cmp	r3, #254	; 0xfe
   216e4:	d1d5      	bne.n	21692 <sd_mmc_spi_start_read_block+0x16>

	return true;
   216e6:	2301      	movs	r3, #1
}
   216e8:	0018      	movs	r0, r3
   216ea:	46bd      	mov	sp, r7
   216ec:	b003      	add	sp, #12
   216ee:	bd90      	pop	{r4, r7, pc}
   216f0:	0007a120 	.word	0x0007a120
   216f4:	20003eaf 	.word	0x20003eaf
   216f8:	20003ea0 	.word	0x20003ea0
   216fc:	00029f55 	.word	0x00029f55

00021700 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   21700:	b590      	push	{r4, r7, lr}
   21702:	b083      	sub	sp, #12
   21704:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   21706:	1dbb      	adds	r3, r7, #6
   21708:	22ff      	movs	r2, #255	; 0xff
   2170a:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   2170c:	1dbb      	adds	r3, r7, #6
   2170e:	881b      	ldrh	r3, [r3, #0]
   21710:	1d39      	adds	r1, r7, #4
   21712:	4804      	ldr	r0, [pc, #16]	; (21724 <sd_mmc_spi_stop_read_block+0x24>)
   21714:	2202      	movs	r2, #2
   21716:	4c04      	ldr	r4, [pc, #16]	; (21728 <sd_mmc_spi_stop_read_block+0x28>)
   21718:	47a0      	blx	r4
			dummy);
}
   2171a:	46c0      	nop			; (mov r8, r8)
   2171c:	46bd      	mov	sp, r7
   2171e:	b003      	add	sp, #12
   21720:	bd90      	pop	{r4, r7, pc}
   21722:	46c0      	nop			; (mov r8, r8)
   21724:	20003ea0 	.word	0x20003ea0
   21728:	00029f55 	.word	0x00029f55

0002172c <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   2172c:	b580      	push	{r7, lr}
   2172e:	b082      	sub	sp, #8
   21730:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   21732:	1dfb      	adds	r3, r7, #7
   21734:	22ff      	movs	r2, #255	; 0xff
   21736:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   21738:	1df9      	adds	r1, r7, #7
   2173a:	4b0d      	ldr	r3, [pc, #52]	; (21770 <sd_mmc_spi_start_write_block+0x44>)
   2173c:	2201      	movs	r2, #1
   2173e:	0018      	movs	r0, r3
   21740:	4b0c      	ldr	r3, [pc, #48]	; (21774 <sd_mmc_spi_start_write_block+0x48>)
   21742:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   21744:	4b0c      	ldr	r3, [pc, #48]	; (21778 <sd_mmc_spi_start_write_block+0x4c>)
   21746:	881b      	ldrh	r3, [r3, #0]
   21748:	2b01      	cmp	r3, #1
   2174a:	d103      	bne.n	21754 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   2174c:	1dbb      	adds	r3, r7, #6
   2174e:	22fe      	movs	r2, #254	; 0xfe
   21750:	701a      	strb	r2, [r3, #0]
   21752:	e002      	b.n	2175a <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   21754:	1dbb      	adds	r3, r7, #6
   21756:	22fc      	movs	r2, #252	; 0xfc
   21758:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   2175a:	1db9      	adds	r1, r7, #6
   2175c:	4b04      	ldr	r3, [pc, #16]	; (21770 <sd_mmc_spi_start_write_block+0x44>)
   2175e:	2201      	movs	r2, #1
   21760:	0018      	movs	r0, r3
   21762:	4b04      	ldr	r3, [pc, #16]	; (21774 <sd_mmc_spi_start_write_block+0x48>)
   21764:	4798      	blx	r3
}
   21766:	46c0      	nop			; (mov r8, r8)
   21768:	46bd      	mov	sp, r7
   2176a:	b002      	add	sp, #8
   2176c:	bd80      	pop	{r7, pc}
   2176e:	46c0      	nop			; (mov r8, r8)
   21770:	20003ea0 	.word	0x20003ea0
   21774:	0002a1f1 	.word	0x0002a1f1
   21778:	20003eba 	.word	0x20003eba

0002177c <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   2177c:	b590      	push	{r4, r7, lr}
   2177e:	b083      	sub	sp, #12
   21780:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   21782:	1dbb      	adds	r3, r7, #6
   21784:	22ff      	movs	r2, #255	; 0xff
   21786:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   21788:	1cbb      	adds	r3, r7, #2
   2178a:	2201      	movs	r2, #1
   2178c:	4252      	negs	r2, r2
   2178e:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   21790:	1cb9      	adds	r1, r7, #2
   21792:	4b1b      	ldr	r3, [pc, #108]	; (21800 <sd_mmc_spi_stop_write_block+0x84>)
   21794:	2202      	movs	r2, #2
   21796:	0018      	movs	r0, r3
   21798:	4b1a      	ldr	r3, [pc, #104]	; (21804 <sd_mmc_spi_stop_write_block+0x88>)
   2179a:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   2179c:	1dbb      	adds	r3, r7, #6
   2179e:	881b      	ldrh	r3, [r3, #0]
   217a0:	1d79      	adds	r1, r7, #5
   217a2:	4817      	ldr	r0, [pc, #92]	; (21800 <sd_mmc_spi_stop_write_block+0x84>)
   217a4:	2201      	movs	r2, #1
   217a6:	4c18      	ldr	r4, [pc, #96]	; (21808 <sd_mmc_spi_stop_write_block+0x8c>)
   217a8:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   217aa:	1d7b      	adds	r3, r7, #5
   217ac:	781b      	ldrb	r3, [r3, #0]
   217ae:	001a      	movs	r2, r3
   217b0:	2310      	movs	r3, #16
   217b2:	4013      	ands	r3, r2
   217b4:	d105      	bne.n	217c2 <sd_mmc_spi_stop_write_block+0x46>
   217b6:	1d7b      	adds	r3, r7, #5
   217b8:	781b      	ldrb	r3, [r3, #0]
   217ba:	001a      	movs	r2, r3
   217bc:	2301      	movs	r3, #1
   217be:	4013      	ands	r3, r2
   217c0:	d104      	bne.n	217cc <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   217c2:	4b12      	ldr	r3, [pc, #72]	; (2180c <sd_mmc_spi_stop_write_block+0x90>)
   217c4:	2201      	movs	r2, #1
   217c6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   217c8:	2300      	movs	r3, #0
   217ca:	e014      	b.n	217f6 <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   217cc:	1d7b      	adds	r3, r7, #5
   217ce:	781b      	ldrb	r3, [r3, #0]
   217d0:	001a      	movs	r2, r3
   217d2:	231e      	movs	r3, #30
   217d4:	4013      	ands	r3, r2
   217d6:	2b04      	cmp	r3, #4
   217d8:	d00b      	beq.n	217f2 <sd_mmc_spi_stop_write_block+0x76>
   217da:	2b0a      	cmp	r3, #10
   217dc:	d104      	bne.n	217e8 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   217de:	4b0b      	ldr	r3, [pc, #44]	; (2180c <sd_mmc_spi_stop_write_block+0x90>)
   217e0:	2208      	movs	r2, #8
   217e2:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   217e4:	2300      	movs	r3, #0
   217e6:	e006      	b.n	217f6 <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   217e8:	4b08      	ldr	r3, [pc, #32]	; (2180c <sd_mmc_spi_stop_write_block+0x90>)
   217ea:	220a      	movs	r2, #10
   217ec:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   217ee:	2300      	movs	r3, #0
   217f0:	e001      	b.n	217f6 <sd_mmc_spi_stop_write_block+0x7a>
		break;
   217f2:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   217f4:	2301      	movs	r3, #1
}
   217f6:	0018      	movs	r0, r3
   217f8:	46bd      	mov	sp, r7
   217fa:	b003      	add	sp, #12
   217fc:	bd90      	pop	{r4, r7, pc}
   217fe:	46c0      	nop			; (mov r8, r8)
   21800:	20003ea0 	.word	0x20003ea0
   21804:	0002a1f1 	.word	0x0002a1f1
   21808:	00029f55 	.word	0x00029f55
   2180c:	20003eaf 	.word	0x20003eaf

00021810 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   21810:	b590      	push	{r4, r7, lr}
   21812:	b083      	sub	sp, #12
   21814:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   21816:	4b1d      	ldr	r3, [pc, #116]	; (2188c <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   21818:	881b      	ldrh	r3, [r3, #0]
   2181a:	2b01      	cmp	r3, #1
   2181c:	d101      	bne.n	21822 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   2181e:	2301      	movs	r3, #1
   21820:	e030      	b.n	21884 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   21822:	4b1a      	ldr	r3, [pc, #104]	; (2188c <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   21824:	881b      	ldrh	r3, [r3, #0]
   21826:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   21828:	4b19      	ldr	r3, [pc, #100]	; (21890 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   2182a:	681a      	ldr	r2, [r3, #0]
   2182c:	4b19      	ldr	r3, [pc, #100]	; (21894 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   2182e:	881b      	ldrh	r3, [r3, #0]
   21830:	0019      	movs	r1, r3
   21832:	4b19      	ldr	r3, [pc, #100]	; (21898 <sd_mmc_spi_stop_multiwrite_block+0x88>)
   21834:	0010      	movs	r0, r2
   21836:	4798      	blx	r3
   21838:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   2183a:	429c      	cmp	r4, r3
   2183c:	d901      	bls.n	21842 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   2183e:	2301      	movs	r3, #1
   21840:	e020      	b.n	21884 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   21842:	1dfb      	adds	r3, r7, #7
   21844:	22ff      	movs	r2, #255	; 0xff
   21846:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   21848:	1df9      	adds	r1, r7, #7
   2184a:	4b14      	ldr	r3, [pc, #80]	; (2189c <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   2184c:	2201      	movs	r2, #1
   2184e:	0018      	movs	r0, r3
   21850:	4b13      	ldr	r3, [pc, #76]	; (218a0 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   21852:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   21854:	1dfb      	adds	r3, r7, #7
   21856:	22fd      	movs	r2, #253	; 0xfd
   21858:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   2185a:	1df9      	adds	r1, r7, #7
   2185c:	4b0f      	ldr	r3, [pc, #60]	; (2189c <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   2185e:	2201      	movs	r2, #1
   21860:	0018      	movs	r0, r3
   21862:	4b0f      	ldr	r3, [pc, #60]	; (218a0 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   21864:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   21866:	4b0f      	ldr	r3, [pc, #60]	; (218a4 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   21868:	4798      	blx	r3
   2186a:	0003      	movs	r3, r0
   2186c:	001a      	movs	r2, r3
   2186e:	2301      	movs	r3, #1
   21870:	4053      	eors	r3, r2
   21872:	b2db      	uxtb	r3, r3
   21874:	2b00      	cmp	r3, #0
   21876:	d004      	beq.n	21882 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   21878:	4b0b      	ldr	r3, [pc, #44]	; (218a8 <sd_mmc_spi_stop_multiwrite_block+0x98>)
   2187a:	2205      	movs	r2, #5
   2187c:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   2187e:	2300      	movs	r3, #0
   21880:	e000      	b.n	21884 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   21882:	2301      	movs	r3, #1
}
   21884:	0018      	movs	r0, r3
   21886:	46bd      	mov	sp, r7
   21888:	b003      	add	sp, #12
   2188a:	bd90      	pop	{r4, r7, pc}
   2188c:	20003eba 	.word	0x20003eba
   21890:	20003eb4 	.word	0x20003eb4
   21894:	20003eb8 	.word	0x20003eb8
   21898:	00034759 	.word	0x00034759
   2189c:	20003ea0 	.word	0x20003ea0
   218a0:	0002a1f1 	.word	0x0002a1f1
   218a4:	00021611 	.word	0x00021611
   218a8:	20003eaf 	.word	0x20003eaf

000218ac <sd_mmc_spi_select_device>:
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   218ac:	b590      	push	{r4, r7, lr}
   218ae:	b083      	sub	sp, #12
   218b0:	af00      	add	r7, sp, #0
   218b2:	0004      	movs	r4, r0
   218b4:	6039      	str	r1, [r7, #0]
   218b6:	0010      	movs	r0, r2
   218b8:	0019      	movs	r1, r3
   218ba:	1dfb      	adds	r3, r7, #7
   218bc:	1c22      	adds	r2, r4, #0
   218be:	701a      	strb	r2, [r3, #0]
   218c0:	1dbb      	adds	r3, r7, #6
   218c2:	1c02      	adds	r2, r0, #0
   218c4:	701a      	strb	r2, [r3, #0]
   218c6:	1d7b      	adds	r3, r7, #5
   218c8:	1c0a      	adds	r2, r1, #0
   218ca:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   218cc:	4b13      	ldr	r3, [pc, #76]	; (2191c <sd_mmc_spi_select_device+0x70>)
   218ce:	2200      	movs	r2, #0
   218d0:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   218d2:	683b      	ldr	r3, [r7, #0]
   218d4:	4a12      	ldr	r2, [pc, #72]	; (21920 <sd_mmc_spi_select_device+0x74>)
   218d6:	4293      	cmp	r3, r2
   218d8:	d907      	bls.n	218ea <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   218da:	4b11      	ldr	r3, [pc, #68]	; (21920 <sd_mmc_spi_select_device+0x74>)
   218dc:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   218de:	e004      	b.n	218ea <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   218e0:	683b      	ldr	r3, [r7, #0]
   218e2:	08db      	lsrs	r3, r3, #3
   218e4:	683a      	ldr	r2, [r7, #0]
   218e6:	1ad3      	subs	r3, r2, r3
   218e8:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   218ea:	683a      	ldr	r2, [r7, #0]
   218ec:	4b0d      	ldr	r3, [pc, #52]	; (21924 <sd_mmc_spi_select_device+0x78>)
   218ee:	0011      	movs	r1, r2
   218f0:	0018      	movs	r0, r3
   218f2:	4b0d      	ldr	r3, [pc, #52]	; (21928 <sd_mmc_spi_select_device+0x7c>)
   218f4:	4798      	blx	r3
   218f6:	0003      	movs	r3, r0
   218f8:	2b17      	cmp	r3, #23
   218fa:	d0f1      	beq.n	218e0 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   218fc:	1dfb      	adds	r3, r7, #7
   218fe:	781a      	ldrb	r2, [r3, #0]
   21900:	0013      	movs	r3, r2
   21902:	005b      	lsls	r3, r3, #1
   21904:	189b      	adds	r3, r3, r2
   21906:	4a09      	ldr	r2, [pc, #36]	; (2192c <sd_mmc_spi_select_device+0x80>)
   21908:	1899      	adds	r1, r3, r2
   2190a:	4b06      	ldr	r3, [pc, #24]	; (21924 <sd_mmc_spi_select_device+0x78>)
   2190c:	2201      	movs	r2, #1
   2190e:	0018      	movs	r0, r3
   21910:	4b07      	ldr	r3, [pc, #28]	; (21930 <sd_mmc_spi_select_device+0x84>)
   21912:	4798      	blx	r3
}
   21914:	46c0      	nop			; (mov r8, r8)
   21916:	46bd      	mov	sp, r7
   21918:	b003      	add	sp, #12
   2191a:	bd90      	pop	{r4, r7, pc}
   2191c:	20003eaf 	.word	0x20003eaf
   21920:	00989680 	.word	0x00989680
   21924:	20003ea0 	.word	0x20003ea0
   21928:	000298e5 	.word	0x000298e5
   2192c:	20003eac 	.word	0x20003eac
   21930:	0002a101 	.word	0x0002a101

00021934 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   21934:	b580      	push	{r7, lr}
   21936:	b082      	sub	sp, #8
   21938:	af00      	add	r7, sp, #0
   2193a:	0002      	movs	r2, r0
   2193c:	1dfb      	adds	r3, r7, #7
   2193e:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   21940:	4b09      	ldr	r3, [pc, #36]	; (21968 <sd_mmc_spi_deselect_device+0x34>)
   21942:	2200      	movs	r2, #0
   21944:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   21946:	1dfb      	adds	r3, r7, #7
   21948:	781a      	ldrb	r2, [r3, #0]
   2194a:	0013      	movs	r3, r2
   2194c:	005b      	lsls	r3, r3, #1
   2194e:	189b      	adds	r3, r3, r2
   21950:	4a06      	ldr	r2, [pc, #24]	; (2196c <sd_mmc_spi_deselect_device+0x38>)
   21952:	1899      	adds	r1, r3, r2
   21954:	4b06      	ldr	r3, [pc, #24]	; (21970 <sd_mmc_spi_deselect_device+0x3c>)
   21956:	2200      	movs	r2, #0
   21958:	0018      	movs	r0, r3
   2195a:	4b06      	ldr	r3, [pc, #24]	; (21974 <sd_mmc_spi_deselect_device+0x40>)
   2195c:	4798      	blx	r3
}
   2195e:	46c0      	nop			; (mov r8, r8)
   21960:	46bd      	mov	sp, r7
   21962:	b002      	add	sp, #8
   21964:	bd80      	pop	{r7, pc}
   21966:	46c0      	nop			; (mov r8, r8)
   21968:	20003eaf 	.word	0x20003eaf
   2196c:	20003eac 	.word	0x20003eac
   21970:	20003ea0 	.word	0x20003ea0
   21974:	0002a101 	.word	0x0002a101

00021978 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   21978:	b580      	push	{r7, lr}
   2197a:	b082      	sub	sp, #8
   2197c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   2197e:	1dbb      	adds	r3, r7, #6
   21980:	22ff      	movs	r2, #255	; 0xff
   21982:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   21984:	4b0c      	ldr	r3, [pc, #48]	; (219b8 <sd_mmc_spi_send_clock+0x40>)
   21986:	2200      	movs	r2, #0
   21988:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   2198a:	1dfb      	adds	r3, r7, #7
   2198c:	2200      	movs	r2, #0
   2198e:	701a      	strb	r2, [r3, #0]
   21990:	e00a      	b.n	219a8 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   21992:	1db9      	adds	r1, r7, #6
   21994:	4b09      	ldr	r3, [pc, #36]	; (219bc <sd_mmc_spi_send_clock+0x44>)
   21996:	2201      	movs	r2, #1
   21998:	0018      	movs	r0, r3
   2199a:	4b09      	ldr	r3, [pc, #36]	; (219c0 <sd_mmc_spi_send_clock+0x48>)
   2199c:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   2199e:	1dfb      	adds	r3, r7, #7
   219a0:	781a      	ldrb	r2, [r3, #0]
   219a2:	1dfb      	adds	r3, r7, #7
   219a4:	3201      	adds	r2, #1
   219a6:	701a      	strb	r2, [r3, #0]
   219a8:	1dfb      	adds	r3, r7, #7
   219aa:	781b      	ldrb	r3, [r3, #0]
   219ac:	2b09      	cmp	r3, #9
   219ae:	d9f0      	bls.n	21992 <sd_mmc_spi_send_clock+0x1a>
	}
}
   219b0:	46c0      	nop			; (mov r8, r8)
   219b2:	46bd      	mov	sp, r7
   219b4:	b002      	add	sp, #8
   219b6:	bd80      	pop	{r7, pc}
   219b8:	20003eaf 	.word	0x20003eaf
   219bc:	20003ea0 	.word	0x20003ea0
   219c0:	0002a1f1 	.word	0x0002a1f1

000219c4 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   219c4:	b590      	push	{r4, r7, lr}
   219c6:	b085      	sub	sp, #20
   219c8:	af02      	add	r7, sp, #8
   219ca:	6078      	str	r0, [r7, #4]
   219cc:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   219ce:	6839      	ldr	r1, [r7, #0]
   219d0:	6878      	ldr	r0, [r7, #4]
   219d2:	2300      	movs	r3, #0
   219d4:	9300      	str	r3, [sp, #0]
   219d6:	2300      	movs	r3, #0
   219d8:	2200      	movs	r2, #0
   219da:	4c03      	ldr	r4, [pc, #12]	; (219e8 <sd_mmc_spi_send_cmd+0x24>)
   219dc:	47a0      	blx	r4
   219de:	0003      	movs	r3, r0
}
   219e0:	0018      	movs	r0, r3
   219e2:	46bd      	mov	sp, r7
   219e4:	b003      	add	sp, #12
   219e6:	bd90      	pop	{r4, r7, pc}
   219e8:	000219ed 	.word	0x000219ed

000219ec <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   219ec:	b590      	push	{r4, r7, lr}
   219ee:	b089      	sub	sp, #36	; 0x24
   219f0:	af00      	add	r7, sp, #0
   219f2:	60f8      	str	r0, [r7, #12]
   219f4:	60b9      	str	r1, [r7, #8]
   219f6:	0019      	movs	r1, r3
   219f8:	1dbb      	adds	r3, r7, #6
   219fa:	801a      	strh	r2, [r3, #0]
   219fc:	1d3b      	adds	r3, r7, #4
   219fe:	1c0a      	adds	r2, r1, #0
   21a00:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   21a02:	231b      	movs	r3, #27
   21a04:	18fb      	adds	r3, r7, r3
   21a06:	22ff      	movs	r2, #255	; 0xff
   21a08:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   21a0a:	231c      	movs	r3, #28
   21a0c:	18fb      	adds	r3, r7, r3
   21a0e:	22ff      	movs	r2, #255	; 0xff
   21a10:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   21a12:	4b72      	ldr	r3, [pc, #456]	; (21bdc <sd_mmc_spi_adtc_start+0x1f0>)
   21a14:	2200      	movs	r2, #0
   21a16:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   21a18:	68fb      	ldr	r3, [r7, #12]
   21a1a:	b2db      	uxtb	r3, r3
   21a1c:	223f      	movs	r2, #63	; 0x3f
   21a1e:	4013      	ands	r3, r2
   21a20:	b2db      	uxtb	r3, r3
   21a22:	2240      	movs	r2, #64	; 0x40
   21a24:	4313      	orrs	r3, r2
   21a26:	b2da      	uxtb	r2, r3
   21a28:	2314      	movs	r3, #20
   21a2a:	18fb      	adds	r3, r7, r3
   21a2c:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   21a2e:	68bb      	ldr	r3, [r7, #8]
   21a30:	0e1b      	lsrs	r3, r3, #24
   21a32:	b2da      	uxtb	r2, r3
   21a34:	2314      	movs	r3, #20
   21a36:	18fb      	adds	r3, r7, r3
   21a38:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   21a3a:	68bb      	ldr	r3, [r7, #8]
   21a3c:	0c1b      	lsrs	r3, r3, #16
   21a3e:	b2da      	uxtb	r2, r3
   21a40:	2314      	movs	r3, #20
   21a42:	18fb      	adds	r3, r7, r3
   21a44:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   21a46:	68bb      	ldr	r3, [r7, #8]
   21a48:	0a1b      	lsrs	r3, r3, #8
   21a4a:	b2da      	uxtb	r2, r3
   21a4c:	2314      	movs	r3, #20
   21a4e:	18fb      	adds	r3, r7, r3
   21a50:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   21a52:	68bb      	ldr	r3, [r7, #8]
   21a54:	b2da      	uxtb	r2, r3
   21a56:	2314      	movs	r3, #20
   21a58:	18fb      	adds	r3, r7, r3
   21a5a:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   21a5c:	2314      	movs	r3, #20
   21a5e:	18fb      	adds	r3, r7, r3
   21a60:	2105      	movs	r1, #5
   21a62:	0018      	movs	r0, r3
   21a64:	4b5e      	ldr	r3, [pc, #376]	; (21be0 <sd_mmc_spi_adtc_start+0x1f4>)
   21a66:	4798      	blx	r3
   21a68:	0003      	movs	r3, r0
   21a6a:	001a      	movs	r2, r3
   21a6c:	2314      	movs	r3, #20
   21a6e:	18fb      	adds	r3, r7, r3
   21a70:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   21a72:	231b      	movs	r3, #27
   21a74:	18f9      	adds	r1, r7, r3
   21a76:	4b5b      	ldr	r3, [pc, #364]	; (21be4 <sd_mmc_spi_adtc_start+0x1f8>)
   21a78:	2201      	movs	r2, #1
   21a7a:	0018      	movs	r0, r3
   21a7c:	4b5a      	ldr	r3, [pc, #360]	; (21be8 <sd_mmc_spi_adtc_start+0x1fc>)
   21a7e:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   21a80:	2314      	movs	r3, #20
   21a82:	18f9      	adds	r1, r7, r3
   21a84:	4b57      	ldr	r3, [pc, #348]	; (21be4 <sd_mmc_spi_adtc_start+0x1f8>)
   21a86:	2206      	movs	r2, #6
   21a88:	0018      	movs	r0, r3
   21a8a:	4b57      	ldr	r3, [pc, #348]	; (21be8 <sd_mmc_spi_adtc_start+0x1fc>)
   21a8c:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   21a8e:	2313      	movs	r3, #19
   21a90:	18fb      	adds	r3, r7, r3
   21a92:	22ff      	movs	r2, #255	; 0xff
   21a94:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   21a96:	231c      	movs	r3, #28
   21a98:	18fb      	adds	r3, r7, r3
   21a9a:	881b      	ldrh	r3, [r3, #0]
   21a9c:	2213      	movs	r2, #19
   21a9e:	18b9      	adds	r1, r7, r2
   21aa0:	4850      	ldr	r0, [pc, #320]	; (21be4 <sd_mmc_spi_adtc_start+0x1f8>)
   21aa2:	2201      	movs	r2, #1
   21aa4:	4c51      	ldr	r4, [pc, #324]	; (21bec <sd_mmc_spi_adtc_start+0x200>)
   21aa6:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   21aa8:	231f      	movs	r3, #31
   21aaa:	18fb      	adds	r3, r7, r3
   21aac:	2207      	movs	r2, #7
   21aae:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   21ab0:	231c      	movs	r3, #28
   21ab2:	18fb      	adds	r3, r7, r3
   21ab4:	881b      	ldrh	r3, [r3, #0]
   21ab6:	2213      	movs	r2, #19
   21ab8:	18b9      	adds	r1, r7, r2
   21aba:	484a      	ldr	r0, [pc, #296]	; (21be4 <sd_mmc_spi_adtc_start+0x1f8>)
   21abc:	2201      	movs	r2, #1
   21abe:	4c4b      	ldr	r4, [pc, #300]	; (21bec <sd_mmc_spi_adtc_start+0x200>)
   21ac0:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   21ac2:	2313      	movs	r3, #19
   21ac4:	18fb      	adds	r3, r7, r3
   21ac6:	781b      	ldrb	r3, [r3, #0]
   21ac8:	b25b      	sxtb	r3, r3
   21aca:	2b00      	cmp	r3, #0
   21acc:	da10      	bge.n	21af0 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   21ace:	231f      	movs	r3, #31
   21ad0:	18fb      	adds	r3, r7, r3
   21ad2:	221f      	movs	r2, #31
   21ad4:	18ba      	adds	r2, r7, r2
   21ad6:	7812      	ldrb	r2, [r2, #0]
   21ad8:	3a01      	subs	r2, #1
   21ada:	701a      	strb	r2, [r3, #0]
   21adc:	231f      	movs	r3, #31
   21ade:	18fb      	adds	r3, r7, r3
   21ae0:	781b      	ldrb	r3, [r3, #0]
   21ae2:	2b00      	cmp	r3, #0
   21ae4:	d1e4      	bne.n	21ab0 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   21ae6:	4b3d      	ldr	r3, [pc, #244]	; (21bdc <sd_mmc_spi_adtc_start+0x1f0>)
   21ae8:	2202      	movs	r2, #2
   21aea:	701a      	strb	r2, [r3, #0]
			return false;
   21aec:	2300      	movs	r3, #0
   21aee:	e070      	b.n	21bd2 <sd_mmc_spi_adtc_start+0x1e6>
			break;
   21af0:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   21af2:	2313      	movs	r3, #19
   21af4:	18fb      	adds	r3, r7, r3
   21af6:	781b      	ldrb	r3, [r3, #0]
   21af8:	001a      	movs	r2, r3
   21afa:	4b3d      	ldr	r3, [pc, #244]	; (21bf0 <sd_mmc_spi_adtc_start+0x204>)
   21afc:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   21afe:	2313      	movs	r3, #19
   21b00:	18fb      	adds	r3, r7, r3
   21b02:	781b      	ldrb	r3, [r3, #0]
   21b04:	001a      	movs	r2, r3
   21b06:	2308      	movs	r3, #8
   21b08:	4013      	ands	r3, r2
   21b0a:	d004      	beq.n	21b16 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   21b0c:	4b33      	ldr	r3, [pc, #204]	; (21bdc <sd_mmc_spi_adtc_start+0x1f0>)
   21b0e:	2206      	movs	r2, #6
   21b10:	701a      	strb	r2, [r3, #0]
		return false;
   21b12:	2300      	movs	r3, #0
   21b14:	e05d      	b.n	21bd2 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   21b16:	2313      	movs	r3, #19
   21b18:	18fb      	adds	r3, r7, r3
   21b1a:	781b      	ldrb	r3, [r3, #0]
   21b1c:	001a      	movs	r2, r3
   21b1e:	2304      	movs	r3, #4
   21b20:	4013      	ands	r3, r2
   21b22:	d004      	beq.n	21b2e <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   21b24:	4b2d      	ldr	r3, [pc, #180]	; (21bdc <sd_mmc_spi_adtc_start+0x1f0>)
   21b26:	2209      	movs	r2, #9
   21b28:	701a      	strb	r2, [r3, #0]
		return false;
   21b2a:	2300      	movs	r3, #0
   21b2c:	e051      	b.n	21bd2 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   21b2e:	2313      	movs	r3, #19
   21b30:	18fb      	adds	r3, r7, r3
   21b32:	781b      	ldrb	r3, [r3, #0]
   21b34:	001a      	movs	r2, r3
   21b36:	2301      	movs	r3, #1
   21b38:	439a      	bics	r2, r3
   21b3a:	1e13      	subs	r3, r2, #0
   21b3c:	d004      	beq.n	21b48 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   21b3e:	4b27      	ldr	r3, [pc, #156]	; (21bdc <sd_mmc_spi_adtc_start+0x1f0>)
   21b40:	2201      	movs	r2, #1
   21b42:	701a      	strb	r2, [r3, #0]
		return false;
   21b44:	2300      	movs	r3, #0
   21b46:	e044      	b.n	21bd2 <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   21b48:	68fa      	ldr	r2, [r7, #12]
   21b4a:	2380      	movs	r3, #128	; 0x80
   21b4c:	019b      	lsls	r3, r3, #6
   21b4e:	4013      	ands	r3, r2
   21b50:	d00d      	beq.n	21b6e <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   21b52:	4b28      	ldr	r3, [pc, #160]	; (21bf4 <sd_mmc_spi_adtc_start+0x208>)
   21b54:	4798      	blx	r3
   21b56:	0003      	movs	r3, r0
   21b58:	001a      	movs	r2, r3
   21b5a:	2301      	movs	r3, #1
   21b5c:	4053      	eors	r3, r2
   21b5e:	b2db      	uxtb	r3, r3
   21b60:	2b00      	cmp	r3, #0
   21b62:	d004      	beq.n	21b6e <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   21b64:	4b1d      	ldr	r3, [pc, #116]	; (21bdc <sd_mmc_spi_adtc_start+0x1f0>)
   21b66:	2203      	movs	r2, #3
   21b68:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   21b6a:	2300      	movs	r3, #0
   21b6c:	e031      	b.n	21bd2 <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   21b6e:	68fa      	ldr	r2, [r7, #12]
   21b70:	2380      	movs	r3, #128	; 0x80
   21b72:	009b      	lsls	r3, r3, #2
   21b74:	4013      	ands	r3, r2
   21b76:	d00e      	beq.n	21b96 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   21b78:	4b1d      	ldr	r3, [pc, #116]	; (21bf0 <sd_mmc_spi_adtc_start+0x204>)
   21b7a:	2200      	movs	r2, #0
   21b7c:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   21b7e:	231c      	movs	r3, #28
   21b80:	18fb      	adds	r3, r7, r3
   21b82:	881b      	ldrh	r3, [r3, #0]
   21b84:	491a      	ldr	r1, [pc, #104]	; (21bf0 <sd_mmc_spi_adtc_start+0x204>)
   21b86:	4817      	ldr	r0, [pc, #92]	; (21be4 <sd_mmc_spi_adtc_start+0x1f8>)
   21b88:	2201      	movs	r2, #1
   21b8a:	4c18      	ldr	r4, [pc, #96]	; (21bec <sd_mmc_spi_adtc_start+0x200>)
   21b8c:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   21b8e:	4b18      	ldr	r3, [pc, #96]	; (21bf0 <sd_mmc_spi_adtc_start+0x204>)
   21b90:	681a      	ldr	r2, [r3, #0]
   21b92:	4b17      	ldr	r3, [pc, #92]	; (21bf0 <sd_mmc_spi_adtc_start+0x204>)
   21b94:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   21b96:	68fa      	ldr	r2, [r7, #12]
   21b98:	2380      	movs	r3, #128	; 0x80
   21b9a:	00db      	lsls	r3, r3, #3
   21b9c:	4013      	ands	r3, r2
   21b9e:	d00c      	beq.n	21bba <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   21ba0:	231c      	movs	r3, #28
   21ba2:	18fb      	adds	r3, r7, r3
   21ba4:	881b      	ldrh	r3, [r3, #0]
   21ba6:	4912      	ldr	r1, [pc, #72]	; (21bf0 <sd_mmc_spi_adtc_start+0x204>)
   21ba8:	480e      	ldr	r0, [pc, #56]	; (21be4 <sd_mmc_spi_adtc_start+0x1f8>)
   21baa:	2204      	movs	r2, #4
   21bac:	4c0f      	ldr	r4, [pc, #60]	; (21bec <sd_mmc_spi_adtc_start+0x200>)
   21bae:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   21bb0:	4b0f      	ldr	r3, [pc, #60]	; (21bf0 <sd_mmc_spi_adtc_start+0x204>)
   21bb2:	681b      	ldr	r3, [r3, #0]
   21bb4:	ba1a      	rev	r2, r3
   21bb6:	4b0e      	ldr	r3, [pc, #56]	; (21bf0 <sd_mmc_spi_adtc_start+0x204>)
   21bb8:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   21bba:	4b0f      	ldr	r3, [pc, #60]	; (21bf8 <sd_mmc_spi_adtc_start+0x20c>)
   21bbc:	1dba      	adds	r2, r7, #6
   21bbe:	8812      	ldrh	r2, [r2, #0]
   21bc0:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   21bc2:	4b0e      	ldr	r3, [pc, #56]	; (21bfc <sd_mmc_spi_adtc_start+0x210>)
   21bc4:	1d3a      	adds	r2, r7, #4
   21bc6:	8812      	ldrh	r2, [r2, #0]
   21bc8:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   21bca:	4b0d      	ldr	r3, [pc, #52]	; (21c00 <sd_mmc_spi_adtc_start+0x214>)
   21bcc:	2200      	movs	r2, #0
   21bce:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   21bd0:	2301      	movs	r3, #1
}
   21bd2:	0018      	movs	r0, r3
   21bd4:	46bd      	mov	sp, r7
   21bd6:	b009      	add	sp, #36	; 0x24
   21bd8:	bd90      	pop	{r4, r7, pc}
   21bda:	46c0      	nop			; (mov r8, r8)
   21bdc:	20003eaf 	.word	0x20003eaf
   21be0:	00021555 	.word	0x00021555
   21be4:	20003ea0 	.word	0x20003ea0
   21be8:	0002a1f1 	.word	0x0002a1f1
   21bec:	00029f55 	.word	0x00029f55
   21bf0:	20003eb0 	.word	0x20003eb0
   21bf4:	00021611 	.word	0x00021611
   21bf8:	20003eb8 	.word	0x20003eb8
   21bfc:	20003eba 	.word	0x20003eba
   21c00:	20003eb4 	.word	0x20003eb4

00021c04 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   21c04:	b580      	push	{r7, lr}
   21c06:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   21c08:	4b02      	ldr	r3, [pc, #8]	; (21c14 <sd_mmc_spi_get_response+0x10>)
   21c0a:	681b      	ldr	r3, [r3, #0]
}
   21c0c:	0018      	movs	r0, r3
   21c0e:	46bd      	mov	sp, r7
   21c10:	bd80      	pop	{r7, pc}
   21c12:	46c0      	nop			; (mov r8, r8)
   21c14:	20003eb0 	.word	0x20003eb0

00021c18 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   21c18:	b590      	push	{r4, r7, lr}
   21c1a:	b085      	sub	sp, #20
   21c1c:	af00      	add	r7, sp, #0
   21c1e:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   21c20:	230e      	movs	r3, #14
   21c22:	18fb      	adds	r3, r7, r3
   21c24:	22ff      	movs	r2, #255	; 0xff
   21c26:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   21c28:	4b1c      	ldr	r3, [pc, #112]	; (21c9c <sd_mmc_spi_read_word+0x84>)
   21c2a:	2200      	movs	r2, #0
   21c2c:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   21c2e:	4b1c      	ldr	r3, [pc, #112]	; (21ca0 <sd_mmc_spi_read_word+0x88>)
   21c30:	681a      	ldr	r2, [r3, #0]
   21c32:	4b1c      	ldr	r3, [pc, #112]	; (21ca4 <sd_mmc_spi_read_word+0x8c>)
   21c34:	881b      	ldrh	r3, [r3, #0]
   21c36:	0019      	movs	r1, r3
   21c38:	4b1b      	ldr	r3, [pc, #108]	; (21ca8 <sd_mmc_spi_read_word+0x90>)
   21c3a:	0010      	movs	r0, r2
   21c3c:	4798      	blx	r3
   21c3e:	1e0b      	subs	r3, r1, #0
   21c40:	d10a      	bne.n	21c58 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   21c42:	4b1a      	ldr	r3, [pc, #104]	; (21cac <sd_mmc_spi_read_word+0x94>)
   21c44:	4798      	blx	r3
   21c46:	0003      	movs	r3, r0
   21c48:	001a      	movs	r2, r3
   21c4a:	2301      	movs	r3, #1
   21c4c:	4053      	eors	r3, r2
   21c4e:	b2db      	uxtb	r3, r3
   21c50:	2b00      	cmp	r3, #0
   21c52:	d001      	beq.n	21c58 <sd_mmc_spi_read_word+0x40>
			return false;
   21c54:	2300      	movs	r3, #0
   21c56:	e01d      	b.n	21c94 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   21c58:	230e      	movs	r3, #14
   21c5a:	18fb      	adds	r3, r7, r3
   21c5c:	881b      	ldrh	r3, [r3, #0]
   21c5e:	1d39      	adds	r1, r7, #4
   21c60:	4813      	ldr	r0, [pc, #76]	; (21cb0 <sd_mmc_spi_read_word+0x98>)
   21c62:	2204      	movs	r2, #4
   21c64:	4c13      	ldr	r4, [pc, #76]	; (21cb4 <sd_mmc_spi_read_word+0x9c>)
   21c66:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   21c68:	687b      	ldr	r3, [r7, #4]
   21c6a:	687a      	ldr	r2, [r7, #4]
   21c6c:	6812      	ldr	r2, [r2, #0]
   21c6e:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   21c70:	4b0b      	ldr	r3, [pc, #44]	; (21ca0 <sd_mmc_spi_read_word+0x88>)
   21c72:	681b      	ldr	r3, [r3, #0]
   21c74:	1d1a      	adds	r2, r3, #4
   21c76:	4b0a      	ldr	r3, [pc, #40]	; (21ca0 <sd_mmc_spi_read_word+0x88>)
   21c78:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   21c7a:	4b09      	ldr	r3, [pc, #36]	; (21ca0 <sd_mmc_spi_read_word+0x88>)
   21c7c:	681a      	ldr	r2, [r3, #0]
   21c7e:	4b09      	ldr	r3, [pc, #36]	; (21ca4 <sd_mmc_spi_read_word+0x8c>)
   21c80:	881b      	ldrh	r3, [r3, #0]
   21c82:	0019      	movs	r1, r3
   21c84:	4b08      	ldr	r3, [pc, #32]	; (21ca8 <sd_mmc_spi_read_word+0x90>)
   21c86:	0010      	movs	r0, r2
   21c88:	4798      	blx	r3
   21c8a:	1e0b      	subs	r3, r1, #0
   21c8c:	d101      	bne.n	21c92 <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   21c8e:	4b0a      	ldr	r3, [pc, #40]	; (21cb8 <sd_mmc_spi_read_word+0xa0>)
   21c90:	4798      	blx	r3
	}
	return true;
   21c92:	2301      	movs	r3, #1
}
   21c94:	0018      	movs	r0, r3
   21c96:	46bd      	mov	sp, r7
   21c98:	b005      	add	sp, #20
   21c9a:	bd90      	pop	{r4, r7, pc}
   21c9c:	20003eaf 	.word	0x20003eaf
   21ca0:	20003eb4 	.word	0x20003eb4
   21ca4:	20003eb8 	.word	0x20003eb8
   21ca8:	00034865 	.word	0x00034865
   21cac:	0002167d 	.word	0x0002167d
   21cb0:	20003ea0 	.word	0x20003ea0
   21cb4:	00029f55 	.word	0x00029f55
   21cb8:	00021701 	.word	0x00021701

00021cbc <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   21cbc:	b590      	push	{r4, r7, lr}
   21cbe:	b085      	sub	sp, #20
   21cc0:	af00      	add	r7, sp, #0
   21cc2:	6078      	str	r0, [r7, #4]
   21cc4:	000a      	movs	r2, r1
   21cc6:	1cbb      	adds	r3, r7, #2
   21cc8:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   21cca:	230a      	movs	r3, #10
   21ccc:	18fb      	adds	r3, r7, r3
   21cce:	22ff      	movs	r2, #255	; 0xff
   21cd0:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   21cd2:	4b1c      	ldr	r3, [pc, #112]	; (21d44 <sd_mmc_spi_start_read_blocks+0x88>)
   21cd4:	2200      	movs	r2, #0
   21cd6:	701a      	strb	r2, [r3, #0]
	pos = 0;
   21cd8:	2300      	movs	r3, #0
   21cda:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   21cdc:	e025      	b.n	21d2a <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   21cde:	4b1a      	ldr	r3, [pc, #104]	; (21d48 <sd_mmc_spi_start_read_blocks+0x8c>)
   21ce0:	4798      	blx	r3
   21ce2:	0003      	movs	r3, r0
   21ce4:	001a      	movs	r2, r3
   21ce6:	2301      	movs	r3, #1
   21ce8:	4053      	eors	r3, r2
   21cea:	b2db      	uxtb	r3, r3
   21cec:	2b00      	cmp	r3, #0
   21cee:	d001      	beq.n	21cf4 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   21cf0:	2300      	movs	r3, #0
   21cf2:	e022      	b.n	21d3a <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   21cf4:	687a      	ldr	r2, [r7, #4]
   21cf6:	68fb      	ldr	r3, [r7, #12]
   21cf8:	18d1      	adds	r1, r2, r3
   21cfa:	4b14      	ldr	r3, [pc, #80]	; (21d4c <sd_mmc_spi_start_read_blocks+0x90>)
   21cfc:	881a      	ldrh	r2, [r3, #0]
   21cfe:	230a      	movs	r3, #10
   21d00:	18fb      	adds	r3, r7, r3
   21d02:	881b      	ldrh	r3, [r3, #0]
   21d04:	4812      	ldr	r0, [pc, #72]	; (21d50 <sd_mmc_spi_start_read_blocks+0x94>)
   21d06:	4c13      	ldr	r4, [pc, #76]	; (21d54 <sd_mmc_spi_start_read_blocks+0x98>)
   21d08:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   21d0a:	4b10      	ldr	r3, [pc, #64]	; (21d4c <sd_mmc_spi_start_read_blocks+0x90>)
   21d0c:	881b      	ldrh	r3, [r3, #0]
   21d0e:	001a      	movs	r2, r3
   21d10:	68fb      	ldr	r3, [r7, #12]
   21d12:	189b      	adds	r3, r3, r2
   21d14:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   21d16:	4b0d      	ldr	r3, [pc, #52]	; (21d4c <sd_mmc_spi_start_read_blocks+0x90>)
   21d18:	881b      	ldrh	r3, [r3, #0]
   21d1a:	001a      	movs	r2, r3
   21d1c:	4b0e      	ldr	r3, [pc, #56]	; (21d58 <sd_mmc_spi_start_read_blocks+0x9c>)
   21d1e:	681b      	ldr	r3, [r3, #0]
   21d20:	18d2      	adds	r2, r2, r3
   21d22:	4b0d      	ldr	r3, [pc, #52]	; (21d58 <sd_mmc_spi_start_read_blocks+0x9c>)
   21d24:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   21d26:	4b0d      	ldr	r3, [pc, #52]	; (21d5c <sd_mmc_spi_start_read_blocks+0xa0>)
   21d28:	4798      	blx	r3
	while (nb_block--) {
   21d2a:	1cbb      	adds	r3, r7, #2
   21d2c:	881b      	ldrh	r3, [r3, #0]
   21d2e:	1cba      	adds	r2, r7, #2
   21d30:	1e59      	subs	r1, r3, #1
   21d32:	8011      	strh	r1, [r2, #0]
   21d34:	2b00      	cmp	r3, #0
   21d36:	d1d2      	bne.n	21cde <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   21d38:	2301      	movs	r3, #1
}
   21d3a:	0018      	movs	r0, r3
   21d3c:	46bd      	mov	sp, r7
   21d3e:	b005      	add	sp, #20
   21d40:	bd90      	pop	{r4, r7, pc}
   21d42:	46c0      	nop			; (mov r8, r8)
   21d44:	20003eaf 	.word	0x20003eaf
   21d48:	0002167d 	.word	0x0002167d
   21d4c:	20003eb8 	.word	0x20003eb8
   21d50:	20003ea0 	.word	0x20003ea0
   21d54:	00029f55 	.word	0x00029f55
   21d58:	20003eb4 	.word	0x20003eb4
   21d5c:	00021701 	.word	0x00021701

00021d60 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   21d60:	b580      	push	{r7, lr}
   21d62:	af00      	add	r7, sp, #0
	return true;
   21d64:	2301      	movs	r3, #1
}
   21d66:	0018      	movs	r0, r3
   21d68:	46bd      	mov	sp, r7
   21d6a:	bd80      	pop	{r7, pc}

00021d6c <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   21d6c:	b580      	push	{r7, lr}
   21d6e:	b084      	sub	sp, #16
   21d70:	af00      	add	r7, sp, #0
   21d72:	6078      	str	r0, [r7, #4]
   21d74:	000a      	movs	r2, r1
   21d76:	1cbb      	adds	r3, r7, #2
   21d78:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   21d7a:	4b24      	ldr	r3, [pc, #144]	; (21e0c <sd_mmc_spi_start_write_blocks+0xa0>)
   21d7c:	2200      	movs	r2, #0
   21d7e:	701a      	strb	r2, [r3, #0]
	pos = 0;
   21d80:	2300      	movs	r3, #0
   21d82:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   21d84:	e035      	b.n	21df2 <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   21d86:	4b22      	ldr	r3, [pc, #136]	; (21e10 <sd_mmc_spi_start_write_blocks+0xa4>)
   21d88:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   21d8a:	687a      	ldr	r2, [r7, #4]
   21d8c:	68fb      	ldr	r3, [r7, #12]
   21d8e:	18d1      	adds	r1, r2, r3
   21d90:	4b20      	ldr	r3, [pc, #128]	; (21e14 <sd_mmc_spi_start_write_blocks+0xa8>)
   21d92:	881a      	ldrh	r2, [r3, #0]
   21d94:	4b20      	ldr	r3, [pc, #128]	; (21e18 <sd_mmc_spi_start_write_blocks+0xac>)
   21d96:	0018      	movs	r0, r3
   21d98:	4b20      	ldr	r3, [pc, #128]	; (21e1c <sd_mmc_spi_start_write_blocks+0xb0>)
   21d9a:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   21d9c:	4b1d      	ldr	r3, [pc, #116]	; (21e14 <sd_mmc_spi_start_write_blocks+0xa8>)
   21d9e:	881b      	ldrh	r3, [r3, #0]
   21da0:	001a      	movs	r2, r3
   21da2:	68fb      	ldr	r3, [r7, #12]
   21da4:	189b      	adds	r3, r3, r2
   21da6:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   21da8:	4b1a      	ldr	r3, [pc, #104]	; (21e14 <sd_mmc_spi_start_write_blocks+0xa8>)
   21daa:	881b      	ldrh	r3, [r3, #0]
   21dac:	001a      	movs	r2, r3
   21dae:	4b1c      	ldr	r3, [pc, #112]	; (21e20 <sd_mmc_spi_start_write_blocks+0xb4>)
   21db0:	681b      	ldr	r3, [r3, #0]
   21db2:	18d2      	adds	r2, r2, r3
   21db4:	4b1a      	ldr	r3, [pc, #104]	; (21e20 <sd_mmc_spi_start_write_blocks+0xb4>)
   21db6:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   21db8:	4b1a      	ldr	r3, [pc, #104]	; (21e24 <sd_mmc_spi_start_write_blocks+0xb8>)
   21dba:	4798      	blx	r3
   21dbc:	0003      	movs	r3, r0
   21dbe:	001a      	movs	r2, r3
   21dc0:	2301      	movs	r3, #1
   21dc2:	4053      	eors	r3, r2
   21dc4:	b2db      	uxtb	r3, r3
   21dc6:	2b00      	cmp	r3, #0
   21dc8:	d001      	beq.n	21dce <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   21dca:	2300      	movs	r3, #0
   21dcc:	e019      	b.n	21e02 <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   21dce:	1cbb      	adds	r3, r7, #2
   21dd0:	881b      	ldrh	r3, [r3, #0]
   21dd2:	2b00      	cmp	r3, #0
   21dd4:	d00d      	beq.n	21df2 <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   21dd6:	4b14      	ldr	r3, [pc, #80]	; (21e28 <sd_mmc_spi_start_write_blocks+0xbc>)
   21dd8:	4798      	blx	r3
   21dda:	0003      	movs	r3, r0
   21ddc:	001a      	movs	r2, r3
   21dde:	2301      	movs	r3, #1
   21de0:	4053      	eors	r3, r2
   21de2:	b2db      	uxtb	r3, r3
   21de4:	2b00      	cmp	r3, #0
   21de6:	d004      	beq.n	21df2 <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   21de8:	4b08      	ldr	r3, [pc, #32]	; (21e0c <sd_mmc_spi_start_write_blocks+0xa0>)
   21dea:	2205      	movs	r2, #5
   21dec:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   21dee:	2300      	movs	r3, #0
   21df0:	e007      	b.n	21e02 <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   21df2:	1cbb      	adds	r3, r7, #2
   21df4:	881b      	ldrh	r3, [r3, #0]
   21df6:	1cba      	adds	r2, r7, #2
   21df8:	1e59      	subs	r1, r3, #1
   21dfa:	8011      	strh	r1, [r2, #0]
   21dfc:	2b00      	cmp	r3, #0
   21dfe:	d1c2      	bne.n	21d86 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   21e00:	2301      	movs	r3, #1
}
   21e02:	0018      	movs	r0, r3
   21e04:	46bd      	mov	sp, r7
   21e06:	b004      	add	sp, #16
   21e08:	bd80      	pop	{r7, pc}
   21e0a:	46c0      	nop			; (mov r8, r8)
   21e0c:	20003eaf 	.word	0x20003eaf
   21e10:	0002172d 	.word	0x0002172d
   21e14:	20003eb8 	.word	0x20003eb8
   21e18:	20003ea0 	.word	0x20003ea0
   21e1c:	0002a1f1 	.word	0x0002a1f1
   21e20:	20003eb4 	.word	0x20003eb4
   21e24:	0002177d 	.word	0x0002177d
   21e28:	00021611 	.word	0x00021611

00021e2c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   21e2c:	b580      	push	{r7, lr}
   21e2e:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   21e30:	4b09      	ldr	r3, [pc, #36]	; (21e58 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   21e32:	4798      	blx	r3
   21e34:	0003      	movs	r3, r0
   21e36:	001a      	movs	r2, r3
   21e38:	2301      	movs	r3, #1
   21e3a:	4053      	eors	r3, r2
   21e3c:	b2db      	uxtb	r3, r3
   21e3e:	2b00      	cmp	r3, #0
   21e40:	d004      	beq.n	21e4c <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   21e42:	4b06      	ldr	r3, [pc, #24]	; (21e5c <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   21e44:	2205      	movs	r2, #5
   21e46:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   21e48:	2300      	movs	r3, #0
   21e4a:	e002      	b.n	21e52 <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   21e4c:	4b04      	ldr	r3, [pc, #16]	; (21e60 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   21e4e:	4798      	blx	r3
   21e50:	0003      	movs	r3, r0
}
   21e52:	0018      	movs	r0, r3
   21e54:	46bd      	mov	sp, r7
   21e56:	bd80      	pop	{r7, pc}
   21e58:	00021611 	.word	0x00021611
   21e5c:	20003eaf 	.word	0x20003eaf
   21e60:	00021811 	.word	0x00021811

00021e64 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   21e64:	b580      	push	{r7, lr}
   21e66:	b082      	sub	sp, #8
   21e68:	af00      	add	r7, sp, #0
   21e6a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   21e6c:	687b      	ldr	r3, [r7, #4]
   21e6e:	2b00      	cmp	r3, #0
   21e70:	d00c      	beq.n	21e8c <delay_cycles+0x28>
		SysTick->LOAD = n;
   21e72:	4b08      	ldr	r3, [pc, #32]	; (21e94 <delay_cycles+0x30>)
   21e74:	687a      	ldr	r2, [r7, #4]
   21e76:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   21e78:	4b06      	ldr	r3, [pc, #24]	; (21e94 <delay_cycles+0x30>)
   21e7a:	2200      	movs	r2, #0
   21e7c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   21e7e:	46c0      	nop			; (mov r8, r8)
   21e80:	4b04      	ldr	r3, [pc, #16]	; (21e94 <delay_cycles+0x30>)
   21e82:	681a      	ldr	r2, [r3, #0]
   21e84:	2380      	movs	r3, #128	; 0x80
   21e86:	025b      	lsls	r3, r3, #9
   21e88:	4013      	ands	r3, r2
   21e8a:	d0f9      	beq.n	21e80 <delay_cycles+0x1c>
		};
	}
}
   21e8c:	46c0      	nop			; (mov r8, r8)
   21e8e:	46bd      	mov	sp, r7
   21e90:	b002      	add	sp, #8
   21e92:	bd80      	pop	{r7, pc}
   21e94:	e000e010 	.word	0xe000e010

00021e98 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   21e98:	b580      	push	{r7, lr}
   21e9a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   21e9c:	2000      	movs	r0, #0
   21e9e:	4b0f      	ldr	r3, [pc, #60]	; (21edc <delay_init+0x44>)
   21ea0:	4798      	blx	r3
   21ea2:	0002      	movs	r2, r0
   21ea4:	4b0e      	ldr	r3, [pc, #56]	; (21ee0 <delay_init+0x48>)
   21ea6:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   21ea8:	4b0d      	ldr	r3, [pc, #52]	; (21ee0 <delay_init+0x48>)
   21eaa:	6818      	ldr	r0, [r3, #0]
   21eac:	4b0d      	ldr	r3, [pc, #52]	; (21ee4 <delay_init+0x4c>)
   21eae:	22fa      	movs	r2, #250	; 0xfa
   21eb0:	0091      	lsls	r1, r2, #2
   21eb2:	4798      	blx	r3
   21eb4:	0003      	movs	r3, r0
   21eb6:	001a      	movs	r2, r3
   21eb8:	4b09      	ldr	r3, [pc, #36]	; (21ee0 <delay_init+0x48>)
   21eba:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   21ebc:	4b08      	ldr	r3, [pc, #32]	; (21ee0 <delay_init+0x48>)
   21ebe:	6818      	ldr	r0, [r3, #0]
   21ec0:	4b08      	ldr	r3, [pc, #32]	; (21ee4 <delay_init+0x4c>)
   21ec2:	22fa      	movs	r2, #250	; 0xfa
   21ec4:	0091      	lsls	r1, r2, #2
   21ec6:	4798      	blx	r3
   21ec8:	0003      	movs	r3, r0
   21eca:	001a      	movs	r2, r3
   21ecc:	4b06      	ldr	r3, [pc, #24]	; (21ee8 <delay_init+0x50>)
   21ece:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   21ed0:	4b06      	ldr	r3, [pc, #24]	; (21eec <delay_init+0x54>)
   21ed2:	2205      	movs	r2, #5
   21ed4:	601a      	str	r2, [r3, #0]
}
   21ed6:	46c0      	nop			; (mov r8, r8)
   21ed8:	46bd      	mov	sp, r7
   21eda:	bd80      	pop	{r7, pc}
   21edc:	0002bb65 	.word	0x0002bb65
   21ee0:	2000010c 	.word	0x2000010c
   21ee4:	00034759 	.word	0x00034759
   21ee8:	20000110 	.word	0x20000110
   21eec:	e000e010 	.word	0xe000e010

00021ef0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   21ef0:	b580      	push	{r7, lr}
   21ef2:	b082      	sub	sp, #8
   21ef4:	af00      	add	r7, sp, #0
   21ef6:	6078      	str	r0, [r7, #4]
	while (n--) {
   21ef8:	e004      	b.n	21f04 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   21efa:	4b07      	ldr	r3, [pc, #28]	; (21f18 <delay_cycles_ms+0x28>)
   21efc:	681b      	ldr	r3, [r3, #0]
   21efe:	0018      	movs	r0, r3
   21f00:	4b06      	ldr	r3, [pc, #24]	; (21f1c <delay_cycles_ms+0x2c>)
   21f02:	4798      	blx	r3
	while (n--) {
   21f04:	687b      	ldr	r3, [r7, #4]
   21f06:	1e5a      	subs	r2, r3, #1
   21f08:	607a      	str	r2, [r7, #4]
   21f0a:	2b00      	cmp	r3, #0
   21f0c:	d1f5      	bne.n	21efa <delay_cycles_ms+0xa>
	}
}
   21f0e:	46c0      	nop			; (mov r8, r8)
   21f10:	46bd      	mov	sp, r7
   21f12:	b002      	add	sp, #8
   21f14:	bd80      	pop	{r7, pc}
   21f16:	46c0      	nop			; (mov r8, r8)
   21f18:	2000010c 	.word	0x2000010c
   21f1c:	00021e65 	.word	0x00021e65

00021f20 <system_pinmux_get_group_from_gpio_pin>:
{
   21f20:	b580      	push	{r7, lr}
   21f22:	b084      	sub	sp, #16
   21f24:	af00      	add	r7, sp, #0
   21f26:	0002      	movs	r2, r0
   21f28:	1dfb      	adds	r3, r7, #7
   21f2a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   21f2c:	230f      	movs	r3, #15
   21f2e:	18fb      	adds	r3, r7, r3
   21f30:	1dfa      	adds	r2, r7, #7
   21f32:	7812      	ldrb	r2, [r2, #0]
   21f34:	09d2      	lsrs	r2, r2, #7
   21f36:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   21f38:	230e      	movs	r3, #14
   21f3a:	18fb      	adds	r3, r7, r3
   21f3c:	1dfa      	adds	r2, r7, #7
   21f3e:	7812      	ldrb	r2, [r2, #0]
   21f40:	0952      	lsrs	r2, r2, #5
   21f42:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   21f44:	4b0d      	ldr	r3, [pc, #52]	; (21f7c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   21f46:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   21f48:	230f      	movs	r3, #15
   21f4a:	18fb      	adds	r3, r7, r3
   21f4c:	781b      	ldrb	r3, [r3, #0]
   21f4e:	2b00      	cmp	r3, #0
   21f50:	d10f      	bne.n	21f72 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   21f52:	230f      	movs	r3, #15
   21f54:	18fb      	adds	r3, r7, r3
   21f56:	781b      	ldrb	r3, [r3, #0]
   21f58:	009b      	lsls	r3, r3, #2
   21f5a:	2210      	movs	r2, #16
   21f5c:	4694      	mov	ip, r2
   21f5e:	44bc      	add	ip, r7
   21f60:	4463      	add	r3, ip
   21f62:	3b08      	subs	r3, #8
   21f64:	681a      	ldr	r2, [r3, #0]
   21f66:	230e      	movs	r3, #14
   21f68:	18fb      	adds	r3, r7, r3
   21f6a:	781b      	ldrb	r3, [r3, #0]
   21f6c:	01db      	lsls	r3, r3, #7
   21f6e:	18d3      	adds	r3, r2, r3
   21f70:	e000      	b.n	21f74 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   21f72:	2300      	movs	r3, #0
}
   21f74:	0018      	movs	r0, r3
   21f76:	46bd      	mov	sp, r7
   21f78:	b004      	add	sp, #16
   21f7a:	bd80      	pop	{r7, pc}
   21f7c:	41004400 	.word	0x41004400

00021f80 <system_interrupt_enable_global>:
{
   21f80:	b580      	push	{r7, lr}
   21f82:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   21f84:	4b04      	ldr	r3, [pc, #16]	; (21f98 <system_interrupt_enable_global+0x18>)
   21f86:	2201      	movs	r2, #1
   21f88:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   21f8a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   21f8e:	b662      	cpsie	i
}
   21f90:	46c0      	nop			; (mov r8, r8)
   21f92:	46bd      	mov	sp, r7
   21f94:	bd80      	pop	{r7, pc}
   21f96:	46c0      	nop			; (mov r8, r8)
   21f98:	20000116 	.word	0x20000116

00021f9c <port_get_group_from_gpio_pin>:
{
   21f9c:	b580      	push	{r7, lr}
   21f9e:	b082      	sub	sp, #8
   21fa0:	af00      	add	r7, sp, #0
   21fa2:	0002      	movs	r2, r0
   21fa4:	1dfb      	adds	r3, r7, #7
   21fa6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   21fa8:	1dfb      	adds	r3, r7, #7
   21faa:	781b      	ldrb	r3, [r3, #0]
   21fac:	0018      	movs	r0, r3
   21fae:	4b03      	ldr	r3, [pc, #12]	; (21fbc <port_get_group_from_gpio_pin+0x20>)
   21fb0:	4798      	blx	r3
   21fb2:	0003      	movs	r3, r0
}
   21fb4:	0018      	movs	r0, r3
   21fb6:	46bd      	mov	sp, r7
   21fb8:	b002      	add	sp, #8
   21fba:	bd80      	pop	{r7, pc}
   21fbc:	00021f21 	.word	0x00021f21

00021fc0 <port_get_config_defaults>:
{
   21fc0:	b580      	push	{r7, lr}
   21fc2:	b082      	sub	sp, #8
   21fc4:	af00      	add	r7, sp, #0
   21fc6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   21fc8:	687b      	ldr	r3, [r7, #4]
   21fca:	2200      	movs	r2, #0
   21fcc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   21fce:	687b      	ldr	r3, [r7, #4]
   21fd0:	2201      	movs	r2, #1
   21fd2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   21fd4:	687b      	ldr	r3, [r7, #4]
   21fd6:	2200      	movs	r2, #0
   21fd8:	709a      	strb	r2, [r3, #2]
}
   21fda:	46c0      	nop			; (mov r8, r8)
   21fdc:	46bd      	mov	sp, r7
   21fde:	b002      	add	sp, #8
   21fe0:	bd80      	pop	{r7, pc}
	...

00021fe4 <port_pin_set_output_level>:
{
   21fe4:	b580      	push	{r7, lr}
   21fe6:	b084      	sub	sp, #16
   21fe8:	af00      	add	r7, sp, #0
   21fea:	0002      	movs	r2, r0
   21fec:	1dfb      	adds	r3, r7, #7
   21fee:	701a      	strb	r2, [r3, #0]
   21ff0:	1dbb      	adds	r3, r7, #6
   21ff2:	1c0a      	adds	r2, r1, #0
   21ff4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   21ff6:	1dfb      	adds	r3, r7, #7
   21ff8:	781b      	ldrb	r3, [r3, #0]
   21ffa:	0018      	movs	r0, r3
   21ffc:	4b0d      	ldr	r3, [pc, #52]	; (22034 <port_pin_set_output_level+0x50>)
   21ffe:	4798      	blx	r3
   22000:	0003      	movs	r3, r0
   22002:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   22004:	1dfb      	adds	r3, r7, #7
   22006:	781b      	ldrb	r3, [r3, #0]
   22008:	221f      	movs	r2, #31
   2200a:	4013      	ands	r3, r2
   2200c:	2201      	movs	r2, #1
   2200e:	409a      	lsls	r2, r3
   22010:	0013      	movs	r3, r2
   22012:	60bb      	str	r3, [r7, #8]
	if (level) {
   22014:	1dbb      	adds	r3, r7, #6
   22016:	781b      	ldrb	r3, [r3, #0]
   22018:	2b00      	cmp	r3, #0
   2201a:	d003      	beq.n	22024 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   2201c:	68fb      	ldr	r3, [r7, #12]
   2201e:	68ba      	ldr	r2, [r7, #8]
   22020:	619a      	str	r2, [r3, #24]
}
   22022:	e002      	b.n	2202a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   22024:	68fb      	ldr	r3, [r7, #12]
   22026:	68ba      	ldr	r2, [r7, #8]
   22028:	615a      	str	r2, [r3, #20]
}
   2202a:	46c0      	nop			; (mov r8, r8)
   2202c:	46bd      	mov	sp, r7
   2202e:	b004      	add	sp, #16
   22030:	bd80      	pop	{r7, pc}
   22032:	46c0      	nop			; (mov r8, r8)
   22034:	00021f9d 	.word	0x00021f9d

00022038 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   22038:	b580      	push	{r7, lr}
   2203a:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   2203c:	4b04      	ldr	r3, [pc, #16]	; (22050 <chip_isr+0x18>)
   2203e:	681b      	ldr	r3, [r3, #0]
   22040:	2b00      	cmp	r3, #0
   22042:	d002      	beq.n	2204a <chip_isr+0x12>
		gpfIsr();
   22044:	4b02      	ldr	r3, [pc, #8]	; (22050 <chip_isr+0x18>)
   22046:	681b      	ldr	r3, [r3, #0]
   22048:	4798      	blx	r3
	}
}
   2204a:	46c0      	nop			; (mov r8, r8)
   2204c:	46bd      	mov	sp, r7
   2204e:	bd80      	pop	{r7, pc}
   22050:	20003ebc 	.word	0x20003ebc

00022054 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   22054:	b580      	push	{r7, lr}
   22056:	b082      	sub	sp, #8
   22058:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   2205a:	1d3b      	adds	r3, r7, #4
   2205c:	0018      	movs	r0, r3
   2205e:	4b10      	ldr	r3, [pc, #64]	; (220a0 <init_chip_pins+0x4c>)
   22060:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   22062:	1d3b      	adds	r3, r7, #4
   22064:	2201      	movs	r2, #1
   22066:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   22068:	1d3b      	adds	r3, r7, #4
   2206a:	0019      	movs	r1, r3
   2206c:	201b      	movs	r0, #27
   2206e:	4b0d      	ldr	r3, [pc, #52]	; (220a4 <init_chip_pins+0x50>)
   22070:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   22072:	1d3b      	adds	r3, r7, #4
   22074:	0019      	movs	r1, r3
   22076:	201c      	movs	r0, #28
   22078:	4b0a      	ldr	r3, [pc, #40]	; (220a4 <init_chip_pins+0x50>)
   2207a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   2207c:	1d3b      	adds	r3, r7, #4
   2207e:	0019      	movs	r1, r3
   22080:	2028      	movs	r0, #40	; 0x28
   22082:	4b08      	ldr	r3, [pc, #32]	; (220a4 <init_chip_pins+0x50>)
   22084:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   22086:	2100      	movs	r1, #0
   22088:	201c      	movs	r0, #28
   2208a:	4b07      	ldr	r3, [pc, #28]	; (220a8 <init_chip_pins+0x54>)
   2208c:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   2208e:	2100      	movs	r1, #0
   22090:	201b      	movs	r0, #27
   22092:	4b05      	ldr	r3, [pc, #20]	; (220a8 <init_chip_pins+0x54>)
   22094:	4798      	blx	r3
}
   22096:	46c0      	nop			; (mov r8, r8)
   22098:	46bd      	mov	sp, r7
   2209a:	b002      	add	sp, #8
   2209c:	bd80      	pop	{r7, pc}
   2209e:	46c0      	nop			; (mov r8, r8)
   220a0:	00021fc1 	.word	0x00021fc1
   220a4:	00028751 	.word	0x00028751
   220a8:	00021fe5 	.word	0x00021fe5

000220ac <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   220ac:	b580      	push	{r7, lr}
   220ae:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   220b0:	4b0b      	ldr	r3, [pc, #44]	; (220e0 <nm_bsp_init+0x34>)
   220b2:	2200      	movs	r2, #0
   220b4:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   220b6:	4b0b      	ldr	r3, [pc, #44]	; (220e4 <nm_bsp_init+0x38>)
   220b8:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   220ba:	4b0b      	ldr	r3, [pc, #44]	; (220e8 <nm_bsp_init+0x3c>)
   220bc:	681b      	ldr	r3, [r3, #0]
   220be:	2201      	movs	r2, #1
   220c0:	4013      	ands	r3, r2
   220c2:	d004      	beq.n	220ce <nm_bsp_init+0x22>
   220c4:	4b08      	ldr	r3, [pc, #32]	; (220e8 <nm_bsp_init+0x3c>)
   220c6:	681b      	ldr	r3, [r3, #0]
   220c8:	2202      	movs	r2, #2
   220ca:	4013      	ands	r3, r2
   220cc:	d101      	bne.n	220d2 <nm_bsp_init+0x26>
	    delay_init();
   220ce:	4b07      	ldr	r3, [pc, #28]	; (220ec <nm_bsp_init+0x40>)
   220d0:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   220d2:	4b07      	ldr	r3, [pc, #28]	; (220f0 <nm_bsp_init+0x44>)
   220d4:	4798      	blx	r3

	return M2M_SUCCESS;
   220d6:	2300      	movs	r3, #0
}
   220d8:	0018      	movs	r0, r3
   220da:	46bd      	mov	sp, r7
   220dc:	bd80      	pop	{r7, pc}
   220de:	46c0      	nop			; (mov r8, r8)
   220e0:	20003ebc 	.word	0x20003ebc
   220e4:	00022055 	.word	0x00022055
   220e8:	e000e010 	.word	0xe000e010
   220ec:	00021e99 	.word	0x00021e99
   220f0:	00021f81 	.word	0x00021f81

000220f4 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   220f4:	b580      	push	{r7, lr}
   220f6:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   220f8:	2100      	movs	r1, #0
   220fa:	201c      	movs	r0, #28
   220fc:	4b0b      	ldr	r3, [pc, #44]	; (2212c <nm_bsp_reset+0x38>)
   220fe:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   22100:	2100      	movs	r1, #0
   22102:	201b      	movs	r0, #27
   22104:	4b09      	ldr	r3, [pc, #36]	; (2212c <nm_bsp_reset+0x38>)
   22106:	4798      	blx	r3
	nm_bsp_sleep(1);
   22108:	2001      	movs	r0, #1
   2210a:	4b09      	ldr	r3, [pc, #36]	; (22130 <nm_bsp_reset+0x3c>)
   2210c:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   2210e:	2101      	movs	r1, #1
   22110:	201c      	movs	r0, #28
   22112:	4b06      	ldr	r3, [pc, #24]	; (2212c <nm_bsp_reset+0x38>)
   22114:	4798      	blx	r3
	nm_bsp_sleep(10);
   22116:	200a      	movs	r0, #10
   22118:	4b05      	ldr	r3, [pc, #20]	; (22130 <nm_bsp_reset+0x3c>)
   2211a:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   2211c:	2101      	movs	r1, #1
   2211e:	201b      	movs	r0, #27
   22120:	4b02      	ldr	r3, [pc, #8]	; (2212c <nm_bsp_reset+0x38>)
   22122:	4798      	blx	r3
}
   22124:	46c0      	nop			; (mov r8, r8)
   22126:	46bd      	mov	sp, r7
   22128:	bd80      	pop	{r7, pc}
   2212a:	46c0      	nop			; (mov r8, r8)
   2212c:	00021fe5 	.word	0x00021fe5
   22130:	00022135 	.word	0x00022135

00022134 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   22134:	b580      	push	{r7, lr}
   22136:	b082      	sub	sp, #8
   22138:	af00      	add	r7, sp, #0
   2213a:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   2213c:	687b      	ldr	r3, [r7, #4]
   2213e:	0018      	movs	r0, r3
   22140:	4b02      	ldr	r3, [pc, #8]	; (2214c <nm_bsp_sleep+0x18>)
   22142:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   22144:	46c0      	nop			; (mov r8, r8)
   22146:	46bd      	mov	sp, r7
   22148:	b002      	add	sp, #8
   2214a:	bd80      	pop	{r7, pc}
   2214c:	0001e2a1 	.word	0x0001e2a1

00022150 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   22150:	b580      	push	{r7, lr}
   22152:	b086      	sub	sp, #24
   22154:	af00      	add	r7, sp, #0
   22156:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   22158:	4b15      	ldr	r3, [pc, #84]	; (221b0 <nm_bsp_register_isr+0x60>)
   2215a:	687a      	ldr	r2, [r7, #4]
   2215c:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   2215e:	230c      	movs	r3, #12
   22160:	18fb      	adds	r3, r7, r3
   22162:	0018      	movs	r0, r3
   22164:	4b13      	ldr	r3, [pc, #76]	; (221b4 <nm_bsp_register_isr+0x64>)
   22166:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   22168:	230c      	movs	r3, #12
   2216a:	18fb      	adds	r3, r7, r3
   2216c:	2229      	movs	r2, #41	; 0x29
   2216e:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   22170:	230c      	movs	r3, #12
   22172:	18fb      	adds	r3, r7, r3
   22174:	2200      	movs	r2, #0
   22176:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   22178:	230c      	movs	r3, #12
   2217a:	18fb      	adds	r3, r7, r3
   2217c:	2201      	movs	r2, #1
   2217e:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   22180:	230c      	movs	r3, #12
   22182:	18fb      	adds	r3, r7, r3
   22184:	2202      	movs	r2, #2
   22186:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   22188:	230c      	movs	r3, #12
   2218a:	18fb      	adds	r3, r7, r3
   2218c:	0019      	movs	r1, r3
   2218e:	2009      	movs	r0, #9
   22190:	4b09      	ldr	r3, [pc, #36]	; (221b8 <nm_bsp_register_isr+0x68>)
   22192:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   22194:	4b09      	ldr	r3, [pc, #36]	; (221bc <nm_bsp_register_isr+0x6c>)
   22196:	2200      	movs	r2, #0
   22198:	2109      	movs	r1, #9
   2219a:	0018      	movs	r0, r3
   2219c:	4b08      	ldr	r3, [pc, #32]	; (221c0 <nm_bsp_register_isr+0x70>)
   2219e:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   221a0:	2100      	movs	r1, #0
   221a2:	2009      	movs	r0, #9
   221a4:	4b07      	ldr	r3, [pc, #28]	; (221c4 <nm_bsp_register_isr+0x74>)
   221a6:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   221a8:	46c0      	nop			; (mov r8, r8)
   221aa:	46bd      	mov	sp, r7
   221ac:	b006      	add	sp, #24
   221ae:	bd80      	pop	{r7, pc}
   221b0:	20003ebc 	.word	0x20003ebc
   221b4:	000285f9 	.word	0x000285f9
   221b8:	0002862d 	.word	0x0002862d
   221bc:	00022039 	.word	0x00022039
   221c0:	000281f9 	.word	0x000281f9
   221c4:	0002825d 	.word	0x0002825d

000221c8 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   221c8:	b580      	push	{r7, lr}
   221ca:	b082      	sub	sp, #8
   221cc:	af00      	add	r7, sp, #0
   221ce:	0002      	movs	r2, r0
   221d0:	1dfb      	adds	r3, r7, #7
   221d2:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   221d4:	1dfb      	adds	r3, r7, #7
   221d6:	781b      	ldrb	r3, [r3, #0]
   221d8:	2b00      	cmp	r3, #0
   221da:	d004      	beq.n	221e6 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   221dc:	2100      	movs	r1, #0
   221de:	2009      	movs	r0, #9
   221e0:	4b05      	ldr	r3, [pc, #20]	; (221f8 <nm_bsp_interrupt_ctrl+0x30>)
   221e2:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   221e4:	e003      	b.n	221ee <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   221e6:	2100      	movs	r1, #0
   221e8:	2009      	movs	r0, #9
   221ea:	4b04      	ldr	r3, [pc, #16]	; (221fc <nm_bsp_interrupt_ctrl+0x34>)
   221ec:	4798      	blx	r3
}
   221ee:	46c0      	nop			; (mov r8, r8)
   221f0:	46bd      	mov	sp, r7
   221f2:	b002      	add	sp, #8
   221f4:	bd80      	pop	{r7, pc}
   221f6:	46c0      	nop			; (mov r8, r8)
   221f8:	0002825d 	.word	0x0002825d
   221fc:	000282a5 	.word	0x000282a5

00022200 <system_pinmux_get_group_from_gpio_pin>:
{
   22200:	b580      	push	{r7, lr}
   22202:	b084      	sub	sp, #16
   22204:	af00      	add	r7, sp, #0
   22206:	0002      	movs	r2, r0
   22208:	1dfb      	adds	r3, r7, #7
   2220a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2220c:	230f      	movs	r3, #15
   2220e:	18fb      	adds	r3, r7, r3
   22210:	1dfa      	adds	r2, r7, #7
   22212:	7812      	ldrb	r2, [r2, #0]
   22214:	09d2      	lsrs	r2, r2, #7
   22216:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   22218:	230e      	movs	r3, #14
   2221a:	18fb      	adds	r3, r7, r3
   2221c:	1dfa      	adds	r2, r7, #7
   2221e:	7812      	ldrb	r2, [r2, #0]
   22220:	0952      	lsrs	r2, r2, #5
   22222:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   22224:	4b0d      	ldr	r3, [pc, #52]	; (2225c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   22226:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   22228:	230f      	movs	r3, #15
   2222a:	18fb      	adds	r3, r7, r3
   2222c:	781b      	ldrb	r3, [r3, #0]
   2222e:	2b00      	cmp	r3, #0
   22230:	d10f      	bne.n	22252 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   22232:	230f      	movs	r3, #15
   22234:	18fb      	adds	r3, r7, r3
   22236:	781b      	ldrb	r3, [r3, #0]
   22238:	009b      	lsls	r3, r3, #2
   2223a:	2210      	movs	r2, #16
   2223c:	4694      	mov	ip, r2
   2223e:	44bc      	add	ip, r7
   22240:	4463      	add	r3, ip
   22242:	3b08      	subs	r3, #8
   22244:	681a      	ldr	r2, [r3, #0]
   22246:	230e      	movs	r3, #14
   22248:	18fb      	adds	r3, r7, r3
   2224a:	781b      	ldrb	r3, [r3, #0]
   2224c:	01db      	lsls	r3, r3, #7
   2224e:	18d3      	adds	r3, r2, r3
   22250:	e000      	b.n	22254 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   22252:	2300      	movs	r3, #0
}
   22254:	0018      	movs	r0, r3
   22256:	46bd      	mov	sp, r7
   22258:	b004      	add	sp, #16
   2225a:	bd80      	pop	{r7, pc}
   2225c:	41004400 	.word	0x41004400

00022260 <port_get_group_from_gpio_pin>:
{
   22260:	b580      	push	{r7, lr}
   22262:	b082      	sub	sp, #8
   22264:	af00      	add	r7, sp, #0
   22266:	0002      	movs	r2, r0
   22268:	1dfb      	adds	r3, r7, #7
   2226a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2226c:	1dfb      	adds	r3, r7, #7
   2226e:	781b      	ldrb	r3, [r3, #0]
   22270:	0018      	movs	r0, r3
   22272:	4b03      	ldr	r3, [pc, #12]	; (22280 <port_get_group_from_gpio_pin+0x20>)
   22274:	4798      	blx	r3
   22276:	0003      	movs	r3, r0
}
   22278:	0018      	movs	r0, r3
   2227a:	46bd      	mov	sp, r7
   2227c:	b002      	add	sp, #8
   2227e:	bd80      	pop	{r7, pc}
   22280:	00022201 	.word	0x00022201

00022284 <port_get_config_defaults>:
{
   22284:	b580      	push	{r7, lr}
   22286:	b082      	sub	sp, #8
   22288:	af00      	add	r7, sp, #0
   2228a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   2228c:	687b      	ldr	r3, [r7, #4]
   2228e:	2200      	movs	r2, #0
   22290:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   22292:	687b      	ldr	r3, [r7, #4]
   22294:	2201      	movs	r2, #1
   22296:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   22298:	687b      	ldr	r3, [r7, #4]
   2229a:	2200      	movs	r2, #0
   2229c:	709a      	strb	r2, [r3, #2]
}
   2229e:	46c0      	nop			; (mov r8, r8)
   222a0:	46bd      	mov	sp, r7
   222a2:	b002      	add	sp, #8
   222a4:	bd80      	pop	{r7, pc}
	...

000222a8 <port_pin_set_output_level>:
{
   222a8:	b580      	push	{r7, lr}
   222aa:	b084      	sub	sp, #16
   222ac:	af00      	add	r7, sp, #0
   222ae:	0002      	movs	r2, r0
   222b0:	1dfb      	adds	r3, r7, #7
   222b2:	701a      	strb	r2, [r3, #0]
   222b4:	1dbb      	adds	r3, r7, #6
   222b6:	1c0a      	adds	r2, r1, #0
   222b8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   222ba:	1dfb      	adds	r3, r7, #7
   222bc:	781b      	ldrb	r3, [r3, #0]
   222be:	0018      	movs	r0, r3
   222c0:	4b0d      	ldr	r3, [pc, #52]	; (222f8 <port_pin_set_output_level+0x50>)
   222c2:	4798      	blx	r3
   222c4:	0003      	movs	r3, r0
   222c6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   222c8:	1dfb      	adds	r3, r7, #7
   222ca:	781b      	ldrb	r3, [r3, #0]
   222cc:	221f      	movs	r2, #31
   222ce:	4013      	ands	r3, r2
   222d0:	2201      	movs	r2, #1
   222d2:	409a      	lsls	r2, r3
   222d4:	0013      	movs	r3, r2
   222d6:	60bb      	str	r3, [r7, #8]
	if (level) {
   222d8:	1dbb      	adds	r3, r7, #6
   222da:	781b      	ldrb	r3, [r3, #0]
   222dc:	2b00      	cmp	r3, #0
   222de:	d003      	beq.n	222e8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   222e0:	68fb      	ldr	r3, [r7, #12]
   222e2:	68ba      	ldr	r2, [r7, #8]
   222e4:	619a      	str	r2, [r3, #24]
}
   222e6:	e002      	b.n	222ee <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   222e8:	68fb      	ldr	r3, [r7, #12]
   222ea:	68ba      	ldr	r2, [r7, #8]
   222ec:	615a      	str	r2, [r3, #20]
}
   222ee:	46c0      	nop			; (mov r8, r8)
   222f0:	46bd      	mov	sp, r7
   222f2:	b004      	add	sp, #16
   222f4:	bd80      	pop	{r7, pc}
   222f6:	46c0      	nop			; (mov r8, r8)
   222f8:	00022261 	.word	0x00022261

000222fc <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   222fc:	b580      	push	{r7, lr}
   222fe:	b084      	sub	sp, #16
   22300:	af00      	add	r7, sp, #0
   22302:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   22304:	687b      	ldr	r3, [r7, #4]
   22306:	681b      	ldr	r3, [r3, #0]
   22308:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   2230a:	68fb      	ldr	r3, [r7, #12]
   2230c:	69db      	ldr	r3, [r3, #28]
   2230e:	1e5a      	subs	r2, r3, #1
   22310:	4193      	sbcs	r3, r2
   22312:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   22314:	0018      	movs	r0, r3
   22316:	46bd      	mov	sp, r7
   22318:	b004      	add	sp, #16
   2231a:	bd80      	pop	{r7, pc}

0002231c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   2231c:	b580      	push	{r7, lr}
   2231e:	b082      	sub	sp, #8
   22320:	af00      	add	r7, sp, #0
   22322:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   22324:	687b      	ldr	r3, [r7, #4]
   22326:	2201      	movs	r2, #1
   22328:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   2232a:	687b      	ldr	r3, [r7, #4]
   2232c:	2200      	movs	r2, #0
   2232e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   22330:	687b      	ldr	r3, [r7, #4]
   22332:	2200      	movs	r2, #0
   22334:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   22336:	687b      	ldr	r3, [r7, #4]
   22338:	22c0      	movs	r2, #192	; 0xc0
   2233a:	0392      	lsls	r2, r2, #14
   2233c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   2233e:	687b      	ldr	r3, [r7, #4]
   22340:	2200      	movs	r2, #0
   22342:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   22344:	687b      	ldr	r3, [r7, #4]
   22346:	2200      	movs	r2, #0
   22348:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   2234a:	687b      	ldr	r3, [r7, #4]
   2234c:	2201      	movs	r2, #1
   2234e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   22350:	687b      	ldr	r3, [r7, #4]
   22352:	2201      	movs	r2, #1
   22354:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   22356:	687b      	ldr	r3, [r7, #4]
   22358:	2200      	movs	r2, #0
   2235a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   2235c:	687b      	ldr	r3, [r7, #4]
   2235e:	2224      	movs	r2, #36	; 0x24
   22360:	2100      	movs	r1, #0
   22362:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   22364:	687b      	ldr	r3, [r7, #4]
   22366:	3318      	adds	r3, #24
   22368:	220c      	movs	r2, #12
   2236a:	2100      	movs	r1, #0
   2236c:	0018      	movs	r0, r3
   2236e:	4b0a      	ldr	r3, [pc, #40]	; (22398 <spi_get_config_defaults+0x7c>)
   22370:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   22372:	687b      	ldr	r3, [r7, #4]
   22374:	4a09      	ldr	r2, [pc, #36]	; (2239c <spi_get_config_defaults+0x80>)
   22376:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   22378:	687b      	ldr	r3, [r7, #4]
   2237a:	2200      	movs	r2, #0
   2237c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   2237e:	687b      	ldr	r3, [r7, #4]
   22380:	2200      	movs	r2, #0
   22382:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   22384:	687b      	ldr	r3, [r7, #4]
   22386:	2200      	movs	r2, #0
   22388:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   2238a:	687b      	ldr	r3, [r7, #4]
   2238c:	2200      	movs	r2, #0
   2238e:	635a      	str	r2, [r3, #52]	; 0x34

};
   22390:	46c0      	nop			; (mov r8, r8)
   22392:	46bd      	mov	sp, r7
   22394:	b002      	add	sp, #8
   22396:	bd80      	pop	{r7, pc}
   22398:	00036c9f 	.word	0x00036c9f
   2239c:	000186a0 	.word	0x000186a0

000223a0 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   223a0:	b580      	push	{r7, lr}
   223a2:	b082      	sub	sp, #8
   223a4:	af00      	add	r7, sp, #0
   223a6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   223a8:	687b      	ldr	r3, [r7, #4]
   223aa:	220a      	movs	r2, #10
   223ac:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   223ae:	687b      	ldr	r3, [r7, #4]
   223b0:	2200      	movs	r2, #0
   223b2:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   223b4:	687b      	ldr	r3, [r7, #4]
   223b6:	2200      	movs	r2, #0
   223b8:	709a      	strb	r2, [r3, #2]
}
   223ba:	46c0      	nop			; (mov r8, r8)
   223bc:	46bd      	mov	sp, r7
   223be:	b002      	add	sp, #8
   223c0:	bd80      	pop	{r7, pc}
	...

000223c4 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   223c4:	b580      	push	{r7, lr}
   223c6:	b084      	sub	sp, #16
   223c8:	af00      	add	r7, sp, #0
   223ca:	6078      	str	r0, [r7, #4]
   223cc:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   223ce:	683b      	ldr	r3, [r7, #0]
   223d0:	781a      	ldrb	r2, [r3, #0]
   223d2:	687b      	ldr	r3, [r7, #4]
   223d4:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   223d6:	683b      	ldr	r3, [r7, #0]
   223d8:	785a      	ldrb	r2, [r3, #1]
   223da:	687b      	ldr	r3, [r7, #4]
   223dc:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   223de:	683b      	ldr	r3, [r7, #0]
   223e0:	789a      	ldrb	r2, [r3, #2]
   223e2:	687b      	ldr	r3, [r7, #4]
   223e4:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   223e6:	230c      	movs	r3, #12
   223e8:	18fb      	adds	r3, r7, r3
   223ea:	0018      	movs	r0, r3
   223ec:	4b0b      	ldr	r3, [pc, #44]	; (2241c <spi_attach_slave+0x58>)
   223ee:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   223f0:	230c      	movs	r3, #12
   223f2:	18fb      	adds	r3, r7, r3
   223f4:	2201      	movs	r2, #1
   223f6:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   223f8:	687b      	ldr	r3, [r7, #4]
   223fa:	781b      	ldrb	r3, [r3, #0]
   223fc:	220c      	movs	r2, #12
   223fe:	18ba      	adds	r2, r7, r2
   22400:	0011      	movs	r1, r2
   22402:	0018      	movs	r0, r3
   22404:	4b06      	ldr	r3, [pc, #24]	; (22420 <spi_attach_slave+0x5c>)
   22406:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   22408:	687b      	ldr	r3, [r7, #4]
   2240a:	781b      	ldrb	r3, [r3, #0]
   2240c:	2101      	movs	r1, #1
   2240e:	0018      	movs	r0, r3
   22410:	4b04      	ldr	r3, [pc, #16]	; (22424 <spi_attach_slave+0x60>)
   22412:	4798      	blx	r3
}
   22414:	46c0      	nop			; (mov r8, r8)
   22416:	46bd      	mov	sp, r7
   22418:	b004      	add	sp, #16
   2241a:	bd80      	pop	{r7, pc}
   2241c:	00022285 	.word	0x00022285
   22420:	00028751 	.word	0x00028751
   22424:	000222a9 	.word	0x000222a9

00022428 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   22428:	b580      	push	{r7, lr}
   2242a:	b084      	sub	sp, #16
   2242c:	af00      	add	r7, sp, #0
   2242e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   22430:	687b      	ldr	r3, [r7, #4]
   22432:	681b      	ldr	r3, [r3, #0]
   22434:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
   22436:	46c0      	nop			; (mov r8, r8)
   22438:	687b      	ldr	r3, [r7, #4]
   2243a:	0018      	movs	r0, r3
   2243c:	4b06      	ldr	r3, [pc, #24]	; (22458 <spi_enable+0x30>)
   2243e:	4798      	blx	r3
   22440:	1e03      	subs	r3, r0, #0
   22442:	d1f9      	bne.n	22438 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   22444:	68fb      	ldr	r3, [r7, #12]
   22446:	681b      	ldr	r3, [r3, #0]
   22448:	2202      	movs	r2, #2
   2244a:	431a      	orrs	r2, r3
   2244c:	68fb      	ldr	r3, [r7, #12]
   2244e:	601a      	str	r2, [r3, #0]
}
   22450:	46c0      	nop			; (mov r8, r8)
   22452:	46bd      	mov	sp, r7
   22454:	b004      	add	sp, #16
   22456:	bd80      	pop	{r7, pc}
   22458:	000222fd 	.word	0x000222fd

0002245c <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   2245c:	b580      	push	{r7, lr}
   2245e:	b084      	sub	sp, #16
   22460:	af00      	add	r7, sp, #0
   22462:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   22464:	687b      	ldr	r3, [r7, #4]
   22466:	681b      	ldr	r3, [r3, #0]
   22468:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
   2246a:	46c0      	nop			; (mov r8, r8)
   2246c:	687b      	ldr	r3, [r7, #4]
   2246e:	0018      	movs	r0, r3
   22470:	4b0a      	ldr	r3, [pc, #40]	; (2249c <spi_disable+0x40>)
   22472:	4798      	blx	r3
   22474:	1e03      	subs	r3, r0, #0
   22476:	d1f9      	bne.n	2246c <spi_disable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   22478:	68fb      	ldr	r3, [r7, #12]
   2247a:	228f      	movs	r2, #143	; 0x8f
   2247c:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   2247e:	68fb      	ldr	r3, [r7, #12]
   22480:	228f      	movs	r2, #143	; 0x8f
   22482:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   22484:	68fb      	ldr	r3, [r7, #12]
   22486:	681b      	ldr	r3, [r3, #0]
   22488:	2202      	movs	r2, #2
   2248a:	4393      	bics	r3, r2
   2248c:	001a      	movs	r2, r3
   2248e:	68fb      	ldr	r3, [r7, #12]
   22490:	601a      	str	r2, [r3, #0]
}
   22492:	46c0      	nop			; (mov r8, r8)
   22494:	46bd      	mov	sp, r7
   22496:	b004      	add	sp, #16
   22498:	bd80      	pop	{r7, pc}
   2249a:	46c0      	nop			; (mov r8, r8)
   2249c:	000222fd 	.word	0x000222fd

000224a0 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   224a0:	b580      	push	{r7, lr}
   224a2:	b084      	sub	sp, #16
   224a4:	af00      	add	r7, sp, #0
   224a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   224a8:	687b      	ldr	r3, [r7, #4]
   224aa:	681b      	ldr	r3, [r3, #0]
   224ac:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   224ae:	68fb      	ldr	r3, [r7, #12]
   224b0:	7e1b      	ldrb	r3, [r3, #24]
   224b2:	b2db      	uxtb	r3, r3
   224b4:	001a      	movs	r2, r3
   224b6:	2302      	movs	r3, #2
   224b8:	4013      	ands	r3, r2
   224ba:	1e5a      	subs	r2, r3, #1
   224bc:	4193      	sbcs	r3, r2
   224be:	b2db      	uxtb	r3, r3
}
   224c0:	0018      	movs	r0, r3
   224c2:	46bd      	mov	sp, r7
   224c4:	b004      	add	sp, #16
   224c6:	bd80      	pop	{r7, pc}

000224c8 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   224c8:	b580      	push	{r7, lr}
   224ca:	b084      	sub	sp, #16
   224cc:	af00      	add	r7, sp, #0
   224ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   224d0:	687b      	ldr	r3, [r7, #4]
   224d2:	681b      	ldr	r3, [r3, #0]
   224d4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   224d6:	68fb      	ldr	r3, [r7, #12]
   224d8:	7e1b      	ldrb	r3, [r3, #24]
   224da:	b2db      	uxtb	r3, r3
   224dc:	001a      	movs	r2, r3
   224de:	2301      	movs	r3, #1
   224e0:	4013      	ands	r3, r2
   224e2:	1e5a      	subs	r2, r3, #1
   224e4:	4193      	sbcs	r3, r2
   224e6:	b2db      	uxtb	r3, r3
}
   224e8:	0018      	movs	r0, r3
   224ea:	46bd      	mov	sp, r7
   224ec:	b004      	add	sp, #16
   224ee:	bd80      	pop	{r7, pc}

000224f0 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   224f0:	b580      	push	{r7, lr}
   224f2:	b084      	sub	sp, #16
   224f4:	af00      	add	r7, sp, #0
   224f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   224f8:	687b      	ldr	r3, [r7, #4]
   224fa:	681b      	ldr	r3, [r3, #0]
   224fc:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   224fe:	68fb      	ldr	r3, [r7, #12]
   22500:	7e1b      	ldrb	r3, [r3, #24]
   22502:	b2db      	uxtb	r3, r3
   22504:	001a      	movs	r2, r3
   22506:	2304      	movs	r3, #4
   22508:	4013      	ands	r3, r2
   2250a:	1e5a      	subs	r2, r3, #1
   2250c:	4193      	sbcs	r3, r2
   2250e:	b2db      	uxtb	r3, r3
}
   22510:	0018      	movs	r0, r3
   22512:	46bd      	mov	sp, r7
   22514:	b004      	add	sp, #16
   22516:	bd80      	pop	{r7, pc}

00022518 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   22518:	b580      	push	{r7, lr}
   2251a:	b084      	sub	sp, #16
   2251c:	af00      	add	r7, sp, #0
   2251e:	6078      	str	r0, [r7, #4]
   22520:	000a      	movs	r2, r1
   22522:	1cbb      	adds	r3, r7, #2
   22524:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   22526:	687b      	ldr	r3, [r7, #4]
   22528:	681b      	ldr	r3, [r3, #0]
   2252a:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   2252c:	687b      	ldr	r3, [r7, #4]
   2252e:	0018      	movs	r0, r3
   22530:	4b0a      	ldr	r3, [pc, #40]	; (2255c <spi_write+0x44>)
   22532:	4798      	blx	r3
   22534:	0003      	movs	r3, r0
   22536:	001a      	movs	r2, r3
   22538:	2301      	movs	r3, #1
   2253a:	4053      	eors	r3, r2
   2253c:	b2db      	uxtb	r3, r3
   2253e:	2b00      	cmp	r3, #0
   22540:	d001      	beq.n	22546 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   22542:	2305      	movs	r3, #5
   22544:	e006      	b.n	22554 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   22546:	1cbb      	adds	r3, r7, #2
   22548:	881b      	ldrh	r3, [r3, #0]
   2254a:	05db      	lsls	r3, r3, #23
   2254c:	0dda      	lsrs	r2, r3, #23
   2254e:	68fb      	ldr	r3, [r7, #12]
   22550:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   22552:	2300      	movs	r3, #0
}
   22554:	0018      	movs	r0, r3
   22556:	46bd      	mov	sp, r7
   22558:	b004      	add	sp, #16
   2255a:	bd80      	pop	{r7, pc}
   2255c:	000224c9 	.word	0x000224c9

00022560 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   22560:	b580      	push	{r7, lr}
   22562:	b084      	sub	sp, #16
   22564:	af00      	add	r7, sp, #0
   22566:	6078      	str	r0, [r7, #4]
   22568:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2256a:	687b      	ldr	r3, [r7, #4]
   2256c:	681b      	ldr	r3, [r3, #0]
   2256e:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   22570:	687b      	ldr	r3, [r7, #4]
   22572:	0018      	movs	r0, r3
   22574:	4b1b      	ldr	r3, [pc, #108]	; (225e4 <spi_read+0x84>)
   22576:	4798      	blx	r3
   22578:	0003      	movs	r3, r0
   2257a:	001a      	movs	r2, r3
   2257c:	2301      	movs	r3, #1
   2257e:	4053      	eors	r3, r2
   22580:	b2db      	uxtb	r3, r3
   22582:	2b00      	cmp	r3, #0
   22584:	d001      	beq.n	2258a <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   22586:	2310      	movs	r3, #16
   22588:	e027      	b.n	225da <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   2258a:	230f      	movs	r3, #15
   2258c:	18fb      	adds	r3, r7, r3
   2258e:	2200      	movs	r2, #0
   22590:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   22592:	68bb      	ldr	r3, [r7, #8]
   22594:	8b5b      	ldrh	r3, [r3, #26]
   22596:	b29b      	uxth	r3, r3
   22598:	001a      	movs	r2, r3
   2259a:	2304      	movs	r3, #4
   2259c:	4013      	ands	r3, r2
   2259e:	d006      	beq.n	225ae <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   225a0:	230f      	movs	r3, #15
   225a2:	18fb      	adds	r3, r7, r3
   225a4:	221e      	movs	r2, #30
   225a6:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   225a8:	68bb      	ldr	r3, [r7, #8]
   225aa:	2204      	movs	r2, #4
   225ac:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   225ae:	687b      	ldr	r3, [r7, #4]
   225b0:	799b      	ldrb	r3, [r3, #6]
   225b2:	2b01      	cmp	r3, #1
   225b4:	d108      	bne.n	225c8 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   225b6:	68bb      	ldr	r3, [r7, #8]
   225b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   225ba:	b29b      	uxth	r3, r3
   225bc:	05db      	lsls	r3, r3, #23
   225be:	0ddb      	lsrs	r3, r3, #23
   225c0:	b29a      	uxth	r2, r3
   225c2:	683b      	ldr	r3, [r7, #0]
   225c4:	801a      	strh	r2, [r3, #0]
   225c6:	e005      	b.n	225d4 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   225c8:	68bb      	ldr	r3, [r7, #8]
   225ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   225cc:	b2db      	uxtb	r3, r3
   225ce:	b29a      	uxth	r2, r3
   225d0:	683b      	ldr	r3, [r7, #0]
   225d2:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   225d4:	230f      	movs	r3, #15
   225d6:	18fb      	adds	r3, r7, r3
   225d8:	781b      	ldrb	r3, [r3, #0]
}
   225da:	0018      	movs	r0, r3
   225dc:	46bd      	mov	sp, r7
   225de:	b004      	add	sp, #16
   225e0:	bd80      	pop	{r7, pc}
   225e2:	46c0      	nop			; (mov r8, r8)
   225e4:	000224f1 	.word	0x000224f1

000225e8 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   225e8:	b580      	push	{r7, lr}
   225ea:	b086      	sub	sp, #24
   225ec:	af00      	add	r7, sp, #0
   225ee:	60f8      	str	r0, [r7, #12]
   225f0:	60b9      	str	r1, [r7, #8]
   225f2:	1dbb      	adds	r3, r7, #6
   225f4:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   225f6:	2313      	movs	r3, #19
   225f8:	18fb      	adds	r3, r7, r3
   225fa:	22ff      	movs	r2, #255	; 0xff
   225fc:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   225fe:	2317      	movs	r3, #23
   22600:	18fb      	adds	r3, r7, r3
   22602:	2200      	movs	r2, #0
   22604:	701a      	strb	r2, [r3, #0]
   22606:	2316      	movs	r3, #22
   22608:	18fb      	adds	r3, r7, r3
   2260a:	2200      	movs	r2, #0
   2260c:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   2260e:	2314      	movs	r3, #20
   22610:	18fb      	adds	r3, r7, r3
   22612:	2200      	movs	r2, #0
   22614:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   22616:	2310      	movs	r3, #16
   22618:	18fb      	adds	r3, r7, r3
   2261a:	2200      	movs	r2, #0
   2261c:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   2261e:	68bb      	ldr	r3, [r7, #8]
   22620:	2b00      	cmp	r3, #0
   22622:	d102      	bne.n	2262a <spi_rw+0x42>
   22624:	68fb      	ldr	r3, [r7, #12]
   22626:	2b00      	cmp	r3, #0
   22628:	d003      	beq.n	22632 <spi_rw+0x4a>
   2262a:	1dbb      	adds	r3, r7, #6
   2262c:	881b      	ldrh	r3, [r3, #0]
   2262e:	2b00      	cmp	r3, #0
   22630:	d102      	bne.n	22638 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   22632:	230f      	movs	r3, #15
   22634:	425b      	negs	r3, r3
   22636:	e07e      	b.n	22736 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   22638:	68fb      	ldr	r3, [r7, #12]
   2263a:	2b00      	cmp	r3, #0
   2263c:	d106      	bne.n	2264c <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   2263e:	2313      	movs	r3, #19
   22640:	18fb      	adds	r3, r7, r3
   22642:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   22644:	2317      	movs	r3, #23
   22646:	18fb      	adds	r3, r7, r3
   22648:	2201      	movs	r2, #1
   2264a:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   2264c:	68bb      	ldr	r3, [r7, #8]
   2264e:	2b00      	cmp	r3, #0
   22650:	d106      	bne.n	22660 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   22652:	2313      	movs	r3, #19
   22654:	18fb      	adds	r3, r7, r3
   22656:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   22658:	2316      	movs	r3, #22
   2265a:	18fb      	adds	r3, r7, r3
   2265c:	2201      	movs	r2, #1
   2265e:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   22660:	4937      	ldr	r1, [pc, #220]	; (22740 <spi_rw+0x158>)
   22662:	4b38      	ldr	r3, [pc, #224]	; (22744 <spi_rw+0x15c>)
   22664:	2201      	movs	r2, #1
   22666:	0018      	movs	r0, r3
   22668:	4b37      	ldr	r3, [pc, #220]	; (22748 <spi_rw+0x160>)
   2266a:	4798      	blx	r3

	while (u16Sz) {
   2266c:	e04c      	b.n	22708 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   2266e:	68fb      	ldr	r3, [r7, #12]
   22670:	781a      	ldrb	r2, [r3, #0]
   22672:	2314      	movs	r3, #20
   22674:	18fb      	adds	r3, r7, r3
   22676:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   22678:	46c0      	nop			; (mov r8, r8)
   2267a:	4b32      	ldr	r3, [pc, #200]	; (22744 <spi_rw+0x15c>)
   2267c:	0018      	movs	r0, r3
   2267e:	4b33      	ldr	r3, [pc, #204]	; (2274c <spi_rw+0x164>)
   22680:	4798      	blx	r3
   22682:	0003      	movs	r3, r0
   22684:	001a      	movs	r2, r3
   22686:	2301      	movs	r3, #1
   22688:	4053      	eors	r3, r2
   2268a:	b2db      	uxtb	r3, r3
   2268c:	2b00      	cmp	r3, #0
   2268e:	d1f4      	bne.n	2267a <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   22690:	46c0      	nop			; (mov r8, r8)
   22692:	2314      	movs	r3, #20
   22694:	18fb      	adds	r3, r7, r3
   22696:	881a      	ldrh	r2, [r3, #0]
   22698:	4b2a      	ldr	r3, [pc, #168]	; (22744 <spi_rw+0x15c>)
   2269a:	0011      	movs	r1, r2
   2269c:	0018      	movs	r0, r3
   2269e:	4b2c      	ldr	r3, [pc, #176]	; (22750 <spi_rw+0x168>)
   226a0:	4798      	blx	r3
   226a2:	1e03      	subs	r3, r0, #0
   226a4:	d1f5      	bne.n	22692 <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   226a6:	46c0      	nop			; (mov r8, r8)
   226a8:	4b26      	ldr	r3, [pc, #152]	; (22744 <spi_rw+0x15c>)
   226aa:	0018      	movs	r0, r3
   226ac:	4b29      	ldr	r3, [pc, #164]	; (22754 <spi_rw+0x16c>)
   226ae:	4798      	blx	r3
   226b0:	0003      	movs	r3, r0
   226b2:	001a      	movs	r2, r3
   226b4:	2301      	movs	r3, #1
   226b6:	4053      	eors	r3, r2
   226b8:	b2db      	uxtb	r3, r3
   226ba:	2b00      	cmp	r3, #0
   226bc:	d1f4      	bne.n	226a8 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   226be:	46c0      	nop			; (mov r8, r8)
   226c0:	2310      	movs	r3, #16
   226c2:	18fa      	adds	r2, r7, r3
   226c4:	4b1f      	ldr	r3, [pc, #124]	; (22744 <spi_rw+0x15c>)
   226c6:	0011      	movs	r1, r2
   226c8:	0018      	movs	r0, r3
   226ca:	4b23      	ldr	r3, [pc, #140]	; (22758 <spi_rw+0x170>)
   226cc:	4798      	blx	r3
   226ce:	1e03      	subs	r3, r0, #0
   226d0:	d1f6      	bne.n	226c0 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   226d2:	2310      	movs	r3, #16
   226d4:	18fb      	adds	r3, r7, r3
   226d6:	881b      	ldrh	r3, [r3, #0]
   226d8:	b2da      	uxtb	r2, r3
   226da:	68bb      	ldr	r3, [r7, #8]
   226dc:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   226de:	1dbb      	adds	r3, r7, #6
   226e0:	881a      	ldrh	r2, [r3, #0]
   226e2:	1dbb      	adds	r3, r7, #6
   226e4:	3a01      	subs	r2, #1
   226e6:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   226e8:	2316      	movs	r3, #22
   226ea:	18fb      	adds	r3, r7, r3
   226ec:	781b      	ldrb	r3, [r3, #0]
   226ee:	2b00      	cmp	r3, #0
   226f0:	d102      	bne.n	226f8 <spi_rw+0x110>
			pu8Miso++;
   226f2:	68bb      	ldr	r3, [r7, #8]
   226f4:	3301      	adds	r3, #1
   226f6:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   226f8:	2317      	movs	r3, #23
   226fa:	18fb      	adds	r3, r7, r3
   226fc:	781b      	ldrb	r3, [r3, #0]
   226fe:	2b00      	cmp	r3, #0
   22700:	d102      	bne.n	22708 <spi_rw+0x120>
			pu8Mosi++;
   22702:	68fb      	ldr	r3, [r7, #12]
   22704:	3301      	adds	r3, #1
   22706:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   22708:	1dbb      	adds	r3, r7, #6
   2270a:	881b      	ldrh	r3, [r3, #0]
   2270c:	2b00      	cmp	r3, #0
   2270e:	d1ae      	bne.n	2266e <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   22710:	46c0      	nop			; (mov r8, r8)
   22712:	4b0c      	ldr	r3, [pc, #48]	; (22744 <spi_rw+0x15c>)
   22714:	0018      	movs	r0, r3
   22716:	4b11      	ldr	r3, [pc, #68]	; (2275c <spi_rw+0x174>)
   22718:	4798      	blx	r3
   2271a:	0003      	movs	r3, r0
   2271c:	001a      	movs	r2, r3
   2271e:	2301      	movs	r3, #1
   22720:	4053      	eors	r3, r2
   22722:	b2db      	uxtb	r3, r3
   22724:	2b00      	cmp	r3, #0
   22726:	d1f4      	bne.n	22712 <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   22728:	4905      	ldr	r1, [pc, #20]	; (22740 <spi_rw+0x158>)
   2272a:	4b06      	ldr	r3, [pc, #24]	; (22744 <spi_rw+0x15c>)
   2272c:	2200      	movs	r2, #0
   2272e:	0018      	movs	r0, r3
   22730:	4b05      	ldr	r3, [pc, #20]	; (22748 <spi_rw+0x160>)
   22732:	4798      	blx	r3

	return M2M_SUCCESS;
   22734:	2300      	movs	r3, #0
}
   22736:	0018      	movs	r0, r3
   22738:	46bd      	mov	sp, r7
   2273a:	b006      	add	sp, #24
   2273c:	bd80      	pop	{r7, pc}
   2273e:	46c0      	nop			; (mov r8, r8)
   22740:	200056f0 	.word	0x200056f0
   22744:	200056f4 	.word	0x200056f4
   22748:	0002a101 	.word	0x0002a101
   2274c:	000224c9 	.word	0x000224c9
   22750:	00022519 	.word	0x00022519
   22754:	000224f1 	.word	0x000224f1
   22758:	00022561 	.word	0x00022561
   2275c:	000224a1 	.word	0x000224a1

00022760 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   22760:	b580      	push	{r7, lr}
   22762:	b092      	sub	sp, #72	; 0x48
   22764:	af00      	add	r7, sp, #0
   22766:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   22768:	2347      	movs	r3, #71	; 0x47
   2276a:	18fb      	adds	r3, r7, r3
   2276c:	2200      	movs	r2, #0
   2276e:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   22770:	2308      	movs	r3, #8
   22772:	18fb      	adds	r3, r7, r3
   22774:	0018      	movs	r0, r3
   22776:	4b26      	ldr	r3, [pc, #152]	; (22810 <nm_bus_init+0xb0>)
   22778:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   2277a:	2308      	movs	r3, #8
   2277c:	18fb      	adds	r3, r7, r3
   2277e:	220e      	movs	r2, #14
   22780:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   22782:	2308      	movs	r3, #8
   22784:	18fa      	adds	r2, r7, r3
   22786:	4b23      	ldr	r3, [pc, #140]	; (22814 <nm_bus_init+0xb4>)
   22788:	0011      	movs	r1, r2
   2278a:	0018      	movs	r0, r3
   2278c:	4b22      	ldr	r3, [pc, #136]	; (22818 <nm_bus_init+0xb8>)
   2278e:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   22790:	230c      	movs	r3, #12
   22792:	18fb      	adds	r3, r7, r3
   22794:	0018      	movs	r0, r3
   22796:	4b21      	ldr	r3, [pc, #132]	; (2281c <nm_bus_init+0xbc>)
   22798:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   2279a:	230c      	movs	r3, #12
   2279c:	18fb      	adds	r3, r7, r3
   2279e:	22c0      	movs	r2, #192	; 0xc0
   227a0:	0392      	lsls	r2, r2, #14
   227a2:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   227a4:	230c      	movs	r3, #12
   227a6:	18fb      	adds	r3, r7, r3
   227a8:	4a1d      	ldr	r2, [pc, #116]	; (22820 <nm_bus_init+0xc0>)
   227aa:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   227ac:	230c      	movs	r3, #12
   227ae:	18fb      	adds	r3, r7, r3
   227b0:	4a1c      	ldr	r2, [pc, #112]	; (22824 <nm_bus_init+0xc4>)
   227b2:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   227b4:	230c      	movs	r3, #12
   227b6:	18fb      	adds	r3, r7, r3
   227b8:	2201      	movs	r2, #1
   227ba:	4252      	negs	r2, r2
   227bc:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   227be:	230c      	movs	r3, #12
   227c0:	18fb      	adds	r3, r7, r3
   227c2:	4a19      	ldr	r2, [pc, #100]	; (22828 <nm_bus_init+0xc8>)
   227c4:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   227c6:	230c      	movs	r3, #12
   227c8:	18fb      	adds	r3, r7, r3
   227ca:	2200      	movs	r2, #0
   227cc:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   227ce:	230c      	movs	r3, #12
   227d0:	18fb      	adds	r3, r7, r3
   227d2:	4a16      	ldr	r2, [pc, #88]	; (2282c <nm_bus_init+0xcc>)
   227d4:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   227d6:	230c      	movs	r3, #12
   227d8:	18fa      	adds	r2, r7, r3
   227da:	4915      	ldr	r1, [pc, #84]	; (22830 <nm_bus_init+0xd0>)
   227dc:	4b15      	ldr	r3, [pc, #84]	; (22834 <nm_bus_init+0xd4>)
   227de:	0018      	movs	r0, r3
   227e0:	4b15      	ldr	r3, [pc, #84]	; (22838 <nm_bus_init+0xd8>)
   227e2:	4798      	blx	r3
   227e4:	1e03      	subs	r3, r0, #0
   227e6:	d002      	beq.n	227ee <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   227e8:	2306      	movs	r3, #6
   227ea:	425b      	negs	r3, r3
   227ec:	e00c      	b.n	22808 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   227ee:	4b11      	ldr	r3, [pc, #68]	; (22834 <nm_bus_init+0xd4>)
   227f0:	0018      	movs	r0, r3
   227f2:	4b12      	ldr	r3, [pc, #72]	; (2283c <nm_bus_init+0xdc>)
   227f4:	4798      	blx	r3

	nm_bsp_reset();
   227f6:	4b12      	ldr	r3, [pc, #72]	; (22840 <nm_bus_init+0xe0>)
   227f8:	4798      	blx	r3
	nm_bsp_sleep(1);
   227fa:	2001      	movs	r0, #1
   227fc:	4b11      	ldr	r3, [pc, #68]	; (22844 <nm_bus_init+0xe4>)
   227fe:	4798      	blx	r3
#endif
	return result;
   22800:	2347      	movs	r3, #71	; 0x47
   22802:	18fb      	adds	r3, r7, r3
   22804:	781b      	ldrb	r3, [r3, #0]
   22806:	b25b      	sxtb	r3, r3
}
   22808:	0018      	movs	r0, r3
   2280a:	46bd      	mov	sp, r7
   2280c:	b012      	add	sp, #72	; 0x48
   2280e:	bd80      	pop	{r7, pc}
   22810:	000223a1 	.word	0x000223a1
   22814:	200056f0 	.word	0x200056f0
   22818:	000223c5 	.word	0x000223c5
   2281c:	0002231d 	.word	0x0002231d
   22820:	000c0002 	.word	0x000c0002
   22824:	000d0002 	.word	0x000d0002
   22828:	000f0002 	.word	0x000f0002
   2282c:	00124f80 	.word	0x00124f80
   22830:	42001000 	.word	0x42001000
   22834:	200056f4 	.word	0x200056f4
   22838:	00029e4d 	.word	0x00029e4d
   2283c:	00022429 	.word	0x00022429
   22840:	000220f5 	.word	0x000220f5
   22844:	00022135 	.word	0x00022135

00022848 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   22848:	b590      	push	{r4, r7, lr}
   2284a:	b085      	sub	sp, #20
   2284c:	af00      	add	r7, sp, #0
   2284e:	0002      	movs	r2, r0
   22850:	6039      	str	r1, [r7, #0]
   22852:	1dfb      	adds	r3, r7, #7
   22854:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   22856:	230f      	movs	r3, #15
   22858:	18fb      	adds	r3, r7, r3
   2285a:	2200      	movs	r2, #0
   2285c:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   2285e:	1dfb      	adds	r3, r7, #7
   22860:	781b      	ldrb	r3, [r3, #0]
   22862:	2b03      	cmp	r3, #3
   22864:	d10f      	bne.n	22886 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   22866:	683b      	ldr	r3, [r7, #0]
   22868:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   2286a:	68bb      	ldr	r3, [r7, #8]
   2286c:	6818      	ldr	r0, [r3, #0]
   2286e:	68bb      	ldr	r3, [r7, #8]
   22870:	6859      	ldr	r1, [r3, #4]
   22872:	68bb      	ldr	r3, [r7, #8]
   22874:	891b      	ldrh	r3, [r3, #8]
   22876:	220f      	movs	r2, #15
   22878:	18bc      	adds	r4, r7, r2
   2287a:	001a      	movs	r2, r3
   2287c:	4b10      	ldr	r3, [pc, #64]	; (228c0 <nm_bus_ioctl+0x78>)
   2287e:	4798      	blx	r3
   22880:	0003      	movs	r3, r0
   22882:	7023      	strb	r3, [r4, #0]
		}
		break;
   22884:	e013      	b.n	228ae <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   22886:	230f      	movs	r3, #15
   22888:	18fb      	adds	r3, r7, r3
   2288a:	22ff      	movs	r2, #255	; 0xff
   2288c:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   2288e:	2383      	movs	r3, #131	; 0x83
   22890:	005a      	lsls	r2, r3, #1
   22892:	490c      	ldr	r1, [pc, #48]	; (228c4 <nm_bus_ioctl+0x7c>)
   22894:	4b0c      	ldr	r3, [pc, #48]	; (228c8 <nm_bus_ioctl+0x80>)
   22896:	0018      	movs	r0, r3
   22898:	4b0c      	ldr	r3, [pc, #48]	; (228cc <nm_bus_ioctl+0x84>)
   2289a:	4798      	blx	r3
   2289c:	4b0c      	ldr	r3, [pc, #48]	; (228d0 <nm_bus_ioctl+0x88>)
   2289e:	0018      	movs	r0, r3
   228a0:	4b0a      	ldr	r3, [pc, #40]	; (228cc <nm_bus_ioctl+0x84>)
   228a2:	4798      	blx	r3
   228a4:	4b0b      	ldr	r3, [pc, #44]	; (228d4 <nm_bus_ioctl+0x8c>)
   228a6:	0018      	movs	r0, r3
   228a8:	4b08      	ldr	r3, [pc, #32]	; (228cc <nm_bus_ioctl+0x84>)
   228aa:	4798      	blx	r3
			break;
   228ac:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   228ae:	230f      	movs	r3, #15
   228b0:	18fb      	adds	r3, r7, r3
   228b2:	781b      	ldrb	r3, [r3, #0]
   228b4:	b25b      	sxtb	r3, r3
}
   228b6:	0018      	movs	r0, r3
   228b8:	46bd      	mov	sp, r7
   228ba:	b005      	add	sp, #20
   228bc:	bd90      	pop	{r4, r7, pc}
   228be:	46c0      	nop			; (mov r8, r8)
   228c0:	000225e9 	.word	0x000225e9
   228c4:	0003a8cc 	.word	0x0003a8cc
   228c8:	0003a8a0 	.word	0x0003a8a0
   228cc:	00020039 	.word	0x00020039
   228d0:	0003a8b4 	.word	0x0003a8b4
   228d4:	0003a8c8 	.word	0x0003a8c8

000228d8 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   228d8:	b580      	push	{r7, lr}
   228da:	b082      	sub	sp, #8
   228dc:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   228de:	1dfb      	adds	r3, r7, #7
   228e0:	2200      	movs	r2, #0
   228e2:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   228e4:	1d3b      	adds	r3, r7, #4
   228e6:	0018      	movs	r0, r3
   228e8:	4b13      	ldr	r3, [pc, #76]	; (22938 <nm_bus_deinit+0x60>)
   228ea:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   228ec:	1d3b      	adds	r3, r7, #4
   228ee:	2200      	movs	r2, #0
   228f0:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   228f2:	1d3b      	adds	r3, r7, #4
   228f4:	2200      	movs	r2, #0
   228f6:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   228f8:	4b10      	ldr	r3, [pc, #64]	; (2293c <nm_bus_deinit+0x64>)
   228fa:	0018      	movs	r0, r3
   228fc:	4b10      	ldr	r3, [pc, #64]	; (22940 <nm_bus_deinit+0x68>)
   228fe:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   22900:	1d3b      	adds	r3, r7, #4
   22902:	0019      	movs	r1, r3
   22904:	200c      	movs	r0, #12
   22906:	4b0f      	ldr	r3, [pc, #60]	; (22944 <nm_bus_deinit+0x6c>)
   22908:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   2290a:	1d3b      	adds	r3, r7, #4
   2290c:	0019      	movs	r1, r3
   2290e:	200f      	movs	r0, #15
   22910:	4b0c      	ldr	r3, [pc, #48]	; (22944 <nm_bus_deinit+0x6c>)
   22912:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   22914:	1d3b      	adds	r3, r7, #4
   22916:	0019      	movs	r1, r3
   22918:	200d      	movs	r0, #13
   2291a:	4b0a      	ldr	r3, [pc, #40]	; (22944 <nm_bus_deinit+0x6c>)
   2291c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   2291e:	1d3b      	adds	r3, r7, #4
   22920:	0019      	movs	r1, r3
   22922:	200e      	movs	r0, #14
   22924:	4b07      	ldr	r3, [pc, #28]	; (22944 <nm_bus_deinit+0x6c>)
   22926:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   22928:	1dfb      	adds	r3, r7, #7
   2292a:	781b      	ldrb	r3, [r3, #0]
   2292c:	b25b      	sxtb	r3, r3
}
   2292e:	0018      	movs	r0, r3
   22930:	46bd      	mov	sp, r7
   22932:	b002      	add	sp, #8
   22934:	bd80      	pop	{r7, pc}
   22936:	46c0      	nop			; (mov r8, r8)
   22938:	00022285 	.word	0x00022285
   2293c:	200056f4 	.word	0x200056f4
   22940:	0002245d 	.word	0x0002245d
   22944:	00028751 	.word	0x00028751

00022948 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   22948:	b580      	push	{r7, lr}
   2294a:	b084      	sub	sp, #16
   2294c:	af00      	add	r7, sp, #0
   2294e:	60f8      	str	r0, [r7, #12]
   22950:	60b9      	str	r1, [r7, #8]
   22952:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   22954:	687b      	ldr	r3, [r7, #4]
   22956:	2b00      	cmp	r3, #0
   22958:	d010      	beq.n	2297c <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   2295a:	68bb      	ldr	r3, [r7, #8]
   2295c:	781a      	ldrb	r2, [r3, #0]
   2295e:	68fb      	ldr	r3, [r7, #12]
   22960:	701a      	strb	r2, [r3, #0]
		pDst++;
   22962:	68fb      	ldr	r3, [r7, #12]
   22964:	3301      	adds	r3, #1
   22966:	60fb      	str	r3, [r7, #12]
		pSrc++;
   22968:	68bb      	ldr	r3, [r7, #8]
   2296a:	3301      	adds	r3, #1
   2296c:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   2296e:	687b      	ldr	r3, [r7, #4]
   22970:	3b01      	subs	r3, #1
   22972:	607b      	str	r3, [r7, #4]
   22974:	687b      	ldr	r3, [r7, #4]
   22976:	2b00      	cmp	r3, #0
   22978:	d1ef      	bne.n	2295a <m2m_memcpy+0x12>
   2297a:	e000      	b.n	2297e <m2m_memcpy+0x36>
	if(sz == 0) return;
   2297c:	46c0      	nop			; (mov r8, r8)
}
   2297e:	46bd      	mov	sp, r7
   22980:	b004      	add	sp, #16
   22982:	bd80      	pop	{r7, pc}

00022984 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   22984:	b580      	push	{r7, lr}
   22986:	b084      	sub	sp, #16
   22988:	af00      	add	r7, sp, #0
   2298a:	60f8      	str	r0, [r7, #12]
   2298c:	607a      	str	r2, [r7, #4]
   2298e:	230b      	movs	r3, #11
   22990:	18fb      	adds	r3, r7, r3
   22992:	1c0a      	adds	r2, r1, #0
   22994:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   22996:	687b      	ldr	r3, [r7, #4]
   22998:	2b00      	cmp	r3, #0
   2299a:	d00e      	beq.n	229ba <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   2299c:	68fb      	ldr	r3, [r7, #12]
   2299e:	220b      	movs	r2, #11
   229a0:	18ba      	adds	r2, r7, r2
   229a2:	7812      	ldrb	r2, [r2, #0]
   229a4:	701a      	strb	r2, [r3, #0]
		pBuf++;
   229a6:	68fb      	ldr	r3, [r7, #12]
   229a8:	3301      	adds	r3, #1
   229aa:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   229ac:	687b      	ldr	r3, [r7, #4]
   229ae:	3b01      	subs	r3, #1
   229b0:	607b      	str	r3, [r7, #4]
   229b2:	687b      	ldr	r3, [r7, #4]
   229b4:	2b00      	cmp	r3, #0
   229b6:	d1f1      	bne.n	2299c <m2m_memset+0x18>
   229b8:	e000      	b.n	229bc <m2m_memset+0x38>
	if(sz == 0) return;
   229ba:	46c0      	nop			; (mov r8, r8)
}
   229bc:	46bd      	mov	sp, r7
   229be:	b004      	add	sp, #16
   229c0:	bd80      	pop	{r7, pc}

000229c2 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   229c2:	b580      	push	{r7, lr}
   229c4:	b084      	sub	sp, #16
   229c6:	af00      	add	r7, sp, #0
   229c8:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   229ca:	230e      	movs	r3, #14
   229cc:	18fb      	adds	r3, r7, r3
   229ce:	2200      	movs	r2, #0
   229d0:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   229d2:	e009      	b.n	229e8 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   229d4:	230e      	movs	r3, #14
   229d6:	18fb      	adds	r3, r7, r3
   229d8:	881a      	ldrh	r2, [r3, #0]
   229da:	230e      	movs	r3, #14
   229dc:	18fb      	adds	r3, r7, r3
   229de:	3201      	adds	r2, #1
   229e0:	801a      	strh	r2, [r3, #0]
		pcStr++;
   229e2:	687b      	ldr	r3, [r7, #4]
   229e4:	3301      	adds	r3, #1
   229e6:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   229e8:	687b      	ldr	r3, [r7, #4]
   229ea:	781b      	ldrb	r3, [r3, #0]
   229ec:	2b00      	cmp	r3, #0
   229ee:	d1f1      	bne.n	229d4 <m2m_strlen+0x12>
	}
	return u16StrLen;
   229f0:	230e      	movs	r3, #14
   229f2:	18fb      	adds	r3, r7, r3
   229f4:	881b      	ldrh	r3, [r3, #0]
}
   229f6:	0018      	movs	r0, r3
   229f8:	46bd      	mov	sp, r7
   229fa:	b004      	add	sp, #16
   229fc:	bd80      	pop	{r7, pc}
	...

00022a00 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   22a00:	b580      	push	{r7, lr}
   22a02:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   22a04:	4b04      	ldr	r3, [pc, #16]	; (22a18 <isr+0x18>)
   22a06:	78db      	ldrb	r3, [r3, #3]
   22a08:	b2db      	uxtb	r3, r3
   22a0a:	3301      	adds	r3, #1
   22a0c:	b2da      	uxtb	r2, r3
   22a0e:	4b02      	ldr	r3, [pc, #8]	; (22a18 <isr+0x18>)
   22a10:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   22a12:	46c0      	nop			; (mov r8, r8)
   22a14:	46bd      	mov	sp, r7
   22a16:	bd80      	pop	{r7, pc}
   22a18:	20005700 	.word	0x20005700

00022a1c <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   22a1c:	b590      	push	{r4, r7, lr}
   22a1e:	b083      	sub	sp, #12
   22a20:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   22a22:	1dfb      	adds	r3, r7, #7
   22a24:	2200      	movs	r2, #0
   22a26:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   22a28:	4b14      	ldr	r3, [pc, #80]	; (22a7c <hif_set_rx_done+0x60>)
   22a2a:	2200      	movs	r2, #0
   22a2c:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   22a2e:	2001      	movs	r0, #1
   22a30:	4b13      	ldr	r3, [pc, #76]	; (22a80 <hif_set_rx_done+0x64>)
   22a32:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   22a34:	1dfc      	adds	r4, r7, #7
   22a36:	003b      	movs	r3, r7
   22a38:	4a12      	ldr	r2, [pc, #72]	; (22a84 <hif_set_rx_done+0x68>)
   22a3a:	0019      	movs	r1, r3
   22a3c:	0010      	movs	r0, r2
   22a3e:	4b12      	ldr	r3, [pc, #72]	; (22a88 <hif_set_rx_done+0x6c>)
   22a40:	4798      	blx	r3
   22a42:	0003      	movs	r3, r0
   22a44:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   22a46:	1dfb      	adds	r3, r7, #7
   22a48:	781b      	ldrb	r3, [r3, #0]
   22a4a:	b25b      	sxtb	r3, r3
   22a4c:	2b00      	cmp	r3, #0
   22a4e:	d10d      	bne.n	22a6c <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   22a50:	683b      	ldr	r3, [r7, #0]
   22a52:	2202      	movs	r2, #2
   22a54:	4313      	orrs	r3, r2
   22a56:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   22a58:	683b      	ldr	r3, [r7, #0]
   22a5a:	1dfc      	adds	r4, r7, #7
   22a5c:	4a09      	ldr	r2, [pc, #36]	; (22a84 <hif_set_rx_done+0x68>)
   22a5e:	0019      	movs	r1, r3
   22a60:	0010      	movs	r0, r2
   22a62:	4b0a      	ldr	r3, [pc, #40]	; (22a8c <hif_set_rx_done+0x70>)
   22a64:	4798      	blx	r3
   22a66:	0003      	movs	r3, r0
   22a68:	7023      	strb	r3, [r4, #0]
   22a6a:	e000      	b.n	22a6e <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   22a6c:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   22a6e:	1dfb      	adds	r3, r7, #7
   22a70:	781b      	ldrb	r3, [r3, #0]
   22a72:	b25b      	sxtb	r3, r3

}
   22a74:	0018      	movs	r0, r3
   22a76:	46bd      	mov	sp, r7
   22a78:	b003      	add	sp, #12
   22a7a:	bd90      	pop	{r4, r7, pc}
   22a7c:	20005700 	.word	0x20005700
   22a80:	000221c9 	.word	0x000221c9
   22a84:	00001070 	.word	0x00001070
   22a88:	00024a15 	.word	0x00024a15
   22a8c:	00024a39 	.word	0x00024a39

00022a90 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   22a90:	b580      	push	{r7, lr}
   22a92:	b082      	sub	sp, #8
   22a94:	af00      	add	r7, sp, #0
   22a96:	603a      	str	r2, [r7, #0]
   22a98:	1dfb      	adds	r3, r7, #7
   22a9a:	1c02      	adds	r2, r0, #0
   22a9c:	701a      	strb	r2, [r3, #0]
   22a9e:	1d3b      	adds	r3, r7, #4
   22aa0:	1c0a      	adds	r2, r1, #0
   22aa2:	801a      	strh	r2, [r3, #0]


}
   22aa4:	46c0      	nop			; (mov r8, r8)
   22aa6:	46bd      	mov	sp, r7
   22aa8:	b002      	add	sp, #8
   22aaa:	bd80      	pop	{r7, pc}

00022aac <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   22aac:	b590      	push	{r4, r7, lr}
   22aae:	b083      	sub	sp, #12
   22ab0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22ab2:	1dfb      	adds	r3, r7, #7
   22ab4:	2200      	movs	r2, #0
   22ab6:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   22ab8:	4b16      	ldr	r3, [pc, #88]	; (22b14 <hif_chip_wake+0x68>)
   22aba:	789b      	ldrb	r3, [r3, #2]
   22abc:	b2db      	uxtb	r3, r3
   22abe:	2b00      	cmp	r3, #0
   22ac0:	d003      	beq.n	22aca <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   22ac2:	1dfb      	adds	r3, r7, #7
   22ac4:	781b      	ldrb	r3, [r3, #0]
   22ac6:	b25b      	sxtb	r3, r3
   22ac8:	e01f      	b.n	22b0a <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   22aca:	4b12      	ldr	r3, [pc, #72]	; (22b14 <hif_chip_wake+0x68>)
   22acc:	785b      	ldrb	r3, [r3, #1]
   22ace:	b2db      	uxtb	r3, r3
   22ad0:	2b00      	cmp	r3, #0
   22ad2:	d10e      	bne.n	22af2 <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   22ad4:	4b0f      	ldr	r3, [pc, #60]	; (22b14 <hif_chip_wake+0x68>)
   22ad6:	781b      	ldrb	r3, [r3, #0]
   22ad8:	b2db      	uxtb	r3, r3
   22ada:	2b00      	cmp	r3, #0
   22adc:	d009      	beq.n	22af2 <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   22ade:	1dfc      	adds	r4, r7, #7
   22ae0:	4b0d      	ldr	r3, [pc, #52]	; (22b18 <hif_chip_wake+0x6c>)
   22ae2:	4798      	blx	r3
   22ae4:	0003      	movs	r3, r0
   22ae6:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   22ae8:	1dfb      	adds	r3, r7, #7
   22aea:	781b      	ldrb	r3, [r3, #0]
   22aec:	b25b      	sxtb	r3, r3
   22aee:	2b00      	cmp	r3, #0
   22af0:	d107      	bne.n	22b02 <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   22af2:	4b08      	ldr	r3, [pc, #32]	; (22b14 <hif_chip_wake+0x68>)
   22af4:	785b      	ldrb	r3, [r3, #1]
   22af6:	b2db      	uxtb	r3, r3
   22af8:	3301      	adds	r3, #1
   22afa:	b2da      	uxtb	r2, r3
   22afc:	4b05      	ldr	r3, [pc, #20]	; (22b14 <hif_chip_wake+0x68>)
   22afe:	705a      	strb	r2, [r3, #1]
   22b00:	e000      	b.n	22b04 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   22b02:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   22b04:	1dfb      	adds	r3, r7, #7
   22b06:	781b      	ldrb	r3, [r3, #0]
   22b08:	b25b      	sxtb	r3, r3
}
   22b0a:	0018      	movs	r0, r3
   22b0c:	46bd      	mov	sp, r7
   22b0e:	b003      	add	sp, #12
   22b10:	bd90      	pop	{r4, r7, pc}
   22b12:	46c0      	nop			; (mov r8, r8)
   22b14:	20005700 	.word	0x20005700
   22b18:	000244e5 	.word	0x000244e5

00022b1c <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   22b1c:	b580      	push	{r7, lr}
   22b1e:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   22b20:	4b07      	ldr	r3, [pc, #28]	; (22b40 <hif_chip_sleep_sc+0x24>)
   22b22:	785b      	ldrb	r3, [r3, #1]
   22b24:	b2db      	uxtb	r3, r3
   22b26:	2b00      	cmp	r3, #0
   22b28:	d006      	beq.n	22b38 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   22b2a:	4b05      	ldr	r3, [pc, #20]	; (22b40 <hif_chip_sleep_sc+0x24>)
   22b2c:	785b      	ldrb	r3, [r3, #1]
   22b2e:	b2db      	uxtb	r3, r3
   22b30:	3b01      	subs	r3, #1
   22b32:	b2da      	uxtb	r2, r3
   22b34:	4b02      	ldr	r3, [pc, #8]	; (22b40 <hif_chip_sleep_sc+0x24>)
   22b36:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   22b38:	2300      	movs	r3, #0
}
   22b3a:	0018      	movs	r0, r3
   22b3c:	46bd      	mov	sp, r7
   22b3e:	bd80      	pop	{r7, pc}
   22b40:	20005700 	.word	0x20005700

00022b44 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   22b44:	b590      	push	{r4, r7, lr}
   22b46:	b083      	sub	sp, #12
   22b48:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22b4a:	1dfb      	adds	r3, r7, #7
   22b4c:	2200      	movs	r2, #0
   22b4e:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   22b50:	4b10      	ldr	r3, [pc, #64]	; (22b94 <hif_chip_sleep+0x50>)
   22b52:	785b      	ldrb	r3, [r3, #1]
   22b54:	b2db      	uxtb	r3, r3
   22b56:	2b00      	cmp	r3, #0
   22b58:	d006      	beq.n	22b68 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   22b5a:	4b0e      	ldr	r3, [pc, #56]	; (22b94 <hif_chip_sleep+0x50>)
   22b5c:	785b      	ldrb	r3, [r3, #1]
   22b5e:	b2db      	uxtb	r3, r3
   22b60:	3b01      	subs	r3, #1
   22b62:	b2da      	uxtb	r2, r3
   22b64:	4b0b      	ldr	r3, [pc, #44]	; (22b94 <hif_chip_sleep+0x50>)
   22b66:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   22b68:	4b0a      	ldr	r3, [pc, #40]	; (22b94 <hif_chip_sleep+0x50>)
   22b6a:	785b      	ldrb	r3, [r3, #1]
   22b6c:	b2db      	uxtb	r3, r3
   22b6e:	2b00      	cmp	r3, #0
   22b70:	d109      	bne.n	22b86 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   22b72:	4b08      	ldr	r3, [pc, #32]	; (22b94 <hif_chip_sleep+0x50>)
   22b74:	781b      	ldrb	r3, [r3, #0]
   22b76:	b2db      	uxtb	r3, r3
   22b78:	2b00      	cmp	r3, #0
   22b7a:	d004      	beq.n	22b86 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   22b7c:	1dfc      	adds	r4, r7, #7
   22b7e:	4b06      	ldr	r3, [pc, #24]	; (22b98 <hif_chip_sleep+0x54>)
   22b80:	4798      	blx	r3
   22b82:	0003      	movs	r3, r0
   22b84:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   22b86:	1dfb      	adds	r3, r7, #7
   22b88:	781b      	ldrb	r3, [r3, #0]
   22b8a:	b25b      	sxtb	r3, r3
}
   22b8c:	0018      	movs	r0, r3
   22b8e:	46bd      	mov	sp, r7
   22b90:	b003      	add	sp, #12
   22b92:	bd90      	pop	{r4, r7, pc}
   22b94:	20005700 	.word	0x20005700
   22b98:	0002440d 	.word	0x0002440d

00022b9c <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   22b9c:	b580      	push	{r7, lr}
   22b9e:	b082      	sub	sp, #8
   22ba0:	af00      	add	r7, sp, #0
   22ba2:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   22ba4:	4b09      	ldr	r3, [pc, #36]	; (22bcc <hif_init+0x30>)
   22ba6:	222c      	movs	r2, #44	; 0x2c
   22ba8:	2100      	movs	r1, #0
   22baa:	0018      	movs	r0, r3
   22bac:	4b08      	ldr	r3, [pc, #32]	; (22bd0 <hif_init+0x34>)
   22bae:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   22bb0:	4b08      	ldr	r3, [pc, #32]	; (22bd4 <hif_init+0x38>)
   22bb2:	0018      	movs	r0, r3
   22bb4:	4b08      	ldr	r3, [pc, #32]	; (22bd8 <hif_init+0x3c>)
   22bb6:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   22bb8:	4b08      	ldr	r3, [pc, #32]	; (22bdc <hif_init+0x40>)
   22bba:	0019      	movs	r1, r3
   22bbc:	2003      	movs	r0, #3
   22bbe:	4b08      	ldr	r3, [pc, #32]	; (22be0 <hif_init+0x44>)
   22bc0:	4798      	blx	r3
	return M2M_SUCCESS;
   22bc2:	2300      	movs	r3, #0
}
   22bc4:	0018      	movs	r0, r3
   22bc6:	46bd      	mov	sp, r7
   22bc8:	b002      	add	sp, #8
   22bca:	bd80      	pop	{r7, pc}
   22bcc:	20005700 	.word	0x20005700
   22bd0:	00022985 	.word	0x00022985
   22bd4:	00022a01 	.word	0x00022a01
   22bd8:	00022151 	.word	0x00022151
   22bdc:	00022a91 	.word	0x00022a91
   22be0:	00023681 	.word	0x00023681

00022be4 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   22be4:	b590      	push	{r4, r7, lr}
   22be6:	b089      	sub	sp, #36	; 0x24
   22be8:	af00      	add	r7, sp, #0
   22bea:	0004      	movs	r4, r0
   22bec:	0008      	movs	r0, r1
   22bee:	603a      	str	r2, [r7, #0]
   22bf0:	0019      	movs	r1, r3
   22bf2:	1dfb      	adds	r3, r7, #7
   22bf4:	1c22      	adds	r2, r4, #0
   22bf6:	701a      	strb	r2, [r3, #0]
   22bf8:	1dbb      	adds	r3, r7, #6
   22bfa:	1c02      	adds	r2, r0, #0
   22bfc:	701a      	strb	r2, [r3, #0]
   22bfe:	1d3b      	adds	r3, r7, #4
   22c00:	1c0a      	adds	r2, r1, #0
   22c02:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   22c04:	231f      	movs	r3, #31
   22c06:	18fb      	adds	r3, r7, r3
   22c08:	22ff      	movs	r2, #255	; 0xff
   22c0a:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   22c0c:	1dbb      	adds	r3, r7, #6
   22c0e:	781b      	ldrb	r3, [r3, #0]
   22c10:	227f      	movs	r2, #127	; 0x7f
   22c12:	4013      	ands	r3, r2
   22c14:	b2da      	uxtb	r2, r3
   22c16:	2318      	movs	r3, #24
   22c18:	18fb      	adds	r3, r7, r3
   22c1a:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   22c1c:	2318      	movs	r3, #24
   22c1e:	18fb      	adds	r3, r7, r3
   22c20:	1dfa      	adds	r2, r7, #7
   22c22:	7812      	ldrb	r2, [r2, #0]
   22c24:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   22c26:	2318      	movs	r3, #24
   22c28:	18fb      	adds	r3, r7, r3
   22c2a:	2208      	movs	r2, #8
   22c2c:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   22c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   22c30:	2b00      	cmp	r3, #0
   22c32:	d011      	beq.n	22c58 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   22c34:	2318      	movs	r3, #24
   22c36:	18fb      	adds	r3, r7, r3
   22c38:	885b      	ldrh	r3, [r3, #2]
   22c3a:	b29a      	uxth	r2, r3
   22c3c:	2338      	movs	r3, #56	; 0x38
   22c3e:	18f9      	adds	r1, r7, r3
   22c40:	2334      	movs	r3, #52	; 0x34
   22c42:	18fb      	adds	r3, r7, r3
   22c44:	8809      	ldrh	r1, [r1, #0]
   22c46:	881b      	ldrh	r3, [r3, #0]
   22c48:	18cb      	adds	r3, r1, r3
   22c4a:	b29b      	uxth	r3, r3
   22c4c:	18d3      	adds	r3, r2, r3
   22c4e:	b29a      	uxth	r2, r3
   22c50:	2318      	movs	r3, #24
   22c52:	18fb      	adds	r3, r7, r3
   22c54:	805a      	strh	r2, [r3, #2]
   22c56:	e00a      	b.n	22c6e <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   22c58:	2318      	movs	r3, #24
   22c5a:	18fb      	adds	r3, r7, r3
   22c5c:	885b      	ldrh	r3, [r3, #2]
   22c5e:	b29a      	uxth	r2, r3
   22c60:	1d3b      	adds	r3, r7, #4
   22c62:	881b      	ldrh	r3, [r3, #0]
   22c64:	18d3      	adds	r3, r2, r3
   22c66:	b29a      	uxth	r2, r3
   22c68:	2318      	movs	r3, #24
   22c6a:	18fb      	adds	r3, r7, r3
   22c6c:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   22c6e:	231f      	movs	r3, #31
   22c70:	18fc      	adds	r4, r7, r3
   22c72:	4bb2      	ldr	r3, [pc, #712]	; (22f3c <hif_send+0x358>)
   22c74:	4798      	blx	r3
   22c76:	0003      	movs	r3, r0
   22c78:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   22c7a:	231f      	movs	r3, #31
   22c7c:	18fb      	adds	r3, r7, r3
   22c7e:	781b      	ldrb	r3, [r3, #0]
   22c80:	b25b      	sxtb	r3, r3
   22c82:	2b00      	cmp	r3, #0
   22c84:	d000      	beq.n	22c88 <hif_send+0xa4>
   22c86:	e129      	b.n	22edc <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   22c88:	2300      	movs	r3, #0
   22c8a:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   22c8c:	230e      	movs	r3, #14
   22c8e:	18fb      	adds	r3, r7, r3
   22c90:	2200      	movs	r2, #0
   22c92:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   22c94:	2300      	movs	r3, #0
   22c96:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   22c98:	1dfb      	adds	r3, r7, #7
   22c9a:	781a      	ldrb	r2, [r3, #0]
   22c9c:	697b      	ldr	r3, [r7, #20]
   22c9e:	4313      	orrs	r3, r2
   22ca0:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   22ca2:	1dbb      	adds	r3, r7, #6
   22ca4:	781b      	ldrb	r3, [r3, #0]
   22ca6:	021a      	lsls	r2, r3, #8
   22ca8:	697b      	ldr	r3, [r7, #20]
   22caa:	4313      	orrs	r3, r2
   22cac:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   22cae:	2318      	movs	r3, #24
   22cb0:	18fb      	adds	r3, r7, r3
   22cb2:	885b      	ldrh	r3, [r3, #2]
   22cb4:	b29b      	uxth	r3, r3
   22cb6:	041a      	lsls	r2, r3, #16
   22cb8:	697b      	ldr	r3, [r7, #20]
   22cba:	4313      	orrs	r3, r2
   22cbc:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   22cbe:	697b      	ldr	r3, [r7, #20]
   22cc0:	221f      	movs	r2, #31
   22cc2:	18bc      	adds	r4, r7, r2
   22cc4:	4a9e      	ldr	r2, [pc, #632]	; (22f40 <hif_send+0x35c>)
   22cc6:	0019      	movs	r1, r3
   22cc8:	0010      	movs	r0, r2
   22cca:	4b9e      	ldr	r3, [pc, #632]	; (22f44 <hif_send+0x360>)
   22ccc:	4798      	blx	r3
   22cce:	0003      	movs	r3, r0
   22cd0:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   22cd2:	231f      	movs	r3, #31
   22cd4:	18fb      	adds	r3, r7, r3
   22cd6:	781b      	ldrb	r3, [r3, #0]
   22cd8:	b25b      	sxtb	r3, r3
   22cda:	2b00      	cmp	r3, #0
   22cdc:	d000      	beq.n	22ce0 <hif_send+0xfc>
   22cde:	e119      	b.n	22f14 <hif_send+0x330>

		reg = 0UL;
   22ce0:	2300      	movs	r3, #0
   22ce2:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   22ce4:	697b      	ldr	r3, [r7, #20]
   22ce6:	2202      	movs	r2, #2
   22ce8:	4313      	orrs	r3, r2
   22cea:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   22cec:	697b      	ldr	r3, [r7, #20]
   22cee:	221f      	movs	r2, #31
   22cf0:	18bc      	adds	r4, r7, r2
   22cf2:	4a95      	ldr	r2, [pc, #596]	; (22f48 <hif_send+0x364>)
   22cf4:	0019      	movs	r1, r3
   22cf6:	0010      	movs	r0, r2
   22cf8:	4b92      	ldr	r3, [pc, #584]	; (22f44 <hif_send+0x360>)
   22cfa:	4798      	blx	r3
   22cfc:	0003      	movs	r3, r0
   22cfe:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   22d00:	231f      	movs	r3, #31
   22d02:	18fb      	adds	r3, r7, r3
   22d04:	781b      	ldrb	r3, [r3, #0]
   22d06:	b25b      	sxtb	r3, r3
   22d08:	2b00      	cmp	r3, #0
   22d0a:	d000      	beq.n	22d0e <hif_send+0x12a>
   22d0c:	e104      	b.n	22f18 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   22d0e:	2300      	movs	r3, #0
   22d10:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   22d12:	230e      	movs	r3, #14
   22d14:	18fb      	adds	r3, r7, r3
   22d16:	2200      	movs	r2, #0
   22d18:	801a      	strh	r2, [r3, #0]
   22d1a:	e050      	b.n	22dbe <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   22d1c:	231f      	movs	r3, #31
   22d1e:	18fc      	adds	r4, r7, r3
   22d20:	2314      	movs	r3, #20
   22d22:	18fb      	adds	r3, r7, r3
   22d24:	4a88      	ldr	r2, [pc, #544]	; (22f48 <hif_send+0x364>)
   22d26:	0019      	movs	r1, r3
   22d28:	0010      	movs	r0, r2
   22d2a:	4b88      	ldr	r3, [pc, #544]	; (22f4c <hif_send+0x368>)
   22d2c:	4798      	blx	r3
   22d2e:	0003      	movs	r3, r0
   22d30:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   22d32:	231f      	movs	r3, #31
   22d34:	18fb      	adds	r3, r7, r3
   22d36:	781b      	ldrb	r3, [r3, #0]
   22d38:	b25b      	sxtb	r3, r3
   22d3a:	2b00      	cmp	r3, #0
   22d3c:	d147      	bne.n	22dce <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   22d3e:	230e      	movs	r3, #14
   22d40:	18fb      	adds	r3, r7, r3
   22d42:	881b      	ldrh	r3, [r3, #0]
   22d44:	b29a      	uxth	r2, r3
   22d46:	23f4      	movs	r3, #244	; 0xf4
   22d48:	33ff      	adds	r3, #255	; 0xff
   22d4a:	429a      	cmp	r2, r3
   22d4c:	d916      	bls.n	22d7c <hif_send+0x198>
				if(cnt < 501) {
   22d4e:	230e      	movs	r3, #14
   22d50:	18fb      	adds	r3, r7, r3
   22d52:	881b      	ldrh	r3, [r3, #0]
   22d54:	b29a      	uxth	r2, r3
   22d56:	23fa      	movs	r3, #250	; 0xfa
   22d58:	005b      	lsls	r3, r3, #1
   22d5a:	429a      	cmp	r2, r3
   22d5c:	d80b      	bhi.n	22d76 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   22d5e:	4b7c      	ldr	r3, [pc, #496]	; (22f50 <hif_send+0x36c>)
   22d60:	0018      	movs	r0, r3
   22d62:	4b7c      	ldr	r3, [pc, #496]	; (22f54 <hif_send+0x370>)
   22d64:	4798      	blx	r3
   22d66:	4b7c      	ldr	r3, [pc, #496]	; (22f58 <hif_send+0x374>)
   22d68:	0018      	movs	r0, r3
   22d6a:	4b7a      	ldr	r3, [pc, #488]	; (22f54 <hif_send+0x370>)
   22d6c:	4798      	blx	r3
   22d6e:	4b7b      	ldr	r3, [pc, #492]	; (22f5c <hif_send+0x378>)
   22d70:	0018      	movs	r0, r3
   22d72:	4b78      	ldr	r3, [pc, #480]	; (22f54 <hif_send+0x370>)
   22d74:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   22d76:	2001      	movs	r0, #1
   22d78:	4b79      	ldr	r3, [pc, #484]	; (22f60 <hif_send+0x37c>)
   22d7a:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   22d7c:	697b      	ldr	r3, [r7, #20]
   22d7e:	2202      	movs	r2, #2
   22d80:	4013      	ands	r3, r2
   22d82:	d113      	bne.n	22dac <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   22d84:	231f      	movs	r3, #31
   22d86:	18fc      	adds	r4, r7, r3
   22d88:	2310      	movs	r3, #16
   22d8a:	18fb      	adds	r3, r7, r3
   22d8c:	4a75      	ldr	r2, [pc, #468]	; (22f64 <hif_send+0x380>)
   22d8e:	0019      	movs	r1, r3
   22d90:	0010      	movs	r0, r2
   22d92:	4b6e      	ldr	r3, [pc, #440]	; (22f4c <hif_send+0x368>)
   22d94:	4798      	blx	r3
   22d96:	0003      	movs	r3, r0
   22d98:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   22d9a:	231f      	movs	r3, #31
   22d9c:	18fb      	adds	r3, r7, r3
   22d9e:	781b      	ldrb	r3, [r3, #0]
   22da0:	b25b      	sxtb	r3, r3
   22da2:	2b00      	cmp	r3, #0
   22da4:	d015      	beq.n	22dd2 <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   22da6:	2300      	movs	r3, #0
   22da8:	613b      	str	r3, [r7, #16]
					goto ERR1;
   22daa:	e0bc      	b.n	22f26 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   22dac:	230e      	movs	r3, #14
   22dae:	18fb      	adds	r3, r7, r3
   22db0:	881b      	ldrh	r3, [r3, #0]
   22db2:	b29b      	uxth	r3, r3
   22db4:	3301      	adds	r3, #1
   22db6:	b29a      	uxth	r2, r3
   22db8:	230e      	movs	r3, #14
   22dba:	18fb      	adds	r3, r7, r3
   22dbc:	801a      	strh	r2, [r3, #0]
   22dbe:	230e      	movs	r3, #14
   22dc0:	18fb      	adds	r3, r7, r3
   22dc2:	881b      	ldrh	r3, [r3, #0]
   22dc4:	b29b      	uxth	r3, r3
   22dc6:	4a68      	ldr	r2, [pc, #416]	; (22f68 <hif_send+0x384>)
   22dc8:	4293      	cmp	r3, r2
   22dca:	d9a7      	bls.n	22d1c <hif_send+0x138>
   22dcc:	e002      	b.n	22dd4 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   22dce:	46c0      	nop			; (mov r8, r8)
   22dd0:	e000      	b.n	22dd4 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   22dd2:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   22dd4:	693b      	ldr	r3, [r7, #16]
   22dd6:	2b00      	cmp	r3, #0
   22dd8:	d100      	bne.n	22ddc <hif_send+0x1f8>
   22dda:	e074      	b.n	22ec6 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   22ddc:	693b      	ldr	r3, [r7, #16]
   22dde:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   22de0:	2318      	movs	r3, #24
   22de2:	18fb      	adds	r3, r7, r3
   22de4:	885b      	ldrh	r3, [r3, #2]
   22de6:	b29a      	uxth	r2, r3
   22de8:	2318      	movs	r3, #24
   22dea:	18fb      	adds	r3, r7, r3
   22dec:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   22dee:	68bb      	ldr	r3, [r7, #8]
   22df0:	221f      	movs	r2, #31
   22df2:	18bc      	adds	r4, r7, r2
   22df4:	2218      	movs	r2, #24
   22df6:	18b9      	adds	r1, r7, r2
   22df8:	2208      	movs	r2, #8
   22dfa:	0018      	movs	r0, r3
   22dfc:	4b5b      	ldr	r3, [pc, #364]	; (22f6c <hif_send+0x388>)
   22dfe:	4798      	blx	r3
   22e00:	0003      	movs	r3, r0
   22e02:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   22e04:	231f      	movs	r3, #31
   22e06:	18fb      	adds	r3, r7, r3
   22e08:	781b      	ldrb	r3, [r3, #0]
   22e0a:	b25b      	sxtb	r3, r3
   22e0c:	2b00      	cmp	r3, #0
   22e0e:	d000      	beq.n	22e12 <hif_send+0x22e>
   22e10:	e084      	b.n	22f1c <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   22e12:	68bb      	ldr	r3, [r7, #8]
   22e14:	3308      	adds	r3, #8
   22e16:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   22e18:	683b      	ldr	r3, [r7, #0]
   22e1a:	2b00      	cmp	r3, #0
   22e1c:	d016      	beq.n	22e4c <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   22e1e:	68b8      	ldr	r0, [r7, #8]
   22e20:	1d3b      	adds	r3, r7, #4
   22e22:	881a      	ldrh	r2, [r3, #0]
   22e24:	231f      	movs	r3, #31
   22e26:	18fc      	adds	r4, r7, r3
   22e28:	683b      	ldr	r3, [r7, #0]
   22e2a:	0019      	movs	r1, r3
   22e2c:	4b4f      	ldr	r3, [pc, #316]	; (22f6c <hif_send+0x388>)
   22e2e:	4798      	blx	r3
   22e30:	0003      	movs	r3, r0
   22e32:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   22e34:	231f      	movs	r3, #31
   22e36:	18fb      	adds	r3, r7, r3
   22e38:	781b      	ldrb	r3, [r3, #0]
   22e3a:	b25b      	sxtb	r3, r3
   22e3c:	2b00      	cmp	r3, #0
   22e3e:	d000      	beq.n	22e42 <hif_send+0x25e>
   22e40:	e06e      	b.n	22f20 <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   22e42:	1d3b      	adds	r3, r7, #4
   22e44:	881a      	ldrh	r2, [r3, #0]
   22e46:	68bb      	ldr	r3, [r7, #8]
   22e48:	18d3      	adds	r3, r2, r3
   22e4a:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   22e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   22e4e:	2b00      	cmp	r3, #0
   22e50:	d021      	beq.n	22e96 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   22e52:	2338      	movs	r3, #56	; 0x38
   22e54:	18fb      	adds	r3, r7, r3
   22e56:	881a      	ldrh	r2, [r3, #0]
   22e58:	1d3b      	adds	r3, r7, #4
   22e5a:	881b      	ldrh	r3, [r3, #0]
   22e5c:	1ad3      	subs	r3, r2, r3
   22e5e:	001a      	movs	r2, r3
   22e60:	68bb      	ldr	r3, [r7, #8]
   22e62:	18d3      	adds	r3, r2, r3
   22e64:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   22e66:	68b8      	ldr	r0, [r7, #8]
   22e68:	2334      	movs	r3, #52	; 0x34
   22e6a:	18fb      	adds	r3, r7, r3
   22e6c:	881a      	ldrh	r2, [r3, #0]
   22e6e:	231f      	movs	r3, #31
   22e70:	18fc      	adds	r4, r7, r3
   22e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   22e74:	0019      	movs	r1, r3
   22e76:	4b3d      	ldr	r3, [pc, #244]	; (22f6c <hif_send+0x388>)
   22e78:	4798      	blx	r3
   22e7a:	0003      	movs	r3, r0
   22e7c:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   22e7e:	231f      	movs	r3, #31
   22e80:	18fb      	adds	r3, r7, r3
   22e82:	781b      	ldrb	r3, [r3, #0]
   22e84:	b25b      	sxtb	r3, r3
   22e86:	2b00      	cmp	r3, #0
   22e88:	d14c      	bne.n	22f24 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   22e8a:	2334      	movs	r3, #52	; 0x34
   22e8c:	18fb      	adds	r3, r7, r3
   22e8e:	881a      	ldrh	r2, [r3, #0]
   22e90:	68bb      	ldr	r3, [r7, #8]
   22e92:	18d3      	adds	r3, r2, r3
   22e94:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   22e96:	693b      	ldr	r3, [r7, #16]
   22e98:	009b      	lsls	r3, r3, #2
   22e9a:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   22e9c:	697b      	ldr	r3, [r7, #20]
   22e9e:	2202      	movs	r2, #2
   22ea0:	4313      	orrs	r3, r2
   22ea2:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   22ea4:	697b      	ldr	r3, [r7, #20]
   22ea6:	221f      	movs	r2, #31
   22ea8:	18bc      	adds	r4, r7, r2
   22eaa:	4a31      	ldr	r2, [pc, #196]	; (22f70 <hif_send+0x38c>)
   22eac:	0019      	movs	r1, r3
   22eae:	0010      	movs	r0, r2
   22eb0:	4b24      	ldr	r3, [pc, #144]	; (22f44 <hif_send+0x360>)
   22eb2:	4798      	blx	r3
   22eb4:	0003      	movs	r3, r0
   22eb6:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   22eb8:	231f      	movs	r3, #31
   22eba:	18fb      	adds	r3, r7, r3
   22ebc:	781b      	ldrb	r3, [r3, #0]
   22ebe:	b25b      	sxtb	r3, r3
   22ec0:	2b00      	cmp	r3, #0
   22ec2:	d01c      	beq.n	22efe <hif_send+0x31a>
   22ec4:	e02f      	b.n	22f26 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   22ec6:	231f      	movs	r3, #31
   22ec8:	18fc      	adds	r4, r7, r3
   22eca:	4b2a      	ldr	r3, [pc, #168]	; (22f74 <hif_send+0x390>)
   22ecc:	4798      	blx	r3
   22ece:	0003      	movs	r3, r0
   22ed0:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   22ed2:	231f      	movs	r3, #31
   22ed4:	18fb      	adds	r3, r7, r3
   22ed6:	22fd      	movs	r2, #253	; 0xfd
   22ed8:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   22eda:	e026      	b.n	22f2a <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   22edc:	2398      	movs	r3, #152	; 0x98
   22ede:	33ff      	adds	r3, #255	; 0xff
   22ee0:	001a      	movs	r2, r3
   22ee2:	4925      	ldr	r1, [pc, #148]	; (22f78 <hif_send+0x394>)
   22ee4:	4b25      	ldr	r3, [pc, #148]	; (22f7c <hif_send+0x398>)
   22ee6:	0018      	movs	r0, r3
   22ee8:	4b1a      	ldr	r3, [pc, #104]	; (22f54 <hif_send+0x370>)
   22eea:	4798      	blx	r3
   22eec:	4b24      	ldr	r3, [pc, #144]	; (22f80 <hif_send+0x39c>)
   22eee:	0018      	movs	r0, r3
   22ef0:	4b18      	ldr	r3, [pc, #96]	; (22f54 <hif_send+0x370>)
   22ef2:	4798      	blx	r3
   22ef4:	4b19      	ldr	r3, [pc, #100]	; (22f5c <hif_send+0x378>)
   22ef6:	0018      	movs	r0, r3
   22ef8:	4b16      	ldr	r3, [pc, #88]	; (22f54 <hif_send+0x370>)
   22efa:	4798      	blx	r3
		goto ERR2;
   22efc:	e015      	b.n	22f2a <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   22efe:	231f      	movs	r3, #31
   22f00:	18fc      	adds	r4, r7, r3
   22f02:	4b1c      	ldr	r3, [pc, #112]	; (22f74 <hif_send+0x390>)
   22f04:	4798      	blx	r3
   22f06:	0003      	movs	r3, r0
   22f08:	7023      	strb	r3, [r4, #0]
	return ret;
   22f0a:	231f      	movs	r3, #31
   22f0c:	18fb      	adds	r3, r7, r3
   22f0e:	781b      	ldrb	r3, [r3, #0]
   22f10:	b25b      	sxtb	r3, r3
   22f12:	e00e      	b.n	22f32 <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   22f14:	46c0      	nop			; (mov r8, r8)
   22f16:	e006      	b.n	22f26 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   22f18:	46c0      	nop			; (mov r8, r8)
   22f1a:	e004      	b.n	22f26 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   22f1c:	46c0      	nop			; (mov r8, r8)
   22f1e:	e002      	b.n	22f26 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   22f20:	46c0      	nop			; (mov r8, r8)
   22f22:	e000      	b.n	22f26 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   22f24:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   22f26:	4b17      	ldr	r3, [pc, #92]	; (22f84 <hif_send+0x3a0>)
   22f28:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   22f2a:	231f      	movs	r3, #31
   22f2c:	18fb      	adds	r3, r7, r3
   22f2e:	781b      	ldrb	r3, [r3, #0]
   22f30:	b25b      	sxtb	r3, r3
}
   22f32:	0018      	movs	r0, r3
   22f34:	46bd      	mov	sp, r7
   22f36:	b009      	add	sp, #36	; 0x24
   22f38:	bd90      	pop	{r4, r7, pc}
   22f3a:	46c0      	nop			; (mov r8, r8)
   22f3c:	00022aad 	.word	0x00022aad
   22f40:	0000108c 	.word	0x0000108c
   22f44:	00024a39 	.word	0x00024a39
   22f48:	00001078 	.word	0x00001078
   22f4c:	00024a15 	.word	0x00024a15
   22f50:	0003a8dc 	.word	0x0003a8dc
   22f54:	00020039 	.word	0x00020039
   22f58:	0003a8e8 	.word	0x0003a8e8
   22f5c:	0003a8fc 	.word	0x0003a8fc
   22f60:	00022135 	.word	0x00022135
   22f64:	00150400 	.word	0x00150400
   22f68:	000003e7 	.word	0x000003e7
   22f6c:	00024b81 	.word	0x00024b81
   22f70:	0000106c 	.word	0x0000106c
   22f74:	00022b45 	.word	0x00022b45
   22f78:	0003ac04 	.word	0x0003ac04
   22f7c:	0003a900 	.word	0x0003a900
   22f80:	0003a914 	.word	0x0003a914
   22f84:	00022b1d 	.word	0x00022b1d

00022f88 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   22f88:	b590      	push	{r4, r7, lr}
   22f8a:	b087      	sub	sp, #28
   22f8c:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   22f8e:	230f      	movs	r3, #15
   22f90:	18fb      	adds	r3, r7, r3
   22f92:	2200      	movs	r2, #0
   22f94:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   22f96:	230f      	movs	r3, #15
   22f98:	18fc      	adds	r4, r7, r3
   22f9a:	2308      	movs	r3, #8
   22f9c:	18fb      	adds	r3, r7, r3
   22f9e:	4adc      	ldr	r2, [pc, #880]	; (23310 <hif_isr+0x388>)
   22fa0:	0019      	movs	r1, r3
   22fa2:	0010      	movs	r0, r2
   22fa4:	4bdb      	ldr	r3, [pc, #876]	; (23314 <hif_isr+0x38c>)
   22fa6:	4798      	blx	r3
   22fa8:	0003      	movs	r3, r0
   22faa:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   22fac:	230f      	movs	r3, #15
   22fae:	18fb      	adds	r3, r7, r3
   22fb0:	781b      	ldrb	r3, [r3, #0]
   22fb2:	b25b      	sxtb	r3, r3
   22fb4:	2b00      	cmp	r3, #0
   22fb6:	d000      	beq.n	22fba <hif_isr+0x32>
   22fb8:	e21e      	b.n	233f8 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   22fba:	68bb      	ldr	r3, [r7, #8]
   22fbc:	2201      	movs	r2, #1
   22fbe:	4013      	ands	r3, r2
   22fc0:	d100      	bne.n	22fc4 <hif_isr+0x3c>
   22fc2:	e204      	b.n	233ce <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   22fc4:	2000      	movs	r0, #0
   22fc6:	4bd4      	ldr	r3, [pc, #848]	; (23318 <hif_isr+0x390>)
   22fc8:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   22fca:	68bb      	ldr	r3, [r7, #8]
   22fcc:	2201      	movs	r2, #1
   22fce:	4393      	bics	r3, r2
   22fd0:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   22fd2:	68bb      	ldr	r3, [r7, #8]
   22fd4:	220f      	movs	r2, #15
   22fd6:	18bc      	adds	r4, r7, r2
   22fd8:	4acd      	ldr	r2, [pc, #820]	; (23310 <hif_isr+0x388>)
   22fda:	0019      	movs	r1, r3
   22fdc:	0010      	movs	r0, r2
   22fde:	4bcf      	ldr	r3, [pc, #828]	; (2331c <hif_isr+0x394>)
   22fe0:	4798      	blx	r3
   22fe2:	0003      	movs	r3, r0
   22fe4:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   22fe6:	230f      	movs	r3, #15
   22fe8:	18fb      	adds	r3, r7, r3
   22fea:	781b      	ldrb	r3, [r3, #0]
   22fec:	b25b      	sxtb	r3, r3
   22fee:	2b00      	cmp	r3, #0
   22ff0:	d000      	beq.n	22ff4 <hif_isr+0x6c>
   22ff2:	e210      	b.n	23416 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   22ff4:	4bca      	ldr	r3, [pc, #808]	; (23320 <hif_isr+0x398>)
   22ff6:	2201      	movs	r2, #1
   22ff8:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   22ffa:	68bb      	ldr	r3, [r7, #8]
   22ffc:	089b      	lsrs	r3, r3, #2
   22ffe:	b29a      	uxth	r2, r3
   23000:	230c      	movs	r3, #12
   23002:	18fb      	adds	r3, r7, r3
   23004:	0512      	lsls	r2, r2, #20
   23006:	0d12      	lsrs	r2, r2, #20
   23008:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   2300a:	230c      	movs	r3, #12
   2300c:	18fb      	adds	r3, r7, r3
   2300e:	881b      	ldrh	r3, [r3, #0]
   23010:	2b00      	cmp	r3, #0
   23012:	d100      	bne.n	23016 <hif_isr+0x8e>
   23014:	e1c8      	b.n	233a8 <hif_isr+0x420>
				uint32 address = 0;
   23016:	2300      	movs	r3, #0
   23018:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   2301a:	230f      	movs	r3, #15
   2301c:	18fc      	adds	r4, r7, r3
   2301e:	003b      	movs	r3, r7
   23020:	4ac0      	ldr	r2, [pc, #768]	; (23324 <hif_isr+0x39c>)
   23022:	0019      	movs	r1, r3
   23024:	0010      	movs	r0, r2
   23026:	4bbb      	ldr	r3, [pc, #748]	; (23314 <hif_isr+0x38c>)
   23028:	4798      	blx	r3
   2302a:	0003      	movs	r3, r0
   2302c:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   2302e:	230f      	movs	r3, #15
   23030:	18fb      	adds	r3, r7, r3
   23032:	781b      	ldrb	r3, [r3, #0]
   23034:	b25b      	sxtb	r3, r3
   23036:	2b00      	cmp	r3, #0
   23038:	d012      	beq.n	23060 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   2303a:	23e4      	movs	r3, #228	; 0xe4
   2303c:	005a      	lsls	r2, r3, #1
   2303e:	49ba      	ldr	r1, [pc, #744]	; (23328 <hif_isr+0x3a0>)
   23040:	4bba      	ldr	r3, [pc, #744]	; (2332c <hif_isr+0x3a4>)
   23042:	0018      	movs	r0, r3
   23044:	4bba      	ldr	r3, [pc, #744]	; (23330 <hif_isr+0x3a8>)
   23046:	4798      	blx	r3
   23048:	4bba      	ldr	r3, [pc, #744]	; (23334 <hif_isr+0x3ac>)
   2304a:	0018      	movs	r0, r3
   2304c:	4bb8      	ldr	r3, [pc, #736]	; (23330 <hif_isr+0x3a8>)
   2304e:	4798      	blx	r3
   23050:	4bb9      	ldr	r3, [pc, #740]	; (23338 <hif_isr+0x3b0>)
   23052:	0018      	movs	r0, r3
   23054:	4bb6      	ldr	r3, [pc, #728]	; (23330 <hif_isr+0x3a8>)
   23056:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   23058:	2001      	movs	r0, #1
   2305a:	4baf      	ldr	r3, [pc, #700]	; (23318 <hif_isr+0x390>)
   2305c:	4798      	blx	r3
					goto ERR1;
   2305e:	e1db      	b.n	23418 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   23060:	683a      	ldr	r2, [r7, #0]
   23062:	4baf      	ldr	r3, [pc, #700]	; (23320 <hif_isr+0x398>)
   23064:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   23066:	230c      	movs	r3, #12
   23068:	18fb      	adds	r3, r7, r3
   2306a:	881a      	ldrh	r2, [r3, #0]
   2306c:	4bac      	ldr	r3, [pc, #688]	; (23320 <hif_isr+0x398>)
   2306e:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   23070:	683b      	ldr	r3, [r7, #0]
   23072:	220f      	movs	r2, #15
   23074:	18bc      	adds	r4, r7, r2
   23076:	1d39      	adds	r1, r7, #4
   23078:	2204      	movs	r2, #4
   2307a:	0018      	movs	r0, r3
   2307c:	4baf      	ldr	r3, [pc, #700]	; (2333c <hif_isr+0x3b4>)
   2307e:	4798      	blx	r3
   23080:	0003      	movs	r3, r0
   23082:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   23084:	1d3b      	adds	r3, r7, #4
   23086:	885b      	ldrh	r3, [r3, #2]
   23088:	b29a      	uxth	r2, r3
   2308a:	1d3b      	adds	r3, r7, #4
   2308c:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   2308e:	230f      	movs	r3, #15
   23090:	18fb      	adds	r3, r7, r3
   23092:	781b      	ldrb	r3, [r3, #0]
   23094:	b25b      	sxtb	r3, r3
   23096:	2b00      	cmp	r3, #0
   23098:	d012      	beq.n	230c0 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   2309a:	23e9      	movs	r3, #233	; 0xe9
   2309c:	005a      	lsls	r2, r3, #1
   2309e:	49a2      	ldr	r1, [pc, #648]	; (23328 <hif_isr+0x3a0>)
   230a0:	4ba2      	ldr	r3, [pc, #648]	; (2332c <hif_isr+0x3a4>)
   230a2:	0018      	movs	r0, r3
   230a4:	4ba2      	ldr	r3, [pc, #648]	; (23330 <hif_isr+0x3a8>)
   230a6:	4798      	blx	r3
   230a8:	4ba5      	ldr	r3, [pc, #660]	; (23340 <hif_isr+0x3b8>)
   230aa:	0018      	movs	r0, r3
   230ac:	4ba0      	ldr	r3, [pc, #640]	; (23330 <hif_isr+0x3a8>)
   230ae:	4798      	blx	r3
   230b0:	4ba1      	ldr	r3, [pc, #644]	; (23338 <hif_isr+0x3b0>)
   230b2:	0018      	movs	r0, r3
   230b4:	4b9e      	ldr	r3, [pc, #632]	; (23330 <hif_isr+0x3a8>)
   230b6:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   230b8:	2001      	movs	r0, #1
   230ba:	4b97      	ldr	r3, [pc, #604]	; (23318 <hif_isr+0x390>)
   230bc:	4798      	blx	r3
					goto ERR1;
   230be:	e1ab      	b.n	23418 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   230c0:	1d3b      	adds	r3, r7, #4
   230c2:	885b      	ldrh	r3, [r3, #2]
   230c4:	b29b      	uxth	r3, r3
   230c6:	220c      	movs	r2, #12
   230c8:	18ba      	adds	r2, r7, r2
   230ca:	8812      	ldrh	r2, [r2, #0]
   230cc:	429a      	cmp	r2, r3
   230ce:	d02f      	beq.n	23130 <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   230d0:	230c      	movs	r3, #12
   230d2:	18fb      	adds	r3, r7, r3
   230d4:	881b      	ldrh	r3, [r3, #0]
   230d6:	1d3a      	adds	r2, r7, #4
   230d8:	8852      	ldrh	r2, [r2, #2]
   230da:	b292      	uxth	r2, r2
   230dc:	1a9b      	subs	r3, r3, r2
   230de:	2b04      	cmp	r3, #4
   230e0:	dd26      	ble.n	23130 <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   230e2:	23dc      	movs	r3, #220	; 0xdc
   230e4:	33ff      	adds	r3, #255	; 0xff
   230e6:	001a      	movs	r2, r3
   230e8:	498f      	ldr	r1, [pc, #572]	; (23328 <hif_isr+0x3a0>)
   230ea:	4b90      	ldr	r3, [pc, #576]	; (2332c <hif_isr+0x3a4>)
   230ec:	0018      	movs	r0, r3
   230ee:	4b90      	ldr	r3, [pc, #576]	; (23330 <hif_isr+0x3a8>)
   230f0:	4798      	blx	r3
   230f2:	230c      	movs	r3, #12
   230f4:	18fb      	adds	r3, r7, r3
   230f6:	8819      	ldrh	r1, [r3, #0]
   230f8:	1d3b      	adds	r3, r7, #4
   230fa:	885b      	ldrh	r3, [r3, #2]
   230fc:	b29b      	uxth	r3, r3
   230fe:	001a      	movs	r2, r3
   23100:	1d3b      	adds	r3, r7, #4
   23102:	781b      	ldrb	r3, [r3, #0]
   23104:	b2db      	uxtb	r3, r3
   23106:	001c      	movs	r4, r3
   23108:	1d3b      	adds	r3, r7, #4
   2310a:	785b      	ldrb	r3, [r3, #1]
   2310c:	b2db      	uxtb	r3, r3
   2310e:	488d      	ldr	r0, [pc, #564]	; (23344 <hif_isr+0x3bc>)
   23110:	9300      	str	r3, [sp, #0]
   23112:	0023      	movs	r3, r4
   23114:	4c86      	ldr	r4, [pc, #536]	; (23330 <hif_isr+0x3a8>)
   23116:	47a0      	blx	r4
   23118:	4b87      	ldr	r3, [pc, #540]	; (23338 <hif_isr+0x3b0>)
   2311a:	0018      	movs	r0, r3
   2311c:	4b84      	ldr	r3, [pc, #528]	; (23330 <hif_isr+0x3a8>)
   2311e:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   23120:	2001      	movs	r0, #1
   23122:	4b7d      	ldr	r3, [pc, #500]	; (23318 <hif_isr+0x390>)
   23124:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   23126:	230f      	movs	r3, #15
   23128:	18fb      	adds	r3, r7, r3
   2312a:	22fa      	movs	r2, #250	; 0xfa
   2312c:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   2312e:	e173      	b.n	23418 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   23130:	1d3b      	adds	r3, r7, #4
   23132:	781b      	ldrb	r3, [r3, #0]
   23134:	b2db      	uxtb	r3, r3
   23136:	2b01      	cmp	r3, #1
   23138:	d122      	bne.n	23180 <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   2313a:	4b79      	ldr	r3, [pc, #484]	; (23320 <hif_isr+0x398>)
   2313c:	691b      	ldr	r3, [r3, #16]
   2313e:	2b00      	cmp	r3, #0
   23140:	d00d      	beq.n	2315e <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   23142:	4b77      	ldr	r3, [pc, #476]	; (23320 <hif_isr+0x398>)
   23144:	691b      	ldr	r3, [r3, #16]
   23146:	1d3a      	adds	r2, r7, #4
   23148:	7852      	ldrb	r2, [r2, #1]
   2314a:	b2d0      	uxtb	r0, r2
   2314c:	1d3a      	adds	r2, r7, #4
   2314e:	8852      	ldrh	r2, [r2, #2]
   23150:	b292      	uxth	r2, r2
   23152:	3a08      	subs	r2, #8
   23154:	b291      	uxth	r1, r2
   23156:	683a      	ldr	r2, [r7, #0]
   23158:	3208      	adds	r2, #8
   2315a:	4798      	blx	r3
   2315c:	e102      	b.n	23364 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   2315e:	23e8      	movs	r3, #232	; 0xe8
   23160:	33ff      	adds	r3, #255	; 0xff
   23162:	001a      	movs	r2, r3
   23164:	4970      	ldr	r1, [pc, #448]	; (23328 <hif_isr+0x3a0>)
   23166:	4b71      	ldr	r3, [pc, #452]	; (2332c <hif_isr+0x3a4>)
   23168:	0018      	movs	r0, r3
   2316a:	4b71      	ldr	r3, [pc, #452]	; (23330 <hif_isr+0x3a8>)
   2316c:	4798      	blx	r3
   2316e:	4b76      	ldr	r3, [pc, #472]	; (23348 <hif_isr+0x3c0>)
   23170:	0018      	movs	r0, r3
   23172:	4b6f      	ldr	r3, [pc, #444]	; (23330 <hif_isr+0x3a8>)
   23174:	4798      	blx	r3
   23176:	4b70      	ldr	r3, [pc, #448]	; (23338 <hif_isr+0x3b0>)
   23178:	0018      	movs	r0, r3
   2317a:	4b6d      	ldr	r3, [pc, #436]	; (23330 <hif_isr+0x3a8>)
   2317c:	4798      	blx	r3
   2317e:	e0f1      	b.n	23364 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   23180:	1d3b      	adds	r3, r7, #4
   23182:	781b      	ldrb	r3, [r3, #0]
   23184:	b2db      	uxtb	r3, r3
   23186:	2b02      	cmp	r3, #2
   23188:	d122      	bne.n	231d0 <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   2318a:	4b65      	ldr	r3, [pc, #404]	; (23320 <hif_isr+0x398>)
   2318c:	695b      	ldr	r3, [r3, #20]
   2318e:	2b00      	cmp	r3, #0
   23190:	d00d      	beq.n	231ae <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   23192:	4b63      	ldr	r3, [pc, #396]	; (23320 <hif_isr+0x398>)
   23194:	695b      	ldr	r3, [r3, #20]
   23196:	1d3a      	adds	r2, r7, #4
   23198:	7852      	ldrb	r2, [r2, #1]
   2319a:	b2d0      	uxtb	r0, r2
   2319c:	1d3a      	adds	r2, r7, #4
   2319e:	8852      	ldrh	r2, [r2, #2]
   231a0:	b292      	uxth	r2, r2
   231a2:	3a08      	subs	r2, #8
   231a4:	b291      	uxth	r1, r2
   231a6:	683a      	ldr	r2, [r7, #0]
   231a8:	3208      	adds	r2, #8
   231aa:	4798      	blx	r3
   231ac:	e0da      	b.n	23364 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   231ae:	23f0      	movs	r3, #240	; 0xf0
   231b0:	33ff      	adds	r3, #255	; 0xff
   231b2:	001a      	movs	r2, r3
   231b4:	495c      	ldr	r1, [pc, #368]	; (23328 <hif_isr+0x3a0>)
   231b6:	4b5d      	ldr	r3, [pc, #372]	; (2332c <hif_isr+0x3a4>)
   231b8:	0018      	movs	r0, r3
   231ba:	4b5d      	ldr	r3, [pc, #372]	; (23330 <hif_isr+0x3a8>)
   231bc:	4798      	blx	r3
   231be:	4b63      	ldr	r3, [pc, #396]	; (2334c <hif_isr+0x3c4>)
   231c0:	0018      	movs	r0, r3
   231c2:	4b5b      	ldr	r3, [pc, #364]	; (23330 <hif_isr+0x3a8>)
   231c4:	4798      	blx	r3
   231c6:	4b5c      	ldr	r3, [pc, #368]	; (23338 <hif_isr+0x3b0>)
   231c8:	0018      	movs	r0, r3
   231ca:	4b59      	ldr	r3, [pc, #356]	; (23330 <hif_isr+0x3a8>)
   231cc:	4798      	blx	r3
   231ce:	e0c9      	b.n	23364 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   231d0:	1d3b      	adds	r3, r7, #4
   231d2:	781b      	ldrb	r3, [r3, #0]
   231d4:	b2db      	uxtb	r3, r3
   231d6:	2b04      	cmp	r3, #4
   231d8:	d122      	bne.n	23220 <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   231da:	4b51      	ldr	r3, [pc, #324]	; (23320 <hif_isr+0x398>)
   231dc:	699b      	ldr	r3, [r3, #24]
   231de:	2b00      	cmp	r3, #0
   231e0:	d00d      	beq.n	231fe <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   231e2:	4b4f      	ldr	r3, [pc, #316]	; (23320 <hif_isr+0x398>)
   231e4:	699b      	ldr	r3, [r3, #24]
   231e6:	1d3a      	adds	r2, r7, #4
   231e8:	7852      	ldrb	r2, [r2, #1]
   231ea:	b2d0      	uxtb	r0, r2
   231ec:	1d3a      	adds	r2, r7, #4
   231ee:	8852      	ldrh	r2, [r2, #2]
   231f0:	b292      	uxth	r2, r2
   231f2:	3a08      	subs	r2, #8
   231f4:	b291      	uxth	r1, r2
   231f6:	683a      	ldr	r2, [r7, #0]
   231f8:	3208      	adds	r2, #8
   231fa:	4798      	blx	r3
   231fc:	e0b2      	b.n	23364 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   231fe:	23f8      	movs	r3, #248	; 0xf8
   23200:	33ff      	adds	r3, #255	; 0xff
   23202:	001a      	movs	r2, r3
   23204:	4948      	ldr	r1, [pc, #288]	; (23328 <hif_isr+0x3a0>)
   23206:	4b49      	ldr	r3, [pc, #292]	; (2332c <hif_isr+0x3a4>)
   23208:	0018      	movs	r0, r3
   2320a:	4b49      	ldr	r3, [pc, #292]	; (23330 <hif_isr+0x3a8>)
   2320c:	4798      	blx	r3
   2320e:	4b50      	ldr	r3, [pc, #320]	; (23350 <hif_isr+0x3c8>)
   23210:	0018      	movs	r0, r3
   23212:	4b47      	ldr	r3, [pc, #284]	; (23330 <hif_isr+0x3a8>)
   23214:	4798      	blx	r3
   23216:	4b48      	ldr	r3, [pc, #288]	; (23338 <hif_isr+0x3b0>)
   23218:	0018      	movs	r0, r3
   2321a:	4b45      	ldr	r3, [pc, #276]	; (23330 <hif_isr+0x3a8>)
   2321c:	4798      	blx	r3
   2321e:	e0a1      	b.n	23364 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   23220:	1d3b      	adds	r3, r7, #4
   23222:	781b      	ldrb	r3, [r3, #0]
   23224:	b2db      	uxtb	r3, r3
   23226:	2b06      	cmp	r3, #6
   23228:	d121      	bne.n	2326e <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   2322a:	4b3d      	ldr	r3, [pc, #244]	; (23320 <hif_isr+0x398>)
   2322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2322e:	2b00      	cmp	r3, #0
   23230:	d00d      	beq.n	2324e <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   23232:	4b3b      	ldr	r3, [pc, #236]	; (23320 <hif_isr+0x398>)
   23234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   23236:	1d3a      	adds	r2, r7, #4
   23238:	7852      	ldrb	r2, [r2, #1]
   2323a:	b2d0      	uxtb	r0, r2
   2323c:	1d3a      	adds	r2, r7, #4
   2323e:	8852      	ldrh	r2, [r2, #2]
   23240:	b292      	uxth	r2, r2
   23242:	3a08      	subs	r2, #8
   23244:	b291      	uxth	r1, r2
   23246:	683a      	ldr	r2, [r7, #0]
   23248:	3208      	adds	r2, #8
   2324a:	4798      	blx	r3
   2324c:	e08a      	b.n	23364 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   2324e:	2380      	movs	r3, #128	; 0x80
   23250:	009a      	lsls	r2, r3, #2
   23252:	4935      	ldr	r1, [pc, #212]	; (23328 <hif_isr+0x3a0>)
   23254:	4b35      	ldr	r3, [pc, #212]	; (2332c <hif_isr+0x3a4>)
   23256:	0018      	movs	r0, r3
   23258:	4b35      	ldr	r3, [pc, #212]	; (23330 <hif_isr+0x3a8>)
   2325a:	4798      	blx	r3
   2325c:	4b3d      	ldr	r3, [pc, #244]	; (23354 <hif_isr+0x3cc>)
   2325e:	0018      	movs	r0, r3
   23260:	4b33      	ldr	r3, [pc, #204]	; (23330 <hif_isr+0x3a8>)
   23262:	4798      	blx	r3
   23264:	4b34      	ldr	r3, [pc, #208]	; (23338 <hif_isr+0x3b0>)
   23266:	0018      	movs	r0, r3
   23268:	4b31      	ldr	r3, [pc, #196]	; (23330 <hif_isr+0x3a8>)
   2326a:	4798      	blx	r3
   2326c:	e07a      	b.n	23364 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   2326e:	1d3b      	adds	r3, r7, #4
   23270:	781b      	ldrb	r3, [r3, #0]
   23272:	b2db      	uxtb	r3, r3
   23274:	2b07      	cmp	r3, #7
   23276:	d120      	bne.n	232ba <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   23278:	4b29      	ldr	r3, [pc, #164]	; (23320 <hif_isr+0x398>)
   2327a:	69db      	ldr	r3, [r3, #28]
   2327c:	2b00      	cmp	r3, #0
   2327e:	d00d      	beq.n	2329c <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   23280:	4b27      	ldr	r3, [pc, #156]	; (23320 <hif_isr+0x398>)
   23282:	69db      	ldr	r3, [r3, #28]
   23284:	1d3a      	adds	r2, r7, #4
   23286:	7852      	ldrb	r2, [r2, #1]
   23288:	b2d0      	uxtb	r0, r2
   2328a:	1d3a      	adds	r2, r7, #4
   2328c:	8852      	ldrh	r2, [r2, #2]
   2328e:	b292      	uxth	r2, r2
   23290:	3a08      	subs	r2, #8
   23292:	b291      	uxth	r1, r2
   23294:	683a      	ldr	r2, [r7, #0]
   23296:	3208      	adds	r2, #8
   23298:	4798      	blx	r3
   2329a:	e063      	b.n	23364 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   2329c:	4a2e      	ldr	r2, [pc, #184]	; (23358 <hif_isr+0x3d0>)
   2329e:	4922      	ldr	r1, [pc, #136]	; (23328 <hif_isr+0x3a0>)
   232a0:	4b22      	ldr	r3, [pc, #136]	; (2332c <hif_isr+0x3a4>)
   232a2:	0018      	movs	r0, r3
   232a4:	4b22      	ldr	r3, [pc, #136]	; (23330 <hif_isr+0x3a8>)
   232a6:	4798      	blx	r3
   232a8:	4b2c      	ldr	r3, [pc, #176]	; (2335c <hif_isr+0x3d4>)
   232aa:	0018      	movs	r0, r3
   232ac:	4b20      	ldr	r3, [pc, #128]	; (23330 <hif_isr+0x3a8>)
   232ae:	4798      	blx	r3
   232b0:	4b21      	ldr	r3, [pc, #132]	; (23338 <hif_isr+0x3b0>)
   232b2:	0018      	movs	r0, r3
   232b4:	4b1e      	ldr	r3, [pc, #120]	; (23330 <hif_isr+0x3a8>)
   232b6:	4798      	blx	r3
   232b8:	e054      	b.n	23364 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   232ba:	1d3b      	adds	r3, r7, #4
   232bc:	781b      	ldrb	r3, [r3, #0]
   232be:	b2db      	uxtb	r3, r3
   232c0:	2b05      	cmp	r3, #5
   232c2:	d111      	bne.n	232e8 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   232c4:	4b16      	ldr	r3, [pc, #88]	; (23320 <hif_isr+0x398>)
   232c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   232c8:	2b00      	cmp	r3, #0
   232ca:	d04b      	beq.n	23364 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   232cc:	4b14      	ldr	r3, [pc, #80]	; (23320 <hif_isr+0x398>)
   232ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   232d0:	1d3a      	adds	r2, r7, #4
   232d2:	7852      	ldrb	r2, [r2, #1]
   232d4:	b2d0      	uxtb	r0, r2
   232d6:	1d3a      	adds	r2, r7, #4
   232d8:	8852      	ldrh	r2, [r2, #2]
   232da:	b292      	uxth	r2, r2
   232dc:	3a08      	subs	r2, #8
   232de:	b291      	uxth	r1, r2
   232e0:	683a      	ldr	r2, [r7, #0]
   232e2:	3208      	adds	r2, #8
   232e4:	4798      	blx	r3
   232e6:	e03d      	b.n	23364 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   232e8:	2384      	movs	r3, #132	; 0x84
   232ea:	009a      	lsls	r2, r3, #2
   232ec:	490e      	ldr	r1, [pc, #56]	; (23328 <hif_isr+0x3a0>)
   232ee:	4b0f      	ldr	r3, [pc, #60]	; (2332c <hif_isr+0x3a4>)
   232f0:	0018      	movs	r0, r3
   232f2:	4b0f      	ldr	r3, [pc, #60]	; (23330 <hif_isr+0x3a8>)
   232f4:	4798      	blx	r3
   232f6:	4b1a      	ldr	r3, [pc, #104]	; (23360 <hif_isr+0x3d8>)
   232f8:	0018      	movs	r0, r3
   232fa:	4b0d      	ldr	r3, [pc, #52]	; (23330 <hif_isr+0x3a8>)
   232fc:	4798      	blx	r3
   232fe:	4b0e      	ldr	r3, [pc, #56]	; (23338 <hif_isr+0x3b0>)
   23300:	0018      	movs	r0, r3
   23302:	4b0b      	ldr	r3, [pc, #44]	; (23330 <hif_isr+0x3a8>)
   23304:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   23306:	230f      	movs	r3, #15
   23308:	18fb      	adds	r3, r7, r3
   2330a:	22fa      	movs	r2, #250	; 0xfa
   2330c:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   2330e:	e083      	b.n	23418 <hif_isr+0x490>
   23310:	00001070 	.word	0x00001070
   23314:	00024a15 	.word	0x00024a15
   23318:	000221c9 	.word	0x000221c9
   2331c:	00024a39 	.word	0x00024a39
   23320:	20005700 	.word	0x20005700
   23324:	00001084 	.word	0x00001084
   23328:	0003ac10 	.word	0x0003ac10
   2332c:	0003a900 	.word	0x0003a900
   23330:	00020039 	.word	0x00020039
   23334:	0003a934 	.word	0x0003a934
   23338:	0003a8fc 	.word	0x0003a8fc
   2333c:	00024a89 	.word	0x00024a89
   23340:	0003a95c 	.word	0x0003a95c
   23344:	0003a974 	.word	0x0003a974
   23348:	0003a9b4 	.word	0x0003a9b4
   2334c:	0003a9d8 	.word	0x0003a9d8
   23350:	0003a9fc 	.word	0x0003a9fc
   23354:	0003aa1c 	.word	0x0003aa1c
   23358:	00000207 	.word	0x00000207
   2335c:	0003aa40 	.word	0x0003aa40
   23360:	0003aa64 	.word	0x0003aa64
				}
				if(gstrHifCxt.u8HifRXDone)
   23364:	4b30      	ldr	r3, [pc, #192]	; (23428 <hif_isr+0x4a0>)
   23366:	789b      	ldrb	r3, [r3, #2]
   23368:	b2db      	uxtb	r3, r3
   2336a:	2b00      	cmp	r3, #0
   2336c:	d054      	beq.n	23418 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   2336e:	4a2f      	ldr	r2, [pc, #188]	; (2342c <hif_isr+0x4a4>)
   23370:	492f      	ldr	r1, [pc, #188]	; (23430 <hif_isr+0x4a8>)
   23372:	4b30      	ldr	r3, [pc, #192]	; (23434 <hif_isr+0x4ac>)
   23374:	0018      	movs	r0, r3
   23376:	4b30      	ldr	r3, [pc, #192]	; (23438 <hif_isr+0x4b0>)
   23378:	4798      	blx	r3
   2337a:	1d3b      	adds	r3, r7, #4
   2337c:	781b      	ldrb	r3, [r3, #0]
   2337e:	b2db      	uxtb	r3, r3
   23380:	0019      	movs	r1, r3
   23382:	1d3b      	adds	r3, r7, #4
   23384:	785b      	ldrb	r3, [r3, #1]
   23386:	b2db      	uxtb	r3, r3
   23388:	001a      	movs	r2, r3
   2338a:	4b2c      	ldr	r3, [pc, #176]	; (2343c <hif_isr+0x4b4>)
   2338c:	0018      	movs	r0, r3
   2338e:	4b2a      	ldr	r3, [pc, #168]	; (23438 <hif_isr+0x4b0>)
   23390:	4798      	blx	r3
   23392:	4b2b      	ldr	r3, [pc, #172]	; (23440 <hif_isr+0x4b8>)
   23394:	0018      	movs	r0, r3
   23396:	4b28      	ldr	r3, [pc, #160]	; (23438 <hif_isr+0x4b0>)
   23398:	4798      	blx	r3
					ret = hif_set_rx_done();
   2339a:	230f      	movs	r3, #15
   2339c:	18fc      	adds	r4, r7, r3
   2339e:	4b29      	ldr	r3, [pc, #164]	; (23444 <hif_isr+0x4bc>)
   233a0:	4798      	blx	r3
   233a2:	0003      	movs	r3, r0
   233a4:	7023      	strb	r3, [r4, #0]
   233a6:	e037      	b.n	23418 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   233a8:	4a27      	ldr	r2, [pc, #156]	; (23448 <hif_isr+0x4c0>)
   233aa:	4921      	ldr	r1, [pc, #132]	; (23430 <hif_isr+0x4a8>)
   233ac:	4b21      	ldr	r3, [pc, #132]	; (23434 <hif_isr+0x4ac>)
   233ae:	0018      	movs	r0, r3
   233b0:	4b21      	ldr	r3, [pc, #132]	; (23438 <hif_isr+0x4b0>)
   233b2:	4798      	blx	r3
   233b4:	4b25      	ldr	r3, [pc, #148]	; (2344c <hif_isr+0x4c4>)
   233b6:	0018      	movs	r0, r3
   233b8:	4b1f      	ldr	r3, [pc, #124]	; (23438 <hif_isr+0x4b0>)
   233ba:	4798      	blx	r3
   233bc:	4b20      	ldr	r3, [pc, #128]	; (23440 <hif_isr+0x4b8>)
   233be:	0018      	movs	r0, r3
   233c0:	4b1d      	ldr	r3, [pc, #116]	; (23438 <hif_isr+0x4b0>)
   233c2:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   233c4:	230f      	movs	r3, #15
   233c6:	18fb      	adds	r3, r7, r3
   233c8:	22fe      	movs	r2, #254	; 0xfe
   233ca:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   233cc:	e024      	b.n	23418 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   233ce:	4a20      	ldr	r2, [pc, #128]	; (23450 <hif_isr+0x4c8>)
   233d0:	4917      	ldr	r1, [pc, #92]	; (23430 <hif_isr+0x4a8>)
   233d2:	4b18      	ldr	r3, [pc, #96]	; (23434 <hif_isr+0x4ac>)
   233d4:	0018      	movs	r0, r3
   233d6:	4b18      	ldr	r3, [pc, #96]	; (23438 <hif_isr+0x4b0>)
   233d8:	4798      	blx	r3
   233da:	68ba      	ldr	r2, [r7, #8]
   233dc:	4b1d      	ldr	r3, [pc, #116]	; (23454 <hif_isr+0x4cc>)
   233de:	0011      	movs	r1, r2
   233e0:	0018      	movs	r0, r3
   233e2:	4b15      	ldr	r3, [pc, #84]	; (23438 <hif_isr+0x4b0>)
   233e4:	4798      	blx	r3
   233e6:	4b16      	ldr	r3, [pc, #88]	; (23440 <hif_isr+0x4b8>)
   233e8:	0018      	movs	r0, r3
   233ea:	4b13      	ldr	r3, [pc, #76]	; (23438 <hif_isr+0x4b0>)
   233ec:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   233ee:	230f      	movs	r3, #15
   233f0:	18fb      	adds	r3, r7, r3
   233f2:	22f4      	movs	r2, #244	; 0xf4
   233f4:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   233f6:	e00f      	b.n	23418 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   233f8:	4a17      	ldr	r2, [pc, #92]	; (23458 <hif_isr+0x4d0>)
   233fa:	490d      	ldr	r1, [pc, #52]	; (23430 <hif_isr+0x4a8>)
   233fc:	4b0d      	ldr	r3, [pc, #52]	; (23434 <hif_isr+0x4ac>)
   233fe:	0018      	movs	r0, r3
   23400:	4b0d      	ldr	r3, [pc, #52]	; (23438 <hif_isr+0x4b0>)
   23402:	4798      	blx	r3
   23404:	4b15      	ldr	r3, [pc, #84]	; (2345c <hif_isr+0x4d4>)
   23406:	0018      	movs	r0, r3
   23408:	4b0b      	ldr	r3, [pc, #44]	; (23438 <hif_isr+0x4b0>)
   2340a:	4798      	blx	r3
   2340c:	4b0c      	ldr	r3, [pc, #48]	; (23440 <hif_isr+0x4b8>)
   2340e:	0018      	movs	r0, r3
   23410:	4b09      	ldr	r3, [pc, #36]	; (23438 <hif_isr+0x4b0>)
   23412:	4798      	blx	r3
		goto ERR1;
   23414:	e000      	b.n	23418 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   23416:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   23418:	230f      	movs	r3, #15
   2341a:	18fb      	adds	r3, r7, r3
   2341c:	781b      	ldrb	r3, [r3, #0]
   2341e:	b25b      	sxtb	r3, r3
}
   23420:	0018      	movs	r0, r3
   23422:	46bd      	mov	sp, r7
   23424:	b005      	add	sp, #20
   23426:	bd90      	pop	{r4, r7, pc}
   23428:	20005700 	.word	0x20005700
   2342c:	00000216 	.word	0x00000216
   23430:	0003ac10 	.word	0x0003ac10
   23434:	0003a900 	.word	0x0003a900
   23438:	00020039 	.word	0x00020039
   2343c:	0003aa7c 	.word	0x0003aa7c
   23440:	0003a8fc 	.word	0x0003a8fc
   23444:	00022a1d 	.word	0x00022a1d
   23448:	0000021d 	.word	0x0000021d
   2344c:	0003aaa8 	.word	0x0003aaa8
   23450:	00000225 	.word	0x00000225
   23454:	0003aabc 	.word	0x0003aabc
   23458:	0000022e 	.word	0x0000022e
   2345c:	0003aad8 	.word	0x0003aad8

00023460 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   23460:	b590      	push	{r4, r7, lr}
   23462:	b083      	sub	sp, #12
   23464:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   23466:	1dfb      	adds	r3, r7, #7
   23468:	2200      	movs	r2, #0
   2346a:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   2346c:	4b1c      	ldr	r3, [pc, #112]	; (234e0 <hif_handle_isr+0x80>)
   2346e:	2200      	movs	r2, #0
   23470:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   23472:	e024      	b.n	234be <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   23474:	4b1a      	ldr	r3, [pc, #104]	; (234e0 <hif_handle_isr+0x80>)
   23476:	78db      	ldrb	r3, [r3, #3]
   23478:	b2db      	uxtb	r3, r3
   2347a:	3b01      	subs	r3, #1
   2347c:	b2da      	uxtb	r2, r3
   2347e:	4b18      	ldr	r3, [pc, #96]	; (234e0 <hif_handle_isr+0x80>)
   23480:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   23482:	1dfc      	adds	r4, r7, #7
   23484:	4b17      	ldr	r3, [pc, #92]	; (234e4 <hif_handle_isr+0x84>)
   23486:	4798      	blx	r3
   23488:	0003      	movs	r3, r0
   2348a:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   2348c:	1dfb      	adds	r3, r7, #7
   2348e:	781b      	ldrb	r3, [r3, #0]
   23490:	b25b      	sxtb	r3, r3
   23492:	2b00      	cmp	r3, #0
   23494:	d100      	bne.n	23498 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   23496:	e012      	b.n	234be <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   23498:	4a13      	ldr	r2, [pc, #76]	; (234e8 <hif_handle_isr+0x88>)
   2349a:	4914      	ldr	r1, [pc, #80]	; (234ec <hif_handle_isr+0x8c>)
   2349c:	4b14      	ldr	r3, [pc, #80]	; (234f0 <hif_handle_isr+0x90>)
   2349e:	0018      	movs	r0, r3
   234a0:	4b14      	ldr	r3, [pc, #80]	; (234f4 <hif_handle_isr+0x94>)
   234a2:	4798      	blx	r3
   234a4:	1dfb      	adds	r3, r7, #7
   234a6:	2200      	movs	r2, #0
   234a8:	569a      	ldrsb	r2, [r3, r2]
   234aa:	4b13      	ldr	r3, [pc, #76]	; (234f8 <hif_handle_isr+0x98>)
   234ac:	0011      	movs	r1, r2
   234ae:	0018      	movs	r0, r3
   234b0:	4b10      	ldr	r3, [pc, #64]	; (234f4 <hif_handle_isr+0x94>)
   234b2:	4798      	blx	r3
   234b4:	4b11      	ldr	r3, [pc, #68]	; (234fc <hif_handle_isr+0x9c>)
   234b6:	0018      	movs	r0, r3
   234b8:	4b0e      	ldr	r3, [pc, #56]	; (234f4 <hif_handle_isr+0x94>)
   234ba:	4798      	blx	r3
			ret = hif_isr();
   234bc:	e7e1      	b.n	23482 <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   234be:	4b08      	ldr	r3, [pc, #32]	; (234e0 <hif_handle_isr+0x80>)
   234c0:	78db      	ldrb	r3, [r3, #3]
   234c2:	b2db      	uxtb	r3, r3
   234c4:	2b00      	cmp	r3, #0
   234c6:	d004      	beq.n	234d2 <hif_handle_isr+0x72>
   234c8:	4b05      	ldr	r3, [pc, #20]	; (234e0 <hif_handle_isr+0x80>)
   234ca:	791b      	ldrb	r3, [r3, #4]
   234cc:	b2db      	uxtb	r3, r3
   234ce:	2b00      	cmp	r3, #0
   234d0:	d0d0      	beq.n	23474 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   234d2:	1dfb      	adds	r3, r7, #7
   234d4:	781b      	ldrb	r3, [r3, #0]
   234d6:	b25b      	sxtb	r3, r3
}
   234d8:	0018      	movs	r0, r3
   234da:	46bd      	mov	sp, r7
   234dc:	b003      	add	sp, #12
   234de:	bd90      	pop	{r4, r7, pc}
   234e0:	20005700 	.word	0x20005700
   234e4:	00022f89 	.word	0x00022f89
   234e8:	00000257 	.word	0x00000257
   234ec:	0003ac18 	.word	0x0003ac18
   234f0:	0003a900 	.word	0x0003a900
   234f4:	00020039 	.word	0x00020039
   234f8:	0003aafc 	.word	0x0003aafc
   234fc:	0003a8fc 	.word	0x0003a8fc

00023500 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   23500:	b590      	push	{r4, r7, lr}
   23502:	b087      	sub	sp, #28
   23504:	af00      	add	r7, sp, #0
   23506:	60f8      	str	r0, [r7, #12]
   23508:	60b9      	str	r1, [r7, #8]
   2350a:	0019      	movs	r1, r3
   2350c:	1dbb      	adds	r3, r7, #6
   2350e:	801a      	strh	r2, [r3, #0]
   23510:	1d7b      	adds	r3, r7, #5
   23512:	1c0a      	adds	r2, r1, #0
   23514:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   23516:	2317      	movs	r3, #23
   23518:	18fb      	adds	r3, r7, r3
   2351a:	2200      	movs	r2, #0
   2351c:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   2351e:	68fb      	ldr	r3, [r7, #12]
   23520:	2b00      	cmp	r3, #0
   23522:	d006      	beq.n	23532 <hif_receive+0x32>
   23524:	68bb      	ldr	r3, [r7, #8]
   23526:	2b00      	cmp	r3, #0
   23528:	d003      	beq.n	23532 <hif_receive+0x32>
   2352a:	1dbb      	adds	r3, r7, #6
   2352c:	881b      	ldrh	r3, [r3, #0]
   2352e:	2b00      	cmp	r3, #0
   23530:	d11e      	bne.n	23570 <hif_receive+0x70>
	{
		if(isDone)
   23532:	1d7b      	adds	r3, r7, #5
   23534:	781b      	ldrb	r3, [r3, #0]
   23536:	2b00      	cmp	r3, #0
   23538:	d006      	beq.n	23548 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   2353a:	2317      	movs	r3, #23
   2353c:	18fc      	adds	r4, r7, r3
   2353e:	4b45      	ldr	r3, [pc, #276]	; (23654 <hif_receive+0x154>)
   23540:	4798      	blx	r3
   23542:	0003      	movs	r3, r0
   23544:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   23546:	e07c      	b.n	23642 <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   23548:	2317      	movs	r3, #23
   2354a:	18fb      	adds	r3, r7, r3
   2354c:	22f4      	movs	r2, #244	; 0xf4
   2354e:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   23550:	239e      	movs	r3, #158	; 0x9e
   23552:	009a      	lsls	r2, r3, #2
   23554:	4940      	ldr	r1, [pc, #256]	; (23658 <hif_receive+0x158>)
   23556:	4b41      	ldr	r3, [pc, #260]	; (2365c <hif_receive+0x15c>)
   23558:	0018      	movs	r0, r3
   2355a:	4b41      	ldr	r3, [pc, #260]	; (23660 <hif_receive+0x160>)
   2355c:	4798      	blx	r3
   2355e:	4b41      	ldr	r3, [pc, #260]	; (23664 <hif_receive+0x164>)
   23560:	0018      	movs	r0, r3
   23562:	4b3f      	ldr	r3, [pc, #252]	; (23660 <hif_receive+0x160>)
   23564:	4798      	blx	r3
   23566:	4b40      	ldr	r3, [pc, #256]	; (23668 <hif_receive+0x168>)
   23568:	0018      	movs	r0, r3
   2356a:	4b3d      	ldr	r3, [pc, #244]	; (23660 <hif_receive+0x160>)
   2356c:	4798      	blx	r3
		goto ERR1;
   2356e:	e068      	b.n	23642 <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   23570:	1dbb      	adds	r3, r7, #6
   23572:	881a      	ldrh	r2, [r3, #0]
   23574:	4b3d      	ldr	r3, [pc, #244]	; (2366c <hif_receive+0x16c>)
   23576:	68db      	ldr	r3, [r3, #12]
   23578:	429a      	cmp	r2, r3
   2357a:	d917      	bls.n	235ac <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   2357c:	2317      	movs	r3, #23
   2357e:	18fb      	adds	r3, r7, r3
   23580:	22f4      	movs	r2, #244	; 0xf4
   23582:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   23584:	23a0      	movs	r3, #160	; 0xa0
   23586:	009a      	lsls	r2, r3, #2
   23588:	4933      	ldr	r1, [pc, #204]	; (23658 <hif_receive+0x158>)
   2358a:	4b34      	ldr	r3, [pc, #208]	; (2365c <hif_receive+0x15c>)
   2358c:	0018      	movs	r0, r3
   2358e:	4b34      	ldr	r3, [pc, #208]	; (23660 <hif_receive+0x160>)
   23590:	4798      	blx	r3
   23592:	1dbb      	adds	r3, r7, #6
   23594:	8819      	ldrh	r1, [r3, #0]
   23596:	4b35      	ldr	r3, [pc, #212]	; (2366c <hif_receive+0x16c>)
   23598:	68da      	ldr	r2, [r3, #12]
   2359a:	4b35      	ldr	r3, [pc, #212]	; (23670 <hif_receive+0x170>)
   2359c:	0018      	movs	r0, r3
   2359e:	4b30      	ldr	r3, [pc, #192]	; (23660 <hif_receive+0x160>)
   235a0:	4798      	blx	r3
   235a2:	4b31      	ldr	r3, [pc, #196]	; (23668 <hif_receive+0x168>)
   235a4:	0018      	movs	r0, r3
   235a6:	4b2e      	ldr	r3, [pc, #184]	; (23660 <hif_receive+0x160>)
   235a8:	4798      	blx	r3
		goto ERR1;
   235aa:	e04a      	b.n	23642 <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   235ac:	4b2f      	ldr	r3, [pc, #188]	; (2366c <hif_receive+0x16c>)
   235ae:	689a      	ldr	r2, [r3, #8]
   235b0:	68fb      	ldr	r3, [r7, #12]
   235b2:	429a      	cmp	r2, r3
   235b4:	d80a      	bhi.n	235cc <hif_receive+0xcc>
   235b6:	1dbb      	adds	r3, r7, #6
   235b8:	881a      	ldrh	r2, [r3, #0]
   235ba:	68fb      	ldr	r3, [r7, #12]
   235bc:	18d2      	adds	r2, r2, r3
   235be:	4b2b      	ldr	r3, [pc, #172]	; (2366c <hif_receive+0x16c>)
   235c0:	6899      	ldr	r1, [r3, #8]
   235c2:	4b2a      	ldr	r3, [pc, #168]	; (2366c <hif_receive+0x16c>)
   235c4:	68db      	ldr	r3, [r3, #12]
   235c6:	18cb      	adds	r3, r1, r3
   235c8:	429a      	cmp	r2, r3
   235ca:	d912      	bls.n	235f2 <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   235cc:	2317      	movs	r3, #23
   235ce:	18fb      	adds	r3, r7, r3
   235d0:	22f4      	movs	r2, #244	; 0xf4
   235d2:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   235d4:	4a27      	ldr	r2, [pc, #156]	; (23674 <hif_receive+0x174>)
   235d6:	4920      	ldr	r1, [pc, #128]	; (23658 <hif_receive+0x158>)
   235d8:	4b20      	ldr	r3, [pc, #128]	; (2365c <hif_receive+0x15c>)
   235da:	0018      	movs	r0, r3
   235dc:	4b20      	ldr	r3, [pc, #128]	; (23660 <hif_receive+0x160>)
   235de:	4798      	blx	r3
   235e0:	4b25      	ldr	r3, [pc, #148]	; (23678 <hif_receive+0x178>)
   235e2:	0018      	movs	r0, r3
   235e4:	4b1e      	ldr	r3, [pc, #120]	; (23660 <hif_receive+0x160>)
   235e6:	4798      	blx	r3
   235e8:	4b1f      	ldr	r3, [pc, #124]	; (23668 <hif_receive+0x168>)
   235ea:	0018      	movs	r0, r3
   235ec:	4b1c      	ldr	r3, [pc, #112]	; (23660 <hif_receive+0x160>)
   235ee:	4798      	blx	r3
		goto ERR1;
   235f0:	e027      	b.n	23642 <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   235f2:	1dbb      	adds	r3, r7, #6
   235f4:	881a      	ldrh	r2, [r3, #0]
   235f6:	2317      	movs	r3, #23
   235f8:	18fc      	adds	r4, r7, r3
   235fa:	68b9      	ldr	r1, [r7, #8]
   235fc:	68fb      	ldr	r3, [r7, #12]
   235fe:	0018      	movs	r0, r3
   23600:	4b1e      	ldr	r3, [pc, #120]	; (2367c <hif_receive+0x17c>)
   23602:	4798      	blx	r3
   23604:	0003      	movs	r3, r0
   23606:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   23608:	2317      	movs	r3, #23
   2360a:	18fb      	adds	r3, r7, r3
   2360c:	781b      	ldrb	r3, [r3, #0]
   2360e:	b25b      	sxtb	r3, r3
   23610:	2b00      	cmp	r3, #0
   23612:	d115      	bne.n	23640 <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   23614:	4b15      	ldr	r3, [pc, #84]	; (2366c <hif_receive+0x16c>)
   23616:	689a      	ldr	r2, [r3, #8]
   23618:	4b14      	ldr	r3, [pc, #80]	; (2366c <hif_receive+0x16c>)
   2361a:	68db      	ldr	r3, [r3, #12]
   2361c:	18d2      	adds	r2, r2, r3
   2361e:	1dbb      	adds	r3, r7, #6
   23620:	8819      	ldrh	r1, [r3, #0]
   23622:	68fb      	ldr	r3, [r7, #12]
   23624:	18cb      	adds	r3, r1, r3
   23626:	429a      	cmp	r2, r3
   23628:	d003      	beq.n	23632 <hif_receive+0x132>
   2362a:	1d7b      	adds	r3, r7, #5
   2362c:	781b      	ldrb	r3, [r3, #0]
   2362e:	2b00      	cmp	r3, #0
   23630:	d007      	beq.n	23642 <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   23632:	2317      	movs	r3, #23
   23634:	18fc      	adds	r4, r7, r3
   23636:	4b07      	ldr	r3, [pc, #28]	; (23654 <hif_receive+0x154>)
   23638:	4798      	blx	r3
   2363a:	0003      	movs	r3, r0
   2363c:	7023      	strb	r3, [r4, #0]
   2363e:	e000      	b.n	23642 <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   23640:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   23642:	2317      	movs	r3, #23
   23644:	18fb      	adds	r3, r7, r3
   23646:	781b      	ldrb	r3, [r3, #0]
   23648:	b25b      	sxtb	r3, r3
}
   2364a:	0018      	movs	r0, r3
   2364c:	46bd      	mov	sp, r7
   2364e:	b007      	add	sp, #28
   23650:	bd90      	pop	{r4, r7, pc}
   23652:	46c0      	nop			; (mov r8, r8)
   23654:	00022a1d 	.word	0x00022a1d
   23658:	0003ac28 	.word	0x0003ac28
   2365c:	0003a900 	.word	0x0003a900
   23660:	00020039 	.word	0x00020039
   23664:	0003ab2c 	.word	0x0003ab2c
   23668:	0003a8fc 	.word	0x0003a8fc
   2366c:	20005700 	.word	0x20005700
   23670:	0003ab4c 	.word	0x0003ab4c
   23674:	00000286 	.word	0x00000286
   23678:	0003ab94 	.word	0x0003ab94
   2367c:	00024a89 	.word	0x00024a89

00023680 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   23680:	b580      	push	{r7, lr}
   23682:	b084      	sub	sp, #16
   23684:	af00      	add	r7, sp, #0
   23686:	0002      	movs	r2, r0
   23688:	6039      	str	r1, [r7, #0]
   2368a:	1dfb      	adds	r3, r7, #7
   2368c:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2368e:	230f      	movs	r3, #15
   23690:	18fb      	adds	r3, r7, r3
   23692:	2200      	movs	r2, #0
   23694:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   23696:	1dfb      	adds	r3, r7, #7
   23698:	781b      	ldrb	r3, [r3, #0]
   2369a:	2b07      	cmp	r3, #7
   2369c:	d820      	bhi.n	236e0 <hif_register_cb+0x60>
   2369e:	009a      	lsls	r2, r3, #2
   236a0:	4b1e      	ldr	r3, [pc, #120]	; (2371c <hif_register_cb+0x9c>)
   236a2:	18d3      	adds	r3, r2, r3
   236a4:	681b      	ldr	r3, [r3, #0]
   236a6:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   236a8:	4b1d      	ldr	r3, [pc, #116]	; (23720 <hif_register_cb+0xa0>)
   236aa:	683a      	ldr	r2, [r7, #0]
   236ac:	615a      	str	r2, [r3, #20]
			break;
   236ae:	e02d      	b.n	2370c <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   236b0:	4b1b      	ldr	r3, [pc, #108]	; (23720 <hif_register_cb+0xa0>)
   236b2:	683a      	ldr	r2, [r7, #0]
   236b4:	611a      	str	r2, [r3, #16]
			break;
   236b6:	e029      	b.n	2370c <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   236b8:	4b19      	ldr	r3, [pc, #100]	; (23720 <hif_register_cb+0xa0>)
   236ba:	683a      	ldr	r2, [r7, #0]
   236bc:	619a      	str	r2, [r3, #24]
			break;
   236be:	e025      	b.n	2370c <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   236c0:	4b17      	ldr	r3, [pc, #92]	; (23720 <hif_register_cb+0xa0>)
   236c2:	683a      	ldr	r2, [r7, #0]
   236c4:	621a      	str	r2, [r3, #32]
			break;
   236c6:	e021      	b.n	2370c <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   236c8:	4b15      	ldr	r3, [pc, #84]	; (23720 <hif_register_cb+0xa0>)
   236ca:	683a      	ldr	r2, [r7, #0]
   236cc:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   236ce:	e01d      	b.n	2370c <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   236d0:	4b13      	ldr	r3, [pc, #76]	; (23720 <hif_register_cb+0xa0>)
   236d2:	683a      	ldr	r2, [r7, #0]
   236d4:	61da      	str	r2, [r3, #28]
			break;
   236d6:	e019      	b.n	2370c <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   236d8:	4b11      	ldr	r3, [pc, #68]	; (23720 <hif_register_cb+0xa0>)
   236da:	683a      	ldr	r2, [r7, #0]
   236dc:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   236de:	e015      	b.n	2370c <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   236e0:	4a10      	ldr	r2, [pc, #64]	; (23724 <hif_register_cb+0xa4>)
   236e2:	4911      	ldr	r1, [pc, #68]	; (23728 <hif_register_cb+0xa8>)
   236e4:	4b11      	ldr	r3, [pc, #68]	; (2372c <hif_register_cb+0xac>)
   236e6:	0018      	movs	r0, r3
   236e8:	4b11      	ldr	r3, [pc, #68]	; (23730 <hif_register_cb+0xb0>)
   236ea:	4798      	blx	r3
   236ec:	1dfb      	adds	r3, r7, #7
   236ee:	781a      	ldrb	r2, [r3, #0]
   236f0:	4b10      	ldr	r3, [pc, #64]	; (23734 <hif_register_cb+0xb4>)
   236f2:	0011      	movs	r1, r2
   236f4:	0018      	movs	r0, r3
   236f6:	4b0e      	ldr	r3, [pc, #56]	; (23730 <hif_register_cb+0xb0>)
   236f8:	4798      	blx	r3
   236fa:	4b0f      	ldr	r3, [pc, #60]	; (23738 <hif_register_cb+0xb8>)
   236fc:	0018      	movs	r0, r3
   236fe:	4b0c      	ldr	r3, [pc, #48]	; (23730 <hif_register_cb+0xb0>)
   23700:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   23702:	230f      	movs	r3, #15
   23704:	18fb      	adds	r3, r7, r3
   23706:	22f4      	movs	r2, #244	; 0xf4
   23708:	701a      	strb	r2, [r3, #0]
			break;
   2370a:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   2370c:	230f      	movs	r3, #15
   2370e:	18fb      	adds	r3, r7, r3
   23710:	781b      	ldrb	r3, [r3, #0]
   23712:	b25b      	sxtb	r3, r3
}
   23714:	0018      	movs	r0, r3
   23716:	46bd      	mov	sp, r7
   23718:	b004      	add	sp, #16
   2371a:	bd80      	pop	{r7, pc}
   2371c:	0003abe4 	.word	0x0003abe4
   23720:	20005700 	.word	0x20005700
   23724:	000002be 	.word	0x000002be
   23728:	0003ac34 	.word	0x0003ac34
   2372c:	0003a900 	.word	0x0003a900
   23730:	00020039 	.word	0x00020039
   23734:	0003abd8 	.word	0x0003abd8
   23738:	0003a8fc 	.word	0x0003a8fc

0002373c <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   2373c:	b590      	push	{r4, r7, lr}
   2373e:	b0af      	sub	sp, #188	; 0xbc
   23740:	af02      	add	r7, sp, #8
   23742:	603a      	str	r2, [r7, #0]
   23744:	1dfb      	adds	r3, r7, #7
   23746:	1c02      	adds	r2, r0, #0
   23748:	701a      	strb	r2, [r3, #0]
   2374a:	1d3b      	adds	r3, r7, #4
   2374c:	1c0a      	adds	r2, r1, #0
   2374e:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   23750:	1dfb      	adds	r3, r7, #7
   23752:	781b      	ldrb	r3, [r3, #0]
   23754:	2b2c      	cmp	r3, #44	; 0x2c
   23756:	d116      	bne.n	23786 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   23758:	23a4      	movs	r3, #164	; 0xa4
   2375a:	18f9      	adds	r1, r7, r3
   2375c:	6838      	ldr	r0, [r7, #0]
   2375e:	2300      	movs	r3, #0
   23760:	2204      	movs	r2, #4
   23762:	4cca      	ldr	r4, [pc, #808]	; (23a8c <m2m_wifi_cb+0x350>)
   23764:	47a0      	blx	r4
   23766:	1e03      	subs	r3, r0, #0
   23768:	d000      	beq.n	2376c <m2m_wifi_cb+0x30>
   2376a:	e1b4      	b.n	23ad6 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   2376c:	4bc8      	ldr	r3, [pc, #800]	; (23a90 <m2m_wifi_cb+0x354>)
   2376e:	681b      	ldr	r3, [r3, #0]
   23770:	2b00      	cmp	r3, #0
   23772:	d100      	bne.n	23776 <m2m_wifi_cb+0x3a>
   23774:	e1af      	b.n	23ad6 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   23776:	4bc6      	ldr	r3, [pc, #792]	; (23a90 <m2m_wifi_cb+0x354>)
   23778:	681b      	ldr	r3, [r3, #0]
   2377a:	22a4      	movs	r2, #164	; 0xa4
   2377c:	18ba      	adds	r2, r7, r2
   2377e:	0011      	movs	r1, r2
   23780:	202c      	movs	r0, #44	; 0x2c
   23782:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   23784:	e1a7      	b.n	23ad6 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   23786:	1dfb      	adds	r3, r7, #7
   23788:	781b      	ldrb	r3, [r3, #0]
   2378a:	2b1b      	cmp	r3, #27
   2378c:	d116      	bne.n	237bc <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   2378e:	239c      	movs	r3, #156	; 0x9c
   23790:	18f9      	adds	r1, r7, r3
   23792:	6838      	ldr	r0, [r7, #0]
   23794:	2300      	movs	r3, #0
   23796:	2208      	movs	r2, #8
   23798:	4cbc      	ldr	r4, [pc, #752]	; (23a8c <m2m_wifi_cb+0x350>)
   2379a:	47a0      	blx	r4
   2379c:	1e03      	subs	r3, r0, #0
   2379e:	d000      	beq.n	237a2 <m2m_wifi_cb+0x66>
   237a0:	e199      	b.n	23ad6 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   237a2:	4bbb      	ldr	r3, [pc, #748]	; (23a90 <m2m_wifi_cb+0x354>)
   237a4:	681b      	ldr	r3, [r3, #0]
   237a6:	2b00      	cmp	r3, #0
   237a8:	d100      	bne.n	237ac <m2m_wifi_cb+0x70>
   237aa:	e194      	b.n	23ad6 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   237ac:	4bb8      	ldr	r3, [pc, #736]	; (23a90 <m2m_wifi_cb+0x354>)
   237ae:	681b      	ldr	r3, [r3, #0]
   237b0:	229c      	movs	r2, #156	; 0x9c
   237b2:	18ba      	adds	r2, r7, r2
   237b4:	0011      	movs	r1, r2
   237b6:	201b      	movs	r0, #27
   237b8:	4798      	blx	r3
}
   237ba:	e18c      	b.n	23ad6 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   237bc:	1dfb      	adds	r3, r7, #7
   237be:	781b      	ldrb	r3, [r3, #0]
   237c0:	2b06      	cmp	r3, #6
   237c2:	d116      	bne.n	237f2 <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   237c4:	230c      	movs	r3, #12
   237c6:	18f9      	adds	r1, r7, r3
   237c8:	6838      	ldr	r0, [r7, #0]
   237ca:	2301      	movs	r3, #1
   237cc:	2230      	movs	r2, #48	; 0x30
   237ce:	4caf      	ldr	r4, [pc, #700]	; (23a8c <m2m_wifi_cb+0x350>)
   237d0:	47a0      	blx	r4
   237d2:	1e03      	subs	r3, r0, #0
   237d4:	d000      	beq.n	237d8 <m2m_wifi_cb+0x9c>
   237d6:	e17e      	b.n	23ad6 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   237d8:	4bad      	ldr	r3, [pc, #692]	; (23a90 <m2m_wifi_cb+0x354>)
   237da:	681b      	ldr	r3, [r3, #0]
   237dc:	2b00      	cmp	r3, #0
   237de:	d100      	bne.n	237e2 <m2m_wifi_cb+0xa6>
   237e0:	e179      	b.n	23ad6 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   237e2:	4bab      	ldr	r3, [pc, #684]	; (23a90 <m2m_wifi_cb+0x354>)
   237e4:	681b      	ldr	r3, [r3, #0]
   237e6:	220c      	movs	r2, #12
   237e8:	18ba      	adds	r2, r7, r2
   237ea:	0011      	movs	r1, r2
   237ec:	2006      	movs	r0, #6
   237ee:	4798      	blx	r3
}
   237f0:	e171      	b.n	23ad6 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   237f2:	1dfb      	adds	r3, r7, #7
   237f4:	781b      	ldrb	r3, [r3, #0]
   237f6:	2b0e      	cmp	r3, #14
   237f8:	d100      	bne.n	237fc <m2m_wifi_cb+0xc0>
   237fa:	e16c      	b.n	23ad6 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   237fc:	1dfb      	adds	r3, r7, #7
   237fe:	781b      	ldrb	r3, [r3, #0]
   23800:	2b32      	cmp	r3, #50	; 0x32
   23802:	d116      	bne.n	23832 <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   23804:	2384      	movs	r3, #132	; 0x84
   23806:	18f9      	adds	r1, r7, r3
   23808:	6838      	ldr	r0, [r7, #0]
   2380a:	2300      	movs	r3, #0
   2380c:	2218      	movs	r2, #24
   2380e:	4c9f      	ldr	r4, [pc, #636]	; (23a8c <m2m_wifi_cb+0x350>)
   23810:	47a0      	blx	r4
   23812:	1e03      	subs	r3, r0, #0
   23814:	d000      	beq.n	23818 <m2m_wifi_cb+0xdc>
   23816:	e15e      	b.n	23ad6 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   23818:	4b9d      	ldr	r3, [pc, #628]	; (23a90 <m2m_wifi_cb+0x354>)
   2381a:	681b      	ldr	r3, [r3, #0]
   2381c:	2b00      	cmp	r3, #0
   2381e:	d100      	bne.n	23822 <m2m_wifi_cb+0xe6>
   23820:	e159      	b.n	23ad6 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   23822:	4b9b      	ldr	r3, [pc, #620]	; (23a90 <m2m_wifi_cb+0x354>)
   23824:	681b      	ldr	r3, [r3, #0]
   23826:	2284      	movs	r2, #132	; 0x84
   23828:	18ba      	adds	r2, r7, r2
   2382a:	0011      	movs	r1, r2
   2382c:	2032      	movs	r0, #50	; 0x32
   2382e:	4798      	blx	r3
}
   23830:	e151      	b.n	23ad6 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   23832:	1dfb      	adds	r3, r7, #7
   23834:	781b      	ldrb	r3, [r3, #0]
   23836:	2b2f      	cmp	r3, #47	; 0x2f
   23838:	d11d      	bne.n	23876 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   2383a:	230c      	movs	r3, #12
   2383c:	18fb      	adds	r3, r7, r3
   2383e:	2264      	movs	r2, #100	; 0x64
   23840:	2100      	movs	r1, #0
   23842:	0018      	movs	r0, r3
   23844:	4b93      	ldr	r3, [pc, #588]	; (23a94 <m2m_wifi_cb+0x358>)
   23846:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   23848:	230c      	movs	r3, #12
   2384a:	18f9      	adds	r1, r7, r3
   2384c:	6838      	ldr	r0, [r7, #0]
   2384e:	2300      	movs	r3, #0
   23850:	2264      	movs	r2, #100	; 0x64
   23852:	4c8e      	ldr	r4, [pc, #568]	; (23a8c <m2m_wifi_cb+0x350>)
   23854:	47a0      	blx	r4
   23856:	1e03      	subs	r3, r0, #0
   23858:	d000      	beq.n	2385c <m2m_wifi_cb+0x120>
   2385a:	e13c      	b.n	23ad6 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2385c:	4b8c      	ldr	r3, [pc, #560]	; (23a90 <m2m_wifi_cb+0x354>)
   2385e:	681b      	ldr	r3, [r3, #0]
   23860:	2b00      	cmp	r3, #0
   23862:	d100      	bne.n	23866 <m2m_wifi_cb+0x12a>
   23864:	e137      	b.n	23ad6 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   23866:	4b8a      	ldr	r3, [pc, #552]	; (23a90 <m2m_wifi_cb+0x354>)
   23868:	681b      	ldr	r3, [r3, #0]
   2386a:	220c      	movs	r2, #12
   2386c:	18ba      	adds	r2, r7, r2
   2386e:	0011      	movs	r1, r2
   23870:	202f      	movs	r0, #47	; 0x2f
   23872:	4798      	blx	r3
}
   23874:	e12f      	b.n	23ad6 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   23876:	1dfb      	adds	r3, r7, #7
   23878:	781b      	ldrb	r3, [r3, #0]
   2387a:	2b34      	cmp	r3, #52	; 0x34
   2387c:	d137      	bne.n	238ee <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   2387e:	2380      	movs	r3, #128	; 0x80
   23880:	18f9      	adds	r1, r7, r3
   23882:	6838      	ldr	r0, [r7, #0]
   23884:	2300      	movs	r3, #0
   23886:	2204      	movs	r2, #4
   23888:	4c80      	ldr	r4, [pc, #512]	; (23a8c <m2m_wifi_cb+0x350>)
   2388a:	47a0      	blx	r4
   2388c:	1e03      	subs	r3, r0, #0
   2388e:	d000      	beq.n	23892 <m2m_wifi_cb+0x156>
   23890:	e121      	b.n	23ad6 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   23892:	4b81      	ldr	r3, [pc, #516]	; (23a98 <m2m_wifi_cb+0x35c>)
   23894:	0018      	movs	r0, r3
   23896:	4b81      	ldr	r3, [pc, #516]	; (23a9c <m2m_wifi_cb+0x360>)
   23898:	4798      	blx	r3
   2389a:	2380      	movs	r3, #128	; 0x80
   2389c:	18fb      	adds	r3, r7, r3
   2389e:	681b      	ldr	r3, [r3, #0]
   238a0:	0e1b      	lsrs	r3, r3, #24
   238a2:	b2db      	uxtb	r3, r3
   238a4:	0019      	movs	r1, r3
   238a6:	2380      	movs	r3, #128	; 0x80
   238a8:	18fb      	adds	r3, r7, r3
   238aa:	681b      	ldr	r3, [r3, #0]
   238ac:	0c1b      	lsrs	r3, r3, #16
   238ae:	b2db      	uxtb	r3, r3
   238b0:	001a      	movs	r2, r3
   238b2:	2380      	movs	r3, #128	; 0x80
   238b4:	18fb      	adds	r3, r7, r3
   238b6:	681b      	ldr	r3, [r3, #0]
   238b8:	0a1b      	lsrs	r3, r3, #8
   238ba:	b2db      	uxtb	r3, r3
   238bc:	001c      	movs	r4, r3
   238be:	2380      	movs	r3, #128	; 0x80
   238c0:	18fb      	adds	r3, r7, r3
   238c2:	681b      	ldr	r3, [r3, #0]
   238c4:	b2db      	uxtb	r3, r3
   238c6:	4876      	ldr	r0, [pc, #472]	; (23aa0 <m2m_wifi_cb+0x364>)
   238c8:	9300      	str	r3, [sp, #0]
   238ca:	0023      	movs	r3, r4
   238cc:	4c73      	ldr	r4, [pc, #460]	; (23a9c <m2m_wifi_cb+0x360>)
   238ce:	47a0      	blx	r4
   238d0:	4b74      	ldr	r3, [pc, #464]	; (23aa4 <m2m_wifi_cb+0x368>)
   238d2:	0018      	movs	r0, r3
   238d4:	4b71      	ldr	r3, [pc, #452]	; (23a9c <m2m_wifi_cb+0x360>)
   238d6:	4798      	blx	r3
			if (gpfAppWifiCb)
   238d8:	4b6d      	ldr	r3, [pc, #436]	; (23a90 <m2m_wifi_cb+0x354>)
   238da:	681b      	ldr	r3, [r3, #0]
   238dc:	2b00      	cmp	r3, #0
   238de:	d100      	bne.n	238e2 <m2m_wifi_cb+0x1a6>
   238e0:	e0f9      	b.n	23ad6 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   238e2:	4b6b      	ldr	r3, [pc, #428]	; (23a90 <m2m_wifi_cb+0x354>)
   238e4:	681b      	ldr	r3, [r3, #0]
   238e6:	2100      	movs	r1, #0
   238e8:	2034      	movs	r0, #52	; 0x34
   238ea:	4798      	blx	r3
}
   238ec:	e0f3      	b.n	23ad6 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   238ee:	1dfb      	adds	r3, r7, #7
   238f0:	781b      	ldrb	r3, [r3, #0]
   238f2:	2b11      	cmp	r3, #17
   238f4:	d11e      	bne.n	23934 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   238f6:	4b6c      	ldr	r3, [pc, #432]	; (23aa8 <m2m_wifi_cb+0x36c>)
   238f8:	2200      	movs	r2, #0
   238fa:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   238fc:	237c      	movs	r3, #124	; 0x7c
   238fe:	18f9      	adds	r1, r7, r3
   23900:	6838      	ldr	r0, [r7, #0]
   23902:	2300      	movs	r3, #0
   23904:	2204      	movs	r2, #4
   23906:	4c61      	ldr	r4, [pc, #388]	; (23a8c <m2m_wifi_cb+0x350>)
   23908:	47a0      	blx	r4
   2390a:	1e03      	subs	r3, r0, #0
   2390c:	d000      	beq.n	23910 <m2m_wifi_cb+0x1d4>
   2390e:	e0e2      	b.n	23ad6 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   23910:	237c      	movs	r3, #124	; 0x7c
   23912:	18fb      	adds	r3, r7, r3
   23914:	781a      	ldrb	r2, [r3, #0]
   23916:	4b65      	ldr	r3, [pc, #404]	; (23aac <m2m_wifi_cb+0x370>)
   23918:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   2391a:	4b5d      	ldr	r3, [pc, #372]	; (23a90 <m2m_wifi_cb+0x354>)
   2391c:	681b      	ldr	r3, [r3, #0]
   2391e:	2b00      	cmp	r3, #0
   23920:	d100      	bne.n	23924 <m2m_wifi_cb+0x1e8>
   23922:	e0d8      	b.n	23ad6 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   23924:	4b5a      	ldr	r3, [pc, #360]	; (23a90 <m2m_wifi_cb+0x354>)
   23926:	681b      	ldr	r3, [r3, #0]
   23928:	227c      	movs	r2, #124	; 0x7c
   2392a:	18ba      	adds	r2, r7, r2
   2392c:	0011      	movs	r1, r2
   2392e:	2011      	movs	r0, #17
   23930:	4798      	blx	r3
}
   23932:	e0d0      	b.n	23ad6 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   23934:	1dfb      	adds	r3, r7, #7
   23936:	781b      	ldrb	r3, [r3, #0]
   23938:	2b13      	cmp	r3, #19
   2393a:	d116      	bne.n	2396a <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   2393c:	230c      	movs	r3, #12
   2393e:	18f9      	adds	r1, r7, r3
   23940:	6838      	ldr	r0, [r7, #0]
   23942:	2300      	movs	r3, #0
   23944:	222c      	movs	r2, #44	; 0x2c
   23946:	4c51      	ldr	r4, [pc, #324]	; (23a8c <m2m_wifi_cb+0x350>)
   23948:	47a0      	blx	r4
   2394a:	1e03      	subs	r3, r0, #0
   2394c:	d000      	beq.n	23950 <m2m_wifi_cb+0x214>
   2394e:	e0c2      	b.n	23ad6 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   23950:	4b4f      	ldr	r3, [pc, #316]	; (23a90 <m2m_wifi_cb+0x354>)
   23952:	681b      	ldr	r3, [r3, #0]
   23954:	2b00      	cmp	r3, #0
   23956:	d100      	bne.n	2395a <m2m_wifi_cb+0x21e>
   23958:	e0bd      	b.n	23ad6 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   2395a:	4b4d      	ldr	r3, [pc, #308]	; (23a90 <m2m_wifi_cb+0x354>)
   2395c:	681b      	ldr	r3, [r3, #0]
   2395e:	220c      	movs	r2, #12
   23960:	18ba      	adds	r2, r7, r2
   23962:	0011      	movs	r1, r2
   23964:	2013      	movs	r0, #19
   23966:	4798      	blx	r3
}
   23968:	e0b5      	b.n	23ad6 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   2396a:	1dfb      	adds	r3, r7, #7
   2396c:	781b      	ldrb	r3, [r3, #0]
   2396e:	2b04      	cmp	r3, #4
   23970:	d116      	bne.n	239a0 <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   23972:	23a8      	movs	r3, #168	; 0xa8
   23974:	18f9      	adds	r1, r7, r3
   23976:	6838      	ldr	r0, [r7, #0]
   23978:	2300      	movs	r3, #0
   2397a:	2204      	movs	r2, #4
   2397c:	4c43      	ldr	r4, [pc, #268]	; (23a8c <m2m_wifi_cb+0x350>)
   2397e:	47a0      	blx	r4
   23980:	1e03      	subs	r3, r0, #0
   23982:	d000      	beq.n	23986 <m2m_wifi_cb+0x24a>
   23984:	e0a7      	b.n	23ad6 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   23986:	4b42      	ldr	r3, [pc, #264]	; (23a90 <m2m_wifi_cb+0x354>)
   23988:	681b      	ldr	r3, [r3, #0]
   2398a:	2b00      	cmp	r3, #0
   2398c:	d100      	bne.n	23990 <m2m_wifi_cb+0x254>
   2398e:	e0a2      	b.n	23ad6 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   23990:	4b3f      	ldr	r3, [pc, #252]	; (23a90 <m2m_wifi_cb+0x354>)
   23992:	681b      	ldr	r3, [r3, #0]
   23994:	22a8      	movs	r2, #168	; 0xa8
   23996:	18ba      	adds	r2, r7, r2
   23998:	0011      	movs	r1, r2
   2399a:	2004      	movs	r0, #4
   2399c:	4798      	blx	r3
}
   2399e:	e09a      	b.n	23ad6 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   239a0:	1dfb      	adds	r3, r7, #7
   239a2:	781b      	ldrb	r3, [r3, #0]
   239a4:	2b65      	cmp	r3, #101	; 0x65
   239a6:	d116      	bne.n	239d6 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   239a8:	23a8      	movs	r3, #168	; 0xa8
   239aa:	18f9      	adds	r1, r7, r3
   239ac:	6838      	ldr	r0, [r7, #0]
   239ae:	2300      	movs	r3, #0
   239b0:	2204      	movs	r2, #4
   239b2:	4c36      	ldr	r4, [pc, #216]	; (23a8c <m2m_wifi_cb+0x350>)
   239b4:	47a0      	blx	r4
   239b6:	1e03      	subs	r3, r0, #0
   239b8:	d000      	beq.n	239bc <m2m_wifi_cb+0x280>
   239ba:	e08c      	b.n	23ad6 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   239bc:	4b34      	ldr	r3, [pc, #208]	; (23a90 <m2m_wifi_cb+0x354>)
   239be:	681b      	ldr	r3, [r3, #0]
   239c0:	2b00      	cmp	r3, #0
   239c2:	d100      	bne.n	239c6 <m2m_wifi_cb+0x28a>
   239c4:	e087      	b.n	23ad6 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   239c6:	4b32      	ldr	r3, [pc, #200]	; (23a90 <m2m_wifi_cb+0x354>)
   239c8:	681b      	ldr	r3, [r3, #0]
   239ca:	22a8      	movs	r2, #168	; 0xa8
   239cc:	18ba      	adds	r2, r7, r2
   239ce:	0011      	movs	r1, r2
   239d0:	2065      	movs	r0, #101	; 0x65
   239d2:	4798      	blx	r3
}
   239d4:	e07f      	b.n	23ad6 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   239d6:	1dfb      	adds	r3, r7, #7
   239d8:	781b      	ldrb	r3, [r3, #0]
   239da:	2b09      	cmp	r3, #9
   239dc:	d116      	bne.n	23a0c <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   239de:	230c      	movs	r3, #12
   239e0:	18f9      	adds	r1, r7, r3
   239e2:	6838      	ldr	r0, [r7, #0]
   239e4:	2301      	movs	r3, #1
   239e6:	2264      	movs	r2, #100	; 0x64
   239e8:	4c28      	ldr	r4, [pc, #160]	; (23a8c <m2m_wifi_cb+0x350>)
   239ea:	47a0      	blx	r4
   239ec:	1e03      	subs	r3, r0, #0
   239ee:	d000      	beq.n	239f2 <m2m_wifi_cb+0x2b6>
   239f0:	e071      	b.n	23ad6 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   239f2:	4b27      	ldr	r3, [pc, #156]	; (23a90 <m2m_wifi_cb+0x354>)
   239f4:	681b      	ldr	r3, [r3, #0]
   239f6:	2b00      	cmp	r3, #0
   239f8:	d100      	bne.n	239fc <m2m_wifi_cb+0x2c0>
   239fa:	e06c      	b.n	23ad6 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   239fc:	4b24      	ldr	r3, [pc, #144]	; (23a90 <m2m_wifi_cb+0x354>)
   239fe:	681b      	ldr	r3, [r3, #0]
   23a00:	220c      	movs	r2, #12
   23a02:	18ba      	adds	r2, r7, r2
   23a04:	0011      	movs	r1, r2
   23a06:	2009      	movs	r0, #9
   23a08:	4798      	blx	r3
}
   23a0a:	e064      	b.n	23ad6 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   23a0c:	1dfb      	adds	r3, r7, #7
   23a0e:	781b      	ldrb	r3, [r3, #0]
   23a10:	2b2a      	cmp	r3, #42	; 0x2a
   23a12:	d114      	bne.n	23a3e <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   23a14:	2378      	movs	r3, #120	; 0x78
   23a16:	18f9      	adds	r1, r7, r3
   23a18:	6838      	ldr	r0, [r7, #0]
   23a1a:	2301      	movs	r3, #1
   23a1c:	2204      	movs	r2, #4
   23a1e:	4c1b      	ldr	r4, [pc, #108]	; (23a8c <m2m_wifi_cb+0x350>)
   23a20:	47a0      	blx	r4
   23a22:	1e03      	subs	r3, r0, #0
   23a24:	d157      	bne.n	23ad6 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   23a26:	4b1a      	ldr	r3, [pc, #104]	; (23a90 <m2m_wifi_cb+0x354>)
   23a28:	681b      	ldr	r3, [r3, #0]
   23a2a:	2b00      	cmp	r3, #0
   23a2c:	d053      	beq.n	23ad6 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   23a2e:	4b18      	ldr	r3, [pc, #96]	; (23a90 <m2m_wifi_cb+0x354>)
   23a30:	681b      	ldr	r3, [r3, #0]
   23a32:	2278      	movs	r2, #120	; 0x78
   23a34:	18ba      	adds	r2, r7, r2
   23a36:	0011      	movs	r1, r2
   23a38:	202a      	movs	r0, #42	; 0x2a
   23a3a:	4798      	blx	r3
}
   23a3c:	e04b      	b.n	23ad6 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   23a3e:	1dfb      	adds	r3, r7, #7
   23a40:	781b      	ldrb	r3, [r3, #0]
   23a42:	2b20      	cmp	r3, #32
   23a44:	d134      	bne.n	23ab0 <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   23a46:	2370      	movs	r3, #112	; 0x70
   23a48:	18f9      	adds	r1, r7, r3
   23a4a:	6838      	ldr	r0, [r7, #0]
   23a4c:	2300      	movs	r3, #0
   23a4e:	2208      	movs	r2, #8
   23a50:	4c0e      	ldr	r4, [pc, #56]	; (23a8c <m2m_wifi_cb+0x350>)
   23a52:	47a0      	blx	r4
   23a54:	1e03      	subs	r3, r0, #0
   23a56:	d13e      	bne.n	23ad6 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   23a58:	683b      	ldr	r3, [r7, #0]
   23a5a:	3308      	adds	r3, #8
   23a5c:	0018      	movs	r0, r3
   23a5e:	2370      	movs	r3, #112	; 0x70
   23a60:	18fb      	adds	r3, r7, r3
   23a62:	6819      	ldr	r1, [r3, #0]
   23a64:	2370      	movs	r3, #112	; 0x70
   23a66:	18fb      	adds	r3, r7, r3
   23a68:	889a      	ldrh	r2, [r3, #4]
   23a6a:	2301      	movs	r3, #1
   23a6c:	4c07      	ldr	r4, [pc, #28]	; (23a8c <m2m_wifi_cb+0x350>)
   23a6e:	47a0      	blx	r4
   23a70:	1e03      	subs	r3, r0, #0
   23a72:	d130      	bne.n	23ad6 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   23a74:	4b06      	ldr	r3, [pc, #24]	; (23a90 <m2m_wifi_cb+0x354>)
   23a76:	681b      	ldr	r3, [r3, #0]
   23a78:	2b00      	cmp	r3, #0
   23a7a:	d02c      	beq.n	23ad6 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   23a7c:	4b04      	ldr	r3, [pc, #16]	; (23a90 <m2m_wifi_cb+0x354>)
   23a7e:	681b      	ldr	r3, [r3, #0]
   23a80:	2270      	movs	r2, #112	; 0x70
   23a82:	18ba      	adds	r2, r7, r2
   23a84:	0011      	movs	r1, r2
   23a86:	2020      	movs	r0, #32
   23a88:	4798      	blx	r3
}
   23a8a:	e024      	b.n	23ad6 <m2m_wifi_cb+0x39a>
   23a8c:	00023501 	.word	0x00023501
   23a90:	20003ec4 	.word	0x20003ec4
   23a94:	00022985 	.word	0x00022985
   23a98:	0003ac44 	.word	0x0003ac44
   23a9c:	00020039 	.word	0x00020039
   23aa0:	0003ac50 	.word	0x0003ac50
   23aa4:	0003ac70 	.word	0x0003ac70
   23aa8:	20003ec1 	.word	0x20003ec1
   23aac:	20003ec0 	.word	0x20003ec0
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   23ab0:	2324      	movs	r3, #36	; 0x24
   23ab2:	33ff      	adds	r3, #255	; 0xff
   23ab4:	001a      	movs	r2, r3
   23ab6:	490a      	ldr	r1, [pc, #40]	; (23ae0 <m2m_wifi_cb+0x3a4>)
   23ab8:	4b0a      	ldr	r3, [pc, #40]	; (23ae4 <m2m_wifi_cb+0x3a8>)
   23aba:	0018      	movs	r0, r3
   23abc:	4b0a      	ldr	r3, [pc, #40]	; (23ae8 <m2m_wifi_cb+0x3ac>)
   23abe:	4798      	blx	r3
   23ac0:	1dfb      	adds	r3, r7, #7
   23ac2:	781a      	ldrb	r2, [r3, #0]
   23ac4:	4b09      	ldr	r3, [pc, #36]	; (23aec <m2m_wifi_cb+0x3b0>)
   23ac6:	0011      	movs	r1, r2
   23ac8:	0018      	movs	r0, r3
   23aca:	4b07      	ldr	r3, [pc, #28]	; (23ae8 <m2m_wifi_cb+0x3ac>)
   23acc:	4798      	blx	r3
   23ace:	4b08      	ldr	r3, [pc, #32]	; (23af0 <m2m_wifi_cb+0x3b4>)
   23ad0:	0018      	movs	r0, r3
   23ad2:	4b05      	ldr	r3, [pc, #20]	; (23ae8 <m2m_wifi_cb+0x3ac>)
   23ad4:	4798      	blx	r3
}
   23ad6:	46c0      	nop			; (mov r8, r8)
   23ad8:	46bd      	mov	sp, r7
   23ada:	b02d      	add	sp, #180	; 0xb4
   23adc:	bd90      	pop	{r4, r7, pc}
   23ade:	46c0      	nop			; (mov r8, r8)
   23ae0:	0003b010 	.word	0x0003b010
   23ae4:	0003ac74 	.word	0x0003ac74
   23ae8:	00020039 	.word	0x00020039
   23aec:	0003ac88 	.word	0x0003ac88
   23af0:	0003ac70 	.word	0x0003ac70

00023af4 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   23af4:	b590      	push	{r4, r7, lr}
   23af6:	b091      	sub	sp, #68	; 0x44
   23af8:	af02      	add	r7, sp, #8
   23afa:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   23afc:	2337      	movs	r3, #55	; 0x37
   23afe:	18fb      	adds	r3, r7, r3
   23b00:	2200      	movs	r2, #0
   23b02:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   23b04:	230b      	movs	r3, #11
   23b06:	18fb      	adds	r3, r7, r3
   23b08:	2201      	movs	r2, #1
   23b0a:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   23b0c:	687b      	ldr	r3, [r7, #4]
   23b0e:	2b00      	cmp	r3, #0
   23b10:	d104      	bne.n	23b1c <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   23b12:	2337      	movs	r3, #55	; 0x37
   23b14:	18fb      	adds	r3, r7, r3
   23b16:	22f4      	movs	r2, #244	; 0xf4
   23b18:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   23b1a:	e0b3      	b.n	23c84 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   23b1c:	687b      	ldr	r3, [r7, #4]
   23b1e:	681a      	ldr	r2, [r3, #0]
   23b20:	4b5c      	ldr	r3, [pc, #368]	; (23c94 <m2m_wifi_init+0x1a0>)
   23b22:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   23b24:	4b5c      	ldr	r3, [pc, #368]	; (23c98 <m2m_wifi_init+0x1a4>)
   23b26:	2200      	movs	r2, #0
   23b28:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   23b2a:	2337      	movs	r3, #55	; 0x37
   23b2c:	18fc      	adds	r4, r7, r3
   23b2e:	230b      	movs	r3, #11
   23b30:	18fb      	adds	r3, r7, r3
   23b32:	0018      	movs	r0, r3
   23b34:	4b59      	ldr	r3, [pc, #356]	; (23c9c <m2m_wifi_init+0x1a8>)
   23b36:	4798      	blx	r3
   23b38:	0003      	movs	r3, r0
   23b3a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   23b3c:	2337      	movs	r3, #55	; 0x37
   23b3e:	18fb      	adds	r3, r7, r3
   23b40:	781b      	ldrb	r3, [r3, #0]
   23b42:	b25b      	sxtb	r3, r3
   23b44:	2b00      	cmp	r3, #0
   23b46:	d000      	beq.n	23b4a <m2m_wifi_init+0x56>
   23b48:	e099      	b.n	23c7e <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   23b4a:	2337      	movs	r3, #55	; 0x37
   23b4c:	18fc      	adds	r4, r7, r3
   23b4e:	2000      	movs	r0, #0
   23b50:	4b53      	ldr	r3, [pc, #332]	; (23ca0 <m2m_wifi_init+0x1ac>)
   23b52:	4798      	blx	r3
   23b54:	0003      	movs	r3, r0
   23b56:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   23b58:	2337      	movs	r3, #55	; 0x37
   23b5a:	18fb      	adds	r3, r7, r3
   23b5c:	781b      	ldrb	r3, [r3, #0]
   23b5e:	b25b      	sxtb	r3, r3
   23b60:	2b00      	cmp	r3, #0
   23b62:	d000      	beq.n	23b66 <m2m_wifi_init+0x72>
   23b64:	e086      	b.n	23c74 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   23b66:	4b4f      	ldr	r3, [pc, #316]	; (23ca4 <m2m_wifi_init+0x1b0>)
   23b68:	0019      	movs	r1, r3
   23b6a:	2001      	movs	r0, #1
   23b6c:	4b4e      	ldr	r3, [pc, #312]	; (23ca8 <m2m_wifi_init+0x1b4>)
   23b6e:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   23b70:	2337      	movs	r3, #55	; 0x37
   23b72:	18fc      	adds	r4, r7, r3
   23b74:	230c      	movs	r3, #12
   23b76:	18fb      	adds	r3, r7, r3
   23b78:	0018      	movs	r0, r3
   23b7a:	4b4c      	ldr	r3, [pc, #304]	; (23cac <m2m_wifi_init+0x1b8>)
   23b7c:	4798      	blx	r3
   23b7e:	0003      	movs	r3, r0
   23b80:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   23b82:	4b4b      	ldr	r3, [pc, #300]	; (23cb0 <m2m_wifi_init+0x1bc>)
   23b84:	0018      	movs	r0, r3
   23b86:	4b4b      	ldr	r3, [pc, #300]	; (23cb4 <m2m_wifi_init+0x1c0>)
   23b88:	4798      	blx	r3
   23b8a:	230c      	movs	r3, #12
   23b8c:	18fb      	adds	r3, r7, r3
   23b8e:	791b      	ldrb	r3, [r3, #4]
   23b90:	0019      	movs	r1, r3
   23b92:	230c      	movs	r3, #12
   23b94:	18fb      	adds	r3, r7, r3
   23b96:	795b      	ldrb	r3, [r3, #5]
   23b98:	001a      	movs	r2, r3
   23b9a:	230c      	movs	r3, #12
   23b9c:	18fb      	adds	r3, r7, r3
   23b9e:	799b      	ldrb	r3, [r3, #6]
   23ba0:	001c      	movs	r4, r3
   23ba2:	230c      	movs	r3, #12
   23ba4:	18fb      	adds	r3, r7, r3
   23ba6:	8c1b      	ldrh	r3, [r3, #32]
   23ba8:	4843      	ldr	r0, [pc, #268]	; (23cb8 <m2m_wifi_init+0x1c4>)
   23baa:	9300      	str	r3, [sp, #0]
   23bac:	0023      	movs	r3, r4
   23bae:	4c41      	ldr	r4, [pc, #260]	; (23cb4 <m2m_wifi_init+0x1c0>)
   23bb0:	47a0      	blx	r4
   23bb2:	4b42      	ldr	r3, [pc, #264]	; (23cbc <m2m_wifi_init+0x1c8>)
   23bb4:	0018      	movs	r0, r3
   23bb6:	4b3f      	ldr	r3, [pc, #252]	; (23cb4 <m2m_wifi_init+0x1c0>)
   23bb8:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   23bba:	4b3d      	ldr	r3, [pc, #244]	; (23cb0 <m2m_wifi_init+0x1bc>)
   23bbc:	0018      	movs	r0, r3
   23bbe:	4b3d      	ldr	r3, [pc, #244]	; (23cb4 <m2m_wifi_init+0x1c0>)
   23bc0:	4798      	blx	r3
   23bc2:	230c      	movs	r3, #12
   23bc4:	18fb      	adds	r3, r7, r3
   23bc6:	3316      	adds	r3, #22
   23bc8:	001a      	movs	r2, r3
   23bca:	230c      	movs	r3, #12
   23bcc:	18fb      	adds	r3, r7, r3
   23bce:	330a      	adds	r3, #10
   23bd0:	0019      	movs	r1, r3
   23bd2:	4b3b      	ldr	r3, [pc, #236]	; (23cc0 <m2m_wifi_init+0x1cc>)
   23bd4:	0018      	movs	r0, r3
   23bd6:	4b37      	ldr	r3, [pc, #220]	; (23cb4 <m2m_wifi_init+0x1c0>)
   23bd8:	4798      	blx	r3
   23bda:	4b38      	ldr	r3, [pc, #224]	; (23cbc <m2m_wifi_init+0x1c8>)
   23bdc:	0018      	movs	r0, r3
   23bde:	4b35      	ldr	r3, [pc, #212]	; (23cb4 <m2m_wifi_init+0x1c0>)
   23be0:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   23be2:	4b33      	ldr	r3, [pc, #204]	; (23cb0 <m2m_wifi_init+0x1bc>)
   23be4:	0018      	movs	r0, r3
   23be6:	4b33      	ldr	r3, [pc, #204]	; (23cb4 <m2m_wifi_init+0x1c0>)
   23be8:	4798      	blx	r3
   23bea:	230c      	movs	r3, #12
   23bec:	18fb      	adds	r3, r7, r3
   23bee:	79db      	ldrb	r3, [r3, #7]
   23bf0:	0019      	movs	r1, r3
   23bf2:	230c      	movs	r3, #12
   23bf4:	18fb      	adds	r3, r7, r3
   23bf6:	7a1b      	ldrb	r3, [r3, #8]
   23bf8:	001a      	movs	r2, r3
   23bfa:	230c      	movs	r3, #12
   23bfc:	18fb      	adds	r3, r7, r3
   23bfe:	7a5b      	ldrb	r3, [r3, #9]
   23c00:	4830      	ldr	r0, [pc, #192]	; (23cc4 <m2m_wifi_init+0x1d0>)
   23c02:	4c2c      	ldr	r4, [pc, #176]	; (23cb4 <m2m_wifi_init+0x1c0>)
   23c04:	47a0      	blx	r4
   23c06:	4b2d      	ldr	r3, [pc, #180]	; (23cbc <m2m_wifi_init+0x1c8>)
   23c08:	0018      	movs	r0, r3
   23c0a:	4b2a      	ldr	r3, [pc, #168]	; (23cb4 <m2m_wifi_init+0x1c0>)
   23c0c:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   23c0e:	4b28      	ldr	r3, [pc, #160]	; (23cb0 <m2m_wifi_init+0x1bc>)
   23c10:	0018      	movs	r0, r3
   23c12:	4b28      	ldr	r3, [pc, #160]	; (23cb4 <m2m_wifi_init+0x1c0>)
   23c14:	4798      	blx	r3
   23c16:	482c      	ldr	r0, [pc, #176]	; (23cc8 <m2m_wifi_init+0x1d4>)
   23c18:	2304      	movs	r3, #4
   23c1a:	2205      	movs	r2, #5
   23c1c:	2113      	movs	r1, #19
   23c1e:	4c25      	ldr	r4, [pc, #148]	; (23cb4 <m2m_wifi_init+0x1c0>)
   23c20:	47a0      	blx	r4
   23c22:	4b26      	ldr	r3, [pc, #152]	; (23cbc <m2m_wifi_init+0x1c8>)
   23c24:	0018      	movs	r0, r3
   23c26:	4b23      	ldr	r3, [pc, #140]	; (23cb4 <m2m_wifi_init+0x1c0>)
   23c28:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   23c2a:	4b21      	ldr	r3, [pc, #132]	; (23cb0 <m2m_wifi_init+0x1bc>)
   23c2c:	0018      	movs	r0, r3
   23c2e:	4b21      	ldr	r3, [pc, #132]	; (23cb4 <m2m_wifi_init+0x1c0>)
   23c30:	4798      	blx	r3
   23c32:	4a26      	ldr	r2, [pc, #152]	; (23ccc <m2m_wifi_init+0x1d8>)
   23c34:	4926      	ldr	r1, [pc, #152]	; (23cd0 <m2m_wifi_init+0x1dc>)
   23c36:	4b27      	ldr	r3, [pc, #156]	; (23cd4 <m2m_wifi_init+0x1e0>)
   23c38:	0018      	movs	r0, r3
   23c3a:	4b1e      	ldr	r3, [pc, #120]	; (23cb4 <m2m_wifi_init+0x1c0>)
   23c3c:	4798      	blx	r3
   23c3e:	4b1f      	ldr	r3, [pc, #124]	; (23cbc <m2m_wifi_init+0x1c8>)
   23c40:	0018      	movs	r0, r3
   23c42:	4b1c      	ldr	r3, [pc, #112]	; (23cb4 <m2m_wifi_init+0x1c0>)
   23c44:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   23c46:	2337      	movs	r3, #55	; 0x37
   23c48:	18fb      	adds	r3, r7, r3
   23c4a:	781b      	ldrb	r3, [r3, #0]
   23c4c:	b25b      	sxtb	r3, r3
   23c4e:	330d      	adds	r3, #13
   23c50:	d117      	bne.n	23c82 <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   23c52:	23e8      	movs	r3, #232	; 0xe8
   23c54:	33ff      	adds	r3, #255	; 0xff
   23c56:	001a      	movs	r2, r3
   23c58:	491f      	ldr	r1, [pc, #124]	; (23cd8 <m2m_wifi_init+0x1e4>)
   23c5a:	4b20      	ldr	r3, [pc, #128]	; (23cdc <m2m_wifi_init+0x1e8>)
   23c5c:	0018      	movs	r0, r3
   23c5e:	4b15      	ldr	r3, [pc, #84]	; (23cb4 <m2m_wifi_init+0x1c0>)
   23c60:	4798      	blx	r3
   23c62:	4b1f      	ldr	r3, [pc, #124]	; (23ce0 <m2m_wifi_init+0x1ec>)
   23c64:	0018      	movs	r0, r3
   23c66:	4b13      	ldr	r3, [pc, #76]	; (23cb4 <m2m_wifi_init+0x1c0>)
   23c68:	4798      	blx	r3
   23c6a:	4b14      	ldr	r3, [pc, #80]	; (23cbc <m2m_wifi_init+0x1c8>)
   23c6c:	0018      	movs	r0, r3
   23c6e:	4b11      	ldr	r3, [pc, #68]	; (23cb4 <m2m_wifi_init+0x1c0>)
   23c70:	4798      	blx	r3
	}

	goto _EXIT0;
   23c72:	e006      	b.n	23c82 <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   23c74:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   23c76:	2000      	movs	r0, #0
   23c78:	4b1a      	ldr	r3, [pc, #104]	; (23ce4 <m2m_wifi_init+0x1f0>)
   23c7a:	4798      	blx	r3
   23c7c:	e002      	b.n	23c84 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   23c7e:	46c0      	nop			; (mov r8, r8)
   23c80:	e000      	b.n	23c84 <m2m_wifi_init+0x190>
	goto _EXIT0;
   23c82:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   23c84:	2337      	movs	r3, #55	; 0x37
   23c86:	18fb      	adds	r3, r7, r3
   23c88:	781b      	ldrb	r3, [r3, #0]
   23c8a:	b25b      	sxtb	r3, r3
}
   23c8c:	0018      	movs	r0, r3
   23c8e:	46bd      	mov	sp, r7
   23c90:	b00f      	add	sp, #60	; 0x3c
   23c92:	bd90      	pop	{r4, r7, pc}
   23c94:	20003ec4 	.word	0x20003ec4
   23c98:	20003ec1 	.word	0x20003ec1
   23c9c:	00024e19 	.word	0x00024e19
   23ca0:	00022b9d 	.word	0x00022b9d
   23ca4:	0002373d 	.word	0x0002373d
   23ca8:	00023681 	.word	0x00023681
   23cac:	00024c4d 	.word	0x00024c4d
   23cb0:	0003ac44 	.word	0x0003ac44
   23cb4:	00020039 	.word	0x00020039
   23cb8:	0003ade8 	.word	0x0003ade8
   23cbc:	0003ac70 	.word	0x0003ac70
   23cc0:	0003ae10 	.word	0x0003ae10
   23cc4:	0003ae2c 	.word	0x0003ae2c
   23cc8:	0003ae50 	.word	0x0003ae50
   23ccc:	0003ae68 	.word	0x0003ae68
   23cd0:	0003ae74 	.word	0x0003ae74
   23cd4:	0003ae80 	.word	0x0003ae80
   23cd8:	0003b01c 	.word	0x0003b01c
   23cdc:	0003ac74 	.word	0x0003ac74
   23ce0:	0003ae98 	.word	0x0003ae98
   23ce4:	00024fa9 	.word	0x00024fa9

00023ce8 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   23ce8:	b580      	push	{r7, lr}
   23cea:	b082      	sub	sp, #8
   23cec:	af00      	add	r7, sp, #0
   23cee:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   23cf0:	4b03      	ldr	r3, [pc, #12]	; (23d00 <m2m_wifi_handle_events+0x18>)
   23cf2:	4798      	blx	r3
   23cf4:	0003      	movs	r3, r0
}
   23cf6:	0018      	movs	r0, r3
   23cf8:	46bd      	mov	sp, r7
   23cfa:	b002      	add	sp, #8
   23cfc:	bd80      	pop	{r7, pc}
   23cfe:	46c0      	nop			; (mov r8, r8)
   23d00:	00023461 	.word	0x00023461

00023d04 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   23d04:	b590      	push	{r4, r7, lr}
   23d06:	b087      	sub	sp, #28
   23d08:	af02      	add	r7, sp, #8
   23d0a:	60f8      	str	r0, [r7, #12]
   23d0c:	0008      	movs	r0, r1
   23d0e:	0011      	movs	r1, r2
   23d10:	607b      	str	r3, [r7, #4]
   23d12:	230b      	movs	r3, #11
   23d14:	18fb      	adds	r3, r7, r3
   23d16:	1c02      	adds	r2, r0, #0
   23d18:	701a      	strb	r2, [r3, #0]
   23d1a:	230a      	movs	r3, #10
   23d1c:	18fb      	adds	r3, r7, r3
   23d1e:	1c0a      	adds	r2, r1, #0
   23d20:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   23d22:	687c      	ldr	r4, [r7, #4]
   23d24:	230a      	movs	r3, #10
   23d26:	18fb      	adds	r3, r7, r3
   23d28:	781a      	ldrb	r2, [r3, #0]
   23d2a:	230b      	movs	r3, #11
   23d2c:	18fb      	adds	r3, r7, r3
   23d2e:	7819      	ldrb	r1, [r3, #0]
   23d30:	68f8      	ldr	r0, [r7, #12]
   23d32:	2300      	movs	r3, #0
   23d34:	9301      	str	r3, [sp, #4]
   23d36:	2320      	movs	r3, #32
   23d38:	18fb      	adds	r3, r7, r3
   23d3a:	881b      	ldrh	r3, [r3, #0]
   23d3c:	9300      	str	r3, [sp, #0]
   23d3e:	0023      	movs	r3, r4
   23d40:	4c03      	ldr	r4, [pc, #12]	; (23d50 <m2m_wifi_connect+0x4c>)
   23d42:	47a0      	blx	r4
   23d44:	0003      	movs	r3, r0
}
   23d46:	0018      	movs	r0, r3
   23d48:	46bd      	mov	sp, r7
   23d4a:	b005      	add	sp, #20
   23d4c:	bd90      	pop	{r4, r7, pc}
   23d4e:	46c0      	nop			; (mov r8, r8)
   23d50:	00023d55 	.word	0x00023d55

00023d54 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   23d54:	b5b0      	push	{r4, r5, r7, lr}
   23d56:	b0aa      	sub	sp, #168	; 0xa8
   23d58:	af04      	add	r7, sp, #16
   23d5a:	60f8      	str	r0, [r7, #12]
   23d5c:	0008      	movs	r0, r1
   23d5e:	0011      	movs	r1, r2
   23d60:	607b      	str	r3, [r7, #4]
   23d62:	230b      	movs	r3, #11
   23d64:	18fb      	adds	r3, r7, r3
   23d66:	1c02      	adds	r2, r0, #0
   23d68:	701a      	strb	r2, [r3, #0]
   23d6a:	230a      	movs	r3, #10
   23d6c:	18fb      	adds	r3, r7, r3
   23d6e:	1c0a      	adds	r2, r1, #0
   23d70:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   23d72:	2397      	movs	r3, #151	; 0x97
   23d74:	18fb      	adds	r3, r7, r3
   23d76:	2200      	movs	r2, #0
   23d78:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   23d7a:	230a      	movs	r3, #10
   23d7c:	18fb      	adds	r3, r7, r3
   23d7e:	781b      	ldrb	r3, [r3, #0]
   23d80:	2b01      	cmp	r3, #1
   23d82:	d100      	bne.n	23d86 <m2m_wifi_connect_sc+0x32>
   23d84:	e085      	b.n	23e92 <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   23d86:	687b      	ldr	r3, [r7, #4]
   23d88:	2b00      	cmp	r3, #0
   23d8a:	d112      	bne.n	23db2 <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   23d8c:	4ad8      	ldr	r2, [pc, #864]	; (240f0 <m2m_wifi_connect_sc+0x39c>)
   23d8e:	49d9      	ldr	r1, [pc, #868]	; (240f4 <m2m_wifi_connect_sc+0x3a0>)
   23d90:	4bd9      	ldr	r3, [pc, #868]	; (240f8 <m2m_wifi_connect_sc+0x3a4>)
   23d92:	0018      	movs	r0, r3
   23d94:	4bd9      	ldr	r3, [pc, #868]	; (240fc <m2m_wifi_connect_sc+0x3a8>)
   23d96:	4798      	blx	r3
   23d98:	4bd9      	ldr	r3, [pc, #868]	; (24100 <m2m_wifi_connect_sc+0x3ac>)
   23d9a:	0018      	movs	r0, r3
   23d9c:	4bd7      	ldr	r3, [pc, #860]	; (240fc <m2m_wifi_connect_sc+0x3a8>)
   23d9e:	4798      	blx	r3
   23da0:	4bd8      	ldr	r3, [pc, #864]	; (24104 <m2m_wifi_connect_sc+0x3b0>)
   23da2:	0018      	movs	r0, r3
   23da4:	4bd5      	ldr	r3, [pc, #852]	; (240fc <m2m_wifi_connect_sc+0x3a8>)
   23da6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   23da8:	2397      	movs	r3, #151	; 0x97
   23daa:	18fb      	adds	r3, r7, r3
   23dac:	22f4      	movs	r2, #244	; 0xf4
   23dae:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   23db0:	e1f9      	b.n	241a6 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   23db2:	230a      	movs	r3, #10
   23db4:	18fb      	adds	r3, r7, r3
   23db6:	781b      	ldrb	r3, [r3, #0]
   23db8:	2b02      	cmp	r3, #2
   23dba:	d16a      	bne.n	23e92 <m2m_wifi_connect_sc+0x13e>
   23dbc:	687b      	ldr	r3, [r7, #4]
   23dbe:	0018      	movs	r0, r3
   23dc0:	4bd1      	ldr	r3, [pc, #836]	; (24108 <m2m_wifi_connect_sc+0x3b4>)
   23dc2:	4798      	blx	r3
   23dc4:	0003      	movs	r3, r0
   23dc6:	2b40      	cmp	r3, #64	; 0x40
   23dc8:	d163      	bne.n	23e92 <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   23dca:	2396      	movs	r3, #150	; 0x96
   23dcc:	18fb      	adds	r3, r7, r3
   23dce:	2200      	movs	r2, #0
   23dd0:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   23dd2:	687b      	ldr	r3, [r7, #4]
   23dd4:	2290      	movs	r2, #144	; 0x90
   23dd6:	18ba      	adds	r2, r7, r2
   23dd8:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   23dda:	e055      	b.n	23e88 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   23ddc:	2396      	movs	r3, #150	; 0x96
   23dde:	18fb      	adds	r3, r7, r3
   23de0:	781b      	ldrb	r3, [r3, #0]
   23de2:	2290      	movs	r2, #144	; 0x90
   23de4:	18ba      	adds	r2, r7, r2
   23de6:	6812      	ldr	r2, [r2, #0]
   23de8:	18d3      	adds	r3, r2, r3
   23dea:	781b      	ldrb	r3, [r3, #0]
   23dec:	2b2f      	cmp	r3, #47	; 0x2f
   23dee:	d931      	bls.n	23e54 <m2m_wifi_connect_sc+0x100>
   23df0:	2396      	movs	r3, #150	; 0x96
   23df2:	18fb      	adds	r3, r7, r3
   23df4:	781b      	ldrb	r3, [r3, #0]
   23df6:	2290      	movs	r2, #144	; 0x90
   23df8:	18ba      	adds	r2, r7, r2
   23dfa:	6812      	ldr	r2, [r2, #0]
   23dfc:	18d3      	adds	r3, r2, r3
   23dfe:	781b      	ldrb	r3, [r3, #0]
   23e00:	2b39      	cmp	r3, #57	; 0x39
   23e02:	d909      	bls.n	23e18 <m2m_wifi_connect_sc+0xc4>
   23e04:	2396      	movs	r3, #150	; 0x96
   23e06:	18fb      	adds	r3, r7, r3
   23e08:	781b      	ldrb	r3, [r3, #0]
   23e0a:	2290      	movs	r2, #144	; 0x90
   23e0c:	18ba      	adds	r2, r7, r2
   23e0e:	6812      	ldr	r2, [r2, #0]
   23e10:	18d3      	adds	r3, r2, r3
   23e12:	781b      	ldrb	r3, [r3, #0]
   23e14:	2b40      	cmp	r3, #64	; 0x40
   23e16:	d91d      	bls.n	23e54 <m2m_wifi_connect_sc+0x100>
   23e18:	2396      	movs	r3, #150	; 0x96
   23e1a:	18fb      	adds	r3, r7, r3
   23e1c:	781b      	ldrb	r3, [r3, #0]
   23e1e:	2290      	movs	r2, #144	; 0x90
   23e20:	18ba      	adds	r2, r7, r2
   23e22:	6812      	ldr	r2, [r2, #0]
   23e24:	18d3      	adds	r3, r2, r3
   23e26:	781b      	ldrb	r3, [r3, #0]
   23e28:	2b46      	cmp	r3, #70	; 0x46
   23e2a:	d909      	bls.n	23e40 <m2m_wifi_connect_sc+0xec>
   23e2c:	2396      	movs	r3, #150	; 0x96
   23e2e:	18fb      	adds	r3, r7, r3
   23e30:	781b      	ldrb	r3, [r3, #0]
   23e32:	2290      	movs	r2, #144	; 0x90
   23e34:	18ba      	adds	r2, r7, r2
   23e36:	6812      	ldr	r2, [r2, #0]
   23e38:	18d3      	adds	r3, r2, r3
   23e3a:	781b      	ldrb	r3, [r3, #0]
   23e3c:	2b60      	cmp	r3, #96	; 0x60
   23e3e:	d909      	bls.n	23e54 <m2m_wifi_connect_sc+0x100>
   23e40:	2396      	movs	r3, #150	; 0x96
   23e42:	18fb      	adds	r3, r7, r3
   23e44:	781b      	ldrb	r3, [r3, #0]
   23e46:	2290      	movs	r2, #144	; 0x90
   23e48:	18ba      	adds	r2, r7, r2
   23e4a:	6812      	ldr	r2, [r2, #0]
   23e4c:	18d3      	adds	r3, r2, r3
   23e4e:	781b      	ldrb	r3, [r3, #0]
   23e50:	2b66      	cmp	r3, #102	; 0x66
   23e52:	d912      	bls.n	23e7a <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   23e54:	4aad      	ldr	r2, [pc, #692]	; (2410c <m2m_wifi_connect_sc+0x3b8>)
   23e56:	49a7      	ldr	r1, [pc, #668]	; (240f4 <m2m_wifi_connect_sc+0x3a0>)
   23e58:	4ba7      	ldr	r3, [pc, #668]	; (240f8 <m2m_wifi_connect_sc+0x3a4>)
   23e5a:	0018      	movs	r0, r3
   23e5c:	4ba7      	ldr	r3, [pc, #668]	; (240fc <m2m_wifi_connect_sc+0x3a8>)
   23e5e:	4798      	blx	r3
   23e60:	4bab      	ldr	r3, [pc, #684]	; (24110 <m2m_wifi_connect_sc+0x3bc>)
   23e62:	0018      	movs	r0, r3
   23e64:	4ba5      	ldr	r3, [pc, #660]	; (240fc <m2m_wifi_connect_sc+0x3a8>)
   23e66:	4798      	blx	r3
   23e68:	4ba6      	ldr	r3, [pc, #664]	; (24104 <m2m_wifi_connect_sc+0x3b0>)
   23e6a:	0018      	movs	r0, r3
   23e6c:	4ba3      	ldr	r3, [pc, #652]	; (240fc <m2m_wifi_connect_sc+0x3a8>)
   23e6e:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   23e70:	2397      	movs	r3, #151	; 0x97
   23e72:	18fb      	adds	r3, r7, r3
   23e74:	22f4      	movs	r2, #244	; 0xf4
   23e76:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   23e78:	e195      	b.n	241a6 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   23e7a:	2396      	movs	r3, #150	; 0x96
   23e7c:	18fb      	adds	r3, r7, r3
   23e7e:	781a      	ldrb	r2, [r3, #0]
   23e80:	2396      	movs	r3, #150	; 0x96
   23e82:	18fb      	adds	r3, r7, r3
   23e84:	3201      	adds	r2, #1
   23e86:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   23e88:	2396      	movs	r3, #150	; 0x96
   23e8a:	18fb      	adds	r3, r7, r3
   23e8c:	781b      	ldrb	r3, [r3, #0]
   23e8e:	2b3f      	cmp	r3, #63	; 0x3f
   23e90:	d9a4      	bls.n	23ddc <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   23e92:	230b      	movs	r3, #11
   23e94:	18fb      	adds	r3, r7, r3
   23e96:	781b      	ldrb	r3, [r3, #0]
   23e98:	2b00      	cmp	r3, #0
   23e9a:	d004      	beq.n	23ea6 <m2m_wifi_connect_sc+0x152>
   23e9c:	230b      	movs	r3, #11
   23e9e:	18fb      	adds	r3, r7, r3
   23ea0:	781b      	ldrb	r3, [r3, #0]
   23ea2:	2b20      	cmp	r3, #32
   23ea4:	d913      	bls.n	23ece <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   23ea6:	238c      	movs	r3, #140	; 0x8c
   23ea8:	009a      	lsls	r2, r3, #2
   23eaa:	4992      	ldr	r1, [pc, #584]	; (240f4 <m2m_wifi_connect_sc+0x3a0>)
   23eac:	4b92      	ldr	r3, [pc, #584]	; (240f8 <m2m_wifi_connect_sc+0x3a4>)
   23eae:	0018      	movs	r0, r3
   23eb0:	4b92      	ldr	r3, [pc, #584]	; (240fc <m2m_wifi_connect_sc+0x3a8>)
   23eb2:	4798      	blx	r3
   23eb4:	4b97      	ldr	r3, [pc, #604]	; (24114 <m2m_wifi_connect_sc+0x3c0>)
   23eb6:	0018      	movs	r0, r3
   23eb8:	4b90      	ldr	r3, [pc, #576]	; (240fc <m2m_wifi_connect_sc+0x3a8>)
   23eba:	4798      	blx	r3
   23ebc:	4b91      	ldr	r3, [pc, #580]	; (24104 <m2m_wifi_connect_sc+0x3b0>)
   23ebe:	0018      	movs	r0, r3
   23ec0:	4b8e      	ldr	r3, [pc, #568]	; (240fc <m2m_wifi_connect_sc+0x3a8>)
   23ec2:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   23ec4:	2397      	movs	r3, #151	; 0x97
   23ec6:	18fb      	adds	r3, r7, r3
   23ec8:	22f4      	movs	r2, #244	; 0xf4
   23eca:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   23ecc:	e16b      	b.n	241a6 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   23ece:	23a8      	movs	r3, #168	; 0xa8
   23ed0:	18fb      	adds	r3, r7, r3
   23ed2:	881b      	ldrh	r3, [r3, #0]
   23ed4:	2b00      	cmp	r3, #0
   23ed6:	d004      	beq.n	23ee2 <m2m_wifi_connect_sc+0x18e>
   23ed8:	23a8      	movs	r3, #168	; 0xa8
   23eda:	18fb      	adds	r3, r7, r3
   23edc:	881b      	ldrh	r3, [r3, #0]
   23ede:	2b0e      	cmp	r3, #14
   23ee0:	d917      	bls.n	23f12 <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   23ee2:	23a8      	movs	r3, #168	; 0xa8
   23ee4:	18fb      	adds	r3, r7, r3
   23ee6:	881b      	ldrh	r3, [r3, #0]
   23ee8:	2bff      	cmp	r3, #255	; 0xff
   23eea:	d012      	beq.n	23f12 <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   23eec:	4a8a      	ldr	r2, [pc, #552]	; (24118 <m2m_wifi_connect_sc+0x3c4>)
   23eee:	4981      	ldr	r1, [pc, #516]	; (240f4 <m2m_wifi_connect_sc+0x3a0>)
   23ef0:	4b81      	ldr	r3, [pc, #516]	; (240f8 <m2m_wifi_connect_sc+0x3a4>)
   23ef2:	0018      	movs	r0, r3
   23ef4:	4b81      	ldr	r3, [pc, #516]	; (240fc <m2m_wifi_connect_sc+0x3a8>)
   23ef6:	4798      	blx	r3
   23ef8:	4b88      	ldr	r3, [pc, #544]	; (2411c <m2m_wifi_connect_sc+0x3c8>)
   23efa:	0018      	movs	r0, r3
   23efc:	4b7f      	ldr	r3, [pc, #508]	; (240fc <m2m_wifi_connect_sc+0x3a8>)
   23efe:	4798      	blx	r3
   23f00:	4b80      	ldr	r3, [pc, #512]	; (24104 <m2m_wifi_connect_sc+0x3b0>)
   23f02:	0018      	movs	r0, r3
   23f04:	4b7d      	ldr	r3, [pc, #500]	; (240fc <m2m_wifi_connect_sc+0x3a8>)
   23f06:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   23f08:	2397      	movs	r3, #151	; 0x97
   23f0a:	18fb      	adds	r3, r7, r3
   23f0c:	22f4      	movs	r2, #244	; 0xf4
   23f0e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   23f10:	e149      	b.n	241a6 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   23f12:	230b      	movs	r3, #11
   23f14:	18fb      	adds	r3, r7, r3
   23f16:	781a      	ldrb	r2, [r3, #0]
   23f18:	68f9      	ldr	r1, [r7, #12]
   23f1a:	2314      	movs	r3, #20
   23f1c:	18fb      	adds	r3, r7, r3
   23f1e:	3346      	adds	r3, #70	; 0x46
   23f20:	0018      	movs	r0, r3
   23f22:	4b7f      	ldr	r3, [pc, #508]	; (24120 <m2m_wifi_connect_sc+0x3cc>)
   23f24:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   23f26:	230b      	movs	r3, #11
   23f28:	18fb      	adds	r3, r7, r3
   23f2a:	781b      	ldrb	r3, [r3, #0]
   23f2c:	2214      	movs	r2, #20
   23f2e:	18ba      	adds	r2, r7, r2
   23f30:	2146      	movs	r1, #70	; 0x46
   23f32:	18d3      	adds	r3, r2, r3
   23f34:	185b      	adds	r3, r3, r1
   23f36:	2200      	movs	r2, #0
   23f38:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   23f3a:	2314      	movs	r3, #20
   23f3c:	18fb      	adds	r3, r7, r3
   23f3e:	22a8      	movs	r2, #168	; 0xa8
   23f40:	18ba      	adds	r2, r7, r2
   23f42:	2144      	movs	r1, #68	; 0x44
   23f44:	8812      	ldrh	r2, [r2, #0]
   23f46:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   23f48:	23ac      	movs	r3, #172	; 0xac
   23f4a:	18fb      	adds	r3, r7, r3
   23f4c:	781b      	ldrb	r3, [r3, #0]
   23f4e:	1e5a      	subs	r2, r3, #1
   23f50:	4193      	sbcs	r3, r2
   23f52:	b2db      	uxtb	r3, r3
   23f54:	0019      	movs	r1, r3
   23f56:	2314      	movs	r3, #20
   23f58:	18fb      	adds	r3, r7, r3
   23f5a:	2267      	movs	r2, #103	; 0x67
   23f5c:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   23f5e:	2314      	movs	r3, #20
   23f60:	18fb      	adds	r3, r7, r3
   23f62:	228c      	movs	r2, #140	; 0x8c
   23f64:	18ba      	adds	r2, r7, r2
   23f66:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   23f68:	238c      	movs	r3, #140	; 0x8c
   23f6a:	18fb      	adds	r3, r7, r3
   23f6c:	681b      	ldr	r3, [r3, #0]
   23f6e:	220a      	movs	r2, #10
   23f70:	18ba      	adds	r2, r7, r2
   23f72:	2141      	movs	r1, #65	; 0x41
   23f74:	7812      	ldrb	r2, [r2, #0]
   23f76:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   23f78:	230a      	movs	r3, #10
   23f7a:	18fb      	adds	r3, r7, r3
   23f7c:	781b      	ldrb	r3, [r3, #0]
   23f7e:	2b03      	cmp	r3, #3
   23f80:	d000      	beq.n	23f84 <m2m_wifi_connect_sc+0x230>
   23f82:	e07d      	b.n	24080 <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   23f84:	687b      	ldr	r3, [r7, #4]
   23f86:	2288      	movs	r2, #136	; 0x88
   23f88:	18ba      	adds	r2, r7, r2
   23f8a:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   23f8c:	238c      	movs	r3, #140	; 0x8c
   23f8e:	18fb      	adds	r3, r7, r3
   23f90:	681b      	ldr	r3, [r3, #0]
   23f92:	2284      	movs	r2, #132	; 0x84
   23f94:	18ba      	adds	r2, r7, r2
   23f96:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   23f98:	2388      	movs	r3, #136	; 0x88
   23f9a:	18fb      	adds	r3, r7, r3
   23f9c:	681b      	ldr	r3, [r3, #0]
   23f9e:	781b      	ldrb	r3, [r3, #0]
   23fa0:	3b01      	subs	r3, #1
   23fa2:	b2da      	uxtb	r2, r3
   23fa4:	2384      	movs	r3, #132	; 0x84
   23fa6:	18fb      	adds	r3, r7, r3
   23fa8:	681b      	ldr	r3, [r3, #0]
   23faa:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   23fac:	2384      	movs	r3, #132	; 0x84
   23fae:	18fb      	adds	r3, r7, r3
   23fb0:	681b      	ldr	r3, [r3, #0]
   23fb2:	781b      	ldrb	r3, [r3, #0]
   23fb4:	2b03      	cmp	r3, #3
   23fb6:	d919      	bls.n	23fec <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   23fb8:	2394      	movs	r3, #148	; 0x94
   23fba:	009a      	lsls	r2, r3, #2
   23fbc:	494d      	ldr	r1, [pc, #308]	; (240f4 <m2m_wifi_connect_sc+0x3a0>)
   23fbe:	4b4e      	ldr	r3, [pc, #312]	; (240f8 <m2m_wifi_connect_sc+0x3a4>)
   23fc0:	0018      	movs	r0, r3
   23fc2:	4b4e      	ldr	r3, [pc, #312]	; (240fc <m2m_wifi_connect_sc+0x3a8>)
   23fc4:	4798      	blx	r3
   23fc6:	2384      	movs	r3, #132	; 0x84
   23fc8:	18fb      	adds	r3, r7, r3
   23fca:	681b      	ldr	r3, [r3, #0]
   23fcc:	781b      	ldrb	r3, [r3, #0]
   23fce:	001a      	movs	r2, r3
   23fd0:	4b54      	ldr	r3, [pc, #336]	; (24124 <m2m_wifi_connect_sc+0x3d0>)
   23fd2:	0011      	movs	r1, r2
   23fd4:	0018      	movs	r0, r3
   23fd6:	4b49      	ldr	r3, [pc, #292]	; (240fc <m2m_wifi_connect_sc+0x3a8>)
   23fd8:	4798      	blx	r3
   23fda:	4b4a      	ldr	r3, [pc, #296]	; (24104 <m2m_wifi_connect_sc+0x3b0>)
   23fdc:	0018      	movs	r0, r3
   23fde:	4b47      	ldr	r3, [pc, #284]	; (240fc <m2m_wifi_connect_sc+0x3a8>)
   23fe0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   23fe2:	2397      	movs	r3, #151	; 0x97
   23fe4:	18fb      	adds	r3, r7, r3
   23fe6:	22f4      	movs	r2, #244	; 0xf4
   23fe8:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   23fea:	e0dc      	b.n	241a6 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   23fec:	2388      	movs	r3, #136	; 0x88
   23fee:	18fb      	adds	r3, r7, r3
   23ff0:	681b      	ldr	r3, [r3, #0]
   23ff2:	785b      	ldrb	r3, [r3, #1]
   23ff4:	3b01      	subs	r3, #1
   23ff6:	b2da      	uxtb	r2, r3
   23ff8:	2384      	movs	r3, #132	; 0x84
   23ffa:	18fb      	adds	r3, r7, r3
   23ffc:	681b      	ldr	r3, [r3, #0]
   23ffe:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   24000:	2384      	movs	r3, #132	; 0x84
   24002:	18fb      	adds	r3, r7, r3
   24004:	681b      	ldr	r3, [r3, #0]
   24006:	785b      	ldrb	r3, [r3, #1]
   24008:	2b0a      	cmp	r3, #10
   2400a:	d01e      	beq.n	2404a <m2m_wifi_connect_sc+0x2f6>
   2400c:	2384      	movs	r3, #132	; 0x84
   2400e:	18fb      	adds	r3, r7, r3
   24010:	681b      	ldr	r3, [r3, #0]
   24012:	785b      	ldrb	r3, [r3, #1]
   24014:	2b1a      	cmp	r3, #26
   24016:	d018      	beq.n	2404a <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   24018:	4a43      	ldr	r2, [pc, #268]	; (24128 <m2m_wifi_connect_sc+0x3d4>)
   2401a:	4936      	ldr	r1, [pc, #216]	; (240f4 <m2m_wifi_connect_sc+0x3a0>)
   2401c:	4b36      	ldr	r3, [pc, #216]	; (240f8 <m2m_wifi_connect_sc+0x3a4>)
   2401e:	0018      	movs	r0, r3
   24020:	4b36      	ldr	r3, [pc, #216]	; (240fc <m2m_wifi_connect_sc+0x3a8>)
   24022:	4798      	blx	r3
   24024:	2384      	movs	r3, #132	; 0x84
   24026:	18fb      	adds	r3, r7, r3
   24028:	681b      	ldr	r3, [r3, #0]
   2402a:	785b      	ldrb	r3, [r3, #1]
   2402c:	001a      	movs	r2, r3
   2402e:	4b3f      	ldr	r3, [pc, #252]	; (2412c <m2m_wifi_connect_sc+0x3d8>)
   24030:	0011      	movs	r1, r2
   24032:	0018      	movs	r0, r3
   24034:	4b31      	ldr	r3, [pc, #196]	; (240fc <m2m_wifi_connect_sc+0x3a8>)
   24036:	4798      	blx	r3
   24038:	4b32      	ldr	r3, [pc, #200]	; (24104 <m2m_wifi_connect_sc+0x3b0>)
   2403a:	0018      	movs	r0, r3
   2403c:	4b2f      	ldr	r3, [pc, #188]	; (240fc <m2m_wifi_connect_sc+0x3a8>)
   2403e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   24040:	2397      	movs	r3, #151	; 0x97
   24042:	18fb      	adds	r3, r7, r3
   24044:	22f4      	movs	r2, #244	; 0xf4
   24046:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   24048:	e0ad      	b.n	241a6 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   2404a:	2384      	movs	r3, #132	; 0x84
   2404c:	18fb      	adds	r3, r7, r3
   2404e:	681b      	ldr	r3, [r3, #0]
   24050:	1c98      	adds	r0, r3, #2
   24052:	2388      	movs	r3, #136	; 0x88
   24054:	18fb      	adds	r3, r7, r3
   24056:	681b      	ldr	r3, [r3, #0]
   24058:	1c99      	adds	r1, r3, #2
   2405a:	2388      	movs	r3, #136	; 0x88
   2405c:	18fb      	adds	r3, r7, r3
   2405e:	681b      	ldr	r3, [r3, #0]
   24060:	785b      	ldrb	r3, [r3, #1]
   24062:	001a      	movs	r2, r3
   24064:	4b2e      	ldr	r3, [pc, #184]	; (24120 <m2m_wifi_connect_sc+0x3cc>)
   24066:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   24068:	2388      	movs	r3, #136	; 0x88
   2406a:	18fb      	adds	r3, r7, r3
   2406c:	681b      	ldr	r3, [r3, #0]
   2406e:	785b      	ldrb	r3, [r3, #1]
   24070:	001a      	movs	r2, r3
   24072:	2384      	movs	r3, #132	; 0x84
   24074:	18fb      	adds	r3, r7, r3
   24076:	681b      	ldr	r3, [r3, #0]
   24078:	189b      	adds	r3, r3, r2
   2407a:	2200      	movs	r2, #0
   2407c:	709a      	strb	r2, [r3, #2]
   2407e:	e081      	b.n	24184 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   24080:	230a      	movs	r3, #10
   24082:	18fb      	adds	r3, r7, r3
   24084:	781b      	ldrb	r3, [r3, #0]
   24086:	2b02      	cmp	r3, #2
   24088:	d156      	bne.n	24138 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   2408a:	2382      	movs	r3, #130	; 0x82
   2408c:	18fc      	adds	r4, r7, r3
   2408e:	687b      	ldr	r3, [r7, #4]
   24090:	0018      	movs	r0, r3
   24092:	4b1d      	ldr	r3, [pc, #116]	; (24108 <m2m_wifi_connect_sc+0x3b4>)
   24094:	4798      	blx	r3
   24096:	0003      	movs	r3, r0
   24098:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   2409a:	2382      	movs	r3, #130	; 0x82
   2409c:	18fb      	adds	r3, r7, r3
   2409e:	881b      	ldrh	r3, [r3, #0]
   240a0:	2b00      	cmp	r3, #0
   240a2:	d004      	beq.n	240ae <m2m_wifi_connect_sc+0x35a>
   240a4:	2382      	movs	r3, #130	; 0x82
   240a6:	18fb      	adds	r3, r7, r3
   240a8:	881b      	ldrh	r3, [r3, #0]
   240aa:	2b40      	cmp	r3, #64	; 0x40
   240ac:	d912      	bls.n	240d4 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   240ae:	4a20      	ldr	r2, [pc, #128]	; (24130 <m2m_wifi_connect_sc+0x3dc>)
   240b0:	4910      	ldr	r1, [pc, #64]	; (240f4 <m2m_wifi_connect_sc+0x3a0>)
   240b2:	4b11      	ldr	r3, [pc, #68]	; (240f8 <m2m_wifi_connect_sc+0x3a4>)
   240b4:	0018      	movs	r0, r3
   240b6:	4b11      	ldr	r3, [pc, #68]	; (240fc <m2m_wifi_connect_sc+0x3a8>)
   240b8:	4798      	blx	r3
   240ba:	4b1e      	ldr	r3, [pc, #120]	; (24134 <m2m_wifi_connect_sc+0x3e0>)
   240bc:	0018      	movs	r0, r3
   240be:	4b0f      	ldr	r3, [pc, #60]	; (240fc <m2m_wifi_connect_sc+0x3a8>)
   240c0:	4798      	blx	r3
   240c2:	4b10      	ldr	r3, [pc, #64]	; (24104 <m2m_wifi_connect_sc+0x3b0>)
   240c4:	0018      	movs	r0, r3
   240c6:	4b0d      	ldr	r3, [pc, #52]	; (240fc <m2m_wifi_connect_sc+0x3a8>)
   240c8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   240ca:	2397      	movs	r3, #151	; 0x97
   240cc:	18fb      	adds	r3, r7, r3
   240ce:	22f4      	movs	r2, #244	; 0xf4
   240d0:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   240d2:	e068      	b.n	241a6 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   240d4:	238c      	movs	r3, #140	; 0x8c
   240d6:	18fb      	adds	r3, r7, r3
   240d8:	6818      	ldr	r0, [r3, #0]
   240da:	2382      	movs	r3, #130	; 0x82
   240dc:	18fb      	adds	r3, r7, r3
   240de:	881b      	ldrh	r3, [r3, #0]
   240e0:	3301      	adds	r3, #1
   240e2:	001a      	movs	r2, r3
   240e4:	687b      	ldr	r3, [r7, #4]
   240e6:	0019      	movs	r1, r3
   240e8:	4b0d      	ldr	r3, [pc, #52]	; (24120 <m2m_wifi_connect_sc+0x3cc>)
   240ea:	4798      	blx	r3
   240ec:	e04a      	b.n	24184 <m2m_wifi_connect_sc+0x430>
   240ee:	46c0      	nop			; (mov r8, r8)
   240f0:	0000021a 	.word	0x0000021a
   240f4:	0003b02c 	.word	0x0003b02c
   240f8:	0003ac74 	.word	0x0003ac74
   240fc:	00020039 	.word	0x00020039
   24100:	0003aeb4 	.word	0x0003aeb4
   24104:	0003ac70 	.word	0x0003ac70
   24108:	000229c3 	.word	0x000229c3
   2410c:	00000226 	.word	0x00000226
   24110:	0003aec8 	.word	0x0003aec8
   24114:	0003aed8 	.word	0x0003aed8
   24118:	00000239 	.word	0x00000239
   2411c:	0003aeec 	.word	0x0003aeec
   24120:	00022949 	.word	0x00022949
   24124:	0003aef8 	.word	0x0003aef8
   24128:	00000257 	.word	0x00000257
   2412c:	0003af14 	.word	0x0003af14
   24130:	00000266 	.word	0x00000266
   24134:	0003af30 	.word	0x0003af30
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   24138:	230a      	movs	r3, #10
   2413a:	18fb      	adds	r3, r7, r3
   2413c:	781b      	ldrb	r3, [r3, #0]
   2413e:	2b04      	cmp	r3, #4
   24140:	d108      	bne.n	24154 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   24142:	238c      	movs	r3, #140	; 0x8c
   24144:	18fb      	adds	r3, r7, r3
   24146:	681b      	ldr	r3, [r3, #0]
   24148:	6879      	ldr	r1, [r7, #4]
   2414a:	223e      	movs	r2, #62	; 0x3e
   2414c:	0018      	movs	r0, r3
   2414e:	4b1a      	ldr	r3, [pc, #104]	; (241b8 <m2m_wifi_connect_sc+0x464>)
   24150:	4798      	blx	r3
   24152:	e017      	b.n	24184 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   24154:	230a      	movs	r3, #10
   24156:	18fb      	adds	r3, r7, r3
   24158:	781b      	ldrb	r3, [r3, #0]
   2415a:	2b01      	cmp	r3, #1
   2415c:	d012      	beq.n	24184 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   2415e:	4a17      	ldr	r2, [pc, #92]	; (241bc <m2m_wifi_connect_sc+0x468>)
   24160:	4917      	ldr	r1, [pc, #92]	; (241c0 <m2m_wifi_connect_sc+0x46c>)
   24162:	4b18      	ldr	r3, [pc, #96]	; (241c4 <m2m_wifi_connect_sc+0x470>)
   24164:	0018      	movs	r0, r3
   24166:	4b18      	ldr	r3, [pc, #96]	; (241c8 <m2m_wifi_connect_sc+0x474>)
   24168:	4798      	blx	r3
   2416a:	4b18      	ldr	r3, [pc, #96]	; (241cc <m2m_wifi_connect_sc+0x478>)
   2416c:	0018      	movs	r0, r3
   2416e:	4b16      	ldr	r3, [pc, #88]	; (241c8 <m2m_wifi_connect_sc+0x474>)
   24170:	4798      	blx	r3
   24172:	4b17      	ldr	r3, [pc, #92]	; (241d0 <m2m_wifi_connect_sc+0x47c>)
   24174:	0018      	movs	r0, r3
   24176:	4b14      	ldr	r3, [pc, #80]	; (241c8 <m2m_wifi_connect_sc+0x474>)
   24178:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   2417a:	2397      	movs	r3, #151	; 0x97
   2417c:	18fb      	adds	r3, r7, r3
   2417e:	22f4      	movs	r2, #244	; 0xf4
   24180:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   24182:	e010      	b.n	241a6 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   24184:	2397      	movs	r3, #151	; 0x97
   24186:	18fc      	adds	r4, r7, r3
   24188:	2314      	movs	r3, #20
   2418a:	18fa      	adds	r2, r7, r3
   2418c:	2300      	movs	r3, #0
   2418e:	9302      	str	r3, [sp, #8]
   24190:	2300      	movs	r3, #0
   24192:	9301      	str	r3, [sp, #4]
   24194:	2300      	movs	r3, #0
   24196:	9300      	str	r3, [sp, #0]
   24198:	236c      	movs	r3, #108	; 0x6c
   2419a:	2128      	movs	r1, #40	; 0x28
   2419c:	2001      	movs	r0, #1
   2419e:	4d0d      	ldr	r5, [pc, #52]	; (241d4 <m2m_wifi_connect_sc+0x480>)
   241a0:	47a8      	blx	r5
   241a2:	0003      	movs	r3, r0
   241a4:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   241a6:	2397      	movs	r3, #151	; 0x97
   241a8:	18fb      	adds	r3, r7, r3
   241aa:	781b      	ldrb	r3, [r3, #0]
   241ac:	b25b      	sxtb	r3, r3
}
   241ae:	0018      	movs	r0, r3
   241b0:	46bd      	mov	sp, r7
   241b2:	b026      	add	sp, #152	; 0x98
   241b4:	bdb0      	pop	{r4, r5, r7, pc}
   241b6:	46c0      	nop			; (mov r8, r8)
   241b8:	00022949 	.word	0x00022949
   241bc:	00000276 	.word	0x00000276
   241c0:	0003b02c 	.word	0x0003b02c
   241c4:	0003ac74 	.word	0x0003ac74
   241c8:	00020039 	.word	0x00020039
   241cc:	0003af4c 	.word	0x0003af4c
   241d0:	0003ac70 	.word	0x0003ac70
   241d4:	00022be5 	.word	0x00022be5

000241d8 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   241d8:	b580      	push	{r7, lr}
   241da:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   241dc:	2300      	movs	r3, #0
}
   241de:	0018      	movs	r0, r3
   241e0:	46bd      	mov	sp, r7
   241e2:	bd80      	pop	{r7, pc}

000241e4 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   241e4:	b590      	push	{r4, r7, lr}
   241e6:	b087      	sub	sp, #28
   241e8:	af00      	add	r7, sp, #0
   241ea:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   241ec:	2317      	movs	r3, #23
   241ee:	18fb      	adds	r3, r7, r3
   241f0:	2200      	movs	r2, #0
   241f2:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   241f4:	687b      	ldr	r3, [r7, #4]
   241f6:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   241f8:	693b      	ldr	r3, [r7, #16]
   241fa:	2280      	movs	r2, #128	; 0x80
   241fc:	0052      	lsls	r2, r2, #1
   241fe:	4313      	orrs	r3, r2
   24200:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   24202:	693a      	ldr	r2, [r7, #16]
   24204:	23a5      	movs	r3, #165	; 0xa5
   24206:	015b      	lsls	r3, r3, #5
   24208:	0011      	movs	r1, r2
   2420a:	0018      	movs	r0, r3
   2420c:	4b12      	ldr	r3, [pc, #72]	; (24258 <chip_apply_conf+0x74>)
   2420e:	4798      	blx	r3
		if(val32 != 0) {		
   24210:	693b      	ldr	r3, [r7, #16]
   24212:	2b00      	cmp	r3, #0
   24214:	d018      	beq.n	24248 <chip_apply_conf+0x64>
			uint32 reg = 0;
   24216:	2300      	movs	r3, #0
   24218:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   2421a:	2317      	movs	r3, #23
   2421c:	18fc      	adds	r4, r7, r3
   2421e:	230c      	movs	r3, #12
   24220:	18fa      	adds	r2, r7, r3
   24222:	23a5      	movs	r3, #165	; 0xa5
   24224:	015b      	lsls	r3, r3, #5
   24226:	0011      	movs	r1, r2
   24228:	0018      	movs	r0, r3
   2422a:	4b0c      	ldr	r3, [pc, #48]	; (2425c <chip_apply_conf+0x78>)
   2422c:	4798      	blx	r3
   2422e:	0003      	movs	r3, r0
   24230:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   24232:	2317      	movs	r3, #23
   24234:	18fb      	adds	r3, r7, r3
   24236:	781b      	ldrb	r3, [r3, #0]
   24238:	b25b      	sxtb	r3, r3
   2423a:	2b00      	cmp	r3, #0
   2423c:	d1e1      	bne.n	24202 <chip_apply_conf+0x1e>
				if(reg == val32)
   2423e:	68fa      	ldr	r2, [r7, #12]
   24240:	693b      	ldr	r3, [r7, #16]
   24242:	429a      	cmp	r2, r3
   24244:	d002      	beq.n	2424c <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   24246:	e7dc      	b.n	24202 <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   24248:	46c0      	nop			; (mov r8, r8)
   2424a:	e000      	b.n	2424e <chip_apply_conf+0x6a>
					break;
   2424c:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   2424e:	2300      	movs	r3, #0
}
   24250:	0018      	movs	r0, r3
   24252:	46bd      	mov	sp, r7
   24254:	b007      	add	sp, #28
   24256:	bd90      	pop	{r4, r7, pc}
   24258:	00024a39 	.word	0x00024a39
   2425c:	00024a15 	.word	0x00024a15

00024260 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   24260:	b590      	push	{r4, r7, lr}
   24262:	b083      	sub	sp, #12
   24264:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   24266:	2300      	movs	r3, #0
   24268:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   2426a:	1dfb      	adds	r3, r7, #7
   2426c:	2200      	movs	r2, #0
   2426e:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   24270:	1dfc      	adds	r4, r7, #7
   24272:	003b      	movs	r3, r7
   24274:	4a24      	ldr	r2, [pc, #144]	; (24308 <enable_interrupts+0xa8>)
   24276:	0019      	movs	r1, r3
   24278:	0010      	movs	r0, r2
   2427a:	4b24      	ldr	r3, [pc, #144]	; (2430c <enable_interrupts+0xac>)
   2427c:	4798      	blx	r3
   2427e:	0003      	movs	r3, r0
   24280:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   24282:	1dfb      	adds	r3, r7, #7
   24284:	781b      	ldrb	r3, [r3, #0]
   24286:	b25b      	sxtb	r3, r3
   24288:	2b00      	cmp	r3, #0
   2428a:	d131      	bne.n	242f0 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   2428c:	683b      	ldr	r3, [r7, #0]
   2428e:	2280      	movs	r2, #128	; 0x80
   24290:	0052      	lsls	r2, r2, #1
   24292:	4313      	orrs	r3, r2
   24294:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   24296:	683b      	ldr	r3, [r7, #0]
   24298:	1dfc      	adds	r4, r7, #7
   2429a:	4a1b      	ldr	r2, [pc, #108]	; (24308 <enable_interrupts+0xa8>)
   2429c:	0019      	movs	r1, r3
   2429e:	0010      	movs	r0, r2
   242a0:	4b1b      	ldr	r3, [pc, #108]	; (24310 <enable_interrupts+0xb0>)
   242a2:	4798      	blx	r3
   242a4:	0003      	movs	r3, r0
   242a6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   242a8:	1dfb      	adds	r3, r7, #7
   242aa:	781b      	ldrb	r3, [r3, #0]
   242ac:	b25b      	sxtb	r3, r3
   242ae:	2b00      	cmp	r3, #0
   242b0:	d120      	bne.n	242f4 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   242b2:	1dfc      	adds	r4, r7, #7
   242b4:	003a      	movs	r2, r7
   242b6:	23d0      	movs	r3, #208	; 0xd0
   242b8:	015b      	lsls	r3, r3, #5
   242ba:	0011      	movs	r1, r2
   242bc:	0018      	movs	r0, r3
   242be:	4b13      	ldr	r3, [pc, #76]	; (2430c <enable_interrupts+0xac>)
   242c0:	4798      	blx	r3
   242c2:	0003      	movs	r3, r0
   242c4:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   242c6:	1dfb      	adds	r3, r7, #7
   242c8:	781b      	ldrb	r3, [r3, #0]
   242ca:	b25b      	sxtb	r3, r3
   242cc:	2b00      	cmp	r3, #0
   242ce:	d113      	bne.n	242f8 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   242d0:	683b      	ldr	r3, [r7, #0]
   242d2:	2280      	movs	r2, #128	; 0x80
   242d4:	0252      	lsls	r2, r2, #9
   242d6:	4313      	orrs	r3, r2
   242d8:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   242da:	683a      	ldr	r2, [r7, #0]
   242dc:	1dfc      	adds	r4, r7, #7
   242de:	23d0      	movs	r3, #208	; 0xd0
   242e0:	015b      	lsls	r3, r3, #5
   242e2:	0011      	movs	r1, r2
   242e4:	0018      	movs	r0, r3
   242e6:	4b0a      	ldr	r3, [pc, #40]	; (24310 <enable_interrupts+0xb0>)
   242e8:	4798      	blx	r3
   242ea:	0003      	movs	r3, r0
   242ec:	7023      	strb	r3, [r4, #0]
   242ee:	e004      	b.n	242fa <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   242f0:	46c0      	nop			; (mov r8, r8)
   242f2:	e002      	b.n	242fa <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   242f4:	46c0      	nop			; (mov r8, r8)
   242f6:	e000      	b.n	242fa <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   242f8:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   242fa:	1dfb      	adds	r3, r7, #7
   242fc:	781b      	ldrb	r3, [r3, #0]
   242fe:	b25b      	sxtb	r3, r3
}
   24300:	0018      	movs	r0, r3
   24302:	46bd      	mov	sp, r7
   24304:	b003      	add	sp, #12
   24306:	bd90      	pop	{r4, r7, pc}
   24308:	00001408 	.word	0x00001408
   2430c:	00024a15 	.word	0x00024a15
   24310:	00024a39 	.word	0x00024a39

00024314 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   24314:	b580      	push	{r7, lr}
   24316:	b082      	sub	sp, #8
   24318:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   2431a:	4b32      	ldr	r3, [pc, #200]	; (243e4 <nmi_get_chipid+0xd0>)
   2431c:	681b      	ldr	r3, [r3, #0]
   2431e:	2b00      	cmp	r3, #0
   24320:	d159      	bne.n	243d6 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   24322:	4a30      	ldr	r2, [pc, #192]	; (243e4 <nmi_get_chipid+0xd0>)
   24324:	2380      	movs	r3, #128	; 0x80
   24326:	015b      	lsls	r3, r3, #5
   24328:	0011      	movs	r1, r2
   2432a:	0018      	movs	r0, r3
   2432c:	4b2e      	ldr	r3, [pc, #184]	; (243e8 <nmi_get_chipid+0xd4>)
   2432e:	4798      	blx	r3
   24330:	1e03      	subs	r3, r0, #0
   24332:	d004      	beq.n	2433e <nmi_get_chipid+0x2a>
			chipid = 0;
   24334:	4b2b      	ldr	r3, [pc, #172]	; (243e4 <nmi_get_chipid+0xd0>)
   24336:	2200      	movs	r2, #0
   24338:	601a      	str	r2, [r3, #0]
			return 0;
   2433a:	2300      	movs	r3, #0
   2433c:	e04d      	b.n	243da <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   2433e:	1d3b      	adds	r3, r7, #4
   24340:	4a2a      	ldr	r2, [pc, #168]	; (243ec <nmi_get_chipid+0xd8>)
   24342:	0019      	movs	r1, r3
   24344:	0010      	movs	r0, r2
   24346:	4b28      	ldr	r3, [pc, #160]	; (243e8 <nmi_get_chipid+0xd4>)
   24348:	4798      	blx	r3
   2434a:	1e03      	subs	r3, r0, #0
   2434c:	d004      	beq.n	24358 <nmi_get_chipid+0x44>
			chipid = 0;
   2434e:	4b25      	ldr	r3, [pc, #148]	; (243e4 <nmi_get_chipid+0xd0>)
   24350:	2200      	movs	r2, #0
   24352:	601a      	str	r2, [r3, #0]
			return 0;
   24354:	2300      	movs	r3, #0
   24356:	e040      	b.n	243da <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   24358:	4b22      	ldr	r3, [pc, #136]	; (243e4 <nmi_get_chipid+0xd0>)
   2435a:	681b      	ldr	r3, [r3, #0]
   2435c:	4a24      	ldr	r2, [pc, #144]	; (243f0 <nmi_get_chipid+0xdc>)
   2435e:	4293      	cmp	r3, r2
   24360:	d106      	bne.n	24370 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   24362:	687b      	ldr	r3, [r7, #4]
   24364:	2b01      	cmp	r3, #1
   24366:	d029      	beq.n	243bc <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   24368:	4b1e      	ldr	r3, [pc, #120]	; (243e4 <nmi_get_chipid+0xd0>)
   2436a:	4a22      	ldr	r2, [pc, #136]	; (243f4 <nmi_get_chipid+0xe0>)
   2436c:	601a      	str	r2, [r3, #0]
   2436e:	e025      	b.n	243bc <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   24370:	4b1c      	ldr	r3, [pc, #112]	; (243e4 <nmi_get_chipid+0xd0>)
   24372:	681b      	ldr	r3, [r3, #0]
   24374:	4a20      	ldr	r2, [pc, #128]	; (243f8 <nmi_get_chipid+0xe4>)
   24376:	4293      	cmp	r3, r2
   24378:	d10d      	bne.n	24396 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   2437a:	687b      	ldr	r3, [r7, #4]
   2437c:	2b03      	cmp	r3, #3
   2437e:	d01d      	beq.n	243bc <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   24380:	687b      	ldr	r3, [r7, #4]
   24382:	2b04      	cmp	r3, #4
   24384:	d103      	bne.n	2438e <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   24386:	4b17      	ldr	r3, [pc, #92]	; (243e4 <nmi_get_chipid+0xd0>)
   24388:	4a1c      	ldr	r2, [pc, #112]	; (243fc <nmi_get_chipid+0xe8>)
   2438a:	601a      	str	r2, [r3, #0]
   2438c:	e016      	b.n	243bc <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   2438e:	4b15      	ldr	r3, [pc, #84]	; (243e4 <nmi_get_chipid+0xd0>)
   24390:	4a1b      	ldr	r2, [pc, #108]	; (24400 <nmi_get_chipid+0xec>)
   24392:	601a      	str	r2, [r3, #0]
   24394:	e012      	b.n	243bc <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   24396:	4b13      	ldr	r3, [pc, #76]	; (243e4 <nmi_get_chipid+0xd0>)
   24398:	681b      	ldr	r3, [r3, #0]
   2439a:	4a1a      	ldr	r2, [pc, #104]	; (24404 <nmi_get_chipid+0xf0>)
   2439c:	4293      	cmp	r3, r2
   2439e:	d10d      	bne.n	243bc <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   243a0:	4a10      	ldr	r2, [pc, #64]	; (243e4 <nmi_get_chipid+0xd0>)
   243a2:	23ec      	movs	r3, #236	; 0xec
   243a4:	039b      	lsls	r3, r3, #14
   243a6:	0011      	movs	r1, r2
   243a8:	0018      	movs	r0, r3
   243aa:	4b0f      	ldr	r3, [pc, #60]	; (243e8 <nmi_get_chipid+0xd4>)
   243ac:	4798      	blx	r3
   243ae:	1e03      	subs	r3, r0, #0
   243b0:	d004      	beq.n	243bc <nmi_get_chipid+0xa8>
			chipid = 0;
   243b2:	4b0c      	ldr	r3, [pc, #48]	; (243e4 <nmi_get_chipid+0xd0>)
   243b4:	2200      	movs	r2, #0
   243b6:	601a      	str	r2, [r3, #0]
			return 0;
   243b8:	2300      	movs	r3, #0
   243ba:	e00e      	b.n	243da <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   243bc:	4b09      	ldr	r3, [pc, #36]	; (243e4 <nmi_get_chipid+0xd0>)
   243be:	681b      	ldr	r3, [r3, #0]
   243c0:	4a11      	ldr	r2, [pc, #68]	; (24408 <nmi_get_chipid+0xf4>)
   243c2:	401a      	ands	r2, r3
   243c4:	4b07      	ldr	r3, [pc, #28]	; (243e4 <nmi_get_chipid+0xd0>)
   243c6:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   243c8:	4b06      	ldr	r3, [pc, #24]	; (243e4 <nmi_get_chipid+0xd0>)
   243ca:	681b      	ldr	r3, [r3, #0]
   243cc:	22a0      	movs	r2, #160	; 0xa0
   243ce:	02d2      	lsls	r2, r2, #11
   243d0:	431a      	orrs	r2, r3
   243d2:	4b04      	ldr	r3, [pc, #16]	; (243e4 <nmi_get_chipid+0xd0>)
   243d4:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   243d6:	4b03      	ldr	r3, [pc, #12]	; (243e4 <nmi_get_chipid+0xd0>)
   243d8:	681b      	ldr	r3, [r3, #0]
}
   243da:	0018      	movs	r0, r3
   243dc:	46bd      	mov	sp, r7
   243de:	b002      	add	sp, #8
   243e0:	bd80      	pop	{r7, pc}
   243e2:	46c0      	nop			; (mov r8, r8)
   243e4:	20003ec8 	.word	0x20003ec8
   243e8:	00024a15 	.word	0x00024a15
   243ec:	000013f4 	.word	0x000013f4
   243f0:	001002a0 	.word	0x001002a0
   243f4:	001002a1 	.word	0x001002a1
   243f8:	001002b0 	.word	0x001002b0
   243fc:	001002b1 	.word	0x001002b1
   24400:	001002b2 	.word	0x001002b2
   24404:	001000f0 	.word	0x001000f0
   24408:	fff0ffff 	.word	0xfff0ffff

0002440c <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   2440c:	b590      	push	{r4, r7, lr}
   2440e:	b083      	sub	sp, #12
   24410:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   24412:	1dfb      	adds	r3, r7, #7
   24414:	2200      	movs	r2, #0
   24416:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   24418:	1dfc      	adds	r4, r7, #7
   2441a:	003b      	movs	r3, r7
   2441c:	0019      	movs	r1, r3
   2441e:	2010      	movs	r0, #16
   24420:	4b2e      	ldr	r3, [pc, #184]	; (244dc <chip_sleep+0xd0>)
   24422:	4798      	blx	r3
   24424:	0003      	movs	r3, r0
   24426:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   24428:	1dfb      	adds	r3, r7, #7
   2442a:	781b      	ldrb	r3, [r3, #0]
   2442c:	b25b      	sxtb	r3, r3
   2442e:	2b00      	cmp	r3, #0
   24430:	d145      	bne.n	244be <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   24432:	683b      	ldr	r3, [r7, #0]
   24434:	2201      	movs	r2, #1
   24436:	4013      	ands	r3, r2
   24438:	d000      	beq.n	2443c <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   2443a:	e7ed      	b.n	24418 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   2443c:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   2443e:	1dfc      	adds	r4, r7, #7
   24440:	003b      	movs	r3, r7
   24442:	0019      	movs	r1, r3
   24444:	2001      	movs	r0, #1
   24446:	4b25      	ldr	r3, [pc, #148]	; (244dc <chip_sleep+0xd0>)
   24448:	4798      	blx	r3
   2444a:	0003      	movs	r3, r0
   2444c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2444e:	1dfb      	adds	r3, r7, #7
   24450:	781b      	ldrb	r3, [r3, #0]
   24452:	b25b      	sxtb	r3, r3
   24454:	2b00      	cmp	r3, #0
   24456:	d134      	bne.n	244c2 <chip_sleep+0xb6>
	if(reg & NBIT1)
   24458:	683b      	ldr	r3, [r7, #0]
   2445a:	2202      	movs	r2, #2
   2445c:	4013      	ands	r3, r2
   2445e:	d010      	beq.n	24482 <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   24460:	683b      	ldr	r3, [r7, #0]
   24462:	2202      	movs	r2, #2
   24464:	4393      	bics	r3, r2
   24466:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   24468:	683b      	ldr	r3, [r7, #0]
   2446a:	1dfc      	adds	r4, r7, #7
   2446c:	0019      	movs	r1, r3
   2446e:	2001      	movs	r0, #1
   24470:	4b1b      	ldr	r3, [pc, #108]	; (244e0 <chip_sleep+0xd4>)
   24472:	4798      	blx	r3
   24474:	0003      	movs	r3, r0
   24476:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   24478:	1dfb      	adds	r3, r7, #7
   2447a:	781b      	ldrb	r3, [r3, #0]
   2447c:	b25b      	sxtb	r3, r3
   2447e:	2b00      	cmp	r3, #0
   24480:	d121      	bne.n	244c6 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   24482:	1dfc      	adds	r4, r7, #7
   24484:	003b      	movs	r3, r7
   24486:	0019      	movs	r1, r3
   24488:	200b      	movs	r0, #11
   2448a:	4b14      	ldr	r3, [pc, #80]	; (244dc <chip_sleep+0xd0>)
   2448c:	4798      	blx	r3
   2448e:	0003      	movs	r3, r0
   24490:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   24492:	1dfb      	adds	r3, r7, #7
   24494:	781b      	ldrb	r3, [r3, #0]
   24496:	b25b      	sxtb	r3, r3
   24498:	2b00      	cmp	r3, #0
   2449a:	d116      	bne.n	244ca <chip_sleep+0xbe>
	if(reg & NBIT0)
   2449c:	683b      	ldr	r3, [r7, #0]
   2449e:	2201      	movs	r2, #1
   244a0:	4013      	ands	r3, r2
   244a2:	d013      	beq.n	244cc <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   244a4:	683b      	ldr	r3, [r7, #0]
   244a6:	2201      	movs	r2, #1
   244a8:	4393      	bics	r3, r2
   244aa:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   244ac:	683b      	ldr	r3, [r7, #0]
   244ae:	1dfc      	adds	r4, r7, #7
   244b0:	0019      	movs	r1, r3
   244b2:	200b      	movs	r0, #11
   244b4:	4b0a      	ldr	r3, [pc, #40]	; (244e0 <chip_sleep+0xd4>)
   244b6:	4798      	blx	r3
   244b8:	0003      	movs	r3, r0
   244ba:	7023      	strb	r3, [r4, #0]
   244bc:	e006      	b.n	244cc <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   244be:	46c0      	nop			; (mov r8, r8)
   244c0:	e004      	b.n	244cc <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   244c2:	46c0      	nop			; (mov r8, r8)
   244c4:	e002      	b.n	244cc <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   244c6:	46c0      	nop			; (mov r8, r8)
   244c8:	e000      	b.n	244cc <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   244ca:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   244cc:	1dfb      	adds	r3, r7, #7
   244ce:	781b      	ldrb	r3, [r3, #0]
   244d0:	b25b      	sxtb	r3, r3
}
   244d2:	0018      	movs	r0, r3
   244d4:	46bd      	mov	sp, r7
   244d6:	b003      	add	sp, #12
   244d8:	bd90      	pop	{r4, r7, pc}
   244da:	46c0      	nop			; (mov r8, r8)
   244dc:	00024a15 	.word	0x00024a15
   244e0:	00024a39 	.word	0x00024a39

000244e4 <chip_wake>:
sint8 chip_wake(void)
{
   244e4:	b590      	push	{r4, r7, lr}
   244e6:	b085      	sub	sp, #20
   244e8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   244ea:	230f      	movs	r3, #15
   244ec:	18fb      	adds	r3, r7, r3
   244ee:	2200      	movs	r2, #0
   244f0:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   244f2:	2300      	movs	r3, #0
   244f4:	607b      	str	r3, [r7, #4]
   244f6:	2300      	movs	r3, #0
   244f8:	603b      	str	r3, [r7, #0]
   244fa:	2300      	movs	r3, #0
   244fc:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   244fe:	230f      	movs	r3, #15
   24500:	18fc      	adds	r4, r7, r3
   24502:	1d3b      	adds	r3, r7, #4
   24504:	0019      	movs	r1, r3
   24506:	200b      	movs	r0, #11
   24508:	4b4e      	ldr	r3, [pc, #312]	; (24644 <chip_wake+0x160>)
   2450a:	4798      	blx	r3
   2450c:	0003      	movs	r3, r0
   2450e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   24510:	230f      	movs	r3, #15
   24512:	18fb      	adds	r3, r7, r3
   24514:	781b      	ldrb	r3, [r3, #0]
   24516:	b25b      	sxtb	r3, r3
   24518:	2b00      	cmp	r3, #0
   2451a:	d000      	beq.n	2451e <chip_wake+0x3a>
   2451c:	e082      	b.n	24624 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   2451e:	687b      	ldr	r3, [r7, #4]
   24520:	2201      	movs	r2, #1
   24522:	4013      	ands	r3, r2
   24524:	d111      	bne.n	2454a <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   24526:	687b      	ldr	r3, [r7, #4]
   24528:	2201      	movs	r2, #1
   2452a:	4313      	orrs	r3, r2
   2452c:	220f      	movs	r2, #15
   2452e:	18bc      	adds	r4, r7, r2
   24530:	0019      	movs	r1, r3
   24532:	200b      	movs	r0, #11
   24534:	4b44      	ldr	r3, [pc, #272]	; (24648 <chip_wake+0x164>)
   24536:	4798      	blx	r3
   24538:	0003      	movs	r3, r0
   2453a:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   2453c:	230f      	movs	r3, #15
   2453e:	18fb      	adds	r3, r7, r3
   24540:	781b      	ldrb	r3, [r3, #0]
   24542:	b25b      	sxtb	r3, r3
   24544:	2b00      	cmp	r3, #0
   24546:	d000      	beq.n	2454a <chip_wake+0x66>
   24548:	e06e      	b.n	24628 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   2454a:	230f      	movs	r3, #15
   2454c:	18fc      	adds	r4, r7, r3
   2454e:	1d3b      	adds	r3, r7, #4
   24550:	0019      	movs	r1, r3
   24552:	2001      	movs	r0, #1
   24554:	4b3b      	ldr	r3, [pc, #236]	; (24644 <chip_wake+0x160>)
   24556:	4798      	blx	r3
   24558:	0003      	movs	r3, r0
   2455a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   2455c:	230f      	movs	r3, #15
   2455e:	18fb      	adds	r3, r7, r3
   24560:	781b      	ldrb	r3, [r3, #0]
   24562:	b25b      	sxtb	r3, r3
   24564:	2b00      	cmp	r3, #0
   24566:	d161      	bne.n	2462c <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   24568:	687b      	ldr	r3, [r7, #4]
   2456a:	2202      	movs	r2, #2
   2456c:	4013      	ands	r3, r2
   2456e:	d110      	bne.n	24592 <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   24570:	687b      	ldr	r3, [r7, #4]
   24572:	2202      	movs	r2, #2
   24574:	4313      	orrs	r3, r2
   24576:	220f      	movs	r2, #15
   24578:	18bc      	adds	r4, r7, r2
   2457a:	0019      	movs	r1, r3
   2457c:	2001      	movs	r0, #1
   2457e:	4b32      	ldr	r3, [pc, #200]	; (24648 <chip_wake+0x164>)
   24580:	4798      	blx	r3
   24582:	0003      	movs	r3, r0
   24584:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   24586:	230f      	movs	r3, #15
   24588:	18fb      	adds	r3, r7, r3
   2458a:	781b      	ldrb	r3, [r3, #0]
   2458c:	b25b      	sxtb	r3, r3
   2458e:	2b00      	cmp	r3, #0
   24590:	d14e      	bne.n	24630 <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   24592:	230f      	movs	r3, #15
   24594:	18fc      	adds	r4, r7, r3
   24596:	003b      	movs	r3, r7
   24598:	0019      	movs	r1, r3
   2459a:	200f      	movs	r0, #15
   2459c:	4b29      	ldr	r3, [pc, #164]	; (24644 <chip_wake+0x160>)
   2459e:	4798      	blx	r3
   245a0:	0003      	movs	r3, r0
   245a2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   245a4:	230f      	movs	r3, #15
   245a6:	18fb      	adds	r3, r7, r3
   245a8:	781b      	ldrb	r3, [r3, #0]
   245aa:	b25b      	sxtb	r3, r3
   245ac:	2b00      	cmp	r3, #0
   245ae:	d014      	beq.n	245da <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   245b0:	23a8      	movs	r3, #168	; 0xa8
   245b2:	005a      	lsls	r2, r3, #1
   245b4:	4925      	ldr	r1, [pc, #148]	; (2464c <chip_wake+0x168>)
   245b6:	4b26      	ldr	r3, [pc, #152]	; (24650 <chip_wake+0x16c>)
   245b8:	0018      	movs	r0, r3
   245ba:	4b26      	ldr	r3, [pc, #152]	; (24654 <chip_wake+0x170>)
   245bc:	4798      	blx	r3
   245be:	230f      	movs	r3, #15
   245c0:	18fb      	adds	r3, r7, r3
   245c2:	2100      	movs	r1, #0
   245c4:	5659      	ldrsb	r1, [r3, r1]
   245c6:	683a      	ldr	r2, [r7, #0]
   245c8:	4b23      	ldr	r3, [pc, #140]	; (24658 <chip_wake+0x174>)
   245ca:	0018      	movs	r0, r3
   245cc:	4b21      	ldr	r3, [pc, #132]	; (24654 <chip_wake+0x170>)
   245ce:	4798      	blx	r3
   245d0:	4b22      	ldr	r3, [pc, #136]	; (2465c <chip_wake+0x178>)
   245d2:	0018      	movs	r0, r3
   245d4:	4b1f      	ldr	r3, [pc, #124]	; (24654 <chip_wake+0x170>)
   245d6:	4798      	blx	r3
			goto _WAKE_EXIT;
   245d8:	e02b      	b.n	24632 <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   245da:	683b      	ldr	r3, [r7, #0]
   245dc:	2204      	movs	r2, #4
   245de:	4013      	ands	r3, r2
   245e0:	d11c      	bne.n	2461c <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   245e2:	2002      	movs	r0, #2
   245e4:	4b1e      	ldr	r3, [pc, #120]	; (24660 <chip_wake+0x17c>)
   245e6:	4798      	blx	r3
		trials++;
   245e8:	68bb      	ldr	r3, [r7, #8]
   245ea:	3301      	adds	r3, #1
   245ec:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   245ee:	68bb      	ldr	r3, [r7, #8]
   245f0:	2b04      	cmp	r3, #4
   245f2:	d9ce      	bls.n	24592 <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   245f4:	23ad      	movs	r3, #173	; 0xad
   245f6:	005a      	lsls	r2, r3, #1
   245f8:	4914      	ldr	r1, [pc, #80]	; (2464c <chip_wake+0x168>)
   245fa:	4b15      	ldr	r3, [pc, #84]	; (24650 <chip_wake+0x16c>)
   245fc:	0018      	movs	r0, r3
   245fe:	4b15      	ldr	r3, [pc, #84]	; (24654 <chip_wake+0x170>)
   24600:	4798      	blx	r3
   24602:	4b18      	ldr	r3, [pc, #96]	; (24664 <chip_wake+0x180>)
   24604:	0018      	movs	r0, r3
   24606:	4b13      	ldr	r3, [pc, #76]	; (24654 <chip_wake+0x170>)
   24608:	4798      	blx	r3
   2460a:	4b14      	ldr	r3, [pc, #80]	; (2465c <chip_wake+0x178>)
   2460c:	0018      	movs	r0, r3
   2460e:	4b11      	ldr	r3, [pc, #68]	; (24654 <chip_wake+0x170>)
   24610:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   24612:	230f      	movs	r3, #15
   24614:	18fb      	adds	r3, r7, r3
   24616:	22fc      	movs	r2, #252	; 0xfc
   24618:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   2461a:	e00a      	b.n	24632 <chip_wake+0x14e>
			break;
   2461c:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   2461e:	4b12      	ldr	r3, [pc, #72]	; (24668 <chip_wake+0x184>)
   24620:	4798      	blx	r3
   24622:	e006      	b.n	24632 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   24624:	46c0      	nop			; (mov r8, r8)
   24626:	e004      	b.n	24632 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   24628:	46c0      	nop			; (mov r8, r8)
   2462a:	e002      	b.n	24632 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   2462c:	46c0      	nop			; (mov r8, r8)
   2462e:	e000      	b.n	24632 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   24630:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   24632:	230f      	movs	r3, #15
   24634:	18fb      	adds	r3, r7, r3
   24636:	781b      	ldrb	r3, [r3, #0]
   24638:	b25b      	sxtb	r3, r3
}
   2463a:	0018      	movs	r0, r3
   2463c:	46bd      	mov	sp, r7
   2463e:	b005      	add	sp, #20
   24640:	bd90      	pop	{r4, r7, pc}
   24642:	46c0      	nop			; (mov r8, r8)
   24644:	00024a15 	.word	0x00024a15
   24648:	00024a39 	.word	0x00024a39
   2464c:	0003b0cc 	.word	0x0003b0cc
   24650:	0003b040 	.word	0x0003b040
   24654:	00020039 	.word	0x00020039
   24658:	0003b054 	.word	0x0003b054
   2465c:	0003b06c 	.word	0x0003b06c
   24660:	00022135 	.word	0x00022135
   24664:	0003b070 	.word	0x0003b070
   24668:	000249d5 	.word	0x000249d5

0002466c <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   2466c:	b580      	push	{r7, lr}
   2466e:	b088      	sub	sp, #32
   24670:	af00      	add	r7, sp, #0
   24672:	0002      	movs	r2, r0
   24674:	1dfb      	adds	r3, r7, #7
   24676:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   24678:	2313      	movs	r3, #19
   2467a:	18fb      	adds	r3, r7, r3
   2467c:	2200      	movs	r2, #0
   2467e:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   24680:	2300      	movs	r3, #0
   24682:	61fb      	str	r3, [r7, #28]
   24684:	2300      	movs	r3, #0
   24686:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   24688:	2300      	movs	r3, #0
   2468a:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   2468c:	4b4a      	ldr	r3, [pc, #296]	; (247b8 <wait_for_bootrom+0x14c>)
   2468e:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   24690:	2300      	movs	r3, #0
   24692:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   24694:	4b49      	ldr	r3, [pc, #292]	; (247bc <wait_for_bootrom+0x150>)
   24696:	0018      	movs	r0, r3
   24698:	4b49      	ldr	r3, [pc, #292]	; (247c0 <wait_for_bootrom+0x154>)
   2469a:	4798      	blx	r3
   2469c:	0003      	movs	r3, r0
   2469e:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   246a0:	69fb      	ldr	r3, [r7, #28]
   246a2:	2b00      	cmp	r3, #0
   246a4:	db03      	blt.n	246ae <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   246a6:	2001      	movs	r0, #1
   246a8:	4b46      	ldr	r3, [pc, #280]	; (247c4 <wait_for_bootrom+0x158>)
   246aa:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   246ac:	e7f2      	b.n	24694 <wait_for_bootrom+0x28>
			break;
   246ae:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   246b0:	4b45      	ldr	r3, [pc, #276]	; (247c8 <wait_for_bootrom+0x15c>)
   246b2:	0018      	movs	r0, r3
   246b4:	4b42      	ldr	r3, [pc, #264]	; (247c0 <wait_for_bootrom+0x154>)
   246b6:	4798      	blx	r3
   246b8:	0003      	movs	r3, r0
   246ba:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   246bc:	69fb      	ldr	r3, [r7, #28]
   246be:	2201      	movs	r2, #1
   246c0:	4013      	ands	r3, r2
   246c2:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   246c4:	69fb      	ldr	r3, [r7, #28]
   246c6:	2b00      	cmp	r3, #0
   246c8:	d112      	bne.n	246f0 <wait_for_bootrom+0x84>
	{
		reg = 0;
   246ca:	2300      	movs	r3, #0
   246cc:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   246ce:	e00b      	b.n	246e8 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   246d0:	2001      	movs	r0, #1
   246d2:	4b3c      	ldr	r3, [pc, #240]	; (247c4 <wait_for_bootrom+0x158>)
   246d4:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   246d6:	4b3d      	ldr	r3, [pc, #244]	; (247cc <wait_for_bootrom+0x160>)
   246d8:	0018      	movs	r0, r3
   246da:	4b39      	ldr	r3, [pc, #228]	; (247c0 <wait_for_bootrom+0x154>)
   246dc:	4798      	blx	r3
   246de:	0003      	movs	r3, r0
   246e0:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   246e2:	69bb      	ldr	r3, [r7, #24]
   246e4:	3301      	adds	r3, #1
   246e6:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   246e8:	69fb      	ldr	r3, [r7, #28]
   246ea:	4a39      	ldr	r2, [pc, #228]	; (247d0 <wait_for_bootrom+0x164>)
   246ec:	4293      	cmp	r3, r2
   246ee:	d1ef      	bne.n	246d0 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   246f0:	1dfb      	adds	r3, r7, #7
   246f2:	781b      	ldrb	r3, [r3, #0]
   246f4:	2b02      	cmp	r3, #2
   246f6:	d10d      	bne.n	24714 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   246f8:	4a36      	ldr	r2, [pc, #216]	; (247d4 <wait_for_bootrom+0x168>)
   246fa:	4b37      	ldr	r3, [pc, #220]	; (247d8 <wait_for_bootrom+0x16c>)
   246fc:	0011      	movs	r1, r2
   246fe:	0018      	movs	r0, r3
   24700:	4b36      	ldr	r3, [pc, #216]	; (247dc <wait_for_bootrom+0x170>)
   24702:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   24704:	2380      	movs	r3, #128	; 0x80
   24706:	035b      	lsls	r3, r3, #13
   24708:	4a35      	ldr	r2, [pc, #212]	; (247e0 <wait_for_bootrom+0x174>)
   2470a:	0019      	movs	r1, r3
   2470c:	0010      	movs	r0, r2
   2470e:	4b33      	ldr	r3, [pc, #204]	; (247dc <wait_for_bootrom+0x170>)
   24710:	4798      	blx	r3
   24712:	e022      	b.n	2475a <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   24714:	1dfb      	adds	r3, r7, #7
   24716:	781b      	ldrb	r3, [r3, #0]
   24718:	2b03      	cmp	r3, #3
   2471a:	d10b      	bne.n	24734 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   2471c:	4a2d      	ldr	r2, [pc, #180]	; (247d4 <wait_for_bootrom+0x168>)
   2471e:	4b2e      	ldr	r3, [pc, #184]	; (247d8 <wait_for_bootrom+0x16c>)
   24720:	0011      	movs	r1, r2
   24722:	0018      	movs	r0, r3
   24724:	4b2d      	ldr	r3, [pc, #180]	; (247dc <wait_for_bootrom+0x170>)
   24726:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   24728:	4b2d      	ldr	r3, [pc, #180]	; (247e0 <wait_for_bootrom+0x174>)
   2472a:	2100      	movs	r1, #0
   2472c:	0018      	movs	r0, r3
   2472e:	4b2b      	ldr	r3, [pc, #172]	; (247dc <wait_for_bootrom+0x170>)
   24730:	4798      	blx	r3
   24732:	e012      	b.n	2475a <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   24734:	1dfb      	adds	r3, r7, #7
   24736:	781b      	ldrb	r3, [r3, #0]
   24738:	2b04      	cmp	r3, #4
   2473a:	d108      	bne.n	2474e <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   2473c:	2380      	movs	r3, #128	; 0x80
   2473e:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   24740:	68fb      	ldr	r3, [r7, #12]
   24742:	4a27      	ldr	r2, [pc, #156]	; (247e0 <wait_for_bootrom+0x174>)
   24744:	0019      	movs	r1, r3
   24746:	0010      	movs	r0, r2
   24748:	4b24      	ldr	r3, [pc, #144]	; (247dc <wait_for_bootrom+0x170>)
   2474a:	4798      	blx	r3
   2474c:	e005      	b.n	2475a <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   2474e:	68fb      	ldr	r3, [r7, #12]
   24750:	4a23      	ldr	r2, [pc, #140]	; (247e0 <wait_for_bootrom+0x174>)
   24752:	0019      	movs	r1, r3
   24754:	0010      	movs	r0, r2
   24756:	4b21      	ldr	r3, [pc, #132]	; (247dc <wait_for_bootrom+0x170>)
   24758:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   2475a:	4b22      	ldr	r3, [pc, #136]	; (247e4 <wait_for_bootrom+0x178>)
   2475c:	4798      	blx	r3
   2475e:	0003      	movs	r3, r0
   24760:	051b      	lsls	r3, r3, #20
   24762:	0d1b      	lsrs	r3, r3, #20
   24764:	4a20      	ldr	r2, [pc, #128]	; (247e8 <wait_for_bootrom+0x17c>)
   24766:	4293      	cmp	r3, r2
   24768:	d906      	bls.n	24778 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   2476a:	697b      	ldr	r3, [r7, #20]
   2476c:	2202      	movs	r2, #2
   2476e:	4313      	orrs	r3, r2
   24770:	0018      	movs	r0, r3
   24772:	4b1e      	ldr	r3, [pc, #120]	; (247ec <wait_for_bootrom+0x180>)
   24774:	4798      	blx	r3
   24776:	e003      	b.n	24780 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   24778:	697b      	ldr	r3, [r7, #20]
   2477a:	0018      	movs	r0, r3
   2477c:	4b1b      	ldr	r3, [pc, #108]	; (247ec <wait_for_bootrom+0x180>)
   2477e:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   24780:	4b1b      	ldr	r3, [pc, #108]	; (247f0 <wait_for_bootrom+0x184>)
   24782:	0018      	movs	r0, r3
   24784:	4b1b      	ldr	r3, [pc, #108]	; (247f4 <wait_for_bootrom+0x188>)
   24786:	4798      	blx	r3
   24788:	68fa      	ldr	r2, [r7, #12]
   2478a:	4b1b      	ldr	r3, [pc, #108]	; (247f8 <wait_for_bootrom+0x18c>)
   2478c:	0011      	movs	r1, r2
   2478e:	0018      	movs	r0, r3
   24790:	4b18      	ldr	r3, [pc, #96]	; (247f4 <wait_for_bootrom+0x188>)
   24792:	4798      	blx	r3
   24794:	4b19      	ldr	r3, [pc, #100]	; (247fc <wait_for_bootrom+0x190>)
   24796:	0018      	movs	r0, r3
   24798:	4b16      	ldr	r3, [pc, #88]	; (247f4 <wait_for_bootrom+0x188>)
   2479a:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   2479c:	4a18      	ldr	r2, [pc, #96]	; (24800 <wait_for_bootrom+0x194>)
   2479e:	4b0b      	ldr	r3, [pc, #44]	; (247cc <wait_for_bootrom+0x160>)
   247a0:	0011      	movs	r1, r2
   247a2:	0018      	movs	r0, r3
   247a4:	4b0d      	ldr	r3, [pc, #52]	; (247dc <wait_for_bootrom+0x170>)
   247a6:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   247a8:	2313      	movs	r3, #19
   247aa:	18fb      	adds	r3, r7, r3
   247ac:	781b      	ldrb	r3, [r3, #0]
   247ae:	b25b      	sxtb	r3, r3
}
   247b0:	0018      	movs	r0, r3
   247b2:	46bd      	mov	sp, r7
   247b4:	b008      	add	sp, #32
   247b6:	bd80      	pop	{r7, pc}
   247b8:	13301354 	.word	0x13301354
   247bc:	00001014 	.word	0x00001014
   247c0:	000249f5 	.word	0x000249f5
   247c4:	00022135 	.word	0x00022135
   247c8:	000207bc 	.word	0x000207bc
   247cc:	000c000c 	.word	0x000c000c
   247d0:	10add09e 	.word	0x10add09e
   247d4:	3c1cd57d 	.word	0x3c1cd57d
   247d8:	000207ac 	.word	0x000207ac
   247dc:	00024a39 	.word	0x00024a39
   247e0:	0000108c 	.word	0x0000108c
   247e4:	00024315 	.word	0x00024315
   247e8:	0000039f 	.word	0x0000039f
   247ec:	000241e5 	.word	0x000241e5
   247f0:	0003b08c 	.word	0x0003b08c
   247f4:	00020039 	.word	0x00020039
   247f8:	0003b098 	.word	0x0003b098
   247fc:	0003b06c 	.word	0x0003b06c
   24800:	ef522f61 	.word	0xef522f61

00024804 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   24804:	b580      	push	{r7, lr}
   24806:	b088      	sub	sp, #32
   24808:	af00      	add	r7, sp, #0
   2480a:	0002      	movs	r2, r0
   2480c:	1dfb      	adds	r3, r7, #7
   2480e:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   24810:	231f      	movs	r3, #31
   24812:	18fb      	adds	r3, r7, r3
   24814:	2200      	movs	r2, #0
   24816:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   24818:	2300      	movs	r3, #0
   2481a:	61bb      	str	r3, [r7, #24]
   2481c:	2300      	movs	r3, #0
   2481e:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   24820:	2301      	movs	r3, #1
   24822:	425b      	negs	r3, r3
   24824:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   24826:	4b1d      	ldr	r3, [pc, #116]	; (2489c <wait_for_firmware_start+0x98>)
   24828:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   2482a:	4b1d      	ldr	r3, [pc, #116]	; (248a0 <wait_for_firmware_start+0x9c>)
   2482c:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   2482e:	1dfb      	adds	r3, r7, #7
   24830:	781b      	ldrb	r3, [r3, #0]
   24832:	2b02      	cmp	r3, #2
   24834:	d003      	beq.n	2483e <wait_for_firmware_start+0x3a>
   24836:	1dfb      	adds	r3, r7, #7
   24838:	781b      	ldrb	r3, [r3, #0]
   2483a:	2b03      	cmp	r3, #3
   2483c:	d119      	bne.n	24872 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   2483e:	4b19      	ldr	r3, [pc, #100]	; (248a4 <wait_for_firmware_start+0xa0>)
   24840:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   24842:	4b19      	ldr	r3, [pc, #100]	; (248a8 <wait_for_firmware_start+0xa4>)
   24844:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   24846:	e014      	b.n	24872 <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   24848:	2002      	movs	r0, #2
   2484a:	4b18      	ldr	r3, [pc, #96]	; (248ac <wait_for_firmware_start+0xa8>)
   2484c:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   2484e:	68fb      	ldr	r3, [r7, #12]
   24850:	0018      	movs	r0, r3
   24852:	4b17      	ldr	r3, [pc, #92]	; (248b0 <wait_for_firmware_start+0xac>)
   24854:	4798      	blx	r3
   24856:	0003      	movs	r3, r0
   24858:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   2485a:	697b      	ldr	r3, [r7, #20]
   2485c:	3301      	adds	r3, #1
   2485e:	617b      	str	r3, [r7, #20]
   24860:	697a      	ldr	r2, [r7, #20]
   24862:	693b      	ldr	r3, [r7, #16]
   24864:	429a      	cmp	r2, r3
   24866:	d304      	bcc.n	24872 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   24868:	231f      	movs	r3, #31
   2486a:	18fb      	adds	r3, r7, r3
   2486c:	22fb      	movs	r2, #251	; 0xfb
   2486e:	701a      	strb	r2, [r3, #0]
			goto ERR;
   24870:	e00c      	b.n	2488c <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   24872:	68ba      	ldr	r2, [r7, #8]
   24874:	69bb      	ldr	r3, [r7, #24]
   24876:	429a      	cmp	r2, r3
   24878:	d1e6      	bne.n	24848 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   2487a:	68bb      	ldr	r3, [r7, #8]
   2487c:	4a08      	ldr	r2, [pc, #32]	; (248a0 <wait_for_firmware_start+0x9c>)
   2487e:	4293      	cmp	r3, r2
   24880:	d104      	bne.n	2488c <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   24882:	4b06      	ldr	r3, [pc, #24]	; (2489c <wait_for_firmware_start+0x98>)
   24884:	2100      	movs	r1, #0
   24886:	0018      	movs	r0, r3
   24888:	4b0a      	ldr	r3, [pc, #40]	; (248b4 <wait_for_firmware_start+0xb0>)
   2488a:	4798      	blx	r3
	}
ERR:
	return ret;
   2488c:	231f      	movs	r3, #31
   2488e:	18fb      	adds	r3, r7, r3
   24890:	781b      	ldrb	r3, [r3, #0]
   24892:	b25b      	sxtb	r3, r3
}
   24894:	0018      	movs	r0, r3
   24896:	46bd      	mov	sp, r7
   24898:	b008      	add	sp, #32
   2489a:	bd80      	pop	{r7, pc}
   2489c:	0000108c 	.word	0x0000108c
   248a0:	02532636 	.word	0x02532636
   248a4:	000207ac 	.word	0x000207ac
   248a8:	d75dc1c3 	.word	0xd75dc1c3
   248ac:	00022135 	.word	0x00022135
   248b0:	000249f5 	.word	0x000249f5
   248b4:	00024a39 	.word	0x00024a39

000248b8 <chip_deinit>:

sint8 chip_deinit(void)
{
   248b8:	b590      	push	{r4, r7, lr}
   248ba:	b083      	sub	sp, #12
   248bc:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   248be:	2300      	movs	r3, #0
   248c0:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   248c2:	1dfc      	adds	r4, r7, #7
   248c4:	003a      	movs	r2, r7
   248c6:	23a0      	movs	r3, #160	; 0xa0
   248c8:	015b      	lsls	r3, r3, #5
   248ca:	0011      	movs	r1, r2
   248cc:	0018      	movs	r0, r3
   248ce:	4b20      	ldr	r3, [pc, #128]	; (24950 <chip_deinit+0x98>)
   248d0:	4798      	blx	r3
   248d2:	0003      	movs	r3, r0
   248d4:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   248d6:	1dfb      	adds	r3, r7, #7
   248d8:	781b      	ldrb	r3, [r3, #0]
   248da:	b25b      	sxtb	r3, r3
   248dc:	2b00      	cmp	r3, #0
   248de:	d00e      	beq.n	248fe <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   248e0:	4a1c      	ldr	r2, [pc, #112]	; (24954 <chip_deinit+0x9c>)
   248e2:	491d      	ldr	r1, [pc, #116]	; (24958 <chip_deinit+0xa0>)
   248e4:	4b1d      	ldr	r3, [pc, #116]	; (2495c <chip_deinit+0xa4>)
   248e6:	0018      	movs	r0, r3
   248e8:	4b1d      	ldr	r3, [pc, #116]	; (24960 <chip_deinit+0xa8>)
   248ea:	4798      	blx	r3
   248ec:	4b1d      	ldr	r3, [pc, #116]	; (24964 <chip_deinit+0xac>)
   248ee:	0018      	movs	r0, r3
   248f0:	4b1b      	ldr	r3, [pc, #108]	; (24960 <chip_deinit+0xa8>)
   248f2:	4798      	blx	r3
   248f4:	4b1c      	ldr	r3, [pc, #112]	; (24968 <chip_deinit+0xb0>)
   248f6:	0018      	movs	r0, r3
   248f8:	4b19      	ldr	r3, [pc, #100]	; (24960 <chip_deinit+0xa8>)
   248fa:	4798      	blx	r3
		goto ERR1;
   248fc:	e021      	b.n	24942 <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   248fe:	683b      	ldr	r3, [r7, #0]
   24900:	4a1a      	ldr	r2, [pc, #104]	; (2496c <chip_deinit+0xb4>)
   24902:	4013      	ands	r3, r2
   24904:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   24906:	683a      	ldr	r2, [r7, #0]
   24908:	1dfc      	adds	r4, r7, #7
   2490a:	23a0      	movs	r3, #160	; 0xa0
   2490c:	015b      	lsls	r3, r3, #5
   2490e:	0011      	movs	r1, r2
   24910:	0018      	movs	r0, r3
   24912:	4b17      	ldr	r3, [pc, #92]	; (24970 <chip_deinit+0xb8>)
   24914:	4798      	blx	r3
   24916:	0003      	movs	r3, r0
   24918:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   2491a:	1dfb      	adds	r3, r7, #7
   2491c:	781b      	ldrb	r3, [r3, #0]
   2491e:	b25b      	sxtb	r3, r3
   24920:	2b00      	cmp	r3, #0
   24922:	d00e      	beq.n	24942 <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   24924:	4a13      	ldr	r2, [pc, #76]	; (24974 <chip_deinit+0xbc>)
   24926:	490c      	ldr	r1, [pc, #48]	; (24958 <chip_deinit+0xa0>)
   24928:	4b0c      	ldr	r3, [pc, #48]	; (2495c <chip_deinit+0xa4>)
   2492a:	0018      	movs	r0, r3
   2492c:	4b0c      	ldr	r3, [pc, #48]	; (24960 <chip_deinit+0xa8>)
   2492e:	4798      	blx	r3
   24930:	4b0c      	ldr	r3, [pc, #48]	; (24964 <chip_deinit+0xac>)
   24932:	0018      	movs	r0, r3
   24934:	4b0a      	ldr	r3, [pc, #40]	; (24960 <chip_deinit+0xa8>)
   24936:	4798      	blx	r3
   24938:	4b0b      	ldr	r3, [pc, #44]	; (24968 <chip_deinit+0xb0>)
   2493a:	0018      	movs	r0, r3
   2493c:	4b08      	ldr	r3, [pc, #32]	; (24960 <chip_deinit+0xa8>)
   2493e:	4798      	blx	r3
		goto ERR1;
   24940:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   24942:	1dfb      	adds	r3, r7, #7
   24944:	781b      	ldrb	r3, [r3, #0]
   24946:	b25b      	sxtb	r3, r3
}
   24948:	0018      	movs	r0, r3
   2494a:	46bd      	mov	sp, r7
   2494c:	b003      	add	sp, #12
   2494e:	bd90      	pop	{r4, r7, pc}
   24950:	00024a15 	.word	0x00024a15
   24954:	00000201 	.word	0x00000201
   24958:	0003b0d8 	.word	0x0003b0d8
   2495c:	0003b040 	.word	0x0003b040
   24960:	00020039 	.word	0x00020039
   24964:	0003b0b0 	.word	0x0003b0b0
   24968:	0003b06c 	.word	0x0003b06c
   2496c:	fffffbff 	.word	0xfffffbff
   24970:	00024a39 	.word	0x00024a39
   24974:	00000207 	.word	0x00000207

00024978 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   24978:	b590      	push	{r4, r7, lr}
   2497a:	b085      	sub	sp, #20
   2497c:	af00      	add	r7, sp, #0
   2497e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   24980:	230f      	movs	r3, #15
   24982:	18fb      	adds	r3, r7, r3
   24984:	2200      	movs	r2, #0
   24986:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   24988:	230f      	movs	r3, #15
   2498a:	18fc      	adds	r4, r7, r3
   2498c:	687b      	ldr	r3, [r7, #4]
   2498e:	0018      	movs	r0, r3
   24990:	4b05      	ldr	r3, [pc, #20]	; (249a8 <nm_bus_iface_init+0x30>)
   24992:	4798      	blx	r3
   24994:	0003      	movs	r3, r0
   24996:	7023      	strb	r3, [r4, #0]
	return ret;
   24998:	230f      	movs	r3, #15
   2499a:	18fb      	adds	r3, r7, r3
   2499c:	781b      	ldrb	r3, [r3, #0]
   2499e:	b25b      	sxtb	r3, r3
}
   249a0:	0018      	movs	r0, r3
   249a2:	46bd      	mov	sp, r7
   249a4:	b005      	add	sp, #20
   249a6:	bd90      	pop	{r4, r7, pc}
   249a8:	00022761 	.word	0x00022761

000249ac <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   249ac:	b590      	push	{r4, r7, lr}
   249ae:	b083      	sub	sp, #12
   249b0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   249b2:	1dfb      	adds	r3, r7, #7
   249b4:	2200      	movs	r2, #0
   249b6:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   249b8:	1dfc      	adds	r4, r7, #7
   249ba:	4b05      	ldr	r3, [pc, #20]	; (249d0 <nm_bus_iface_deinit+0x24>)
   249bc:	4798      	blx	r3
   249be:	0003      	movs	r3, r0
   249c0:	7023      	strb	r3, [r4, #0]

	return ret;
   249c2:	1dfb      	adds	r3, r7, #7
   249c4:	781b      	ldrb	r3, [r3, #0]
   249c6:	b25b      	sxtb	r3, r3
}
   249c8:	0018      	movs	r0, r3
   249ca:	46bd      	mov	sp, r7
   249cc:	b003      	add	sp, #12
   249ce:	bd90      	pop	{r4, r7, pc}
   249d0:	000228d9 	.word	0x000228d9

000249d4 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   249d4:	b580      	push	{r7, lr}
   249d6:	b082      	sub	sp, #8
   249d8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   249da:	1dfb      	adds	r3, r7, #7
   249dc:	2200      	movs	r2, #0
   249de:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   249e0:	4b03      	ldr	r3, [pc, #12]	; (249f0 <nm_bus_reset+0x1c>)
   249e2:	4798      	blx	r3
   249e4:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   249e6:	0018      	movs	r0, r3
   249e8:	46bd      	mov	sp, r7
   249ea:	b002      	add	sp, #8
   249ec:	bd80      	pop	{r7, pc}
   249ee:	46c0      	nop			; (mov r8, r8)
   249f0:	00026801 	.word	0x00026801

000249f4 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   249f4:	b580      	push	{r7, lr}
   249f6:	b082      	sub	sp, #8
   249f8:	af00      	add	r7, sp, #0
   249fa:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   249fc:	687b      	ldr	r3, [r7, #4]
   249fe:	0018      	movs	r0, r3
   24a00:	4b03      	ldr	r3, [pc, #12]	; (24a10 <nm_read_reg+0x1c>)
   24a02:	4798      	blx	r3
   24a04:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   24a06:	0018      	movs	r0, r3
   24a08:	46bd      	mov	sp, r7
   24a0a:	b002      	add	sp, #8
   24a0c:	bd80      	pop	{r7, pc}
   24a0e:	46c0      	nop			; (mov r8, r8)
   24a10:	00026995 	.word	0x00026995

00024a14 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   24a14:	b580      	push	{r7, lr}
   24a16:	b082      	sub	sp, #8
   24a18:	af00      	add	r7, sp, #0
   24a1a:	6078      	str	r0, [r7, #4]
   24a1c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   24a1e:	683a      	ldr	r2, [r7, #0]
   24a20:	687b      	ldr	r3, [r7, #4]
   24a22:	0011      	movs	r1, r2
   24a24:	0018      	movs	r0, r3
   24a26:	4b03      	ldr	r3, [pc, #12]	; (24a34 <nm_read_reg_with_ret+0x20>)
   24a28:	4798      	blx	r3
   24a2a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   24a2c:	0018      	movs	r0, r3
   24a2e:	46bd      	mov	sp, r7
   24a30:	b002      	add	sp, #8
   24a32:	bd80      	pop	{r7, pc}
   24a34:	000269b9 	.word	0x000269b9

00024a38 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   24a38:	b580      	push	{r7, lr}
   24a3a:	b082      	sub	sp, #8
   24a3c:	af00      	add	r7, sp, #0
   24a3e:	6078      	str	r0, [r7, #4]
   24a40:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   24a42:	683a      	ldr	r2, [r7, #0]
   24a44:	687b      	ldr	r3, [r7, #4]
   24a46:	0011      	movs	r1, r2
   24a48:	0018      	movs	r0, r3
   24a4a:	4b03      	ldr	r3, [pc, #12]	; (24a58 <nm_write_reg+0x20>)
   24a4c:	4798      	blx	r3
   24a4e:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   24a50:	0018      	movs	r0, r3
   24a52:	46bd      	mov	sp, r7
   24a54:	b002      	add	sp, #8
   24a56:	bd80      	pop	{r7, pc}
   24a58:	00026a09 	.word	0x00026a09

00024a5c <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   24a5c:	b580      	push	{r7, lr}
   24a5e:	b084      	sub	sp, #16
   24a60:	af00      	add	r7, sp, #0
   24a62:	60f8      	str	r0, [r7, #12]
   24a64:	60b9      	str	r1, [r7, #8]
   24a66:	1dbb      	adds	r3, r7, #6
   24a68:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   24a6a:	1dbb      	adds	r3, r7, #6
   24a6c:	881a      	ldrh	r2, [r3, #0]
   24a6e:	68b9      	ldr	r1, [r7, #8]
   24a70:	68fb      	ldr	r3, [r7, #12]
   24a72:	0018      	movs	r0, r3
   24a74:	4b03      	ldr	r3, [pc, #12]	; (24a84 <p_nm_read_block+0x28>)
   24a76:	4798      	blx	r3
   24a78:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   24a7a:	0018      	movs	r0, r3
   24a7c:	46bd      	mov	sp, r7
   24a7e:	b004      	add	sp, #16
   24a80:	bd80      	pop	{r7, pc}
   24a82:	46c0      	nop			; (mov r8, r8)
   24a84:	00026a59 	.word	0x00026a59

00024a88 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   24a88:	b580      	push	{r7, lr}
   24a8a:	b086      	sub	sp, #24
   24a8c:	af00      	add	r7, sp, #0
   24a8e:	60f8      	str	r0, [r7, #12]
   24a90:	60b9      	str	r1, [r7, #8]
   24a92:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   24a94:	4b2d      	ldr	r3, [pc, #180]	; (24b4c <nm_read_block+0xc4>)
   24a96:	881a      	ldrh	r2, [r3, #0]
   24a98:	2310      	movs	r3, #16
   24a9a:	18fb      	adds	r3, r7, r3
   24a9c:	3a08      	subs	r2, #8
   24a9e:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   24aa0:	2300      	movs	r3, #0
   24aa2:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   24aa4:	2313      	movs	r3, #19
   24aa6:	18fb      	adds	r3, r7, r3
   24aa8:	2200      	movs	r2, #0
   24aaa:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   24aac:	2310      	movs	r3, #16
   24aae:	18fb      	adds	r3, r7, r3
   24ab0:	881a      	ldrh	r2, [r3, #0]
   24ab2:	687b      	ldr	r3, [r7, #4]
   24ab4:	429a      	cmp	r2, r3
   24ab6:	d313      	bcc.n	24ae0 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   24ab8:	68ba      	ldr	r2, [r7, #8]
   24aba:	697b      	ldr	r3, [r7, #20]
   24abc:	18d1      	adds	r1, r2, r3
   24abe:	687b      	ldr	r3, [r7, #4]
   24ac0:	b29a      	uxth	r2, r3
   24ac2:	68fb      	ldr	r3, [r7, #12]
   24ac4:	0018      	movs	r0, r3
   24ac6:	4b22      	ldr	r3, [pc, #136]	; (24b50 <nm_read_block+0xc8>)
   24ac8:	4798      	blx	r3
   24aca:	0003      	movs	r3, r0
   24acc:	b2da      	uxtb	r2, r3
   24ace:	2313      	movs	r3, #19
   24ad0:	18fb      	adds	r3, r7, r3
   24ad2:	781b      	ldrb	r3, [r3, #0]
   24ad4:	18d3      	adds	r3, r2, r3
   24ad6:	b2da      	uxtb	r2, r3
   24ad8:	2313      	movs	r3, #19
   24ada:	18fb      	adds	r3, r7, r3
   24adc:	701a      	strb	r2, [r3, #0]
			break;
   24ade:	e02d      	b.n	24b3c <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   24ae0:	68ba      	ldr	r2, [r7, #8]
   24ae2:	697b      	ldr	r3, [r7, #20]
   24ae4:	18d1      	adds	r1, r2, r3
   24ae6:	2310      	movs	r3, #16
   24ae8:	18fb      	adds	r3, r7, r3
   24aea:	881a      	ldrh	r2, [r3, #0]
   24aec:	68fb      	ldr	r3, [r7, #12]
   24aee:	0018      	movs	r0, r3
   24af0:	4b17      	ldr	r3, [pc, #92]	; (24b50 <nm_read_block+0xc8>)
   24af2:	4798      	blx	r3
   24af4:	0003      	movs	r3, r0
   24af6:	b2da      	uxtb	r2, r3
   24af8:	2313      	movs	r3, #19
   24afa:	18fb      	adds	r3, r7, r3
   24afc:	781b      	ldrb	r3, [r3, #0]
   24afe:	18d3      	adds	r3, r2, r3
   24b00:	b2da      	uxtb	r2, r3
   24b02:	2313      	movs	r3, #19
   24b04:	18fb      	adds	r3, r7, r3
   24b06:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   24b08:	2313      	movs	r3, #19
   24b0a:	18fb      	adds	r3, r7, r3
   24b0c:	781b      	ldrb	r3, [r3, #0]
   24b0e:	b25b      	sxtb	r3, r3
   24b10:	2b00      	cmp	r3, #0
   24b12:	d112      	bne.n	24b3a <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   24b14:	2310      	movs	r3, #16
   24b16:	18fb      	adds	r3, r7, r3
   24b18:	881b      	ldrh	r3, [r3, #0]
   24b1a:	687a      	ldr	r2, [r7, #4]
   24b1c:	1ad3      	subs	r3, r2, r3
   24b1e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   24b20:	2310      	movs	r3, #16
   24b22:	18fb      	adds	r3, r7, r3
   24b24:	881b      	ldrh	r3, [r3, #0]
   24b26:	697a      	ldr	r2, [r7, #20]
   24b28:	18d3      	adds	r3, r2, r3
   24b2a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   24b2c:	2310      	movs	r3, #16
   24b2e:	18fb      	adds	r3, r7, r3
   24b30:	881b      	ldrh	r3, [r3, #0]
   24b32:	68fa      	ldr	r2, [r7, #12]
   24b34:	18d3      	adds	r3, r2, r3
   24b36:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   24b38:	e7b8      	b.n	24aac <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   24b3a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   24b3c:	2313      	movs	r3, #19
   24b3e:	18fb      	adds	r3, r7, r3
   24b40:	781b      	ldrb	r3, [r3, #0]
   24b42:	b25b      	sxtb	r3, r3
}
   24b44:	0018      	movs	r0, r3
   24b46:	46bd      	mov	sp, r7
   24b48:	b006      	add	sp, #24
   24b4a:	bd80      	pop	{r7, pc}
   24b4c:	20000114 	.word	0x20000114
   24b50:	00024a5d 	.word	0x00024a5d

00024b54 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   24b54:	b580      	push	{r7, lr}
   24b56:	b084      	sub	sp, #16
   24b58:	af00      	add	r7, sp, #0
   24b5a:	60f8      	str	r0, [r7, #12]
   24b5c:	60b9      	str	r1, [r7, #8]
   24b5e:	1dbb      	adds	r3, r7, #6
   24b60:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   24b62:	1dbb      	adds	r3, r7, #6
   24b64:	881a      	ldrh	r2, [r3, #0]
   24b66:	68b9      	ldr	r1, [r7, #8]
   24b68:	68fb      	ldr	r3, [r7, #12]
   24b6a:	0018      	movs	r0, r3
   24b6c:	4b03      	ldr	r3, [pc, #12]	; (24b7c <p_nm_write_block+0x28>)
   24b6e:	4798      	blx	r3
   24b70:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   24b72:	0018      	movs	r0, r3
   24b74:	46bd      	mov	sp, r7
   24b76:	b004      	add	sp, #16
   24b78:	bd80      	pop	{r7, pc}
   24b7a:	46c0      	nop			; (mov r8, r8)
   24b7c:	00026ab1 	.word	0x00026ab1

00024b80 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   24b80:	b580      	push	{r7, lr}
   24b82:	b086      	sub	sp, #24
   24b84:	af00      	add	r7, sp, #0
   24b86:	60f8      	str	r0, [r7, #12]
   24b88:	60b9      	str	r1, [r7, #8]
   24b8a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   24b8c:	4b2d      	ldr	r3, [pc, #180]	; (24c44 <nm_write_block+0xc4>)
   24b8e:	881a      	ldrh	r2, [r3, #0]
   24b90:	2310      	movs	r3, #16
   24b92:	18fb      	adds	r3, r7, r3
   24b94:	3a08      	subs	r2, #8
   24b96:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   24b98:	2300      	movs	r3, #0
   24b9a:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   24b9c:	2313      	movs	r3, #19
   24b9e:	18fb      	adds	r3, r7, r3
   24ba0:	2200      	movs	r2, #0
   24ba2:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   24ba4:	2310      	movs	r3, #16
   24ba6:	18fb      	adds	r3, r7, r3
   24ba8:	881a      	ldrh	r2, [r3, #0]
   24baa:	687b      	ldr	r3, [r7, #4]
   24bac:	429a      	cmp	r2, r3
   24bae:	d313      	bcc.n	24bd8 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   24bb0:	68ba      	ldr	r2, [r7, #8]
   24bb2:	697b      	ldr	r3, [r7, #20]
   24bb4:	18d1      	adds	r1, r2, r3
   24bb6:	687b      	ldr	r3, [r7, #4]
   24bb8:	b29a      	uxth	r2, r3
   24bba:	68fb      	ldr	r3, [r7, #12]
   24bbc:	0018      	movs	r0, r3
   24bbe:	4b22      	ldr	r3, [pc, #136]	; (24c48 <nm_write_block+0xc8>)
   24bc0:	4798      	blx	r3
   24bc2:	0003      	movs	r3, r0
   24bc4:	b2da      	uxtb	r2, r3
   24bc6:	2313      	movs	r3, #19
   24bc8:	18fb      	adds	r3, r7, r3
   24bca:	781b      	ldrb	r3, [r3, #0]
   24bcc:	18d3      	adds	r3, r2, r3
   24bce:	b2da      	uxtb	r2, r3
   24bd0:	2313      	movs	r3, #19
   24bd2:	18fb      	adds	r3, r7, r3
   24bd4:	701a      	strb	r2, [r3, #0]
			break;
   24bd6:	e02d      	b.n	24c34 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   24bd8:	68ba      	ldr	r2, [r7, #8]
   24bda:	697b      	ldr	r3, [r7, #20]
   24bdc:	18d1      	adds	r1, r2, r3
   24bde:	2310      	movs	r3, #16
   24be0:	18fb      	adds	r3, r7, r3
   24be2:	881a      	ldrh	r2, [r3, #0]
   24be4:	68fb      	ldr	r3, [r7, #12]
   24be6:	0018      	movs	r0, r3
   24be8:	4b17      	ldr	r3, [pc, #92]	; (24c48 <nm_write_block+0xc8>)
   24bea:	4798      	blx	r3
   24bec:	0003      	movs	r3, r0
   24bee:	b2da      	uxtb	r2, r3
   24bf0:	2313      	movs	r3, #19
   24bf2:	18fb      	adds	r3, r7, r3
   24bf4:	781b      	ldrb	r3, [r3, #0]
   24bf6:	18d3      	adds	r3, r2, r3
   24bf8:	b2da      	uxtb	r2, r3
   24bfa:	2313      	movs	r3, #19
   24bfc:	18fb      	adds	r3, r7, r3
   24bfe:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   24c00:	2313      	movs	r3, #19
   24c02:	18fb      	adds	r3, r7, r3
   24c04:	781b      	ldrb	r3, [r3, #0]
   24c06:	b25b      	sxtb	r3, r3
   24c08:	2b00      	cmp	r3, #0
   24c0a:	d112      	bne.n	24c32 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   24c0c:	2310      	movs	r3, #16
   24c0e:	18fb      	adds	r3, r7, r3
   24c10:	881b      	ldrh	r3, [r3, #0]
   24c12:	687a      	ldr	r2, [r7, #4]
   24c14:	1ad3      	subs	r3, r2, r3
   24c16:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   24c18:	2310      	movs	r3, #16
   24c1a:	18fb      	adds	r3, r7, r3
   24c1c:	881b      	ldrh	r3, [r3, #0]
   24c1e:	697a      	ldr	r2, [r7, #20]
   24c20:	18d3      	adds	r3, r2, r3
   24c22:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   24c24:	2310      	movs	r3, #16
   24c26:	18fb      	adds	r3, r7, r3
   24c28:	881b      	ldrh	r3, [r3, #0]
   24c2a:	68fa      	ldr	r2, [r7, #12]
   24c2c:	18d3      	adds	r3, r2, r3
   24c2e:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   24c30:	e7b8      	b.n	24ba4 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   24c32:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   24c34:	2313      	movs	r3, #19
   24c36:	18fb      	adds	r3, r7, r3
   24c38:	781b      	ldrb	r3, [r3, #0]
   24c3a:	b25b      	sxtb	r3, r3
}
   24c3c:	0018      	movs	r0, r3
   24c3e:	46bd      	mov	sp, r7
   24c40:	b006      	add	sp, #24
   24c42:	bd80      	pop	{r7, pc}
   24c44:	20000114 	.word	0x20000114
   24c48:	00024b55 	.word	0x00024b55

00024c4c <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   24c4c:	b590      	push	{r4, r7, lr}
   24c4e:	b089      	sub	sp, #36	; 0x24
   24c50:	af00      	add	r7, sp, #0
   24c52:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   24c54:	2300      	movs	r3, #0
   24c56:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   24c58:	231f      	movs	r3, #31
   24c5a:	18fb      	adds	r3, r7, r3
   24c5c:	2200      	movs	r2, #0
   24c5e:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   24c60:	230c      	movs	r3, #12
   24c62:	18fb      	adds	r3, r7, r3
   24c64:	0018      	movs	r0, r3
   24c66:	2308      	movs	r3, #8
   24c68:	001a      	movs	r2, r3
   24c6a:	2100      	movs	r1, #0
   24c6c:	4b64      	ldr	r3, [pc, #400]	; (24e00 <nm_get_firmware_full_info+0x1b4>)
   24c6e:	4798      	blx	r3
	if (pstrRev != NULL)
   24c70:	687b      	ldr	r3, [r7, #4]
   24c72:	2b00      	cmp	r3, #0
   24c74:	d100      	bne.n	24c78 <nm_get_firmware_full_info+0x2c>
   24c76:	e0ba      	b.n	24dee <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   24c78:	687b      	ldr	r3, [r7, #4]
   24c7a:	2228      	movs	r2, #40	; 0x28
   24c7c:	2100      	movs	r1, #0
   24c7e:	0018      	movs	r0, r3
   24c80:	4b60      	ldr	r3, [pc, #384]	; (24e04 <nm_get_firmware_full_info+0x1b8>)
   24c82:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   24c84:	231f      	movs	r3, #31
   24c86:	18fc      	adds	r4, r7, r3
   24c88:	2314      	movs	r3, #20
   24c8a:	18fb      	adds	r3, r7, r3
   24c8c:	4a5e      	ldr	r2, [pc, #376]	; (24e08 <nm_get_firmware_full_info+0x1bc>)
   24c8e:	0019      	movs	r1, r3
   24c90:	0010      	movs	r0, r2
   24c92:	4b5e      	ldr	r3, [pc, #376]	; (24e0c <nm_get_firmware_full_info+0x1c0>)
   24c94:	4798      	blx	r3
   24c96:	0003      	movs	r3, r0
   24c98:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   24c9a:	231f      	movs	r3, #31
   24c9c:	18fb      	adds	r3, r7, r3
   24c9e:	781b      	ldrb	r3, [r3, #0]
   24ca0:	b25b      	sxtb	r3, r3
   24ca2:	2b00      	cmp	r3, #0
   24ca4:	d000      	beq.n	24ca8 <nm_get_firmware_full_info+0x5c>
   24ca6:	e0a2      	b.n	24dee <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   24ca8:	697b      	ldr	r3, [r7, #20]
   24caa:	2b00      	cmp	r3, #0
   24cac:	d100      	bne.n	24cb0 <nm_get_firmware_full_info+0x64>
   24cae:	e09a      	b.n	24de6 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   24cb0:	697b      	ldr	r3, [r7, #20]
   24cb2:	22c0      	movs	r2, #192	; 0xc0
   24cb4:	0292      	lsls	r2, r2, #10
   24cb6:	4313      	orrs	r3, r2
   24cb8:	221f      	movs	r2, #31
   24cba:	18bc      	adds	r4, r7, r2
   24cbc:	220c      	movs	r2, #12
   24cbe:	18b9      	adds	r1, r7, r2
   24cc0:	2208      	movs	r2, #8
   24cc2:	0018      	movs	r0, r3
   24cc4:	4b52      	ldr	r3, [pc, #328]	; (24e10 <nm_get_firmware_full_info+0x1c4>)
   24cc6:	4798      	blx	r3
   24cc8:	0003      	movs	r3, r0
   24cca:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   24ccc:	231f      	movs	r3, #31
   24cce:	18fb      	adds	r3, r7, r3
   24cd0:	781b      	ldrb	r3, [r3, #0]
   24cd2:	b25b      	sxtb	r3, r3
   24cd4:	2b00      	cmp	r3, #0
   24cd6:	d000      	beq.n	24cda <nm_get_firmware_full_info+0x8e>
   24cd8:	e089      	b.n	24dee <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   24cda:	230c      	movs	r3, #12
   24cdc:	18fb      	adds	r3, r7, r3
   24cde:	685b      	ldr	r3, [r3, #4]
   24ce0:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   24ce2:	697b      	ldr	r3, [r7, #20]
   24ce4:	041b      	lsls	r3, r3, #16
   24ce6:	0c1b      	lsrs	r3, r3, #16
   24ce8:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   24cea:	697b      	ldr	r3, [r7, #20]
   24cec:	2b00      	cmp	r3, #0
   24cee:	d100      	bne.n	24cf2 <nm_get_firmware_full_info+0xa6>
   24cf0:	e074      	b.n	24ddc <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   24cf2:	697b      	ldr	r3, [r7, #20]
   24cf4:	22c0      	movs	r2, #192	; 0xc0
   24cf6:	0292      	lsls	r2, r2, #10
   24cf8:	4313      	orrs	r3, r2
   24cfa:	221f      	movs	r2, #31
   24cfc:	18bc      	adds	r4, r7, r2
   24cfe:	6879      	ldr	r1, [r7, #4]
   24d00:	2228      	movs	r2, #40	; 0x28
   24d02:	0018      	movs	r0, r3
   24d04:	4b42      	ldr	r3, [pc, #264]	; (24e10 <nm_get_firmware_full_info+0x1c4>)
   24d06:	4798      	blx	r3
   24d08:	0003      	movs	r3, r0
   24d0a:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   24d0c:	231f      	movs	r3, #31
   24d0e:	18fb      	adds	r3, r7, r3
   24d10:	781b      	ldrb	r3, [r3, #0]
   24d12:	b25b      	sxtb	r3, r3
   24d14:	2b00      	cmp	r3, #0
   24d16:	d16a      	bne.n	24dee <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   24d18:	687b      	ldr	r3, [r7, #4]
   24d1a:	791b      	ldrb	r3, [r3, #4]
   24d1c:	021b      	lsls	r3, r3, #8
   24d1e:	b21a      	sxth	r2, r3
   24d20:	687b      	ldr	r3, [r7, #4]
   24d22:	795b      	ldrb	r3, [r3, #5]
   24d24:	011b      	lsls	r3, r3, #4
   24d26:	b21b      	sxth	r3, r3
   24d28:	21ff      	movs	r1, #255	; 0xff
   24d2a:	400b      	ands	r3, r1
   24d2c:	b21b      	sxth	r3, r3
   24d2e:	4313      	orrs	r3, r2
   24d30:	b21a      	sxth	r2, r3
   24d32:	687b      	ldr	r3, [r7, #4]
   24d34:	799b      	ldrb	r3, [r3, #6]
   24d36:	b21b      	sxth	r3, r3
   24d38:	210f      	movs	r1, #15
   24d3a:	400b      	ands	r3, r1
   24d3c:	b21b      	sxth	r3, r3
   24d3e:	4313      	orrs	r3, r2
   24d40:	b21a      	sxth	r2, r3
   24d42:	231c      	movs	r3, #28
   24d44:	18fb      	adds	r3, r7, r3
   24d46:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   24d48:	231a      	movs	r3, #26
   24d4a:	18fb      	adds	r3, r7, r3
   24d4c:	4a31      	ldr	r2, [pc, #196]	; (24e14 <nm_get_firmware_full_info+0x1c8>)
   24d4e:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   24d50:	687b      	ldr	r3, [r7, #4]
   24d52:	79db      	ldrb	r3, [r3, #7]
   24d54:	021b      	lsls	r3, r3, #8
   24d56:	b21a      	sxth	r2, r3
   24d58:	687b      	ldr	r3, [r7, #4]
   24d5a:	7a1b      	ldrb	r3, [r3, #8]
   24d5c:	011b      	lsls	r3, r3, #4
   24d5e:	b21b      	sxth	r3, r3
   24d60:	21ff      	movs	r1, #255	; 0xff
   24d62:	400b      	ands	r3, r1
   24d64:	b21b      	sxth	r3, r3
   24d66:	4313      	orrs	r3, r2
   24d68:	b21a      	sxth	r2, r3
   24d6a:	687b      	ldr	r3, [r7, #4]
   24d6c:	7a5b      	ldrb	r3, [r3, #9]
   24d6e:	b21b      	sxth	r3, r3
   24d70:	210f      	movs	r1, #15
   24d72:	400b      	ands	r3, r1
   24d74:	b21b      	sxth	r3, r3
   24d76:	4313      	orrs	r3, r2
   24d78:	b21a      	sxth	r2, r3
   24d7a:	2318      	movs	r3, #24
   24d7c:	18fb      	adds	r3, r7, r3
   24d7e:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   24d80:	231c      	movs	r3, #28
   24d82:	18fb      	adds	r3, r7, r3
   24d84:	881b      	ldrh	r3, [r3, #0]
   24d86:	2b00      	cmp	r3, #0
   24d88:	d009      	beq.n	24d9e <nm_get_firmware_full_info+0x152>
   24d8a:	2318      	movs	r3, #24
   24d8c:	18fb      	adds	r3, r7, r3
   24d8e:	881b      	ldrh	r3, [r3, #0]
   24d90:	2b00      	cmp	r3, #0
   24d92:	d004      	beq.n	24d9e <nm_get_firmware_full_info+0x152>
   24d94:	2318      	movs	r3, #24
   24d96:	18fb      	adds	r3, r7, r3
   24d98:	881b      	ldrh	r3, [r3, #0]
   24d9a:	2b00      	cmp	r3, #0
   24d9c:	d104      	bne.n	24da8 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   24d9e:	231f      	movs	r3, #31
   24da0:	18fb      	adds	r3, r7, r3
   24da2:	22f4      	movs	r2, #244	; 0xf4
   24da4:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   24da6:	e022      	b.n	24dee <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   24da8:	231a      	movs	r3, #26
   24daa:	18fa      	adds	r2, r7, r3
   24dac:	2318      	movs	r3, #24
   24dae:	18fb      	adds	r3, r7, r3
   24db0:	8812      	ldrh	r2, [r2, #0]
   24db2:	881b      	ldrh	r3, [r3, #0]
   24db4:	429a      	cmp	r2, r3
   24db6:	d204      	bcs.n	24dc2 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   24db8:	231f      	movs	r3, #31
   24dba:	18fb      	adds	r3, r7, r3
   24dbc:	22f3      	movs	r2, #243	; 0xf3
   24dbe:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   24dc0:	e015      	b.n	24dee <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   24dc2:	231a      	movs	r3, #26
   24dc4:	18fa      	adds	r2, r7, r3
   24dc6:	231c      	movs	r3, #28
   24dc8:	18fb      	adds	r3, r7, r3
   24dca:	8812      	ldrh	r2, [r2, #0]
   24dcc:	881b      	ldrh	r3, [r3, #0]
   24dce:	429a      	cmp	r2, r3
   24dd0:	d90d      	bls.n	24dee <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   24dd2:	231f      	movs	r3, #31
   24dd4:	18fb      	adds	r3, r7, r3
   24dd6:	22f3      	movs	r2, #243	; 0xf3
   24dd8:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   24dda:	e008      	b.n	24dee <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   24ddc:	231f      	movs	r3, #31
   24dde:	18fb      	adds	r3, r7, r3
   24de0:	22f4      	movs	r2, #244	; 0xf4
   24de2:	701a      	strb	r2, [r3, #0]
   24de4:	e003      	b.n	24dee <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   24de6:	231f      	movs	r3, #31
   24de8:	18fb      	adds	r3, r7, r3
   24dea:	22f4      	movs	r2, #244	; 0xf4
   24dec:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   24dee:	231f      	movs	r3, #31
   24df0:	18fb      	adds	r3, r7, r3
   24df2:	781b      	ldrb	r3, [r3, #0]
   24df4:	b25b      	sxtb	r3, r3
}
   24df6:	0018      	movs	r0, r3
   24df8:	46bd      	mov	sp, r7
   24dfa:	b009      	add	sp, #36	; 0x24
   24dfc:	bd90      	pop	{r4, r7, pc}
   24dfe:	46c0      	nop			; (mov r8, r8)
   24e00:	00036c9f 	.word	0x00036c9f
   24e04:	00022985 	.word	0x00022985
   24e08:	000c0008 	.word	0x000c0008
   24e0c:	00024a15 	.word	0x00024a15
   24e10:	00024a89 	.word	0x00024a89
   24e14:	00001354 	.word	0x00001354

00024e18 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   24e18:	b590      	push	{r4, r7, lr}
   24e1a:	b085      	sub	sp, #20
   24e1c:	af00      	add	r7, sp, #0
   24e1e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   24e20:	230f      	movs	r3, #15
   24e22:	18fb      	adds	r3, r7, r3
   24e24:	2200      	movs	r2, #0
   24e26:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   24e28:	687b      	ldr	r3, [r7, #4]
   24e2a:	2b00      	cmp	r3, #0
   24e2c:	d013      	beq.n	24e56 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   24e2e:	230e      	movs	r3, #14
   24e30:	18fb      	adds	r3, r7, r3
   24e32:	687a      	ldr	r2, [r7, #4]
   24e34:	7812      	ldrb	r2, [r2, #0]
   24e36:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   24e38:	230e      	movs	r3, #14
   24e3a:	18fb      	adds	r3, r7, r3
   24e3c:	781b      	ldrb	r3, [r3, #0]
   24e3e:	2b00      	cmp	r3, #0
   24e40:	d004      	beq.n	24e4c <nm_drv_init+0x34>
   24e42:	230e      	movs	r3, #14
   24e44:	18fb      	adds	r3, r7, r3
   24e46:	781b      	ldrb	r3, [r3, #0]
   24e48:	2b04      	cmp	r3, #4
   24e4a:	d908      	bls.n	24e5e <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   24e4c:	230e      	movs	r3, #14
   24e4e:	18fb      	adds	r3, r7, r3
   24e50:	2201      	movs	r2, #1
   24e52:	701a      	strb	r2, [r3, #0]
   24e54:	e003      	b.n	24e5e <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   24e56:	230e      	movs	r3, #14
   24e58:	18fb      	adds	r3, r7, r3
   24e5a:	2201      	movs	r2, #1
   24e5c:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   24e5e:	230f      	movs	r3, #15
   24e60:	18fc      	adds	r4, r7, r3
   24e62:	2000      	movs	r0, #0
   24e64:	4b41      	ldr	r3, [pc, #260]	; (24f6c <nm_drv_init+0x154>)
   24e66:	4798      	blx	r3
   24e68:	0003      	movs	r3, r0
   24e6a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   24e6c:	230f      	movs	r3, #15
   24e6e:	18fb      	adds	r3, r7, r3
   24e70:	781b      	ldrb	r3, [r3, #0]
   24e72:	b25b      	sxtb	r3, r3
   24e74:	2b00      	cmp	r3, #0
   24e76:	d00f      	beq.n	24e98 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   24e78:	2390      	movs	r3, #144	; 0x90
   24e7a:	005a      	lsls	r2, r3, #1
   24e7c:	493c      	ldr	r1, [pc, #240]	; (24f70 <nm_drv_init+0x158>)
   24e7e:	4b3d      	ldr	r3, [pc, #244]	; (24f74 <nm_drv_init+0x15c>)
   24e80:	0018      	movs	r0, r3
   24e82:	4b3d      	ldr	r3, [pc, #244]	; (24f78 <nm_drv_init+0x160>)
   24e84:	4798      	blx	r3
   24e86:	4b3d      	ldr	r3, [pc, #244]	; (24f7c <nm_drv_init+0x164>)
   24e88:	0018      	movs	r0, r3
   24e8a:	4b3b      	ldr	r3, [pc, #236]	; (24f78 <nm_drv_init+0x160>)
   24e8c:	4798      	blx	r3
   24e8e:	4b3c      	ldr	r3, [pc, #240]	; (24f80 <nm_drv_init+0x168>)
   24e90:	0018      	movs	r0, r3
   24e92:	4b39      	ldr	r3, [pc, #228]	; (24f78 <nm_drv_init+0x160>)
   24e94:	4798      	blx	r3
		goto ERR1;
   24e96:	e061      	b.n	24f5c <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   24e98:	4b3a      	ldr	r3, [pc, #232]	; (24f84 <nm_drv_init+0x16c>)
   24e9a:	0018      	movs	r0, r3
   24e9c:	4b36      	ldr	r3, [pc, #216]	; (24f78 <nm_drv_init+0x160>)
   24e9e:	4798      	blx	r3
   24ea0:	4b39      	ldr	r3, [pc, #228]	; (24f88 <nm_drv_init+0x170>)
   24ea2:	4798      	blx	r3
   24ea4:	0002      	movs	r2, r0
   24ea6:	4b39      	ldr	r3, [pc, #228]	; (24f8c <nm_drv_init+0x174>)
   24ea8:	0011      	movs	r1, r2
   24eaa:	0018      	movs	r0, r3
   24eac:	4b32      	ldr	r3, [pc, #200]	; (24f78 <nm_drv_init+0x160>)
   24eae:	4798      	blx	r3
   24eb0:	4b33      	ldr	r3, [pc, #204]	; (24f80 <nm_drv_init+0x168>)
   24eb2:	0018      	movs	r0, r3
   24eb4:	4b30      	ldr	r3, [pc, #192]	; (24f78 <nm_drv_init+0x160>)
   24eb6:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   24eb8:	4b35      	ldr	r3, [pc, #212]	; (24f90 <nm_drv_init+0x178>)
   24eba:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   24ebc:	230f      	movs	r3, #15
   24ebe:	18fc      	adds	r4, r7, r3
   24ec0:	230e      	movs	r3, #14
   24ec2:	18fb      	adds	r3, r7, r3
   24ec4:	781b      	ldrb	r3, [r3, #0]
   24ec6:	0018      	movs	r0, r3
   24ec8:	4b32      	ldr	r3, [pc, #200]	; (24f94 <nm_drv_init+0x17c>)
   24eca:	4798      	blx	r3
   24ecc:	0003      	movs	r3, r0
   24ece:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   24ed0:	230f      	movs	r3, #15
   24ed2:	18fb      	adds	r3, r7, r3
   24ed4:	781b      	ldrb	r3, [r3, #0]
   24ed6:	b25b      	sxtb	r3, r3
   24ed8:	2b00      	cmp	r3, #0
   24eda:	d13a      	bne.n	24f52 <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   24edc:	230f      	movs	r3, #15
   24ede:	18fc      	adds	r4, r7, r3
   24ee0:	230e      	movs	r3, #14
   24ee2:	18fb      	adds	r3, r7, r3
   24ee4:	781b      	ldrb	r3, [r3, #0]
   24ee6:	0018      	movs	r0, r3
   24ee8:	4b2b      	ldr	r3, [pc, #172]	; (24f98 <nm_drv_init+0x180>)
   24eea:	4798      	blx	r3
   24eec:	0003      	movs	r3, r0
   24eee:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   24ef0:	230f      	movs	r3, #15
   24ef2:	18fb      	adds	r3, r7, r3
   24ef4:	781b      	ldrb	r3, [r3, #0]
   24ef6:	b25b      	sxtb	r3, r3
   24ef8:	2b00      	cmp	r3, #0
   24efa:	d12c      	bne.n	24f56 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   24efc:	230e      	movs	r3, #14
   24efe:	18fb      	adds	r3, r7, r3
   24f00:	781b      	ldrb	r3, [r3, #0]
   24f02:	2b02      	cmp	r3, #2
   24f04:	d02a      	beq.n	24f5c <nm_drv_init+0x144>
   24f06:	230e      	movs	r3, #14
   24f08:	18fb      	adds	r3, r7, r3
   24f0a:	781b      	ldrb	r3, [r3, #0]
   24f0c:	2b03      	cmp	r3, #3
   24f0e:	d025      	beq.n	24f5c <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   24f10:	230f      	movs	r3, #15
   24f12:	18fc      	adds	r4, r7, r3
   24f14:	4b21      	ldr	r3, [pc, #132]	; (24f9c <nm_drv_init+0x184>)
   24f16:	4798      	blx	r3
   24f18:	0003      	movs	r3, r0
   24f1a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   24f1c:	230f      	movs	r3, #15
   24f1e:	18fb      	adds	r3, r7, r3
   24f20:	781b      	ldrb	r3, [r3, #0]
   24f22:	b25b      	sxtb	r3, r3
   24f24:	2b00      	cmp	r3, #0
   24f26:	d00f      	beq.n	24f48 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   24f28:	23a7      	movs	r3, #167	; 0xa7
   24f2a:	005a      	lsls	r2, r3, #1
   24f2c:	4910      	ldr	r1, [pc, #64]	; (24f70 <nm_drv_init+0x158>)
   24f2e:	4b11      	ldr	r3, [pc, #68]	; (24f74 <nm_drv_init+0x15c>)
   24f30:	0018      	movs	r0, r3
   24f32:	4b11      	ldr	r3, [pc, #68]	; (24f78 <nm_drv_init+0x160>)
   24f34:	4798      	blx	r3
   24f36:	4b1a      	ldr	r3, [pc, #104]	; (24fa0 <nm_drv_init+0x188>)
   24f38:	0018      	movs	r0, r3
   24f3a:	4b0f      	ldr	r3, [pc, #60]	; (24f78 <nm_drv_init+0x160>)
   24f3c:	4798      	blx	r3
   24f3e:	4b10      	ldr	r3, [pc, #64]	; (24f80 <nm_drv_init+0x168>)
   24f40:	0018      	movs	r0, r3
   24f42:	4b0d      	ldr	r3, [pc, #52]	; (24f78 <nm_drv_init+0x160>)
   24f44:	4798      	blx	r3
		goto ERR2;
   24f46:	e007      	b.n	24f58 <nm_drv_init+0x140>
	}
	return ret;
   24f48:	230f      	movs	r3, #15
   24f4a:	18fb      	adds	r3, r7, r3
   24f4c:	781b      	ldrb	r3, [r3, #0]
   24f4e:	b25b      	sxtb	r3, r3
   24f50:	e008      	b.n	24f64 <nm_drv_init+0x14c>
		goto ERR2;
   24f52:	46c0      	nop			; (mov r8, r8)
   24f54:	e000      	b.n	24f58 <nm_drv_init+0x140>
		goto ERR2;
   24f56:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   24f58:	4b12      	ldr	r3, [pc, #72]	; (24fa4 <nm_drv_init+0x18c>)
   24f5a:	4798      	blx	r3
ERR1:
	return ret;
   24f5c:	230f      	movs	r3, #15
   24f5e:	18fb      	adds	r3, r7, r3
   24f60:	781b      	ldrb	r3, [r3, #0]
   24f62:	b25b      	sxtb	r3, r3
}
   24f64:	0018      	movs	r0, r3
   24f66:	46bd      	mov	sp, r7
   24f68:	b005      	add	sp, #20
   24f6a:	bd90      	pop	{r4, r7, pc}
   24f6c:	00024979 	.word	0x00024979
   24f70:	0003b1b4 	.word	0x0003b1b4
   24f74:	0003b0e4 	.word	0x0003b0e4
   24f78:	00020039 	.word	0x00020039
   24f7c:	0003b0f8 	.word	0x0003b0f8
   24f80:	0003b114 	.word	0x0003b114
   24f84:	0003b118 	.word	0x0003b118
   24f88:	00024315 	.word	0x00024315
   24f8c:	0003b124 	.word	0x0003b124
   24f90:	00026831 	.word	0x00026831
   24f94:	0002466d 	.word	0x0002466d
   24f98:	00024805 	.word	0x00024805
   24f9c:	00024261 	.word	0x00024261
   24fa0:	0003b134 	.word	0x0003b134
   24fa4:	000249ad 	.word	0x000249ad

00024fa8 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   24fa8:	b590      	push	{r4, r7, lr}
   24faa:	b085      	sub	sp, #20
   24fac:	af00      	add	r7, sp, #0
   24fae:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   24fb0:	230f      	movs	r3, #15
   24fb2:	18fc      	adds	r4, r7, r3
   24fb4:	4b2e      	ldr	r3, [pc, #184]	; (25070 <nm_drv_deinit+0xc8>)
   24fb6:	4798      	blx	r3
   24fb8:	0003      	movs	r3, r0
   24fba:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   24fbc:	230f      	movs	r3, #15
   24fbe:	18fb      	adds	r3, r7, r3
   24fc0:	781b      	ldrb	r3, [r3, #0]
   24fc2:	b25b      	sxtb	r3, r3
   24fc4:	2b00      	cmp	r3, #0
   24fc6:	d010      	beq.n	24fea <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   24fc8:	2366      	movs	r3, #102	; 0x66
   24fca:	33ff      	adds	r3, #255	; 0xff
   24fcc:	001a      	movs	r2, r3
   24fce:	4929      	ldr	r1, [pc, #164]	; (25074 <nm_drv_deinit+0xcc>)
   24fd0:	4b29      	ldr	r3, [pc, #164]	; (25078 <nm_drv_deinit+0xd0>)
   24fd2:	0018      	movs	r0, r3
   24fd4:	4b29      	ldr	r3, [pc, #164]	; (2507c <nm_drv_deinit+0xd4>)
   24fd6:	4798      	blx	r3
   24fd8:	4b29      	ldr	r3, [pc, #164]	; (25080 <nm_drv_deinit+0xd8>)
   24fda:	0018      	movs	r0, r3
   24fdc:	4b27      	ldr	r3, [pc, #156]	; (2507c <nm_drv_deinit+0xd4>)
   24fde:	4798      	blx	r3
   24fe0:	4b28      	ldr	r3, [pc, #160]	; (25084 <nm_drv_deinit+0xdc>)
   24fe2:	0018      	movs	r0, r3
   24fe4:	4b25      	ldr	r3, [pc, #148]	; (2507c <nm_drv_deinit+0xd4>)
   24fe6:	4798      	blx	r3
		goto ERR1;
   24fe8:	e03a      	b.n	25060 <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   24fea:	230f      	movs	r3, #15
   24fec:	18fc      	adds	r4, r7, r3
   24fee:	2000      	movs	r0, #0
   24ff0:	4b25      	ldr	r3, [pc, #148]	; (25088 <nm_drv_deinit+0xe0>)
   24ff2:	4798      	blx	r3
   24ff4:	0003      	movs	r3, r0
   24ff6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   24ff8:	230f      	movs	r3, #15
   24ffa:	18fb      	adds	r3, r7, r3
   24ffc:	781b      	ldrb	r3, [r3, #0]
   24ffe:	b25b      	sxtb	r3, r3
   25000:	2b00      	cmp	r3, #0
   25002:	d00f      	beq.n	25024 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   25004:	23b6      	movs	r3, #182	; 0xb6
   25006:	005a      	lsls	r2, r3, #1
   25008:	491a      	ldr	r1, [pc, #104]	; (25074 <nm_drv_deinit+0xcc>)
   2500a:	4b1b      	ldr	r3, [pc, #108]	; (25078 <nm_drv_deinit+0xd0>)
   2500c:	0018      	movs	r0, r3
   2500e:	4b1b      	ldr	r3, [pc, #108]	; (2507c <nm_drv_deinit+0xd4>)
   25010:	4798      	blx	r3
   25012:	4b1e      	ldr	r3, [pc, #120]	; (2508c <nm_drv_deinit+0xe4>)
   25014:	0018      	movs	r0, r3
   25016:	4b19      	ldr	r3, [pc, #100]	; (2507c <nm_drv_deinit+0xd4>)
   25018:	4798      	blx	r3
   2501a:	4b1a      	ldr	r3, [pc, #104]	; (25084 <nm_drv_deinit+0xdc>)
   2501c:	0018      	movs	r0, r3
   2501e:	4b17      	ldr	r3, [pc, #92]	; (2507c <nm_drv_deinit+0xd4>)
   25020:	4798      	blx	r3
		goto ERR1;
   25022:	e01d      	b.n	25060 <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   25024:	230f      	movs	r3, #15
   25026:	18fc      	adds	r4, r7, r3
   25028:	4b19      	ldr	r3, [pc, #100]	; (25090 <nm_drv_deinit+0xe8>)
   2502a:	4798      	blx	r3
   2502c:	0003      	movs	r3, r0
   2502e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   25030:	230f      	movs	r3, #15
   25032:	18fb      	adds	r3, r7, r3
   25034:	781b      	ldrb	r3, [r3, #0]
   25036:	b25b      	sxtb	r3, r3
   25038:	2b00      	cmp	r3, #0
   2503a:	d00f      	beq.n	2505c <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   2503c:	23b9      	movs	r3, #185	; 0xb9
   2503e:	005a      	lsls	r2, r3, #1
   25040:	490c      	ldr	r1, [pc, #48]	; (25074 <nm_drv_deinit+0xcc>)
   25042:	4b0d      	ldr	r3, [pc, #52]	; (25078 <nm_drv_deinit+0xd0>)
   25044:	0018      	movs	r0, r3
   25046:	4b0d      	ldr	r3, [pc, #52]	; (2507c <nm_drv_deinit+0xd4>)
   25048:	4798      	blx	r3
   2504a:	4b12      	ldr	r3, [pc, #72]	; (25094 <nm_drv_deinit+0xec>)
   2504c:	0018      	movs	r0, r3
   2504e:	4b0b      	ldr	r3, [pc, #44]	; (2507c <nm_drv_deinit+0xd4>)
   25050:	4798      	blx	r3
   25052:	4b0c      	ldr	r3, [pc, #48]	; (25084 <nm_drv_deinit+0xdc>)
   25054:	0018      	movs	r0, r3
   25056:	4b09      	ldr	r3, [pc, #36]	; (2507c <nm_drv_deinit+0xd4>)
   25058:	4798      	blx	r3
		goto ERR1;
   2505a:	e001      	b.n	25060 <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   2505c:	4b0e      	ldr	r3, [pc, #56]	; (25098 <nm_drv_deinit+0xf0>)
   2505e:	4798      	blx	r3
#endif

ERR1:
	return ret;
   25060:	230f      	movs	r3, #15
   25062:	18fb      	adds	r3, r7, r3
   25064:	781b      	ldrb	r3, [r3, #0]
   25066:	b25b      	sxtb	r3, r3
}
   25068:	0018      	movs	r0, r3
   2506a:	46bd      	mov	sp, r7
   2506c:	b005      	add	sp, #20
   2506e:	bd90      	pop	{r4, r7, pc}
   25070:	000248b9 	.word	0x000248b9
   25074:	0003b1c0 	.word	0x0003b1c0
   25078:	0003b0e4 	.word	0x0003b0e4
   2507c:	00020039 	.word	0x00020039
   25080:	0003b154 	.word	0x0003b154
   25084:	0003b114 	.word	0x0003b114
   25088:	00027cd9 	.word	0x00027cd9
   2508c:	0003b174 	.word	0x0003b174
   25090:	000249ad 	.word	0x000249ad
   25094:	0003b198 	.word	0x0003b198
   25098:	0002697d 	.word	0x0002697d

0002509c <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   2509c:	b580      	push	{r7, lr}
   2509e:	b086      	sub	sp, #24
   250a0:	af00      	add	r7, sp, #0
   250a2:	6078      	str	r0, [r7, #4]
   250a4:	000a      	movs	r2, r1
   250a6:	1cbb      	adds	r3, r7, #2
   250a8:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   250aa:	230c      	movs	r3, #12
   250ac:	18fb      	adds	r3, r7, r3
   250ae:	2200      	movs	r2, #0
   250b0:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   250b2:	230c      	movs	r3, #12
   250b4:	18fb      	adds	r3, r7, r3
   250b6:	687a      	ldr	r2, [r7, #4]
   250b8:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   250ba:	230c      	movs	r3, #12
   250bc:	18fb      	adds	r3, r7, r3
   250be:	1cba      	adds	r2, r7, #2
   250c0:	8812      	ldrh	r2, [r2, #0]
   250c2:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   250c4:	230c      	movs	r3, #12
   250c6:	18fb      	adds	r3, r7, r3
   250c8:	0019      	movs	r1, r3
   250ca:	2003      	movs	r0, #3
   250cc:	4b03      	ldr	r3, [pc, #12]	; (250dc <nmi_spi_read+0x40>)
   250ce:	4798      	blx	r3
   250d0:	0003      	movs	r3, r0
}
   250d2:	0018      	movs	r0, r3
   250d4:	46bd      	mov	sp, r7
   250d6:	b006      	add	sp, #24
   250d8:	bd80      	pop	{r7, pc}
   250da:	46c0      	nop			; (mov r8, r8)
   250dc:	00022849 	.word	0x00022849

000250e0 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   250e0:	b580      	push	{r7, lr}
   250e2:	b086      	sub	sp, #24
   250e4:	af00      	add	r7, sp, #0
   250e6:	6078      	str	r0, [r7, #4]
   250e8:	000a      	movs	r2, r1
   250ea:	1cbb      	adds	r3, r7, #2
   250ec:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   250ee:	230c      	movs	r3, #12
   250f0:	18fb      	adds	r3, r7, r3
   250f2:	687a      	ldr	r2, [r7, #4]
   250f4:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   250f6:	230c      	movs	r3, #12
   250f8:	18fb      	adds	r3, r7, r3
   250fa:	2200      	movs	r2, #0
   250fc:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   250fe:	230c      	movs	r3, #12
   25100:	18fb      	adds	r3, r7, r3
   25102:	1cba      	adds	r2, r7, #2
   25104:	8812      	ldrh	r2, [r2, #0]
   25106:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   25108:	230c      	movs	r3, #12
   2510a:	18fb      	adds	r3, r7, r3
   2510c:	0019      	movs	r1, r3
   2510e:	2003      	movs	r0, #3
   25110:	4b03      	ldr	r3, [pc, #12]	; (25120 <nmi_spi_write+0x40>)
   25112:	4798      	blx	r3
   25114:	0003      	movs	r3, r0
}
   25116:	0018      	movs	r0, r3
   25118:	46bd      	mov	sp, r7
   2511a:	b006      	add	sp, #24
   2511c:	bd80      	pop	{r7, pc}
   2511e:	46c0      	nop			; (mov r8, r8)
   25120:	00022849 	.word	0x00022849

00025124 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   25124:	b580      	push	{r7, lr}
   25126:	b088      	sub	sp, #32
   25128:	af00      	add	r7, sp, #0
   2512a:	60f8      	str	r0, [r7, #12]
   2512c:	60b9      	str	r1, [r7, #8]
   2512e:	1dbb      	adds	r3, r7, #6
   25130:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   25132:	2314      	movs	r3, #20
   25134:	18fb      	adds	r3, r7, r3
   25136:	68fa      	ldr	r2, [r7, #12]
   25138:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   2513a:	2314      	movs	r3, #20
   2513c:	18fb      	adds	r3, r7, r3
   2513e:	68ba      	ldr	r2, [r7, #8]
   25140:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   25142:	2314      	movs	r3, #20
   25144:	18fb      	adds	r3, r7, r3
   25146:	1dba      	adds	r2, r7, #6
   25148:	8812      	ldrh	r2, [r2, #0]
   2514a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   2514c:	2314      	movs	r3, #20
   2514e:	18fb      	adds	r3, r7, r3
   25150:	0019      	movs	r1, r3
   25152:	2003      	movs	r0, #3
   25154:	4b03      	ldr	r3, [pc, #12]	; (25164 <nmi_spi_rw+0x40>)
   25156:	4798      	blx	r3
   25158:	0003      	movs	r3, r0
}
   2515a:	0018      	movs	r0, r3
   2515c:	46bd      	mov	sp, r7
   2515e:	b008      	add	sp, #32
   25160:	bd80      	pop	{r7, pc}
   25162:	46c0      	nop			; (mov r8, r8)
   25164:	00022849 	.word	0x00022849

00025168 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   25168:	b580      	push	{r7, lr}
   2516a:	b082      	sub	sp, #8
   2516c:	af00      	add	r7, sp, #0
   2516e:	0002      	movs	r2, r0
   25170:	1dfb      	adds	r3, r7, #7
   25172:	701a      	strb	r2, [r3, #0]
   25174:	1dbb      	adds	r3, r7, #6
   25176:	1c0a      	adds	r2, r1, #0
   25178:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   2517a:	1dfb      	adds	r3, r7, #7
   2517c:	781b      	ldrb	r3, [r3, #0]
   2517e:	005a      	lsls	r2, r3, #1
   25180:	1dbb      	adds	r3, r7, #6
   25182:	781b      	ldrb	r3, [r3, #0]
   25184:	4053      	eors	r3, r2
   25186:	4a03      	ldr	r2, [pc, #12]	; (25194 <crc7_byte+0x2c>)
   25188:	5cd3      	ldrb	r3, [r2, r3]
}
   2518a:	0018      	movs	r0, r3
   2518c:	46bd      	mov	sp, r7
   2518e:	b002      	add	sp, #8
   25190:	bd80      	pop	{r7, pc}
   25192:	46c0      	nop			; (mov r8, r8)
   25194:	0003b1d0 	.word	0x0003b1d0

00025198 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   25198:	b590      	push	{r4, r7, lr}
   2519a:	b085      	sub	sp, #20
   2519c:	af00      	add	r7, sp, #0
   2519e:	60b9      	str	r1, [r7, #8]
   251a0:	607a      	str	r2, [r7, #4]
   251a2:	230f      	movs	r3, #15
   251a4:	18fb      	adds	r3, r7, r3
   251a6:	1c02      	adds	r2, r0, #0
   251a8:	701a      	strb	r2, [r3, #0]
	while (len--)
   251aa:	e00e      	b.n	251ca <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   251ac:	68bb      	ldr	r3, [r7, #8]
   251ae:	1c5a      	adds	r2, r3, #1
   251b0:	60ba      	str	r2, [r7, #8]
   251b2:	781a      	ldrb	r2, [r3, #0]
   251b4:	230f      	movs	r3, #15
   251b6:	18fc      	adds	r4, r7, r3
   251b8:	230f      	movs	r3, #15
   251ba:	18fb      	adds	r3, r7, r3
   251bc:	781b      	ldrb	r3, [r3, #0]
   251be:	0011      	movs	r1, r2
   251c0:	0018      	movs	r0, r3
   251c2:	4b08      	ldr	r3, [pc, #32]	; (251e4 <crc7+0x4c>)
   251c4:	4798      	blx	r3
   251c6:	0003      	movs	r3, r0
   251c8:	7023      	strb	r3, [r4, #0]
	while (len--)
   251ca:	687b      	ldr	r3, [r7, #4]
   251cc:	1e5a      	subs	r2, r3, #1
   251ce:	607a      	str	r2, [r7, #4]
   251d0:	2b00      	cmp	r3, #0
   251d2:	d1eb      	bne.n	251ac <crc7+0x14>
	return crc;
   251d4:	230f      	movs	r3, #15
   251d6:	18fb      	adds	r3, r7, r3
   251d8:	781b      	ldrb	r3, [r3, #0]
}
   251da:	0018      	movs	r0, r3
   251dc:	46bd      	mov	sp, r7
   251de:	b005      	add	sp, #20
   251e0:	bd90      	pop	{r4, r7, pc}
   251e2:	46c0      	nop			; (mov r8, r8)
   251e4:	00025169 	.word	0x00025169

000251e8 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   251e8:	b590      	push	{r4, r7, lr}
   251ea:	b089      	sub	sp, #36	; 0x24
   251ec:	af00      	add	r7, sp, #0
   251ee:	60b9      	str	r1, [r7, #8]
   251f0:	607a      	str	r2, [r7, #4]
   251f2:	603b      	str	r3, [r7, #0]
   251f4:	230f      	movs	r3, #15
   251f6:	18fb      	adds	r3, r7, r3
   251f8:	1c02      	adds	r2, r0, #0
   251fa:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   251fc:	231f      	movs	r3, #31
   251fe:	18fb      	adds	r3, r7, r3
   25200:	2205      	movs	r2, #5
   25202:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   25204:	231e      	movs	r3, #30
   25206:	18fb      	adds	r3, r7, r3
   25208:	2201      	movs	r2, #1
   2520a:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   2520c:	2314      	movs	r3, #20
   2520e:	18fb      	adds	r3, r7, r3
   25210:	220f      	movs	r2, #15
   25212:	18ba      	adds	r2, r7, r2
   25214:	7812      	ldrb	r2, [r2, #0]
   25216:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   25218:	230f      	movs	r3, #15
   2521a:	18fb      	adds	r3, r7, r3
   2521c:	781b      	ldrb	r3, [r3, #0]
   2521e:	3bc1      	subs	r3, #193	; 0xc1
   25220:	2b0e      	cmp	r3, #14
   25222:	d900      	bls.n	25226 <spi_cmd+0x3e>
   25224:	e11b      	b.n	2545e <spi_cmd+0x276>
   25226:	009a      	lsls	r2, r3, #2
   25228:	4bb6      	ldr	r3, [pc, #728]	; (25504 <spi_cmd+0x31c>)
   2522a:	18d3      	adds	r3, r2, r3
   2522c:	681b      	ldr	r3, [r3, #0]
   2522e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   25230:	68bb      	ldr	r3, [r7, #8]
   25232:	0c1b      	lsrs	r3, r3, #16
   25234:	b2da      	uxtb	r2, r3
   25236:	2314      	movs	r3, #20
   25238:	18fb      	adds	r3, r7, r3
   2523a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   2523c:	68bb      	ldr	r3, [r7, #8]
   2523e:	0a1b      	lsrs	r3, r3, #8
   25240:	b2da      	uxtb	r2, r3
   25242:	2314      	movs	r3, #20
   25244:	18fb      	adds	r3, r7, r3
   25246:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   25248:	68bb      	ldr	r3, [r7, #8]
   2524a:	b2da      	uxtb	r2, r3
   2524c:	2314      	movs	r3, #20
   2524e:	18fb      	adds	r3, r7, r3
   25250:	70da      	strb	r2, [r3, #3]
		len = 5;
   25252:	231f      	movs	r3, #31
   25254:	18fb      	adds	r3, r7, r3
   25256:	2205      	movs	r2, #5
   25258:	701a      	strb	r2, [r3, #0]
		break;
   2525a:	e105      	b.n	25468 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   2525c:	68bb      	ldr	r3, [r7, #8]
   2525e:	0a1b      	lsrs	r3, r3, #8
   25260:	b2da      	uxtb	r2, r3
   25262:	2314      	movs	r3, #20
   25264:	18fb      	adds	r3, r7, r3
   25266:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   25268:	2330      	movs	r3, #48	; 0x30
   2526a:	18fb      	adds	r3, r7, r3
   2526c:	781b      	ldrb	r3, [r3, #0]
   2526e:	2b00      	cmp	r3, #0
   25270:	d009      	beq.n	25286 <spi_cmd+0x9e>
   25272:	2314      	movs	r3, #20
   25274:	18fb      	adds	r3, r7, r3
   25276:	785b      	ldrb	r3, [r3, #1]
   25278:	2280      	movs	r2, #128	; 0x80
   2527a:	4252      	negs	r2, r2
   2527c:	4313      	orrs	r3, r2
   2527e:	b2da      	uxtb	r2, r3
   25280:	2314      	movs	r3, #20
   25282:	18fb      	adds	r3, r7, r3
   25284:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   25286:	68bb      	ldr	r3, [r7, #8]
   25288:	b2da      	uxtb	r2, r3
   2528a:	2314      	movs	r3, #20
   2528c:	18fb      	adds	r3, r7, r3
   2528e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   25290:	2314      	movs	r3, #20
   25292:	18fb      	adds	r3, r7, r3
   25294:	2200      	movs	r2, #0
   25296:	70da      	strb	r2, [r3, #3]
		len = 5;
   25298:	231f      	movs	r3, #31
   2529a:	18fb      	adds	r3, r7, r3
   2529c:	2205      	movs	r2, #5
   2529e:	701a      	strb	r2, [r3, #0]
		break;
   252a0:	e0e2      	b.n	25468 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   252a2:	2314      	movs	r3, #20
   252a4:	18fb      	adds	r3, r7, r3
   252a6:	2200      	movs	r2, #0
   252a8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   252aa:	2314      	movs	r3, #20
   252ac:	18fb      	adds	r3, r7, r3
   252ae:	2200      	movs	r2, #0
   252b0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   252b2:	2314      	movs	r3, #20
   252b4:	18fb      	adds	r3, r7, r3
   252b6:	2200      	movs	r2, #0
   252b8:	70da      	strb	r2, [r3, #3]
		len = 5;
   252ba:	231f      	movs	r3, #31
   252bc:	18fb      	adds	r3, r7, r3
   252be:	2205      	movs	r2, #5
   252c0:	701a      	strb	r2, [r3, #0]
		break;
   252c2:	e0d1      	b.n	25468 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   252c4:	2314      	movs	r3, #20
   252c6:	18fb      	adds	r3, r7, r3
   252c8:	2200      	movs	r2, #0
   252ca:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   252cc:	2314      	movs	r3, #20
   252ce:	18fb      	adds	r3, r7, r3
   252d0:	2200      	movs	r2, #0
   252d2:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   252d4:	2314      	movs	r3, #20
   252d6:	18fb      	adds	r3, r7, r3
   252d8:	2200      	movs	r2, #0
   252da:	70da      	strb	r2, [r3, #3]
		len = 5;
   252dc:	231f      	movs	r3, #31
   252de:	18fb      	adds	r3, r7, r3
   252e0:	2205      	movs	r2, #5
   252e2:	701a      	strb	r2, [r3, #0]
		break;
   252e4:	e0c0      	b.n	25468 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   252e6:	2314      	movs	r3, #20
   252e8:	18fb      	adds	r3, r7, r3
   252ea:	22ff      	movs	r2, #255	; 0xff
   252ec:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   252ee:	2314      	movs	r3, #20
   252f0:	18fb      	adds	r3, r7, r3
   252f2:	22ff      	movs	r2, #255	; 0xff
   252f4:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   252f6:	2314      	movs	r3, #20
   252f8:	18fb      	adds	r3, r7, r3
   252fa:	22ff      	movs	r2, #255	; 0xff
   252fc:	70da      	strb	r2, [r3, #3]
		len = 5;
   252fe:	231f      	movs	r3, #31
   25300:	18fb      	adds	r3, r7, r3
   25302:	2205      	movs	r2, #5
   25304:	701a      	strb	r2, [r3, #0]
		break;
   25306:	e0af      	b.n	25468 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   25308:	68bb      	ldr	r3, [r7, #8]
   2530a:	0c1b      	lsrs	r3, r3, #16
   2530c:	b2da      	uxtb	r2, r3
   2530e:	2314      	movs	r3, #20
   25310:	18fb      	adds	r3, r7, r3
   25312:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   25314:	68bb      	ldr	r3, [r7, #8]
   25316:	0a1b      	lsrs	r3, r3, #8
   25318:	b2da      	uxtb	r2, r3
   2531a:	2314      	movs	r3, #20
   2531c:	18fb      	adds	r3, r7, r3
   2531e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   25320:	68bb      	ldr	r3, [r7, #8]
   25322:	b2da      	uxtb	r2, r3
   25324:	2314      	movs	r3, #20
   25326:	18fb      	adds	r3, r7, r3
   25328:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   2532a:	683b      	ldr	r3, [r7, #0]
   2532c:	0a1b      	lsrs	r3, r3, #8
   2532e:	b2da      	uxtb	r2, r3
   25330:	2314      	movs	r3, #20
   25332:	18fb      	adds	r3, r7, r3
   25334:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   25336:	683b      	ldr	r3, [r7, #0]
   25338:	b2da      	uxtb	r2, r3
   2533a:	2314      	movs	r3, #20
   2533c:	18fb      	adds	r3, r7, r3
   2533e:	715a      	strb	r2, [r3, #5]
		len = 7;
   25340:	231f      	movs	r3, #31
   25342:	18fb      	adds	r3, r7, r3
   25344:	2207      	movs	r2, #7
   25346:	701a      	strb	r2, [r3, #0]
		break;
   25348:	e08e      	b.n	25468 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   2534a:	68bb      	ldr	r3, [r7, #8]
   2534c:	0c1b      	lsrs	r3, r3, #16
   2534e:	b2da      	uxtb	r2, r3
   25350:	2314      	movs	r3, #20
   25352:	18fb      	adds	r3, r7, r3
   25354:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   25356:	68bb      	ldr	r3, [r7, #8]
   25358:	0a1b      	lsrs	r3, r3, #8
   2535a:	b2da      	uxtb	r2, r3
   2535c:	2314      	movs	r3, #20
   2535e:	18fb      	adds	r3, r7, r3
   25360:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   25362:	68bb      	ldr	r3, [r7, #8]
   25364:	b2da      	uxtb	r2, r3
   25366:	2314      	movs	r3, #20
   25368:	18fb      	adds	r3, r7, r3
   2536a:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   2536c:	683b      	ldr	r3, [r7, #0]
   2536e:	0c1b      	lsrs	r3, r3, #16
   25370:	b2da      	uxtb	r2, r3
   25372:	2314      	movs	r3, #20
   25374:	18fb      	adds	r3, r7, r3
   25376:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   25378:	683b      	ldr	r3, [r7, #0]
   2537a:	0a1b      	lsrs	r3, r3, #8
   2537c:	b2da      	uxtb	r2, r3
   2537e:	2314      	movs	r3, #20
   25380:	18fb      	adds	r3, r7, r3
   25382:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   25384:	683b      	ldr	r3, [r7, #0]
   25386:	b2da      	uxtb	r2, r3
   25388:	2314      	movs	r3, #20
   2538a:	18fb      	adds	r3, r7, r3
   2538c:	719a      	strb	r2, [r3, #6]
		len = 8;
   2538e:	231f      	movs	r3, #31
   25390:	18fb      	adds	r3, r7, r3
   25392:	2208      	movs	r2, #8
   25394:	701a      	strb	r2, [r3, #0]
		break;
   25396:	e067      	b.n	25468 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   25398:	68bb      	ldr	r3, [r7, #8]
   2539a:	0a1b      	lsrs	r3, r3, #8
   2539c:	b2da      	uxtb	r2, r3
   2539e:	2314      	movs	r3, #20
   253a0:	18fb      	adds	r3, r7, r3
   253a2:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   253a4:	2330      	movs	r3, #48	; 0x30
   253a6:	18fb      	adds	r3, r7, r3
   253a8:	781b      	ldrb	r3, [r3, #0]
   253aa:	2b00      	cmp	r3, #0
   253ac:	d009      	beq.n	253c2 <spi_cmd+0x1da>
   253ae:	2314      	movs	r3, #20
   253b0:	18fb      	adds	r3, r7, r3
   253b2:	785b      	ldrb	r3, [r3, #1]
   253b4:	2280      	movs	r2, #128	; 0x80
   253b6:	4252      	negs	r2, r2
   253b8:	4313      	orrs	r3, r2
   253ba:	b2da      	uxtb	r2, r3
   253bc:	2314      	movs	r3, #20
   253be:	18fb      	adds	r3, r7, r3
   253c0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   253c2:	68bb      	ldr	r3, [r7, #8]
   253c4:	b2da      	uxtb	r2, r3
   253c6:	2314      	movs	r3, #20
   253c8:	18fb      	adds	r3, r7, r3
   253ca:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   253cc:	687b      	ldr	r3, [r7, #4]
   253ce:	0e1b      	lsrs	r3, r3, #24
   253d0:	b2da      	uxtb	r2, r3
   253d2:	2314      	movs	r3, #20
   253d4:	18fb      	adds	r3, r7, r3
   253d6:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   253d8:	687b      	ldr	r3, [r7, #4]
   253da:	0c1b      	lsrs	r3, r3, #16
   253dc:	b2da      	uxtb	r2, r3
   253de:	2314      	movs	r3, #20
   253e0:	18fb      	adds	r3, r7, r3
   253e2:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   253e4:	687b      	ldr	r3, [r7, #4]
   253e6:	0a1b      	lsrs	r3, r3, #8
   253e8:	b2da      	uxtb	r2, r3
   253ea:	2314      	movs	r3, #20
   253ec:	18fb      	adds	r3, r7, r3
   253ee:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   253f0:	687b      	ldr	r3, [r7, #4]
   253f2:	b2da      	uxtb	r2, r3
   253f4:	2314      	movs	r3, #20
   253f6:	18fb      	adds	r3, r7, r3
   253f8:	719a      	strb	r2, [r3, #6]
		len = 8;
   253fa:	231f      	movs	r3, #31
   253fc:	18fb      	adds	r3, r7, r3
   253fe:	2208      	movs	r2, #8
   25400:	701a      	strb	r2, [r3, #0]
		break;
   25402:	e031      	b.n	25468 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   25404:	68bb      	ldr	r3, [r7, #8]
   25406:	0c1b      	lsrs	r3, r3, #16
   25408:	b2da      	uxtb	r2, r3
   2540a:	2314      	movs	r3, #20
   2540c:	18fb      	adds	r3, r7, r3
   2540e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   25410:	68bb      	ldr	r3, [r7, #8]
   25412:	0a1b      	lsrs	r3, r3, #8
   25414:	b2da      	uxtb	r2, r3
   25416:	2314      	movs	r3, #20
   25418:	18fb      	adds	r3, r7, r3
   2541a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   2541c:	68bb      	ldr	r3, [r7, #8]
   2541e:	b2da      	uxtb	r2, r3
   25420:	2314      	movs	r3, #20
   25422:	18fb      	adds	r3, r7, r3
   25424:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   25426:	687b      	ldr	r3, [r7, #4]
   25428:	0e1b      	lsrs	r3, r3, #24
   2542a:	b2da      	uxtb	r2, r3
   2542c:	2314      	movs	r3, #20
   2542e:	18fb      	adds	r3, r7, r3
   25430:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   25432:	687b      	ldr	r3, [r7, #4]
   25434:	0c1b      	lsrs	r3, r3, #16
   25436:	b2da      	uxtb	r2, r3
   25438:	2314      	movs	r3, #20
   2543a:	18fb      	adds	r3, r7, r3
   2543c:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   2543e:	687b      	ldr	r3, [r7, #4]
   25440:	0a1b      	lsrs	r3, r3, #8
   25442:	b2da      	uxtb	r2, r3
   25444:	2314      	movs	r3, #20
   25446:	18fb      	adds	r3, r7, r3
   25448:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   2544a:	687b      	ldr	r3, [r7, #4]
   2544c:	b2da      	uxtb	r2, r3
   2544e:	2314      	movs	r3, #20
   25450:	18fb      	adds	r3, r7, r3
   25452:	71da      	strb	r2, [r3, #7]
		len = 9;
   25454:	231f      	movs	r3, #31
   25456:	18fb      	adds	r3, r7, r3
   25458:	2209      	movs	r2, #9
   2545a:	701a      	strb	r2, [r3, #0]
		break;
   2545c:	e004      	b.n	25468 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   2545e:	231e      	movs	r3, #30
   25460:	18fb      	adds	r3, r7, r3
   25462:	2200      	movs	r2, #0
   25464:	701a      	strb	r2, [r3, #0]
		break;
   25466:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   25468:	231e      	movs	r3, #30
   2546a:	18fb      	adds	r3, r7, r3
   2546c:	781b      	ldrb	r3, [r3, #0]
   2546e:	b25b      	sxtb	r3, r3
   25470:	2b00      	cmp	r3, #0
   25472:	d03f      	beq.n	254f4 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   25474:	4b24      	ldr	r3, [pc, #144]	; (25508 <spi_cmd+0x320>)
   25476:	781b      	ldrb	r3, [r3, #0]
   25478:	2b00      	cmp	r3, #0
   2547a:	d115      	bne.n	254a8 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   2547c:	231f      	movs	r3, #31
   2547e:	18fb      	adds	r3, r7, r3
   25480:	781b      	ldrb	r3, [r3, #0]
   25482:	1e5c      	subs	r4, r3, #1
   25484:	231f      	movs	r3, #31
   25486:	18fb      	adds	r3, r7, r3
   25488:	781b      	ldrb	r3, [r3, #0]
   2548a:	3b01      	subs	r3, #1
   2548c:	001a      	movs	r2, r3
   2548e:	2314      	movs	r3, #20
   25490:	18fb      	adds	r3, r7, r3
   25492:	0019      	movs	r1, r3
   25494:	207f      	movs	r0, #127	; 0x7f
   25496:	4b1d      	ldr	r3, [pc, #116]	; (2550c <spi_cmd+0x324>)
   25498:	4798      	blx	r3
   2549a:	0003      	movs	r3, r0
   2549c:	18db      	adds	r3, r3, r3
   2549e:	b2da      	uxtb	r2, r3
   254a0:	2314      	movs	r3, #20
   254a2:	18fb      	adds	r3, r7, r3
   254a4:	551a      	strb	r2, [r3, r4]
   254a6:	e006      	b.n	254b6 <spi_cmd+0x2ce>
		else
			len-=1;
   254a8:	231f      	movs	r3, #31
   254aa:	18fb      	adds	r3, r7, r3
   254ac:	221f      	movs	r2, #31
   254ae:	18ba      	adds	r2, r7, r2
   254b0:	7812      	ldrb	r2, [r2, #0]
   254b2:	3a01      	subs	r2, #1
   254b4:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   254b6:	231f      	movs	r3, #31
   254b8:	18fb      	adds	r3, r7, r3
   254ba:	781b      	ldrb	r3, [r3, #0]
   254bc:	b29a      	uxth	r2, r3
   254be:	2314      	movs	r3, #20
   254c0:	18fb      	adds	r3, r7, r3
   254c2:	0011      	movs	r1, r2
   254c4:	0018      	movs	r0, r3
   254c6:	4b12      	ldr	r3, [pc, #72]	; (25510 <spi_cmd+0x328>)
   254c8:	4798      	blx	r3
   254ca:	1e03      	subs	r3, r0, #0
   254cc:	d012      	beq.n	254f4 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   254ce:	2390      	movs	r3, #144	; 0x90
   254d0:	005a      	lsls	r2, r3, #1
   254d2:	4910      	ldr	r1, [pc, #64]	; (25514 <spi_cmd+0x32c>)
   254d4:	4b10      	ldr	r3, [pc, #64]	; (25518 <spi_cmd+0x330>)
   254d6:	0018      	movs	r0, r3
   254d8:	4b10      	ldr	r3, [pc, #64]	; (2551c <spi_cmd+0x334>)
   254da:	4798      	blx	r3
   254dc:	4b10      	ldr	r3, [pc, #64]	; (25520 <spi_cmd+0x338>)
   254de:	0018      	movs	r0, r3
   254e0:	4b0e      	ldr	r3, [pc, #56]	; (2551c <spi_cmd+0x334>)
   254e2:	4798      	blx	r3
   254e4:	4b0f      	ldr	r3, [pc, #60]	; (25524 <spi_cmd+0x33c>)
   254e6:	0018      	movs	r0, r3
   254e8:	4b0c      	ldr	r3, [pc, #48]	; (2551c <spi_cmd+0x334>)
   254ea:	4798      	blx	r3
			result = N_FAIL;
   254ec:	231e      	movs	r3, #30
   254ee:	18fb      	adds	r3, r7, r3
   254f0:	2200      	movs	r2, #0
   254f2:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   254f4:	231e      	movs	r3, #30
   254f6:	18fb      	adds	r3, r7, r3
   254f8:	781b      	ldrb	r3, [r3, #0]
   254fa:	b25b      	sxtb	r3, r3
}
   254fc:	0018      	movs	r0, r3
   254fe:	46bd      	mov	sp, r7
   25500:	b009      	add	sp, #36	; 0x24
   25502:	bd90      	pop	{r4, r7, pc}
   25504:	0003b848 	.word	0x0003b848
   25508:	20003ecc 	.word	0x20003ecc
   2550c:	00025199 	.word	0x00025199
   25510:	000250e1 	.word	0x000250e1
   25514:	0003b8c0 	.word	0x0003b8c0
   25518:	0003b2d0 	.word	0x0003b2d0
   2551c:	00020039 	.word	0x00020039
   25520:	0003b2e4 	.word	0x0003b2e4
   25524:	0003b310 	.word	0x0003b310

00025528 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   25528:	b590      	push	{r4, r7, lr}
   2552a:	b085      	sub	sp, #20
   2552c:	af00      	add	r7, sp, #0
   2552e:	0002      	movs	r2, r0
   25530:	1dfb      	adds	r3, r7, #7
   25532:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   25534:	230e      	movs	r3, #14
   25536:	18fb      	adds	r3, r7, r3
   25538:	2201      	movs	r2, #1
   2553a:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   2553c:	4b32      	ldr	r3, [pc, #200]	; (25608 <spi_data_rsp+0xe0>)
   2553e:	781b      	ldrb	r3, [r3, #0]
   25540:	2b00      	cmp	r3, #0
   25542:	d104      	bne.n	2554e <spi_data_rsp+0x26>
		len = 2;
   25544:	230f      	movs	r3, #15
   25546:	18fb      	adds	r3, r7, r3
   25548:	2202      	movs	r2, #2
   2554a:	701a      	strb	r2, [r3, #0]
   2554c:	e003      	b.n	25556 <spi_data_rsp+0x2e>
	else
		len = 3;
   2554e:	230f      	movs	r3, #15
   25550:	18fb      	adds	r3, r7, r3
   25552:	2203      	movs	r2, #3
   25554:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   25556:	230f      	movs	r3, #15
   25558:	18fb      	adds	r3, r7, r3
   2555a:	781b      	ldrb	r3, [r3, #0]
   2555c:	b29a      	uxth	r2, r3
   2555e:	2308      	movs	r3, #8
   25560:	18fb      	adds	r3, r7, r3
   25562:	0011      	movs	r1, r2
   25564:	0018      	movs	r0, r3
   25566:	4b29      	ldr	r3, [pc, #164]	; (2560c <spi_data_rsp+0xe4>)
   25568:	4798      	blx	r3
   2556a:	1e03      	subs	r3, r0, #0
   2556c:	d013      	beq.n	25596 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   2556e:	239a      	movs	r3, #154	; 0x9a
   25570:	005a      	lsls	r2, r3, #1
   25572:	4927      	ldr	r1, [pc, #156]	; (25610 <spi_data_rsp+0xe8>)
   25574:	4b27      	ldr	r3, [pc, #156]	; (25614 <spi_data_rsp+0xec>)
   25576:	0018      	movs	r0, r3
   25578:	4b27      	ldr	r3, [pc, #156]	; (25618 <spi_data_rsp+0xf0>)
   2557a:	4798      	blx	r3
   2557c:	4b27      	ldr	r3, [pc, #156]	; (2561c <spi_data_rsp+0xf4>)
   2557e:	0018      	movs	r0, r3
   25580:	4b25      	ldr	r3, [pc, #148]	; (25618 <spi_data_rsp+0xf0>)
   25582:	4798      	blx	r3
   25584:	4b26      	ldr	r3, [pc, #152]	; (25620 <spi_data_rsp+0xf8>)
   25586:	0018      	movs	r0, r3
   25588:	4b23      	ldr	r3, [pc, #140]	; (25618 <spi_data_rsp+0xf0>)
   2558a:	4798      	blx	r3
		result = N_FAIL;
   2558c:	230e      	movs	r3, #14
   2558e:	18fb      	adds	r3, r7, r3
   25590:	2200      	movs	r2, #0
   25592:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   25594:	e030      	b.n	255f8 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   25596:	230f      	movs	r3, #15
   25598:	18fb      	adds	r3, r7, r3
   2559a:	781b      	ldrb	r3, [r3, #0]
   2559c:	3b01      	subs	r3, #1
   2559e:	2208      	movs	r2, #8
   255a0:	18ba      	adds	r2, r7, r2
   255a2:	5cd3      	ldrb	r3, [r2, r3]
   255a4:	2b00      	cmp	r3, #0
   255a6:	d108      	bne.n	255ba <spi_data_rsp+0x92>
   255a8:	230f      	movs	r3, #15
   255aa:	18fb      	adds	r3, r7, r3
   255ac:	781b      	ldrb	r3, [r3, #0]
   255ae:	3b02      	subs	r3, #2
   255b0:	2208      	movs	r2, #8
   255b2:	18ba      	adds	r2, r7, r2
   255b4:	5cd3      	ldrb	r3, [r2, r3]
   255b6:	2bc3      	cmp	r3, #195	; 0xc3
   255b8:	d01e      	beq.n	255f8 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   255ba:	233c      	movs	r3, #60	; 0x3c
   255bc:	33ff      	adds	r3, #255	; 0xff
   255be:	001a      	movs	r2, r3
   255c0:	4913      	ldr	r1, [pc, #76]	; (25610 <spi_data_rsp+0xe8>)
   255c2:	4b14      	ldr	r3, [pc, #80]	; (25614 <spi_data_rsp+0xec>)
   255c4:	0018      	movs	r0, r3
   255c6:	4b14      	ldr	r3, [pc, #80]	; (25618 <spi_data_rsp+0xf0>)
   255c8:	4798      	blx	r3
   255ca:	2308      	movs	r3, #8
   255cc:	18fb      	adds	r3, r7, r3
   255ce:	781b      	ldrb	r3, [r3, #0]
   255d0:	0019      	movs	r1, r3
   255d2:	2308      	movs	r3, #8
   255d4:	18fb      	adds	r3, r7, r3
   255d6:	785b      	ldrb	r3, [r3, #1]
   255d8:	001a      	movs	r2, r3
   255da:	2308      	movs	r3, #8
   255dc:	18fb      	adds	r3, r7, r3
   255de:	789b      	ldrb	r3, [r3, #2]
   255e0:	4810      	ldr	r0, [pc, #64]	; (25624 <spi_data_rsp+0xfc>)
   255e2:	4c0d      	ldr	r4, [pc, #52]	; (25618 <spi_data_rsp+0xf0>)
   255e4:	47a0      	blx	r4
   255e6:	4b0e      	ldr	r3, [pc, #56]	; (25620 <spi_data_rsp+0xf8>)
   255e8:	0018      	movs	r0, r3
   255ea:	4b0b      	ldr	r3, [pc, #44]	; (25618 <spi_data_rsp+0xf0>)
   255ec:	4798      	blx	r3
		result = N_FAIL;
   255ee:	230e      	movs	r3, #14
   255f0:	18fb      	adds	r3, r7, r3
   255f2:	2200      	movs	r2, #0
   255f4:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   255f6:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   255f8:	230e      	movs	r3, #14
   255fa:	18fb      	adds	r3, r7, r3
   255fc:	781b      	ldrb	r3, [r3, #0]
   255fe:	b25b      	sxtb	r3, r3
}
   25600:	0018      	movs	r0, r3
   25602:	46bd      	mov	sp, r7
   25604:	b005      	add	sp, #20
   25606:	bd90      	pop	{r4, r7, pc}
   25608:	20003ecc 	.word	0x20003ecc
   2560c:	0002509d 	.word	0x0002509d
   25610:	0003b8c8 	.word	0x0003b8c8
   25614:	0003b2d0 	.word	0x0003b2d0
   25618:	00020039 	.word	0x00020039
   2561c:	0003b314 	.word	0x0003b314
   25620:	0003b310 	.word	0x0003b310
   25624:	0003b334 	.word	0x0003b334

00025628 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   25628:	b580      	push	{r7, lr}
   2562a:	b084      	sub	sp, #16
   2562c:	af00      	add	r7, sp, #0
   2562e:	0002      	movs	r2, r0
   25630:	1dfb      	adds	r3, r7, #7
   25632:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   25634:	230f      	movs	r3, #15
   25636:	18fb      	adds	r3, r7, r3
   25638:	2201      	movs	r2, #1
   2563a:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   2563c:	1dfb      	adds	r3, r7, #7
   2563e:	781b      	ldrb	r3, [r3, #0]
   25640:	2bcf      	cmp	r3, #207	; 0xcf
   25642:	d007      	beq.n	25654 <spi_cmd_rsp+0x2c>
   25644:	1dfb      	adds	r3, r7, #7
   25646:	781b      	ldrb	r3, [r3, #0]
   25648:	2bc5      	cmp	r3, #197	; 0xc5
   2564a:	d003      	beq.n	25654 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   2564c:	1dfb      	adds	r3, r7, #7
   2564e:	781b      	ldrb	r3, [r3, #0]
   25650:	2bc6      	cmp	r3, #198	; 0xc6
   25652:	d10c      	bne.n	2566e <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   25654:	230d      	movs	r3, #13
   25656:	18fb      	adds	r3, r7, r3
   25658:	2101      	movs	r1, #1
   2565a:	0018      	movs	r0, r3
   2565c:	4b3b      	ldr	r3, [pc, #236]	; (2574c <spi_cmd_rsp+0x124>)
   2565e:	4798      	blx	r3
   25660:	1e03      	subs	r3, r0, #0
   25662:	d004      	beq.n	2566e <spi_cmd_rsp+0x46>
			result = N_FAIL;
   25664:	230f      	movs	r3, #15
   25666:	18fb      	adds	r3, r7, r3
   25668:	2200      	movs	r2, #0
   2566a:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   2566c:	e065      	b.n	2573a <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   2566e:	230e      	movs	r3, #14
   25670:	18fb      	adds	r3, r7, r3
   25672:	220a      	movs	r2, #10
   25674:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   25676:	230d      	movs	r3, #13
   25678:	18fb      	adds	r3, r7, r3
   2567a:	2101      	movs	r1, #1
   2567c:	0018      	movs	r0, r3
   2567e:	4b33      	ldr	r3, [pc, #204]	; (2574c <spi_cmd_rsp+0x124>)
   25680:	4798      	blx	r3
   25682:	1e03      	subs	r3, r0, #0
   25684:	d014      	beq.n	256b0 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   25686:	235c      	movs	r3, #92	; 0x5c
   25688:	33ff      	adds	r3, #255	; 0xff
   2568a:	001a      	movs	r2, r3
   2568c:	4930      	ldr	r1, [pc, #192]	; (25750 <spi_cmd_rsp+0x128>)
   2568e:	4b31      	ldr	r3, [pc, #196]	; (25754 <spi_cmd_rsp+0x12c>)
   25690:	0018      	movs	r0, r3
   25692:	4b31      	ldr	r3, [pc, #196]	; (25758 <spi_cmd_rsp+0x130>)
   25694:	4798      	blx	r3
   25696:	4b31      	ldr	r3, [pc, #196]	; (2575c <spi_cmd_rsp+0x134>)
   25698:	0018      	movs	r0, r3
   2569a:	4b2f      	ldr	r3, [pc, #188]	; (25758 <spi_cmd_rsp+0x130>)
   2569c:	4798      	blx	r3
   2569e:	4b30      	ldr	r3, [pc, #192]	; (25760 <spi_cmd_rsp+0x138>)
   256a0:	0018      	movs	r0, r3
   256a2:	4b2d      	ldr	r3, [pc, #180]	; (25758 <spi_cmd_rsp+0x130>)
   256a4:	4798      	blx	r3
			result = N_FAIL;
   256a6:	230f      	movs	r3, #15
   256a8:	18fb      	adds	r3, r7, r3
   256aa:	2200      	movs	r2, #0
   256ac:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   256ae:	e044      	b.n	2573a <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   256b0:	230d      	movs	r3, #13
   256b2:	18fb      	adds	r3, r7, r3
   256b4:	781b      	ldrb	r3, [r3, #0]
   256b6:	1dfa      	adds	r2, r7, #7
   256b8:	7812      	ldrb	r2, [r2, #0]
   256ba:	429a      	cmp	r2, r3
   256bc:	d00b      	beq.n	256d6 <spi_cmd_rsp+0xae>
   256be:	230e      	movs	r3, #14
   256c0:	18fb      	adds	r3, r7, r3
   256c2:	781b      	ldrb	r3, [r3, #0]
   256c4:	b25b      	sxtb	r3, r3
   256c6:	b2da      	uxtb	r2, r3
   256c8:	3a01      	subs	r2, #1
   256ca:	b2d1      	uxtb	r1, r2
   256cc:	220e      	movs	r2, #14
   256ce:	18ba      	adds	r2, r7, r2
   256d0:	7011      	strb	r1, [r2, #0]
   256d2:	2b00      	cmp	r3, #0
   256d4:	dccf      	bgt.n	25676 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   256d6:	230e      	movs	r3, #14
   256d8:	18fb      	adds	r3, r7, r3
   256da:	220a      	movs	r2, #10
   256dc:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   256de:	230d      	movs	r3, #13
   256e0:	18fb      	adds	r3, r7, r3
   256e2:	2101      	movs	r1, #1
   256e4:	0018      	movs	r0, r3
   256e6:	4b19      	ldr	r3, [pc, #100]	; (2574c <spi_cmd_rsp+0x124>)
   256e8:	4798      	blx	r3
   256ea:	1e03      	subs	r3, r0, #0
   256ec:	d014      	beq.n	25718 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   256ee:	236a      	movs	r3, #106	; 0x6a
   256f0:	33ff      	adds	r3, #255	; 0xff
   256f2:	001a      	movs	r2, r3
   256f4:	4916      	ldr	r1, [pc, #88]	; (25750 <spi_cmd_rsp+0x128>)
   256f6:	4b17      	ldr	r3, [pc, #92]	; (25754 <spi_cmd_rsp+0x12c>)
   256f8:	0018      	movs	r0, r3
   256fa:	4b17      	ldr	r3, [pc, #92]	; (25758 <spi_cmd_rsp+0x130>)
   256fc:	4798      	blx	r3
   256fe:	4b17      	ldr	r3, [pc, #92]	; (2575c <spi_cmd_rsp+0x134>)
   25700:	0018      	movs	r0, r3
   25702:	4b15      	ldr	r3, [pc, #84]	; (25758 <spi_cmd_rsp+0x130>)
   25704:	4798      	blx	r3
   25706:	4b16      	ldr	r3, [pc, #88]	; (25760 <spi_cmd_rsp+0x138>)
   25708:	0018      	movs	r0, r3
   2570a:	4b13      	ldr	r3, [pc, #76]	; (25758 <spi_cmd_rsp+0x130>)
   2570c:	4798      	blx	r3
			result = N_FAIL;
   2570e:	230f      	movs	r3, #15
   25710:	18fb      	adds	r3, r7, r3
   25712:	2200      	movs	r2, #0
   25714:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   25716:	e010      	b.n	2573a <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   25718:	230d      	movs	r3, #13
   2571a:	18fb      	adds	r3, r7, r3
   2571c:	781b      	ldrb	r3, [r3, #0]
   2571e:	2b00      	cmp	r3, #0
   25720:	d00b      	beq.n	2573a <spi_cmd_rsp+0x112>
   25722:	230e      	movs	r3, #14
   25724:	18fb      	adds	r3, r7, r3
   25726:	781b      	ldrb	r3, [r3, #0]
   25728:	b25b      	sxtb	r3, r3
   2572a:	b2da      	uxtb	r2, r3
   2572c:	3a01      	subs	r2, #1
   2572e:	b2d1      	uxtb	r1, r2
   25730:	220e      	movs	r2, #14
   25732:	18ba      	adds	r2, r7, r2
   25734:	7011      	strb	r1, [r2, #0]
   25736:	2b00      	cmp	r3, #0
   25738:	dcd1      	bgt.n	256de <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   2573a:	230f      	movs	r3, #15
   2573c:	18fb      	adds	r3, r7, r3
   2573e:	781b      	ldrb	r3, [r3, #0]
   25740:	b25b      	sxtb	r3, r3
}
   25742:	0018      	movs	r0, r3
   25744:	46bd      	mov	sp, r7
   25746:	b004      	add	sp, #16
   25748:	bd80      	pop	{r7, pc}
   2574a:	46c0      	nop			; (mov r8, r8)
   2574c:	0002509d 	.word	0x0002509d
   25750:	0003b8d8 	.word	0x0003b8d8
   25754:	0003b2d0 	.word	0x0003b2d0
   25758:	00020039 	.word	0x00020039
   2575c:	0003b364 	.word	0x0003b364
   25760:	0003b310 	.word	0x0003b310

00025764 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   25764:	b590      	push	{r4, r7, lr}
   25766:	b09f      	sub	sp, #124	; 0x7c
   25768:	af00      	add	r7, sp, #0
   2576a:	60b9      	str	r1, [r7, #8]
   2576c:	607a      	str	r2, [r7, #4]
   2576e:	603b      	str	r3, [r7, #0]
   25770:	230f      	movs	r3, #15
   25772:	18fb      	adds	r3, r7, r3
   25774:	1c02      	adds	r2, r0, #0
   25776:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   25778:	2300      	movs	r3, #0
   2577a:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   2577c:	2301      	movs	r3, #1
   2577e:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   25780:	2338      	movs	r3, #56	; 0x38
   25782:	18fb      	adds	r3, r7, r3
   25784:	220f      	movs	r2, #15
   25786:	18ba      	adds	r2, r7, r2
   25788:	7812      	ldrb	r2, [r2, #0]
   2578a:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   2578c:	230f      	movs	r3, #15
   2578e:	18fb      	adds	r3, r7, r3
   25790:	781b      	ldrb	r3, [r3, #0]
   25792:	3bc1      	subs	r3, #193	; 0xc1
   25794:	2b0e      	cmp	r3, #14
   25796:	d900      	bls.n	2579a <spi_cmd_complete+0x36>
   25798:	e103      	b.n	259a2 <spi_cmd_complete+0x23e>
   2579a:	009a      	lsls	r2, r3, #2
   2579c:	4bd1      	ldr	r3, [pc, #836]	; (25ae4 <spi_cmd_complete+0x380>)
   2579e:	18d3      	adds	r3, r2, r3
   257a0:	681b      	ldr	r3, [r3, #0]
   257a2:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   257a4:	68bb      	ldr	r3, [r7, #8]
   257a6:	0c1b      	lsrs	r3, r3, #16
   257a8:	b2da      	uxtb	r2, r3
   257aa:	2338      	movs	r3, #56	; 0x38
   257ac:	18fb      	adds	r3, r7, r3
   257ae:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   257b0:	68bb      	ldr	r3, [r7, #8]
   257b2:	0a1b      	lsrs	r3, r3, #8
   257b4:	b2da      	uxtb	r2, r3
   257b6:	2338      	movs	r3, #56	; 0x38
   257b8:	18fb      	adds	r3, r7, r3
   257ba:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   257bc:	68bb      	ldr	r3, [r7, #8]
   257be:	b2da      	uxtb	r2, r3
   257c0:	2338      	movs	r3, #56	; 0x38
   257c2:	18fb      	adds	r3, r7, r3
   257c4:	70da      	strb	r2, [r3, #3]
		len = 5;
   257c6:	2305      	movs	r3, #5
   257c8:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   257ca:	e0ed      	b.n	259a8 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   257cc:	68bb      	ldr	r3, [r7, #8]
   257ce:	0a1b      	lsrs	r3, r3, #8
   257d0:	b2da      	uxtb	r2, r3
   257d2:	2338      	movs	r3, #56	; 0x38
   257d4:	18fb      	adds	r3, r7, r3
   257d6:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   257d8:	2388      	movs	r3, #136	; 0x88
   257da:	18fb      	adds	r3, r7, r3
   257dc:	781b      	ldrb	r3, [r3, #0]
   257de:	2b01      	cmp	r3, #1
   257e0:	d109      	bne.n	257f6 <spi_cmd_complete+0x92>
   257e2:	2338      	movs	r3, #56	; 0x38
   257e4:	18fb      	adds	r3, r7, r3
   257e6:	785b      	ldrb	r3, [r3, #1]
   257e8:	2280      	movs	r2, #128	; 0x80
   257ea:	4252      	negs	r2, r2
   257ec:	4313      	orrs	r3, r2
   257ee:	b2da      	uxtb	r2, r3
   257f0:	2338      	movs	r3, #56	; 0x38
   257f2:	18fb      	adds	r3, r7, r3
   257f4:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   257f6:	68bb      	ldr	r3, [r7, #8]
   257f8:	b2da      	uxtb	r2, r3
   257fa:	2338      	movs	r3, #56	; 0x38
   257fc:	18fb      	adds	r3, r7, r3
   257fe:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   25800:	2338      	movs	r3, #56	; 0x38
   25802:	18fb      	adds	r3, r7, r3
   25804:	2200      	movs	r2, #0
   25806:	70da      	strb	r2, [r3, #3]
		len = 5;
   25808:	2305      	movs	r3, #5
   2580a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2580c:	e0cc      	b.n	259a8 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   2580e:	2338      	movs	r3, #56	; 0x38
   25810:	18fb      	adds	r3, r7, r3
   25812:	2200      	movs	r2, #0
   25814:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   25816:	2338      	movs	r3, #56	; 0x38
   25818:	18fb      	adds	r3, r7, r3
   2581a:	2200      	movs	r2, #0
   2581c:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   2581e:	2338      	movs	r3, #56	; 0x38
   25820:	18fb      	adds	r3, r7, r3
   25822:	2200      	movs	r2, #0
   25824:	70da      	strb	r2, [r3, #3]
		len = 5;
   25826:	2305      	movs	r3, #5
   25828:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2582a:	e0bd      	b.n	259a8 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   2582c:	2338      	movs	r3, #56	; 0x38
   2582e:	18fb      	adds	r3, r7, r3
   25830:	2200      	movs	r2, #0
   25832:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   25834:	2338      	movs	r3, #56	; 0x38
   25836:	18fb      	adds	r3, r7, r3
   25838:	2200      	movs	r2, #0
   2583a:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   2583c:	2338      	movs	r3, #56	; 0x38
   2583e:	18fb      	adds	r3, r7, r3
   25840:	2200      	movs	r2, #0
   25842:	70da      	strb	r2, [r3, #3]
		len = 5;
   25844:	2305      	movs	r3, #5
   25846:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25848:	e0ae      	b.n	259a8 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   2584a:	2338      	movs	r3, #56	; 0x38
   2584c:	18fb      	adds	r3, r7, r3
   2584e:	22ff      	movs	r2, #255	; 0xff
   25850:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   25852:	2338      	movs	r3, #56	; 0x38
   25854:	18fb      	adds	r3, r7, r3
   25856:	22ff      	movs	r2, #255	; 0xff
   25858:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   2585a:	2338      	movs	r3, #56	; 0x38
   2585c:	18fb      	adds	r3, r7, r3
   2585e:	22ff      	movs	r2, #255	; 0xff
   25860:	70da      	strb	r2, [r3, #3]
		len = 5;
   25862:	2305      	movs	r3, #5
   25864:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25866:	e09f      	b.n	259a8 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   25868:	68bb      	ldr	r3, [r7, #8]
   2586a:	0c1b      	lsrs	r3, r3, #16
   2586c:	b2da      	uxtb	r2, r3
   2586e:	2338      	movs	r3, #56	; 0x38
   25870:	18fb      	adds	r3, r7, r3
   25872:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   25874:	68bb      	ldr	r3, [r7, #8]
   25876:	0a1b      	lsrs	r3, r3, #8
   25878:	b2da      	uxtb	r2, r3
   2587a:	2338      	movs	r3, #56	; 0x38
   2587c:	18fb      	adds	r3, r7, r3
   2587e:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   25880:	68bb      	ldr	r3, [r7, #8]
   25882:	b2da      	uxtb	r2, r3
   25884:	2338      	movs	r3, #56	; 0x38
   25886:	18fb      	adds	r3, r7, r3
   25888:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   2588a:	683b      	ldr	r3, [r7, #0]
   2588c:	0a1b      	lsrs	r3, r3, #8
   2588e:	b2da      	uxtb	r2, r3
   25890:	2338      	movs	r3, #56	; 0x38
   25892:	18fb      	adds	r3, r7, r3
   25894:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   25896:	683b      	ldr	r3, [r7, #0]
   25898:	b2da      	uxtb	r2, r3
   2589a:	2338      	movs	r3, #56	; 0x38
   2589c:	18fb      	adds	r3, r7, r3
   2589e:	715a      	strb	r2, [r3, #5]
		len = 7;
   258a0:	2307      	movs	r3, #7
   258a2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   258a4:	e080      	b.n	259a8 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   258a6:	68bb      	ldr	r3, [r7, #8]
   258a8:	0c1b      	lsrs	r3, r3, #16
   258aa:	b2da      	uxtb	r2, r3
   258ac:	2338      	movs	r3, #56	; 0x38
   258ae:	18fb      	adds	r3, r7, r3
   258b0:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   258b2:	68bb      	ldr	r3, [r7, #8]
   258b4:	0a1b      	lsrs	r3, r3, #8
   258b6:	b2da      	uxtb	r2, r3
   258b8:	2338      	movs	r3, #56	; 0x38
   258ba:	18fb      	adds	r3, r7, r3
   258bc:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   258be:	68bb      	ldr	r3, [r7, #8]
   258c0:	b2da      	uxtb	r2, r3
   258c2:	2338      	movs	r3, #56	; 0x38
   258c4:	18fb      	adds	r3, r7, r3
   258c6:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   258c8:	683b      	ldr	r3, [r7, #0]
   258ca:	0c1b      	lsrs	r3, r3, #16
   258cc:	b2da      	uxtb	r2, r3
   258ce:	2338      	movs	r3, #56	; 0x38
   258d0:	18fb      	adds	r3, r7, r3
   258d2:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   258d4:	683b      	ldr	r3, [r7, #0]
   258d6:	0a1b      	lsrs	r3, r3, #8
   258d8:	b2da      	uxtb	r2, r3
   258da:	2338      	movs	r3, #56	; 0x38
   258dc:	18fb      	adds	r3, r7, r3
   258de:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   258e0:	683b      	ldr	r3, [r7, #0]
   258e2:	b2da      	uxtb	r2, r3
   258e4:	2338      	movs	r3, #56	; 0x38
   258e6:	18fb      	adds	r3, r7, r3
   258e8:	719a      	strb	r2, [r3, #6]
		len = 8;
   258ea:	2308      	movs	r3, #8
   258ec:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   258ee:	e05b      	b.n	259a8 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   258f0:	68bb      	ldr	r3, [r7, #8]
   258f2:	0a1b      	lsrs	r3, r3, #8
   258f4:	b2da      	uxtb	r2, r3
   258f6:	2338      	movs	r3, #56	; 0x38
   258f8:	18fb      	adds	r3, r7, r3
   258fa:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   258fc:	2388      	movs	r3, #136	; 0x88
   258fe:	18fb      	adds	r3, r7, r3
   25900:	781b      	ldrb	r3, [r3, #0]
   25902:	2b01      	cmp	r3, #1
   25904:	d109      	bne.n	2591a <spi_cmd_complete+0x1b6>
   25906:	2338      	movs	r3, #56	; 0x38
   25908:	18fb      	adds	r3, r7, r3
   2590a:	785b      	ldrb	r3, [r3, #1]
   2590c:	2280      	movs	r2, #128	; 0x80
   2590e:	4252      	negs	r2, r2
   25910:	4313      	orrs	r3, r2
   25912:	b2da      	uxtb	r2, r3
   25914:	2338      	movs	r3, #56	; 0x38
   25916:	18fb      	adds	r3, r7, r3
   25918:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   2591a:	68bb      	ldr	r3, [r7, #8]
   2591c:	b2da      	uxtb	r2, r3
   2591e:	2338      	movs	r3, #56	; 0x38
   25920:	18fb      	adds	r3, r7, r3
   25922:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   25924:	687b      	ldr	r3, [r7, #4]
   25926:	78da      	ldrb	r2, [r3, #3]
   25928:	2338      	movs	r3, #56	; 0x38
   2592a:	18fb      	adds	r3, r7, r3
   2592c:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   2592e:	687b      	ldr	r3, [r7, #4]
   25930:	789a      	ldrb	r2, [r3, #2]
   25932:	2338      	movs	r3, #56	; 0x38
   25934:	18fb      	adds	r3, r7, r3
   25936:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   25938:	687b      	ldr	r3, [r7, #4]
   2593a:	785a      	ldrb	r2, [r3, #1]
   2593c:	2338      	movs	r3, #56	; 0x38
   2593e:	18fb      	adds	r3, r7, r3
   25940:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   25942:	687b      	ldr	r3, [r7, #4]
   25944:	781a      	ldrb	r2, [r3, #0]
   25946:	2338      	movs	r3, #56	; 0x38
   25948:	18fb      	adds	r3, r7, r3
   2594a:	719a      	strb	r2, [r3, #6]
		len = 8;
   2594c:	2308      	movs	r3, #8
   2594e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25950:	e02a      	b.n	259a8 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   25952:	68bb      	ldr	r3, [r7, #8]
   25954:	0c1b      	lsrs	r3, r3, #16
   25956:	b2da      	uxtb	r2, r3
   25958:	2338      	movs	r3, #56	; 0x38
   2595a:	18fb      	adds	r3, r7, r3
   2595c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2595e:	68bb      	ldr	r3, [r7, #8]
   25960:	0a1b      	lsrs	r3, r3, #8
   25962:	b2da      	uxtb	r2, r3
   25964:	2338      	movs	r3, #56	; 0x38
   25966:	18fb      	adds	r3, r7, r3
   25968:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   2596a:	68bb      	ldr	r3, [r7, #8]
   2596c:	b2da      	uxtb	r2, r3
   2596e:	2338      	movs	r3, #56	; 0x38
   25970:	18fb      	adds	r3, r7, r3
   25972:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   25974:	687b      	ldr	r3, [r7, #4]
   25976:	78da      	ldrb	r2, [r3, #3]
   25978:	2338      	movs	r3, #56	; 0x38
   2597a:	18fb      	adds	r3, r7, r3
   2597c:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   2597e:	687b      	ldr	r3, [r7, #4]
   25980:	789a      	ldrb	r2, [r3, #2]
   25982:	2338      	movs	r3, #56	; 0x38
   25984:	18fb      	adds	r3, r7, r3
   25986:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   25988:	687b      	ldr	r3, [r7, #4]
   2598a:	785a      	ldrb	r2, [r3, #1]
   2598c:	2338      	movs	r3, #56	; 0x38
   2598e:	18fb      	adds	r3, r7, r3
   25990:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   25992:	687b      	ldr	r3, [r7, #4]
   25994:	781a      	ldrb	r2, [r3, #0]
   25996:	2338      	movs	r3, #56	; 0x38
   25998:	18fb      	adds	r3, r7, r3
   2599a:	71da      	strb	r2, [r3, #7]
		len = 9;
   2599c:	2309      	movs	r3, #9
   2599e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   259a0:	e002      	b.n	259a8 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   259a2:	2300      	movs	r3, #0
   259a4:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   259a6:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   259a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   259aa:	2b01      	cmp	r3, #1
   259ac:	d001      	beq.n	259b2 <spi_cmd_complete+0x24e>
		return result;
   259ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   259b0:	e33a      	b.n	26028 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   259b2:	4b4d      	ldr	r3, [pc, #308]	; (25ae8 <spi_cmd_complete+0x384>)
   259b4:	781b      	ldrb	r3, [r3, #0]
   259b6:	2b00      	cmp	r3, #0
   259b8:	d111      	bne.n	259de <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   259ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   259bc:	1e5c      	subs	r4, r3, #1
   259be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   259c0:	3b01      	subs	r3, #1
   259c2:	001a      	movs	r2, r3
   259c4:	2338      	movs	r3, #56	; 0x38
   259c6:	18fb      	adds	r3, r7, r3
   259c8:	0019      	movs	r1, r3
   259ca:	207f      	movs	r0, #127	; 0x7f
   259cc:	4b47      	ldr	r3, [pc, #284]	; (25aec <spi_cmd_complete+0x388>)
   259ce:	4798      	blx	r3
   259d0:	0003      	movs	r3, r0
   259d2:	18db      	adds	r3, r3, r3
   259d4:	b2da      	uxtb	r2, r3
   259d6:	2338      	movs	r3, #56	; 0x38
   259d8:	18fb      	adds	r3, r7, r3
   259da:	551a      	strb	r2, [r3, r4]
   259dc:	e002      	b.n	259e4 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   259de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   259e0:	3b01      	subs	r3, #1
   259e2:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   259e4:	230f      	movs	r3, #15
   259e6:	18fb      	adds	r3, r7, r3
   259e8:	781b      	ldrb	r3, [r3, #0]
   259ea:	2bcf      	cmp	r3, #207	; 0xcf
   259ec:	d009      	beq.n	25a02 <spi_cmd_complete+0x29e>
   259ee:	230f      	movs	r3, #15
   259f0:	18fb      	adds	r3, r7, r3
   259f2:	781b      	ldrb	r3, [r3, #0]
   259f4:	2bc5      	cmp	r3, #197	; 0xc5
   259f6:	d004      	beq.n	25a02 <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   259f8:	230f      	movs	r3, #15
   259fa:	18fb      	adds	r3, r7, r3
   259fc:	781b      	ldrb	r3, [r3, #0]
   259fe:	2bc6      	cmp	r3, #198	; 0xc6
   25a00:	d103      	bne.n	25a0a <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   25a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   25a04:	3306      	adds	r3, #6
   25a06:	673b      	str	r3, [r7, #112]	; 0x70
   25a08:	e018      	b.n	25a3c <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   25a0a:	230f      	movs	r3, #15
   25a0c:	18fb      	adds	r3, r7, r3
   25a0e:	781b      	ldrb	r3, [r3, #0]
   25a10:	2bc4      	cmp	r3, #196	; 0xc4
   25a12:	d004      	beq.n	25a1e <spi_cmd_complete+0x2ba>
   25a14:	230f      	movs	r3, #15
   25a16:	18fb      	adds	r3, r7, r3
   25a18:	781b      	ldrb	r3, [r3, #0]
   25a1a:	2bca      	cmp	r3, #202	; 0xca
   25a1c:	d10b      	bne.n	25a36 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   25a1e:	4b32      	ldr	r3, [pc, #200]	; (25ae8 <spi_cmd_complete+0x384>)
   25a20:	781b      	ldrb	r3, [r3, #0]
   25a22:	2b00      	cmp	r3, #0
   25a24:	d103      	bne.n	25a2e <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   25a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   25a28:	330c      	adds	r3, #12
   25a2a:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   25a2c:	e006      	b.n	25a3c <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   25a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   25a30:	330a      	adds	r3, #10
   25a32:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   25a34:	e002      	b.n	25a3c <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   25a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   25a38:	3305      	adds	r3, #5
   25a3a:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   25a3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   25a3e:	2b20      	cmp	r3, #32
   25a40:	d914      	bls.n	25a6c <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   25a42:	23f7      	movs	r3, #247	; 0xf7
   25a44:	005a      	lsls	r2, r3, #1
   25a46:	492a      	ldr	r1, [pc, #168]	; (25af0 <spi_cmd_complete+0x38c>)
   25a48:	4b2a      	ldr	r3, [pc, #168]	; (25af4 <spi_cmd_complete+0x390>)
   25a4a:	0018      	movs	r0, r3
   25a4c:	4b2a      	ldr	r3, [pc, #168]	; (25af8 <spi_cmd_complete+0x394>)
   25a4e:	4798      	blx	r3
   25a50:	6f39      	ldr	r1, [r7, #112]	; 0x70
   25a52:	4b2a      	ldr	r3, [pc, #168]	; (25afc <spi_cmd_complete+0x398>)
   25a54:	2220      	movs	r2, #32
   25a56:	0018      	movs	r0, r3
   25a58:	4b27      	ldr	r3, [pc, #156]	; (25af8 <spi_cmd_complete+0x394>)
   25a5a:	4798      	blx	r3
   25a5c:	4b28      	ldr	r3, [pc, #160]	; (25b00 <spi_cmd_complete+0x39c>)
   25a5e:	0018      	movs	r0, r3
   25a60:	4b25      	ldr	r3, [pc, #148]	; (25af8 <spi_cmd_complete+0x394>)
   25a62:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   25a64:	2300      	movs	r3, #0
   25a66:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   25a68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   25a6a:	e2dd      	b.n	26028 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   25a6c:	2377      	movs	r3, #119	; 0x77
   25a6e:	18fb      	adds	r3, r7, r3
   25a70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   25a72:	701a      	strb	r2, [r3, #0]
   25a74:	e00d      	b.n	25a92 <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   25a76:	2377      	movs	r3, #119	; 0x77
   25a78:	18fb      	adds	r3, r7, r3
   25a7a:	781b      	ldrb	r3, [r3, #0]
   25a7c:	2238      	movs	r2, #56	; 0x38
   25a7e:	18ba      	adds	r2, r7, r2
   25a80:	2100      	movs	r1, #0
   25a82:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   25a84:	2377      	movs	r3, #119	; 0x77
   25a86:	18fb      	adds	r3, r7, r3
   25a88:	781a      	ldrb	r2, [r3, #0]
   25a8a:	2377      	movs	r3, #119	; 0x77
   25a8c:	18fb      	adds	r3, r7, r3
   25a8e:	3201      	adds	r2, #1
   25a90:	701a      	strb	r2, [r3, #0]
   25a92:	2377      	movs	r3, #119	; 0x77
   25a94:	18fb      	adds	r3, r7, r3
   25a96:	781a      	ldrb	r2, [r3, #0]
   25a98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   25a9a:	429a      	cmp	r2, r3
   25a9c:	d3eb      	bcc.n	25a76 <spi_cmd_complete+0x312>
	}
	rix = len;
   25a9e:	2376      	movs	r3, #118	; 0x76
   25aa0:	18fb      	adds	r3, r7, r3
   25aa2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   25aa4:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   25aa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   25aa8:	b29a      	uxth	r2, r3
   25aaa:	2318      	movs	r3, #24
   25aac:	18f9      	adds	r1, r7, r3
   25aae:	2338      	movs	r3, #56	; 0x38
   25ab0:	18fb      	adds	r3, r7, r3
   25ab2:	0018      	movs	r0, r3
   25ab4:	4b13      	ldr	r3, [pc, #76]	; (25b04 <spi_cmd_complete+0x3a0>)
   25ab6:	4798      	blx	r3
   25ab8:	1e03      	subs	r3, r0, #0
   25aba:	d027      	beq.n	25b0c <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   25abc:	23fa      	movs	r3, #250	; 0xfa
   25abe:	33ff      	adds	r3, #255	; 0xff
   25ac0:	001a      	movs	r2, r3
   25ac2:	490b      	ldr	r1, [pc, #44]	; (25af0 <spi_cmd_complete+0x38c>)
   25ac4:	4b0b      	ldr	r3, [pc, #44]	; (25af4 <spi_cmd_complete+0x390>)
   25ac6:	0018      	movs	r0, r3
   25ac8:	4b0b      	ldr	r3, [pc, #44]	; (25af8 <spi_cmd_complete+0x394>)
   25aca:	4798      	blx	r3
   25acc:	4b0e      	ldr	r3, [pc, #56]	; (25b08 <spi_cmd_complete+0x3a4>)
   25ace:	0018      	movs	r0, r3
   25ad0:	4b09      	ldr	r3, [pc, #36]	; (25af8 <spi_cmd_complete+0x394>)
   25ad2:	4798      	blx	r3
   25ad4:	4b0a      	ldr	r3, [pc, #40]	; (25b00 <spi_cmd_complete+0x39c>)
   25ad6:	0018      	movs	r0, r3
   25ad8:	4b07      	ldr	r3, [pc, #28]	; (25af8 <spi_cmd_complete+0x394>)
   25ada:	4798      	blx	r3
		result = N_FAIL;
   25adc:	2300      	movs	r3, #0
   25ade:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   25ae0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   25ae2:	e2a1      	b.n	26028 <spi_cmd_complete+0x8c4>
   25ae4:	0003b884 	.word	0x0003b884
   25ae8:	20003ecc 	.word	0x20003ecc
   25aec:	00025199 	.word	0x00025199
   25af0:	0003b8e4 	.word	0x0003b8e4
   25af4:	0003b2d0 	.word	0x0003b2d0
   25af8:	00020039 	.word	0x00020039
   25afc:	0003b398 	.word	0x0003b398
   25b00:	0003b310 	.word	0x0003b310
   25b04:	00025125 	.word	0x00025125
   25b08:	0003b2e4 	.word	0x0003b2e4
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   25b0c:	230f      	movs	r3, #15
   25b0e:	18fb      	adds	r3, r7, r3
   25b10:	781b      	ldrb	r3, [r3, #0]
   25b12:	2bcf      	cmp	r3, #207	; 0xcf
   25b14:	d009      	beq.n	25b2a <spi_cmd_complete+0x3c6>
   25b16:	230f      	movs	r3, #15
   25b18:	18fb      	adds	r3, r7, r3
   25b1a:	781b      	ldrb	r3, [r3, #0]
   25b1c:	2bc5      	cmp	r3, #197	; 0xc5
   25b1e:	d004      	beq.n	25b2a <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   25b20:	230f      	movs	r3, #15
   25b22:	18fb      	adds	r3, r7, r3
   25b24:	781b      	ldrb	r3, [r3, #0]
   25b26:	2bc6      	cmp	r3, #198	; 0xc6
   25b28:	d106      	bne.n	25b38 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   25b2a:	2376      	movs	r3, #118	; 0x76
   25b2c:	18fb      	adds	r3, r7, r3
   25b2e:	781a      	ldrb	r2, [r3, #0]
   25b30:	2376      	movs	r3, #118	; 0x76
   25b32:	18fb      	adds	r3, r7, r3
   25b34:	3201      	adds	r2, #1
   25b36:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   25b38:	2376      	movs	r3, #118	; 0x76
   25b3a:	18fb      	adds	r3, r7, r3
   25b3c:	781b      	ldrb	r3, [r3, #0]
   25b3e:	2276      	movs	r2, #118	; 0x76
   25b40:	18ba      	adds	r2, r7, r2
   25b42:	1c59      	adds	r1, r3, #1
   25b44:	7011      	strb	r1, [r2, #0]
   25b46:	001a      	movs	r2, r3
   25b48:	2318      	movs	r3, #24
   25b4a:	18fb      	adds	r3, r7, r3
   25b4c:	5c9a      	ldrb	r2, [r3, r2]
   25b4e:	2317      	movs	r3, #23
   25b50:	18fb      	adds	r3, r7, r3
   25b52:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   25b54:	2317      	movs	r3, #23
   25b56:	18fb      	adds	r3, r7, r3
   25b58:	781b      	ldrb	r3, [r3, #0]
   25b5a:	220f      	movs	r2, #15
   25b5c:	18ba      	adds	r2, r7, r2
   25b5e:	7812      	ldrb	r2, [r2, #0]
   25b60:	429a      	cmp	r2, r3
   25b62:	d018      	beq.n	25b96 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   25b64:	4add      	ldr	r2, [pc, #884]	; (25edc <spi_cmd_complete+0x778>)
   25b66:	49de      	ldr	r1, [pc, #888]	; (25ee0 <spi_cmd_complete+0x77c>)
   25b68:	4bde      	ldr	r3, [pc, #888]	; (25ee4 <spi_cmd_complete+0x780>)
   25b6a:	0018      	movs	r0, r3
   25b6c:	4bde      	ldr	r3, [pc, #888]	; (25ee8 <spi_cmd_complete+0x784>)
   25b6e:	4798      	blx	r3
   25b70:	230f      	movs	r3, #15
   25b72:	18fb      	adds	r3, r7, r3
   25b74:	7819      	ldrb	r1, [r3, #0]
   25b76:	2317      	movs	r3, #23
   25b78:	18fb      	adds	r3, r7, r3
   25b7a:	781b      	ldrb	r3, [r3, #0]
   25b7c:	001a      	movs	r2, r3
   25b7e:	4bdb      	ldr	r3, [pc, #876]	; (25eec <spi_cmd_complete+0x788>)
   25b80:	0018      	movs	r0, r3
   25b82:	4bd9      	ldr	r3, [pc, #868]	; (25ee8 <spi_cmd_complete+0x784>)
   25b84:	4798      	blx	r3
   25b86:	4bda      	ldr	r3, [pc, #872]	; (25ef0 <spi_cmd_complete+0x78c>)
   25b88:	0018      	movs	r0, r3
   25b8a:	4bd7      	ldr	r3, [pc, #860]	; (25ee8 <spi_cmd_complete+0x784>)
   25b8c:	4798      	blx	r3
		result = N_FAIL;
   25b8e:	2300      	movs	r3, #0
   25b90:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   25b92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   25b94:	e248      	b.n	26028 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   25b96:	2376      	movs	r3, #118	; 0x76
   25b98:	18fb      	adds	r3, r7, r3
   25b9a:	781b      	ldrb	r3, [r3, #0]
   25b9c:	2276      	movs	r2, #118	; 0x76
   25b9e:	18ba      	adds	r2, r7, r2
   25ba0:	1c59      	adds	r1, r3, #1
   25ba2:	7011      	strb	r1, [r2, #0]
   25ba4:	001a      	movs	r2, r3
   25ba6:	2318      	movs	r3, #24
   25ba8:	18fb      	adds	r3, r7, r3
   25baa:	5c9a      	ldrb	r2, [r3, r2]
   25bac:	2317      	movs	r3, #23
   25bae:	18fb      	adds	r3, r7, r3
   25bb0:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   25bb2:	2317      	movs	r3, #23
   25bb4:	18fb      	adds	r3, r7, r3
   25bb6:	781b      	ldrb	r3, [r3, #0]
   25bb8:	2b00      	cmp	r3, #0
   25bba:	d016      	beq.n	25bea <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   25bbc:	4acd      	ldr	r2, [pc, #820]	; (25ef4 <spi_cmd_complete+0x790>)
   25bbe:	49c8      	ldr	r1, [pc, #800]	; (25ee0 <spi_cmd_complete+0x77c>)
   25bc0:	4bc8      	ldr	r3, [pc, #800]	; (25ee4 <spi_cmd_complete+0x780>)
   25bc2:	0018      	movs	r0, r3
   25bc4:	4bc8      	ldr	r3, [pc, #800]	; (25ee8 <spi_cmd_complete+0x784>)
   25bc6:	4798      	blx	r3
   25bc8:	2317      	movs	r3, #23
   25bca:	18fb      	adds	r3, r7, r3
   25bcc:	781b      	ldrb	r3, [r3, #0]
   25bce:	001a      	movs	r2, r3
   25bd0:	4bc9      	ldr	r3, [pc, #804]	; (25ef8 <spi_cmd_complete+0x794>)
   25bd2:	0011      	movs	r1, r2
   25bd4:	0018      	movs	r0, r3
   25bd6:	4bc4      	ldr	r3, [pc, #784]	; (25ee8 <spi_cmd_complete+0x784>)
   25bd8:	4798      	blx	r3
   25bda:	4bc5      	ldr	r3, [pc, #788]	; (25ef0 <spi_cmd_complete+0x78c>)
   25bdc:	0018      	movs	r0, r3
   25bde:	4bc2      	ldr	r3, [pc, #776]	; (25ee8 <spi_cmd_complete+0x784>)
   25be0:	4798      	blx	r3
		result = N_FAIL;
   25be2:	2300      	movs	r3, #0
   25be4:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   25be6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   25be8:	e21e      	b.n	26028 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   25bea:	230f      	movs	r3, #15
   25bec:	18fb      	adds	r3, r7, r3
   25bee:	781b      	ldrb	r3, [r3, #0]
   25bf0:	2bc4      	cmp	r3, #196	; 0xc4
   25bf2:	d00f      	beq.n	25c14 <spi_cmd_complete+0x4b0>
   25bf4:	230f      	movs	r3, #15
   25bf6:	18fb      	adds	r3, r7, r3
   25bf8:	781b      	ldrb	r3, [r3, #0]
   25bfa:	2bca      	cmp	r3, #202	; 0xca
   25bfc:	d00a      	beq.n	25c14 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   25bfe:	230f      	movs	r3, #15
   25c00:	18fb      	adds	r3, r7, r3
   25c02:	781b      	ldrb	r3, [r3, #0]
   25c04:	2bc2      	cmp	r3, #194	; 0xc2
   25c06:	d005      	beq.n	25c14 <spi_cmd_complete+0x4b0>
   25c08:	230f      	movs	r3, #15
   25c0a:	18fb      	adds	r3, r7, r3
   25c0c:	781b      	ldrb	r3, [r3, #0]
   25c0e:	2bc8      	cmp	r3, #200	; 0xc8
   25c10:	d000      	beq.n	25c14 <spi_cmd_complete+0x4b0>
   25c12:	e208      	b.n	26026 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   25c14:	230a      	movs	r3, #10
   25c16:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   25c18:	2376      	movs	r3, #118	; 0x76
   25c1a:	18fb      	adds	r3, r7, r3
   25c1c:	781a      	ldrb	r2, [r3, #0]
   25c1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   25c20:	429a      	cmp	r2, r3
   25c22:	d218      	bcs.n	25c56 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   25c24:	2376      	movs	r3, #118	; 0x76
   25c26:	18fb      	adds	r3, r7, r3
   25c28:	781b      	ldrb	r3, [r3, #0]
   25c2a:	2276      	movs	r2, #118	; 0x76
   25c2c:	18ba      	adds	r2, r7, r2
   25c2e:	1c59      	adds	r1, r3, #1
   25c30:	7011      	strb	r1, [r2, #0]
   25c32:	001a      	movs	r2, r3
   25c34:	2318      	movs	r3, #24
   25c36:	18fb      	adds	r3, r7, r3
   25c38:	5c9a      	ldrb	r2, [r3, r2]
   25c3a:	2317      	movs	r3, #23
   25c3c:	18fb      	adds	r3, r7, r3
   25c3e:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   25c40:	2317      	movs	r3, #23
   25c42:	18fb      	adds	r3, r7, r3
   25c44:	781b      	ldrb	r3, [r3, #0]
   25c46:	091b      	lsrs	r3, r3, #4
   25c48:	b2db      	uxtb	r3, r3
   25c4a:	001a      	movs	r2, r3
   25c4c:	230f      	movs	r3, #15
   25c4e:	4013      	ands	r3, r2
   25c50:	2b0f      	cmp	r3, #15
   25c52:	d103      	bne.n	25c5c <spi_cmd_complete+0x4f8>
					break;
   25c54:	e007      	b.n	25c66 <spi_cmd_complete+0x502>
					retry = 0;
   25c56:	2300      	movs	r3, #0
   25c58:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   25c5a:	e004      	b.n	25c66 <spi_cmd_complete+0x502>
			} while (retry--);
   25c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   25c5e:	1e5a      	subs	r2, r3, #1
   25c60:	667a      	str	r2, [r7, #100]	; 0x64
   25c62:	2b00      	cmp	r3, #0
   25c64:	d1d8      	bne.n	25c18 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   25c66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   25c68:	2b00      	cmp	r3, #0
   25c6a:	dc18      	bgt.n	25c9e <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   25c6c:	2395      	movs	r3, #149	; 0x95
   25c6e:	009a      	lsls	r2, r3, #2
   25c70:	499b      	ldr	r1, [pc, #620]	; (25ee0 <spi_cmd_complete+0x77c>)
   25c72:	4b9c      	ldr	r3, [pc, #624]	; (25ee4 <spi_cmd_complete+0x780>)
   25c74:	0018      	movs	r0, r3
   25c76:	4b9c      	ldr	r3, [pc, #624]	; (25ee8 <spi_cmd_complete+0x784>)
   25c78:	4798      	blx	r3
   25c7a:	2317      	movs	r3, #23
   25c7c:	18fb      	adds	r3, r7, r3
   25c7e:	781b      	ldrb	r3, [r3, #0]
   25c80:	001a      	movs	r2, r3
   25c82:	4b9e      	ldr	r3, [pc, #632]	; (25efc <spi_cmd_complete+0x798>)
   25c84:	0011      	movs	r1, r2
   25c86:	0018      	movs	r0, r3
   25c88:	4b97      	ldr	r3, [pc, #604]	; (25ee8 <spi_cmd_complete+0x784>)
   25c8a:	4798      	blx	r3
   25c8c:	4b98      	ldr	r3, [pc, #608]	; (25ef0 <spi_cmd_complete+0x78c>)
   25c8e:	0018      	movs	r0, r3
   25c90:	4b95      	ldr	r3, [pc, #596]	; (25ee8 <spi_cmd_complete+0x784>)
   25c92:	4798      	blx	r3
				result = N_RESET;
   25c94:	2301      	movs	r3, #1
   25c96:	425b      	negs	r3, r3
   25c98:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   25c9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   25c9c:	e1c4      	b.n	26028 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   25c9e:	230f      	movs	r3, #15
   25ca0:	18fb      	adds	r3, r7, r3
   25ca2:	781b      	ldrb	r3, [r3, #0]
   25ca4:	2bc4      	cmp	r3, #196	; 0xc4
   25ca6:	d005      	beq.n	25cb4 <spi_cmd_complete+0x550>
   25ca8:	230f      	movs	r3, #15
   25caa:	18fb      	adds	r3, r7, r3
   25cac:	781b      	ldrb	r3, [r3, #0]
   25cae:	2bca      	cmp	r3, #202	; 0xca
   25cb0:	d000      	beq.n	25cb4 <spi_cmd_complete+0x550>
   25cb2:	e08e      	b.n	25dd2 <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   25cb4:	2376      	movs	r3, #118	; 0x76
   25cb6:	18fb      	adds	r3, r7, r3
   25cb8:	781b      	ldrb	r3, [r3, #0]
   25cba:	3303      	adds	r3, #3
   25cbc:	001a      	movs	r2, r3
   25cbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   25cc0:	429a      	cmp	r2, r3
   25cc2:	d23c      	bcs.n	25d3e <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   25cc4:	2376      	movs	r3, #118	; 0x76
   25cc6:	18fb      	adds	r3, r7, r3
   25cc8:	781b      	ldrb	r3, [r3, #0]
   25cca:	2276      	movs	r2, #118	; 0x76
   25ccc:	18ba      	adds	r2, r7, r2
   25cce:	1c59      	adds	r1, r3, #1
   25cd0:	7011      	strb	r1, [r2, #0]
   25cd2:	001a      	movs	r2, r3
   25cd4:	2318      	movs	r3, #24
   25cd6:	18fb      	adds	r3, r7, r3
   25cd8:	5c9a      	ldrb	r2, [r3, r2]
   25cda:	687b      	ldr	r3, [r7, #4]
   25cdc:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   25cde:	687b      	ldr	r3, [r7, #4]
   25ce0:	1c5a      	adds	r2, r3, #1
   25ce2:	2376      	movs	r3, #118	; 0x76
   25ce4:	18fb      	adds	r3, r7, r3
   25ce6:	781b      	ldrb	r3, [r3, #0]
   25ce8:	2176      	movs	r1, #118	; 0x76
   25cea:	1879      	adds	r1, r7, r1
   25cec:	1c58      	adds	r0, r3, #1
   25cee:	7008      	strb	r0, [r1, #0]
   25cf0:	0019      	movs	r1, r3
   25cf2:	2318      	movs	r3, #24
   25cf4:	18fb      	adds	r3, r7, r3
   25cf6:	5c5b      	ldrb	r3, [r3, r1]
   25cf8:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   25cfa:	687b      	ldr	r3, [r7, #4]
   25cfc:	1c9a      	adds	r2, r3, #2
   25cfe:	2376      	movs	r3, #118	; 0x76
   25d00:	18fb      	adds	r3, r7, r3
   25d02:	781b      	ldrb	r3, [r3, #0]
   25d04:	2176      	movs	r1, #118	; 0x76
   25d06:	1879      	adds	r1, r7, r1
   25d08:	1c58      	adds	r0, r3, #1
   25d0a:	7008      	strb	r0, [r1, #0]
   25d0c:	0019      	movs	r1, r3
   25d0e:	2318      	movs	r3, #24
   25d10:	18fb      	adds	r3, r7, r3
   25d12:	5c5b      	ldrb	r3, [r3, r1]
   25d14:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   25d16:	687b      	ldr	r3, [r7, #4]
   25d18:	1cda      	adds	r2, r3, #3
   25d1a:	2376      	movs	r3, #118	; 0x76
   25d1c:	18fb      	adds	r3, r7, r3
   25d1e:	781b      	ldrb	r3, [r3, #0]
   25d20:	2176      	movs	r1, #118	; 0x76
   25d22:	1879      	adds	r1, r7, r1
   25d24:	1c58      	adds	r0, r3, #1
   25d26:	7008      	strb	r0, [r1, #0]
   25d28:	0019      	movs	r1, r3
   25d2a:	2318      	movs	r3, #24
   25d2c:	18fb      	adds	r3, r7, r3
   25d2e:	5c5b      	ldrb	r3, [r3, r1]
   25d30:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   25d32:	4b73      	ldr	r3, [pc, #460]	; (25f00 <spi_cmd_complete+0x79c>)
   25d34:	781b      	ldrb	r3, [r3, #0]
   25d36:	2b00      	cmp	r3, #0
   25d38:	d000      	beq.n	25d3c <spi_cmd_complete+0x5d8>
   25d3a:	e174      	b.n	26026 <spi_cmd_complete+0x8c2>
   25d3c:	e011      	b.n	25d62 <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   25d3e:	4a71      	ldr	r2, [pc, #452]	; (25f04 <spi_cmd_complete+0x7a0>)
   25d40:	4967      	ldr	r1, [pc, #412]	; (25ee0 <spi_cmd_complete+0x77c>)
   25d42:	4b68      	ldr	r3, [pc, #416]	; (25ee4 <spi_cmd_complete+0x780>)
   25d44:	0018      	movs	r0, r3
   25d46:	4b68      	ldr	r3, [pc, #416]	; (25ee8 <spi_cmd_complete+0x784>)
   25d48:	4798      	blx	r3
   25d4a:	4b6f      	ldr	r3, [pc, #444]	; (25f08 <spi_cmd_complete+0x7a4>)
   25d4c:	0018      	movs	r0, r3
   25d4e:	4b66      	ldr	r3, [pc, #408]	; (25ee8 <spi_cmd_complete+0x784>)
   25d50:	4798      	blx	r3
   25d52:	4b67      	ldr	r3, [pc, #412]	; (25ef0 <spi_cmd_complete+0x78c>)
   25d54:	0018      	movs	r0, r3
   25d56:	4b64      	ldr	r3, [pc, #400]	; (25ee8 <spi_cmd_complete+0x784>)
   25d58:	4798      	blx	r3
					result = N_FAIL;
   25d5a:	2300      	movs	r3, #0
   25d5c:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   25d5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   25d60:	e162      	b.n	26028 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   25d62:	2376      	movs	r3, #118	; 0x76
   25d64:	18fb      	adds	r3, r7, r3
   25d66:	781b      	ldrb	r3, [r3, #0]
   25d68:	3301      	adds	r3, #1
   25d6a:	001a      	movs	r2, r3
   25d6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   25d6e:	429a      	cmp	r2, r3
   25d70:	d21c      	bcs.n	25dac <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   25d72:	2376      	movs	r3, #118	; 0x76
   25d74:	18fb      	adds	r3, r7, r3
   25d76:	781b      	ldrb	r3, [r3, #0]
   25d78:	2276      	movs	r2, #118	; 0x76
   25d7a:	18ba      	adds	r2, r7, r2
   25d7c:	1c59      	adds	r1, r3, #1
   25d7e:	7011      	strb	r1, [r2, #0]
   25d80:	001a      	movs	r2, r3
   25d82:	2318      	movs	r3, #24
   25d84:	18fb      	adds	r3, r7, r3
   25d86:	5c9a      	ldrb	r2, [r3, r2]
   25d88:	2314      	movs	r3, #20
   25d8a:	18fb      	adds	r3, r7, r3
   25d8c:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   25d8e:	2376      	movs	r3, #118	; 0x76
   25d90:	18fb      	adds	r3, r7, r3
   25d92:	781b      	ldrb	r3, [r3, #0]
   25d94:	2276      	movs	r2, #118	; 0x76
   25d96:	18ba      	adds	r2, r7, r2
   25d98:	1c59      	adds	r1, r3, #1
   25d9a:	7011      	strb	r1, [r2, #0]
   25d9c:	001a      	movs	r2, r3
   25d9e:	2318      	movs	r3, #24
   25da0:	18fb      	adds	r3, r7, r3
   25da2:	5c9a      	ldrb	r2, [r3, r2]
   25da4:	2314      	movs	r3, #20
   25da6:	18fb      	adds	r3, r7, r3
   25da8:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   25daa:	e13c      	b.n	26026 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   25dac:	239c      	movs	r3, #156	; 0x9c
   25dae:	009a      	lsls	r2, r3, #2
   25db0:	494b      	ldr	r1, [pc, #300]	; (25ee0 <spi_cmd_complete+0x77c>)
   25db2:	4b4c      	ldr	r3, [pc, #304]	; (25ee4 <spi_cmd_complete+0x780>)
   25db4:	0018      	movs	r0, r3
   25db6:	4b4c      	ldr	r3, [pc, #304]	; (25ee8 <spi_cmd_complete+0x784>)
   25db8:	4798      	blx	r3
   25dba:	4b54      	ldr	r3, [pc, #336]	; (25f0c <spi_cmd_complete+0x7a8>)
   25dbc:	0018      	movs	r0, r3
   25dbe:	4b4a      	ldr	r3, [pc, #296]	; (25ee8 <spi_cmd_complete+0x784>)
   25dc0:	4798      	blx	r3
   25dc2:	4b4b      	ldr	r3, [pc, #300]	; (25ef0 <spi_cmd_complete+0x78c>)
   25dc4:	0018      	movs	r0, r3
   25dc6:	4b48      	ldr	r3, [pc, #288]	; (25ee8 <spi_cmd_complete+0x784>)
   25dc8:	4798      	blx	r3
						result = N_FAIL;
   25dca:	2300      	movs	r3, #0
   25dcc:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   25dce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   25dd0:	e12a      	b.n	26028 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   25dd2:	230f      	movs	r3, #15
   25dd4:	18fb      	adds	r3, r7, r3
   25dd6:	781b      	ldrb	r3, [r3, #0]
   25dd8:	2bc2      	cmp	r3, #194	; 0xc2
   25dda:	d005      	beq.n	25de8 <spi_cmd_complete+0x684>
   25ddc:	230f      	movs	r3, #15
   25dde:	18fb      	adds	r3, r7, r3
   25de0:	781b      	ldrb	r3, [r3, #0]
   25de2:	2bc8      	cmp	r3, #200	; 0xc8
   25de4:	d000      	beq.n	25de8 <spi_cmd_complete+0x684>
   25de6:	e11e      	b.n	26026 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   25de8:	2300      	movs	r3, #0
   25dea:	663b      	str	r3, [r7, #96]	; 0x60
   25dec:	e011      	b.n	25e12 <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   25dee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   25df0:	1c5a      	adds	r2, r3, #1
   25df2:	663a      	str	r2, [r7, #96]	; 0x60
   25df4:	001a      	movs	r2, r3
   25df6:	687b      	ldr	r3, [r7, #4]
   25df8:	189a      	adds	r2, r3, r2
   25dfa:	2376      	movs	r3, #118	; 0x76
   25dfc:	18fb      	adds	r3, r7, r3
   25dfe:	781b      	ldrb	r3, [r3, #0]
   25e00:	2176      	movs	r1, #118	; 0x76
   25e02:	1879      	adds	r1, r7, r1
   25e04:	1c58      	adds	r0, r3, #1
   25e06:	7008      	strb	r0, [r1, #0]
   25e08:	0019      	movs	r1, r3
   25e0a:	2318      	movs	r3, #24
   25e0c:	18fb      	adds	r3, r7, r3
   25e0e:	5c5b      	ldrb	r3, [r3, r1]
   25e10:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   25e12:	2376      	movs	r3, #118	; 0x76
   25e14:	18fb      	adds	r3, r7, r3
   25e16:	781a      	ldrb	r2, [r3, #0]
   25e18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   25e1a:	429a      	cmp	r2, r3
   25e1c:	d203      	bcs.n	25e26 <spi_cmd_complete+0x6c2>
   25e1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   25e20:	683b      	ldr	r3, [r7, #0]
   25e22:	429a      	cmp	r2, r3
   25e24:	d3e3      	bcc.n	25dee <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   25e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   25e28:	683a      	ldr	r2, [r7, #0]
   25e2a:	1ad3      	subs	r3, r2, r3
   25e2c:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   25e2e:	683b      	ldr	r3, [r7, #0]
   25e30:	2b00      	cmp	r3, #0
   25e32:	d100      	bne.n	25e36 <spi_cmd_complete+0x6d2>
   25e34:	e0f1      	b.n	2601a <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   25e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   25e38:	2280      	movs	r2, #128	; 0x80
   25e3a:	0192      	lsls	r2, r2, #6
   25e3c:	1ad3      	subs	r3, r2, r3
   25e3e:	001a      	movs	r2, r3
   25e40:	683b      	ldr	r3, [r7, #0]
   25e42:	429a      	cmp	r2, r3
   25e44:	d302      	bcc.n	25e4c <spi_cmd_complete+0x6e8>
						nbytes = sz;
   25e46:	683b      	ldr	r3, [r7, #0]
   25e48:	65fb      	str	r3, [r7, #92]	; 0x5c
   25e4a:	e004      	b.n	25e56 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   25e4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   25e4e:	2280      	movs	r2, #128	; 0x80
   25e50:	0192      	lsls	r2, r2, #6
   25e52:	1ad3      	subs	r3, r2, r3
   25e54:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   25e56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   25e58:	687a      	ldr	r2, [r7, #4]
   25e5a:	18d3      	adds	r3, r2, r3
   25e5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   25e5e:	b292      	uxth	r2, r2
   25e60:	0011      	movs	r1, r2
   25e62:	0018      	movs	r0, r3
   25e64:	4b2a      	ldr	r3, [pc, #168]	; (25f10 <spi_cmd_complete+0x7ac>)
   25e66:	4798      	blx	r3
   25e68:	1e03      	subs	r3, r0, #0
   25e6a:	d010      	beq.n	25e8e <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   25e6c:	4a29      	ldr	r2, [pc, #164]	; (25f14 <spi_cmd_complete+0x7b0>)
   25e6e:	491c      	ldr	r1, [pc, #112]	; (25ee0 <spi_cmd_complete+0x77c>)
   25e70:	4b1c      	ldr	r3, [pc, #112]	; (25ee4 <spi_cmd_complete+0x780>)
   25e72:	0018      	movs	r0, r3
   25e74:	4b1c      	ldr	r3, [pc, #112]	; (25ee8 <spi_cmd_complete+0x784>)
   25e76:	4798      	blx	r3
   25e78:	4b27      	ldr	r3, [pc, #156]	; (25f18 <spi_cmd_complete+0x7b4>)
   25e7a:	0018      	movs	r0, r3
   25e7c:	4b1a      	ldr	r3, [pc, #104]	; (25ee8 <spi_cmd_complete+0x784>)
   25e7e:	4798      	blx	r3
   25e80:	4b1b      	ldr	r3, [pc, #108]	; (25ef0 <spi_cmd_complete+0x78c>)
   25e82:	0018      	movs	r0, r3
   25e84:	4b18      	ldr	r3, [pc, #96]	; (25ee8 <spi_cmd_complete+0x784>)
   25e86:	4798      	blx	r3
						result = N_FAIL;
   25e88:	2300      	movs	r3, #0
   25e8a:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   25e8c:	e0cb      	b.n	26026 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   25e8e:	4b1c      	ldr	r3, [pc, #112]	; (25f00 <spi_cmd_complete+0x79c>)
   25e90:	781b      	ldrb	r3, [r3, #0]
   25e92:	2b00      	cmp	r3, #0
   25e94:	d119      	bne.n	25eca <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   25e96:	2314      	movs	r3, #20
   25e98:	18fb      	adds	r3, r7, r3
   25e9a:	2102      	movs	r1, #2
   25e9c:	0018      	movs	r0, r3
   25e9e:	4b1c      	ldr	r3, [pc, #112]	; (25f10 <spi_cmd_complete+0x7ac>)
   25ea0:	4798      	blx	r3
   25ea2:	1e03      	subs	r3, r0, #0
   25ea4:	d011      	beq.n	25eca <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   25ea6:	23a6      	movs	r3, #166	; 0xa6
   25ea8:	009a      	lsls	r2, r3, #2
   25eaa:	490d      	ldr	r1, [pc, #52]	; (25ee0 <spi_cmd_complete+0x77c>)
   25eac:	4b0d      	ldr	r3, [pc, #52]	; (25ee4 <spi_cmd_complete+0x780>)
   25eae:	0018      	movs	r0, r3
   25eb0:	4b0d      	ldr	r3, [pc, #52]	; (25ee8 <spi_cmd_complete+0x784>)
   25eb2:	4798      	blx	r3
   25eb4:	4b19      	ldr	r3, [pc, #100]	; (25f1c <spi_cmd_complete+0x7b8>)
   25eb6:	0018      	movs	r0, r3
   25eb8:	4b0b      	ldr	r3, [pc, #44]	; (25ee8 <spi_cmd_complete+0x784>)
   25eba:	4798      	blx	r3
   25ebc:	4b0c      	ldr	r3, [pc, #48]	; (25ef0 <spi_cmd_complete+0x78c>)
   25ebe:	0018      	movs	r0, r3
   25ec0:	4b09      	ldr	r3, [pc, #36]	; (25ee8 <spi_cmd_complete+0x784>)
   25ec2:	4798      	blx	r3
							result = N_FAIL;
   25ec4:	2300      	movs	r3, #0
   25ec6:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   25ec8:	e0ad      	b.n	26026 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   25eca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   25ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   25ece:	18d3      	adds	r3, r2, r3
   25ed0:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   25ed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   25ed4:	683a      	ldr	r2, [r7, #0]
   25ed6:	1ad3      	subs	r3, r2, r3
   25ed8:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   25eda:	e09e      	b.n	2601a <spi_cmd_complete+0x8b6>
   25edc:	0000022f 	.word	0x0000022f
   25ee0:	0003b8e4 	.word	0x0003b8e4
   25ee4:	0003b2d0 	.word	0x0003b2d0
   25ee8:	00020039 	.word	0x00020039
   25eec:	0003b3c8 	.word	0x0003b3c8
   25ef0:	0003b310 	.word	0x0003b310
   25ef4:	00000239 	.word	0x00000239
   25ef8:	0003b404 	.word	0x0003b404
   25efc:	0003b438 	.word	0x0003b438
   25f00:	20003ecc 	.word	0x20003ecc
   25f04:	00000263 	.word	0x00000263
   25f08:	0003b468 	.word	0x0003b468
   25f0c:	0003b498 	.word	0x0003b498
   25f10:	0002509d 	.word	0x0002509d
   25f14:	0000028e 	.word	0x0000028e
   25f18:	0003b4c8 	.word	0x0003b4c8
   25f1c:	0003b4fc 	.word	0x0003b4fc
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   25f20:	683a      	ldr	r2, [r7, #0]
   25f22:	2380      	movs	r3, #128	; 0x80
   25f24:	019b      	lsls	r3, r3, #6
   25f26:	429a      	cmp	r2, r3
   25f28:	d802      	bhi.n	25f30 <spi_cmd_complete+0x7cc>
						nbytes = sz;
   25f2a:	683b      	ldr	r3, [r7, #0]
   25f2c:	65bb      	str	r3, [r7, #88]	; 0x58
   25f2e:	e002      	b.n	25f36 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   25f30:	2380      	movs	r3, #128	; 0x80
   25f32:	019b      	lsls	r3, r3, #6
   25f34:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   25f36:	230a      	movs	r3, #10
   25f38:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   25f3a:	2317      	movs	r3, #23
   25f3c:	18fb      	adds	r3, r7, r3
   25f3e:	2101      	movs	r1, #1
   25f40:	0018      	movs	r0, r3
   25f42:	4b3b      	ldr	r3, [pc, #236]	; (26030 <spi_cmd_complete+0x8cc>)
   25f44:	4798      	blx	r3
   25f46:	1e03      	subs	r3, r0, #0
   25f48:	d011      	beq.n	25f6e <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   25f4a:	23ae      	movs	r3, #174	; 0xae
   25f4c:	009a      	lsls	r2, r3, #2
   25f4e:	4939      	ldr	r1, [pc, #228]	; (26034 <spi_cmd_complete+0x8d0>)
   25f50:	4b39      	ldr	r3, [pc, #228]	; (26038 <spi_cmd_complete+0x8d4>)
   25f52:	0018      	movs	r0, r3
   25f54:	4b39      	ldr	r3, [pc, #228]	; (2603c <spi_cmd_complete+0x8d8>)
   25f56:	4798      	blx	r3
   25f58:	4b39      	ldr	r3, [pc, #228]	; (26040 <spi_cmd_complete+0x8dc>)
   25f5a:	0018      	movs	r0, r3
   25f5c:	4b37      	ldr	r3, [pc, #220]	; (2603c <spi_cmd_complete+0x8d8>)
   25f5e:	4798      	blx	r3
   25f60:	4b38      	ldr	r3, [pc, #224]	; (26044 <spi_cmd_complete+0x8e0>)
   25f62:	0018      	movs	r0, r3
   25f64:	4b35      	ldr	r3, [pc, #212]	; (2603c <spi_cmd_complete+0x8d8>)
   25f66:	4798      	blx	r3
							result = N_FAIL;
   25f68:	2300      	movs	r3, #0
   25f6a:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   25f6c:	e010      	b.n	25f90 <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   25f6e:	2317      	movs	r3, #23
   25f70:	18fb      	adds	r3, r7, r3
   25f72:	781b      	ldrb	r3, [r3, #0]
   25f74:	091b      	lsrs	r3, r3, #4
   25f76:	b2db      	uxtb	r3, r3
   25f78:	001a      	movs	r2, r3
   25f7a:	230f      	movs	r3, #15
   25f7c:	4013      	ands	r3, r2
   25f7e:	2b0f      	cmp	r3, #15
   25f80:	d005      	beq.n	25f8e <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   25f82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   25f84:	1e5a      	subs	r2, r3, #1
   25f86:	667a      	str	r2, [r7, #100]	; 0x64
   25f88:	2b00      	cmp	r3, #0
   25f8a:	d1d6      	bne.n	25f3a <spi_cmd_complete+0x7d6>
   25f8c:	e000      	b.n	25f90 <spi_cmd_complete+0x82c>
							break;
   25f8e:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   25f90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   25f92:	2b00      	cmp	r3, #0
   25f94:	d046      	beq.n	26024 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   25f96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   25f98:	687a      	ldr	r2, [r7, #4]
   25f9a:	18d3      	adds	r3, r2, r3
   25f9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
   25f9e:	b292      	uxth	r2, r2
   25fa0:	0011      	movs	r1, r2
   25fa2:	0018      	movs	r0, r3
   25fa4:	4b22      	ldr	r3, [pc, #136]	; (26030 <spi_cmd_complete+0x8cc>)
   25fa6:	4798      	blx	r3
   25fa8:	1e03      	subs	r3, r0, #0
   25faa:	d011      	beq.n	25fd0 <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   25fac:	23b2      	movs	r3, #178	; 0xb2
   25fae:	009a      	lsls	r2, r3, #2
   25fb0:	4920      	ldr	r1, [pc, #128]	; (26034 <spi_cmd_complete+0x8d0>)
   25fb2:	4b21      	ldr	r3, [pc, #132]	; (26038 <spi_cmd_complete+0x8d4>)
   25fb4:	0018      	movs	r0, r3
   25fb6:	4b21      	ldr	r3, [pc, #132]	; (2603c <spi_cmd_complete+0x8d8>)
   25fb8:	4798      	blx	r3
   25fba:	4b23      	ldr	r3, [pc, #140]	; (26048 <spi_cmd_complete+0x8e4>)
   25fbc:	0018      	movs	r0, r3
   25fbe:	4b1f      	ldr	r3, [pc, #124]	; (2603c <spi_cmd_complete+0x8d8>)
   25fc0:	4798      	blx	r3
   25fc2:	4b20      	ldr	r3, [pc, #128]	; (26044 <spi_cmd_complete+0x8e0>)
   25fc4:	0018      	movs	r0, r3
   25fc6:	4b1d      	ldr	r3, [pc, #116]	; (2603c <spi_cmd_complete+0x8d8>)
   25fc8:	4798      	blx	r3
						result = N_FAIL;
   25fca:	2300      	movs	r3, #0
   25fcc:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   25fce:	e02a      	b.n	26026 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   25fd0:	4b1e      	ldr	r3, [pc, #120]	; (2604c <spi_cmd_complete+0x8e8>)
   25fd2:	781b      	ldrb	r3, [r3, #0]
   25fd4:	2b00      	cmp	r3, #0
   25fd6:	d118      	bne.n	2600a <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   25fd8:	2314      	movs	r3, #20
   25fda:	18fb      	adds	r3, r7, r3
   25fdc:	2102      	movs	r1, #2
   25fde:	0018      	movs	r0, r3
   25fe0:	4b13      	ldr	r3, [pc, #76]	; (26030 <spi_cmd_complete+0x8cc>)
   25fe2:	4798      	blx	r3
   25fe4:	1e03      	subs	r3, r0, #0
   25fe6:	d010      	beq.n	2600a <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   25fe8:	4a19      	ldr	r2, [pc, #100]	; (26050 <spi_cmd_complete+0x8ec>)
   25fea:	4912      	ldr	r1, [pc, #72]	; (26034 <spi_cmd_complete+0x8d0>)
   25fec:	4b12      	ldr	r3, [pc, #72]	; (26038 <spi_cmd_complete+0x8d4>)
   25fee:	0018      	movs	r0, r3
   25ff0:	4b12      	ldr	r3, [pc, #72]	; (2603c <spi_cmd_complete+0x8d8>)
   25ff2:	4798      	blx	r3
   25ff4:	4b17      	ldr	r3, [pc, #92]	; (26054 <spi_cmd_complete+0x8f0>)
   25ff6:	0018      	movs	r0, r3
   25ff8:	4b10      	ldr	r3, [pc, #64]	; (2603c <spi_cmd_complete+0x8d8>)
   25ffa:	4798      	blx	r3
   25ffc:	4b11      	ldr	r3, [pc, #68]	; (26044 <spi_cmd_complete+0x8e0>)
   25ffe:	0018      	movs	r0, r3
   26000:	4b0e      	ldr	r3, [pc, #56]	; (2603c <spi_cmd_complete+0x8d8>)
   26002:	4798      	blx	r3
							result = N_FAIL;
   26004:	2300      	movs	r3, #0
   26006:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   26008:	e00d      	b.n	26026 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   2600a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   2600c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2600e:	18d3      	adds	r3, r2, r3
   26010:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   26012:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26014:	683a      	ldr	r2, [r7, #0]
   26016:	1ad3      	subs	r3, r2, r3
   26018:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   2601a:	683b      	ldr	r3, [r7, #0]
   2601c:	2b00      	cmp	r3, #0
   2601e:	d000      	beq.n	26022 <spi_cmd_complete+0x8be>
   26020:	e77e      	b.n	25f20 <spi_cmd_complete+0x7bc>
   26022:	e000      	b.n	26026 <spi_cmd_complete+0x8c2>
						break;
   26024:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   26026:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   26028:	0018      	movs	r0, r3
   2602a:	46bd      	mov	sp, r7
   2602c:	b01f      	add	sp, #124	; 0x7c
   2602e:	bd90      	pop	{r4, r7, pc}
   26030:	0002509d 	.word	0x0002509d
   26034:	0003b8e4 	.word	0x0003b8e4
   26038:	0003b2d0 	.word	0x0003b2d0
   2603c:	00020039 	.word	0x00020039
   26040:	0003b534 	.word	0x0003b534
   26044:	0003b310 	.word	0x0003b310
   26048:	0003b4c8 	.word	0x0003b4c8
   2604c:	20003ecc 	.word	0x20003ecc
   26050:	000002d2 	.word	0x000002d2
   26054:	0003b4fc 	.word	0x0003b4fc

00026058 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   26058:	b580      	push	{r7, lr}
   2605a:	b086      	sub	sp, #24
   2605c:	af00      	add	r7, sp, #0
   2605e:	6078      	str	r0, [r7, #4]
   26060:	000a      	movs	r2, r1
   26062:	1cbb      	adds	r3, r7, #2
   26064:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   26066:	2313      	movs	r3, #19
   26068:	18fb      	adds	r3, r7, r3
   2606a:	2201      	movs	r2, #1
   2606c:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   2606e:	230c      	movs	r3, #12
   26070:	18fb      	adds	r3, r7, r3
   26072:	2200      	movs	r2, #0
   26074:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   26076:	2316      	movs	r3, #22
   26078:	18fb      	adds	r3, r7, r3
   2607a:	2200      	movs	r2, #0
   2607c:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   2607e:	1cbb      	adds	r3, r7, #2
   26080:	881a      	ldrh	r2, [r3, #0]
   26082:	2380      	movs	r3, #128	; 0x80
   26084:	019b      	lsls	r3, r3, #6
   26086:	429a      	cmp	r2, r3
   26088:	d805      	bhi.n	26096 <spi_data_write+0x3e>
			nbytes = sz;
   2608a:	2314      	movs	r3, #20
   2608c:	18fb      	adds	r3, r7, r3
   2608e:	1cba      	adds	r2, r7, #2
   26090:	8812      	ldrh	r2, [r2, #0]
   26092:	801a      	strh	r2, [r3, #0]
   26094:	e004      	b.n	260a0 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   26096:	2314      	movs	r3, #20
   26098:	18fb      	adds	r3, r7, r3
   2609a:	2280      	movs	r2, #128	; 0x80
   2609c:	0192      	lsls	r2, r2, #6
   2609e:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   260a0:	2311      	movs	r3, #17
   260a2:	18fb      	adds	r3, r7, r3
   260a4:	22f0      	movs	r2, #240	; 0xf0
   260a6:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   260a8:	2316      	movs	r3, #22
   260aa:	18fb      	adds	r3, r7, r3
   260ac:	2200      	movs	r2, #0
   260ae:	5e9b      	ldrsh	r3, [r3, r2]
   260b0:	2b00      	cmp	r3, #0
   260b2:	d10f      	bne.n	260d4 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   260b4:	1cbb      	adds	r3, r7, #2
   260b6:	881a      	ldrh	r2, [r3, #0]
   260b8:	2380      	movs	r3, #128	; 0x80
   260ba:	019b      	lsls	r3, r3, #6
   260bc:	429a      	cmp	r2, r3
   260be:	d804      	bhi.n	260ca <spi_data_write+0x72>
				order = 0x3;
   260c0:	2312      	movs	r3, #18
   260c2:	18fb      	adds	r3, r7, r3
   260c4:	2203      	movs	r2, #3
   260c6:	701a      	strb	r2, [r3, #0]
   260c8:	e013      	b.n	260f2 <spi_data_write+0x9a>
			else
				order = 0x1;
   260ca:	2312      	movs	r3, #18
   260cc:	18fb      	adds	r3, r7, r3
   260ce:	2201      	movs	r2, #1
   260d0:	701a      	strb	r2, [r3, #0]
   260d2:	e00e      	b.n	260f2 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   260d4:	1cbb      	adds	r3, r7, #2
   260d6:	881a      	ldrh	r2, [r3, #0]
   260d8:	2380      	movs	r3, #128	; 0x80
   260da:	019b      	lsls	r3, r3, #6
   260dc:	429a      	cmp	r2, r3
   260de:	d804      	bhi.n	260ea <spi_data_write+0x92>
				order = 0x3;
   260e0:	2312      	movs	r3, #18
   260e2:	18fb      	adds	r3, r7, r3
   260e4:	2203      	movs	r2, #3
   260e6:	701a      	strb	r2, [r3, #0]
   260e8:	e003      	b.n	260f2 <spi_data_write+0x9a>
			else
				order = 0x2;
   260ea:	2312      	movs	r3, #18
   260ec:	18fb      	adds	r3, r7, r3
   260ee:	2202      	movs	r2, #2
   260f0:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   260f2:	2311      	movs	r3, #17
   260f4:	18fb      	adds	r3, r7, r3
   260f6:	781a      	ldrb	r2, [r3, #0]
   260f8:	2312      	movs	r3, #18
   260fa:	18fb      	adds	r3, r7, r3
   260fc:	781b      	ldrb	r3, [r3, #0]
   260fe:	4313      	orrs	r3, r2
   26100:	b2da      	uxtb	r2, r3
   26102:	2311      	movs	r3, #17
   26104:	18fb      	adds	r3, r7, r3
   26106:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   26108:	2311      	movs	r3, #17
   2610a:	18fb      	adds	r3, r7, r3
   2610c:	2101      	movs	r1, #1
   2610e:	0018      	movs	r0, r3
   26110:	4b3c      	ldr	r3, [pc, #240]	; (26204 <spi_data_write+0x1ac>)
   26112:	4798      	blx	r3
   26114:	1e03      	subs	r3, r0, #0
   26116:	d012      	beq.n	2613e <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   26118:	4a3b      	ldr	r2, [pc, #236]	; (26208 <spi_data_write+0x1b0>)
   2611a:	493c      	ldr	r1, [pc, #240]	; (2620c <spi_data_write+0x1b4>)
   2611c:	4b3c      	ldr	r3, [pc, #240]	; (26210 <spi_data_write+0x1b8>)
   2611e:	0018      	movs	r0, r3
   26120:	4b3c      	ldr	r3, [pc, #240]	; (26214 <spi_data_write+0x1bc>)
   26122:	4798      	blx	r3
   26124:	4b3c      	ldr	r3, [pc, #240]	; (26218 <spi_data_write+0x1c0>)
   26126:	0018      	movs	r0, r3
   26128:	4b3a      	ldr	r3, [pc, #232]	; (26214 <spi_data_write+0x1bc>)
   2612a:	4798      	blx	r3
   2612c:	4b3b      	ldr	r3, [pc, #236]	; (2621c <spi_data_write+0x1c4>)
   2612e:	0018      	movs	r0, r3
   26130:	4b38      	ldr	r3, [pc, #224]	; (26214 <spi_data_write+0x1bc>)
   26132:	4798      	blx	r3
			result = N_FAIL;
   26134:	2313      	movs	r3, #19
   26136:	18fb      	adds	r3, r7, r3
   26138:	2200      	movs	r2, #0
   2613a:	701a      	strb	r2, [r3, #0]
			break;
   2613c:	e059      	b.n	261f2 <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   2613e:	2316      	movs	r3, #22
   26140:	18fb      	adds	r3, r7, r3
   26142:	2200      	movs	r2, #0
   26144:	5e9b      	ldrsh	r3, [r3, r2]
   26146:	687a      	ldr	r2, [r7, #4]
   26148:	18d2      	adds	r2, r2, r3
   2614a:	2314      	movs	r3, #20
   2614c:	18fb      	adds	r3, r7, r3
   2614e:	881b      	ldrh	r3, [r3, #0]
   26150:	0019      	movs	r1, r3
   26152:	0010      	movs	r0, r2
   26154:	4b2b      	ldr	r3, [pc, #172]	; (26204 <spi_data_write+0x1ac>)
   26156:	4798      	blx	r3
   26158:	1e03      	subs	r3, r0, #0
   2615a:	d012      	beq.n	26182 <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   2615c:	4a30      	ldr	r2, [pc, #192]	; (26220 <spi_data_write+0x1c8>)
   2615e:	492b      	ldr	r1, [pc, #172]	; (2620c <spi_data_write+0x1b4>)
   26160:	4b2b      	ldr	r3, [pc, #172]	; (26210 <spi_data_write+0x1b8>)
   26162:	0018      	movs	r0, r3
   26164:	4b2b      	ldr	r3, [pc, #172]	; (26214 <spi_data_write+0x1bc>)
   26166:	4798      	blx	r3
   26168:	4b2e      	ldr	r3, [pc, #184]	; (26224 <spi_data_write+0x1cc>)
   2616a:	0018      	movs	r0, r3
   2616c:	4b29      	ldr	r3, [pc, #164]	; (26214 <spi_data_write+0x1bc>)
   2616e:	4798      	blx	r3
   26170:	4b2a      	ldr	r3, [pc, #168]	; (2621c <spi_data_write+0x1c4>)
   26172:	0018      	movs	r0, r3
   26174:	4b27      	ldr	r3, [pc, #156]	; (26214 <spi_data_write+0x1bc>)
   26176:	4798      	blx	r3
			result = N_FAIL;
   26178:	2313      	movs	r3, #19
   2617a:	18fb      	adds	r3, r7, r3
   2617c:	2200      	movs	r2, #0
   2617e:	701a      	strb	r2, [r3, #0]
			break;
   26180:	e037      	b.n	261f2 <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   26182:	4b29      	ldr	r3, [pc, #164]	; (26228 <spi_data_write+0x1d0>)
   26184:	781b      	ldrb	r3, [r3, #0]
   26186:	2b00      	cmp	r3, #0
   26188:	d11b      	bne.n	261c2 <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   2618a:	230c      	movs	r3, #12
   2618c:	18fb      	adds	r3, r7, r3
   2618e:	2102      	movs	r1, #2
   26190:	0018      	movs	r0, r3
   26192:	4b1c      	ldr	r3, [pc, #112]	; (26204 <spi_data_write+0x1ac>)
   26194:	4798      	blx	r3
   26196:	1e03      	subs	r3, r0, #0
   26198:	d013      	beq.n	261c2 <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   2619a:	23d7      	movs	r3, #215	; 0xd7
   2619c:	009a      	lsls	r2, r3, #2
   2619e:	491b      	ldr	r1, [pc, #108]	; (2620c <spi_data_write+0x1b4>)
   261a0:	4b1b      	ldr	r3, [pc, #108]	; (26210 <spi_data_write+0x1b8>)
   261a2:	0018      	movs	r0, r3
   261a4:	4b1b      	ldr	r3, [pc, #108]	; (26214 <spi_data_write+0x1bc>)
   261a6:	4798      	blx	r3
   261a8:	4b20      	ldr	r3, [pc, #128]	; (2622c <spi_data_write+0x1d4>)
   261aa:	0018      	movs	r0, r3
   261ac:	4b19      	ldr	r3, [pc, #100]	; (26214 <spi_data_write+0x1bc>)
   261ae:	4798      	blx	r3
   261b0:	4b1a      	ldr	r3, [pc, #104]	; (2621c <spi_data_write+0x1c4>)
   261b2:	0018      	movs	r0, r3
   261b4:	4b17      	ldr	r3, [pc, #92]	; (26214 <spi_data_write+0x1bc>)
   261b6:	4798      	blx	r3
				result = N_FAIL;
   261b8:	2313      	movs	r3, #19
   261ba:	18fb      	adds	r3, r7, r3
   261bc:	2200      	movs	r2, #0
   261be:	701a      	strb	r2, [r3, #0]
				break;
   261c0:	e017      	b.n	261f2 <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   261c2:	2316      	movs	r3, #22
   261c4:	18fb      	adds	r3, r7, r3
   261c6:	881a      	ldrh	r2, [r3, #0]
   261c8:	2314      	movs	r3, #20
   261ca:	18fb      	adds	r3, r7, r3
   261cc:	881b      	ldrh	r3, [r3, #0]
   261ce:	18d3      	adds	r3, r2, r3
   261d0:	b29a      	uxth	r2, r3
   261d2:	2316      	movs	r3, #22
   261d4:	18fb      	adds	r3, r7, r3
   261d6:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   261d8:	1cbb      	adds	r3, r7, #2
   261da:	1cb9      	adds	r1, r7, #2
   261dc:	2214      	movs	r2, #20
   261de:	18ba      	adds	r2, r7, r2
   261e0:	8809      	ldrh	r1, [r1, #0]
   261e2:	8812      	ldrh	r2, [r2, #0]
   261e4:	1a8a      	subs	r2, r1, r2
   261e6:	801a      	strh	r2, [r3, #0]
	} while (sz);
   261e8:	1cbb      	adds	r3, r7, #2
   261ea:	881b      	ldrh	r3, [r3, #0]
   261ec:	2b00      	cmp	r3, #0
   261ee:	d000      	beq.n	261f2 <spi_data_write+0x19a>
   261f0:	e745      	b.n	2607e <spi_data_write+0x26>


	return result;
   261f2:	2313      	movs	r3, #19
   261f4:	18fb      	adds	r3, r7, r3
   261f6:	781b      	ldrb	r3, [r3, #0]
   261f8:	b25b      	sxtb	r3, r3
}
   261fa:	0018      	movs	r0, r3
   261fc:	46bd      	mov	sp, r7
   261fe:	b006      	add	sp, #24
   26200:	bd80      	pop	{r7, pc}
   26202:	46c0      	nop			; (mov r8, r8)
   26204:	000250e1 	.word	0x000250e1
   26208:	00000349 	.word	0x00000349
   2620c:	0003b8f8 	.word	0x0003b8f8
   26210:	0003b2d0 	.word	0x0003b2d0
   26214:	00020039 	.word	0x00020039
   26218:	0003b598 	.word	0x0003b598
   2621c:	0003b310 	.word	0x0003b310
   26220:	00000352 	.word	0x00000352
   26224:	0003b5d0 	.word	0x0003b5d0
   26228:	20003ecc 	.word	0x20003ecc
   2622c:	0003b604 	.word	0x0003b604

00026230 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   26230:	b590      	push	{r4, r7, lr}
   26232:	b087      	sub	sp, #28
   26234:	af02      	add	r7, sp, #8
   26236:	6078      	str	r0, [r7, #4]
   26238:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   2623a:	230f      	movs	r3, #15
   2623c:	18fb      	adds	r3, r7, r3
   2623e:	220a      	movs	r2, #10
   26240:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   26242:	230c      	movs	r3, #12
   26244:	18fb      	adds	r3, r7, r3
   26246:	2201      	movs	r2, #1
   26248:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   2624a:	230e      	movs	r3, #14
   2624c:	18fb      	adds	r3, r7, r3
   2624e:	22c9      	movs	r2, #201	; 0xc9
   26250:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   26252:	230d      	movs	r3, #13
   26254:	18fb      	adds	r3, r7, r3
   26256:	2200      	movs	r2, #0
   26258:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   2625a:	687b      	ldr	r3, [r7, #4]
   2625c:	2b30      	cmp	r3, #48	; 0x30
   2625e:	d808      	bhi.n	26272 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   26260:	230e      	movs	r3, #14
   26262:	18fb      	adds	r3, r7, r3
   26264:	22c3      	movs	r2, #195	; 0xc3
   26266:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   26268:	230d      	movs	r3, #13
   2626a:	18fb      	adds	r3, r7, r3
   2626c:	2201      	movs	r2, #1
   2626e:	701a      	strb	r2, [r3, #0]
   26270:	e007      	b.n	26282 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   26272:	230e      	movs	r3, #14
   26274:	18fb      	adds	r3, r7, r3
   26276:	22c9      	movs	r2, #201	; 0xc9
   26278:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   2627a:	230d      	movs	r3, #13
   2627c:	18fb      	adds	r3, r7, r3
   2627e:	2200      	movs	r2, #0
   26280:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   26282:	003a      	movs	r2, r7
   26284:	6879      	ldr	r1, [r7, #4]
   26286:	230e      	movs	r3, #14
   26288:	18fb      	adds	r3, r7, r3
   2628a:	7818      	ldrb	r0, [r3, #0]
   2628c:	230d      	movs	r3, #13
   2628e:	18fb      	adds	r3, r7, r3
   26290:	781b      	ldrb	r3, [r3, #0]
   26292:	9300      	str	r3, [sp, #0]
   26294:	2304      	movs	r3, #4
   26296:	4c2e      	ldr	r4, [pc, #184]	; (26350 <spi_write_reg+0x120>)
   26298:	47a0      	blx	r4
   2629a:	0002      	movs	r2, r0
   2629c:	230c      	movs	r3, #12
   2629e:	18fb      	adds	r3, r7, r3
   262a0:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   262a2:	230c      	movs	r3, #12
   262a4:	18fb      	adds	r3, r7, r3
   262a6:	781b      	ldrb	r3, [r3, #0]
   262a8:	b25b      	sxtb	r3, r3
   262aa:	2b01      	cmp	r3, #1
   262ac:	d010      	beq.n	262d0 <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   262ae:	4a29      	ldr	r2, [pc, #164]	; (26354 <spi_write_reg+0x124>)
   262b0:	4929      	ldr	r1, [pc, #164]	; (26358 <spi_write_reg+0x128>)
   262b2:	4b2a      	ldr	r3, [pc, #168]	; (2635c <spi_write_reg+0x12c>)
   262b4:	0018      	movs	r0, r3
   262b6:	4b2a      	ldr	r3, [pc, #168]	; (26360 <spi_write_reg+0x130>)
   262b8:	4798      	blx	r3
   262ba:	687a      	ldr	r2, [r7, #4]
   262bc:	4b29      	ldr	r3, [pc, #164]	; (26364 <spi_write_reg+0x134>)
   262be:	0011      	movs	r1, r2
   262c0:	0018      	movs	r0, r3
   262c2:	4b27      	ldr	r3, [pc, #156]	; (26360 <spi_write_reg+0x130>)
   262c4:	4798      	blx	r3
   262c6:	4b28      	ldr	r3, [pc, #160]	; (26368 <spi_write_reg+0x138>)
   262c8:	0018      	movs	r0, r3
   262ca:	4b25      	ldr	r3, [pc, #148]	; (26360 <spi_write_reg+0x130>)
   262cc:	4798      	blx	r3
		goto _FAIL_;
   262ce:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   262d0:	230c      	movs	r3, #12
   262d2:	18fb      	adds	r3, r7, r3
   262d4:	781b      	ldrb	r3, [r3, #0]
   262d6:	b25b      	sxtb	r3, r3
   262d8:	2b01      	cmp	r3, #1
   262da:	d030      	beq.n	2633e <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   262dc:	2001      	movs	r0, #1
   262de:	4b23      	ldr	r3, [pc, #140]	; (2636c <spi_write_reg+0x13c>)
   262e0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   262e2:	2300      	movs	r3, #0
   262e4:	9300      	str	r3, [sp, #0]
   262e6:	2300      	movs	r3, #0
   262e8:	2200      	movs	r2, #0
   262ea:	2100      	movs	r1, #0
   262ec:	20cf      	movs	r0, #207	; 0xcf
   262ee:	4c20      	ldr	r4, [pc, #128]	; (26370 <spi_write_reg+0x140>)
   262f0:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   262f2:	20cf      	movs	r0, #207	; 0xcf
   262f4:	4b1f      	ldr	r3, [pc, #124]	; (26374 <spi_write_reg+0x144>)
   262f6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   262f8:	23ea      	movs	r3, #234	; 0xea
   262fa:	009a      	lsls	r2, r3, #2
   262fc:	4916      	ldr	r1, [pc, #88]	; (26358 <spi_write_reg+0x128>)
   262fe:	4b17      	ldr	r3, [pc, #92]	; (2635c <spi_write_reg+0x12c>)
   26300:	0018      	movs	r0, r3
   26302:	4b17      	ldr	r3, [pc, #92]	; (26360 <spi_write_reg+0x130>)
   26304:	4798      	blx	r3
   26306:	230f      	movs	r3, #15
   26308:	18fb      	adds	r3, r7, r3
   2630a:	7819      	ldrb	r1, [r3, #0]
   2630c:	683b      	ldr	r3, [r7, #0]
   2630e:	687a      	ldr	r2, [r7, #4]
   26310:	4819      	ldr	r0, [pc, #100]	; (26378 <spi_write_reg+0x148>)
   26312:	4c13      	ldr	r4, [pc, #76]	; (26360 <spi_write_reg+0x130>)
   26314:	47a0      	blx	r4
   26316:	4b14      	ldr	r3, [pc, #80]	; (26368 <spi_write_reg+0x138>)
   26318:	0018      	movs	r0, r3
   2631a:	4b11      	ldr	r3, [pc, #68]	; (26360 <spi_write_reg+0x130>)
   2631c:	4798      	blx	r3
		nm_bsp_sleep(1);
   2631e:	2001      	movs	r0, #1
   26320:	4b12      	ldr	r3, [pc, #72]	; (2636c <spi_write_reg+0x13c>)
   26322:	4798      	blx	r3
		retry--;
   26324:	230f      	movs	r3, #15
   26326:	18fb      	adds	r3, r7, r3
   26328:	781a      	ldrb	r2, [r3, #0]
   2632a:	230f      	movs	r3, #15
   2632c:	18fb      	adds	r3, r7, r3
   2632e:	3a01      	subs	r2, #1
   26330:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   26332:	230f      	movs	r3, #15
   26334:	18fb      	adds	r3, r7, r3
   26336:	781b      	ldrb	r3, [r3, #0]
   26338:	2b00      	cmp	r3, #0
   2633a:	d000      	beq.n	2633e <spi_write_reg+0x10e>
   2633c:	e78d      	b.n	2625a <spi_write_reg+0x2a>
	}

	return result;
   2633e:	230c      	movs	r3, #12
   26340:	18fb      	adds	r3, r7, r3
   26342:	781b      	ldrb	r3, [r3, #0]
   26344:	b25b      	sxtb	r3, r3
}
   26346:	0018      	movs	r0, r3
   26348:	46bd      	mov	sp, r7
   2634a:	b005      	add	sp, #20
   2634c:	bd90      	pop	{r4, r7, pc}
   2634e:	46c0      	nop			; (mov r8, r8)
   26350:	00025765 	.word	0x00025765
   26354:	0000039d 	.word	0x0000039d
   26358:	0003b908 	.word	0x0003b908
   2635c:	0003b2d0 	.word	0x0003b2d0
   26360:	00020039 	.word	0x00020039
   26364:	0003b63c 	.word	0x0003b63c
   26368:	0003b310 	.word	0x0003b310
   2636c:	00022135 	.word	0x00022135
   26370:	000251e9 	.word	0x000251e9
   26374:	00025629 	.word	0x00025629
   26378:	0003b668 	.word	0x0003b668

0002637c <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   2637c:	b590      	push	{r4, r7, lr}
   2637e:	b089      	sub	sp, #36	; 0x24
   26380:	af02      	add	r7, sp, #8
   26382:	60f8      	str	r0, [r7, #12]
   26384:	60b9      	str	r1, [r7, #8]
   26386:	1dbb      	adds	r3, r7, #6
   26388:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   2638a:	2316      	movs	r3, #22
   2638c:	18fb      	adds	r3, r7, r3
   2638e:	220a      	movs	r2, #10
   26390:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   26392:	2315      	movs	r3, #21
   26394:	18fb      	adds	r3, r7, r3
   26396:	22c7      	movs	r2, #199	; 0xc7
   26398:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   2639a:	1dbb      	adds	r3, r7, #6
   2639c:	881a      	ldrh	r2, [r3, #0]
   2639e:	68f9      	ldr	r1, [r7, #12]
   263a0:	2315      	movs	r3, #21
   263a2:	18fb      	adds	r3, r7, r3
   263a4:	7818      	ldrb	r0, [r3, #0]
   263a6:	2300      	movs	r3, #0
   263a8:	9300      	str	r3, [sp, #0]
   263aa:	0013      	movs	r3, r2
   263ac:	2200      	movs	r2, #0
   263ae:	4c4d      	ldr	r4, [pc, #308]	; (264e4 <nm_spi_write+0x168>)
   263b0:	47a0      	blx	r4
   263b2:	0002      	movs	r2, r0
   263b4:	2317      	movs	r3, #23
   263b6:	18fb      	adds	r3, r7, r3
   263b8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   263ba:	2317      	movs	r3, #23
   263bc:	18fb      	adds	r3, r7, r3
   263be:	781b      	ldrb	r3, [r3, #0]
   263c0:	b25b      	sxtb	r3, r3
   263c2:	2b01      	cmp	r3, #1
   263c4:	d010      	beq.n	263e8 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   263c6:	4a48      	ldr	r2, [pc, #288]	; (264e8 <nm_spi_write+0x16c>)
   263c8:	4948      	ldr	r1, [pc, #288]	; (264ec <nm_spi_write+0x170>)
   263ca:	4b49      	ldr	r3, [pc, #292]	; (264f0 <nm_spi_write+0x174>)
   263cc:	0018      	movs	r0, r3
   263ce:	4b49      	ldr	r3, [pc, #292]	; (264f4 <nm_spi_write+0x178>)
   263d0:	4798      	blx	r3
   263d2:	68fa      	ldr	r2, [r7, #12]
   263d4:	4b48      	ldr	r3, [pc, #288]	; (264f8 <nm_spi_write+0x17c>)
   263d6:	0011      	movs	r1, r2
   263d8:	0018      	movs	r0, r3
   263da:	4b46      	ldr	r3, [pc, #280]	; (264f4 <nm_spi_write+0x178>)
   263dc:	4798      	blx	r3
   263de:	4b47      	ldr	r3, [pc, #284]	; (264fc <nm_spi_write+0x180>)
   263e0:	0018      	movs	r0, r3
   263e2:	4b44      	ldr	r3, [pc, #272]	; (264f4 <nm_spi_write+0x178>)
   263e4:	4798      	blx	r3
		goto _FAIL_;
   263e6:	e03e      	b.n	26466 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   263e8:	2317      	movs	r3, #23
   263ea:	18fc      	adds	r4, r7, r3
   263ec:	1dbb      	adds	r3, r7, #6
   263ee:	881a      	ldrh	r2, [r3, #0]
   263f0:	68bb      	ldr	r3, [r7, #8]
   263f2:	0011      	movs	r1, r2
   263f4:	0018      	movs	r0, r3
   263f6:	4b42      	ldr	r3, [pc, #264]	; (26500 <nm_spi_write+0x184>)
   263f8:	4798      	blx	r3
   263fa:	0003      	movs	r3, r0
   263fc:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   263fe:	2317      	movs	r3, #23
   26400:	18fb      	adds	r3, r7, r3
   26402:	781b      	ldrb	r3, [r3, #0]
   26404:	b25b      	sxtb	r3, r3
   26406:	2b01      	cmp	r3, #1
   26408:	d00e      	beq.n	26428 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   2640a:	4a3e      	ldr	r2, [pc, #248]	; (26504 <nm_spi_write+0x188>)
   2640c:	4937      	ldr	r1, [pc, #220]	; (264ec <nm_spi_write+0x170>)
   2640e:	4b38      	ldr	r3, [pc, #224]	; (264f0 <nm_spi_write+0x174>)
   26410:	0018      	movs	r0, r3
   26412:	4b38      	ldr	r3, [pc, #224]	; (264f4 <nm_spi_write+0x178>)
   26414:	4798      	blx	r3
   26416:	4b3c      	ldr	r3, [pc, #240]	; (26508 <nm_spi_write+0x18c>)
   26418:	0018      	movs	r0, r3
   2641a:	4b36      	ldr	r3, [pc, #216]	; (264f4 <nm_spi_write+0x178>)
   2641c:	4798      	blx	r3
   2641e:	4b37      	ldr	r3, [pc, #220]	; (264fc <nm_spi_write+0x180>)
   26420:	0018      	movs	r0, r3
   26422:	4b34      	ldr	r3, [pc, #208]	; (264f4 <nm_spi_write+0x178>)
   26424:	4798      	blx	r3
		goto _FAIL_;
   26426:	e01e      	b.n	26466 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   26428:	2317      	movs	r3, #23
   2642a:	18fc      	adds	r4, r7, r3
   2642c:	2315      	movs	r3, #21
   2642e:	18fb      	adds	r3, r7, r3
   26430:	781b      	ldrb	r3, [r3, #0]
   26432:	0018      	movs	r0, r3
   26434:	4b35      	ldr	r3, [pc, #212]	; (2650c <nm_spi_write+0x190>)
   26436:	4798      	blx	r3
   26438:	0003      	movs	r3, r0
   2643a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   2643c:	2317      	movs	r3, #23
   2643e:	18fb      	adds	r3, r7, r3
   26440:	781b      	ldrb	r3, [r3, #0]
   26442:	b25b      	sxtb	r3, r3
   26444:	2b01      	cmp	r3, #1
   26446:	d00e      	beq.n	26466 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   26448:	4a31      	ldr	r2, [pc, #196]	; (26510 <nm_spi_write+0x194>)
   2644a:	4928      	ldr	r1, [pc, #160]	; (264ec <nm_spi_write+0x170>)
   2644c:	4b28      	ldr	r3, [pc, #160]	; (264f0 <nm_spi_write+0x174>)
   2644e:	0018      	movs	r0, r3
   26450:	4b28      	ldr	r3, [pc, #160]	; (264f4 <nm_spi_write+0x178>)
   26452:	4798      	blx	r3
   26454:	4b2c      	ldr	r3, [pc, #176]	; (26508 <nm_spi_write+0x18c>)
   26456:	0018      	movs	r0, r3
   26458:	4b26      	ldr	r3, [pc, #152]	; (264f4 <nm_spi_write+0x178>)
   2645a:	4798      	blx	r3
   2645c:	4b27      	ldr	r3, [pc, #156]	; (264fc <nm_spi_write+0x180>)
   2645e:	0018      	movs	r0, r3
   26460:	4b24      	ldr	r3, [pc, #144]	; (264f4 <nm_spi_write+0x178>)
   26462:	4798      	blx	r3
		goto _FAIL_;
   26464:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   26466:	2317      	movs	r3, #23
   26468:	18fb      	adds	r3, r7, r3
   2646a:	781b      	ldrb	r3, [r3, #0]
   2646c:	b25b      	sxtb	r3, r3
   2646e:	2b01      	cmp	r3, #1
   26470:	d030      	beq.n	264d4 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   26472:	2001      	movs	r0, #1
   26474:	4b27      	ldr	r3, [pc, #156]	; (26514 <nm_spi_write+0x198>)
   26476:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   26478:	2300      	movs	r3, #0
   2647a:	9300      	str	r3, [sp, #0]
   2647c:	2300      	movs	r3, #0
   2647e:	2200      	movs	r2, #0
   26480:	2100      	movs	r1, #0
   26482:	20cf      	movs	r0, #207	; 0xcf
   26484:	4c24      	ldr	r4, [pc, #144]	; (26518 <nm_spi_write+0x19c>)
   26486:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   26488:	20cf      	movs	r0, #207	; 0xcf
   2648a:	4b24      	ldr	r3, [pc, #144]	; (2651c <nm_spi_write+0x1a0>)
   2648c:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   2648e:	4a24      	ldr	r2, [pc, #144]	; (26520 <nm_spi_write+0x1a4>)
   26490:	4916      	ldr	r1, [pc, #88]	; (264ec <nm_spi_write+0x170>)
   26492:	4b17      	ldr	r3, [pc, #92]	; (264f0 <nm_spi_write+0x174>)
   26494:	0018      	movs	r0, r3
   26496:	4b17      	ldr	r3, [pc, #92]	; (264f4 <nm_spi_write+0x178>)
   26498:	4798      	blx	r3
   2649a:	2316      	movs	r3, #22
   2649c:	18fb      	adds	r3, r7, r3
   2649e:	7819      	ldrb	r1, [r3, #0]
   264a0:	1dbb      	adds	r3, r7, #6
   264a2:	881b      	ldrh	r3, [r3, #0]
   264a4:	68fa      	ldr	r2, [r7, #12]
   264a6:	481f      	ldr	r0, [pc, #124]	; (26524 <nm_spi_write+0x1a8>)
   264a8:	4c12      	ldr	r4, [pc, #72]	; (264f4 <nm_spi_write+0x178>)
   264aa:	47a0      	blx	r4
   264ac:	4b13      	ldr	r3, [pc, #76]	; (264fc <nm_spi_write+0x180>)
   264ae:	0018      	movs	r0, r3
   264b0:	4b10      	ldr	r3, [pc, #64]	; (264f4 <nm_spi_write+0x178>)
   264b2:	4798      	blx	r3
		nm_bsp_sleep(1);
   264b4:	2001      	movs	r0, #1
   264b6:	4b17      	ldr	r3, [pc, #92]	; (26514 <nm_spi_write+0x198>)
   264b8:	4798      	blx	r3
		retry--;
   264ba:	2316      	movs	r3, #22
   264bc:	18fb      	adds	r3, r7, r3
   264be:	781a      	ldrb	r2, [r3, #0]
   264c0:	2316      	movs	r3, #22
   264c2:	18fb      	adds	r3, r7, r3
   264c4:	3a01      	subs	r2, #1
   264c6:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   264c8:	2316      	movs	r3, #22
   264ca:	18fb      	adds	r3, r7, r3
   264cc:	781b      	ldrb	r3, [r3, #0]
   264ce:	2b00      	cmp	r3, #0
   264d0:	d000      	beq.n	264d4 <nm_spi_write+0x158>
   264d2:	e762      	b.n	2639a <nm_spi_write+0x1e>
	}


	return result;
   264d4:	2317      	movs	r3, #23
   264d6:	18fb      	adds	r3, r7, r3
   264d8:	781b      	ldrb	r3, [r3, #0]
   264da:	b25b      	sxtb	r3, r3
}
   264dc:	0018      	movs	r0, r3
   264de:	46bd      	mov	sp, r7
   264e0:	b007      	add	sp, #28
   264e2:	bd90      	pop	{r4, r7, pc}
   264e4:	00025765 	.word	0x00025765
   264e8:	000003cf 	.word	0x000003cf
   264ec:	0003b918 	.word	0x0003b918
   264f0:	0003b2d0 	.word	0x0003b2d0
   264f4:	00020039 	.word	0x00020039
   264f8:	0003b684 	.word	0x0003b684
   264fc:	0003b310 	.word	0x0003b310
   26500:	00026059 	.word	0x00026059
   26504:	000003d9 	.word	0x000003d9
   26508:	0003b6b4 	.word	0x0003b6b4
   2650c:	00025529 	.word	0x00025529
   26510:	000003e1 	.word	0x000003e1
   26514:	00022135 	.word	0x00022135
   26518:	000251e9 	.word	0x000251e9
   2651c:	00025629 	.word	0x00025629
   26520:	000003eb 	.word	0x000003eb
   26524:	0003b6dc 	.word	0x0003b6dc

00026528 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   26528:	b590      	push	{r4, r7, lr}
   2652a:	b087      	sub	sp, #28
   2652c:	af02      	add	r7, sp, #8
   2652e:	6078      	str	r0, [r7, #4]
   26530:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   26532:	230f      	movs	r3, #15
   26534:	18fb      	adds	r3, r7, r3
   26536:	220a      	movs	r2, #10
   26538:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   2653a:	230c      	movs	r3, #12
   2653c:	18fb      	adds	r3, r7, r3
   2653e:	2201      	movs	r2, #1
   26540:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   26542:	230e      	movs	r3, #14
   26544:	18fb      	adds	r3, r7, r3
   26546:	22ca      	movs	r2, #202	; 0xca
   26548:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   2654a:	230d      	movs	r3, #13
   2654c:	18fb      	adds	r3, r7, r3
   2654e:	2200      	movs	r2, #0
   26550:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   26552:	687b      	ldr	r3, [r7, #4]
   26554:	2bff      	cmp	r3, #255	; 0xff
   26556:	d808      	bhi.n	2656a <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   26558:	230e      	movs	r3, #14
   2655a:	18fb      	adds	r3, r7, r3
   2655c:	22c4      	movs	r2, #196	; 0xc4
   2655e:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   26560:	230d      	movs	r3, #13
   26562:	18fb      	adds	r3, r7, r3
   26564:	2201      	movs	r2, #1
   26566:	701a      	strb	r2, [r3, #0]
   26568:	e007      	b.n	2657a <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   2656a:	230e      	movs	r3, #14
   2656c:	18fb      	adds	r3, r7, r3
   2656e:	22ca      	movs	r2, #202	; 0xca
   26570:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   26572:	230d      	movs	r3, #13
   26574:	18fb      	adds	r3, r7, r3
   26576:	2200      	movs	r2, #0
   26578:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   2657a:	2308      	movs	r3, #8
   2657c:	18fa      	adds	r2, r7, r3
   2657e:	6879      	ldr	r1, [r7, #4]
   26580:	230e      	movs	r3, #14
   26582:	18fb      	adds	r3, r7, r3
   26584:	7818      	ldrb	r0, [r3, #0]
   26586:	230d      	movs	r3, #13
   26588:	18fb      	adds	r3, r7, r3
   2658a:	781b      	ldrb	r3, [r3, #0]
   2658c:	9300      	str	r3, [sp, #0]
   2658e:	2304      	movs	r3, #4
   26590:	4c37      	ldr	r4, [pc, #220]	; (26670 <spi_read_reg+0x148>)
   26592:	47a0      	blx	r4
   26594:	0002      	movs	r2, r0
   26596:	230c      	movs	r3, #12
   26598:	18fb      	adds	r3, r7, r3
   2659a:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2659c:	230c      	movs	r3, #12
   2659e:	18fb      	adds	r3, r7, r3
   265a0:	781b      	ldrb	r3, [r3, #0]
   265a2:	b25b      	sxtb	r3, r3
   265a4:	2b01      	cmp	r3, #1
   265a6:	d010      	beq.n	265ca <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   265a8:	4a32      	ldr	r2, [pc, #200]	; (26674 <spi_read_reg+0x14c>)
   265aa:	4933      	ldr	r1, [pc, #204]	; (26678 <spi_read_reg+0x150>)
   265ac:	4b33      	ldr	r3, [pc, #204]	; (2667c <spi_read_reg+0x154>)
   265ae:	0018      	movs	r0, r3
   265b0:	4b33      	ldr	r3, [pc, #204]	; (26680 <spi_read_reg+0x158>)
   265b2:	4798      	blx	r3
   265b4:	687a      	ldr	r2, [r7, #4]
   265b6:	4b33      	ldr	r3, [pc, #204]	; (26684 <spi_read_reg+0x15c>)
   265b8:	0011      	movs	r1, r2
   265ba:	0018      	movs	r0, r3
   265bc:	4b30      	ldr	r3, [pc, #192]	; (26680 <spi_read_reg+0x158>)
   265be:	4798      	blx	r3
   265c0:	4b31      	ldr	r3, [pc, #196]	; (26688 <spi_read_reg+0x160>)
   265c2:	0018      	movs	r0, r3
   265c4:	4b2e      	ldr	r3, [pc, #184]	; (26680 <spi_read_reg+0x158>)
   265c6:	4798      	blx	r3
		goto _FAIL_;
   265c8:	e014      	b.n	265f4 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   265ca:	2308      	movs	r3, #8
   265cc:	18fb      	adds	r3, r7, r3
   265ce:	781b      	ldrb	r3, [r3, #0]
   265d0:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   265d2:	2308      	movs	r3, #8
   265d4:	18fb      	adds	r3, r7, r3
   265d6:	785b      	ldrb	r3, [r3, #1]
   265d8:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   265da:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   265dc:	2308      	movs	r3, #8
   265de:	18fb      	adds	r3, r7, r3
   265e0:	789b      	ldrb	r3, [r3, #2]
   265e2:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   265e4:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   265e6:	2308      	movs	r3, #8
   265e8:	18fb      	adds	r3, r7, r3
   265ea:	78db      	ldrb	r3, [r3, #3]
   265ec:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   265ee:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   265f0:	683b      	ldr	r3, [r7, #0]
   265f2:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   265f4:	230c      	movs	r3, #12
   265f6:	18fb      	adds	r3, r7, r3
   265f8:	781b      	ldrb	r3, [r3, #0]
   265fa:	b25b      	sxtb	r3, r3
   265fc:	2b01      	cmp	r3, #1
   265fe:	d02f      	beq.n	26660 <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   26600:	2001      	movs	r0, #1
   26602:	4b22      	ldr	r3, [pc, #136]	; (2668c <spi_read_reg+0x164>)
   26604:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   26606:	2300      	movs	r3, #0
   26608:	9300      	str	r3, [sp, #0]
   2660a:	2300      	movs	r3, #0
   2660c:	2200      	movs	r2, #0
   2660e:	2100      	movs	r1, #0
   26610:	20cf      	movs	r0, #207	; 0xcf
   26612:	4c1f      	ldr	r4, [pc, #124]	; (26690 <spi_read_reg+0x168>)
   26614:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   26616:	20cf      	movs	r0, #207	; 0xcf
   26618:	4b1e      	ldr	r3, [pc, #120]	; (26694 <spi_read_reg+0x16c>)
   2661a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   2661c:	4a1e      	ldr	r2, [pc, #120]	; (26698 <spi_read_reg+0x170>)
   2661e:	4916      	ldr	r1, [pc, #88]	; (26678 <spi_read_reg+0x150>)
   26620:	4b16      	ldr	r3, [pc, #88]	; (2667c <spi_read_reg+0x154>)
   26622:	0018      	movs	r0, r3
   26624:	4b16      	ldr	r3, [pc, #88]	; (26680 <spi_read_reg+0x158>)
   26626:	4798      	blx	r3
   26628:	230f      	movs	r3, #15
   2662a:	18fb      	adds	r3, r7, r3
   2662c:	7819      	ldrb	r1, [r3, #0]
   2662e:	687a      	ldr	r2, [r7, #4]
   26630:	4b1a      	ldr	r3, [pc, #104]	; (2669c <spi_read_reg+0x174>)
   26632:	0018      	movs	r0, r3
   26634:	4b12      	ldr	r3, [pc, #72]	; (26680 <spi_read_reg+0x158>)
   26636:	4798      	blx	r3
   26638:	4b13      	ldr	r3, [pc, #76]	; (26688 <spi_read_reg+0x160>)
   2663a:	0018      	movs	r0, r3
   2663c:	4b10      	ldr	r3, [pc, #64]	; (26680 <spi_read_reg+0x158>)
   2663e:	4798      	blx	r3
		nm_bsp_sleep(1);
   26640:	2001      	movs	r0, #1
   26642:	4b12      	ldr	r3, [pc, #72]	; (2668c <spi_read_reg+0x164>)
   26644:	4798      	blx	r3
		retry--;
   26646:	230f      	movs	r3, #15
   26648:	18fb      	adds	r3, r7, r3
   2664a:	781a      	ldrb	r2, [r3, #0]
   2664c:	230f      	movs	r3, #15
   2664e:	18fb      	adds	r3, r7, r3
   26650:	3a01      	subs	r2, #1
   26652:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   26654:	230f      	movs	r3, #15
   26656:	18fb      	adds	r3, r7, r3
   26658:	781b      	ldrb	r3, [r3, #0]
   2665a:	2b00      	cmp	r3, #0
   2665c:	d000      	beq.n	26660 <spi_read_reg+0x138>
   2665e:	e778      	b.n	26552 <spi_read_reg+0x2a>
	}
		
	return result;
   26660:	230c      	movs	r3, #12
   26662:	18fb      	adds	r3, r7, r3
   26664:	781b      	ldrb	r3, [r3, #0]
   26666:	b25b      	sxtb	r3, r3
}
   26668:	0018      	movs	r0, r3
   2666a:	46bd      	mov	sp, r7
   2666c:	b005      	add	sp, #20
   2666e:	bd90      	pop	{r4, r7, pc}
   26670:	00025765 	.word	0x00025765
   26674:	00000423 	.word	0x00000423
   26678:	0003b928 	.word	0x0003b928
   2667c:	0003b2d0 	.word	0x0003b2d0
   26680:	00020039 	.word	0x00020039
   26684:	0003b6f8 	.word	0x0003b6f8
   26688:	0003b310 	.word	0x0003b310
   2668c:	00022135 	.word	0x00022135
   26690:	000251e9 	.word	0x000251e9
   26694:	00025629 	.word	0x00025629
   26698:	00000435 	.word	0x00000435
   2669c:	0003b724 	.word	0x0003b724

000266a0 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   266a0:	b590      	push	{r4, r7, lr}
   266a2:	b089      	sub	sp, #36	; 0x24
   266a4:	af02      	add	r7, sp, #8
   266a6:	60f8      	str	r0, [r7, #12]
   266a8:	60b9      	str	r1, [r7, #8]
   266aa:	1dbb      	adds	r3, r7, #6
   266ac:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   266ae:	2316      	movs	r3, #22
   266b0:	18fb      	adds	r3, r7, r3
   266b2:	22c8      	movs	r2, #200	; 0xc8
   266b4:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   266b6:	2317      	movs	r3, #23
   266b8:	18fb      	adds	r3, r7, r3
   266ba:	220a      	movs	r2, #10
   266bc:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   266be:	1dbb      	adds	r3, r7, #6
   266c0:	881c      	ldrh	r4, [r3, #0]
   266c2:	68ba      	ldr	r2, [r7, #8]
   266c4:	68f9      	ldr	r1, [r7, #12]
   266c6:	2316      	movs	r3, #22
   266c8:	18fb      	adds	r3, r7, r3
   266ca:	7818      	ldrb	r0, [r3, #0]
   266cc:	2300      	movs	r3, #0
   266ce:	9300      	str	r3, [sp, #0]
   266d0:	0023      	movs	r3, r4
   266d2:	4c2e      	ldr	r4, [pc, #184]	; (2678c <nm_spi_read+0xec>)
   266d4:	47a0      	blx	r4
   266d6:	0002      	movs	r2, r0
   266d8:	2315      	movs	r3, #21
   266da:	18fb      	adds	r3, r7, r3
   266dc:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   266de:	2315      	movs	r3, #21
   266e0:	18fb      	adds	r3, r7, r3
   266e2:	781b      	ldrb	r3, [r3, #0]
   266e4:	b25b      	sxtb	r3, r3
   266e6:	2b01      	cmp	r3, #1
   266e8:	d010      	beq.n	2670c <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   266ea:	4a29      	ldr	r2, [pc, #164]	; (26790 <nm_spi_read+0xf0>)
   266ec:	4929      	ldr	r1, [pc, #164]	; (26794 <nm_spi_read+0xf4>)
   266ee:	4b2a      	ldr	r3, [pc, #168]	; (26798 <nm_spi_read+0xf8>)
   266f0:	0018      	movs	r0, r3
   266f2:	4b2a      	ldr	r3, [pc, #168]	; (2679c <nm_spi_read+0xfc>)
   266f4:	4798      	blx	r3
   266f6:	68fa      	ldr	r2, [r7, #12]
   266f8:	4b29      	ldr	r3, [pc, #164]	; (267a0 <nm_spi_read+0x100>)
   266fa:	0011      	movs	r1, r2
   266fc:	0018      	movs	r0, r3
   266fe:	4b27      	ldr	r3, [pc, #156]	; (2679c <nm_spi_read+0xfc>)
   26700:	4798      	blx	r3
   26702:	4b28      	ldr	r3, [pc, #160]	; (267a4 <nm_spi_read+0x104>)
   26704:	0018      	movs	r0, r3
   26706:	4b25      	ldr	r3, [pc, #148]	; (2679c <nm_spi_read+0xfc>)
   26708:	4798      	blx	r3
		goto _FAIL_;
   2670a:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   2670c:	2315      	movs	r3, #21
   2670e:	18fb      	adds	r3, r7, r3
   26710:	781b      	ldrb	r3, [r3, #0]
   26712:	b25b      	sxtb	r3, r3
   26714:	2b01      	cmp	r3, #1
   26716:	d030      	beq.n	2677a <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   26718:	2001      	movs	r0, #1
   2671a:	4b23      	ldr	r3, [pc, #140]	; (267a8 <nm_spi_read+0x108>)
   2671c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2671e:	2300      	movs	r3, #0
   26720:	9300      	str	r3, [sp, #0]
   26722:	2300      	movs	r3, #0
   26724:	2200      	movs	r2, #0
   26726:	2100      	movs	r1, #0
   26728:	20cf      	movs	r0, #207	; 0xcf
   2672a:	4c20      	ldr	r4, [pc, #128]	; (267ac <nm_spi_read+0x10c>)
   2672c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   2672e:	20cf      	movs	r0, #207	; 0xcf
   26730:	4b1f      	ldr	r3, [pc, #124]	; (267b0 <nm_spi_read+0x110>)
   26732:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   26734:	4a1f      	ldr	r2, [pc, #124]	; (267b4 <nm_spi_read+0x114>)
   26736:	4917      	ldr	r1, [pc, #92]	; (26794 <nm_spi_read+0xf4>)
   26738:	4b17      	ldr	r3, [pc, #92]	; (26798 <nm_spi_read+0xf8>)
   2673a:	0018      	movs	r0, r3
   2673c:	4b17      	ldr	r3, [pc, #92]	; (2679c <nm_spi_read+0xfc>)
   2673e:	4798      	blx	r3
   26740:	2317      	movs	r3, #23
   26742:	18fb      	adds	r3, r7, r3
   26744:	7819      	ldrb	r1, [r3, #0]
   26746:	1dbb      	adds	r3, r7, #6
   26748:	881b      	ldrh	r3, [r3, #0]
   2674a:	68fa      	ldr	r2, [r7, #12]
   2674c:	481a      	ldr	r0, [pc, #104]	; (267b8 <nm_spi_read+0x118>)
   2674e:	4c13      	ldr	r4, [pc, #76]	; (2679c <nm_spi_read+0xfc>)
   26750:	47a0      	blx	r4
   26752:	4b14      	ldr	r3, [pc, #80]	; (267a4 <nm_spi_read+0x104>)
   26754:	0018      	movs	r0, r3
   26756:	4b11      	ldr	r3, [pc, #68]	; (2679c <nm_spi_read+0xfc>)
   26758:	4798      	blx	r3
		nm_bsp_sleep(1);
   2675a:	2001      	movs	r0, #1
   2675c:	4b12      	ldr	r3, [pc, #72]	; (267a8 <nm_spi_read+0x108>)
   2675e:	4798      	blx	r3
		retry--;
   26760:	2317      	movs	r3, #23
   26762:	18fb      	adds	r3, r7, r3
   26764:	781a      	ldrb	r2, [r3, #0]
   26766:	2317      	movs	r3, #23
   26768:	18fb      	adds	r3, r7, r3
   2676a:	3a01      	subs	r2, #1
   2676c:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2676e:	2317      	movs	r3, #23
   26770:	18fb      	adds	r3, r7, r3
   26772:	781b      	ldrb	r3, [r3, #0]
   26774:	2b00      	cmp	r3, #0
   26776:	d000      	beq.n	2677a <nm_spi_read+0xda>
   26778:	e7a1      	b.n	266be <nm_spi_read+0x1e>
	}

	return result;
   2677a:	2315      	movs	r3, #21
   2677c:	18fb      	adds	r3, r7, r3
   2677e:	781b      	ldrb	r3, [r3, #0]
   26780:	b25b      	sxtb	r3, r3
}
   26782:	0018      	movs	r0, r3
   26784:	46bd      	mov	sp, r7
   26786:	b007      	add	sp, #28
   26788:	bd90      	pop	{r4, r7, pc}
   2678a:	46c0      	nop			; (mov r8, r8)
   2678c:	00025765 	.word	0x00025765
   26790:	00000472 	.word	0x00000472
   26794:	0003b938 	.word	0x0003b938
   26798:	0003b2d0 	.word	0x0003b2d0
   2679c:	00020039 	.word	0x00020039
   267a0:	0003b73c 	.word	0x0003b73c
   267a4:	0003b310 	.word	0x0003b310
   267a8:	00022135 	.word	0x00022135
   267ac:	000251e9 	.word	0x000251e9
   267b0:	00025629 	.word	0x00025629
   267b4:	0000047d 	.word	0x0000047d
   267b8:	0003b6dc 	.word	0x0003b6dc

000267bc <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   267bc:	b580      	push	{r7, lr}
   267be:	b082      	sub	sp, #8
   267c0:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   267c2:	4b0c      	ldr	r3, [pc, #48]	; (267f4 <spi_init_pkt_sz+0x38>)
   267c4:	0018      	movs	r0, r3
   267c6:	4b0c      	ldr	r3, [pc, #48]	; (267f8 <spi_init_pkt_sz+0x3c>)
   267c8:	4798      	blx	r3
   267ca:	0003      	movs	r3, r0
   267cc:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   267ce:	687b      	ldr	r3, [r7, #4]
   267d0:	2270      	movs	r2, #112	; 0x70
   267d2:	4393      	bics	r3, r2
   267d4:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   267d6:	687b      	ldr	r3, [r7, #4]
   267d8:	2250      	movs	r2, #80	; 0x50
   267da:	4313      	orrs	r3, r2
   267dc:	607b      	str	r3, [r7, #4]
   267de:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   267e0:	687b      	ldr	r3, [r7, #4]
   267e2:	4a04      	ldr	r2, [pc, #16]	; (267f4 <spi_init_pkt_sz+0x38>)
   267e4:	0019      	movs	r1, r3
   267e6:	0010      	movs	r0, r2
   267e8:	4b04      	ldr	r3, [pc, #16]	; (267fc <spi_init_pkt_sz+0x40>)
   267ea:	4798      	blx	r3
}
   267ec:	46c0      	nop			; (mov r8, r8)
   267ee:	46bd      	mov	sp, r7
   267f0:	b002      	add	sp, #8
   267f2:	bd80      	pop	{r7, pc}
   267f4:	0000e824 	.word	0x0000e824
   267f8:	00026995 	.word	0x00026995
   267fc:	00026a09 	.word	0x00026a09

00026800 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   26800:	b590      	push	{r4, r7, lr}
   26802:	b083      	sub	sp, #12
   26804:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   26806:	2300      	movs	r3, #0
   26808:	9300      	str	r3, [sp, #0]
   2680a:	2300      	movs	r3, #0
   2680c:	2200      	movs	r2, #0
   2680e:	2100      	movs	r1, #0
   26810:	20cf      	movs	r0, #207	; 0xcf
   26812:	4c05      	ldr	r4, [pc, #20]	; (26828 <nm_spi_reset+0x28>)
   26814:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   26816:	20cf      	movs	r0, #207	; 0xcf
   26818:	4b04      	ldr	r3, [pc, #16]	; (2682c <nm_spi_reset+0x2c>)
   2681a:	4798      	blx	r3
	return M2M_SUCCESS;
   2681c:	2300      	movs	r3, #0
}
   2681e:	0018      	movs	r0, r3
   26820:	46bd      	mov	sp, r7
   26822:	b001      	add	sp, #4
   26824:	bd90      	pop	{r4, r7, pc}
   26826:	46c0      	nop			; (mov r8, r8)
   26828:	000251e9 	.word	0x000251e9
   2682c:	00025629 	.word	0x00025629

00026830 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   26830:	b580      	push	{r7, lr}
   26832:	b082      	sub	sp, #8
   26834:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   26836:	2300      	movs	r3, #0
   26838:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   2683a:	4b40      	ldr	r3, [pc, #256]	; (2693c <nm_spi_init+0x10c>)
   2683c:	2200      	movs	r2, #0
   2683e:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   26840:	003b      	movs	r3, r7
   26842:	4a3f      	ldr	r2, [pc, #252]	; (26940 <nm_spi_init+0x110>)
   26844:	0019      	movs	r1, r3
   26846:	0010      	movs	r0, r2
   26848:	4b3e      	ldr	r3, [pc, #248]	; (26944 <nm_spi_init+0x114>)
   2684a:	4798      	blx	r3
   2684c:	1e03      	subs	r3, r0, #0
   2684e:	d129      	bne.n	268a4 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   26850:	4b3a      	ldr	r3, [pc, #232]	; (2693c <nm_spi_init+0x10c>)
   26852:	2201      	movs	r2, #1
   26854:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   26856:	2398      	movs	r3, #152	; 0x98
   26858:	00da      	lsls	r2, r3, #3
   2685a:	493b      	ldr	r1, [pc, #236]	; (26948 <nm_spi_init+0x118>)
   2685c:	4b3b      	ldr	r3, [pc, #236]	; (2694c <nm_spi_init+0x11c>)
   2685e:	0018      	movs	r0, r3
   26860:	4b3b      	ldr	r3, [pc, #236]	; (26950 <nm_spi_init+0x120>)
   26862:	4798      	blx	r3
   26864:	4b3b      	ldr	r3, [pc, #236]	; (26954 <nm_spi_init+0x124>)
   26866:	0018      	movs	r0, r3
   26868:	4b39      	ldr	r3, [pc, #228]	; (26950 <nm_spi_init+0x120>)
   2686a:	4798      	blx	r3
   2686c:	4b3a      	ldr	r3, [pc, #232]	; (26958 <nm_spi_init+0x128>)
   2686e:	0018      	movs	r0, r3
   26870:	4b37      	ldr	r3, [pc, #220]	; (26950 <nm_spi_init+0x120>)
   26872:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   26874:	003b      	movs	r3, r7
   26876:	4a32      	ldr	r2, [pc, #200]	; (26940 <nm_spi_init+0x110>)
   26878:	0019      	movs	r1, r3
   2687a:	0010      	movs	r0, r2
   2687c:	4b31      	ldr	r3, [pc, #196]	; (26944 <nm_spi_init+0x114>)
   2687e:	4798      	blx	r3
   26880:	1e03      	subs	r3, r0, #0
   26882:	d10f      	bne.n	268a4 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   26884:	4a35      	ldr	r2, [pc, #212]	; (2695c <nm_spi_init+0x12c>)
   26886:	4930      	ldr	r1, [pc, #192]	; (26948 <nm_spi_init+0x118>)
   26888:	4b30      	ldr	r3, [pc, #192]	; (2694c <nm_spi_init+0x11c>)
   2688a:	0018      	movs	r0, r3
   2688c:	4b30      	ldr	r3, [pc, #192]	; (26950 <nm_spi_init+0x120>)
   2688e:	4798      	blx	r3
   26890:	4b33      	ldr	r3, [pc, #204]	; (26960 <nm_spi_init+0x130>)
   26892:	0018      	movs	r0, r3
   26894:	4b2e      	ldr	r3, [pc, #184]	; (26950 <nm_spi_init+0x120>)
   26896:	4798      	blx	r3
   26898:	4b2f      	ldr	r3, [pc, #188]	; (26958 <nm_spi_init+0x128>)
   2689a:	0018      	movs	r0, r3
   2689c:	4b2c      	ldr	r3, [pc, #176]	; (26950 <nm_spi_init+0x120>)
   2689e:	4798      	blx	r3
			return 0;
   268a0:	2300      	movs	r3, #0
   268a2:	e047      	b.n	26934 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   268a4:	4b25      	ldr	r3, [pc, #148]	; (2693c <nm_spi_init+0x10c>)
   268a6:	781b      	ldrb	r3, [r3, #0]
   268a8:	2b00      	cmp	r3, #0
   268aa:	d126      	bne.n	268fa <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   268ac:	683b      	ldr	r3, [r7, #0]
   268ae:	220c      	movs	r2, #12
   268b0:	4393      	bics	r3, r2
   268b2:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   268b4:	683b      	ldr	r3, [r7, #0]
   268b6:	2270      	movs	r2, #112	; 0x70
   268b8:	4393      	bics	r3, r2
   268ba:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   268bc:	683b      	ldr	r3, [r7, #0]
   268be:	2250      	movs	r2, #80	; 0x50
   268c0:	4313      	orrs	r3, r2
   268c2:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   268c4:	683b      	ldr	r3, [r7, #0]
   268c6:	4a1e      	ldr	r2, [pc, #120]	; (26940 <nm_spi_init+0x110>)
   268c8:	0019      	movs	r1, r3
   268ca:	0010      	movs	r0, r2
   268cc:	4b25      	ldr	r3, [pc, #148]	; (26964 <nm_spi_init+0x134>)
   268ce:	4798      	blx	r3
   268d0:	1e03      	subs	r3, r0, #0
   268d2:	d10f      	bne.n	268f4 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   268d4:	4a24      	ldr	r2, [pc, #144]	; (26968 <nm_spi_init+0x138>)
   268d6:	491c      	ldr	r1, [pc, #112]	; (26948 <nm_spi_init+0x118>)
   268d8:	4b1c      	ldr	r3, [pc, #112]	; (2694c <nm_spi_init+0x11c>)
   268da:	0018      	movs	r0, r3
   268dc:	4b1c      	ldr	r3, [pc, #112]	; (26950 <nm_spi_init+0x120>)
   268de:	4798      	blx	r3
   268e0:	4b22      	ldr	r3, [pc, #136]	; (2696c <nm_spi_init+0x13c>)
   268e2:	0018      	movs	r0, r3
   268e4:	4b1a      	ldr	r3, [pc, #104]	; (26950 <nm_spi_init+0x120>)
   268e6:	4798      	blx	r3
   268e8:	4b1b      	ldr	r3, [pc, #108]	; (26958 <nm_spi_init+0x128>)
   268ea:	0018      	movs	r0, r3
   268ec:	4b18      	ldr	r3, [pc, #96]	; (26950 <nm_spi_init+0x120>)
   268ee:	4798      	blx	r3
			return 0;
   268f0:	2300      	movs	r3, #0
   268f2:	e01f      	b.n	26934 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   268f4:	4b11      	ldr	r3, [pc, #68]	; (2693c <nm_spi_init+0x10c>)
   268f6:	2201      	movs	r2, #1
   268f8:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   268fa:	1d3a      	adds	r2, r7, #4
   268fc:	2380      	movs	r3, #128	; 0x80
   268fe:	015b      	lsls	r3, r3, #5
   26900:	0011      	movs	r1, r2
   26902:	0018      	movs	r0, r3
   26904:	4b0f      	ldr	r3, [pc, #60]	; (26944 <nm_spi_init+0x114>)
   26906:	4798      	blx	r3
   26908:	1e03      	subs	r3, r0, #0
   2690a:	d110      	bne.n	2692e <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   2690c:	4a18      	ldr	r2, [pc, #96]	; (26970 <nm_spi_init+0x140>)
   2690e:	490e      	ldr	r1, [pc, #56]	; (26948 <nm_spi_init+0x118>)
   26910:	4b0e      	ldr	r3, [pc, #56]	; (2694c <nm_spi_init+0x11c>)
   26912:	0018      	movs	r0, r3
   26914:	4b0e      	ldr	r3, [pc, #56]	; (26950 <nm_spi_init+0x120>)
   26916:	4798      	blx	r3
   26918:	4b16      	ldr	r3, [pc, #88]	; (26974 <nm_spi_init+0x144>)
   2691a:	0018      	movs	r0, r3
   2691c:	4b0c      	ldr	r3, [pc, #48]	; (26950 <nm_spi_init+0x120>)
   2691e:	4798      	blx	r3
   26920:	4b0d      	ldr	r3, [pc, #52]	; (26958 <nm_spi_init+0x128>)
   26922:	0018      	movs	r0, r3
   26924:	4b0a      	ldr	r3, [pc, #40]	; (26950 <nm_spi_init+0x120>)
   26926:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   26928:	2306      	movs	r3, #6
   2692a:	425b      	negs	r3, r3
   2692c:	e002      	b.n	26934 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   2692e:	4b12      	ldr	r3, [pc, #72]	; (26978 <nm_spi_init+0x148>)
   26930:	4798      	blx	r3


	return M2M_SUCCESS;
   26932:	2300      	movs	r3, #0
}
   26934:	0018      	movs	r0, r3
   26936:	46bd      	mov	sp, r7
   26938:	b002      	add	sp, #8
   2693a:	bd80      	pop	{r7, pc}
   2693c:	20003ecc 	.word	0x20003ecc
   26940:	0000e824 	.word	0x0000e824
   26944:	00026529 	.word	0x00026529
   26948:	0003b944 	.word	0x0003b944
   2694c:	0003b2d0 	.word	0x0003b2d0
   26950:	00020039 	.word	0x00020039
   26954:	0003b76c 	.word	0x0003b76c
   26958:	0003b310 	.word	0x0003b310
   2695c:	000004c3 	.word	0x000004c3
   26960:	0003b7bc 	.word	0x0003b7bc
   26964:	00026231 	.word	0x00026231
   26968:	000004cd 	.word	0x000004cd
   2696c:	0003b7ec 	.word	0x0003b7ec
   26970:	000004d7 	.word	0x000004d7
   26974:	0003b820 	.word	0x0003b820
   26978:	000267bd 	.word	0x000267bd

0002697c <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   2697c:	b580      	push	{r7, lr}
   2697e:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   26980:	4b03      	ldr	r3, [pc, #12]	; (26990 <nm_spi_deinit+0x14>)
   26982:	2200      	movs	r2, #0
   26984:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   26986:	2300      	movs	r3, #0
}
   26988:	0018      	movs	r0, r3
   2698a:	46bd      	mov	sp, r7
   2698c:	bd80      	pop	{r7, pc}
   2698e:	46c0      	nop			; (mov r8, r8)
   26990:	20003ecc 	.word	0x20003ecc

00026994 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   26994:	b580      	push	{r7, lr}
   26996:	b084      	sub	sp, #16
   26998:	af00      	add	r7, sp, #0
   2699a:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   2699c:	230c      	movs	r3, #12
   2699e:	18fa      	adds	r2, r7, r3
   269a0:	687b      	ldr	r3, [r7, #4]
   269a2:	0011      	movs	r1, r2
   269a4:	0018      	movs	r0, r3
   269a6:	4b03      	ldr	r3, [pc, #12]	; (269b4 <nm_spi_read_reg+0x20>)
   269a8:	4798      	blx	r3

	return u32Val;
   269aa:	68fb      	ldr	r3, [r7, #12]
}
   269ac:	0018      	movs	r0, r3
   269ae:	46bd      	mov	sp, r7
   269b0:	b004      	add	sp, #16
   269b2:	bd80      	pop	{r7, pc}
   269b4:	00026529 	.word	0x00026529

000269b8 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   269b8:	b590      	push	{r4, r7, lr}
   269ba:	b085      	sub	sp, #20
   269bc:	af00      	add	r7, sp, #0
   269be:	6078      	str	r0, [r7, #4]
   269c0:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   269c2:	230f      	movs	r3, #15
   269c4:	18fc      	adds	r4, r7, r3
   269c6:	683a      	ldr	r2, [r7, #0]
   269c8:	687b      	ldr	r3, [r7, #4]
   269ca:	0011      	movs	r1, r2
   269cc:	0018      	movs	r0, r3
   269ce:	4b0d      	ldr	r3, [pc, #52]	; (26a04 <nm_spi_read_reg_with_ret+0x4c>)
   269d0:	4798      	blx	r3
   269d2:	0003      	movs	r3, r0
   269d4:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   269d6:	230f      	movs	r3, #15
   269d8:	18fb      	adds	r3, r7, r3
   269da:	781b      	ldrb	r3, [r3, #0]
   269dc:	b25b      	sxtb	r3, r3
   269de:	2b01      	cmp	r3, #1
   269e0:	d104      	bne.n	269ec <nm_spi_read_reg_with_ret+0x34>
   269e2:	230f      	movs	r3, #15
   269e4:	18fb      	adds	r3, r7, r3
   269e6:	2200      	movs	r2, #0
   269e8:	701a      	strb	r2, [r3, #0]
   269ea:	e003      	b.n	269f4 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   269ec:	230f      	movs	r3, #15
   269ee:	18fb      	adds	r3, r7, r3
   269f0:	22fa      	movs	r2, #250	; 0xfa
   269f2:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   269f4:	230f      	movs	r3, #15
   269f6:	18fb      	adds	r3, r7, r3
   269f8:	781b      	ldrb	r3, [r3, #0]
   269fa:	b25b      	sxtb	r3, r3
}
   269fc:	0018      	movs	r0, r3
   269fe:	46bd      	mov	sp, r7
   26a00:	b005      	add	sp, #20
   26a02:	bd90      	pop	{r4, r7, pc}
   26a04:	00026529 	.word	0x00026529

00026a08 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   26a08:	b590      	push	{r4, r7, lr}
   26a0a:	b085      	sub	sp, #20
   26a0c:	af00      	add	r7, sp, #0
   26a0e:	6078      	str	r0, [r7, #4]
   26a10:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   26a12:	230f      	movs	r3, #15
   26a14:	18fc      	adds	r4, r7, r3
   26a16:	683a      	ldr	r2, [r7, #0]
   26a18:	687b      	ldr	r3, [r7, #4]
   26a1a:	0011      	movs	r1, r2
   26a1c:	0018      	movs	r0, r3
   26a1e:	4b0d      	ldr	r3, [pc, #52]	; (26a54 <nm_spi_write_reg+0x4c>)
   26a20:	4798      	blx	r3
   26a22:	0003      	movs	r3, r0
   26a24:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   26a26:	230f      	movs	r3, #15
   26a28:	18fb      	adds	r3, r7, r3
   26a2a:	781b      	ldrb	r3, [r3, #0]
   26a2c:	b25b      	sxtb	r3, r3
   26a2e:	2b01      	cmp	r3, #1
   26a30:	d104      	bne.n	26a3c <nm_spi_write_reg+0x34>
   26a32:	230f      	movs	r3, #15
   26a34:	18fb      	adds	r3, r7, r3
   26a36:	2200      	movs	r2, #0
   26a38:	701a      	strb	r2, [r3, #0]
   26a3a:	e003      	b.n	26a44 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   26a3c:	230f      	movs	r3, #15
   26a3e:	18fb      	adds	r3, r7, r3
   26a40:	22fa      	movs	r2, #250	; 0xfa
   26a42:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   26a44:	230f      	movs	r3, #15
   26a46:	18fb      	adds	r3, r7, r3
   26a48:	781b      	ldrb	r3, [r3, #0]
   26a4a:	b25b      	sxtb	r3, r3
}
   26a4c:	0018      	movs	r0, r3
   26a4e:	46bd      	mov	sp, r7
   26a50:	b005      	add	sp, #20
   26a52:	bd90      	pop	{r4, r7, pc}
   26a54:	00026231 	.word	0x00026231

00026a58 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   26a58:	b590      	push	{r4, r7, lr}
   26a5a:	b087      	sub	sp, #28
   26a5c:	af00      	add	r7, sp, #0
   26a5e:	60f8      	str	r0, [r7, #12]
   26a60:	60b9      	str	r1, [r7, #8]
   26a62:	1dbb      	adds	r3, r7, #6
   26a64:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   26a66:	2317      	movs	r3, #23
   26a68:	18fc      	adds	r4, r7, r3
   26a6a:	1dbb      	adds	r3, r7, #6
   26a6c:	881a      	ldrh	r2, [r3, #0]
   26a6e:	68b9      	ldr	r1, [r7, #8]
   26a70:	68fb      	ldr	r3, [r7, #12]
   26a72:	0018      	movs	r0, r3
   26a74:	4b0d      	ldr	r3, [pc, #52]	; (26aac <nm_spi_read_block+0x54>)
   26a76:	4798      	blx	r3
   26a78:	0003      	movs	r3, r0
   26a7a:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   26a7c:	2317      	movs	r3, #23
   26a7e:	18fb      	adds	r3, r7, r3
   26a80:	781b      	ldrb	r3, [r3, #0]
   26a82:	b25b      	sxtb	r3, r3
   26a84:	2b01      	cmp	r3, #1
   26a86:	d104      	bne.n	26a92 <nm_spi_read_block+0x3a>
   26a88:	2317      	movs	r3, #23
   26a8a:	18fb      	adds	r3, r7, r3
   26a8c:	2200      	movs	r2, #0
   26a8e:	701a      	strb	r2, [r3, #0]
   26a90:	e003      	b.n	26a9a <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   26a92:	2317      	movs	r3, #23
   26a94:	18fb      	adds	r3, r7, r3
   26a96:	22fa      	movs	r2, #250	; 0xfa
   26a98:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   26a9a:	2317      	movs	r3, #23
   26a9c:	18fb      	adds	r3, r7, r3
   26a9e:	781b      	ldrb	r3, [r3, #0]
   26aa0:	b25b      	sxtb	r3, r3
}
   26aa2:	0018      	movs	r0, r3
   26aa4:	46bd      	mov	sp, r7
   26aa6:	b007      	add	sp, #28
   26aa8:	bd90      	pop	{r4, r7, pc}
   26aaa:	46c0      	nop			; (mov r8, r8)
   26aac:	000266a1 	.word	0x000266a1

00026ab0 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   26ab0:	b590      	push	{r4, r7, lr}
   26ab2:	b087      	sub	sp, #28
   26ab4:	af00      	add	r7, sp, #0
   26ab6:	60f8      	str	r0, [r7, #12]
   26ab8:	60b9      	str	r1, [r7, #8]
   26aba:	1dbb      	adds	r3, r7, #6
   26abc:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   26abe:	2317      	movs	r3, #23
   26ac0:	18fc      	adds	r4, r7, r3
   26ac2:	1dbb      	adds	r3, r7, #6
   26ac4:	881a      	ldrh	r2, [r3, #0]
   26ac6:	68b9      	ldr	r1, [r7, #8]
   26ac8:	68fb      	ldr	r3, [r7, #12]
   26aca:	0018      	movs	r0, r3
   26acc:	4b0d      	ldr	r3, [pc, #52]	; (26b04 <nm_spi_write_block+0x54>)
   26ace:	4798      	blx	r3
   26ad0:	0003      	movs	r3, r0
   26ad2:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   26ad4:	2317      	movs	r3, #23
   26ad6:	18fb      	adds	r3, r7, r3
   26ad8:	781b      	ldrb	r3, [r3, #0]
   26ada:	b25b      	sxtb	r3, r3
   26adc:	2b01      	cmp	r3, #1
   26ade:	d104      	bne.n	26aea <nm_spi_write_block+0x3a>
   26ae0:	2317      	movs	r3, #23
   26ae2:	18fb      	adds	r3, r7, r3
   26ae4:	2200      	movs	r2, #0
   26ae6:	701a      	strb	r2, [r3, #0]
   26ae8:	e003      	b.n	26af2 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   26aea:	2317      	movs	r3, #23
   26aec:	18fb      	adds	r3, r7, r3
   26aee:	22fa      	movs	r2, #250	; 0xfa
   26af0:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   26af2:	2317      	movs	r3, #23
   26af4:	18fb      	adds	r3, r7, r3
   26af6:	781b      	ldrb	r3, [r3, #0]
   26af8:	b25b      	sxtb	r3, r3
}
   26afa:	0018      	movs	r0, r3
   26afc:	46bd      	mov	sp, r7
   26afe:	b007      	add	sp, #28
   26b00:	bd90      	pop	{r4, r7, pc}
   26b02:	46c0      	nop			; (mov r8, r8)
   26b04:	0002637d 	.word	0x0002637d

00026b08 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   26b08:	b590      	push	{r4, r7, lr}
   26b0a:	b089      	sub	sp, #36	; 0x24
   26b0c:	af00      	add	r7, sp, #0
   26b0e:	60b9      	str	r1, [r7, #8]
   26b10:	0011      	movs	r1, r2
   26b12:	607b      	str	r3, [r7, #4]
   26b14:	230f      	movs	r3, #15
   26b16:	18fb      	adds	r3, r7, r3
   26b18:	1c02      	adds	r2, r0, #0
   26b1a:	701a      	strb	r2, [r3, #0]
   26b1c:	230e      	movs	r3, #14
   26b1e:	18fb      	adds	r3, r7, r3
   26b20:	1c0a      	adds	r2, r1, #0
   26b22:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   26b24:	2330      	movs	r3, #48	; 0x30
   26b26:	18fb      	adds	r3, r7, r3
   26b28:	881b      	ldrh	r3, [r3, #0]
   26b2a:	2b00      	cmp	r3, #0
   26b2c:	d100      	bne.n	26b30 <Socket_ReadSocketData+0x28>
   26b2e:	e0d7      	b.n	26ce0 <Socket_ReadSocketData+0x1d8>
   26b30:	230f      	movs	r3, #15
   26b32:	18fb      	adds	r3, r7, r3
   26b34:	2200      	movs	r2, #0
   26b36:	569a      	ldrsb	r2, [r3, r2]
   26b38:	4b6b      	ldr	r3, [pc, #428]	; (26ce8 <Socket_ReadSocketData+0x1e0>)
   26b3a:	0112      	lsls	r2, r2, #4
   26b3c:	58d3      	ldr	r3, [r2, r3]
   26b3e:	2b00      	cmp	r3, #0
   26b40:	d100      	bne.n	26b44 <Socket_ReadSocketData+0x3c>
   26b42:	e0cd      	b.n	26ce0 <Socket_ReadSocketData+0x1d8>
   26b44:	230f      	movs	r3, #15
   26b46:	18fb      	adds	r3, r7, r3
   26b48:	781b      	ldrb	r3, [r3, #0]
   26b4a:	b25b      	sxtb	r3, r3
   26b4c:	4a66      	ldr	r2, [pc, #408]	; (26ce8 <Socket_ReadSocketData+0x1e0>)
   26b4e:	011b      	lsls	r3, r3, #4
   26b50:	18d3      	adds	r3, r2, r3
   26b52:	3304      	adds	r3, #4
   26b54:	881b      	ldrh	r3, [r3, #0]
   26b56:	b29b      	uxth	r3, r3
   26b58:	2b00      	cmp	r3, #0
   26b5a:	d100      	bne.n	26b5e <Socket_ReadSocketData+0x56>
   26b5c:	e0c0      	b.n	26ce0 <Socket_ReadSocketData+0x1d8>
   26b5e:	230f      	movs	r3, #15
   26b60:	18fb      	adds	r3, r7, r3
   26b62:	781b      	ldrb	r3, [r3, #0]
   26b64:	b25b      	sxtb	r3, r3
   26b66:	4a60      	ldr	r2, [pc, #384]	; (26ce8 <Socket_ReadSocketData+0x1e0>)
   26b68:	011b      	lsls	r3, r3, #4
   26b6a:	18d3      	adds	r3, r2, r3
   26b6c:	330a      	adds	r3, #10
   26b6e:	781b      	ldrb	r3, [r3, #0]
   26b70:	b2db      	uxtb	r3, r3
   26b72:	2b01      	cmp	r3, #1
   26b74:	d000      	beq.n	26b78 <Socket_ReadSocketData+0x70>
   26b76:	e0b3      	b.n	26ce0 <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   26b78:	687b      	ldr	r3, [r7, #4]
   26b7a:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   26b7c:	68bb      	ldr	r3, [r7, #8]
   26b7e:	2230      	movs	r2, #48	; 0x30
   26b80:	18ba      	adds	r2, r7, r2
   26b82:	8812      	ldrh	r2, [r2, #0]
   26b84:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   26b86:	2319      	movs	r3, #25
   26b88:	18fb      	adds	r3, r7, r3
   26b8a:	2201      	movs	r2, #1
   26b8c:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   26b8e:	231a      	movs	r3, #26
   26b90:	18fb      	adds	r3, r7, r3
   26b92:	2230      	movs	r2, #48	; 0x30
   26b94:	18ba      	adds	r2, r7, r2
   26b96:	8812      	ldrh	r2, [r2, #0]
   26b98:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   26b9a:	230f      	movs	r3, #15
   26b9c:	18fb      	adds	r3, r7, r3
   26b9e:	781b      	ldrb	r3, [r3, #0]
   26ba0:	b25b      	sxtb	r3, r3
   26ba2:	4a51      	ldr	r2, [pc, #324]	; (26ce8 <Socket_ReadSocketData+0x1e0>)
   26ba4:	011b      	lsls	r3, r3, #4
   26ba6:	18d3      	adds	r3, r2, r3
   26ba8:	3304      	adds	r3, #4
   26baa:	881b      	ldrh	r3, [r3, #0]
   26bac:	b29b      	uxth	r3, r3
   26bae:	221a      	movs	r2, #26
   26bb0:	18ba      	adds	r2, r7, r2
   26bb2:	8812      	ldrh	r2, [r2, #0]
   26bb4:	1ad3      	subs	r3, r2, r3
   26bb6:	b29a      	uxth	r2, r3
   26bb8:	2316      	movs	r3, #22
   26bba:	18fb      	adds	r3, r7, r3
   26bbc:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   26bbe:	2316      	movs	r3, #22
   26bc0:	18fb      	adds	r3, r7, r3
   26bc2:	2200      	movs	r2, #0
   26bc4:	5e9b      	ldrsh	r3, [r3, r2]
   26bc6:	2b00      	cmp	r3, #0
   26bc8:	dd0f      	ble.n	26bea <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   26bca:	2319      	movs	r3, #25
   26bcc:	18fb      	adds	r3, r7, r3
   26bce:	2200      	movs	r2, #0
   26bd0:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   26bd2:	230f      	movs	r3, #15
   26bd4:	18fb      	adds	r3, r7, r3
   26bd6:	2200      	movs	r2, #0
   26bd8:	569a      	ldrsb	r2, [r3, r2]
   26bda:	231a      	movs	r3, #26
   26bdc:	18fb      	adds	r3, r7, r3
   26bde:	4942      	ldr	r1, [pc, #264]	; (26ce8 <Socket_ReadSocketData+0x1e0>)
   26be0:	0112      	lsls	r2, r2, #4
   26be2:	188a      	adds	r2, r1, r2
   26be4:	3204      	adds	r2, #4
   26be6:	8812      	ldrh	r2, [r2, #0]
   26be8:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   26bea:	230f      	movs	r3, #15
   26bec:	18fb      	adds	r3, r7, r3
   26bee:	2200      	movs	r2, #0
   26bf0:	569a      	ldrsb	r2, [r3, r2]
   26bf2:	4b3d      	ldr	r3, [pc, #244]	; (26ce8 <Socket_ReadSocketData+0x1e0>)
   26bf4:	0112      	lsls	r2, r2, #4
   26bf6:	58d1      	ldr	r1, [r2, r3]
   26bf8:	2319      	movs	r3, #25
   26bfa:	18fb      	adds	r3, r7, r3
   26bfc:	781c      	ldrb	r4, [r3, #0]
   26bfe:	231a      	movs	r3, #26
   26c00:	18fb      	adds	r3, r7, r3
   26c02:	881a      	ldrh	r2, [r3, #0]
   26c04:	69f8      	ldr	r0, [r7, #28]
   26c06:	0023      	movs	r3, r4
   26c08:	4c38      	ldr	r4, [pc, #224]	; (26cec <Socket_ReadSocketData+0x1e4>)
   26c0a:	47a0      	blx	r4
   26c0c:	1e03      	subs	r3, r0, #0
   26c0e:	d14f      	bne.n	26cb0 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   26c10:	230f      	movs	r3, #15
   26c12:	18fb      	adds	r3, r7, r3
   26c14:	2200      	movs	r2, #0
   26c16:	569a      	ldrsb	r2, [r3, r2]
   26c18:	4b33      	ldr	r3, [pc, #204]	; (26ce8 <Socket_ReadSocketData+0x1e0>)
   26c1a:	0112      	lsls	r2, r2, #4
   26c1c:	58d2      	ldr	r2, [r2, r3]
   26c1e:	68bb      	ldr	r3, [r7, #8]
   26c20:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   26c22:	231a      	movs	r3, #26
   26c24:	18fb      	adds	r3, r7, r3
   26c26:	2200      	movs	r2, #0
   26c28:	5e9a      	ldrsh	r2, [r3, r2]
   26c2a:	68bb      	ldr	r3, [r7, #8]
   26c2c:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   26c2e:	68bb      	ldr	r3, [r7, #8]
   26c30:	88da      	ldrh	r2, [r3, #6]
   26c32:	231a      	movs	r3, #26
   26c34:	18fb      	adds	r3, r7, r3
   26c36:	881b      	ldrh	r3, [r3, #0]
   26c38:	1ad3      	subs	r3, r2, r3
   26c3a:	b29a      	uxth	r2, r3
   26c3c:	68bb      	ldr	r3, [r7, #8]
   26c3e:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   26c40:	4b2b      	ldr	r3, [pc, #172]	; (26cf0 <Socket_ReadSocketData+0x1e8>)
   26c42:	681b      	ldr	r3, [r3, #0]
   26c44:	2b00      	cmp	r3, #0
   26c46:	d00b      	beq.n	26c60 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   26c48:	4b29      	ldr	r3, [pc, #164]	; (26cf0 <Socket_ReadSocketData+0x1e8>)
   26c4a:	681b      	ldr	r3, [r3, #0]
   26c4c:	68bc      	ldr	r4, [r7, #8]
   26c4e:	220e      	movs	r2, #14
   26c50:	18ba      	adds	r2, r7, r2
   26c52:	7811      	ldrb	r1, [r2, #0]
   26c54:	220f      	movs	r2, #15
   26c56:	18ba      	adds	r2, r7, r2
   26c58:	2000      	movs	r0, #0
   26c5a:	5610      	ldrsb	r0, [r2, r0]
   26c5c:	0022      	movs	r2, r4
   26c5e:	4798      	blx	r3

				u16ReadCount -= u16Read;
   26c60:	2330      	movs	r3, #48	; 0x30
   26c62:	18f9      	adds	r1, r7, r3
   26c64:	2330      	movs	r3, #48	; 0x30
   26c66:	18fa      	adds	r2, r7, r3
   26c68:	231a      	movs	r3, #26
   26c6a:	18fb      	adds	r3, r7, r3
   26c6c:	8812      	ldrh	r2, [r2, #0]
   26c6e:	881b      	ldrh	r3, [r3, #0]
   26c70:	1ad3      	subs	r3, r2, r3
   26c72:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   26c74:	231a      	movs	r3, #26
   26c76:	18fb      	adds	r3, r7, r3
   26c78:	881b      	ldrh	r3, [r3, #0]
   26c7a:	69fa      	ldr	r2, [r7, #28]
   26c7c:	18d3      	adds	r3, r2, r3
   26c7e:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   26c80:	230f      	movs	r3, #15
   26c82:	18fb      	adds	r3, r7, r3
   26c84:	781b      	ldrb	r3, [r3, #0]
   26c86:	b25b      	sxtb	r3, r3
   26c88:	4a17      	ldr	r2, [pc, #92]	; (26ce8 <Socket_ReadSocketData+0x1e0>)
   26c8a:	011b      	lsls	r3, r3, #4
   26c8c:	18d3      	adds	r3, r2, r3
   26c8e:	330a      	adds	r3, #10
   26c90:	781b      	ldrb	r3, [r3, #0]
   26c92:	b2db      	uxtb	r3, r3
   26c94:	2b00      	cmp	r3, #0
   26c96:	d11c      	bne.n	26cd2 <Socket_ReadSocketData+0x1ca>
   26c98:	2330      	movs	r3, #48	; 0x30
   26c9a:	18fb      	adds	r3, r7, r3
   26c9c:	881b      	ldrh	r3, [r3, #0]
   26c9e:	2b00      	cmp	r3, #0
   26ca0:	d017      	beq.n	26cd2 <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   26ca2:	2301      	movs	r3, #1
   26ca4:	2200      	movs	r2, #0
   26ca6:	2100      	movs	r1, #0
   26ca8:	2000      	movs	r0, #0
   26caa:	4c10      	ldr	r4, [pc, #64]	; (26cec <Socket_ReadSocketData+0x1e4>)
   26cac:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   26cae:	e017      	b.n	26ce0 <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   26cb0:	4b10      	ldr	r3, [pc, #64]	; (26cf4 <Socket_ReadSocketData+0x1ec>)
   26cb2:	0018      	movs	r0, r3
   26cb4:	4b10      	ldr	r3, [pc, #64]	; (26cf8 <Socket_ReadSocketData+0x1f0>)
   26cb6:	4798      	blx	r3
   26cb8:	2330      	movs	r3, #48	; 0x30
   26cba:	18fb      	adds	r3, r7, r3
   26cbc:	881a      	ldrh	r2, [r3, #0]
   26cbe:	4b0f      	ldr	r3, [pc, #60]	; (26cfc <Socket_ReadSocketData+0x1f4>)
   26cc0:	0011      	movs	r1, r2
   26cc2:	0018      	movs	r0, r3
   26cc4:	4b0c      	ldr	r3, [pc, #48]	; (26cf8 <Socket_ReadSocketData+0x1f0>)
   26cc6:	4798      	blx	r3
   26cc8:	4b0d      	ldr	r3, [pc, #52]	; (26d00 <Socket_ReadSocketData+0x1f8>)
   26cca:	0018      	movs	r0, r3
   26ccc:	4b0a      	ldr	r3, [pc, #40]	; (26cf8 <Socket_ReadSocketData+0x1f0>)
   26cce:	4798      	blx	r3
				break;
   26cd0:	e006      	b.n	26ce0 <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   26cd2:	2330      	movs	r3, #48	; 0x30
   26cd4:	18fb      	adds	r3, r7, r3
   26cd6:	881b      	ldrh	r3, [r3, #0]
   26cd8:	2b00      	cmp	r3, #0
   26cda:	d000      	beq.n	26cde <Socket_ReadSocketData+0x1d6>
   26cdc:	e753      	b.n	26b86 <Socket_ReadSocketData+0x7e>
	}
}
   26cde:	e7ff      	b.n	26ce0 <Socket_ReadSocketData+0x1d8>
   26ce0:	46c0      	nop			; (mov r8, r8)
   26ce2:	46bd      	mov	sp, r7
   26ce4:	b009      	add	sp, #36	; 0x24
   26ce6:	bd90      	pop	{r4, r7, pc}
   26ce8:	20005730 	.word	0x20005730
   26cec:	00023501 	.word	0x00023501
   26cf0:	200057e0 	.word	0x200057e0
   26cf4:	0003b950 	.word	0x0003b950
   26cf8:	00020039 	.word	0x00020039
   26cfc:	0003b95c 	.word	0x0003b95c
   26d00:	0003b970 	.word	0x0003b970

00026d04 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   26d04:	b590      	push	{r4, r7, lr}
   26d06:	b0bb      	sub	sp, #236	; 0xec
   26d08:	af02      	add	r7, sp, #8
   26d0a:	603a      	str	r2, [r7, #0]
   26d0c:	1dfb      	adds	r3, r7, #7
   26d0e:	1c02      	adds	r2, r0, #0
   26d10:	701a      	strb	r2, [r3, #0]
   26d12:	1d3b      	adds	r3, r7, #4
   26d14:	1c0a      	adds	r2, r1, #0
   26d16:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   26d18:	1dfb      	adds	r3, r7, #7
   26d1a:	781b      	ldrb	r3, [r3, #0]
   26d1c:	2b41      	cmp	r3, #65	; 0x41
   26d1e:	d003      	beq.n	26d28 <m2m_ip_cb+0x24>
   26d20:	1dfb      	adds	r3, r7, #7
   26d22:	781b      	ldrb	r3, [r3, #0]
   26d24:	2b54      	cmp	r3, #84	; 0x54
   26d26:	d120      	bne.n	26d6a <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   26d28:	23cc      	movs	r3, #204	; 0xcc
   26d2a:	18f9      	adds	r1, r7, r3
   26d2c:	6838      	ldr	r0, [r7, #0]
   26d2e:	2300      	movs	r3, #0
   26d30:	2204      	movs	r2, #4
   26d32:	4c98      	ldr	r4, [pc, #608]	; (26f94 <m2m_ip_cb+0x290>)
   26d34:	47a0      	blx	r4
   26d36:	1e03      	subs	r3, r0, #0
   26d38:	d000      	beq.n	26d3c <m2m_ip_cb+0x38>
   26d3a:	e275      	b.n	27228 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   26d3c:	23cc      	movs	r3, #204	; 0xcc
   26d3e:	18fb      	adds	r3, r7, r3
   26d40:	2201      	movs	r2, #1
   26d42:	569a      	ldrsb	r2, [r3, r2]
   26d44:	23c8      	movs	r3, #200	; 0xc8
   26d46:	18fb      	adds	r3, r7, r3
   26d48:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   26d4a:	4b93      	ldr	r3, [pc, #588]	; (26f98 <m2m_ip_cb+0x294>)
   26d4c:	681b      	ldr	r3, [r3, #0]
   26d4e:	2b00      	cmp	r3, #0
   26d50:	d100      	bne.n	26d54 <m2m_ip_cb+0x50>
   26d52:	e269      	b.n	27228 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   26d54:	4b90      	ldr	r3, [pc, #576]	; (26f98 <m2m_ip_cb+0x294>)
   26d56:	681b      	ldr	r3, [r3, #0]
   26d58:	22cc      	movs	r2, #204	; 0xcc
   26d5a:	18ba      	adds	r2, r7, r2
   26d5c:	2000      	movs	r0, #0
   26d5e:	5610      	ldrsb	r0, [r2, r0]
   26d60:	22c8      	movs	r2, #200	; 0xc8
   26d62:	18ba      	adds	r2, r7, r2
   26d64:	2101      	movs	r1, #1
   26d66:	4798      	blx	r3
	{
   26d68:	e25e      	b.n	27228 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   26d6a:	1dfb      	adds	r3, r7, #7
   26d6c:	781b      	ldrb	r3, [r3, #0]
   26d6e:	2b42      	cmp	r3, #66	; 0x42
   26d70:	d120      	bne.n	26db4 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   26d72:	23c4      	movs	r3, #196	; 0xc4
   26d74:	18f9      	adds	r1, r7, r3
   26d76:	6838      	ldr	r0, [r7, #0]
   26d78:	2300      	movs	r3, #0
   26d7a:	2204      	movs	r2, #4
   26d7c:	4c85      	ldr	r4, [pc, #532]	; (26f94 <m2m_ip_cb+0x290>)
   26d7e:	47a0      	blx	r4
   26d80:	1e03      	subs	r3, r0, #0
   26d82:	d000      	beq.n	26d86 <m2m_ip_cb+0x82>
   26d84:	e257      	b.n	27236 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   26d86:	23c4      	movs	r3, #196	; 0xc4
   26d88:	18fb      	adds	r3, r7, r3
   26d8a:	2201      	movs	r2, #1
   26d8c:	569a      	ldrsb	r2, [r3, r2]
   26d8e:	23c0      	movs	r3, #192	; 0xc0
   26d90:	18fb      	adds	r3, r7, r3
   26d92:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   26d94:	4b80      	ldr	r3, [pc, #512]	; (26f98 <m2m_ip_cb+0x294>)
   26d96:	681b      	ldr	r3, [r3, #0]
   26d98:	2b00      	cmp	r3, #0
   26d9a:	d100      	bne.n	26d9e <m2m_ip_cb+0x9a>
   26d9c:	e24b      	b.n	27236 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   26d9e:	4b7e      	ldr	r3, [pc, #504]	; (26f98 <m2m_ip_cb+0x294>)
   26da0:	681b      	ldr	r3, [r3, #0]
   26da2:	22c4      	movs	r2, #196	; 0xc4
   26da4:	18ba      	adds	r2, r7, r2
   26da6:	2000      	movs	r0, #0
   26da8:	5610      	ldrsb	r0, [r2, r0]
   26daa:	22c0      	movs	r2, #192	; 0xc0
   26dac:	18ba      	adds	r2, r7, r2
   26dae:	2102      	movs	r1, #2
   26db0:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   26db2:	e240      	b.n	27236 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   26db4:	1dfb      	adds	r3, r7, #7
   26db6:	781b      	ldrb	r3, [r3, #0]
   26db8:	2b43      	cmp	r3, #67	; 0x43
   26dba:	d000      	beq.n	26dbe <m2m_ip_cb+0xba>
   26dbc:	e086      	b.n	26ecc <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   26dbe:	23b4      	movs	r3, #180	; 0xb4
   26dc0:	18f9      	adds	r1, r7, r3
   26dc2:	6838      	ldr	r0, [r7, #0]
   26dc4:	2300      	movs	r3, #0
   26dc6:	220c      	movs	r2, #12
   26dc8:	4c72      	ldr	r4, [pc, #456]	; (26f94 <m2m_ip_cb+0x290>)
   26dca:	47a0      	blx	r4
   26dcc:	1e03      	subs	r3, r0, #0
   26dce:	d000      	beq.n	26dd2 <m2m_ip_cb+0xce>
   26dd0:	e231      	b.n	27236 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   26dd2:	23b4      	movs	r3, #180	; 0xb4
   26dd4:	18fb      	adds	r3, r7, r3
   26dd6:	7a5b      	ldrb	r3, [r3, #9]
   26dd8:	b25b      	sxtb	r3, r3
   26dda:	2b00      	cmp	r3, #0
   26ddc:	db4f      	blt.n	26e7e <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   26dde:	23b4      	movs	r3, #180	; 0xb4
   26de0:	18fb      	adds	r3, r7, r3
   26de2:	7a5b      	ldrb	r3, [r3, #9]
   26de4:	b25b      	sxtb	r3, r3
   26de6:	0018      	movs	r0, r3
   26de8:	23b4      	movs	r3, #180	; 0xb4
   26dea:	18fb      	adds	r3, r7, r3
   26dec:	7a1b      	ldrb	r3, [r3, #8]
   26dee:	b25b      	sxtb	r3, r3
   26df0:	4a6a      	ldr	r2, [pc, #424]	; (26f9c <m2m_ip_cb+0x298>)
   26df2:	011b      	lsls	r3, r3, #4
   26df4:	18d3      	adds	r3, r2, r3
   26df6:	330b      	adds	r3, #11
   26df8:	781b      	ldrb	r3, [r3, #0]
   26dfa:	b2d9      	uxtb	r1, r3
   26dfc:	4a67      	ldr	r2, [pc, #412]	; (26f9c <m2m_ip_cb+0x298>)
   26dfe:	0103      	lsls	r3, r0, #4
   26e00:	18d3      	adds	r3, r2, r3
   26e02:	330b      	adds	r3, #11
   26e04:	1c0a      	adds	r2, r1, #0
   26e06:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   26e08:	23b4      	movs	r3, #180	; 0xb4
   26e0a:	18fb      	adds	r3, r7, r3
   26e0c:	7a5b      	ldrb	r3, [r3, #9]
   26e0e:	b25b      	sxtb	r3, r3
   26e10:	4a62      	ldr	r2, [pc, #392]	; (26f9c <m2m_ip_cb+0x298>)
   26e12:	011b      	lsls	r3, r3, #4
   26e14:	18d3      	adds	r3, r2, r3
   26e16:	330a      	adds	r3, #10
   26e18:	2201      	movs	r2, #1
   26e1a:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   26e1c:	23b4      	movs	r3, #180	; 0xb4
   26e1e:	18fb      	adds	r3, r7, r3
   26e20:	7a5b      	ldrb	r3, [r3, #9]
   26e22:	b25b      	sxtb	r3, r3
   26e24:	0018      	movs	r0, r3
   26e26:	23b4      	movs	r3, #180	; 0xb4
   26e28:	18fb      	adds	r3, r7, r3
   26e2a:	895b      	ldrh	r3, [r3, #10]
   26e2c:	3b08      	subs	r3, #8
   26e2e:	b299      	uxth	r1, r3
   26e30:	4a5a      	ldr	r2, [pc, #360]	; (26f9c <m2m_ip_cb+0x298>)
   26e32:	0103      	lsls	r3, r0, #4
   26e34:	18d3      	adds	r3, r2, r3
   26e36:	3308      	adds	r3, #8
   26e38:	1c0a      	adds	r2, r1, #0
   26e3a:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   26e3c:	4b58      	ldr	r3, [pc, #352]	; (26fa0 <m2m_ip_cb+0x29c>)
   26e3e:	881b      	ldrh	r3, [r3, #0]
   26e40:	b29b      	uxth	r3, r3
   26e42:	3301      	adds	r3, #1
   26e44:	b29a      	uxth	r2, r3
   26e46:	4b56      	ldr	r3, [pc, #344]	; (26fa0 <m2m_ip_cb+0x29c>)
   26e48:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   26e4a:	4b55      	ldr	r3, [pc, #340]	; (26fa0 <m2m_ip_cb+0x29c>)
   26e4c:	881b      	ldrh	r3, [r3, #0]
   26e4e:	b29b      	uxth	r3, r3
   26e50:	2b00      	cmp	r3, #0
   26e52:	d106      	bne.n	26e62 <m2m_ip_cb+0x15e>
					++gu16SessionID;
   26e54:	4b52      	ldr	r3, [pc, #328]	; (26fa0 <m2m_ip_cb+0x29c>)
   26e56:	881b      	ldrh	r3, [r3, #0]
   26e58:	b29b      	uxth	r3, r3
   26e5a:	3301      	adds	r3, #1
   26e5c:	b29a      	uxth	r2, r3
   26e5e:	4b50      	ldr	r3, [pc, #320]	; (26fa0 <m2m_ip_cb+0x29c>)
   26e60:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   26e62:	23b4      	movs	r3, #180	; 0xb4
   26e64:	18fb      	adds	r3, r7, r3
   26e66:	7a5b      	ldrb	r3, [r3, #9]
   26e68:	b25b      	sxtb	r3, r3
   26e6a:	0018      	movs	r0, r3
   26e6c:	4b4c      	ldr	r3, [pc, #304]	; (26fa0 <m2m_ip_cb+0x29c>)
   26e6e:	881b      	ldrh	r3, [r3, #0]
   26e70:	b299      	uxth	r1, r3
   26e72:	4a4a      	ldr	r2, [pc, #296]	; (26f9c <m2m_ip_cb+0x298>)
   26e74:	0103      	lsls	r3, r0, #4
   26e76:	18d3      	adds	r3, r2, r3
   26e78:	3306      	adds	r3, #6
   26e7a:	1c0a      	adds	r2, r1, #0
   26e7c:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   26e7e:	23b4      	movs	r3, #180	; 0xb4
   26e80:	18fb      	adds	r3, r7, r3
   26e82:	2209      	movs	r2, #9
   26e84:	569a      	ldrsb	r2, [r3, r2]
   26e86:	23a0      	movs	r3, #160	; 0xa0
   26e88:	18fb      	adds	r3, r7, r3
   26e8a:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   26e8c:	23a0      	movs	r3, #160	; 0xa0
   26e8e:	18fb      	adds	r3, r7, r3
   26e90:	2202      	movs	r2, #2
   26e92:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   26e94:	23b4      	movs	r3, #180	; 0xb4
   26e96:	18fb      	adds	r3, r7, r3
   26e98:	885a      	ldrh	r2, [r3, #2]
   26e9a:	23a0      	movs	r3, #160	; 0xa0
   26e9c:	18fb      	adds	r3, r7, r3
   26e9e:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   26ea0:	23b4      	movs	r3, #180	; 0xb4
   26ea2:	18fb      	adds	r3, r7, r3
   26ea4:	685a      	ldr	r2, [r3, #4]
   26ea6:	23a0      	movs	r3, #160	; 0xa0
   26ea8:	18fb      	adds	r3, r7, r3
   26eaa:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   26eac:	4b3a      	ldr	r3, [pc, #232]	; (26f98 <m2m_ip_cb+0x294>)
   26eae:	681b      	ldr	r3, [r3, #0]
   26eb0:	2b00      	cmp	r3, #0
   26eb2:	d100      	bne.n	26eb6 <m2m_ip_cb+0x1b2>
   26eb4:	e1bf      	b.n	27236 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   26eb6:	4b38      	ldr	r3, [pc, #224]	; (26f98 <m2m_ip_cb+0x294>)
   26eb8:	681b      	ldr	r3, [r3, #0]
   26eba:	22b4      	movs	r2, #180	; 0xb4
   26ebc:	18ba      	adds	r2, r7, r2
   26ebe:	2008      	movs	r0, #8
   26ec0:	5610      	ldrsb	r0, [r2, r0]
   26ec2:	22a0      	movs	r2, #160	; 0xa0
   26ec4:	18ba      	adds	r2, r7, r2
   26ec6:	2104      	movs	r1, #4
   26ec8:	4798      	blx	r3
}
   26eca:	e1b4      	b.n	27236 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   26ecc:	1dfb      	adds	r3, r7, #7
   26ece:	781b      	ldrb	r3, [r3, #0]
   26ed0:	2b44      	cmp	r3, #68	; 0x44
   26ed2:	d003      	beq.n	26edc <m2m_ip_cb+0x1d8>
   26ed4:	1dfb      	adds	r3, r7, #7
   26ed6:	781b      	ldrb	r3, [r3, #0]
   26ed8:	2b4b      	cmp	r3, #75	; 0x4b
   26eda:	d13d      	bne.n	26f58 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   26edc:	239c      	movs	r3, #156	; 0x9c
   26ede:	18f9      	adds	r1, r7, r3
   26ee0:	6838      	ldr	r0, [r7, #0]
   26ee2:	2300      	movs	r3, #0
   26ee4:	2204      	movs	r2, #4
   26ee6:	4c2b      	ldr	r4, [pc, #172]	; (26f94 <m2m_ip_cb+0x290>)
   26ee8:	47a0      	blx	r4
   26eea:	1e03      	subs	r3, r0, #0
   26eec:	d000      	beq.n	26ef0 <m2m_ip_cb+0x1ec>
   26eee:	e19d      	b.n	2722c <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   26ef0:	239c      	movs	r3, #156	; 0x9c
   26ef2:	18fb      	adds	r3, r7, r3
   26ef4:	2200      	movs	r2, #0
   26ef6:	569a      	ldrsb	r2, [r3, r2]
   26ef8:	2398      	movs	r3, #152	; 0x98
   26efa:	18fb      	adds	r3, r7, r3
   26efc:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   26efe:	239c      	movs	r3, #156	; 0x9c
   26f00:	18fb      	adds	r3, r7, r3
   26f02:	2201      	movs	r2, #1
   26f04:	569a      	ldrsb	r2, [r3, r2]
   26f06:	2398      	movs	r3, #152	; 0x98
   26f08:	18fb      	adds	r3, r7, r3
   26f0a:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   26f0c:	239c      	movs	r3, #156	; 0x9c
   26f0e:	18fb      	adds	r3, r7, r3
   26f10:	785b      	ldrb	r3, [r3, #1]
   26f12:	b25b      	sxtb	r3, r3
   26f14:	2b00      	cmp	r3, #0
   26f16:	d10f      	bne.n	26f38 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   26f18:	239c      	movs	r3, #156	; 0x9c
   26f1a:	18fb      	adds	r3, r7, r3
   26f1c:	781b      	ldrb	r3, [r3, #0]
   26f1e:	b25b      	sxtb	r3, r3
   26f20:	0018      	movs	r0, r3
   26f22:	239c      	movs	r3, #156	; 0x9c
   26f24:	18fb      	adds	r3, r7, r3
   26f26:	885b      	ldrh	r3, [r3, #2]
   26f28:	3b08      	subs	r3, #8
   26f2a:	b299      	uxth	r1, r3
   26f2c:	4a1b      	ldr	r2, [pc, #108]	; (26f9c <m2m_ip_cb+0x298>)
   26f2e:	0103      	lsls	r3, r0, #4
   26f30:	18d3      	adds	r3, r2, r3
   26f32:	3308      	adds	r3, #8
   26f34:	1c0a      	adds	r2, r1, #0
   26f36:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   26f38:	4b17      	ldr	r3, [pc, #92]	; (26f98 <m2m_ip_cb+0x294>)
   26f3a:	681b      	ldr	r3, [r3, #0]
   26f3c:	2b00      	cmp	r3, #0
   26f3e:	d100      	bne.n	26f42 <m2m_ip_cb+0x23e>
   26f40:	e174      	b.n	2722c <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   26f42:	4b15      	ldr	r3, [pc, #84]	; (26f98 <m2m_ip_cb+0x294>)
   26f44:	681b      	ldr	r3, [r3, #0]
   26f46:	229c      	movs	r2, #156	; 0x9c
   26f48:	18ba      	adds	r2, r7, r2
   26f4a:	2000      	movs	r0, #0
   26f4c:	5610      	ldrsb	r0, [r2, r0]
   26f4e:	2298      	movs	r2, #152	; 0x98
   26f50:	18ba      	adds	r2, r7, r2
   26f52:	2105      	movs	r1, #5
   26f54:	4798      	blx	r3
	{
   26f56:	e169      	b.n	2722c <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   26f58:	1dfb      	adds	r3, r7, #7
   26f5a:	781b      	ldrb	r3, [r3, #0]
   26f5c:	2b4a      	cmp	r3, #74	; 0x4a
   26f5e:	d123      	bne.n	26fa8 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   26f60:	230c      	movs	r3, #12
   26f62:	18f9      	adds	r1, r7, r3
   26f64:	6838      	ldr	r0, [r7, #0]
   26f66:	2300      	movs	r3, #0
   26f68:	2244      	movs	r2, #68	; 0x44
   26f6a:	4c0a      	ldr	r4, [pc, #40]	; (26f94 <m2m_ip_cb+0x290>)
   26f6c:	47a0      	blx	r4
   26f6e:	1e03      	subs	r3, r0, #0
   26f70:	d000      	beq.n	26f74 <m2m_ip_cb+0x270>
   26f72:	e160      	b.n	27236 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   26f74:	4b0b      	ldr	r3, [pc, #44]	; (26fa4 <m2m_ip_cb+0x2a0>)
   26f76:	681b      	ldr	r3, [r3, #0]
   26f78:	2b00      	cmp	r3, #0
   26f7a:	d100      	bne.n	26f7e <m2m_ip_cb+0x27a>
   26f7c:	e15b      	b.n	27236 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   26f7e:	4b09      	ldr	r3, [pc, #36]	; (26fa4 <m2m_ip_cb+0x2a0>)
   26f80:	681a      	ldr	r2, [r3, #0]
   26f82:	230c      	movs	r3, #12
   26f84:	18fb      	adds	r3, r7, r3
   26f86:	6c19      	ldr	r1, [r3, #64]	; 0x40
   26f88:	230c      	movs	r3, #12
   26f8a:	18fb      	adds	r3, r7, r3
   26f8c:	0018      	movs	r0, r3
   26f8e:	4790      	blx	r2
}
   26f90:	e151      	b.n	27236 <m2m_ip_cb+0x532>
   26f92:	46c0      	nop			; (mov r8, r8)
   26f94:	00023501 	.word	0x00023501
   26f98:	200057e0 	.word	0x200057e0
   26f9c:	20005730 	.word	0x20005730
   26fa0:	20003ece 	.word	0x20003ece
   26fa4:	200057e8 	.word	0x200057e8
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   26fa8:	1dfb      	adds	r3, r7, #7
   26faa:	781b      	ldrb	r3, [r3, #0]
   26fac:	2b46      	cmp	r3, #70	; 0x46
   26fae:	d008      	beq.n	26fc2 <m2m_ip_cb+0x2be>
   26fb0:	1dfb      	adds	r3, r7, #7
   26fb2:	781b      	ldrb	r3, [r3, #0]
   26fb4:	2b48      	cmp	r3, #72	; 0x48
   26fb6:	d004      	beq.n	26fc2 <m2m_ip_cb+0x2be>
   26fb8:	1dfb      	adds	r3, r7, #7
   26fba:	781b      	ldrb	r3, [r3, #0]
   26fbc:	2b4d      	cmp	r3, #77	; 0x4d
   26fbe:	d000      	beq.n	26fc2 <m2m_ip_cb+0x2be>
   26fc0:	e0b4      	b.n	2712c <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   26fc2:	23df      	movs	r3, #223	; 0xdf
   26fc4:	18fb      	adds	r3, r7, r3
   26fc6:	2206      	movs	r2, #6
   26fc8:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   26fca:	1dfb      	adds	r3, r7, #7
   26fcc:	781b      	ldrb	r3, [r3, #0]
   26fce:	2b48      	cmp	r3, #72	; 0x48
   26fd0:	d103      	bne.n	26fda <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   26fd2:	23df      	movs	r3, #223	; 0xdf
   26fd4:	18fb      	adds	r3, r7, r3
   26fd6:	2209      	movs	r2, #9
   26fd8:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   26fda:	23d8      	movs	r3, #216	; 0xd8
   26fdc:	18fb      	adds	r3, r7, r3
   26fde:	2210      	movs	r2, #16
   26fe0:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   26fe2:	23d8      	movs	r3, #216	; 0xd8
   26fe4:	18fb      	adds	r3, r7, r3
   26fe6:	881a      	ldrh	r2, [r3, #0]
   26fe8:	2388      	movs	r3, #136	; 0x88
   26fea:	18f9      	adds	r1, r7, r3
   26fec:	6838      	ldr	r0, [r7, #0]
   26fee:	2300      	movs	r3, #0
   26ff0:	4c93      	ldr	r4, [pc, #588]	; (27240 <m2m_ip_cb+0x53c>)
   26ff2:	47a0      	blx	r4
   26ff4:	1e03      	subs	r3, r0, #0
   26ff6:	d000      	beq.n	26ffa <m2m_ip_cb+0x2f6>
   26ff8:	e11a      	b.n	27230 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   26ffa:	23d6      	movs	r3, #214	; 0xd6
   26ffc:	18fb      	adds	r3, r7, r3
   26ffe:	2200      	movs	r2, #0
   27000:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   27002:	23d5      	movs	r3, #213	; 0xd5
   27004:	18fb      	adds	r3, r7, r3
   27006:	2288      	movs	r2, #136	; 0x88
   27008:	18ba      	adds	r2, r7, r2
   2700a:	7b12      	ldrb	r2, [r2, #12]
   2700c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   2700e:	23d6      	movs	r3, #214	; 0xd6
   27010:	18fb      	adds	r3, r7, r3
   27012:	2288      	movs	r2, #136	; 0x88
   27014:	18ba      	adds	r2, r7, r2
   27016:	89d2      	ldrh	r2, [r2, #14]
   27018:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   2701a:	23d5      	movs	r3, #213	; 0xd5
   2701c:	18fb      	adds	r3, r7, r3
   2701e:	781b      	ldrb	r3, [r3, #0]
   27020:	b25b      	sxtb	r3, r3
   27022:	4a88      	ldr	r2, [pc, #544]	; (27244 <m2m_ip_cb+0x540>)
   27024:	011b      	lsls	r3, r3, #4
   27026:	18d3      	adds	r3, r2, r3
   27028:	330c      	adds	r3, #12
   2702a:	2200      	movs	r2, #0
   2702c:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   2702e:	23d2      	movs	r3, #210	; 0xd2
   27030:	18fb      	adds	r3, r7, r3
   27032:	2288      	movs	r2, #136	; 0x88
   27034:	18ba      	adds	r2, r7, r2
   27036:	8912      	ldrh	r2, [r2, #8]
   27038:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   2703a:	23d0      	movs	r3, #208	; 0xd0
   2703c:	18fb      	adds	r3, r7, r3
   2703e:	2288      	movs	r2, #136	; 0x88
   27040:	18ba      	adds	r2, r7, r2
   27042:	8952      	ldrh	r2, [r2, #10]
   27044:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   27046:	2388      	movs	r3, #136	; 0x88
   27048:	18fb      	adds	r3, r7, r3
   2704a:	885a      	ldrh	r2, [r3, #2]
   2704c:	2370      	movs	r3, #112	; 0x70
   2704e:	18fb      	adds	r3, r7, r3
   27050:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   27052:	2388      	movs	r3, #136	; 0x88
   27054:	18fb      	adds	r3, r7, r3
   27056:	685a      	ldr	r2, [r3, #4]
   27058:	2370      	movs	r3, #112	; 0x70
   2705a:	18fb      	adds	r3, r7, r3
   2705c:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   2705e:	23d5      	movs	r3, #213	; 0xd5
   27060:	18fb      	adds	r3, r7, r3
   27062:	781b      	ldrb	r3, [r3, #0]
   27064:	b25b      	sxtb	r3, r3
   27066:	4a77      	ldr	r2, [pc, #476]	; (27244 <m2m_ip_cb+0x540>)
   27068:	011b      	lsls	r3, r3, #4
   2706a:	18d3      	adds	r3, r2, r3
   2706c:	3306      	adds	r3, #6
   2706e:	881b      	ldrh	r3, [r3, #0]
   27070:	b29b      	uxth	r3, r3
   27072:	22d6      	movs	r2, #214	; 0xd6
   27074:	18ba      	adds	r2, r7, r2
   27076:	8812      	ldrh	r2, [r2, #0]
   27078:	429a      	cmp	r2, r3
   2707a:	d148      	bne.n	2710e <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   2707c:	23d2      	movs	r3, #210	; 0xd2
   2707e:	18fb      	adds	r3, r7, r3
   27080:	2200      	movs	r2, #0
   27082:	5e9b      	ldrsh	r3, [r3, r2]
   27084:	2b00      	cmp	r3, #0
   27086:	dd25      	ble.n	270d4 <m2m_ip_cb+0x3d0>
   27088:	23d2      	movs	r3, #210	; 0xd2
   2708a:	18fb      	adds	r3, r7, r3
   2708c:	2200      	movs	r2, #0
   2708e:	5e9a      	ldrsh	r2, [r3, r2]
   27090:	1d3b      	adds	r3, r7, #4
   27092:	881b      	ldrh	r3, [r3, #0]
   27094:	429a      	cmp	r2, r3
   27096:	da1d      	bge.n	270d4 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   27098:	23d0      	movs	r3, #208	; 0xd0
   2709a:	18fb      	adds	r3, r7, r3
   2709c:	881b      	ldrh	r3, [r3, #0]
   2709e:	683a      	ldr	r2, [r7, #0]
   270a0:	18d3      	adds	r3, r2, r3
   270a2:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   270a4:	23d8      	movs	r3, #216	; 0xd8
   270a6:	18fb      	adds	r3, r7, r3
   270a8:	22d2      	movs	r2, #210	; 0xd2
   270aa:	18ba      	adds	r2, r7, r2
   270ac:	8812      	ldrh	r2, [r2, #0]
   270ae:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   270b0:	683c      	ldr	r4, [r7, #0]
   270b2:	23df      	movs	r3, #223	; 0xdf
   270b4:	18fb      	adds	r3, r7, r3
   270b6:	781a      	ldrb	r2, [r3, #0]
   270b8:	2370      	movs	r3, #112	; 0x70
   270ba:	18f9      	adds	r1, r7, r3
   270bc:	23d5      	movs	r3, #213	; 0xd5
   270be:	18fb      	adds	r3, r7, r3
   270c0:	2000      	movs	r0, #0
   270c2:	5618      	ldrsb	r0, [r3, r0]
   270c4:	23d8      	movs	r3, #216	; 0xd8
   270c6:	18fb      	adds	r3, r7, r3
   270c8:	881b      	ldrh	r3, [r3, #0]
   270ca:	9300      	str	r3, [sp, #0]
   270cc:	0023      	movs	r3, r4
   270ce:	4c5e      	ldr	r4, [pc, #376]	; (27248 <m2m_ip_cb+0x544>)
   270d0:	47a0      	blx	r4
	{
   270d2:	e0ad      	b.n	27230 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   270d4:	2370      	movs	r3, #112	; 0x70
   270d6:	18fb      	adds	r3, r7, r3
   270d8:	22d2      	movs	r2, #210	; 0xd2
   270da:	18ba      	adds	r2, r7, r2
   270dc:	8812      	ldrh	r2, [r2, #0]
   270de:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   270e0:	2370      	movs	r3, #112	; 0x70
   270e2:	18fb      	adds	r3, r7, r3
   270e4:	2200      	movs	r2, #0
   270e6:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   270e8:	4b58      	ldr	r3, [pc, #352]	; (2724c <m2m_ip_cb+0x548>)
   270ea:	681b      	ldr	r3, [r3, #0]
   270ec:	2b00      	cmp	r3, #0
   270ee:	d100      	bne.n	270f2 <m2m_ip_cb+0x3ee>
   270f0:	e09e      	b.n	27230 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   270f2:	4b56      	ldr	r3, [pc, #344]	; (2724c <m2m_ip_cb+0x548>)
   270f4:	681b      	ldr	r3, [r3, #0]
   270f6:	2270      	movs	r2, #112	; 0x70
   270f8:	18bc      	adds	r4, r7, r2
   270fa:	22df      	movs	r2, #223	; 0xdf
   270fc:	18ba      	adds	r2, r7, r2
   270fe:	7811      	ldrb	r1, [r2, #0]
   27100:	22d5      	movs	r2, #213	; 0xd5
   27102:	18ba      	adds	r2, r7, r2
   27104:	2000      	movs	r0, #0
   27106:	5610      	ldrsb	r0, [r2, r0]
   27108:	0022      	movs	r2, r4
   2710a:	4798      	blx	r3
	{
   2710c:	e090      	b.n	27230 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   2710e:	23d8      	movs	r3, #216	; 0xd8
   27110:	18fa      	adds	r2, r7, r3
   27112:	1d3b      	adds	r3, r7, #4
   27114:	8812      	ldrh	r2, [r2, #0]
   27116:	881b      	ldrh	r3, [r3, #0]
   27118:	429a      	cmp	r2, r3
   2711a:	d300      	bcc.n	2711e <m2m_ip_cb+0x41a>
   2711c:	e088      	b.n	27230 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   2711e:	2301      	movs	r3, #1
   27120:	2200      	movs	r2, #0
   27122:	2100      	movs	r1, #0
   27124:	2000      	movs	r0, #0
   27126:	4c46      	ldr	r4, [pc, #280]	; (27240 <m2m_ip_cb+0x53c>)
   27128:	47a0      	blx	r4
	{
   2712a:	e081      	b.n	27230 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   2712c:	1dfb      	adds	r3, r7, #7
   2712e:	781b      	ldrb	r3, [r3, #0]
   27130:	2b45      	cmp	r3, #69	; 0x45
   27132:	d007      	beq.n	27144 <m2m_ip_cb+0x440>
   27134:	1dfb      	adds	r3, r7, #7
   27136:	781b      	ldrb	r3, [r3, #0]
   27138:	2b47      	cmp	r3, #71	; 0x47
   2713a:	d003      	beq.n	27144 <m2m_ip_cb+0x440>
   2713c:	1dfb      	adds	r3, r7, #7
   2713e:	781b      	ldrb	r3, [r3, #0]
   27140:	2b4c      	cmp	r3, #76	; 0x4c
   27142:	d14c      	bne.n	271de <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   27144:	23de      	movs	r3, #222	; 0xde
   27146:	18fb      	adds	r3, r7, r3
   27148:	2207      	movs	r2, #7
   2714a:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   2714c:	1dfb      	adds	r3, r7, #7
   2714e:	781b      	ldrb	r3, [r3, #0]
   27150:	2b47      	cmp	r3, #71	; 0x47
   27152:	d103      	bne.n	2715c <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   27154:	23de      	movs	r3, #222	; 0xde
   27156:	18fb      	adds	r3, r7, r3
   27158:	2208      	movs	r2, #8
   2715a:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   2715c:	2364      	movs	r3, #100	; 0x64
   2715e:	18f9      	adds	r1, r7, r3
   27160:	6838      	ldr	r0, [r7, #0]
   27162:	2300      	movs	r3, #0
   27164:	2208      	movs	r2, #8
   27166:	4c36      	ldr	r4, [pc, #216]	; (27240 <m2m_ip_cb+0x53c>)
   27168:	47a0      	blx	r4
   2716a:	1e03      	subs	r3, r0, #0
   2716c:	d162      	bne.n	27234 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   2716e:	23dc      	movs	r3, #220	; 0xdc
   27170:	18fb      	adds	r3, r7, r3
   27172:	2200      	movs	r2, #0
   27174:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   27176:	23db      	movs	r3, #219	; 0xdb
   27178:	18fb      	adds	r3, r7, r3
   2717a:	2264      	movs	r2, #100	; 0x64
   2717c:	18ba      	adds	r2, r7, r2
   2717e:	7812      	ldrb	r2, [r2, #0]
   27180:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   27182:	23dc      	movs	r3, #220	; 0xdc
   27184:	18fb      	adds	r3, r7, r3
   27186:	2264      	movs	r2, #100	; 0x64
   27188:	18ba      	adds	r2, r7, r2
   2718a:	8892      	ldrh	r2, [r2, #4]
   2718c:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   2718e:	2364      	movs	r3, #100	; 0x64
   27190:	18fb      	adds	r3, r7, r3
   27192:	2202      	movs	r2, #2
   27194:	5e9a      	ldrsh	r2, [r3, r2]
   27196:	236e      	movs	r3, #110	; 0x6e
   27198:	18fb      	adds	r3, r7, r3
   2719a:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   2719c:	23db      	movs	r3, #219	; 0xdb
   2719e:	18fb      	adds	r3, r7, r3
   271a0:	781b      	ldrb	r3, [r3, #0]
   271a2:	b25b      	sxtb	r3, r3
   271a4:	4a27      	ldr	r2, [pc, #156]	; (27244 <m2m_ip_cb+0x540>)
   271a6:	011b      	lsls	r3, r3, #4
   271a8:	18d3      	adds	r3, r2, r3
   271aa:	3306      	adds	r3, #6
   271ac:	881b      	ldrh	r3, [r3, #0]
   271ae:	b29b      	uxth	r3, r3
   271b0:	22dc      	movs	r2, #220	; 0xdc
   271b2:	18ba      	adds	r2, r7, r2
   271b4:	8812      	ldrh	r2, [r2, #0]
   271b6:	429a      	cmp	r2, r3
   271b8:	d13c      	bne.n	27234 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   271ba:	4b24      	ldr	r3, [pc, #144]	; (2724c <m2m_ip_cb+0x548>)
   271bc:	681b      	ldr	r3, [r3, #0]
   271be:	2b00      	cmp	r3, #0
   271c0:	d038      	beq.n	27234 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   271c2:	4b22      	ldr	r3, [pc, #136]	; (2724c <m2m_ip_cb+0x548>)
   271c4:	681b      	ldr	r3, [r3, #0]
   271c6:	226e      	movs	r2, #110	; 0x6e
   271c8:	18bc      	adds	r4, r7, r2
   271ca:	22de      	movs	r2, #222	; 0xde
   271cc:	18ba      	adds	r2, r7, r2
   271ce:	7811      	ldrb	r1, [r2, #0]
   271d0:	22db      	movs	r2, #219	; 0xdb
   271d2:	18ba      	adds	r2, r7, r2
   271d4:	2000      	movs	r0, #0
   271d6:	5610      	ldrsb	r0, [r2, r0]
   271d8:	0022      	movs	r2, r4
   271da:	4798      	blx	r3
	{
   271dc:	e02a      	b.n	27234 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   271de:	1dfb      	adds	r3, r7, #7
   271e0:	781b      	ldrb	r3, [r3, #0]
   271e2:	2b52      	cmp	r3, #82	; 0x52
   271e4:	d127      	bne.n	27236 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   271e6:	2350      	movs	r3, #80	; 0x50
   271e8:	18f9      	adds	r1, r7, r3
   271ea:	6838      	ldr	r0, [r7, #0]
   271ec:	2301      	movs	r3, #1
   271ee:	2214      	movs	r2, #20
   271f0:	4c13      	ldr	r4, [pc, #76]	; (27240 <m2m_ip_cb+0x53c>)
   271f2:	47a0      	blx	r4
   271f4:	1e03      	subs	r3, r0, #0
   271f6:	d11e      	bne.n	27236 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   271f8:	2350      	movs	r3, #80	; 0x50
   271fa:	18fb      	adds	r3, r7, r3
   271fc:	685b      	ldr	r3, [r3, #4]
   271fe:	001a      	movs	r2, r3
   27200:	4b13      	ldr	r3, [pc, #76]	; (27250 <m2m_ip_cb+0x54c>)
   27202:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   27204:	4b12      	ldr	r3, [pc, #72]	; (27250 <m2m_ip_cb+0x54c>)
   27206:	681b      	ldr	r3, [r3, #0]
   27208:	2b00      	cmp	r3, #0
   2720a:	d014      	beq.n	27236 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   2720c:	4b10      	ldr	r3, [pc, #64]	; (27250 <m2m_ip_cb+0x54c>)
   2720e:	681c      	ldr	r4, [r3, #0]
   27210:	2350      	movs	r3, #80	; 0x50
   27212:	18fb      	adds	r3, r7, r3
   27214:	6818      	ldr	r0, [r3, #0]
   27216:	2350      	movs	r3, #80	; 0x50
   27218:	18fb      	adds	r3, r7, r3
   2721a:	6899      	ldr	r1, [r3, #8]
   2721c:	2350      	movs	r3, #80	; 0x50
   2721e:	18fb      	adds	r3, r7, r3
   27220:	7c1b      	ldrb	r3, [r3, #16]
   27222:	001a      	movs	r2, r3
   27224:	47a0      	blx	r4
}
   27226:	e006      	b.n	27236 <m2m_ip_cb+0x532>
	{
   27228:	46c0      	nop			; (mov r8, r8)
   2722a:	e004      	b.n	27236 <m2m_ip_cb+0x532>
	{
   2722c:	46c0      	nop			; (mov r8, r8)
   2722e:	e002      	b.n	27236 <m2m_ip_cb+0x532>
	{
   27230:	46c0      	nop			; (mov r8, r8)
   27232:	e000      	b.n	27236 <m2m_ip_cb+0x532>
	{
   27234:	46c0      	nop			; (mov r8, r8)
}
   27236:	46c0      	nop			; (mov r8, r8)
   27238:	46bd      	mov	sp, r7
   2723a:	b039      	add	sp, #228	; 0xe4
   2723c:	bd90      	pop	{r4, r7, pc}
   2723e:	46c0      	nop			; (mov r8, r8)
   27240:	00023501 	.word	0x00023501
   27244:	20005730 	.word	0x20005730
   27248:	00026b09 	.word	0x00026b09
   2724c:	200057e0 	.word	0x200057e0
   27250:	200057e4 	.word	0x200057e4

00027254 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   27254:	b580      	push	{r7, lr}
   27256:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   27258:	4b0c      	ldr	r3, [pc, #48]	; (2728c <socketInit+0x38>)
   2725a:	781b      	ldrb	r3, [r3, #0]
   2725c:	b2db      	uxtb	r3, r3
   2725e:	2b00      	cmp	r3, #0
   27260:	d110      	bne.n	27284 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   27262:	4b0b      	ldr	r3, [pc, #44]	; (27290 <socketInit+0x3c>)
   27264:	22b0      	movs	r2, #176	; 0xb0
   27266:	2100      	movs	r1, #0
   27268:	0018      	movs	r0, r3
   2726a:	4b0a      	ldr	r3, [pc, #40]	; (27294 <socketInit+0x40>)
   2726c:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   2726e:	4b0a      	ldr	r3, [pc, #40]	; (27298 <socketInit+0x44>)
   27270:	0019      	movs	r1, r3
   27272:	2002      	movs	r0, #2
   27274:	4b09      	ldr	r3, [pc, #36]	; (2729c <socketInit+0x48>)
   27276:	4798      	blx	r3
		gbSocketInit	= 1;
   27278:	4b04      	ldr	r3, [pc, #16]	; (2728c <socketInit+0x38>)
   2727a:	2201      	movs	r2, #1
   2727c:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   2727e:	4b08      	ldr	r3, [pc, #32]	; (272a0 <socketInit+0x4c>)
   27280:	2200      	movs	r2, #0
   27282:	801a      	strh	r2, [r3, #0]
	}
}
   27284:	46c0      	nop			; (mov r8, r8)
   27286:	46bd      	mov	sp, r7
   27288:	bd80      	pop	{r7, pc}
   2728a:	46c0      	nop			; (mov r8, r8)
   2728c:	20003ed0 	.word	0x20003ed0
   27290:	20005730 	.word	0x20005730
   27294:	00022985 	.word	0x00022985
   27298:	00026d05 	.word	0x00026d05
   2729c:	00023681 	.word	0x00023681
   272a0:	20003ece 	.word	0x20003ece

000272a4 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   272a4:	b580      	push	{r7, lr}
   272a6:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   272a8:	4b0a      	ldr	r3, [pc, #40]	; (272d4 <socketDeinit+0x30>)
   272aa:	22b0      	movs	r2, #176	; 0xb0
   272ac:	2100      	movs	r1, #0
   272ae:	0018      	movs	r0, r3
   272b0:	4b09      	ldr	r3, [pc, #36]	; (272d8 <socketDeinit+0x34>)
   272b2:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   272b4:	2100      	movs	r1, #0
   272b6:	2002      	movs	r0, #2
   272b8:	4b08      	ldr	r3, [pc, #32]	; (272dc <socketDeinit+0x38>)
   272ba:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   272bc:	4b08      	ldr	r3, [pc, #32]	; (272e0 <socketDeinit+0x3c>)
   272be:	2200      	movs	r2, #0
   272c0:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   272c2:	4b08      	ldr	r3, [pc, #32]	; (272e4 <socketDeinit+0x40>)
   272c4:	2200      	movs	r2, #0
   272c6:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   272c8:	4b07      	ldr	r3, [pc, #28]	; (272e8 <socketDeinit+0x44>)
   272ca:	2200      	movs	r2, #0
   272cc:	701a      	strb	r2, [r3, #0]
}
   272ce:	46c0      	nop			; (mov r8, r8)
   272d0:	46bd      	mov	sp, r7
   272d2:	bd80      	pop	{r7, pc}
   272d4:	20005730 	.word	0x20005730
   272d8:	00022985 	.word	0x00022985
   272dc:	00023681 	.word	0x00023681
   272e0:	200057e0 	.word	0x200057e0
   272e4:	200057e8 	.word	0x200057e8
   272e8:	20003ed0 	.word	0x20003ed0

000272ec <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   272ec:	b580      	push	{r7, lr}
   272ee:	b082      	sub	sp, #8
   272f0:	af00      	add	r7, sp, #0
   272f2:	6078      	str	r0, [r7, #4]
   272f4:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   272f6:	4b05      	ldr	r3, [pc, #20]	; (2730c <registerSocketCallback+0x20>)
   272f8:	687a      	ldr	r2, [r7, #4]
   272fa:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   272fc:	4b04      	ldr	r3, [pc, #16]	; (27310 <registerSocketCallback+0x24>)
   272fe:	683a      	ldr	r2, [r7, #0]
   27300:	601a      	str	r2, [r3, #0]
}
   27302:	46c0      	nop			; (mov r8, r8)
   27304:	46bd      	mov	sp, r7
   27306:	b002      	add	sp, #8
   27308:	bd80      	pop	{r7, pc}
   2730a:	46c0      	nop			; (mov r8, r8)
   2730c:	200057e0 	.word	0x200057e0
   27310:	200057e8 	.word	0x200057e8

00027314 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   27314:	b590      	push	{r4, r7, lr}
   27316:	b08d      	sub	sp, #52	; 0x34
   27318:	af04      	add	r7, sp, #16
   2731a:	0004      	movs	r4, r0
   2731c:	0008      	movs	r0, r1
   2731e:	0011      	movs	r1, r2
   27320:	1dbb      	adds	r3, r7, #6
   27322:	1c22      	adds	r2, r4, #0
   27324:	801a      	strh	r2, [r3, #0]
   27326:	1d7b      	adds	r3, r7, #5
   27328:	1c02      	adds	r2, r0, #0
   2732a:	701a      	strb	r2, [r3, #0]
   2732c:	1d3b      	adds	r3, r7, #4
   2732e:	1c0a      	adds	r2, r1, #0
   27330:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   27332:	231f      	movs	r3, #31
   27334:	18fb      	adds	r3, r7, r3
   27336:	22ff      	movs	r2, #255	; 0xff
   27338:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   2733a:	1dbb      	adds	r3, r7, #6
   2733c:	881b      	ldrh	r3, [r3, #0]
   2733e:	2b02      	cmp	r3, #2
   27340:	d000      	beq.n	27344 <socket+0x30>
   27342:	e0ce      	b.n	274e2 <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   27344:	1d7b      	adds	r3, r7, #5
   27346:	781b      	ldrb	r3, [r3, #0]
   27348:	2b01      	cmp	r3, #1
   2734a:	d135      	bne.n	273b8 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   2734c:	231e      	movs	r3, #30
   2734e:	18fb      	adds	r3, r7, r3
   27350:	2200      	movs	r2, #0
   27352:	701a      	strb	r2, [r3, #0]
   27354:	e02a      	b.n	273ac <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   27356:	2317      	movs	r3, #23
   27358:	18fb      	adds	r3, r7, r3
   2735a:	4a66      	ldr	r2, [pc, #408]	; (274f4 <socket+0x1e0>)
   2735c:	7812      	ldrb	r2, [r2, #0]
   2735e:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   27360:	4b64      	ldr	r3, [pc, #400]	; (274f4 <socket+0x1e0>)
   27362:	781b      	ldrb	r3, [r3, #0]
   27364:	b2db      	uxtb	r3, r3
   27366:	011a      	lsls	r2, r3, #4
   27368:	4b63      	ldr	r3, [pc, #396]	; (274f8 <socket+0x1e4>)
   2736a:	18d3      	adds	r3, r2, r3
   2736c:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   2736e:	4b61      	ldr	r3, [pc, #388]	; (274f4 <socket+0x1e0>)
   27370:	781b      	ldrb	r3, [r3, #0]
   27372:	b2db      	uxtb	r3, r3
   27374:	1c5a      	adds	r2, r3, #1
   27376:	4b61      	ldr	r3, [pc, #388]	; (274fc <socket+0x1e8>)
   27378:	2107      	movs	r1, #7
   2737a:	0010      	movs	r0, r2
   2737c:	4798      	blx	r3
   2737e:	000b      	movs	r3, r1
   27380:	b2da      	uxtb	r2, r3
   27382:	4b5c      	ldr	r3, [pc, #368]	; (274f4 <socket+0x1e0>)
   27384:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   27386:	69bb      	ldr	r3, [r7, #24]
   27388:	7a9b      	ldrb	r3, [r3, #10]
   2738a:	b2db      	uxtb	r3, r3
   2738c:	2b00      	cmp	r3, #0
   2738e:	d106      	bne.n	2739e <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   27390:	231f      	movs	r3, #31
   27392:	18fb      	adds	r3, r7, r3
   27394:	2217      	movs	r2, #23
   27396:	18ba      	adds	r2, r7, r2
   27398:	7812      	ldrb	r2, [r2, #0]
   2739a:	701a      	strb	r2, [r3, #0]
					break;
   2739c:	e04c      	b.n	27438 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   2739e:	231e      	movs	r3, #30
   273a0:	18fb      	adds	r3, r7, r3
   273a2:	781a      	ldrb	r2, [r3, #0]
   273a4:	231e      	movs	r3, #30
   273a6:	18fb      	adds	r3, r7, r3
   273a8:	3201      	adds	r2, #1
   273aa:	701a      	strb	r2, [r3, #0]
   273ac:	231e      	movs	r3, #30
   273ae:	18fb      	adds	r3, r7, r3
   273b0:	781b      	ldrb	r3, [r3, #0]
   273b2:	2b06      	cmp	r3, #6
   273b4:	d9cf      	bls.n	27356 <socket+0x42>
   273b6:	e03f      	b.n	27438 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   273b8:	1d7b      	adds	r3, r7, #5
   273ba:	781b      	ldrb	r3, [r3, #0]
   273bc:	2b02      	cmp	r3, #2
   273be:	d13b      	bne.n	27438 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   273c0:	4b4f      	ldr	r3, [pc, #316]	; (27500 <socket+0x1ec>)
   273c2:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   273c4:	231e      	movs	r3, #30
   273c6:	18fb      	adds	r3, r7, r3
   273c8:	2200      	movs	r2, #0
   273ca:	701a      	strb	r2, [r3, #0]
   273cc:	e02f      	b.n	2742e <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   273ce:	2317      	movs	r3, #23
   273d0:	18fb      	adds	r3, r7, r3
   273d2:	4a4c      	ldr	r2, [pc, #304]	; (27504 <socket+0x1f0>)
   273d4:	7812      	ldrb	r2, [r2, #0]
   273d6:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   273d8:	4b4a      	ldr	r3, [pc, #296]	; (27504 <socket+0x1f0>)
   273da:	781b      	ldrb	r3, [r3, #0]
   273dc:	b2db      	uxtb	r3, r3
   273de:	011b      	lsls	r3, r3, #4
   273e0:	693a      	ldr	r2, [r7, #16]
   273e2:	18d3      	adds	r3, r2, r3
   273e4:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   273e6:	4b47      	ldr	r3, [pc, #284]	; (27504 <socket+0x1f0>)
   273e8:	781b      	ldrb	r3, [r3, #0]
   273ea:	b2db      	uxtb	r3, r3
   273ec:	3301      	adds	r3, #1
   273ee:	4a46      	ldr	r2, [pc, #280]	; (27508 <socket+0x1f4>)
   273f0:	4013      	ands	r3, r2
   273f2:	d504      	bpl.n	273fe <socket+0xea>
   273f4:	3b01      	subs	r3, #1
   273f6:	2204      	movs	r2, #4
   273f8:	4252      	negs	r2, r2
   273fa:	4313      	orrs	r3, r2
   273fc:	3301      	adds	r3, #1
   273fe:	b2da      	uxtb	r2, r3
   27400:	4b40      	ldr	r3, [pc, #256]	; (27504 <socket+0x1f0>)
   27402:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   27404:	69bb      	ldr	r3, [r7, #24]
   27406:	7a9b      	ldrb	r3, [r3, #10]
   27408:	b2db      	uxtb	r3, r3
   2740a:	2b00      	cmp	r3, #0
   2740c:	d108      	bne.n	27420 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   2740e:	2317      	movs	r3, #23
   27410:	18fb      	adds	r3, r7, r3
   27412:	781b      	ldrb	r3, [r3, #0]
   27414:	3307      	adds	r3, #7
   27416:	b2da      	uxtb	r2, r3
   27418:	231f      	movs	r3, #31
   2741a:	18fb      	adds	r3, r7, r3
   2741c:	701a      	strb	r2, [r3, #0]
					break;
   2741e:	e00b      	b.n	27438 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   27420:	231e      	movs	r3, #30
   27422:	18fb      	adds	r3, r7, r3
   27424:	781a      	ldrb	r2, [r3, #0]
   27426:	231e      	movs	r3, #30
   27428:	18fb      	adds	r3, r7, r3
   2742a:	3201      	adds	r2, #1
   2742c:	701a      	strb	r2, [r3, #0]
   2742e:	231e      	movs	r3, #30
   27430:	18fb      	adds	r3, r7, r3
   27432:	781b      	ldrb	r3, [r3, #0]
   27434:	2b03      	cmp	r3, #3
   27436:	d9ca      	bls.n	273ce <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   27438:	231f      	movs	r3, #31
   2743a:	18fb      	adds	r3, r7, r3
   2743c:	781b      	ldrb	r3, [r3, #0]
   2743e:	2b7f      	cmp	r3, #127	; 0x7f
   27440:	d84f      	bhi.n	274e2 <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   27442:	69bb      	ldr	r3, [r7, #24]
   27444:	2210      	movs	r2, #16
   27446:	2100      	movs	r1, #0
   27448:	0018      	movs	r0, r3
   2744a:	4b30      	ldr	r3, [pc, #192]	; (2750c <socket+0x1f8>)
   2744c:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   2744e:	69bb      	ldr	r3, [r7, #24]
   27450:	2201      	movs	r2, #1
   27452:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   27454:	4b2e      	ldr	r3, [pc, #184]	; (27510 <socket+0x1fc>)
   27456:	881b      	ldrh	r3, [r3, #0]
   27458:	b29b      	uxth	r3, r3
   2745a:	3301      	adds	r3, #1
   2745c:	b29a      	uxth	r2, r3
   2745e:	4b2c      	ldr	r3, [pc, #176]	; (27510 <socket+0x1fc>)
   27460:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   27462:	4b2b      	ldr	r3, [pc, #172]	; (27510 <socket+0x1fc>)
   27464:	881b      	ldrh	r3, [r3, #0]
   27466:	b29b      	uxth	r3, r3
   27468:	2b00      	cmp	r3, #0
   2746a:	d106      	bne.n	2747a <socket+0x166>
				++gu16SessionID;
   2746c:	4b28      	ldr	r3, [pc, #160]	; (27510 <socket+0x1fc>)
   2746e:	881b      	ldrh	r3, [r3, #0]
   27470:	b29b      	uxth	r3, r3
   27472:	3301      	adds	r3, #1
   27474:	b29a      	uxth	r2, r3
   27476:	4b26      	ldr	r3, [pc, #152]	; (27510 <socket+0x1fc>)
   27478:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   2747a:	4b25      	ldr	r3, [pc, #148]	; (27510 <socket+0x1fc>)
   2747c:	881b      	ldrh	r3, [r3, #0]
   2747e:	b29a      	uxth	r2, r3
   27480:	69bb      	ldr	r3, [r7, #24]
   27482:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   27484:	4b23      	ldr	r3, [pc, #140]	; (27514 <socket+0x200>)
   27486:	0018      	movs	r0, r3
   27488:	4b23      	ldr	r3, [pc, #140]	; (27518 <socket+0x204>)
   2748a:	4798      	blx	r3
   2748c:	231f      	movs	r3, #31
   2748e:	18fb      	adds	r3, r7, r3
   27490:	2100      	movs	r1, #0
   27492:	5659      	ldrsb	r1, [r3, r1]
   27494:	4b1e      	ldr	r3, [pc, #120]	; (27510 <socket+0x1fc>)
   27496:	881b      	ldrh	r3, [r3, #0]
   27498:	b29b      	uxth	r3, r3
   2749a:	001a      	movs	r2, r3
   2749c:	4b1f      	ldr	r3, [pc, #124]	; (2751c <socket+0x208>)
   2749e:	0018      	movs	r0, r3
   274a0:	4b1d      	ldr	r3, [pc, #116]	; (27518 <socket+0x204>)
   274a2:	4798      	blx	r3
   274a4:	4b1e      	ldr	r3, [pc, #120]	; (27520 <socket+0x20c>)
   274a6:	0018      	movs	r0, r3
   274a8:	4b1b      	ldr	r3, [pc, #108]	; (27518 <socket+0x204>)
   274aa:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   274ac:	1d3b      	adds	r3, r7, #4
   274ae:	781b      	ldrb	r3, [r3, #0]
   274b0:	2201      	movs	r2, #1
   274b2:	4013      	ands	r3, r2
   274b4:	d015      	beq.n	274e2 <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   274b6:	230c      	movs	r3, #12
   274b8:	18fb      	adds	r3, r7, r3
   274ba:	221f      	movs	r2, #31
   274bc:	18ba      	adds	r2, r7, r2
   274be:	7812      	ldrb	r2, [r2, #0]
   274c0:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   274c2:	69bb      	ldr	r3, [r7, #24]
   274c4:	2221      	movs	r2, #33	; 0x21
   274c6:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   274c8:	230c      	movs	r3, #12
   274ca:	18fa      	adds	r2, r7, r3
   274cc:	2300      	movs	r3, #0
   274ce:	9302      	str	r3, [sp, #8]
   274d0:	2300      	movs	r3, #0
   274d2:	9301      	str	r3, [sp, #4]
   274d4:	2300      	movs	r3, #0
   274d6:	9300      	str	r3, [sp, #0]
   274d8:	2304      	movs	r3, #4
   274da:	2150      	movs	r1, #80	; 0x50
   274dc:	2002      	movs	r0, #2
   274de:	4c11      	ldr	r4, [pc, #68]	; (27524 <socket+0x210>)
   274e0:	47a0      	blx	r4
			}
		}
	}
	return sock;
   274e2:	231f      	movs	r3, #31
   274e4:	18fb      	adds	r3, r7, r3
   274e6:	781b      	ldrb	r3, [r3, #0]
   274e8:	b25b      	sxtb	r3, r3
}
   274ea:	0018      	movs	r0, r3
   274ec:	46bd      	mov	sp, r7
   274ee:	b009      	add	sp, #36	; 0x24
   274f0:	bd90      	pop	{r4, r7, pc}
   274f2:	46c0      	nop			; (mov r8, r8)
   274f4:	20003ed1 	.word	0x20003ed1
   274f8:	20005730 	.word	0x20005730
   274fc:	00034a39 	.word	0x00034a39
   27500:	200057a0 	.word	0x200057a0
   27504:	20003ed2 	.word	0x20003ed2
   27508:	80000003 	.word	0x80000003
   2750c:	00022985 	.word	0x00022985
   27510:	20003ece 	.word	0x20003ece
   27514:	0003b950 	.word	0x0003b950
   27518:	00020039 	.word	0x00020039
   2751c:	0003b974 	.word	0x0003b974
   27520:	0003b970 	.word	0x0003b970
   27524:	00022be5 	.word	0x00022be5

00027528 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   27528:	b5b0      	push	{r4, r5, r7, lr}
   2752a:	b08a      	sub	sp, #40	; 0x28
   2752c:	af04      	add	r7, sp, #16
   2752e:	6039      	str	r1, [r7, #0]
   27530:	0011      	movs	r1, r2
   27532:	1dfb      	adds	r3, r7, #7
   27534:	1c02      	adds	r2, r0, #0
   27536:	701a      	strb	r2, [r3, #0]
   27538:	1dbb      	adds	r3, r7, #6
   2753a:	1c0a      	adds	r2, r1, #0
   2753c:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   2753e:	2317      	movs	r3, #23
   27540:	18fb      	adds	r3, r7, r3
   27542:	22fa      	movs	r2, #250	; 0xfa
   27544:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   27546:	1dfb      	adds	r3, r7, #7
   27548:	781b      	ldrb	r3, [r3, #0]
   2754a:	2b7f      	cmp	r3, #127	; 0x7f
   2754c:	d867      	bhi.n	2761e <connect+0xf6>
   2754e:	683b      	ldr	r3, [r7, #0]
   27550:	2b00      	cmp	r3, #0
   27552:	d064      	beq.n	2761e <connect+0xf6>
   27554:	1dfb      	adds	r3, r7, #7
   27556:	781b      	ldrb	r3, [r3, #0]
   27558:	b25b      	sxtb	r3, r3
   2755a:	4a35      	ldr	r2, [pc, #212]	; (27630 <connect+0x108>)
   2755c:	011b      	lsls	r3, r3, #4
   2755e:	18d3      	adds	r3, r2, r3
   27560:	330a      	adds	r3, #10
   27562:	781b      	ldrb	r3, [r3, #0]
   27564:	b2db      	uxtb	r3, r3
   27566:	2b01      	cmp	r3, #1
   27568:	d159      	bne.n	2761e <connect+0xf6>
   2756a:	1dbb      	adds	r3, r7, #6
   2756c:	781b      	ldrb	r3, [r3, #0]
   2756e:	2b00      	cmp	r3, #0
   27570:	d055      	beq.n	2761e <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   27572:	2316      	movs	r3, #22
   27574:	18fb      	adds	r3, r7, r3
   27576:	2244      	movs	r2, #68	; 0x44
   27578:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   2757a:	1dfb      	adds	r3, r7, #7
   2757c:	781b      	ldrb	r3, [r3, #0]
   2757e:	b25b      	sxtb	r3, r3
   27580:	4a2b      	ldr	r2, [pc, #172]	; (27630 <connect+0x108>)
   27582:	011b      	lsls	r3, r3, #4
   27584:	18d3      	adds	r3, r2, r3
   27586:	330b      	adds	r3, #11
   27588:	781b      	ldrb	r3, [r3, #0]
   2758a:	b2db      	uxtb	r3, r3
   2758c:	001a      	movs	r2, r3
   2758e:	2301      	movs	r3, #1
   27590:	4013      	ands	r3, r2
   27592:	d00f      	beq.n	275b4 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   27594:	2316      	movs	r3, #22
   27596:	18fb      	adds	r3, r7, r3
   27598:	224b      	movs	r2, #75	; 0x4b
   2759a:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   2759c:	1dfb      	adds	r3, r7, #7
   2759e:	781b      	ldrb	r3, [r3, #0]
   275a0:	b25b      	sxtb	r3, r3
   275a2:	4a23      	ldr	r2, [pc, #140]	; (27630 <connect+0x108>)
   275a4:	011b      	lsls	r3, r3, #4
   275a6:	18d3      	adds	r3, r2, r3
   275a8:	330b      	adds	r3, #11
   275aa:	781b      	ldrb	r3, [r3, #0]
   275ac:	b2da      	uxtb	r2, r3
   275ae:	2308      	movs	r3, #8
   275b0:	18fb      	adds	r3, r7, r3
   275b2:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   275b4:	2308      	movs	r3, #8
   275b6:	18fb      	adds	r3, r7, r3
   275b8:	1dfa      	adds	r2, r7, #7
   275ba:	7812      	ldrb	r2, [r2, #0]
   275bc:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   275be:	6839      	ldr	r1, [r7, #0]
   275c0:	2308      	movs	r3, #8
   275c2:	18fb      	adds	r3, r7, r3
   275c4:	2208      	movs	r2, #8
   275c6:	0018      	movs	r0, r3
   275c8:	4b1a      	ldr	r3, [pc, #104]	; (27634 <connect+0x10c>)
   275ca:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   275cc:	1dfb      	adds	r3, r7, #7
   275ce:	781b      	ldrb	r3, [r3, #0]
   275d0:	b25b      	sxtb	r3, r3
   275d2:	4a17      	ldr	r2, [pc, #92]	; (27630 <connect+0x108>)
   275d4:	011b      	lsls	r3, r3, #4
   275d6:	18d3      	adds	r3, r2, r3
   275d8:	3306      	adds	r3, #6
   275da:	881b      	ldrh	r3, [r3, #0]
   275dc:	b29a      	uxth	r2, r3
   275de:	2308      	movs	r3, #8
   275e0:	18fb      	adds	r3, r7, r3
   275e2:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   275e4:	2317      	movs	r3, #23
   275e6:	18fc      	adds	r4, r7, r3
   275e8:	2308      	movs	r3, #8
   275ea:	18fa      	adds	r2, r7, r3
   275ec:	2316      	movs	r3, #22
   275ee:	18fb      	adds	r3, r7, r3
   275f0:	7819      	ldrb	r1, [r3, #0]
   275f2:	2300      	movs	r3, #0
   275f4:	9302      	str	r3, [sp, #8]
   275f6:	2300      	movs	r3, #0
   275f8:	9301      	str	r3, [sp, #4]
   275fa:	2300      	movs	r3, #0
   275fc:	9300      	str	r3, [sp, #0]
   275fe:	230c      	movs	r3, #12
   27600:	2002      	movs	r0, #2
   27602:	4d0d      	ldr	r5, [pc, #52]	; (27638 <connect+0x110>)
   27604:	47a8      	blx	r5
   27606:	0003      	movs	r3, r0
   27608:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   2760a:	2317      	movs	r3, #23
   2760c:	18fb      	adds	r3, r7, r3
   2760e:	781b      	ldrb	r3, [r3, #0]
   27610:	b25b      	sxtb	r3, r3
   27612:	2b00      	cmp	r3, #0
   27614:	d003      	beq.n	2761e <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   27616:	2317      	movs	r3, #23
   27618:	18fb      	adds	r3, r7, r3
   2761a:	22f7      	movs	r2, #247	; 0xf7
   2761c:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   2761e:	2317      	movs	r3, #23
   27620:	18fb      	adds	r3, r7, r3
   27622:	781b      	ldrb	r3, [r3, #0]
   27624:	b25b      	sxtb	r3, r3
}
   27626:	0018      	movs	r0, r3
   27628:	46bd      	mov	sp, r7
   2762a:	b006      	add	sp, #24
   2762c:	bdb0      	pop	{r4, r5, r7, pc}
   2762e:	46c0      	nop			; (mov r8, r8)
   27630:	20005730 	.word	0x20005730
   27634:	00022949 	.word	0x00022949
   27638:	00022be5 	.word	0x00022be5

0002763c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   2763c:	b590      	push	{r4, r7, lr}
   2763e:	b08f      	sub	sp, #60	; 0x3c
   27640:	af04      	add	r7, sp, #16
   27642:	0004      	movs	r4, r0
   27644:	60b9      	str	r1, [r7, #8]
   27646:	0010      	movs	r0, r2
   27648:	0019      	movs	r1, r3
   2764a:	230f      	movs	r3, #15
   2764c:	18fb      	adds	r3, r7, r3
   2764e:	1c22      	adds	r2, r4, #0
   27650:	701a      	strb	r2, [r3, #0]
   27652:	230c      	movs	r3, #12
   27654:	18fb      	adds	r3, r7, r3
   27656:	1c02      	adds	r2, r0, #0
   27658:	801a      	strh	r2, [r3, #0]
   2765a:	1dbb      	adds	r3, r7, #6
   2765c:	1c0a      	adds	r2, r1, #0
   2765e:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   27660:	2326      	movs	r3, #38	; 0x26
   27662:	18fb      	adds	r3, r7, r3
   27664:	2206      	movs	r2, #6
   27666:	4252      	negs	r2, r2
   27668:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   2766a:	230f      	movs	r3, #15
   2766c:	18fb      	adds	r3, r7, r3
   2766e:	781b      	ldrb	r3, [r3, #0]
   27670:	2b7f      	cmp	r3, #127	; 0x7f
   27672:	d900      	bls.n	27676 <send+0x3a>
   27674:	e087      	b.n	27786 <send+0x14a>
   27676:	68bb      	ldr	r3, [r7, #8]
   27678:	2b00      	cmp	r3, #0
   2767a:	d100      	bne.n	2767e <send+0x42>
   2767c:	e083      	b.n	27786 <send+0x14a>
   2767e:	230c      	movs	r3, #12
   27680:	18fb      	adds	r3, r7, r3
   27682:	881a      	ldrh	r2, [r3, #0]
   27684:	23af      	movs	r3, #175	; 0xaf
   27686:	00db      	lsls	r3, r3, #3
   27688:	429a      	cmp	r2, r3
   2768a:	d900      	bls.n	2768e <send+0x52>
   2768c:	e07b      	b.n	27786 <send+0x14a>
   2768e:	230f      	movs	r3, #15
   27690:	18fb      	adds	r3, r7, r3
   27692:	781b      	ldrb	r3, [r3, #0]
   27694:	b25b      	sxtb	r3, r3
   27696:	4a40      	ldr	r2, [pc, #256]	; (27798 <send+0x15c>)
   27698:	011b      	lsls	r3, r3, #4
   2769a:	18d3      	adds	r3, r2, r3
   2769c:	330a      	adds	r3, #10
   2769e:	781b      	ldrb	r3, [r3, #0]
   276a0:	b2db      	uxtb	r3, r3
   276a2:	2b01      	cmp	r3, #1
   276a4:	d16f      	bne.n	27786 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   276a6:	2323      	movs	r3, #35	; 0x23
   276a8:	18fb      	adds	r3, r7, r3
   276aa:	2245      	movs	r2, #69	; 0x45
   276ac:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   276ae:	2324      	movs	r3, #36	; 0x24
   276b0:	18fb      	adds	r3, r7, r3
   276b2:	2250      	movs	r2, #80	; 0x50
   276b4:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   276b6:	2310      	movs	r3, #16
   276b8:	18fb      	adds	r3, r7, r3
   276ba:	220f      	movs	r2, #15
   276bc:	18ba      	adds	r2, r7, r2
   276be:	7812      	ldrb	r2, [r2, #0]
   276c0:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   276c2:	2310      	movs	r3, #16
   276c4:	18fb      	adds	r3, r7, r3
   276c6:	220c      	movs	r2, #12
   276c8:	18ba      	adds	r2, r7, r2
   276ca:	8812      	ldrh	r2, [r2, #0]
   276cc:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   276ce:	230f      	movs	r3, #15
   276d0:	18fb      	adds	r3, r7, r3
   276d2:	781b      	ldrb	r3, [r3, #0]
   276d4:	b25b      	sxtb	r3, r3
   276d6:	4a30      	ldr	r2, [pc, #192]	; (27798 <send+0x15c>)
   276d8:	011b      	lsls	r3, r3, #4
   276da:	18d3      	adds	r3, r2, r3
   276dc:	3306      	adds	r3, #6
   276de:	881b      	ldrh	r3, [r3, #0]
   276e0:	b29a      	uxth	r2, r3
   276e2:	2310      	movs	r3, #16
   276e4:	18fb      	adds	r3, r7, r3
   276e6:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   276e8:	230f      	movs	r3, #15
   276ea:	18fb      	adds	r3, r7, r3
   276ec:	781b      	ldrb	r3, [r3, #0]
   276ee:	b25b      	sxtb	r3, r3
   276f0:	2b06      	cmp	r3, #6
   276f2:	dd03      	ble.n	276fc <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   276f4:	2324      	movs	r3, #36	; 0x24
   276f6:	18fb      	adds	r3, r7, r3
   276f8:	2244      	movs	r2, #68	; 0x44
   276fa:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   276fc:	230f      	movs	r3, #15
   276fe:	18fb      	adds	r3, r7, r3
   27700:	781b      	ldrb	r3, [r3, #0]
   27702:	b25b      	sxtb	r3, r3
   27704:	4a24      	ldr	r2, [pc, #144]	; (27798 <send+0x15c>)
   27706:	011b      	lsls	r3, r3, #4
   27708:	18d3      	adds	r3, r2, r3
   2770a:	330b      	adds	r3, #11
   2770c:	781b      	ldrb	r3, [r3, #0]
   2770e:	b2db      	uxtb	r3, r3
   27710:	001a      	movs	r2, r3
   27712:	2301      	movs	r3, #1
   27714:	4013      	ands	r3, r2
   27716:	d00f      	beq.n	27738 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   27718:	2323      	movs	r3, #35	; 0x23
   2771a:	18fb      	adds	r3, r7, r3
   2771c:	224c      	movs	r2, #76	; 0x4c
   2771e:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   27720:	230f      	movs	r3, #15
   27722:	18fb      	adds	r3, r7, r3
   27724:	2200      	movs	r2, #0
   27726:	569a      	ldrsb	r2, [r3, r2]
   27728:	2324      	movs	r3, #36	; 0x24
   2772a:	18fb      	adds	r3, r7, r3
   2772c:	491a      	ldr	r1, [pc, #104]	; (27798 <send+0x15c>)
   2772e:	0112      	lsls	r2, r2, #4
   27730:	188a      	adds	r2, r1, r2
   27732:	3208      	adds	r2, #8
   27734:	8812      	ldrh	r2, [r2, #0]
   27736:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   27738:	2323      	movs	r3, #35	; 0x23
   2773a:	18fb      	adds	r3, r7, r3
   2773c:	781b      	ldrb	r3, [r3, #0]
   2773e:	2280      	movs	r2, #128	; 0x80
   27740:	4252      	negs	r2, r2
   27742:	4313      	orrs	r3, r2
   27744:	b2d9      	uxtb	r1, r3
   27746:	2310      	movs	r3, #16
   27748:	18fa      	adds	r2, r7, r3
   2774a:	2324      	movs	r3, #36	; 0x24
   2774c:	18fb      	adds	r3, r7, r3
   2774e:	881b      	ldrh	r3, [r3, #0]
   27750:	9302      	str	r3, [sp, #8]
   27752:	230c      	movs	r3, #12
   27754:	18fb      	adds	r3, r7, r3
   27756:	881b      	ldrh	r3, [r3, #0]
   27758:	9301      	str	r3, [sp, #4]
   2775a:	68bb      	ldr	r3, [r7, #8]
   2775c:	9300      	str	r3, [sp, #0]
   2775e:	2310      	movs	r3, #16
   27760:	2002      	movs	r0, #2
   27762:	4c0e      	ldr	r4, [pc, #56]	; (2779c <send+0x160>)
   27764:	47a0      	blx	r4
   27766:	0003      	movs	r3, r0
   27768:	001a      	movs	r2, r3
   2776a:	2326      	movs	r3, #38	; 0x26
   2776c:	18fb      	adds	r3, r7, r3
   2776e:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   27770:	2326      	movs	r3, #38	; 0x26
   27772:	18fb      	adds	r3, r7, r3
   27774:	2200      	movs	r2, #0
   27776:	5e9b      	ldrsh	r3, [r3, r2]
   27778:	2b00      	cmp	r3, #0
   2777a:	d004      	beq.n	27786 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   2777c:	2326      	movs	r3, #38	; 0x26
   2777e:	18fb      	adds	r3, r7, r3
   27780:	220e      	movs	r2, #14
   27782:	4252      	negs	r2, r2
   27784:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   27786:	2326      	movs	r3, #38	; 0x26
   27788:	18fb      	adds	r3, r7, r3
   2778a:	2200      	movs	r2, #0
   2778c:	5e9b      	ldrsh	r3, [r3, r2]
}
   2778e:	0018      	movs	r0, r3
   27790:	46bd      	mov	sp, r7
   27792:	b00b      	add	sp, #44	; 0x2c
   27794:	bd90      	pop	{r4, r7, pc}
   27796:	46c0      	nop			; (mov r8, r8)
   27798:	20005730 	.word	0x20005730
   2779c:	00022be5 	.word	0x00022be5

000277a0 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   277a0:	b590      	push	{r4, r7, lr}
   277a2:	b08d      	sub	sp, #52	; 0x34
   277a4:	af04      	add	r7, sp, #16
   277a6:	60b9      	str	r1, [r7, #8]
   277a8:	0011      	movs	r1, r2
   277aa:	607b      	str	r3, [r7, #4]
   277ac:	230f      	movs	r3, #15
   277ae:	18fb      	adds	r3, r7, r3
   277b0:	1c02      	adds	r2, r0, #0
   277b2:	701a      	strb	r2, [r3, #0]
   277b4:	230c      	movs	r3, #12
   277b6:	18fb      	adds	r3, r7, r3
   277b8:	1c0a      	adds	r2, r1, #0
   277ba:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   277bc:	231e      	movs	r3, #30
   277be:	18fb      	adds	r3, r7, r3
   277c0:	2206      	movs	r2, #6
   277c2:	4252      	negs	r2, r2
   277c4:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   277c6:	230f      	movs	r3, #15
   277c8:	18fb      	adds	r3, r7, r3
   277ca:	781b      	ldrb	r3, [r3, #0]
   277cc:	2b7f      	cmp	r3, #127	; 0x7f
   277ce:	d900      	bls.n	277d2 <recv+0x32>
   277d0:	e099      	b.n	27906 <recv+0x166>
   277d2:	68bb      	ldr	r3, [r7, #8]
   277d4:	2b00      	cmp	r3, #0
   277d6:	d100      	bne.n	277da <recv+0x3a>
   277d8:	e095      	b.n	27906 <recv+0x166>
   277da:	230c      	movs	r3, #12
   277dc:	18fb      	adds	r3, r7, r3
   277de:	881b      	ldrh	r3, [r3, #0]
   277e0:	2b00      	cmp	r3, #0
   277e2:	d100      	bne.n	277e6 <recv+0x46>
   277e4:	e08f      	b.n	27906 <recv+0x166>
   277e6:	230f      	movs	r3, #15
   277e8:	18fb      	adds	r3, r7, r3
   277ea:	781b      	ldrb	r3, [r3, #0]
   277ec:	b25b      	sxtb	r3, r3
   277ee:	4a4a      	ldr	r2, [pc, #296]	; (27918 <recv+0x178>)
   277f0:	011b      	lsls	r3, r3, #4
   277f2:	18d3      	adds	r3, r2, r3
   277f4:	330a      	adds	r3, #10
   277f6:	781b      	ldrb	r3, [r3, #0]
   277f8:	b2db      	uxtb	r3, r3
   277fa:	2b01      	cmp	r3, #1
   277fc:	d000      	beq.n	27800 <recv+0x60>
   277fe:	e082      	b.n	27906 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   27800:	231e      	movs	r3, #30
   27802:	18fb      	adds	r3, r7, r3
   27804:	2200      	movs	r2, #0
   27806:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   27808:	230f      	movs	r3, #15
   2780a:	18fb      	adds	r3, r7, r3
   2780c:	2200      	movs	r2, #0
   2780e:	569a      	ldrsb	r2, [r3, r2]
   27810:	4b41      	ldr	r3, [pc, #260]	; (27918 <recv+0x178>)
   27812:	0112      	lsls	r2, r2, #4
   27814:	68b9      	ldr	r1, [r7, #8]
   27816:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   27818:	230f      	movs	r3, #15
   2781a:	18fb      	adds	r3, r7, r3
   2781c:	781b      	ldrb	r3, [r3, #0]
   2781e:	b25b      	sxtb	r3, r3
   27820:	4a3d      	ldr	r2, [pc, #244]	; (27918 <recv+0x178>)
   27822:	011b      	lsls	r3, r3, #4
   27824:	18d3      	adds	r3, r2, r3
   27826:	3304      	adds	r3, #4
   27828:	220c      	movs	r2, #12
   2782a:	18ba      	adds	r2, r7, r2
   2782c:	8812      	ldrh	r2, [r2, #0]
   2782e:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   27830:	230f      	movs	r3, #15
   27832:	18fb      	adds	r3, r7, r3
   27834:	781b      	ldrb	r3, [r3, #0]
   27836:	b25b      	sxtb	r3, r3
   27838:	4a37      	ldr	r2, [pc, #220]	; (27918 <recv+0x178>)
   2783a:	011b      	lsls	r3, r3, #4
   2783c:	18d3      	adds	r3, r2, r3
   2783e:	330c      	adds	r3, #12
   27840:	781b      	ldrb	r3, [r3, #0]
   27842:	b2db      	uxtb	r3, r3
   27844:	2b00      	cmp	r3, #0
   27846:	d15e      	bne.n	27906 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   27848:	231d      	movs	r3, #29
   2784a:	18fb      	adds	r3, r7, r3
   2784c:	2246      	movs	r2, #70	; 0x46
   2784e:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   27850:	230f      	movs	r3, #15
   27852:	18fb      	adds	r3, r7, r3
   27854:	781b      	ldrb	r3, [r3, #0]
   27856:	b25b      	sxtb	r3, r3
   27858:	4a2f      	ldr	r2, [pc, #188]	; (27918 <recv+0x178>)
   2785a:	011b      	lsls	r3, r3, #4
   2785c:	18d3      	adds	r3, r2, r3
   2785e:	330c      	adds	r3, #12
   27860:	2201      	movs	r2, #1
   27862:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   27864:	230f      	movs	r3, #15
   27866:	18fb      	adds	r3, r7, r3
   27868:	781b      	ldrb	r3, [r3, #0]
   2786a:	b25b      	sxtb	r3, r3
   2786c:	4a2a      	ldr	r2, [pc, #168]	; (27918 <recv+0x178>)
   2786e:	011b      	lsls	r3, r3, #4
   27870:	18d3      	adds	r3, r2, r3
   27872:	330b      	adds	r3, #11
   27874:	781b      	ldrb	r3, [r3, #0]
   27876:	b2db      	uxtb	r3, r3
   27878:	001a      	movs	r2, r3
   2787a:	2301      	movs	r3, #1
   2787c:	4013      	ands	r3, r2
   2787e:	d003      	beq.n	27888 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   27880:	231d      	movs	r3, #29
   27882:	18fb      	adds	r3, r7, r3
   27884:	224d      	movs	r2, #77	; 0x4d
   27886:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   27888:	687b      	ldr	r3, [r7, #4]
   2788a:	2b00      	cmp	r3, #0
   2788c:	d105      	bne.n	2789a <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   2788e:	2314      	movs	r3, #20
   27890:	18fb      	adds	r3, r7, r3
   27892:	2201      	movs	r2, #1
   27894:	4252      	negs	r2, r2
   27896:	601a      	str	r2, [r3, #0]
   27898:	e003      	b.n	278a2 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   2789a:	2314      	movs	r3, #20
   2789c:	18fb      	adds	r3, r7, r3
   2789e:	687a      	ldr	r2, [r7, #4]
   278a0:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   278a2:	2314      	movs	r3, #20
   278a4:	18fb      	adds	r3, r7, r3
   278a6:	220f      	movs	r2, #15
   278a8:	18ba      	adds	r2, r7, r2
   278aa:	7812      	ldrb	r2, [r2, #0]
   278ac:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   278ae:	230f      	movs	r3, #15
   278b0:	18fb      	adds	r3, r7, r3
   278b2:	781b      	ldrb	r3, [r3, #0]
   278b4:	b25b      	sxtb	r3, r3
   278b6:	4a18      	ldr	r2, [pc, #96]	; (27918 <recv+0x178>)
   278b8:	011b      	lsls	r3, r3, #4
   278ba:	18d3      	adds	r3, r2, r3
   278bc:	3306      	adds	r3, #6
   278be:	881b      	ldrh	r3, [r3, #0]
   278c0:	b29a      	uxth	r2, r3
   278c2:	2314      	movs	r3, #20
   278c4:	18fb      	adds	r3, r7, r3
   278c6:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   278c8:	2314      	movs	r3, #20
   278ca:	18fa      	adds	r2, r7, r3
   278cc:	231d      	movs	r3, #29
   278ce:	18fb      	adds	r3, r7, r3
   278d0:	7819      	ldrb	r1, [r3, #0]
   278d2:	2300      	movs	r3, #0
   278d4:	9302      	str	r3, [sp, #8]
   278d6:	2300      	movs	r3, #0
   278d8:	9301      	str	r3, [sp, #4]
   278da:	2300      	movs	r3, #0
   278dc:	9300      	str	r3, [sp, #0]
   278de:	2308      	movs	r3, #8
   278e0:	2002      	movs	r0, #2
   278e2:	4c0e      	ldr	r4, [pc, #56]	; (2791c <recv+0x17c>)
   278e4:	47a0      	blx	r4
   278e6:	0003      	movs	r3, r0
   278e8:	001a      	movs	r2, r3
   278ea:	231e      	movs	r3, #30
   278ec:	18fb      	adds	r3, r7, r3
   278ee:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   278f0:	231e      	movs	r3, #30
   278f2:	18fb      	adds	r3, r7, r3
   278f4:	2200      	movs	r2, #0
   278f6:	5e9b      	ldrsh	r3, [r3, r2]
   278f8:	2b00      	cmp	r3, #0
   278fa:	d004      	beq.n	27906 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   278fc:	231e      	movs	r3, #30
   278fe:	18fb      	adds	r3, r7, r3
   27900:	220e      	movs	r2, #14
   27902:	4252      	negs	r2, r2
   27904:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   27906:	231e      	movs	r3, #30
   27908:	18fb      	adds	r3, r7, r3
   2790a:	2200      	movs	r2, #0
   2790c:	5e9b      	ldrsh	r3, [r3, r2]
}
   2790e:	0018      	movs	r0, r3
   27910:	46bd      	mov	sp, r7
   27912:	b009      	add	sp, #36	; 0x24
   27914:	bd90      	pop	{r4, r7, pc}
   27916:	46c0      	nop			; (mov r8, r8)
   27918:	20005730 	.word	0x20005730
   2791c:	00022be5 	.word	0x00022be5

00027920 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   27920:	b5b0      	push	{r4, r5, r7, lr}
   27922:	b088      	sub	sp, #32
   27924:	af04      	add	r7, sp, #16
   27926:	0002      	movs	r2, r0
   27928:	1dfb      	adds	r3, r7, #7
   2792a:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   2792c:	230f      	movs	r3, #15
   2792e:	18fb      	adds	r3, r7, r3
   27930:	22fa      	movs	r2, #250	; 0xfa
   27932:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   27934:	4b43      	ldr	r3, [pc, #268]	; (27a44 <close+0x124>)
   27936:	0018      	movs	r0, r3
   27938:	4b43      	ldr	r3, [pc, #268]	; (27a48 <close+0x128>)
   2793a:	4798      	blx	r3
   2793c:	1dfb      	adds	r3, r7, #7
   2793e:	2200      	movs	r2, #0
   27940:	569a      	ldrsb	r2, [r3, r2]
   27942:	4b42      	ldr	r3, [pc, #264]	; (27a4c <close+0x12c>)
   27944:	0011      	movs	r1, r2
   27946:	0018      	movs	r0, r3
   27948:	4b3f      	ldr	r3, [pc, #252]	; (27a48 <close+0x128>)
   2794a:	4798      	blx	r3
   2794c:	4b40      	ldr	r3, [pc, #256]	; (27a50 <close+0x130>)
   2794e:	0018      	movs	r0, r3
   27950:	4b3d      	ldr	r3, [pc, #244]	; (27a48 <close+0x128>)
   27952:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   27954:	1dfb      	adds	r3, r7, #7
   27956:	781b      	ldrb	r3, [r3, #0]
   27958:	2b7f      	cmp	r3, #127	; 0x7f
   2795a:	d86a      	bhi.n	27a32 <close+0x112>
   2795c:	1dfb      	adds	r3, r7, #7
   2795e:	781b      	ldrb	r3, [r3, #0]
   27960:	b25b      	sxtb	r3, r3
   27962:	4a3c      	ldr	r2, [pc, #240]	; (27a54 <close+0x134>)
   27964:	011b      	lsls	r3, r3, #4
   27966:	18d3      	adds	r3, r2, r3
   27968:	330a      	adds	r3, #10
   2796a:	781b      	ldrb	r3, [r3, #0]
   2796c:	b2db      	uxtb	r3, r3
   2796e:	2b01      	cmp	r3, #1
   27970:	d15f      	bne.n	27a32 <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   27972:	230e      	movs	r3, #14
   27974:	18fb      	adds	r3, r7, r3
   27976:	2249      	movs	r2, #73	; 0x49
   27978:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   2797a:	2308      	movs	r3, #8
   2797c:	18fb      	adds	r3, r7, r3
   2797e:	1dfa      	adds	r2, r7, #7
   27980:	7812      	ldrb	r2, [r2, #0]
   27982:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   27984:	1dfb      	adds	r3, r7, #7
   27986:	781b      	ldrb	r3, [r3, #0]
   27988:	b25b      	sxtb	r3, r3
   2798a:	4a32      	ldr	r2, [pc, #200]	; (27a54 <close+0x134>)
   2798c:	011b      	lsls	r3, r3, #4
   2798e:	18d3      	adds	r3, r2, r3
   27990:	3306      	adds	r3, #6
   27992:	881b      	ldrh	r3, [r3, #0]
   27994:	b29a      	uxth	r2, r3
   27996:	2308      	movs	r3, #8
   27998:	18fb      	adds	r3, r7, r3
   2799a:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   2799c:	1dfb      	adds	r3, r7, #7
   2799e:	781b      	ldrb	r3, [r3, #0]
   279a0:	b25b      	sxtb	r3, r3
   279a2:	4a2c      	ldr	r2, [pc, #176]	; (27a54 <close+0x134>)
   279a4:	011b      	lsls	r3, r3, #4
   279a6:	18d3      	adds	r3, r2, r3
   279a8:	330a      	adds	r3, #10
   279aa:	2200      	movs	r2, #0
   279ac:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   279ae:	1dfb      	adds	r3, r7, #7
   279b0:	781b      	ldrb	r3, [r3, #0]
   279b2:	b25b      	sxtb	r3, r3
   279b4:	4a27      	ldr	r2, [pc, #156]	; (27a54 <close+0x134>)
   279b6:	011b      	lsls	r3, r3, #4
   279b8:	18d3      	adds	r3, r2, r3
   279ba:	3306      	adds	r3, #6
   279bc:	2200      	movs	r2, #0
   279be:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   279c0:	1dfb      	adds	r3, r7, #7
   279c2:	781b      	ldrb	r3, [r3, #0]
   279c4:	b25b      	sxtb	r3, r3
   279c6:	4a23      	ldr	r2, [pc, #140]	; (27a54 <close+0x134>)
   279c8:	011b      	lsls	r3, r3, #4
   279ca:	18d3      	adds	r3, r2, r3
   279cc:	330b      	adds	r3, #11
   279ce:	781b      	ldrb	r3, [r3, #0]
   279d0:	b2db      	uxtb	r3, r3
   279d2:	001a      	movs	r2, r3
   279d4:	2301      	movs	r3, #1
   279d6:	4013      	ands	r3, r2
   279d8:	d003      	beq.n	279e2 <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   279da:	230e      	movs	r3, #14
   279dc:	18fb      	adds	r3, r7, r3
   279de:	224e      	movs	r2, #78	; 0x4e
   279e0:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   279e2:	230f      	movs	r3, #15
   279e4:	18fc      	adds	r4, r7, r3
   279e6:	2308      	movs	r3, #8
   279e8:	18fa      	adds	r2, r7, r3
   279ea:	230e      	movs	r3, #14
   279ec:	18fb      	adds	r3, r7, r3
   279ee:	7819      	ldrb	r1, [r3, #0]
   279f0:	2300      	movs	r3, #0
   279f2:	9302      	str	r3, [sp, #8]
   279f4:	2300      	movs	r3, #0
   279f6:	9301      	str	r3, [sp, #4]
   279f8:	2300      	movs	r3, #0
   279fa:	9300      	str	r3, [sp, #0]
   279fc:	2304      	movs	r3, #4
   279fe:	2002      	movs	r0, #2
   27a00:	4d15      	ldr	r5, [pc, #84]	; (27a58 <close+0x138>)
   27a02:	47a8      	blx	r5
   27a04:	0003      	movs	r3, r0
   27a06:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   27a08:	230f      	movs	r3, #15
   27a0a:	18fb      	adds	r3, r7, r3
   27a0c:	781b      	ldrb	r3, [r3, #0]
   27a0e:	b25b      	sxtb	r3, r3
   27a10:	2b00      	cmp	r3, #0
   27a12:	d003      	beq.n	27a1c <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   27a14:	230f      	movs	r3, #15
   27a16:	18fb      	adds	r3, r7, r3
   27a18:	22f7      	movs	r2, #247	; 0xf7
   27a1a:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   27a1c:	1dfb      	adds	r3, r7, #7
   27a1e:	781b      	ldrb	r3, [r3, #0]
   27a20:	b25b      	sxtb	r3, r3
   27a22:	011a      	lsls	r2, r3, #4
   27a24:	4b0b      	ldr	r3, [pc, #44]	; (27a54 <close+0x134>)
   27a26:	18d3      	adds	r3, r2, r3
   27a28:	2210      	movs	r2, #16
   27a2a:	2100      	movs	r1, #0
   27a2c:	0018      	movs	r0, r3
   27a2e:	4b0b      	ldr	r3, [pc, #44]	; (27a5c <close+0x13c>)
   27a30:	4798      	blx	r3
	}
	return s8Ret;
   27a32:	230f      	movs	r3, #15
   27a34:	18fb      	adds	r3, r7, r3
   27a36:	781b      	ldrb	r3, [r3, #0]
   27a38:	b25b      	sxtb	r3, r3
}
   27a3a:	0018      	movs	r0, r3
   27a3c:	46bd      	mov	sp, r7
   27a3e:	b004      	add	sp, #16
   27a40:	bdb0      	pop	{r4, r5, r7, pc}
   27a42:	46c0      	nop			; (mov r8, r8)
   27a44:	0003b950 	.word	0x0003b950
   27a48:	00020039 	.word	0x00020039
   27a4c:	0003b990 	.word	0x0003b990
   27a50:	0003b970 	.word	0x0003b970
   27a54:	20005730 	.word	0x20005730
   27a58:	00022be5 	.word	0x00022be5
   27a5c:	00022985 	.word	0x00022985

00027a60 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   27a60:	b580      	push	{r7, lr}
   27a62:	b086      	sub	sp, #24
   27a64:	af00      	add	r7, sp, #0
   27a66:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   27a68:	2300      	movs	r3, #0
   27a6a:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   27a6c:	2317      	movs	r3, #23
   27a6e:	18fb      	adds	r3, r7, r3
   27a70:	2200      	movs	r2, #0
   27a72:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   27a74:	2316      	movs	r3, #22
   27a76:	18fb      	adds	r3, r7, r3
   27a78:	2200      	movs	r2, #0
   27a7a:	701a      	strb	r2, [r3, #0]
   27a7c:	e060      	b.n	27b40 <nmi_inet_addr+0xe0>
	{
		j = 0;
   27a7e:	2315      	movs	r3, #21
   27a80:	18fb      	adds	r3, r7, r3
   27a82:	2200      	movs	r2, #0
   27a84:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   27a86:	2314      	movs	r3, #20
   27a88:	18fb      	adds	r3, r7, r3
   27a8a:	687a      	ldr	r2, [r7, #4]
   27a8c:	7812      	ldrb	r2, [r2, #0]
   27a8e:	701a      	strb	r2, [r3, #0]
			++j;
   27a90:	2315      	movs	r3, #21
   27a92:	18fb      	adds	r3, r7, r3
   27a94:	2215      	movs	r2, #21
   27a96:	18ba      	adds	r2, r7, r2
   27a98:	7812      	ldrb	r2, [r2, #0]
   27a9a:	3201      	adds	r2, #1
   27a9c:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   27a9e:	2315      	movs	r3, #21
   27aa0:	18fb      	adds	r3, r7, r3
   27aa2:	781b      	ldrb	r3, [r3, #0]
   27aa4:	2b04      	cmp	r3, #4
   27aa6:	d901      	bls.n	27aac <nmi_inet_addr+0x4c>
			{
				return 0;
   27aa8:	2300      	movs	r3, #0
   27aaa:	e057      	b.n	27b5c <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   27aac:	2314      	movs	r3, #20
   27aae:	18fb      	adds	r3, r7, r3
   27ab0:	781b      	ldrb	r3, [r3, #0]
   27ab2:	2b2e      	cmp	r3, #46	; 0x2e
   27ab4:	d004      	beq.n	27ac0 <nmi_inet_addr+0x60>
   27ab6:	2314      	movs	r3, #20
   27ab8:	18fb      	adds	r3, r7, r3
   27aba:	781b      	ldrb	r3, [r3, #0]
   27abc:	2b00      	cmp	r3, #0
   27abe:	d10d      	bne.n	27adc <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   27ac0:	2316      	movs	r3, #22
   27ac2:	18fb      	adds	r3, r7, r3
   27ac4:	781b      	ldrb	r3, [r3, #0]
   27ac6:	220c      	movs	r2, #12
   27ac8:	18ba      	adds	r2, r7, r2
   27aca:	2117      	movs	r1, #23
   27acc:	1879      	adds	r1, r7, r1
   27ace:	7809      	ldrb	r1, [r1, #0]
   27ad0:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   27ad2:	2317      	movs	r3, #23
   27ad4:	18fb      	adds	r3, r7, r3
   27ad6:	2200      	movs	r2, #0
   27ad8:	701a      	strb	r2, [r3, #0]
   27ada:	e01d      	b.n	27b18 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   27adc:	2314      	movs	r3, #20
   27ade:	18fb      	adds	r3, r7, r3
   27ae0:	781b      	ldrb	r3, [r3, #0]
   27ae2:	2b2f      	cmp	r3, #47	; 0x2f
   27ae4:	d916      	bls.n	27b14 <nmi_inet_addr+0xb4>
   27ae6:	2314      	movs	r3, #20
   27ae8:	18fb      	adds	r3, r7, r3
   27aea:	781b      	ldrb	r3, [r3, #0]
   27aec:	2b39      	cmp	r3, #57	; 0x39
   27aee:	d811      	bhi.n	27b14 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   27af0:	2317      	movs	r3, #23
   27af2:	18fb      	adds	r3, r7, r3
   27af4:	781b      	ldrb	r3, [r3, #0]
   27af6:	1c1a      	adds	r2, r3, #0
   27af8:	0092      	lsls	r2, r2, #2
   27afa:	18d3      	adds	r3, r2, r3
   27afc:	18db      	adds	r3, r3, r3
   27afe:	b2da      	uxtb	r2, r3
   27b00:	2314      	movs	r3, #20
   27b02:	18fb      	adds	r3, r7, r3
   27b04:	781b      	ldrb	r3, [r3, #0]
   27b06:	18d3      	adds	r3, r2, r3
   27b08:	b2da      	uxtb	r2, r3
   27b0a:	2317      	movs	r3, #23
   27b0c:	18fb      	adds	r3, r7, r3
   27b0e:	3a30      	subs	r2, #48	; 0x30
   27b10:	701a      	strb	r2, [r3, #0]
   27b12:	e001      	b.n	27b18 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   27b14:	2300      	movs	r3, #0
   27b16:	e021      	b.n	27b5c <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   27b18:	687b      	ldr	r3, [r7, #4]
   27b1a:	3301      	adds	r3, #1
   27b1c:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   27b1e:	2314      	movs	r3, #20
   27b20:	18fb      	adds	r3, r7, r3
   27b22:	781b      	ldrb	r3, [r3, #0]
   27b24:	2b2e      	cmp	r3, #46	; 0x2e
   27b26:	d004      	beq.n	27b32 <nmi_inet_addr+0xd2>
   27b28:	2314      	movs	r3, #20
   27b2a:	18fb      	adds	r3, r7, r3
   27b2c:	781b      	ldrb	r3, [r3, #0]
   27b2e:	2b00      	cmp	r3, #0
   27b30:	d1a9      	bne.n	27a86 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   27b32:	2316      	movs	r3, #22
   27b34:	18fb      	adds	r3, r7, r3
   27b36:	2216      	movs	r2, #22
   27b38:	18ba      	adds	r2, r7, r2
   27b3a:	7812      	ldrb	r2, [r2, #0]
   27b3c:	3201      	adds	r2, #1
   27b3e:	701a      	strb	r2, [r3, #0]
   27b40:	2316      	movs	r3, #22
   27b42:	18fb      	adds	r3, r7, r3
   27b44:	781b      	ldrb	r3, [r3, #0]
   27b46:	2b03      	cmp	r3, #3
   27b48:	d999      	bls.n	27a7e <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   27b4a:	230c      	movs	r3, #12
   27b4c:	18f9      	adds	r1, r7, r3
   27b4e:	2310      	movs	r3, #16
   27b50:	18fb      	adds	r3, r7, r3
   27b52:	2204      	movs	r2, #4
   27b54:	0018      	movs	r0, r3
   27b56:	4b03      	ldr	r3, [pc, #12]	; (27b64 <nmi_inet_addr+0x104>)
   27b58:	4798      	blx	r3
	return u32IP;
   27b5a:	693b      	ldr	r3, [r7, #16]
}
   27b5c:	0018      	movs	r0, r3
   27b5e:	46bd      	mov	sp, r7
   27b60:	b006      	add	sp, #24
   27b62:	bd80      	pop	{r7, pc}
   27b64:	00022949 	.word	0x00022949

00027b68 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   27b68:	b5b0      	push	{r4, r5, r7, lr}
   27b6a:	b088      	sub	sp, #32
   27b6c:	af04      	add	r7, sp, #16
   27b6e:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   27b70:	230f      	movs	r3, #15
   27b72:	18fb      	adds	r3, r7, r3
   27b74:	22fa      	movs	r2, #250	; 0xfa
   27b76:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   27b78:	687b      	ldr	r3, [r7, #4]
   27b7a:	0018      	movs	r0, r3
   27b7c:	4b14      	ldr	r3, [pc, #80]	; (27bd0 <gethostbyname+0x68>)
   27b7e:	4798      	blx	r3
   27b80:	0003      	movs	r3, r0
   27b82:	001a      	movs	r2, r3
   27b84:	230e      	movs	r3, #14
   27b86:	18fb      	adds	r3, r7, r3
   27b88:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   27b8a:	230e      	movs	r3, #14
   27b8c:	18fb      	adds	r3, r7, r3
   27b8e:	781b      	ldrb	r3, [r3, #0]
   27b90:	2b40      	cmp	r3, #64	; 0x40
   27b92:	d815      	bhi.n	27bc0 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   27b94:	230e      	movs	r3, #14
   27b96:	18fb      	adds	r3, r7, r3
   27b98:	781b      	ldrb	r3, [r3, #0]
   27b9a:	b29b      	uxth	r3, r3
   27b9c:	3301      	adds	r3, #1
   27b9e:	b299      	uxth	r1, r3
   27ba0:	230f      	movs	r3, #15
   27ba2:	18fc      	adds	r4, r7, r3
   27ba4:	687a      	ldr	r2, [r7, #4]
   27ba6:	2300      	movs	r3, #0
   27ba8:	9302      	str	r3, [sp, #8]
   27baa:	2300      	movs	r3, #0
   27bac:	9301      	str	r3, [sp, #4]
   27bae:	2300      	movs	r3, #0
   27bb0:	9300      	str	r3, [sp, #0]
   27bb2:	000b      	movs	r3, r1
   27bb4:	214a      	movs	r1, #74	; 0x4a
   27bb6:	2002      	movs	r0, #2
   27bb8:	4d06      	ldr	r5, [pc, #24]	; (27bd4 <gethostbyname+0x6c>)
   27bba:	47a8      	blx	r5
   27bbc:	0003      	movs	r3, r0
   27bbe:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   27bc0:	230f      	movs	r3, #15
   27bc2:	18fb      	adds	r3, r7, r3
   27bc4:	781b      	ldrb	r3, [r3, #0]
   27bc6:	b25b      	sxtb	r3, r3
}
   27bc8:	0018      	movs	r0, r3
   27bca:	46bd      	mov	sp, r7
   27bcc:	b004      	add	sp, #16
   27bce:	bdb0      	pop	{r4, r5, r7, pc}
   27bd0:	000229c3 	.word	0x000229c3
   27bd4:	00022be5 	.word	0x00022be5

00027bd8 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   27bd8:	b580      	push	{r7, lr}
   27bda:	b082      	sub	sp, #8
   27bdc:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   27bde:	003b      	movs	r3, r7
   27be0:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   27be2:	687b      	ldr	r3, [r7, #4]
   27be4:	22b9      	movs	r2, #185	; 0xb9
   27be6:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   27be8:	4b13      	ldr	r3, [pc, #76]	; (27c38 <spi_flash_enter_low_power_mode+0x60>)
   27bea:	2100      	movs	r1, #0
   27bec:	0018      	movs	r0, r3
   27bee:	4b13      	ldr	r3, [pc, #76]	; (27c3c <spi_flash_enter_low_power_mode+0x64>)
   27bf0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   27bf2:	687b      	ldr	r3, [r7, #4]
   27bf4:	781b      	ldrb	r3, [r3, #0]
   27bf6:	001a      	movs	r2, r3
   27bf8:	4b11      	ldr	r3, [pc, #68]	; (27c40 <spi_flash_enter_low_power_mode+0x68>)
   27bfa:	0011      	movs	r1, r2
   27bfc:	0018      	movs	r0, r3
   27bfe:	4b0f      	ldr	r3, [pc, #60]	; (27c3c <spi_flash_enter_low_power_mode+0x64>)
   27c00:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   27c02:	4b10      	ldr	r3, [pc, #64]	; (27c44 <spi_flash_enter_low_power_mode+0x6c>)
   27c04:	2101      	movs	r1, #1
   27c06:	0018      	movs	r0, r3
   27c08:	4b0c      	ldr	r3, [pc, #48]	; (27c3c <spi_flash_enter_low_power_mode+0x64>)
   27c0a:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   27c0c:	4b0e      	ldr	r3, [pc, #56]	; (27c48 <spi_flash_enter_low_power_mode+0x70>)
   27c0e:	2100      	movs	r1, #0
   27c10:	0018      	movs	r0, r3
   27c12:	4b0a      	ldr	r3, [pc, #40]	; (27c3c <spi_flash_enter_low_power_mode+0x64>)
   27c14:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   27c16:	4b0d      	ldr	r3, [pc, #52]	; (27c4c <spi_flash_enter_low_power_mode+0x74>)
   27c18:	2181      	movs	r1, #129	; 0x81
   27c1a:	0018      	movs	r0, r3
   27c1c:	4b07      	ldr	r3, [pc, #28]	; (27c3c <spi_flash_enter_low_power_mode+0x64>)
   27c1e:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   27c20:	46c0      	nop			; (mov r8, r8)
   27c22:	4b0b      	ldr	r3, [pc, #44]	; (27c50 <spi_flash_enter_low_power_mode+0x78>)
   27c24:	0018      	movs	r0, r3
   27c26:	4b0b      	ldr	r3, [pc, #44]	; (27c54 <spi_flash_enter_low_power_mode+0x7c>)
   27c28:	4798      	blx	r3
   27c2a:	0003      	movs	r3, r0
   27c2c:	2b01      	cmp	r3, #1
   27c2e:	d1f8      	bne.n	27c22 <spi_flash_enter_low_power_mode+0x4a>
}
   27c30:	46c0      	nop			; (mov r8, r8)
   27c32:	46bd      	mov	sp, r7
   27c34:	b002      	add	sp, #8
   27c36:	bd80      	pop	{r7, pc}
   27c38:	00010208 	.word	0x00010208
   27c3c:	00024a39 	.word	0x00024a39
   27c40:	0001020c 	.word	0x0001020c
   27c44:	00010214 	.word	0x00010214
   27c48:	0001021c 	.word	0x0001021c
   27c4c:	00010204 	.word	0x00010204
   27c50:	00010218 	.word	0x00010218
   27c54:	000249f5 	.word	0x000249f5

00027c58 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   27c58:	b580      	push	{r7, lr}
   27c5a:	b082      	sub	sp, #8
   27c5c:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   27c5e:	003b      	movs	r3, r7
   27c60:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   27c62:	687b      	ldr	r3, [r7, #4]
   27c64:	22ab      	movs	r2, #171	; 0xab
   27c66:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   27c68:	4b13      	ldr	r3, [pc, #76]	; (27cb8 <spi_flash_leave_low_power_mode+0x60>)
   27c6a:	2100      	movs	r1, #0
   27c6c:	0018      	movs	r0, r3
   27c6e:	4b13      	ldr	r3, [pc, #76]	; (27cbc <spi_flash_leave_low_power_mode+0x64>)
   27c70:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   27c72:	687b      	ldr	r3, [r7, #4]
   27c74:	781b      	ldrb	r3, [r3, #0]
   27c76:	001a      	movs	r2, r3
   27c78:	4b11      	ldr	r3, [pc, #68]	; (27cc0 <spi_flash_leave_low_power_mode+0x68>)
   27c7a:	0011      	movs	r1, r2
   27c7c:	0018      	movs	r0, r3
   27c7e:	4b0f      	ldr	r3, [pc, #60]	; (27cbc <spi_flash_leave_low_power_mode+0x64>)
   27c80:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   27c82:	4b10      	ldr	r3, [pc, #64]	; (27cc4 <spi_flash_leave_low_power_mode+0x6c>)
   27c84:	2101      	movs	r1, #1
   27c86:	0018      	movs	r0, r3
   27c88:	4b0c      	ldr	r3, [pc, #48]	; (27cbc <spi_flash_leave_low_power_mode+0x64>)
   27c8a:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   27c8c:	4b0e      	ldr	r3, [pc, #56]	; (27cc8 <spi_flash_leave_low_power_mode+0x70>)
   27c8e:	2100      	movs	r1, #0
   27c90:	0018      	movs	r0, r3
   27c92:	4b0a      	ldr	r3, [pc, #40]	; (27cbc <spi_flash_leave_low_power_mode+0x64>)
   27c94:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   27c96:	4b0d      	ldr	r3, [pc, #52]	; (27ccc <spi_flash_leave_low_power_mode+0x74>)
   27c98:	2181      	movs	r1, #129	; 0x81
   27c9a:	0018      	movs	r0, r3
   27c9c:	4b07      	ldr	r3, [pc, #28]	; (27cbc <spi_flash_leave_low_power_mode+0x64>)
   27c9e:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   27ca0:	46c0      	nop			; (mov r8, r8)
   27ca2:	4b0b      	ldr	r3, [pc, #44]	; (27cd0 <spi_flash_leave_low_power_mode+0x78>)
   27ca4:	0018      	movs	r0, r3
   27ca6:	4b0b      	ldr	r3, [pc, #44]	; (27cd4 <spi_flash_leave_low_power_mode+0x7c>)
   27ca8:	4798      	blx	r3
   27caa:	0003      	movs	r3, r0
   27cac:	2b01      	cmp	r3, #1
   27cae:	d1f8      	bne.n	27ca2 <spi_flash_leave_low_power_mode+0x4a>
}
   27cb0:	46c0      	nop			; (mov r8, r8)
   27cb2:	46bd      	mov	sp, r7
   27cb4:	b002      	add	sp, #8
   27cb6:	bd80      	pop	{r7, pc}
   27cb8:	00010208 	.word	0x00010208
   27cbc:	00024a39 	.word	0x00024a39
   27cc0:	0001020c 	.word	0x0001020c
   27cc4:	00010214 	.word	0x00010214
   27cc8:	0001021c 	.word	0x0001021c
   27ccc:	00010204 	.word	0x00010204
   27cd0:	00010218 	.word	0x00010218
   27cd4:	000249f5 	.word	0x000249f5

00027cd8 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   27cd8:	b590      	push	{r4, r7, lr}
   27cda:	b085      	sub	sp, #20
   27cdc:	af00      	add	r7, sp, #0
   27cde:	0002      	movs	r2, r0
   27ce0:	1dfb      	adds	r3, r7, #7
   27ce2:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   27ce4:	230f      	movs	r3, #15
   27ce6:	18fb      	adds	r3, r7, r3
   27ce8:	2200      	movs	r2, #0
   27cea:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   27cec:	4b24      	ldr	r3, [pc, #144]	; (27d80 <spi_flash_enable+0xa8>)
   27cee:	4798      	blx	r3
   27cf0:	0003      	movs	r3, r0
   27cf2:	051b      	lsls	r3, r3, #20
   27cf4:	0d1b      	lsrs	r3, r3, #20
   27cf6:	4a23      	ldr	r2, [pc, #140]	; (27d84 <spi_flash_enable+0xac>)
   27cf8:	4293      	cmp	r3, r2
   27cfa:	d938      	bls.n	27d6e <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   27cfc:	230f      	movs	r3, #15
   27cfe:	18fc      	adds	r4, r7, r3
   27d00:	2308      	movs	r3, #8
   27d02:	18fb      	adds	r3, r7, r3
   27d04:	4a20      	ldr	r2, [pc, #128]	; (27d88 <spi_flash_enable+0xb0>)
   27d06:	0019      	movs	r1, r3
   27d08:	0010      	movs	r0, r2
   27d0a:	4b20      	ldr	r3, [pc, #128]	; (27d8c <spi_flash_enable+0xb4>)
   27d0c:	4798      	blx	r3
   27d0e:	0003      	movs	r3, r0
   27d10:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   27d12:	230f      	movs	r3, #15
   27d14:	18fb      	adds	r3, r7, r3
   27d16:	781b      	ldrb	r3, [r3, #0]
   27d18:	b25b      	sxtb	r3, r3
   27d1a:	2b00      	cmp	r3, #0
   27d1c:	d126      	bne.n	27d6c <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   27d1e:	68bb      	ldr	r3, [r7, #8]
   27d20:	4a1b      	ldr	r2, [pc, #108]	; (27d90 <spi_flash_enable+0xb8>)
   27d22:	4013      	ands	r3, r2
   27d24:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   27d26:	68bb      	ldr	r3, [r7, #8]
   27d28:	4a1a      	ldr	r2, [pc, #104]	; (27d94 <spi_flash_enable+0xbc>)
   27d2a:	4313      	orrs	r3, r2
   27d2c:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   27d2e:	68bb      	ldr	r3, [r7, #8]
   27d30:	4a15      	ldr	r2, [pc, #84]	; (27d88 <spi_flash_enable+0xb0>)
   27d32:	0019      	movs	r1, r3
   27d34:	0010      	movs	r0, r2
   27d36:	4b18      	ldr	r3, [pc, #96]	; (27d98 <spi_flash_enable+0xc0>)
   27d38:	4798      	blx	r3
		if(enable) {
   27d3a:	1dfb      	adds	r3, r7, #7
   27d3c:	781b      	ldrb	r3, [r3, #0]
   27d3e:	2b00      	cmp	r3, #0
   27d40:	d002      	beq.n	27d48 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   27d42:	4b16      	ldr	r3, [pc, #88]	; (27d9c <spi_flash_enable+0xc4>)
   27d44:	4798      	blx	r3
   27d46:	e001      	b.n	27d4c <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   27d48:	4b15      	ldr	r3, [pc, #84]	; (27da0 <spi_flash_enable+0xc8>)
   27d4a:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   27d4c:	68bb      	ldr	r3, [r7, #8]
   27d4e:	4a10      	ldr	r2, [pc, #64]	; (27d90 <spi_flash_enable+0xb8>)
   27d50:	4013      	ands	r3, r2
   27d52:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   27d54:	68bb      	ldr	r3, [r7, #8]
   27d56:	2280      	movs	r2, #128	; 0x80
   27d58:	0252      	lsls	r2, r2, #9
   27d5a:	4313      	orrs	r3, r2
   27d5c:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   27d5e:	68bb      	ldr	r3, [r7, #8]
   27d60:	4a09      	ldr	r2, [pc, #36]	; (27d88 <spi_flash_enable+0xb0>)
   27d62:	0019      	movs	r1, r3
   27d64:	0010      	movs	r0, r2
   27d66:	4b0c      	ldr	r3, [pc, #48]	; (27d98 <spi_flash_enable+0xc0>)
   27d68:	4798      	blx	r3
   27d6a:	e000      	b.n	27d6e <spi_flash_enable+0x96>
			goto ERR1;
   27d6c:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   27d6e:	230f      	movs	r3, #15
   27d70:	18fb      	adds	r3, r7, r3
   27d72:	781b      	ldrb	r3, [r3, #0]
   27d74:	b25b      	sxtb	r3, r3
}
   27d76:	0018      	movs	r0, r3
   27d78:	46bd      	mov	sp, r7
   27d7a:	b005      	add	sp, #20
   27d7c:	bd90      	pop	{r4, r7, pc}
   27d7e:	46c0      	nop			; (mov r8, r8)
   27d80:	00024315 	.word	0x00024315
   27d84:	0000039f 	.word	0x0000039f
   27d88:	00001410 	.word	0x00001410
   27d8c:	00024a15 	.word	0x00024a15
   27d90:	f8888fff 	.word	0xf8888fff
   27d94:	01111000 	.word	0x01111000
   27d98:	00024a39 	.word	0x00024a39
   27d9c:	00027c59 	.word	0x00027c59
   27da0:	00027bd9 	.word	0x00027bd9

00027da4 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   27da4:	b580      	push	{r7, lr}
   27da6:	b084      	sub	sp, #16
   27da8:	af00      	add	r7, sp, #0
   27daa:	0002      	movs	r2, r0
   27dac:	1dfb      	adds	r3, r7, #7
   27dae:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   27db0:	1dfb      	adds	r3, r7, #7
   27db2:	781b      	ldrb	r3, [r3, #0]
   27db4:	2b00      	cmp	r3, #0
   27db6:	d108      	bne.n	27dca <mem_test_unit_ready+0x26>
   27db8:	1dfb      	adds	r3, r7, #7
   27dba:	781a      	ldrb	r2, [r3, #0]
   27dbc:	4b08      	ldr	r3, [pc, #32]	; (27de0 <mem_test_unit_ready+0x3c>)
   27dbe:	0152      	lsls	r2, r2, #5
   27dc0:	58d3      	ldr	r3, [r2, r3]
   27dc2:	4798      	blx	r3
   27dc4:	0003      	movs	r3, r0
   27dc6:	001a      	movs	r2, r3
   27dc8:	e000      	b.n	27dcc <mem_test_unit_ready+0x28>
   27dca:	2201      	movs	r2, #1
  status =
   27dcc:	230f      	movs	r3, #15
   27dce:	18fb      	adds	r3, r7, r3
   27dd0:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   27dd2:	230f      	movs	r3, #15
   27dd4:	18fb      	adds	r3, r7, r3
   27dd6:	781b      	ldrb	r3, [r3, #0]
}
   27dd8:	0018      	movs	r0, r3
   27dda:	46bd      	mov	sp, r7
   27ddc:	b004      	add	sp, #16
   27dde:	bd80      	pop	{r7, pc}
   27de0:	0003ba1c 	.word	0x0003ba1c

00027de4 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   27de4:	b580      	push	{r7, lr}
   27de6:	b084      	sub	sp, #16
   27de8:	af00      	add	r7, sp, #0
   27dea:	0002      	movs	r2, r0
   27dec:	6039      	str	r1, [r7, #0]
   27dee:	1dfb      	adds	r3, r7, #7
   27df0:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   27df2:	1dfb      	adds	r3, r7, #7
   27df4:	781b      	ldrb	r3, [r3, #0]
   27df6:	2b00      	cmp	r3, #0
   27df8:	d10c      	bne.n	27e14 <mem_read_capacity+0x30>
   27dfa:	1dfb      	adds	r3, r7, #7
   27dfc:	781b      	ldrb	r3, [r3, #0]
   27dfe:	4a0b      	ldr	r2, [pc, #44]	; (27e2c <mem_read_capacity+0x48>)
   27e00:	015b      	lsls	r3, r3, #5
   27e02:	18d3      	adds	r3, r2, r3
   27e04:	3304      	adds	r3, #4
   27e06:	681b      	ldr	r3, [r3, #0]
   27e08:	683a      	ldr	r2, [r7, #0]
   27e0a:	0010      	movs	r0, r2
   27e0c:	4798      	blx	r3
   27e0e:	0003      	movs	r3, r0
   27e10:	001a      	movs	r2, r3
   27e12:	e000      	b.n	27e16 <mem_read_capacity+0x32>
   27e14:	2201      	movs	r2, #1
  status =
   27e16:	230f      	movs	r3, #15
   27e18:	18fb      	adds	r3, r7, r3
   27e1a:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   27e1c:	230f      	movs	r3, #15
   27e1e:	18fb      	adds	r3, r7, r3
   27e20:	781b      	ldrb	r3, [r3, #0]
}
   27e22:	0018      	movs	r0, r3
   27e24:	46bd      	mov	sp, r7
   27e26:	b004      	add	sp, #16
   27e28:	bd80      	pop	{r7, pc}
   27e2a:	46c0      	nop			; (mov r8, r8)
   27e2c:	0003ba1c 	.word	0x0003ba1c

00027e30 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   27e30:	b580      	push	{r7, lr}
   27e32:	b084      	sub	sp, #16
   27e34:	af00      	add	r7, sp, #0
   27e36:	0002      	movs	r2, r0
   27e38:	1dfb      	adds	r3, r7, #7
   27e3a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   27e3c:	1dfb      	adds	r3, r7, #7
   27e3e:	781b      	ldrb	r3, [r3, #0]
   27e40:	425a      	negs	r2, r3
   27e42:	4153      	adcs	r3, r2
   27e44:	b2da      	uxtb	r2, r3
  sector_size =
   27e46:	230f      	movs	r3, #15
   27e48:	18fb      	adds	r3, r7, r3
   27e4a:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   27e4c:	230f      	movs	r3, #15
   27e4e:	18fb      	adds	r3, r7, r3
   27e50:	781b      	ldrb	r3, [r3, #0]
}
   27e52:	0018      	movs	r0, r3
   27e54:	46bd      	mov	sp, r7
   27e56:	b004      	add	sp, #16
   27e58:	bd80      	pop	{r7, pc}
	...

00027e5c <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   27e5c:	b580      	push	{r7, lr}
   27e5e:	b084      	sub	sp, #16
   27e60:	af00      	add	r7, sp, #0
   27e62:	0002      	movs	r2, r0
   27e64:	1dfb      	adds	r3, r7, #7
   27e66:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   27e68:	1dfb      	adds	r3, r7, #7
   27e6a:	781b      	ldrb	r3, [r3, #0]
   27e6c:	2b00      	cmp	r3, #0
   27e6e:	d109      	bne.n	27e84 <mem_wr_protect+0x28>
   27e70:	1dfb      	adds	r3, r7, #7
   27e72:	781b      	ldrb	r3, [r3, #0]
   27e74:	4a0a      	ldr	r2, [pc, #40]	; (27ea0 <mem_wr_protect+0x44>)
   27e76:	015b      	lsls	r3, r3, #5
   27e78:	18d3      	adds	r3, r2, r3
   27e7a:	330c      	adds	r3, #12
   27e7c:	681b      	ldr	r3, [r3, #0]
   27e7e:	4798      	blx	r3
   27e80:	1e03      	subs	r3, r0, #0
   27e82:	d001      	beq.n	27e88 <mem_wr_protect+0x2c>
   27e84:	2201      	movs	r2, #1
   27e86:	e000      	b.n	27e8a <mem_wr_protect+0x2e>
   27e88:	2200      	movs	r2, #0
  wr_protect =
   27e8a:	230f      	movs	r3, #15
   27e8c:	18fb      	adds	r3, r7, r3
   27e8e:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   27e90:	230f      	movs	r3, #15
   27e92:	18fb      	adds	r3, r7, r3
   27e94:	781b      	ldrb	r3, [r3, #0]
}
   27e96:	0018      	movs	r0, r3
   27e98:	46bd      	mov	sp, r7
   27e9a:	b004      	add	sp, #16
   27e9c:	bd80      	pop	{r7, pc}
   27e9e:	46c0      	nop			; (mov r8, r8)
   27ea0:	0003ba1c 	.word	0x0003ba1c

00027ea4 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   27ea4:	b580      	push	{r7, lr}
   27ea6:	b086      	sub	sp, #24
   27ea8:	af00      	add	r7, sp, #0
   27eaa:	60b9      	str	r1, [r7, #8]
   27eac:	607a      	str	r2, [r7, #4]
   27eae:	230f      	movs	r3, #15
   27eb0:	18fb      	adds	r3, r7, r3
   27eb2:	1c02      	adds	r2, r0, #0
   27eb4:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   27eb6:	230f      	movs	r3, #15
   27eb8:	18fb      	adds	r3, r7, r3
   27eba:	781b      	ldrb	r3, [r3, #0]
   27ebc:	2b00      	cmp	r3, #0
   27ebe:	d10e      	bne.n	27ede <memory_2_ram+0x3a>
   27ec0:	230f      	movs	r3, #15
   27ec2:	18fb      	adds	r3, r7, r3
   27ec4:	781b      	ldrb	r3, [r3, #0]
   27ec6:	4a0b      	ldr	r2, [pc, #44]	; (27ef4 <memory_2_ram+0x50>)
   27ec8:	015b      	lsls	r3, r3, #5
   27eca:	18d3      	adds	r3, r2, r3
   27ecc:	3314      	adds	r3, #20
   27ece:	681b      	ldr	r3, [r3, #0]
   27ed0:	6879      	ldr	r1, [r7, #4]
   27ed2:	68ba      	ldr	r2, [r7, #8]
   27ed4:	0010      	movs	r0, r2
   27ed6:	4798      	blx	r3
   27ed8:	0003      	movs	r3, r0
   27eda:	001a      	movs	r2, r3
   27edc:	e000      	b.n	27ee0 <memory_2_ram+0x3c>
   27ede:	2201      	movs	r2, #1
  status =
   27ee0:	2317      	movs	r3, #23
   27ee2:	18fb      	adds	r3, r7, r3
   27ee4:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   27ee6:	2317      	movs	r3, #23
   27ee8:	18fb      	adds	r3, r7, r3
   27eea:	781b      	ldrb	r3, [r3, #0]
}
   27eec:	0018      	movs	r0, r3
   27eee:	46bd      	mov	sp, r7
   27ef0:	b006      	add	sp, #24
   27ef2:	bd80      	pop	{r7, pc}
   27ef4:	0003ba1c 	.word	0x0003ba1c

00027ef8 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   27ef8:	b580      	push	{r7, lr}
   27efa:	b086      	sub	sp, #24
   27efc:	af00      	add	r7, sp, #0
   27efe:	60b9      	str	r1, [r7, #8]
   27f00:	607a      	str	r2, [r7, #4]
   27f02:	230f      	movs	r3, #15
   27f04:	18fb      	adds	r3, r7, r3
   27f06:	1c02      	adds	r2, r0, #0
   27f08:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   27f0a:	230f      	movs	r3, #15
   27f0c:	18fb      	adds	r3, r7, r3
   27f0e:	781b      	ldrb	r3, [r3, #0]
   27f10:	2b00      	cmp	r3, #0
   27f12:	d10e      	bne.n	27f32 <ram_2_memory+0x3a>
   27f14:	230f      	movs	r3, #15
   27f16:	18fb      	adds	r3, r7, r3
   27f18:	781b      	ldrb	r3, [r3, #0]
   27f1a:	4a0b      	ldr	r2, [pc, #44]	; (27f48 <ram_2_memory+0x50>)
   27f1c:	015b      	lsls	r3, r3, #5
   27f1e:	18d3      	adds	r3, r2, r3
   27f20:	3318      	adds	r3, #24
   27f22:	681b      	ldr	r3, [r3, #0]
   27f24:	6879      	ldr	r1, [r7, #4]
   27f26:	68ba      	ldr	r2, [r7, #8]
   27f28:	0010      	movs	r0, r2
   27f2a:	4798      	blx	r3
   27f2c:	0003      	movs	r3, r0
   27f2e:	001a      	movs	r2, r3
   27f30:	e000      	b.n	27f34 <ram_2_memory+0x3c>
   27f32:	2201      	movs	r2, #1
  status =
   27f34:	2317      	movs	r3, #23
   27f36:	18fb      	adds	r3, r7, r3
   27f38:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   27f3a:	2317      	movs	r3, #23
   27f3c:	18fb      	adds	r3, r7, r3
   27f3e:	781b      	ldrb	r3, [r3, #0]
}
   27f40:	0018      	movs	r0, r3
   27f42:	46bd      	mov	sp, r7
   27f44:	b006      	add	sp, #24
   27f46:	bd80      	pop	{r7, pc}
   27f48:	0003ba1c 	.word	0x0003ba1c

00027f4c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   27f4c:	b580      	push	{r7, lr}
   27f4e:	b082      	sub	sp, #8
   27f50:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   27f52:	4b10      	ldr	r3, [pc, #64]	; (27f94 <cpu_irq_enter_critical+0x48>)
   27f54:	681b      	ldr	r3, [r3, #0]
   27f56:	2b00      	cmp	r3, #0
   27f58:	d112      	bne.n	27f80 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   27f5a:	f3ef 8310 	mrs	r3, PRIMASK
   27f5e:	607b      	str	r3, [r7, #4]
  return(result);
   27f60:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   27f62:	2b00      	cmp	r3, #0
   27f64:	d109      	bne.n	27f7a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   27f66:	b672      	cpsid	i
   27f68:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   27f6c:	4b0a      	ldr	r3, [pc, #40]	; (27f98 <cpu_irq_enter_critical+0x4c>)
   27f6e:	2200      	movs	r2, #0
   27f70:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   27f72:	4b0a      	ldr	r3, [pc, #40]	; (27f9c <cpu_irq_enter_critical+0x50>)
   27f74:	2201      	movs	r2, #1
   27f76:	701a      	strb	r2, [r3, #0]
   27f78:	e002      	b.n	27f80 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   27f7a:	4b08      	ldr	r3, [pc, #32]	; (27f9c <cpu_irq_enter_critical+0x50>)
   27f7c:	2200      	movs	r2, #0
   27f7e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   27f80:	4b04      	ldr	r3, [pc, #16]	; (27f94 <cpu_irq_enter_critical+0x48>)
   27f82:	681b      	ldr	r3, [r3, #0]
   27f84:	1c5a      	adds	r2, r3, #1
   27f86:	4b03      	ldr	r3, [pc, #12]	; (27f94 <cpu_irq_enter_critical+0x48>)
   27f88:	601a      	str	r2, [r3, #0]
}
   27f8a:	46c0      	nop			; (mov r8, r8)
   27f8c:	46bd      	mov	sp, r7
   27f8e:	b002      	add	sp, #8
   27f90:	bd80      	pop	{r7, pc}
   27f92:	46c0      	nop			; (mov r8, r8)
   27f94:	20003ed4 	.word	0x20003ed4
   27f98:	20000116 	.word	0x20000116
   27f9c:	20003ed8 	.word	0x20003ed8

00027fa0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   27fa0:	b580      	push	{r7, lr}
   27fa2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   27fa4:	4b0b      	ldr	r3, [pc, #44]	; (27fd4 <cpu_irq_leave_critical+0x34>)
   27fa6:	681b      	ldr	r3, [r3, #0]
   27fa8:	1e5a      	subs	r2, r3, #1
   27faa:	4b0a      	ldr	r3, [pc, #40]	; (27fd4 <cpu_irq_leave_critical+0x34>)
   27fac:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   27fae:	4b09      	ldr	r3, [pc, #36]	; (27fd4 <cpu_irq_leave_critical+0x34>)
   27fb0:	681b      	ldr	r3, [r3, #0]
   27fb2:	2b00      	cmp	r3, #0
   27fb4:	d10a      	bne.n	27fcc <cpu_irq_leave_critical+0x2c>
   27fb6:	4b08      	ldr	r3, [pc, #32]	; (27fd8 <cpu_irq_leave_critical+0x38>)
   27fb8:	781b      	ldrb	r3, [r3, #0]
   27fba:	b2db      	uxtb	r3, r3
   27fbc:	2b00      	cmp	r3, #0
   27fbe:	d005      	beq.n	27fcc <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   27fc0:	4b06      	ldr	r3, [pc, #24]	; (27fdc <cpu_irq_leave_critical+0x3c>)
   27fc2:	2201      	movs	r2, #1
   27fc4:	701a      	strb	r2, [r3, #0]
   27fc6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   27fca:	b662      	cpsie	i
	}
}
   27fcc:	46c0      	nop			; (mov r8, r8)
   27fce:	46bd      	mov	sp, r7
   27fd0:	bd80      	pop	{r7, pc}
   27fd2:	46c0      	nop			; (mov r8, r8)
   27fd4:	20003ed4 	.word	0x20003ed4
   27fd8:	20003ed8 	.word	0x20003ed8
   27fdc:	20000116 	.word	0x20000116

00027fe0 <system_pinmux_get_group_from_gpio_pin>:
{
   27fe0:	b580      	push	{r7, lr}
   27fe2:	b084      	sub	sp, #16
   27fe4:	af00      	add	r7, sp, #0
   27fe6:	0002      	movs	r2, r0
   27fe8:	1dfb      	adds	r3, r7, #7
   27fea:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   27fec:	230f      	movs	r3, #15
   27fee:	18fb      	adds	r3, r7, r3
   27ff0:	1dfa      	adds	r2, r7, #7
   27ff2:	7812      	ldrb	r2, [r2, #0]
   27ff4:	09d2      	lsrs	r2, r2, #7
   27ff6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   27ff8:	230e      	movs	r3, #14
   27ffa:	18fb      	adds	r3, r7, r3
   27ffc:	1dfa      	adds	r2, r7, #7
   27ffe:	7812      	ldrb	r2, [r2, #0]
   28000:	0952      	lsrs	r2, r2, #5
   28002:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   28004:	4b0d      	ldr	r3, [pc, #52]	; (2803c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   28006:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   28008:	230f      	movs	r3, #15
   2800a:	18fb      	adds	r3, r7, r3
   2800c:	781b      	ldrb	r3, [r3, #0]
   2800e:	2b00      	cmp	r3, #0
   28010:	d10f      	bne.n	28032 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   28012:	230f      	movs	r3, #15
   28014:	18fb      	adds	r3, r7, r3
   28016:	781b      	ldrb	r3, [r3, #0]
   28018:	009b      	lsls	r3, r3, #2
   2801a:	2210      	movs	r2, #16
   2801c:	4694      	mov	ip, r2
   2801e:	44bc      	add	ip, r7
   28020:	4463      	add	r3, ip
   28022:	3b08      	subs	r3, #8
   28024:	681a      	ldr	r2, [r3, #0]
   28026:	230e      	movs	r3, #14
   28028:	18fb      	adds	r3, r7, r3
   2802a:	781b      	ldrb	r3, [r3, #0]
   2802c:	01db      	lsls	r3, r3, #7
   2802e:	18d3      	adds	r3, r2, r3
   28030:	e000      	b.n	28034 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   28032:	2300      	movs	r3, #0
}
   28034:	0018      	movs	r0, r3
   28036:	46bd      	mov	sp, r7
   28038:	b004      	add	sp, #16
   2803a:	bd80      	pop	{r7, pc}
   2803c:	41004400 	.word	0x41004400

00028040 <port_get_group_from_gpio_pin>:
{
   28040:	b580      	push	{r7, lr}
   28042:	b082      	sub	sp, #8
   28044:	af00      	add	r7, sp, #0
   28046:	0002      	movs	r2, r0
   28048:	1dfb      	adds	r3, r7, #7
   2804a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2804c:	1dfb      	adds	r3, r7, #7
   2804e:	781b      	ldrb	r3, [r3, #0]
   28050:	0018      	movs	r0, r3
   28052:	4b03      	ldr	r3, [pc, #12]	; (28060 <port_get_group_from_gpio_pin+0x20>)
   28054:	4798      	blx	r3
   28056:	0003      	movs	r3, r0
}
   28058:	0018      	movs	r0, r3
   2805a:	46bd      	mov	sp, r7
   2805c:	b002      	add	sp, #8
   2805e:	bd80      	pop	{r7, pc}
   28060:	00027fe1 	.word	0x00027fe1

00028064 <port_get_config_defaults>:
{
   28064:	b580      	push	{r7, lr}
   28066:	b082      	sub	sp, #8
   28068:	af00      	add	r7, sp, #0
   2806a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   2806c:	687b      	ldr	r3, [r7, #4]
   2806e:	2200      	movs	r2, #0
   28070:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   28072:	687b      	ldr	r3, [r7, #4]
   28074:	2201      	movs	r2, #1
   28076:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   28078:	687b      	ldr	r3, [r7, #4]
   2807a:	2200      	movs	r2, #0
   2807c:	709a      	strb	r2, [r3, #2]
}
   2807e:	46c0      	nop			; (mov r8, r8)
   28080:	46bd      	mov	sp, r7
   28082:	b002      	add	sp, #8
   28084:	bd80      	pop	{r7, pc}
	...

00028088 <port_pin_set_output_level>:
{
   28088:	b580      	push	{r7, lr}
   2808a:	b084      	sub	sp, #16
   2808c:	af00      	add	r7, sp, #0
   2808e:	0002      	movs	r2, r0
   28090:	1dfb      	adds	r3, r7, #7
   28092:	701a      	strb	r2, [r3, #0]
   28094:	1dbb      	adds	r3, r7, #6
   28096:	1c0a      	adds	r2, r1, #0
   28098:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2809a:	1dfb      	adds	r3, r7, #7
   2809c:	781b      	ldrb	r3, [r3, #0]
   2809e:	0018      	movs	r0, r3
   280a0:	4b0d      	ldr	r3, [pc, #52]	; (280d8 <port_pin_set_output_level+0x50>)
   280a2:	4798      	blx	r3
   280a4:	0003      	movs	r3, r0
   280a6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   280a8:	1dfb      	adds	r3, r7, #7
   280aa:	781b      	ldrb	r3, [r3, #0]
   280ac:	221f      	movs	r2, #31
   280ae:	4013      	ands	r3, r2
   280b0:	2201      	movs	r2, #1
   280b2:	409a      	lsls	r2, r3
   280b4:	0013      	movs	r3, r2
   280b6:	60bb      	str	r3, [r7, #8]
	if (level) {
   280b8:	1dbb      	adds	r3, r7, #6
   280ba:	781b      	ldrb	r3, [r3, #0]
   280bc:	2b00      	cmp	r3, #0
   280be:	d003      	beq.n	280c8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   280c0:	68fb      	ldr	r3, [r7, #12]
   280c2:	68ba      	ldr	r2, [r7, #8]
   280c4:	619a      	str	r2, [r3, #24]
}
   280c6:	e002      	b.n	280ce <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   280c8:	68fb      	ldr	r3, [r7, #12]
   280ca:	68ba      	ldr	r2, [r7, #8]
   280cc:	615a      	str	r2, [r3, #20]
}
   280ce:	46c0      	nop			; (mov r8, r8)
   280d0:	46bd      	mov	sp, r7
   280d2:	b004      	add	sp, #16
   280d4:	bd80      	pop	{r7, pc}
   280d6:	46c0      	nop			; (mov r8, r8)
   280d8:	00028041 	.word	0x00028041

000280dc <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   280dc:	b580      	push	{r7, lr}
   280de:	b082      	sub	sp, #8
   280e0:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   280e2:	1d3b      	adds	r3, r7, #4
   280e4:	0018      	movs	r0, r3
   280e6:	4b0e      	ldr	r3, [pc, #56]	; (28120 <system_board_init+0x44>)
   280e8:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   280ea:	1d3b      	adds	r3, r7, #4
   280ec:	2201      	movs	r2, #1
   280ee:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   280f0:	1d3b      	adds	r3, r7, #4
   280f2:	0019      	movs	r1, r3
   280f4:	2017      	movs	r0, #23
   280f6:	4b0b      	ldr	r3, [pc, #44]	; (28124 <system_board_init+0x48>)
   280f8:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   280fa:	2101      	movs	r1, #1
   280fc:	2017      	movs	r0, #23
   280fe:	4b0a      	ldr	r3, [pc, #40]	; (28128 <system_board_init+0x4c>)
   28100:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   28102:	1d3b      	adds	r3, r7, #4
   28104:	2200      	movs	r2, #0
   28106:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   28108:	1d3b      	adds	r3, r7, #4
   2810a:	2201      	movs	r2, #1
   2810c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   2810e:	1d3b      	adds	r3, r7, #4
   28110:	0019      	movs	r1, r3
   28112:	2037      	movs	r0, #55	; 0x37
   28114:	4b03      	ldr	r3, [pc, #12]	; (28124 <system_board_init+0x48>)
   28116:	4798      	blx	r3
}
   28118:	46c0      	nop			; (mov r8, r8)
   2811a:	46bd      	mov	sp, r7
   2811c:	b002      	add	sp, #8
   2811e:	bd80      	pop	{r7, pc}
   28120:	00028065 	.word	0x00028065
   28124:	00028751 	.word	0x00028751
   28128:	00028089 	.word	0x00028089

0002812c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   2812c:	b580      	push	{r7, lr}
   2812e:	b084      	sub	sp, #16
   28130:	af00      	add	r7, sp, #0
   28132:	0002      	movs	r2, r0
   28134:	1dfb      	adds	r3, r7, #7
   28136:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   28138:	230f      	movs	r3, #15
   2813a:	18fb      	adds	r3, r7, r3
   2813c:	1dfa      	adds	r2, r7, #7
   2813e:	7812      	ldrb	r2, [r2, #0]
   28140:	0952      	lsrs	r2, r2, #5
   28142:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   28144:	230f      	movs	r3, #15
   28146:	18fb      	adds	r3, r7, r3
   28148:	781b      	ldrb	r3, [r3, #0]
   2814a:	2b00      	cmp	r3, #0
   2814c:	d10c      	bne.n	28168 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2814e:	4b09      	ldr	r3, [pc, #36]	; (28174 <_extint_get_eic_from_channel+0x48>)
   28150:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   28152:	230f      	movs	r3, #15
   28154:	18fb      	adds	r3, r7, r3
   28156:	781b      	ldrb	r3, [r3, #0]
   28158:	009b      	lsls	r3, r3, #2
   2815a:	2210      	movs	r2, #16
   2815c:	4694      	mov	ip, r2
   2815e:	44bc      	add	ip, r7
   28160:	4463      	add	r3, ip
   28162:	3b08      	subs	r3, #8
   28164:	681b      	ldr	r3, [r3, #0]
   28166:	e000      	b.n	2816a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   28168:	2300      	movs	r3, #0
	}
}
   2816a:	0018      	movs	r0, r3
   2816c:	46bd      	mov	sp, r7
   2816e:	b004      	add	sp, #16
   28170:	bd80      	pop	{r7, pc}
   28172:	46c0      	nop			; (mov r8, r8)
   28174:	40001800 	.word	0x40001800

00028178 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   28178:	b580      	push	{r7, lr}
   2817a:	b084      	sub	sp, #16
   2817c:	af00      	add	r7, sp, #0
   2817e:	0002      	movs	r2, r0
   28180:	1dfb      	adds	r3, r7, #7
   28182:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   28184:	1dfb      	adds	r3, r7, #7
   28186:	781b      	ldrb	r3, [r3, #0]
   28188:	0018      	movs	r0, r3
   2818a:	4b0b      	ldr	r3, [pc, #44]	; (281b8 <extint_chan_is_detected+0x40>)
   2818c:	4798      	blx	r3
   2818e:	0003      	movs	r3, r0
   28190:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   28192:	1dfb      	adds	r3, r7, #7
   28194:	781b      	ldrb	r3, [r3, #0]
   28196:	221f      	movs	r2, #31
   28198:	4013      	ands	r3, r2
   2819a:	2201      	movs	r2, #1
   2819c:	409a      	lsls	r2, r3
   2819e:	0013      	movs	r3, r2
   281a0:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   281a2:	68fb      	ldr	r3, [r7, #12]
   281a4:	691b      	ldr	r3, [r3, #16]
   281a6:	68ba      	ldr	r2, [r7, #8]
   281a8:	4013      	ands	r3, r2
   281aa:	1e5a      	subs	r2, r3, #1
   281ac:	4193      	sbcs	r3, r2
   281ae:	b2db      	uxtb	r3, r3
}
   281b0:	0018      	movs	r0, r3
   281b2:	46bd      	mov	sp, r7
   281b4:	b004      	add	sp, #16
   281b6:	bd80      	pop	{r7, pc}
   281b8:	0002812d 	.word	0x0002812d

000281bc <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   281bc:	b580      	push	{r7, lr}
   281be:	b084      	sub	sp, #16
   281c0:	af00      	add	r7, sp, #0
   281c2:	0002      	movs	r2, r0
   281c4:	1dfb      	adds	r3, r7, #7
   281c6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   281c8:	1dfb      	adds	r3, r7, #7
   281ca:	781b      	ldrb	r3, [r3, #0]
   281cc:	0018      	movs	r0, r3
   281ce:	4b09      	ldr	r3, [pc, #36]	; (281f4 <extint_chan_clear_detected+0x38>)
   281d0:	4798      	blx	r3
   281d2:	0003      	movs	r3, r0
   281d4:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   281d6:	1dfb      	adds	r3, r7, #7
   281d8:	781b      	ldrb	r3, [r3, #0]
   281da:	221f      	movs	r2, #31
   281dc:	4013      	ands	r3, r2
   281de:	2201      	movs	r2, #1
   281e0:	409a      	lsls	r2, r3
   281e2:	0013      	movs	r3, r2
   281e4:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   281e6:	68fb      	ldr	r3, [r7, #12]
   281e8:	68ba      	ldr	r2, [r7, #8]
   281ea:	611a      	str	r2, [r3, #16]
}
   281ec:	46c0      	nop			; (mov r8, r8)
   281ee:	46bd      	mov	sp, r7
   281f0:	b004      	add	sp, #16
   281f2:	bd80      	pop	{r7, pc}
   281f4:	0002812d 	.word	0x0002812d

000281f8 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   281f8:	b580      	push	{r7, lr}
   281fa:	b082      	sub	sp, #8
   281fc:	af00      	add	r7, sp, #0
   281fe:	6078      	str	r0, [r7, #4]
   28200:	0008      	movs	r0, r1
   28202:	0011      	movs	r1, r2
   28204:	1cfb      	adds	r3, r7, #3
   28206:	1c02      	adds	r2, r0, #0
   28208:	701a      	strb	r2, [r3, #0]
   2820a:	1cbb      	adds	r3, r7, #2
   2820c:	1c0a      	adds	r2, r1, #0
   2820e:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   28210:	1cbb      	adds	r3, r7, #2
   28212:	781b      	ldrb	r3, [r3, #0]
   28214:	2b00      	cmp	r3, #0
   28216:	d001      	beq.n	2821c <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   28218:	2317      	movs	r3, #23
   2821a:	e019      	b.n	28250 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   2821c:	1cfb      	adds	r3, r7, #3
   2821e:	781a      	ldrb	r2, [r3, #0]
   28220:	4b0d      	ldr	r3, [pc, #52]	; (28258 <extint_register_callback+0x60>)
   28222:	0092      	lsls	r2, r2, #2
   28224:	58d3      	ldr	r3, [r2, r3]
   28226:	2b00      	cmp	r3, #0
   28228:	d107      	bne.n	2823a <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   2822a:	1cfb      	adds	r3, r7, #3
   2822c:	781a      	ldrb	r2, [r3, #0]
   2822e:	4b0a      	ldr	r3, [pc, #40]	; (28258 <extint_register_callback+0x60>)
   28230:	0092      	lsls	r2, r2, #2
   28232:	6879      	ldr	r1, [r7, #4]
   28234:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   28236:	2300      	movs	r3, #0
   28238:	e00a      	b.n	28250 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   2823a:	1cfb      	adds	r3, r7, #3
   2823c:	781a      	ldrb	r2, [r3, #0]
   2823e:	4b06      	ldr	r3, [pc, #24]	; (28258 <extint_register_callback+0x60>)
   28240:	0092      	lsls	r2, r2, #2
   28242:	58d2      	ldr	r2, [r2, r3]
   28244:	687b      	ldr	r3, [r7, #4]
   28246:	429a      	cmp	r2, r3
   28248:	d101      	bne.n	2824e <extint_register_callback+0x56>
		return STATUS_OK;
   2824a:	2300      	movs	r3, #0
   2824c:	e000      	b.n	28250 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   2824e:	231d      	movs	r3, #29
}
   28250:	0018      	movs	r0, r3
   28252:	46bd      	mov	sp, r7
   28254:	b002      	add	sp, #8
   28256:	bd80      	pop	{r7, pc}
   28258:	200057f0 	.word	0x200057f0

0002825c <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   2825c:	b580      	push	{r7, lr}
   2825e:	b084      	sub	sp, #16
   28260:	af00      	add	r7, sp, #0
   28262:	0002      	movs	r2, r0
   28264:	1dfb      	adds	r3, r7, #7
   28266:	701a      	strb	r2, [r3, #0]
   28268:	1dbb      	adds	r3, r7, #6
   2826a:	1c0a      	adds	r2, r1, #0
   2826c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   2826e:	1dbb      	adds	r3, r7, #6
   28270:	781b      	ldrb	r3, [r3, #0]
   28272:	2b00      	cmp	r3, #0
   28274:	d10e      	bne.n	28294 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   28276:	1dfb      	adds	r3, r7, #7
   28278:	781b      	ldrb	r3, [r3, #0]
   2827a:	0018      	movs	r0, r3
   2827c:	4b08      	ldr	r3, [pc, #32]	; (282a0 <extint_chan_enable_callback+0x44>)
   2827e:	4798      	blx	r3
   28280:	0003      	movs	r3, r0
   28282:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   28284:	1dfb      	adds	r3, r7, #7
   28286:	781b      	ldrb	r3, [r3, #0]
   28288:	2201      	movs	r2, #1
   2828a:	409a      	lsls	r2, r3
   2828c:	68fb      	ldr	r3, [r7, #12]
   2828e:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   28290:	2300      	movs	r3, #0
   28292:	e000      	b.n	28296 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   28294:	2317      	movs	r3, #23
}
   28296:	0018      	movs	r0, r3
   28298:	46bd      	mov	sp, r7
   2829a:	b004      	add	sp, #16
   2829c:	bd80      	pop	{r7, pc}
   2829e:	46c0      	nop			; (mov r8, r8)
   282a0:	0002812d 	.word	0x0002812d

000282a4 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   282a4:	b580      	push	{r7, lr}
   282a6:	b084      	sub	sp, #16
   282a8:	af00      	add	r7, sp, #0
   282aa:	0002      	movs	r2, r0
   282ac:	1dfb      	adds	r3, r7, #7
   282ae:	701a      	strb	r2, [r3, #0]
   282b0:	1dbb      	adds	r3, r7, #6
   282b2:	1c0a      	adds	r2, r1, #0
   282b4:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   282b6:	1dbb      	adds	r3, r7, #6
   282b8:	781b      	ldrb	r3, [r3, #0]
   282ba:	2b00      	cmp	r3, #0
   282bc:	d10e      	bne.n	282dc <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   282be:	1dfb      	adds	r3, r7, #7
   282c0:	781b      	ldrb	r3, [r3, #0]
   282c2:	0018      	movs	r0, r3
   282c4:	4b08      	ldr	r3, [pc, #32]	; (282e8 <extint_chan_disable_callback+0x44>)
   282c6:	4798      	blx	r3
   282c8:	0003      	movs	r3, r0
   282ca:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   282cc:	1dfb      	adds	r3, r7, #7
   282ce:	781b      	ldrb	r3, [r3, #0]
   282d0:	2201      	movs	r2, #1
   282d2:	409a      	lsls	r2, r3
   282d4:	68fb      	ldr	r3, [r7, #12]
   282d6:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   282d8:	2300      	movs	r3, #0
   282da:	e000      	b.n	282de <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   282dc:	2317      	movs	r3, #23
}
   282de:	0018      	movs	r0, r3
   282e0:	46bd      	mov	sp, r7
   282e2:	b004      	add	sp, #16
   282e4:	bd80      	pop	{r7, pc}
   282e6:	46c0      	nop			; (mov r8, r8)
   282e8:	0002812d 	.word	0x0002812d

000282ec <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   282ec:	b580      	push	{r7, lr}
   282ee:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   282f0:	4b15      	ldr	r3, [pc, #84]	; (28348 <EIC_Handler+0x5c>)
   282f2:	2200      	movs	r2, #0
   282f4:	701a      	strb	r2, [r3, #0]
   282f6:	e020      	b.n	2833a <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   282f8:	4b13      	ldr	r3, [pc, #76]	; (28348 <EIC_Handler+0x5c>)
   282fa:	781b      	ldrb	r3, [r3, #0]
   282fc:	0018      	movs	r0, r3
   282fe:	4b13      	ldr	r3, [pc, #76]	; (2834c <EIC_Handler+0x60>)
   28300:	4798      	blx	r3
   28302:	1e03      	subs	r3, r0, #0
   28304:	d013      	beq.n	2832e <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   28306:	4b10      	ldr	r3, [pc, #64]	; (28348 <EIC_Handler+0x5c>)
   28308:	781b      	ldrb	r3, [r3, #0]
   2830a:	0018      	movs	r0, r3
   2830c:	4b10      	ldr	r3, [pc, #64]	; (28350 <EIC_Handler+0x64>)
   2830e:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   28310:	4b0d      	ldr	r3, [pc, #52]	; (28348 <EIC_Handler+0x5c>)
   28312:	781b      	ldrb	r3, [r3, #0]
   28314:	001a      	movs	r2, r3
   28316:	4b0f      	ldr	r3, [pc, #60]	; (28354 <EIC_Handler+0x68>)
   28318:	0092      	lsls	r2, r2, #2
   2831a:	58d3      	ldr	r3, [r2, r3]
   2831c:	2b00      	cmp	r3, #0
   2831e:	d006      	beq.n	2832e <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   28320:	4b09      	ldr	r3, [pc, #36]	; (28348 <EIC_Handler+0x5c>)
   28322:	781b      	ldrb	r3, [r3, #0]
   28324:	001a      	movs	r2, r3
   28326:	4b0b      	ldr	r3, [pc, #44]	; (28354 <EIC_Handler+0x68>)
   28328:	0092      	lsls	r2, r2, #2
   2832a:	58d3      	ldr	r3, [r2, r3]
   2832c:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2832e:	4b06      	ldr	r3, [pc, #24]	; (28348 <EIC_Handler+0x5c>)
   28330:	781b      	ldrb	r3, [r3, #0]
   28332:	3301      	adds	r3, #1
   28334:	b2da      	uxtb	r2, r3
   28336:	4b04      	ldr	r3, [pc, #16]	; (28348 <EIC_Handler+0x5c>)
   28338:	701a      	strb	r2, [r3, #0]
   2833a:	4b03      	ldr	r3, [pc, #12]	; (28348 <EIC_Handler+0x5c>)
   2833c:	781b      	ldrb	r3, [r3, #0]
   2833e:	2b0f      	cmp	r3, #15
   28340:	d9da      	bls.n	282f8 <EIC_Handler+0xc>
			}
		}
	}
}
   28342:	46c0      	nop			; (mov r8, r8)
   28344:	46bd      	mov	sp, r7
   28346:	bd80      	pop	{r7, pc}
   28348:	200057ec 	.word	0x200057ec
   2834c:	00028179 	.word	0x00028179
   28350:	000281bd 	.word	0x000281bd
   28354:	200057f0 	.word	0x200057f0

00028358 <system_gclk_chan_get_config_defaults>:
{
   28358:	b580      	push	{r7, lr}
   2835a:	b082      	sub	sp, #8
   2835c:	af00      	add	r7, sp, #0
   2835e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28360:	687b      	ldr	r3, [r7, #4]
   28362:	2200      	movs	r2, #0
   28364:	701a      	strb	r2, [r3, #0]
}
   28366:	46c0      	nop			; (mov r8, r8)
   28368:	46bd      	mov	sp, r7
   2836a:	b002      	add	sp, #8
   2836c:	bd80      	pop	{r7, pc}
	...

00028370 <system_apb_clock_set_mask>:
{
   28370:	b580      	push	{r7, lr}
   28372:	b082      	sub	sp, #8
   28374:	af00      	add	r7, sp, #0
   28376:	0002      	movs	r2, r0
   28378:	6039      	str	r1, [r7, #0]
   2837a:	1dfb      	adds	r3, r7, #7
   2837c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2837e:	1dfb      	adds	r3, r7, #7
   28380:	781b      	ldrb	r3, [r3, #0]
   28382:	2b01      	cmp	r3, #1
   28384:	d00a      	beq.n	2839c <system_apb_clock_set_mask+0x2c>
   28386:	2b02      	cmp	r3, #2
   28388:	d00f      	beq.n	283aa <system_apb_clock_set_mask+0x3a>
   2838a:	2b00      	cmp	r3, #0
   2838c:	d114      	bne.n	283b8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2838e:	4b0e      	ldr	r3, [pc, #56]	; (283c8 <system_apb_clock_set_mask+0x58>)
   28390:	4a0d      	ldr	r2, [pc, #52]	; (283c8 <system_apb_clock_set_mask+0x58>)
   28392:	6991      	ldr	r1, [r2, #24]
   28394:	683a      	ldr	r2, [r7, #0]
   28396:	430a      	orrs	r2, r1
   28398:	619a      	str	r2, [r3, #24]
			break;
   2839a:	e00f      	b.n	283bc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2839c:	4b0a      	ldr	r3, [pc, #40]	; (283c8 <system_apb_clock_set_mask+0x58>)
   2839e:	4a0a      	ldr	r2, [pc, #40]	; (283c8 <system_apb_clock_set_mask+0x58>)
   283a0:	69d1      	ldr	r1, [r2, #28]
   283a2:	683a      	ldr	r2, [r7, #0]
   283a4:	430a      	orrs	r2, r1
   283a6:	61da      	str	r2, [r3, #28]
			break;
   283a8:	e008      	b.n	283bc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   283aa:	4b07      	ldr	r3, [pc, #28]	; (283c8 <system_apb_clock_set_mask+0x58>)
   283ac:	4a06      	ldr	r2, [pc, #24]	; (283c8 <system_apb_clock_set_mask+0x58>)
   283ae:	6a11      	ldr	r1, [r2, #32]
   283b0:	683a      	ldr	r2, [r7, #0]
   283b2:	430a      	orrs	r2, r1
   283b4:	621a      	str	r2, [r3, #32]
			break;
   283b6:	e001      	b.n	283bc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   283b8:	2317      	movs	r3, #23
   283ba:	e000      	b.n	283be <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   283bc:	2300      	movs	r3, #0
}
   283be:	0018      	movs	r0, r3
   283c0:	46bd      	mov	sp, r7
   283c2:	b002      	add	sp, #8
   283c4:	bd80      	pop	{r7, pc}
   283c6:	46c0      	nop			; (mov r8, r8)
   283c8:	40000400 	.word	0x40000400

000283cc <system_pinmux_get_config_defaults>:
{
   283cc:	b580      	push	{r7, lr}
   283ce:	b082      	sub	sp, #8
   283d0:	af00      	add	r7, sp, #0
   283d2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   283d4:	687b      	ldr	r3, [r7, #4]
   283d6:	2280      	movs	r2, #128	; 0x80
   283d8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   283da:	687b      	ldr	r3, [r7, #4]
   283dc:	2200      	movs	r2, #0
   283de:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   283e0:	687b      	ldr	r3, [r7, #4]
   283e2:	2201      	movs	r2, #1
   283e4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   283e6:	687b      	ldr	r3, [r7, #4]
   283e8:	2200      	movs	r2, #0
   283ea:	70da      	strb	r2, [r3, #3]
}
   283ec:	46c0      	nop			; (mov r8, r8)
   283ee:	46bd      	mov	sp, r7
   283f0:	b002      	add	sp, #8
   283f2:	bd80      	pop	{r7, pc}

000283f4 <system_interrupt_enable>:
{
   283f4:	b580      	push	{r7, lr}
   283f6:	b082      	sub	sp, #8
   283f8:	af00      	add	r7, sp, #0
   283fa:	0002      	movs	r2, r0
   283fc:	1dfb      	adds	r3, r7, #7
   283fe:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   28400:	4b06      	ldr	r3, [pc, #24]	; (2841c <system_interrupt_enable+0x28>)
   28402:	1dfa      	adds	r2, r7, #7
   28404:	7812      	ldrb	r2, [r2, #0]
   28406:	0011      	movs	r1, r2
   28408:	221f      	movs	r2, #31
   2840a:	400a      	ands	r2, r1
   2840c:	2101      	movs	r1, #1
   2840e:	4091      	lsls	r1, r2
   28410:	000a      	movs	r2, r1
   28412:	601a      	str	r2, [r3, #0]
}
   28414:	46c0      	nop			; (mov r8, r8)
   28416:	46bd      	mov	sp, r7
   28418:	b002      	add	sp, #8
   2841a:	bd80      	pop	{r7, pc}
   2841c:	e000e100 	.word	0xe000e100

00028420 <_extint_get_eic_from_channel>:
{
   28420:	b580      	push	{r7, lr}
   28422:	b084      	sub	sp, #16
   28424:	af00      	add	r7, sp, #0
   28426:	0002      	movs	r2, r0
   28428:	1dfb      	adds	r3, r7, #7
   2842a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   2842c:	230f      	movs	r3, #15
   2842e:	18fb      	adds	r3, r7, r3
   28430:	1dfa      	adds	r2, r7, #7
   28432:	7812      	ldrb	r2, [r2, #0]
   28434:	0952      	lsrs	r2, r2, #5
   28436:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   28438:	230f      	movs	r3, #15
   2843a:	18fb      	adds	r3, r7, r3
   2843c:	781b      	ldrb	r3, [r3, #0]
   2843e:	2b00      	cmp	r3, #0
   28440:	d10c      	bne.n	2845c <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   28442:	4b09      	ldr	r3, [pc, #36]	; (28468 <_extint_get_eic_from_channel+0x48>)
   28444:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   28446:	230f      	movs	r3, #15
   28448:	18fb      	adds	r3, r7, r3
   2844a:	781b      	ldrb	r3, [r3, #0]
   2844c:	009b      	lsls	r3, r3, #2
   2844e:	2210      	movs	r2, #16
   28450:	4694      	mov	ip, r2
   28452:	44bc      	add	ip, r7
   28454:	4463      	add	r3, ip
   28456:	3b08      	subs	r3, #8
   28458:	681b      	ldr	r3, [r3, #0]
   2845a:	e000      	b.n	2845e <_extint_get_eic_from_channel+0x3e>
		return NULL;
   2845c:	2300      	movs	r3, #0
}
   2845e:	0018      	movs	r0, r3
   28460:	46bd      	mov	sp, r7
   28462:	b004      	add	sp, #16
   28464:	bd80      	pop	{r7, pc}
   28466:	46c0      	nop			; (mov r8, r8)
   28468:	40001800 	.word	0x40001800

0002846c <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   2846c:	b580      	push	{r7, lr}
   2846e:	b082      	sub	sp, #8
   28470:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   28472:	4b0f      	ldr	r3, [pc, #60]	; (284b0 <extint_is_syncing+0x44>)
   28474:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   28476:	2300      	movs	r3, #0
   28478:	607b      	str	r3, [r7, #4]
   2847a:	e011      	b.n	284a0 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   2847c:	687b      	ldr	r3, [r7, #4]
   2847e:	009b      	lsls	r3, r3, #2
   28480:	2208      	movs	r2, #8
   28482:	4694      	mov	ip, r2
   28484:	44bc      	add	ip, r7
   28486:	4463      	add	r3, ip
   28488:	3b08      	subs	r3, #8
   2848a:	681b      	ldr	r3, [r3, #0]
   2848c:	785b      	ldrb	r3, [r3, #1]
   2848e:	b2db      	uxtb	r3, r3
   28490:	b25b      	sxtb	r3, r3
   28492:	2b00      	cmp	r3, #0
   28494:	da01      	bge.n	2849a <extint_is_syncing+0x2e>
			return true;
   28496:	2301      	movs	r3, #1
   28498:	e006      	b.n	284a8 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2849a:	687b      	ldr	r3, [r7, #4]
   2849c:	3301      	adds	r3, #1
   2849e:	607b      	str	r3, [r7, #4]
   284a0:	687b      	ldr	r3, [r7, #4]
   284a2:	2b00      	cmp	r3, #0
   284a4:	d0ea      	beq.n	2847c <extint_is_syncing+0x10>
		}
	}
	return false;
   284a6:	2300      	movs	r3, #0
}
   284a8:	0018      	movs	r0, r3
   284aa:	46bd      	mov	sp, r7
   284ac:	b002      	add	sp, #8
   284ae:	bd80      	pop	{r7, pc}
   284b0:	40001800 	.word	0x40001800

000284b4 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   284b4:	b580      	push	{r7, lr}
   284b6:	b084      	sub	sp, #16
   284b8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   284ba:	4b2d      	ldr	r3, [pc, #180]	; (28570 <_system_extint_init+0xbc>)
   284bc:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   284be:	2140      	movs	r1, #64	; 0x40
   284c0:	2000      	movs	r0, #0
   284c2:	4b2c      	ldr	r3, [pc, #176]	; (28574 <_system_extint_init+0xc0>)
   284c4:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   284c6:	003b      	movs	r3, r7
   284c8:	0018      	movs	r0, r3
   284ca:	4b2b      	ldr	r3, [pc, #172]	; (28578 <_system_extint_init+0xc4>)
   284cc:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   284ce:	003b      	movs	r3, r7
   284d0:	2200      	movs	r2, #0
   284d2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   284d4:	003b      	movs	r3, r7
   284d6:	0019      	movs	r1, r3
   284d8:	2005      	movs	r0, #5
   284da:	4b28      	ldr	r3, [pc, #160]	; (2857c <_system_extint_init+0xc8>)
   284dc:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   284de:	2005      	movs	r0, #5
   284e0:	4b27      	ldr	r3, [pc, #156]	; (28580 <_system_extint_init+0xcc>)
   284e2:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   284e4:	2300      	movs	r3, #0
   284e6:	60fb      	str	r3, [r7, #12]
   284e8:	e018      	b.n	2851c <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   284ea:	68fb      	ldr	r3, [r7, #12]
   284ec:	009b      	lsls	r3, r3, #2
   284ee:	2210      	movs	r2, #16
   284f0:	4694      	mov	ip, r2
   284f2:	44bc      	add	ip, r7
   284f4:	4463      	add	r3, ip
   284f6:	3b0c      	subs	r3, #12
   284f8:	681a      	ldr	r2, [r3, #0]
   284fa:	68fb      	ldr	r3, [r7, #12]
   284fc:	009b      	lsls	r3, r3, #2
   284fe:	2110      	movs	r1, #16
   28500:	468c      	mov	ip, r1
   28502:	44bc      	add	ip, r7
   28504:	4463      	add	r3, ip
   28506:	3b0c      	subs	r3, #12
   28508:	681b      	ldr	r3, [r3, #0]
   2850a:	781b      	ldrb	r3, [r3, #0]
   2850c:	b2db      	uxtb	r3, r3
   2850e:	2101      	movs	r1, #1
   28510:	430b      	orrs	r3, r1
   28512:	b2db      	uxtb	r3, r3
   28514:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   28516:	68fb      	ldr	r3, [r7, #12]
   28518:	3301      	adds	r3, #1
   2851a:	60fb      	str	r3, [r7, #12]
   2851c:	68fb      	ldr	r3, [r7, #12]
   2851e:	2b00      	cmp	r3, #0
   28520:	d0e3      	beq.n	284ea <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   28522:	46c0      	nop			; (mov r8, r8)
   28524:	4b17      	ldr	r3, [pc, #92]	; (28584 <_system_extint_init+0xd0>)
   28526:	4798      	blx	r3
   28528:	1e03      	subs	r3, r0, #0
   2852a:	d1fb      	bne.n	28524 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   2852c:	230b      	movs	r3, #11
   2852e:	18fb      	adds	r3, r7, r3
   28530:	2200      	movs	r2, #0
   28532:	701a      	strb	r2, [r3, #0]
   28534:	e00d      	b.n	28552 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   28536:	230b      	movs	r3, #11
   28538:	18fb      	adds	r3, r7, r3
   2853a:	781a      	ldrb	r2, [r3, #0]
   2853c:	4b12      	ldr	r3, [pc, #72]	; (28588 <_system_extint_init+0xd4>)
   2853e:	0092      	lsls	r2, r2, #2
   28540:	2100      	movs	r1, #0
   28542:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   28544:	230b      	movs	r3, #11
   28546:	18fb      	adds	r3, r7, r3
   28548:	781a      	ldrb	r2, [r3, #0]
   2854a:	230b      	movs	r3, #11
   2854c:	18fb      	adds	r3, r7, r3
   2854e:	3201      	adds	r2, #1
   28550:	701a      	strb	r2, [r3, #0]
   28552:	230b      	movs	r3, #11
   28554:	18fb      	adds	r3, r7, r3
   28556:	781b      	ldrb	r3, [r3, #0]
   28558:	2b0f      	cmp	r3, #15
   2855a:	d9ec      	bls.n	28536 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   2855c:	2004      	movs	r0, #4
   2855e:	4b0b      	ldr	r3, [pc, #44]	; (2858c <_system_extint_init+0xd8>)
   28560:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   28562:	4b0b      	ldr	r3, [pc, #44]	; (28590 <_system_extint_init+0xdc>)
   28564:	4798      	blx	r3
}
   28566:	46c0      	nop			; (mov r8, r8)
   28568:	46bd      	mov	sp, r7
   2856a:	b004      	add	sp, #16
   2856c:	bd80      	pop	{r7, pc}
   2856e:	46c0      	nop			; (mov r8, r8)
   28570:	40001800 	.word	0x40001800
   28574:	00028371 	.word	0x00028371
   28578:	00028359 	.word	0x00028359
   2857c:	0002bc3d 	.word	0x0002bc3d
   28580:	0002bc81 	.word	0x0002bc81
   28584:	0002846d 	.word	0x0002846d
   28588:	200057f0 	.word	0x200057f0
   2858c:	000283f5 	.word	0x000283f5
   28590:	00028595 	.word	0x00028595

00028594 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   28594:	b580      	push	{r7, lr}
   28596:	b082      	sub	sp, #8
   28598:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2859a:	4b15      	ldr	r3, [pc, #84]	; (285f0 <_extint_enable+0x5c>)
   2859c:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2859e:	2300      	movs	r3, #0
   285a0:	607b      	str	r3, [r7, #4]
   285a2:	e018      	b.n	285d6 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   285a4:	687b      	ldr	r3, [r7, #4]
   285a6:	009b      	lsls	r3, r3, #2
   285a8:	2208      	movs	r2, #8
   285aa:	4694      	mov	ip, r2
   285ac:	44bc      	add	ip, r7
   285ae:	4463      	add	r3, ip
   285b0:	3b08      	subs	r3, #8
   285b2:	681a      	ldr	r2, [r3, #0]
   285b4:	687b      	ldr	r3, [r7, #4]
   285b6:	009b      	lsls	r3, r3, #2
   285b8:	2108      	movs	r1, #8
   285ba:	468c      	mov	ip, r1
   285bc:	44bc      	add	ip, r7
   285be:	4463      	add	r3, ip
   285c0:	3b08      	subs	r3, #8
   285c2:	681b      	ldr	r3, [r3, #0]
   285c4:	781b      	ldrb	r3, [r3, #0]
   285c6:	b2db      	uxtb	r3, r3
   285c8:	2102      	movs	r1, #2
   285ca:	430b      	orrs	r3, r1
   285cc:	b2db      	uxtb	r3, r3
   285ce:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   285d0:	687b      	ldr	r3, [r7, #4]
   285d2:	3301      	adds	r3, #1
   285d4:	607b      	str	r3, [r7, #4]
   285d6:	687b      	ldr	r3, [r7, #4]
   285d8:	2b00      	cmp	r3, #0
   285da:	d0e3      	beq.n	285a4 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   285dc:	46c0      	nop			; (mov r8, r8)
   285de:	4b05      	ldr	r3, [pc, #20]	; (285f4 <_extint_enable+0x60>)
   285e0:	4798      	blx	r3
   285e2:	1e03      	subs	r3, r0, #0
   285e4:	d1fb      	bne.n	285de <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   285e6:	46c0      	nop			; (mov r8, r8)
   285e8:	46bd      	mov	sp, r7
   285ea:	b002      	add	sp, #8
   285ec:	bd80      	pop	{r7, pc}
   285ee:	46c0      	nop			; (mov r8, r8)
   285f0:	40001800 	.word	0x40001800
   285f4:	0002846d 	.word	0x0002846d

000285f8 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   285f8:	b580      	push	{r7, lr}
   285fa:	b082      	sub	sp, #8
   285fc:	af00      	add	r7, sp, #0
   285fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   28600:	687b      	ldr	r3, [r7, #4]
   28602:	2200      	movs	r2, #0
   28604:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   28606:	687b      	ldr	r3, [r7, #4]
   28608:	2200      	movs	r2, #0
   2860a:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   2860c:	687b      	ldr	r3, [r7, #4]
   2860e:	2201      	movs	r2, #1
   28610:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   28612:	687b      	ldr	r3, [r7, #4]
   28614:	2201      	movs	r2, #1
   28616:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   28618:	687b      	ldr	r3, [r7, #4]
   2861a:	2200      	movs	r2, #0
   2861c:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   2861e:	687b      	ldr	r3, [r7, #4]
   28620:	2202      	movs	r2, #2
   28622:	72da      	strb	r2, [r3, #11]
}
   28624:	46c0      	nop			; (mov r8, r8)
   28626:	46bd      	mov	sp, r7
   28628:	b002      	add	sp, #8
   2862a:	bd80      	pop	{r7, pc}

0002862c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   2862c:	b580      	push	{r7, lr}
   2862e:	b086      	sub	sp, #24
   28630:	af00      	add	r7, sp, #0
   28632:	0002      	movs	r2, r0
   28634:	6039      	str	r1, [r7, #0]
   28636:	1dfb      	adds	r3, r7, #7
   28638:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   2863a:	2308      	movs	r3, #8
   2863c:	18fb      	adds	r3, r7, r3
   2863e:	0018      	movs	r0, r3
   28640:	4b36      	ldr	r3, [pc, #216]	; (2871c <extint_chan_set_config+0xf0>)
   28642:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   28644:	683b      	ldr	r3, [r7, #0]
   28646:	685b      	ldr	r3, [r3, #4]
   28648:	b2da      	uxtb	r2, r3
   2864a:	2308      	movs	r3, #8
   2864c:	18fb      	adds	r3, r7, r3
   2864e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28650:	2308      	movs	r3, #8
   28652:	18fb      	adds	r3, r7, r3
   28654:	2200      	movs	r2, #0
   28656:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   28658:	683b      	ldr	r3, [r7, #0]
   2865a:	7a1a      	ldrb	r2, [r3, #8]
   2865c:	2308      	movs	r3, #8
   2865e:	18fb      	adds	r3, r7, r3
   28660:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   28662:	683b      	ldr	r3, [r7, #0]
   28664:	681b      	ldr	r3, [r3, #0]
   28666:	b2db      	uxtb	r3, r3
   28668:	2208      	movs	r2, #8
   2866a:	18ba      	adds	r2, r7, r2
   2866c:	0011      	movs	r1, r2
   2866e:	0018      	movs	r0, r3
   28670:	4b2b      	ldr	r3, [pc, #172]	; (28720 <extint_chan_set_config+0xf4>)
   28672:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   28674:	1dfb      	adds	r3, r7, #7
   28676:	781b      	ldrb	r3, [r3, #0]
   28678:	0018      	movs	r0, r3
   2867a:	4b2a      	ldr	r3, [pc, #168]	; (28724 <extint_chan_set_config+0xf8>)
   2867c:	4798      	blx	r3
   2867e:	0003      	movs	r3, r0
   28680:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   28682:	1dfb      	adds	r3, r7, #7
   28684:	781b      	ldrb	r3, [r3, #0]
   28686:	2207      	movs	r2, #7
   28688:	4013      	ands	r3, r2
   2868a:	009b      	lsls	r3, r3, #2
   2868c:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   2868e:	683b      	ldr	r3, [r7, #0]
   28690:	7adb      	ldrb	r3, [r3, #11]
   28692:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   28694:	683b      	ldr	r3, [r7, #0]
   28696:	7a9b      	ldrb	r3, [r3, #10]
   28698:	2b00      	cmp	r3, #0
   2869a:	d003      	beq.n	286a4 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   2869c:	697b      	ldr	r3, [r7, #20]
   2869e:	2208      	movs	r2, #8
   286a0:	4313      	orrs	r3, r2
   286a2:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   286a4:	1dfb      	adds	r3, r7, #7
   286a6:	781b      	ldrb	r3, [r3, #0]
   286a8:	08db      	lsrs	r3, r3, #3
   286aa:	b2db      	uxtb	r3, r3
   286ac:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   286ae:	1dfb      	adds	r3, r7, #7
   286b0:	781b      	ldrb	r3, [r3, #0]
   286b2:	08db      	lsrs	r3, r3, #3
   286b4:	b2db      	uxtb	r3, r3
   286b6:	001a      	movs	r2, r3
   286b8:	693b      	ldr	r3, [r7, #16]
   286ba:	3206      	adds	r2, #6
   286bc:	0092      	lsls	r2, r2, #2
   286be:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   286c0:	210f      	movs	r1, #15
   286c2:	68fa      	ldr	r2, [r7, #12]
   286c4:	4091      	lsls	r1, r2
   286c6:	000a      	movs	r2, r1
   286c8:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   286ca:	401a      	ands	r2, r3
			(new_config << config_pos);
   286cc:	6979      	ldr	r1, [r7, #20]
   286ce:	68fb      	ldr	r3, [r7, #12]
   286d0:	4099      	lsls	r1, r3
   286d2:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   286d4:	431a      	orrs	r2, r3
   286d6:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   286d8:	693b      	ldr	r3, [r7, #16]
   286da:	1d82      	adds	r2, r0, #6
   286dc:	0092      	lsls	r2, r2, #2
   286de:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   286e0:	683b      	ldr	r3, [r7, #0]
   286e2:	7a5b      	ldrb	r3, [r3, #9]
   286e4:	2b00      	cmp	r3, #0
   286e6:	d00a      	beq.n	286fe <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   286e8:	693b      	ldr	r3, [r7, #16]
   286ea:	695a      	ldr	r2, [r3, #20]
   286ec:	1dfb      	adds	r3, r7, #7
   286ee:	781b      	ldrb	r3, [r3, #0]
   286f0:	2101      	movs	r1, #1
   286f2:	4099      	lsls	r1, r3
   286f4:	000b      	movs	r3, r1
   286f6:	431a      	orrs	r2, r3
   286f8:	693b      	ldr	r3, [r7, #16]
   286fa:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   286fc:	e00a      	b.n	28714 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   286fe:	693b      	ldr	r3, [r7, #16]
   28700:	695b      	ldr	r3, [r3, #20]
   28702:	1dfa      	adds	r2, r7, #7
   28704:	7812      	ldrb	r2, [r2, #0]
   28706:	2101      	movs	r1, #1
   28708:	4091      	lsls	r1, r2
   2870a:	000a      	movs	r2, r1
   2870c:	43d2      	mvns	r2, r2
   2870e:	401a      	ands	r2, r3
   28710:	693b      	ldr	r3, [r7, #16]
   28712:	615a      	str	r2, [r3, #20]
}
   28714:	46c0      	nop			; (mov r8, r8)
   28716:	46bd      	mov	sp, r7
   28718:	b006      	add	sp, #24
   2871a:	bd80      	pop	{r7, pc}
   2871c:	000283cd 	.word	0x000283cd
   28720:	0002bf9d 	.word	0x0002bf9d
   28724:	00028421 	.word	0x00028421

00028728 <system_pinmux_get_config_defaults>:
{
   28728:	b580      	push	{r7, lr}
   2872a:	b082      	sub	sp, #8
   2872c:	af00      	add	r7, sp, #0
   2872e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   28730:	687b      	ldr	r3, [r7, #4]
   28732:	2280      	movs	r2, #128	; 0x80
   28734:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28736:	687b      	ldr	r3, [r7, #4]
   28738:	2200      	movs	r2, #0
   2873a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2873c:	687b      	ldr	r3, [r7, #4]
   2873e:	2201      	movs	r2, #1
   28740:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   28742:	687b      	ldr	r3, [r7, #4]
   28744:	2200      	movs	r2, #0
   28746:	70da      	strb	r2, [r3, #3]
}
   28748:	46c0      	nop			; (mov r8, r8)
   2874a:	46bd      	mov	sp, r7
   2874c:	b002      	add	sp, #8
   2874e:	bd80      	pop	{r7, pc}

00028750 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   28750:	b580      	push	{r7, lr}
   28752:	b084      	sub	sp, #16
   28754:	af00      	add	r7, sp, #0
   28756:	0002      	movs	r2, r0
   28758:	6039      	str	r1, [r7, #0]
   2875a:	1dfb      	adds	r3, r7, #7
   2875c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   2875e:	230c      	movs	r3, #12
   28760:	18fb      	adds	r3, r7, r3
   28762:	0018      	movs	r0, r3
   28764:	4b10      	ldr	r3, [pc, #64]	; (287a8 <port_pin_set_config+0x58>)
   28766:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   28768:	230c      	movs	r3, #12
   2876a:	18fb      	adds	r3, r7, r3
   2876c:	2280      	movs	r2, #128	; 0x80
   2876e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   28770:	683b      	ldr	r3, [r7, #0]
   28772:	781a      	ldrb	r2, [r3, #0]
   28774:	230c      	movs	r3, #12
   28776:	18fb      	adds	r3, r7, r3
   28778:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   2877a:	683b      	ldr	r3, [r7, #0]
   2877c:	785a      	ldrb	r2, [r3, #1]
   2877e:	230c      	movs	r3, #12
   28780:	18fb      	adds	r3, r7, r3
   28782:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   28784:	683b      	ldr	r3, [r7, #0]
   28786:	789a      	ldrb	r2, [r3, #2]
   28788:	230c      	movs	r3, #12
   2878a:	18fb      	adds	r3, r7, r3
   2878c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   2878e:	230c      	movs	r3, #12
   28790:	18fa      	adds	r2, r7, r3
   28792:	1dfb      	adds	r3, r7, #7
   28794:	781b      	ldrb	r3, [r3, #0]
   28796:	0011      	movs	r1, r2
   28798:	0018      	movs	r0, r3
   2879a:	4b04      	ldr	r3, [pc, #16]	; (287ac <port_pin_set_config+0x5c>)
   2879c:	4798      	blx	r3
}
   2879e:	46c0      	nop			; (mov r8, r8)
   287a0:	46bd      	mov	sp, r7
   287a2:	b004      	add	sp, #16
   287a4:	bd80      	pop	{r7, pc}
   287a6:	46c0      	nop			; (mov r8, r8)
   287a8:	00028729 	.word	0x00028729
   287ac:	0002bf9d 	.word	0x0002bf9d

000287b0 <system_gclk_chan_get_config_defaults>:
{
   287b0:	b580      	push	{r7, lr}
   287b2:	b082      	sub	sp, #8
   287b4:	af00      	add	r7, sp, #0
   287b6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   287b8:	687b      	ldr	r3, [r7, #4]
   287ba:	2200      	movs	r2, #0
   287bc:	701a      	strb	r2, [r3, #0]
}
   287be:	46c0      	nop			; (mov r8, r8)
   287c0:	46bd      	mov	sp, r7
   287c2:	b002      	add	sp, #8
   287c4:	bd80      	pop	{r7, pc}
	...

000287c8 <system_apb_clock_set_mask>:
{
   287c8:	b580      	push	{r7, lr}
   287ca:	b082      	sub	sp, #8
   287cc:	af00      	add	r7, sp, #0
   287ce:	0002      	movs	r2, r0
   287d0:	6039      	str	r1, [r7, #0]
   287d2:	1dfb      	adds	r3, r7, #7
   287d4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   287d6:	1dfb      	adds	r3, r7, #7
   287d8:	781b      	ldrb	r3, [r3, #0]
   287da:	2b01      	cmp	r3, #1
   287dc:	d00a      	beq.n	287f4 <system_apb_clock_set_mask+0x2c>
   287de:	2b02      	cmp	r3, #2
   287e0:	d00f      	beq.n	28802 <system_apb_clock_set_mask+0x3a>
   287e2:	2b00      	cmp	r3, #0
   287e4:	d114      	bne.n	28810 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   287e6:	4b0e      	ldr	r3, [pc, #56]	; (28820 <system_apb_clock_set_mask+0x58>)
   287e8:	4a0d      	ldr	r2, [pc, #52]	; (28820 <system_apb_clock_set_mask+0x58>)
   287ea:	6991      	ldr	r1, [r2, #24]
   287ec:	683a      	ldr	r2, [r7, #0]
   287ee:	430a      	orrs	r2, r1
   287f0:	619a      	str	r2, [r3, #24]
			break;
   287f2:	e00f      	b.n	28814 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   287f4:	4b0a      	ldr	r3, [pc, #40]	; (28820 <system_apb_clock_set_mask+0x58>)
   287f6:	4a0a      	ldr	r2, [pc, #40]	; (28820 <system_apb_clock_set_mask+0x58>)
   287f8:	69d1      	ldr	r1, [r2, #28]
   287fa:	683a      	ldr	r2, [r7, #0]
   287fc:	430a      	orrs	r2, r1
   287fe:	61da      	str	r2, [r3, #28]
			break;
   28800:	e008      	b.n	28814 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28802:	4b07      	ldr	r3, [pc, #28]	; (28820 <system_apb_clock_set_mask+0x58>)
   28804:	4a06      	ldr	r2, [pc, #24]	; (28820 <system_apb_clock_set_mask+0x58>)
   28806:	6a11      	ldr	r1, [r2, #32]
   28808:	683a      	ldr	r2, [r7, #0]
   2880a:	430a      	orrs	r2, r1
   2880c:	621a      	str	r2, [r3, #32]
			break;
   2880e:	e001      	b.n	28814 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28810:	2317      	movs	r3, #23
   28812:	e000      	b.n	28816 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28814:	2300      	movs	r3, #0
}
   28816:	0018      	movs	r0, r3
   28818:	46bd      	mov	sp, r7
   2881a:	b002      	add	sp, #8
   2881c:	bd80      	pop	{r7, pc}
   2881e:	46c0      	nop			; (mov r8, r8)
   28820:	40000400 	.word	0x40000400

00028824 <system_interrupt_enable>:
{
   28824:	b580      	push	{r7, lr}
   28826:	b082      	sub	sp, #8
   28828:	af00      	add	r7, sp, #0
   2882a:	0002      	movs	r2, r0
   2882c:	1dfb      	adds	r3, r7, #7
   2882e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   28830:	4b06      	ldr	r3, [pc, #24]	; (2884c <system_interrupt_enable+0x28>)
   28832:	1dfa      	adds	r2, r7, #7
   28834:	7812      	ldrb	r2, [r2, #0]
   28836:	0011      	movs	r1, r2
   28838:	221f      	movs	r2, #31
   2883a:	400a      	ands	r2, r1
   2883c:	2101      	movs	r1, #1
   2883e:	4091      	lsls	r1, r2
   28840:	000a      	movs	r2, r1
   28842:	601a      	str	r2, [r3, #0]
}
   28844:	46c0      	nop			; (mov r8, r8)
   28846:	46bd      	mov	sp, r7
   28848:	b002      	add	sp, #8
   2884a:	bd80      	pop	{r7, pc}
   2884c:	e000e100 	.word	0xe000e100

00028850 <system_interrupt_disable>:
{
   28850:	b580      	push	{r7, lr}
   28852:	b082      	sub	sp, #8
   28854:	af00      	add	r7, sp, #0
   28856:	0002      	movs	r2, r0
   28858:	1dfb      	adds	r3, r7, #7
   2885a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2885c:	4a07      	ldr	r2, [pc, #28]	; (2887c <system_interrupt_disable+0x2c>)
   2885e:	1dfb      	adds	r3, r7, #7
   28860:	781b      	ldrb	r3, [r3, #0]
   28862:	0019      	movs	r1, r3
   28864:	231f      	movs	r3, #31
   28866:	400b      	ands	r3, r1
   28868:	2101      	movs	r1, #1
   2886a:	4099      	lsls	r1, r3
   2886c:	000b      	movs	r3, r1
   2886e:	0019      	movs	r1, r3
   28870:	2380      	movs	r3, #128	; 0x80
   28872:	50d1      	str	r1, [r2, r3]
}
   28874:	46c0      	nop			; (mov r8, r8)
   28876:	46bd      	mov	sp, r7
   28878:	b002      	add	sp, #8
   2887a:	bd80      	pop	{r7, pc}
   2887c:	e000e100 	.word	0xe000e100

00028880 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   28880:	b580      	push	{r7, lr}
   28882:	b084      	sub	sp, #16
   28884:	af00      	add	r7, sp, #0
   28886:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   28888:	687b      	ldr	r3, [r7, #4]
   2888a:	681b      	ldr	r3, [r3, #0]
   2888c:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   2888e:	68fb      	ldr	r3, [r7, #12]
   28890:	7a9b      	ldrb	r3, [r3, #10]
   28892:	b2db      	uxtb	r3, r3
   28894:	b25b      	sxtb	r3, r3
   28896:	2b00      	cmp	r3, #0
   28898:	da01      	bge.n	2889e <rtc_calendar_is_syncing+0x1e>
                return true;
   2889a:	2301      	movs	r3, #1
   2889c:	e000      	b.n	288a0 <rtc_calendar_is_syncing+0x20>
        }

        return false;
   2889e:	2300      	movs	r3, #0
}
   288a0:	0018      	movs	r0, r3
   288a2:	46bd      	mov	sp, r7
   288a4:	b004      	add	sp, #16
   288a6:	bd80      	pop	{r7, pc}

000288a8 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   288a8:	b580      	push	{r7, lr}
   288aa:	b084      	sub	sp, #16
   288ac:	af00      	add	r7, sp, #0
   288ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   288b0:	687b      	ldr	r3, [r7, #4]
   288b2:	681b      	ldr	r3, [r3, #0]
   288b4:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   288b6:	2003      	movs	r0, #3
   288b8:	4b0a      	ldr	r3, [pc, #40]	; (288e4 <rtc_calendar_enable+0x3c>)
   288ba:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   288bc:	46c0      	nop			; (mov r8, r8)
   288be:	687b      	ldr	r3, [r7, #4]
   288c0:	0018      	movs	r0, r3
   288c2:	4b09      	ldr	r3, [pc, #36]	; (288e8 <rtc_calendar_enable+0x40>)
   288c4:	4798      	blx	r3
   288c6:	1e03      	subs	r3, r0, #0
   288c8:	d1f9      	bne.n	288be <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   288ca:	68fb      	ldr	r3, [r7, #12]
   288cc:	881b      	ldrh	r3, [r3, #0]
   288ce:	b29b      	uxth	r3, r3
   288d0:	2202      	movs	r2, #2
   288d2:	4313      	orrs	r3, r2
   288d4:	b29a      	uxth	r2, r3
   288d6:	68fb      	ldr	r3, [r7, #12]
   288d8:	801a      	strh	r2, [r3, #0]
}
   288da:	46c0      	nop			; (mov r8, r8)
   288dc:	46bd      	mov	sp, r7
   288de:	b004      	add	sp, #16
   288e0:	bd80      	pop	{r7, pc}
   288e2:	46c0      	nop			; (mov r8, r8)
   288e4:	00028825 	.word	0x00028825
   288e8:	00028881 	.word	0x00028881

000288ec <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   288ec:	b580      	push	{r7, lr}
   288ee:	b084      	sub	sp, #16
   288f0:	af00      	add	r7, sp, #0
   288f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   288f4:	687b      	ldr	r3, [r7, #4]
   288f6:	681b      	ldr	r3, [r3, #0]
   288f8:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   288fa:	2003      	movs	r0, #3
   288fc:	4b0d      	ldr	r3, [pc, #52]	; (28934 <rtc_calendar_disable+0x48>)
   288fe:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   28900:	46c0      	nop			; (mov r8, r8)
   28902:	687b      	ldr	r3, [r7, #4]
   28904:	0018      	movs	r0, r3
   28906:	4b0c      	ldr	r3, [pc, #48]	; (28938 <rtc_calendar_disable+0x4c>)
   28908:	4798      	blx	r3
   2890a:	1e03      	subs	r3, r0, #0
   2890c:	d1f9      	bne.n	28902 <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   2890e:	68fb      	ldr	r3, [r7, #12]
   28910:	22c1      	movs	r2, #193	; 0xc1
   28912:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   28914:	68fb      	ldr	r3, [r7, #12]
   28916:	22c1      	movs	r2, #193	; 0xc1
   28918:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   2891a:	68fb      	ldr	r3, [r7, #12]
   2891c:	881b      	ldrh	r3, [r3, #0]
   2891e:	b29b      	uxth	r3, r3
   28920:	2202      	movs	r2, #2
   28922:	4393      	bics	r3, r2
   28924:	b29a      	uxth	r2, r3
   28926:	68fb      	ldr	r3, [r7, #12]
   28928:	801a      	strh	r2, [r3, #0]
}
   2892a:	46c0      	nop			; (mov r8, r8)
   2892c:	46bd      	mov	sp, r7
   2892e:	b004      	add	sp, #16
   28930:	bd80      	pop	{r7, pc}
   28932:	46c0      	nop			; (mov r8, r8)
   28934:	00028851 	.word	0x00028851
   28938:	00028881 	.word	0x00028881

0002893c <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   2893c:	b580      	push	{r7, lr}
   2893e:	b084      	sub	sp, #16
   28940:	af00      	add	r7, sp, #0
   28942:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   28944:	687b      	ldr	r3, [r7, #4]
   28946:	681b      	ldr	r3, [r3, #0]
   28948:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   2894a:	687b      	ldr	r3, [r7, #4]
   2894c:	0018      	movs	r0, r3
   2894e:	4b0d      	ldr	r3, [pc, #52]	; (28984 <rtc_calendar_reset+0x48>)
   28950:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   28952:	687b      	ldr	r3, [r7, #4]
   28954:	2200      	movs	r2, #0
   28956:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   28958:	687b      	ldr	r3, [r7, #4]
   2895a:	2200      	movs	r2, #0
   2895c:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   2895e:	46c0      	nop			; (mov r8, r8)
   28960:	687b      	ldr	r3, [r7, #4]
   28962:	0018      	movs	r0, r3
   28964:	4b08      	ldr	r3, [pc, #32]	; (28988 <rtc_calendar_reset+0x4c>)
   28966:	4798      	blx	r3
   28968:	1e03      	subs	r3, r0, #0
   2896a:	d1f9      	bne.n	28960 <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   2896c:	68fb      	ldr	r3, [r7, #12]
   2896e:	881b      	ldrh	r3, [r3, #0]
   28970:	b29b      	uxth	r3, r3
   28972:	2201      	movs	r2, #1
   28974:	4313      	orrs	r3, r2
   28976:	b29a      	uxth	r2, r3
   28978:	68fb      	ldr	r3, [r7, #12]
   2897a:	801a      	strh	r2, [r3, #0]
}
   2897c:	46c0      	nop			; (mov r8, r8)
   2897e:	46bd      	mov	sp, r7
   28980:	b004      	add	sp, #16
   28982:	bd80      	pop	{r7, pc}
   28984:	000288ed 	.word	0x000288ed
   28988:	00028881 	.word	0x00028881

0002898c <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   2898c:	b580      	push	{r7, lr}
   2898e:	b084      	sub	sp, #16
   28990:	af00      	add	r7, sp, #0
   28992:	6078      	str	r0, [r7, #4]
   28994:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   28996:	683b      	ldr	r3, [r7, #0]
   28998:	88db      	ldrh	r3, [r3, #6]
   2899a:	001a      	movs	r2, r3
   2899c:	687b      	ldr	r3, [r7, #4]
   2899e:	88db      	ldrh	r3, [r3, #6]
   289a0:	1ad3      	subs	r3, r2, r3
   289a2:	069b      	lsls	r3, r3, #26
   289a4:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   289a6:	683b      	ldr	r3, [r7, #0]
   289a8:	795b      	ldrb	r3, [r3, #5]
   289aa:	059b      	lsls	r3, r3, #22
   289ac:	001a      	movs	r2, r3
   289ae:	68fb      	ldr	r3, [r7, #12]
   289b0:	4313      	orrs	r3, r2
   289b2:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   289b4:	683b      	ldr	r3, [r7, #0]
   289b6:	791b      	ldrb	r3, [r3, #4]
   289b8:	045b      	lsls	r3, r3, #17
   289ba:	001a      	movs	r2, r3
   289bc:	68fb      	ldr	r3, [r7, #12]
   289be:	4313      	orrs	r3, r2
   289c0:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   289c2:	683b      	ldr	r3, [r7, #0]
   289c4:	789b      	ldrb	r3, [r3, #2]
   289c6:	031b      	lsls	r3, r3, #12
   289c8:	001a      	movs	r2, r3
   289ca:	68fb      	ldr	r3, [r7, #12]
   289cc:	4313      	orrs	r3, r2
   289ce:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   289d0:	687b      	ldr	r3, [r7, #4]
   289d2:	791b      	ldrb	r3, [r3, #4]
   289d4:	2201      	movs	r2, #1
   289d6:	4053      	eors	r3, r2
   289d8:	b2db      	uxtb	r3, r3
   289da:	2b00      	cmp	r3, #0
   289dc:	d008      	beq.n	289f0 <rtc_calendar_time_to_register_value+0x64>
   289de:	683b      	ldr	r3, [r7, #0]
   289e0:	78db      	ldrb	r3, [r3, #3]
   289e2:	2b00      	cmp	r3, #0
   289e4:	d004      	beq.n	289f0 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   289e6:	68fb      	ldr	r3, [r7, #12]
   289e8:	2280      	movs	r2, #128	; 0x80
   289ea:	0252      	lsls	r2, r2, #9
   289ec:	4313      	orrs	r3, r2
   289ee:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   289f0:	683b      	ldr	r3, [r7, #0]
   289f2:	785b      	ldrb	r3, [r3, #1]
   289f4:	019b      	lsls	r3, r3, #6
   289f6:	001a      	movs	r2, r3
   289f8:	68fb      	ldr	r3, [r7, #12]
   289fa:	4313      	orrs	r3, r2
   289fc:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   289fe:	683b      	ldr	r3, [r7, #0]
   28a00:	781b      	ldrb	r3, [r3, #0]
   28a02:	001a      	movs	r2, r3
   28a04:	68fb      	ldr	r3, [r7, #12]
   28a06:	4313      	orrs	r3, r2
   28a08:	60fb      	str	r3, [r7, #12]

	return register_value;
   28a0a:	68fb      	ldr	r3, [r7, #12]
}
   28a0c:	0018      	movs	r0, r3
   28a0e:	46bd      	mov	sp, r7
   28a10:	b004      	add	sp, #16
   28a12:	bd80      	pop	{r7, pc}

00028a14 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   28a14:	b580      	push	{r7, lr}
   28a16:	b084      	sub	sp, #16
   28a18:	af00      	add	r7, sp, #0
   28a1a:	60f8      	str	r0, [r7, #12]
   28a1c:	60b9      	str	r1, [r7, #8]
   28a1e:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   28a20:	68bb      	ldr	r3, [r7, #8]
   28a22:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   28a24:	b29a      	uxth	r2, r3
   28a26:	68fb      	ldr	r3, [r7, #12]
   28a28:	88db      	ldrh	r3, [r3, #6]
   28a2a:	18d3      	adds	r3, r2, r3
   28a2c:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   28a2e:	687b      	ldr	r3, [r7, #4]
   28a30:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   28a32:	68bb      	ldr	r3, [r7, #8]
   28a34:	0d9b      	lsrs	r3, r3, #22
   28a36:	b2db      	uxtb	r3, r3
   28a38:	220f      	movs	r2, #15
   28a3a:	4013      	ands	r3, r2
   28a3c:	b2da      	uxtb	r2, r3
   28a3e:	687b      	ldr	r3, [r7, #4]
   28a40:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   28a42:	68bb      	ldr	r3, [r7, #8]
   28a44:	0c5b      	lsrs	r3, r3, #17
   28a46:	b2db      	uxtb	r3, r3
   28a48:	221f      	movs	r2, #31
   28a4a:	4013      	ands	r3, r2
   28a4c:	b2da      	uxtb	r2, r3
   28a4e:	687b      	ldr	r3, [r7, #4]
   28a50:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   28a52:	68fb      	ldr	r3, [r7, #12]
   28a54:	791b      	ldrb	r3, [r3, #4]
   28a56:	2b00      	cmp	r3, #0
   28a58:	d008      	beq.n	28a6c <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   28a5a:	68bb      	ldr	r3, [r7, #8]
   28a5c:	0b1b      	lsrs	r3, r3, #12
   28a5e:	b2db      	uxtb	r3, r3
   28a60:	221f      	movs	r2, #31
   28a62:	4013      	ands	r3, r2
   28a64:	b2da      	uxtb	r2, r3
   28a66:	687b      	ldr	r3, [r7, #4]
   28a68:	709a      	strb	r2, [r3, #2]
   28a6a:	e010      	b.n	28a8e <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   28a6c:	68bb      	ldr	r3, [r7, #8]
   28a6e:	0b1b      	lsrs	r3, r3, #12
   28a70:	b2db      	uxtb	r3, r3
   28a72:	220f      	movs	r2, #15
   28a74:	4013      	ands	r3, r2
   28a76:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   28a78:	687b      	ldr	r3, [r7, #4]
   28a7a:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   28a7c:	68ba      	ldr	r2, [r7, #8]
   28a7e:	2380      	movs	r3, #128	; 0x80
   28a80:	025b      	lsls	r3, r3, #9
   28a82:	4013      	ands	r3, r2
   28a84:	1e5a      	subs	r2, r3, #1
   28a86:	4193      	sbcs	r3, r2
   28a88:	b2da      	uxtb	r2, r3
   28a8a:	687b      	ldr	r3, [r7, #4]
   28a8c:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   28a8e:	68bb      	ldr	r3, [r7, #8]
   28a90:	099b      	lsrs	r3, r3, #6
   28a92:	b2db      	uxtb	r3, r3
   28a94:	223f      	movs	r2, #63	; 0x3f
   28a96:	4013      	ands	r3, r2
   28a98:	b2da      	uxtb	r2, r3
   28a9a:	687b      	ldr	r3, [r7, #4]
   28a9c:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   28a9e:	68bb      	ldr	r3, [r7, #8]
   28aa0:	b2db      	uxtb	r3, r3
   28aa2:	223f      	movs	r2, #63	; 0x3f
   28aa4:	4013      	ands	r3, r2
   28aa6:	b2da      	uxtb	r2, r3
   28aa8:	687b      	ldr	r3, [r7, #4]
   28aaa:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   28aac:	46c0      	nop			; (mov r8, r8)
   28aae:	46bd      	mov	sp, r7
   28ab0:	b004      	add	sp, #16
   28ab2:	bd80      	pop	{r7, pc}

00028ab4 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   28ab4:	b580      	push	{r7, lr}
   28ab6:	b084      	sub	sp, #16
   28ab8:	af00      	add	r7, sp, #0
   28aba:	6078      	str	r0, [r7, #4]
   28abc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   28abe:	687b      	ldr	r3, [r7, #4]
   28ac0:	681b      	ldr	r3, [r3, #0]
   28ac2:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   28ac4:	683b      	ldr	r3, [r7, #0]
   28ac6:	881a      	ldrh	r2, [r3, #0]
   28ac8:	230e      	movs	r3, #14
   28aca:	18fb      	adds	r3, r7, r3
   28acc:	2108      	movs	r1, #8
   28ace:	430a      	orrs	r2, r1
   28ad0:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   28ad2:	683b      	ldr	r3, [r7, #0]
   28ad4:	791b      	ldrb	r3, [r3, #4]
   28ad6:	2201      	movs	r2, #1
   28ad8:	4053      	eors	r3, r2
   28ada:	b2db      	uxtb	r3, r3
   28adc:	2b00      	cmp	r3, #0
   28ade:	d007      	beq.n	28af0 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   28ae0:	230e      	movs	r3, #14
   28ae2:	18fb      	adds	r3, r7, r3
   28ae4:	220e      	movs	r2, #14
   28ae6:	18ba      	adds	r2, r7, r2
   28ae8:	8812      	ldrh	r2, [r2, #0]
   28aea:	2140      	movs	r1, #64	; 0x40
   28aec:	430a      	orrs	r2, r1
   28aee:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   28af0:	683b      	ldr	r3, [r7, #0]
   28af2:	789b      	ldrb	r3, [r3, #2]
   28af4:	2b00      	cmp	r3, #0
   28af6:	d007      	beq.n	28b08 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   28af8:	230e      	movs	r3, #14
   28afa:	18fb      	adds	r3, r7, r3
   28afc:	220e      	movs	r2, #14
   28afe:	18ba      	adds	r2, r7, r2
   28b00:	8812      	ldrh	r2, [r2, #0]
   28b02:	2180      	movs	r1, #128	; 0x80
   28b04:	430a      	orrs	r2, r1
   28b06:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   28b08:	68bb      	ldr	r3, [r7, #8]
   28b0a:	220e      	movs	r2, #14
   28b0c:	18ba      	adds	r2, r7, r2
   28b0e:	8812      	ldrh	r2, [r2, #0]
   28b10:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   28b12:	683b      	ldr	r3, [r7, #0]
   28b14:	78db      	ldrb	r3, [r3, #3]
   28b16:	2b00      	cmp	r3, #0
   28b18:	d008      	beq.n	28b2c <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   28b1a:	68bb      	ldr	r3, [r7, #8]
   28b1c:	885b      	ldrh	r3, [r3, #2]
   28b1e:	b29b      	uxth	r3, r3
   28b20:	2280      	movs	r2, #128	; 0x80
   28b22:	01d2      	lsls	r2, r2, #7
   28b24:	4313      	orrs	r3, r2
   28b26:	b29a      	uxth	r2, r3
   28b28:	68bb      	ldr	r3, [r7, #8]
   28b2a:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   28b2c:	230d      	movs	r3, #13
   28b2e:	18fb      	adds	r3, r7, r3
   28b30:	2200      	movs	r2, #0
   28b32:	701a      	strb	r2, [r3, #0]
   28b34:	e017      	b.n	28b66 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   28b36:	230d      	movs	r3, #13
   28b38:	18fb      	adds	r3, r7, r3
   28b3a:	781a      	ldrb	r2, [r3, #0]
   28b3c:	0013      	movs	r3, r2
   28b3e:	009b      	lsls	r3, r3, #2
   28b40:	189b      	adds	r3, r3, r2
   28b42:	005b      	lsls	r3, r3, #1
   28b44:	3308      	adds	r3, #8
   28b46:	683a      	ldr	r2, [r7, #0]
   28b48:	18d1      	adds	r1, r2, r3
   28b4a:	230d      	movs	r3, #13
   28b4c:	18fb      	adds	r3, r7, r3
   28b4e:	781a      	ldrb	r2, [r3, #0]
   28b50:	687b      	ldr	r3, [r7, #4]
   28b52:	0018      	movs	r0, r3
   28b54:	4b08      	ldr	r3, [pc, #32]	; (28b78 <_rtc_calendar_set_config+0xc4>)
   28b56:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   28b58:	230d      	movs	r3, #13
   28b5a:	18fb      	adds	r3, r7, r3
   28b5c:	781a      	ldrb	r2, [r3, #0]
   28b5e:	230d      	movs	r3, #13
   28b60:	18fb      	adds	r3, r7, r3
   28b62:	3201      	adds	r2, #1
   28b64:	701a      	strb	r2, [r3, #0]
   28b66:	230d      	movs	r3, #13
   28b68:	18fb      	adds	r3, r7, r3
   28b6a:	781b      	ldrb	r3, [r3, #0]
   28b6c:	2b00      	cmp	r3, #0
   28b6e:	d0e2      	beq.n	28b36 <_rtc_calendar_set_config+0x82>
	}
}
   28b70:	46c0      	nop			; (mov r8, r8)
   28b72:	46bd      	mov	sp, r7
   28b74:	b004      	add	sp, #16
   28b76:	bd80      	pop	{r7, pc}
   28b78:	00028c9d 	.word	0x00028c9d

00028b7c <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   28b7c:	b580      	push	{r7, lr}
   28b7e:	b086      	sub	sp, #24
   28b80:	af00      	add	r7, sp, #0
   28b82:	60f8      	str	r0, [r7, #12]
   28b84:	60b9      	str	r1, [r7, #8]
   28b86:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   28b88:	68fb      	ldr	r3, [r7, #12]
   28b8a:	68ba      	ldr	r2, [r7, #8]
   28b8c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   28b8e:	2120      	movs	r1, #32
   28b90:	2000      	movs	r0, #0
   28b92:	4b18      	ldr	r3, [pc, #96]	; (28bf4 <rtc_calendar_init+0x78>)
   28b94:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   28b96:	2314      	movs	r3, #20
   28b98:	18fb      	adds	r3, r7, r3
   28b9a:	0018      	movs	r0, r3
   28b9c:	4b16      	ldr	r3, [pc, #88]	; (28bf8 <rtc_calendar_init+0x7c>)
   28b9e:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   28ba0:	2314      	movs	r3, #20
   28ba2:	18fb      	adds	r3, r7, r3
   28ba4:	2202      	movs	r2, #2
   28ba6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   28ba8:	2314      	movs	r3, #20
   28baa:	18fb      	adds	r3, r7, r3
   28bac:	0019      	movs	r1, r3
   28bae:	2004      	movs	r0, #4
   28bb0:	4b12      	ldr	r3, [pc, #72]	; (28bfc <rtc_calendar_init+0x80>)
   28bb2:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   28bb4:	2004      	movs	r0, #4
   28bb6:	4b12      	ldr	r3, [pc, #72]	; (28c00 <rtc_calendar_init+0x84>)
   28bb8:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   28bba:	68fb      	ldr	r3, [r7, #12]
   28bbc:	0018      	movs	r0, r3
   28bbe:	4b11      	ldr	r3, [pc, #68]	; (28c04 <rtc_calendar_init+0x88>)
   28bc0:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   28bc2:	687b      	ldr	r3, [r7, #4]
   28bc4:	791a      	ldrb	r2, [r3, #4]
   28bc6:	68fb      	ldr	r3, [r7, #12]
   28bc8:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   28bca:	687b      	ldr	r3, [r7, #4]
   28bcc:	78da      	ldrb	r2, [r3, #3]
   28bce:	68fb      	ldr	r3, [r7, #12]
   28bd0:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   28bd2:	687b      	ldr	r3, [r7, #4]
   28bd4:	88da      	ldrh	r2, [r3, #6]
   28bd6:	68fb      	ldr	r3, [r7, #12]
   28bd8:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   28bda:	4b0b      	ldr	r3, [pc, #44]	; (28c08 <rtc_calendar_init+0x8c>)
   28bdc:	68fa      	ldr	r2, [r7, #12]
   28bde:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   28be0:	687a      	ldr	r2, [r7, #4]
   28be2:	68fb      	ldr	r3, [r7, #12]
   28be4:	0011      	movs	r1, r2
   28be6:	0018      	movs	r0, r3
   28be8:	4b08      	ldr	r3, [pc, #32]	; (28c0c <rtc_calendar_init+0x90>)
   28bea:	4798      	blx	r3
}
   28bec:	46c0      	nop			; (mov r8, r8)
   28bee:	46bd      	mov	sp, r7
   28bf0:	b006      	add	sp, #24
   28bf2:	bd80      	pop	{r7, pc}
   28bf4:	000287c9 	.word	0x000287c9
   28bf8:	000287b1 	.word	0x000287b1
   28bfc:	0002bc3d 	.word	0x0002bc3d
   28c00:	0002bc81 	.word	0x0002bc81
   28c04:	0002893d 	.word	0x0002893d
   28c08:	20005830 	.word	0x20005830
   28c0c:	00028ab5 	.word	0x00028ab5

00028c10 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   28c10:	b580      	push	{r7, lr}
   28c12:	b084      	sub	sp, #16
   28c14:	af00      	add	r7, sp, #0
   28c16:	6078      	str	r0, [r7, #4]
   28c18:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   28c1a:	687b      	ldr	r3, [r7, #4]
   28c1c:	681b      	ldr	r3, [r3, #0]
   28c1e:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   28c20:	687b      	ldr	r3, [r7, #4]
   28c22:	795b      	ldrb	r3, [r3, #5]
   28c24:	2201      	movs	r2, #1
   28c26:	4053      	eors	r3, r2
   28c28:	b2db      	uxtb	r3, r3
   28c2a:	2b00      	cmp	r3, #0
   28c2c:	d00a      	beq.n	28c44 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   28c2e:	68fb      	ldr	r3, [r7, #12]
   28c30:	4a16      	ldr	r2, [pc, #88]	; (28c8c <rtc_calendar_get_time+0x7c>)
   28c32:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   28c34:	46c0      	nop			; (mov r8, r8)
   28c36:	687b      	ldr	r3, [r7, #4]
   28c38:	0018      	movs	r0, r3
   28c3a:	4b15      	ldr	r3, [pc, #84]	; (28c90 <rtc_calendar_get_time+0x80>)
   28c3c:	4798      	blx	r3
   28c3e:	1e03      	subs	r3, r0, #0
   28c40:	d1f9      	bne.n	28c36 <rtc_calendar_get_time+0x26>
   28c42:	e016      	b.n	28c72 <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   28c44:	68fb      	ldr	r3, [r7, #12]
   28c46:	885b      	ldrh	r3, [r3, #2]
   28c48:	b29b      	uxth	r3, r3
   28c4a:	001a      	movs	r2, r3
   28c4c:	2380      	movs	r3, #128	; 0x80
   28c4e:	01db      	lsls	r3, r3, #7
   28c50:	4013      	ands	r3, r2
   28c52:	d10e      	bne.n	28c72 <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   28c54:	68fb      	ldr	r3, [r7, #12]
   28c56:	885b      	ldrh	r3, [r3, #2]
   28c58:	b29b      	uxth	r3, r3
   28c5a:	4a0e      	ldr	r2, [pc, #56]	; (28c94 <rtc_calendar_get_time+0x84>)
   28c5c:	4313      	orrs	r3, r2
   28c5e:	b29a      	uxth	r2, r3
   28c60:	68fb      	ldr	r3, [r7, #12]
   28c62:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   28c64:	46c0      	nop			; (mov r8, r8)
   28c66:	687b      	ldr	r3, [r7, #4]
   28c68:	0018      	movs	r0, r3
   28c6a:	4b09      	ldr	r3, [pc, #36]	; (28c90 <rtc_calendar_get_time+0x80>)
   28c6c:	4798      	blx	r3
   28c6e:	1e03      	subs	r3, r0, #0
   28c70:	d1f9      	bne.n	28c66 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   28c72:	68fb      	ldr	r3, [r7, #12]
   28c74:	691b      	ldr	r3, [r3, #16]
   28c76:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   28c78:	683a      	ldr	r2, [r7, #0]
   28c7a:	68b9      	ldr	r1, [r7, #8]
   28c7c:	687b      	ldr	r3, [r7, #4]
   28c7e:	0018      	movs	r0, r3
   28c80:	4b05      	ldr	r3, [pc, #20]	; (28c98 <rtc_calendar_get_time+0x88>)
   28c82:	4798      	blx	r3
}
   28c84:	46c0      	nop			; (mov r8, r8)
   28c86:	46bd      	mov	sp, r7
   28c88:	b004      	add	sp, #16
   28c8a:	bd80      	pop	{r7, pc}
   28c8c:	ffff8000 	.word	0xffff8000
   28c90:	00028881 	.word	0x00028881
   28c94:	ffffc000 	.word	0xffffc000
   28c98:	00028a15 	.word	0x00028a15

00028c9c <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   28c9c:	b580      	push	{r7, lr}
   28c9e:	b086      	sub	sp, #24
   28ca0:	af00      	add	r7, sp, #0
   28ca2:	60f8      	str	r0, [r7, #12]
   28ca4:	60b9      	str	r1, [r7, #8]
   28ca6:	1dfb      	adds	r3, r7, #7
   28ca8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   28caa:	68fb      	ldr	r3, [r7, #12]
   28cac:	681b      	ldr	r3, [r3, #0]
   28cae:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   28cb0:	1dfb      	adds	r3, r7, #7
   28cb2:	781b      	ldrb	r3, [r3, #0]
   28cb4:	2b01      	cmp	r3, #1
   28cb6:	d901      	bls.n	28cbc <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   28cb8:	2317      	movs	r3, #23
   28cba:	e021      	b.n	28d00 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   28cbc:	68ba      	ldr	r2, [r7, #8]
   28cbe:	68fb      	ldr	r3, [r7, #12]
   28cc0:	0011      	movs	r1, r2
   28cc2:	0018      	movs	r0, r3
   28cc4:	4b10      	ldr	r3, [pc, #64]	; (28d08 <rtc_calendar_set_alarm+0x6c>)
   28cc6:	4798      	blx	r3
   28cc8:	0003      	movs	r3, r0
   28cca:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   28ccc:	46c0      	nop			; (mov r8, r8)
   28cce:	68fb      	ldr	r3, [r7, #12]
   28cd0:	0018      	movs	r0, r3
   28cd2:	4b0e      	ldr	r3, [pc, #56]	; (28d0c <rtc_calendar_set_alarm+0x70>)
   28cd4:	4798      	blx	r3
   28cd6:	1e03      	subs	r3, r0, #0
   28cd8:	d1f9      	bne.n	28cce <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   28cda:	1dfb      	adds	r3, r7, #7
   28cdc:	781a      	ldrb	r2, [r3, #0]
   28cde:	697b      	ldr	r3, [r7, #20]
   28ce0:	3203      	adds	r2, #3
   28ce2:	00d2      	lsls	r2, r2, #3
   28ce4:	6939      	ldr	r1, [r7, #16]
   28ce6:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   28ce8:	1dfb      	adds	r3, r7, #7
   28cea:	781b      	ldrb	r3, [r3, #0]
   28cec:	68ba      	ldr	r2, [r7, #8]
   28cee:	7a11      	ldrb	r1, [r2, #8]
   28cf0:	697a      	ldr	r2, [r7, #20]
   28cf2:	3303      	adds	r3, #3
   28cf4:	00db      	lsls	r3, r3, #3
   28cf6:	18d3      	adds	r3, r2, r3
   28cf8:	3304      	adds	r3, #4
   28cfa:	1c0a      	adds	r2, r1, #0
   28cfc:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   28cfe:	2300      	movs	r3, #0
}
   28d00:	0018      	movs	r0, r3
   28d02:	46bd      	mov	sp, r7
   28d04:	b006      	add	sp, #24
   28d06:	bd80      	pop	{r7, pc}
   28d08:	0002898d 	.word	0x0002898d
   28d0c:	00028881 	.word	0x00028881

00028d10 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   28d10:	b580      	push	{r7, lr}
   28d12:	b086      	sub	sp, #24
   28d14:	af00      	add	r7, sp, #0
   28d16:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   28d18:	4b28      	ldr	r3, [pc, #160]	; (28dbc <_rtc_interrupt_handler+0xac>)
   28d1a:	687a      	ldr	r2, [r7, #4]
   28d1c:	0092      	lsls	r2, r2, #2
   28d1e:	58d3      	ldr	r3, [r2, r3]
   28d20:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   28d22:	697b      	ldr	r3, [r7, #20]
   28d24:	681b      	ldr	r3, [r3, #0]
   28d26:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   28d28:	230e      	movs	r3, #14
   28d2a:	18fb      	adds	r3, r7, r3
   28d2c:	697a      	ldr	r2, [r7, #20]
   28d2e:	8a52      	ldrh	r2, [r2, #18]
   28d30:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   28d32:	697b      	ldr	r3, [r7, #20]
   28d34:	8a1b      	ldrh	r3, [r3, #16]
   28d36:	b29a      	uxth	r2, r3
   28d38:	230e      	movs	r3, #14
   28d3a:	18fb      	adds	r3, r7, r3
   28d3c:	210e      	movs	r1, #14
   28d3e:	1879      	adds	r1, r7, r1
   28d40:	8809      	ldrh	r1, [r1, #0]
   28d42:	400a      	ands	r2, r1
   28d44:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   28d46:	693b      	ldr	r3, [r7, #16]
   28d48:	7a1b      	ldrb	r3, [r3, #8]
   28d4a:	b2da      	uxtb	r2, r3
   28d4c:	230c      	movs	r3, #12
   28d4e:	18fb      	adds	r3, r7, r3
   28d50:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   28d52:	693b      	ldr	r3, [r7, #16]
   28d54:	79db      	ldrb	r3, [r3, #7]
   28d56:	b2db      	uxtb	r3, r3
   28d58:	b29a      	uxth	r2, r3
   28d5a:	230c      	movs	r3, #12
   28d5c:	18fb      	adds	r3, r7, r3
   28d5e:	210c      	movs	r1, #12
   28d60:	1879      	adds	r1, r7, r1
   28d62:	8809      	ldrh	r1, [r1, #0]
   28d64:	400a      	ands	r2, r1
   28d66:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   28d68:	230c      	movs	r3, #12
   28d6a:	18fb      	adds	r3, r7, r3
   28d6c:	881b      	ldrh	r3, [r3, #0]
   28d6e:	2280      	movs	r2, #128	; 0x80
   28d70:	4013      	ands	r3, r2
   28d72:	d00c      	beq.n	28d8e <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   28d74:	230e      	movs	r3, #14
   28d76:	18fb      	adds	r3, r7, r3
   28d78:	881b      	ldrh	r3, [r3, #0]
   28d7a:	2202      	movs	r2, #2
   28d7c:	4013      	ands	r3, r2
   28d7e:	d002      	beq.n	28d86 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   28d80:	697b      	ldr	r3, [r7, #20]
   28d82:	68db      	ldr	r3, [r3, #12]
   28d84:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   28d86:	693b      	ldr	r3, [r7, #16]
   28d88:	2280      	movs	r2, #128	; 0x80
   28d8a:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   28d8c:	e011      	b.n	28db2 <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   28d8e:	230c      	movs	r3, #12
   28d90:	18fb      	adds	r3, r7, r3
   28d92:	881b      	ldrh	r3, [r3, #0]
   28d94:	2201      	movs	r2, #1
   28d96:	4013      	ands	r3, r2
   28d98:	d00b      	beq.n	28db2 <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   28d9a:	230e      	movs	r3, #14
   28d9c:	18fb      	adds	r3, r7, r3
   28d9e:	881b      	ldrh	r3, [r3, #0]
   28da0:	2201      	movs	r2, #1
   28da2:	4013      	ands	r3, r2
   28da4:	d002      	beq.n	28dac <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   28da6:	697b      	ldr	r3, [r7, #20]
   28da8:	689b      	ldr	r3, [r3, #8]
   28daa:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   28dac:	693b      	ldr	r3, [r7, #16]
   28dae:	2201      	movs	r2, #1
   28db0:	721a      	strb	r2, [r3, #8]
}
   28db2:	46c0      	nop			; (mov r8, r8)
   28db4:	46bd      	mov	sp, r7
   28db6:	b006      	add	sp, #24
   28db8:	bd80      	pop	{r7, pc}
   28dba:	46c0      	nop			; (mov r8, r8)
   28dbc:	20005830 	.word	0x20005830

00028dc0 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   28dc0:	b580      	push	{r7, lr}
   28dc2:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   28dc4:	2000      	movs	r0, #0
   28dc6:	4b02      	ldr	r3, [pc, #8]	; (28dd0 <RTC_Handler+0x10>)
   28dc8:	4798      	blx	r3
}
   28dca:	46c0      	nop			; (mov r8, r8)
   28dcc:	46bd      	mov	sp, r7
   28dce:	bd80      	pop	{r7, pc}
   28dd0:	00028d11 	.word	0x00028d11

00028dd4 <system_gclk_chan_get_config_defaults>:
{
   28dd4:	b580      	push	{r7, lr}
   28dd6:	b082      	sub	sp, #8
   28dd8:	af00      	add	r7, sp, #0
   28dda:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28ddc:	687b      	ldr	r3, [r7, #4]
   28dde:	2200      	movs	r2, #0
   28de0:	701a      	strb	r2, [r3, #0]
}
   28de2:	46c0      	nop			; (mov r8, r8)
   28de4:	46bd      	mov	sp, r7
   28de6:	b002      	add	sp, #8
   28de8:	bd80      	pop	{r7, pc}

00028dea <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   28dea:	b5f0      	push	{r4, r5, r6, r7, lr}
   28dec:	b08d      	sub	sp, #52	; 0x34
   28dee:	af00      	add	r7, sp, #0
   28df0:	60b8      	str	r0, [r7, #8]
   28df2:	60f9      	str	r1, [r7, #12]
   28df4:	603a      	str	r2, [r7, #0]
   28df6:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   28df8:	2300      	movs	r3, #0
   28dfa:	2400      	movs	r4, #0
   28dfc:	623b      	str	r3, [r7, #32]
   28dfe:	627c      	str	r4, [r7, #36]	; 0x24
   28e00:	2300      	movs	r3, #0
   28e02:	2400      	movs	r4, #0
   28e04:	61bb      	str	r3, [r7, #24]
   28e06:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   28e08:	233f      	movs	r3, #63	; 0x3f
   28e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   28e0c:	e053      	b.n	28eb6 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   28e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28e10:	3b20      	subs	r3, #32
   28e12:	2b00      	cmp	r3, #0
   28e14:	db04      	blt.n	28e20 <long_division+0x36>
   28e16:	2201      	movs	r2, #1
   28e18:	409a      	lsls	r2, r3
   28e1a:	0013      	movs	r3, r2
   28e1c:	617b      	str	r3, [r7, #20]
   28e1e:	e00b      	b.n	28e38 <long_division+0x4e>
   28e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28e22:	2220      	movs	r2, #32
   28e24:	1ad3      	subs	r3, r2, r3
   28e26:	2201      	movs	r2, #1
   28e28:	40da      	lsrs	r2, r3
   28e2a:	0013      	movs	r3, r2
   28e2c:	2100      	movs	r1, #0
   28e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   28e30:	4091      	lsls	r1, r2
   28e32:	000a      	movs	r2, r1
   28e34:	4313      	orrs	r3, r2
   28e36:	617b      	str	r3, [r7, #20]
   28e38:	2201      	movs	r2, #1
   28e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28e3c:	409a      	lsls	r2, r3
   28e3e:	0013      	movs	r3, r2
   28e40:	613b      	str	r3, [r7, #16]

		r = r << 1;
   28e42:	69bb      	ldr	r3, [r7, #24]
   28e44:	69fc      	ldr	r4, [r7, #28]
   28e46:	18db      	adds	r3, r3, r3
   28e48:	4164      	adcs	r4, r4
   28e4a:	61bb      	str	r3, [r7, #24]
   28e4c:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   28e4e:	68bb      	ldr	r3, [r7, #8]
   28e50:	693a      	ldr	r2, [r7, #16]
   28e52:	401a      	ands	r2, r3
   28e54:	0015      	movs	r5, r2
   28e56:	68fb      	ldr	r3, [r7, #12]
   28e58:	697a      	ldr	r2, [r7, #20]
   28e5a:	401a      	ands	r2, r3
   28e5c:	0016      	movs	r6, r2
   28e5e:	002b      	movs	r3, r5
   28e60:	4333      	orrs	r3, r6
   28e62:	d007      	beq.n	28e74 <long_division+0x8a>
			r |= 0x01;
   28e64:	69bb      	ldr	r3, [r7, #24]
   28e66:	2201      	movs	r2, #1
   28e68:	4313      	orrs	r3, r2
   28e6a:	61bb      	str	r3, [r7, #24]
   28e6c:	69fb      	ldr	r3, [r7, #28]
   28e6e:	2200      	movs	r2, #0
   28e70:	4313      	orrs	r3, r2
   28e72:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   28e74:	687a      	ldr	r2, [r7, #4]
   28e76:	69fb      	ldr	r3, [r7, #28]
   28e78:	429a      	cmp	r2, r3
   28e7a:	d819      	bhi.n	28eb0 <long_division+0xc6>
   28e7c:	687a      	ldr	r2, [r7, #4]
   28e7e:	69fb      	ldr	r3, [r7, #28]
   28e80:	429a      	cmp	r2, r3
   28e82:	d103      	bne.n	28e8c <long_division+0xa2>
   28e84:	683a      	ldr	r2, [r7, #0]
   28e86:	69bb      	ldr	r3, [r7, #24]
   28e88:	429a      	cmp	r2, r3
   28e8a:	d811      	bhi.n	28eb0 <long_division+0xc6>
			r = r - d;
   28e8c:	69b9      	ldr	r1, [r7, #24]
   28e8e:	69fa      	ldr	r2, [r7, #28]
   28e90:	683b      	ldr	r3, [r7, #0]
   28e92:	687c      	ldr	r4, [r7, #4]
   28e94:	1ac9      	subs	r1, r1, r3
   28e96:	41a2      	sbcs	r2, r4
   28e98:	000b      	movs	r3, r1
   28e9a:	0014      	movs	r4, r2
   28e9c:	61bb      	str	r3, [r7, #24]
   28e9e:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   28ea0:	6a3a      	ldr	r2, [r7, #32]
   28ea2:	693b      	ldr	r3, [r7, #16]
   28ea4:	4313      	orrs	r3, r2
   28ea6:	623b      	str	r3, [r7, #32]
   28ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   28eaa:	697b      	ldr	r3, [r7, #20]
   28eac:	4313      	orrs	r3, r2
   28eae:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   28eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28eb2:	3b01      	subs	r3, #1
   28eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   28eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28eb8:	2b00      	cmp	r3, #0
   28eba:	daa8      	bge.n	28e0e <long_division+0x24>
		}
	}

	return q;
   28ebc:	6a3b      	ldr	r3, [r7, #32]
   28ebe:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   28ec0:	0018      	movs	r0, r3
   28ec2:	0021      	movs	r1, r4
   28ec4:	46bd      	mov	sp, r7
   28ec6:	b00d      	add	sp, #52	; 0x34
   28ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028eca <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   28eca:	b580      	push	{r7, lr}
   28ecc:	b086      	sub	sp, #24
   28ece:	af00      	add	r7, sp, #0
   28ed0:	60f8      	str	r0, [r7, #12]
   28ed2:	60b9      	str	r1, [r7, #8]
   28ed4:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   28ed6:	2316      	movs	r3, #22
   28ed8:	18fb      	adds	r3, r7, r3
   28eda:	2200      	movs	r2, #0
   28edc:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   28ede:	68bb      	ldr	r3, [r7, #8]
   28ee0:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   28ee2:	68bb      	ldr	r3, [r7, #8]
   28ee4:	085a      	lsrs	r2, r3, #1
   28ee6:	68fb      	ldr	r3, [r7, #12]
   28ee8:	429a      	cmp	r2, r3
   28eea:	d201      	bcs.n	28ef0 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   28eec:	2340      	movs	r3, #64	; 0x40
   28eee:	e026      	b.n	28f3e <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   28ef0:	68bb      	ldr	r3, [r7, #8]
   28ef2:	085b      	lsrs	r3, r3, #1
   28ef4:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   28ef6:	e00a      	b.n	28f0e <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   28ef8:	693a      	ldr	r2, [r7, #16]
   28efa:	68fb      	ldr	r3, [r7, #12]
   28efc:	1ad3      	subs	r3, r2, r3
   28efe:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   28f00:	2316      	movs	r3, #22
   28f02:	18fb      	adds	r3, r7, r3
   28f04:	881a      	ldrh	r2, [r3, #0]
   28f06:	2316      	movs	r3, #22
   28f08:	18fb      	adds	r3, r7, r3
   28f0a:	3201      	adds	r2, #1
   28f0c:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   28f0e:	693a      	ldr	r2, [r7, #16]
   28f10:	68fb      	ldr	r3, [r7, #12]
   28f12:	429a      	cmp	r2, r3
   28f14:	d2f0      	bcs.n	28ef8 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   28f16:	2316      	movs	r3, #22
   28f18:	18fb      	adds	r3, r7, r3
   28f1a:	2216      	movs	r2, #22
   28f1c:	18ba      	adds	r2, r7, r2
   28f1e:	8812      	ldrh	r2, [r2, #0]
   28f20:	3a01      	subs	r2, #1
   28f22:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   28f24:	2316      	movs	r3, #22
   28f26:	18fb      	adds	r3, r7, r3
   28f28:	881b      	ldrh	r3, [r3, #0]
   28f2a:	2bff      	cmp	r3, #255	; 0xff
   28f2c:	d901      	bls.n	28f32 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   28f2e:	2340      	movs	r3, #64	; 0x40
   28f30:	e005      	b.n	28f3e <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   28f32:	687b      	ldr	r3, [r7, #4]
   28f34:	2216      	movs	r2, #22
   28f36:	18ba      	adds	r2, r7, r2
   28f38:	8812      	ldrh	r2, [r2, #0]
   28f3a:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   28f3c:	2300      	movs	r3, #0
	}
}
   28f3e:	0018      	movs	r0, r3
   28f40:	46bd      	mov	sp, r7
   28f42:	b006      	add	sp, #24
   28f44:	bd80      	pop	{r7, pc}
	...

00028f48 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   28f48:	b5f0      	push	{r4, r5, r6, r7, lr}
   28f4a:	b0a1      	sub	sp, #132	; 0x84
   28f4c:	af00      	add	r7, sp, #0
   28f4e:	64f8      	str	r0, [r7, #76]	; 0x4c
   28f50:	64b9      	str	r1, [r7, #72]	; 0x48
   28f52:	647a      	str	r2, [r7, #68]	; 0x44
   28f54:	2243      	movs	r2, #67	; 0x43
   28f56:	18ba      	adds	r2, r7, r2
   28f58:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   28f5a:	2300      	movs	r3, #0
   28f5c:	2400      	movs	r4, #0
   28f5e:	673b      	str	r3, [r7, #112]	; 0x70
   28f60:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   28f62:	2300      	movs	r3, #0
   28f64:	2400      	movs	r4, #0
   28f66:	66bb      	str	r3, [r7, #104]	; 0x68
   28f68:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   28f6a:	2300      	movs	r3, #0
   28f6c:	2400      	movs	r4, #0
   28f6e:	67bb      	str	r3, [r7, #120]	; 0x78
   28f70:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   28f72:	2300      	movs	r3, #0
   28f74:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   28f76:	2358      	movs	r3, #88	; 0x58
   28f78:	2240      	movs	r2, #64	; 0x40
   28f7a:	4694      	mov	ip, r2
   28f7c:	44bc      	add	ip, r7
   28f7e:	4463      	add	r3, ip
   28f80:	781a      	ldrb	r2, [r3, #0]
   28f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   28f84:	435a      	muls	r2, r3
   28f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   28f88:	429a      	cmp	r2, r3
   28f8a:	d901      	bls.n	28f90 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   28f8c:	2340      	movs	r3, #64	; 0x40
   28f8e:	e0b3      	b.n	290f8 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   28f90:	2343      	movs	r3, #67	; 0x43
   28f92:	18fb      	adds	r3, r7, r3
   28f94:	781b      	ldrb	r3, [r3, #0]
   28f96:	2b00      	cmp	r3, #0
   28f98:	d13d      	bne.n	29016 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   28f9a:	2358      	movs	r3, #88	; 0x58
   28f9c:	2240      	movs	r2, #64	; 0x40
   28f9e:	4694      	mov	ip, r2
   28fa0:	44bc      	add	ip, r7
   28fa2:	4463      	add	r3, ip
   28fa4:	781b      	ldrb	r3, [r3, #0]
   28fa6:	b2db      	uxtb	r3, r3
   28fa8:	613b      	str	r3, [r7, #16]
   28faa:	2300      	movs	r3, #0
   28fac:	617b      	str	r3, [r7, #20]
   28fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   28fb0:	60bb      	str	r3, [r7, #8]
   28fb2:	2300      	movs	r3, #0
   28fb4:	60fb      	str	r3, [r7, #12]
   28fb6:	4c52      	ldr	r4, [pc, #328]	; (29100 <_sercom_get_async_baud_val+0x1b8>)
   28fb8:	68ba      	ldr	r2, [r7, #8]
   28fba:	68fb      	ldr	r3, [r7, #12]
   28fbc:	6938      	ldr	r0, [r7, #16]
   28fbe:	6979      	ldr	r1, [r7, #20]
   28fc0:	47a0      	blx	r4
   28fc2:	0003      	movs	r3, r0
   28fc4:	000c      	movs	r4, r1
   28fc6:	001b      	movs	r3, r3
   28fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   28fca:	2300      	movs	r3, #0
   28fcc:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   28fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   28fd0:	603b      	str	r3, [r7, #0]
   28fd2:	2300      	movs	r3, #0
   28fd4:	607b      	str	r3, [r7, #4]
   28fd6:	6db8      	ldr	r0, [r7, #88]	; 0x58
   28fd8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   28fda:	683a      	ldr	r2, [r7, #0]
   28fdc:	687b      	ldr	r3, [r7, #4]
   28fde:	4c49      	ldr	r4, [pc, #292]	; (29104 <_sercom_get_async_baud_val+0x1bc>)
   28fe0:	47a0      	blx	r4
   28fe2:	0003      	movs	r3, r0
   28fe4:	000c      	movs	r4, r1
   28fe6:	673b      	str	r3, [r7, #112]	; 0x70
   28fe8:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   28fea:	2100      	movs	r1, #0
   28fec:	2201      	movs	r2, #1
   28fee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   28ff0:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   28ff2:	1ac9      	subs	r1, r1, r3
   28ff4:	41a2      	sbcs	r2, r4
   28ff6:	000b      	movs	r3, r1
   28ff8:	0014      	movs	r4, r2
   28ffa:	66bb      	str	r3, [r7, #104]	; 0x68
   28ffc:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   28ffe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   29000:	0c1b      	lsrs	r3, r3, #16
   29002:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   29004:	0416      	lsls	r6, r2, #16
   29006:	431e      	orrs	r6, r3
   29008:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2900a:	041d      	lsls	r5, r3, #16
   2900c:	0033      	movs	r3, r6
   2900e:	67bb      	str	r3, [r7, #120]	; 0x78
   29010:	2300      	movs	r3, #0
   29012:	67fb      	str	r3, [r7, #124]	; 0x7c
   29014:	e06a      	b.n	290ec <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   29016:	2343      	movs	r3, #67	; 0x43
   29018:	18fb      	adds	r3, r7, r3
   2901a:	781b      	ldrb	r3, [r3, #0]
   2901c:	2b01      	cmp	r3, #1
   2901e:	d165      	bne.n	290ec <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   29020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   29022:	633b      	str	r3, [r7, #48]	; 0x30
   29024:	2300      	movs	r3, #0
   29026:	637b      	str	r3, [r7, #52]	; 0x34
   29028:	2358      	movs	r3, #88	; 0x58
   2902a:	2240      	movs	r2, #64	; 0x40
   2902c:	4694      	mov	ip, r2
   2902e:	44bc      	add	ip, r7
   29030:	4463      	add	r3, ip
   29032:	781b      	ldrb	r3, [r3, #0]
   29034:	b2db      	uxtb	r3, r3
   29036:	62bb      	str	r3, [r7, #40]	; 0x28
   29038:	2300      	movs	r3, #0
   2903a:	62fb      	str	r3, [r7, #44]	; 0x2c
   2903c:	4c30      	ldr	r4, [pc, #192]	; (29100 <_sercom_get_async_baud_val+0x1b8>)
   2903e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   29040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29042:	6b38      	ldr	r0, [r7, #48]	; 0x30
   29044:	6b79      	ldr	r1, [r7, #52]	; 0x34
   29046:	47a0      	blx	r4
   29048:	0003      	movs	r3, r0
   2904a:	000c      	movs	r4, r1
   2904c:	65bb      	str	r3, [r7, #88]	; 0x58
   2904e:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   29050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   29052:	623b      	str	r3, [r7, #32]
   29054:	2300      	movs	r3, #0
   29056:	627b      	str	r3, [r7, #36]	; 0x24
   29058:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2905a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   2905c:	001a      	movs	r2, r3
   2905e:	0023      	movs	r3, r4
   29060:	6a38      	ldr	r0, [r7, #32]
   29062:	6a79      	ldr	r1, [r7, #36]	; 0x24
   29064:	4c27      	ldr	r4, [pc, #156]	; (29104 <_sercom_get_async_baud_val+0x1bc>)
   29066:	47a0      	blx	r4
   29068:	0003      	movs	r3, r0
   2906a:	000c      	movs	r4, r1
   2906c:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   2906e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   29070:	2380      	movs	r3, #128	; 0x80
   29072:	019b      	lsls	r3, r3, #6
   29074:	429a      	cmp	r2, r3
   29076:	d901      	bls.n	2907c <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   29078:	2340      	movs	r3, #64	; 0x40
   2907a:	e03d      	b.n	290f8 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   2907c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2907e:	61bb      	str	r3, [r7, #24]
   29080:	2300      	movs	r3, #0
   29082:	61fb      	str	r3, [r7, #28]
   29084:	69b9      	ldr	r1, [r7, #24]
   29086:	69fa      	ldr	r2, [r7, #28]
   29088:	000b      	movs	r3, r1
   2908a:	0f5b      	lsrs	r3, r3, #29
   2908c:	0010      	movs	r0, r2
   2908e:	00c0      	lsls	r0, r0, #3
   29090:	63f8      	str	r0, [r7, #60]	; 0x3c
   29092:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   29094:	4318      	orrs	r0, r3
   29096:	63f8      	str	r0, [r7, #60]	; 0x3c
   29098:	000b      	movs	r3, r1
   2909a:	00db      	lsls	r3, r3, #3
   2909c:	63bb      	str	r3, [r7, #56]	; 0x38
   2909e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   290a0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   290a2:	001a      	movs	r2, r3
   290a4:	0023      	movs	r3, r4
   290a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   290a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   290aa:	4c16      	ldr	r4, [pc, #88]	; (29104 <_sercom_get_async_baud_val+0x1bc>)
   290ac:	47a0      	blx	r4
   290ae:	0003      	movs	r3, r0
   290b0:	000c      	movs	r4, r1
   290b2:	65bb      	str	r3, [r7, #88]	; 0x58
   290b4:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   290b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   290b8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   290ba:	b2d9      	uxtb	r1, r3
   290bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   290be:	b2db      	uxtb	r3, r3
   290c0:	00db      	lsls	r3, r3, #3
   290c2:	b2da      	uxtb	r2, r3
   290c4:	2317      	movs	r3, #23
   290c6:	2040      	movs	r0, #64	; 0x40
   290c8:	4684      	mov	ip, r0
   290ca:	44bc      	add	ip, r7
   290cc:	4463      	add	r3, ip
   290ce:	1a8a      	subs	r2, r1, r2
   290d0:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   290d2:	2317      	movs	r3, #23
   290d4:	2240      	movs	r2, #64	; 0x40
   290d6:	4694      	mov	ip, r2
   290d8:	44bc      	add	ip, r7
   290da:	4463      	add	r3, ip
   290dc:	781b      	ldrb	r3, [r3, #0]
   290de:	035b      	lsls	r3, r3, #13
   290e0:	001a      	movs	r2, r3
   290e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   290e4:	4313      	orrs	r3, r2
   290e6:	67bb      	str	r3, [r7, #120]	; 0x78
   290e8:	2300      	movs	r3, #0
   290ea:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   290ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   290ee:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   290f0:	b29a      	uxth	r2, r3
   290f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   290f4:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   290f6:	2300      	movs	r3, #0
}
   290f8:	0018      	movs	r0, r3
   290fa:	46bd      	mov	sp, r7
   290fc:	b021      	add	sp, #132	; 0x84
   290fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29100:	00034a8d 	.word	0x00034a8d
   29104:	00028deb 	.word	0x00028deb

00029108 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   29108:	b580      	push	{r7, lr}
   2910a:	b084      	sub	sp, #16
   2910c:	af00      	add	r7, sp, #0
   2910e:	0002      	movs	r2, r0
   29110:	1dfb      	adds	r3, r7, #7
   29112:	701a      	strb	r2, [r3, #0]
   29114:	1dbb      	adds	r3, r7, #6
   29116:	1c0a      	adds	r2, r1, #0
   29118:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   2911a:	4b1a      	ldr	r3, [pc, #104]	; (29184 <sercom_set_gclk_generator+0x7c>)
   2911c:	781b      	ldrb	r3, [r3, #0]
   2911e:	2201      	movs	r2, #1
   29120:	4053      	eors	r3, r2
   29122:	b2db      	uxtb	r3, r3
   29124:	2b00      	cmp	r3, #0
   29126:	d103      	bne.n	29130 <sercom_set_gclk_generator+0x28>
   29128:	1dbb      	adds	r3, r7, #6
   2912a:	781b      	ldrb	r3, [r3, #0]
   2912c:	2b00      	cmp	r3, #0
   2912e:	d01b      	beq.n	29168 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   29130:	230c      	movs	r3, #12
   29132:	18fb      	adds	r3, r7, r3
   29134:	0018      	movs	r0, r3
   29136:	4b14      	ldr	r3, [pc, #80]	; (29188 <sercom_set_gclk_generator+0x80>)
   29138:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   2913a:	230c      	movs	r3, #12
   2913c:	18fb      	adds	r3, r7, r3
   2913e:	1dfa      	adds	r2, r7, #7
   29140:	7812      	ldrb	r2, [r2, #0]
   29142:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   29144:	230c      	movs	r3, #12
   29146:	18fb      	adds	r3, r7, r3
   29148:	0019      	movs	r1, r3
   2914a:	2013      	movs	r0, #19
   2914c:	4b0f      	ldr	r3, [pc, #60]	; (2918c <sercom_set_gclk_generator+0x84>)
   2914e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   29150:	2013      	movs	r0, #19
   29152:	4b0f      	ldr	r3, [pc, #60]	; (29190 <sercom_set_gclk_generator+0x88>)
   29154:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   29156:	4b0b      	ldr	r3, [pc, #44]	; (29184 <sercom_set_gclk_generator+0x7c>)
   29158:	1dfa      	adds	r2, r7, #7
   2915a:	7812      	ldrb	r2, [r2, #0]
   2915c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   2915e:	4b09      	ldr	r3, [pc, #36]	; (29184 <sercom_set_gclk_generator+0x7c>)
   29160:	2201      	movs	r2, #1
   29162:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   29164:	2300      	movs	r3, #0
   29166:	e008      	b.n	2917a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   29168:	4b06      	ldr	r3, [pc, #24]	; (29184 <sercom_set_gclk_generator+0x7c>)
   2916a:	785b      	ldrb	r3, [r3, #1]
   2916c:	1dfa      	adds	r2, r7, #7
   2916e:	7812      	ldrb	r2, [r2, #0]
   29170:	429a      	cmp	r2, r3
   29172:	d101      	bne.n	29178 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   29174:	2300      	movs	r3, #0
   29176:	e000      	b.n	2917a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   29178:	231d      	movs	r3, #29
}
   2917a:	0018      	movs	r0, r3
   2917c:	46bd      	mov	sp, r7
   2917e:	b004      	add	sp, #16
   29180:	bd80      	pop	{r7, pc}
   29182:	46c0      	nop			; (mov r8, r8)
   29184:	20003edc 	.word	0x20003edc
   29188:	00028dd5 	.word	0x00028dd5
   2918c:	0002bc3d 	.word	0x0002bc3d
   29190:	0002bc81 	.word	0x0002bc81

00029194 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   29194:	b580      	push	{r7, lr}
   29196:	b082      	sub	sp, #8
   29198:	af00      	add	r7, sp, #0
   2919a:	6078      	str	r0, [r7, #4]
   2919c:	000a      	movs	r2, r1
   2919e:	1cfb      	adds	r3, r7, #3
   291a0:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   291a2:	687b      	ldr	r3, [r7, #4]
   291a4:	4a4d      	ldr	r2, [pc, #308]	; (292dc <_sercom_get_default_pad+0x148>)
   291a6:	4293      	cmp	r3, r2
   291a8:	d03f      	beq.n	2922a <_sercom_get_default_pad+0x96>
   291aa:	4a4c      	ldr	r2, [pc, #304]	; (292dc <_sercom_get_default_pad+0x148>)
   291ac:	4293      	cmp	r3, r2
   291ae:	d806      	bhi.n	291be <_sercom_get_default_pad+0x2a>
   291b0:	4a4b      	ldr	r2, [pc, #300]	; (292e0 <_sercom_get_default_pad+0x14c>)
   291b2:	4293      	cmp	r3, r2
   291b4:	d00f      	beq.n	291d6 <_sercom_get_default_pad+0x42>
   291b6:	4a4b      	ldr	r2, [pc, #300]	; (292e4 <_sercom_get_default_pad+0x150>)
   291b8:	4293      	cmp	r3, r2
   291ba:	d021      	beq.n	29200 <_sercom_get_default_pad+0x6c>
   291bc:	e089      	b.n	292d2 <_sercom_get_default_pad+0x13e>
   291be:	4a4a      	ldr	r2, [pc, #296]	; (292e8 <_sercom_get_default_pad+0x154>)
   291c0:	4293      	cmp	r3, r2
   291c2:	d100      	bne.n	291c6 <_sercom_get_default_pad+0x32>
   291c4:	e05b      	b.n	2927e <_sercom_get_default_pad+0xea>
   291c6:	4a49      	ldr	r2, [pc, #292]	; (292ec <_sercom_get_default_pad+0x158>)
   291c8:	4293      	cmp	r3, r2
   291ca:	d100      	bne.n	291ce <_sercom_get_default_pad+0x3a>
   291cc:	e06c      	b.n	292a8 <_sercom_get_default_pad+0x114>
   291ce:	4a48      	ldr	r2, [pc, #288]	; (292f0 <_sercom_get_default_pad+0x15c>)
   291d0:	4293      	cmp	r3, r2
   291d2:	d03f      	beq.n	29254 <_sercom_get_default_pad+0xc0>
   291d4:	e07d      	b.n	292d2 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   291d6:	1cfb      	adds	r3, r7, #3
   291d8:	781b      	ldrb	r3, [r3, #0]
   291da:	2b01      	cmp	r3, #1
   291dc:	d00a      	beq.n	291f4 <_sercom_get_default_pad+0x60>
   291de:	dc02      	bgt.n	291e6 <_sercom_get_default_pad+0x52>
   291e0:	2b00      	cmp	r3, #0
   291e2:	d005      	beq.n	291f0 <_sercom_get_default_pad+0x5c>
   291e4:	e075      	b.n	292d2 <_sercom_get_default_pad+0x13e>
   291e6:	2b02      	cmp	r3, #2
   291e8:	d006      	beq.n	291f8 <_sercom_get_default_pad+0x64>
   291ea:	2b03      	cmp	r3, #3
   291ec:	d006      	beq.n	291fc <_sercom_get_default_pad+0x68>
   291ee:	e070      	b.n	292d2 <_sercom_get_default_pad+0x13e>
   291f0:	4b40      	ldr	r3, [pc, #256]	; (292f4 <_sercom_get_default_pad+0x160>)
   291f2:	e06f      	b.n	292d4 <_sercom_get_default_pad+0x140>
   291f4:	4b40      	ldr	r3, [pc, #256]	; (292f8 <_sercom_get_default_pad+0x164>)
   291f6:	e06d      	b.n	292d4 <_sercom_get_default_pad+0x140>
   291f8:	4b40      	ldr	r3, [pc, #256]	; (292fc <_sercom_get_default_pad+0x168>)
   291fa:	e06b      	b.n	292d4 <_sercom_get_default_pad+0x140>
   291fc:	4b40      	ldr	r3, [pc, #256]	; (29300 <_sercom_get_default_pad+0x16c>)
   291fe:	e069      	b.n	292d4 <_sercom_get_default_pad+0x140>
   29200:	1cfb      	adds	r3, r7, #3
   29202:	781b      	ldrb	r3, [r3, #0]
   29204:	2b01      	cmp	r3, #1
   29206:	d00a      	beq.n	2921e <_sercom_get_default_pad+0x8a>
   29208:	dc02      	bgt.n	29210 <_sercom_get_default_pad+0x7c>
   2920a:	2b00      	cmp	r3, #0
   2920c:	d005      	beq.n	2921a <_sercom_get_default_pad+0x86>
   2920e:	e060      	b.n	292d2 <_sercom_get_default_pad+0x13e>
   29210:	2b02      	cmp	r3, #2
   29212:	d006      	beq.n	29222 <_sercom_get_default_pad+0x8e>
   29214:	2b03      	cmp	r3, #3
   29216:	d006      	beq.n	29226 <_sercom_get_default_pad+0x92>
   29218:	e05b      	b.n	292d2 <_sercom_get_default_pad+0x13e>
   2921a:	2303      	movs	r3, #3
   2921c:	e05a      	b.n	292d4 <_sercom_get_default_pad+0x140>
   2921e:	4b39      	ldr	r3, [pc, #228]	; (29304 <_sercom_get_default_pad+0x170>)
   29220:	e058      	b.n	292d4 <_sercom_get_default_pad+0x140>
   29222:	4b39      	ldr	r3, [pc, #228]	; (29308 <_sercom_get_default_pad+0x174>)
   29224:	e056      	b.n	292d4 <_sercom_get_default_pad+0x140>
   29226:	4b39      	ldr	r3, [pc, #228]	; (2930c <_sercom_get_default_pad+0x178>)
   29228:	e054      	b.n	292d4 <_sercom_get_default_pad+0x140>
   2922a:	1cfb      	adds	r3, r7, #3
   2922c:	781b      	ldrb	r3, [r3, #0]
   2922e:	2b01      	cmp	r3, #1
   29230:	d00a      	beq.n	29248 <_sercom_get_default_pad+0xb4>
   29232:	dc02      	bgt.n	2923a <_sercom_get_default_pad+0xa6>
   29234:	2b00      	cmp	r3, #0
   29236:	d005      	beq.n	29244 <_sercom_get_default_pad+0xb0>
   29238:	e04b      	b.n	292d2 <_sercom_get_default_pad+0x13e>
   2923a:	2b02      	cmp	r3, #2
   2923c:	d006      	beq.n	2924c <_sercom_get_default_pad+0xb8>
   2923e:	2b03      	cmp	r3, #3
   29240:	d006      	beq.n	29250 <_sercom_get_default_pad+0xbc>
   29242:	e046      	b.n	292d2 <_sercom_get_default_pad+0x13e>
   29244:	4b32      	ldr	r3, [pc, #200]	; (29310 <_sercom_get_default_pad+0x17c>)
   29246:	e045      	b.n	292d4 <_sercom_get_default_pad+0x140>
   29248:	4b32      	ldr	r3, [pc, #200]	; (29314 <_sercom_get_default_pad+0x180>)
   2924a:	e043      	b.n	292d4 <_sercom_get_default_pad+0x140>
   2924c:	4b32      	ldr	r3, [pc, #200]	; (29318 <_sercom_get_default_pad+0x184>)
   2924e:	e041      	b.n	292d4 <_sercom_get_default_pad+0x140>
   29250:	4b32      	ldr	r3, [pc, #200]	; (2931c <_sercom_get_default_pad+0x188>)
   29252:	e03f      	b.n	292d4 <_sercom_get_default_pad+0x140>
   29254:	1cfb      	adds	r3, r7, #3
   29256:	781b      	ldrb	r3, [r3, #0]
   29258:	2b01      	cmp	r3, #1
   2925a:	d00a      	beq.n	29272 <_sercom_get_default_pad+0xde>
   2925c:	dc02      	bgt.n	29264 <_sercom_get_default_pad+0xd0>
   2925e:	2b00      	cmp	r3, #0
   29260:	d005      	beq.n	2926e <_sercom_get_default_pad+0xda>
   29262:	e036      	b.n	292d2 <_sercom_get_default_pad+0x13e>
   29264:	2b02      	cmp	r3, #2
   29266:	d006      	beq.n	29276 <_sercom_get_default_pad+0xe2>
   29268:	2b03      	cmp	r3, #3
   2926a:	d006      	beq.n	2927a <_sercom_get_default_pad+0xe6>
   2926c:	e031      	b.n	292d2 <_sercom_get_default_pad+0x13e>
   2926e:	4b2c      	ldr	r3, [pc, #176]	; (29320 <_sercom_get_default_pad+0x18c>)
   29270:	e030      	b.n	292d4 <_sercom_get_default_pad+0x140>
   29272:	4b2c      	ldr	r3, [pc, #176]	; (29324 <_sercom_get_default_pad+0x190>)
   29274:	e02e      	b.n	292d4 <_sercom_get_default_pad+0x140>
   29276:	4b2c      	ldr	r3, [pc, #176]	; (29328 <_sercom_get_default_pad+0x194>)
   29278:	e02c      	b.n	292d4 <_sercom_get_default_pad+0x140>
   2927a:	4b2c      	ldr	r3, [pc, #176]	; (2932c <_sercom_get_default_pad+0x198>)
   2927c:	e02a      	b.n	292d4 <_sercom_get_default_pad+0x140>
   2927e:	1cfb      	adds	r3, r7, #3
   29280:	781b      	ldrb	r3, [r3, #0]
   29282:	2b01      	cmp	r3, #1
   29284:	d00a      	beq.n	2929c <_sercom_get_default_pad+0x108>
   29286:	dc02      	bgt.n	2928e <_sercom_get_default_pad+0xfa>
   29288:	2b00      	cmp	r3, #0
   2928a:	d005      	beq.n	29298 <_sercom_get_default_pad+0x104>
   2928c:	e021      	b.n	292d2 <_sercom_get_default_pad+0x13e>
   2928e:	2b02      	cmp	r3, #2
   29290:	d006      	beq.n	292a0 <_sercom_get_default_pad+0x10c>
   29292:	2b03      	cmp	r3, #3
   29294:	d006      	beq.n	292a4 <_sercom_get_default_pad+0x110>
   29296:	e01c      	b.n	292d2 <_sercom_get_default_pad+0x13e>
   29298:	4b25      	ldr	r3, [pc, #148]	; (29330 <_sercom_get_default_pad+0x19c>)
   2929a:	e01b      	b.n	292d4 <_sercom_get_default_pad+0x140>
   2929c:	4b25      	ldr	r3, [pc, #148]	; (29334 <_sercom_get_default_pad+0x1a0>)
   2929e:	e019      	b.n	292d4 <_sercom_get_default_pad+0x140>
   292a0:	4b25      	ldr	r3, [pc, #148]	; (29338 <_sercom_get_default_pad+0x1a4>)
   292a2:	e017      	b.n	292d4 <_sercom_get_default_pad+0x140>
   292a4:	4b25      	ldr	r3, [pc, #148]	; (2933c <_sercom_get_default_pad+0x1a8>)
   292a6:	e015      	b.n	292d4 <_sercom_get_default_pad+0x140>
   292a8:	1cfb      	adds	r3, r7, #3
   292aa:	781b      	ldrb	r3, [r3, #0]
   292ac:	2b01      	cmp	r3, #1
   292ae:	d00a      	beq.n	292c6 <_sercom_get_default_pad+0x132>
   292b0:	dc02      	bgt.n	292b8 <_sercom_get_default_pad+0x124>
   292b2:	2b00      	cmp	r3, #0
   292b4:	d005      	beq.n	292c2 <_sercom_get_default_pad+0x12e>
   292b6:	e00c      	b.n	292d2 <_sercom_get_default_pad+0x13e>
   292b8:	2b02      	cmp	r3, #2
   292ba:	d006      	beq.n	292ca <_sercom_get_default_pad+0x136>
   292bc:	2b03      	cmp	r3, #3
   292be:	d006      	beq.n	292ce <_sercom_get_default_pad+0x13a>
   292c0:	e007      	b.n	292d2 <_sercom_get_default_pad+0x13e>
   292c2:	4b1f      	ldr	r3, [pc, #124]	; (29340 <_sercom_get_default_pad+0x1ac>)
   292c4:	e006      	b.n	292d4 <_sercom_get_default_pad+0x140>
   292c6:	4b1f      	ldr	r3, [pc, #124]	; (29344 <_sercom_get_default_pad+0x1b0>)
   292c8:	e004      	b.n	292d4 <_sercom_get_default_pad+0x140>
   292ca:	4b1f      	ldr	r3, [pc, #124]	; (29348 <_sercom_get_default_pad+0x1b4>)
   292cc:	e002      	b.n	292d4 <_sercom_get_default_pad+0x140>
   292ce:	4b1f      	ldr	r3, [pc, #124]	; (2934c <_sercom_get_default_pad+0x1b8>)
   292d0:	e000      	b.n	292d4 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   292d2:	2300      	movs	r3, #0
}
   292d4:	0018      	movs	r0, r3
   292d6:	46bd      	mov	sp, r7
   292d8:	b002      	add	sp, #8
   292da:	bd80      	pop	{r7, pc}
   292dc:	42001000 	.word	0x42001000
   292e0:	42000800 	.word	0x42000800
   292e4:	42000c00 	.word	0x42000c00
   292e8:	42001800 	.word	0x42001800
   292ec:	42001c00 	.word	0x42001c00
   292f0:	42001400 	.word	0x42001400
   292f4:	00040003 	.word	0x00040003
   292f8:	00050003 	.word	0x00050003
   292fc:	00060003 	.word	0x00060003
   29300:	00070003 	.word	0x00070003
   29304:	00010003 	.word	0x00010003
   29308:	001e0003 	.word	0x001e0003
   2930c:	001f0003 	.word	0x001f0003
   29310:	00080003 	.word	0x00080003
   29314:	00090003 	.word	0x00090003
   29318:	000a0003 	.word	0x000a0003
   2931c:	000b0003 	.word	0x000b0003
   29320:	00100003 	.word	0x00100003
   29324:	00110003 	.word	0x00110003
   29328:	00120003 	.word	0x00120003
   2932c:	00130003 	.word	0x00130003
   29330:	000c0003 	.word	0x000c0003
   29334:	000d0003 	.word	0x000d0003
   29338:	000e0003 	.word	0x000e0003
   2933c:	000f0003 	.word	0x000f0003
   29340:	00160003 	.word	0x00160003
   29344:	00170003 	.word	0x00170003
   29348:	00180003 	.word	0x00180003
   2934c:	00190003 	.word	0x00190003

00029350 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   29350:	b590      	push	{r4, r7, lr}
   29352:	b08b      	sub	sp, #44	; 0x2c
   29354:	af00      	add	r7, sp, #0
   29356:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   29358:	230c      	movs	r3, #12
   2935a:	18fb      	adds	r3, r7, r3
   2935c:	4a0f      	ldr	r2, [pc, #60]	; (2939c <_sercom_get_sercom_inst_index+0x4c>)
   2935e:	ca13      	ldmia	r2!, {r0, r1, r4}
   29360:	c313      	stmia	r3!, {r0, r1, r4}
   29362:	ca13      	ldmia	r2!, {r0, r1, r4}
   29364:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   29366:	2300      	movs	r3, #0
   29368:	627b      	str	r3, [r7, #36]	; 0x24
   2936a:	e00e      	b.n	2938a <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   2936c:	230c      	movs	r3, #12
   2936e:	18fb      	adds	r3, r7, r3
   29370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   29372:	0092      	lsls	r2, r2, #2
   29374:	58d3      	ldr	r3, [r2, r3]
   29376:	001a      	movs	r2, r3
   29378:	687b      	ldr	r3, [r7, #4]
   2937a:	429a      	cmp	r2, r3
   2937c:	d102      	bne.n	29384 <_sercom_get_sercom_inst_index+0x34>
			return i;
   2937e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29380:	b2db      	uxtb	r3, r3
   29382:	e006      	b.n	29392 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   29384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29386:	3301      	adds	r3, #1
   29388:	627b      	str	r3, [r7, #36]	; 0x24
   2938a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2938c:	2b05      	cmp	r3, #5
   2938e:	d9ed      	bls.n	2936c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   29390:	2300      	movs	r3, #0
}
   29392:	0018      	movs	r0, r3
   29394:	46bd      	mov	sp, r7
   29396:	b00b      	add	sp, #44	; 0x2c
   29398:	bd90      	pop	{r4, r7, pc}
   2939a:	46c0      	nop			; (mov r8, r8)
   2939c:	0003ba3c 	.word	0x0003ba3c

000293a0 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   293a0:	b580      	push	{r7, lr}
   293a2:	b082      	sub	sp, #8
   293a4:	af00      	add	r7, sp, #0
   293a6:	0002      	movs	r2, r0
   293a8:	1dfb      	adds	r3, r7, #7
   293aa:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   293ac:	46c0      	nop			; (mov r8, r8)
   293ae:	46bd      	mov	sp, r7
   293b0:	b002      	add	sp, #8
   293b2:	bd80      	pop	{r7, pc}

000293b4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   293b4:	b580      	push	{r7, lr}
   293b6:	b084      	sub	sp, #16
   293b8:	af00      	add	r7, sp, #0
   293ba:	0002      	movs	r2, r0
   293bc:	6039      	str	r1, [r7, #0]
   293be:	1dfb      	adds	r3, r7, #7
   293c0:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   293c2:	4b13      	ldr	r3, [pc, #76]	; (29410 <_sercom_set_handler+0x5c>)
   293c4:	781b      	ldrb	r3, [r3, #0]
   293c6:	2201      	movs	r2, #1
   293c8:	4053      	eors	r3, r2
   293ca:	b2db      	uxtb	r3, r3
   293cc:	2b00      	cmp	r3, #0
   293ce:	d015      	beq.n	293fc <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   293d0:	2300      	movs	r3, #0
   293d2:	60fb      	str	r3, [r7, #12]
   293d4:	e00c      	b.n	293f0 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   293d6:	4b0f      	ldr	r3, [pc, #60]	; (29414 <_sercom_set_handler+0x60>)
   293d8:	68fa      	ldr	r2, [r7, #12]
   293da:	0092      	lsls	r2, r2, #2
   293dc:	490e      	ldr	r1, [pc, #56]	; (29418 <_sercom_set_handler+0x64>)
   293de:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   293e0:	4b0e      	ldr	r3, [pc, #56]	; (2941c <_sercom_set_handler+0x68>)
   293e2:	68fa      	ldr	r2, [r7, #12]
   293e4:	0092      	lsls	r2, r2, #2
   293e6:	2100      	movs	r1, #0
   293e8:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   293ea:	68fb      	ldr	r3, [r7, #12]
   293ec:	3301      	adds	r3, #1
   293ee:	60fb      	str	r3, [r7, #12]
   293f0:	68fb      	ldr	r3, [r7, #12]
   293f2:	2b05      	cmp	r3, #5
   293f4:	d9ef      	bls.n	293d6 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   293f6:	4b06      	ldr	r3, [pc, #24]	; (29410 <_sercom_set_handler+0x5c>)
   293f8:	2201      	movs	r2, #1
   293fa:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   293fc:	1dfb      	adds	r3, r7, #7
   293fe:	781a      	ldrb	r2, [r3, #0]
   29400:	4b04      	ldr	r3, [pc, #16]	; (29414 <_sercom_set_handler+0x60>)
   29402:	0092      	lsls	r2, r2, #2
   29404:	6839      	ldr	r1, [r7, #0]
   29406:	50d1      	str	r1, [r2, r3]
}
   29408:	46c0      	nop			; (mov r8, r8)
   2940a:	46bd      	mov	sp, r7
   2940c:	b004      	add	sp, #16
   2940e:	bd80      	pop	{r7, pc}
   29410:	20003ede 	.word	0x20003ede
   29414:	20003ee0 	.word	0x20003ee0
   29418:	000293a1 	.word	0x000293a1
   2941c:	20005834 	.word	0x20005834

00029420 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   29420:	b590      	push	{r4, r7, lr}
   29422:	b085      	sub	sp, #20
   29424:	af00      	add	r7, sp, #0
   29426:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   29428:	2308      	movs	r3, #8
   2942a:	18fb      	adds	r3, r7, r3
   2942c:	4a0b      	ldr	r2, [pc, #44]	; (2945c <_sercom_get_interrupt_vector+0x3c>)
   2942e:	6811      	ldr	r1, [r2, #0]
   29430:	6019      	str	r1, [r3, #0]
   29432:	8892      	ldrh	r2, [r2, #4]
   29434:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   29436:	230f      	movs	r3, #15
   29438:	18fc      	adds	r4, r7, r3
   2943a:	687b      	ldr	r3, [r7, #4]
   2943c:	0018      	movs	r0, r3
   2943e:	4b08      	ldr	r3, [pc, #32]	; (29460 <_sercom_get_interrupt_vector+0x40>)
   29440:	4798      	blx	r3
   29442:	0003      	movs	r3, r0
   29444:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   29446:	230f      	movs	r3, #15
   29448:	18fb      	adds	r3, r7, r3
   2944a:	781b      	ldrb	r3, [r3, #0]
   2944c:	2208      	movs	r2, #8
   2944e:	18ba      	adds	r2, r7, r2
   29450:	5cd3      	ldrb	r3, [r2, r3]
   29452:	b25b      	sxtb	r3, r3
}
   29454:	0018      	movs	r0, r3
   29456:	46bd      	mov	sp, r7
   29458:	b005      	add	sp, #20
   2945a:	bd90      	pop	{r4, r7, pc}
   2945c:	0003ba54 	.word	0x0003ba54
   29460:	00029351 	.word	0x00029351

00029464 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   29464:	b580      	push	{r7, lr}
   29466:	af00      	add	r7, sp, #0
   29468:	4b03      	ldr	r3, [pc, #12]	; (29478 <SERCOM0_Handler+0x14>)
   2946a:	681b      	ldr	r3, [r3, #0]
   2946c:	2000      	movs	r0, #0
   2946e:	4798      	blx	r3
   29470:	46c0      	nop			; (mov r8, r8)
   29472:	46bd      	mov	sp, r7
   29474:	bd80      	pop	{r7, pc}
   29476:	46c0      	nop			; (mov r8, r8)
   29478:	20003ee0 	.word	0x20003ee0

0002947c <SERCOM1_Handler>:
   2947c:	b580      	push	{r7, lr}
   2947e:	af00      	add	r7, sp, #0
   29480:	4b03      	ldr	r3, [pc, #12]	; (29490 <SERCOM1_Handler+0x14>)
   29482:	685b      	ldr	r3, [r3, #4]
   29484:	2001      	movs	r0, #1
   29486:	4798      	blx	r3
   29488:	46c0      	nop			; (mov r8, r8)
   2948a:	46bd      	mov	sp, r7
   2948c:	bd80      	pop	{r7, pc}
   2948e:	46c0      	nop			; (mov r8, r8)
   29490:	20003ee0 	.word	0x20003ee0

00029494 <SERCOM2_Handler>:
   29494:	b580      	push	{r7, lr}
   29496:	af00      	add	r7, sp, #0
   29498:	4b03      	ldr	r3, [pc, #12]	; (294a8 <SERCOM2_Handler+0x14>)
   2949a:	689b      	ldr	r3, [r3, #8]
   2949c:	2002      	movs	r0, #2
   2949e:	4798      	blx	r3
   294a0:	46c0      	nop			; (mov r8, r8)
   294a2:	46bd      	mov	sp, r7
   294a4:	bd80      	pop	{r7, pc}
   294a6:	46c0      	nop			; (mov r8, r8)
   294a8:	20003ee0 	.word	0x20003ee0

000294ac <SERCOM3_Handler>:
   294ac:	b580      	push	{r7, lr}
   294ae:	af00      	add	r7, sp, #0
   294b0:	4b03      	ldr	r3, [pc, #12]	; (294c0 <SERCOM3_Handler+0x14>)
   294b2:	68db      	ldr	r3, [r3, #12]
   294b4:	2003      	movs	r0, #3
   294b6:	4798      	blx	r3
   294b8:	46c0      	nop			; (mov r8, r8)
   294ba:	46bd      	mov	sp, r7
   294bc:	bd80      	pop	{r7, pc}
   294be:	46c0      	nop			; (mov r8, r8)
   294c0:	20003ee0 	.word	0x20003ee0

000294c4 <SERCOM4_Handler>:
   294c4:	b580      	push	{r7, lr}
   294c6:	af00      	add	r7, sp, #0
   294c8:	4b03      	ldr	r3, [pc, #12]	; (294d8 <SERCOM4_Handler+0x14>)
   294ca:	691b      	ldr	r3, [r3, #16]
   294cc:	2004      	movs	r0, #4
   294ce:	4798      	blx	r3
   294d0:	46c0      	nop			; (mov r8, r8)
   294d2:	46bd      	mov	sp, r7
   294d4:	bd80      	pop	{r7, pc}
   294d6:	46c0      	nop			; (mov r8, r8)
   294d8:	20003ee0 	.word	0x20003ee0

000294dc <SERCOM5_Handler>:
   294dc:	b580      	push	{r7, lr}
   294de:	af00      	add	r7, sp, #0
   294e0:	4b03      	ldr	r3, [pc, #12]	; (294f0 <SERCOM5_Handler+0x14>)
   294e2:	695b      	ldr	r3, [r3, #20]
   294e4:	2005      	movs	r0, #5
   294e6:	4798      	blx	r3
   294e8:	46c0      	nop			; (mov r8, r8)
   294ea:	46bd      	mov	sp, r7
   294ec:	bd80      	pop	{r7, pc}
   294ee:	46c0      	nop			; (mov r8, r8)
   294f0:	20003ee0 	.word	0x20003ee0

000294f4 <system_pinmux_get_config_defaults>:
{
   294f4:	b580      	push	{r7, lr}
   294f6:	b082      	sub	sp, #8
   294f8:	af00      	add	r7, sp, #0
   294fa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   294fc:	687b      	ldr	r3, [r7, #4]
   294fe:	2280      	movs	r2, #128	; 0x80
   29500:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29502:	687b      	ldr	r3, [r7, #4]
   29504:	2200      	movs	r2, #0
   29506:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   29508:	687b      	ldr	r3, [r7, #4]
   2950a:	2201      	movs	r2, #1
   2950c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2950e:	687b      	ldr	r3, [r7, #4]
   29510:	2200      	movs	r2, #0
   29512:	70da      	strb	r2, [r3, #3]
}
   29514:	46c0      	nop			; (mov r8, r8)
   29516:	46bd      	mov	sp, r7
   29518:	b002      	add	sp, #8
   2951a:	bd80      	pop	{r7, pc}

0002951c <system_pinmux_get_group_from_gpio_pin>:
{
   2951c:	b580      	push	{r7, lr}
   2951e:	b084      	sub	sp, #16
   29520:	af00      	add	r7, sp, #0
   29522:	0002      	movs	r2, r0
   29524:	1dfb      	adds	r3, r7, #7
   29526:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   29528:	230f      	movs	r3, #15
   2952a:	18fb      	adds	r3, r7, r3
   2952c:	1dfa      	adds	r2, r7, #7
   2952e:	7812      	ldrb	r2, [r2, #0]
   29530:	09d2      	lsrs	r2, r2, #7
   29532:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   29534:	230e      	movs	r3, #14
   29536:	18fb      	adds	r3, r7, r3
   29538:	1dfa      	adds	r2, r7, #7
   2953a:	7812      	ldrb	r2, [r2, #0]
   2953c:	0952      	lsrs	r2, r2, #5
   2953e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   29540:	4b0d      	ldr	r3, [pc, #52]	; (29578 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   29542:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   29544:	230f      	movs	r3, #15
   29546:	18fb      	adds	r3, r7, r3
   29548:	781b      	ldrb	r3, [r3, #0]
   2954a:	2b00      	cmp	r3, #0
   2954c:	d10f      	bne.n	2956e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2954e:	230f      	movs	r3, #15
   29550:	18fb      	adds	r3, r7, r3
   29552:	781b      	ldrb	r3, [r3, #0]
   29554:	009b      	lsls	r3, r3, #2
   29556:	2210      	movs	r2, #16
   29558:	4694      	mov	ip, r2
   2955a:	44bc      	add	ip, r7
   2955c:	4463      	add	r3, ip
   2955e:	3b08      	subs	r3, #8
   29560:	681a      	ldr	r2, [r3, #0]
   29562:	230e      	movs	r3, #14
   29564:	18fb      	adds	r3, r7, r3
   29566:	781b      	ldrb	r3, [r3, #0]
   29568:	01db      	lsls	r3, r3, #7
   2956a:	18d3      	adds	r3, r2, r3
   2956c:	e000      	b.n	29570 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2956e:	2300      	movs	r3, #0
}
   29570:	0018      	movs	r0, r3
   29572:	46bd      	mov	sp, r7
   29574:	b004      	add	sp, #16
   29576:	bd80      	pop	{r7, pc}
   29578:	41004400 	.word	0x41004400

0002957c <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
   2957c:	b580      	push	{r7, lr}
   2957e:	b086      	sub	sp, #24
   29580:	af00      	add	r7, sp, #0
   29582:	0002      	movs	r2, r0
   29584:	1dfb      	adds	r3, r7, #7
   29586:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   29588:	1dfb      	adds	r3, r7, #7
   2958a:	781b      	ldrb	r3, [r3, #0]
   2958c:	0018      	movs	r0, r3
   2958e:	4b19      	ldr	r3, [pc, #100]	; (295f4 <system_pinmux_pin_get_mux_position+0x78>)
   29590:	4798      	blx	r3
   29592:	0003      	movs	r3, r0
   29594:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
   29596:	1dfb      	adds	r3, r7, #7
   29598:	781b      	ldrb	r3, [r3, #0]
   2959a:	221f      	movs	r2, #31
   2959c:	4013      	ands	r3, r2
   2959e:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   295a0:	697a      	ldr	r2, [r7, #20]
   295a2:	2140      	movs	r1, #64	; 0x40
   295a4:	693b      	ldr	r3, [r7, #16]
   295a6:	18d3      	adds	r3, r2, r3
   295a8:	185b      	adds	r3, r3, r1
   295aa:	781b      	ldrb	r3, [r3, #0]
   295ac:	b2db      	uxtb	r3, r3
   295ae:	001a      	movs	r2, r3
   295b0:	2301      	movs	r3, #1
   295b2:	4013      	ands	r3, r2
   295b4:	d101      	bne.n	295ba <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
   295b6:	2380      	movs	r3, #128	; 0x80
   295b8:	e018      	b.n	295ec <system_pinmux_pin_get_mux_position+0x70>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
   295ba:	693b      	ldr	r3, [r7, #16]
   295bc:	085b      	lsrs	r3, r3, #1
   295be:	697a      	ldr	r2, [r7, #20]
   295c0:	2130      	movs	r1, #48	; 0x30
   295c2:	18d3      	adds	r3, r2, r3
   295c4:	185b      	adds	r3, r3, r1
   295c6:	781b      	ldrb	r3, [r3, #0]
   295c8:	b2db      	uxtb	r3, r3
   295ca:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
   295cc:	693b      	ldr	r3, [r7, #16]
   295ce:	2201      	movs	r2, #1
   295d0:	4013      	ands	r3, r2
   295d2:	d006      	beq.n	295e2 <system_pinmux_pin_get_mux_position+0x66>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
   295d4:	68fb      	ldr	r3, [r7, #12]
   295d6:	091b      	lsrs	r3, r3, #4
   295d8:	b2db      	uxtb	r3, r3
   295da:	220f      	movs	r2, #15
   295dc:	4013      	ands	r3, r2
   295de:	b2db      	uxtb	r3, r3
   295e0:	e004      	b.n	295ec <system_pinmux_pin_get_mux_position+0x70>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
   295e2:	68fb      	ldr	r3, [r7, #12]
   295e4:	b2db      	uxtb	r3, r3
   295e6:	220f      	movs	r2, #15
   295e8:	4013      	ands	r3, r2
   295ea:	b2db      	uxtb	r3, r3
	}
}
   295ec:	0018      	movs	r0, r3
   295ee:	46bd      	mov	sp, r7
   295f0:	b006      	add	sp, #24
   295f2:	bd80      	pop	{r7, pc}
   295f4:	0002951d 	.word	0x0002951d

000295f8 <port_get_group_from_gpio_pin>:
{
   295f8:	b580      	push	{r7, lr}
   295fa:	b082      	sub	sp, #8
   295fc:	af00      	add	r7, sp, #0
   295fe:	0002      	movs	r2, r0
   29600:	1dfb      	adds	r3, r7, #7
   29602:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   29604:	1dfb      	adds	r3, r7, #7
   29606:	781b      	ldrb	r3, [r3, #0]
   29608:	0018      	movs	r0, r3
   2960a:	4b03      	ldr	r3, [pc, #12]	; (29618 <port_get_group_from_gpio_pin+0x20>)
   2960c:	4798      	blx	r3
   2960e:	0003      	movs	r3, r0
}
   29610:	0018      	movs	r0, r3
   29612:	46bd      	mov	sp, r7
   29614:	b002      	add	sp, #8
   29616:	bd80      	pop	{r7, pc}
   29618:	0002951d 	.word	0x0002951d

0002961c <port_pin_set_output_level>:
{
   2961c:	b580      	push	{r7, lr}
   2961e:	b084      	sub	sp, #16
   29620:	af00      	add	r7, sp, #0
   29622:	0002      	movs	r2, r0
   29624:	1dfb      	adds	r3, r7, #7
   29626:	701a      	strb	r2, [r3, #0]
   29628:	1dbb      	adds	r3, r7, #6
   2962a:	1c0a      	adds	r2, r1, #0
   2962c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2962e:	1dfb      	adds	r3, r7, #7
   29630:	781b      	ldrb	r3, [r3, #0]
   29632:	0018      	movs	r0, r3
   29634:	4b0d      	ldr	r3, [pc, #52]	; (2966c <port_pin_set_output_level+0x50>)
   29636:	4798      	blx	r3
   29638:	0003      	movs	r3, r0
   2963a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2963c:	1dfb      	adds	r3, r7, #7
   2963e:	781b      	ldrb	r3, [r3, #0]
   29640:	221f      	movs	r2, #31
   29642:	4013      	ands	r3, r2
   29644:	2201      	movs	r2, #1
   29646:	409a      	lsls	r2, r3
   29648:	0013      	movs	r3, r2
   2964a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2964c:	1dbb      	adds	r3, r7, #6
   2964e:	781b      	ldrb	r3, [r3, #0]
   29650:	2b00      	cmp	r3, #0
   29652:	d003      	beq.n	2965c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   29654:	68fb      	ldr	r3, [r7, #12]
   29656:	68ba      	ldr	r2, [r7, #8]
   29658:	619a      	str	r2, [r3, #24]
}
   2965a:	e002      	b.n	29662 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2965c:	68fb      	ldr	r3, [r7, #12]
   2965e:	68ba      	ldr	r2, [r7, #8]
   29660:	615a      	str	r2, [r3, #20]
}
   29662:	46c0      	nop			; (mov r8, r8)
   29664:	46bd      	mov	sp, r7
   29666:	b004      	add	sp, #16
   29668:	bd80      	pop	{r7, pc}
   2966a:	46c0      	nop			; (mov r8, r8)
   2966c:	000295f9 	.word	0x000295f9

00029670 <system_gclk_chan_get_config_defaults>:
{
   29670:	b580      	push	{r7, lr}
   29672:	b082      	sub	sp, #8
   29674:	af00      	add	r7, sp, #0
   29676:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29678:	687b      	ldr	r3, [r7, #4]
   2967a:	2200      	movs	r2, #0
   2967c:	701a      	strb	r2, [r3, #0]
}
   2967e:	46c0      	nop			; (mov r8, r8)
   29680:	46bd      	mov	sp, r7
   29682:	b002      	add	sp, #8
   29684:	bd80      	pop	{r7, pc}
	...

00029688 <system_apb_clock_set_mask>:
{
   29688:	b580      	push	{r7, lr}
   2968a:	b082      	sub	sp, #8
   2968c:	af00      	add	r7, sp, #0
   2968e:	0002      	movs	r2, r0
   29690:	6039      	str	r1, [r7, #0]
   29692:	1dfb      	adds	r3, r7, #7
   29694:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29696:	1dfb      	adds	r3, r7, #7
   29698:	781b      	ldrb	r3, [r3, #0]
   2969a:	2b01      	cmp	r3, #1
   2969c:	d00a      	beq.n	296b4 <system_apb_clock_set_mask+0x2c>
   2969e:	2b02      	cmp	r3, #2
   296a0:	d00f      	beq.n	296c2 <system_apb_clock_set_mask+0x3a>
   296a2:	2b00      	cmp	r3, #0
   296a4:	d114      	bne.n	296d0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   296a6:	4b0e      	ldr	r3, [pc, #56]	; (296e0 <system_apb_clock_set_mask+0x58>)
   296a8:	4a0d      	ldr	r2, [pc, #52]	; (296e0 <system_apb_clock_set_mask+0x58>)
   296aa:	6991      	ldr	r1, [r2, #24]
   296ac:	683a      	ldr	r2, [r7, #0]
   296ae:	430a      	orrs	r2, r1
   296b0:	619a      	str	r2, [r3, #24]
			break;
   296b2:	e00f      	b.n	296d4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   296b4:	4b0a      	ldr	r3, [pc, #40]	; (296e0 <system_apb_clock_set_mask+0x58>)
   296b6:	4a0a      	ldr	r2, [pc, #40]	; (296e0 <system_apb_clock_set_mask+0x58>)
   296b8:	69d1      	ldr	r1, [r2, #28]
   296ba:	683a      	ldr	r2, [r7, #0]
   296bc:	430a      	orrs	r2, r1
   296be:	61da      	str	r2, [r3, #28]
			break;
   296c0:	e008      	b.n	296d4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   296c2:	4b07      	ldr	r3, [pc, #28]	; (296e0 <system_apb_clock_set_mask+0x58>)
   296c4:	4a06      	ldr	r2, [pc, #24]	; (296e0 <system_apb_clock_set_mask+0x58>)
   296c6:	6a11      	ldr	r1, [r2, #32]
   296c8:	683a      	ldr	r2, [r7, #0]
   296ca:	430a      	orrs	r2, r1
   296cc:	621a      	str	r2, [r3, #32]
			break;
   296ce:	e001      	b.n	296d4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   296d0:	2317      	movs	r3, #23
   296d2:	e000      	b.n	296d6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   296d4:	2300      	movs	r3, #0
}
   296d6:	0018      	movs	r0, r3
   296d8:	46bd      	mov	sp, r7
   296da:	b002      	add	sp, #8
   296dc:	bd80      	pop	{r7, pc}
   296de:	46c0      	nop			; (mov r8, r8)
   296e0:	40000400 	.word	0x40000400

000296e4 <system_is_debugger_present>:
{
   296e4:	b580      	push	{r7, lr}
   296e6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   296e8:	4b05      	ldr	r3, [pc, #20]	; (29700 <system_is_debugger_present+0x1c>)
   296ea:	789b      	ldrb	r3, [r3, #2]
   296ec:	b2db      	uxtb	r3, r3
   296ee:	001a      	movs	r2, r3
   296f0:	2302      	movs	r3, #2
   296f2:	4013      	ands	r3, r2
   296f4:	1e5a      	subs	r2, r3, #1
   296f6:	4193      	sbcs	r3, r2
   296f8:	b2db      	uxtb	r3, r3
}
   296fa:	0018      	movs	r0, r3
   296fc:	46bd      	mov	sp, r7
   296fe:	bd80      	pop	{r7, pc}
   29700:	41002000 	.word	0x41002000

00029704 <spi_is_syncing>:
{
   29704:	b580      	push	{r7, lr}
   29706:	b084      	sub	sp, #16
   29708:	af00      	add	r7, sp, #0
   2970a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2970c:	687b      	ldr	r3, [r7, #4]
   2970e:	681b      	ldr	r3, [r3, #0]
   29710:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   29712:	68fb      	ldr	r3, [r7, #12]
   29714:	69db      	ldr	r3, [r3, #28]
   29716:	1e5a      	subs	r2, r3, #1
   29718:	4193      	sbcs	r3, r2
   2971a:	b2db      	uxtb	r3, r3
}
   2971c:	0018      	movs	r0, r3
   2971e:	46bd      	mov	sp, r7
   29720:	b004      	add	sp, #16
   29722:	bd80      	pop	{r7, pc}

00029724 <spi_enable>:
{
   29724:	b580      	push	{r7, lr}
   29726:	b084      	sub	sp, #16
   29728:	af00      	add	r7, sp, #0
   2972a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2972c:	687b      	ldr	r3, [r7, #4]
   2972e:	681b      	ldr	r3, [r3, #0]
   29730:	60fb      	str	r3, [r7, #12]
	while (spi_is_syncing(module)) {
   29732:	46c0      	nop			; (mov r8, r8)
   29734:	687b      	ldr	r3, [r7, #4]
   29736:	0018      	movs	r0, r3
   29738:	4b06      	ldr	r3, [pc, #24]	; (29754 <spi_enable+0x30>)
   2973a:	4798      	blx	r3
   2973c:	1e03      	subs	r3, r0, #0
   2973e:	d1f9      	bne.n	29734 <spi_enable+0x10>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   29740:	68fb      	ldr	r3, [r7, #12]
   29742:	681b      	ldr	r3, [r3, #0]
   29744:	2202      	movs	r2, #2
   29746:	431a      	orrs	r2, r3
   29748:	68fb      	ldr	r3, [r7, #12]
   2974a:	601a      	str	r2, [r3, #0]
}
   2974c:	46c0      	nop			; (mov r8, r8)
   2974e:	46bd      	mov	sp, r7
   29750:	b004      	add	sp, #16
   29752:	bd80      	pop	{r7, pc}
   29754:	00029705 	.word	0x00029705

00029758 <spi_disable>:
{
   29758:	b580      	push	{r7, lr}
   2975a:	b084      	sub	sp, #16
   2975c:	af00      	add	r7, sp, #0
   2975e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   29760:	687b      	ldr	r3, [r7, #4]
   29762:	681b      	ldr	r3, [r3, #0]
   29764:	60fb      	str	r3, [r7, #12]
	while (spi_is_syncing(module)) {
   29766:	46c0      	nop			; (mov r8, r8)
   29768:	687b      	ldr	r3, [r7, #4]
   2976a:	0018      	movs	r0, r3
   2976c:	4b0a      	ldr	r3, [pc, #40]	; (29798 <spi_disable+0x40>)
   2976e:	4798      	blx	r3
   29770:	1e03      	subs	r3, r0, #0
   29772:	d1f9      	bne.n	29768 <spi_disable+0x10>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   29774:	68fb      	ldr	r3, [r7, #12]
   29776:	228f      	movs	r2, #143	; 0x8f
   29778:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   2977a:	68fb      	ldr	r3, [r7, #12]
   2977c:	228f      	movs	r2, #143	; 0x8f
   2977e:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   29780:	68fb      	ldr	r3, [r7, #12]
   29782:	681b      	ldr	r3, [r3, #0]
   29784:	2202      	movs	r2, #2
   29786:	4393      	bics	r3, r2
   29788:	001a      	movs	r2, r3
   2978a:	68fb      	ldr	r3, [r7, #12]
   2978c:	601a      	str	r2, [r3, #0]
}
   2978e:	46c0      	nop			; (mov r8, r8)
   29790:	46bd      	mov	sp, r7
   29792:	b004      	add	sp, #16
   29794:	bd80      	pop	{r7, pc}
   29796:	46c0      	nop			; (mov r8, r8)
   29798:	00029705 	.word	0x00029705

0002979c <spi_is_write_complete>:
{
   2979c:	b580      	push	{r7, lr}
   2979e:	b084      	sub	sp, #16
   297a0:	af00      	add	r7, sp, #0
   297a2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   297a4:	687b      	ldr	r3, [r7, #4]
   297a6:	681b      	ldr	r3, [r3, #0]
   297a8:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   297aa:	68fb      	ldr	r3, [r7, #12]
   297ac:	7e1b      	ldrb	r3, [r3, #24]
   297ae:	b2db      	uxtb	r3, r3
   297b0:	001a      	movs	r2, r3
   297b2:	2302      	movs	r3, #2
   297b4:	4013      	ands	r3, r2
   297b6:	1e5a      	subs	r2, r3, #1
   297b8:	4193      	sbcs	r3, r2
   297ba:	b2db      	uxtb	r3, r3
}
   297bc:	0018      	movs	r0, r3
   297be:	46bd      	mov	sp, r7
   297c0:	b004      	add	sp, #16
   297c2:	bd80      	pop	{r7, pc}

000297c4 <spi_is_ready_to_write>:
{
   297c4:	b580      	push	{r7, lr}
   297c6:	b084      	sub	sp, #16
   297c8:	af00      	add	r7, sp, #0
   297ca:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   297cc:	687b      	ldr	r3, [r7, #4]
   297ce:	681b      	ldr	r3, [r3, #0]
   297d0:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   297d2:	68fb      	ldr	r3, [r7, #12]
   297d4:	7e1b      	ldrb	r3, [r3, #24]
   297d6:	b2db      	uxtb	r3, r3
   297d8:	001a      	movs	r2, r3
   297da:	2301      	movs	r3, #1
   297dc:	4013      	ands	r3, r2
   297de:	1e5a      	subs	r2, r3, #1
   297e0:	4193      	sbcs	r3, r2
   297e2:	b2db      	uxtb	r3, r3
}
   297e4:	0018      	movs	r0, r3
   297e6:	46bd      	mov	sp, r7
   297e8:	b004      	add	sp, #16
   297ea:	bd80      	pop	{r7, pc}

000297ec <spi_is_ready_to_read>:
{
   297ec:	b580      	push	{r7, lr}
   297ee:	b084      	sub	sp, #16
   297f0:	af00      	add	r7, sp, #0
   297f2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   297f4:	687b      	ldr	r3, [r7, #4]
   297f6:	681b      	ldr	r3, [r3, #0]
   297f8:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   297fa:	68fb      	ldr	r3, [r7, #12]
   297fc:	7e1b      	ldrb	r3, [r3, #24]
   297fe:	b2db      	uxtb	r3, r3
   29800:	001a      	movs	r2, r3
   29802:	2304      	movs	r3, #4
   29804:	4013      	ands	r3, r2
   29806:	1e5a      	subs	r2, r3, #1
   29808:	4193      	sbcs	r3, r2
   2980a:	b2db      	uxtb	r3, r3
}
   2980c:	0018      	movs	r0, r3
   2980e:	46bd      	mov	sp, r7
   29810:	b004      	add	sp, #16
   29812:	bd80      	pop	{r7, pc}

00029814 <spi_write>:
{
   29814:	b580      	push	{r7, lr}
   29816:	b084      	sub	sp, #16
   29818:	af00      	add	r7, sp, #0
   2981a:	6078      	str	r0, [r7, #4]
   2981c:	000a      	movs	r2, r1
   2981e:	1cbb      	adds	r3, r7, #2
   29820:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   29822:	687b      	ldr	r3, [r7, #4]
   29824:	681b      	ldr	r3, [r3, #0]
   29826:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   29828:	687b      	ldr	r3, [r7, #4]
   2982a:	0018      	movs	r0, r3
   2982c:	4b0a      	ldr	r3, [pc, #40]	; (29858 <spi_write+0x44>)
   2982e:	4798      	blx	r3
   29830:	0003      	movs	r3, r0
   29832:	001a      	movs	r2, r3
   29834:	2301      	movs	r3, #1
   29836:	4053      	eors	r3, r2
   29838:	b2db      	uxtb	r3, r3
   2983a:	2b00      	cmp	r3, #0
   2983c:	d001      	beq.n	29842 <spi_write+0x2e>
		return STATUS_BUSY;
   2983e:	2305      	movs	r3, #5
   29840:	e006      	b.n	29850 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   29842:	1cbb      	adds	r3, r7, #2
   29844:	881b      	ldrh	r3, [r3, #0]
   29846:	05db      	lsls	r3, r3, #23
   29848:	0dda      	lsrs	r2, r3, #23
   2984a:	68fb      	ldr	r3, [r7, #12]
   2984c:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   2984e:	2300      	movs	r3, #0
}
   29850:	0018      	movs	r0, r3
   29852:	46bd      	mov	sp, r7
   29854:	b004      	add	sp, #16
   29856:	bd80      	pop	{r7, pc}
   29858:	000297c5 	.word	0x000297c5

0002985c <spi_read>:
{
   2985c:	b580      	push	{r7, lr}
   2985e:	b084      	sub	sp, #16
   29860:	af00      	add	r7, sp, #0
   29862:	6078      	str	r0, [r7, #4]
   29864:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   29866:	687b      	ldr	r3, [r7, #4]
   29868:	681b      	ldr	r3, [r3, #0]
   2986a:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   2986c:	687b      	ldr	r3, [r7, #4]
   2986e:	0018      	movs	r0, r3
   29870:	4b1b      	ldr	r3, [pc, #108]	; (298e0 <spi_read+0x84>)
   29872:	4798      	blx	r3
   29874:	0003      	movs	r3, r0
   29876:	001a      	movs	r2, r3
   29878:	2301      	movs	r3, #1
   2987a:	4053      	eors	r3, r2
   2987c:	b2db      	uxtb	r3, r3
   2987e:	2b00      	cmp	r3, #0
   29880:	d001      	beq.n	29886 <spi_read+0x2a>
		return STATUS_ERR_IO;
   29882:	2310      	movs	r3, #16
   29884:	e027      	b.n	298d6 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   29886:	230f      	movs	r3, #15
   29888:	18fb      	adds	r3, r7, r3
   2988a:	2200      	movs	r2, #0
   2988c:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2988e:	68bb      	ldr	r3, [r7, #8]
   29890:	8b5b      	ldrh	r3, [r3, #26]
   29892:	b29b      	uxth	r3, r3
   29894:	001a      	movs	r2, r3
   29896:	2304      	movs	r3, #4
   29898:	4013      	ands	r3, r2
   2989a:	d006      	beq.n	298aa <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   2989c:	230f      	movs	r3, #15
   2989e:	18fb      	adds	r3, r7, r3
   298a0:	221e      	movs	r2, #30
   298a2:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   298a4:	68bb      	ldr	r3, [r7, #8]
   298a6:	2204      	movs	r2, #4
   298a8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   298aa:	687b      	ldr	r3, [r7, #4]
   298ac:	799b      	ldrb	r3, [r3, #6]
   298ae:	2b01      	cmp	r3, #1
   298b0:	d108      	bne.n	298c4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   298b2:	68bb      	ldr	r3, [r7, #8]
   298b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   298b6:	b29b      	uxth	r3, r3
   298b8:	05db      	lsls	r3, r3, #23
   298ba:	0ddb      	lsrs	r3, r3, #23
   298bc:	b29a      	uxth	r2, r3
   298be:	683b      	ldr	r3, [r7, #0]
   298c0:	801a      	strh	r2, [r3, #0]
   298c2:	e005      	b.n	298d0 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   298c4:	68bb      	ldr	r3, [r7, #8]
   298c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   298c8:	b2db      	uxtb	r3, r3
   298ca:	b29a      	uxth	r2, r3
   298cc:	683b      	ldr	r3, [r7, #0]
   298ce:	801a      	strh	r2, [r3, #0]
	return retval;
   298d0:	230f      	movs	r3, #15
   298d2:	18fb      	adds	r3, r7, r3
   298d4:	781b      	ldrb	r3, [r3, #0]
}
   298d6:	0018      	movs	r0, r3
   298d8:	46bd      	mov	sp, r7
   298da:	b004      	add	sp, #16
   298dc:	bd80      	pop	{r7, pc}
   298de:	46c0      	nop			; (mov r8, r8)
   298e0:	000297ed 	.word	0x000297ed

000298e4 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   298e4:	b590      	push	{r4, r7, lr}
   298e6:	b089      	sub	sp, #36	; 0x24
   298e8:	af00      	add	r7, sp, #0
   298ea:	6078      	str	r0, [r7, #4]
   298ec:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   298ee:	230c      	movs	r3, #12
   298f0:	18fb      	adds	r3, r7, r3
   298f2:	2200      	movs	r2, #0
   298f4:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   298f6:	687b      	ldr	r3, [r7, #4]
   298f8:	681b      	ldr	r3, [r3, #0]
   298fa:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   298fc:	687b      	ldr	r3, [r7, #4]
   298fe:	0018      	movs	r0, r3
   29900:	4b24      	ldr	r3, [pc, #144]	; (29994 <spi_set_baudrate+0xb0>)
   29902:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   29904:	46c0      	nop			; (mov r8, r8)
   29906:	687b      	ldr	r3, [r7, #4]
   29908:	0018      	movs	r0, r3
   2990a:	4b23      	ldr	r3, [pc, #140]	; (29998 <spi_set_baudrate+0xb4>)
   2990c:	4798      	blx	r3
   2990e:	1e03      	subs	r3, r0, #0
   29910:	d1f9      	bne.n	29906 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   29912:	687b      	ldr	r3, [r7, #4]
   29914:	681b      	ldr	r3, [r3, #0]
   29916:	0018      	movs	r0, r3
   29918:	4b20      	ldr	r3, [pc, #128]	; (2999c <spi_set_baudrate+0xb8>)
   2991a:	4798      	blx	r3
   2991c:	0003      	movs	r3, r0
   2991e:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   29920:	69bb      	ldr	r3, [r7, #24]
   29922:	3314      	adds	r3, #20
   29924:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   29926:	697b      	ldr	r3, [r7, #20]
   29928:	b2db      	uxtb	r3, r3
   2992a:	0018      	movs	r0, r3
   2992c:	4b1c      	ldr	r3, [pc, #112]	; (299a0 <spi_set_baudrate+0xbc>)
   2992e:	4798      	blx	r3
   29930:	0003      	movs	r3, r0
   29932:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   29934:	230f      	movs	r3, #15
   29936:	18fc      	adds	r4, r7, r3
   29938:	230c      	movs	r3, #12
   2993a:	18fa      	adds	r2, r7, r3
   2993c:	6939      	ldr	r1, [r7, #16]
   2993e:	683b      	ldr	r3, [r7, #0]
   29940:	0018      	movs	r0, r3
   29942:	4b18      	ldr	r3, [pc, #96]	; (299a4 <spi_set_baudrate+0xc0>)
   29944:	4798      	blx	r3
   29946:	0003      	movs	r3, r0
   29948:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   2994a:	230f      	movs	r3, #15
   2994c:	18fb      	adds	r3, r7, r3
   2994e:	781b      	ldrb	r3, [r3, #0]
   29950:	2b00      	cmp	r3, #0
   29952:	d001      	beq.n	29958 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   29954:	2317      	movs	r3, #23
   29956:	e018      	b.n	2998a <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   29958:	230c      	movs	r3, #12
   2995a:	18fb      	adds	r3, r7, r3
   2995c:	881b      	ldrh	r3, [r3, #0]
   2995e:	b2da      	uxtb	r2, r3
   29960:	69fb      	ldr	r3, [r7, #28]
   29962:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   29964:	46c0      	nop			; (mov r8, r8)
   29966:	687b      	ldr	r3, [r7, #4]
   29968:	0018      	movs	r0, r3
   2996a:	4b0b      	ldr	r3, [pc, #44]	; (29998 <spi_set_baudrate+0xb4>)
   2996c:	4798      	blx	r3
   2996e:	1e03      	subs	r3, r0, #0
   29970:	d1f9      	bne.n	29966 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   29972:	687b      	ldr	r3, [r7, #4]
   29974:	0018      	movs	r0, r3
   29976:	4b0c      	ldr	r3, [pc, #48]	; (299a8 <spi_set_baudrate+0xc4>)
   29978:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   2997a:	46c0      	nop			; (mov r8, r8)
   2997c:	687b      	ldr	r3, [r7, #4]
   2997e:	0018      	movs	r0, r3
   29980:	4b05      	ldr	r3, [pc, #20]	; (29998 <spi_set_baudrate+0xb4>)
   29982:	4798      	blx	r3
   29984:	1e03      	subs	r3, r0, #0
   29986:	d1f9      	bne.n	2997c <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   29988:	2300      	movs	r3, #0
}
   2998a:	0018      	movs	r0, r3
   2998c:	46bd      	mov	sp, r7
   2998e:	b009      	add	sp, #36	; 0x24
   29990:	bd90      	pop	{r4, r7, pc}
   29992:	46c0      	nop			; (mov r8, r8)
   29994:	00029759 	.word	0x00029759
   29998:	00029705 	.word	0x00029705
   2999c:	00029351 	.word	0x00029351
   299a0:	0002bd61 	.word	0x0002bd61
   299a4:	00028ecb 	.word	0x00028ecb
   299a8:	00029725 	.word	0x00029725

000299ac <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
   299ac:	b580      	push	{r7, lr}
   299ae:	b084      	sub	sp, #16
   299b0:	af00      	add	r7, sp, #0
   299b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   299b4:	687b      	ldr	r3, [r7, #4]
   299b6:	681b      	ldr	r3, [r3, #0]
   299b8:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   299ba:	68fb      	ldr	r3, [r7, #12]
   299bc:	2202      	movs	r2, #2
   299be:	761a      	strb	r2, [r3, #24]
}
   299c0:	46c0      	nop			; (mov r8, r8)
   299c2:	46bd      	mov	sp, r7
   299c4:	b004      	add	sp, #16
   299c6:	bd80      	pop	{r7, pc}

000299c8 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   299c8:	b590      	push	{r4, r7, lr}
   299ca:	b093      	sub	sp, #76	; 0x4c
   299cc:	af00      	add	r7, sp, #0
   299ce:	6078      	str	r0, [r7, #4]
   299d0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   299d2:	687b      	ldr	r3, [r7, #4]
   299d4:	681b      	ldr	r3, [r3, #0]
   299d6:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   299d8:	687b      	ldr	r3, [r7, #4]
   299da:	681b      	ldr	r3, [r3, #0]
   299dc:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   299de:	231c      	movs	r3, #28
   299e0:	18fb      	adds	r3, r7, r3
   299e2:	0018      	movs	r0, r3
   299e4:	4b85      	ldr	r3, [pc, #532]	; (29bfc <_spi_set_config+0x234>)
   299e6:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   299e8:	231c      	movs	r3, #28
   299ea:	18fb      	adds	r3, r7, r3
   299ec:	2200      	movs	r2, #0
   299ee:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   299f0:	683b      	ldr	r3, [r7, #0]
   299f2:	781b      	ldrb	r3, [r3, #0]
   299f4:	2b00      	cmp	r3, #0
   299f6:	d103      	bne.n	29a00 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   299f8:	231c      	movs	r3, #28
   299fa:	18fb      	adds	r3, r7, r3
   299fc:	2200      	movs	r2, #0
   299fe:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   29a00:	683b      	ldr	r3, [r7, #0]
   29a02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   29a04:	230c      	movs	r3, #12
   29a06:	18fb      	adds	r3, r7, r3
   29a08:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   29a0a:	683b      	ldr	r3, [r7, #0]
   29a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   29a0e:	230c      	movs	r3, #12
   29a10:	18fb      	adds	r3, r7, r3
   29a12:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   29a14:	683b      	ldr	r3, [r7, #0]
   29a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   29a18:	230c      	movs	r3, #12
   29a1a:	18fb      	adds	r3, r7, r3
   29a1c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   29a1e:	683b      	ldr	r3, [r7, #0]
   29a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   29a22:	230c      	movs	r3, #12
   29a24:	18fb      	adds	r3, r7, r3
   29a26:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   29a28:	2347      	movs	r3, #71	; 0x47
   29a2a:	18fb      	adds	r3, r7, r3
   29a2c:	2200      	movs	r2, #0
   29a2e:	701a      	strb	r2, [r3, #0]
   29a30:	e02c      	b.n	29a8c <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   29a32:	2347      	movs	r3, #71	; 0x47
   29a34:	18fb      	adds	r3, r7, r3
   29a36:	781a      	ldrb	r2, [r3, #0]
   29a38:	230c      	movs	r3, #12
   29a3a:	18fb      	adds	r3, r7, r3
   29a3c:	0092      	lsls	r2, r2, #2
   29a3e:	58d3      	ldr	r3, [r2, r3]
   29a40:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   29a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29a44:	2b00      	cmp	r3, #0
   29a46:	d109      	bne.n	29a5c <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   29a48:	2347      	movs	r3, #71	; 0x47
   29a4a:	18fb      	adds	r3, r7, r3
   29a4c:	781a      	ldrb	r2, [r3, #0]
   29a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   29a50:	0011      	movs	r1, r2
   29a52:	0018      	movs	r0, r3
   29a54:	4b6a      	ldr	r3, [pc, #424]	; (29c00 <_spi_set_config+0x238>)
   29a56:	4798      	blx	r3
   29a58:	0003      	movs	r3, r0
   29a5a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   29a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29a5e:	3301      	adds	r3, #1
   29a60:	d00d      	beq.n	29a7e <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   29a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29a64:	b2da      	uxtb	r2, r3
   29a66:	231c      	movs	r3, #28
   29a68:	18fb      	adds	r3, r7, r3
   29a6a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   29a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29a6e:	0c1b      	lsrs	r3, r3, #16
   29a70:	b2db      	uxtb	r3, r3
   29a72:	221c      	movs	r2, #28
   29a74:	18ba      	adds	r2, r7, r2
   29a76:	0011      	movs	r1, r2
   29a78:	0018      	movs	r0, r3
   29a7a:	4b62      	ldr	r3, [pc, #392]	; (29c04 <_spi_set_config+0x23c>)
   29a7c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   29a7e:	2347      	movs	r3, #71	; 0x47
   29a80:	18fb      	adds	r3, r7, r3
   29a82:	781a      	ldrb	r2, [r3, #0]
   29a84:	2347      	movs	r3, #71	; 0x47
   29a86:	18fb      	adds	r3, r7, r3
   29a88:	3201      	adds	r2, #1
   29a8a:	701a      	strb	r2, [r3, #0]
   29a8c:	2347      	movs	r3, #71	; 0x47
   29a8e:	18fb      	adds	r3, r7, r3
   29a90:	781b      	ldrb	r3, [r3, #0]
   29a92:	2b03      	cmp	r3, #3
   29a94:	d9cd      	bls.n	29a32 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   29a96:	683b      	ldr	r3, [r7, #0]
   29a98:	781a      	ldrb	r2, [r3, #0]
   29a9a:	687b      	ldr	r3, [r7, #4]
   29a9c:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   29a9e:	683b      	ldr	r3, [r7, #0]
   29aa0:	7c1a      	ldrb	r2, [r3, #16]
   29aa2:	687b      	ldr	r3, [r7, #4]
   29aa4:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   29aa6:	683b      	ldr	r3, [r7, #0]
   29aa8:	7c9a      	ldrb	r2, [r3, #18]
   29aaa:	687b      	ldr	r3, [r7, #4]
   29aac:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   29aae:	683b      	ldr	r3, [r7, #0]
   29ab0:	7d1a      	ldrb	r2, [r3, #20]
   29ab2:	687b      	ldr	r3, [r7, #4]
   29ab4:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   29ab6:	230a      	movs	r3, #10
   29ab8:	18fb      	adds	r3, r7, r3
   29aba:	2200      	movs	r2, #0
   29abc:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   29abe:	2300      	movs	r3, #0
   29ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   29ac2:	2300      	movs	r3, #0
   29ac4:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   29ac6:	683b      	ldr	r3, [r7, #0]
   29ac8:	781b      	ldrb	r3, [r3, #0]
   29aca:	2b01      	cmp	r3, #1
   29acc:	d129      	bne.n	29b22 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   29ace:	687b      	ldr	r3, [r7, #4]
   29ad0:	681b      	ldr	r3, [r3, #0]
   29ad2:	0018      	movs	r0, r3
   29ad4:	4b4c      	ldr	r3, [pc, #304]	; (29c08 <_spi_set_config+0x240>)
   29ad6:	4798      	blx	r3
   29ad8:	0003      	movs	r3, r0
   29ada:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   29adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29ade:	3314      	adds	r3, #20
   29ae0:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   29ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   29ae4:	b2db      	uxtb	r3, r3
   29ae6:	0018      	movs	r0, r3
   29ae8:	4b48      	ldr	r3, [pc, #288]	; (29c0c <_spi_set_config+0x244>)
   29aea:	4798      	blx	r3
   29aec:	0003      	movs	r3, r0
   29aee:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   29af0:	683b      	ldr	r3, [r7, #0]
   29af2:	699b      	ldr	r3, [r3, #24]
   29af4:	2223      	movs	r2, #35	; 0x23
   29af6:	18bc      	adds	r4, r7, r2
   29af8:	220a      	movs	r2, #10
   29afa:	18ba      	adds	r2, r7, r2
   29afc:	6a79      	ldr	r1, [r7, #36]	; 0x24
   29afe:	0018      	movs	r0, r3
   29b00:	4b43      	ldr	r3, [pc, #268]	; (29c10 <_spi_set_config+0x248>)
   29b02:	4798      	blx	r3
   29b04:	0003      	movs	r3, r0
   29b06:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   29b08:	2323      	movs	r3, #35	; 0x23
   29b0a:	18fb      	adds	r3, r7, r3
   29b0c:	781b      	ldrb	r3, [r3, #0]
   29b0e:	2b00      	cmp	r3, #0
   29b10:	d001      	beq.n	29b16 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   29b12:	2317      	movs	r3, #23
   29b14:	e06d      	b.n	29bf2 <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   29b16:	230a      	movs	r3, #10
   29b18:	18fb      	adds	r3, r7, r3
   29b1a:	881b      	ldrh	r3, [r3, #0]
   29b1c:	b2da      	uxtb	r2, r3
   29b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29b20:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
   29b22:	683b      	ldr	r3, [r7, #0]
   29b24:	781b      	ldrb	r3, [r3, #0]
   29b26:	2b00      	cmp	r3, #0
   29b28:	d11a      	bne.n	29b60 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
   29b2a:	683b      	ldr	r3, [r7, #0]
   29b2c:	699b      	ldr	r3, [r3, #24]
   29b2e:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
   29b30:	683b      	ldr	r3, [r7, #0]
   29b32:	8b9b      	ldrh	r3, [r3, #28]
   29b34:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
   29b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   29b3a:	683a      	ldr	r2, [r7, #0]
   29b3c:	7f92      	ldrb	r2, [r2, #30]
   29b3e:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
   29b40:	683a      	ldr	r2, [r7, #0]
   29b42:	7fd2      	ldrb	r2, [r2, #31]
   29b44:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   29b46:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
   29b48:	431a      	orrs	r2, r3
   29b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29b4c:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
   29b4e:	683b      	ldr	r3, [r7, #0]
   29b50:	2220      	movs	r2, #32
   29b52:	5c9b      	ldrb	r3, [r3, r2]
   29b54:	2b00      	cmp	r3, #0
   29b56:	d003      	beq.n	29b60 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
   29b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   29b5a:	2240      	movs	r2, #64	; 0x40
   29b5c:	4313      	orrs	r3, r2
   29b5e:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   29b60:	683b      	ldr	r3, [r7, #0]
   29b62:	685b      	ldr	r3, [r3, #4]
   29b64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   29b66:	4313      	orrs	r3, r2
   29b68:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   29b6a:	683b      	ldr	r3, [r7, #0]
   29b6c:	689b      	ldr	r3, [r3, #8]
   29b6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   29b70:	4313      	orrs	r3, r2
   29b72:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   29b74:	683b      	ldr	r3, [r7, #0]
   29b76:	68db      	ldr	r3, [r3, #12]
   29b78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   29b7a:	4313      	orrs	r3, r2
   29b7c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   29b7e:	683b      	ldr	r3, [r7, #0]
   29b80:	7c1b      	ldrb	r3, [r3, #16]
   29b82:	001a      	movs	r2, r3
   29b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   29b86:	4313      	orrs	r3, r2
   29b88:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   29b8a:	683b      	ldr	r3, [r7, #0]
   29b8c:	7c5b      	ldrb	r3, [r3, #17]
   29b8e:	2b00      	cmp	r3, #0
   29b90:	d103      	bne.n	29b9a <_spi_set_config+0x1d2>
   29b92:	4b20      	ldr	r3, [pc, #128]	; (29c14 <_spi_set_config+0x24c>)
   29b94:	4798      	blx	r3
   29b96:	1e03      	subs	r3, r0, #0
   29b98:	d003      	beq.n	29ba2 <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   29b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29b9c:	2280      	movs	r2, #128	; 0x80
   29b9e:	4313      	orrs	r3, r2
   29ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   29ba2:	683b      	ldr	r3, [r7, #0]
   29ba4:	7c9b      	ldrb	r3, [r3, #18]
   29ba6:	2b00      	cmp	r3, #0
   29ba8:	d004      	beq.n	29bb4 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   29baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   29bac:	2280      	movs	r2, #128	; 0x80
   29bae:	0292      	lsls	r2, r2, #10
   29bb0:	4313      	orrs	r3, r2
   29bb2:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   29bb4:	683b      	ldr	r3, [r7, #0]
   29bb6:	7cdb      	ldrb	r3, [r3, #19]
   29bb8:	2b00      	cmp	r3, #0
   29bba:	d004      	beq.n	29bc6 <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   29bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   29bbe:	2280      	movs	r2, #128	; 0x80
   29bc0:	0092      	lsls	r2, r2, #2
   29bc2:	4313      	orrs	r3, r2
   29bc4:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   29bc6:	683b      	ldr	r3, [r7, #0]
   29bc8:	7d1b      	ldrb	r3, [r3, #20]
   29bca:	2b00      	cmp	r3, #0
   29bcc:	d004      	beq.n	29bd8 <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   29bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   29bd0:	2280      	movs	r2, #128	; 0x80
   29bd2:	0192      	lsls	r2, r2, #6
   29bd4:	4313      	orrs	r3, r2
   29bd6:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   29bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29bda:	681a      	ldr	r2, [r3, #0]
   29bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29bde:	431a      	orrs	r2, r3
   29be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29be2:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   29be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29be6:	685a      	ldr	r2, [r3, #4]
   29be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   29bea:	431a      	orrs	r2, r3
   29bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29bee:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   29bf0:	2300      	movs	r3, #0
}
   29bf2:	0018      	movs	r0, r3
   29bf4:	46bd      	mov	sp, r7
   29bf6:	b013      	add	sp, #76	; 0x4c
   29bf8:	bd90      	pop	{r4, r7, pc}
   29bfa:	46c0      	nop			; (mov r8, r8)
   29bfc:	000294f5 	.word	0x000294f5
   29c00:	00029195 	.word	0x00029195
   29c04:	0002bf9d 	.word	0x0002bf9d
   29c08:	00029351 	.word	0x00029351
   29c0c:	0002bd61 	.word	0x0002bd61
   29c10:	00028ecb 	.word	0x00028ecb
   29c14:	000296e5 	.word	0x000296e5

00029c18 <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   29c18:	b590      	push	{r4, r7, lr}
   29c1a:	b091      	sub	sp, #68	; 0x44
   29c1c:	af00      	add	r7, sp, #0
   29c1e:	6078      	str	r0, [r7, #4]
   29c20:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29c22:	687b      	ldr	r3, [r7, #4]
   29c24:	681b      	ldr	r3, [r3, #0]
   29c26:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
   29c28:	687b      	ldr	r3, [r7, #4]
   29c2a:	681b      	ldr	r3, [r3, #0]
   29c2c:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
   29c2e:	683b      	ldr	r3, [r7, #0]
   29c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   29c32:	230c      	movs	r3, #12
   29c34:	18fb      	adds	r3, r7, r3
   29c36:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
   29c38:	683b      	ldr	r3, [r7, #0]
   29c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   29c3c:	230c      	movs	r3, #12
   29c3e:	18fb      	adds	r3, r7, r3
   29c40:	605a      	str	r2, [r3, #4]
		config->pinmux_pad2, config->pinmux_pad3
   29c42:	683b      	ldr	r3, [r7, #0]
   29c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   29c46:	230c      	movs	r3, #12
   29c48:	18fb      	adds	r3, r7, r3
   29c4a:	609a      	str	r2, [r3, #8]
		config->pinmux_pad2, config->pinmux_pad3
   29c4c:	683b      	ldr	r3, [r7, #0]
   29c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   29c50:	230c      	movs	r3, #12
   29c52:	18fb      	adds	r3, r7, r3
   29c54:	60da      	str	r2, [r3, #12]
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   29c56:	233f      	movs	r3, #63	; 0x3f
   29c58:	18fb      	adds	r3, r7, r3
   29c5a:	2200      	movs	r2, #0
   29c5c:	701a      	strb	r2, [r3, #0]
   29c5e:	e030      	b.n	29cc2 <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   29c60:	233f      	movs	r3, #63	; 0x3f
   29c62:	18fb      	adds	r3, r7, r3
   29c64:	781a      	ldrb	r2, [r3, #0]
   29c66:	230c      	movs	r3, #12
   29c68:	18fb      	adds	r3, r7, r3
   29c6a:	0092      	lsls	r2, r2, #2
   29c6c:	58d3      	ldr	r3, [r2, r3]
   29c6e:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
   29c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   29c72:	2b00      	cmp	r3, #0
   29c74:	d109      	bne.n	29c8a <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   29c76:	233f      	movs	r3, #63	; 0x3f
   29c78:	18fb      	adds	r3, r7, r3
   29c7a:	781a      	ldrb	r2, [r3, #0]
   29c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   29c7e:	0011      	movs	r1, r2
   29c80:	0018      	movs	r0, r3
   29c82:	4b6e      	ldr	r3, [pc, #440]	; (29e3c <_spi_check_config+0x224>)
   29c84:	4798      	blx	r3
   29c86:	0003      	movs	r3, r0
   29c88:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
   29c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   29c8c:	3301      	adds	r3, #1
   29c8e:	d010      	beq.n	29cb2 <_spi_check_config+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
   29c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   29c92:	041b      	lsls	r3, r3, #16
   29c94:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   29c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   29c98:	0c1b      	lsrs	r3, r3, #16
   29c9a:	b2db      	uxtb	r3, r3
   29c9c:	0018      	movs	r0, r3
   29c9e:	4b68      	ldr	r3, [pc, #416]	; (29e40 <_spi_check_config+0x228>)
   29ca0:	4798      	blx	r3
   29ca2:	0003      	movs	r3, r0
		if ((current_pinmux & 0xFFFF) !=
   29ca4:	429c      	cmp	r4, r3
   29ca6:	d005      	beq.n	29cb4 <_spi_check_config+0x9c>
			module->hw = NULL;
   29ca8:	687b      	ldr	r3, [r7, #4]
   29caa:	2200      	movs	r2, #0
   29cac:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
   29cae:	231c      	movs	r3, #28
   29cb0:	e0bf      	b.n	29e32 <_spi_check_config+0x21a>
			continue;
   29cb2:	46c0      	nop			; (mov r8, r8)
	for (uint8_t pad = 0; pad < 4; pad++) {
   29cb4:	233f      	movs	r3, #63	; 0x3f
   29cb6:	18fb      	adds	r3, r7, r3
   29cb8:	781a      	ldrb	r2, [r3, #0]
   29cba:	233f      	movs	r3, #63	; 0x3f
   29cbc:	18fb      	adds	r3, r7, r3
   29cbe:	3201      	adds	r2, #1
   29cc0:	701a      	strb	r2, [r3, #0]
   29cc2:	233f      	movs	r3, #63	; 0x3f
   29cc4:	18fb      	adds	r3, r7, r3
   29cc6:	781b      	ldrb	r3, [r3, #0]
   29cc8:	2b03      	cmp	r3, #3
   29cca:	d9c9      	bls.n	29c60 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
   29ccc:	2013      	movs	r0, #19
   29cce:	4b5d      	ldr	r3, [pc, #372]	; (29e44 <_spi_check_config+0x22c>)
   29cd0:	4798      	blx	r3
   29cd2:	0003      	movs	r3, r0
   29cd4:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
   29cd6:	2300      	movs	r3, #0
   29cd8:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
   29cda:	2300      	movs	r3, #0
   29cdc:	633b      	str	r3, [r7, #48]	; 0x30
#  if CONF_SPI_SLAVE_ENABLE == true
	uint32_t addr = 0;
   29cde:	2300      	movs	r3, #0
   29ce0:	623b      	str	r3, [r7, #32]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
   29ce2:	683b      	ldr	r3, [r7, #0]
   29ce4:	781b      	ldrb	r3, [r3, #0]
   29ce6:	2b01      	cmp	r3, #1
   29ce8:	d121      	bne.n	29d2e <_spi_check_config+0x116>
		enum status_code error_code = _sercom_get_sync_baud_val(
   29cea:	683b      	ldr	r3, [r7, #0]
   29cec:	699b      	ldr	r3, [r3, #24]
   29cee:	221f      	movs	r2, #31
   29cf0:	18bc      	adds	r4, r7, r2
   29cf2:	220a      	movs	r2, #10
   29cf4:	18ba      	adds	r2, r7, r2
   29cf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
   29cf8:	0018      	movs	r0, r3
   29cfa:	4b53      	ldr	r3, [pc, #332]	; (29e48 <_spi_check_config+0x230>)
   29cfc:	4798      	blx	r3
   29cfe:	0003      	movs	r3, r0
   29d00:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
   29d02:	231f      	movs	r3, #31
   29d04:	18fb      	adds	r3, r7, r3
   29d06:	781b      	ldrb	r3, [r3, #0]
   29d08:	2b00      	cmp	r3, #0
   29d0a:	d001      	beq.n	29d10 <_spi_check_config+0xf8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   29d0c:	2317      	movs	r3, #23
   29d0e:	e090      	b.n	29e32 <_spi_check_config+0x21a>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
   29d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29d12:	7b1b      	ldrb	r3, [r3, #12]
   29d14:	b2da      	uxtb	r2, r3
   29d16:	230a      	movs	r3, #10
   29d18:	18fb      	adds	r3, r7, r3
   29d1a:	881b      	ldrh	r3, [r3, #0]
   29d1c:	b2db      	uxtb	r3, r3
   29d1e:	429a      	cmp	r2, r3
   29d20:	d001      	beq.n	29d26 <_spi_check_config+0x10e>
			return STATUS_ERR_DENIED;
   29d22:	231c      	movs	r3, #28
   29d24:	e085      	b.n	29e32 <_spi_check_config+0x21a>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
   29d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29d28:	220c      	movs	r2, #12
   29d2a:	4313      	orrs	r3, r2
   29d2c:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
   29d2e:	683b      	ldr	r3, [r7, #0]
   29d30:	781b      	ldrb	r3, [r3, #0]
   29d32:	2b00      	cmp	r3, #0
   29d34:	d129      	bne.n	29d8a <_spi_check_config+0x172>

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
   29d36:	683b      	ldr	r3, [r7, #0]
   29d38:	699b      	ldr	r3, [r3, #24]
   29d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   29d3c:	4313      	orrs	r3, r2
   29d3e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
   29d40:	683b      	ldr	r3, [r7, #0]
   29d42:	8b9b      	ldrh	r3, [r3, #28]
   29d44:	001a      	movs	r2, r3
   29d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   29d48:	4313      	orrs	r3, r2
   29d4a:	633b      	str	r3, [r7, #48]	; 0x30

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   29d4c:	683b      	ldr	r3, [r7, #0]
   29d4e:	7f9b      	ldrb	r3, [r3, #30]
   29d50:	001a      	movs	r2, r3
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
   29d52:	683b      	ldr	r3, [r7, #0]
   29d54:	7fdb      	ldrb	r3, [r3, #31]
   29d56:	041b      	lsls	r3, r3, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   29d58:	4313      	orrs	r3, r2
   29d5a:	001a      	movs	r2, r3
   29d5c:	6a3b      	ldr	r3, [r7, #32]
   29d5e:	4313      	orrs	r3, r2
   29d60:	623b      	str	r3, [r7, #32]
		if (spi_module->CTRLA.reg != addr) {
   29d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29d64:	681a      	ldr	r2, [r3, #0]
   29d66:	6a3b      	ldr	r3, [r7, #32]
   29d68:	429a      	cmp	r2, r3
   29d6a:	d001      	beq.n	29d70 <_spi_check_config+0x158>
			return STATUS_ERR_DENIED;
   29d6c:	231c      	movs	r3, #28
   29d6e:	e060      	b.n	29e32 <_spi_check_config+0x21a>
		}

		if (config->mode_specific.slave.preload_enable) {
   29d70:	683b      	ldr	r3, [r7, #0]
   29d72:	2220      	movs	r2, #32
   29d74:	5c9b      	ldrb	r3, [r3, r2]
   29d76:	2b00      	cmp	r3, #0
   29d78:	d003      	beq.n	29d82 <_spi_check_config+0x16a>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
   29d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   29d7c:	2240      	movs	r2, #64	; 0x40
   29d7e:	4313      	orrs	r3, r2
   29d80:	633b      	str	r3, [r7, #48]	; 0x30
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
   29d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29d84:	2208      	movs	r2, #8
   29d86:	4313      	orrs	r3, r2
   29d88:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
   29d8a:	683b      	ldr	r3, [r7, #0]
   29d8c:	685b      	ldr	r3, [r3, #4]
   29d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   29d90:	4313      	orrs	r3, r2
   29d92:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   29d94:	683b      	ldr	r3, [r7, #0]
   29d96:	689b      	ldr	r3, [r3, #8]
   29d98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   29d9a:	4313      	orrs	r3, r2
   29d9c:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   29d9e:	683b      	ldr	r3, [r7, #0]
   29da0:	68db      	ldr	r3, [r3, #12]
   29da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   29da4:	4313      	orrs	r3, r2
   29da6:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
   29da8:	683b      	ldr	r3, [r7, #0]
   29daa:	7c1b      	ldrb	r3, [r3, #16]
   29dac:	001a      	movs	r2, r3
   29dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   29db0:	4313      	orrs	r3, r2
   29db2:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
   29db4:	683b      	ldr	r3, [r7, #0]
   29db6:	7c5b      	ldrb	r3, [r3, #17]
   29db8:	2b00      	cmp	r3, #0
   29dba:	d003      	beq.n	29dc4 <_spi_check_config+0x1ac>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   29dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29dbe:	2280      	movs	r2, #128	; 0x80
   29dc0:	4313      	orrs	r3, r2
   29dc2:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
   29dc4:	683b      	ldr	r3, [r7, #0]
   29dc6:	7c9b      	ldrb	r3, [r3, #18]
   29dc8:	2b00      	cmp	r3, #0
   29dca:	d004      	beq.n	29dd6 <_spi_check_config+0x1be>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   29dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   29dce:	2280      	movs	r2, #128	; 0x80
   29dd0:	0292      	lsls	r2, r2, #10
   29dd2:	4313      	orrs	r3, r2
   29dd4:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   29dd6:	683b      	ldr	r3, [r7, #0]
   29dd8:	7cdb      	ldrb	r3, [r3, #19]
   29dda:	2b00      	cmp	r3, #0
   29ddc:	d004      	beq.n	29de8 <_spi_check_config+0x1d0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   29dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   29de0:	2280      	movs	r2, #128	; 0x80
   29de2:	0092      	lsls	r2, r2, #2
   29de4:	4313      	orrs	r3, r2
   29de6:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   29de8:	683b      	ldr	r3, [r7, #0]
   29dea:	7d1b      	ldrb	r3, [r3, #20]
   29dec:	2b00      	cmp	r3, #0
   29dee:	d004      	beq.n	29dfa <_spi_check_config+0x1e2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   29df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   29df2:	2280      	movs	r2, #128	; 0x80
   29df4:	0192      	lsls	r2, r2, #6
   29df6:	4313      	orrs	r3, r2
   29df8:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
   29dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29dfc:	2202      	movs	r2, #2
   29dfe:	4313      	orrs	r3, r2
   29e00:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
   29e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29e04:	681a      	ldr	r2, [r3, #0]
   29e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29e08:	429a      	cmp	r2, r3
   29e0a:	d10e      	bne.n	29e2a <_spi_check_config+0x212>
			spi_module->CTRLB.reg == ctrlb) {
   29e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29e0e:	685a      	ldr	r2, [r3, #4]
	if (spi_module->CTRLA.reg == ctrla &&
   29e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   29e12:	429a      	cmp	r2, r3
   29e14:	d109      	bne.n	29e2a <_spi_check_config+0x212>
		module->mode           = config->mode;
   29e16:	683b      	ldr	r3, [r7, #0]
   29e18:	781a      	ldrb	r2, [r3, #0]
   29e1a:	687b      	ldr	r3, [r7, #4]
   29e1c:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
   29e1e:	683b      	ldr	r3, [r7, #0]
   29e20:	7c1a      	ldrb	r2, [r3, #16]
   29e22:	687b      	ldr	r3, [r7, #4]
   29e24:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
   29e26:	2300      	movs	r3, #0
   29e28:	e003      	b.n	29e32 <_spi_check_config+0x21a>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
   29e2a:	687b      	ldr	r3, [r7, #4]
   29e2c:	2200      	movs	r2, #0
   29e2e:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
   29e30:	231c      	movs	r3, #28
}
   29e32:	0018      	movs	r0, r3
   29e34:	46bd      	mov	sp, r7
   29e36:	b011      	add	sp, #68	; 0x44
   29e38:	bd90      	pop	{r4, r7, pc}
   29e3a:	46c0      	nop			; (mov r8, r8)
   29e3c:	00029195 	.word	0x00029195
   29e40:	0002957d 	.word	0x0002957d
   29e44:	0002bd61 	.word	0x0002bd61
   29e48:	00028ecb 	.word	0x00028ecb

00029e4c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   29e4c:	b580      	push	{r7, lr}
   29e4e:	b08a      	sub	sp, #40	; 0x28
   29e50:	af00      	add	r7, sp, #0
   29e52:	60f8      	str	r0, [r7, #12]
   29e54:	60b9      	str	r1, [r7, #8]
   29e56:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   29e58:	68fb      	ldr	r3, [r7, #12]
   29e5a:	68ba      	ldr	r2, [r7, #8]
   29e5c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   29e5e:	68fb      	ldr	r3, [r7, #12]
   29e60:	681b      	ldr	r3, [r3, #0]
   29e62:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   29e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29e66:	681b      	ldr	r3, [r3, #0]
   29e68:	2202      	movs	r2, #2
   29e6a:	4013      	ands	r3, r2
   29e6c:	d007      	beq.n	29e7e <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
   29e6e:	687a      	ldr	r2, [r7, #4]
   29e70:	68fb      	ldr	r3, [r7, #12]
   29e72:	0011      	movs	r1, r2
   29e74:	0018      	movs	r0, r3
   29e76:	4b2f      	ldr	r3, [pc, #188]	; (29f34 <spi_init+0xe8>)
   29e78:	4798      	blx	r3
   29e7a:	0003      	movs	r3, r0
   29e7c:	e055      	b.n	29f2a <spi_init+0xde>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   29e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29e80:	681b      	ldr	r3, [r3, #0]
   29e82:	2201      	movs	r2, #1
   29e84:	4013      	ands	r3, r2
   29e86:	d001      	beq.n	29e8c <spi_init+0x40>
		return STATUS_BUSY;
   29e88:	2305      	movs	r3, #5
   29e8a:	e04e      	b.n	29f2a <spi_init+0xde>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   29e8c:	68fb      	ldr	r3, [r7, #12]
   29e8e:	681b      	ldr	r3, [r3, #0]
   29e90:	0018      	movs	r0, r3
   29e92:	4b29      	ldr	r3, [pc, #164]	; (29f38 <spi_init+0xec>)
   29e94:	4798      	blx	r3
   29e96:	0003      	movs	r3, r0
   29e98:	623b      	str	r3, [r7, #32]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   29e9a:	6a3b      	ldr	r3, [r7, #32]
   29e9c:	3302      	adds	r3, #2
   29e9e:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   29ea0:	6a3b      	ldr	r3, [r7, #32]
   29ea2:	3314      	adds	r3, #20
   29ea4:	61bb      	str	r3, [r7, #24]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   29ea6:	2201      	movs	r2, #1
   29ea8:	69fb      	ldr	r3, [r7, #28]
   29eaa:	409a      	lsls	r2, r3
   29eac:	0013      	movs	r3, r2
   29eae:	0019      	movs	r1, r3
   29eb0:	2002      	movs	r0, #2
   29eb2:	4b22      	ldr	r3, [pc, #136]	; (29f3c <spi_init+0xf0>)
   29eb4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   29eb6:	2314      	movs	r3, #20
   29eb8:	18fb      	adds	r3, r7, r3
   29eba:	0018      	movs	r0, r3
   29ebc:	4b20      	ldr	r3, [pc, #128]	; (29f40 <spi_init+0xf4>)
   29ebe:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   29ec0:	687b      	ldr	r3, [r7, #4]
   29ec2:	2224      	movs	r2, #36	; 0x24
   29ec4:	5c9a      	ldrb	r2, [r3, r2]
   29ec6:	2314      	movs	r3, #20
   29ec8:	18fb      	adds	r3, r7, r3
   29eca:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   29ecc:	69bb      	ldr	r3, [r7, #24]
   29ece:	b2db      	uxtb	r3, r3
   29ed0:	2214      	movs	r2, #20
   29ed2:	18ba      	adds	r2, r7, r2
   29ed4:	0011      	movs	r1, r2
   29ed6:	0018      	movs	r0, r3
   29ed8:	4b1a      	ldr	r3, [pc, #104]	; (29f44 <spi_init+0xf8>)
   29eda:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   29edc:	69bb      	ldr	r3, [r7, #24]
   29ede:	b2db      	uxtb	r3, r3
   29ee0:	0018      	movs	r0, r3
   29ee2:	4b19      	ldr	r3, [pc, #100]	; (29f48 <spi_init+0xfc>)
   29ee4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   29ee6:	687b      	ldr	r3, [r7, #4]
   29ee8:	2224      	movs	r2, #36	; 0x24
   29eea:	5c9b      	ldrb	r3, [r3, r2]
   29eec:	2100      	movs	r1, #0
   29eee:	0018      	movs	r0, r3
   29ef0:	4b16      	ldr	r3, [pc, #88]	; (29f4c <spi_init+0x100>)
   29ef2:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   29ef4:	687b      	ldr	r3, [r7, #4]
   29ef6:	781b      	ldrb	r3, [r3, #0]
   29ef8:	2b01      	cmp	r3, #1
   29efa:	d105      	bne.n	29f08 <spi_init+0xbc>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   29efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29efe:	681b      	ldr	r3, [r3, #0]
   29f00:	220c      	movs	r2, #12
   29f02:	431a      	orrs	r2, r3
   29f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29f06:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
   29f08:	687b      	ldr	r3, [r7, #4]
   29f0a:	781b      	ldrb	r3, [r3, #0]
   29f0c:	2b00      	cmp	r3, #0
   29f0e:	d105      	bne.n	29f1c <spi_init+0xd0>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
   29f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29f12:	681b      	ldr	r3, [r3, #0]
   29f14:	2208      	movs	r2, #8
   29f16:	431a      	orrs	r2, r3
   29f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29f1a:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   29f1c:	687a      	ldr	r2, [r7, #4]
   29f1e:	68fb      	ldr	r3, [r7, #12]
   29f20:	0011      	movs	r1, r2
   29f22:	0018      	movs	r0, r3
   29f24:	4b0a      	ldr	r3, [pc, #40]	; (29f50 <spi_init+0x104>)
   29f26:	4798      	blx	r3
   29f28:	0003      	movs	r3, r0
}
   29f2a:	0018      	movs	r0, r3
   29f2c:	46bd      	mov	sp, r7
   29f2e:	b00a      	add	sp, #40	; 0x28
   29f30:	bd80      	pop	{r7, pc}
   29f32:	46c0      	nop			; (mov r8, r8)
   29f34:	00029c19 	.word	0x00029c19
   29f38:	00029351 	.word	0x00029351
   29f3c:	00029689 	.word	0x00029689
   29f40:	00029671 	.word	0x00029671
   29f44:	0002bc3d 	.word	0x0002bc3d
   29f48:	0002bc81 	.word	0x0002bc81
   29f4c:	00029109 	.word	0x00029109
   29f50:	000299c9 	.word	0x000299c9

00029f54 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   29f54:	b590      	push	{r4, r7, lr}
   29f56:	b089      	sub	sp, #36	; 0x24
   29f58:	af00      	add	r7, sp, #0
   29f5a:	60f8      	str	r0, [r7, #12]
   29f5c:	60b9      	str	r1, [r7, #8]
   29f5e:	0019      	movs	r1, r3
   29f60:	1dbb      	adds	r3, r7, #6
   29f62:	801a      	strh	r2, [r3, #0]
   29f64:	1d3b      	adds	r3, r7, #4
   29f66:	1c0a      	adds	r2, r1, #0
   29f68:	801a      	strh	r2, [r3, #0]
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   29f6a:	1dbb      	adds	r3, r7, #6
   29f6c:	881b      	ldrh	r3, [r3, #0]
   29f6e:	2b00      	cmp	r3, #0
   29f70:	d101      	bne.n	29f76 <spi_read_buffer_wait+0x22>
		return STATUS_ERR_INVALID_ARG;
   29f72:	2317      	movs	r3, #23
   29f74:	e0b2      	b.n	2a0dc <spi_read_buffer_wait+0x188>
	}

	if (!(module->receiver_enabled)) {
   29f76:	68fb      	ldr	r3, [r7, #12]
   29f78:	79db      	ldrb	r3, [r3, #7]
   29f7a:	2201      	movs	r2, #1
   29f7c:	4053      	eors	r3, r2
   29f7e:	b2db      	uxtb	r3, r3
   29f80:	2b00      	cmp	r3, #0
   29f82:	d001      	beq.n	29f88 <spi_read_buffer_wait+0x34>
		return STATUS_ERR_DENIED;
   29f84:	231c      	movs	r3, #28
   29f86:	e0a9      	b.n	2a0dc <spi_read_buffer_wait+0x188>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
   29f88:	68fb      	ldr	r3, [r7, #12]
   29f8a:	795b      	ldrb	r3, [r3, #5]
   29f8c:	2b00      	cmp	r3, #0
   29f8e:	d109      	bne.n	29fa4 <spi_read_buffer_wait+0x50>
   29f90:	68fb      	ldr	r3, [r7, #12]
   29f92:	0018      	movs	r0, r3
   29f94:	4b53      	ldr	r3, [pc, #332]	; (2a0e4 <spi_read_buffer_wait+0x190>)
   29f96:	4798      	blx	r3
   29f98:	1e03      	subs	r3, r0, #0
   29f9a:	d003      	beq.n	29fa4 <spi_read_buffer_wait+0x50>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
   29f9c:	68fb      	ldr	r3, [r7, #12]
   29f9e:	0018      	movs	r0, r3
   29fa0:	4b51      	ldr	r3, [pc, #324]	; (2a0e8 <spi_read_buffer_wait+0x194>)
   29fa2:	4798      	blx	r3
	}
#  endif
	uint16_t rx_pos = 0;
   29fa4:	231e      	movs	r3, #30
   29fa6:	18fb      	adds	r3, r7, r3
   29fa8:	2200      	movs	r2, #0
   29faa:	801a      	strh	r2, [r3, #0]

	while (length--) {
   29fac:	e08d      	b.n	2a0ca <spi_read_buffer_wait+0x176>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   29fae:	68fb      	ldr	r3, [r7, #12]
   29fb0:	795b      	ldrb	r3, [r3, #5]
   29fb2:	2b01      	cmp	r3, #1
   29fb4:	d112      	bne.n	29fdc <spi_read_buffer_wait+0x88>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   29fb6:	46c0      	nop			; (mov r8, r8)
   29fb8:	68fb      	ldr	r3, [r7, #12]
   29fba:	0018      	movs	r0, r3
   29fbc:	4b4b      	ldr	r3, [pc, #300]	; (2a0ec <spi_read_buffer_wait+0x198>)
   29fbe:	4798      	blx	r3
   29fc0:	0003      	movs	r3, r0
   29fc2:	001a      	movs	r2, r3
   29fc4:	2301      	movs	r3, #1
   29fc6:	4053      	eors	r3, r2
   29fc8:	b2db      	uxtb	r3, r3
   29fca:	2b00      	cmp	r3, #0
   29fcc:	d1f4      	bne.n	29fb8 <spi_read_buffer_wait+0x64>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   29fce:	1d3b      	adds	r3, r7, #4
   29fd0:	881a      	ldrh	r2, [r3, #0]
   29fd2:	68fb      	ldr	r3, [r7, #12]
   29fd4:	0011      	movs	r1, r2
   29fd6:	0018      	movs	r0, r3
   29fd8:	4b45      	ldr	r3, [pc, #276]	; (2a0f0 <spi_read_buffer_wait+0x19c>)
   29fda:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
   29fdc:	68fb      	ldr	r3, [r7, #12]
   29fde:	795b      	ldrb	r3, [r3, #5]
   29fe0:	2b00      	cmp	r3, #0
   29fe2:	d12a      	bne.n	2a03a <spi_read_buffer_wait+0xe6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   29fe4:	2300      	movs	r3, #0
   29fe6:	61bb      	str	r3, [r7, #24]
   29fe8:	e008      	b.n	29ffc <spi_read_buffer_wait+0xa8>
				if (spi_is_ready_to_read(module)) {
   29fea:	68fb      	ldr	r3, [r7, #12]
   29fec:	0018      	movs	r0, r3
   29fee:	4b41      	ldr	r3, [pc, #260]	; (2a0f4 <spi_read_buffer_wait+0x1a0>)
   29ff0:	4798      	blx	r3
   29ff2:	1e03      	subs	r3, r0, #0
   29ff4:	d107      	bne.n	2a006 <spi_read_buffer_wait+0xb2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   29ff6:	69bb      	ldr	r3, [r7, #24]
   29ff8:	3301      	adds	r3, #1
   29ffa:	61bb      	str	r3, [r7, #24]
   29ffc:	69bb      	ldr	r3, [r7, #24]
   29ffe:	4a3e      	ldr	r2, [pc, #248]	; (2a0f8 <spi_read_buffer_wait+0x1a4>)
   2a000:	4293      	cmp	r3, r2
   2a002:	d9f2      	bls.n	29fea <spi_read_buffer_wait+0x96>
   2a004:	e000      	b.n	2a008 <spi_read_buffer_wait+0xb4>
					break;
   2a006:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
   2a008:	68fb      	ldr	r3, [r7, #12]
   2a00a:	0018      	movs	r0, r3
   2a00c:	4b35      	ldr	r3, [pc, #212]	; (2a0e4 <spi_read_buffer_wait+0x190>)
   2a00e:	4798      	blx	r3
   2a010:	1e03      	subs	r3, r0, #0
   2a012:	d005      	beq.n	2a020 <spi_read_buffer_wait+0xcc>
				_spi_clear_tx_complete_flag(module);
   2a014:	68fb      	ldr	r3, [r7, #12]
   2a016:	0018      	movs	r0, r3
   2a018:	4b33      	ldr	r3, [pc, #204]	; (2a0e8 <spi_read_buffer_wait+0x194>)
   2a01a:	4798      	blx	r3
				return STATUS_ABORTED;
   2a01c:	2304      	movs	r3, #4
   2a01e:	e05d      	b.n	2a0dc <spi_read_buffer_wait+0x188>
			}

			if (!spi_is_ready_to_read(module)) {
   2a020:	68fb      	ldr	r3, [r7, #12]
   2a022:	0018      	movs	r0, r3
   2a024:	4b33      	ldr	r3, [pc, #204]	; (2a0f4 <spi_read_buffer_wait+0x1a0>)
   2a026:	4798      	blx	r3
   2a028:	0003      	movs	r3, r0
   2a02a:	001a      	movs	r2, r3
   2a02c:	2301      	movs	r3, #1
   2a02e:	4053      	eors	r3, r2
   2a030:	b2db      	uxtb	r3, r3
   2a032:	2b00      	cmp	r3, #0
   2a034:	d001      	beq.n	2a03a <spi_read_buffer_wait+0xe6>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
   2a036:	2312      	movs	r3, #18
   2a038:	e050      	b.n	2a0dc <spi_read_buffer_wait+0x188>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   2a03a:	46c0      	nop			; (mov r8, r8)
   2a03c:	68fb      	ldr	r3, [r7, #12]
   2a03e:	0018      	movs	r0, r3
   2a040:	4b2c      	ldr	r3, [pc, #176]	; (2a0f4 <spi_read_buffer_wait+0x1a0>)
   2a042:	4798      	blx	r3
   2a044:	0003      	movs	r3, r0
   2a046:	001a      	movs	r2, r3
   2a048:	2301      	movs	r3, #1
   2a04a:	4053      	eors	r3, r2
   2a04c:	b2db      	uxtb	r3, r3
   2a04e:	2b00      	cmp	r3, #0
   2a050:	d1f4      	bne.n	2a03c <spi_read_buffer_wait+0xe8>
		}

		uint16_t received_data = 0;
   2a052:	2314      	movs	r3, #20
   2a054:	18fb      	adds	r3, r7, r3
   2a056:	2200      	movs	r2, #0
   2a058:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   2a05a:	2317      	movs	r3, #23
   2a05c:	18fc      	adds	r4, r7, r3
   2a05e:	2314      	movs	r3, #20
   2a060:	18fa      	adds	r2, r7, r3
   2a062:	68fb      	ldr	r3, [r7, #12]
   2a064:	0011      	movs	r1, r2
   2a066:	0018      	movs	r0, r3
   2a068:	4b24      	ldr	r3, [pc, #144]	; (2a0fc <spi_read_buffer_wait+0x1a8>)
   2a06a:	4798      	blx	r3
   2a06c:	0003      	movs	r3, r0
   2a06e:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   2a070:	2317      	movs	r3, #23
   2a072:	18fb      	adds	r3, r7, r3
   2a074:	781b      	ldrb	r3, [r3, #0]
   2a076:	2b00      	cmp	r3, #0
   2a078:	d003      	beq.n	2a082 <spi_read_buffer_wait+0x12e>
			/* Overflow, abort */
			return retval;
   2a07a:	2317      	movs	r3, #23
   2a07c:	18fb      	adds	r3, r7, r3
   2a07e:	781b      	ldrb	r3, [r3, #0]
   2a080:	e02c      	b.n	2a0dc <spi_read_buffer_wait+0x188>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   2a082:	231e      	movs	r3, #30
   2a084:	18fb      	adds	r3, r7, r3
   2a086:	881b      	ldrh	r3, [r3, #0]
   2a088:	221e      	movs	r2, #30
   2a08a:	18ba      	adds	r2, r7, r2
   2a08c:	1c59      	adds	r1, r3, #1
   2a08e:	8011      	strh	r1, [r2, #0]
   2a090:	001a      	movs	r2, r3
   2a092:	68bb      	ldr	r3, [r7, #8]
   2a094:	189b      	adds	r3, r3, r2
   2a096:	2214      	movs	r2, #20
   2a098:	18ba      	adds	r2, r7, r2
   2a09a:	8812      	ldrh	r2, [r2, #0]
   2a09c:	b2d2      	uxtb	r2, r2
   2a09e:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2a0a0:	68fb      	ldr	r3, [r7, #12]
   2a0a2:	799b      	ldrb	r3, [r3, #6]
   2a0a4:	2b01      	cmp	r3, #1
   2a0a6:	d110      	bne.n	2a0ca <spi_read_buffer_wait+0x176>
			rx_data[rx_pos++] = (received_data >> 8);
   2a0a8:	231e      	movs	r3, #30
   2a0aa:	18fb      	adds	r3, r7, r3
   2a0ac:	881b      	ldrh	r3, [r3, #0]
   2a0ae:	221e      	movs	r2, #30
   2a0b0:	18ba      	adds	r2, r7, r2
   2a0b2:	1c59      	adds	r1, r3, #1
   2a0b4:	8011      	strh	r1, [r2, #0]
   2a0b6:	001a      	movs	r2, r3
   2a0b8:	68bb      	ldr	r3, [r7, #8]
   2a0ba:	189b      	adds	r3, r3, r2
   2a0bc:	2214      	movs	r2, #20
   2a0be:	18ba      	adds	r2, r7, r2
   2a0c0:	8812      	ldrh	r2, [r2, #0]
   2a0c2:	0a12      	lsrs	r2, r2, #8
   2a0c4:	b292      	uxth	r2, r2
   2a0c6:	b2d2      	uxtb	r2, r2
   2a0c8:	701a      	strb	r2, [r3, #0]
	while (length--) {
   2a0ca:	1dbb      	adds	r3, r7, #6
   2a0cc:	881b      	ldrh	r3, [r3, #0]
   2a0ce:	1dba      	adds	r2, r7, #6
   2a0d0:	1e59      	subs	r1, r3, #1
   2a0d2:	8011      	strh	r1, [r2, #0]
   2a0d4:	2b00      	cmp	r3, #0
   2a0d6:	d000      	beq.n	2a0da <spi_read_buffer_wait+0x186>
   2a0d8:	e769      	b.n	29fae <spi_read_buffer_wait+0x5a>
		}
	}

	return STATUS_OK;
   2a0da:	2300      	movs	r3, #0
}
   2a0dc:	0018      	movs	r0, r3
   2a0de:	46bd      	mov	sp, r7
   2a0e0:	b009      	add	sp, #36	; 0x24
   2a0e2:	bd90      	pop	{r4, r7, pc}
   2a0e4:	0002979d 	.word	0x0002979d
   2a0e8:	000299ad 	.word	0x000299ad
   2a0ec:	000297c5 	.word	0x000297c5
   2a0f0:	00029815 	.word	0x00029815
   2a0f4:	000297ed 	.word	0x000297ed
   2a0f8:	00002710 	.word	0x00002710
   2a0fc:	0002985d 	.word	0x0002985d

0002a100 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   2a100:	b580      	push	{r7, lr}
   2a102:	b086      	sub	sp, #24
   2a104:	af00      	add	r7, sp, #0
   2a106:	60f8      	str	r0, [r7, #12]
   2a108:	60b9      	str	r1, [r7, #8]
   2a10a:	1dfb      	adds	r3, r7, #7
   2a10c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   2a10e:	68fb      	ldr	r3, [r7, #12]
   2a110:	795b      	ldrb	r3, [r3, #5]
   2a112:	2b01      	cmp	r3, #1
   2a114:	d001      	beq.n	2a11a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   2a116:	2315      	movs	r3, #21
   2a118:	e05c      	b.n	2a1d4 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   2a11a:	68fb      	ldr	r3, [r7, #12]
   2a11c:	7a1b      	ldrb	r3, [r3, #8]
   2a11e:	2201      	movs	r2, #1
   2a120:	4053      	eors	r3, r2
   2a122:	b2db      	uxtb	r3, r3
   2a124:	2b00      	cmp	r3, #0
   2a126:	d054      	beq.n	2a1d2 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   2a128:	1dfb      	adds	r3, r7, #7
   2a12a:	781b      	ldrb	r3, [r3, #0]
   2a12c:	2b00      	cmp	r3, #0
   2a12e:	d04a      	beq.n	2a1c6 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   2a130:	68bb      	ldr	r3, [r7, #8]
   2a132:	785b      	ldrb	r3, [r3, #1]
   2a134:	2b00      	cmp	r3, #0
   2a136:	d03f      	beq.n	2a1b8 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   2a138:	68fb      	ldr	r3, [r7, #12]
   2a13a:	0018      	movs	r0, r3
   2a13c:	4b27      	ldr	r3, [pc, #156]	; (2a1dc <spi_select_slave+0xdc>)
   2a13e:	4798      	blx	r3
   2a140:	0003      	movs	r3, r0
   2a142:	001a      	movs	r2, r3
   2a144:	2301      	movs	r3, #1
   2a146:	4053      	eors	r3, r2
   2a148:	b2db      	uxtb	r3, r3
   2a14a:	2b00      	cmp	r3, #0
   2a14c:	d007      	beq.n	2a15e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   2a14e:	68bb      	ldr	r3, [r7, #8]
   2a150:	781b      	ldrb	r3, [r3, #0]
   2a152:	2101      	movs	r1, #1
   2a154:	0018      	movs	r0, r3
   2a156:	4b22      	ldr	r3, [pc, #136]	; (2a1e0 <spi_select_slave+0xe0>)
   2a158:	4798      	blx	r3
					return STATUS_BUSY;
   2a15a:	2305      	movs	r3, #5
   2a15c:	e03a      	b.n	2a1d4 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   2a15e:	68bb      	ldr	r3, [r7, #8]
   2a160:	781b      	ldrb	r3, [r3, #0]
   2a162:	2100      	movs	r1, #0
   2a164:	0018      	movs	r0, r3
   2a166:	4b1e      	ldr	r3, [pc, #120]	; (2a1e0 <spi_select_slave+0xe0>)
   2a168:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   2a16a:	68bb      	ldr	r3, [r7, #8]
   2a16c:	789b      	ldrb	r3, [r3, #2]
   2a16e:	b29a      	uxth	r2, r3
   2a170:	68fb      	ldr	r3, [r7, #12]
   2a172:	0011      	movs	r1, r2
   2a174:	0018      	movs	r0, r3
   2a176:	4b1b      	ldr	r3, [pc, #108]	; (2a1e4 <spi_select_slave+0xe4>)
   2a178:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   2a17a:	68fb      	ldr	r3, [r7, #12]
   2a17c:	79db      	ldrb	r3, [r3, #7]
   2a17e:	2201      	movs	r2, #1
   2a180:	4053      	eors	r3, r2
   2a182:	b2db      	uxtb	r3, r3
   2a184:	2b00      	cmp	r3, #0
   2a186:	d024      	beq.n	2a1d2 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   2a188:	46c0      	nop			; (mov r8, r8)
   2a18a:	68fb      	ldr	r3, [r7, #12]
   2a18c:	0018      	movs	r0, r3
   2a18e:	4b16      	ldr	r3, [pc, #88]	; (2a1e8 <spi_select_slave+0xe8>)
   2a190:	4798      	blx	r3
   2a192:	0003      	movs	r3, r0
   2a194:	001a      	movs	r2, r3
   2a196:	2301      	movs	r3, #1
   2a198:	4053      	eors	r3, r2
   2a19a:	b2db      	uxtb	r3, r3
   2a19c:	2b00      	cmp	r3, #0
   2a19e:	d1f4      	bne.n	2a18a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   2a1a0:	2316      	movs	r3, #22
   2a1a2:	18fb      	adds	r3, r7, r3
   2a1a4:	2200      	movs	r2, #0
   2a1a6:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   2a1a8:	2316      	movs	r3, #22
   2a1aa:	18fa      	adds	r2, r7, r3
   2a1ac:	68fb      	ldr	r3, [r7, #12]
   2a1ae:	0011      	movs	r1, r2
   2a1b0:	0018      	movs	r0, r3
   2a1b2:	4b0e      	ldr	r3, [pc, #56]	; (2a1ec <spi_select_slave+0xec>)
   2a1b4:	4798      	blx	r3
   2a1b6:	e00c      	b.n	2a1d2 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   2a1b8:	68bb      	ldr	r3, [r7, #8]
   2a1ba:	781b      	ldrb	r3, [r3, #0]
   2a1bc:	2100      	movs	r1, #0
   2a1be:	0018      	movs	r0, r3
   2a1c0:	4b07      	ldr	r3, [pc, #28]	; (2a1e0 <spi_select_slave+0xe0>)
   2a1c2:	4798      	blx	r3
   2a1c4:	e005      	b.n	2a1d2 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   2a1c6:	68bb      	ldr	r3, [r7, #8]
   2a1c8:	781b      	ldrb	r3, [r3, #0]
   2a1ca:	2101      	movs	r1, #1
   2a1cc:	0018      	movs	r0, r3
   2a1ce:	4b04      	ldr	r3, [pc, #16]	; (2a1e0 <spi_select_slave+0xe0>)
   2a1d0:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   2a1d2:	2300      	movs	r3, #0
}
   2a1d4:	0018      	movs	r0, r3
   2a1d6:	46bd      	mov	sp, r7
   2a1d8:	b006      	add	sp, #24
   2a1da:	bd80      	pop	{r7, pc}
   2a1dc:	000297c5 	.word	0x000297c5
   2a1e0:	0002961d 	.word	0x0002961d
   2a1e4:	00029815 	.word	0x00029815
   2a1e8:	000297ed 	.word	0x000297ed
   2a1ec:	0002985d 	.word	0x0002985d

0002a1f0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   2a1f0:	b580      	push	{r7, lr}
   2a1f2:	b08a      	sub	sp, #40	; 0x28
   2a1f4:	af00      	add	r7, sp, #0
   2a1f6:	60f8      	str	r0, [r7, #12]
   2a1f8:	60b9      	str	r1, [r7, #8]
   2a1fa:	1dbb      	adds	r3, r7, #6
   2a1fc:	801a      	strh	r2, [r3, #0]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
   2a1fe:	1dbb      	adds	r3, r7, #6
   2a200:	881b      	ldrh	r3, [r3, #0]
   2a202:	2b00      	cmp	r3, #0
   2a204:	d101      	bne.n	2a20a <spi_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
   2a206:	2317      	movs	r3, #23
   2a208:	e16a      	b.n	2a4e0 <spi_write_buffer_wait+0x2f0>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
   2a20a:	68fb      	ldr	r3, [r7, #12]
   2a20c:	795b      	ldrb	r3, [r3, #5]
   2a20e:	2b00      	cmp	r3, #0
   2a210:	d109      	bne.n	2a226 <spi_write_buffer_wait+0x36>
   2a212:	68fb      	ldr	r3, [r7, #12]
   2a214:	0018      	movs	r0, r3
   2a216:	4bb4      	ldr	r3, [pc, #720]	; (2a4e8 <spi_write_buffer_wait+0x2f8>)
   2a218:	4798      	blx	r3
   2a21a:	1e03      	subs	r3, r0, #0
   2a21c:	d003      	beq.n	2a226 <spi_write_buffer_wait+0x36>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
   2a21e:	68fb      	ldr	r3, [r7, #12]
   2a220:	0018      	movs	r0, r3
   2a222:	4bb2      	ldr	r3, [pc, #712]	; (2a4ec <spi_write_buffer_wait+0x2fc>)
   2a224:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
   2a226:	2326      	movs	r3, #38	; 0x26
   2a228:	18fb      	adds	r3, r7, r3
   2a22a:	2200      	movs	r2, #0
   2a22c:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   2a22e:	2324      	movs	r3, #36	; 0x24
   2a230:	18fb      	adds	r3, r7, r3
   2a232:	1dba      	adds	r2, r7, #6
   2a234:	8812      	ldrh	r2, [r2, #0]
   2a236:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   2a238:	e0fe      	b.n	2a438 <spi_write_buffer_wait+0x248>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
   2a23a:	68fb      	ldr	r3, [r7, #12]
   2a23c:	795b      	ldrb	r3, [r3, #5]
   2a23e:	2b00      	cmp	r3, #0
   2a240:	d12a      	bne.n	2a298 <spi_write_buffer_wait+0xa8>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2a242:	2300      	movs	r3, #0
   2a244:	623b      	str	r3, [r7, #32]
   2a246:	e008      	b.n	2a25a <spi_write_buffer_wait+0x6a>
				if (spi_is_ready_to_write(module)) {
   2a248:	68fb      	ldr	r3, [r7, #12]
   2a24a:	0018      	movs	r0, r3
   2a24c:	4ba8      	ldr	r3, [pc, #672]	; (2a4f0 <spi_write_buffer_wait+0x300>)
   2a24e:	4798      	blx	r3
   2a250:	1e03      	subs	r3, r0, #0
   2a252:	d107      	bne.n	2a264 <spi_write_buffer_wait+0x74>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2a254:	6a3b      	ldr	r3, [r7, #32]
   2a256:	3301      	adds	r3, #1
   2a258:	623b      	str	r3, [r7, #32]
   2a25a:	6a3b      	ldr	r3, [r7, #32]
   2a25c:	4aa5      	ldr	r2, [pc, #660]	; (2a4f4 <spi_write_buffer_wait+0x304>)
   2a25e:	4293      	cmp	r3, r2
   2a260:	d9f2      	bls.n	2a248 <spi_write_buffer_wait+0x58>
   2a262:	e000      	b.n	2a266 <spi_write_buffer_wait+0x76>
					break;
   2a264:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
   2a266:	68fb      	ldr	r3, [r7, #12]
   2a268:	0018      	movs	r0, r3
   2a26a:	4b9f      	ldr	r3, [pc, #636]	; (2a4e8 <spi_write_buffer_wait+0x2f8>)
   2a26c:	4798      	blx	r3
   2a26e:	1e03      	subs	r3, r0, #0
   2a270:	d005      	beq.n	2a27e <spi_write_buffer_wait+0x8e>
				_spi_clear_tx_complete_flag(module);
   2a272:	68fb      	ldr	r3, [r7, #12]
   2a274:	0018      	movs	r0, r3
   2a276:	4b9d      	ldr	r3, [pc, #628]	; (2a4ec <spi_write_buffer_wait+0x2fc>)
   2a278:	4798      	blx	r3
				return STATUS_ABORTED;
   2a27a:	2304      	movs	r3, #4
   2a27c:	e130      	b.n	2a4e0 <spi_write_buffer_wait+0x2f0>
			}

			if (!spi_is_ready_to_write(module)) {
   2a27e:	68fb      	ldr	r3, [r7, #12]
   2a280:	0018      	movs	r0, r3
   2a282:	4b9b      	ldr	r3, [pc, #620]	; (2a4f0 <spi_write_buffer_wait+0x300>)
   2a284:	4798      	blx	r3
   2a286:	0003      	movs	r3, r0
   2a288:	001a      	movs	r2, r3
   2a28a:	2301      	movs	r3, #1
   2a28c:	4053      	eors	r3, r2
   2a28e:	b2db      	uxtb	r3, r3
   2a290:	2b00      	cmp	r3, #0
   2a292:	d001      	beq.n	2a298 <spi_write_buffer_wait+0xa8>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
   2a294:	2312      	movs	r3, #18
   2a296:	e123      	b.n	2a4e0 <spi_write_buffer_wait+0x2f0>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   2a298:	46c0      	nop			; (mov r8, r8)
   2a29a:	68fb      	ldr	r3, [r7, #12]
   2a29c:	0018      	movs	r0, r3
   2a29e:	4b94      	ldr	r3, [pc, #592]	; (2a4f0 <spi_write_buffer_wait+0x300>)
   2a2a0:	4798      	blx	r3
   2a2a2:	0003      	movs	r3, r0
   2a2a4:	001a      	movs	r2, r3
   2a2a6:	2301      	movs	r3, #1
   2a2a8:	4053      	eors	r3, r2
   2a2aa:	b2db      	uxtb	r3, r3
   2a2ac:	2b00      	cmp	r3, #0
   2a2ae:	d1f4      	bne.n	2a29a <spi_write_buffer_wait+0xaa>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   2a2b0:	2326      	movs	r3, #38	; 0x26
   2a2b2:	18fb      	adds	r3, r7, r3
   2a2b4:	881b      	ldrh	r3, [r3, #0]
   2a2b6:	2226      	movs	r2, #38	; 0x26
   2a2b8:	18ba      	adds	r2, r7, r2
   2a2ba:	1c59      	adds	r1, r3, #1
   2a2bc:	8011      	strh	r1, [r2, #0]
   2a2be:	001a      	movs	r2, r3
   2a2c0:	68bb      	ldr	r3, [r7, #8]
   2a2c2:	189b      	adds	r3, r3, r2
   2a2c4:	781a      	ldrb	r2, [r3, #0]
   2a2c6:	231e      	movs	r3, #30
   2a2c8:	18fb      	adds	r3, r7, r3
   2a2ca:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2a2cc:	68fb      	ldr	r3, [r7, #12]
   2a2ce:	799b      	ldrb	r3, [r3, #6]
   2a2d0:	2b01      	cmp	r3, #1
   2a2d2:	d115      	bne.n	2a300 <spi_write_buffer_wait+0x110>
			data_to_send |= (tx_data[tx_pos++] << 8);
   2a2d4:	2326      	movs	r3, #38	; 0x26
   2a2d6:	18fb      	adds	r3, r7, r3
   2a2d8:	881b      	ldrh	r3, [r3, #0]
   2a2da:	2226      	movs	r2, #38	; 0x26
   2a2dc:	18ba      	adds	r2, r7, r2
   2a2de:	1c59      	adds	r1, r3, #1
   2a2e0:	8011      	strh	r1, [r2, #0]
   2a2e2:	001a      	movs	r2, r3
   2a2e4:	68bb      	ldr	r3, [r7, #8]
   2a2e6:	189b      	adds	r3, r3, r2
   2a2e8:	781b      	ldrb	r3, [r3, #0]
   2a2ea:	021b      	lsls	r3, r3, #8
   2a2ec:	b21a      	sxth	r2, r3
   2a2ee:	231e      	movs	r3, #30
   2a2f0:	18fb      	adds	r3, r7, r3
   2a2f2:	2100      	movs	r1, #0
   2a2f4:	5e5b      	ldrsh	r3, [r3, r1]
   2a2f6:	4313      	orrs	r3, r2
   2a2f8:	b21a      	sxth	r2, r3
   2a2fa:	231e      	movs	r3, #30
   2a2fc:	18fb      	adds	r3, r7, r3
   2a2fe:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   2a300:	231e      	movs	r3, #30
   2a302:	18fb      	adds	r3, r7, r3
   2a304:	881a      	ldrh	r2, [r3, #0]
   2a306:	68fb      	ldr	r3, [r7, #12]
   2a308:	0011      	movs	r1, r2
   2a30a:	0018      	movs	r0, r3
   2a30c:	4b7a      	ldr	r3, [pc, #488]	; (2a4f8 <spi_write_buffer_wait+0x308>)
   2a30e:	4798      	blx	r3

		if (module->receiver_enabled) {
   2a310:	68fb      	ldr	r3, [r7, #12]
   2a312:	79db      	ldrb	r3, [r3, #7]
   2a314:	2224      	movs	r2, #36	; 0x24
   2a316:	18ba      	adds	r2, r7, r2
   2a318:	2124      	movs	r1, #36	; 0x24
   2a31a:	1879      	adds	r1, r7, r1
   2a31c:	8809      	ldrh	r1, [r1, #0]
   2a31e:	8011      	strh	r1, [r2, #0]
   2a320:	2b00      	cmp	r3, #0
   2a322:	d100      	bne.n	2a326 <spi_write_buffer_wait+0x136>
   2a324:	e088      	b.n	2a438 <spi_write_buffer_wait+0x248>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
   2a326:	68fb      	ldr	r3, [r7, #12]
   2a328:	795b      	ldrb	r3, [r3, #5]
   2a32a:	2b00      	cmp	r3, #0
   2a32c:	d000      	beq.n	2a330 <spi_write_buffer_wait+0x140>
   2a32e:	e069      	b.n	2a404 <spi_write_buffer_wait+0x214>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2a330:	2300      	movs	r3, #0
   2a332:	61bb      	str	r3, [r7, #24]
   2a334:	e047      	b.n	2a3c6 <spi_write_buffer_wait+0x1d6>
					if (length && spi_is_ready_to_write(module)) {
   2a336:	1dbb      	adds	r3, r7, #6
   2a338:	881b      	ldrh	r3, [r3, #0]
   2a33a:	2b00      	cmp	r3, #0
   2a33c:	d03a      	beq.n	2a3b4 <spi_write_buffer_wait+0x1c4>
   2a33e:	68fb      	ldr	r3, [r7, #12]
   2a340:	0018      	movs	r0, r3
   2a342:	4b6b      	ldr	r3, [pc, #428]	; (2a4f0 <spi_write_buffer_wait+0x300>)
   2a344:	4798      	blx	r3
   2a346:	1e03      	subs	r3, r0, #0
   2a348:	d034      	beq.n	2a3b4 <spi_write_buffer_wait+0x1c4>
						data_to_send = tx_data[tx_pos++];
   2a34a:	2326      	movs	r3, #38	; 0x26
   2a34c:	18fb      	adds	r3, r7, r3
   2a34e:	881b      	ldrh	r3, [r3, #0]
   2a350:	2226      	movs	r2, #38	; 0x26
   2a352:	18ba      	adds	r2, r7, r2
   2a354:	1c59      	adds	r1, r3, #1
   2a356:	8011      	strh	r1, [r2, #0]
   2a358:	001a      	movs	r2, r3
   2a35a:	68bb      	ldr	r3, [r7, #8]
   2a35c:	189b      	adds	r3, r3, r2
   2a35e:	781a      	ldrb	r2, [r3, #0]
   2a360:	231e      	movs	r3, #30
   2a362:	18fb      	adds	r3, r7, r3
   2a364:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2a366:	68fb      	ldr	r3, [r7, #12]
   2a368:	799b      	ldrb	r3, [r3, #6]
   2a36a:	2b01      	cmp	r3, #1
   2a36c:	d115      	bne.n	2a39a <spi_write_buffer_wait+0x1aa>
							data_to_send |= (tx_data[tx_pos++] << 8);
   2a36e:	2326      	movs	r3, #38	; 0x26
   2a370:	18fb      	adds	r3, r7, r3
   2a372:	881b      	ldrh	r3, [r3, #0]
   2a374:	2226      	movs	r2, #38	; 0x26
   2a376:	18ba      	adds	r2, r7, r2
   2a378:	1c59      	adds	r1, r3, #1
   2a37a:	8011      	strh	r1, [r2, #0]
   2a37c:	001a      	movs	r2, r3
   2a37e:	68bb      	ldr	r3, [r7, #8]
   2a380:	189b      	adds	r3, r3, r2
   2a382:	781b      	ldrb	r3, [r3, #0]
   2a384:	021b      	lsls	r3, r3, #8
   2a386:	b21a      	sxth	r2, r3
   2a388:	231e      	movs	r3, #30
   2a38a:	18fb      	adds	r3, r7, r3
   2a38c:	2100      	movs	r1, #0
   2a38e:	5e5b      	ldrsh	r3, [r3, r1]
   2a390:	4313      	orrs	r3, r2
   2a392:	b21a      	sxth	r2, r3
   2a394:	231e      	movs	r3, #30
   2a396:	18fb      	adds	r3, r7, r3
   2a398:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
   2a39a:	231e      	movs	r3, #30
   2a39c:	18fb      	adds	r3, r7, r3
   2a39e:	881a      	ldrh	r2, [r3, #0]
   2a3a0:	68fb      	ldr	r3, [r7, #12]
   2a3a2:	0011      	movs	r1, r2
   2a3a4:	0018      	movs	r0, r3
   2a3a6:	4b54      	ldr	r3, [pc, #336]	; (2a4f8 <spi_write_buffer_wait+0x308>)
   2a3a8:	4798      	blx	r3
						length--;
   2a3aa:	1dbb      	adds	r3, r7, #6
   2a3ac:	881a      	ldrh	r2, [r3, #0]
   2a3ae:	1dbb      	adds	r3, r7, #6
   2a3b0:	3a01      	subs	r2, #1
   2a3b2:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
   2a3b4:	68fb      	ldr	r3, [r7, #12]
   2a3b6:	0018      	movs	r0, r3
   2a3b8:	4b50      	ldr	r3, [pc, #320]	; (2a4fc <spi_write_buffer_wait+0x30c>)
   2a3ba:	4798      	blx	r3
   2a3bc:	1e03      	subs	r3, r0, #0
   2a3be:	d107      	bne.n	2a3d0 <spi_write_buffer_wait+0x1e0>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2a3c0:	69bb      	ldr	r3, [r7, #24]
   2a3c2:	3301      	adds	r3, #1
   2a3c4:	61bb      	str	r3, [r7, #24]
   2a3c6:	69bb      	ldr	r3, [r7, #24]
   2a3c8:	4a4a      	ldr	r2, [pc, #296]	; (2a4f4 <spi_write_buffer_wait+0x304>)
   2a3ca:	4293      	cmp	r3, r2
   2a3cc:	d9b3      	bls.n	2a336 <spi_write_buffer_wait+0x146>
   2a3ce:	e000      	b.n	2a3d2 <spi_write_buffer_wait+0x1e2>
						break;
   2a3d0:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
   2a3d2:	68fb      	ldr	r3, [r7, #12]
   2a3d4:	0018      	movs	r0, r3
   2a3d6:	4b44      	ldr	r3, [pc, #272]	; (2a4e8 <spi_write_buffer_wait+0x2f8>)
   2a3d8:	4798      	blx	r3
   2a3da:	1e03      	subs	r3, r0, #0
   2a3dc:	d005      	beq.n	2a3ea <spi_write_buffer_wait+0x1fa>
					_spi_clear_tx_complete_flag(module);
   2a3de:	68fb      	ldr	r3, [r7, #12]
   2a3e0:	0018      	movs	r0, r3
   2a3e2:	4b42      	ldr	r3, [pc, #264]	; (2a4ec <spi_write_buffer_wait+0x2fc>)
   2a3e4:	4798      	blx	r3
					return STATUS_ABORTED;
   2a3e6:	2304      	movs	r3, #4
   2a3e8:	e07a      	b.n	2a4e0 <spi_write_buffer_wait+0x2f0>
				}

				if (!spi_is_ready_to_read(module)) {
   2a3ea:	68fb      	ldr	r3, [r7, #12]
   2a3ec:	0018      	movs	r0, r3
   2a3ee:	4b43      	ldr	r3, [pc, #268]	; (2a4fc <spi_write_buffer_wait+0x30c>)
   2a3f0:	4798      	blx	r3
   2a3f2:	0003      	movs	r3, r0
   2a3f4:	001a      	movs	r2, r3
   2a3f6:	2301      	movs	r3, #1
   2a3f8:	4053      	eors	r3, r2
   2a3fa:	b2db      	uxtb	r3, r3
   2a3fc:	2b00      	cmp	r3, #0
   2a3fe:	d001      	beq.n	2a404 <spi_write_buffer_wait+0x214>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
   2a400:	2312      	movs	r3, #18
   2a402:	e06d      	b.n	2a4e0 <spi_write_buffer_wait+0x2f0>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   2a404:	46c0      	nop			; (mov r8, r8)
   2a406:	68fb      	ldr	r3, [r7, #12]
   2a408:	0018      	movs	r0, r3
   2a40a:	4b3c      	ldr	r3, [pc, #240]	; (2a4fc <spi_write_buffer_wait+0x30c>)
   2a40c:	4798      	blx	r3
   2a40e:	0003      	movs	r3, r0
   2a410:	001a      	movs	r2, r3
   2a412:	2301      	movs	r3, #1
   2a414:	4053      	eors	r3, r2
   2a416:	b2db      	uxtb	r3, r3
   2a418:	2b00      	cmp	r3, #0
   2a41a:	d1f4      	bne.n	2a406 <spi_write_buffer_wait+0x216>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   2a41c:	2312      	movs	r3, #18
   2a41e:	18fa      	adds	r2, r7, r3
   2a420:	68fb      	ldr	r3, [r7, #12]
   2a422:	0011      	movs	r1, r2
   2a424:	0018      	movs	r0, r3
   2a426:	4b36      	ldr	r3, [pc, #216]	; (2a500 <spi_write_buffer_wait+0x310>)
   2a428:	4798      	blx	r3
			flush_length--;
   2a42a:	2324      	movs	r3, #36	; 0x24
   2a42c:	18fb      	adds	r3, r7, r3
   2a42e:	881a      	ldrh	r2, [r3, #0]
   2a430:	2324      	movs	r3, #36	; 0x24
   2a432:	18fb      	adds	r3, r7, r3
   2a434:	3a01      	subs	r2, #1
   2a436:	801a      	strh	r2, [r3, #0]
	while (length--) {
   2a438:	1dbb      	adds	r3, r7, #6
   2a43a:	881b      	ldrh	r3, [r3, #0]
   2a43c:	1dba      	adds	r2, r7, #6
   2a43e:	1e59      	subs	r1, r3, #1
   2a440:	8011      	strh	r1, [r2, #0]
   2a442:	2b00      	cmp	r3, #0
   2a444:	d000      	beq.n	2a448 <spi_write_buffer_wait+0x258>
   2a446:	e6f8      	b.n	2a23a <spi_write_buffer_wait+0x4a>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   2a448:	68fb      	ldr	r3, [r7, #12]
   2a44a:	795b      	ldrb	r3, [r3, #5]
   2a44c:	2b01      	cmp	r3, #1
   2a44e:	d10b      	bne.n	2a468 <spi_write_buffer_wait+0x278>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   2a450:	46c0      	nop			; (mov r8, r8)
   2a452:	68fb      	ldr	r3, [r7, #12]
   2a454:	0018      	movs	r0, r3
   2a456:	4b24      	ldr	r3, [pc, #144]	; (2a4e8 <spi_write_buffer_wait+0x2f8>)
   2a458:	4798      	blx	r3
   2a45a:	0003      	movs	r3, r0
   2a45c:	001a      	movs	r2, r3
   2a45e:	2301      	movs	r3, #1
   2a460:	4053      	eors	r3, r2
   2a462:	b2db      	uxtb	r3, r3
   2a464:	2b00      	cmp	r3, #0
   2a466:	d1f4      	bne.n	2a452 <spi_write_buffer_wait+0x262>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
   2a468:	68fb      	ldr	r3, [r7, #12]
   2a46a:	795b      	ldrb	r3, [r3, #5]
   2a46c:	2b00      	cmp	r3, #0
   2a46e:	d136      	bne.n	2a4de <spi_write_buffer_wait+0x2ee>
		if (module->receiver_enabled) {
   2a470:	68fb      	ldr	r3, [r7, #12]
   2a472:	79db      	ldrb	r3, [r3, #7]
   2a474:	2b00      	cmp	r3, #0
   2a476:	d032      	beq.n	2a4de <spi_write_buffer_wait+0x2ee>
			while (flush_length) {
   2a478:	e02c      	b.n	2a4d4 <spi_write_buffer_wait+0x2e4>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2a47a:	2300      	movs	r3, #0
   2a47c:	617b      	str	r3, [r7, #20]
   2a47e:	e008      	b.n	2a492 <spi_write_buffer_wait+0x2a2>
					if (spi_is_ready_to_read(module)) {
   2a480:	68fb      	ldr	r3, [r7, #12]
   2a482:	0018      	movs	r0, r3
   2a484:	4b1d      	ldr	r3, [pc, #116]	; (2a4fc <spi_write_buffer_wait+0x30c>)
   2a486:	4798      	blx	r3
   2a488:	1e03      	subs	r3, r0, #0
   2a48a:	d107      	bne.n	2a49c <spi_write_buffer_wait+0x2ac>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2a48c:	697b      	ldr	r3, [r7, #20]
   2a48e:	3301      	adds	r3, #1
   2a490:	617b      	str	r3, [r7, #20]
   2a492:	697b      	ldr	r3, [r7, #20]
   2a494:	4a17      	ldr	r2, [pc, #92]	; (2a4f4 <spi_write_buffer_wait+0x304>)
   2a496:	4293      	cmp	r3, r2
   2a498:	d9f2      	bls.n	2a480 <spi_write_buffer_wait+0x290>
   2a49a:	e000      	b.n	2a49e <spi_write_buffer_wait+0x2ae>
						break;
   2a49c:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
   2a49e:	68fb      	ldr	r3, [r7, #12]
   2a4a0:	0018      	movs	r0, r3
   2a4a2:	4b16      	ldr	r3, [pc, #88]	; (2a4fc <spi_write_buffer_wait+0x30c>)
   2a4a4:	4798      	blx	r3
   2a4a6:	0003      	movs	r3, r0
   2a4a8:	001a      	movs	r2, r3
   2a4aa:	2301      	movs	r3, #1
   2a4ac:	4053      	eors	r3, r2
   2a4ae:	b2db      	uxtb	r3, r3
   2a4b0:	2b00      	cmp	r3, #0
   2a4b2:	d001      	beq.n	2a4b8 <spi_write_buffer_wait+0x2c8>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
   2a4b4:	2312      	movs	r3, #18
   2a4b6:	e013      	b.n	2a4e0 <spi_write_buffer_wait+0x2f0>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
   2a4b8:	2310      	movs	r3, #16
   2a4ba:	18fa      	adds	r2, r7, r3
   2a4bc:	68fb      	ldr	r3, [r7, #12]
   2a4be:	0011      	movs	r1, r2
   2a4c0:	0018      	movs	r0, r3
   2a4c2:	4b0f      	ldr	r3, [pc, #60]	; (2a500 <spi_write_buffer_wait+0x310>)
   2a4c4:	4798      	blx	r3
				flush_length--;
   2a4c6:	2324      	movs	r3, #36	; 0x24
   2a4c8:	18fb      	adds	r3, r7, r3
   2a4ca:	881a      	ldrh	r2, [r3, #0]
   2a4cc:	2324      	movs	r3, #36	; 0x24
   2a4ce:	18fb      	adds	r3, r7, r3
   2a4d0:	3a01      	subs	r2, #1
   2a4d2:	801a      	strh	r2, [r3, #0]
			while (flush_length) {
   2a4d4:	2324      	movs	r3, #36	; 0x24
   2a4d6:	18fb      	adds	r3, r7, r3
   2a4d8:	881b      	ldrh	r3, [r3, #0]
   2a4da:	2b00      	cmp	r3, #0
   2a4dc:	d1cd      	bne.n	2a47a <spi_write_buffer_wait+0x28a>
			}
		}
	}
#  endif
	return STATUS_OK;
   2a4de:	2300      	movs	r3, #0
}
   2a4e0:	0018      	movs	r0, r3
   2a4e2:	46bd      	mov	sp, r7
   2a4e4:	b00a      	add	sp, #40	; 0x28
   2a4e6:	bd80      	pop	{r7, pc}
   2a4e8:	0002979d 	.word	0x0002979d
   2a4ec:	000299ad 	.word	0x000299ad
   2a4f0:	000297c5 	.word	0x000297c5
   2a4f4:	00002710 	.word	0x00002710
   2a4f8:	00029815 	.word	0x00029815
   2a4fc:	000297ed 	.word	0x000297ed
   2a500:	0002985d 	.word	0x0002985d

0002a504 <system_gclk_chan_get_config_defaults>:
{
   2a504:	b580      	push	{r7, lr}
   2a506:	b082      	sub	sp, #8
   2a508:	af00      	add	r7, sp, #0
   2a50a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2a50c:	687b      	ldr	r3, [r7, #4]
   2a50e:	2200      	movs	r2, #0
   2a510:	701a      	strb	r2, [r3, #0]
}
   2a512:	46c0      	nop			; (mov r8, r8)
   2a514:	46bd      	mov	sp, r7
   2a516:	b002      	add	sp, #8
   2a518:	bd80      	pop	{r7, pc}
	...

0002a51c <system_apb_clock_set_mask>:
{
   2a51c:	b580      	push	{r7, lr}
   2a51e:	b082      	sub	sp, #8
   2a520:	af00      	add	r7, sp, #0
   2a522:	0002      	movs	r2, r0
   2a524:	6039      	str	r1, [r7, #0]
   2a526:	1dfb      	adds	r3, r7, #7
   2a528:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2a52a:	1dfb      	adds	r3, r7, #7
   2a52c:	781b      	ldrb	r3, [r3, #0]
   2a52e:	2b01      	cmp	r3, #1
   2a530:	d00a      	beq.n	2a548 <system_apb_clock_set_mask+0x2c>
   2a532:	2b02      	cmp	r3, #2
   2a534:	d00f      	beq.n	2a556 <system_apb_clock_set_mask+0x3a>
   2a536:	2b00      	cmp	r3, #0
   2a538:	d114      	bne.n	2a564 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2a53a:	4b0e      	ldr	r3, [pc, #56]	; (2a574 <system_apb_clock_set_mask+0x58>)
   2a53c:	4a0d      	ldr	r2, [pc, #52]	; (2a574 <system_apb_clock_set_mask+0x58>)
   2a53e:	6991      	ldr	r1, [r2, #24]
   2a540:	683a      	ldr	r2, [r7, #0]
   2a542:	430a      	orrs	r2, r1
   2a544:	619a      	str	r2, [r3, #24]
			break;
   2a546:	e00f      	b.n	2a568 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2a548:	4b0a      	ldr	r3, [pc, #40]	; (2a574 <system_apb_clock_set_mask+0x58>)
   2a54a:	4a0a      	ldr	r2, [pc, #40]	; (2a574 <system_apb_clock_set_mask+0x58>)
   2a54c:	69d1      	ldr	r1, [r2, #28]
   2a54e:	683a      	ldr	r2, [r7, #0]
   2a550:	430a      	orrs	r2, r1
   2a552:	61da      	str	r2, [r3, #28]
			break;
   2a554:	e008      	b.n	2a568 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2a556:	4b07      	ldr	r3, [pc, #28]	; (2a574 <system_apb_clock_set_mask+0x58>)
   2a558:	4a06      	ldr	r2, [pc, #24]	; (2a574 <system_apb_clock_set_mask+0x58>)
   2a55a:	6a11      	ldr	r1, [r2, #32]
   2a55c:	683a      	ldr	r2, [r7, #0]
   2a55e:	430a      	orrs	r2, r1
   2a560:	621a      	str	r2, [r3, #32]
			break;
   2a562:	e001      	b.n	2a568 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2a564:	2317      	movs	r3, #23
   2a566:	e000      	b.n	2a56a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2a568:	2300      	movs	r3, #0
}
   2a56a:	0018      	movs	r0, r3
   2a56c:	46bd      	mov	sp, r7
   2a56e:	b002      	add	sp, #8
   2a570:	bd80      	pop	{r7, pc}
   2a572:	46c0      	nop			; (mov r8, r8)
   2a574:	40000400 	.word	0x40000400

0002a578 <system_pinmux_get_config_defaults>:
{
   2a578:	b580      	push	{r7, lr}
   2a57a:	b082      	sub	sp, #8
   2a57c:	af00      	add	r7, sp, #0
   2a57e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2a580:	687b      	ldr	r3, [r7, #4]
   2a582:	2280      	movs	r2, #128	; 0x80
   2a584:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2a586:	687b      	ldr	r3, [r7, #4]
   2a588:	2200      	movs	r2, #0
   2a58a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2a58c:	687b      	ldr	r3, [r7, #4]
   2a58e:	2201      	movs	r2, #1
   2a590:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2a592:	687b      	ldr	r3, [r7, #4]
   2a594:	2200      	movs	r2, #0
   2a596:	70da      	strb	r2, [r3, #3]
}
   2a598:	46c0      	nop			; (mov r8, r8)
   2a59a:	46bd      	mov	sp, r7
   2a59c:	b002      	add	sp, #8
   2a59e:	bd80      	pop	{r7, pc}

0002a5a0 <system_is_debugger_present>:
{
   2a5a0:	b580      	push	{r7, lr}
   2a5a2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   2a5a4:	4b05      	ldr	r3, [pc, #20]	; (2a5bc <system_is_debugger_present+0x1c>)
   2a5a6:	789b      	ldrb	r3, [r3, #2]
   2a5a8:	b2db      	uxtb	r3, r3
   2a5aa:	001a      	movs	r2, r3
   2a5ac:	2302      	movs	r3, #2
   2a5ae:	4013      	ands	r3, r2
   2a5b0:	1e5a      	subs	r2, r3, #1
   2a5b2:	4193      	sbcs	r3, r2
   2a5b4:	b2db      	uxtb	r3, r3
}
   2a5b6:	0018      	movs	r0, r3
   2a5b8:	46bd      	mov	sp, r7
   2a5ba:	bd80      	pop	{r7, pc}
   2a5bc:	41002000 	.word	0x41002000

0002a5c0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   2a5c0:	b580      	push	{r7, lr}
   2a5c2:	b084      	sub	sp, #16
   2a5c4:	af00      	add	r7, sp, #0
   2a5c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   2a5c8:	687b      	ldr	r3, [r7, #4]
   2a5ca:	681b      	ldr	r3, [r3, #0]
   2a5cc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   2a5ce:	68fb      	ldr	r3, [r7, #12]
   2a5d0:	69db      	ldr	r3, [r3, #28]
   2a5d2:	1e5a      	subs	r2, r3, #1
   2a5d4:	4193      	sbcs	r3, r2
   2a5d6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   2a5d8:	0018      	movs	r0, r3
   2a5da:	46bd      	mov	sp, r7
   2a5dc:	b004      	add	sp, #16
   2a5de:	bd80      	pop	{r7, pc}

0002a5e0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   2a5e0:	b580      	push	{r7, lr}
   2a5e2:	b082      	sub	sp, #8
   2a5e4:	af00      	add	r7, sp, #0
   2a5e6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   2a5e8:	46c0      	nop			; (mov r8, r8)
   2a5ea:	687b      	ldr	r3, [r7, #4]
   2a5ec:	0018      	movs	r0, r3
   2a5ee:	4b04      	ldr	r3, [pc, #16]	; (2a600 <_usart_wait_for_sync+0x20>)
   2a5f0:	4798      	blx	r3
   2a5f2:	1e03      	subs	r3, r0, #0
   2a5f4:	d1f9      	bne.n	2a5ea <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   2a5f6:	46c0      	nop			; (mov r8, r8)
   2a5f8:	46bd      	mov	sp, r7
   2a5fa:	b002      	add	sp, #8
   2a5fc:	bd80      	pop	{r7, pc}
   2a5fe:	46c0      	nop			; (mov r8, r8)
   2a600:	0002a5c1 	.word	0x0002a5c1

0002a604 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   2a604:	b5b0      	push	{r4, r5, r7, lr}
   2a606:	b08c      	sub	sp, #48	; 0x30
   2a608:	af02      	add	r7, sp, #8
   2a60a:	6078      	str	r0, [r7, #4]
   2a60c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2a60e:	687b      	ldr	r3, [r7, #4]
   2a610:	681b      	ldr	r3, [r3, #0]
   2a612:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2a614:	687b      	ldr	r3, [r7, #4]
   2a616:	681b      	ldr	r3, [r3, #0]
   2a618:	0018      	movs	r0, r3
   2a61a:	4bab      	ldr	r3, [pc, #684]	; (2a8c8 <_usart_set_config+0x2c4>)
   2a61c:	4798      	blx	r3
   2a61e:	0003      	movs	r3, r0
   2a620:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2a622:	697b      	ldr	r3, [r7, #20]
   2a624:	3314      	adds	r3, #20
   2a626:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   2a628:	2300      	movs	r3, #0
   2a62a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   2a62c:	2300      	movs	r3, #0
   2a62e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   2a630:	230a      	movs	r3, #10
   2a632:	18fb      	adds	r3, r7, r3
   2a634:	2200      	movs	r2, #0
   2a636:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2a638:	231f      	movs	r3, #31
   2a63a:	18fb      	adds	r3, r7, r3
   2a63c:	2200      	movs	r2, #0
   2a63e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2a640:	231e      	movs	r3, #30
   2a642:	18fb      	adds	r3, r7, r3
   2a644:	2210      	movs	r2, #16
   2a646:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   2a648:	683b      	ldr	r3, [r7, #0]
   2a64a:	8a1b      	ldrh	r3, [r3, #16]
   2a64c:	2280      	movs	r2, #128	; 0x80
   2a64e:	01d2      	lsls	r2, r2, #7
   2a650:	4293      	cmp	r3, r2
   2a652:	d01c      	beq.n	2a68e <_usart_set_config+0x8a>
   2a654:	2280      	movs	r2, #128	; 0x80
   2a656:	01d2      	lsls	r2, r2, #7
   2a658:	4293      	cmp	r3, r2
   2a65a:	dc06      	bgt.n	2a66a <_usart_set_config+0x66>
   2a65c:	2b00      	cmp	r3, #0
   2a65e:	d00d      	beq.n	2a67c <_usart_set_config+0x78>
   2a660:	2280      	movs	r2, #128	; 0x80
   2a662:	0192      	lsls	r2, r2, #6
   2a664:	4293      	cmp	r3, r2
   2a666:	d024      	beq.n	2a6b2 <_usart_set_config+0xae>
   2a668:	e035      	b.n	2a6d6 <_usart_set_config+0xd2>
   2a66a:	22c0      	movs	r2, #192	; 0xc0
   2a66c:	01d2      	lsls	r2, r2, #7
   2a66e:	4293      	cmp	r3, r2
   2a670:	d028      	beq.n	2a6c4 <_usart_set_config+0xc0>
   2a672:	2280      	movs	r2, #128	; 0x80
   2a674:	0212      	lsls	r2, r2, #8
   2a676:	4293      	cmp	r3, r2
   2a678:	d012      	beq.n	2a6a0 <_usart_set_config+0x9c>
   2a67a:	e02c      	b.n	2a6d6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2a67c:	231f      	movs	r3, #31
   2a67e:	18fb      	adds	r3, r7, r3
   2a680:	2200      	movs	r2, #0
   2a682:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2a684:	231e      	movs	r3, #30
   2a686:	18fb      	adds	r3, r7, r3
   2a688:	2210      	movs	r2, #16
   2a68a:	701a      	strb	r2, [r3, #0]
			break;
   2a68c:	e023      	b.n	2a6d6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2a68e:	231f      	movs	r3, #31
   2a690:	18fb      	adds	r3, r7, r3
   2a692:	2200      	movs	r2, #0
   2a694:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2a696:	231e      	movs	r3, #30
   2a698:	18fb      	adds	r3, r7, r3
   2a69a:	2208      	movs	r2, #8
   2a69c:	701a      	strb	r2, [r3, #0]
			break;
   2a69e:	e01a      	b.n	2a6d6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2a6a0:	231f      	movs	r3, #31
   2a6a2:	18fb      	adds	r3, r7, r3
   2a6a4:	2200      	movs	r2, #0
   2a6a6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   2a6a8:	231e      	movs	r3, #30
   2a6aa:	18fb      	adds	r3, r7, r3
   2a6ac:	2203      	movs	r2, #3
   2a6ae:	701a      	strb	r2, [r3, #0]
			break;
   2a6b0:	e011      	b.n	2a6d6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   2a6b2:	231f      	movs	r3, #31
   2a6b4:	18fb      	adds	r3, r7, r3
   2a6b6:	2201      	movs	r2, #1
   2a6b8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2a6ba:	231e      	movs	r3, #30
   2a6bc:	18fb      	adds	r3, r7, r3
   2a6be:	2210      	movs	r2, #16
   2a6c0:	701a      	strb	r2, [r3, #0]
			break;
   2a6c2:	e008      	b.n	2a6d6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   2a6c4:	231f      	movs	r3, #31
   2a6c6:	18fb      	adds	r3, r7, r3
   2a6c8:	2201      	movs	r2, #1
   2a6ca:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2a6cc:	231e      	movs	r3, #30
   2a6ce:	18fb      	adds	r3, r7, r3
   2a6d0:	2208      	movs	r2, #8
   2a6d2:	701a      	strb	r2, [r3, #0]
			break;
   2a6d4:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   2a6d6:	683b      	ldr	r3, [r7, #0]
   2a6d8:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   2a6da:	683b      	ldr	r3, [r7, #0]
   2a6dc:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   2a6de:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   2a6e0:	683b      	ldr	r3, [r7, #0]
   2a6e2:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   2a6e4:	4313      	orrs	r3, r2
		config->sample_rate |
   2a6e6:	683a      	ldr	r2, [r7, #0]
   2a6e8:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   2a6ea:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   2a6ec:	683a      	ldr	r2, [r7, #0]
   2a6ee:	7e12      	ldrb	r2, [r2, #24]
   2a6f0:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   2a6f2:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   2a6f4:	683a      	ldr	r2, [r7, #0]
   2a6f6:	2126      	movs	r1, #38	; 0x26
   2a6f8:	5c52      	ldrb	r2, [r2, r1]
   2a6fa:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   2a6fc:	4313      	orrs	r3, r2
   2a6fe:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   2a700:	231d      	movs	r3, #29
   2a702:	18fb      	adds	r3, r7, r3
   2a704:	2200      	movs	r2, #0
   2a706:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   2a708:	683b      	ldr	r3, [r7, #0]
   2a70a:	685b      	ldr	r3, [r3, #4]
   2a70c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   2a70e:	68fb      	ldr	r3, [r7, #12]
   2a710:	2b00      	cmp	r3, #0
   2a712:	d01e      	beq.n	2a752 <_usart_set_config+0x14e>
   2a714:	2280      	movs	r2, #128	; 0x80
   2a716:	0552      	lsls	r2, r2, #21
   2a718:	4293      	cmp	r3, r2
   2a71a:	d14f      	bne.n	2a7bc <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   2a71c:	683b      	ldr	r3, [r7, #0]
   2a71e:	2227      	movs	r2, #39	; 0x27
   2a720:	5c9b      	ldrb	r3, [r3, r2]
   2a722:	2201      	movs	r2, #1
   2a724:	4053      	eors	r3, r2
   2a726:	b2db      	uxtb	r3, r3
   2a728:	2b00      	cmp	r3, #0
   2a72a:	d046      	beq.n	2a7ba <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   2a72c:	683b      	ldr	r3, [r7, #0]
   2a72e:	6a1d      	ldr	r5, [r3, #32]
   2a730:	693b      	ldr	r3, [r7, #16]
   2a732:	b2db      	uxtb	r3, r3
   2a734:	0018      	movs	r0, r3
   2a736:	4b65      	ldr	r3, [pc, #404]	; (2a8cc <_usart_set_config+0x2c8>)
   2a738:	4798      	blx	r3
   2a73a:	0001      	movs	r1, r0
   2a73c:	231d      	movs	r3, #29
   2a73e:	18fc      	adds	r4, r7, r3
   2a740:	230a      	movs	r3, #10
   2a742:	18fb      	adds	r3, r7, r3
   2a744:	001a      	movs	r2, r3
   2a746:	0028      	movs	r0, r5
   2a748:	4b61      	ldr	r3, [pc, #388]	; (2a8d0 <_usart_set_config+0x2cc>)
   2a74a:	4798      	blx	r3
   2a74c:	0003      	movs	r3, r0
   2a74e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   2a750:	e033      	b.n	2a7ba <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   2a752:	683b      	ldr	r3, [r7, #0]
   2a754:	2227      	movs	r2, #39	; 0x27
   2a756:	5c9b      	ldrb	r3, [r3, r2]
   2a758:	2b00      	cmp	r3, #0
   2a75a:	d014      	beq.n	2a786 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   2a75c:	683b      	ldr	r3, [r7, #0]
   2a75e:	6a18      	ldr	r0, [r3, #32]
   2a760:	683b      	ldr	r3, [r7, #0]
   2a762:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   2a764:	231d      	movs	r3, #29
   2a766:	18fc      	adds	r4, r7, r3
   2a768:	231f      	movs	r3, #31
   2a76a:	18fb      	adds	r3, r7, r3
   2a76c:	781d      	ldrb	r5, [r3, #0]
   2a76e:	230a      	movs	r3, #10
   2a770:	18fa      	adds	r2, r7, r3
   2a772:	231e      	movs	r3, #30
   2a774:	18fb      	adds	r3, r7, r3
   2a776:	781b      	ldrb	r3, [r3, #0]
   2a778:	9300      	str	r3, [sp, #0]
   2a77a:	002b      	movs	r3, r5
   2a77c:	4d55      	ldr	r5, [pc, #340]	; (2a8d4 <_usart_set_config+0x2d0>)
   2a77e:	47a8      	blx	r5
   2a780:	0003      	movs	r3, r0
   2a782:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   2a784:	e01a      	b.n	2a7bc <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   2a786:	683b      	ldr	r3, [r7, #0]
   2a788:	6a1d      	ldr	r5, [r3, #32]
   2a78a:	693b      	ldr	r3, [r7, #16]
   2a78c:	b2db      	uxtb	r3, r3
   2a78e:	0018      	movs	r0, r3
   2a790:	4b4e      	ldr	r3, [pc, #312]	; (2a8cc <_usart_set_config+0x2c8>)
   2a792:	4798      	blx	r3
				status_code =
   2a794:	231d      	movs	r3, #29
   2a796:	18fc      	adds	r4, r7, r3
   2a798:	231f      	movs	r3, #31
   2a79a:	18fb      	adds	r3, r7, r3
   2a79c:	7819      	ldrb	r1, [r3, #0]
   2a79e:	230a      	movs	r3, #10
   2a7a0:	18fa      	adds	r2, r7, r3
   2a7a2:	231e      	movs	r3, #30
   2a7a4:	18fb      	adds	r3, r7, r3
   2a7a6:	781b      	ldrb	r3, [r3, #0]
   2a7a8:	9300      	str	r3, [sp, #0]
   2a7aa:	000b      	movs	r3, r1
   2a7ac:	0001      	movs	r1, r0
   2a7ae:	0028      	movs	r0, r5
   2a7b0:	4d48      	ldr	r5, [pc, #288]	; (2a8d4 <_usart_set_config+0x2d0>)
   2a7b2:	47a8      	blx	r5
   2a7b4:	0003      	movs	r3, r0
   2a7b6:	7023      	strb	r3, [r4, #0]
			break;
   2a7b8:	e000      	b.n	2a7bc <_usart_set_config+0x1b8>
			break;
   2a7ba:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   2a7bc:	231d      	movs	r3, #29
   2a7be:	18fb      	adds	r3, r7, r3
   2a7c0:	781b      	ldrb	r3, [r3, #0]
   2a7c2:	2b00      	cmp	r3, #0
   2a7c4:	d003      	beq.n	2a7ce <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   2a7c6:	231d      	movs	r3, #29
   2a7c8:	18fb      	adds	r3, r7, r3
   2a7ca:	781b      	ldrb	r3, [r3, #0]
   2a7cc:	e077      	b.n	2a8be <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   2a7ce:	683b      	ldr	r3, [r7, #0]
   2a7d0:	7e5b      	ldrb	r3, [r3, #25]
   2a7d2:	2b00      	cmp	r3, #0
   2a7d4:	d003      	beq.n	2a7de <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   2a7d6:	683b      	ldr	r3, [r7, #0]
   2a7d8:	7e9a      	ldrb	r2, [r3, #26]
   2a7da:	69bb      	ldr	r3, [r7, #24]
   2a7dc:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2a7de:	687b      	ldr	r3, [r7, #4]
   2a7e0:	0018      	movs	r0, r3
   2a7e2:	4b3d      	ldr	r3, [pc, #244]	; (2a8d8 <_usart_set_config+0x2d4>)
   2a7e4:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   2a7e6:	230a      	movs	r3, #10
   2a7e8:	18fb      	adds	r3, r7, r3
   2a7ea:	881a      	ldrh	r2, [r3, #0]
   2a7ec:	69bb      	ldr	r3, [r7, #24]
   2a7ee:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   2a7f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2a7f2:	68fb      	ldr	r3, [r7, #12]
   2a7f4:	4313      	orrs	r3, r2
   2a7f6:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   2a7f8:	683b      	ldr	r3, [r7, #0]
   2a7fa:	2227      	movs	r2, #39	; 0x27
   2a7fc:	5c9b      	ldrb	r3, [r3, r2]
   2a7fe:	2201      	movs	r2, #1
   2a800:	4053      	eors	r3, r2
   2a802:	b2db      	uxtb	r3, r3
   2a804:	2b00      	cmp	r3, #0
   2a806:	d003      	beq.n	2a810 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   2a808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a80a:	2204      	movs	r2, #4
   2a80c:	4313      	orrs	r3, r2
   2a80e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   2a810:	683b      	ldr	r3, [r7, #0]
   2a812:	7e5b      	ldrb	r3, [r3, #25]
   2a814:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   2a816:	683b      	ldr	r3, [r7, #0]
   2a818:	7f1b      	ldrb	r3, [r3, #28]
   2a81a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   2a81c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2a81e:	683b      	ldr	r3, [r7, #0]
   2a820:	7f5b      	ldrb	r3, [r3, #29]
   2a822:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   2a824:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2a826:	683b      	ldr	r3, [r7, #0]
   2a828:	2124      	movs	r1, #36	; 0x24
   2a82a:	5c5b      	ldrb	r3, [r3, r1]
   2a82c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2a82e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   2a830:	683b      	ldr	r3, [r7, #0]
   2a832:	2125      	movs	r1, #37	; 0x25
   2a834:	5c5b      	ldrb	r3, [r3, r1]
   2a836:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2a838:	4313      	orrs	r3, r2
	ctrlb =  
   2a83a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   2a83c:	683b      	ldr	r3, [r7, #0]
   2a83e:	7a9b      	ldrb	r3, [r3, #10]
   2a840:	001a      	movs	r2, r3
   2a842:	6a3b      	ldr	r3, [r7, #32]
   2a844:	4313      	orrs	r3, r2
   2a846:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   2a848:	683b      	ldr	r3, [r7, #0]
   2a84a:	7adb      	ldrb	r3, [r3, #11]
   2a84c:	001a      	movs	r2, r3
   2a84e:	6a3b      	ldr	r3, [r7, #32]
   2a850:	4313      	orrs	r3, r2
   2a852:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   2a854:	683b      	ldr	r3, [r7, #0]
   2a856:	891b      	ldrh	r3, [r3, #8]
   2a858:	2bff      	cmp	r3, #255	; 0xff
   2a85a:	d00b      	beq.n	2a874 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   2a85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a85e:	2280      	movs	r2, #128	; 0x80
   2a860:	0452      	lsls	r2, r2, #17
   2a862:	4313      	orrs	r3, r2
   2a864:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   2a866:	683b      	ldr	r3, [r7, #0]
   2a868:	891b      	ldrh	r3, [r3, #8]
   2a86a:	001a      	movs	r2, r3
   2a86c:	6a3b      	ldr	r3, [r7, #32]
   2a86e:	4313      	orrs	r3, r2
   2a870:	623b      	str	r3, [r7, #32]
   2a872:	e008      	b.n	2a886 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   2a874:	683b      	ldr	r3, [r7, #0]
   2a876:	7edb      	ldrb	r3, [r3, #27]
   2a878:	2b00      	cmp	r3, #0
   2a87a:	d004      	beq.n	2a886 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   2a87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a87e:	2280      	movs	r2, #128	; 0x80
   2a880:	04d2      	lsls	r2, r2, #19
   2a882:	4313      	orrs	r3, r2
   2a884:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   2a886:	683b      	ldr	r3, [r7, #0]
   2a888:	222c      	movs	r2, #44	; 0x2c
   2a88a:	5c9b      	ldrb	r3, [r3, r2]
   2a88c:	2b00      	cmp	r3, #0
   2a88e:	d103      	bne.n	2a898 <_usart_set_config+0x294>
   2a890:	4b12      	ldr	r3, [pc, #72]	; (2a8dc <_usart_set_config+0x2d8>)
   2a892:	4798      	blx	r3
   2a894:	1e03      	subs	r3, r0, #0
   2a896:	d003      	beq.n	2a8a0 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   2a898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a89a:	2280      	movs	r2, #128	; 0x80
   2a89c:	4313      	orrs	r3, r2
   2a89e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2a8a0:	687b      	ldr	r3, [r7, #4]
   2a8a2:	0018      	movs	r0, r3
   2a8a4:	4b0c      	ldr	r3, [pc, #48]	; (2a8d8 <_usart_set_config+0x2d4>)
   2a8a6:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   2a8a8:	69bb      	ldr	r3, [r7, #24]
   2a8aa:	6a3a      	ldr	r2, [r7, #32]
   2a8ac:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2a8ae:	687b      	ldr	r3, [r7, #4]
   2a8b0:	0018      	movs	r0, r3
   2a8b2:	4b09      	ldr	r3, [pc, #36]	; (2a8d8 <_usart_set_config+0x2d4>)
   2a8b4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   2a8b6:	69bb      	ldr	r3, [r7, #24]
   2a8b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2a8ba:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   2a8bc:	2300      	movs	r3, #0
}
   2a8be:	0018      	movs	r0, r3
   2a8c0:	46bd      	mov	sp, r7
   2a8c2:	b00a      	add	sp, #40	; 0x28
   2a8c4:	bdb0      	pop	{r4, r5, r7, pc}
   2a8c6:	46c0      	nop			; (mov r8, r8)
   2a8c8:	00029351 	.word	0x00029351
   2a8cc:	0002bd61 	.word	0x0002bd61
   2a8d0:	00028ecb 	.word	0x00028ecb
   2a8d4:	00028f49 	.word	0x00028f49
   2a8d8:	0002a5e1 	.word	0x0002a5e1
   2a8dc:	0002a5a1 	.word	0x0002a5a1

0002a8e0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   2a8e0:	b590      	push	{r4, r7, lr}
   2a8e2:	b093      	sub	sp, #76	; 0x4c
   2a8e4:	af00      	add	r7, sp, #0
   2a8e6:	60f8      	str	r0, [r7, #12]
   2a8e8:	60b9      	str	r1, [r7, #8]
   2a8ea:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   2a8ec:	233b      	movs	r3, #59	; 0x3b
   2a8ee:	18fb      	adds	r3, r7, r3
   2a8f0:	2200      	movs	r2, #0
   2a8f2:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   2a8f4:	68fb      	ldr	r3, [r7, #12]
   2a8f6:	68ba      	ldr	r2, [r7, #8]
   2a8f8:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2a8fa:	68fb      	ldr	r3, [r7, #12]
   2a8fc:	681b      	ldr	r3, [r3, #0]
   2a8fe:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2a900:	68fb      	ldr	r3, [r7, #12]
   2a902:	681b      	ldr	r3, [r3, #0]
   2a904:	0018      	movs	r0, r3
   2a906:	4b86      	ldr	r3, [pc, #536]	; (2ab20 <usart_init+0x240>)
   2a908:	4798      	blx	r3
   2a90a:	0003      	movs	r3, r0
   2a90c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2a90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a910:	3302      	adds	r3, #2
   2a912:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2a914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a916:	3314      	adds	r3, #20
   2a918:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   2a91a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a91c:	681b      	ldr	r3, [r3, #0]
   2a91e:	2201      	movs	r2, #1
   2a920:	4013      	ands	r3, r2
   2a922:	d001      	beq.n	2a928 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   2a924:	2305      	movs	r3, #5
   2a926:	e0f6      	b.n	2ab16 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   2a928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a92a:	681b      	ldr	r3, [r3, #0]
   2a92c:	2202      	movs	r2, #2
   2a92e:	4013      	ands	r3, r2
   2a930:	d001      	beq.n	2a936 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   2a932:	231c      	movs	r3, #28
   2a934:	e0ef      	b.n	2ab16 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2a936:	2201      	movs	r2, #1
   2a938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a93a:	409a      	lsls	r2, r3
   2a93c:	0013      	movs	r3, r2
   2a93e:	0019      	movs	r1, r3
   2a940:	2002      	movs	r0, #2
   2a942:	4b78      	ldr	r3, [pc, #480]	; (2ab24 <usart_init+0x244>)
   2a944:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2a946:	2324      	movs	r3, #36	; 0x24
   2a948:	18fb      	adds	r3, r7, r3
   2a94a:	0018      	movs	r0, r3
   2a94c:	4b76      	ldr	r3, [pc, #472]	; (2ab28 <usart_init+0x248>)
   2a94e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   2a950:	687b      	ldr	r3, [r7, #4]
   2a952:	222d      	movs	r2, #45	; 0x2d
   2a954:	5c9a      	ldrb	r2, [r3, r2]
   2a956:	2324      	movs	r3, #36	; 0x24
   2a958:	18fb      	adds	r3, r7, r3
   2a95a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   2a95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a95e:	b2db      	uxtb	r3, r3
   2a960:	2224      	movs	r2, #36	; 0x24
   2a962:	18ba      	adds	r2, r7, r2
   2a964:	0011      	movs	r1, r2
   2a966:	0018      	movs	r0, r3
   2a968:	4b70      	ldr	r3, [pc, #448]	; (2ab2c <usart_init+0x24c>)
   2a96a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   2a96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a96e:	b2db      	uxtb	r3, r3
   2a970:	0018      	movs	r0, r3
   2a972:	4b6f      	ldr	r3, [pc, #444]	; (2ab30 <usart_init+0x250>)
   2a974:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   2a976:	687b      	ldr	r3, [r7, #4]
   2a978:	222d      	movs	r2, #45	; 0x2d
   2a97a:	5c9b      	ldrb	r3, [r3, r2]
   2a97c:	2100      	movs	r1, #0
   2a97e:	0018      	movs	r0, r3
   2a980:	4b6c      	ldr	r3, [pc, #432]	; (2ab34 <usart_init+0x254>)
   2a982:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   2a984:	687b      	ldr	r3, [r7, #4]
   2a986:	7ada      	ldrb	r2, [r3, #11]
   2a988:	68fb      	ldr	r3, [r7, #12]
   2a98a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   2a98c:	687b      	ldr	r3, [r7, #4]
   2a98e:	2224      	movs	r2, #36	; 0x24
   2a990:	5c9a      	ldrb	r2, [r3, r2]
   2a992:	68fb      	ldr	r3, [r7, #12]
   2a994:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   2a996:	687b      	ldr	r3, [r7, #4]
   2a998:	2225      	movs	r2, #37	; 0x25
   2a99a:	5c9a      	ldrb	r2, [r3, r2]
   2a99c:	68fb      	ldr	r3, [r7, #12]
   2a99e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   2a9a0:	687b      	ldr	r3, [r7, #4]
   2a9a2:	7eda      	ldrb	r2, [r3, #27]
   2a9a4:	68fb      	ldr	r3, [r7, #12]
   2a9a6:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   2a9a8:	687b      	ldr	r3, [r7, #4]
   2a9aa:	7f1a      	ldrb	r2, [r3, #28]
   2a9ac:	68fb      	ldr	r3, [r7, #12]
   2a9ae:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   2a9b0:	233b      	movs	r3, #59	; 0x3b
   2a9b2:	18fc      	adds	r4, r7, r3
   2a9b4:	687a      	ldr	r2, [r7, #4]
   2a9b6:	68fb      	ldr	r3, [r7, #12]
   2a9b8:	0011      	movs	r1, r2
   2a9ba:	0018      	movs	r0, r3
   2a9bc:	4b5e      	ldr	r3, [pc, #376]	; (2ab38 <usart_init+0x258>)
   2a9be:	4798      	blx	r3
   2a9c0:	0003      	movs	r3, r0
   2a9c2:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   2a9c4:	233b      	movs	r3, #59	; 0x3b
   2a9c6:	18fb      	adds	r3, r7, r3
   2a9c8:	781b      	ldrb	r3, [r3, #0]
   2a9ca:	2b00      	cmp	r3, #0
   2a9cc:	d003      	beq.n	2a9d6 <usart_init+0xf6>
		return status_code;
   2a9ce:	233b      	movs	r3, #59	; 0x3b
   2a9d0:	18fb      	adds	r3, r7, r3
   2a9d2:	781b      	ldrb	r3, [r3, #0]
   2a9d4:	e09f      	b.n	2ab16 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   2a9d6:	2320      	movs	r3, #32
   2a9d8:	18fb      	adds	r3, r7, r3
   2a9da:	0018      	movs	r0, r3
   2a9dc:	4b57      	ldr	r3, [pc, #348]	; (2ab3c <usart_init+0x25c>)
   2a9de:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2a9e0:	2320      	movs	r3, #32
   2a9e2:	18fb      	adds	r3, r7, r3
   2a9e4:	2200      	movs	r2, #0
   2a9e6:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   2a9e8:	2320      	movs	r3, #32
   2a9ea:	18fb      	adds	r3, r7, r3
   2a9ec:	2200      	movs	r2, #0
   2a9ee:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   2a9f0:	687b      	ldr	r3, [r7, #4]
   2a9f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   2a9f4:	2310      	movs	r3, #16
   2a9f6:	18fb      	adds	r3, r7, r3
   2a9f8:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2a9fa:	687b      	ldr	r3, [r7, #4]
   2a9fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2a9fe:	2310      	movs	r3, #16
   2aa00:	18fb      	adds	r3, r7, r3
   2aa02:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   2aa04:	687b      	ldr	r3, [r7, #4]
   2aa06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   2aa08:	2310      	movs	r3, #16
   2aa0a:	18fb      	adds	r3, r7, r3
   2aa0c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2aa0e:	687b      	ldr	r3, [r7, #4]
   2aa10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   2aa12:	2310      	movs	r3, #16
   2aa14:	18fb      	adds	r3, r7, r3
   2aa16:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   2aa18:	2347      	movs	r3, #71	; 0x47
   2aa1a:	18fb      	adds	r3, r7, r3
   2aa1c:	2200      	movs	r2, #0
   2aa1e:	701a      	strb	r2, [r3, #0]
   2aa20:	e02c      	b.n	2aa7c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   2aa22:	2347      	movs	r3, #71	; 0x47
   2aa24:	18fb      	adds	r3, r7, r3
   2aa26:	781a      	ldrb	r2, [r3, #0]
   2aa28:	2310      	movs	r3, #16
   2aa2a:	18fb      	adds	r3, r7, r3
   2aa2c:	0092      	lsls	r2, r2, #2
   2aa2e:	58d3      	ldr	r3, [r2, r3]
   2aa30:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   2aa32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2aa34:	2b00      	cmp	r3, #0
   2aa36:	d109      	bne.n	2aa4c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2aa38:	2347      	movs	r3, #71	; 0x47
   2aa3a:	18fb      	adds	r3, r7, r3
   2aa3c:	781a      	ldrb	r2, [r3, #0]
   2aa3e:	68bb      	ldr	r3, [r7, #8]
   2aa40:	0011      	movs	r1, r2
   2aa42:	0018      	movs	r0, r3
   2aa44:	4b3e      	ldr	r3, [pc, #248]	; (2ab40 <usart_init+0x260>)
   2aa46:	4798      	blx	r3
   2aa48:	0003      	movs	r3, r0
   2aa4a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   2aa4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2aa4e:	3301      	adds	r3, #1
   2aa50:	d00d      	beq.n	2aa6e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   2aa52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2aa54:	b2da      	uxtb	r2, r3
   2aa56:	2320      	movs	r3, #32
   2aa58:	18fb      	adds	r3, r7, r3
   2aa5a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   2aa5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2aa5e:	0c1b      	lsrs	r3, r3, #16
   2aa60:	b2db      	uxtb	r3, r3
   2aa62:	2220      	movs	r2, #32
   2aa64:	18ba      	adds	r2, r7, r2
   2aa66:	0011      	movs	r1, r2
   2aa68:	0018      	movs	r0, r3
   2aa6a:	4b36      	ldr	r3, [pc, #216]	; (2ab44 <usart_init+0x264>)
   2aa6c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   2aa6e:	2347      	movs	r3, #71	; 0x47
   2aa70:	18fb      	adds	r3, r7, r3
   2aa72:	781a      	ldrb	r2, [r3, #0]
   2aa74:	2347      	movs	r3, #71	; 0x47
   2aa76:	18fb      	adds	r3, r7, r3
   2aa78:	3201      	adds	r2, #1
   2aa7a:	701a      	strb	r2, [r3, #0]
   2aa7c:	2347      	movs	r3, #71	; 0x47
   2aa7e:	18fb      	adds	r3, r7, r3
   2aa80:	781b      	ldrb	r3, [r3, #0]
   2aa82:	2b03      	cmp	r3, #3
   2aa84:	d9cd      	bls.n	2aa22 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   2aa86:	2300      	movs	r3, #0
   2aa88:	63fb      	str	r3, [r7, #60]	; 0x3c
   2aa8a:	e00a      	b.n	2aaa2 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   2aa8c:	68fa      	ldr	r2, [r7, #12]
   2aa8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aa90:	3302      	adds	r3, #2
   2aa92:	009b      	lsls	r3, r3, #2
   2aa94:	18d3      	adds	r3, r2, r3
   2aa96:	3304      	adds	r3, #4
   2aa98:	2200      	movs	r2, #0
   2aa9a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   2aa9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aa9e:	3301      	adds	r3, #1
   2aaa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   2aaa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aaa4:	2b05      	cmp	r3, #5
   2aaa6:	d9f1      	bls.n	2aa8c <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   2aaa8:	68fb      	ldr	r3, [r7, #12]
   2aaaa:	2200      	movs	r2, #0
   2aaac:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   2aaae:	68fb      	ldr	r3, [r7, #12]
   2aab0:	2200      	movs	r2, #0
   2aab2:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   2aab4:	68fb      	ldr	r3, [r7, #12]
   2aab6:	2200      	movs	r2, #0
   2aab8:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   2aaba:	68fb      	ldr	r3, [r7, #12]
   2aabc:	2200      	movs	r2, #0
   2aabe:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   2aac0:	68fb      	ldr	r3, [r7, #12]
   2aac2:	2230      	movs	r2, #48	; 0x30
   2aac4:	2100      	movs	r1, #0
   2aac6:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   2aac8:	68fb      	ldr	r3, [r7, #12]
   2aaca:	2231      	movs	r2, #49	; 0x31
   2aacc:	2100      	movs	r1, #0
   2aace:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   2aad0:	68fb      	ldr	r3, [r7, #12]
   2aad2:	2232      	movs	r2, #50	; 0x32
   2aad4:	2100      	movs	r1, #0
   2aad6:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   2aad8:	68fb      	ldr	r3, [r7, #12]
   2aada:	2233      	movs	r2, #51	; 0x33
   2aadc:	2100      	movs	r1, #0
   2aade:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   2aae0:	68fb      	ldr	r3, [r7, #12]
   2aae2:	681b      	ldr	r3, [r3, #0]
   2aae4:	2227      	movs	r2, #39	; 0x27
   2aae6:	18bc      	adds	r4, r7, r2
   2aae8:	0018      	movs	r0, r3
   2aaea:	4b0d      	ldr	r3, [pc, #52]	; (2ab20 <usart_init+0x240>)
   2aaec:	4798      	blx	r3
   2aaee:	0003      	movs	r3, r0
   2aaf0:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   2aaf2:	4a15      	ldr	r2, [pc, #84]	; (2ab48 <usart_init+0x268>)
   2aaf4:	2327      	movs	r3, #39	; 0x27
   2aaf6:	18fb      	adds	r3, r7, r3
   2aaf8:	781b      	ldrb	r3, [r3, #0]
   2aafa:	0011      	movs	r1, r2
   2aafc:	0018      	movs	r0, r3
   2aafe:	4b13      	ldr	r3, [pc, #76]	; (2ab4c <usart_init+0x26c>)
   2ab00:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   2ab02:	2327      	movs	r3, #39	; 0x27
   2ab04:	18fb      	adds	r3, r7, r3
   2ab06:	781a      	ldrb	r2, [r3, #0]
   2ab08:	4b11      	ldr	r3, [pc, #68]	; (2ab50 <usart_init+0x270>)
   2ab0a:	0092      	lsls	r2, r2, #2
   2ab0c:	68f9      	ldr	r1, [r7, #12]
   2ab0e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   2ab10:	233b      	movs	r3, #59	; 0x3b
   2ab12:	18fb      	adds	r3, r7, r3
   2ab14:	781b      	ldrb	r3, [r3, #0]
}
   2ab16:	0018      	movs	r0, r3
   2ab18:	46bd      	mov	sp, r7
   2ab1a:	b013      	add	sp, #76	; 0x4c
   2ab1c:	bd90      	pop	{r4, r7, pc}
   2ab1e:	46c0      	nop			; (mov r8, r8)
   2ab20:	00029351 	.word	0x00029351
   2ab24:	0002a51d 	.word	0x0002a51d
   2ab28:	0002a505 	.word	0x0002a505
   2ab2c:	0002bc3d 	.word	0x0002bc3d
   2ab30:	0002bc81 	.word	0x0002bc81
   2ab34:	00029109 	.word	0x00029109
   2ab38:	0002a605 	.word	0x0002a605
   2ab3c:	0002a579 	.word	0x0002a579
   2ab40:	00029195 	.word	0x00029195
   2ab44:	0002bf9d 	.word	0x0002bf9d
   2ab48:	0002adbd 	.word	0x0002adbd
   2ab4c:	000293b5 	.word	0x000293b5
   2ab50:	20005834 	.word	0x20005834

0002ab54 <system_interrupt_enter_critical_section>:
{
   2ab54:	b580      	push	{r7, lr}
   2ab56:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2ab58:	4b02      	ldr	r3, [pc, #8]	; (2ab64 <system_interrupt_enter_critical_section+0x10>)
   2ab5a:	4798      	blx	r3
}
   2ab5c:	46c0      	nop			; (mov r8, r8)
   2ab5e:	46bd      	mov	sp, r7
   2ab60:	bd80      	pop	{r7, pc}
   2ab62:	46c0      	nop			; (mov r8, r8)
   2ab64:	00027f4d 	.word	0x00027f4d

0002ab68 <system_interrupt_leave_critical_section>:
{
   2ab68:	b580      	push	{r7, lr}
   2ab6a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2ab6c:	4b02      	ldr	r3, [pc, #8]	; (2ab78 <system_interrupt_leave_critical_section+0x10>)
   2ab6e:	4798      	blx	r3
}
   2ab70:	46c0      	nop			; (mov r8, r8)
   2ab72:	46bd      	mov	sp, r7
   2ab74:	bd80      	pop	{r7, pc}
   2ab76:	46c0      	nop			; (mov r8, r8)
   2ab78:	00027fa1 	.word	0x00027fa1

0002ab7c <usart_is_syncing>:
{
   2ab7c:	b580      	push	{r7, lr}
   2ab7e:	b084      	sub	sp, #16
   2ab80:	af00      	add	r7, sp, #0
   2ab82:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   2ab84:	687b      	ldr	r3, [r7, #4]
   2ab86:	681b      	ldr	r3, [r3, #0]
   2ab88:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   2ab8a:	68fb      	ldr	r3, [r7, #12]
   2ab8c:	69db      	ldr	r3, [r3, #28]
   2ab8e:	1e5a      	subs	r2, r3, #1
   2ab90:	4193      	sbcs	r3, r2
   2ab92:	b2db      	uxtb	r3, r3
}
   2ab94:	0018      	movs	r0, r3
   2ab96:	46bd      	mov	sp, r7
   2ab98:	b004      	add	sp, #16
   2ab9a:	bd80      	pop	{r7, pc}

0002ab9c <_usart_wait_for_sync>:
{
   2ab9c:	b580      	push	{r7, lr}
   2ab9e:	b082      	sub	sp, #8
   2aba0:	af00      	add	r7, sp, #0
   2aba2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   2aba4:	46c0      	nop			; (mov r8, r8)
   2aba6:	687b      	ldr	r3, [r7, #4]
   2aba8:	0018      	movs	r0, r3
   2abaa:	4b04      	ldr	r3, [pc, #16]	; (2abbc <_usart_wait_for_sync+0x20>)
   2abac:	4798      	blx	r3
   2abae:	1e03      	subs	r3, r0, #0
   2abb0:	d1f9      	bne.n	2aba6 <_usart_wait_for_sync+0xa>
}
   2abb2:	46c0      	nop			; (mov r8, r8)
   2abb4:	46bd      	mov	sp, r7
   2abb6:	b002      	add	sp, #8
   2abb8:	bd80      	pop	{r7, pc}
   2abba:	46c0      	nop			; (mov r8, r8)
   2abbc:	0002ab7d 	.word	0x0002ab7d

0002abc0 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   2abc0:	b580      	push	{r7, lr}
   2abc2:	b086      	sub	sp, #24
   2abc4:	af00      	add	r7, sp, #0
   2abc6:	60f8      	str	r0, [r7, #12]
   2abc8:	60b9      	str	r1, [r7, #8]
   2abca:	1dbb      	adds	r3, r7, #6
   2abcc:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2abce:	68fb      	ldr	r3, [r7, #12]
   2abd0:	681b      	ldr	r3, [r3, #0]
   2abd2:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   2abd4:	4b0f      	ldr	r3, [pc, #60]	; (2ac14 <_usart_write_buffer+0x54>)
   2abd6:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   2abd8:	68fb      	ldr	r3, [r7, #12]
   2abda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2abdc:	b29b      	uxth	r3, r3
   2abde:	2b00      	cmp	r3, #0
   2abe0:	d003      	beq.n	2abea <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   2abe2:	4b0d      	ldr	r3, [pc, #52]	; (2ac18 <_usart_write_buffer+0x58>)
   2abe4:	4798      	blx	r3
		return STATUS_BUSY;
   2abe6:	2305      	movs	r3, #5
   2abe8:	e010      	b.n	2ac0c <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   2abea:	68fb      	ldr	r3, [r7, #12]
   2abec:	1dba      	adds	r2, r7, #6
   2abee:	8812      	ldrh	r2, [r2, #0]
   2abf0:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   2abf2:	4b09      	ldr	r3, [pc, #36]	; (2ac18 <_usart_write_buffer+0x58>)
   2abf4:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   2abf6:	68fb      	ldr	r3, [r7, #12]
   2abf8:	68ba      	ldr	r2, [r7, #8]
   2abfa:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   2abfc:	68fb      	ldr	r3, [r7, #12]
   2abfe:	2233      	movs	r2, #51	; 0x33
   2ac00:	2105      	movs	r1, #5
   2ac02:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   2ac04:	697b      	ldr	r3, [r7, #20]
   2ac06:	2201      	movs	r2, #1
   2ac08:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   2ac0a:	2300      	movs	r3, #0
}
   2ac0c:	0018      	movs	r0, r3
   2ac0e:	46bd      	mov	sp, r7
   2ac10:	b006      	add	sp, #24
   2ac12:	bd80      	pop	{r7, pc}
   2ac14:	0002ab55 	.word	0x0002ab55
   2ac18:	0002ab69 	.word	0x0002ab69

0002ac1c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   2ac1c:	b580      	push	{r7, lr}
   2ac1e:	b086      	sub	sp, #24
   2ac20:	af00      	add	r7, sp, #0
   2ac22:	60f8      	str	r0, [r7, #12]
   2ac24:	60b9      	str	r1, [r7, #8]
   2ac26:	1dbb      	adds	r3, r7, #6
   2ac28:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2ac2a:	68fb      	ldr	r3, [r7, #12]
   2ac2c:	681b      	ldr	r3, [r3, #0]
   2ac2e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   2ac30:	4b16      	ldr	r3, [pc, #88]	; (2ac8c <_usart_read_buffer+0x70>)
   2ac32:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   2ac34:	68fb      	ldr	r3, [r7, #12]
   2ac36:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2ac38:	b29b      	uxth	r3, r3
   2ac3a:	2b00      	cmp	r3, #0
   2ac3c:	d003      	beq.n	2ac46 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   2ac3e:	4b14      	ldr	r3, [pc, #80]	; (2ac90 <_usart_read_buffer+0x74>)
   2ac40:	4798      	blx	r3
		return STATUS_BUSY;
   2ac42:	2305      	movs	r3, #5
   2ac44:	e01e      	b.n	2ac84 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   2ac46:	68fb      	ldr	r3, [r7, #12]
   2ac48:	1dba      	adds	r2, r7, #6
   2ac4a:	8812      	ldrh	r2, [r2, #0]
   2ac4c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   2ac4e:	4b10      	ldr	r3, [pc, #64]	; (2ac90 <_usart_read_buffer+0x74>)
   2ac50:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   2ac52:	68fb      	ldr	r3, [r7, #12]
   2ac54:	68ba      	ldr	r2, [r7, #8]
   2ac56:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   2ac58:	68fb      	ldr	r3, [r7, #12]
   2ac5a:	2232      	movs	r2, #50	; 0x32
   2ac5c:	2105      	movs	r1, #5
   2ac5e:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   2ac60:	697b      	ldr	r3, [r7, #20]
   2ac62:	2204      	movs	r2, #4
   2ac64:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   2ac66:	68fb      	ldr	r3, [r7, #12]
   2ac68:	7a1b      	ldrb	r3, [r3, #8]
   2ac6a:	2b00      	cmp	r3, #0
   2ac6c:	d002      	beq.n	2ac74 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   2ac6e:	697b      	ldr	r3, [r7, #20]
   2ac70:	2220      	movs	r2, #32
   2ac72:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   2ac74:	68fb      	ldr	r3, [r7, #12]
   2ac76:	7a5b      	ldrb	r3, [r3, #9]
   2ac78:	2b00      	cmp	r3, #0
   2ac7a:	d002      	beq.n	2ac82 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   2ac7c:	697b      	ldr	r3, [r7, #20]
   2ac7e:	2208      	movs	r2, #8
   2ac80:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   2ac82:	2300      	movs	r3, #0
}
   2ac84:	0018      	movs	r0, r3
   2ac86:	46bd      	mov	sp, r7
   2ac88:	b006      	add	sp, #24
   2ac8a:	bd80      	pop	{r7, pc}
   2ac8c:	0002ab55 	.word	0x0002ab55
   2ac90:	0002ab69 	.word	0x0002ab69

0002ac94 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   2ac94:	b580      	push	{r7, lr}
   2ac96:	b084      	sub	sp, #16
   2ac98:	af00      	add	r7, sp, #0
   2ac9a:	60f8      	str	r0, [r7, #12]
   2ac9c:	60b9      	str	r1, [r7, #8]
   2ac9e:	1dfb      	adds	r3, r7, #7
   2aca0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2aca2:	1dfb      	adds	r3, r7, #7
   2aca4:	781b      	ldrb	r3, [r3, #0]
   2aca6:	68fa      	ldr	r2, [r7, #12]
   2aca8:	3302      	adds	r3, #2
   2acaa:	009b      	lsls	r3, r3, #2
   2acac:	18d3      	adds	r3, r2, r3
   2acae:	3304      	adds	r3, #4
   2acb0:	68ba      	ldr	r2, [r7, #8]
   2acb2:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   2acb4:	68fb      	ldr	r3, [r7, #12]
   2acb6:	2230      	movs	r2, #48	; 0x30
   2acb8:	5c9b      	ldrb	r3, [r3, r2]
   2acba:	b25a      	sxtb	r2, r3
   2acbc:	1dfb      	adds	r3, r7, #7
   2acbe:	781b      	ldrb	r3, [r3, #0]
   2acc0:	2101      	movs	r1, #1
   2acc2:	4099      	lsls	r1, r3
   2acc4:	000b      	movs	r3, r1
   2acc6:	b25b      	sxtb	r3, r3
   2acc8:	4313      	orrs	r3, r2
   2acca:	b25b      	sxtb	r3, r3
   2accc:	b2d9      	uxtb	r1, r3
   2acce:	68fb      	ldr	r3, [r7, #12]
   2acd0:	2230      	movs	r2, #48	; 0x30
   2acd2:	5499      	strb	r1, [r3, r2]
}
   2acd4:	46c0      	nop			; (mov r8, r8)
   2acd6:	46bd      	mov	sp, r7
   2acd8:	b004      	add	sp, #16
   2acda:	bd80      	pop	{r7, pc}

0002acdc <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   2acdc:	b580      	push	{r7, lr}
   2acde:	b084      	sub	sp, #16
   2ace0:	af00      	add	r7, sp, #0
   2ace2:	60f8      	str	r0, [r7, #12]
   2ace4:	60b9      	str	r1, [r7, #8]
   2ace6:	1dbb      	adds	r3, r7, #6
   2ace8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   2acea:	1dbb      	adds	r3, r7, #6
   2acec:	881b      	ldrh	r3, [r3, #0]
   2acee:	2b00      	cmp	r3, #0
   2acf0:	d101      	bne.n	2acf6 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   2acf2:	2317      	movs	r3, #23
   2acf4:	e010      	b.n	2ad18 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   2acf6:	68fb      	ldr	r3, [r7, #12]
   2acf8:	79db      	ldrb	r3, [r3, #7]
   2acfa:	2201      	movs	r2, #1
   2acfc:	4053      	eors	r3, r2
   2acfe:	b2db      	uxtb	r3, r3
   2ad00:	2b00      	cmp	r3, #0
   2ad02:	d001      	beq.n	2ad08 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   2ad04:	231c      	movs	r3, #28
   2ad06:	e007      	b.n	2ad18 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   2ad08:	1dbb      	adds	r3, r7, #6
   2ad0a:	881a      	ldrh	r2, [r3, #0]
   2ad0c:	68b9      	ldr	r1, [r7, #8]
   2ad0e:	68fb      	ldr	r3, [r7, #12]
   2ad10:	0018      	movs	r0, r3
   2ad12:	4b03      	ldr	r3, [pc, #12]	; (2ad20 <usart_write_buffer_job+0x44>)
   2ad14:	4798      	blx	r3
   2ad16:	0003      	movs	r3, r0
}
   2ad18:	0018      	movs	r0, r3
   2ad1a:	46bd      	mov	sp, r7
   2ad1c:	b004      	add	sp, #16
   2ad1e:	bd80      	pop	{r7, pc}
   2ad20:	0002abc1 	.word	0x0002abc1

0002ad24 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   2ad24:	b580      	push	{r7, lr}
   2ad26:	b084      	sub	sp, #16
   2ad28:	af00      	add	r7, sp, #0
   2ad2a:	60f8      	str	r0, [r7, #12]
   2ad2c:	60b9      	str	r1, [r7, #8]
   2ad2e:	1dbb      	adds	r3, r7, #6
   2ad30:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   2ad32:	1dbb      	adds	r3, r7, #6
   2ad34:	881b      	ldrh	r3, [r3, #0]
   2ad36:	2b00      	cmp	r3, #0
   2ad38:	d101      	bne.n	2ad3e <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   2ad3a:	2317      	movs	r3, #23
   2ad3c:	e010      	b.n	2ad60 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   2ad3e:	68fb      	ldr	r3, [r7, #12]
   2ad40:	799b      	ldrb	r3, [r3, #6]
   2ad42:	2201      	movs	r2, #1
   2ad44:	4053      	eors	r3, r2
   2ad46:	b2db      	uxtb	r3, r3
   2ad48:	2b00      	cmp	r3, #0
   2ad4a:	d001      	beq.n	2ad50 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   2ad4c:	231c      	movs	r3, #28
   2ad4e:	e007      	b.n	2ad60 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   2ad50:	1dbb      	adds	r3, r7, #6
   2ad52:	881a      	ldrh	r2, [r3, #0]
   2ad54:	68b9      	ldr	r1, [r7, #8]
   2ad56:	68fb      	ldr	r3, [r7, #12]
   2ad58:	0018      	movs	r0, r3
   2ad5a:	4b03      	ldr	r3, [pc, #12]	; (2ad68 <usart_read_buffer_job+0x44>)
   2ad5c:	4798      	blx	r3
   2ad5e:	0003      	movs	r3, r0
}
   2ad60:	0018      	movs	r0, r3
   2ad62:	46bd      	mov	sp, r7
   2ad64:	b004      	add	sp, #16
   2ad66:	bd80      	pop	{r7, pc}
   2ad68:	0002ac1d 	.word	0x0002ac1d

0002ad6c <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   2ad6c:	b580      	push	{r7, lr}
   2ad6e:	b084      	sub	sp, #16
   2ad70:	af00      	add	r7, sp, #0
   2ad72:	6078      	str	r0, [r7, #4]
   2ad74:	000a      	movs	r2, r1
   2ad76:	1cfb      	adds	r3, r7, #3
   2ad78:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   2ad7a:	1cfb      	adds	r3, r7, #3
   2ad7c:	781b      	ldrb	r3, [r3, #0]
   2ad7e:	2b00      	cmp	r3, #0
   2ad80:	d002      	beq.n	2ad88 <usart_get_job_status+0x1c>
   2ad82:	2b01      	cmp	r3, #1
   2ad84:	d007      	beq.n	2ad96 <usart_get_job_status+0x2a>
   2ad86:	e00d      	b.n	2ada4 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   2ad88:	230f      	movs	r3, #15
   2ad8a:	18fb      	adds	r3, r7, r3
   2ad8c:	687a      	ldr	r2, [r7, #4]
   2ad8e:	2132      	movs	r1, #50	; 0x32
   2ad90:	5c52      	ldrb	r2, [r2, r1]
   2ad92:	701a      	strb	r2, [r3, #0]
			break;
   2ad94:	e00b      	b.n	2adae <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   2ad96:	230f      	movs	r3, #15
   2ad98:	18fb      	adds	r3, r7, r3
   2ad9a:	687a      	ldr	r2, [r7, #4]
   2ad9c:	2133      	movs	r1, #51	; 0x33
   2ad9e:	5c52      	ldrb	r2, [r2, r1]
   2ada0:	701a      	strb	r2, [r3, #0]
			break;
   2ada2:	e004      	b.n	2adae <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   2ada4:	230f      	movs	r3, #15
   2ada6:	18fb      	adds	r3, r7, r3
   2ada8:	2217      	movs	r2, #23
   2adaa:	701a      	strb	r2, [r3, #0]
			break;
   2adac:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   2adae:	230f      	movs	r3, #15
   2adb0:	18fb      	adds	r3, r7, r3
   2adb2:	781b      	ldrb	r3, [r3, #0]
}
   2adb4:	0018      	movs	r0, r3
   2adb6:	46bd      	mov	sp, r7
   2adb8:	b004      	add	sp, #16
   2adba:	bd80      	pop	{r7, pc}

0002adbc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   2adbc:	b580      	push	{r7, lr}
   2adbe:	b088      	sub	sp, #32
   2adc0:	af00      	add	r7, sp, #0
   2adc2:	0002      	movs	r2, r0
   2adc4:	1dfb      	adds	r3, r7, #7
   2adc6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   2adc8:	1dfb      	adds	r3, r7, #7
   2adca:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   2adcc:	4ba3      	ldr	r3, [pc, #652]	; (2b05c <_usart_interrupt_handler+0x2a0>)
   2adce:	0092      	lsls	r2, r2, #2
   2add0:	58d3      	ldr	r3, [r2, r3]
   2add2:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   2add4:	69bb      	ldr	r3, [r7, #24]
   2add6:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   2add8:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   2adda:	69bb      	ldr	r3, [r7, #24]
   2addc:	0018      	movs	r0, r3
   2adde:	4ba0      	ldr	r3, [pc, #640]	; (2b060 <_usart_interrupt_handler+0x2a4>)
   2ade0:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   2ade2:	697b      	ldr	r3, [r7, #20]
   2ade4:	7e1b      	ldrb	r3, [r3, #24]
   2ade6:	b2da      	uxtb	r2, r3
   2ade8:	2312      	movs	r3, #18
   2adea:	18fb      	adds	r3, r7, r3
   2adec:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   2adee:	697b      	ldr	r3, [r7, #20]
   2adf0:	7d9b      	ldrb	r3, [r3, #22]
   2adf2:	b2db      	uxtb	r3, r3
   2adf4:	b29a      	uxth	r2, r3
   2adf6:	2312      	movs	r3, #18
   2adf8:	18fb      	adds	r3, r7, r3
   2adfa:	2112      	movs	r1, #18
   2adfc:	1879      	adds	r1, r7, r1
   2adfe:	8809      	ldrh	r1, [r1, #0]
   2ae00:	400a      	ands	r2, r1
   2ae02:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   2ae04:	69bb      	ldr	r3, [r7, #24]
   2ae06:	2230      	movs	r2, #48	; 0x30
   2ae08:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   2ae0a:	69ba      	ldr	r2, [r7, #24]
   2ae0c:	2131      	movs	r1, #49	; 0x31
   2ae0e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   2ae10:	4013      	ands	r3, r2
   2ae12:	b2da      	uxtb	r2, r3
   2ae14:	2310      	movs	r3, #16
   2ae16:	18fb      	adds	r3, r7, r3
   2ae18:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   2ae1a:	2312      	movs	r3, #18
   2ae1c:	18fb      	adds	r3, r7, r3
   2ae1e:	881b      	ldrh	r3, [r3, #0]
   2ae20:	2201      	movs	r2, #1
   2ae22:	4013      	ands	r3, r2
   2ae24:	d044      	beq.n	2aeb0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   2ae26:	69bb      	ldr	r3, [r7, #24]
   2ae28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2ae2a:	b29b      	uxth	r3, r3
   2ae2c:	2b00      	cmp	r3, #0
   2ae2e:	d03c      	beq.n	2aeaa <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   2ae30:	69bb      	ldr	r3, [r7, #24]
   2ae32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2ae34:	781b      	ldrb	r3, [r3, #0]
   2ae36:	b2da      	uxtb	r2, r3
   2ae38:	231c      	movs	r3, #28
   2ae3a:	18fb      	adds	r3, r7, r3
   2ae3c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   2ae3e:	69bb      	ldr	r3, [r7, #24]
   2ae40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2ae42:	1c5a      	adds	r2, r3, #1
   2ae44:	69bb      	ldr	r3, [r7, #24]
   2ae46:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2ae48:	69bb      	ldr	r3, [r7, #24]
   2ae4a:	795b      	ldrb	r3, [r3, #5]
   2ae4c:	2b01      	cmp	r3, #1
   2ae4e:	d113      	bne.n	2ae78 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   2ae50:	69bb      	ldr	r3, [r7, #24]
   2ae52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2ae54:	781b      	ldrb	r3, [r3, #0]
   2ae56:	b2db      	uxtb	r3, r3
   2ae58:	021b      	lsls	r3, r3, #8
   2ae5a:	b21a      	sxth	r2, r3
   2ae5c:	231c      	movs	r3, #28
   2ae5e:	18fb      	adds	r3, r7, r3
   2ae60:	2100      	movs	r1, #0
   2ae62:	5e5b      	ldrsh	r3, [r3, r1]
   2ae64:	4313      	orrs	r3, r2
   2ae66:	b21a      	sxth	r2, r3
   2ae68:	231c      	movs	r3, #28
   2ae6a:	18fb      	adds	r3, r7, r3
   2ae6c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   2ae6e:	69bb      	ldr	r3, [r7, #24]
   2ae70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2ae72:	1c5a      	adds	r2, r3, #1
   2ae74:	69bb      	ldr	r3, [r7, #24]
   2ae76:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   2ae78:	231c      	movs	r3, #28
   2ae7a:	18fb      	adds	r3, r7, r3
   2ae7c:	881b      	ldrh	r3, [r3, #0]
   2ae7e:	05db      	lsls	r3, r3, #23
   2ae80:	0ddb      	lsrs	r3, r3, #23
   2ae82:	b29a      	uxth	r2, r3
   2ae84:	697b      	ldr	r3, [r7, #20]
   2ae86:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   2ae88:	69bb      	ldr	r3, [r7, #24]
   2ae8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2ae8c:	b29b      	uxth	r3, r3
   2ae8e:	3b01      	subs	r3, #1
   2ae90:	b29b      	uxth	r3, r3
   2ae92:	69ba      	ldr	r2, [r7, #24]
   2ae94:	1c19      	adds	r1, r3, #0
   2ae96:	85d1      	strh	r1, [r2, #46]	; 0x2e
   2ae98:	2b00      	cmp	r3, #0
   2ae9a:	d109      	bne.n	2aeb0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2ae9c:	697b      	ldr	r3, [r7, #20]
   2ae9e:	2201      	movs	r2, #1
   2aea0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   2aea2:	697b      	ldr	r3, [r7, #20]
   2aea4:	2202      	movs	r2, #2
   2aea6:	759a      	strb	r2, [r3, #22]
   2aea8:	e002      	b.n	2aeb0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2aeaa:	697b      	ldr	r3, [r7, #20]
   2aeac:	2201      	movs	r2, #1
   2aeae:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   2aeb0:	2312      	movs	r3, #18
   2aeb2:	18fb      	adds	r3, r7, r3
   2aeb4:	881b      	ldrh	r3, [r3, #0]
   2aeb6:	2202      	movs	r2, #2
   2aeb8:	4013      	ands	r3, r2
   2aeba:	d011      	beq.n	2aee0 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   2aebc:	697b      	ldr	r3, [r7, #20]
   2aebe:	2202      	movs	r2, #2
   2aec0:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   2aec2:	69bb      	ldr	r3, [r7, #24]
   2aec4:	2233      	movs	r2, #51	; 0x33
   2aec6:	2100      	movs	r1, #0
   2aec8:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   2aeca:	2310      	movs	r3, #16
   2aecc:	18fb      	adds	r3, r7, r3
   2aece:	881b      	ldrh	r3, [r3, #0]
   2aed0:	2201      	movs	r2, #1
   2aed2:	4013      	ands	r3, r2
   2aed4:	d004      	beq.n	2aee0 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   2aed6:	69bb      	ldr	r3, [r7, #24]
   2aed8:	68db      	ldr	r3, [r3, #12]
   2aeda:	69ba      	ldr	r2, [r7, #24]
   2aedc:	0010      	movs	r0, r2
   2aede:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   2aee0:	2312      	movs	r3, #18
   2aee2:	18fb      	adds	r3, r7, r3
   2aee4:	881b      	ldrh	r3, [r3, #0]
   2aee6:	2204      	movs	r2, #4
   2aee8:	4013      	ands	r3, r2
   2aeea:	d100      	bne.n	2aeee <_usart_interrupt_handler+0x132>
   2aeec:	e0bd      	b.n	2b06a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   2aeee:	69bb      	ldr	r3, [r7, #24]
   2aef0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2aef2:	b29b      	uxth	r3, r3
   2aef4:	2b00      	cmp	r3, #0
   2aef6:	d100      	bne.n	2aefa <_usart_interrupt_handler+0x13e>
   2aef8:	e0b4      	b.n	2b064 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   2aefa:	697b      	ldr	r3, [r7, #20]
   2aefc:	8b5b      	ldrh	r3, [r3, #26]
   2aefe:	b29b      	uxth	r3, r3
   2af00:	b2da      	uxtb	r2, r3
   2af02:	231f      	movs	r3, #31
   2af04:	18fb      	adds	r3, r7, r3
   2af06:	213f      	movs	r1, #63	; 0x3f
   2af08:	400a      	ands	r2, r1
   2af0a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   2af0c:	231f      	movs	r3, #31
   2af0e:	18fb      	adds	r3, r7, r3
   2af10:	781b      	ldrb	r3, [r3, #0]
   2af12:	2208      	movs	r2, #8
   2af14:	4013      	ands	r3, r2
   2af16:	d007      	beq.n	2af28 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   2af18:	231f      	movs	r3, #31
   2af1a:	18fb      	adds	r3, r7, r3
   2af1c:	221f      	movs	r2, #31
   2af1e:	18ba      	adds	r2, r7, r2
   2af20:	7812      	ldrb	r2, [r2, #0]
   2af22:	2108      	movs	r1, #8
   2af24:	438a      	bics	r2, r1
   2af26:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   2af28:	231f      	movs	r3, #31
   2af2a:	18fb      	adds	r3, r7, r3
   2af2c:	781b      	ldrb	r3, [r3, #0]
   2af2e:	2b00      	cmp	r3, #0
   2af30:	d050      	beq.n	2afd4 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   2af32:	231f      	movs	r3, #31
   2af34:	18fb      	adds	r3, r7, r3
   2af36:	781b      	ldrb	r3, [r3, #0]
   2af38:	2202      	movs	r2, #2
   2af3a:	4013      	ands	r3, r2
   2af3c:	d007      	beq.n	2af4e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   2af3e:	69bb      	ldr	r3, [r7, #24]
   2af40:	2232      	movs	r2, #50	; 0x32
   2af42:	211a      	movs	r1, #26
   2af44:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   2af46:	697b      	ldr	r3, [r7, #20]
   2af48:	2202      	movs	r2, #2
   2af4a:	835a      	strh	r2, [r3, #26]
   2af4c:	e036      	b.n	2afbc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   2af4e:	231f      	movs	r3, #31
   2af50:	18fb      	adds	r3, r7, r3
   2af52:	781b      	ldrb	r3, [r3, #0]
   2af54:	2204      	movs	r2, #4
   2af56:	4013      	ands	r3, r2
   2af58:	d007      	beq.n	2af6a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   2af5a:	69bb      	ldr	r3, [r7, #24]
   2af5c:	2232      	movs	r2, #50	; 0x32
   2af5e:	211e      	movs	r1, #30
   2af60:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   2af62:	697b      	ldr	r3, [r7, #20]
   2af64:	2204      	movs	r2, #4
   2af66:	835a      	strh	r2, [r3, #26]
   2af68:	e028      	b.n	2afbc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   2af6a:	231f      	movs	r3, #31
   2af6c:	18fb      	adds	r3, r7, r3
   2af6e:	781b      	ldrb	r3, [r3, #0]
   2af70:	2201      	movs	r2, #1
   2af72:	4013      	ands	r3, r2
   2af74:	d007      	beq.n	2af86 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   2af76:	69bb      	ldr	r3, [r7, #24]
   2af78:	2232      	movs	r2, #50	; 0x32
   2af7a:	2113      	movs	r1, #19
   2af7c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   2af7e:	697b      	ldr	r3, [r7, #20]
   2af80:	2201      	movs	r2, #1
   2af82:	835a      	strh	r2, [r3, #26]
   2af84:	e01a      	b.n	2afbc <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   2af86:	231f      	movs	r3, #31
   2af88:	18fb      	adds	r3, r7, r3
   2af8a:	781b      	ldrb	r3, [r3, #0]
   2af8c:	2210      	movs	r2, #16
   2af8e:	4013      	ands	r3, r2
   2af90:	d007      	beq.n	2afa2 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   2af92:	69bb      	ldr	r3, [r7, #24]
   2af94:	2232      	movs	r2, #50	; 0x32
   2af96:	2142      	movs	r1, #66	; 0x42
   2af98:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   2af9a:	697b      	ldr	r3, [r7, #20]
   2af9c:	2210      	movs	r2, #16
   2af9e:	835a      	strh	r2, [r3, #26]
   2afa0:	e00c      	b.n	2afbc <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   2afa2:	231f      	movs	r3, #31
   2afa4:	18fb      	adds	r3, r7, r3
   2afa6:	781b      	ldrb	r3, [r3, #0]
   2afa8:	2220      	movs	r2, #32
   2afaa:	4013      	ands	r3, r2
   2afac:	d006      	beq.n	2afbc <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   2afae:	69bb      	ldr	r3, [r7, #24]
   2afb0:	2232      	movs	r2, #50	; 0x32
   2afb2:	2141      	movs	r1, #65	; 0x41
   2afb4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   2afb6:	697b      	ldr	r3, [r7, #20]
   2afb8:	2220      	movs	r2, #32
   2afba:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   2afbc:	2310      	movs	r3, #16
   2afbe:	18fb      	adds	r3, r7, r3
   2afc0:	881b      	ldrh	r3, [r3, #0]
   2afc2:	2204      	movs	r2, #4
   2afc4:	4013      	ands	r3, r2
				if (callback_status
   2afc6:	d050      	beq.n	2b06a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   2afc8:	69bb      	ldr	r3, [r7, #24]
   2afca:	695b      	ldr	r3, [r3, #20]
   2afcc:	69ba      	ldr	r2, [r7, #24]
   2afce:	0010      	movs	r0, r2
   2afd0:	4798      	blx	r3
   2afd2:	e04a      	b.n	2b06a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   2afd4:	697b      	ldr	r3, [r7, #20]
   2afd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   2afd8:	b29a      	uxth	r2, r3
   2afda:	230e      	movs	r3, #14
   2afdc:	18fb      	adds	r3, r7, r3
   2afde:	05d2      	lsls	r2, r2, #23
   2afe0:	0dd2      	lsrs	r2, r2, #23
   2afe2:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   2afe4:	69bb      	ldr	r3, [r7, #24]
   2afe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2afe8:	220e      	movs	r2, #14
   2afea:	18ba      	adds	r2, r7, r2
   2afec:	8812      	ldrh	r2, [r2, #0]
   2afee:	b2d2      	uxtb	r2, r2
   2aff0:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   2aff2:	69bb      	ldr	r3, [r7, #24]
   2aff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2aff6:	1c5a      	adds	r2, r3, #1
   2aff8:	69bb      	ldr	r3, [r7, #24]
   2affa:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2affc:	69bb      	ldr	r3, [r7, #24]
   2affe:	795b      	ldrb	r3, [r3, #5]
   2b000:	2b01      	cmp	r3, #1
   2b002:	d10d      	bne.n	2b020 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   2b004:	69bb      	ldr	r3, [r7, #24]
   2b006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b008:	220e      	movs	r2, #14
   2b00a:	18ba      	adds	r2, r7, r2
   2b00c:	8812      	ldrh	r2, [r2, #0]
   2b00e:	0a12      	lsrs	r2, r2, #8
   2b010:	b292      	uxth	r2, r2
   2b012:	b2d2      	uxtb	r2, r2
   2b014:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   2b016:	69bb      	ldr	r3, [r7, #24]
   2b018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b01a:	1c5a      	adds	r2, r3, #1
   2b01c:	69bb      	ldr	r3, [r7, #24]
   2b01e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   2b020:	69bb      	ldr	r3, [r7, #24]
   2b022:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2b024:	b29b      	uxth	r3, r3
   2b026:	3b01      	subs	r3, #1
   2b028:	b29b      	uxth	r3, r3
   2b02a:	69ba      	ldr	r2, [r7, #24]
   2b02c:	1c19      	adds	r1, r3, #0
   2b02e:	8591      	strh	r1, [r2, #44]	; 0x2c
   2b030:	2b00      	cmp	r3, #0
   2b032:	d11a      	bne.n	2b06a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   2b034:	697b      	ldr	r3, [r7, #20]
   2b036:	2204      	movs	r2, #4
   2b038:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   2b03a:	69bb      	ldr	r3, [r7, #24]
   2b03c:	2232      	movs	r2, #50	; 0x32
   2b03e:	2100      	movs	r1, #0
   2b040:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   2b042:	2310      	movs	r3, #16
   2b044:	18fb      	adds	r3, r7, r3
   2b046:	881b      	ldrh	r3, [r3, #0]
   2b048:	2202      	movs	r2, #2
   2b04a:	4013      	ands	r3, r2
					if (callback_status
   2b04c:	d00d      	beq.n	2b06a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   2b04e:	69bb      	ldr	r3, [r7, #24]
   2b050:	691b      	ldr	r3, [r3, #16]
   2b052:	69ba      	ldr	r2, [r7, #24]
   2b054:	0010      	movs	r0, r2
   2b056:	4798      	blx	r3
   2b058:	e007      	b.n	2b06a <_usart_interrupt_handler+0x2ae>
   2b05a:	46c0      	nop			; (mov r8, r8)
   2b05c:	20005834 	.word	0x20005834
   2b060:	0002ab9d 	.word	0x0002ab9d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   2b064:	697b      	ldr	r3, [r7, #20]
   2b066:	2204      	movs	r2, #4
   2b068:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   2b06a:	2312      	movs	r3, #18
   2b06c:	18fb      	adds	r3, r7, r3
   2b06e:	881b      	ldrh	r3, [r3, #0]
   2b070:	2210      	movs	r2, #16
   2b072:	4013      	ands	r3, r2
   2b074:	d010      	beq.n	2b098 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   2b076:	697b      	ldr	r3, [r7, #20]
   2b078:	2210      	movs	r2, #16
   2b07a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   2b07c:	697b      	ldr	r3, [r7, #20]
   2b07e:	2210      	movs	r2, #16
   2b080:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   2b082:	2310      	movs	r3, #16
   2b084:	18fb      	adds	r3, r7, r3
   2b086:	881b      	ldrh	r3, [r3, #0]
   2b088:	2210      	movs	r2, #16
   2b08a:	4013      	ands	r3, r2
   2b08c:	d004      	beq.n	2b098 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   2b08e:	69bb      	ldr	r3, [r7, #24]
   2b090:	69db      	ldr	r3, [r3, #28]
   2b092:	69ba      	ldr	r2, [r7, #24]
   2b094:	0010      	movs	r0, r2
   2b096:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   2b098:	2312      	movs	r3, #18
   2b09a:	18fb      	adds	r3, r7, r3
   2b09c:	881b      	ldrh	r3, [r3, #0]
   2b09e:	2220      	movs	r2, #32
   2b0a0:	4013      	ands	r3, r2
   2b0a2:	d010      	beq.n	2b0c6 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   2b0a4:	697b      	ldr	r3, [r7, #20]
   2b0a6:	2220      	movs	r2, #32
   2b0a8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   2b0aa:	697b      	ldr	r3, [r7, #20]
   2b0ac:	2220      	movs	r2, #32
   2b0ae:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   2b0b0:	2310      	movs	r3, #16
   2b0b2:	18fb      	adds	r3, r7, r3
   2b0b4:	881b      	ldrh	r3, [r3, #0]
   2b0b6:	2208      	movs	r2, #8
   2b0b8:	4013      	ands	r3, r2
   2b0ba:	d004      	beq.n	2b0c6 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   2b0bc:	69bb      	ldr	r3, [r7, #24]
   2b0be:	699b      	ldr	r3, [r3, #24]
   2b0c0:	69ba      	ldr	r2, [r7, #24]
   2b0c2:	0010      	movs	r0, r2
   2b0c4:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   2b0c6:	2312      	movs	r3, #18
   2b0c8:	18fb      	adds	r3, r7, r3
   2b0ca:	881b      	ldrh	r3, [r3, #0]
   2b0cc:	2208      	movs	r2, #8
   2b0ce:	4013      	ands	r3, r2
   2b0d0:	d010      	beq.n	2b0f4 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   2b0d2:	697b      	ldr	r3, [r7, #20]
   2b0d4:	2208      	movs	r2, #8
   2b0d6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   2b0d8:	697b      	ldr	r3, [r7, #20]
   2b0da:	2208      	movs	r2, #8
   2b0dc:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   2b0de:	2310      	movs	r3, #16
   2b0e0:	18fb      	adds	r3, r7, r3
   2b0e2:	881b      	ldrh	r3, [r3, #0]
   2b0e4:	2220      	movs	r2, #32
   2b0e6:	4013      	ands	r3, r2
   2b0e8:	d004      	beq.n	2b0f4 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   2b0ea:	69bb      	ldr	r3, [r7, #24]
   2b0ec:	6a1b      	ldr	r3, [r3, #32]
   2b0ee:	69ba      	ldr	r2, [r7, #24]
   2b0f0:	0010      	movs	r0, r2
   2b0f2:	4798      	blx	r3
		}
	}
#endif
}
   2b0f4:	46c0      	nop			; (mov r8, r8)
   2b0f6:	46bd      	mov	sp, r7
   2b0f8:	b008      	add	sp, #32
   2b0fa:	bd80      	pop	{r7, pc}

0002b0fc <system_gclk_gen_get_config_defaults>:
{
   2b0fc:	b580      	push	{r7, lr}
   2b0fe:	b082      	sub	sp, #8
   2b100:	af00      	add	r7, sp, #0
   2b102:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   2b104:	687b      	ldr	r3, [r7, #4]
   2b106:	2201      	movs	r2, #1
   2b108:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   2b10a:	687b      	ldr	r3, [r7, #4]
   2b10c:	2200      	movs	r2, #0
   2b10e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   2b110:	687b      	ldr	r3, [r7, #4]
   2b112:	2206      	movs	r2, #6
   2b114:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   2b116:	687b      	ldr	r3, [r7, #4]
   2b118:	2200      	movs	r2, #0
   2b11a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   2b11c:	687b      	ldr	r3, [r7, #4]
   2b11e:	2200      	movs	r2, #0
   2b120:	725a      	strb	r2, [r3, #9]
}
   2b122:	46c0      	nop			; (mov r8, r8)
   2b124:	46bd      	mov	sp, r7
   2b126:	b002      	add	sp, #8
   2b128:	bd80      	pop	{r7, pc}

0002b12a <system_gclk_chan_get_config_defaults>:
{
   2b12a:	b580      	push	{r7, lr}
   2b12c:	b082      	sub	sp, #8
   2b12e:	af00      	add	r7, sp, #0
   2b130:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2b132:	687b      	ldr	r3, [r7, #4]
   2b134:	2200      	movs	r2, #0
   2b136:	701a      	strb	r2, [r3, #0]
}
   2b138:	46c0      	nop			; (mov r8, r8)
   2b13a:	46bd      	mov	sp, r7
   2b13c:	b002      	add	sp, #8
   2b13e:	bd80      	pop	{r7, pc}

0002b140 <system_clock_source_osc8m_get_config_defaults>:
{
   2b140:	b580      	push	{r7, lr}
   2b142:	b082      	sub	sp, #8
   2b144:	af00      	add	r7, sp, #0
   2b146:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   2b148:	687b      	ldr	r3, [r7, #4]
   2b14a:	2203      	movs	r2, #3
   2b14c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   2b14e:	687b      	ldr	r3, [r7, #4]
   2b150:	2200      	movs	r2, #0
   2b152:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   2b154:	687b      	ldr	r3, [r7, #4]
   2b156:	2201      	movs	r2, #1
   2b158:	709a      	strb	r2, [r3, #2]
}
   2b15a:	46c0      	nop			; (mov r8, r8)
   2b15c:	46bd      	mov	sp, r7
   2b15e:	b002      	add	sp, #8
   2b160:	bd80      	pop	{r7, pc}
	...

0002b164 <system_cpu_clock_set_divider>:
{
   2b164:	b580      	push	{r7, lr}
   2b166:	b082      	sub	sp, #8
   2b168:	af00      	add	r7, sp, #0
   2b16a:	0002      	movs	r2, r0
   2b16c:	1dfb      	adds	r3, r7, #7
   2b16e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   2b170:	4a03      	ldr	r2, [pc, #12]	; (2b180 <system_cpu_clock_set_divider+0x1c>)
   2b172:	1dfb      	adds	r3, r7, #7
   2b174:	781b      	ldrb	r3, [r3, #0]
   2b176:	7213      	strb	r3, [r2, #8]
}
   2b178:	46c0      	nop			; (mov r8, r8)
   2b17a:	46bd      	mov	sp, r7
   2b17c:	b002      	add	sp, #8
   2b17e:	bd80      	pop	{r7, pc}
   2b180:	40000400 	.word	0x40000400

0002b184 <system_apb_clock_set_divider>:
{
   2b184:	b580      	push	{r7, lr}
   2b186:	b082      	sub	sp, #8
   2b188:	af00      	add	r7, sp, #0
   2b18a:	0002      	movs	r2, r0
   2b18c:	1dfb      	adds	r3, r7, #7
   2b18e:	701a      	strb	r2, [r3, #0]
   2b190:	1dbb      	adds	r3, r7, #6
   2b192:	1c0a      	adds	r2, r1, #0
   2b194:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2b196:	1dfb      	adds	r3, r7, #7
   2b198:	781b      	ldrb	r3, [r3, #0]
   2b19a:	2b01      	cmp	r3, #1
   2b19c:	d008      	beq.n	2b1b0 <system_apb_clock_set_divider+0x2c>
   2b19e:	2b02      	cmp	r3, #2
   2b1a0:	d00b      	beq.n	2b1ba <system_apb_clock_set_divider+0x36>
   2b1a2:	2b00      	cmp	r3, #0
   2b1a4:	d10e      	bne.n	2b1c4 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   2b1a6:	4a0b      	ldr	r2, [pc, #44]	; (2b1d4 <system_apb_clock_set_divider+0x50>)
   2b1a8:	1dbb      	adds	r3, r7, #6
   2b1aa:	781b      	ldrb	r3, [r3, #0]
   2b1ac:	7253      	strb	r3, [r2, #9]
			break;
   2b1ae:	e00b      	b.n	2b1c8 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   2b1b0:	4a08      	ldr	r2, [pc, #32]	; (2b1d4 <system_apb_clock_set_divider+0x50>)
   2b1b2:	1dbb      	adds	r3, r7, #6
   2b1b4:	781b      	ldrb	r3, [r3, #0]
   2b1b6:	7293      	strb	r3, [r2, #10]
			break;
   2b1b8:	e006      	b.n	2b1c8 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   2b1ba:	4a06      	ldr	r2, [pc, #24]	; (2b1d4 <system_apb_clock_set_divider+0x50>)
   2b1bc:	1dbb      	adds	r3, r7, #6
   2b1be:	781b      	ldrb	r3, [r3, #0]
   2b1c0:	72d3      	strb	r3, [r2, #11]
			break;
   2b1c2:	e001      	b.n	2b1c8 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   2b1c4:	2317      	movs	r3, #23
   2b1c6:	e000      	b.n	2b1ca <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   2b1c8:	2300      	movs	r3, #0
}
   2b1ca:	0018      	movs	r0, r3
   2b1cc:	46bd      	mov	sp, r7
   2b1ce:	b002      	add	sp, #8
   2b1d0:	bd80      	pop	{r7, pc}
   2b1d2:	46c0      	nop			; (mov r8, r8)
   2b1d4:	40000400 	.word	0x40000400

0002b1d8 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   2b1d8:	b580      	push	{r7, lr}
   2b1da:	b082      	sub	sp, #8
   2b1dc:	af00      	add	r7, sp, #0
   2b1de:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   2b1e0:	687b      	ldr	r3, [r7, #4]
   2b1e2:	2201      	movs	r2, #1
   2b1e4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   2b1e6:	687b      	ldr	r3, [r7, #4]
   2b1e8:	2200      	movs	r2, #0
   2b1ea:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   2b1ec:	687b      	ldr	r3, [r7, #4]
   2b1ee:	2200      	movs	r2, #0
   2b1f0:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   2b1f2:	687b      	ldr	r3, [r7, #4]
   2b1f4:	2200      	movs	r2, #0
   2b1f6:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   2b1f8:	687b      	ldr	r3, [r7, #4]
   2b1fa:	2200      	movs	r2, #0
   2b1fc:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   2b1fe:	687b      	ldr	r3, [r7, #4]
   2b200:	4a0a      	ldr	r2, [pc, #40]	; (2b22c <system_clock_source_dpll_get_config_defaults+0x54>)
   2b202:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   2b204:	687b      	ldr	r3, [r7, #4]
   2b206:	2280      	movs	r2, #128	; 0x80
   2b208:	0212      	lsls	r2, r2, #8
   2b20a:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   2b20c:	687b      	ldr	r3, [r7, #4]
   2b20e:	2201      	movs	r2, #1
   2b210:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   2b212:	687b      	ldr	r3, [r7, #4]
   2b214:	2200      	movs	r2, #0
   2b216:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   2b218:	687b      	ldr	r3, [r7, #4]
   2b21a:	2200      	movs	r2, #0
   2b21c:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   2b21e:	687b      	ldr	r3, [r7, #4]
   2b220:	2200      	movs	r2, #0
   2b222:	749a      	strb	r2, [r3, #18]
};
   2b224:	46c0      	nop			; (mov r8, r8)
   2b226:	46bd      	mov	sp, r7
   2b228:	b002      	add	sp, #8
   2b22a:	bd80      	pop	{r7, pc}
   2b22c:	02dc6c00 	.word	0x02dc6c00

0002b230 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   2b230:	b580      	push	{r7, lr}
   2b232:	b082      	sub	sp, #8
   2b234:	af00      	add	r7, sp, #0
   2b236:	0002      	movs	r2, r0
   2b238:	1dfb      	adds	r3, r7, #7
   2b23a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   2b23c:	4a08      	ldr	r2, [pc, #32]	; (2b260 <system_flash_set_waitstates+0x30>)
   2b23e:	1dfb      	adds	r3, r7, #7
   2b240:	781b      	ldrb	r3, [r3, #0]
   2b242:	210f      	movs	r1, #15
   2b244:	400b      	ands	r3, r1
   2b246:	b2d9      	uxtb	r1, r3
   2b248:	6853      	ldr	r3, [r2, #4]
   2b24a:	200f      	movs	r0, #15
   2b24c:	4001      	ands	r1, r0
   2b24e:	0049      	lsls	r1, r1, #1
   2b250:	201e      	movs	r0, #30
   2b252:	4383      	bics	r3, r0
   2b254:	430b      	orrs	r3, r1
   2b256:	6053      	str	r3, [r2, #4]
}
   2b258:	46c0      	nop			; (mov r8, r8)
   2b25a:	46bd      	mov	sp, r7
   2b25c:	b002      	add	sp, #8
   2b25e:	bd80      	pop	{r7, pc}
   2b260:	41004000 	.word	0x41004000

0002b264 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   2b264:	b580      	push	{r7, lr}
   2b266:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   2b268:	46c0      	nop			; (mov r8, r8)
   2b26a:	4b04      	ldr	r3, [pc, #16]	; (2b27c <_system_dfll_wait_for_sync+0x18>)
   2b26c:	68db      	ldr	r3, [r3, #12]
   2b26e:	2210      	movs	r2, #16
   2b270:	4013      	ands	r3, r2
   2b272:	d0fa      	beq.n	2b26a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   2b274:	46c0      	nop			; (mov r8, r8)
   2b276:	46bd      	mov	sp, r7
   2b278:	bd80      	pop	{r7, pc}
   2b27a:	46c0      	nop			; (mov r8, r8)
   2b27c:	40000800 	.word	0x40000800

0002b280 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   2b280:	b580      	push	{r7, lr}
   2b282:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   2b284:	4b0c      	ldr	r3, [pc, #48]	; (2b2b8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2b286:	2202      	movs	r2, #2
   2b288:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2b28a:	4b0c      	ldr	r3, [pc, #48]	; (2b2bc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2b28c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   2b28e:	4a0a      	ldr	r2, [pc, #40]	; (2b2b8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2b290:	4b0b      	ldr	r3, [pc, #44]	; (2b2c0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2b292:	689b      	ldr	r3, [r3, #8]
   2b294:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   2b296:	4a08      	ldr	r2, [pc, #32]	; (2b2b8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2b298:	4b09      	ldr	r3, [pc, #36]	; (2b2c0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2b29a:	685b      	ldr	r3, [r3, #4]
   2b29c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   2b29e:	4b06      	ldr	r3, [pc, #24]	; (2b2b8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2b2a0:	2200      	movs	r2, #0
   2b2a2:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2b2a4:	4b05      	ldr	r3, [pc, #20]	; (2b2bc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2b2a6:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   2b2a8:	4a03      	ldr	r2, [pc, #12]	; (2b2b8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2b2aa:	4b05      	ldr	r3, [pc, #20]	; (2b2c0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2b2ac:	681b      	ldr	r3, [r3, #0]
   2b2ae:	b29b      	uxth	r3, r3
   2b2b0:	8493      	strh	r3, [r2, #36]	; 0x24
}
   2b2b2:	46c0      	nop			; (mov r8, r8)
   2b2b4:	46bd      	mov	sp, r7
   2b2b6:	bd80      	pop	{r7, pc}
   2b2b8:	40000800 	.word	0x40000800
   2b2bc:	0002b265 	.word	0x0002b265
   2b2c0:	20003ef8 	.word	0x20003ef8

0002b2c4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   2b2c4:	b580      	push	{r7, lr}
   2b2c6:	b082      	sub	sp, #8
   2b2c8:	af00      	add	r7, sp, #0
   2b2ca:	0002      	movs	r2, r0
   2b2cc:	1dfb      	adds	r3, r7, #7
   2b2ce:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2b2d0:	1dfb      	adds	r3, r7, #7
   2b2d2:	781b      	ldrb	r3, [r3, #0]
   2b2d4:	2b08      	cmp	r3, #8
   2b2d6:	d841      	bhi.n	2b35c <system_clock_source_get_hz+0x98>
   2b2d8:	009a      	lsls	r2, r3, #2
   2b2da:	4b23      	ldr	r3, [pc, #140]	; (2b368 <system_clock_source_get_hz+0xa4>)
   2b2dc:	18d3      	adds	r3, r2, r3
   2b2de:	681b      	ldr	r3, [r3, #0]
   2b2e0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   2b2e2:	4b22      	ldr	r3, [pc, #136]	; (2b36c <system_clock_source_get_hz+0xa8>)
   2b2e4:	691b      	ldr	r3, [r3, #16]
   2b2e6:	e03a      	b.n	2b35e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   2b2e8:	4b21      	ldr	r3, [pc, #132]	; (2b370 <system_clock_source_get_hz+0xac>)
   2b2ea:	6a1b      	ldr	r3, [r3, #32]
   2b2ec:	059b      	lsls	r3, r3, #22
   2b2ee:	0f9b      	lsrs	r3, r3, #30
   2b2f0:	b2db      	uxtb	r3, r3
   2b2f2:	001a      	movs	r2, r3
   2b2f4:	4b1f      	ldr	r3, [pc, #124]	; (2b374 <system_clock_source_get_hz+0xb0>)
   2b2f6:	40d3      	lsrs	r3, r2
   2b2f8:	e031      	b.n	2b35e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   2b2fa:	2380      	movs	r3, #128	; 0x80
   2b2fc:	021b      	lsls	r3, r3, #8
   2b2fe:	e02e      	b.n	2b35e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   2b300:	2380      	movs	r3, #128	; 0x80
   2b302:	021b      	lsls	r3, r3, #8
   2b304:	e02b      	b.n	2b35e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   2b306:	4b19      	ldr	r3, [pc, #100]	; (2b36c <system_clock_source_get_hz+0xa8>)
   2b308:	695b      	ldr	r3, [r3, #20]
   2b30a:	e028      	b.n	2b35e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   2b30c:	4b17      	ldr	r3, [pc, #92]	; (2b36c <system_clock_source_get_hz+0xa8>)
   2b30e:	681b      	ldr	r3, [r3, #0]
   2b310:	2202      	movs	r2, #2
   2b312:	4013      	ands	r3, r2
   2b314:	d101      	bne.n	2b31a <system_clock_source_get_hz+0x56>
			return 0;
   2b316:	2300      	movs	r3, #0
   2b318:	e021      	b.n	2b35e <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   2b31a:	4b17      	ldr	r3, [pc, #92]	; (2b378 <system_clock_source_get_hz+0xb4>)
   2b31c:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   2b31e:	4b13      	ldr	r3, [pc, #76]	; (2b36c <system_clock_source_get_hz+0xa8>)
   2b320:	681b      	ldr	r3, [r3, #0]
   2b322:	2224      	movs	r2, #36	; 0x24
   2b324:	4013      	ands	r3, r2
   2b326:	2b04      	cmp	r3, #4
   2b328:	d109      	bne.n	2b33e <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2b32a:	2000      	movs	r0, #0
   2b32c:	4b13      	ldr	r3, [pc, #76]	; (2b37c <system_clock_source_get_hz+0xb8>)
   2b32e:	4798      	blx	r3
   2b330:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   2b332:	4b0e      	ldr	r3, [pc, #56]	; (2b36c <system_clock_source_get_hz+0xa8>)
   2b334:	689b      	ldr	r3, [r3, #8]
   2b336:	041b      	lsls	r3, r3, #16
   2b338:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2b33a:	4353      	muls	r3, r2
   2b33c:	e00f      	b.n	2b35e <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   2b33e:	4b10      	ldr	r3, [pc, #64]	; (2b380 <system_clock_source_get_hz+0xbc>)
   2b340:	e00d      	b.n	2b35e <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   2b342:	4a0b      	ldr	r2, [pc, #44]	; (2b370 <system_clock_source_get_hz+0xac>)
   2b344:	2350      	movs	r3, #80	; 0x50
   2b346:	5cd3      	ldrb	r3, [r2, r3]
   2b348:	b2db      	uxtb	r3, r3
   2b34a:	001a      	movs	r2, r3
   2b34c:	2304      	movs	r3, #4
   2b34e:	4013      	ands	r3, r2
   2b350:	d101      	bne.n	2b356 <system_clock_source_get_hz+0x92>
			return 0;
   2b352:	2300      	movs	r3, #0
   2b354:	e003      	b.n	2b35e <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   2b356:	4b05      	ldr	r3, [pc, #20]	; (2b36c <system_clock_source_get_hz+0xa8>)
   2b358:	68db      	ldr	r3, [r3, #12]
   2b35a:	e000      	b.n	2b35e <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   2b35c:	2300      	movs	r3, #0
	}
}
   2b35e:	0018      	movs	r0, r3
   2b360:	46bd      	mov	sp, r7
   2b362:	b002      	add	sp, #8
   2b364:	bd80      	pop	{r7, pc}
   2b366:	46c0      	nop			; (mov r8, r8)
   2b368:	0003ba5c 	.word	0x0003ba5c
   2b36c:	20003ef8 	.word	0x20003ef8
   2b370:	40000800 	.word	0x40000800
   2b374:	007a1200 	.word	0x007a1200
   2b378:	0002b265 	.word	0x0002b265
   2b37c:	0002bd61 	.word	0x0002bd61
   2b380:	02dc6c00 	.word	0x02dc6c00

0002b384 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   2b384:	b580      	push	{r7, lr}
   2b386:	b084      	sub	sp, #16
   2b388:	af00      	add	r7, sp, #0
   2b38a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   2b38c:	4b1a      	ldr	r3, [pc, #104]	; (2b3f8 <system_clock_source_osc8m_set_config+0x74>)
   2b38e:	6a1b      	ldr	r3, [r3, #32]
   2b390:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   2b392:	687b      	ldr	r3, [r7, #4]
   2b394:	781b      	ldrb	r3, [r3, #0]
   2b396:	1c1a      	adds	r2, r3, #0
   2b398:	2303      	movs	r3, #3
   2b39a:	4013      	ands	r3, r2
   2b39c:	b2da      	uxtb	r2, r3
   2b39e:	230d      	movs	r3, #13
   2b3a0:	18fb      	adds	r3, r7, r3
   2b3a2:	2103      	movs	r1, #3
   2b3a4:	400a      	ands	r2, r1
   2b3a6:	0010      	movs	r0, r2
   2b3a8:	781a      	ldrb	r2, [r3, #0]
   2b3aa:	2103      	movs	r1, #3
   2b3ac:	438a      	bics	r2, r1
   2b3ae:	1c11      	adds	r1, r2, #0
   2b3b0:	1c02      	adds	r2, r0, #0
   2b3b2:	430a      	orrs	r2, r1
   2b3b4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   2b3b6:	687b      	ldr	r3, [r7, #4]
   2b3b8:	789a      	ldrb	r2, [r3, #2]
   2b3ba:	230c      	movs	r3, #12
   2b3bc:	18fb      	adds	r3, r7, r3
   2b3be:	01d0      	lsls	r0, r2, #7
   2b3c0:	781a      	ldrb	r2, [r3, #0]
   2b3c2:	217f      	movs	r1, #127	; 0x7f
   2b3c4:	400a      	ands	r2, r1
   2b3c6:	1c11      	adds	r1, r2, #0
   2b3c8:	1c02      	adds	r2, r0, #0
   2b3ca:	430a      	orrs	r2, r1
   2b3cc:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   2b3ce:	687b      	ldr	r3, [r7, #4]
   2b3d0:	785a      	ldrb	r2, [r3, #1]
   2b3d2:	230c      	movs	r3, #12
   2b3d4:	18fb      	adds	r3, r7, r3
   2b3d6:	2101      	movs	r1, #1
   2b3d8:	400a      	ands	r2, r1
   2b3da:	0190      	lsls	r0, r2, #6
   2b3dc:	781a      	ldrb	r2, [r3, #0]
   2b3de:	2140      	movs	r1, #64	; 0x40
   2b3e0:	438a      	bics	r2, r1
   2b3e2:	1c11      	adds	r1, r2, #0
   2b3e4:	1c02      	adds	r2, r0, #0
   2b3e6:	430a      	orrs	r2, r1
   2b3e8:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   2b3ea:	4b03      	ldr	r3, [pc, #12]	; (2b3f8 <system_clock_source_osc8m_set_config+0x74>)
   2b3ec:	68fa      	ldr	r2, [r7, #12]
   2b3ee:	621a      	str	r2, [r3, #32]
}
   2b3f0:	46c0      	nop			; (mov r8, r8)
   2b3f2:	46bd      	mov	sp, r7
   2b3f4:	b004      	add	sp, #16
   2b3f6:	bd80      	pop	{r7, pc}
   2b3f8:	40000800 	.word	0x40000800

0002b3fc <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   2b3fc:	b580      	push	{r7, lr}
   2b3fe:	b086      	sub	sp, #24
   2b400:	af00      	add	r7, sp, #0
   2b402:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   2b404:	687b      	ldr	r3, [r7, #4]
   2b406:	68db      	ldr	r3, [r3, #12]
   2b408:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   2b40a:	687b      	ldr	r3, [r7, #4]
   2b40c:	7d1b      	ldrb	r3, [r3, #20]
   2b40e:	2b01      	cmp	r3, #1
   2b410:	d10a      	bne.n	2b428 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   2b412:	687b      	ldr	r3, [r7, #4]
   2b414:	8a1b      	ldrh	r3, [r3, #16]
   2b416:	3301      	adds	r3, #1
   2b418:	005b      	lsls	r3, r3, #1
   2b41a:	001a      	movs	r2, r3
   2b41c:	4b36      	ldr	r3, [pc, #216]	; (2b4f8 <system_clock_source_dpll_set_config+0xfc>)
   2b41e:	0011      	movs	r1, r2
   2b420:	6978      	ldr	r0, [r7, #20]
   2b422:	4798      	blx	r3
   2b424:	0003      	movs	r3, r0
   2b426:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   2b428:	687b      	ldr	r3, [r7, #4]
   2b42a:	689b      	ldr	r3, [r3, #8]
   2b42c:	011a      	lsls	r2, r3, #4
   2b42e:	4b32      	ldr	r3, [pc, #200]	; (2b4f8 <system_clock_source_dpll_set_config+0xfc>)
   2b430:	6979      	ldr	r1, [r7, #20]
   2b432:	0010      	movs	r0, r2
   2b434:	4798      	blx	r3
   2b436:	0003      	movs	r3, r0
   2b438:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   2b43a:	693b      	ldr	r3, [r7, #16]
   2b43c:	b2da      	uxtb	r2, r3
   2b43e:	230f      	movs	r3, #15
   2b440:	18fb      	adds	r3, r7, r3
   2b442:	210f      	movs	r1, #15
   2b444:	400a      	ands	r2, r1
   2b446:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   2b448:	693b      	ldr	r3, [r7, #16]
   2b44a:	091b      	lsrs	r3, r3, #4
   2b44c:	3b01      	subs	r3, #1
   2b44e:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   2b450:	492a      	ldr	r1, [pc, #168]	; (2b4fc <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2b452:	687b      	ldr	r3, [r7, #4]
   2b454:	781b      	ldrb	r3, [r3, #0]
   2b456:	01db      	lsls	r3, r3, #7
   2b458:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   2b45a:	687b      	ldr	r3, [r7, #4]
   2b45c:	785b      	ldrb	r3, [r3, #1]
   2b45e:	019b      	lsls	r3, r3, #6
   2b460:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2b462:	4313      	orrs	r3, r2
   2b464:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   2b466:	2344      	movs	r3, #68	; 0x44
   2b468:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   2b46a:	4b24      	ldr	r3, [pc, #144]	; (2b4fc <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2b46c:	220f      	movs	r2, #15
   2b46e:	18ba      	adds	r2, r7, r2
   2b470:	7812      	ldrb	r2, [r2, #0]
   2b472:	0412      	lsls	r2, r2, #16
   2b474:	0011      	movs	r1, r2
   2b476:	22f0      	movs	r2, #240	; 0xf0
   2b478:	0312      	lsls	r2, r2, #12
   2b47a:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   2b47c:	693a      	ldr	r2, [r7, #16]
   2b47e:	0512      	lsls	r2, r2, #20
   2b480:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2b482:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   2b484:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   2b486:	4b1d      	ldr	r3, [pc, #116]	; (2b4fc <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2b488:	687a      	ldr	r2, [r7, #4]
   2b48a:	8a12      	ldrh	r2, [r2, #16]
   2b48c:	0412      	lsls	r2, r2, #16
   2b48e:	0011      	movs	r1, r2
   2b490:	4a1b      	ldr	r2, [pc, #108]	; (2b500 <system_clock_source_dpll_set_config+0x104>)
   2b492:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2b494:	687a      	ldr	r2, [r7, #4]
   2b496:	7892      	ldrb	r2, [r2, #2]
   2b498:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2b49a:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2b49c:	687a      	ldr	r2, [r7, #4]
   2b49e:	7cd2      	ldrb	r2, [r2, #19]
   2b4a0:	0212      	lsls	r2, r2, #8
   2b4a2:	0010      	movs	r0, r2
   2b4a4:	22e0      	movs	r2, #224	; 0xe0
   2b4a6:	00d2      	lsls	r2, r2, #3
   2b4a8:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2b4aa:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2b4ac:	687a      	ldr	r2, [r7, #4]
   2b4ae:	7d12      	ldrb	r2, [r2, #20]
   2b4b0:	0112      	lsls	r2, r2, #4
   2b4b2:	0010      	movs	r0, r2
   2b4b4:	2230      	movs	r2, #48	; 0x30
   2b4b6:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2b4b8:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2b4ba:	687a      	ldr	r2, [r7, #4]
   2b4bc:	78d2      	ldrb	r2, [r2, #3]
   2b4be:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2b4c0:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2b4c2:	687a      	ldr	r2, [r7, #4]
   2b4c4:	7912      	ldrb	r2, [r2, #4]
   2b4c6:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2b4c8:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   2b4ca:	687a      	ldr	r2, [r7, #4]
   2b4cc:	7c92      	ldrb	r2, [r2, #18]
   2b4ce:	0010      	movs	r0, r2
   2b4d0:	2203      	movs	r2, #3
   2b4d2:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2b4d4:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   2b4d6:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   2b4d8:	693b      	ldr	r3, [r7, #16]
   2b4da:	3301      	adds	r3, #1
   2b4dc:	011a      	lsls	r2, r3, #4
   2b4de:	230f      	movs	r3, #15
   2b4e0:	18fb      	adds	r3, r7, r3
   2b4e2:	781b      	ldrb	r3, [r3, #0]
   2b4e4:	18d3      	adds	r3, r2, r3
   2b4e6:	697a      	ldr	r2, [r7, #20]
   2b4e8:	4353      	muls	r3, r2
   2b4ea:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   2b4ec:	4b05      	ldr	r3, [pc, #20]	; (2b504 <system_clock_source_dpll_set_config+0x108>)
   2b4ee:	60da      	str	r2, [r3, #12]
}
   2b4f0:	46c0      	nop			; (mov r8, r8)
   2b4f2:	46bd      	mov	sp, r7
   2b4f4:	b006      	add	sp, #24
   2b4f6:	bd80      	pop	{r7, pc}
   2b4f8:	00034759 	.word	0x00034759
   2b4fc:	40000800 	.word	0x40000800
   2b500:	07ff0000 	.word	0x07ff0000
   2b504:	20003ef8 	.word	0x20003ef8

0002b508 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   2b508:	b580      	push	{r7, lr}
   2b50a:	b082      	sub	sp, #8
   2b50c:	af00      	add	r7, sp, #0
   2b50e:	0002      	movs	r2, r0
   2b510:	1dfb      	adds	r3, r7, #7
   2b512:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2b514:	1dfb      	adds	r3, r7, #7
   2b516:	781b      	ldrb	r3, [r3, #0]
   2b518:	2b08      	cmp	r3, #8
   2b51a:	d83b      	bhi.n	2b594 <system_clock_source_enable+0x8c>
   2b51c:	009a      	lsls	r2, r3, #2
   2b51e:	4b21      	ldr	r3, [pc, #132]	; (2b5a4 <system_clock_source_enable+0x9c>)
   2b520:	18d3      	adds	r3, r2, r3
   2b522:	681b      	ldr	r3, [r3, #0]
   2b524:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   2b526:	4b20      	ldr	r3, [pc, #128]	; (2b5a8 <system_clock_source_enable+0xa0>)
   2b528:	4a1f      	ldr	r2, [pc, #124]	; (2b5a8 <system_clock_source_enable+0xa0>)
   2b52a:	6a12      	ldr	r2, [r2, #32]
   2b52c:	2102      	movs	r1, #2
   2b52e:	430a      	orrs	r2, r1
   2b530:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   2b532:	2300      	movs	r3, #0
   2b534:	e031      	b.n	2b59a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   2b536:	4b1c      	ldr	r3, [pc, #112]	; (2b5a8 <system_clock_source_enable+0xa0>)
   2b538:	4a1b      	ldr	r2, [pc, #108]	; (2b5a8 <system_clock_source_enable+0xa0>)
   2b53a:	6992      	ldr	r2, [r2, #24]
   2b53c:	2102      	movs	r1, #2
   2b53e:	430a      	orrs	r2, r1
   2b540:	619a      	str	r2, [r3, #24]
		break;
   2b542:	e029      	b.n	2b598 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   2b544:	4a18      	ldr	r2, [pc, #96]	; (2b5a8 <system_clock_source_enable+0xa0>)
   2b546:	4b18      	ldr	r3, [pc, #96]	; (2b5a8 <system_clock_source_enable+0xa0>)
   2b548:	8a1b      	ldrh	r3, [r3, #16]
   2b54a:	b29b      	uxth	r3, r3
   2b54c:	2102      	movs	r1, #2
   2b54e:	430b      	orrs	r3, r1
   2b550:	b29b      	uxth	r3, r3
   2b552:	8213      	strh	r3, [r2, #16]
		break;
   2b554:	e020      	b.n	2b598 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   2b556:	4a14      	ldr	r2, [pc, #80]	; (2b5a8 <system_clock_source_enable+0xa0>)
   2b558:	4b13      	ldr	r3, [pc, #76]	; (2b5a8 <system_clock_source_enable+0xa0>)
   2b55a:	8a9b      	ldrh	r3, [r3, #20]
   2b55c:	b29b      	uxth	r3, r3
   2b55e:	2102      	movs	r1, #2
   2b560:	430b      	orrs	r3, r1
   2b562:	b29b      	uxth	r3, r3
   2b564:	8293      	strh	r3, [r2, #20]
		break;
   2b566:	e017      	b.n	2b598 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   2b568:	4b10      	ldr	r3, [pc, #64]	; (2b5ac <system_clock_source_enable+0xa4>)
   2b56a:	681b      	ldr	r3, [r3, #0]
   2b56c:	2202      	movs	r2, #2
   2b56e:	431a      	orrs	r2, r3
   2b570:	4b0e      	ldr	r3, [pc, #56]	; (2b5ac <system_clock_source_enable+0xa4>)
   2b572:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   2b574:	4b0e      	ldr	r3, [pc, #56]	; (2b5b0 <system_clock_source_enable+0xa8>)
   2b576:	4798      	blx	r3
		break;
   2b578:	e00e      	b.n	2b598 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   2b57a:	4a0b      	ldr	r2, [pc, #44]	; (2b5a8 <system_clock_source_enable+0xa0>)
   2b57c:	490a      	ldr	r1, [pc, #40]	; (2b5a8 <system_clock_source_enable+0xa0>)
   2b57e:	2344      	movs	r3, #68	; 0x44
   2b580:	5ccb      	ldrb	r3, [r1, r3]
   2b582:	b2db      	uxtb	r3, r3
   2b584:	2102      	movs	r1, #2
   2b586:	430b      	orrs	r3, r1
   2b588:	b2d9      	uxtb	r1, r3
   2b58a:	2344      	movs	r3, #68	; 0x44
   2b58c:	54d1      	strb	r1, [r2, r3]
		break;
   2b58e:	e003      	b.n	2b598 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   2b590:	2300      	movs	r3, #0
   2b592:	e002      	b.n	2b59a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2b594:	2317      	movs	r3, #23
   2b596:	e000      	b.n	2b59a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   2b598:	2300      	movs	r3, #0
}
   2b59a:	0018      	movs	r0, r3
   2b59c:	46bd      	mov	sp, r7
   2b59e:	b002      	add	sp, #8
   2b5a0:	bd80      	pop	{r7, pc}
   2b5a2:	46c0      	nop			; (mov r8, r8)
   2b5a4:	0003ba80 	.word	0x0003ba80
   2b5a8:	40000800 	.word	0x40000800
   2b5ac:	20003ef8 	.word	0x20003ef8
   2b5b0:	0002b281 	.word	0x0002b281

0002b5b4 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   2b5b4:	b580      	push	{r7, lr}
   2b5b6:	b084      	sub	sp, #16
   2b5b8:	af00      	add	r7, sp, #0
   2b5ba:	0002      	movs	r2, r0
   2b5bc:	1dfb      	adds	r3, r7, #7
   2b5be:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   2b5c0:	2300      	movs	r3, #0
   2b5c2:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   2b5c4:	1dfb      	adds	r3, r7, #7
   2b5c6:	781b      	ldrb	r3, [r3, #0]
   2b5c8:	2b08      	cmp	r3, #8
   2b5ca:	d821      	bhi.n	2b610 <system_clock_source_is_ready+0x5c>
   2b5cc:	009a      	lsls	r2, r3, #2
   2b5ce:	4b18      	ldr	r3, [pc, #96]	; (2b630 <system_clock_source_is_ready+0x7c>)
   2b5d0:	18d3      	adds	r3, r2, r3
   2b5d2:	681b      	ldr	r3, [r3, #0]
   2b5d4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   2b5d6:	2308      	movs	r3, #8
   2b5d8:	60fb      	str	r3, [r7, #12]
		break;
   2b5da:	e01b      	b.n	2b614 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   2b5dc:	2304      	movs	r3, #4
   2b5de:	60fb      	str	r3, [r7, #12]
		break;
   2b5e0:	e018      	b.n	2b614 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   2b5e2:	2301      	movs	r3, #1
   2b5e4:	60fb      	str	r3, [r7, #12]
		break;
   2b5e6:	e015      	b.n	2b614 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   2b5e8:	2302      	movs	r3, #2
   2b5ea:	60fb      	str	r3, [r7, #12]
		break;
   2b5ec:	e012      	b.n	2b614 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   2b5ee:	2310      	movs	r3, #16
   2b5f0:	60fb      	str	r3, [r7, #12]
		}
		break;
   2b5f2:	e00f      	b.n	2b614 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   2b5f4:	4a0f      	ldr	r2, [pc, #60]	; (2b634 <system_clock_source_is_ready+0x80>)
   2b5f6:	2350      	movs	r3, #80	; 0x50
   2b5f8:	5cd3      	ldrb	r3, [r2, r3]
   2b5fa:	b2db      	uxtb	r3, r3
   2b5fc:	001a      	movs	r2, r3
   2b5fe:	2303      	movs	r3, #3
   2b600:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   2b602:	3b03      	subs	r3, #3
   2b604:	425a      	negs	r2, r3
   2b606:	4153      	adcs	r3, r2
   2b608:	b2db      	uxtb	r3, r3
   2b60a:	e00c      	b.n	2b626 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   2b60c:	2301      	movs	r3, #1
   2b60e:	e00a      	b.n	2b626 <system_clock_source_is_ready+0x72>

	default:
		return false;
   2b610:	2300      	movs	r3, #0
   2b612:	e008      	b.n	2b626 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   2b614:	4b07      	ldr	r3, [pc, #28]	; (2b634 <system_clock_source_is_ready+0x80>)
   2b616:	68db      	ldr	r3, [r3, #12]
   2b618:	68fa      	ldr	r2, [r7, #12]
   2b61a:	401a      	ands	r2, r3
   2b61c:	68fb      	ldr	r3, [r7, #12]
   2b61e:	1ad3      	subs	r3, r2, r3
   2b620:	425a      	negs	r2, r3
   2b622:	4153      	adcs	r3, r2
   2b624:	b2db      	uxtb	r3, r3
}
   2b626:	0018      	movs	r0, r3
   2b628:	46bd      	mov	sp, r7
   2b62a:	b004      	add	sp, #16
   2b62c:	bd80      	pop	{r7, pc}
   2b62e:	46c0      	nop			; (mov r8, r8)
   2b630:	0003baa4 	.word	0x0003baa4
   2b634:	40000800 	.word	0x40000800

0002b638 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   2b638:	b580      	push	{r7, lr}
   2b63a:	b082      	sub	sp, #8
   2b63c:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   2b63e:	003b      	movs	r3, r7
   2b640:	2203      	movs	r2, #3
   2b642:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2b644:	2300      	movs	r3, #0
   2b646:	607b      	str	r3, [r7, #4]
   2b648:	e009      	b.n	2b65e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   2b64a:	687b      	ldr	r3, [r7, #4]
   2b64c:	b2db      	uxtb	r3, r3
   2b64e:	003a      	movs	r2, r7
   2b650:	0011      	movs	r1, r2
   2b652:	0018      	movs	r0, r3
   2b654:	4b05      	ldr	r3, [pc, #20]	; (2b66c <_switch_peripheral_gclk+0x34>)
   2b656:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2b658:	687b      	ldr	r3, [r7, #4]
   2b65a:	3301      	adds	r3, #1
   2b65c:	607b      	str	r3, [r7, #4]
   2b65e:	687b      	ldr	r3, [r7, #4]
   2b660:	2b24      	cmp	r3, #36	; 0x24
   2b662:	d9f2      	bls.n	2b64a <_switch_peripheral_gclk+0x12>
	}
}
   2b664:	46c0      	nop			; (mov r8, r8)
   2b666:	46bd      	mov	sp, r7
   2b668:	b002      	add	sp, #8
   2b66a:	bd80      	pop	{r7, pc}
   2b66c:	0002bc3d 	.word	0x0002bc3d

0002b670 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   2b670:	b580      	push	{r7, lr}
   2b672:	b0a6      	sub	sp, #152	; 0x98
   2b674:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   2b676:	4b92      	ldr	r3, [pc, #584]	; (2b8c0 <system_clock_init+0x250>)
   2b678:	22c2      	movs	r2, #194	; 0xc2
   2b67a:	00d2      	lsls	r2, r2, #3
   2b67c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   2b67e:	2003      	movs	r0, #3
   2b680:	4b90      	ldr	r3, [pc, #576]	; (2b8c4 <system_clock_init+0x254>)
   2b682:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   2b684:	4b90      	ldr	r3, [pc, #576]	; (2b8c8 <system_clock_init+0x258>)
   2b686:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   2b688:	2394      	movs	r3, #148	; 0x94
   2b68a:	18fb      	adds	r3, r7, r3
   2b68c:	0018      	movs	r0, r3
   2b68e:	4b8f      	ldr	r3, [pc, #572]	; (2b8cc <system_clock_init+0x25c>)
   2b690:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   2b692:	2394      	movs	r3, #148	; 0x94
   2b694:	18fb      	adds	r3, r7, r3
   2b696:	2200      	movs	r2, #0
   2b698:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   2b69a:	2394      	movs	r3, #148	; 0x94
   2b69c:	18fb      	adds	r3, r7, r3
   2b69e:	2201      	movs	r2, #1
   2b6a0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   2b6a2:	2394      	movs	r3, #148	; 0x94
   2b6a4:	18fb      	adds	r3, r7, r3
   2b6a6:	2200      	movs	r2, #0
   2b6a8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   2b6aa:	2394      	movs	r3, #148	; 0x94
   2b6ac:	18fb      	adds	r3, r7, r3
   2b6ae:	0018      	movs	r0, r3
   2b6b0:	4b87      	ldr	r3, [pc, #540]	; (2b8d0 <system_clock_init+0x260>)
   2b6b2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   2b6b4:	2006      	movs	r0, #6
   2b6b6:	4b87      	ldr	r3, [pc, #540]	; (2b8d4 <system_clock_init+0x264>)
   2b6b8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   2b6ba:	4b87      	ldr	r3, [pc, #540]	; (2b8d8 <system_clock_init+0x268>)
   2b6bc:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   2b6be:	2360      	movs	r3, #96	; 0x60
   2b6c0:	18fb      	adds	r3, r7, r3
   2b6c2:	0018      	movs	r0, r3
   2b6c4:	4b85      	ldr	r3, [pc, #532]	; (2b8dc <system_clock_init+0x26c>)
   2b6c6:	4798      	blx	r3
   2b6c8:	2360      	movs	r3, #96	; 0x60
   2b6ca:	18fb      	adds	r3, r7, r3
   2b6cc:	2206      	movs	r2, #6
   2b6ce:	701a      	strb	r2, [r3, #0]
   2b6d0:	2360      	movs	r3, #96	; 0x60
   2b6d2:	18fb      	adds	r3, r7, r3
   2b6d4:	2208      	movs	r2, #8
   2b6d6:	605a      	str	r2, [r3, #4]
   2b6d8:	2360      	movs	r3, #96	; 0x60
   2b6da:	18fb      	adds	r3, r7, r3
   2b6dc:	2200      	movs	r2, #0
   2b6de:	721a      	strb	r2, [r3, #8]
   2b6e0:	2360      	movs	r3, #96	; 0x60
   2b6e2:	18fb      	adds	r3, r7, r3
   2b6e4:	2200      	movs	r2, #0
   2b6e6:	725a      	strb	r2, [r3, #9]
   2b6e8:	2360      	movs	r3, #96	; 0x60
   2b6ea:	18fb      	adds	r3, r7, r3
   2b6ec:	0019      	movs	r1, r3
   2b6ee:	2001      	movs	r0, #1
   2b6f0:	4b7b      	ldr	r3, [pc, #492]	; (2b8e0 <system_clock_init+0x270>)
   2b6f2:	4798      	blx	r3
   2b6f4:	2001      	movs	r0, #1
   2b6f6:	4b7b      	ldr	r3, [pc, #492]	; (2b8e4 <system_clock_init+0x274>)
   2b6f8:	4798      	blx	r3
   2b6fa:	2354      	movs	r3, #84	; 0x54
   2b6fc:	18fb      	adds	r3, r7, r3
   2b6fe:	0018      	movs	r0, r3
   2b700:	4b76      	ldr	r3, [pc, #472]	; (2b8dc <system_clock_init+0x26c>)
   2b702:	4798      	blx	r3
   2b704:	2354      	movs	r3, #84	; 0x54
   2b706:	18fb      	adds	r3, r7, r3
   2b708:	2203      	movs	r2, #3
   2b70a:	701a      	strb	r2, [r3, #0]
   2b70c:	2354      	movs	r3, #84	; 0x54
   2b70e:	18fb      	adds	r3, r7, r3
   2b710:	2201      	movs	r2, #1
   2b712:	605a      	str	r2, [r3, #4]
   2b714:	2354      	movs	r3, #84	; 0x54
   2b716:	18fb      	adds	r3, r7, r3
   2b718:	2201      	movs	r2, #1
   2b71a:	721a      	strb	r2, [r3, #8]
   2b71c:	2354      	movs	r3, #84	; 0x54
   2b71e:	18fb      	adds	r3, r7, r3
   2b720:	2200      	movs	r2, #0
   2b722:	725a      	strb	r2, [r3, #9]
   2b724:	2354      	movs	r3, #84	; 0x54
   2b726:	18fb      	adds	r3, r7, r3
   2b728:	0019      	movs	r1, r3
   2b72a:	2002      	movs	r0, #2
   2b72c:	4b6c      	ldr	r3, [pc, #432]	; (2b8e0 <system_clock_init+0x270>)
   2b72e:	4798      	blx	r3
   2b730:	2002      	movs	r0, #2
   2b732:	4b6c      	ldr	r3, [pc, #432]	; (2b8e4 <system_clock_init+0x274>)
   2b734:	4798      	blx	r3
   2b736:	233c      	movs	r3, #60	; 0x3c
   2b738:	18fb      	adds	r3, r7, r3
   2b73a:	0018      	movs	r0, r3
   2b73c:	4b67      	ldr	r3, [pc, #412]	; (2b8dc <system_clock_init+0x26c>)
   2b73e:	4798      	blx	r3
   2b740:	233c      	movs	r3, #60	; 0x3c
   2b742:	18fb      	adds	r3, r7, r3
   2b744:	2203      	movs	r2, #3
   2b746:	701a      	strb	r2, [r3, #0]
   2b748:	233c      	movs	r3, #60	; 0x3c
   2b74a:	18fb      	adds	r3, r7, r3
   2b74c:	2220      	movs	r2, #32
   2b74e:	605a      	str	r2, [r3, #4]
   2b750:	233c      	movs	r3, #60	; 0x3c
   2b752:	18fb      	adds	r3, r7, r3
   2b754:	2200      	movs	r2, #0
   2b756:	721a      	strb	r2, [r3, #8]
   2b758:	233c      	movs	r3, #60	; 0x3c
   2b75a:	18fb      	adds	r3, r7, r3
   2b75c:	2200      	movs	r2, #0
   2b75e:	725a      	strb	r2, [r3, #9]
   2b760:	233c      	movs	r3, #60	; 0x3c
   2b762:	18fb      	adds	r3, r7, r3
   2b764:	0019      	movs	r1, r3
   2b766:	2004      	movs	r0, #4
   2b768:	4b5d      	ldr	r3, [pc, #372]	; (2b8e0 <system_clock_init+0x270>)
   2b76a:	4798      	blx	r3
   2b76c:	2004      	movs	r0, #4
   2b76e:	4b5d      	ldr	r3, [pc, #372]	; (2b8e4 <system_clock_init+0x274>)
   2b770:	4798      	blx	r3
   2b772:	2330      	movs	r3, #48	; 0x30
   2b774:	18fb      	adds	r3, r7, r3
   2b776:	0018      	movs	r0, r3
   2b778:	4b58      	ldr	r3, [pc, #352]	; (2b8dc <system_clock_init+0x26c>)
   2b77a:	4798      	blx	r3
   2b77c:	2330      	movs	r3, #48	; 0x30
   2b77e:	18fb      	adds	r3, r7, r3
   2b780:	2206      	movs	r2, #6
   2b782:	701a      	strb	r2, [r3, #0]
   2b784:	2330      	movs	r3, #48	; 0x30
   2b786:	18fb      	adds	r3, r7, r3
   2b788:	2201      	movs	r2, #1
   2b78a:	605a      	str	r2, [r3, #4]
   2b78c:	2330      	movs	r3, #48	; 0x30
   2b78e:	18fb      	adds	r3, r7, r3
   2b790:	2200      	movs	r2, #0
   2b792:	721a      	strb	r2, [r3, #8]
   2b794:	2330      	movs	r3, #48	; 0x30
   2b796:	18fb      	adds	r3, r7, r3
   2b798:	2200      	movs	r2, #0
   2b79a:	725a      	strb	r2, [r3, #9]
   2b79c:	2330      	movs	r3, #48	; 0x30
   2b79e:	18fb      	adds	r3, r7, r3
   2b7a0:	0019      	movs	r1, r3
   2b7a2:	2005      	movs	r0, #5
   2b7a4:	4b4e      	ldr	r3, [pc, #312]	; (2b8e0 <system_clock_init+0x270>)
   2b7a6:	4798      	blx	r3
   2b7a8:	2005      	movs	r0, #5
   2b7aa:	4b4e      	ldr	r3, [pc, #312]	; (2b8e4 <system_clock_init+0x274>)
   2b7ac:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   2b7ae:	2390      	movs	r3, #144	; 0x90
   2b7b0:	18fb      	adds	r3, r7, r3
   2b7b2:	0018      	movs	r0, r3
   2b7b4:	4b4c      	ldr	r3, [pc, #304]	; (2b8e8 <system_clock_init+0x278>)
   2b7b6:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   2b7b8:	2390      	movs	r3, #144	; 0x90
   2b7ba:	18fb      	adds	r3, r7, r3
   2b7bc:	2201      	movs	r2, #1
   2b7be:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   2b7c0:	2390      	movs	r3, #144	; 0x90
   2b7c2:	18fb      	adds	r3, r7, r3
   2b7c4:	0019      	movs	r1, r3
   2b7c6:	2001      	movs	r0, #1
   2b7c8:	4b48      	ldr	r3, [pc, #288]	; (2b8ec <system_clock_init+0x27c>)
   2b7ca:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   2b7cc:	2001      	movs	r0, #1
   2b7ce:	4b48      	ldr	r3, [pc, #288]	; (2b8f0 <system_clock_init+0x280>)
   2b7d0:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   2b7d2:	2378      	movs	r3, #120	; 0x78
   2b7d4:	18fb      	adds	r3, r7, r3
   2b7d6:	0018      	movs	r0, r3
   2b7d8:	4b46      	ldr	r3, [pc, #280]	; (2b8f4 <system_clock_init+0x284>)
   2b7da:	4798      	blx	r3

	dpll_config.on_demand        = false;
   2b7dc:	2378      	movs	r3, #120	; 0x78
   2b7de:	18fb      	adds	r3, r7, r3
   2b7e0:	2200      	movs	r2, #0
   2b7e2:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   2b7e4:	2378      	movs	r3, #120	; 0x78
   2b7e6:	18fb      	adds	r3, r7, r3
   2b7e8:	2200      	movs	r2, #0
   2b7ea:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   2b7ec:	2378      	movs	r3, #120	; 0x78
   2b7ee:	18fb      	adds	r3, r7, r3
   2b7f0:	2200      	movs	r2, #0
   2b7f2:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   2b7f4:	2378      	movs	r3, #120	; 0x78
   2b7f6:	18fb      	adds	r3, r7, r3
   2b7f8:	2200      	movs	r2, #0
   2b7fa:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   2b7fc:	2378      	movs	r3, #120	; 0x78
   2b7fe:	18fb      	adds	r3, r7, r3
   2b800:	2200      	movs	r2, #0
   2b802:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   2b804:	2378      	movs	r3, #120	; 0x78
   2b806:	18fb      	adds	r3, r7, r3
   2b808:	2200      	movs	r2, #0
   2b80a:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   2b80c:	2378      	movs	r3, #120	; 0x78
   2b80e:	18fb      	adds	r3, r7, r3
   2b810:	2200      	movs	r2, #0
   2b812:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   2b814:	2378      	movs	r3, #120	; 0x78
   2b816:	18fb      	adds	r3, r7, r3
   2b818:	2202      	movs	r2, #2
   2b81a:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   2b81c:	2378      	movs	r3, #120	; 0x78
   2b81e:	18fb      	adds	r3, r7, r3
   2b820:	4a35      	ldr	r2, [pc, #212]	; (2b8f8 <system_clock_init+0x288>)
   2b822:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   2b824:	2378      	movs	r3, #120	; 0x78
   2b826:	18fb      	adds	r3, r7, r3
   2b828:	2201      	movs	r2, #1
   2b82a:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   2b82c:	2378      	movs	r3, #120	; 0x78
   2b82e:	18fb      	adds	r3, r7, r3
   2b830:	4a32      	ldr	r2, [pc, #200]	; (2b8fc <system_clock_init+0x28c>)
   2b832:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   2b834:	2378      	movs	r3, #120	; 0x78
   2b836:	18fb      	adds	r3, r7, r3
   2b838:	0018      	movs	r0, r3
   2b83a:	4b31      	ldr	r3, [pc, #196]	; (2b900 <system_clock_init+0x290>)
   2b83c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   2b83e:	2008      	movs	r0, #8
   2b840:	4b24      	ldr	r3, [pc, #144]	; (2b8d4 <system_clock_init+0x264>)
   2b842:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   2b844:	46c0      	nop			; (mov r8, r8)
   2b846:	2008      	movs	r0, #8
   2b848:	4b2e      	ldr	r3, [pc, #184]	; (2b904 <system_clock_init+0x294>)
   2b84a:	4798      	blx	r3
   2b84c:	0003      	movs	r3, r0
   2b84e:	001a      	movs	r2, r3
   2b850:	2301      	movs	r3, #1
   2b852:	4053      	eors	r3, r2
   2b854:	b2db      	uxtb	r3, r3
   2b856:	2b00      	cmp	r3, #0
   2b858:	d1f5      	bne.n	2b846 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   2b85a:	4919      	ldr	r1, [pc, #100]	; (2b8c0 <system_clock_init+0x250>)
   2b85c:	2244      	movs	r2, #68	; 0x44
   2b85e:	5c8b      	ldrb	r3, [r1, r2]
   2b860:	2080      	movs	r0, #128	; 0x80
   2b862:	4240      	negs	r0, r0
   2b864:	4303      	orrs	r3, r0
   2b866:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   2b868:	2000      	movs	r0, #0
   2b86a:	4b27      	ldr	r3, [pc, #156]	; (2b908 <system_clock_init+0x298>)
   2b86c:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   2b86e:	2100      	movs	r1, #0
   2b870:	2000      	movs	r0, #0
   2b872:	4b26      	ldr	r3, [pc, #152]	; (2b90c <system_clock_init+0x29c>)
   2b874:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   2b876:	2100      	movs	r1, #0
   2b878:	2001      	movs	r0, #1
   2b87a:	4b24      	ldr	r3, [pc, #144]	; (2b90c <system_clock_init+0x29c>)
   2b87c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   2b87e:	2100      	movs	r1, #0
   2b880:	2002      	movs	r0, #2
   2b882:	4b22      	ldr	r3, [pc, #136]	; (2b90c <system_clock_init+0x29c>)
   2b884:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   2b886:	003b      	movs	r3, r7
   2b888:	0018      	movs	r0, r3
   2b88a:	4b14      	ldr	r3, [pc, #80]	; (2b8dc <system_clock_init+0x26c>)
   2b88c:	4798      	blx	r3
   2b88e:	003b      	movs	r3, r7
   2b890:	2208      	movs	r2, #8
   2b892:	701a      	strb	r2, [r3, #0]
   2b894:	003b      	movs	r3, r7
   2b896:	2201      	movs	r2, #1
   2b898:	605a      	str	r2, [r3, #4]
   2b89a:	003b      	movs	r3, r7
   2b89c:	2200      	movs	r2, #0
   2b89e:	721a      	strb	r2, [r3, #8]
   2b8a0:	003b      	movs	r3, r7
   2b8a2:	2201      	movs	r2, #1
   2b8a4:	725a      	strb	r2, [r3, #9]
   2b8a6:	003b      	movs	r3, r7
   2b8a8:	0019      	movs	r1, r3
   2b8aa:	2000      	movs	r0, #0
   2b8ac:	4b0c      	ldr	r3, [pc, #48]	; (2b8e0 <system_clock_init+0x270>)
   2b8ae:	4798      	blx	r3
   2b8b0:	2000      	movs	r0, #0
   2b8b2:	4b0c      	ldr	r3, [pc, #48]	; (2b8e4 <system_clock_init+0x274>)
   2b8b4:	4798      	blx	r3
#endif
}
   2b8b6:	46c0      	nop			; (mov r8, r8)
   2b8b8:	46bd      	mov	sp, r7
   2b8ba:	b026      	add	sp, #152	; 0x98
   2b8bc:	bd80      	pop	{r7, pc}
   2b8be:	46c0      	nop			; (mov r8, r8)
   2b8c0:	40000800 	.word	0x40000800
   2b8c4:	0002b231 	.word	0x0002b231
   2b8c8:	0002b639 	.word	0x0002b639
   2b8cc:	0002b141 	.word	0x0002b141
   2b8d0:	0002b385 	.word	0x0002b385
   2b8d4:	0002b509 	.word	0x0002b509
   2b8d8:	0002b9b5 	.word	0x0002b9b5
   2b8dc:	0002b0fd 	.word	0x0002b0fd
   2b8e0:	0002b9e5 	.word	0x0002b9e5
   2b8e4:	0002bb09 	.word	0x0002bb09
   2b8e8:	0002b12b 	.word	0x0002b12b
   2b8ec:	0002bc3d 	.word	0x0002bc3d
   2b8f0:	0002bc81 	.word	0x0002bc81
   2b8f4:	0002b1d9 	.word	0x0002b1d9
   2b8f8:	000f4240 	.word	0x000f4240
   2b8fc:	02dc6c00 	.word	0x02dc6c00
   2b900:	0002b3fd 	.word	0x0002b3fd
   2b904:	0002b5b5 	.word	0x0002b5b5
   2b908:	0002b165 	.word	0x0002b165
   2b90c:	0002b185 	.word	0x0002b185

0002b910 <system_apb_clock_set_mask>:
{
   2b910:	b580      	push	{r7, lr}
   2b912:	b082      	sub	sp, #8
   2b914:	af00      	add	r7, sp, #0
   2b916:	0002      	movs	r2, r0
   2b918:	6039      	str	r1, [r7, #0]
   2b91a:	1dfb      	adds	r3, r7, #7
   2b91c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2b91e:	1dfb      	adds	r3, r7, #7
   2b920:	781b      	ldrb	r3, [r3, #0]
   2b922:	2b01      	cmp	r3, #1
   2b924:	d00a      	beq.n	2b93c <system_apb_clock_set_mask+0x2c>
   2b926:	2b02      	cmp	r3, #2
   2b928:	d00f      	beq.n	2b94a <system_apb_clock_set_mask+0x3a>
   2b92a:	2b00      	cmp	r3, #0
   2b92c:	d114      	bne.n	2b958 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2b92e:	4b0e      	ldr	r3, [pc, #56]	; (2b968 <system_apb_clock_set_mask+0x58>)
   2b930:	4a0d      	ldr	r2, [pc, #52]	; (2b968 <system_apb_clock_set_mask+0x58>)
   2b932:	6991      	ldr	r1, [r2, #24]
   2b934:	683a      	ldr	r2, [r7, #0]
   2b936:	430a      	orrs	r2, r1
   2b938:	619a      	str	r2, [r3, #24]
			break;
   2b93a:	e00f      	b.n	2b95c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2b93c:	4b0a      	ldr	r3, [pc, #40]	; (2b968 <system_apb_clock_set_mask+0x58>)
   2b93e:	4a0a      	ldr	r2, [pc, #40]	; (2b968 <system_apb_clock_set_mask+0x58>)
   2b940:	69d1      	ldr	r1, [r2, #28]
   2b942:	683a      	ldr	r2, [r7, #0]
   2b944:	430a      	orrs	r2, r1
   2b946:	61da      	str	r2, [r3, #28]
			break;
   2b948:	e008      	b.n	2b95c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2b94a:	4b07      	ldr	r3, [pc, #28]	; (2b968 <system_apb_clock_set_mask+0x58>)
   2b94c:	4a06      	ldr	r2, [pc, #24]	; (2b968 <system_apb_clock_set_mask+0x58>)
   2b94e:	6a11      	ldr	r1, [r2, #32]
   2b950:	683a      	ldr	r2, [r7, #0]
   2b952:	430a      	orrs	r2, r1
   2b954:	621a      	str	r2, [r3, #32]
			break;
   2b956:	e001      	b.n	2b95c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2b958:	2317      	movs	r3, #23
   2b95a:	e000      	b.n	2b95e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2b95c:	2300      	movs	r3, #0
}
   2b95e:	0018      	movs	r0, r3
   2b960:	46bd      	mov	sp, r7
   2b962:	b002      	add	sp, #8
   2b964:	bd80      	pop	{r7, pc}
   2b966:	46c0      	nop			; (mov r8, r8)
   2b968:	40000400 	.word	0x40000400

0002b96c <system_interrupt_enter_critical_section>:
{
   2b96c:	b580      	push	{r7, lr}
   2b96e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2b970:	4b02      	ldr	r3, [pc, #8]	; (2b97c <system_interrupt_enter_critical_section+0x10>)
   2b972:	4798      	blx	r3
}
   2b974:	46c0      	nop			; (mov r8, r8)
   2b976:	46bd      	mov	sp, r7
   2b978:	bd80      	pop	{r7, pc}
   2b97a:	46c0      	nop			; (mov r8, r8)
   2b97c:	00027f4d 	.word	0x00027f4d

0002b980 <system_interrupt_leave_critical_section>:
{
   2b980:	b580      	push	{r7, lr}
   2b982:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2b984:	4b02      	ldr	r3, [pc, #8]	; (2b990 <system_interrupt_leave_critical_section+0x10>)
   2b986:	4798      	blx	r3
}
   2b988:	46c0      	nop			; (mov r8, r8)
   2b98a:	46bd      	mov	sp, r7
   2b98c:	bd80      	pop	{r7, pc}
   2b98e:	46c0      	nop			; (mov r8, r8)
   2b990:	00027fa1 	.word	0x00027fa1

0002b994 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   2b994:	b580      	push	{r7, lr}
   2b996:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   2b998:	4b05      	ldr	r3, [pc, #20]	; (2b9b0 <system_gclk_is_syncing+0x1c>)
   2b99a:	785b      	ldrb	r3, [r3, #1]
   2b99c:	b2db      	uxtb	r3, r3
   2b99e:	b25b      	sxtb	r3, r3
   2b9a0:	2b00      	cmp	r3, #0
   2b9a2:	da01      	bge.n	2b9a8 <system_gclk_is_syncing+0x14>
		return true;
   2b9a4:	2301      	movs	r3, #1
   2b9a6:	e000      	b.n	2b9aa <system_gclk_is_syncing+0x16>
	}

	return false;
   2b9a8:	2300      	movs	r3, #0
}
   2b9aa:	0018      	movs	r0, r3
   2b9ac:	46bd      	mov	sp, r7
   2b9ae:	bd80      	pop	{r7, pc}
   2b9b0:	40000c00 	.word	0x40000c00

0002b9b4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   2b9b4:	b580      	push	{r7, lr}
   2b9b6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   2b9b8:	2108      	movs	r1, #8
   2b9ba:	2000      	movs	r0, #0
   2b9bc:	4b07      	ldr	r3, [pc, #28]	; (2b9dc <system_gclk_init+0x28>)
   2b9be:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   2b9c0:	4b07      	ldr	r3, [pc, #28]	; (2b9e0 <system_gclk_init+0x2c>)
   2b9c2:	2201      	movs	r2, #1
   2b9c4:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   2b9c6:	46c0      	nop			; (mov r8, r8)
   2b9c8:	4b05      	ldr	r3, [pc, #20]	; (2b9e0 <system_gclk_init+0x2c>)
   2b9ca:	781b      	ldrb	r3, [r3, #0]
   2b9cc:	b2db      	uxtb	r3, r3
   2b9ce:	001a      	movs	r2, r3
   2b9d0:	2301      	movs	r3, #1
   2b9d2:	4013      	ands	r3, r2
   2b9d4:	d1f8      	bne.n	2b9c8 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   2b9d6:	46c0      	nop			; (mov r8, r8)
   2b9d8:	46bd      	mov	sp, r7
   2b9da:	bd80      	pop	{r7, pc}
   2b9dc:	0002b911 	.word	0x0002b911
   2b9e0:	40000c00 	.word	0x40000c00

0002b9e4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   2b9e4:	b580      	push	{r7, lr}
   2b9e6:	b086      	sub	sp, #24
   2b9e8:	af00      	add	r7, sp, #0
   2b9ea:	0002      	movs	r2, r0
   2b9ec:	6039      	str	r1, [r7, #0]
   2b9ee:	1dfb      	adds	r3, r7, #7
   2b9f0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   2b9f2:	1dfb      	adds	r3, r7, #7
   2b9f4:	781b      	ldrb	r3, [r3, #0]
   2b9f6:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   2b9f8:	1dfb      	adds	r3, r7, #7
   2b9fa:	781b      	ldrb	r3, [r3, #0]
   2b9fc:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   2b9fe:	683b      	ldr	r3, [r7, #0]
   2ba00:	781b      	ldrb	r3, [r3, #0]
   2ba02:	021b      	lsls	r3, r3, #8
   2ba04:	001a      	movs	r2, r3
   2ba06:	697b      	ldr	r3, [r7, #20]
   2ba08:	4313      	orrs	r3, r2
   2ba0a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   2ba0c:	683b      	ldr	r3, [r7, #0]
   2ba0e:	785b      	ldrb	r3, [r3, #1]
   2ba10:	2b00      	cmp	r3, #0
   2ba12:	d004      	beq.n	2ba1e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   2ba14:	697b      	ldr	r3, [r7, #20]
   2ba16:	2280      	movs	r2, #128	; 0x80
   2ba18:	02d2      	lsls	r2, r2, #11
   2ba1a:	4313      	orrs	r3, r2
   2ba1c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2ba1e:	683b      	ldr	r3, [r7, #0]
   2ba20:	7a5b      	ldrb	r3, [r3, #9]
   2ba22:	2b00      	cmp	r3, #0
   2ba24:	d004      	beq.n	2ba30 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   2ba26:	697b      	ldr	r3, [r7, #20]
   2ba28:	2280      	movs	r2, #128	; 0x80
   2ba2a:	0312      	lsls	r2, r2, #12
   2ba2c:	4313      	orrs	r3, r2
   2ba2e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   2ba30:	683b      	ldr	r3, [r7, #0]
   2ba32:	685b      	ldr	r3, [r3, #4]
   2ba34:	2b01      	cmp	r3, #1
   2ba36:	d92c      	bls.n	2ba92 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   2ba38:	683b      	ldr	r3, [r7, #0]
   2ba3a:	685a      	ldr	r2, [r3, #4]
   2ba3c:	683b      	ldr	r3, [r7, #0]
   2ba3e:	685b      	ldr	r3, [r3, #4]
   2ba40:	3b01      	subs	r3, #1
   2ba42:	4013      	ands	r3, r2
   2ba44:	d11a      	bne.n	2ba7c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   2ba46:	2300      	movs	r3, #0
   2ba48:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   2ba4a:	2302      	movs	r3, #2
   2ba4c:	60bb      	str	r3, [r7, #8]
   2ba4e:	e005      	b.n	2ba5c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   2ba50:	68fb      	ldr	r3, [r7, #12]
   2ba52:	3301      	adds	r3, #1
   2ba54:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   2ba56:	68bb      	ldr	r3, [r7, #8]
   2ba58:	005b      	lsls	r3, r3, #1
   2ba5a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   2ba5c:	683b      	ldr	r3, [r7, #0]
   2ba5e:	685a      	ldr	r2, [r3, #4]
   2ba60:	68bb      	ldr	r3, [r7, #8]
   2ba62:	429a      	cmp	r2, r3
   2ba64:	d8f4      	bhi.n	2ba50 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   2ba66:	68fb      	ldr	r3, [r7, #12]
   2ba68:	021b      	lsls	r3, r3, #8
   2ba6a:	693a      	ldr	r2, [r7, #16]
   2ba6c:	4313      	orrs	r3, r2
   2ba6e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   2ba70:	697b      	ldr	r3, [r7, #20]
   2ba72:	2280      	movs	r2, #128	; 0x80
   2ba74:	0352      	lsls	r2, r2, #13
   2ba76:	4313      	orrs	r3, r2
   2ba78:	617b      	str	r3, [r7, #20]
   2ba7a:	e00a      	b.n	2ba92 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   2ba7c:	683b      	ldr	r3, [r7, #0]
   2ba7e:	685b      	ldr	r3, [r3, #4]
   2ba80:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2ba82:	693a      	ldr	r2, [r7, #16]
   2ba84:	4313      	orrs	r3, r2
   2ba86:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   2ba88:	697b      	ldr	r3, [r7, #20]
   2ba8a:	2280      	movs	r2, #128	; 0x80
   2ba8c:	0292      	lsls	r2, r2, #10
   2ba8e:	4313      	orrs	r3, r2
   2ba90:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2ba92:	683b      	ldr	r3, [r7, #0]
   2ba94:	7a1b      	ldrb	r3, [r3, #8]
   2ba96:	2b00      	cmp	r3, #0
   2ba98:	d004      	beq.n	2baa4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   2ba9a:	697b      	ldr	r3, [r7, #20]
   2ba9c:	2280      	movs	r2, #128	; 0x80
   2ba9e:	0392      	lsls	r2, r2, #14
   2baa0:	4313      	orrs	r3, r2
   2baa2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2baa4:	46c0      	nop			; (mov r8, r8)
   2baa6:	4b13      	ldr	r3, [pc, #76]	; (2baf4 <system_gclk_gen_set_config+0x110>)
   2baa8:	4798      	blx	r3
   2baaa:	1e03      	subs	r3, r0, #0
   2baac:	d1fb      	bne.n	2baa6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2baae:	4b12      	ldr	r3, [pc, #72]	; (2baf8 <system_gclk_gen_set_config+0x114>)
   2bab0:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2bab2:	4a12      	ldr	r2, [pc, #72]	; (2bafc <system_gclk_gen_set_config+0x118>)
   2bab4:	1dfb      	adds	r3, r7, #7
   2bab6:	781b      	ldrb	r3, [r3, #0]
   2bab8:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   2baba:	46c0      	nop			; (mov r8, r8)
   2babc:	4b0d      	ldr	r3, [pc, #52]	; (2baf4 <system_gclk_gen_set_config+0x110>)
   2babe:	4798      	blx	r3
   2bac0:	1e03      	subs	r3, r0, #0
   2bac2:	d1fb      	bne.n	2babc <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   2bac4:	4b0e      	ldr	r3, [pc, #56]	; (2bb00 <system_gclk_gen_set_config+0x11c>)
   2bac6:	693a      	ldr	r2, [r7, #16]
   2bac8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   2baca:	46c0      	nop			; (mov r8, r8)
   2bacc:	4b09      	ldr	r3, [pc, #36]	; (2baf4 <system_gclk_gen_set_config+0x110>)
   2bace:	4798      	blx	r3
   2bad0:	1e03      	subs	r3, r0, #0
   2bad2:	d1fb      	bne.n	2bacc <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   2bad4:	4b0a      	ldr	r3, [pc, #40]	; (2bb00 <system_gclk_gen_set_config+0x11c>)
   2bad6:	4a0a      	ldr	r2, [pc, #40]	; (2bb00 <system_gclk_gen_set_config+0x11c>)
   2bad8:	6851      	ldr	r1, [r2, #4]
   2bada:	2280      	movs	r2, #128	; 0x80
   2badc:	0252      	lsls	r2, r2, #9
   2bade:	4011      	ands	r1, r2
   2bae0:	697a      	ldr	r2, [r7, #20]
   2bae2:	430a      	orrs	r2, r1
   2bae4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2bae6:	4b07      	ldr	r3, [pc, #28]	; (2bb04 <system_gclk_gen_set_config+0x120>)
   2bae8:	4798      	blx	r3
}
   2baea:	46c0      	nop			; (mov r8, r8)
   2baec:	46bd      	mov	sp, r7
   2baee:	b006      	add	sp, #24
   2baf0:	bd80      	pop	{r7, pc}
   2baf2:	46c0      	nop			; (mov r8, r8)
   2baf4:	0002b995 	.word	0x0002b995
   2baf8:	0002b96d 	.word	0x0002b96d
   2bafc:	40000c08 	.word	0x40000c08
   2bb00:	40000c00 	.word	0x40000c00
   2bb04:	0002b981 	.word	0x0002b981

0002bb08 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   2bb08:	b580      	push	{r7, lr}
   2bb0a:	b082      	sub	sp, #8
   2bb0c:	af00      	add	r7, sp, #0
   2bb0e:	0002      	movs	r2, r0
   2bb10:	1dfb      	adds	r3, r7, #7
   2bb12:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2bb14:	46c0      	nop			; (mov r8, r8)
   2bb16:	4b0e      	ldr	r3, [pc, #56]	; (2bb50 <system_gclk_gen_enable+0x48>)
   2bb18:	4798      	blx	r3
   2bb1a:	1e03      	subs	r3, r0, #0
   2bb1c:	d1fb      	bne.n	2bb16 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2bb1e:	4b0d      	ldr	r3, [pc, #52]	; (2bb54 <system_gclk_gen_enable+0x4c>)
   2bb20:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2bb22:	4a0d      	ldr	r2, [pc, #52]	; (2bb58 <system_gclk_gen_enable+0x50>)
   2bb24:	1dfb      	adds	r3, r7, #7
   2bb26:	781b      	ldrb	r3, [r3, #0]
   2bb28:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2bb2a:	46c0      	nop			; (mov r8, r8)
   2bb2c:	4b08      	ldr	r3, [pc, #32]	; (2bb50 <system_gclk_gen_enable+0x48>)
   2bb2e:	4798      	blx	r3
   2bb30:	1e03      	subs	r3, r0, #0
   2bb32:	d1fb      	bne.n	2bb2c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   2bb34:	4b09      	ldr	r3, [pc, #36]	; (2bb5c <system_gclk_gen_enable+0x54>)
   2bb36:	4a09      	ldr	r2, [pc, #36]	; (2bb5c <system_gclk_gen_enable+0x54>)
   2bb38:	6852      	ldr	r2, [r2, #4]
   2bb3a:	2180      	movs	r1, #128	; 0x80
   2bb3c:	0249      	lsls	r1, r1, #9
   2bb3e:	430a      	orrs	r2, r1
   2bb40:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2bb42:	4b07      	ldr	r3, [pc, #28]	; (2bb60 <system_gclk_gen_enable+0x58>)
   2bb44:	4798      	blx	r3
}
   2bb46:	46c0      	nop			; (mov r8, r8)
   2bb48:	46bd      	mov	sp, r7
   2bb4a:	b002      	add	sp, #8
   2bb4c:	bd80      	pop	{r7, pc}
   2bb4e:	46c0      	nop			; (mov r8, r8)
   2bb50:	0002b995 	.word	0x0002b995
   2bb54:	0002b96d 	.word	0x0002b96d
   2bb58:	40000c04 	.word	0x40000c04
   2bb5c:	40000c00 	.word	0x40000c00
   2bb60:	0002b981 	.word	0x0002b981

0002bb64 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2bb64:	b580      	push	{r7, lr}
   2bb66:	b086      	sub	sp, #24
   2bb68:	af00      	add	r7, sp, #0
   2bb6a:	0002      	movs	r2, r0
   2bb6c:	1dfb      	adds	r3, r7, #7
   2bb6e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2bb70:	46c0      	nop			; (mov r8, r8)
   2bb72:	4b2a      	ldr	r3, [pc, #168]	; (2bc1c <system_gclk_gen_get_hz+0xb8>)
   2bb74:	4798      	blx	r3
   2bb76:	1e03      	subs	r3, r0, #0
   2bb78:	d1fb      	bne.n	2bb72 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2bb7a:	4b29      	ldr	r3, [pc, #164]	; (2bc20 <system_gclk_gen_get_hz+0xbc>)
   2bb7c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2bb7e:	4a29      	ldr	r2, [pc, #164]	; (2bc24 <system_gclk_gen_get_hz+0xc0>)
   2bb80:	1dfb      	adds	r3, r7, #7
   2bb82:	781b      	ldrb	r3, [r3, #0]
   2bb84:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2bb86:	46c0      	nop			; (mov r8, r8)
   2bb88:	4b24      	ldr	r3, [pc, #144]	; (2bc1c <system_gclk_gen_get_hz+0xb8>)
   2bb8a:	4798      	blx	r3
   2bb8c:	1e03      	subs	r3, r0, #0
   2bb8e:	d1fb      	bne.n	2bb88 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   2bb90:	4b25      	ldr	r3, [pc, #148]	; (2bc28 <system_gclk_gen_get_hz+0xc4>)
   2bb92:	685b      	ldr	r3, [r3, #4]
   2bb94:	04db      	lsls	r3, r3, #19
   2bb96:	0edb      	lsrs	r3, r3, #27
   2bb98:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   2bb9a:	0018      	movs	r0, r3
   2bb9c:	4b23      	ldr	r3, [pc, #140]	; (2bc2c <system_gclk_gen_get_hz+0xc8>)
   2bb9e:	4798      	blx	r3
   2bba0:	0003      	movs	r3, r0
   2bba2:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2bba4:	4a1f      	ldr	r2, [pc, #124]	; (2bc24 <system_gclk_gen_get_hz+0xc0>)
   2bba6:	1dfb      	adds	r3, r7, #7
   2bba8:	781b      	ldrb	r3, [r3, #0]
   2bbaa:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   2bbac:	4b1e      	ldr	r3, [pc, #120]	; (2bc28 <system_gclk_gen_get_hz+0xc4>)
   2bbae:	685b      	ldr	r3, [r3, #4]
   2bbb0:	02db      	lsls	r3, r3, #11
   2bbb2:	0fdb      	lsrs	r3, r3, #31
   2bbb4:	b2da      	uxtb	r2, r3
   2bbb6:	2313      	movs	r3, #19
   2bbb8:	18fb      	adds	r3, r7, r3
   2bbba:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2bbbc:	4a1c      	ldr	r2, [pc, #112]	; (2bc30 <system_gclk_gen_get_hz+0xcc>)
   2bbbe:	1dfb      	adds	r3, r7, #7
   2bbc0:	781b      	ldrb	r3, [r3, #0]
   2bbc2:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2bbc4:	46c0      	nop			; (mov r8, r8)
   2bbc6:	4b15      	ldr	r3, [pc, #84]	; (2bc1c <system_gclk_gen_get_hz+0xb8>)
   2bbc8:	4798      	blx	r3
   2bbca:	1e03      	subs	r3, r0, #0
   2bbcc:	d1fb      	bne.n	2bbc6 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   2bbce:	4b16      	ldr	r3, [pc, #88]	; (2bc28 <system_gclk_gen_get_hz+0xc4>)
   2bbd0:	689b      	ldr	r3, [r3, #8]
   2bbd2:	021b      	lsls	r3, r3, #8
   2bbd4:	0c1b      	lsrs	r3, r3, #16
   2bbd6:	b29b      	uxth	r3, r3
   2bbd8:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   2bbda:	4b16      	ldr	r3, [pc, #88]	; (2bc34 <system_gclk_gen_get_hz+0xd0>)
   2bbdc:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   2bbde:	2313      	movs	r3, #19
   2bbe0:	18fb      	adds	r3, r7, r3
   2bbe2:	781b      	ldrb	r3, [r3, #0]
   2bbe4:	2b00      	cmp	r3, #0
   2bbe6:	d109      	bne.n	2bbfc <system_gclk_gen_get_hz+0x98>
   2bbe8:	68fb      	ldr	r3, [r7, #12]
   2bbea:	2b01      	cmp	r3, #1
   2bbec:	d906      	bls.n	2bbfc <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   2bbee:	4b12      	ldr	r3, [pc, #72]	; (2bc38 <system_gclk_gen_get_hz+0xd4>)
   2bbf0:	68f9      	ldr	r1, [r7, #12]
   2bbf2:	6978      	ldr	r0, [r7, #20]
   2bbf4:	4798      	blx	r3
   2bbf6:	0003      	movs	r3, r0
   2bbf8:	617b      	str	r3, [r7, #20]
   2bbfa:	e00a      	b.n	2bc12 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   2bbfc:	2313      	movs	r3, #19
   2bbfe:	18fb      	adds	r3, r7, r3
   2bc00:	781b      	ldrb	r3, [r3, #0]
   2bc02:	2b00      	cmp	r3, #0
   2bc04:	d005      	beq.n	2bc12 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   2bc06:	68fb      	ldr	r3, [r7, #12]
   2bc08:	3301      	adds	r3, #1
   2bc0a:	697a      	ldr	r2, [r7, #20]
   2bc0c:	40da      	lsrs	r2, r3
   2bc0e:	0013      	movs	r3, r2
   2bc10:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   2bc12:	697b      	ldr	r3, [r7, #20]
}
   2bc14:	0018      	movs	r0, r3
   2bc16:	46bd      	mov	sp, r7
   2bc18:	b006      	add	sp, #24
   2bc1a:	bd80      	pop	{r7, pc}
   2bc1c:	0002b995 	.word	0x0002b995
   2bc20:	0002b96d 	.word	0x0002b96d
   2bc24:	40000c04 	.word	0x40000c04
   2bc28:	40000c00 	.word	0x40000c00
   2bc2c:	0002b2c5 	.word	0x0002b2c5
   2bc30:	40000c08 	.word	0x40000c08
   2bc34:	0002b981 	.word	0x0002b981
   2bc38:	00034759 	.word	0x00034759

0002bc3c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   2bc3c:	b580      	push	{r7, lr}
   2bc3e:	b084      	sub	sp, #16
   2bc40:	af00      	add	r7, sp, #0
   2bc42:	0002      	movs	r2, r0
   2bc44:	6039      	str	r1, [r7, #0]
   2bc46:	1dfb      	adds	r3, r7, #7
   2bc48:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   2bc4a:	1dfb      	adds	r3, r7, #7
   2bc4c:	781b      	ldrb	r3, [r3, #0]
   2bc4e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   2bc50:	683b      	ldr	r3, [r7, #0]
   2bc52:	781b      	ldrb	r3, [r3, #0]
   2bc54:	021b      	lsls	r3, r3, #8
   2bc56:	001a      	movs	r2, r3
   2bc58:	68fb      	ldr	r3, [r7, #12]
   2bc5a:	4313      	orrs	r3, r2
   2bc5c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   2bc5e:	1dfb      	adds	r3, r7, #7
   2bc60:	781b      	ldrb	r3, [r3, #0]
   2bc62:	0018      	movs	r0, r3
   2bc64:	4b04      	ldr	r3, [pc, #16]	; (2bc78 <system_gclk_chan_set_config+0x3c>)
   2bc66:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   2bc68:	4b04      	ldr	r3, [pc, #16]	; (2bc7c <system_gclk_chan_set_config+0x40>)
   2bc6a:	68fa      	ldr	r2, [r7, #12]
   2bc6c:	b292      	uxth	r2, r2
   2bc6e:	805a      	strh	r2, [r3, #2]
}
   2bc70:	46c0      	nop			; (mov r8, r8)
   2bc72:	46bd      	mov	sp, r7
   2bc74:	b004      	add	sp, #16
   2bc76:	bd80      	pop	{r7, pc}
   2bc78:	0002bcc9 	.word	0x0002bcc9
   2bc7c:	40000c00 	.word	0x40000c00

0002bc80 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   2bc80:	b580      	push	{r7, lr}
   2bc82:	b082      	sub	sp, #8
   2bc84:	af00      	add	r7, sp, #0
   2bc86:	0002      	movs	r2, r0
   2bc88:	1dfb      	adds	r3, r7, #7
   2bc8a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2bc8c:	4b0a      	ldr	r3, [pc, #40]	; (2bcb8 <system_gclk_chan_enable+0x38>)
   2bc8e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2bc90:	4a0a      	ldr	r2, [pc, #40]	; (2bcbc <system_gclk_chan_enable+0x3c>)
   2bc92:	1dfb      	adds	r3, r7, #7
   2bc94:	781b      	ldrb	r3, [r3, #0]
   2bc96:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   2bc98:	4909      	ldr	r1, [pc, #36]	; (2bcc0 <system_gclk_chan_enable+0x40>)
   2bc9a:	4b09      	ldr	r3, [pc, #36]	; (2bcc0 <system_gclk_chan_enable+0x40>)
   2bc9c:	885b      	ldrh	r3, [r3, #2]
   2bc9e:	b29b      	uxth	r3, r3
   2bca0:	2280      	movs	r2, #128	; 0x80
   2bca2:	01d2      	lsls	r2, r2, #7
   2bca4:	4313      	orrs	r3, r2
   2bca6:	b29b      	uxth	r3, r3
   2bca8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   2bcaa:	4b06      	ldr	r3, [pc, #24]	; (2bcc4 <system_gclk_chan_enable+0x44>)
   2bcac:	4798      	blx	r3
}
   2bcae:	46c0      	nop			; (mov r8, r8)
   2bcb0:	46bd      	mov	sp, r7
   2bcb2:	b002      	add	sp, #8
   2bcb4:	bd80      	pop	{r7, pc}
   2bcb6:	46c0      	nop			; (mov r8, r8)
   2bcb8:	0002b96d 	.word	0x0002b96d
   2bcbc:	40000c02 	.word	0x40000c02
   2bcc0:	40000c00 	.word	0x40000c00
   2bcc4:	0002b981 	.word	0x0002b981

0002bcc8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   2bcc8:	b580      	push	{r7, lr}
   2bcca:	b084      	sub	sp, #16
   2bccc:	af00      	add	r7, sp, #0
   2bcce:	0002      	movs	r2, r0
   2bcd0:	1dfb      	adds	r3, r7, #7
   2bcd2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2bcd4:	4b1c      	ldr	r3, [pc, #112]	; (2bd48 <system_gclk_chan_disable+0x80>)
   2bcd6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2bcd8:	4a1c      	ldr	r2, [pc, #112]	; (2bd4c <system_gclk_chan_disable+0x84>)
   2bcda:	1dfb      	adds	r3, r7, #7
   2bcdc:	781b      	ldrb	r3, [r3, #0]
   2bcde:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   2bce0:	4b1b      	ldr	r3, [pc, #108]	; (2bd50 <system_gclk_chan_disable+0x88>)
   2bce2:	885b      	ldrh	r3, [r3, #2]
   2bce4:	051b      	lsls	r3, r3, #20
   2bce6:	0f1b      	lsrs	r3, r3, #28
   2bce8:	b2db      	uxtb	r3, r3
   2bcea:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   2bcec:	4a18      	ldr	r2, [pc, #96]	; (2bd50 <system_gclk_chan_disable+0x88>)
   2bcee:	8853      	ldrh	r3, [r2, #2]
   2bcf0:	4918      	ldr	r1, [pc, #96]	; (2bd54 <system_gclk_chan_disable+0x8c>)
   2bcf2:	400b      	ands	r3, r1
   2bcf4:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   2bcf6:	4a16      	ldr	r2, [pc, #88]	; (2bd50 <system_gclk_chan_disable+0x88>)
   2bcf8:	4b15      	ldr	r3, [pc, #84]	; (2bd50 <system_gclk_chan_disable+0x88>)
   2bcfa:	885b      	ldrh	r3, [r3, #2]
   2bcfc:	b29b      	uxth	r3, r3
   2bcfe:	4916      	ldr	r1, [pc, #88]	; (2bd58 <system_gclk_chan_disable+0x90>)
   2bd00:	400b      	ands	r3, r1
   2bd02:	b29b      	uxth	r3, r3
   2bd04:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   2bd06:	46c0      	nop			; (mov r8, r8)
   2bd08:	4b11      	ldr	r3, [pc, #68]	; (2bd50 <system_gclk_chan_disable+0x88>)
   2bd0a:	885b      	ldrh	r3, [r3, #2]
   2bd0c:	b29b      	uxth	r3, r3
   2bd0e:	001a      	movs	r2, r3
   2bd10:	2380      	movs	r3, #128	; 0x80
   2bd12:	01db      	lsls	r3, r3, #7
   2bd14:	4013      	ands	r3, r2
   2bd16:	d1f7      	bne.n	2bd08 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   2bd18:	4a0d      	ldr	r2, [pc, #52]	; (2bd50 <system_gclk_chan_disable+0x88>)
   2bd1a:	68fb      	ldr	r3, [r7, #12]
   2bd1c:	b2db      	uxtb	r3, r3
   2bd1e:	1c19      	adds	r1, r3, #0
   2bd20:	230f      	movs	r3, #15
   2bd22:	400b      	ands	r3, r1
   2bd24:	b2d9      	uxtb	r1, r3
   2bd26:	8853      	ldrh	r3, [r2, #2]
   2bd28:	1c08      	adds	r0, r1, #0
   2bd2a:	210f      	movs	r1, #15
   2bd2c:	4001      	ands	r1, r0
   2bd2e:	0208      	lsls	r0, r1, #8
   2bd30:	4908      	ldr	r1, [pc, #32]	; (2bd54 <system_gclk_chan_disable+0x8c>)
   2bd32:	400b      	ands	r3, r1
   2bd34:	1c19      	adds	r1, r3, #0
   2bd36:	1c03      	adds	r3, r0, #0
   2bd38:	430b      	orrs	r3, r1
   2bd3a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   2bd3c:	4b07      	ldr	r3, [pc, #28]	; (2bd5c <system_gclk_chan_disable+0x94>)
   2bd3e:	4798      	blx	r3
}
   2bd40:	46c0      	nop			; (mov r8, r8)
   2bd42:	46bd      	mov	sp, r7
   2bd44:	b004      	add	sp, #16
   2bd46:	bd80      	pop	{r7, pc}
   2bd48:	0002b96d 	.word	0x0002b96d
   2bd4c:	40000c02 	.word	0x40000c02
   2bd50:	40000c00 	.word	0x40000c00
   2bd54:	fffff0ff 	.word	0xfffff0ff
   2bd58:	ffffbfff 	.word	0xffffbfff
   2bd5c:	0002b981 	.word	0x0002b981

0002bd60 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   2bd60:	b580      	push	{r7, lr}
   2bd62:	b084      	sub	sp, #16
   2bd64:	af00      	add	r7, sp, #0
   2bd66:	0002      	movs	r2, r0
   2bd68:	1dfb      	adds	r3, r7, #7
   2bd6a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   2bd6c:	4b0d      	ldr	r3, [pc, #52]	; (2bda4 <system_gclk_chan_get_hz+0x44>)
   2bd6e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2bd70:	4a0d      	ldr	r2, [pc, #52]	; (2bda8 <system_gclk_chan_get_hz+0x48>)
   2bd72:	1dfb      	adds	r3, r7, #7
   2bd74:	781b      	ldrb	r3, [r3, #0]
   2bd76:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   2bd78:	4b0c      	ldr	r3, [pc, #48]	; (2bdac <system_gclk_chan_get_hz+0x4c>)
   2bd7a:	885b      	ldrh	r3, [r3, #2]
   2bd7c:	051b      	lsls	r3, r3, #20
   2bd7e:	0f1b      	lsrs	r3, r3, #28
   2bd80:	b2da      	uxtb	r2, r3
   2bd82:	230f      	movs	r3, #15
   2bd84:	18fb      	adds	r3, r7, r3
   2bd86:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   2bd88:	4b09      	ldr	r3, [pc, #36]	; (2bdb0 <system_gclk_chan_get_hz+0x50>)
   2bd8a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   2bd8c:	230f      	movs	r3, #15
   2bd8e:	18fb      	adds	r3, r7, r3
   2bd90:	781b      	ldrb	r3, [r3, #0]
   2bd92:	0018      	movs	r0, r3
   2bd94:	4b07      	ldr	r3, [pc, #28]	; (2bdb4 <system_gclk_chan_get_hz+0x54>)
   2bd96:	4798      	blx	r3
   2bd98:	0003      	movs	r3, r0
}
   2bd9a:	0018      	movs	r0, r3
   2bd9c:	46bd      	mov	sp, r7
   2bd9e:	b004      	add	sp, #16
   2bda0:	bd80      	pop	{r7, pc}
   2bda2:	46c0      	nop			; (mov r8, r8)
   2bda4:	0002b96d 	.word	0x0002b96d
   2bda8:	40000c02 	.word	0x40000c02
   2bdac:	40000c00 	.word	0x40000c00
   2bdb0:	0002b981 	.word	0x0002b981
   2bdb4:	0002bb65 	.word	0x0002bb65

0002bdb8 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   2bdb8:	b580      	push	{r7, lr}
   2bdba:	b084      	sub	sp, #16
   2bdbc:	af00      	add	r7, sp, #0
   2bdbe:	0002      	movs	r2, r0
   2bdc0:	1dfb      	adds	r3, r7, #7
   2bdc2:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   2bdc4:	230f      	movs	r3, #15
   2bdc6:	18fb      	adds	r3, r7, r3
   2bdc8:	2200      	movs	r2, #0
   2bdca:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   2bdcc:	1dfb      	adds	r3, r7, #7
   2bdce:	781b      	ldrb	r3, [r3, #0]
   2bdd0:	2b7f      	cmp	r3, #127	; 0x7f
   2bdd2:	d80b      	bhi.n	2bdec <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   2bdd4:	4a13      	ldr	r2, [pc, #76]	; (2be24 <system_interrupt_clear_pending+0x6c>)
   2bdd6:	1dfb      	adds	r3, r7, #7
   2bdd8:	781b      	ldrb	r3, [r3, #0]
   2bdda:	b25b      	sxtb	r3, r3
   2bddc:	2101      	movs	r1, #1
   2bdde:	4099      	lsls	r1, r3
   2bde0:	000b      	movs	r3, r1
   2bde2:	0019      	movs	r1, r3
   2bde4:	23c0      	movs	r3, #192	; 0xc0
   2bde6:	005b      	lsls	r3, r3, #1
   2bde8:	50d1      	str	r1, [r2, r3]
   2bdea:	e014      	b.n	2be16 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   2bdec:	1dfb      	adds	r3, r7, #7
   2bdee:	781b      	ldrb	r3, [r3, #0]
   2bdf0:	b25b      	sxtb	r3, r3
   2bdf2:	330e      	adds	r3, #14
   2bdf4:	d101      	bne.n	2bdfa <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   2bdf6:	2317      	movs	r3, #23
   2bdf8:	e010      	b.n	2be1c <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   2bdfa:	1dfb      	adds	r3, r7, #7
   2bdfc:	781b      	ldrb	r3, [r3, #0]
   2bdfe:	b25b      	sxtb	r3, r3
   2be00:	3301      	adds	r3, #1
   2be02:	d104      	bne.n	2be0e <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   2be04:	4b08      	ldr	r3, [pc, #32]	; (2be28 <system_interrupt_clear_pending+0x70>)
   2be06:	2280      	movs	r2, #128	; 0x80
   2be08:	0492      	lsls	r2, r2, #18
   2be0a:	605a      	str	r2, [r3, #4]
   2be0c:	e003      	b.n	2be16 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   2be0e:	230f      	movs	r3, #15
   2be10:	18fb      	adds	r3, r7, r3
   2be12:	2217      	movs	r2, #23
   2be14:	701a      	strb	r2, [r3, #0]
	}

	return status;
   2be16:	230f      	movs	r3, #15
   2be18:	18fb      	adds	r3, r7, r3
   2be1a:	781b      	ldrb	r3, [r3, #0]
}
   2be1c:	0018      	movs	r0, r3
   2be1e:	46bd      	mov	sp, r7
   2be20:	b004      	add	sp, #16
   2be22:	bd80      	pop	{r7, pc}
   2be24:	e000e100 	.word	0xe000e100
   2be28:	e000ed00 	.word	0xe000ed00

0002be2c <system_pinmux_get_group_from_gpio_pin>:
{
   2be2c:	b580      	push	{r7, lr}
   2be2e:	b084      	sub	sp, #16
   2be30:	af00      	add	r7, sp, #0
   2be32:	0002      	movs	r2, r0
   2be34:	1dfb      	adds	r3, r7, #7
   2be36:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2be38:	230f      	movs	r3, #15
   2be3a:	18fb      	adds	r3, r7, r3
   2be3c:	1dfa      	adds	r2, r7, #7
   2be3e:	7812      	ldrb	r2, [r2, #0]
   2be40:	09d2      	lsrs	r2, r2, #7
   2be42:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2be44:	230e      	movs	r3, #14
   2be46:	18fb      	adds	r3, r7, r3
   2be48:	1dfa      	adds	r2, r7, #7
   2be4a:	7812      	ldrb	r2, [r2, #0]
   2be4c:	0952      	lsrs	r2, r2, #5
   2be4e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2be50:	4b0d      	ldr	r3, [pc, #52]	; (2be88 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2be52:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2be54:	230f      	movs	r3, #15
   2be56:	18fb      	adds	r3, r7, r3
   2be58:	781b      	ldrb	r3, [r3, #0]
   2be5a:	2b00      	cmp	r3, #0
   2be5c:	d10f      	bne.n	2be7e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2be5e:	230f      	movs	r3, #15
   2be60:	18fb      	adds	r3, r7, r3
   2be62:	781b      	ldrb	r3, [r3, #0]
   2be64:	009b      	lsls	r3, r3, #2
   2be66:	2210      	movs	r2, #16
   2be68:	4694      	mov	ip, r2
   2be6a:	44bc      	add	ip, r7
   2be6c:	4463      	add	r3, ip
   2be6e:	3b08      	subs	r3, #8
   2be70:	681a      	ldr	r2, [r3, #0]
   2be72:	230e      	movs	r3, #14
   2be74:	18fb      	adds	r3, r7, r3
   2be76:	781b      	ldrb	r3, [r3, #0]
   2be78:	01db      	lsls	r3, r3, #7
   2be7a:	18d3      	adds	r3, r2, r3
   2be7c:	e000      	b.n	2be80 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2be7e:	2300      	movs	r3, #0
}
   2be80:	0018      	movs	r0, r3
   2be82:	46bd      	mov	sp, r7
   2be84:	b004      	add	sp, #16
   2be86:	bd80      	pop	{r7, pc}
   2be88:	41004400 	.word	0x41004400

0002be8c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   2be8c:	b580      	push	{r7, lr}
   2be8e:	b088      	sub	sp, #32
   2be90:	af00      	add	r7, sp, #0
   2be92:	60f8      	str	r0, [r7, #12]
   2be94:	60b9      	str	r1, [r7, #8]
   2be96:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   2be98:	2300      	movs	r3, #0
   2be9a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   2be9c:	687b      	ldr	r3, [r7, #4]
   2be9e:	78db      	ldrb	r3, [r3, #3]
   2bea0:	2201      	movs	r2, #1
   2bea2:	4053      	eors	r3, r2
   2bea4:	b2db      	uxtb	r3, r3
   2bea6:	2b00      	cmp	r3, #0
   2bea8:	d035      	beq.n	2bf16 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2beaa:	687b      	ldr	r3, [r7, #4]
   2beac:	781b      	ldrb	r3, [r3, #0]
   2beae:	2b80      	cmp	r3, #128	; 0x80
   2beb0:	d00b      	beq.n	2beca <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   2beb2:	69fb      	ldr	r3, [r7, #28]
   2beb4:	2280      	movs	r2, #128	; 0x80
   2beb6:	0252      	lsls	r2, r2, #9
   2beb8:	4313      	orrs	r3, r2
   2beba:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   2bebc:	687b      	ldr	r3, [r7, #4]
   2bebe:	781b      	ldrb	r3, [r3, #0]
   2bec0:	061b      	lsls	r3, r3, #24
   2bec2:	001a      	movs	r2, r3
   2bec4:	69fb      	ldr	r3, [r7, #28]
   2bec6:	4313      	orrs	r3, r2
   2bec8:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2beca:	687b      	ldr	r3, [r7, #4]
   2becc:	785b      	ldrb	r3, [r3, #1]
   2bece:	2b00      	cmp	r3, #0
   2bed0:	d003      	beq.n	2beda <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2bed2:	687b      	ldr	r3, [r7, #4]
   2bed4:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2bed6:	2b02      	cmp	r3, #2
   2bed8:	d110      	bne.n	2befc <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2beda:	69fb      	ldr	r3, [r7, #28]
   2bedc:	2280      	movs	r2, #128	; 0x80
   2bede:	0292      	lsls	r2, r2, #10
   2bee0:	4313      	orrs	r3, r2
   2bee2:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   2bee4:	687b      	ldr	r3, [r7, #4]
   2bee6:	789b      	ldrb	r3, [r3, #2]
   2bee8:	2b00      	cmp	r3, #0
   2beea:	d004      	beq.n	2bef6 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   2beec:	69fb      	ldr	r3, [r7, #28]
   2beee:	2280      	movs	r2, #128	; 0x80
   2bef0:	02d2      	lsls	r2, r2, #11
   2bef2:	4313      	orrs	r3, r2
   2bef4:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2bef6:	68fb      	ldr	r3, [r7, #12]
   2bef8:	68ba      	ldr	r2, [r7, #8]
   2befa:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2befc:	687b      	ldr	r3, [r7, #4]
   2befe:	785b      	ldrb	r3, [r3, #1]
   2bf00:	2b01      	cmp	r3, #1
   2bf02:	d003      	beq.n	2bf0c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2bf04:	687b      	ldr	r3, [r7, #4]
   2bf06:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2bf08:	2b02      	cmp	r3, #2
   2bf0a:	d107      	bne.n	2bf1c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   2bf0c:	69fb      	ldr	r3, [r7, #28]
   2bf0e:	4a22      	ldr	r2, [pc, #136]	; (2bf98 <_system_pinmux_config+0x10c>)
   2bf10:	4013      	ands	r3, r2
   2bf12:	61fb      	str	r3, [r7, #28]
   2bf14:	e002      	b.n	2bf1c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2bf16:	68fb      	ldr	r3, [r7, #12]
   2bf18:	68ba      	ldr	r2, [r7, #8]
   2bf1a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   2bf1c:	68bb      	ldr	r3, [r7, #8]
   2bf1e:	041b      	lsls	r3, r3, #16
   2bf20:	0c1b      	lsrs	r3, r3, #16
   2bf22:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   2bf24:	68bb      	ldr	r3, [r7, #8]
   2bf26:	0c1b      	lsrs	r3, r3, #16
   2bf28:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2bf2a:	69ba      	ldr	r2, [r7, #24]
   2bf2c:	69fb      	ldr	r3, [r7, #28]
   2bf2e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   2bf30:	22a0      	movs	r2, #160	; 0xa0
   2bf32:	05d2      	lsls	r2, r2, #23
   2bf34:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2bf36:	68fb      	ldr	r3, [r7, #12]
   2bf38:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2bf3a:	697a      	ldr	r2, [r7, #20]
   2bf3c:	69fb      	ldr	r3, [r7, #28]
   2bf3e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   2bf40:	22d0      	movs	r2, #208	; 0xd0
   2bf42:	0612      	lsls	r2, r2, #24
   2bf44:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2bf46:	68fb      	ldr	r3, [r7, #12]
   2bf48:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2bf4a:	687b      	ldr	r3, [r7, #4]
   2bf4c:	78db      	ldrb	r3, [r3, #3]
   2bf4e:	2201      	movs	r2, #1
   2bf50:	4053      	eors	r3, r2
   2bf52:	b2db      	uxtb	r3, r3
   2bf54:	2b00      	cmp	r3, #0
   2bf56:	d01a      	beq.n	2bf8e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   2bf58:	69fa      	ldr	r2, [r7, #28]
   2bf5a:	2380      	movs	r3, #128	; 0x80
   2bf5c:	02db      	lsls	r3, r3, #11
   2bf5e:	4013      	ands	r3, r2
   2bf60:	d00a      	beq.n	2bf78 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   2bf62:	687b      	ldr	r3, [r7, #4]
   2bf64:	789b      	ldrb	r3, [r3, #2]
   2bf66:	2b01      	cmp	r3, #1
   2bf68:	d103      	bne.n	2bf72 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2bf6a:	68fb      	ldr	r3, [r7, #12]
   2bf6c:	68ba      	ldr	r2, [r7, #8]
   2bf6e:	619a      	str	r2, [r3, #24]
   2bf70:	e002      	b.n	2bf78 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   2bf72:	68fb      	ldr	r3, [r7, #12]
   2bf74:	68ba      	ldr	r2, [r7, #8]
   2bf76:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2bf78:	687b      	ldr	r3, [r7, #4]
   2bf7a:	785b      	ldrb	r3, [r3, #1]
   2bf7c:	2b01      	cmp	r3, #1
   2bf7e:	d003      	beq.n	2bf88 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2bf80:	687b      	ldr	r3, [r7, #4]
   2bf82:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2bf84:	2b02      	cmp	r3, #2
   2bf86:	d102      	bne.n	2bf8e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   2bf88:	68fb      	ldr	r3, [r7, #12]
   2bf8a:	68ba      	ldr	r2, [r7, #8]
   2bf8c:	609a      	str	r2, [r3, #8]
		}
	}
}
   2bf8e:	46c0      	nop			; (mov r8, r8)
   2bf90:	46bd      	mov	sp, r7
   2bf92:	b008      	add	sp, #32
   2bf94:	bd80      	pop	{r7, pc}
   2bf96:	46c0      	nop			; (mov r8, r8)
   2bf98:	fffbffff 	.word	0xfffbffff

0002bf9c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   2bf9c:	b580      	push	{r7, lr}
   2bf9e:	b084      	sub	sp, #16
   2bfa0:	af00      	add	r7, sp, #0
   2bfa2:	0002      	movs	r2, r0
   2bfa4:	6039      	str	r1, [r7, #0]
   2bfa6:	1dfb      	adds	r3, r7, #7
   2bfa8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2bfaa:	1dfb      	adds	r3, r7, #7
   2bfac:	781b      	ldrb	r3, [r3, #0]
   2bfae:	0018      	movs	r0, r3
   2bfb0:	4b0a      	ldr	r3, [pc, #40]	; (2bfdc <system_pinmux_pin_set_config+0x40>)
   2bfb2:	4798      	blx	r3
   2bfb4:	0003      	movs	r3, r0
   2bfb6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   2bfb8:	1dfb      	adds	r3, r7, #7
   2bfba:	781b      	ldrb	r3, [r3, #0]
   2bfbc:	221f      	movs	r2, #31
   2bfbe:	4013      	ands	r3, r2
   2bfc0:	2201      	movs	r2, #1
   2bfc2:	409a      	lsls	r2, r3
   2bfc4:	0013      	movs	r3, r2
   2bfc6:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2bfc8:	683a      	ldr	r2, [r7, #0]
   2bfca:	68b9      	ldr	r1, [r7, #8]
   2bfcc:	68fb      	ldr	r3, [r7, #12]
   2bfce:	0018      	movs	r0, r3
   2bfd0:	4b03      	ldr	r3, [pc, #12]	; (2bfe0 <system_pinmux_pin_set_config+0x44>)
   2bfd2:	4798      	blx	r3
}
   2bfd4:	46c0      	nop			; (mov r8, r8)
   2bfd6:	46bd      	mov	sp, r7
   2bfd8:	b004      	add	sp, #16
   2bfda:	bd80      	pop	{r7, pc}
   2bfdc:	0002be2d 	.word	0x0002be2d
   2bfe0:	0002be8d 	.word	0x0002be8d

0002bfe4 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   2bfe4:	b580      	push	{r7, lr}
   2bfe6:	af00      	add	r7, sp, #0
	return;
   2bfe8:	46c0      	nop			; (mov r8, r8)
}
   2bfea:	46bd      	mov	sp, r7
   2bfec:	bd80      	pop	{r7, pc}
	...

0002bff0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   2bff0:	b580      	push	{r7, lr}
   2bff2:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   2bff4:	4b06      	ldr	r3, [pc, #24]	; (2c010 <system_init+0x20>)
   2bff6:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2bff8:	4b06      	ldr	r3, [pc, #24]	; (2c014 <system_init+0x24>)
   2bffa:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   2bffc:	4b06      	ldr	r3, [pc, #24]	; (2c018 <system_init+0x28>)
   2bffe:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   2c000:	4b06      	ldr	r3, [pc, #24]	; (2c01c <system_init+0x2c>)
   2c002:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   2c004:	4b06      	ldr	r3, [pc, #24]	; (2c020 <system_init+0x30>)
   2c006:	4798      	blx	r3
}
   2c008:	46c0      	nop			; (mov r8, r8)
   2c00a:	46bd      	mov	sp, r7
   2c00c:	bd80      	pop	{r7, pc}
   2c00e:	46c0      	nop			; (mov r8, r8)
   2c010:	0002b671 	.word	0x0002b671
   2c014:	000280dd 	.word	0x000280dd
   2c018:	00012669 	.word	0x00012669
   2c01c:	000284b5 	.word	0x000284b5
   2c020:	0002bfe5 	.word	0x0002bfe5

0002c024 <system_gclk_chan_get_config_defaults>:
{
   2c024:	b580      	push	{r7, lr}
   2c026:	b082      	sub	sp, #8
   2c028:	af00      	add	r7, sp, #0
   2c02a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2c02c:	687b      	ldr	r3, [r7, #4]
   2c02e:	2200      	movs	r2, #0
   2c030:	701a      	strb	r2, [r3, #0]
}
   2c032:	46c0      	nop			; (mov r8, r8)
   2c034:	46bd      	mov	sp, r7
   2c036:	b002      	add	sp, #8
   2c038:	bd80      	pop	{r7, pc}
	...

0002c03c <system_apb_clock_set_mask>:
{
   2c03c:	b580      	push	{r7, lr}
   2c03e:	b082      	sub	sp, #8
   2c040:	af00      	add	r7, sp, #0
   2c042:	0002      	movs	r2, r0
   2c044:	6039      	str	r1, [r7, #0]
   2c046:	1dfb      	adds	r3, r7, #7
   2c048:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2c04a:	1dfb      	adds	r3, r7, #7
   2c04c:	781b      	ldrb	r3, [r3, #0]
   2c04e:	2b01      	cmp	r3, #1
   2c050:	d00a      	beq.n	2c068 <system_apb_clock_set_mask+0x2c>
   2c052:	2b02      	cmp	r3, #2
   2c054:	d00f      	beq.n	2c076 <system_apb_clock_set_mask+0x3a>
   2c056:	2b00      	cmp	r3, #0
   2c058:	d114      	bne.n	2c084 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2c05a:	4b0e      	ldr	r3, [pc, #56]	; (2c094 <system_apb_clock_set_mask+0x58>)
   2c05c:	4a0d      	ldr	r2, [pc, #52]	; (2c094 <system_apb_clock_set_mask+0x58>)
   2c05e:	6991      	ldr	r1, [r2, #24]
   2c060:	683a      	ldr	r2, [r7, #0]
   2c062:	430a      	orrs	r2, r1
   2c064:	619a      	str	r2, [r3, #24]
			break;
   2c066:	e00f      	b.n	2c088 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2c068:	4b0a      	ldr	r3, [pc, #40]	; (2c094 <system_apb_clock_set_mask+0x58>)
   2c06a:	4a0a      	ldr	r2, [pc, #40]	; (2c094 <system_apb_clock_set_mask+0x58>)
   2c06c:	69d1      	ldr	r1, [r2, #28]
   2c06e:	683a      	ldr	r2, [r7, #0]
   2c070:	430a      	orrs	r2, r1
   2c072:	61da      	str	r2, [r3, #28]
			break;
   2c074:	e008      	b.n	2c088 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2c076:	4b07      	ldr	r3, [pc, #28]	; (2c094 <system_apb_clock_set_mask+0x58>)
   2c078:	4a06      	ldr	r2, [pc, #24]	; (2c094 <system_apb_clock_set_mask+0x58>)
   2c07a:	6a11      	ldr	r1, [r2, #32]
   2c07c:	683a      	ldr	r2, [r7, #0]
   2c07e:	430a      	orrs	r2, r1
   2c080:	621a      	str	r2, [r3, #32]
			break;
   2c082:	e001      	b.n	2c088 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2c084:	2317      	movs	r3, #23
   2c086:	e000      	b.n	2c08a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2c088:	2300      	movs	r3, #0
}
   2c08a:	0018      	movs	r0, r3
   2c08c:	46bd      	mov	sp, r7
   2c08e:	b002      	add	sp, #8
   2c090:	bd80      	pop	{r7, pc}
   2c092:	46c0      	nop			; (mov r8, r8)
   2c094:	40000400 	.word	0x40000400

0002c098 <system_pinmux_get_config_defaults>:
{
   2c098:	b580      	push	{r7, lr}
   2c09a:	b082      	sub	sp, #8
   2c09c:	af00      	add	r7, sp, #0
   2c09e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2c0a0:	687b      	ldr	r3, [r7, #4]
   2c0a2:	2280      	movs	r2, #128	; 0x80
   2c0a4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2c0a6:	687b      	ldr	r3, [r7, #4]
   2c0a8:	2200      	movs	r2, #0
   2c0aa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2c0ac:	687b      	ldr	r3, [r7, #4]
   2c0ae:	2201      	movs	r2, #1
   2c0b0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2c0b2:	687b      	ldr	r3, [r7, #4]
   2c0b4:	2200      	movs	r2, #0
   2c0b6:	70da      	strb	r2, [r3, #3]
}
   2c0b8:	46c0      	nop			; (mov r8, r8)
   2c0ba:	46bd      	mov	sp, r7
   2c0bc:	b002      	add	sp, #8
   2c0be:	bd80      	pop	{r7, pc}

0002c0c0 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   2c0c0:	b580      	push	{r7, lr}
   2c0c2:	b084      	sub	sp, #16
   2c0c4:	af00      	add	r7, sp, #0
   2c0c6:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2c0c8:	2300      	movs	r3, #0
   2c0ca:	60fb      	str	r3, [r7, #12]
   2c0cc:	e00c      	b.n	2c0e8 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   2c0ce:	4b0a      	ldr	r3, [pc, #40]	; (2c0f8 <_tcc_get_inst_index+0x38>)
   2c0d0:	68fa      	ldr	r2, [r7, #12]
   2c0d2:	0092      	lsls	r2, r2, #2
   2c0d4:	58d2      	ldr	r2, [r2, r3]
   2c0d6:	687b      	ldr	r3, [r7, #4]
   2c0d8:	429a      	cmp	r2, r3
   2c0da:	d102      	bne.n	2c0e2 <_tcc_get_inst_index+0x22>
			return i;
   2c0dc:	68fb      	ldr	r3, [r7, #12]
   2c0de:	b2db      	uxtb	r3, r3
   2c0e0:	e006      	b.n	2c0f0 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2c0e2:	68fb      	ldr	r3, [r7, #12]
   2c0e4:	3301      	adds	r3, #1
   2c0e6:	60fb      	str	r3, [r7, #12]
   2c0e8:	68fb      	ldr	r3, [r7, #12]
   2c0ea:	2b02      	cmp	r3, #2
   2c0ec:	d9ef      	bls.n	2c0ce <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2c0ee:	2300      	movs	r3, #0
}
   2c0f0:	0018      	movs	r0, r3
   2c0f2:	46bd      	mov	sp, r7
   2c0f4:	b004      	add	sp, #16
   2c0f6:	bd80      	pop	{r7, pc}
   2c0f8:	0003bac8 	.word	0x0003bac8

0002c0fc <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   2c0fc:	b590      	push	{r4, r7, lr}
   2c0fe:	b085      	sub	sp, #20
   2c100:	af00      	add	r7, sp, #0
   2c102:	6078      	str	r0, [r7, #4]
   2c104:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2c106:	230f      	movs	r3, #15
   2c108:	18fc      	adds	r4, r7, r3
   2c10a:	683b      	ldr	r3, [r7, #0]
   2c10c:	0018      	movs	r0, r3
   2c10e:	4bad      	ldr	r3, [pc, #692]	; (2c3c4 <tcc_get_config_defaults+0x2c8>)
   2c110:	4798      	blx	r3
   2c112:	0003      	movs	r3, r0
   2c114:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   2c116:	687b      	ldr	r3, [r7, #4]
   2c118:	2200      	movs	r2, #0
   2c11a:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   2c11c:	230f      	movs	r3, #15
   2c11e:	18fb      	adds	r3, r7, r3
   2c120:	781a      	ldrb	r2, [r3, #0]
   2c122:	4ba9      	ldr	r3, [pc, #676]	; (2c3c8 <tcc_get_config_defaults+0x2cc>)
   2c124:	0092      	lsls	r2, r2, #2
   2c126:	58d2      	ldr	r2, [r2, r3]
   2c128:	687b      	ldr	r3, [r7, #4]
   2c12a:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   2c12c:	687b      	ldr	r3, [r7, #4]
   2c12e:	2200      	movs	r2, #0
   2c130:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   2c132:	687b      	ldr	r3, [r7, #4]
   2c134:	2200      	movs	r2, #0
   2c136:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   2c138:	687b      	ldr	r3, [r7, #4]
   2c13a:	2200      	movs	r2, #0
   2c13c:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2c13e:	687b      	ldr	r3, [r7, #4]
   2c140:	2200      	movs	r2, #0
   2c142:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   2c144:	687b      	ldr	r3, [r7, #4]
   2c146:	2200      	movs	r2, #0
   2c148:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2c14a:	687b      	ldr	r3, [r7, #4]
   2c14c:	2200      	movs	r2, #0
   2c14e:	61da      	str	r2, [r3, #28]
   2c150:	687b      	ldr	r3, [r7, #4]
   2c152:	2200      	movs	r2, #0
   2c154:	621a      	str	r2, [r3, #32]
   2c156:	687b      	ldr	r3, [r7, #4]
   2c158:	2200      	movs	r2, #0
   2c15a:	625a      	str	r2, [r3, #36]	; 0x24
   2c15c:	687b      	ldr	r3, [r7, #4]
   2c15e:	2200      	movs	r2, #0
   2c160:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2c162:	687b      	ldr	r3, [r7, #4]
   2c164:	2200      	movs	r2, #0
   2c166:	751a      	strb	r2, [r3, #20]
   2c168:	687b      	ldr	r3, [r7, #4]
   2c16a:	2200      	movs	r2, #0
   2c16c:	755a      	strb	r2, [r3, #21]
   2c16e:	687b      	ldr	r3, [r7, #4]
   2c170:	2200      	movs	r2, #0
   2c172:	759a      	strb	r2, [r3, #22]
   2c174:	687b      	ldr	r3, [r7, #4]
   2c176:	2200      	movs	r2, #0
   2c178:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   2c17a:	687b      	ldr	r3, [r7, #4]
   2c17c:	2200      	movs	r2, #0
   2c17e:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   2c180:	687b      	ldr	r3, [r7, #4]
   2c182:	2200      	movs	r2, #0
   2c184:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2c186:	687b      	ldr	r3, [r7, #4]
   2c188:	2200      	movs	r2, #0
   2c18a:	741a      	strb	r2, [r3, #16]
   2c18c:	687b      	ldr	r3, [r7, #4]
   2c18e:	2200      	movs	r2, #0
   2c190:	745a      	strb	r2, [r3, #17]
   2c192:	687b      	ldr	r3, [r7, #4]
   2c194:	2200      	movs	r2, #0
   2c196:	749a      	strb	r2, [r3, #18]
   2c198:	687b      	ldr	r3, [r7, #4]
   2c19a:	2200      	movs	r2, #0
   2c19c:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2c19e:	687b      	ldr	r3, [r7, #4]
   2c1a0:	222c      	movs	r2, #44	; 0x2c
   2c1a2:	2100      	movs	r1, #0
   2c1a4:	5499      	strb	r1, [r3, r2]
   2c1a6:	687b      	ldr	r3, [r7, #4]
   2c1a8:	222d      	movs	r2, #45	; 0x2d
   2c1aa:	2100      	movs	r1, #0
   2c1ac:	5499      	strb	r1, [r3, r2]
   2c1ae:	687b      	ldr	r3, [r7, #4]
   2c1b0:	222e      	movs	r2, #46	; 0x2e
   2c1b2:	2100      	movs	r1, #0
   2c1b4:	5499      	strb	r1, [r3, r2]
   2c1b6:	687b      	ldr	r3, [r7, #4]
   2c1b8:	222f      	movs	r2, #47	; 0x2f
   2c1ba:	2100      	movs	r1, #0
   2c1bc:	5499      	strb	r1, [r3, r2]
   2c1be:	687b      	ldr	r3, [r7, #4]
   2c1c0:	2230      	movs	r2, #48	; 0x30
   2c1c2:	2100      	movs	r1, #0
   2c1c4:	5499      	strb	r1, [r3, r2]
   2c1c6:	687b      	ldr	r3, [r7, #4]
   2c1c8:	2231      	movs	r2, #49	; 0x31
   2c1ca:	2100      	movs	r1, #0
   2c1cc:	5499      	strb	r1, [r3, r2]
   2c1ce:	687b      	ldr	r3, [r7, #4]
   2c1d0:	2232      	movs	r2, #50	; 0x32
   2c1d2:	2100      	movs	r1, #0
   2c1d4:	5499      	strb	r1, [r3, r2]
   2c1d6:	687b      	ldr	r3, [r7, #4]
   2c1d8:	2233      	movs	r2, #51	; 0x33
   2c1da:	2100      	movs	r1, #0
   2c1dc:	5499      	strb	r1, [r3, r2]
   2c1de:	687b      	ldr	r3, [r7, #4]
   2c1e0:	2234      	movs	r2, #52	; 0x34
   2c1e2:	2100      	movs	r1, #0
   2c1e4:	5499      	strb	r1, [r3, r2]
   2c1e6:	687b      	ldr	r3, [r7, #4]
   2c1e8:	2235      	movs	r2, #53	; 0x35
   2c1ea:	2100      	movs	r1, #0
   2c1ec:	5499      	strb	r1, [r3, r2]
   2c1ee:	687b      	ldr	r3, [r7, #4]
   2c1f0:	2236      	movs	r2, #54	; 0x36
   2c1f2:	2100      	movs	r1, #0
   2c1f4:	5499      	strb	r1, [r3, r2]
   2c1f6:	687b      	ldr	r3, [r7, #4]
   2c1f8:	2237      	movs	r2, #55	; 0x37
   2c1fa:	2100      	movs	r1, #0
   2c1fc:	5499      	strb	r1, [r3, r2]
   2c1fe:	687b      	ldr	r3, [r7, #4]
   2c200:	2238      	movs	r2, #56	; 0x38
   2c202:	2100      	movs	r1, #0
   2c204:	5499      	strb	r1, [r3, r2]
   2c206:	687b      	ldr	r3, [r7, #4]
   2c208:	2239      	movs	r2, #57	; 0x39
   2c20a:	2100      	movs	r1, #0
   2c20c:	5499      	strb	r1, [r3, r2]
   2c20e:	687b      	ldr	r3, [r7, #4]
   2c210:	223a      	movs	r2, #58	; 0x3a
   2c212:	2100      	movs	r1, #0
   2c214:	5499      	strb	r1, [r3, r2]
   2c216:	687b      	ldr	r3, [r7, #4]
   2c218:	223b      	movs	r2, #59	; 0x3b
   2c21a:	2100      	movs	r1, #0
   2c21c:	5499      	strb	r1, [r3, r2]
   2c21e:	687b      	ldr	r3, [r7, #4]
   2c220:	223c      	movs	r2, #60	; 0x3c
   2c222:	2100      	movs	r1, #0
   2c224:	5499      	strb	r1, [r3, r2]
   2c226:	687b      	ldr	r3, [r7, #4]
   2c228:	223d      	movs	r2, #61	; 0x3d
   2c22a:	2100      	movs	r1, #0
   2c22c:	5499      	strb	r1, [r3, r2]
   2c22e:	687b      	ldr	r3, [r7, #4]
   2c230:	223e      	movs	r2, #62	; 0x3e
   2c232:	2100      	movs	r1, #0
   2c234:	5499      	strb	r1, [r3, r2]
   2c236:	687b      	ldr	r3, [r7, #4]
   2c238:	223f      	movs	r2, #63	; 0x3f
   2c23a:	2100      	movs	r1, #0
   2c23c:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2c23e:	687b      	ldr	r3, [r7, #4]
   2c240:	2240      	movs	r2, #64	; 0x40
   2c242:	2100      	movs	r1, #0
   2c244:	5499      	strb	r1, [r3, r2]
   2c246:	687b      	ldr	r3, [r7, #4]
   2c248:	2241      	movs	r2, #65	; 0x41
   2c24a:	2100      	movs	r1, #0
   2c24c:	5499      	strb	r1, [r3, r2]
   2c24e:	687b      	ldr	r3, [r7, #4]
   2c250:	2242      	movs	r2, #66	; 0x42
   2c252:	2100      	movs	r1, #0
   2c254:	5499      	strb	r1, [r3, r2]
   2c256:	687b      	ldr	r3, [r7, #4]
   2c258:	2243      	movs	r2, #67	; 0x43
   2c25a:	2100      	movs	r1, #0
   2c25c:	5499      	strb	r1, [r3, r2]
   2c25e:	687b      	ldr	r3, [r7, #4]
   2c260:	2244      	movs	r2, #68	; 0x44
   2c262:	2100      	movs	r1, #0
   2c264:	5499      	strb	r1, [r3, r2]
   2c266:	687b      	ldr	r3, [r7, #4]
   2c268:	2245      	movs	r2, #69	; 0x45
   2c26a:	2100      	movs	r1, #0
   2c26c:	5499      	strb	r1, [r3, r2]
   2c26e:	687b      	ldr	r3, [r7, #4]
   2c270:	2246      	movs	r2, #70	; 0x46
   2c272:	2100      	movs	r1, #0
   2c274:	5499      	strb	r1, [r3, r2]
   2c276:	687b      	ldr	r3, [r7, #4]
   2c278:	2247      	movs	r2, #71	; 0x47
   2c27a:	2100      	movs	r1, #0
   2c27c:	5499      	strb	r1, [r3, r2]
   2c27e:	687b      	ldr	r3, [r7, #4]
   2c280:	2248      	movs	r2, #72	; 0x48
   2c282:	2100      	movs	r1, #0
   2c284:	5499      	strb	r1, [r3, r2]
   2c286:	687b      	ldr	r3, [r7, #4]
   2c288:	2249      	movs	r2, #73	; 0x49
   2c28a:	2100      	movs	r1, #0
   2c28c:	5499      	strb	r1, [r3, r2]
   2c28e:	687b      	ldr	r3, [r7, #4]
   2c290:	224a      	movs	r2, #74	; 0x4a
   2c292:	2100      	movs	r1, #0
   2c294:	5499      	strb	r1, [r3, r2]
   2c296:	687b      	ldr	r3, [r7, #4]
   2c298:	224b      	movs	r2, #75	; 0x4b
   2c29a:	2100      	movs	r1, #0
   2c29c:	5499      	strb	r1, [r3, r2]
   2c29e:	687b      	ldr	r3, [r7, #4]
   2c2a0:	224c      	movs	r2, #76	; 0x4c
   2c2a2:	2100      	movs	r1, #0
   2c2a4:	5499      	strb	r1, [r3, r2]
   2c2a6:	687b      	ldr	r3, [r7, #4]
   2c2a8:	224d      	movs	r2, #77	; 0x4d
   2c2aa:	2100      	movs	r1, #0
   2c2ac:	5499      	strb	r1, [r3, r2]
   2c2ae:	687b      	ldr	r3, [r7, #4]
   2c2b0:	224e      	movs	r2, #78	; 0x4e
   2c2b2:	2100      	movs	r1, #0
   2c2b4:	5499      	strb	r1, [r3, r2]
   2c2b6:	687b      	ldr	r3, [r7, #4]
   2c2b8:	224f      	movs	r2, #79	; 0x4f
   2c2ba:	2100      	movs	r1, #0
   2c2bc:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2c2be:	687b      	ldr	r3, [r7, #4]
   2c2c0:	2250      	movs	r2, #80	; 0x50
   2c2c2:	2100      	movs	r1, #0
   2c2c4:	5499      	strb	r1, [r3, r2]
   2c2c6:	687b      	ldr	r3, [r7, #4]
   2c2c8:	2251      	movs	r2, #81	; 0x51
   2c2ca:	2100      	movs	r1, #0
   2c2cc:	5499      	strb	r1, [r3, r2]
   2c2ce:	687b      	ldr	r3, [r7, #4]
   2c2d0:	2252      	movs	r2, #82	; 0x52
   2c2d2:	2100      	movs	r1, #0
   2c2d4:	5499      	strb	r1, [r3, r2]
   2c2d6:	687b      	ldr	r3, [r7, #4]
   2c2d8:	2253      	movs	r2, #83	; 0x53
   2c2da:	2100      	movs	r1, #0
   2c2dc:	5499      	strb	r1, [r3, r2]
   2c2de:	687b      	ldr	r3, [r7, #4]
   2c2e0:	2254      	movs	r2, #84	; 0x54
   2c2e2:	2100      	movs	r1, #0
   2c2e4:	5499      	strb	r1, [r3, r2]
   2c2e6:	687b      	ldr	r3, [r7, #4]
   2c2e8:	2255      	movs	r2, #85	; 0x55
   2c2ea:	2100      	movs	r1, #0
   2c2ec:	5499      	strb	r1, [r3, r2]
   2c2ee:	687b      	ldr	r3, [r7, #4]
   2c2f0:	2256      	movs	r2, #86	; 0x56
   2c2f2:	2100      	movs	r1, #0
   2c2f4:	5499      	strb	r1, [r3, r2]
   2c2f6:	687b      	ldr	r3, [r7, #4]
   2c2f8:	2257      	movs	r2, #87	; 0x57
   2c2fa:	2100      	movs	r1, #0
   2c2fc:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2c2fe:	687b      	ldr	r3, [r7, #4]
   2c300:	2298      	movs	r2, #152	; 0x98
   2c302:	2100      	movs	r1, #0
   2c304:	5499      	strb	r1, [r3, r2]
   2c306:	687b      	ldr	r3, [r7, #4]
   2c308:	2200      	movs	r2, #0
   2c30a:	659a      	str	r2, [r3, #88]	; 0x58
   2c30c:	687b      	ldr	r3, [r7, #4]
   2c30e:	2200      	movs	r2, #0
   2c310:	679a      	str	r2, [r3, #120]	; 0x78
   2c312:	687b      	ldr	r3, [r7, #4]
   2c314:	2299      	movs	r2, #153	; 0x99
   2c316:	2100      	movs	r1, #0
   2c318:	5499      	strb	r1, [r3, r2]
   2c31a:	687b      	ldr	r3, [r7, #4]
   2c31c:	2200      	movs	r2, #0
   2c31e:	65da      	str	r2, [r3, #92]	; 0x5c
   2c320:	687b      	ldr	r3, [r7, #4]
   2c322:	2200      	movs	r2, #0
   2c324:	67da      	str	r2, [r3, #124]	; 0x7c
   2c326:	687b      	ldr	r3, [r7, #4]
   2c328:	229a      	movs	r2, #154	; 0x9a
   2c32a:	2100      	movs	r1, #0
   2c32c:	5499      	strb	r1, [r3, r2]
   2c32e:	687b      	ldr	r3, [r7, #4]
   2c330:	2200      	movs	r2, #0
   2c332:	661a      	str	r2, [r3, #96]	; 0x60
   2c334:	687b      	ldr	r3, [r7, #4]
   2c336:	2280      	movs	r2, #128	; 0x80
   2c338:	2100      	movs	r1, #0
   2c33a:	5099      	str	r1, [r3, r2]
   2c33c:	687b      	ldr	r3, [r7, #4]
   2c33e:	229b      	movs	r2, #155	; 0x9b
   2c340:	2100      	movs	r1, #0
   2c342:	5499      	strb	r1, [r3, r2]
   2c344:	687b      	ldr	r3, [r7, #4]
   2c346:	2200      	movs	r2, #0
   2c348:	665a      	str	r2, [r3, #100]	; 0x64
   2c34a:	687b      	ldr	r3, [r7, #4]
   2c34c:	2284      	movs	r2, #132	; 0x84
   2c34e:	2100      	movs	r1, #0
   2c350:	5099      	str	r1, [r3, r2]
   2c352:	687b      	ldr	r3, [r7, #4]
   2c354:	229c      	movs	r2, #156	; 0x9c
   2c356:	2100      	movs	r1, #0
   2c358:	5499      	strb	r1, [r3, r2]
   2c35a:	687b      	ldr	r3, [r7, #4]
   2c35c:	2200      	movs	r2, #0
   2c35e:	669a      	str	r2, [r3, #104]	; 0x68
   2c360:	687b      	ldr	r3, [r7, #4]
   2c362:	2288      	movs	r2, #136	; 0x88
   2c364:	2100      	movs	r1, #0
   2c366:	5099      	str	r1, [r3, r2]
   2c368:	687b      	ldr	r3, [r7, #4]
   2c36a:	229d      	movs	r2, #157	; 0x9d
   2c36c:	2100      	movs	r1, #0
   2c36e:	5499      	strb	r1, [r3, r2]
   2c370:	687b      	ldr	r3, [r7, #4]
   2c372:	2200      	movs	r2, #0
   2c374:	66da      	str	r2, [r3, #108]	; 0x6c
   2c376:	687b      	ldr	r3, [r7, #4]
   2c378:	228c      	movs	r2, #140	; 0x8c
   2c37a:	2100      	movs	r1, #0
   2c37c:	5099      	str	r1, [r3, r2]
   2c37e:	687b      	ldr	r3, [r7, #4]
   2c380:	229e      	movs	r2, #158	; 0x9e
   2c382:	2100      	movs	r1, #0
   2c384:	5499      	strb	r1, [r3, r2]
   2c386:	687b      	ldr	r3, [r7, #4]
   2c388:	2200      	movs	r2, #0
   2c38a:	671a      	str	r2, [r3, #112]	; 0x70
   2c38c:	687b      	ldr	r3, [r7, #4]
   2c38e:	2290      	movs	r2, #144	; 0x90
   2c390:	2100      	movs	r1, #0
   2c392:	5099      	str	r1, [r3, r2]
   2c394:	687b      	ldr	r3, [r7, #4]
   2c396:	229f      	movs	r2, #159	; 0x9f
   2c398:	2100      	movs	r1, #0
   2c39a:	5499      	strb	r1, [r3, r2]
   2c39c:	687b      	ldr	r3, [r7, #4]
   2c39e:	2200      	movs	r2, #0
   2c3a0:	675a      	str	r2, [r3, #116]	; 0x74
   2c3a2:	687b      	ldr	r3, [r7, #4]
   2c3a4:	2294      	movs	r2, #148	; 0x94
   2c3a6:	2100      	movs	r1, #0
   2c3a8:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   2c3aa:	687b      	ldr	r3, [r7, #4]
   2c3ac:	22a0      	movs	r2, #160	; 0xa0
   2c3ae:	2101      	movs	r1, #1
   2c3b0:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   2c3b2:	687b      	ldr	r3, [r7, #4]
   2c3b4:	22a1      	movs	r2, #161	; 0xa1
   2c3b6:	2100      	movs	r1, #0
   2c3b8:	5499      	strb	r1, [r3, r2]
}
   2c3ba:	46c0      	nop			; (mov r8, r8)
   2c3bc:	46bd      	mov	sp, r7
   2c3be:	b005      	add	sp, #20
   2c3c0:	bd90      	pop	{r4, r7, pc}
   2c3c2:	46c0      	nop			; (mov r8, r8)
   2c3c4:	0002c0c1 	.word	0x0002c0c1
   2c3c8:	0003bae4 	.word	0x0003bae4

0002c3cc <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2c3cc:	b580      	push	{r7, lr}
   2c3ce:	b086      	sub	sp, #24
   2c3d0:	af00      	add	r7, sp, #0
   2c3d2:	60b9      	str	r1, [r7, #8]
   2c3d4:	607a      	str	r2, [r7, #4]
   2c3d6:	230f      	movs	r3, #15
   2c3d8:	18fb      	adds	r3, r7, r3
   2c3da:	1c02      	adds	r2, r0, #0
   2c3dc:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2c3de:	2300      	movs	r3, #0
   2c3e0:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2c3e2:	2300      	movs	r3, #0
   2c3e4:	613b      	str	r3, [r7, #16]
   2c3e6:	e01d      	b.n	2c424 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2c3e8:	68ba      	ldr	r2, [r7, #8]
   2c3ea:	693b      	ldr	r3, [r7, #16]
   2c3ec:	18d3      	adds	r3, r2, r3
   2c3ee:	3310      	adds	r3, #16
   2c3f0:	781b      	ldrb	r3, [r3, #0]
   2c3f2:	2b01      	cmp	r3, #1
   2c3f4:	d113      	bne.n	2c41e <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2c3f6:	230f      	movs	r3, #15
   2c3f8:	18fb      	adds	r3, r7, r3
   2c3fa:	781b      	ldrb	r3, [r3, #0]
   2c3fc:	4a1b      	ldr	r2, [pc, #108]	; (2c46c <_tcc_build_ctrla+0xa0>)
   2c3fe:	5cd3      	ldrb	r3, [r2, r3]
   2c400:	001a      	movs	r2, r3
   2c402:	693b      	ldr	r3, [r7, #16]
   2c404:	429a      	cmp	r2, r3
   2c406:	da01      	bge.n	2c40c <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2c408:	2317      	movs	r3, #23
   2c40a:	e02a      	b.n	2c462 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2c40c:	2380      	movs	r3, #128	; 0x80
   2c40e:	045a      	lsls	r2, r3, #17
   2c410:	693b      	ldr	r3, [r7, #16]
   2c412:	409a      	lsls	r2, r3
   2c414:	0013      	movs	r3, r2
   2c416:	001a      	movs	r2, r3
   2c418:	697b      	ldr	r3, [r7, #20]
   2c41a:	4313      	orrs	r3, r2
   2c41c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2c41e:	693b      	ldr	r3, [r7, #16]
   2c420:	3301      	adds	r3, #1
   2c422:	613b      	str	r3, [r7, #16]
   2c424:	693b      	ldr	r3, [r7, #16]
   2c426:	2b03      	cmp	r3, #3
   2c428:	ddde      	ble.n	2c3e8 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2c42a:	68bb      	ldr	r3, [r7, #8]
   2c42c:	22a1      	movs	r2, #161	; 0xa1
   2c42e:	5c9b      	ldrb	r3, [r3, r2]
   2c430:	2b00      	cmp	r3, #0
   2c432:	d004      	beq.n	2c43e <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2c434:	697b      	ldr	r3, [r7, #20]
   2c436:	2280      	movs	r2, #128	; 0x80
   2c438:	0112      	lsls	r2, r2, #4
   2c43a:	4313      	orrs	r3, r2
   2c43c:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2c43e:	68bb      	ldr	r3, [r7, #8]
   2c440:	7b1b      	ldrb	r3, [r3, #12]
   2c442:	031b      	lsls	r3, r3, #12
   2c444:	001a      	movs	r2, r3
   2c446:	697b      	ldr	r3, [r7, #20]
   2c448:	4313      	orrs	r3, r2
   2c44a:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2c44c:	68bb      	ldr	r3, [r7, #8]
   2c44e:	7adb      	ldrb	r3, [r3, #11]
   2c450:	021b      	lsls	r3, r3, #8
   2c452:	001a      	movs	r2, r3
   2c454:	697b      	ldr	r3, [r7, #20]
   2c456:	4313      	orrs	r3, r2
   2c458:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2c45a:	687b      	ldr	r3, [r7, #4]
   2c45c:	697a      	ldr	r2, [r7, #20]
   2c45e:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2c460:	2300      	movs	r3, #0
}
   2c462:	0018      	movs	r0, r3
   2c464:	46bd      	mov	sp, r7
   2c466:	b006      	add	sp, #24
   2c468:	bd80      	pop	{r7, pc}
   2c46a:	46c0      	nop			; (mov r8, r8)
   2c46c:	0003baf0 	.word	0x0003baf0

0002c470 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2c470:	b580      	push	{r7, lr}
   2c472:	b086      	sub	sp, #24
   2c474:	af00      	add	r7, sp, #0
   2c476:	60b9      	str	r1, [r7, #8]
   2c478:	607a      	str	r2, [r7, #4]
   2c47a:	230f      	movs	r3, #15
   2c47c:	18fb      	adds	r3, r7, r3
   2c47e:	1c02      	adds	r2, r0, #0
   2c480:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2c482:	2317      	movs	r3, #23
   2c484:	18fb      	adds	r3, r7, r3
   2c486:	2200      	movs	r2, #0
   2c488:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2c48a:	68bb      	ldr	r3, [r7, #8]
   2c48c:	7a1b      	ldrb	r3, [r3, #8]
   2c48e:	2b00      	cmp	r3, #0
   2c490:	d007      	beq.n	2c4a2 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2c492:	2317      	movs	r3, #23
   2c494:	18fb      	adds	r3, r7, r3
   2c496:	2217      	movs	r2, #23
   2c498:	18ba      	adds	r2, r7, r2
   2c49a:	7812      	ldrb	r2, [r2, #0]
   2c49c:	2104      	movs	r1, #4
   2c49e:	430a      	orrs	r2, r1
   2c4a0:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2c4a2:	68bb      	ldr	r3, [r7, #8]
   2c4a4:	7a5b      	ldrb	r3, [r3, #9]
   2c4a6:	2b01      	cmp	r3, #1
   2c4a8:	d107      	bne.n	2c4ba <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2c4aa:	2317      	movs	r3, #23
   2c4ac:	18fb      	adds	r3, r7, r3
   2c4ae:	2217      	movs	r2, #23
   2c4b0:	18ba      	adds	r2, r7, r2
   2c4b2:	7812      	ldrb	r2, [r2, #0]
   2c4b4:	2101      	movs	r1, #1
   2c4b6:	430a      	orrs	r2, r1
   2c4b8:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2c4ba:	687b      	ldr	r3, [r7, #4]
   2c4bc:	2217      	movs	r2, #23
   2c4be:	18ba      	adds	r2, r7, r2
   2c4c0:	7812      	ldrb	r2, [r2, #0]
   2c4c2:	701a      	strb	r2, [r3, #0]
}
   2c4c4:	46c0      	nop			; (mov r8, r8)
   2c4c6:	46bd      	mov	sp, r7
   2c4c8:	b006      	add	sp, #24
   2c4ca:	bd80      	pop	{r7, pc}

0002c4cc <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2c4cc:	b580      	push	{r7, lr}
   2c4ce:	b088      	sub	sp, #32
   2c4d0:	af00      	add	r7, sp, #0
   2c4d2:	60b9      	str	r1, [r7, #8]
   2c4d4:	607a      	str	r2, [r7, #4]
   2c4d6:	230f      	movs	r3, #15
   2c4d8:	18fb      	adds	r3, r7, r3
   2c4da:	1c02      	adds	r2, r0, #0
   2c4dc:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2c4de:	230f      	movs	r3, #15
   2c4e0:	18fb      	adds	r3, r7, r3
   2c4e2:	781a      	ldrb	r2, [r3, #0]
   2c4e4:	231b      	movs	r3, #27
   2c4e6:	18fb      	adds	r3, r7, r3
   2c4e8:	493e      	ldr	r1, [pc, #248]	; (2c5e4 <_tcc_build_faults+0x118>)
   2c4ea:	5c8a      	ldrb	r2, [r1, r2]
   2c4ec:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2c4ee:	2300      	movs	r3, #0
   2c4f0:	61fb      	str	r3, [r7, #28]
   2c4f2:	e06e      	b.n	2c5d2 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2c4f4:	69fa      	ldr	r2, [r7, #28]
   2c4f6:	0013      	movs	r3, r2
   2c4f8:	009b      	lsls	r3, r3, #2
   2c4fa:	189b      	adds	r3, r3, r2
   2c4fc:	005b      	lsls	r3, r3, #1
   2c4fe:	3328      	adds	r3, #40	; 0x28
   2c500:	68ba      	ldr	r2, [r7, #8]
   2c502:	18d3      	adds	r3, r2, r3
   2c504:	3304      	adds	r3, #4
   2c506:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2c508:	697b      	ldr	r3, [r7, #20]
   2c50a:	7a5b      	ldrb	r3, [r3, #9]
   2c50c:	221b      	movs	r2, #27
   2c50e:	18ba      	adds	r2, r7, r2
   2c510:	7812      	ldrb	r2, [r2, #0]
   2c512:	429a      	cmp	r2, r3
   2c514:	d801      	bhi.n	2c51a <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2c516:	2317      	movs	r3, #23
   2c518:	e05f      	b.n	2c5da <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2c51a:	697b      	ldr	r3, [r7, #20]
   2c51c:	781b      	ldrb	r3, [r3, #0]
   2c51e:	2b0f      	cmp	r3, #15
   2c520:	d901      	bls.n	2c526 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2c522:	2317      	movs	r3, #23
   2c524:	e059      	b.n	2c5da <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2c526:	697b      	ldr	r3, [r7, #20]
   2c528:	781b      	ldrb	r3, [r3, #0]
   2c52a:	061b      	lsls	r3, r3, #24
   2c52c:	001a      	movs	r2, r3
   2c52e:	23f0      	movs	r3, #240	; 0xf0
   2c530:	051b      	lsls	r3, r3, #20
   2c532:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2c534:	697b      	ldr	r3, [r7, #20]
   2c536:	785b      	ldrb	r3, [r3, #1]
   2c538:	041b      	lsls	r3, r3, #16
   2c53a:	0019      	movs	r1, r3
   2c53c:	23ff      	movs	r3, #255	; 0xff
   2c53e:	041b      	lsls	r3, r3, #16
   2c540:	400b      	ands	r3, r1
   2c542:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2c544:	697b      	ldr	r3, [r7, #20]
   2c546:	789b      	ldrb	r3, [r3, #2]
   2c548:	2b00      	cmp	r3, #0
   2c54a:	d001      	beq.n	2c550 <_tcc_build_faults+0x84>
   2c54c:	2380      	movs	r3, #128	; 0x80
   2c54e:	e000      	b.n	2c552 <_tcc_build_faults+0x86>
   2c550:	2300      	movs	r3, #0
   2c552:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2c554:	697b      	ldr	r3, [r7, #20]
   2c556:	78db      	ldrb	r3, [r3, #3]
   2c558:	2b00      	cmp	r3, #0
   2c55a:	d001      	beq.n	2c560 <_tcc_build_faults+0x94>
   2c55c:	2308      	movs	r3, #8
   2c55e:	e000      	b.n	2c562 <_tcc_build_faults+0x96>
   2c560:	2300      	movs	r3, #0
   2c562:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2c564:	697b      	ldr	r3, [r7, #20]
   2c566:	791b      	ldrb	r3, [r3, #4]
   2c568:	2b00      	cmp	r3, #0
   2c56a:	d001      	beq.n	2c570 <_tcc_build_faults+0xa4>
   2c56c:	2310      	movs	r3, #16
   2c56e:	e000      	b.n	2c572 <_tcc_build_faults+0xa6>
   2c570:	2300      	movs	r3, #0
   2c572:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2c574:	697b      	ldr	r3, [r7, #20]
   2c576:	795b      	ldrb	r3, [r3, #5]
   2c578:	0019      	movs	r1, r3
   2c57a:	2303      	movs	r3, #3
   2c57c:	400b      	ands	r3, r1
   2c57e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2c580:	697b      	ldr	r3, [r7, #20]
   2c582:	799b      	ldrb	r3, [r3, #6]
   2c584:	015b      	lsls	r3, r3, #5
   2c586:	0019      	movs	r1, r3
   2c588:	2360      	movs	r3, #96	; 0x60
   2c58a:	400b      	ands	r3, r1
   2c58c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2c58e:	697b      	ldr	r3, [r7, #20]
   2c590:	79db      	ldrb	r3, [r3, #7]
   2c592:	021b      	lsls	r3, r3, #8
   2c594:	0019      	movs	r1, r3
   2c596:	23c0      	movs	r3, #192	; 0xc0
   2c598:	009b      	lsls	r3, r3, #2
   2c59a:	400b      	ands	r3, r1
   2c59c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2c59e:	697b      	ldr	r3, [r7, #20]
   2c5a0:	7a1b      	ldrb	r3, [r3, #8]
   2c5a2:	031b      	lsls	r3, r3, #12
   2c5a4:	0019      	movs	r1, r3
   2c5a6:	23e0      	movs	r3, #224	; 0xe0
   2c5a8:	01db      	lsls	r3, r3, #7
   2c5aa:	400b      	ands	r3, r1
   2c5ac:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2c5ae:	697b      	ldr	r3, [r7, #20]
   2c5b0:	7a5b      	ldrb	r3, [r3, #9]
   2c5b2:	029b      	lsls	r3, r3, #10
   2c5b4:	0019      	movs	r1, r3
   2c5b6:	23c0      	movs	r3, #192	; 0xc0
   2c5b8:	011b      	lsls	r3, r3, #4
   2c5ba:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2c5bc:	4313      	orrs	r3, r2
   2c5be:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2c5c0:	69fb      	ldr	r3, [r7, #28]
   2c5c2:	009b      	lsls	r3, r3, #2
   2c5c4:	687a      	ldr	r2, [r7, #4]
   2c5c6:	18d3      	adds	r3, r2, r3
   2c5c8:	693a      	ldr	r2, [r7, #16]
   2c5ca:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2c5cc:	69fb      	ldr	r3, [r7, #28]
   2c5ce:	3301      	adds	r3, #1
   2c5d0:	61fb      	str	r3, [r7, #28]
   2c5d2:	69fb      	ldr	r3, [r7, #28]
   2c5d4:	2b01      	cmp	r3, #1
   2c5d6:	dd8d      	ble.n	2c4f4 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2c5d8:	2300      	movs	r3, #0
}
   2c5da:	0018      	movs	r0, r3
   2c5dc:	46bd      	mov	sp, r7
   2c5de:	b008      	add	sp, #32
   2c5e0:	bd80      	pop	{r7, pc}
   2c5e2:	46c0      	nop			; (mov r8, r8)
   2c5e4:	0003baf0 	.word	0x0003baf0

0002c5e8 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2c5e8:	b580      	push	{r7, lr}
   2c5ea:	b088      	sub	sp, #32
   2c5ec:	af00      	add	r7, sp, #0
   2c5ee:	60b9      	str	r1, [r7, #8]
   2c5f0:	607a      	str	r2, [r7, #4]
   2c5f2:	230f      	movs	r3, #15
   2c5f4:	18fb      	adds	r3, r7, r3
   2c5f6:	1c02      	adds	r2, r0, #0
   2c5f8:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2c5fa:	230f      	movs	r3, #15
   2c5fc:	18fb      	adds	r3, r7, r3
   2c5fe:	781a      	ldrb	r2, [r3, #0]
   2c600:	2317      	movs	r3, #23
   2c602:	18fb      	adds	r3, r7, r3
   2c604:	492d      	ldr	r1, [pc, #180]	; (2c6bc <_tcc_build_drvctrl+0xd4>)
   2c606:	5c8a      	ldrb	r2, [r1, r2]
   2c608:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2c60a:	2300      	movs	r3, #0
   2c60c:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2c60e:	2300      	movs	r3, #0
   2c610:	61fb      	str	r3, [r7, #28]
   2c612:	e048      	b.n	2c6a6 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2c614:	68ba      	ldr	r2, [r7, #8]
   2c616:	2150      	movs	r1, #80	; 0x50
   2c618:	69fb      	ldr	r3, [r7, #28]
   2c61a:	18d3      	adds	r3, r2, r3
   2c61c:	185b      	adds	r3, r3, r1
   2c61e:	781b      	ldrb	r3, [r3, #0]
   2c620:	2b00      	cmp	r3, #0
   2c622:	d010      	beq.n	2c646 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2c624:	2317      	movs	r3, #23
   2c626:	18fb      	adds	r3, r7, r3
   2c628:	781a      	ldrb	r2, [r3, #0]
   2c62a:	69fb      	ldr	r3, [r7, #28]
   2c62c:	429a      	cmp	r2, r3
   2c62e:	d801      	bhi.n	2c634 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2c630:	2317      	movs	r3, #23
   2c632:	e03f      	b.n	2c6b4 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2c634:	2380      	movs	r3, #128	; 0x80
   2c636:	025a      	lsls	r2, r3, #9
   2c638:	69fb      	ldr	r3, [r7, #28]
   2c63a:	409a      	lsls	r2, r3
   2c63c:	0013      	movs	r3, r2
   2c63e:	001a      	movs	r2, r3
   2c640:	69bb      	ldr	r3, [r7, #24]
   2c642:	4313      	orrs	r3, r2
   2c644:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2c646:	68ba      	ldr	r2, [r7, #8]
   2c648:	69fb      	ldr	r3, [r7, #28]
   2c64a:	331c      	adds	r3, #28
   2c64c:	005b      	lsls	r3, r3, #1
   2c64e:	18d3      	adds	r3, r2, r3
   2c650:	3309      	adds	r3, #9
   2c652:	781b      	ldrb	r3, [r3, #0]
   2c654:	2b00      	cmp	r3, #0
   2c656:	d023      	beq.n	2c6a0 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2c658:	2317      	movs	r3, #23
   2c65a:	18fb      	adds	r3, r7, r3
   2c65c:	781a      	ldrb	r2, [r3, #0]
   2c65e:	69fb      	ldr	r3, [r7, #28]
   2c660:	429a      	cmp	r2, r3
   2c662:	d801      	bhi.n	2c668 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2c664:	2317      	movs	r3, #23
   2c666:	e025      	b.n	2c6b4 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2c668:	68ba      	ldr	r2, [r7, #8]
   2c66a:	69fb      	ldr	r3, [r7, #28]
   2c66c:	331c      	adds	r3, #28
   2c66e:	005b      	lsls	r3, r3, #1
   2c670:	18d3      	adds	r3, r2, r3
   2c672:	3309      	adds	r3, #9
   2c674:	781b      	ldrb	r3, [r3, #0]
   2c676:	2b02      	cmp	r3, #2
   2c678:	d10a      	bne.n	2c690 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2c67a:	2302      	movs	r3, #2
   2c67c:	33ff      	adds	r3, #255	; 0xff
   2c67e:	001a      	movs	r2, r3
   2c680:	69fb      	ldr	r3, [r7, #28]
   2c682:	409a      	lsls	r2, r3
   2c684:	0013      	movs	r3, r2
   2c686:	001a      	movs	r2, r3
   2c688:	69bb      	ldr	r3, [r7, #24]
   2c68a:	4313      	orrs	r3, r2
   2c68c:	61bb      	str	r3, [r7, #24]
   2c68e:	e007      	b.n	2c6a0 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2c690:	2201      	movs	r2, #1
   2c692:	69fb      	ldr	r3, [r7, #28]
   2c694:	409a      	lsls	r2, r3
   2c696:	0013      	movs	r3, r2
   2c698:	001a      	movs	r2, r3
   2c69a:	69bb      	ldr	r3, [r7, #24]
   2c69c:	4313      	orrs	r3, r2
   2c69e:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2c6a0:	69fb      	ldr	r3, [r7, #28]
   2c6a2:	3301      	adds	r3, #1
   2c6a4:	61fb      	str	r3, [r7, #28]
   2c6a6:	69fb      	ldr	r3, [r7, #28]
   2c6a8:	2b07      	cmp	r3, #7
   2c6aa:	d9b3      	bls.n	2c614 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2c6ac:	687b      	ldr	r3, [r7, #4]
   2c6ae:	69ba      	ldr	r2, [r7, #24]
   2c6b0:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2c6b2:	2300      	movs	r3, #0
}
   2c6b4:	0018      	movs	r0, r3
   2c6b6:	46bd      	mov	sp, r7
   2c6b8:	b008      	add	sp, #32
   2c6ba:	bd80      	pop	{r7, pc}
   2c6bc:	0003baf4 	.word	0x0003baf4

0002c6c0 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2c6c0:	b580      	push	{r7, lr}
   2c6c2:	b088      	sub	sp, #32
   2c6c4:	af00      	add	r7, sp, #0
   2c6c6:	60b9      	str	r1, [r7, #8]
   2c6c8:	607a      	str	r2, [r7, #4]
   2c6ca:	230f      	movs	r3, #15
   2c6cc:	18fb      	adds	r3, r7, r3
   2c6ce:	1c02      	adds	r2, r0, #0
   2c6d0:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2c6d2:	230f      	movs	r3, #15
   2c6d4:	18fb      	adds	r3, r7, r3
   2c6d6:	781a      	ldrb	r2, [r3, #0]
   2c6d8:	2317      	movs	r3, #23
   2c6da:	18fb      	adds	r3, r7, r3
   2c6dc:	491d      	ldr	r1, [pc, #116]	; (2c754 <_tcc_build_waves+0x94>)
   2c6de:	5c8a      	ldrb	r2, [r1, r2]
   2c6e0:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2c6e2:	68bb      	ldr	r3, [r7, #8]
   2c6e4:	3310      	adds	r3, #16
   2c6e6:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2c6e8:	693b      	ldr	r3, [r7, #16]
   2c6ea:	7a5b      	ldrb	r3, [r3, #9]
   2c6ec:	011b      	lsls	r3, r3, #4
   2c6ee:	001a      	movs	r2, r3
   2c6f0:	2330      	movs	r3, #48	; 0x30
   2c6f2:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2c6f4:	693b      	ldr	r3, [r7, #16]
   2c6f6:	7a1b      	ldrb	r3, [r3, #8]
   2c6f8:	0019      	movs	r1, r3
   2c6fa:	2307      	movs	r3, #7
   2c6fc:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2c6fe:	4313      	orrs	r3, r2
   2c700:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2c702:	2300      	movs	r3, #0
   2c704:	61fb      	str	r3, [r7, #28]
   2c706:	e01a      	b.n	2c73e <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2c708:	693a      	ldr	r2, [r7, #16]
   2c70a:	69fb      	ldr	r3, [r7, #28]
   2c70c:	18d3      	adds	r3, r2, r3
   2c70e:	3304      	adds	r3, #4
   2c710:	781b      	ldrb	r3, [r3, #0]
   2c712:	2b00      	cmp	r3, #0
   2c714:	d010      	beq.n	2c738 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2c716:	2317      	movs	r3, #23
   2c718:	18fb      	adds	r3, r7, r3
   2c71a:	781a      	ldrb	r2, [r3, #0]
   2c71c:	69fb      	ldr	r3, [r7, #28]
   2c71e:	429a      	cmp	r2, r3
   2c720:	dc01      	bgt.n	2c726 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2c722:	2317      	movs	r3, #23
   2c724:	e012      	b.n	2c74c <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2c726:	2380      	movs	r3, #128	; 0x80
   2c728:	025a      	lsls	r2, r3, #9
   2c72a:	69fb      	ldr	r3, [r7, #28]
   2c72c:	409a      	lsls	r2, r3
   2c72e:	0013      	movs	r3, r2
   2c730:	001a      	movs	r2, r3
   2c732:	69bb      	ldr	r3, [r7, #24]
   2c734:	4313      	orrs	r3, r2
   2c736:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2c738:	69fb      	ldr	r3, [r7, #28]
   2c73a:	3301      	adds	r3, #1
   2c73c:	61fb      	str	r3, [r7, #28]
   2c73e:	69fb      	ldr	r3, [r7, #28]
   2c740:	2b03      	cmp	r3, #3
   2c742:	dde1      	ble.n	2c708 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2c744:	687b      	ldr	r3, [r7, #4]
   2c746:	69ba      	ldr	r2, [r7, #24]
   2c748:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2c74a:	2300      	movs	r3, #0
}
   2c74c:	0018      	movs	r0, r3
   2c74e:	46bd      	mov	sp, r7
   2c750:	b008      	add	sp, #32
   2c752:	bd80      	pop	{r7, pc}
   2c754:	0003baf0 	.word	0x0003baf0

0002c758 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2c758:	b590      	push	{r4, r7, lr}
   2c75a:	b091      	sub	sp, #68	; 0x44
   2c75c:	af00      	add	r7, sp, #0
   2c75e:	60f8      	str	r0, [r7, #12]
   2c760:	60b9      	str	r1, [r7, #8]
   2c762:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2c764:	233b      	movs	r3, #59	; 0x3b
   2c766:	18fc      	adds	r4, r7, r3
   2c768:	68bb      	ldr	r3, [r7, #8]
   2c76a:	0018      	movs	r0, r3
   2c76c:	4bc4      	ldr	r3, [pc, #784]	; (2ca80 <tcc_init+0x328>)
   2c76e:	4798      	blx	r3
   2c770:	0003      	movs	r3, r0
   2c772:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2c774:	233b      	movs	r3, #59	; 0x3b
   2c776:	18fb      	adds	r3, r7, r3
   2c778:	781a      	ldrb	r2, [r3, #0]
   2c77a:	4bc2      	ldr	r3, [pc, #776]	; (2ca84 <tcc_init+0x32c>)
   2c77c:	0092      	lsls	r2, r2, #2
   2c77e:	58d3      	ldr	r3, [r2, r3]
   2c780:	0019      	movs	r1, r3
   2c782:	2002      	movs	r0, #2
   2c784:	4bc0      	ldr	r3, [pc, #768]	; (2ca88 <tcc_init+0x330>)
   2c786:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2c788:	68bb      	ldr	r3, [r7, #8]
   2c78a:	681b      	ldr	r3, [r3, #0]
   2c78c:	2202      	movs	r2, #2
   2c78e:	4013      	ands	r3, r2
   2c790:	d001      	beq.n	2c796 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2c792:	231c      	movs	r3, #28
   2c794:	e1be      	b.n	2cb14 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2c796:	68bb      	ldr	r3, [r7, #8]
   2c798:	681b      	ldr	r3, [r3, #0]
   2c79a:	2201      	movs	r2, #1
   2c79c:	4013      	ands	r3, r2
   2c79e:	d001      	beq.n	2c7a4 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2c7a0:	231c      	movs	r3, #28
   2c7a2:	e1b7      	b.n	2cb14 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2c7a4:	233b      	movs	r3, #59	; 0x3b
   2c7a6:	18fb      	adds	r3, r7, r3
   2c7a8:	781a      	ldrb	r2, [r3, #0]
   2c7aa:	4bb8      	ldr	r3, [pc, #736]	; (2ca8c <tcc_init+0x334>)
   2c7ac:	0092      	lsls	r2, r2, #2
   2c7ae:	58d3      	ldr	r3, [r2, r3]
   2c7b0:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2c7b2:	687b      	ldr	r3, [r7, #4]
   2c7b4:	681a      	ldr	r2, [r3, #0]
   2c7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2c7b8:	429a      	cmp	r2, r3
   2c7ba:	d804      	bhi.n	2c7c6 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2c7bc:	687b      	ldr	r3, [r7, #4]
   2c7be:	685a      	ldr	r2, [r3, #4]
   2c7c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2c7c2:	429a      	cmp	r2, r3
   2c7c4:	d901      	bls.n	2c7ca <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2c7c6:	2317      	movs	r3, #23
   2c7c8:	e1a4      	b.n	2cb14 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2c7ca:	2300      	movs	r3, #0
   2c7cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   2c7ce:	e00e      	b.n	2c7ee <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2c7d0:	687a      	ldr	r2, [r7, #4]
   2c7d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2c7d4:	3306      	adds	r3, #6
   2c7d6:	009b      	lsls	r3, r3, #2
   2c7d8:	18d3      	adds	r3, r2, r3
   2c7da:	3304      	adds	r3, #4
   2c7dc:	681a      	ldr	r2, [r3, #0]
   2c7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2c7e0:	429a      	cmp	r2, r3
   2c7e2:	d901      	bls.n	2c7e8 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2c7e4:	2317      	movs	r3, #23
   2c7e6:	e195      	b.n	2cb14 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2c7e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2c7ea:	3301      	adds	r3, #1
   2c7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   2c7ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2c7f0:	2b03      	cmp	r3, #3
   2c7f2:	dded      	ble.n	2c7d0 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2c7f4:	2300      	movs	r3, #0
   2c7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   2c7f8:	e019      	b.n	2c82e <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2c7fa:	687a      	ldr	r2, [r7, #4]
   2c7fc:	2198      	movs	r1, #152	; 0x98
   2c7fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2c800:	18d3      	adds	r3, r2, r3
   2c802:	185b      	adds	r3, r3, r1
   2c804:	781b      	ldrb	r3, [r3, #0]
   2c806:	2201      	movs	r2, #1
   2c808:	4053      	eors	r3, r2
   2c80a:	b2db      	uxtb	r3, r3
   2c80c:	2b00      	cmp	r3, #0
   2c80e:	d10a      	bne.n	2c826 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2c810:	233b      	movs	r3, #59	; 0x3b
   2c812:	18fb      	adds	r3, r7, r3
   2c814:	781b      	ldrb	r3, [r3, #0]
   2c816:	4a9e      	ldr	r2, [pc, #632]	; (2ca90 <tcc_init+0x338>)
   2c818:	5cd3      	ldrb	r3, [r2, r3]
   2c81a:	001a      	movs	r2, r3
   2c81c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2c81e:	429a      	cmp	r2, r3
   2c820:	dc02      	bgt.n	2c828 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2c822:	2317      	movs	r3, #23
   2c824:	e176      	b.n	2cb14 <tcc_init+0x3bc>
			continue;
   2c826:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2c828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2c82a:	3301      	adds	r3, #1
   2c82c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2c82e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2c830:	2b07      	cmp	r3, #7
   2c832:	dde2      	ble.n	2c7fa <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2c834:	2300      	movs	r3, #0
   2c836:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2c838:	2333      	movs	r3, #51	; 0x33
   2c83a:	18fc      	adds	r4, r7, r3
   2c83c:	232c      	movs	r3, #44	; 0x2c
   2c83e:	18fa      	adds	r2, r7, r3
   2c840:	6879      	ldr	r1, [r7, #4]
   2c842:	233b      	movs	r3, #59	; 0x3b
   2c844:	18fb      	adds	r3, r7, r3
   2c846:	781b      	ldrb	r3, [r3, #0]
   2c848:	0018      	movs	r0, r3
   2c84a:	4b92      	ldr	r3, [pc, #584]	; (2ca94 <tcc_init+0x33c>)
   2c84c:	4798      	blx	r3
   2c84e:	0003      	movs	r3, r0
   2c850:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2c852:	2333      	movs	r3, #51	; 0x33
   2c854:	18fb      	adds	r3, r7, r3
   2c856:	781b      	ldrb	r3, [r3, #0]
   2c858:	2b00      	cmp	r3, #0
   2c85a:	d003      	beq.n	2c864 <tcc_init+0x10c>
		return status;
   2c85c:	2333      	movs	r3, #51	; 0x33
   2c85e:	18fb      	adds	r3, r7, r3
   2c860:	781b      	ldrb	r3, [r3, #0]
   2c862:	e157      	b.n	2cb14 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2c864:	232b      	movs	r3, #43	; 0x2b
   2c866:	18fa      	adds	r2, r7, r3
   2c868:	6879      	ldr	r1, [r7, #4]
   2c86a:	233b      	movs	r3, #59	; 0x3b
   2c86c:	18fb      	adds	r3, r7, r3
   2c86e:	781b      	ldrb	r3, [r3, #0]
   2c870:	0018      	movs	r0, r3
   2c872:	4b89      	ldr	r3, [pc, #548]	; (2ca98 <tcc_init+0x340>)
   2c874:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2c876:	2333      	movs	r3, #51	; 0x33
   2c878:	18fc      	adds	r4, r7, r3
   2c87a:	2320      	movs	r3, #32
   2c87c:	18fa      	adds	r2, r7, r3
   2c87e:	6879      	ldr	r1, [r7, #4]
   2c880:	233b      	movs	r3, #59	; 0x3b
   2c882:	18fb      	adds	r3, r7, r3
   2c884:	781b      	ldrb	r3, [r3, #0]
   2c886:	0018      	movs	r0, r3
   2c888:	4b84      	ldr	r3, [pc, #528]	; (2ca9c <tcc_init+0x344>)
   2c88a:	4798      	blx	r3
   2c88c:	0003      	movs	r3, r0
   2c88e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2c890:	2333      	movs	r3, #51	; 0x33
   2c892:	18fb      	adds	r3, r7, r3
   2c894:	781b      	ldrb	r3, [r3, #0]
   2c896:	2b00      	cmp	r3, #0
   2c898:	d003      	beq.n	2c8a2 <tcc_init+0x14a>
		return status;
   2c89a:	2333      	movs	r3, #51	; 0x33
   2c89c:	18fb      	adds	r3, r7, r3
   2c89e:	781b      	ldrb	r3, [r3, #0]
   2c8a0:	e138      	b.n	2cb14 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2c8a2:	2300      	movs	r3, #0
   2c8a4:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2c8a6:	2333      	movs	r3, #51	; 0x33
   2c8a8:	18fc      	adds	r4, r7, r3
   2c8aa:	231c      	movs	r3, #28
   2c8ac:	18fa      	adds	r2, r7, r3
   2c8ae:	6879      	ldr	r1, [r7, #4]
   2c8b0:	233b      	movs	r3, #59	; 0x3b
   2c8b2:	18fb      	adds	r3, r7, r3
   2c8b4:	781b      	ldrb	r3, [r3, #0]
   2c8b6:	0018      	movs	r0, r3
   2c8b8:	4b79      	ldr	r3, [pc, #484]	; (2caa0 <tcc_init+0x348>)
   2c8ba:	4798      	blx	r3
   2c8bc:	0003      	movs	r3, r0
   2c8be:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2c8c0:	2333      	movs	r3, #51	; 0x33
   2c8c2:	18fb      	adds	r3, r7, r3
   2c8c4:	781b      	ldrb	r3, [r3, #0]
   2c8c6:	2b00      	cmp	r3, #0
   2c8c8:	d003      	beq.n	2c8d2 <tcc_init+0x17a>
		return status;
   2c8ca:	2333      	movs	r3, #51	; 0x33
   2c8cc:	18fb      	adds	r3, r7, r3
   2c8ce:	781b      	ldrb	r3, [r3, #0]
   2c8d0:	e120      	b.n	2cb14 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2c8d2:	2333      	movs	r3, #51	; 0x33
   2c8d4:	18fc      	adds	r4, r7, r3
   2c8d6:	2318      	movs	r3, #24
   2c8d8:	18fa      	adds	r2, r7, r3
   2c8da:	6879      	ldr	r1, [r7, #4]
   2c8dc:	233b      	movs	r3, #59	; 0x3b
   2c8de:	18fb      	adds	r3, r7, r3
   2c8e0:	781b      	ldrb	r3, [r3, #0]
   2c8e2:	0018      	movs	r0, r3
   2c8e4:	4b6f      	ldr	r3, [pc, #444]	; (2caa4 <tcc_init+0x34c>)
   2c8e6:	4798      	blx	r3
   2c8e8:	0003      	movs	r3, r0
   2c8ea:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2c8ec:	2333      	movs	r3, #51	; 0x33
   2c8ee:	18fb      	adds	r3, r7, r3
   2c8f0:	781b      	ldrb	r3, [r3, #0]
   2c8f2:	2b00      	cmp	r3, #0
   2c8f4:	d003      	beq.n	2c8fe <tcc_init+0x1a6>
		return status;
   2c8f6:	2333      	movs	r3, #51	; 0x33
   2c8f8:	18fb      	adds	r3, r7, r3
   2c8fa:	781b      	ldrb	r3, [r3, #0]
   2c8fc:	e10a      	b.n	2cb14 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2c8fe:	2300      	movs	r3, #0
   2c900:	63fb      	str	r3, [r7, #60]	; 0x3c
   2c902:	e009      	b.n	2c918 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2c904:	68fa      	ldr	r2, [r7, #12]
   2c906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2c908:	009b      	lsls	r3, r3, #2
   2c90a:	18d3      	adds	r3, r2, r3
   2c90c:	3304      	adds	r3, #4
   2c90e:	2200      	movs	r2, #0
   2c910:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2c912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2c914:	3301      	adds	r3, #1
   2c916:	63fb      	str	r3, [r7, #60]	; 0x3c
   2c918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2c91a:	2b0b      	cmp	r3, #11
   2c91c:	ddf2      	ble.n	2c904 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2c91e:	68fb      	ldr	r3, [r7, #12]
   2c920:	2200      	movs	r2, #0
   2c922:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2c924:	68fb      	ldr	r3, [r7, #12]
   2c926:	2200      	movs	r2, #0
   2c928:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2c92a:	233b      	movs	r3, #59	; 0x3b
   2c92c:	18fb      	adds	r3, r7, r3
   2c92e:	781a      	ldrb	r2, [r3, #0]
   2c930:	4b5d      	ldr	r3, [pc, #372]	; (2caa8 <tcc_init+0x350>)
   2c932:	0092      	lsls	r2, r2, #2
   2c934:	68f9      	ldr	r1, [r7, #12]
   2c936:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2c938:	68fb      	ldr	r3, [r7, #12]
   2c93a:	68ba      	ldr	r2, [r7, #8]
   2c93c:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2c93e:	687b      	ldr	r3, [r7, #4]
   2c940:	22a0      	movs	r2, #160	; 0xa0
   2c942:	5c99      	ldrb	r1, [r3, r2]
   2c944:	68fb      	ldr	r3, [r7, #12]
   2c946:	223c      	movs	r2, #60	; 0x3c
   2c948:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2c94a:	2314      	movs	r3, #20
   2c94c:	18fb      	adds	r3, r7, r3
   2c94e:	0018      	movs	r0, r3
   2c950:	4b56      	ldr	r3, [pc, #344]	; (2caac <tcc_init+0x354>)
   2c952:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2c954:	687b      	ldr	r3, [r7, #4]
   2c956:	7a9a      	ldrb	r2, [r3, #10]
   2c958:	2314      	movs	r3, #20
   2c95a:	18fb      	adds	r3, r7, r3
   2c95c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2c95e:	233b      	movs	r3, #59	; 0x3b
   2c960:	18fb      	adds	r3, r7, r3
   2c962:	781b      	ldrb	r3, [r3, #0]
   2c964:	4a52      	ldr	r2, [pc, #328]	; (2cab0 <tcc_init+0x358>)
   2c966:	5cd3      	ldrb	r3, [r2, r3]
   2c968:	2214      	movs	r2, #20
   2c96a:	18ba      	adds	r2, r7, r2
   2c96c:	0011      	movs	r1, r2
   2c96e:	0018      	movs	r0, r3
   2c970:	4b50      	ldr	r3, [pc, #320]	; (2cab4 <tcc_init+0x35c>)
   2c972:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2c974:	233b      	movs	r3, #59	; 0x3b
   2c976:	18fb      	adds	r3, r7, r3
   2c978:	781b      	ldrb	r3, [r3, #0]
   2c97a:	4a4d      	ldr	r2, [pc, #308]	; (2cab0 <tcc_init+0x358>)
   2c97c:	5cd3      	ldrb	r3, [r2, r3]
   2c97e:	0018      	movs	r0, r3
   2c980:	4b4d      	ldr	r3, [pc, #308]	; (2cab8 <tcc_init+0x360>)
   2c982:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2c984:	2300      	movs	r3, #0
   2c986:	63fb      	str	r3, [r7, #60]	; 0x3c
   2c988:	e02d      	b.n	2c9e6 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2c98a:	687a      	ldr	r2, [r7, #4]
   2c98c:	2198      	movs	r1, #152	; 0x98
   2c98e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2c990:	18d3      	adds	r3, r2, r3
   2c992:	185b      	adds	r3, r3, r1
   2c994:	781b      	ldrb	r3, [r3, #0]
   2c996:	2201      	movs	r2, #1
   2c998:	4053      	eors	r3, r2
   2c99a:	b2db      	uxtb	r3, r3
   2c99c:	2b00      	cmp	r3, #0
   2c99e:	d11e      	bne.n	2c9de <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2c9a0:	2310      	movs	r3, #16
   2c9a2:	18fb      	adds	r3, r7, r3
   2c9a4:	0018      	movs	r0, r3
   2c9a6:	4b45      	ldr	r3, [pc, #276]	; (2cabc <tcc_init+0x364>)
   2c9a8:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2c9aa:	687b      	ldr	r3, [r7, #4]
   2c9ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2c9ae:	321e      	adds	r2, #30
   2c9b0:	0092      	lsls	r2, r2, #2
   2c9b2:	58d3      	ldr	r3, [r2, r3]
   2c9b4:	b2da      	uxtb	r2, r3
   2c9b6:	2310      	movs	r3, #16
   2c9b8:	18fb      	adds	r3, r7, r3
   2c9ba:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2c9bc:	2310      	movs	r3, #16
   2c9be:	18fb      	adds	r3, r7, r3
   2c9c0:	2201      	movs	r2, #1
   2c9c2:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2c9c4:	687b      	ldr	r3, [r7, #4]
   2c9c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2c9c8:	3216      	adds	r2, #22
   2c9ca:	0092      	lsls	r2, r2, #2
   2c9cc:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2c9ce:	b2db      	uxtb	r3, r3
   2c9d0:	2210      	movs	r2, #16
   2c9d2:	18ba      	adds	r2, r7, r2
   2c9d4:	0011      	movs	r1, r2
   2c9d6:	0018      	movs	r0, r3
   2c9d8:	4b39      	ldr	r3, [pc, #228]	; (2cac0 <tcc_init+0x368>)
   2c9da:	4798      	blx	r3
   2c9dc:	e000      	b.n	2c9e0 <tcc_init+0x288>
			continue;
   2c9de:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2c9e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2c9e2:	3301      	adds	r3, #1
   2c9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   2c9e6:	233b      	movs	r3, #59	; 0x3b
   2c9e8:	18fb      	adds	r3, r7, r3
   2c9ea:	781b      	ldrb	r3, [r3, #0]
   2c9ec:	4a28      	ldr	r2, [pc, #160]	; (2ca90 <tcc_init+0x338>)
   2c9ee:	5cd3      	ldrb	r3, [r2, r3]
   2c9f0:	001a      	movs	r2, r3
   2c9f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2c9f4:	429a      	cmp	r2, r3
   2c9f6:	dcc8      	bgt.n	2c98a <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2c9f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2c9fa:	68bb      	ldr	r3, [r7, #8]
   2c9fc:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2c9fe:	46c0      	nop			; (mov r8, r8)
   2ca00:	68bb      	ldr	r3, [r7, #8]
   2ca02:	689b      	ldr	r3, [r3, #8]
   2ca04:	2204      	movs	r2, #4
   2ca06:	4013      	ands	r3, r2
   2ca08:	d1fa      	bne.n	2ca00 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2ca0a:	68bb      	ldr	r3, [r7, #8]
   2ca0c:	22ff      	movs	r2, #255	; 0xff
   2ca0e:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2ca10:	46c0      	nop			; (mov r8, r8)
   2ca12:	68bb      	ldr	r3, [r7, #8]
   2ca14:	689b      	ldr	r3, [r3, #8]
   2ca16:	2204      	movs	r2, #4
   2ca18:	4013      	ands	r3, r2
   2ca1a:	d1fa      	bne.n	2ca12 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2ca1c:	232b      	movs	r3, #43	; 0x2b
   2ca1e:	18fb      	adds	r3, r7, r3
   2ca20:	781a      	ldrb	r2, [r3, #0]
   2ca22:	68bb      	ldr	r3, [r7, #8]
   2ca24:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2ca26:	2320      	movs	r3, #32
   2ca28:	18fb      	adds	r3, r7, r3
   2ca2a:	681a      	ldr	r2, [r3, #0]
   2ca2c:	68bb      	ldr	r3, [r7, #8]
   2ca2e:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2ca30:	2320      	movs	r3, #32
   2ca32:	18fb      	adds	r3, r7, r3
   2ca34:	685a      	ldr	r2, [r3, #4]
   2ca36:	68bb      	ldr	r3, [r7, #8]
   2ca38:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2ca3a:	69fa      	ldr	r2, [r7, #28]
   2ca3c:	68bb      	ldr	r3, [r7, #8]
   2ca3e:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2ca40:	46c0      	nop			; (mov r8, r8)
   2ca42:	68bb      	ldr	r3, [r7, #8]
   2ca44:	689b      	ldr	r3, [r3, #8]
   2ca46:	4a1f      	ldr	r2, [pc, #124]	; (2cac4 <tcc_init+0x36c>)
   2ca48:	4013      	ands	r3, r2
   2ca4a:	d1fa      	bne.n	2ca42 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2ca4c:	69ba      	ldr	r2, [r7, #24]
   2ca4e:	68bb      	ldr	r3, [r7, #8]
   2ca50:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2ca52:	46c0      	nop			; (mov r8, r8)
   2ca54:	68bb      	ldr	r3, [r7, #8]
   2ca56:	689b      	ldr	r3, [r3, #8]
   2ca58:	2210      	movs	r2, #16
   2ca5a:	4013      	ands	r3, r2
   2ca5c:	d1fa      	bne.n	2ca54 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2ca5e:	687b      	ldr	r3, [r7, #4]
   2ca60:	681a      	ldr	r2, [r3, #0]
   2ca62:	68bb      	ldr	r3, [r7, #8]
   2ca64:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2ca66:	46c0      	nop			; (mov r8, r8)
   2ca68:	68bb      	ldr	r3, [r7, #8]
   2ca6a:	689b      	ldr	r3, [r3, #8]
   2ca6c:	4a16      	ldr	r2, [pc, #88]	; (2cac8 <tcc_init+0x370>)
   2ca6e:	4013      	ands	r3, r2
   2ca70:	d1fa      	bne.n	2ca68 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2ca72:	687b      	ldr	r3, [r7, #4]
   2ca74:	685a      	ldr	r2, [r3, #4]
   2ca76:	68bb      	ldr	r3, [r7, #8]
   2ca78:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2ca7a:	2300      	movs	r3, #0
   2ca7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ca7e:	e03f      	b.n	2cb00 <tcc_init+0x3a8>
   2ca80:	0002c0c1 	.word	0x0002c0c1
   2ca84:	0003bad8 	.word	0x0003bad8
   2ca88:	0002c03d 	.word	0x0002c03d
   2ca8c:	0003bae4 	.word	0x0003bae4
   2ca90:	0003baf4 	.word	0x0003baf4
   2ca94:	0002c3cd 	.word	0x0002c3cd
   2ca98:	0002c471 	.word	0x0002c471
   2ca9c:	0002c4cd 	.word	0x0002c4cd
   2caa0:	0002c5e9 	.word	0x0002c5e9
   2caa4:	0002c6c1 	.word	0x0002c6c1
   2caa8:	2000584c 	.word	0x2000584c
   2caac:	0002c025 	.word	0x0002c025
   2cab0:	0003bad4 	.word	0x0003bad4
   2cab4:	0002bc3d 	.word	0x0002bc3d
   2cab8:	0002bc81 	.word	0x0002bc81
   2cabc:	0002c099 	.word	0x0002c099
   2cac0:	0002bf9d 	.word	0x0002bf9d
   2cac4:	00020040 	.word	0x00020040
   2cac8:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2cacc:	46c0      	nop			; (mov r8, r8)
   2cace:	68bb      	ldr	r3, [r7, #8]
   2cad0:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2cad2:	4912      	ldr	r1, [pc, #72]	; (2cb1c <tcc_init+0x3c4>)
   2cad4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2cad6:	4091      	lsls	r1, r2
   2cad8:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2cada:	4013      	ands	r3, r2
   2cadc:	d1f7      	bne.n	2cace <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2cade:	687a      	ldr	r2, [r7, #4]
   2cae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cae2:	3306      	adds	r3, #6
   2cae4:	009b      	lsls	r3, r3, #2
   2cae6:	18d3      	adds	r3, r2, r3
   2cae8:	3304      	adds	r3, #4
   2caea:	681a      	ldr	r2, [r3, #0]
   2caec:	68b9      	ldr	r1, [r7, #8]
   2caee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2caf0:	3310      	adds	r3, #16
   2caf2:	009b      	lsls	r3, r3, #2
   2caf4:	18cb      	adds	r3, r1, r3
   2caf6:	3304      	adds	r3, #4
   2caf8:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2cafa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cafc:	3301      	adds	r3, #1
   2cafe:	63fb      	str	r3, [r7, #60]	; 0x3c
   2cb00:	233b      	movs	r3, #59	; 0x3b
   2cb02:	18fb      	adds	r3, r7, r3
   2cb04:	781b      	ldrb	r3, [r3, #0]
   2cb06:	4a06      	ldr	r2, [pc, #24]	; (2cb20 <tcc_init+0x3c8>)
   2cb08:	5cd3      	ldrb	r3, [r2, r3]
   2cb0a:	001a      	movs	r2, r3
   2cb0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cb0e:	429a      	cmp	r2, r3
   2cb10:	dcdc      	bgt.n	2cacc <tcc_init+0x374>
	}

	return STATUS_OK;
   2cb12:	2300      	movs	r3, #0
}
   2cb14:	0018      	movs	r0, r3
   2cb16:	46bd      	mov	sp, r7
   2cb18:	b011      	add	sp, #68	; 0x44
   2cb1a:	bd90      	pop	{r4, r7, pc}
   2cb1c:	00080100 	.word	0x00080100
   2cb20:	0003baf0 	.word	0x0003baf0

0002cb24 <system_interrupt_enable>:
{
   2cb24:	b580      	push	{r7, lr}
   2cb26:	b082      	sub	sp, #8
   2cb28:	af00      	add	r7, sp, #0
   2cb2a:	0002      	movs	r2, r0
   2cb2c:	1dfb      	adds	r3, r7, #7
   2cb2e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2cb30:	4b06      	ldr	r3, [pc, #24]	; (2cb4c <system_interrupt_enable+0x28>)
   2cb32:	1dfa      	adds	r2, r7, #7
   2cb34:	7812      	ldrb	r2, [r2, #0]
   2cb36:	0011      	movs	r1, r2
   2cb38:	221f      	movs	r2, #31
   2cb3a:	400a      	ands	r2, r1
   2cb3c:	2101      	movs	r1, #1
   2cb3e:	4091      	lsls	r1, r2
   2cb40:	000a      	movs	r2, r1
   2cb42:	601a      	str	r2, [r3, #0]
}
   2cb44:	46c0      	nop			; (mov r8, r8)
   2cb46:	46bd      	mov	sp, r7
   2cb48:	b002      	add	sp, #8
   2cb4a:	bd80      	pop	{r7, pc}
   2cb4c:	e000e100 	.word	0xe000e100

0002cb50 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2cb50:	b580      	push	{r7, lr}
   2cb52:	b082      	sub	sp, #8
   2cb54:	af00      	add	r7, sp, #0
   2cb56:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2cb58:	4a04      	ldr	r2, [pc, #16]	; (2cb6c <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2cb5a:	687b      	ldr	r3, [r7, #4]
   2cb5c:	18d3      	adds	r3, r2, r3
   2cb5e:	781b      	ldrb	r3, [r3, #0]
   2cb60:	b25b      	sxtb	r3, r3
}
   2cb62:	0018      	movs	r0, r3
   2cb64:	46bd      	mov	sp, r7
   2cb66:	b002      	add	sp, #8
   2cb68:	bd80      	pop	{r7, pc}
   2cb6a:	46c0      	nop			; (mov r8, r8)
   2cb6c:	20000118 	.word	0x20000118

0002cb70 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2cb70:	b580      	push	{r7, lr}
   2cb72:	b084      	sub	sp, #16
   2cb74:	af00      	add	r7, sp, #0
   2cb76:	60f8      	str	r0, [r7, #12]
   2cb78:	60b9      	str	r1, [r7, #8]
   2cb7a:	1dfb      	adds	r3, r7, #7
   2cb7c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2cb7e:	1dfb      	adds	r3, r7, #7
   2cb80:	781b      	ldrb	r3, [r3, #0]
   2cb82:	68fa      	ldr	r2, [r7, #12]
   2cb84:	009b      	lsls	r3, r3, #2
   2cb86:	18d3      	adds	r3, r2, r3
   2cb88:	3304      	adds	r3, #4
   2cb8a:	68ba      	ldr	r2, [r7, #8]
   2cb8c:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2cb8e:	68fb      	ldr	r3, [r7, #12]
   2cb90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2cb92:	1dfb      	adds	r3, r7, #7
   2cb94:	7819      	ldrb	r1, [r3, #0]
   2cb96:	4b05      	ldr	r3, [pc, #20]	; (2cbac <tcc_register_callback+0x3c>)
   2cb98:	0089      	lsls	r1, r1, #2
   2cb9a:	58cb      	ldr	r3, [r1, r3]
   2cb9c:	431a      	orrs	r2, r3
   2cb9e:	68fb      	ldr	r3, [r7, #12]
   2cba0:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2cba2:	2300      	movs	r3, #0
}
   2cba4:	0018      	movs	r0, r3
   2cba6:	46bd      	mov	sp, r7
   2cba8:	b004      	add	sp, #16
   2cbaa:	bd80      	pop	{r7, pc}
   2cbac:	0003baf8 	.word	0x0003baf8

0002cbb0 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2cbb0:	b580      	push	{r7, lr}
   2cbb2:	b082      	sub	sp, #8
   2cbb4:	af00      	add	r7, sp, #0
   2cbb6:	6078      	str	r0, [r7, #4]
   2cbb8:	000a      	movs	r2, r1
   2cbba:	1cfb      	adds	r3, r7, #3
   2cbbc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2cbbe:	687b      	ldr	r3, [r7, #4]
   2cbc0:	681b      	ldr	r3, [r3, #0]
   2cbc2:	0018      	movs	r0, r3
   2cbc4:	4b0f      	ldr	r3, [pc, #60]	; (2cc04 <tcc_enable_callback+0x54>)
   2cbc6:	4798      	blx	r3
   2cbc8:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2cbca:	0018      	movs	r0, r3
   2cbcc:	4b0e      	ldr	r3, [pc, #56]	; (2cc08 <tcc_enable_callback+0x58>)
   2cbce:	4798      	blx	r3
   2cbd0:	0003      	movs	r3, r0
   2cbd2:	0018      	movs	r0, r3
   2cbd4:	4b0d      	ldr	r3, [pc, #52]	; (2cc0c <tcc_enable_callback+0x5c>)
   2cbd6:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2cbd8:	687b      	ldr	r3, [r7, #4]
   2cbda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2cbdc:	1cfb      	adds	r3, r7, #3
   2cbde:	7819      	ldrb	r1, [r3, #0]
   2cbe0:	4b0b      	ldr	r3, [pc, #44]	; (2cc10 <tcc_enable_callback+0x60>)
   2cbe2:	0089      	lsls	r1, r1, #2
   2cbe4:	58cb      	ldr	r3, [r1, r3]
   2cbe6:	431a      	orrs	r2, r3
   2cbe8:	687b      	ldr	r3, [r7, #4]
   2cbea:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2cbec:	687b      	ldr	r3, [r7, #4]
   2cbee:	681b      	ldr	r3, [r3, #0]
   2cbf0:	1cfa      	adds	r2, r7, #3
   2cbf2:	7811      	ldrb	r1, [r2, #0]
   2cbf4:	4a06      	ldr	r2, [pc, #24]	; (2cc10 <tcc_enable_callback+0x60>)
   2cbf6:	0089      	lsls	r1, r1, #2
   2cbf8:	588a      	ldr	r2, [r1, r2]
   2cbfa:	629a      	str	r2, [r3, #40]	; 0x28
}
   2cbfc:	46c0      	nop			; (mov r8, r8)
   2cbfe:	46bd      	mov	sp, r7
   2cc00:	b002      	add	sp, #8
   2cc02:	bd80      	pop	{r7, pc}
   2cc04:	0002c0c1 	.word	0x0002c0c1
   2cc08:	0002cb51 	.word	0x0002cb51
   2cc0c:	0002cb25 	.word	0x0002cb25
   2cc10:	0003baf8 	.word	0x0003baf8

0002cc14 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2cc14:	b580      	push	{r7, lr}
   2cc16:	af00      	add	r7, sp, #0
   2cc18:	2000      	movs	r0, #0
   2cc1a:	4b02      	ldr	r3, [pc, #8]	; (2cc24 <TCC0_Handler+0x10>)
   2cc1c:	4798      	blx	r3
   2cc1e:	46c0      	nop			; (mov r8, r8)
   2cc20:	46bd      	mov	sp, r7
   2cc22:	bd80      	pop	{r7, pc}
   2cc24:	0002cc51 	.word	0x0002cc51

0002cc28 <TCC1_Handler>:
   2cc28:	b580      	push	{r7, lr}
   2cc2a:	af00      	add	r7, sp, #0
   2cc2c:	2001      	movs	r0, #1
   2cc2e:	4b02      	ldr	r3, [pc, #8]	; (2cc38 <TCC1_Handler+0x10>)
   2cc30:	4798      	blx	r3
   2cc32:	46c0      	nop			; (mov r8, r8)
   2cc34:	46bd      	mov	sp, r7
   2cc36:	bd80      	pop	{r7, pc}
   2cc38:	0002cc51 	.word	0x0002cc51

0002cc3c <TCC2_Handler>:
   2cc3c:	b580      	push	{r7, lr}
   2cc3e:	af00      	add	r7, sp, #0
   2cc40:	2002      	movs	r0, #2
   2cc42:	4b02      	ldr	r3, [pc, #8]	; (2cc4c <TCC2_Handler+0x10>)
   2cc44:	4798      	blx	r3
   2cc46:	46c0      	nop			; (mov r8, r8)
   2cc48:	46bd      	mov	sp, r7
   2cc4a:	bd80      	pop	{r7, pc}
   2cc4c:	0002cc51 	.word	0x0002cc51

0002cc50 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2cc50:	b580      	push	{r7, lr}
   2cc52:	b086      	sub	sp, #24
   2cc54:	af00      	add	r7, sp, #0
   2cc56:	0002      	movs	r2, r0
   2cc58:	1dfb      	adds	r3, r7, #7
   2cc5a:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2cc5c:	1dfb      	adds	r3, r7, #7
   2cc5e:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2cc60:	4b18      	ldr	r3, [pc, #96]	; (2ccc4 <_tcc_interrupt_handler+0x74>)
   2cc62:	0092      	lsls	r2, r2, #2
   2cc64:	58d3      	ldr	r3, [r2, r3]
   2cc66:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2cc68:	693b      	ldr	r3, [r7, #16]
   2cc6a:	681b      	ldr	r3, [r3, #0]
   2cc6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2cc6e:	693b      	ldr	r3, [r7, #16]
   2cc70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2cc72:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2cc74:	693b      	ldr	r3, [r7, #16]
   2cc76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2cc78:	4013      	ands	r3, r2
   2cc7a:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2cc7c:	2300      	movs	r3, #0
   2cc7e:	617b      	str	r3, [r7, #20]
   2cc80:	e019      	b.n	2ccb6 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2cc82:	4b11      	ldr	r3, [pc, #68]	; (2ccc8 <_tcc_interrupt_handler+0x78>)
   2cc84:	697a      	ldr	r2, [r7, #20]
   2cc86:	0092      	lsls	r2, r2, #2
   2cc88:	58d3      	ldr	r3, [r2, r3]
   2cc8a:	68fa      	ldr	r2, [r7, #12]
   2cc8c:	4013      	ands	r3, r2
   2cc8e:	d00f      	beq.n	2ccb0 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2cc90:	693a      	ldr	r2, [r7, #16]
   2cc92:	697b      	ldr	r3, [r7, #20]
   2cc94:	009b      	lsls	r3, r3, #2
   2cc96:	18d3      	adds	r3, r2, r3
   2cc98:	3304      	adds	r3, #4
   2cc9a:	681b      	ldr	r3, [r3, #0]
   2cc9c:	693a      	ldr	r2, [r7, #16]
   2cc9e:	0010      	movs	r0, r2
   2cca0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2cca2:	693b      	ldr	r3, [r7, #16]
   2cca4:	681b      	ldr	r3, [r3, #0]
   2cca6:	4a08      	ldr	r2, [pc, #32]	; (2ccc8 <_tcc_interrupt_handler+0x78>)
   2cca8:	6979      	ldr	r1, [r7, #20]
   2ccaa:	0089      	lsls	r1, r1, #2
   2ccac:	588a      	ldr	r2, [r1, r2]
   2ccae:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2ccb0:	697b      	ldr	r3, [r7, #20]
   2ccb2:	3301      	adds	r3, #1
   2ccb4:	617b      	str	r3, [r7, #20]
   2ccb6:	697b      	ldr	r3, [r7, #20]
   2ccb8:	2b0b      	cmp	r3, #11
   2ccba:	dde2      	ble.n	2cc82 <_tcc_interrupt_handler+0x32>
		}
	}
}
   2ccbc:	46c0      	nop			; (mov r8, r8)
   2ccbe:	46bd      	mov	sp, r7
   2ccc0:	b006      	add	sp, #24
   2ccc2:	bd80      	pop	{r7, pc}
   2ccc4:	2000584c 	.word	0x2000584c
   2ccc8:	0003baf8 	.word	0x0003baf8

0002cccc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2cccc:	b580      	push	{r7, lr}
   2ccce:	b082      	sub	sp, #8
   2ccd0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2ccd2:	4b2f      	ldr	r3, [pc, #188]	; (2cd90 <Reset_Handler+0xc4>)
   2ccd4:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2ccd6:	4b2f      	ldr	r3, [pc, #188]	; (2cd94 <Reset_Handler+0xc8>)
   2ccd8:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2ccda:	687a      	ldr	r2, [r7, #4]
   2ccdc:	683b      	ldr	r3, [r7, #0]
   2ccde:	429a      	cmp	r2, r3
   2cce0:	d00c      	beq.n	2ccfc <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2cce2:	e007      	b.n	2ccf4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2cce4:	683b      	ldr	r3, [r7, #0]
   2cce6:	1d1a      	adds	r2, r3, #4
   2cce8:	603a      	str	r2, [r7, #0]
   2ccea:	687a      	ldr	r2, [r7, #4]
   2ccec:	1d11      	adds	r1, r2, #4
   2ccee:	6079      	str	r1, [r7, #4]
   2ccf0:	6812      	ldr	r2, [r2, #0]
   2ccf2:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2ccf4:	683a      	ldr	r2, [r7, #0]
   2ccf6:	4b28      	ldr	r3, [pc, #160]	; (2cd98 <Reset_Handler+0xcc>)
   2ccf8:	429a      	cmp	r2, r3
   2ccfa:	d3f3      	bcc.n	2cce4 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2ccfc:	4b27      	ldr	r3, [pc, #156]	; (2cd9c <Reset_Handler+0xd0>)
   2ccfe:	603b      	str	r3, [r7, #0]
   2cd00:	e004      	b.n	2cd0c <Reset_Handler+0x40>
                *pDest++ = 0;
   2cd02:	683b      	ldr	r3, [r7, #0]
   2cd04:	1d1a      	adds	r2, r3, #4
   2cd06:	603a      	str	r2, [r7, #0]
   2cd08:	2200      	movs	r2, #0
   2cd0a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2cd0c:	683a      	ldr	r2, [r7, #0]
   2cd0e:	4b24      	ldr	r3, [pc, #144]	; (2cda0 <Reset_Handler+0xd4>)
   2cd10:	429a      	cmp	r2, r3
   2cd12:	d3f6      	bcc.n	2cd02 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2cd14:	4b23      	ldr	r3, [pc, #140]	; (2cda4 <Reset_Handler+0xd8>)
   2cd16:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2cd18:	4b23      	ldr	r3, [pc, #140]	; (2cda8 <Reset_Handler+0xdc>)
   2cd1a:	687a      	ldr	r2, [r7, #4]
   2cd1c:	21ff      	movs	r1, #255	; 0xff
   2cd1e:	438a      	bics	r2, r1
   2cd20:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2cd22:	4a22      	ldr	r2, [pc, #136]	; (2cdac <Reset_Handler+0xe0>)
   2cd24:	2390      	movs	r3, #144	; 0x90
   2cd26:	005b      	lsls	r3, r3, #1
   2cd28:	2102      	movs	r1, #2
   2cd2a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2cd2c:	4a20      	ldr	r2, [pc, #128]	; (2cdb0 <Reset_Handler+0xe4>)
   2cd2e:	78d3      	ldrb	r3, [r2, #3]
   2cd30:	2103      	movs	r1, #3
   2cd32:	438b      	bics	r3, r1
   2cd34:	1c19      	adds	r1, r3, #0
   2cd36:	2302      	movs	r3, #2
   2cd38:	430b      	orrs	r3, r1
   2cd3a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2cd3c:	4a1c      	ldr	r2, [pc, #112]	; (2cdb0 <Reset_Handler+0xe4>)
   2cd3e:	78d3      	ldrb	r3, [r2, #3]
   2cd40:	210c      	movs	r1, #12
   2cd42:	438b      	bics	r3, r1
   2cd44:	1c19      	adds	r1, r3, #0
   2cd46:	2308      	movs	r3, #8
   2cd48:	430b      	orrs	r3, r1
   2cd4a:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2cd4c:	4a19      	ldr	r2, [pc, #100]	; (2cdb4 <Reset_Handler+0xe8>)
   2cd4e:	7b93      	ldrb	r3, [r2, #14]
   2cd50:	2130      	movs	r1, #48	; 0x30
   2cd52:	438b      	bics	r3, r1
   2cd54:	1c19      	adds	r1, r3, #0
   2cd56:	2320      	movs	r3, #32
   2cd58:	430b      	orrs	r3, r1
   2cd5a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2cd5c:	4a15      	ldr	r2, [pc, #84]	; (2cdb4 <Reset_Handler+0xe8>)
   2cd5e:	7b93      	ldrb	r3, [r2, #14]
   2cd60:	210c      	movs	r1, #12
   2cd62:	438b      	bics	r3, r1
   2cd64:	1c19      	adds	r1, r3, #0
   2cd66:	2308      	movs	r3, #8
   2cd68:	430b      	orrs	r3, r1
   2cd6a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2cd6c:	4a11      	ldr	r2, [pc, #68]	; (2cdb4 <Reset_Handler+0xe8>)
   2cd6e:	7b93      	ldrb	r3, [r2, #14]
   2cd70:	2103      	movs	r1, #3
   2cd72:	438b      	bics	r3, r1
   2cd74:	1c19      	adds	r1, r3, #0
   2cd76:	2302      	movs	r3, #2
   2cd78:	430b      	orrs	r3, r1
   2cd7a:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2cd7c:	4a0e      	ldr	r2, [pc, #56]	; (2cdb8 <Reset_Handler+0xec>)
   2cd7e:	6853      	ldr	r3, [r2, #4]
   2cd80:	2180      	movs	r1, #128	; 0x80
   2cd82:	430b      	orrs	r3, r1
   2cd84:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2cd86:	4b0d      	ldr	r3, [pc, #52]	; (2cdbc <Reset_Handler+0xf0>)
   2cd88:	4798      	blx	r3

        /* Branch to main function */
        main();
   2cd8a:	4b0d      	ldr	r3, [pc, #52]	; (2cdc0 <Reset_Handler+0xf4>)
   2cd8c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2cd8e:	e7fe      	b.n	2cd8e <Reset_Handler+0xc2>
   2cd90:	0003c900 	.word	0x0003c900
   2cd94:	20000000 	.word	0x20000000
   2cd98:	200002f0 	.word	0x200002f0
   2cd9c:	200002f0 	.word	0x200002f0
   2cda0:	200058bc 	.word	0x200058bc
   2cda4:	00012000 	.word	0x00012000
   2cda8:	e000ed00 	.word	0xe000ed00
   2cdac:	41007000 	.word	0x41007000
   2cdb0:	41005000 	.word	0x41005000
   2cdb4:	41004800 	.word	0x41004800
   2cdb8:	41004000 	.word	0x41004000
   2cdbc:	00036bf9 	.word	0x00036bf9
   2cdc0:	000344a9 	.word	0x000344a9

0002cdc4 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2cdc4:	b580      	push	{r7, lr}
   2cdc6:	af00      	add	r7, sp, #0
  __asm volatile (
   2cdc8:	2004      	movs	r0, #4
   2cdca:	4671      	mov	r1, lr
   2cdcc:	4208      	tst	r0, r1
   2cdce:	d002      	beq.n	2cdd6 <_MSP>
   2cdd0:	f3ef 8009 	mrs	r0, PSP
   2cdd4:	e001      	b.n	2cdda <_HALT>

0002cdd6 <_MSP>:
   2cdd6:	f3ef 8008 	mrs	r0, MSP

0002cdda <_HALT>:
   2cdda:	6941      	ldr	r1, [r0, #20]
   2cddc:	e004      	b.n	2cde8 <HardFault_HandlerC>
   2cdde:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2cde0:	46c0      	nop			; (mov r8, r8)
   2cde2:	46bd      	mov	sp, r7
   2cde4:	bd80      	pop	{r7, pc}
	...

0002cde8 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2cde8:	b580      	push	{r7, lr}
   2cdea:	b090      	sub	sp, #64	; 0x40
   2cdec:	af00      	add	r7, sp, #0
   2cdee:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2cdf0:	687b      	ldr	r3, [r7, #4]
   2cdf2:	681b      	ldr	r3, [r3, #0]
   2cdf4:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2cdf6:	687b      	ldr	r3, [r7, #4]
   2cdf8:	685b      	ldr	r3, [r3, #4]
   2cdfa:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2cdfc:	687b      	ldr	r3, [r7, #4]
   2cdfe:	689b      	ldr	r3, [r3, #8]
   2ce00:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2ce02:	687b      	ldr	r3, [r7, #4]
   2ce04:	68db      	ldr	r3, [r3, #12]
   2ce06:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2ce08:	687b      	ldr	r3, [r7, #4]
   2ce0a:	691b      	ldr	r3, [r3, #16]
   2ce0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2ce0e:	687b      	ldr	r3, [r7, #4]
   2ce10:	695b      	ldr	r3, [r3, #20]
   2ce12:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2ce14:	687b      	ldr	r3, [r7, #4]
   2ce16:	699b      	ldr	r3, [r3, #24]
   2ce18:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2ce1a:	687b      	ldr	r3, [r7, #4]
   2ce1c:	69db      	ldr	r3, [r3, #28]
   2ce1e:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2ce20:	4b0b      	ldr	r3, [pc, #44]	; (2ce50 <HardFault_HandlerC+0x68>)
   2ce22:	681b      	ldr	r3, [r3, #0]
   2ce24:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2ce26:	4b0b      	ldr	r3, [pc, #44]	; (2ce54 <HardFault_HandlerC+0x6c>)
   2ce28:	681b      	ldr	r3, [r3, #0]
   2ce2a:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2ce2c:	4b0a      	ldr	r3, [pc, #40]	; (2ce58 <HardFault_HandlerC+0x70>)
   2ce2e:	681b      	ldr	r3, [r3, #0]
   2ce30:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2ce32:	4b0a      	ldr	r3, [pc, #40]	; (2ce5c <HardFault_HandlerC+0x74>)
   2ce34:	681b      	ldr	r3, [r3, #0]
   2ce36:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2ce38:	4b09      	ldr	r3, [pc, #36]	; (2ce60 <HardFault_HandlerC+0x78>)
   2ce3a:	681b      	ldr	r3, [r3, #0]
   2ce3c:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2ce3e:	4b09      	ldr	r3, [pc, #36]	; (2ce64 <HardFault_HandlerC+0x7c>)
   2ce40:	681b      	ldr	r3, [r3, #0]
   2ce42:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2ce44:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2ce46:	46c0      	nop			; (mov r8, r8)
   2ce48:	46bd      	mov	sp, r7
   2ce4a:	b010      	add	sp, #64	; 0x40
   2ce4c:	bd80      	pop	{r7, pc}
   2ce4e:	46c0      	nop			; (mov r8, r8)
   2ce50:	e000ed28 	.word	0xe000ed28
   2ce54:	e000ed2c 	.word	0xe000ed2c
   2ce58:	e000ed30 	.word	0xe000ed30
   2ce5c:	e000ed3c 	.word	0xe000ed3c
   2ce60:	e000ed34 	.word	0xe000ed34
   2ce64:	e000ed38 	.word	0xe000ed38

0002ce68 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2ce68:	b580      	push	{r7, lr}
   2ce6a:	b086      	sub	sp, #24
   2ce6c:	af00      	add	r7, sp, #0
   2ce6e:	60f8      	str	r0, [r7, #12]
   2ce70:	60b9      	str	r1, [r7, #8]
   2ce72:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2ce74:	2300      	movs	r3, #0
   2ce76:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2ce78:	68fb      	ldr	r3, [r7, #12]
   2ce7a:	2b00      	cmp	r3, #0
   2ce7c:	d012      	beq.n	2cea4 <_read+0x3c>
		return -1;
   2ce7e:	2301      	movs	r3, #1
   2ce80:	425b      	negs	r3, r3
   2ce82:	e013      	b.n	2ceac <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2ce84:	4b0b      	ldr	r3, [pc, #44]	; (2ceb4 <_read+0x4c>)
   2ce86:	681a      	ldr	r2, [r3, #0]
   2ce88:	4b0b      	ldr	r3, [pc, #44]	; (2ceb8 <_read+0x50>)
   2ce8a:	681b      	ldr	r3, [r3, #0]
   2ce8c:	68b9      	ldr	r1, [r7, #8]
   2ce8e:	0018      	movs	r0, r3
   2ce90:	4790      	blx	r2
		ptr++;
   2ce92:	68bb      	ldr	r3, [r7, #8]
   2ce94:	3301      	adds	r3, #1
   2ce96:	60bb      	str	r3, [r7, #8]
		nChars++;
   2ce98:	697b      	ldr	r3, [r7, #20]
   2ce9a:	3301      	adds	r3, #1
   2ce9c:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2ce9e:	687b      	ldr	r3, [r7, #4]
   2cea0:	3b01      	subs	r3, #1
   2cea2:	607b      	str	r3, [r7, #4]
   2cea4:	687b      	ldr	r3, [r7, #4]
   2cea6:	2b00      	cmp	r3, #0
   2cea8:	dcec      	bgt.n	2ce84 <_read+0x1c>
	}
	return nChars;
   2ceaa:	697b      	ldr	r3, [r7, #20]
}
   2ceac:	0018      	movs	r0, r3
   2ceae:	46bd      	mov	sp, r7
   2ceb0:	b006      	add	sp, #24
   2ceb2:	bd80      	pop	{r7, pc}
   2ceb4:	20005858 	.word	0x20005858
   2ceb8:	20005860 	.word	0x20005860

0002cebc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2cebc:	b580      	push	{r7, lr}
   2cebe:	b086      	sub	sp, #24
   2cec0:	af00      	add	r7, sp, #0
   2cec2:	60f8      	str	r0, [r7, #12]
   2cec4:	60b9      	str	r1, [r7, #8]
   2cec6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2cec8:	2300      	movs	r3, #0
   2ceca:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2cecc:	68fb      	ldr	r3, [r7, #12]
   2cece:	2b01      	cmp	r3, #1
   2ced0:	d01d      	beq.n	2cf0e <_write+0x52>
   2ced2:	68fb      	ldr	r3, [r7, #12]
   2ced4:	2b02      	cmp	r3, #2
   2ced6:	d01a      	beq.n	2cf0e <_write+0x52>
   2ced8:	68fb      	ldr	r3, [r7, #12]
   2ceda:	2b03      	cmp	r3, #3
   2cedc:	d017      	beq.n	2cf0e <_write+0x52>
		return -1;
   2cede:	2301      	movs	r3, #1
   2cee0:	425b      	negs	r3, r3
   2cee2:	e018      	b.n	2cf16 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2cee4:	4b0e      	ldr	r3, [pc, #56]	; (2cf20 <_write+0x64>)
   2cee6:	681a      	ldr	r2, [r3, #0]
   2cee8:	4b0e      	ldr	r3, [pc, #56]	; (2cf24 <_write+0x68>)
   2ceea:	6818      	ldr	r0, [r3, #0]
   2ceec:	68bb      	ldr	r3, [r7, #8]
   2ceee:	1c59      	adds	r1, r3, #1
   2cef0:	60b9      	str	r1, [r7, #8]
   2cef2:	781b      	ldrb	r3, [r3, #0]
   2cef4:	0019      	movs	r1, r3
   2cef6:	4790      	blx	r2
   2cef8:	1e03      	subs	r3, r0, #0
   2cefa:	da02      	bge.n	2cf02 <_write+0x46>
			return -1;
   2cefc:	2301      	movs	r3, #1
   2cefe:	425b      	negs	r3, r3
   2cf00:	e009      	b.n	2cf16 <_write+0x5a>
		}
		++nChars;
   2cf02:	697b      	ldr	r3, [r7, #20]
   2cf04:	3301      	adds	r3, #1
   2cf06:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2cf08:	687b      	ldr	r3, [r7, #4]
   2cf0a:	3b01      	subs	r3, #1
   2cf0c:	607b      	str	r3, [r7, #4]
   2cf0e:	687b      	ldr	r3, [r7, #4]
   2cf10:	2b00      	cmp	r3, #0
   2cf12:	d1e7      	bne.n	2cee4 <_write+0x28>
	}
	return nChars;
   2cf14:	697b      	ldr	r3, [r7, #20]
}
   2cf16:	0018      	movs	r0, r3
   2cf18:	46bd      	mov	sp, r7
   2cf1a:	b006      	add	sp, #24
   2cf1c:	bd80      	pop	{r7, pc}
   2cf1e:	46c0      	nop			; (mov r8, r8)
   2cf20:	2000585c 	.word	0x2000585c
   2cf24:	20005860 	.word	0x20005860

0002cf28 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2cf28:	b580      	push	{r7, lr}
   2cf2a:	b084      	sub	sp, #16
   2cf2c:	af00      	add	r7, sp, #0
   2cf2e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2cf30:	4b0a      	ldr	r3, [pc, #40]	; (2cf5c <_sbrk+0x34>)
   2cf32:	681b      	ldr	r3, [r3, #0]
   2cf34:	2b00      	cmp	r3, #0
   2cf36:	d102      	bne.n	2cf3e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2cf38:	4b08      	ldr	r3, [pc, #32]	; (2cf5c <_sbrk+0x34>)
   2cf3a:	4a09      	ldr	r2, [pc, #36]	; (2cf60 <_sbrk+0x38>)
   2cf3c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2cf3e:	4b07      	ldr	r3, [pc, #28]	; (2cf5c <_sbrk+0x34>)
   2cf40:	681b      	ldr	r3, [r3, #0]
   2cf42:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2cf44:	4b05      	ldr	r3, [pc, #20]	; (2cf5c <_sbrk+0x34>)
   2cf46:	681a      	ldr	r2, [r3, #0]
   2cf48:	687b      	ldr	r3, [r7, #4]
   2cf4a:	18d2      	adds	r2, r2, r3
   2cf4c:	4b03      	ldr	r3, [pc, #12]	; (2cf5c <_sbrk+0x34>)
   2cf4e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2cf50:	68fb      	ldr	r3, [r7, #12]
}
   2cf52:	0018      	movs	r0, r3
   2cf54:	46bd      	mov	sp, r7
   2cf56:	b004      	add	sp, #16
   2cf58:	bd80      	pop	{r7, pc}
   2cf5a:	46c0      	nop			; (mov r8, r8)
   2cf5c:	20003f10 	.word	0x20003f10
   2cf60:	200078c0 	.word	0x200078c0

0002cf64 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2cf64:	b580      	push	{r7, lr}
   2cf66:	b082      	sub	sp, #8
   2cf68:	af00      	add	r7, sp, #0
   2cf6a:	6078      	str	r0, [r7, #4]
	return -1;
   2cf6c:	2301      	movs	r3, #1
   2cf6e:	425b      	negs	r3, r3
}
   2cf70:	0018      	movs	r0, r3
   2cf72:	46bd      	mov	sp, r7
   2cf74:	b002      	add	sp, #8
   2cf76:	bd80      	pop	{r7, pc}

0002cf78 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2cf78:	b580      	push	{r7, lr}
   2cf7a:	b082      	sub	sp, #8
   2cf7c:	af00      	add	r7, sp, #0
   2cf7e:	6078      	str	r0, [r7, #4]
   2cf80:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2cf82:	683b      	ldr	r3, [r7, #0]
   2cf84:	2280      	movs	r2, #128	; 0x80
   2cf86:	0192      	lsls	r2, r2, #6
   2cf88:	605a      	str	r2, [r3, #4]

	return 0;
   2cf8a:	2300      	movs	r3, #0
}
   2cf8c:	0018      	movs	r0, r3
   2cf8e:	46bd      	mov	sp, r7
   2cf90:	b002      	add	sp, #8
   2cf92:	bd80      	pop	{r7, pc}

0002cf94 <_isatty>:

extern int _isatty(int file)
{
   2cf94:	b580      	push	{r7, lr}
   2cf96:	b082      	sub	sp, #8
   2cf98:	af00      	add	r7, sp, #0
   2cf9a:	6078      	str	r0, [r7, #4]
	return 1;
   2cf9c:	2301      	movs	r3, #1
}
   2cf9e:	0018      	movs	r0, r3
   2cfa0:	46bd      	mov	sp, r7
   2cfa2:	b002      	add	sp, #8
   2cfa4:	bd80      	pop	{r7, pc}

0002cfa6 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2cfa6:	b580      	push	{r7, lr}
   2cfa8:	b084      	sub	sp, #16
   2cfaa:	af00      	add	r7, sp, #0
   2cfac:	60f8      	str	r0, [r7, #12]
   2cfae:	60b9      	str	r1, [r7, #8]
   2cfb0:	607a      	str	r2, [r7, #4]
	return 0;
   2cfb2:	2300      	movs	r3, #0
}
   2cfb4:	0018      	movs	r0, r3
   2cfb6:	46bd      	mov	sp, r7
   2cfb8:	b004      	add	sp, #16
   2cfba:	bd80      	pop	{r7, pc}

0002cfbc <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2cfbc:	b580      	push	{r7, lr}
   2cfbe:	b082      	sub	sp, #8
   2cfc0:	af00      	add	r7, sp, #0
   2cfc2:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2cfc4:	687b      	ldr	r3, [r7, #4]
   2cfc6:	2200      	movs	r2, #0
   2cfc8:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2cfca:	687b      	ldr	r3, [r7, #4]
   2cfcc:	2200      	movs	r2, #0
   2cfce:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2cfd0:	687b      	ldr	r3, [r7, #4]
   2cfd2:	2200      	movs	r2, #0
   2cfd4:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2cfd6:	687b      	ldr	r3, [r7, #4]
   2cfd8:	2200      	movs	r2, #0
   2cfda:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2cfdc:	687b      	ldr	r3, [r7, #4]
   2cfde:	2201      	movs	r2, #1
   2cfe0:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2cfe2:	687b      	ldr	r3, [r7, #4]
   2cfe4:	2201      	movs	r2, #1
   2cfe6:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2cfe8:	687b      	ldr	r3, [r7, #4]
   2cfea:	22fa      	movs	r2, #250	; 0xfa
   2cfec:	00d2      	lsls	r2, r2, #3
   2cfee:	80da      	strh	r2, [r3, #6]
}
   2cff0:	46c0      	nop			; (mov r8, r8)
   2cff2:	46bd      	mov	sp, r7
   2cff4:	b002      	add	sp, #8
   2cff6:	bd80      	pop	{r7, pc}

0002cff8 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2cff8:	b580      	push	{r7, lr}
   2cffa:	b086      	sub	sp, #24
   2cffc:	af00      	add	r7, sp, #0
   2cffe:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2d000:	230c      	movs	r3, #12
   2d002:	18fb      	adds	r3, r7, r3
   2d004:	0018      	movs	r0, r3
   2d006:	4b23      	ldr	r3, [pc, #140]	; (2d094 <rtc_calendar_get_config_defaults+0x9c>)
   2d008:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2d00a:	687b      	ldr	r3, [r7, #4]
   2d00c:	22a0      	movs	r2, #160	; 0xa0
   2d00e:	0112      	lsls	r2, r2, #4
   2d010:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2d012:	687b      	ldr	r3, [r7, #4]
   2d014:	2200      	movs	r2, #0
   2d016:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2d018:	687b      	ldr	r3, [r7, #4]
   2d01a:	2200      	movs	r2, #0
   2d01c:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2d01e:	687b      	ldr	r3, [r7, #4]
   2d020:	2200      	movs	r2, #0
   2d022:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2d024:	687b      	ldr	r3, [r7, #4]
   2d026:	22fa      	movs	r2, #250	; 0xfa
   2d028:	00d2      	lsls	r2, r2, #3
   2d02a:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2d02c:	2317      	movs	r3, #23
   2d02e:	18fb      	adds	r3, r7, r3
   2d030:	2200      	movs	r2, #0
   2d032:	701a      	strb	r2, [r3, #0]
   2d034:	e025      	b.n	2d082 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2d036:	2317      	movs	r3, #23
   2d038:	18fb      	adds	r3, r7, r3
   2d03a:	781a      	ldrb	r2, [r3, #0]
   2d03c:	6879      	ldr	r1, [r7, #4]
   2d03e:	2008      	movs	r0, #8
   2d040:	0013      	movs	r3, r2
   2d042:	009b      	lsls	r3, r3, #2
   2d044:	189b      	adds	r3, r3, r2
   2d046:	005b      	lsls	r3, r3, #1
   2d048:	18cb      	adds	r3, r1, r3
   2d04a:	181a      	adds	r2, r3, r0
   2d04c:	230c      	movs	r3, #12
   2d04e:	18fb      	adds	r3, r7, r3
   2d050:	0010      	movs	r0, r2
   2d052:	0019      	movs	r1, r3
   2d054:	2308      	movs	r3, #8
   2d056:	001a      	movs	r2, r3
   2d058:	4b0f      	ldr	r3, [pc, #60]	; (2d098 <rtc_calendar_get_config_defaults+0xa0>)
   2d05a:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2d05c:	2317      	movs	r3, #23
   2d05e:	18fb      	adds	r3, r7, r3
   2d060:	781a      	ldrb	r2, [r3, #0]
   2d062:	6879      	ldr	r1, [r7, #4]
   2d064:	0013      	movs	r3, r2
   2d066:	009b      	lsls	r3, r3, #2
   2d068:	189b      	adds	r3, r3, r2
   2d06a:	005b      	lsls	r3, r3, #1
   2d06c:	18cb      	adds	r3, r1, r3
   2d06e:	3310      	adds	r3, #16
   2d070:	2206      	movs	r2, #6
   2d072:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2d074:	2317      	movs	r3, #23
   2d076:	18fb      	adds	r3, r7, r3
   2d078:	781a      	ldrb	r2, [r3, #0]
   2d07a:	2317      	movs	r3, #23
   2d07c:	18fb      	adds	r3, r7, r3
   2d07e:	3201      	adds	r2, #1
   2d080:	701a      	strb	r2, [r3, #0]
   2d082:	2317      	movs	r3, #23
   2d084:	18fb      	adds	r3, r7, r3
   2d086:	781b      	ldrb	r3, [r3, #0]
   2d088:	2b00      	cmp	r3, #0
   2d08a:	d0d4      	beq.n	2d036 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2d08c:	46c0      	nop			; (mov r8, r8)
   2d08e:	46bd      	mov	sp, r7
   2d090:	b006      	add	sp, #24
   2d092:	bd80      	pop	{r7, pc}
   2d094:	0002cfbd 	.word	0x0002cfbd
   2d098:	00036c69 	.word	0x00036c69

0002d09c <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2d09c:	b580      	push	{r7, lr}
   2d09e:	b088      	sub	sp, #32
   2d0a0:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2d0a2:	230c      	movs	r3, #12
   2d0a4:	18fb      	adds	r3, r7, r3
   2d0a6:	0018      	movs	r0, r3
   2d0a8:	4b1a      	ldr	r3, [pc, #104]	; (2d114 <configure_rtc_calendar+0x78>)
   2d0aa:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2d0ac:	1d3b      	adds	r3, r7, #4
   2d0ae:	0018      	movs	r0, r3
   2d0b0:	4b19      	ldr	r3, [pc, #100]	; (2d118 <configure_rtc_calendar+0x7c>)
   2d0b2:	4798      	blx	r3
	init_time.year   = 2014;
   2d0b4:	1d3b      	adds	r3, r7, #4
   2d0b6:	4a19      	ldr	r2, [pc, #100]	; (2d11c <configure_rtc_calendar+0x80>)
   2d0b8:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2d0ba:	1d3b      	adds	r3, r7, #4
   2d0bc:	2201      	movs	r2, #1
   2d0be:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2d0c0:	1d3b      	adds	r3, r7, #4
   2d0c2:	2201      	movs	r2, #1
   2d0c4:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2d0c6:	1d3b      	adds	r3, r7, #4
   2d0c8:	2200      	movs	r2, #0
   2d0ca:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2d0cc:	1d3b      	adds	r3, r7, #4
   2d0ce:	2200      	movs	r2, #0
   2d0d0:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2d0d2:	1d3b      	adds	r3, r7, #4
   2d0d4:	2204      	movs	r2, #4
   2d0d6:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2d0d8:	230c      	movs	r3, #12
   2d0da:	18fb      	adds	r3, r7, r3
   2d0dc:	2201      	movs	r2, #1
   2d0de:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2d0e0:	230c      	movs	r3, #12
   2d0e2:	18fb      	adds	r3, r7, r3
   2d0e4:	1d3a      	adds	r2, r7, #4
   2d0e6:	3308      	adds	r3, #8
   2d0e8:	ca03      	ldmia	r2!, {r0, r1}
   2d0ea:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2d0ec:	230c      	movs	r3, #12
   2d0ee:	18fb      	adds	r3, r7, r3
   2d0f0:	2206      	movs	r2, #6
   2d0f2:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2d0f4:	230c      	movs	r3, #12
   2d0f6:	18fa      	adds	r2, r7, r3
   2d0f8:	4909      	ldr	r1, [pc, #36]	; (2d120 <configure_rtc_calendar+0x84>)
   2d0fa:	4b0a      	ldr	r3, [pc, #40]	; (2d124 <configure_rtc_calendar+0x88>)
   2d0fc:	0018      	movs	r0, r3
   2d0fe:	4b0a      	ldr	r3, [pc, #40]	; (2d128 <configure_rtc_calendar+0x8c>)
   2d100:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2d102:	4b08      	ldr	r3, [pc, #32]	; (2d124 <configure_rtc_calendar+0x88>)
   2d104:	0018      	movs	r0, r3
   2d106:	4b09      	ldr	r3, [pc, #36]	; (2d12c <configure_rtc_calendar+0x90>)
   2d108:	4798      	blx	r3
}
   2d10a:	46c0      	nop			; (mov r8, r8)
   2d10c:	46bd      	mov	sp, r7
   2d10e:	b008      	add	sp, #32
   2d110:	bd80      	pop	{r7, pc}
   2d112:	46c0      	nop			; (mov r8, r8)
   2d114:	0002cff9 	.word	0x0002cff9
   2d118:	0002cfbd 	.word	0x0002cfbd
   2d11c:	000007de 	.word	0x000007de
   2d120:	40001400 	.word	0x40001400
   2d124:	20005864 	.word	0x20005864
   2d128:	00028b7d 	.word	0x00028b7d
   2d12c:	000288a9 	.word	0x000288a9

0002d130 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2d130:	b590      	push	{r4, r7, lr}
   2d132:	b085      	sub	sp, #20
   2d134:	af00      	add	r7, sp, #0
   2d136:	0002      	movs	r2, r0
   2d138:	1dfb      	adds	r3, r7, #7
   2d13a:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2d13c:	4b1a      	ldr	r3, [pc, #104]	; (2d1a8 <disk_initialize+0x78>)
   2d13e:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2d140:	1dfb      	adds	r3, r7, #7
   2d142:	781b      	ldrb	r3, [r3, #0]
   2d144:	2b01      	cmp	r3, #1
   2d146:	d901      	bls.n	2d14c <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2d148:	2301      	movs	r3, #1
   2d14a:	e029      	b.n	2d1a0 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2d14c:	2300      	movs	r3, #0
   2d14e:	60fb      	str	r3, [r7, #12]
   2d150:	e010      	b.n	2d174 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2d152:	230b      	movs	r3, #11
   2d154:	18fc      	adds	r4, r7, r3
   2d156:	1dfb      	adds	r3, r7, #7
   2d158:	781b      	ldrb	r3, [r3, #0]
   2d15a:	0018      	movs	r0, r3
   2d15c:	4b13      	ldr	r3, [pc, #76]	; (2d1ac <disk_initialize+0x7c>)
   2d15e:	4798      	blx	r3
   2d160:	0003      	movs	r3, r0
   2d162:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2d164:	230b      	movs	r3, #11
   2d166:	18fb      	adds	r3, r7, r3
   2d168:	781b      	ldrb	r3, [r3, #0]
   2d16a:	2b03      	cmp	r3, #3
   2d16c:	d106      	bne.n	2d17c <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2d16e:	68fb      	ldr	r3, [r7, #12]
   2d170:	3301      	adds	r3, #1
   2d172:	60fb      	str	r3, [r7, #12]
   2d174:	68fb      	ldr	r3, [r7, #12]
   2d176:	2b01      	cmp	r3, #1
   2d178:	ddeb      	ble.n	2d152 <disk_initialize+0x22>
   2d17a:	e000      	b.n	2d17e <disk_initialize+0x4e>
			break;
   2d17c:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2d17e:	230b      	movs	r3, #11
   2d180:	18fb      	adds	r3, r7, r3
   2d182:	781b      	ldrb	r3, [r3, #0]
   2d184:	2b00      	cmp	r3, #0
   2d186:	d001      	beq.n	2d18c <disk_initialize+0x5c>
		return STA_NOINIT;
   2d188:	2301      	movs	r3, #1
   2d18a:	e009      	b.n	2d1a0 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2d18c:	1dfb      	adds	r3, r7, #7
   2d18e:	781b      	ldrb	r3, [r3, #0]
   2d190:	0018      	movs	r0, r3
   2d192:	4b07      	ldr	r3, [pc, #28]	; (2d1b0 <disk_initialize+0x80>)
   2d194:	4798      	blx	r3
   2d196:	1e03      	subs	r3, r0, #0
   2d198:	d001      	beq.n	2d19e <disk_initialize+0x6e>
		return STA_PROTECT;
   2d19a:	2304      	movs	r3, #4
   2d19c:	e000      	b.n	2d1a0 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2d19e:	2300      	movs	r3, #0
}
   2d1a0:	0018      	movs	r0, r3
   2d1a2:	46bd      	mov	sp, r7
   2d1a4:	b005      	add	sp, #20
   2d1a6:	bd90      	pop	{r4, r7, pc}
   2d1a8:	0002d09d 	.word	0x0002d09d
   2d1ac:	00027da5 	.word	0x00027da5
   2d1b0:	00027e5d 	.word	0x00027e5d

0002d1b4 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2d1b4:	b580      	push	{r7, lr}
   2d1b6:	b082      	sub	sp, #8
   2d1b8:	af00      	add	r7, sp, #0
   2d1ba:	0002      	movs	r2, r0
   2d1bc:	1dfb      	adds	r3, r7, #7
   2d1be:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2d1c0:	1dfb      	adds	r3, r7, #7
   2d1c2:	781b      	ldrb	r3, [r3, #0]
   2d1c4:	0018      	movs	r0, r3
   2d1c6:	4b08      	ldr	r3, [pc, #32]	; (2d1e8 <disk_status+0x34>)
   2d1c8:	4798      	blx	r3
   2d1ca:	1e03      	subs	r3, r0, #0
   2d1cc:	d002      	beq.n	2d1d4 <disk_status+0x20>
   2d1ce:	2b02      	cmp	r3, #2
   2d1d0:	d002      	beq.n	2d1d8 <disk_status+0x24>
   2d1d2:	e003      	b.n	2d1dc <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2d1d4:	2300      	movs	r3, #0
   2d1d6:	e002      	b.n	2d1de <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2d1d8:	2303      	movs	r3, #3
   2d1da:	e000      	b.n	2d1de <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2d1dc:	2301      	movs	r3, #1
	}
}
   2d1de:	0018      	movs	r0, r3
   2d1e0:	46bd      	mov	sp, r7
   2d1e2:	b002      	add	sp, #8
   2d1e4:	bd80      	pop	{r7, pc}
   2d1e6:	46c0      	nop			; (mov r8, r8)
   2d1e8:	00027da5 	.word	0x00027da5

0002d1ec <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2d1ec:	b590      	push	{r4, r7, lr}
   2d1ee:	b089      	sub	sp, #36	; 0x24
   2d1f0:	af00      	add	r7, sp, #0
   2d1f2:	60b9      	str	r1, [r7, #8]
   2d1f4:	607a      	str	r2, [r7, #4]
   2d1f6:	0019      	movs	r1, r3
   2d1f8:	230f      	movs	r3, #15
   2d1fa:	18fb      	adds	r3, r7, r3
   2d1fc:	1c02      	adds	r2, r0, #0
   2d1fe:	701a      	strb	r2, [r3, #0]
   2d200:	230e      	movs	r3, #14
   2d202:	18fb      	adds	r3, r7, r3
   2d204:	1c0a      	adds	r2, r1, #0
   2d206:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2d208:	231b      	movs	r3, #27
   2d20a:	18fc      	adds	r4, r7, r3
   2d20c:	230f      	movs	r3, #15
   2d20e:	18fb      	adds	r3, r7, r3
   2d210:	781b      	ldrb	r3, [r3, #0]
   2d212:	0018      	movs	r0, r3
   2d214:	4b28      	ldr	r3, [pc, #160]	; (2d2b8 <disk_read+0xcc>)
   2d216:	4798      	blx	r3
   2d218:	0003      	movs	r3, r0
   2d21a:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2d21c:	231b      	movs	r3, #27
   2d21e:	18fb      	adds	r3, r7, r3
   2d220:	781b      	ldrb	r3, [r3, #0]
   2d222:	2b00      	cmp	r3, #0
   2d224:	d101      	bne.n	2d22a <disk_read+0x3e>
		return RES_ERROR;
   2d226:	2301      	movs	r3, #1
   2d228:	e042      	b.n	2d2b0 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2d22a:	2314      	movs	r3, #20
   2d22c:	18fa      	adds	r2, r7, r3
   2d22e:	230f      	movs	r3, #15
   2d230:	18fb      	adds	r3, r7, r3
   2d232:	781b      	ldrb	r3, [r3, #0]
   2d234:	0011      	movs	r1, r2
   2d236:	0018      	movs	r0, r3
   2d238:	4b20      	ldr	r3, [pc, #128]	; (2d2bc <disk_read+0xd0>)
   2d23a:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2d23c:	230e      	movs	r3, #14
   2d23e:	18fb      	adds	r3, r7, r3
   2d240:	781b      	ldrb	r3, [r3, #0]
   2d242:	221b      	movs	r2, #27
   2d244:	18ba      	adds	r2, r7, r2
   2d246:	7812      	ldrb	r2, [r2, #0]
   2d248:	4353      	muls	r3, r2
   2d24a:	001a      	movs	r2, r3
   2d24c:	687b      	ldr	r3, [r7, #4]
   2d24e:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2d250:	697b      	ldr	r3, [r7, #20]
   2d252:	3301      	adds	r3, #1
   2d254:	211b      	movs	r1, #27
   2d256:	1879      	adds	r1, r7, r1
   2d258:	7809      	ldrb	r1, [r1, #0]
   2d25a:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2d25c:	429a      	cmp	r2, r3
   2d25e:	d901      	bls.n	2d264 <disk_read+0x78>
		return RES_PARERR;
   2d260:	2304      	movs	r3, #4
   2d262:	e025      	b.n	2d2b0 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2d264:	2300      	movs	r3, #0
   2d266:	61fb      	str	r3, [r7, #28]
   2d268:	e01b      	b.n	2d2a2 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2d26a:	231b      	movs	r3, #27
   2d26c:	18fb      	adds	r3, r7, r3
   2d26e:	781b      	ldrb	r3, [r3, #0]
   2d270:	69fa      	ldr	r2, [r7, #28]
   2d272:	435a      	muls	r2, r3
   2d274:	687b      	ldr	r3, [r7, #4]
   2d276:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2d278:	231b      	movs	r3, #27
   2d27a:	18fb      	adds	r3, r7, r3
   2d27c:	781b      	ldrb	r3, [r3, #0]
   2d27e:	69fa      	ldr	r2, [r7, #28]
   2d280:	4353      	muls	r3, r2
   2d282:	025b      	lsls	r3, r3, #9
   2d284:	68ba      	ldr	r2, [r7, #8]
   2d286:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2d288:	230f      	movs	r3, #15
   2d28a:	18fb      	adds	r3, r7, r3
   2d28c:	781b      	ldrb	r3, [r3, #0]
   2d28e:	0018      	movs	r0, r3
   2d290:	4b0b      	ldr	r3, [pc, #44]	; (2d2c0 <disk_read+0xd4>)
   2d292:	4798      	blx	r3
   2d294:	1e03      	subs	r3, r0, #0
   2d296:	d001      	beq.n	2d29c <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2d298:	2301      	movs	r3, #1
   2d29a:	e009      	b.n	2d2b0 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2d29c:	69fb      	ldr	r3, [r7, #28]
   2d29e:	3301      	adds	r3, #1
   2d2a0:	61fb      	str	r3, [r7, #28]
   2d2a2:	230e      	movs	r3, #14
   2d2a4:	18fb      	adds	r3, r7, r3
   2d2a6:	781a      	ldrb	r2, [r3, #0]
   2d2a8:	69fb      	ldr	r3, [r7, #28]
   2d2aa:	429a      	cmp	r2, r3
   2d2ac:	d8dd      	bhi.n	2d26a <disk_read+0x7e>
		}
	}

	return RES_OK;
   2d2ae:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2d2b0:	0018      	movs	r0, r3
   2d2b2:	46bd      	mov	sp, r7
   2d2b4:	b009      	add	sp, #36	; 0x24
   2d2b6:	bd90      	pop	{r4, r7, pc}
   2d2b8:	00027e31 	.word	0x00027e31
   2d2bc:	00027de5 	.word	0x00027de5
   2d2c0:	00027ea5 	.word	0x00027ea5

0002d2c4 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2d2c4:	b590      	push	{r4, r7, lr}
   2d2c6:	b089      	sub	sp, #36	; 0x24
   2d2c8:	af00      	add	r7, sp, #0
   2d2ca:	60b9      	str	r1, [r7, #8]
   2d2cc:	607a      	str	r2, [r7, #4]
   2d2ce:	0019      	movs	r1, r3
   2d2d0:	230f      	movs	r3, #15
   2d2d2:	18fb      	adds	r3, r7, r3
   2d2d4:	1c02      	adds	r2, r0, #0
   2d2d6:	701a      	strb	r2, [r3, #0]
   2d2d8:	230e      	movs	r3, #14
   2d2da:	18fb      	adds	r3, r7, r3
   2d2dc:	1c0a      	adds	r2, r1, #0
   2d2de:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2d2e0:	231b      	movs	r3, #27
   2d2e2:	18fc      	adds	r4, r7, r3
   2d2e4:	230f      	movs	r3, #15
   2d2e6:	18fb      	adds	r3, r7, r3
   2d2e8:	781b      	ldrb	r3, [r3, #0]
   2d2ea:	0018      	movs	r0, r3
   2d2ec:	4b28      	ldr	r3, [pc, #160]	; (2d390 <disk_write+0xcc>)
   2d2ee:	4798      	blx	r3
   2d2f0:	0003      	movs	r3, r0
   2d2f2:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2d2f4:	231b      	movs	r3, #27
   2d2f6:	18fb      	adds	r3, r7, r3
   2d2f8:	781b      	ldrb	r3, [r3, #0]
   2d2fa:	2b00      	cmp	r3, #0
   2d2fc:	d101      	bne.n	2d302 <disk_write+0x3e>
		return RES_ERROR;
   2d2fe:	2301      	movs	r3, #1
   2d300:	e042      	b.n	2d388 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2d302:	2314      	movs	r3, #20
   2d304:	18fa      	adds	r2, r7, r3
   2d306:	230f      	movs	r3, #15
   2d308:	18fb      	adds	r3, r7, r3
   2d30a:	781b      	ldrb	r3, [r3, #0]
   2d30c:	0011      	movs	r1, r2
   2d30e:	0018      	movs	r0, r3
   2d310:	4b20      	ldr	r3, [pc, #128]	; (2d394 <disk_write+0xd0>)
   2d312:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2d314:	230e      	movs	r3, #14
   2d316:	18fb      	adds	r3, r7, r3
   2d318:	781b      	ldrb	r3, [r3, #0]
   2d31a:	221b      	movs	r2, #27
   2d31c:	18ba      	adds	r2, r7, r2
   2d31e:	7812      	ldrb	r2, [r2, #0]
   2d320:	4353      	muls	r3, r2
   2d322:	001a      	movs	r2, r3
   2d324:	687b      	ldr	r3, [r7, #4]
   2d326:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2d328:	697b      	ldr	r3, [r7, #20]
   2d32a:	3301      	adds	r3, #1
   2d32c:	211b      	movs	r1, #27
   2d32e:	1879      	adds	r1, r7, r1
   2d330:	7809      	ldrb	r1, [r1, #0]
   2d332:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2d334:	429a      	cmp	r2, r3
   2d336:	d901      	bls.n	2d33c <disk_write+0x78>
		return RES_PARERR;
   2d338:	2304      	movs	r3, #4
   2d33a:	e025      	b.n	2d388 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2d33c:	2300      	movs	r3, #0
   2d33e:	61fb      	str	r3, [r7, #28]
   2d340:	e01b      	b.n	2d37a <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2d342:	231b      	movs	r3, #27
   2d344:	18fb      	adds	r3, r7, r3
   2d346:	781b      	ldrb	r3, [r3, #0]
   2d348:	69fa      	ldr	r2, [r7, #28]
   2d34a:	435a      	muls	r2, r3
   2d34c:	687b      	ldr	r3, [r7, #4]
   2d34e:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2d350:	231b      	movs	r3, #27
   2d352:	18fb      	adds	r3, r7, r3
   2d354:	781b      	ldrb	r3, [r3, #0]
   2d356:	69fa      	ldr	r2, [r7, #28]
   2d358:	4353      	muls	r3, r2
   2d35a:	025b      	lsls	r3, r3, #9
   2d35c:	68ba      	ldr	r2, [r7, #8]
   2d35e:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2d360:	230f      	movs	r3, #15
   2d362:	18fb      	adds	r3, r7, r3
   2d364:	781b      	ldrb	r3, [r3, #0]
   2d366:	0018      	movs	r0, r3
   2d368:	4b0b      	ldr	r3, [pc, #44]	; (2d398 <disk_write+0xd4>)
   2d36a:	4798      	blx	r3
   2d36c:	1e03      	subs	r3, r0, #0
   2d36e:	d001      	beq.n	2d374 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2d370:	2301      	movs	r3, #1
   2d372:	e009      	b.n	2d388 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2d374:	69fb      	ldr	r3, [r7, #28]
   2d376:	3301      	adds	r3, #1
   2d378:	61fb      	str	r3, [r7, #28]
   2d37a:	230e      	movs	r3, #14
   2d37c:	18fb      	adds	r3, r7, r3
   2d37e:	781a      	ldrb	r2, [r3, #0]
   2d380:	69fb      	ldr	r3, [r7, #28]
   2d382:	429a      	cmp	r2, r3
   2d384:	d8dd      	bhi.n	2d342 <disk_write+0x7e>
		}
	}

	return RES_OK;
   2d386:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2d388:	0018      	movs	r0, r3
   2d38a:	46bd      	mov	sp, r7
   2d38c:	b009      	add	sp, #36	; 0x24
   2d38e:	bd90      	pop	{r4, r7, pc}
   2d390:	00027e31 	.word	0x00027e31
   2d394:	00027de5 	.word	0x00027de5
   2d398:	00027ef9 	.word	0x00027ef9

0002d39c <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2d39c:	b590      	push	{r4, r7, lr}
   2d39e:	b085      	sub	sp, #20
   2d3a0:	af00      	add	r7, sp, #0
   2d3a2:	603a      	str	r2, [r7, #0]
   2d3a4:	1dfb      	adds	r3, r7, #7
   2d3a6:	1c02      	adds	r2, r0, #0
   2d3a8:	701a      	strb	r2, [r3, #0]
   2d3aa:	1dbb      	adds	r3, r7, #6
   2d3ac:	1c0a      	adds	r2, r1, #0
   2d3ae:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2d3b0:	230f      	movs	r3, #15
   2d3b2:	18fb      	adds	r3, r7, r3
   2d3b4:	2204      	movs	r2, #4
   2d3b6:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2d3b8:	1dbb      	adds	r3, r7, #6
   2d3ba:	781b      	ldrb	r3, [r3, #0]
   2d3bc:	2b01      	cmp	r3, #1
   2d3be:	d00f      	beq.n	2d3e0 <disk_ioctl+0x44>
   2d3c0:	dc02      	bgt.n	2d3c8 <disk_ioctl+0x2c>
   2d3c2:	2b00      	cmp	r3, #0
   2d3c4:	d044      	beq.n	2d450 <disk_ioctl+0xb4>
   2d3c6:	e054      	b.n	2d472 <disk_ioctl+0xd6>
   2d3c8:	2b02      	cmp	r3, #2
   2d3ca:	d01a      	beq.n	2d402 <disk_ioctl+0x66>
   2d3cc:	2b03      	cmp	r3, #3
   2d3ce:	d150      	bne.n	2d472 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2d3d0:	683b      	ldr	r3, [r7, #0]
   2d3d2:	2201      	movs	r2, #1
   2d3d4:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2d3d6:	230f      	movs	r3, #15
   2d3d8:	18fb      	adds	r3, r7, r3
   2d3da:	2200      	movs	r2, #0
   2d3dc:	701a      	strb	r2, [r3, #0]
		break;
   2d3de:	e04c      	b.n	2d47a <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2d3e0:	2308      	movs	r3, #8
   2d3e2:	18fa      	adds	r2, r7, r3
   2d3e4:	1dfb      	adds	r3, r7, #7
   2d3e6:	781b      	ldrb	r3, [r3, #0]
   2d3e8:	0011      	movs	r1, r2
   2d3ea:	0018      	movs	r0, r3
   2d3ec:	4b26      	ldr	r3, [pc, #152]	; (2d488 <disk_ioctl+0xec>)
   2d3ee:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2d3f0:	68bb      	ldr	r3, [r7, #8]
   2d3f2:	1c5a      	adds	r2, r3, #1
   2d3f4:	683b      	ldr	r3, [r7, #0]
   2d3f6:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2d3f8:	230f      	movs	r3, #15
   2d3fa:	18fb      	adds	r3, r7, r3
   2d3fc:	2200      	movs	r2, #0
   2d3fe:	701a      	strb	r2, [r3, #0]
	}
	break;
   2d400:	e03b      	b.n	2d47a <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2d402:	230e      	movs	r3, #14
   2d404:	18fc      	adds	r4, r7, r3
   2d406:	1dfb      	adds	r3, r7, #7
   2d408:	781b      	ldrb	r3, [r3, #0]
   2d40a:	0018      	movs	r0, r3
   2d40c:	4b1f      	ldr	r3, [pc, #124]	; (2d48c <disk_ioctl+0xf0>)
   2d40e:	4798      	blx	r3
   2d410:	0003      	movs	r3, r0
   2d412:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2d414:	230e      	movs	r3, #14
   2d416:	18fb      	adds	r3, r7, r3
   2d418:	781b      	ldrb	r3, [r3, #0]
   2d41a:	2b01      	cmp	r3, #1
   2d41c:	d010      	beq.n	2d440 <disk_ioctl+0xa4>
   2d41e:	230e      	movs	r3, #14
   2d420:	18fb      	adds	r3, r7, r3
   2d422:	781b      	ldrb	r3, [r3, #0]
   2d424:	2b02      	cmp	r3, #2
   2d426:	d00b      	beq.n	2d440 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2d428:	230e      	movs	r3, #14
   2d42a:	18fb      	adds	r3, r7, r3
   2d42c:	781b      	ldrb	r3, [r3, #0]
   2d42e:	2b04      	cmp	r3, #4
   2d430:	d006      	beq.n	2d440 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2d432:	230e      	movs	r3, #14
   2d434:	18fb      	adds	r3, r7, r3
   2d436:	781b      	ldrb	r3, [r3, #0]
   2d438:	2b08      	cmp	r3, #8
   2d43a:	d001      	beq.n	2d440 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2d43c:	2301      	movs	r3, #1
   2d43e:	e01f      	b.n	2d480 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2d440:	683b      	ldr	r3, [r7, #0]
   2d442:	2200      	movs	r2, #0
   2d444:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2d446:	230f      	movs	r3, #15
   2d448:	18fb      	adds	r3, r7, r3
   2d44a:	2200      	movs	r2, #0
   2d44c:	701a      	strb	r2, [r3, #0]
	}
	break;
   2d44e:	e014      	b.n	2d47a <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2d450:	1dfb      	adds	r3, r7, #7
   2d452:	781b      	ldrb	r3, [r3, #0]
   2d454:	0018      	movs	r0, r3
   2d456:	4b0e      	ldr	r3, [pc, #56]	; (2d490 <disk_ioctl+0xf4>)
   2d458:	4798      	blx	r3
   2d45a:	1e03      	subs	r3, r0, #0
   2d45c:	d104      	bne.n	2d468 <disk_ioctl+0xcc>
			res = RES_OK;
   2d45e:	230f      	movs	r3, #15
   2d460:	18fb      	adds	r3, r7, r3
   2d462:	2200      	movs	r2, #0
   2d464:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2d466:	e008      	b.n	2d47a <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2d468:	230f      	movs	r3, #15
   2d46a:	18fb      	adds	r3, r7, r3
   2d46c:	2203      	movs	r2, #3
   2d46e:	701a      	strb	r2, [r3, #0]
		break;
   2d470:	e003      	b.n	2d47a <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2d472:	230f      	movs	r3, #15
   2d474:	18fb      	adds	r3, r7, r3
   2d476:	2204      	movs	r2, #4
   2d478:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2d47a:	230f      	movs	r3, #15
   2d47c:	18fb      	adds	r3, r7, r3
   2d47e:	781b      	ldrb	r3, [r3, #0]
}
   2d480:	0018      	movs	r0, r3
   2d482:	46bd      	mov	sp, r7
   2d484:	b005      	add	sp, #20
   2d486:	bd90      	pop	{r4, r7, pc}
   2d488:	00027de5 	.word	0x00027de5
   2d48c:	00027e31 	.word	0x00027e31
   2d490:	00027da5 	.word	0x00027da5

0002d494 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2d494:	b580      	push	{r7, lr}
   2d496:	b084      	sub	sp, #16
   2d498:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2d49a:	1d3a      	adds	r2, r7, #4
   2d49c:	4b12      	ldr	r3, [pc, #72]	; (2d4e8 <get_fattime+0x54>)
   2d49e:	0011      	movs	r1, r2
   2d4a0:	0018      	movs	r0, r3
   2d4a2:	4b12      	ldr	r3, [pc, #72]	; (2d4ec <get_fattime+0x58>)
   2d4a4:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2d4a6:	1d3b      	adds	r3, r7, #4
   2d4a8:	88db      	ldrh	r3, [r3, #6]
   2d4aa:	4a11      	ldr	r2, [pc, #68]	; (2d4f0 <get_fattime+0x5c>)
   2d4ac:	4694      	mov	ip, r2
   2d4ae:	4463      	add	r3, ip
   2d4b0:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2d4b2:	1d3b      	adds	r3, r7, #4
   2d4b4:	795b      	ldrb	r3, [r3, #5]
   2d4b6:	055b      	lsls	r3, r3, #21
   2d4b8:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2d4ba:	1d3b      	adds	r3, r7, #4
   2d4bc:	791b      	ldrb	r3, [r3, #4]
   2d4be:	041b      	lsls	r3, r3, #16
   2d4c0:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2d4c2:	1d3b      	adds	r3, r7, #4
   2d4c4:	789b      	ldrb	r3, [r3, #2]
   2d4c6:	02db      	lsls	r3, r3, #11
   2d4c8:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2d4ca:	1d3b      	adds	r3, r7, #4
   2d4cc:	785b      	ldrb	r3, [r3, #1]
   2d4ce:	015b      	lsls	r3, r3, #5
   2d4d0:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2d4d2:	1d3a      	adds	r2, r7, #4
   2d4d4:	7812      	ldrb	r2, [r2, #0]
   2d4d6:	0852      	lsrs	r2, r2, #1
   2d4d8:	b2d2      	uxtb	r2, r2
   2d4da:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2d4dc:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2d4de:	68fb      	ldr	r3, [r7, #12]
}
   2d4e0:	0018      	movs	r0, r3
   2d4e2:	46bd      	mov	sp, r7
   2d4e4:	b004      	add	sp, #16
   2d4e6:	bd80      	pop	{r7, pc}
   2d4e8:	20005864 	.word	0x20005864
   2d4ec:	00028c11 	.word	0x00028c11
   2d4f0:	fffff844 	.word	0xfffff844

0002d4f4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2d4f4:	b580      	push	{r7, lr}
   2d4f6:	b086      	sub	sp, #24
   2d4f8:	af00      	add	r7, sp, #0
   2d4fa:	60f8      	str	r0, [r7, #12]
   2d4fc:	60b9      	str	r1, [r7, #8]
   2d4fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2d500:	68fb      	ldr	r3, [r7, #12]
   2d502:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2d504:	68bb      	ldr	r3, [r7, #8]
   2d506:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2d508:	e007      	b.n	2d51a <mem_cpy+0x26>
		*d++ = *s++;
   2d50a:	697b      	ldr	r3, [r7, #20]
   2d50c:	1c5a      	adds	r2, r3, #1
   2d50e:	617a      	str	r2, [r7, #20]
   2d510:	693a      	ldr	r2, [r7, #16]
   2d512:	1c51      	adds	r1, r2, #1
   2d514:	6139      	str	r1, [r7, #16]
   2d516:	7812      	ldrb	r2, [r2, #0]
   2d518:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2d51a:	687b      	ldr	r3, [r7, #4]
   2d51c:	1e5a      	subs	r2, r3, #1
   2d51e:	607a      	str	r2, [r7, #4]
   2d520:	2b00      	cmp	r3, #0
   2d522:	d1f2      	bne.n	2d50a <mem_cpy+0x16>
}
   2d524:	46c0      	nop			; (mov r8, r8)
   2d526:	46bd      	mov	sp, r7
   2d528:	b006      	add	sp, #24
   2d52a:	bd80      	pop	{r7, pc}

0002d52c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2d52c:	b580      	push	{r7, lr}
   2d52e:	b086      	sub	sp, #24
   2d530:	af00      	add	r7, sp, #0
   2d532:	60f8      	str	r0, [r7, #12]
   2d534:	60b9      	str	r1, [r7, #8]
   2d536:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2d538:	68fb      	ldr	r3, [r7, #12]
   2d53a:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2d53c:	e005      	b.n	2d54a <mem_set+0x1e>
		*d++ = (BYTE)val;
   2d53e:	697b      	ldr	r3, [r7, #20]
   2d540:	1c5a      	adds	r2, r3, #1
   2d542:	617a      	str	r2, [r7, #20]
   2d544:	68ba      	ldr	r2, [r7, #8]
   2d546:	b2d2      	uxtb	r2, r2
   2d548:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2d54a:	687b      	ldr	r3, [r7, #4]
   2d54c:	1e5a      	subs	r2, r3, #1
   2d54e:	607a      	str	r2, [r7, #4]
   2d550:	2b00      	cmp	r3, #0
   2d552:	d1f4      	bne.n	2d53e <mem_set+0x12>
}
   2d554:	46c0      	nop			; (mov r8, r8)
   2d556:	46bd      	mov	sp, r7
   2d558:	b006      	add	sp, #24
   2d55a:	bd80      	pop	{r7, pc}

0002d55c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2d55c:	b580      	push	{r7, lr}
   2d55e:	b088      	sub	sp, #32
   2d560:	af00      	add	r7, sp, #0
   2d562:	60f8      	str	r0, [r7, #12]
   2d564:	60b9      	str	r1, [r7, #8]
   2d566:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2d568:	68fb      	ldr	r3, [r7, #12]
   2d56a:	61fb      	str	r3, [r7, #28]
   2d56c:	68bb      	ldr	r3, [r7, #8]
   2d56e:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2d570:	2300      	movs	r3, #0
   2d572:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2d574:	46c0      	nop			; (mov r8, r8)
   2d576:	687b      	ldr	r3, [r7, #4]
   2d578:	1e5a      	subs	r2, r3, #1
   2d57a:	607a      	str	r2, [r7, #4]
   2d57c:	2b00      	cmp	r3, #0
   2d57e:	d00d      	beq.n	2d59c <mem_cmp+0x40>
   2d580:	69fb      	ldr	r3, [r7, #28]
   2d582:	1c5a      	adds	r2, r3, #1
   2d584:	61fa      	str	r2, [r7, #28]
   2d586:	781b      	ldrb	r3, [r3, #0]
   2d588:	0019      	movs	r1, r3
   2d58a:	69bb      	ldr	r3, [r7, #24]
   2d58c:	1c5a      	adds	r2, r3, #1
   2d58e:	61ba      	str	r2, [r7, #24]
   2d590:	781b      	ldrb	r3, [r3, #0]
   2d592:	1acb      	subs	r3, r1, r3
   2d594:	617b      	str	r3, [r7, #20]
   2d596:	697b      	ldr	r3, [r7, #20]
   2d598:	2b00      	cmp	r3, #0
   2d59a:	d0ec      	beq.n	2d576 <mem_cmp+0x1a>
	return r;
   2d59c:	697b      	ldr	r3, [r7, #20]
}
   2d59e:	0018      	movs	r0, r3
   2d5a0:	46bd      	mov	sp, r7
   2d5a2:	b008      	add	sp, #32
   2d5a4:	bd80      	pop	{r7, pc}

0002d5a6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2d5a6:	b580      	push	{r7, lr}
   2d5a8:	b082      	sub	sp, #8
   2d5aa:	af00      	add	r7, sp, #0
   2d5ac:	6078      	str	r0, [r7, #4]
   2d5ae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2d5b0:	e002      	b.n	2d5b8 <chk_chr+0x12>
   2d5b2:	687b      	ldr	r3, [r7, #4]
   2d5b4:	3301      	adds	r3, #1
   2d5b6:	607b      	str	r3, [r7, #4]
   2d5b8:	687b      	ldr	r3, [r7, #4]
   2d5ba:	781b      	ldrb	r3, [r3, #0]
   2d5bc:	2b00      	cmp	r3, #0
   2d5be:	d005      	beq.n	2d5cc <chk_chr+0x26>
   2d5c0:	687b      	ldr	r3, [r7, #4]
   2d5c2:	781b      	ldrb	r3, [r3, #0]
   2d5c4:	001a      	movs	r2, r3
   2d5c6:	683b      	ldr	r3, [r7, #0]
   2d5c8:	429a      	cmp	r2, r3
   2d5ca:	d1f2      	bne.n	2d5b2 <chk_chr+0xc>
	return *str;
   2d5cc:	687b      	ldr	r3, [r7, #4]
   2d5ce:	781b      	ldrb	r3, [r3, #0]
}
   2d5d0:	0018      	movs	r0, r3
   2d5d2:	46bd      	mov	sp, r7
   2d5d4:	b002      	add	sp, #8
   2d5d6:	bd80      	pop	{r7, pc}

0002d5d8 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2d5d8:	b590      	push	{r4, r7, lr}
   2d5da:	b085      	sub	sp, #20
   2d5dc:	af00      	add	r7, sp, #0
   2d5de:	6078      	str	r0, [r7, #4]
   2d5e0:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2d5e2:	687b      	ldr	r3, [r7, #4]
   2d5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2d5e6:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2d5e8:	68fa      	ldr	r2, [r7, #12]
   2d5ea:	683b      	ldr	r3, [r7, #0]
   2d5ec:	429a      	cmp	r2, r3
   2d5ee:	d04e      	beq.n	2d68e <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2d5f0:	687b      	ldr	r3, [r7, #4]
   2d5f2:	791b      	ldrb	r3, [r3, #4]
   2d5f4:	2b00      	cmp	r3, #0
   2d5f6:	d037      	beq.n	2d668 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2d5f8:	687b      	ldr	r3, [r7, #4]
   2d5fa:	7858      	ldrb	r0, [r3, #1]
   2d5fc:	687b      	ldr	r3, [r7, #4]
   2d5fe:	3330      	adds	r3, #48	; 0x30
   2d600:	0019      	movs	r1, r3
   2d602:	68fa      	ldr	r2, [r7, #12]
   2d604:	2301      	movs	r3, #1
   2d606:	4c24      	ldr	r4, [pc, #144]	; (2d698 <move_window+0xc0>)
   2d608:	47a0      	blx	r4
   2d60a:	1e03      	subs	r3, r0, #0
   2d60c:	d001      	beq.n	2d612 <move_window+0x3a>
				return FR_DISK_ERR;
   2d60e:	2301      	movs	r3, #1
   2d610:	e03e      	b.n	2d690 <move_window+0xb8>
			fs->wflag = 0;
   2d612:	687b      	ldr	r3, [r7, #4]
   2d614:	2200      	movs	r2, #0
   2d616:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2d618:	687b      	ldr	r3, [r7, #4]
   2d61a:	6a1a      	ldr	r2, [r3, #32]
   2d61c:	687b      	ldr	r3, [r7, #4]
   2d61e:	69db      	ldr	r3, [r3, #28]
   2d620:	18d2      	adds	r2, r2, r3
   2d622:	68fb      	ldr	r3, [r7, #12]
   2d624:	429a      	cmp	r2, r3
   2d626:	d91f      	bls.n	2d668 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2d628:	230b      	movs	r3, #11
   2d62a:	18fb      	adds	r3, r7, r3
   2d62c:	687a      	ldr	r2, [r7, #4]
   2d62e:	78d2      	ldrb	r2, [r2, #3]
   2d630:	701a      	strb	r2, [r3, #0]
   2d632:	e014      	b.n	2d65e <move_window+0x86>
					wsect += fs->fsize;
   2d634:	687b      	ldr	r3, [r7, #4]
   2d636:	69db      	ldr	r3, [r3, #28]
   2d638:	68fa      	ldr	r2, [r7, #12]
   2d63a:	18d3      	adds	r3, r2, r3
   2d63c:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2d63e:	687b      	ldr	r3, [r7, #4]
   2d640:	7858      	ldrb	r0, [r3, #1]
   2d642:	687b      	ldr	r3, [r7, #4]
   2d644:	3330      	adds	r3, #48	; 0x30
   2d646:	0019      	movs	r1, r3
   2d648:	68fa      	ldr	r2, [r7, #12]
   2d64a:	2301      	movs	r3, #1
   2d64c:	4c12      	ldr	r4, [pc, #72]	; (2d698 <move_window+0xc0>)
   2d64e:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2d650:	230b      	movs	r3, #11
   2d652:	18fb      	adds	r3, r7, r3
   2d654:	781a      	ldrb	r2, [r3, #0]
   2d656:	230b      	movs	r3, #11
   2d658:	18fb      	adds	r3, r7, r3
   2d65a:	3a01      	subs	r2, #1
   2d65c:	701a      	strb	r2, [r3, #0]
   2d65e:	230b      	movs	r3, #11
   2d660:	18fb      	adds	r3, r7, r3
   2d662:	781b      	ldrb	r3, [r3, #0]
   2d664:	2b01      	cmp	r3, #1
   2d666:	d8e5      	bhi.n	2d634 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2d668:	683b      	ldr	r3, [r7, #0]
   2d66a:	2b00      	cmp	r3, #0
   2d66c:	d00f      	beq.n	2d68e <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2d66e:	687b      	ldr	r3, [r7, #4]
   2d670:	7858      	ldrb	r0, [r3, #1]
   2d672:	687b      	ldr	r3, [r7, #4]
   2d674:	3330      	adds	r3, #48	; 0x30
   2d676:	0019      	movs	r1, r3
   2d678:	683a      	ldr	r2, [r7, #0]
   2d67a:	2301      	movs	r3, #1
   2d67c:	4c07      	ldr	r4, [pc, #28]	; (2d69c <move_window+0xc4>)
   2d67e:	47a0      	blx	r4
   2d680:	1e03      	subs	r3, r0, #0
   2d682:	d001      	beq.n	2d688 <move_window+0xb0>
				return FR_DISK_ERR;
   2d684:	2301      	movs	r3, #1
   2d686:	e003      	b.n	2d690 <move_window+0xb8>
			fs->winsect = sector;
   2d688:	687b      	ldr	r3, [r7, #4]
   2d68a:	683a      	ldr	r2, [r7, #0]
   2d68c:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2d68e:	2300      	movs	r3, #0
}
   2d690:	0018      	movs	r0, r3
   2d692:	46bd      	mov	sp, r7
   2d694:	b005      	add	sp, #20
   2d696:	bd90      	pop	{r4, r7, pc}
   2d698:	0002d2c5 	.word	0x0002d2c5
   2d69c:	0002d1ed 	.word	0x0002d1ed

0002d6a0 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2d6a0:	b590      	push	{r4, r7, lr}
   2d6a2:	b085      	sub	sp, #20
   2d6a4:	af00      	add	r7, sp, #0
   2d6a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2d6a8:	230f      	movs	r3, #15
   2d6aa:	18fc      	adds	r4, r7, r3
   2d6ac:	687b      	ldr	r3, [r7, #4]
   2d6ae:	2100      	movs	r1, #0
   2d6b0:	0018      	movs	r0, r3
   2d6b2:	4b52      	ldr	r3, [pc, #328]	; (2d7fc <sync+0x15c>)
   2d6b4:	4798      	blx	r3
   2d6b6:	0003      	movs	r3, r0
   2d6b8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2d6ba:	230f      	movs	r3, #15
   2d6bc:	18fb      	adds	r3, r7, r3
   2d6be:	781b      	ldrb	r3, [r3, #0]
   2d6c0:	2b00      	cmp	r3, #0
   2d6c2:	d000      	beq.n	2d6c6 <sync+0x26>
   2d6c4:	e093      	b.n	2d7ee <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2d6c6:	687b      	ldr	r3, [r7, #4]
   2d6c8:	781b      	ldrb	r3, [r3, #0]
   2d6ca:	2b03      	cmp	r3, #3
   2d6cc:	d000      	beq.n	2d6d0 <sync+0x30>
   2d6ce:	e081      	b.n	2d7d4 <sync+0x134>
   2d6d0:	687b      	ldr	r3, [r7, #4]
   2d6d2:	795b      	ldrb	r3, [r3, #5]
   2d6d4:	2b00      	cmp	r3, #0
   2d6d6:	d07d      	beq.n	2d7d4 <sync+0x134>
			fs->winsect = 0;
   2d6d8:	687b      	ldr	r3, [r7, #4]
   2d6da:	2200      	movs	r2, #0
   2d6dc:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2d6de:	687b      	ldr	r3, [r7, #4]
   2d6e0:	3330      	adds	r3, #48	; 0x30
   2d6e2:	0018      	movs	r0, r3
   2d6e4:	2380      	movs	r3, #128	; 0x80
   2d6e6:	009b      	lsls	r3, r3, #2
   2d6e8:	001a      	movs	r2, r3
   2d6ea:	2100      	movs	r1, #0
   2d6ec:	4b44      	ldr	r3, [pc, #272]	; (2d800 <sync+0x160>)
   2d6ee:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2d6f0:	687b      	ldr	r3, [r7, #4]
   2d6f2:	4a44      	ldr	r2, [pc, #272]	; (2d804 <sync+0x164>)
   2d6f4:	2155      	movs	r1, #85	; 0x55
   2d6f6:	5499      	strb	r1, [r3, r2]
   2d6f8:	687b      	ldr	r3, [r7, #4]
   2d6fa:	4a43      	ldr	r2, [pc, #268]	; (2d808 <sync+0x168>)
   2d6fc:	21aa      	movs	r1, #170	; 0xaa
   2d6fe:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2d700:	687b      	ldr	r3, [r7, #4]
   2d702:	2230      	movs	r2, #48	; 0x30
   2d704:	2152      	movs	r1, #82	; 0x52
   2d706:	5499      	strb	r1, [r3, r2]
   2d708:	687b      	ldr	r3, [r7, #4]
   2d70a:	2231      	movs	r2, #49	; 0x31
   2d70c:	2152      	movs	r1, #82	; 0x52
   2d70e:	5499      	strb	r1, [r3, r2]
   2d710:	687b      	ldr	r3, [r7, #4]
   2d712:	2232      	movs	r2, #50	; 0x32
   2d714:	2161      	movs	r1, #97	; 0x61
   2d716:	5499      	strb	r1, [r3, r2]
   2d718:	687b      	ldr	r3, [r7, #4]
   2d71a:	2233      	movs	r2, #51	; 0x33
   2d71c:	2141      	movs	r1, #65	; 0x41
   2d71e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2d720:	687a      	ldr	r2, [r7, #4]
   2d722:	2385      	movs	r3, #133	; 0x85
   2d724:	009b      	lsls	r3, r3, #2
   2d726:	2172      	movs	r1, #114	; 0x72
   2d728:	54d1      	strb	r1, [r2, r3]
   2d72a:	687b      	ldr	r3, [r7, #4]
   2d72c:	4a37      	ldr	r2, [pc, #220]	; (2d80c <sync+0x16c>)
   2d72e:	2172      	movs	r1, #114	; 0x72
   2d730:	5499      	strb	r1, [r3, r2]
   2d732:	687b      	ldr	r3, [r7, #4]
   2d734:	4a36      	ldr	r2, [pc, #216]	; (2d810 <sync+0x170>)
   2d736:	2141      	movs	r1, #65	; 0x41
   2d738:	5499      	strb	r1, [r3, r2]
   2d73a:	687b      	ldr	r3, [r7, #4]
   2d73c:	4a35      	ldr	r2, [pc, #212]	; (2d814 <sync+0x174>)
   2d73e:	2161      	movs	r1, #97	; 0x61
   2d740:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2d742:	687b      	ldr	r3, [r7, #4]
   2d744:	691b      	ldr	r3, [r3, #16]
   2d746:	b2d9      	uxtb	r1, r3
   2d748:	687a      	ldr	r2, [r7, #4]
   2d74a:	2386      	movs	r3, #134	; 0x86
   2d74c:	009b      	lsls	r3, r3, #2
   2d74e:	54d1      	strb	r1, [r2, r3]
   2d750:	687b      	ldr	r3, [r7, #4]
   2d752:	691b      	ldr	r3, [r3, #16]
   2d754:	b29b      	uxth	r3, r3
   2d756:	0a1b      	lsrs	r3, r3, #8
   2d758:	b29b      	uxth	r3, r3
   2d75a:	b2d9      	uxtb	r1, r3
   2d75c:	687b      	ldr	r3, [r7, #4]
   2d75e:	4a2e      	ldr	r2, [pc, #184]	; (2d818 <sync+0x178>)
   2d760:	5499      	strb	r1, [r3, r2]
   2d762:	687b      	ldr	r3, [r7, #4]
   2d764:	691b      	ldr	r3, [r3, #16]
   2d766:	0c1b      	lsrs	r3, r3, #16
   2d768:	b2d9      	uxtb	r1, r3
   2d76a:	687b      	ldr	r3, [r7, #4]
   2d76c:	4a2b      	ldr	r2, [pc, #172]	; (2d81c <sync+0x17c>)
   2d76e:	5499      	strb	r1, [r3, r2]
   2d770:	687b      	ldr	r3, [r7, #4]
   2d772:	691b      	ldr	r3, [r3, #16]
   2d774:	0e1b      	lsrs	r3, r3, #24
   2d776:	b2d9      	uxtb	r1, r3
   2d778:	687b      	ldr	r3, [r7, #4]
   2d77a:	4a29      	ldr	r2, [pc, #164]	; (2d820 <sync+0x180>)
   2d77c:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2d77e:	687b      	ldr	r3, [r7, #4]
   2d780:	68db      	ldr	r3, [r3, #12]
   2d782:	b2d9      	uxtb	r1, r3
   2d784:	687a      	ldr	r2, [r7, #4]
   2d786:	2387      	movs	r3, #135	; 0x87
   2d788:	009b      	lsls	r3, r3, #2
   2d78a:	54d1      	strb	r1, [r2, r3]
   2d78c:	687b      	ldr	r3, [r7, #4]
   2d78e:	68db      	ldr	r3, [r3, #12]
   2d790:	b29b      	uxth	r3, r3
   2d792:	0a1b      	lsrs	r3, r3, #8
   2d794:	b29b      	uxth	r3, r3
   2d796:	b2d9      	uxtb	r1, r3
   2d798:	687b      	ldr	r3, [r7, #4]
   2d79a:	4a22      	ldr	r2, [pc, #136]	; (2d824 <sync+0x184>)
   2d79c:	5499      	strb	r1, [r3, r2]
   2d79e:	687b      	ldr	r3, [r7, #4]
   2d7a0:	68db      	ldr	r3, [r3, #12]
   2d7a2:	0c1b      	lsrs	r3, r3, #16
   2d7a4:	b2d9      	uxtb	r1, r3
   2d7a6:	687b      	ldr	r3, [r7, #4]
   2d7a8:	4a1f      	ldr	r2, [pc, #124]	; (2d828 <sync+0x188>)
   2d7aa:	5499      	strb	r1, [r3, r2]
   2d7ac:	687b      	ldr	r3, [r7, #4]
   2d7ae:	68db      	ldr	r3, [r3, #12]
   2d7b0:	0e1b      	lsrs	r3, r3, #24
   2d7b2:	b2d9      	uxtb	r1, r3
   2d7b4:	687b      	ldr	r3, [r7, #4]
   2d7b6:	4a1d      	ldr	r2, [pc, #116]	; (2d82c <sync+0x18c>)
   2d7b8:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2d7ba:	687b      	ldr	r3, [r7, #4]
   2d7bc:	7858      	ldrb	r0, [r3, #1]
   2d7be:	687b      	ldr	r3, [r7, #4]
   2d7c0:	3330      	adds	r3, #48	; 0x30
   2d7c2:	0019      	movs	r1, r3
   2d7c4:	687b      	ldr	r3, [r7, #4]
   2d7c6:	695a      	ldr	r2, [r3, #20]
   2d7c8:	2301      	movs	r3, #1
   2d7ca:	4c19      	ldr	r4, [pc, #100]	; (2d830 <sync+0x190>)
   2d7cc:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2d7ce:	687b      	ldr	r3, [r7, #4]
   2d7d0:	2200      	movs	r2, #0
   2d7d2:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2d7d4:	687b      	ldr	r3, [r7, #4]
   2d7d6:	785b      	ldrb	r3, [r3, #1]
   2d7d8:	2200      	movs	r2, #0
   2d7da:	2100      	movs	r1, #0
   2d7dc:	0018      	movs	r0, r3
   2d7de:	4b15      	ldr	r3, [pc, #84]	; (2d834 <sync+0x194>)
   2d7e0:	4798      	blx	r3
   2d7e2:	1e03      	subs	r3, r0, #0
   2d7e4:	d003      	beq.n	2d7ee <sync+0x14e>
			res = FR_DISK_ERR;
   2d7e6:	230f      	movs	r3, #15
   2d7e8:	18fb      	adds	r3, r7, r3
   2d7ea:	2201      	movs	r2, #1
   2d7ec:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2d7ee:	230f      	movs	r3, #15
   2d7f0:	18fb      	adds	r3, r7, r3
   2d7f2:	781b      	ldrb	r3, [r3, #0]
}
   2d7f4:	0018      	movs	r0, r3
   2d7f6:	46bd      	mov	sp, r7
   2d7f8:	b005      	add	sp, #20
   2d7fa:	bd90      	pop	{r4, r7, pc}
   2d7fc:	0002d5d9 	.word	0x0002d5d9
   2d800:	0002d52d 	.word	0x0002d52d
   2d804:	0000022e 	.word	0x0000022e
   2d808:	0000022f 	.word	0x0000022f
   2d80c:	00000215 	.word	0x00000215
   2d810:	00000216 	.word	0x00000216
   2d814:	00000217 	.word	0x00000217
   2d818:	00000219 	.word	0x00000219
   2d81c:	0000021a 	.word	0x0000021a
   2d820:	0000021b 	.word	0x0000021b
   2d824:	0000021d 	.word	0x0000021d
   2d828:	0000021e 	.word	0x0000021e
   2d82c:	0000021f 	.word	0x0000021f
   2d830:	0002d2c5 	.word	0x0002d2c5
   2d834:	0002d39d 	.word	0x0002d39d

0002d838 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2d838:	b580      	push	{r7, lr}
   2d83a:	b082      	sub	sp, #8
   2d83c:	af00      	add	r7, sp, #0
   2d83e:	6078      	str	r0, [r7, #4]
   2d840:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2d842:	683b      	ldr	r3, [r7, #0]
   2d844:	3b02      	subs	r3, #2
   2d846:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2d848:	687b      	ldr	r3, [r7, #4]
   2d84a:	699b      	ldr	r3, [r3, #24]
   2d84c:	1e9a      	subs	r2, r3, #2
   2d84e:	683b      	ldr	r3, [r7, #0]
   2d850:	429a      	cmp	r2, r3
   2d852:	d801      	bhi.n	2d858 <clust2sect+0x20>
   2d854:	2300      	movs	r3, #0
   2d856:	e007      	b.n	2d868 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2d858:	687b      	ldr	r3, [r7, #4]
   2d85a:	789b      	ldrb	r3, [r3, #2]
   2d85c:	001a      	movs	r2, r3
   2d85e:	683b      	ldr	r3, [r7, #0]
   2d860:	435a      	muls	r2, r3
   2d862:	687b      	ldr	r3, [r7, #4]
   2d864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2d866:	18d3      	adds	r3, r2, r3
}
   2d868:	0018      	movs	r0, r3
   2d86a:	46bd      	mov	sp, r7
   2d86c:	b002      	add	sp, #8
   2d86e:	bd80      	pop	{r7, pc}

0002d870 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2d870:	b580      	push	{r7, lr}
   2d872:	b086      	sub	sp, #24
   2d874:	af00      	add	r7, sp, #0
   2d876:	6078      	str	r0, [r7, #4]
   2d878:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2d87a:	683b      	ldr	r3, [r7, #0]
   2d87c:	2b01      	cmp	r3, #1
   2d87e:	d904      	bls.n	2d88a <get_fat+0x1a>
   2d880:	687b      	ldr	r3, [r7, #4]
   2d882:	699a      	ldr	r2, [r3, #24]
   2d884:	683b      	ldr	r3, [r7, #0]
   2d886:	429a      	cmp	r2, r3
   2d888:	d801      	bhi.n	2d88e <get_fat+0x1e>
		return 1;
   2d88a:	2301      	movs	r3, #1
   2d88c:	e09f      	b.n	2d9ce <get_fat+0x15e>

	switch (fs->fs_type) {
   2d88e:	687b      	ldr	r3, [r7, #4]
   2d890:	781b      	ldrb	r3, [r3, #0]
   2d892:	2b02      	cmp	r3, #2
   2d894:	d048      	beq.n	2d928 <get_fat+0xb8>
   2d896:	2b03      	cmp	r3, #3
   2d898:	d067      	beq.n	2d96a <get_fat+0xfa>
   2d89a:	2b01      	cmp	r3, #1
   2d89c:	d000      	beq.n	2d8a0 <get_fat+0x30>
   2d89e:	e094      	b.n	2d9ca <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2d8a0:	683b      	ldr	r3, [r7, #0]
   2d8a2:	617b      	str	r3, [r7, #20]
   2d8a4:	697b      	ldr	r3, [r7, #20]
   2d8a6:	085b      	lsrs	r3, r3, #1
   2d8a8:	697a      	ldr	r2, [r7, #20]
   2d8aa:	18d3      	adds	r3, r2, r3
   2d8ac:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2d8ae:	687b      	ldr	r3, [r7, #4]
   2d8b0:	6a1a      	ldr	r2, [r3, #32]
   2d8b2:	697b      	ldr	r3, [r7, #20]
   2d8b4:	0a5b      	lsrs	r3, r3, #9
   2d8b6:	18d2      	adds	r2, r2, r3
   2d8b8:	687b      	ldr	r3, [r7, #4]
   2d8ba:	0011      	movs	r1, r2
   2d8bc:	0018      	movs	r0, r3
   2d8be:	4b46      	ldr	r3, [pc, #280]	; (2d9d8 <get_fat+0x168>)
   2d8c0:	4798      	blx	r3
   2d8c2:	1e03      	subs	r3, r0, #0
   2d8c4:	d000      	beq.n	2d8c8 <get_fat+0x58>
   2d8c6:	e079      	b.n	2d9bc <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2d8c8:	697b      	ldr	r3, [r7, #20]
   2d8ca:	05db      	lsls	r3, r3, #23
   2d8cc:	0ddb      	lsrs	r3, r3, #23
   2d8ce:	687a      	ldr	r2, [r7, #4]
   2d8d0:	2130      	movs	r1, #48	; 0x30
   2d8d2:	18d3      	adds	r3, r2, r3
   2d8d4:	185b      	adds	r3, r3, r1
   2d8d6:	781b      	ldrb	r3, [r3, #0]
   2d8d8:	613b      	str	r3, [r7, #16]
   2d8da:	697b      	ldr	r3, [r7, #20]
   2d8dc:	3301      	adds	r3, #1
   2d8de:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2d8e0:	687b      	ldr	r3, [r7, #4]
   2d8e2:	6a1a      	ldr	r2, [r3, #32]
   2d8e4:	697b      	ldr	r3, [r7, #20]
   2d8e6:	0a5b      	lsrs	r3, r3, #9
   2d8e8:	18d2      	adds	r2, r2, r3
   2d8ea:	687b      	ldr	r3, [r7, #4]
   2d8ec:	0011      	movs	r1, r2
   2d8ee:	0018      	movs	r0, r3
   2d8f0:	4b39      	ldr	r3, [pc, #228]	; (2d9d8 <get_fat+0x168>)
   2d8f2:	4798      	blx	r3
   2d8f4:	1e03      	subs	r3, r0, #0
   2d8f6:	d163      	bne.n	2d9c0 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2d8f8:	697b      	ldr	r3, [r7, #20]
   2d8fa:	05db      	lsls	r3, r3, #23
   2d8fc:	0ddb      	lsrs	r3, r3, #23
   2d8fe:	687a      	ldr	r2, [r7, #4]
   2d900:	2130      	movs	r1, #48	; 0x30
   2d902:	18d3      	adds	r3, r2, r3
   2d904:	185b      	adds	r3, r3, r1
   2d906:	781b      	ldrb	r3, [r3, #0]
   2d908:	021b      	lsls	r3, r3, #8
   2d90a:	001a      	movs	r2, r3
   2d90c:	693b      	ldr	r3, [r7, #16]
   2d90e:	4313      	orrs	r3, r2
   2d910:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2d912:	683b      	ldr	r3, [r7, #0]
   2d914:	2201      	movs	r2, #1
   2d916:	4013      	ands	r3, r2
   2d918:	d002      	beq.n	2d920 <get_fat+0xb0>
   2d91a:	693b      	ldr	r3, [r7, #16]
   2d91c:	091b      	lsrs	r3, r3, #4
   2d91e:	e056      	b.n	2d9ce <get_fat+0x15e>
   2d920:	693b      	ldr	r3, [r7, #16]
   2d922:	051b      	lsls	r3, r3, #20
   2d924:	0d1b      	lsrs	r3, r3, #20
   2d926:	e052      	b.n	2d9ce <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2d928:	687b      	ldr	r3, [r7, #4]
   2d92a:	6a1a      	ldr	r2, [r3, #32]
   2d92c:	683b      	ldr	r3, [r7, #0]
   2d92e:	0a1b      	lsrs	r3, r3, #8
   2d930:	18d2      	adds	r2, r2, r3
   2d932:	687b      	ldr	r3, [r7, #4]
   2d934:	0011      	movs	r1, r2
   2d936:	0018      	movs	r0, r3
   2d938:	4b27      	ldr	r3, [pc, #156]	; (2d9d8 <get_fat+0x168>)
   2d93a:	4798      	blx	r3
   2d93c:	1e03      	subs	r3, r0, #0
   2d93e:	d141      	bne.n	2d9c4 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2d940:	683b      	ldr	r3, [r7, #0]
   2d942:	005a      	lsls	r2, r3, #1
   2d944:	23ff      	movs	r3, #255	; 0xff
   2d946:	005b      	lsls	r3, r3, #1
   2d948:	4013      	ands	r3, r2
   2d94a:	3330      	adds	r3, #48	; 0x30
   2d94c:	687a      	ldr	r2, [r7, #4]
   2d94e:	18d3      	adds	r3, r2, r3
   2d950:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2d952:	68fb      	ldr	r3, [r7, #12]
   2d954:	3301      	adds	r3, #1
   2d956:	781b      	ldrb	r3, [r3, #0]
   2d958:	021b      	lsls	r3, r3, #8
   2d95a:	b21a      	sxth	r2, r3
   2d95c:	68fb      	ldr	r3, [r7, #12]
   2d95e:	781b      	ldrb	r3, [r3, #0]
   2d960:	b21b      	sxth	r3, r3
   2d962:	4313      	orrs	r3, r2
   2d964:	b21b      	sxth	r3, r3
   2d966:	b29b      	uxth	r3, r3
   2d968:	e031      	b.n	2d9ce <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2d96a:	687b      	ldr	r3, [r7, #4]
   2d96c:	6a1a      	ldr	r2, [r3, #32]
   2d96e:	683b      	ldr	r3, [r7, #0]
   2d970:	09db      	lsrs	r3, r3, #7
   2d972:	18d2      	adds	r2, r2, r3
   2d974:	687b      	ldr	r3, [r7, #4]
   2d976:	0011      	movs	r1, r2
   2d978:	0018      	movs	r0, r3
   2d97a:	4b17      	ldr	r3, [pc, #92]	; (2d9d8 <get_fat+0x168>)
   2d97c:	4798      	blx	r3
   2d97e:	1e03      	subs	r3, r0, #0
   2d980:	d122      	bne.n	2d9c8 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2d982:	683b      	ldr	r3, [r7, #0]
   2d984:	009a      	lsls	r2, r3, #2
   2d986:	23fe      	movs	r3, #254	; 0xfe
   2d988:	005b      	lsls	r3, r3, #1
   2d98a:	4013      	ands	r3, r2
   2d98c:	3330      	adds	r3, #48	; 0x30
   2d98e:	687a      	ldr	r2, [r7, #4]
   2d990:	18d3      	adds	r3, r2, r3
   2d992:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2d994:	68fb      	ldr	r3, [r7, #12]
   2d996:	3303      	adds	r3, #3
   2d998:	781b      	ldrb	r3, [r3, #0]
   2d99a:	061a      	lsls	r2, r3, #24
   2d99c:	68fb      	ldr	r3, [r7, #12]
   2d99e:	3302      	adds	r3, #2
   2d9a0:	781b      	ldrb	r3, [r3, #0]
   2d9a2:	041b      	lsls	r3, r3, #16
   2d9a4:	4313      	orrs	r3, r2
   2d9a6:	68fa      	ldr	r2, [r7, #12]
   2d9a8:	3201      	adds	r2, #1
   2d9aa:	7812      	ldrb	r2, [r2, #0]
   2d9ac:	0212      	lsls	r2, r2, #8
   2d9ae:	4313      	orrs	r3, r2
   2d9b0:	68fa      	ldr	r2, [r7, #12]
   2d9b2:	7812      	ldrb	r2, [r2, #0]
   2d9b4:	4313      	orrs	r3, r2
   2d9b6:	011b      	lsls	r3, r3, #4
   2d9b8:	091b      	lsrs	r3, r3, #4
   2d9ba:	e008      	b.n	2d9ce <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2d9bc:	46c0      	nop			; (mov r8, r8)
   2d9be:	e004      	b.n	2d9ca <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2d9c0:	46c0      	nop			; (mov r8, r8)
   2d9c2:	e002      	b.n	2d9ca <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2d9c4:	46c0      	nop			; (mov r8, r8)
   2d9c6:	e000      	b.n	2d9ca <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2d9c8:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2d9ca:	2301      	movs	r3, #1
   2d9cc:	425b      	negs	r3, r3
}
   2d9ce:	0018      	movs	r0, r3
   2d9d0:	46bd      	mov	sp, r7
   2d9d2:	b006      	add	sp, #24
   2d9d4:	bd80      	pop	{r7, pc}
   2d9d6:	46c0      	nop			; (mov r8, r8)
   2d9d8:	0002d5d9 	.word	0x0002d5d9

0002d9dc <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2d9dc:	b590      	push	{r4, r7, lr}
   2d9de:	b089      	sub	sp, #36	; 0x24
   2d9e0:	af00      	add	r7, sp, #0
   2d9e2:	60f8      	str	r0, [r7, #12]
   2d9e4:	60b9      	str	r1, [r7, #8]
   2d9e6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2d9e8:	68bb      	ldr	r3, [r7, #8]
   2d9ea:	2b01      	cmp	r3, #1
   2d9ec:	d904      	bls.n	2d9f8 <put_fat+0x1c>
   2d9ee:	68fb      	ldr	r3, [r7, #12]
   2d9f0:	699a      	ldr	r2, [r3, #24]
   2d9f2:	68bb      	ldr	r3, [r7, #8]
   2d9f4:	429a      	cmp	r2, r3
   2d9f6:	d804      	bhi.n	2da02 <put_fat+0x26>
		res = FR_INT_ERR;
   2d9f8:	231f      	movs	r3, #31
   2d9fa:	18fb      	adds	r3, r7, r3
   2d9fc:	2202      	movs	r2, #2
   2d9fe:	701a      	strb	r2, [r3, #0]
   2da00:	e100      	b.n	2dc04 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2da02:	68fb      	ldr	r3, [r7, #12]
   2da04:	781b      	ldrb	r3, [r3, #0]
   2da06:	2b02      	cmp	r3, #2
   2da08:	d100      	bne.n	2da0c <put_fat+0x30>
   2da0a:	e078      	b.n	2dafe <put_fat+0x122>
   2da0c:	2b03      	cmp	r3, #3
   2da0e:	d100      	bne.n	2da12 <put_fat+0x36>
   2da10:	e09e      	b.n	2db50 <put_fat+0x174>
   2da12:	2b01      	cmp	r3, #1
   2da14:	d000      	beq.n	2da18 <put_fat+0x3c>
   2da16:	e0e6      	b.n	2dbe6 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2da18:	68bb      	ldr	r3, [r7, #8]
   2da1a:	61bb      	str	r3, [r7, #24]
   2da1c:	69bb      	ldr	r3, [r7, #24]
   2da1e:	085b      	lsrs	r3, r3, #1
   2da20:	69ba      	ldr	r2, [r7, #24]
   2da22:	18d3      	adds	r3, r2, r3
   2da24:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2da26:	68fb      	ldr	r3, [r7, #12]
   2da28:	6a1a      	ldr	r2, [r3, #32]
   2da2a:	69bb      	ldr	r3, [r7, #24]
   2da2c:	0a5b      	lsrs	r3, r3, #9
   2da2e:	18d2      	adds	r2, r2, r3
   2da30:	231f      	movs	r3, #31
   2da32:	18fc      	adds	r4, r7, r3
   2da34:	68fb      	ldr	r3, [r7, #12]
   2da36:	0011      	movs	r1, r2
   2da38:	0018      	movs	r0, r3
   2da3a:	4b76      	ldr	r3, [pc, #472]	; (2dc14 <put_fat+0x238>)
   2da3c:	4798      	blx	r3
   2da3e:	0003      	movs	r3, r0
   2da40:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2da42:	231f      	movs	r3, #31
   2da44:	18fb      	adds	r3, r7, r3
   2da46:	781b      	ldrb	r3, [r3, #0]
   2da48:	2b00      	cmp	r3, #0
   2da4a:	d000      	beq.n	2da4e <put_fat+0x72>
   2da4c:	e0d0      	b.n	2dbf0 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2da4e:	69bb      	ldr	r3, [r7, #24]
   2da50:	05db      	lsls	r3, r3, #23
   2da52:	0ddb      	lsrs	r3, r3, #23
   2da54:	3330      	adds	r3, #48	; 0x30
   2da56:	68fa      	ldr	r2, [r7, #12]
   2da58:	18d3      	adds	r3, r2, r3
   2da5a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2da5c:	68bb      	ldr	r3, [r7, #8]
   2da5e:	2201      	movs	r2, #1
   2da60:	4013      	ands	r3, r2
   2da62:	d00d      	beq.n	2da80 <put_fat+0xa4>
   2da64:	697b      	ldr	r3, [r7, #20]
   2da66:	781b      	ldrb	r3, [r3, #0]
   2da68:	b25b      	sxtb	r3, r3
   2da6a:	220f      	movs	r2, #15
   2da6c:	4013      	ands	r3, r2
   2da6e:	b25a      	sxtb	r2, r3
   2da70:	687b      	ldr	r3, [r7, #4]
   2da72:	b2db      	uxtb	r3, r3
   2da74:	011b      	lsls	r3, r3, #4
   2da76:	b25b      	sxtb	r3, r3
   2da78:	4313      	orrs	r3, r2
   2da7a:	b25b      	sxtb	r3, r3
   2da7c:	b2db      	uxtb	r3, r3
   2da7e:	e001      	b.n	2da84 <put_fat+0xa8>
   2da80:	687b      	ldr	r3, [r7, #4]
   2da82:	b2db      	uxtb	r3, r3
   2da84:	697a      	ldr	r2, [r7, #20]
   2da86:	7013      	strb	r3, [r2, #0]
			bc++;
   2da88:	69bb      	ldr	r3, [r7, #24]
   2da8a:	3301      	adds	r3, #1
   2da8c:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2da8e:	68fb      	ldr	r3, [r7, #12]
   2da90:	2201      	movs	r2, #1
   2da92:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2da94:	68fb      	ldr	r3, [r7, #12]
   2da96:	6a1a      	ldr	r2, [r3, #32]
   2da98:	69bb      	ldr	r3, [r7, #24]
   2da9a:	0a5b      	lsrs	r3, r3, #9
   2da9c:	18d2      	adds	r2, r2, r3
   2da9e:	231f      	movs	r3, #31
   2daa0:	18fc      	adds	r4, r7, r3
   2daa2:	68fb      	ldr	r3, [r7, #12]
   2daa4:	0011      	movs	r1, r2
   2daa6:	0018      	movs	r0, r3
   2daa8:	4b5a      	ldr	r3, [pc, #360]	; (2dc14 <put_fat+0x238>)
   2daaa:	4798      	blx	r3
   2daac:	0003      	movs	r3, r0
   2daae:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2dab0:	231f      	movs	r3, #31
   2dab2:	18fb      	adds	r3, r7, r3
   2dab4:	781b      	ldrb	r3, [r3, #0]
   2dab6:	2b00      	cmp	r3, #0
   2dab8:	d000      	beq.n	2dabc <put_fat+0xe0>
   2daba:	e09b      	b.n	2dbf4 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2dabc:	69bb      	ldr	r3, [r7, #24]
   2dabe:	05db      	lsls	r3, r3, #23
   2dac0:	0ddb      	lsrs	r3, r3, #23
   2dac2:	3330      	adds	r3, #48	; 0x30
   2dac4:	68fa      	ldr	r2, [r7, #12]
   2dac6:	18d3      	adds	r3, r2, r3
   2dac8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2daca:	68bb      	ldr	r3, [r7, #8]
   2dacc:	2201      	movs	r2, #1
   2dace:	4013      	ands	r3, r2
   2dad0:	d003      	beq.n	2dada <put_fat+0xfe>
   2dad2:	687b      	ldr	r3, [r7, #4]
   2dad4:	091b      	lsrs	r3, r3, #4
   2dad6:	b2db      	uxtb	r3, r3
   2dad8:	e00e      	b.n	2daf8 <put_fat+0x11c>
   2dada:	697b      	ldr	r3, [r7, #20]
   2dadc:	781b      	ldrb	r3, [r3, #0]
   2dade:	b25b      	sxtb	r3, r3
   2dae0:	220f      	movs	r2, #15
   2dae2:	4393      	bics	r3, r2
   2dae4:	b25a      	sxtb	r2, r3
   2dae6:	687b      	ldr	r3, [r7, #4]
   2dae8:	0a1b      	lsrs	r3, r3, #8
   2daea:	b25b      	sxtb	r3, r3
   2daec:	210f      	movs	r1, #15
   2daee:	400b      	ands	r3, r1
   2daf0:	b25b      	sxtb	r3, r3
   2daf2:	4313      	orrs	r3, r2
   2daf4:	b25b      	sxtb	r3, r3
   2daf6:	b2db      	uxtb	r3, r3
   2daf8:	697a      	ldr	r2, [r7, #20]
   2dafa:	7013      	strb	r3, [r2, #0]
			break;
   2dafc:	e07f      	b.n	2dbfe <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2dafe:	68fb      	ldr	r3, [r7, #12]
   2db00:	6a1a      	ldr	r2, [r3, #32]
   2db02:	68bb      	ldr	r3, [r7, #8]
   2db04:	0a1b      	lsrs	r3, r3, #8
   2db06:	18d2      	adds	r2, r2, r3
   2db08:	231f      	movs	r3, #31
   2db0a:	18fc      	adds	r4, r7, r3
   2db0c:	68fb      	ldr	r3, [r7, #12]
   2db0e:	0011      	movs	r1, r2
   2db10:	0018      	movs	r0, r3
   2db12:	4b40      	ldr	r3, [pc, #256]	; (2dc14 <put_fat+0x238>)
   2db14:	4798      	blx	r3
   2db16:	0003      	movs	r3, r0
   2db18:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2db1a:	231f      	movs	r3, #31
   2db1c:	18fb      	adds	r3, r7, r3
   2db1e:	781b      	ldrb	r3, [r3, #0]
   2db20:	2b00      	cmp	r3, #0
   2db22:	d169      	bne.n	2dbf8 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2db24:	68bb      	ldr	r3, [r7, #8]
   2db26:	005a      	lsls	r2, r3, #1
   2db28:	23ff      	movs	r3, #255	; 0xff
   2db2a:	005b      	lsls	r3, r3, #1
   2db2c:	4013      	ands	r3, r2
   2db2e:	3330      	adds	r3, #48	; 0x30
   2db30:	68fa      	ldr	r2, [r7, #12]
   2db32:	18d3      	adds	r3, r2, r3
   2db34:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2db36:	687b      	ldr	r3, [r7, #4]
   2db38:	b2da      	uxtb	r2, r3
   2db3a:	697b      	ldr	r3, [r7, #20]
   2db3c:	701a      	strb	r2, [r3, #0]
   2db3e:	697b      	ldr	r3, [r7, #20]
   2db40:	3301      	adds	r3, #1
   2db42:	687a      	ldr	r2, [r7, #4]
   2db44:	b292      	uxth	r2, r2
   2db46:	0a12      	lsrs	r2, r2, #8
   2db48:	b292      	uxth	r2, r2
   2db4a:	b2d2      	uxtb	r2, r2
   2db4c:	701a      	strb	r2, [r3, #0]
			break;
   2db4e:	e056      	b.n	2dbfe <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2db50:	68fb      	ldr	r3, [r7, #12]
   2db52:	6a1a      	ldr	r2, [r3, #32]
   2db54:	68bb      	ldr	r3, [r7, #8]
   2db56:	09db      	lsrs	r3, r3, #7
   2db58:	18d2      	adds	r2, r2, r3
   2db5a:	231f      	movs	r3, #31
   2db5c:	18fc      	adds	r4, r7, r3
   2db5e:	68fb      	ldr	r3, [r7, #12]
   2db60:	0011      	movs	r1, r2
   2db62:	0018      	movs	r0, r3
   2db64:	4b2b      	ldr	r3, [pc, #172]	; (2dc14 <put_fat+0x238>)
   2db66:	4798      	blx	r3
   2db68:	0003      	movs	r3, r0
   2db6a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2db6c:	231f      	movs	r3, #31
   2db6e:	18fb      	adds	r3, r7, r3
   2db70:	781b      	ldrb	r3, [r3, #0]
   2db72:	2b00      	cmp	r3, #0
   2db74:	d142      	bne.n	2dbfc <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2db76:	68bb      	ldr	r3, [r7, #8]
   2db78:	009a      	lsls	r2, r3, #2
   2db7a:	23fe      	movs	r3, #254	; 0xfe
   2db7c:	005b      	lsls	r3, r3, #1
   2db7e:	4013      	ands	r3, r2
   2db80:	3330      	adds	r3, #48	; 0x30
   2db82:	68fa      	ldr	r2, [r7, #12]
   2db84:	18d3      	adds	r3, r2, r3
   2db86:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2db88:	697b      	ldr	r3, [r7, #20]
   2db8a:	3303      	adds	r3, #3
   2db8c:	781b      	ldrb	r3, [r3, #0]
   2db8e:	061a      	lsls	r2, r3, #24
   2db90:	697b      	ldr	r3, [r7, #20]
   2db92:	3302      	adds	r3, #2
   2db94:	781b      	ldrb	r3, [r3, #0]
   2db96:	041b      	lsls	r3, r3, #16
   2db98:	4313      	orrs	r3, r2
   2db9a:	697a      	ldr	r2, [r7, #20]
   2db9c:	3201      	adds	r2, #1
   2db9e:	7812      	ldrb	r2, [r2, #0]
   2dba0:	0212      	lsls	r2, r2, #8
   2dba2:	4313      	orrs	r3, r2
   2dba4:	697a      	ldr	r2, [r7, #20]
   2dba6:	7812      	ldrb	r2, [r2, #0]
   2dba8:	4313      	orrs	r3, r2
   2dbaa:	0f1b      	lsrs	r3, r3, #28
   2dbac:	071b      	lsls	r3, r3, #28
   2dbae:	687a      	ldr	r2, [r7, #4]
   2dbb0:	4313      	orrs	r3, r2
   2dbb2:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2dbb4:	687b      	ldr	r3, [r7, #4]
   2dbb6:	b2da      	uxtb	r2, r3
   2dbb8:	697b      	ldr	r3, [r7, #20]
   2dbba:	701a      	strb	r2, [r3, #0]
   2dbbc:	697b      	ldr	r3, [r7, #20]
   2dbbe:	3301      	adds	r3, #1
   2dbc0:	687a      	ldr	r2, [r7, #4]
   2dbc2:	b292      	uxth	r2, r2
   2dbc4:	0a12      	lsrs	r2, r2, #8
   2dbc6:	b292      	uxth	r2, r2
   2dbc8:	b2d2      	uxtb	r2, r2
   2dbca:	701a      	strb	r2, [r3, #0]
   2dbcc:	697b      	ldr	r3, [r7, #20]
   2dbce:	3302      	adds	r3, #2
   2dbd0:	687a      	ldr	r2, [r7, #4]
   2dbd2:	0c12      	lsrs	r2, r2, #16
   2dbd4:	b2d2      	uxtb	r2, r2
   2dbd6:	701a      	strb	r2, [r3, #0]
   2dbd8:	697b      	ldr	r3, [r7, #20]
   2dbda:	3303      	adds	r3, #3
   2dbdc:	687a      	ldr	r2, [r7, #4]
   2dbde:	0e12      	lsrs	r2, r2, #24
   2dbe0:	b2d2      	uxtb	r2, r2
   2dbe2:	701a      	strb	r2, [r3, #0]
			break;
   2dbe4:	e00b      	b.n	2dbfe <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2dbe6:	231f      	movs	r3, #31
   2dbe8:	18fb      	adds	r3, r7, r3
   2dbea:	2202      	movs	r2, #2
   2dbec:	701a      	strb	r2, [r3, #0]
   2dbee:	e006      	b.n	2dbfe <put_fat+0x222>
			if (res != FR_OK) break;
   2dbf0:	46c0      	nop			; (mov r8, r8)
   2dbf2:	e004      	b.n	2dbfe <put_fat+0x222>
			if (res != FR_OK) break;
   2dbf4:	46c0      	nop			; (mov r8, r8)
   2dbf6:	e002      	b.n	2dbfe <put_fat+0x222>
			if (res != FR_OK) break;
   2dbf8:	46c0      	nop			; (mov r8, r8)
   2dbfa:	e000      	b.n	2dbfe <put_fat+0x222>
			if (res != FR_OK) break;
   2dbfc:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2dbfe:	68fb      	ldr	r3, [r7, #12]
   2dc00:	2201      	movs	r2, #1
   2dc02:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2dc04:	231f      	movs	r3, #31
   2dc06:	18fb      	adds	r3, r7, r3
   2dc08:	781b      	ldrb	r3, [r3, #0]
}
   2dc0a:	0018      	movs	r0, r3
   2dc0c:	46bd      	mov	sp, r7
   2dc0e:	b009      	add	sp, #36	; 0x24
   2dc10:	bd90      	pop	{r4, r7, pc}
   2dc12:	46c0      	nop			; (mov r8, r8)
   2dc14:	0002d5d9 	.word	0x0002d5d9

0002dc18 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2dc18:	b590      	push	{r4, r7, lr}
   2dc1a:	b085      	sub	sp, #20
   2dc1c:	af00      	add	r7, sp, #0
   2dc1e:	6078      	str	r0, [r7, #4]
   2dc20:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2dc22:	683b      	ldr	r3, [r7, #0]
   2dc24:	2b01      	cmp	r3, #1
   2dc26:	d904      	bls.n	2dc32 <remove_chain+0x1a>
   2dc28:	687b      	ldr	r3, [r7, #4]
   2dc2a:	699a      	ldr	r2, [r3, #24]
   2dc2c:	683b      	ldr	r3, [r7, #0]
   2dc2e:	429a      	cmp	r2, r3
   2dc30:	d804      	bhi.n	2dc3c <remove_chain+0x24>
		res = FR_INT_ERR;
   2dc32:	230f      	movs	r3, #15
   2dc34:	18fb      	adds	r3, r7, r3
   2dc36:	2202      	movs	r2, #2
   2dc38:	701a      	strb	r2, [r3, #0]
   2dc3a:	e045      	b.n	2dcc8 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2dc3c:	230f      	movs	r3, #15
   2dc3e:	18fb      	adds	r3, r7, r3
   2dc40:	2200      	movs	r2, #0
   2dc42:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2dc44:	e037      	b.n	2dcb6 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2dc46:	683a      	ldr	r2, [r7, #0]
   2dc48:	687b      	ldr	r3, [r7, #4]
   2dc4a:	0011      	movs	r1, r2
   2dc4c:	0018      	movs	r0, r3
   2dc4e:	4b22      	ldr	r3, [pc, #136]	; (2dcd8 <remove_chain+0xc0>)
   2dc50:	4798      	blx	r3
   2dc52:	0003      	movs	r3, r0
   2dc54:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2dc56:	68bb      	ldr	r3, [r7, #8]
   2dc58:	2b00      	cmp	r3, #0
   2dc5a:	d032      	beq.n	2dcc2 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2dc5c:	68bb      	ldr	r3, [r7, #8]
   2dc5e:	2b01      	cmp	r3, #1
   2dc60:	d104      	bne.n	2dc6c <remove_chain+0x54>
   2dc62:	230f      	movs	r3, #15
   2dc64:	18fb      	adds	r3, r7, r3
   2dc66:	2202      	movs	r2, #2
   2dc68:	701a      	strb	r2, [r3, #0]
   2dc6a:	e02d      	b.n	2dcc8 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2dc6c:	68bb      	ldr	r3, [r7, #8]
   2dc6e:	3301      	adds	r3, #1
   2dc70:	d104      	bne.n	2dc7c <remove_chain+0x64>
   2dc72:	230f      	movs	r3, #15
   2dc74:	18fb      	adds	r3, r7, r3
   2dc76:	2201      	movs	r2, #1
   2dc78:	701a      	strb	r2, [r3, #0]
   2dc7a:	e025      	b.n	2dcc8 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2dc7c:	230f      	movs	r3, #15
   2dc7e:	18fc      	adds	r4, r7, r3
   2dc80:	6839      	ldr	r1, [r7, #0]
   2dc82:	687b      	ldr	r3, [r7, #4]
   2dc84:	2200      	movs	r2, #0
   2dc86:	0018      	movs	r0, r3
   2dc88:	4b14      	ldr	r3, [pc, #80]	; (2dcdc <remove_chain+0xc4>)
   2dc8a:	4798      	blx	r3
   2dc8c:	0003      	movs	r3, r0
   2dc8e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2dc90:	230f      	movs	r3, #15
   2dc92:	18fb      	adds	r3, r7, r3
   2dc94:	781b      	ldrb	r3, [r3, #0]
   2dc96:	2b00      	cmp	r3, #0
   2dc98:	d115      	bne.n	2dcc6 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2dc9a:	687b      	ldr	r3, [r7, #4]
   2dc9c:	691b      	ldr	r3, [r3, #16]
   2dc9e:	3301      	adds	r3, #1
   2dca0:	d007      	beq.n	2dcb2 <remove_chain+0x9a>
				fs->free_clust++;
   2dca2:	687b      	ldr	r3, [r7, #4]
   2dca4:	691b      	ldr	r3, [r3, #16]
   2dca6:	1c5a      	adds	r2, r3, #1
   2dca8:	687b      	ldr	r3, [r7, #4]
   2dcaa:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2dcac:	687b      	ldr	r3, [r7, #4]
   2dcae:	2201      	movs	r2, #1
   2dcb0:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2dcb2:	68bb      	ldr	r3, [r7, #8]
   2dcb4:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2dcb6:	687b      	ldr	r3, [r7, #4]
   2dcb8:	699a      	ldr	r2, [r3, #24]
   2dcba:	683b      	ldr	r3, [r7, #0]
   2dcbc:	429a      	cmp	r2, r3
   2dcbe:	d8c2      	bhi.n	2dc46 <remove_chain+0x2e>
   2dcc0:	e002      	b.n	2dcc8 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2dcc2:	46c0      	nop			; (mov r8, r8)
   2dcc4:	e000      	b.n	2dcc8 <remove_chain+0xb0>
			if (res != FR_OK) break;
   2dcc6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2dcc8:	230f      	movs	r3, #15
   2dcca:	18fb      	adds	r3, r7, r3
   2dccc:	781b      	ldrb	r3, [r3, #0]
}
   2dcce:	0018      	movs	r0, r3
   2dcd0:	46bd      	mov	sp, r7
   2dcd2:	b005      	add	sp, #20
   2dcd4:	bd90      	pop	{r4, r7, pc}
   2dcd6:	46c0      	nop			; (mov r8, r8)
   2dcd8:	0002d871 	.word	0x0002d871
   2dcdc:	0002d9dd 	.word	0x0002d9dd

0002dce0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2dce0:	b590      	push	{r4, r7, lr}
   2dce2:	b087      	sub	sp, #28
   2dce4:	af00      	add	r7, sp, #0
   2dce6:	6078      	str	r0, [r7, #4]
   2dce8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2dcea:	683b      	ldr	r3, [r7, #0]
   2dcec:	2b00      	cmp	r3, #0
   2dcee:	d10d      	bne.n	2dd0c <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2dcf0:	687b      	ldr	r3, [r7, #4]
   2dcf2:	68db      	ldr	r3, [r3, #12]
   2dcf4:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2dcf6:	693b      	ldr	r3, [r7, #16]
   2dcf8:	2b00      	cmp	r3, #0
   2dcfa:	d004      	beq.n	2dd06 <create_chain+0x26>
   2dcfc:	687b      	ldr	r3, [r7, #4]
   2dcfe:	699a      	ldr	r2, [r3, #24]
   2dd00:	693b      	ldr	r3, [r7, #16]
   2dd02:	429a      	cmp	r2, r3
   2dd04:	d818      	bhi.n	2dd38 <create_chain+0x58>
   2dd06:	2301      	movs	r3, #1
   2dd08:	613b      	str	r3, [r7, #16]
   2dd0a:	e015      	b.n	2dd38 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2dd0c:	683a      	ldr	r2, [r7, #0]
   2dd0e:	687b      	ldr	r3, [r7, #4]
   2dd10:	0011      	movs	r1, r2
   2dd12:	0018      	movs	r0, r3
   2dd14:	4b3e      	ldr	r3, [pc, #248]	; (2de10 <create_chain+0x130>)
   2dd16:	4798      	blx	r3
   2dd18:	0003      	movs	r3, r0
   2dd1a:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2dd1c:	68bb      	ldr	r3, [r7, #8]
   2dd1e:	2b01      	cmp	r3, #1
   2dd20:	d801      	bhi.n	2dd26 <create_chain+0x46>
   2dd22:	2301      	movs	r3, #1
   2dd24:	e070      	b.n	2de08 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2dd26:	687b      	ldr	r3, [r7, #4]
   2dd28:	699a      	ldr	r2, [r3, #24]
   2dd2a:	68bb      	ldr	r3, [r7, #8]
   2dd2c:	429a      	cmp	r2, r3
   2dd2e:	d901      	bls.n	2dd34 <create_chain+0x54>
   2dd30:	68bb      	ldr	r3, [r7, #8]
   2dd32:	e069      	b.n	2de08 <create_chain+0x128>
		scl = clst;
   2dd34:	683b      	ldr	r3, [r7, #0]
   2dd36:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2dd38:	693b      	ldr	r3, [r7, #16]
   2dd3a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2dd3c:	697b      	ldr	r3, [r7, #20]
   2dd3e:	3301      	adds	r3, #1
   2dd40:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2dd42:	687b      	ldr	r3, [r7, #4]
   2dd44:	699a      	ldr	r2, [r3, #24]
   2dd46:	697b      	ldr	r3, [r7, #20]
   2dd48:	429a      	cmp	r2, r3
   2dd4a:	d807      	bhi.n	2dd5c <create_chain+0x7c>
			ncl = 2;
   2dd4c:	2302      	movs	r3, #2
   2dd4e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2dd50:	697a      	ldr	r2, [r7, #20]
   2dd52:	693b      	ldr	r3, [r7, #16]
   2dd54:	429a      	cmp	r2, r3
   2dd56:	d901      	bls.n	2dd5c <create_chain+0x7c>
   2dd58:	2300      	movs	r3, #0
   2dd5a:	e055      	b.n	2de08 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2dd5c:	697a      	ldr	r2, [r7, #20]
   2dd5e:	687b      	ldr	r3, [r7, #4]
   2dd60:	0011      	movs	r1, r2
   2dd62:	0018      	movs	r0, r3
   2dd64:	4b2a      	ldr	r3, [pc, #168]	; (2de10 <create_chain+0x130>)
   2dd66:	4798      	blx	r3
   2dd68:	0003      	movs	r3, r0
   2dd6a:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2dd6c:	68bb      	ldr	r3, [r7, #8]
   2dd6e:	2b00      	cmp	r3, #0
   2dd70:	d00d      	beq.n	2dd8e <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2dd72:	68bb      	ldr	r3, [r7, #8]
   2dd74:	3301      	adds	r3, #1
   2dd76:	d002      	beq.n	2dd7e <create_chain+0x9e>
   2dd78:	68bb      	ldr	r3, [r7, #8]
   2dd7a:	2b01      	cmp	r3, #1
   2dd7c:	d101      	bne.n	2dd82 <create_chain+0xa2>
			return cs;
   2dd7e:	68bb      	ldr	r3, [r7, #8]
   2dd80:	e042      	b.n	2de08 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2dd82:	697a      	ldr	r2, [r7, #20]
   2dd84:	693b      	ldr	r3, [r7, #16]
   2dd86:	429a      	cmp	r2, r3
   2dd88:	d1d8      	bne.n	2dd3c <create_chain+0x5c>
   2dd8a:	2300      	movs	r3, #0
   2dd8c:	e03c      	b.n	2de08 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2dd8e:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2dd90:	230f      	movs	r3, #15
   2dd92:	18fc      	adds	r4, r7, r3
   2dd94:	4a1f      	ldr	r2, [pc, #124]	; (2de14 <create_chain+0x134>)
   2dd96:	6979      	ldr	r1, [r7, #20]
   2dd98:	687b      	ldr	r3, [r7, #4]
   2dd9a:	0018      	movs	r0, r3
   2dd9c:	4b1e      	ldr	r3, [pc, #120]	; (2de18 <create_chain+0x138>)
   2dd9e:	4798      	blx	r3
   2dda0:	0003      	movs	r3, r0
   2dda2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2dda4:	230f      	movs	r3, #15
   2dda6:	18fb      	adds	r3, r7, r3
   2dda8:	781b      	ldrb	r3, [r3, #0]
   2ddaa:	2b00      	cmp	r3, #0
   2ddac:	d10c      	bne.n	2ddc8 <create_chain+0xe8>
   2ddae:	683b      	ldr	r3, [r7, #0]
   2ddb0:	2b00      	cmp	r3, #0
   2ddb2:	d009      	beq.n	2ddc8 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2ddb4:	230f      	movs	r3, #15
   2ddb6:	18fc      	adds	r4, r7, r3
   2ddb8:	697a      	ldr	r2, [r7, #20]
   2ddba:	6839      	ldr	r1, [r7, #0]
   2ddbc:	687b      	ldr	r3, [r7, #4]
   2ddbe:	0018      	movs	r0, r3
   2ddc0:	4b15      	ldr	r3, [pc, #84]	; (2de18 <create_chain+0x138>)
   2ddc2:	4798      	blx	r3
   2ddc4:	0003      	movs	r3, r0
   2ddc6:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2ddc8:	230f      	movs	r3, #15
   2ddca:	18fb      	adds	r3, r7, r3
   2ddcc:	781b      	ldrb	r3, [r3, #0]
   2ddce:	2b00      	cmp	r3, #0
   2ddd0:	d10f      	bne.n	2ddf2 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2ddd2:	687b      	ldr	r3, [r7, #4]
   2ddd4:	697a      	ldr	r2, [r7, #20]
   2ddd6:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2ddd8:	687b      	ldr	r3, [r7, #4]
   2ddda:	691b      	ldr	r3, [r3, #16]
   2dddc:	3301      	adds	r3, #1
   2ddde:	d012      	beq.n	2de06 <create_chain+0x126>
			fs->free_clust--;
   2dde0:	687b      	ldr	r3, [r7, #4]
   2dde2:	691b      	ldr	r3, [r3, #16]
   2dde4:	1e5a      	subs	r2, r3, #1
   2dde6:	687b      	ldr	r3, [r7, #4]
   2dde8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2ddea:	687b      	ldr	r3, [r7, #4]
   2ddec:	2201      	movs	r2, #1
   2ddee:	715a      	strb	r2, [r3, #5]
   2ddf0:	e009      	b.n	2de06 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2ddf2:	230f      	movs	r3, #15
   2ddf4:	18fb      	adds	r3, r7, r3
   2ddf6:	781b      	ldrb	r3, [r3, #0]
   2ddf8:	2b01      	cmp	r3, #1
   2ddfa:	d102      	bne.n	2de02 <create_chain+0x122>
   2ddfc:	2301      	movs	r3, #1
   2ddfe:	425b      	negs	r3, r3
   2de00:	e000      	b.n	2de04 <create_chain+0x124>
   2de02:	2301      	movs	r3, #1
   2de04:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2de06:	697b      	ldr	r3, [r7, #20]
}
   2de08:	0018      	movs	r0, r3
   2de0a:	46bd      	mov	sp, r7
   2de0c:	b007      	add	sp, #28
   2de0e:	bd90      	pop	{r4, r7, pc}
   2de10:	0002d871 	.word	0x0002d871
   2de14:	0fffffff 	.word	0x0fffffff
   2de18:	0002d9dd 	.word	0x0002d9dd

0002de1c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2de1c:	b580      	push	{r7, lr}
   2de1e:	b084      	sub	sp, #16
   2de20:	af00      	add	r7, sp, #0
   2de22:	6078      	str	r0, [r7, #4]
   2de24:	000a      	movs	r2, r1
   2de26:	1cbb      	adds	r3, r7, #2
   2de28:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2de2a:	687b      	ldr	r3, [r7, #4]
   2de2c:	1cba      	adds	r2, r7, #2
   2de2e:	8812      	ldrh	r2, [r2, #0]
   2de30:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2de32:	687b      	ldr	r3, [r7, #4]
   2de34:	689b      	ldr	r3, [r3, #8]
   2de36:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2de38:	68fb      	ldr	r3, [r7, #12]
   2de3a:	2b01      	cmp	r3, #1
   2de3c:	d005      	beq.n	2de4a <dir_sdi+0x2e>
   2de3e:	687b      	ldr	r3, [r7, #4]
   2de40:	681b      	ldr	r3, [r3, #0]
   2de42:	699a      	ldr	r2, [r3, #24]
   2de44:	68fb      	ldr	r3, [r7, #12]
   2de46:	429a      	cmp	r2, r3
   2de48:	d801      	bhi.n	2de4e <dir_sdi+0x32>
		return FR_INT_ERR;
   2de4a:	2302      	movs	r3, #2
   2de4c:	e075      	b.n	2df3a <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2de4e:	68fb      	ldr	r3, [r7, #12]
   2de50:	2b00      	cmp	r3, #0
   2de52:	d108      	bne.n	2de66 <dir_sdi+0x4a>
   2de54:	687b      	ldr	r3, [r7, #4]
   2de56:	681b      	ldr	r3, [r3, #0]
   2de58:	781b      	ldrb	r3, [r3, #0]
   2de5a:	2b03      	cmp	r3, #3
   2de5c:	d103      	bne.n	2de66 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2de5e:	687b      	ldr	r3, [r7, #4]
   2de60:	681b      	ldr	r3, [r3, #0]
   2de62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2de64:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2de66:	68fb      	ldr	r3, [r7, #12]
   2de68:	2b00      	cmp	r3, #0
   2de6a:	d116      	bne.n	2de9a <dir_sdi+0x7e>
		dj->clust = clst;
   2de6c:	687b      	ldr	r3, [r7, #4]
   2de6e:	68fa      	ldr	r2, [r7, #12]
   2de70:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2de72:	687b      	ldr	r3, [r7, #4]
   2de74:	681b      	ldr	r3, [r3, #0]
   2de76:	891b      	ldrh	r3, [r3, #8]
   2de78:	1cba      	adds	r2, r7, #2
   2de7a:	8812      	ldrh	r2, [r2, #0]
   2de7c:	429a      	cmp	r2, r3
   2de7e:	d301      	bcc.n	2de84 <dir_sdi+0x68>
			return FR_INT_ERR;
   2de80:	2302      	movs	r3, #2
   2de82:	e05a      	b.n	2df3a <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2de84:	687b      	ldr	r3, [r7, #4]
   2de86:	681b      	ldr	r3, [r3, #0]
   2de88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2de8a:	1cba      	adds	r2, r7, #2
   2de8c:	8812      	ldrh	r2, [r2, #0]
   2de8e:	0912      	lsrs	r2, r2, #4
   2de90:	b292      	uxth	r2, r2
   2de92:	189a      	adds	r2, r3, r2
   2de94:	687b      	ldr	r3, [r7, #4]
   2de96:	611a      	str	r2, [r3, #16]
   2de98:	e042      	b.n	2df20 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2de9a:	687b      	ldr	r3, [r7, #4]
   2de9c:	681b      	ldr	r3, [r3, #0]
   2de9e:	789b      	ldrb	r3, [r3, #2]
   2dea0:	b29a      	uxth	r2, r3
   2dea2:	230a      	movs	r3, #10
   2dea4:	18fb      	adds	r3, r7, r3
   2dea6:	0112      	lsls	r2, r2, #4
   2dea8:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2deaa:	e020      	b.n	2deee <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2deac:	687b      	ldr	r3, [r7, #4]
   2deae:	681b      	ldr	r3, [r3, #0]
   2deb0:	68fa      	ldr	r2, [r7, #12]
   2deb2:	0011      	movs	r1, r2
   2deb4:	0018      	movs	r0, r3
   2deb6:	4b23      	ldr	r3, [pc, #140]	; (2df44 <dir_sdi+0x128>)
   2deb8:	4798      	blx	r3
   2deba:	0003      	movs	r3, r0
   2debc:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2debe:	68fb      	ldr	r3, [r7, #12]
   2dec0:	3301      	adds	r3, #1
   2dec2:	d101      	bne.n	2dec8 <dir_sdi+0xac>
   2dec4:	2301      	movs	r3, #1
   2dec6:	e038      	b.n	2df3a <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2dec8:	68fb      	ldr	r3, [r7, #12]
   2deca:	2b01      	cmp	r3, #1
   2decc:	d905      	bls.n	2deda <dir_sdi+0xbe>
   2dece:	687b      	ldr	r3, [r7, #4]
   2ded0:	681b      	ldr	r3, [r3, #0]
   2ded2:	699a      	ldr	r2, [r3, #24]
   2ded4:	68fb      	ldr	r3, [r7, #12]
   2ded6:	429a      	cmp	r2, r3
   2ded8:	d801      	bhi.n	2dede <dir_sdi+0xc2>
				return FR_INT_ERR;
   2deda:	2302      	movs	r3, #2
   2dedc:	e02d      	b.n	2df3a <dir_sdi+0x11e>
			idx -= ic;
   2dede:	1cbb      	adds	r3, r7, #2
   2dee0:	1cb9      	adds	r1, r7, #2
   2dee2:	220a      	movs	r2, #10
   2dee4:	18ba      	adds	r2, r7, r2
   2dee6:	8809      	ldrh	r1, [r1, #0]
   2dee8:	8812      	ldrh	r2, [r2, #0]
   2deea:	1a8a      	subs	r2, r1, r2
   2deec:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2deee:	1cba      	adds	r2, r7, #2
   2def0:	230a      	movs	r3, #10
   2def2:	18fb      	adds	r3, r7, r3
   2def4:	8812      	ldrh	r2, [r2, #0]
   2def6:	881b      	ldrh	r3, [r3, #0]
   2def8:	429a      	cmp	r2, r3
   2defa:	d2d7      	bcs.n	2deac <dir_sdi+0x90>
		}
		dj->clust = clst;
   2defc:	687b      	ldr	r3, [r7, #4]
   2defe:	68fa      	ldr	r2, [r7, #12]
   2df00:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2df02:	687b      	ldr	r3, [r7, #4]
   2df04:	681b      	ldr	r3, [r3, #0]
   2df06:	68fa      	ldr	r2, [r7, #12]
   2df08:	0011      	movs	r1, r2
   2df0a:	0018      	movs	r0, r3
   2df0c:	4b0e      	ldr	r3, [pc, #56]	; (2df48 <dir_sdi+0x12c>)
   2df0e:	4798      	blx	r3
   2df10:	0002      	movs	r2, r0
   2df12:	1cbb      	adds	r3, r7, #2
   2df14:	881b      	ldrh	r3, [r3, #0]
   2df16:	091b      	lsrs	r3, r3, #4
   2df18:	b29b      	uxth	r3, r3
   2df1a:	18d2      	adds	r2, r2, r3
   2df1c:	687b      	ldr	r3, [r7, #4]
   2df1e:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2df20:	687b      	ldr	r3, [r7, #4]
   2df22:	681b      	ldr	r3, [r3, #0]
   2df24:	3330      	adds	r3, #48	; 0x30
   2df26:	001a      	movs	r2, r3
   2df28:	1cbb      	adds	r3, r7, #2
   2df2a:	881b      	ldrh	r3, [r3, #0]
   2df2c:	210f      	movs	r1, #15
   2df2e:	400b      	ands	r3, r1
   2df30:	015b      	lsls	r3, r3, #5
   2df32:	18d2      	adds	r2, r2, r3
   2df34:	687b      	ldr	r3, [r7, #4]
   2df36:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2df38:	2300      	movs	r3, #0
}
   2df3a:	0018      	movs	r0, r3
   2df3c:	46bd      	mov	sp, r7
   2df3e:	b004      	add	sp, #16
   2df40:	bd80      	pop	{r7, pc}
   2df42:	46c0      	nop			; (mov r8, r8)
   2df44:	0002d871 	.word	0x0002d871
   2df48:	0002d839 	.word	0x0002d839

0002df4c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2df4c:	b590      	push	{r4, r7, lr}
   2df4e:	b085      	sub	sp, #20
   2df50:	af00      	add	r7, sp, #0
   2df52:	6078      	str	r0, [r7, #4]
   2df54:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2df56:	687b      	ldr	r3, [r7, #4]
   2df58:	88da      	ldrh	r2, [r3, #6]
   2df5a:	2308      	movs	r3, #8
   2df5c:	18fb      	adds	r3, r7, r3
   2df5e:	3201      	adds	r2, #1
   2df60:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2df62:	2308      	movs	r3, #8
   2df64:	18fb      	adds	r3, r7, r3
   2df66:	881b      	ldrh	r3, [r3, #0]
   2df68:	2b00      	cmp	r3, #0
   2df6a:	d003      	beq.n	2df74 <dir_next+0x28>
   2df6c:	687b      	ldr	r3, [r7, #4]
   2df6e:	691b      	ldr	r3, [r3, #16]
   2df70:	2b00      	cmp	r3, #0
   2df72:	d101      	bne.n	2df78 <dir_next+0x2c>
		return FR_NO_FILE;
   2df74:	2304      	movs	r3, #4
   2df76:	e0d2      	b.n	2e11e <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2df78:	2308      	movs	r3, #8
   2df7a:	18fb      	adds	r3, r7, r3
   2df7c:	881b      	ldrh	r3, [r3, #0]
   2df7e:	220f      	movs	r2, #15
   2df80:	4013      	ands	r3, r2
   2df82:	b29b      	uxth	r3, r3
   2df84:	2b00      	cmp	r3, #0
   2df86:	d000      	beq.n	2df8a <dir_next+0x3e>
   2df88:	e0b6      	b.n	2e0f8 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2df8a:	687b      	ldr	r3, [r7, #4]
   2df8c:	691b      	ldr	r3, [r3, #16]
   2df8e:	1c5a      	adds	r2, r3, #1
   2df90:	687b      	ldr	r3, [r7, #4]
   2df92:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2df94:	687b      	ldr	r3, [r7, #4]
   2df96:	68db      	ldr	r3, [r3, #12]
   2df98:	2b00      	cmp	r3, #0
   2df9a:	d10a      	bne.n	2dfb2 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2df9c:	687b      	ldr	r3, [r7, #4]
   2df9e:	681b      	ldr	r3, [r3, #0]
   2dfa0:	891b      	ldrh	r3, [r3, #8]
   2dfa2:	2208      	movs	r2, #8
   2dfa4:	18ba      	adds	r2, r7, r2
   2dfa6:	8812      	ldrh	r2, [r2, #0]
   2dfa8:	429a      	cmp	r2, r3
   2dfaa:	d200      	bcs.n	2dfae <dir_next+0x62>
   2dfac:	e0a4      	b.n	2e0f8 <dir_next+0x1ac>
				return FR_NO_FILE;
   2dfae:	2304      	movs	r3, #4
   2dfb0:	e0b5      	b.n	2e11e <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2dfb2:	2308      	movs	r3, #8
   2dfb4:	18fb      	adds	r3, r7, r3
   2dfb6:	881b      	ldrh	r3, [r3, #0]
   2dfb8:	091b      	lsrs	r3, r3, #4
   2dfba:	b29b      	uxth	r3, r3
   2dfbc:	001a      	movs	r2, r3
   2dfbe:	687b      	ldr	r3, [r7, #4]
   2dfc0:	681b      	ldr	r3, [r3, #0]
   2dfc2:	789b      	ldrb	r3, [r3, #2]
   2dfc4:	3b01      	subs	r3, #1
   2dfc6:	4013      	ands	r3, r2
   2dfc8:	d000      	beq.n	2dfcc <dir_next+0x80>
   2dfca:	e095      	b.n	2e0f8 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2dfcc:	687b      	ldr	r3, [r7, #4]
   2dfce:	681a      	ldr	r2, [r3, #0]
   2dfd0:	687b      	ldr	r3, [r7, #4]
   2dfd2:	68db      	ldr	r3, [r3, #12]
   2dfd4:	0019      	movs	r1, r3
   2dfd6:	0010      	movs	r0, r2
   2dfd8:	4b53      	ldr	r3, [pc, #332]	; (2e128 <dir_next+0x1dc>)
   2dfda:	4798      	blx	r3
   2dfdc:	0003      	movs	r3, r0
   2dfde:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2dfe0:	68fb      	ldr	r3, [r7, #12]
   2dfe2:	2b01      	cmp	r3, #1
   2dfe4:	d801      	bhi.n	2dfea <dir_next+0x9e>
   2dfe6:	2302      	movs	r3, #2
   2dfe8:	e099      	b.n	2e11e <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2dfea:	68fb      	ldr	r3, [r7, #12]
   2dfec:	3301      	adds	r3, #1
   2dfee:	d101      	bne.n	2dff4 <dir_next+0xa8>
   2dff0:	2301      	movs	r3, #1
   2dff2:	e094      	b.n	2e11e <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2dff4:	687b      	ldr	r3, [r7, #4]
   2dff6:	681b      	ldr	r3, [r3, #0]
   2dff8:	699a      	ldr	r2, [r3, #24]
   2dffa:	68fb      	ldr	r3, [r7, #12]
   2dffc:	429a      	cmp	r2, r3
   2dffe:	d900      	bls.n	2e002 <dir_next+0xb6>
   2e000:	e06d      	b.n	2e0de <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2e002:	683b      	ldr	r3, [r7, #0]
   2e004:	2b00      	cmp	r3, #0
   2e006:	d101      	bne.n	2e00c <dir_next+0xc0>
   2e008:	2304      	movs	r3, #4
   2e00a:	e088      	b.n	2e11e <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2e00c:	687b      	ldr	r3, [r7, #4]
   2e00e:	681a      	ldr	r2, [r3, #0]
   2e010:	687b      	ldr	r3, [r7, #4]
   2e012:	68db      	ldr	r3, [r3, #12]
   2e014:	0019      	movs	r1, r3
   2e016:	0010      	movs	r0, r2
   2e018:	4b44      	ldr	r3, [pc, #272]	; (2e12c <dir_next+0x1e0>)
   2e01a:	4798      	blx	r3
   2e01c:	0003      	movs	r3, r0
   2e01e:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2e020:	68fb      	ldr	r3, [r7, #12]
   2e022:	2b00      	cmp	r3, #0
   2e024:	d101      	bne.n	2e02a <dir_next+0xde>
   2e026:	2307      	movs	r3, #7
   2e028:	e079      	b.n	2e11e <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2e02a:	68fb      	ldr	r3, [r7, #12]
   2e02c:	2b01      	cmp	r3, #1
   2e02e:	d101      	bne.n	2e034 <dir_next+0xe8>
   2e030:	2302      	movs	r3, #2
   2e032:	e074      	b.n	2e11e <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2e034:	68fb      	ldr	r3, [r7, #12]
   2e036:	3301      	adds	r3, #1
   2e038:	d101      	bne.n	2e03e <dir_next+0xf2>
   2e03a:	2301      	movs	r3, #1
   2e03c:	e06f      	b.n	2e11e <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2e03e:	687b      	ldr	r3, [r7, #4]
   2e040:	681b      	ldr	r3, [r3, #0]
   2e042:	2100      	movs	r1, #0
   2e044:	0018      	movs	r0, r3
   2e046:	4b3a      	ldr	r3, [pc, #232]	; (2e130 <dir_next+0x1e4>)
   2e048:	4798      	blx	r3
   2e04a:	1e03      	subs	r3, r0, #0
   2e04c:	d001      	beq.n	2e052 <dir_next+0x106>
   2e04e:	2301      	movs	r3, #1
   2e050:	e065      	b.n	2e11e <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2e052:	687b      	ldr	r3, [r7, #4]
   2e054:	681b      	ldr	r3, [r3, #0]
   2e056:	3330      	adds	r3, #48	; 0x30
   2e058:	0018      	movs	r0, r3
   2e05a:	2380      	movs	r3, #128	; 0x80
   2e05c:	009b      	lsls	r3, r3, #2
   2e05e:	001a      	movs	r2, r3
   2e060:	2100      	movs	r1, #0
   2e062:	4b34      	ldr	r3, [pc, #208]	; (2e134 <dir_next+0x1e8>)
   2e064:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2e066:	687b      	ldr	r3, [r7, #4]
   2e068:	681c      	ldr	r4, [r3, #0]
   2e06a:	687b      	ldr	r3, [r7, #4]
   2e06c:	681b      	ldr	r3, [r3, #0]
   2e06e:	68fa      	ldr	r2, [r7, #12]
   2e070:	0011      	movs	r1, r2
   2e072:	0018      	movs	r0, r3
   2e074:	4b30      	ldr	r3, [pc, #192]	; (2e138 <dir_next+0x1ec>)
   2e076:	4798      	blx	r3
   2e078:	0003      	movs	r3, r0
   2e07a:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2e07c:	230b      	movs	r3, #11
   2e07e:	18fb      	adds	r3, r7, r3
   2e080:	2200      	movs	r2, #0
   2e082:	701a      	strb	r2, [r3, #0]
   2e084:	e019      	b.n	2e0ba <dir_next+0x16e>
						dj->fs->wflag = 1;
   2e086:	687b      	ldr	r3, [r7, #4]
   2e088:	681b      	ldr	r3, [r3, #0]
   2e08a:	2201      	movs	r2, #1
   2e08c:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2e08e:	687b      	ldr	r3, [r7, #4]
   2e090:	681b      	ldr	r3, [r3, #0]
   2e092:	2100      	movs	r1, #0
   2e094:	0018      	movs	r0, r3
   2e096:	4b26      	ldr	r3, [pc, #152]	; (2e130 <dir_next+0x1e4>)
   2e098:	4798      	blx	r3
   2e09a:	1e03      	subs	r3, r0, #0
   2e09c:	d001      	beq.n	2e0a2 <dir_next+0x156>
   2e09e:	2301      	movs	r3, #1
   2e0a0:	e03d      	b.n	2e11e <dir_next+0x1d2>
						dj->fs->winsect++;
   2e0a2:	687b      	ldr	r3, [r7, #4]
   2e0a4:	681b      	ldr	r3, [r3, #0]
   2e0a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e0a8:	3201      	adds	r2, #1
   2e0aa:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2e0ac:	230b      	movs	r3, #11
   2e0ae:	18fb      	adds	r3, r7, r3
   2e0b0:	781a      	ldrb	r2, [r3, #0]
   2e0b2:	230b      	movs	r3, #11
   2e0b4:	18fb      	adds	r3, r7, r3
   2e0b6:	3201      	adds	r2, #1
   2e0b8:	701a      	strb	r2, [r3, #0]
   2e0ba:	687b      	ldr	r3, [r7, #4]
   2e0bc:	681b      	ldr	r3, [r3, #0]
   2e0be:	789b      	ldrb	r3, [r3, #2]
   2e0c0:	220b      	movs	r2, #11
   2e0c2:	18ba      	adds	r2, r7, r2
   2e0c4:	7812      	ldrb	r2, [r2, #0]
   2e0c6:	429a      	cmp	r2, r3
   2e0c8:	d3dd      	bcc.n	2e086 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2e0ca:	687b      	ldr	r3, [r7, #4]
   2e0cc:	681b      	ldr	r3, [r3, #0]
   2e0ce:	687a      	ldr	r2, [r7, #4]
   2e0d0:	6812      	ldr	r2, [r2, #0]
   2e0d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2e0d4:	220b      	movs	r2, #11
   2e0d6:	18ba      	adds	r2, r7, r2
   2e0d8:	7812      	ldrb	r2, [r2, #0]
   2e0da:	1a8a      	subs	r2, r1, r2
   2e0dc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2e0de:	687b      	ldr	r3, [r7, #4]
   2e0e0:	68fa      	ldr	r2, [r7, #12]
   2e0e2:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2e0e4:	687b      	ldr	r3, [r7, #4]
   2e0e6:	681b      	ldr	r3, [r3, #0]
   2e0e8:	68fa      	ldr	r2, [r7, #12]
   2e0ea:	0011      	movs	r1, r2
   2e0ec:	0018      	movs	r0, r3
   2e0ee:	4b12      	ldr	r3, [pc, #72]	; (2e138 <dir_next+0x1ec>)
   2e0f0:	4798      	blx	r3
   2e0f2:	0002      	movs	r2, r0
   2e0f4:	687b      	ldr	r3, [r7, #4]
   2e0f6:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2e0f8:	687b      	ldr	r3, [r7, #4]
   2e0fa:	2208      	movs	r2, #8
   2e0fc:	18ba      	adds	r2, r7, r2
   2e0fe:	8812      	ldrh	r2, [r2, #0]
   2e100:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2e102:	687b      	ldr	r3, [r7, #4]
   2e104:	681b      	ldr	r3, [r3, #0]
   2e106:	3330      	adds	r3, #48	; 0x30
   2e108:	001a      	movs	r2, r3
   2e10a:	2308      	movs	r3, #8
   2e10c:	18fb      	adds	r3, r7, r3
   2e10e:	881b      	ldrh	r3, [r3, #0]
   2e110:	210f      	movs	r1, #15
   2e112:	400b      	ands	r3, r1
   2e114:	015b      	lsls	r3, r3, #5
   2e116:	18d2      	adds	r2, r2, r3
   2e118:	687b      	ldr	r3, [r7, #4]
   2e11a:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2e11c:	2300      	movs	r3, #0
}
   2e11e:	0018      	movs	r0, r3
   2e120:	46bd      	mov	sp, r7
   2e122:	b005      	add	sp, #20
   2e124:	bd90      	pop	{r4, r7, pc}
   2e126:	46c0      	nop			; (mov r8, r8)
   2e128:	0002d871 	.word	0x0002d871
   2e12c:	0002dce1 	.word	0x0002dce1
   2e130:	0002d5d9 	.word	0x0002d5d9
   2e134:	0002d52d 	.word	0x0002d52d
   2e138:	0002d839 	.word	0x0002d839

0002e13c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2e13c:	b590      	push	{r4, r7, lr}
   2e13e:	b087      	sub	sp, #28
   2e140:	af00      	add	r7, sp, #0
   2e142:	6078      	str	r0, [r7, #4]
   2e144:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2e146:	683b      	ldr	r3, [r7, #0]
   2e148:	781b      	ldrb	r3, [r3, #0]
   2e14a:	001a      	movs	r2, r3
   2e14c:	2340      	movs	r3, #64	; 0x40
   2e14e:	439a      	bics	r2, r3
   2e150:	0013      	movs	r3, r2
   2e152:	1e5a      	subs	r2, r3, #1
   2e154:	0013      	movs	r3, r2
   2e156:	005b      	lsls	r3, r3, #1
   2e158:	189b      	adds	r3, r3, r2
   2e15a:	009b      	lsls	r3, r3, #2
   2e15c:	189b      	adds	r3, r3, r2
   2e15e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2e160:	2300      	movs	r3, #0
   2e162:	613b      	str	r3, [r7, #16]
   2e164:	230e      	movs	r3, #14
   2e166:	18fb      	adds	r3, r7, r3
   2e168:	2201      	movs	r2, #1
   2e16a:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2e16c:	4a31      	ldr	r2, [pc, #196]	; (2e234 <cmp_lfn+0xf8>)
   2e16e:	693b      	ldr	r3, [r7, #16]
   2e170:	18d3      	adds	r3, r2, r3
   2e172:	781b      	ldrb	r3, [r3, #0]
   2e174:	3301      	adds	r3, #1
   2e176:	683a      	ldr	r2, [r7, #0]
   2e178:	18d3      	adds	r3, r2, r3
   2e17a:	781b      	ldrb	r3, [r3, #0]
   2e17c:	021b      	lsls	r3, r3, #8
   2e17e:	b21a      	sxth	r2, r3
   2e180:	492c      	ldr	r1, [pc, #176]	; (2e234 <cmp_lfn+0xf8>)
   2e182:	693b      	ldr	r3, [r7, #16]
   2e184:	18cb      	adds	r3, r1, r3
   2e186:	781b      	ldrb	r3, [r3, #0]
   2e188:	0019      	movs	r1, r3
   2e18a:	683b      	ldr	r3, [r7, #0]
   2e18c:	185b      	adds	r3, r3, r1
   2e18e:	781b      	ldrb	r3, [r3, #0]
   2e190:	b21b      	sxth	r3, r3
   2e192:	4313      	orrs	r3, r2
   2e194:	b21a      	sxth	r2, r3
   2e196:	230c      	movs	r3, #12
   2e198:	18fb      	adds	r3, r7, r3
   2e19a:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2e19c:	230e      	movs	r3, #14
   2e19e:	18fb      	adds	r3, r7, r3
   2e1a0:	881b      	ldrh	r3, [r3, #0]
   2e1a2:	2b00      	cmp	r3, #0
   2e1a4:	d01f      	beq.n	2e1e6 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2e1a6:	230e      	movs	r3, #14
   2e1a8:	18fc      	adds	r4, r7, r3
   2e1aa:	230c      	movs	r3, #12
   2e1ac:	18fb      	adds	r3, r7, r3
   2e1ae:	881b      	ldrh	r3, [r3, #0]
   2e1b0:	0018      	movs	r0, r3
   2e1b2:	4b21      	ldr	r3, [pc, #132]	; (2e238 <cmp_lfn+0xfc>)
   2e1b4:	4798      	blx	r3
   2e1b6:	0003      	movs	r3, r0
   2e1b8:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2e1ba:	697b      	ldr	r3, [r7, #20]
   2e1bc:	2bfe      	cmp	r3, #254	; 0xfe
   2e1be:	d810      	bhi.n	2e1e2 <cmp_lfn+0xa6>
   2e1c0:	697b      	ldr	r3, [r7, #20]
   2e1c2:	1c5a      	adds	r2, r3, #1
   2e1c4:	617a      	str	r2, [r7, #20]
   2e1c6:	005b      	lsls	r3, r3, #1
   2e1c8:	687a      	ldr	r2, [r7, #4]
   2e1ca:	18d3      	adds	r3, r2, r3
   2e1cc:	881b      	ldrh	r3, [r3, #0]
   2e1ce:	0018      	movs	r0, r3
   2e1d0:	4b19      	ldr	r3, [pc, #100]	; (2e238 <cmp_lfn+0xfc>)
   2e1d2:	4798      	blx	r3
   2e1d4:	0003      	movs	r3, r0
   2e1d6:	001a      	movs	r2, r3
   2e1d8:	230e      	movs	r3, #14
   2e1da:	18fb      	adds	r3, r7, r3
   2e1dc:	881b      	ldrh	r3, [r3, #0]
   2e1de:	4293      	cmp	r3, r2
   2e1e0:	d009      	beq.n	2e1f6 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2e1e2:	2300      	movs	r3, #0
   2e1e4:	e022      	b.n	2e22c <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2e1e6:	230c      	movs	r3, #12
   2e1e8:	18fb      	adds	r3, r7, r3
   2e1ea:	881b      	ldrh	r3, [r3, #0]
   2e1ec:	4a13      	ldr	r2, [pc, #76]	; (2e23c <cmp_lfn+0x100>)
   2e1ee:	4293      	cmp	r3, r2
   2e1f0:	d001      	beq.n	2e1f6 <cmp_lfn+0xba>
   2e1f2:	2300      	movs	r3, #0
   2e1f4:	e01a      	b.n	2e22c <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2e1f6:	693b      	ldr	r3, [r7, #16]
   2e1f8:	3301      	adds	r3, #1
   2e1fa:	613b      	str	r3, [r7, #16]
   2e1fc:	693b      	ldr	r3, [r7, #16]
   2e1fe:	2b0c      	cmp	r3, #12
   2e200:	d9b4      	bls.n	2e16c <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2e202:	683b      	ldr	r3, [r7, #0]
   2e204:	781b      	ldrb	r3, [r3, #0]
   2e206:	001a      	movs	r2, r3
   2e208:	2340      	movs	r3, #64	; 0x40
   2e20a:	4013      	ands	r3, r2
   2e20c:	d00d      	beq.n	2e22a <cmp_lfn+0xee>
   2e20e:	230e      	movs	r3, #14
   2e210:	18fb      	adds	r3, r7, r3
   2e212:	881b      	ldrh	r3, [r3, #0]
   2e214:	2b00      	cmp	r3, #0
   2e216:	d008      	beq.n	2e22a <cmp_lfn+0xee>
   2e218:	697b      	ldr	r3, [r7, #20]
   2e21a:	005b      	lsls	r3, r3, #1
   2e21c:	687a      	ldr	r2, [r7, #4]
   2e21e:	18d3      	adds	r3, r2, r3
   2e220:	881b      	ldrh	r3, [r3, #0]
   2e222:	2b00      	cmp	r3, #0
   2e224:	d001      	beq.n	2e22a <cmp_lfn+0xee>
		return 0;
   2e226:	2300      	movs	r3, #0
   2e228:	e000      	b.n	2e22c <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2e22a:	2301      	movs	r3, #1
}
   2e22c:	0018      	movs	r0, r3
   2e22e:	46bd      	mov	sp, r7
   2e230:	b007      	add	sp, #28
   2e232:	bd90      	pop	{r4, r7, pc}
   2e234:	0003bb28 	.word	0x0003bb28
   2e238:	00030191 	.word	0x00030191
   2e23c:	0000ffff 	.word	0x0000ffff

0002e240 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2e240:	b580      	push	{r7, lr}
   2e242:	b088      	sub	sp, #32
   2e244:	af00      	add	r7, sp, #0
   2e246:	60f8      	str	r0, [r7, #12]
   2e248:	60b9      	str	r1, [r7, #8]
   2e24a:	0019      	movs	r1, r3
   2e24c:	1dfb      	adds	r3, r7, #7
   2e24e:	701a      	strb	r2, [r3, #0]
   2e250:	1dbb      	adds	r3, r7, #6
   2e252:	1c0a      	adds	r2, r1, #0
   2e254:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2e256:	68bb      	ldr	r3, [r7, #8]
   2e258:	330d      	adds	r3, #13
   2e25a:	1dba      	adds	r2, r7, #6
   2e25c:	7812      	ldrb	r2, [r2, #0]
   2e25e:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2e260:	68bb      	ldr	r3, [r7, #8]
   2e262:	330b      	adds	r3, #11
   2e264:	220f      	movs	r2, #15
   2e266:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2e268:	68bb      	ldr	r3, [r7, #8]
   2e26a:	330c      	adds	r3, #12
   2e26c:	2200      	movs	r2, #0
   2e26e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2e270:	68bb      	ldr	r3, [r7, #8]
   2e272:	331a      	adds	r3, #26
   2e274:	2200      	movs	r2, #0
   2e276:	701a      	strb	r2, [r3, #0]
   2e278:	68bb      	ldr	r3, [r7, #8]
   2e27a:	331b      	adds	r3, #27
   2e27c:	2200      	movs	r2, #0
   2e27e:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2e280:	1dfb      	adds	r3, r7, #7
   2e282:	781b      	ldrb	r3, [r3, #0]
   2e284:	1e5a      	subs	r2, r3, #1
   2e286:	0013      	movs	r3, r2
   2e288:	005b      	lsls	r3, r3, #1
   2e28a:	189b      	adds	r3, r3, r2
   2e28c:	009b      	lsls	r3, r3, #2
   2e28e:	189b      	adds	r3, r3, r2
   2e290:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2e292:	2316      	movs	r3, #22
   2e294:	18fb      	adds	r3, r7, r3
   2e296:	2200      	movs	r2, #0
   2e298:	801a      	strh	r2, [r3, #0]
   2e29a:	2300      	movs	r3, #0
   2e29c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2e29e:	2316      	movs	r3, #22
   2e2a0:	18fb      	adds	r3, r7, r3
   2e2a2:	881b      	ldrh	r3, [r3, #0]
   2e2a4:	4a28      	ldr	r2, [pc, #160]	; (2e348 <fit_lfn+0x108>)
   2e2a6:	4293      	cmp	r3, r2
   2e2a8:	d009      	beq.n	2e2be <fit_lfn+0x7e>
   2e2aa:	69fb      	ldr	r3, [r7, #28]
   2e2ac:	1c5a      	adds	r2, r3, #1
   2e2ae:	61fa      	str	r2, [r7, #28]
   2e2b0:	005b      	lsls	r3, r3, #1
   2e2b2:	68fa      	ldr	r2, [r7, #12]
   2e2b4:	18d2      	adds	r2, r2, r3
   2e2b6:	2316      	movs	r3, #22
   2e2b8:	18fb      	adds	r3, r7, r3
   2e2ba:	8812      	ldrh	r2, [r2, #0]
   2e2bc:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2e2be:	4a23      	ldr	r2, [pc, #140]	; (2e34c <fit_lfn+0x10c>)
   2e2c0:	69bb      	ldr	r3, [r7, #24]
   2e2c2:	18d3      	adds	r3, r2, r3
   2e2c4:	781b      	ldrb	r3, [r3, #0]
   2e2c6:	001a      	movs	r2, r3
   2e2c8:	68bb      	ldr	r3, [r7, #8]
   2e2ca:	189b      	adds	r3, r3, r2
   2e2cc:	2216      	movs	r2, #22
   2e2ce:	18ba      	adds	r2, r7, r2
   2e2d0:	8812      	ldrh	r2, [r2, #0]
   2e2d2:	b2d2      	uxtb	r2, r2
   2e2d4:	701a      	strb	r2, [r3, #0]
   2e2d6:	4a1d      	ldr	r2, [pc, #116]	; (2e34c <fit_lfn+0x10c>)
   2e2d8:	69bb      	ldr	r3, [r7, #24]
   2e2da:	18d3      	adds	r3, r2, r3
   2e2dc:	781b      	ldrb	r3, [r3, #0]
   2e2de:	3301      	adds	r3, #1
   2e2e0:	68ba      	ldr	r2, [r7, #8]
   2e2e2:	18d3      	adds	r3, r2, r3
   2e2e4:	2216      	movs	r2, #22
   2e2e6:	18ba      	adds	r2, r7, r2
   2e2e8:	8812      	ldrh	r2, [r2, #0]
   2e2ea:	0a12      	lsrs	r2, r2, #8
   2e2ec:	b292      	uxth	r2, r2
   2e2ee:	b2d2      	uxtb	r2, r2
   2e2f0:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2e2f2:	2316      	movs	r3, #22
   2e2f4:	18fb      	adds	r3, r7, r3
   2e2f6:	881b      	ldrh	r3, [r3, #0]
   2e2f8:	2b00      	cmp	r3, #0
   2e2fa:	d104      	bne.n	2e306 <fit_lfn+0xc6>
   2e2fc:	2316      	movs	r3, #22
   2e2fe:	18fb      	adds	r3, r7, r3
   2e300:	2201      	movs	r2, #1
   2e302:	4252      	negs	r2, r2
   2e304:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2e306:	69bb      	ldr	r3, [r7, #24]
   2e308:	3301      	adds	r3, #1
   2e30a:	61bb      	str	r3, [r7, #24]
   2e30c:	69bb      	ldr	r3, [r7, #24]
   2e30e:	2b0c      	cmp	r3, #12
   2e310:	d9c5      	bls.n	2e29e <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2e312:	2316      	movs	r3, #22
   2e314:	18fb      	adds	r3, r7, r3
   2e316:	881b      	ldrh	r3, [r3, #0]
   2e318:	4a0b      	ldr	r2, [pc, #44]	; (2e348 <fit_lfn+0x108>)
   2e31a:	4293      	cmp	r3, r2
   2e31c:	d006      	beq.n	2e32c <fit_lfn+0xec>
   2e31e:	69fb      	ldr	r3, [r7, #28]
   2e320:	005b      	lsls	r3, r3, #1
   2e322:	68fa      	ldr	r2, [r7, #12]
   2e324:	18d3      	adds	r3, r2, r3
   2e326:	881b      	ldrh	r3, [r3, #0]
   2e328:	2b00      	cmp	r3, #0
   2e32a:	d105      	bne.n	2e338 <fit_lfn+0xf8>
   2e32c:	1dfb      	adds	r3, r7, #7
   2e32e:	1dfa      	adds	r2, r7, #7
   2e330:	7812      	ldrb	r2, [r2, #0]
   2e332:	2140      	movs	r1, #64	; 0x40
   2e334:	430a      	orrs	r2, r1
   2e336:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2e338:	68bb      	ldr	r3, [r7, #8]
   2e33a:	1dfa      	adds	r2, r7, #7
   2e33c:	7812      	ldrb	r2, [r2, #0]
   2e33e:	701a      	strb	r2, [r3, #0]
}
   2e340:	46c0      	nop			; (mov r8, r8)
   2e342:	46bd      	mov	sp, r7
   2e344:	b008      	add	sp, #32
   2e346:	bd80      	pop	{r7, pc}
   2e348:	0000ffff 	.word	0x0000ffff
   2e34c:	0003bb28 	.word	0x0003bb28

0002e350 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2e350:	b580      	push	{r7, lr}
   2e352:	b08a      	sub	sp, #40	; 0x28
   2e354:	af00      	add	r7, sp, #0
   2e356:	60f8      	str	r0, [r7, #12]
   2e358:	60b9      	str	r1, [r7, #8]
   2e35a:	607a      	str	r2, [r7, #4]
   2e35c:	001a      	movs	r2, r3
   2e35e:	1cbb      	adds	r3, r7, #2
   2e360:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2e362:	68b9      	ldr	r1, [r7, #8]
   2e364:	68fb      	ldr	r3, [r7, #12]
   2e366:	220b      	movs	r2, #11
   2e368:	0018      	movs	r0, r3
   2e36a:	4b38      	ldr	r3, [pc, #224]	; (2e44c <gen_numname+0xfc>)
   2e36c:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2e36e:	1cbb      	adds	r3, r7, #2
   2e370:	881b      	ldrh	r3, [r3, #0]
   2e372:	2b05      	cmp	r3, #5
   2e374:	d911      	bls.n	2e39a <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2e376:	1cbb      	adds	r3, r7, #2
   2e378:	881b      	ldrh	r3, [r3, #0]
   2e37a:	b29a      	uxth	r2, r3
   2e37c:	0852      	lsrs	r2, r2, #1
   2e37e:	03db      	lsls	r3, r3, #15
   2e380:	4313      	orrs	r3, r2
   2e382:	b299      	uxth	r1, r3
   2e384:	687b      	ldr	r3, [r7, #4]
   2e386:	1c9a      	adds	r2, r3, #2
   2e388:	607a      	str	r2, [r7, #4]
   2e38a:	881a      	ldrh	r2, [r3, #0]
   2e38c:	1cbb      	adds	r3, r7, #2
   2e38e:	188a      	adds	r2, r1, r2
   2e390:	801a      	strh	r2, [r3, #0]
   2e392:	687b      	ldr	r3, [r7, #4]
   2e394:	881b      	ldrh	r3, [r3, #0]
   2e396:	2b00      	cmp	r3, #0
   2e398:	d1ed      	bne.n	2e376 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2e39a:	2307      	movs	r3, #7
   2e39c:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2e39e:	1cbb      	adds	r3, r7, #2
   2e3a0:	881b      	ldrh	r3, [r3, #0]
   2e3a2:	b2db      	uxtb	r3, r3
   2e3a4:	220f      	movs	r2, #15
   2e3a6:	4013      	ands	r3, r2
   2e3a8:	b2da      	uxtb	r2, r3
   2e3aa:	2327      	movs	r3, #39	; 0x27
   2e3ac:	18fb      	adds	r3, r7, r3
   2e3ae:	3230      	adds	r2, #48	; 0x30
   2e3b0:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2e3b2:	2327      	movs	r3, #39	; 0x27
   2e3b4:	18fb      	adds	r3, r7, r3
   2e3b6:	781b      	ldrb	r3, [r3, #0]
   2e3b8:	2b39      	cmp	r3, #57	; 0x39
   2e3ba:	d906      	bls.n	2e3ca <gen_numname+0x7a>
   2e3bc:	2327      	movs	r3, #39	; 0x27
   2e3be:	18fb      	adds	r3, r7, r3
   2e3c0:	2227      	movs	r2, #39	; 0x27
   2e3c2:	18ba      	adds	r2, r7, r2
   2e3c4:	7812      	ldrb	r2, [r2, #0]
   2e3c6:	3207      	adds	r2, #7
   2e3c8:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2e3ca:	6a3b      	ldr	r3, [r7, #32]
   2e3cc:	1e5a      	subs	r2, r3, #1
   2e3ce:	623a      	str	r2, [r7, #32]
   2e3d0:	2214      	movs	r2, #20
   2e3d2:	18ba      	adds	r2, r7, r2
   2e3d4:	2127      	movs	r1, #39	; 0x27
   2e3d6:	1879      	adds	r1, r7, r1
   2e3d8:	7809      	ldrb	r1, [r1, #0]
   2e3da:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2e3dc:	1cbb      	adds	r3, r7, #2
   2e3de:	1cba      	adds	r2, r7, #2
   2e3e0:	8812      	ldrh	r2, [r2, #0]
   2e3e2:	0912      	lsrs	r2, r2, #4
   2e3e4:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2e3e6:	1cbb      	adds	r3, r7, #2
   2e3e8:	881b      	ldrh	r3, [r3, #0]
   2e3ea:	2b00      	cmp	r3, #0
   2e3ec:	d1d7      	bne.n	2e39e <gen_numname+0x4e>
	ns[i] = '~';
   2e3ee:	2314      	movs	r3, #20
   2e3f0:	18fa      	adds	r2, r7, r3
   2e3f2:	6a3b      	ldr	r3, [r7, #32]
   2e3f4:	18d3      	adds	r3, r2, r3
   2e3f6:	227e      	movs	r2, #126	; 0x7e
   2e3f8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2e3fa:	2300      	movs	r3, #0
   2e3fc:	61fb      	str	r3, [r7, #28]
   2e3fe:	e002      	b.n	2e406 <gen_numname+0xb6>
   2e400:	69fb      	ldr	r3, [r7, #28]
   2e402:	3301      	adds	r3, #1
   2e404:	61fb      	str	r3, [r7, #28]
   2e406:	69fa      	ldr	r2, [r7, #28]
   2e408:	6a3b      	ldr	r3, [r7, #32]
   2e40a:	429a      	cmp	r2, r3
   2e40c:	d205      	bcs.n	2e41a <gen_numname+0xca>
   2e40e:	68fa      	ldr	r2, [r7, #12]
   2e410:	69fb      	ldr	r3, [r7, #28]
   2e412:	18d3      	adds	r3, r2, r3
   2e414:	781b      	ldrb	r3, [r3, #0]
   2e416:	2b20      	cmp	r3, #32
   2e418:	d1f2      	bne.n	2e400 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2e41a:	69fb      	ldr	r3, [r7, #28]
   2e41c:	1c5a      	adds	r2, r3, #1
   2e41e:	61fa      	str	r2, [r7, #28]
   2e420:	68fa      	ldr	r2, [r7, #12]
   2e422:	18d2      	adds	r2, r2, r3
   2e424:	6a3b      	ldr	r3, [r7, #32]
   2e426:	2b07      	cmp	r3, #7
   2e428:	d806      	bhi.n	2e438 <gen_numname+0xe8>
   2e42a:	6a3b      	ldr	r3, [r7, #32]
   2e42c:	1c59      	adds	r1, r3, #1
   2e42e:	6239      	str	r1, [r7, #32]
   2e430:	2114      	movs	r1, #20
   2e432:	1879      	adds	r1, r7, r1
   2e434:	5ccb      	ldrb	r3, [r1, r3]
   2e436:	e000      	b.n	2e43a <gen_numname+0xea>
   2e438:	2320      	movs	r3, #32
   2e43a:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2e43c:	69fb      	ldr	r3, [r7, #28]
   2e43e:	2b07      	cmp	r3, #7
   2e440:	d9eb      	bls.n	2e41a <gen_numname+0xca>
}
   2e442:	46c0      	nop			; (mov r8, r8)
   2e444:	46bd      	mov	sp, r7
   2e446:	b00a      	add	sp, #40	; 0x28
   2e448:	bd80      	pop	{r7, pc}
   2e44a:	46c0      	nop			; (mov r8, r8)
   2e44c:	0002d4f5 	.word	0x0002d4f5

0002e450 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2e450:	b580      	push	{r7, lr}
   2e452:	b084      	sub	sp, #16
   2e454:	af00      	add	r7, sp, #0
   2e456:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2e458:	230f      	movs	r3, #15
   2e45a:	18fb      	adds	r3, r7, r3
   2e45c:	2200      	movs	r2, #0
   2e45e:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2e460:	230b      	movs	r3, #11
   2e462:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2e464:	230f      	movs	r3, #15
   2e466:	18fb      	adds	r3, r7, r3
   2e468:	781b      	ldrb	r3, [r3, #0]
   2e46a:	b2da      	uxtb	r2, r3
   2e46c:	0852      	lsrs	r2, r2, #1
   2e46e:	01db      	lsls	r3, r3, #7
   2e470:	4313      	orrs	r3, r2
   2e472:	b2d9      	uxtb	r1, r3
   2e474:	687b      	ldr	r3, [r7, #4]
   2e476:	1c5a      	adds	r2, r3, #1
   2e478:	607a      	str	r2, [r7, #4]
   2e47a:	781a      	ldrb	r2, [r3, #0]
   2e47c:	230f      	movs	r3, #15
   2e47e:	18fb      	adds	r3, r7, r3
   2e480:	188a      	adds	r2, r1, r2
   2e482:	701a      	strb	r2, [r3, #0]
   2e484:	68bb      	ldr	r3, [r7, #8]
   2e486:	3b01      	subs	r3, #1
   2e488:	60bb      	str	r3, [r7, #8]
   2e48a:	68bb      	ldr	r3, [r7, #8]
   2e48c:	2b00      	cmp	r3, #0
   2e48e:	d1e9      	bne.n	2e464 <sum_sfn+0x14>
	return sum;
   2e490:	230f      	movs	r3, #15
   2e492:	18fb      	adds	r3, r7, r3
   2e494:	781b      	ldrb	r3, [r3, #0]
}
   2e496:	0018      	movs	r0, r3
   2e498:	46bd      	mov	sp, r7
   2e49a:	b004      	add	sp, #16
   2e49c:	bd80      	pop	{r7, pc}
	...

0002e4a0 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2e4a0:	b590      	push	{r4, r7, lr}
   2e4a2:	b087      	sub	sp, #28
   2e4a4:	af00      	add	r7, sp, #0
   2e4a6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2e4a8:	2317      	movs	r3, #23
   2e4aa:	18fc      	adds	r4, r7, r3
   2e4ac:	687b      	ldr	r3, [r7, #4]
   2e4ae:	2100      	movs	r1, #0
   2e4b0:	0018      	movs	r0, r3
   2e4b2:	4b74      	ldr	r3, [pc, #464]	; (2e684 <dir_find+0x1e4>)
   2e4b4:	4798      	blx	r3
   2e4b6:	0003      	movs	r3, r0
   2e4b8:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2e4ba:	2317      	movs	r3, #23
   2e4bc:	18fb      	adds	r3, r7, r3
   2e4be:	781b      	ldrb	r3, [r3, #0]
   2e4c0:	2b00      	cmp	r3, #0
   2e4c2:	d003      	beq.n	2e4cc <dir_find+0x2c>
   2e4c4:	2317      	movs	r3, #23
   2e4c6:	18fb      	adds	r3, r7, r3
   2e4c8:	781b      	ldrb	r3, [r3, #0]
   2e4ca:	e0d6      	b.n	2e67a <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2e4cc:	2314      	movs	r3, #20
   2e4ce:	18fb      	adds	r3, r7, r3
   2e4d0:	22ff      	movs	r2, #255	; 0xff
   2e4d2:	701a      	strb	r2, [r3, #0]
   2e4d4:	2315      	movs	r3, #21
   2e4d6:	18fb      	adds	r3, r7, r3
   2e4d8:	2214      	movs	r2, #20
   2e4da:	18ba      	adds	r2, r7, r2
   2e4dc:	7812      	ldrb	r2, [r2, #0]
   2e4de:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2e4e0:	687b      	ldr	r3, [r7, #4]
   2e4e2:	681a      	ldr	r2, [r3, #0]
   2e4e4:	687b      	ldr	r3, [r7, #4]
   2e4e6:	691b      	ldr	r3, [r3, #16]
   2e4e8:	2117      	movs	r1, #23
   2e4ea:	187c      	adds	r4, r7, r1
   2e4ec:	0019      	movs	r1, r3
   2e4ee:	0010      	movs	r0, r2
   2e4f0:	4b65      	ldr	r3, [pc, #404]	; (2e688 <dir_find+0x1e8>)
   2e4f2:	4798      	blx	r3
   2e4f4:	0003      	movs	r3, r0
   2e4f6:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2e4f8:	2317      	movs	r3, #23
   2e4fa:	18fb      	adds	r3, r7, r3
   2e4fc:	781b      	ldrb	r3, [r3, #0]
   2e4fe:	2b00      	cmp	r3, #0
   2e500:	d000      	beq.n	2e504 <dir_find+0x64>
   2e502:	e0b2      	b.n	2e66a <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2e504:	687b      	ldr	r3, [r7, #4]
   2e506:	695b      	ldr	r3, [r3, #20]
   2e508:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2e50a:	2316      	movs	r3, #22
   2e50c:	18fb      	adds	r3, r7, r3
   2e50e:	693a      	ldr	r2, [r7, #16]
   2e510:	7812      	ldrb	r2, [r2, #0]
   2e512:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2e514:	2316      	movs	r3, #22
   2e516:	18fb      	adds	r3, r7, r3
   2e518:	781b      	ldrb	r3, [r3, #0]
   2e51a:	2b00      	cmp	r3, #0
   2e51c:	d104      	bne.n	2e528 <dir_find+0x88>
   2e51e:	2317      	movs	r3, #23
   2e520:	18fb      	adds	r3, r7, r3
   2e522:	2204      	movs	r2, #4
   2e524:	701a      	strb	r2, [r3, #0]
   2e526:	e0a5      	b.n	2e674 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2e528:	693b      	ldr	r3, [r7, #16]
   2e52a:	330b      	adds	r3, #11
   2e52c:	781a      	ldrb	r2, [r3, #0]
   2e52e:	230f      	movs	r3, #15
   2e530:	18fb      	adds	r3, r7, r3
   2e532:	213f      	movs	r1, #63	; 0x3f
   2e534:	400a      	ands	r2, r1
   2e536:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2e538:	2316      	movs	r3, #22
   2e53a:	18fb      	adds	r3, r7, r3
   2e53c:	781b      	ldrb	r3, [r3, #0]
   2e53e:	2be5      	cmp	r3, #229	; 0xe5
   2e540:	d00a      	beq.n	2e558 <dir_find+0xb8>
   2e542:	230f      	movs	r3, #15
   2e544:	18fb      	adds	r3, r7, r3
   2e546:	781b      	ldrb	r3, [r3, #0]
   2e548:	2208      	movs	r2, #8
   2e54a:	4013      	ands	r3, r2
   2e54c:	d009      	beq.n	2e562 <dir_find+0xc2>
   2e54e:	230f      	movs	r3, #15
   2e550:	18fb      	adds	r3, r7, r3
   2e552:	781b      	ldrb	r3, [r3, #0]
   2e554:	2b0f      	cmp	r3, #15
   2e556:	d004      	beq.n	2e562 <dir_find+0xc2>
			ord = 0xFF;
   2e558:	2315      	movs	r3, #21
   2e55a:	18fb      	adds	r3, r7, r3
   2e55c:	22ff      	movs	r2, #255	; 0xff
   2e55e:	701a      	strb	r2, [r3, #0]
   2e560:	e073      	b.n	2e64a <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2e562:	230f      	movs	r3, #15
   2e564:	18fb      	adds	r3, r7, r3
   2e566:	781b      	ldrb	r3, [r3, #0]
   2e568:	2b0f      	cmp	r3, #15
   2e56a:	d145      	bne.n	2e5f8 <dir_find+0x158>
				if (dj->lfn) {
   2e56c:	687b      	ldr	r3, [r7, #4]
   2e56e:	69db      	ldr	r3, [r3, #28]
   2e570:	2b00      	cmp	r3, #0
   2e572:	d100      	bne.n	2e576 <dir_find+0xd6>
   2e574:	e069      	b.n	2e64a <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2e576:	2316      	movs	r3, #22
   2e578:	18fb      	adds	r3, r7, r3
   2e57a:	781b      	ldrb	r3, [r3, #0]
   2e57c:	2240      	movs	r2, #64	; 0x40
   2e57e:	4013      	ands	r3, r2
   2e580:	d016      	beq.n	2e5b0 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2e582:	2314      	movs	r3, #20
   2e584:	18fb      	adds	r3, r7, r3
   2e586:	693a      	ldr	r2, [r7, #16]
   2e588:	7b52      	ldrb	r2, [r2, #13]
   2e58a:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2e58c:	2316      	movs	r3, #22
   2e58e:	18fb      	adds	r3, r7, r3
   2e590:	2216      	movs	r2, #22
   2e592:	18ba      	adds	r2, r7, r2
   2e594:	7812      	ldrb	r2, [r2, #0]
   2e596:	2140      	movs	r1, #64	; 0x40
   2e598:	438a      	bics	r2, r1
   2e59a:	701a      	strb	r2, [r3, #0]
   2e59c:	2315      	movs	r3, #21
   2e59e:	18fb      	adds	r3, r7, r3
   2e5a0:	2216      	movs	r2, #22
   2e5a2:	18ba      	adds	r2, r7, r2
   2e5a4:	7812      	ldrb	r2, [r2, #0]
   2e5a6:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2e5a8:	687b      	ldr	r3, [r7, #4]
   2e5aa:	88da      	ldrh	r2, [r3, #6]
   2e5ac:	687b      	ldr	r3, [r7, #4]
   2e5ae:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2e5b0:	2316      	movs	r3, #22
   2e5b2:	18fa      	adds	r2, r7, r3
   2e5b4:	2315      	movs	r3, #21
   2e5b6:	18fb      	adds	r3, r7, r3
   2e5b8:	7812      	ldrb	r2, [r2, #0]
   2e5ba:	781b      	ldrb	r3, [r3, #0]
   2e5bc:	429a      	cmp	r2, r3
   2e5be:	d116      	bne.n	2e5ee <dir_find+0x14e>
   2e5c0:	693b      	ldr	r3, [r7, #16]
   2e5c2:	330d      	adds	r3, #13
   2e5c4:	781b      	ldrb	r3, [r3, #0]
   2e5c6:	2214      	movs	r2, #20
   2e5c8:	18ba      	adds	r2, r7, r2
   2e5ca:	7812      	ldrb	r2, [r2, #0]
   2e5cc:	429a      	cmp	r2, r3
   2e5ce:	d10e      	bne.n	2e5ee <dir_find+0x14e>
   2e5d0:	687b      	ldr	r3, [r7, #4]
   2e5d2:	69db      	ldr	r3, [r3, #28]
   2e5d4:	693a      	ldr	r2, [r7, #16]
   2e5d6:	0011      	movs	r1, r2
   2e5d8:	0018      	movs	r0, r3
   2e5da:	4b2c      	ldr	r3, [pc, #176]	; (2e68c <dir_find+0x1ec>)
   2e5dc:	4798      	blx	r3
   2e5de:	1e03      	subs	r3, r0, #0
   2e5e0:	d005      	beq.n	2e5ee <dir_find+0x14e>
   2e5e2:	2315      	movs	r3, #21
   2e5e4:	18fb      	adds	r3, r7, r3
   2e5e6:	781b      	ldrb	r3, [r3, #0]
   2e5e8:	3b01      	subs	r3, #1
   2e5ea:	b2da      	uxtb	r2, r3
   2e5ec:	e000      	b.n	2e5f0 <dir_find+0x150>
   2e5ee:	22ff      	movs	r2, #255	; 0xff
   2e5f0:	2315      	movs	r3, #21
   2e5f2:	18fb      	adds	r3, r7, r3
   2e5f4:	701a      	strb	r2, [r3, #0]
   2e5f6:	e028      	b.n	2e64a <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2e5f8:	2315      	movs	r3, #21
   2e5fa:	18fb      	adds	r3, r7, r3
   2e5fc:	781b      	ldrb	r3, [r3, #0]
   2e5fe:	2b00      	cmp	r3, #0
   2e600:	d10a      	bne.n	2e618 <dir_find+0x178>
   2e602:	693b      	ldr	r3, [r7, #16]
   2e604:	0018      	movs	r0, r3
   2e606:	4b22      	ldr	r3, [pc, #136]	; (2e690 <dir_find+0x1f0>)
   2e608:	4798      	blx	r3
   2e60a:	0003      	movs	r3, r0
   2e60c:	001a      	movs	r2, r3
   2e60e:	2314      	movs	r3, #20
   2e610:	18fb      	adds	r3, r7, r3
   2e612:	781b      	ldrb	r3, [r3, #0]
   2e614:	4293      	cmp	r3, r2
   2e616:	d02a      	beq.n	2e66e <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2e618:	2315      	movs	r3, #21
   2e61a:	18fb      	adds	r3, r7, r3
   2e61c:	22ff      	movs	r2, #255	; 0xff
   2e61e:	701a      	strb	r2, [r3, #0]
   2e620:	687b      	ldr	r3, [r7, #4]
   2e622:	2201      	movs	r2, #1
   2e624:	4252      	negs	r2, r2
   2e626:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2e628:	687b      	ldr	r3, [r7, #4]
   2e62a:	699b      	ldr	r3, [r3, #24]
   2e62c:	330b      	adds	r3, #11
   2e62e:	781b      	ldrb	r3, [r3, #0]
   2e630:	001a      	movs	r2, r3
   2e632:	2301      	movs	r3, #1
   2e634:	4013      	ands	r3, r2
   2e636:	d108      	bne.n	2e64a <dir_find+0x1aa>
   2e638:	687b      	ldr	r3, [r7, #4]
   2e63a:	6999      	ldr	r1, [r3, #24]
   2e63c:	693b      	ldr	r3, [r7, #16]
   2e63e:	220b      	movs	r2, #11
   2e640:	0018      	movs	r0, r3
   2e642:	4b14      	ldr	r3, [pc, #80]	; (2e694 <dir_find+0x1f4>)
   2e644:	4798      	blx	r3
   2e646:	1e03      	subs	r3, r0, #0
   2e648:	d013      	beq.n	2e672 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2e64a:	2317      	movs	r3, #23
   2e64c:	18fc      	adds	r4, r7, r3
   2e64e:	687b      	ldr	r3, [r7, #4]
   2e650:	2100      	movs	r1, #0
   2e652:	0018      	movs	r0, r3
   2e654:	4b10      	ldr	r3, [pc, #64]	; (2e698 <dir_find+0x1f8>)
   2e656:	4798      	blx	r3
   2e658:	0003      	movs	r3, r0
   2e65a:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2e65c:	2317      	movs	r3, #23
   2e65e:	18fb      	adds	r3, r7, r3
   2e660:	781b      	ldrb	r3, [r3, #0]
   2e662:	2b00      	cmp	r3, #0
   2e664:	d100      	bne.n	2e668 <dir_find+0x1c8>
   2e666:	e73b      	b.n	2e4e0 <dir_find+0x40>
   2e668:	e004      	b.n	2e674 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2e66a:	46c0      	nop			; (mov r8, r8)
   2e66c:	e002      	b.n	2e674 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2e66e:	46c0      	nop			; (mov r8, r8)
   2e670:	e000      	b.n	2e674 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2e672:	46c0      	nop			; (mov r8, r8)

	return res;
   2e674:	2317      	movs	r3, #23
   2e676:	18fb      	adds	r3, r7, r3
   2e678:	781b      	ldrb	r3, [r3, #0]
}
   2e67a:	0018      	movs	r0, r3
   2e67c:	46bd      	mov	sp, r7
   2e67e:	b007      	add	sp, #28
   2e680:	bd90      	pop	{r4, r7, pc}
   2e682:	46c0      	nop			; (mov r8, r8)
   2e684:	0002de1d 	.word	0x0002de1d
   2e688:	0002d5d9 	.word	0x0002d5d9
   2e68c:	0002e13d 	.word	0x0002e13d
   2e690:	0002e451 	.word	0x0002e451
   2e694:	0002d55d 	.word	0x0002d55d
   2e698:	0002df4d 	.word	0x0002df4d

0002e69c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2e69c:	b590      	push	{r4, r7, lr}
   2e69e:	b08d      	sub	sp, #52	; 0x34
   2e6a0:	af00      	add	r7, sp, #0
   2e6a2:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2e6a4:	687b      	ldr	r3, [r7, #4]
   2e6a6:	699b      	ldr	r3, [r3, #24]
   2e6a8:	627b      	str	r3, [r7, #36]	; 0x24
   2e6aa:	687b      	ldr	r3, [r7, #4]
   2e6ac:	69db      	ldr	r3, [r3, #28]
   2e6ae:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2e6b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2e6b2:	230c      	movs	r3, #12
   2e6b4:	18fb      	adds	r3, r7, r3
   2e6b6:	220c      	movs	r2, #12
   2e6b8:	0018      	movs	r0, r3
   2e6ba:	4bc8      	ldr	r3, [pc, #800]	; (2e9dc <dir_register+0x340>)
   2e6bc:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2e6be:	230c      	movs	r3, #12
   2e6c0:	18fb      	adds	r3, r7, r3
   2e6c2:	7adb      	ldrb	r3, [r3, #11]
   2e6c4:	001a      	movs	r2, r3
   2e6c6:	2301      	movs	r3, #1
   2e6c8:	4013      	ands	r3, r2
   2e6ca:	d048      	beq.n	2e75e <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2e6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e6ce:	330b      	adds	r3, #11
   2e6d0:	2200      	movs	r2, #0
   2e6d2:	701a      	strb	r2, [r3, #0]
   2e6d4:	687b      	ldr	r3, [r7, #4]
   2e6d6:	2200      	movs	r2, #0
   2e6d8:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2e6da:	232c      	movs	r3, #44	; 0x2c
   2e6dc:	18fb      	adds	r3, r7, r3
   2e6de:	2201      	movs	r2, #1
   2e6e0:	801a      	strh	r2, [r3, #0]
   2e6e2:	e01c      	b.n	2e71e <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2e6e4:	232c      	movs	r3, #44	; 0x2c
   2e6e6:	18fb      	adds	r3, r7, r3
   2e6e8:	881b      	ldrh	r3, [r3, #0]
   2e6ea:	6a3a      	ldr	r2, [r7, #32]
   2e6ec:	210c      	movs	r1, #12
   2e6ee:	1879      	adds	r1, r7, r1
   2e6f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2e6f2:	4cbb      	ldr	r4, [pc, #748]	; (2e9e0 <dir_register+0x344>)
   2e6f4:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2e6f6:	232f      	movs	r3, #47	; 0x2f
   2e6f8:	18fc      	adds	r4, r7, r3
   2e6fa:	687b      	ldr	r3, [r7, #4]
   2e6fc:	0018      	movs	r0, r3
   2e6fe:	4bb9      	ldr	r3, [pc, #740]	; (2e9e4 <dir_register+0x348>)
   2e700:	4798      	blx	r3
   2e702:	0003      	movs	r3, r0
   2e704:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2e706:	232f      	movs	r3, #47	; 0x2f
   2e708:	18fb      	adds	r3, r7, r3
   2e70a:	781b      	ldrb	r3, [r3, #0]
   2e70c:	2b00      	cmp	r3, #0
   2e70e:	d10c      	bne.n	2e72a <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2e710:	232c      	movs	r3, #44	; 0x2c
   2e712:	18fb      	adds	r3, r7, r3
   2e714:	881a      	ldrh	r2, [r3, #0]
   2e716:	232c      	movs	r3, #44	; 0x2c
   2e718:	18fb      	adds	r3, r7, r3
   2e71a:	3201      	adds	r2, #1
   2e71c:	801a      	strh	r2, [r3, #0]
   2e71e:	232c      	movs	r3, #44	; 0x2c
   2e720:	18fb      	adds	r3, r7, r3
   2e722:	881b      	ldrh	r3, [r3, #0]
   2e724:	2b63      	cmp	r3, #99	; 0x63
   2e726:	d9dd      	bls.n	2e6e4 <dir_register+0x48>
   2e728:	e000      	b.n	2e72c <dir_register+0x90>
			if (res != FR_OK) break;
   2e72a:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2e72c:	232c      	movs	r3, #44	; 0x2c
   2e72e:	18fb      	adds	r3, r7, r3
   2e730:	881b      	ldrh	r3, [r3, #0]
   2e732:	2b64      	cmp	r3, #100	; 0x64
   2e734:	d101      	bne.n	2e73a <dir_register+0x9e>
   2e736:	2307      	movs	r3, #7
   2e738:	e14c      	b.n	2e9d4 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2e73a:	232f      	movs	r3, #47	; 0x2f
   2e73c:	18fb      	adds	r3, r7, r3
   2e73e:	781b      	ldrb	r3, [r3, #0]
   2e740:	2b04      	cmp	r3, #4
   2e742:	d003      	beq.n	2e74c <dir_register+0xb0>
   2e744:	232f      	movs	r3, #47	; 0x2f
   2e746:	18fb      	adds	r3, r7, r3
   2e748:	781b      	ldrb	r3, [r3, #0]
   2e74a:	e143      	b.n	2e9d4 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2e74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e74e:	330b      	adds	r3, #11
   2e750:	220c      	movs	r2, #12
   2e752:	18ba      	adds	r2, r7, r2
   2e754:	7ad2      	ldrb	r2, [r2, #11]
   2e756:	701a      	strb	r2, [r3, #0]
   2e758:	687b      	ldr	r3, [r7, #4]
   2e75a:	6a3a      	ldr	r2, [r7, #32]
   2e75c:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2e75e:	230c      	movs	r3, #12
   2e760:	18fb      	adds	r3, r7, r3
   2e762:	7adb      	ldrb	r3, [r3, #11]
   2e764:	001a      	movs	r2, r3
   2e766:	2302      	movs	r3, #2
   2e768:	4013      	ands	r3, r2
   2e76a:	d023      	beq.n	2e7b4 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2e76c:	232a      	movs	r3, #42	; 0x2a
   2e76e:	18fb      	adds	r3, r7, r3
   2e770:	2200      	movs	r2, #0
   2e772:	801a      	strh	r2, [r3, #0]
   2e774:	e006      	b.n	2e784 <dir_register+0xe8>
   2e776:	232a      	movs	r3, #42	; 0x2a
   2e778:	18fb      	adds	r3, r7, r3
   2e77a:	881a      	ldrh	r2, [r3, #0]
   2e77c:	232a      	movs	r3, #42	; 0x2a
   2e77e:	18fb      	adds	r3, r7, r3
   2e780:	3201      	adds	r2, #1
   2e782:	801a      	strh	r2, [r3, #0]
   2e784:	232a      	movs	r3, #42	; 0x2a
   2e786:	18fb      	adds	r3, r7, r3
   2e788:	881b      	ldrh	r3, [r3, #0]
   2e78a:	005b      	lsls	r3, r3, #1
   2e78c:	6a3a      	ldr	r2, [r7, #32]
   2e78e:	18d3      	adds	r3, r2, r3
   2e790:	881b      	ldrh	r3, [r3, #0]
   2e792:	2b00      	cmp	r3, #0
   2e794:	d1ef      	bne.n	2e776 <dir_register+0xda>
		ne = (ne + 25) / 13;
   2e796:	232a      	movs	r3, #42	; 0x2a
   2e798:	18fb      	adds	r3, r7, r3
   2e79a:	881b      	ldrh	r3, [r3, #0]
   2e79c:	3319      	adds	r3, #25
   2e79e:	001a      	movs	r2, r3
   2e7a0:	4b91      	ldr	r3, [pc, #580]	; (2e9e8 <dir_register+0x34c>)
   2e7a2:	210d      	movs	r1, #13
   2e7a4:	0010      	movs	r0, r2
   2e7a6:	4798      	blx	r3
   2e7a8:	0003      	movs	r3, r0
   2e7aa:	001a      	movs	r2, r3
   2e7ac:	232a      	movs	r3, #42	; 0x2a
   2e7ae:	18fb      	adds	r3, r7, r3
   2e7b0:	801a      	strh	r2, [r3, #0]
   2e7b2:	e003      	b.n	2e7bc <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2e7b4:	232a      	movs	r3, #42	; 0x2a
   2e7b6:	18fb      	adds	r3, r7, r3
   2e7b8:	2201      	movs	r2, #1
   2e7ba:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2e7bc:	232f      	movs	r3, #47	; 0x2f
   2e7be:	18fc      	adds	r4, r7, r3
   2e7c0:	687b      	ldr	r3, [r7, #4]
   2e7c2:	2100      	movs	r1, #0
   2e7c4:	0018      	movs	r0, r3
   2e7c6:	4b89      	ldr	r3, [pc, #548]	; (2e9ec <dir_register+0x350>)
   2e7c8:	4798      	blx	r3
   2e7ca:	0003      	movs	r3, r0
   2e7cc:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2e7ce:	232f      	movs	r3, #47	; 0x2f
   2e7d0:	18fb      	adds	r3, r7, r3
   2e7d2:	781b      	ldrb	r3, [r3, #0]
   2e7d4:	2b00      	cmp	r3, #0
   2e7d6:	d003      	beq.n	2e7e0 <dir_register+0x144>
   2e7d8:	232f      	movs	r3, #47	; 0x2f
   2e7da:	18fb      	adds	r3, r7, r3
   2e7dc:	781b      	ldrb	r3, [r3, #0]
   2e7de:	e0f9      	b.n	2e9d4 <dir_register+0x338>
	n = is = 0;
   2e7e0:	2328      	movs	r3, #40	; 0x28
   2e7e2:	18fb      	adds	r3, r7, r3
   2e7e4:	2200      	movs	r2, #0
   2e7e6:	801a      	strh	r2, [r3, #0]
   2e7e8:	232c      	movs	r3, #44	; 0x2c
   2e7ea:	18fb      	adds	r3, r7, r3
   2e7ec:	2228      	movs	r2, #40	; 0x28
   2e7ee:	18ba      	adds	r2, r7, r2
   2e7f0:	8812      	ldrh	r2, [r2, #0]
   2e7f2:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2e7f4:	687b      	ldr	r3, [r7, #4]
   2e7f6:	681a      	ldr	r2, [r3, #0]
   2e7f8:	687b      	ldr	r3, [r7, #4]
   2e7fa:	691b      	ldr	r3, [r3, #16]
   2e7fc:	212f      	movs	r1, #47	; 0x2f
   2e7fe:	187c      	adds	r4, r7, r1
   2e800:	0019      	movs	r1, r3
   2e802:	0010      	movs	r0, r2
   2e804:	4b7a      	ldr	r3, [pc, #488]	; (2e9f0 <dir_register+0x354>)
   2e806:	4798      	blx	r3
   2e808:	0003      	movs	r3, r0
   2e80a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2e80c:	232f      	movs	r3, #47	; 0x2f
   2e80e:	18fb      	adds	r3, r7, r3
   2e810:	781b      	ldrb	r3, [r3, #0]
   2e812:	2b00      	cmp	r3, #0
   2e814:	d13c      	bne.n	2e890 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2e816:	687b      	ldr	r3, [r7, #4]
   2e818:	695a      	ldr	r2, [r3, #20]
   2e81a:	231f      	movs	r3, #31
   2e81c:	18fb      	adds	r3, r7, r3
   2e81e:	7812      	ldrb	r2, [r2, #0]
   2e820:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2e822:	231f      	movs	r3, #31
   2e824:	18fb      	adds	r3, r7, r3
   2e826:	781b      	ldrb	r3, [r3, #0]
   2e828:	2be5      	cmp	r3, #229	; 0xe5
   2e82a:	d004      	beq.n	2e836 <dir_register+0x19a>
   2e82c:	231f      	movs	r3, #31
   2e82e:	18fb      	adds	r3, r7, r3
   2e830:	781b      	ldrb	r3, [r3, #0]
   2e832:	2b00      	cmp	r3, #0
   2e834:	d119      	bne.n	2e86a <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2e836:	232c      	movs	r3, #44	; 0x2c
   2e838:	18fb      	adds	r3, r7, r3
   2e83a:	881b      	ldrh	r3, [r3, #0]
   2e83c:	2b00      	cmp	r3, #0
   2e83e:	d104      	bne.n	2e84a <dir_register+0x1ae>
   2e840:	2328      	movs	r3, #40	; 0x28
   2e842:	18fb      	adds	r3, r7, r3
   2e844:	687a      	ldr	r2, [r7, #4]
   2e846:	88d2      	ldrh	r2, [r2, #6]
   2e848:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2e84a:	232c      	movs	r3, #44	; 0x2c
   2e84c:	18fb      	adds	r3, r7, r3
   2e84e:	222c      	movs	r2, #44	; 0x2c
   2e850:	18ba      	adds	r2, r7, r2
   2e852:	8812      	ldrh	r2, [r2, #0]
   2e854:	3201      	adds	r2, #1
   2e856:	801a      	strh	r2, [r3, #0]
   2e858:	232c      	movs	r3, #44	; 0x2c
   2e85a:	18fa      	adds	r2, r7, r3
   2e85c:	232a      	movs	r3, #42	; 0x2a
   2e85e:	18fb      	adds	r3, r7, r3
   2e860:	8812      	ldrh	r2, [r2, #0]
   2e862:	881b      	ldrh	r3, [r3, #0]
   2e864:	429a      	cmp	r2, r3
   2e866:	d104      	bne.n	2e872 <dir_register+0x1d6>
   2e868:	e013      	b.n	2e892 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2e86a:	232c      	movs	r3, #44	; 0x2c
   2e86c:	18fb      	adds	r3, r7, r3
   2e86e:	2200      	movs	r2, #0
   2e870:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2e872:	232f      	movs	r3, #47	; 0x2f
   2e874:	18fc      	adds	r4, r7, r3
   2e876:	687b      	ldr	r3, [r7, #4]
   2e878:	2101      	movs	r1, #1
   2e87a:	0018      	movs	r0, r3
   2e87c:	4b5d      	ldr	r3, [pc, #372]	; (2e9f4 <dir_register+0x358>)
   2e87e:	4798      	blx	r3
   2e880:	0003      	movs	r3, r0
   2e882:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2e884:	232f      	movs	r3, #47	; 0x2f
   2e886:	18fb      	adds	r3, r7, r3
   2e888:	781b      	ldrb	r3, [r3, #0]
   2e88a:	2b00      	cmp	r3, #0
   2e88c:	d0b2      	beq.n	2e7f4 <dir_register+0x158>
   2e88e:	e000      	b.n	2e892 <dir_register+0x1f6>
		if (res != FR_OK) break;
   2e890:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2e892:	232f      	movs	r3, #47	; 0x2f
   2e894:	18fb      	adds	r3, r7, r3
   2e896:	781b      	ldrb	r3, [r3, #0]
   2e898:	2b00      	cmp	r3, #0
   2e89a:	d163      	bne.n	2e964 <dir_register+0x2c8>
   2e89c:	232a      	movs	r3, #42	; 0x2a
   2e89e:	18fb      	adds	r3, r7, r3
   2e8a0:	881b      	ldrh	r3, [r3, #0]
   2e8a2:	2b01      	cmp	r3, #1
   2e8a4:	d95e      	bls.n	2e964 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2e8a6:	232f      	movs	r3, #47	; 0x2f
   2e8a8:	18fc      	adds	r4, r7, r3
   2e8aa:	2328      	movs	r3, #40	; 0x28
   2e8ac:	18fb      	adds	r3, r7, r3
   2e8ae:	881a      	ldrh	r2, [r3, #0]
   2e8b0:	687b      	ldr	r3, [r7, #4]
   2e8b2:	0011      	movs	r1, r2
   2e8b4:	0018      	movs	r0, r3
   2e8b6:	4b4d      	ldr	r3, [pc, #308]	; (2e9ec <dir_register+0x350>)
   2e8b8:	4798      	blx	r3
   2e8ba:	0003      	movs	r3, r0
   2e8bc:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2e8be:	232f      	movs	r3, #47	; 0x2f
   2e8c0:	18fb      	adds	r3, r7, r3
   2e8c2:	781b      	ldrb	r3, [r3, #0]
   2e8c4:	2b00      	cmp	r3, #0
   2e8c6:	d14d      	bne.n	2e964 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2e8c8:	687b      	ldr	r3, [r7, #4]
   2e8ca:	699b      	ldr	r3, [r3, #24]
   2e8cc:	221e      	movs	r2, #30
   2e8ce:	18bc      	adds	r4, r7, r2
   2e8d0:	0018      	movs	r0, r3
   2e8d2:	4b49      	ldr	r3, [pc, #292]	; (2e9f8 <dir_register+0x35c>)
   2e8d4:	4798      	blx	r3
   2e8d6:	0003      	movs	r3, r0
   2e8d8:	7023      	strb	r3, [r4, #0]
			ne--;
   2e8da:	232a      	movs	r3, #42	; 0x2a
   2e8dc:	18fb      	adds	r3, r7, r3
   2e8de:	881a      	ldrh	r2, [r3, #0]
   2e8e0:	232a      	movs	r3, #42	; 0x2a
   2e8e2:	18fb      	adds	r3, r7, r3
   2e8e4:	3a01      	subs	r2, #1
   2e8e6:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2e8e8:	687b      	ldr	r3, [r7, #4]
   2e8ea:	681a      	ldr	r2, [r3, #0]
   2e8ec:	687b      	ldr	r3, [r7, #4]
   2e8ee:	691b      	ldr	r3, [r3, #16]
   2e8f0:	212f      	movs	r1, #47	; 0x2f
   2e8f2:	187c      	adds	r4, r7, r1
   2e8f4:	0019      	movs	r1, r3
   2e8f6:	0010      	movs	r0, r2
   2e8f8:	4b3d      	ldr	r3, [pc, #244]	; (2e9f0 <dir_register+0x354>)
   2e8fa:	4798      	blx	r3
   2e8fc:	0003      	movs	r3, r0
   2e8fe:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2e900:	232f      	movs	r3, #47	; 0x2f
   2e902:	18fb      	adds	r3, r7, r3
   2e904:	781b      	ldrb	r3, [r3, #0]
   2e906:	2b00      	cmp	r3, #0
   2e908:	d12b      	bne.n	2e962 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2e90a:	687b      	ldr	r3, [r7, #4]
   2e90c:	69d8      	ldr	r0, [r3, #28]
   2e90e:	687b      	ldr	r3, [r7, #4]
   2e910:	6959      	ldr	r1, [r3, #20]
   2e912:	232a      	movs	r3, #42	; 0x2a
   2e914:	18fb      	adds	r3, r7, r3
   2e916:	881b      	ldrh	r3, [r3, #0]
   2e918:	b2da      	uxtb	r2, r3
   2e91a:	231e      	movs	r3, #30
   2e91c:	18fb      	adds	r3, r7, r3
   2e91e:	781b      	ldrb	r3, [r3, #0]
   2e920:	4c36      	ldr	r4, [pc, #216]	; (2e9fc <dir_register+0x360>)
   2e922:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2e924:	687b      	ldr	r3, [r7, #4]
   2e926:	681b      	ldr	r3, [r3, #0]
   2e928:	2201      	movs	r2, #1
   2e92a:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2e92c:	232f      	movs	r3, #47	; 0x2f
   2e92e:	18fc      	adds	r4, r7, r3
   2e930:	687b      	ldr	r3, [r7, #4]
   2e932:	2100      	movs	r1, #0
   2e934:	0018      	movs	r0, r3
   2e936:	4b2f      	ldr	r3, [pc, #188]	; (2e9f4 <dir_register+0x358>)
   2e938:	4798      	blx	r3
   2e93a:	0003      	movs	r3, r0
   2e93c:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2e93e:	232f      	movs	r3, #47	; 0x2f
   2e940:	18fb      	adds	r3, r7, r3
   2e942:	781b      	ldrb	r3, [r3, #0]
   2e944:	2b00      	cmp	r3, #0
   2e946:	d10d      	bne.n	2e964 <dir_register+0x2c8>
   2e948:	232a      	movs	r3, #42	; 0x2a
   2e94a:	18fb      	adds	r3, r7, r3
   2e94c:	222a      	movs	r2, #42	; 0x2a
   2e94e:	18ba      	adds	r2, r7, r2
   2e950:	8812      	ldrh	r2, [r2, #0]
   2e952:	3a01      	subs	r2, #1
   2e954:	801a      	strh	r2, [r3, #0]
   2e956:	232a      	movs	r3, #42	; 0x2a
   2e958:	18fb      	adds	r3, r7, r3
   2e95a:	881b      	ldrh	r3, [r3, #0]
   2e95c:	2b00      	cmp	r3, #0
   2e95e:	d1c3      	bne.n	2e8e8 <dir_register+0x24c>
   2e960:	e000      	b.n	2e964 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2e962:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2e964:	232f      	movs	r3, #47	; 0x2f
   2e966:	18fb      	adds	r3, r7, r3
   2e968:	781b      	ldrb	r3, [r3, #0]
   2e96a:	2b00      	cmp	r3, #0
   2e96c:	d12f      	bne.n	2e9ce <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2e96e:	687b      	ldr	r3, [r7, #4]
   2e970:	681a      	ldr	r2, [r3, #0]
   2e972:	687b      	ldr	r3, [r7, #4]
   2e974:	691b      	ldr	r3, [r3, #16]
   2e976:	212f      	movs	r1, #47	; 0x2f
   2e978:	187c      	adds	r4, r7, r1
   2e97a:	0019      	movs	r1, r3
   2e97c:	0010      	movs	r0, r2
   2e97e:	4b1c      	ldr	r3, [pc, #112]	; (2e9f0 <dir_register+0x354>)
   2e980:	4798      	blx	r3
   2e982:	0003      	movs	r3, r0
   2e984:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2e986:	232f      	movs	r3, #47	; 0x2f
   2e988:	18fb      	adds	r3, r7, r3
   2e98a:	781b      	ldrb	r3, [r3, #0]
   2e98c:	2b00      	cmp	r3, #0
   2e98e:	d11e      	bne.n	2e9ce <dir_register+0x332>
			dir = dj->dir;
   2e990:	687b      	ldr	r3, [r7, #4]
   2e992:	695b      	ldr	r3, [r3, #20]
   2e994:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2e996:	69bb      	ldr	r3, [r7, #24]
   2e998:	2220      	movs	r2, #32
   2e99a:	2100      	movs	r1, #0
   2e99c:	0018      	movs	r0, r3
   2e99e:	4b18      	ldr	r3, [pc, #96]	; (2ea00 <dir_register+0x364>)
   2e9a0:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2e9a2:	687b      	ldr	r3, [r7, #4]
   2e9a4:	6999      	ldr	r1, [r3, #24]
   2e9a6:	69bb      	ldr	r3, [r7, #24]
   2e9a8:	220b      	movs	r2, #11
   2e9aa:	0018      	movs	r0, r3
   2e9ac:	4b0b      	ldr	r3, [pc, #44]	; (2e9dc <dir_register+0x340>)
   2e9ae:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2e9b0:	69bb      	ldr	r3, [r7, #24]
   2e9b2:	330c      	adds	r3, #12
   2e9b4:	001a      	movs	r2, r3
   2e9b6:	687b      	ldr	r3, [r7, #4]
   2e9b8:	699b      	ldr	r3, [r3, #24]
   2e9ba:	330b      	adds	r3, #11
   2e9bc:	781b      	ldrb	r3, [r3, #0]
   2e9be:	2118      	movs	r1, #24
   2e9c0:	400b      	ands	r3, r1
   2e9c2:	b2db      	uxtb	r3, r3
   2e9c4:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2e9c6:	687b      	ldr	r3, [r7, #4]
   2e9c8:	681b      	ldr	r3, [r3, #0]
   2e9ca:	2201      	movs	r2, #1
   2e9cc:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2e9ce:	232f      	movs	r3, #47	; 0x2f
   2e9d0:	18fb      	adds	r3, r7, r3
   2e9d2:	781b      	ldrb	r3, [r3, #0]
}
   2e9d4:	0018      	movs	r0, r3
   2e9d6:	46bd      	mov	sp, r7
   2e9d8:	b00d      	add	sp, #52	; 0x34
   2e9da:	bd90      	pop	{r4, r7, pc}
   2e9dc:	0002d4f5 	.word	0x0002d4f5
   2e9e0:	0002e351 	.word	0x0002e351
   2e9e4:	0002e4a1 	.word	0x0002e4a1
   2e9e8:	0003486d 	.word	0x0003486d
   2e9ec:	0002de1d 	.word	0x0002de1d
   2e9f0:	0002d5d9 	.word	0x0002d5d9
   2e9f4:	0002df4d 	.word	0x0002df4d
   2e9f8:	0002e451 	.word	0x0002e451
   2e9fc:	0002e241 	.word	0x0002e241
   2ea00:	0002d52d 	.word	0x0002d52d

0002ea04 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2ea04:	b590      	push	{r4, r7, lr}
   2ea06:	b08b      	sub	sp, #44	; 0x2c
   2ea08:	af00      	add	r7, sp, #0
   2ea0a:	6078      	str	r0, [r7, #4]
   2ea0c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2ea0e:	683b      	ldr	r3, [r7, #0]
   2ea10:	681b      	ldr	r3, [r3, #0]
   2ea12:	613b      	str	r3, [r7, #16]
   2ea14:	e002      	b.n	2ea1c <create_name+0x18>
   2ea16:	693b      	ldr	r3, [r7, #16]
   2ea18:	3301      	adds	r3, #1
   2ea1a:	613b      	str	r3, [r7, #16]
   2ea1c:	693b      	ldr	r3, [r7, #16]
   2ea1e:	781b      	ldrb	r3, [r3, #0]
   2ea20:	2b2f      	cmp	r3, #47	; 0x2f
   2ea22:	d0f8      	beq.n	2ea16 <create_name+0x12>
   2ea24:	693b      	ldr	r3, [r7, #16]
   2ea26:	781b      	ldrb	r3, [r3, #0]
   2ea28:	2b5c      	cmp	r3, #92	; 0x5c
   2ea2a:	d0f4      	beq.n	2ea16 <create_name+0x12>
	lfn = dj->lfn;
   2ea2c:	687b      	ldr	r3, [r7, #4]
   2ea2e:	69db      	ldr	r3, [r3, #28]
   2ea30:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2ea32:	2300      	movs	r3, #0
   2ea34:	617b      	str	r3, [r7, #20]
   2ea36:	697b      	ldr	r3, [r7, #20]
   2ea38:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2ea3a:	69bb      	ldr	r3, [r7, #24]
   2ea3c:	1c5a      	adds	r2, r3, #1
   2ea3e:	61ba      	str	r2, [r7, #24]
   2ea40:	693a      	ldr	r2, [r7, #16]
   2ea42:	18d3      	adds	r3, r2, r3
   2ea44:	781a      	ldrb	r2, [r3, #0]
   2ea46:	2324      	movs	r3, #36	; 0x24
   2ea48:	18fb      	adds	r3, r7, r3
   2ea4a:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2ea4c:	2324      	movs	r3, #36	; 0x24
   2ea4e:	18fb      	adds	r3, r7, r3
   2ea50:	881b      	ldrh	r3, [r3, #0]
   2ea52:	2b1f      	cmp	r3, #31
   2ea54:	d944      	bls.n	2eae0 <create_name+0xdc>
   2ea56:	2324      	movs	r3, #36	; 0x24
   2ea58:	18fb      	adds	r3, r7, r3
   2ea5a:	881b      	ldrh	r3, [r3, #0]
   2ea5c:	2b2f      	cmp	r3, #47	; 0x2f
   2ea5e:	d03f      	beq.n	2eae0 <create_name+0xdc>
   2ea60:	2324      	movs	r3, #36	; 0x24
   2ea62:	18fb      	adds	r3, r7, r3
   2ea64:	881b      	ldrh	r3, [r3, #0]
   2ea66:	2b5c      	cmp	r3, #92	; 0x5c
   2ea68:	d03a      	beq.n	2eae0 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2ea6a:	697b      	ldr	r3, [r7, #20]
   2ea6c:	2bfe      	cmp	r3, #254	; 0xfe
   2ea6e:	d901      	bls.n	2ea74 <create_name+0x70>
			return FR_INVALID_NAME;
   2ea70:	2306      	movs	r3, #6
   2ea72:	e1e7      	b.n	2ee44 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2ea74:	2324      	movs	r3, #36	; 0x24
   2ea76:	18fb      	adds	r3, r7, r3
   2ea78:	2224      	movs	r2, #36	; 0x24
   2ea7a:	18ba      	adds	r2, r7, r2
   2ea7c:	8812      	ldrh	r2, [r2, #0]
   2ea7e:	21ff      	movs	r1, #255	; 0xff
   2ea80:	400a      	ands	r2, r1
   2ea82:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2ea84:	2324      	movs	r3, #36	; 0x24
   2ea86:	18fc      	adds	r4, r7, r3
   2ea88:	2324      	movs	r3, #36	; 0x24
   2ea8a:	18fb      	adds	r3, r7, r3
   2ea8c:	881b      	ldrh	r3, [r3, #0]
   2ea8e:	2101      	movs	r1, #1
   2ea90:	0018      	movs	r0, r3
   2ea92:	4bba      	ldr	r3, [pc, #744]	; (2ed7c <create_name+0x378>)
   2ea94:	4798      	blx	r3
   2ea96:	0003      	movs	r3, r0
   2ea98:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2ea9a:	2324      	movs	r3, #36	; 0x24
   2ea9c:	18fb      	adds	r3, r7, r3
   2ea9e:	881b      	ldrh	r3, [r3, #0]
   2eaa0:	2b00      	cmp	r3, #0
   2eaa2:	d101      	bne.n	2eaa8 <create_name+0xa4>
   2eaa4:	2306      	movs	r3, #6
   2eaa6:	e1cd      	b.n	2ee44 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2eaa8:	2324      	movs	r3, #36	; 0x24
   2eaaa:	18fb      	adds	r3, r7, r3
   2eaac:	881b      	ldrh	r3, [r3, #0]
   2eaae:	2b7f      	cmp	r3, #127	; 0x7f
   2eab0:	d80b      	bhi.n	2eaca <create_name+0xc6>
   2eab2:	2324      	movs	r3, #36	; 0x24
   2eab4:	18fb      	adds	r3, r7, r3
   2eab6:	881a      	ldrh	r2, [r3, #0]
   2eab8:	4bb1      	ldr	r3, [pc, #708]	; (2ed80 <create_name+0x37c>)
   2eaba:	0011      	movs	r1, r2
   2eabc:	0018      	movs	r0, r3
   2eabe:	4bb1      	ldr	r3, [pc, #708]	; (2ed84 <create_name+0x380>)
   2eac0:	4798      	blx	r3
   2eac2:	1e03      	subs	r3, r0, #0
   2eac4:	d001      	beq.n	2eaca <create_name+0xc6>
			return FR_INVALID_NAME;
   2eac6:	2306      	movs	r3, #6
   2eac8:	e1bc      	b.n	2ee44 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2eaca:	697b      	ldr	r3, [r7, #20]
   2eacc:	1c5a      	adds	r2, r3, #1
   2eace:	617a      	str	r2, [r7, #20]
   2ead0:	005b      	lsls	r3, r3, #1
   2ead2:	68fa      	ldr	r2, [r7, #12]
   2ead4:	18d3      	adds	r3, r2, r3
   2ead6:	2224      	movs	r2, #36	; 0x24
   2ead8:	18ba      	adds	r2, r7, r2
   2eada:	8812      	ldrh	r2, [r2, #0]
   2eadc:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2eade:	e7ac      	b.n	2ea3a <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2eae0:	693a      	ldr	r2, [r7, #16]
   2eae2:	69bb      	ldr	r3, [r7, #24]
   2eae4:	18d2      	adds	r2, r2, r3
   2eae6:	683b      	ldr	r3, [r7, #0]
   2eae8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2eaea:	2324      	movs	r3, #36	; 0x24
   2eaec:	18fb      	adds	r3, r7, r3
   2eaee:	881b      	ldrh	r3, [r3, #0]
   2eaf0:	2b1f      	cmp	r3, #31
   2eaf2:	d801      	bhi.n	2eaf8 <create_name+0xf4>
   2eaf4:	2204      	movs	r2, #4
   2eaf6:	e000      	b.n	2eafa <create_name+0xf6>
   2eaf8:	2200      	movs	r2, #0
   2eafa:	2326      	movs	r3, #38	; 0x26
   2eafc:	18fb      	adds	r3, r7, r3
   2eafe:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2eb00:	e017      	b.n	2eb32 <create_name+0x12e>
		w = lfn[di-1];
   2eb02:	697b      	ldr	r3, [r7, #20]
   2eb04:	4aa0      	ldr	r2, [pc, #640]	; (2ed88 <create_name+0x384>)
   2eb06:	4694      	mov	ip, r2
   2eb08:	4463      	add	r3, ip
   2eb0a:	005b      	lsls	r3, r3, #1
   2eb0c:	68fa      	ldr	r2, [r7, #12]
   2eb0e:	18d2      	adds	r2, r2, r3
   2eb10:	2324      	movs	r3, #36	; 0x24
   2eb12:	18fb      	adds	r3, r7, r3
   2eb14:	8812      	ldrh	r2, [r2, #0]
   2eb16:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2eb18:	2324      	movs	r3, #36	; 0x24
   2eb1a:	18fb      	adds	r3, r7, r3
   2eb1c:	881b      	ldrh	r3, [r3, #0]
   2eb1e:	2b20      	cmp	r3, #32
   2eb20:	d004      	beq.n	2eb2c <create_name+0x128>
   2eb22:	2324      	movs	r3, #36	; 0x24
   2eb24:	18fb      	adds	r3, r7, r3
   2eb26:	881b      	ldrh	r3, [r3, #0]
   2eb28:	2b2e      	cmp	r3, #46	; 0x2e
   2eb2a:	d106      	bne.n	2eb3a <create_name+0x136>
		di--;
   2eb2c:	697b      	ldr	r3, [r7, #20]
   2eb2e:	3b01      	subs	r3, #1
   2eb30:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2eb32:	697b      	ldr	r3, [r7, #20]
   2eb34:	2b00      	cmp	r3, #0
   2eb36:	d1e4      	bne.n	2eb02 <create_name+0xfe>
   2eb38:	e000      	b.n	2eb3c <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2eb3a:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2eb3c:	697b      	ldr	r3, [r7, #20]
   2eb3e:	2b00      	cmp	r3, #0
   2eb40:	d101      	bne.n	2eb46 <create_name+0x142>
   2eb42:	2306      	movs	r3, #6
   2eb44:	e17e      	b.n	2ee44 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2eb46:	697b      	ldr	r3, [r7, #20]
   2eb48:	005b      	lsls	r3, r3, #1
   2eb4a:	68fa      	ldr	r2, [r7, #12]
   2eb4c:	18d3      	adds	r3, r2, r3
   2eb4e:	2200      	movs	r2, #0
   2eb50:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2eb52:	687b      	ldr	r3, [r7, #4]
   2eb54:	699b      	ldr	r3, [r3, #24]
   2eb56:	220b      	movs	r2, #11
   2eb58:	2120      	movs	r1, #32
   2eb5a:	0018      	movs	r0, r3
   2eb5c:	4b8b      	ldr	r3, [pc, #556]	; (2ed8c <create_name+0x388>)
   2eb5e:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2eb60:	2300      	movs	r3, #0
   2eb62:	61bb      	str	r3, [r7, #24]
   2eb64:	e002      	b.n	2eb6c <create_name+0x168>
   2eb66:	69bb      	ldr	r3, [r7, #24]
   2eb68:	3301      	adds	r3, #1
   2eb6a:	61bb      	str	r3, [r7, #24]
   2eb6c:	69bb      	ldr	r3, [r7, #24]
   2eb6e:	005b      	lsls	r3, r3, #1
   2eb70:	68fa      	ldr	r2, [r7, #12]
   2eb72:	18d3      	adds	r3, r2, r3
   2eb74:	881b      	ldrh	r3, [r3, #0]
   2eb76:	2b20      	cmp	r3, #32
   2eb78:	d0f5      	beq.n	2eb66 <create_name+0x162>
   2eb7a:	69bb      	ldr	r3, [r7, #24]
   2eb7c:	005b      	lsls	r3, r3, #1
   2eb7e:	68fa      	ldr	r2, [r7, #12]
   2eb80:	18d3      	adds	r3, r2, r3
   2eb82:	881b      	ldrh	r3, [r3, #0]
   2eb84:	2b2e      	cmp	r3, #46	; 0x2e
   2eb86:	d0ee      	beq.n	2eb66 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2eb88:	69bb      	ldr	r3, [r7, #24]
   2eb8a:	2b00      	cmp	r3, #0
   2eb8c:	d00b      	beq.n	2eba6 <create_name+0x1a2>
   2eb8e:	2326      	movs	r3, #38	; 0x26
   2eb90:	18fb      	adds	r3, r7, r3
   2eb92:	2226      	movs	r2, #38	; 0x26
   2eb94:	18ba      	adds	r2, r7, r2
   2eb96:	7812      	ldrb	r2, [r2, #0]
   2eb98:	2103      	movs	r1, #3
   2eb9a:	430a      	orrs	r2, r1
   2eb9c:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2eb9e:	e002      	b.n	2eba6 <create_name+0x1a2>
   2eba0:	697b      	ldr	r3, [r7, #20]
   2eba2:	3b01      	subs	r3, #1
   2eba4:	617b      	str	r3, [r7, #20]
   2eba6:	697b      	ldr	r3, [r7, #20]
   2eba8:	2b00      	cmp	r3, #0
   2ebaa:	d009      	beq.n	2ebc0 <create_name+0x1bc>
   2ebac:	697b      	ldr	r3, [r7, #20]
   2ebae:	4a76      	ldr	r2, [pc, #472]	; (2ed88 <create_name+0x384>)
   2ebb0:	4694      	mov	ip, r2
   2ebb2:	4463      	add	r3, ip
   2ebb4:	005b      	lsls	r3, r3, #1
   2ebb6:	68fa      	ldr	r2, [r7, #12]
   2ebb8:	18d3      	adds	r3, r2, r3
   2ebba:	881b      	ldrh	r3, [r3, #0]
   2ebbc:	2b2e      	cmp	r3, #46	; 0x2e
   2ebbe:	d1ef      	bne.n	2eba0 <create_name+0x19c>

	b = i = 0; ni = 8;
   2ebc0:	2300      	movs	r3, #0
   2ebc2:	623b      	str	r3, [r7, #32]
   2ebc4:	2327      	movs	r3, #39	; 0x27
   2ebc6:	18fb      	adds	r3, r7, r3
   2ebc8:	2200      	movs	r2, #0
   2ebca:	701a      	strb	r2, [r3, #0]
   2ebcc:	2308      	movs	r3, #8
   2ebce:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2ebd0:	69bb      	ldr	r3, [r7, #24]
   2ebd2:	1c5a      	adds	r2, r3, #1
   2ebd4:	61ba      	str	r2, [r7, #24]
   2ebd6:	005b      	lsls	r3, r3, #1
   2ebd8:	68fa      	ldr	r2, [r7, #12]
   2ebda:	18d2      	adds	r2, r2, r3
   2ebdc:	2324      	movs	r3, #36	; 0x24
   2ebde:	18fb      	adds	r3, r7, r3
   2ebe0:	8812      	ldrh	r2, [r2, #0]
   2ebe2:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2ebe4:	2324      	movs	r3, #36	; 0x24
   2ebe6:	18fb      	adds	r3, r7, r3
   2ebe8:	881b      	ldrh	r3, [r3, #0]
   2ebea:	2b00      	cmp	r3, #0
   2ebec:	d100      	bne.n	2ebf0 <create_name+0x1ec>
   2ebee:	e0c3      	b.n	2ed78 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2ebf0:	2324      	movs	r3, #36	; 0x24
   2ebf2:	18fb      	adds	r3, r7, r3
   2ebf4:	881b      	ldrh	r3, [r3, #0]
   2ebf6:	2b20      	cmp	r3, #32
   2ebf8:	d008      	beq.n	2ec0c <create_name+0x208>
   2ebfa:	2324      	movs	r3, #36	; 0x24
   2ebfc:	18fb      	adds	r3, r7, r3
   2ebfe:	881b      	ldrh	r3, [r3, #0]
   2ec00:	2b2e      	cmp	r3, #46	; 0x2e
   2ec02:	d10c      	bne.n	2ec1e <create_name+0x21a>
   2ec04:	69ba      	ldr	r2, [r7, #24]
   2ec06:	697b      	ldr	r3, [r7, #20]
   2ec08:	429a      	cmp	r2, r3
   2ec0a:	d008      	beq.n	2ec1e <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2ec0c:	2326      	movs	r3, #38	; 0x26
   2ec0e:	18fb      	adds	r3, r7, r3
   2ec10:	2226      	movs	r2, #38	; 0x26
   2ec12:	18ba      	adds	r2, r7, r2
   2ec14:	7812      	ldrb	r2, [r2, #0]
   2ec16:	2103      	movs	r1, #3
   2ec18:	430a      	orrs	r2, r1
   2ec1a:	701a      	strb	r2, [r3, #0]
   2ec1c:	e0ab      	b.n	2ed76 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2ec1e:	6a3a      	ldr	r2, [r7, #32]
   2ec20:	69fb      	ldr	r3, [r7, #28]
   2ec22:	429a      	cmp	r2, r3
   2ec24:	d203      	bcs.n	2ec2e <create_name+0x22a>
   2ec26:	69ba      	ldr	r2, [r7, #24]
   2ec28:	697b      	ldr	r3, [r7, #20]
   2ec2a:	429a      	cmp	r2, r3
   2ec2c:	d12a      	bne.n	2ec84 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2ec2e:	69fb      	ldr	r3, [r7, #28]
   2ec30:	2b0b      	cmp	r3, #11
   2ec32:	d108      	bne.n	2ec46 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2ec34:	2326      	movs	r3, #38	; 0x26
   2ec36:	18fb      	adds	r3, r7, r3
   2ec38:	2226      	movs	r2, #38	; 0x26
   2ec3a:	18ba      	adds	r2, r7, r2
   2ec3c:	7812      	ldrb	r2, [r2, #0]
   2ec3e:	2103      	movs	r1, #3
   2ec40:	430a      	orrs	r2, r1
   2ec42:	701a      	strb	r2, [r3, #0]
   2ec44:	e0a9      	b.n	2ed9a <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2ec46:	69ba      	ldr	r2, [r7, #24]
   2ec48:	697b      	ldr	r3, [r7, #20]
   2ec4a:	429a      	cmp	r2, r3
   2ec4c:	d007      	beq.n	2ec5e <create_name+0x25a>
   2ec4e:	2326      	movs	r3, #38	; 0x26
   2ec50:	18fb      	adds	r3, r7, r3
   2ec52:	2226      	movs	r2, #38	; 0x26
   2ec54:	18ba      	adds	r2, r7, r2
   2ec56:	7812      	ldrb	r2, [r2, #0]
   2ec58:	2103      	movs	r1, #3
   2ec5a:	430a      	orrs	r2, r1
   2ec5c:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2ec5e:	69ba      	ldr	r2, [r7, #24]
   2ec60:	697b      	ldr	r3, [r7, #20]
   2ec62:	429a      	cmp	r2, r3
   2ec64:	d900      	bls.n	2ec68 <create_name+0x264>
   2ec66:	e097      	b.n	2ed98 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2ec68:	697b      	ldr	r3, [r7, #20]
   2ec6a:	61bb      	str	r3, [r7, #24]
   2ec6c:	2308      	movs	r3, #8
   2ec6e:	623b      	str	r3, [r7, #32]
   2ec70:	230b      	movs	r3, #11
   2ec72:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2ec74:	2327      	movs	r3, #39	; 0x27
   2ec76:	18fb      	adds	r3, r7, r3
   2ec78:	2227      	movs	r2, #39	; 0x27
   2ec7a:	18ba      	adds	r2, r7, r2
   2ec7c:	7812      	ldrb	r2, [r2, #0]
   2ec7e:	0092      	lsls	r2, r2, #2
   2ec80:	701a      	strb	r2, [r3, #0]
   2ec82:	e078      	b.n	2ed76 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2ec84:	2324      	movs	r3, #36	; 0x24
   2ec86:	18fb      	adds	r3, r7, r3
   2ec88:	881b      	ldrh	r3, [r3, #0]
   2ec8a:	2b7f      	cmp	r3, #127	; 0x7f
   2ec8c:	d920      	bls.n	2ecd0 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2ec8e:	2324      	movs	r3, #36	; 0x24
   2ec90:	18fc      	adds	r4, r7, r3
   2ec92:	2324      	movs	r3, #36	; 0x24
   2ec94:	18fb      	adds	r3, r7, r3
   2ec96:	881b      	ldrh	r3, [r3, #0]
   2ec98:	2100      	movs	r1, #0
   2ec9a:	0018      	movs	r0, r3
   2ec9c:	4b37      	ldr	r3, [pc, #220]	; (2ed7c <create_name+0x378>)
   2ec9e:	4798      	blx	r3
   2eca0:	0003      	movs	r3, r0
   2eca2:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2eca4:	2324      	movs	r3, #36	; 0x24
   2eca6:	18fb      	adds	r3, r7, r3
   2eca8:	881b      	ldrh	r3, [r3, #0]
   2ecaa:	2b00      	cmp	r3, #0
   2ecac:	d008      	beq.n	2ecc0 <create_name+0x2bc>
   2ecae:	2324      	movs	r3, #36	; 0x24
   2ecb0:	18fb      	adds	r3, r7, r3
   2ecb2:	881b      	ldrh	r3, [r3, #0]
   2ecb4:	3b80      	subs	r3, #128	; 0x80
   2ecb6:	4a36      	ldr	r2, [pc, #216]	; (2ed90 <create_name+0x38c>)
   2ecb8:	5cd2      	ldrb	r2, [r2, r3]
   2ecba:	2324      	movs	r3, #36	; 0x24
   2ecbc:	18fb      	adds	r3, r7, r3
   2ecbe:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2ecc0:	2326      	movs	r3, #38	; 0x26
   2ecc2:	18fb      	adds	r3, r7, r3
   2ecc4:	2226      	movs	r2, #38	; 0x26
   2ecc6:	18ba      	adds	r2, r7, r2
   2ecc8:	7812      	ldrb	r2, [r2, #0]
   2ecca:	2102      	movs	r1, #2
   2eccc:	430a      	orrs	r2, r1
   2ecce:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2ecd0:	2324      	movs	r3, #36	; 0x24
   2ecd2:	18fb      	adds	r3, r7, r3
   2ecd4:	881b      	ldrh	r3, [r3, #0]
   2ecd6:	2b00      	cmp	r3, #0
   2ecd8:	d009      	beq.n	2ecee <create_name+0x2ea>
   2ecda:	2324      	movs	r3, #36	; 0x24
   2ecdc:	18fb      	adds	r3, r7, r3
   2ecde:	881a      	ldrh	r2, [r3, #0]
   2ece0:	4b2c      	ldr	r3, [pc, #176]	; (2ed94 <create_name+0x390>)
   2ece2:	0011      	movs	r1, r2
   2ece4:	0018      	movs	r0, r3
   2ece6:	4b27      	ldr	r3, [pc, #156]	; (2ed84 <create_name+0x380>)
   2ece8:	4798      	blx	r3
   2ecea:	1e03      	subs	r3, r0, #0
   2ecec:	d00c      	beq.n	2ed08 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2ecee:	2324      	movs	r3, #36	; 0x24
   2ecf0:	18fb      	adds	r3, r7, r3
   2ecf2:	225f      	movs	r2, #95	; 0x5f
   2ecf4:	801a      	strh	r2, [r3, #0]
   2ecf6:	2326      	movs	r3, #38	; 0x26
   2ecf8:	18fb      	adds	r3, r7, r3
   2ecfa:	2226      	movs	r2, #38	; 0x26
   2ecfc:	18ba      	adds	r2, r7, r2
   2ecfe:	7812      	ldrb	r2, [r2, #0]
   2ed00:	2103      	movs	r1, #3
   2ed02:	430a      	orrs	r2, r1
   2ed04:	701a      	strb	r2, [r3, #0]
   2ed06:	e02b      	b.n	2ed60 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2ed08:	2324      	movs	r3, #36	; 0x24
   2ed0a:	18fb      	adds	r3, r7, r3
   2ed0c:	881b      	ldrh	r3, [r3, #0]
   2ed0e:	2b40      	cmp	r3, #64	; 0x40
   2ed10:	d90d      	bls.n	2ed2e <create_name+0x32a>
   2ed12:	2324      	movs	r3, #36	; 0x24
   2ed14:	18fb      	adds	r3, r7, r3
   2ed16:	881b      	ldrh	r3, [r3, #0]
   2ed18:	2b5a      	cmp	r3, #90	; 0x5a
   2ed1a:	d808      	bhi.n	2ed2e <create_name+0x32a>
					b |= 2;
   2ed1c:	2327      	movs	r3, #39	; 0x27
   2ed1e:	18fb      	adds	r3, r7, r3
   2ed20:	2227      	movs	r2, #39	; 0x27
   2ed22:	18ba      	adds	r2, r7, r2
   2ed24:	7812      	ldrb	r2, [r2, #0]
   2ed26:	2102      	movs	r1, #2
   2ed28:	430a      	orrs	r2, r1
   2ed2a:	701a      	strb	r2, [r3, #0]
   2ed2c:	e018      	b.n	2ed60 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2ed2e:	2324      	movs	r3, #36	; 0x24
   2ed30:	18fb      	adds	r3, r7, r3
   2ed32:	881b      	ldrh	r3, [r3, #0]
   2ed34:	2b60      	cmp	r3, #96	; 0x60
   2ed36:	d913      	bls.n	2ed60 <create_name+0x35c>
   2ed38:	2324      	movs	r3, #36	; 0x24
   2ed3a:	18fb      	adds	r3, r7, r3
   2ed3c:	881b      	ldrh	r3, [r3, #0]
   2ed3e:	2b7a      	cmp	r3, #122	; 0x7a
   2ed40:	d80e      	bhi.n	2ed60 <create_name+0x35c>
						b |= 1; w -= 0x20;
   2ed42:	2327      	movs	r3, #39	; 0x27
   2ed44:	18fb      	adds	r3, r7, r3
   2ed46:	2227      	movs	r2, #39	; 0x27
   2ed48:	18ba      	adds	r2, r7, r2
   2ed4a:	7812      	ldrb	r2, [r2, #0]
   2ed4c:	2101      	movs	r1, #1
   2ed4e:	430a      	orrs	r2, r1
   2ed50:	701a      	strb	r2, [r3, #0]
   2ed52:	2324      	movs	r3, #36	; 0x24
   2ed54:	18fb      	adds	r3, r7, r3
   2ed56:	2224      	movs	r2, #36	; 0x24
   2ed58:	18ba      	adds	r2, r7, r2
   2ed5a:	8812      	ldrh	r2, [r2, #0]
   2ed5c:	3a20      	subs	r2, #32
   2ed5e:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2ed60:	687b      	ldr	r3, [r7, #4]
   2ed62:	699a      	ldr	r2, [r3, #24]
   2ed64:	6a3b      	ldr	r3, [r7, #32]
   2ed66:	1c59      	adds	r1, r3, #1
   2ed68:	6239      	str	r1, [r7, #32]
   2ed6a:	18d3      	adds	r3, r2, r3
   2ed6c:	2224      	movs	r2, #36	; 0x24
   2ed6e:	18ba      	adds	r2, r7, r2
   2ed70:	8812      	ldrh	r2, [r2, #0]
   2ed72:	b2d2      	uxtb	r2, r2
   2ed74:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2ed76:	e72b      	b.n	2ebd0 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2ed78:	46c0      	nop			; (mov r8, r8)
   2ed7a:	e00e      	b.n	2ed9a <create_name+0x396>
   2ed7c:	000300e5 	.word	0x000300e5
   2ed80:	0003bb38 	.word	0x0003bb38
   2ed84:	0002d5a7 	.word	0x0002d5a7
   2ed88:	7fffffff 	.word	0x7fffffff
   2ed8c:	0002d52d 	.word	0x0002d52d
   2ed90:	0003bb80 	.word	0x0003bb80
   2ed94:	0003bb44 	.word	0x0003bb44
			if (si > di) break;			/* No extension */
   2ed98:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2ed9a:	687b      	ldr	r3, [r7, #4]
   2ed9c:	699b      	ldr	r3, [r3, #24]
   2ed9e:	781b      	ldrb	r3, [r3, #0]
   2eda0:	2be5      	cmp	r3, #229	; 0xe5
   2eda2:	d103      	bne.n	2edac <create_name+0x3a8>
   2eda4:	687b      	ldr	r3, [r7, #4]
   2eda6:	699b      	ldr	r3, [r3, #24]
   2eda8:	2205      	movs	r2, #5
   2edaa:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2edac:	69fb      	ldr	r3, [r7, #28]
   2edae:	2b08      	cmp	r3, #8
   2edb0:	d106      	bne.n	2edc0 <create_name+0x3bc>
   2edb2:	2327      	movs	r3, #39	; 0x27
   2edb4:	18fb      	adds	r3, r7, r3
   2edb6:	2227      	movs	r2, #39	; 0x27
   2edb8:	18ba      	adds	r2, r7, r2
   2edba:	7812      	ldrb	r2, [r2, #0]
   2edbc:	0092      	lsls	r2, r2, #2
   2edbe:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2edc0:	2327      	movs	r3, #39	; 0x27
   2edc2:	18fb      	adds	r3, r7, r3
   2edc4:	781b      	ldrb	r3, [r3, #0]
   2edc6:	220c      	movs	r2, #12
   2edc8:	4013      	ands	r3, r2
   2edca:	2b0c      	cmp	r3, #12
   2edcc:	d006      	beq.n	2eddc <create_name+0x3d8>
   2edce:	2327      	movs	r3, #39	; 0x27
   2edd0:	18fb      	adds	r3, r7, r3
   2edd2:	781b      	ldrb	r3, [r3, #0]
   2edd4:	2203      	movs	r2, #3
   2edd6:	4013      	ands	r3, r2
   2edd8:	2b03      	cmp	r3, #3
   2edda:	d107      	bne.n	2edec <create_name+0x3e8>
		cf |= NS_LFN;
   2eddc:	2326      	movs	r3, #38	; 0x26
   2edde:	18fb      	adds	r3, r7, r3
   2ede0:	2226      	movs	r2, #38	; 0x26
   2ede2:	18ba      	adds	r2, r7, r2
   2ede4:	7812      	ldrb	r2, [r2, #0]
   2ede6:	2102      	movs	r1, #2
   2ede8:	430a      	orrs	r2, r1
   2edea:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2edec:	2326      	movs	r3, #38	; 0x26
   2edee:	18fb      	adds	r3, r7, r3
   2edf0:	781b      	ldrb	r3, [r3, #0]
   2edf2:	2202      	movs	r2, #2
   2edf4:	4013      	ands	r3, r2
   2edf6:	d11d      	bne.n	2ee34 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2edf8:	2327      	movs	r3, #39	; 0x27
   2edfa:	18fb      	adds	r3, r7, r3
   2edfc:	781b      	ldrb	r3, [r3, #0]
   2edfe:	2203      	movs	r2, #3
   2ee00:	4013      	ands	r3, r2
   2ee02:	2b01      	cmp	r3, #1
   2ee04:	d107      	bne.n	2ee16 <create_name+0x412>
   2ee06:	2326      	movs	r3, #38	; 0x26
   2ee08:	18fb      	adds	r3, r7, r3
   2ee0a:	2226      	movs	r2, #38	; 0x26
   2ee0c:	18ba      	adds	r2, r7, r2
   2ee0e:	7812      	ldrb	r2, [r2, #0]
   2ee10:	2110      	movs	r1, #16
   2ee12:	430a      	orrs	r2, r1
   2ee14:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2ee16:	2327      	movs	r3, #39	; 0x27
   2ee18:	18fb      	adds	r3, r7, r3
   2ee1a:	781b      	ldrb	r3, [r3, #0]
   2ee1c:	220c      	movs	r2, #12
   2ee1e:	4013      	ands	r3, r2
   2ee20:	2b04      	cmp	r3, #4
   2ee22:	d107      	bne.n	2ee34 <create_name+0x430>
   2ee24:	2326      	movs	r3, #38	; 0x26
   2ee26:	18fb      	adds	r3, r7, r3
   2ee28:	2226      	movs	r2, #38	; 0x26
   2ee2a:	18ba      	adds	r2, r7, r2
   2ee2c:	7812      	ldrb	r2, [r2, #0]
   2ee2e:	2108      	movs	r1, #8
   2ee30:	430a      	orrs	r2, r1
   2ee32:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2ee34:	687b      	ldr	r3, [r7, #4]
   2ee36:	699b      	ldr	r3, [r3, #24]
   2ee38:	330b      	adds	r3, #11
   2ee3a:	2226      	movs	r2, #38	; 0x26
   2ee3c:	18ba      	adds	r2, r7, r2
   2ee3e:	7812      	ldrb	r2, [r2, #0]
   2ee40:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2ee42:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2ee44:	0018      	movs	r0, r3
   2ee46:	46bd      	mov	sp, r7
   2ee48:	b00b      	add	sp, #44	; 0x2c
   2ee4a:	bd90      	pop	{r4, r7, pc}

0002ee4c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2ee4c:	b590      	push	{r4, r7, lr}
   2ee4e:	b085      	sub	sp, #20
   2ee50:	af00      	add	r7, sp, #0
   2ee52:	6078      	str	r0, [r7, #4]
   2ee54:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2ee56:	683b      	ldr	r3, [r7, #0]
   2ee58:	781b      	ldrb	r3, [r3, #0]
   2ee5a:	2b2f      	cmp	r3, #47	; 0x2f
   2ee5c:	d003      	beq.n	2ee66 <follow_path+0x1a>
   2ee5e:	683b      	ldr	r3, [r7, #0]
   2ee60:	781b      	ldrb	r3, [r3, #0]
   2ee62:	2b5c      	cmp	r3, #92	; 0x5c
   2ee64:	d102      	bne.n	2ee6c <follow_path+0x20>
		path++;
   2ee66:	683b      	ldr	r3, [r7, #0]
   2ee68:	3301      	adds	r3, #1
   2ee6a:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2ee6c:	687b      	ldr	r3, [r7, #4]
   2ee6e:	2200      	movs	r2, #0
   2ee70:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2ee72:	683b      	ldr	r3, [r7, #0]
   2ee74:	781b      	ldrb	r3, [r3, #0]
   2ee76:	2b1f      	cmp	r3, #31
   2ee78:	d80c      	bhi.n	2ee94 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2ee7a:	230f      	movs	r3, #15
   2ee7c:	18fc      	adds	r4, r7, r3
   2ee7e:	687b      	ldr	r3, [r7, #4]
   2ee80:	2100      	movs	r1, #0
   2ee82:	0018      	movs	r0, r3
   2ee84:	4b3c      	ldr	r3, [pc, #240]	; (2ef78 <follow_path+0x12c>)
   2ee86:	4798      	blx	r3
   2ee88:	0003      	movs	r3, r0
   2ee8a:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2ee8c:	687b      	ldr	r3, [r7, #4]
   2ee8e:	2200      	movs	r2, #0
   2ee90:	615a      	str	r2, [r3, #20]
   2ee92:	e06a      	b.n	2ef6a <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2ee94:	230f      	movs	r3, #15
   2ee96:	18fc      	adds	r4, r7, r3
   2ee98:	003a      	movs	r2, r7
   2ee9a:	687b      	ldr	r3, [r7, #4]
   2ee9c:	0011      	movs	r1, r2
   2ee9e:	0018      	movs	r0, r3
   2eea0:	4b36      	ldr	r3, [pc, #216]	; (2ef7c <follow_path+0x130>)
   2eea2:	4798      	blx	r3
   2eea4:	0003      	movs	r3, r0
   2eea6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2eea8:	230f      	movs	r3, #15
   2eeaa:	18fb      	adds	r3, r7, r3
   2eeac:	781b      	ldrb	r3, [r3, #0]
   2eeae:	2b00      	cmp	r3, #0
   2eeb0:	d154      	bne.n	2ef5c <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2eeb2:	230f      	movs	r3, #15
   2eeb4:	18fc      	adds	r4, r7, r3
   2eeb6:	687b      	ldr	r3, [r7, #4]
   2eeb8:	0018      	movs	r0, r3
   2eeba:	4b31      	ldr	r3, [pc, #196]	; (2ef80 <follow_path+0x134>)
   2eebc:	4798      	blx	r3
   2eebe:	0003      	movs	r3, r0
   2eec0:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2eec2:	687b      	ldr	r3, [r7, #4]
   2eec4:	699a      	ldr	r2, [r3, #24]
   2eec6:	230e      	movs	r3, #14
   2eec8:	18fb      	adds	r3, r7, r3
   2eeca:	7ad2      	ldrb	r2, [r2, #11]
   2eecc:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2eece:	230f      	movs	r3, #15
   2eed0:	18fb      	adds	r3, r7, r3
   2eed2:	781b      	ldrb	r3, [r3, #0]
   2eed4:	2b00      	cmp	r3, #0
   2eed6:	d00f      	beq.n	2eef8 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2eed8:	230f      	movs	r3, #15
   2eeda:	18fb      	adds	r3, r7, r3
   2eedc:	781b      	ldrb	r3, [r3, #0]
   2eede:	2b04      	cmp	r3, #4
   2eee0:	d13e      	bne.n	2ef60 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2eee2:	230e      	movs	r3, #14
   2eee4:	18fb      	adds	r3, r7, r3
   2eee6:	781b      	ldrb	r3, [r3, #0]
   2eee8:	2204      	movs	r2, #4
   2eeea:	4013      	ands	r3, r2
   2eeec:	d13a      	bne.n	2ef64 <follow_path+0x118>
   2eeee:	230f      	movs	r3, #15
   2eef0:	18fb      	adds	r3, r7, r3
   2eef2:	2205      	movs	r2, #5
   2eef4:	701a      	strb	r2, [r3, #0]
				}
				break;
   2eef6:	e035      	b.n	2ef64 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2eef8:	230e      	movs	r3, #14
   2eefa:	18fb      	adds	r3, r7, r3
   2eefc:	781b      	ldrb	r3, [r3, #0]
   2eefe:	2204      	movs	r2, #4
   2ef00:	4013      	ands	r3, r2
   2ef02:	d131      	bne.n	2ef68 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2ef04:	687b      	ldr	r3, [r7, #4]
   2ef06:	695b      	ldr	r3, [r3, #20]
   2ef08:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2ef0a:	68bb      	ldr	r3, [r7, #8]
   2ef0c:	330b      	adds	r3, #11
   2ef0e:	781b      	ldrb	r3, [r3, #0]
   2ef10:	001a      	movs	r2, r3
   2ef12:	2310      	movs	r3, #16
   2ef14:	4013      	ands	r3, r2
   2ef16:	d104      	bne.n	2ef22 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2ef18:	230f      	movs	r3, #15
   2ef1a:	18fb      	adds	r3, r7, r3
   2ef1c:	2205      	movs	r2, #5
   2ef1e:	701a      	strb	r2, [r3, #0]
   2ef20:	e023      	b.n	2ef6a <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2ef22:	68bb      	ldr	r3, [r7, #8]
   2ef24:	3315      	adds	r3, #21
   2ef26:	781b      	ldrb	r3, [r3, #0]
   2ef28:	021b      	lsls	r3, r3, #8
   2ef2a:	b21a      	sxth	r2, r3
   2ef2c:	68bb      	ldr	r3, [r7, #8]
   2ef2e:	3314      	adds	r3, #20
   2ef30:	781b      	ldrb	r3, [r3, #0]
   2ef32:	b21b      	sxth	r3, r3
   2ef34:	4313      	orrs	r3, r2
   2ef36:	b21b      	sxth	r3, r3
   2ef38:	b29b      	uxth	r3, r3
   2ef3a:	041b      	lsls	r3, r3, #16
   2ef3c:	68ba      	ldr	r2, [r7, #8]
   2ef3e:	321b      	adds	r2, #27
   2ef40:	7812      	ldrb	r2, [r2, #0]
   2ef42:	0212      	lsls	r2, r2, #8
   2ef44:	b211      	sxth	r1, r2
   2ef46:	68ba      	ldr	r2, [r7, #8]
   2ef48:	321a      	adds	r2, #26
   2ef4a:	7812      	ldrb	r2, [r2, #0]
   2ef4c:	b212      	sxth	r2, r2
   2ef4e:	430a      	orrs	r2, r1
   2ef50:	b212      	sxth	r2, r2
   2ef52:	b292      	uxth	r2, r2
   2ef54:	431a      	orrs	r2, r3
   2ef56:	687b      	ldr	r3, [r7, #4]
   2ef58:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2ef5a:	e79b      	b.n	2ee94 <follow_path+0x48>
			if (res != FR_OK) break;
   2ef5c:	46c0      	nop			; (mov r8, r8)
   2ef5e:	e004      	b.n	2ef6a <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2ef60:	46c0      	nop			; (mov r8, r8)
   2ef62:	e002      	b.n	2ef6a <follow_path+0x11e>
				break;
   2ef64:	46c0      	nop			; (mov r8, r8)
   2ef66:	e000      	b.n	2ef6a <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2ef68:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2ef6a:	230f      	movs	r3, #15
   2ef6c:	18fb      	adds	r3, r7, r3
   2ef6e:	781b      	ldrb	r3, [r3, #0]
}
   2ef70:	0018      	movs	r0, r3
   2ef72:	46bd      	mov	sp, r7
   2ef74:	b005      	add	sp, #20
   2ef76:	bd90      	pop	{r4, r7, pc}
   2ef78:	0002de1d 	.word	0x0002de1d
   2ef7c:	0002ea05 	.word	0x0002ea05
   2ef80:	0002e4a1 	.word	0x0002e4a1

0002ef84 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2ef84:	b590      	push	{r4, r7, lr}
   2ef86:	b083      	sub	sp, #12
   2ef88:	af00      	add	r7, sp, #0
   2ef8a:	6078      	str	r0, [r7, #4]
   2ef8c:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2ef8e:	687b      	ldr	r3, [r7, #4]
   2ef90:	7858      	ldrb	r0, [r3, #1]
   2ef92:	687b      	ldr	r3, [r7, #4]
   2ef94:	3330      	adds	r3, #48	; 0x30
   2ef96:	0019      	movs	r1, r3
   2ef98:	683a      	ldr	r2, [r7, #0]
   2ef9a:	2301      	movs	r3, #1
   2ef9c:	4c2a      	ldr	r4, [pc, #168]	; (2f048 <check_fs+0xc4>)
   2ef9e:	47a0      	blx	r4
   2efa0:	1e03      	subs	r3, r0, #0
   2efa2:	d001      	beq.n	2efa8 <check_fs+0x24>
		return 3;
   2efa4:	2303      	movs	r3, #3
   2efa6:	e04b      	b.n	2f040 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2efa8:	687b      	ldr	r3, [r7, #4]
   2efaa:	4a28      	ldr	r2, [pc, #160]	; (2f04c <check_fs+0xc8>)
   2efac:	4694      	mov	ip, r2
   2efae:	4463      	add	r3, ip
   2efb0:	3301      	adds	r3, #1
   2efb2:	781b      	ldrb	r3, [r3, #0]
   2efb4:	021b      	lsls	r3, r3, #8
   2efb6:	b21a      	sxth	r2, r3
   2efb8:	687b      	ldr	r3, [r7, #4]
   2efba:	4924      	ldr	r1, [pc, #144]	; (2f04c <check_fs+0xc8>)
   2efbc:	5c5b      	ldrb	r3, [r3, r1]
   2efbe:	b21b      	sxth	r3, r3
   2efc0:	4313      	orrs	r3, r2
   2efc2:	b21b      	sxth	r3, r3
   2efc4:	4a22      	ldr	r2, [pc, #136]	; (2f050 <check_fs+0xcc>)
   2efc6:	4293      	cmp	r3, r2
   2efc8:	d001      	beq.n	2efce <check_fs+0x4a>
		return 2;
   2efca:	2302      	movs	r3, #2
   2efcc:	e038      	b.n	2f040 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2efce:	687b      	ldr	r3, [r7, #4]
   2efd0:	3366      	adds	r3, #102	; 0x66
   2efd2:	3303      	adds	r3, #3
   2efd4:	781b      	ldrb	r3, [r3, #0]
   2efd6:	061a      	lsls	r2, r3, #24
   2efd8:	687b      	ldr	r3, [r7, #4]
   2efda:	3366      	adds	r3, #102	; 0x66
   2efdc:	3302      	adds	r3, #2
   2efde:	781b      	ldrb	r3, [r3, #0]
   2efe0:	041b      	lsls	r3, r3, #16
   2efe2:	4313      	orrs	r3, r2
   2efe4:	687a      	ldr	r2, [r7, #4]
   2efe6:	3266      	adds	r2, #102	; 0x66
   2efe8:	3201      	adds	r2, #1
   2efea:	7812      	ldrb	r2, [r2, #0]
   2efec:	0212      	lsls	r2, r2, #8
   2efee:	4313      	orrs	r3, r2
   2eff0:	687a      	ldr	r2, [r7, #4]
   2eff2:	2166      	movs	r1, #102	; 0x66
   2eff4:	5c52      	ldrb	r2, [r2, r1]
   2eff6:	4313      	orrs	r3, r2
   2eff8:	021b      	lsls	r3, r3, #8
   2effa:	0a1b      	lsrs	r3, r3, #8
   2effc:	4a15      	ldr	r2, [pc, #84]	; (2f054 <check_fs+0xd0>)
   2effe:	4293      	cmp	r3, r2
   2f000:	d101      	bne.n	2f006 <check_fs+0x82>
		return 0;
   2f002:	2300      	movs	r3, #0
   2f004:	e01c      	b.n	2f040 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2f006:	687b      	ldr	r3, [r7, #4]
   2f008:	3382      	adds	r3, #130	; 0x82
   2f00a:	3303      	adds	r3, #3
   2f00c:	781b      	ldrb	r3, [r3, #0]
   2f00e:	061a      	lsls	r2, r3, #24
   2f010:	687b      	ldr	r3, [r7, #4]
   2f012:	3382      	adds	r3, #130	; 0x82
   2f014:	3302      	adds	r3, #2
   2f016:	781b      	ldrb	r3, [r3, #0]
   2f018:	041b      	lsls	r3, r3, #16
   2f01a:	4313      	orrs	r3, r2
   2f01c:	687a      	ldr	r2, [r7, #4]
   2f01e:	3282      	adds	r2, #130	; 0x82
   2f020:	3201      	adds	r2, #1
   2f022:	7812      	ldrb	r2, [r2, #0]
   2f024:	0212      	lsls	r2, r2, #8
   2f026:	4313      	orrs	r3, r2
   2f028:	687a      	ldr	r2, [r7, #4]
   2f02a:	2182      	movs	r1, #130	; 0x82
   2f02c:	5c52      	ldrb	r2, [r2, r1]
   2f02e:	4313      	orrs	r3, r2
   2f030:	021b      	lsls	r3, r3, #8
   2f032:	0a1b      	lsrs	r3, r3, #8
   2f034:	4a07      	ldr	r2, [pc, #28]	; (2f054 <check_fs+0xd0>)
   2f036:	4293      	cmp	r3, r2
   2f038:	d101      	bne.n	2f03e <check_fs+0xba>
		return 0;
   2f03a:	2300      	movs	r3, #0
   2f03c:	e000      	b.n	2f040 <check_fs+0xbc>

	return 1;
   2f03e:	2301      	movs	r3, #1
}
   2f040:	0018      	movs	r0, r3
   2f042:	46bd      	mov	sp, r7
   2f044:	b003      	add	sp, #12
   2f046:	bd90      	pop	{r4, r7, pc}
   2f048:	0002d1ed 	.word	0x0002d1ed
   2f04c:	0000022e 	.word	0x0000022e
   2f050:	ffffaa55 	.word	0xffffaa55
   2f054:	00544146 	.word	0x00544146

0002f058 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2f058:	b590      	push	{r4, r7, lr}
   2f05a:	b093      	sub	sp, #76	; 0x4c
   2f05c:	af00      	add	r7, sp, #0
   2f05e:	60f8      	str	r0, [r7, #12]
   2f060:	60b9      	str	r1, [r7, #8]
   2f062:	1dfb      	adds	r3, r7, #7
   2f064:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2f066:	68fb      	ldr	r3, [r7, #12]
   2f068:	681b      	ldr	r3, [r3, #0]
   2f06a:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2f06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2f06e:	781b      	ldrb	r3, [r3, #0]
   2f070:	3b30      	subs	r3, #48	; 0x30
   2f072:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2f074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f076:	2b09      	cmp	r3, #9
   2f078:	d80b      	bhi.n	2f092 <chk_mounted+0x3a>
   2f07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2f07c:	3301      	adds	r3, #1
   2f07e:	781b      	ldrb	r3, [r3, #0]
   2f080:	2b3a      	cmp	r3, #58	; 0x3a
   2f082:	d106      	bne.n	2f092 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2f084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2f086:	3302      	adds	r3, #2
   2f088:	62fb      	str	r3, [r7, #44]	; 0x2c
   2f08a:	68fb      	ldr	r3, [r7, #12]
   2f08c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2f08e:	601a      	str	r2, [r3, #0]
   2f090:	e001      	b.n	2f096 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2f092:	2300      	movs	r3, #0
   2f094:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2f096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f098:	2b07      	cmp	r3, #7
   2f09a:	d901      	bls.n	2f0a0 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2f09c:	230b      	movs	r3, #11
   2f09e:	e2af      	b.n	2f600 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2f0a0:	4bc5      	ldr	r3, [pc, #788]	; (2f3b8 <chk_mounted+0x360>)
   2f0a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2f0a4:	0092      	lsls	r2, r2, #2
   2f0a6:	58d3      	ldr	r3, [r2, r3]
   2f0a8:	62bb      	str	r3, [r7, #40]	; 0x28
   2f0aa:	68bb      	ldr	r3, [r7, #8]
   2f0ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f0ae:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2f0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f0b2:	2b00      	cmp	r3, #0
   2f0b4:	d101      	bne.n	2f0ba <chk_mounted+0x62>
   2f0b6:	230c      	movs	r3, #12
   2f0b8:	e2a2      	b.n	2f600 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2f0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f0bc:	781b      	ldrb	r3, [r3, #0]
   2f0be:	2b00      	cmp	r3, #0
   2f0c0:	d01c      	beq.n	2f0fc <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2f0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f0c4:	785b      	ldrb	r3, [r3, #1]
   2f0c6:	2227      	movs	r2, #39	; 0x27
   2f0c8:	18bc      	adds	r4, r7, r2
   2f0ca:	0018      	movs	r0, r3
   2f0cc:	4bbb      	ldr	r3, [pc, #748]	; (2f3bc <chk_mounted+0x364>)
   2f0ce:	4798      	blx	r3
   2f0d0:	0003      	movs	r3, r0
   2f0d2:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2f0d4:	2327      	movs	r3, #39	; 0x27
   2f0d6:	18fb      	adds	r3, r7, r3
   2f0d8:	781b      	ldrb	r3, [r3, #0]
   2f0da:	2201      	movs	r2, #1
   2f0dc:	4013      	ands	r3, r2
   2f0de:	d10d      	bne.n	2f0fc <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2f0e0:	1dfb      	adds	r3, r7, #7
   2f0e2:	781b      	ldrb	r3, [r3, #0]
   2f0e4:	2b00      	cmp	r3, #0
   2f0e6:	d007      	beq.n	2f0f8 <chk_mounted+0xa0>
   2f0e8:	2327      	movs	r3, #39	; 0x27
   2f0ea:	18fb      	adds	r3, r7, r3
   2f0ec:	781b      	ldrb	r3, [r3, #0]
   2f0ee:	2204      	movs	r2, #4
   2f0f0:	4013      	ands	r3, r2
   2f0f2:	d001      	beq.n	2f0f8 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2f0f4:	230a      	movs	r3, #10
   2f0f6:	e283      	b.n	2f600 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2f0f8:	2300      	movs	r3, #0
   2f0fa:	e281      	b.n	2f600 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2f0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f0fe:	2200      	movs	r2, #0
   2f100:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2f102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f104:	b2da      	uxtb	r2, r3
   2f106:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f108:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2f10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f10c:	785b      	ldrb	r3, [r3, #1]
   2f10e:	2227      	movs	r2, #39	; 0x27
   2f110:	18bc      	adds	r4, r7, r2
   2f112:	0018      	movs	r0, r3
   2f114:	4baa      	ldr	r3, [pc, #680]	; (2f3c0 <chk_mounted+0x368>)
   2f116:	4798      	blx	r3
   2f118:	0003      	movs	r3, r0
   2f11a:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2f11c:	2327      	movs	r3, #39	; 0x27
   2f11e:	18fb      	adds	r3, r7, r3
   2f120:	781b      	ldrb	r3, [r3, #0]
   2f122:	2201      	movs	r2, #1
   2f124:	4013      	ands	r3, r2
   2f126:	d001      	beq.n	2f12c <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2f128:	2303      	movs	r3, #3
   2f12a:	e269      	b.n	2f600 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2f12c:	1dfb      	adds	r3, r7, #7
   2f12e:	781b      	ldrb	r3, [r3, #0]
   2f130:	2b00      	cmp	r3, #0
   2f132:	d007      	beq.n	2f144 <chk_mounted+0xec>
   2f134:	2327      	movs	r3, #39	; 0x27
   2f136:	18fb      	adds	r3, r7, r3
   2f138:	781b      	ldrb	r3, [r3, #0]
   2f13a:	2204      	movs	r2, #4
   2f13c:	4013      	ands	r3, r2
   2f13e:	d001      	beq.n	2f144 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2f140:	230a      	movs	r3, #10
   2f142:	e25d      	b.n	2f600 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2f144:	2300      	movs	r3, #0
   2f146:	63fb      	str	r3, [r7, #60]	; 0x3c
   2f148:	2347      	movs	r3, #71	; 0x47
   2f14a:	18fc      	adds	r4, r7, r3
   2f14c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2f14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f150:	0011      	movs	r1, r2
   2f152:	0018      	movs	r0, r3
   2f154:	4b9b      	ldr	r3, [pc, #620]	; (2f3c4 <chk_mounted+0x36c>)
   2f156:	4798      	blx	r3
   2f158:	0003      	movs	r3, r0
   2f15a:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2f15c:	2347      	movs	r3, #71	; 0x47
   2f15e:	18fb      	adds	r3, r7, r3
   2f160:	781b      	ldrb	r3, [r3, #0]
   2f162:	2b01      	cmp	r3, #1
   2f164:	d13b      	bne.n	2f1de <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2f166:	2346      	movs	r3, #70	; 0x46
   2f168:	18fb      	adds	r3, r7, r3
   2f16a:	2200      	movs	r2, #0
   2f16c:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2f16e:	2346      	movs	r3, #70	; 0x46
   2f170:	18fb      	adds	r3, r7, r3
   2f172:	781b      	ldrb	r3, [r3, #0]
   2f174:	2b00      	cmp	r3, #0
   2f176:	d006      	beq.n	2f186 <chk_mounted+0x12e>
   2f178:	2346      	movs	r3, #70	; 0x46
   2f17a:	18fb      	adds	r3, r7, r3
   2f17c:	781a      	ldrb	r2, [r3, #0]
   2f17e:	2346      	movs	r3, #70	; 0x46
   2f180:	18fb      	adds	r3, r7, r3
   2f182:	3a01      	subs	r2, #1
   2f184:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2f186:	2346      	movs	r3, #70	; 0x46
   2f188:	18fb      	adds	r3, r7, r3
   2f18a:	781b      	ldrb	r3, [r3, #0]
   2f18c:	011b      	lsls	r3, r3, #4
   2f18e:	33bf      	adds	r3, #191	; 0xbf
   2f190:	33ff      	adds	r3, #255	; 0xff
   2f192:	3330      	adds	r3, #48	; 0x30
   2f194:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f196:	18d3      	adds	r3, r2, r3
   2f198:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2f19a:	6a3b      	ldr	r3, [r7, #32]
   2f19c:	3304      	adds	r3, #4
   2f19e:	781b      	ldrb	r3, [r3, #0]
   2f1a0:	2b00      	cmp	r3, #0
   2f1a2:	d01c      	beq.n	2f1de <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2f1a4:	6a3b      	ldr	r3, [r7, #32]
   2f1a6:	330b      	adds	r3, #11
   2f1a8:	781b      	ldrb	r3, [r3, #0]
   2f1aa:	061a      	lsls	r2, r3, #24
   2f1ac:	6a3b      	ldr	r3, [r7, #32]
   2f1ae:	330a      	adds	r3, #10
   2f1b0:	781b      	ldrb	r3, [r3, #0]
   2f1b2:	041b      	lsls	r3, r3, #16
   2f1b4:	4313      	orrs	r3, r2
   2f1b6:	6a3a      	ldr	r2, [r7, #32]
   2f1b8:	3209      	adds	r2, #9
   2f1ba:	7812      	ldrb	r2, [r2, #0]
   2f1bc:	0212      	lsls	r2, r2, #8
   2f1be:	4313      	orrs	r3, r2
   2f1c0:	6a3a      	ldr	r2, [r7, #32]
   2f1c2:	3208      	adds	r2, #8
   2f1c4:	7812      	ldrb	r2, [r2, #0]
   2f1c6:	4313      	orrs	r3, r2
   2f1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2f1ca:	2347      	movs	r3, #71	; 0x47
   2f1cc:	18fc      	adds	r4, r7, r3
   2f1ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2f1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f1d2:	0011      	movs	r1, r2
   2f1d4:	0018      	movs	r0, r3
   2f1d6:	4b7b      	ldr	r3, [pc, #492]	; (2f3c4 <chk_mounted+0x36c>)
   2f1d8:	4798      	blx	r3
   2f1da:	0003      	movs	r3, r0
   2f1dc:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2f1de:	2347      	movs	r3, #71	; 0x47
   2f1e0:	18fb      	adds	r3, r7, r3
   2f1e2:	781b      	ldrb	r3, [r3, #0]
   2f1e4:	2b03      	cmp	r3, #3
   2f1e6:	d101      	bne.n	2f1ec <chk_mounted+0x194>
   2f1e8:	2301      	movs	r3, #1
   2f1ea:	e209      	b.n	2f600 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2f1ec:	2347      	movs	r3, #71	; 0x47
   2f1ee:	18fb      	adds	r3, r7, r3
   2f1f0:	781b      	ldrb	r3, [r3, #0]
   2f1f2:	2b00      	cmp	r3, #0
   2f1f4:	d001      	beq.n	2f1fa <chk_mounted+0x1a2>
   2f1f6:	230d      	movs	r3, #13
   2f1f8:	e202      	b.n	2f600 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2f1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f1fc:	223c      	movs	r2, #60	; 0x3c
   2f1fe:	5c9b      	ldrb	r3, [r3, r2]
   2f200:	021b      	lsls	r3, r3, #8
   2f202:	b21a      	sxth	r2, r3
   2f204:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f206:	213b      	movs	r1, #59	; 0x3b
   2f208:	5c5b      	ldrb	r3, [r3, r1]
   2f20a:	b21b      	sxth	r3, r3
   2f20c:	4313      	orrs	r3, r2
   2f20e:	b21a      	sxth	r2, r3
   2f210:	2380      	movs	r3, #128	; 0x80
   2f212:	009b      	lsls	r3, r3, #2
   2f214:	429a      	cmp	r2, r3
   2f216:	d001      	beq.n	2f21c <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2f218:	230d      	movs	r3, #13
   2f21a:	e1f1      	b.n	2f600 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2f21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f21e:	2247      	movs	r2, #71	; 0x47
   2f220:	5c9b      	ldrb	r3, [r3, r2]
   2f222:	021b      	lsls	r3, r3, #8
   2f224:	b21a      	sxth	r2, r3
   2f226:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f228:	2146      	movs	r1, #70	; 0x46
   2f22a:	5c5b      	ldrb	r3, [r3, r1]
   2f22c:	b21b      	sxth	r3, r3
   2f22e:	4313      	orrs	r3, r2
   2f230:	b21b      	sxth	r3, r3
   2f232:	b29b      	uxth	r3, r3
   2f234:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2f236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f238:	2b00      	cmp	r3, #0
   2f23a:	d112      	bne.n	2f262 <chk_mounted+0x20a>
   2f23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f23e:	2257      	movs	r2, #87	; 0x57
   2f240:	5c9b      	ldrb	r3, [r3, r2]
   2f242:	061a      	lsls	r2, r3, #24
   2f244:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f246:	2156      	movs	r1, #86	; 0x56
   2f248:	5c5b      	ldrb	r3, [r3, r1]
   2f24a:	041b      	lsls	r3, r3, #16
   2f24c:	4313      	orrs	r3, r2
   2f24e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f250:	2155      	movs	r1, #85	; 0x55
   2f252:	5c52      	ldrb	r2, [r2, r1]
   2f254:	0212      	lsls	r2, r2, #8
   2f256:	4313      	orrs	r3, r2
   2f258:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f25a:	2154      	movs	r1, #84	; 0x54
   2f25c:	5c52      	ldrb	r2, [r2, r1]
   2f25e:	4313      	orrs	r3, r2
   2f260:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2f262:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f264:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2f266:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2f268:	231f      	movs	r3, #31
   2f26a:	18fb      	adds	r3, r7, r3
   2f26c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f26e:	2140      	movs	r1, #64	; 0x40
   2f270:	5c52      	ldrb	r2, [r2, r1]
   2f272:	701a      	strb	r2, [r3, #0]
   2f274:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f276:	221f      	movs	r2, #31
   2f278:	18ba      	adds	r2, r7, r2
   2f27a:	7812      	ldrb	r2, [r2, #0]
   2f27c:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2f27e:	231f      	movs	r3, #31
   2f280:	18fb      	adds	r3, r7, r3
   2f282:	781b      	ldrb	r3, [r3, #0]
   2f284:	2b01      	cmp	r3, #1
   2f286:	d006      	beq.n	2f296 <chk_mounted+0x23e>
   2f288:	231f      	movs	r3, #31
   2f28a:	18fb      	adds	r3, r7, r3
   2f28c:	781b      	ldrb	r3, [r3, #0]
   2f28e:	2b02      	cmp	r3, #2
   2f290:	d001      	beq.n	2f296 <chk_mounted+0x23e>
   2f292:	230d      	movs	r3, #13
   2f294:	e1b4      	b.n	2f600 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2f296:	231f      	movs	r3, #31
   2f298:	18fb      	adds	r3, r7, r3
   2f29a:	781a      	ldrb	r2, [r3, #0]
   2f29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f29e:	4353      	muls	r3, r2
   2f2a0:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2f2a2:	231f      	movs	r3, #31
   2f2a4:	18fb      	adds	r3, r7, r3
   2f2a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f2a8:	213d      	movs	r1, #61	; 0x3d
   2f2aa:	5c52      	ldrb	r2, [r2, r1]
   2f2ac:	701a      	strb	r2, [r3, #0]
   2f2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f2b0:	221f      	movs	r2, #31
   2f2b2:	18ba      	adds	r2, r7, r2
   2f2b4:	7812      	ldrb	r2, [r2, #0]
   2f2b6:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2f2b8:	231f      	movs	r3, #31
   2f2ba:	18fb      	adds	r3, r7, r3
   2f2bc:	781b      	ldrb	r3, [r3, #0]
   2f2be:	2b00      	cmp	r3, #0
   2f2c0:	d008      	beq.n	2f2d4 <chk_mounted+0x27c>
   2f2c2:	231f      	movs	r3, #31
   2f2c4:	18fb      	adds	r3, r7, r3
   2f2c6:	781b      	ldrb	r3, [r3, #0]
   2f2c8:	221f      	movs	r2, #31
   2f2ca:	18ba      	adds	r2, r7, r2
   2f2cc:	7812      	ldrb	r2, [r2, #0]
   2f2ce:	3a01      	subs	r2, #1
   2f2d0:	4013      	ands	r3, r2
   2f2d2:	d001      	beq.n	2f2d8 <chk_mounted+0x280>
   2f2d4:	230d      	movs	r3, #13
   2f2d6:	e193      	b.n	2f600 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2f2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f2da:	2242      	movs	r2, #66	; 0x42
   2f2dc:	5c9b      	ldrb	r3, [r3, r2]
   2f2de:	021b      	lsls	r3, r3, #8
   2f2e0:	b21a      	sxth	r2, r3
   2f2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f2e4:	2141      	movs	r1, #65	; 0x41
   2f2e6:	5c5b      	ldrb	r3, [r3, r1]
   2f2e8:	b21b      	sxth	r3, r3
   2f2ea:	4313      	orrs	r3, r2
   2f2ec:	b21b      	sxth	r3, r3
   2f2ee:	b29a      	uxth	r2, r3
   2f2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f2f2:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2f2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f2f6:	891b      	ldrh	r3, [r3, #8]
   2f2f8:	220f      	movs	r2, #15
   2f2fa:	4013      	ands	r3, r2
   2f2fc:	b29b      	uxth	r3, r3
   2f2fe:	2b00      	cmp	r3, #0
   2f300:	d001      	beq.n	2f306 <chk_mounted+0x2ae>
   2f302:	230d      	movs	r3, #13
   2f304:	e17c      	b.n	2f600 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2f306:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f308:	2244      	movs	r2, #68	; 0x44
   2f30a:	5c9b      	ldrb	r3, [r3, r2]
   2f30c:	021b      	lsls	r3, r3, #8
   2f30e:	b21a      	sxth	r2, r3
   2f310:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f312:	2143      	movs	r1, #67	; 0x43
   2f314:	5c5b      	ldrb	r3, [r3, r1]
   2f316:	b21b      	sxth	r3, r3
   2f318:	4313      	orrs	r3, r2
   2f31a:	b21b      	sxth	r3, r3
   2f31c:	b29b      	uxth	r3, r3
   2f31e:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2f320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f322:	2b00      	cmp	r3, #0
   2f324:	d112      	bne.n	2f34c <chk_mounted+0x2f4>
   2f326:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f328:	2253      	movs	r2, #83	; 0x53
   2f32a:	5c9b      	ldrb	r3, [r3, r2]
   2f32c:	061a      	lsls	r2, r3, #24
   2f32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f330:	2152      	movs	r1, #82	; 0x52
   2f332:	5c5b      	ldrb	r3, [r3, r1]
   2f334:	041b      	lsls	r3, r3, #16
   2f336:	4313      	orrs	r3, r2
   2f338:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f33a:	2151      	movs	r1, #81	; 0x51
   2f33c:	5c52      	ldrb	r2, [r2, r1]
   2f33e:	0212      	lsls	r2, r2, #8
   2f340:	4313      	orrs	r3, r2
   2f342:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f344:	2150      	movs	r1, #80	; 0x50
   2f346:	5c52      	ldrb	r2, [r2, r1]
   2f348:	4313      	orrs	r3, r2
   2f34a:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2f34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f34e:	223f      	movs	r2, #63	; 0x3f
   2f350:	5c9b      	ldrb	r3, [r3, r2]
   2f352:	021b      	lsls	r3, r3, #8
   2f354:	b21a      	sxth	r2, r3
   2f356:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f358:	213e      	movs	r1, #62	; 0x3e
   2f35a:	5c5b      	ldrb	r3, [r3, r1]
   2f35c:	b21b      	sxth	r3, r3
   2f35e:	4313      	orrs	r3, r2
   2f360:	b21a      	sxth	r2, r3
   2f362:	231c      	movs	r3, #28
   2f364:	18fb      	adds	r3, r7, r3
   2f366:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2f368:	231c      	movs	r3, #28
   2f36a:	18fb      	adds	r3, r7, r3
   2f36c:	881b      	ldrh	r3, [r3, #0]
   2f36e:	2b00      	cmp	r3, #0
   2f370:	d101      	bne.n	2f376 <chk_mounted+0x31e>
   2f372:	230d      	movs	r3, #13
   2f374:	e144      	b.n	2f600 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2f376:	231c      	movs	r3, #28
   2f378:	18fb      	adds	r3, r7, r3
   2f37a:	881a      	ldrh	r2, [r3, #0]
   2f37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f37e:	18d3      	adds	r3, r2, r3
   2f380:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f382:	8912      	ldrh	r2, [r2, #8]
   2f384:	0912      	lsrs	r2, r2, #4
   2f386:	b292      	uxth	r2, r2
   2f388:	189b      	adds	r3, r3, r2
   2f38a:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2f38c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2f38e:	69bb      	ldr	r3, [r7, #24]
   2f390:	429a      	cmp	r2, r3
   2f392:	d201      	bcs.n	2f398 <chk_mounted+0x340>
   2f394:	230d      	movs	r3, #13
   2f396:	e133      	b.n	2f600 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2f398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2f39a:	69bb      	ldr	r3, [r7, #24]
   2f39c:	1ad2      	subs	r2, r2, r3
   2f39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f3a0:	789b      	ldrb	r3, [r3, #2]
   2f3a2:	0019      	movs	r1, r3
   2f3a4:	4b08      	ldr	r3, [pc, #32]	; (2f3c8 <chk_mounted+0x370>)
   2f3a6:	0010      	movs	r0, r2
   2f3a8:	4798      	blx	r3
   2f3aa:	0003      	movs	r3, r0
   2f3ac:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2f3ae:	697b      	ldr	r3, [r7, #20]
   2f3b0:	2b00      	cmp	r3, #0
   2f3b2:	d10b      	bne.n	2f3cc <chk_mounted+0x374>
   2f3b4:	230d      	movs	r3, #13
   2f3b6:	e123      	b.n	2f600 <chk_mounted+0x5a8>
   2f3b8:	20003f14 	.word	0x20003f14
   2f3bc:	0002d1b5 	.word	0x0002d1b5
   2f3c0:	0002d131 	.word	0x0002d131
   2f3c4:	0002ef85 	.word	0x0002ef85
   2f3c8:	00034759 	.word	0x00034759
	fmt = FS_FAT12;
   2f3cc:	2347      	movs	r3, #71	; 0x47
   2f3ce:	18fb      	adds	r3, r7, r3
   2f3d0:	2201      	movs	r2, #1
   2f3d2:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2f3d4:	697b      	ldr	r3, [r7, #20]
   2f3d6:	4a8c      	ldr	r2, [pc, #560]	; (2f608 <chk_mounted+0x5b0>)
   2f3d8:	4293      	cmp	r3, r2
   2f3da:	d903      	bls.n	2f3e4 <chk_mounted+0x38c>
   2f3dc:	2347      	movs	r3, #71	; 0x47
   2f3de:	18fb      	adds	r3, r7, r3
   2f3e0:	2202      	movs	r2, #2
   2f3e2:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2f3e4:	697b      	ldr	r3, [r7, #20]
   2f3e6:	4a89      	ldr	r2, [pc, #548]	; (2f60c <chk_mounted+0x5b4>)
   2f3e8:	4293      	cmp	r3, r2
   2f3ea:	d903      	bls.n	2f3f4 <chk_mounted+0x39c>
   2f3ec:	2347      	movs	r3, #71	; 0x47
   2f3ee:	18fb      	adds	r3, r7, r3
   2f3f0:	2203      	movs	r2, #3
   2f3f2:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2f3f4:	697b      	ldr	r3, [r7, #20]
   2f3f6:	1c9a      	adds	r2, r3, #2
   2f3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f3fa:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2f3fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2f3fe:	69bb      	ldr	r3, [r7, #24]
   2f400:	18d2      	adds	r2, r2, r3
   2f402:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f404:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2f406:	231c      	movs	r3, #28
   2f408:	18fb      	adds	r3, r7, r3
   2f40a:	881a      	ldrh	r2, [r3, #0]
   2f40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2f40e:	18d2      	adds	r2, r2, r3
   2f410:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f412:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2f414:	2347      	movs	r3, #71	; 0x47
   2f416:	18fb      	adds	r3, r7, r3
   2f418:	781b      	ldrb	r3, [r3, #0]
   2f41a:	2b03      	cmp	r3, #3
   2f41c:	d11e      	bne.n	2f45c <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2f41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f420:	891b      	ldrh	r3, [r3, #8]
   2f422:	2b00      	cmp	r3, #0
   2f424:	d001      	beq.n	2f42a <chk_mounted+0x3d2>
   2f426:	230d      	movs	r3, #13
   2f428:	e0ea      	b.n	2f600 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2f42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f42c:	225f      	movs	r2, #95	; 0x5f
   2f42e:	5c9b      	ldrb	r3, [r3, r2]
   2f430:	061a      	lsls	r2, r3, #24
   2f432:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f434:	215e      	movs	r1, #94	; 0x5e
   2f436:	5c5b      	ldrb	r3, [r3, r1]
   2f438:	041b      	lsls	r3, r3, #16
   2f43a:	4313      	orrs	r3, r2
   2f43c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f43e:	215d      	movs	r1, #93	; 0x5d
   2f440:	5c52      	ldrb	r2, [r2, r1]
   2f442:	0212      	lsls	r2, r2, #8
   2f444:	4313      	orrs	r3, r2
   2f446:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f448:	215c      	movs	r1, #92	; 0x5c
   2f44a:	5c52      	ldrb	r2, [r2, r1]
   2f44c:	431a      	orrs	r2, r3
   2f44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f450:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2f452:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f454:	699b      	ldr	r3, [r3, #24]
   2f456:	009b      	lsls	r3, r3, #2
   2f458:	633b      	str	r3, [r7, #48]	; 0x30
   2f45a:	e020      	b.n	2f49e <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2f45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f45e:	891b      	ldrh	r3, [r3, #8]
   2f460:	2b00      	cmp	r3, #0
   2f462:	d101      	bne.n	2f468 <chk_mounted+0x410>
   2f464:	230d      	movs	r3, #13
   2f466:	e0cb      	b.n	2f600 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2f468:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f46a:	6a1a      	ldr	r2, [r3, #32]
   2f46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f46e:	18d2      	adds	r2, r2, r3
   2f470:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f472:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2f474:	2347      	movs	r3, #71	; 0x47
   2f476:	18fb      	adds	r3, r7, r3
   2f478:	781b      	ldrb	r3, [r3, #0]
   2f47a:	2b02      	cmp	r3, #2
   2f47c:	d103      	bne.n	2f486 <chk_mounted+0x42e>
   2f47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f480:	699b      	ldr	r3, [r3, #24]
   2f482:	005b      	lsls	r3, r3, #1
   2f484:	e00a      	b.n	2f49c <chk_mounted+0x444>
   2f486:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f488:	699a      	ldr	r2, [r3, #24]
   2f48a:	0013      	movs	r3, r2
   2f48c:	005b      	lsls	r3, r3, #1
   2f48e:	189b      	adds	r3, r3, r2
   2f490:	085a      	lsrs	r2, r3, #1
   2f492:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f494:	699b      	ldr	r3, [r3, #24]
   2f496:	2101      	movs	r1, #1
   2f498:	400b      	ands	r3, r1
   2f49a:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2f49c:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2f49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f4a0:	69da      	ldr	r2, [r3, #28]
   2f4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f4a4:	495a      	ldr	r1, [pc, #360]	; (2f610 <chk_mounted+0x5b8>)
   2f4a6:	468c      	mov	ip, r1
   2f4a8:	4463      	add	r3, ip
   2f4aa:	0a5b      	lsrs	r3, r3, #9
   2f4ac:	429a      	cmp	r2, r3
   2f4ae:	d201      	bcs.n	2f4b4 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2f4b0:	230d      	movs	r3, #13
   2f4b2:	e0a5      	b.n	2f600 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2f4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f4b6:	2201      	movs	r2, #1
   2f4b8:	4252      	negs	r2, r2
   2f4ba:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2f4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f4be:	2200      	movs	r2, #0
   2f4c0:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2f4c2:	2347      	movs	r3, #71	; 0x47
   2f4c4:	18fb      	adds	r3, r7, r3
   2f4c6:	781b      	ldrb	r3, [r3, #0]
   2f4c8:	2b03      	cmp	r3, #3
   2f4ca:	d000      	beq.n	2f4ce <chk_mounted+0x476>
   2f4cc:	e082      	b.n	2f5d4 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2f4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f4d0:	2200      	movs	r2, #0
   2f4d2:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2f4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f4d6:	2261      	movs	r2, #97	; 0x61
   2f4d8:	5c9b      	ldrb	r3, [r3, r2]
   2f4da:	021b      	lsls	r3, r3, #8
   2f4dc:	b21a      	sxth	r2, r3
   2f4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f4e0:	2160      	movs	r1, #96	; 0x60
   2f4e2:	5c5b      	ldrb	r3, [r3, r1]
   2f4e4:	b21b      	sxth	r3, r3
   2f4e6:	4313      	orrs	r3, r2
   2f4e8:	b21b      	sxth	r3, r3
   2f4ea:	b29b      	uxth	r3, r3
   2f4ec:	001a      	movs	r2, r3
   2f4ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2f4f0:	18d2      	adds	r2, r2, r3
   2f4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f4f4:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2f4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f4f8:	7858      	ldrb	r0, [r3, #1]
   2f4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f4fc:	3330      	adds	r3, #48	; 0x30
   2f4fe:	0019      	movs	r1, r3
   2f500:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f502:	695a      	ldr	r2, [r3, #20]
   2f504:	2301      	movs	r3, #1
   2f506:	4c43      	ldr	r4, [pc, #268]	; (2f614 <chk_mounted+0x5bc>)
   2f508:	47a0      	blx	r4
   2f50a:	1e03      	subs	r3, r0, #0
   2f50c:	d162      	bne.n	2f5d4 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2f50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f510:	4a41      	ldr	r2, [pc, #260]	; (2f618 <chk_mounted+0x5c0>)
   2f512:	5c9b      	ldrb	r3, [r3, r2]
   2f514:	021b      	lsls	r3, r3, #8
   2f516:	b21a      	sxth	r2, r3
   2f518:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f51a:	4940      	ldr	r1, [pc, #256]	; (2f61c <chk_mounted+0x5c4>)
   2f51c:	5c5b      	ldrb	r3, [r3, r1]
   2f51e:	b21b      	sxth	r3, r3
   2f520:	4313      	orrs	r3, r2
   2f522:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2f524:	4a3e      	ldr	r2, [pc, #248]	; (2f620 <chk_mounted+0x5c8>)
   2f526:	4293      	cmp	r3, r2
   2f528:	d154      	bne.n	2f5d4 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2f52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f52c:	2233      	movs	r2, #51	; 0x33
   2f52e:	5c9b      	ldrb	r3, [r3, r2]
   2f530:	061a      	lsls	r2, r3, #24
   2f532:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f534:	2132      	movs	r1, #50	; 0x32
   2f536:	5c5b      	ldrb	r3, [r3, r1]
   2f538:	041b      	lsls	r3, r3, #16
   2f53a:	4313      	orrs	r3, r2
   2f53c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f53e:	2131      	movs	r1, #49	; 0x31
   2f540:	5c52      	ldrb	r2, [r2, r1]
   2f542:	0212      	lsls	r2, r2, #8
   2f544:	4313      	orrs	r3, r2
   2f546:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f548:	2130      	movs	r1, #48	; 0x30
   2f54a:	5c52      	ldrb	r2, [r2, r1]
   2f54c:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2f54e:	4a35      	ldr	r2, [pc, #212]	; (2f624 <chk_mounted+0x5cc>)
   2f550:	4293      	cmp	r3, r2
   2f552:	d13f      	bne.n	2f5d4 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2f554:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f556:	4a34      	ldr	r2, [pc, #208]	; (2f628 <chk_mounted+0x5d0>)
   2f558:	5c9b      	ldrb	r3, [r3, r2]
   2f55a:	061a      	lsls	r2, r3, #24
   2f55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f55e:	4933      	ldr	r1, [pc, #204]	; (2f62c <chk_mounted+0x5d4>)
   2f560:	5c5b      	ldrb	r3, [r3, r1]
   2f562:	041b      	lsls	r3, r3, #16
   2f564:	4313      	orrs	r3, r2
   2f566:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f568:	4931      	ldr	r1, [pc, #196]	; (2f630 <chk_mounted+0x5d8>)
   2f56a:	5c52      	ldrb	r2, [r2, r1]
   2f56c:	0212      	lsls	r2, r2, #8
   2f56e:	4313      	orrs	r3, r2
   2f570:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2f572:	2285      	movs	r2, #133	; 0x85
   2f574:	0092      	lsls	r2, r2, #2
   2f576:	5c8a      	ldrb	r2, [r1, r2]
   2f578:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2f57a:	4a2e      	ldr	r2, [pc, #184]	; (2f634 <chk_mounted+0x5dc>)
   2f57c:	4293      	cmp	r3, r2
   2f57e:	d129      	bne.n	2f5d4 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2f580:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f582:	4a2d      	ldr	r2, [pc, #180]	; (2f638 <chk_mounted+0x5e0>)
   2f584:	5c9b      	ldrb	r3, [r3, r2]
   2f586:	061a      	lsls	r2, r3, #24
   2f588:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f58a:	492c      	ldr	r1, [pc, #176]	; (2f63c <chk_mounted+0x5e4>)
   2f58c:	5c5b      	ldrb	r3, [r3, r1]
   2f58e:	041b      	lsls	r3, r3, #16
   2f590:	4313      	orrs	r3, r2
   2f592:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f594:	492a      	ldr	r1, [pc, #168]	; (2f640 <chk_mounted+0x5e8>)
   2f596:	5c52      	ldrb	r2, [r2, r1]
   2f598:	0212      	lsls	r2, r2, #8
   2f59a:	4313      	orrs	r3, r2
   2f59c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2f59e:	2287      	movs	r2, #135	; 0x87
   2f5a0:	0092      	lsls	r2, r2, #2
   2f5a2:	5c8a      	ldrb	r2, [r1, r2]
   2f5a4:	431a      	orrs	r2, r3
   2f5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f5a8:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2f5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f5ac:	4a25      	ldr	r2, [pc, #148]	; (2f644 <chk_mounted+0x5ec>)
   2f5ae:	5c9b      	ldrb	r3, [r3, r2]
   2f5b0:	061a      	lsls	r2, r3, #24
   2f5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f5b4:	4924      	ldr	r1, [pc, #144]	; (2f648 <chk_mounted+0x5f0>)
   2f5b6:	5c5b      	ldrb	r3, [r3, r1]
   2f5b8:	041b      	lsls	r3, r3, #16
   2f5ba:	4313      	orrs	r3, r2
   2f5bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f5be:	4923      	ldr	r1, [pc, #140]	; (2f64c <chk_mounted+0x5f4>)
   2f5c0:	5c52      	ldrb	r2, [r2, r1]
   2f5c2:	0212      	lsls	r2, r2, #8
   2f5c4:	4313      	orrs	r3, r2
   2f5c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2f5c8:	2286      	movs	r2, #134	; 0x86
   2f5ca:	0092      	lsls	r2, r2, #2
   2f5cc:	5c8a      	ldrb	r2, [r1, r2]
   2f5ce:	431a      	orrs	r2, r3
   2f5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f5d2:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2f5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f5d6:	2247      	movs	r2, #71	; 0x47
   2f5d8:	18ba      	adds	r2, r7, r2
   2f5da:	7812      	ldrb	r2, [r2, #0]
   2f5dc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2f5de:	4b1c      	ldr	r3, [pc, #112]	; (2f650 <chk_mounted+0x5f8>)
   2f5e0:	881b      	ldrh	r3, [r3, #0]
   2f5e2:	3301      	adds	r3, #1
   2f5e4:	b29a      	uxth	r2, r3
   2f5e6:	4b1a      	ldr	r3, [pc, #104]	; (2f650 <chk_mounted+0x5f8>)
   2f5e8:	801a      	strh	r2, [r3, #0]
   2f5ea:	4b19      	ldr	r3, [pc, #100]	; (2f650 <chk_mounted+0x5f8>)
   2f5ec:	881a      	ldrh	r2, [r3, #0]
   2f5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f5f0:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2f5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f5f4:	2200      	movs	r2, #0
   2f5f6:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2f5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f5fa:	2200      	movs	r2, #0
   2f5fc:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2f5fe:	2300      	movs	r3, #0
}
   2f600:	0018      	movs	r0, r3
   2f602:	46bd      	mov	sp, r7
   2f604:	b013      	add	sp, #76	; 0x4c
   2f606:	bd90      	pop	{r4, r7, pc}
   2f608:	00000ff5 	.word	0x00000ff5
   2f60c:	0000fff5 	.word	0x0000fff5
   2f610:	000001ff 	.word	0x000001ff
   2f614:	0002d1ed 	.word	0x0002d1ed
   2f618:	0000022f 	.word	0x0000022f
   2f61c:	0000022e 	.word	0x0000022e
   2f620:	ffffaa55 	.word	0xffffaa55
   2f624:	41615252 	.word	0x41615252
   2f628:	00000217 	.word	0x00000217
   2f62c:	00000216 	.word	0x00000216
   2f630:	00000215 	.word	0x00000215
   2f634:	61417272 	.word	0x61417272
   2f638:	0000021f 	.word	0x0000021f
   2f63c:	0000021e 	.word	0x0000021e
   2f640:	0000021d 	.word	0x0000021d
   2f644:	0000021b 	.word	0x0000021b
   2f648:	0000021a 	.word	0x0000021a
   2f64c:	00000219 	.word	0x00000219
   2f650:	20003f34 	.word	0x20003f34

0002f654 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2f654:	b580      	push	{r7, lr}
   2f656:	b082      	sub	sp, #8
   2f658:	af00      	add	r7, sp, #0
   2f65a:	6078      	str	r0, [r7, #4]
   2f65c:	000a      	movs	r2, r1
   2f65e:	1cbb      	adds	r3, r7, #2
   2f660:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2f662:	687b      	ldr	r3, [r7, #4]
   2f664:	2b00      	cmp	r3, #0
   2f666:	d009      	beq.n	2f67c <validate+0x28>
   2f668:	687b      	ldr	r3, [r7, #4]
   2f66a:	781b      	ldrb	r3, [r3, #0]
   2f66c:	2b00      	cmp	r3, #0
   2f66e:	d005      	beq.n	2f67c <validate+0x28>
   2f670:	687b      	ldr	r3, [r7, #4]
   2f672:	88db      	ldrh	r3, [r3, #6]
   2f674:	1cba      	adds	r2, r7, #2
   2f676:	8812      	ldrh	r2, [r2, #0]
   2f678:	429a      	cmp	r2, r3
   2f67a:	d001      	beq.n	2f680 <validate+0x2c>
		return FR_INVALID_OBJECT;
   2f67c:	2309      	movs	r3, #9
   2f67e:	e00c      	b.n	2f69a <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2f680:	687b      	ldr	r3, [r7, #4]
   2f682:	785b      	ldrb	r3, [r3, #1]
   2f684:	0018      	movs	r0, r3
   2f686:	4b07      	ldr	r3, [pc, #28]	; (2f6a4 <validate+0x50>)
   2f688:	4798      	blx	r3
   2f68a:	0003      	movs	r3, r0
   2f68c:	001a      	movs	r2, r3
   2f68e:	2301      	movs	r3, #1
   2f690:	4013      	ands	r3, r2
   2f692:	d001      	beq.n	2f698 <validate+0x44>
		return FR_NOT_READY;
   2f694:	2303      	movs	r3, #3
   2f696:	e000      	b.n	2f69a <validate+0x46>

	return FR_OK;
   2f698:	2300      	movs	r3, #0
}
   2f69a:	0018      	movs	r0, r3
   2f69c:	46bd      	mov	sp, r7
   2f69e:	b002      	add	sp, #8
   2f6a0:	bd80      	pop	{r7, pc}
   2f6a2:	46c0      	nop			; (mov r8, r8)
   2f6a4:	0002d1b5 	.word	0x0002d1b5

0002f6a8 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2f6a8:	b590      	push	{r4, r7, lr}
   2f6aa:	4ce5      	ldr	r4, [pc, #916]	; (2fa40 <f_open+0x398>)
   2f6ac:	44a5      	add	sp, r4
   2f6ae:	af00      	add	r7, sp, #0
   2f6b0:	60f8      	str	r0, [r7, #12]
   2f6b2:	60b9      	str	r1, [r7, #8]
   2f6b4:	4be3      	ldr	r3, [pc, #908]	; (2fa44 <f_open+0x39c>)
   2f6b6:	2194      	movs	r1, #148	; 0x94
   2f6b8:	0089      	lsls	r1, r1, #2
   2f6ba:	468c      	mov	ip, r1
   2f6bc:	44bc      	add	ip, r7
   2f6be:	4463      	add	r3, ip
   2f6c0:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2f6c2:	68fb      	ldr	r3, [r7, #12]
   2f6c4:	2200      	movs	r2, #0
   2f6c6:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2f6c8:	4bde      	ldr	r3, [pc, #888]	; (2fa44 <f_open+0x39c>)
   2f6ca:	2294      	movs	r2, #148	; 0x94
   2f6cc:	0092      	lsls	r2, r2, #2
   2f6ce:	4694      	mov	ip, r2
   2f6d0:	44bc      	add	ip, r7
   2f6d2:	4463      	add	r3, ip
   2f6d4:	4adb      	ldr	r2, [pc, #876]	; (2fa44 <f_open+0x39c>)
   2f6d6:	2194      	movs	r1, #148	; 0x94
   2f6d8:	0089      	lsls	r1, r1, #2
   2f6da:	468c      	mov	ip, r1
   2f6dc:	44bc      	add	ip, r7
   2f6de:	4462      	add	r2, ip
   2f6e0:	7812      	ldrb	r2, [r2, #0]
   2f6e2:	211f      	movs	r1, #31
   2f6e4:	400a      	ands	r2, r1
   2f6e6:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2f6e8:	4bd6      	ldr	r3, [pc, #856]	; (2fa44 <f_open+0x39c>)
   2f6ea:	2294      	movs	r2, #148	; 0x94
   2f6ec:	0092      	lsls	r2, r2, #2
   2f6ee:	4694      	mov	ip, r2
   2f6f0:	44bc      	add	ip, r7
   2f6f2:	4463      	add	r3, ip
   2f6f4:	781b      	ldrb	r3, [r3, #0]
   2f6f6:	2201      	movs	r2, #1
   2f6f8:	4393      	bics	r3, r2
   2f6fa:	b2da      	uxtb	r2, r3
   2f6fc:	4bd2      	ldr	r3, [pc, #840]	; (2fa48 <f_open+0x3a0>)
   2f6fe:	18fc      	adds	r4, r7, r3
   2f700:	2387      	movs	r3, #135	; 0x87
   2f702:	009b      	lsls	r3, r3, #2
   2f704:	18f9      	adds	r1, r7, r3
   2f706:	2308      	movs	r3, #8
   2f708:	18fb      	adds	r3, r7, r3
   2f70a:	0018      	movs	r0, r3
   2f70c:	4bcf      	ldr	r3, [pc, #828]	; (2fa4c <f_open+0x3a4>)
   2f70e:	4798      	blx	r3
   2f710:	0003      	movs	r3, r0
   2f712:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2f714:	2387      	movs	r3, #135	; 0x87
   2f716:	009b      	lsls	r3, r3, #2
   2f718:	18fb      	adds	r3, r7, r3
   2f71a:	2284      	movs	r2, #132	; 0x84
   2f71c:	0092      	lsls	r2, r2, #2
   2f71e:	18ba      	adds	r2, r7, r2
   2f720:	619a      	str	r2, [r3, #24]
   2f722:	2387      	movs	r3, #135	; 0x87
   2f724:	009b      	lsls	r3, r3, #2
   2f726:	18fb      	adds	r3, r7, r3
   2f728:	2210      	movs	r2, #16
   2f72a:	18ba      	adds	r2, r7, r2
   2f72c:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2f72e:	4bc6      	ldr	r3, [pc, #792]	; (2fa48 <f_open+0x3a0>)
   2f730:	18fb      	adds	r3, r7, r3
   2f732:	781b      	ldrb	r3, [r3, #0]
   2f734:	2b00      	cmp	r3, #0
   2f736:	d10b      	bne.n	2f750 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2f738:	68ba      	ldr	r2, [r7, #8]
   2f73a:	4bc3      	ldr	r3, [pc, #780]	; (2fa48 <f_open+0x3a0>)
   2f73c:	18fc      	adds	r4, r7, r3
   2f73e:	2387      	movs	r3, #135	; 0x87
   2f740:	009b      	lsls	r3, r3, #2
   2f742:	18fb      	adds	r3, r7, r3
   2f744:	0011      	movs	r1, r2
   2f746:	0018      	movs	r0, r3
   2f748:	4bc1      	ldr	r3, [pc, #772]	; (2fa50 <f_open+0x3a8>)
   2f74a:	4798      	blx	r3
   2f74c:	0003      	movs	r3, r0
   2f74e:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2f750:	2387      	movs	r3, #135	; 0x87
   2f752:	009b      	lsls	r3, r3, #2
   2f754:	18fb      	adds	r3, r7, r3
   2f756:	695b      	ldr	r3, [r3, #20]
   2f758:	2292      	movs	r2, #146	; 0x92
   2f75a:	0092      	lsls	r2, r2, #2
   2f75c:	18ba      	adds	r2, r7, r2
   2f75e:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2f760:	4bb9      	ldr	r3, [pc, #740]	; (2fa48 <f_open+0x3a0>)
   2f762:	18fb      	adds	r3, r7, r3
   2f764:	781b      	ldrb	r3, [r3, #0]
   2f766:	2b00      	cmp	r3, #0
   2f768:	d109      	bne.n	2f77e <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2f76a:	2392      	movs	r3, #146	; 0x92
   2f76c:	009b      	lsls	r3, r3, #2
   2f76e:	18fb      	adds	r3, r7, r3
   2f770:	681b      	ldr	r3, [r3, #0]
   2f772:	2b00      	cmp	r3, #0
   2f774:	d103      	bne.n	2f77e <f_open+0xd6>
			res = FR_INVALID_NAME;
   2f776:	4bb4      	ldr	r3, [pc, #720]	; (2fa48 <f_open+0x3a0>)
   2f778:	18fb      	adds	r3, r7, r3
   2f77a:	2206      	movs	r2, #6
   2f77c:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2f77e:	4bb1      	ldr	r3, [pc, #708]	; (2fa44 <f_open+0x39c>)
   2f780:	2294      	movs	r2, #148	; 0x94
   2f782:	0092      	lsls	r2, r2, #2
   2f784:	4694      	mov	ip, r2
   2f786:	44bc      	add	ip, r7
   2f788:	4463      	add	r3, ip
   2f78a:	781b      	ldrb	r3, [r3, #0]
   2f78c:	221c      	movs	r2, #28
   2f78e:	4013      	ands	r3, r2
   2f790:	d100      	bne.n	2f794 <f_open+0xec>
   2f792:	e141      	b.n	2fa18 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2f794:	4bac      	ldr	r3, [pc, #688]	; (2fa48 <f_open+0x3a0>)
   2f796:	18fb      	adds	r3, r7, r3
   2f798:	781b      	ldrb	r3, [r3, #0]
   2f79a:	2b00      	cmp	r3, #0
   2f79c:	d027      	beq.n	2f7ee <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2f79e:	4baa      	ldr	r3, [pc, #680]	; (2fa48 <f_open+0x3a0>)
   2f7a0:	18fb      	adds	r3, r7, r3
   2f7a2:	781b      	ldrb	r3, [r3, #0]
   2f7a4:	2b04      	cmp	r3, #4
   2f7a6:	d109      	bne.n	2f7bc <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2f7a8:	4ba7      	ldr	r3, [pc, #668]	; (2fa48 <f_open+0x3a0>)
   2f7aa:	18fc      	adds	r4, r7, r3
   2f7ac:	2387      	movs	r3, #135	; 0x87
   2f7ae:	009b      	lsls	r3, r3, #2
   2f7b0:	18fb      	adds	r3, r7, r3
   2f7b2:	0018      	movs	r0, r3
   2f7b4:	4ba7      	ldr	r3, [pc, #668]	; (2fa54 <f_open+0x3ac>)
   2f7b6:	4798      	blx	r3
   2f7b8:	0003      	movs	r3, r0
   2f7ba:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2f7bc:	4ba1      	ldr	r3, [pc, #644]	; (2fa44 <f_open+0x39c>)
   2f7be:	2294      	movs	r2, #148	; 0x94
   2f7c0:	0092      	lsls	r2, r2, #2
   2f7c2:	4694      	mov	ip, r2
   2f7c4:	44bc      	add	ip, r7
   2f7c6:	4463      	add	r3, ip
   2f7c8:	4a9e      	ldr	r2, [pc, #632]	; (2fa44 <f_open+0x39c>)
   2f7ca:	2194      	movs	r1, #148	; 0x94
   2f7cc:	0089      	lsls	r1, r1, #2
   2f7ce:	468c      	mov	ip, r1
   2f7d0:	44bc      	add	ip, r7
   2f7d2:	4462      	add	r2, ip
   2f7d4:	7812      	ldrb	r2, [r2, #0]
   2f7d6:	2108      	movs	r1, #8
   2f7d8:	430a      	orrs	r2, r1
   2f7da:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2f7dc:	2387      	movs	r3, #135	; 0x87
   2f7de:	009b      	lsls	r3, r3, #2
   2f7e0:	18fb      	adds	r3, r7, r3
   2f7e2:	695b      	ldr	r3, [r3, #20]
   2f7e4:	2292      	movs	r2, #146	; 0x92
   2f7e6:	0092      	lsls	r2, r2, #2
   2f7e8:	18ba      	adds	r2, r7, r2
   2f7ea:	6013      	str	r3, [r2, #0]
   2f7ec:	e01c      	b.n	2f828 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2f7ee:	2392      	movs	r3, #146	; 0x92
   2f7f0:	009b      	lsls	r3, r3, #2
   2f7f2:	18fb      	adds	r3, r7, r3
   2f7f4:	681b      	ldr	r3, [r3, #0]
   2f7f6:	330b      	adds	r3, #11
   2f7f8:	781b      	ldrb	r3, [r3, #0]
   2f7fa:	001a      	movs	r2, r3
   2f7fc:	2311      	movs	r3, #17
   2f7fe:	4013      	ands	r3, r2
   2f800:	d004      	beq.n	2f80c <f_open+0x164>
				res = FR_DENIED;
   2f802:	4b91      	ldr	r3, [pc, #580]	; (2fa48 <f_open+0x3a0>)
   2f804:	18fb      	adds	r3, r7, r3
   2f806:	2207      	movs	r2, #7
   2f808:	701a      	strb	r2, [r3, #0]
   2f80a:	e00d      	b.n	2f828 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2f80c:	4b8d      	ldr	r3, [pc, #564]	; (2fa44 <f_open+0x39c>)
   2f80e:	2294      	movs	r2, #148	; 0x94
   2f810:	0092      	lsls	r2, r2, #2
   2f812:	4694      	mov	ip, r2
   2f814:	44bc      	add	ip, r7
   2f816:	4463      	add	r3, ip
   2f818:	781b      	ldrb	r3, [r3, #0]
   2f81a:	2204      	movs	r2, #4
   2f81c:	4013      	ands	r3, r2
   2f81e:	d003      	beq.n	2f828 <f_open+0x180>
					res = FR_EXIST;
   2f820:	4b89      	ldr	r3, [pc, #548]	; (2fa48 <f_open+0x3a0>)
   2f822:	18fb      	adds	r3, r7, r3
   2f824:	2208      	movs	r2, #8
   2f826:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2f828:	4b87      	ldr	r3, [pc, #540]	; (2fa48 <f_open+0x3a0>)
   2f82a:	18fb      	adds	r3, r7, r3
   2f82c:	781b      	ldrb	r3, [r3, #0]
   2f82e:	2b00      	cmp	r3, #0
   2f830:	d000      	beq.n	2f834 <f_open+0x18c>
   2f832:	e12f      	b.n	2fa94 <f_open+0x3ec>
   2f834:	4b83      	ldr	r3, [pc, #524]	; (2fa44 <f_open+0x39c>)
   2f836:	2294      	movs	r2, #148	; 0x94
   2f838:	0092      	lsls	r2, r2, #2
   2f83a:	4694      	mov	ip, r2
   2f83c:	44bc      	add	ip, r7
   2f83e:	4463      	add	r3, ip
   2f840:	781b      	ldrb	r3, [r3, #0]
   2f842:	2208      	movs	r2, #8
   2f844:	4013      	ands	r3, r2
   2f846:	d100      	bne.n	2f84a <f_open+0x1a2>
   2f848:	e124      	b.n	2fa94 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2f84a:	4b83      	ldr	r3, [pc, #524]	; (2fa58 <f_open+0x3b0>)
   2f84c:	4798      	blx	r3
   2f84e:	0003      	movs	r3, r0
   2f850:	2291      	movs	r2, #145	; 0x91
   2f852:	0092      	lsls	r2, r2, #2
   2f854:	18ba      	adds	r2, r7, r2
   2f856:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2f858:	2392      	movs	r3, #146	; 0x92
   2f85a:	009b      	lsls	r3, r3, #2
   2f85c:	18fb      	adds	r3, r7, r3
   2f85e:	681b      	ldr	r3, [r3, #0]
   2f860:	330e      	adds	r3, #14
   2f862:	2291      	movs	r2, #145	; 0x91
   2f864:	0092      	lsls	r2, r2, #2
   2f866:	18ba      	adds	r2, r7, r2
   2f868:	6812      	ldr	r2, [r2, #0]
   2f86a:	b2d2      	uxtb	r2, r2
   2f86c:	701a      	strb	r2, [r3, #0]
   2f86e:	2392      	movs	r3, #146	; 0x92
   2f870:	009b      	lsls	r3, r3, #2
   2f872:	18fb      	adds	r3, r7, r3
   2f874:	681b      	ldr	r3, [r3, #0]
   2f876:	330f      	adds	r3, #15
   2f878:	2291      	movs	r2, #145	; 0x91
   2f87a:	0092      	lsls	r2, r2, #2
   2f87c:	18ba      	adds	r2, r7, r2
   2f87e:	6812      	ldr	r2, [r2, #0]
   2f880:	b292      	uxth	r2, r2
   2f882:	0a12      	lsrs	r2, r2, #8
   2f884:	b292      	uxth	r2, r2
   2f886:	b2d2      	uxtb	r2, r2
   2f888:	701a      	strb	r2, [r3, #0]
   2f88a:	2392      	movs	r3, #146	; 0x92
   2f88c:	009b      	lsls	r3, r3, #2
   2f88e:	18fb      	adds	r3, r7, r3
   2f890:	681b      	ldr	r3, [r3, #0]
   2f892:	3310      	adds	r3, #16
   2f894:	2291      	movs	r2, #145	; 0x91
   2f896:	0092      	lsls	r2, r2, #2
   2f898:	18ba      	adds	r2, r7, r2
   2f89a:	6812      	ldr	r2, [r2, #0]
   2f89c:	0c12      	lsrs	r2, r2, #16
   2f89e:	b2d2      	uxtb	r2, r2
   2f8a0:	701a      	strb	r2, [r3, #0]
   2f8a2:	2392      	movs	r3, #146	; 0x92
   2f8a4:	009b      	lsls	r3, r3, #2
   2f8a6:	18fb      	adds	r3, r7, r3
   2f8a8:	681b      	ldr	r3, [r3, #0]
   2f8aa:	3311      	adds	r3, #17
   2f8ac:	2291      	movs	r2, #145	; 0x91
   2f8ae:	0092      	lsls	r2, r2, #2
   2f8b0:	18ba      	adds	r2, r7, r2
   2f8b2:	6812      	ldr	r2, [r2, #0]
   2f8b4:	0e12      	lsrs	r2, r2, #24
   2f8b6:	b2d2      	uxtb	r2, r2
   2f8b8:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2f8ba:	2392      	movs	r3, #146	; 0x92
   2f8bc:	009b      	lsls	r3, r3, #2
   2f8be:	18fb      	adds	r3, r7, r3
   2f8c0:	681b      	ldr	r3, [r3, #0]
   2f8c2:	330b      	adds	r3, #11
   2f8c4:	2200      	movs	r2, #0
   2f8c6:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2f8c8:	2392      	movs	r3, #146	; 0x92
   2f8ca:	009b      	lsls	r3, r3, #2
   2f8cc:	18fb      	adds	r3, r7, r3
   2f8ce:	681b      	ldr	r3, [r3, #0]
   2f8d0:	331c      	adds	r3, #28
   2f8d2:	2200      	movs	r2, #0
   2f8d4:	701a      	strb	r2, [r3, #0]
   2f8d6:	2392      	movs	r3, #146	; 0x92
   2f8d8:	009b      	lsls	r3, r3, #2
   2f8da:	18fb      	adds	r3, r7, r3
   2f8dc:	681b      	ldr	r3, [r3, #0]
   2f8de:	331d      	adds	r3, #29
   2f8e0:	2200      	movs	r2, #0
   2f8e2:	701a      	strb	r2, [r3, #0]
   2f8e4:	2392      	movs	r3, #146	; 0x92
   2f8e6:	009b      	lsls	r3, r3, #2
   2f8e8:	18fb      	adds	r3, r7, r3
   2f8ea:	681b      	ldr	r3, [r3, #0]
   2f8ec:	331e      	adds	r3, #30
   2f8ee:	2200      	movs	r2, #0
   2f8f0:	701a      	strb	r2, [r3, #0]
   2f8f2:	2392      	movs	r3, #146	; 0x92
   2f8f4:	009b      	lsls	r3, r3, #2
   2f8f6:	18fb      	adds	r3, r7, r3
   2f8f8:	681b      	ldr	r3, [r3, #0]
   2f8fa:	331f      	adds	r3, #31
   2f8fc:	2200      	movs	r2, #0
   2f8fe:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2f900:	2392      	movs	r3, #146	; 0x92
   2f902:	009b      	lsls	r3, r3, #2
   2f904:	18fb      	adds	r3, r7, r3
   2f906:	681b      	ldr	r3, [r3, #0]
   2f908:	3315      	adds	r3, #21
   2f90a:	781b      	ldrb	r3, [r3, #0]
   2f90c:	021b      	lsls	r3, r3, #8
   2f90e:	b21a      	sxth	r2, r3
   2f910:	2392      	movs	r3, #146	; 0x92
   2f912:	009b      	lsls	r3, r3, #2
   2f914:	18fb      	adds	r3, r7, r3
   2f916:	681b      	ldr	r3, [r3, #0]
   2f918:	3314      	adds	r3, #20
   2f91a:	781b      	ldrb	r3, [r3, #0]
   2f91c:	b21b      	sxth	r3, r3
   2f91e:	4313      	orrs	r3, r2
   2f920:	b21b      	sxth	r3, r3
   2f922:	b29b      	uxth	r3, r3
   2f924:	041b      	lsls	r3, r3, #16
   2f926:	2292      	movs	r2, #146	; 0x92
   2f928:	0092      	lsls	r2, r2, #2
   2f92a:	18ba      	adds	r2, r7, r2
   2f92c:	6812      	ldr	r2, [r2, #0]
   2f92e:	321b      	adds	r2, #27
   2f930:	7812      	ldrb	r2, [r2, #0]
   2f932:	0212      	lsls	r2, r2, #8
   2f934:	b211      	sxth	r1, r2
   2f936:	2292      	movs	r2, #146	; 0x92
   2f938:	0092      	lsls	r2, r2, #2
   2f93a:	18ba      	adds	r2, r7, r2
   2f93c:	6812      	ldr	r2, [r2, #0]
   2f93e:	321a      	adds	r2, #26
   2f940:	7812      	ldrb	r2, [r2, #0]
   2f942:	b212      	sxth	r2, r2
   2f944:	430a      	orrs	r2, r1
   2f946:	b212      	sxth	r2, r2
   2f948:	b292      	uxth	r2, r2
   2f94a:	4313      	orrs	r3, r2
   2f94c:	2290      	movs	r2, #144	; 0x90
   2f94e:	0092      	lsls	r2, r2, #2
   2f950:	18ba      	adds	r2, r7, r2
   2f952:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2f954:	2392      	movs	r3, #146	; 0x92
   2f956:	009b      	lsls	r3, r3, #2
   2f958:	18fb      	adds	r3, r7, r3
   2f95a:	681b      	ldr	r3, [r3, #0]
   2f95c:	331a      	adds	r3, #26
   2f95e:	2200      	movs	r2, #0
   2f960:	701a      	strb	r2, [r3, #0]
   2f962:	2392      	movs	r3, #146	; 0x92
   2f964:	009b      	lsls	r3, r3, #2
   2f966:	18fb      	adds	r3, r7, r3
   2f968:	681b      	ldr	r3, [r3, #0]
   2f96a:	331b      	adds	r3, #27
   2f96c:	2200      	movs	r2, #0
   2f96e:	701a      	strb	r2, [r3, #0]
   2f970:	2392      	movs	r3, #146	; 0x92
   2f972:	009b      	lsls	r3, r3, #2
   2f974:	18fb      	adds	r3, r7, r3
   2f976:	681b      	ldr	r3, [r3, #0]
   2f978:	3314      	adds	r3, #20
   2f97a:	2200      	movs	r2, #0
   2f97c:	701a      	strb	r2, [r3, #0]
   2f97e:	2392      	movs	r3, #146	; 0x92
   2f980:	009b      	lsls	r3, r3, #2
   2f982:	18fb      	adds	r3, r7, r3
   2f984:	681b      	ldr	r3, [r3, #0]
   2f986:	3315      	adds	r3, #21
   2f988:	2200      	movs	r2, #0
   2f98a:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2f98c:	2387      	movs	r3, #135	; 0x87
   2f98e:	009b      	lsls	r3, r3, #2
   2f990:	18fb      	adds	r3, r7, r3
   2f992:	681b      	ldr	r3, [r3, #0]
   2f994:	2201      	movs	r2, #1
   2f996:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2f998:	2390      	movs	r3, #144	; 0x90
   2f99a:	009b      	lsls	r3, r3, #2
   2f99c:	18fb      	adds	r3, r7, r3
   2f99e:	681b      	ldr	r3, [r3, #0]
   2f9a0:	2b00      	cmp	r3, #0
   2f9a2:	d100      	bne.n	2f9a6 <f_open+0x2fe>
   2f9a4:	e076      	b.n	2fa94 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2f9a6:	2387      	movs	r3, #135	; 0x87
   2f9a8:	009b      	lsls	r3, r3, #2
   2f9aa:	18fb      	adds	r3, r7, r3
   2f9ac:	681b      	ldr	r3, [r3, #0]
   2f9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2f9b0:	2291      	movs	r2, #145	; 0x91
   2f9b2:	0092      	lsls	r2, r2, #2
   2f9b4:	18ba      	adds	r2, r7, r2
   2f9b6:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2f9b8:	2387      	movs	r3, #135	; 0x87
   2f9ba:	009b      	lsls	r3, r3, #2
   2f9bc:	18fb      	adds	r3, r7, r3
   2f9be:	681b      	ldr	r3, [r3, #0]
   2f9c0:	4a21      	ldr	r2, [pc, #132]	; (2fa48 <f_open+0x3a0>)
   2f9c2:	18bc      	adds	r4, r7, r2
   2f9c4:	2290      	movs	r2, #144	; 0x90
   2f9c6:	0092      	lsls	r2, r2, #2
   2f9c8:	18ba      	adds	r2, r7, r2
   2f9ca:	6812      	ldr	r2, [r2, #0]
   2f9cc:	0011      	movs	r1, r2
   2f9ce:	0018      	movs	r0, r3
   2f9d0:	4b22      	ldr	r3, [pc, #136]	; (2fa5c <f_open+0x3b4>)
   2f9d2:	4798      	blx	r3
   2f9d4:	0003      	movs	r3, r0
   2f9d6:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2f9d8:	4b1b      	ldr	r3, [pc, #108]	; (2fa48 <f_open+0x3a0>)
   2f9da:	18fb      	adds	r3, r7, r3
   2f9dc:	781b      	ldrb	r3, [r3, #0]
   2f9de:	2b00      	cmp	r3, #0
   2f9e0:	d158      	bne.n	2fa94 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2f9e2:	2387      	movs	r3, #135	; 0x87
   2f9e4:	009b      	lsls	r3, r3, #2
   2f9e6:	18fb      	adds	r3, r7, r3
   2f9e8:	681b      	ldr	r3, [r3, #0]
   2f9ea:	2290      	movs	r2, #144	; 0x90
   2f9ec:	0092      	lsls	r2, r2, #2
   2f9ee:	18ba      	adds	r2, r7, r2
   2f9f0:	6812      	ldr	r2, [r2, #0]
   2f9f2:	3a01      	subs	r2, #1
   2f9f4:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2f9f6:	2387      	movs	r3, #135	; 0x87
   2f9f8:	009b      	lsls	r3, r3, #2
   2f9fa:	18fb      	adds	r3, r7, r3
   2f9fc:	681b      	ldr	r3, [r3, #0]
   2f9fe:	4a12      	ldr	r2, [pc, #72]	; (2fa48 <f_open+0x3a0>)
   2fa00:	18bc      	adds	r4, r7, r2
   2fa02:	2291      	movs	r2, #145	; 0x91
   2fa04:	0092      	lsls	r2, r2, #2
   2fa06:	18ba      	adds	r2, r7, r2
   2fa08:	6812      	ldr	r2, [r2, #0]
   2fa0a:	0011      	movs	r1, r2
   2fa0c:	0018      	movs	r0, r3
   2fa0e:	4b14      	ldr	r3, [pc, #80]	; (2fa60 <f_open+0x3b8>)
   2fa10:	4798      	blx	r3
   2fa12:	0003      	movs	r3, r0
   2fa14:	7023      	strb	r3, [r4, #0]
   2fa16:	e03d      	b.n	2fa94 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2fa18:	4b0b      	ldr	r3, [pc, #44]	; (2fa48 <f_open+0x3a0>)
   2fa1a:	18fb      	adds	r3, r7, r3
   2fa1c:	781b      	ldrb	r3, [r3, #0]
   2fa1e:	2b00      	cmp	r3, #0
   2fa20:	d138      	bne.n	2fa94 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2fa22:	2392      	movs	r3, #146	; 0x92
   2fa24:	009b      	lsls	r3, r3, #2
   2fa26:	18fb      	adds	r3, r7, r3
   2fa28:	681b      	ldr	r3, [r3, #0]
   2fa2a:	330b      	adds	r3, #11
   2fa2c:	781b      	ldrb	r3, [r3, #0]
   2fa2e:	001a      	movs	r2, r3
   2fa30:	2310      	movs	r3, #16
   2fa32:	4013      	ands	r3, r2
   2fa34:	d016      	beq.n	2fa64 <f_open+0x3bc>
				res = FR_NO_FILE;
   2fa36:	4b04      	ldr	r3, [pc, #16]	; (2fa48 <f_open+0x3a0>)
   2fa38:	18fb      	adds	r3, r7, r3
   2fa3a:	2204      	movs	r2, #4
   2fa3c:	701a      	strb	r2, [r3, #0]
   2fa3e:	e029      	b.n	2fa94 <f_open+0x3ec>
   2fa40:	fffffdac 	.word	0xfffffdac
   2fa44:	fffffdb7 	.word	0xfffffdb7
   2fa48:	0000024f 	.word	0x0000024f
   2fa4c:	0002f059 	.word	0x0002f059
   2fa50:	0002ee4d 	.word	0x0002ee4d
   2fa54:	0002e69d 	.word	0x0002e69d
   2fa58:	0002d495 	.word	0x0002d495
   2fa5c:	0002dc19 	.word	0x0002dc19
   2fa60:	0002d5d9 	.word	0x0002d5d9
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2fa64:	4b5a      	ldr	r3, [pc, #360]	; (2fbd0 <f_open+0x528>)
   2fa66:	2294      	movs	r2, #148	; 0x94
   2fa68:	0092      	lsls	r2, r2, #2
   2fa6a:	4694      	mov	ip, r2
   2fa6c:	44bc      	add	ip, r7
   2fa6e:	4463      	add	r3, ip
   2fa70:	781b      	ldrb	r3, [r3, #0]
   2fa72:	2202      	movs	r2, #2
   2fa74:	4013      	ands	r3, r2
   2fa76:	d00d      	beq.n	2fa94 <f_open+0x3ec>
   2fa78:	2392      	movs	r3, #146	; 0x92
   2fa7a:	009b      	lsls	r3, r3, #2
   2fa7c:	18fb      	adds	r3, r7, r3
   2fa7e:	681b      	ldr	r3, [r3, #0]
   2fa80:	330b      	adds	r3, #11
   2fa82:	781b      	ldrb	r3, [r3, #0]
   2fa84:	001a      	movs	r2, r3
   2fa86:	2301      	movs	r3, #1
   2fa88:	4013      	ands	r3, r2
   2fa8a:	d003      	beq.n	2fa94 <f_open+0x3ec>
					res = FR_DENIED;
   2fa8c:	4b51      	ldr	r3, [pc, #324]	; (2fbd4 <f_open+0x52c>)
   2fa8e:	18fb      	adds	r3, r7, r3
   2fa90:	2207      	movs	r2, #7
   2fa92:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2fa94:	4b4f      	ldr	r3, [pc, #316]	; (2fbd4 <f_open+0x52c>)
   2fa96:	18fb      	adds	r3, r7, r3
   2fa98:	781b      	ldrb	r3, [r3, #0]
   2fa9a:	2b00      	cmp	r3, #0
   2fa9c:	d126      	bne.n	2faec <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2fa9e:	4b4c      	ldr	r3, [pc, #304]	; (2fbd0 <f_open+0x528>)
   2faa0:	2294      	movs	r2, #148	; 0x94
   2faa2:	0092      	lsls	r2, r2, #2
   2faa4:	4694      	mov	ip, r2
   2faa6:	44bc      	add	ip, r7
   2faa8:	4463      	add	r3, ip
   2faaa:	781b      	ldrb	r3, [r3, #0]
   2faac:	2208      	movs	r2, #8
   2faae:	4013      	ands	r3, r2
   2fab0:	d00f      	beq.n	2fad2 <f_open+0x42a>
			mode |= FA__WRITTEN;
   2fab2:	4b47      	ldr	r3, [pc, #284]	; (2fbd0 <f_open+0x528>)
   2fab4:	2294      	movs	r2, #148	; 0x94
   2fab6:	0092      	lsls	r2, r2, #2
   2fab8:	4694      	mov	ip, r2
   2faba:	44bc      	add	ip, r7
   2fabc:	4463      	add	r3, ip
   2fabe:	4a44      	ldr	r2, [pc, #272]	; (2fbd0 <f_open+0x528>)
   2fac0:	2194      	movs	r1, #148	; 0x94
   2fac2:	0089      	lsls	r1, r1, #2
   2fac4:	468c      	mov	ip, r1
   2fac6:	44bc      	add	ip, r7
   2fac8:	4462      	add	r2, ip
   2faca:	7812      	ldrb	r2, [r2, #0]
   2facc:	2120      	movs	r1, #32
   2face:	430a      	orrs	r2, r1
   2fad0:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2fad2:	2387      	movs	r3, #135	; 0x87
   2fad4:	009b      	lsls	r3, r3, #2
   2fad6:	18fb      	adds	r3, r7, r3
   2fad8:	681b      	ldr	r3, [r3, #0]
   2fada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2fadc:	68fb      	ldr	r3, [r7, #12]
   2fade:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2fae0:	68fb      	ldr	r3, [r7, #12]
   2fae2:	2292      	movs	r2, #146	; 0x92
   2fae4:	0092      	lsls	r2, r2, #2
   2fae6:	18ba      	adds	r2, r7, r2
   2fae8:	6812      	ldr	r2, [r2, #0]
   2faea:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2faec:	4b39      	ldr	r3, [pc, #228]	; (2fbd4 <f_open+0x52c>)
   2faee:	18fb      	adds	r3, r7, r3
   2faf0:	781b      	ldrb	r3, [r3, #0]
   2faf2:	2b00      	cmp	r3, #0
   2faf4:	d163      	bne.n	2fbbe <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2faf6:	68fb      	ldr	r3, [r7, #12]
   2faf8:	4a35      	ldr	r2, [pc, #212]	; (2fbd0 <f_open+0x528>)
   2fafa:	2194      	movs	r1, #148	; 0x94
   2fafc:	0089      	lsls	r1, r1, #2
   2fafe:	468c      	mov	ip, r1
   2fb00:	44bc      	add	ip, r7
   2fb02:	4462      	add	r2, ip
   2fb04:	7812      	ldrb	r2, [r2, #0]
   2fb06:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2fb08:	2392      	movs	r3, #146	; 0x92
   2fb0a:	009b      	lsls	r3, r3, #2
   2fb0c:	18fb      	adds	r3, r7, r3
   2fb0e:	681b      	ldr	r3, [r3, #0]
   2fb10:	3315      	adds	r3, #21
   2fb12:	781b      	ldrb	r3, [r3, #0]
   2fb14:	021b      	lsls	r3, r3, #8
   2fb16:	b21a      	sxth	r2, r3
   2fb18:	2392      	movs	r3, #146	; 0x92
   2fb1a:	009b      	lsls	r3, r3, #2
   2fb1c:	18fb      	adds	r3, r7, r3
   2fb1e:	681b      	ldr	r3, [r3, #0]
   2fb20:	3314      	adds	r3, #20
   2fb22:	781b      	ldrb	r3, [r3, #0]
   2fb24:	b21b      	sxth	r3, r3
   2fb26:	4313      	orrs	r3, r2
   2fb28:	b21b      	sxth	r3, r3
   2fb2a:	b29b      	uxth	r3, r3
   2fb2c:	041b      	lsls	r3, r3, #16
   2fb2e:	2292      	movs	r2, #146	; 0x92
   2fb30:	0092      	lsls	r2, r2, #2
   2fb32:	18ba      	adds	r2, r7, r2
   2fb34:	6812      	ldr	r2, [r2, #0]
   2fb36:	321b      	adds	r2, #27
   2fb38:	7812      	ldrb	r2, [r2, #0]
   2fb3a:	0212      	lsls	r2, r2, #8
   2fb3c:	b211      	sxth	r1, r2
   2fb3e:	2292      	movs	r2, #146	; 0x92
   2fb40:	0092      	lsls	r2, r2, #2
   2fb42:	18ba      	adds	r2, r7, r2
   2fb44:	6812      	ldr	r2, [r2, #0]
   2fb46:	321a      	adds	r2, #26
   2fb48:	7812      	ldrb	r2, [r2, #0]
   2fb4a:	b212      	sxth	r2, r2
   2fb4c:	430a      	orrs	r2, r1
   2fb4e:	b212      	sxth	r2, r2
   2fb50:	b292      	uxth	r2, r2
   2fb52:	431a      	orrs	r2, r3
   2fb54:	68fb      	ldr	r3, [r7, #12]
   2fb56:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2fb58:	2392      	movs	r3, #146	; 0x92
   2fb5a:	009b      	lsls	r3, r3, #2
   2fb5c:	18fb      	adds	r3, r7, r3
   2fb5e:	681b      	ldr	r3, [r3, #0]
   2fb60:	331f      	adds	r3, #31
   2fb62:	781b      	ldrb	r3, [r3, #0]
   2fb64:	061a      	lsls	r2, r3, #24
   2fb66:	2392      	movs	r3, #146	; 0x92
   2fb68:	009b      	lsls	r3, r3, #2
   2fb6a:	18fb      	adds	r3, r7, r3
   2fb6c:	681b      	ldr	r3, [r3, #0]
   2fb6e:	331e      	adds	r3, #30
   2fb70:	781b      	ldrb	r3, [r3, #0]
   2fb72:	041b      	lsls	r3, r3, #16
   2fb74:	4313      	orrs	r3, r2
   2fb76:	2292      	movs	r2, #146	; 0x92
   2fb78:	0092      	lsls	r2, r2, #2
   2fb7a:	18ba      	adds	r2, r7, r2
   2fb7c:	6812      	ldr	r2, [r2, #0]
   2fb7e:	321d      	adds	r2, #29
   2fb80:	7812      	ldrb	r2, [r2, #0]
   2fb82:	0212      	lsls	r2, r2, #8
   2fb84:	4313      	orrs	r3, r2
   2fb86:	2292      	movs	r2, #146	; 0x92
   2fb88:	0092      	lsls	r2, r2, #2
   2fb8a:	18ba      	adds	r2, r7, r2
   2fb8c:	6812      	ldr	r2, [r2, #0]
   2fb8e:	321c      	adds	r2, #28
   2fb90:	7812      	ldrb	r2, [r2, #0]
   2fb92:	431a      	orrs	r2, r3
   2fb94:	68fb      	ldr	r3, [r7, #12]
   2fb96:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2fb98:	68fb      	ldr	r3, [r7, #12]
   2fb9a:	2200      	movs	r2, #0
   2fb9c:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2fb9e:	68fb      	ldr	r3, [r7, #12]
   2fba0:	2200      	movs	r2, #0
   2fba2:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2fba4:	2387      	movs	r3, #135	; 0x87
   2fba6:	009b      	lsls	r3, r3, #2
   2fba8:	18fb      	adds	r3, r7, r3
   2fbaa:	681a      	ldr	r2, [r3, #0]
   2fbac:	68fb      	ldr	r3, [r7, #12]
   2fbae:	601a      	str	r2, [r3, #0]
   2fbb0:	2387      	movs	r3, #135	; 0x87
   2fbb2:	009b      	lsls	r3, r3, #2
   2fbb4:	18fb      	adds	r3, r7, r3
   2fbb6:	681b      	ldr	r3, [r3, #0]
   2fbb8:	88da      	ldrh	r2, [r3, #6]
   2fbba:	68fb      	ldr	r3, [r7, #12]
   2fbbc:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2fbbe:	4b05      	ldr	r3, [pc, #20]	; (2fbd4 <f_open+0x52c>)
   2fbc0:	18fb      	adds	r3, r7, r3
   2fbc2:	781b      	ldrb	r3, [r3, #0]
}
   2fbc4:	0018      	movs	r0, r3
   2fbc6:	46bd      	mov	sp, r7
   2fbc8:	2395      	movs	r3, #149	; 0x95
   2fbca:	009b      	lsls	r3, r3, #2
   2fbcc:	449d      	add	sp, r3
   2fbce:	bd90      	pop	{r4, r7, pc}
   2fbd0:	fffffdb7 	.word	0xfffffdb7
   2fbd4:	0000024f 	.word	0x0000024f

0002fbd8 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2fbd8:	b590      	push	{r4, r7, lr}
   2fbda:	b08b      	sub	sp, #44	; 0x2c
   2fbdc:	af00      	add	r7, sp, #0
   2fbde:	60f8      	str	r0, [r7, #12]
   2fbe0:	60b9      	str	r1, [r7, #8]
   2fbe2:	607a      	str	r2, [r7, #4]
   2fbe4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2fbe6:	68bb      	ldr	r3, [r7, #8]
   2fbe8:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2fbea:	683b      	ldr	r3, [r7, #0]
   2fbec:	2200      	movs	r2, #0
   2fbee:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2fbf0:	68fb      	ldr	r3, [r7, #12]
   2fbf2:	681a      	ldr	r2, [r3, #0]
   2fbf4:	68fb      	ldr	r3, [r7, #12]
   2fbf6:	889b      	ldrh	r3, [r3, #4]
   2fbf8:	2117      	movs	r1, #23
   2fbfa:	187c      	adds	r4, r7, r1
   2fbfc:	0019      	movs	r1, r3
   2fbfe:	0010      	movs	r0, r2
   2fc00:	4bc3      	ldr	r3, [pc, #780]	; (2ff10 <f_write+0x338>)
   2fc02:	4798      	blx	r3
   2fc04:	0003      	movs	r3, r0
   2fc06:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2fc08:	2317      	movs	r3, #23
   2fc0a:	18fb      	adds	r3, r7, r3
   2fc0c:	781b      	ldrb	r3, [r3, #0]
   2fc0e:	2b00      	cmp	r3, #0
   2fc10:	d003      	beq.n	2fc1a <f_write+0x42>
   2fc12:	2317      	movs	r3, #23
   2fc14:	18fb      	adds	r3, r7, r3
   2fc16:	781b      	ldrb	r3, [r3, #0]
   2fc18:	e176      	b.n	2ff08 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2fc1a:	68fb      	ldr	r3, [r7, #12]
   2fc1c:	799b      	ldrb	r3, [r3, #6]
   2fc1e:	b25b      	sxtb	r3, r3
   2fc20:	2b00      	cmp	r3, #0
   2fc22:	da01      	bge.n	2fc28 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2fc24:	2302      	movs	r3, #2
   2fc26:	e16f      	b.n	2ff08 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2fc28:	68fb      	ldr	r3, [r7, #12]
   2fc2a:	799b      	ldrb	r3, [r3, #6]
   2fc2c:	001a      	movs	r2, r3
   2fc2e:	2302      	movs	r3, #2
   2fc30:	4013      	ands	r3, r2
   2fc32:	d101      	bne.n	2fc38 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2fc34:	2307      	movs	r3, #7
   2fc36:	e167      	b.n	2ff08 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2fc38:	68fb      	ldr	r3, [r7, #12]
   2fc3a:	68da      	ldr	r2, [r3, #12]
   2fc3c:	687b      	ldr	r3, [r7, #4]
   2fc3e:	18d2      	adds	r2, r2, r3
   2fc40:	68fb      	ldr	r3, [r7, #12]
   2fc42:	68db      	ldr	r3, [r3, #12]
   2fc44:	429a      	cmp	r2, r3
   2fc46:	d300      	bcc.n	2fc4a <f_write+0x72>
   2fc48:	e146      	b.n	2fed8 <f_write+0x300>
   2fc4a:	2300      	movs	r3, #0
   2fc4c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2fc4e:	e143      	b.n	2fed8 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2fc50:	68fb      	ldr	r3, [r7, #12]
   2fc52:	689b      	ldr	r3, [r3, #8]
   2fc54:	05db      	lsls	r3, r3, #23
   2fc56:	0ddb      	lsrs	r3, r3, #23
   2fc58:	d000      	beq.n	2fc5c <f_write+0x84>
   2fc5a:	e0f6      	b.n	2fe4a <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2fc5c:	68fb      	ldr	r3, [r7, #12]
   2fc5e:	689b      	ldr	r3, [r3, #8]
   2fc60:	0a5b      	lsrs	r3, r3, #9
   2fc62:	b2da      	uxtb	r2, r3
   2fc64:	68fb      	ldr	r3, [r7, #12]
   2fc66:	681b      	ldr	r3, [r3, #0]
   2fc68:	789b      	ldrb	r3, [r3, #2]
   2fc6a:	3b01      	subs	r3, #1
   2fc6c:	b2d9      	uxtb	r1, r3
   2fc6e:	2316      	movs	r3, #22
   2fc70:	18fb      	adds	r3, r7, r3
   2fc72:	400a      	ands	r2, r1
   2fc74:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2fc76:	2316      	movs	r3, #22
   2fc78:	18fb      	adds	r3, r7, r3
   2fc7a:	781b      	ldrb	r3, [r3, #0]
   2fc7c:	2b00      	cmp	r3, #0
   2fc7e:	d140      	bne.n	2fd02 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2fc80:	68fb      	ldr	r3, [r7, #12]
   2fc82:	689b      	ldr	r3, [r3, #8]
   2fc84:	2b00      	cmp	r3, #0
   2fc86:	d111      	bne.n	2fcac <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2fc88:	68fb      	ldr	r3, [r7, #12]
   2fc8a:	691b      	ldr	r3, [r3, #16]
   2fc8c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2fc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fc90:	2b00      	cmp	r3, #0
   2fc92:	d115      	bne.n	2fcc0 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2fc94:	68fb      	ldr	r3, [r7, #12]
   2fc96:	681b      	ldr	r3, [r3, #0]
   2fc98:	2100      	movs	r1, #0
   2fc9a:	0018      	movs	r0, r3
   2fc9c:	4b9d      	ldr	r3, [pc, #628]	; (2ff14 <f_write+0x33c>)
   2fc9e:	4798      	blx	r3
   2fca0:	0003      	movs	r3, r0
   2fca2:	627b      	str	r3, [r7, #36]	; 0x24
   2fca4:	68fb      	ldr	r3, [r7, #12]
   2fca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2fca8:	611a      	str	r2, [r3, #16]
   2fcaa:	e009      	b.n	2fcc0 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2fcac:	68fb      	ldr	r3, [r7, #12]
   2fcae:	681a      	ldr	r2, [r3, #0]
   2fcb0:	68fb      	ldr	r3, [r7, #12]
   2fcb2:	695b      	ldr	r3, [r3, #20]
   2fcb4:	0019      	movs	r1, r3
   2fcb6:	0010      	movs	r0, r2
   2fcb8:	4b96      	ldr	r3, [pc, #600]	; (2ff14 <f_write+0x33c>)
   2fcba:	4798      	blx	r3
   2fcbc:	0003      	movs	r3, r0
   2fcbe:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2fcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fcc2:	2b00      	cmp	r3, #0
   2fcc4:	d100      	bne.n	2fcc8 <f_write+0xf0>
   2fcc6:	e10c      	b.n	2fee2 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2fcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fcca:	2b01      	cmp	r3, #1
   2fccc:	d109      	bne.n	2fce2 <f_write+0x10a>
   2fcce:	68fb      	ldr	r3, [r7, #12]
   2fcd0:	799b      	ldrb	r3, [r3, #6]
   2fcd2:	2280      	movs	r2, #128	; 0x80
   2fcd4:	4252      	negs	r2, r2
   2fcd6:	4313      	orrs	r3, r2
   2fcd8:	b2da      	uxtb	r2, r3
   2fcda:	68fb      	ldr	r3, [r7, #12]
   2fcdc:	719a      	strb	r2, [r3, #6]
   2fcde:	2302      	movs	r3, #2
   2fce0:	e112      	b.n	2ff08 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2fce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fce4:	3301      	adds	r3, #1
   2fce6:	d109      	bne.n	2fcfc <f_write+0x124>
   2fce8:	68fb      	ldr	r3, [r7, #12]
   2fcea:	799b      	ldrb	r3, [r3, #6]
   2fcec:	2280      	movs	r2, #128	; 0x80
   2fcee:	4252      	negs	r2, r2
   2fcf0:	4313      	orrs	r3, r2
   2fcf2:	b2da      	uxtb	r2, r3
   2fcf4:	68fb      	ldr	r3, [r7, #12]
   2fcf6:	719a      	strb	r2, [r3, #6]
   2fcf8:	2301      	movs	r3, #1
   2fcfa:	e105      	b.n	2ff08 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2fcfc:	68fb      	ldr	r3, [r7, #12]
   2fcfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2fd00:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2fd02:	68fb      	ldr	r3, [r7, #12]
   2fd04:	681b      	ldr	r3, [r3, #0]
   2fd06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2fd08:	68fb      	ldr	r3, [r7, #12]
   2fd0a:	699b      	ldr	r3, [r3, #24]
   2fd0c:	429a      	cmp	r2, r3
   2fd0e:	d111      	bne.n	2fd34 <f_write+0x15c>
   2fd10:	68fb      	ldr	r3, [r7, #12]
   2fd12:	681b      	ldr	r3, [r3, #0]
   2fd14:	2100      	movs	r1, #0
   2fd16:	0018      	movs	r0, r3
   2fd18:	4b7f      	ldr	r3, [pc, #508]	; (2ff18 <f_write+0x340>)
   2fd1a:	4798      	blx	r3
   2fd1c:	1e03      	subs	r3, r0, #0
   2fd1e:	d009      	beq.n	2fd34 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2fd20:	68fb      	ldr	r3, [r7, #12]
   2fd22:	799b      	ldrb	r3, [r3, #6]
   2fd24:	2280      	movs	r2, #128	; 0x80
   2fd26:	4252      	negs	r2, r2
   2fd28:	4313      	orrs	r3, r2
   2fd2a:	b2da      	uxtb	r2, r3
   2fd2c:	68fb      	ldr	r3, [r7, #12]
   2fd2e:	719a      	strb	r2, [r3, #6]
   2fd30:	2301      	movs	r3, #1
   2fd32:	e0e9      	b.n	2ff08 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2fd34:	68fb      	ldr	r3, [r7, #12]
   2fd36:	681a      	ldr	r2, [r3, #0]
   2fd38:	68fb      	ldr	r3, [r7, #12]
   2fd3a:	695b      	ldr	r3, [r3, #20]
   2fd3c:	0019      	movs	r1, r3
   2fd3e:	0010      	movs	r0, r2
   2fd40:	4b76      	ldr	r3, [pc, #472]	; (2ff1c <f_write+0x344>)
   2fd42:	4798      	blx	r3
   2fd44:	0003      	movs	r3, r0
   2fd46:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2fd48:	693b      	ldr	r3, [r7, #16]
   2fd4a:	2b00      	cmp	r3, #0
   2fd4c:	d109      	bne.n	2fd62 <f_write+0x18a>
   2fd4e:	68fb      	ldr	r3, [r7, #12]
   2fd50:	799b      	ldrb	r3, [r3, #6]
   2fd52:	2280      	movs	r2, #128	; 0x80
   2fd54:	4252      	negs	r2, r2
   2fd56:	4313      	orrs	r3, r2
   2fd58:	b2da      	uxtb	r2, r3
   2fd5a:	68fb      	ldr	r3, [r7, #12]
   2fd5c:	719a      	strb	r2, [r3, #6]
   2fd5e:	2302      	movs	r3, #2
   2fd60:	e0d2      	b.n	2ff08 <f_write+0x330>
			sect += csect;
   2fd62:	2316      	movs	r3, #22
   2fd64:	18fb      	adds	r3, r7, r3
   2fd66:	781b      	ldrb	r3, [r3, #0]
   2fd68:	693a      	ldr	r2, [r7, #16]
   2fd6a:	18d3      	adds	r3, r2, r3
   2fd6c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2fd6e:	687b      	ldr	r3, [r7, #4]
   2fd70:	0a5b      	lsrs	r3, r3, #9
   2fd72:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2fd74:	69fb      	ldr	r3, [r7, #28]
   2fd76:	2b00      	cmp	r3, #0
   2fd78:	d048      	beq.n	2fe0c <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2fd7a:	2316      	movs	r3, #22
   2fd7c:	18fb      	adds	r3, r7, r3
   2fd7e:	781a      	ldrb	r2, [r3, #0]
   2fd80:	69fb      	ldr	r3, [r7, #28]
   2fd82:	18d2      	adds	r2, r2, r3
   2fd84:	68fb      	ldr	r3, [r7, #12]
   2fd86:	681b      	ldr	r3, [r3, #0]
   2fd88:	789b      	ldrb	r3, [r3, #2]
   2fd8a:	429a      	cmp	r2, r3
   2fd8c:	d908      	bls.n	2fda0 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2fd8e:	68fb      	ldr	r3, [r7, #12]
   2fd90:	681b      	ldr	r3, [r3, #0]
   2fd92:	789b      	ldrb	r3, [r3, #2]
   2fd94:	001a      	movs	r2, r3
   2fd96:	2316      	movs	r3, #22
   2fd98:	18fb      	adds	r3, r7, r3
   2fd9a:	781b      	ldrb	r3, [r3, #0]
   2fd9c:	1ad3      	subs	r3, r2, r3
   2fd9e:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2fda0:	68fb      	ldr	r3, [r7, #12]
   2fda2:	681b      	ldr	r3, [r3, #0]
   2fda4:	7858      	ldrb	r0, [r3, #1]
   2fda6:	69fb      	ldr	r3, [r7, #28]
   2fda8:	b2db      	uxtb	r3, r3
   2fdaa:	693a      	ldr	r2, [r7, #16]
   2fdac:	69b9      	ldr	r1, [r7, #24]
   2fdae:	4c5c      	ldr	r4, [pc, #368]	; (2ff20 <f_write+0x348>)
   2fdb0:	47a0      	blx	r4
   2fdb2:	1e03      	subs	r3, r0, #0
   2fdb4:	d009      	beq.n	2fdca <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2fdb6:	68fb      	ldr	r3, [r7, #12]
   2fdb8:	799b      	ldrb	r3, [r3, #6]
   2fdba:	2280      	movs	r2, #128	; 0x80
   2fdbc:	4252      	negs	r2, r2
   2fdbe:	4313      	orrs	r3, r2
   2fdc0:	b2da      	uxtb	r2, r3
   2fdc2:	68fb      	ldr	r3, [r7, #12]
   2fdc4:	719a      	strb	r2, [r3, #6]
   2fdc6:	2301      	movs	r3, #1
   2fdc8:	e09e      	b.n	2ff08 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2fdca:	68fb      	ldr	r3, [r7, #12]
   2fdcc:	681b      	ldr	r3, [r3, #0]
   2fdce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2fdd0:	693b      	ldr	r3, [r7, #16]
   2fdd2:	1ad2      	subs	r2, r2, r3
   2fdd4:	69fb      	ldr	r3, [r7, #28]
   2fdd6:	429a      	cmp	r2, r3
   2fdd8:	d214      	bcs.n	2fe04 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2fdda:	68fb      	ldr	r3, [r7, #12]
   2fddc:	681b      	ldr	r3, [r3, #0]
   2fdde:	3330      	adds	r3, #48	; 0x30
   2fde0:	0018      	movs	r0, r3
   2fde2:	68fb      	ldr	r3, [r7, #12]
   2fde4:	681b      	ldr	r3, [r3, #0]
   2fde6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2fde8:	693b      	ldr	r3, [r7, #16]
   2fdea:	1ad3      	subs	r3, r2, r3
   2fdec:	025b      	lsls	r3, r3, #9
   2fdee:	69ba      	ldr	r2, [r7, #24]
   2fdf0:	18d1      	adds	r1, r2, r3
   2fdf2:	2380      	movs	r3, #128	; 0x80
   2fdf4:	009b      	lsls	r3, r3, #2
   2fdf6:	001a      	movs	r2, r3
   2fdf8:	4b4a      	ldr	r3, [pc, #296]	; (2ff24 <f_write+0x34c>)
   2fdfa:	4798      	blx	r3
					fp->fs->wflag = 0;
   2fdfc:	68fb      	ldr	r3, [r7, #12]
   2fdfe:	681b      	ldr	r3, [r3, #0]
   2fe00:	2200      	movs	r2, #0
   2fe02:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2fe04:	69fb      	ldr	r3, [r7, #28]
   2fe06:	025b      	lsls	r3, r3, #9
   2fe08:	623b      	str	r3, [r7, #32]
				continue;
   2fe0a:	e051      	b.n	2feb0 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2fe0c:	68fb      	ldr	r3, [r7, #12]
   2fe0e:	689a      	ldr	r2, [r3, #8]
   2fe10:	68fb      	ldr	r3, [r7, #12]
   2fe12:	68db      	ldr	r3, [r3, #12]
   2fe14:	429a      	cmp	r2, r3
   2fe16:	d315      	bcc.n	2fe44 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2fe18:	68fb      	ldr	r3, [r7, #12]
   2fe1a:	681b      	ldr	r3, [r3, #0]
   2fe1c:	2100      	movs	r1, #0
   2fe1e:	0018      	movs	r0, r3
   2fe20:	4b3d      	ldr	r3, [pc, #244]	; (2ff18 <f_write+0x340>)
   2fe22:	4798      	blx	r3
   2fe24:	1e03      	subs	r3, r0, #0
   2fe26:	d009      	beq.n	2fe3c <f_write+0x264>
   2fe28:	68fb      	ldr	r3, [r7, #12]
   2fe2a:	799b      	ldrb	r3, [r3, #6]
   2fe2c:	2280      	movs	r2, #128	; 0x80
   2fe2e:	4252      	negs	r2, r2
   2fe30:	4313      	orrs	r3, r2
   2fe32:	b2da      	uxtb	r2, r3
   2fe34:	68fb      	ldr	r3, [r7, #12]
   2fe36:	719a      	strb	r2, [r3, #6]
   2fe38:	2301      	movs	r3, #1
   2fe3a:	e065      	b.n	2ff08 <f_write+0x330>
				fp->fs->winsect = sect;
   2fe3c:	68fb      	ldr	r3, [r7, #12]
   2fe3e:	681b      	ldr	r3, [r3, #0]
   2fe40:	693a      	ldr	r2, [r7, #16]
   2fe42:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2fe44:	68fb      	ldr	r3, [r7, #12]
   2fe46:	693a      	ldr	r2, [r7, #16]
   2fe48:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2fe4a:	68fb      	ldr	r3, [r7, #12]
   2fe4c:	689b      	ldr	r3, [r3, #8]
   2fe4e:	05db      	lsls	r3, r3, #23
   2fe50:	0ddb      	lsrs	r3, r3, #23
   2fe52:	2280      	movs	r2, #128	; 0x80
   2fe54:	0092      	lsls	r2, r2, #2
   2fe56:	1ad3      	subs	r3, r2, r3
   2fe58:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2fe5a:	6a3a      	ldr	r2, [r7, #32]
   2fe5c:	687b      	ldr	r3, [r7, #4]
   2fe5e:	429a      	cmp	r2, r3
   2fe60:	d901      	bls.n	2fe66 <f_write+0x28e>
   2fe62:	687b      	ldr	r3, [r7, #4]
   2fe64:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2fe66:	68fb      	ldr	r3, [r7, #12]
   2fe68:	681a      	ldr	r2, [r3, #0]
   2fe6a:	68fb      	ldr	r3, [r7, #12]
   2fe6c:	699b      	ldr	r3, [r3, #24]
   2fe6e:	0019      	movs	r1, r3
   2fe70:	0010      	movs	r0, r2
   2fe72:	4b29      	ldr	r3, [pc, #164]	; (2ff18 <f_write+0x340>)
   2fe74:	4798      	blx	r3
   2fe76:	1e03      	subs	r3, r0, #0
   2fe78:	d009      	beq.n	2fe8e <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2fe7a:	68fb      	ldr	r3, [r7, #12]
   2fe7c:	799b      	ldrb	r3, [r3, #6]
   2fe7e:	2280      	movs	r2, #128	; 0x80
   2fe80:	4252      	negs	r2, r2
   2fe82:	4313      	orrs	r3, r2
   2fe84:	b2da      	uxtb	r2, r3
   2fe86:	68fb      	ldr	r3, [r7, #12]
   2fe88:	719a      	strb	r2, [r3, #6]
   2fe8a:	2301      	movs	r3, #1
   2fe8c:	e03c      	b.n	2ff08 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2fe8e:	68fb      	ldr	r3, [r7, #12]
   2fe90:	681a      	ldr	r2, [r3, #0]
   2fe92:	68fb      	ldr	r3, [r7, #12]
   2fe94:	689b      	ldr	r3, [r3, #8]
   2fe96:	05db      	lsls	r3, r3, #23
   2fe98:	0ddb      	lsrs	r3, r3, #23
   2fe9a:	3330      	adds	r3, #48	; 0x30
   2fe9c:	18d3      	adds	r3, r2, r3
   2fe9e:	6a3a      	ldr	r2, [r7, #32]
   2fea0:	69b9      	ldr	r1, [r7, #24]
   2fea2:	0018      	movs	r0, r3
   2fea4:	4b1f      	ldr	r3, [pc, #124]	; (2ff24 <f_write+0x34c>)
   2fea6:	4798      	blx	r3
		fp->fs->wflag = 1;
   2fea8:	68fb      	ldr	r3, [r7, #12]
   2feaa:	681b      	ldr	r3, [r3, #0]
   2feac:	2201      	movs	r2, #1
   2feae:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2feb0:	69ba      	ldr	r2, [r7, #24]
   2feb2:	6a3b      	ldr	r3, [r7, #32]
   2feb4:	18d3      	adds	r3, r2, r3
   2feb6:	61bb      	str	r3, [r7, #24]
   2feb8:	68fb      	ldr	r3, [r7, #12]
   2feba:	689a      	ldr	r2, [r3, #8]
   2febc:	6a3b      	ldr	r3, [r7, #32]
   2febe:	18d2      	adds	r2, r2, r3
   2fec0:	68fb      	ldr	r3, [r7, #12]
   2fec2:	609a      	str	r2, [r3, #8]
   2fec4:	683b      	ldr	r3, [r7, #0]
   2fec6:	681a      	ldr	r2, [r3, #0]
   2fec8:	6a3b      	ldr	r3, [r7, #32]
   2feca:	18d2      	adds	r2, r2, r3
   2fecc:	683b      	ldr	r3, [r7, #0]
   2fece:	601a      	str	r2, [r3, #0]
   2fed0:	687a      	ldr	r2, [r7, #4]
   2fed2:	6a3b      	ldr	r3, [r7, #32]
   2fed4:	1ad3      	subs	r3, r2, r3
   2fed6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2fed8:	687b      	ldr	r3, [r7, #4]
   2feda:	2b00      	cmp	r3, #0
   2fedc:	d000      	beq.n	2fee0 <f_write+0x308>
   2fede:	e6b7      	b.n	2fc50 <f_write+0x78>
   2fee0:	e000      	b.n	2fee4 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2fee2:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2fee4:	68fb      	ldr	r3, [r7, #12]
   2fee6:	689a      	ldr	r2, [r3, #8]
   2fee8:	68fb      	ldr	r3, [r7, #12]
   2feea:	68db      	ldr	r3, [r3, #12]
   2feec:	429a      	cmp	r2, r3
   2feee:	d903      	bls.n	2fef8 <f_write+0x320>
   2fef0:	68fb      	ldr	r3, [r7, #12]
   2fef2:	689a      	ldr	r2, [r3, #8]
   2fef4:	68fb      	ldr	r3, [r7, #12]
   2fef6:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2fef8:	68fb      	ldr	r3, [r7, #12]
   2fefa:	799b      	ldrb	r3, [r3, #6]
   2fefc:	2220      	movs	r2, #32
   2fefe:	4313      	orrs	r3, r2
   2ff00:	b2da      	uxtb	r2, r3
   2ff02:	68fb      	ldr	r3, [r7, #12]
   2ff04:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2ff06:	2300      	movs	r3, #0
}
   2ff08:	0018      	movs	r0, r3
   2ff0a:	46bd      	mov	sp, r7
   2ff0c:	b00b      	add	sp, #44	; 0x2c
   2ff0e:	bd90      	pop	{r4, r7, pc}
   2ff10:	0002f655 	.word	0x0002f655
   2ff14:	0002dce1 	.word	0x0002dce1
   2ff18:	0002d5d9 	.word	0x0002d5d9
   2ff1c:	0002d839 	.word	0x0002d839
   2ff20:	0002d2c5 	.word	0x0002d2c5
   2ff24:	0002d4f5 	.word	0x0002d4f5

0002ff28 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2ff28:	b590      	push	{r4, r7, lr}
   2ff2a:	b087      	sub	sp, #28
   2ff2c:	af00      	add	r7, sp, #0
   2ff2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2ff30:	687b      	ldr	r3, [r7, #4]
   2ff32:	681a      	ldr	r2, [r3, #0]
   2ff34:	687b      	ldr	r3, [r7, #4]
   2ff36:	889b      	ldrh	r3, [r3, #4]
   2ff38:	2117      	movs	r1, #23
   2ff3a:	187c      	adds	r4, r7, r1
   2ff3c:	0019      	movs	r1, r3
   2ff3e:	0010      	movs	r0, r2
   2ff40:	4b55      	ldr	r3, [pc, #340]	; (30098 <f_sync+0x170>)
   2ff42:	4798      	blx	r3
   2ff44:	0003      	movs	r3, r0
   2ff46:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2ff48:	2317      	movs	r3, #23
   2ff4a:	18fb      	adds	r3, r7, r3
   2ff4c:	781b      	ldrb	r3, [r3, #0]
   2ff4e:	2b00      	cmp	r3, #0
   2ff50:	d000      	beq.n	2ff54 <f_sync+0x2c>
   2ff52:	e09a      	b.n	3008a <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2ff54:	687b      	ldr	r3, [r7, #4]
   2ff56:	799b      	ldrb	r3, [r3, #6]
   2ff58:	001a      	movs	r2, r3
   2ff5a:	2320      	movs	r3, #32
   2ff5c:	4013      	ands	r3, r2
   2ff5e:	d100      	bne.n	2ff62 <f_sync+0x3a>
   2ff60:	e093      	b.n	3008a <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2ff62:	687b      	ldr	r3, [r7, #4]
   2ff64:	681a      	ldr	r2, [r3, #0]
   2ff66:	687b      	ldr	r3, [r7, #4]
   2ff68:	69db      	ldr	r3, [r3, #28]
   2ff6a:	2117      	movs	r1, #23
   2ff6c:	187c      	adds	r4, r7, r1
   2ff6e:	0019      	movs	r1, r3
   2ff70:	0010      	movs	r0, r2
   2ff72:	4b4a      	ldr	r3, [pc, #296]	; (3009c <f_sync+0x174>)
   2ff74:	4798      	blx	r3
   2ff76:	0003      	movs	r3, r0
   2ff78:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2ff7a:	2317      	movs	r3, #23
   2ff7c:	18fb      	adds	r3, r7, r3
   2ff7e:	781b      	ldrb	r3, [r3, #0]
   2ff80:	2b00      	cmp	r3, #0
   2ff82:	d000      	beq.n	2ff86 <f_sync+0x5e>
   2ff84:	e081      	b.n	3008a <f_sync+0x162>
				dir = fp->dir_ptr;
   2ff86:	687b      	ldr	r3, [r7, #4]
   2ff88:	6a1b      	ldr	r3, [r3, #32]
   2ff8a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2ff8c:	693b      	ldr	r3, [r7, #16]
   2ff8e:	330b      	adds	r3, #11
   2ff90:	693a      	ldr	r2, [r7, #16]
   2ff92:	320b      	adds	r2, #11
   2ff94:	7812      	ldrb	r2, [r2, #0]
   2ff96:	2120      	movs	r1, #32
   2ff98:	430a      	orrs	r2, r1
   2ff9a:	b2d2      	uxtb	r2, r2
   2ff9c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2ff9e:	693b      	ldr	r3, [r7, #16]
   2ffa0:	331c      	adds	r3, #28
   2ffa2:	001a      	movs	r2, r3
   2ffa4:	687b      	ldr	r3, [r7, #4]
   2ffa6:	68db      	ldr	r3, [r3, #12]
   2ffa8:	b2db      	uxtb	r3, r3
   2ffaa:	7013      	strb	r3, [r2, #0]
   2ffac:	693b      	ldr	r3, [r7, #16]
   2ffae:	331d      	adds	r3, #29
   2ffb0:	001a      	movs	r2, r3
   2ffb2:	687b      	ldr	r3, [r7, #4]
   2ffb4:	68db      	ldr	r3, [r3, #12]
   2ffb6:	b29b      	uxth	r3, r3
   2ffb8:	0a1b      	lsrs	r3, r3, #8
   2ffba:	b29b      	uxth	r3, r3
   2ffbc:	b2db      	uxtb	r3, r3
   2ffbe:	7013      	strb	r3, [r2, #0]
   2ffc0:	693b      	ldr	r3, [r7, #16]
   2ffc2:	331e      	adds	r3, #30
   2ffc4:	001a      	movs	r2, r3
   2ffc6:	687b      	ldr	r3, [r7, #4]
   2ffc8:	68db      	ldr	r3, [r3, #12]
   2ffca:	0c1b      	lsrs	r3, r3, #16
   2ffcc:	b2db      	uxtb	r3, r3
   2ffce:	7013      	strb	r3, [r2, #0]
   2ffd0:	693b      	ldr	r3, [r7, #16]
   2ffd2:	331f      	adds	r3, #31
   2ffd4:	001a      	movs	r2, r3
   2ffd6:	687b      	ldr	r3, [r7, #4]
   2ffd8:	68db      	ldr	r3, [r3, #12]
   2ffda:	0e1b      	lsrs	r3, r3, #24
   2ffdc:	b2db      	uxtb	r3, r3
   2ffde:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2ffe0:	693b      	ldr	r3, [r7, #16]
   2ffe2:	331a      	adds	r3, #26
   2ffe4:	001a      	movs	r2, r3
   2ffe6:	687b      	ldr	r3, [r7, #4]
   2ffe8:	691b      	ldr	r3, [r3, #16]
   2ffea:	b2db      	uxtb	r3, r3
   2ffec:	7013      	strb	r3, [r2, #0]
   2ffee:	693b      	ldr	r3, [r7, #16]
   2fff0:	331b      	adds	r3, #27
   2fff2:	001a      	movs	r2, r3
   2fff4:	687b      	ldr	r3, [r7, #4]
   2fff6:	691b      	ldr	r3, [r3, #16]
   2fff8:	b29b      	uxth	r3, r3
   2fffa:	0a1b      	lsrs	r3, r3, #8
   2fffc:	b29b      	uxth	r3, r3
   2fffe:	b2db      	uxtb	r3, r3
   30000:	7013      	strb	r3, [r2, #0]
   30002:	693b      	ldr	r3, [r7, #16]
   30004:	3314      	adds	r3, #20
   30006:	001a      	movs	r2, r3
   30008:	687b      	ldr	r3, [r7, #4]
   3000a:	691b      	ldr	r3, [r3, #16]
   3000c:	0c1b      	lsrs	r3, r3, #16
   3000e:	b2db      	uxtb	r3, r3
   30010:	7013      	strb	r3, [r2, #0]
   30012:	693b      	ldr	r3, [r7, #16]
   30014:	3315      	adds	r3, #21
   30016:	001a      	movs	r2, r3
   30018:	687b      	ldr	r3, [r7, #4]
   3001a:	691b      	ldr	r3, [r3, #16]
   3001c:	0c1b      	lsrs	r3, r3, #16
   3001e:	b29b      	uxth	r3, r3
   30020:	0a1b      	lsrs	r3, r3, #8
   30022:	b29b      	uxth	r3, r3
   30024:	b2db      	uxtb	r3, r3
   30026:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   30028:	4b1d      	ldr	r3, [pc, #116]	; (300a0 <f_sync+0x178>)
   3002a:	4798      	blx	r3
   3002c:	0003      	movs	r3, r0
   3002e:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   30030:	693b      	ldr	r3, [r7, #16]
   30032:	3316      	adds	r3, #22
   30034:	68fa      	ldr	r2, [r7, #12]
   30036:	b2d2      	uxtb	r2, r2
   30038:	701a      	strb	r2, [r3, #0]
   3003a:	693b      	ldr	r3, [r7, #16]
   3003c:	3317      	adds	r3, #23
   3003e:	68fa      	ldr	r2, [r7, #12]
   30040:	b292      	uxth	r2, r2
   30042:	0a12      	lsrs	r2, r2, #8
   30044:	b292      	uxth	r2, r2
   30046:	b2d2      	uxtb	r2, r2
   30048:	701a      	strb	r2, [r3, #0]
   3004a:	693b      	ldr	r3, [r7, #16]
   3004c:	3318      	adds	r3, #24
   3004e:	68fa      	ldr	r2, [r7, #12]
   30050:	0c12      	lsrs	r2, r2, #16
   30052:	b2d2      	uxtb	r2, r2
   30054:	701a      	strb	r2, [r3, #0]
   30056:	693b      	ldr	r3, [r7, #16]
   30058:	3319      	adds	r3, #25
   3005a:	68fa      	ldr	r2, [r7, #12]
   3005c:	0e12      	lsrs	r2, r2, #24
   3005e:	b2d2      	uxtb	r2, r2
   30060:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   30062:	687b      	ldr	r3, [r7, #4]
   30064:	799b      	ldrb	r3, [r3, #6]
   30066:	2220      	movs	r2, #32
   30068:	4393      	bics	r3, r2
   3006a:	b2da      	uxtb	r2, r3
   3006c:	687b      	ldr	r3, [r7, #4]
   3006e:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   30070:	687b      	ldr	r3, [r7, #4]
   30072:	681b      	ldr	r3, [r3, #0]
   30074:	2201      	movs	r2, #1
   30076:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   30078:	687b      	ldr	r3, [r7, #4]
   3007a:	681b      	ldr	r3, [r3, #0]
   3007c:	2217      	movs	r2, #23
   3007e:	18bc      	adds	r4, r7, r2
   30080:	0018      	movs	r0, r3
   30082:	4b08      	ldr	r3, [pc, #32]	; (300a4 <f_sync+0x17c>)
   30084:	4798      	blx	r3
   30086:	0003      	movs	r3, r0
   30088:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   3008a:	2317      	movs	r3, #23
   3008c:	18fb      	adds	r3, r7, r3
   3008e:	781b      	ldrb	r3, [r3, #0]
}
   30090:	0018      	movs	r0, r3
   30092:	46bd      	mov	sp, r7
   30094:	b007      	add	sp, #28
   30096:	bd90      	pop	{r4, r7, pc}
   30098:	0002f655 	.word	0x0002f655
   3009c:	0002d5d9 	.word	0x0002d5d9
   300a0:	0002d495 	.word	0x0002d495
   300a4:	0002d6a1 	.word	0x0002d6a1

000300a8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   300a8:	b590      	push	{r4, r7, lr}
   300aa:	b085      	sub	sp, #20
   300ac:	af00      	add	r7, sp, #0
   300ae:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   300b0:	230f      	movs	r3, #15
   300b2:	18fc      	adds	r4, r7, r3
   300b4:	687b      	ldr	r3, [r7, #4]
   300b6:	0018      	movs	r0, r3
   300b8:	4b09      	ldr	r3, [pc, #36]	; (300e0 <f_close+0x38>)
   300ba:	4798      	blx	r3
   300bc:	0003      	movs	r3, r0
   300be:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   300c0:	230f      	movs	r3, #15
   300c2:	18fb      	adds	r3, r7, r3
   300c4:	781b      	ldrb	r3, [r3, #0]
   300c6:	2b00      	cmp	r3, #0
   300c8:	d102      	bne.n	300d0 <f_close+0x28>
   300ca:	687b      	ldr	r3, [r7, #4]
   300cc:	2200      	movs	r2, #0
   300ce:	601a      	str	r2, [r3, #0]
	return res;
   300d0:	230f      	movs	r3, #15
   300d2:	18fb      	adds	r3, r7, r3
   300d4:	781b      	ldrb	r3, [r3, #0]
#endif
}
   300d6:	0018      	movs	r0, r3
   300d8:	46bd      	mov	sp, r7
   300da:	b005      	add	sp, #20
   300dc:	bd90      	pop	{r4, r7, pc}
   300de:	46c0      	nop			; (mov r8, r8)
   300e0:	0002ff29 	.word	0x0002ff29

000300e4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   300e4:	b580      	push	{r7, lr}
   300e6:	b084      	sub	sp, #16
   300e8:	af00      	add	r7, sp, #0
   300ea:	0002      	movs	r2, r0
   300ec:	6039      	str	r1, [r7, #0]
   300ee:	1dbb      	adds	r3, r7, #6
   300f0:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   300f2:	1dbb      	adds	r3, r7, #6
   300f4:	881b      	ldrh	r3, [r3, #0]
   300f6:	2b7f      	cmp	r3, #127	; 0x7f
   300f8:	d805      	bhi.n	30106 <ff_convert+0x22>
		c = src;
   300fa:	230e      	movs	r3, #14
   300fc:	18fb      	adds	r3, r7, r3
   300fe:	1dba      	adds	r2, r7, #6
   30100:	8812      	ldrh	r2, [r2, #0]
   30102:	801a      	strh	r2, [r3, #0]
   30104:	e03a      	b.n	3017c <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   30106:	683b      	ldr	r3, [r7, #0]
   30108:	2b00      	cmp	r3, #0
   3010a:	d010      	beq.n	3012e <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   3010c:	1dbb      	adds	r3, r7, #6
   3010e:	881b      	ldrh	r3, [r3, #0]
   30110:	2bff      	cmp	r3, #255	; 0xff
   30112:	d807      	bhi.n	30124 <ff_convert+0x40>
   30114:	1dbb      	adds	r3, r7, #6
   30116:	881b      	ldrh	r3, [r3, #0]
   30118:	3b80      	subs	r3, #128	; 0x80
   3011a:	001a      	movs	r2, r3
   3011c:	4b1b      	ldr	r3, [pc, #108]	; (3018c <ff_convert+0xa8>)
   3011e:	0052      	lsls	r2, r2, #1
   30120:	5ad2      	ldrh	r2, [r2, r3]
   30122:	e000      	b.n	30126 <ff_convert+0x42>
   30124:	2200      	movs	r2, #0
   30126:	230e      	movs	r3, #14
   30128:	18fb      	adds	r3, r7, r3
   3012a:	801a      	strh	r2, [r3, #0]
   3012c:	e026      	b.n	3017c <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   3012e:	230e      	movs	r3, #14
   30130:	18fb      	adds	r3, r7, r3
   30132:	2200      	movs	r2, #0
   30134:	801a      	strh	r2, [r3, #0]
   30136:	e010      	b.n	3015a <ff_convert+0x76>
				if (src == Tbl[c]) break;
   30138:	230e      	movs	r3, #14
   3013a:	18fb      	adds	r3, r7, r3
   3013c:	881a      	ldrh	r2, [r3, #0]
   3013e:	4b13      	ldr	r3, [pc, #76]	; (3018c <ff_convert+0xa8>)
   30140:	0052      	lsls	r2, r2, #1
   30142:	5ad3      	ldrh	r3, [r2, r3]
   30144:	1dba      	adds	r2, r7, #6
   30146:	8812      	ldrh	r2, [r2, #0]
   30148:	429a      	cmp	r2, r3
   3014a:	d00c      	beq.n	30166 <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   3014c:	230e      	movs	r3, #14
   3014e:	18fb      	adds	r3, r7, r3
   30150:	881a      	ldrh	r2, [r3, #0]
   30152:	230e      	movs	r3, #14
   30154:	18fb      	adds	r3, r7, r3
   30156:	3201      	adds	r2, #1
   30158:	801a      	strh	r2, [r3, #0]
   3015a:	230e      	movs	r3, #14
   3015c:	18fb      	adds	r3, r7, r3
   3015e:	881b      	ldrh	r3, [r3, #0]
   30160:	2b7f      	cmp	r3, #127	; 0x7f
   30162:	d9e9      	bls.n	30138 <ff_convert+0x54>
   30164:	e000      	b.n	30168 <ff_convert+0x84>
				if (src == Tbl[c]) break;
   30166:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   30168:	230e      	movs	r3, #14
   3016a:	18fb      	adds	r3, r7, r3
   3016c:	881b      	ldrh	r3, [r3, #0]
   3016e:	3380      	adds	r3, #128	; 0x80
   30170:	b29a      	uxth	r2, r3
   30172:	230e      	movs	r3, #14
   30174:	18fb      	adds	r3, r7, r3
   30176:	21ff      	movs	r1, #255	; 0xff
   30178:	400a      	ands	r2, r1
   3017a:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   3017c:	230e      	movs	r3, #14
   3017e:	18fb      	adds	r3, r7, r3
   30180:	881b      	ldrh	r3, [r3, #0]
}
   30182:	0018      	movs	r0, r3
   30184:	46bd      	mov	sp, r7
   30186:	b004      	add	sp, #16
   30188:	bd80      	pop	{r7, pc}
   3018a:	46c0      	nop			; (mov r8, r8)
   3018c:	0003bc00 	.word	0x0003bc00

00030190 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   30190:	b580      	push	{r7, lr}
   30192:	b084      	sub	sp, #16
   30194:	af00      	add	r7, sp, #0
   30196:	0002      	movs	r2, r0
   30198:	1dbb      	adds	r3, r7, #6
   3019a:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   3019c:	2300      	movs	r3, #0
   3019e:	60fb      	str	r3, [r7, #12]
   301a0:	e002      	b.n	301a8 <ff_wtoupper+0x18>
   301a2:	68fb      	ldr	r3, [r7, #12]
   301a4:	3301      	adds	r3, #1
   301a6:	60fb      	str	r3, [r7, #12]
   301a8:	4b0f      	ldr	r3, [pc, #60]	; (301e8 <ff_wtoupper+0x58>)
   301aa:	68fa      	ldr	r2, [r7, #12]
   301ac:	0052      	lsls	r2, r2, #1
   301ae:	5ad3      	ldrh	r3, [r2, r3]
   301b0:	2b00      	cmp	r3, #0
   301b2:	d007      	beq.n	301c4 <ff_wtoupper+0x34>
   301b4:	4b0c      	ldr	r3, [pc, #48]	; (301e8 <ff_wtoupper+0x58>)
   301b6:	68fa      	ldr	r2, [r7, #12]
   301b8:	0052      	lsls	r2, r2, #1
   301ba:	5ad3      	ldrh	r3, [r2, r3]
   301bc:	1dba      	adds	r2, r7, #6
   301be:	8812      	ldrh	r2, [r2, #0]
   301c0:	429a      	cmp	r2, r3
   301c2:	d1ee      	bne.n	301a2 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   301c4:	4b08      	ldr	r3, [pc, #32]	; (301e8 <ff_wtoupper+0x58>)
   301c6:	68fa      	ldr	r2, [r7, #12]
   301c8:	0052      	lsls	r2, r2, #1
   301ca:	5ad3      	ldrh	r3, [r2, r3]
   301cc:	2b00      	cmp	r3, #0
   301ce:	d004      	beq.n	301da <ff_wtoupper+0x4a>
   301d0:	4b06      	ldr	r3, [pc, #24]	; (301ec <ff_wtoupper+0x5c>)
   301d2:	68fa      	ldr	r2, [r7, #12]
   301d4:	0052      	lsls	r2, r2, #1
   301d6:	5ad3      	ldrh	r3, [r2, r3]
   301d8:	e001      	b.n	301de <ff_wtoupper+0x4e>
   301da:	1dbb      	adds	r3, r7, #6
   301dc:	881b      	ldrh	r3, [r3, #0]
}
   301de:	0018      	movs	r0, r3
   301e0:	46bd      	mov	sp, r7
   301e2:	b004      	add	sp, #16
   301e4:	bd80      	pop	{r7, pc}
   301e6:	46c0      	nop			; (mov r8, r8)
   301e8:	0003bd00 	.word	0x0003bd00
   301ec:	0003bee0 	.word	0x0003bee0

000301f0 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   301f0:	b580      	push	{r7, lr}
   301f2:	b084      	sub	sp, #16
   301f4:	af00      	add	r7, sp, #0
   301f6:	60f8      	str	r0, [r7, #12]
   301f8:	60b9      	str	r1, [r7, #8]
   301fa:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   301fc:	68fb      	ldr	r3, [r7, #12]
   301fe:	68ba      	ldr	r2, [r7, #8]
   30200:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   30202:	68fb      	ldr	r3, [r7, #12]
   30204:	687a      	ldr	r2, [r7, #4]
   30206:	601a      	str	r2, [r3, #0]
}
   30208:	46c0      	nop			; (mov r8, r8)
   3020a:	46bd      	mov	sp, r7
   3020c:	b004      	add	sp, #16
   3020e:	bd80      	pop	{r7, pc}

00030210 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   30210:	b580      	push	{r7, lr}
   30212:	b082      	sub	sp, #8
   30214:	af00      	add	r7, sp, #0
   30216:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   30218:	687b      	ldr	r3, [r7, #4]
   3021a:	681b      	ldr	r3, [r3, #0]
   3021c:	4a07      	ldr	r2, [pc, #28]	; (3023c <getNextPacketId+0x2c>)
   3021e:	4293      	cmp	r3, r2
   30220:	d003      	beq.n	3022a <getNextPacketId+0x1a>
   30222:	687b      	ldr	r3, [r7, #4]
   30224:	681b      	ldr	r3, [r3, #0]
   30226:	1c5a      	adds	r2, r3, #1
   30228:	e000      	b.n	3022c <getNextPacketId+0x1c>
   3022a:	2201      	movs	r2, #1
   3022c:	687b      	ldr	r3, [r7, #4]
   3022e:	601a      	str	r2, [r3, #0]
   30230:	687b      	ldr	r3, [r7, #4]
   30232:	681b      	ldr	r3, [r3, #0]
}
   30234:	0018      	movs	r0, r3
   30236:	46bd      	mov	sp, r7
   30238:	b002      	add	sp, #8
   3023a:	bd80      	pop	{r7, pc}
   3023c:	0000ffff 	.word	0x0000ffff

00030240 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   30240:	b5f0      	push	{r4, r5, r6, r7, lr}
   30242:	b087      	sub	sp, #28
   30244:	af00      	add	r7, sp, #0
   30246:	60f8      	str	r0, [r7, #12]
   30248:	60b9      	str	r1, [r7, #8]
   3024a:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   3024c:	2301      	movs	r3, #1
   3024e:	425b      	negs	r3, r3
   30250:	617b      	str	r3, [r7, #20]
        sent = 0;
   30252:	2300      	movs	r3, #0
   30254:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   30256:	e01a      	b.n	3028e <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   30258:	68fb      	ldr	r3, [r7, #12]
   3025a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   3025c:	68dc      	ldr	r4, [r3, #12]
   3025e:	68fb      	ldr	r3, [r7, #12]
   30260:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   30262:	68fb      	ldr	r3, [r7, #12]
   30264:	691a      	ldr	r2, [r3, #16]
   30266:	693b      	ldr	r3, [r7, #16]
   30268:	18d6      	adds	r6, r2, r3
   3026a:	687b      	ldr	r3, [r7, #4]
   3026c:	0018      	movs	r0, r3
   3026e:	4b1a      	ldr	r3, [pc, #104]	; (302d8 <sendPacket+0x98>)
   30270:	4798      	blx	r3
   30272:	0003      	movs	r3, r0
   30274:	68ba      	ldr	r2, [r7, #8]
   30276:	0031      	movs	r1, r6
   30278:	0028      	movs	r0, r5
   3027a:	47a0      	blx	r4
   3027c:	0003      	movs	r3, r0
   3027e:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   30280:	697b      	ldr	r3, [r7, #20]
   30282:	2b00      	cmp	r3, #0
   30284:	db0e      	blt.n	302a4 <sendPacket+0x64>
            break;
        sent += rc;
   30286:	693a      	ldr	r2, [r7, #16]
   30288:	697b      	ldr	r3, [r7, #20]
   3028a:	18d3      	adds	r3, r2, r3
   3028c:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   3028e:	693a      	ldr	r2, [r7, #16]
   30290:	68bb      	ldr	r3, [r7, #8]
   30292:	429a      	cmp	r2, r3
   30294:	da07      	bge.n	302a6 <sendPacket+0x66>
   30296:	687b      	ldr	r3, [r7, #4]
   30298:	0018      	movs	r0, r3
   3029a:	4b10      	ldr	r3, [pc, #64]	; (302dc <sendPacket+0x9c>)
   3029c:	4798      	blx	r3
   3029e:	1e03      	subs	r3, r0, #0
   302a0:	d0da      	beq.n	30258 <sendPacket+0x18>
   302a2:	e000      	b.n	302a6 <sendPacket+0x66>
            break;
   302a4:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   302a6:	693a      	ldr	r2, [r7, #16]
   302a8:	68bb      	ldr	r3, [r7, #8]
   302aa:	429a      	cmp	r2, r3
   302ac:	d10b      	bne.n	302c6 <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   302ae:	68fb      	ldr	r3, [r7, #12]
   302b0:	3354      	adds	r3, #84	; 0x54
   302b2:	001a      	movs	r2, r3
   302b4:	68fb      	ldr	r3, [r7, #12]
   302b6:	699b      	ldr	r3, [r3, #24]
   302b8:	0019      	movs	r1, r3
   302ba:	0010      	movs	r0, r2
   302bc:	4b08      	ldr	r3, [pc, #32]	; (302e0 <sendPacket+0xa0>)
   302be:	4798      	blx	r3
        rc = SUCCESS;
   302c0:	2300      	movs	r3, #0
   302c2:	617b      	str	r3, [r7, #20]
   302c4:	e002      	b.n	302cc <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   302c6:	2301      	movs	r3, #1
   302c8:	425b      	negs	r3, r3
   302ca:	617b      	str	r3, [r7, #20]
    return rc;
   302cc:	697b      	ldr	r3, [r7, #20]
}
   302ce:	0018      	movs	r0, r3
   302d0:	46bd      	mov	sp, r7
   302d2:	b007      	add	sp, #28
   302d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   302d6:	46c0      	nop			; (mov r8, r8)
   302d8:	000310a1 	.word	0x000310a1
   302dc:	00031025 	.word	0x00031025
   302e0:	00031079 	.word	0x00031079

000302e4 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   302e4:	b580      	push	{r7, lr}
   302e6:	b086      	sub	sp, #24
   302e8:	af00      	add	r7, sp, #0
   302ea:	60f8      	str	r0, [r7, #12]
   302ec:	60b9      	str	r1, [r7, #8]
   302ee:	607a      	str	r2, [r7, #4]
   302f0:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   302f2:	68fb      	ldr	r3, [r7, #12]
   302f4:	68ba      	ldr	r2, [r7, #8]
   302f6:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   302f8:	2300      	movs	r3, #0
   302fa:	617b      	str	r3, [r7, #20]
   302fc:	e00a      	b.n	30314 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   302fe:	68fa      	ldr	r2, [r7, #12]
   30300:	697b      	ldr	r3, [r7, #20]
   30302:	3304      	adds	r3, #4
   30304:	00db      	lsls	r3, r3, #3
   30306:	18d3      	adds	r3, r2, r3
   30308:	3304      	adds	r3, #4
   3030a:	2200      	movs	r2, #0
   3030c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   3030e:	697b      	ldr	r3, [r7, #20]
   30310:	3301      	adds	r3, #1
   30312:	617b      	str	r3, [r7, #20]
   30314:	697b      	ldr	r3, [r7, #20]
   30316:	2b04      	cmp	r3, #4
   30318:	ddf1      	ble.n	302fe <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   3031a:	68fb      	ldr	r3, [r7, #12]
   3031c:	687a      	ldr	r2, [r7, #4]
   3031e:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   30320:	68fb      	ldr	r3, [r7, #12]
   30322:	683a      	ldr	r2, [r7, #0]
   30324:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   30326:	68fb      	ldr	r3, [r7, #12]
   30328:	6a3a      	ldr	r2, [r7, #32]
   3032a:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   3032c:	68fb      	ldr	r3, [r7, #12]
   3032e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30330:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   30332:	68fb      	ldr	r3, [r7, #12]
   30334:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30336:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   30338:	68fb      	ldr	r3, [r7, #12]
   3033a:	2200      	movs	r2, #0
   3033c:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   3033e:	68fb      	ldr	r3, [r7, #12]
   30340:	2200      	movs	r2, #0
   30342:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   30344:	68fb      	ldr	r3, [r7, #12]
   30346:	2200      	movs	r2, #0
   30348:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   3034a:	68fb      	ldr	r3, [r7, #12]
   3034c:	2201      	movs	r2, #1
   3034e:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   30350:	68fb      	ldr	r3, [r7, #12]
   30352:	3354      	adds	r3, #84	; 0x54
   30354:	0018      	movs	r0, r3
   30356:	4b03      	ldr	r3, [pc, #12]	; (30364 <MQTTClientInit+0x80>)
   30358:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   3035a:	46c0      	nop			; (mov r8, r8)
   3035c:	46bd      	mov	sp, r7
   3035e:	b006      	add	sp, #24
   30360:	bd80      	pop	{r7, pc}
   30362:	46c0      	nop			; (mov r8, r8)
   30364:	000310c9 	.word	0x000310c9

00030368 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   30368:	b590      	push	{r4, r7, lr}
   3036a:	b08b      	sub	sp, #44	; 0x2c
   3036c:	af00      	add	r7, sp, #0
   3036e:	60f8      	str	r0, [r7, #12]
   30370:	60b9      	str	r1, [r7, #8]
   30372:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   30374:	2301      	movs	r3, #1
   30376:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   30378:	2300      	movs	r3, #0
   3037a:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   3037c:	2304      	movs	r3, #4
   3037e:	61fb      	str	r3, [r7, #28]

    *value = 0;
   30380:	68bb      	ldr	r3, [r7, #8]
   30382:	2200      	movs	r2, #0
   30384:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   30386:	2301      	movs	r3, #1
   30388:	425b      	negs	r3, r3
   3038a:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   3038c:	6a3b      	ldr	r3, [r7, #32]
   3038e:	3301      	adds	r3, #1
   30390:	623b      	str	r3, [r7, #32]
   30392:	6a3a      	ldr	r2, [r7, #32]
   30394:	69fb      	ldr	r3, [r7, #28]
   30396:	429a      	cmp	r2, r3
   30398:	dd03      	ble.n	303a2 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   3039a:	2301      	movs	r3, #1
   3039c:	425b      	negs	r3, r3
   3039e:	61bb      	str	r3, [r7, #24]
            goto exit;
   303a0:	e026      	b.n	303f0 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   303a2:	68fb      	ldr	r3, [r7, #12]
   303a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   303a6:	689c      	ldr	r4, [r3, #8]
   303a8:	68fb      	ldr	r3, [r7, #12]
   303aa:	6d18      	ldr	r0, [r3, #80]	; 0x50
   303ac:	687b      	ldr	r3, [r7, #4]
   303ae:	2217      	movs	r2, #23
   303b0:	18b9      	adds	r1, r7, r2
   303b2:	2201      	movs	r2, #1
   303b4:	47a0      	blx	r4
   303b6:	0003      	movs	r3, r0
   303b8:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   303ba:	69bb      	ldr	r3, [r7, #24]
   303bc:	2b01      	cmp	r3, #1
   303be:	d116      	bne.n	303ee <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   303c0:	68bb      	ldr	r3, [r7, #8]
   303c2:	681a      	ldr	r2, [r3, #0]
   303c4:	2317      	movs	r3, #23
   303c6:	18fb      	adds	r3, r7, r3
   303c8:	781b      	ldrb	r3, [r3, #0]
   303ca:	0019      	movs	r1, r3
   303cc:	237f      	movs	r3, #127	; 0x7f
   303ce:	400b      	ands	r3, r1
   303d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   303d2:	434b      	muls	r3, r1
   303d4:	18d2      	adds	r2, r2, r3
   303d6:	68bb      	ldr	r3, [r7, #8]
   303d8:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   303da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   303dc:	01db      	lsls	r3, r3, #7
   303de:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   303e0:	2317      	movs	r3, #23
   303e2:	18fb      	adds	r3, r7, r3
   303e4:	781b      	ldrb	r3, [r3, #0]
   303e6:	b25b      	sxtb	r3, r3
   303e8:	2b00      	cmp	r3, #0
   303ea:	dbcc      	blt.n	30386 <decodePacket+0x1e>
   303ec:	e000      	b.n	303f0 <decodePacket+0x88>
            goto exit;
   303ee:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   303f0:	6a3b      	ldr	r3, [r7, #32]
}
   303f2:	0018      	movs	r0, r3
   303f4:	46bd      	mov	sp, r7
   303f6:	b00b      	add	sp, #44	; 0x2c
   303f8:	bd90      	pop	{r4, r7, pc}
	...

000303fc <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   303fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   303fe:	46c6      	mov	lr, r8
   30400:	b500      	push	{lr}
   30402:	b086      	sub	sp, #24
   30404:	af00      	add	r7, sp, #0
   30406:	6078      	str	r0, [r7, #4]
   30408:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   3040a:	2301      	movs	r3, #1
   3040c:	425b      	negs	r3, r3
   3040e:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   30410:	2300      	movs	r3, #0
   30412:	60fb      	str	r3, [r7, #12]
    int len = 0;
   30414:	2300      	movs	r3, #0
   30416:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   30418:	2300      	movs	r3, #0
   3041a:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   3041c:	687b      	ldr	r3, [r7, #4]
   3041e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   30420:	689c      	ldr	r4, [r3, #8]
   30422:	687b      	ldr	r3, [r7, #4]
   30424:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   30426:	687b      	ldr	r3, [r7, #4]
   30428:	695e      	ldr	r6, [r3, #20]
   3042a:	683b      	ldr	r3, [r7, #0]
   3042c:	0018      	movs	r0, r3
   3042e:	4b2b      	ldr	r3, [pc, #172]	; (304dc <readPacket+0xe0>)
   30430:	4798      	blx	r3
   30432:	0003      	movs	r3, r0
   30434:	2201      	movs	r2, #1
   30436:	0031      	movs	r1, r6
   30438:	0028      	movs	r0, r5
   3043a:	47a0      	blx	r4
   3043c:	0003      	movs	r3, r0
   3043e:	2b01      	cmp	r3, #1
   30440:	d141      	bne.n	304c6 <readPacket+0xca>
        goto exit;

    len = 1;
   30442:	2301      	movs	r3, #1
   30444:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   30446:	683b      	ldr	r3, [r7, #0]
   30448:	0018      	movs	r0, r3
   3044a:	4b24      	ldr	r3, [pc, #144]	; (304dc <readPacket+0xe0>)
   3044c:	4798      	blx	r3
   3044e:	0002      	movs	r2, r0
   30450:	2308      	movs	r3, #8
   30452:	18f9      	adds	r1, r7, r3
   30454:	687b      	ldr	r3, [r7, #4]
   30456:	0018      	movs	r0, r3
   30458:	4b21      	ldr	r3, [pc, #132]	; (304e0 <readPacket+0xe4>)
   3045a:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   3045c:	687b      	ldr	r3, [r7, #4]
   3045e:	695b      	ldr	r3, [r3, #20]
   30460:	3301      	adds	r3, #1
   30462:	68ba      	ldr	r2, [r7, #8]
   30464:	0011      	movs	r1, r2
   30466:	0018      	movs	r0, r3
   30468:	4b1e      	ldr	r3, [pc, #120]	; (304e4 <readPacket+0xe8>)
   3046a:	4798      	blx	r3
   3046c:	0002      	movs	r2, r0
   3046e:	693b      	ldr	r3, [r7, #16]
   30470:	189b      	adds	r3, r3, r2
   30472:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   30474:	68bb      	ldr	r3, [r7, #8]
   30476:	2b00      	cmp	r3, #0
   30478:	dd17      	ble.n	304aa <readPacket+0xae>
   3047a:	687b      	ldr	r3, [r7, #4]
   3047c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   3047e:	689c      	ldr	r4, [r3, #8]
   30480:	687b      	ldr	r3, [r7, #4]
   30482:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   30484:	687b      	ldr	r3, [r7, #4]
   30486:	695a      	ldr	r2, [r3, #20]
   30488:	693b      	ldr	r3, [r7, #16]
   3048a:	18d6      	adds	r6, r2, r3
   3048c:	68bb      	ldr	r3, [r7, #8]
   3048e:	4698      	mov	r8, r3
   30490:	683b      	ldr	r3, [r7, #0]
   30492:	0018      	movs	r0, r3
   30494:	4b11      	ldr	r3, [pc, #68]	; (304dc <readPacket+0xe0>)
   30496:	4798      	blx	r3
   30498:	0003      	movs	r3, r0
   3049a:	4642      	mov	r2, r8
   3049c:	0031      	movs	r1, r6
   3049e:	0028      	movs	r0, r5
   304a0:	47a0      	blx	r4
   304a2:	0002      	movs	r2, r0
   304a4:	68bb      	ldr	r3, [r7, #8]
   304a6:	429a      	cmp	r2, r3
   304a8:	d10f      	bne.n	304ca <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   304aa:	687b      	ldr	r3, [r7, #4]
   304ac:	695b      	ldr	r3, [r3, #20]
   304ae:	781a      	ldrb	r2, [r3, #0]
   304b0:	230c      	movs	r3, #12
   304b2:	18fb      	adds	r3, r7, r3
   304b4:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   304b6:	230c      	movs	r3, #12
   304b8:	18fb      	adds	r3, r7, r3
   304ba:	781b      	ldrb	r3, [r3, #0]
   304bc:	061b      	lsls	r3, r3, #24
   304be:	0f1b      	lsrs	r3, r3, #28
   304c0:	b2db      	uxtb	r3, r3
   304c2:	617b      	str	r3, [r7, #20]
   304c4:	e002      	b.n	304cc <readPacket+0xd0>
        goto exit;
   304c6:	46c0      	nop			; (mov r8, r8)
   304c8:	e000      	b.n	304cc <readPacket+0xd0>
        goto exit;
   304ca:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   304cc:	697b      	ldr	r3, [r7, #20]
}
   304ce:	0018      	movs	r0, r3
   304d0:	46bd      	mov	sp, r7
   304d2:	b006      	add	sp, #24
   304d4:	bc04      	pop	{r2}
   304d6:	4690      	mov	r8, r2
   304d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   304da:	46c0      	nop			; (mov r8, r8)
   304dc:	000310a1 	.word	0x000310a1
   304e0:	00030369 	.word	0x00030369
   304e4:	00031e79 	.word	0x00031e79

000304e8 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   304e8:	b580      	push	{r7, lr}
   304ea:	b086      	sub	sp, #24
   304ec:	af00      	add	r7, sp, #0
   304ee:	6078      	str	r0, [r7, #4]
   304f0:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   304f2:	687b      	ldr	r3, [r7, #4]
   304f4:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   304f6:	683b      	ldr	r3, [r7, #0]
   304f8:	689b      	ldr	r3, [r3, #8]
   304fa:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   304fc:	683b      	ldr	r3, [r7, #0]
   304fe:	685b      	ldr	r3, [r3, #4]
   30500:	001a      	movs	r2, r3
   30502:	693b      	ldr	r3, [r7, #16]
   30504:	189b      	adds	r3, r3, r2
   30506:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   30508:	e039      	b.n	3057e <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   3050a:	693b      	ldr	r3, [r7, #16]
   3050c:	781b      	ldrb	r3, [r3, #0]
   3050e:	2b2f      	cmp	r3, #47	; 0x2f
   30510:	d103      	bne.n	3051a <isTopicMatched+0x32>
   30512:	697b      	ldr	r3, [r7, #20]
   30514:	781b      	ldrb	r3, [r3, #0]
   30516:	2b2f      	cmp	r3, #47	; 0x2f
   30518:	d13a      	bne.n	30590 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   3051a:	697b      	ldr	r3, [r7, #20]
   3051c:	781b      	ldrb	r3, [r3, #0]
   3051e:	2b2b      	cmp	r3, #43	; 0x2b
   30520:	d009      	beq.n	30536 <isTopicMatched+0x4e>
   30522:	697b      	ldr	r3, [r7, #20]
   30524:	781b      	ldrb	r3, [r3, #0]
   30526:	2b23      	cmp	r3, #35	; 0x23
   30528:	d005      	beq.n	30536 <isTopicMatched+0x4e>
   3052a:	697b      	ldr	r3, [r7, #20]
   3052c:	781a      	ldrb	r2, [r3, #0]
   3052e:	693b      	ldr	r3, [r7, #16]
   30530:	781b      	ldrb	r3, [r3, #0]
   30532:	429a      	cmp	r2, r3
   30534:	d12e      	bne.n	30594 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   30536:	697b      	ldr	r3, [r7, #20]
   30538:	781b      	ldrb	r3, [r3, #0]
   3053a:	2b2b      	cmp	r3, #43	; 0x2b
   3053c:	d112      	bne.n	30564 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   3053e:	693b      	ldr	r3, [r7, #16]
   30540:	3301      	adds	r3, #1
   30542:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   30544:	e005      	b.n	30552 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   30546:	693b      	ldr	r3, [r7, #16]
   30548:	3301      	adds	r3, #1
   3054a:	613b      	str	r3, [r7, #16]
   3054c:	693b      	ldr	r3, [r7, #16]
   3054e:	3301      	adds	r3, #1
   30550:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   30552:	68fa      	ldr	r2, [r7, #12]
   30554:	68bb      	ldr	r3, [r7, #8]
   30556:	429a      	cmp	r2, r3
   30558:	d20b      	bcs.n	30572 <isTopicMatched+0x8a>
   3055a:	68fb      	ldr	r3, [r7, #12]
   3055c:	781b      	ldrb	r3, [r3, #0]
   3055e:	2b2f      	cmp	r3, #47	; 0x2f
   30560:	d1f1      	bne.n	30546 <isTopicMatched+0x5e>
   30562:	e006      	b.n	30572 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   30564:	697b      	ldr	r3, [r7, #20]
   30566:	781b      	ldrb	r3, [r3, #0]
   30568:	2b23      	cmp	r3, #35	; 0x23
   3056a:	d102      	bne.n	30572 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   3056c:	68bb      	ldr	r3, [r7, #8]
   3056e:	3b01      	subs	r3, #1
   30570:	613b      	str	r3, [r7, #16]
        curf++;
   30572:	697b      	ldr	r3, [r7, #20]
   30574:	3301      	adds	r3, #1
   30576:	617b      	str	r3, [r7, #20]
        curn++;
   30578:	693b      	ldr	r3, [r7, #16]
   3057a:	3301      	adds	r3, #1
   3057c:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   3057e:	697b      	ldr	r3, [r7, #20]
   30580:	781b      	ldrb	r3, [r3, #0]
   30582:	2b00      	cmp	r3, #0
   30584:	d007      	beq.n	30596 <isTopicMatched+0xae>
   30586:	693a      	ldr	r2, [r7, #16]
   30588:	68bb      	ldr	r3, [r7, #8]
   3058a:	429a      	cmp	r2, r3
   3058c:	d3bd      	bcc.n	3050a <isTopicMatched+0x22>
   3058e:	e002      	b.n	30596 <isTopicMatched+0xae>
            break;
   30590:	46c0      	nop			; (mov r8, r8)
   30592:	e000      	b.n	30596 <isTopicMatched+0xae>
            break;
   30594:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   30596:	693a      	ldr	r2, [r7, #16]
   30598:	68bb      	ldr	r3, [r7, #8]
   3059a:	429a      	cmp	r2, r3
   3059c:	d105      	bne.n	305aa <isTopicMatched+0xc2>
   3059e:	697b      	ldr	r3, [r7, #20]
   305a0:	781b      	ldrb	r3, [r3, #0]
   305a2:	2b00      	cmp	r3, #0
   305a4:	d101      	bne.n	305aa <isTopicMatched+0xc2>
   305a6:	2301      	movs	r3, #1
   305a8:	e000      	b.n	305ac <isTopicMatched+0xc4>
   305aa:	2300      	movs	r3, #0
   305ac:	b2db      	uxtb	r3, r3
}
   305ae:	0018      	movs	r0, r3
   305b0:	46bd      	mov	sp, r7
   305b2:	b006      	add	sp, #24
   305b4:	bd80      	pop	{r7, pc}
	...

000305b8 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   305b8:	b580      	push	{r7, lr}
   305ba:	b08a      	sub	sp, #40	; 0x28
   305bc:	af00      	add	r7, sp, #0
   305be:	60f8      	str	r0, [r7, #12]
   305c0:	60b9      	str	r1, [r7, #8]
   305c2:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   305c4:	2301      	movs	r3, #1
   305c6:	425b      	negs	r3, r3
   305c8:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   305ca:	2300      	movs	r3, #0
   305cc:	627b      	str	r3, [r7, #36]	; 0x24
   305ce:	e044      	b.n	3065a <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   305d0:	68fa      	ldr	r2, [r7, #12]
   305d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   305d4:	3304      	adds	r3, #4
   305d6:	00db      	lsls	r3, r3, #3
   305d8:	18d3      	adds	r3, r2, r3
   305da:	3304      	adds	r3, #4
   305dc:	681b      	ldr	r3, [r3, #0]
   305de:	2b00      	cmp	r3, #0
   305e0:	d038      	beq.n	30654 <deliverMessage+0x9c>
   305e2:	68fa      	ldr	r2, [r7, #12]
   305e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   305e6:	3304      	adds	r3, #4
   305e8:	00db      	lsls	r3, r3, #3
   305ea:	18d3      	adds	r3, r2, r3
   305ec:	3304      	adds	r3, #4
   305ee:	681a      	ldr	r2, [r3, #0]
   305f0:	68bb      	ldr	r3, [r7, #8]
   305f2:	0011      	movs	r1, r2
   305f4:	0018      	movs	r0, r3
   305f6:	4b28      	ldr	r3, [pc, #160]	; (30698 <deliverMessage+0xe0>)
   305f8:	4798      	blx	r3
   305fa:	1e03      	subs	r3, r0, #0
   305fc:	d10d      	bne.n	3061a <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   305fe:	68fa      	ldr	r2, [r7, #12]
   30600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30602:	3304      	adds	r3, #4
   30604:	00db      	lsls	r3, r3, #3
   30606:	18d3      	adds	r3, r2, r3
   30608:	3304      	adds	r3, #4
   3060a:	681b      	ldr	r3, [r3, #0]
   3060c:	68ba      	ldr	r2, [r7, #8]
   3060e:	0011      	movs	r1, r2
   30610:	0018      	movs	r0, r3
   30612:	4b22      	ldr	r3, [pc, #136]	; (3069c <deliverMessage+0xe4>)
   30614:	4798      	blx	r3
   30616:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   30618:	d01c      	beq.n	30654 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   3061a:	68fa      	ldr	r2, [r7, #12]
   3061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3061e:	3304      	adds	r3, #4
   30620:	00db      	lsls	r3, r3, #3
   30622:	18d3      	adds	r3, r2, r3
   30624:	3308      	adds	r3, #8
   30626:	681b      	ldr	r3, [r3, #0]
   30628:	2b00      	cmp	r3, #0
   3062a:	d013      	beq.n	30654 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   3062c:	687a      	ldr	r2, [r7, #4]
   3062e:	68b9      	ldr	r1, [r7, #8]
   30630:	2318      	movs	r3, #24
   30632:	18fb      	adds	r3, r7, r3
   30634:	0018      	movs	r0, r3
   30636:	4b1a      	ldr	r3, [pc, #104]	; (306a0 <deliverMessage+0xe8>)
   30638:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   3063a:	68fa      	ldr	r2, [r7, #12]
   3063c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3063e:	3304      	adds	r3, #4
   30640:	00db      	lsls	r3, r3, #3
   30642:	18d3      	adds	r3, r2, r3
   30644:	3308      	adds	r3, #8
   30646:	681b      	ldr	r3, [r3, #0]
   30648:	2218      	movs	r2, #24
   3064a:	18ba      	adds	r2, r7, r2
   3064c:	0010      	movs	r0, r2
   3064e:	4798      	blx	r3
                rc = SUCCESS;
   30650:	2300      	movs	r3, #0
   30652:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   30654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30656:	3301      	adds	r3, #1
   30658:	627b      	str	r3, [r7, #36]	; 0x24
   3065a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3065c:	2b04      	cmp	r3, #4
   3065e:	ddb7      	ble.n	305d0 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   30660:	6a3b      	ldr	r3, [r7, #32]
   30662:	3301      	adds	r3, #1
   30664:	d112      	bne.n	3068c <deliverMessage+0xd4>
   30666:	68fb      	ldr	r3, [r7, #12]
   30668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3066a:	2b00      	cmp	r3, #0
   3066c:	d00e      	beq.n	3068c <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   3066e:	687a      	ldr	r2, [r7, #4]
   30670:	68b9      	ldr	r1, [r7, #8]
   30672:	2310      	movs	r3, #16
   30674:	18fb      	adds	r3, r7, r3
   30676:	0018      	movs	r0, r3
   30678:	4b09      	ldr	r3, [pc, #36]	; (306a0 <deliverMessage+0xe8>)
   3067a:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   3067c:	68fb      	ldr	r3, [r7, #12]
   3067e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30680:	2210      	movs	r2, #16
   30682:	18ba      	adds	r2, r7, r2
   30684:	0010      	movs	r0, r2
   30686:	4798      	blx	r3
        rc = SUCCESS;
   30688:	2300      	movs	r3, #0
   3068a:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   3068c:	6a3b      	ldr	r3, [r7, #32]
}
   3068e:	0018      	movs	r0, r3
   30690:	46bd      	mov	sp, r7
   30692:	b00a      	add	sp, #40	; 0x28
   30694:	bd80      	pop	{r7, pc}
   30696:	46c0      	nop			; (mov r8, r8)
   30698:	0003228d 	.word	0x0003228d
   3069c:	000304e9 	.word	0x000304e9
   306a0:	000301f1 	.word	0x000301f1

000306a4 <keepalive>:


int keepalive(MQTTClient* c)
{
   306a4:	b580      	push	{r7, lr}
   306a6:	b088      	sub	sp, #32
   306a8:	af00      	add	r7, sp, #0
   306aa:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   306ac:	2301      	movs	r3, #1
   306ae:	425b      	negs	r3, r3
   306b0:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   306b2:	687b      	ldr	r3, [r7, #4]
   306b4:	699b      	ldr	r3, [r3, #24]
   306b6:	2b00      	cmp	r3, #0
   306b8:	d102      	bne.n	306c0 <keepalive+0x1c>
    {
        rc = SUCCESS;
   306ba:	2300      	movs	r3, #0
   306bc:	61fb      	str	r3, [r7, #28]
        goto exit;
   306be:	e033      	b.n	30728 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   306c0:	687b      	ldr	r3, [r7, #4]
   306c2:	3354      	adds	r3, #84	; 0x54
   306c4:	0018      	movs	r0, r3
   306c6:	4b1b      	ldr	r3, [pc, #108]	; (30734 <keepalive+0x90>)
   306c8:	4798      	blx	r3
   306ca:	1e03      	subs	r3, r0, #0
   306cc:	d02c      	beq.n	30728 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   306ce:	687b      	ldr	r3, [r7, #4]
   306d0:	7f1b      	ldrb	r3, [r3, #28]
   306d2:	2b00      	cmp	r3, #0
   306d4:	d128      	bne.n	30728 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   306d6:	230c      	movs	r3, #12
   306d8:	18fb      	adds	r3, r7, r3
   306da:	0018      	movs	r0, r3
   306dc:	4b16      	ldr	r3, [pc, #88]	; (30738 <keepalive+0x94>)
   306de:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   306e0:	23fa      	movs	r3, #250	; 0xfa
   306e2:	009a      	lsls	r2, r3, #2
   306e4:	230c      	movs	r3, #12
   306e6:	18fb      	adds	r3, r7, r3
   306e8:	0011      	movs	r1, r2
   306ea:	0018      	movs	r0, r3
   306ec:	4b13      	ldr	r3, [pc, #76]	; (3073c <keepalive+0x98>)
   306ee:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   306f0:	687b      	ldr	r3, [r7, #4]
   306f2:	691a      	ldr	r2, [r3, #16]
   306f4:	687b      	ldr	r3, [r7, #4]
   306f6:	689b      	ldr	r3, [r3, #8]
   306f8:	0019      	movs	r1, r3
   306fa:	0010      	movs	r0, r2
   306fc:	4b10      	ldr	r3, [pc, #64]	; (30740 <keepalive+0x9c>)
   306fe:	4798      	blx	r3
   30700:	0003      	movs	r3, r0
   30702:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   30704:	69bb      	ldr	r3, [r7, #24]
   30706:	2b00      	cmp	r3, #0
   30708:	dd0e      	ble.n	30728 <keepalive+0x84>
   3070a:	230c      	movs	r3, #12
   3070c:	18fa      	adds	r2, r7, r3
   3070e:	69b9      	ldr	r1, [r7, #24]
   30710:	687b      	ldr	r3, [r7, #4]
   30712:	0018      	movs	r0, r3
   30714:	4b0b      	ldr	r3, [pc, #44]	; (30744 <keepalive+0xa0>)
   30716:	4798      	blx	r3
   30718:	0003      	movs	r3, r0
   3071a:	61fb      	str	r3, [r7, #28]
   3071c:	69fb      	ldr	r3, [r7, #28]
   3071e:	2b00      	cmp	r3, #0
   30720:	d102      	bne.n	30728 <keepalive+0x84>
                c->ping_outstanding = 1;
   30722:	687b      	ldr	r3, [r7, #4]
   30724:	2201      	movs	r2, #1
   30726:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   30728:	69fb      	ldr	r3, [r7, #28]
}
   3072a:	0018      	movs	r0, r3
   3072c:	46bd      	mov	sp, r7
   3072e:	b008      	add	sp, #32
   30730:	bd80      	pop	{r7, pc}
   30732:	46c0      	nop			; (mov r8, r8)
   30734:	00031025 	.word	0x00031025
   30738:	000310c9 	.word	0x000310c9
   3073c:	00031051 	.word	0x00031051
   30740:	00031c9d 	.word	0x00031c9d
   30744:	00030241 	.word	0x00030241

00030748 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   30748:	b5f0      	push	{r4, r5, r6, r7, lr}
   3074a:	b095      	sub	sp, #84	; 0x54
   3074c:	af06      	add	r7, sp, #24
   3074e:	6078      	str	r0, [r7, #4]
   30750:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   30752:	683a      	ldr	r2, [r7, #0]
   30754:	687b      	ldr	r3, [r7, #4]
   30756:	0011      	movs	r1, r2
   30758:	0018      	movs	r0, r3
   3075a:	4b70      	ldr	r3, [pc, #448]	; (3091c <cycle+0x1d4>)
   3075c:	4798      	blx	r3
   3075e:	0002      	movs	r2, r0
   30760:	232e      	movs	r3, #46	; 0x2e
   30762:	18fb      	adds	r3, r7, r3
   30764:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   30766:	2300      	movs	r3, #0
   30768:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   3076a:	2300      	movs	r3, #0
   3076c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   3076e:	232e      	movs	r3, #46	; 0x2e
   30770:	18fb      	adds	r3, r7, r3
   30772:	881b      	ldrh	r3, [r3, #0]
   30774:	2b0d      	cmp	r3, #13
   30776:	d900      	bls.n	3077a <cycle+0x32>
   30778:	e0bd      	b.n	308f6 <cycle+0x1ae>
   3077a:	009a      	lsls	r2, r3, #2
   3077c:	4b68      	ldr	r3, [pc, #416]	; (30920 <cycle+0x1d8>)
   3077e:	18d3      	adds	r3, r2, r3
   30780:	681b      	ldr	r3, [r3, #0]
   30782:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   30784:	687b      	ldr	r3, [r7, #4]
   30786:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   30788:	687b      	ldr	r3, [r7, #4]
   3078a:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   3078c:	001e      	movs	r6, r3
   3078e:	2310      	movs	r3, #16
   30790:	18fb      	adds	r3, r7, r3
   30792:	1d1d      	adds	r5, r3, #4
   30794:	2310      	movs	r3, #16
   30796:	18fb      	adds	r3, r7, r3
   30798:	1c5c      	adds	r4, r3, #1
   3079a:	230c      	movs	r3, #12
   3079c:	18f9      	adds	r1, r7, r3
   3079e:	2310      	movs	r3, #16
   307a0:	18fb      	adds	r3, r7, r3
   307a2:	1c98      	adds	r0, r3, #2
   307a4:	9604      	str	r6, [sp, #16]
   307a6:	9203      	str	r2, [sp, #12]
   307a8:	2310      	movs	r3, #16
   307aa:	18fb      	adds	r3, r7, r3
   307ac:	330c      	adds	r3, #12
   307ae:	9302      	str	r3, [sp, #8]
   307b0:	2310      	movs	r3, #16
   307b2:	18fb      	adds	r3, r7, r3
   307b4:	3308      	adds	r3, #8
   307b6:	9301      	str	r3, [sp, #4]
   307b8:	2320      	movs	r3, #32
   307ba:	18fb      	adds	r3, r7, r3
   307bc:	9300      	str	r3, [sp, #0]
   307be:	002b      	movs	r3, r5
   307c0:	0022      	movs	r2, r4
   307c2:	4c58      	ldr	r4, [pc, #352]	; (30924 <cycle+0x1dc>)
   307c4:	47a0      	blx	r4
   307c6:	0003      	movs	r3, r0
   307c8:	2b01      	cmp	r3, #1
   307ca:	d000      	beq.n	307ce <cycle+0x86>
   307cc:	e098      	b.n	30900 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   307ce:	68fb      	ldr	r3, [r7, #12]
   307d0:	b2da      	uxtb	r2, r3
   307d2:	2310      	movs	r3, #16
   307d4:	18fb      	adds	r3, r7, r3
   307d6:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   307d8:	2310      	movs	r3, #16
   307da:	18fa      	adds	r2, r7, r3
   307dc:	2320      	movs	r3, #32
   307de:	18f9      	adds	r1, r7, r3
   307e0:	687b      	ldr	r3, [r7, #4]
   307e2:	0018      	movs	r0, r3
   307e4:	4b50      	ldr	r3, [pc, #320]	; (30928 <cycle+0x1e0>)
   307e6:	4798      	blx	r3
            if (msg.qos != QOS0)
   307e8:	2310      	movs	r3, #16
   307ea:	18fb      	adds	r3, r7, r3
   307ec:	781b      	ldrb	r3, [r3, #0]
   307ee:	2b00      	cmp	r3, #0
   307f0:	d100      	bne.n	307f4 <cycle+0xac>
   307f2:	e07d      	b.n	308f0 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   307f4:	2310      	movs	r3, #16
   307f6:	18fb      	adds	r3, r7, r3
   307f8:	781b      	ldrb	r3, [r3, #0]
   307fa:	2b01      	cmp	r3, #1
   307fc:	d10f      	bne.n	3081e <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   307fe:	687b      	ldr	r3, [r7, #4]
   30800:	6918      	ldr	r0, [r3, #16]
   30802:	687b      	ldr	r3, [r7, #4]
   30804:	689b      	ldr	r3, [r3, #8]
   30806:	0019      	movs	r1, r3
   30808:	2310      	movs	r3, #16
   3080a:	18fb      	adds	r3, r7, r3
   3080c:	889b      	ldrh	r3, [r3, #4]
   3080e:	9300      	str	r3, [sp, #0]
   30810:	2300      	movs	r3, #0
   30812:	2204      	movs	r2, #4
   30814:	4c45      	ldr	r4, [pc, #276]	; (3092c <cycle+0x1e4>)
   30816:	47a0      	blx	r4
   30818:	0003      	movs	r3, r0
   3081a:	637b      	str	r3, [r7, #52]	; 0x34
   3081c:	e013      	b.n	30846 <cycle+0xfe>
                else if (msg.qos == QOS2)
   3081e:	2310      	movs	r3, #16
   30820:	18fb      	adds	r3, r7, r3
   30822:	781b      	ldrb	r3, [r3, #0]
   30824:	2b02      	cmp	r3, #2
   30826:	d10e      	bne.n	30846 <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   30828:	687b      	ldr	r3, [r7, #4]
   3082a:	6918      	ldr	r0, [r3, #16]
   3082c:	687b      	ldr	r3, [r7, #4]
   3082e:	689b      	ldr	r3, [r3, #8]
   30830:	0019      	movs	r1, r3
   30832:	2310      	movs	r3, #16
   30834:	18fb      	adds	r3, r7, r3
   30836:	889b      	ldrh	r3, [r3, #4]
   30838:	9300      	str	r3, [sp, #0]
   3083a:	2300      	movs	r3, #0
   3083c:	2205      	movs	r2, #5
   3083e:	4c3b      	ldr	r4, [pc, #236]	; (3092c <cycle+0x1e4>)
   30840:	47a0      	blx	r4
   30842:	0003      	movs	r3, r0
   30844:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   30846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   30848:	2b00      	cmp	r3, #0
   3084a:	dc03      	bgt.n	30854 <cycle+0x10c>
                    rc = FAILURE;
   3084c:	2301      	movs	r3, #1
   3084e:	425b      	negs	r3, r3
   30850:	633b      	str	r3, [r7, #48]	; 0x30
   30852:	e007      	b.n	30864 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   30854:	683a      	ldr	r2, [r7, #0]
   30856:	6b79      	ldr	r1, [r7, #52]	; 0x34
   30858:	687b      	ldr	r3, [r7, #4]
   3085a:	0018      	movs	r0, r3
   3085c:	4b34      	ldr	r3, [pc, #208]	; (30930 <cycle+0x1e8>)
   3085e:	4798      	blx	r3
   30860:	0003      	movs	r3, r0
   30862:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   30864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30866:	3301      	adds	r3, #1
   30868:	d142      	bne.n	308f0 <cycle+0x1a8>
                    goto exit; // there was a problem
   3086a:	46c0      	nop			; (mov r8, r8)
   3086c:	e049      	b.n	30902 <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   3086e:	687b      	ldr	r3, [r7, #4]
   30870:	695c      	ldr	r4, [r3, #20]
   30872:	687b      	ldr	r3, [r7, #4]
   30874:	68db      	ldr	r3, [r3, #12]
   30876:	220a      	movs	r2, #10
   30878:	18ba      	adds	r2, r7, r2
   3087a:	2109      	movs	r1, #9
   3087c:	1879      	adds	r1, r7, r1
   3087e:	2008      	movs	r0, #8
   30880:	1838      	adds	r0, r7, r0
   30882:	9300      	str	r3, [sp, #0]
   30884:	0023      	movs	r3, r4
   30886:	4c2b      	ldr	r4, [pc, #172]	; (30934 <cycle+0x1ec>)
   30888:	47a0      	blx	r4
   3088a:	0003      	movs	r3, r0
   3088c:	2b01      	cmp	r3, #1
   3088e:	d003      	beq.n	30898 <cycle+0x150>
                rc = FAILURE;
   30890:	2301      	movs	r3, #1
   30892:	425b      	negs	r3, r3
   30894:	633b      	str	r3, [r7, #48]	; 0x30
   30896:	e023      	b.n	308e0 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   30898:	687b      	ldr	r3, [r7, #4]
   3089a:	6918      	ldr	r0, [r3, #16]
   3089c:	687b      	ldr	r3, [r7, #4]
   3089e:	689b      	ldr	r3, [r3, #8]
   308a0:	0019      	movs	r1, r3
   308a2:	230a      	movs	r3, #10
   308a4:	18fb      	adds	r3, r7, r3
   308a6:	881b      	ldrh	r3, [r3, #0]
   308a8:	9300      	str	r3, [sp, #0]
   308aa:	2300      	movs	r3, #0
   308ac:	2206      	movs	r2, #6
   308ae:	4c1f      	ldr	r4, [pc, #124]	; (3092c <cycle+0x1e4>)
   308b0:	47a0      	blx	r4
   308b2:	0003      	movs	r3, r0
   308b4:	637b      	str	r3, [r7, #52]	; 0x34
   308b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   308b8:	2b00      	cmp	r3, #0
   308ba:	dc03      	bgt.n	308c4 <cycle+0x17c>
                rc = FAILURE;
   308bc:	2301      	movs	r3, #1
   308be:	425b      	negs	r3, r3
   308c0:	633b      	str	r3, [r7, #48]	; 0x30
   308c2:	e00d      	b.n	308e0 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   308c4:	683a      	ldr	r2, [r7, #0]
   308c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
   308c8:	687b      	ldr	r3, [r7, #4]
   308ca:	0018      	movs	r0, r3
   308cc:	4b18      	ldr	r3, [pc, #96]	; (30930 <cycle+0x1e8>)
   308ce:	4798      	blx	r3
   308d0:	0003      	movs	r3, r0
   308d2:	633b      	str	r3, [r7, #48]	; 0x30
   308d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   308d6:	2b00      	cmp	r3, #0
   308d8:	d002      	beq.n	308e0 <cycle+0x198>
                rc = FAILURE; // there was a problem
   308da:	2301      	movs	r3, #1
   308dc:	425b      	negs	r3, r3
   308de:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   308e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   308e2:	3301      	adds	r3, #1
   308e4:	d106      	bne.n	308f4 <cycle+0x1ac>
                goto exit; // there was a problem
   308e6:	e00c      	b.n	30902 <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   308e8:	687b      	ldr	r3, [r7, #4]
   308ea:	2200      	movs	r2, #0
   308ec:	771a      	strb	r2, [r3, #28]
            break;
   308ee:	e002      	b.n	308f6 <cycle+0x1ae>
            break;
   308f0:	46c0      	nop			; (mov r8, r8)
   308f2:	e000      	b.n	308f6 <cycle+0x1ae>
            break;
   308f4:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   308f6:	687b      	ldr	r3, [r7, #4]
   308f8:	0018      	movs	r0, r3
   308fa:	4b0f      	ldr	r3, [pc, #60]	; (30938 <cycle+0x1f0>)
   308fc:	4798      	blx	r3
   308fe:	e000      	b.n	30902 <cycle+0x1ba>
                goto exit;
   30900:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   30902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30904:	2b00      	cmp	r3, #0
   30906:	d103      	bne.n	30910 <cycle+0x1c8>
        rc = packet_type;
   30908:	232e      	movs	r3, #46	; 0x2e
   3090a:	18fb      	adds	r3, r7, r3
   3090c:	881b      	ldrh	r3, [r3, #0]
   3090e:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   30910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   30912:	0018      	movs	r0, r3
   30914:	46bd      	mov	sp, r7
   30916:	b00f      	add	sp, #60	; 0x3c
   30918:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3091a:	46c0      	nop			; (mov r8, r8)
   3091c:	000303fd 	.word	0x000303fd
   30920:	0003c0c0 	.word	0x0003c0c0
   30924:	00031cc1 	.word	0x00031cc1
   30928:	000305b9 	.word	0x000305b9
   3092c:	000324b9 	.word	0x000324b9
   30930:	00030241 	.word	0x00030241
   30934:	00031dc5 	.word	0x00031dc5
   30938:	000306a5 	.word	0x000306a5

0003093c <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   3093c:	b580      	push	{r7, lr}
   3093e:	b086      	sub	sp, #24
   30940:	af00      	add	r7, sp, #0
   30942:	6078      	str	r0, [r7, #4]
   30944:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   30946:	2300      	movs	r3, #0
   30948:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   3094a:	2308      	movs	r3, #8
   3094c:	18fb      	adds	r3, r7, r3
   3094e:	0018      	movs	r0, r3
   30950:	4b11      	ldr	r3, [pc, #68]	; (30998 <MQTTYield+0x5c>)
   30952:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   30954:	683a      	ldr	r2, [r7, #0]
   30956:	2308      	movs	r3, #8
   30958:	18fb      	adds	r3, r7, r3
   3095a:	0011      	movs	r1, r2
   3095c:	0018      	movs	r0, r3
   3095e:	4b0f      	ldr	r3, [pc, #60]	; (3099c <MQTTYield+0x60>)
   30960:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   30962:	2308      	movs	r3, #8
   30964:	18fa      	adds	r2, r7, r3
   30966:	687b      	ldr	r3, [r7, #4]
   30968:	0011      	movs	r1, r2
   3096a:	0018      	movs	r0, r3
   3096c:	4b0c      	ldr	r3, [pc, #48]	; (309a0 <MQTTYield+0x64>)
   3096e:	4798      	blx	r3
   30970:	0003      	movs	r3, r0
   30972:	3301      	adds	r3, #1
   30974:	d103      	bne.n	3097e <MQTTYield+0x42>
        {
            rc = FAILURE;
   30976:	2301      	movs	r3, #1
   30978:	425b      	negs	r3, r3
   3097a:	617b      	str	r3, [r7, #20]
            break;
   3097c:	e006      	b.n	3098c <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   3097e:	2308      	movs	r3, #8
   30980:	18fb      	adds	r3, r7, r3
   30982:	0018      	movs	r0, r3
   30984:	4b07      	ldr	r3, [pc, #28]	; (309a4 <MQTTYield+0x68>)
   30986:	4798      	blx	r3
   30988:	1e03      	subs	r3, r0, #0
   3098a:	d0ea      	beq.n	30962 <MQTTYield+0x26>
        
    return rc;
   3098c:	697b      	ldr	r3, [r7, #20]
}
   3098e:	0018      	movs	r0, r3
   30990:	46bd      	mov	sp, r7
   30992:	b006      	add	sp, #24
   30994:	bd80      	pop	{r7, pc}
   30996:	46c0      	nop			; (mov r8, r8)
   30998:	000310c9 	.word	0x000310c9
   3099c:	00031051 	.word	0x00031051
   309a0:	00030749 	.word	0x00030749
   309a4:	00031025 	.word	0x00031025

000309a8 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   309a8:	b580      	push	{r7, lr}
   309aa:	b086      	sub	sp, #24
   309ac:	af00      	add	r7, sp, #0
   309ae:	60f8      	str	r0, [r7, #12]
   309b0:	60b9      	str	r1, [r7, #8]
   309b2:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   309b4:	2301      	movs	r3, #1
   309b6:	425b      	negs	r3, r3
   309b8:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   309ba:	687b      	ldr	r3, [r7, #4]
   309bc:	0018      	movs	r0, r3
   309be:	4b0b      	ldr	r3, [pc, #44]	; (309ec <waitfor+0x44>)
   309c0:	4798      	blx	r3
   309c2:	1e03      	subs	r3, r0, #0
   309c4:	d10c      	bne.n	309e0 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   309c6:	687a      	ldr	r2, [r7, #4]
   309c8:	68fb      	ldr	r3, [r7, #12]
   309ca:	0011      	movs	r1, r2
   309cc:	0018      	movs	r0, r3
   309ce:	4b08      	ldr	r3, [pc, #32]	; (309f0 <waitfor+0x48>)
   309d0:	4798      	blx	r3
   309d2:	0003      	movs	r3, r0
   309d4:	617b      	str	r3, [r7, #20]
   309d6:	697a      	ldr	r2, [r7, #20]
   309d8:	68bb      	ldr	r3, [r7, #8]
   309da:	429a      	cmp	r2, r3
   309dc:	d1ed      	bne.n	309ba <waitfor+0x12>
   309de:	e000      	b.n	309e2 <waitfor+0x3a>
            break; // we timed out
   309e0:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   309e2:	697b      	ldr	r3, [r7, #20]
}
   309e4:	0018      	movs	r0, r3
   309e6:	46bd      	mov	sp, r7
   309e8:	b006      	add	sp, #24
   309ea:	bd80      	pop	{r7, pc}
   309ec:	00031025 	.word	0x00031025
   309f0:	00030749 	.word	0x00030749

000309f4 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   309f4:	b590      	push	{r4, r7, lr}
   309f6:	b09f      	sub	sp, #124	; 0x7c
   309f8:	af00      	add	r7, sp, #0
   309fa:	6078      	str	r0, [r7, #4]
   309fc:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   309fe:	2301      	movs	r3, #1
   30a00:	425b      	negs	r3, r3
   30a02:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   30a04:	230c      	movs	r3, #12
   30a06:	18fa      	adds	r2, r7, r3
   30a08:	4b41      	ldr	r3, [pc, #260]	; (30b10 <MQTTConnect+0x11c>)
   30a0a:	0010      	movs	r0, r2
   30a0c:	0019      	movs	r1, r3
   30a0e:	2358      	movs	r3, #88	; 0x58
   30a10:	001a      	movs	r2, r3
   30a12:	4b40      	ldr	r3, [pc, #256]	; (30b14 <MQTTConnect+0x120>)
   30a14:	4798      	blx	r3
    int len = 0;
   30a16:	2300      	movs	r3, #0
   30a18:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   30a1a:	687b      	ldr	r3, [r7, #4]
   30a1c:	6a1b      	ldr	r3, [r3, #32]
   30a1e:	2b00      	cmp	r3, #0
   30a20:	d166      	bne.n	30af0 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   30a22:	2364      	movs	r3, #100	; 0x64
   30a24:	18fb      	adds	r3, r7, r3
   30a26:	0018      	movs	r0, r3
   30a28:	4b3b      	ldr	r3, [pc, #236]	; (30b18 <MQTTConnect+0x124>)
   30a2a:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   30a2c:	687b      	ldr	r3, [r7, #4]
   30a2e:	685a      	ldr	r2, [r3, #4]
   30a30:	2364      	movs	r3, #100	; 0x64
   30a32:	18fb      	adds	r3, r7, r3
   30a34:	0011      	movs	r1, r2
   30a36:	0018      	movs	r0, r3
   30a38:	4b38      	ldr	r3, [pc, #224]	; (30b1c <MQTTConnect+0x128>)
   30a3a:	4798      	blx	r3

    if (options == 0)
   30a3c:	683b      	ldr	r3, [r7, #0]
   30a3e:	2b00      	cmp	r3, #0
   30a40:	d102      	bne.n	30a48 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   30a42:	230c      	movs	r3, #12
   30a44:	18fb      	adds	r3, r7, r3
   30a46:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   30a48:	683b      	ldr	r3, [r7, #0]
   30a4a:	8b1b      	ldrh	r3, [r3, #24]
   30a4c:	001a      	movs	r2, r3
   30a4e:	687b      	ldr	r3, [r7, #4]
   30a50:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   30a52:	687b      	ldr	r3, [r7, #4]
   30a54:	3354      	adds	r3, #84	; 0x54
   30a56:	001a      	movs	r2, r3
   30a58:	687b      	ldr	r3, [r7, #4]
   30a5a:	699b      	ldr	r3, [r3, #24]
   30a5c:	0019      	movs	r1, r3
   30a5e:	0010      	movs	r0, r2
   30a60:	4b2f      	ldr	r3, [pc, #188]	; (30b20 <MQTTConnect+0x12c>)
   30a62:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   30a64:	687b      	ldr	r3, [r7, #4]
   30a66:	6918      	ldr	r0, [r3, #16]
   30a68:	687b      	ldr	r3, [r7, #4]
   30a6a:	689b      	ldr	r3, [r3, #8]
   30a6c:	0019      	movs	r1, r3
   30a6e:	683b      	ldr	r3, [r7, #0]
   30a70:	001a      	movs	r2, r3
   30a72:	4b2c      	ldr	r3, [pc, #176]	; (30b24 <MQTTConnect+0x130>)
   30a74:	4798      	blx	r3
   30a76:	0003      	movs	r3, r0
   30a78:	673b      	str	r3, [r7, #112]	; 0x70
   30a7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30a7c:	2b00      	cmp	r3, #0
   30a7e:	dd39      	ble.n	30af4 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   30a80:	2364      	movs	r3, #100	; 0x64
   30a82:	18fa      	adds	r2, r7, r3
   30a84:	6f39      	ldr	r1, [r7, #112]	; 0x70
   30a86:	687b      	ldr	r3, [r7, #4]
   30a88:	0018      	movs	r0, r3
   30a8a:	4b27      	ldr	r3, [pc, #156]	; (30b28 <MQTTConnect+0x134>)
   30a8c:	4798      	blx	r3
   30a8e:	0003      	movs	r3, r0
   30a90:	677b      	str	r3, [r7, #116]	; 0x74
   30a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30a94:	2b00      	cmp	r3, #0
   30a96:	d12f      	bne.n	30af8 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   30a98:	2364      	movs	r3, #100	; 0x64
   30a9a:	18fa      	adds	r2, r7, r3
   30a9c:	687b      	ldr	r3, [r7, #4]
   30a9e:	2102      	movs	r1, #2
   30aa0:	0018      	movs	r0, r3
   30aa2:	4b22      	ldr	r3, [pc, #136]	; (30b2c <MQTTConnect+0x138>)
   30aa4:	4798      	blx	r3
   30aa6:	0003      	movs	r3, r0
   30aa8:	2b02      	cmp	r3, #2
   30aaa:	d11d      	bne.n	30ae8 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   30aac:	230b      	movs	r3, #11
   30aae:	18fb      	adds	r3, r7, r3
   30ab0:	22ff      	movs	r2, #255	; 0xff
   30ab2:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   30ab4:	230a      	movs	r3, #10
   30ab6:	18fb      	adds	r3, r7, r3
   30ab8:	2200      	movs	r2, #0
   30aba:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   30abc:	687b      	ldr	r3, [r7, #4]
   30abe:	695a      	ldr	r2, [r3, #20]
   30ac0:	687b      	ldr	r3, [r7, #4]
   30ac2:	68db      	ldr	r3, [r3, #12]
   30ac4:	210b      	movs	r1, #11
   30ac6:	1879      	adds	r1, r7, r1
   30ac8:	200a      	movs	r0, #10
   30aca:	1838      	adds	r0, r7, r0
   30acc:	4c18      	ldr	r4, [pc, #96]	; (30b30 <MQTTConnect+0x13c>)
   30ace:	47a0      	blx	r4
   30ad0:	0003      	movs	r3, r0
   30ad2:	2b01      	cmp	r3, #1
   30ad4:	d104      	bne.n	30ae0 <MQTTConnect+0xec>
            rc = connack_rc;
   30ad6:	230b      	movs	r3, #11
   30ad8:	18fb      	adds	r3, r7, r3
   30ada:	781b      	ldrb	r3, [r3, #0]
   30adc:	677b      	str	r3, [r7, #116]	; 0x74
   30ade:	e00c      	b.n	30afa <MQTTConnect+0x106>
        else
            rc = FAILURE;
   30ae0:	2301      	movs	r3, #1
   30ae2:	425b      	negs	r3, r3
   30ae4:	677b      	str	r3, [r7, #116]	; 0x74
   30ae6:	e008      	b.n	30afa <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   30ae8:	2301      	movs	r3, #1
   30aea:	425b      	negs	r3, r3
   30aec:	677b      	str	r3, [r7, #116]	; 0x74
   30aee:	e004      	b.n	30afa <MQTTConnect+0x106>
		goto exit;
   30af0:	46c0      	nop			; (mov r8, r8)
   30af2:	e002      	b.n	30afa <MQTTConnect+0x106>
        goto exit;
   30af4:	46c0      	nop			; (mov r8, r8)
   30af6:	e000      	b.n	30afa <MQTTConnect+0x106>
        goto exit; // there was a problem
   30af8:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   30afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30afc:	2b00      	cmp	r3, #0
   30afe:	d102      	bne.n	30b06 <MQTTConnect+0x112>
        c->isconnected = 1;
   30b00:	687b      	ldr	r3, [r7, #4]
   30b02:	2201      	movs	r2, #1
   30b04:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   30b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   30b08:	0018      	movs	r0, r3
   30b0a:	46bd      	mov	sp, r7
   30b0c:	b01f      	add	sp, #124	; 0x7c
   30b0e:	bd90      	pop	{r4, r7, pc}
   30b10:	0003c0f8 	.word	0x0003c0f8
   30b14:	00036c69 	.word	0x00036c69
   30b18:	000310c9 	.word	0x000310c9
   30b1c:	00031051 	.word	0x00031051
   30b20:	00031079 	.word	0x00031079
   30b24:	000318a5 	.word	0x000318a5
   30b28:	00030241 	.word	0x00030241
   30b2c:	000309a9 	.word	0x000309a9
   30b30:	00031b21 	.word	0x00031b21

00030b34 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   30b34:	b5b0      	push	{r4, r5, r7, lr}
   30b36:	b096      	sub	sp, #88	; 0x58
   30b38:	af04      	add	r7, sp, #16
   30b3a:	60f8      	str	r0, [r7, #12]
   30b3c:	60b9      	str	r1, [r7, #8]
   30b3e:	603b      	str	r3, [r7, #0]
   30b40:	1dfb      	adds	r3, r7, #7
   30b42:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   30b44:	2301      	movs	r3, #1
   30b46:	425b      	negs	r3, r3
   30b48:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   30b4a:	2300      	movs	r3, #0
   30b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   30b4e:	2324      	movs	r3, #36	; 0x24
   30b50:	18fb      	adds	r3, r7, r3
   30b52:	2200      	movs	r2, #0
   30b54:	601a      	str	r2, [r3, #0]
   30b56:	2324      	movs	r3, #36	; 0x24
   30b58:	18fb      	adds	r3, r7, r3
   30b5a:	2200      	movs	r2, #0
   30b5c:	605a      	str	r2, [r3, #4]
   30b5e:	2324      	movs	r3, #36	; 0x24
   30b60:	18fb      	adds	r3, r7, r3
   30b62:	2200      	movs	r2, #0
   30b64:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   30b66:	1dfb      	adds	r3, r7, #7
   30b68:	781b      	ldrb	r3, [r3, #0]
   30b6a:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   30b6c:	2324      	movs	r3, #36	; 0x24
   30b6e:	18fb      	adds	r3, r7, r3
   30b70:	68ba      	ldr	r2, [r7, #8]
   30b72:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   30b74:	68fb      	ldr	r3, [r7, #12]
   30b76:	6a1b      	ldr	r3, [r3, #32]
   30b78:	2b00      	cmp	r3, #0
   30b7a:	d100      	bne.n	30b7e <MQTTSubscribe+0x4a>
   30b7c:	e088      	b.n	30c90 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   30b7e:	2330      	movs	r3, #48	; 0x30
   30b80:	18fb      	adds	r3, r7, r3
   30b82:	0018      	movs	r0, r3
   30b84:	4b47      	ldr	r3, [pc, #284]	; (30ca4 <MQTTSubscribe+0x170>)
   30b86:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   30b88:	68fb      	ldr	r3, [r7, #12]
   30b8a:	685a      	ldr	r2, [r3, #4]
   30b8c:	2330      	movs	r3, #48	; 0x30
   30b8e:	18fb      	adds	r3, r7, r3
   30b90:	0011      	movs	r1, r2
   30b92:	0018      	movs	r0, r3
   30b94:	4b44      	ldr	r3, [pc, #272]	; (30ca8 <MQTTSubscribe+0x174>)
   30b96:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   30b98:	68fb      	ldr	r3, [r7, #12]
   30b9a:	691c      	ldr	r4, [r3, #16]
   30b9c:	68fb      	ldr	r3, [r7, #12]
   30b9e:	689b      	ldr	r3, [r3, #8]
   30ba0:	001d      	movs	r5, r3
   30ba2:	68fb      	ldr	r3, [r7, #12]
   30ba4:	0018      	movs	r0, r3
   30ba6:	4b41      	ldr	r3, [pc, #260]	; (30cac <MQTTSubscribe+0x178>)
   30ba8:	4798      	blx	r3
   30baa:	0003      	movs	r3, r0
   30bac:	b29a      	uxth	r2, r3
   30bae:	2320      	movs	r3, #32
   30bb0:	18fb      	adds	r3, r7, r3
   30bb2:	9302      	str	r3, [sp, #8]
   30bb4:	2324      	movs	r3, #36	; 0x24
   30bb6:	18fb      	adds	r3, r7, r3
   30bb8:	9301      	str	r3, [sp, #4]
   30bba:	2301      	movs	r3, #1
   30bbc:	9300      	str	r3, [sp, #0]
   30bbe:	0013      	movs	r3, r2
   30bc0:	2200      	movs	r2, #0
   30bc2:	0029      	movs	r1, r5
   30bc4:	0020      	movs	r0, r4
   30bc6:	4c3a      	ldr	r4, [pc, #232]	; (30cb0 <MQTTSubscribe+0x17c>)
   30bc8:	47a0      	blx	r4
   30bca:	0003      	movs	r3, r0
   30bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   30bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   30bd0:	2b00      	cmp	r3, #0
   30bd2:	dd5f      	ble.n	30c94 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   30bd4:	2330      	movs	r3, #48	; 0x30
   30bd6:	18fa      	adds	r2, r7, r3
   30bd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   30bda:	68fb      	ldr	r3, [r7, #12]
   30bdc:	0018      	movs	r0, r3
   30bde:	4b35      	ldr	r3, [pc, #212]	; (30cb4 <MQTTSubscribe+0x180>)
   30be0:	4798      	blx	r3
   30be2:	0003      	movs	r3, r0
   30be4:	647b      	str	r3, [r7, #68]	; 0x44
   30be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   30be8:	2b00      	cmp	r3, #0
   30bea:	d155      	bne.n	30c98 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   30bec:	2330      	movs	r3, #48	; 0x30
   30bee:	18fa      	adds	r2, r7, r3
   30bf0:	68fb      	ldr	r3, [r7, #12]
   30bf2:	2109      	movs	r1, #9
   30bf4:	0018      	movs	r0, r3
   30bf6:	4b30      	ldr	r3, [pc, #192]	; (30cb8 <MQTTSubscribe+0x184>)
   30bf8:	4798      	blx	r3
   30bfa:	0003      	movs	r3, r0
   30bfc:	2b09      	cmp	r3, #9
   30bfe:	d143      	bne.n	30c88 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   30c00:	2300      	movs	r3, #0
   30c02:	61fb      	str	r3, [r7, #28]
   30c04:	2301      	movs	r3, #1
   30c06:	425b      	negs	r3, r3
   30c08:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   30c0a:	68fb      	ldr	r3, [r7, #12]
   30c0c:	695a      	ldr	r2, [r3, #20]
   30c0e:	68fb      	ldr	r3, [r7, #12]
   30c10:	68db      	ldr	r3, [r3, #12]
   30c12:	001c      	movs	r4, r3
   30c14:	2318      	movs	r3, #24
   30c16:	18fb      	adds	r3, r7, r3
   30c18:	211c      	movs	r1, #28
   30c1a:	1879      	adds	r1, r7, r1
   30c1c:	2016      	movs	r0, #22
   30c1e:	1838      	adds	r0, r7, r0
   30c20:	9401      	str	r4, [sp, #4]
   30c22:	9200      	str	r2, [sp, #0]
   30c24:	000a      	movs	r2, r1
   30c26:	2101      	movs	r1, #1
   30c28:	4c24      	ldr	r4, [pc, #144]	; (30cbc <MQTTSubscribe+0x188>)
   30c2a:	47a0      	blx	r4
   30c2c:	0003      	movs	r3, r0
   30c2e:	2b01      	cmp	r3, #1
   30c30:	d101      	bne.n	30c36 <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   30c32:	69bb      	ldr	r3, [r7, #24]
   30c34:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   30c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   30c38:	2b80      	cmp	r3, #128	; 0x80
   30c3a:	d02e      	beq.n	30c9a <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   30c3c:	2300      	movs	r3, #0
   30c3e:	643b      	str	r3, [r7, #64]	; 0x40
   30c40:	e01e      	b.n	30c80 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   30c42:	68fa      	ldr	r2, [r7, #12]
   30c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   30c46:	3304      	adds	r3, #4
   30c48:	00db      	lsls	r3, r3, #3
   30c4a:	18d3      	adds	r3, r2, r3
   30c4c:	3304      	adds	r3, #4
   30c4e:	681b      	ldr	r3, [r3, #0]
   30c50:	2b00      	cmp	r3, #0
   30c52:	d112      	bne.n	30c7a <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   30c54:	68fa      	ldr	r2, [r7, #12]
   30c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   30c58:	3304      	adds	r3, #4
   30c5a:	00db      	lsls	r3, r3, #3
   30c5c:	18d3      	adds	r3, r2, r3
   30c5e:	3304      	adds	r3, #4
   30c60:	68ba      	ldr	r2, [r7, #8]
   30c62:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   30c64:	68fa      	ldr	r2, [r7, #12]
   30c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   30c68:	3304      	adds	r3, #4
   30c6a:	00db      	lsls	r3, r3, #3
   30c6c:	18d3      	adds	r3, r2, r3
   30c6e:	3308      	adds	r3, #8
   30c70:	683a      	ldr	r2, [r7, #0]
   30c72:	601a      	str	r2, [r3, #0]
                    rc = 0;
   30c74:	2300      	movs	r3, #0
   30c76:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   30c78:	e00f      	b.n	30c9a <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   30c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   30c7c:	3301      	adds	r3, #1
   30c7e:	643b      	str	r3, [r7, #64]	; 0x40
   30c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   30c82:	2b04      	cmp	r3, #4
   30c84:	dddd      	ble.n	30c42 <MQTTSubscribe+0x10e>
   30c86:	e008      	b.n	30c9a <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   30c88:	2301      	movs	r3, #1
   30c8a:	425b      	negs	r3, r3
   30c8c:	647b      	str	r3, [r7, #68]	; 0x44
   30c8e:	e004      	b.n	30c9a <MQTTSubscribe+0x166>
		goto exit;
   30c90:	46c0      	nop			; (mov r8, r8)
   30c92:	e002      	b.n	30c9a <MQTTSubscribe+0x166>
        goto exit;
   30c94:	46c0      	nop			; (mov r8, r8)
   30c96:	e000      	b.n	30c9a <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   30c98:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   30c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   30c9c:	0018      	movs	r0, r3
   30c9e:	46bd      	mov	sp, r7
   30ca0:	b012      	add	sp, #72	; 0x48
   30ca2:	bdb0      	pop	{r4, r5, r7, pc}
   30ca4:	000310c9 	.word	0x000310c9
   30ca8:	00031051 	.word	0x00031051
   30cac:	00030211 	.word	0x00030211
   30cb0:	00032601 	.word	0x00032601
   30cb4:	00030241 	.word	0x00030241
   30cb8:	000309a9 	.word	0x000309a9
   30cbc:	00032751 	.word	0x00032751

00030cc0 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   30cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   30cc2:	46ce      	mov	lr, r9
   30cc4:	4647      	mov	r7, r8
   30cc6:	b580      	push	{r7, lr}
   30cc8:	b097      	sub	sp, #92	; 0x5c
   30cca:	af08      	add	r7, sp, #32
   30ccc:	60f8      	str	r0, [r7, #12]
   30cce:	60b9      	str	r1, [r7, #8]
   30cd0:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   30cd2:	2301      	movs	r3, #1
   30cd4:	425b      	negs	r3, r3
   30cd6:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   30cd8:	2318      	movs	r3, #24
   30cda:	18fb      	adds	r3, r7, r3
   30cdc:	2200      	movs	r2, #0
   30cde:	601a      	str	r2, [r3, #0]
   30ce0:	2318      	movs	r3, #24
   30ce2:	18fb      	adds	r3, r7, r3
   30ce4:	2200      	movs	r2, #0
   30ce6:	605a      	str	r2, [r3, #4]
   30ce8:	2318      	movs	r3, #24
   30cea:	18fb      	adds	r3, r7, r3
   30cec:	2200      	movs	r2, #0
   30cee:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   30cf0:	2318      	movs	r3, #24
   30cf2:	18fb      	adds	r3, r7, r3
   30cf4:	68ba      	ldr	r2, [r7, #8]
   30cf6:	601a      	str	r2, [r3, #0]
    int len = 0;
   30cf8:	2300      	movs	r3, #0
   30cfa:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   30cfc:	68fb      	ldr	r3, [r7, #12]
   30cfe:	6a1b      	ldr	r3, [r3, #32]
   30d00:	2b00      	cmp	r3, #0
   30d02:	d100      	bne.n	30d06 <MQTTPublish+0x46>
   30d04:	e0a0      	b.n	30e48 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   30d06:	2324      	movs	r3, #36	; 0x24
   30d08:	18fb      	adds	r3, r7, r3
   30d0a:	0018      	movs	r0, r3
   30d0c:	4b55      	ldr	r3, [pc, #340]	; (30e64 <MQTTPublish+0x1a4>)
   30d0e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   30d10:	68fb      	ldr	r3, [r7, #12]
   30d12:	685a      	ldr	r2, [r3, #4]
   30d14:	2324      	movs	r3, #36	; 0x24
   30d16:	18fb      	adds	r3, r7, r3
   30d18:	0011      	movs	r1, r2
   30d1a:	0018      	movs	r0, r3
   30d1c:	4b52      	ldr	r3, [pc, #328]	; (30e68 <MQTTPublish+0x1a8>)
   30d1e:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   30d20:	687b      	ldr	r3, [r7, #4]
   30d22:	781b      	ldrb	r3, [r3, #0]
   30d24:	2b01      	cmp	r3, #1
   30d26:	d003      	beq.n	30d30 <MQTTPublish+0x70>
   30d28:	687b      	ldr	r3, [r7, #4]
   30d2a:	781b      	ldrb	r3, [r3, #0]
   30d2c:	2b02      	cmp	r3, #2
   30d2e:	d107      	bne.n	30d40 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   30d30:	68fb      	ldr	r3, [r7, #12]
   30d32:	0018      	movs	r0, r3
   30d34:	4b4d      	ldr	r3, [pc, #308]	; (30e6c <MQTTPublish+0x1ac>)
   30d36:	4798      	blx	r3
   30d38:	0003      	movs	r3, r0
   30d3a:	b29a      	uxth	r2, r3
   30d3c:	687b      	ldr	r3, [r7, #4]
   30d3e:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   30d40:	68fb      	ldr	r3, [r7, #12]
   30d42:	691b      	ldr	r3, [r3, #16]
   30d44:	469c      	mov	ip, r3
   30d46:	68fb      	ldr	r3, [r7, #12]
   30d48:	689b      	ldr	r3, [r3, #8]
   30d4a:	001d      	movs	r5, r3
   30d4c:	687b      	ldr	r3, [r7, #4]
   30d4e:	781b      	ldrb	r3, [r3, #0]
   30d50:	001e      	movs	r6, r3
   30d52:	687b      	ldr	r3, [r7, #4]
   30d54:	785b      	ldrb	r3, [r3, #1]
   30d56:	4698      	mov	r8, r3
   30d58:	687b      	ldr	r3, [r7, #4]
   30d5a:	889b      	ldrh	r3, [r3, #4]
   30d5c:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   30d5e:	687b      	ldr	r3, [r7, #4]
   30d60:	689a      	ldr	r2, [r3, #8]
   30d62:	687b      	ldr	r3, [r7, #4]
   30d64:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   30d66:	9306      	str	r3, [sp, #24]
   30d68:	9205      	str	r2, [sp, #20]
   30d6a:	2318      	movs	r3, #24
   30d6c:	18fa      	adds	r2, r7, r3
   30d6e:	2308      	movs	r3, #8
   30d70:	446b      	add	r3, sp
   30d72:	ca13      	ldmia	r2!, {r0, r1, r4}
   30d74:	c313      	stmia	r3!, {r0, r1, r4}
   30d76:	464b      	mov	r3, r9
   30d78:	9301      	str	r3, [sp, #4]
   30d7a:	4643      	mov	r3, r8
   30d7c:	9300      	str	r3, [sp, #0]
   30d7e:	0033      	movs	r3, r6
   30d80:	2200      	movs	r2, #0
   30d82:	0029      	movs	r1, r5
   30d84:	4660      	mov	r0, ip
   30d86:	4c3a      	ldr	r4, [pc, #232]	; (30e70 <MQTTPublish+0x1b0>)
   30d88:	47a0      	blx	r4
   30d8a:	0003      	movs	r3, r0
   30d8c:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   30d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30d90:	2b00      	cmp	r3, #0
   30d92:	dd5b      	ble.n	30e4c <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   30d94:	2324      	movs	r3, #36	; 0x24
   30d96:	18fa      	adds	r2, r7, r3
   30d98:	6b39      	ldr	r1, [r7, #48]	; 0x30
   30d9a:	68fb      	ldr	r3, [r7, #12]
   30d9c:	0018      	movs	r0, r3
   30d9e:	4b35      	ldr	r3, [pc, #212]	; (30e74 <MQTTPublish+0x1b4>)
   30da0:	4798      	blx	r3
   30da2:	0003      	movs	r3, r0
   30da4:	637b      	str	r3, [r7, #52]	; 0x34
   30da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   30da8:	2b00      	cmp	r3, #0
   30daa:	d151      	bne.n	30e50 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   30dac:	687b      	ldr	r3, [r7, #4]
   30dae:	781b      	ldrb	r3, [r3, #0]
   30db0:	2b01      	cmp	r3, #1
   30db2:	d122      	bne.n	30dfa <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   30db4:	2324      	movs	r3, #36	; 0x24
   30db6:	18fa      	adds	r2, r7, r3
   30db8:	68fb      	ldr	r3, [r7, #12]
   30dba:	2104      	movs	r1, #4
   30dbc:	0018      	movs	r0, r3
   30dbe:	4b2e      	ldr	r3, [pc, #184]	; (30e78 <MQTTPublish+0x1b8>)
   30dc0:	4798      	blx	r3
   30dc2:	0003      	movs	r3, r0
   30dc4:	2b04      	cmp	r3, #4
   30dc6:	d114      	bne.n	30df2 <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   30dc8:	68fb      	ldr	r3, [r7, #12]
   30dca:	695c      	ldr	r4, [r3, #20]
   30dcc:	68fb      	ldr	r3, [r7, #12]
   30dce:	68db      	ldr	r3, [r3, #12]
   30dd0:	2216      	movs	r2, #22
   30dd2:	18ba      	adds	r2, r7, r2
   30dd4:	2115      	movs	r1, #21
   30dd6:	1879      	adds	r1, r7, r1
   30dd8:	2014      	movs	r0, #20
   30dda:	1838      	adds	r0, r7, r0
   30ddc:	9300      	str	r3, [sp, #0]
   30dde:	0023      	movs	r3, r4
   30de0:	4c26      	ldr	r4, [pc, #152]	; (30e7c <MQTTPublish+0x1bc>)
   30de2:	47a0      	blx	r4
   30de4:	0003      	movs	r3, r0
   30de6:	2b01      	cmp	r3, #1
   30de8:	d033      	beq.n	30e52 <MQTTPublish+0x192>
                rc = FAILURE;
   30dea:	2301      	movs	r3, #1
   30dec:	425b      	negs	r3, r3
   30dee:	637b      	str	r3, [r7, #52]	; 0x34
   30df0:	e02f      	b.n	30e52 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   30df2:	2301      	movs	r3, #1
   30df4:	425b      	negs	r3, r3
   30df6:	637b      	str	r3, [r7, #52]	; 0x34
   30df8:	e02b      	b.n	30e52 <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   30dfa:	687b      	ldr	r3, [r7, #4]
   30dfc:	781b      	ldrb	r3, [r3, #0]
   30dfe:	2b02      	cmp	r3, #2
   30e00:	d127      	bne.n	30e52 <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   30e02:	2324      	movs	r3, #36	; 0x24
   30e04:	18fa      	adds	r2, r7, r3
   30e06:	68fb      	ldr	r3, [r7, #12]
   30e08:	2107      	movs	r1, #7
   30e0a:	0018      	movs	r0, r3
   30e0c:	4b1a      	ldr	r3, [pc, #104]	; (30e78 <MQTTPublish+0x1b8>)
   30e0e:	4798      	blx	r3
   30e10:	0003      	movs	r3, r0
   30e12:	2b07      	cmp	r3, #7
   30e14:	d114      	bne.n	30e40 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   30e16:	68fb      	ldr	r3, [r7, #12]
   30e18:	695c      	ldr	r4, [r3, #20]
   30e1a:	68fb      	ldr	r3, [r7, #12]
   30e1c:	68db      	ldr	r3, [r3, #12]
   30e1e:	2212      	movs	r2, #18
   30e20:	18ba      	adds	r2, r7, r2
   30e22:	2111      	movs	r1, #17
   30e24:	1879      	adds	r1, r7, r1
   30e26:	2010      	movs	r0, #16
   30e28:	1838      	adds	r0, r7, r0
   30e2a:	9300      	str	r3, [sp, #0]
   30e2c:	0023      	movs	r3, r4
   30e2e:	4c13      	ldr	r4, [pc, #76]	; (30e7c <MQTTPublish+0x1bc>)
   30e30:	47a0      	blx	r4
   30e32:	0003      	movs	r3, r0
   30e34:	2b01      	cmp	r3, #1
   30e36:	d00c      	beq.n	30e52 <MQTTPublish+0x192>
                rc = FAILURE;
   30e38:	2301      	movs	r3, #1
   30e3a:	425b      	negs	r3, r3
   30e3c:	637b      	str	r3, [r7, #52]	; 0x34
   30e3e:	e008      	b.n	30e52 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   30e40:	2301      	movs	r3, #1
   30e42:	425b      	negs	r3, r3
   30e44:	637b      	str	r3, [r7, #52]	; 0x34
   30e46:	e004      	b.n	30e52 <MQTTPublish+0x192>
		goto exit;
   30e48:	46c0      	nop			; (mov r8, r8)
   30e4a:	e002      	b.n	30e52 <MQTTPublish+0x192>
        goto exit;
   30e4c:	46c0      	nop			; (mov r8, r8)
   30e4e:	e000      	b.n	30e52 <MQTTPublish+0x192>
        goto exit; // there was a problem
   30e50:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   30e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   30e54:	0018      	movs	r0, r3
   30e56:	46bd      	mov	sp, r7
   30e58:	b00f      	add	sp, #60	; 0x3c
   30e5a:	bc0c      	pop	{r2, r3}
   30e5c:	4690      	mov	r8, r2
   30e5e:	4699      	mov	r9, r3
   30e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30e62:	46c0      	nop			; (mov r8, r8)
   30e64:	000310c9 	.word	0x000310c9
   30e68:	00031051 	.word	0x00031051
   30e6c:	00030211 	.word	0x00030211
   30e70:	0003234d 	.word	0x0003234d
   30e74:	00030241 	.word	0x00030241
   30e78:	000309a9 	.word	0x000309a9
   30e7c:	00031dc5 	.word	0x00031dc5

00030e80 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   30e80:	b580      	push	{r7, lr}
   30e82:	b088      	sub	sp, #32
   30e84:	af00      	add	r7, sp, #0
   30e86:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   30e88:	2301      	movs	r3, #1
   30e8a:	425b      	negs	r3, r3
   30e8c:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   30e8e:	2300      	movs	r3, #0
   30e90:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   30e92:	230c      	movs	r3, #12
   30e94:	18fb      	adds	r3, r7, r3
   30e96:	0018      	movs	r0, r3
   30e98:	4b13      	ldr	r3, [pc, #76]	; (30ee8 <MQTTDisconnect+0x68>)
   30e9a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   30e9c:	687b      	ldr	r3, [r7, #4]
   30e9e:	685a      	ldr	r2, [r3, #4]
   30ea0:	230c      	movs	r3, #12
   30ea2:	18fb      	adds	r3, r7, r3
   30ea4:	0011      	movs	r1, r2
   30ea6:	0018      	movs	r0, r3
   30ea8:	4b10      	ldr	r3, [pc, #64]	; (30eec <MQTTDisconnect+0x6c>)
   30eaa:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   30eac:	687b      	ldr	r3, [r7, #4]
   30eae:	691a      	ldr	r2, [r3, #16]
   30eb0:	687b      	ldr	r3, [r7, #4]
   30eb2:	689b      	ldr	r3, [r3, #8]
   30eb4:	0019      	movs	r1, r3
   30eb6:	0010      	movs	r0, r2
   30eb8:	4b0d      	ldr	r3, [pc, #52]	; (30ef0 <MQTTDisconnect+0x70>)
   30eba:	4798      	blx	r3
   30ebc:	0003      	movs	r3, r0
   30ebe:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   30ec0:	69bb      	ldr	r3, [r7, #24]
   30ec2:	2b00      	cmp	r3, #0
   30ec4:	dd08      	ble.n	30ed8 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   30ec6:	230c      	movs	r3, #12
   30ec8:	18fa      	adds	r2, r7, r3
   30eca:	69b9      	ldr	r1, [r7, #24]
   30ecc:	687b      	ldr	r3, [r7, #4]
   30ece:	0018      	movs	r0, r3
   30ed0:	4b08      	ldr	r3, [pc, #32]	; (30ef4 <MQTTDisconnect+0x74>)
   30ed2:	4798      	blx	r3
   30ed4:	0003      	movs	r3, r0
   30ed6:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   30ed8:	687b      	ldr	r3, [r7, #4]
   30eda:	2200      	movs	r2, #0
   30edc:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   30ede:	69fb      	ldr	r3, [r7, #28]
}
   30ee0:	0018      	movs	r0, r3
   30ee2:	46bd      	mov	sp, r7
   30ee4:	b008      	add	sp, #32
   30ee6:	bd80      	pop	{r7, pc}
   30ee8:	000310c9 	.word	0x000310c9
   30eec:	00031051 	.word	0x00031051
   30ef0:	00031c79 	.word	0x00031c79
   30ef4:	00030241 	.word	0x00030241

00030ef8 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   30ef8:	b580      	push	{r7, lr}
   30efa:	b084      	sub	sp, #16
   30efc:	af00      	add	r7, sp, #0
   30efe:	0002      	movs	r2, r0
   30f00:	1dfb      	adds	r3, r7, #7
   30f02:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   30f04:	2300      	movs	r3, #0
   30f06:	60fb      	str	r3, [r7, #12]
   30f08:	e01c      	b.n	30f44 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   30f0a:	4a12      	ldr	r2, [pc, #72]	; (30f54 <isMQTTSocket+0x5c>)
   30f0c:	68fb      	ldr	r3, [r7, #12]
   30f0e:	2164      	movs	r1, #100	; 0x64
   30f10:	434b      	muls	r3, r1
   30f12:	18d3      	adds	r3, r2, r3
   30f14:	3360      	adds	r3, #96	; 0x60
   30f16:	681b      	ldr	r3, [r3, #0]
   30f18:	2b00      	cmp	r3, #0
   30f1a:	d010      	beq.n	30f3e <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   30f1c:	4a0d      	ldr	r2, [pc, #52]	; (30f54 <isMQTTSocket+0x5c>)
   30f1e:	68fb      	ldr	r3, [r7, #12]
   30f20:	2164      	movs	r1, #100	; 0x64
   30f22:	434b      	muls	r3, r1
   30f24:	18d3      	adds	r3, r2, r3
   30f26:	3360      	adds	r3, #96	; 0x60
   30f28:	681b      	ldr	r3, [r3, #0]
   30f2a:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   30f2c:	68bb      	ldr	r3, [r7, #8]
   30f2e:	6a1a      	ldr	r2, [r3, #32]
   30f30:	1dfb      	adds	r3, r7, #7
   30f32:	781b      	ldrb	r3, [r3, #0]
   30f34:	b25b      	sxtb	r3, r3
   30f36:	429a      	cmp	r2, r3
   30f38:	d101      	bne.n	30f3e <isMQTTSocket+0x46>
				return true;
   30f3a:	2301      	movs	r3, #1
   30f3c:	e006      	b.n	30f4c <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   30f3e:	68fb      	ldr	r3, [r7, #12]
   30f40:	3301      	adds	r3, #1
   30f42:	60fb      	str	r3, [r7, #12]
   30f44:	68fb      	ldr	r3, [r7, #12]
   30f46:	2b06      	cmp	r3, #6
   30f48:	d9df      	bls.n	30f0a <isMQTTSocket+0x12>
		}
	}
	return false;
   30f4a:	2300      	movs	r3, #0
}
   30f4c:	0018      	movs	r0, r3
   30f4e:	46bd      	mov	sp, r7
   30f50:	b004      	add	sp, #16
   30f52:	bd80      	pop	{r7, pc}
   30f54:	20004050 	.word	0x20004050

00030f58 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   30f58:	b580      	push	{r7, lr}
   30f5a:	b082      	sub	sp, #8
   30f5c:	af00      	add	r7, sp, #0
   30f5e:	6078      	str	r0, [r7, #4]
   30f60:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   30f62:	4b0d      	ldr	r3, [pc, #52]	; (30f98 <dnsResolveCallback+0x40>)
   30f64:	781b      	ldrb	r3, [r3, #0]
   30f66:	2201      	movs	r2, #1
   30f68:	4053      	eors	r3, r2
   30f6a:	b2db      	uxtb	r3, r3
   30f6c:	2b00      	cmp	r3, #0
   30f6e:	d00e      	beq.n	30f8e <dnsResolveCallback+0x36>
   30f70:	4b0a      	ldr	r3, [pc, #40]	; (30f9c <dnsResolveCallback+0x44>)
   30f72:	681b      	ldr	r3, [r3, #0]
   30f74:	687a      	ldr	r2, [r7, #4]
   30f76:	0011      	movs	r1, r2
   30f78:	0018      	movs	r0, r3
   30f7a:	4b09      	ldr	r3, [pc, #36]	; (30fa0 <dnsResolveCallback+0x48>)
   30f7c:	4798      	blx	r3
   30f7e:	1e03      	subs	r3, r0, #0
   30f80:	d105      	bne.n	30f8e <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   30f82:	683a      	ldr	r2, [r7, #0]
   30f84:	4b07      	ldr	r3, [pc, #28]	; (30fa4 <dnsResolveCallback+0x4c>)
   30f86:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   30f88:	4b03      	ldr	r3, [pc, #12]	; (30f98 <dnsResolveCallback+0x40>)
   30f8a:	2201      	movs	r2, #1
   30f8c:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   30f8e:	46c0      	nop			; (mov r8, r8)
   30f90:	46bd      	mov	sp, r7
   30f92:	b002      	add	sp, #8
   30f94:	bd80      	pop	{r7, pc}
   30f96:	46c0      	nop			; (mov r8, r8)
   30f98:	20003f40 	.word	0x20003f40
   30f9c:	2000404c 	.word	0x2000404c
   30fa0:	00036ff7 	.word	0x00036ff7
   30fa4:	20003f38 	.word	0x20003f38

00030fa8 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   30fa8:	b580      	push	{r7, lr}
   30faa:	b084      	sub	sp, #16
   30fac:	af00      	add	r7, sp, #0
   30fae:	603a      	str	r2, [r7, #0]
   30fb0:	1dfb      	adds	r3, r7, #7
   30fb2:	1c02      	adds	r2, r0, #0
   30fb4:	701a      	strb	r2, [r3, #0]
   30fb6:	1dbb      	adds	r3, r7, #6
   30fb8:	1c0a      	adds	r2, r1, #0
   30fba:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   30fbc:	1dfb      	adds	r3, r7, #7
   30fbe:	781b      	ldrb	r3, [r3, #0]
   30fc0:	b25b      	sxtb	r3, r3
   30fc2:	0018      	movs	r0, r3
   30fc4:	4b12      	ldr	r3, [pc, #72]	; (31010 <tcpClientSocketEventHandler+0x68>)
   30fc6:	4798      	blx	r3
   30fc8:	1e03      	subs	r3, r0, #0
   30fca:	d01c      	beq.n	31006 <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   30fcc:	1dbb      	adds	r3, r7, #6
   30fce:	781b      	ldrb	r3, [r3, #0]
   30fd0:	2b06      	cmp	r3, #6
   30fd2:	d00c      	beq.n	30fee <tcpClientSocketEventHandler+0x46>
   30fd4:	2b07      	cmp	r3, #7
   30fd6:	d006      	beq.n	30fe6 <tcpClientSocketEventHandler+0x3e>
   30fd8:	2b05      	cmp	r3, #5
   30fda:	d000      	beq.n	30fde <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   30fdc:	e013      	b.n	31006 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   30fde:	4b0d      	ldr	r3, [pc, #52]	; (31014 <tcpClientSocketEventHandler+0x6c>)
   30fe0:	2201      	movs	r2, #1
   30fe2:	701a      	strb	r2, [r3, #0]
			break;
   30fe4:	e00f      	b.n	31006 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   30fe6:	4b0c      	ldr	r3, [pc, #48]	; (31018 <tcpClientSocketEventHandler+0x70>)
   30fe8:	2201      	movs	r2, #1
   30fea:	701a      	strb	r2, [r3, #0]
			break;
   30fec:	e00b      	b.n	31006 <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   30fee:	683b      	ldr	r3, [r7, #0]
   30ff0:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   30ff2:	68fb      	ldr	r3, [r7, #12]
   30ff4:	2204      	movs	r2, #4
   30ff6:	5e9b      	ldrsh	r3, [r3, r2]
   30ff8:	001a      	movs	r2, r3
   30ffa:	4b08      	ldr	r3, [pc, #32]	; (3101c <tcpClientSocketEventHandler+0x74>)
   30ffc:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   30ffe:	4b08      	ldr	r3, [pc, #32]	; (31020 <tcpClientSocketEventHandler+0x78>)
   31000:	2201      	movs	r2, #1
   31002:	701a      	strb	r2, [r3, #0]
			break;
   31004:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   31006:	46c0      	nop			; (mov r8, r8)
   31008:	46bd      	mov	sp, r7
   3100a:	b004      	add	sp, #16
   3100c:	bd80      	pop	{r7, pc}
   3100e:	46c0      	nop			; (mov r8, r8)
   31010:	00030ef9 	.word	0x00030ef9
   31014:	20003f41 	.word	0x20003f41
   31018:	20003f42 	.word	0x20003f42
   3101c:	20003f3c 	.word	0x20003f3c
   31020:	20003f43 	.word	0x20003f43

00031024 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   31024:	b580      	push	{r7, lr}
   31026:	b082      	sub	sp, #8
   31028:	af00      	add	r7, sp, #0
   3102a:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   3102c:	687b      	ldr	r3, [r7, #4]
   3102e:	3304      	adds	r3, #4
   31030:	687a      	ldr	r2, [r7, #4]
   31032:	0011      	movs	r1, r2
   31034:	0018      	movs	r0, r3
   31036:	4b05      	ldr	r3, [pc, #20]	; (3104c <TimerIsExpired+0x28>)
   31038:	4798      	blx	r3
   3103a:	0003      	movs	r3, r0
   3103c:	3b01      	subs	r3, #1
   3103e:	425a      	negs	r2, r3
   31040:	4153      	adcs	r3, r2
   31042:	b2db      	uxtb	r3, r3
}
   31044:	0018      	movs	r0, r3
   31046:	46bd      	mov	sp, r7
   31048:	b002      	add	sp, #8
   3104a:	bd80      	pop	{r7, pc}
   3104c:	0001eca1 	.word	0x0001eca1

00031050 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   31050:	b580      	push	{r7, lr}
   31052:	b082      	sub	sp, #8
   31054:	af00      	add	r7, sp, #0
   31056:	6078      	str	r0, [r7, #4]
   31058:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   3105a:	687b      	ldr	r3, [r7, #4]
   3105c:	683a      	ldr	r2, [r7, #0]
   3105e:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   31060:	687b      	ldr	r3, [r7, #4]
   31062:	3304      	adds	r3, #4
   31064:	0018      	movs	r0, r3
   31066:	4b03      	ldr	r3, [pc, #12]	; (31074 <TimerCountdownMS+0x24>)
   31068:	4798      	blx	r3
}
   3106a:	46c0      	nop			; (mov r8, r8)
   3106c:	46bd      	mov	sp, r7
   3106e:	b002      	add	sp, #8
   31070:	bd80      	pop	{r7, pc}
   31072:	46c0      	nop			; (mov r8, r8)
   31074:	0001ec35 	.word	0x0001ec35

00031078 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   31078:	b580      	push	{r7, lr}
   3107a:	b082      	sub	sp, #8
   3107c:	af00      	add	r7, sp, #0
   3107e:	6078      	str	r0, [r7, #4]
   31080:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   31082:	683b      	ldr	r3, [r7, #0]
   31084:	22fa      	movs	r2, #250	; 0xfa
   31086:	0092      	lsls	r2, r2, #2
   31088:	435a      	muls	r2, r3
   3108a:	687b      	ldr	r3, [r7, #4]
   3108c:	0011      	movs	r1, r2
   3108e:	0018      	movs	r0, r3
   31090:	4b02      	ldr	r3, [pc, #8]	; (3109c <TimerCountdown+0x24>)
   31092:	4798      	blx	r3
}
   31094:	46c0      	nop			; (mov r8, r8)
   31096:	46bd      	mov	sp, r7
   31098:	b002      	add	sp, #8
   3109a:	bd80      	pop	{r7, pc}
   3109c:	00031051 	.word	0x00031051

000310a0 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   310a0:	b580      	push	{r7, lr}
   310a2:	b082      	sub	sp, #8
   310a4:	af00      	add	r7, sp, #0
   310a6:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   310a8:	687b      	ldr	r3, [r7, #4]
   310aa:	3304      	adds	r3, #4
   310ac:	687a      	ldr	r2, [r7, #4]
   310ae:	0011      	movs	r1, r2
   310b0:	0018      	movs	r0, r3
   310b2:	4b04      	ldr	r3, [pc, #16]	; (310c4 <TimerLeftMS+0x24>)
   310b4:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   310b6:	687b      	ldr	r3, [r7, #4]
   310b8:	681b      	ldr	r3, [r3, #0]
}
   310ba:	0018      	movs	r0, r3
   310bc:	46bd      	mov	sp, r7
   310be:	b002      	add	sp, #8
   310c0:	bd80      	pop	{r7, pc}
   310c2:	46c0      	nop			; (mov r8, r8)
   310c4:	0001eca1 	.word	0x0001eca1

000310c8 <TimerInit>:


void TimerInit(Timer* timer) {
   310c8:	b580      	push	{r7, lr}
   310ca:	b082      	sub	sp, #8
   310cc:	af00      	add	r7, sp, #0
   310ce:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   310d0:	687b      	ldr	r3, [r7, #4]
   310d2:	2200      	movs	r2, #0
   310d4:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   310d6:	687b      	ldr	r3, [r7, #4]
   310d8:	3304      	adds	r3, #4
   310da:	2208      	movs	r2, #8
   310dc:	2100      	movs	r1, #0
   310de:	0018      	movs	r0, r3
   310e0:	4b02      	ldr	r3, [pc, #8]	; (310ec <TimerInit+0x24>)
   310e2:	4798      	blx	r3
}
   310e4:	46c0      	nop			; (mov r8, r8)
   310e6:	46bd      	mov	sp, r7
   310e8:	b002      	add	sp, #8
   310ea:	bd80      	pop	{r7, pc}
   310ec:	00036c9f 	.word	0x00036c9f

000310f0 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   310f0:	b590      	push	{r4, r7, lr}
   310f2:	b085      	sub	sp, #20
   310f4:	af00      	add	r7, sp, #0
   310f6:	60f8      	str	r0, [r7, #12]
   310f8:	60b9      	str	r1, [r7, #8]
   310fa:	607a      	str	r2, [r7, #4]
   310fc:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   310fe:	683b      	ldr	r3, [r7, #0]
   31100:	2b00      	cmp	r3, #0
   31102:	d101      	bne.n	31108 <WINC1500_read+0x18>
   31104:	230a      	movs	r3, #10
   31106:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   31108:	4b2c      	ldr	r3, [pc, #176]	; (311bc <WINC1500_read+0xcc>)
   3110a:	681b      	ldr	r3, [r3, #0]
   3110c:	2b00      	cmp	r3, #0
   3110e:	d131      	bne.n	31174 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   31110:	4b2b      	ldr	r3, [pc, #172]	; (311c0 <WINC1500_read+0xd0>)
   31112:	2200      	movs	r2, #0
   31114:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   31116:	68fb      	ldr	r3, [r7, #12]
   31118:	681b      	ldr	r3, [r3, #0]
   3111a:	b258      	sxtb	r0, r3
   3111c:	683c      	ldr	r4, [r7, #0]
   3111e:	2380      	movs	r3, #128	; 0x80
   31120:	005a      	lsls	r2, r3, #1
   31122:	4928      	ldr	r1, [pc, #160]	; (311c4 <WINC1500_read+0xd4>)
   31124:	0023      	movs	r3, r4
   31126:	4c28      	ldr	r4, [pc, #160]	; (311c8 <WINC1500_read+0xd8>)
   31128:	47a0      	blx	r4
   3112a:	1e03      	subs	r3, r0, #0
   3112c:	d005      	beq.n	3113a <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   3112e:	2301      	movs	r3, #1
   31130:	425b      	negs	r3, r3
   31132:	e03e      	b.n	311b2 <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   31134:	2000      	movs	r0, #0
   31136:	4b25      	ldr	r3, [pc, #148]	; (311cc <WINC1500_read+0xdc>)
   31138:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   3113a:	4b21      	ldr	r3, [pc, #132]	; (311c0 <WINC1500_read+0xd0>)
   3113c:	781b      	ldrb	r3, [r3, #0]
   3113e:	2201      	movs	r2, #1
   31140:	4053      	eors	r3, r2
   31142:	b2db      	uxtb	r3, r3
   31144:	2b00      	cmp	r3, #0
   31146:	d1f5      	bne.n	31134 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   31148:	4b21      	ldr	r3, [pc, #132]	; (311d0 <WINC1500_read+0xe0>)
   3114a:	681b      	ldr	r3, [r3, #0]
   3114c:	2b00      	cmp	r3, #0
   3114e:	dd08      	ble.n	31162 <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   31150:	4b1f      	ldr	r3, [pc, #124]	; (311d0 <WINC1500_read+0xe0>)
   31152:	681b      	ldr	r3, [r3, #0]
   31154:	001a      	movs	r2, r3
   31156:	4b19      	ldr	r3, [pc, #100]	; (311bc <WINC1500_read+0xcc>)
   31158:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   3115a:	4b1e      	ldr	r3, [pc, #120]	; (311d4 <WINC1500_read+0xe4>)
   3115c:	2200      	movs	r2, #0
   3115e:	601a      	str	r2, [r3, #0]
   31160:	e008      	b.n	31174 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   31162:	4b16      	ldr	r3, [pc, #88]	; (311bc <WINC1500_read+0xcc>)
   31164:	2200      	movs	r2, #0
   31166:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   31168:	4b1a      	ldr	r3, [pc, #104]	; (311d4 <WINC1500_read+0xe4>)
   3116a:	2200      	movs	r2, #0
   3116c:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   3116e:	4b18      	ldr	r3, [pc, #96]	; (311d0 <WINC1500_read+0xe0>)
   31170:	681b      	ldr	r3, [r3, #0]
   31172:	e01e      	b.n	311b2 <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   31174:	4b11      	ldr	r3, [pc, #68]	; (311bc <WINC1500_read+0xcc>)
   31176:	681b      	ldr	r3, [r3, #0]
   31178:	001a      	movs	r2, r3
   3117a:	687b      	ldr	r3, [r7, #4]
   3117c:	4293      	cmp	r3, r2
   3117e:	dd02      	ble.n	31186 <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   31180:	2301      	movs	r3, #1
   31182:	425b      	negs	r3, r3
   31184:	e015      	b.n	311b2 <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   31186:	4b13      	ldr	r3, [pc, #76]	; (311d4 <WINC1500_read+0xe4>)
   31188:	681a      	ldr	r2, [r3, #0]
   3118a:	4b0e      	ldr	r3, [pc, #56]	; (311c4 <WINC1500_read+0xd4>)
   3118c:	18d1      	adds	r1, r2, r3
   3118e:	687a      	ldr	r2, [r7, #4]
   31190:	68bb      	ldr	r3, [r7, #8]
   31192:	0018      	movs	r0, r3
   31194:	4b10      	ldr	r3, [pc, #64]	; (311d8 <WINC1500_read+0xe8>)
   31196:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   31198:	4b08      	ldr	r3, [pc, #32]	; (311bc <WINC1500_read+0xcc>)
   3119a:	681a      	ldr	r2, [r3, #0]
   3119c:	687b      	ldr	r3, [r7, #4]
   3119e:	1ad2      	subs	r2, r2, r3
   311a0:	4b06      	ldr	r3, [pc, #24]	; (311bc <WINC1500_read+0xcc>)
   311a2:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   311a4:	4b0b      	ldr	r3, [pc, #44]	; (311d4 <WINC1500_read+0xe4>)
   311a6:	681a      	ldr	r2, [r3, #0]
   311a8:	687b      	ldr	r3, [r7, #4]
   311aa:	18d2      	adds	r2, r2, r3
   311ac:	4b09      	ldr	r3, [pc, #36]	; (311d4 <WINC1500_read+0xe4>)
   311ae:	601a      	str	r2, [r3, #0]
  
  return len;
   311b0:	687b      	ldr	r3, [r7, #4]
}
   311b2:	0018      	movs	r0, r3
   311b4:	46bd      	mov	sp, r7
   311b6:	b005      	add	sp, #20
   311b8:	bd90      	pop	{r4, r7, pc}
   311ba:	46c0      	nop			; (mov r8, r8)
   311bc:	20004048 	.word	0x20004048
   311c0:	20003f43 	.word	0x20003f43
   311c4:	20003f44 	.word	0x20003f44
   311c8:	000277a1 	.word	0x000277a1
   311cc:	00023ce9 	.word	0x00023ce9
   311d0:	20003f3c 	.word	0x20003f3c
   311d4:	20004044 	.word	0x20004044
   311d8:	00036c69 	.word	0x00036c69

000311dc <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   311dc:	b590      	push	{r4, r7, lr}
   311de:	b085      	sub	sp, #20
   311e0:	af00      	add	r7, sp, #0
   311e2:	60f8      	str	r0, [r7, #12]
   311e4:	60b9      	str	r1, [r7, #8]
   311e6:	607a      	str	r2, [r7, #4]
   311e8:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   311ea:	4b10      	ldr	r3, [pc, #64]	; (3122c <WINC1500_write+0x50>)
   311ec:	2200      	movs	r2, #0
   311ee:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   311f0:	68fb      	ldr	r3, [r7, #12]
   311f2:	681b      	ldr	r3, [r3, #0]
   311f4:	b258      	sxtb	r0, r3
   311f6:	687b      	ldr	r3, [r7, #4]
   311f8:	b29a      	uxth	r2, r3
   311fa:	68b9      	ldr	r1, [r7, #8]
   311fc:	2300      	movs	r3, #0
   311fe:	4c0c      	ldr	r4, [pc, #48]	; (31230 <WINC1500_write+0x54>)
   31200:	47a0      	blx	r4
   31202:	1e03      	subs	r3, r0, #0
   31204:	d005      	beq.n	31212 <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   31206:	2301      	movs	r3, #1
   31208:	425b      	negs	r3, r3
   3120a:	e00a      	b.n	31222 <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   3120c:	2000      	movs	r0, #0
   3120e:	4b09      	ldr	r3, [pc, #36]	; (31234 <WINC1500_write+0x58>)
   31210:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   31212:	4b06      	ldr	r3, [pc, #24]	; (3122c <WINC1500_write+0x50>)
   31214:	781b      	ldrb	r3, [r3, #0]
   31216:	2201      	movs	r2, #1
   31218:	4053      	eors	r3, r2
   3121a:	b2db      	uxtb	r3, r3
   3121c:	2b00      	cmp	r3, #0
   3121e:	d1f5      	bne.n	3120c <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   31220:	687b      	ldr	r3, [r7, #4]
}
   31222:	0018      	movs	r0, r3
   31224:	46bd      	mov	sp, r7
   31226:	b005      	add	sp, #20
   31228:	bd90      	pop	{r4, r7, pc}
   3122a:	46c0      	nop			; (mov r8, r8)
   3122c:	20003f42 	.word	0x20003f42
   31230:	0002763d 	.word	0x0002763d
   31234:	00023ce9 	.word	0x00023ce9

00031238 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   31238:	b580      	push	{r7, lr}
   3123a:	b082      	sub	sp, #8
   3123c:	af00      	add	r7, sp, #0
   3123e:	6078      	str	r0, [r7, #4]
	close(n->socket);
   31240:	687b      	ldr	r3, [r7, #4]
   31242:	681b      	ldr	r3, [r3, #0]
   31244:	b25b      	sxtb	r3, r3
   31246:	0018      	movs	r0, r3
   31248:	4b06      	ldr	r3, [pc, #24]	; (31264 <WINC1500_disconnect+0x2c>)
   3124a:	4798      	blx	r3
	n->socket=-1;
   3124c:	687b      	ldr	r3, [r7, #4]
   3124e:	2201      	movs	r2, #1
   31250:	4252      	negs	r2, r2
   31252:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   31254:	4b04      	ldr	r3, [pc, #16]	; (31268 <WINC1500_disconnect+0x30>)
   31256:	2200      	movs	r2, #0
   31258:	701a      	strb	r2, [r3, #0]
}
   3125a:	46c0      	nop			; (mov r8, r8)
   3125c:	46bd      	mov	sp, r7
   3125e:	b002      	add	sp, #8
   31260:	bd80      	pop	{r7, pc}
   31262:	46c0      	nop			; (mov r8, r8)
   31264:	00027921 	.word	0x00027921
   31268:	20003f41 	.word	0x20003f41

0003126c <NetworkInit>:


void NetworkInit(Network* n) {
   3126c:	b580      	push	{r7, lr}
   3126e:	b082      	sub	sp, #8
   31270:	af00      	add	r7, sp, #0
   31272:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   31274:	687b      	ldr	r3, [r7, #4]
   31276:	2201      	movs	r2, #1
   31278:	4252      	negs	r2, r2
   3127a:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   3127c:	687b      	ldr	r3, [r7, #4]
   3127e:	4a06      	ldr	r2, [pc, #24]	; (31298 <NetworkInit+0x2c>)
   31280:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   31282:	687b      	ldr	r3, [r7, #4]
   31284:	4a05      	ldr	r2, [pc, #20]	; (3129c <NetworkInit+0x30>)
   31286:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   31288:	687b      	ldr	r3, [r7, #4]
   3128a:	4a05      	ldr	r2, [pc, #20]	; (312a0 <NetworkInit+0x34>)
   3128c:	611a      	str	r2, [r3, #16]
}
   3128e:	46c0      	nop			; (mov r8, r8)
   31290:	46bd      	mov	sp, r7
   31292:	b002      	add	sp, #8
   31294:	bd80      	pop	{r7, pc}
   31296:	46c0      	nop			; (mov r8, r8)
   31298:	000310f1 	.word	0x000310f1
   3129c:	000311dd 	.word	0x000311dd
   312a0:	00031239 	.word	0x00031239

000312a4 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   312a4:	b580      	push	{r7, lr}
   312a6:	b088      	sub	sp, #32
   312a8:	af00      	add	r7, sp, #0
   312aa:	60f8      	str	r0, [r7, #12]
   312ac:	60b9      	str	r1, [r7, #8]
   312ae:	607a      	str	r2, [r7, #4]
   312b0:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   312b2:	4b37      	ldr	r3, [pc, #220]	; (31390 <ConnectNetwork+0xec>)
   312b4:	2200      	movs	r2, #0
   312b6:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   312b8:	4b36      	ldr	r3, [pc, #216]	; (31394 <ConnectNetwork+0xf0>)
   312ba:	68ba      	ldr	r2, [r7, #8]
   312bc:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   312be:	68bb      	ldr	r3, [r7, #8]
   312c0:	0018      	movs	r0, r3
   312c2:	4b35      	ldr	r3, [pc, #212]	; (31398 <ConnectNetwork+0xf4>)
   312c4:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   312c6:	e002      	b.n	312ce <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   312c8:	2000      	movs	r0, #0
   312ca:	4b34      	ldr	r3, [pc, #208]	; (3139c <ConnectNetwork+0xf8>)
   312cc:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   312ce:	4b30      	ldr	r3, [pc, #192]	; (31390 <ConnectNetwork+0xec>)
   312d0:	781b      	ldrb	r3, [r3, #0]
   312d2:	2201      	movs	r2, #1
   312d4:	4053      	eors	r3, r2
   312d6:	b2db      	uxtb	r3, r3
   312d8:	2b00      	cmp	r3, #0
   312da:	d1f5      	bne.n	312c8 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   312dc:	4b30      	ldr	r3, [pc, #192]	; (313a0 <ConnectNetwork+0xfc>)
   312de:	681a      	ldr	r2, [r3, #0]
   312e0:	68fb      	ldr	r3, [r7, #12]
   312e2:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   312e4:	2310      	movs	r3, #16
   312e6:	18fb      	adds	r3, r7, r3
   312e8:	2202      	movs	r2, #2
   312ea:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   312ec:	687b      	ldr	r3, [r7, #4]
   312ee:	b29b      	uxth	r3, r3
   312f0:	021b      	lsls	r3, r3, #8
   312f2:	b21a      	sxth	r2, r3
   312f4:	687b      	ldr	r3, [r7, #4]
   312f6:	b29b      	uxth	r3, r3
   312f8:	0a1b      	lsrs	r3, r3, #8
   312fa:	b29b      	uxth	r3, r3
   312fc:	b21b      	sxth	r3, r3
   312fe:	4313      	orrs	r3, r2
   31300:	b21b      	sxth	r3, r3
   31302:	b29a      	uxth	r2, r3
   31304:	2310      	movs	r3, #16
   31306:	18fb      	adds	r3, r7, r3
   31308:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   3130a:	4b25      	ldr	r3, [pc, #148]	; (313a0 <ConnectNetwork+0xfc>)
   3130c:	681b      	ldr	r3, [r3, #0]
   3130e:	001a      	movs	r2, r3
   31310:	2310      	movs	r3, #16
   31312:	18fb      	adds	r3, r7, r3
   31314:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   31316:	68fb      	ldr	r3, [r7, #12]
   31318:	681b      	ldr	r3, [r3, #0]
   3131a:	2b00      	cmp	r3, #0
   3131c:	da0a      	bge.n	31334 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   3131e:	683b      	ldr	r3, [r7, #0]
   31320:	b2db      	uxtb	r3, r3
   31322:	001a      	movs	r2, r3
   31324:	2101      	movs	r1, #1
   31326:	2002      	movs	r0, #2
   31328:	4b1e      	ldr	r3, [pc, #120]	; (313a4 <ConnectNetwork+0x100>)
   3132a:	4798      	blx	r3
   3132c:	0003      	movs	r3, r0
   3132e:	001a      	movs	r2, r3
   31330:	68fb      	ldr	r3, [r7, #12]
   31332:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   31334:	68fb      	ldr	r3, [r7, #12]
   31336:	681b      	ldr	r3, [r3, #0]
   31338:	3301      	adds	r3, #1
   3133a:	d108      	bne.n	3134e <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   3133c:	68fb      	ldr	r3, [r7, #12]
   3133e:	681b      	ldr	r3, [r3, #0]
   31340:	b25b      	sxtb	r3, r3
   31342:	0018      	movs	r0, r3
   31344:	4b18      	ldr	r3, [pc, #96]	; (313a8 <ConnectNetwork+0x104>)
   31346:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   31348:	2309      	movs	r3, #9
   3134a:	425b      	negs	r3, r3
   3134c:	e01c      	b.n	31388 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   3134e:	68fb      	ldr	r3, [r7, #12]
   31350:	681b      	ldr	r3, [r3, #0]
   31352:	b25b      	sxtb	r3, r3
   31354:	2210      	movs	r2, #16
   31356:	18b9      	adds	r1, r7, r2
   31358:	2210      	movs	r2, #16
   3135a:	0018      	movs	r0, r3
   3135c:	4b13      	ldr	r3, [pc, #76]	; (313ac <ConnectNetwork+0x108>)
   3135e:	4798      	blx	r3
   31360:	1e03      	subs	r3, r0, #0
   31362:	d002      	beq.n	3136a <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   31364:	2309      	movs	r3, #9
   31366:	425b      	negs	r3, r3
   31368:	e00e      	b.n	31388 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   3136a:	4b11      	ldr	r3, [pc, #68]	; (313b0 <ConnectNetwork+0x10c>)
   3136c:	2200      	movs	r2, #0
   3136e:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   31370:	e002      	b.n	31378 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   31372:	2000      	movs	r0, #0
   31374:	4b09      	ldr	r3, [pc, #36]	; (3139c <ConnectNetwork+0xf8>)
   31376:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   31378:	4b0d      	ldr	r3, [pc, #52]	; (313b0 <ConnectNetwork+0x10c>)
   3137a:	781b      	ldrb	r3, [r3, #0]
   3137c:	2201      	movs	r2, #1
   3137e:	4053      	eors	r3, r2
   31380:	b2db      	uxtb	r3, r3
   31382:	2b00      	cmp	r3, #0
   31384:	d1f5      	bne.n	31372 <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   31386:	2300      	movs	r3, #0
   31388:	0018      	movs	r0, r3
   3138a:	46bd      	mov	sp, r7
   3138c:	b008      	add	sp, #32
   3138e:	bd80      	pop	{r7, pc}
   31390:	20003f40 	.word	0x20003f40
   31394:	2000404c 	.word	0x2000404c
   31398:	00027b69 	.word	0x00027b69
   3139c:	00023ce9 	.word	0x00023ce9
   313a0:	20003f38 	.word	0x20003f38
   313a4:	00027315 	.word	0x00027315
   313a8:	00027921 	.word	0x00027921
   313ac:	00027529 	.word	0x00027529
   313b0:	20003f41 	.word	0x20003f41

000313b4 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   313b4:	b580      	push	{r7, lr}
   313b6:	b084      	sub	sp, #16
   313b8:	af00      	add	r7, sp, #0
   313ba:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   313bc:	687b      	ldr	r3, [r7, #4]
   313be:	2b00      	cmp	r3, #0
   313c0:	d022      	beq.n	31408 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   313c2:	2300      	movs	r3, #0
   313c4:	60fb      	str	r3, [r7, #12]
   313c6:	e01b      	b.n	31400 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   313c8:	4a11      	ldr	r2, [pc, #68]	; (31410 <allocateClient+0x5c>)
   313ca:	68fb      	ldr	r3, [r7, #12]
   313cc:	2164      	movs	r1, #100	; 0x64
   313ce:	434b      	muls	r3, r1
   313d0:	18d3      	adds	r3, r2, r3
   313d2:	3360      	adds	r3, #96	; 0x60
   313d4:	681b      	ldr	r3, [r3, #0]
   313d6:	2b00      	cmp	r3, #0
   313d8:	d10f      	bne.n	313fa <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   313da:	4a0d      	ldr	r2, [pc, #52]	; (31410 <allocateClient+0x5c>)
   313dc:	68fb      	ldr	r3, [r7, #12]
   313de:	2164      	movs	r1, #100	; 0x64
   313e0:	434b      	muls	r3, r1
   313e2:	18d3      	adds	r3, r2, r3
   313e4:	3360      	adds	r3, #96	; 0x60
   313e6:	687a      	ldr	r2, [r7, #4]
   313e8:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   313ea:	68fb      	ldr	r3, [r7, #12]
   313ec:	2264      	movs	r2, #100	; 0x64
   313ee:	435a      	muls	r2, r3
   313f0:	4b07      	ldr	r3, [pc, #28]	; (31410 <allocateClient+0x5c>)
   313f2:	18d2      	adds	r2, r2, r3
   313f4:	687b      	ldr	r3, [r7, #4]
   313f6:	61da      	str	r2, [r3, #28]
			return;
   313f8:	e007      	b.n	3140a <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   313fa:	68fb      	ldr	r3, [r7, #12]
   313fc:	3301      	adds	r3, #1
   313fe:	60fb      	str	r3, [r7, #12]
   31400:	68fb      	ldr	r3, [r7, #12]
   31402:	2b06      	cmp	r3, #6
   31404:	d9e0      	bls.n	313c8 <allocateClient+0x14>
   31406:	e000      	b.n	3140a <allocateClient+0x56>
		return;
   31408:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   3140a:	46bd      	mov	sp, r7
   3140c:	b004      	add	sp, #16
   3140e:	bd80      	pop	{r7, pc}
   31410:	20004050 	.word	0x20004050

00031414 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   31414:	b5f0      	push	{r4, r5, r6, r7, lr}
   31416:	b089      	sub	sp, #36	; 0x24
   31418:	af04      	add	r7, sp, #16
   3141a:	6078      	str	r0, [r7, #4]
   3141c:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   3141e:	687b      	ldr	r3, [r7, #4]
   31420:	2b00      	cmp	r3, #0
   31422:	d00a      	beq.n	3143a <mqtt_init+0x26>
   31424:	683b      	ldr	r3, [r7, #0]
   31426:	2b00      	cmp	r3, #0
   31428:	d007      	beq.n	3143a <mqtt_init+0x26>
   3142a:	683b      	ldr	r3, [r7, #0]
   3142c:	691b      	ldr	r3, [r3, #16]
   3142e:	2b00      	cmp	r3, #0
   31430:	d003      	beq.n	3143a <mqtt_init+0x26>
   31432:	683b      	ldr	r3, [r7, #0]
   31434:	689b      	ldr	r3, [r3, #8]
   31436:	2b00      	cmp	r3, #0
   31438:	d102      	bne.n	31440 <mqtt_init+0x2c>
		return FAILURE;
   3143a:	2301      	movs	r3, #1
   3143c:	425b      	negs	r3, r3
   3143e:	e034      	b.n	314aa <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   31440:	683b      	ldr	r3, [r7, #0]
   31442:	889b      	ldrh	r3, [r3, #4]
   31444:	001a      	movs	r2, r3
   31446:	23fa      	movs	r3, #250	; 0xfa
   31448:	009b      	lsls	r3, r3, #2
   3144a:	4353      	muls	r3, r2
   3144c:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   3144e:	687b      	ldr	r3, [r7, #4]
   31450:	3320      	adds	r3, #32
   31452:	0018      	movs	r0, r3
   31454:	4b17      	ldr	r3, [pc, #92]	; (314b4 <mqtt_init+0xa0>)
   31456:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   31458:	687b      	ldr	r3, [r7, #4]
   3145a:	3304      	adds	r3, #4
   3145c:	6839      	ldr	r1, [r7, #0]
   3145e:	2218      	movs	r2, #24
   31460:	0018      	movs	r0, r3
   31462:	4b15      	ldr	r3, [pc, #84]	; (314b8 <mqtt_init+0xa4>)
   31464:	4798      	blx	r3
	allocateClient(module);
   31466:	687b      	ldr	r3, [r7, #4]
   31468:	0018      	movs	r0, r3
   3146a:	4b14      	ldr	r3, [pc, #80]	; (314bc <mqtt_init+0xa8>)
   3146c:	4798      	blx	r3
	
	if(module->client)
   3146e:	687b      	ldr	r3, [r7, #4]
   31470:	69db      	ldr	r3, [r3, #28]
   31472:	2b00      	cmp	r3, #0
   31474:	d017      	beq.n	314a6 <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   31476:	687b      	ldr	r3, [r7, #4]
   31478:	69d8      	ldr	r0, [r3, #28]
   3147a:	687b      	ldr	r3, [r7, #4]
   3147c:	3320      	adds	r3, #32
   3147e:	001c      	movs	r4, r3
   31480:	683b      	ldr	r3, [r7, #0]
   31482:	691e      	ldr	r6, [r3, #16]
   31484:	683b      	ldr	r3, [r7, #0]
   31486:	695a      	ldr	r2, [r3, #20]
   31488:	683b      	ldr	r3, [r7, #0]
   3148a:	6899      	ldr	r1, [r3, #8]
   3148c:	683b      	ldr	r3, [r7, #0]
   3148e:	68db      	ldr	r3, [r3, #12]
   31490:	68fd      	ldr	r5, [r7, #12]
   31492:	9302      	str	r3, [sp, #8]
   31494:	9101      	str	r1, [sp, #4]
   31496:	9200      	str	r2, [sp, #0]
   31498:	0033      	movs	r3, r6
   3149a:	002a      	movs	r2, r5
   3149c:	0021      	movs	r1, r4
   3149e:	4c08      	ldr	r4, [pc, #32]	; (314c0 <mqtt_init+0xac>)
   314a0:	47a0      	blx	r4
		return SUCCESS;
   314a2:	2300      	movs	r3, #0
   314a4:	e001      	b.n	314aa <mqtt_init+0x96>
	}
	else
		return FAILURE;
   314a6:	2301      	movs	r3, #1
   314a8:	425b      	negs	r3, r3
}
   314aa:	0018      	movs	r0, r3
   314ac:	46bd      	mov	sp, r7
   314ae:	b005      	add	sp, #20
   314b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   314b2:	46c0      	nop			; (mov r8, r8)
   314b4:	0003126d 	.word	0x0003126d
   314b8:	00036c69 	.word	0x00036c69
   314bc:	000313b5 	.word	0x000313b5
   314c0:	000302e5 	.word	0x000302e5

000314c4 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   314c4:	b580      	push	{r7, lr}
   314c6:	b082      	sub	sp, #8
   314c8:	af00      	add	r7, sp, #0
   314ca:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   314cc:	687b      	ldr	r3, [r7, #4]
   314ce:	4a0c      	ldr	r2, [pc, #48]	; (31500 <mqtt_get_config_defaults+0x3c>)
   314d0:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   314d2:	687b      	ldr	r3, [r7, #4]
   314d4:	2200      	movs	r2, #0
   314d6:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   314d8:	687b      	ldr	r3, [r7, #4]
   314da:	223c      	movs	r2, #60	; 0x3c
   314dc:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   314de:	687b      	ldr	r3, [r7, #4]
   314e0:	2200      	movs	r2, #0
   314e2:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   314e4:	687b      	ldr	r3, [r7, #4]
   314e6:	2200      	movs	r2, #0
   314e8:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   314ea:	687b      	ldr	r3, [r7, #4]
   314ec:	2200      	movs	r2, #0
   314ee:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   314f0:	687b      	ldr	r3, [r7, #4]
   314f2:	2200      	movs	r2, #0
   314f4:	615a      	str	r2, [r3, #20]
}
   314f6:	46c0      	nop			; (mov r8, r8)
   314f8:	46bd      	mov	sp, r7
   314fa:	b002      	add	sp, #8
   314fc:	bd80      	pop	{r7, pc}
   314fe:	46c0      	nop			; (mov r8, r8)
   31500:	0000075b 	.word	0x0000075b

00031504 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   31504:	b580      	push	{r7, lr}
   31506:	b082      	sub	sp, #8
   31508:	af00      	add	r7, sp, #0
   3150a:	6078      	str	r0, [r7, #4]
   3150c:	6039      	str	r1, [r7, #0]
	if(module)
   3150e:	687b      	ldr	r3, [r7, #4]
   31510:	2b00      	cmp	r3, #0
   31512:	d004      	beq.n	3151e <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   31514:	687b      	ldr	r3, [r7, #4]
   31516:	683a      	ldr	r2, [r7, #0]
   31518:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   3151a:	2300      	movs	r3, #0
   3151c:	e001      	b.n	31522 <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   3151e:	2301      	movs	r3, #1
   31520:	425b      	negs	r3, r3
}
   31522:	0018      	movs	r0, r3
   31524:	46bd      	mov	sp, r7
   31526:	b002      	add	sp, #8
   31528:	bd80      	pop	{r7, pc}
	...

0003152c <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   3152c:	b580      	push	{r7, lr}
   3152e:	b082      	sub	sp, #8
   31530:	af00      	add	r7, sp, #0
   31532:	603a      	str	r2, [r7, #0]
   31534:	1dfb      	adds	r3, r7, #7
   31536:	1c02      	adds	r2, r0, #0
   31538:	701a      	strb	r2, [r3, #0]
   3153a:	1dbb      	adds	r3, r7, #6
   3153c:	1c0a      	adds	r2, r1, #0
   3153e:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   31540:	683a      	ldr	r2, [r7, #0]
   31542:	1dbb      	adds	r3, r7, #6
   31544:	7819      	ldrb	r1, [r3, #0]
   31546:	1dfb      	adds	r3, r7, #7
   31548:	781b      	ldrb	r3, [r3, #0]
   3154a:	b25b      	sxtb	r3, r3
   3154c:	0018      	movs	r0, r3
   3154e:	4b03      	ldr	r3, [pc, #12]	; (3155c <mqtt_socket_event_handler+0x30>)
   31550:	4798      	blx	r3
}
   31552:	46c0      	nop			; (mov r8, r8)
   31554:	46bd      	mov	sp, r7
   31556:	b002      	add	sp, #8
   31558:	bd80      	pop	{r7, pc}
   3155a:	46c0      	nop			; (mov r8, r8)
   3155c:	00030fa9 	.word	0x00030fa9

00031560 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   31560:	b580      	push	{r7, lr}
   31562:	b082      	sub	sp, #8
   31564:	af00      	add	r7, sp, #0
   31566:	6078      	str	r0, [r7, #4]
   31568:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   3156a:	683a      	ldr	r2, [r7, #0]
   3156c:	687b      	ldr	r3, [r7, #4]
   3156e:	0011      	movs	r1, r2
   31570:	0018      	movs	r0, r3
   31572:	4b03      	ldr	r3, [pc, #12]	; (31580 <mqtt_socket_resolve_handler+0x20>)
   31574:	4798      	blx	r3
}
   31576:	46c0      	nop			; (mov r8, r8)
   31578:	46bd      	mov	sp, r7
   3157a:	b002      	add	sp, #8
   3157c:	bd80      	pop	{r7, pc}
   3157e:	46c0      	nop			; (mov r8, r8)
   31580:	00030f59 	.word	0x00030f59

00031584 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   31584:	b590      	push	{r4, r7, lr}
   31586:	b085      	sub	sp, #20
   31588:	af00      	add	r7, sp, #0
   3158a:	6078      	str	r0, [r7, #4]
   3158c:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   3158e:	687b      	ldr	r3, [r7, #4]
   31590:	3320      	adds	r3, #32
   31592:	0018      	movs	r0, r3
   31594:	687b      	ldr	r3, [r7, #4]
   31596:	889b      	ldrh	r3, [r3, #4]
   31598:	001a      	movs	r2, r3
   3159a:	687b      	ldr	r3, [r7, #4]
   3159c:	799b      	ldrb	r3, [r3, #6]
   3159e:	6839      	ldr	r1, [r7, #0]
   315a0:	4c09      	ldr	r4, [pc, #36]	; (315c8 <mqtt_connect+0x44>)
   315a2:	47a0      	blx	r4
   315a4:	0003      	movs	r3, r0
   315a6:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   315a8:	687b      	ldr	r3, [r7, #4]
   315aa:	681b      	ldr	r3, [r3, #0]
   315ac:	2b00      	cmp	r3, #0
   315ae:	d006      	beq.n	315be <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   315b0:	687b      	ldr	r3, [r7, #4]
   315b2:	681b      	ldr	r3, [r3, #0]
   315b4:	220c      	movs	r2, #12
   315b6:	18ba      	adds	r2, r7, r2
   315b8:	6878      	ldr	r0, [r7, #4]
   315ba:	2100      	movs	r1, #0
   315bc:	4798      	blx	r3
	return connResult.sock_connected.result;
   315be:	68fb      	ldr	r3, [r7, #12]
}
   315c0:	0018      	movs	r0, r3
   315c2:	46bd      	mov	sp, r7
   315c4:	b005      	add	sp, #20
   315c6:	bd90      	pop	{r4, r7, pc}
   315c8:	000312a5 	.word	0x000312a5

000315cc <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   315cc:	b580      	push	{r7, lr}
   315ce:	b09c      	sub	sp, #112	; 0x70
   315d0:	af00      	add	r7, sp, #0
   315d2:	60f8      	str	r0, [r7, #12]
   315d4:	607a      	str	r2, [r7, #4]
   315d6:	603b      	str	r3, [r7, #0]
   315d8:	230b      	movs	r3, #11
   315da:	18fb      	adds	r3, r7, r3
   315dc:	1c0a      	adds	r2, r1, #0
   315de:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   315e0:	2310      	movs	r3, #16
   315e2:	18fa      	adds	r2, r7, r3
   315e4:	4b31      	ldr	r3, [pc, #196]	; (316ac <mqtt_connect_broker+0xe0>)
   315e6:	0010      	movs	r0, r2
   315e8:	0019      	movs	r1, r3
   315ea:	2358      	movs	r3, #88	; 0x58
   315ec:	001a      	movs	r2, r3
   315ee:	4b30      	ldr	r3, [pc, #192]	; (316b0 <mqtt_connect_broker+0xe4>)
   315f0:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   315f2:	2310      	movs	r3, #16
   315f4:	18fb      	adds	r3, r7, r3
   315f6:	2204      	movs	r2, #4
   315f8:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   315fa:	2310      	movs	r3, #16
   315fc:	18fb      	adds	r3, r7, r3
   315fe:	6fba      	ldr	r2, [r7, #120]	; 0x78
   31600:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   31602:	2310      	movs	r3, #16
   31604:	18fb      	adds	r3, r7, r3
   31606:	687a      	ldr	r2, [r7, #4]
   31608:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   3160a:	2310      	movs	r3, #16
   3160c:	18fb      	adds	r3, r7, r3
   3160e:	683a      	ldr	r2, [r7, #0]
   31610:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   31612:	2310      	movs	r3, #16
   31614:	18fb      	adds	r3, r7, r3
   31616:	220b      	movs	r2, #11
   31618:	18ba      	adds	r2, r7, r2
   3161a:	7812      	ldrb	r2, [r2, #0]
   3161c:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   3161e:	2310      	movs	r3, #16
   31620:	18fb      	adds	r3, r7, r3
   31622:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   31624:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   31626:	2310      	movs	r3, #16
   31628:	18fb      	adds	r3, r7, r3
   3162a:	2280      	movs	r2, #128	; 0x80
   3162c:	18ba      	adds	r2, r7, r2
   3162e:	6812      	ldr	r2, [r2, #0]
   31630:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   31632:	2310      	movs	r3, #16
   31634:	18fb      	adds	r3, r7, r3
   31636:	228c      	movs	r2, #140	; 0x8c
   31638:	18ba      	adds	r2, r7, r2
   3163a:	213c      	movs	r1, #60	; 0x3c
   3163c:	7812      	ldrb	r2, [r2, #0]
   3163e:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   31640:	2310      	movs	r3, #16
   31642:	18fb      	adds	r3, r7, r3
   31644:	2288      	movs	r2, #136	; 0x88
   31646:	18ba      	adds	r2, r7, r2
   31648:	213d      	movs	r1, #61	; 0x3d
   3164a:	7812      	ldrb	r2, [r2, #0]
   3164c:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   3164e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   31650:	2b00      	cmp	r3, #0
   31652:	d008      	beq.n	31666 <mqtt_connect_broker+0x9a>
   31654:	2380      	movs	r3, #128	; 0x80
   31656:	18fb      	adds	r3, r7, r3
   31658:	681b      	ldr	r3, [r3, #0]
   3165a:	2b00      	cmp	r3, #0
   3165c:	d003      	beq.n	31666 <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   3165e:	2310      	movs	r3, #16
   31660:	18fb      	adds	r3, r7, r3
   31662:	2201      	movs	r2, #1
   31664:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   31666:	68fb      	ldr	r3, [r7, #12]
   31668:	69db      	ldr	r3, [r3, #28]
   3166a:	2210      	movs	r2, #16
   3166c:	18ba      	adds	r2, r7, r2
   3166e:	0011      	movs	r1, r2
   31670:	0018      	movs	r0, r3
   31672:	4b10      	ldr	r3, [pc, #64]	; (316b4 <mqtt_connect_broker+0xe8>)
   31674:	4798      	blx	r3
   31676:	0003      	movs	r3, r0
   31678:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   3167a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   3167c:	b2da      	uxtb	r2, r3
   3167e:	2368      	movs	r3, #104	; 0x68
   31680:	18fb      	adds	r3, r7, r3
   31682:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   31684:	68fb      	ldr	r3, [r7, #12]
   31686:	681b      	ldr	r3, [r3, #0]
   31688:	2b00      	cmp	r3, #0
   3168a:	d006      	beq.n	3169a <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   3168c:	68fb      	ldr	r3, [r7, #12]
   3168e:	681b      	ldr	r3, [r3, #0]
   31690:	2268      	movs	r2, #104	; 0x68
   31692:	18ba      	adds	r2, r7, r2
   31694:	68f8      	ldr	r0, [r7, #12]
   31696:	2101      	movs	r1, #1
   31698:	4798      	blx	r3
	
	module->isConnected = true;
   3169a:	68fb      	ldr	r3, [r7, #12]
   3169c:	2234      	movs	r2, #52	; 0x34
   3169e:	2101      	movs	r1, #1
   316a0:	5499      	strb	r1, [r3, r2]
	return rc;
   316a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   316a4:	0018      	movs	r0, r3
   316a6:	46bd      	mov	sp, r7
   316a8:	b01c      	add	sp, #112	; 0x70
   316aa:	bd80      	pop	{r7, pc}
   316ac:	0003c150 	.word	0x0003c150
   316b0:	00036c69 	.word	0x00036c69
   316b4:	000309f5 	.word	0x000309f5

000316b8 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   316b8:	b580      	push	{r7, lr}
   316ba:	b084      	sub	sp, #16
   316bc:	af00      	add	r7, sp, #0
   316be:	6078      	str	r0, [r7, #4]
   316c0:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   316c2:	687b      	ldr	r3, [r7, #4]
   316c4:	69db      	ldr	r3, [r3, #28]
   316c6:	0018      	movs	r0, r3
   316c8:	4b0c      	ldr	r3, [pc, #48]	; (316fc <mqtt_disconnect+0x44>)
   316ca:	4798      	blx	r3
   316cc:	0003      	movs	r3, r0
   316ce:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   316d0:	68fb      	ldr	r3, [r7, #12]
   316d2:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   316d4:	687b      	ldr	r3, [r7, #4]
   316d6:	681b      	ldr	r3, [r3, #0]
   316d8:	2b00      	cmp	r3, #0
   316da:	d006      	beq.n	316ea <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   316dc:	687b      	ldr	r3, [r7, #4]
   316de:	681b      	ldr	r3, [r3, #0]
   316e0:	2208      	movs	r2, #8
   316e2:	18ba      	adds	r2, r7, r2
   316e4:	6878      	ldr	r0, [r7, #4]
   316e6:	2105      	movs	r1, #5
   316e8:	4798      	blx	r3
	
	module->isConnected = false;
   316ea:	687b      	ldr	r3, [r7, #4]
   316ec:	2234      	movs	r2, #52	; 0x34
   316ee:	2100      	movs	r1, #0
   316f0:	5499      	strb	r1, [r3, r2]
	return rc;
   316f2:	68fb      	ldr	r3, [r7, #12]
}
   316f4:	0018      	movs	r0, r3
   316f6:	46bd      	mov	sp, r7
   316f8:	b004      	add	sp, #16
   316fa:	bd80      	pop	{r7, pc}
   316fc:	00030e81 	.word	0x00030e81

00031700 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   31700:	b580      	push	{r7, lr}
   31702:	b08a      	sub	sp, #40	; 0x28
   31704:	af00      	add	r7, sp, #0
   31706:	60f8      	str	r0, [r7, #12]
   31708:	60b9      	str	r1, [r7, #8]
   3170a:	607a      	str	r2, [r7, #4]
   3170c:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   3170e:	2314      	movs	r3, #20
   31710:	18fb      	adds	r3, r7, r3
   31712:	2230      	movs	r2, #48	; 0x30
   31714:	18ba      	adds	r2, r7, r2
   31716:	7812      	ldrb	r2, [r2, #0]
   31718:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   3171a:	2314      	movs	r3, #20
   3171c:	18fb      	adds	r3, r7, r3
   3171e:	687a      	ldr	r2, [r7, #4]
   31720:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   31722:	2314      	movs	r3, #20
   31724:	18fb      	adds	r3, r7, r3
   31726:	683a      	ldr	r2, [r7, #0]
   31728:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   3172a:	2314      	movs	r3, #20
   3172c:	18fb      	adds	r3, r7, r3
   3172e:	2234      	movs	r2, #52	; 0x34
   31730:	18ba      	adds	r2, r7, r2
   31732:	7812      	ldrb	r2, [r2, #0]
   31734:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   31736:	68fb      	ldr	r3, [r7, #12]
   31738:	69db      	ldr	r3, [r3, #28]
   3173a:	2214      	movs	r2, #20
   3173c:	18ba      	adds	r2, r7, r2
   3173e:	68b9      	ldr	r1, [r7, #8]
   31740:	0018      	movs	r0, r3
   31742:	4b09      	ldr	r3, [pc, #36]	; (31768 <mqtt_publish+0x68>)
   31744:	4798      	blx	r3
   31746:	0003      	movs	r3, r0
   31748:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   3174a:	68fb      	ldr	r3, [r7, #12]
   3174c:	681b      	ldr	r3, [r3, #0]
   3174e:	2b00      	cmp	r3, #0
   31750:	d005      	beq.n	3175e <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   31752:	68fb      	ldr	r3, [r7, #12]
   31754:	681b      	ldr	r3, [r3, #0]
   31756:	68f8      	ldr	r0, [r7, #12]
   31758:	2200      	movs	r2, #0
   3175a:	2102      	movs	r1, #2
   3175c:	4798      	blx	r3
	
	return rc;
   3175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   31760:	0018      	movs	r0, r3
   31762:	46bd      	mov	sp, r7
   31764:	b00a      	add	sp, #40	; 0x28
   31766:	bd80      	pop	{r7, pc}
   31768:	00030cc1 	.word	0x00030cc1

0003176c <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   3176c:	b590      	push	{r4, r7, lr}
   3176e:	b087      	sub	sp, #28
   31770:	af00      	add	r7, sp, #0
   31772:	60f8      	str	r0, [r7, #12]
   31774:	60b9      	str	r1, [r7, #8]
   31776:	603b      	str	r3, [r7, #0]
   31778:	1dfb      	adds	r3, r7, #7
   3177a:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   3177c:	68fb      	ldr	r3, [r7, #12]
   3177e:	69d8      	ldr	r0, [r3, #28]
   31780:	683c      	ldr	r4, [r7, #0]
   31782:	1dfb      	adds	r3, r7, #7
   31784:	781a      	ldrb	r2, [r3, #0]
   31786:	68b9      	ldr	r1, [r7, #8]
   31788:	0023      	movs	r3, r4
   3178a:	4c09      	ldr	r4, [pc, #36]	; (317b0 <mqtt_subscribe+0x44>)
   3178c:	47a0      	blx	r4
   3178e:	0003      	movs	r3, r0
   31790:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   31792:	68fb      	ldr	r3, [r7, #12]
   31794:	681b      	ldr	r3, [r3, #0]
   31796:	2b00      	cmp	r3, #0
   31798:	d005      	beq.n	317a6 <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   3179a:	68fb      	ldr	r3, [r7, #12]
   3179c:	681b      	ldr	r3, [r3, #0]
   3179e:	68f8      	ldr	r0, [r7, #12]
   317a0:	2200      	movs	r2, #0
   317a2:	2103      	movs	r1, #3
   317a4:	4798      	blx	r3
	
	return rc;
   317a6:	697b      	ldr	r3, [r7, #20]
}
   317a8:	0018      	movs	r0, r3
   317aa:	46bd      	mov	sp, r7
   317ac:	b007      	add	sp, #28
   317ae:	bd90      	pop	{r4, r7, pc}
   317b0:	00030b35 	.word	0x00030b35

000317b4 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   317b4:	b580      	push	{r7, lr}
   317b6:	b082      	sub	sp, #8
   317b8:	af00      	add	r7, sp, #0
   317ba:	6078      	str	r0, [r7, #4]
   317bc:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   317be:	687b      	ldr	r3, [r7, #4]
   317c0:	69db      	ldr	r3, [r3, #28]
   317c2:	683a      	ldr	r2, [r7, #0]
   317c4:	0011      	movs	r1, r2
   317c6:	0018      	movs	r0, r3
   317c8:	4b03      	ldr	r3, [pc, #12]	; (317d8 <mqtt_yield+0x24>)
   317ca:	4798      	blx	r3
   317cc:	0003      	movs	r3, r0
   317ce:	0018      	movs	r0, r3
   317d0:	46bd      	mov	sp, r7
   317d2:	b002      	add	sp, #8
   317d4:	bd80      	pop	{r7, pc}
   317d6:	46c0      	nop			; (mov r8, r8)
   317d8:	0003093d 	.word	0x0003093d

000317dc <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   317dc:	b590      	push	{r4, r7, lr}
   317de:	b085      	sub	sp, #20
   317e0:	af00      	add	r7, sp, #0
   317e2:	6078      	str	r0, [r7, #4]
	int len = 0;
   317e4:	2300      	movs	r3, #0
   317e6:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   317e8:	687b      	ldr	r3, [r7, #4]
   317ea:	7a1b      	ldrb	r3, [r3, #8]
   317ec:	2b03      	cmp	r3, #3
   317ee:	d102      	bne.n	317f6 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   317f0:	230c      	movs	r3, #12
   317f2:	60fb      	str	r3, [r7, #12]
   317f4:	e005      	b.n	31802 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   317f6:	687b      	ldr	r3, [r7, #4]
   317f8:	7a1b      	ldrb	r3, [r3, #8]
   317fa:	2b04      	cmp	r3, #4
   317fc:	d101      	bne.n	31802 <MQTTSerialize_connectLength+0x26>
		len = 10;
   317fe:	230a      	movs	r3, #10
   31800:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   31802:	687b      	ldr	r3, [r7, #4]
   31804:	68d8      	ldr	r0, [r3, #12]
   31806:	6919      	ldr	r1, [r3, #16]
   31808:	695a      	ldr	r2, [r3, #20]
   3180a:	4b25      	ldr	r3, [pc, #148]	; (318a0 <MQTTSerialize_connectLength+0xc4>)
   3180c:	4798      	blx	r3
   3180e:	0003      	movs	r3, r0
   31810:	3302      	adds	r3, #2
   31812:	68fa      	ldr	r2, [r7, #12]
   31814:	18d3      	adds	r3, r2, r3
   31816:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   31818:	687b      	ldr	r3, [r7, #4]
   3181a:	7edb      	ldrb	r3, [r3, #27]
   3181c:	2b00      	cmp	r3, #0
   3181e:	d013      	beq.n	31848 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   31820:	687b      	ldr	r3, [r7, #4]
   31822:	6a58      	ldr	r0, [r3, #36]	; 0x24
   31824:	6a99      	ldr	r1, [r3, #40]	; 0x28
   31826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   31828:	4b1d      	ldr	r3, [pc, #116]	; (318a0 <MQTTSerialize_connectLength+0xc4>)
   3182a:	4798      	blx	r3
   3182c:	0003      	movs	r3, r0
   3182e:	1c9c      	adds	r4, r3, #2
   31830:	687b      	ldr	r3, [r7, #4]
   31832:	6b18      	ldr	r0, [r3, #48]	; 0x30
   31834:	6b59      	ldr	r1, [r3, #52]	; 0x34
   31836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   31838:	4b19      	ldr	r3, [pc, #100]	; (318a0 <MQTTSerialize_connectLength+0xc4>)
   3183a:	4798      	blx	r3
   3183c:	0003      	movs	r3, r0
   3183e:	18e3      	adds	r3, r4, r3
   31840:	3302      	adds	r3, #2
   31842:	68fa      	ldr	r2, [r7, #12]
   31844:	18d3      	adds	r3, r2, r3
   31846:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   31848:	687b      	ldr	r3, [r7, #4]
   3184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   3184c:	2b00      	cmp	r3, #0
   3184e:	d103      	bne.n	31858 <MQTTSerialize_connectLength+0x7c>
   31850:	687b      	ldr	r3, [r7, #4]
   31852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   31854:	2b00      	cmp	r3, #0
   31856:	d00a      	beq.n	3186e <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   31858:	687b      	ldr	r3, [r7, #4]
   3185a:	6c18      	ldr	r0, [r3, #64]	; 0x40
   3185c:	6c59      	ldr	r1, [r3, #68]	; 0x44
   3185e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   31860:	4b0f      	ldr	r3, [pc, #60]	; (318a0 <MQTTSerialize_connectLength+0xc4>)
   31862:	4798      	blx	r3
   31864:	0003      	movs	r3, r0
   31866:	3302      	adds	r3, #2
   31868:	68fa      	ldr	r2, [r7, #12]
   3186a:	18d3      	adds	r3, r2, r3
   3186c:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   3186e:	687b      	ldr	r3, [r7, #4]
   31870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31872:	2b00      	cmp	r3, #0
   31874:	d103      	bne.n	3187e <MQTTSerialize_connectLength+0xa2>
   31876:	687b      	ldr	r3, [r7, #4]
   31878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   3187a:	2b00      	cmp	r3, #0
   3187c:	d00a      	beq.n	31894 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   3187e:	687b      	ldr	r3, [r7, #4]
   31880:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   31882:	6d19      	ldr	r1, [r3, #80]	; 0x50
   31884:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   31886:	4b06      	ldr	r3, [pc, #24]	; (318a0 <MQTTSerialize_connectLength+0xc4>)
   31888:	4798      	blx	r3
   3188a:	0003      	movs	r3, r0
   3188c:	3302      	adds	r3, #2
   3188e:	68fa      	ldr	r2, [r7, #12]
   31890:	18d3      	adds	r3, r2, r3
   31892:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   31894:	68fb      	ldr	r3, [r7, #12]
}
   31896:	0018      	movs	r0, r3
   31898:	46bd      	mov	sp, r7
   3189a:	b005      	add	sp, #20
   3189c:	bd90      	pop	{r4, r7, pc}
   3189e:	46c0      	nop			; (mov r8, r8)
   318a0:	0003224d 	.word	0x0003224d

000318a4 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   318a4:	b590      	push	{r4, r7, lr}
   318a6:	b08b      	sub	sp, #44	; 0x2c
   318a8:	af00      	add	r7, sp, #0
   318aa:	60f8      	str	r0, [r7, #12]
   318ac:	60b9      	str	r1, [r7, #8]
   318ae:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   318b0:	68fb      	ldr	r3, [r7, #12]
   318b2:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   318b4:	2300      	movs	r3, #0
   318b6:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   318b8:	2300      	movs	r3, #0
   318ba:	617b      	str	r3, [r7, #20]
	int len = 0;
   318bc:	2300      	movs	r3, #0
   318be:	623b      	str	r3, [r7, #32]
	int rc = -1;
   318c0:	2301      	movs	r3, #1
   318c2:	425b      	negs	r3, r3
   318c4:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   318c6:	687b      	ldr	r3, [r7, #4]
   318c8:	0018      	movs	r0, r3
   318ca:	4b8c      	ldr	r3, [pc, #560]	; (31afc <MQTTSerialize_connect+0x258>)
   318cc:	4798      	blx	r3
   318ce:	0003      	movs	r3, r0
   318d0:	623b      	str	r3, [r7, #32]
   318d2:	6a3b      	ldr	r3, [r7, #32]
   318d4:	0018      	movs	r0, r3
   318d6:	4b8a      	ldr	r3, [pc, #552]	; (31b00 <MQTTSerialize_connect+0x25c>)
   318d8:	4798      	blx	r3
   318da:	0002      	movs	r2, r0
   318dc:	68bb      	ldr	r3, [r7, #8]
   318de:	429a      	cmp	r2, r3
   318e0:	dd03      	ble.n	318ea <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   318e2:	2302      	movs	r3, #2
   318e4:	425b      	negs	r3, r3
   318e6:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   318e8:	e103      	b.n	31af2 <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   318ea:	2318      	movs	r3, #24
   318ec:	18fb      	adds	r3, r7, r3
   318ee:	2200      	movs	r2, #0
   318f0:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   318f2:	2318      	movs	r3, #24
   318f4:	18fb      	adds	r3, r7, r3
   318f6:	781a      	ldrb	r2, [r3, #0]
   318f8:	210f      	movs	r1, #15
   318fa:	400a      	ands	r2, r1
   318fc:	1c11      	adds	r1, r2, #0
   318fe:	2210      	movs	r2, #16
   31900:	430a      	orrs	r2, r1
   31902:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   31904:	2318      	movs	r3, #24
   31906:	18fb      	adds	r3, r7, r3
   31908:	781a      	ldrb	r2, [r3, #0]
   3190a:	231c      	movs	r3, #28
   3190c:	18fb      	adds	r3, r7, r3
   3190e:	0011      	movs	r1, r2
   31910:	0018      	movs	r0, r3
   31912:	4b7c      	ldr	r3, [pc, #496]	; (31b04 <MQTTSerialize_connect+0x260>)
   31914:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   31916:	69fb      	ldr	r3, [r7, #28]
   31918:	6a3a      	ldr	r2, [r7, #32]
   3191a:	0011      	movs	r1, r2
   3191c:	0018      	movs	r0, r3
   3191e:	4b7a      	ldr	r3, [pc, #488]	; (31b08 <MQTTSerialize_connect+0x264>)
   31920:	4798      	blx	r3
   31922:	0002      	movs	r2, r0
   31924:	69fb      	ldr	r3, [r7, #28]
   31926:	189b      	adds	r3, r3, r2
   31928:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   3192a:	687b      	ldr	r3, [r7, #4]
   3192c:	7a1b      	ldrb	r3, [r3, #8]
   3192e:	2b04      	cmp	r3, #4
   31930:	d10d      	bne.n	3194e <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   31932:	4a76      	ldr	r2, [pc, #472]	; (31b0c <MQTTSerialize_connect+0x268>)
   31934:	231c      	movs	r3, #28
   31936:	18fb      	adds	r3, r7, r3
   31938:	0011      	movs	r1, r2
   3193a:	0018      	movs	r0, r3
   3193c:	4b74      	ldr	r3, [pc, #464]	; (31b10 <MQTTSerialize_connect+0x26c>)
   3193e:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   31940:	231c      	movs	r3, #28
   31942:	18fb      	adds	r3, r7, r3
   31944:	2104      	movs	r1, #4
   31946:	0018      	movs	r0, r3
   31948:	4b6e      	ldr	r3, [pc, #440]	; (31b04 <MQTTSerialize_connect+0x260>)
   3194a:	4798      	blx	r3
   3194c:	e00c      	b.n	31968 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   3194e:	4a71      	ldr	r2, [pc, #452]	; (31b14 <MQTTSerialize_connect+0x270>)
   31950:	231c      	movs	r3, #28
   31952:	18fb      	adds	r3, r7, r3
   31954:	0011      	movs	r1, r2
   31956:	0018      	movs	r0, r3
   31958:	4b6d      	ldr	r3, [pc, #436]	; (31b10 <MQTTSerialize_connect+0x26c>)
   3195a:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   3195c:	231c      	movs	r3, #28
   3195e:	18fb      	adds	r3, r7, r3
   31960:	2103      	movs	r1, #3
   31962:	0018      	movs	r0, r3
   31964:	4b67      	ldr	r3, [pc, #412]	; (31b04 <MQTTSerialize_connect+0x260>)
   31966:	4798      	blx	r3
	}

	flags.all = 0;
   31968:	2314      	movs	r3, #20
   3196a:	18fb      	adds	r3, r7, r3
   3196c:	2200      	movs	r2, #0
   3196e:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   31970:	687b      	ldr	r3, [r7, #4]
   31972:	7e9b      	ldrb	r3, [r3, #26]
   31974:	1c1a      	adds	r2, r3, #0
   31976:	2301      	movs	r3, #1
   31978:	4013      	ands	r3, r2
   3197a:	b2da      	uxtb	r2, r3
   3197c:	2314      	movs	r3, #20
   3197e:	18fb      	adds	r3, r7, r3
   31980:	2101      	movs	r1, #1
   31982:	400a      	ands	r2, r1
   31984:	1890      	adds	r0, r2, r2
   31986:	781a      	ldrb	r2, [r3, #0]
   31988:	2102      	movs	r1, #2
   3198a:	438a      	bics	r2, r1
   3198c:	1c11      	adds	r1, r2, #0
   3198e:	1c02      	adds	r2, r0, #0
   31990:	430a      	orrs	r2, r1
   31992:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   31994:	687b      	ldr	r3, [r7, #4]
   31996:	7edb      	ldrb	r3, [r3, #27]
   31998:	1e5a      	subs	r2, r3, #1
   3199a:	4193      	sbcs	r3, r2
   3199c:	b2da      	uxtb	r2, r3
   3199e:	2314      	movs	r3, #20
   319a0:	18fb      	adds	r3, r7, r3
   319a2:	2101      	movs	r1, #1
   319a4:	400a      	ands	r2, r1
   319a6:	0090      	lsls	r0, r2, #2
   319a8:	781a      	ldrb	r2, [r3, #0]
   319aa:	2104      	movs	r1, #4
   319ac:	438a      	bics	r2, r1
   319ae:	1c11      	adds	r1, r2, #0
   319b0:	1c02      	adds	r2, r0, #0
   319b2:	430a      	orrs	r2, r1
   319b4:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   319b6:	2314      	movs	r3, #20
   319b8:	18fb      	adds	r3, r7, r3
   319ba:	781b      	ldrb	r3, [r3, #0]
   319bc:	2204      	movs	r2, #4
   319be:	4013      	ands	r3, r2
   319c0:	b2db      	uxtb	r3, r3
   319c2:	2b00      	cmp	r3, #0
   319c4:	d025      	beq.n	31a12 <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   319c6:	687b      	ldr	r3, [r7, #4]
   319c8:	223d      	movs	r2, #61	; 0x3d
   319ca:	5c9b      	ldrb	r3, [r3, r2]
   319cc:	1c1a      	adds	r2, r3, #0
   319ce:	2303      	movs	r3, #3
   319d0:	4013      	ands	r3, r2
   319d2:	b2da      	uxtb	r2, r3
   319d4:	2314      	movs	r3, #20
   319d6:	18fb      	adds	r3, r7, r3
   319d8:	2103      	movs	r1, #3
   319da:	400a      	ands	r2, r1
   319dc:	00d0      	lsls	r0, r2, #3
   319de:	781a      	ldrb	r2, [r3, #0]
   319e0:	2118      	movs	r1, #24
   319e2:	438a      	bics	r2, r1
   319e4:	1c11      	adds	r1, r2, #0
   319e6:	1c02      	adds	r2, r0, #0
   319e8:	430a      	orrs	r2, r1
   319ea:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   319ec:	687b      	ldr	r3, [r7, #4]
   319ee:	223c      	movs	r2, #60	; 0x3c
   319f0:	5c9b      	ldrb	r3, [r3, r2]
   319f2:	1c1a      	adds	r2, r3, #0
   319f4:	2301      	movs	r3, #1
   319f6:	4013      	ands	r3, r2
   319f8:	b2da      	uxtb	r2, r3
   319fa:	2314      	movs	r3, #20
   319fc:	18fb      	adds	r3, r7, r3
   319fe:	2101      	movs	r1, #1
   31a00:	400a      	ands	r2, r1
   31a02:	0150      	lsls	r0, r2, #5
   31a04:	781a      	ldrb	r2, [r3, #0]
   31a06:	2120      	movs	r1, #32
   31a08:	438a      	bics	r2, r1
   31a0a:	1c11      	adds	r1, r2, #0
   31a0c:	1c02      	adds	r2, r0, #0
   31a0e:	430a      	orrs	r2, r1
   31a10:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   31a12:	687b      	ldr	r3, [r7, #4]
   31a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   31a16:	2b00      	cmp	r3, #0
   31a18:	d103      	bne.n	31a22 <MQTTSerialize_connect+0x17e>
   31a1a:	687b      	ldr	r3, [r7, #4]
   31a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   31a1e:	2b00      	cmp	r3, #0
   31a20:	d006      	beq.n	31a30 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   31a22:	2314      	movs	r3, #20
   31a24:	18fb      	adds	r3, r7, r3
   31a26:	781a      	ldrb	r2, [r3, #0]
   31a28:	2180      	movs	r1, #128	; 0x80
   31a2a:	4249      	negs	r1, r1
   31a2c:	430a      	orrs	r2, r1
   31a2e:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   31a30:	687b      	ldr	r3, [r7, #4]
   31a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31a34:	2b00      	cmp	r3, #0
   31a36:	d103      	bne.n	31a40 <MQTTSerialize_connect+0x19c>
   31a38:	687b      	ldr	r3, [r7, #4]
   31a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   31a3c:	2b00      	cmp	r3, #0
   31a3e:	d005      	beq.n	31a4c <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   31a40:	2314      	movs	r3, #20
   31a42:	18fb      	adds	r3, r7, r3
   31a44:	781a      	ldrb	r2, [r3, #0]
   31a46:	2140      	movs	r1, #64	; 0x40
   31a48:	430a      	orrs	r2, r1
   31a4a:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   31a4c:	2314      	movs	r3, #20
   31a4e:	18fb      	adds	r3, r7, r3
   31a50:	781a      	ldrb	r2, [r3, #0]
   31a52:	231c      	movs	r3, #28
   31a54:	18fb      	adds	r3, r7, r3
   31a56:	0011      	movs	r1, r2
   31a58:	0018      	movs	r0, r3
   31a5a:	4b2a      	ldr	r3, [pc, #168]	; (31b04 <MQTTSerialize_connect+0x260>)
   31a5c:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   31a5e:	687b      	ldr	r3, [r7, #4]
   31a60:	8b1b      	ldrh	r3, [r3, #24]
   31a62:	001a      	movs	r2, r3
   31a64:	231c      	movs	r3, #28
   31a66:	18fb      	adds	r3, r7, r3
   31a68:	0011      	movs	r1, r2
   31a6a:	0018      	movs	r0, r3
   31a6c:	4b2a      	ldr	r3, [pc, #168]	; (31b18 <MQTTSerialize_connect+0x274>)
   31a6e:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   31a70:	687b      	ldr	r3, [r7, #4]
   31a72:	221c      	movs	r2, #28
   31a74:	18b8      	adds	r0, r7, r2
   31a76:	68d9      	ldr	r1, [r3, #12]
   31a78:	691a      	ldr	r2, [r3, #16]
   31a7a:	695b      	ldr	r3, [r3, #20]
   31a7c:	4c27      	ldr	r4, [pc, #156]	; (31b1c <MQTTSerialize_connect+0x278>)
   31a7e:	47a0      	blx	r4
	if (options->willFlag)
   31a80:	687b      	ldr	r3, [r7, #4]
   31a82:	7edb      	ldrb	r3, [r3, #27]
   31a84:	2b00      	cmp	r3, #0
   31a86:	d00f      	beq.n	31aa8 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   31a88:	687b      	ldr	r3, [r7, #4]
   31a8a:	221c      	movs	r2, #28
   31a8c:	18b8      	adds	r0, r7, r2
   31a8e:	6a59      	ldr	r1, [r3, #36]	; 0x24
   31a90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   31a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   31a94:	4c21      	ldr	r4, [pc, #132]	; (31b1c <MQTTSerialize_connect+0x278>)
   31a96:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   31a98:	687b      	ldr	r3, [r7, #4]
   31a9a:	221c      	movs	r2, #28
   31a9c:	18b8      	adds	r0, r7, r2
   31a9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   31aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   31aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   31aa4:	4c1d      	ldr	r4, [pc, #116]	; (31b1c <MQTTSerialize_connect+0x278>)
   31aa6:	47a0      	blx	r4
	}
	if (flags.bits.username)
   31aa8:	2314      	movs	r3, #20
   31aaa:	18fb      	adds	r3, r7, r3
   31aac:	781b      	ldrb	r3, [r3, #0]
   31aae:	227f      	movs	r2, #127	; 0x7f
   31ab0:	4393      	bics	r3, r2
   31ab2:	b2db      	uxtb	r3, r3
   31ab4:	2b00      	cmp	r3, #0
   31ab6:	d007      	beq.n	31ac8 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   31ab8:	687b      	ldr	r3, [r7, #4]
   31aba:	221c      	movs	r2, #28
   31abc:	18b8      	adds	r0, r7, r2
   31abe:	6c19      	ldr	r1, [r3, #64]	; 0x40
   31ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   31ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   31ac4:	4c15      	ldr	r4, [pc, #84]	; (31b1c <MQTTSerialize_connect+0x278>)
   31ac6:	47a0      	blx	r4
	if (flags.bits.password)
   31ac8:	2314      	movs	r3, #20
   31aca:	18fb      	adds	r3, r7, r3
   31acc:	781b      	ldrb	r3, [r3, #0]
   31ace:	2240      	movs	r2, #64	; 0x40
   31ad0:	4013      	ands	r3, r2
   31ad2:	b2db      	uxtb	r3, r3
   31ad4:	2b00      	cmp	r3, #0
   31ad6:	d007      	beq.n	31ae8 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   31ad8:	687b      	ldr	r3, [r7, #4]
   31ada:	221c      	movs	r2, #28
   31adc:	18b8      	adds	r0, r7, r2
   31ade:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   31ae0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   31ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   31ae4:	4c0d      	ldr	r4, [pc, #52]	; (31b1c <MQTTSerialize_connect+0x278>)
   31ae6:	47a0      	blx	r4

	rc = ptr - buf;
   31ae8:	69fb      	ldr	r3, [r7, #28]
   31aea:	001a      	movs	r2, r3
   31aec:	68fb      	ldr	r3, [r7, #12]
   31aee:	1ad3      	subs	r3, r2, r3
   31af0:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   31af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   31af4:	0018      	movs	r0, r3
   31af6:	46bd      	mov	sp, r7
   31af8:	b00b      	add	sp, #44	; 0x2c
   31afa:	bd90      	pop	{r4, r7, pc}
   31afc:	000317dd 	.word	0x000317dd
   31b00:	00031f71 	.word	0x00031f71
   31b04:	00032093 	.word	0x00032093
   31b08:	00031e79 	.word	0x00031e79
   31b0c:	0003c1a8 	.word	0x0003c1a8
   31b10:	00032115 	.word	0x00032115
   31b14:	0003c1b0 	.word	0x0003c1b0
   31b18:	000320bd 	.word	0x000320bd
   31b1c:	00032165 	.word	0x00032165

00031b20 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   31b20:	b580      	push	{r7, lr}
   31b22:	b08a      	sub	sp, #40	; 0x28
   31b24:	af00      	add	r7, sp, #0
   31b26:	60f8      	str	r0, [r7, #12]
   31b28:	60b9      	str	r1, [r7, #8]
   31b2a:	607a      	str	r2, [r7, #4]
   31b2c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   31b2e:	2300      	movs	r3, #0
   31b30:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   31b32:	687b      	ldr	r3, [r7, #4]
   31b34:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   31b36:	2300      	movs	r3, #0
   31b38:	623b      	str	r3, [r7, #32]
	int rc = 0;
   31b3a:	2300      	movs	r3, #0
   31b3c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   31b3e:	2300      	movs	r3, #0
   31b40:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   31b42:	2318      	movs	r3, #24
   31b44:	18fb      	adds	r3, r7, r3
   31b46:	0018      	movs	r0, r3
   31b48:	4b25      	ldr	r3, [pc, #148]	; (31be0 <MQTTDeserialize_connack+0xc0>)
   31b4a:	4798      	blx	r3
   31b4c:	0003      	movs	r3, r0
   31b4e:	001a      	movs	r2, r3
   31b50:	231c      	movs	r3, #28
   31b52:	18fb      	adds	r3, r7, r3
   31b54:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   31b56:	231c      	movs	r3, #28
   31b58:	18fb      	adds	r3, r7, r3
   31b5a:	781b      	ldrb	r3, [r3, #0]
   31b5c:	220f      	movs	r2, #15
   31b5e:	4393      	bics	r3, r2
   31b60:	b2db      	uxtb	r3, r3
   31b62:	2b20      	cmp	r3, #32
   31b64:	d134      	bne.n	31bd0 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   31b66:	69bb      	ldr	r3, [r7, #24]
   31b68:	2214      	movs	r2, #20
   31b6a:	18ba      	adds	r2, r7, r2
   31b6c:	0011      	movs	r1, r2
   31b6e:	0018      	movs	r0, r3
   31b70:	4b1c      	ldr	r3, [pc, #112]	; (31be4 <MQTTDeserialize_connack+0xc4>)
   31b72:	4798      	blx	r3
   31b74:	0003      	movs	r3, r0
   31b76:	627b      	str	r3, [r7, #36]	; 0x24
   31b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   31b7a:	69bb      	ldr	r3, [r7, #24]
   31b7c:	189b      	adds	r3, r3, r2
   31b7e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   31b80:	69bb      	ldr	r3, [r7, #24]
   31b82:	697a      	ldr	r2, [r7, #20]
   31b84:	189b      	adds	r3, r3, r2
   31b86:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   31b88:	6a3b      	ldr	r3, [r7, #32]
   31b8a:	69ba      	ldr	r2, [r7, #24]
   31b8c:	1a9b      	subs	r3, r3, r2
   31b8e:	2b01      	cmp	r3, #1
   31b90:	dd20      	ble.n	31bd4 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   31b92:	2318      	movs	r3, #24
   31b94:	18fb      	adds	r3, r7, r3
   31b96:	0018      	movs	r0, r3
   31b98:	4b11      	ldr	r3, [pc, #68]	; (31be0 <MQTTDeserialize_connack+0xc0>)
   31b9a:	4798      	blx	r3
   31b9c:	0003      	movs	r3, r0
   31b9e:	001a      	movs	r2, r3
   31ba0:	2310      	movs	r3, #16
   31ba2:	18fb      	adds	r3, r7, r3
   31ba4:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   31ba6:	2310      	movs	r3, #16
   31ba8:	18fb      	adds	r3, r7, r3
   31baa:	781b      	ldrb	r3, [r3, #0]
   31bac:	061b      	lsls	r3, r3, #24
   31bae:	0fdb      	lsrs	r3, r3, #31
   31bb0:	b2db      	uxtb	r3, r3
   31bb2:	001a      	movs	r2, r3
   31bb4:	68fb      	ldr	r3, [r7, #12]
   31bb6:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   31bb8:	2318      	movs	r3, #24
   31bba:	18fb      	adds	r3, r7, r3
   31bbc:	0018      	movs	r0, r3
   31bbe:	4b08      	ldr	r3, [pc, #32]	; (31be0 <MQTTDeserialize_connack+0xc0>)
   31bc0:	4798      	blx	r3
   31bc2:	0003      	movs	r3, r0
   31bc4:	001a      	movs	r2, r3
   31bc6:	68bb      	ldr	r3, [r7, #8]
   31bc8:	701a      	strb	r2, [r3, #0]

	rc = 1;
   31bca:	2301      	movs	r3, #1
   31bcc:	627b      	str	r3, [r7, #36]	; 0x24
   31bce:	e002      	b.n	31bd6 <MQTTDeserialize_connack+0xb6>
		goto exit;
   31bd0:	46c0      	nop			; (mov r8, r8)
   31bd2:	e000      	b.n	31bd6 <MQTTDeserialize_connack+0xb6>
		goto exit;
   31bd4:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   31bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   31bd8:	0018      	movs	r0, r3
   31bda:	46bd      	mov	sp, r7
   31bdc:	b00a      	add	sp, #40	; 0x28
   31bde:	bd80      	pop	{r7, pc}
   31be0:	00032067 	.word	0x00032067
   31be4:	00032001 	.word	0x00032001

00031be8 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   31be8:	b580      	push	{r7, lr}
   31bea:	b088      	sub	sp, #32
   31bec:	af00      	add	r7, sp, #0
   31bee:	60f8      	str	r0, [r7, #12]
   31bf0:	60b9      	str	r1, [r7, #8]
   31bf2:	1dfb      	adds	r3, r7, #7
   31bf4:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   31bf6:	2300      	movs	r3, #0
   31bf8:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   31bfa:	2301      	movs	r3, #1
   31bfc:	425b      	negs	r3, r3
   31bfe:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   31c00:	68fb      	ldr	r3, [r7, #12]
   31c02:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   31c04:	68bb      	ldr	r3, [r7, #8]
   31c06:	2b01      	cmp	r3, #1
   31c08:	dc03      	bgt.n	31c12 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   31c0a:	2302      	movs	r3, #2
   31c0c:	425b      	negs	r3, r3
   31c0e:	61fb      	str	r3, [r7, #28]
		goto exit;
   31c10:	e029      	b.n	31c66 <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   31c12:	2318      	movs	r3, #24
   31c14:	18fb      	adds	r3, r7, r3
   31c16:	2200      	movs	r2, #0
   31c18:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   31c1a:	1dfb      	adds	r3, r7, #7
   31c1c:	781b      	ldrb	r3, [r3, #0]
   31c1e:	220f      	movs	r2, #15
   31c20:	4013      	ands	r3, r2
   31c22:	b2da      	uxtb	r2, r3
   31c24:	2318      	movs	r3, #24
   31c26:	18fb      	adds	r3, r7, r3
   31c28:	0110      	lsls	r0, r2, #4
   31c2a:	781a      	ldrb	r2, [r3, #0]
   31c2c:	210f      	movs	r1, #15
   31c2e:	400a      	ands	r2, r1
   31c30:	1c11      	adds	r1, r2, #0
   31c32:	1c02      	adds	r2, r0, #0
   31c34:	430a      	orrs	r2, r1
   31c36:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   31c38:	2318      	movs	r3, #24
   31c3a:	18fb      	adds	r3, r7, r3
   31c3c:	781a      	ldrb	r2, [r3, #0]
   31c3e:	2314      	movs	r3, #20
   31c40:	18fb      	adds	r3, r7, r3
   31c42:	0011      	movs	r1, r2
   31c44:	0018      	movs	r0, r3
   31c46:	4b0a      	ldr	r3, [pc, #40]	; (31c70 <MQTTSerialize_zero+0x88>)
   31c48:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   31c4a:	697b      	ldr	r3, [r7, #20]
   31c4c:	2100      	movs	r1, #0
   31c4e:	0018      	movs	r0, r3
   31c50:	4b08      	ldr	r3, [pc, #32]	; (31c74 <MQTTSerialize_zero+0x8c>)
   31c52:	4798      	blx	r3
   31c54:	0002      	movs	r2, r0
   31c56:	697b      	ldr	r3, [r7, #20]
   31c58:	189b      	adds	r3, r3, r2
   31c5a:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   31c5c:	697b      	ldr	r3, [r7, #20]
   31c5e:	001a      	movs	r2, r3
   31c60:	68fb      	ldr	r3, [r7, #12]
   31c62:	1ad3      	subs	r3, r2, r3
   31c64:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   31c66:	69fb      	ldr	r3, [r7, #28]
}
   31c68:	0018      	movs	r0, r3
   31c6a:	46bd      	mov	sp, r7
   31c6c:	b008      	add	sp, #32
   31c6e:	bd80      	pop	{r7, pc}
   31c70:	00032093 	.word	0x00032093
   31c74:	00031e79 	.word	0x00031e79

00031c78 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   31c78:	b580      	push	{r7, lr}
   31c7a:	b082      	sub	sp, #8
   31c7c:	af00      	add	r7, sp, #0
   31c7e:	6078      	str	r0, [r7, #4]
   31c80:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   31c82:	6839      	ldr	r1, [r7, #0]
   31c84:	687b      	ldr	r3, [r7, #4]
   31c86:	220e      	movs	r2, #14
   31c88:	0018      	movs	r0, r3
   31c8a:	4b03      	ldr	r3, [pc, #12]	; (31c98 <MQTTSerialize_disconnect+0x20>)
   31c8c:	4798      	blx	r3
   31c8e:	0003      	movs	r3, r0
}
   31c90:	0018      	movs	r0, r3
   31c92:	46bd      	mov	sp, r7
   31c94:	b002      	add	sp, #8
   31c96:	bd80      	pop	{r7, pc}
   31c98:	00031be9 	.word	0x00031be9

00031c9c <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   31c9c:	b580      	push	{r7, lr}
   31c9e:	b082      	sub	sp, #8
   31ca0:	af00      	add	r7, sp, #0
   31ca2:	6078      	str	r0, [r7, #4]
   31ca4:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   31ca6:	6839      	ldr	r1, [r7, #0]
   31ca8:	687b      	ldr	r3, [r7, #4]
   31caa:	220c      	movs	r2, #12
   31cac:	0018      	movs	r0, r3
   31cae:	4b03      	ldr	r3, [pc, #12]	; (31cbc <MQTTSerialize_pingreq+0x20>)
   31cb0:	4798      	blx	r3
   31cb2:	0003      	movs	r3, r0
}
   31cb4:	0018      	movs	r0, r3
   31cb6:	46bd      	mov	sp, r7
   31cb8:	b002      	add	sp, #8
   31cba:	bd80      	pop	{r7, pc}
   31cbc:	00031be9 	.word	0x00031be9

00031cc0 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   31cc0:	b580      	push	{r7, lr}
   31cc2:	b08a      	sub	sp, #40	; 0x28
   31cc4:	af00      	add	r7, sp, #0
   31cc6:	60f8      	str	r0, [r7, #12]
   31cc8:	60b9      	str	r1, [r7, #8]
   31cca:	607a      	str	r2, [r7, #4]
   31ccc:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   31cce:	2300      	movs	r3, #0
   31cd0:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   31cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   31cd4:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   31cd6:	2300      	movs	r3, #0
   31cd8:	623b      	str	r3, [r7, #32]
	int rc = 0;
   31cda:	2300      	movs	r3, #0
   31cdc:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   31cde:	2300      	movs	r3, #0
   31ce0:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   31ce2:	2318      	movs	r3, #24
   31ce4:	18fb      	adds	r3, r7, r3
   31ce6:	0018      	movs	r0, r3
   31ce8:	4b32      	ldr	r3, [pc, #200]	; (31db4 <MQTTDeserialize_publish+0xf4>)
   31cea:	4798      	blx	r3
   31cec:	0003      	movs	r3, r0
   31cee:	001a      	movs	r2, r3
   31cf0:	231c      	movs	r3, #28
   31cf2:	18fb      	adds	r3, r7, r3
   31cf4:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   31cf6:	231c      	movs	r3, #28
   31cf8:	18fb      	adds	r3, r7, r3
   31cfa:	781b      	ldrb	r3, [r3, #0]
   31cfc:	220f      	movs	r2, #15
   31cfe:	4393      	bics	r3, r2
   31d00:	b2db      	uxtb	r3, r3
   31d02:	2b30      	cmp	r3, #48	; 0x30
   31d04:	d150      	bne.n	31da8 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   31d06:	231c      	movs	r3, #28
   31d08:	18fb      	adds	r3, r7, r3
   31d0a:	781b      	ldrb	r3, [r3, #0]
   31d0c:	071b      	lsls	r3, r3, #28
   31d0e:	0fdb      	lsrs	r3, r3, #31
   31d10:	b2db      	uxtb	r3, r3
   31d12:	001a      	movs	r2, r3
   31d14:	68fb      	ldr	r3, [r7, #12]
   31d16:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   31d18:	231c      	movs	r3, #28
   31d1a:	18fb      	adds	r3, r7, r3
   31d1c:	781b      	ldrb	r3, [r3, #0]
   31d1e:	075b      	lsls	r3, r3, #29
   31d20:	0f9b      	lsrs	r3, r3, #30
   31d22:	b2db      	uxtb	r3, r3
   31d24:	001a      	movs	r2, r3
   31d26:	68bb      	ldr	r3, [r7, #8]
   31d28:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   31d2a:	231c      	movs	r3, #28
   31d2c:	18fb      	adds	r3, r7, r3
   31d2e:	781b      	ldrb	r3, [r3, #0]
   31d30:	07db      	lsls	r3, r3, #31
   31d32:	0fdb      	lsrs	r3, r3, #31
   31d34:	b2db      	uxtb	r3, r3
   31d36:	001a      	movs	r2, r3
   31d38:	687b      	ldr	r3, [r7, #4]
   31d3a:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   31d3c:	69bb      	ldr	r3, [r7, #24]
   31d3e:	2214      	movs	r2, #20
   31d40:	18ba      	adds	r2, r7, r2
   31d42:	0011      	movs	r1, r2
   31d44:	0018      	movs	r0, r3
   31d46:	4b1c      	ldr	r3, [pc, #112]	; (31db8 <MQTTDeserialize_publish+0xf8>)
   31d48:	4798      	blx	r3
   31d4a:	0003      	movs	r3, r0
   31d4c:	627b      	str	r3, [r7, #36]	; 0x24
   31d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   31d50:	69bb      	ldr	r3, [r7, #24]
   31d52:	189b      	adds	r3, r3, r2
   31d54:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   31d56:	69bb      	ldr	r3, [r7, #24]
   31d58:	697a      	ldr	r2, [r7, #20]
   31d5a:	189b      	adds	r3, r3, r2
   31d5c:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   31d5e:	6a3a      	ldr	r2, [r7, #32]
   31d60:	2318      	movs	r3, #24
   31d62:	18f9      	adds	r1, r7, r3
   31d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31d66:	0018      	movs	r0, r3
   31d68:	4b14      	ldr	r3, [pc, #80]	; (31dbc <MQTTDeserialize_publish+0xfc>)
   31d6a:	4798      	blx	r3
   31d6c:	1e03      	subs	r3, r0, #0
   31d6e:	d01c      	beq.n	31daa <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   31d70:	6a3b      	ldr	r3, [r7, #32]
   31d72:	69ba      	ldr	r2, [r7, #24]
   31d74:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   31d76:	d418      	bmi.n	31daa <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   31d78:	68bb      	ldr	r3, [r7, #8]
   31d7a:	681b      	ldr	r3, [r3, #0]
   31d7c:	2b00      	cmp	r3, #0
   31d7e:	dd08      	ble.n	31d92 <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   31d80:	2318      	movs	r3, #24
   31d82:	18fb      	adds	r3, r7, r3
   31d84:	0018      	movs	r0, r3
   31d86:	4b0e      	ldr	r3, [pc, #56]	; (31dc0 <MQTTDeserialize_publish+0x100>)
   31d88:	4798      	blx	r3
   31d8a:	0003      	movs	r3, r0
   31d8c:	b29a      	uxth	r2, r3
   31d8e:	683b      	ldr	r3, [r7, #0]
   31d90:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   31d92:	6a3b      	ldr	r3, [r7, #32]
   31d94:	69ba      	ldr	r2, [r7, #24]
   31d96:	1a9a      	subs	r2, r3, r2
   31d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   31d9a:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   31d9c:	69ba      	ldr	r2, [r7, #24]
   31d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   31da0:	601a      	str	r2, [r3, #0]
	rc = 1;
   31da2:	2301      	movs	r3, #1
   31da4:	627b      	str	r3, [r7, #36]	; 0x24
   31da6:	e000      	b.n	31daa <MQTTDeserialize_publish+0xea>
		goto exit;
   31da8:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   31daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   31dac:	0018      	movs	r0, r3
   31dae:	46bd      	mov	sp, r7
   31db0:	b00a      	add	sp, #40	; 0x28
   31db2:	bd80      	pop	{r7, pc}
   31db4:	00032067 	.word	0x00032067
   31db8:	00032001 	.word	0x00032001
   31dbc:	000321e5 	.word	0x000321e5
   31dc0:	00032035 	.word	0x00032035

00031dc4 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   31dc4:	b580      	push	{r7, lr}
   31dc6:	b08a      	sub	sp, #40	; 0x28
   31dc8:	af00      	add	r7, sp, #0
   31dca:	60f8      	str	r0, [r7, #12]
   31dcc:	60b9      	str	r1, [r7, #8]
   31dce:	607a      	str	r2, [r7, #4]
   31dd0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   31dd2:	2300      	movs	r3, #0
   31dd4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   31dd6:	683b      	ldr	r3, [r7, #0]
   31dd8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   31dda:	2300      	movs	r3, #0
   31ddc:	623b      	str	r3, [r7, #32]
	int rc = 0;
   31dde:	2300      	movs	r3, #0
   31de0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   31de2:	2318      	movs	r3, #24
   31de4:	18fb      	adds	r3, r7, r3
   31de6:	0018      	movs	r0, r3
   31de8:	4b20      	ldr	r3, [pc, #128]	; (31e6c <MQTTDeserialize_ack+0xa8>)
   31dea:	4798      	blx	r3
   31dec:	0003      	movs	r3, r0
   31dee:	001a      	movs	r2, r3
   31df0:	231c      	movs	r3, #28
   31df2:	18fb      	adds	r3, r7, r3
   31df4:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   31df6:	231c      	movs	r3, #28
   31df8:	18fb      	adds	r3, r7, r3
   31dfa:	781b      	ldrb	r3, [r3, #0]
   31dfc:	071b      	lsls	r3, r3, #28
   31dfe:	0fdb      	lsrs	r3, r3, #31
   31e00:	b2db      	uxtb	r3, r3
   31e02:	001a      	movs	r2, r3
   31e04:	68bb      	ldr	r3, [r7, #8]
   31e06:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   31e08:	231c      	movs	r3, #28
   31e0a:	18fb      	adds	r3, r7, r3
   31e0c:	781b      	ldrb	r3, [r3, #0]
   31e0e:	061b      	lsls	r3, r3, #24
   31e10:	0f1b      	lsrs	r3, r3, #28
   31e12:	b2db      	uxtb	r3, r3
   31e14:	001a      	movs	r2, r3
   31e16:	68fb      	ldr	r3, [r7, #12]
   31e18:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   31e1a:	69bb      	ldr	r3, [r7, #24]
   31e1c:	2214      	movs	r2, #20
   31e1e:	18ba      	adds	r2, r7, r2
   31e20:	0011      	movs	r1, r2
   31e22:	0018      	movs	r0, r3
   31e24:	4b12      	ldr	r3, [pc, #72]	; (31e70 <MQTTDeserialize_ack+0xac>)
   31e26:	4798      	blx	r3
   31e28:	0003      	movs	r3, r0
   31e2a:	627b      	str	r3, [r7, #36]	; 0x24
   31e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   31e2e:	69bb      	ldr	r3, [r7, #24]
   31e30:	189b      	adds	r3, r3, r2
   31e32:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   31e34:	69bb      	ldr	r3, [r7, #24]
   31e36:	697a      	ldr	r2, [r7, #20]
   31e38:	189b      	adds	r3, r3, r2
   31e3a:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   31e3c:	6a3b      	ldr	r3, [r7, #32]
   31e3e:	69ba      	ldr	r2, [r7, #24]
   31e40:	1a9b      	subs	r3, r3, r2
   31e42:	2b01      	cmp	r3, #1
   31e44:	dd0b      	ble.n	31e5e <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   31e46:	2318      	movs	r3, #24
   31e48:	18fb      	adds	r3, r7, r3
   31e4a:	0018      	movs	r0, r3
   31e4c:	4b09      	ldr	r3, [pc, #36]	; (31e74 <MQTTDeserialize_ack+0xb0>)
   31e4e:	4798      	blx	r3
   31e50:	0003      	movs	r3, r0
   31e52:	b29a      	uxth	r2, r3
   31e54:	687b      	ldr	r3, [r7, #4]
   31e56:	801a      	strh	r2, [r3, #0]

	rc = 1;
   31e58:	2301      	movs	r3, #1
   31e5a:	627b      	str	r3, [r7, #36]	; 0x24
   31e5c:	e000      	b.n	31e60 <MQTTDeserialize_ack+0x9c>
		goto exit;
   31e5e:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   31e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   31e62:	0018      	movs	r0, r3
   31e64:	46bd      	mov	sp, r7
   31e66:	b00a      	add	sp, #40	; 0x28
   31e68:	bd80      	pop	{r7, pc}
   31e6a:	46c0      	nop			; (mov r8, r8)
   31e6c:	00032067 	.word	0x00032067
   31e70:	00032001 	.word	0x00032001
   31e74:	00032035 	.word	0x00032035

00031e78 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   31e78:	b580      	push	{r7, lr}
   31e7a:	b084      	sub	sp, #16
   31e7c:	af00      	add	r7, sp, #0
   31e7e:	6078      	str	r0, [r7, #4]
   31e80:	6039      	str	r1, [r7, #0]
	int rc = 0;
   31e82:	2300      	movs	r3, #0
   31e84:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   31e86:	683b      	ldr	r3, [r7, #0]
   31e88:	4a17      	ldr	r2, [pc, #92]	; (31ee8 <MQTTPacket_encode+0x70>)
   31e8a:	4013      	ands	r3, r2
   31e8c:	d504      	bpl.n	31e98 <MQTTPacket_encode+0x20>
   31e8e:	3b01      	subs	r3, #1
   31e90:	2280      	movs	r2, #128	; 0x80
   31e92:	4252      	negs	r2, r2
   31e94:	4313      	orrs	r3, r2
   31e96:	3301      	adds	r3, #1
   31e98:	001a      	movs	r2, r3
   31e9a:	230b      	movs	r3, #11
   31e9c:	18fb      	adds	r3, r7, r3
   31e9e:	701a      	strb	r2, [r3, #0]
		length /= 128;
   31ea0:	683b      	ldr	r3, [r7, #0]
   31ea2:	2b00      	cmp	r3, #0
   31ea4:	da00      	bge.n	31ea8 <MQTTPacket_encode+0x30>
   31ea6:	337f      	adds	r3, #127	; 0x7f
   31ea8:	11db      	asrs	r3, r3, #7
   31eaa:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   31eac:	683b      	ldr	r3, [r7, #0]
   31eae:	2b00      	cmp	r3, #0
   31eb0:	dd08      	ble.n	31ec4 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   31eb2:	230b      	movs	r3, #11
   31eb4:	18fb      	adds	r3, r7, r3
   31eb6:	220b      	movs	r2, #11
   31eb8:	18ba      	adds	r2, r7, r2
   31eba:	7812      	ldrb	r2, [r2, #0]
   31ebc:	2180      	movs	r1, #128	; 0x80
   31ebe:	4249      	negs	r1, r1
   31ec0:	430a      	orrs	r2, r1
   31ec2:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   31ec4:	68fb      	ldr	r3, [r7, #12]
   31ec6:	1c5a      	adds	r2, r3, #1
   31ec8:	60fa      	str	r2, [r7, #12]
   31eca:	001a      	movs	r2, r3
   31ecc:	687b      	ldr	r3, [r7, #4]
   31ece:	189b      	adds	r3, r3, r2
   31ed0:	220b      	movs	r2, #11
   31ed2:	18ba      	adds	r2, r7, r2
   31ed4:	7812      	ldrb	r2, [r2, #0]
   31ed6:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   31ed8:	683b      	ldr	r3, [r7, #0]
   31eda:	2b00      	cmp	r3, #0
   31edc:	dcd3      	bgt.n	31e86 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   31ede:	68fb      	ldr	r3, [r7, #12]
}
   31ee0:	0018      	movs	r0, r3
   31ee2:	46bd      	mov	sp, r7
   31ee4:	b004      	add	sp, #16
   31ee6:	bd80      	pop	{r7, pc}
   31ee8:	8000007f 	.word	0x8000007f

00031eec <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   31eec:	b580      	push	{r7, lr}
   31eee:	b086      	sub	sp, #24
   31ef0:	af00      	add	r7, sp, #0
   31ef2:	6078      	str	r0, [r7, #4]
   31ef4:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   31ef6:	2301      	movs	r3, #1
   31ef8:	617b      	str	r3, [r7, #20]
	int len = 0;
   31efa:	2300      	movs	r3, #0
   31efc:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   31efe:	683b      	ldr	r3, [r7, #0]
   31f00:	2200      	movs	r2, #0
   31f02:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   31f04:	2301      	movs	r3, #1
   31f06:	425b      	negs	r3, r3
   31f08:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   31f0a:	693b      	ldr	r3, [r7, #16]
   31f0c:	3301      	adds	r3, #1
   31f0e:	613b      	str	r3, [r7, #16]
   31f10:	693b      	ldr	r3, [r7, #16]
   31f12:	2b04      	cmp	r3, #4
   31f14:	dd03      	ble.n	31f1e <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   31f16:	2301      	movs	r3, #1
   31f18:	425b      	negs	r3, r3
   31f1a:	60fb      	str	r3, [r7, #12]
			goto exit;
   31f1c:	e022      	b.n	31f64 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   31f1e:	230b      	movs	r3, #11
   31f20:	18fa      	adds	r2, r7, r3
   31f22:	687b      	ldr	r3, [r7, #4]
   31f24:	2101      	movs	r1, #1
   31f26:	0010      	movs	r0, r2
   31f28:	4798      	blx	r3
   31f2a:	0003      	movs	r3, r0
   31f2c:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   31f2e:	68fb      	ldr	r3, [r7, #12]
   31f30:	2b01      	cmp	r3, #1
   31f32:	d116      	bne.n	31f62 <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   31f34:	683b      	ldr	r3, [r7, #0]
   31f36:	681a      	ldr	r2, [r3, #0]
   31f38:	230b      	movs	r3, #11
   31f3a:	18fb      	adds	r3, r7, r3
   31f3c:	781b      	ldrb	r3, [r3, #0]
   31f3e:	0019      	movs	r1, r3
   31f40:	237f      	movs	r3, #127	; 0x7f
   31f42:	400b      	ands	r3, r1
   31f44:	6979      	ldr	r1, [r7, #20]
   31f46:	434b      	muls	r3, r1
   31f48:	18d2      	adds	r2, r2, r3
   31f4a:	683b      	ldr	r3, [r7, #0]
   31f4c:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   31f4e:	697b      	ldr	r3, [r7, #20]
   31f50:	01db      	lsls	r3, r3, #7
   31f52:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   31f54:	230b      	movs	r3, #11
   31f56:	18fb      	adds	r3, r7, r3
   31f58:	781b      	ldrb	r3, [r3, #0]
   31f5a:	b25b      	sxtb	r3, r3
   31f5c:	2b00      	cmp	r3, #0
   31f5e:	dbd1      	blt.n	31f04 <MQTTPacket_decode+0x18>
   31f60:	e000      	b.n	31f64 <MQTTPacket_decode+0x78>
			goto exit;
   31f62:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   31f64:	693b      	ldr	r3, [r7, #16]
}
   31f66:	0018      	movs	r0, r3
   31f68:	46bd      	mov	sp, r7
   31f6a:	b006      	add	sp, #24
   31f6c:	bd80      	pop	{r7, pc}
	...

00031f70 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   31f70:	b580      	push	{r7, lr}
   31f72:	b082      	sub	sp, #8
   31f74:	af00      	add	r7, sp, #0
   31f76:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   31f78:	687b      	ldr	r3, [r7, #4]
   31f7a:	3301      	adds	r3, #1
   31f7c:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   31f7e:	687b      	ldr	r3, [r7, #4]
   31f80:	2b7f      	cmp	r3, #127	; 0x7f
   31f82:	dc03      	bgt.n	31f8c <MQTTPacket_len+0x1c>
		rem_len += 1;
   31f84:	687b      	ldr	r3, [r7, #4]
   31f86:	3301      	adds	r3, #1
   31f88:	607b      	str	r3, [r7, #4]
   31f8a:	e012      	b.n	31fb2 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   31f8c:	687b      	ldr	r3, [r7, #4]
   31f8e:	4a0b      	ldr	r2, [pc, #44]	; (31fbc <MQTTPacket_len+0x4c>)
   31f90:	4293      	cmp	r3, r2
   31f92:	dc03      	bgt.n	31f9c <MQTTPacket_len+0x2c>
		rem_len += 2;
   31f94:	687b      	ldr	r3, [r7, #4]
   31f96:	3302      	adds	r3, #2
   31f98:	607b      	str	r3, [r7, #4]
   31f9a:	e00a      	b.n	31fb2 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   31f9c:	687b      	ldr	r3, [r7, #4]
   31f9e:	4a08      	ldr	r2, [pc, #32]	; (31fc0 <MQTTPacket_len+0x50>)
   31fa0:	4293      	cmp	r3, r2
   31fa2:	dc03      	bgt.n	31fac <MQTTPacket_len+0x3c>
		rem_len += 3;
   31fa4:	687b      	ldr	r3, [r7, #4]
   31fa6:	3303      	adds	r3, #3
   31fa8:	607b      	str	r3, [r7, #4]
   31faa:	e002      	b.n	31fb2 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   31fac:	687b      	ldr	r3, [r7, #4]
   31fae:	3304      	adds	r3, #4
   31fb0:	607b      	str	r3, [r7, #4]
	return rem_len;
   31fb2:	687b      	ldr	r3, [r7, #4]
}
   31fb4:	0018      	movs	r0, r3
   31fb6:	46bd      	mov	sp, r7
   31fb8:	b002      	add	sp, #8
   31fba:	bd80      	pop	{r7, pc}
   31fbc:	00003fff 	.word	0x00003fff
   31fc0:	001ffffe 	.word	0x001ffffe

00031fc4 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   31fc4:	b580      	push	{r7, lr}
   31fc6:	b084      	sub	sp, #16
   31fc8:	af00      	add	r7, sp, #0
   31fca:	6078      	str	r0, [r7, #4]
   31fcc:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   31fce:	2300      	movs	r3, #0
   31fd0:	60fb      	str	r3, [r7, #12]
   31fd2:	e00a      	b.n	31fea <bufchar+0x26>
		*c = *bufptr++;
   31fd4:	4b09      	ldr	r3, [pc, #36]	; (31ffc <bufchar+0x38>)
   31fd6:	681b      	ldr	r3, [r3, #0]
   31fd8:	1c59      	adds	r1, r3, #1
   31fda:	4a08      	ldr	r2, [pc, #32]	; (31ffc <bufchar+0x38>)
   31fdc:	6011      	str	r1, [r2, #0]
   31fde:	781a      	ldrb	r2, [r3, #0]
   31fe0:	687b      	ldr	r3, [r7, #4]
   31fe2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   31fe4:	68fb      	ldr	r3, [r7, #12]
   31fe6:	3301      	adds	r3, #1
   31fe8:	60fb      	str	r3, [r7, #12]
   31fea:	68fa      	ldr	r2, [r7, #12]
   31fec:	683b      	ldr	r3, [r7, #0]
   31fee:	429a      	cmp	r2, r3
   31ff0:	dbf0      	blt.n	31fd4 <bufchar+0x10>
	return count;
   31ff2:	683b      	ldr	r3, [r7, #0]
}
   31ff4:	0018      	movs	r0, r3
   31ff6:	46bd      	mov	sp, r7
   31ff8:	b004      	add	sp, #16
   31ffa:	bd80      	pop	{r7, pc}
   31ffc:	2000430c 	.word	0x2000430c

00032000 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   32000:	b580      	push	{r7, lr}
   32002:	b082      	sub	sp, #8
   32004:	af00      	add	r7, sp, #0
   32006:	6078      	str	r0, [r7, #4]
   32008:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   3200a:	4b07      	ldr	r3, [pc, #28]	; (32028 <MQTTPacket_decodeBuf+0x28>)
   3200c:	687a      	ldr	r2, [r7, #4]
   3200e:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   32010:	683a      	ldr	r2, [r7, #0]
   32012:	4b06      	ldr	r3, [pc, #24]	; (3202c <MQTTPacket_decodeBuf+0x2c>)
   32014:	0011      	movs	r1, r2
   32016:	0018      	movs	r0, r3
   32018:	4b05      	ldr	r3, [pc, #20]	; (32030 <MQTTPacket_decodeBuf+0x30>)
   3201a:	4798      	blx	r3
   3201c:	0003      	movs	r3, r0
}
   3201e:	0018      	movs	r0, r3
   32020:	46bd      	mov	sp, r7
   32022:	b002      	add	sp, #8
   32024:	bd80      	pop	{r7, pc}
   32026:	46c0      	nop			; (mov r8, r8)
   32028:	2000430c 	.word	0x2000430c
   3202c:	00031fc5 	.word	0x00031fc5
   32030:	00031eed 	.word	0x00031eed

00032034 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   32034:	b580      	push	{r7, lr}
   32036:	b084      	sub	sp, #16
   32038:	af00      	add	r7, sp, #0
   3203a:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   3203c:	687b      	ldr	r3, [r7, #4]
   3203e:	681b      	ldr	r3, [r3, #0]
   32040:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   32042:	68fb      	ldr	r3, [r7, #12]
   32044:	781b      	ldrb	r3, [r3, #0]
   32046:	021b      	lsls	r3, r3, #8
   32048:	68fa      	ldr	r2, [r7, #12]
   3204a:	3201      	adds	r2, #1
   3204c:	7812      	ldrb	r2, [r2, #0]
   3204e:	189b      	adds	r3, r3, r2
   32050:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   32052:	687b      	ldr	r3, [r7, #4]
   32054:	681b      	ldr	r3, [r3, #0]
   32056:	1c9a      	adds	r2, r3, #2
   32058:	687b      	ldr	r3, [r7, #4]
   3205a:	601a      	str	r2, [r3, #0]
	return len;
   3205c:	68bb      	ldr	r3, [r7, #8]
}
   3205e:	0018      	movs	r0, r3
   32060:	46bd      	mov	sp, r7
   32062:	b004      	add	sp, #16
   32064:	bd80      	pop	{r7, pc}

00032066 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   32066:	b580      	push	{r7, lr}
   32068:	b084      	sub	sp, #16
   3206a:	af00      	add	r7, sp, #0
   3206c:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   3206e:	687b      	ldr	r3, [r7, #4]
   32070:	681a      	ldr	r2, [r3, #0]
   32072:	230f      	movs	r3, #15
   32074:	18fb      	adds	r3, r7, r3
   32076:	7812      	ldrb	r2, [r2, #0]
   32078:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   3207a:	687b      	ldr	r3, [r7, #4]
   3207c:	681b      	ldr	r3, [r3, #0]
   3207e:	1c5a      	adds	r2, r3, #1
   32080:	687b      	ldr	r3, [r7, #4]
   32082:	601a      	str	r2, [r3, #0]
	return c;
   32084:	230f      	movs	r3, #15
   32086:	18fb      	adds	r3, r7, r3
   32088:	781b      	ldrb	r3, [r3, #0]
}
   3208a:	0018      	movs	r0, r3
   3208c:	46bd      	mov	sp, r7
   3208e:	b004      	add	sp, #16
   32090:	bd80      	pop	{r7, pc}

00032092 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   32092:	b580      	push	{r7, lr}
   32094:	b082      	sub	sp, #8
   32096:	af00      	add	r7, sp, #0
   32098:	6078      	str	r0, [r7, #4]
   3209a:	000a      	movs	r2, r1
   3209c:	1cfb      	adds	r3, r7, #3
   3209e:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   320a0:	687b      	ldr	r3, [r7, #4]
   320a2:	681b      	ldr	r3, [r3, #0]
   320a4:	1cfa      	adds	r2, r7, #3
   320a6:	7812      	ldrb	r2, [r2, #0]
   320a8:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   320aa:	687b      	ldr	r3, [r7, #4]
   320ac:	681b      	ldr	r3, [r3, #0]
   320ae:	1c5a      	adds	r2, r3, #1
   320b0:	687b      	ldr	r3, [r7, #4]
   320b2:	601a      	str	r2, [r3, #0]
}
   320b4:	46c0      	nop			; (mov r8, r8)
   320b6:	46bd      	mov	sp, r7
   320b8:	b002      	add	sp, #8
   320ba:	bd80      	pop	{r7, pc}

000320bc <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   320bc:	b580      	push	{r7, lr}
   320be:	b082      	sub	sp, #8
   320c0:	af00      	add	r7, sp, #0
   320c2:	6078      	str	r0, [r7, #4]
   320c4:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   320c6:	687b      	ldr	r3, [r7, #4]
   320c8:	681a      	ldr	r2, [r3, #0]
   320ca:	683b      	ldr	r3, [r7, #0]
   320cc:	2b00      	cmp	r3, #0
   320ce:	da00      	bge.n	320d2 <writeInt+0x16>
   320d0:	33ff      	adds	r3, #255	; 0xff
   320d2:	121b      	asrs	r3, r3, #8
   320d4:	b2db      	uxtb	r3, r3
   320d6:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   320d8:	687b      	ldr	r3, [r7, #4]
   320da:	681b      	ldr	r3, [r3, #0]
   320dc:	1c5a      	adds	r2, r3, #1
   320de:	687b      	ldr	r3, [r7, #4]
   320e0:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   320e2:	687b      	ldr	r3, [r7, #4]
   320e4:	681a      	ldr	r2, [r3, #0]
   320e6:	683b      	ldr	r3, [r7, #0]
   320e8:	4908      	ldr	r1, [pc, #32]	; (3210c <writeInt+0x50>)
   320ea:	400b      	ands	r3, r1
   320ec:	d503      	bpl.n	320f6 <writeInt+0x3a>
   320ee:	3b01      	subs	r3, #1
   320f0:	4907      	ldr	r1, [pc, #28]	; (32110 <writeInt+0x54>)
   320f2:	430b      	orrs	r3, r1
   320f4:	3301      	adds	r3, #1
   320f6:	b2db      	uxtb	r3, r3
   320f8:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   320fa:	687b      	ldr	r3, [r7, #4]
   320fc:	681b      	ldr	r3, [r3, #0]
   320fe:	1c5a      	adds	r2, r3, #1
   32100:	687b      	ldr	r3, [r7, #4]
   32102:	601a      	str	r2, [r3, #0]
}
   32104:	46c0      	nop			; (mov r8, r8)
   32106:	46bd      	mov	sp, r7
   32108:	b002      	add	sp, #8
   3210a:	bd80      	pop	{r7, pc}
   3210c:	800000ff 	.word	0x800000ff
   32110:	ffffff00 	.word	0xffffff00

00032114 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   32114:	b580      	push	{r7, lr}
   32116:	b084      	sub	sp, #16
   32118:	af00      	add	r7, sp, #0
   3211a:	6078      	str	r0, [r7, #4]
   3211c:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   3211e:	683b      	ldr	r3, [r7, #0]
   32120:	0018      	movs	r0, r3
   32122:	4b0d      	ldr	r3, [pc, #52]	; (32158 <writeCString+0x44>)
   32124:	4798      	blx	r3
   32126:	0003      	movs	r3, r0
   32128:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   3212a:	68fa      	ldr	r2, [r7, #12]
   3212c:	687b      	ldr	r3, [r7, #4]
   3212e:	0011      	movs	r1, r2
   32130:	0018      	movs	r0, r3
   32132:	4b0a      	ldr	r3, [pc, #40]	; (3215c <writeCString+0x48>)
   32134:	4798      	blx	r3
	memcpy(*pptr, string, len);
   32136:	687b      	ldr	r3, [r7, #4]
   32138:	681b      	ldr	r3, [r3, #0]
   3213a:	68fa      	ldr	r2, [r7, #12]
   3213c:	6839      	ldr	r1, [r7, #0]
   3213e:	0018      	movs	r0, r3
   32140:	4b07      	ldr	r3, [pc, #28]	; (32160 <writeCString+0x4c>)
   32142:	4798      	blx	r3
	*pptr += len;
   32144:	687b      	ldr	r3, [r7, #4]
   32146:	681a      	ldr	r2, [r3, #0]
   32148:	68fb      	ldr	r3, [r7, #12]
   3214a:	18d2      	adds	r2, r2, r3
   3214c:	687b      	ldr	r3, [r7, #4]
   3214e:	601a      	str	r2, [r3, #0]
}
   32150:	46c0      	nop			; (mov r8, r8)
   32152:	46bd      	mov	sp, r7
   32154:	b004      	add	sp, #16
   32156:	bd80      	pop	{r7, pc}
   32158:	00037057 	.word	0x00037057
   3215c:	000320bd 	.word	0x000320bd
   32160:	00036c69 	.word	0x00036c69

00032164 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   32164:	b580      	push	{r7, lr}
   32166:	b084      	sub	sp, #16
   32168:	af00      	add	r7, sp, #0
   3216a:	60f8      	str	r0, [r7, #12]
   3216c:	0038      	movs	r0, r7
   3216e:	6001      	str	r1, [r0, #0]
   32170:	6042      	str	r2, [r0, #4]
   32172:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   32174:	003b      	movs	r3, r7
   32176:	685b      	ldr	r3, [r3, #4]
   32178:	2b00      	cmp	r3, #0
   3217a:	dd17      	ble.n	321ac <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   3217c:	003b      	movs	r3, r7
   3217e:	685a      	ldr	r2, [r3, #4]
   32180:	68fb      	ldr	r3, [r7, #12]
   32182:	0011      	movs	r1, r2
   32184:	0018      	movs	r0, r3
   32186:	4b14      	ldr	r3, [pc, #80]	; (321d8 <writeMQTTString+0x74>)
   32188:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   3218a:	68fb      	ldr	r3, [r7, #12]
   3218c:	6818      	ldr	r0, [r3, #0]
   3218e:	003b      	movs	r3, r7
   32190:	6899      	ldr	r1, [r3, #8]
   32192:	003b      	movs	r3, r7
   32194:	685b      	ldr	r3, [r3, #4]
   32196:	001a      	movs	r2, r3
   32198:	4b10      	ldr	r3, [pc, #64]	; (321dc <writeMQTTString+0x78>)
   3219a:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   3219c:	68fb      	ldr	r3, [r7, #12]
   3219e:	681a      	ldr	r2, [r3, #0]
   321a0:	003b      	movs	r3, r7
   321a2:	685b      	ldr	r3, [r3, #4]
   321a4:	18d2      	adds	r2, r2, r3
   321a6:	68fb      	ldr	r3, [r7, #12]
   321a8:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   321aa:	e010      	b.n	321ce <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   321ac:	003b      	movs	r3, r7
   321ae:	681b      	ldr	r3, [r3, #0]
   321b0:	2b00      	cmp	r3, #0
   321b2:	d007      	beq.n	321c4 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   321b4:	003b      	movs	r3, r7
   321b6:	681a      	ldr	r2, [r3, #0]
   321b8:	68fb      	ldr	r3, [r7, #12]
   321ba:	0011      	movs	r1, r2
   321bc:	0018      	movs	r0, r3
   321be:	4b08      	ldr	r3, [pc, #32]	; (321e0 <writeMQTTString+0x7c>)
   321c0:	4798      	blx	r3
}
   321c2:	e004      	b.n	321ce <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   321c4:	68fb      	ldr	r3, [r7, #12]
   321c6:	2100      	movs	r1, #0
   321c8:	0018      	movs	r0, r3
   321ca:	4b03      	ldr	r3, [pc, #12]	; (321d8 <writeMQTTString+0x74>)
   321cc:	4798      	blx	r3
}
   321ce:	46c0      	nop			; (mov r8, r8)
   321d0:	46bd      	mov	sp, r7
   321d2:	b004      	add	sp, #16
   321d4:	bd80      	pop	{r7, pc}
   321d6:	46c0      	nop			; (mov r8, r8)
   321d8:	000320bd 	.word	0x000320bd
   321dc:	00036c69 	.word	0x00036c69
   321e0:	00032115 	.word	0x00032115

000321e4 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   321e4:	b580      	push	{r7, lr}
   321e6:	b086      	sub	sp, #24
   321e8:	af00      	add	r7, sp, #0
   321ea:	60f8      	str	r0, [r7, #12]
   321ec:	60b9      	str	r1, [r7, #8]
   321ee:	607a      	str	r2, [r7, #4]
	int rc = 0;
   321f0:	2300      	movs	r3, #0
   321f2:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   321f4:	687a      	ldr	r2, [r7, #4]
   321f6:	68bb      	ldr	r3, [r7, #8]
   321f8:	681b      	ldr	r3, [r3, #0]
   321fa:	1ad3      	subs	r3, r2, r3
   321fc:	2b01      	cmp	r3, #1
   321fe:	dd1b      	ble.n	32238 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   32200:	68bb      	ldr	r3, [r7, #8]
   32202:	0018      	movs	r0, r3
   32204:	4b10      	ldr	r3, [pc, #64]	; (32248 <readMQTTLenString+0x64>)
   32206:	4798      	blx	r3
   32208:	0002      	movs	r2, r0
   3220a:	68fb      	ldr	r3, [r7, #12]
   3220c:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   3220e:	68bb      	ldr	r3, [r7, #8]
   32210:	681a      	ldr	r2, [r3, #0]
   32212:	68fb      	ldr	r3, [r7, #12]
   32214:	685b      	ldr	r3, [r3, #4]
   32216:	18d2      	adds	r2, r2, r3
   32218:	687b      	ldr	r3, [r7, #4]
   3221a:	429a      	cmp	r2, r3
   3221c:	d80c      	bhi.n	32238 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   3221e:	68bb      	ldr	r3, [r7, #8]
   32220:	681a      	ldr	r2, [r3, #0]
   32222:	68fb      	ldr	r3, [r7, #12]
   32224:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   32226:	68bb      	ldr	r3, [r7, #8]
   32228:	681a      	ldr	r2, [r3, #0]
   3222a:	68fb      	ldr	r3, [r7, #12]
   3222c:	685b      	ldr	r3, [r3, #4]
   3222e:	18d2      	adds	r2, r2, r3
   32230:	68bb      	ldr	r3, [r7, #8]
   32232:	601a      	str	r2, [r3, #0]
			rc = 1;
   32234:	2301      	movs	r3, #1
   32236:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   32238:	68fb      	ldr	r3, [r7, #12]
   3223a:	2200      	movs	r2, #0
   3223c:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   3223e:	697b      	ldr	r3, [r7, #20]
}
   32240:	0018      	movs	r0, r3
   32242:	46bd      	mov	sp, r7
   32244:	b006      	add	sp, #24
   32246:	bd80      	pop	{r7, pc}
   32248:	00032035 	.word	0x00032035

0003224c <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   3224c:	b580      	push	{r7, lr}
   3224e:	b086      	sub	sp, #24
   32250:	af00      	add	r7, sp, #0
   32252:	1d3b      	adds	r3, r7, #4
   32254:	6018      	str	r0, [r3, #0]
   32256:	6059      	str	r1, [r3, #4]
   32258:	609a      	str	r2, [r3, #8]
	int rc = 0;
   3225a:	2300      	movs	r3, #0
   3225c:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   3225e:	1d3b      	adds	r3, r7, #4
   32260:	681b      	ldr	r3, [r3, #0]
   32262:	2b00      	cmp	r3, #0
   32264:	d007      	beq.n	32276 <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   32266:	1d3b      	adds	r3, r7, #4
   32268:	681b      	ldr	r3, [r3, #0]
   3226a:	0018      	movs	r0, r3
   3226c:	4b06      	ldr	r3, [pc, #24]	; (32288 <MQTTstrlen+0x3c>)
   3226e:	4798      	blx	r3
   32270:	0003      	movs	r3, r0
   32272:	617b      	str	r3, [r7, #20]
   32274:	e002      	b.n	3227c <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   32276:	1d3b      	adds	r3, r7, #4
   32278:	685b      	ldr	r3, [r3, #4]
   3227a:	617b      	str	r3, [r7, #20]
	return rc;
   3227c:	697b      	ldr	r3, [r7, #20]
}
   3227e:	0018      	movs	r0, r3
   32280:	46bd      	mov	sp, r7
   32282:	b006      	add	sp, #24
   32284:	bd80      	pop	{r7, pc}
   32286:	46c0      	nop			; (mov r8, r8)
   32288:	00037057 	.word	0x00037057

0003228c <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   3228c:	b580      	push	{r7, lr}
   3228e:	b086      	sub	sp, #24
   32290:	af00      	add	r7, sp, #0
   32292:	6078      	str	r0, [r7, #4]
   32294:	6039      	str	r1, [r7, #0]
	int alen = 0,
   32296:	2300      	movs	r3, #0
   32298:	617b      	str	r3, [r7, #20]
		blen = 0;
   3229a:	2300      	movs	r3, #0
   3229c:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   3229e:	687b      	ldr	r3, [r7, #4]
   322a0:	681b      	ldr	r3, [r3, #0]
   322a2:	2b00      	cmp	r3, #0
   322a4:	d00a      	beq.n	322bc <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   322a6:	687b      	ldr	r3, [r7, #4]
   322a8:	681b      	ldr	r3, [r3, #0]
   322aa:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   322ac:	687b      	ldr	r3, [r7, #4]
   322ae:	681b      	ldr	r3, [r3, #0]
   322b0:	0018      	movs	r0, r3
   322b2:	4b12      	ldr	r3, [pc, #72]	; (322fc <MQTTPacket_equals+0x70>)
   322b4:	4798      	blx	r3
   322b6:	0003      	movs	r3, r0
   322b8:	617b      	str	r3, [r7, #20]
   322ba:	e005      	b.n	322c8 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   322bc:	687b      	ldr	r3, [r7, #4]
   322be:	689b      	ldr	r3, [r3, #8]
   322c0:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   322c2:	687b      	ldr	r3, [r7, #4]
   322c4:	685b      	ldr	r3, [r3, #4]
   322c6:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   322c8:	683b      	ldr	r3, [r7, #0]
   322ca:	0018      	movs	r0, r3
   322cc:	4b0b      	ldr	r3, [pc, #44]	; (322fc <MQTTPacket_equals+0x70>)
   322ce:	4798      	blx	r3
   322d0:	0003      	movs	r3, r0
   322d2:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   322d4:	697a      	ldr	r2, [r7, #20]
   322d6:	68fb      	ldr	r3, [r7, #12]
   322d8:	429a      	cmp	r2, r3
   322da:	d109      	bne.n	322f0 <MQTTPacket_equals+0x64>
   322dc:	697a      	ldr	r2, [r7, #20]
   322de:	6839      	ldr	r1, [r7, #0]
   322e0:	693b      	ldr	r3, [r7, #16]
   322e2:	0018      	movs	r0, r3
   322e4:	4b06      	ldr	r3, [pc, #24]	; (32300 <MQTTPacket_equals+0x74>)
   322e6:	4798      	blx	r3
   322e8:	1e03      	subs	r3, r0, #0
   322ea:	d101      	bne.n	322f0 <MQTTPacket_equals+0x64>
   322ec:	2301      	movs	r3, #1
   322ee:	e000      	b.n	322f2 <MQTTPacket_equals+0x66>
   322f0:	2300      	movs	r3, #0
}
   322f2:	0018      	movs	r0, r3
   322f4:	46bd      	mov	sp, r7
   322f6:	b006      	add	sp, #24
   322f8:	bd80      	pop	{r7, pc}
   322fa:	46c0      	nop			; (mov r8, r8)
   322fc:	00037057 	.word	0x00037057
   32300:	00037065 	.word	0x00037065

00032304 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   32304:	b580      	push	{r7, lr}
   32306:	b086      	sub	sp, #24
   32308:	af00      	add	r7, sp, #0
   3230a:	60f8      	str	r0, [r7, #12]
   3230c:	0038      	movs	r0, r7
   3230e:	6001      	str	r1, [r0, #0]
   32310:	6042      	str	r2, [r0, #4]
   32312:	6083      	str	r3, [r0, #8]
	int len = 0;
   32314:	2300      	movs	r3, #0
   32316:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   32318:	003b      	movs	r3, r7
   3231a:	6818      	ldr	r0, [r3, #0]
   3231c:	6859      	ldr	r1, [r3, #4]
   3231e:	689a      	ldr	r2, [r3, #8]
   32320:	4b09      	ldr	r3, [pc, #36]	; (32348 <MQTTSerialize_publishLength+0x44>)
   32322:	4798      	blx	r3
   32324:	0003      	movs	r3, r0
   32326:	1c9a      	adds	r2, r3, #2
   32328:	6a3b      	ldr	r3, [r7, #32]
   3232a:	18d3      	adds	r3, r2, r3
   3232c:	697a      	ldr	r2, [r7, #20]
   3232e:	18d3      	adds	r3, r2, r3
   32330:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   32332:	68fb      	ldr	r3, [r7, #12]
   32334:	2b00      	cmp	r3, #0
   32336:	dd02      	ble.n	3233e <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   32338:	697b      	ldr	r3, [r7, #20]
   3233a:	3302      	adds	r3, #2
   3233c:	617b      	str	r3, [r7, #20]
	return len;
   3233e:	697b      	ldr	r3, [r7, #20]
}
   32340:	0018      	movs	r0, r3
   32342:	46bd      	mov	sp, r7
   32344:	b006      	add	sp, #24
   32346:	bd80      	pop	{r7, pc}
   32348:	0003224d 	.word	0x0003224d

0003234c <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   3234c:	b590      	push	{r4, r7, lr}
   3234e:	b08b      	sub	sp, #44	; 0x2c
   32350:	af02      	add	r7, sp, #8
   32352:	60f8      	str	r0, [r7, #12]
   32354:	60b9      	str	r1, [r7, #8]
   32356:	603b      	str	r3, [r7, #0]
   32358:	1dfb      	adds	r3, r7, #7
   3235a:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   3235c:	68fb      	ldr	r3, [r7, #12]
   3235e:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   32360:	2300      	movs	r3, #0
   32362:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   32364:	2300      	movs	r3, #0
   32366:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   32368:	2300      	movs	r3, #0
   3236a:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   3236c:	2308      	movs	r3, #8
   3236e:	2230      	movs	r2, #48	; 0x30
   32370:	4694      	mov	ip, r2
   32372:	44bc      	add	ip, r7
   32374:	4463      	add	r3, ip
   32376:	6838      	ldr	r0, [r7, #0]
   32378:	6cba      	ldr	r2, [r7, #72]	; 0x48
   3237a:	9200      	str	r2, [sp, #0]
   3237c:	6819      	ldr	r1, [r3, #0]
   3237e:	685a      	ldr	r2, [r3, #4]
   32380:	689b      	ldr	r3, [r3, #8]
   32382:	4c46      	ldr	r4, [pc, #280]	; (3249c <MQTTSerialize_publish+0x150>)
   32384:	47a0      	blx	r4
   32386:	0003      	movs	r3, r0
   32388:	61bb      	str	r3, [r7, #24]
   3238a:	69bb      	ldr	r3, [r7, #24]
   3238c:	0018      	movs	r0, r3
   3238e:	4b44      	ldr	r3, [pc, #272]	; (324a0 <MQTTSerialize_publish+0x154>)
   32390:	4798      	blx	r3
   32392:	0002      	movs	r2, r0
   32394:	68bb      	ldr	r3, [r7, #8]
   32396:	429a      	cmp	r2, r3
   32398:	dd03      	ble.n	323a2 <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3239a:	2302      	movs	r3, #2
   3239c:	425b      	negs	r3, r3
   3239e:	61fb      	str	r3, [r7, #28]
		goto exit;
   323a0:	e077      	b.n	32492 <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   323a2:	2310      	movs	r3, #16
   323a4:	18fb      	adds	r3, r7, r3
   323a6:	781a      	ldrb	r2, [r3, #0]
   323a8:	210f      	movs	r1, #15
   323aa:	400a      	ands	r2, r1
   323ac:	1c11      	adds	r1, r2, #0
   323ae:	2230      	movs	r2, #48	; 0x30
   323b0:	430a      	orrs	r2, r1
   323b2:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   323b4:	1dfb      	adds	r3, r7, #7
   323b6:	781b      	ldrb	r3, [r3, #0]
   323b8:	2201      	movs	r2, #1
   323ba:	4013      	ands	r3, r2
   323bc:	b2da      	uxtb	r2, r3
   323be:	2310      	movs	r3, #16
   323c0:	18fb      	adds	r3, r7, r3
   323c2:	2101      	movs	r1, #1
   323c4:	400a      	ands	r2, r1
   323c6:	00d0      	lsls	r0, r2, #3
   323c8:	781a      	ldrb	r2, [r3, #0]
   323ca:	2108      	movs	r1, #8
   323cc:	438a      	bics	r2, r1
   323ce:	1c11      	adds	r1, r2, #0
   323d0:	1c02      	adds	r2, r0, #0
   323d2:	430a      	orrs	r2, r1
   323d4:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   323d6:	683b      	ldr	r3, [r7, #0]
   323d8:	b2db      	uxtb	r3, r3
   323da:	1c1a      	adds	r2, r3, #0
   323dc:	2303      	movs	r3, #3
   323de:	4013      	ands	r3, r2
   323e0:	b2da      	uxtb	r2, r3
   323e2:	2310      	movs	r3, #16
   323e4:	18fb      	adds	r3, r7, r3
   323e6:	2103      	movs	r1, #3
   323e8:	400a      	ands	r2, r1
   323ea:	1890      	adds	r0, r2, r2
   323ec:	781a      	ldrb	r2, [r3, #0]
   323ee:	2106      	movs	r1, #6
   323f0:	438a      	bics	r2, r1
   323f2:	1c11      	adds	r1, r2, #0
   323f4:	1c02      	adds	r2, r0, #0
   323f6:	430a      	orrs	r2, r1
   323f8:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   323fa:	2330      	movs	r3, #48	; 0x30
   323fc:	18fb      	adds	r3, r7, r3
   323fe:	781b      	ldrb	r3, [r3, #0]
   32400:	2201      	movs	r2, #1
   32402:	4013      	ands	r3, r2
   32404:	b2da      	uxtb	r2, r3
   32406:	2310      	movs	r3, #16
   32408:	18fb      	adds	r3, r7, r3
   3240a:	2101      	movs	r1, #1
   3240c:	400a      	ands	r2, r1
   3240e:	0010      	movs	r0, r2
   32410:	781a      	ldrb	r2, [r3, #0]
   32412:	2101      	movs	r1, #1
   32414:	438a      	bics	r2, r1
   32416:	1c11      	adds	r1, r2, #0
   32418:	1c02      	adds	r2, r0, #0
   3241a:	430a      	orrs	r2, r1
   3241c:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   3241e:	2310      	movs	r3, #16
   32420:	18fb      	adds	r3, r7, r3
   32422:	781a      	ldrb	r2, [r3, #0]
   32424:	2314      	movs	r3, #20
   32426:	18fb      	adds	r3, r7, r3
   32428:	0011      	movs	r1, r2
   3242a:	0018      	movs	r0, r3
   3242c:	4b1d      	ldr	r3, [pc, #116]	; (324a4 <MQTTSerialize_publish+0x158>)
   3242e:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   32430:	697b      	ldr	r3, [r7, #20]
   32432:	69ba      	ldr	r2, [r7, #24]
   32434:	0011      	movs	r1, r2
   32436:	0018      	movs	r0, r3
   32438:	4b1b      	ldr	r3, [pc, #108]	; (324a8 <MQTTSerialize_publish+0x15c>)
   3243a:	4798      	blx	r3
   3243c:	0002      	movs	r2, r0
   3243e:	697b      	ldr	r3, [r7, #20]
   32440:	189b      	adds	r3, r3, r2
   32442:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   32444:	2308      	movs	r3, #8
   32446:	2230      	movs	r2, #48	; 0x30
   32448:	4694      	mov	ip, r2
   3244a:	44bc      	add	ip, r7
   3244c:	4463      	add	r3, ip
   3244e:	2214      	movs	r2, #20
   32450:	18b8      	adds	r0, r7, r2
   32452:	6819      	ldr	r1, [r3, #0]
   32454:	685a      	ldr	r2, [r3, #4]
   32456:	689b      	ldr	r3, [r3, #8]
   32458:	4c14      	ldr	r4, [pc, #80]	; (324ac <MQTTSerialize_publish+0x160>)
   3245a:	47a0      	blx	r4

	if (qos > 0)
   3245c:	683b      	ldr	r3, [r7, #0]
   3245e:	2b00      	cmp	r3, #0
   32460:	dd08      	ble.n	32474 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   32462:	2334      	movs	r3, #52	; 0x34
   32464:	18fb      	adds	r3, r7, r3
   32466:	881a      	ldrh	r2, [r3, #0]
   32468:	2314      	movs	r3, #20
   3246a:	18fb      	adds	r3, r7, r3
   3246c:	0011      	movs	r1, r2
   3246e:	0018      	movs	r0, r3
   32470:	4b0f      	ldr	r3, [pc, #60]	; (324b0 <MQTTSerialize_publish+0x164>)
   32472:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   32474:	697b      	ldr	r3, [r7, #20]
   32476:	6cba      	ldr	r2, [r7, #72]	; 0x48
   32478:	6c79      	ldr	r1, [r7, #68]	; 0x44
   3247a:	0018      	movs	r0, r3
   3247c:	4b0d      	ldr	r3, [pc, #52]	; (324b4 <MQTTSerialize_publish+0x168>)
   3247e:	4798      	blx	r3
	ptr += payloadlen;
   32480:	697a      	ldr	r2, [r7, #20]
   32482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   32484:	18d3      	adds	r3, r2, r3
   32486:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   32488:	697b      	ldr	r3, [r7, #20]
   3248a:	001a      	movs	r2, r3
   3248c:	68fb      	ldr	r3, [r7, #12]
   3248e:	1ad3      	subs	r3, r2, r3
   32490:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32492:	69fb      	ldr	r3, [r7, #28]
}
   32494:	0018      	movs	r0, r3
   32496:	46bd      	mov	sp, r7
   32498:	b009      	add	sp, #36	; 0x24
   3249a:	bd90      	pop	{r4, r7, pc}
   3249c:	00032305 	.word	0x00032305
   324a0:	00031f71 	.word	0x00031f71
   324a4:	00032093 	.word	0x00032093
   324a8:	00031e79 	.word	0x00031e79
   324ac:	00032165 	.word	0x00032165
   324b0:	000320bd 	.word	0x000320bd
   324b4:	00036c69 	.word	0x00036c69

000324b8 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   324b8:	b580      	push	{r7, lr}
   324ba:	b088      	sub	sp, #32
   324bc:	af00      	add	r7, sp, #0
   324be:	60f8      	str	r0, [r7, #12]
   324c0:	60b9      	str	r1, [r7, #8]
   324c2:	0019      	movs	r1, r3
   324c4:	1dfb      	adds	r3, r7, #7
   324c6:	701a      	strb	r2, [r3, #0]
   324c8:	1dbb      	adds	r3, r7, #6
   324ca:	1c0a      	adds	r2, r1, #0
   324cc:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   324ce:	2300      	movs	r3, #0
   324d0:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   324d2:	2300      	movs	r3, #0
   324d4:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   324d6:	68fb      	ldr	r3, [r7, #12]
   324d8:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   324da:	68bb      	ldr	r3, [r7, #8]
   324dc:	2b03      	cmp	r3, #3
   324de:	dc03      	bgt.n	324e8 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   324e0:	2302      	movs	r3, #2
   324e2:	425b      	negs	r3, r3
   324e4:	61fb      	str	r3, [r7, #28]
		goto exit;
   324e6:	e055      	b.n	32594 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   324e8:	1dfb      	adds	r3, r7, #7
   324ea:	781b      	ldrb	r3, [r3, #0]
   324ec:	220f      	movs	r2, #15
   324ee:	4013      	ands	r3, r2
   324f0:	b2da      	uxtb	r2, r3
   324f2:	2318      	movs	r3, #24
   324f4:	18fb      	adds	r3, r7, r3
   324f6:	0110      	lsls	r0, r2, #4
   324f8:	781a      	ldrb	r2, [r3, #0]
   324fa:	210f      	movs	r1, #15
   324fc:	400a      	ands	r2, r1
   324fe:	1c11      	adds	r1, r2, #0
   32500:	1c02      	adds	r2, r0, #0
   32502:	430a      	orrs	r2, r1
   32504:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   32506:	1dbb      	adds	r3, r7, #6
   32508:	781b      	ldrb	r3, [r3, #0]
   3250a:	2201      	movs	r2, #1
   3250c:	4013      	ands	r3, r2
   3250e:	b2da      	uxtb	r2, r3
   32510:	2318      	movs	r3, #24
   32512:	18fb      	adds	r3, r7, r3
   32514:	2101      	movs	r1, #1
   32516:	400a      	ands	r2, r1
   32518:	00d0      	lsls	r0, r2, #3
   3251a:	781a      	ldrb	r2, [r3, #0]
   3251c:	2108      	movs	r1, #8
   3251e:	438a      	bics	r2, r1
   32520:	1c11      	adds	r1, r2, #0
   32522:	1c02      	adds	r2, r0, #0
   32524:	430a      	orrs	r2, r1
   32526:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   32528:	1dfb      	adds	r3, r7, #7
   3252a:	781b      	ldrb	r3, [r3, #0]
   3252c:	3b06      	subs	r3, #6
   3252e:	425a      	negs	r2, r3
   32530:	4153      	adcs	r3, r2
   32532:	b2db      	uxtb	r3, r3
   32534:	1c1a      	adds	r2, r3, #0
   32536:	2303      	movs	r3, #3
   32538:	4013      	ands	r3, r2
   3253a:	b2da      	uxtb	r2, r3
   3253c:	2318      	movs	r3, #24
   3253e:	18fb      	adds	r3, r7, r3
   32540:	2103      	movs	r1, #3
   32542:	400a      	ands	r2, r1
   32544:	1890      	adds	r0, r2, r2
   32546:	781a      	ldrb	r2, [r3, #0]
   32548:	2106      	movs	r1, #6
   3254a:	438a      	bics	r2, r1
   3254c:	1c11      	adds	r1, r2, #0
   3254e:	1c02      	adds	r2, r0, #0
   32550:	430a      	orrs	r2, r1
   32552:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   32554:	2318      	movs	r3, #24
   32556:	18fb      	adds	r3, r7, r3
   32558:	781a      	ldrb	r2, [r3, #0]
   3255a:	2314      	movs	r3, #20
   3255c:	18fb      	adds	r3, r7, r3
   3255e:	0011      	movs	r1, r2
   32560:	0018      	movs	r0, r3
   32562:	4b0f      	ldr	r3, [pc, #60]	; (325a0 <MQTTSerialize_ack+0xe8>)
   32564:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   32566:	697b      	ldr	r3, [r7, #20]
   32568:	2102      	movs	r1, #2
   3256a:	0018      	movs	r0, r3
   3256c:	4b0d      	ldr	r3, [pc, #52]	; (325a4 <MQTTSerialize_ack+0xec>)
   3256e:	4798      	blx	r3
   32570:	0002      	movs	r2, r0
   32572:	697b      	ldr	r3, [r7, #20]
   32574:	189b      	adds	r3, r3, r2
   32576:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   32578:	2328      	movs	r3, #40	; 0x28
   3257a:	18fb      	adds	r3, r7, r3
   3257c:	881a      	ldrh	r2, [r3, #0]
   3257e:	2314      	movs	r3, #20
   32580:	18fb      	adds	r3, r7, r3
   32582:	0011      	movs	r1, r2
   32584:	0018      	movs	r0, r3
   32586:	4b08      	ldr	r3, [pc, #32]	; (325a8 <MQTTSerialize_ack+0xf0>)
   32588:	4798      	blx	r3
	rc = ptr - buf;
   3258a:	697b      	ldr	r3, [r7, #20]
   3258c:	001a      	movs	r2, r3
   3258e:	68fb      	ldr	r3, [r7, #12]
   32590:	1ad3      	subs	r3, r2, r3
   32592:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32594:	69fb      	ldr	r3, [r7, #28]
}
   32596:	0018      	movs	r0, r3
   32598:	46bd      	mov	sp, r7
   3259a:	b008      	add	sp, #32
   3259c:	bd80      	pop	{r7, pc}
   3259e:	46c0      	nop			; (mov r8, r8)
   325a0:	00032093 	.word	0x00032093
   325a4:	00031e79 	.word	0x00031e79
   325a8:	000320bd 	.word	0x000320bd

000325ac <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   325ac:	b580      	push	{r7, lr}
   325ae:	b084      	sub	sp, #16
   325b0:	af00      	add	r7, sp, #0
   325b2:	6078      	str	r0, [r7, #4]
   325b4:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   325b6:	2302      	movs	r3, #2
   325b8:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   325ba:	2300      	movs	r3, #0
   325bc:	60fb      	str	r3, [r7, #12]
   325be:	e014      	b.n	325ea <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   325c0:	68fa      	ldr	r2, [r7, #12]
   325c2:	0013      	movs	r3, r2
   325c4:	005b      	lsls	r3, r3, #1
   325c6:	189b      	adds	r3, r3, r2
   325c8:	009b      	lsls	r3, r3, #2
   325ca:	001a      	movs	r2, r3
   325cc:	683b      	ldr	r3, [r7, #0]
   325ce:	189b      	adds	r3, r3, r2
   325d0:	6818      	ldr	r0, [r3, #0]
   325d2:	6859      	ldr	r1, [r3, #4]
   325d4:	689a      	ldr	r2, [r3, #8]
   325d6:	4b09      	ldr	r3, [pc, #36]	; (325fc <MQTTSerialize_subscribeLength+0x50>)
   325d8:	4798      	blx	r3
   325da:	0003      	movs	r3, r0
   325dc:	3303      	adds	r3, #3
   325de:	68ba      	ldr	r2, [r7, #8]
   325e0:	18d3      	adds	r3, r2, r3
   325e2:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   325e4:	68fb      	ldr	r3, [r7, #12]
   325e6:	3301      	adds	r3, #1
   325e8:	60fb      	str	r3, [r7, #12]
   325ea:	68fa      	ldr	r2, [r7, #12]
   325ec:	687b      	ldr	r3, [r7, #4]
   325ee:	429a      	cmp	r2, r3
   325f0:	dbe6      	blt.n	325c0 <MQTTSerialize_subscribeLength+0x14>
	return len;
   325f2:	68bb      	ldr	r3, [r7, #8]
}
   325f4:	0018      	movs	r0, r3
   325f6:	46bd      	mov	sp, r7
   325f8:	b004      	add	sp, #16
   325fa:	bd80      	pop	{r7, pc}
   325fc:	0003224d 	.word	0x0003224d

00032600 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   32600:	b590      	push	{r4, r7, lr}
   32602:	b08b      	sub	sp, #44	; 0x2c
   32604:	af00      	add	r7, sp, #0
   32606:	60f8      	str	r0, [r7, #12]
   32608:	60b9      	str	r1, [r7, #8]
   3260a:	0019      	movs	r1, r3
   3260c:	1dfb      	adds	r3, r7, #7
   3260e:	701a      	strb	r2, [r3, #0]
   32610:	1d3b      	adds	r3, r7, #4
   32612:	1c0a      	adds	r2, r1, #0
   32614:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   32616:	68fb      	ldr	r3, [r7, #12]
   32618:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   3261a:	2300      	movs	r3, #0
   3261c:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   3261e:	2300      	movs	r3, #0
   32620:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   32622:	2300      	movs	r3, #0
   32624:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   32626:	2300      	movs	r3, #0
   32628:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   3262a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   3262c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   3262e:	0011      	movs	r1, r2
   32630:	0018      	movs	r0, r3
   32632:	4b41      	ldr	r3, [pc, #260]	; (32738 <MQTTSerialize_subscribe+0x138>)
   32634:	4798      	blx	r3
   32636:	0003      	movs	r3, r0
   32638:	61fb      	str	r3, [r7, #28]
   3263a:	69fb      	ldr	r3, [r7, #28]
   3263c:	0018      	movs	r0, r3
   3263e:	4b3f      	ldr	r3, [pc, #252]	; (3273c <MQTTSerialize_subscribe+0x13c>)
   32640:	4798      	blx	r3
   32642:	0002      	movs	r2, r0
   32644:	68bb      	ldr	r3, [r7, #8]
   32646:	429a      	cmp	r2, r3
   32648:	dd03      	ble.n	32652 <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3264a:	2302      	movs	r3, #2
   3264c:	425b      	negs	r3, r3
   3264e:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   32650:	e06c      	b.n	3272c <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   32652:	2314      	movs	r3, #20
   32654:	18fb      	adds	r3, r7, r3
   32656:	2200      	movs	r2, #0
   32658:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   3265a:	2314      	movs	r3, #20
   3265c:	18fb      	adds	r3, r7, r3
   3265e:	781a      	ldrb	r2, [r3, #0]
   32660:	210f      	movs	r1, #15
   32662:	400a      	ands	r2, r1
   32664:	1c11      	adds	r1, r2, #0
   32666:	2280      	movs	r2, #128	; 0x80
   32668:	4252      	negs	r2, r2
   3266a:	430a      	orrs	r2, r1
   3266c:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   3266e:	1dfb      	adds	r3, r7, #7
   32670:	781b      	ldrb	r3, [r3, #0]
   32672:	2201      	movs	r2, #1
   32674:	4013      	ands	r3, r2
   32676:	b2da      	uxtb	r2, r3
   32678:	2314      	movs	r3, #20
   3267a:	18fb      	adds	r3, r7, r3
   3267c:	2101      	movs	r1, #1
   3267e:	400a      	ands	r2, r1
   32680:	00d0      	lsls	r0, r2, #3
   32682:	781a      	ldrb	r2, [r3, #0]
   32684:	2108      	movs	r1, #8
   32686:	438a      	bics	r2, r1
   32688:	1c11      	adds	r1, r2, #0
   3268a:	1c02      	adds	r2, r0, #0
   3268c:	430a      	orrs	r2, r1
   3268e:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   32690:	2314      	movs	r3, #20
   32692:	18fb      	adds	r3, r7, r3
   32694:	781a      	ldrb	r2, [r3, #0]
   32696:	2106      	movs	r1, #6
   32698:	438a      	bics	r2, r1
   3269a:	1c11      	adds	r1, r2, #0
   3269c:	2202      	movs	r2, #2
   3269e:	430a      	orrs	r2, r1
   326a0:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   326a2:	2314      	movs	r3, #20
   326a4:	18fb      	adds	r3, r7, r3
   326a6:	781a      	ldrb	r2, [r3, #0]
   326a8:	2318      	movs	r3, #24
   326aa:	18fb      	adds	r3, r7, r3
   326ac:	0011      	movs	r1, r2
   326ae:	0018      	movs	r0, r3
   326b0:	4b23      	ldr	r3, [pc, #140]	; (32740 <MQTTSerialize_subscribe+0x140>)
   326b2:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   326b4:	69bb      	ldr	r3, [r7, #24]
   326b6:	69fa      	ldr	r2, [r7, #28]
   326b8:	0011      	movs	r1, r2
   326ba:	0018      	movs	r0, r3
   326bc:	4b21      	ldr	r3, [pc, #132]	; (32744 <MQTTSerialize_subscribe+0x144>)
   326be:	4798      	blx	r3
   326c0:	0002      	movs	r2, r0
   326c2:	69bb      	ldr	r3, [r7, #24]
   326c4:	189b      	adds	r3, r3, r2
   326c6:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   326c8:	1d3b      	adds	r3, r7, #4
   326ca:	881a      	ldrh	r2, [r3, #0]
   326cc:	2318      	movs	r3, #24
   326ce:	18fb      	adds	r3, r7, r3
   326d0:	0011      	movs	r1, r2
   326d2:	0018      	movs	r0, r3
   326d4:	4b1c      	ldr	r3, [pc, #112]	; (32748 <MQTTSerialize_subscribe+0x148>)
   326d6:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   326d8:	2300      	movs	r3, #0
   326da:	623b      	str	r3, [r7, #32]
   326dc:	e01d      	b.n	3271a <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   326de:	6a3a      	ldr	r2, [r7, #32]
   326e0:	0013      	movs	r3, r2
   326e2:	005b      	lsls	r3, r3, #1
   326e4:	189b      	adds	r3, r3, r2
   326e6:	009b      	lsls	r3, r3, #2
   326e8:	001a      	movs	r2, r3
   326ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   326ec:	189b      	adds	r3, r3, r2
   326ee:	2218      	movs	r2, #24
   326f0:	18b8      	adds	r0, r7, r2
   326f2:	6819      	ldr	r1, [r3, #0]
   326f4:	685a      	ldr	r2, [r3, #4]
   326f6:	689b      	ldr	r3, [r3, #8]
   326f8:	4c14      	ldr	r4, [pc, #80]	; (3274c <MQTTSerialize_subscribe+0x14c>)
   326fa:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   326fc:	6a3b      	ldr	r3, [r7, #32]
   326fe:	009b      	lsls	r3, r3, #2
   32700:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   32702:	18d3      	adds	r3, r2, r3
   32704:	681b      	ldr	r3, [r3, #0]
   32706:	b2da      	uxtb	r2, r3
   32708:	2318      	movs	r3, #24
   3270a:	18fb      	adds	r3, r7, r3
   3270c:	0011      	movs	r1, r2
   3270e:	0018      	movs	r0, r3
   32710:	4b0b      	ldr	r3, [pc, #44]	; (32740 <MQTTSerialize_subscribe+0x140>)
   32712:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   32714:	6a3b      	ldr	r3, [r7, #32]
   32716:	3301      	adds	r3, #1
   32718:	623b      	str	r3, [r7, #32]
   3271a:	6a3a      	ldr	r2, [r7, #32]
   3271c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   3271e:	429a      	cmp	r2, r3
   32720:	dbdd      	blt.n	326de <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   32722:	69bb      	ldr	r3, [r7, #24]
   32724:	001a      	movs	r2, r3
   32726:	68fb      	ldr	r3, [r7, #12]
   32728:	1ad3      	subs	r3, r2, r3
   3272a:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   3272e:	0018      	movs	r0, r3
   32730:	46bd      	mov	sp, r7
   32732:	b00b      	add	sp, #44	; 0x2c
   32734:	bd90      	pop	{r4, r7, pc}
   32736:	46c0      	nop			; (mov r8, r8)
   32738:	000325ad 	.word	0x000325ad
   3273c:	00031f71 	.word	0x00031f71
   32740:	00032093 	.word	0x00032093
   32744:	00031e79 	.word	0x00031e79
   32748:	000320bd 	.word	0x000320bd
   3274c:	00032165 	.word	0x00032165

00032750 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   32750:	b590      	push	{r4, r7, lr}
   32752:	b08b      	sub	sp, #44	; 0x2c
   32754:	af00      	add	r7, sp, #0
   32756:	60f8      	str	r0, [r7, #12]
   32758:	60b9      	str	r1, [r7, #8]
   3275a:	607a      	str	r2, [r7, #4]
   3275c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   3275e:	2300      	movs	r3, #0
   32760:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   32762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   32764:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   32766:	2300      	movs	r3, #0
   32768:	623b      	str	r3, [r7, #32]
	int rc = 0;
   3276a:	2300      	movs	r3, #0
   3276c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   3276e:	2318      	movs	r3, #24
   32770:	18fb      	adds	r3, r7, r3
   32772:	0018      	movs	r0, r3
   32774:	4b2c      	ldr	r3, [pc, #176]	; (32828 <MQTTDeserialize_suback+0xd8>)
   32776:	4798      	blx	r3
   32778:	0003      	movs	r3, r0
   3277a:	001a      	movs	r2, r3
   3277c:	231c      	movs	r3, #28
   3277e:	18fb      	adds	r3, r7, r3
   32780:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   32782:	231c      	movs	r3, #28
   32784:	18fb      	adds	r3, r7, r3
   32786:	781b      	ldrb	r3, [r3, #0]
   32788:	220f      	movs	r2, #15
   3278a:	4393      	bics	r3, r2
   3278c:	b2db      	uxtb	r3, r3
   3278e:	2b90      	cmp	r3, #144	; 0x90
   32790:	d142      	bne.n	32818 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   32792:	69bb      	ldr	r3, [r7, #24]
   32794:	2214      	movs	r2, #20
   32796:	18ba      	adds	r2, r7, r2
   32798:	0011      	movs	r1, r2
   3279a:	0018      	movs	r0, r3
   3279c:	4b23      	ldr	r3, [pc, #140]	; (3282c <MQTTDeserialize_suback+0xdc>)
   3279e:	4798      	blx	r3
   327a0:	0003      	movs	r3, r0
   327a2:	627b      	str	r3, [r7, #36]	; 0x24
   327a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   327a6:	69bb      	ldr	r3, [r7, #24]
   327a8:	189b      	adds	r3, r3, r2
   327aa:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   327ac:	69bb      	ldr	r3, [r7, #24]
   327ae:	697a      	ldr	r2, [r7, #20]
   327b0:	189b      	adds	r3, r3, r2
   327b2:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   327b4:	6a3b      	ldr	r3, [r7, #32]
   327b6:	69ba      	ldr	r2, [r7, #24]
   327b8:	1a9b      	subs	r3, r3, r2
   327ba:	2b01      	cmp	r3, #1
   327bc:	dd2e      	ble.n	3281c <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   327be:	2318      	movs	r3, #24
   327c0:	18fb      	adds	r3, r7, r3
   327c2:	0018      	movs	r0, r3
   327c4:	4b1a      	ldr	r3, [pc, #104]	; (32830 <MQTTDeserialize_suback+0xe0>)
   327c6:	4798      	blx	r3
   327c8:	0003      	movs	r3, r0
   327ca:	b29a      	uxth	r2, r3
   327cc:	68fb      	ldr	r3, [r7, #12]
   327ce:	801a      	strh	r2, [r3, #0]

	*count = 0;
   327d0:	687b      	ldr	r3, [r7, #4]
   327d2:	2200      	movs	r2, #0
   327d4:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   327d6:	e018      	b.n	3280a <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   327d8:	687b      	ldr	r3, [r7, #4]
   327da:	681a      	ldr	r2, [r3, #0]
   327dc:	68bb      	ldr	r3, [r7, #8]
   327de:	429a      	cmp	r2, r3
   327e0:	dd03      	ble.n	327ea <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   327e2:	2301      	movs	r3, #1
   327e4:	425b      	negs	r3, r3
   327e6:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   327e8:	e019      	b.n	3281e <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   327ea:	687b      	ldr	r3, [r7, #4]
   327ec:	681a      	ldr	r2, [r3, #0]
   327ee:	1c51      	adds	r1, r2, #1
   327f0:	687b      	ldr	r3, [r7, #4]
   327f2:	6019      	str	r1, [r3, #0]
   327f4:	0013      	movs	r3, r2
   327f6:	009b      	lsls	r3, r3, #2
   327f8:	683a      	ldr	r2, [r7, #0]
   327fa:	18d4      	adds	r4, r2, r3
   327fc:	2318      	movs	r3, #24
   327fe:	18fb      	adds	r3, r7, r3
   32800:	0018      	movs	r0, r3
   32802:	4b09      	ldr	r3, [pc, #36]	; (32828 <MQTTDeserialize_suback+0xd8>)
   32804:	4798      	blx	r3
   32806:	0003      	movs	r3, r0
   32808:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   3280a:	69ba      	ldr	r2, [r7, #24]
   3280c:	6a3b      	ldr	r3, [r7, #32]
   3280e:	429a      	cmp	r2, r3
   32810:	d3e2      	bcc.n	327d8 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   32812:	2301      	movs	r3, #1
   32814:	627b      	str	r3, [r7, #36]	; 0x24
   32816:	e002      	b.n	3281e <MQTTDeserialize_suback+0xce>
		goto exit;
   32818:	46c0      	nop			; (mov r8, r8)
   3281a:	e000      	b.n	3281e <MQTTDeserialize_suback+0xce>
		goto exit;
   3281c:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   32820:	0018      	movs	r0, r3
   32822:	46bd      	mov	sp, r7
   32824:	b00b      	add	sp, #44	; 0x2c
   32826:	bd90      	pop	{r4, r7, pc}
   32828:	00032067 	.word	0x00032067
   3282c:	00032001 	.word	0x00032001
   32830:	00032035 	.word	0x00032035

00032834 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   32834:	b580      	push	{r7, lr}
   32836:	b082      	sub	sp, #8
   32838:	af00      	add	r7, sp, #0
   3283a:	6078      	str	r0, [r7, #4]
	config->port = 80;
   3283c:	687b      	ldr	r3, [r7, #4]
   3283e:	2250      	movs	r2, #80	; 0x50
   32840:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   32842:	687b      	ldr	r3, [r7, #4]
   32844:	2200      	movs	r2, #0
   32846:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   32848:	687b      	ldr	r3, [r7, #4]
   3284a:	4a0b      	ldr	r2, [pc, #44]	; (32878 <http_client_get_config_defaults+0x44>)
   3284c:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   3284e:	687b      	ldr	r3, [r7, #4]
   32850:	2200      	movs	r2, #0
   32852:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   32854:	687b      	ldr	r3, [r7, #4]
   32856:	2200      	movs	r2, #0
   32858:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   3285a:	687b      	ldr	r3, [r7, #4]
   3285c:	2280      	movs	r2, #128	; 0x80
   3285e:	0052      	lsls	r2, r2, #1
   32860:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   32862:	687b      	ldr	r3, [r7, #4]
   32864:	2252      	movs	r2, #82	; 0x52
   32866:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   32868:	687b      	ldr	r3, [r7, #4]
   3286a:	4a04      	ldr	r2, [pc, #16]	; (3287c <http_client_get_config_defaults+0x48>)
   3286c:	619a      	str	r2, [r3, #24]
}
   3286e:	46c0      	nop			; (mov r8, r8)
   32870:	46bd      	mov	sp, r7
   32872:	b002      	add	sp, #8
   32874:	bd80      	pop	{r7, pc}
   32876:	46c0      	nop			; (mov r8, r8)
   32878:	00004e20 	.word	0x00004e20
   3287c:	0003c1b8 	.word	0x0003c1b8

00032880 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   32880:	b590      	push	{r4, r7, lr}
   32882:	b083      	sub	sp, #12
   32884:	af00      	add	r7, sp, #0
   32886:	6078      	str	r0, [r7, #4]
   32888:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   3288a:	687b      	ldr	r3, [r7, #4]
   3288c:	2b00      	cmp	r3, #0
   3288e:	d002      	beq.n	32896 <http_client_init+0x16>
   32890:	683b      	ldr	r3, [r7, #0]
   32892:	2b00      	cmp	r3, #0
   32894:	d102      	bne.n	3289c <http_client_init+0x1c>
		return -EINVAL;
   32896:	2316      	movs	r3, #22
   32898:	425b      	negs	r3, r3
   3289a:	e058      	b.n	3294e <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   3289c:	683b      	ldr	r3, [r7, #0]
   3289e:	691b      	ldr	r3, [r3, #16]
   328a0:	2b00      	cmp	r3, #0
   328a2:	d102      	bne.n	328aa <http_client_init+0x2a>
		return -EINVAL;
   328a4:	2316      	movs	r3, #22
   328a6:	425b      	negs	r3, r3
   328a8:	e051      	b.n	3294e <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   328aa:	683b      	ldr	r3, [r7, #0]
   328ac:	685b      	ldr	r3, [r3, #4]
   328ae:	2b00      	cmp	r3, #0
   328b0:	d102      	bne.n	328b8 <http_client_init+0x38>
		return -EINVAL;
   328b2:	2316      	movs	r3, #22
   328b4:	425b      	negs	r3, r3
   328b6:	e04a      	b.n	3294e <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   328b8:	683b      	ldr	r3, [r7, #0]
   328ba:	695b      	ldr	r3, [r3, #20]
   328bc:	2b51      	cmp	r3, #81	; 0x51
   328be:	d802      	bhi.n	328c6 <http_client_init+0x46>
		return -EINVAL;
   328c0:	2316      	movs	r3, #22
   328c2:	425b      	negs	r3, r3
   328c4:	e043      	b.n	3294e <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   328c6:	687b      	ldr	r3, [r7, #4]
   328c8:	22e8      	movs	r2, #232	; 0xe8
   328ca:	2100      	movs	r1, #0
   328cc:	0018      	movs	r0, r3
   328ce:	4b22      	ldr	r3, [pc, #136]	; (32958 <http_client_init+0xd8>)
   328d0:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   328d2:	687b      	ldr	r3, [r7, #4]
   328d4:	3350      	adds	r3, #80	; 0x50
   328d6:	6839      	ldr	r1, [r7, #0]
   328d8:	221c      	movs	r2, #28
   328da:	0018      	movs	r0, r3
   328dc:	4b1f      	ldr	r3, [pc, #124]	; (3295c <http_client_init+0xdc>)
   328de:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   328e0:	687b      	ldr	r3, [r7, #4]
   328e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   328e4:	2b00      	cmp	r3, #0
   328e6:	d115      	bne.n	32914 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   328e8:	683b      	ldr	r3, [r7, #0]
   328ea:	691b      	ldr	r3, [r3, #16]
   328ec:	0018      	movs	r0, r3
   328ee:	4b1c      	ldr	r3, [pc, #112]	; (32960 <http_client_init+0xe0>)
   328f0:	4798      	blx	r3
   328f2:	0003      	movs	r3, r0
   328f4:	001a      	movs	r2, r3
   328f6:	687b      	ldr	r3, [r7, #4]
   328f8:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   328fa:	687b      	ldr	r3, [r7, #4]
   328fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   328fe:	2b00      	cmp	r3, #0
   32900:	d102      	bne.n	32908 <http_client_init+0x88>
			return -ENOMEM;
   32902:	230c      	movs	r3, #12
   32904:	425b      	negs	r3, r3
   32906:	e022      	b.n	3294e <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   32908:	687b      	ldr	r3, [r7, #4]
   3290a:	2241      	movs	r2, #65	; 0x41
   3290c:	5c99      	ldrb	r1, [r3, r2]
   3290e:	2004      	movs	r0, #4
   32910:	4301      	orrs	r1, r0
   32912:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   32914:	683b      	ldr	r3, [r7, #0]
   32916:	891b      	ldrh	r3, [r3, #8]
   32918:	2b00      	cmp	r3, #0
   3291a:	d010      	beq.n	3293e <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   3291c:	683b      	ldr	r3, [r7, #0]
   3291e:	6858      	ldr	r0, [r3, #4]
   32920:	687a      	ldr	r2, [r7, #4]
   32922:	4910      	ldr	r1, [pc, #64]	; (32964 <http_client_init+0xe4>)
   32924:	2300      	movs	r3, #0
   32926:	4c10      	ldr	r4, [pc, #64]	; (32968 <http_client_init+0xe8>)
   32928:	47a0      	blx	r4
   3292a:	0002      	movs	r2, r0
   3292c:	687b      	ldr	r3, [r7, #4]
   3292e:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   32930:	687b      	ldr	r3, [r7, #4]
   32932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   32934:	2b00      	cmp	r3, #0
   32936:	da02      	bge.n	3293e <http_client_init+0xbe>
			return -ENOSPC;
   32938:	231c      	movs	r3, #28
   3293a:	425b      	negs	r3, r3
   3293c:	e007      	b.n	3294e <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   3293e:	687b      	ldr	r3, [r7, #4]
   32940:	2200      	movs	r2, #0
   32942:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   32944:	687b      	ldr	r3, [r7, #4]
   32946:	22d8      	movs	r2, #216	; 0xd8
   32948:	2100      	movs	r1, #0
   3294a:	5099      	str	r1, [r3, r2]

	return 0;
   3294c:	2300      	movs	r3, #0
}
   3294e:	0018      	movs	r0, r3
   32950:	46bd      	mov	sp, r7
   32952:	b003      	add	sp, #12
   32954:	bd90      	pop	{r4, r7, pc}
   32956:	46c0      	nop			; (mov r8, r8)
   32958:	00036c9f 	.word	0x00036c9f
   3295c:	00036c69 	.word	0x00036c69
   32960:	00036c41 	.word	0x00036c41
   32964:	00032c31 	.word	0x00032c31
   32968:	000342d5 	.word	0x000342d5

0003296c <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   3296c:	b580      	push	{r7, lr}
   3296e:	b082      	sub	sp, #8
   32970:	af00      	add	r7, sp, #0
   32972:	6078      	str	r0, [r7, #4]
   32974:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   32976:	687b      	ldr	r3, [r7, #4]
   32978:	2b00      	cmp	r3, #0
   3297a:	d102      	bne.n	32982 <http_client_register_callback+0x16>
		return -EINVAL;
   3297c:	2316      	movs	r3, #22
   3297e:	425b      	negs	r3, r3
   32980:	e003      	b.n	3298a <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   32982:	687b      	ldr	r3, [r7, #4]
   32984:	683a      	ldr	r2, [r7, #0]
   32986:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   32988:	2300      	movs	r3, #0
}
   3298a:	0018      	movs	r0, r3
   3298c:	46bd      	mov	sp, r7
   3298e:	b002      	add	sp, #8
   32990:	bd80      	pop	{r7, pc}
	...

00032994 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   32994:	b580      	push	{r7, lr}
   32996:	b082      	sub	sp, #8
   32998:	af00      	add	r7, sp, #0
   3299a:	6078      	str	r0, [r7, #4]
	switch (err) {
   3299c:	687b      	ldr	r3, [r7, #4]
   3299e:	330e      	adds	r3, #14
   329a0:	2b0e      	cmp	r3, #14
   329a2:	d825      	bhi.n	329f0 <_hwerr_to_stderr+0x5c>
   329a4:	009a      	lsls	r2, r3, #2
   329a6:	4b18      	ldr	r3, [pc, #96]	; (32a08 <_hwerr_to_stderr+0x74>)
   329a8:	18d3      	adds	r3, r2, r3
   329aa:	681b      	ldr	r3, [r3, #0]
   329ac:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   329ae:	2305      	movs	r3, #5
   329b0:	425b      	negs	r3, r3
   329b2:	e024      	b.n	329fe <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   329b4:	2302      	movs	r3, #2
   329b6:	425b      	negs	r3, r3
   329b8:	e021      	b.n	329fe <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   329ba:	2370      	movs	r3, #112	; 0x70
   329bc:	425b      	negs	r3, r3
   329be:	e01e      	b.n	329fe <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   329c0:	230c      	movs	r3, #12
   329c2:	425b      	negs	r3, r3
   329c4:	e01b      	b.n	329fe <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   329c6:	2316      	movs	r3, #22
   329c8:	425b      	negs	r3, r3
   329ca:	e018      	b.n	329fe <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   329cc:	230c      	movs	r3, #12
   329ce:	425b      	negs	r3, r3
   329d0:	e015      	b.n	329fe <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   329d2:	2305      	movs	r3, #5
   329d4:	425b      	negs	r3, r3
   329d6:	e012      	b.n	329fe <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   329d8:	2379      	movs	r3, #121	; 0x79
   329da:	425b      	negs	r3, r3
   329dc:	e00f      	b.n	329fe <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   329de:	2368      	movs	r3, #104	; 0x68
   329e0:	425b      	negs	r3, r3
   329e2:	e00c      	b.n	329fe <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   329e4:	230b      	movs	r3, #11
   329e6:	425b      	negs	r3, r3
   329e8:	e009      	b.n	329fe <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   329ea:	2310      	movs	r3, #16
   329ec:	425b      	negs	r3, r3
   329ee:	e006      	b.n	329fe <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   329f0:	687b      	ldr	r3, [r7, #4]
   329f2:	2b00      	cmp	r3, #0
   329f4:	da02      	bge.n	329fc <_hwerr_to_stderr+0x68>
				return -EIO;
   329f6:	2305      	movs	r3, #5
   329f8:	425b      	negs	r3, r3
   329fa:	e000      	b.n	329fe <_hwerr_to_stderr+0x6a>
			}
			return 0;
   329fc:	2300      	movs	r3, #0
	}
}
   329fe:	0018      	movs	r0, r3
   32a00:	46bd      	mov	sp, r7
   32a02:	b002      	add	sp, #8
   32a04:	bd80      	pop	{r7, pc}
   32a06:	46c0      	nop			; (mov r8, r8)
   32a08:	0003c2f4 	.word	0x0003c2f4

00032a0c <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   32a0c:	b580      	push	{r7, lr}
   32a0e:	b08a      	sub	sp, #40	; 0x28
   32a10:	af00      	add	r7, sp, #0
   32a12:	603a      	str	r2, [r7, #0]
   32a14:	1dfb      	adds	r3, r7, #7
   32a16:	1c02      	adds	r2, r0, #0
   32a18:	701a      	strb	r2, [r3, #0]
   32a1a:	1dbb      	adds	r3, r7, #6
   32a1c:	1c0a      	adds	r2, r1, #0
   32a1e:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   32a20:	1dfb      	adds	r3, r7, #7
   32a22:	2200      	movs	r2, #0
   32a24:	569a      	ldrsb	r2, [r3, r2]
   32a26:	4b4b      	ldr	r3, [pc, #300]	; (32b54 <http_client_socket_event_handler+0x148>)
   32a28:	0092      	lsls	r2, r2, #2
   32a2a:	58d3      	ldr	r3, [r2, r3]
   32a2c:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   32a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a30:	2b00      	cmp	r3, #0
   32a32:	d100      	bne.n	32a36 <http_client_socket_event_handler+0x2a>
   32a34:	e08a      	b.n	32b4c <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   32a36:	1dbb      	adds	r3, r7, #6
   32a38:	781b      	ldrb	r3, [r3, #0]
   32a3a:	2b06      	cmp	r3, #6
   32a3c:	d040      	beq.n	32ac0 <http_client_socket_event_handler+0xb4>
   32a3e:	2b07      	cmp	r3, #7
   32a40:	d060      	beq.n	32b04 <http_client_socket_event_handler+0xf8>
   32a42:	2b05      	cmp	r3, #5
   32a44:	d000      	beq.n	32a48 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   32a46:	e082      	b.n	32b4e <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   32a48:	683b      	ldr	r3, [r7, #0]
   32a4a:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   32a4c:	6a3b      	ldr	r3, [r7, #32]
   32a4e:	785b      	ldrb	r3, [r3, #1]
   32a50:	b25b      	sxtb	r3, r3
   32a52:	001a      	movs	r2, r3
   32a54:	230c      	movs	r3, #12
   32a56:	18fb      	adds	r3, r7, r3
   32a58:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   32a5a:	6a3b      	ldr	r3, [r7, #32]
   32a5c:	785b      	ldrb	r3, [r3, #1]
   32a5e:	b25b      	sxtb	r3, r3
   32a60:	2b00      	cmp	r3, #0
   32a62:	da0c      	bge.n	32a7e <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   32a64:	6a3b      	ldr	r3, [r7, #32]
   32a66:	785b      	ldrb	r3, [r3, #1]
   32a68:	b25b      	sxtb	r3, r3
   32a6a:	0018      	movs	r0, r3
   32a6c:	4b3a      	ldr	r3, [pc, #232]	; (32b58 <http_client_socket_event_handler+0x14c>)
   32a6e:	4798      	blx	r3
   32a70:	0002      	movs	r2, r0
   32a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a74:	0011      	movs	r1, r2
   32a76:	0018      	movs	r0, r3
   32a78:	4b38      	ldr	r3, [pc, #224]	; (32b5c <http_client_socket_event_handler+0x150>)
   32a7a:	4798      	blx	r3
    	break;
   32a7c:	e067      	b.n	32b4e <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   32a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32a82:	2b00      	cmp	r3, #0
   32a84:	d006      	beq.n	32a94 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   32a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32a8a:	220c      	movs	r2, #12
   32a8c:	18ba      	adds	r2, r7, r2
   32a8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
   32a90:	2100      	movs	r1, #0
   32a92:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   32a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a96:	2203      	movs	r2, #3
   32a98:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   32a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a9c:	6d58      	ldr	r0, [r3, #84]	; 0x54
   32a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32aa0:	6c99      	ldr	r1, [r3, #72]	; 0x48
   32aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32aa4:	2258      	movs	r2, #88	; 0x58
   32aa6:	5a9b      	ldrh	r3, [r3, r2]
   32aa8:	001a      	movs	r2, r3
   32aaa:	4b2d      	ldr	r3, [pc, #180]	; (32b60 <http_client_socket_event_handler+0x154>)
   32aac:	4798      	blx	r3
    		_http_client_recv_packet(module);
   32aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32ab0:	0018      	movs	r0, r3
   32ab2:	4b2c      	ldr	r3, [pc, #176]	; (32b64 <http_client_socket_event_handler+0x158>)
   32ab4:	4798      	blx	r3
			_http_client_request(module);
   32ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32ab8:	0018      	movs	r0, r3
   32aba:	4b2b      	ldr	r3, [pc, #172]	; (32b68 <http_client_socket_event_handler+0x15c>)
   32abc:	4798      	blx	r3
    	break;
   32abe:	e046      	b.n	32b4e <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   32ac0:	683b      	ldr	r3, [r7, #0]
   32ac2:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   32ac4:	69fb      	ldr	r3, [r7, #28]
   32ac6:	2204      	movs	r2, #4
   32ac8:	5e9b      	ldrsh	r3, [r3, r2]
   32aca:	2b00      	cmp	r3, #0
   32acc:	dd09      	ble.n	32ae2 <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   32ace:	69fb      	ldr	r3, [r7, #28]
   32ad0:	2204      	movs	r2, #4
   32ad2:	5e9b      	ldrsh	r3, [r3, r2]
   32ad4:	001a      	movs	r2, r3
   32ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32ad8:	0011      	movs	r1, r2
   32ada:	0018      	movs	r0, r3
   32adc:	4b23      	ldr	r3, [pc, #140]	; (32b6c <http_client_socket_event_handler+0x160>)
   32ade:	4798      	blx	r3
   32ae0:	e00b      	b.n	32afa <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   32ae2:	69fb      	ldr	r3, [r7, #28]
   32ae4:	2204      	movs	r2, #4
   32ae6:	5e9b      	ldrsh	r3, [r3, r2]
   32ae8:	0018      	movs	r0, r3
   32aea:	4b1b      	ldr	r3, [pc, #108]	; (32b58 <http_client_socket_event_handler+0x14c>)
   32aec:	4798      	blx	r3
   32aee:	0002      	movs	r2, r0
   32af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32af2:	0011      	movs	r1, r2
   32af4:	0018      	movs	r0, r3
   32af6:	4b19      	ldr	r3, [pc, #100]	; (32b5c <http_client_socket_event_handler+0x150>)
   32af8:	4798      	blx	r3
		_http_client_recv_packet(module);
   32afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32afc:	0018      	movs	r0, r3
   32afe:	4b19      	ldr	r3, [pc, #100]	; (32b64 <http_client_socket_event_handler+0x158>)
   32b00:	4798      	blx	r3
		break;
   32b02:	e024      	b.n	32b4e <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   32b04:	231a      	movs	r3, #26
   32b06:	18fb      	adds	r3, r7, r3
   32b08:	683a      	ldr	r2, [r7, #0]
   32b0a:	8812      	ldrh	r2, [r2, #0]
   32b0c:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   32b0e:	231a      	movs	r3, #26
   32b10:	18fb      	adds	r3, r7, r3
   32b12:	2200      	movs	r2, #0
   32b14:	5e9b      	ldrsh	r3, [r3, r2]
   32b16:	2b00      	cmp	r3, #0
   32b18:	da0d      	bge.n	32b36 <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   32b1a:	231a      	movs	r3, #26
   32b1c:	18fb      	adds	r3, r7, r3
   32b1e:	2200      	movs	r2, #0
   32b20:	5e9b      	ldrsh	r3, [r3, r2]
   32b22:	0018      	movs	r0, r3
   32b24:	4b0c      	ldr	r3, [pc, #48]	; (32b58 <http_client_socket_event_handler+0x14c>)
   32b26:	4798      	blx	r3
   32b28:	0002      	movs	r2, r0
   32b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32b2c:	0011      	movs	r1, r2
   32b2e:	0018      	movs	r0, r3
   32b30:	4b0a      	ldr	r3, [pc, #40]	; (32b5c <http_client_socket_event_handler+0x150>)
   32b32:	4798      	blx	r3
   32b34:	e003      	b.n	32b3e <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   32b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32b38:	0018      	movs	r0, r3
   32b3a:	4b0b      	ldr	r3, [pc, #44]	; (32b68 <http_client_socket_event_handler+0x15c>)
   32b3c:	4798      	blx	r3
		module->sending = 0;
   32b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32b40:	2241      	movs	r2, #65	; 0x41
   32b42:	5c99      	ldrb	r1, [r3, r2]
   32b44:	2001      	movs	r0, #1
   32b46:	4381      	bics	r1, r0
   32b48:	5499      	strb	r1, [r3, r2]
    	break;
   32b4a:	e000      	b.n	32b4e <http_client_socket_event_handler+0x142>
		return;
   32b4c:	46c0      	nop			; (mov r8, r8)
	}

}
   32b4e:	46bd      	mov	sp, r7
   32b50:	b00a      	add	sp, #40	; 0x28
   32b52:	bd80      	pop	{r7, pc}
   32b54:	20004310 	.word	0x20004310
   32b58:	00032995 	.word	0x00032995
   32b5c:	00033009 	.word	0x00033009
   32b60:	00034365 	.word	0x00034365
   32b64:	00033895 	.word	0x00033895
   32b68:	0003315d 	.word	0x0003315d
   32b6c:	000338f9 	.word	0x000338f9

00032b70 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   32b70:	b580      	push	{r7, lr}
   32b72:	b088      	sub	sp, #32
   32b74:	af00      	add	r7, sp, #0
   32b76:	6078      	str	r0, [r7, #4]
   32b78:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   32b7a:	2300      	movs	r3, #0
   32b7c:	61fb      	str	r3, [r7, #28]
   32b7e:	e048      	b.n	32c12 <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   32b80:	4b27      	ldr	r3, [pc, #156]	; (32c20 <http_client_socket_resolve_handler+0xb0>)
   32b82:	69fa      	ldr	r2, [r7, #28]
   32b84:	0092      	lsls	r2, r2, #2
   32b86:	58d3      	ldr	r3, [r2, r3]
   32b88:	2b00      	cmp	r3, #0
   32b8a:	d03f      	beq.n	32c0c <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   32b8c:	4b24      	ldr	r3, [pc, #144]	; (32c20 <http_client_socket_resolve_handler+0xb0>)
   32b8e:	69fa      	ldr	r2, [r7, #28]
   32b90:	0092      	lsls	r2, r2, #2
   32b92:	58d3      	ldr	r3, [r2, r3]
   32b94:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   32b96:	69bb      	ldr	r3, [r7, #24]
   32b98:	1c5a      	adds	r2, r3, #1
   32b9a:	687b      	ldr	r3, [r7, #4]
   32b9c:	0011      	movs	r1, r2
   32b9e:	0018      	movs	r0, r3
   32ba0:	4b20      	ldr	r3, [pc, #128]	; (32c24 <http_client_socket_resolve_handler+0xb4>)
   32ba2:	4798      	blx	r3
   32ba4:	1e03      	subs	r3, r0, #0
   32ba6:	d131      	bne.n	32c0c <http_client_socket_resolve_handler+0x9c>
   32ba8:	69bb      	ldr	r3, [r7, #24]
   32baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   32bac:	2b01      	cmp	r3, #1
   32bae:	d12d      	bne.n	32c0c <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   32bb0:	683b      	ldr	r3, [r7, #0]
   32bb2:	2b00      	cmp	r3, #0
   32bb4:	d107      	bne.n	32bc6 <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   32bb6:	2376      	movs	r3, #118	; 0x76
   32bb8:	425a      	negs	r2, r3
   32bba:	69bb      	ldr	r3, [r7, #24]
   32bbc:	0011      	movs	r1, r2
   32bbe:	0018      	movs	r0, r3
   32bc0:	4b19      	ldr	r3, [pc, #100]	; (32c28 <http_client_socket_resolve_handler+0xb8>)
   32bc2:	4798      	blx	r3
					return;
   32bc4:	e028      	b.n	32c18 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   32bc6:	2308      	movs	r3, #8
   32bc8:	18fb      	adds	r3, r7, r3
   32bca:	2202      	movs	r2, #2
   32bcc:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   32bce:	69bb      	ldr	r3, [r7, #24]
   32bd0:	2250      	movs	r2, #80	; 0x50
   32bd2:	5a9b      	ldrh	r3, [r3, r2]
   32bd4:	021b      	lsls	r3, r3, #8
   32bd6:	b21a      	sxth	r2, r3
   32bd8:	69bb      	ldr	r3, [r7, #24]
   32bda:	2150      	movs	r1, #80	; 0x50
   32bdc:	5a5b      	ldrh	r3, [r3, r1]
   32bde:	0a1b      	lsrs	r3, r3, #8
   32be0:	b29b      	uxth	r3, r3
   32be2:	b21b      	sxth	r3, r3
   32be4:	4313      	orrs	r3, r2
   32be6:	b21b      	sxth	r3, r3
   32be8:	b29a      	uxth	r2, r3
   32bea:	2308      	movs	r3, #8
   32bec:	18fb      	adds	r3, r7, r3
   32bee:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   32bf0:	2308      	movs	r3, #8
   32bf2:	18fb      	adds	r3, r7, r3
   32bf4:	683a      	ldr	r2, [r7, #0]
   32bf6:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   32bf8:	69bb      	ldr	r3, [r7, #24]
   32bfa:	781b      	ldrb	r3, [r3, #0]
   32bfc:	b25b      	sxtb	r3, r3
   32bfe:	2208      	movs	r2, #8
   32c00:	18b9      	adds	r1, r7, r2
   32c02:	2210      	movs	r2, #16
   32c04:	0018      	movs	r0, r3
   32c06:	4b09      	ldr	r3, [pc, #36]	; (32c2c <http_client_socket_resolve_handler+0xbc>)
   32c08:	4798      	blx	r3
				return;
   32c0a:	e005      	b.n	32c18 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   32c0c:	69fb      	ldr	r3, [r7, #28]
   32c0e:	3301      	adds	r3, #1
   32c10:	61fb      	str	r3, [r7, #28]
   32c12:	69fb      	ldr	r3, [r7, #28]
   32c14:	2b06      	cmp	r3, #6
   32c16:	ddb3      	ble.n	32b80 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   32c18:	46bd      	mov	sp, r7
   32c1a:	b008      	add	sp, #32
   32c1c:	bd80      	pop	{r7, pc}
   32c1e:	46c0      	nop			; (mov r8, r8)
   32c20:	20004310 	.word	0x20004310
   32c24:	00036ff7 	.word	0x00036ff7
   32c28:	00033009 	.word	0x00033009
   32c2c:	00027529 	.word	0x00027529

00032c30 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   32c30:	b580      	push	{r7, lr}
   32c32:	b086      	sub	sp, #24
   32c34:	af00      	add	r7, sp, #0
   32c36:	60f8      	str	r0, [r7, #12]
   32c38:	60b9      	str	r1, [r7, #8]
   32c3a:	607a      	str	r2, [r7, #4]
   32c3c:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   32c3e:	687b      	ldr	r3, [r7, #4]
   32c40:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   32c42:	697b      	ldr	r3, [r7, #20]
   32c44:	2b00      	cmp	r3, #0
   32c46:	d007      	beq.n	32c58 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   32c48:	233e      	movs	r3, #62	; 0x3e
   32c4a:	425a      	negs	r2, r3
   32c4c:	697b      	ldr	r3, [r7, #20]
   32c4e:	0011      	movs	r1, r2
   32c50:	0018      	movs	r0, r3
   32c52:	4b03      	ldr	r3, [pc, #12]	; (32c60 <http_client_timer_callback+0x30>)
   32c54:	4798      	blx	r3
   32c56:	e000      	b.n	32c5a <http_client_timer_callback+0x2a>
		return;
   32c58:	46c0      	nop			; (mov r8, r8)
}
   32c5a:	46bd      	mov	sp, r7
   32c5c:	b006      	add	sp, #24
   32c5e:	bd80      	pop	{r7, pc}
   32c60:	00033009 	.word	0x00033009

00032c64 <_is_ip>:

static int _is_ip(const char *host)
{
   32c64:	b580      	push	{r7, lr}
   32c66:	b084      	sub	sp, #16
   32c68:	af00      	add	r7, sp, #0
   32c6a:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   32c6c:	2300      	movs	r3, #0
   32c6e:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   32c70:	e03a      	b.n	32ce8 <_is_ip+0x84>
		ch = *host++;
   32c72:	687b      	ldr	r3, [r7, #4]
   32c74:	1c5a      	adds	r2, r3, #1
   32c76:	607a      	str	r2, [r7, #4]
   32c78:	220b      	movs	r2, #11
   32c7a:	18ba      	adds	r2, r7, r2
   32c7c:	781b      	ldrb	r3, [r3, #0]
   32c7e:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   32c80:	230b      	movs	r3, #11
   32c82:	18fb      	adds	r3, r7, r3
   32c84:	781b      	ldrb	r3, [r3, #0]
   32c86:	2b60      	cmp	r3, #96	; 0x60
   32c88:	d904      	bls.n	32c94 <_is_ip+0x30>
   32c8a:	230b      	movs	r3, #11
   32c8c:	18fb      	adds	r3, r7, r3
   32c8e:	781b      	ldrb	r3, [r3, #0]
   32c90:	2b66      	cmp	r3, #102	; 0x66
   32c92:	d913      	bls.n	32cbc <_is_ip+0x58>
   32c94:	230b      	movs	r3, #11
   32c96:	18fb      	adds	r3, r7, r3
   32c98:	781b      	ldrb	r3, [r3, #0]
   32c9a:	2b40      	cmp	r3, #64	; 0x40
   32c9c:	d904      	bls.n	32ca8 <_is_ip+0x44>
   32c9e:	230b      	movs	r3, #11
   32ca0:	18fb      	adds	r3, r7, r3
   32ca2:	781b      	ldrb	r3, [r3, #0]
   32ca4:	2b46      	cmp	r3, #70	; 0x46
   32ca6:	d909      	bls.n	32cbc <_is_ip+0x58>
   32ca8:	230b      	movs	r3, #11
   32caa:	18fb      	adds	r3, r7, r3
   32cac:	781b      	ldrb	r3, [r3, #0]
   32cae:	2b3a      	cmp	r3, #58	; 0x3a
   32cb0:	d004      	beq.n	32cbc <_is_ip+0x58>
   32cb2:	230b      	movs	r3, #11
   32cb4:	18fb      	adds	r3, r7, r3
   32cb6:	781b      	ldrb	r3, [r3, #0]
   32cb8:	2b2f      	cmp	r3, #47	; 0x2f
   32cba:	d102      	bne.n	32cc2 <_is_ip+0x5e>
			isv6 = 1;
   32cbc:	2301      	movs	r3, #1
   32cbe:	60fb      	str	r3, [r7, #12]
   32cc0:	e012      	b.n	32ce8 <_is_ip+0x84>
		} else if (ch == '.') {
   32cc2:	230b      	movs	r3, #11
   32cc4:	18fb      	adds	r3, r7, r3
   32cc6:	781b      	ldrb	r3, [r3, #0]
   32cc8:	2b2e      	cmp	r3, #46	; 0x2e
   32cca:	d104      	bne.n	32cd6 <_is_ip+0x72>
			if (isv6) {
   32ccc:	68fb      	ldr	r3, [r7, #12]
   32cce:	2b00      	cmp	r3, #0
   32cd0:	d00a      	beq.n	32ce8 <_is_ip+0x84>
				return 0;
   32cd2:	2300      	movs	r3, #0
   32cd4:	e00d      	b.n	32cf2 <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   32cd6:	230b      	movs	r3, #11
   32cd8:	18fb      	adds	r3, r7, r3
   32cda:	781b      	ldrb	r3, [r3, #0]
   32cdc:	2230      	movs	r2, #48	; 0x30
   32cde:	4013      	ands	r3, r2
   32ce0:	2b30      	cmp	r3, #48	; 0x30
   32ce2:	d001      	beq.n	32ce8 <_is_ip+0x84>
			return 0;
   32ce4:	2300      	movs	r3, #0
   32ce6:	e004      	b.n	32cf2 <_is_ip+0x8e>
	while (*host != '\0') {
   32ce8:	687b      	ldr	r3, [r7, #4]
   32cea:	781b      	ldrb	r3, [r3, #0]
   32cec:	2b00      	cmp	r3, #0
   32cee:	d1c0      	bne.n	32c72 <_is_ip+0xe>
		}
	}
	return 1;
   32cf0:	2301      	movs	r3, #1
}
   32cf2:	0018      	movs	r0, r3
   32cf4:	46bd      	mov	sp, r7
   32cf6:	b004      	add	sp, #16
   32cf8:	bd80      	pop	{r7, pc}
	...

00032cfc <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   32cfc:	b5b0      	push	{r4, r5, r7, lr}
   32cfe:	b08e      	sub	sp, #56	; 0x38
   32d00:	af00      	add	r7, sp, #0
   32d02:	60f8      	str	r0, [r7, #12]
   32d04:	60b9      	str	r1, [r7, #8]
   32d06:	603b      	str	r3, [r7, #0]
   32d08:	1dfb      	adds	r3, r7, #7
   32d0a:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   32d0c:	2337      	movs	r3, #55	; 0x37
   32d0e:	18fb      	adds	r3, r7, r3
   32d10:	2200      	movs	r2, #0
   32d12:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   32d14:	2300      	movs	r3, #0
   32d16:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   32d18:	2300      	movs	r3, #0
   32d1a:	633b      	str	r3, [r7, #48]	; 0x30
   32d1c:	2300      	movs	r3, #0
   32d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   32d20:	2300      	movs	r3, #0
   32d22:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   32d24:	68fb      	ldr	r3, [r7, #12]
   32d26:	2b00      	cmp	r3, #0
   32d28:	d102      	bne.n	32d30 <http_client_send_request+0x34>
		return -EINVAL;
   32d2a:	2316      	movs	r3, #22
   32d2c:	425b      	negs	r3, r3
   32d2e:	e145      	b.n	32fbc <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   32d30:	68fb      	ldr	r3, [r7, #12]
   32d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   32d34:	2b02      	cmp	r3, #2
   32d36:	d902      	bls.n	32d3e <http_client_send_request+0x42>
		return -EBUSY;
   32d38:	2310      	movs	r3, #16
   32d3a:	425b      	negs	r3, r3
   32d3c:	e13e      	b.n	32fbc <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   32d3e:	49a1      	ldr	r1, [pc, #644]	; (32fc4 <http_client_send_request+0x2c8>)
   32d40:	68bb      	ldr	r3, [r7, #8]
   32d42:	2207      	movs	r2, #7
   32d44:	0018      	movs	r0, r3
   32d46:	4ba0      	ldr	r3, [pc, #640]	; (32fc8 <http_client_send_request+0x2cc>)
   32d48:	4798      	blx	r3
   32d4a:	1e03      	subs	r3, r0, #0
   32d4c:	d102      	bne.n	32d54 <http_client_send_request+0x58>
		i = 7;
   32d4e:	2307      	movs	r3, #7
   32d50:	633b      	str	r3, [r7, #48]	; 0x30
   32d52:	e009      	b.n	32d68 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   32d54:	499d      	ldr	r1, [pc, #628]	; (32fcc <http_client_send_request+0x2d0>)
   32d56:	68bb      	ldr	r3, [r7, #8]
   32d58:	2208      	movs	r2, #8
   32d5a:	0018      	movs	r0, r3
   32d5c:	4b9a      	ldr	r3, [pc, #616]	; (32fc8 <http_client_send_request+0x2cc>)
   32d5e:	4798      	blx	r3
   32d60:	1e03      	subs	r3, r0, #0
   32d62:	d101      	bne.n	32d68 <http_client_send_request+0x6c>
		i = 8;
   32d64:	2308      	movs	r3, #8
   32d66:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   32d68:	68fb      	ldr	r3, [r7, #12]
   32d6a:	1c5c      	adds	r4, r3, #1
   32d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   32d6e:	68ba      	ldr	r2, [r7, #8]
   32d70:	18d5      	adds	r5, r2, r3
   32d72:	68fb      	ldr	r3, [r7, #12]
   32d74:	3301      	adds	r3, #1
   32d76:	0018      	movs	r0, r3
   32d78:	4b95      	ldr	r3, [pc, #596]	; (32fd0 <http_client_send_request+0x2d4>)
   32d7a:	4798      	blx	r3
   32d7c:	0003      	movs	r3, r0
   32d7e:	001a      	movs	r2, r3
   32d80:	0029      	movs	r1, r5
   32d82:	0020      	movs	r0, r4
   32d84:	4b90      	ldr	r3, [pc, #576]	; (32fc8 <http_client_send_request+0x2cc>)
   32d86:	4798      	blx	r3
   32d88:	0003      	movs	r3, r0
   32d8a:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   32d8c:	e00d      	b.n	32daa <http_client_send_request+0xae>
		module->host[j++] = url[i];
   32d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   32d90:	1c5a      	adds	r2, r3, #1
   32d92:	62fa      	str	r2, [r7, #44]	; 0x2c
   32d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   32d96:	68b9      	ldr	r1, [r7, #8]
   32d98:	188a      	adds	r2, r1, r2
   32d9a:	7811      	ldrb	r1, [r2, #0]
   32d9c:	68fa      	ldr	r2, [r7, #12]
   32d9e:	18d3      	adds	r3, r2, r3
   32da0:	1c0a      	adds	r2, r1, #0
   32da2:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   32da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   32da6:	3301      	adds	r3, #1
   32da8:	633b      	str	r3, [r7, #48]	; 0x30
   32daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   32dac:	68ba      	ldr	r2, [r7, #8]
   32dae:	18d3      	adds	r3, r2, r3
   32db0:	781b      	ldrb	r3, [r3, #0]
   32db2:	2b00      	cmp	r3, #0
   32db4:	d005      	beq.n	32dc2 <http_client_send_request+0xc6>
   32db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   32db8:	68ba      	ldr	r2, [r7, #8]
   32dba:	18d3      	adds	r3, r2, r3
   32dbc:	781b      	ldrb	r3, [r3, #0]
   32dbe:	2b2f      	cmp	r3, #47	; 0x2f
   32dc0:	d1e5      	bne.n	32d8e <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   32dc2:	68fa      	ldr	r2, [r7, #12]
   32dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   32dc6:	18d3      	adds	r3, r2, r3
   32dc8:	3301      	adds	r3, #1
   32dca:	2200      	movs	r2, #0
   32dcc:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   32dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   32dd0:	68ba      	ldr	r2, [r7, #8]
   32dd2:	18d3      	adds	r3, r2, r3
   32dd4:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   32dd6:	68fb      	ldr	r3, [r7, #12]
   32dd8:	3301      	adds	r3, #1
   32dda:	781b      	ldrb	r3, [r3, #0]
   32ddc:	2b00      	cmp	r3, #0
   32dde:	d102      	bne.n	32de6 <http_client_send_request+0xea>
		return -EINVAL;
   32de0:	2316      	movs	r3, #22
   32de2:	425b      	negs	r3, r3
   32de4:	e0ea      	b.n	32fbc <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   32de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   32de8:	0018      	movs	r0, r3
   32dea:	4b79      	ldr	r3, [pc, #484]	; (32fd0 <http_client_send_request+0x2d4>)
   32dec:	4798      	blx	r3
   32dee:	0003      	movs	r3, r0
   32df0:	2b3f      	cmp	r3, #63	; 0x3f
   32df2:	d902      	bls.n	32dfa <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   32df4:	235b      	movs	r3, #91	; 0x5b
   32df6:	425b      	negs	r3, r3
   32df8:	e0e0      	b.n	32fbc <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   32dfa:	68fb      	ldr	r3, [r7, #12]
   32dfc:	22d4      	movs	r2, #212	; 0xd4
   32dfe:	589b      	ldr	r3, [r3, r2]
   32e00:	2b00      	cmp	r3, #0
   32e02:	d005      	beq.n	32e10 <http_client_send_request+0x114>
		free(module->req.ext_header);
   32e04:	68fb      	ldr	r3, [r7, #12]
   32e06:	22d4      	movs	r2, #212	; 0xd4
   32e08:	589b      	ldr	r3, [r3, r2]
   32e0a:	0018      	movs	r0, r3
   32e0c:	4b71      	ldr	r3, [pc, #452]	; (32fd4 <http_client_send_request+0x2d8>)
   32e0e:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   32e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   32e12:	2b00      	cmp	r3, #0
   32e14:	d010      	beq.n	32e38 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   32e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   32e18:	0018      	movs	r0, r3
   32e1a:	4b6f      	ldr	r3, [pc, #444]	; (32fd8 <http_client_send_request+0x2dc>)
   32e1c:	4798      	blx	r3
   32e1e:	0003      	movs	r3, r0
   32e20:	0019      	movs	r1, r3
   32e22:	68fb      	ldr	r3, [r7, #12]
   32e24:	22d4      	movs	r2, #212	; 0xd4
   32e26:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   32e28:	68fb      	ldr	r3, [r7, #12]
   32e2a:	22d4      	movs	r2, #212	; 0xd4
   32e2c:	589b      	ldr	r3, [r3, r2]
   32e2e:	2b00      	cmp	r3, #0
   32e30:	d106      	bne.n	32e40 <http_client_send_request+0x144>
			return -ENOMEM;
   32e32:	230c      	movs	r3, #12
   32e34:	425b      	negs	r3, r3
   32e36:	e0c1      	b.n	32fbc <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   32e38:	68fb      	ldr	r3, [r7, #12]
   32e3a:	22d4      	movs	r2, #212	; 0xd4
   32e3c:	2100      	movs	r1, #0
   32e3e:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   32e40:	68fb      	ldr	r3, [r7, #12]
   32e42:	2241      	movs	r2, #65	; 0x41
   32e44:	5c99      	ldrb	r1, [r3, r2]
   32e46:	2001      	movs	r0, #1
   32e48:	4381      	bics	r1, r0
   32e4a:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   32e4c:	68fb      	ldr	r3, [r7, #12]
   32e4e:	2200      	movs	r2, #0
   32e50:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   32e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   32e54:	781b      	ldrb	r3, [r3, #0]
   32e56:	2b2f      	cmp	r3, #47	; 0x2f
   32e58:	d107      	bne.n	32e6a <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   32e5a:	68fb      	ldr	r3, [r7, #12]
   32e5c:	3370      	adds	r3, #112	; 0x70
   32e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   32e60:	0011      	movs	r1, r2
   32e62:	0018      	movs	r0, r3
   32e64:	4b5d      	ldr	r3, [pc, #372]	; (32fdc <http_client_send_request+0x2e0>)
   32e66:	4798      	blx	r3
   32e68:	e00f      	b.n	32e8a <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   32e6a:	68fb      	ldr	r3, [r7, #12]
   32e6c:	2270      	movs	r2, #112	; 0x70
   32e6e:	212f      	movs	r1, #47	; 0x2f
   32e70:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   32e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
   32e74:	781b      	ldrb	r3, [r3, #0]
   32e76:	2b00      	cmp	r3, #0
   32e78:	d007      	beq.n	32e8a <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   32e7a:	68fb      	ldr	r3, [r7, #12]
   32e7c:	3370      	adds	r3, #112	; 0x70
   32e7e:	3301      	adds	r3, #1
   32e80:	6aba      	ldr	r2, [r7, #40]	; 0x28
   32e82:	0011      	movs	r1, r2
   32e84:	0018      	movs	r0, r3
   32e86:	4b55      	ldr	r3, [pc, #340]	; (32fdc <http_client_send_request+0x2e0>)
   32e88:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   32e8a:	683b      	ldr	r3, [r7, #0]
   32e8c:	2b00      	cmp	r3, #0
   32e8e:	d007      	beq.n	32ea0 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   32e90:	68fb      	ldr	r3, [r7, #12]
   32e92:	33b0      	adds	r3, #176	; 0xb0
   32e94:	6839      	ldr	r1, [r7, #0]
   32e96:	2218      	movs	r2, #24
   32e98:	0018      	movs	r0, r3
   32e9a:	4b51      	ldr	r3, [pc, #324]	; (32fe0 <http_client_send_request+0x2e4>)
   32e9c:	4798      	blx	r3
   32e9e:	e006      	b.n	32eae <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   32ea0:	68fb      	ldr	r3, [r7, #12]
   32ea2:	33b0      	adds	r3, #176	; 0xb0
   32ea4:	2218      	movs	r2, #24
   32ea6:	2100      	movs	r1, #0
   32ea8:	0018      	movs	r0, r3
   32eaa:	4b4e      	ldr	r3, [pc, #312]	; (32fe4 <http_client_send_request+0x2e8>)
   32eac:	4798      	blx	r3
	}

	module->req.method = method;
   32eae:	68fb      	ldr	r3, [r7, #12]
   32eb0:	1dfa      	adds	r2, r7, #7
   32eb2:	21c8      	movs	r1, #200	; 0xc8
   32eb4:	7812      	ldrb	r2, [r2, #0]
   32eb6:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   32eb8:	68fb      	ldr	r3, [r7, #12]
   32eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   32ebc:	2b01      	cmp	r3, #1
   32ebe:	d003      	beq.n	32ec8 <http_client_send_request+0x1cc>
   32ec0:	d316      	bcc.n	32ef0 <http_client_send_request+0x1f4>
   32ec2:	2b02      	cmp	r3, #2
   32ec4:	d004      	beq.n	32ed0 <http_client_send_request+0x1d4>
   32ec6:	e074      	b.n	32fb2 <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   32ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32eca:	2b00      	cmp	r3, #0
   32ecc:	d100      	bne.n	32ed0 <http_client_send_request+0x1d4>
   32ece:	e073      	b.n	32fb8 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   32ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32ed2:	2b00      	cmp	r3, #0
   32ed4:	d107      	bne.n	32ee6 <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   32ed6:	68fb      	ldr	r3, [r7, #12]
   32ed8:	2203      	movs	r2, #3
   32eda:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   32edc:	68fb      	ldr	r3, [r7, #12]
   32ede:	0018      	movs	r0, r3
   32ee0:	4b41      	ldr	r3, [pc, #260]	; (32fe8 <http_client_send_request+0x2ec>)
   32ee2:	4798      	blx	r3
			break;
   32ee4:	e069      	b.n	32fba <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   32ee6:	68fb      	ldr	r3, [r7, #12]
   32ee8:	2100      	movs	r1, #0
   32eea:	0018      	movs	r0, r3
   32eec:	4b3f      	ldr	r3, [pc, #252]	; (32fec <http_client_send_request+0x2f0>)
   32eee:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   32ef0:	68fb      	ldr	r3, [r7, #12]
   32ef2:	2252      	movs	r2, #82	; 0x52
   32ef4:	5c9b      	ldrb	r3, [r3, r2]
   32ef6:	2b00      	cmp	r3, #0
   32ef8:	d007      	beq.n	32f0a <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   32efa:	2337      	movs	r3, #55	; 0x37
   32efc:	18fb      	adds	r3, r7, r3
   32efe:	2237      	movs	r2, #55	; 0x37
   32f00:	18ba      	adds	r2, r7, r2
   32f02:	7812      	ldrb	r2, [r2, #0]
   32f04:	2101      	movs	r1, #1
   32f06:	430a      	orrs	r2, r1
   32f08:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   32f0a:	2337      	movs	r3, #55	; 0x37
   32f0c:	18fb      	adds	r3, r7, r3
   32f0e:	781b      	ldrb	r3, [r3, #0]
   32f10:	001a      	movs	r2, r3
   32f12:	2101      	movs	r1, #1
   32f14:	2002      	movs	r0, #2
   32f16:	4b36      	ldr	r3, [pc, #216]	; (32ff0 <http_client_send_request+0x2f4>)
   32f18:	4798      	blx	r3
   32f1a:	0003      	movs	r3, r0
   32f1c:	001a      	movs	r2, r3
   32f1e:	68fb      	ldr	r3, [r7, #12]
   32f20:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   32f22:	68fb      	ldr	r3, [r7, #12]
   32f24:	781b      	ldrb	r3, [r3, #0]
   32f26:	b25b      	sxtb	r3, r3
   32f28:	2b00      	cmp	r3, #0
   32f2a:	db3f      	blt.n	32fac <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   32f2c:	68fb      	ldr	r3, [r7, #12]
   32f2e:	781b      	ldrb	r3, [r3, #0]
   32f30:	b25b      	sxtb	r3, r3
   32f32:	001a      	movs	r2, r3
   32f34:	4b2f      	ldr	r3, [pc, #188]	; (32ff4 <http_client_send_request+0x2f8>)
   32f36:	0092      	lsls	r2, r2, #2
   32f38:	68f9      	ldr	r1, [r7, #12]
   32f3a:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   32f3c:	68fb      	ldr	r3, [r7, #12]
   32f3e:	3301      	adds	r3, #1
   32f40:	0018      	movs	r0, r3
   32f42:	4b2d      	ldr	r3, [pc, #180]	; (32ff8 <http_client_send_request+0x2fc>)
   32f44:	4798      	blx	r3
   32f46:	1e03      	subs	r3, r0, #0
   32f48:	d027      	beq.n	32f9a <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   32f4a:	2314      	movs	r3, #20
   32f4c:	18fb      	adds	r3, r7, r3
   32f4e:	2202      	movs	r2, #2
   32f50:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   32f52:	68fb      	ldr	r3, [r7, #12]
   32f54:	2250      	movs	r2, #80	; 0x50
   32f56:	5a9b      	ldrh	r3, [r3, r2]
   32f58:	021b      	lsls	r3, r3, #8
   32f5a:	b21a      	sxth	r2, r3
   32f5c:	68fb      	ldr	r3, [r7, #12]
   32f5e:	2150      	movs	r1, #80	; 0x50
   32f60:	5a5b      	ldrh	r3, [r3, r1]
   32f62:	0a1b      	lsrs	r3, r3, #8
   32f64:	b29b      	uxth	r3, r3
   32f66:	b21b      	sxth	r3, r3
   32f68:	4313      	orrs	r3, r2
   32f6a:	b21b      	sxth	r3, r3
   32f6c:	b29a      	uxth	r2, r3
   32f6e:	2314      	movs	r3, #20
   32f70:	18fb      	adds	r3, r7, r3
   32f72:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   32f74:	68fb      	ldr	r3, [r7, #12]
   32f76:	3301      	adds	r3, #1
   32f78:	0018      	movs	r0, r3
   32f7a:	4b20      	ldr	r3, [pc, #128]	; (32ffc <http_client_send_request+0x300>)
   32f7c:	4798      	blx	r3
   32f7e:	0002      	movs	r2, r0
   32f80:	2314      	movs	r3, #20
   32f82:	18fb      	adds	r3, r7, r3
   32f84:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   32f86:	68fb      	ldr	r3, [r7, #12]
   32f88:	781b      	ldrb	r3, [r3, #0]
   32f8a:	b25b      	sxtb	r3, r3
   32f8c:	2214      	movs	r2, #20
   32f8e:	18b9      	adds	r1, r7, r2
   32f90:	2210      	movs	r2, #16
   32f92:	0018      	movs	r0, r3
   32f94:	4b1a      	ldr	r3, [pc, #104]	; (33000 <http_client_send_request+0x304>)
   32f96:	4798      	blx	r3
   32f98:	e004      	b.n	32fa4 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   32f9a:	68fb      	ldr	r3, [r7, #12]
   32f9c:	3301      	adds	r3, #1
   32f9e:	0018      	movs	r0, r3
   32fa0:	4b18      	ldr	r3, [pc, #96]	; (33004 <http_client_send_request+0x308>)
   32fa2:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   32fa4:	68fb      	ldr	r3, [r7, #12]
   32fa6:	2201      	movs	r2, #1
   32fa8:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   32faa:	e006      	b.n	32fba <http_client_send_request+0x2be>
			return -ENOSPC;
   32fac:	231c      	movs	r3, #28
   32fae:	425b      	negs	r3, r3
   32fb0:	e004      	b.n	32fbc <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   32fb2:	230b      	movs	r3, #11
   32fb4:	425b      	negs	r3, r3
   32fb6:	e001      	b.n	32fbc <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   32fb8:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   32fba:	2300      	movs	r3, #0
}
   32fbc:	0018      	movs	r0, r3
   32fbe:	46bd      	mov	sp, r7
   32fc0:	b00e      	add	sp, #56	; 0x38
   32fc2:	bdb0      	pop	{r4, r5, r7, pc}
   32fc4:	0003c1c4 	.word	0x0003c1c4
   32fc8:	00037065 	.word	0x00037065
   32fcc:	0003c1cc 	.word	0x0003c1cc
   32fd0:	00037057 	.word	0x00037057
   32fd4:	00036c55 	.word	0x00036c55
   32fd8:	0003701d 	.word	0x0003701d
   32fdc:	0003700b 	.word	0x0003700b
   32fe0:	00036c69 	.word	0x00036c69
   32fe4:	00036c9f 	.word	0x00036c9f
   32fe8:	0003315d 	.word	0x0003315d
   32fec:	00033009 	.word	0x00033009
   32ff0:	00027315 	.word	0x00027315
   32ff4:	20004310 	.word	0x20004310
   32ff8:	00032c65 	.word	0x00032c65
   32ffc:	00027a61 	.word	0x00027a61
   33000:	00027529 	.word	0x00027529
   33004:	00027b69 	.word	0x00027b69

00033008 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   33008:	b580      	push	{r7, lr}
   3300a:	b086      	sub	sp, #24
   3300c:	af00      	add	r7, sp, #0
   3300e:	6078      	str	r0, [r7, #4]
   33010:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   33012:	687b      	ldr	r3, [r7, #4]
   33014:	22c0      	movs	r2, #192	; 0xc0
   33016:	589b      	ldr	r3, [r3, r2]
   33018:	2b00      	cmp	r3, #0
   3301a:	d007      	beq.n	3302c <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   3301c:	687b      	ldr	r3, [r7, #4]
   3301e:	22c0      	movs	r2, #192	; 0xc0
   33020:	589b      	ldr	r3, [r3, r2]
   33022:	687a      	ldr	r2, [r7, #4]
   33024:	21c4      	movs	r1, #196	; 0xc4
   33026:	5852      	ldr	r2, [r2, r1]
   33028:	0010      	movs	r0, r2
   3302a:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   3302c:	687b      	ldr	r3, [r7, #4]
   3302e:	33b0      	adds	r3, #176	; 0xb0
   33030:	2218      	movs	r2, #24
   33032:	2100      	movs	r1, #0
   33034:	0018      	movs	r0, r3
   33036:	4b24      	ldr	r3, [pc, #144]	; (330c8 <_http_client_clear_conn+0xc0>)
   33038:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   3303a:	687b      	ldr	r3, [r7, #4]
   3303c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   3303e:	2b00      	cmp	r3, #0
   33040:	d005      	beq.n	3304e <_http_client_clear_conn+0x46>
		close(module->sock);
   33042:	687b      	ldr	r3, [r7, #4]
   33044:	781b      	ldrb	r3, [r3, #0]
   33046:	b25b      	sxtb	r3, r3
   33048:	0018      	movs	r0, r3
   3304a:	4b20      	ldr	r3, [pc, #128]	; (330cc <_http_client_clear_conn+0xc4>)
   3304c:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   3304e:	687b      	ldr	r3, [r7, #4]
   33050:	781b      	ldrb	r3, [r3, #0]
   33052:	b25b      	sxtb	r3, r3
   33054:	001a      	movs	r2, r3
   33056:	4b1e      	ldr	r3, [pc, #120]	; (330d0 <_http_client_clear_conn+0xc8>)
   33058:	0092      	lsls	r2, r2, #2
   3305a:	2100      	movs	r1, #0
   3305c:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   3305e:	687b      	ldr	r3, [r7, #4]
   33060:	336c      	adds	r3, #108	; 0x6c
   33062:	226c      	movs	r2, #108	; 0x6c
   33064:	2100      	movs	r1, #0
   33066:	0018      	movs	r0, r3
   33068:	4b17      	ldr	r3, [pc, #92]	; (330c8 <_http_client_clear_conn+0xc0>)
   3306a:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   3306c:	687b      	ldr	r3, [r7, #4]
   3306e:	33d8      	adds	r3, #216	; 0xd8
   33070:	2210      	movs	r2, #16
   33072:	2100      	movs	r1, #0
   33074:	0018      	movs	r0, r3
   33076:	4b14      	ldr	r3, [pc, #80]	; (330c8 <_http_client_clear_conn+0xc0>)
   33078:	4798      	blx	r3
	module->req.state = STATE_INIT;
   3307a:	687b      	ldr	r3, [r7, #4]
   3307c:	2200      	movs	r2, #0
   3307e:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   33080:	687b      	ldr	r3, [r7, #4]
   33082:	22d8      	movs	r2, #216	; 0xd8
   33084:	2100      	movs	r1, #0
   33086:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   33088:	687b      	ldr	r3, [r7, #4]
   3308a:	2241      	movs	r2, #65	; 0x41
   3308c:	5c99      	ldrb	r1, [r3, r2]
   3308e:	2001      	movs	r0, #1
   33090:	4381      	bics	r1, r0
   33092:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   33094:	687b      	ldr	r3, [r7, #4]
   33096:	2241      	movs	r2, #65	; 0x41
   33098:	5c99      	ldrb	r1, [r3, r2]
   3309a:	2002      	movs	r0, #2
   3309c:	4381      	bics	r1, r0
   3309e:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   330a0:	230c      	movs	r3, #12
   330a2:	18fb      	adds	r3, r7, r3
   330a4:	683a      	ldr	r2, [r7, #0]
   330a6:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   330a8:	687b      	ldr	r3, [r7, #4]
   330aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   330ac:	2b00      	cmp	r3, #0
   330ae:	d006      	beq.n	330be <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   330b0:	687b      	ldr	r3, [r7, #4]
   330b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   330b4:	220c      	movs	r2, #12
   330b6:	18ba      	adds	r2, r7, r2
   330b8:	6878      	ldr	r0, [r7, #4]
   330ba:	2104      	movs	r1, #4
   330bc:	4798      	blx	r3
	}
}
   330be:	46c0      	nop			; (mov r8, r8)
   330c0:	46bd      	mov	sp, r7
   330c2:	b006      	add	sp, #24
   330c4:	bd80      	pop	{r7, pc}
   330c6:	46c0      	nop			; (mov r8, r8)
   330c8:	00036c9f 	.word	0x00036c9f
   330cc:	00027921 	.word	0x00027921
   330d0:	20004310 	.word	0x20004310

000330d4 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   330d4:	b590      	push	{r4, r7, lr}
   330d6:	b087      	sub	sp, #28
   330d8:	af00      	add	r7, sp, #0
   330da:	60f8      	str	r0, [r7, #12]
   330dc:	60b9      	str	r1, [r7, #8]
   330de:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   330e0:	68fb      	ldr	r3, [r7, #12]
   330e2:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   330e4:	697b      	ldr	r3, [r7, #20]
   330e6:	2241      	movs	r2, #65	; 0x41
   330e8:	5c99      	ldrb	r1, [r3, r2]
   330ea:	2001      	movs	r0, #1
   330ec:	4301      	orrs	r1, r0
   330ee:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   330f0:	697b      	ldr	r3, [r7, #20]
   330f2:	2000      	movs	r0, #0
   330f4:	5618      	ldrsb	r0, [r3, r0]
   330f6:	687b      	ldr	r3, [r7, #4]
   330f8:	b29a      	uxth	r2, r3
   330fa:	68b9      	ldr	r1, [r7, #8]
   330fc:	2300      	movs	r3, #0
   330fe:	4c14      	ldr	r4, [pc, #80]	; (33150 <_http_client_send_wait+0x7c>)
   33100:	47a0      	blx	r4
   33102:	0003      	movs	r3, r0
   33104:	613b      	str	r3, [r7, #16]
   33106:	693b      	ldr	r3, [r7, #16]
   33108:	2b00      	cmp	r3, #0
   3310a:	da0f      	bge.n	3312c <_http_client_send_wait+0x58>
		module->sending = 0;
   3310c:	697b      	ldr	r3, [r7, #20]
   3310e:	2241      	movs	r2, #65	; 0x41
   33110:	5c99      	ldrb	r1, [r3, r2]
   33112:	2001      	movs	r0, #1
   33114:	4381      	bics	r1, r0
   33116:	5499      	strb	r1, [r3, r2]
		return result;
   33118:	693b      	ldr	r3, [r7, #16]
   3311a:	e014      	b.n	33146 <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   3311c:	2000      	movs	r0, #0
   3311e:	4b0d      	ldr	r3, [pc, #52]	; (33154 <_http_client_send_wait+0x80>)
   33120:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   33122:	697b      	ldr	r3, [r7, #20]
   33124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   33126:	0018      	movs	r0, r3
   33128:	4b0b      	ldr	r3, [pc, #44]	; (33158 <_http_client_send_wait+0x84>)
   3312a:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   3312c:	697b      	ldr	r3, [r7, #20]
   3312e:	2241      	movs	r2, #65	; 0x41
   33130:	5c9b      	ldrb	r3, [r3, r2]
   33132:	2201      	movs	r2, #1
   33134:	4013      	ands	r3, r2
   33136:	b2db      	uxtb	r3, r3
   33138:	2b00      	cmp	r3, #0
   3313a:	d003      	beq.n	33144 <_http_client_send_wait+0x70>
   3313c:	697b      	ldr	r3, [r7, #20]
   3313e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   33140:	2b02      	cmp	r3, #2
   33142:	d8eb      	bhi.n	3311c <_http_client_send_wait+0x48>
	}

	return 0;
   33144:	2300      	movs	r3, #0
}
   33146:	0018      	movs	r0, r3
   33148:	46bd      	mov	sp, r7
   3314a:	b007      	add	sp, #28
   3314c:	bd90      	pop	{r4, r7, pc}
   3314e:	46c0      	nop			; (mov r8, r8)
   33150:	0002763d 	.word	0x0002763d
   33154:	00023ce9 	.word	0x00023ce9
   33158:	000343e1 	.word	0x000343e1

0003315c <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   3315c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3315e:	46c6      	mov	lr, r8
   33160:	b500      	push	{lr}
   33162:	b0a0      	sub	sp, #128	; 0x80
   33164:	af02      	add	r7, sp, #8
   33166:	61f8      	str	r0, [r7, #28]
   33168:	4668      	mov	r0, sp
   3316a:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   3316c:	2318      	movs	r3, #24
   3316e:	2218      	movs	r2, #24
   33170:	18ba      	adds	r2, r7, r2
   33172:	18d0      	adds	r0, r2, r3
   33174:	4bbd      	ldr	r3, [pc, #756]	; (3346c <_http_client_request+0x310>)
   33176:	469c      	mov	ip, r3
   33178:	4663      	mov	r3, ip
   3317a:	cb16      	ldmia	r3!, {r1, r2, r4}
   3317c:	c016      	stmia	r0!, {r1, r2, r4}
   3317e:	469c      	mov	ip, r3
   33180:	4663      	mov	r3, ip
   33182:	681b      	ldr	r3, [r3, #0]
   33184:	469c      	mov	ip, r3
   33186:	4663      	mov	r3, ip
   33188:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   3318a:	69f8      	ldr	r0, [r7, #28]
   3318c:	6e40      	ldr	r0, [r0, #100]	; 0x64
   3318e:	4684      	mov	ip, r0
   33190:	2301      	movs	r3, #1
   33192:	425b      	negs	r3, r3
   33194:	4698      	mov	r8, r3
   33196:	44c4      	add	ip, r8
   33198:	4663      	mov	r3, ip
   3319a:	66fb      	str	r3, [r7, #108]	; 0x6c
   3319c:	6038      	str	r0, [r7, #0]
   3319e:	2300      	movs	r3, #0
   331a0:	607b      	str	r3, [r7, #4]
   331a2:	6839      	ldr	r1, [r7, #0]
   331a4:	687a      	ldr	r2, [r7, #4]
   331a6:	000b      	movs	r3, r1
   331a8:	0f5b      	lsrs	r3, r3, #29
   331aa:	469c      	mov	ip, r3
   331ac:	0013      	movs	r3, r2
   331ae:	00db      	lsls	r3, r3, #3
   331b0:	617b      	str	r3, [r7, #20]
   331b2:	4663      	mov	r3, ip
   331b4:	697c      	ldr	r4, [r7, #20]
   331b6:	431c      	orrs	r4, r3
   331b8:	617c      	str	r4, [r7, #20]
   331ba:	000b      	movs	r3, r1
   331bc:	00db      	lsls	r3, r3, #3
   331be:	613b      	str	r3, [r7, #16]
   331c0:	0005      	movs	r5, r0
   331c2:	2200      	movs	r2, #0
   331c4:	0016      	movs	r6, r2
   331c6:	0f6a      	lsrs	r2, r5, #29
   331c8:	00f3      	lsls	r3, r6, #3
   331ca:	60fb      	str	r3, [r7, #12]
   331cc:	68fb      	ldr	r3, [r7, #12]
   331ce:	4313      	orrs	r3, r2
   331d0:	60fb      	str	r3, [r7, #12]
   331d2:	00eb      	lsls	r3, r5, #3
   331d4:	60bb      	str	r3, [r7, #8]
   331d6:	1dc3      	adds	r3, r0, #7
   331d8:	08db      	lsrs	r3, r3, #3
   331da:	00db      	lsls	r3, r3, #3
   331dc:	466a      	mov	r2, sp
   331de:	1ad3      	subs	r3, r2, r3
   331e0:	469d      	mov	sp, r3
   331e2:	ab02      	add	r3, sp, #8
   331e4:	3300      	adds	r3, #0
   331e6:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   331e8:	69fb      	ldr	r3, [r7, #28]
   331ea:	2b00      	cmp	r3, #0
   331ec:	d100      	bne.n	331f0 <_http_client_request+0x94>
   331ee:	e346      	b.n	3387e <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   331f0:	69fb      	ldr	r3, [r7, #28]
   331f2:	2241      	movs	r2, #65	; 0x41
   331f4:	5c9b      	ldrb	r3, [r3, r2]
   331f6:	2201      	movs	r2, #1
   331f8:	4013      	ands	r3, r2
   331fa:	b2db      	uxtb	r3, r3
   331fc:	2b00      	cmp	r3, #0
   331fe:	d000      	beq.n	33202 <_http_client_request+0xa6>
   33200:	e33f      	b.n	33882 <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   33202:	69fb      	ldr	r3, [r7, #28]
   33204:	33b0      	adds	r3, #176	; 0xb0
   33206:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   33208:	69fb      	ldr	r3, [r7, #28]
   3320a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   3320c:	2b03      	cmp	r3, #3
   3320e:	d003      	beq.n	33218 <_http_client_request+0xbc>
   33210:	2b04      	cmp	r3, #4
   33212:	d100      	bne.n	33216 <_http_client_request+0xba>
   33214:	e1b3      	b.n	3357e <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   33216:	e32f      	b.n	33878 <_http_client_request+0x71c>
		module->req.content_length = 0;
   33218:	69fb      	ldr	r3, [r7, #28]
   3321a:	22cc      	movs	r2, #204	; 0xcc
   3321c:	2100      	movs	r1, #0
   3321e:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   33220:	69fb      	ldr	r3, [r7, #28]
   33222:	22d0      	movs	r2, #208	; 0xd0
   33224:	2100      	movs	r1, #0
   33226:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   33228:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   3322a:	69fb      	ldr	r3, [r7, #28]
   3322c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   3322e:	4c90      	ldr	r4, [pc, #576]	; (33470 <_http_client_request+0x314>)
   33230:	2334      	movs	r3, #52	; 0x34
   33232:	2018      	movs	r0, #24
   33234:	1838      	adds	r0, r7, r0
   33236:	18c0      	adds	r0, r0, r3
   33238:	69fb      	ldr	r3, [r7, #28]
   3323a:	9300      	str	r3, [sp, #0]
   3323c:	0023      	movs	r3, r4
   3323e:	4c8d      	ldr	r4, [pc, #564]	; (33474 <_http_client_request+0x318>)
   33240:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   33242:	69fb      	ldr	r3, [r7, #28]
   33244:	22c8      	movs	r2, #200	; 0xc8
   33246:	5c9b      	ldrb	r3, [r3, r2]
   33248:	2b01      	cmp	r3, #1
   3324a:	d10a      	bne.n	33262 <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   3324c:	498a      	ldr	r1, [pc, #552]	; (33478 <_http_client_request+0x31c>)
   3324e:	2334      	movs	r3, #52	; 0x34
   33250:	2218      	movs	r2, #24
   33252:	4694      	mov	ip, r2
   33254:	44bc      	add	ip, r7
   33256:	4463      	add	r3, ip
   33258:	2204      	movs	r2, #4
   3325a:	0018      	movs	r0, r3
   3325c:	4b87      	ldr	r3, [pc, #540]	; (3347c <_http_client_request+0x320>)
   3325e:	4798      	blx	r3
   33260:	e04e      	b.n	33300 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   33262:	69fb      	ldr	r3, [r7, #28]
   33264:	22c8      	movs	r2, #200	; 0xc8
   33266:	5c9b      	ldrb	r3, [r3, r2]
   33268:	2b02      	cmp	r3, #2
   3326a:	d10a      	bne.n	33282 <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   3326c:	4984      	ldr	r1, [pc, #528]	; (33480 <_http_client_request+0x324>)
   3326e:	2334      	movs	r3, #52	; 0x34
   33270:	2218      	movs	r2, #24
   33272:	4694      	mov	ip, r2
   33274:	44bc      	add	ip, r7
   33276:	4463      	add	r3, ip
   33278:	2205      	movs	r2, #5
   3327a:	0018      	movs	r0, r3
   3327c:	4b7f      	ldr	r3, [pc, #508]	; (3347c <_http_client_request+0x320>)
   3327e:	4798      	blx	r3
   33280:	e03e      	b.n	33300 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   33282:	69fb      	ldr	r3, [r7, #28]
   33284:	22c8      	movs	r2, #200	; 0xc8
   33286:	5c9b      	ldrb	r3, [r3, r2]
   33288:	2b03      	cmp	r3, #3
   3328a:	d10a      	bne.n	332a2 <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   3328c:	497d      	ldr	r1, [pc, #500]	; (33484 <_http_client_request+0x328>)
   3328e:	2334      	movs	r3, #52	; 0x34
   33290:	2218      	movs	r2, #24
   33292:	4694      	mov	ip, r2
   33294:	44bc      	add	ip, r7
   33296:	4463      	add	r3, ip
   33298:	2207      	movs	r2, #7
   3329a:	0018      	movs	r0, r3
   3329c:	4b77      	ldr	r3, [pc, #476]	; (3347c <_http_client_request+0x320>)
   3329e:	4798      	blx	r3
   332a0:	e02e      	b.n	33300 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   332a2:	69fb      	ldr	r3, [r7, #28]
   332a4:	22c8      	movs	r2, #200	; 0xc8
   332a6:	5c9b      	ldrb	r3, [r3, r2]
   332a8:	2b04      	cmp	r3, #4
   332aa:	d10a      	bne.n	332c2 <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   332ac:	4976      	ldr	r1, [pc, #472]	; (33488 <_http_client_request+0x32c>)
   332ae:	2334      	movs	r3, #52	; 0x34
   332b0:	2218      	movs	r2, #24
   332b2:	4694      	mov	ip, r2
   332b4:	44bc      	add	ip, r7
   332b6:	4463      	add	r3, ip
   332b8:	2204      	movs	r2, #4
   332ba:	0018      	movs	r0, r3
   332bc:	4b6f      	ldr	r3, [pc, #444]	; (3347c <_http_client_request+0x320>)
   332be:	4798      	blx	r3
   332c0:	e01e      	b.n	33300 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   332c2:	69fb      	ldr	r3, [r7, #28]
   332c4:	22c8      	movs	r2, #200	; 0xc8
   332c6:	5c9b      	ldrb	r3, [r3, r2]
   332c8:	2b05      	cmp	r3, #5
   332ca:	d10a      	bne.n	332e2 <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   332cc:	496f      	ldr	r1, [pc, #444]	; (3348c <_http_client_request+0x330>)
   332ce:	2334      	movs	r3, #52	; 0x34
   332d0:	2218      	movs	r2, #24
   332d2:	4694      	mov	ip, r2
   332d4:	44bc      	add	ip, r7
   332d6:	4463      	add	r3, ip
   332d8:	2208      	movs	r2, #8
   332da:	0018      	movs	r0, r3
   332dc:	4b67      	ldr	r3, [pc, #412]	; (3347c <_http_client_request+0x320>)
   332de:	4798      	blx	r3
   332e0:	e00e      	b.n	33300 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   332e2:	69fb      	ldr	r3, [r7, #28]
   332e4:	22c8      	movs	r2, #200	; 0xc8
   332e6:	5c9b      	ldrb	r3, [r3, r2]
   332e8:	2b06      	cmp	r3, #6
   332ea:	d109      	bne.n	33300 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   332ec:	4968      	ldr	r1, [pc, #416]	; (33490 <_http_client_request+0x334>)
   332ee:	2334      	movs	r3, #52	; 0x34
   332f0:	2218      	movs	r2, #24
   332f2:	4694      	mov	ip, r2
   332f4:	44bc      	add	ip, r7
   332f6:	4463      	add	r3, ip
   332f8:	2205      	movs	r2, #5
   332fa:	0018      	movs	r0, r3
   332fc:	4b5f      	ldr	r3, [pc, #380]	; (3347c <_http_client_request+0x320>)
   332fe:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   33300:	69fb      	ldr	r3, [r7, #28]
   33302:	3370      	adds	r3, #112	; 0x70
   33304:	001c      	movs	r4, r3
   33306:	69fb      	ldr	r3, [r7, #28]
   33308:	3370      	adds	r3, #112	; 0x70
   3330a:	0018      	movs	r0, r3
   3330c:	4b61      	ldr	r3, [pc, #388]	; (33494 <_http_client_request+0x338>)
   3330e:	4798      	blx	r3
   33310:	0002      	movs	r2, r0
   33312:	2334      	movs	r3, #52	; 0x34
   33314:	2118      	movs	r1, #24
   33316:	468c      	mov	ip, r1
   33318:	44bc      	add	ip, r7
   3331a:	4463      	add	r3, ip
   3331c:	0021      	movs	r1, r4
   3331e:	0018      	movs	r0, r3
   33320:	4b56      	ldr	r3, [pc, #344]	; (3347c <_http_client_request+0x320>)
   33322:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   33324:	495c      	ldr	r1, [pc, #368]	; (33498 <_http_client_request+0x33c>)
   33326:	2334      	movs	r3, #52	; 0x34
   33328:	2218      	movs	r2, #24
   3332a:	4694      	mov	ip, r2
   3332c:	44bc      	add	ip, r7
   3332e:	4463      	add	r3, ip
   33330:	220b      	movs	r2, #11
   33332:	0018      	movs	r0, r3
   33334:	4b51      	ldr	r3, [pc, #324]	; (3347c <_http_client_request+0x320>)
   33336:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   33338:	4958      	ldr	r1, [pc, #352]	; (3349c <_http_client_request+0x340>)
   3333a:	2334      	movs	r3, #52	; 0x34
   3333c:	2218      	movs	r2, #24
   3333e:	4694      	mov	ip, r2
   33340:	44bc      	add	ip, r7
   33342:	4463      	add	r3, ip
   33344:	220c      	movs	r2, #12
   33346:	0018      	movs	r0, r3
   33348:	4b4c      	ldr	r3, [pc, #304]	; (3347c <_http_client_request+0x320>)
   3334a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   3334c:	69fb      	ldr	r3, [r7, #28]
   3334e:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   33350:	69fb      	ldr	r3, [r7, #28]
   33352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   33354:	0018      	movs	r0, r3
   33356:	4b4f      	ldr	r3, [pc, #316]	; (33494 <_http_client_request+0x338>)
   33358:	4798      	blx	r3
   3335a:	0002      	movs	r2, r0
   3335c:	2334      	movs	r3, #52	; 0x34
   3335e:	2118      	movs	r1, #24
   33360:	468c      	mov	ip, r1
   33362:	44bc      	add	ip, r7
   33364:	4463      	add	r3, ip
   33366:	0021      	movs	r1, r4
   33368:	0018      	movs	r0, r3
   3336a:	4b44      	ldr	r3, [pc, #272]	; (3347c <_http_client_request+0x320>)
   3336c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   3336e:	494c      	ldr	r1, [pc, #304]	; (334a0 <_http_client_request+0x344>)
   33370:	2334      	movs	r3, #52	; 0x34
   33372:	2218      	movs	r2, #24
   33374:	4694      	mov	ip, r2
   33376:	44bc      	add	ip, r7
   33378:	4463      	add	r3, ip
   3337a:	2202      	movs	r2, #2
   3337c:	0018      	movs	r0, r3
   3337e:	4b3f      	ldr	r3, [pc, #252]	; (3347c <_http_client_request+0x320>)
   33380:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   33382:	4948      	ldr	r1, [pc, #288]	; (334a4 <_http_client_request+0x348>)
   33384:	2334      	movs	r3, #52	; 0x34
   33386:	2218      	movs	r2, #24
   33388:	4694      	mov	ip, r2
   3338a:	44bc      	add	ip, r7
   3338c:	4463      	add	r3, ip
   3338e:	2206      	movs	r2, #6
   33390:	0018      	movs	r0, r3
   33392:	4b3a      	ldr	r3, [pc, #232]	; (3347c <_http_client_request+0x320>)
   33394:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   33396:	69fb      	ldr	r3, [r7, #28]
   33398:	1c5c      	adds	r4, r3, #1
   3339a:	69fb      	ldr	r3, [r7, #28]
   3339c:	3301      	adds	r3, #1
   3339e:	0018      	movs	r0, r3
   333a0:	4b3c      	ldr	r3, [pc, #240]	; (33494 <_http_client_request+0x338>)
   333a2:	4798      	blx	r3
   333a4:	0002      	movs	r2, r0
   333a6:	2334      	movs	r3, #52	; 0x34
   333a8:	2118      	movs	r1, #24
   333aa:	468c      	mov	ip, r1
   333ac:	44bc      	add	ip, r7
   333ae:	4463      	add	r3, ip
   333b0:	0021      	movs	r1, r4
   333b2:	0018      	movs	r0, r3
   333b4:	4b31      	ldr	r3, [pc, #196]	; (3347c <_http_client_request+0x320>)
   333b6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   333b8:	4939      	ldr	r1, [pc, #228]	; (334a0 <_http_client_request+0x344>)
   333ba:	2334      	movs	r3, #52	; 0x34
   333bc:	2218      	movs	r2, #24
   333be:	4694      	mov	ip, r2
   333c0:	44bc      	add	ip, r7
   333c2:	4463      	add	r3, ip
   333c4:	2202      	movs	r2, #2
   333c6:	0018      	movs	r0, r3
   333c8:	4b2c      	ldr	r3, [pc, #176]	; (3347c <_http_client_request+0x320>)
   333ca:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   333cc:	4936      	ldr	r1, [pc, #216]	; (334a8 <_http_client_request+0x34c>)
   333ce:	2334      	movs	r3, #52	; 0x34
   333d0:	2218      	movs	r2, #24
   333d2:	4694      	mov	ip, r2
   333d4:	44bc      	add	ip, r7
   333d6:	4463      	add	r3, ip
   333d8:	2218      	movs	r2, #24
   333da:	0018      	movs	r0, r3
   333dc:	4b27      	ldr	r3, [pc, #156]	; (3347c <_http_client_request+0x320>)
   333de:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   333e0:	4932      	ldr	r1, [pc, #200]	; (334ac <_http_client_request+0x350>)
   333e2:	2334      	movs	r3, #52	; 0x34
   333e4:	2218      	movs	r2, #24
   333e6:	4694      	mov	ip, r2
   333e8:	44bc      	add	ip, r7
   333ea:	4463      	add	r3, ip
   333ec:	2213      	movs	r2, #19
   333ee:	0018      	movs	r0, r3
   333f0:	4b22      	ldr	r3, [pc, #136]	; (3347c <_http_client_request+0x320>)
   333f2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   333f4:	492e      	ldr	r1, [pc, #184]	; (334b0 <_http_client_request+0x354>)
   333f6:	2334      	movs	r3, #52	; 0x34
   333f8:	2218      	movs	r2, #24
   333fa:	4694      	mov	ip, r2
   333fc:	44bc      	add	ip, r7
   333fe:	4463      	add	r3, ip
   33400:	2217      	movs	r2, #23
   33402:	0018      	movs	r0, r3
   33404:	4b1d      	ldr	r3, [pc, #116]	; (3347c <_http_client_request+0x320>)
   33406:	4798      	blx	r3
		if (entity->read != NULL) {
   33408:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3340a:	68db      	ldr	r3, [r3, #12]
   3340c:	2b00      	cmp	r3, #0
   3340e:	d100      	bne.n	33412 <_http_client_request+0x2b6>
   33410:	e088      	b.n	33524 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   33412:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33414:	781b      	ldrb	r3, [r3, #0]
   33416:	2b00      	cmp	r3, #0
   33418:	d00f      	beq.n	3343a <_http_client_request+0x2de>
				module->req.content_length = -1;
   3341a:	69fb      	ldr	r3, [r7, #28]
   3341c:	21cc      	movs	r1, #204	; 0xcc
   3341e:	2201      	movs	r2, #1
   33420:	4252      	negs	r2, r2
   33422:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   33424:	4923      	ldr	r1, [pc, #140]	; (334b4 <_http_client_request+0x358>)
   33426:	2334      	movs	r3, #52	; 0x34
   33428:	2218      	movs	r2, #24
   3342a:	4694      	mov	ip, r2
   3342c:	44bc      	add	ip, r7
   3342e:	4463      	add	r3, ip
   33430:	221c      	movs	r2, #28
   33432:	0018      	movs	r0, r3
   33434:	4b11      	ldr	r3, [pc, #68]	; (3347c <_http_client_request+0x320>)
   33436:	4798      	blx	r3
   33438:	e074      	b.n	33524 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   3343a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3343c:	689b      	ldr	r3, [r3, #8]
   3343e:	2b00      	cmp	r3, #0
   33440:	d070      	beq.n	33524 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   33442:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33444:	689a      	ldr	r2, [r3, #8]
   33446:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33448:	695b      	ldr	r3, [r3, #20]
   3344a:	0018      	movs	r0, r3
   3344c:	4790      	blx	r2
   3344e:	0001      	movs	r1, r0
   33450:	69fb      	ldr	r3, [r7, #28]
   33452:	22cc      	movs	r2, #204	; 0xcc
   33454:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   33456:	69fb      	ldr	r3, [r7, #28]
   33458:	22cc      	movs	r2, #204	; 0xcc
   3345a:	589b      	ldr	r3, [r3, r2]
   3345c:	2b00      	cmp	r3, #0
   3345e:	da2b      	bge.n	334b8 <_http_client_request+0x35c>
					module->req.content_length = 0;
   33460:	69fb      	ldr	r3, [r7, #28]
   33462:	22cc      	movs	r2, #204	; 0xcc
   33464:	2100      	movs	r1, #0
   33466:	5099      	str	r1, [r3, r2]
   33468:	e05c      	b.n	33524 <_http_client_request+0x3c8>
   3346a:	46c0      	nop			; (mov r8, r8)
   3346c:	0003c2b4 	.word	0x0003c2b4
   33470:	000330d5 	.word	0x000330d5
   33474:	0003403d 	.word	0x0003403d
   33478:	0003c1d8 	.word	0x0003c1d8
   3347c:	000340bd 	.word	0x000340bd
   33480:	0003c1e0 	.word	0x0003c1e0
   33484:	0003c1e8 	.word	0x0003c1e8
   33488:	0003c1f0 	.word	0x0003c1f0
   3348c:	0003c1f8 	.word	0x0003c1f8
   33490:	0003c204 	.word	0x0003c204
   33494:	00037057 	.word	0x00037057
   33498:	0003c20c 	.word	0x0003c20c
   3349c:	0003c218 	.word	0x0003c218
   334a0:	0003c228 	.word	0x0003c228
   334a4:	0003c22c 	.word	0x0003c22c
   334a8:	0003c234 	.word	0x0003c234
   334ac:	0003c250 	.word	0x0003c250
   334b0:	0003c264 	.word	0x0003c264
   334b4:	0003c27c 	.word	0x0003c27c
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   334b8:	69fb      	ldr	r3, [r7, #28]
   334ba:	22cc      	movs	r2, #204	; 0xcc
   334bc:	589b      	ldr	r3, [r3, r2]
   334be:	001a      	movs	r2, r3
   334c0:	49e0      	ldr	r1, [pc, #896]	; (33844 <_http_client_request+0x6e8>)
   334c2:	2328      	movs	r3, #40	; 0x28
   334c4:	2018      	movs	r0, #24
   334c6:	4684      	mov	ip, r0
   334c8:	44bc      	add	ip, r7
   334ca:	4463      	add	r3, ip
   334cc:	0018      	movs	r0, r3
   334ce:	4bde      	ldr	r3, [pc, #888]	; (33848 <_http_client_request+0x6ec>)
   334d0:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   334d2:	49de      	ldr	r1, [pc, #888]	; (3384c <_http_client_request+0x6f0>)
   334d4:	2334      	movs	r3, #52	; 0x34
   334d6:	2218      	movs	r2, #24
   334d8:	4694      	mov	ip, r2
   334da:	44bc      	add	ip, r7
   334dc:	4463      	add	r3, ip
   334de:	2210      	movs	r2, #16
   334e0:	0018      	movs	r0, r3
   334e2:	4bdb      	ldr	r3, [pc, #876]	; (33850 <_http_client_request+0x6f4>)
   334e4:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   334e6:	2328      	movs	r3, #40	; 0x28
   334e8:	2218      	movs	r2, #24
   334ea:	4694      	mov	ip, r2
   334ec:	44bc      	add	ip, r7
   334ee:	4463      	add	r3, ip
   334f0:	0018      	movs	r0, r3
   334f2:	4bd8      	ldr	r3, [pc, #864]	; (33854 <_http_client_request+0x6f8>)
   334f4:	4798      	blx	r3
   334f6:	0002      	movs	r2, r0
   334f8:	2328      	movs	r3, #40	; 0x28
   334fa:	2118      	movs	r1, #24
   334fc:	1879      	adds	r1, r7, r1
   334fe:	18c9      	adds	r1, r1, r3
   33500:	2334      	movs	r3, #52	; 0x34
   33502:	2018      	movs	r0, #24
   33504:	4684      	mov	ip, r0
   33506:	44bc      	add	ip, r7
   33508:	4463      	add	r3, ip
   3350a:	0018      	movs	r0, r3
   3350c:	4bd0      	ldr	r3, [pc, #832]	; (33850 <_http_client_request+0x6f4>)
   3350e:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   33510:	49d1      	ldr	r1, [pc, #836]	; (33858 <_http_client_request+0x6fc>)
   33512:	2334      	movs	r3, #52	; 0x34
   33514:	2218      	movs	r2, #24
   33516:	4694      	mov	ip, r2
   33518:	44bc      	add	ip, r7
   3351a:	4463      	add	r3, ip
   3351c:	2202      	movs	r2, #2
   3351e:	0018      	movs	r0, r3
   33520:	4bcb      	ldr	r3, [pc, #812]	; (33850 <_http_client_request+0x6f4>)
   33522:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   33524:	69fb      	ldr	r3, [r7, #28]
   33526:	22d4      	movs	r2, #212	; 0xd4
   33528:	589b      	ldr	r3, [r3, r2]
   3352a:	2b00      	cmp	r3, #0
   3352c:	d012      	beq.n	33554 <_http_client_request+0x3f8>
				module->req.ext_header,
   3352e:	69fb      	ldr	r3, [r7, #28]
   33530:	22d4      	movs	r2, #212	; 0xd4
   33532:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   33534:	69fb      	ldr	r3, [r7, #28]
   33536:	22d4      	movs	r2, #212	; 0xd4
   33538:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   3353a:	0018      	movs	r0, r3
   3353c:	4bc5      	ldr	r3, [pc, #788]	; (33854 <_http_client_request+0x6f8>)
   3353e:	4798      	blx	r3
   33540:	0002      	movs	r2, r0
   33542:	2334      	movs	r3, #52	; 0x34
   33544:	2118      	movs	r1, #24
   33546:	468c      	mov	ip, r1
   33548:	44bc      	add	ip, r7
   3354a:	4463      	add	r3, ip
   3354c:	0021      	movs	r1, r4
   3354e:	0018      	movs	r0, r3
   33550:	4bbf      	ldr	r3, [pc, #764]	; (33850 <_http_client_request+0x6f4>)
   33552:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   33554:	49c0      	ldr	r1, [pc, #768]	; (33858 <_http_client_request+0x6fc>)
   33556:	2334      	movs	r3, #52	; 0x34
   33558:	2218      	movs	r2, #24
   3355a:	4694      	mov	ip, r2
   3355c:	44bc      	add	ip, r7
   3355e:	4463      	add	r3, ip
   33560:	2202      	movs	r2, #2
   33562:	0018      	movs	r0, r3
   33564:	4bba      	ldr	r3, [pc, #744]	; (33850 <_http_client_request+0x6f4>)
   33566:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   33568:	2334      	movs	r3, #52	; 0x34
   3356a:	2218      	movs	r2, #24
   3356c:	4694      	mov	ip, r2
   3356e:	44bc      	add	ip, r7
   33570:	4463      	add	r3, ip
   33572:	0018      	movs	r0, r3
   33574:	4bb9      	ldr	r3, [pc, #740]	; (3385c <_http_client_request+0x700>)
   33576:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   33578:	69fb      	ldr	r3, [r7, #28]
   3357a:	2204      	movs	r2, #4
   3357c:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   3357e:	69fb      	ldr	r3, [r7, #28]
   33580:	22cc      	movs	r2, #204	; 0xcc
   33582:	589b      	ldr	r3, [r3, r2]
   33584:	2b00      	cmp	r3, #0
   33586:	db00      	blt.n	3358a <_http_client_request+0x42e>
   33588:	e0c6      	b.n	33718 <_http_client_request+0x5bc>
   3358a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3358c:	68db      	ldr	r3, [r3, #12]
   3358e:	2b00      	cmp	r3, #0
   33590:	d100      	bne.n	33594 <_http_client_request+0x438>
   33592:	e0c1      	b.n	33718 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   33594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33596:	68dc      	ldr	r4, [r3, #12]
   33598:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3359a:	6958      	ldr	r0, [r3, #20]
   3359c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3359e:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   335a0:	69fb      	ldr	r3, [r7, #28]
   335a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   335a4:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   335a6:	69fb      	ldr	r3, [r7, #28]
   335a8:	22d0      	movs	r2, #208	; 0xd0
   335aa:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   335ac:	002a      	movs	r2, r5
   335ae:	47a0      	blx	r4
   335b0:	0003      	movs	r3, r0
   335b2:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   335b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   335b6:	2b00      	cmp	r3, #0
   335b8:	da01      	bge.n	335be <_http_client_request+0x462>
				size = 0;
   335ba:	2300      	movs	r3, #0
   335bc:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   335be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   335c0:	220a      	movs	r2, #10
   335c2:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   335c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   335c6:	220d      	movs	r2, #13
   335c8:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   335ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   335cc:	3305      	adds	r3, #5
   335ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
   335d0:	210d      	movs	r1, #13
   335d2:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   335d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   335d6:	3306      	adds	r3, #6
   335d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
   335da:	210a      	movs	r1, #10
   335dc:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   335de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   335e0:	2b00      	cmp	r3, #0
   335e2:	db14      	blt.n	3360e <_http_client_request+0x4b2>
				ptr = buffer + 2;
   335e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   335e6:	3302      	adds	r3, #2
   335e8:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   335ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   335ec:	4a9c      	ldr	r2, [pc, #624]	; (33860 <_http_client_request+0x704>)
   335ee:	4013      	ands	r3, r2
   335f0:	d504      	bpl.n	335fc <_http_client_request+0x4a0>
   335f2:	3b01      	subs	r3, #1
   335f4:	2210      	movs	r2, #16
   335f6:	4252      	negs	r2, r2
   335f8:	4313      	orrs	r3, r2
   335fa:	3301      	adds	r3, #1
   335fc:	001a      	movs	r2, r3
   335fe:	2318      	movs	r3, #24
   33600:	2118      	movs	r1, #24
   33602:	468c      	mov	ip, r1
   33604:	44bc      	add	ip, r7
   33606:	4463      	add	r3, ip
   33608:	5c9a      	ldrb	r2, [r3, r2]
   3360a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3360c:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   3360e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33610:	2b0f      	cmp	r3, #15
   33612:	dd19      	ble.n	33648 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   33614:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   33616:	3301      	adds	r3, #1
   33618:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   3361a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3361c:	2b00      	cmp	r3, #0
   3361e:	da00      	bge.n	33622 <_http_client_request+0x4c6>
   33620:	330f      	adds	r3, #15
   33622:	111b      	asrs	r3, r3, #4
   33624:	001a      	movs	r2, r3
   33626:	4b8e      	ldr	r3, [pc, #568]	; (33860 <_http_client_request+0x704>)
   33628:	4013      	ands	r3, r2
   3362a:	d504      	bpl.n	33636 <_http_client_request+0x4da>
   3362c:	3b01      	subs	r3, #1
   3362e:	2210      	movs	r2, #16
   33630:	4252      	negs	r2, r2
   33632:	4313      	orrs	r3, r2
   33634:	3301      	adds	r3, #1
   33636:	001a      	movs	r2, r3
   33638:	2318      	movs	r3, #24
   3363a:	2118      	movs	r1, #24
   3363c:	468c      	mov	ip, r1
   3363e:	44bc      	add	ip, r7
   33640:	4463      	add	r3, ip
   33642:	5c9a      	ldrb	r2, [r3, r2]
   33644:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   33646:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   33648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3364a:	2bff      	cmp	r3, #255	; 0xff
   3364c:	dd18      	ble.n	33680 <_http_client_request+0x524>
				ptr = buffer;
   3364e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   33650:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   33652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33654:	2b00      	cmp	r3, #0
   33656:	da00      	bge.n	3365a <_http_client_request+0x4fe>
   33658:	33ff      	adds	r3, #255	; 0xff
   3365a:	121b      	asrs	r3, r3, #8
   3365c:	001a      	movs	r2, r3
   3365e:	4b80      	ldr	r3, [pc, #512]	; (33860 <_http_client_request+0x704>)
   33660:	4013      	ands	r3, r2
   33662:	d504      	bpl.n	3366e <_http_client_request+0x512>
   33664:	3b01      	subs	r3, #1
   33666:	2210      	movs	r2, #16
   33668:	4252      	negs	r2, r2
   3366a:	4313      	orrs	r3, r2
   3366c:	3301      	adds	r3, #1
   3366e:	001a      	movs	r2, r3
   33670:	2318      	movs	r3, #24
   33672:	2118      	movs	r1, #24
   33674:	468c      	mov	ip, r1
   33676:	44bc      	add	ip, r7
   33678:	4463      	add	r3, ip
   3367a:	5c9a      	ldrb	r2, [r3, r2]
   3367c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3367e:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   33680:	69fb      	ldr	r3, [r7, #28]
   33682:	2000      	movs	r0, #0
   33684:	5618      	ldrsb	r0, [r3, r0]
   33686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   33688:	3303      	adds	r3, #3
   3368a:	001a      	movs	r2, r3
   3368c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3368e:	1ad3      	subs	r3, r2, r3
   33690:	b29a      	uxth	r2, r3
   33692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33694:	b29b      	uxth	r3, r3
   33696:	18d3      	adds	r3, r2, r3
   33698:	b29b      	uxth	r3, r3
   3369a:	3304      	adds	r3, #4
   3369c:	b29a      	uxth	r2, r3
   3369e:	6f39      	ldr	r1, [r7, #112]	; 0x70
   336a0:	2300      	movs	r3, #0
   336a2:	4c70      	ldr	r4, [pc, #448]	; (33864 <_http_client_request+0x708>)
   336a4:	47a0      	blx	r4
   336a6:	0003      	movs	r3, r0
   336a8:	663b      	str	r3, [r7, #96]	; 0x60
   336aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   336ac:	2b00      	cmp	r3, #0
   336ae:	da07      	bge.n	336c0 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   336b0:	2305      	movs	r3, #5
   336b2:	425a      	negs	r2, r3
   336b4:	69fb      	ldr	r3, [r7, #28]
   336b6:	0011      	movs	r1, r2
   336b8:	0018      	movs	r0, r3
   336ba:	4b6b      	ldr	r3, [pc, #428]	; (33868 <_http_client_request+0x70c>)
   336bc:	4798      	blx	r3
				return;
   336be:	e0e1      	b.n	33884 <_http_client_request+0x728>
			module->req.sent_length += size;
   336c0:	69fb      	ldr	r3, [r7, #28]
   336c2:	22d0      	movs	r2, #208	; 0xd0
   336c4:	589a      	ldr	r2, [r3, r2]
   336c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   336c8:	18d2      	adds	r2, r2, r3
   336ca:	69fb      	ldr	r3, [r7, #28]
   336cc:	21d0      	movs	r1, #208	; 0xd0
   336ce:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   336d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   336d2:	2b00      	cmp	r3, #0
   336d4:	d000      	beq.n	336d8 <_http_client_request+0x57c>
   336d6:	e0c9      	b.n	3386c <_http_client_request+0x710>
				if (module->req.entity.close) {
   336d8:	69fb      	ldr	r3, [r7, #28]
   336da:	22c0      	movs	r2, #192	; 0xc0
   336dc:	589b      	ldr	r3, [r3, r2]
   336de:	2b00      	cmp	r3, #0
   336e0:	d007      	beq.n	336f2 <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   336e2:	69fb      	ldr	r3, [r7, #28]
   336e4:	22c0      	movs	r2, #192	; 0xc0
   336e6:	589b      	ldr	r3, [r3, r2]
   336e8:	69fa      	ldr	r2, [r7, #28]
   336ea:	21c4      	movs	r1, #196	; 0xc4
   336ec:	5852      	ldr	r2, [r2, r1]
   336ee:	0010      	movs	r0, r2
   336f0:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   336f2:	69fb      	ldr	r3, [r7, #28]
   336f4:	2202      	movs	r2, #2
   336f6:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   336f8:	69fb      	ldr	r3, [r7, #28]
   336fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   336fc:	2b00      	cmp	r3, #0
   336fe:	d100      	bne.n	33702 <_http_client_request+0x5a6>
   33700:	e0b5      	b.n	3386e <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   33702:	69fb      	ldr	r3, [r7, #28]
   33704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33706:	220c      	movs	r2, #12
   33708:	2118      	movs	r1, #24
   3370a:	468c      	mov	ip, r1
   3370c:	44bc      	add	ip, r7
   3370e:	4462      	add	r2, ip
   33710:	69f8      	ldr	r0, [r7, #28]
   33712:	2101      	movs	r1, #1
   33714:	4798      	blx	r3
				break;
   33716:	e0aa      	b.n	3386e <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   33718:	69fb      	ldr	r3, [r7, #28]
   3371a:	22cc      	movs	r2, #204	; 0xcc
   3371c:	589b      	ldr	r3, [r3, r2]
   3371e:	2b00      	cmp	r3, #0
   33720:	dc00      	bgt.n	33724 <_http_client_request+0x5c8>
   33722:	e07c      	b.n	3381e <_http_client_request+0x6c2>
   33724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33726:	68db      	ldr	r3, [r3, #12]
   33728:	2b00      	cmp	r3, #0
   3372a:	d100      	bne.n	3372e <_http_client_request+0x5d2>
   3372c:	e077      	b.n	3381e <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   3372e:	69fb      	ldr	r3, [r7, #28]
   33730:	22d0      	movs	r2, #208	; 0xd0
   33732:	589a      	ldr	r2, [r3, r2]
   33734:	69fb      	ldr	r3, [r7, #28]
   33736:	21cc      	movs	r1, #204	; 0xcc
   33738:	585b      	ldr	r3, [r3, r1]
   3373a:	429a      	cmp	r2, r3
   3373c:	db1f      	blt.n	3377e <_http_client_request+0x622>
				if (module->req.entity.close) {
   3373e:	69fb      	ldr	r3, [r7, #28]
   33740:	22c0      	movs	r2, #192	; 0xc0
   33742:	589b      	ldr	r3, [r3, r2]
   33744:	2b00      	cmp	r3, #0
   33746:	d007      	beq.n	33758 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   33748:	69fb      	ldr	r3, [r7, #28]
   3374a:	22c0      	movs	r2, #192	; 0xc0
   3374c:	589b      	ldr	r3, [r3, r2]
   3374e:	69fa      	ldr	r2, [r7, #28]
   33750:	21c4      	movs	r1, #196	; 0xc4
   33752:	5852      	ldr	r2, [r2, r1]
   33754:	0010      	movs	r0, r2
   33756:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   33758:	69fb      	ldr	r3, [r7, #28]
   3375a:	2202      	movs	r2, #2
   3375c:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   3375e:	69fb      	ldr	r3, [r7, #28]
   33760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33762:	2b00      	cmp	r3, #0
   33764:	d100      	bne.n	33768 <_http_client_request+0x60c>
   33766:	e084      	b.n	33872 <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   33768:	69fb      	ldr	r3, [r7, #28]
   3376a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3376c:	220c      	movs	r2, #12
   3376e:	2118      	movs	r1, #24
   33770:	468c      	mov	ip, r1
   33772:	44bc      	add	ip, r7
   33774:	4462      	add	r2, ip
   33776:	69f8      	ldr	r0, [r7, #28]
   33778:	2101      	movs	r1, #1
   3377a:	4798      	blx	r3
				break;
   3377c:	e079      	b.n	33872 <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   3377e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33780:	68dc      	ldr	r4, [r3, #12]
   33782:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33784:	6958      	ldr	r0, [r3, #20]
   33786:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   33788:	69fb      	ldr	r3, [r7, #28]
   3378a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   3378c:	69fb      	ldr	r3, [r7, #28]
   3378e:	22d0      	movs	r2, #208	; 0xd0
   33790:	589b      	ldr	r3, [r3, r2]
   33792:	002a      	movs	r2, r5
   33794:	47a0      	blx	r4
   33796:	0003      	movs	r3, r0
   33798:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   3379a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3379c:	2b00      	cmp	r3, #0
   3379e:	da0d      	bge.n	337bc <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   337a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   337a2:	2b00      	cmp	r3, #0
   337a4:	d102      	bne.n	337ac <_http_client_request+0x650>
   337a6:	234d      	movs	r3, #77	; 0x4d
   337a8:	425b      	negs	r3, r3
   337aa:	e001      	b.n	337b0 <_http_client_request+0x654>
   337ac:	2305      	movs	r3, #5
   337ae:	425b      	negs	r3, r3
   337b0:	69fa      	ldr	r2, [r7, #28]
   337b2:	0019      	movs	r1, r3
   337b4:	0010      	movs	r0, r2
   337b6:	4b2c      	ldr	r3, [pc, #176]	; (33868 <_http_client_request+0x70c>)
   337b8:	4798      	blx	r3
			if (size < 0) {
   337ba:	e057      	b.n	3386c <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   337bc:	69fb      	ldr	r3, [r7, #28]
   337be:	22cc      	movs	r2, #204	; 0xcc
   337c0:	589a      	ldr	r2, [r3, r2]
   337c2:	69fb      	ldr	r3, [r7, #28]
   337c4:	21d0      	movs	r1, #208	; 0xd0
   337c6:	585b      	ldr	r3, [r3, r1]
   337c8:	1ad2      	subs	r2, r2, r3
   337ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   337cc:	429a      	cmp	r2, r3
   337ce:	da07      	bge.n	337e0 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   337d0:	69fb      	ldr	r3, [r7, #28]
   337d2:	22cc      	movs	r2, #204	; 0xcc
   337d4:	589a      	ldr	r2, [r3, r2]
   337d6:	69fb      	ldr	r3, [r7, #28]
   337d8:	21d0      	movs	r1, #208	; 0xd0
   337da:	585b      	ldr	r3, [r3, r1]
   337dc:	1ad3      	subs	r3, r2, r3
   337de:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   337e0:	69fb      	ldr	r3, [r7, #28]
   337e2:	2000      	movs	r0, #0
   337e4:	5618      	ldrsb	r0, [r3, r0]
   337e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   337e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   337ea:	b29a      	uxth	r2, r3
   337ec:	2300      	movs	r3, #0
   337ee:	4c1d      	ldr	r4, [pc, #116]	; (33864 <_http_client_request+0x708>)
   337f0:	47a0      	blx	r4
   337f2:	0003      	movs	r3, r0
   337f4:	663b      	str	r3, [r7, #96]	; 0x60
   337f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   337f8:	2b00      	cmp	r3, #0
   337fa:	da07      	bge.n	3380c <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   337fc:	2305      	movs	r3, #5
   337fe:	425a      	negs	r2, r3
   33800:	69fb      	ldr	r3, [r7, #28]
   33802:	0011      	movs	r1, r2
   33804:	0018      	movs	r0, r3
   33806:	4b18      	ldr	r3, [pc, #96]	; (33868 <_http_client_request+0x70c>)
   33808:	4798      	blx	r3
					return;
   3380a:	e03b      	b.n	33884 <_http_client_request+0x728>
				module->req.sent_length += size;
   3380c:	69fb      	ldr	r3, [r7, #28]
   3380e:	22d0      	movs	r2, #208	; 0xd0
   33810:	589a      	ldr	r2, [r3, r2]
   33812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33814:	18d2      	adds	r2, r2, r3
   33816:	69fb      	ldr	r3, [r7, #28]
   33818:	21d0      	movs	r1, #208	; 0xd0
   3381a:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   3381c:	e026      	b.n	3386c <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   3381e:	69fb      	ldr	r3, [r7, #28]
   33820:	2202      	movs	r2, #2
   33822:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   33824:	69fb      	ldr	r3, [r7, #28]
   33826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33828:	2b00      	cmp	r3, #0
   3382a:	d024      	beq.n	33876 <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   3382c:	69fb      	ldr	r3, [r7, #28]
   3382e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33830:	220c      	movs	r2, #12
   33832:	2118      	movs	r1, #24
   33834:	468c      	mov	ip, r1
   33836:	44bc      	add	ip, r7
   33838:	4462      	add	r2, ip
   3383a:	69f8      	ldr	r0, [r7, #28]
   3383c:	2101      	movs	r1, #1
   3383e:	4798      	blx	r3
			break;
   33840:	e019      	b.n	33876 <_http_client_request+0x71a>
   33842:	46c0      	nop			; (mov r8, r8)
   33844:	0003c29c 	.word	0x0003c29c
   33848:	00036f5d 	.word	0x00036f5d
   3384c:	0003c2a0 	.word	0x0003c2a0
   33850:	000340bd 	.word	0x000340bd
   33854:	00037057 	.word	0x00037057
   33858:	0003c228 	.word	0x0003c228
   3385c:	000340f9 	.word	0x000340f9
   33860:	8000000f 	.word	0x8000000f
   33864:	0002763d 	.word	0x0002763d
   33868:	00033009 	.word	0x00033009
		break;
   3386c:	e004      	b.n	33878 <_http_client_request+0x71c>
				break;
   3386e:	46c0      	nop			; (mov r8, r8)
   33870:	e002      	b.n	33878 <_http_client_request+0x71c>
				break;
   33872:	46c0      	nop			; (mov r8, r8)
   33874:	e000      	b.n	33878 <_http_client_request+0x71c>
			break;
   33876:	46c0      	nop			; (mov r8, r8)
   33878:	69bb      	ldr	r3, [r7, #24]
   3387a:	469d      	mov	sp, r3
   3387c:	e004      	b.n	33888 <_http_client_request+0x72c>
		return;
   3387e:	46c0      	nop			; (mov r8, r8)
   33880:	e000      	b.n	33884 <_http_client_request+0x728>
		return;
   33882:	46c0      	nop			; (mov r8, r8)
   33884:	69bb      	ldr	r3, [r7, #24]
   33886:	469d      	mov	sp, r3
	}
}
   33888:	46bd      	mov	sp, r7
   3388a:	b01e      	add	sp, #120	; 0x78
   3388c:	bc04      	pop	{r2}
   3388e:	4690      	mov	r8, r2
   33890:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33892:	46c0      	nop			; (mov r8, r8)

00033894 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   33894:	b590      	push	{r4, r7, lr}
   33896:	b083      	sub	sp, #12
   33898:	af00      	add	r7, sp, #0
   3389a:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   3389c:	687b      	ldr	r3, [r7, #4]
   3389e:	2b00      	cmp	r3, #0
   338a0:	d021      	beq.n	338e6 <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   338a2:	687b      	ldr	r3, [r7, #4]
   338a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   338a6:	687b      	ldr	r3, [r7, #4]
   338a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   338aa:	429a      	cmp	r2, r3
   338ac:	d307      	bcc.n	338be <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   338ae:	238b      	movs	r3, #139	; 0x8b
   338b0:	425a      	negs	r2, r3
   338b2:	687b      	ldr	r3, [r7, #4]
   338b4:	0011      	movs	r1, r2
   338b6:	0018      	movs	r0, r3
   338b8:	4b0d      	ldr	r3, [pc, #52]	; (338f0 <_http_client_recv_packet+0x5c>)
   338ba:	4798      	blx	r3
		return;
   338bc:	e014      	b.n	338e8 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   338be:	687b      	ldr	r3, [r7, #4]
   338c0:	2000      	movs	r0, #0
   338c2:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   338c4:	687b      	ldr	r3, [r7, #4]
   338c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   338c8:	687b      	ldr	r3, [r7, #4]
   338ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   338cc:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   338ce:	687b      	ldr	r3, [r7, #4]
   338d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   338d2:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   338d4:	687b      	ldr	r3, [r7, #4]
   338d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   338d8:	b29b      	uxth	r3, r3
   338da:	1ad3      	subs	r3, r2, r3
   338dc:	b29a      	uxth	r2, r3
   338de:	2300      	movs	r3, #0
   338e0:	4c04      	ldr	r4, [pc, #16]	; (338f4 <_http_client_recv_packet+0x60>)
   338e2:	47a0      	blx	r4
   338e4:	e000      	b.n	338e8 <_http_client_recv_packet+0x54>
		return;
   338e6:	46c0      	nop			; (mov r8, r8)
}
   338e8:	46bd      	mov	sp, r7
   338ea:	b003      	add	sp, #12
   338ec:	bd90      	pop	{r4, r7, pc}
   338ee:	46c0      	nop			; (mov r8, r8)
   338f0:	00033009 	.word	0x00033009
   338f4:	000277a1 	.word	0x000277a1

000338f8 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   338f8:	b580      	push	{r7, lr}
   338fa:	b082      	sub	sp, #8
   338fc:	af00      	add	r7, sp, #0
   338fe:	6078      	str	r0, [r7, #4]
   33900:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   33902:	687b      	ldr	r3, [r7, #4]
   33904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   33906:	683b      	ldr	r3, [r7, #0]
   33908:	18d2      	adds	r2, r2, r3
   3390a:	687b      	ldr	r3, [r7, #4]
   3390c:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   3390e:	687b      	ldr	r3, [r7, #4]
   33910:	2258      	movs	r2, #88	; 0x58
   33912:	5a9b      	ldrh	r3, [r3, r2]
   33914:	2b00      	cmp	r3, #0
   33916:	d007      	beq.n	33928 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   33918:	687b      	ldr	r3, [r7, #4]
   3391a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   3391c:	687b      	ldr	r3, [r7, #4]
   3391e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   33920:	0019      	movs	r1, r3
   33922:	0010      	movs	r0, r2
   33924:	4b06      	ldr	r3, [pc, #24]	; (33940 <_http_client_recved_packet+0x48>)
   33926:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   33928:	46c0      	nop			; (mov r8, r8)
   3392a:	687b      	ldr	r3, [r7, #4]
   3392c:	0018      	movs	r0, r3
   3392e:	4b05      	ldr	r3, [pc, #20]	; (33944 <_http_client_recved_packet+0x4c>)
   33930:	4798      	blx	r3
   33932:	1e03      	subs	r3, r0, #0
   33934:	d1f9      	bne.n	3392a <_http_client_recved_packet+0x32>
}
   33936:	46c0      	nop			; (mov r8, r8)
   33938:	46bd      	mov	sp, r7
   3393a:	b002      	add	sp, #8
   3393c:	bd80      	pop	{r7, pc}
   3393e:	46c0      	nop			; (mov r8, r8)
   33940:	000343b5 	.word	0x000343b5
   33944:	00033949 	.word	0x00033949

00033948 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   33948:	b580      	push	{r7, lr}
   3394a:	b082      	sub	sp, #8
   3394c:	af00      	add	r7, sp, #0
   3394e:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   33950:	687b      	ldr	r3, [r7, #4]
   33952:	22d8      	movs	r2, #216	; 0xd8
   33954:	589b      	ldr	r3, [r3, r2]
   33956:	2b00      	cmp	r3, #0
   33958:	d002      	beq.n	33960 <_http_client_handle_response+0x18>
   3395a:	2b01      	cmp	r3, #1
   3395c:	d006      	beq.n	3396c <_http_client_handle_response+0x24>
   3395e:	e00b      	b.n	33978 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   33960:	687b      	ldr	r3, [r7, #4]
   33962:	0018      	movs	r0, r3
   33964:	4b07      	ldr	r3, [pc, #28]	; (33984 <_http_client_handle_response+0x3c>)
   33966:	4798      	blx	r3
   33968:	0003      	movs	r3, r0
   3396a:	e006      	b.n	3397a <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   3396c:	687b      	ldr	r3, [r7, #4]
   3396e:	0018      	movs	r0, r3
   33970:	4b05      	ldr	r3, [pc, #20]	; (33988 <_http_client_handle_response+0x40>)
   33972:	4798      	blx	r3
   33974:	0003      	movs	r3, r0
   33976:	e000      	b.n	3397a <_http_client_handle_response+0x32>
	}
	return 0;
   33978:	2300      	movs	r3, #0
}
   3397a:	0018      	movs	r0, r3
   3397c:	46bd      	mov	sp, r7
   3397e:	b002      	add	sp, #8
   33980:	bd80      	pop	{r7, pc}
   33982:	46c0      	nop			; (mov r8, r8)
   33984:	0003398d 	.word	0x0003398d
   33988:	00033e45 	.word	0x00033e45

0003398c <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   3398c:	b590      	push	{r4, r7, lr}
   3398e:	b08b      	sub	sp, #44	; 0x2c
   33990:	af00      	add	r7, sp, #0
   33992:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   33994:	687b      	ldr	r3, [r7, #4]
   33996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   33998:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   3399a:	4b9a      	ldr	r3, [pc, #616]	; (33c04 <_http_client_handle_header+0x278>)
   3399c:	681a      	ldr	r2, [r3, #0]
   3399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   339a0:	0011      	movs	r1, r2
   339a2:	0018      	movs	r0, r3
   339a4:	4b98      	ldr	r3, [pc, #608]	; (33c08 <_http_client_handle_header+0x27c>)
   339a6:	4798      	blx	r3
   339a8:	0003      	movs	r3, r0
   339aa:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   339ac:	69bb      	ldr	r3, [r7, #24]
   339ae:	2b00      	cmp	r3, #0
   339b0:	d007      	beq.n	339c2 <_http_client_handle_header+0x36>
   339b2:	687b      	ldr	r3, [r7, #4]
   339b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   339b6:	687b      	ldr	r3, [r7, #4]
   339b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   339ba:	18d2      	adds	r2, r2, r3
   339bc:	69bb      	ldr	r3, [r7, #24]
   339be:	429a      	cmp	r2, r3
   339c0:	d807      	bhi.n	339d2 <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   339c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   339c4:	687b      	ldr	r3, [r7, #4]
   339c6:	0011      	movs	r1, r2
   339c8:	0018      	movs	r0, r3
   339ca:	4b90      	ldr	r3, [pc, #576]	; (33c0c <_http_client_handle_header+0x280>)
   339cc:	4798      	blx	r3
			return 0;
   339ce:	2300      	movs	r3, #0
   339d0:	e114      	b.n	33bfc <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   339d2:	4b8c      	ldr	r3, [pc, #560]	; (33c04 <_http_client_handle_header+0x278>)
   339d4:	681c      	ldr	r4, [r3, #0]
   339d6:	4b8b      	ldr	r3, [pc, #556]	; (33c04 <_http_client_handle_header+0x278>)
   339d8:	681b      	ldr	r3, [r3, #0]
   339da:	0018      	movs	r0, r3
   339dc:	4b8c      	ldr	r3, [pc, #560]	; (33c10 <_http_client_handle_header+0x284>)
   339de:	4798      	blx	r3
   339e0:	0002      	movs	r2, r0
   339e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   339e4:	0021      	movs	r1, r4
   339e6:	0018      	movs	r0, r3
   339e8:	4b8a      	ldr	r3, [pc, #552]	; (33c14 <_http_client_handle_header+0x288>)
   339ea:	4798      	blx	r3
   339ec:	1e03      	subs	r3, r0, #0
   339ee:	d15d      	bne.n	33aac <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   339f0:	4b84      	ldr	r3, [pc, #528]	; (33c04 <_http_client_handle_header+0x278>)
   339f2:	681b      	ldr	r3, [r3, #0]
   339f4:	0018      	movs	r0, r3
   339f6:	4b86      	ldr	r3, [pc, #536]	; (33c10 <_http_client_handle_header+0x284>)
   339f8:	4798      	blx	r3
   339fa:	0002      	movs	r2, r0
   339fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   339fe:	189a      	adds	r2, r3, r2
   33a00:	687b      	ldr	r3, [r7, #4]
   33a02:	0011      	movs	r1, r2
   33a04:	0018      	movs	r0, r3
   33a06:	4b81      	ldr	r3, [pc, #516]	; (33c0c <_http_client_handle_header+0x280>)
   33a08:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   33a0a:	687b      	ldr	r3, [r7, #4]
   33a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33a0e:	2b00      	cmp	r3, #0
   33a10:	d046      	beq.n	33aa0 <_http_client_handle_header+0x114>
   33a12:	687b      	ldr	r3, [r7, #4]
   33a14:	22e4      	movs	r2, #228	; 0xe4
   33a16:	5a9b      	ldrh	r3, [r3, r2]
   33a18:	2b00      	cmp	r3, #0
   33a1a:	d041      	beq.n	33aa0 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   33a1c:	687b      	ldr	r3, [r7, #4]
   33a1e:	22dc      	movs	r2, #220	; 0xdc
   33a20:	589b      	ldr	r3, [r3, r2]
   33a22:	2b00      	cmp	r3, #0
   33a24:	da19      	bge.n	33a5a <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   33a26:	687b      	ldr	r3, [r7, #4]
   33a28:	22e4      	movs	r2, #228	; 0xe4
   33a2a:	5a9a      	ldrh	r2, [r3, r2]
   33a2c:	230c      	movs	r3, #12
   33a2e:	18fb      	adds	r3, r7, r3
   33a30:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   33a32:	230c      	movs	r3, #12
   33a34:	18fb      	adds	r3, r7, r3
   33a36:	2201      	movs	r2, #1
   33a38:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   33a3a:	687b      	ldr	r3, [r7, #4]
   33a3c:	22e0      	movs	r2, #224	; 0xe0
   33a3e:	2100      	movs	r1, #0
   33a40:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   33a42:	230c      	movs	r3, #12
   33a44:	18fb      	adds	r3, r7, r3
   33a46:	2200      	movs	r2, #0
   33a48:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   33a4a:	687b      	ldr	r3, [r7, #4]
   33a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33a4e:	220c      	movs	r2, #12
   33a50:	18ba      	adds	r2, r7, r2
   33a52:	6878      	ldr	r0, [r7, #4]
   33a54:	2102      	movs	r1, #2
   33a56:	4798      	blx	r3
   33a58:	e022      	b.n	33aa0 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   33a5a:	687b      	ldr	r3, [r7, #4]
   33a5c:	22dc      	movs	r2, #220	; 0xdc
   33a5e:	589a      	ldr	r2, [r3, r2]
   33a60:	687b      	ldr	r3, [r7, #4]
   33a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   33a64:	429a      	cmp	r2, r3
   33a66:	dd1b      	ble.n	33aa0 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   33a68:	687b      	ldr	r3, [r7, #4]
   33a6a:	22e4      	movs	r2, #228	; 0xe4
   33a6c:	5a9a      	ldrh	r2, [r3, r2]
   33a6e:	230c      	movs	r3, #12
   33a70:	18fb      	adds	r3, r7, r3
   33a72:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   33a74:	687b      	ldr	r3, [r7, #4]
   33a76:	22dc      	movs	r2, #220	; 0xdc
   33a78:	589b      	ldr	r3, [r3, r2]
   33a7a:	001a      	movs	r2, r3
   33a7c:	230c      	movs	r3, #12
   33a7e:	18fb      	adds	r3, r7, r3
   33a80:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   33a82:	230c      	movs	r3, #12
   33a84:	18fb      	adds	r3, r7, r3
   33a86:	2200      	movs	r2, #0
   33a88:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   33a8a:	687b      	ldr	r3, [r7, #4]
   33a8c:	22e0      	movs	r2, #224	; 0xe0
   33a8e:	2100      	movs	r1, #0
   33a90:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   33a92:	687b      	ldr	r3, [r7, #4]
   33a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33a96:	220c      	movs	r2, #12
   33a98:	18ba      	adds	r2, r7, r2
   33a9a:	6878      	ldr	r0, [r7, #4]
   33a9c:	2102      	movs	r1, #2
   33a9e:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   33aa0:	687b      	ldr	r3, [r7, #4]
   33aa2:	22d8      	movs	r2, #216	; 0xd8
   33aa4:	2101      	movs	r1, #1
   33aa6:	5099      	str	r1, [r3, r2]
			return 1;
   33aa8:	2301      	movs	r3, #1
   33aaa:	e0a7      	b.n	33bfc <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   33aac:	495a      	ldr	r1, [pc, #360]	; (33c18 <_http_client_handle_header+0x28c>)
   33aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33ab0:	2210      	movs	r2, #16
   33ab2:	0018      	movs	r0, r3
   33ab4:	4b57      	ldr	r3, [pc, #348]	; (33c14 <_http_client_handle_header+0x288>)
   33ab6:	4798      	blx	r3
   33ab8:	1e03      	subs	r3, r0, #0
   33aba:	d109      	bne.n	33ad0 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   33abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33abe:	3310      	adds	r3, #16
   33ac0:	0018      	movs	r0, r3
   33ac2:	4b56      	ldr	r3, [pc, #344]	; (33c1c <_http_client_handle_header+0x290>)
   33ac4:	4798      	blx	r3
   33ac6:	0001      	movs	r1, r0
   33ac8:	687b      	ldr	r3, [r7, #4]
   33aca:	22dc      	movs	r2, #220	; 0xdc
   33acc:	5099      	str	r1, [r3, r2]
   33ace:	e08b      	b.n	33be8 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   33ad0:	4953      	ldr	r1, [pc, #332]	; (33c20 <_http_client_handle_header+0x294>)
   33ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33ad4:	2213      	movs	r2, #19
   33ad6:	0018      	movs	r0, r3
   33ad8:	4b4e      	ldr	r3, [pc, #312]	; (33c14 <_http_client_handle_header+0x288>)
   33ada:	4798      	blx	r3
   33adc:	1e03      	subs	r3, r0, #0
   33ade:	d127      	bne.n	33b30 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   33ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33ae2:	3313      	adds	r3, #19
   33ae4:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   33ae6:	e01e      	b.n	33b26 <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   33ae8:	6a3b      	ldr	r3, [r7, #32]
   33aea:	781b      	ldrb	r3, [r3, #0]
   33aec:	2b20      	cmp	r3, #32
   33aee:	d103      	bne.n	33af8 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   33af0:	6a3b      	ldr	r3, [r7, #32]
   33af2:	3301      	adds	r3, #1
   33af4:	623b      	str	r3, [r7, #32]
   33af6:	e016      	b.n	33b26 <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   33af8:	6a3b      	ldr	r3, [r7, #32]
   33afa:	781b      	ldrb	r3, [r3, #0]
   33afc:	2b43      	cmp	r3, #67	; 0x43
   33afe:	d003      	beq.n	33b08 <_http_client_handle_header+0x17c>
   33b00:	6a3b      	ldr	r3, [r7, #32]
   33b02:	781b      	ldrb	r3, [r3, #0]
   33b04:	2b63      	cmp	r3, #99	; 0x63
   33b06:	d105      	bne.n	33b14 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   33b08:	687b      	ldr	r3, [r7, #4]
   33b0a:	21cc      	movs	r1, #204	; 0xcc
   33b0c:	2201      	movs	r2, #1
   33b0e:	4252      	negs	r2, r2
   33b10:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   33b12:	e069      	b.n	33be8 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   33b14:	2386      	movs	r3, #134	; 0x86
   33b16:	425a      	negs	r2, r3
   33b18:	687b      	ldr	r3, [r7, #4]
   33b1a:	0011      	movs	r1, r2
   33b1c:	0018      	movs	r0, r3
   33b1e:	4b41      	ldr	r3, [pc, #260]	; (33c24 <_http_client_handle_header+0x298>)
   33b20:	4798      	blx	r3
					return 0;
   33b22:	2300      	movs	r3, #0
   33b24:	e06a      	b.n	33bfc <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   33b26:	69ba      	ldr	r2, [r7, #24]
   33b28:	6a3b      	ldr	r3, [r7, #32]
   33b2a:	429a      	cmp	r2, r3
   33b2c:	d8dc      	bhi.n	33ae8 <_http_client_handle_header+0x15c>
   33b2e:	e05b      	b.n	33be8 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   33b30:	493d      	ldr	r1, [pc, #244]	; (33c28 <_http_client_handle_header+0x29c>)
   33b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33b34:	220c      	movs	r2, #12
   33b36:	0018      	movs	r0, r3
   33b38:	4b36      	ldr	r3, [pc, #216]	; (33c14 <_http_client_handle_header+0x288>)
   33b3a:	4798      	blx	r3
   33b3c:	1e03      	subs	r3, r0, #0
   33b3e:	d126      	bne.n	33b8e <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   33b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33b42:	330c      	adds	r3, #12
   33b44:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   33b46:	e01d      	b.n	33b84 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   33b48:	69fb      	ldr	r3, [r7, #28]
   33b4a:	781b      	ldrb	r3, [r3, #0]
   33b4c:	2b20      	cmp	r3, #32
   33b4e:	d103      	bne.n	33b58 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   33b50:	69fb      	ldr	r3, [r7, #28]
   33b52:	3301      	adds	r3, #1
   33b54:	61fb      	str	r3, [r7, #28]
   33b56:	e015      	b.n	33b84 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   33b58:	69fb      	ldr	r3, [r7, #28]
   33b5a:	781b      	ldrb	r3, [r3, #0]
   33b5c:	2b4b      	cmp	r3, #75	; 0x4b
   33b5e:	d003      	beq.n	33b68 <_http_client_handle_header+0x1dc>
   33b60:	69fb      	ldr	r3, [r7, #28]
   33b62:	781b      	ldrb	r3, [r3, #0]
   33b64:	2b6b      	cmp	r3, #107	; 0x6b
   33b66:	d106      	bne.n	33b76 <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   33b68:	687b      	ldr	r3, [r7, #4]
   33b6a:	2241      	movs	r2, #65	; 0x41
   33b6c:	5c99      	ldrb	r1, [r3, r2]
   33b6e:	2002      	movs	r0, #2
   33b70:	4301      	orrs	r1, r0
   33b72:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   33b74:	e038      	b.n	33be8 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   33b76:	687b      	ldr	r3, [r7, #4]
   33b78:	2241      	movs	r2, #65	; 0x41
   33b7a:	5c99      	ldrb	r1, [r3, r2]
   33b7c:	2002      	movs	r0, #2
   33b7e:	4381      	bics	r1, r0
   33b80:	5499      	strb	r1, [r3, r2]
				break;
   33b82:	e031      	b.n	33be8 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   33b84:	69ba      	ldr	r2, [r7, #24]
   33b86:	69fb      	ldr	r3, [r7, #28]
   33b88:	429a      	cmp	r2, r3
   33b8a:	d8dd      	bhi.n	33b48 <_http_client_handle_header+0x1bc>
   33b8c:	e02c      	b.n	33be8 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   33b8e:	4927      	ldr	r1, [pc, #156]	; (33c2c <_http_client_handle_header+0x2a0>)
   33b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33b92:	2205      	movs	r2, #5
   33b94:	0018      	movs	r0, r3
   33b96:	4b1f      	ldr	r3, [pc, #124]	; (33c14 <_http_client_handle_header+0x288>)
   33b98:	4798      	blx	r3
   33b9a:	1e03      	subs	r3, r0, #0
   33b9c:	d124      	bne.n	33be8 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   33b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33ba0:	3309      	adds	r3, #9
   33ba2:	0018      	movs	r0, r3
   33ba4:	4b1d      	ldr	r3, [pc, #116]	; (33c1c <_http_client_handle_header+0x290>)
   33ba6:	4798      	blx	r3
   33ba8:	0003      	movs	r3, r0
   33baa:	b299      	uxth	r1, r3
   33bac:	687b      	ldr	r3, [r7, #4]
   33bae:	22e4      	movs	r2, #228	; 0xe4
   33bb0:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   33bb2:	687b      	ldr	r3, [r7, #4]
   33bb4:	22dc      	movs	r2, #220	; 0xdc
   33bb6:	2100      	movs	r1, #0
   33bb8:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   33bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33bbc:	3305      	adds	r3, #5
   33bbe:	781b      	ldrb	r3, [r3, #0]
   33bc0:	2b31      	cmp	r3, #49	; 0x31
   33bc2:	d804      	bhi.n	33bce <_http_client_handle_header+0x242>
   33bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33bc6:	3307      	adds	r3, #7
   33bc8:	781b      	ldrb	r3, [r3, #0]
   33bca:	2b30      	cmp	r3, #48	; 0x30
   33bcc:	d906      	bls.n	33bdc <_http_client_handle_header+0x250>
				module->permanent = 1;
   33bce:	687b      	ldr	r3, [r7, #4]
   33bd0:	2241      	movs	r2, #65	; 0x41
   33bd2:	5c99      	ldrb	r1, [r3, r2]
   33bd4:	2002      	movs	r0, #2
   33bd6:	4301      	orrs	r1, r0
   33bd8:	5499      	strb	r1, [r3, r2]
   33bda:	e005      	b.n	33be8 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   33bdc:	687b      	ldr	r3, [r7, #4]
   33bde:	2241      	movs	r2, #65	; 0x41
   33be0:	5c99      	ldrb	r1, [r3, r2]
   33be2:	2002      	movs	r0, #2
   33be4:	4381      	bics	r1, r0
   33be6:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   33be8:	4b06      	ldr	r3, [pc, #24]	; (33c04 <_http_client_handle_header+0x278>)
   33bea:	681b      	ldr	r3, [r3, #0]
   33bec:	0018      	movs	r0, r3
   33bee:	4b08      	ldr	r3, [pc, #32]	; (33c10 <_http_client_handle_header+0x284>)
   33bf0:	4798      	blx	r3
   33bf2:	0002      	movs	r2, r0
   33bf4:	69bb      	ldr	r3, [r7, #24]
   33bf6:	189b      	adds	r3, r3, r2
   33bf8:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   33bfa:	e6ce      	b.n	3399a <_http_client_handle_header+0xe>
	}
}
   33bfc:	0018      	movs	r0, r3
   33bfe:	46bd      	mov	sp, r7
   33c00:	b00b      	add	sp, #44	; 0x2c
   33c02:	bd90      	pop	{r4, r7, pc}
   33c04:	2000011c 	.word	0x2000011c
   33c08:	000370d5 	.word	0x000370d5
   33c0c:	00033ff1 	.word	0x00033ff1
   33c10:	00037057 	.word	0x00037057
   33c14:	00037065 	.word	0x00037065
   33c18:	0003c2a0 	.word	0x0003c2a0
   33c1c:	00036bed 	.word	0x00036bed
   33c20:	0003c2c4 	.word	0x0003c2c4
   33c24:	00033009 	.word	0x00033009
   33c28:	0003c2d8 	.word	0x0003c2d8
   33c2c:	0003c2e8 	.word	0x0003c2e8

00033c30 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   33c30:	b580      	push	{r7, lr}
   33c32:	b088      	sub	sp, #32
   33c34:	af00      	add	r7, sp, #0
   33c36:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   33c38:	687b      	ldr	r3, [r7, #4]
   33c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   33c3c:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   33c3e:	2300      	movs	r3, #0
   33c40:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   33c42:	687b      	ldr	r3, [r7, #4]
   33c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   33c46:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   33c48:	687b      	ldr	r3, [r7, #4]
   33c4a:	22e0      	movs	r2, #224	; 0xe0
   33c4c:	589b      	ldr	r3, [r3, r2]
   33c4e:	2b00      	cmp	r3, #0
   33c50:	db71      	blt.n	33d36 <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   33c52:	687b      	ldr	r3, [r7, #4]
   33c54:	22e0      	movs	r2, #224	; 0xe0
   33c56:	589b      	ldr	r3, [r3, r2]
   33c58:	2b00      	cmp	r3, #0
   33c5a:	d134      	bne.n	33cc6 <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   33c5c:	687b      	ldr	r3, [r7, #4]
   33c5e:	22d8      	movs	r2, #216	; 0xd8
   33c60:	2100      	movs	r1, #0
   33c62:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   33c64:	687b      	ldr	r3, [r7, #4]
   33c66:	22e4      	movs	r2, #228	; 0xe4
   33c68:	2100      	movs	r1, #0
   33c6a:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   33c6c:	2308      	movs	r3, #8
   33c6e:	18fb      	adds	r3, r7, r3
   33c70:	2201      	movs	r2, #1
   33c72:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   33c74:	2308      	movs	r3, #8
   33c76:	18fb      	adds	r3, r7, r3
   33c78:	2200      	movs	r2, #0
   33c7a:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   33c7c:	2308      	movs	r3, #8
   33c7e:	18fb      	adds	r3, r7, r3
   33c80:	2200      	movs	r2, #0
   33c82:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   33c84:	687b      	ldr	r3, [r7, #4]
   33c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33c88:	2b00      	cmp	r3, #0
   33c8a:	d006      	beq.n	33c9a <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   33c8c:	687b      	ldr	r3, [r7, #4]
   33c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33c90:	2208      	movs	r2, #8
   33c92:	18ba      	adds	r2, r7, r2
   33c94:	6878      	ldr	r0, [r7, #4]
   33c96:	2103      	movs	r1, #3
   33c98:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   33c9a:	687b      	ldr	r3, [r7, #4]
   33c9c:	2241      	movs	r2, #65	; 0x41
   33c9e:	5c9b      	ldrb	r3, [r3, r2]
   33ca0:	2202      	movs	r2, #2
   33ca2:	4013      	ands	r3, r2
   33ca4:	b2db      	uxtb	r3, r3
   33ca6:	2b00      	cmp	r3, #0
   33ca8:	d105      	bne.n	33cb6 <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   33caa:	687b      	ldr	r3, [r7, #4]
   33cac:	2100      	movs	r1, #0
   33cae:	0018      	movs	r0, r3
   33cb0:	4b62      	ldr	r3, [pc, #392]	; (33e3c <_http_client_read_chuked_entity+0x20c>)
   33cb2:	4798      	blx	r3
					return;
   33cb4:	e0bf      	b.n	33e36 <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   33cb6:	697b      	ldr	r3, [r7, #20]
   33cb8:	1c9a      	adds	r2, r3, #2
   33cba:	687b      	ldr	r3, [r7, #4]
   33cbc:	0011      	movs	r1, r2
   33cbe:	0018      	movs	r0, r3
   33cc0:	4b5f      	ldr	r3, [pc, #380]	; (33e40 <_http_client_read_chuked_entity+0x210>)
   33cc2:	4798      	blx	r3
   33cc4:	e0b2      	b.n	33e2c <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   33cc6:	687b      	ldr	r3, [r7, #4]
   33cc8:	22e0      	movs	r2, #224	; 0xe0
   33cca:	589a      	ldr	r2, [r3, r2]
   33ccc:	69fb      	ldr	r3, [r7, #28]
   33cce:	429a      	cmp	r2, r3
   33cd0:	dd00      	ble.n	33cd4 <_http_client_read_chuked_entity+0xa4>
   33cd2:	e0ab      	b.n	33e2c <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   33cd4:	687b      	ldr	r3, [r7, #4]
   33cd6:	22e0      	movs	r2, #224	; 0xe0
   33cd8:	589b      	ldr	r3, [r3, r2]
   33cda:	001a      	movs	r2, r3
   33cdc:	2308      	movs	r3, #8
   33cde:	18fb      	adds	r3, r7, r3
   33ce0:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   33ce2:	2308      	movs	r3, #8
   33ce4:	18fb      	adds	r3, r7, r3
   33ce6:	697a      	ldr	r2, [r7, #20]
   33ce8:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   33cea:	2308      	movs	r3, #8
   33cec:	18fb      	adds	r3, r7, r3
   33cee:	2200      	movs	r2, #0
   33cf0:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   33cf2:	687b      	ldr	r3, [r7, #4]
   33cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33cf6:	2b00      	cmp	r3, #0
   33cf8:	d006      	beq.n	33d08 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   33cfa:	687b      	ldr	r3, [r7, #4]
   33cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33cfe:	2208      	movs	r2, #8
   33d00:	18ba      	adds	r2, r7, r2
   33d02:	6878      	ldr	r0, [r7, #4]
   33d04:	2103      	movs	r1, #3
   33d06:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   33d08:	687b      	ldr	r3, [r7, #4]
   33d0a:	22e0      	movs	r2, #224	; 0xe0
   33d0c:	589b      	ldr	r3, [r3, r2]
   33d0e:	3302      	adds	r3, #2
   33d10:	697a      	ldr	r2, [r7, #20]
   33d12:	18d2      	adds	r2, r2, r3
   33d14:	687b      	ldr	r3, [r7, #4]
   33d16:	0011      	movs	r1, r2
   33d18:	0018      	movs	r0, r3
   33d1a:	4b49      	ldr	r3, [pc, #292]	; (33e40 <_http_client_read_chuked_entity+0x210>)
   33d1c:	4798      	blx	r3
				length = (int)module->recved_size;
   33d1e:	687b      	ldr	r3, [r7, #4]
   33d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   33d22:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   33d24:	687b      	ldr	r3, [r7, #4]
   33d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   33d28:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   33d2a:	687b      	ldr	r3, [r7, #4]
   33d2c:	21e0      	movs	r1, #224	; 0xe0
   33d2e:	2201      	movs	r2, #1
   33d30:	4252      	negs	r2, r2
   33d32:	505a      	str	r2, [r3, r1]
   33d34:	e07a      	b.n	33e2c <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   33d36:	687b      	ldr	r3, [r7, #4]
   33d38:	22e0      	movs	r2, #224	; 0xe0
   33d3a:	2100      	movs	r1, #0
   33d3c:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   33d3e:	e05a      	b.n	33df6 <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   33d40:	697b      	ldr	r3, [r7, #20]
   33d42:	781b      	ldrb	r3, [r3, #0]
   33d44:	2b0a      	cmp	r3, #10
   33d46:	d106      	bne.n	33d56 <_http_client_read_chuked_entity+0x126>
					buffer++;
   33d48:	697b      	ldr	r3, [r7, #20]
   33d4a:	3301      	adds	r3, #1
   33d4c:	617b      	str	r3, [r7, #20]
					length--;
   33d4e:	69fb      	ldr	r3, [r7, #28]
   33d50:	3b01      	subs	r3, #1
   33d52:	61fb      	str	r3, [r7, #28]
					break;
   33d54:	e052      	b.n	33dfc <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   33d56:	69bb      	ldr	r3, [r7, #24]
   33d58:	2b00      	cmp	r3, #0
   33d5a:	d145      	bne.n	33de8 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   33d5c:	697b      	ldr	r3, [r7, #20]
   33d5e:	781b      	ldrb	r3, [r3, #0]
   33d60:	2b2f      	cmp	r3, #47	; 0x2f
   33d62:	d910      	bls.n	33d86 <_http_client_read_chuked_entity+0x156>
   33d64:	697b      	ldr	r3, [r7, #20]
   33d66:	781b      	ldrb	r3, [r3, #0]
   33d68:	2b39      	cmp	r3, #57	; 0x39
   33d6a:	d80c      	bhi.n	33d86 <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   33d6c:	687b      	ldr	r3, [r7, #4]
   33d6e:	22e0      	movs	r2, #224	; 0xe0
   33d70:	589b      	ldr	r3, [r3, r2]
   33d72:	011b      	lsls	r3, r3, #4
   33d74:	697a      	ldr	r2, [r7, #20]
   33d76:	7812      	ldrb	r2, [r2, #0]
   33d78:	189b      	adds	r3, r3, r2
   33d7a:	3b30      	subs	r3, #48	; 0x30
   33d7c:	001a      	movs	r2, r3
   33d7e:	687b      	ldr	r3, [r7, #4]
   33d80:	21e0      	movs	r1, #224	; 0xe0
   33d82:	505a      	str	r2, [r3, r1]
   33d84:	e031      	b.n	33dea <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   33d86:	697b      	ldr	r3, [r7, #20]
   33d88:	781b      	ldrb	r3, [r3, #0]
   33d8a:	2b60      	cmp	r3, #96	; 0x60
   33d8c:	d910      	bls.n	33db0 <_http_client_read_chuked_entity+0x180>
   33d8e:	697b      	ldr	r3, [r7, #20]
   33d90:	781b      	ldrb	r3, [r3, #0]
   33d92:	2b66      	cmp	r3, #102	; 0x66
   33d94:	d80c      	bhi.n	33db0 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   33d96:	687b      	ldr	r3, [r7, #4]
   33d98:	22e0      	movs	r2, #224	; 0xe0
   33d9a:	589b      	ldr	r3, [r3, r2]
   33d9c:	011b      	lsls	r3, r3, #4
   33d9e:	697a      	ldr	r2, [r7, #20]
   33da0:	7812      	ldrb	r2, [r2, #0]
   33da2:	189b      	adds	r3, r3, r2
   33da4:	3b61      	subs	r3, #97	; 0x61
   33da6:	001a      	movs	r2, r3
   33da8:	687b      	ldr	r3, [r7, #4]
   33daa:	21e0      	movs	r1, #224	; 0xe0
   33dac:	505a      	str	r2, [r3, r1]
   33dae:	e01c      	b.n	33dea <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   33db0:	697b      	ldr	r3, [r7, #20]
   33db2:	781b      	ldrb	r3, [r3, #0]
   33db4:	2b40      	cmp	r3, #64	; 0x40
   33db6:	d910      	bls.n	33dda <_http_client_read_chuked_entity+0x1aa>
   33db8:	697b      	ldr	r3, [r7, #20]
   33dba:	781b      	ldrb	r3, [r3, #0]
   33dbc:	2b46      	cmp	r3, #70	; 0x46
   33dbe:	d80c      	bhi.n	33dda <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   33dc0:	687b      	ldr	r3, [r7, #4]
   33dc2:	22e0      	movs	r2, #224	; 0xe0
   33dc4:	589b      	ldr	r3, [r3, r2]
   33dc6:	011b      	lsls	r3, r3, #4
   33dc8:	697a      	ldr	r2, [r7, #20]
   33dca:	7812      	ldrb	r2, [r2, #0]
   33dcc:	189b      	adds	r3, r3, r2
   33dce:	3b41      	subs	r3, #65	; 0x41
   33dd0:	001a      	movs	r2, r3
   33dd2:	687b      	ldr	r3, [r7, #4]
   33dd4:	21e0      	movs	r1, #224	; 0xe0
   33dd6:	505a      	str	r2, [r3, r1]
   33dd8:	e007      	b.n	33dea <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   33dda:	697b      	ldr	r3, [r7, #20]
   33ddc:	781b      	ldrb	r3, [r3, #0]
   33dde:	2b3b      	cmp	r3, #59	; 0x3b
   33de0:	d103      	bne.n	33dea <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   33de2:	2301      	movs	r3, #1
   33de4:	61bb      	str	r3, [r7, #24]
   33de6:	e000      	b.n	33dea <_http_client_read_chuked_entity+0x1ba>
					continue;
   33de8:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   33dea:	697b      	ldr	r3, [r7, #20]
   33dec:	3301      	adds	r3, #1
   33dee:	617b      	str	r3, [r7, #20]
   33df0:	69fb      	ldr	r3, [r7, #28]
   33df2:	3b01      	subs	r3, #1
   33df4:	61fb      	str	r3, [r7, #28]
   33df6:	69fb      	ldr	r3, [r7, #28]
   33df8:	2b00      	cmp	r3, #0
   33dfa:	dca1      	bgt.n	33d40 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   33dfc:	687b      	ldr	r3, [r7, #4]
   33dfe:	22e0      	movs	r2, #224	; 0xe0
   33e00:	589a      	ldr	r2, [r3, r2]
   33e02:	687b      	ldr	r3, [r7, #4]
   33e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   33e06:	429a      	cmp	r2, r3
   33e08:	dd07      	ble.n	33e1a <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   33e0a:	238b      	movs	r3, #139	; 0x8b
   33e0c:	425a      	negs	r2, r3
   33e0e:	687b      	ldr	r3, [r7, #4]
   33e10:	0011      	movs	r1, r2
   33e12:	0018      	movs	r0, r3
   33e14:	4b09      	ldr	r3, [pc, #36]	; (33e3c <_http_client_read_chuked_entity+0x20c>)
   33e16:	4798      	blx	r3
				return;
   33e18:	e00d      	b.n	33e36 <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   33e1a:	69fb      	ldr	r3, [r7, #28]
   33e1c:	2b00      	cmp	r3, #0
   33e1e:	d105      	bne.n	33e2c <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   33e20:	687b      	ldr	r3, [r7, #4]
   33e22:	21e0      	movs	r1, #224	; 0xe0
   33e24:	2201      	movs	r2, #1
   33e26:	4252      	negs	r2, r2
   33e28:	505a      	str	r2, [r3, r1]
				return;
   33e2a:	e004      	b.n	33e36 <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   33e2c:	687b      	ldr	r3, [r7, #4]
   33e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   33e30:	2b00      	cmp	r3, #0
   33e32:	d000      	beq.n	33e36 <_http_client_read_chuked_entity+0x206>
   33e34:	e708      	b.n	33c48 <_http_client_read_chuked_entity+0x18>
}
   33e36:	46bd      	mov	sp, r7
   33e38:	b008      	add	sp, #32
   33e3a:	bd80      	pop	{r7, pc}
   33e3c:	00033009 	.word	0x00033009
   33e40:	00033ff1 	.word	0x00033ff1

00033e44 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   33e44:	b580      	push	{r7, lr}
   33e46:	b086      	sub	sp, #24
   33e48:	af00      	add	r7, sp, #0
   33e4a:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   33e4c:	687b      	ldr	r3, [r7, #4]
   33e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   33e50:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   33e52:	687b      	ldr	r3, [r7, #4]
   33e54:	22dc      	movs	r2, #220	; 0xdc
   33e56:	589b      	ldr	r3, [r3, r2]
   33e58:	2b00      	cmp	r3, #0
   33e5a:	db58      	blt.n	33f0e <_http_client_handle_entity+0xca>
   33e5c:	687b      	ldr	r3, [r7, #4]
   33e5e:	22dc      	movs	r2, #220	; 0xdc
   33e60:	589a      	ldr	r2, [r3, r2]
   33e62:	687b      	ldr	r3, [r7, #4]
   33e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   33e66:	429a      	cmp	r2, r3
   33e68:	dc51      	bgt.n	33f0e <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   33e6a:	687b      	ldr	r3, [r7, #4]
   33e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   33e6e:	0019      	movs	r1, r3
   33e70:	687b      	ldr	r3, [r7, #4]
   33e72:	22dc      	movs	r2, #220	; 0xdc
   33e74:	589b      	ldr	r3, [r3, r2]
   33e76:	4299      	cmp	r1, r3
   33e78:	da00      	bge.n	33e7c <_http_client_handle_entity+0x38>
   33e7a:	e0a9      	b.n	33fd0 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   33e7c:	687b      	ldr	r3, [r7, #4]
   33e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33e80:	2b00      	cmp	r3, #0
   33e82:	d020      	beq.n	33ec6 <_http_client_handle_entity+0x82>
   33e84:	687b      	ldr	r3, [r7, #4]
   33e86:	22e4      	movs	r2, #228	; 0xe4
   33e88:	5a9b      	ldrh	r3, [r3, r2]
   33e8a:	2b00      	cmp	r3, #0
   33e8c:	d01b      	beq.n	33ec6 <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   33e8e:	687b      	ldr	r3, [r7, #4]
   33e90:	22e4      	movs	r2, #228	; 0xe4
   33e92:	5a9a      	ldrh	r2, [r3, r2]
   33e94:	2308      	movs	r3, #8
   33e96:	18fb      	adds	r3, r7, r3
   33e98:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   33e9a:	2308      	movs	r3, #8
   33e9c:	18fb      	adds	r3, r7, r3
   33e9e:	2200      	movs	r2, #0
   33ea0:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   33ea2:	687b      	ldr	r3, [r7, #4]
   33ea4:	22dc      	movs	r2, #220	; 0xdc
   33ea6:	589b      	ldr	r3, [r3, r2]
   33ea8:	001a      	movs	r2, r3
   33eaa:	2308      	movs	r3, #8
   33eac:	18fb      	adds	r3, r7, r3
   33eae:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   33eb0:	2308      	movs	r3, #8
   33eb2:	18fb      	adds	r3, r7, r3
   33eb4:	697a      	ldr	r2, [r7, #20]
   33eb6:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   33eb8:	687b      	ldr	r3, [r7, #4]
   33eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33ebc:	2208      	movs	r2, #8
   33ebe:	18ba      	adds	r2, r7, r2
   33ec0:	6878      	ldr	r0, [r7, #4]
   33ec2:	2102      	movs	r1, #2
   33ec4:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   33ec6:	687b      	ldr	r3, [r7, #4]
   33ec8:	22d8      	movs	r2, #216	; 0xd8
   33eca:	2100      	movs	r1, #0
   33ecc:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   33ece:	687b      	ldr	r3, [r7, #4]
   33ed0:	22e4      	movs	r2, #228	; 0xe4
   33ed2:	2100      	movs	r1, #0
   33ed4:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   33ed6:	687b      	ldr	r3, [r7, #4]
   33ed8:	2241      	movs	r2, #65	; 0x41
   33eda:	5c9b      	ldrb	r3, [r3, r2]
   33edc:	2202      	movs	r2, #2
   33ede:	4013      	ands	r3, r2
   33ee0:	b2db      	uxtb	r3, r3
   33ee2:	2b00      	cmp	r3, #0
   33ee4:	d105      	bne.n	33ef2 <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   33ee6:	687b      	ldr	r3, [r7, #4]
   33ee8:	2100      	movs	r1, #0
   33eea:	0018      	movs	r0, r3
   33eec:	4b3b      	ldr	r3, [pc, #236]	; (33fdc <_http_client_handle_entity+0x198>)
   33eee:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   33ef0:	e06e      	b.n	33fd0 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   33ef2:	687b      	ldr	r3, [r7, #4]
   33ef4:	22dc      	movs	r2, #220	; 0xdc
   33ef6:	589b      	ldr	r3, [r3, r2]
   33ef8:	001a      	movs	r2, r3
   33efa:	697b      	ldr	r3, [r7, #20]
   33efc:	189a      	adds	r2, r3, r2
   33efe:	687b      	ldr	r3, [r7, #4]
   33f00:	0011      	movs	r1, r2
   33f02:	0018      	movs	r0, r3
   33f04:	4b36      	ldr	r3, [pc, #216]	; (33fe0 <_http_client_handle_entity+0x19c>)
   33f06:	4798      	blx	r3
				return module->recved_size;
   33f08:	687b      	ldr	r3, [r7, #4]
   33f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   33f0c:	e061      	b.n	33fd2 <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   33f0e:	687b      	ldr	r3, [r7, #4]
   33f10:	22dc      	movs	r2, #220	; 0xdc
   33f12:	589b      	ldr	r3, [r3, r2]
   33f14:	2b00      	cmp	r3, #0
   33f16:	db57      	blt.n	33fc8 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   33f18:	687b      	ldr	r3, [r7, #4]
   33f1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   33f1c:	2308      	movs	r3, #8
   33f1e:	18fb      	adds	r3, r7, r3
   33f20:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   33f22:	2308      	movs	r3, #8
   33f24:	18fb      	adds	r3, r7, r3
   33f26:	697a      	ldr	r2, [r7, #20]
   33f28:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   33f2a:	687b      	ldr	r3, [r7, #4]
   33f2c:	22e0      	movs	r2, #224	; 0xe0
   33f2e:	589a      	ldr	r2, [r3, r2]
   33f30:	687b      	ldr	r3, [r7, #4]
   33f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   33f34:	18d2      	adds	r2, r2, r3
   33f36:	687b      	ldr	r3, [r7, #4]
   33f38:	21e0      	movs	r1, #224	; 0xe0
   33f3a:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   33f3c:	687b      	ldr	r3, [r7, #4]
   33f3e:	22dc      	movs	r2, #220	; 0xdc
   33f40:	589a      	ldr	r2, [r3, r2]
   33f42:	687b      	ldr	r3, [r7, #4]
   33f44:	21e0      	movs	r1, #224	; 0xe0
   33f46:	585b      	ldr	r3, [r3, r1]
   33f48:	429a      	cmp	r2, r3
   33f4a:	dc0c      	bgt.n	33f66 <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   33f4c:	687b      	ldr	r3, [r7, #4]
   33f4e:	22d8      	movs	r2, #216	; 0xd8
   33f50:	2100      	movs	r1, #0
   33f52:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   33f54:	687b      	ldr	r3, [r7, #4]
   33f56:	22e4      	movs	r2, #228	; 0xe4
   33f58:	2100      	movs	r1, #0
   33f5a:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   33f5c:	2308      	movs	r3, #8
   33f5e:	18fb      	adds	r3, r7, r3
   33f60:	2201      	movs	r2, #1
   33f62:	721a      	strb	r2, [r3, #8]
   33f64:	e003      	b.n	33f6e <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   33f66:	2308      	movs	r3, #8
   33f68:	18fb      	adds	r3, r7, r3
   33f6a:	2200      	movs	r2, #0
   33f6c:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   33f6e:	687b      	ldr	r3, [r7, #4]
   33f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33f72:	2b00      	cmp	r3, #0
   33f74:	d006      	beq.n	33f84 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   33f76:	687b      	ldr	r3, [r7, #4]
   33f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33f7a:	2208      	movs	r2, #8
   33f7c:	18ba      	adds	r2, r7, r2
   33f7e:	6878      	ldr	r0, [r7, #4]
   33f80:	2103      	movs	r1, #3
   33f82:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   33f84:	2308      	movs	r3, #8
   33f86:	18fb      	adds	r3, r7, r3
   33f88:	7a1b      	ldrb	r3, [r3, #8]
   33f8a:	2b01      	cmp	r3, #1
   33f8c:	d112      	bne.n	33fb4 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   33f8e:	687b      	ldr	r3, [r7, #4]
   33f90:	2241      	movs	r2, #65	; 0x41
   33f92:	5c9b      	ldrb	r3, [r3, r2]
   33f94:	2202      	movs	r2, #2
   33f96:	4013      	ands	r3, r2
   33f98:	b2db      	uxtb	r3, r3
   33f9a:	2b00      	cmp	r3, #0
   33f9c:	d10a      	bne.n	33fb4 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   33f9e:	4b11      	ldr	r3, [pc, #68]	; (33fe4 <_http_client_handle_entity+0x1a0>)
   33fa0:	0018      	movs	r0, r3
   33fa2:	4b11      	ldr	r3, [pc, #68]	; (33fe8 <_http_client_handle_entity+0x1a4>)
   33fa4:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   33fa6:	687b      	ldr	r3, [r7, #4]
   33fa8:	2100      	movs	r1, #0
   33faa:	0018      	movs	r0, r3
   33fac:	4b0b      	ldr	r3, [pc, #44]	; (33fdc <_http_client_handle_entity+0x198>)
   33fae:	4798      	blx	r3
					return 0;
   33fb0:	2300      	movs	r3, #0
   33fb2:	e00e      	b.n	33fd2 <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   33fb4:	687b      	ldr	r3, [r7, #4]
   33fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   33fb8:	697a      	ldr	r2, [r7, #20]
   33fba:	18d2      	adds	r2, r2, r3
   33fbc:	687b      	ldr	r3, [r7, #4]
   33fbe:	0011      	movs	r1, r2
   33fc0:	0018      	movs	r0, r3
   33fc2:	4b07      	ldr	r3, [pc, #28]	; (33fe0 <_http_client_handle_entity+0x19c>)
   33fc4:	4798      	blx	r3
   33fc6:	e003      	b.n	33fd0 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   33fc8:	687b      	ldr	r3, [r7, #4]
   33fca:	0018      	movs	r0, r3
   33fcc:	4b07      	ldr	r3, [pc, #28]	; (33fec <_http_client_handle_entity+0x1a8>)
   33fce:	4798      	blx	r3
		}
	}

	return 0;
   33fd0:	2300      	movs	r3, #0
}
   33fd2:	0018      	movs	r0, r3
   33fd4:	46bd      	mov	sp, r7
   33fd6:	b006      	add	sp, #24
   33fd8:	bd80      	pop	{r7, pc}
   33fda:	46c0      	nop			; (mov r8, r8)
   33fdc:	00033009 	.word	0x00033009
   33fe0:	00033ff1 	.word	0x00033ff1
   33fe4:	0003c2f0 	.word	0x0003c2f0
   33fe8:	00036ec1 	.word	0x00036ec1
   33fec:	00033c31 	.word	0x00033c31

00033ff0 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   33ff0:	b580      	push	{r7, lr}
   33ff2:	b084      	sub	sp, #16
   33ff4:	af00      	add	r7, sp, #0
   33ff6:	6078      	str	r0, [r7, #4]
   33ff8:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   33ffa:	687b      	ldr	r3, [r7, #4]
   33ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   33ffe:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   34000:	687b      	ldr	r3, [r7, #4]
   34002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   34004:	001a      	movs	r2, r3
   34006:	683b      	ldr	r3, [r7, #0]
   34008:	1ad2      	subs	r2, r2, r3
   3400a:	68fb      	ldr	r3, [r7, #12]
   3400c:	18d3      	adds	r3, r2, r3
   3400e:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   34010:	68bb      	ldr	r3, [r7, #8]
   34012:	2b00      	cmp	r3, #0
   34014:	dd09      	ble.n	3402a <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   34016:	68ba      	ldr	r2, [r7, #8]
   34018:	6839      	ldr	r1, [r7, #0]
   3401a:	68fb      	ldr	r3, [r7, #12]
   3401c:	0018      	movs	r0, r3
   3401e:	4b06      	ldr	r3, [pc, #24]	; (34038 <_http_client_move_buffer+0x48>)
   34020:	4798      	blx	r3
		module->recved_size = remain;
   34022:	68ba      	ldr	r2, [r7, #8]
   34024:	687b      	ldr	r3, [r7, #4]
   34026:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   34028:	e002      	b.n	34030 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   3402a:	687b      	ldr	r3, [r7, #4]
   3402c:	2200      	movs	r2, #0
   3402e:	645a      	str	r2, [r3, #68]	; 0x44
}
   34030:	46c0      	nop			; (mov r8, r8)
   34032:	46bd      	mov	sp, r7
   34034:	b004      	add	sp, #16
   34036:	bd80      	pop	{r7, pc}
   34038:	00036c7b 	.word	0x00036c7b

0003403c <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   3403c:	b580      	push	{r7, lr}
   3403e:	b084      	sub	sp, #16
   34040:	af00      	add	r7, sp, #0
   34042:	60f8      	str	r0, [r7, #12]
   34044:	60b9      	str	r1, [r7, #8]
   34046:	607a      	str	r2, [r7, #4]
   34048:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   3404a:	68fb      	ldr	r3, [r7, #12]
   3404c:	687a      	ldr	r2, [r7, #4]
   3404e:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   34050:	68fb      	ldr	r3, [r7, #12]
   34052:	68ba      	ldr	r2, [r7, #8]
   34054:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   34056:	68fb      	ldr	r3, [r7, #12]
   34058:	2200      	movs	r2, #0
   3405a:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   3405c:	68fb      	ldr	r3, [r7, #12]
   3405e:	683a      	ldr	r2, [r7, #0]
   34060:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   34062:	68fb      	ldr	r3, [r7, #12]
   34064:	69ba      	ldr	r2, [r7, #24]
   34066:	60da      	str	r2, [r3, #12]
}
   34068:	46c0      	nop			; (mov r8, r8)
   3406a:	46bd      	mov	sp, r7
   3406c:	b004      	add	sp, #16
   3406e:	bd80      	pop	{r7, pc}

00034070 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   34070:	b580      	push	{r7, lr}
   34072:	b084      	sub	sp, #16
   34074:	af00      	add	r7, sp, #0
   34076:	6078      	str	r0, [r7, #4]
   34078:	000a      	movs	r2, r1
   3407a:	1cfb      	adds	r3, r7, #3
   3407c:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   3407e:	687b      	ldr	r3, [r7, #4]
   34080:	681a      	ldr	r2, [r3, #0]
   34082:	687b      	ldr	r3, [r7, #4]
   34084:	685b      	ldr	r3, [r3, #4]
   34086:	1ad3      	subs	r3, r2, r3
   34088:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   3408a:	68fb      	ldr	r3, [r7, #12]
   3408c:	2b00      	cmp	r3, #0
   3408e:	dc03      	bgt.n	34098 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   34090:	687b      	ldr	r3, [r7, #4]
   34092:	0018      	movs	r0, r3
   34094:	4b08      	ldr	r3, [pc, #32]	; (340b8 <stream_writer_send_8+0x48>)
   34096:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   34098:	687b      	ldr	r3, [r7, #4]
   3409a:	6919      	ldr	r1, [r3, #16]
   3409c:	687b      	ldr	r3, [r7, #4]
   3409e:	685b      	ldr	r3, [r3, #4]
   340a0:	1c58      	adds	r0, r3, #1
   340a2:	687a      	ldr	r2, [r7, #4]
   340a4:	6050      	str	r0, [r2, #4]
   340a6:	18cb      	adds	r3, r1, r3
   340a8:	1cfa      	adds	r2, r7, #3
   340aa:	7812      	ldrb	r2, [r2, #0]
   340ac:	701a      	strb	r2, [r3, #0]
}
   340ae:	46c0      	nop			; (mov r8, r8)
   340b0:	46bd      	mov	sp, r7
   340b2:	b004      	add	sp, #16
   340b4:	bd80      	pop	{r7, pc}
   340b6:	46c0      	nop			; (mov r8, r8)
   340b8:	000340f9 	.word	0x000340f9

000340bc <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   340bc:	b580      	push	{r7, lr}
   340be:	b084      	sub	sp, #16
   340c0:	af00      	add	r7, sp, #0
   340c2:	60f8      	str	r0, [r7, #12]
   340c4:	60b9      	str	r1, [r7, #8]
   340c6:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   340c8:	e00d      	b.n	340e6 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   340ca:	68bb      	ldr	r3, [r7, #8]
   340cc:	781b      	ldrb	r3, [r3, #0]
   340ce:	b25a      	sxtb	r2, r3
   340d0:	68fb      	ldr	r3, [r7, #12]
   340d2:	0011      	movs	r1, r2
   340d4:	0018      	movs	r0, r3
   340d6:	4b07      	ldr	r3, [pc, #28]	; (340f4 <stream_writer_send_buffer+0x38>)
   340d8:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   340da:	687b      	ldr	r3, [r7, #4]
   340dc:	3b01      	subs	r3, #1
   340de:	607b      	str	r3, [r7, #4]
   340e0:	68bb      	ldr	r3, [r7, #8]
   340e2:	3301      	adds	r3, #1
   340e4:	60bb      	str	r3, [r7, #8]
   340e6:	687b      	ldr	r3, [r7, #4]
   340e8:	2b00      	cmp	r3, #0
   340ea:	d1ee      	bne.n	340ca <stream_writer_send_buffer+0xe>
	}
}
   340ec:	46c0      	nop			; (mov r8, r8)
   340ee:	46bd      	mov	sp, r7
   340f0:	b004      	add	sp, #16
   340f2:	bd80      	pop	{r7, pc}
   340f4:	00034071 	.word	0x00034071

000340f8 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   340f8:	b590      	push	{r4, r7, lr}
   340fa:	b083      	sub	sp, #12
   340fc:	af00      	add	r7, sp, #0
   340fe:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   34100:	687b      	ldr	r3, [r7, #4]
   34102:	685b      	ldr	r3, [r3, #4]
   34104:	2b00      	cmp	r3, #0
   34106:	d00c      	beq.n	34122 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   34108:	687b      	ldr	r3, [r7, #4]
   3410a:	689c      	ldr	r4, [r3, #8]
   3410c:	687b      	ldr	r3, [r7, #4]
   3410e:	68d8      	ldr	r0, [r3, #12]
   34110:	687b      	ldr	r3, [r7, #4]
   34112:	6919      	ldr	r1, [r3, #16]
   34114:	687b      	ldr	r3, [r7, #4]
   34116:	685b      	ldr	r3, [r3, #4]
   34118:	001a      	movs	r2, r3
   3411a:	47a0      	blx	r4
		writer->written = 0;
   3411c:	687b      	ldr	r3, [r7, #4]
   3411e:	2200      	movs	r2, #0
   34120:	605a      	str	r2, [r3, #4]
	}
}
   34122:	46c0      	nop			; (mov r8, r8)
   34124:	46bd      	mov	sp, r7
   34126:	b003      	add	sp, #12
   34128:	bd90      	pop	{r4, r7, pc}
	...

0003412c <system_cpu_clock_get_hz>:
{
   3412c:	b580      	push	{r7, lr}
   3412e:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   34130:	2000      	movs	r0, #0
   34132:	4b05      	ldr	r3, [pc, #20]	; (34148 <system_cpu_clock_get_hz+0x1c>)
   34134:	4798      	blx	r3
   34136:	0002      	movs	r2, r0
   34138:	4b04      	ldr	r3, [pc, #16]	; (3414c <system_cpu_clock_get_hz+0x20>)
   3413a:	7a1b      	ldrb	r3, [r3, #8]
   3413c:	b2db      	uxtb	r3, r3
   3413e:	40da      	lsrs	r2, r3
   34140:	0013      	movs	r3, r2
}
   34142:	0018      	movs	r0, r3
   34144:	46bd      	mov	sp, r7
   34146:	bd80      	pop	{r7, pc}
   34148:	0002bb65 	.word	0x0002bb65
   3414c:	40000400 	.word	0x40000400

00034150 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   34150:	b580      	push	{r7, lr}
   34152:	b084      	sub	sp, #16
   34154:	af00      	add	r7, sp, #0
   34156:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   34158:	687b      	ldr	r3, [r7, #4]
   3415a:	681b      	ldr	r3, [r3, #0]
   3415c:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   3415e:	46c0      	nop			; (mov r8, r8)
   34160:	68fb      	ldr	r3, [r7, #12]
   34162:	689b      	ldr	r3, [r3, #8]
   34164:	2202      	movs	r2, #2
   34166:	4013      	ands	r3, r2
   34168:	d1fa      	bne.n	34160 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   3416a:	68fb      	ldr	r3, [r7, #12]
   3416c:	681b      	ldr	r3, [r3, #0]
   3416e:	2202      	movs	r2, #2
   34170:	431a      	orrs	r2, r3
   34172:	68fb      	ldr	r3, [r7, #12]
   34174:	601a      	str	r2, [r3, #0]
}
   34176:	46c0      	nop			; (mov r8, r8)
   34178:	46bd      	mov	sp, r7
   3417a:	b004      	add	sp, #16
   3417c:	bd80      	pop	{r7, pc}
	...

00034180 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   34180:	b580      	push	{r7, lr}
   34182:	b082      	sub	sp, #8
   34184:	af00      	add	r7, sp, #0
   34186:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   34188:	4b04      	ldr	r3, [pc, #16]	; (3419c <sw_timer_tcc_callback+0x1c>)
   3418a:	681b      	ldr	r3, [r3, #0]
   3418c:	1c5a      	adds	r2, r3, #1
   3418e:	4b03      	ldr	r3, [pc, #12]	; (3419c <sw_timer_tcc_callback+0x1c>)
   34190:	601a      	str	r2, [r3, #0]
}
   34192:	46c0      	nop			; (mov r8, r8)
   34194:	46bd      	mov	sp, r7
   34196:	b002      	add	sp, #8
   34198:	bd80      	pop	{r7, pc}
   3419a:	46c0      	nop			; (mov r8, r8)
   3419c:	2000432c 	.word	0x2000432c

000341a0 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   341a0:	b580      	push	{r7, lr}
   341a2:	b082      	sub	sp, #8
   341a4:	af00      	add	r7, sp, #0
   341a6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   341a8:	687b      	ldr	r3, [r7, #4]
   341aa:	2264      	movs	r2, #100	; 0x64
   341ac:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   341ae:	687b      	ldr	r3, [r7, #4]
   341b0:	2200      	movs	r2, #0
   341b2:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   341b4:	687b      	ldr	r3, [r7, #4]
   341b6:	2200      	movs	r2, #0
   341b8:	705a      	strb	r2, [r3, #1]
}
   341ba:	46c0      	nop			; (mov r8, r8)
   341bc:	46bd      	mov	sp, r7
   341be:	b002      	add	sp, #8
   341c0:	bd80      	pop	{r7, pc}
	...

000341c4 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   341c4:	b590      	push	{r4, r7, lr}
   341c6:	b0b1      	sub	sp, #196	; 0xc4
   341c8:	af00      	add	r7, sp, #0
   341ca:	6078      	str	r0, [r7, #4]
   341cc:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   341ce:	230c      	movs	r3, #12
   341d0:	18fb      	adds	r3, r7, r3
   341d2:	4a2e      	ldr	r2, [pc, #184]	; (3428c <sw_timer_init+0xc8>)
   341d4:	ca13      	ldmia	r2!, {r0, r1, r4}
   341d6:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   341d8:	683b      	ldr	r3, [r7, #0]
   341da:	885b      	ldrh	r3, [r3, #2]
   341dc:	001a      	movs	r2, r3
   341de:	687b      	ldr	r3, [r7, #4]
   341e0:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   341e2:	687b      	ldr	r3, [r7, #4]
   341e4:	3314      	adds	r3, #20
   341e6:	22bc      	movs	r2, #188	; 0xbc
   341e8:	18ba      	adds	r2, r7, r2
   341ea:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   341ec:	683b      	ldr	r3, [r7, #0]
   341ee:	781b      	ldrb	r3, [r3, #0]
   341f0:	001a      	movs	r2, r3
   341f2:	230c      	movs	r3, #12
   341f4:	18fb      	adds	r3, r7, r3
   341f6:	0092      	lsls	r2, r2, #2
   341f8:	58d2      	ldr	r2, [r2, r3]
   341fa:	2318      	movs	r3, #24
   341fc:	18fb      	adds	r3, r7, r3
   341fe:	0011      	movs	r1, r2
   34200:	0018      	movs	r0, r3
   34202:	4b23      	ldr	r3, [pc, #140]	; (34290 <sw_timer_init+0xcc>)
   34204:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   34206:	4b23      	ldr	r3, [pc, #140]	; (34294 <sw_timer_init+0xd0>)
   34208:	4798      	blx	r3
   3420a:	0004      	movs	r4, r0
   3420c:	683b      	ldr	r3, [r7, #0]
   3420e:	885b      	ldrh	r3, [r3, #2]
   34210:	001a      	movs	r2, r3
   34212:	4b21      	ldr	r3, [pc, #132]	; (34298 <sw_timer_init+0xd4>)
   34214:	0011      	movs	r1, r2
   34216:	22fa      	movs	r2, #250	; 0xfa
   34218:	0210      	lsls	r0, r2, #8
   3421a:	4798      	blx	r3
   3421c:	0003      	movs	r3, r0
   3421e:	001a      	movs	r2, r3
   34220:	4b1e      	ldr	r3, [pc, #120]	; (3429c <sw_timer_init+0xd8>)
   34222:	0011      	movs	r1, r2
   34224:	0020      	movs	r0, r4
   34226:	4798      	blx	r3
   34228:	0003      	movs	r3, r0
   3422a:	001a      	movs	r2, r3
   3422c:	2318      	movs	r3, #24
   3422e:	18fb      	adds	r3, r7, r3
   34230:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   34232:	2318      	movs	r3, #24
   34234:	18fb      	adds	r3, r7, r3
   34236:	2205      	movs	r2, #5
   34238:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   3423a:	683b      	ldr	r3, [r7, #0]
   3423c:	781b      	ldrb	r3, [r3, #0]
   3423e:	001a      	movs	r2, r3
   34240:	230c      	movs	r3, #12
   34242:	18fb      	adds	r3, r7, r3
   34244:	0092      	lsls	r2, r2, #2
   34246:	58d1      	ldr	r1, [r2, r3]
   34248:	2318      	movs	r3, #24
   3424a:	18fa      	adds	r2, r7, r3
   3424c:	23bc      	movs	r3, #188	; 0xbc
   3424e:	18fb      	adds	r3, r7, r3
   34250:	681b      	ldr	r3, [r3, #0]
   34252:	0018      	movs	r0, r3
   34254:	4b12      	ldr	r3, [pc, #72]	; (342a0 <sw_timer_init+0xdc>)
   34256:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   34258:	683b      	ldr	r3, [r7, #0]
   3425a:	785b      	ldrb	r3, [r3, #1]
   3425c:	3308      	adds	r3, #8
   3425e:	b2da      	uxtb	r2, r3
   34260:	4910      	ldr	r1, [pc, #64]	; (342a4 <sw_timer_init+0xe0>)
   34262:	23bc      	movs	r3, #188	; 0xbc
   34264:	18fb      	adds	r3, r7, r3
   34266:	681b      	ldr	r3, [r3, #0]
   34268:	0018      	movs	r0, r3
   3426a:	4b0f      	ldr	r3, [pc, #60]	; (342a8 <sw_timer_init+0xe4>)
   3426c:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   3426e:	683b      	ldr	r3, [r7, #0]
   34270:	785b      	ldrb	r3, [r3, #1]
   34272:	3308      	adds	r3, #8
   34274:	b2da      	uxtb	r2, r3
   34276:	23bc      	movs	r3, #188	; 0xbc
   34278:	18fb      	adds	r3, r7, r3
   3427a:	681b      	ldr	r3, [r3, #0]
   3427c:	0011      	movs	r1, r2
   3427e:	0018      	movs	r0, r3
   34280:	4b0a      	ldr	r3, [pc, #40]	; (342ac <sw_timer_init+0xe8>)
   34282:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   34284:	46c0      	nop			; (mov r8, r8)
   34286:	46bd      	mov	sp, r7
   34288:	b031      	add	sp, #196	; 0xc4
   3428a:	bd90      	pop	{r4, r7, pc}
   3428c:	0003c330 	.word	0x0003c330
   34290:	0002c0fd 	.word	0x0002c0fd
   34294:	0003412d 	.word	0x0003412d
   34298:	0003486d 	.word	0x0003486d
   3429c:	00034759 	.word	0x00034759
   342a0:	0002c759 	.word	0x0002c759
   342a4:	00034181 	.word	0x00034181
   342a8:	0002cb71 	.word	0x0002cb71
   342ac:	0002cbb1 	.word	0x0002cbb1

000342b0 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   342b0:	b580      	push	{r7, lr}
   342b2:	b084      	sub	sp, #16
   342b4:	af00      	add	r7, sp, #0
   342b6:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   342b8:	687b      	ldr	r3, [r7, #4]
   342ba:	3314      	adds	r3, #20
   342bc:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   342be:	68fb      	ldr	r3, [r7, #12]
   342c0:	0018      	movs	r0, r3
   342c2:	4b03      	ldr	r3, [pc, #12]	; (342d0 <sw_timer_enable+0x20>)
   342c4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   342c6:	46c0      	nop			; (mov r8, r8)
   342c8:	46bd      	mov	sp, r7
   342ca:	b004      	add	sp, #16
   342cc:	bd80      	pop	{r7, pc}
   342ce:	46c0      	nop			; (mov r8, r8)
   342d0:	00034151 	.word	0x00034151

000342d4 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   342d4:	b580      	push	{r7, lr}
   342d6:	b086      	sub	sp, #24
   342d8:	af00      	add	r7, sp, #0
   342da:	60f8      	str	r0, [r7, #12]
   342dc:	60b9      	str	r1, [r7, #8]
   342de:	607a      	str	r2, [r7, #4]
   342e0:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   342e2:	2300      	movs	r3, #0
   342e4:	617b      	str	r3, [r7, #20]
   342e6:	e032      	b.n	3434e <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   342e8:	68f9      	ldr	r1, [r7, #12]
   342ea:	697a      	ldr	r2, [r7, #20]
   342ec:	0013      	movs	r3, r2
   342ee:	009b      	lsls	r3, r3, #2
   342f0:	189b      	adds	r3, r3, r2
   342f2:	009b      	lsls	r3, r3, #2
   342f4:	5c5b      	ldrb	r3, [r3, r1]
   342f6:	07db      	lsls	r3, r3, #31
   342f8:	0fdb      	lsrs	r3, r3, #31
   342fa:	b2db      	uxtb	r3, r3
   342fc:	2b00      	cmp	r3, #0
   342fe:	d123      	bne.n	34348 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   34300:	697a      	ldr	r2, [r7, #20]
   34302:	0013      	movs	r3, r2
   34304:	009b      	lsls	r3, r3, #2
   34306:	189b      	adds	r3, r3, r2
   34308:	009b      	lsls	r3, r3, #2
   3430a:	68fa      	ldr	r2, [r7, #12]
   3430c:	18d3      	adds	r3, r2, r3
   3430e:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   34310:	693b      	ldr	r3, [r7, #16]
   34312:	68ba      	ldr	r2, [r7, #8]
   34314:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   34316:	693b      	ldr	r3, [r7, #16]
   34318:	781a      	ldrb	r2, [r3, #0]
   3431a:	2102      	movs	r1, #2
   3431c:	438a      	bics	r2, r1
   3431e:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   34320:	693b      	ldr	r3, [r7, #16]
   34322:	687a      	ldr	r2, [r7, #4]
   34324:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   34326:	68fb      	ldr	r3, [r7, #12]
   34328:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   3432a:	4b0d      	ldr	r3, [pc, #52]	; (34360 <sw_timer_register_callback+0x8c>)
   3432c:	0011      	movs	r1, r2
   3432e:	6838      	ldr	r0, [r7, #0]
   34330:	4798      	blx	r3
   34332:	0003      	movs	r3, r0
   34334:	001a      	movs	r2, r3
   34336:	693b      	ldr	r3, [r7, #16]
   34338:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   3433a:	693b      	ldr	r3, [r7, #16]
   3433c:	781a      	ldrb	r2, [r3, #0]
   3433e:	2101      	movs	r1, #1
   34340:	430a      	orrs	r2, r1
   34342:	701a      	strb	r2, [r3, #0]
			return index;
   34344:	697b      	ldr	r3, [r7, #20]
   34346:	e007      	b.n	34358 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   34348:	697b      	ldr	r3, [r7, #20]
   3434a:	3301      	adds	r3, #1
   3434c:	617b      	str	r3, [r7, #20]
   3434e:	697b      	ldr	r3, [r7, #20]
   34350:	2b00      	cmp	r3, #0
   34352:	ddc9      	ble.n	342e8 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   34354:	2301      	movs	r3, #1
   34356:	425b      	negs	r3, r3
}
   34358:	0018      	movs	r0, r3
   3435a:	46bd      	mov	sp, r7
   3435c:	b006      	add	sp, #24
   3435e:	bd80      	pop	{r7, pc}
   34360:	00034759 	.word	0x00034759

00034364 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   34364:	b580      	push	{r7, lr}
   34366:	b086      	sub	sp, #24
   34368:	af00      	add	r7, sp, #0
   3436a:	60f8      	str	r0, [r7, #12]
   3436c:	60b9      	str	r1, [r7, #8]
   3436e:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   34370:	68ba      	ldr	r2, [r7, #8]
   34372:	0013      	movs	r3, r2
   34374:	009b      	lsls	r3, r3, #2
   34376:	189b      	adds	r3, r3, r2
   34378:	009b      	lsls	r3, r3, #2
   3437a:	68fa      	ldr	r2, [r7, #12]
   3437c:	18d3      	adds	r3, r2, r3
   3437e:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   34380:	697b      	ldr	r3, [r7, #20]
   34382:	781a      	ldrb	r2, [r3, #0]
   34384:	2102      	movs	r1, #2
   34386:	430a      	orrs	r2, r1
   34388:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   3438a:	68fb      	ldr	r3, [r7, #12]
   3438c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   3438e:	4b07      	ldr	r3, [pc, #28]	; (343ac <sw_timer_enable_callback+0x48>)
   34390:	0011      	movs	r1, r2
   34392:	6878      	ldr	r0, [r7, #4]
   34394:	4798      	blx	r3
   34396:	0003      	movs	r3, r0
   34398:	001a      	movs	r2, r3
   3439a:	4b05      	ldr	r3, [pc, #20]	; (343b0 <sw_timer_enable_callback+0x4c>)
   3439c:	681b      	ldr	r3, [r3, #0]
   3439e:	18d2      	adds	r2, r2, r3
   343a0:	697b      	ldr	r3, [r7, #20]
   343a2:	611a      	str	r2, [r3, #16]
}
   343a4:	46c0      	nop			; (mov r8, r8)
   343a6:	46bd      	mov	sp, r7
   343a8:	b006      	add	sp, #24
   343aa:	bd80      	pop	{r7, pc}
   343ac:	00034759 	.word	0x00034759
   343b0:	2000432c 	.word	0x2000432c

000343b4 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   343b4:	b580      	push	{r7, lr}
   343b6:	b084      	sub	sp, #16
   343b8:	af00      	add	r7, sp, #0
   343ba:	6078      	str	r0, [r7, #4]
   343bc:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   343be:	683a      	ldr	r2, [r7, #0]
   343c0:	0013      	movs	r3, r2
   343c2:	009b      	lsls	r3, r3, #2
   343c4:	189b      	adds	r3, r3, r2
   343c6:	009b      	lsls	r3, r3, #2
   343c8:	687a      	ldr	r2, [r7, #4]
   343ca:	18d3      	adds	r3, r2, r3
   343cc:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   343ce:	68fb      	ldr	r3, [r7, #12]
   343d0:	781a      	ldrb	r2, [r3, #0]
   343d2:	2102      	movs	r1, #2
   343d4:	438a      	bics	r2, r1
   343d6:	701a      	strb	r2, [r3, #0]
}
   343d8:	46c0      	nop			; (mov r8, r8)
   343da:	46bd      	mov	sp, r7
   343dc:	b004      	add	sp, #16
   343de:	bd80      	pop	{r7, pc}

000343e0 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   343e0:	b590      	push	{r4, r7, lr}
   343e2:	b085      	sub	sp, #20
   343e4:	af00      	add	r7, sp, #0
   343e6:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   343e8:	2300      	movs	r3, #0
   343ea:	60fb      	str	r3, [r7, #12]
   343ec:	e053      	b.n	34496 <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   343ee:	6879      	ldr	r1, [r7, #4]
   343f0:	68fa      	ldr	r2, [r7, #12]
   343f2:	0013      	movs	r3, r2
   343f4:	009b      	lsls	r3, r3, #2
   343f6:	189b      	adds	r3, r3, r2
   343f8:	009b      	lsls	r3, r3, #2
   343fa:	5c5b      	ldrb	r3, [r3, r1]
   343fc:	07db      	lsls	r3, r3, #31
   343fe:	0fdb      	lsrs	r3, r3, #31
   34400:	b2db      	uxtb	r3, r3
   34402:	2b00      	cmp	r3, #0
   34404:	d044      	beq.n	34490 <sw_timer_task+0xb0>
   34406:	6879      	ldr	r1, [r7, #4]
   34408:	68fa      	ldr	r2, [r7, #12]
   3440a:	0013      	movs	r3, r2
   3440c:	009b      	lsls	r3, r3, #2
   3440e:	189b      	adds	r3, r3, r2
   34410:	009b      	lsls	r3, r3, #2
   34412:	5c5b      	ldrb	r3, [r3, r1]
   34414:	079b      	lsls	r3, r3, #30
   34416:	0fdb      	lsrs	r3, r3, #31
   34418:	b2db      	uxtb	r3, r3
   3441a:	2b00      	cmp	r3, #0
   3441c:	d038      	beq.n	34490 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   3441e:	68fa      	ldr	r2, [r7, #12]
   34420:	0013      	movs	r3, r2
   34422:	009b      	lsls	r3, r3, #2
   34424:	189b      	adds	r3, r3, r2
   34426:	009b      	lsls	r3, r3, #2
   34428:	687a      	ldr	r2, [r7, #4]
   3442a:	18d3      	adds	r3, r2, r3
   3442c:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   3442e:	68bb      	ldr	r3, [r7, #8]
   34430:	691a      	ldr	r2, [r3, #16]
   34432:	4b1c      	ldr	r3, [pc, #112]	; (344a4 <sw_timer_task+0xc4>)
   34434:	681b      	ldr	r3, [r3, #0]
   34436:	1ad3      	subs	r3, r2, r3
   34438:	d52a      	bpl.n	34490 <sw_timer_task+0xb0>
   3443a:	68bb      	ldr	r3, [r7, #8]
   3443c:	781b      	ldrb	r3, [r3, #0]
   3443e:	2204      	movs	r2, #4
   34440:	4013      	ands	r3, r2
   34442:	b2db      	uxtb	r3, r3
   34444:	2b00      	cmp	r3, #0
   34446:	d123      	bne.n	34490 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   34448:	68bb      	ldr	r3, [r7, #8]
   3444a:	781a      	ldrb	r2, [r3, #0]
   3444c:	2104      	movs	r1, #4
   3444e:	430a      	orrs	r2, r1
   34450:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   34452:	68bb      	ldr	r3, [r7, #8]
   34454:	68db      	ldr	r3, [r3, #12]
   34456:	2b00      	cmp	r3, #0
   34458:	d007      	beq.n	3446a <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   3445a:	68bb      	ldr	r3, [r7, #8]
   3445c:	68da      	ldr	r2, [r3, #12]
   3445e:	4b11      	ldr	r3, [pc, #68]	; (344a4 <sw_timer_task+0xc4>)
   34460:	681b      	ldr	r3, [r3, #0]
   34462:	18d2      	adds	r2, r2, r3
   34464:	68bb      	ldr	r3, [r7, #8]
   34466:	611a      	str	r2, [r3, #16]
   34468:	e004      	b.n	34474 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   3446a:	68bb      	ldr	r3, [r7, #8]
   3446c:	781a      	ldrb	r2, [r3, #0]
   3446e:	2102      	movs	r1, #2
   34470:	438a      	bics	r2, r1
   34472:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   34474:	68bb      	ldr	r3, [r7, #8]
   34476:	685c      	ldr	r4, [r3, #4]
   34478:	68bb      	ldr	r3, [r7, #8]
   3447a:	689a      	ldr	r2, [r3, #8]
   3447c:	68bb      	ldr	r3, [r7, #8]
   3447e:	68db      	ldr	r3, [r3, #12]
   34480:	68f9      	ldr	r1, [r7, #12]
   34482:	6878      	ldr	r0, [r7, #4]
   34484:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   34486:	68bb      	ldr	r3, [r7, #8]
   34488:	781a      	ldrb	r2, [r3, #0]
   3448a:	2104      	movs	r1, #4
   3448c:	438a      	bics	r2, r1
   3448e:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   34490:	68fb      	ldr	r3, [r7, #12]
   34492:	3301      	adds	r3, #1
   34494:	60fb      	str	r3, [r7, #12]
   34496:	68fb      	ldr	r3, [r7, #12]
   34498:	2b00      	cmp	r3, #0
   3449a:	dda8      	ble.n	343ee <sw_timer_task+0xe>
			}
		}
	}
}
   3449c:	46c0      	nop			; (mov r8, r8)
   3449e:	46bd      	mov	sp, r7
   344a0:	b005      	add	sp, #20
   344a2:	bd90      	pop	{r4, r7, pc}
   344a4:	2000432c 	.word	0x2000432c

000344a8 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   344a8:	b580      	push	{r7, lr}
   344aa:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   344ac:	4b06      	ldr	r3, [pc, #24]	; (344c8 <main+0x20>)
   344ae:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   344b0:	4b06      	ldr	r3, [pc, #24]	; (344cc <main+0x24>)
   344b2:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   344b4:	2001      	movs	r0, #1
   344b6:	4b06      	ldr	r3, [pc, #24]	; (344d0 <main+0x28>)
   344b8:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   344ba:	4b06      	ldr	r3, [pc, #24]	; (344d4 <main+0x2c>)
   344bc:	4798      	blx	r3

    return 0;  // Will not get here
   344be:	2300      	movs	r3, #0
}
   344c0:	0018      	movs	r0, r3
   344c2:	46bd      	mov	sp, r7
   344c4:	bd80      	pop	{r7, pc}
   344c6:	46c0      	nop			; (mov r8, r8)
   344c8:	0002bff1 	.word	0x0002bff1
   344cc:	0001fe85 	.word	0x0001fe85
   344d0:	0001a54d 	.word	0x0001a54d
   344d4:	0001e4dd 	.word	0x0001e4dd

000344d8 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   344d8:	b580      	push	{r7, lr}
   344da:	b082      	sub	sp, #8
   344dc:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   344de:	4b22      	ldr	r3, [pc, #136]	; (34568 <vApplicationDaemonTaskStartupHook+0x90>)
   344e0:	0018      	movs	r0, r3
   344e2:	4b22      	ldr	r3, [pc, #136]	; (3456c <vApplicationDaemonTaskStartupHook+0x94>)
   344e4:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   344e6:	4b22      	ldr	r3, [pc, #136]	; (34570 <vApplicationDaemonTaskStartupHook+0x98>)
   344e8:	0018      	movs	r0, r3
   344ea:	4b20      	ldr	r3, [pc, #128]	; (3456c <vApplicationDaemonTaskStartupHook+0x94>)
   344ec:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   344ee:	4b21      	ldr	r3, [pc, #132]	; (34574 <vApplicationDaemonTaskStartupHook+0x9c>)
   344f0:	4798      	blx	r3
   344f2:	1e03      	subs	r3, r0, #0
   344f4:	d004      	beq.n	34500 <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   344f6:	4b20      	ldr	r3, [pc, #128]	; (34578 <vApplicationDaemonTaskStartupHook+0xa0>)
   344f8:	0018      	movs	r0, r3
   344fa:	4b1c      	ldr	r3, [pc, #112]	; (3456c <vApplicationDaemonTaskStartupHook+0x94>)
   344fc:	4798      	blx	r3
   344fe:	e003      	b.n	34508 <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   34500:	4b1e      	ldr	r3, [pc, #120]	; (3457c <vApplicationDaemonTaskStartupHook+0xa4>)
   34502:	0018      	movs	r0, r3
   34504:	4b19      	ldr	r3, [pc, #100]	; (3456c <vApplicationDaemonTaskStartupHook+0x94>)
   34506:	4798      	blx	r3
    } else {
        SerialConsoleWriteString("Initialized Seesaw!\r\n");
    }*/

   
    uint8_t whoamI = 0;
   34508:	1dfb      	adds	r3, r7, #7
   3450a:	2200      	movs	r2, #0
   3450c:	701a      	strb	r2, [r3, #0]
    (lsm6dso_device_id_get(GetImuStruct(), &whoamI));
   3450e:	4b1c      	ldr	r3, [pc, #112]	; (34580 <vApplicationDaemonTaskStartupHook+0xa8>)
   34510:	4798      	blx	r3
   34512:	0002      	movs	r2, r0
   34514:	1dfb      	adds	r3, r7, #7
   34516:	0019      	movs	r1, r3
   34518:	0010      	movs	r0, r2
   3451a:	4b1a      	ldr	r3, [pc, #104]	; (34584 <vApplicationDaemonTaskStartupHook+0xac>)
   3451c:	4798      	blx	r3

    if (whoamI != LSM6DSO_ID) {
   3451e:	1dfb      	adds	r3, r7, #7
   34520:	781b      	ldrb	r3, [r3, #0]
   34522:	2b6c      	cmp	r3, #108	; 0x6c
   34524:	d004      	beq.n	34530 <vApplicationDaemonTaskStartupHook+0x58>
        SerialConsoleWriteString("Cannot find IMU!\r\n");
   34526:	4b18      	ldr	r3, [pc, #96]	; (34588 <vApplicationDaemonTaskStartupHook+0xb0>)
   34528:	0018      	movs	r0, r3
   3452a:	4b10      	ldr	r3, [pc, #64]	; (3456c <vApplicationDaemonTaskStartupHook+0x94>)
   3452c:	4798      	blx	r3
   3452e:	e010      	b.n	34552 <vApplicationDaemonTaskStartupHook+0x7a>
    } else {
        SerialConsoleWriteString("IMU found!\r\n");
   34530:	4b16      	ldr	r3, [pc, #88]	; (3458c <vApplicationDaemonTaskStartupHook+0xb4>)
   34532:	0018      	movs	r0, r3
   34534:	4b0d      	ldr	r3, [pc, #52]	; (3456c <vApplicationDaemonTaskStartupHook+0x94>)
   34536:	4798      	blx	r3
        if (InitImu() == 0) {
   34538:	4b15      	ldr	r3, [pc, #84]	; (34590 <vApplicationDaemonTaskStartupHook+0xb8>)
   3453a:	4798      	blx	r3
   3453c:	1e03      	subs	r3, r0, #0
   3453e:	d104      	bne.n	3454a <vApplicationDaemonTaskStartupHook+0x72>
            SerialConsoleWriteString("IMU initialized!\r\n");
   34540:	4b14      	ldr	r3, [pc, #80]	; (34594 <vApplicationDaemonTaskStartupHook+0xbc>)
   34542:	0018      	movs	r0, r3
   34544:	4b09      	ldr	r3, [pc, #36]	; (3456c <vApplicationDaemonTaskStartupHook+0x94>)
   34546:	4798      	blx	r3
   34548:	e003      	b.n	34552 <vApplicationDaemonTaskStartupHook+0x7a>
        } else {
            SerialConsoleWriteString("Could not initialize IMU\r\n");
   3454a:	4b13      	ldr	r3, [pc, #76]	; (34598 <vApplicationDaemonTaskStartupHook+0xc0>)
   3454c:	0018      	movs	r0, r3
   3454e:	4b07      	ldr	r3, [pc, #28]	; (3456c <vApplicationDaemonTaskStartupHook+0x94>)
   34550:	4798      	blx	r3
    SerialConsoleWriteString("Initializing distance sensor\r\n");
    InitializeDistanceSensor();
    SerialConsoleWriteString("Distance sensor initialized\r\n");
	*/

    StartTasks();
   34552:	4b12      	ldr	r3, [pc, #72]	; (3459c <vApplicationDaemonTaskStartupHook+0xc4>)
   34554:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   34556:	4b12      	ldr	r3, [pc, #72]	; (345a0 <vApplicationDaemonTaskStartupHook+0xc8>)
   34558:	681b      	ldr	r3, [r3, #0]
   3455a:	0018      	movs	r0, r3
   3455c:	4b11      	ldr	r3, [pc, #68]	; (345a4 <vApplicationDaemonTaskStartupHook+0xcc>)
   3455e:	4798      	blx	r3
}
   34560:	46c0      	nop			; (mov r8, r8)
   34562:	46bd      	mov	sp, r7
   34564:	b002      	add	sp, #8
   34566:	bd80      	pop	{r7, pc}
   34568:	0003c33c 	.word	0x0003c33c
   3456c:	0001fef5 	.word	0x0001fef5
   34570:	0003c360 	.word	0x0003c360
   34574:	0001588d 	.word	0x0001588d
   34578:	0003c378 	.word	0x0003c378
   3457c:	0003c39c 	.word	0x0003c39c
   34580:	00016ac1 	.word	0x00016ac1
   34584:	000166c5 	.word	0x000166c5
   34588:	0003c3b8 	.word	0x0003c3b8
   3458c:	0003c3cc 	.word	0x0003c3cc
   34590:	00016ad1 	.word	0x00016ad1
   34594:	0003c3dc 	.word	0x0003c3dc
   34598:	0003c3f0 	.word	0x0003c3f0
   3459c:	000345a9 	.word	0x000345a9
   345a0:	20004334 	.word	0x20004334
   345a4:	0001e381 	.word	0x0001e381

000345a8 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   345a8:	b590      	push	{r4, r7, lr}
   345aa:	b083      	sub	sp, #12
   345ac:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   345ae:	4b44      	ldr	r3, [pc, #272]	; (346c0 <StartTasks+0x118>)
   345b0:	4798      	blx	r3
   345b2:	0003      	movs	r3, r0
   345b4:	4a43      	ldr	r2, [pc, #268]	; (346c4 <StartTasks+0x11c>)
   345b6:	4844      	ldr	r0, [pc, #272]	; (346c8 <StartTasks+0x120>)
   345b8:	2140      	movs	r1, #64	; 0x40
   345ba:	4c44      	ldr	r4, [pc, #272]	; (346cc <StartTasks+0x124>)
   345bc:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   345be:	4b42      	ldr	r3, [pc, #264]	; (346c8 <StartTasks+0x120>)
   345c0:	0018      	movs	r0, r3
   345c2:	4b43      	ldr	r3, [pc, #268]	; (346d0 <StartTasks+0x128>)
   345c4:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   345c6:	23c8      	movs	r3, #200	; 0xc8
   345c8:	005a      	lsls	r2, r3, #1
   345ca:	4942      	ldr	r1, [pc, #264]	; (346d4 <StartTasks+0x12c>)
   345cc:	4842      	ldr	r0, [pc, #264]	; (346d8 <StartTasks+0x130>)
   345ce:	4b43      	ldr	r3, [pc, #268]	; (346dc <StartTasks+0x134>)
   345d0:	9301      	str	r3, [sp, #4]
   345d2:	2304      	movs	r3, #4
   345d4:	9300      	str	r3, [sp, #0]
   345d6:	2300      	movs	r3, #0
   345d8:	4c41      	ldr	r4, [pc, #260]	; (346e0 <StartTasks+0x138>)
   345da:	47a0      	blx	r4
   345dc:	0003      	movs	r3, r0
   345de:	2b01      	cmp	r3, #1
   345e0:	d003      	beq.n	345ea <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   345e2:	4b40      	ldr	r3, [pc, #256]	; (346e4 <StartTasks+0x13c>)
   345e4:	0018      	movs	r0, r3
   345e6:	4b3a      	ldr	r3, [pc, #232]	; (346d0 <StartTasks+0x128>)
   345e8:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   345ea:	4b35      	ldr	r3, [pc, #212]	; (346c0 <StartTasks+0x118>)
   345ec:	4798      	blx	r3
   345ee:	0003      	movs	r3, r0
   345f0:	4a3d      	ldr	r2, [pc, #244]	; (346e8 <StartTasks+0x140>)
   345f2:	4835      	ldr	r0, [pc, #212]	; (346c8 <StartTasks+0x120>)
   345f4:	2140      	movs	r1, #64	; 0x40
   345f6:	4c35      	ldr	r4, [pc, #212]	; (346cc <StartTasks+0x124>)
   345f8:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   345fa:	4b33      	ldr	r3, [pc, #204]	; (346c8 <StartTasks+0x120>)
   345fc:	0018      	movs	r0, r3
   345fe:	4b34      	ldr	r3, [pc, #208]	; (346d0 <StartTasks+0x128>)
   34600:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   34602:	23fa      	movs	r3, #250	; 0xfa
   34604:	009a      	lsls	r2, r3, #2
   34606:	4939      	ldr	r1, [pc, #228]	; (346ec <StartTasks+0x144>)
   34608:	4839      	ldr	r0, [pc, #228]	; (346f0 <StartTasks+0x148>)
   3460a:	4b3a      	ldr	r3, [pc, #232]	; (346f4 <StartTasks+0x14c>)
   3460c:	9301      	str	r3, [sp, #4]
   3460e:	2303      	movs	r3, #3
   34610:	9300      	str	r3, [sp, #0]
   34612:	2300      	movs	r3, #0
   34614:	4c32      	ldr	r4, [pc, #200]	; (346e0 <StartTasks+0x138>)
   34616:	47a0      	blx	r4
   34618:	0003      	movs	r3, r0
   3461a:	2b01      	cmp	r3, #1
   3461c:	d003      	beq.n	34626 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   3461e:	4b36      	ldr	r3, [pc, #216]	; (346f8 <StartTasks+0x150>)
   34620:	0018      	movs	r0, r3
   34622:	4b2b      	ldr	r3, [pc, #172]	; (346d0 <StartTasks+0x128>)
   34624:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   34626:	4b26      	ldr	r3, [pc, #152]	; (346c0 <StartTasks+0x118>)
   34628:	4798      	blx	r3
   3462a:	0003      	movs	r3, r0
   3462c:	4a33      	ldr	r2, [pc, #204]	; (346fc <StartTasks+0x154>)
   3462e:	4826      	ldr	r0, [pc, #152]	; (346c8 <StartTasks+0x120>)
   34630:	2140      	movs	r1, #64	; 0x40
   34632:	4c26      	ldr	r4, [pc, #152]	; (346cc <StartTasks+0x124>)
   34634:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   34636:	4b24      	ldr	r3, [pc, #144]	; (346c8 <StartTasks+0x120>)
   34638:	0018      	movs	r0, r3
   3463a:	4b25      	ldr	r3, [pc, #148]	; (346d0 <StartTasks+0x128>)
   3463c:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   3463e:	23c8      	movs	r3, #200	; 0xc8
   34640:	005a      	lsls	r2, r3, #1
   34642:	492f      	ldr	r1, [pc, #188]	; (34700 <StartTasks+0x158>)
   34644:	482f      	ldr	r0, [pc, #188]	; (34704 <StartTasks+0x15c>)
   34646:	4b30      	ldr	r3, [pc, #192]	; (34708 <StartTasks+0x160>)
   34648:	9301      	str	r3, [sp, #4]
   3464a:	2304      	movs	r3, #4
   3464c:	9300      	str	r3, [sp, #0]
   3464e:	2300      	movs	r3, #0
   34650:	4c23      	ldr	r4, [pc, #140]	; (346e0 <StartTasks+0x138>)
   34652:	47a0      	blx	r4
   34654:	0003      	movs	r3, r0
   34656:	2b01      	cmp	r3, #1
   34658:	d003      	beq.n	34662 <StartTasks+0xba>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   3465a:	4b2c      	ldr	r3, [pc, #176]	; (3470c <StartTasks+0x164>)
   3465c:	0018      	movs	r0, r3
   3465e:	4b1c      	ldr	r3, [pc, #112]	; (346d0 <StartTasks+0x128>)
   34660:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   34662:	4b17      	ldr	r3, [pc, #92]	; (346c0 <StartTasks+0x118>)
   34664:	4798      	blx	r3
   34666:	0003      	movs	r3, r0
   34668:	4a29      	ldr	r2, [pc, #164]	; (34710 <StartTasks+0x168>)
   3466a:	4817      	ldr	r0, [pc, #92]	; (346c8 <StartTasks+0x120>)
   3466c:	2140      	movs	r1, #64	; 0x40
   3466e:	4c17      	ldr	r4, [pc, #92]	; (346cc <StartTasks+0x124>)
   34670:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   34672:	4b15      	ldr	r3, [pc, #84]	; (346c8 <StartTasks+0x120>)
   34674:	0018      	movs	r0, r3
   34676:	4b16      	ldr	r3, [pc, #88]	; (346d0 <StartTasks+0x128>)
   34678:	4798      	blx	r3

    if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   3467a:	2380      	movs	r3, #128	; 0x80
   3467c:	005a      	lsls	r2, r3, #1
   3467e:	4925      	ldr	r1, [pc, #148]	; (34714 <StartTasks+0x16c>)
   34680:	4825      	ldr	r0, [pc, #148]	; (34718 <StartTasks+0x170>)
   34682:	4b26      	ldr	r3, [pc, #152]	; (3471c <StartTasks+0x174>)
   34684:	9301      	str	r3, [sp, #4]
   34686:	2304      	movs	r3, #4
   34688:	9300      	str	r3, [sp, #0]
   3468a:	2300      	movs	r3, #0
   3468c:	4c14      	ldr	r4, [pc, #80]	; (346e0 <StartTasks+0x138>)
   3468e:	47a0      	blx	r4
   34690:	0003      	movs	r3, r0
   34692:	2b01      	cmp	r3, #1
   34694:	d003      	beq.n	3469e <StartTasks+0xf6>
        SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   34696:	4b22      	ldr	r3, [pc, #136]	; (34720 <StartTasks+0x178>)
   34698:	0018      	movs	r0, r3
   3469a:	4b0d      	ldr	r3, [pc, #52]	; (346d0 <StartTasks+0x128>)
   3469c:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   3469e:	4b08      	ldr	r3, [pc, #32]	; (346c0 <StartTasks+0x118>)
   346a0:	4798      	blx	r3
   346a2:	0003      	movs	r3, r0
   346a4:	4a1f      	ldr	r2, [pc, #124]	; (34724 <StartTasks+0x17c>)
   346a6:	4808      	ldr	r0, [pc, #32]	; (346c8 <StartTasks+0x120>)
   346a8:	2140      	movs	r1, #64	; 0x40
   346aa:	4c08      	ldr	r4, [pc, #32]	; (346cc <StartTasks+0x124>)
   346ac:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   346ae:	4b06      	ldr	r3, [pc, #24]	; (346c8 <StartTasks+0x120>)
   346b0:	0018      	movs	r0, r3
   346b2:	4b07      	ldr	r3, [pc, #28]	; (346d0 <StartTasks+0x128>)
   346b4:	4798      	blx	r3
}
   346b6:	46c0      	nop			; (mov r8, r8)
   346b8:	46bd      	mov	sp, r7
   346ba:	b001      	add	sp, #4
   346bc:	bd90      	pop	{r4, r7, pc}
   346be:	46c0      	nop			; (mov r8, r8)
   346c0:	0001c4c1 	.word	0x0001c4c1
   346c4:	0003c40c 	.word	0x0003c40c
   346c8:	20005878 	.word	0x20005878
   346cc:	00036ef9 	.word	0x00036ef9
   346d0:	0001fef5 	.word	0x0001fef5
   346d4:	0003c430 	.word	0x0003c430
   346d8:	00014c29 	.word	0x00014c29
   346dc:	20004330 	.word	0x20004330
   346e0:	0001df05 	.word	0x0001df05
   346e4:	0003c43c 	.word	0x0003c43c
   346e8:	0003c468 	.word	0x0003c468
   346ec:	0003c488 	.word	0x0003c488
   346f0:	00019335 	.word	0x00019335
   346f4:	20004338 	.word	0x20004338
   346f8:	0003c494 	.word	0x0003c494
   346fc:	0003c4c0 	.word	0x0003c4c0
   34700:	0003c4e0 	.word	0x0003c4e0
   34704:	00017b21 	.word	0x00017b21
   34708:	2000433c 	.word	0x2000433c
   3470c:	0003c4e8 	.word	0x0003c4e8
   34710:	0003c514 	.word	0x0003c514
   34714:	0003c538 	.word	0x0003c538
   34718:	00015381 	.word	0x00015381
   3471c:	20004340 	.word	0x20004340
   34720:	0003c548 	.word	0x0003c548
   34724:	0003c578 	.word	0x0003c578

00034728 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   34728:	b580      	push	{r7, lr}
   3472a:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   3472c:	4b02      	ldr	r3, [pc, #8]	; (34738 <vApplicationMallocFailedHook+0x10>)
   3472e:	0018      	movs	r0, r3
   34730:	4b02      	ldr	r3, [pc, #8]	; (3473c <vApplicationMallocFailedHook+0x14>)
   34732:	4798      	blx	r3
    while (1)
   34734:	e7fe      	b.n	34734 <vApplicationMallocFailedHook+0xc>
   34736:	46c0      	nop			; (mov r8, r8)
   34738:	0003c5a0 	.word	0x0003c5a0
   3473c:	0001fef5 	.word	0x0001fef5

00034740 <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   34740:	b580      	push	{r7, lr}
   34742:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   34744:	4b02      	ldr	r3, [pc, #8]	; (34750 <vApplicationStackOverflowHook+0x10>)
   34746:	0018      	movs	r0, r3
   34748:	4b02      	ldr	r3, [pc, #8]	; (34754 <vApplicationStackOverflowHook+0x14>)
   3474a:	4798      	blx	r3
    while (1)
   3474c:	e7fe      	b.n	3474c <vApplicationStackOverflowHook+0xc>
   3474e:	46c0      	nop			; (mov r8, r8)
   34750:	0003c5cc 	.word	0x0003c5cc
   34754:	0001fef5 	.word	0x0001fef5

00034758 <__udivsi3>:
   34758:	2200      	movs	r2, #0
   3475a:	0843      	lsrs	r3, r0, #1
   3475c:	428b      	cmp	r3, r1
   3475e:	d374      	bcc.n	3484a <__udivsi3+0xf2>
   34760:	0903      	lsrs	r3, r0, #4
   34762:	428b      	cmp	r3, r1
   34764:	d35f      	bcc.n	34826 <__udivsi3+0xce>
   34766:	0a03      	lsrs	r3, r0, #8
   34768:	428b      	cmp	r3, r1
   3476a:	d344      	bcc.n	347f6 <__udivsi3+0x9e>
   3476c:	0b03      	lsrs	r3, r0, #12
   3476e:	428b      	cmp	r3, r1
   34770:	d328      	bcc.n	347c4 <__udivsi3+0x6c>
   34772:	0c03      	lsrs	r3, r0, #16
   34774:	428b      	cmp	r3, r1
   34776:	d30d      	bcc.n	34794 <__udivsi3+0x3c>
   34778:	22ff      	movs	r2, #255	; 0xff
   3477a:	0209      	lsls	r1, r1, #8
   3477c:	ba12      	rev	r2, r2
   3477e:	0c03      	lsrs	r3, r0, #16
   34780:	428b      	cmp	r3, r1
   34782:	d302      	bcc.n	3478a <__udivsi3+0x32>
   34784:	1212      	asrs	r2, r2, #8
   34786:	0209      	lsls	r1, r1, #8
   34788:	d065      	beq.n	34856 <__udivsi3+0xfe>
   3478a:	0b03      	lsrs	r3, r0, #12
   3478c:	428b      	cmp	r3, r1
   3478e:	d319      	bcc.n	347c4 <__udivsi3+0x6c>
   34790:	e000      	b.n	34794 <__udivsi3+0x3c>
   34792:	0a09      	lsrs	r1, r1, #8
   34794:	0bc3      	lsrs	r3, r0, #15
   34796:	428b      	cmp	r3, r1
   34798:	d301      	bcc.n	3479e <__udivsi3+0x46>
   3479a:	03cb      	lsls	r3, r1, #15
   3479c:	1ac0      	subs	r0, r0, r3
   3479e:	4152      	adcs	r2, r2
   347a0:	0b83      	lsrs	r3, r0, #14
   347a2:	428b      	cmp	r3, r1
   347a4:	d301      	bcc.n	347aa <__udivsi3+0x52>
   347a6:	038b      	lsls	r3, r1, #14
   347a8:	1ac0      	subs	r0, r0, r3
   347aa:	4152      	adcs	r2, r2
   347ac:	0b43      	lsrs	r3, r0, #13
   347ae:	428b      	cmp	r3, r1
   347b0:	d301      	bcc.n	347b6 <__udivsi3+0x5e>
   347b2:	034b      	lsls	r3, r1, #13
   347b4:	1ac0      	subs	r0, r0, r3
   347b6:	4152      	adcs	r2, r2
   347b8:	0b03      	lsrs	r3, r0, #12
   347ba:	428b      	cmp	r3, r1
   347bc:	d301      	bcc.n	347c2 <__udivsi3+0x6a>
   347be:	030b      	lsls	r3, r1, #12
   347c0:	1ac0      	subs	r0, r0, r3
   347c2:	4152      	adcs	r2, r2
   347c4:	0ac3      	lsrs	r3, r0, #11
   347c6:	428b      	cmp	r3, r1
   347c8:	d301      	bcc.n	347ce <__udivsi3+0x76>
   347ca:	02cb      	lsls	r3, r1, #11
   347cc:	1ac0      	subs	r0, r0, r3
   347ce:	4152      	adcs	r2, r2
   347d0:	0a83      	lsrs	r3, r0, #10
   347d2:	428b      	cmp	r3, r1
   347d4:	d301      	bcc.n	347da <__udivsi3+0x82>
   347d6:	028b      	lsls	r3, r1, #10
   347d8:	1ac0      	subs	r0, r0, r3
   347da:	4152      	adcs	r2, r2
   347dc:	0a43      	lsrs	r3, r0, #9
   347de:	428b      	cmp	r3, r1
   347e0:	d301      	bcc.n	347e6 <__udivsi3+0x8e>
   347e2:	024b      	lsls	r3, r1, #9
   347e4:	1ac0      	subs	r0, r0, r3
   347e6:	4152      	adcs	r2, r2
   347e8:	0a03      	lsrs	r3, r0, #8
   347ea:	428b      	cmp	r3, r1
   347ec:	d301      	bcc.n	347f2 <__udivsi3+0x9a>
   347ee:	020b      	lsls	r3, r1, #8
   347f0:	1ac0      	subs	r0, r0, r3
   347f2:	4152      	adcs	r2, r2
   347f4:	d2cd      	bcs.n	34792 <__udivsi3+0x3a>
   347f6:	09c3      	lsrs	r3, r0, #7
   347f8:	428b      	cmp	r3, r1
   347fa:	d301      	bcc.n	34800 <__udivsi3+0xa8>
   347fc:	01cb      	lsls	r3, r1, #7
   347fe:	1ac0      	subs	r0, r0, r3
   34800:	4152      	adcs	r2, r2
   34802:	0983      	lsrs	r3, r0, #6
   34804:	428b      	cmp	r3, r1
   34806:	d301      	bcc.n	3480c <__udivsi3+0xb4>
   34808:	018b      	lsls	r3, r1, #6
   3480a:	1ac0      	subs	r0, r0, r3
   3480c:	4152      	adcs	r2, r2
   3480e:	0943      	lsrs	r3, r0, #5
   34810:	428b      	cmp	r3, r1
   34812:	d301      	bcc.n	34818 <__udivsi3+0xc0>
   34814:	014b      	lsls	r3, r1, #5
   34816:	1ac0      	subs	r0, r0, r3
   34818:	4152      	adcs	r2, r2
   3481a:	0903      	lsrs	r3, r0, #4
   3481c:	428b      	cmp	r3, r1
   3481e:	d301      	bcc.n	34824 <__udivsi3+0xcc>
   34820:	010b      	lsls	r3, r1, #4
   34822:	1ac0      	subs	r0, r0, r3
   34824:	4152      	adcs	r2, r2
   34826:	08c3      	lsrs	r3, r0, #3
   34828:	428b      	cmp	r3, r1
   3482a:	d301      	bcc.n	34830 <__udivsi3+0xd8>
   3482c:	00cb      	lsls	r3, r1, #3
   3482e:	1ac0      	subs	r0, r0, r3
   34830:	4152      	adcs	r2, r2
   34832:	0883      	lsrs	r3, r0, #2
   34834:	428b      	cmp	r3, r1
   34836:	d301      	bcc.n	3483c <__udivsi3+0xe4>
   34838:	008b      	lsls	r3, r1, #2
   3483a:	1ac0      	subs	r0, r0, r3
   3483c:	4152      	adcs	r2, r2
   3483e:	0843      	lsrs	r3, r0, #1
   34840:	428b      	cmp	r3, r1
   34842:	d301      	bcc.n	34848 <__udivsi3+0xf0>
   34844:	004b      	lsls	r3, r1, #1
   34846:	1ac0      	subs	r0, r0, r3
   34848:	4152      	adcs	r2, r2
   3484a:	1a41      	subs	r1, r0, r1
   3484c:	d200      	bcs.n	34850 <__udivsi3+0xf8>
   3484e:	4601      	mov	r1, r0
   34850:	4152      	adcs	r2, r2
   34852:	4610      	mov	r0, r2
   34854:	4770      	bx	lr
   34856:	e7ff      	b.n	34858 <__udivsi3+0x100>
   34858:	b501      	push	{r0, lr}
   3485a:	2000      	movs	r0, #0
   3485c:	f000 f8f0 	bl	34a40 <__aeabi_idiv0>
   34860:	bd02      	pop	{r1, pc}
   34862:	46c0      	nop			; (mov r8, r8)

00034864 <__aeabi_uidivmod>:
   34864:	2900      	cmp	r1, #0
   34866:	d0f7      	beq.n	34858 <__udivsi3+0x100>
   34868:	e776      	b.n	34758 <__udivsi3>
   3486a:	4770      	bx	lr

0003486c <__divsi3>:
   3486c:	4603      	mov	r3, r0
   3486e:	430b      	orrs	r3, r1
   34870:	d47f      	bmi.n	34972 <__divsi3+0x106>
   34872:	2200      	movs	r2, #0
   34874:	0843      	lsrs	r3, r0, #1
   34876:	428b      	cmp	r3, r1
   34878:	d374      	bcc.n	34964 <__divsi3+0xf8>
   3487a:	0903      	lsrs	r3, r0, #4
   3487c:	428b      	cmp	r3, r1
   3487e:	d35f      	bcc.n	34940 <__divsi3+0xd4>
   34880:	0a03      	lsrs	r3, r0, #8
   34882:	428b      	cmp	r3, r1
   34884:	d344      	bcc.n	34910 <__divsi3+0xa4>
   34886:	0b03      	lsrs	r3, r0, #12
   34888:	428b      	cmp	r3, r1
   3488a:	d328      	bcc.n	348de <__divsi3+0x72>
   3488c:	0c03      	lsrs	r3, r0, #16
   3488e:	428b      	cmp	r3, r1
   34890:	d30d      	bcc.n	348ae <__divsi3+0x42>
   34892:	22ff      	movs	r2, #255	; 0xff
   34894:	0209      	lsls	r1, r1, #8
   34896:	ba12      	rev	r2, r2
   34898:	0c03      	lsrs	r3, r0, #16
   3489a:	428b      	cmp	r3, r1
   3489c:	d302      	bcc.n	348a4 <__divsi3+0x38>
   3489e:	1212      	asrs	r2, r2, #8
   348a0:	0209      	lsls	r1, r1, #8
   348a2:	d065      	beq.n	34970 <__divsi3+0x104>
   348a4:	0b03      	lsrs	r3, r0, #12
   348a6:	428b      	cmp	r3, r1
   348a8:	d319      	bcc.n	348de <__divsi3+0x72>
   348aa:	e000      	b.n	348ae <__divsi3+0x42>
   348ac:	0a09      	lsrs	r1, r1, #8
   348ae:	0bc3      	lsrs	r3, r0, #15
   348b0:	428b      	cmp	r3, r1
   348b2:	d301      	bcc.n	348b8 <__divsi3+0x4c>
   348b4:	03cb      	lsls	r3, r1, #15
   348b6:	1ac0      	subs	r0, r0, r3
   348b8:	4152      	adcs	r2, r2
   348ba:	0b83      	lsrs	r3, r0, #14
   348bc:	428b      	cmp	r3, r1
   348be:	d301      	bcc.n	348c4 <__divsi3+0x58>
   348c0:	038b      	lsls	r3, r1, #14
   348c2:	1ac0      	subs	r0, r0, r3
   348c4:	4152      	adcs	r2, r2
   348c6:	0b43      	lsrs	r3, r0, #13
   348c8:	428b      	cmp	r3, r1
   348ca:	d301      	bcc.n	348d0 <__divsi3+0x64>
   348cc:	034b      	lsls	r3, r1, #13
   348ce:	1ac0      	subs	r0, r0, r3
   348d0:	4152      	adcs	r2, r2
   348d2:	0b03      	lsrs	r3, r0, #12
   348d4:	428b      	cmp	r3, r1
   348d6:	d301      	bcc.n	348dc <__divsi3+0x70>
   348d8:	030b      	lsls	r3, r1, #12
   348da:	1ac0      	subs	r0, r0, r3
   348dc:	4152      	adcs	r2, r2
   348de:	0ac3      	lsrs	r3, r0, #11
   348e0:	428b      	cmp	r3, r1
   348e2:	d301      	bcc.n	348e8 <__divsi3+0x7c>
   348e4:	02cb      	lsls	r3, r1, #11
   348e6:	1ac0      	subs	r0, r0, r3
   348e8:	4152      	adcs	r2, r2
   348ea:	0a83      	lsrs	r3, r0, #10
   348ec:	428b      	cmp	r3, r1
   348ee:	d301      	bcc.n	348f4 <__divsi3+0x88>
   348f0:	028b      	lsls	r3, r1, #10
   348f2:	1ac0      	subs	r0, r0, r3
   348f4:	4152      	adcs	r2, r2
   348f6:	0a43      	lsrs	r3, r0, #9
   348f8:	428b      	cmp	r3, r1
   348fa:	d301      	bcc.n	34900 <__divsi3+0x94>
   348fc:	024b      	lsls	r3, r1, #9
   348fe:	1ac0      	subs	r0, r0, r3
   34900:	4152      	adcs	r2, r2
   34902:	0a03      	lsrs	r3, r0, #8
   34904:	428b      	cmp	r3, r1
   34906:	d301      	bcc.n	3490c <__divsi3+0xa0>
   34908:	020b      	lsls	r3, r1, #8
   3490a:	1ac0      	subs	r0, r0, r3
   3490c:	4152      	adcs	r2, r2
   3490e:	d2cd      	bcs.n	348ac <__divsi3+0x40>
   34910:	09c3      	lsrs	r3, r0, #7
   34912:	428b      	cmp	r3, r1
   34914:	d301      	bcc.n	3491a <__divsi3+0xae>
   34916:	01cb      	lsls	r3, r1, #7
   34918:	1ac0      	subs	r0, r0, r3
   3491a:	4152      	adcs	r2, r2
   3491c:	0983      	lsrs	r3, r0, #6
   3491e:	428b      	cmp	r3, r1
   34920:	d301      	bcc.n	34926 <__divsi3+0xba>
   34922:	018b      	lsls	r3, r1, #6
   34924:	1ac0      	subs	r0, r0, r3
   34926:	4152      	adcs	r2, r2
   34928:	0943      	lsrs	r3, r0, #5
   3492a:	428b      	cmp	r3, r1
   3492c:	d301      	bcc.n	34932 <__divsi3+0xc6>
   3492e:	014b      	lsls	r3, r1, #5
   34930:	1ac0      	subs	r0, r0, r3
   34932:	4152      	adcs	r2, r2
   34934:	0903      	lsrs	r3, r0, #4
   34936:	428b      	cmp	r3, r1
   34938:	d301      	bcc.n	3493e <__divsi3+0xd2>
   3493a:	010b      	lsls	r3, r1, #4
   3493c:	1ac0      	subs	r0, r0, r3
   3493e:	4152      	adcs	r2, r2
   34940:	08c3      	lsrs	r3, r0, #3
   34942:	428b      	cmp	r3, r1
   34944:	d301      	bcc.n	3494a <__divsi3+0xde>
   34946:	00cb      	lsls	r3, r1, #3
   34948:	1ac0      	subs	r0, r0, r3
   3494a:	4152      	adcs	r2, r2
   3494c:	0883      	lsrs	r3, r0, #2
   3494e:	428b      	cmp	r3, r1
   34950:	d301      	bcc.n	34956 <__divsi3+0xea>
   34952:	008b      	lsls	r3, r1, #2
   34954:	1ac0      	subs	r0, r0, r3
   34956:	4152      	adcs	r2, r2
   34958:	0843      	lsrs	r3, r0, #1
   3495a:	428b      	cmp	r3, r1
   3495c:	d301      	bcc.n	34962 <__divsi3+0xf6>
   3495e:	004b      	lsls	r3, r1, #1
   34960:	1ac0      	subs	r0, r0, r3
   34962:	4152      	adcs	r2, r2
   34964:	1a41      	subs	r1, r0, r1
   34966:	d200      	bcs.n	3496a <__divsi3+0xfe>
   34968:	4601      	mov	r1, r0
   3496a:	4152      	adcs	r2, r2
   3496c:	4610      	mov	r0, r2
   3496e:	4770      	bx	lr
   34970:	e05d      	b.n	34a2e <__divsi3+0x1c2>
   34972:	0fca      	lsrs	r2, r1, #31
   34974:	d000      	beq.n	34978 <__divsi3+0x10c>
   34976:	4249      	negs	r1, r1
   34978:	1003      	asrs	r3, r0, #32
   3497a:	d300      	bcc.n	3497e <__divsi3+0x112>
   3497c:	4240      	negs	r0, r0
   3497e:	4053      	eors	r3, r2
   34980:	2200      	movs	r2, #0
   34982:	469c      	mov	ip, r3
   34984:	0903      	lsrs	r3, r0, #4
   34986:	428b      	cmp	r3, r1
   34988:	d32d      	bcc.n	349e6 <__divsi3+0x17a>
   3498a:	0a03      	lsrs	r3, r0, #8
   3498c:	428b      	cmp	r3, r1
   3498e:	d312      	bcc.n	349b6 <__divsi3+0x14a>
   34990:	22fc      	movs	r2, #252	; 0xfc
   34992:	0189      	lsls	r1, r1, #6
   34994:	ba12      	rev	r2, r2
   34996:	0a03      	lsrs	r3, r0, #8
   34998:	428b      	cmp	r3, r1
   3499a:	d30c      	bcc.n	349b6 <__divsi3+0x14a>
   3499c:	0189      	lsls	r1, r1, #6
   3499e:	1192      	asrs	r2, r2, #6
   349a0:	428b      	cmp	r3, r1
   349a2:	d308      	bcc.n	349b6 <__divsi3+0x14a>
   349a4:	0189      	lsls	r1, r1, #6
   349a6:	1192      	asrs	r2, r2, #6
   349a8:	428b      	cmp	r3, r1
   349aa:	d304      	bcc.n	349b6 <__divsi3+0x14a>
   349ac:	0189      	lsls	r1, r1, #6
   349ae:	d03a      	beq.n	34a26 <__divsi3+0x1ba>
   349b0:	1192      	asrs	r2, r2, #6
   349b2:	e000      	b.n	349b6 <__divsi3+0x14a>
   349b4:	0989      	lsrs	r1, r1, #6
   349b6:	09c3      	lsrs	r3, r0, #7
   349b8:	428b      	cmp	r3, r1
   349ba:	d301      	bcc.n	349c0 <__divsi3+0x154>
   349bc:	01cb      	lsls	r3, r1, #7
   349be:	1ac0      	subs	r0, r0, r3
   349c0:	4152      	adcs	r2, r2
   349c2:	0983      	lsrs	r3, r0, #6
   349c4:	428b      	cmp	r3, r1
   349c6:	d301      	bcc.n	349cc <__divsi3+0x160>
   349c8:	018b      	lsls	r3, r1, #6
   349ca:	1ac0      	subs	r0, r0, r3
   349cc:	4152      	adcs	r2, r2
   349ce:	0943      	lsrs	r3, r0, #5
   349d0:	428b      	cmp	r3, r1
   349d2:	d301      	bcc.n	349d8 <__divsi3+0x16c>
   349d4:	014b      	lsls	r3, r1, #5
   349d6:	1ac0      	subs	r0, r0, r3
   349d8:	4152      	adcs	r2, r2
   349da:	0903      	lsrs	r3, r0, #4
   349dc:	428b      	cmp	r3, r1
   349de:	d301      	bcc.n	349e4 <__divsi3+0x178>
   349e0:	010b      	lsls	r3, r1, #4
   349e2:	1ac0      	subs	r0, r0, r3
   349e4:	4152      	adcs	r2, r2
   349e6:	08c3      	lsrs	r3, r0, #3
   349e8:	428b      	cmp	r3, r1
   349ea:	d301      	bcc.n	349f0 <__divsi3+0x184>
   349ec:	00cb      	lsls	r3, r1, #3
   349ee:	1ac0      	subs	r0, r0, r3
   349f0:	4152      	adcs	r2, r2
   349f2:	0883      	lsrs	r3, r0, #2
   349f4:	428b      	cmp	r3, r1
   349f6:	d301      	bcc.n	349fc <__divsi3+0x190>
   349f8:	008b      	lsls	r3, r1, #2
   349fa:	1ac0      	subs	r0, r0, r3
   349fc:	4152      	adcs	r2, r2
   349fe:	d2d9      	bcs.n	349b4 <__divsi3+0x148>
   34a00:	0843      	lsrs	r3, r0, #1
   34a02:	428b      	cmp	r3, r1
   34a04:	d301      	bcc.n	34a0a <__divsi3+0x19e>
   34a06:	004b      	lsls	r3, r1, #1
   34a08:	1ac0      	subs	r0, r0, r3
   34a0a:	4152      	adcs	r2, r2
   34a0c:	1a41      	subs	r1, r0, r1
   34a0e:	d200      	bcs.n	34a12 <__divsi3+0x1a6>
   34a10:	4601      	mov	r1, r0
   34a12:	4663      	mov	r3, ip
   34a14:	4152      	adcs	r2, r2
   34a16:	105b      	asrs	r3, r3, #1
   34a18:	4610      	mov	r0, r2
   34a1a:	d301      	bcc.n	34a20 <__divsi3+0x1b4>
   34a1c:	4240      	negs	r0, r0
   34a1e:	2b00      	cmp	r3, #0
   34a20:	d500      	bpl.n	34a24 <__divsi3+0x1b8>
   34a22:	4249      	negs	r1, r1
   34a24:	4770      	bx	lr
   34a26:	4663      	mov	r3, ip
   34a28:	105b      	asrs	r3, r3, #1
   34a2a:	d300      	bcc.n	34a2e <__divsi3+0x1c2>
   34a2c:	4240      	negs	r0, r0
   34a2e:	b501      	push	{r0, lr}
   34a30:	2000      	movs	r0, #0
   34a32:	f000 f805 	bl	34a40 <__aeabi_idiv0>
   34a36:	bd02      	pop	{r1, pc}

00034a38 <__aeabi_idivmod>:
   34a38:	2900      	cmp	r1, #0
   34a3a:	d0f8      	beq.n	34a2e <__divsi3+0x1c2>
   34a3c:	e716      	b.n	3486c <__divsi3>
   34a3e:	4770      	bx	lr

00034a40 <__aeabi_idiv0>:
   34a40:	4770      	bx	lr
   34a42:	46c0      	nop			; (mov r8, r8)

00034a44 <__aeabi_ldivmod>:
   34a44:	2b00      	cmp	r3, #0
   34a46:	d115      	bne.n	34a74 <__aeabi_ldivmod+0x30>
   34a48:	2a00      	cmp	r2, #0
   34a4a:	d113      	bne.n	34a74 <__aeabi_ldivmod+0x30>
   34a4c:	2900      	cmp	r1, #0
   34a4e:	db06      	blt.n	34a5e <__aeabi_ldivmod+0x1a>
   34a50:	dc01      	bgt.n	34a56 <__aeabi_ldivmod+0x12>
   34a52:	2800      	cmp	r0, #0
   34a54:	d006      	beq.n	34a64 <__aeabi_ldivmod+0x20>
   34a56:	2000      	movs	r0, #0
   34a58:	43c0      	mvns	r0, r0
   34a5a:	0841      	lsrs	r1, r0, #1
   34a5c:	e002      	b.n	34a64 <__aeabi_ldivmod+0x20>
   34a5e:	2180      	movs	r1, #128	; 0x80
   34a60:	0609      	lsls	r1, r1, #24
   34a62:	2000      	movs	r0, #0
   34a64:	b407      	push	{r0, r1, r2}
   34a66:	4802      	ldr	r0, [pc, #8]	; (34a70 <__aeabi_ldivmod+0x2c>)
   34a68:	a101      	add	r1, pc, #4	; (adr r1, 34a70 <__aeabi_ldivmod+0x2c>)
   34a6a:	1840      	adds	r0, r0, r1
   34a6c:	9002      	str	r0, [sp, #8]
   34a6e:	bd03      	pop	{r0, r1, pc}
   34a70:	ffffffd1 	.word	0xffffffd1
   34a74:	b403      	push	{r0, r1}
   34a76:	4668      	mov	r0, sp
   34a78:	b501      	push	{r0, lr}
   34a7a:	9802      	ldr	r0, [sp, #8]
   34a7c:	f000 f830 	bl	34ae0 <__gnu_ldivmod_helper>
   34a80:	9b01      	ldr	r3, [sp, #4]
   34a82:	469e      	mov	lr, r3
   34a84:	b002      	add	sp, #8
   34a86:	bc0c      	pop	{r2, r3}
   34a88:	4770      	bx	lr
   34a8a:	46c0      	nop			; (mov r8, r8)

00034a8c <__aeabi_lmul>:
   34a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   34a8e:	46ce      	mov	lr, r9
   34a90:	4647      	mov	r7, r8
   34a92:	0415      	lsls	r5, r2, #16
   34a94:	0c2d      	lsrs	r5, r5, #16
   34a96:	002e      	movs	r6, r5
   34a98:	b580      	push	{r7, lr}
   34a9a:	0407      	lsls	r7, r0, #16
   34a9c:	0c14      	lsrs	r4, r2, #16
   34a9e:	0c3f      	lsrs	r7, r7, #16
   34aa0:	4699      	mov	r9, r3
   34aa2:	0c03      	lsrs	r3, r0, #16
   34aa4:	437e      	muls	r6, r7
   34aa6:	435d      	muls	r5, r3
   34aa8:	4367      	muls	r7, r4
   34aaa:	4363      	muls	r3, r4
   34aac:	197f      	adds	r7, r7, r5
   34aae:	0c34      	lsrs	r4, r6, #16
   34ab0:	19e4      	adds	r4, r4, r7
   34ab2:	469c      	mov	ip, r3
   34ab4:	42a5      	cmp	r5, r4
   34ab6:	d903      	bls.n	34ac0 <__aeabi_lmul+0x34>
   34ab8:	2380      	movs	r3, #128	; 0x80
   34aba:	025b      	lsls	r3, r3, #9
   34abc:	4698      	mov	r8, r3
   34abe:	44c4      	add	ip, r8
   34ac0:	464b      	mov	r3, r9
   34ac2:	4351      	muls	r1, r2
   34ac4:	4343      	muls	r3, r0
   34ac6:	0436      	lsls	r6, r6, #16
   34ac8:	0c36      	lsrs	r6, r6, #16
   34aca:	0c25      	lsrs	r5, r4, #16
   34acc:	0424      	lsls	r4, r4, #16
   34ace:	4465      	add	r5, ip
   34ad0:	19a4      	adds	r4, r4, r6
   34ad2:	1859      	adds	r1, r3, r1
   34ad4:	1949      	adds	r1, r1, r5
   34ad6:	0020      	movs	r0, r4
   34ad8:	bc0c      	pop	{r2, r3}
   34ada:	4690      	mov	r8, r2
   34adc:	4699      	mov	r9, r3
   34ade:	bdf0      	pop	{r4, r5, r6, r7, pc}

00034ae0 <__gnu_ldivmod_helper>:
   34ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
   34ae2:	b083      	sub	sp, #12
   34ae4:	0016      	movs	r6, r2
   34ae6:	001f      	movs	r7, r3
   34ae8:	9000      	str	r0, [sp, #0]
   34aea:	9101      	str	r1, [sp, #4]
   34aec:	f001 ff96 	bl	36a1c <__divdi3>
   34af0:	0004      	movs	r4, r0
   34af2:	000d      	movs	r5, r1
   34af4:	0002      	movs	r2, r0
   34af6:	000b      	movs	r3, r1
   34af8:	0030      	movs	r0, r6
   34afa:	0039      	movs	r1, r7
   34afc:	f7ff ffc6 	bl	34a8c <__aeabi_lmul>
   34b00:	9a00      	ldr	r2, [sp, #0]
   34b02:	9b01      	ldr	r3, [sp, #4]
   34b04:	1a12      	subs	r2, r2, r0
   34b06:	418b      	sbcs	r3, r1
   34b08:	9908      	ldr	r1, [sp, #32]
   34b0a:	0020      	movs	r0, r4
   34b0c:	600a      	str	r2, [r1, #0]
   34b0e:	604b      	str	r3, [r1, #4]
   34b10:	0029      	movs	r1, r5
   34b12:	b003      	add	sp, #12
   34b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34b16:	46c0      	nop			; (mov r8, r8)

00034b18 <__aeabi_fdiv>:
   34b18:	b5f0      	push	{r4, r5, r6, r7, lr}
   34b1a:	4657      	mov	r7, sl
   34b1c:	464e      	mov	r6, r9
   34b1e:	46de      	mov	lr, fp
   34b20:	4645      	mov	r5, r8
   34b22:	b5e0      	push	{r5, r6, r7, lr}
   34b24:	0244      	lsls	r4, r0, #9
   34b26:	0043      	lsls	r3, r0, #1
   34b28:	0fc6      	lsrs	r6, r0, #31
   34b2a:	b083      	sub	sp, #12
   34b2c:	1c0f      	adds	r7, r1, #0
   34b2e:	0a64      	lsrs	r4, r4, #9
   34b30:	0e1b      	lsrs	r3, r3, #24
   34b32:	46b2      	mov	sl, r6
   34b34:	d053      	beq.n	34bde <__aeabi_fdiv+0xc6>
   34b36:	2bff      	cmp	r3, #255	; 0xff
   34b38:	d027      	beq.n	34b8a <__aeabi_fdiv+0x72>
   34b3a:	2280      	movs	r2, #128	; 0x80
   34b3c:	00e4      	lsls	r4, r4, #3
   34b3e:	04d2      	lsls	r2, r2, #19
   34b40:	4314      	orrs	r4, r2
   34b42:	227f      	movs	r2, #127	; 0x7f
   34b44:	4252      	negs	r2, r2
   34b46:	4690      	mov	r8, r2
   34b48:	4498      	add	r8, r3
   34b4a:	2300      	movs	r3, #0
   34b4c:	4699      	mov	r9, r3
   34b4e:	469b      	mov	fp, r3
   34b50:	027d      	lsls	r5, r7, #9
   34b52:	0078      	lsls	r0, r7, #1
   34b54:	0ffb      	lsrs	r3, r7, #31
   34b56:	0a6d      	lsrs	r5, r5, #9
   34b58:	0e00      	lsrs	r0, r0, #24
   34b5a:	9300      	str	r3, [sp, #0]
   34b5c:	d024      	beq.n	34ba8 <__aeabi_fdiv+0x90>
   34b5e:	28ff      	cmp	r0, #255	; 0xff
   34b60:	d046      	beq.n	34bf0 <__aeabi_fdiv+0xd8>
   34b62:	2380      	movs	r3, #128	; 0x80
   34b64:	2100      	movs	r1, #0
   34b66:	00ed      	lsls	r5, r5, #3
   34b68:	04db      	lsls	r3, r3, #19
   34b6a:	431d      	orrs	r5, r3
   34b6c:	387f      	subs	r0, #127	; 0x7f
   34b6e:	4647      	mov	r7, r8
   34b70:	1a38      	subs	r0, r7, r0
   34b72:	464f      	mov	r7, r9
   34b74:	430f      	orrs	r7, r1
   34b76:	00bf      	lsls	r7, r7, #2
   34b78:	46b9      	mov	r9, r7
   34b7a:	0033      	movs	r3, r6
   34b7c:	9a00      	ldr	r2, [sp, #0]
   34b7e:	4f87      	ldr	r7, [pc, #540]	; (34d9c <__aeabi_fdiv+0x284>)
   34b80:	4053      	eors	r3, r2
   34b82:	464a      	mov	r2, r9
   34b84:	58ba      	ldr	r2, [r7, r2]
   34b86:	9301      	str	r3, [sp, #4]
   34b88:	4697      	mov	pc, r2
   34b8a:	2c00      	cmp	r4, #0
   34b8c:	d14e      	bne.n	34c2c <__aeabi_fdiv+0x114>
   34b8e:	2308      	movs	r3, #8
   34b90:	4699      	mov	r9, r3
   34b92:	33f7      	adds	r3, #247	; 0xf7
   34b94:	4698      	mov	r8, r3
   34b96:	3bfd      	subs	r3, #253	; 0xfd
   34b98:	469b      	mov	fp, r3
   34b9a:	027d      	lsls	r5, r7, #9
   34b9c:	0078      	lsls	r0, r7, #1
   34b9e:	0ffb      	lsrs	r3, r7, #31
   34ba0:	0a6d      	lsrs	r5, r5, #9
   34ba2:	0e00      	lsrs	r0, r0, #24
   34ba4:	9300      	str	r3, [sp, #0]
   34ba6:	d1da      	bne.n	34b5e <__aeabi_fdiv+0x46>
   34ba8:	2d00      	cmp	r5, #0
   34baa:	d126      	bne.n	34bfa <__aeabi_fdiv+0xe2>
   34bac:	2000      	movs	r0, #0
   34bae:	2101      	movs	r1, #1
   34bb0:	0033      	movs	r3, r6
   34bb2:	9a00      	ldr	r2, [sp, #0]
   34bb4:	4f7a      	ldr	r7, [pc, #488]	; (34da0 <__aeabi_fdiv+0x288>)
   34bb6:	4053      	eors	r3, r2
   34bb8:	4642      	mov	r2, r8
   34bba:	1a10      	subs	r0, r2, r0
   34bbc:	464a      	mov	r2, r9
   34bbe:	430a      	orrs	r2, r1
   34bc0:	0092      	lsls	r2, r2, #2
   34bc2:	58ba      	ldr	r2, [r7, r2]
   34bc4:	001d      	movs	r5, r3
   34bc6:	4697      	mov	pc, r2
   34bc8:	9b00      	ldr	r3, [sp, #0]
   34bca:	002c      	movs	r4, r5
   34bcc:	469a      	mov	sl, r3
   34bce:	468b      	mov	fp, r1
   34bd0:	465b      	mov	r3, fp
   34bd2:	2b02      	cmp	r3, #2
   34bd4:	d131      	bne.n	34c3a <__aeabi_fdiv+0x122>
   34bd6:	4653      	mov	r3, sl
   34bd8:	21ff      	movs	r1, #255	; 0xff
   34bda:	2400      	movs	r4, #0
   34bdc:	e038      	b.n	34c50 <__aeabi_fdiv+0x138>
   34bde:	2c00      	cmp	r4, #0
   34be0:	d117      	bne.n	34c12 <__aeabi_fdiv+0xfa>
   34be2:	2304      	movs	r3, #4
   34be4:	4699      	mov	r9, r3
   34be6:	2300      	movs	r3, #0
   34be8:	4698      	mov	r8, r3
   34bea:	3301      	adds	r3, #1
   34bec:	469b      	mov	fp, r3
   34bee:	e7af      	b.n	34b50 <__aeabi_fdiv+0x38>
   34bf0:	20ff      	movs	r0, #255	; 0xff
   34bf2:	2d00      	cmp	r5, #0
   34bf4:	d10b      	bne.n	34c0e <__aeabi_fdiv+0xf6>
   34bf6:	2102      	movs	r1, #2
   34bf8:	e7da      	b.n	34bb0 <__aeabi_fdiv+0x98>
   34bfa:	0028      	movs	r0, r5
   34bfc:	f001 fef0 	bl	369e0 <__clzsi2>
   34c00:	1f43      	subs	r3, r0, #5
   34c02:	409d      	lsls	r5, r3
   34c04:	2376      	movs	r3, #118	; 0x76
   34c06:	425b      	negs	r3, r3
   34c08:	1a18      	subs	r0, r3, r0
   34c0a:	2100      	movs	r1, #0
   34c0c:	e7af      	b.n	34b6e <__aeabi_fdiv+0x56>
   34c0e:	2103      	movs	r1, #3
   34c10:	e7ad      	b.n	34b6e <__aeabi_fdiv+0x56>
   34c12:	0020      	movs	r0, r4
   34c14:	f001 fee4 	bl	369e0 <__clzsi2>
   34c18:	1f43      	subs	r3, r0, #5
   34c1a:	409c      	lsls	r4, r3
   34c1c:	2376      	movs	r3, #118	; 0x76
   34c1e:	425b      	negs	r3, r3
   34c20:	1a1b      	subs	r3, r3, r0
   34c22:	4698      	mov	r8, r3
   34c24:	2300      	movs	r3, #0
   34c26:	4699      	mov	r9, r3
   34c28:	469b      	mov	fp, r3
   34c2a:	e791      	b.n	34b50 <__aeabi_fdiv+0x38>
   34c2c:	230c      	movs	r3, #12
   34c2e:	4699      	mov	r9, r3
   34c30:	33f3      	adds	r3, #243	; 0xf3
   34c32:	4698      	mov	r8, r3
   34c34:	3bfc      	subs	r3, #252	; 0xfc
   34c36:	469b      	mov	fp, r3
   34c38:	e78a      	b.n	34b50 <__aeabi_fdiv+0x38>
   34c3a:	2b03      	cmp	r3, #3
   34c3c:	d100      	bne.n	34c40 <__aeabi_fdiv+0x128>
   34c3e:	e0a5      	b.n	34d8c <__aeabi_fdiv+0x274>
   34c40:	4655      	mov	r5, sl
   34c42:	2b01      	cmp	r3, #1
   34c44:	d000      	beq.n	34c48 <__aeabi_fdiv+0x130>
   34c46:	e081      	b.n	34d4c <__aeabi_fdiv+0x234>
   34c48:	2301      	movs	r3, #1
   34c4a:	2100      	movs	r1, #0
   34c4c:	2400      	movs	r4, #0
   34c4e:	402b      	ands	r3, r5
   34c50:	0264      	lsls	r4, r4, #9
   34c52:	05c9      	lsls	r1, r1, #23
   34c54:	0a60      	lsrs	r0, r4, #9
   34c56:	07db      	lsls	r3, r3, #31
   34c58:	4308      	orrs	r0, r1
   34c5a:	4318      	orrs	r0, r3
   34c5c:	b003      	add	sp, #12
   34c5e:	bc3c      	pop	{r2, r3, r4, r5}
   34c60:	4690      	mov	r8, r2
   34c62:	4699      	mov	r9, r3
   34c64:	46a2      	mov	sl, r4
   34c66:	46ab      	mov	fp, r5
   34c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34c6a:	2480      	movs	r4, #128	; 0x80
   34c6c:	2300      	movs	r3, #0
   34c6e:	03e4      	lsls	r4, r4, #15
   34c70:	21ff      	movs	r1, #255	; 0xff
   34c72:	e7ed      	b.n	34c50 <__aeabi_fdiv+0x138>
   34c74:	21ff      	movs	r1, #255	; 0xff
   34c76:	2400      	movs	r4, #0
   34c78:	e7ea      	b.n	34c50 <__aeabi_fdiv+0x138>
   34c7a:	2301      	movs	r3, #1
   34c7c:	1a59      	subs	r1, r3, r1
   34c7e:	291b      	cmp	r1, #27
   34c80:	dd66      	ble.n	34d50 <__aeabi_fdiv+0x238>
   34c82:	9a01      	ldr	r2, [sp, #4]
   34c84:	4013      	ands	r3, r2
   34c86:	2100      	movs	r1, #0
   34c88:	2400      	movs	r4, #0
   34c8a:	e7e1      	b.n	34c50 <__aeabi_fdiv+0x138>
   34c8c:	2380      	movs	r3, #128	; 0x80
   34c8e:	03db      	lsls	r3, r3, #15
   34c90:	421c      	tst	r4, r3
   34c92:	d038      	beq.n	34d06 <__aeabi_fdiv+0x1ee>
   34c94:	421d      	tst	r5, r3
   34c96:	d051      	beq.n	34d3c <__aeabi_fdiv+0x224>
   34c98:	431c      	orrs	r4, r3
   34c9a:	0264      	lsls	r4, r4, #9
   34c9c:	0a64      	lsrs	r4, r4, #9
   34c9e:	0033      	movs	r3, r6
   34ca0:	21ff      	movs	r1, #255	; 0xff
   34ca2:	e7d5      	b.n	34c50 <__aeabi_fdiv+0x138>
   34ca4:	0163      	lsls	r3, r4, #5
   34ca6:	016c      	lsls	r4, r5, #5
   34ca8:	42a3      	cmp	r3, r4
   34caa:	d23b      	bcs.n	34d24 <__aeabi_fdiv+0x20c>
   34cac:	261b      	movs	r6, #27
   34cae:	2100      	movs	r1, #0
   34cb0:	3801      	subs	r0, #1
   34cb2:	2501      	movs	r5, #1
   34cb4:	001f      	movs	r7, r3
   34cb6:	0049      	lsls	r1, r1, #1
   34cb8:	005b      	lsls	r3, r3, #1
   34cba:	2f00      	cmp	r7, #0
   34cbc:	db01      	blt.n	34cc2 <__aeabi_fdiv+0x1aa>
   34cbe:	429c      	cmp	r4, r3
   34cc0:	d801      	bhi.n	34cc6 <__aeabi_fdiv+0x1ae>
   34cc2:	1b1b      	subs	r3, r3, r4
   34cc4:	4329      	orrs	r1, r5
   34cc6:	3e01      	subs	r6, #1
   34cc8:	2e00      	cmp	r6, #0
   34cca:	d1f3      	bne.n	34cb4 <__aeabi_fdiv+0x19c>
   34ccc:	001c      	movs	r4, r3
   34cce:	1e63      	subs	r3, r4, #1
   34cd0:	419c      	sbcs	r4, r3
   34cd2:	430c      	orrs	r4, r1
   34cd4:	0001      	movs	r1, r0
   34cd6:	317f      	adds	r1, #127	; 0x7f
   34cd8:	2900      	cmp	r1, #0
   34cda:	ddce      	ble.n	34c7a <__aeabi_fdiv+0x162>
   34cdc:	0763      	lsls	r3, r4, #29
   34cde:	d004      	beq.n	34cea <__aeabi_fdiv+0x1d2>
   34ce0:	230f      	movs	r3, #15
   34ce2:	4023      	ands	r3, r4
   34ce4:	2b04      	cmp	r3, #4
   34ce6:	d000      	beq.n	34cea <__aeabi_fdiv+0x1d2>
   34ce8:	3404      	adds	r4, #4
   34cea:	0123      	lsls	r3, r4, #4
   34cec:	d503      	bpl.n	34cf6 <__aeabi_fdiv+0x1de>
   34cee:	0001      	movs	r1, r0
   34cf0:	4b2c      	ldr	r3, [pc, #176]	; (34da4 <__aeabi_fdiv+0x28c>)
   34cf2:	3180      	adds	r1, #128	; 0x80
   34cf4:	401c      	ands	r4, r3
   34cf6:	29fe      	cmp	r1, #254	; 0xfe
   34cf8:	dd0d      	ble.n	34d16 <__aeabi_fdiv+0x1fe>
   34cfa:	2301      	movs	r3, #1
   34cfc:	9a01      	ldr	r2, [sp, #4]
   34cfe:	21ff      	movs	r1, #255	; 0xff
   34d00:	4013      	ands	r3, r2
   34d02:	2400      	movs	r4, #0
   34d04:	e7a4      	b.n	34c50 <__aeabi_fdiv+0x138>
   34d06:	2380      	movs	r3, #128	; 0x80
   34d08:	03db      	lsls	r3, r3, #15
   34d0a:	431c      	orrs	r4, r3
   34d0c:	0264      	lsls	r4, r4, #9
   34d0e:	0a64      	lsrs	r4, r4, #9
   34d10:	0033      	movs	r3, r6
   34d12:	21ff      	movs	r1, #255	; 0xff
   34d14:	e79c      	b.n	34c50 <__aeabi_fdiv+0x138>
   34d16:	2301      	movs	r3, #1
   34d18:	9a01      	ldr	r2, [sp, #4]
   34d1a:	01a4      	lsls	r4, r4, #6
   34d1c:	0a64      	lsrs	r4, r4, #9
   34d1e:	b2c9      	uxtb	r1, r1
   34d20:	4013      	ands	r3, r2
   34d22:	e795      	b.n	34c50 <__aeabi_fdiv+0x138>
   34d24:	1b1b      	subs	r3, r3, r4
   34d26:	261a      	movs	r6, #26
   34d28:	2101      	movs	r1, #1
   34d2a:	e7c2      	b.n	34cb2 <__aeabi_fdiv+0x19a>
   34d2c:	9b00      	ldr	r3, [sp, #0]
   34d2e:	468b      	mov	fp, r1
   34d30:	469a      	mov	sl, r3
   34d32:	2400      	movs	r4, #0
   34d34:	e74c      	b.n	34bd0 <__aeabi_fdiv+0xb8>
   34d36:	0263      	lsls	r3, r4, #9
   34d38:	d5e5      	bpl.n	34d06 <__aeabi_fdiv+0x1ee>
   34d3a:	2500      	movs	r5, #0
   34d3c:	2480      	movs	r4, #128	; 0x80
   34d3e:	03e4      	lsls	r4, r4, #15
   34d40:	432c      	orrs	r4, r5
   34d42:	0264      	lsls	r4, r4, #9
   34d44:	0a64      	lsrs	r4, r4, #9
   34d46:	9b00      	ldr	r3, [sp, #0]
   34d48:	21ff      	movs	r1, #255	; 0xff
   34d4a:	e781      	b.n	34c50 <__aeabi_fdiv+0x138>
   34d4c:	9501      	str	r5, [sp, #4]
   34d4e:	e7c1      	b.n	34cd4 <__aeabi_fdiv+0x1bc>
   34d50:	0023      	movs	r3, r4
   34d52:	2020      	movs	r0, #32
   34d54:	40cb      	lsrs	r3, r1
   34d56:	1a41      	subs	r1, r0, r1
   34d58:	408c      	lsls	r4, r1
   34d5a:	1e61      	subs	r1, r4, #1
   34d5c:	418c      	sbcs	r4, r1
   34d5e:	431c      	orrs	r4, r3
   34d60:	0763      	lsls	r3, r4, #29
   34d62:	d004      	beq.n	34d6e <__aeabi_fdiv+0x256>
   34d64:	230f      	movs	r3, #15
   34d66:	4023      	ands	r3, r4
   34d68:	2b04      	cmp	r3, #4
   34d6a:	d000      	beq.n	34d6e <__aeabi_fdiv+0x256>
   34d6c:	3404      	adds	r4, #4
   34d6e:	0163      	lsls	r3, r4, #5
   34d70:	d505      	bpl.n	34d7e <__aeabi_fdiv+0x266>
   34d72:	2301      	movs	r3, #1
   34d74:	9a01      	ldr	r2, [sp, #4]
   34d76:	2101      	movs	r1, #1
   34d78:	4013      	ands	r3, r2
   34d7a:	2400      	movs	r4, #0
   34d7c:	e768      	b.n	34c50 <__aeabi_fdiv+0x138>
   34d7e:	2301      	movs	r3, #1
   34d80:	9a01      	ldr	r2, [sp, #4]
   34d82:	01a4      	lsls	r4, r4, #6
   34d84:	0a64      	lsrs	r4, r4, #9
   34d86:	4013      	ands	r3, r2
   34d88:	2100      	movs	r1, #0
   34d8a:	e761      	b.n	34c50 <__aeabi_fdiv+0x138>
   34d8c:	2380      	movs	r3, #128	; 0x80
   34d8e:	03db      	lsls	r3, r3, #15
   34d90:	431c      	orrs	r4, r3
   34d92:	0264      	lsls	r4, r4, #9
   34d94:	0a64      	lsrs	r4, r4, #9
   34d96:	4653      	mov	r3, sl
   34d98:	21ff      	movs	r1, #255	; 0xff
   34d9a:	e759      	b.n	34c50 <__aeabi_fdiv+0x138>
   34d9c:	0003c5f4 	.word	0x0003c5f4
   34da0:	0003c634 	.word	0x0003c634
   34da4:	f7ffffff 	.word	0xf7ffffff

00034da8 <__aeabi_fmul>:
   34da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34daa:	4657      	mov	r7, sl
   34dac:	464e      	mov	r6, r9
   34dae:	4645      	mov	r5, r8
   34db0:	46de      	mov	lr, fp
   34db2:	b5e0      	push	{r5, r6, r7, lr}
   34db4:	0247      	lsls	r7, r0, #9
   34db6:	0046      	lsls	r6, r0, #1
   34db8:	4688      	mov	r8, r1
   34dba:	0a7f      	lsrs	r7, r7, #9
   34dbc:	0e36      	lsrs	r6, r6, #24
   34dbe:	0fc4      	lsrs	r4, r0, #31
   34dc0:	2e00      	cmp	r6, #0
   34dc2:	d047      	beq.n	34e54 <__aeabi_fmul+0xac>
   34dc4:	2eff      	cmp	r6, #255	; 0xff
   34dc6:	d024      	beq.n	34e12 <__aeabi_fmul+0x6a>
   34dc8:	00fb      	lsls	r3, r7, #3
   34dca:	2780      	movs	r7, #128	; 0x80
   34dcc:	04ff      	lsls	r7, r7, #19
   34dce:	431f      	orrs	r7, r3
   34dd0:	2300      	movs	r3, #0
   34dd2:	4699      	mov	r9, r3
   34dd4:	469a      	mov	sl, r3
   34dd6:	3e7f      	subs	r6, #127	; 0x7f
   34dd8:	4643      	mov	r3, r8
   34dda:	025d      	lsls	r5, r3, #9
   34ddc:	0058      	lsls	r0, r3, #1
   34dde:	0fdb      	lsrs	r3, r3, #31
   34de0:	0a6d      	lsrs	r5, r5, #9
   34de2:	0e00      	lsrs	r0, r0, #24
   34de4:	4698      	mov	r8, r3
   34de6:	d043      	beq.n	34e70 <__aeabi_fmul+0xc8>
   34de8:	28ff      	cmp	r0, #255	; 0xff
   34dea:	d03b      	beq.n	34e64 <__aeabi_fmul+0xbc>
   34dec:	00eb      	lsls	r3, r5, #3
   34dee:	2580      	movs	r5, #128	; 0x80
   34df0:	2200      	movs	r2, #0
   34df2:	04ed      	lsls	r5, r5, #19
   34df4:	431d      	orrs	r5, r3
   34df6:	387f      	subs	r0, #127	; 0x7f
   34df8:	1836      	adds	r6, r6, r0
   34dfa:	1c73      	adds	r3, r6, #1
   34dfc:	4641      	mov	r1, r8
   34dfe:	469b      	mov	fp, r3
   34e00:	464b      	mov	r3, r9
   34e02:	4061      	eors	r1, r4
   34e04:	4313      	orrs	r3, r2
   34e06:	2b0f      	cmp	r3, #15
   34e08:	d864      	bhi.n	34ed4 <__aeabi_fmul+0x12c>
   34e0a:	4875      	ldr	r0, [pc, #468]	; (34fe0 <__aeabi_fmul+0x238>)
   34e0c:	009b      	lsls	r3, r3, #2
   34e0e:	58c3      	ldr	r3, [r0, r3]
   34e10:	469f      	mov	pc, r3
   34e12:	2f00      	cmp	r7, #0
   34e14:	d142      	bne.n	34e9c <__aeabi_fmul+0xf4>
   34e16:	2308      	movs	r3, #8
   34e18:	4699      	mov	r9, r3
   34e1a:	3b06      	subs	r3, #6
   34e1c:	26ff      	movs	r6, #255	; 0xff
   34e1e:	469a      	mov	sl, r3
   34e20:	e7da      	b.n	34dd8 <__aeabi_fmul+0x30>
   34e22:	4641      	mov	r1, r8
   34e24:	2a02      	cmp	r2, #2
   34e26:	d028      	beq.n	34e7a <__aeabi_fmul+0xd2>
   34e28:	2a03      	cmp	r2, #3
   34e2a:	d100      	bne.n	34e2e <__aeabi_fmul+0x86>
   34e2c:	e0ce      	b.n	34fcc <__aeabi_fmul+0x224>
   34e2e:	2a01      	cmp	r2, #1
   34e30:	d000      	beq.n	34e34 <__aeabi_fmul+0x8c>
   34e32:	e0ac      	b.n	34f8e <__aeabi_fmul+0x1e6>
   34e34:	4011      	ands	r1, r2
   34e36:	2000      	movs	r0, #0
   34e38:	2200      	movs	r2, #0
   34e3a:	b2cc      	uxtb	r4, r1
   34e3c:	0240      	lsls	r0, r0, #9
   34e3e:	05d2      	lsls	r2, r2, #23
   34e40:	0a40      	lsrs	r0, r0, #9
   34e42:	07e4      	lsls	r4, r4, #31
   34e44:	4310      	orrs	r0, r2
   34e46:	4320      	orrs	r0, r4
   34e48:	bc3c      	pop	{r2, r3, r4, r5}
   34e4a:	4690      	mov	r8, r2
   34e4c:	4699      	mov	r9, r3
   34e4e:	46a2      	mov	sl, r4
   34e50:	46ab      	mov	fp, r5
   34e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34e54:	2f00      	cmp	r7, #0
   34e56:	d115      	bne.n	34e84 <__aeabi_fmul+0xdc>
   34e58:	2304      	movs	r3, #4
   34e5a:	4699      	mov	r9, r3
   34e5c:	3b03      	subs	r3, #3
   34e5e:	2600      	movs	r6, #0
   34e60:	469a      	mov	sl, r3
   34e62:	e7b9      	b.n	34dd8 <__aeabi_fmul+0x30>
   34e64:	20ff      	movs	r0, #255	; 0xff
   34e66:	2202      	movs	r2, #2
   34e68:	2d00      	cmp	r5, #0
   34e6a:	d0c5      	beq.n	34df8 <__aeabi_fmul+0x50>
   34e6c:	2203      	movs	r2, #3
   34e6e:	e7c3      	b.n	34df8 <__aeabi_fmul+0x50>
   34e70:	2d00      	cmp	r5, #0
   34e72:	d119      	bne.n	34ea8 <__aeabi_fmul+0x100>
   34e74:	2000      	movs	r0, #0
   34e76:	2201      	movs	r2, #1
   34e78:	e7be      	b.n	34df8 <__aeabi_fmul+0x50>
   34e7a:	2401      	movs	r4, #1
   34e7c:	22ff      	movs	r2, #255	; 0xff
   34e7e:	400c      	ands	r4, r1
   34e80:	2000      	movs	r0, #0
   34e82:	e7db      	b.n	34e3c <__aeabi_fmul+0x94>
   34e84:	0038      	movs	r0, r7
   34e86:	f001 fdab 	bl	369e0 <__clzsi2>
   34e8a:	2676      	movs	r6, #118	; 0x76
   34e8c:	1f43      	subs	r3, r0, #5
   34e8e:	409f      	lsls	r7, r3
   34e90:	2300      	movs	r3, #0
   34e92:	4276      	negs	r6, r6
   34e94:	1a36      	subs	r6, r6, r0
   34e96:	4699      	mov	r9, r3
   34e98:	469a      	mov	sl, r3
   34e9a:	e79d      	b.n	34dd8 <__aeabi_fmul+0x30>
   34e9c:	230c      	movs	r3, #12
   34e9e:	4699      	mov	r9, r3
   34ea0:	3b09      	subs	r3, #9
   34ea2:	26ff      	movs	r6, #255	; 0xff
   34ea4:	469a      	mov	sl, r3
   34ea6:	e797      	b.n	34dd8 <__aeabi_fmul+0x30>
   34ea8:	0028      	movs	r0, r5
   34eaa:	f001 fd99 	bl	369e0 <__clzsi2>
   34eae:	1f43      	subs	r3, r0, #5
   34eb0:	409d      	lsls	r5, r3
   34eb2:	2376      	movs	r3, #118	; 0x76
   34eb4:	425b      	negs	r3, r3
   34eb6:	1a18      	subs	r0, r3, r0
   34eb8:	2200      	movs	r2, #0
   34eba:	e79d      	b.n	34df8 <__aeabi_fmul+0x50>
   34ebc:	2080      	movs	r0, #128	; 0x80
   34ebe:	2400      	movs	r4, #0
   34ec0:	03c0      	lsls	r0, r0, #15
   34ec2:	22ff      	movs	r2, #255	; 0xff
   34ec4:	e7ba      	b.n	34e3c <__aeabi_fmul+0x94>
   34ec6:	003d      	movs	r5, r7
   34ec8:	4652      	mov	r2, sl
   34eca:	e7ab      	b.n	34e24 <__aeabi_fmul+0x7c>
   34ecc:	003d      	movs	r5, r7
   34ece:	0021      	movs	r1, r4
   34ed0:	4652      	mov	r2, sl
   34ed2:	e7a7      	b.n	34e24 <__aeabi_fmul+0x7c>
   34ed4:	0c3b      	lsrs	r3, r7, #16
   34ed6:	469c      	mov	ip, r3
   34ed8:	042a      	lsls	r2, r5, #16
   34eda:	0c12      	lsrs	r2, r2, #16
   34edc:	0c2b      	lsrs	r3, r5, #16
   34ede:	0014      	movs	r4, r2
   34ee0:	4660      	mov	r0, ip
   34ee2:	4665      	mov	r5, ip
   34ee4:	043f      	lsls	r7, r7, #16
   34ee6:	0c3f      	lsrs	r7, r7, #16
   34ee8:	437c      	muls	r4, r7
   34eea:	4342      	muls	r2, r0
   34eec:	435d      	muls	r5, r3
   34eee:	437b      	muls	r3, r7
   34ef0:	0c27      	lsrs	r7, r4, #16
   34ef2:	189b      	adds	r3, r3, r2
   34ef4:	18ff      	adds	r7, r7, r3
   34ef6:	42ba      	cmp	r2, r7
   34ef8:	d903      	bls.n	34f02 <__aeabi_fmul+0x15a>
   34efa:	2380      	movs	r3, #128	; 0x80
   34efc:	025b      	lsls	r3, r3, #9
   34efe:	469c      	mov	ip, r3
   34f00:	4465      	add	r5, ip
   34f02:	0424      	lsls	r4, r4, #16
   34f04:	043a      	lsls	r2, r7, #16
   34f06:	0c24      	lsrs	r4, r4, #16
   34f08:	1912      	adds	r2, r2, r4
   34f0a:	0193      	lsls	r3, r2, #6
   34f0c:	1e5c      	subs	r4, r3, #1
   34f0e:	41a3      	sbcs	r3, r4
   34f10:	0c3f      	lsrs	r7, r7, #16
   34f12:	0e92      	lsrs	r2, r2, #26
   34f14:	197d      	adds	r5, r7, r5
   34f16:	431a      	orrs	r2, r3
   34f18:	01ad      	lsls	r5, r5, #6
   34f1a:	4315      	orrs	r5, r2
   34f1c:	012b      	lsls	r3, r5, #4
   34f1e:	d504      	bpl.n	34f2a <__aeabi_fmul+0x182>
   34f20:	2301      	movs	r3, #1
   34f22:	465e      	mov	r6, fp
   34f24:	086a      	lsrs	r2, r5, #1
   34f26:	401d      	ands	r5, r3
   34f28:	4315      	orrs	r5, r2
   34f2a:	0032      	movs	r2, r6
   34f2c:	327f      	adds	r2, #127	; 0x7f
   34f2e:	2a00      	cmp	r2, #0
   34f30:	dd25      	ble.n	34f7e <__aeabi_fmul+0x1d6>
   34f32:	076b      	lsls	r3, r5, #29
   34f34:	d004      	beq.n	34f40 <__aeabi_fmul+0x198>
   34f36:	230f      	movs	r3, #15
   34f38:	402b      	ands	r3, r5
   34f3a:	2b04      	cmp	r3, #4
   34f3c:	d000      	beq.n	34f40 <__aeabi_fmul+0x198>
   34f3e:	3504      	adds	r5, #4
   34f40:	012b      	lsls	r3, r5, #4
   34f42:	d503      	bpl.n	34f4c <__aeabi_fmul+0x1a4>
   34f44:	0032      	movs	r2, r6
   34f46:	4b27      	ldr	r3, [pc, #156]	; (34fe4 <__aeabi_fmul+0x23c>)
   34f48:	3280      	adds	r2, #128	; 0x80
   34f4a:	401d      	ands	r5, r3
   34f4c:	2afe      	cmp	r2, #254	; 0xfe
   34f4e:	dc94      	bgt.n	34e7a <__aeabi_fmul+0xd2>
   34f50:	2401      	movs	r4, #1
   34f52:	01a8      	lsls	r0, r5, #6
   34f54:	0a40      	lsrs	r0, r0, #9
   34f56:	b2d2      	uxtb	r2, r2
   34f58:	400c      	ands	r4, r1
   34f5a:	e76f      	b.n	34e3c <__aeabi_fmul+0x94>
   34f5c:	2080      	movs	r0, #128	; 0x80
   34f5e:	03c0      	lsls	r0, r0, #15
   34f60:	4207      	tst	r7, r0
   34f62:	d007      	beq.n	34f74 <__aeabi_fmul+0x1cc>
   34f64:	4205      	tst	r5, r0
   34f66:	d105      	bne.n	34f74 <__aeabi_fmul+0x1cc>
   34f68:	4328      	orrs	r0, r5
   34f6a:	0240      	lsls	r0, r0, #9
   34f6c:	0a40      	lsrs	r0, r0, #9
   34f6e:	4644      	mov	r4, r8
   34f70:	22ff      	movs	r2, #255	; 0xff
   34f72:	e763      	b.n	34e3c <__aeabi_fmul+0x94>
   34f74:	4338      	orrs	r0, r7
   34f76:	0240      	lsls	r0, r0, #9
   34f78:	0a40      	lsrs	r0, r0, #9
   34f7a:	22ff      	movs	r2, #255	; 0xff
   34f7c:	e75e      	b.n	34e3c <__aeabi_fmul+0x94>
   34f7e:	2401      	movs	r4, #1
   34f80:	1aa3      	subs	r3, r4, r2
   34f82:	2b1b      	cmp	r3, #27
   34f84:	dd05      	ble.n	34f92 <__aeabi_fmul+0x1ea>
   34f86:	400c      	ands	r4, r1
   34f88:	2200      	movs	r2, #0
   34f8a:	2000      	movs	r0, #0
   34f8c:	e756      	b.n	34e3c <__aeabi_fmul+0x94>
   34f8e:	465e      	mov	r6, fp
   34f90:	e7cb      	b.n	34f2a <__aeabi_fmul+0x182>
   34f92:	002a      	movs	r2, r5
   34f94:	2020      	movs	r0, #32
   34f96:	40da      	lsrs	r2, r3
   34f98:	1ac3      	subs	r3, r0, r3
   34f9a:	409d      	lsls	r5, r3
   34f9c:	002b      	movs	r3, r5
   34f9e:	1e5d      	subs	r5, r3, #1
   34fa0:	41ab      	sbcs	r3, r5
   34fa2:	4313      	orrs	r3, r2
   34fa4:	075a      	lsls	r2, r3, #29
   34fa6:	d004      	beq.n	34fb2 <__aeabi_fmul+0x20a>
   34fa8:	220f      	movs	r2, #15
   34faa:	401a      	ands	r2, r3
   34fac:	2a04      	cmp	r2, #4
   34fae:	d000      	beq.n	34fb2 <__aeabi_fmul+0x20a>
   34fb0:	3304      	adds	r3, #4
   34fb2:	015a      	lsls	r2, r3, #5
   34fb4:	d504      	bpl.n	34fc0 <__aeabi_fmul+0x218>
   34fb6:	2401      	movs	r4, #1
   34fb8:	2201      	movs	r2, #1
   34fba:	400c      	ands	r4, r1
   34fbc:	2000      	movs	r0, #0
   34fbe:	e73d      	b.n	34e3c <__aeabi_fmul+0x94>
   34fc0:	2401      	movs	r4, #1
   34fc2:	019b      	lsls	r3, r3, #6
   34fc4:	0a58      	lsrs	r0, r3, #9
   34fc6:	400c      	ands	r4, r1
   34fc8:	2200      	movs	r2, #0
   34fca:	e737      	b.n	34e3c <__aeabi_fmul+0x94>
   34fcc:	2080      	movs	r0, #128	; 0x80
   34fce:	2401      	movs	r4, #1
   34fd0:	03c0      	lsls	r0, r0, #15
   34fd2:	4328      	orrs	r0, r5
   34fd4:	0240      	lsls	r0, r0, #9
   34fd6:	0a40      	lsrs	r0, r0, #9
   34fd8:	400c      	ands	r4, r1
   34fda:	22ff      	movs	r2, #255	; 0xff
   34fdc:	e72e      	b.n	34e3c <__aeabi_fmul+0x94>
   34fde:	46c0      	nop			; (mov r8, r8)
   34fe0:	0003c674 	.word	0x0003c674
   34fe4:	f7ffffff 	.word	0xf7ffffff

00034fe8 <__aeabi_f2iz>:
   34fe8:	0241      	lsls	r1, r0, #9
   34fea:	0043      	lsls	r3, r0, #1
   34fec:	0fc2      	lsrs	r2, r0, #31
   34fee:	0a49      	lsrs	r1, r1, #9
   34ff0:	0e1b      	lsrs	r3, r3, #24
   34ff2:	2000      	movs	r0, #0
   34ff4:	2b7e      	cmp	r3, #126	; 0x7e
   34ff6:	dd0d      	ble.n	35014 <__aeabi_f2iz+0x2c>
   34ff8:	2b9d      	cmp	r3, #157	; 0x9d
   34ffa:	dc0c      	bgt.n	35016 <__aeabi_f2iz+0x2e>
   34ffc:	2080      	movs	r0, #128	; 0x80
   34ffe:	0400      	lsls	r0, r0, #16
   35000:	4301      	orrs	r1, r0
   35002:	2b95      	cmp	r3, #149	; 0x95
   35004:	dc0a      	bgt.n	3501c <__aeabi_f2iz+0x34>
   35006:	2096      	movs	r0, #150	; 0x96
   35008:	1ac3      	subs	r3, r0, r3
   3500a:	40d9      	lsrs	r1, r3
   3500c:	4248      	negs	r0, r1
   3500e:	2a00      	cmp	r2, #0
   35010:	d100      	bne.n	35014 <__aeabi_f2iz+0x2c>
   35012:	0008      	movs	r0, r1
   35014:	4770      	bx	lr
   35016:	4b03      	ldr	r3, [pc, #12]	; (35024 <__aeabi_f2iz+0x3c>)
   35018:	18d0      	adds	r0, r2, r3
   3501a:	e7fb      	b.n	35014 <__aeabi_f2iz+0x2c>
   3501c:	3b96      	subs	r3, #150	; 0x96
   3501e:	4099      	lsls	r1, r3
   35020:	e7f4      	b.n	3500c <__aeabi_f2iz+0x24>
   35022:	46c0      	nop			; (mov r8, r8)
   35024:	7fffffff 	.word	0x7fffffff

00035028 <__aeabi_i2f>:
   35028:	b570      	push	{r4, r5, r6, lr}
   3502a:	2800      	cmp	r0, #0
   3502c:	d030      	beq.n	35090 <__aeabi_i2f+0x68>
   3502e:	17c3      	asrs	r3, r0, #31
   35030:	18c4      	adds	r4, r0, r3
   35032:	405c      	eors	r4, r3
   35034:	0fc5      	lsrs	r5, r0, #31
   35036:	0020      	movs	r0, r4
   35038:	f001 fcd2 	bl	369e0 <__clzsi2>
   3503c:	239e      	movs	r3, #158	; 0x9e
   3503e:	1a1b      	subs	r3, r3, r0
   35040:	2b96      	cmp	r3, #150	; 0x96
   35042:	dc0d      	bgt.n	35060 <__aeabi_i2f+0x38>
   35044:	2296      	movs	r2, #150	; 0x96
   35046:	1ad2      	subs	r2, r2, r3
   35048:	4094      	lsls	r4, r2
   3504a:	002a      	movs	r2, r5
   3504c:	0264      	lsls	r4, r4, #9
   3504e:	0a64      	lsrs	r4, r4, #9
   35050:	b2db      	uxtb	r3, r3
   35052:	0264      	lsls	r4, r4, #9
   35054:	05db      	lsls	r3, r3, #23
   35056:	0a60      	lsrs	r0, r4, #9
   35058:	07d2      	lsls	r2, r2, #31
   3505a:	4318      	orrs	r0, r3
   3505c:	4310      	orrs	r0, r2
   3505e:	bd70      	pop	{r4, r5, r6, pc}
   35060:	2b99      	cmp	r3, #153	; 0x99
   35062:	dc19      	bgt.n	35098 <__aeabi_i2f+0x70>
   35064:	2299      	movs	r2, #153	; 0x99
   35066:	1ad2      	subs	r2, r2, r3
   35068:	2a00      	cmp	r2, #0
   3506a:	dd29      	ble.n	350c0 <__aeabi_i2f+0x98>
   3506c:	4094      	lsls	r4, r2
   3506e:	0022      	movs	r2, r4
   35070:	4c14      	ldr	r4, [pc, #80]	; (350c4 <__aeabi_i2f+0x9c>)
   35072:	4014      	ands	r4, r2
   35074:	0751      	lsls	r1, r2, #29
   35076:	d004      	beq.n	35082 <__aeabi_i2f+0x5a>
   35078:	210f      	movs	r1, #15
   3507a:	400a      	ands	r2, r1
   3507c:	2a04      	cmp	r2, #4
   3507e:	d000      	beq.n	35082 <__aeabi_i2f+0x5a>
   35080:	3404      	adds	r4, #4
   35082:	0162      	lsls	r2, r4, #5
   35084:	d413      	bmi.n	350ae <__aeabi_i2f+0x86>
   35086:	01a4      	lsls	r4, r4, #6
   35088:	0a64      	lsrs	r4, r4, #9
   3508a:	b2db      	uxtb	r3, r3
   3508c:	002a      	movs	r2, r5
   3508e:	e7e0      	b.n	35052 <__aeabi_i2f+0x2a>
   35090:	2200      	movs	r2, #0
   35092:	2300      	movs	r3, #0
   35094:	2400      	movs	r4, #0
   35096:	e7dc      	b.n	35052 <__aeabi_i2f+0x2a>
   35098:	2205      	movs	r2, #5
   3509a:	0021      	movs	r1, r4
   3509c:	1a12      	subs	r2, r2, r0
   3509e:	40d1      	lsrs	r1, r2
   350a0:	22b9      	movs	r2, #185	; 0xb9
   350a2:	1ad2      	subs	r2, r2, r3
   350a4:	4094      	lsls	r4, r2
   350a6:	1e62      	subs	r2, r4, #1
   350a8:	4194      	sbcs	r4, r2
   350aa:	430c      	orrs	r4, r1
   350ac:	e7da      	b.n	35064 <__aeabi_i2f+0x3c>
   350ae:	4b05      	ldr	r3, [pc, #20]	; (350c4 <__aeabi_i2f+0x9c>)
   350b0:	002a      	movs	r2, r5
   350b2:	401c      	ands	r4, r3
   350b4:	239f      	movs	r3, #159	; 0x9f
   350b6:	01a4      	lsls	r4, r4, #6
   350b8:	1a1b      	subs	r3, r3, r0
   350ba:	0a64      	lsrs	r4, r4, #9
   350bc:	b2db      	uxtb	r3, r3
   350be:	e7c8      	b.n	35052 <__aeabi_i2f+0x2a>
   350c0:	0022      	movs	r2, r4
   350c2:	e7d5      	b.n	35070 <__aeabi_i2f+0x48>
   350c4:	fbffffff 	.word	0xfbffffff

000350c8 <__aeabi_ui2f>:
   350c8:	b510      	push	{r4, lr}
   350ca:	1e04      	subs	r4, r0, #0
   350cc:	d027      	beq.n	3511e <__aeabi_ui2f+0x56>
   350ce:	f001 fc87 	bl	369e0 <__clzsi2>
   350d2:	239e      	movs	r3, #158	; 0x9e
   350d4:	1a1b      	subs	r3, r3, r0
   350d6:	2b96      	cmp	r3, #150	; 0x96
   350d8:	dc0a      	bgt.n	350f0 <__aeabi_ui2f+0x28>
   350da:	2296      	movs	r2, #150	; 0x96
   350dc:	1ad2      	subs	r2, r2, r3
   350de:	4094      	lsls	r4, r2
   350e0:	0264      	lsls	r4, r4, #9
   350e2:	0a64      	lsrs	r4, r4, #9
   350e4:	b2db      	uxtb	r3, r3
   350e6:	0264      	lsls	r4, r4, #9
   350e8:	05db      	lsls	r3, r3, #23
   350ea:	0a60      	lsrs	r0, r4, #9
   350ec:	4318      	orrs	r0, r3
   350ee:	bd10      	pop	{r4, pc}
   350f0:	2b99      	cmp	r3, #153	; 0x99
   350f2:	dc17      	bgt.n	35124 <__aeabi_ui2f+0x5c>
   350f4:	2299      	movs	r2, #153	; 0x99
   350f6:	1ad2      	subs	r2, r2, r3
   350f8:	2a00      	cmp	r2, #0
   350fa:	dd27      	ble.n	3514c <__aeabi_ui2f+0x84>
   350fc:	4094      	lsls	r4, r2
   350fe:	0022      	movs	r2, r4
   35100:	4c13      	ldr	r4, [pc, #76]	; (35150 <__aeabi_ui2f+0x88>)
   35102:	4014      	ands	r4, r2
   35104:	0751      	lsls	r1, r2, #29
   35106:	d004      	beq.n	35112 <__aeabi_ui2f+0x4a>
   35108:	210f      	movs	r1, #15
   3510a:	400a      	ands	r2, r1
   3510c:	2a04      	cmp	r2, #4
   3510e:	d000      	beq.n	35112 <__aeabi_ui2f+0x4a>
   35110:	3404      	adds	r4, #4
   35112:	0162      	lsls	r2, r4, #5
   35114:	d412      	bmi.n	3513c <__aeabi_ui2f+0x74>
   35116:	01a4      	lsls	r4, r4, #6
   35118:	0a64      	lsrs	r4, r4, #9
   3511a:	b2db      	uxtb	r3, r3
   3511c:	e7e3      	b.n	350e6 <__aeabi_ui2f+0x1e>
   3511e:	2300      	movs	r3, #0
   35120:	2400      	movs	r4, #0
   35122:	e7e0      	b.n	350e6 <__aeabi_ui2f+0x1e>
   35124:	22b9      	movs	r2, #185	; 0xb9
   35126:	0021      	movs	r1, r4
   35128:	1ad2      	subs	r2, r2, r3
   3512a:	4091      	lsls	r1, r2
   3512c:	000a      	movs	r2, r1
   3512e:	1e51      	subs	r1, r2, #1
   35130:	418a      	sbcs	r2, r1
   35132:	2105      	movs	r1, #5
   35134:	1a09      	subs	r1, r1, r0
   35136:	40cc      	lsrs	r4, r1
   35138:	4314      	orrs	r4, r2
   3513a:	e7db      	b.n	350f4 <__aeabi_ui2f+0x2c>
   3513c:	4b04      	ldr	r3, [pc, #16]	; (35150 <__aeabi_ui2f+0x88>)
   3513e:	401c      	ands	r4, r3
   35140:	239f      	movs	r3, #159	; 0x9f
   35142:	01a4      	lsls	r4, r4, #6
   35144:	1a1b      	subs	r3, r3, r0
   35146:	0a64      	lsrs	r4, r4, #9
   35148:	b2db      	uxtb	r3, r3
   3514a:	e7cc      	b.n	350e6 <__aeabi_ui2f+0x1e>
   3514c:	0022      	movs	r2, r4
   3514e:	e7d7      	b.n	35100 <__aeabi_ui2f+0x38>
   35150:	fbffffff 	.word	0xfbffffff

00035154 <__aeabi_dadd>:
   35154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35156:	4645      	mov	r5, r8
   35158:	46de      	mov	lr, fp
   3515a:	4657      	mov	r7, sl
   3515c:	464e      	mov	r6, r9
   3515e:	030c      	lsls	r4, r1, #12
   35160:	b5e0      	push	{r5, r6, r7, lr}
   35162:	004e      	lsls	r6, r1, #1
   35164:	0fc9      	lsrs	r1, r1, #31
   35166:	4688      	mov	r8, r1
   35168:	000d      	movs	r5, r1
   3516a:	0a61      	lsrs	r1, r4, #9
   3516c:	0f44      	lsrs	r4, r0, #29
   3516e:	430c      	orrs	r4, r1
   35170:	00c7      	lsls	r7, r0, #3
   35172:	0319      	lsls	r1, r3, #12
   35174:	0058      	lsls	r0, r3, #1
   35176:	0fdb      	lsrs	r3, r3, #31
   35178:	469b      	mov	fp, r3
   3517a:	0a4b      	lsrs	r3, r1, #9
   3517c:	0f51      	lsrs	r1, r2, #29
   3517e:	430b      	orrs	r3, r1
   35180:	0d76      	lsrs	r6, r6, #21
   35182:	0d40      	lsrs	r0, r0, #21
   35184:	0019      	movs	r1, r3
   35186:	00d2      	lsls	r2, r2, #3
   35188:	45d8      	cmp	r8, fp
   3518a:	d100      	bne.n	3518e <__aeabi_dadd+0x3a>
   3518c:	e0ae      	b.n	352ec <__aeabi_dadd+0x198>
   3518e:	1a35      	subs	r5, r6, r0
   35190:	2d00      	cmp	r5, #0
   35192:	dc00      	bgt.n	35196 <__aeabi_dadd+0x42>
   35194:	e0f6      	b.n	35384 <__aeabi_dadd+0x230>
   35196:	2800      	cmp	r0, #0
   35198:	d10f      	bne.n	351ba <__aeabi_dadd+0x66>
   3519a:	4313      	orrs	r3, r2
   3519c:	d100      	bne.n	351a0 <__aeabi_dadd+0x4c>
   3519e:	e0db      	b.n	35358 <__aeabi_dadd+0x204>
   351a0:	1e6b      	subs	r3, r5, #1
   351a2:	2b00      	cmp	r3, #0
   351a4:	d000      	beq.n	351a8 <__aeabi_dadd+0x54>
   351a6:	e137      	b.n	35418 <__aeabi_dadd+0x2c4>
   351a8:	1aba      	subs	r2, r7, r2
   351aa:	4297      	cmp	r7, r2
   351ac:	41bf      	sbcs	r7, r7
   351ae:	1a64      	subs	r4, r4, r1
   351b0:	427f      	negs	r7, r7
   351b2:	1be4      	subs	r4, r4, r7
   351b4:	2601      	movs	r6, #1
   351b6:	0017      	movs	r7, r2
   351b8:	e024      	b.n	35204 <__aeabi_dadd+0xb0>
   351ba:	4bc6      	ldr	r3, [pc, #792]	; (354d4 <__aeabi_dadd+0x380>)
   351bc:	429e      	cmp	r6, r3
   351be:	d04d      	beq.n	3525c <__aeabi_dadd+0x108>
   351c0:	2380      	movs	r3, #128	; 0x80
   351c2:	041b      	lsls	r3, r3, #16
   351c4:	4319      	orrs	r1, r3
   351c6:	2d38      	cmp	r5, #56	; 0x38
   351c8:	dd00      	ble.n	351cc <__aeabi_dadd+0x78>
   351ca:	e107      	b.n	353dc <__aeabi_dadd+0x288>
   351cc:	2d1f      	cmp	r5, #31
   351ce:	dd00      	ble.n	351d2 <__aeabi_dadd+0x7e>
   351d0:	e138      	b.n	35444 <__aeabi_dadd+0x2f0>
   351d2:	2020      	movs	r0, #32
   351d4:	1b43      	subs	r3, r0, r5
   351d6:	469a      	mov	sl, r3
   351d8:	000b      	movs	r3, r1
   351da:	4650      	mov	r0, sl
   351dc:	4083      	lsls	r3, r0
   351de:	4699      	mov	r9, r3
   351e0:	0013      	movs	r3, r2
   351e2:	4648      	mov	r0, r9
   351e4:	40eb      	lsrs	r3, r5
   351e6:	4318      	orrs	r0, r3
   351e8:	0003      	movs	r3, r0
   351ea:	4650      	mov	r0, sl
   351ec:	4082      	lsls	r2, r0
   351ee:	1e50      	subs	r0, r2, #1
   351f0:	4182      	sbcs	r2, r0
   351f2:	40e9      	lsrs	r1, r5
   351f4:	431a      	orrs	r2, r3
   351f6:	1aba      	subs	r2, r7, r2
   351f8:	1a61      	subs	r1, r4, r1
   351fa:	4297      	cmp	r7, r2
   351fc:	41a4      	sbcs	r4, r4
   351fe:	0017      	movs	r7, r2
   35200:	4264      	negs	r4, r4
   35202:	1b0c      	subs	r4, r1, r4
   35204:	0223      	lsls	r3, r4, #8
   35206:	d562      	bpl.n	352ce <__aeabi_dadd+0x17a>
   35208:	0264      	lsls	r4, r4, #9
   3520a:	0a65      	lsrs	r5, r4, #9
   3520c:	2d00      	cmp	r5, #0
   3520e:	d100      	bne.n	35212 <__aeabi_dadd+0xbe>
   35210:	e0df      	b.n	353d2 <__aeabi_dadd+0x27e>
   35212:	0028      	movs	r0, r5
   35214:	f001 fbe4 	bl	369e0 <__clzsi2>
   35218:	0003      	movs	r3, r0
   3521a:	3b08      	subs	r3, #8
   3521c:	2b1f      	cmp	r3, #31
   3521e:	dd00      	ble.n	35222 <__aeabi_dadd+0xce>
   35220:	e0d2      	b.n	353c8 <__aeabi_dadd+0x274>
   35222:	2220      	movs	r2, #32
   35224:	003c      	movs	r4, r7
   35226:	1ad2      	subs	r2, r2, r3
   35228:	409d      	lsls	r5, r3
   3522a:	40d4      	lsrs	r4, r2
   3522c:	409f      	lsls	r7, r3
   3522e:	4325      	orrs	r5, r4
   35230:	429e      	cmp	r6, r3
   35232:	dd00      	ble.n	35236 <__aeabi_dadd+0xe2>
   35234:	e0c4      	b.n	353c0 <__aeabi_dadd+0x26c>
   35236:	1b9e      	subs	r6, r3, r6
   35238:	1c73      	adds	r3, r6, #1
   3523a:	2b1f      	cmp	r3, #31
   3523c:	dd00      	ble.n	35240 <__aeabi_dadd+0xec>
   3523e:	e0f1      	b.n	35424 <__aeabi_dadd+0x2d0>
   35240:	2220      	movs	r2, #32
   35242:	0038      	movs	r0, r7
   35244:	0029      	movs	r1, r5
   35246:	1ad2      	subs	r2, r2, r3
   35248:	40d8      	lsrs	r0, r3
   3524a:	4091      	lsls	r1, r2
   3524c:	4097      	lsls	r7, r2
   3524e:	002c      	movs	r4, r5
   35250:	4301      	orrs	r1, r0
   35252:	1e78      	subs	r0, r7, #1
   35254:	4187      	sbcs	r7, r0
   35256:	40dc      	lsrs	r4, r3
   35258:	2600      	movs	r6, #0
   3525a:	430f      	orrs	r7, r1
   3525c:	077b      	lsls	r3, r7, #29
   3525e:	d009      	beq.n	35274 <__aeabi_dadd+0x120>
   35260:	230f      	movs	r3, #15
   35262:	403b      	ands	r3, r7
   35264:	2b04      	cmp	r3, #4
   35266:	d005      	beq.n	35274 <__aeabi_dadd+0x120>
   35268:	1d3b      	adds	r3, r7, #4
   3526a:	42bb      	cmp	r3, r7
   3526c:	41bf      	sbcs	r7, r7
   3526e:	427f      	negs	r7, r7
   35270:	19e4      	adds	r4, r4, r7
   35272:	001f      	movs	r7, r3
   35274:	0223      	lsls	r3, r4, #8
   35276:	d52c      	bpl.n	352d2 <__aeabi_dadd+0x17e>
   35278:	4b96      	ldr	r3, [pc, #600]	; (354d4 <__aeabi_dadd+0x380>)
   3527a:	3601      	adds	r6, #1
   3527c:	429e      	cmp	r6, r3
   3527e:	d100      	bne.n	35282 <__aeabi_dadd+0x12e>
   35280:	e09a      	b.n	353b8 <__aeabi_dadd+0x264>
   35282:	4645      	mov	r5, r8
   35284:	4b94      	ldr	r3, [pc, #592]	; (354d8 <__aeabi_dadd+0x384>)
   35286:	08ff      	lsrs	r7, r7, #3
   35288:	401c      	ands	r4, r3
   3528a:	0760      	lsls	r0, r4, #29
   3528c:	0576      	lsls	r6, r6, #21
   3528e:	0264      	lsls	r4, r4, #9
   35290:	4307      	orrs	r7, r0
   35292:	0b24      	lsrs	r4, r4, #12
   35294:	0d76      	lsrs	r6, r6, #21
   35296:	2100      	movs	r1, #0
   35298:	0324      	lsls	r4, r4, #12
   3529a:	0b23      	lsrs	r3, r4, #12
   3529c:	0d0c      	lsrs	r4, r1, #20
   3529e:	4a8f      	ldr	r2, [pc, #572]	; (354dc <__aeabi_dadd+0x388>)
   352a0:	0524      	lsls	r4, r4, #20
   352a2:	431c      	orrs	r4, r3
   352a4:	4014      	ands	r4, r2
   352a6:	0533      	lsls	r3, r6, #20
   352a8:	4323      	orrs	r3, r4
   352aa:	005b      	lsls	r3, r3, #1
   352ac:	07ed      	lsls	r5, r5, #31
   352ae:	085b      	lsrs	r3, r3, #1
   352b0:	432b      	orrs	r3, r5
   352b2:	0038      	movs	r0, r7
   352b4:	0019      	movs	r1, r3
   352b6:	bc3c      	pop	{r2, r3, r4, r5}
   352b8:	4690      	mov	r8, r2
   352ba:	4699      	mov	r9, r3
   352bc:	46a2      	mov	sl, r4
   352be:	46ab      	mov	fp, r5
   352c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   352c2:	4664      	mov	r4, ip
   352c4:	4304      	orrs	r4, r0
   352c6:	d100      	bne.n	352ca <__aeabi_dadd+0x176>
   352c8:	e211      	b.n	356ee <__aeabi_dadd+0x59a>
   352ca:	0004      	movs	r4, r0
   352cc:	4667      	mov	r7, ip
   352ce:	077b      	lsls	r3, r7, #29
   352d0:	d1c6      	bne.n	35260 <__aeabi_dadd+0x10c>
   352d2:	4645      	mov	r5, r8
   352d4:	0760      	lsls	r0, r4, #29
   352d6:	08ff      	lsrs	r7, r7, #3
   352d8:	4307      	orrs	r7, r0
   352da:	08e4      	lsrs	r4, r4, #3
   352dc:	4b7d      	ldr	r3, [pc, #500]	; (354d4 <__aeabi_dadd+0x380>)
   352de:	429e      	cmp	r6, r3
   352e0:	d030      	beq.n	35344 <__aeabi_dadd+0x1f0>
   352e2:	0324      	lsls	r4, r4, #12
   352e4:	0576      	lsls	r6, r6, #21
   352e6:	0b24      	lsrs	r4, r4, #12
   352e8:	0d76      	lsrs	r6, r6, #21
   352ea:	e7d4      	b.n	35296 <__aeabi_dadd+0x142>
   352ec:	1a33      	subs	r3, r6, r0
   352ee:	469a      	mov	sl, r3
   352f0:	2b00      	cmp	r3, #0
   352f2:	dd78      	ble.n	353e6 <__aeabi_dadd+0x292>
   352f4:	2800      	cmp	r0, #0
   352f6:	d031      	beq.n	3535c <__aeabi_dadd+0x208>
   352f8:	4876      	ldr	r0, [pc, #472]	; (354d4 <__aeabi_dadd+0x380>)
   352fa:	4286      	cmp	r6, r0
   352fc:	d0ae      	beq.n	3525c <__aeabi_dadd+0x108>
   352fe:	2080      	movs	r0, #128	; 0x80
   35300:	0400      	lsls	r0, r0, #16
   35302:	4301      	orrs	r1, r0
   35304:	4653      	mov	r3, sl
   35306:	2b38      	cmp	r3, #56	; 0x38
   35308:	dc00      	bgt.n	3530c <__aeabi_dadd+0x1b8>
   3530a:	e0e9      	b.n	354e0 <__aeabi_dadd+0x38c>
   3530c:	430a      	orrs	r2, r1
   3530e:	1e51      	subs	r1, r2, #1
   35310:	418a      	sbcs	r2, r1
   35312:	2100      	movs	r1, #0
   35314:	19d2      	adds	r2, r2, r7
   35316:	42ba      	cmp	r2, r7
   35318:	41bf      	sbcs	r7, r7
   3531a:	1909      	adds	r1, r1, r4
   3531c:	427c      	negs	r4, r7
   3531e:	0017      	movs	r7, r2
   35320:	190c      	adds	r4, r1, r4
   35322:	0223      	lsls	r3, r4, #8
   35324:	d5d3      	bpl.n	352ce <__aeabi_dadd+0x17a>
   35326:	4b6b      	ldr	r3, [pc, #428]	; (354d4 <__aeabi_dadd+0x380>)
   35328:	3601      	adds	r6, #1
   3532a:	429e      	cmp	r6, r3
   3532c:	d100      	bne.n	35330 <__aeabi_dadd+0x1dc>
   3532e:	e13a      	b.n	355a6 <__aeabi_dadd+0x452>
   35330:	2001      	movs	r0, #1
   35332:	4b69      	ldr	r3, [pc, #420]	; (354d8 <__aeabi_dadd+0x384>)
   35334:	401c      	ands	r4, r3
   35336:	087b      	lsrs	r3, r7, #1
   35338:	4007      	ands	r7, r0
   3533a:	431f      	orrs	r7, r3
   3533c:	07e0      	lsls	r0, r4, #31
   3533e:	4307      	orrs	r7, r0
   35340:	0864      	lsrs	r4, r4, #1
   35342:	e78b      	b.n	3525c <__aeabi_dadd+0x108>
   35344:	0023      	movs	r3, r4
   35346:	433b      	orrs	r3, r7
   35348:	d100      	bne.n	3534c <__aeabi_dadd+0x1f8>
   3534a:	e1cb      	b.n	356e4 <__aeabi_dadd+0x590>
   3534c:	2280      	movs	r2, #128	; 0x80
   3534e:	0312      	lsls	r2, r2, #12
   35350:	4314      	orrs	r4, r2
   35352:	0324      	lsls	r4, r4, #12
   35354:	0b24      	lsrs	r4, r4, #12
   35356:	e79e      	b.n	35296 <__aeabi_dadd+0x142>
   35358:	002e      	movs	r6, r5
   3535a:	e77f      	b.n	3525c <__aeabi_dadd+0x108>
   3535c:	0008      	movs	r0, r1
   3535e:	4310      	orrs	r0, r2
   35360:	d100      	bne.n	35364 <__aeabi_dadd+0x210>
   35362:	e0b4      	b.n	354ce <__aeabi_dadd+0x37a>
   35364:	1e58      	subs	r0, r3, #1
   35366:	2800      	cmp	r0, #0
   35368:	d000      	beq.n	3536c <__aeabi_dadd+0x218>
   3536a:	e0de      	b.n	3552a <__aeabi_dadd+0x3d6>
   3536c:	18ba      	adds	r2, r7, r2
   3536e:	42ba      	cmp	r2, r7
   35370:	419b      	sbcs	r3, r3
   35372:	1864      	adds	r4, r4, r1
   35374:	425b      	negs	r3, r3
   35376:	18e4      	adds	r4, r4, r3
   35378:	0017      	movs	r7, r2
   3537a:	2601      	movs	r6, #1
   3537c:	0223      	lsls	r3, r4, #8
   3537e:	d5a6      	bpl.n	352ce <__aeabi_dadd+0x17a>
   35380:	2602      	movs	r6, #2
   35382:	e7d5      	b.n	35330 <__aeabi_dadd+0x1dc>
   35384:	2d00      	cmp	r5, #0
   35386:	d16e      	bne.n	35466 <__aeabi_dadd+0x312>
   35388:	1c70      	adds	r0, r6, #1
   3538a:	0540      	lsls	r0, r0, #21
   3538c:	0d40      	lsrs	r0, r0, #21
   3538e:	2801      	cmp	r0, #1
   35390:	dc00      	bgt.n	35394 <__aeabi_dadd+0x240>
   35392:	e0f9      	b.n	35588 <__aeabi_dadd+0x434>
   35394:	1ab8      	subs	r0, r7, r2
   35396:	4684      	mov	ip, r0
   35398:	4287      	cmp	r7, r0
   3539a:	4180      	sbcs	r0, r0
   3539c:	1ae5      	subs	r5, r4, r3
   3539e:	4240      	negs	r0, r0
   353a0:	1a2d      	subs	r5, r5, r0
   353a2:	0228      	lsls	r0, r5, #8
   353a4:	d400      	bmi.n	353a8 <__aeabi_dadd+0x254>
   353a6:	e089      	b.n	354bc <__aeabi_dadd+0x368>
   353a8:	1bd7      	subs	r7, r2, r7
   353aa:	42ba      	cmp	r2, r7
   353ac:	4192      	sbcs	r2, r2
   353ae:	1b1c      	subs	r4, r3, r4
   353b0:	4252      	negs	r2, r2
   353b2:	1aa5      	subs	r5, r4, r2
   353b4:	46d8      	mov	r8, fp
   353b6:	e729      	b.n	3520c <__aeabi_dadd+0xb8>
   353b8:	4645      	mov	r5, r8
   353ba:	2400      	movs	r4, #0
   353bc:	2700      	movs	r7, #0
   353be:	e76a      	b.n	35296 <__aeabi_dadd+0x142>
   353c0:	4c45      	ldr	r4, [pc, #276]	; (354d8 <__aeabi_dadd+0x384>)
   353c2:	1af6      	subs	r6, r6, r3
   353c4:	402c      	ands	r4, r5
   353c6:	e749      	b.n	3525c <__aeabi_dadd+0x108>
   353c8:	003d      	movs	r5, r7
   353ca:	3828      	subs	r0, #40	; 0x28
   353cc:	4085      	lsls	r5, r0
   353ce:	2700      	movs	r7, #0
   353d0:	e72e      	b.n	35230 <__aeabi_dadd+0xdc>
   353d2:	0038      	movs	r0, r7
   353d4:	f001 fb04 	bl	369e0 <__clzsi2>
   353d8:	3020      	adds	r0, #32
   353da:	e71d      	b.n	35218 <__aeabi_dadd+0xc4>
   353dc:	430a      	orrs	r2, r1
   353de:	1e51      	subs	r1, r2, #1
   353e0:	418a      	sbcs	r2, r1
   353e2:	2100      	movs	r1, #0
   353e4:	e707      	b.n	351f6 <__aeabi_dadd+0xa2>
   353e6:	2b00      	cmp	r3, #0
   353e8:	d000      	beq.n	353ec <__aeabi_dadd+0x298>
   353ea:	e0f3      	b.n	355d4 <__aeabi_dadd+0x480>
   353ec:	1c70      	adds	r0, r6, #1
   353ee:	0543      	lsls	r3, r0, #21
   353f0:	0d5b      	lsrs	r3, r3, #21
   353f2:	2b01      	cmp	r3, #1
   353f4:	dc00      	bgt.n	353f8 <__aeabi_dadd+0x2a4>
   353f6:	e0ad      	b.n	35554 <__aeabi_dadd+0x400>
   353f8:	4b36      	ldr	r3, [pc, #216]	; (354d4 <__aeabi_dadd+0x380>)
   353fa:	4298      	cmp	r0, r3
   353fc:	d100      	bne.n	35400 <__aeabi_dadd+0x2ac>
   353fe:	e0d1      	b.n	355a4 <__aeabi_dadd+0x450>
   35400:	18ba      	adds	r2, r7, r2
   35402:	42ba      	cmp	r2, r7
   35404:	41bf      	sbcs	r7, r7
   35406:	1864      	adds	r4, r4, r1
   35408:	427f      	negs	r7, r7
   3540a:	19e4      	adds	r4, r4, r7
   3540c:	07e7      	lsls	r7, r4, #31
   3540e:	0852      	lsrs	r2, r2, #1
   35410:	4317      	orrs	r7, r2
   35412:	0864      	lsrs	r4, r4, #1
   35414:	0006      	movs	r6, r0
   35416:	e721      	b.n	3525c <__aeabi_dadd+0x108>
   35418:	482e      	ldr	r0, [pc, #184]	; (354d4 <__aeabi_dadd+0x380>)
   3541a:	4285      	cmp	r5, r0
   3541c:	d100      	bne.n	35420 <__aeabi_dadd+0x2cc>
   3541e:	e093      	b.n	35548 <__aeabi_dadd+0x3f4>
   35420:	001d      	movs	r5, r3
   35422:	e6d0      	b.n	351c6 <__aeabi_dadd+0x72>
   35424:	0029      	movs	r1, r5
   35426:	3e1f      	subs	r6, #31
   35428:	40f1      	lsrs	r1, r6
   3542a:	2b20      	cmp	r3, #32
   3542c:	d100      	bne.n	35430 <__aeabi_dadd+0x2dc>
   3542e:	e08d      	b.n	3554c <__aeabi_dadd+0x3f8>
   35430:	2240      	movs	r2, #64	; 0x40
   35432:	1ad3      	subs	r3, r2, r3
   35434:	409d      	lsls	r5, r3
   35436:	432f      	orrs	r7, r5
   35438:	1e7d      	subs	r5, r7, #1
   3543a:	41af      	sbcs	r7, r5
   3543c:	2400      	movs	r4, #0
   3543e:	430f      	orrs	r7, r1
   35440:	2600      	movs	r6, #0
   35442:	e744      	b.n	352ce <__aeabi_dadd+0x17a>
   35444:	002b      	movs	r3, r5
   35446:	0008      	movs	r0, r1
   35448:	3b20      	subs	r3, #32
   3544a:	40d8      	lsrs	r0, r3
   3544c:	0003      	movs	r3, r0
   3544e:	2d20      	cmp	r5, #32
   35450:	d100      	bne.n	35454 <__aeabi_dadd+0x300>
   35452:	e07d      	b.n	35550 <__aeabi_dadd+0x3fc>
   35454:	2040      	movs	r0, #64	; 0x40
   35456:	1b45      	subs	r5, r0, r5
   35458:	40a9      	lsls	r1, r5
   3545a:	430a      	orrs	r2, r1
   3545c:	1e51      	subs	r1, r2, #1
   3545e:	418a      	sbcs	r2, r1
   35460:	2100      	movs	r1, #0
   35462:	431a      	orrs	r2, r3
   35464:	e6c7      	b.n	351f6 <__aeabi_dadd+0xa2>
   35466:	2e00      	cmp	r6, #0
   35468:	d050      	beq.n	3550c <__aeabi_dadd+0x3b8>
   3546a:	4e1a      	ldr	r6, [pc, #104]	; (354d4 <__aeabi_dadd+0x380>)
   3546c:	42b0      	cmp	r0, r6
   3546e:	d057      	beq.n	35520 <__aeabi_dadd+0x3cc>
   35470:	2680      	movs	r6, #128	; 0x80
   35472:	426b      	negs	r3, r5
   35474:	4699      	mov	r9, r3
   35476:	0436      	lsls	r6, r6, #16
   35478:	4334      	orrs	r4, r6
   3547a:	464b      	mov	r3, r9
   3547c:	2b38      	cmp	r3, #56	; 0x38
   3547e:	dd00      	ble.n	35482 <__aeabi_dadd+0x32e>
   35480:	e0d6      	b.n	35630 <__aeabi_dadd+0x4dc>
   35482:	2b1f      	cmp	r3, #31
   35484:	dd00      	ble.n	35488 <__aeabi_dadd+0x334>
   35486:	e135      	b.n	356f4 <__aeabi_dadd+0x5a0>
   35488:	2620      	movs	r6, #32
   3548a:	1af5      	subs	r5, r6, r3
   3548c:	0026      	movs	r6, r4
   3548e:	40ae      	lsls	r6, r5
   35490:	46b2      	mov	sl, r6
   35492:	003e      	movs	r6, r7
   35494:	40de      	lsrs	r6, r3
   35496:	46ac      	mov	ip, r5
   35498:	0035      	movs	r5, r6
   3549a:	4656      	mov	r6, sl
   3549c:	432e      	orrs	r6, r5
   3549e:	4665      	mov	r5, ip
   354a0:	40af      	lsls	r7, r5
   354a2:	1e7d      	subs	r5, r7, #1
   354a4:	41af      	sbcs	r7, r5
   354a6:	40dc      	lsrs	r4, r3
   354a8:	4337      	orrs	r7, r6
   354aa:	1bd7      	subs	r7, r2, r7
   354ac:	42ba      	cmp	r2, r7
   354ae:	4192      	sbcs	r2, r2
   354b0:	1b0c      	subs	r4, r1, r4
   354b2:	4252      	negs	r2, r2
   354b4:	1aa4      	subs	r4, r4, r2
   354b6:	0006      	movs	r6, r0
   354b8:	46d8      	mov	r8, fp
   354ba:	e6a3      	b.n	35204 <__aeabi_dadd+0xb0>
   354bc:	4664      	mov	r4, ip
   354be:	4667      	mov	r7, ip
   354c0:	432c      	orrs	r4, r5
   354c2:	d000      	beq.n	354c6 <__aeabi_dadd+0x372>
   354c4:	e6a2      	b.n	3520c <__aeabi_dadd+0xb8>
   354c6:	2500      	movs	r5, #0
   354c8:	2600      	movs	r6, #0
   354ca:	2700      	movs	r7, #0
   354cc:	e706      	b.n	352dc <__aeabi_dadd+0x188>
   354ce:	001e      	movs	r6, r3
   354d0:	e6c4      	b.n	3525c <__aeabi_dadd+0x108>
   354d2:	46c0      	nop			; (mov r8, r8)
   354d4:	000007ff 	.word	0x000007ff
   354d8:	ff7fffff 	.word	0xff7fffff
   354dc:	800fffff 	.word	0x800fffff
   354e0:	2b1f      	cmp	r3, #31
   354e2:	dc63      	bgt.n	355ac <__aeabi_dadd+0x458>
   354e4:	2020      	movs	r0, #32
   354e6:	1ac3      	subs	r3, r0, r3
   354e8:	0008      	movs	r0, r1
   354ea:	4098      	lsls	r0, r3
   354ec:	469c      	mov	ip, r3
   354ee:	4683      	mov	fp, r0
   354f0:	4653      	mov	r3, sl
   354f2:	0010      	movs	r0, r2
   354f4:	40d8      	lsrs	r0, r3
   354f6:	0003      	movs	r3, r0
   354f8:	4658      	mov	r0, fp
   354fa:	4318      	orrs	r0, r3
   354fc:	4663      	mov	r3, ip
   354fe:	409a      	lsls	r2, r3
   35500:	1e53      	subs	r3, r2, #1
   35502:	419a      	sbcs	r2, r3
   35504:	4653      	mov	r3, sl
   35506:	4302      	orrs	r2, r0
   35508:	40d9      	lsrs	r1, r3
   3550a:	e703      	b.n	35314 <__aeabi_dadd+0x1c0>
   3550c:	0026      	movs	r6, r4
   3550e:	433e      	orrs	r6, r7
   35510:	d006      	beq.n	35520 <__aeabi_dadd+0x3cc>
   35512:	43eb      	mvns	r3, r5
   35514:	4699      	mov	r9, r3
   35516:	2b00      	cmp	r3, #0
   35518:	d0c7      	beq.n	354aa <__aeabi_dadd+0x356>
   3551a:	4e94      	ldr	r6, [pc, #592]	; (3576c <__aeabi_dadd+0x618>)
   3551c:	42b0      	cmp	r0, r6
   3551e:	d1ac      	bne.n	3547a <__aeabi_dadd+0x326>
   35520:	000c      	movs	r4, r1
   35522:	0017      	movs	r7, r2
   35524:	0006      	movs	r6, r0
   35526:	46d8      	mov	r8, fp
   35528:	e698      	b.n	3525c <__aeabi_dadd+0x108>
   3552a:	4b90      	ldr	r3, [pc, #576]	; (3576c <__aeabi_dadd+0x618>)
   3552c:	459a      	cmp	sl, r3
   3552e:	d00b      	beq.n	35548 <__aeabi_dadd+0x3f4>
   35530:	4682      	mov	sl, r0
   35532:	e6e7      	b.n	35304 <__aeabi_dadd+0x1b0>
   35534:	2800      	cmp	r0, #0
   35536:	d000      	beq.n	3553a <__aeabi_dadd+0x3e6>
   35538:	e09e      	b.n	35678 <__aeabi_dadd+0x524>
   3553a:	0018      	movs	r0, r3
   3553c:	4310      	orrs	r0, r2
   3553e:	d100      	bne.n	35542 <__aeabi_dadd+0x3ee>
   35540:	e0e9      	b.n	35716 <__aeabi_dadd+0x5c2>
   35542:	001c      	movs	r4, r3
   35544:	0017      	movs	r7, r2
   35546:	46d8      	mov	r8, fp
   35548:	4e88      	ldr	r6, [pc, #544]	; (3576c <__aeabi_dadd+0x618>)
   3554a:	e687      	b.n	3525c <__aeabi_dadd+0x108>
   3554c:	2500      	movs	r5, #0
   3554e:	e772      	b.n	35436 <__aeabi_dadd+0x2e2>
   35550:	2100      	movs	r1, #0
   35552:	e782      	b.n	3545a <__aeabi_dadd+0x306>
   35554:	0023      	movs	r3, r4
   35556:	433b      	orrs	r3, r7
   35558:	2e00      	cmp	r6, #0
   3555a:	d000      	beq.n	3555e <__aeabi_dadd+0x40a>
   3555c:	e0ab      	b.n	356b6 <__aeabi_dadd+0x562>
   3555e:	2b00      	cmp	r3, #0
   35560:	d100      	bne.n	35564 <__aeabi_dadd+0x410>
   35562:	e0e7      	b.n	35734 <__aeabi_dadd+0x5e0>
   35564:	000b      	movs	r3, r1
   35566:	4313      	orrs	r3, r2
   35568:	d100      	bne.n	3556c <__aeabi_dadd+0x418>
   3556a:	e677      	b.n	3525c <__aeabi_dadd+0x108>
   3556c:	18ba      	adds	r2, r7, r2
   3556e:	42ba      	cmp	r2, r7
   35570:	41bf      	sbcs	r7, r7
   35572:	1864      	adds	r4, r4, r1
   35574:	427f      	negs	r7, r7
   35576:	19e4      	adds	r4, r4, r7
   35578:	0223      	lsls	r3, r4, #8
   3557a:	d400      	bmi.n	3557e <__aeabi_dadd+0x42a>
   3557c:	e0f2      	b.n	35764 <__aeabi_dadd+0x610>
   3557e:	4b7c      	ldr	r3, [pc, #496]	; (35770 <__aeabi_dadd+0x61c>)
   35580:	0017      	movs	r7, r2
   35582:	401c      	ands	r4, r3
   35584:	0006      	movs	r6, r0
   35586:	e669      	b.n	3525c <__aeabi_dadd+0x108>
   35588:	0020      	movs	r0, r4
   3558a:	4338      	orrs	r0, r7
   3558c:	2e00      	cmp	r6, #0
   3558e:	d1d1      	bne.n	35534 <__aeabi_dadd+0x3e0>
   35590:	2800      	cmp	r0, #0
   35592:	d15b      	bne.n	3564c <__aeabi_dadd+0x4f8>
   35594:	001c      	movs	r4, r3
   35596:	4314      	orrs	r4, r2
   35598:	d100      	bne.n	3559c <__aeabi_dadd+0x448>
   3559a:	e0a8      	b.n	356ee <__aeabi_dadd+0x59a>
   3559c:	001c      	movs	r4, r3
   3559e:	0017      	movs	r7, r2
   355a0:	46d8      	mov	r8, fp
   355a2:	e65b      	b.n	3525c <__aeabi_dadd+0x108>
   355a4:	0006      	movs	r6, r0
   355a6:	2400      	movs	r4, #0
   355a8:	2700      	movs	r7, #0
   355aa:	e697      	b.n	352dc <__aeabi_dadd+0x188>
   355ac:	4650      	mov	r0, sl
   355ae:	000b      	movs	r3, r1
   355b0:	3820      	subs	r0, #32
   355b2:	40c3      	lsrs	r3, r0
   355b4:	4699      	mov	r9, r3
   355b6:	4653      	mov	r3, sl
   355b8:	2b20      	cmp	r3, #32
   355ba:	d100      	bne.n	355be <__aeabi_dadd+0x46a>
   355bc:	e095      	b.n	356ea <__aeabi_dadd+0x596>
   355be:	2340      	movs	r3, #64	; 0x40
   355c0:	4650      	mov	r0, sl
   355c2:	1a1b      	subs	r3, r3, r0
   355c4:	4099      	lsls	r1, r3
   355c6:	430a      	orrs	r2, r1
   355c8:	1e51      	subs	r1, r2, #1
   355ca:	418a      	sbcs	r2, r1
   355cc:	464b      	mov	r3, r9
   355ce:	2100      	movs	r1, #0
   355d0:	431a      	orrs	r2, r3
   355d2:	e69f      	b.n	35314 <__aeabi_dadd+0x1c0>
   355d4:	2e00      	cmp	r6, #0
   355d6:	d130      	bne.n	3563a <__aeabi_dadd+0x4e6>
   355d8:	0026      	movs	r6, r4
   355da:	433e      	orrs	r6, r7
   355dc:	d067      	beq.n	356ae <__aeabi_dadd+0x55a>
   355de:	43db      	mvns	r3, r3
   355e0:	469a      	mov	sl, r3
   355e2:	2b00      	cmp	r3, #0
   355e4:	d01c      	beq.n	35620 <__aeabi_dadd+0x4cc>
   355e6:	4e61      	ldr	r6, [pc, #388]	; (3576c <__aeabi_dadd+0x618>)
   355e8:	42b0      	cmp	r0, r6
   355ea:	d060      	beq.n	356ae <__aeabi_dadd+0x55a>
   355ec:	4653      	mov	r3, sl
   355ee:	2b38      	cmp	r3, #56	; 0x38
   355f0:	dd00      	ble.n	355f4 <__aeabi_dadd+0x4a0>
   355f2:	e096      	b.n	35722 <__aeabi_dadd+0x5ce>
   355f4:	2b1f      	cmp	r3, #31
   355f6:	dd00      	ble.n	355fa <__aeabi_dadd+0x4a6>
   355f8:	e09f      	b.n	3573a <__aeabi_dadd+0x5e6>
   355fa:	2620      	movs	r6, #32
   355fc:	1af3      	subs	r3, r6, r3
   355fe:	0026      	movs	r6, r4
   35600:	409e      	lsls	r6, r3
   35602:	469c      	mov	ip, r3
   35604:	46b3      	mov	fp, r6
   35606:	4653      	mov	r3, sl
   35608:	003e      	movs	r6, r7
   3560a:	40de      	lsrs	r6, r3
   3560c:	0033      	movs	r3, r6
   3560e:	465e      	mov	r6, fp
   35610:	431e      	orrs	r6, r3
   35612:	4663      	mov	r3, ip
   35614:	409f      	lsls	r7, r3
   35616:	1e7b      	subs	r3, r7, #1
   35618:	419f      	sbcs	r7, r3
   3561a:	4653      	mov	r3, sl
   3561c:	40dc      	lsrs	r4, r3
   3561e:	4337      	orrs	r7, r6
   35620:	18bf      	adds	r7, r7, r2
   35622:	4297      	cmp	r7, r2
   35624:	4192      	sbcs	r2, r2
   35626:	1864      	adds	r4, r4, r1
   35628:	4252      	negs	r2, r2
   3562a:	18a4      	adds	r4, r4, r2
   3562c:	0006      	movs	r6, r0
   3562e:	e678      	b.n	35322 <__aeabi_dadd+0x1ce>
   35630:	4327      	orrs	r7, r4
   35632:	1e7c      	subs	r4, r7, #1
   35634:	41a7      	sbcs	r7, r4
   35636:	2400      	movs	r4, #0
   35638:	e737      	b.n	354aa <__aeabi_dadd+0x356>
   3563a:	4e4c      	ldr	r6, [pc, #304]	; (3576c <__aeabi_dadd+0x618>)
   3563c:	42b0      	cmp	r0, r6
   3563e:	d036      	beq.n	356ae <__aeabi_dadd+0x55a>
   35640:	2680      	movs	r6, #128	; 0x80
   35642:	425b      	negs	r3, r3
   35644:	0436      	lsls	r6, r6, #16
   35646:	469a      	mov	sl, r3
   35648:	4334      	orrs	r4, r6
   3564a:	e7cf      	b.n	355ec <__aeabi_dadd+0x498>
   3564c:	0018      	movs	r0, r3
   3564e:	4310      	orrs	r0, r2
   35650:	d100      	bne.n	35654 <__aeabi_dadd+0x500>
   35652:	e603      	b.n	3525c <__aeabi_dadd+0x108>
   35654:	1ab8      	subs	r0, r7, r2
   35656:	4684      	mov	ip, r0
   35658:	4567      	cmp	r7, ip
   3565a:	41ad      	sbcs	r5, r5
   3565c:	1ae0      	subs	r0, r4, r3
   3565e:	426d      	negs	r5, r5
   35660:	1b40      	subs	r0, r0, r5
   35662:	0205      	lsls	r5, r0, #8
   35664:	d400      	bmi.n	35668 <__aeabi_dadd+0x514>
   35666:	e62c      	b.n	352c2 <__aeabi_dadd+0x16e>
   35668:	1bd7      	subs	r7, r2, r7
   3566a:	42ba      	cmp	r2, r7
   3566c:	4192      	sbcs	r2, r2
   3566e:	1b1c      	subs	r4, r3, r4
   35670:	4252      	negs	r2, r2
   35672:	1aa4      	subs	r4, r4, r2
   35674:	46d8      	mov	r8, fp
   35676:	e5f1      	b.n	3525c <__aeabi_dadd+0x108>
   35678:	0018      	movs	r0, r3
   3567a:	4310      	orrs	r0, r2
   3567c:	d100      	bne.n	35680 <__aeabi_dadd+0x52c>
   3567e:	e763      	b.n	35548 <__aeabi_dadd+0x3f4>
   35680:	08f8      	lsrs	r0, r7, #3
   35682:	0767      	lsls	r7, r4, #29
   35684:	4307      	orrs	r7, r0
   35686:	2080      	movs	r0, #128	; 0x80
   35688:	08e4      	lsrs	r4, r4, #3
   3568a:	0300      	lsls	r0, r0, #12
   3568c:	4204      	tst	r4, r0
   3568e:	d008      	beq.n	356a2 <__aeabi_dadd+0x54e>
   35690:	08dd      	lsrs	r5, r3, #3
   35692:	4205      	tst	r5, r0
   35694:	d105      	bne.n	356a2 <__aeabi_dadd+0x54e>
   35696:	08d2      	lsrs	r2, r2, #3
   35698:	0759      	lsls	r1, r3, #29
   3569a:	4311      	orrs	r1, r2
   3569c:	000f      	movs	r7, r1
   3569e:	002c      	movs	r4, r5
   356a0:	46d8      	mov	r8, fp
   356a2:	0f7b      	lsrs	r3, r7, #29
   356a4:	00e4      	lsls	r4, r4, #3
   356a6:	431c      	orrs	r4, r3
   356a8:	00ff      	lsls	r7, r7, #3
   356aa:	4e30      	ldr	r6, [pc, #192]	; (3576c <__aeabi_dadd+0x618>)
   356ac:	e5d6      	b.n	3525c <__aeabi_dadd+0x108>
   356ae:	000c      	movs	r4, r1
   356b0:	0017      	movs	r7, r2
   356b2:	0006      	movs	r6, r0
   356b4:	e5d2      	b.n	3525c <__aeabi_dadd+0x108>
   356b6:	2b00      	cmp	r3, #0
   356b8:	d038      	beq.n	3572c <__aeabi_dadd+0x5d8>
   356ba:	000b      	movs	r3, r1
   356bc:	4313      	orrs	r3, r2
   356be:	d100      	bne.n	356c2 <__aeabi_dadd+0x56e>
   356c0:	e742      	b.n	35548 <__aeabi_dadd+0x3f4>
   356c2:	08f8      	lsrs	r0, r7, #3
   356c4:	0767      	lsls	r7, r4, #29
   356c6:	4307      	orrs	r7, r0
   356c8:	2080      	movs	r0, #128	; 0x80
   356ca:	08e4      	lsrs	r4, r4, #3
   356cc:	0300      	lsls	r0, r0, #12
   356ce:	4204      	tst	r4, r0
   356d0:	d0e7      	beq.n	356a2 <__aeabi_dadd+0x54e>
   356d2:	08cb      	lsrs	r3, r1, #3
   356d4:	4203      	tst	r3, r0
   356d6:	d1e4      	bne.n	356a2 <__aeabi_dadd+0x54e>
   356d8:	08d2      	lsrs	r2, r2, #3
   356da:	0749      	lsls	r1, r1, #29
   356dc:	4311      	orrs	r1, r2
   356de:	000f      	movs	r7, r1
   356e0:	001c      	movs	r4, r3
   356e2:	e7de      	b.n	356a2 <__aeabi_dadd+0x54e>
   356e4:	2700      	movs	r7, #0
   356e6:	2400      	movs	r4, #0
   356e8:	e5d5      	b.n	35296 <__aeabi_dadd+0x142>
   356ea:	2100      	movs	r1, #0
   356ec:	e76b      	b.n	355c6 <__aeabi_dadd+0x472>
   356ee:	2500      	movs	r5, #0
   356f0:	2700      	movs	r7, #0
   356f2:	e5f3      	b.n	352dc <__aeabi_dadd+0x188>
   356f4:	464e      	mov	r6, r9
   356f6:	0025      	movs	r5, r4
   356f8:	3e20      	subs	r6, #32
   356fa:	40f5      	lsrs	r5, r6
   356fc:	464b      	mov	r3, r9
   356fe:	002e      	movs	r6, r5
   35700:	2b20      	cmp	r3, #32
   35702:	d02d      	beq.n	35760 <__aeabi_dadd+0x60c>
   35704:	2540      	movs	r5, #64	; 0x40
   35706:	1aed      	subs	r5, r5, r3
   35708:	40ac      	lsls	r4, r5
   3570a:	4327      	orrs	r7, r4
   3570c:	1e7c      	subs	r4, r7, #1
   3570e:	41a7      	sbcs	r7, r4
   35710:	2400      	movs	r4, #0
   35712:	4337      	orrs	r7, r6
   35714:	e6c9      	b.n	354aa <__aeabi_dadd+0x356>
   35716:	2480      	movs	r4, #128	; 0x80
   35718:	2500      	movs	r5, #0
   3571a:	0324      	lsls	r4, r4, #12
   3571c:	4e13      	ldr	r6, [pc, #76]	; (3576c <__aeabi_dadd+0x618>)
   3571e:	2700      	movs	r7, #0
   35720:	e5dc      	b.n	352dc <__aeabi_dadd+0x188>
   35722:	4327      	orrs	r7, r4
   35724:	1e7c      	subs	r4, r7, #1
   35726:	41a7      	sbcs	r7, r4
   35728:	2400      	movs	r4, #0
   3572a:	e779      	b.n	35620 <__aeabi_dadd+0x4cc>
   3572c:	000c      	movs	r4, r1
   3572e:	0017      	movs	r7, r2
   35730:	4e0e      	ldr	r6, [pc, #56]	; (3576c <__aeabi_dadd+0x618>)
   35732:	e593      	b.n	3525c <__aeabi_dadd+0x108>
   35734:	000c      	movs	r4, r1
   35736:	0017      	movs	r7, r2
   35738:	e590      	b.n	3525c <__aeabi_dadd+0x108>
   3573a:	4656      	mov	r6, sl
   3573c:	0023      	movs	r3, r4
   3573e:	3e20      	subs	r6, #32
   35740:	40f3      	lsrs	r3, r6
   35742:	4699      	mov	r9, r3
   35744:	4653      	mov	r3, sl
   35746:	2b20      	cmp	r3, #32
   35748:	d00e      	beq.n	35768 <__aeabi_dadd+0x614>
   3574a:	2340      	movs	r3, #64	; 0x40
   3574c:	4656      	mov	r6, sl
   3574e:	1b9b      	subs	r3, r3, r6
   35750:	409c      	lsls	r4, r3
   35752:	4327      	orrs	r7, r4
   35754:	1e7c      	subs	r4, r7, #1
   35756:	41a7      	sbcs	r7, r4
   35758:	464b      	mov	r3, r9
   3575a:	2400      	movs	r4, #0
   3575c:	431f      	orrs	r7, r3
   3575e:	e75f      	b.n	35620 <__aeabi_dadd+0x4cc>
   35760:	2400      	movs	r4, #0
   35762:	e7d2      	b.n	3570a <__aeabi_dadd+0x5b6>
   35764:	0017      	movs	r7, r2
   35766:	e5b2      	b.n	352ce <__aeabi_dadd+0x17a>
   35768:	2400      	movs	r4, #0
   3576a:	e7f2      	b.n	35752 <__aeabi_dadd+0x5fe>
   3576c:	000007ff 	.word	0x000007ff
   35770:	ff7fffff 	.word	0xff7fffff

00035774 <__aeabi_ddiv>:
   35774:	b5f0      	push	{r4, r5, r6, r7, lr}
   35776:	4657      	mov	r7, sl
   35778:	4645      	mov	r5, r8
   3577a:	46de      	mov	lr, fp
   3577c:	464e      	mov	r6, r9
   3577e:	b5e0      	push	{r5, r6, r7, lr}
   35780:	004c      	lsls	r4, r1, #1
   35782:	030e      	lsls	r6, r1, #12
   35784:	b087      	sub	sp, #28
   35786:	4683      	mov	fp, r0
   35788:	4692      	mov	sl, r2
   3578a:	001d      	movs	r5, r3
   3578c:	4680      	mov	r8, r0
   3578e:	0b36      	lsrs	r6, r6, #12
   35790:	0d64      	lsrs	r4, r4, #21
   35792:	0fcf      	lsrs	r7, r1, #31
   35794:	2c00      	cmp	r4, #0
   35796:	d04f      	beq.n	35838 <__aeabi_ddiv+0xc4>
   35798:	4b6f      	ldr	r3, [pc, #444]	; (35958 <__aeabi_ddiv+0x1e4>)
   3579a:	429c      	cmp	r4, r3
   3579c:	d035      	beq.n	3580a <__aeabi_ddiv+0x96>
   3579e:	2380      	movs	r3, #128	; 0x80
   357a0:	0f42      	lsrs	r2, r0, #29
   357a2:	041b      	lsls	r3, r3, #16
   357a4:	00f6      	lsls	r6, r6, #3
   357a6:	4313      	orrs	r3, r2
   357a8:	4333      	orrs	r3, r6
   357aa:	4699      	mov	r9, r3
   357ac:	00c3      	lsls	r3, r0, #3
   357ae:	4698      	mov	r8, r3
   357b0:	4b6a      	ldr	r3, [pc, #424]	; (3595c <__aeabi_ddiv+0x1e8>)
   357b2:	2600      	movs	r6, #0
   357b4:	469c      	mov	ip, r3
   357b6:	2300      	movs	r3, #0
   357b8:	4464      	add	r4, ip
   357ba:	9303      	str	r3, [sp, #12]
   357bc:	032b      	lsls	r3, r5, #12
   357be:	0b1b      	lsrs	r3, r3, #12
   357c0:	469b      	mov	fp, r3
   357c2:	006b      	lsls	r3, r5, #1
   357c4:	0fed      	lsrs	r5, r5, #31
   357c6:	4650      	mov	r0, sl
   357c8:	0d5b      	lsrs	r3, r3, #21
   357ca:	9501      	str	r5, [sp, #4]
   357cc:	d05e      	beq.n	3588c <__aeabi_ddiv+0x118>
   357ce:	4a62      	ldr	r2, [pc, #392]	; (35958 <__aeabi_ddiv+0x1e4>)
   357d0:	4293      	cmp	r3, r2
   357d2:	d053      	beq.n	3587c <__aeabi_ddiv+0x108>
   357d4:	465a      	mov	r2, fp
   357d6:	00d1      	lsls	r1, r2, #3
   357d8:	2280      	movs	r2, #128	; 0x80
   357da:	0f40      	lsrs	r0, r0, #29
   357dc:	0412      	lsls	r2, r2, #16
   357de:	4302      	orrs	r2, r0
   357e0:	430a      	orrs	r2, r1
   357e2:	4693      	mov	fp, r2
   357e4:	4652      	mov	r2, sl
   357e6:	00d1      	lsls	r1, r2, #3
   357e8:	4a5c      	ldr	r2, [pc, #368]	; (3595c <__aeabi_ddiv+0x1e8>)
   357ea:	4694      	mov	ip, r2
   357ec:	2200      	movs	r2, #0
   357ee:	4463      	add	r3, ip
   357f0:	0038      	movs	r0, r7
   357f2:	4068      	eors	r0, r5
   357f4:	4684      	mov	ip, r0
   357f6:	9002      	str	r0, [sp, #8]
   357f8:	1ae4      	subs	r4, r4, r3
   357fa:	4316      	orrs	r6, r2
   357fc:	2e0f      	cmp	r6, #15
   357fe:	d900      	bls.n	35802 <__aeabi_ddiv+0x8e>
   35800:	e0b4      	b.n	3596c <__aeabi_ddiv+0x1f8>
   35802:	4b57      	ldr	r3, [pc, #348]	; (35960 <__aeabi_ddiv+0x1ec>)
   35804:	00b6      	lsls	r6, r6, #2
   35806:	599b      	ldr	r3, [r3, r6]
   35808:	469f      	mov	pc, r3
   3580a:	0003      	movs	r3, r0
   3580c:	4333      	orrs	r3, r6
   3580e:	4699      	mov	r9, r3
   35810:	d16c      	bne.n	358ec <__aeabi_ddiv+0x178>
   35812:	2300      	movs	r3, #0
   35814:	4698      	mov	r8, r3
   35816:	3302      	adds	r3, #2
   35818:	2608      	movs	r6, #8
   3581a:	9303      	str	r3, [sp, #12]
   3581c:	e7ce      	b.n	357bc <__aeabi_ddiv+0x48>
   3581e:	46cb      	mov	fp, r9
   35820:	4641      	mov	r1, r8
   35822:	9a03      	ldr	r2, [sp, #12]
   35824:	9701      	str	r7, [sp, #4]
   35826:	2a02      	cmp	r2, #2
   35828:	d165      	bne.n	358f6 <__aeabi_ddiv+0x182>
   3582a:	9b01      	ldr	r3, [sp, #4]
   3582c:	4c4a      	ldr	r4, [pc, #296]	; (35958 <__aeabi_ddiv+0x1e4>)
   3582e:	469c      	mov	ip, r3
   35830:	2300      	movs	r3, #0
   35832:	2200      	movs	r2, #0
   35834:	4698      	mov	r8, r3
   35836:	e06b      	b.n	35910 <__aeabi_ddiv+0x19c>
   35838:	0003      	movs	r3, r0
   3583a:	4333      	orrs	r3, r6
   3583c:	4699      	mov	r9, r3
   3583e:	d04e      	beq.n	358de <__aeabi_ddiv+0x16a>
   35840:	2e00      	cmp	r6, #0
   35842:	d100      	bne.n	35846 <__aeabi_ddiv+0xd2>
   35844:	e1bc      	b.n	35bc0 <__aeabi_ddiv+0x44c>
   35846:	0030      	movs	r0, r6
   35848:	f001 f8ca 	bl	369e0 <__clzsi2>
   3584c:	0003      	movs	r3, r0
   3584e:	3b0b      	subs	r3, #11
   35850:	2b1c      	cmp	r3, #28
   35852:	dd00      	ble.n	35856 <__aeabi_ddiv+0xe2>
   35854:	e1ac      	b.n	35bb0 <__aeabi_ddiv+0x43c>
   35856:	221d      	movs	r2, #29
   35858:	1ad3      	subs	r3, r2, r3
   3585a:	465a      	mov	r2, fp
   3585c:	0001      	movs	r1, r0
   3585e:	40da      	lsrs	r2, r3
   35860:	3908      	subs	r1, #8
   35862:	408e      	lsls	r6, r1
   35864:	0013      	movs	r3, r2
   35866:	4333      	orrs	r3, r6
   35868:	4699      	mov	r9, r3
   3586a:	465b      	mov	r3, fp
   3586c:	408b      	lsls	r3, r1
   3586e:	4698      	mov	r8, r3
   35870:	2300      	movs	r3, #0
   35872:	4c3c      	ldr	r4, [pc, #240]	; (35964 <__aeabi_ddiv+0x1f0>)
   35874:	2600      	movs	r6, #0
   35876:	1a24      	subs	r4, r4, r0
   35878:	9303      	str	r3, [sp, #12]
   3587a:	e79f      	b.n	357bc <__aeabi_ddiv+0x48>
   3587c:	4651      	mov	r1, sl
   3587e:	465a      	mov	r2, fp
   35880:	4311      	orrs	r1, r2
   35882:	d129      	bne.n	358d8 <__aeabi_ddiv+0x164>
   35884:	2200      	movs	r2, #0
   35886:	4693      	mov	fp, r2
   35888:	3202      	adds	r2, #2
   3588a:	e7b1      	b.n	357f0 <__aeabi_ddiv+0x7c>
   3588c:	4659      	mov	r1, fp
   3588e:	4301      	orrs	r1, r0
   35890:	d01e      	beq.n	358d0 <__aeabi_ddiv+0x15c>
   35892:	465b      	mov	r3, fp
   35894:	2b00      	cmp	r3, #0
   35896:	d100      	bne.n	3589a <__aeabi_ddiv+0x126>
   35898:	e19e      	b.n	35bd8 <__aeabi_ddiv+0x464>
   3589a:	4658      	mov	r0, fp
   3589c:	f001 f8a0 	bl	369e0 <__clzsi2>
   358a0:	0003      	movs	r3, r0
   358a2:	3b0b      	subs	r3, #11
   358a4:	2b1c      	cmp	r3, #28
   358a6:	dd00      	ble.n	358aa <__aeabi_ddiv+0x136>
   358a8:	e18f      	b.n	35bca <__aeabi_ddiv+0x456>
   358aa:	0002      	movs	r2, r0
   358ac:	4659      	mov	r1, fp
   358ae:	3a08      	subs	r2, #8
   358b0:	4091      	lsls	r1, r2
   358b2:	468b      	mov	fp, r1
   358b4:	211d      	movs	r1, #29
   358b6:	1acb      	subs	r3, r1, r3
   358b8:	4651      	mov	r1, sl
   358ba:	40d9      	lsrs	r1, r3
   358bc:	000b      	movs	r3, r1
   358be:	4659      	mov	r1, fp
   358c0:	430b      	orrs	r3, r1
   358c2:	4651      	mov	r1, sl
   358c4:	469b      	mov	fp, r3
   358c6:	4091      	lsls	r1, r2
   358c8:	4b26      	ldr	r3, [pc, #152]	; (35964 <__aeabi_ddiv+0x1f0>)
   358ca:	2200      	movs	r2, #0
   358cc:	1a1b      	subs	r3, r3, r0
   358ce:	e78f      	b.n	357f0 <__aeabi_ddiv+0x7c>
   358d0:	2300      	movs	r3, #0
   358d2:	2201      	movs	r2, #1
   358d4:	469b      	mov	fp, r3
   358d6:	e78b      	b.n	357f0 <__aeabi_ddiv+0x7c>
   358d8:	4651      	mov	r1, sl
   358da:	2203      	movs	r2, #3
   358dc:	e788      	b.n	357f0 <__aeabi_ddiv+0x7c>
   358de:	2300      	movs	r3, #0
   358e0:	4698      	mov	r8, r3
   358e2:	3301      	adds	r3, #1
   358e4:	2604      	movs	r6, #4
   358e6:	2400      	movs	r4, #0
   358e8:	9303      	str	r3, [sp, #12]
   358ea:	e767      	b.n	357bc <__aeabi_ddiv+0x48>
   358ec:	2303      	movs	r3, #3
   358ee:	46b1      	mov	r9, r6
   358f0:	9303      	str	r3, [sp, #12]
   358f2:	260c      	movs	r6, #12
   358f4:	e762      	b.n	357bc <__aeabi_ddiv+0x48>
   358f6:	2a03      	cmp	r2, #3
   358f8:	d100      	bne.n	358fc <__aeabi_ddiv+0x188>
   358fa:	e25c      	b.n	35db6 <__aeabi_ddiv+0x642>
   358fc:	9b01      	ldr	r3, [sp, #4]
   358fe:	2a01      	cmp	r2, #1
   35900:	d000      	beq.n	35904 <__aeabi_ddiv+0x190>
   35902:	e1e4      	b.n	35cce <__aeabi_ddiv+0x55a>
   35904:	4013      	ands	r3, r2
   35906:	469c      	mov	ip, r3
   35908:	2300      	movs	r3, #0
   3590a:	2400      	movs	r4, #0
   3590c:	2200      	movs	r2, #0
   3590e:	4698      	mov	r8, r3
   35910:	2100      	movs	r1, #0
   35912:	0312      	lsls	r2, r2, #12
   35914:	0b13      	lsrs	r3, r2, #12
   35916:	0d0a      	lsrs	r2, r1, #20
   35918:	0512      	lsls	r2, r2, #20
   3591a:	431a      	orrs	r2, r3
   3591c:	0523      	lsls	r3, r4, #20
   3591e:	4c12      	ldr	r4, [pc, #72]	; (35968 <__aeabi_ddiv+0x1f4>)
   35920:	4640      	mov	r0, r8
   35922:	4022      	ands	r2, r4
   35924:	4313      	orrs	r3, r2
   35926:	4662      	mov	r2, ip
   35928:	005b      	lsls	r3, r3, #1
   3592a:	07d2      	lsls	r2, r2, #31
   3592c:	085b      	lsrs	r3, r3, #1
   3592e:	4313      	orrs	r3, r2
   35930:	0019      	movs	r1, r3
   35932:	b007      	add	sp, #28
   35934:	bc3c      	pop	{r2, r3, r4, r5}
   35936:	4690      	mov	r8, r2
   35938:	4699      	mov	r9, r3
   3593a:	46a2      	mov	sl, r4
   3593c:	46ab      	mov	fp, r5
   3593e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35940:	2300      	movs	r3, #0
   35942:	2280      	movs	r2, #128	; 0x80
   35944:	469c      	mov	ip, r3
   35946:	0312      	lsls	r2, r2, #12
   35948:	4698      	mov	r8, r3
   3594a:	4c03      	ldr	r4, [pc, #12]	; (35958 <__aeabi_ddiv+0x1e4>)
   3594c:	e7e0      	b.n	35910 <__aeabi_ddiv+0x19c>
   3594e:	2300      	movs	r3, #0
   35950:	4c01      	ldr	r4, [pc, #4]	; (35958 <__aeabi_ddiv+0x1e4>)
   35952:	2200      	movs	r2, #0
   35954:	4698      	mov	r8, r3
   35956:	e7db      	b.n	35910 <__aeabi_ddiv+0x19c>
   35958:	000007ff 	.word	0x000007ff
   3595c:	fffffc01 	.word	0xfffffc01
   35960:	0003c6b4 	.word	0x0003c6b4
   35964:	fffffc0d 	.word	0xfffffc0d
   35968:	800fffff 	.word	0x800fffff
   3596c:	45d9      	cmp	r9, fp
   3596e:	d900      	bls.n	35972 <__aeabi_ddiv+0x1fe>
   35970:	e139      	b.n	35be6 <__aeabi_ddiv+0x472>
   35972:	d100      	bne.n	35976 <__aeabi_ddiv+0x202>
   35974:	e134      	b.n	35be0 <__aeabi_ddiv+0x46c>
   35976:	2300      	movs	r3, #0
   35978:	4646      	mov	r6, r8
   3597a:	464d      	mov	r5, r9
   3597c:	469a      	mov	sl, r3
   3597e:	3c01      	subs	r4, #1
   35980:	465b      	mov	r3, fp
   35982:	0e0a      	lsrs	r2, r1, #24
   35984:	021b      	lsls	r3, r3, #8
   35986:	431a      	orrs	r2, r3
   35988:	020b      	lsls	r3, r1, #8
   3598a:	0c17      	lsrs	r7, r2, #16
   3598c:	9303      	str	r3, [sp, #12]
   3598e:	0413      	lsls	r3, r2, #16
   35990:	0c1b      	lsrs	r3, r3, #16
   35992:	0039      	movs	r1, r7
   35994:	0028      	movs	r0, r5
   35996:	4690      	mov	r8, r2
   35998:	9301      	str	r3, [sp, #4]
   3599a:	f7fe fedd 	bl	34758 <__udivsi3>
   3599e:	0002      	movs	r2, r0
   359a0:	9b01      	ldr	r3, [sp, #4]
   359a2:	4683      	mov	fp, r0
   359a4:	435a      	muls	r2, r3
   359a6:	0028      	movs	r0, r5
   359a8:	0039      	movs	r1, r7
   359aa:	4691      	mov	r9, r2
   359ac:	f7fe ff5a 	bl	34864 <__aeabi_uidivmod>
   359b0:	0c35      	lsrs	r5, r6, #16
   359b2:	0409      	lsls	r1, r1, #16
   359b4:	430d      	orrs	r5, r1
   359b6:	45a9      	cmp	r9, r5
   359b8:	d90d      	bls.n	359d6 <__aeabi_ddiv+0x262>
   359ba:	465b      	mov	r3, fp
   359bc:	4445      	add	r5, r8
   359be:	3b01      	subs	r3, #1
   359c0:	45a8      	cmp	r8, r5
   359c2:	d900      	bls.n	359c6 <__aeabi_ddiv+0x252>
   359c4:	e13a      	b.n	35c3c <__aeabi_ddiv+0x4c8>
   359c6:	45a9      	cmp	r9, r5
   359c8:	d800      	bhi.n	359cc <__aeabi_ddiv+0x258>
   359ca:	e137      	b.n	35c3c <__aeabi_ddiv+0x4c8>
   359cc:	2302      	movs	r3, #2
   359ce:	425b      	negs	r3, r3
   359d0:	469c      	mov	ip, r3
   359d2:	4445      	add	r5, r8
   359d4:	44e3      	add	fp, ip
   359d6:	464b      	mov	r3, r9
   359d8:	1aeb      	subs	r3, r5, r3
   359da:	0039      	movs	r1, r7
   359dc:	0018      	movs	r0, r3
   359de:	9304      	str	r3, [sp, #16]
   359e0:	f7fe feba 	bl	34758 <__udivsi3>
   359e4:	9b01      	ldr	r3, [sp, #4]
   359e6:	0005      	movs	r5, r0
   359e8:	4343      	muls	r3, r0
   359ea:	0039      	movs	r1, r7
   359ec:	9804      	ldr	r0, [sp, #16]
   359ee:	4699      	mov	r9, r3
   359f0:	f7fe ff38 	bl	34864 <__aeabi_uidivmod>
   359f4:	0433      	lsls	r3, r6, #16
   359f6:	0409      	lsls	r1, r1, #16
   359f8:	0c1b      	lsrs	r3, r3, #16
   359fa:	430b      	orrs	r3, r1
   359fc:	4599      	cmp	r9, r3
   359fe:	d909      	bls.n	35a14 <__aeabi_ddiv+0x2a0>
   35a00:	4443      	add	r3, r8
   35a02:	1e6a      	subs	r2, r5, #1
   35a04:	4598      	cmp	r8, r3
   35a06:	d900      	bls.n	35a0a <__aeabi_ddiv+0x296>
   35a08:	e11a      	b.n	35c40 <__aeabi_ddiv+0x4cc>
   35a0a:	4599      	cmp	r9, r3
   35a0c:	d800      	bhi.n	35a10 <__aeabi_ddiv+0x29c>
   35a0e:	e117      	b.n	35c40 <__aeabi_ddiv+0x4cc>
   35a10:	3d02      	subs	r5, #2
   35a12:	4443      	add	r3, r8
   35a14:	464a      	mov	r2, r9
   35a16:	1a9b      	subs	r3, r3, r2
   35a18:	465a      	mov	r2, fp
   35a1a:	0412      	lsls	r2, r2, #16
   35a1c:	432a      	orrs	r2, r5
   35a1e:	9903      	ldr	r1, [sp, #12]
   35a20:	4693      	mov	fp, r2
   35a22:	0c10      	lsrs	r0, r2, #16
   35a24:	0c0a      	lsrs	r2, r1, #16
   35a26:	4691      	mov	r9, r2
   35a28:	0409      	lsls	r1, r1, #16
   35a2a:	465a      	mov	r2, fp
   35a2c:	0c09      	lsrs	r1, r1, #16
   35a2e:	464e      	mov	r6, r9
   35a30:	000d      	movs	r5, r1
   35a32:	0412      	lsls	r2, r2, #16
   35a34:	0c12      	lsrs	r2, r2, #16
   35a36:	4345      	muls	r5, r0
   35a38:	9105      	str	r1, [sp, #20]
   35a3a:	4351      	muls	r1, r2
   35a3c:	4372      	muls	r2, r6
   35a3e:	4370      	muls	r0, r6
   35a40:	1952      	adds	r2, r2, r5
   35a42:	0c0e      	lsrs	r6, r1, #16
   35a44:	18b2      	adds	r2, r6, r2
   35a46:	4295      	cmp	r5, r2
   35a48:	d903      	bls.n	35a52 <__aeabi_ddiv+0x2de>
   35a4a:	2580      	movs	r5, #128	; 0x80
   35a4c:	026d      	lsls	r5, r5, #9
   35a4e:	46ac      	mov	ip, r5
   35a50:	4460      	add	r0, ip
   35a52:	0c15      	lsrs	r5, r2, #16
   35a54:	0409      	lsls	r1, r1, #16
   35a56:	0412      	lsls	r2, r2, #16
   35a58:	0c09      	lsrs	r1, r1, #16
   35a5a:	1828      	adds	r0, r5, r0
   35a5c:	1852      	adds	r2, r2, r1
   35a5e:	4283      	cmp	r3, r0
   35a60:	d200      	bcs.n	35a64 <__aeabi_ddiv+0x2f0>
   35a62:	e0ce      	b.n	35c02 <__aeabi_ddiv+0x48e>
   35a64:	d100      	bne.n	35a68 <__aeabi_ddiv+0x2f4>
   35a66:	e0c8      	b.n	35bfa <__aeabi_ddiv+0x486>
   35a68:	1a1d      	subs	r5, r3, r0
   35a6a:	4653      	mov	r3, sl
   35a6c:	1a9e      	subs	r6, r3, r2
   35a6e:	45b2      	cmp	sl, r6
   35a70:	4192      	sbcs	r2, r2
   35a72:	4252      	negs	r2, r2
   35a74:	1aab      	subs	r3, r5, r2
   35a76:	469a      	mov	sl, r3
   35a78:	4598      	cmp	r8, r3
   35a7a:	d100      	bne.n	35a7e <__aeabi_ddiv+0x30a>
   35a7c:	e117      	b.n	35cae <__aeabi_ddiv+0x53a>
   35a7e:	0039      	movs	r1, r7
   35a80:	0018      	movs	r0, r3
   35a82:	f7fe fe69 	bl	34758 <__udivsi3>
   35a86:	9b01      	ldr	r3, [sp, #4]
   35a88:	0005      	movs	r5, r0
   35a8a:	4343      	muls	r3, r0
   35a8c:	0039      	movs	r1, r7
   35a8e:	4650      	mov	r0, sl
   35a90:	9304      	str	r3, [sp, #16]
   35a92:	f7fe fee7 	bl	34864 <__aeabi_uidivmod>
   35a96:	9804      	ldr	r0, [sp, #16]
   35a98:	040b      	lsls	r3, r1, #16
   35a9a:	0c31      	lsrs	r1, r6, #16
   35a9c:	4319      	orrs	r1, r3
   35a9e:	4288      	cmp	r0, r1
   35aa0:	d909      	bls.n	35ab6 <__aeabi_ddiv+0x342>
   35aa2:	4441      	add	r1, r8
   35aa4:	1e6b      	subs	r3, r5, #1
   35aa6:	4588      	cmp	r8, r1
   35aa8:	d900      	bls.n	35aac <__aeabi_ddiv+0x338>
   35aaa:	e107      	b.n	35cbc <__aeabi_ddiv+0x548>
   35aac:	4288      	cmp	r0, r1
   35aae:	d800      	bhi.n	35ab2 <__aeabi_ddiv+0x33e>
   35ab0:	e104      	b.n	35cbc <__aeabi_ddiv+0x548>
   35ab2:	3d02      	subs	r5, #2
   35ab4:	4441      	add	r1, r8
   35ab6:	9b04      	ldr	r3, [sp, #16]
   35ab8:	1acb      	subs	r3, r1, r3
   35aba:	0018      	movs	r0, r3
   35abc:	0039      	movs	r1, r7
   35abe:	9304      	str	r3, [sp, #16]
   35ac0:	f7fe fe4a 	bl	34758 <__udivsi3>
   35ac4:	9b01      	ldr	r3, [sp, #4]
   35ac6:	4682      	mov	sl, r0
   35ac8:	4343      	muls	r3, r0
   35aca:	0039      	movs	r1, r7
   35acc:	9804      	ldr	r0, [sp, #16]
   35ace:	9301      	str	r3, [sp, #4]
   35ad0:	f7fe fec8 	bl	34864 <__aeabi_uidivmod>
   35ad4:	9801      	ldr	r0, [sp, #4]
   35ad6:	040b      	lsls	r3, r1, #16
   35ad8:	0431      	lsls	r1, r6, #16
   35ada:	0c09      	lsrs	r1, r1, #16
   35adc:	4319      	orrs	r1, r3
   35ade:	4288      	cmp	r0, r1
   35ae0:	d90d      	bls.n	35afe <__aeabi_ddiv+0x38a>
   35ae2:	4653      	mov	r3, sl
   35ae4:	4441      	add	r1, r8
   35ae6:	3b01      	subs	r3, #1
   35ae8:	4588      	cmp	r8, r1
   35aea:	d900      	bls.n	35aee <__aeabi_ddiv+0x37a>
   35aec:	e0e8      	b.n	35cc0 <__aeabi_ddiv+0x54c>
   35aee:	4288      	cmp	r0, r1
   35af0:	d800      	bhi.n	35af4 <__aeabi_ddiv+0x380>
   35af2:	e0e5      	b.n	35cc0 <__aeabi_ddiv+0x54c>
   35af4:	2302      	movs	r3, #2
   35af6:	425b      	negs	r3, r3
   35af8:	469c      	mov	ip, r3
   35afa:	4441      	add	r1, r8
   35afc:	44e2      	add	sl, ip
   35afe:	9b01      	ldr	r3, [sp, #4]
   35b00:	042d      	lsls	r5, r5, #16
   35b02:	1ace      	subs	r6, r1, r3
   35b04:	4651      	mov	r1, sl
   35b06:	4329      	orrs	r1, r5
   35b08:	9d05      	ldr	r5, [sp, #20]
   35b0a:	464f      	mov	r7, r9
   35b0c:	002a      	movs	r2, r5
   35b0e:	040b      	lsls	r3, r1, #16
   35b10:	0c08      	lsrs	r0, r1, #16
   35b12:	0c1b      	lsrs	r3, r3, #16
   35b14:	435a      	muls	r2, r3
   35b16:	4345      	muls	r5, r0
   35b18:	437b      	muls	r3, r7
   35b1a:	4378      	muls	r0, r7
   35b1c:	195b      	adds	r3, r3, r5
   35b1e:	0c17      	lsrs	r7, r2, #16
   35b20:	18fb      	adds	r3, r7, r3
   35b22:	429d      	cmp	r5, r3
   35b24:	d903      	bls.n	35b2e <__aeabi_ddiv+0x3ba>
   35b26:	2580      	movs	r5, #128	; 0x80
   35b28:	026d      	lsls	r5, r5, #9
   35b2a:	46ac      	mov	ip, r5
   35b2c:	4460      	add	r0, ip
   35b2e:	0c1d      	lsrs	r5, r3, #16
   35b30:	0412      	lsls	r2, r2, #16
   35b32:	041b      	lsls	r3, r3, #16
   35b34:	0c12      	lsrs	r2, r2, #16
   35b36:	1828      	adds	r0, r5, r0
   35b38:	189b      	adds	r3, r3, r2
   35b3a:	4286      	cmp	r6, r0
   35b3c:	d200      	bcs.n	35b40 <__aeabi_ddiv+0x3cc>
   35b3e:	e093      	b.n	35c68 <__aeabi_ddiv+0x4f4>
   35b40:	d100      	bne.n	35b44 <__aeabi_ddiv+0x3d0>
   35b42:	e08e      	b.n	35c62 <__aeabi_ddiv+0x4ee>
   35b44:	2301      	movs	r3, #1
   35b46:	4319      	orrs	r1, r3
   35b48:	4ba0      	ldr	r3, [pc, #640]	; (35dcc <__aeabi_ddiv+0x658>)
   35b4a:	18e3      	adds	r3, r4, r3
   35b4c:	2b00      	cmp	r3, #0
   35b4e:	dc00      	bgt.n	35b52 <__aeabi_ddiv+0x3de>
   35b50:	e099      	b.n	35c86 <__aeabi_ddiv+0x512>
   35b52:	074a      	lsls	r2, r1, #29
   35b54:	d000      	beq.n	35b58 <__aeabi_ddiv+0x3e4>
   35b56:	e09e      	b.n	35c96 <__aeabi_ddiv+0x522>
   35b58:	465a      	mov	r2, fp
   35b5a:	01d2      	lsls	r2, r2, #7
   35b5c:	d506      	bpl.n	35b6c <__aeabi_ddiv+0x3f8>
   35b5e:	465a      	mov	r2, fp
   35b60:	4b9b      	ldr	r3, [pc, #620]	; (35dd0 <__aeabi_ddiv+0x65c>)
   35b62:	401a      	ands	r2, r3
   35b64:	2380      	movs	r3, #128	; 0x80
   35b66:	4693      	mov	fp, r2
   35b68:	00db      	lsls	r3, r3, #3
   35b6a:	18e3      	adds	r3, r4, r3
   35b6c:	4a99      	ldr	r2, [pc, #612]	; (35dd4 <__aeabi_ddiv+0x660>)
   35b6e:	4293      	cmp	r3, r2
   35b70:	dd68      	ble.n	35c44 <__aeabi_ddiv+0x4d0>
   35b72:	2301      	movs	r3, #1
   35b74:	9a02      	ldr	r2, [sp, #8]
   35b76:	4c98      	ldr	r4, [pc, #608]	; (35dd8 <__aeabi_ddiv+0x664>)
   35b78:	401a      	ands	r2, r3
   35b7a:	2300      	movs	r3, #0
   35b7c:	4694      	mov	ip, r2
   35b7e:	4698      	mov	r8, r3
   35b80:	2200      	movs	r2, #0
   35b82:	e6c5      	b.n	35910 <__aeabi_ddiv+0x19c>
   35b84:	2280      	movs	r2, #128	; 0x80
   35b86:	464b      	mov	r3, r9
   35b88:	0312      	lsls	r2, r2, #12
   35b8a:	4213      	tst	r3, r2
   35b8c:	d00a      	beq.n	35ba4 <__aeabi_ddiv+0x430>
   35b8e:	465b      	mov	r3, fp
   35b90:	4213      	tst	r3, r2
   35b92:	d106      	bne.n	35ba2 <__aeabi_ddiv+0x42e>
   35b94:	431a      	orrs	r2, r3
   35b96:	0312      	lsls	r2, r2, #12
   35b98:	0b12      	lsrs	r2, r2, #12
   35b9a:	46ac      	mov	ip, r5
   35b9c:	4688      	mov	r8, r1
   35b9e:	4c8e      	ldr	r4, [pc, #568]	; (35dd8 <__aeabi_ddiv+0x664>)
   35ba0:	e6b6      	b.n	35910 <__aeabi_ddiv+0x19c>
   35ba2:	464b      	mov	r3, r9
   35ba4:	431a      	orrs	r2, r3
   35ba6:	0312      	lsls	r2, r2, #12
   35ba8:	0b12      	lsrs	r2, r2, #12
   35baa:	46bc      	mov	ip, r7
   35bac:	4c8a      	ldr	r4, [pc, #552]	; (35dd8 <__aeabi_ddiv+0x664>)
   35bae:	e6af      	b.n	35910 <__aeabi_ddiv+0x19c>
   35bb0:	0003      	movs	r3, r0
   35bb2:	465a      	mov	r2, fp
   35bb4:	3b28      	subs	r3, #40	; 0x28
   35bb6:	409a      	lsls	r2, r3
   35bb8:	2300      	movs	r3, #0
   35bba:	4691      	mov	r9, r2
   35bbc:	4698      	mov	r8, r3
   35bbe:	e657      	b.n	35870 <__aeabi_ddiv+0xfc>
   35bc0:	4658      	mov	r0, fp
   35bc2:	f000 ff0d 	bl	369e0 <__clzsi2>
   35bc6:	3020      	adds	r0, #32
   35bc8:	e640      	b.n	3584c <__aeabi_ddiv+0xd8>
   35bca:	0003      	movs	r3, r0
   35bcc:	4652      	mov	r2, sl
   35bce:	3b28      	subs	r3, #40	; 0x28
   35bd0:	409a      	lsls	r2, r3
   35bd2:	2100      	movs	r1, #0
   35bd4:	4693      	mov	fp, r2
   35bd6:	e677      	b.n	358c8 <__aeabi_ddiv+0x154>
   35bd8:	f000 ff02 	bl	369e0 <__clzsi2>
   35bdc:	3020      	adds	r0, #32
   35bde:	e65f      	b.n	358a0 <__aeabi_ddiv+0x12c>
   35be0:	4588      	cmp	r8, r1
   35be2:	d200      	bcs.n	35be6 <__aeabi_ddiv+0x472>
   35be4:	e6c7      	b.n	35976 <__aeabi_ddiv+0x202>
   35be6:	464b      	mov	r3, r9
   35be8:	07de      	lsls	r6, r3, #31
   35bea:	085d      	lsrs	r5, r3, #1
   35bec:	4643      	mov	r3, r8
   35bee:	085b      	lsrs	r3, r3, #1
   35bf0:	431e      	orrs	r6, r3
   35bf2:	4643      	mov	r3, r8
   35bf4:	07db      	lsls	r3, r3, #31
   35bf6:	469a      	mov	sl, r3
   35bf8:	e6c2      	b.n	35980 <__aeabi_ddiv+0x20c>
   35bfa:	2500      	movs	r5, #0
   35bfc:	4592      	cmp	sl, r2
   35bfe:	d300      	bcc.n	35c02 <__aeabi_ddiv+0x48e>
   35c00:	e733      	b.n	35a6a <__aeabi_ddiv+0x2f6>
   35c02:	9e03      	ldr	r6, [sp, #12]
   35c04:	4659      	mov	r1, fp
   35c06:	46b4      	mov	ip, r6
   35c08:	44e2      	add	sl, ip
   35c0a:	45b2      	cmp	sl, r6
   35c0c:	41ad      	sbcs	r5, r5
   35c0e:	426d      	negs	r5, r5
   35c10:	4445      	add	r5, r8
   35c12:	18eb      	adds	r3, r5, r3
   35c14:	3901      	subs	r1, #1
   35c16:	4598      	cmp	r8, r3
   35c18:	d207      	bcs.n	35c2a <__aeabi_ddiv+0x4b6>
   35c1a:	4298      	cmp	r0, r3
   35c1c:	d900      	bls.n	35c20 <__aeabi_ddiv+0x4ac>
   35c1e:	e07f      	b.n	35d20 <__aeabi_ddiv+0x5ac>
   35c20:	d100      	bne.n	35c24 <__aeabi_ddiv+0x4b0>
   35c22:	e0bc      	b.n	35d9e <__aeabi_ddiv+0x62a>
   35c24:	1a1d      	subs	r5, r3, r0
   35c26:	468b      	mov	fp, r1
   35c28:	e71f      	b.n	35a6a <__aeabi_ddiv+0x2f6>
   35c2a:	4598      	cmp	r8, r3
   35c2c:	d1fa      	bne.n	35c24 <__aeabi_ddiv+0x4b0>
   35c2e:	9d03      	ldr	r5, [sp, #12]
   35c30:	4555      	cmp	r5, sl
   35c32:	d9f2      	bls.n	35c1a <__aeabi_ddiv+0x4a6>
   35c34:	4643      	mov	r3, r8
   35c36:	468b      	mov	fp, r1
   35c38:	1a1d      	subs	r5, r3, r0
   35c3a:	e716      	b.n	35a6a <__aeabi_ddiv+0x2f6>
   35c3c:	469b      	mov	fp, r3
   35c3e:	e6ca      	b.n	359d6 <__aeabi_ddiv+0x262>
   35c40:	0015      	movs	r5, r2
   35c42:	e6e7      	b.n	35a14 <__aeabi_ddiv+0x2a0>
   35c44:	465a      	mov	r2, fp
   35c46:	08c9      	lsrs	r1, r1, #3
   35c48:	0752      	lsls	r2, r2, #29
   35c4a:	430a      	orrs	r2, r1
   35c4c:	055b      	lsls	r3, r3, #21
   35c4e:	4690      	mov	r8, r2
   35c50:	0d5c      	lsrs	r4, r3, #21
   35c52:	465a      	mov	r2, fp
   35c54:	2301      	movs	r3, #1
   35c56:	9902      	ldr	r1, [sp, #8]
   35c58:	0252      	lsls	r2, r2, #9
   35c5a:	4019      	ands	r1, r3
   35c5c:	0b12      	lsrs	r2, r2, #12
   35c5e:	468c      	mov	ip, r1
   35c60:	e656      	b.n	35910 <__aeabi_ddiv+0x19c>
   35c62:	2b00      	cmp	r3, #0
   35c64:	d100      	bne.n	35c68 <__aeabi_ddiv+0x4f4>
   35c66:	e76f      	b.n	35b48 <__aeabi_ddiv+0x3d4>
   35c68:	4446      	add	r6, r8
   35c6a:	1e4a      	subs	r2, r1, #1
   35c6c:	45b0      	cmp	r8, r6
   35c6e:	d929      	bls.n	35cc4 <__aeabi_ddiv+0x550>
   35c70:	0011      	movs	r1, r2
   35c72:	4286      	cmp	r6, r0
   35c74:	d000      	beq.n	35c78 <__aeabi_ddiv+0x504>
   35c76:	e765      	b.n	35b44 <__aeabi_ddiv+0x3d0>
   35c78:	9a03      	ldr	r2, [sp, #12]
   35c7a:	4293      	cmp	r3, r2
   35c7c:	d000      	beq.n	35c80 <__aeabi_ddiv+0x50c>
   35c7e:	e761      	b.n	35b44 <__aeabi_ddiv+0x3d0>
   35c80:	e762      	b.n	35b48 <__aeabi_ddiv+0x3d4>
   35c82:	2101      	movs	r1, #1
   35c84:	4249      	negs	r1, r1
   35c86:	2001      	movs	r0, #1
   35c88:	1ac2      	subs	r2, r0, r3
   35c8a:	2a38      	cmp	r2, #56	; 0x38
   35c8c:	dd21      	ble.n	35cd2 <__aeabi_ddiv+0x55e>
   35c8e:	9b02      	ldr	r3, [sp, #8]
   35c90:	4003      	ands	r3, r0
   35c92:	469c      	mov	ip, r3
   35c94:	e638      	b.n	35908 <__aeabi_ddiv+0x194>
   35c96:	220f      	movs	r2, #15
   35c98:	400a      	ands	r2, r1
   35c9a:	2a04      	cmp	r2, #4
   35c9c:	d100      	bne.n	35ca0 <__aeabi_ddiv+0x52c>
   35c9e:	e75b      	b.n	35b58 <__aeabi_ddiv+0x3e4>
   35ca0:	000a      	movs	r2, r1
   35ca2:	1d11      	adds	r1, r2, #4
   35ca4:	4291      	cmp	r1, r2
   35ca6:	4192      	sbcs	r2, r2
   35ca8:	4252      	negs	r2, r2
   35caa:	4493      	add	fp, r2
   35cac:	e754      	b.n	35b58 <__aeabi_ddiv+0x3e4>
   35cae:	4b47      	ldr	r3, [pc, #284]	; (35dcc <__aeabi_ddiv+0x658>)
   35cb0:	18e3      	adds	r3, r4, r3
   35cb2:	2b00      	cmp	r3, #0
   35cb4:	dde5      	ble.n	35c82 <__aeabi_ddiv+0x50e>
   35cb6:	2201      	movs	r2, #1
   35cb8:	4252      	negs	r2, r2
   35cba:	e7f2      	b.n	35ca2 <__aeabi_ddiv+0x52e>
   35cbc:	001d      	movs	r5, r3
   35cbe:	e6fa      	b.n	35ab6 <__aeabi_ddiv+0x342>
   35cc0:	469a      	mov	sl, r3
   35cc2:	e71c      	b.n	35afe <__aeabi_ddiv+0x38a>
   35cc4:	42b0      	cmp	r0, r6
   35cc6:	d839      	bhi.n	35d3c <__aeabi_ddiv+0x5c8>
   35cc8:	d06e      	beq.n	35da8 <__aeabi_ddiv+0x634>
   35cca:	0011      	movs	r1, r2
   35ccc:	e73a      	b.n	35b44 <__aeabi_ddiv+0x3d0>
   35cce:	9302      	str	r3, [sp, #8]
   35cd0:	e73a      	b.n	35b48 <__aeabi_ddiv+0x3d4>
   35cd2:	2a1f      	cmp	r2, #31
   35cd4:	dc3c      	bgt.n	35d50 <__aeabi_ddiv+0x5dc>
   35cd6:	2320      	movs	r3, #32
   35cd8:	1a9b      	subs	r3, r3, r2
   35cda:	000c      	movs	r4, r1
   35cdc:	4658      	mov	r0, fp
   35cde:	4099      	lsls	r1, r3
   35ce0:	4098      	lsls	r0, r3
   35ce2:	1e4b      	subs	r3, r1, #1
   35ce4:	4199      	sbcs	r1, r3
   35ce6:	465b      	mov	r3, fp
   35ce8:	40d4      	lsrs	r4, r2
   35cea:	40d3      	lsrs	r3, r2
   35cec:	4320      	orrs	r0, r4
   35cee:	4308      	orrs	r0, r1
   35cf0:	001a      	movs	r2, r3
   35cf2:	0743      	lsls	r3, r0, #29
   35cf4:	d009      	beq.n	35d0a <__aeabi_ddiv+0x596>
   35cf6:	230f      	movs	r3, #15
   35cf8:	4003      	ands	r3, r0
   35cfa:	2b04      	cmp	r3, #4
   35cfc:	d005      	beq.n	35d0a <__aeabi_ddiv+0x596>
   35cfe:	0001      	movs	r1, r0
   35d00:	1d08      	adds	r0, r1, #4
   35d02:	4288      	cmp	r0, r1
   35d04:	419b      	sbcs	r3, r3
   35d06:	425b      	negs	r3, r3
   35d08:	18d2      	adds	r2, r2, r3
   35d0a:	0213      	lsls	r3, r2, #8
   35d0c:	d53a      	bpl.n	35d84 <__aeabi_ddiv+0x610>
   35d0e:	2301      	movs	r3, #1
   35d10:	9a02      	ldr	r2, [sp, #8]
   35d12:	2401      	movs	r4, #1
   35d14:	401a      	ands	r2, r3
   35d16:	2300      	movs	r3, #0
   35d18:	4694      	mov	ip, r2
   35d1a:	4698      	mov	r8, r3
   35d1c:	2200      	movs	r2, #0
   35d1e:	e5f7      	b.n	35910 <__aeabi_ddiv+0x19c>
   35d20:	2102      	movs	r1, #2
   35d22:	4249      	negs	r1, r1
   35d24:	468c      	mov	ip, r1
   35d26:	9d03      	ldr	r5, [sp, #12]
   35d28:	44e3      	add	fp, ip
   35d2a:	46ac      	mov	ip, r5
   35d2c:	44e2      	add	sl, ip
   35d2e:	45aa      	cmp	sl, r5
   35d30:	41ad      	sbcs	r5, r5
   35d32:	426d      	negs	r5, r5
   35d34:	4445      	add	r5, r8
   35d36:	18ed      	adds	r5, r5, r3
   35d38:	1a2d      	subs	r5, r5, r0
   35d3a:	e696      	b.n	35a6a <__aeabi_ddiv+0x2f6>
   35d3c:	1e8a      	subs	r2, r1, #2
   35d3e:	9903      	ldr	r1, [sp, #12]
   35d40:	004d      	lsls	r5, r1, #1
   35d42:	428d      	cmp	r5, r1
   35d44:	4189      	sbcs	r1, r1
   35d46:	4249      	negs	r1, r1
   35d48:	4441      	add	r1, r8
   35d4a:	1876      	adds	r6, r6, r1
   35d4c:	9503      	str	r5, [sp, #12]
   35d4e:	e78f      	b.n	35c70 <__aeabi_ddiv+0x4fc>
   35d50:	201f      	movs	r0, #31
   35d52:	4240      	negs	r0, r0
   35d54:	1ac3      	subs	r3, r0, r3
   35d56:	4658      	mov	r0, fp
   35d58:	40d8      	lsrs	r0, r3
   35d5a:	0003      	movs	r3, r0
   35d5c:	2a20      	cmp	r2, #32
   35d5e:	d028      	beq.n	35db2 <__aeabi_ddiv+0x63e>
   35d60:	2040      	movs	r0, #64	; 0x40
   35d62:	465d      	mov	r5, fp
   35d64:	1a82      	subs	r2, r0, r2
   35d66:	4095      	lsls	r5, r2
   35d68:	4329      	orrs	r1, r5
   35d6a:	1e4a      	subs	r2, r1, #1
   35d6c:	4191      	sbcs	r1, r2
   35d6e:	4319      	orrs	r1, r3
   35d70:	2307      	movs	r3, #7
   35d72:	2200      	movs	r2, #0
   35d74:	400b      	ands	r3, r1
   35d76:	d009      	beq.n	35d8c <__aeabi_ddiv+0x618>
   35d78:	230f      	movs	r3, #15
   35d7a:	2200      	movs	r2, #0
   35d7c:	400b      	ands	r3, r1
   35d7e:	0008      	movs	r0, r1
   35d80:	2b04      	cmp	r3, #4
   35d82:	d1bd      	bne.n	35d00 <__aeabi_ddiv+0x58c>
   35d84:	0001      	movs	r1, r0
   35d86:	0753      	lsls	r3, r2, #29
   35d88:	0252      	lsls	r2, r2, #9
   35d8a:	0b12      	lsrs	r2, r2, #12
   35d8c:	08c9      	lsrs	r1, r1, #3
   35d8e:	4319      	orrs	r1, r3
   35d90:	2301      	movs	r3, #1
   35d92:	4688      	mov	r8, r1
   35d94:	9902      	ldr	r1, [sp, #8]
   35d96:	2400      	movs	r4, #0
   35d98:	4019      	ands	r1, r3
   35d9a:	468c      	mov	ip, r1
   35d9c:	e5b8      	b.n	35910 <__aeabi_ddiv+0x19c>
   35d9e:	4552      	cmp	r2, sl
   35da0:	d8be      	bhi.n	35d20 <__aeabi_ddiv+0x5ac>
   35da2:	468b      	mov	fp, r1
   35da4:	2500      	movs	r5, #0
   35da6:	e660      	b.n	35a6a <__aeabi_ddiv+0x2f6>
   35da8:	9d03      	ldr	r5, [sp, #12]
   35daa:	429d      	cmp	r5, r3
   35dac:	d3c6      	bcc.n	35d3c <__aeabi_ddiv+0x5c8>
   35dae:	0011      	movs	r1, r2
   35db0:	e762      	b.n	35c78 <__aeabi_ddiv+0x504>
   35db2:	2500      	movs	r5, #0
   35db4:	e7d8      	b.n	35d68 <__aeabi_ddiv+0x5f4>
   35db6:	2280      	movs	r2, #128	; 0x80
   35db8:	465b      	mov	r3, fp
   35dba:	0312      	lsls	r2, r2, #12
   35dbc:	431a      	orrs	r2, r3
   35dbe:	9b01      	ldr	r3, [sp, #4]
   35dc0:	0312      	lsls	r2, r2, #12
   35dc2:	0b12      	lsrs	r2, r2, #12
   35dc4:	469c      	mov	ip, r3
   35dc6:	4688      	mov	r8, r1
   35dc8:	4c03      	ldr	r4, [pc, #12]	; (35dd8 <__aeabi_ddiv+0x664>)
   35dca:	e5a1      	b.n	35910 <__aeabi_ddiv+0x19c>
   35dcc:	000003ff 	.word	0x000003ff
   35dd0:	feffffff 	.word	0xfeffffff
   35dd4:	000007fe 	.word	0x000007fe
   35dd8:	000007ff 	.word	0x000007ff

00035ddc <__aeabi_dmul>:
   35ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
   35dde:	4657      	mov	r7, sl
   35de0:	4645      	mov	r5, r8
   35de2:	46de      	mov	lr, fp
   35de4:	464e      	mov	r6, r9
   35de6:	b5e0      	push	{r5, r6, r7, lr}
   35de8:	030c      	lsls	r4, r1, #12
   35dea:	4698      	mov	r8, r3
   35dec:	004e      	lsls	r6, r1, #1
   35dee:	0b23      	lsrs	r3, r4, #12
   35df0:	b087      	sub	sp, #28
   35df2:	0007      	movs	r7, r0
   35df4:	4692      	mov	sl, r2
   35df6:	469b      	mov	fp, r3
   35df8:	0d76      	lsrs	r6, r6, #21
   35dfa:	0fcd      	lsrs	r5, r1, #31
   35dfc:	2e00      	cmp	r6, #0
   35dfe:	d06b      	beq.n	35ed8 <__aeabi_dmul+0xfc>
   35e00:	4b6d      	ldr	r3, [pc, #436]	; (35fb8 <__aeabi_dmul+0x1dc>)
   35e02:	429e      	cmp	r6, r3
   35e04:	d035      	beq.n	35e72 <__aeabi_dmul+0x96>
   35e06:	2480      	movs	r4, #128	; 0x80
   35e08:	465b      	mov	r3, fp
   35e0a:	0f42      	lsrs	r2, r0, #29
   35e0c:	0424      	lsls	r4, r4, #16
   35e0e:	00db      	lsls	r3, r3, #3
   35e10:	4314      	orrs	r4, r2
   35e12:	431c      	orrs	r4, r3
   35e14:	00c3      	lsls	r3, r0, #3
   35e16:	4699      	mov	r9, r3
   35e18:	4b68      	ldr	r3, [pc, #416]	; (35fbc <__aeabi_dmul+0x1e0>)
   35e1a:	46a3      	mov	fp, r4
   35e1c:	469c      	mov	ip, r3
   35e1e:	2300      	movs	r3, #0
   35e20:	2700      	movs	r7, #0
   35e22:	4466      	add	r6, ip
   35e24:	9302      	str	r3, [sp, #8]
   35e26:	4643      	mov	r3, r8
   35e28:	031c      	lsls	r4, r3, #12
   35e2a:	005a      	lsls	r2, r3, #1
   35e2c:	0fdb      	lsrs	r3, r3, #31
   35e2e:	4650      	mov	r0, sl
   35e30:	0b24      	lsrs	r4, r4, #12
   35e32:	0d52      	lsrs	r2, r2, #21
   35e34:	4698      	mov	r8, r3
   35e36:	d100      	bne.n	35e3a <__aeabi_dmul+0x5e>
   35e38:	e076      	b.n	35f28 <__aeabi_dmul+0x14c>
   35e3a:	4b5f      	ldr	r3, [pc, #380]	; (35fb8 <__aeabi_dmul+0x1dc>)
   35e3c:	429a      	cmp	r2, r3
   35e3e:	d06d      	beq.n	35f1c <__aeabi_dmul+0x140>
   35e40:	2380      	movs	r3, #128	; 0x80
   35e42:	0f41      	lsrs	r1, r0, #29
   35e44:	041b      	lsls	r3, r3, #16
   35e46:	430b      	orrs	r3, r1
   35e48:	495c      	ldr	r1, [pc, #368]	; (35fbc <__aeabi_dmul+0x1e0>)
   35e4a:	00e4      	lsls	r4, r4, #3
   35e4c:	468c      	mov	ip, r1
   35e4e:	431c      	orrs	r4, r3
   35e50:	00c3      	lsls	r3, r0, #3
   35e52:	2000      	movs	r0, #0
   35e54:	4462      	add	r2, ip
   35e56:	4641      	mov	r1, r8
   35e58:	18b6      	adds	r6, r6, r2
   35e5a:	4069      	eors	r1, r5
   35e5c:	1c72      	adds	r2, r6, #1
   35e5e:	9101      	str	r1, [sp, #4]
   35e60:	4694      	mov	ip, r2
   35e62:	4307      	orrs	r7, r0
   35e64:	2f0f      	cmp	r7, #15
   35e66:	d900      	bls.n	35e6a <__aeabi_dmul+0x8e>
   35e68:	e0b0      	b.n	35fcc <__aeabi_dmul+0x1f0>
   35e6a:	4a55      	ldr	r2, [pc, #340]	; (35fc0 <__aeabi_dmul+0x1e4>)
   35e6c:	00bf      	lsls	r7, r7, #2
   35e6e:	59d2      	ldr	r2, [r2, r7]
   35e70:	4697      	mov	pc, r2
   35e72:	465b      	mov	r3, fp
   35e74:	4303      	orrs	r3, r0
   35e76:	4699      	mov	r9, r3
   35e78:	d000      	beq.n	35e7c <__aeabi_dmul+0xa0>
   35e7a:	e087      	b.n	35f8c <__aeabi_dmul+0x1b0>
   35e7c:	2300      	movs	r3, #0
   35e7e:	469b      	mov	fp, r3
   35e80:	3302      	adds	r3, #2
   35e82:	2708      	movs	r7, #8
   35e84:	9302      	str	r3, [sp, #8]
   35e86:	e7ce      	b.n	35e26 <__aeabi_dmul+0x4a>
   35e88:	4642      	mov	r2, r8
   35e8a:	9201      	str	r2, [sp, #4]
   35e8c:	2802      	cmp	r0, #2
   35e8e:	d067      	beq.n	35f60 <__aeabi_dmul+0x184>
   35e90:	2803      	cmp	r0, #3
   35e92:	d100      	bne.n	35e96 <__aeabi_dmul+0xba>
   35e94:	e20e      	b.n	362b4 <__aeabi_dmul+0x4d8>
   35e96:	2801      	cmp	r0, #1
   35e98:	d000      	beq.n	35e9c <__aeabi_dmul+0xc0>
   35e9a:	e162      	b.n	36162 <__aeabi_dmul+0x386>
   35e9c:	2300      	movs	r3, #0
   35e9e:	2400      	movs	r4, #0
   35ea0:	2200      	movs	r2, #0
   35ea2:	4699      	mov	r9, r3
   35ea4:	9901      	ldr	r1, [sp, #4]
   35ea6:	4001      	ands	r1, r0
   35ea8:	b2cd      	uxtb	r5, r1
   35eaa:	2100      	movs	r1, #0
   35eac:	0312      	lsls	r2, r2, #12
   35eae:	0d0b      	lsrs	r3, r1, #20
   35eb0:	0b12      	lsrs	r2, r2, #12
   35eb2:	051b      	lsls	r3, r3, #20
   35eb4:	4313      	orrs	r3, r2
   35eb6:	4a43      	ldr	r2, [pc, #268]	; (35fc4 <__aeabi_dmul+0x1e8>)
   35eb8:	0524      	lsls	r4, r4, #20
   35eba:	4013      	ands	r3, r2
   35ebc:	431c      	orrs	r4, r3
   35ebe:	0064      	lsls	r4, r4, #1
   35ec0:	07ed      	lsls	r5, r5, #31
   35ec2:	0864      	lsrs	r4, r4, #1
   35ec4:	432c      	orrs	r4, r5
   35ec6:	4648      	mov	r0, r9
   35ec8:	0021      	movs	r1, r4
   35eca:	b007      	add	sp, #28
   35ecc:	bc3c      	pop	{r2, r3, r4, r5}
   35ece:	4690      	mov	r8, r2
   35ed0:	4699      	mov	r9, r3
   35ed2:	46a2      	mov	sl, r4
   35ed4:	46ab      	mov	fp, r5
   35ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35ed8:	4303      	orrs	r3, r0
   35eda:	4699      	mov	r9, r3
   35edc:	d04f      	beq.n	35f7e <__aeabi_dmul+0x1a2>
   35ede:	465b      	mov	r3, fp
   35ee0:	2b00      	cmp	r3, #0
   35ee2:	d100      	bne.n	35ee6 <__aeabi_dmul+0x10a>
   35ee4:	e189      	b.n	361fa <__aeabi_dmul+0x41e>
   35ee6:	4658      	mov	r0, fp
   35ee8:	f000 fd7a 	bl	369e0 <__clzsi2>
   35eec:	0003      	movs	r3, r0
   35eee:	3b0b      	subs	r3, #11
   35ef0:	2b1c      	cmp	r3, #28
   35ef2:	dd00      	ble.n	35ef6 <__aeabi_dmul+0x11a>
   35ef4:	e17a      	b.n	361ec <__aeabi_dmul+0x410>
   35ef6:	221d      	movs	r2, #29
   35ef8:	1ad3      	subs	r3, r2, r3
   35efa:	003a      	movs	r2, r7
   35efc:	0001      	movs	r1, r0
   35efe:	465c      	mov	r4, fp
   35f00:	40da      	lsrs	r2, r3
   35f02:	3908      	subs	r1, #8
   35f04:	408c      	lsls	r4, r1
   35f06:	0013      	movs	r3, r2
   35f08:	408f      	lsls	r7, r1
   35f0a:	4323      	orrs	r3, r4
   35f0c:	469b      	mov	fp, r3
   35f0e:	46b9      	mov	r9, r7
   35f10:	2300      	movs	r3, #0
   35f12:	4e2d      	ldr	r6, [pc, #180]	; (35fc8 <__aeabi_dmul+0x1ec>)
   35f14:	2700      	movs	r7, #0
   35f16:	1a36      	subs	r6, r6, r0
   35f18:	9302      	str	r3, [sp, #8]
   35f1a:	e784      	b.n	35e26 <__aeabi_dmul+0x4a>
   35f1c:	4653      	mov	r3, sl
   35f1e:	4323      	orrs	r3, r4
   35f20:	d12a      	bne.n	35f78 <__aeabi_dmul+0x19c>
   35f22:	2400      	movs	r4, #0
   35f24:	2002      	movs	r0, #2
   35f26:	e796      	b.n	35e56 <__aeabi_dmul+0x7a>
   35f28:	4653      	mov	r3, sl
   35f2a:	4323      	orrs	r3, r4
   35f2c:	d020      	beq.n	35f70 <__aeabi_dmul+0x194>
   35f2e:	2c00      	cmp	r4, #0
   35f30:	d100      	bne.n	35f34 <__aeabi_dmul+0x158>
   35f32:	e157      	b.n	361e4 <__aeabi_dmul+0x408>
   35f34:	0020      	movs	r0, r4
   35f36:	f000 fd53 	bl	369e0 <__clzsi2>
   35f3a:	0003      	movs	r3, r0
   35f3c:	3b0b      	subs	r3, #11
   35f3e:	2b1c      	cmp	r3, #28
   35f40:	dd00      	ble.n	35f44 <__aeabi_dmul+0x168>
   35f42:	e149      	b.n	361d8 <__aeabi_dmul+0x3fc>
   35f44:	211d      	movs	r1, #29
   35f46:	1acb      	subs	r3, r1, r3
   35f48:	4651      	mov	r1, sl
   35f4a:	0002      	movs	r2, r0
   35f4c:	40d9      	lsrs	r1, r3
   35f4e:	4653      	mov	r3, sl
   35f50:	3a08      	subs	r2, #8
   35f52:	4094      	lsls	r4, r2
   35f54:	4093      	lsls	r3, r2
   35f56:	430c      	orrs	r4, r1
   35f58:	4a1b      	ldr	r2, [pc, #108]	; (35fc8 <__aeabi_dmul+0x1ec>)
   35f5a:	1a12      	subs	r2, r2, r0
   35f5c:	2000      	movs	r0, #0
   35f5e:	e77a      	b.n	35e56 <__aeabi_dmul+0x7a>
   35f60:	2501      	movs	r5, #1
   35f62:	9b01      	ldr	r3, [sp, #4]
   35f64:	4c14      	ldr	r4, [pc, #80]	; (35fb8 <__aeabi_dmul+0x1dc>)
   35f66:	401d      	ands	r5, r3
   35f68:	2300      	movs	r3, #0
   35f6a:	2200      	movs	r2, #0
   35f6c:	4699      	mov	r9, r3
   35f6e:	e79c      	b.n	35eaa <__aeabi_dmul+0xce>
   35f70:	2400      	movs	r4, #0
   35f72:	2200      	movs	r2, #0
   35f74:	2001      	movs	r0, #1
   35f76:	e76e      	b.n	35e56 <__aeabi_dmul+0x7a>
   35f78:	4653      	mov	r3, sl
   35f7a:	2003      	movs	r0, #3
   35f7c:	e76b      	b.n	35e56 <__aeabi_dmul+0x7a>
   35f7e:	2300      	movs	r3, #0
   35f80:	469b      	mov	fp, r3
   35f82:	3301      	adds	r3, #1
   35f84:	2704      	movs	r7, #4
   35f86:	2600      	movs	r6, #0
   35f88:	9302      	str	r3, [sp, #8]
   35f8a:	e74c      	b.n	35e26 <__aeabi_dmul+0x4a>
   35f8c:	2303      	movs	r3, #3
   35f8e:	4681      	mov	r9, r0
   35f90:	270c      	movs	r7, #12
   35f92:	9302      	str	r3, [sp, #8]
   35f94:	e747      	b.n	35e26 <__aeabi_dmul+0x4a>
   35f96:	2280      	movs	r2, #128	; 0x80
   35f98:	2300      	movs	r3, #0
   35f9a:	2500      	movs	r5, #0
   35f9c:	0312      	lsls	r2, r2, #12
   35f9e:	4699      	mov	r9, r3
   35fa0:	4c05      	ldr	r4, [pc, #20]	; (35fb8 <__aeabi_dmul+0x1dc>)
   35fa2:	e782      	b.n	35eaa <__aeabi_dmul+0xce>
   35fa4:	465c      	mov	r4, fp
   35fa6:	464b      	mov	r3, r9
   35fa8:	9802      	ldr	r0, [sp, #8]
   35faa:	e76f      	b.n	35e8c <__aeabi_dmul+0xb0>
   35fac:	465c      	mov	r4, fp
   35fae:	464b      	mov	r3, r9
   35fb0:	9501      	str	r5, [sp, #4]
   35fb2:	9802      	ldr	r0, [sp, #8]
   35fb4:	e76a      	b.n	35e8c <__aeabi_dmul+0xb0>
   35fb6:	46c0      	nop			; (mov r8, r8)
   35fb8:	000007ff 	.word	0x000007ff
   35fbc:	fffffc01 	.word	0xfffffc01
   35fc0:	0003c6f4 	.word	0x0003c6f4
   35fc4:	800fffff 	.word	0x800fffff
   35fc8:	fffffc0d 	.word	0xfffffc0d
   35fcc:	464a      	mov	r2, r9
   35fce:	4649      	mov	r1, r9
   35fd0:	0c17      	lsrs	r7, r2, #16
   35fd2:	0c1a      	lsrs	r2, r3, #16
   35fd4:	041b      	lsls	r3, r3, #16
   35fd6:	0c1b      	lsrs	r3, r3, #16
   35fd8:	0408      	lsls	r0, r1, #16
   35fda:	0019      	movs	r1, r3
   35fdc:	0c00      	lsrs	r0, r0, #16
   35fde:	4341      	muls	r1, r0
   35fe0:	0015      	movs	r5, r2
   35fe2:	4688      	mov	r8, r1
   35fe4:	0019      	movs	r1, r3
   35fe6:	437d      	muls	r5, r7
   35fe8:	4379      	muls	r1, r7
   35fea:	9503      	str	r5, [sp, #12]
   35fec:	4689      	mov	r9, r1
   35fee:	0029      	movs	r1, r5
   35ff0:	0015      	movs	r5, r2
   35ff2:	4345      	muls	r5, r0
   35ff4:	444d      	add	r5, r9
   35ff6:	9502      	str	r5, [sp, #8]
   35ff8:	4645      	mov	r5, r8
   35ffa:	0c2d      	lsrs	r5, r5, #16
   35ffc:	46aa      	mov	sl, r5
   35ffe:	9d02      	ldr	r5, [sp, #8]
   36000:	4455      	add	r5, sl
   36002:	45a9      	cmp	r9, r5
   36004:	d906      	bls.n	36014 <__aeabi_dmul+0x238>
   36006:	468a      	mov	sl, r1
   36008:	2180      	movs	r1, #128	; 0x80
   3600a:	0249      	lsls	r1, r1, #9
   3600c:	4689      	mov	r9, r1
   3600e:	44ca      	add	sl, r9
   36010:	4651      	mov	r1, sl
   36012:	9103      	str	r1, [sp, #12]
   36014:	0c29      	lsrs	r1, r5, #16
   36016:	9104      	str	r1, [sp, #16]
   36018:	4641      	mov	r1, r8
   3601a:	0409      	lsls	r1, r1, #16
   3601c:	042d      	lsls	r5, r5, #16
   3601e:	0c09      	lsrs	r1, r1, #16
   36020:	4688      	mov	r8, r1
   36022:	0029      	movs	r1, r5
   36024:	0c25      	lsrs	r5, r4, #16
   36026:	0424      	lsls	r4, r4, #16
   36028:	4441      	add	r1, r8
   3602a:	0c24      	lsrs	r4, r4, #16
   3602c:	9105      	str	r1, [sp, #20]
   3602e:	0021      	movs	r1, r4
   36030:	4341      	muls	r1, r0
   36032:	4688      	mov	r8, r1
   36034:	0021      	movs	r1, r4
   36036:	4379      	muls	r1, r7
   36038:	468a      	mov	sl, r1
   3603a:	4368      	muls	r0, r5
   3603c:	4641      	mov	r1, r8
   3603e:	4450      	add	r0, sl
   36040:	4681      	mov	r9, r0
   36042:	0c08      	lsrs	r0, r1, #16
   36044:	4448      	add	r0, r9
   36046:	436f      	muls	r7, r5
   36048:	4582      	cmp	sl, r0
   3604a:	d903      	bls.n	36054 <__aeabi_dmul+0x278>
   3604c:	2180      	movs	r1, #128	; 0x80
   3604e:	0249      	lsls	r1, r1, #9
   36050:	4689      	mov	r9, r1
   36052:	444f      	add	r7, r9
   36054:	0c01      	lsrs	r1, r0, #16
   36056:	4689      	mov	r9, r1
   36058:	0039      	movs	r1, r7
   3605a:	4449      	add	r1, r9
   3605c:	9102      	str	r1, [sp, #8]
   3605e:	4641      	mov	r1, r8
   36060:	040f      	lsls	r7, r1, #16
   36062:	9904      	ldr	r1, [sp, #16]
   36064:	0c3f      	lsrs	r7, r7, #16
   36066:	4688      	mov	r8, r1
   36068:	0400      	lsls	r0, r0, #16
   3606a:	19c0      	adds	r0, r0, r7
   3606c:	4480      	add	r8, r0
   3606e:	4641      	mov	r1, r8
   36070:	9104      	str	r1, [sp, #16]
   36072:	4659      	mov	r1, fp
   36074:	0c0f      	lsrs	r7, r1, #16
   36076:	0409      	lsls	r1, r1, #16
   36078:	0c09      	lsrs	r1, r1, #16
   3607a:	4688      	mov	r8, r1
   3607c:	4359      	muls	r1, r3
   3607e:	468a      	mov	sl, r1
   36080:	0039      	movs	r1, r7
   36082:	4351      	muls	r1, r2
   36084:	4689      	mov	r9, r1
   36086:	4641      	mov	r1, r8
   36088:	434a      	muls	r2, r1
   3608a:	4651      	mov	r1, sl
   3608c:	0c09      	lsrs	r1, r1, #16
   3608e:	468b      	mov	fp, r1
   36090:	437b      	muls	r3, r7
   36092:	18d2      	adds	r2, r2, r3
   36094:	445a      	add	r2, fp
   36096:	4293      	cmp	r3, r2
   36098:	d903      	bls.n	360a2 <__aeabi_dmul+0x2c6>
   3609a:	2380      	movs	r3, #128	; 0x80
   3609c:	025b      	lsls	r3, r3, #9
   3609e:	469b      	mov	fp, r3
   360a0:	44d9      	add	r9, fp
   360a2:	4651      	mov	r1, sl
   360a4:	0409      	lsls	r1, r1, #16
   360a6:	0c09      	lsrs	r1, r1, #16
   360a8:	468a      	mov	sl, r1
   360aa:	4641      	mov	r1, r8
   360ac:	4361      	muls	r1, r4
   360ae:	437c      	muls	r4, r7
   360b0:	0c13      	lsrs	r3, r2, #16
   360b2:	0412      	lsls	r2, r2, #16
   360b4:	444b      	add	r3, r9
   360b6:	4452      	add	r2, sl
   360b8:	46a1      	mov	r9, r4
   360ba:	468a      	mov	sl, r1
   360bc:	003c      	movs	r4, r7
   360be:	4641      	mov	r1, r8
   360c0:	436c      	muls	r4, r5
   360c2:	434d      	muls	r5, r1
   360c4:	4651      	mov	r1, sl
   360c6:	444d      	add	r5, r9
   360c8:	0c0f      	lsrs	r7, r1, #16
   360ca:	197d      	adds	r5, r7, r5
   360cc:	45a9      	cmp	r9, r5
   360ce:	d903      	bls.n	360d8 <__aeabi_dmul+0x2fc>
   360d0:	2180      	movs	r1, #128	; 0x80
   360d2:	0249      	lsls	r1, r1, #9
   360d4:	4688      	mov	r8, r1
   360d6:	4444      	add	r4, r8
   360d8:	9f04      	ldr	r7, [sp, #16]
   360da:	9903      	ldr	r1, [sp, #12]
   360dc:	46b8      	mov	r8, r7
   360de:	4441      	add	r1, r8
   360e0:	468b      	mov	fp, r1
   360e2:	4583      	cmp	fp, r0
   360e4:	4180      	sbcs	r0, r0
   360e6:	4241      	negs	r1, r0
   360e8:	4688      	mov	r8, r1
   360ea:	4651      	mov	r1, sl
   360ec:	0408      	lsls	r0, r1, #16
   360ee:	042f      	lsls	r7, r5, #16
   360f0:	0c00      	lsrs	r0, r0, #16
   360f2:	183f      	adds	r7, r7, r0
   360f4:	4658      	mov	r0, fp
   360f6:	9902      	ldr	r1, [sp, #8]
   360f8:	1810      	adds	r0, r2, r0
   360fa:	4689      	mov	r9, r1
   360fc:	4290      	cmp	r0, r2
   360fe:	4192      	sbcs	r2, r2
   36100:	444f      	add	r7, r9
   36102:	46ba      	mov	sl, r7
   36104:	4252      	negs	r2, r2
   36106:	4699      	mov	r9, r3
   36108:	4693      	mov	fp, r2
   3610a:	44c2      	add	sl, r8
   3610c:	44d1      	add	r9, sl
   3610e:	44cb      	add	fp, r9
   36110:	428f      	cmp	r7, r1
   36112:	41bf      	sbcs	r7, r7
   36114:	45c2      	cmp	sl, r8
   36116:	4189      	sbcs	r1, r1
   36118:	4599      	cmp	r9, r3
   3611a:	419b      	sbcs	r3, r3
   3611c:	4593      	cmp	fp, r2
   3611e:	4192      	sbcs	r2, r2
   36120:	427f      	negs	r7, r7
   36122:	4249      	negs	r1, r1
   36124:	0c2d      	lsrs	r5, r5, #16
   36126:	4252      	negs	r2, r2
   36128:	430f      	orrs	r7, r1
   3612a:	425b      	negs	r3, r3
   3612c:	4313      	orrs	r3, r2
   3612e:	197f      	adds	r7, r7, r5
   36130:	18ff      	adds	r7, r7, r3
   36132:	465b      	mov	r3, fp
   36134:	193c      	adds	r4, r7, r4
   36136:	0ddb      	lsrs	r3, r3, #23
   36138:	9a05      	ldr	r2, [sp, #20]
   3613a:	0264      	lsls	r4, r4, #9
   3613c:	431c      	orrs	r4, r3
   3613e:	0243      	lsls	r3, r0, #9
   36140:	4313      	orrs	r3, r2
   36142:	1e5d      	subs	r5, r3, #1
   36144:	41ab      	sbcs	r3, r5
   36146:	465a      	mov	r2, fp
   36148:	0dc0      	lsrs	r0, r0, #23
   3614a:	4303      	orrs	r3, r0
   3614c:	0252      	lsls	r2, r2, #9
   3614e:	4313      	orrs	r3, r2
   36150:	01e2      	lsls	r2, r4, #7
   36152:	d556      	bpl.n	36202 <__aeabi_dmul+0x426>
   36154:	2001      	movs	r0, #1
   36156:	085a      	lsrs	r2, r3, #1
   36158:	4003      	ands	r3, r0
   3615a:	4313      	orrs	r3, r2
   3615c:	07e2      	lsls	r2, r4, #31
   3615e:	4313      	orrs	r3, r2
   36160:	0864      	lsrs	r4, r4, #1
   36162:	485a      	ldr	r0, [pc, #360]	; (362cc <__aeabi_dmul+0x4f0>)
   36164:	4460      	add	r0, ip
   36166:	2800      	cmp	r0, #0
   36168:	dd4d      	ble.n	36206 <__aeabi_dmul+0x42a>
   3616a:	075a      	lsls	r2, r3, #29
   3616c:	d009      	beq.n	36182 <__aeabi_dmul+0x3a6>
   3616e:	220f      	movs	r2, #15
   36170:	401a      	ands	r2, r3
   36172:	2a04      	cmp	r2, #4
   36174:	d005      	beq.n	36182 <__aeabi_dmul+0x3a6>
   36176:	1d1a      	adds	r2, r3, #4
   36178:	429a      	cmp	r2, r3
   3617a:	419b      	sbcs	r3, r3
   3617c:	425b      	negs	r3, r3
   3617e:	18e4      	adds	r4, r4, r3
   36180:	0013      	movs	r3, r2
   36182:	01e2      	lsls	r2, r4, #7
   36184:	d504      	bpl.n	36190 <__aeabi_dmul+0x3b4>
   36186:	2080      	movs	r0, #128	; 0x80
   36188:	4a51      	ldr	r2, [pc, #324]	; (362d0 <__aeabi_dmul+0x4f4>)
   3618a:	00c0      	lsls	r0, r0, #3
   3618c:	4014      	ands	r4, r2
   3618e:	4460      	add	r0, ip
   36190:	4a50      	ldr	r2, [pc, #320]	; (362d4 <__aeabi_dmul+0x4f8>)
   36192:	4290      	cmp	r0, r2
   36194:	dd00      	ble.n	36198 <__aeabi_dmul+0x3bc>
   36196:	e6e3      	b.n	35f60 <__aeabi_dmul+0x184>
   36198:	2501      	movs	r5, #1
   3619a:	08db      	lsrs	r3, r3, #3
   3619c:	0762      	lsls	r2, r4, #29
   3619e:	431a      	orrs	r2, r3
   361a0:	0264      	lsls	r4, r4, #9
   361a2:	9b01      	ldr	r3, [sp, #4]
   361a4:	4691      	mov	r9, r2
   361a6:	0b22      	lsrs	r2, r4, #12
   361a8:	0544      	lsls	r4, r0, #21
   361aa:	0d64      	lsrs	r4, r4, #21
   361ac:	401d      	ands	r5, r3
   361ae:	e67c      	b.n	35eaa <__aeabi_dmul+0xce>
   361b0:	2280      	movs	r2, #128	; 0x80
   361b2:	4659      	mov	r1, fp
   361b4:	0312      	lsls	r2, r2, #12
   361b6:	4211      	tst	r1, r2
   361b8:	d008      	beq.n	361cc <__aeabi_dmul+0x3f0>
   361ba:	4214      	tst	r4, r2
   361bc:	d106      	bne.n	361cc <__aeabi_dmul+0x3f0>
   361be:	4322      	orrs	r2, r4
   361c0:	0312      	lsls	r2, r2, #12
   361c2:	0b12      	lsrs	r2, r2, #12
   361c4:	4645      	mov	r5, r8
   361c6:	4699      	mov	r9, r3
   361c8:	4c43      	ldr	r4, [pc, #268]	; (362d8 <__aeabi_dmul+0x4fc>)
   361ca:	e66e      	b.n	35eaa <__aeabi_dmul+0xce>
   361cc:	465b      	mov	r3, fp
   361ce:	431a      	orrs	r2, r3
   361d0:	0312      	lsls	r2, r2, #12
   361d2:	0b12      	lsrs	r2, r2, #12
   361d4:	4c40      	ldr	r4, [pc, #256]	; (362d8 <__aeabi_dmul+0x4fc>)
   361d6:	e668      	b.n	35eaa <__aeabi_dmul+0xce>
   361d8:	0003      	movs	r3, r0
   361da:	4654      	mov	r4, sl
   361dc:	3b28      	subs	r3, #40	; 0x28
   361de:	409c      	lsls	r4, r3
   361e0:	2300      	movs	r3, #0
   361e2:	e6b9      	b.n	35f58 <__aeabi_dmul+0x17c>
   361e4:	f000 fbfc 	bl	369e0 <__clzsi2>
   361e8:	3020      	adds	r0, #32
   361ea:	e6a6      	b.n	35f3a <__aeabi_dmul+0x15e>
   361ec:	0003      	movs	r3, r0
   361ee:	3b28      	subs	r3, #40	; 0x28
   361f0:	409f      	lsls	r7, r3
   361f2:	2300      	movs	r3, #0
   361f4:	46bb      	mov	fp, r7
   361f6:	4699      	mov	r9, r3
   361f8:	e68a      	b.n	35f10 <__aeabi_dmul+0x134>
   361fa:	f000 fbf1 	bl	369e0 <__clzsi2>
   361fe:	3020      	adds	r0, #32
   36200:	e674      	b.n	35eec <__aeabi_dmul+0x110>
   36202:	46b4      	mov	ip, r6
   36204:	e7ad      	b.n	36162 <__aeabi_dmul+0x386>
   36206:	2501      	movs	r5, #1
   36208:	1a2a      	subs	r2, r5, r0
   3620a:	2a38      	cmp	r2, #56	; 0x38
   3620c:	dd06      	ble.n	3621c <__aeabi_dmul+0x440>
   3620e:	9b01      	ldr	r3, [sp, #4]
   36210:	2400      	movs	r4, #0
   36212:	401d      	ands	r5, r3
   36214:	2300      	movs	r3, #0
   36216:	2200      	movs	r2, #0
   36218:	4699      	mov	r9, r3
   3621a:	e646      	b.n	35eaa <__aeabi_dmul+0xce>
   3621c:	2a1f      	cmp	r2, #31
   3621e:	dc21      	bgt.n	36264 <__aeabi_dmul+0x488>
   36220:	2520      	movs	r5, #32
   36222:	0020      	movs	r0, r4
   36224:	1aad      	subs	r5, r5, r2
   36226:	001e      	movs	r6, r3
   36228:	40ab      	lsls	r3, r5
   3622a:	40a8      	lsls	r0, r5
   3622c:	40d6      	lsrs	r6, r2
   3622e:	1e5d      	subs	r5, r3, #1
   36230:	41ab      	sbcs	r3, r5
   36232:	4330      	orrs	r0, r6
   36234:	4318      	orrs	r0, r3
   36236:	40d4      	lsrs	r4, r2
   36238:	0743      	lsls	r3, r0, #29
   3623a:	d009      	beq.n	36250 <__aeabi_dmul+0x474>
   3623c:	230f      	movs	r3, #15
   3623e:	4003      	ands	r3, r0
   36240:	2b04      	cmp	r3, #4
   36242:	d005      	beq.n	36250 <__aeabi_dmul+0x474>
   36244:	0003      	movs	r3, r0
   36246:	1d18      	adds	r0, r3, #4
   36248:	4298      	cmp	r0, r3
   3624a:	419b      	sbcs	r3, r3
   3624c:	425b      	negs	r3, r3
   3624e:	18e4      	adds	r4, r4, r3
   36250:	0223      	lsls	r3, r4, #8
   36252:	d521      	bpl.n	36298 <__aeabi_dmul+0x4bc>
   36254:	2501      	movs	r5, #1
   36256:	9b01      	ldr	r3, [sp, #4]
   36258:	2401      	movs	r4, #1
   3625a:	401d      	ands	r5, r3
   3625c:	2300      	movs	r3, #0
   3625e:	2200      	movs	r2, #0
   36260:	4699      	mov	r9, r3
   36262:	e622      	b.n	35eaa <__aeabi_dmul+0xce>
   36264:	251f      	movs	r5, #31
   36266:	0021      	movs	r1, r4
   36268:	426d      	negs	r5, r5
   3626a:	1a28      	subs	r0, r5, r0
   3626c:	40c1      	lsrs	r1, r0
   3626e:	0008      	movs	r0, r1
   36270:	2a20      	cmp	r2, #32
   36272:	d01d      	beq.n	362b0 <__aeabi_dmul+0x4d4>
   36274:	355f      	adds	r5, #95	; 0x5f
   36276:	1aaa      	subs	r2, r5, r2
   36278:	4094      	lsls	r4, r2
   3627a:	4323      	orrs	r3, r4
   3627c:	1e5c      	subs	r4, r3, #1
   3627e:	41a3      	sbcs	r3, r4
   36280:	2507      	movs	r5, #7
   36282:	4303      	orrs	r3, r0
   36284:	401d      	ands	r5, r3
   36286:	2200      	movs	r2, #0
   36288:	2d00      	cmp	r5, #0
   3628a:	d009      	beq.n	362a0 <__aeabi_dmul+0x4c4>
   3628c:	220f      	movs	r2, #15
   3628e:	2400      	movs	r4, #0
   36290:	401a      	ands	r2, r3
   36292:	0018      	movs	r0, r3
   36294:	2a04      	cmp	r2, #4
   36296:	d1d6      	bne.n	36246 <__aeabi_dmul+0x46a>
   36298:	0003      	movs	r3, r0
   3629a:	0765      	lsls	r5, r4, #29
   3629c:	0264      	lsls	r4, r4, #9
   3629e:	0b22      	lsrs	r2, r4, #12
   362a0:	08db      	lsrs	r3, r3, #3
   362a2:	432b      	orrs	r3, r5
   362a4:	2501      	movs	r5, #1
   362a6:	4699      	mov	r9, r3
   362a8:	9b01      	ldr	r3, [sp, #4]
   362aa:	2400      	movs	r4, #0
   362ac:	401d      	ands	r5, r3
   362ae:	e5fc      	b.n	35eaa <__aeabi_dmul+0xce>
   362b0:	2400      	movs	r4, #0
   362b2:	e7e2      	b.n	3627a <__aeabi_dmul+0x49e>
   362b4:	2280      	movs	r2, #128	; 0x80
   362b6:	2501      	movs	r5, #1
   362b8:	0312      	lsls	r2, r2, #12
   362ba:	4322      	orrs	r2, r4
   362bc:	9901      	ldr	r1, [sp, #4]
   362be:	0312      	lsls	r2, r2, #12
   362c0:	0b12      	lsrs	r2, r2, #12
   362c2:	400d      	ands	r5, r1
   362c4:	4699      	mov	r9, r3
   362c6:	4c04      	ldr	r4, [pc, #16]	; (362d8 <__aeabi_dmul+0x4fc>)
   362c8:	e5ef      	b.n	35eaa <__aeabi_dmul+0xce>
   362ca:	46c0      	nop			; (mov r8, r8)
   362cc:	000003ff 	.word	0x000003ff
   362d0:	feffffff 	.word	0xfeffffff
   362d4:	000007fe 	.word	0x000007fe
   362d8:	000007ff 	.word	0x000007ff

000362dc <__aeabi_dsub>:
   362dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   362de:	4646      	mov	r6, r8
   362e0:	46d6      	mov	lr, sl
   362e2:	464f      	mov	r7, r9
   362e4:	030c      	lsls	r4, r1, #12
   362e6:	b5c0      	push	{r6, r7, lr}
   362e8:	0fcd      	lsrs	r5, r1, #31
   362ea:	004e      	lsls	r6, r1, #1
   362ec:	0a61      	lsrs	r1, r4, #9
   362ee:	0f44      	lsrs	r4, r0, #29
   362f0:	430c      	orrs	r4, r1
   362f2:	00c1      	lsls	r1, r0, #3
   362f4:	0058      	lsls	r0, r3, #1
   362f6:	0d40      	lsrs	r0, r0, #21
   362f8:	4684      	mov	ip, r0
   362fa:	468a      	mov	sl, r1
   362fc:	000f      	movs	r7, r1
   362fe:	0319      	lsls	r1, r3, #12
   36300:	0f50      	lsrs	r0, r2, #29
   36302:	0a49      	lsrs	r1, r1, #9
   36304:	4301      	orrs	r1, r0
   36306:	48c6      	ldr	r0, [pc, #792]	; (36620 <__aeabi_dsub+0x344>)
   36308:	0d76      	lsrs	r6, r6, #21
   3630a:	46a8      	mov	r8, r5
   3630c:	0fdb      	lsrs	r3, r3, #31
   3630e:	00d2      	lsls	r2, r2, #3
   36310:	4584      	cmp	ip, r0
   36312:	d100      	bne.n	36316 <__aeabi_dsub+0x3a>
   36314:	e0d8      	b.n	364c8 <__aeabi_dsub+0x1ec>
   36316:	2001      	movs	r0, #1
   36318:	4043      	eors	r3, r0
   3631a:	42ab      	cmp	r3, r5
   3631c:	d100      	bne.n	36320 <__aeabi_dsub+0x44>
   3631e:	e0a6      	b.n	3646e <__aeabi_dsub+0x192>
   36320:	4660      	mov	r0, ip
   36322:	1a35      	subs	r5, r6, r0
   36324:	2d00      	cmp	r5, #0
   36326:	dc00      	bgt.n	3632a <__aeabi_dsub+0x4e>
   36328:	e105      	b.n	36536 <__aeabi_dsub+0x25a>
   3632a:	2800      	cmp	r0, #0
   3632c:	d110      	bne.n	36350 <__aeabi_dsub+0x74>
   3632e:	000b      	movs	r3, r1
   36330:	4313      	orrs	r3, r2
   36332:	d100      	bne.n	36336 <__aeabi_dsub+0x5a>
   36334:	e0d7      	b.n	364e6 <__aeabi_dsub+0x20a>
   36336:	1e6b      	subs	r3, r5, #1
   36338:	2b00      	cmp	r3, #0
   3633a:	d000      	beq.n	3633e <__aeabi_dsub+0x62>
   3633c:	e14b      	b.n	365d6 <__aeabi_dsub+0x2fa>
   3633e:	4653      	mov	r3, sl
   36340:	1a9f      	subs	r7, r3, r2
   36342:	45ba      	cmp	sl, r7
   36344:	4180      	sbcs	r0, r0
   36346:	1a64      	subs	r4, r4, r1
   36348:	4240      	negs	r0, r0
   3634a:	1a24      	subs	r4, r4, r0
   3634c:	2601      	movs	r6, #1
   3634e:	e01e      	b.n	3638e <__aeabi_dsub+0xb2>
   36350:	4bb3      	ldr	r3, [pc, #716]	; (36620 <__aeabi_dsub+0x344>)
   36352:	429e      	cmp	r6, r3
   36354:	d048      	beq.n	363e8 <__aeabi_dsub+0x10c>
   36356:	2380      	movs	r3, #128	; 0x80
   36358:	041b      	lsls	r3, r3, #16
   3635a:	4319      	orrs	r1, r3
   3635c:	2d38      	cmp	r5, #56	; 0x38
   3635e:	dd00      	ble.n	36362 <__aeabi_dsub+0x86>
   36360:	e119      	b.n	36596 <__aeabi_dsub+0x2ba>
   36362:	2d1f      	cmp	r5, #31
   36364:	dd00      	ble.n	36368 <__aeabi_dsub+0x8c>
   36366:	e14c      	b.n	36602 <__aeabi_dsub+0x326>
   36368:	2320      	movs	r3, #32
   3636a:	000f      	movs	r7, r1
   3636c:	1b5b      	subs	r3, r3, r5
   3636e:	0010      	movs	r0, r2
   36370:	409a      	lsls	r2, r3
   36372:	409f      	lsls	r7, r3
   36374:	40e8      	lsrs	r0, r5
   36376:	1e53      	subs	r3, r2, #1
   36378:	419a      	sbcs	r2, r3
   3637a:	40e9      	lsrs	r1, r5
   3637c:	4307      	orrs	r7, r0
   3637e:	4317      	orrs	r7, r2
   36380:	4653      	mov	r3, sl
   36382:	1bdf      	subs	r7, r3, r7
   36384:	1a61      	subs	r1, r4, r1
   36386:	45ba      	cmp	sl, r7
   36388:	41a4      	sbcs	r4, r4
   3638a:	4264      	negs	r4, r4
   3638c:	1b0c      	subs	r4, r1, r4
   3638e:	0223      	lsls	r3, r4, #8
   36390:	d400      	bmi.n	36394 <__aeabi_dsub+0xb8>
   36392:	e0c5      	b.n	36520 <__aeabi_dsub+0x244>
   36394:	0264      	lsls	r4, r4, #9
   36396:	0a65      	lsrs	r5, r4, #9
   36398:	2d00      	cmp	r5, #0
   3639a:	d100      	bne.n	3639e <__aeabi_dsub+0xc2>
   3639c:	e0f6      	b.n	3658c <__aeabi_dsub+0x2b0>
   3639e:	0028      	movs	r0, r5
   363a0:	f000 fb1e 	bl	369e0 <__clzsi2>
   363a4:	0003      	movs	r3, r0
   363a6:	3b08      	subs	r3, #8
   363a8:	2b1f      	cmp	r3, #31
   363aa:	dd00      	ble.n	363ae <__aeabi_dsub+0xd2>
   363ac:	e0e9      	b.n	36582 <__aeabi_dsub+0x2a6>
   363ae:	2220      	movs	r2, #32
   363b0:	003c      	movs	r4, r7
   363b2:	1ad2      	subs	r2, r2, r3
   363b4:	409d      	lsls	r5, r3
   363b6:	40d4      	lsrs	r4, r2
   363b8:	409f      	lsls	r7, r3
   363ba:	4325      	orrs	r5, r4
   363bc:	429e      	cmp	r6, r3
   363be:	dd00      	ble.n	363c2 <__aeabi_dsub+0xe6>
   363c0:	e0db      	b.n	3657a <__aeabi_dsub+0x29e>
   363c2:	1b9e      	subs	r6, r3, r6
   363c4:	1c73      	adds	r3, r6, #1
   363c6:	2b1f      	cmp	r3, #31
   363c8:	dd00      	ble.n	363cc <__aeabi_dsub+0xf0>
   363ca:	e10a      	b.n	365e2 <__aeabi_dsub+0x306>
   363cc:	2220      	movs	r2, #32
   363ce:	0038      	movs	r0, r7
   363d0:	1ad2      	subs	r2, r2, r3
   363d2:	0029      	movs	r1, r5
   363d4:	4097      	lsls	r7, r2
   363d6:	002c      	movs	r4, r5
   363d8:	4091      	lsls	r1, r2
   363da:	40d8      	lsrs	r0, r3
   363dc:	1e7a      	subs	r2, r7, #1
   363de:	4197      	sbcs	r7, r2
   363e0:	40dc      	lsrs	r4, r3
   363e2:	2600      	movs	r6, #0
   363e4:	4301      	orrs	r1, r0
   363e6:	430f      	orrs	r7, r1
   363e8:	077b      	lsls	r3, r7, #29
   363ea:	d009      	beq.n	36400 <__aeabi_dsub+0x124>
   363ec:	230f      	movs	r3, #15
   363ee:	403b      	ands	r3, r7
   363f0:	2b04      	cmp	r3, #4
   363f2:	d005      	beq.n	36400 <__aeabi_dsub+0x124>
   363f4:	1d3b      	adds	r3, r7, #4
   363f6:	42bb      	cmp	r3, r7
   363f8:	41bf      	sbcs	r7, r7
   363fa:	427f      	negs	r7, r7
   363fc:	19e4      	adds	r4, r4, r7
   363fe:	001f      	movs	r7, r3
   36400:	0223      	lsls	r3, r4, #8
   36402:	d525      	bpl.n	36450 <__aeabi_dsub+0x174>
   36404:	4b86      	ldr	r3, [pc, #536]	; (36620 <__aeabi_dsub+0x344>)
   36406:	3601      	adds	r6, #1
   36408:	429e      	cmp	r6, r3
   3640a:	d100      	bne.n	3640e <__aeabi_dsub+0x132>
   3640c:	e0af      	b.n	3656e <__aeabi_dsub+0x292>
   3640e:	4b85      	ldr	r3, [pc, #532]	; (36624 <__aeabi_dsub+0x348>)
   36410:	2501      	movs	r5, #1
   36412:	401c      	ands	r4, r3
   36414:	4643      	mov	r3, r8
   36416:	0762      	lsls	r2, r4, #29
   36418:	08ff      	lsrs	r7, r7, #3
   3641a:	0264      	lsls	r4, r4, #9
   3641c:	0576      	lsls	r6, r6, #21
   3641e:	4317      	orrs	r7, r2
   36420:	0b24      	lsrs	r4, r4, #12
   36422:	0d76      	lsrs	r6, r6, #21
   36424:	401d      	ands	r5, r3
   36426:	2100      	movs	r1, #0
   36428:	0324      	lsls	r4, r4, #12
   3642a:	0b23      	lsrs	r3, r4, #12
   3642c:	0d0c      	lsrs	r4, r1, #20
   3642e:	4a7e      	ldr	r2, [pc, #504]	; (36628 <__aeabi_dsub+0x34c>)
   36430:	0524      	lsls	r4, r4, #20
   36432:	431c      	orrs	r4, r3
   36434:	4014      	ands	r4, r2
   36436:	0533      	lsls	r3, r6, #20
   36438:	4323      	orrs	r3, r4
   3643a:	005b      	lsls	r3, r3, #1
   3643c:	07ed      	lsls	r5, r5, #31
   3643e:	085b      	lsrs	r3, r3, #1
   36440:	432b      	orrs	r3, r5
   36442:	0038      	movs	r0, r7
   36444:	0019      	movs	r1, r3
   36446:	bc1c      	pop	{r2, r3, r4}
   36448:	4690      	mov	r8, r2
   3644a:	4699      	mov	r9, r3
   3644c:	46a2      	mov	sl, r4
   3644e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36450:	2501      	movs	r5, #1
   36452:	4643      	mov	r3, r8
   36454:	0762      	lsls	r2, r4, #29
   36456:	08ff      	lsrs	r7, r7, #3
   36458:	4317      	orrs	r7, r2
   3645a:	08e4      	lsrs	r4, r4, #3
   3645c:	401d      	ands	r5, r3
   3645e:	4b70      	ldr	r3, [pc, #448]	; (36620 <__aeabi_dsub+0x344>)
   36460:	429e      	cmp	r6, r3
   36462:	d036      	beq.n	364d2 <__aeabi_dsub+0x1f6>
   36464:	0324      	lsls	r4, r4, #12
   36466:	0576      	lsls	r6, r6, #21
   36468:	0b24      	lsrs	r4, r4, #12
   3646a:	0d76      	lsrs	r6, r6, #21
   3646c:	e7db      	b.n	36426 <__aeabi_dsub+0x14a>
   3646e:	4663      	mov	r3, ip
   36470:	1af3      	subs	r3, r6, r3
   36472:	2b00      	cmp	r3, #0
   36474:	dc00      	bgt.n	36478 <__aeabi_dsub+0x19c>
   36476:	e094      	b.n	365a2 <__aeabi_dsub+0x2c6>
   36478:	4660      	mov	r0, ip
   3647a:	2800      	cmp	r0, #0
   3647c:	d035      	beq.n	364ea <__aeabi_dsub+0x20e>
   3647e:	4868      	ldr	r0, [pc, #416]	; (36620 <__aeabi_dsub+0x344>)
   36480:	4286      	cmp	r6, r0
   36482:	d0b1      	beq.n	363e8 <__aeabi_dsub+0x10c>
   36484:	2780      	movs	r7, #128	; 0x80
   36486:	043f      	lsls	r7, r7, #16
   36488:	4339      	orrs	r1, r7
   3648a:	2b38      	cmp	r3, #56	; 0x38
   3648c:	dc00      	bgt.n	36490 <__aeabi_dsub+0x1b4>
   3648e:	e0fd      	b.n	3668c <__aeabi_dsub+0x3b0>
   36490:	430a      	orrs	r2, r1
   36492:	0017      	movs	r7, r2
   36494:	2100      	movs	r1, #0
   36496:	1e7a      	subs	r2, r7, #1
   36498:	4197      	sbcs	r7, r2
   3649a:	4457      	add	r7, sl
   3649c:	4557      	cmp	r7, sl
   3649e:	4180      	sbcs	r0, r0
   364a0:	1909      	adds	r1, r1, r4
   364a2:	4244      	negs	r4, r0
   364a4:	190c      	adds	r4, r1, r4
   364a6:	0223      	lsls	r3, r4, #8
   364a8:	d53a      	bpl.n	36520 <__aeabi_dsub+0x244>
   364aa:	4b5d      	ldr	r3, [pc, #372]	; (36620 <__aeabi_dsub+0x344>)
   364ac:	3601      	adds	r6, #1
   364ae:	429e      	cmp	r6, r3
   364b0:	d100      	bne.n	364b4 <__aeabi_dsub+0x1d8>
   364b2:	e14b      	b.n	3674c <__aeabi_dsub+0x470>
   364b4:	2201      	movs	r2, #1
   364b6:	4b5b      	ldr	r3, [pc, #364]	; (36624 <__aeabi_dsub+0x348>)
   364b8:	401c      	ands	r4, r3
   364ba:	087b      	lsrs	r3, r7, #1
   364bc:	4017      	ands	r7, r2
   364be:	431f      	orrs	r7, r3
   364c0:	07e2      	lsls	r2, r4, #31
   364c2:	4317      	orrs	r7, r2
   364c4:	0864      	lsrs	r4, r4, #1
   364c6:	e78f      	b.n	363e8 <__aeabi_dsub+0x10c>
   364c8:	0008      	movs	r0, r1
   364ca:	4310      	orrs	r0, r2
   364cc:	d000      	beq.n	364d0 <__aeabi_dsub+0x1f4>
   364ce:	e724      	b.n	3631a <__aeabi_dsub+0x3e>
   364d0:	e721      	b.n	36316 <__aeabi_dsub+0x3a>
   364d2:	0023      	movs	r3, r4
   364d4:	433b      	orrs	r3, r7
   364d6:	d100      	bne.n	364da <__aeabi_dsub+0x1fe>
   364d8:	e1b9      	b.n	3684e <__aeabi_dsub+0x572>
   364da:	2280      	movs	r2, #128	; 0x80
   364dc:	0312      	lsls	r2, r2, #12
   364de:	4314      	orrs	r4, r2
   364e0:	0324      	lsls	r4, r4, #12
   364e2:	0b24      	lsrs	r4, r4, #12
   364e4:	e79f      	b.n	36426 <__aeabi_dsub+0x14a>
   364e6:	002e      	movs	r6, r5
   364e8:	e77e      	b.n	363e8 <__aeabi_dsub+0x10c>
   364ea:	0008      	movs	r0, r1
   364ec:	4310      	orrs	r0, r2
   364ee:	d100      	bne.n	364f2 <__aeabi_dsub+0x216>
   364f0:	e0ca      	b.n	36688 <__aeabi_dsub+0x3ac>
   364f2:	1e58      	subs	r0, r3, #1
   364f4:	4684      	mov	ip, r0
   364f6:	2800      	cmp	r0, #0
   364f8:	d000      	beq.n	364fc <__aeabi_dsub+0x220>
   364fa:	e0e7      	b.n	366cc <__aeabi_dsub+0x3f0>
   364fc:	4452      	add	r2, sl
   364fe:	4552      	cmp	r2, sl
   36500:	4180      	sbcs	r0, r0
   36502:	1864      	adds	r4, r4, r1
   36504:	4240      	negs	r0, r0
   36506:	1824      	adds	r4, r4, r0
   36508:	0017      	movs	r7, r2
   3650a:	2601      	movs	r6, #1
   3650c:	0223      	lsls	r3, r4, #8
   3650e:	d507      	bpl.n	36520 <__aeabi_dsub+0x244>
   36510:	2602      	movs	r6, #2
   36512:	e7cf      	b.n	364b4 <__aeabi_dsub+0x1d8>
   36514:	4664      	mov	r4, ip
   36516:	432c      	orrs	r4, r5
   36518:	d100      	bne.n	3651c <__aeabi_dsub+0x240>
   3651a:	e1b3      	b.n	36884 <__aeabi_dsub+0x5a8>
   3651c:	002c      	movs	r4, r5
   3651e:	4667      	mov	r7, ip
   36520:	077b      	lsls	r3, r7, #29
   36522:	d000      	beq.n	36526 <__aeabi_dsub+0x24a>
   36524:	e762      	b.n	363ec <__aeabi_dsub+0x110>
   36526:	0763      	lsls	r3, r4, #29
   36528:	08ff      	lsrs	r7, r7, #3
   3652a:	431f      	orrs	r7, r3
   3652c:	2501      	movs	r5, #1
   3652e:	4643      	mov	r3, r8
   36530:	08e4      	lsrs	r4, r4, #3
   36532:	401d      	ands	r5, r3
   36534:	e793      	b.n	3645e <__aeabi_dsub+0x182>
   36536:	2d00      	cmp	r5, #0
   36538:	d178      	bne.n	3662c <__aeabi_dsub+0x350>
   3653a:	1c75      	adds	r5, r6, #1
   3653c:	056d      	lsls	r5, r5, #21
   3653e:	0d6d      	lsrs	r5, r5, #21
   36540:	2d01      	cmp	r5, #1
   36542:	dc00      	bgt.n	36546 <__aeabi_dsub+0x26a>
   36544:	e0f2      	b.n	3672c <__aeabi_dsub+0x450>
   36546:	4650      	mov	r0, sl
   36548:	1a80      	subs	r0, r0, r2
   3654a:	4582      	cmp	sl, r0
   3654c:	41bf      	sbcs	r7, r7
   3654e:	1a65      	subs	r5, r4, r1
   36550:	427f      	negs	r7, r7
   36552:	1bed      	subs	r5, r5, r7
   36554:	4684      	mov	ip, r0
   36556:	0228      	lsls	r0, r5, #8
   36558:	d400      	bmi.n	3655c <__aeabi_dsub+0x280>
   3655a:	e08c      	b.n	36676 <__aeabi_dsub+0x39a>
   3655c:	4650      	mov	r0, sl
   3655e:	1a17      	subs	r7, r2, r0
   36560:	42ba      	cmp	r2, r7
   36562:	4192      	sbcs	r2, r2
   36564:	1b0c      	subs	r4, r1, r4
   36566:	4255      	negs	r5, r2
   36568:	1b65      	subs	r5, r4, r5
   3656a:	4698      	mov	r8, r3
   3656c:	e714      	b.n	36398 <__aeabi_dsub+0xbc>
   3656e:	2501      	movs	r5, #1
   36570:	4643      	mov	r3, r8
   36572:	2400      	movs	r4, #0
   36574:	401d      	ands	r5, r3
   36576:	2700      	movs	r7, #0
   36578:	e755      	b.n	36426 <__aeabi_dsub+0x14a>
   3657a:	4c2a      	ldr	r4, [pc, #168]	; (36624 <__aeabi_dsub+0x348>)
   3657c:	1af6      	subs	r6, r6, r3
   3657e:	402c      	ands	r4, r5
   36580:	e732      	b.n	363e8 <__aeabi_dsub+0x10c>
   36582:	003d      	movs	r5, r7
   36584:	3828      	subs	r0, #40	; 0x28
   36586:	4085      	lsls	r5, r0
   36588:	2700      	movs	r7, #0
   3658a:	e717      	b.n	363bc <__aeabi_dsub+0xe0>
   3658c:	0038      	movs	r0, r7
   3658e:	f000 fa27 	bl	369e0 <__clzsi2>
   36592:	3020      	adds	r0, #32
   36594:	e706      	b.n	363a4 <__aeabi_dsub+0xc8>
   36596:	430a      	orrs	r2, r1
   36598:	0017      	movs	r7, r2
   3659a:	2100      	movs	r1, #0
   3659c:	1e7a      	subs	r2, r7, #1
   3659e:	4197      	sbcs	r7, r2
   365a0:	e6ee      	b.n	36380 <__aeabi_dsub+0xa4>
   365a2:	2b00      	cmp	r3, #0
   365a4:	d000      	beq.n	365a8 <__aeabi_dsub+0x2cc>
   365a6:	e0e5      	b.n	36774 <__aeabi_dsub+0x498>
   365a8:	1c73      	adds	r3, r6, #1
   365aa:	469c      	mov	ip, r3
   365ac:	055b      	lsls	r3, r3, #21
   365ae:	0d5b      	lsrs	r3, r3, #21
   365b0:	2b01      	cmp	r3, #1
   365b2:	dc00      	bgt.n	365b6 <__aeabi_dsub+0x2da>
   365b4:	e09f      	b.n	366f6 <__aeabi_dsub+0x41a>
   365b6:	4b1a      	ldr	r3, [pc, #104]	; (36620 <__aeabi_dsub+0x344>)
   365b8:	459c      	cmp	ip, r3
   365ba:	d100      	bne.n	365be <__aeabi_dsub+0x2e2>
   365bc:	e0c5      	b.n	3674a <__aeabi_dsub+0x46e>
   365be:	4452      	add	r2, sl
   365c0:	4552      	cmp	r2, sl
   365c2:	4180      	sbcs	r0, r0
   365c4:	1864      	adds	r4, r4, r1
   365c6:	4240      	negs	r0, r0
   365c8:	1824      	adds	r4, r4, r0
   365ca:	07e7      	lsls	r7, r4, #31
   365cc:	0852      	lsrs	r2, r2, #1
   365ce:	4317      	orrs	r7, r2
   365d0:	0864      	lsrs	r4, r4, #1
   365d2:	4666      	mov	r6, ip
   365d4:	e708      	b.n	363e8 <__aeabi_dsub+0x10c>
   365d6:	4812      	ldr	r0, [pc, #72]	; (36620 <__aeabi_dsub+0x344>)
   365d8:	4285      	cmp	r5, r0
   365da:	d100      	bne.n	365de <__aeabi_dsub+0x302>
   365dc:	e085      	b.n	366ea <__aeabi_dsub+0x40e>
   365de:	001d      	movs	r5, r3
   365e0:	e6bc      	b.n	3635c <__aeabi_dsub+0x80>
   365e2:	0029      	movs	r1, r5
   365e4:	3e1f      	subs	r6, #31
   365e6:	40f1      	lsrs	r1, r6
   365e8:	2b20      	cmp	r3, #32
   365ea:	d100      	bne.n	365ee <__aeabi_dsub+0x312>
   365ec:	e07f      	b.n	366ee <__aeabi_dsub+0x412>
   365ee:	2240      	movs	r2, #64	; 0x40
   365f0:	1ad3      	subs	r3, r2, r3
   365f2:	409d      	lsls	r5, r3
   365f4:	432f      	orrs	r7, r5
   365f6:	1e7d      	subs	r5, r7, #1
   365f8:	41af      	sbcs	r7, r5
   365fa:	2400      	movs	r4, #0
   365fc:	430f      	orrs	r7, r1
   365fe:	2600      	movs	r6, #0
   36600:	e78e      	b.n	36520 <__aeabi_dsub+0x244>
   36602:	002b      	movs	r3, r5
   36604:	000f      	movs	r7, r1
   36606:	3b20      	subs	r3, #32
   36608:	40df      	lsrs	r7, r3
   3660a:	2d20      	cmp	r5, #32
   3660c:	d071      	beq.n	366f2 <__aeabi_dsub+0x416>
   3660e:	2340      	movs	r3, #64	; 0x40
   36610:	1b5d      	subs	r5, r3, r5
   36612:	40a9      	lsls	r1, r5
   36614:	430a      	orrs	r2, r1
   36616:	1e51      	subs	r1, r2, #1
   36618:	418a      	sbcs	r2, r1
   3661a:	2100      	movs	r1, #0
   3661c:	4317      	orrs	r7, r2
   3661e:	e6af      	b.n	36380 <__aeabi_dsub+0xa4>
   36620:	000007ff 	.word	0x000007ff
   36624:	ff7fffff 	.word	0xff7fffff
   36628:	800fffff 	.word	0x800fffff
   3662c:	2e00      	cmp	r6, #0
   3662e:	d03e      	beq.n	366ae <__aeabi_dsub+0x3d2>
   36630:	4eb3      	ldr	r6, [pc, #716]	; (36900 <__aeabi_dsub+0x624>)
   36632:	45b4      	cmp	ip, r6
   36634:	d045      	beq.n	366c2 <__aeabi_dsub+0x3e6>
   36636:	2680      	movs	r6, #128	; 0x80
   36638:	0436      	lsls	r6, r6, #16
   3663a:	426d      	negs	r5, r5
   3663c:	4334      	orrs	r4, r6
   3663e:	2d38      	cmp	r5, #56	; 0x38
   36640:	dd00      	ble.n	36644 <__aeabi_dsub+0x368>
   36642:	e0a8      	b.n	36796 <__aeabi_dsub+0x4ba>
   36644:	2d1f      	cmp	r5, #31
   36646:	dd00      	ble.n	3664a <__aeabi_dsub+0x36e>
   36648:	e11f      	b.n	3688a <__aeabi_dsub+0x5ae>
   3664a:	2620      	movs	r6, #32
   3664c:	0027      	movs	r7, r4
   3664e:	4650      	mov	r0, sl
   36650:	1b76      	subs	r6, r6, r5
   36652:	40b7      	lsls	r7, r6
   36654:	40e8      	lsrs	r0, r5
   36656:	4307      	orrs	r7, r0
   36658:	4650      	mov	r0, sl
   3665a:	40b0      	lsls	r0, r6
   3665c:	1e46      	subs	r6, r0, #1
   3665e:	41b0      	sbcs	r0, r6
   36660:	40ec      	lsrs	r4, r5
   36662:	4338      	orrs	r0, r7
   36664:	1a17      	subs	r7, r2, r0
   36666:	42ba      	cmp	r2, r7
   36668:	4192      	sbcs	r2, r2
   3666a:	1b0c      	subs	r4, r1, r4
   3666c:	4252      	negs	r2, r2
   3666e:	1aa4      	subs	r4, r4, r2
   36670:	4666      	mov	r6, ip
   36672:	4698      	mov	r8, r3
   36674:	e68b      	b.n	3638e <__aeabi_dsub+0xb2>
   36676:	4664      	mov	r4, ip
   36678:	4667      	mov	r7, ip
   3667a:	432c      	orrs	r4, r5
   3667c:	d000      	beq.n	36680 <__aeabi_dsub+0x3a4>
   3667e:	e68b      	b.n	36398 <__aeabi_dsub+0xbc>
   36680:	2500      	movs	r5, #0
   36682:	2600      	movs	r6, #0
   36684:	2700      	movs	r7, #0
   36686:	e6ea      	b.n	3645e <__aeabi_dsub+0x182>
   36688:	001e      	movs	r6, r3
   3668a:	e6ad      	b.n	363e8 <__aeabi_dsub+0x10c>
   3668c:	2b1f      	cmp	r3, #31
   3668e:	dc60      	bgt.n	36752 <__aeabi_dsub+0x476>
   36690:	2720      	movs	r7, #32
   36692:	1af8      	subs	r0, r7, r3
   36694:	000f      	movs	r7, r1
   36696:	4684      	mov	ip, r0
   36698:	4087      	lsls	r7, r0
   3669a:	0010      	movs	r0, r2
   3669c:	40d8      	lsrs	r0, r3
   3669e:	4307      	orrs	r7, r0
   366a0:	4660      	mov	r0, ip
   366a2:	4082      	lsls	r2, r0
   366a4:	1e50      	subs	r0, r2, #1
   366a6:	4182      	sbcs	r2, r0
   366a8:	40d9      	lsrs	r1, r3
   366aa:	4317      	orrs	r7, r2
   366ac:	e6f5      	b.n	3649a <__aeabi_dsub+0x1be>
   366ae:	0026      	movs	r6, r4
   366b0:	4650      	mov	r0, sl
   366b2:	4306      	orrs	r6, r0
   366b4:	d005      	beq.n	366c2 <__aeabi_dsub+0x3e6>
   366b6:	43ed      	mvns	r5, r5
   366b8:	2d00      	cmp	r5, #0
   366ba:	d0d3      	beq.n	36664 <__aeabi_dsub+0x388>
   366bc:	4e90      	ldr	r6, [pc, #576]	; (36900 <__aeabi_dsub+0x624>)
   366be:	45b4      	cmp	ip, r6
   366c0:	d1bd      	bne.n	3663e <__aeabi_dsub+0x362>
   366c2:	000c      	movs	r4, r1
   366c4:	0017      	movs	r7, r2
   366c6:	4666      	mov	r6, ip
   366c8:	4698      	mov	r8, r3
   366ca:	e68d      	b.n	363e8 <__aeabi_dsub+0x10c>
   366cc:	488c      	ldr	r0, [pc, #560]	; (36900 <__aeabi_dsub+0x624>)
   366ce:	4283      	cmp	r3, r0
   366d0:	d00b      	beq.n	366ea <__aeabi_dsub+0x40e>
   366d2:	4663      	mov	r3, ip
   366d4:	e6d9      	b.n	3648a <__aeabi_dsub+0x1ae>
   366d6:	2d00      	cmp	r5, #0
   366d8:	d000      	beq.n	366dc <__aeabi_dsub+0x400>
   366da:	e096      	b.n	3680a <__aeabi_dsub+0x52e>
   366dc:	0008      	movs	r0, r1
   366de:	4310      	orrs	r0, r2
   366e0:	d100      	bne.n	366e4 <__aeabi_dsub+0x408>
   366e2:	e0e2      	b.n	368aa <__aeabi_dsub+0x5ce>
   366e4:	000c      	movs	r4, r1
   366e6:	0017      	movs	r7, r2
   366e8:	4698      	mov	r8, r3
   366ea:	4e85      	ldr	r6, [pc, #532]	; (36900 <__aeabi_dsub+0x624>)
   366ec:	e67c      	b.n	363e8 <__aeabi_dsub+0x10c>
   366ee:	2500      	movs	r5, #0
   366f0:	e780      	b.n	365f4 <__aeabi_dsub+0x318>
   366f2:	2100      	movs	r1, #0
   366f4:	e78e      	b.n	36614 <__aeabi_dsub+0x338>
   366f6:	0023      	movs	r3, r4
   366f8:	4650      	mov	r0, sl
   366fa:	4303      	orrs	r3, r0
   366fc:	2e00      	cmp	r6, #0
   366fe:	d000      	beq.n	36702 <__aeabi_dsub+0x426>
   36700:	e0a8      	b.n	36854 <__aeabi_dsub+0x578>
   36702:	2b00      	cmp	r3, #0
   36704:	d100      	bne.n	36708 <__aeabi_dsub+0x42c>
   36706:	e0de      	b.n	368c6 <__aeabi_dsub+0x5ea>
   36708:	000b      	movs	r3, r1
   3670a:	4313      	orrs	r3, r2
   3670c:	d100      	bne.n	36710 <__aeabi_dsub+0x434>
   3670e:	e66b      	b.n	363e8 <__aeabi_dsub+0x10c>
   36710:	4452      	add	r2, sl
   36712:	4552      	cmp	r2, sl
   36714:	4180      	sbcs	r0, r0
   36716:	1864      	adds	r4, r4, r1
   36718:	4240      	negs	r0, r0
   3671a:	1824      	adds	r4, r4, r0
   3671c:	0017      	movs	r7, r2
   3671e:	0223      	lsls	r3, r4, #8
   36720:	d400      	bmi.n	36724 <__aeabi_dsub+0x448>
   36722:	e6fd      	b.n	36520 <__aeabi_dsub+0x244>
   36724:	4b77      	ldr	r3, [pc, #476]	; (36904 <__aeabi_dsub+0x628>)
   36726:	4666      	mov	r6, ip
   36728:	401c      	ands	r4, r3
   3672a:	e65d      	b.n	363e8 <__aeabi_dsub+0x10c>
   3672c:	0025      	movs	r5, r4
   3672e:	4650      	mov	r0, sl
   36730:	4305      	orrs	r5, r0
   36732:	2e00      	cmp	r6, #0
   36734:	d1cf      	bne.n	366d6 <__aeabi_dsub+0x3fa>
   36736:	2d00      	cmp	r5, #0
   36738:	d14f      	bne.n	367da <__aeabi_dsub+0x4fe>
   3673a:	000c      	movs	r4, r1
   3673c:	4314      	orrs	r4, r2
   3673e:	d100      	bne.n	36742 <__aeabi_dsub+0x466>
   36740:	e0a0      	b.n	36884 <__aeabi_dsub+0x5a8>
   36742:	000c      	movs	r4, r1
   36744:	0017      	movs	r7, r2
   36746:	4698      	mov	r8, r3
   36748:	e64e      	b.n	363e8 <__aeabi_dsub+0x10c>
   3674a:	4666      	mov	r6, ip
   3674c:	2400      	movs	r4, #0
   3674e:	2700      	movs	r7, #0
   36750:	e685      	b.n	3645e <__aeabi_dsub+0x182>
   36752:	001f      	movs	r7, r3
   36754:	0008      	movs	r0, r1
   36756:	3f20      	subs	r7, #32
   36758:	40f8      	lsrs	r0, r7
   3675a:	0007      	movs	r7, r0
   3675c:	2b20      	cmp	r3, #32
   3675e:	d100      	bne.n	36762 <__aeabi_dsub+0x486>
   36760:	e08e      	b.n	36880 <__aeabi_dsub+0x5a4>
   36762:	2040      	movs	r0, #64	; 0x40
   36764:	1ac3      	subs	r3, r0, r3
   36766:	4099      	lsls	r1, r3
   36768:	430a      	orrs	r2, r1
   3676a:	1e51      	subs	r1, r2, #1
   3676c:	418a      	sbcs	r2, r1
   3676e:	2100      	movs	r1, #0
   36770:	4317      	orrs	r7, r2
   36772:	e692      	b.n	3649a <__aeabi_dsub+0x1be>
   36774:	2e00      	cmp	r6, #0
   36776:	d114      	bne.n	367a2 <__aeabi_dsub+0x4c6>
   36778:	0026      	movs	r6, r4
   3677a:	4650      	mov	r0, sl
   3677c:	4306      	orrs	r6, r0
   3677e:	d062      	beq.n	36846 <__aeabi_dsub+0x56a>
   36780:	43db      	mvns	r3, r3
   36782:	2b00      	cmp	r3, #0
   36784:	d15c      	bne.n	36840 <__aeabi_dsub+0x564>
   36786:	1887      	adds	r7, r0, r2
   36788:	4297      	cmp	r7, r2
   3678a:	4192      	sbcs	r2, r2
   3678c:	1864      	adds	r4, r4, r1
   3678e:	4252      	negs	r2, r2
   36790:	18a4      	adds	r4, r4, r2
   36792:	4666      	mov	r6, ip
   36794:	e687      	b.n	364a6 <__aeabi_dsub+0x1ca>
   36796:	4650      	mov	r0, sl
   36798:	4320      	orrs	r0, r4
   3679a:	1e44      	subs	r4, r0, #1
   3679c:	41a0      	sbcs	r0, r4
   3679e:	2400      	movs	r4, #0
   367a0:	e760      	b.n	36664 <__aeabi_dsub+0x388>
   367a2:	4e57      	ldr	r6, [pc, #348]	; (36900 <__aeabi_dsub+0x624>)
   367a4:	45b4      	cmp	ip, r6
   367a6:	d04e      	beq.n	36846 <__aeabi_dsub+0x56a>
   367a8:	2680      	movs	r6, #128	; 0x80
   367aa:	0436      	lsls	r6, r6, #16
   367ac:	425b      	negs	r3, r3
   367ae:	4334      	orrs	r4, r6
   367b0:	2b38      	cmp	r3, #56	; 0x38
   367b2:	dd00      	ble.n	367b6 <__aeabi_dsub+0x4da>
   367b4:	e07f      	b.n	368b6 <__aeabi_dsub+0x5da>
   367b6:	2b1f      	cmp	r3, #31
   367b8:	dd00      	ble.n	367bc <__aeabi_dsub+0x4e0>
   367ba:	e08b      	b.n	368d4 <__aeabi_dsub+0x5f8>
   367bc:	2620      	movs	r6, #32
   367be:	0027      	movs	r7, r4
   367c0:	4650      	mov	r0, sl
   367c2:	1af6      	subs	r6, r6, r3
   367c4:	40b7      	lsls	r7, r6
   367c6:	40d8      	lsrs	r0, r3
   367c8:	4307      	orrs	r7, r0
   367ca:	4650      	mov	r0, sl
   367cc:	40b0      	lsls	r0, r6
   367ce:	1e46      	subs	r6, r0, #1
   367d0:	41b0      	sbcs	r0, r6
   367d2:	4307      	orrs	r7, r0
   367d4:	40dc      	lsrs	r4, r3
   367d6:	18bf      	adds	r7, r7, r2
   367d8:	e7d6      	b.n	36788 <__aeabi_dsub+0x4ac>
   367da:	000d      	movs	r5, r1
   367dc:	4315      	orrs	r5, r2
   367de:	d100      	bne.n	367e2 <__aeabi_dsub+0x506>
   367e0:	e602      	b.n	363e8 <__aeabi_dsub+0x10c>
   367e2:	4650      	mov	r0, sl
   367e4:	1a80      	subs	r0, r0, r2
   367e6:	4582      	cmp	sl, r0
   367e8:	41bf      	sbcs	r7, r7
   367ea:	1a65      	subs	r5, r4, r1
   367ec:	427f      	negs	r7, r7
   367ee:	1bed      	subs	r5, r5, r7
   367f0:	4684      	mov	ip, r0
   367f2:	0228      	lsls	r0, r5, #8
   367f4:	d400      	bmi.n	367f8 <__aeabi_dsub+0x51c>
   367f6:	e68d      	b.n	36514 <__aeabi_dsub+0x238>
   367f8:	4650      	mov	r0, sl
   367fa:	1a17      	subs	r7, r2, r0
   367fc:	42ba      	cmp	r2, r7
   367fe:	4192      	sbcs	r2, r2
   36800:	1b0c      	subs	r4, r1, r4
   36802:	4252      	negs	r2, r2
   36804:	1aa4      	subs	r4, r4, r2
   36806:	4698      	mov	r8, r3
   36808:	e5ee      	b.n	363e8 <__aeabi_dsub+0x10c>
   3680a:	000d      	movs	r5, r1
   3680c:	4315      	orrs	r5, r2
   3680e:	d100      	bne.n	36812 <__aeabi_dsub+0x536>
   36810:	e76b      	b.n	366ea <__aeabi_dsub+0x40e>
   36812:	4650      	mov	r0, sl
   36814:	0767      	lsls	r7, r4, #29
   36816:	08c0      	lsrs	r0, r0, #3
   36818:	4307      	orrs	r7, r0
   3681a:	2080      	movs	r0, #128	; 0x80
   3681c:	08e4      	lsrs	r4, r4, #3
   3681e:	0300      	lsls	r0, r0, #12
   36820:	4204      	tst	r4, r0
   36822:	d007      	beq.n	36834 <__aeabi_dsub+0x558>
   36824:	08cd      	lsrs	r5, r1, #3
   36826:	4205      	tst	r5, r0
   36828:	d104      	bne.n	36834 <__aeabi_dsub+0x558>
   3682a:	002c      	movs	r4, r5
   3682c:	4698      	mov	r8, r3
   3682e:	08d7      	lsrs	r7, r2, #3
   36830:	0749      	lsls	r1, r1, #29
   36832:	430f      	orrs	r7, r1
   36834:	0f7b      	lsrs	r3, r7, #29
   36836:	00e4      	lsls	r4, r4, #3
   36838:	431c      	orrs	r4, r3
   3683a:	00ff      	lsls	r7, r7, #3
   3683c:	4e30      	ldr	r6, [pc, #192]	; (36900 <__aeabi_dsub+0x624>)
   3683e:	e5d3      	b.n	363e8 <__aeabi_dsub+0x10c>
   36840:	4e2f      	ldr	r6, [pc, #188]	; (36900 <__aeabi_dsub+0x624>)
   36842:	45b4      	cmp	ip, r6
   36844:	d1b4      	bne.n	367b0 <__aeabi_dsub+0x4d4>
   36846:	000c      	movs	r4, r1
   36848:	0017      	movs	r7, r2
   3684a:	4666      	mov	r6, ip
   3684c:	e5cc      	b.n	363e8 <__aeabi_dsub+0x10c>
   3684e:	2700      	movs	r7, #0
   36850:	2400      	movs	r4, #0
   36852:	e5e8      	b.n	36426 <__aeabi_dsub+0x14a>
   36854:	2b00      	cmp	r3, #0
   36856:	d039      	beq.n	368cc <__aeabi_dsub+0x5f0>
   36858:	000b      	movs	r3, r1
   3685a:	4313      	orrs	r3, r2
   3685c:	d100      	bne.n	36860 <__aeabi_dsub+0x584>
   3685e:	e744      	b.n	366ea <__aeabi_dsub+0x40e>
   36860:	08c0      	lsrs	r0, r0, #3
   36862:	0767      	lsls	r7, r4, #29
   36864:	4307      	orrs	r7, r0
   36866:	2080      	movs	r0, #128	; 0x80
   36868:	08e4      	lsrs	r4, r4, #3
   3686a:	0300      	lsls	r0, r0, #12
   3686c:	4204      	tst	r4, r0
   3686e:	d0e1      	beq.n	36834 <__aeabi_dsub+0x558>
   36870:	08cb      	lsrs	r3, r1, #3
   36872:	4203      	tst	r3, r0
   36874:	d1de      	bne.n	36834 <__aeabi_dsub+0x558>
   36876:	08d7      	lsrs	r7, r2, #3
   36878:	0749      	lsls	r1, r1, #29
   3687a:	430f      	orrs	r7, r1
   3687c:	001c      	movs	r4, r3
   3687e:	e7d9      	b.n	36834 <__aeabi_dsub+0x558>
   36880:	2100      	movs	r1, #0
   36882:	e771      	b.n	36768 <__aeabi_dsub+0x48c>
   36884:	2500      	movs	r5, #0
   36886:	2700      	movs	r7, #0
   36888:	e5e9      	b.n	3645e <__aeabi_dsub+0x182>
   3688a:	002e      	movs	r6, r5
   3688c:	0027      	movs	r7, r4
   3688e:	3e20      	subs	r6, #32
   36890:	40f7      	lsrs	r7, r6
   36892:	2d20      	cmp	r5, #32
   36894:	d02f      	beq.n	368f6 <__aeabi_dsub+0x61a>
   36896:	2640      	movs	r6, #64	; 0x40
   36898:	1b75      	subs	r5, r6, r5
   3689a:	40ac      	lsls	r4, r5
   3689c:	4650      	mov	r0, sl
   3689e:	4320      	orrs	r0, r4
   368a0:	1e44      	subs	r4, r0, #1
   368a2:	41a0      	sbcs	r0, r4
   368a4:	2400      	movs	r4, #0
   368a6:	4338      	orrs	r0, r7
   368a8:	e6dc      	b.n	36664 <__aeabi_dsub+0x388>
   368aa:	2480      	movs	r4, #128	; 0x80
   368ac:	2500      	movs	r5, #0
   368ae:	0324      	lsls	r4, r4, #12
   368b0:	4e13      	ldr	r6, [pc, #76]	; (36900 <__aeabi_dsub+0x624>)
   368b2:	2700      	movs	r7, #0
   368b4:	e5d3      	b.n	3645e <__aeabi_dsub+0x182>
   368b6:	4650      	mov	r0, sl
   368b8:	4320      	orrs	r0, r4
   368ba:	0007      	movs	r7, r0
   368bc:	1e78      	subs	r0, r7, #1
   368be:	4187      	sbcs	r7, r0
   368c0:	2400      	movs	r4, #0
   368c2:	18bf      	adds	r7, r7, r2
   368c4:	e760      	b.n	36788 <__aeabi_dsub+0x4ac>
   368c6:	000c      	movs	r4, r1
   368c8:	0017      	movs	r7, r2
   368ca:	e58d      	b.n	363e8 <__aeabi_dsub+0x10c>
   368cc:	000c      	movs	r4, r1
   368ce:	0017      	movs	r7, r2
   368d0:	4e0b      	ldr	r6, [pc, #44]	; (36900 <__aeabi_dsub+0x624>)
   368d2:	e589      	b.n	363e8 <__aeabi_dsub+0x10c>
   368d4:	001e      	movs	r6, r3
   368d6:	0027      	movs	r7, r4
   368d8:	3e20      	subs	r6, #32
   368da:	40f7      	lsrs	r7, r6
   368dc:	2b20      	cmp	r3, #32
   368de:	d00c      	beq.n	368fa <__aeabi_dsub+0x61e>
   368e0:	2640      	movs	r6, #64	; 0x40
   368e2:	1af3      	subs	r3, r6, r3
   368e4:	409c      	lsls	r4, r3
   368e6:	4650      	mov	r0, sl
   368e8:	4320      	orrs	r0, r4
   368ea:	1e44      	subs	r4, r0, #1
   368ec:	41a0      	sbcs	r0, r4
   368ee:	4307      	orrs	r7, r0
   368f0:	2400      	movs	r4, #0
   368f2:	18bf      	adds	r7, r7, r2
   368f4:	e748      	b.n	36788 <__aeabi_dsub+0x4ac>
   368f6:	2400      	movs	r4, #0
   368f8:	e7d0      	b.n	3689c <__aeabi_dsub+0x5c0>
   368fa:	2400      	movs	r4, #0
   368fc:	e7f3      	b.n	368e6 <__aeabi_dsub+0x60a>
   368fe:	46c0      	nop			; (mov r8, r8)
   36900:	000007ff 	.word	0x000007ff
   36904:	ff7fffff 	.word	0xff7fffff

00036908 <__aeabi_d2iz>:
   36908:	b530      	push	{r4, r5, lr}
   3690a:	4d13      	ldr	r5, [pc, #76]	; (36958 <__aeabi_d2iz+0x50>)
   3690c:	030a      	lsls	r2, r1, #12
   3690e:	004b      	lsls	r3, r1, #1
   36910:	0b12      	lsrs	r2, r2, #12
   36912:	0d5b      	lsrs	r3, r3, #21
   36914:	0fc9      	lsrs	r1, r1, #31
   36916:	2400      	movs	r4, #0
   36918:	42ab      	cmp	r3, r5
   3691a:	dd10      	ble.n	3693e <__aeabi_d2iz+0x36>
   3691c:	4c0f      	ldr	r4, [pc, #60]	; (3695c <__aeabi_d2iz+0x54>)
   3691e:	42a3      	cmp	r3, r4
   36920:	dc0f      	bgt.n	36942 <__aeabi_d2iz+0x3a>
   36922:	2480      	movs	r4, #128	; 0x80
   36924:	4d0e      	ldr	r5, [pc, #56]	; (36960 <__aeabi_d2iz+0x58>)
   36926:	0364      	lsls	r4, r4, #13
   36928:	4322      	orrs	r2, r4
   3692a:	1aed      	subs	r5, r5, r3
   3692c:	2d1f      	cmp	r5, #31
   3692e:	dd0b      	ble.n	36948 <__aeabi_d2iz+0x40>
   36930:	480c      	ldr	r0, [pc, #48]	; (36964 <__aeabi_d2iz+0x5c>)
   36932:	1ac3      	subs	r3, r0, r3
   36934:	40da      	lsrs	r2, r3
   36936:	4254      	negs	r4, r2
   36938:	2900      	cmp	r1, #0
   3693a:	d100      	bne.n	3693e <__aeabi_d2iz+0x36>
   3693c:	0014      	movs	r4, r2
   3693e:	0020      	movs	r0, r4
   36940:	bd30      	pop	{r4, r5, pc}
   36942:	4b09      	ldr	r3, [pc, #36]	; (36968 <__aeabi_d2iz+0x60>)
   36944:	18cc      	adds	r4, r1, r3
   36946:	e7fa      	b.n	3693e <__aeabi_d2iz+0x36>
   36948:	4c08      	ldr	r4, [pc, #32]	; (3696c <__aeabi_d2iz+0x64>)
   3694a:	40e8      	lsrs	r0, r5
   3694c:	46a4      	mov	ip, r4
   3694e:	4463      	add	r3, ip
   36950:	409a      	lsls	r2, r3
   36952:	4302      	orrs	r2, r0
   36954:	e7ef      	b.n	36936 <__aeabi_d2iz+0x2e>
   36956:	46c0      	nop			; (mov r8, r8)
   36958:	000003fe 	.word	0x000003fe
   3695c:	0000041d 	.word	0x0000041d
   36960:	00000433 	.word	0x00000433
   36964:	00000413 	.word	0x00000413
   36968:	7fffffff 	.word	0x7fffffff
   3696c:	fffffbed 	.word	0xfffffbed

00036970 <__aeabi_ui2d>:
   36970:	b510      	push	{r4, lr}
   36972:	1e04      	subs	r4, r0, #0
   36974:	d028      	beq.n	369c8 <__aeabi_ui2d+0x58>
   36976:	f000 f833 	bl	369e0 <__clzsi2>
   3697a:	4b15      	ldr	r3, [pc, #84]	; (369d0 <__aeabi_ui2d+0x60>)
   3697c:	4a15      	ldr	r2, [pc, #84]	; (369d4 <__aeabi_ui2d+0x64>)
   3697e:	1a1b      	subs	r3, r3, r0
   36980:	1ad2      	subs	r2, r2, r3
   36982:	2a1f      	cmp	r2, #31
   36984:	dd15      	ble.n	369b2 <__aeabi_ui2d+0x42>
   36986:	4a14      	ldr	r2, [pc, #80]	; (369d8 <__aeabi_ui2d+0x68>)
   36988:	1ad2      	subs	r2, r2, r3
   3698a:	4094      	lsls	r4, r2
   3698c:	2200      	movs	r2, #0
   3698e:	0324      	lsls	r4, r4, #12
   36990:	055b      	lsls	r3, r3, #21
   36992:	0b24      	lsrs	r4, r4, #12
   36994:	0d5b      	lsrs	r3, r3, #21
   36996:	2100      	movs	r1, #0
   36998:	0010      	movs	r0, r2
   3699a:	0324      	lsls	r4, r4, #12
   3699c:	0d0a      	lsrs	r2, r1, #20
   3699e:	0b24      	lsrs	r4, r4, #12
   369a0:	0512      	lsls	r2, r2, #20
   369a2:	4322      	orrs	r2, r4
   369a4:	4c0d      	ldr	r4, [pc, #52]	; (369dc <__aeabi_ui2d+0x6c>)
   369a6:	051b      	lsls	r3, r3, #20
   369a8:	4022      	ands	r2, r4
   369aa:	4313      	orrs	r3, r2
   369ac:	005b      	lsls	r3, r3, #1
   369ae:	0859      	lsrs	r1, r3, #1
   369b0:	bd10      	pop	{r4, pc}
   369b2:	0021      	movs	r1, r4
   369b4:	4091      	lsls	r1, r2
   369b6:	000a      	movs	r2, r1
   369b8:	210b      	movs	r1, #11
   369ba:	1a08      	subs	r0, r1, r0
   369bc:	40c4      	lsrs	r4, r0
   369be:	055b      	lsls	r3, r3, #21
   369c0:	0324      	lsls	r4, r4, #12
   369c2:	0b24      	lsrs	r4, r4, #12
   369c4:	0d5b      	lsrs	r3, r3, #21
   369c6:	e7e6      	b.n	36996 <__aeabi_ui2d+0x26>
   369c8:	2300      	movs	r3, #0
   369ca:	2400      	movs	r4, #0
   369cc:	2200      	movs	r2, #0
   369ce:	e7e2      	b.n	36996 <__aeabi_ui2d+0x26>
   369d0:	0000041e 	.word	0x0000041e
   369d4:	00000433 	.word	0x00000433
   369d8:	00000413 	.word	0x00000413
   369dc:	800fffff 	.word	0x800fffff

000369e0 <__clzsi2>:
   369e0:	211c      	movs	r1, #28
   369e2:	2301      	movs	r3, #1
   369e4:	041b      	lsls	r3, r3, #16
   369e6:	4298      	cmp	r0, r3
   369e8:	d301      	bcc.n	369ee <__clzsi2+0xe>
   369ea:	0c00      	lsrs	r0, r0, #16
   369ec:	3910      	subs	r1, #16
   369ee:	0a1b      	lsrs	r3, r3, #8
   369f0:	4298      	cmp	r0, r3
   369f2:	d301      	bcc.n	369f8 <__clzsi2+0x18>
   369f4:	0a00      	lsrs	r0, r0, #8
   369f6:	3908      	subs	r1, #8
   369f8:	091b      	lsrs	r3, r3, #4
   369fa:	4298      	cmp	r0, r3
   369fc:	d301      	bcc.n	36a02 <__clzsi2+0x22>
   369fe:	0900      	lsrs	r0, r0, #4
   36a00:	3904      	subs	r1, #4
   36a02:	a202      	add	r2, pc, #8	; (adr r2, 36a0c <__clzsi2+0x2c>)
   36a04:	5c10      	ldrb	r0, [r2, r0]
   36a06:	1840      	adds	r0, r0, r1
   36a08:	4770      	bx	lr
   36a0a:	46c0      	nop			; (mov r8, r8)
   36a0c:	02020304 	.word	0x02020304
   36a10:	01010101 	.word	0x01010101
	...

00036a1c <__divdi3>:
   36a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   36a1e:	464e      	mov	r6, r9
   36a20:	4657      	mov	r7, sl
   36a22:	46de      	mov	lr, fp
   36a24:	4645      	mov	r5, r8
   36a26:	b5e0      	push	{r5, r6, r7, lr}
   36a28:	0006      	movs	r6, r0
   36a2a:	2000      	movs	r0, #0
   36a2c:	000f      	movs	r7, r1
   36a2e:	b083      	sub	sp, #12
   36a30:	0019      	movs	r1, r3
   36a32:	4681      	mov	r9, r0
   36a34:	2f00      	cmp	r7, #0
   36a36:	da00      	bge.n	36a3a <__divdi3+0x1e>
   36a38:	e08c      	b.n	36b54 <__divdi3+0x138>
   36a3a:	2900      	cmp	r1, #0
   36a3c:	da00      	bge.n	36a40 <__divdi3+0x24>
   36a3e:	e080      	b.n	36b42 <__divdi3+0x126>
   36a40:	0034      	movs	r4, r6
   36a42:	003d      	movs	r5, r7
   36a44:	4692      	mov	sl, r2
   36a46:	4698      	mov	r8, r3
   36a48:	42bb      	cmp	r3, r7
   36a4a:	d869      	bhi.n	36b20 <__divdi3+0x104>
   36a4c:	d066      	beq.n	36b1c <__divdi3+0x100>
   36a4e:	4641      	mov	r1, r8
   36a50:	4650      	mov	r0, sl
   36a52:	f000 f8bf 	bl	36bd4 <__clzdi2>
   36a56:	4683      	mov	fp, r0
   36a58:	0039      	movs	r1, r7
   36a5a:	0030      	movs	r0, r6
   36a5c:	f000 f8ba 	bl	36bd4 <__clzdi2>
   36a60:	465b      	mov	r3, fp
   36a62:	1a1b      	subs	r3, r3, r0
   36a64:	469c      	mov	ip, r3
   36a66:	3b20      	subs	r3, #32
   36a68:	469b      	mov	fp, r3
   36a6a:	d500      	bpl.n	36a6e <__divdi3+0x52>
   36a6c:	e087      	b.n	36b7e <__divdi3+0x162>
   36a6e:	4651      	mov	r1, sl
   36a70:	4658      	mov	r0, fp
   36a72:	4081      	lsls	r1, r0
   36a74:	000b      	movs	r3, r1
   36a76:	4651      	mov	r1, sl
   36a78:	4660      	mov	r0, ip
   36a7a:	4081      	lsls	r1, r0
   36a7c:	000a      	movs	r2, r1
   36a7e:	42bb      	cmp	r3, r7
   36a80:	d900      	bls.n	36a84 <__divdi3+0x68>
   36a82:	e072      	b.n	36b6a <__divdi3+0x14e>
   36a84:	d06e      	beq.n	36b64 <__divdi3+0x148>
   36a86:	0034      	movs	r4, r6
   36a88:	003d      	movs	r5, r7
   36a8a:	4659      	mov	r1, fp
   36a8c:	1aa4      	subs	r4, r4, r2
   36a8e:	419d      	sbcs	r5, r3
   36a90:	2900      	cmp	r1, #0
   36a92:	da00      	bge.n	36a96 <__divdi3+0x7a>
   36a94:	e08a      	b.n	36bac <__divdi3+0x190>
   36a96:	2100      	movs	r1, #0
   36a98:	2000      	movs	r0, #0
   36a9a:	2601      	movs	r6, #1
   36a9c:	9000      	str	r0, [sp, #0]
   36a9e:	9101      	str	r1, [sp, #4]
   36aa0:	4659      	mov	r1, fp
   36aa2:	408e      	lsls	r6, r1
   36aa4:	9601      	str	r6, [sp, #4]
   36aa6:	4661      	mov	r1, ip
   36aa8:	2601      	movs	r6, #1
   36aaa:	408e      	lsls	r6, r1
   36aac:	4661      	mov	r1, ip
   36aae:	9600      	str	r6, [sp, #0]
   36ab0:	2900      	cmp	r1, #0
   36ab2:	d061      	beq.n	36b78 <__divdi3+0x15c>
   36ab4:	07d9      	lsls	r1, r3, #31
   36ab6:	0856      	lsrs	r6, r2, #1
   36ab8:	430e      	orrs	r6, r1
   36aba:	085f      	lsrs	r7, r3, #1
   36abc:	4661      	mov	r1, ip
   36abe:	2201      	movs	r2, #1
   36ac0:	2300      	movs	r3, #0
   36ac2:	e00c      	b.n	36ade <__divdi3+0xc2>
   36ac4:	42af      	cmp	r7, r5
   36ac6:	d101      	bne.n	36acc <__divdi3+0xb0>
   36ac8:	42a6      	cmp	r6, r4
   36aca:	d80a      	bhi.n	36ae2 <__divdi3+0xc6>
   36acc:	1ba4      	subs	r4, r4, r6
   36ace:	41bd      	sbcs	r5, r7
   36ad0:	1924      	adds	r4, r4, r4
   36ad2:	416d      	adcs	r5, r5
   36ad4:	3901      	subs	r1, #1
   36ad6:	18a4      	adds	r4, r4, r2
   36ad8:	415d      	adcs	r5, r3
   36ada:	2900      	cmp	r1, #0
   36adc:	d006      	beq.n	36aec <__divdi3+0xd0>
   36ade:	42af      	cmp	r7, r5
   36ae0:	d9f0      	bls.n	36ac4 <__divdi3+0xa8>
   36ae2:	3901      	subs	r1, #1
   36ae4:	1924      	adds	r4, r4, r4
   36ae6:	416d      	adcs	r5, r5
   36ae8:	2900      	cmp	r1, #0
   36aea:	d1f8      	bne.n	36ade <__divdi3+0xc2>
   36aec:	465b      	mov	r3, fp
   36aee:	9800      	ldr	r0, [sp, #0]
   36af0:	9901      	ldr	r1, [sp, #4]
   36af2:	1900      	adds	r0, r0, r4
   36af4:	4169      	adcs	r1, r5
   36af6:	2b00      	cmp	r3, #0
   36af8:	db4d      	blt.n	36b96 <__divdi3+0x17a>
   36afa:	002e      	movs	r6, r5
   36afc:	40de      	lsrs	r6, r3
   36afe:	4663      	mov	r3, ip
   36b00:	002c      	movs	r4, r5
   36b02:	40dc      	lsrs	r4, r3
   36b04:	465b      	mov	r3, fp
   36b06:	2b00      	cmp	r3, #0
   36b08:	db5b      	blt.n	36bc2 <__divdi3+0x1a6>
   36b0a:	0034      	movs	r4, r6
   36b0c:	409c      	lsls	r4, r3
   36b0e:	0023      	movs	r3, r4
   36b10:	4664      	mov	r4, ip
   36b12:	40a6      	lsls	r6, r4
   36b14:	0032      	movs	r2, r6
   36b16:	1a80      	subs	r0, r0, r2
   36b18:	4199      	sbcs	r1, r3
   36b1a:	e003      	b.n	36b24 <__divdi3+0x108>
   36b1c:	42b2      	cmp	r2, r6
   36b1e:	d996      	bls.n	36a4e <__divdi3+0x32>
   36b20:	2000      	movs	r0, #0
   36b22:	2100      	movs	r1, #0
   36b24:	464b      	mov	r3, r9
   36b26:	2b00      	cmp	r3, #0
   36b28:	d004      	beq.n	36b34 <__divdi3+0x118>
   36b2a:	0003      	movs	r3, r0
   36b2c:	000c      	movs	r4, r1
   36b2e:	2100      	movs	r1, #0
   36b30:	4258      	negs	r0, r3
   36b32:	41a1      	sbcs	r1, r4
   36b34:	b003      	add	sp, #12
   36b36:	bc3c      	pop	{r2, r3, r4, r5}
   36b38:	4690      	mov	r8, r2
   36b3a:	4699      	mov	r9, r3
   36b3c:	46a2      	mov	sl, r4
   36b3e:	46ab      	mov	fp, r5
   36b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36b42:	4649      	mov	r1, r9
   36b44:	43c9      	mvns	r1, r1
   36b46:	0010      	movs	r0, r2
   36b48:	4689      	mov	r9, r1
   36b4a:	0019      	movs	r1, r3
   36b4c:	2300      	movs	r3, #0
   36b4e:	4242      	negs	r2, r0
   36b50:	418b      	sbcs	r3, r1
   36b52:	e775      	b.n	36a40 <__divdi3+0x24>
   36b54:	0034      	movs	r4, r6
   36b56:	003d      	movs	r5, r7
   36b58:	3801      	subs	r0, #1
   36b5a:	2700      	movs	r7, #0
   36b5c:	4266      	negs	r6, r4
   36b5e:	41af      	sbcs	r7, r5
   36b60:	4681      	mov	r9, r0
   36b62:	e76a      	b.n	36a3a <__divdi3+0x1e>
   36b64:	42b1      	cmp	r1, r6
   36b66:	d800      	bhi.n	36b6a <__divdi3+0x14e>
   36b68:	e78d      	b.n	36a86 <__divdi3+0x6a>
   36b6a:	2100      	movs	r1, #0
   36b6c:	2000      	movs	r0, #0
   36b6e:	9000      	str	r0, [sp, #0]
   36b70:	9101      	str	r1, [sp, #4]
   36b72:	4661      	mov	r1, ip
   36b74:	2900      	cmp	r1, #0
   36b76:	d19d      	bne.n	36ab4 <__divdi3+0x98>
   36b78:	9800      	ldr	r0, [sp, #0]
   36b7a:	9901      	ldr	r1, [sp, #4]
   36b7c:	e7d2      	b.n	36b24 <__divdi3+0x108>
   36b7e:	4662      	mov	r2, ip
   36b80:	4640      	mov	r0, r8
   36b82:	2320      	movs	r3, #32
   36b84:	4651      	mov	r1, sl
   36b86:	4090      	lsls	r0, r2
   36b88:	1a9b      	subs	r3, r3, r2
   36b8a:	40d9      	lsrs	r1, r3
   36b8c:	0003      	movs	r3, r0
   36b8e:	9100      	str	r1, [sp, #0]
   36b90:	9900      	ldr	r1, [sp, #0]
   36b92:	430b      	orrs	r3, r1
   36b94:	e76f      	b.n	36a76 <__divdi3+0x5a>
   36b96:	4662      	mov	r2, ip
   36b98:	2320      	movs	r3, #32
   36b9a:	1a9b      	subs	r3, r3, r2
   36b9c:	002a      	movs	r2, r5
   36b9e:	409a      	lsls	r2, r3
   36ba0:	0026      	movs	r6, r4
   36ba2:	0013      	movs	r3, r2
   36ba4:	4662      	mov	r2, ip
   36ba6:	40d6      	lsrs	r6, r2
   36ba8:	431e      	orrs	r6, r3
   36baa:	e7a8      	b.n	36afe <__divdi3+0xe2>
   36bac:	4661      	mov	r1, ip
   36bae:	2620      	movs	r6, #32
   36bb0:	2701      	movs	r7, #1
   36bb2:	1a76      	subs	r6, r6, r1
   36bb4:	2000      	movs	r0, #0
   36bb6:	2100      	movs	r1, #0
   36bb8:	40f7      	lsrs	r7, r6
   36bba:	9000      	str	r0, [sp, #0]
   36bbc:	9101      	str	r1, [sp, #4]
   36bbe:	9701      	str	r7, [sp, #4]
   36bc0:	e771      	b.n	36aa6 <__divdi3+0x8a>
   36bc2:	4662      	mov	r2, ip
   36bc4:	2320      	movs	r3, #32
   36bc6:	0035      	movs	r5, r6
   36bc8:	4094      	lsls	r4, r2
   36bca:	1a9b      	subs	r3, r3, r2
   36bcc:	40dd      	lsrs	r5, r3
   36bce:	0023      	movs	r3, r4
   36bd0:	432b      	orrs	r3, r5
   36bd2:	e79d      	b.n	36b10 <__divdi3+0xf4>

00036bd4 <__clzdi2>:
   36bd4:	b510      	push	{r4, lr}
   36bd6:	2900      	cmp	r1, #0
   36bd8:	d103      	bne.n	36be2 <__clzdi2+0xe>
   36bda:	f7ff ff01 	bl	369e0 <__clzsi2>
   36bde:	3020      	adds	r0, #32
   36be0:	e002      	b.n	36be8 <__clzdi2+0x14>
   36be2:	1c08      	adds	r0, r1, #0
   36be4:	f7ff fefc 	bl	369e0 <__clzsi2>
   36be8:	bd10      	pop	{r4, pc}
   36bea:	46c0      	nop			; (mov r8, r8)

00036bec <atoi>:
   36bec:	b510      	push	{r4, lr}
   36bee:	220a      	movs	r2, #10
   36bf0:	2100      	movs	r1, #0
   36bf2:	f000 fb0d 	bl	37210 <strtol>
   36bf6:	bd10      	pop	{r4, pc}

00036bf8 <__libc_init_array>:
   36bf8:	b570      	push	{r4, r5, r6, lr}
   36bfa:	2600      	movs	r6, #0
   36bfc:	4d0c      	ldr	r5, [pc, #48]	; (36c30 <__libc_init_array+0x38>)
   36bfe:	4c0d      	ldr	r4, [pc, #52]	; (36c34 <__libc_init_array+0x3c>)
   36c00:	1b64      	subs	r4, r4, r5
   36c02:	10a4      	asrs	r4, r4, #2
   36c04:	42a6      	cmp	r6, r4
   36c06:	d109      	bne.n	36c1c <__libc_init_array+0x24>
   36c08:	2600      	movs	r6, #0
   36c0a:	f005 fe65 	bl	3c8d8 <_init>
   36c0e:	4d0a      	ldr	r5, [pc, #40]	; (36c38 <__libc_init_array+0x40>)
   36c10:	4c0a      	ldr	r4, [pc, #40]	; (36c3c <__libc_init_array+0x44>)
   36c12:	1b64      	subs	r4, r4, r5
   36c14:	10a4      	asrs	r4, r4, #2
   36c16:	42a6      	cmp	r6, r4
   36c18:	d105      	bne.n	36c26 <__libc_init_array+0x2e>
   36c1a:	bd70      	pop	{r4, r5, r6, pc}
   36c1c:	00b3      	lsls	r3, r6, #2
   36c1e:	58eb      	ldr	r3, [r5, r3]
   36c20:	4798      	blx	r3
   36c22:	3601      	adds	r6, #1
   36c24:	e7ee      	b.n	36c04 <__libc_init_array+0xc>
   36c26:	00b3      	lsls	r3, r6, #2
   36c28:	58eb      	ldr	r3, [r5, r3]
   36c2a:	4798      	blx	r3
   36c2c:	3601      	adds	r6, #1
   36c2e:	e7f2      	b.n	36c16 <__libc_init_array+0x1e>
   36c30:	0003c8e4 	.word	0x0003c8e4
   36c34:	0003c8e4 	.word	0x0003c8e4
   36c38:	0003c8e4 	.word	0x0003c8e4
   36c3c:	0003c8e8 	.word	0x0003c8e8

00036c40 <malloc>:
   36c40:	b510      	push	{r4, lr}
   36c42:	4b03      	ldr	r3, [pc, #12]	; (36c50 <malloc+0x10>)
   36c44:	0001      	movs	r1, r0
   36c46:	6818      	ldr	r0, [r3, #0]
   36c48:	f000 f87c 	bl	36d44 <_malloc_r>
   36c4c:	bd10      	pop	{r4, pc}
   36c4e:	46c0      	nop			; (mov r8, r8)
   36c50:	20000120 	.word	0x20000120

00036c54 <free>:
   36c54:	b510      	push	{r4, lr}
   36c56:	4b03      	ldr	r3, [pc, #12]	; (36c64 <free+0x10>)
   36c58:	0001      	movs	r1, r0
   36c5a:	6818      	ldr	r0, [r3, #0]
   36c5c:	f000 f828 	bl	36cb0 <_free_r>
   36c60:	bd10      	pop	{r4, pc}
   36c62:	46c0      	nop			; (mov r8, r8)
   36c64:	20000120 	.word	0x20000120

00036c68 <memcpy>:
   36c68:	2300      	movs	r3, #0
   36c6a:	b510      	push	{r4, lr}
   36c6c:	429a      	cmp	r2, r3
   36c6e:	d100      	bne.n	36c72 <memcpy+0xa>
   36c70:	bd10      	pop	{r4, pc}
   36c72:	5ccc      	ldrb	r4, [r1, r3]
   36c74:	54c4      	strb	r4, [r0, r3]
   36c76:	3301      	adds	r3, #1
   36c78:	e7f8      	b.n	36c6c <memcpy+0x4>

00036c7a <memmove>:
   36c7a:	b510      	push	{r4, lr}
   36c7c:	4288      	cmp	r0, r1
   36c7e:	d902      	bls.n	36c86 <memmove+0xc>
   36c80:	188b      	adds	r3, r1, r2
   36c82:	4298      	cmp	r0, r3
   36c84:	d308      	bcc.n	36c98 <memmove+0x1e>
   36c86:	2300      	movs	r3, #0
   36c88:	429a      	cmp	r2, r3
   36c8a:	d007      	beq.n	36c9c <memmove+0x22>
   36c8c:	5ccc      	ldrb	r4, [r1, r3]
   36c8e:	54c4      	strb	r4, [r0, r3]
   36c90:	3301      	adds	r3, #1
   36c92:	e7f9      	b.n	36c88 <memmove+0xe>
   36c94:	5c8b      	ldrb	r3, [r1, r2]
   36c96:	5483      	strb	r3, [r0, r2]
   36c98:	3a01      	subs	r2, #1
   36c9a:	d2fb      	bcs.n	36c94 <memmove+0x1a>
   36c9c:	bd10      	pop	{r4, pc}

00036c9e <memset>:
   36c9e:	0003      	movs	r3, r0
   36ca0:	1882      	adds	r2, r0, r2
   36ca2:	4293      	cmp	r3, r2
   36ca4:	d100      	bne.n	36ca8 <memset+0xa>
   36ca6:	4770      	bx	lr
   36ca8:	7019      	strb	r1, [r3, #0]
   36caa:	3301      	adds	r3, #1
   36cac:	e7f9      	b.n	36ca2 <memset+0x4>
	...

00036cb0 <_free_r>:
   36cb0:	b570      	push	{r4, r5, r6, lr}
   36cb2:	0005      	movs	r5, r0
   36cb4:	2900      	cmp	r1, #0
   36cb6:	d010      	beq.n	36cda <_free_r+0x2a>
   36cb8:	1f0c      	subs	r4, r1, #4
   36cba:	6823      	ldr	r3, [r4, #0]
   36cbc:	2b00      	cmp	r3, #0
   36cbe:	da00      	bge.n	36cc2 <_free_r+0x12>
   36cc0:	18e4      	adds	r4, r4, r3
   36cc2:	0028      	movs	r0, r5
   36cc4:	f000 fdd8 	bl	37878 <__malloc_lock>
   36cc8:	4a1d      	ldr	r2, [pc, #116]	; (36d40 <_free_r+0x90>)
   36cca:	6813      	ldr	r3, [r2, #0]
   36ccc:	2b00      	cmp	r3, #0
   36cce:	d105      	bne.n	36cdc <_free_r+0x2c>
   36cd0:	6063      	str	r3, [r4, #4]
   36cd2:	6014      	str	r4, [r2, #0]
   36cd4:	0028      	movs	r0, r5
   36cd6:	f000 fdd0 	bl	3787a <__malloc_unlock>
   36cda:	bd70      	pop	{r4, r5, r6, pc}
   36cdc:	42a3      	cmp	r3, r4
   36cde:	d909      	bls.n	36cf4 <_free_r+0x44>
   36ce0:	6821      	ldr	r1, [r4, #0]
   36ce2:	1860      	adds	r0, r4, r1
   36ce4:	4283      	cmp	r3, r0
   36ce6:	d1f3      	bne.n	36cd0 <_free_r+0x20>
   36ce8:	6818      	ldr	r0, [r3, #0]
   36cea:	685b      	ldr	r3, [r3, #4]
   36cec:	1841      	adds	r1, r0, r1
   36cee:	6021      	str	r1, [r4, #0]
   36cf0:	e7ee      	b.n	36cd0 <_free_r+0x20>
   36cf2:	0013      	movs	r3, r2
   36cf4:	685a      	ldr	r2, [r3, #4]
   36cf6:	2a00      	cmp	r2, #0
   36cf8:	d001      	beq.n	36cfe <_free_r+0x4e>
   36cfa:	42a2      	cmp	r2, r4
   36cfc:	d9f9      	bls.n	36cf2 <_free_r+0x42>
   36cfe:	6819      	ldr	r1, [r3, #0]
   36d00:	1858      	adds	r0, r3, r1
   36d02:	42a0      	cmp	r0, r4
   36d04:	d10b      	bne.n	36d1e <_free_r+0x6e>
   36d06:	6820      	ldr	r0, [r4, #0]
   36d08:	1809      	adds	r1, r1, r0
   36d0a:	1858      	adds	r0, r3, r1
   36d0c:	6019      	str	r1, [r3, #0]
   36d0e:	4282      	cmp	r2, r0
   36d10:	d1e0      	bne.n	36cd4 <_free_r+0x24>
   36d12:	6810      	ldr	r0, [r2, #0]
   36d14:	6852      	ldr	r2, [r2, #4]
   36d16:	1841      	adds	r1, r0, r1
   36d18:	6019      	str	r1, [r3, #0]
   36d1a:	605a      	str	r2, [r3, #4]
   36d1c:	e7da      	b.n	36cd4 <_free_r+0x24>
   36d1e:	42a0      	cmp	r0, r4
   36d20:	d902      	bls.n	36d28 <_free_r+0x78>
   36d22:	230c      	movs	r3, #12
   36d24:	602b      	str	r3, [r5, #0]
   36d26:	e7d5      	b.n	36cd4 <_free_r+0x24>
   36d28:	6821      	ldr	r1, [r4, #0]
   36d2a:	1860      	adds	r0, r4, r1
   36d2c:	4282      	cmp	r2, r0
   36d2e:	d103      	bne.n	36d38 <_free_r+0x88>
   36d30:	6810      	ldr	r0, [r2, #0]
   36d32:	6852      	ldr	r2, [r2, #4]
   36d34:	1841      	adds	r1, r0, r1
   36d36:	6021      	str	r1, [r4, #0]
   36d38:	6062      	str	r2, [r4, #4]
   36d3a:	605c      	str	r4, [r3, #4]
   36d3c:	e7ca      	b.n	36cd4 <_free_r+0x24>
   36d3e:	46c0      	nop			; (mov r8, r8)
   36d40:	20004344 	.word	0x20004344

00036d44 <_malloc_r>:
   36d44:	2303      	movs	r3, #3
   36d46:	b570      	push	{r4, r5, r6, lr}
   36d48:	1ccd      	adds	r5, r1, #3
   36d4a:	439d      	bics	r5, r3
   36d4c:	3508      	adds	r5, #8
   36d4e:	0006      	movs	r6, r0
   36d50:	2d0c      	cmp	r5, #12
   36d52:	d21e      	bcs.n	36d92 <_malloc_r+0x4e>
   36d54:	250c      	movs	r5, #12
   36d56:	42a9      	cmp	r1, r5
   36d58:	d81d      	bhi.n	36d96 <_malloc_r+0x52>
   36d5a:	0030      	movs	r0, r6
   36d5c:	f000 fd8c 	bl	37878 <__malloc_lock>
   36d60:	4a25      	ldr	r2, [pc, #148]	; (36df8 <_malloc_r+0xb4>)
   36d62:	6814      	ldr	r4, [r2, #0]
   36d64:	0021      	movs	r1, r4
   36d66:	2900      	cmp	r1, #0
   36d68:	d119      	bne.n	36d9e <_malloc_r+0x5a>
   36d6a:	4c24      	ldr	r4, [pc, #144]	; (36dfc <_malloc_r+0xb8>)
   36d6c:	6823      	ldr	r3, [r4, #0]
   36d6e:	2b00      	cmp	r3, #0
   36d70:	d103      	bne.n	36d7a <_malloc_r+0x36>
   36d72:	0030      	movs	r0, r6
   36d74:	f000 f8ae 	bl	36ed4 <_sbrk_r>
   36d78:	6020      	str	r0, [r4, #0]
   36d7a:	0029      	movs	r1, r5
   36d7c:	0030      	movs	r0, r6
   36d7e:	f000 f8a9 	bl	36ed4 <_sbrk_r>
   36d82:	1c43      	adds	r3, r0, #1
   36d84:	d12c      	bne.n	36de0 <_malloc_r+0x9c>
   36d86:	230c      	movs	r3, #12
   36d88:	0030      	movs	r0, r6
   36d8a:	6033      	str	r3, [r6, #0]
   36d8c:	f000 fd75 	bl	3787a <__malloc_unlock>
   36d90:	e003      	b.n	36d9a <_malloc_r+0x56>
   36d92:	2d00      	cmp	r5, #0
   36d94:	dadf      	bge.n	36d56 <_malloc_r+0x12>
   36d96:	230c      	movs	r3, #12
   36d98:	6033      	str	r3, [r6, #0]
   36d9a:	2000      	movs	r0, #0
   36d9c:	bd70      	pop	{r4, r5, r6, pc}
   36d9e:	680b      	ldr	r3, [r1, #0]
   36da0:	1b5b      	subs	r3, r3, r5
   36da2:	d41a      	bmi.n	36dda <_malloc_r+0x96>
   36da4:	2b0b      	cmp	r3, #11
   36da6:	d903      	bls.n	36db0 <_malloc_r+0x6c>
   36da8:	600b      	str	r3, [r1, #0]
   36daa:	18cc      	adds	r4, r1, r3
   36dac:	6025      	str	r5, [r4, #0]
   36dae:	e003      	b.n	36db8 <_malloc_r+0x74>
   36db0:	428c      	cmp	r4, r1
   36db2:	d10e      	bne.n	36dd2 <_malloc_r+0x8e>
   36db4:	6863      	ldr	r3, [r4, #4]
   36db6:	6013      	str	r3, [r2, #0]
   36db8:	0030      	movs	r0, r6
   36dba:	f000 fd5e 	bl	3787a <__malloc_unlock>
   36dbe:	0020      	movs	r0, r4
   36dc0:	2207      	movs	r2, #7
   36dc2:	300b      	adds	r0, #11
   36dc4:	1d23      	adds	r3, r4, #4
   36dc6:	4390      	bics	r0, r2
   36dc8:	1ac3      	subs	r3, r0, r3
   36dca:	d0e7      	beq.n	36d9c <_malloc_r+0x58>
   36dcc:	425a      	negs	r2, r3
   36dce:	50e2      	str	r2, [r4, r3]
   36dd0:	e7e4      	b.n	36d9c <_malloc_r+0x58>
   36dd2:	684b      	ldr	r3, [r1, #4]
   36dd4:	6063      	str	r3, [r4, #4]
   36dd6:	000c      	movs	r4, r1
   36dd8:	e7ee      	b.n	36db8 <_malloc_r+0x74>
   36dda:	000c      	movs	r4, r1
   36ddc:	6849      	ldr	r1, [r1, #4]
   36dde:	e7c2      	b.n	36d66 <_malloc_r+0x22>
   36de0:	2303      	movs	r3, #3
   36de2:	1cc4      	adds	r4, r0, #3
   36de4:	439c      	bics	r4, r3
   36de6:	42a0      	cmp	r0, r4
   36de8:	d0e0      	beq.n	36dac <_malloc_r+0x68>
   36dea:	1a21      	subs	r1, r4, r0
   36dec:	0030      	movs	r0, r6
   36dee:	f000 f871 	bl	36ed4 <_sbrk_r>
   36df2:	1c43      	adds	r3, r0, #1
   36df4:	d1da      	bne.n	36dac <_malloc_r+0x68>
   36df6:	e7c6      	b.n	36d86 <_malloc_r+0x42>
   36df8:	20004344 	.word	0x20004344
   36dfc:	20004348 	.word	0x20004348

00036e00 <_puts_r>:
   36e00:	b570      	push	{r4, r5, r6, lr}
   36e02:	0005      	movs	r5, r0
   36e04:	000e      	movs	r6, r1
   36e06:	2800      	cmp	r0, #0
   36e08:	d004      	beq.n	36e14 <_puts_r+0x14>
   36e0a:	6983      	ldr	r3, [r0, #24]
   36e0c:	2b00      	cmp	r3, #0
   36e0e:	d101      	bne.n	36e14 <_puts_r+0x14>
   36e10:	f000 fc0e 	bl	37630 <__sinit>
   36e14:	69ab      	ldr	r3, [r5, #24]
   36e16:	68ac      	ldr	r4, [r5, #8]
   36e18:	2b00      	cmp	r3, #0
   36e1a:	d102      	bne.n	36e22 <_puts_r+0x22>
   36e1c:	0028      	movs	r0, r5
   36e1e:	f000 fc07 	bl	37630 <__sinit>
   36e22:	4b24      	ldr	r3, [pc, #144]	; (36eb4 <_puts_r+0xb4>)
   36e24:	429c      	cmp	r4, r3
   36e26:	d10f      	bne.n	36e48 <_puts_r+0x48>
   36e28:	686c      	ldr	r4, [r5, #4]
   36e2a:	89a3      	ldrh	r3, [r4, #12]
   36e2c:	071b      	lsls	r3, r3, #28
   36e2e:	d502      	bpl.n	36e36 <_puts_r+0x36>
   36e30:	6923      	ldr	r3, [r4, #16]
   36e32:	2b00      	cmp	r3, #0
   36e34:	d120      	bne.n	36e78 <_puts_r+0x78>
   36e36:	0021      	movs	r1, r4
   36e38:	0028      	movs	r0, r5
   36e3a:	f000 fa8b 	bl	37354 <__swsetup_r>
   36e3e:	2800      	cmp	r0, #0
   36e40:	d01a      	beq.n	36e78 <_puts_r+0x78>
   36e42:	2001      	movs	r0, #1
   36e44:	4240      	negs	r0, r0
   36e46:	bd70      	pop	{r4, r5, r6, pc}
   36e48:	4b1b      	ldr	r3, [pc, #108]	; (36eb8 <_puts_r+0xb8>)
   36e4a:	429c      	cmp	r4, r3
   36e4c:	d101      	bne.n	36e52 <_puts_r+0x52>
   36e4e:	68ac      	ldr	r4, [r5, #8]
   36e50:	e7eb      	b.n	36e2a <_puts_r+0x2a>
   36e52:	4b1a      	ldr	r3, [pc, #104]	; (36ebc <_puts_r+0xbc>)
   36e54:	429c      	cmp	r4, r3
   36e56:	d1e8      	bne.n	36e2a <_puts_r+0x2a>
   36e58:	68ec      	ldr	r4, [r5, #12]
   36e5a:	e7e6      	b.n	36e2a <_puts_r+0x2a>
   36e5c:	3b01      	subs	r3, #1
   36e5e:	3601      	adds	r6, #1
   36e60:	60a3      	str	r3, [r4, #8]
   36e62:	2b00      	cmp	r3, #0
   36e64:	da04      	bge.n	36e70 <_puts_r+0x70>
   36e66:	69a2      	ldr	r2, [r4, #24]
   36e68:	4293      	cmp	r3, r2
   36e6a:	db16      	blt.n	36e9a <_puts_r+0x9a>
   36e6c:	290a      	cmp	r1, #10
   36e6e:	d014      	beq.n	36e9a <_puts_r+0x9a>
   36e70:	6823      	ldr	r3, [r4, #0]
   36e72:	1c5a      	adds	r2, r3, #1
   36e74:	6022      	str	r2, [r4, #0]
   36e76:	7019      	strb	r1, [r3, #0]
   36e78:	7831      	ldrb	r1, [r6, #0]
   36e7a:	68a3      	ldr	r3, [r4, #8]
   36e7c:	2900      	cmp	r1, #0
   36e7e:	d1ed      	bne.n	36e5c <_puts_r+0x5c>
   36e80:	3b01      	subs	r3, #1
   36e82:	60a3      	str	r3, [r4, #8]
   36e84:	2b00      	cmp	r3, #0
   36e86:	da0f      	bge.n	36ea8 <_puts_r+0xa8>
   36e88:	0022      	movs	r2, r4
   36e8a:	310a      	adds	r1, #10
   36e8c:	0028      	movs	r0, r5
   36e8e:	f000 fa0b 	bl	372a8 <__swbuf_r>
   36e92:	1c43      	adds	r3, r0, #1
   36e94:	d0d5      	beq.n	36e42 <_puts_r+0x42>
   36e96:	200a      	movs	r0, #10
   36e98:	e7d5      	b.n	36e46 <_puts_r+0x46>
   36e9a:	0022      	movs	r2, r4
   36e9c:	0028      	movs	r0, r5
   36e9e:	f000 fa03 	bl	372a8 <__swbuf_r>
   36ea2:	1c43      	adds	r3, r0, #1
   36ea4:	d1e8      	bne.n	36e78 <_puts_r+0x78>
   36ea6:	e7cc      	b.n	36e42 <_puts_r+0x42>
   36ea8:	200a      	movs	r0, #10
   36eaa:	6823      	ldr	r3, [r4, #0]
   36eac:	1c5a      	adds	r2, r3, #1
   36eae:	6022      	str	r2, [r4, #0]
   36eb0:	7018      	strb	r0, [r3, #0]
   36eb2:	e7c8      	b.n	36e46 <_puts_r+0x46>
   36eb4:	0003c758 	.word	0x0003c758
   36eb8:	0003c778 	.word	0x0003c778
   36ebc:	0003c738 	.word	0x0003c738

00036ec0 <puts>:
   36ec0:	b510      	push	{r4, lr}
   36ec2:	4b03      	ldr	r3, [pc, #12]	; (36ed0 <puts+0x10>)
   36ec4:	0001      	movs	r1, r0
   36ec6:	6818      	ldr	r0, [r3, #0]
   36ec8:	f7ff ff9a 	bl	36e00 <_puts_r>
   36ecc:	bd10      	pop	{r4, pc}
   36ece:	46c0      	nop			; (mov r8, r8)
   36ed0:	20000120 	.word	0x20000120

00036ed4 <_sbrk_r>:
   36ed4:	2300      	movs	r3, #0
   36ed6:	b570      	push	{r4, r5, r6, lr}
   36ed8:	4c06      	ldr	r4, [pc, #24]	; (36ef4 <_sbrk_r+0x20>)
   36eda:	0005      	movs	r5, r0
   36edc:	0008      	movs	r0, r1
   36ede:	6023      	str	r3, [r4, #0]
   36ee0:	f7f6 f822 	bl	2cf28 <_sbrk>
   36ee4:	1c43      	adds	r3, r0, #1
   36ee6:	d103      	bne.n	36ef0 <_sbrk_r+0x1c>
   36ee8:	6823      	ldr	r3, [r4, #0]
   36eea:	2b00      	cmp	r3, #0
   36eec:	d000      	beq.n	36ef0 <_sbrk_r+0x1c>
   36eee:	602b      	str	r3, [r5, #0]
   36ef0:	bd70      	pop	{r4, r5, r6, pc}
   36ef2:	46c0      	nop			; (mov r8, r8)
   36ef4:	200058b8 	.word	0x200058b8

00036ef8 <sniprintf>:
   36ef8:	b40c      	push	{r2, r3}
   36efa:	b530      	push	{r4, r5, lr}
   36efc:	4b16      	ldr	r3, [pc, #88]	; (36f58 <sniprintf+0x60>)
   36efe:	b09d      	sub	sp, #116	; 0x74
   36f00:	1e0c      	subs	r4, r1, #0
   36f02:	681d      	ldr	r5, [r3, #0]
   36f04:	da08      	bge.n	36f18 <sniprintf+0x20>
   36f06:	238b      	movs	r3, #139	; 0x8b
   36f08:	2001      	movs	r0, #1
   36f0a:	602b      	str	r3, [r5, #0]
   36f0c:	4240      	negs	r0, r0
   36f0e:	b01d      	add	sp, #116	; 0x74
   36f10:	bc30      	pop	{r4, r5}
   36f12:	bc08      	pop	{r3}
   36f14:	b002      	add	sp, #8
   36f16:	4718      	bx	r3
   36f18:	2382      	movs	r3, #130	; 0x82
   36f1a:	a902      	add	r1, sp, #8
   36f1c:	009b      	lsls	r3, r3, #2
   36f1e:	818b      	strh	r3, [r1, #12]
   36f20:	2300      	movs	r3, #0
   36f22:	9002      	str	r0, [sp, #8]
   36f24:	6108      	str	r0, [r1, #16]
   36f26:	429c      	cmp	r4, r3
   36f28:	d000      	beq.n	36f2c <sniprintf+0x34>
   36f2a:	1e63      	subs	r3, r4, #1
   36f2c:	608b      	str	r3, [r1, #8]
   36f2e:	614b      	str	r3, [r1, #20]
   36f30:	2301      	movs	r3, #1
   36f32:	425b      	negs	r3, r3
   36f34:	81cb      	strh	r3, [r1, #14]
   36f36:	9a20      	ldr	r2, [sp, #128]	; 0x80
   36f38:	ab21      	add	r3, sp, #132	; 0x84
   36f3a:	0028      	movs	r0, r5
   36f3c:	9301      	str	r3, [sp, #4]
   36f3e:	f000 fcff 	bl	37940 <_svfiprintf_r>
   36f42:	1c43      	adds	r3, r0, #1
   36f44:	da01      	bge.n	36f4a <sniprintf+0x52>
   36f46:	238b      	movs	r3, #139	; 0x8b
   36f48:	602b      	str	r3, [r5, #0]
   36f4a:	2c00      	cmp	r4, #0
   36f4c:	d0df      	beq.n	36f0e <sniprintf+0x16>
   36f4e:	2300      	movs	r3, #0
   36f50:	9a02      	ldr	r2, [sp, #8]
   36f52:	7013      	strb	r3, [r2, #0]
   36f54:	e7db      	b.n	36f0e <sniprintf+0x16>
   36f56:	46c0      	nop			; (mov r8, r8)
   36f58:	20000120 	.word	0x20000120

00036f5c <siprintf>:
   36f5c:	b40e      	push	{r1, r2, r3}
   36f5e:	b510      	push	{r4, lr}
   36f60:	b09d      	sub	sp, #116	; 0x74
   36f62:	a902      	add	r1, sp, #8
   36f64:	9002      	str	r0, [sp, #8]
   36f66:	6108      	str	r0, [r1, #16]
   36f68:	480b      	ldr	r0, [pc, #44]	; (36f98 <siprintf+0x3c>)
   36f6a:	2482      	movs	r4, #130	; 0x82
   36f6c:	6088      	str	r0, [r1, #8]
   36f6e:	6148      	str	r0, [r1, #20]
   36f70:	2001      	movs	r0, #1
   36f72:	4240      	negs	r0, r0
   36f74:	ab1f      	add	r3, sp, #124	; 0x7c
   36f76:	81c8      	strh	r0, [r1, #14]
   36f78:	4808      	ldr	r0, [pc, #32]	; (36f9c <siprintf+0x40>)
   36f7a:	cb04      	ldmia	r3!, {r2}
   36f7c:	00a4      	lsls	r4, r4, #2
   36f7e:	6800      	ldr	r0, [r0, #0]
   36f80:	9301      	str	r3, [sp, #4]
   36f82:	818c      	strh	r4, [r1, #12]
   36f84:	f000 fcdc 	bl	37940 <_svfiprintf_r>
   36f88:	2300      	movs	r3, #0
   36f8a:	9a02      	ldr	r2, [sp, #8]
   36f8c:	7013      	strb	r3, [r2, #0]
   36f8e:	b01d      	add	sp, #116	; 0x74
   36f90:	bc10      	pop	{r4}
   36f92:	bc08      	pop	{r3}
   36f94:	b003      	add	sp, #12
   36f96:	4718      	bx	r3
   36f98:	7fffffff 	.word	0x7fffffff
   36f9c:	20000120 	.word	0x20000120

00036fa0 <strcasecmp>:
   36fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36fa2:	0007      	movs	r7, r0
   36fa4:	000e      	movs	r6, r1
   36fa6:	783c      	ldrb	r4, [r7, #0]
   36fa8:	f000 fbda 	bl	37760 <__locale_ctype_ptr>
   36fac:	2203      	movs	r2, #3
   36fae:	1900      	adds	r0, r0, r4
   36fb0:	7843      	ldrb	r3, [r0, #1]
   36fb2:	4013      	ands	r3, r2
   36fb4:	2b01      	cmp	r3, #1
   36fb6:	d100      	bne.n	36fba <strcasecmp+0x1a>
   36fb8:	3420      	adds	r4, #32
   36fba:	7835      	ldrb	r5, [r6, #0]
   36fbc:	f000 fbd0 	bl	37760 <__locale_ctype_ptr>
   36fc0:	2203      	movs	r2, #3
   36fc2:	1940      	adds	r0, r0, r5
   36fc4:	7843      	ldrb	r3, [r0, #1]
   36fc6:	4013      	ands	r3, r2
   36fc8:	2b01      	cmp	r3, #1
   36fca:	d100      	bne.n	36fce <strcasecmp+0x2e>
   36fcc:	3520      	adds	r5, #32
   36fce:	1b60      	subs	r0, r4, r5
   36fd0:	d103      	bne.n	36fda <strcasecmp+0x3a>
   36fd2:	3701      	adds	r7, #1
   36fd4:	3601      	adds	r6, #1
   36fd6:	2d00      	cmp	r5, #0
   36fd8:	d1e5      	bne.n	36fa6 <strcasecmp+0x6>
   36fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00036fdc <strcat>:
   36fdc:	0002      	movs	r2, r0
   36fde:	b510      	push	{r4, lr}
   36fe0:	7813      	ldrb	r3, [r2, #0]
   36fe2:	2b00      	cmp	r3, #0
   36fe4:	d105      	bne.n	36ff2 <strcat+0x16>
   36fe6:	5ccc      	ldrb	r4, [r1, r3]
   36fe8:	54d4      	strb	r4, [r2, r3]
   36fea:	3301      	adds	r3, #1
   36fec:	2c00      	cmp	r4, #0
   36fee:	d1fa      	bne.n	36fe6 <strcat+0xa>
   36ff0:	bd10      	pop	{r4, pc}
   36ff2:	3201      	adds	r2, #1
   36ff4:	e7f4      	b.n	36fe0 <strcat+0x4>

00036ff6 <strcmp>:
   36ff6:	7802      	ldrb	r2, [r0, #0]
   36ff8:	780b      	ldrb	r3, [r1, #0]
   36ffa:	2a00      	cmp	r2, #0
   36ffc:	d003      	beq.n	37006 <strcmp+0x10>
   36ffe:	3001      	adds	r0, #1
   37000:	3101      	adds	r1, #1
   37002:	429a      	cmp	r2, r3
   37004:	d0f7      	beq.n	36ff6 <strcmp>
   37006:	1ad0      	subs	r0, r2, r3
   37008:	4770      	bx	lr

0003700a <strcpy>:
   3700a:	1c03      	adds	r3, r0, #0
   3700c:	780a      	ldrb	r2, [r1, #0]
   3700e:	3101      	adds	r1, #1
   37010:	701a      	strb	r2, [r3, #0]
   37012:	3301      	adds	r3, #1
   37014:	2a00      	cmp	r2, #0
   37016:	d1f9      	bne.n	3700c <strcpy+0x2>
   37018:	4770      	bx	lr
	...

0003701c <strdup>:
   3701c:	b510      	push	{r4, lr}
   3701e:	4b03      	ldr	r3, [pc, #12]	; (3702c <strdup+0x10>)
   37020:	0001      	movs	r1, r0
   37022:	6818      	ldr	r0, [r3, #0]
   37024:	f000 f804 	bl	37030 <_strdup_r>
   37028:	bd10      	pop	{r4, pc}
   3702a:	46c0      	nop			; (mov r8, r8)
   3702c:	20000120 	.word	0x20000120

00037030 <_strdup_r>:
   37030:	b570      	push	{r4, r5, r6, lr}
   37032:	0005      	movs	r5, r0
   37034:	0008      	movs	r0, r1
   37036:	000e      	movs	r6, r1
   37038:	f000 f80d 	bl	37056 <strlen>
   3703c:	1c44      	adds	r4, r0, #1
   3703e:	0021      	movs	r1, r4
   37040:	0028      	movs	r0, r5
   37042:	f7ff fe7f 	bl	36d44 <_malloc_r>
   37046:	1e05      	subs	r5, r0, #0
   37048:	d003      	beq.n	37052 <_strdup_r+0x22>
   3704a:	0022      	movs	r2, r4
   3704c:	0031      	movs	r1, r6
   3704e:	f7ff fe0b 	bl	36c68 <memcpy>
   37052:	0028      	movs	r0, r5
   37054:	bd70      	pop	{r4, r5, r6, pc}

00037056 <strlen>:
   37056:	2300      	movs	r3, #0
   37058:	5cc2      	ldrb	r2, [r0, r3]
   3705a:	3301      	adds	r3, #1
   3705c:	2a00      	cmp	r2, #0
   3705e:	d1fb      	bne.n	37058 <strlen+0x2>
   37060:	1e58      	subs	r0, r3, #1
   37062:	4770      	bx	lr

00037064 <strncmp>:
   37064:	2300      	movs	r3, #0
   37066:	b530      	push	{r4, r5, lr}
   37068:	429a      	cmp	r2, r3
   3706a:	d00a      	beq.n	37082 <strncmp+0x1e>
   3706c:	3a01      	subs	r2, #1
   3706e:	5cc4      	ldrb	r4, [r0, r3]
   37070:	5ccd      	ldrb	r5, [r1, r3]
   37072:	42ac      	cmp	r4, r5
   37074:	d104      	bne.n	37080 <strncmp+0x1c>
   37076:	429a      	cmp	r2, r3
   37078:	d002      	beq.n	37080 <strncmp+0x1c>
   3707a:	3301      	adds	r3, #1
   3707c:	2c00      	cmp	r4, #0
   3707e:	d1f6      	bne.n	3706e <strncmp+0xa>
   37080:	1b63      	subs	r3, r4, r5
   37082:	0018      	movs	r0, r3
   37084:	bd30      	pop	{r4, r5, pc}

00037086 <strncpy>:
   37086:	b570      	push	{r4, r5, r6, lr}
   37088:	0004      	movs	r4, r0
   3708a:	2a00      	cmp	r2, #0
   3708c:	d100      	bne.n	37090 <strncpy+0xa>
   3708e:	bd70      	pop	{r4, r5, r6, pc}
   37090:	780d      	ldrb	r5, [r1, #0]
   37092:	1e56      	subs	r6, r2, #1
   37094:	1c63      	adds	r3, r4, #1
   37096:	7025      	strb	r5, [r4, #0]
   37098:	3101      	adds	r1, #1
   3709a:	2d00      	cmp	r5, #0
   3709c:	d105      	bne.n	370aa <strncpy+0x24>
   3709e:	18a4      	adds	r4, r4, r2
   370a0:	429c      	cmp	r4, r3
   370a2:	d0f4      	beq.n	3708e <strncpy+0x8>
   370a4:	701d      	strb	r5, [r3, #0]
   370a6:	3301      	adds	r3, #1
   370a8:	e7fa      	b.n	370a0 <strncpy+0x1a>
   370aa:	001c      	movs	r4, r3
   370ac:	0032      	movs	r2, r6
   370ae:	e7ec      	b.n	3708a <strncpy+0x4>

000370b0 <strrchr>:
   370b0:	b570      	push	{r4, r5, r6, lr}
   370b2:	000d      	movs	r5, r1
   370b4:	2400      	movs	r4, #0
   370b6:	2900      	cmp	r1, #0
   370b8:	d105      	bne.n	370c6 <strrchr+0x16>
   370ba:	f000 ff19 	bl	37ef0 <strchr>
   370be:	0004      	movs	r4, r0
   370c0:	e006      	b.n	370d0 <strrchr+0x20>
   370c2:	001c      	movs	r4, r3
   370c4:	1c58      	adds	r0, r3, #1
   370c6:	0029      	movs	r1, r5
   370c8:	f000 ff12 	bl	37ef0 <strchr>
   370cc:	1e03      	subs	r3, r0, #0
   370ce:	d1f8      	bne.n	370c2 <strrchr+0x12>
   370d0:	0020      	movs	r0, r4
   370d2:	bd70      	pop	{r4, r5, r6, pc}

000370d4 <strstr>:
   370d4:	b510      	push	{r4, lr}
   370d6:	0002      	movs	r2, r0
   370d8:	7800      	ldrb	r0, [r0, #0]
   370da:	2800      	cmp	r0, #0
   370dc:	d104      	bne.n	370e8 <strstr+0x14>
   370de:	7809      	ldrb	r1, [r1, #0]
   370e0:	2900      	cmp	r1, #0
   370e2:	d00d      	beq.n	37100 <strstr+0x2c>
   370e4:	bd10      	pop	{r4, pc}
   370e6:	3201      	adds	r2, #1
   370e8:	7810      	ldrb	r0, [r2, #0]
   370ea:	2800      	cmp	r0, #0
   370ec:	d0fa      	beq.n	370e4 <strstr+0x10>
   370ee:	2300      	movs	r3, #0
   370f0:	5cc8      	ldrb	r0, [r1, r3]
   370f2:	2800      	cmp	r0, #0
   370f4:	d004      	beq.n	37100 <strstr+0x2c>
   370f6:	5cd4      	ldrb	r4, [r2, r3]
   370f8:	4284      	cmp	r4, r0
   370fa:	d1f4      	bne.n	370e6 <strstr+0x12>
   370fc:	3301      	adds	r3, #1
   370fe:	e7f7      	b.n	370f0 <strstr+0x1c>
   37100:	0010      	movs	r0, r2
   37102:	e7ef      	b.n	370e4 <strstr+0x10>

00037104 <_strtol_l.isra.0>:
   37104:	b5f0      	push	{r4, r5, r6, r7, lr}
   37106:	001f      	movs	r7, r3
   37108:	000e      	movs	r6, r1
   3710a:	b087      	sub	sp, #28
   3710c:	9005      	str	r0, [sp, #20]
   3710e:	9103      	str	r1, [sp, #12]
   37110:	9202      	str	r2, [sp, #8]
   37112:	980c      	ldr	r0, [sp, #48]	; 0x30
   37114:	7834      	ldrb	r4, [r6, #0]
   37116:	f000 fb20 	bl	3775a <__locale_ctype_ptr_l>
   3711a:	2208      	movs	r2, #8
   3711c:	1900      	adds	r0, r0, r4
   3711e:	7843      	ldrb	r3, [r0, #1]
   37120:	1c75      	adds	r5, r6, #1
   37122:	4013      	ands	r3, r2
   37124:	d10c      	bne.n	37140 <_strtol_l.isra.0+0x3c>
   37126:	2c2d      	cmp	r4, #45	; 0x2d
   37128:	d10c      	bne.n	37144 <_strtol_l.isra.0+0x40>
   3712a:	3301      	adds	r3, #1
   3712c:	782c      	ldrb	r4, [r5, #0]
   3712e:	9301      	str	r3, [sp, #4]
   37130:	1cb5      	adds	r5, r6, #2
   37132:	2f00      	cmp	r7, #0
   37134:	d00c      	beq.n	37150 <_strtol_l.isra.0+0x4c>
   37136:	2f10      	cmp	r7, #16
   37138:	d114      	bne.n	37164 <_strtol_l.isra.0+0x60>
   3713a:	2c30      	cmp	r4, #48	; 0x30
   3713c:	d00a      	beq.n	37154 <_strtol_l.isra.0+0x50>
   3713e:	e011      	b.n	37164 <_strtol_l.isra.0+0x60>
   37140:	002e      	movs	r6, r5
   37142:	e7e6      	b.n	37112 <_strtol_l.isra.0+0xe>
   37144:	9301      	str	r3, [sp, #4]
   37146:	2c2b      	cmp	r4, #43	; 0x2b
   37148:	d1f3      	bne.n	37132 <_strtol_l.isra.0+0x2e>
   3714a:	782c      	ldrb	r4, [r5, #0]
   3714c:	1cb5      	adds	r5, r6, #2
   3714e:	e7f0      	b.n	37132 <_strtol_l.isra.0+0x2e>
   37150:	2c30      	cmp	r4, #48	; 0x30
   37152:	d12f      	bne.n	371b4 <_strtol_l.isra.0+0xb0>
   37154:	2220      	movs	r2, #32
   37156:	782b      	ldrb	r3, [r5, #0]
   37158:	4393      	bics	r3, r2
   3715a:	2b58      	cmp	r3, #88	; 0x58
   3715c:	d151      	bne.n	37202 <_strtol_l.isra.0+0xfe>
   3715e:	2710      	movs	r7, #16
   37160:	786c      	ldrb	r4, [r5, #1]
   37162:	3502      	adds	r5, #2
   37164:	9b01      	ldr	r3, [sp, #4]
   37166:	4a29      	ldr	r2, [pc, #164]	; (3720c <_strtol_l.isra.0+0x108>)
   37168:	0039      	movs	r1, r7
   3716a:	189e      	adds	r6, r3, r2
   3716c:	0030      	movs	r0, r6
   3716e:	f7fd fb79 	bl	34864 <__aeabi_uidivmod>
   37172:	0030      	movs	r0, r6
   37174:	9104      	str	r1, [sp, #16]
   37176:	0039      	movs	r1, r7
   37178:	f7fd faee 	bl	34758 <__udivsi3>
   3717c:	2101      	movs	r1, #1
   3717e:	2300      	movs	r3, #0
   37180:	4249      	negs	r1, r1
   37182:	0002      	movs	r2, r0
   37184:	468c      	mov	ip, r1
   37186:	0018      	movs	r0, r3
   37188:	0021      	movs	r1, r4
   3718a:	3930      	subs	r1, #48	; 0x30
   3718c:	2909      	cmp	r1, #9
   3718e:	d813      	bhi.n	371b8 <_strtol_l.isra.0+0xb4>
   37190:	000c      	movs	r4, r1
   37192:	42a7      	cmp	r7, r4
   37194:	dd1c      	ble.n	371d0 <_strtol_l.isra.0+0xcc>
   37196:	1c59      	adds	r1, r3, #1
   37198:	d009      	beq.n	371ae <_strtol_l.isra.0+0xaa>
   3719a:	4663      	mov	r3, ip
   3719c:	4282      	cmp	r2, r0
   3719e:	d306      	bcc.n	371ae <_strtol_l.isra.0+0xaa>
   371a0:	d102      	bne.n	371a8 <_strtol_l.isra.0+0xa4>
   371a2:	9904      	ldr	r1, [sp, #16]
   371a4:	42a1      	cmp	r1, r4
   371a6:	db02      	blt.n	371ae <_strtol_l.isra.0+0xaa>
   371a8:	2301      	movs	r3, #1
   371aa:	4378      	muls	r0, r7
   371ac:	1820      	adds	r0, r4, r0
   371ae:	782c      	ldrb	r4, [r5, #0]
   371b0:	3501      	adds	r5, #1
   371b2:	e7e9      	b.n	37188 <_strtol_l.isra.0+0x84>
   371b4:	270a      	movs	r7, #10
   371b6:	e7d5      	b.n	37164 <_strtol_l.isra.0+0x60>
   371b8:	0021      	movs	r1, r4
   371ba:	3941      	subs	r1, #65	; 0x41
   371bc:	2919      	cmp	r1, #25
   371be:	d801      	bhi.n	371c4 <_strtol_l.isra.0+0xc0>
   371c0:	3c37      	subs	r4, #55	; 0x37
   371c2:	e7e6      	b.n	37192 <_strtol_l.isra.0+0x8e>
   371c4:	0021      	movs	r1, r4
   371c6:	3961      	subs	r1, #97	; 0x61
   371c8:	2919      	cmp	r1, #25
   371ca:	d801      	bhi.n	371d0 <_strtol_l.isra.0+0xcc>
   371cc:	3c57      	subs	r4, #87	; 0x57
   371ce:	e7e0      	b.n	37192 <_strtol_l.isra.0+0x8e>
   371d0:	1c5a      	adds	r2, r3, #1
   371d2:	d108      	bne.n	371e6 <_strtol_l.isra.0+0xe2>
   371d4:	9a05      	ldr	r2, [sp, #20]
   371d6:	3323      	adds	r3, #35	; 0x23
   371d8:	6013      	str	r3, [r2, #0]
   371da:	9b02      	ldr	r3, [sp, #8]
   371dc:	0030      	movs	r0, r6
   371de:	2b00      	cmp	r3, #0
   371e0:	d10b      	bne.n	371fa <_strtol_l.isra.0+0xf6>
   371e2:	b007      	add	sp, #28
   371e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   371e6:	9a01      	ldr	r2, [sp, #4]
   371e8:	2a00      	cmp	r2, #0
   371ea:	d000      	beq.n	371ee <_strtol_l.isra.0+0xea>
   371ec:	4240      	negs	r0, r0
   371ee:	9a02      	ldr	r2, [sp, #8]
   371f0:	2a00      	cmp	r2, #0
   371f2:	d0f6      	beq.n	371e2 <_strtol_l.isra.0+0xde>
   371f4:	9a03      	ldr	r2, [sp, #12]
   371f6:	2b00      	cmp	r3, #0
   371f8:	d000      	beq.n	371fc <_strtol_l.isra.0+0xf8>
   371fa:	1e6a      	subs	r2, r5, #1
   371fc:	9b02      	ldr	r3, [sp, #8]
   371fe:	601a      	str	r2, [r3, #0]
   37200:	e7ef      	b.n	371e2 <_strtol_l.isra.0+0xde>
   37202:	2430      	movs	r4, #48	; 0x30
   37204:	2f00      	cmp	r7, #0
   37206:	d1ad      	bne.n	37164 <_strtol_l.isra.0+0x60>
   37208:	3708      	adds	r7, #8
   3720a:	e7ab      	b.n	37164 <_strtol_l.isra.0+0x60>
   3720c:	7fffffff 	.word	0x7fffffff

00037210 <strtol>:
   37210:	b537      	push	{r0, r1, r2, r4, r5, lr}
   37212:	0013      	movs	r3, r2
   37214:	4a06      	ldr	r2, [pc, #24]	; (37230 <strtol+0x20>)
   37216:	0005      	movs	r5, r0
   37218:	6810      	ldr	r0, [r2, #0]
   3721a:	6a04      	ldr	r4, [r0, #32]
   3721c:	2c00      	cmp	r4, #0
   3721e:	d100      	bne.n	37222 <strtol+0x12>
   37220:	4c04      	ldr	r4, [pc, #16]	; (37234 <strtol+0x24>)
   37222:	000a      	movs	r2, r1
   37224:	9400      	str	r4, [sp, #0]
   37226:	0029      	movs	r1, r5
   37228:	f7ff ff6c 	bl	37104 <_strtol_l.isra.0>
   3722c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   3722e:	46c0      	nop			; (mov r8, r8)
   37230:	20000120 	.word	0x20000120
   37234:	20000184 	.word	0x20000184

00037238 <_vsniprintf_r>:
   37238:	b530      	push	{r4, r5, lr}
   3723a:	0014      	movs	r4, r2
   3723c:	b09b      	sub	sp, #108	; 0x6c
   3723e:	0005      	movs	r5, r0
   37240:	001a      	movs	r2, r3
   37242:	2c00      	cmp	r4, #0
   37244:	da05      	bge.n	37252 <_vsniprintf_r+0x1a>
   37246:	238b      	movs	r3, #139	; 0x8b
   37248:	6003      	str	r3, [r0, #0]
   3724a:	2001      	movs	r0, #1
   3724c:	4240      	negs	r0, r0
   3724e:	b01b      	add	sp, #108	; 0x6c
   37250:	bd30      	pop	{r4, r5, pc}
   37252:	2382      	movs	r3, #130	; 0x82
   37254:	4668      	mov	r0, sp
   37256:	009b      	lsls	r3, r3, #2
   37258:	8183      	strh	r3, [r0, #12]
   3725a:	2300      	movs	r3, #0
   3725c:	9100      	str	r1, [sp, #0]
   3725e:	9104      	str	r1, [sp, #16]
   37260:	429c      	cmp	r4, r3
   37262:	d000      	beq.n	37266 <_vsniprintf_r+0x2e>
   37264:	1e63      	subs	r3, r4, #1
   37266:	9302      	str	r3, [sp, #8]
   37268:	9305      	str	r3, [sp, #20]
   3726a:	2301      	movs	r3, #1
   3726c:	4669      	mov	r1, sp
   3726e:	425b      	negs	r3, r3
   37270:	81cb      	strh	r3, [r1, #14]
   37272:	0028      	movs	r0, r5
   37274:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   37276:	f000 fb63 	bl	37940 <_svfiprintf_r>
   3727a:	1c43      	adds	r3, r0, #1
   3727c:	da01      	bge.n	37282 <_vsniprintf_r+0x4a>
   3727e:	238b      	movs	r3, #139	; 0x8b
   37280:	602b      	str	r3, [r5, #0]
   37282:	2c00      	cmp	r4, #0
   37284:	d0e3      	beq.n	3724e <_vsniprintf_r+0x16>
   37286:	2300      	movs	r3, #0
   37288:	9a00      	ldr	r2, [sp, #0]
   3728a:	7013      	strb	r3, [r2, #0]
   3728c:	e7df      	b.n	3724e <_vsniprintf_r+0x16>
	...

00037290 <vsniprintf>:
   37290:	b507      	push	{r0, r1, r2, lr}
   37292:	9300      	str	r3, [sp, #0]
   37294:	0013      	movs	r3, r2
   37296:	000a      	movs	r2, r1
   37298:	0001      	movs	r1, r0
   3729a:	4802      	ldr	r0, [pc, #8]	; (372a4 <vsniprintf+0x14>)
   3729c:	6800      	ldr	r0, [r0, #0]
   3729e:	f7ff ffcb 	bl	37238 <_vsniprintf_r>
   372a2:	bd0e      	pop	{r1, r2, r3, pc}
   372a4:	20000120 	.word	0x20000120

000372a8 <__swbuf_r>:
   372a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   372aa:	0005      	movs	r5, r0
   372ac:	000e      	movs	r6, r1
   372ae:	0014      	movs	r4, r2
   372b0:	2800      	cmp	r0, #0
   372b2:	d004      	beq.n	372be <__swbuf_r+0x16>
   372b4:	6983      	ldr	r3, [r0, #24]
   372b6:	2b00      	cmp	r3, #0
   372b8:	d101      	bne.n	372be <__swbuf_r+0x16>
   372ba:	f000 f9b9 	bl	37630 <__sinit>
   372be:	4b22      	ldr	r3, [pc, #136]	; (37348 <__swbuf_r+0xa0>)
   372c0:	429c      	cmp	r4, r3
   372c2:	d12d      	bne.n	37320 <__swbuf_r+0x78>
   372c4:	686c      	ldr	r4, [r5, #4]
   372c6:	69a3      	ldr	r3, [r4, #24]
   372c8:	60a3      	str	r3, [r4, #8]
   372ca:	89a3      	ldrh	r3, [r4, #12]
   372cc:	071b      	lsls	r3, r3, #28
   372ce:	d531      	bpl.n	37334 <__swbuf_r+0x8c>
   372d0:	6923      	ldr	r3, [r4, #16]
   372d2:	2b00      	cmp	r3, #0
   372d4:	d02e      	beq.n	37334 <__swbuf_r+0x8c>
   372d6:	6823      	ldr	r3, [r4, #0]
   372d8:	6922      	ldr	r2, [r4, #16]
   372da:	b2f7      	uxtb	r7, r6
   372dc:	1a98      	subs	r0, r3, r2
   372de:	6963      	ldr	r3, [r4, #20]
   372e0:	b2f6      	uxtb	r6, r6
   372e2:	4298      	cmp	r0, r3
   372e4:	db05      	blt.n	372f2 <__swbuf_r+0x4a>
   372e6:	0021      	movs	r1, r4
   372e8:	0028      	movs	r0, r5
   372ea:	f000 f933 	bl	37554 <_fflush_r>
   372ee:	2800      	cmp	r0, #0
   372f0:	d126      	bne.n	37340 <__swbuf_r+0x98>
   372f2:	68a3      	ldr	r3, [r4, #8]
   372f4:	3001      	adds	r0, #1
   372f6:	3b01      	subs	r3, #1
   372f8:	60a3      	str	r3, [r4, #8]
   372fa:	6823      	ldr	r3, [r4, #0]
   372fc:	1c5a      	adds	r2, r3, #1
   372fe:	6022      	str	r2, [r4, #0]
   37300:	701f      	strb	r7, [r3, #0]
   37302:	6963      	ldr	r3, [r4, #20]
   37304:	4298      	cmp	r0, r3
   37306:	d004      	beq.n	37312 <__swbuf_r+0x6a>
   37308:	89a3      	ldrh	r3, [r4, #12]
   3730a:	07db      	lsls	r3, r3, #31
   3730c:	d51a      	bpl.n	37344 <__swbuf_r+0x9c>
   3730e:	2e0a      	cmp	r6, #10
   37310:	d118      	bne.n	37344 <__swbuf_r+0x9c>
   37312:	0021      	movs	r1, r4
   37314:	0028      	movs	r0, r5
   37316:	f000 f91d 	bl	37554 <_fflush_r>
   3731a:	2800      	cmp	r0, #0
   3731c:	d012      	beq.n	37344 <__swbuf_r+0x9c>
   3731e:	e00f      	b.n	37340 <__swbuf_r+0x98>
   37320:	4b0a      	ldr	r3, [pc, #40]	; (3734c <__swbuf_r+0xa4>)
   37322:	429c      	cmp	r4, r3
   37324:	d101      	bne.n	3732a <__swbuf_r+0x82>
   37326:	68ac      	ldr	r4, [r5, #8]
   37328:	e7cd      	b.n	372c6 <__swbuf_r+0x1e>
   3732a:	4b09      	ldr	r3, [pc, #36]	; (37350 <__swbuf_r+0xa8>)
   3732c:	429c      	cmp	r4, r3
   3732e:	d1ca      	bne.n	372c6 <__swbuf_r+0x1e>
   37330:	68ec      	ldr	r4, [r5, #12]
   37332:	e7c8      	b.n	372c6 <__swbuf_r+0x1e>
   37334:	0021      	movs	r1, r4
   37336:	0028      	movs	r0, r5
   37338:	f000 f80c 	bl	37354 <__swsetup_r>
   3733c:	2800      	cmp	r0, #0
   3733e:	d0ca      	beq.n	372d6 <__swbuf_r+0x2e>
   37340:	2601      	movs	r6, #1
   37342:	4276      	negs	r6, r6
   37344:	0030      	movs	r0, r6
   37346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   37348:	0003c758 	.word	0x0003c758
   3734c:	0003c778 	.word	0x0003c778
   37350:	0003c738 	.word	0x0003c738

00037354 <__swsetup_r>:
   37354:	4b36      	ldr	r3, [pc, #216]	; (37430 <__swsetup_r+0xdc>)
   37356:	b570      	push	{r4, r5, r6, lr}
   37358:	681d      	ldr	r5, [r3, #0]
   3735a:	0006      	movs	r6, r0
   3735c:	000c      	movs	r4, r1
   3735e:	2d00      	cmp	r5, #0
   37360:	d005      	beq.n	3736e <__swsetup_r+0x1a>
   37362:	69ab      	ldr	r3, [r5, #24]
   37364:	2b00      	cmp	r3, #0
   37366:	d102      	bne.n	3736e <__swsetup_r+0x1a>
   37368:	0028      	movs	r0, r5
   3736a:	f000 f961 	bl	37630 <__sinit>
   3736e:	4b31      	ldr	r3, [pc, #196]	; (37434 <__swsetup_r+0xe0>)
   37370:	429c      	cmp	r4, r3
   37372:	d10f      	bne.n	37394 <__swsetup_r+0x40>
   37374:	686c      	ldr	r4, [r5, #4]
   37376:	230c      	movs	r3, #12
   37378:	5ee2      	ldrsh	r2, [r4, r3]
   3737a:	b293      	uxth	r3, r2
   3737c:	0719      	lsls	r1, r3, #28
   3737e:	d42d      	bmi.n	373dc <__swsetup_r+0x88>
   37380:	06d9      	lsls	r1, r3, #27
   37382:	d411      	bmi.n	373a8 <__swsetup_r+0x54>
   37384:	2309      	movs	r3, #9
   37386:	2001      	movs	r0, #1
   37388:	6033      	str	r3, [r6, #0]
   3738a:	3337      	adds	r3, #55	; 0x37
   3738c:	4313      	orrs	r3, r2
   3738e:	81a3      	strh	r3, [r4, #12]
   37390:	4240      	negs	r0, r0
   37392:	bd70      	pop	{r4, r5, r6, pc}
   37394:	4b28      	ldr	r3, [pc, #160]	; (37438 <__swsetup_r+0xe4>)
   37396:	429c      	cmp	r4, r3
   37398:	d101      	bne.n	3739e <__swsetup_r+0x4a>
   3739a:	68ac      	ldr	r4, [r5, #8]
   3739c:	e7eb      	b.n	37376 <__swsetup_r+0x22>
   3739e:	4b27      	ldr	r3, [pc, #156]	; (3743c <__swsetup_r+0xe8>)
   373a0:	429c      	cmp	r4, r3
   373a2:	d1e8      	bne.n	37376 <__swsetup_r+0x22>
   373a4:	68ec      	ldr	r4, [r5, #12]
   373a6:	e7e6      	b.n	37376 <__swsetup_r+0x22>
   373a8:	075b      	lsls	r3, r3, #29
   373aa:	d513      	bpl.n	373d4 <__swsetup_r+0x80>
   373ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
   373ae:	2900      	cmp	r1, #0
   373b0:	d008      	beq.n	373c4 <__swsetup_r+0x70>
   373b2:	0023      	movs	r3, r4
   373b4:	3344      	adds	r3, #68	; 0x44
   373b6:	4299      	cmp	r1, r3
   373b8:	d002      	beq.n	373c0 <__swsetup_r+0x6c>
   373ba:	0030      	movs	r0, r6
   373bc:	f7ff fc78 	bl	36cb0 <_free_r>
   373c0:	2300      	movs	r3, #0
   373c2:	6363      	str	r3, [r4, #52]	; 0x34
   373c4:	2224      	movs	r2, #36	; 0x24
   373c6:	89a3      	ldrh	r3, [r4, #12]
   373c8:	4393      	bics	r3, r2
   373ca:	81a3      	strh	r3, [r4, #12]
   373cc:	2300      	movs	r3, #0
   373ce:	6063      	str	r3, [r4, #4]
   373d0:	6923      	ldr	r3, [r4, #16]
   373d2:	6023      	str	r3, [r4, #0]
   373d4:	2308      	movs	r3, #8
   373d6:	89a2      	ldrh	r2, [r4, #12]
   373d8:	4313      	orrs	r3, r2
   373da:	81a3      	strh	r3, [r4, #12]
   373dc:	6923      	ldr	r3, [r4, #16]
   373de:	2b00      	cmp	r3, #0
   373e0:	d10b      	bne.n	373fa <__swsetup_r+0xa6>
   373e2:	21a0      	movs	r1, #160	; 0xa0
   373e4:	2280      	movs	r2, #128	; 0x80
   373e6:	89a3      	ldrh	r3, [r4, #12]
   373e8:	0089      	lsls	r1, r1, #2
   373ea:	0092      	lsls	r2, r2, #2
   373ec:	400b      	ands	r3, r1
   373ee:	4293      	cmp	r3, r2
   373f0:	d003      	beq.n	373fa <__swsetup_r+0xa6>
   373f2:	0021      	movs	r1, r4
   373f4:	0030      	movs	r0, r6
   373f6:	f000 f9e9 	bl	377cc <__smakebuf_r>
   373fa:	2301      	movs	r3, #1
   373fc:	89a2      	ldrh	r2, [r4, #12]
   373fe:	4013      	ands	r3, r2
   37400:	d011      	beq.n	37426 <__swsetup_r+0xd2>
   37402:	2300      	movs	r3, #0
   37404:	60a3      	str	r3, [r4, #8]
   37406:	6963      	ldr	r3, [r4, #20]
   37408:	425b      	negs	r3, r3
   3740a:	61a3      	str	r3, [r4, #24]
   3740c:	2000      	movs	r0, #0
   3740e:	6923      	ldr	r3, [r4, #16]
   37410:	4283      	cmp	r3, r0
   37412:	d1be      	bne.n	37392 <__swsetup_r+0x3e>
   37414:	230c      	movs	r3, #12
   37416:	5ee2      	ldrsh	r2, [r4, r3]
   37418:	0613      	lsls	r3, r2, #24
   3741a:	d5ba      	bpl.n	37392 <__swsetup_r+0x3e>
   3741c:	2340      	movs	r3, #64	; 0x40
   3741e:	4313      	orrs	r3, r2
   37420:	81a3      	strh	r3, [r4, #12]
   37422:	3801      	subs	r0, #1
   37424:	e7b5      	b.n	37392 <__swsetup_r+0x3e>
   37426:	0792      	lsls	r2, r2, #30
   37428:	d400      	bmi.n	3742c <__swsetup_r+0xd8>
   3742a:	6963      	ldr	r3, [r4, #20]
   3742c:	60a3      	str	r3, [r4, #8]
   3742e:	e7ed      	b.n	3740c <__swsetup_r+0xb8>
   37430:	20000120 	.word	0x20000120
   37434:	0003c758 	.word	0x0003c758
   37438:	0003c778 	.word	0x0003c778
   3743c:	0003c738 	.word	0x0003c738

00037440 <__sflush_r>:
   37440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   37442:	898a      	ldrh	r2, [r1, #12]
   37444:	0005      	movs	r5, r0
   37446:	000c      	movs	r4, r1
   37448:	0713      	lsls	r3, r2, #28
   3744a:	d460      	bmi.n	3750e <__sflush_r+0xce>
   3744c:	684b      	ldr	r3, [r1, #4]
   3744e:	2b00      	cmp	r3, #0
   37450:	dc04      	bgt.n	3745c <__sflush_r+0x1c>
   37452:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   37454:	2b00      	cmp	r3, #0
   37456:	dc01      	bgt.n	3745c <__sflush_r+0x1c>
   37458:	2000      	movs	r0, #0
   3745a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   3745c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   3745e:	2f00      	cmp	r7, #0
   37460:	d0fa      	beq.n	37458 <__sflush_r+0x18>
   37462:	2300      	movs	r3, #0
   37464:	682e      	ldr	r6, [r5, #0]
   37466:	602b      	str	r3, [r5, #0]
   37468:	2380      	movs	r3, #128	; 0x80
   3746a:	015b      	lsls	r3, r3, #5
   3746c:	401a      	ands	r2, r3
   3746e:	d034      	beq.n	374da <__sflush_r+0x9a>
   37470:	6d60      	ldr	r0, [r4, #84]	; 0x54
   37472:	89a3      	ldrh	r3, [r4, #12]
   37474:	075b      	lsls	r3, r3, #29
   37476:	d506      	bpl.n	37486 <__sflush_r+0x46>
   37478:	6863      	ldr	r3, [r4, #4]
   3747a:	1ac0      	subs	r0, r0, r3
   3747c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3747e:	2b00      	cmp	r3, #0
   37480:	d001      	beq.n	37486 <__sflush_r+0x46>
   37482:	6c23      	ldr	r3, [r4, #64]	; 0x40
   37484:	1ac0      	subs	r0, r0, r3
   37486:	0002      	movs	r2, r0
   37488:	6a21      	ldr	r1, [r4, #32]
   3748a:	2300      	movs	r3, #0
   3748c:	0028      	movs	r0, r5
   3748e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   37490:	47b8      	blx	r7
   37492:	89a1      	ldrh	r1, [r4, #12]
   37494:	1c43      	adds	r3, r0, #1
   37496:	d106      	bne.n	374a6 <__sflush_r+0x66>
   37498:	682b      	ldr	r3, [r5, #0]
   3749a:	2b1d      	cmp	r3, #29
   3749c:	d831      	bhi.n	37502 <__sflush_r+0xc2>
   3749e:	4a2c      	ldr	r2, [pc, #176]	; (37550 <__sflush_r+0x110>)
   374a0:	40da      	lsrs	r2, r3
   374a2:	07d3      	lsls	r3, r2, #31
   374a4:	d52d      	bpl.n	37502 <__sflush_r+0xc2>
   374a6:	2300      	movs	r3, #0
   374a8:	6063      	str	r3, [r4, #4]
   374aa:	6923      	ldr	r3, [r4, #16]
   374ac:	6023      	str	r3, [r4, #0]
   374ae:	04cb      	lsls	r3, r1, #19
   374b0:	d505      	bpl.n	374be <__sflush_r+0x7e>
   374b2:	1c43      	adds	r3, r0, #1
   374b4:	d102      	bne.n	374bc <__sflush_r+0x7c>
   374b6:	682b      	ldr	r3, [r5, #0]
   374b8:	2b00      	cmp	r3, #0
   374ba:	d100      	bne.n	374be <__sflush_r+0x7e>
   374bc:	6560      	str	r0, [r4, #84]	; 0x54
   374be:	6b61      	ldr	r1, [r4, #52]	; 0x34
   374c0:	602e      	str	r6, [r5, #0]
   374c2:	2900      	cmp	r1, #0
   374c4:	d0c8      	beq.n	37458 <__sflush_r+0x18>
   374c6:	0023      	movs	r3, r4
   374c8:	3344      	adds	r3, #68	; 0x44
   374ca:	4299      	cmp	r1, r3
   374cc:	d002      	beq.n	374d4 <__sflush_r+0x94>
   374ce:	0028      	movs	r0, r5
   374d0:	f7ff fbee 	bl	36cb0 <_free_r>
   374d4:	2000      	movs	r0, #0
   374d6:	6360      	str	r0, [r4, #52]	; 0x34
   374d8:	e7bf      	b.n	3745a <__sflush_r+0x1a>
   374da:	2301      	movs	r3, #1
   374dc:	6a21      	ldr	r1, [r4, #32]
   374de:	0028      	movs	r0, r5
   374e0:	47b8      	blx	r7
   374e2:	1c43      	adds	r3, r0, #1
   374e4:	d1c5      	bne.n	37472 <__sflush_r+0x32>
   374e6:	682b      	ldr	r3, [r5, #0]
   374e8:	2b00      	cmp	r3, #0
   374ea:	d0c2      	beq.n	37472 <__sflush_r+0x32>
   374ec:	2b1d      	cmp	r3, #29
   374ee:	d001      	beq.n	374f4 <__sflush_r+0xb4>
   374f0:	2b16      	cmp	r3, #22
   374f2:	d101      	bne.n	374f8 <__sflush_r+0xb8>
   374f4:	602e      	str	r6, [r5, #0]
   374f6:	e7af      	b.n	37458 <__sflush_r+0x18>
   374f8:	2340      	movs	r3, #64	; 0x40
   374fa:	89a2      	ldrh	r2, [r4, #12]
   374fc:	4313      	orrs	r3, r2
   374fe:	81a3      	strh	r3, [r4, #12]
   37500:	e7ab      	b.n	3745a <__sflush_r+0x1a>
   37502:	2340      	movs	r3, #64	; 0x40
   37504:	430b      	orrs	r3, r1
   37506:	2001      	movs	r0, #1
   37508:	81a3      	strh	r3, [r4, #12]
   3750a:	4240      	negs	r0, r0
   3750c:	e7a5      	b.n	3745a <__sflush_r+0x1a>
   3750e:	690f      	ldr	r7, [r1, #16]
   37510:	2f00      	cmp	r7, #0
   37512:	d0a1      	beq.n	37458 <__sflush_r+0x18>
   37514:	680b      	ldr	r3, [r1, #0]
   37516:	600f      	str	r7, [r1, #0]
   37518:	1bdb      	subs	r3, r3, r7
   3751a:	9301      	str	r3, [sp, #4]
   3751c:	2300      	movs	r3, #0
   3751e:	0792      	lsls	r2, r2, #30
   37520:	d100      	bne.n	37524 <__sflush_r+0xe4>
   37522:	694b      	ldr	r3, [r1, #20]
   37524:	60a3      	str	r3, [r4, #8]
   37526:	9b01      	ldr	r3, [sp, #4]
   37528:	2b00      	cmp	r3, #0
   3752a:	dc00      	bgt.n	3752e <__sflush_r+0xee>
   3752c:	e794      	b.n	37458 <__sflush_r+0x18>
   3752e:	9b01      	ldr	r3, [sp, #4]
   37530:	003a      	movs	r2, r7
   37532:	6a21      	ldr	r1, [r4, #32]
   37534:	0028      	movs	r0, r5
   37536:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   37538:	47b0      	blx	r6
   3753a:	2800      	cmp	r0, #0
   3753c:	dc03      	bgt.n	37546 <__sflush_r+0x106>
   3753e:	2340      	movs	r3, #64	; 0x40
   37540:	89a2      	ldrh	r2, [r4, #12]
   37542:	4313      	orrs	r3, r2
   37544:	e7df      	b.n	37506 <__sflush_r+0xc6>
   37546:	9b01      	ldr	r3, [sp, #4]
   37548:	183f      	adds	r7, r7, r0
   3754a:	1a1b      	subs	r3, r3, r0
   3754c:	9301      	str	r3, [sp, #4]
   3754e:	e7ea      	b.n	37526 <__sflush_r+0xe6>
   37550:	20400001 	.word	0x20400001

00037554 <_fflush_r>:
   37554:	690b      	ldr	r3, [r1, #16]
   37556:	b570      	push	{r4, r5, r6, lr}
   37558:	0005      	movs	r5, r0
   3755a:	000c      	movs	r4, r1
   3755c:	2b00      	cmp	r3, #0
   3755e:	d101      	bne.n	37564 <_fflush_r+0x10>
   37560:	2000      	movs	r0, #0
   37562:	bd70      	pop	{r4, r5, r6, pc}
   37564:	2800      	cmp	r0, #0
   37566:	d004      	beq.n	37572 <_fflush_r+0x1e>
   37568:	6983      	ldr	r3, [r0, #24]
   3756a:	2b00      	cmp	r3, #0
   3756c:	d101      	bne.n	37572 <_fflush_r+0x1e>
   3756e:	f000 f85f 	bl	37630 <__sinit>
   37572:	4b0b      	ldr	r3, [pc, #44]	; (375a0 <_fflush_r+0x4c>)
   37574:	429c      	cmp	r4, r3
   37576:	d109      	bne.n	3758c <_fflush_r+0x38>
   37578:	686c      	ldr	r4, [r5, #4]
   3757a:	220c      	movs	r2, #12
   3757c:	5ea3      	ldrsh	r3, [r4, r2]
   3757e:	2b00      	cmp	r3, #0
   37580:	d0ee      	beq.n	37560 <_fflush_r+0xc>
   37582:	0021      	movs	r1, r4
   37584:	0028      	movs	r0, r5
   37586:	f7ff ff5b 	bl	37440 <__sflush_r>
   3758a:	e7ea      	b.n	37562 <_fflush_r+0xe>
   3758c:	4b05      	ldr	r3, [pc, #20]	; (375a4 <_fflush_r+0x50>)
   3758e:	429c      	cmp	r4, r3
   37590:	d101      	bne.n	37596 <_fflush_r+0x42>
   37592:	68ac      	ldr	r4, [r5, #8]
   37594:	e7f1      	b.n	3757a <_fflush_r+0x26>
   37596:	4b04      	ldr	r3, [pc, #16]	; (375a8 <_fflush_r+0x54>)
   37598:	429c      	cmp	r4, r3
   3759a:	d1ee      	bne.n	3757a <_fflush_r+0x26>
   3759c:	68ec      	ldr	r4, [r5, #12]
   3759e:	e7ec      	b.n	3757a <_fflush_r+0x26>
   375a0:	0003c758 	.word	0x0003c758
   375a4:	0003c778 	.word	0x0003c778
   375a8:	0003c738 	.word	0x0003c738

000375ac <_cleanup_r>:
   375ac:	b510      	push	{r4, lr}
   375ae:	4902      	ldr	r1, [pc, #8]	; (375b8 <_cleanup_r+0xc>)
   375b0:	f000 f8b2 	bl	37718 <_fwalk_reent>
   375b4:	bd10      	pop	{r4, pc}
   375b6:	46c0      	nop			; (mov r8, r8)
   375b8:	00037555 	.word	0x00037555

000375bc <std.isra.0>:
   375bc:	2300      	movs	r3, #0
   375be:	b510      	push	{r4, lr}
   375c0:	0004      	movs	r4, r0
   375c2:	6003      	str	r3, [r0, #0]
   375c4:	6043      	str	r3, [r0, #4]
   375c6:	6083      	str	r3, [r0, #8]
   375c8:	8181      	strh	r1, [r0, #12]
   375ca:	6643      	str	r3, [r0, #100]	; 0x64
   375cc:	81c2      	strh	r2, [r0, #14]
   375ce:	6103      	str	r3, [r0, #16]
   375d0:	6143      	str	r3, [r0, #20]
   375d2:	6183      	str	r3, [r0, #24]
   375d4:	0019      	movs	r1, r3
   375d6:	2208      	movs	r2, #8
   375d8:	305c      	adds	r0, #92	; 0x5c
   375da:	f7ff fb60 	bl	36c9e <memset>
   375de:	4b05      	ldr	r3, [pc, #20]	; (375f4 <std.isra.0+0x38>)
   375e0:	6224      	str	r4, [r4, #32]
   375e2:	6263      	str	r3, [r4, #36]	; 0x24
   375e4:	4b04      	ldr	r3, [pc, #16]	; (375f8 <std.isra.0+0x3c>)
   375e6:	62a3      	str	r3, [r4, #40]	; 0x28
   375e8:	4b04      	ldr	r3, [pc, #16]	; (375fc <std.isra.0+0x40>)
   375ea:	62e3      	str	r3, [r4, #44]	; 0x2c
   375ec:	4b04      	ldr	r3, [pc, #16]	; (37600 <std.isra.0+0x44>)
   375ee:	6323      	str	r3, [r4, #48]	; 0x30
   375f0:	bd10      	pop	{r4, pc}
   375f2:	46c0      	nop			; (mov r8, r8)
   375f4:	00037e59 	.word	0x00037e59
   375f8:	00037e81 	.word	0x00037e81
   375fc:	00037eb9 	.word	0x00037eb9
   37600:	00037ee5 	.word	0x00037ee5

00037604 <__sfmoreglue>:
   37604:	b570      	push	{r4, r5, r6, lr}
   37606:	2568      	movs	r5, #104	; 0x68
   37608:	1e4a      	subs	r2, r1, #1
   3760a:	4355      	muls	r5, r2
   3760c:	000e      	movs	r6, r1
   3760e:	0029      	movs	r1, r5
   37610:	3174      	adds	r1, #116	; 0x74
   37612:	f7ff fb97 	bl	36d44 <_malloc_r>
   37616:	1e04      	subs	r4, r0, #0
   37618:	d008      	beq.n	3762c <__sfmoreglue+0x28>
   3761a:	2100      	movs	r1, #0
   3761c:	002a      	movs	r2, r5
   3761e:	6001      	str	r1, [r0, #0]
   37620:	6046      	str	r6, [r0, #4]
   37622:	300c      	adds	r0, #12
   37624:	60a0      	str	r0, [r4, #8]
   37626:	3268      	adds	r2, #104	; 0x68
   37628:	f7ff fb39 	bl	36c9e <memset>
   3762c:	0020      	movs	r0, r4
   3762e:	bd70      	pop	{r4, r5, r6, pc}

00037630 <__sinit>:
   37630:	6983      	ldr	r3, [r0, #24]
   37632:	b513      	push	{r0, r1, r4, lr}
   37634:	0004      	movs	r4, r0
   37636:	2b00      	cmp	r3, #0
   37638:	d128      	bne.n	3768c <__sinit+0x5c>
   3763a:	6483      	str	r3, [r0, #72]	; 0x48
   3763c:	64c3      	str	r3, [r0, #76]	; 0x4c
   3763e:	6503      	str	r3, [r0, #80]	; 0x50
   37640:	4b13      	ldr	r3, [pc, #76]	; (37690 <__sinit+0x60>)
   37642:	4a14      	ldr	r2, [pc, #80]	; (37694 <__sinit+0x64>)
   37644:	681b      	ldr	r3, [r3, #0]
   37646:	6282      	str	r2, [r0, #40]	; 0x28
   37648:	9301      	str	r3, [sp, #4]
   3764a:	4298      	cmp	r0, r3
   3764c:	d101      	bne.n	37652 <__sinit+0x22>
   3764e:	2301      	movs	r3, #1
   37650:	6183      	str	r3, [r0, #24]
   37652:	0020      	movs	r0, r4
   37654:	f000 f820 	bl	37698 <__sfp>
   37658:	6060      	str	r0, [r4, #4]
   3765a:	0020      	movs	r0, r4
   3765c:	f000 f81c 	bl	37698 <__sfp>
   37660:	60a0      	str	r0, [r4, #8]
   37662:	0020      	movs	r0, r4
   37664:	f000 f818 	bl	37698 <__sfp>
   37668:	2200      	movs	r2, #0
   3766a:	60e0      	str	r0, [r4, #12]
   3766c:	2104      	movs	r1, #4
   3766e:	6860      	ldr	r0, [r4, #4]
   37670:	f7ff ffa4 	bl	375bc <std.isra.0>
   37674:	2201      	movs	r2, #1
   37676:	2109      	movs	r1, #9
   37678:	68a0      	ldr	r0, [r4, #8]
   3767a:	f7ff ff9f 	bl	375bc <std.isra.0>
   3767e:	2202      	movs	r2, #2
   37680:	2112      	movs	r1, #18
   37682:	68e0      	ldr	r0, [r4, #12]
   37684:	f7ff ff9a 	bl	375bc <std.isra.0>
   37688:	2301      	movs	r3, #1
   3768a:	61a3      	str	r3, [r4, #24]
   3768c:	bd13      	pop	{r0, r1, r4, pc}
   3768e:	46c0      	nop			; (mov r8, r8)
   37690:	0003c734 	.word	0x0003c734
   37694:	000375ad 	.word	0x000375ad

00037698 <__sfp>:
   37698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3769a:	4b1e      	ldr	r3, [pc, #120]	; (37714 <__sfp+0x7c>)
   3769c:	0007      	movs	r7, r0
   3769e:	681e      	ldr	r6, [r3, #0]
   376a0:	69b3      	ldr	r3, [r6, #24]
   376a2:	2b00      	cmp	r3, #0
   376a4:	d102      	bne.n	376ac <__sfp+0x14>
   376a6:	0030      	movs	r0, r6
   376a8:	f7ff ffc2 	bl	37630 <__sinit>
   376ac:	3648      	adds	r6, #72	; 0x48
   376ae:	68b4      	ldr	r4, [r6, #8]
   376b0:	6873      	ldr	r3, [r6, #4]
   376b2:	3b01      	subs	r3, #1
   376b4:	d504      	bpl.n	376c0 <__sfp+0x28>
   376b6:	6833      	ldr	r3, [r6, #0]
   376b8:	2b00      	cmp	r3, #0
   376ba:	d007      	beq.n	376cc <__sfp+0x34>
   376bc:	6836      	ldr	r6, [r6, #0]
   376be:	e7f6      	b.n	376ae <__sfp+0x16>
   376c0:	220c      	movs	r2, #12
   376c2:	5ea5      	ldrsh	r5, [r4, r2]
   376c4:	2d00      	cmp	r5, #0
   376c6:	d00d      	beq.n	376e4 <__sfp+0x4c>
   376c8:	3468      	adds	r4, #104	; 0x68
   376ca:	e7f2      	b.n	376b2 <__sfp+0x1a>
   376cc:	2104      	movs	r1, #4
   376ce:	0038      	movs	r0, r7
   376d0:	f7ff ff98 	bl	37604 <__sfmoreglue>
   376d4:	6030      	str	r0, [r6, #0]
   376d6:	2800      	cmp	r0, #0
   376d8:	d1f0      	bne.n	376bc <__sfp+0x24>
   376da:	230c      	movs	r3, #12
   376dc:	0004      	movs	r4, r0
   376de:	603b      	str	r3, [r7, #0]
   376e0:	0020      	movs	r0, r4
   376e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   376e4:	2301      	movs	r3, #1
   376e6:	0020      	movs	r0, r4
   376e8:	425b      	negs	r3, r3
   376ea:	81e3      	strh	r3, [r4, #14]
   376ec:	3302      	adds	r3, #2
   376ee:	81a3      	strh	r3, [r4, #12]
   376f0:	6665      	str	r5, [r4, #100]	; 0x64
   376f2:	6025      	str	r5, [r4, #0]
   376f4:	60a5      	str	r5, [r4, #8]
   376f6:	6065      	str	r5, [r4, #4]
   376f8:	6125      	str	r5, [r4, #16]
   376fa:	6165      	str	r5, [r4, #20]
   376fc:	61a5      	str	r5, [r4, #24]
   376fe:	2208      	movs	r2, #8
   37700:	0029      	movs	r1, r5
   37702:	305c      	adds	r0, #92	; 0x5c
   37704:	f7ff facb 	bl	36c9e <memset>
   37708:	6365      	str	r5, [r4, #52]	; 0x34
   3770a:	63a5      	str	r5, [r4, #56]	; 0x38
   3770c:	64a5      	str	r5, [r4, #72]	; 0x48
   3770e:	64e5      	str	r5, [r4, #76]	; 0x4c
   37710:	e7e6      	b.n	376e0 <__sfp+0x48>
   37712:	46c0      	nop			; (mov r8, r8)
   37714:	0003c734 	.word	0x0003c734

00037718 <_fwalk_reent>:
   37718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3771a:	0004      	movs	r4, r0
   3771c:	0007      	movs	r7, r0
   3771e:	2600      	movs	r6, #0
   37720:	9101      	str	r1, [sp, #4]
   37722:	3448      	adds	r4, #72	; 0x48
   37724:	2c00      	cmp	r4, #0
   37726:	d101      	bne.n	3772c <_fwalk_reent+0x14>
   37728:	0030      	movs	r0, r6
   3772a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   3772c:	6863      	ldr	r3, [r4, #4]
   3772e:	68a5      	ldr	r5, [r4, #8]
   37730:	9300      	str	r3, [sp, #0]
   37732:	9b00      	ldr	r3, [sp, #0]
   37734:	3b01      	subs	r3, #1
   37736:	9300      	str	r3, [sp, #0]
   37738:	d501      	bpl.n	3773e <_fwalk_reent+0x26>
   3773a:	6824      	ldr	r4, [r4, #0]
   3773c:	e7f2      	b.n	37724 <_fwalk_reent+0xc>
   3773e:	89ab      	ldrh	r3, [r5, #12]
   37740:	2b01      	cmp	r3, #1
   37742:	d908      	bls.n	37756 <_fwalk_reent+0x3e>
   37744:	220e      	movs	r2, #14
   37746:	5eab      	ldrsh	r3, [r5, r2]
   37748:	3301      	adds	r3, #1
   3774a:	d004      	beq.n	37756 <_fwalk_reent+0x3e>
   3774c:	0029      	movs	r1, r5
   3774e:	0038      	movs	r0, r7
   37750:	9b01      	ldr	r3, [sp, #4]
   37752:	4798      	blx	r3
   37754:	4306      	orrs	r6, r0
   37756:	3568      	adds	r5, #104	; 0x68
   37758:	e7eb      	b.n	37732 <_fwalk_reent+0x1a>

0003775a <__locale_ctype_ptr_l>:
   3775a:	30ec      	adds	r0, #236	; 0xec
   3775c:	6800      	ldr	r0, [r0, #0]
   3775e:	4770      	bx	lr

00037760 <__locale_ctype_ptr>:
   37760:	4b04      	ldr	r3, [pc, #16]	; (37774 <__locale_ctype_ptr+0x14>)
   37762:	681b      	ldr	r3, [r3, #0]
   37764:	6a1b      	ldr	r3, [r3, #32]
   37766:	2b00      	cmp	r3, #0
   37768:	d100      	bne.n	3776c <__locale_ctype_ptr+0xc>
   3776a:	4b03      	ldr	r3, [pc, #12]	; (37778 <__locale_ctype_ptr+0x18>)
   3776c:	33ec      	adds	r3, #236	; 0xec
   3776e:	6818      	ldr	r0, [r3, #0]
   37770:	4770      	bx	lr
   37772:	46c0      	nop			; (mov r8, r8)
   37774:	20000120 	.word	0x20000120
   37778:	20000184 	.word	0x20000184

0003777c <__swhatbuf_r>:
   3777c:	b570      	push	{r4, r5, r6, lr}
   3777e:	000e      	movs	r6, r1
   37780:	001d      	movs	r5, r3
   37782:	230e      	movs	r3, #14
   37784:	5ec9      	ldrsh	r1, [r1, r3]
   37786:	b090      	sub	sp, #64	; 0x40
   37788:	0014      	movs	r4, r2
   3778a:	2900      	cmp	r1, #0
   3778c:	da07      	bge.n	3779e <__swhatbuf_r+0x22>
   3778e:	2300      	movs	r3, #0
   37790:	602b      	str	r3, [r5, #0]
   37792:	89b3      	ldrh	r3, [r6, #12]
   37794:	061b      	lsls	r3, r3, #24
   37796:	d411      	bmi.n	377bc <__swhatbuf_r+0x40>
   37798:	2380      	movs	r3, #128	; 0x80
   3779a:	00db      	lsls	r3, r3, #3
   3779c:	e00f      	b.n	377be <__swhatbuf_r+0x42>
   3779e:	aa01      	add	r2, sp, #4
   377a0:	f000 fbe6 	bl	37f70 <_fstat_r>
   377a4:	2800      	cmp	r0, #0
   377a6:	dbf2      	blt.n	3778e <__swhatbuf_r+0x12>
   377a8:	22f0      	movs	r2, #240	; 0xf0
   377aa:	9b02      	ldr	r3, [sp, #8]
   377ac:	0212      	lsls	r2, r2, #8
   377ae:	4013      	ands	r3, r2
   377b0:	4a05      	ldr	r2, [pc, #20]	; (377c8 <__swhatbuf_r+0x4c>)
   377b2:	189b      	adds	r3, r3, r2
   377b4:	425a      	negs	r2, r3
   377b6:	4153      	adcs	r3, r2
   377b8:	602b      	str	r3, [r5, #0]
   377ba:	e7ed      	b.n	37798 <__swhatbuf_r+0x1c>
   377bc:	2340      	movs	r3, #64	; 0x40
   377be:	2000      	movs	r0, #0
   377c0:	6023      	str	r3, [r4, #0]
   377c2:	b010      	add	sp, #64	; 0x40
   377c4:	bd70      	pop	{r4, r5, r6, pc}
   377c6:	46c0      	nop			; (mov r8, r8)
   377c8:	ffffe000 	.word	0xffffe000

000377cc <__smakebuf_r>:
   377cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   377ce:	2602      	movs	r6, #2
   377d0:	898b      	ldrh	r3, [r1, #12]
   377d2:	0005      	movs	r5, r0
   377d4:	000c      	movs	r4, r1
   377d6:	4233      	tst	r3, r6
   377d8:	d006      	beq.n	377e8 <__smakebuf_r+0x1c>
   377da:	0023      	movs	r3, r4
   377dc:	3347      	adds	r3, #71	; 0x47
   377de:	6023      	str	r3, [r4, #0]
   377e0:	6123      	str	r3, [r4, #16]
   377e2:	2301      	movs	r3, #1
   377e4:	6163      	str	r3, [r4, #20]
   377e6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   377e8:	ab01      	add	r3, sp, #4
   377ea:	466a      	mov	r2, sp
   377ec:	f7ff ffc6 	bl	3777c <__swhatbuf_r>
   377f0:	9900      	ldr	r1, [sp, #0]
   377f2:	0007      	movs	r7, r0
   377f4:	0028      	movs	r0, r5
   377f6:	f7ff faa5 	bl	36d44 <_malloc_r>
   377fa:	2800      	cmp	r0, #0
   377fc:	d108      	bne.n	37810 <__smakebuf_r+0x44>
   377fe:	220c      	movs	r2, #12
   37800:	5ea3      	ldrsh	r3, [r4, r2]
   37802:	059a      	lsls	r2, r3, #22
   37804:	d4ef      	bmi.n	377e6 <__smakebuf_r+0x1a>
   37806:	2203      	movs	r2, #3
   37808:	4393      	bics	r3, r2
   3780a:	431e      	orrs	r6, r3
   3780c:	81a6      	strh	r6, [r4, #12]
   3780e:	e7e4      	b.n	377da <__smakebuf_r+0xe>
   37810:	4b0f      	ldr	r3, [pc, #60]	; (37850 <__smakebuf_r+0x84>)
   37812:	62ab      	str	r3, [r5, #40]	; 0x28
   37814:	2380      	movs	r3, #128	; 0x80
   37816:	89a2      	ldrh	r2, [r4, #12]
   37818:	6020      	str	r0, [r4, #0]
   3781a:	4313      	orrs	r3, r2
   3781c:	81a3      	strh	r3, [r4, #12]
   3781e:	9b00      	ldr	r3, [sp, #0]
   37820:	6120      	str	r0, [r4, #16]
   37822:	6163      	str	r3, [r4, #20]
   37824:	9b01      	ldr	r3, [sp, #4]
   37826:	2b00      	cmp	r3, #0
   37828:	d00d      	beq.n	37846 <__smakebuf_r+0x7a>
   3782a:	230e      	movs	r3, #14
   3782c:	5ee1      	ldrsh	r1, [r4, r3]
   3782e:	0028      	movs	r0, r5
   37830:	f000 fbb0 	bl	37f94 <_isatty_r>
   37834:	2800      	cmp	r0, #0
   37836:	d006      	beq.n	37846 <__smakebuf_r+0x7a>
   37838:	2203      	movs	r2, #3
   3783a:	89a3      	ldrh	r3, [r4, #12]
   3783c:	4393      	bics	r3, r2
   3783e:	001a      	movs	r2, r3
   37840:	2301      	movs	r3, #1
   37842:	4313      	orrs	r3, r2
   37844:	81a3      	strh	r3, [r4, #12]
   37846:	89a0      	ldrh	r0, [r4, #12]
   37848:	4338      	orrs	r0, r7
   3784a:	81a0      	strh	r0, [r4, #12]
   3784c:	e7cb      	b.n	377e6 <__smakebuf_r+0x1a>
   3784e:	46c0      	nop			; (mov r8, r8)
   37850:	000375ad 	.word	0x000375ad

00037854 <__ascii_mbtowc>:
   37854:	b082      	sub	sp, #8
   37856:	2900      	cmp	r1, #0
   37858:	d100      	bne.n	3785c <__ascii_mbtowc+0x8>
   3785a:	a901      	add	r1, sp, #4
   3785c:	1e10      	subs	r0, r2, #0
   3785e:	d006      	beq.n	3786e <__ascii_mbtowc+0x1a>
   37860:	2b00      	cmp	r3, #0
   37862:	d006      	beq.n	37872 <__ascii_mbtowc+0x1e>
   37864:	7813      	ldrb	r3, [r2, #0]
   37866:	600b      	str	r3, [r1, #0]
   37868:	7810      	ldrb	r0, [r2, #0]
   3786a:	1e43      	subs	r3, r0, #1
   3786c:	4198      	sbcs	r0, r3
   3786e:	b002      	add	sp, #8
   37870:	4770      	bx	lr
   37872:	2002      	movs	r0, #2
   37874:	4240      	negs	r0, r0
   37876:	e7fa      	b.n	3786e <__ascii_mbtowc+0x1a>

00037878 <__malloc_lock>:
   37878:	4770      	bx	lr

0003787a <__malloc_unlock>:
   3787a:	4770      	bx	lr

0003787c <__ssputs_r>:
   3787c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3787e:	688e      	ldr	r6, [r1, #8]
   37880:	b085      	sub	sp, #20
   37882:	0007      	movs	r7, r0
   37884:	000c      	movs	r4, r1
   37886:	9203      	str	r2, [sp, #12]
   37888:	9301      	str	r3, [sp, #4]
   3788a:	429e      	cmp	r6, r3
   3788c:	d839      	bhi.n	37902 <__ssputs_r+0x86>
   3788e:	2390      	movs	r3, #144	; 0x90
   37890:	898a      	ldrh	r2, [r1, #12]
   37892:	00db      	lsls	r3, r3, #3
   37894:	421a      	tst	r2, r3
   37896:	d034      	beq.n	37902 <__ssputs_r+0x86>
   37898:	2503      	movs	r5, #3
   3789a:	6909      	ldr	r1, [r1, #16]
   3789c:	6823      	ldr	r3, [r4, #0]
   3789e:	1a5b      	subs	r3, r3, r1
   378a0:	9302      	str	r3, [sp, #8]
   378a2:	6963      	ldr	r3, [r4, #20]
   378a4:	9802      	ldr	r0, [sp, #8]
   378a6:	435d      	muls	r5, r3
   378a8:	0feb      	lsrs	r3, r5, #31
   378aa:	195d      	adds	r5, r3, r5
   378ac:	9b01      	ldr	r3, [sp, #4]
   378ae:	106d      	asrs	r5, r5, #1
   378b0:	3301      	adds	r3, #1
   378b2:	181b      	adds	r3, r3, r0
   378b4:	42ab      	cmp	r3, r5
   378b6:	d900      	bls.n	378ba <__ssputs_r+0x3e>
   378b8:	001d      	movs	r5, r3
   378ba:	0553      	lsls	r3, r2, #21
   378bc:	d532      	bpl.n	37924 <__ssputs_r+0xa8>
   378be:	0029      	movs	r1, r5
   378c0:	0038      	movs	r0, r7
   378c2:	f7ff fa3f 	bl	36d44 <_malloc_r>
   378c6:	1e06      	subs	r6, r0, #0
   378c8:	d109      	bne.n	378de <__ssputs_r+0x62>
   378ca:	230c      	movs	r3, #12
   378cc:	603b      	str	r3, [r7, #0]
   378ce:	2340      	movs	r3, #64	; 0x40
   378d0:	2001      	movs	r0, #1
   378d2:	89a2      	ldrh	r2, [r4, #12]
   378d4:	4240      	negs	r0, r0
   378d6:	4313      	orrs	r3, r2
   378d8:	81a3      	strh	r3, [r4, #12]
   378da:	b005      	add	sp, #20
   378dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   378de:	9a02      	ldr	r2, [sp, #8]
   378e0:	6921      	ldr	r1, [r4, #16]
   378e2:	f7ff f9c1 	bl	36c68 <memcpy>
   378e6:	89a3      	ldrh	r3, [r4, #12]
   378e8:	4a14      	ldr	r2, [pc, #80]	; (3793c <__ssputs_r+0xc0>)
   378ea:	401a      	ands	r2, r3
   378ec:	2380      	movs	r3, #128	; 0x80
   378ee:	4313      	orrs	r3, r2
   378f0:	81a3      	strh	r3, [r4, #12]
   378f2:	9b02      	ldr	r3, [sp, #8]
   378f4:	6126      	str	r6, [r4, #16]
   378f6:	18f6      	adds	r6, r6, r3
   378f8:	6026      	str	r6, [r4, #0]
   378fa:	6165      	str	r5, [r4, #20]
   378fc:	9e01      	ldr	r6, [sp, #4]
   378fe:	1aed      	subs	r5, r5, r3
   37900:	60a5      	str	r5, [r4, #8]
   37902:	9b01      	ldr	r3, [sp, #4]
   37904:	42b3      	cmp	r3, r6
   37906:	d200      	bcs.n	3790a <__ssputs_r+0x8e>
   37908:	001e      	movs	r6, r3
   3790a:	0032      	movs	r2, r6
   3790c:	9903      	ldr	r1, [sp, #12]
   3790e:	6820      	ldr	r0, [r4, #0]
   37910:	f7ff f9b3 	bl	36c7a <memmove>
   37914:	68a3      	ldr	r3, [r4, #8]
   37916:	2000      	movs	r0, #0
   37918:	1b9b      	subs	r3, r3, r6
   3791a:	60a3      	str	r3, [r4, #8]
   3791c:	6823      	ldr	r3, [r4, #0]
   3791e:	199e      	adds	r6, r3, r6
   37920:	6026      	str	r6, [r4, #0]
   37922:	e7da      	b.n	378da <__ssputs_r+0x5e>
   37924:	002a      	movs	r2, r5
   37926:	0038      	movs	r0, r7
   37928:	f000 fb65 	bl	37ff6 <_realloc_r>
   3792c:	1e06      	subs	r6, r0, #0
   3792e:	d1e0      	bne.n	378f2 <__ssputs_r+0x76>
   37930:	6921      	ldr	r1, [r4, #16]
   37932:	0038      	movs	r0, r7
   37934:	f7ff f9bc 	bl	36cb0 <_free_r>
   37938:	e7c7      	b.n	378ca <__ssputs_r+0x4e>
   3793a:	46c0      	nop			; (mov r8, r8)
   3793c:	fffffb7f 	.word	0xfffffb7f

00037940 <_svfiprintf_r>:
   37940:	b5f0      	push	{r4, r5, r6, r7, lr}
   37942:	b09f      	sub	sp, #124	; 0x7c
   37944:	9002      	str	r0, [sp, #8]
   37946:	9305      	str	r3, [sp, #20]
   37948:	898b      	ldrh	r3, [r1, #12]
   3794a:	000f      	movs	r7, r1
   3794c:	0016      	movs	r6, r2
   3794e:	061b      	lsls	r3, r3, #24
   37950:	d511      	bpl.n	37976 <_svfiprintf_r+0x36>
   37952:	690b      	ldr	r3, [r1, #16]
   37954:	2b00      	cmp	r3, #0
   37956:	d10e      	bne.n	37976 <_svfiprintf_r+0x36>
   37958:	2140      	movs	r1, #64	; 0x40
   3795a:	f7ff f9f3 	bl	36d44 <_malloc_r>
   3795e:	6038      	str	r0, [r7, #0]
   37960:	6138      	str	r0, [r7, #16]
   37962:	2800      	cmp	r0, #0
   37964:	d105      	bne.n	37972 <_svfiprintf_r+0x32>
   37966:	230c      	movs	r3, #12
   37968:	9a02      	ldr	r2, [sp, #8]
   3796a:	3801      	subs	r0, #1
   3796c:	6013      	str	r3, [r2, #0]
   3796e:	b01f      	add	sp, #124	; 0x7c
   37970:	bdf0      	pop	{r4, r5, r6, r7, pc}
   37972:	2340      	movs	r3, #64	; 0x40
   37974:	617b      	str	r3, [r7, #20]
   37976:	2300      	movs	r3, #0
   37978:	ad06      	add	r5, sp, #24
   3797a:	616b      	str	r3, [r5, #20]
   3797c:	3320      	adds	r3, #32
   3797e:	766b      	strb	r3, [r5, #25]
   37980:	3310      	adds	r3, #16
   37982:	76ab      	strb	r3, [r5, #26]
   37984:	0034      	movs	r4, r6
   37986:	7823      	ldrb	r3, [r4, #0]
   37988:	2b00      	cmp	r3, #0
   3798a:	d147      	bne.n	37a1c <_svfiprintf_r+0xdc>
   3798c:	1ba3      	subs	r3, r4, r6
   3798e:	9304      	str	r3, [sp, #16]
   37990:	d00d      	beq.n	379ae <_svfiprintf_r+0x6e>
   37992:	1ba3      	subs	r3, r4, r6
   37994:	0032      	movs	r2, r6
   37996:	0039      	movs	r1, r7
   37998:	9802      	ldr	r0, [sp, #8]
   3799a:	f7ff ff6f 	bl	3787c <__ssputs_r>
   3799e:	1c43      	adds	r3, r0, #1
   379a0:	d100      	bne.n	379a4 <_svfiprintf_r+0x64>
   379a2:	e0b5      	b.n	37b10 <_svfiprintf_r+0x1d0>
   379a4:	696a      	ldr	r2, [r5, #20]
   379a6:	9b04      	ldr	r3, [sp, #16]
   379a8:	4694      	mov	ip, r2
   379aa:	4463      	add	r3, ip
   379ac:	616b      	str	r3, [r5, #20]
   379ae:	7823      	ldrb	r3, [r4, #0]
   379b0:	2b00      	cmp	r3, #0
   379b2:	d100      	bne.n	379b6 <_svfiprintf_r+0x76>
   379b4:	e0ac      	b.n	37b10 <_svfiprintf_r+0x1d0>
   379b6:	2201      	movs	r2, #1
   379b8:	2300      	movs	r3, #0
   379ba:	4252      	negs	r2, r2
   379bc:	606a      	str	r2, [r5, #4]
   379be:	a902      	add	r1, sp, #8
   379c0:	3254      	adds	r2, #84	; 0x54
   379c2:	1852      	adds	r2, r2, r1
   379c4:	3401      	adds	r4, #1
   379c6:	602b      	str	r3, [r5, #0]
   379c8:	60eb      	str	r3, [r5, #12]
   379ca:	60ab      	str	r3, [r5, #8]
   379cc:	7013      	strb	r3, [r2, #0]
   379ce:	65ab      	str	r3, [r5, #88]	; 0x58
   379d0:	4e58      	ldr	r6, [pc, #352]	; (37b34 <_svfiprintf_r+0x1f4>)
   379d2:	2205      	movs	r2, #5
   379d4:	7821      	ldrb	r1, [r4, #0]
   379d6:	0030      	movs	r0, r6
   379d8:	f000 fb02 	bl	37fe0 <memchr>
   379dc:	1c62      	adds	r2, r4, #1
   379de:	2800      	cmp	r0, #0
   379e0:	d120      	bne.n	37a24 <_svfiprintf_r+0xe4>
   379e2:	6829      	ldr	r1, [r5, #0]
   379e4:	06cb      	lsls	r3, r1, #27
   379e6:	d504      	bpl.n	379f2 <_svfiprintf_r+0xb2>
   379e8:	2353      	movs	r3, #83	; 0x53
   379ea:	ae02      	add	r6, sp, #8
   379ec:	3020      	adds	r0, #32
   379ee:	199b      	adds	r3, r3, r6
   379f0:	7018      	strb	r0, [r3, #0]
   379f2:	070b      	lsls	r3, r1, #28
   379f4:	d504      	bpl.n	37a00 <_svfiprintf_r+0xc0>
   379f6:	2353      	movs	r3, #83	; 0x53
   379f8:	202b      	movs	r0, #43	; 0x2b
   379fa:	ae02      	add	r6, sp, #8
   379fc:	199b      	adds	r3, r3, r6
   379fe:	7018      	strb	r0, [r3, #0]
   37a00:	7823      	ldrb	r3, [r4, #0]
   37a02:	2b2a      	cmp	r3, #42	; 0x2a
   37a04:	d016      	beq.n	37a34 <_svfiprintf_r+0xf4>
   37a06:	2000      	movs	r0, #0
   37a08:	210a      	movs	r1, #10
   37a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   37a0c:	7822      	ldrb	r2, [r4, #0]
   37a0e:	3a30      	subs	r2, #48	; 0x30
   37a10:	2a09      	cmp	r2, #9
   37a12:	d955      	bls.n	37ac0 <_svfiprintf_r+0x180>
   37a14:	2800      	cmp	r0, #0
   37a16:	d015      	beq.n	37a44 <_svfiprintf_r+0x104>
   37a18:	9309      	str	r3, [sp, #36]	; 0x24
   37a1a:	e013      	b.n	37a44 <_svfiprintf_r+0x104>
   37a1c:	2b25      	cmp	r3, #37	; 0x25
   37a1e:	d0b5      	beq.n	3798c <_svfiprintf_r+0x4c>
   37a20:	3401      	adds	r4, #1
   37a22:	e7b0      	b.n	37986 <_svfiprintf_r+0x46>
   37a24:	2301      	movs	r3, #1
   37a26:	1b80      	subs	r0, r0, r6
   37a28:	4083      	lsls	r3, r0
   37a2a:	6829      	ldr	r1, [r5, #0]
   37a2c:	0014      	movs	r4, r2
   37a2e:	430b      	orrs	r3, r1
   37a30:	602b      	str	r3, [r5, #0]
   37a32:	e7cd      	b.n	379d0 <_svfiprintf_r+0x90>
   37a34:	9b05      	ldr	r3, [sp, #20]
   37a36:	1d18      	adds	r0, r3, #4
   37a38:	681b      	ldr	r3, [r3, #0]
   37a3a:	9005      	str	r0, [sp, #20]
   37a3c:	2b00      	cmp	r3, #0
   37a3e:	db39      	blt.n	37ab4 <_svfiprintf_r+0x174>
   37a40:	9309      	str	r3, [sp, #36]	; 0x24
   37a42:	0014      	movs	r4, r2
   37a44:	7823      	ldrb	r3, [r4, #0]
   37a46:	2b2e      	cmp	r3, #46	; 0x2e
   37a48:	d10b      	bne.n	37a62 <_svfiprintf_r+0x122>
   37a4a:	7863      	ldrb	r3, [r4, #1]
   37a4c:	1c62      	adds	r2, r4, #1
   37a4e:	2b2a      	cmp	r3, #42	; 0x2a
   37a50:	d13e      	bne.n	37ad0 <_svfiprintf_r+0x190>
   37a52:	9b05      	ldr	r3, [sp, #20]
   37a54:	3402      	adds	r4, #2
   37a56:	1d1a      	adds	r2, r3, #4
   37a58:	681b      	ldr	r3, [r3, #0]
   37a5a:	9205      	str	r2, [sp, #20]
   37a5c:	2b00      	cmp	r3, #0
   37a5e:	db34      	blt.n	37aca <_svfiprintf_r+0x18a>
   37a60:	9307      	str	r3, [sp, #28]
   37a62:	4e35      	ldr	r6, [pc, #212]	; (37b38 <_svfiprintf_r+0x1f8>)
   37a64:	7821      	ldrb	r1, [r4, #0]
   37a66:	2203      	movs	r2, #3
   37a68:	0030      	movs	r0, r6
   37a6a:	f000 fab9 	bl	37fe0 <memchr>
   37a6e:	2800      	cmp	r0, #0
   37a70:	d006      	beq.n	37a80 <_svfiprintf_r+0x140>
   37a72:	2340      	movs	r3, #64	; 0x40
   37a74:	1b80      	subs	r0, r0, r6
   37a76:	4083      	lsls	r3, r0
   37a78:	682a      	ldr	r2, [r5, #0]
   37a7a:	3401      	adds	r4, #1
   37a7c:	4313      	orrs	r3, r2
   37a7e:	602b      	str	r3, [r5, #0]
   37a80:	7821      	ldrb	r1, [r4, #0]
   37a82:	2206      	movs	r2, #6
   37a84:	482d      	ldr	r0, [pc, #180]	; (37b3c <_svfiprintf_r+0x1fc>)
   37a86:	1c66      	adds	r6, r4, #1
   37a88:	7629      	strb	r1, [r5, #24]
   37a8a:	f000 faa9 	bl	37fe0 <memchr>
   37a8e:	2800      	cmp	r0, #0
   37a90:	d046      	beq.n	37b20 <_svfiprintf_r+0x1e0>
   37a92:	4b2b      	ldr	r3, [pc, #172]	; (37b40 <_svfiprintf_r+0x200>)
   37a94:	2b00      	cmp	r3, #0
   37a96:	d12f      	bne.n	37af8 <_svfiprintf_r+0x1b8>
   37a98:	6829      	ldr	r1, [r5, #0]
   37a9a:	9b05      	ldr	r3, [sp, #20]
   37a9c:	2207      	movs	r2, #7
   37a9e:	05c9      	lsls	r1, r1, #23
   37aa0:	d528      	bpl.n	37af4 <_svfiprintf_r+0x1b4>
   37aa2:	189b      	adds	r3, r3, r2
   37aa4:	4393      	bics	r3, r2
   37aa6:	3308      	adds	r3, #8
   37aa8:	9305      	str	r3, [sp, #20]
   37aaa:	696b      	ldr	r3, [r5, #20]
   37aac:	9a03      	ldr	r2, [sp, #12]
   37aae:	189b      	adds	r3, r3, r2
   37ab0:	616b      	str	r3, [r5, #20]
   37ab2:	e767      	b.n	37984 <_svfiprintf_r+0x44>
   37ab4:	425b      	negs	r3, r3
   37ab6:	60eb      	str	r3, [r5, #12]
   37ab8:	2302      	movs	r3, #2
   37aba:	430b      	orrs	r3, r1
   37abc:	602b      	str	r3, [r5, #0]
   37abe:	e7c0      	b.n	37a42 <_svfiprintf_r+0x102>
   37ac0:	434b      	muls	r3, r1
   37ac2:	3401      	adds	r4, #1
   37ac4:	189b      	adds	r3, r3, r2
   37ac6:	2001      	movs	r0, #1
   37ac8:	e7a0      	b.n	37a0c <_svfiprintf_r+0xcc>
   37aca:	2301      	movs	r3, #1
   37acc:	425b      	negs	r3, r3
   37ace:	e7c7      	b.n	37a60 <_svfiprintf_r+0x120>
   37ad0:	2300      	movs	r3, #0
   37ad2:	0014      	movs	r4, r2
   37ad4:	200a      	movs	r0, #10
   37ad6:	001a      	movs	r2, r3
   37ad8:	606b      	str	r3, [r5, #4]
   37ada:	7821      	ldrb	r1, [r4, #0]
   37adc:	3930      	subs	r1, #48	; 0x30
   37ade:	2909      	cmp	r1, #9
   37ae0:	d903      	bls.n	37aea <_svfiprintf_r+0x1aa>
   37ae2:	2b00      	cmp	r3, #0
   37ae4:	d0bd      	beq.n	37a62 <_svfiprintf_r+0x122>
   37ae6:	9207      	str	r2, [sp, #28]
   37ae8:	e7bb      	b.n	37a62 <_svfiprintf_r+0x122>
   37aea:	4342      	muls	r2, r0
   37aec:	3401      	adds	r4, #1
   37aee:	1852      	adds	r2, r2, r1
   37af0:	2301      	movs	r3, #1
   37af2:	e7f2      	b.n	37ada <_svfiprintf_r+0x19a>
   37af4:	3307      	adds	r3, #7
   37af6:	e7d5      	b.n	37aa4 <_svfiprintf_r+0x164>
   37af8:	ab05      	add	r3, sp, #20
   37afa:	9300      	str	r3, [sp, #0]
   37afc:	003a      	movs	r2, r7
   37afe:	4b11      	ldr	r3, [pc, #68]	; (37b44 <_svfiprintf_r+0x204>)
   37b00:	0029      	movs	r1, r5
   37b02:	9802      	ldr	r0, [sp, #8]
   37b04:	e000      	b.n	37b08 <_svfiprintf_r+0x1c8>
   37b06:	bf00      	nop
   37b08:	9003      	str	r0, [sp, #12]
   37b0a:	9b03      	ldr	r3, [sp, #12]
   37b0c:	3301      	adds	r3, #1
   37b0e:	d1cc      	bne.n	37aaa <_svfiprintf_r+0x16a>
   37b10:	89bb      	ldrh	r3, [r7, #12]
   37b12:	980b      	ldr	r0, [sp, #44]	; 0x2c
   37b14:	065b      	lsls	r3, r3, #25
   37b16:	d400      	bmi.n	37b1a <_svfiprintf_r+0x1da>
   37b18:	e729      	b.n	3796e <_svfiprintf_r+0x2e>
   37b1a:	2001      	movs	r0, #1
   37b1c:	4240      	negs	r0, r0
   37b1e:	e726      	b.n	3796e <_svfiprintf_r+0x2e>
   37b20:	ab05      	add	r3, sp, #20
   37b22:	9300      	str	r3, [sp, #0]
   37b24:	003a      	movs	r2, r7
   37b26:	4b07      	ldr	r3, [pc, #28]	; (37b44 <_svfiprintf_r+0x204>)
   37b28:	0029      	movs	r1, r5
   37b2a:	9802      	ldr	r0, [sp, #8]
   37b2c:	f000 f87a 	bl	37c24 <_printf_i>
   37b30:	e7ea      	b.n	37b08 <_svfiprintf_r+0x1c8>
   37b32:	46c0      	nop			; (mov r8, r8)
   37b34:	0003c7a2 	.word	0x0003c7a2
   37b38:	0003c7a8 	.word	0x0003c7a8
   37b3c:	0003c7ac 	.word	0x0003c7ac
   37b40:	00000000 	.word	0x00000000
   37b44:	0003787d 	.word	0x0003787d

00037b48 <_printf_common>:
   37b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   37b4a:	0015      	movs	r5, r2
   37b4c:	9301      	str	r3, [sp, #4]
   37b4e:	688a      	ldr	r2, [r1, #8]
   37b50:	690b      	ldr	r3, [r1, #16]
   37b52:	9000      	str	r0, [sp, #0]
   37b54:	000c      	movs	r4, r1
   37b56:	4293      	cmp	r3, r2
   37b58:	da00      	bge.n	37b5c <_printf_common+0x14>
   37b5a:	0013      	movs	r3, r2
   37b5c:	0022      	movs	r2, r4
   37b5e:	602b      	str	r3, [r5, #0]
   37b60:	3243      	adds	r2, #67	; 0x43
   37b62:	7812      	ldrb	r2, [r2, #0]
   37b64:	2a00      	cmp	r2, #0
   37b66:	d001      	beq.n	37b6c <_printf_common+0x24>
   37b68:	3301      	adds	r3, #1
   37b6a:	602b      	str	r3, [r5, #0]
   37b6c:	6823      	ldr	r3, [r4, #0]
   37b6e:	069b      	lsls	r3, r3, #26
   37b70:	d502      	bpl.n	37b78 <_printf_common+0x30>
   37b72:	682b      	ldr	r3, [r5, #0]
   37b74:	3302      	adds	r3, #2
   37b76:	602b      	str	r3, [r5, #0]
   37b78:	2706      	movs	r7, #6
   37b7a:	6823      	ldr	r3, [r4, #0]
   37b7c:	401f      	ands	r7, r3
   37b7e:	d027      	beq.n	37bd0 <_printf_common+0x88>
   37b80:	0023      	movs	r3, r4
   37b82:	3343      	adds	r3, #67	; 0x43
   37b84:	781b      	ldrb	r3, [r3, #0]
   37b86:	1e5a      	subs	r2, r3, #1
   37b88:	4193      	sbcs	r3, r2
   37b8a:	6822      	ldr	r2, [r4, #0]
   37b8c:	0692      	lsls	r2, r2, #26
   37b8e:	d430      	bmi.n	37bf2 <_printf_common+0xaa>
   37b90:	0022      	movs	r2, r4
   37b92:	9901      	ldr	r1, [sp, #4]
   37b94:	3243      	adds	r2, #67	; 0x43
   37b96:	9800      	ldr	r0, [sp, #0]
   37b98:	9e08      	ldr	r6, [sp, #32]
   37b9a:	47b0      	blx	r6
   37b9c:	1c43      	adds	r3, r0, #1
   37b9e:	d025      	beq.n	37bec <_printf_common+0xa4>
   37ba0:	2306      	movs	r3, #6
   37ba2:	6820      	ldr	r0, [r4, #0]
   37ba4:	682a      	ldr	r2, [r5, #0]
   37ba6:	68e1      	ldr	r1, [r4, #12]
   37ba8:	4003      	ands	r3, r0
   37baa:	2500      	movs	r5, #0
   37bac:	2b04      	cmp	r3, #4
   37bae:	d103      	bne.n	37bb8 <_printf_common+0x70>
   37bb0:	1a8d      	subs	r5, r1, r2
   37bb2:	43eb      	mvns	r3, r5
   37bb4:	17db      	asrs	r3, r3, #31
   37bb6:	401d      	ands	r5, r3
   37bb8:	68a3      	ldr	r3, [r4, #8]
   37bba:	6922      	ldr	r2, [r4, #16]
   37bbc:	4293      	cmp	r3, r2
   37bbe:	dd01      	ble.n	37bc4 <_printf_common+0x7c>
   37bc0:	1a9b      	subs	r3, r3, r2
   37bc2:	18ed      	adds	r5, r5, r3
   37bc4:	2700      	movs	r7, #0
   37bc6:	42bd      	cmp	r5, r7
   37bc8:	d120      	bne.n	37c0c <_printf_common+0xc4>
   37bca:	2000      	movs	r0, #0
   37bcc:	e010      	b.n	37bf0 <_printf_common+0xa8>
   37bce:	3701      	adds	r7, #1
   37bd0:	68e3      	ldr	r3, [r4, #12]
   37bd2:	682a      	ldr	r2, [r5, #0]
   37bd4:	1a9b      	subs	r3, r3, r2
   37bd6:	429f      	cmp	r7, r3
   37bd8:	dad2      	bge.n	37b80 <_printf_common+0x38>
   37bda:	0022      	movs	r2, r4
   37bdc:	2301      	movs	r3, #1
   37bde:	3219      	adds	r2, #25
   37be0:	9901      	ldr	r1, [sp, #4]
   37be2:	9800      	ldr	r0, [sp, #0]
   37be4:	9e08      	ldr	r6, [sp, #32]
   37be6:	47b0      	blx	r6
   37be8:	1c43      	adds	r3, r0, #1
   37bea:	d1f0      	bne.n	37bce <_printf_common+0x86>
   37bec:	2001      	movs	r0, #1
   37bee:	4240      	negs	r0, r0
   37bf0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   37bf2:	2030      	movs	r0, #48	; 0x30
   37bf4:	18e1      	adds	r1, r4, r3
   37bf6:	3143      	adds	r1, #67	; 0x43
   37bf8:	7008      	strb	r0, [r1, #0]
   37bfa:	0021      	movs	r1, r4
   37bfc:	1c5a      	adds	r2, r3, #1
   37bfe:	3145      	adds	r1, #69	; 0x45
   37c00:	7809      	ldrb	r1, [r1, #0]
   37c02:	18a2      	adds	r2, r4, r2
   37c04:	3243      	adds	r2, #67	; 0x43
   37c06:	3302      	adds	r3, #2
   37c08:	7011      	strb	r1, [r2, #0]
   37c0a:	e7c1      	b.n	37b90 <_printf_common+0x48>
   37c0c:	0022      	movs	r2, r4
   37c0e:	2301      	movs	r3, #1
   37c10:	321a      	adds	r2, #26
   37c12:	9901      	ldr	r1, [sp, #4]
   37c14:	9800      	ldr	r0, [sp, #0]
   37c16:	9e08      	ldr	r6, [sp, #32]
   37c18:	47b0      	blx	r6
   37c1a:	1c43      	adds	r3, r0, #1
   37c1c:	d0e6      	beq.n	37bec <_printf_common+0xa4>
   37c1e:	3701      	adds	r7, #1
   37c20:	e7d1      	b.n	37bc6 <_printf_common+0x7e>
	...

00037c24 <_printf_i>:
   37c24:	b5f0      	push	{r4, r5, r6, r7, lr}
   37c26:	b08b      	sub	sp, #44	; 0x2c
   37c28:	9206      	str	r2, [sp, #24]
   37c2a:	000a      	movs	r2, r1
   37c2c:	3243      	adds	r2, #67	; 0x43
   37c2e:	9307      	str	r3, [sp, #28]
   37c30:	9005      	str	r0, [sp, #20]
   37c32:	9204      	str	r2, [sp, #16]
   37c34:	7e0a      	ldrb	r2, [r1, #24]
   37c36:	000c      	movs	r4, r1
   37c38:	9b10      	ldr	r3, [sp, #64]	; 0x40
   37c3a:	2a6e      	cmp	r2, #110	; 0x6e
   37c3c:	d100      	bne.n	37c40 <_printf_i+0x1c>
   37c3e:	e08f      	b.n	37d60 <_printf_i+0x13c>
   37c40:	d817      	bhi.n	37c72 <_printf_i+0x4e>
   37c42:	2a63      	cmp	r2, #99	; 0x63
   37c44:	d02c      	beq.n	37ca0 <_printf_i+0x7c>
   37c46:	d808      	bhi.n	37c5a <_printf_i+0x36>
   37c48:	2a00      	cmp	r2, #0
   37c4a:	d100      	bne.n	37c4e <_printf_i+0x2a>
   37c4c:	e099      	b.n	37d82 <_printf_i+0x15e>
   37c4e:	2a58      	cmp	r2, #88	; 0x58
   37c50:	d054      	beq.n	37cfc <_printf_i+0xd8>
   37c52:	0026      	movs	r6, r4
   37c54:	3642      	adds	r6, #66	; 0x42
   37c56:	7032      	strb	r2, [r6, #0]
   37c58:	e029      	b.n	37cae <_printf_i+0x8a>
   37c5a:	2a64      	cmp	r2, #100	; 0x64
   37c5c:	d001      	beq.n	37c62 <_printf_i+0x3e>
   37c5e:	2a69      	cmp	r2, #105	; 0x69
   37c60:	d1f7      	bne.n	37c52 <_printf_i+0x2e>
   37c62:	6821      	ldr	r1, [r4, #0]
   37c64:	681a      	ldr	r2, [r3, #0]
   37c66:	0608      	lsls	r0, r1, #24
   37c68:	d523      	bpl.n	37cb2 <_printf_i+0x8e>
   37c6a:	1d11      	adds	r1, r2, #4
   37c6c:	6019      	str	r1, [r3, #0]
   37c6e:	6815      	ldr	r5, [r2, #0]
   37c70:	e025      	b.n	37cbe <_printf_i+0x9a>
   37c72:	2a73      	cmp	r2, #115	; 0x73
   37c74:	d100      	bne.n	37c78 <_printf_i+0x54>
   37c76:	e088      	b.n	37d8a <_printf_i+0x166>
   37c78:	d808      	bhi.n	37c8c <_printf_i+0x68>
   37c7a:	2a6f      	cmp	r2, #111	; 0x6f
   37c7c:	d029      	beq.n	37cd2 <_printf_i+0xae>
   37c7e:	2a70      	cmp	r2, #112	; 0x70
   37c80:	d1e7      	bne.n	37c52 <_printf_i+0x2e>
   37c82:	2220      	movs	r2, #32
   37c84:	6809      	ldr	r1, [r1, #0]
   37c86:	430a      	orrs	r2, r1
   37c88:	6022      	str	r2, [r4, #0]
   37c8a:	e003      	b.n	37c94 <_printf_i+0x70>
   37c8c:	2a75      	cmp	r2, #117	; 0x75
   37c8e:	d020      	beq.n	37cd2 <_printf_i+0xae>
   37c90:	2a78      	cmp	r2, #120	; 0x78
   37c92:	d1de      	bne.n	37c52 <_printf_i+0x2e>
   37c94:	0022      	movs	r2, r4
   37c96:	2178      	movs	r1, #120	; 0x78
   37c98:	3245      	adds	r2, #69	; 0x45
   37c9a:	7011      	strb	r1, [r2, #0]
   37c9c:	4a6c      	ldr	r2, [pc, #432]	; (37e50 <_printf_i+0x22c>)
   37c9e:	e030      	b.n	37d02 <_printf_i+0xde>
   37ca0:	000e      	movs	r6, r1
   37ca2:	681a      	ldr	r2, [r3, #0]
   37ca4:	3642      	adds	r6, #66	; 0x42
   37ca6:	1d11      	adds	r1, r2, #4
   37ca8:	6019      	str	r1, [r3, #0]
   37caa:	6813      	ldr	r3, [r2, #0]
   37cac:	7033      	strb	r3, [r6, #0]
   37cae:	2301      	movs	r3, #1
   37cb0:	e079      	b.n	37da6 <_printf_i+0x182>
   37cb2:	0649      	lsls	r1, r1, #25
   37cb4:	d5d9      	bpl.n	37c6a <_printf_i+0x46>
   37cb6:	1d11      	adds	r1, r2, #4
   37cb8:	6019      	str	r1, [r3, #0]
   37cba:	2300      	movs	r3, #0
   37cbc:	5ed5      	ldrsh	r5, [r2, r3]
   37cbe:	2d00      	cmp	r5, #0
   37cc0:	da03      	bge.n	37cca <_printf_i+0xa6>
   37cc2:	232d      	movs	r3, #45	; 0x2d
   37cc4:	9a04      	ldr	r2, [sp, #16]
   37cc6:	426d      	negs	r5, r5
   37cc8:	7013      	strb	r3, [r2, #0]
   37cca:	4b62      	ldr	r3, [pc, #392]	; (37e54 <_printf_i+0x230>)
   37ccc:	270a      	movs	r7, #10
   37cce:	9303      	str	r3, [sp, #12]
   37cd0:	e02f      	b.n	37d32 <_printf_i+0x10e>
   37cd2:	6820      	ldr	r0, [r4, #0]
   37cd4:	6819      	ldr	r1, [r3, #0]
   37cd6:	0605      	lsls	r5, r0, #24
   37cd8:	d503      	bpl.n	37ce2 <_printf_i+0xbe>
   37cda:	1d08      	adds	r0, r1, #4
   37cdc:	6018      	str	r0, [r3, #0]
   37cde:	680d      	ldr	r5, [r1, #0]
   37ce0:	e005      	b.n	37cee <_printf_i+0xca>
   37ce2:	0640      	lsls	r0, r0, #25
   37ce4:	d5f9      	bpl.n	37cda <_printf_i+0xb6>
   37ce6:	680d      	ldr	r5, [r1, #0]
   37ce8:	1d08      	adds	r0, r1, #4
   37cea:	6018      	str	r0, [r3, #0]
   37cec:	b2ad      	uxth	r5, r5
   37cee:	4b59      	ldr	r3, [pc, #356]	; (37e54 <_printf_i+0x230>)
   37cf0:	2708      	movs	r7, #8
   37cf2:	9303      	str	r3, [sp, #12]
   37cf4:	2a6f      	cmp	r2, #111	; 0x6f
   37cf6:	d018      	beq.n	37d2a <_printf_i+0x106>
   37cf8:	270a      	movs	r7, #10
   37cfa:	e016      	b.n	37d2a <_printf_i+0x106>
   37cfc:	3145      	adds	r1, #69	; 0x45
   37cfe:	700a      	strb	r2, [r1, #0]
   37d00:	4a54      	ldr	r2, [pc, #336]	; (37e54 <_printf_i+0x230>)
   37d02:	9203      	str	r2, [sp, #12]
   37d04:	681a      	ldr	r2, [r3, #0]
   37d06:	6821      	ldr	r1, [r4, #0]
   37d08:	1d10      	adds	r0, r2, #4
   37d0a:	6018      	str	r0, [r3, #0]
   37d0c:	6815      	ldr	r5, [r2, #0]
   37d0e:	0608      	lsls	r0, r1, #24
   37d10:	d522      	bpl.n	37d58 <_printf_i+0x134>
   37d12:	07cb      	lsls	r3, r1, #31
   37d14:	d502      	bpl.n	37d1c <_printf_i+0xf8>
   37d16:	2320      	movs	r3, #32
   37d18:	4319      	orrs	r1, r3
   37d1a:	6021      	str	r1, [r4, #0]
   37d1c:	2710      	movs	r7, #16
   37d1e:	2d00      	cmp	r5, #0
   37d20:	d103      	bne.n	37d2a <_printf_i+0x106>
   37d22:	2320      	movs	r3, #32
   37d24:	6822      	ldr	r2, [r4, #0]
   37d26:	439a      	bics	r2, r3
   37d28:	6022      	str	r2, [r4, #0]
   37d2a:	0023      	movs	r3, r4
   37d2c:	2200      	movs	r2, #0
   37d2e:	3343      	adds	r3, #67	; 0x43
   37d30:	701a      	strb	r2, [r3, #0]
   37d32:	6863      	ldr	r3, [r4, #4]
   37d34:	60a3      	str	r3, [r4, #8]
   37d36:	2b00      	cmp	r3, #0
   37d38:	db5c      	blt.n	37df4 <_printf_i+0x1d0>
   37d3a:	2204      	movs	r2, #4
   37d3c:	6821      	ldr	r1, [r4, #0]
   37d3e:	4391      	bics	r1, r2
   37d40:	6021      	str	r1, [r4, #0]
   37d42:	2d00      	cmp	r5, #0
   37d44:	d158      	bne.n	37df8 <_printf_i+0x1d4>
   37d46:	9e04      	ldr	r6, [sp, #16]
   37d48:	2b00      	cmp	r3, #0
   37d4a:	d064      	beq.n	37e16 <_printf_i+0x1f2>
   37d4c:	0026      	movs	r6, r4
   37d4e:	9b03      	ldr	r3, [sp, #12]
   37d50:	3642      	adds	r6, #66	; 0x42
   37d52:	781b      	ldrb	r3, [r3, #0]
   37d54:	7033      	strb	r3, [r6, #0]
   37d56:	e05e      	b.n	37e16 <_printf_i+0x1f2>
   37d58:	0648      	lsls	r0, r1, #25
   37d5a:	d5da      	bpl.n	37d12 <_printf_i+0xee>
   37d5c:	b2ad      	uxth	r5, r5
   37d5e:	e7d8      	b.n	37d12 <_printf_i+0xee>
   37d60:	6809      	ldr	r1, [r1, #0]
   37d62:	681a      	ldr	r2, [r3, #0]
   37d64:	0608      	lsls	r0, r1, #24
   37d66:	d505      	bpl.n	37d74 <_printf_i+0x150>
   37d68:	1d11      	adds	r1, r2, #4
   37d6a:	6019      	str	r1, [r3, #0]
   37d6c:	6813      	ldr	r3, [r2, #0]
   37d6e:	6962      	ldr	r2, [r4, #20]
   37d70:	601a      	str	r2, [r3, #0]
   37d72:	e006      	b.n	37d82 <_printf_i+0x15e>
   37d74:	0649      	lsls	r1, r1, #25
   37d76:	d5f7      	bpl.n	37d68 <_printf_i+0x144>
   37d78:	1d11      	adds	r1, r2, #4
   37d7a:	6019      	str	r1, [r3, #0]
   37d7c:	6813      	ldr	r3, [r2, #0]
   37d7e:	8aa2      	ldrh	r2, [r4, #20]
   37d80:	801a      	strh	r2, [r3, #0]
   37d82:	2300      	movs	r3, #0
   37d84:	9e04      	ldr	r6, [sp, #16]
   37d86:	6123      	str	r3, [r4, #16]
   37d88:	e054      	b.n	37e34 <_printf_i+0x210>
   37d8a:	681a      	ldr	r2, [r3, #0]
   37d8c:	1d11      	adds	r1, r2, #4
   37d8e:	6019      	str	r1, [r3, #0]
   37d90:	6816      	ldr	r6, [r2, #0]
   37d92:	2100      	movs	r1, #0
   37d94:	6862      	ldr	r2, [r4, #4]
   37d96:	0030      	movs	r0, r6
   37d98:	f000 f922 	bl	37fe0 <memchr>
   37d9c:	2800      	cmp	r0, #0
   37d9e:	d001      	beq.n	37da4 <_printf_i+0x180>
   37da0:	1b80      	subs	r0, r0, r6
   37da2:	6060      	str	r0, [r4, #4]
   37da4:	6863      	ldr	r3, [r4, #4]
   37da6:	6123      	str	r3, [r4, #16]
   37da8:	2300      	movs	r3, #0
   37daa:	9a04      	ldr	r2, [sp, #16]
   37dac:	7013      	strb	r3, [r2, #0]
   37dae:	e041      	b.n	37e34 <_printf_i+0x210>
   37db0:	6923      	ldr	r3, [r4, #16]
   37db2:	0032      	movs	r2, r6
   37db4:	9906      	ldr	r1, [sp, #24]
   37db6:	9805      	ldr	r0, [sp, #20]
   37db8:	9d07      	ldr	r5, [sp, #28]
   37dba:	47a8      	blx	r5
   37dbc:	1c43      	adds	r3, r0, #1
   37dbe:	d043      	beq.n	37e48 <_printf_i+0x224>
   37dc0:	6823      	ldr	r3, [r4, #0]
   37dc2:	2500      	movs	r5, #0
   37dc4:	079b      	lsls	r3, r3, #30
   37dc6:	d40f      	bmi.n	37de8 <_printf_i+0x1c4>
   37dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   37dca:	68e0      	ldr	r0, [r4, #12]
   37dcc:	4298      	cmp	r0, r3
   37dce:	da3d      	bge.n	37e4c <_printf_i+0x228>
   37dd0:	0018      	movs	r0, r3
   37dd2:	e03b      	b.n	37e4c <_printf_i+0x228>
   37dd4:	0022      	movs	r2, r4
   37dd6:	2301      	movs	r3, #1
   37dd8:	3219      	adds	r2, #25
   37dda:	9906      	ldr	r1, [sp, #24]
   37ddc:	9805      	ldr	r0, [sp, #20]
   37dde:	9e07      	ldr	r6, [sp, #28]
   37de0:	47b0      	blx	r6
   37de2:	1c43      	adds	r3, r0, #1
   37de4:	d030      	beq.n	37e48 <_printf_i+0x224>
   37de6:	3501      	adds	r5, #1
   37de8:	68e3      	ldr	r3, [r4, #12]
   37dea:	9a09      	ldr	r2, [sp, #36]	; 0x24
   37dec:	1a9b      	subs	r3, r3, r2
   37dee:	429d      	cmp	r5, r3
   37df0:	dbf0      	blt.n	37dd4 <_printf_i+0x1b0>
   37df2:	e7e9      	b.n	37dc8 <_printf_i+0x1a4>
   37df4:	2d00      	cmp	r5, #0
   37df6:	d0a9      	beq.n	37d4c <_printf_i+0x128>
   37df8:	9e04      	ldr	r6, [sp, #16]
   37dfa:	0028      	movs	r0, r5
   37dfc:	0039      	movs	r1, r7
   37dfe:	f7fc fd31 	bl	34864 <__aeabi_uidivmod>
   37e02:	9b03      	ldr	r3, [sp, #12]
   37e04:	3e01      	subs	r6, #1
   37e06:	5c5b      	ldrb	r3, [r3, r1]
   37e08:	0028      	movs	r0, r5
   37e0a:	7033      	strb	r3, [r6, #0]
   37e0c:	0039      	movs	r1, r7
   37e0e:	f7fc fca3 	bl	34758 <__udivsi3>
   37e12:	1e05      	subs	r5, r0, #0
   37e14:	d1f1      	bne.n	37dfa <_printf_i+0x1d6>
   37e16:	2f08      	cmp	r7, #8
   37e18:	d109      	bne.n	37e2e <_printf_i+0x20a>
   37e1a:	6823      	ldr	r3, [r4, #0]
   37e1c:	07db      	lsls	r3, r3, #31
   37e1e:	d506      	bpl.n	37e2e <_printf_i+0x20a>
   37e20:	6863      	ldr	r3, [r4, #4]
   37e22:	6922      	ldr	r2, [r4, #16]
   37e24:	4293      	cmp	r3, r2
   37e26:	dc02      	bgt.n	37e2e <_printf_i+0x20a>
   37e28:	2330      	movs	r3, #48	; 0x30
   37e2a:	3e01      	subs	r6, #1
   37e2c:	7033      	strb	r3, [r6, #0]
   37e2e:	9b04      	ldr	r3, [sp, #16]
   37e30:	1b9b      	subs	r3, r3, r6
   37e32:	6123      	str	r3, [r4, #16]
   37e34:	9b07      	ldr	r3, [sp, #28]
   37e36:	aa09      	add	r2, sp, #36	; 0x24
   37e38:	9300      	str	r3, [sp, #0]
   37e3a:	0021      	movs	r1, r4
   37e3c:	9b06      	ldr	r3, [sp, #24]
   37e3e:	9805      	ldr	r0, [sp, #20]
   37e40:	f7ff fe82 	bl	37b48 <_printf_common>
   37e44:	1c43      	adds	r3, r0, #1
   37e46:	d1b3      	bne.n	37db0 <_printf_i+0x18c>
   37e48:	2001      	movs	r0, #1
   37e4a:	4240      	negs	r0, r0
   37e4c:	b00b      	add	sp, #44	; 0x2c
   37e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   37e50:	0003c7c4 	.word	0x0003c7c4
   37e54:	0003c7b3 	.word	0x0003c7b3

00037e58 <__sread>:
   37e58:	b570      	push	{r4, r5, r6, lr}
   37e5a:	000c      	movs	r4, r1
   37e5c:	250e      	movs	r5, #14
   37e5e:	5f49      	ldrsh	r1, [r1, r5]
   37e60:	f000 f8f0 	bl	38044 <_read_r>
   37e64:	2800      	cmp	r0, #0
   37e66:	db03      	blt.n	37e70 <__sread+0x18>
   37e68:	6d63      	ldr	r3, [r4, #84]	; 0x54
   37e6a:	181b      	adds	r3, r3, r0
   37e6c:	6563      	str	r3, [r4, #84]	; 0x54
   37e6e:	bd70      	pop	{r4, r5, r6, pc}
   37e70:	89a3      	ldrh	r3, [r4, #12]
   37e72:	4a02      	ldr	r2, [pc, #8]	; (37e7c <__sread+0x24>)
   37e74:	4013      	ands	r3, r2
   37e76:	81a3      	strh	r3, [r4, #12]
   37e78:	e7f9      	b.n	37e6e <__sread+0x16>
   37e7a:	46c0      	nop			; (mov r8, r8)
   37e7c:	ffffefff 	.word	0xffffefff

00037e80 <__swrite>:
   37e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37e82:	001f      	movs	r7, r3
   37e84:	898b      	ldrh	r3, [r1, #12]
   37e86:	0005      	movs	r5, r0
   37e88:	000c      	movs	r4, r1
   37e8a:	0016      	movs	r6, r2
   37e8c:	05db      	lsls	r3, r3, #23
   37e8e:	d505      	bpl.n	37e9c <__swrite+0x1c>
   37e90:	230e      	movs	r3, #14
   37e92:	5ec9      	ldrsh	r1, [r1, r3]
   37e94:	2200      	movs	r2, #0
   37e96:	2302      	movs	r3, #2
   37e98:	f000 f88e 	bl	37fb8 <_lseek_r>
   37e9c:	89a3      	ldrh	r3, [r4, #12]
   37e9e:	4a05      	ldr	r2, [pc, #20]	; (37eb4 <__swrite+0x34>)
   37ea0:	0028      	movs	r0, r5
   37ea2:	4013      	ands	r3, r2
   37ea4:	81a3      	strh	r3, [r4, #12]
   37ea6:	0032      	movs	r2, r6
   37ea8:	230e      	movs	r3, #14
   37eaa:	5ee1      	ldrsh	r1, [r4, r3]
   37eac:	003b      	movs	r3, r7
   37eae:	f000 f839 	bl	37f24 <_write_r>
   37eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   37eb4:	ffffefff 	.word	0xffffefff

00037eb8 <__sseek>:
   37eb8:	b570      	push	{r4, r5, r6, lr}
   37eba:	000c      	movs	r4, r1
   37ebc:	250e      	movs	r5, #14
   37ebe:	5f49      	ldrsh	r1, [r1, r5]
   37ec0:	f000 f87a 	bl	37fb8 <_lseek_r>
   37ec4:	89a3      	ldrh	r3, [r4, #12]
   37ec6:	1c42      	adds	r2, r0, #1
   37ec8:	d103      	bne.n	37ed2 <__sseek+0x1a>
   37eca:	4a05      	ldr	r2, [pc, #20]	; (37ee0 <__sseek+0x28>)
   37ecc:	4013      	ands	r3, r2
   37ece:	81a3      	strh	r3, [r4, #12]
   37ed0:	bd70      	pop	{r4, r5, r6, pc}
   37ed2:	2280      	movs	r2, #128	; 0x80
   37ed4:	0152      	lsls	r2, r2, #5
   37ed6:	4313      	orrs	r3, r2
   37ed8:	81a3      	strh	r3, [r4, #12]
   37eda:	6560      	str	r0, [r4, #84]	; 0x54
   37edc:	e7f8      	b.n	37ed0 <__sseek+0x18>
   37ede:	46c0      	nop			; (mov r8, r8)
   37ee0:	ffffefff 	.word	0xffffefff

00037ee4 <__sclose>:
   37ee4:	b510      	push	{r4, lr}
   37ee6:	230e      	movs	r3, #14
   37ee8:	5ec9      	ldrsh	r1, [r1, r3]
   37eea:	f000 f82f 	bl	37f4c <_close_r>
   37eee:	bd10      	pop	{r4, pc}

00037ef0 <strchr>:
   37ef0:	b2c9      	uxtb	r1, r1
   37ef2:	7803      	ldrb	r3, [r0, #0]
   37ef4:	2b00      	cmp	r3, #0
   37ef6:	d004      	beq.n	37f02 <strchr+0x12>
   37ef8:	4299      	cmp	r1, r3
   37efa:	d100      	bne.n	37efe <strchr+0xe>
   37efc:	4770      	bx	lr
   37efe:	3001      	adds	r0, #1
   37f00:	e7f7      	b.n	37ef2 <strchr+0x2>
   37f02:	424b      	negs	r3, r1
   37f04:	4159      	adcs	r1, r3
   37f06:	4249      	negs	r1, r1
   37f08:	4008      	ands	r0, r1
   37f0a:	e7f7      	b.n	37efc <strchr+0xc>

00037f0c <__ascii_wctomb>:
   37f0c:	1e0b      	subs	r3, r1, #0
   37f0e:	d004      	beq.n	37f1a <__ascii_wctomb+0xe>
   37f10:	2aff      	cmp	r2, #255	; 0xff
   37f12:	d904      	bls.n	37f1e <__ascii_wctomb+0x12>
   37f14:	238a      	movs	r3, #138	; 0x8a
   37f16:	6003      	str	r3, [r0, #0]
   37f18:	3b8b      	subs	r3, #139	; 0x8b
   37f1a:	0018      	movs	r0, r3
   37f1c:	4770      	bx	lr
   37f1e:	700a      	strb	r2, [r1, #0]
   37f20:	2301      	movs	r3, #1
   37f22:	e7fa      	b.n	37f1a <__ascii_wctomb+0xe>

00037f24 <_write_r>:
   37f24:	b570      	push	{r4, r5, r6, lr}
   37f26:	0005      	movs	r5, r0
   37f28:	0008      	movs	r0, r1
   37f2a:	0011      	movs	r1, r2
   37f2c:	2200      	movs	r2, #0
   37f2e:	4c06      	ldr	r4, [pc, #24]	; (37f48 <_write_r+0x24>)
   37f30:	6022      	str	r2, [r4, #0]
   37f32:	001a      	movs	r2, r3
   37f34:	f7f4 ffc2 	bl	2cebc <_write>
   37f38:	1c43      	adds	r3, r0, #1
   37f3a:	d103      	bne.n	37f44 <_write_r+0x20>
   37f3c:	6823      	ldr	r3, [r4, #0]
   37f3e:	2b00      	cmp	r3, #0
   37f40:	d000      	beq.n	37f44 <_write_r+0x20>
   37f42:	602b      	str	r3, [r5, #0]
   37f44:	bd70      	pop	{r4, r5, r6, pc}
   37f46:	46c0      	nop			; (mov r8, r8)
   37f48:	200058b8 	.word	0x200058b8

00037f4c <_close_r>:
   37f4c:	2300      	movs	r3, #0
   37f4e:	b570      	push	{r4, r5, r6, lr}
   37f50:	4c06      	ldr	r4, [pc, #24]	; (37f6c <_close_r+0x20>)
   37f52:	0005      	movs	r5, r0
   37f54:	0008      	movs	r0, r1
   37f56:	6023      	str	r3, [r4, #0]
   37f58:	f7f5 f804 	bl	2cf64 <_close>
   37f5c:	1c43      	adds	r3, r0, #1
   37f5e:	d103      	bne.n	37f68 <_close_r+0x1c>
   37f60:	6823      	ldr	r3, [r4, #0]
   37f62:	2b00      	cmp	r3, #0
   37f64:	d000      	beq.n	37f68 <_close_r+0x1c>
   37f66:	602b      	str	r3, [r5, #0]
   37f68:	bd70      	pop	{r4, r5, r6, pc}
   37f6a:	46c0      	nop			; (mov r8, r8)
   37f6c:	200058b8 	.word	0x200058b8

00037f70 <_fstat_r>:
   37f70:	2300      	movs	r3, #0
   37f72:	b570      	push	{r4, r5, r6, lr}
   37f74:	4c06      	ldr	r4, [pc, #24]	; (37f90 <_fstat_r+0x20>)
   37f76:	0005      	movs	r5, r0
   37f78:	0008      	movs	r0, r1
   37f7a:	0011      	movs	r1, r2
   37f7c:	6023      	str	r3, [r4, #0]
   37f7e:	f7f4 fffb 	bl	2cf78 <_fstat>
   37f82:	1c43      	adds	r3, r0, #1
   37f84:	d103      	bne.n	37f8e <_fstat_r+0x1e>
   37f86:	6823      	ldr	r3, [r4, #0]
   37f88:	2b00      	cmp	r3, #0
   37f8a:	d000      	beq.n	37f8e <_fstat_r+0x1e>
   37f8c:	602b      	str	r3, [r5, #0]
   37f8e:	bd70      	pop	{r4, r5, r6, pc}
   37f90:	200058b8 	.word	0x200058b8

00037f94 <_isatty_r>:
   37f94:	2300      	movs	r3, #0
   37f96:	b570      	push	{r4, r5, r6, lr}
   37f98:	4c06      	ldr	r4, [pc, #24]	; (37fb4 <_isatty_r+0x20>)
   37f9a:	0005      	movs	r5, r0
   37f9c:	0008      	movs	r0, r1
   37f9e:	6023      	str	r3, [r4, #0]
   37fa0:	f7f4 fff8 	bl	2cf94 <_isatty>
   37fa4:	1c43      	adds	r3, r0, #1
   37fa6:	d103      	bne.n	37fb0 <_isatty_r+0x1c>
   37fa8:	6823      	ldr	r3, [r4, #0]
   37faa:	2b00      	cmp	r3, #0
   37fac:	d000      	beq.n	37fb0 <_isatty_r+0x1c>
   37fae:	602b      	str	r3, [r5, #0]
   37fb0:	bd70      	pop	{r4, r5, r6, pc}
   37fb2:	46c0      	nop			; (mov r8, r8)
   37fb4:	200058b8 	.word	0x200058b8

00037fb8 <_lseek_r>:
   37fb8:	b570      	push	{r4, r5, r6, lr}
   37fba:	0005      	movs	r5, r0
   37fbc:	0008      	movs	r0, r1
   37fbe:	0011      	movs	r1, r2
   37fc0:	2200      	movs	r2, #0
   37fc2:	4c06      	ldr	r4, [pc, #24]	; (37fdc <_lseek_r+0x24>)
   37fc4:	6022      	str	r2, [r4, #0]
   37fc6:	001a      	movs	r2, r3
   37fc8:	f7f4 ffed 	bl	2cfa6 <_lseek>
   37fcc:	1c43      	adds	r3, r0, #1
   37fce:	d103      	bne.n	37fd8 <_lseek_r+0x20>
   37fd0:	6823      	ldr	r3, [r4, #0]
   37fd2:	2b00      	cmp	r3, #0
   37fd4:	d000      	beq.n	37fd8 <_lseek_r+0x20>
   37fd6:	602b      	str	r3, [r5, #0]
   37fd8:	bd70      	pop	{r4, r5, r6, pc}
   37fda:	46c0      	nop			; (mov r8, r8)
   37fdc:	200058b8 	.word	0x200058b8

00037fe0 <memchr>:
   37fe0:	b2c9      	uxtb	r1, r1
   37fe2:	1882      	adds	r2, r0, r2
   37fe4:	4290      	cmp	r0, r2
   37fe6:	d101      	bne.n	37fec <memchr+0xc>
   37fe8:	2000      	movs	r0, #0
   37fea:	4770      	bx	lr
   37fec:	7803      	ldrb	r3, [r0, #0]
   37fee:	428b      	cmp	r3, r1
   37ff0:	d0fb      	beq.n	37fea <memchr+0xa>
   37ff2:	3001      	adds	r0, #1
   37ff4:	e7f6      	b.n	37fe4 <memchr+0x4>

00037ff6 <_realloc_r>:
   37ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37ff8:	0007      	movs	r7, r0
   37ffa:	000d      	movs	r5, r1
   37ffc:	0016      	movs	r6, r2
   37ffe:	2900      	cmp	r1, #0
   38000:	d105      	bne.n	3800e <_realloc_r+0x18>
   38002:	0011      	movs	r1, r2
   38004:	f7fe fe9e 	bl	36d44 <_malloc_r>
   38008:	0004      	movs	r4, r0
   3800a:	0020      	movs	r0, r4
   3800c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3800e:	2a00      	cmp	r2, #0
   38010:	d103      	bne.n	3801a <_realloc_r+0x24>
   38012:	f7fe fe4d 	bl	36cb0 <_free_r>
   38016:	0034      	movs	r4, r6
   38018:	e7f7      	b.n	3800a <_realloc_r+0x14>
   3801a:	f000 f827 	bl	3806c <_malloc_usable_size_r>
   3801e:	002c      	movs	r4, r5
   38020:	4286      	cmp	r6, r0
   38022:	d9f2      	bls.n	3800a <_realloc_r+0x14>
   38024:	0031      	movs	r1, r6
   38026:	0038      	movs	r0, r7
   38028:	f7fe fe8c 	bl	36d44 <_malloc_r>
   3802c:	1e04      	subs	r4, r0, #0
   3802e:	d0ec      	beq.n	3800a <_realloc_r+0x14>
   38030:	0029      	movs	r1, r5
   38032:	0032      	movs	r2, r6
   38034:	f7fe fe18 	bl	36c68 <memcpy>
   38038:	0029      	movs	r1, r5
   3803a:	0038      	movs	r0, r7
   3803c:	f7fe fe38 	bl	36cb0 <_free_r>
   38040:	e7e3      	b.n	3800a <_realloc_r+0x14>
	...

00038044 <_read_r>:
   38044:	b570      	push	{r4, r5, r6, lr}
   38046:	0005      	movs	r5, r0
   38048:	0008      	movs	r0, r1
   3804a:	0011      	movs	r1, r2
   3804c:	2200      	movs	r2, #0
   3804e:	4c06      	ldr	r4, [pc, #24]	; (38068 <_read_r+0x24>)
   38050:	6022      	str	r2, [r4, #0]
   38052:	001a      	movs	r2, r3
   38054:	f7f4 ff08 	bl	2ce68 <_read>
   38058:	1c43      	adds	r3, r0, #1
   3805a:	d103      	bne.n	38064 <_read_r+0x20>
   3805c:	6823      	ldr	r3, [r4, #0]
   3805e:	2b00      	cmp	r3, #0
   38060:	d000      	beq.n	38064 <_read_r+0x20>
   38062:	602b      	str	r3, [r5, #0]
   38064:	bd70      	pop	{r4, r5, r6, pc}
   38066:	46c0      	nop			; (mov r8, r8)
   38068:	200058b8 	.word	0x200058b8

0003806c <_malloc_usable_size_r>:
   3806c:	1f0b      	subs	r3, r1, #4
   3806e:	681b      	ldr	r3, [r3, #0]
   38070:	1f18      	subs	r0, r3, #4
   38072:	2b00      	cmp	r3, #0
   38074:	da01      	bge.n	3807a <_malloc_usable_size_r+0xe>
   38076:	580b      	ldr	r3, [r1, r0]
   38078:	18c0      	adds	r0, r0, r3
   3807a:	4770      	bx	lr
   3807c:	04020100 	.word	0x04020100
   38080:	00001008 	.word	0x00001008
   38084:	7fffffff 	.word	0x7fffffff
   38088:	7fffffff 	.word	0x7fffffff
   3808c:	7fffffff 	.word	0x7fffffff
   38090:	7fffffff 	.word	0x7fffffff
   38094:	7fffffff 	.word	0x7fffffff
   38098:	7eb851ea 	.word	0x7eb851ea
   3809c:	7fffffff 	.word	0x7fffffff
   380a0:	7ef9db21 	.word	0x7ef9db21
   380a4:	7fffffff 	.word	0x7fffffff
   380a8:	7fffffff 	.word	0x7fffffff
   380ac:	7fbe76c7 	.word	0x7fbe76c7
   380b0:	7f5c28f4 	.word	0x7f5c28f4
   380b4:	7fffffff 	.word	0x7fffffff
   380b8:	7eb851ea 	.word	0x7eb851ea
   380bc:	7fffffff 	.word	0x7fffffff
   380c0:	7fffffff 	.word	0x7fffffff
   380c4:	f4240000 	.word	0xf4240000
   380c8:	7a120000 	.word	0x7a120000
   380cc:	3d090000 	.word	0x3d090000
   380d0:	1e848000 	.word	0x1e848000
   380d4:	0f3e58ff 	.word	0x0f3e58ff
   380d8:	07938c54 	.word	0x07938c54
   380dc:	03d09000 	.word	0x03d09000
   380e0:	01ec3810 	.word	0x01ec3810
   380e4:	00f46290 	.word	0x00f46290
   380e8:	007a1200 	.word	0x007a1200
   380ec:	003d0900 	.word	0x003d0900
   380f0:	001e8480 	.word	0x001e8480
   380f4:	000f4240 	.word	0x000f4240
   380f8:	0007a120 	.word	0x0007a120
   380fc:	0003d090 	.word	0x0003d090
   38100:	0001e848 	.word	0x0001e848

00038104 <pcWelcomeMessage>:
   38104:	65657246 534f5452 494c4320 540a0d2e     FreeRTOS CLI...T
   38114:	20657079 706c6548 206f7420 77656976     ype Help to view
   38124:	6c206120 20747369 7220666f 73696765      a list of regis
   38134:	65726574 6f632064 6e616d6d 0d2e7364     tered commands..
   38144:	0000000a 00756d69 3a756d69 74655220     ....imu.imu: Ret
   38154:	736e7275 76206120 65756c61 6f726620     urns a value fro
   38164:	6874206d 4d492065 000a0d55 00007766     m the IMU...fw..
   38174:	203a7766 6e776f44 64616f6c 66206120     fw: Download a f
   38184:	20656c69 20646e61 66726570 206d726f     ile and perform 
   38194:	46206e61 70752057 65746164 00000a0d     an FW update....
   381a4:	00706172 3a706172 69684320 6573656e     rap.rap: Chinese
   381b4:	73654220 61522074 72657070 00000a0d      Best Rapper....
   381c4:	636c6c63 00000064 636c6c63 43203a64     cllcd...cllcd: C
   381d4:	7261656c 54465420 72635320 0d6e6565     lear TFT Screen.
   381e4:	0000000a 6b636f6c 00000000 6b636f6c     ....lock....lock
   381f4:	6f6c203a 74206b63 64206568 21726f6f     : lock the door!
   38204:	00000a0d 6f6c6e75 00006b63 6f6c6e75     ....unlock..unlo
   38214:	203a6b63 6f6c6e75 74206b63 64206568     ck: unlock the d
   38224:	21726f6f 00000a0d 65736572 00000074     oor!....reset...
   38234:	65736572 52203a74 74657365 68742073     reset: Resets th
   38244:	65642065 65636976 00000a0d 64746567     e device....getd
   38254:	61747369 0065636e 64746567 61747369     istance.getdista
   38264:	3a65636e 74655220 736e7275 65687420     nce: Returns the
   38274:	73696420 636e6174 72662065 74206d6f      distance from t
   38284:	55206568 30312d53 65532030 726f736e     he US-100 Sensor
   38294:	000a0d2e 656d6167 00000000 656d6167     ....game....game
   382a4:	6553203a 2073646e 6d6d7564 61672079     : Sends dummy ga
   382b4:	6420656d 0d617461 0000000a 00633269     me data.....i2c.
   382c4:	3a633269 61635320 4920736e 62204332     i2c: Scans I2C b
   382d4:	0a0d7375 00000000 00656d62 3a656d62     us......bme.bme:
   382e4:	69725020 6f20746e 62207475 7320656d      Print out bme s
   382f4:	6f736e65 61642072 0a0d6174 00000000     ensor data......
   38304:	00736c63 3a736c63 656c4320 20737261     cls.cls: Clears 
   38314:	20656874 6d726574 6c616e69 72637320     the terminal scr
   38324:	0d6e6565 0000000a 6c756f43 6f6e2064     een.....Could no
   38334:	6c612074 61636f6c 73206574 70616d65     t allocate semap
   38344:	65726f68 00000a0d 00000a0d 0000616f     hore........oa..
   38354:	325b6325 003e0d4b 00082008 65636341     %c[2K.>.. ..Acce
   38364:	6172656c 6e6f6974 676d5b20 20583a5d     leration [mg]:X 
   38374:	59096425 09642520 6425205a 00000a0d     %d.Y %d.Z %d....
   38384:	64206f4e 20617461 64616572 53202179     No data ready! S
   38394:	69646e65 6420676e 796d6d75 74616420     ending dummy dat
   383a4:	0a0d2061 00000000 325b6325 0000004a     a ......%c[2J...
   383b4:	64757453 73746e65 206f7420 6c6c6966     Students to fill
   383c4:	74756f20 00000021 736e6553 4520726f      out!...Sensor E
   383d4:	726f7272 21642520 00000a0d 74736944     rror %d!....Dist
   383e4:	65636e61 6425203a 0d6d6d20 0000000a     ance: %d mm.....
   383f4:	74736944 65636e61 74614420 514d2061     Distance Data MQ
   38404:	50205454 0d74736f 0000000a 6d6d7544     TT Post.....Dumm
   38414:	61472079 4420656d 20617461 5454514d     y Game Data MQTT
   38424:	736f5020 000a0d74 31202030 20322020      Post...0  1  2 
   38434:	20203320 35202034 20362020 20203720      3  4  5  6  7  
   38444:	39202038 20612020 20206220 64202063     8  9  a  b  c  d
   38454:	20652020 0a0d6620 00000000 78323025       e  f......%02x
   38464:	0000203a 78323025 00000020 20454d42     : ..%02x ...BME 
   38474:	736e6553 4420726f 3a617461 20642520     Sensor Data: %d 
   38484:	25206425 000a0d64                       %d %d...

0003848c <xImuGetCommand>:
   3848c:	00038148 0003814c 00014fb5 00000000     H...L....O......

0003849c <xOTAUCommand>:
   3849c:	00038170 00038174 00015161 00000000     p...t...aQ......

000384ac <xLock>:
   384ac:	000381e8 000381f0 000152c9 00000000     .........R......

000384bc <xUNLock>:
   384bc:	00038208 00038210 000152e9 00000000     .........R......

000384cc <xResetCommand>:
   384cc:	0003822c 00038234 00015181 00000000     ,...4....Q......

000384dc <xI2cScan>:
   384dc:	000382c0 000382c4 000151a1 00000000     .........Q......

000384ec <xBME>:
   384ec:	000382dc 000382e0 00015309 00000000     .........S......

000384fc <xClearScreen>:
   384fc:	00038304 00038308 00015119 00000000     .........Q......
   3850c:	35455345 2d203631 6e6f4320 6c6f7274     ESE516 - Control
   3851c:	696e4920 6f432074 0a0d6564 00000000      Init Code......
   3852c:	4f525245 6e492052 61697469 697a696c     ERROR Initializi
   3853c:	4320676e 72746e6f 44206c6f 20617461     ng Control Data 
   3854c:	75657571 0d217365 0000000a 746e6f43     queues!.....Cont
   3855c:	206c6f72 65726854 203a6461 736e6f43     rol Thread: Cons
   3856c:	64656d75 6d616720 61702065 74656b63     umed game packet
   3857c:	000a0d21 746e6f43 206c6f72 65726854     !...Control Thre
   3858c:	203a6461 6c756f43 6f6e2064 65732074     ad: Could not se
   3859c:	6720646e 20656d61 6b636170 0d217465     nd game packet!.
   385ac:	0000000a                                ....

000385b0 <msgKeypadGetCount>:
   385b0:	00000410 6f727245 6e692072 61697469     ....Error initia
   385c0:	697a696c 5320676e 61736565 722f2177     lizing Seesaw!/r
   385d0:	00006e2f 6f727245 2f722f72 0000006e     /n..Error/r/n...
   385e0:	6e756f46 65532064 77617365 2f722f21     Found Seesaw!/r/
   385f0:	0000006e 6c756f43 6f6e2064 72772074     n...Could not wr
   38600:	20657469 73656553 70207761 2f216e69     ite Seesaw pin!/
   38610:	006e2f72 6c756f43 6f6e2064 65732074     r/n.Could not se
   38620:	65732074 77617365 6f654e20 65786970     t seesaw Neopixe
   38630:	7073206c 21646565 6e2f722f 00000000     l speed!/r/n....
   38640:	6c756f43 6f6e2064 65732074 65732074     Could not set se
   38650:	77617365 6f654e20 65786970 756e206c     esaw Neopixel nu
   38660:	7265626d 20666f20 69766564 2f736563     mber of devices/
   38670:	006e2f72 6f727245 65722072 6e696461     r/n.Error readin
   38680:	65532067 77617365 756f6320 2173746e     g Seesaw counts!
   38690:	6e2f722f 00000000 00001010 0000050e     /r/n............
   386a0:	6c756f43 6f6e2064 6e692074 61697469     Could not initia
   386b0:	657a696c 79654b20 21646170 6e2f722f     lize Keypad!/r/n
   386c0:	00000000                                ....

000386c4 <ASCII>:
   386c4:	00000000 5f000000 07000000 14000700     ......._........
   386d4:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   386e4:	00502255 00000305 41221c00 22410000     U"P......."A..A"
   386f4:	0814001c 0814083e 08083e08 00305000     ....>....>...P0.
   38704:	08080800 60000808 20000060 02040810     .......``.. ....
   38714:	4549513e 7f42003e 61420040 21464951     >QIE>.B.@.BaQIF!
   38724:	314b4541 7f121418 45452710 4a3c3945     AEK1.....'EEE9<J
   38734:	01304949 03050971 49494936 49490636     II0.q...6III6.II
   38744:	36001e29 00000036 00003656 41221408     )..66...V6...."A
   38754:	14141400 41001414 02081422 06095101     .......A"....Q..
   38764:	41794932 11117e3e 497f7e11 3e364949     2IyA>~...~.III6>
   38774:	22414141 2241417f 49497f1c 097f4149     AAA".AA"..IIIA..
   38784:	3e010909 7a494941 0808087f 7f41007f     ...>AIIz......A.
   38794:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   387a4:	0c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   387b4:	0909097f 51413e06 097f5e21 46462919     .....>AQ!^...)FF
   387c4:	31494949 017f0101 40403f01 201f3f40     III1.....?@@@?. 
   387d4:	3f1f2040 3f403840 14081463 70080763     @ .?@8@?c...c..p
   387e4:	51610708 00434549 0041417f 10080402     ..aQIEC..AA.....
   387f4:	41410020 0204007f 40040201 40404040      .AA.......@@@@@
   38804:	04020100 54542000 487f7854 38384444     ..... TTTx.HDD88
   38814:	20444444 48444438 5454387f 7e081854     DDD 8DDH.8TTT..~
   38824:	0c020109 3e525252 0404087f 7d440078     ....RRR>....x.D}
   38834:	40200040 7f003d44 00442810 407f4100     @. @D=...(D..A.@
   38844:	18047c00 087c7804 38780404 38444444     .|...x|...x8DDD8
   38854:	1414147c 14140808 087c7c18 48080404     |........||....H
   38864:	20545454 40443f04 40403c20 201c7c20     TTT .?D@ <@@ |. 
   38874:	3c1c2040 3c403040 28102844 50500c44     @ .<@0@<D(.(D.PP
   38884:	64443c50 00444c54 00413608 007f0000     P<DdTLD..6A.....
   38894:	36410000 08100008 00081008 06090906     ..A6............
   388a4:	2d455345 00363135 636c6557 00656d6f     ESE-516.Welcome.
   388b4:	63746157 676f4468 61745320 3a737574     WatchDog Status:
   388c4:	6b636f4c 00006465 63746157 676f4468     Locked..WatchDog
   388d4:	61745320 3a737574 6f6c6e55 64656b63      Status:Unlocked
   388e4:	00000000 706d6554 74617265 3a657275     ....Temperature:
   388f4:	20642520 00000000 54204955 206b7361      %d ....UI Task 
   38904:	72617453 21646574 00000000              Started!....

00038910 <main_mqtt_broker>:
   38910:	6b6f7262 682e7265 6d657669 6f632e71     broker.hivemq.co
   38920:	0000006d 64333025 00000000 72617473     m...%03d....star
   38930:	6f645f74 6f6c6e77 203a6461 20434d4d     t_download: MMC 
   38940:	726f7473 20656761 20746f6e 64616572     storage not read
   38950:	0a0d2e79 00000000 72617473 6f645f74     y.......start_do
   38960:	6f6c6e77 203a6461 462d6957 73692069     wnload: Wi-Fi is
   38970:	746f6e20 6e6f6320 7463656e 0d2e6465      not connected..
   38980:	0000000a 72617473 6f645f74 6f6c6e77     ....start_downlo
   38990:	203a6461 75716572 20747365 73207369     ad: request is s
   389a0:	20746e65 65726c61 2e796461 00000a0d     ent already.....
   389b0:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   389c0:	6e6e7572 20676e69 6e776f64 64616f6c     running download
   389d0:	726c6120 79646165 000a0d2e 72617473      already....star
   389e0:	6f645f74 6f6c6e77 203a6461 646e6573     t_download: send
   389f0:	20676e69 50545448 71657220 74736575     ing HTTP request
   38a00:	0d2e2e2e 0000000a 70747468 2f2f3a73     ........https://
   38a10:	2e777777 73616573 6570752e 652e6e6e     www.seas.upenn.e
   38a20:	7e2f7564 61676465 492f6372 702e546f     du/~edgarc/IoT.p
   38a30:	00006664 726f7473 69665f65 705f656c     df..store_file_p
   38a40:	656b6361 65203a74 7974706d 74616420     acket: empty dat
   38a50:	0a0d2e61 00000000 726f7473 69665f65     a.......store_fi
   38a60:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   38a70:	656d616e 20736920 61766e69 2e64696c     name is invalid.
   38a80:	776f4420 616f6c6e 61632064 6c65636e      Download cancel
   38a90:	0d2e6465 0000000a 726f7473 69665f65     ed......store_fi
   38aa0:	705f656c 656b6361 63203a74 74616572     le_packet: creat
   38ab0:	20676e69 656c6966 73255b20 000a0d5d     ing file [%s]...
   38ac0:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   38ad0:	66203a74 20656c69 61657263 6e6f6974     t: file creation
   38ae0:	72726520 2021726f 3a746572 0a0d6425      error! ret:%d..
   38af0:	00000000 726f7473 69665f65 705f656c     ....store_file_p
   38b00:	656b6361 66203a74 20656c69 74697277     acket: file writ
   38b10:	72652065 2c726f72 776f6420 616f6c6e     e error, downloa
   38b20:	61632064 6c65636e 0d2e6465 0000000a     d canceled......
   38b30:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   38b40:	72203a74 69656365 5b646576 5d756c25     t: received[%lu]
   38b50:	6966202c 7320656c 5b657a69 5d756c25     , file size[%lu]
   38b60:	00000a0d 726f7473 69665f65 705f656c     ....store_file_p
   38b70:	656b6361 66203a74 20656c69 6e776f64     acket: file down
   38b80:	64616f6c 73206465 65636375 75667373     loaded successfu
   38b90:	2e796c6c 00000a0d 70747468 696c635f     lly.....http_cli
   38ba0:	5f746e65 6c6c6163 6b636162 5448203a     ent_callback: HT
   38bb0:	63205054 6e65696c 6f732074 74656b63     TP client socket
   38bc0:	6e6f6320 7463656e 0d2e6465 0000000a      connected......
   38bd0:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   38be0:	6b636162 6572203a 73657571 6f632074     back: request co
   38bf0:	656c706d 2e646574 00000a0d 70747468     mpleted.....http
   38c00:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   38c10:	6572203a 76696563 72206465 6f707365     : received respo
   38c20:	2065736e 64207525 20617461 657a6973     nse %u data size
   38c30:	0d752520 0000000a 70747468 696c635f      %u.....http_cli
   38c40:	5f746e65 6c6c6163 6b636162 6964203a     ent_callback: di
   38c50:	6e6f6373 7463656e 206e6f69 73616572     sconnection reas
   38c60:	253a6e6f 000a0d64 6f736572 5f65766c     on:%d...resolve_
   38c70:	203a6263 49207325 64612050 73657264     cb: %s IP addres
   38c80:	73692073 2e642520 252e6425 64252e64     s is %d.%d.%d.%d
   38c90:	0a0d0a0d 00000000 69666977 3a62635f     ........wifi_cb:
   38ca0:	4d324d20 4649575f 4f435f49 43454e4e      M2M_WIFI_CONNEC
   38cb0:	0d444554 0000000a 69666977 3a62635f     TED.....wifi_cb:
   38cc0:	4d324d20 4649575f 49445f49 4e4f4353      M2M_WIFI_DISCON
   38cd0:	5443454e 0a0d4445 00000000 657a696c     NECTED......lize
   38ce0:	33343536 00003132 00000068 69666977     654321..h...wifi
   38cf0:	3a62635f 20504920 72646461 20737365     _cb: IP address 
   38d00:	25207369 75252e75 2e75252e 0a0d7525     is %u.%u.%u.%u..
   38d10:	00000000 6f727245 6f632072 63656e6e     ....Error connec
   38d20:	676e6974 206f7420 5454514d 6f724220     ting to MQTT Bro
   38d30:	2172656b 00000a0d 74696e69 6f74735f     ker!....init_sto
   38d40:	65676172 6c70203a 65736165 756c7020     rage: please plu
   38d50:	6e612067 2f445320 20434d4d 64726163     g an SD/MMC card
   38d60:	206e6920 746f6c73 0d2e2e2e 0000000a      in slot........
   38d70:	74696e69 6f74735f 65676172 4453203a     init_storage: SD
   38d80:	72614320 6e692064 6c617473 6166206c      Card install fa
   38d90:	64656c69 000a0d2e 74696e69 6f74735f     iled....init_sto
   38da0:	65676172 7274203a 6e752079 67756c70     rage: try unplug
   38db0:	646e6120 2d657220 67756c70 65687420      and re-plug the
   38dc0:	72616320 0a0d2e64 00000000 74696e69      card.......init
   38dd0:	6f74735f 65676172 6f6d203a 69746e75     _storage: mounti
   38de0:	5320676e 61632044 2e2e6472 000a0d2e     ng SD card......
   38df0:	74696e69 6f74735f 65676172 4453203a     init_storage: SD
   38e00:	72616320 6f6d2064 20746e75 6c696166      card mount fail
   38e10:	20216465 73657228 29642520 00000a0d     ed! (res %d)....
   38e20:	74696e69 6f74735f 65676172 4453203a     init_storage: SD
   38e30:	72616320 6f6d2064 20746e75 0d2e4b4f      card mount OK..
   38e40:	0000000a 666e6f63 72756769 74685f65     ....configure_ht
   38e50:	635f7074 6e65696c 48203a74 20505454     tp_client: HTTP 
   38e60:	65696c63 6920746e 6974696e 7a696c61     client initializ
   38e70:	6f697461 6166206e 64656c69 72282021     ation failed! (r
   38e80:	25207365 0a0d2964 00000000 25200a0d     es %d)........ %
   38e90:	00732a2e 28626772 00000000 47520a0d     .*s.rgb(......RG
   38ea0:	64252042 20642520 0a0d6425 00000000     B %d %d %d......
   38eb0:	6167227b 3a22656d 0000005b 61470a0d     {"game":[.....Ga
   38ec0:	6d20656d 61737365 72206567 69656365     me message recei
   38ed0:	21646576 00000a0d 732a2e25 00000000     ved!....%.*s....
   38ee0:	61500a0d 64657372 6d6f4320 646e616d     ..Parsed Command
   38ef0:	0000203a 002c6425 65530a0d 7020746e     : ..%d,...Sent p
   38f00:	2079616c 63206f74 72746e6f 0d216c6f     lay to control!.
   38f10:	0000000a 61470a0d 6d20656d 61737365     ......Game messa
   38f20:	72206567 69656365 20646576 20747562     ge received but 
   38f30:	20746f6e 65646e75 6f747372 0d21646f     not understood!.
   38f40:	0000000a 4d490a0d 6f742055 20636970     ......IMU topic 
   38f50:	65636572 64657669 000a0d21 69440a0d     received!.....Di
   38f60:	6e617473 74206563 6369706f 63657220     stance topic rec
   38f70:	65766965 0a0d2164 00000000 203e3e20     eived!...... >> 
   38f80:	00000000 4c5f3150 455f4445 31354553     ....P1_LED_ESE51
   38f90:	30545f36 00000000 736c6166 00000065     6_T0....false...
   38fa0:	65757274 00000000 6f430a0d 63656e6e     true......Connec
   38fb0:	676e6974 206f7420 6b6f7242 2e2e7265     ting to Broker..
   38fc0:	0000002e 4a737242 6f564e42 376c4251     ....BrsJBNVoQBl7
   38fd0:	00000000 79747472 6a65626f 00000000     ....rttyobej....
   38fe0:	5454514d 72452020 20726f72 4f4e202d     MQTT  Error - NO
   38ff0:	6f432054 63656e6e 20646574 62206f74     T Connected to b
   39000:	656b6f72 000a0d72 5454514d 6e6f4320     roker...MQTT Con
   39010:	7463656e 74206465 7262206f 72656b6f     nected to broker
   39020:	00000a0d 6e6e6f43 20746365 6c696166     ....Connect fail
   39030:	206f7420 76726573 25287265 20212973      to server(%s)! 
   39040:	72746572 74692079 74756120 74616d6f     retry it automat
   39050:	6c616369 0d2e796c 0000000a 475f3150     ically......P1_G
   39060:	5f454d41 35455345 545f3631 00000030     AME_ESE516_T0...
   39070:	495f3150 455f554d 31354553 30545f36     P1_IMU_ESE516_T0
   39080:	00000000 5454514d 6e6f4320 7463656e     ....MQTT Connect
   39090:	0a0d6465 00000000 5454514d 6f726220     ed......MQTT bro
   390a0:	2072656b 6c636564 20656e69 72756f79     ker decline your
   390b0:	63636120 21737365 72726520 6320726f      access! error c
   390c0:	2065646f 0a0d6425 00000000 5454514d     ode %d......MQTT
   390d0:	73696420 6e6e6f63 65746365 000a0d64      disconnected...
   390e0:	5454514d 696e6920 6c616974 74617a69     MQTT initializat
   390f0:	206e6f69 6c696166 202e6465 6f727245     ion failed. Erro
   39100:	6f632072 69206564 25282073 0a0d2964     r code is (%d)..
   39110:	00000000 5454514d 67657220 65747369     ....MQTT registe
   39120:	61632072 61626c6c 66206b63 656c6961     r callback faile
   39130:	45202e64 726f7272 646f6320 73692065     d. Error code is
   39140:	64252820 000a0d29 2264227b 74227b3a      (%d)...{"d":{"t
   39150:	22706d65 7d64253a 0000007d 4941465b     emp":%d}}...[FAI
   39160:	72205d4c 25207365 000a0d64 67616c46     L] res %d...Flag
   39170:	78742e41 64612074 21646564 00000a0d     A.txt added!....
   39180:	6c463a30 2e416761 00747874 6e6e6f43     0:FlagA.txt.Conn
   39190:	65746365 6f742064 54514d20 72422054     ected to MQTT Br
   391a0:	72656b6f 000a0d21 6d69227b 3a227875     oker!...{"imux":
   391b0:	202c6425 756d6922 203a2279 202c6425     %d, "imuy": %d, 
   391c0:	756d6922 203a227a 007d6425 00006425     "imuz": %d}.%d..
   391d0:	00007d5d 00000a0d 475f3250 5f454d41     ]}......P2_GAME_
   391e0:	35455345 545f3631 00000030 4f525245     ESE516_T0...ERRO
   391f0:	6e492052 61697469 697a696c 5720676e     R Initializing W
   39200:	20696669 61746144 65757120 21736575     ifi Data queues!
   39210:	00000a0d 35455345 2d203631 66695720     ....ESE516 - Wif
   39220:	6e492069 43207469 0d65646f 0000000a     i Init Code.....
   39230:	6e69616d 326d203a 69775f6d 695f6966     main: m2m_wifi_i
   39240:	2074696e 6c6c6163 72726520 2021726f     nit call error! 
   39250:	73657228 29642520 00000a0d 6e69616d     (res %d)....main
   39260:	6f63203a 63656e6e 676e6974 206f7420     : connecting to 
   39270:	69466957 20504120 2e2e7325 000a0d2e     WiFi AP %s......
   39280:	545f3150 45504d45 55544152 455f4552     P1_TEMPERATURE_E
   39290:	31354553 30545f36 00000000 5454514d     SE516_T0....MQTT
   392a0:	6e657320 73252064 00000a0d 000185a4      send %s........
   392b0:	000185b0 000185c2 00018618 00018638     ............8...
   392c0:	706c6568 00000000 65680a0d 0d3a706c     help......help:.
   392d0:	694c200a 20737473 206c6c61 20656874     . Lists all the 
   392e0:	69676572 72657473 63206465 616d6d6f     registered comma
   392f0:	0d73646e 000a0d0a 6f636e49 63657272     nds.....Incorrec
   39300:	6f632074 6e616d6d 61702064 656d6172     t command parame
   39310:	28726574 202e2973 746e4520 22207265     ter(s).  Enter "
   39320:	706c6568 6f742022 65697620 20612077     help" to view a 
   39330:	7473696c 20666f20 69617661 6c62616c     list of availabl
   39340:	6f632065 6e616d6d 0d2e7364 000a0d0a     e commands......
   39350:	6d6d6f43 20646e61 20746f6e 6f636572     Command not reco
   39360:	73696e67 202e6465 746e4520 27207265     gnised.  Enter '
   39370:	706c6568 6f742027 65697620 20612077     help' to view a 
   39380:	7473696c 20666f20 69617661 6c62616c     list of availabl
   39390:	6f632065 6e616d6d 0d2e7364 000a0d0a     e commands......

000393a0 <xHelpCommand>:
   393a0:	000392c0 000392c8 0001a161 00000000     ........a.......
   393b0:	61725476 6e456563 656c6261 43525428     vTraceEnable(TRC
   393c0:	4154535f 415f5452 54494157 534f485f     _START_AWAIT_HOS
   393d0:	6e202954 6120746f 776f6c6c 69206465     T) not allowed i
   393e0:	6e53206e 68737061 6d20746f 0065646f     n Snapshot mode.
   393f0:	78656e55 74636570 61206465 6d756772     Unexpected argum
   39400:	20746e65 76206f74 63617254 616e4565     ent to vTraceEna
   39410:	20656c62 616e7328 6f687370 6f6d2074     ble (snapshot mo
   39420:	00296564 74437a54 00006c72 20746f4e     de).TzCtrl..Not 
   39430:	756f6e65 54206867 204b5341 646e6168     enough TASK hand
   39440:	2073656c 6e69202d 61657263 54206573     les - increase T
   39450:	435f4352 4e5f4746 4b534154 206e6920     RC_CFG_NTASK in 
   39460:	53637274 7370616e 43746f68 69666e6f     trcSnapshotConfi
   39470:	00682e67 20746f4e 756f6e65 49206867     g.h.Not enough I
   39480:	68205253 6c646e61 2d207365 636e6920     SR handles - inc
   39490:	73616572 52542065 46435f43 494e5f47     rease TRC_CFG_NI
   394a0:	69205253 7274206e 616e5363 6f687370     SR in trcSnapsho
   394b0:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   394c0:	756f6e65 53206867 50414d45 45524f48     enough SEMAPHORE
   394d0:	6e616820 73656c64 69202d20 6572636e      handles - incre
   394e0:	20657361 5f435254 5f474643 4d45534e     ase TRC_CFG_NSEM
   394f0:	4f485041 69204552 7274206e 616e5363     APHORE in trcSna
   39500:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
   39510:	20746f4e 756f6e65 4d206867 58455455     Not enough MUTEX
   39520:	6e616820 73656c64 69202d20 6572636e      handles - incre
   39530:	20657361 5f435254 5f474643 54554d4e     ase TRC_CFG_NMUT
   39540:	69205845 7274206e 616e5363 6f687370     EX in trcSnapsho
   39550:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   39560:	756f6e65 51206867 45554555 6e616820     enough QUEUE han
   39570:	73656c64 69202d20 6572636e 20657361     dles - increase 
   39580:	5f435254 5f474643 4555514e 69204555     TRC_CFG_NQUEUE i
   39590:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
   395a0:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
   395b0:	54206867 52454d49 6e616820 73656c64     gh TIMER handles
   395c0:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   395d0:	5f474643 4d49544e 69205245 7274206e     CFG_NTIMER in tr
   395e0:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   395f0:	00000068 20746f4e 756f6e65 45206867     h...Not enough E
   39600:	544e4556 554f5247 61682050 656c646e     VENTGROUP handle
   39610:	202d2073 72636e69 65736165 43525420     s - increase TRC
   39620:	4746435f 56454e5f 47544e45 50554f52     _CFG_NEVENTGROUP
   39630:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
   39640:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
   39650:	53206867 41455254 4655424d 20524546     gh STREAMBUFFER 
   39660:	646e6168 2073656c 6e69202d 61657263     handles - increa
   39670:	54206573 435f4352 4e5f4746 45525453     se TRC_CFG_NSTRE
   39680:	55424d41 52454646 206e6920 53637274     AMBUFFER in trcS
   39690:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
   396a0:	20746f4e 756f6e65 4d206867 41535345     Not enough MESSA
   396b0:	55424547 52454646 6e616820 73656c64     GEBUFFER handles
   396c0:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   396d0:	5f474643 53454d4e 45474153 46465542     CFG_NMESSAGEBUFF
   396e0:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
   396f0:	6e6f4374 2e676966 00000068 547a7370     tConfig.h...pszT
   39700:	65636172 45746547 726f7272 646e6148     raceGetErrorHand
   39710:	3a73656c 766e4920 64696c61 6a626f20     les: Invalid obj
   39720:	63746365 7373616c 00000021 0001a886     ectclass!.......
   39730:	0001a87e 0001a882 0001a876 0001a87a     ~.......v...z...
   39740:	0001a88a 0001a88e 0001a892 0001a896     ................
   39750:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   39760:	64726f63 6e207265 6920746f 6974696e     corder not initi
   39770:	7a696c61 202e6465 20657355 61725476     alized. Use vTra
   39780:	6e456563 656c6261 69202928 6574736e     ceEnable() inste
   39790:	00216461 61747328 70757472 00000029     ad!.(startup)...
   397a0:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   397b0:	64726f63 6e207265 6920746f 6974696e     corder not initi
   397c0:	7a696c61 202c6465 6c6c6163 72547620     alized, call vTr
   397d0:	45656361 6c62616e 20292865 73726966     aceEnable() firs
   397e0:	00002174 43415254 53415f45 54524553     t!..TRACE_ASSERT
   397f0:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   39800:	7265706f 73656974 6e49203a 696c6176     operties: Invali
   39810:	61762064 2065756c 20726f66 646e6168     d value for hand
   39820:	0000656c 43415254 53415f45 54524553     le..TRACE_ASSERT
   39830:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   39840:	7265706f 73656974 616e203a 3d20656d     operties: name =
   39850:	554e203d 00004c4c 61725476 74536563     = NULL..vTraceSt
   39860:	4965726f 65425253 206e6967 6572202d     oreISRBegin - re
   39870:	64726f63 62207265 21797375 65655320     corder busy! See
   39880:	646f6320 6f632065 6e656d6d 00002e74      code comment...
   39890:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   398a0:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   398b0:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   398c0:	6c646e61 4e282065 294c4c55 00000000     andle (NULL)....
   398d0:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   398e0:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   398f0:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   39900:	6c646e61 3e282065 53494e20 00002952     andle (> NISR)..
   39910:	206f6f54 796e616d 73656e20 20646574     Too many nested 
   39920:	65746e69 70757272 00217374 61725476     interrupts!.vTra
   39930:	74536563 4965726f 6e455253 202d2064     ceStoreISREnd - 
   39940:	6f636572 72656472 73756220 53202179     recorder busy! S
   39950:	63206565 2065646f 6d6d6f63 2e746e65     ee code comment.
   39960:	00000000 616d6e55 65686374 61632064     ....Unmatched ca
   39970:	74206c6c 5476206f 65636172 726f7453     ll to vTraceStor
   39980:	52534965 20646e45 53496e28 74636152     eISREnd (nISRact
   39990:	20657669 30203d3d 7865202c 74636570     ive == 0, expect
   399a0:	3e206465 00293020 43415254 53415f45     ed > 0).TRACE_AS
   399b0:	54524553 7277203a 49657469 3a38746e     SERT: writeInt8:
   399c0:	66756220 20726566 4e203d3d 004c4c55      buffer == NULL.
   399d0:	43415254 53415f45 54524553 7277203a     TRACE_ASSERT: wr
   399e0:	49657469 3631746e 7562203a 72656666     iteInt16: buffer
   399f0:	203d3d20 4c4c554e 00000000 43415254      == NULL....TRAC
   39a00:	53415f45 54524553 7277203a 49657469     E_ASSERT: writeI
   39a10:	3233746e 7562203a 72656666 203d3d20     nt32: buffer == 
   39a20:	4c4c554e 00000000 61725476 72506563     NULL....vTracePr
   39a30:	46746e69 54202d20 6d206f6f 20796e61     intF - Too many 
   39a40:	75677261 746e656d 6d202c73 31207861     arguments, max 1
   39a50:	6c612035 65776f6c 00002164 61725476     5 allowed!..vTra
   39a60:	72506563 46746e69 54202d20 6c206f6f     cePrintF - Too l
   39a70:	65677261 67726120 6e656d75 202c7374     arge arguments, 
   39a80:	2078616d 62203233 20657479 6f6c6c61     max 32 byte allo
   39a90:	21646577 00000000 43415254 53415f45     wed!....TRACE_AS
   39aa0:	54524553 5476203a 65636172 69725056     SERT: vTraceVPri
   39ab0:	3a46746e 726f6620 5374616d 3d207274     ntF: formatStr =
   39ac0:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   39ad0:	54524553 5478203a 65636172 69676552     SERT: xTraceRegi
   39ae0:	72657473 69727453 203a676e 6562616c     sterString: labe
   39af0:	3d3d206c 4c554e20 0000004c 43415254     l == NULL...TRAC
   39b00:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   39b10:	74536563 5465726f 526b7361 79646165     ceStoreTaskReady
   39b20:	6e49203a 696c6176 61762064 2065756c     : Invalid value 
   39b30:	20726f66 646e6168 0000656c 6f636552     for handle..Reco
   39b40:	72656472 73756220 202d2079 68676968     rder busy - high
   39b50:	69727020 7469726f 53492079 73752052      priority ISR us
   39b60:	20676e69 63737973 3f6c6c61 29312820     ing syscall? (1)
   39b70:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   39b80:	7270203a 61725476 74536563 4c65726f     : prvTraceStoreL
   39b90:	6f50776f 3a726577 766e4920 64696c61     owPower: Invalid
   39ba0:	616c6620 61762067 0065756c 43415254      flag value.TRAC
   39bb0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   39bc0:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   39bd0:	65203a6c 65646f63 203d3e20 46467830     l: ecode >= 0xFF
   39be0:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   39bf0:	7270203a 61725476 74536563 4b65726f     : prvTraceStoreK
   39c00:	656e7265 6c61436c 6f203a6c 63656a62     ernelCall: objec
   39c10:	616c4374 3e207373 5254203d 5f454341     tClass >= TRACE_
   39c20:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   39c30:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   39c40:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   39c50:	49203a6c 6c61766e 76206469 65756c61     l: Invalid value
   39c60:	726f6620 6a626f20 4e746365 65626d75      for objectNumbe
   39c70:	00000072 6f636552 72656472 73756220     r...Recorder bus
   39c80:	202d2079 68676968 69727020 7469726f     y - high priorit
   39c90:	53492079 73752052 20676e69 63737973     y ISR using sysc
   39ca0:	3f6c6c61 29322820 00000000 43415254     all? (2)....TRAC
   39cb0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   39cc0:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   39cd0:	7469576c 72615068 203a6d61 63747665     lWithParam: evtc
   39ce0:	2065646f 30203d3e 00464678 43415254     ode >= 0xFF.TRAC
   39cf0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   39d00:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   39d10:	7469576c 72615068 203a6d61 656a626f     lWithParam: obje
   39d20:	6c437463 20737361 54203d3e 45434152     ctClass >= TRACE
   39d30:	4c434e5f 45535341 00000053 43415254     _NCLASSES...TRAC
   39d40:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   39d50:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   39d60:	7469576c 72615068 203a6d61 61766e49     lWithParam: Inva
   39d70:	2064696c 756c6176 6f662065 626f2072     lid value for ob
   39d80:	7463656a 626d754e 00007265 6f636552     jectNumber..Reco
   39d90:	72656472 73756220 202d2079 68676968     rder busy - high
   39da0:	69727020 7469726f 53492079 73752052      priority ISR us
   39db0:	20676e69 63737973 3f6c6c61 29332820     ing syscall? (3)
   39dc0:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   39dd0:	7270203a 61725476 65476563 72615074     : prvTraceGetPar
   39de0:	203a6d61 61766e49 2064696c 756c6176     am: Invalid valu
   39df0:	6f662065 61702072 5f6d6172 0078616d     e for param_max.
   39e00:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   39e10:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   39e20:	6c61436c 7469576c 6d754e68 63697265     lCallWithNumeric
   39e30:	61726150 6c6e4f6d 49203a79 6c61766e     ParamOnly: Inval
   39e40:	76206469 65756c61 726f6620 74766520     id value for evt
   39e50:	65646f63 00000000 6f636552 72656472     code....Recorder
   39e60:	73756220 202d2079 68676968 69727020      busy - high pri
   39e70:	7469726f 53492079 73752052 20676e69     ority ISR using 
   39e80:	63737973 3f6c6c61 29342820 00000000     syscall? (4)....
   39e90:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   39ea0:	61725476 74536563 5465726f 736b7361     vTraceStoreTasks
   39eb0:	63746977 49203a68 6c61766e 76206469     witch: Invalid v
   39ec0:	65756c61 726f6620 73617420 61685f6b     alue for task_ha
   39ed0:	656c646e 00000000 43415254 53415f45     ndle....TRACE_AS
   39ee0:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   39ef0:	4f65726f 63656a62 6d614e74 436e4f65     oreObjectNameOnC
   39f00:	65736f6c 6e657645 6f203a74 63656a62     loseEvent: objec
   39f10:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   39f20:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   39f30:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   39f40:	74536563 4f65726f 63656a62 6d614e74     ceStoreObjectNam
   39f50:	436e4f65 65736f6c 6e657645 49203a74     eOnCloseEvent: I
   39f60:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   39f70:	6e616820 00656c64 43415254 53415f45      handle.TRACE_AS
   39f80:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   39f90:	4f65726f 63656a62 6f725074 74726570     oreObjectPropert
   39fa0:	4f736569 6f6c436e 76456573 3a746e65     iesOnCloseEvent:
   39fb0:	6a626f20 63746365 7373616c 203d3e20      objectclass >= 
   39fc0:	43415254 434e5f45 5353414c 00005345     TRACE_NCLASSES..
   39fd0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   39fe0:	61725476 74536563 4f65726f 63656a62     vTraceStoreObjec
   39ff0:	6f725074 74726570 4f736569 6f6c436e     tPropertiesOnClo
   3a000:	76456573 3a746e65 766e4920 64696c61     seEvent: Invalid
   3a010:	6c617620 66206575 6820726f 6c646e61      value for handl
   3a020:	00000065 43415254 53415f45 54524553     e...TRACE_ASSERT
   3a030:	7270203a 61725476 65536563 69725074     : prvTraceSetPri
   3a040:	7469726f 6f725079 74726570 6f203a79     orityProperty: o
   3a050:	63656a62 616c6374 3e207373 5254203d     bjectclass >= TR
   3a060:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
   3a070:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3a080:	61725476 65536563 69725074 7469726f     vTraceSetPriorit
   3a090:	6f725079 74726570 49203a79 6c61766e     yProperty: Inval
   3a0a0:	76206469 65756c61 726f6620 00646920     id value for id.
   3a0b0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3a0c0:	61725476 65476563 69725074 7469726f     vTraceGetPriorit
   3a0d0:	6f725079 74726570 6f203a79 63656a62     yProperty: objec
   3a0e0:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   3a0f0:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   3a100:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a110:	65476563 69725074 7469726f 6f725079     ceGetPriorityPro
   3a120:	74726570 49203a79 6c61766e 76206469     perty: Invalid v
   3a130:	65756c61 726f6620 00646920 43415254     alue for id.TRAC
   3a140:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a150:	65536563 6a624f74 53746365 65746174     ceSetObjectState
   3a160:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   3a170:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   3a180:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3a190:	61725476 65536563 6a624f74 53746365     vTraceSetObjectS
   3a1a0:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   3a1b0:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   3a1c0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a1d0:	65476563 6a624f74 53746365 65746174     ceGetObjectState
   3a1e0:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   3a1f0:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   3a200:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3a210:	61725476 65476563 6a624f74 53746365     vTraceGetObjectS
   3a220:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   3a230:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   3a240:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a250:	65536563 73615474 736e496b 636e6174     ceSetTaskInstanc
   3a260:	6e694665 65687369 49203a64 6c61766e     eFinished: Inval
   3a270:	76206469 65756c61 726f6620 6e616820     id value for han
   3a280:	00656c64 63617254 65522065 64726f63     dle.Trace Record
   3a290:	44207265 006f6d65 65747441 2074706d     er Demo.Attempt 
   3a2a0:	69206f74 7865646e 74756f20 65646973     to index outside
   3a2b0:	65766520 6220746e 65666675 00002172      event buffer!..
   3a2c0:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   3a2d0:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   3a2e0:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   3a2f0:	6a626f20 63746365 7373616c 00000000      objectclass....
   3a300:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   3a310:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   3a320:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   3a330:	6a626f20 68746365 6c646e61 00000065      objecthandle...
   3a340:	656a624f 74207463 656c6261 6f6f6c20     Object table loo
   3a350:	2070756b 68746977 766e6920 64696c61     kup with invalid
   3a360:	6a626f20 20746365 646e6168 6f20656c      object handle o
   3a370:	626f2072 7463656a 616c6320 00217373     r object class!.
   3a380:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3a390:	61725476 65476563 6a624f74 48746365     vTraceGetObjectH
   3a3a0:	6c646e61 49203a65 6c61766e 76206469     andle: Invalid v
   3a3b0:	65756c61 726f6620 6a626f20 63746365     alue for objectc
   3a3c0:	7373616c 00000000 43415254 53415f45     lass....TRACE_AS
   3a3d0:	54524553 7270203a 61725476 72466563     SERT: prvTraceFr
   3a3e0:	624f6565 7463656a 646e6148 203a656c     eeObjectHandle: 
   3a3f0:	61766e49 2064696c 756c6176 6f662065     Invalid value fo
   3a400:	626f2072 7463656a 73616c63 00000073     r objectclass...
   3a410:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3a420:	61725476 72466563 624f6565 7463656a     vTraceFreeObject
   3a430:	646e6148 203a656c 61766e49 2064696c     Handle: Invalid 
   3a440:	756c6176 6f662065 61682072 656c646e     value for handle
   3a450:	00000000 65747441 2074706d 66206f74     ....Attempt to f
   3a460:	20656572 65726f6d 6e616820 73656c64     ree more handles
   3a470:	61687420 6c61206e 61636f6c 21646574      than allocated!
   3a480:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3a490:	7270203a 61725476 65536563 6a624f74     : prvTraceSetObj
   3a4a0:	4e746365 3a656d61 6d616e20 3d3d2065     ectName: name ==
   3a4b0:	4c554e20 0000004c 656c6c49 206c6167      NULL...Illegal 
   3a4c0:	656a626f 63207463 7373616c 206e6920     object class in 
   3a4d0:	54767270 65636172 4f746553 63656a62     prvTraceSetObjec
   3a4e0:	6d614e74 00000065 656c6c49 206c6167     tName...Illegal 
   3a4f0:	646e6168 2820656c 69202930 7270206e     handle (0) in pr
   3a500:	61725476 65536563 6a624f74 4e746365     vTraceSetObjectN
   3a510:	2e656d61 00000000 43415254 53415f45     ame.....TRACE_AS
   3a520:	54524553 7270203a 61725476 704f6563     SERT: prvTraceOp
   3a530:	79536e65 6c6f626d 616e203a 3d20656d     enSymbol: name =
   3a540:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   3a550:	54524553 7270203a 65684376 61446b63     SERT: prvCheckDa
   3a560:	6f546174 764f6542 72777265 65747469     taToBeOverwritte
   3a570:	726f466e 746c754d 746e4569 76457972     nForMultiEntryEv
   3a580:	73746e65 6f6e203a 746e4566 73656972     ents: nofEntries
   3a590:	68436f54 206b6365 30203d3d 00000000     ToCheck == 0....
   3a5a0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3a5b0:	61725476 65476563 53544474 6e49203a     vTraceGetDTS: In
   3a5c0:	696c6176 61762064 2065756c 20726f66     valid value for 
   3a5d0:	61726170 616d5f6d 53544478 00000000     param_maxDTS....
   3a5e0:	20646142 61726170 616d5f6d 53544478     Bad param_maxDTS
   3a5f0:	206e6920 54767270 65636172 44746547      in prvTraceGetD
   3a600:	00005354 43415254 53415f45 54524553     TS..TRACE_ASSERT
   3a610:	7270203a 61725476 6f4c6563 70756b6f     : prvTraceLookup
   3a620:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   3a630:	616e203a 3d20656d 554e203d 00004c4c     : name == NULL..
   3a640:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3a650:	61725476 6f4c6563 70756b6f 626d7953     vTraceLookupSymb
   3a660:	61546c6f 45656c62 7972746e 656c203a     olTableEntry: le
   3a670:	3d3d206e 00003020 43415254 53415f45     n == 0..TRACE_AS
   3a680:	54524553 7270203a 61725476 72436563     SERT: prvTraceCr
   3a690:	65746165 626d7953 61546c6f 45656c62     eateSymbolTableE
   3a6a0:	7972746e 616e203a 3d20656d 554e203d     ntry: name == NU
   3a6b0:	00004c4c 43415254 53415f45 54524553     LL..TRACE_ASSERT
   3a6c0:	7270203a 61725476 72436563 65746165     : prvTraceCreate
   3a6d0:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   3a6e0:	656c203a 3d3d206e 00003020 626d7953     : len == 0..Symb
   3a6f0:	74206c6f 656c6261 6c756620 49202e6c     ol table full. I
   3a700:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
   3a710:	424d5953 545f4c4f 454c4241 5a49535f     SYMBOL_TABLE_SIZ
   3a720:	6e692045 63727420 666e6f43 682e6769     E in trcConfig.h
   3a730:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3a740:	7270203a 61725476 65476563 65684374     : prvTraceGetChe
   3a750:	75736b63 70203a6d 656d616e 203d3d20     cksum: pname == 
   3a760:	4c4c554e 00000000 43415254 53415f45     NULL....TRACE_AS
   3a770:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   3a780:	65684374 75736b63 70203a6d 20637263     tChecksum: pcrc 
   3a790:	4e203d3d 004c4c55 43415254 53415f45     == NULL.TRACE_AS
   3a7a0:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   3a7b0:	65684374 75736b63 70203a6d 676e656c     tChecksum: pleng
   3a7c0:	3d206874 554e203d 00004c4c 454c4449     th == NULL..IDLE
   3a7d0:	00000000 20726d54 00637653 0001f928     ....Tmr Svc.(...
   3a7e0:	0001f928 0001f928 0001f9b6 0001f980     (...(...........
   3a7f0:	0001f9aa 0001f928 0001f928 0001f9b6     ....(...(.......
   3a800:	0001f980                                ....

0003a804 <sd_mmc_trans_units>:
   3a804:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0003a820 <sd_trans_multipliers>:
   3a820:	00000000 0000000a 0000000c 0000000d     ................
   3a830:	0000000f 00000014 00000019 0000001e     ................
   3a840:	00000023 00000028 0000002d 00000032     #...(...-...2...
   3a850:	00000037 0000003c 00000046 00000050     7...<...F...P...

0003a860 <mmc_trans_multipliers>:
   3a860:	00000000 0000000a 0000000c 0000000d     ................
   3a870:	0000000f 00000014 0000001a 0000001e     ................
   3a880:	00000023 00000028 0000002d 00000034     #...(...-...4...
   3a890:	00000037 0000003c 00000046 00000050     7...<...F...P...
   3a8a0:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   3a8b0:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   3a8c0:	6320746c 000a646d 0000000d              lt cmd......

0003a8cc <__FUNCTION__.17031>:
   3a8cc:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   3a8dc:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   3a8ec:	20676e69 6e776f64 0a2e2e2e 00000000     ing down........
   3a8fc:	0000000d 50504128 52452829 255b2952     ....(APP)(ERR)[%
   3a90c:	255b5d73 00005d64 46494828 69614629     s][%d]..(HIF)Fai
   3a91c:	6f74206c 6b617720 74207075 63206568     l to wakup the c
   3a92c:	0a706968 00000000 66696828 49572029     hip.....(hif) WI
   3a93c:	485f4946 5f54534f 5f564352 4c525443     FI_HOST_RCV_CTRL
   3a94c:	6220315f 66207375 0a6c6961 00000000     _1 bus fail.....
   3a95c:	66696828 64612029 73657264 75622073     (hif) address bu
   3a96c:	61662073 000a6c69 66696828 6f432029     s fail..(hif) Co
   3a97c:	70757272 20646574 6b636170 53207465     rrupted packet S
   3a98c:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   3a99c:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   3a9ac:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   3a9bc:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   3a9cc:	65747369 0a646572 00000000 6b6f6353     istered.....Scok
   3a9dc:	63207465 626c6c61 206b6361 6e207369     et callback is n
   3a9ec:	7220746f 73696765 65726574 00000a64     ot registered...
   3a9fc:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   3aa0c:	20746f6e 69676572 72657473 000a6465     not registered..
   3aa1c:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   3aa2c:	6e207369 7220746f 73696765 65726574     is not registere
   3aa3c:	00000a64 6d676953 61632061 61626c6c     d...Sigma callba
   3aa4c:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   3aa5c:	64657265 0000000a 66696828 6e692029     ered....(hif) in
   3aa6c:	696c6176 72672064 2070756f 000a4449     valid group ID..
   3aa7c:	66696828 6f682029 61207473 64207070     (hif) host app d
   3aa8c:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   3aa9c:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   3aaac:	72572029 20676e6f 657a6953 0000000a     ) Wrong Size....
   3aabc:	66696828 61462029 2065736c 65746e69     (hif) False inte
   3aacc:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
   3aadc:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
   3aaec:	7265746e 74707572 67657220 0000000a     nterrupt reg....
   3aafc:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
   3ab0c:	656c646e 746e6920 75727265 25207470     ndle interrupt %
   3ab1c:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
   3ab2c:	66696820 6365725f 65766965 6e49203a      hif_receive: In
   3ab3c:	696c6176 72612064 656d7567 000a746e     valid argument..
   3ab4c:	20505041 75716552 65747365 69532064     APP Requested Si
   3ab5c:	6920657a 616c2073 72656772 61687420     ze is larger tha
   3ab6c:	6874206e 65722065 65766963 75622064     n the recived bu
   3ab7c:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
   3ab8c:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
   3ab9c:	65747365 64412064 73657264 65622073     ested Address be
   3abac:	646e6f79 65687420 63657220 64657669     yond the recived
   3abbc:	66756220 20726566 72646461 20737365      buffer address 
   3abcc:	20646e61 676e656c 000a6874 20705247     and length..GRp 
   3abdc:	6425203f 0000000a 000236e0 000236b0     ? %d.....6...6..
   3abec:	000236a8 000236c0 000236b8 000236d8     .6...6...6...6..
   3abfc:	000236c8 000236d0                       .6...6..

0003ac04 <__FUNCTION__.17899>:
   3ac04:	5f666968 646e6573 00000000              hif_send....

0003ac10 <__FUNCTION__.17909>:
   3ac10:	5f666968 00727369                       hif_isr.

0003ac18 <__FUNCTION__.17918>:
   3ac18:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0003ac28 <__FUNCTION__.17930>:
   3ac28:	5f666968 65636572 00657669              hif_receive.

0003ac34 <__FUNCTION__.17946>:
   3ac34:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   3ac44:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   3ac54:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   3ac64:	75252e75 2075252e 000a2022 0000000d     u.%u.%u " ......
   3ac74:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   3ac84:	00005d64 20514552 20746f4e 69666564     d]..REQ Not defi
   3ac94:	2064656e 000a6425 41564e49 2044494c     ned %d..INVALID 
   3aca4:	4e494f50 0a524554 00000000 41564e49     POINTER.....INVA
   3acb4:	2044494c 44495353 0000000a 41564e49     LID SSID....INVA
   3acc4:	2044494c 000a4843 41564e49 2044494c     LID CH..INVALID 
   3acd4:	50434844 52455320 20524556 000a5049     DHCP SERVER IP..
   3ace4:	41564e49 2044494c 2059454b 45444e49     INVALID KEY INDE
   3acf4:	00000a58 41564e49 2044494c 2059454b     X...INVALID KEY 
   3ad04:	49525453 5320474e 0a455a49 00000000     STRING SIZE.....
   3ad14:	41564e49 2044494c 2059454b 455a4953     INVALID KEY SIZE
   3ad24:	0000000a 41564e49 2044494c 20415057     ....INVALID WPA 
   3ad34:	2059454b 455a4953 0000000a 41564e49     KEY SIZE....INVA
   3ad44:	2044494c 48545541 49544e45 49544143     LID AUTHENTICATI
   3ad54:	4d204e4f 0a45444f 00000000 41564e49     ON MODE.....INVA
   3ad64:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   3ad74:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   3ad84:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   3ad94:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   3ada4:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   3adb4:	73747365 72657020 61637320 6c73206e     ests per scan sl
   3adc4:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   3add4:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   3ade4:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
   3adf4:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   3ae04:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   3ae14:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   3ae24:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   3ae34:	6e694d20 69726420 20726576 20726576      Min driver ver 
   3ae44:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   3ae54:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   3ae64:	0000000a 343a3032 36313a35 00000000     ....20:45:16....
   3ae74:	20727041 32203033 00333230 76697244     Apr 30 2023.Driv
   3ae84:	62207265 746c6975 20746120 25097325     er built at %s.%
   3ae94:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   3aea4:	7277616d 65562065 6f697372 00000a6e     mawre Version...
   3aeb4:	2079654b 6e207369 7620746f 64696c61     Key is not valid
   3aec4:	0000000a 61766e49 2064696c 0a79654b     ....Invalid Key.
   3aed4:	00000000 44495353 4e454c20 564e4920     ....SSID LEN INV
   3aee4:	44494c41 0000000a 49204843 4c41564e     ALID....CH INVAL
   3aef4:	000a4449 61766e49 2064696c 20706557     ID..Invalid Wep 
   3af04:	2079656b 65646e69 64252078 0000000a     key index %d....
   3af14:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
   3af24:	676e656c 25206874 00000a64 6f636e49     length %d...Inco
   3af34:	63657272 53502074 656b204b 656c2079     rrect PSK key le
   3af44:	6874676e 0000000a 65646e75 656e6966     ngth....undefine
   3af54:	65732064 79742063 000a6570 5f53505f     d sec type.._PS_
   3af64:	56524553 205f5245 6e207369 6420746f     SERVER_ is not d
   3af74:	6e696665 000a6465 7473694c 63206e65     efined..Listen c
   3af84:	6e6e6168 73206c65 6c756f68 6e6f2064     hannel should on
   3af94:	6220796c 324d2065 49575f4d 435f4946     ly be M2M_WIFI_C
   3afa4:	2f315f48 31312f36 00000a20 45574f50     H_1/6/11 ...POWE
   3afb4:	41532052 25204556 00000a64 41564e49     R SAVE %d...INVA
   3afc4:	2044494c 414d4f44 4e204e49 0a454d41     LID DOMAIN NAME.
   3afd4:	00000000 474e5250 66754220 20726566     ....PRNG Buffer 
   3afe4:	65637865 64656465 78616d20 6d756d69     exceeded maximum
   3aff4:	7a697320 64252065 20726f20 4c4c554e      size %d or NULL
   3b004:	66754220 0a726566 00000000               Buffer.....

0003b010 <__FUNCTION__.17881>:
   3b010:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0003b01c <__FUNCTION__.17910>:
   3b01c:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0003b02c <__FUNCTION__.17941>:
   3b02c:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   3b03c:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   3b04c:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   3b05c:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   3b06c:	0000000d 6c696146 74206465 6177206f     ....Failed to wa
   3b07c:	2070756b 20656874 70696863 0000000a     kup the chip....
   3b08c:	50504128 4e492829 00294f46 76697244     (APP)(INFO).Driv
   3b09c:	65567265 666e4972 30203a6f 38302578     erVerInfo: 0x%08
   3b0ac:	000a786c 6c696166 74206465 6564206f     lx..failed to de
   3b0bc:	696e692d 6c616974 0a657a69 00000000     -initialize.....

0003b0cc <__FUNCTION__.17738>:
   3b0cc:	70696863 6b61775f 00000065              chip_wake...

0003b0d8 <__FUNCTION__.17787>:
   3b0d8:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   3b0e8:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   3b0f8:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   3b108:	6e69206c 62207469 000a7375 0000000d     l init bus......
   3b118:	50504128 4e492829 00294f46 70696843     (APP)(INFO).Chip
   3b128:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
   3b138:	74206465 6e65206f 656c6261 746e6920     ed to enable int
   3b148:	75727265 2e737470 00000a2e 696d6e5b     errupts.....[nmi
   3b158:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
   3b168:	2074696e 6c696166 0000000a 696d6e5b     nit fail....[nmi
   3b178:	6f747320 203a5d70 20495053 73616c66      stop]: SPI flas
   3b188:	69642068 6c626173 61662065 000a6c69     h disable fail..
   3b198:	696d6e5b 6f747320 203a5d70 6c696166     [nmi stop]: fail
   3b1a8:	696e6920 75622074 00000a73               init bus...

0003b1b4 <__FUNCTION__.17785>:
   3b1b4:	645f6d6e 695f7672 0074696e              nm_drv_init.

0003b1c0 <__FUNCTION__.17792>:
   3b1c0:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

0003b1d0 <crc7_syndrome_table>:
   3b1d0:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   3b1e0:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   3b1f0:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   3b200:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   3b210:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   3b220:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   3b230:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   3b240:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   3b250:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   3b260:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   3b270:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   3b280:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   3b290:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   3b2a0:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   3b2b0:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   3b2c0:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   3b2d0:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   3b2e0:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   3b2f0:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   3b300:	73756220 72726520 2e2e726f 00000a2e      bus error......
   3b310:	0000000d 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3b320:	656c6961 75622064 72652073 2e726f72     ailed bus error.
   3b330:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3b340:	656c6961 61642064 72206174 6f707365     ailed data respo
   3b350:	2065736e 64616572 7825202c 20782520     nse read, %x %x 
   3b360:	000a7825 696d6e5b 69707320 46203a5d     %x..[nmi spi]: F
   3b370:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   3b380:	72206573 2c646165 73756220 72726520     se read, bus err
   3b390:	2e2e726f 00000a2e 696d6e5b 69707320     or......[nmi spi
   3b3a0:	73203a5d 62206970 65666675 69732072     ]: spi buffer si
   3b3b0:	7420657a 73206f6f 6c6c616d 64252820     ze too small (%d
   3b3c0:	25282029 000a2964 696d6e5b 69707320     ) (%d)..[nmi spi
   3b3d0:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   3b3e0:	6e6f7073 202c6573 20646d63 32302528     sponse, cmd (%02
   3b3f0:	202c2978 70736572 30252820 0a297832     x), resp (%02x).
   3b400:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3b410:	656c6961 6d632064 74732064 20657461     ailed cmd state 
   3b420:	70736572 65736e6f 61747320 28206574     response state (
   3b430:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   3b440:	45203a5d 726f7272 6164202c 72206174     ]: Error, data r
   3b450:	20646165 70736572 65736e6f 30252820     ead response (%0
   3b460:	0a297832 00000000 696d6e5b 69707320     2x).....[nmi spi
   3b470:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   3b480:	6877206e 72206e65 69646165 6420676e     n when reading d
   3b490:	2e617461 0000000a 696d6e5b 69707320     ata.....[nmi spi
   3b4a0:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   3b4b0:	6877206e 72206e65 69646165 6320676e     n when reading c
   3b4c0:	0a2e6372 00000000 696d6e5b 69707320     rc......[nmi spi
   3b4d0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   3b4e0:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   3b4f0:	726f7272 0a2e2e2e 00000000 696d6e5b     rror........[nmi
   3b500:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   3b510:	62206174 6b636f6c 63726320 61657220     ta block crc rea
   3b520:	62202c64 65207375 726f7272 0a2e2e2e     d, bus error....
   3b530:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3b540:	656c6961 61642064 72206174 6f707365     ailed data respo
   3b550:	2065736e 64616572 7562202c 72652073     nse read, bus er
   3b560:	2e726f72 000a2e2e 696d6e5b 69707320     ror.....[nmi spi
   3b570:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   3b580:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   3b590:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   3b5a0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   3b5b0:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   3b5c0:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
   3b5d0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   3b5e0:	61642064 62206174 6b636f6c 69727720     d data block wri
   3b5f0:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   3b600:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3b610:	656c6961 61642064 62206174 6b636f6c     ailed data block
   3b620:	63726320 69727720 202c6574 20737562      crc write, bus 
   3b630:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
   3b640:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   3b650:	77202c64 65746972 67657220 30252820     d, write reg (%0
   3b660:	2e297838 000a2e2e 65736552 6e612074     8x).....Reset an
   3b670:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   3b680:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   3b690:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   3b6a0:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
   3b6b0:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3b6c0:	656c6961 6c622064 206b636f 61746164     ailed block data
   3b6d0:	69727720 2e2e6574 00000a2e 65736552      write......Rese
   3b6e0:	6e612074 65722064 20797274 25206425     t and retry %d %
   3b6f0:	2520786c 00000a64 696d6e5b 69707320     lx %d...[nmi spi
   3b700:	46203a5d 656c6961 6d632064 72202c64     ]: Failed cmd, r
   3b710:	20646165 20676572 38302528 2e2e2978     ead reg (%08x)..
   3b720:	00000a2e 65736552 6e612074 65722064     ....Reset and re
   3b730:	20797274 25206425 000a786c 696d6e5b     try %d %lx..[nmi
   3b740:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   3b750:	72202c64 20646165 636f6c62 2528206b     d, read block (%
   3b760:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
   3b770:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   3b780:	6e726574 72206c61 20646165 746f7270     ternal read prot
   3b790:	6c6f636f 74697720 52432068 6e6f2043     ocol with CRC on
   3b7a0:	6572202c 69727974 7720676e 20687469     , retyring with 
   3b7b0:	20435243 2e66666f 000a2e2e 696d6e5b     CRC off.....[nmi
   3b7c0:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   3b7d0:	6e726574 72206c61 20646165 746f7270     ternal read prot
   3b7e0:	6c6f636f 0a2e2e2e 00000000 696d6e5b     ocol........[nmi
   3b7f0:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   3b800:	6e726574 77206c61 65746972 6f727020     ternal write pro
   3b810:	6f636f74 6572206c 2e2e2e67 0000000a     tocol reg.......
   3b820:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   3b830:	20646d63 64616572 69686320 64692070     cmd read chip id
   3b840:	0a2e2e2e 00000000 00025308 00025308     .........S...S..
   3b850:	00025398 0002525c 000252a2 000252c4     .S..\R...R...R..
   3b860:	0002534a 0002534a 00025404 00025230     JS..JS...T..0R..
   3b870:	0002545e 0002545e 0002545e 0002545e     ^T..^T..^T..^T..
   3b880:	000252e6 00025868 00025868 000258f0     .R..hX..hX...X..
   3b890:	000257cc 0002580e 0002582c 000258a6     .W...X..,X...X..
   3b8a0:	000258a6 00025952 000257a4 000259a2     .X..RY...W...Y..
   3b8b0:	000259a2 000259a2 000259a2 0002584a     .Y...Y...Y..JX..

0003b8c0 <__FUNCTION__.17060>:
   3b8c0:	5f697073 00646d63                       spi_cmd.

0003b8c8 <__FUNCTION__.17067>:
   3b8c8:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0003b8d8 <__FUNCTION__.17076>:
   3b8d8:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0003b8e4 <__FUNCTION__.17109>:
   3b8e4:	5f697073 5f646d63 706d6f63 6574656c     spi_cmd_complete
   3b8f4:	00000000                                ....

0003b8f8 <__FUNCTION__.17155>:
   3b8f8:	5f697073 61746164 6972775f 00006574     spi_data_write..

0003b908 <__FUNCTION__.17167>:
   3b908:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0003b918 <__FUNCTION__.17178>:
   3b918:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0003b928 <__FUNCTION__.17190>:
   3b928:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0003b938 <__FUNCTION__.17201>:
   3b938:	735f6d6e 725f6970 00646165              nm_spi_read.

0003b944 <__FUNCTION__.17222>:
   3b944:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   3b954:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   3b964:	6e657272 253c2074 000a3e64 0000000d     rrent <%d>......
   3b974:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   3b984:	4449206e 25203d20 000a0d64 6b636f53     n ID = %d...Sock
   3b994:	206f7420 656c6564 3c206574 0a3e6425      to delete <%d>.
   3b9a4:	00000000 50504128 52452829 255b2952     ....(APP)(ERR)[%
   3b9b4:	255b5d73 00005d64 20494e53 65637845     s][%d]..SNI Exce
   3b9c4:	20736465 2078614d 676e654c 000a6874     eds Max Length..
   3b9d4:	6e6b6e55 206e776f 204c5353 6b636f53     Unknown SSL Sock
   3b9e4:	4f207465 6f697470 6425206e 0000000a     et Option %d....
   3b9f4:	20746f4e 204c5353 6b636f53 000a7465     Not SSL Socket..
   3ba04:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
   3ba14:	22302074 00000000                       t 0"....

0003ba1c <lun_desc>:
   3ba1c:	000212fd 00021355 000213a1 000213ed     ....U...........
   3ba2c:	0002141d 000214a1 00021531 0003ba04     ........1.......
   3ba3c:	42000800 42000c00 42001000 42001400     ...B...B...B...B
   3ba4c:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
   3ba5c:	0002b2e2 0002b35c 0002b35c 0002b300     ....\...\.......
   3ba6c:	0002b2fa 0002b306 0002b2e8 0002b30c     ................
   3ba7c:	0002b342 0002b544 0002b594 0002b594     B...D...........
   3ba8c:	0002b590 0002b536 0002b556 0002b526     ....6...V...&...
   3ba9c:	0002b568 0002b57a 0002b5e2 0002b610     h...z...........
   3baac:	0002b610 0002b60c 0002b5dc 0002b5e8     ................
   3babc:	0002b5d6 0002b5ee 0002b5f4              ............

0003bac8 <tcc_modules>:
   3bac8:	42002000 42002400 42002800              . .B.$.B.(.B

0003bad4 <_tcc_gclk_ids>:
   3bad4:	001b1a1a                                ....

0003bad8 <_tcc_apbcmasks>:
   3bad8:	00000100 00000200 00000400              ............

0003bae4 <_tcc_maxs>:
   3bae4:	00ffffff 00ffffff 0000ffff              ............

0003baf0 <_tcc_cc_nums>:
   3baf0:	00020204                                ....

0003baf4 <_tcc_ow_nums>:
   3baf4:	00020408                                ....

0003baf8 <_tcc_intflag>:
   3baf8:	00000001 00000002 00000004 00000008     ................
   3bb08:	00001000 00002000 00004000 00008000     ..... ...@......
   3bb18:	00010000 00020000 00040000 00080000     ................

0003bb28 <LfnOfs>:
   3bb28:	07050301 12100e09 1c181614 0000001e     ................
   3bb38:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   3bb48:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
   3bb58:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
   3bb68:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
   3bb78:	20205441 00202020                       AT     .

0003bb80 <excvt.4558>:
   3bb80:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   3bb90:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   3bba0:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   3bbb0:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   3bbc0:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   3bbd0:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   3bbe0:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   3bbf0:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0003bc00 <Tbl>:
   3bc00:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   3bc10:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   3bc20:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   3bc30:	00d600ff 00f800dc 00d800a3 019200d7     ................
   3bc40:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   3bc50:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   3bc60:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   3bc70:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   3bc80:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   3bc90:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   3bca0:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   3bcb0:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   3bcc0:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   3bcd0:	00da00de 00d900db 00dd00fd 00b400af     ................
   3bce0:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   3bcf0:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0003bd00 <tbl_lower.4308>:
   3bd00:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   3bd10:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   3bd20:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   3bd30:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   3bd40:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   3bd50:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   3bd60:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   3bd70:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   3bd80:	01050103 01090107 010d010b 0111010f     ................
   3bd90:	01150113 01190117 011d011b 0121011f     ..............!.
   3bda0:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   3bdb0:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   3bdc0:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   3bdd0:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   3bde0:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   3bdf0:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   3be00:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   3be10:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   3be20:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   3be30:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   3be40:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   3be50:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   3be60:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   3be70:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   3be80:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   3be90:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   3bea0:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   3beb0:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   3bec0:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   3bed0:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0003bee0 <tbl_upper.4309>:
   3bee0:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   3bef0:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   3bf00:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   3bf10:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   3bf20:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   3bf30:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   3bf40:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   3bf50:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   3bf60:	01040102 01080106 010c010a 0110010e     ................
   3bf70:	01140112 01180116 011c011a 0120011e     .............. .
   3bf80:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   3bf90:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   3bfa0:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   3bfb0:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   3bfc0:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   3bfd0:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   3bfe0:	03940393 03960395 03980397 039a0399     ................
   3bff0:	039c039b 039e039d 03a0039f 03a303a1     ................
   3c000:	03a503a4 03a703a6 03a903a8 041003aa     ................
   3c010:	04120411 04140413 04160415 04180417     ................
   3c020:	041a0419 041c041b 041e041d 0420041f     .............. .
   3c030:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   3c040:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   3c050:	04030402 04050404 04070406 04090408     ................
   3c060:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   3c070:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   3c080:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   3c090:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   3c0a0:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   3c0b0:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   3c0c0:	000308f6 000308f6 000308f6 00030784     ................
   3c0d0:	000308f6 0003086e 000308f6 000308f6     ....n...........
   3c0e0:	000308f6 000308f6 000308f6 000308f6     ................
   3c0f0:	000308f6 000308e8 4354514d 00000000     ........MQTC....
   3c100:	00000004 00000000 00000000 00000000     ................
   3c110:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   3c150:	4354514d 00000000 00000004 00000000     MQTC............
	...
   3c168:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   3c1a8:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   3c1b8:	656d7461 2e312f6c 00322e30 70747468     atmel/1.0.2.http
   3c1c8:	002f2f3a 70747468 2f2f3a73 00000000     ://.https://....
   3c1d8:	20544547 00000000 54534f50 00000020     GET ....POST ...
   3c1e8:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   3c1f8:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   3c208:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   3c218:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   3c228:	00000a0d 74736f48 0000203a 6e6e6f43     ....Host: ..Conn
   3c238:	69746365 203a6e6f 7065654b 696c412d     ection: Keep-Ali
   3c248:	0a0d6576 00000000 65636341 452d7470     ve......Accept-E
   3c258:	646f636e 3a676e69 000a0d20 65636341     ncoding: ...Acce
   3c268:	432d7470 73726168 203a7465 2d667475     pt-Charset: utf-
   3c278:	000a0d38 6e617254 72656673 636e452d     8...Transfer-Enc
   3c288:	6e69646f 63203a67 6b6e7568 0a0d6465     oding: chunked..
   3c298:	00000000 00007525 746e6f43 2d746e65     ....%u..Content-
   3c2a8:	676e654c 203a6874 00000000 33323130     Length: ....0123
   3c2b8:	37363534 62613938 66656463 6e617254     456789abcdefTran
   3c2c8:	72656673 636e452d 6e69646f 00203a67     sfer-Encoding: .
   3c2d8:	6e6e6f43 69746365 203a6e6f 00000000     Connection: ....
   3c2e8:	50545448 0000002f 00000d31 000329ea     HTTP/...1....)..
   3c2f8:	000329e4 000329de 000329d8 000329f0     .)...)...)...)..
   3c308:	000329d2 000329f0 000329cc 000329c6     .)...)...)...)..
   3c318:	000329f0 000329c0 000329c0 000329ba     .)...)...)...)..
   3c328:	000329b4 000329ae 42002000 42002400     .)...)... .B.$.B
   3c338:	42002800 0a0d0a0d 2d2d2d2d 4553452d     .(.B....-----ESE
   3c348:	20363135 6e69614d 6f725020 6d617267     516 Main Program
   3c358:	2d2d2d2d 000a0d2d 0a0d0a0d 74696e49     -----.......Init
   3c368:	696c6169 4820657a 2e2e2e57 00000a0d     ialize HW.......
   3c378:	6f727245 6e692072 61697469 697a696c     Error initializi
   3c388:	4920676e 44204332 65766972 0a0d2172     ng I2C Driver!..
   3c398:	00000000 74696e49 696c6169 2064657a     ....Initialized 
   3c3a8:	20433249 76697244 0d217265 0000000a     I2C Driver!.....
   3c3b8:	6e6e6143 6620746f 20646e69 21554d49     Cannot find IMU!
   3c3c8:	00000a0d 20554d49 6e756f66 0a0d2164     ....IMU found!..
   3c3d8:	00000000 20554d49 74696e69 696c6169     ....IMU initiali
   3c3e8:	2164657a 00000a0d 6c756f43 6f6e2064     zed!....Could no
   3c3f8:	6e692074 61697469 657a696c 554d4920     t initialize IMU
   3c408:	00000a0d 70616548 66656220 2065726f     ....Heap before 
   3c418:	72617473 676e6974 73617420 203a736b     starting tasks: 
   3c428:	0a0d6425 00000000 5f494c43 4b534154     %d......CLI_TASK
   3c438:	00000000 3a525245 494c4320 73617420     ....ERR: CLI tas
   3c448:	6f63206b 20646c75 20746f6e 69206562     k could not be i
   3c458:	6974696e 7a696c61 0d216465 0000000a     nitialized!.....
   3c468:	70616548 74666120 73207265 74726174     Heap after start
   3c478:	20676e69 3a494c43 0d642520 0000000a     ing CLI: %d.....
   3c488:	49464957 5341545f 0000004b 3a525245     WIFI_TASK...ERR:
   3c498:	46495720 61742049 63206b73 646c756f      WIFI task could
   3c4a8:	746f6e20 20656220 74696e69 696c6169      not be initiali
   3c4b8:	2164657a 00000a0d 70616548 74666120     zed!....Heap aft
   3c4c8:	73207265 74726174 20676e69 49464957     er starting WIFI
   3c4d8:	6425203a 00000a0d 54204955 006b7361     : %d....UI Task.
   3c4e8:	3a525245 20495520 6b736174 756f6320     ERR: UI task cou
   3c4f8:	6e20646c 6220746f 6e692065 61697469     ld not be initia
   3c508:	657a696c 0a0d2164 00000000 70616548     lized!......Heap
   3c518:	74666120 73207265 74726174 20676e69      after starting 
   3c528:	54204955 3a6b7361 0d642520 0000000a     UI Task: %d.....
   3c538:	746e6f43 206c6f72 6b736154 00000000     Control Task....
   3c548:	3a525245 6e6f4320 6c6f7274 73617420     ERR: Control tas
   3c558:	6f63206b 20646c75 20746f6e 69206562     k could not be i
   3c568:	6974696e 7a696c61 0d216465 0000000a     nitialized!.....
   3c578:	70616548 74666120 73207265 74726174     Heap after start
   3c588:	20676e69 746e6f43 206c6f72 6b736154     ing Control Task
   3c598:	6425203a 00000a0d 6f727245 6e6f2072     : %d....Error on
   3c5a8:	6d656d20 2079726f 6f6c6c61 69746163      memory allocati
   3c5b8:	6f206e6f 5246206e 54524545 0d21534f     on on FREERTOS!.
   3c5c8:	0000000a 6f727245 6e6f2072 61747320     ....Error on sta
   3c5d8:	6f206b63 66726576 20776f6c 46206e6f     ck overflow on F
   3c5e8:	52454552 21534f54 00000a0d 00034ca4     REERTOS!.....L..
   3c5f8:	00034c74 00034c86 00034bc8 00034c86     tL...L...K...L..
   3c608:	00034c6a 00034c86 00034bc8 00034c74     jL...L...K..tL..
   3c618:	00034c74 00034c6a 00034bc8 00034bd0     tL..jL...K...K..
   3c628:	00034bd0 00034bd0 00034c8c 00034c74     .K...K...L..tL..
   3c638:	00034c74 00034c48 00034d2c 00034c48     tL..HL..,M..HL..
   3c648:	00034c6a 00034c48 00034d2c 00034c74     jL..HL..,M..tL..
   3c658:	00034c74 00034c6a 00034d2c 00034bd0     tL..jL..,M...K..
   3c668:	00034bd0 00034bd0 00034d36 00034ed4     .K...K..6M...N..
   3c678:	00034e24 00034e24 00034e22 00034ec6     $N..$N.."N...N..
   3c688:	00034ec6 00034ebc 00034e22 00034ec6     .N...N.."N...N..
   3c698:	00034ebc 00034ec6 00034e22 00034ecc     .N...N.."N...N..
   3c6a8:	00034ecc 00034ecc 00034f5c 0003596c     .N...N..\O..lY..
   3c6b8:	0003594e 00035908 00035826 00035908     NY...Y..&X...Y..
   3c6c8:	00035940 00035908 00035826 0003594e     @Y...Y..&X..NY..
   3c6d8:	0003594e 00035940 00035826 0003581e     NY..@Y..&X...X..
   3c6e8:	0003581e 0003581e 00035b84 00035fcc     .X...X...[..._..
   3c6f8:	00035e8c 00035e8c 00035e88 00035fa4     .^...^...^..._..
   3c708:	00035fa4 00035f96 00035e88 00035fa4     ._..._...^..._..
   3c718:	00035f96 00035fa4 00035e88 00035fac     ._..._...^..._..
   3c728:	00035fac 00035fac 000361b0              ._..._...a..

0003c734 <_global_impure_ptr>:
   3c734:	20000124                                $.. 

0003c738 <__sf_fake_stderr>:
	...

0003c758 <__sf_fake_stdin>:
	...

0003c778 <__sf_fake_stdout>:
	...
   3c798:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   3c7a8:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   3c7b8:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   3c7c8:	37363534 62613938 66656463 20200000              456789abcdef.

0003c7d5 <_ctype_>:
   3c7d5:	20202000 20202020 28282020 20282828     .         ((((( 
   3c7e5:	20202020 20202020 20202020 20202020                     
   3c7f5:	10108820 10101010 10101010 10101010      ...............
   3c805:	04040410 04040404 10040404 10101010     ................
   3c815:	41411010 41414141 01010101 01010101     ..AAAAAA........
   3c825:	01010101 01010101 01010101 10101010     ................
   3c835:	42421010 42424242 02020202 02020202     ..BBBBBB........
   3c845:	02020202 02020202 02020202 10101010     ................
   3c855:	00000020 00000000 00000000 00000000      ...............
	...

0003c8d8 <_init>:
   3c8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3c8da:	46c0      	nop			; (mov r8, r8)
   3c8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3c8de:	bc08      	pop	{r3}
   3c8e0:	469e      	mov	lr, r3
   3c8e2:	4770      	bx	lr

0003c8e4 <__init_array_start>:
   3c8e4:	000120dd 	.word	0x000120dd

0003c8e8 <_fini>:
   3c8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3c8ea:	46c0      	nop			; (mov r8, r8)
   3c8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3c8ee:	bc08      	pop	{r3}
   3c8f0:	469e      	mov	lr, r3
   3c8f2:	4770      	bx	lr

0003c8f4 <__fini_array_start>:
   3c8f4:	000120b5 	.word	0x000120b5
