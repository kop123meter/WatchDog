
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0002b658  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0003d658  0003d658  0002d658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000308  20000000  0003d660  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000057fc  20000310  0003d970  00030308  2**4
                  ALLOC
  4 .stack        00002004  20005b0c  0004316c  00030308  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030330  2**0
                  CONTENTS, READONLY
  7 .debug_info   0013134c  00000000  00000000  00030389  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00010d74  00000000  00000000  001616d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000176ff  00000000  00000000  00172449  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00003e88  00000000  00000000  00189b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003b00  00000000  00000000  0018d9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002aea3  00000000  00000000  001914d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0005f22e  00000000  00000000  001bc373  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000c5935  00000000  00000000  0021b5a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000eecc  00000000  00000000  002e0ed8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	10 7b 00 20 31 d3 02 00 29 d4 02 00 29 d4 02 00     .{. 1...)...)...
	...
   1202c:	d9 c4 01 00 00 00 00 00 00 00 00 00 01 c6 01 00     ................
   1203c:	49 c6 01 00 29 d4 02 00 29 d4 02 00 29 d4 02 00     I...)...)...)...
   1204c:	25 94 02 00 51 89 02 00 29 d4 02 00 61 24 01 00     %...Q...)...a$..
   1205c:	29 d4 02 00 a5 25 01 00 c9 9a 02 00 e1 9a 02 00     )....%..........
   1206c:	f9 9a 02 00 11 9b 02 00 29 9b 02 00 41 9b 02 00     ........)...A...
   1207c:	79 d2 02 00 8d d2 02 00 a1 d2 02 00 c5 a1 01 00     y...............
   1208c:	d9 a1 01 00 ed a1 01 00 00 00 00 00 00 00 00 00     ................
   1209c:	e9 22 01 00 29 d4 02 00 25 24 01 00 29 d4 02 00     ."..)...%$..)...
   120ac:	29 d4 02 00 00 00 00 00                             ).......

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000310 	.word	0x20000310
   120d4:	00000000 	.word	0x00000000
   120d8:	0003d660 	.word	0x0003d660

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000314 	.word	0x20000314
   12108:	0003d660 	.word	0x0003d660
   1210c:	0003d660 	.word	0x0003d660
   12110:	00000000 	.word	0x00000000

00012114 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12114:	b580      	push	{r7, lr}
   12116:	b084      	sub	sp, #16
   12118:	af00      	add	r7, sp, #0
   1211a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   1211c:	687b      	ldr	r3, [r7, #4]
   1211e:	681b      	ldr	r3, [r3, #0]
   12120:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12122:	68fb      	ldr	r3, [r7, #12]
   12124:	7e5b      	ldrb	r3, [r3, #25]
   12126:	b2db      	uxtb	r3, r3
   12128:	b25b      	sxtb	r3, r3
   1212a:	2b00      	cmp	r3, #0
   1212c:	da01      	bge.n	12132 <adc_is_syncing+0x1e>
		return true;
   1212e:	2301      	movs	r3, #1
   12130:	e000      	b.n	12134 <adc_is_syncing+0x20>
	}

	return false;
   12132:	2300      	movs	r3, #0
}
   12134:	0018      	movs	r0, r3
   12136:	46bd      	mov	sp, r7
   12138:	b004      	add	sp, #16
   1213a:	bd80      	pop	{r7, pc}

0001213c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   1213c:	b580      	push	{r7, lr}
   1213e:	b084      	sub	sp, #16
   12140:	af00      	add	r7, sp, #0
   12142:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12144:	687b      	ldr	r3, [r7, #4]
   12146:	681b      	ldr	r3, [r3, #0]
   12148:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   1214a:	46c0      	nop			; (mov r8, r8)
   1214c:	687b      	ldr	r3, [r7, #4]
   1214e:	0018      	movs	r0, r3
   12150:	4b0b      	ldr	r3, [pc, #44]	; (12180 <adc_start_conversion+0x44>)
   12152:	4798      	blx	r3
   12154:	1e03      	subs	r3, r0, #0
   12156:	d1f9      	bne.n	1214c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12158:	68fb      	ldr	r3, [r7, #12]
   1215a:	7b1b      	ldrb	r3, [r3, #12]
   1215c:	b2db      	uxtb	r3, r3
   1215e:	2202      	movs	r2, #2
   12160:	4313      	orrs	r3, r2
   12162:	b2da      	uxtb	r2, r3
   12164:	68fb      	ldr	r3, [r7, #12]
   12166:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12168:	46c0      	nop			; (mov r8, r8)
   1216a:	687b      	ldr	r3, [r7, #4]
   1216c:	0018      	movs	r0, r3
   1216e:	4b04      	ldr	r3, [pc, #16]	; (12180 <adc_start_conversion+0x44>)
   12170:	4798      	blx	r3
   12172:	1e03      	subs	r3, r0, #0
   12174:	d1f9      	bne.n	1216a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12176:	46c0      	nop			; (mov r8, r8)
   12178:	46bd      	mov	sp, r7
   1217a:	b004      	add	sp, #16
   1217c:	bd80      	pop	{r7, pc}
   1217e:	46c0      	nop			; (mov r8, r8)
   12180:	00012115 	.word	0x00012115

00012184 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12184:	b580      	push	{r7, lr}
   12186:	b084      	sub	sp, #16
   12188:	af00      	add	r7, sp, #0
   1218a:	6078      	str	r0, [r7, #4]
   1218c:	000a      	movs	r2, r1
   1218e:	1cfb      	adds	r3, r7, #3
   12190:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12192:	687b      	ldr	r3, [r7, #4]
   12194:	681b      	ldr	r3, [r3, #0]
   12196:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12198:	68fb      	ldr	r3, [r7, #12]
   1219a:	1cfa      	adds	r2, r7, #3
   1219c:	7812      	ldrb	r2, [r2, #0]
   1219e:	759a      	strb	r2, [r3, #22]
}
   121a0:	46c0      	nop			; (mov r8, r8)
   121a2:	46bd      	mov	sp, r7
   121a4:	b004      	add	sp, #16
   121a6:	bd80      	pop	{r7, pc}

000121a8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   121a8:	b580      	push	{r7, lr}
   121aa:	b084      	sub	sp, #16
   121ac:	af00      	add	r7, sp, #0
   121ae:	0002      	movs	r2, r0
   121b0:	1dfb      	adds	r3, r7, #7
   121b2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   121b4:	1dfb      	adds	r3, r7, #7
   121b6:	781a      	ldrb	r2, [r3, #0]
   121b8:	4b47      	ldr	r3, [pc, #284]	; (122d8 <_adc_interrupt_handler+0x130>)
   121ba:	0092      	lsls	r2, r2, #2
   121bc:	58d3      	ldr	r3, [r2, r3]
   121be:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   121c0:	68fb      	ldr	r3, [r7, #12]
   121c2:	681b      	ldr	r3, [r3, #0]
   121c4:	7e1b      	ldrb	r3, [r3, #24]
   121c6:	b2da      	uxtb	r2, r3
   121c8:	68fb      	ldr	r3, [r7, #12]
   121ca:	681b      	ldr	r3, [r3, #0]
   121cc:	7ddb      	ldrb	r3, [r3, #23]
   121ce:	b2db      	uxtb	r3, r3
   121d0:	4013      	ands	r3, r2
   121d2:	b2db      	uxtb	r3, r3
   121d4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   121d6:	68bb      	ldr	r3, [r7, #8]
   121d8:	2201      	movs	r2, #1
   121da:	4013      	ands	r3, r2
   121dc:	d045      	beq.n	1226a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   121de:	68fb      	ldr	r3, [r7, #12]
   121e0:	681b      	ldr	r3, [r3, #0]
   121e2:	2201      	movs	r2, #1
   121e4:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   121e6:	46c0      	nop			; (mov r8, r8)
   121e8:	68fb      	ldr	r3, [r7, #12]
   121ea:	0018      	movs	r0, r3
   121ec:	4b3b      	ldr	r3, [pc, #236]	; (122dc <_adc_interrupt_handler+0x134>)
   121ee:	4798      	blx	r3
   121f0:	1e03      	subs	r3, r0, #0
   121f2:	d1f9      	bne.n	121e8 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   121f4:	68fb      	ldr	r3, [r7, #12]
   121f6:	695b      	ldr	r3, [r3, #20]
   121f8:	1c99      	adds	r1, r3, #2
   121fa:	68fa      	ldr	r2, [r7, #12]
   121fc:	6151      	str	r1, [r2, #20]
   121fe:	68fa      	ldr	r2, [r7, #12]
   12200:	6812      	ldr	r2, [r2, #0]
   12202:	8b52      	ldrh	r2, [r2, #26]
   12204:	b292      	uxth	r2, r2
   12206:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12208:	68fb      	ldr	r3, [r7, #12]
   1220a:	8b1b      	ldrh	r3, [r3, #24]
   1220c:	b29b      	uxth	r3, r3
   1220e:	3b01      	subs	r3, #1
   12210:	b29b      	uxth	r3, r3
   12212:	68fa      	ldr	r2, [r7, #12]
   12214:	1c19      	adds	r1, r3, #0
   12216:	8311      	strh	r1, [r2, #24]
   12218:	2b00      	cmp	r3, #0
   1221a:	d008      	beq.n	1222e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1221c:	68fb      	ldr	r3, [r7, #12]
   1221e:	7f5b      	ldrb	r3, [r3, #29]
   12220:	2b00      	cmp	r3, #0
   12222:	d022      	beq.n	1226a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12224:	68fb      	ldr	r3, [r7, #12]
   12226:	0018      	movs	r0, r3
   12228:	4b2d      	ldr	r3, [pc, #180]	; (122e0 <_adc_interrupt_handler+0x138>)
   1222a:	4798      	blx	r3
   1222c:	e01d      	b.n	1226a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1222e:	68fb      	ldr	r3, [r7, #12]
   12230:	2101      	movs	r1, #1
   12232:	0018      	movs	r0, r3
   12234:	4b2b      	ldr	r3, [pc, #172]	; (122e4 <_adc_interrupt_handler+0x13c>)
   12236:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12238:	68fb      	ldr	r3, [r7, #12]
   1223a:	7f1b      	ldrb	r3, [r3, #28]
   1223c:	b2db      	uxtb	r3, r3
   1223e:	2b05      	cmp	r3, #5
   12240:	d113      	bne.n	1226a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12242:	68fb      	ldr	r3, [r7, #12]
   12244:	2200      	movs	r2, #0
   12246:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12248:	68fb      	ldr	r3, [r7, #12]
   1224a:	7edb      	ldrb	r3, [r3, #27]
   1224c:	001a      	movs	r2, r3
   1224e:	2301      	movs	r3, #1
   12250:	4013      	ands	r3, r2
   12252:	d00a      	beq.n	1226a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12254:	68fb      	ldr	r3, [r7, #12]
   12256:	7e9b      	ldrb	r3, [r3, #26]
   12258:	001a      	movs	r2, r3
   1225a:	2301      	movs	r3, #1
   1225c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1225e:	d004      	beq.n	1226a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12260:	68fb      	ldr	r3, [r7, #12]
   12262:	689b      	ldr	r3, [r3, #8]
   12264:	68fa      	ldr	r2, [r7, #12]
   12266:	0010      	movs	r0, r2
   12268:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1226a:	68bb      	ldr	r3, [r7, #8]
   1226c:	2204      	movs	r2, #4
   1226e:	4013      	ands	r3, r2
   12270:	d014      	beq.n	1229c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12272:	68fb      	ldr	r3, [r7, #12]
   12274:	681b      	ldr	r3, [r3, #0]
   12276:	2204      	movs	r2, #4
   12278:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1227a:	68fb      	ldr	r3, [r7, #12]
   1227c:	7edb      	ldrb	r3, [r3, #27]
   1227e:	001a      	movs	r2, r3
   12280:	2302      	movs	r3, #2
   12282:	4013      	ands	r3, r2
   12284:	d00a      	beq.n	1229c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12286:	68fb      	ldr	r3, [r7, #12]
   12288:	7e9b      	ldrb	r3, [r3, #26]
   1228a:	001a      	movs	r2, r3
   1228c:	2302      	movs	r3, #2
   1228e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12290:	d004      	beq.n	1229c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12292:	68fb      	ldr	r3, [r7, #12]
   12294:	68db      	ldr	r3, [r3, #12]
   12296:	68fa      	ldr	r2, [r7, #12]
   12298:	0010      	movs	r0, r2
   1229a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   1229c:	68bb      	ldr	r3, [r7, #8]
   1229e:	2202      	movs	r2, #2
   122a0:	4013      	ands	r3, r2
   122a2:	d014      	beq.n	122ce <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   122a4:	68fb      	ldr	r3, [r7, #12]
   122a6:	681b      	ldr	r3, [r3, #0]
   122a8:	2202      	movs	r2, #2
   122aa:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   122ac:	68fb      	ldr	r3, [r7, #12]
   122ae:	7edb      	ldrb	r3, [r3, #27]
   122b0:	001a      	movs	r2, r3
   122b2:	2304      	movs	r3, #4
   122b4:	4013      	ands	r3, r2
   122b6:	d00a      	beq.n	122ce <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   122b8:	68fb      	ldr	r3, [r7, #12]
   122ba:	7e9b      	ldrb	r3, [r3, #26]
   122bc:	001a      	movs	r2, r3
   122be:	2304      	movs	r3, #4
   122c0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   122c2:	d004      	beq.n	122ce <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   122c4:	68fb      	ldr	r3, [r7, #12]
   122c6:	691b      	ldr	r3, [r3, #16]
   122c8:	68fa      	ldr	r2, [r7, #12]
   122ca:	0010      	movs	r0, r2
   122cc:	4798      	blx	r3
		}
	}
}
   122ce:	46c0      	nop			; (mov r8, r8)
   122d0:	46bd      	mov	sp, r7
   122d2:	b004      	add	sp, #16
   122d4:	bd80      	pop	{r7, pc}
   122d6:	46c0      	nop			; (mov r8, r8)
   122d8:	200045a4 	.word	0x200045a4
   122dc:	00012115 	.word	0x00012115
   122e0:	0001213d 	.word	0x0001213d
   122e4:	00012185 	.word	0x00012185

000122e8 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   122e8:	b580      	push	{r7, lr}
   122ea:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   122ec:	2000      	movs	r0, #0
   122ee:	4b02      	ldr	r3, [pc, #8]	; (122f8 <ADC_Handler+0x10>)
   122f0:	4798      	blx	r3
}
   122f2:	46c0      	nop			; (mov r8, r8)
   122f4:	46bd      	mov	sp, r7
   122f6:	bd80      	pop	{r7, pc}
   122f8:	000121a9 	.word	0x000121a9

000122fc <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   122fc:	b580      	push	{r7, lr}
   122fe:	b082      	sub	sp, #8
   12300:	af00      	add	r7, sp, #0
   12302:	0002      	movs	r2, r0
   12304:	1dfb      	adds	r3, r7, #7
   12306:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12308:	4a07      	ldr	r2, [pc, #28]	; (12328 <system_interrupt_disable+0x2c>)
   1230a:	1dfb      	adds	r3, r7, #7
   1230c:	781b      	ldrb	r3, [r3, #0]
   1230e:	0019      	movs	r1, r3
   12310:	231f      	movs	r3, #31
   12312:	400b      	ands	r3, r1
   12314:	2101      	movs	r1, #1
   12316:	4099      	lsls	r1, r3
   12318:	000b      	movs	r3, r1
   1231a:	0019      	movs	r1, r3
   1231c:	2380      	movs	r3, #128	; 0x80
   1231e:	50d1      	str	r1, [r2, r3]
}
   12320:	46c0      	nop			; (mov r8, r8)
   12322:	46bd      	mov	sp, r7
   12324:	b002      	add	sp, #8
   12326:	bd80      	pop	{r7, pc}
   12328:	e000e100 	.word	0xe000e100

0001232c <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1232c:	b580      	push	{r7, lr}
   1232e:	b084      	sub	sp, #16
   12330:	af00      	add	r7, sp, #0
   12332:	0002      	movs	r2, r0
   12334:	1dfb      	adds	r3, r7, #7
   12336:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12338:	1dfb      	adds	r3, r7, #7
   1233a:	781a      	ldrb	r2, [r3, #0]
   1233c:	4b37      	ldr	r3, [pc, #220]	; (1241c <_dac_interrupt_handler+0xf0>)
   1233e:	0092      	lsls	r2, r2, #2
   12340:	58d3      	ldr	r3, [r2, r3]
   12342:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12344:	68fb      	ldr	r3, [r7, #12]
   12346:	681b      	ldr	r3, [r3, #0]
   12348:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1234a:	68bb      	ldr	r3, [r7, #8]
   1234c:	799b      	ldrb	r3, [r3, #6]
   1234e:	b2db      	uxtb	r3, r3
   12350:	001a      	movs	r2, r3
   12352:	2301      	movs	r3, #1
   12354:	4013      	ands	r3, r2
   12356:	d00e      	beq.n	12376 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12358:	68bb      	ldr	r3, [r7, #8]
   1235a:	2201      	movs	r2, #1
   1235c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1235e:	68fb      	ldr	r3, [r7, #12]
   12360:	3314      	adds	r3, #20
   12362:	2b00      	cmp	r3, #0
   12364:	d007      	beq.n	12376 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12366:	68fb      	ldr	r3, [r7, #12]
   12368:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1236a:	2b00      	cmp	r3, #0
   1236c:	d003      	beq.n	12376 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1236e:	68fb      	ldr	r3, [r7, #12]
   12370:	699b      	ldr	r3, [r3, #24]
   12372:	2000      	movs	r0, #0
   12374:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12376:	68bb      	ldr	r3, [r7, #8]
   12378:	799b      	ldrb	r3, [r3, #6]
   1237a:	b2db      	uxtb	r3, r3
   1237c:	001a      	movs	r2, r3
   1237e:	2302      	movs	r3, #2
   12380:	4013      	ands	r3, r2
   12382:	d047      	beq.n	12414 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12384:	68bb      	ldr	r3, [r7, #8]
   12386:	2202      	movs	r2, #2
   12388:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   1238a:	68fb      	ldr	r3, [r7, #12]
   1238c:	899b      	ldrh	r3, [r3, #12]
   1238e:	b29b      	uxth	r3, r3
   12390:	2b00      	cmp	r3, #0
   12392:	d033      	beq.n	123fc <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12394:	68fb      	ldr	r3, [r7, #12]
   12396:	689a      	ldr	r2, [r3, #8]
   12398:	68fb      	ldr	r3, [r7, #12]
   1239a:	89db      	ldrh	r3, [r3, #14]
   1239c:	b29b      	uxth	r3, r3
   1239e:	1c59      	adds	r1, r3, #1
   123a0:	b288      	uxth	r0, r1
   123a2:	68f9      	ldr	r1, [r7, #12]
   123a4:	81c8      	strh	r0, [r1, #14]
   123a6:	005b      	lsls	r3, r3, #1
   123a8:	18d3      	adds	r3, r2, r3
   123aa:	881b      	ldrh	r3, [r3, #0]
   123ac:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   123ae:	68bb      	ldr	r3, [r7, #8]
   123b0:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   123b2:	68fb      	ldr	r3, [r7, #12]
   123b4:	899b      	ldrh	r3, [r3, #12]
   123b6:	b29b      	uxth	r3, r3
   123b8:	3b01      	subs	r3, #1
   123ba:	b29a      	uxth	r2, r3
   123bc:	68fb      	ldr	r3, [r7, #12]
   123be:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   123c0:	68fb      	ldr	r3, [r7, #12]
   123c2:	899b      	ldrh	r3, [r3, #12]
   123c4:	b29b      	uxth	r3, r3
   123c6:	2b00      	cmp	r3, #0
   123c8:	d118      	bne.n	123fc <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   123ca:	68fb      	ldr	r3, [r7, #12]
   123cc:	2220      	movs	r2, #32
   123ce:	2100      	movs	r1, #0
   123d0:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   123d2:	68bb      	ldr	r3, [r7, #8]
   123d4:	2202      	movs	r2, #2
   123d6:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   123d8:	68bb      	ldr	r3, [r7, #8]
   123da:	2202      	movs	r2, #2
   123dc:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   123de:	2019      	movs	r0, #25
   123e0:	4b0f      	ldr	r3, [pc, #60]	; (12420 <_dac_interrupt_handler+0xf4>)
   123e2:	4798      	blx	r3

				if ((module->callback) &&
   123e4:	68fb      	ldr	r3, [r7, #12]
   123e6:	3314      	adds	r3, #20
   123e8:	2b00      	cmp	r3, #0
   123ea:	d007      	beq.n	123fc <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   123ec:	68fb      	ldr	r3, [r7, #12]
   123ee:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   123f0:	2b00      	cmp	r3, #0
   123f2:	d003      	beq.n	123fc <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   123f4:	68fb      	ldr	r3, [r7, #12]
   123f6:	69db      	ldr	r3, [r3, #28]
   123f8:	2000      	movs	r0, #0
   123fa:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   123fc:	68fb      	ldr	r3, [r7, #12]
   123fe:	3314      	adds	r3, #20
   12400:	2b00      	cmp	r3, #0
   12402:	d007      	beq.n	12414 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12404:	68fb      	ldr	r3, [r7, #12]
   12406:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12408:	2b00      	cmp	r3, #0
   1240a:	d003      	beq.n	12414 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1240c:	68fb      	ldr	r3, [r7, #12]
   1240e:	695b      	ldr	r3, [r3, #20]
   12410:	2000      	movs	r0, #0
   12412:	4798      	blx	r3
		}
	}
}
   12414:	46c0      	nop			; (mov r8, r8)
   12416:	46bd      	mov	sp, r7
   12418:	b004      	add	sp, #16
   1241a:	bd80      	pop	{r7, pc}
   1241c:	200045a8 	.word	0x200045a8
   12420:	000122fd 	.word	0x000122fd

00012424 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12424:	b580      	push	{r7, lr}
   12426:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12428:	2000      	movs	r0, #0
   1242a:	4b02      	ldr	r3, [pc, #8]	; (12434 <DAC_Handler+0x10>)
   1242c:	4798      	blx	r3
}
   1242e:	46c0      	nop			; (mov r8, r8)
   12430:	46bd      	mov	sp, r7
   12432:	bd80      	pop	{r7, pc}
   12434:	0001232d 	.word	0x0001232d

00012438 <system_interrupt_enter_critical_section>:
{
   12438:	b580      	push	{r7, lr}
   1243a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1243c:	4b02      	ldr	r3, [pc, #8]	; (12448 <system_interrupt_enter_critical_section+0x10>)
   1243e:	4798      	blx	r3
}
   12440:	46c0      	nop			; (mov r8, r8)
   12442:	46bd      	mov	sp, r7
   12444:	bd80      	pop	{r7, pc}
   12446:	46c0      	nop			; (mov r8, r8)
   12448:	000285b1 	.word	0x000285b1

0001244c <system_interrupt_leave_critical_section>:
{
   1244c:	b580      	push	{r7, lr}
   1244e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12450:	4b02      	ldr	r3, [pc, #8]	; (1245c <system_interrupt_leave_critical_section+0x10>)
   12452:	4798      	blx	r3
}
   12454:	46c0      	nop			; (mov r8, r8)
   12456:	46bd      	mov	sp, r7
   12458:	bd80      	pop	{r7, pc}
   1245a:	46c0      	nop			; (mov r8, r8)
   1245c:	00028605 	.word	0x00028605

00012460 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12460:	b580      	push	{r7, lr}
   12462:	b086      	sub	sp, #24
   12464:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12466:	4b49      	ldr	r3, [pc, #292]	; (1258c <DMAC_Handler+0x12c>)
   12468:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1246a:	4b49      	ldr	r3, [pc, #292]	; (12590 <DMAC_Handler+0x130>)
   1246c:	8c1b      	ldrh	r3, [r3, #32]
   1246e:	b29b      	uxth	r3, r3
   12470:	b2da      	uxtb	r2, r3
   12472:	2317      	movs	r3, #23
   12474:	18fb      	adds	r3, r7, r3
   12476:	210f      	movs	r1, #15
   12478:	400a      	ands	r2, r1
   1247a:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1247c:	2317      	movs	r3, #23
   1247e:	18fb      	adds	r3, r7, r3
   12480:	781a      	ldrb	r2, [r3, #0]
   12482:	4b44      	ldr	r3, [pc, #272]	; (12594 <DMAC_Handler+0x134>)
   12484:	0092      	lsls	r2, r2, #2
   12486:	58d3      	ldr	r3, [r2, r3]
   12488:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1248a:	4a41      	ldr	r2, [pc, #260]	; (12590 <DMAC_Handler+0x130>)
   1248c:	693b      	ldr	r3, [r7, #16]
   1248e:	781b      	ldrb	r3, [r3, #0]
   12490:	210f      	movs	r1, #15
   12492:	400b      	ands	r3, r1
   12494:	b2d9      	uxtb	r1, r3
   12496:	233f      	movs	r3, #63	; 0x3f
   12498:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   1249a:	493d      	ldr	r1, [pc, #244]	; (12590 <DMAC_Handler+0x130>)
   1249c:	230f      	movs	r3, #15
   1249e:	18fb      	adds	r3, r7, r3
   124a0:	224e      	movs	r2, #78	; 0x4e
   124a2:	5c8a      	ldrb	r2, [r1, r2]
   124a4:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   124a6:	693b      	ldr	r3, [r7, #16]
   124a8:	781b      	ldrb	r3, [r3, #0]
   124aa:	4a3b      	ldr	r2, [pc, #236]	; (12598 <DMAC_Handler+0x138>)
   124ac:	011b      	lsls	r3, r3, #4
   124ae:	18d3      	adds	r3, r2, r3
   124b0:	3302      	adds	r3, #2
   124b2:	881b      	ldrh	r3, [r3, #0]
   124b4:	b29b      	uxth	r3, r3
   124b6:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   124b8:	693b      	ldr	r3, [r7, #16]
   124ba:	781b      	ldrb	r3, [r3, #0]
   124bc:	4a37      	ldr	r2, [pc, #220]	; (1259c <DMAC_Handler+0x13c>)
   124be:	011b      	lsls	r3, r3, #4
   124c0:	18d3      	adds	r3, r2, r3
   124c2:	3302      	adds	r3, #2
   124c4:	881b      	ldrh	r3, [r3, #0]
   124c6:	b29b      	uxth	r3, r3
   124c8:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   124ca:	68ba      	ldr	r2, [r7, #8]
   124cc:	687b      	ldr	r3, [r7, #4]
   124ce:	1ad2      	subs	r2, r2, r3
   124d0:	693b      	ldr	r3, [r7, #16]
   124d2:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   124d4:	230f      	movs	r3, #15
   124d6:	18fb      	adds	r3, r7, r3
   124d8:	781b      	ldrb	r3, [r3, #0]
   124da:	2201      	movs	r2, #1
   124dc:	4013      	ands	r3, r2
   124de:	d016      	beq.n	1250e <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   124e0:	4a2b      	ldr	r2, [pc, #172]	; (12590 <DMAC_Handler+0x130>)
   124e2:	234e      	movs	r3, #78	; 0x4e
   124e4:	2101      	movs	r1, #1
   124e6:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   124e8:	693b      	ldr	r3, [r7, #16]
   124ea:	2210      	movs	r2, #16
   124ec:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   124ee:	693b      	ldr	r3, [r7, #16]
   124f0:	7c1b      	ldrb	r3, [r3, #16]
   124f2:	001a      	movs	r2, r3
   124f4:	2301      	movs	r3, #1
   124f6:	4013      	ands	r3, r2
   124f8:	d042      	beq.n	12580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   124fa:	693b      	ldr	r3, [r7, #16]
   124fc:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   124fe:	2b00      	cmp	r3, #0
   12500:	d03e      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12502:	693b      	ldr	r3, [r7, #16]
   12504:	685b      	ldr	r3, [r3, #4]
   12506:	693a      	ldr	r2, [r7, #16]
   12508:	0010      	movs	r0, r2
   1250a:	4798      	blx	r3
   1250c:	e038      	b.n	12580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1250e:	230f      	movs	r3, #15
   12510:	18fb      	adds	r3, r7, r3
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	2202      	movs	r2, #2
   12516:	4013      	ands	r3, r2
   12518:	d016      	beq.n	12548 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1251a:	4a1d      	ldr	r2, [pc, #116]	; (12590 <DMAC_Handler+0x130>)
   1251c:	234e      	movs	r3, #78	; 0x4e
   1251e:	2102      	movs	r1, #2
   12520:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12522:	693b      	ldr	r3, [r7, #16]
   12524:	2200      	movs	r2, #0
   12526:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12528:	693b      	ldr	r3, [r7, #16]
   1252a:	7c1b      	ldrb	r3, [r3, #16]
   1252c:	001a      	movs	r2, r3
   1252e:	2302      	movs	r3, #2
   12530:	4013      	ands	r3, r2
   12532:	d025      	beq.n	12580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12534:	693b      	ldr	r3, [r7, #16]
   12536:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12538:	2b00      	cmp	r3, #0
   1253a:	d021      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1253c:	693b      	ldr	r3, [r7, #16]
   1253e:	689b      	ldr	r3, [r3, #8]
   12540:	693a      	ldr	r2, [r7, #16]
   12542:	0010      	movs	r0, r2
   12544:	4798      	blx	r3
   12546:	e01b      	b.n	12580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12548:	230f      	movs	r3, #15
   1254a:	18fb      	adds	r3, r7, r3
   1254c:	781b      	ldrb	r3, [r3, #0]
   1254e:	2204      	movs	r2, #4
   12550:	4013      	ands	r3, r2
   12552:	d015      	beq.n	12580 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12554:	4a0e      	ldr	r2, [pc, #56]	; (12590 <DMAC_Handler+0x130>)
   12556:	234e      	movs	r3, #78	; 0x4e
   12558:	2104      	movs	r1, #4
   1255a:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1255c:	693b      	ldr	r3, [r7, #16]
   1255e:	2206      	movs	r2, #6
   12560:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12562:	693b      	ldr	r3, [r7, #16]
   12564:	7c1b      	ldrb	r3, [r3, #16]
   12566:	001a      	movs	r2, r3
   12568:	2304      	movs	r3, #4
   1256a:	4013      	ands	r3, r2
   1256c:	d008      	beq.n	12580 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1256e:	693b      	ldr	r3, [r7, #16]
   12570:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12572:	2b00      	cmp	r3, #0
   12574:	d004      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12576:	693b      	ldr	r3, [r7, #16]
   12578:	68db      	ldr	r3, [r3, #12]
   1257a:	693a      	ldr	r2, [r7, #16]
   1257c:	0010      	movs	r0, r2
   1257e:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12580:	4b07      	ldr	r3, [pc, #28]	; (125a0 <DMAC_Handler+0x140>)
   12582:	4798      	blx	r3
}
   12584:	46c0      	nop			; (mov r8, r8)
   12586:	46bd      	mov	sp, r7
   12588:	b006      	add	sp, #24
   1258a:	bd80      	pop	{r7, pc}
   1258c:	00012439 	.word	0x00012439
   12590:	41004800 	.word	0x41004800
   12594:	20000380 	.word	0x20000380
   12598:	200045b0 	.word	0x200045b0
   1259c:	20000330 	.word	0x20000330
   125a0:	0001244d 	.word	0x0001244d

000125a4 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   125a4:	b580      	push	{r7, lr}
   125a6:	b082      	sub	sp, #8
   125a8:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   125aa:	4b15      	ldr	r3, [pc, #84]	; (12600 <EVSYS_Handler+0x5c>)
   125ac:	691b      	ldr	r3, [r3, #16]
   125ae:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   125b0:	4b14      	ldr	r3, [pc, #80]	; (12604 <EVSYS_Handler+0x60>)
   125b2:	699b      	ldr	r3, [r3, #24]
   125b4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   125b6:	4b12      	ldr	r3, [pc, #72]	; (12600 <EVSYS_Handler+0x5c>)
   125b8:	689a      	ldr	r2, [r3, #8]
   125ba:	683b      	ldr	r3, [r7, #0]
   125bc:	431a      	orrs	r2, r3
   125be:	4b10      	ldr	r3, [pc, #64]	; (12600 <EVSYS_Handler+0x5c>)
   125c0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   125c2:	4b10      	ldr	r3, [pc, #64]	; (12604 <EVSYS_Handler+0x60>)
   125c4:	4a10      	ldr	r2, [pc, #64]	; (12608 <EVSYS_Handler+0x64>)
   125c6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   125c8:	e008      	b.n	125dc <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   125ca:	687b      	ldr	r3, [r7, #4]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	687b      	ldr	r3, [r7, #4]
   125d0:	681b      	ldr	r3, [r3, #0]
   125d2:	0018      	movs	r0, r3
   125d4:	4790      	blx	r2
		current_hook = current_hook->next;
   125d6:	687b      	ldr	r3, [r7, #4]
   125d8:	689b      	ldr	r3, [r3, #8]
   125da:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   125dc:	687b      	ldr	r3, [r7, #4]
   125de:	2b00      	cmp	r3, #0
   125e0:	d1f3      	bne.n	125ca <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   125e2:	4b07      	ldr	r3, [pc, #28]	; (12600 <EVSYS_Handler+0x5c>)
   125e4:	68db      	ldr	r3, [r3, #12]
   125e6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   125e8:	4b05      	ldr	r3, [pc, #20]	; (12600 <EVSYS_Handler+0x5c>)
   125ea:	689b      	ldr	r3, [r3, #8]
   125ec:	683a      	ldr	r2, [r7, #0]
   125ee:	43d2      	mvns	r2, r2
   125f0:	401a      	ands	r2, r3
   125f2:	4b03      	ldr	r3, [pc, #12]	; (12600 <EVSYS_Handler+0x5c>)
   125f4:	609a      	str	r2, [r3, #8]
}
   125f6:	46c0      	nop			; (mov r8, r8)
   125f8:	46bd      	mov	sp, r7
   125fa:	b002      	add	sp, #8
   125fc:	bd80      	pop	{r7, pc}
   125fe:	46c0      	nop			; (mov r8, r8)
   12600:	20000000 	.word	0x20000000
   12604:	42000400 	.word	0x42000400
   12608:	0f0fffff 	.word	0x0f0fffff

0001260c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1260c:	b580      	push	{r7, lr}
   1260e:	b082      	sub	sp, #8
   12610:	af00      	add	r7, sp, #0
   12612:	0002      	movs	r2, r0
   12614:	6039      	str	r1, [r7, #0]
   12616:	1dfb      	adds	r3, r7, #7
   12618:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1261a:	1dfb      	adds	r3, r7, #7
   1261c:	781b      	ldrb	r3, [r3, #0]
   1261e:	2b01      	cmp	r3, #1
   12620:	d00a      	beq.n	12638 <system_apb_clock_set_mask+0x2c>
   12622:	2b02      	cmp	r3, #2
   12624:	d00f      	beq.n	12646 <system_apb_clock_set_mask+0x3a>
   12626:	2b00      	cmp	r3, #0
   12628:	d114      	bne.n	12654 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1262a:	4b0e      	ldr	r3, [pc, #56]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262c:	4a0d      	ldr	r2, [pc, #52]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262e:	6991      	ldr	r1, [r2, #24]
   12630:	683a      	ldr	r2, [r7, #0]
   12632:	430a      	orrs	r2, r1
   12634:	619a      	str	r2, [r3, #24]
			break;
   12636:	e00f      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12638:	4b0a      	ldr	r3, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263a:	4a0a      	ldr	r2, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263c:	69d1      	ldr	r1, [r2, #28]
   1263e:	683a      	ldr	r2, [r7, #0]
   12640:	430a      	orrs	r2, r1
   12642:	61da      	str	r2, [r3, #28]
			break;
   12644:	e008      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12646:	4b07      	ldr	r3, [pc, #28]	; (12664 <system_apb_clock_set_mask+0x58>)
   12648:	4a06      	ldr	r2, [pc, #24]	; (12664 <system_apb_clock_set_mask+0x58>)
   1264a:	6a11      	ldr	r1, [r2, #32]
   1264c:	683a      	ldr	r2, [r7, #0]
   1264e:	430a      	orrs	r2, r1
   12650:	621a      	str	r2, [r3, #32]
			break;
   12652:	e001      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12654:	2317      	movs	r3, #23
   12656:	e000      	b.n	1265a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   12658:	2300      	movs	r3, #0
}
   1265a:	0018      	movs	r0, r3
   1265c:	46bd      	mov	sp, r7
   1265e:	b002      	add	sp, #8
   12660:	bd80      	pop	{r7, pc}
   12662:	46c0      	nop			; (mov r8, r8)
   12664:	40000400 	.word	0x40000400

00012668 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   12668:	b580      	push	{r7, lr}
   1266a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   1266c:	2102      	movs	r1, #2
   1266e:	2002      	movs	r0, #2
   12670:	4b07      	ldr	r3, [pc, #28]	; (12690 <_system_events_init+0x28>)
   12672:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   12674:	4b07      	ldr	r3, [pc, #28]	; (12694 <_system_events_init+0x2c>)
   12676:	2201      	movs	r2, #1
   12678:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   1267a:	46c0      	nop			; (mov r8, r8)
   1267c:	4b05      	ldr	r3, [pc, #20]	; (12694 <_system_events_init+0x2c>)
   1267e:	781b      	ldrb	r3, [r3, #0]
   12680:	b2db      	uxtb	r3, r3
   12682:	001a      	movs	r2, r3
   12684:	2301      	movs	r3, #1
   12686:	4013      	ands	r3, r2
   12688:	d1f8      	bne.n	1267c <_system_events_init+0x14>
	}
}
   1268a:	46c0      	nop			; (mov r8, r8)
   1268c:	46bd      	mov	sp, r7
   1268e:	bd80      	pop	{r7, pc}
   12690:	0001260d 	.word	0x0001260d
   12694:	42000400 	.word	0x42000400

00012698 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   12698:	b580      	push	{r7, lr}
   1269a:	b084      	sub	sp, #16
   1269c:	af00      	add	r7, sp, #0
   1269e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   126a0:	687b      	ldr	r3, [r7, #4]
   126a2:	681b      	ldr	r3, [r3, #0]
   126a4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   126a6:	68fb      	ldr	r3, [r7, #12]
   126a8:	69db      	ldr	r3, [r3, #28]
   126aa:	2207      	movs	r2, #7
   126ac:	4013      	ands	r3, r2
   126ae:	1e5a      	subs	r2, r3, #1
   126b0:	4193      	sbcs	r3, r2
   126b2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   126b4:	0018      	movs	r0, r3
   126b6:	46bd      	mov	sp, r7
   126b8:	b004      	add	sp, #16
   126ba:	bd80      	pop	{r7, pc}

000126bc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   126bc:	b580      	push	{r7, lr}
   126be:	b082      	sub	sp, #8
   126c0:	af00      	add	r7, sp, #0
   126c2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   126c4:	46c0      	nop			; (mov r8, r8)
   126c6:	687b      	ldr	r3, [r7, #4]
   126c8:	0018      	movs	r0, r3
   126ca:	4b04      	ldr	r3, [pc, #16]	; (126dc <_i2c_master_wait_for_sync+0x20>)
   126cc:	4798      	blx	r3
   126ce:	1e03      	subs	r3, r0, #0
   126d0:	d1f9      	bne.n	126c6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   126d2:	46c0      	nop			; (mov r8, r8)
   126d4:	46bd      	mov	sp, r7
   126d6:	b002      	add	sp, #8
   126d8:	bd80      	pop	{r7, pc}
   126da:	46c0      	nop			; (mov r8, r8)
   126dc:	00012699 	.word	0x00012699

000126e0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   126e0:	b580      	push	{r7, lr}
   126e2:	b084      	sub	sp, #16
   126e4:	af00      	add	r7, sp, #0
   126e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   126e8:	687b      	ldr	r3, [r7, #4]
   126ea:	681b      	ldr	r3, [r3, #0]
   126ec:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   126ee:	68fb      	ldr	r3, [r7, #12]
   126f0:	681b      	ldr	r3, [r3, #0]
   126f2:	011b      	lsls	r3, r3, #4
   126f4:	0fdb      	lsrs	r3, r3, #31
   126f6:	b2db      	uxtb	r3, r3
   126f8:	001a      	movs	r2, r3
   126fa:	230b      	movs	r3, #11
   126fc:	18fb      	adds	r3, r7, r3
   126fe:	1e51      	subs	r1, r2, #1
   12700:	418a      	sbcs	r2, r1
   12702:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   12704:	2308      	movs	r3, #8
   12706:	18fb      	adds	r3, r7, r3
   12708:	687a      	ldr	r2, [r7, #4]
   1270a:	8b52      	ldrh	r2, [r2, #26]
   1270c:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   1270e:	687b      	ldr	r3, [r7, #4]
   12710:	8b9b      	ldrh	r3, [r3, #28]
   12712:	b29a      	uxth	r2, r3
   12714:	2308      	movs	r3, #8
   12716:	18fb      	adds	r3, r7, r3
   12718:	2108      	movs	r1, #8
   1271a:	1879      	adds	r1, r7, r1
   1271c:	8809      	ldrh	r1, [r1, #0]
   1271e:	1a8a      	subs	r2, r1, r2
   12720:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12722:	687b      	ldr	r3, [r7, #4]
   12724:	8b9b      	ldrh	r3, [r3, #28]
   12726:	b29b      	uxth	r3, r3
   12728:	3b01      	subs	r3, #1
   1272a:	b29a      	uxth	r2, r3
   1272c:	687b      	ldr	r3, [r7, #4]
   1272e:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   12730:	230b      	movs	r3, #11
   12732:	18fb      	adds	r3, r7, r3
   12734:	781b      	ldrb	r3, [r3, #0]
   12736:	2b00      	cmp	r3, #0
   12738:	d010      	beq.n	1275c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   1273a:	687b      	ldr	r3, [r7, #4]
   1273c:	7adb      	ldrb	r3, [r3, #11]
   1273e:	2b00      	cmp	r3, #0
   12740:	d01c      	beq.n	1277c <_i2c_master_read+0x9c>
   12742:	687b      	ldr	r3, [r7, #4]
   12744:	8b9b      	ldrh	r3, [r3, #28]
   12746:	b29b      	uxth	r3, r3
   12748:	2b01      	cmp	r3, #1
   1274a:	d117      	bne.n	1277c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1274c:	68fb      	ldr	r3, [r7, #12]
   1274e:	685b      	ldr	r3, [r3, #4]
   12750:	2280      	movs	r2, #128	; 0x80
   12752:	02d2      	lsls	r2, r2, #11
   12754:	431a      	orrs	r2, r3
   12756:	68fb      	ldr	r3, [r7, #12]
   12758:	605a      	str	r2, [r3, #4]
   1275a:	e00f      	b.n	1277c <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   1275c:	687b      	ldr	r3, [r7, #4]
   1275e:	7adb      	ldrb	r3, [r3, #11]
   12760:	2b00      	cmp	r3, #0
   12762:	d00b      	beq.n	1277c <_i2c_master_read+0x9c>
   12764:	687b      	ldr	r3, [r7, #4]
   12766:	8b9b      	ldrh	r3, [r3, #28]
   12768:	b29b      	uxth	r3, r3
   1276a:	2b00      	cmp	r3, #0
   1276c:	d106      	bne.n	1277c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1276e:	68fb      	ldr	r3, [r7, #12]
   12770:	685b      	ldr	r3, [r3, #4]
   12772:	2280      	movs	r2, #128	; 0x80
   12774:	02d2      	lsls	r2, r2, #11
   12776:	431a      	orrs	r2, r3
   12778:	68fb      	ldr	r3, [r7, #12]
   1277a:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   1277c:	687b      	ldr	r3, [r7, #4]
   1277e:	8b9b      	ldrh	r3, [r3, #28]
   12780:	b29b      	uxth	r3, r3
   12782:	2b00      	cmp	r3, #0
   12784:	d10e      	bne.n	127a4 <_i2c_master_read+0xc4>
		if (module->send_stop) {
   12786:	687b      	ldr	r3, [r7, #4]
   12788:	7a9b      	ldrb	r3, [r3, #10]
   1278a:	2b00      	cmp	r3, #0
   1278c:	d00a      	beq.n	127a4 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1278e:	687b      	ldr	r3, [r7, #4]
   12790:	0018      	movs	r0, r3
   12792:	4b0e      	ldr	r3, [pc, #56]	; (127cc <_i2c_master_read+0xec>)
   12794:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12796:	68fb      	ldr	r3, [r7, #12]
   12798:	685b      	ldr	r3, [r3, #4]
   1279a:	22c0      	movs	r2, #192	; 0xc0
   1279c:	0292      	lsls	r2, r2, #10
   1279e:	431a      	orrs	r2, r3
   127a0:	68fb      	ldr	r3, [r7, #12]
   127a2:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   127a4:	687b      	ldr	r3, [r7, #4]
   127a6:	0018      	movs	r0, r3
   127a8:	4b08      	ldr	r3, [pc, #32]	; (127cc <_i2c_master_read+0xec>)
   127aa:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   127ac:	687b      	ldr	r3, [r7, #4]
   127ae:	6a1a      	ldr	r2, [r3, #32]
   127b0:	2308      	movs	r3, #8
   127b2:	18fb      	adds	r3, r7, r3
   127b4:	881b      	ldrh	r3, [r3, #0]
   127b6:	18d3      	adds	r3, r2, r3
   127b8:	68fa      	ldr	r2, [r7, #12]
   127ba:	2128      	movs	r1, #40	; 0x28
   127bc:	5c52      	ldrb	r2, [r2, r1]
   127be:	b2d2      	uxtb	r2, r2
   127c0:	701a      	strb	r2, [r3, #0]
}
   127c2:	46c0      	nop			; (mov r8, r8)
   127c4:	46bd      	mov	sp, r7
   127c6:	b004      	add	sp, #16
   127c8:	bd80      	pop	{r7, pc}
   127ca:	46c0      	nop			; (mov r8, r8)
   127cc:	000126bd 	.word	0x000126bd

000127d0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   127d0:	b580      	push	{r7, lr}
   127d2:	b084      	sub	sp, #16
   127d4:	af00      	add	r7, sp, #0
   127d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   127d8:	687b      	ldr	r3, [r7, #4]
   127da:	681b      	ldr	r3, [r3, #0]
   127dc:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   127de:	68fb      	ldr	r3, [r7, #12]
   127e0:	8b5b      	ldrh	r3, [r3, #26]
   127e2:	b29b      	uxth	r3, r3
   127e4:	001a      	movs	r2, r3
   127e6:	2304      	movs	r3, #4
   127e8:	4013      	ands	r3, r2
   127ea:	d004      	beq.n	127f6 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   127ec:	687b      	ldr	r3, [r7, #4]
   127ee:	2225      	movs	r2, #37	; 0x25
   127f0:	211e      	movs	r1, #30
   127f2:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   127f4:	e024      	b.n	12840 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   127f6:	230a      	movs	r3, #10
   127f8:	18fb      	adds	r3, r7, r3
   127fa:	687a      	ldr	r2, [r7, #4]
   127fc:	8b52      	ldrh	r2, [r2, #26]
   127fe:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   12800:	687b      	ldr	r3, [r7, #4]
   12802:	8b9b      	ldrh	r3, [r3, #28]
   12804:	b29a      	uxth	r2, r3
   12806:	230a      	movs	r3, #10
   12808:	18fb      	adds	r3, r7, r3
   1280a:	210a      	movs	r1, #10
   1280c:	1879      	adds	r1, r7, r1
   1280e:	8809      	ldrh	r1, [r1, #0]
   12810:	1a8a      	subs	r2, r1, r2
   12812:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12814:	687b      	ldr	r3, [r7, #4]
   12816:	8b9b      	ldrh	r3, [r3, #28]
   12818:	b29b      	uxth	r3, r3
   1281a:	3b01      	subs	r3, #1
   1281c:	b29a      	uxth	r2, r3
   1281e:	687b      	ldr	r3, [r7, #4]
   12820:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   12822:	687b      	ldr	r3, [r7, #4]
   12824:	0018      	movs	r0, r3
   12826:	4b08      	ldr	r3, [pc, #32]	; (12848 <_i2c_master_write+0x78>)
   12828:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   1282a:	687b      	ldr	r3, [r7, #4]
   1282c:	6a1a      	ldr	r2, [r3, #32]
   1282e:	230a      	movs	r3, #10
   12830:	18fb      	adds	r3, r7, r3
   12832:	881b      	ldrh	r3, [r3, #0]
   12834:	18d3      	adds	r3, r2, r3
   12836:	781b      	ldrb	r3, [r3, #0]
   12838:	b2d9      	uxtb	r1, r3
   1283a:	68fb      	ldr	r3, [r7, #12]
   1283c:	2228      	movs	r2, #40	; 0x28
   1283e:	5499      	strb	r1, [r3, r2]
}
   12840:	46bd      	mov	sp, r7
   12842:	b004      	add	sp, #16
   12844:	bd80      	pop	{r7, pc}
   12846:	46c0      	nop			; (mov r8, r8)
   12848:	000126bd 	.word	0x000126bd

0001284c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   1284c:	b580      	push	{r7, lr}
   1284e:	b084      	sub	sp, #16
   12850:	af00      	add	r7, sp, #0
   12852:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12854:	687b      	ldr	r3, [r7, #4]
   12856:	681b      	ldr	r3, [r3, #0]
   12858:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   1285a:	68fb      	ldr	r3, [r7, #12]
   1285c:	7e1b      	ldrb	r3, [r3, #24]
   1285e:	b2db      	uxtb	r3, r3
   12860:	001a      	movs	r2, r3
   12862:	2301      	movs	r3, #1
   12864:	4013      	ands	r3, r2
   12866:	d02b      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   12868:	68fb      	ldr	r3, [r7, #12]
   1286a:	2201      	movs	r2, #1
   1286c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1286e:	68fb      	ldr	r3, [r7, #12]
   12870:	8b5b      	ldrh	r3, [r3, #26]
   12872:	b29b      	uxth	r3, r3
   12874:	001a      	movs	r2, r3
   12876:	2302      	movs	r3, #2
   12878:	4013      	ands	r3, r2
   1287a:	d004      	beq.n	12886 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   1287c:	687b      	ldr	r3, [r7, #4]
   1287e:	2225      	movs	r2, #37	; 0x25
   12880:	2141      	movs	r1, #65	; 0x41
   12882:	5499      	strb	r1, [r3, r2]
   12884:	e01c      	b.n	128c0 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   12886:	68fb      	ldr	r3, [r7, #12]
   12888:	8b5b      	ldrh	r3, [r3, #26]
   1288a:	b29b      	uxth	r3, r3
   1288c:	001a      	movs	r2, r3
   1288e:	2304      	movs	r3, #4
   12890:	4013      	ands	r3, r2
   12892:	d015      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   12894:	687b      	ldr	r3, [r7, #4]
   12896:	2225      	movs	r2, #37	; 0x25
   12898:	2118      	movs	r1, #24
   1289a:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   1289c:	687b      	ldr	r3, [r7, #4]
   1289e:	2200      	movs	r2, #0
   128a0:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   128a2:	687b      	ldr	r3, [r7, #4]
   128a4:	7a9b      	ldrb	r3, [r3, #10]
   128a6:	2b00      	cmp	r3, #0
   128a8:	d00a      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   128aa:	687b      	ldr	r3, [r7, #4]
   128ac:	0018      	movs	r0, r3
   128ae:	4b13      	ldr	r3, [pc, #76]	; (128fc <_i2c_master_async_address_response+0xb0>)
   128b0:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   128b2:	68fb      	ldr	r3, [r7, #12]
   128b4:	685b      	ldr	r3, [r3, #4]
   128b6:	22c0      	movs	r2, #192	; 0xc0
   128b8:	0292      	lsls	r2, r2, #10
   128ba:	431a      	orrs	r2, r3
   128bc:	68fb      	ldr	r3, [r7, #12]
   128be:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   128c0:	687b      	ldr	r3, [r7, #4]
   128c2:	8b9b      	ldrh	r3, [r3, #28]
   128c4:	b29a      	uxth	r2, r3
   128c6:	687b      	ldr	r3, [r7, #4]
   128c8:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   128ca:	687b      	ldr	r3, [r7, #4]
   128cc:	2225      	movs	r2, #37	; 0x25
   128ce:	5c9b      	ldrb	r3, [r3, r2]
   128d0:	b2db      	uxtb	r3, r3
   128d2:	2b05      	cmp	r3, #5
   128d4:	d10e      	bne.n	128f4 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   128d6:	687b      	ldr	r3, [r7, #4]
   128d8:	2224      	movs	r2, #36	; 0x24
   128da:	5c9b      	ldrb	r3, [r3, r2]
   128dc:	b2db      	uxtb	r3, r3
   128de:	2b00      	cmp	r3, #0
   128e0:	d104      	bne.n	128ec <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   128e2:	687b      	ldr	r3, [r7, #4]
   128e4:	0018      	movs	r0, r3
   128e6:	4b06      	ldr	r3, [pc, #24]	; (12900 <_i2c_master_async_address_response+0xb4>)
   128e8:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   128ea:	e003      	b.n	128f4 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   128ec:	687b      	ldr	r3, [r7, #4]
   128ee:	0018      	movs	r0, r3
   128f0:	4b04      	ldr	r3, [pc, #16]	; (12904 <_i2c_master_async_address_response+0xb8>)
   128f2:	4798      	blx	r3
}
   128f4:	46c0      	nop			; (mov r8, r8)
   128f6:	46bd      	mov	sp, r7
   128f8:	b004      	add	sp, #16
   128fa:	bd80      	pop	{r7, pc}
   128fc:	000126bd 	.word	0x000126bd
   12900:	000127d1 	.word	0x000127d1
   12904:	000126e1 	.word	0x000126e1

00012908 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   12908:	b580      	push	{r7, lr}
   1290a:	b084      	sub	sp, #16
   1290c:	af00      	add	r7, sp, #0
   1290e:	60f8      	str	r0, [r7, #12]
   12910:	60b9      	str	r1, [r7, #8]
   12912:	1dfb      	adds	r3, r7, #7
   12914:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	68fa      	ldr	r2, [r7, #12]
   1291c:	3302      	adds	r3, #2
   1291e:	009b      	lsls	r3, r3, #2
   12920:	18d3      	adds	r3, r2, r3
   12922:	3304      	adds	r3, #4
   12924:	68ba      	ldr	r2, [r7, #8]
   12926:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   12928:	68fb      	ldr	r3, [r7, #12]
   1292a:	7e1b      	ldrb	r3, [r3, #24]
   1292c:	b2db      	uxtb	r3, r3
   1292e:	b25a      	sxtb	r2, r3
   12930:	1dfb      	adds	r3, r7, #7
   12932:	781b      	ldrb	r3, [r3, #0]
   12934:	2101      	movs	r1, #1
   12936:	4099      	lsls	r1, r3
   12938:	000b      	movs	r3, r1
   1293a:	b25b      	sxtb	r3, r3
   1293c:	4313      	orrs	r3, r2
   1293e:	b25b      	sxtb	r3, r3
   12940:	b2da      	uxtb	r2, r3
   12942:	68fb      	ldr	r3, [r7, #12]
   12944:	761a      	strb	r2, [r3, #24]
}
   12946:	46c0      	nop			; (mov r8, r8)
   12948:	46bd      	mov	sp, r7
   1294a:	b004      	add	sp, #16
   1294c:	bd80      	pop	{r7, pc}
	...

00012950 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12950:	b590      	push	{r4, r7, lr}
   12952:	b087      	sub	sp, #28
   12954:	af00      	add	r7, sp, #0
   12956:	6078      	str	r0, [r7, #4]
   12958:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1295a:	687b      	ldr	r3, [r7, #4]
   1295c:	681b      	ldr	r3, [r3, #0]
   1295e:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   12960:	683b      	ldr	r3, [r7, #0]
   12962:	685a      	ldr	r2, [r3, #4]
   12964:	687b      	ldr	r3, [r7, #4]
   12966:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12968:	683b      	ldr	r3, [r7, #0]
   1296a:	885a      	ldrh	r2, [r3, #2]
   1296c:	687b      	ldr	r3, [r7, #4]
   1296e:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   12970:	687b      	ldr	r3, [r7, #4]
   12972:	2224      	movs	r2, #36	; 0x24
   12974:	2101      	movs	r1, #1
   12976:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12978:	687b      	ldr	r3, [r7, #4]
   1297a:	2225      	movs	r2, #37	; 0x25
   1297c:	2105      	movs	r1, #5
   1297e:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12980:	693b      	ldr	r3, [r7, #16]
   12982:	681b      	ldr	r3, [r3, #0]
   12984:	011b      	lsls	r3, r3, #4
   12986:	0fdb      	lsrs	r3, r3, #31
   12988:	b2db      	uxtb	r3, r3
   1298a:	001a      	movs	r2, r3
   1298c:	230f      	movs	r3, #15
   1298e:	18fb      	adds	r3, r7, r3
   12990:	1e51      	subs	r1, r2, #1
   12992:	418a      	sbcs	r2, r1
   12994:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12996:	683b      	ldr	r3, [r7, #0]
   12998:	7a5b      	ldrb	r3, [r3, #9]
   1299a:	2b00      	cmp	r3, #0
   1299c:	d006      	beq.n	129ac <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   1299e:	683b      	ldr	r3, [r7, #0]
   129a0:	7a9a      	ldrb	r2, [r3, #10]
   129a2:	687b      	ldr	r3, [r7, #4]
   129a4:	0011      	movs	r1, r2
   129a6:	0018      	movs	r0, r3
   129a8:	4b3b      	ldr	r3, [pc, #236]	; (12a98 <_i2c_master_read_packet+0x148>)
   129aa:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   129ac:	230f      	movs	r3, #15
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	781b      	ldrb	r3, [r3, #0]
   129b2:	2b00      	cmp	r3, #0
   129b4:	d00b      	beq.n	129ce <_i2c_master_read_packet+0x7e>
   129b6:	683b      	ldr	r3, [r7, #0]
   129b8:	885b      	ldrh	r3, [r3, #2]
   129ba:	2b01      	cmp	r3, #1
   129bc:	d107      	bne.n	129ce <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   129be:	693b      	ldr	r3, [r7, #16]
   129c0:	685b      	ldr	r3, [r3, #4]
   129c2:	2280      	movs	r2, #128	; 0x80
   129c4:	02d2      	lsls	r2, r2, #11
   129c6:	431a      	orrs	r2, r3
   129c8:	693b      	ldr	r3, [r7, #16]
   129ca:	605a      	str	r2, [r3, #4]
   129cc:	e005      	b.n	129da <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   129ce:	693b      	ldr	r3, [r7, #16]
   129d0:	685b      	ldr	r3, [r3, #4]
   129d2:	4a32      	ldr	r2, [pc, #200]	; (12a9c <_i2c_master_read_packet+0x14c>)
   129d4:	401a      	ands	r2, r3
   129d6:	693b      	ldr	r3, [r7, #16]
   129d8:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   129da:	683b      	ldr	r3, [r7, #0]
   129dc:	7a1b      	ldrb	r3, [r3, #8]
   129de:	2b00      	cmp	r3, #0
   129e0:	d045      	beq.n	12a6e <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   129e2:	683b      	ldr	r3, [r7, #0]
   129e4:	881b      	ldrh	r3, [r3, #0]
   129e6:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129e8:	683b      	ldr	r3, [r7, #0]
   129ea:	7a5b      	ldrb	r3, [r3, #9]
   129ec:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   129ee:	4313      	orrs	r3, r2
   129f0:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129f2:	2380      	movs	r3, #128	; 0x80
   129f4:	021b      	lsls	r3, r3, #8
   129f6:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   129f8:	693b      	ldr	r3, [r7, #16]
   129fa:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   129fc:	2317      	movs	r3, #23
   129fe:	18fc      	adds	r4, r7, r3
   12a00:	687b      	ldr	r3, [r7, #4]
   12a02:	0018      	movs	r0, r3
   12a04:	4b26      	ldr	r3, [pc, #152]	; (12aa0 <_i2c_master_read_packet+0x150>)
   12a06:	4798      	blx	r3
   12a08:	0003      	movs	r3, r0
   12a0a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12a0c:	693b      	ldr	r3, [r7, #16]
   12a0e:	685b      	ldr	r3, [r3, #4]
   12a10:	4a22      	ldr	r2, [pc, #136]	; (12a9c <_i2c_master_read_packet+0x14c>)
   12a12:	401a      	ands	r2, r3
   12a14:	693b      	ldr	r3, [r7, #16]
   12a16:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   12a18:	2317      	movs	r3, #23
   12a1a:	18fb      	adds	r3, r7, r3
   12a1c:	781b      	ldrb	r3, [r3, #0]
   12a1e:	2b00      	cmp	r3, #0
   12a20:	d107      	bne.n	12a32 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   12a22:	2317      	movs	r3, #23
   12a24:	18fc      	adds	r4, r7, r3
   12a26:	687b      	ldr	r3, [r7, #4]
   12a28:	0018      	movs	r0, r3
   12a2a:	4b1e      	ldr	r3, [pc, #120]	; (12aa4 <_i2c_master_read_packet+0x154>)
   12a2c:	4798      	blx	r3
   12a2e:	0003      	movs	r3, r0
   12a30:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   12a32:	2317      	movs	r3, #23
   12a34:	18fb      	adds	r3, r7, r3
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	2b00      	cmp	r3, #0
   12a3a:	d114      	bne.n	12a66 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   12a3c:	693b      	ldr	r3, [r7, #16]
   12a3e:	2203      	movs	r2, #3
   12a40:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a42:	683b      	ldr	r3, [r7, #0]
   12a44:	881b      	ldrh	r3, [r3, #0]
   12a46:	0a1b      	lsrs	r3, r3, #8
   12a48:	b29b      	uxth	r3, r3
   12a4a:	2278      	movs	r2, #120	; 0x78
   12a4c:	4313      	orrs	r3, r2
   12a4e:	b29b      	uxth	r3, r3
   12a50:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a52:	683b      	ldr	r3, [r7, #0]
   12a54:	7a5b      	ldrb	r3, [r3, #9]
   12a56:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a58:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a5a:	2201      	movs	r2, #1
   12a5c:	4313      	orrs	r3, r2
   12a5e:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a60:	693b      	ldr	r3, [r7, #16]
   12a62:	625a      	str	r2, [r3, #36]	; 0x24
   12a64:	e012      	b.n	12a8c <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   12a66:	2317      	movs	r3, #23
   12a68:	18fb      	adds	r3, r7, r3
   12a6a:	781b      	ldrb	r3, [r3, #0]
   12a6c:	e00f      	b.n	12a8e <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   12a6e:	693b      	ldr	r3, [r7, #16]
   12a70:	2203      	movs	r2, #3
   12a72:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a74:	683b      	ldr	r3, [r7, #0]
   12a76:	881b      	ldrh	r3, [r3, #0]
   12a78:	005b      	lsls	r3, r3, #1
   12a7a:	2201      	movs	r2, #1
   12a7c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12a7e:	683b      	ldr	r3, [r7, #0]
   12a80:	7a5b      	ldrb	r3, [r3, #9]
   12a82:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a84:	4313      	orrs	r3, r2
   12a86:	001a      	movs	r2, r3
   12a88:	693b      	ldr	r3, [r7, #16]
   12a8a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12a8c:	2300      	movs	r3, #0
}
   12a8e:	0018      	movs	r0, r3
   12a90:	46bd      	mov	sp, r7
   12a92:	b007      	add	sp, #28
   12a94:	bd90      	pop	{r4, r7, pc}
   12a96:	46c0      	nop			; (mov r8, r8)
   12a98:	0001a171 	.word	0x0001a171
   12a9c:	fffbffff 	.word	0xfffbffff
   12aa0:	0001a113 	.word	0x0001a113
   12aa4:	0001a0b5 	.word	0x0001a0b5

00012aa8 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12aa8:	b580      	push	{r7, lr}
   12aaa:	b082      	sub	sp, #8
   12aac:	af00      	add	r7, sp, #0
   12aae:	6078      	str	r0, [r7, #4]
   12ab0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   12ab2:	687b      	ldr	r3, [r7, #4]
   12ab4:	8b9b      	ldrh	r3, [r3, #28]
   12ab6:	b29b      	uxth	r3, r3
   12ab8:	2b00      	cmp	r3, #0
   12aba:	d001      	beq.n	12ac0 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   12abc:	2305      	movs	r3, #5
   12abe:	e00c      	b.n	12ada <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   12ac0:	687b      	ldr	r3, [r7, #4]
   12ac2:	2201      	movs	r2, #1
   12ac4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12ac6:	687b      	ldr	r3, [r7, #4]
   12ac8:	2201      	movs	r2, #1
   12aca:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   12acc:	683a      	ldr	r2, [r7, #0]
   12ace:	687b      	ldr	r3, [r7, #4]
   12ad0:	0011      	movs	r1, r2
   12ad2:	0018      	movs	r0, r3
   12ad4:	4b03      	ldr	r3, [pc, #12]	; (12ae4 <i2c_master_read_packet_job+0x3c>)
   12ad6:	4798      	blx	r3
   12ad8:	0003      	movs	r3, r0
}
   12ada:	0018      	movs	r0, r3
   12adc:	46bd      	mov	sp, r7
   12ade:	b002      	add	sp, #8
   12ae0:	bd80      	pop	{r7, pc}
   12ae2:	46c0      	nop			; (mov r8, r8)
   12ae4:	00012951 	.word	0x00012951

00012ae8 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12ae8:	b580      	push	{r7, lr}
   12aea:	b084      	sub	sp, #16
   12aec:	af00      	add	r7, sp, #0
   12aee:	6078      	str	r0, [r7, #4]
   12af0:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12af2:	687b      	ldr	r3, [r7, #4]
   12af4:	681b      	ldr	r3, [r3, #0]
   12af6:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12af8:	683b      	ldr	r3, [r7, #0]
   12afa:	7a5b      	ldrb	r3, [r3, #9]
   12afc:	2b00      	cmp	r3, #0
   12afe:	d006      	beq.n	12b0e <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   12b00:	683b      	ldr	r3, [r7, #0]
   12b02:	7a9a      	ldrb	r2, [r3, #10]
   12b04:	687b      	ldr	r3, [r7, #4]
   12b06:	0011      	movs	r1, r2
   12b08:	0018      	movs	r0, r3
   12b0a:	4b1e      	ldr	r3, [pc, #120]	; (12b84 <_i2c_master_write_packet+0x9c>)
   12b0c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12b0e:	68fb      	ldr	r3, [r7, #12]
   12b10:	685b      	ldr	r3, [r3, #4]
   12b12:	4a1d      	ldr	r2, [pc, #116]	; (12b88 <_i2c_master_write_packet+0xa0>)
   12b14:	401a      	ands	r2, r3
   12b16:	68fb      	ldr	r3, [r7, #12]
   12b18:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   12b1a:	683b      	ldr	r3, [r7, #0]
   12b1c:	685a      	ldr	r2, [r3, #4]
   12b1e:	687b      	ldr	r3, [r7, #4]
   12b20:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12b22:	683b      	ldr	r3, [r7, #0]
   12b24:	885a      	ldrh	r2, [r3, #2]
   12b26:	687b      	ldr	r3, [r7, #4]
   12b28:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   12b2a:	687b      	ldr	r3, [r7, #4]
   12b2c:	2224      	movs	r2, #36	; 0x24
   12b2e:	2100      	movs	r1, #0
   12b30:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12b32:	687b      	ldr	r3, [r7, #4]
   12b34:	2225      	movs	r2, #37	; 0x25
   12b36:	2105      	movs	r1, #5
   12b38:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   12b3a:	68fb      	ldr	r3, [r7, #12]
   12b3c:	2203      	movs	r2, #3
   12b3e:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   12b40:	683b      	ldr	r3, [r7, #0]
   12b42:	7a1b      	ldrb	r3, [r3, #8]
   12b44:	2b00      	cmp	r3, #0
   12b46:	d00d      	beq.n	12b64 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b48:	683b      	ldr	r3, [r7, #0]
   12b4a:	881b      	ldrh	r3, [r3, #0]
   12b4c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12b4e:	683b      	ldr	r3, [r7, #0]
   12b50:	7a5b      	ldrb	r3, [r3, #9]
   12b52:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b54:	4313      	orrs	r3, r2
   12b56:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12b58:	2380      	movs	r3, #128	; 0x80
   12b5a:	021b      	lsls	r3, r3, #8
   12b5c:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b5e:	68fb      	ldr	r3, [r7, #12]
   12b60:	625a      	str	r2, [r3, #36]	; 0x24
   12b62:	e009      	b.n	12b78 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b64:	683b      	ldr	r3, [r7, #0]
   12b66:	881b      	ldrh	r3, [r3, #0]
   12b68:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12b6a:	683b      	ldr	r3, [r7, #0]
   12b6c:	7a5b      	ldrb	r3, [r3, #9]
   12b6e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b70:	4313      	orrs	r3, r2
   12b72:	001a      	movs	r2, r3
   12b74:	68fb      	ldr	r3, [r7, #12]
   12b76:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12b78:	2300      	movs	r3, #0
}
   12b7a:	0018      	movs	r0, r3
   12b7c:	46bd      	mov	sp, r7
   12b7e:	b004      	add	sp, #16
   12b80:	bd80      	pop	{r7, pc}
   12b82:	46c0      	nop			; (mov r8, r8)
   12b84:	0001a171 	.word	0x0001a171
   12b88:	fffbffff 	.word	0xfffbffff

00012b8c <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12b8c:	b580      	push	{r7, lr}
   12b8e:	b082      	sub	sp, #8
   12b90:	af00      	add	r7, sp, #0
   12b92:	6078      	str	r0, [r7, #4]
   12b94:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   12b96:	687b      	ldr	r3, [r7, #4]
   12b98:	8b9b      	ldrh	r3, [r3, #28]
   12b9a:	b29b      	uxth	r3, r3
   12b9c:	2b00      	cmp	r3, #0
   12b9e:	d001      	beq.n	12ba4 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   12ba0:	2305      	movs	r3, #5
   12ba2:	e00c      	b.n	12bbe <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   12ba4:	687b      	ldr	r3, [r7, #4]
   12ba6:	2201      	movs	r2, #1
   12ba8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12baa:	687b      	ldr	r3, [r7, #4]
   12bac:	2201      	movs	r2, #1
   12bae:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   12bb0:	683a      	ldr	r2, [r7, #0]
   12bb2:	687b      	ldr	r3, [r7, #4]
   12bb4:	0011      	movs	r1, r2
   12bb6:	0018      	movs	r0, r3
   12bb8:	4b03      	ldr	r3, [pc, #12]	; (12bc8 <i2c_master_write_packet_job+0x3c>)
   12bba:	4798      	blx	r3
   12bbc:	0003      	movs	r3, r0
}
   12bbe:	0018      	movs	r0, r3
   12bc0:	46bd      	mov	sp, r7
   12bc2:	b002      	add	sp, #8
   12bc4:	bd80      	pop	{r7, pc}
   12bc6:	46c0      	nop			; (mov r8, r8)
   12bc8:	00012ae9 	.word	0x00012ae9

00012bcc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   12bcc:	b580      	push	{r7, lr}
   12bce:	b086      	sub	sp, #24
   12bd0:	af00      	add	r7, sp, #0
   12bd2:	0002      	movs	r2, r0
   12bd4:	1dfb      	adds	r3, r7, #7
   12bd6:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   12bd8:	1dfb      	adds	r3, r7, #7
   12bda:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   12bdc:	4b93      	ldr	r3, [pc, #588]	; (12e2c <_i2c_master_interrupt_handler+0x260>)
   12bde:	0092      	lsls	r2, r2, #2
   12be0:	58d3      	ldr	r3, [r2, r3]
   12be2:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12be4:	697b      	ldr	r3, [r7, #20]
   12be6:	681b      	ldr	r3, [r3, #0]
   12be8:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12bea:	693b      	ldr	r3, [r7, #16]
   12bec:	681b      	ldr	r3, [r3, #0]
   12bee:	011b      	lsls	r3, r3, #4
   12bf0:	0fdb      	lsrs	r3, r3, #31
   12bf2:	b2db      	uxtb	r3, r3
   12bf4:	001a      	movs	r2, r3
   12bf6:	230f      	movs	r3, #15
   12bf8:	18fb      	adds	r3, r7, r3
   12bfa:	1e51      	subs	r1, r2, #1
   12bfc:	418a      	sbcs	r2, r1
   12bfe:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   12c00:	230e      	movs	r3, #14
   12c02:	18fb      	adds	r3, r7, r3
   12c04:	697a      	ldr	r2, [r7, #20]
   12c06:	7e52      	ldrb	r2, [r2, #25]
   12c08:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   12c0a:	697b      	ldr	r3, [r7, #20]
   12c0c:	7e1b      	ldrb	r3, [r3, #24]
   12c0e:	b2da      	uxtb	r2, r3
   12c10:	230e      	movs	r3, #14
   12c12:	18fb      	adds	r3, r7, r3
   12c14:	210e      	movs	r1, #14
   12c16:	1879      	adds	r1, r7, r1
   12c18:	7809      	ldrb	r1, [r1, #0]
   12c1a:	400a      	ands	r2, r1
   12c1c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   12c1e:	697b      	ldr	r3, [r7, #20]
   12c20:	8b5b      	ldrh	r3, [r3, #26]
   12c22:	b29b      	uxth	r3, r3
   12c24:	2b00      	cmp	r3, #0
   12c26:	d109      	bne.n	12c3c <_i2c_master_interrupt_handler+0x70>
   12c28:	697b      	ldr	r3, [r7, #20]
   12c2a:	8b9b      	ldrh	r3, [r3, #28]
   12c2c:	b29b      	uxth	r3, r3
   12c2e:	2b00      	cmp	r3, #0
   12c30:	d004      	beq.n	12c3c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   12c32:	697b      	ldr	r3, [r7, #20]
   12c34:	0018      	movs	r0, r3
   12c36:	4b7e      	ldr	r3, [pc, #504]	; (12e30 <_i2c_master_interrupt_handler+0x264>)
   12c38:	4798      	blx	r3
   12c3a:	e070      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12c3c:	697b      	ldr	r3, [r7, #20]
   12c3e:	8b5b      	ldrh	r3, [r3, #26]
   12c40:	b29b      	uxth	r3, r3
   12c42:	2b00      	cmp	r3, #0
   12c44:	d039      	beq.n	12cba <_i2c_master_interrupt_handler+0xee>
   12c46:	697b      	ldr	r3, [r7, #20]
   12c48:	8b9b      	ldrh	r3, [r3, #28]
   12c4a:	b29b      	uxth	r3, r3
   12c4c:	2b00      	cmp	r3, #0
   12c4e:	d134      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   12c50:	697b      	ldr	r3, [r7, #20]
   12c52:	2225      	movs	r2, #37	; 0x25
   12c54:	5c9b      	ldrb	r3, [r3, r2]
   12c56:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12c58:	2b05      	cmp	r3, #5
   12c5a:	d12e      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12c5c:	697b      	ldr	r3, [r7, #20]
   12c5e:	2224      	movs	r2, #36	; 0x24
   12c60:	5c9b      	ldrb	r3, [r3, r2]
   12c62:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12c64:	2b00      	cmp	r3, #0
   12c66:	d128      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12c68:	693b      	ldr	r3, [r7, #16]
   12c6a:	2203      	movs	r2, #3
   12c6c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12c6e:	697b      	ldr	r3, [r7, #20]
   12c70:	2200      	movs	r2, #0
   12c72:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12c74:	697b      	ldr	r3, [r7, #20]
   12c76:	2225      	movs	r2, #37	; 0x25
   12c78:	2100      	movs	r1, #0
   12c7a:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   12c7c:	697b      	ldr	r3, [r7, #20]
   12c7e:	7a9b      	ldrb	r3, [r3, #10]
   12c80:	2b00      	cmp	r3, #0
   12c82:	d00b      	beq.n	12c9c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   12c84:	697b      	ldr	r3, [r7, #20]
   12c86:	0018      	movs	r0, r3
   12c88:	4b6a      	ldr	r3, [pc, #424]	; (12e34 <_i2c_master_interrupt_handler+0x268>)
   12c8a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12c8c:	693b      	ldr	r3, [r7, #16]
   12c8e:	685b      	ldr	r3, [r3, #4]
   12c90:	22c0      	movs	r2, #192	; 0xc0
   12c92:	0292      	lsls	r2, r2, #10
   12c94:	431a      	orrs	r2, r3
   12c96:	693b      	ldr	r3, [r7, #16]
   12c98:	605a      	str	r2, [r3, #4]
   12c9a:	e002      	b.n	12ca2 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   12c9c:	693b      	ldr	r3, [r7, #16]
   12c9e:	2201      	movs	r2, #1
   12ca0:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12ca2:	230e      	movs	r3, #14
   12ca4:	18fb      	adds	r3, r7, r3
   12ca6:	781b      	ldrb	r3, [r3, #0]
   12ca8:	2201      	movs	r2, #1
   12caa:	4013      	ands	r3, r2
   12cac:	d037      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12cae:	697b      	ldr	r3, [r7, #20]
   12cb0:	68db      	ldr	r3, [r3, #12]
   12cb2:	697a      	ldr	r2, [r7, #20]
   12cb4:	0010      	movs	r0, r2
   12cb6:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12cb8:	e031      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   12cba:	697b      	ldr	r3, [r7, #20]
   12cbc:	8b5b      	ldrh	r3, [r3, #26]
   12cbe:	b29b      	uxth	r3, r3
   12cc0:	2b00      	cmp	r3, #0
   12cc2:	d02c      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
   12cc4:	697b      	ldr	r3, [r7, #20]
   12cc6:	8b9b      	ldrh	r3, [r3, #28]
   12cc8:	b29b      	uxth	r3, r3
   12cca:	2b00      	cmp	r3, #0
   12ccc:	d027      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12cce:	693b      	ldr	r3, [r7, #16]
   12cd0:	8b5b      	ldrh	r3, [r3, #26]
   12cd2:	b29b      	uxth	r3, r3
   12cd4:	001a      	movs	r2, r3
   12cd6:	2320      	movs	r3, #32
   12cd8:	4013      	ands	r3, r2
   12cda:	d111      	bne.n	12d00 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12cdc:	230f      	movs	r3, #15
   12cde:	18fb      	adds	r3, r7, r3
   12ce0:	781b      	ldrb	r3, [r3, #0]
   12ce2:	2201      	movs	r2, #1
   12ce4:	4053      	eors	r3, r2
   12ce6:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12ce8:	2b00      	cmp	r3, #0
   12cea:	d104      	bne.n	12cf6 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12cec:	697b      	ldr	r3, [r7, #20]
   12cee:	8b9b      	ldrh	r3, [r3, #28]
   12cf0:	b29b      	uxth	r3, r3
   12cf2:	2b01      	cmp	r3, #1
   12cf4:	d004      	beq.n	12d00 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   12cf6:	697b      	ldr	r3, [r7, #20]
   12cf8:	2225      	movs	r2, #37	; 0x25
   12cfa:	2141      	movs	r1, #65	; 0x41
   12cfc:	5499      	strb	r1, [r3, r2]
   12cfe:	e00e      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   12d00:	697b      	ldr	r3, [r7, #20]
   12d02:	2224      	movs	r2, #36	; 0x24
   12d04:	5c9b      	ldrb	r3, [r3, r2]
   12d06:	b2db      	uxtb	r3, r3
   12d08:	2b00      	cmp	r3, #0
   12d0a:	d104      	bne.n	12d16 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   12d0c:	697b      	ldr	r3, [r7, #20]
   12d0e:	0018      	movs	r0, r3
   12d10:	4b49      	ldr	r3, [pc, #292]	; (12e38 <_i2c_master_interrupt_handler+0x26c>)
   12d12:	4798      	blx	r3
   12d14:	e003      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   12d16:	697b      	ldr	r3, [r7, #20]
   12d18:	0018      	movs	r0, r3
   12d1a:	4b48      	ldr	r3, [pc, #288]	; (12e3c <_i2c_master_interrupt_handler+0x270>)
   12d1c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12d1e:	697b      	ldr	r3, [r7, #20]
   12d20:	8b5b      	ldrh	r3, [r3, #26]
   12d22:	b29b      	uxth	r3, r3
   12d24:	2b00      	cmp	r3, #0
   12d26:	d047      	beq.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
   12d28:	697b      	ldr	r3, [r7, #20]
   12d2a:	8b9b      	ldrh	r3, [r3, #28]
   12d2c:	b29b      	uxth	r3, r3
   12d2e:	2b00      	cmp	r3, #0
   12d30:	d142      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   12d32:	697b      	ldr	r3, [r7, #20]
   12d34:	2225      	movs	r2, #37	; 0x25
   12d36:	5c9b      	ldrb	r3, [r3, r2]
   12d38:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12d3a:	2b05      	cmp	r3, #5
   12d3c:	d13c      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   12d3e:	697b      	ldr	r3, [r7, #20]
   12d40:	2224      	movs	r2, #36	; 0x24
   12d42:	5c9b      	ldrb	r3, [r3, r2]
   12d44:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12d46:	2b01      	cmp	r3, #1
   12d48:	d136      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   12d4a:	693b      	ldr	r3, [r7, #16]
   12d4c:	7e1b      	ldrb	r3, [r3, #24]
   12d4e:	b2db      	uxtb	r3, r3
   12d50:	001a      	movs	r2, r3
   12d52:	2302      	movs	r3, #2
   12d54:	4013      	ands	r3, r2
   12d56:	d002      	beq.n	12d5e <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   12d58:	693b      	ldr	r3, [r7, #16]
   12d5a:	2202      	movs	r2, #2
   12d5c:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12d5e:	693b      	ldr	r3, [r7, #16]
   12d60:	2203      	movs	r2, #3
   12d62:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   12d64:	697b      	ldr	r3, [r7, #20]
   12d66:	2200      	movs	r2, #0
   12d68:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12d6a:	697b      	ldr	r3, [r7, #20]
   12d6c:	2225      	movs	r2, #37	; 0x25
   12d6e:	2100      	movs	r1, #0
   12d70:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   12d72:	230e      	movs	r3, #14
   12d74:	18fb      	adds	r3, r7, r3
   12d76:	781b      	ldrb	r3, [r3, #0]
   12d78:	2202      	movs	r2, #2
   12d7a:	4013      	ands	r3, r2
   12d7c:	d00b      	beq.n	12d96 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   12d7e:	697b      	ldr	r3, [r7, #20]
   12d80:	2224      	movs	r2, #36	; 0x24
   12d82:	5c9b      	ldrb	r3, [r3, r2]
   12d84:	b2db      	uxtb	r3, r3
   12d86:	2b01      	cmp	r3, #1
   12d88:	d105      	bne.n	12d96 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   12d8a:	697b      	ldr	r3, [r7, #20]
   12d8c:	691b      	ldr	r3, [r3, #16]
   12d8e:	697a      	ldr	r2, [r7, #20]
   12d90:	0010      	movs	r0, r2
   12d92:	4798      	blx	r3
   12d94:	e010      	b.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   12d96:	230e      	movs	r3, #14
   12d98:	18fb      	adds	r3, r7, r3
   12d9a:	781b      	ldrb	r3, [r3, #0]
   12d9c:	2201      	movs	r2, #1
   12d9e:	4013      	ands	r3, r2
   12da0:	d00a      	beq.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12da2:	697b      	ldr	r3, [r7, #20]
   12da4:	2224      	movs	r2, #36	; 0x24
   12da6:	5c9b      	ldrb	r3, [r3, r2]
   12da8:	b2db      	uxtb	r3, r3
   12daa:	2b00      	cmp	r3, #0
   12dac:	d104      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12dae:	697b      	ldr	r3, [r7, #20]
   12db0:	68db      	ldr	r3, [r3, #12]
   12db2:	697a      	ldr	r2, [r7, #20]
   12db4:	0010      	movs	r0, r2
   12db6:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   12db8:	697b      	ldr	r3, [r7, #20]
   12dba:	2225      	movs	r2, #37	; 0x25
   12dbc:	5c9b      	ldrb	r3, [r3, r2]
   12dbe:	b2db      	uxtb	r3, r3
   12dc0:	2b05      	cmp	r3, #5
   12dc2:	d02e      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
   12dc4:	697b      	ldr	r3, [r7, #20]
   12dc6:	2225      	movs	r2, #37	; 0x25
   12dc8:	5c9b      	ldrb	r3, [r3, r2]
   12dca:	b2db      	uxtb	r3, r3
   12dcc:	2b00      	cmp	r3, #0
   12dce:	d028      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   12dd0:	693b      	ldr	r3, [r7, #16]
   12dd2:	2203      	movs	r2, #3
   12dd4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12dd6:	697b      	ldr	r3, [r7, #20]
   12dd8:	2200      	movs	r2, #0
   12dda:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   12ddc:	697b      	ldr	r3, [r7, #20]
   12dde:	2200      	movs	r2, #0
   12de0:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12de2:	697b      	ldr	r3, [r7, #20]
   12de4:	2225      	movs	r2, #37	; 0x25
   12de6:	5c9b      	ldrb	r3, [r3, r2]
   12de8:	b2db      	uxtb	r3, r3
   12dea:	2b41      	cmp	r3, #65	; 0x41
   12dec:	d00e      	beq.n	12e0c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   12dee:	697b      	ldr	r3, [r7, #20]
   12df0:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12df2:	2b00      	cmp	r3, #0
   12df4:	d00a      	beq.n	12e0c <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   12df6:	697b      	ldr	r3, [r7, #20]
   12df8:	0018      	movs	r0, r3
   12dfa:	4b0e      	ldr	r3, [pc, #56]	; (12e34 <_i2c_master_interrupt_handler+0x268>)
   12dfc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   12dfe:	693b      	ldr	r3, [r7, #16]
   12e00:	685b      	ldr	r3, [r3, #4]
   12e02:	22e0      	movs	r2, #224	; 0xe0
   12e04:	02d2      	lsls	r2, r2, #11
   12e06:	431a      	orrs	r2, r3
   12e08:	693b      	ldr	r3, [r7, #16]
   12e0a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   12e0c:	230e      	movs	r3, #14
   12e0e:	18fb      	adds	r3, r7, r3
   12e10:	781b      	ldrb	r3, [r3, #0]
   12e12:	2204      	movs	r2, #4
   12e14:	4013      	ands	r3, r2
   12e16:	d004      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   12e18:	697b      	ldr	r3, [r7, #20]
   12e1a:	695b      	ldr	r3, [r3, #20]
   12e1c:	697a      	ldr	r2, [r7, #20]
   12e1e:	0010      	movs	r0, r2
   12e20:	4798      	blx	r3
		}
	}
}
   12e22:	46c0      	nop			; (mov r8, r8)
   12e24:	46bd      	mov	sp, r7
   12e26:	b006      	add	sp, #24
   12e28:	bd80      	pop	{r7, pc}
   12e2a:	46c0      	nop			; (mov r8, r8)
   12e2c:	20005a84 	.word	0x20005a84
   12e30:	0001284d 	.word	0x0001284d
   12e34:	000126bd 	.word	0x000126bd
   12e38:	000127d1 	.word	0x000127d1
   12e3c:	000126e1 	.word	0x000126e1

00012e40 <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
   12e40:	b5b0      	push	{r4, r5, r7, lr}
   12e42:	b084      	sub	sp, #16
   12e44:	af00      	add	r7, sp, #0
   12e46:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   12e48:	230f      	movs	r3, #15
   12e4a:	18fc      	adds	r4, r7, r3
   12e4c:	687b      	ldr	r3, [r7, #4]
   12e4e:	0018      	movs	r0, r3
   12e50:	4b20      	ldr	r3, [pc, #128]	; (12ed4 <bme680_init+0x94>)
   12e52:	4798      	blx	r3
   12e54:	0003      	movs	r3, r0
   12e56:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   12e58:	230f      	movs	r3, #15
   12e5a:	18fb      	adds	r3, r7, r3
   12e5c:	781b      	ldrb	r3, [r3, #0]
   12e5e:	b25b      	sxtb	r3, r3
   12e60:	2b00      	cmp	r3, #0
   12e62:	d12e      	bne.n	12ec2 <bme680_init+0x82>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
   12e64:	230f      	movs	r3, #15
   12e66:	18fc      	adds	r4, r7, r3
   12e68:	687b      	ldr	r3, [r7, #4]
   12e6a:	0018      	movs	r0, r3
   12e6c:	4b1a      	ldr	r3, [pc, #104]	; (12ed8 <bme680_init+0x98>)
   12e6e:	4798      	blx	r3
   12e70:	0003      	movs	r3, r0
   12e72:	7023      	strb	r3, [r4, #0]
		if (rslt == BME680_OK) {
   12e74:	230f      	movs	r3, #15
   12e76:	18fb      	adds	r3, r7, r3
   12e78:	781b      	ldrb	r3, [r3, #0]
   12e7a:	b25b      	sxtb	r3, r3
   12e7c:	2b00      	cmp	r3, #0
   12e7e:	d120      	bne.n	12ec2 <bme680_init+0x82>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
   12e80:	6879      	ldr	r1, [r7, #4]
   12e82:	230f      	movs	r3, #15
   12e84:	18fc      	adds	r4, r7, r3
   12e86:	687b      	ldr	r3, [r7, #4]
   12e88:	2201      	movs	r2, #1
   12e8a:	20d0      	movs	r0, #208	; 0xd0
   12e8c:	4d13      	ldr	r5, [pc, #76]	; (12edc <bme680_init+0x9c>)
   12e8e:	47a8      	blx	r5
   12e90:	0003      	movs	r3, r0
   12e92:	7023      	strb	r3, [r4, #0]
			if (rslt == BME680_OK) {
   12e94:	230f      	movs	r3, #15
   12e96:	18fb      	adds	r3, r7, r3
   12e98:	781b      	ldrb	r3, [r3, #0]
   12e9a:	b25b      	sxtb	r3, r3
   12e9c:	2b00      	cmp	r3, #0
   12e9e:	d110      	bne.n	12ec2 <bme680_init+0x82>
				if (dev->chip_id == BME680_CHIP_ID) {
   12ea0:	687b      	ldr	r3, [r7, #4]
   12ea2:	781b      	ldrb	r3, [r3, #0]
   12ea4:	2b61      	cmp	r3, #97	; 0x61
   12ea6:	d108      	bne.n	12eba <bme680_init+0x7a>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
   12ea8:	230f      	movs	r3, #15
   12eaa:	18fc      	adds	r4, r7, r3
   12eac:	687b      	ldr	r3, [r7, #4]
   12eae:	0018      	movs	r0, r3
   12eb0:	4b0b      	ldr	r3, [pc, #44]	; (12ee0 <bme680_init+0xa0>)
   12eb2:	4798      	blx	r3
   12eb4:	0003      	movs	r3, r0
   12eb6:	7023      	strb	r3, [r4, #0]
   12eb8:	e003      	b.n	12ec2 <bme680_init+0x82>
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
   12eba:	230f      	movs	r3, #15
   12ebc:	18fb      	adds	r3, r7, r3
   12ebe:	22fd      	movs	r2, #253	; 0xfd
   12ec0:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	return rslt;
   12ec2:	230f      	movs	r3, #15
   12ec4:	18fb      	adds	r3, r7, r3
   12ec6:	781b      	ldrb	r3, [r3, #0]
   12ec8:	b25b      	sxtb	r3, r3
}
   12eca:	0018      	movs	r0, r3
   12ecc:	46bd      	mov	sp, r7
   12ece:	b004      	add	sp, #16
   12ed0:	bdb0      	pop	{r4, r5, r7, pc}
   12ed2:	46c0      	nop			; (mov r8, r8)
   12ed4:	0001482f 	.word	0x0001482f
   12ed8:	00013119 	.word	0x00013119
   12edc:	00012ee5 	.word	0x00012ee5
   12ee0:	00013951 	.word	0x00013951

00012ee4 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
   12ee4:	b5b0      	push	{r4, r5, r7, lr}
   12ee6:	b086      	sub	sp, #24
   12ee8:	af00      	add	r7, sp, #0
   12eea:	60b9      	str	r1, [r7, #8]
   12eec:	0011      	movs	r1, r2
   12eee:	607b      	str	r3, [r7, #4]
   12ef0:	230f      	movs	r3, #15
   12ef2:	18fb      	adds	r3, r7, r3
   12ef4:	1c02      	adds	r2, r0, #0
   12ef6:	701a      	strb	r2, [r3, #0]
   12ef8:	230c      	movs	r3, #12
   12efa:	18fb      	adds	r3, r7, r3
   12efc:	1c0a      	adds	r2, r1, #0
   12efe:	801a      	strh	r2, [r3, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   12f00:	2317      	movs	r3, #23
   12f02:	18fc      	adds	r4, r7, r3
   12f04:	687b      	ldr	r3, [r7, #4]
   12f06:	0018      	movs	r0, r3
   12f08:	4b25      	ldr	r3, [pc, #148]	; (12fa0 <bme680_get_regs+0xbc>)
   12f0a:	4798      	blx	r3
   12f0c:	0003      	movs	r3, r0
   12f0e:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   12f10:	2317      	movs	r3, #23
   12f12:	18fb      	adds	r3, r7, r3
   12f14:	781b      	ldrb	r3, [r3, #0]
   12f16:	b25b      	sxtb	r3, r3
   12f18:	2b00      	cmp	r3, #0
   12f1a:	d139      	bne.n	12f90 <bme680_get_regs+0xac>
		if (dev->intf == BME680_SPI_INTF) {
   12f1c:	687b      	ldr	r3, [r7, #4]
   12f1e:	789b      	ldrb	r3, [r3, #2]
   12f20:	2b00      	cmp	r3, #0
   12f22:	d11a      	bne.n	12f5a <bme680_get_regs+0x76>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
   12f24:	2317      	movs	r3, #23
   12f26:	18fc      	adds	r4, r7, r3
   12f28:	687a      	ldr	r2, [r7, #4]
   12f2a:	230f      	movs	r3, #15
   12f2c:	18fb      	adds	r3, r7, r3
   12f2e:	781b      	ldrb	r3, [r3, #0]
   12f30:	0011      	movs	r1, r2
   12f32:	0018      	movs	r0, r3
   12f34:	4b1b      	ldr	r3, [pc, #108]	; (12fa4 <bme680_get_regs+0xc0>)
   12f36:	4798      	blx	r3
   12f38:	0003      	movs	r3, r0
   12f3a:	7023      	strb	r3, [r4, #0]
			if (rslt == BME680_OK)
   12f3c:	2317      	movs	r3, #23
   12f3e:	18fb      	adds	r3, r7, r3
   12f40:	781b      	ldrb	r3, [r3, #0]
   12f42:	b25b      	sxtb	r3, r3
   12f44:	2b00      	cmp	r3, #0
   12f46:	d108      	bne.n	12f5a <bme680_get_regs+0x76>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
   12f48:	230f      	movs	r3, #15
   12f4a:	18fb      	adds	r3, r7, r3
   12f4c:	220f      	movs	r2, #15
   12f4e:	18ba      	adds	r2, r7, r2
   12f50:	7812      	ldrb	r2, [r2, #0]
   12f52:	2180      	movs	r1, #128	; 0x80
   12f54:	4249      	negs	r1, r1
   12f56:	430a      	orrs	r2, r1
   12f58:	701a      	strb	r2, [r3, #0]
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
   12f5a:	687b      	ldr	r3, [r7, #4]
   12f5c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   12f5e:	687b      	ldr	r3, [r7, #4]
   12f60:	7858      	ldrb	r0, [r3, #1]
   12f62:	230c      	movs	r3, #12
   12f64:	18fb      	adds	r3, r7, r3
   12f66:	881d      	ldrh	r5, [r3, #0]
   12f68:	68ba      	ldr	r2, [r7, #8]
   12f6a:	230f      	movs	r3, #15
   12f6c:	18fb      	adds	r3, r7, r3
   12f6e:	7819      	ldrb	r1, [r3, #0]
   12f70:	002b      	movs	r3, r5
   12f72:	47a0      	blx	r4
   12f74:	0003      	movs	r3, r0
   12f76:	0019      	movs	r1, r3
   12f78:	687b      	ldr	r3, [r7, #4]
   12f7a:	2254      	movs	r2, #84	; 0x54
   12f7c:	5499      	strb	r1, [r3, r2]
		if (dev->com_rslt != 0)
   12f7e:	687b      	ldr	r3, [r7, #4]
   12f80:	2254      	movs	r2, #84	; 0x54
   12f82:	569b      	ldrsb	r3, [r3, r2]
   12f84:	2b00      	cmp	r3, #0
   12f86:	d003      	beq.n	12f90 <bme680_get_regs+0xac>
			rslt = BME680_E_COM_FAIL;
   12f88:	2317      	movs	r3, #23
   12f8a:	18fb      	adds	r3, r7, r3
   12f8c:	22fe      	movs	r2, #254	; 0xfe
   12f8e:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
   12f90:	2317      	movs	r3, #23
   12f92:	18fb      	adds	r3, r7, r3
   12f94:	781b      	ldrb	r3, [r3, #0]
   12f96:	b25b      	sxtb	r3, r3
}
   12f98:	0018      	movs	r0, r3
   12f9a:	46bd      	mov	sp, r7
   12f9c:	b006      	add	sp, #24
   12f9e:	bdb0      	pop	{r4, r5, r7, pc}
   12fa0:	0001482f 	.word	0x0001482f
   12fa4:	00014611 	.word	0x00014611

00012fa8 <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
   12fa8:	b5b0      	push	{r4, r5, r7, lr}
   12faa:	b090      	sub	sp, #64	; 0x40
   12fac:	af00      	add	r7, sp, #0
   12fae:	60f8      	str	r0, [r7, #12]
   12fb0:	60b9      	str	r1, [r7, #8]
   12fb2:	603b      	str	r3, [r7, #0]
   12fb4:	1dfb      	adds	r3, r7, #7
   12fb6:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
   12fb8:	2314      	movs	r3, #20
   12fba:	18fb      	adds	r3, r7, r3
   12fbc:	0018      	movs	r0, r3
   12fbe:	2328      	movs	r3, #40	; 0x28
   12fc0:	001a      	movs	r2, r3
   12fc2:	2100      	movs	r1, #0
   12fc4:	4b51      	ldr	r3, [pc, #324]	; (1310c <bme680_set_regs+0x164>)
   12fc6:	4798      	blx	r3
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   12fc8:	233f      	movs	r3, #63	; 0x3f
   12fca:	18fc      	adds	r4, r7, r3
   12fcc:	683b      	ldr	r3, [r7, #0]
   12fce:	0018      	movs	r0, r3
   12fd0:	4b4f      	ldr	r3, [pc, #316]	; (13110 <bme680_set_regs+0x168>)
   12fd2:	4798      	blx	r3
   12fd4:	0003      	movs	r3, r0
   12fd6:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   12fd8:	233f      	movs	r3, #63	; 0x3f
   12fda:	18fb      	adds	r3, r7, r3
   12fdc:	781b      	ldrb	r3, [r3, #0]
   12fde:	b25b      	sxtb	r3, r3
   12fe0:	2b00      	cmp	r3, #0
   12fe2:	d000      	beq.n	12fe6 <bme680_set_regs+0x3e>
   12fe4:	e08a      	b.n	130fc <bme680_set_regs+0x154>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
   12fe6:	1dfb      	adds	r3, r7, #7
   12fe8:	781b      	ldrb	r3, [r3, #0]
   12fea:	2b00      	cmp	r3, #0
   12fec:	d100      	bne.n	12ff0 <bme680_set_regs+0x48>
   12fee:	e07f      	b.n	130f0 <bme680_set_regs+0x148>
   12ff0:	1dfb      	adds	r3, r7, #7
   12ff2:	781b      	ldrb	r3, [r3, #0]
   12ff4:	2b13      	cmp	r3, #19
   12ff6:	d900      	bls.n	12ffa <bme680_set_regs+0x52>
   12ff8:	e07a      	b.n	130f0 <bme680_set_regs+0x148>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
   12ffa:	233c      	movs	r3, #60	; 0x3c
   12ffc:	18fb      	adds	r3, r7, r3
   12ffe:	2200      	movs	r2, #0
   13000:	801a      	strh	r2, [r3, #0]
   13002:	e045      	b.n	13090 <bme680_set_regs+0xe8>
				if (dev->intf == BME680_SPI_INTF) {
   13004:	683b      	ldr	r3, [r7, #0]
   13006:	789b      	ldrb	r3, [r3, #2]
   13008:	2b00      	cmp	r3, #0
   1300a:	d11f      	bne.n	1304c <bme680_set_regs+0xa4>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
   1300c:	233c      	movs	r3, #60	; 0x3c
   1300e:	18fb      	adds	r3, r7, r3
   13010:	881b      	ldrh	r3, [r3, #0]
   13012:	68fa      	ldr	r2, [r7, #12]
   13014:	18d3      	adds	r3, r2, r3
   13016:	781b      	ldrb	r3, [r3, #0]
   13018:	223f      	movs	r2, #63	; 0x3f
   1301a:	18bc      	adds	r4, r7, r2
   1301c:	683a      	ldr	r2, [r7, #0]
   1301e:	0011      	movs	r1, r2
   13020:	0018      	movs	r0, r3
   13022:	4b3c      	ldr	r3, [pc, #240]	; (13114 <bme680_set_regs+0x16c>)
   13024:	4798      	blx	r3
   13026:	0003      	movs	r3, r0
   13028:	7023      	strb	r3, [r4, #0]
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
   1302a:	233c      	movs	r3, #60	; 0x3c
   1302c:	18fb      	adds	r3, r7, r3
   1302e:	881b      	ldrh	r3, [r3, #0]
   13030:	005b      	lsls	r3, r3, #1
   13032:	223c      	movs	r2, #60	; 0x3c
   13034:	18ba      	adds	r2, r7, r2
   13036:	8812      	ldrh	r2, [r2, #0]
   13038:	68f9      	ldr	r1, [r7, #12]
   1303a:	188a      	adds	r2, r1, r2
   1303c:	7812      	ldrb	r2, [r2, #0]
   1303e:	217f      	movs	r1, #127	; 0x7f
   13040:	400a      	ands	r2, r1
   13042:	b2d1      	uxtb	r1, r2
   13044:	2214      	movs	r2, #20
   13046:	18ba      	adds	r2, r7, r2
   13048:	54d1      	strb	r1, [r2, r3]
   1304a:	e00c      	b.n	13066 <bme680_set_regs+0xbe>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
   1304c:	233c      	movs	r3, #60	; 0x3c
   1304e:	18fb      	adds	r3, r7, r3
   13050:	881b      	ldrh	r3, [r3, #0]
   13052:	005b      	lsls	r3, r3, #1
   13054:	223c      	movs	r2, #60	; 0x3c
   13056:	18ba      	adds	r2, r7, r2
   13058:	8812      	ldrh	r2, [r2, #0]
   1305a:	68f9      	ldr	r1, [r7, #12]
   1305c:	188a      	adds	r2, r1, r2
   1305e:	7811      	ldrb	r1, [r2, #0]
   13060:	2214      	movs	r2, #20
   13062:	18ba      	adds	r2, r7, r2
   13064:	54d1      	strb	r1, [r2, r3]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
   13066:	233c      	movs	r3, #60	; 0x3c
   13068:	18fb      	adds	r3, r7, r3
   1306a:	881b      	ldrh	r3, [r3, #0]
   1306c:	005b      	lsls	r3, r3, #1
   1306e:	3301      	adds	r3, #1
   13070:	223c      	movs	r2, #60	; 0x3c
   13072:	18ba      	adds	r2, r7, r2
   13074:	8812      	ldrh	r2, [r2, #0]
   13076:	68b9      	ldr	r1, [r7, #8]
   13078:	188a      	adds	r2, r1, r2
   1307a:	7811      	ldrb	r1, [r2, #0]
   1307c:	2214      	movs	r2, #20
   1307e:	18ba      	adds	r2, r7, r2
   13080:	54d1      	strb	r1, [r2, r3]
			for (index = 0; index < len; index++) {
   13082:	233c      	movs	r3, #60	; 0x3c
   13084:	18fb      	adds	r3, r7, r3
   13086:	881a      	ldrh	r2, [r3, #0]
   13088:	233c      	movs	r3, #60	; 0x3c
   1308a:	18fb      	adds	r3, r7, r3
   1308c:	3201      	adds	r2, #1
   1308e:	801a      	strh	r2, [r3, #0]
   13090:	1dfb      	adds	r3, r7, #7
   13092:	781b      	ldrb	r3, [r3, #0]
   13094:	b29b      	uxth	r3, r3
   13096:	223c      	movs	r2, #60	; 0x3c
   13098:	18ba      	adds	r2, r7, r2
   1309a:	8812      	ldrh	r2, [r2, #0]
   1309c:	429a      	cmp	r2, r3
   1309e:	d3b1      	bcc.n	13004 <bme680_set_regs+0x5c>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
   130a0:	233f      	movs	r3, #63	; 0x3f
   130a2:	18fb      	adds	r3, r7, r3
   130a4:	781b      	ldrb	r3, [r3, #0]
   130a6:	b25b      	sxtb	r3, r3
   130a8:	2b00      	cmp	r3, #0
   130aa:	d126      	bne.n	130fa <bme680_set_regs+0x152>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
   130ac:	683b      	ldr	r3, [r7, #0]
   130ae:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
   130b0:	683b      	ldr	r3, [r7, #0]
   130b2:	7858      	ldrb	r0, [r3, #1]
   130b4:	2314      	movs	r3, #20
   130b6:	18fb      	adds	r3, r7, r3
   130b8:	7819      	ldrb	r1, [r3, #0]
   130ba:	1dfb      	adds	r3, r7, #7
   130bc:	781b      	ldrb	r3, [r3, #0]
   130be:	b29b      	uxth	r3, r3
   130c0:	18db      	adds	r3, r3, r3
   130c2:	b29b      	uxth	r3, r3
   130c4:	3b01      	subs	r3, #1
   130c6:	b29d      	uxth	r5, r3
   130c8:	2314      	movs	r3, #20
   130ca:	18fb      	adds	r3, r7, r3
   130cc:	1c5a      	adds	r2, r3, #1
   130ce:	002b      	movs	r3, r5
   130d0:	47a0      	blx	r4
   130d2:	0003      	movs	r3, r0
   130d4:	0019      	movs	r1, r3
   130d6:	683b      	ldr	r3, [r7, #0]
   130d8:	2254      	movs	r2, #84	; 0x54
   130da:	5499      	strb	r1, [r3, r2]
				if (dev->com_rslt != 0)
   130dc:	683b      	ldr	r3, [r7, #0]
   130de:	2254      	movs	r2, #84	; 0x54
   130e0:	569b      	ldrsb	r3, [r3, r2]
   130e2:	2b00      	cmp	r3, #0
   130e4:	d009      	beq.n	130fa <bme680_set_regs+0x152>
					rslt = BME680_E_COM_FAIL;
   130e6:	233f      	movs	r3, #63	; 0x3f
   130e8:	18fb      	adds	r3, r7, r3
   130ea:	22fe      	movs	r2, #254	; 0xfe
   130ec:	701a      	strb	r2, [r3, #0]
			if (rslt == BME680_OK) {
   130ee:	e004      	b.n	130fa <bme680_set_regs+0x152>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
   130f0:	233f      	movs	r3, #63	; 0x3f
   130f2:	18fb      	adds	r3, r7, r3
   130f4:	22fc      	movs	r2, #252	; 0xfc
   130f6:	701a      	strb	r2, [r3, #0]
   130f8:	e000      	b.n	130fc <bme680_set_regs+0x154>
			if (rslt == BME680_OK) {
   130fa:	46c0      	nop			; (mov r8, r8)
		}
	}

	return rslt;
   130fc:	233f      	movs	r3, #63	; 0x3f
   130fe:	18fb      	adds	r3, r7, r3
   13100:	781b      	ldrb	r3, [r3, #0]
   13102:	b25b      	sxtb	r3, r3
}
   13104:	0018      	movs	r0, r3
   13106:	46bd      	mov	sp, r7
   13108:	b010      	add	sp, #64	; 0x40
   1310a:	bdb0      	pop	{r4, r5, r7, pc}
   1310c:	0003794b 	.word	0x0003794b
   13110:	0001482f 	.word	0x0001482f
   13114:	00014611 	.word	0x00014611

00013118 <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
   13118:	b5b0      	push	{r4, r5, r7, lr}
   1311a:	b084      	sub	sp, #16
   1311c:	af00      	add	r7, sp, #0
   1311e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
   13120:	230e      	movs	r3, #14
   13122:	18fb      	adds	r3, r7, r3
   13124:	22e0      	movs	r2, #224	; 0xe0
   13126:	701a      	strb	r2, [r3, #0]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
   13128:	230d      	movs	r3, #13
   1312a:	18fb      	adds	r3, r7, r3
   1312c:	22b6      	movs	r2, #182	; 0xb6
   1312e:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   13130:	230f      	movs	r3, #15
   13132:	18fc      	adds	r4, r7, r3
   13134:	687b      	ldr	r3, [r7, #4]
   13136:	0018      	movs	r0, r3
   13138:	4b22      	ldr	r3, [pc, #136]	; (131c4 <bme680_soft_reset+0xac>)
   1313a:	4798      	blx	r3
   1313c:	0003      	movs	r3, r0
   1313e:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   13140:	230f      	movs	r3, #15
   13142:	18fb      	adds	r3, r7, r3
   13144:	781b      	ldrb	r3, [r3, #0]
   13146:	b25b      	sxtb	r3, r3
   13148:	2b00      	cmp	r3, #0
   1314a:	d133      	bne.n	131b4 <bme680_soft_reset+0x9c>
		if (dev->intf == BME680_SPI_INTF)
   1314c:	687b      	ldr	r3, [r7, #4]
   1314e:	789b      	ldrb	r3, [r3, #2]
   13150:	2b00      	cmp	r3, #0
   13152:	d107      	bne.n	13164 <bme680_soft_reset+0x4c>
			rslt = get_mem_page(dev);
   13154:	230f      	movs	r3, #15
   13156:	18fc      	adds	r4, r7, r3
   13158:	687b      	ldr	r3, [r7, #4]
   1315a:	0018      	movs	r0, r3
   1315c:	4b1a      	ldr	r3, [pc, #104]	; (131c8 <bme680_soft_reset+0xb0>)
   1315e:	4798      	blx	r3
   13160:	0003      	movs	r3, r0
   13162:	7023      	strb	r3, [r4, #0]

		/* Reset the device */
		if (rslt == BME680_OK) {
   13164:	230f      	movs	r3, #15
   13166:	18fb      	adds	r3, r7, r3
   13168:	781b      	ldrb	r3, [r3, #0]
   1316a:	b25b      	sxtb	r3, r3
   1316c:	2b00      	cmp	r3, #0
   1316e:	d121      	bne.n	131b4 <bme680_soft_reset+0x9c>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   13170:	230f      	movs	r3, #15
   13172:	18fc      	adds	r4, r7, r3
   13174:	687b      	ldr	r3, [r7, #4]
   13176:	220d      	movs	r2, #13
   13178:	18b9      	adds	r1, r7, r2
   1317a:	220e      	movs	r2, #14
   1317c:	18b8      	adds	r0, r7, r2
   1317e:	2201      	movs	r2, #1
   13180:	4d12      	ldr	r5, [pc, #72]	; (131cc <bme680_soft_reset+0xb4>)
   13182:	47a8      	blx	r5
   13184:	0003      	movs	r3, r0
   13186:	7023      	strb	r3, [r4, #0]
			/* Wait for 5ms */
			dev->delay_ms_bme(BME680_RESET_PERIOD);
   13188:	687b      	ldr	r3, [r7, #4]
   1318a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1318c:	200a      	movs	r0, #10
   1318e:	4798      	blx	r3

			if (rslt == BME680_OK) {
   13190:	230f      	movs	r3, #15
   13192:	18fb      	adds	r3, r7, r3
   13194:	781b      	ldrb	r3, [r3, #0]
   13196:	b25b      	sxtb	r3, r3
   13198:	2b00      	cmp	r3, #0
   1319a:	d10b      	bne.n	131b4 <bme680_soft_reset+0x9c>
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
   1319c:	687b      	ldr	r3, [r7, #4]
   1319e:	789b      	ldrb	r3, [r3, #2]
   131a0:	2b00      	cmp	r3, #0
   131a2:	d107      	bne.n	131b4 <bme680_soft_reset+0x9c>
					rslt = get_mem_page(dev);
   131a4:	230f      	movs	r3, #15
   131a6:	18fc      	adds	r4, r7, r3
   131a8:	687b      	ldr	r3, [r7, #4]
   131aa:	0018      	movs	r0, r3
   131ac:	4b06      	ldr	r3, [pc, #24]	; (131c8 <bme680_soft_reset+0xb0>)
   131ae:	4798      	blx	r3
   131b0:	0003      	movs	r3, r0
   131b2:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return rslt;
   131b4:	230f      	movs	r3, #15
   131b6:	18fb      	adds	r3, r7, r3
   131b8:	781b      	ldrb	r3, [r3, #0]
   131ba:	b25b      	sxtb	r3, r3
}
   131bc:	0018      	movs	r0, r3
   131be:	46bd      	mov	sp, r7
   131c0:	b004      	add	sp, #16
   131c2:	bdb0      	pop	{r4, r5, r7, pc}
   131c4:	0001482f 	.word	0x0001482f
   131c8:	0001471d 	.word	0x0001471d
   131cc:	00012fa9 	.word	0x00012fa9

000131d0 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
   131d0:	b5b0      	push	{r4, r5, r7, lr}
   131d2:	b088      	sub	sp, #32
   131d4:	af00      	add	r7, sp, #0
   131d6:	0002      	movs	r2, r0
   131d8:	6039      	str	r1, [r7, #0]
   131da:	1dbb      	adds	r3, r7, #6
   131dc:	801a      	strh	r2, [r3, #0]
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
   131de:	231b      	movs	r3, #27
   131e0:	18fb      	adds	r3, r7, r3
   131e2:	2200      	movs	r2, #0
   131e4:	701a      	strb	r2, [r3, #0]
	uint8_t count = 0;
   131e6:	231e      	movs	r3, #30
   131e8:	18fb      	adds	r3, r7, r3
   131ea:	2200      	movs	r2, #0
   131ec:	701a      	strb	r2, [r3, #0]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   131ee:	2314      	movs	r3, #20
   131f0:	18fb      	adds	r3, r7, r3
   131f2:	0018      	movs	r0, r3
   131f4:	2306      	movs	r3, #6
   131f6:	001a      	movs	r2, r3
   131f8:	2100      	movs	r1, #0
   131fa:	4be7      	ldr	r3, [pc, #924]	; (13598 <bme680_set_sensor_settings+0x3c8>)
   131fc:	4798      	blx	r3
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
   131fe:	230c      	movs	r3, #12
   13200:	18fb      	adds	r3, r7, r3
   13202:	0018      	movs	r0, r3
   13204:	2306      	movs	r3, #6
   13206:	001a      	movs	r2, r3
   13208:	2100      	movs	r1, #0
   1320a:	4be3      	ldr	r3, [pc, #908]	; (13598 <bme680_set_sensor_settings+0x3c8>)
   1320c:	4798      	blx	r3
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
   1320e:	231d      	movs	r3, #29
   13210:	18fb      	adds	r3, r7, r3
   13212:	683a      	ldr	r2, [r7, #0]
   13214:	2144      	movs	r1, #68	; 0x44
   13216:	5c52      	ldrb	r2, [r2, r1]
   13218:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   1321a:	231f      	movs	r3, #31
   1321c:	18fc      	adds	r4, r7, r3
   1321e:	683b      	ldr	r3, [r7, #0]
   13220:	0018      	movs	r0, r3
   13222:	4bde      	ldr	r3, [pc, #888]	; (1359c <bme680_set_sensor_settings+0x3cc>)
   13224:	4798      	blx	r3
   13226:	0003      	movs	r3, r0
   13228:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   1322a:	231f      	movs	r3, #31
   1322c:	18fb      	adds	r3, r7, r3
   1322e:	781b      	ldrb	r3, [r3, #0]
   13230:	b25b      	sxtb	r3, r3
   13232:	2b00      	cmp	r3, #0
   13234:	d000      	beq.n	13238 <bme680_set_sensor_settings+0x68>
   13236:	e249      	b.n	136cc <bme680_set_sensor_settings+0x4fc>
		if (desired_settings & BME680_GAS_MEAS_SEL)
   13238:	1dbb      	adds	r3, r7, #6
   1323a:	881b      	ldrh	r3, [r3, #0]
   1323c:	2208      	movs	r2, #8
   1323e:	4013      	ands	r3, r2
   13240:	d007      	beq.n	13252 <bme680_set_sensor_settings+0x82>
			rslt = set_gas_config(dev);
   13242:	231f      	movs	r3, #31
   13244:	18fc      	adds	r4, r7, r3
   13246:	683b      	ldr	r3, [r7, #0]
   13248:	0018      	movs	r0, r3
   1324a:	4bd5      	ldr	r3, [pc, #852]	; (135a0 <bme680_set_sensor_settings+0x3d0>)
   1324c:	4798      	blx	r3
   1324e:	0003      	movs	r3, r0
   13250:	7023      	strb	r3, [r4, #0]

		dev->power_mode = BME680_SLEEP_MODE;
   13252:	683b      	ldr	r3, [r7, #0]
   13254:	2244      	movs	r2, #68	; 0x44
   13256:	2100      	movs	r1, #0
   13258:	5499      	strb	r1, [r3, r2]
		if (rslt == BME680_OK)
   1325a:	231f      	movs	r3, #31
   1325c:	18fb      	adds	r3, r7, r3
   1325e:	781b      	ldrb	r3, [r3, #0]
   13260:	b25b      	sxtb	r3, r3
   13262:	2b00      	cmp	r3, #0
   13264:	d107      	bne.n	13276 <bme680_set_sensor_settings+0xa6>
			rslt = bme680_set_sensor_mode(dev);
   13266:	231f      	movs	r3, #31
   13268:	18fc      	adds	r4, r7, r3
   1326a:	683b      	ldr	r3, [r7, #0]
   1326c:	0018      	movs	r0, r3
   1326e:	4bcd      	ldr	r3, [pc, #820]	; (135a4 <bme680_set_sensor_settings+0x3d4>)
   13270:	4798      	blx	r3
   13272:	0003      	movs	r3, r0
   13274:	7023      	strb	r3, [r4, #0]

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
   13276:	1dbb      	adds	r3, r7, #6
   13278:	881b      	ldrh	r3, [r3, #0]
   1327a:	2210      	movs	r2, #16
   1327c:	4013      	ands	r3, r2
   1327e:	d056      	beq.n	1332e <bme680_set_sensor_settings+0x15e>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
   13280:	683b      	ldr	r3, [r7, #0]
   13282:	333b      	adds	r3, #59	; 0x3b
   13284:	0018      	movs	r0, r3
   13286:	231f      	movs	r3, #31
   13288:	18fc      	adds	r4, r7, r3
   1328a:	683b      	ldr	r3, [r7, #0]
   1328c:	2207      	movs	r2, #7
   1328e:	2100      	movs	r1, #0
   13290:	4dc5      	ldr	r5, [pc, #788]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   13292:	47a8      	blx	r5
   13294:	0003      	movs	r3, r0
   13296:	7023      	strb	r3, [r4, #0]
			reg_addr = BME680_CONF_ODR_FILT_ADDR;
   13298:	231c      	movs	r3, #28
   1329a:	18fb      	adds	r3, r7, r3
   1329c:	2275      	movs	r2, #117	; 0x75
   1329e:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   132a0:	231f      	movs	r3, #31
   132a2:	18fb      	adds	r3, r7, r3
   132a4:	781b      	ldrb	r3, [r3, #0]
   132a6:	b25b      	sxtb	r3, r3
   132a8:	2b00      	cmp	r3, #0
   132aa:	d10d      	bne.n	132c8 <bme680_set_sensor_settings+0xf8>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   132ac:	231f      	movs	r3, #31
   132ae:	18fc      	adds	r4, r7, r3
   132b0:	683a      	ldr	r2, [r7, #0]
   132b2:	231b      	movs	r3, #27
   132b4:	18f9      	adds	r1, r7, r3
   132b6:	231c      	movs	r3, #28
   132b8:	18fb      	adds	r3, r7, r3
   132ba:	7818      	ldrb	r0, [r3, #0]
   132bc:	0013      	movs	r3, r2
   132be:	2201      	movs	r2, #1
   132c0:	4dba      	ldr	r5, [pc, #744]	; (135ac <bme680_set_sensor_settings+0x3dc>)
   132c2:	47a8      	blx	r5
   132c4:	0003      	movs	r3, r0
   132c6:	7023      	strb	r3, [r4, #0]

			if (desired_settings & BME680_FILTER_SEL)
   132c8:	1dbb      	adds	r3, r7, #6
   132ca:	881b      	ldrh	r3, [r3, #0]
   132cc:	2210      	movs	r2, #16
   132ce:	4013      	ands	r3, r2
   132d0:	d014      	beq.n	132fc <bme680_set_sensor_settings+0x12c>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
   132d2:	231b      	movs	r3, #27
   132d4:	18fb      	adds	r3, r7, r3
   132d6:	781b      	ldrb	r3, [r3, #0]
   132d8:	b25b      	sxtb	r3, r3
   132da:	221c      	movs	r2, #28
   132dc:	4393      	bics	r3, r2
   132de:	b25a      	sxtb	r2, r3
   132e0:	683b      	ldr	r3, [r7, #0]
   132e2:	213b      	movs	r1, #59	; 0x3b
   132e4:	5c5b      	ldrb	r3, [r3, r1]
   132e6:	009b      	lsls	r3, r3, #2
   132e8:	b25b      	sxtb	r3, r3
   132ea:	211c      	movs	r1, #28
   132ec:	400b      	ands	r3, r1
   132ee:	b25b      	sxtb	r3, r3
   132f0:	4313      	orrs	r3, r2
   132f2:	b25b      	sxtb	r3, r3
   132f4:	b2da      	uxtb	r2, r3
   132f6:	231b      	movs	r3, #27
   132f8:	18fb      	adds	r3, r7, r3
   132fa:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr; /* Append configuration */
   132fc:	231e      	movs	r3, #30
   132fe:	18fb      	adds	r3, r7, r3
   13300:	781b      	ldrb	r3, [r3, #0]
   13302:	2214      	movs	r2, #20
   13304:	18ba      	adds	r2, r7, r2
   13306:	211c      	movs	r1, #28
   13308:	1879      	adds	r1, r7, r1
   1330a:	7809      	ldrb	r1, [r1, #0]
   1330c:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   1330e:	231e      	movs	r3, #30
   13310:	18fb      	adds	r3, r7, r3
   13312:	781b      	ldrb	r3, [r3, #0]
   13314:	221b      	movs	r2, #27
   13316:	18ba      	adds	r2, r7, r2
   13318:	7811      	ldrb	r1, [r2, #0]
   1331a:	220c      	movs	r2, #12
   1331c:	18ba      	adds	r2, r7, r2
   1331e:	54d1      	strb	r1, [r2, r3]
			count++;
   13320:	231e      	movs	r3, #30
   13322:	18fb      	adds	r3, r7, r3
   13324:	781a      	ldrb	r2, [r3, #0]
   13326:	231e      	movs	r3, #30
   13328:	18fb      	adds	r3, r7, r3
   1332a:	3201      	adds	r2, #1
   1332c:	701a      	strb	r2, [r3, #0]
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
   1332e:	1dbb      	adds	r3, r7, #6
   13330:	881b      	ldrh	r3, [r3, #0]
   13332:	2220      	movs	r2, #32
   13334:	4013      	ands	r3, r2
   13336:	d050      	beq.n	133da <bme680_set_sensor_settings+0x20a>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
   13338:	683b      	ldr	r3, [r7, #0]
   1333a:	333d      	adds	r3, #61	; 0x3d
   1333c:	0018      	movs	r0, r3
   1333e:	231f      	movs	r3, #31
   13340:	18fc      	adds	r4, r7, r3
   13342:	683b      	ldr	r3, [r7, #0]
   13344:	2208      	movs	r2, #8
   13346:	2100      	movs	r1, #0
   13348:	4d97      	ldr	r5, [pc, #604]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   1334a:	47a8      	blx	r5
   1334c:	0003      	movs	r3, r0
   1334e:	7023      	strb	r3, [r4, #0]
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;
   13350:	231c      	movs	r3, #28
   13352:	18fb      	adds	r3, r7, r3
   13354:	2270      	movs	r2, #112	; 0x70
   13356:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   13358:	231f      	movs	r3, #31
   1335a:	18fb      	adds	r3, r7, r3
   1335c:	781b      	ldrb	r3, [r3, #0]
   1335e:	b25b      	sxtb	r3, r3
   13360:	2b00      	cmp	r3, #0
   13362:	d10d      	bne.n	13380 <bme680_set_sensor_settings+0x1b0>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   13364:	231f      	movs	r3, #31
   13366:	18fc      	adds	r4, r7, r3
   13368:	683a      	ldr	r2, [r7, #0]
   1336a:	231b      	movs	r3, #27
   1336c:	18f9      	adds	r1, r7, r3
   1336e:	231c      	movs	r3, #28
   13370:	18fb      	adds	r3, r7, r3
   13372:	7818      	ldrb	r0, [r3, #0]
   13374:	0013      	movs	r3, r2
   13376:	2201      	movs	r2, #1
   13378:	4d8c      	ldr	r5, [pc, #560]	; (135ac <bme680_set_sensor_settings+0x3dc>)
   1337a:	47a8      	blx	r5
   1337c:	0003      	movs	r3, r0
   1337e:	7023      	strb	r3, [r4, #0]
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
   13380:	231b      	movs	r3, #27
   13382:	18fb      	adds	r3, r7, r3
   13384:	781b      	ldrb	r3, [r3, #0]
   13386:	b25b      	sxtb	r3, r3
   13388:	2208      	movs	r2, #8
   1338a:	4393      	bics	r3, r2
   1338c:	b25a      	sxtb	r2, r3
   1338e:	683b      	ldr	r3, [r7, #0]
   13390:	213d      	movs	r1, #61	; 0x3d
   13392:	5c5b      	ldrb	r3, [r3, r1]
   13394:	b25b      	sxtb	r3, r3
   13396:	2108      	movs	r1, #8
   13398:	400b      	ands	r3, r1
   1339a:	b25b      	sxtb	r3, r3
   1339c:	4313      	orrs	r3, r2
   1339e:	b25b      	sxtb	r3, r3
   133a0:	b2da      	uxtb	r2, r3
   133a2:	231b      	movs	r3, #27
   133a4:	18fb      	adds	r3, r7, r3
   133a6:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr; /* Append configuration */
   133a8:	231e      	movs	r3, #30
   133aa:	18fb      	adds	r3, r7, r3
   133ac:	781b      	ldrb	r3, [r3, #0]
   133ae:	2214      	movs	r2, #20
   133b0:	18ba      	adds	r2, r7, r2
   133b2:	211c      	movs	r1, #28
   133b4:	1879      	adds	r1, r7, r1
   133b6:	7809      	ldrb	r1, [r1, #0]
   133b8:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   133ba:	231e      	movs	r3, #30
   133bc:	18fb      	adds	r3, r7, r3
   133be:	781b      	ldrb	r3, [r3, #0]
   133c0:	221b      	movs	r2, #27
   133c2:	18ba      	adds	r2, r7, r2
   133c4:	7811      	ldrb	r1, [r2, #0]
   133c6:	220c      	movs	r2, #12
   133c8:	18ba      	adds	r2, r7, r2
   133ca:	54d1      	strb	r1, [r2, r3]
			count++;
   133cc:	231e      	movs	r3, #30
   133ce:	18fb      	adds	r3, r7, r3
   133d0:	781a      	ldrb	r2, [r3, #0]
   133d2:	231e      	movs	r3, #30
   133d4:	18fb      	adds	r3, r7, r3
   133d6:	3201      	adds	r2, #1
   133d8:	701a      	strb	r2, [r3, #0]
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
   133da:	1dbb      	adds	r3, r7, #6
   133dc:	881b      	ldrh	r3, [r3, #0]
   133de:	2203      	movs	r2, #3
   133e0:	4013      	ands	r3, r2
   133e2:	d06d      	beq.n	134c0 <bme680_set_sensor_settings+0x2f0>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
   133e4:	683b      	ldr	r3, [r7, #0]
   133e6:	3339      	adds	r3, #57	; 0x39
   133e8:	0018      	movs	r0, r3
   133ea:	231f      	movs	r3, #31
   133ec:	18fc      	adds	r4, r7, r3
   133ee:	683b      	ldr	r3, [r7, #0]
   133f0:	2205      	movs	r2, #5
   133f2:	2100      	movs	r1, #0
   133f4:	4d6c      	ldr	r5, [pc, #432]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   133f6:	47a8      	blx	r5
   133f8:	0003      	movs	r3, r0
   133fa:	7023      	strb	r3, [r4, #0]
			reg_addr = BME680_CONF_T_P_MODE_ADDR;
   133fc:	231c      	movs	r3, #28
   133fe:	18fb      	adds	r3, r7, r3
   13400:	2274      	movs	r2, #116	; 0x74
   13402:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   13404:	231f      	movs	r3, #31
   13406:	18fb      	adds	r3, r7, r3
   13408:	781b      	ldrb	r3, [r3, #0]
   1340a:	b25b      	sxtb	r3, r3
   1340c:	2b00      	cmp	r3, #0
   1340e:	d10d      	bne.n	1342c <bme680_set_sensor_settings+0x25c>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   13410:	231f      	movs	r3, #31
   13412:	18fc      	adds	r4, r7, r3
   13414:	683a      	ldr	r2, [r7, #0]
   13416:	231b      	movs	r3, #27
   13418:	18f9      	adds	r1, r7, r3
   1341a:	231c      	movs	r3, #28
   1341c:	18fb      	adds	r3, r7, r3
   1341e:	7818      	ldrb	r0, [r3, #0]
   13420:	0013      	movs	r3, r2
   13422:	2201      	movs	r2, #1
   13424:	4d61      	ldr	r5, [pc, #388]	; (135ac <bme680_set_sensor_settings+0x3dc>)
   13426:	47a8      	blx	r5
   13428:	0003      	movs	r3, r0
   1342a:	7023      	strb	r3, [r4, #0]

			if (desired_settings & BME680_OST_SEL)
   1342c:	1dbb      	adds	r3, r7, #6
   1342e:	881b      	ldrh	r3, [r3, #0]
   13430:	2201      	movs	r2, #1
   13432:	4013      	ands	r3, r2
   13434:	d011      	beq.n	1345a <bme680_set_sensor_settings+0x28a>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
   13436:	231b      	movs	r3, #27
   13438:	18fb      	adds	r3, r7, r3
   1343a:	781b      	ldrb	r3, [r3, #0]
   1343c:	b25b      	sxtb	r3, r3
   1343e:	221f      	movs	r2, #31
   13440:	4013      	ands	r3, r2
   13442:	b25a      	sxtb	r2, r3
   13444:	683b      	ldr	r3, [r7, #0]
   13446:	2139      	movs	r1, #57	; 0x39
   13448:	5c5b      	ldrb	r3, [r3, r1]
   1344a:	015b      	lsls	r3, r3, #5
   1344c:	b25b      	sxtb	r3, r3
   1344e:	4313      	orrs	r3, r2
   13450:	b25b      	sxtb	r3, r3
   13452:	b2da      	uxtb	r2, r3
   13454:	231b      	movs	r3, #27
   13456:	18fb      	adds	r3, r7, r3
   13458:	701a      	strb	r2, [r3, #0]

			if (desired_settings & BME680_OSP_SEL)
   1345a:	1dbb      	adds	r3, r7, #6
   1345c:	881b      	ldrh	r3, [r3, #0]
   1345e:	2202      	movs	r2, #2
   13460:	4013      	ands	r3, r2
   13462:	d014      	beq.n	1348e <bme680_set_sensor_settings+0x2be>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
   13464:	231b      	movs	r3, #27
   13466:	18fb      	adds	r3, r7, r3
   13468:	781b      	ldrb	r3, [r3, #0]
   1346a:	b25b      	sxtb	r3, r3
   1346c:	221c      	movs	r2, #28
   1346e:	4393      	bics	r3, r2
   13470:	b25a      	sxtb	r2, r3
   13472:	683b      	ldr	r3, [r7, #0]
   13474:	213a      	movs	r1, #58	; 0x3a
   13476:	5c5b      	ldrb	r3, [r3, r1]
   13478:	009b      	lsls	r3, r3, #2
   1347a:	b25b      	sxtb	r3, r3
   1347c:	211c      	movs	r1, #28
   1347e:	400b      	ands	r3, r1
   13480:	b25b      	sxtb	r3, r3
   13482:	4313      	orrs	r3, r2
   13484:	b25b      	sxtb	r3, r3
   13486:	b2da      	uxtb	r2, r3
   13488:	231b      	movs	r3, #27
   1348a:	18fb      	adds	r3, r7, r3
   1348c:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr;
   1348e:	231e      	movs	r3, #30
   13490:	18fb      	adds	r3, r7, r3
   13492:	781b      	ldrb	r3, [r3, #0]
   13494:	2214      	movs	r2, #20
   13496:	18ba      	adds	r2, r7, r2
   13498:	211c      	movs	r1, #28
   1349a:	1879      	adds	r1, r7, r1
   1349c:	7809      	ldrb	r1, [r1, #0]
   1349e:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   134a0:	231e      	movs	r3, #30
   134a2:	18fb      	adds	r3, r7, r3
   134a4:	781b      	ldrb	r3, [r3, #0]
   134a6:	221b      	movs	r2, #27
   134a8:	18ba      	adds	r2, r7, r2
   134aa:	7811      	ldrb	r1, [r2, #0]
   134ac:	220c      	movs	r2, #12
   134ae:	18ba      	adds	r2, r7, r2
   134b0:	54d1      	strb	r1, [r2, r3]
			count++;
   134b2:	231e      	movs	r3, #30
   134b4:	18fb      	adds	r3, r7, r3
   134b6:	781a      	ldrb	r2, [r3, #0]
   134b8:	231e      	movs	r3, #30
   134ba:	18fb      	adds	r3, r7, r3
   134bc:	3201      	adds	r2, #1
   134be:	701a      	strb	r2, [r3, #0]
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
   134c0:	1dbb      	adds	r3, r7, #6
   134c2:	881b      	ldrh	r3, [r3, #0]
   134c4:	2204      	movs	r2, #4
   134c6:	4013      	ands	r3, r2
   134c8:	d050      	beq.n	1356c <bme680_set_sensor_settings+0x39c>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
   134ca:	683b      	ldr	r3, [r7, #0]
   134cc:	3338      	adds	r3, #56	; 0x38
   134ce:	0018      	movs	r0, r3
   134d0:	231f      	movs	r3, #31
   134d2:	18fc      	adds	r4, r7, r3
   134d4:	683b      	ldr	r3, [r7, #0]
   134d6:	2205      	movs	r2, #5
   134d8:	2100      	movs	r1, #0
   134da:	4d33      	ldr	r5, [pc, #204]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   134dc:	47a8      	blx	r5
   134de:	0003      	movs	r3, r0
   134e0:	7023      	strb	r3, [r4, #0]
			reg_addr = BME680_CONF_OS_H_ADDR;
   134e2:	231c      	movs	r3, #28
   134e4:	18fb      	adds	r3, r7, r3
   134e6:	2272      	movs	r2, #114	; 0x72
   134e8:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   134ea:	231f      	movs	r3, #31
   134ec:	18fb      	adds	r3, r7, r3
   134ee:	781b      	ldrb	r3, [r3, #0]
   134f0:	b25b      	sxtb	r3, r3
   134f2:	2b00      	cmp	r3, #0
   134f4:	d10d      	bne.n	13512 <bme680_set_sensor_settings+0x342>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   134f6:	231f      	movs	r3, #31
   134f8:	18fc      	adds	r4, r7, r3
   134fa:	683a      	ldr	r2, [r7, #0]
   134fc:	231b      	movs	r3, #27
   134fe:	18f9      	adds	r1, r7, r3
   13500:	231c      	movs	r3, #28
   13502:	18fb      	adds	r3, r7, r3
   13504:	7818      	ldrb	r0, [r3, #0]
   13506:	0013      	movs	r3, r2
   13508:	2201      	movs	r2, #1
   1350a:	4d28      	ldr	r5, [pc, #160]	; (135ac <bme680_set_sensor_settings+0x3dc>)
   1350c:	47a8      	blx	r5
   1350e:	0003      	movs	r3, r0
   13510:	7023      	strb	r3, [r4, #0]
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
   13512:	231b      	movs	r3, #27
   13514:	18fb      	adds	r3, r7, r3
   13516:	781b      	ldrb	r3, [r3, #0]
   13518:	b25b      	sxtb	r3, r3
   1351a:	2207      	movs	r2, #7
   1351c:	4393      	bics	r3, r2
   1351e:	b25a      	sxtb	r2, r3
   13520:	683b      	ldr	r3, [r7, #0]
   13522:	2138      	movs	r1, #56	; 0x38
   13524:	5c5b      	ldrb	r3, [r3, r1]
   13526:	b25b      	sxtb	r3, r3
   13528:	2107      	movs	r1, #7
   1352a:	400b      	ands	r3, r1
   1352c:	b25b      	sxtb	r3, r3
   1352e:	4313      	orrs	r3, r2
   13530:	b25b      	sxtb	r3, r3
   13532:	b2da      	uxtb	r2, r3
   13534:	231b      	movs	r3, #27
   13536:	18fb      	adds	r3, r7, r3
   13538:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr; /* Append configuration */
   1353a:	231e      	movs	r3, #30
   1353c:	18fb      	adds	r3, r7, r3
   1353e:	781b      	ldrb	r3, [r3, #0]
   13540:	2214      	movs	r2, #20
   13542:	18ba      	adds	r2, r7, r2
   13544:	211c      	movs	r1, #28
   13546:	1879      	adds	r1, r7, r1
   13548:	7809      	ldrb	r1, [r1, #0]
   1354a:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   1354c:	231e      	movs	r3, #30
   1354e:	18fb      	adds	r3, r7, r3
   13550:	781b      	ldrb	r3, [r3, #0]
   13552:	221b      	movs	r2, #27
   13554:	18ba      	adds	r2, r7, r2
   13556:	7811      	ldrb	r1, [r2, #0]
   13558:	220c      	movs	r2, #12
   1355a:	18ba      	adds	r2, r7, r2
   1355c:	54d1      	strb	r1, [r2, r3]
			count++;
   1355e:	231e      	movs	r3, #30
   13560:	18fb      	adds	r3, r7, r3
   13562:	781a      	ldrb	r2, [r3, #0]
   13564:	231e      	movs	r3, #30
   13566:	18fb      	adds	r3, r7, r3
   13568:	3201      	adds	r2, #1
   1356a:	701a      	strb	r2, [r3, #0]
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
   1356c:	1dbb      	adds	r3, r7, #6
   1356e:	881b      	ldrh	r3, [r3, #0]
   13570:	22c0      	movs	r2, #192	; 0xc0
   13572:	4013      	ands	r3, r2
   13574:	d100      	bne.n	13578 <bme680_set_sensor_settings+0x3a8>
   13576:	e08e      	b.n	13696 <bme680_set_sensor_settings+0x4c6>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
   13578:	683b      	ldr	r3, [r7, #0]
   1357a:	333e      	adds	r3, #62	; 0x3e
   1357c:	0018      	movs	r0, r3
   1357e:	231f      	movs	r3, #31
   13580:	18fc      	adds	r4, r7, r3
   13582:	683b      	ldr	r3, [r7, #0]
   13584:	2201      	movs	r2, #1
   13586:	2100      	movs	r1, #0
   13588:	4d07      	ldr	r5, [pc, #28]	; (135a8 <bme680_set_sensor_settings+0x3d8>)
   1358a:	47a8      	blx	r5
   1358c:	0003      	movs	r3, r0
   1358e:	7023      	strb	r3, [r4, #0]
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
   13590:	231f      	movs	r3, #31
   13592:	18fb      	adds	r3, r7, r3
   13594:	781b      	ldrb	r3, [r3, #0]
   13596:	e00b      	b.n	135b0 <bme680_set_sensor_settings+0x3e0>
   13598:	0003794b 	.word	0x0003794b
   1359c:	0001482f 	.word	0x0001482f
   135a0:	00013c5d 	.word	0x00013c5d
   135a4:	000136e9 	.word	0x000136e9
   135a8:	00014795 	.word	0x00014795
   135ac:	00012ee5 	.word	0x00012ee5
   135b0:	b25b      	sxtb	r3, r3
   135b2:	2b00      	cmp	r3, #0
   135b4:	d10b      	bne.n	135ce <bme680_set_sensor_settings+0x3fe>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
   135b6:	683b      	ldr	r3, [r7, #0]
   135b8:	333c      	adds	r3, #60	; 0x3c
   135ba:	0018      	movs	r0, r3
   135bc:	231f      	movs	r3, #31
   135be:	18fc      	adds	r4, r7, r3
   135c0:	683b      	ldr	r3, [r7, #0]
   135c2:	220a      	movs	r2, #10
   135c4:	2100      	movs	r1, #0
   135c6:	4d45      	ldr	r5, [pc, #276]	; (136dc <bme680_set_sensor_settings+0x50c>)
   135c8:	47a8      	blx	r5
   135ca:	0003      	movs	r3, r0
   135cc:	7023      	strb	r3, [r4, #0]
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;
   135ce:	231c      	movs	r3, #28
   135d0:	18fb      	adds	r3, r7, r3
   135d2:	2271      	movs	r2, #113	; 0x71
   135d4:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK)
   135d6:	231f      	movs	r3, #31
   135d8:	18fb      	adds	r3, r7, r3
   135da:	781b      	ldrb	r3, [r3, #0]
   135dc:	b25b      	sxtb	r3, r3
   135de:	2b00      	cmp	r3, #0
   135e0:	d10d      	bne.n	135fe <bme680_set_sensor_settings+0x42e>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
   135e2:	231f      	movs	r3, #31
   135e4:	18fc      	adds	r4, r7, r3
   135e6:	683a      	ldr	r2, [r7, #0]
   135e8:	231b      	movs	r3, #27
   135ea:	18f9      	adds	r1, r7, r3
   135ec:	231c      	movs	r3, #28
   135ee:	18fb      	adds	r3, r7, r3
   135f0:	7818      	ldrb	r0, [r3, #0]
   135f2:	0013      	movs	r3, r2
   135f4:	2201      	movs	r2, #1
   135f6:	4d3a      	ldr	r5, [pc, #232]	; (136e0 <bme680_set_sensor_settings+0x510>)
   135f8:	47a8      	blx	r5
   135fa:	0003      	movs	r3, r0
   135fc:	7023      	strb	r3, [r4, #0]

			if (desired_settings & BME680_RUN_GAS_SEL)
   135fe:	1dbb      	adds	r3, r7, #6
   13600:	881b      	ldrh	r3, [r3, #0]
   13602:	2240      	movs	r2, #64	; 0x40
   13604:	4013      	ands	r3, r2
   13606:	d014      	beq.n	13632 <bme680_set_sensor_settings+0x462>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
   13608:	231b      	movs	r3, #27
   1360a:	18fb      	adds	r3, r7, r3
   1360c:	781b      	ldrb	r3, [r3, #0]
   1360e:	b25b      	sxtb	r3, r3
   13610:	2210      	movs	r2, #16
   13612:	4393      	bics	r3, r2
   13614:	b25a      	sxtb	r2, r3
   13616:	683b      	ldr	r3, [r7, #0]
   13618:	213e      	movs	r1, #62	; 0x3e
   1361a:	5c5b      	ldrb	r3, [r3, r1]
   1361c:	011b      	lsls	r3, r3, #4
   1361e:	b25b      	sxtb	r3, r3
   13620:	2110      	movs	r1, #16
   13622:	400b      	ands	r3, r1
   13624:	b25b      	sxtb	r3, r3
   13626:	4313      	orrs	r3, r2
   13628:	b25b      	sxtb	r3, r3
   1362a:	b2da      	uxtb	r2, r3
   1362c:	231b      	movs	r3, #27
   1362e:	18fb      	adds	r3, r7, r3
   13630:	701a      	strb	r2, [r3, #0]

			if (desired_settings & BME680_NBCONV_SEL)
   13632:	1dbb      	adds	r3, r7, #6
   13634:	881b      	ldrh	r3, [r3, #0]
   13636:	2280      	movs	r2, #128	; 0x80
   13638:	4013      	ands	r3, r2
   1363a:	d013      	beq.n	13664 <bme680_set_sensor_settings+0x494>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
   1363c:	231b      	movs	r3, #27
   1363e:	18fb      	adds	r3, r7, r3
   13640:	781b      	ldrb	r3, [r3, #0]
   13642:	b25b      	sxtb	r3, r3
   13644:	220f      	movs	r2, #15
   13646:	4393      	bics	r3, r2
   13648:	b25a      	sxtb	r2, r3
   1364a:	683b      	ldr	r3, [r7, #0]
   1364c:	213c      	movs	r1, #60	; 0x3c
   1364e:	5c5b      	ldrb	r3, [r3, r1]
   13650:	b25b      	sxtb	r3, r3
   13652:	210f      	movs	r1, #15
   13654:	400b      	ands	r3, r1
   13656:	b25b      	sxtb	r3, r3
   13658:	4313      	orrs	r3, r2
   1365a:	b25b      	sxtb	r3, r3
   1365c:	b2da      	uxtb	r2, r3
   1365e:	231b      	movs	r3, #27
   13660:	18fb      	adds	r3, r7, r3
   13662:	701a      	strb	r2, [r3, #0]

			reg_array[count] = reg_addr; /* Append configuration */
   13664:	231e      	movs	r3, #30
   13666:	18fb      	adds	r3, r7, r3
   13668:	781b      	ldrb	r3, [r3, #0]
   1366a:	2214      	movs	r2, #20
   1366c:	18ba      	adds	r2, r7, r2
   1366e:	211c      	movs	r1, #28
   13670:	1879      	adds	r1, r7, r1
   13672:	7809      	ldrb	r1, [r1, #0]
   13674:	54d1      	strb	r1, [r2, r3]
			data_array[count] = data;
   13676:	231e      	movs	r3, #30
   13678:	18fb      	adds	r3, r7, r3
   1367a:	781b      	ldrb	r3, [r3, #0]
   1367c:	221b      	movs	r2, #27
   1367e:	18ba      	adds	r2, r7, r2
   13680:	7811      	ldrb	r1, [r2, #0]
   13682:	220c      	movs	r2, #12
   13684:	18ba      	adds	r2, r7, r2
   13686:	54d1      	strb	r1, [r2, r3]
			count++;
   13688:	231e      	movs	r3, #30
   1368a:	18fb      	adds	r3, r7, r3
   1368c:	781a      	ldrb	r2, [r3, #0]
   1368e:	231e      	movs	r3, #30
   13690:	18fb      	adds	r3, r7, r3
   13692:	3201      	adds	r2, #1
   13694:	701a      	strb	r2, [r3, #0]
		}

		if (rslt == BME680_OK)
   13696:	231f      	movs	r3, #31
   13698:	18fb      	adds	r3, r7, r3
   1369a:	781b      	ldrb	r3, [r3, #0]
   1369c:	b25b      	sxtb	r3, r3
   1369e:	2b00      	cmp	r3, #0
   136a0:	d10e      	bne.n	136c0 <bme680_set_sensor_settings+0x4f0>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
   136a2:	231f      	movs	r3, #31
   136a4:	18fc      	adds	r4, r7, r3
   136a6:	683d      	ldr	r5, [r7, #0]
   136a8:	231e      	movs	r3, #30
   136aa:	18fb      	adds	r3, r7, r3
   136ac:	781a      	ldrb	r2, [r3, #0]
   136ae:	230c      	movs	r3, #12
   136b0:	18f9      	adds	r1, r7, r3
   136b2:	2314      	movs	r3, #20
   136b4:	18f8      	adds	r0, r7, r3
   136b6:	002b      	movs	r3, r5
   136b8:	4d0a      	ldr	r5, [pc, #40]	; (136e4 <bme680_set_sensor_settings+0x514>)
   136ba:	47a8      	blx	r5
   136bc:	0003      	movs	r3, r0
   136be:	7023      	strb	r3, [r4, #0]

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
   136c0:	683b      	ldr	r3, [r7, #0]
   136c2:	221d      	movs	r2, #29
   136c4:	18ba      	adds	r2, r7, r2
   136c6:	2144      	movs	r1, #68	; 0x44
   136c8:	7812      	ldrb	r2, [r2, #0]
   136ca:	545a      	strb	r2, [r3, r1]
	}

	return rslt;
   136cc:	231f      	movs	r3, #31
   136ce:	18fb      	adds	r3, r7, r3
   136d0:	781b      	ldrb	r3, [r3, #0]
   136d2:	b25b      	sxtb	r3, r3
}
   136d4:	0018      	movs	r0, r3
   136d6:	46bd      	mov	sp, r7
   136d8:	b008      	add	sp, #32
   136da:	bdb0      	pop	{r4, r5, r7, pc}
   136dc:	00014795 	.word	0x00014795
   136e0:	00012ee5 	.word	0x00012ee5
   136e4:	00012fa9 	.word	0x00012fa9

000136e8 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
   136e8:	b5b0      	push	{r4, r5, r7, lr}
   136ea:	b084      	sub	sp, #16
   136ec:	af00      	add	r7, sp, #0
   136ee:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
   136f0:	230e      	movs	r3, #14
   136f2:	18fb      	adds	r3, r7, r3
   136f4:	2200      	movs	r2, #0
   136f6:	701a      	strb	r2, [r3, #0]
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
   136f8:	230c      	movs	r3, #12
   136fa:	18fb      	adds	r3, r7, r3
   136fc:	2274      	movs	r2, #116	; 0x74
   136fe:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   13700:	230f      	movs	r3, #15
   13702:	18fc      	adds	r4, r7, r3
   13704:	687b      	ldr	r3, [r7, #4]
   13706:	0018      	movs	r0, r3
   13708:	4b3c      	ldr	r3, [pc, #240]	; (137fc <bme680_set_sensor_mode+0x114>)
   1370a:	4798      	blx	r3
   1370c:	0003      	movs	r3, r0
   1370e:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   13710:	230f      	movs	r3, #15
   13712:	18fb      	adds	r3, r7, r3
   13714:	781b      	ldrb	r3, [r3, #0]
   13716:	b25b      	sxtb	r3, r3
   13718:	2b00      	cmp	r3, #0
   1371a:	d166      	bne.n	137ea <bme680_set_sensor_mode+0x102>
		/* Call repeatedly until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
   1371c:	230f      	movs	r3, #15
   1371e:	18fc      	adds	r4, r7, r3
   13720:	687b      	ldr	r3, [r7, #4]
   13722:	220d      	movs	r2, #13
   13724:	18b9      	adds	r1, r7, r2
   13726:	2201      	movs	r2, #1
   13728:	2074      	movs	r0, #116	; 0x74
   1372a:	4d35      	ldr	r5, [pc, #212]	; (13800 <bme680_set_sensor_mode+0x118>)
   1372c:	47a8      	blx	r5
   1372e:	0003      	movs	r3, r0
   13730:	7023      	strb	r3, [r4, #0]
			if (rslt == BME680_OK) {
   13732:	230f      	movs	r3, #15
   13734:	18fb      	adds	r3, r7, r3
   13736:	781b      	ldrb	r3, [r3, #0]
   13738:	b25b      	sxtb	r3, r3
   1373a:	2b00      	cmp	r3, #0
   1373c:	d125      	bne.n	1378a <bme680_set_sensor_mode+0xa2>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
   1373e:	230d      	movs	r3, #13
   13740:	18fb      	adds	r3, r7, r3
   13742:	781a      	ldrb	r2, [r3, #0]
   13744:	230e      	movs	r3, #14
   13746:	18fb      	adds	r3, r7, r3
   13748:	2103      	movs	r1, #3
   1374a:	400a      	ands	r2, r1
   1374c:	701a      	strb	r2, [r3, #0]

				if (pow_mode != BME680_SLEEP_MODE) {
   1374e:	230e      	movs	r3, #14
   13750:	18fb      	adds	r3, r7, r3
   13752:	781b      	ldrb	r3, [r3, #0]
   13754:	2b00      	cmp	r3, #0
   13756:	d018      	beq.n	1378a <bme680_set_sensor_mode+0xa2>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
   13758:	230d      	movs	r3, #13
   1375a:	18fb      	adds	r3, r7, r3
   1375c:	781b      	ldrb	r3, [r3, #0]
   1375e:	2203      	movs	r2, #3
   13760:	4393      	bics	r3, r2
   13762:	b2da      	uxtb	r2, r3
   13764:	230d      	movs	r3, #13
   13766:	18fb      	adds	r3, r7, r3
   13768:	701a      	strb	r2, [r3, #0]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   1376a:	230f      	movs	r3, #15
   1376c:	18fc      	adds	r4, r7, r3
   1376e:	687b      	ldr	r3, [r7, #4]
   13770:	220d      	movs	r2, #13
   13772:	18b9      	adds	r1, r7, r2
   13774:	220c      	movs	r2, #12
   13776:	18b8      	adds	r0, r7, r2
   13778:	2201      	movs	r2, #1
   1377a:	4d22      	ldr	r5, [pc, #136]	; (13804 <bme680_set_sensor_mode+0x11c>)
   1377c:	47a8      	blx	r5
   1377e:	0003      	movs	r3, r0
   13780:	7023      	strb	r3, [r4, #0]
					dev->delay_ms_bme(BME680_POLL_PERIOD_MS);
   13782:	687b      	ldr	r3, [r7, #4]
   13784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   13786:	200a      	movs	r0, #10
   13788:	4798      	blx	r3
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
   1378a:	230e      	movs	r3, #14
   1378c:	18fb      	adds	r3, r7, r3
   1378e:	781b      	ldrb	r3, [r3, #0]
   13790:	2b00      	cmp	r3, #0
   13792:	d1c3      	bne.n	1371c <bme680_set_sensor_mode+0x34>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
   13794:	687b      	ldr	r3, [r7, #4]
   13796:	2244      	movs	r2, #68	; 0x44
   13798:	5c9b      	ldrb	r3, [r3, r2]
   1379a:	2b00      	cmp	r3, #0
   1379c:	d025      	beq.n	137ea <bme680_set_sensor_mode+0x102>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
   1379e:	230d      	movs	r3, #13
   137a0:	18fb      	adds	r3, r7, r3
   137a2:	781b      	ldrb	r3, [r3, #0]
   137a4:	b25b      	sxtb	r3, r3
   137a6:	2203      	movs	r2, #3
   137a8:	4393      	bics	r3, r2
   137aa:	b25a      	sxtb	r2, r3
   137ac:	687b      	ldr	r3, [r7, #4]
   137ae:	2144      	movs	r1, #68	; 0x44
   137b0:	5c5b      	ldrb	r3, [r3, r1]
   137b2:	b25b      	sxtb	r3, r3
   137b4:	2103      	movs	r1, #3
   137b6:	400b      	ands	r3, r1
   137b8:	b25b      	sxtb	r3, r3
   137ba:	4313      	orrs	r3, r2
   137bc:	b25b      	sxtb	r3, r3
   137be:	b2da      	uxtb	r2, r3
   137c0:	230d      	movs	r3, #13
   137c2:	18fb      	adds	r3, r7, r3
   137c4:	701a      	strb	r2, [r3, #0]
			if (rslt == BME680_OK)
   137c6:	230f      	movs	r3, #15
   137c8:	18fb      	adds	r3, r7, r3
   137ca:	781b      	ldrb	r3, [r3, #0]
   137cc:	b25b      	sxtb	r3, r3
   137ce:	2b00      	cmp	r3, #0
   137d0:	d10b      	bne.n	137ea <bme680_set_sensor_mode+0x102>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
   137d2:	230f      	movs	r3, #15
   137d4:	18fc      	adds	r4, r7, r3
   137d6:	687b      	ldr	r3, [r7, #4]
   137d8:	220d      	movs	r2, #13
   137da:	18b9      	adds	r1, r7, r2
   137dc:	220c      	movs	r2, #12
   137de:	18b8      	adds	r0, r7, r2
   137e0:	2201      	movs	r2, #1
   137e2:	4d08      	ldr	r5, [pc, #32]	; (13804 <bme680_set_sensor_mode+0x11c>)
   137e4:	47a8      	blx	r5
   137e6:	0003      	movs	r3, r0
   137e8:	7023      	strb	r3, [r4, #0]
		}
	}

	return rslt;
   137ea:	230f      	movs	r3, #15
   137ec:	18fb      	adds	r3, r7, r3
   137ee:	781b      	ldrb	r3, [r3, #0]
   137f0:	b25b      	sxtb	r3, r3
}
   137f2:	0018      	movs	r0, r3
   137f4:	46bd      	mov	sp, r7
   137f6:	b004      	add	sp, #16
   137f8:	bdb0      	pop	{r4, r5, r7, pc}
   137fa:	46c0      	nop			; (mov r8, r8)
   137fc:	0001482f 	.word	0x0001482f
   13800:	00012ee5 	.word	0x00012ee5
   13804:	00012fa9 	.word	0x00012fa9

00013808 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
   13808:	b580      	push	{r7, lr}
   1380a:	b086      	sub	sp, #24
   1380c:	af00      	add	r7, sp, #0
   1380e:	6078      	str	r0, [r7, #4]
   13810:	6039      	str	r1, [r7, #0]
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
   13812:	2308      	movs	r3, #8
   13814:	18fb      	adds	r3, r7, r3
   13816:	4a2a      	ldr	r2, [pc, #168]	; (138c0 <bme680_get_profile_dur+0xb8>)
   13818:	6811      	ldr	r1, [r2, #0]
   1381a:	6019      	str	r1, [r3, #0]
   1381c:	8892      	ldrh	r2, [r2, #4]
   1381e:	809a      	strh	r2, [r3, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
   13820:	683b      	ldr	r3, [r7, #0]
   13822:	2239      	movs	r2, #57	; 0x39
   13824:	5c9b      	ldrb	r3, [r3, r2]
   13826:	001a      	movs	r2, r3
   13828:	2308      	movs	r3, #8
   1382a:	18fb      	adds	r3, r7, r3
   1382c:	5c9b      	ldrb	r3, [r3, r2]
   1382e:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
   13830:	683b      	ldr	r3, [r7, #0]
   13832:	223a      	movs	r2, #58	; 0x3a
   13834:	5c9b      	ldrb	r3, [r3, r2]
   13836:	001a      	movs	r2, r3
   13838:	2308      	movs	r3, #8
   1383a:	18fb      	adds	r3, r7, r3
   1383c:	5c9b      	ldrb	r3, [r3, r2]
   1383e:	001a      	movs	r2, r3
   13840:	697b      	ldr	r3, [r7, #20]
   13842:	189b      	adds	r3, r3, r2
   13844:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
   13846:	683b      	ldr	r3, [r7, #0]
   13848:	2238      	movs	r2, #56	; 0x38
   1384a:	5c9b      	ldrb	r3, [r3, r2]
   1384c:	001a      	movs	r2, r3
   1384e:	2308      	movs	r3, #8
   13850:	18fb      	adds	r3, r7, r3
   13852:	5c9b      	ldrb	r3, [r3, r2]
   13854:	001a      	movs	r2, r3
   13856:	697b      	ldr	r3, [r7, #20]
   13858:	189b      	adds	r3, r3, r2
   1385a:	617b      	str	r3, [r7, #20]

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
   1385c:	697b      	ldr	r3, [r7, #20]
   1385e:	4a19      	ldr	r2, [pc, #100]	; (138c4 <bme680_get_profile_dur+0xbc>)
   13860:	4353      	muls	r3, r2
   13862:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
   13864:	693b      	ldr	r3, [r7, #16]
   13866:	4a18      	ldr	r2, [pc, #96]	; (138c8 <bme680_get_profile_dur+0xc0>)
   13868:	4694      	mov	ip, r2
   1386a:	4463      	add	r3, ip
   1386c:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
   1386e:	693b      	ldr	r3, [r7, #16]
   13870:	4a16      	ldr	r2, [pc, #88]	; (138cc <bme680_get_profile_dur+0xc4>)
   13872:	4694      	mov	ip, r2
   13874:	4463      	add	r3, ip
   13876:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
   13878:	693b      	ldr	r3, [r7, #16]
   1387a:	33f5      	adds	r3, #245	; 0xf5
   1387c:	33ff      	adds	r3, #255	; 0xff
   1387e:	613b      	str	r3, [r7, #16]
	tph_dur /= UINT32_C(1000); /* Convert to ms */
   13880:	6938      	ldr	r0, [r7, #16]
   13882:	4b13      	ldr	r3, [pc, #76]	; (138d0 <bme680_get_profile_dur+0xc8>)
   13884:	22fa      	movs	r2, #250	; 0xfa
   13886:	0091      	lsls	r1, r2, #2
   13888:	4798      	blx	r3
   1388a:	0003      	movs	r3, r0
   1388c:	613b      	str	r3, [r7, #16]

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
   1388e:	693b      	ldr	r3, [r7, #16]
   13890:	3301      	adds	r3, #1
   13892:	613b      	str	r3, [r7, #16]

	*duration = (uint16_t) tph_dur;
   13894:	693b      	ldr	r3, [r7, #16]
   13896:	b29a      	uxth	r2, r3
   13898:	687b      	ldr	r3, [r7, #4]
   1389a:	801a      	strh	r2, [r3, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
   1389c:	683b      	ldr	r3, [r7, #0]
   1389e:	223e      	movs	r2, #62	; 0x3e
   138a0:	5c9b      	ldrb	r3, [r3, r2]
   138a2:	2b00      	cmp	r3, #0
   138a4:	d008      	beq.n	138b8 <bme680_get_profile_dur+0xb0>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
   138a6:	687b      	ldr	r3, [r7, #4]
   138a8:	881a      	ldrh	r2, [r3, #0]
   138aa:	683b      	ldr	r3, [r7, #0]
   138ac:	2142      	movs	r1, #66	; 0x42
   138ae:	5a5b      	ldrh	r3, [r3, r1]
   138b0:	18d3      	adds	r3, r2, r3
   138b2:	b29a      	uxth	r2, r3
   138b4:	687b      	ldr	r3, [r7, #4]
   138b6:	801a      	strh	r2, [r3, #0]
	}
}
   138b8:	46c0      	nop			; (mov r8, r8)
   138ba:	46bd      	mov	sp, r7
   138bc:	b006      	add	sp, #24
   138be:	bd80      	pop	{r7, pc}
   138c0:	00038d28 	.word	0x00038d28
   138c4:	000007ab 	.word	0x000007ab
   138c8:	00000774 	.word	0x00000774
   138cc:	00000951 	.word	0x00000951
   138d0:	00034e15 	.word	0x00034e15

000138d4 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
   138d4:	b590      	push	{r4, r7, lr}
   138d6:	b085      	sub	sp, #20
   138d8:	af00      	add	r7, sp, #0
   138da:	6078      	str	r0, [r7, #4]
   138dc:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   138de:	230f      	movs	r3, #15
   138e0:	18fc      	adds	r4, r7, r3
   138e2:	683b      	ldr	r3, [r7, #0]
   138e4:	0018      	movs	r0, r3
   138e6:	4b18      	ldr	r3, [pc, #96]	; (13948 <bme680_get_sensor_data+0x74>)
   138e8:	4798      	blx	r3
   138ea:	0003      	movs	r3, r0
   138ec:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   138ee:	230f      	movs	r3, #15
   138f0:	18fb      	adds	r3, r7, r3
   138f2:	781b      	ldrb	r3, [r3, #0]
   138f4:	b25b      	sxtb	r3, r3
   138f6:	2b00      	cmp	r3, #0
   138f8:	d11d      	bne.n	13936 <bme680_get_sensor_data+0x62>
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
   138fa:	230f      	movs	r3, #15
   138fc:	18fc      	adds	r4, r7, r3
   138fe:	683a      	ldr	r2, [r7, #0]
   13900:	687b      	ldr	r3, [r7, #4]
   13902:	0011      	movs	r1, r2
   13904:	0018      	movs	r0, r3
   13906:	4b11      	ldr	r3, [pc, #68]	; (1394c <bme680_get_sensor_data+0x78>)
   13908:	4798      	blx	r3
   1390a:	0003      	movs	r3, r0
   1390c:	7023      	strb	r3, [r4, #0]
		if (rslt == BME680_OK) {
   1390e:	230f      	movs	r3, #15
   13910:	18fb      	adds	r3, r7, r3
   13912:	781b      	ldrb	r3, [r3, #0]
   13914:	b25b      	sxtb	r3, r3
   13916:	2b00      	cmp	r3, #0
   13918:	d10d      	bne.n	13936 <bme680_get_sensor_data+0x62>
			if (data->status & BME680_NEW_DATA_MSK)
   1391a:	687b      	ldr	r3, [r7, #4]
   1391c:	781b      	ldrb	r3, [r3, #0]
   1391e:	b25b      	sxtb	r3, r3
   13920:	2b00      	cmp	r3, #0
   13922:	da04      	bge.n	1392e <bme680_get_sensor_data+0x5a>
				dev->new_fields = 1;
   13924:	683b      	ldr	r3, [r7, #0]
   13926:	2245      	movs	r2, #69	; 0x45
   13928:	2101      	movs	r1, #1
   1392a:	5499      	strb	r1, [r3, r2]
   1392c:	e003      	b.n	13936 <bme680_get_sensor_data+0x62>
			else
				dev->new_fields = 0;
   1392e:	683b      	ldr	r3, [r7, #0]
   13930:	2245      	movs	r2, #69	; 0x45
   13932:	2100      	movs	r1, #0
   13934:	5499      	strb	r1, [r3, r2]
		}
	}

	return rslt;
   13936:	230f      	movs	r3, #15
   13938:	18fb      	adds	r3, r7, r3
   1393a:	781b      	ldrb	r3, [r3, #0]
   1393c:	b25b      	sxtb	r3, r3
}
   1393e:	0018      	movs	r0, r3
   13940:	46bd      	mov	sp, r7
   13942:	b005      	add	sp, #20
   13944:	bd90      	pop	{r4, r7, pc}
   13946:	46c0      	nop			; (mov r8, r8)
   13948:	0001482f 	.word	0x0001482f
   1394c:	00014405 	.word	0x00014405

00013950 <get_calib_data>:

/*!
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
   13950:	b5b0      	push	{r4, r5, r7, lr}
   13952:	b08e      	sub	sp, #56	; 0x38
   13954:	af00      	add	r7, sp, #0
   13956:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
   13958:	230c      	movs	r3, #12
   1395a:	18fb      	adds	r3, r7, r3
   1395c:	0018      	movs	r0, r3
   1395e:	2329      	movs	r3, #41	; 0x29
   13960:	001a      	movs	r2, r3
   13962:	2100      	movs	r1, #0
   13964:	4bba      	ldr	r3, [pc, #744]	; (13c50 <get_calib_data+0x300>)
   13966:	4798      	blx	r3
	uint8_t temp_var = 0; /* Temporary variable */
   13968:	230b      	movs	r3, #11
   1396a:	18fb      	adds	r3, r7, r3
   1396c:	2200      	movs	r2, #0
   1396e:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   13970:	2337      	movs	r3, #55	; 0x37
   13972:	18fc      	adds	r4, r7, r3
   13974:	687b      	ldr	r3, [r7, #4]
   13976:	0018      	movs	r0, r3
   13978:	4bb6      	ldr	r3, [pc, #728]	; (13c54 <get_calib_data+0x304>)
   1397a:	4798      	blx	r3
   1397c:	0003      	movs	r3, r0
   1397e:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   13980:	2337      	movs	r3, #55	; 0x37
   13982:	18fb      	adds	r3, r7, r3
   13984:	781b      	ldrb	r3, [r3, #0]
   13986:	b25b      	sxtb	r3, r3
   13988:	2b00      	cmp	r3, #0
   1398a:	d000      	beq.n	1398e <get_calib_data+0x3e>
   1398c:	e157      	b.n	13c3e <get_calib_data+0x2ee>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
   1398e:	2337      	movs	r3, #55	; 0x37
   13990:	18fc      	adds	r4, r7, r3
   13992:	687b      	ldr	r3, [r7, #4]
   13994:	220c      	movs	r2, #12
   13996:	18b9      	adds	r1, r7, r2
   13998:	2219      	movs	r2, #25
   1399a:	2089      	movs	r0, #137	; 0x89
   1399c:	4dae      	ldr	r5, [pc, #696]	; (13c58 <get_calib_data+0x308>)
   1399e:	47a8      	blx	r5
   139a0:	0003      	movs	r3, r0
   139a2:	7023      	strb	r3, [r4, #0]
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
   139a4:	2337      	movs	r3, #55	; 0x37
   139a6:	18fb      	adds	r3, r7, r3
   139a8:	781b      	ldrb	r3, [r3, #0]
   139aa:	b25b      	sxtb	r3, r3
   139ac:	2b00      	cmp	r3, #0
   139ae:	d10d      	bne.n	139cc <get_calib_data+0x7c>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
   139b0:	2337      	movs	r3, #55	; 0x37
   139b2:	18fc      	adds	r4, r7, r3
   139b4:	687a      	ldr	r2, [r7, #4]
   139b6:	230c      	movs	r3, #12
   139b8:	18fb      	adds	r3, r7, r3
   139ba:	3319      	adds	r3, #25
   139bc:	0019      	movs	r1, r3
   139be:	0013      	movs	r3, r2
   139c0:	2210      	movs	r2, #16
   139c2:	20e1      	movs	r0, #225	; 0xe1
   139c4:	4da4      	ldr	r5, [pc, #656]	; (13c58 <get_calib_data+0x308>)
   139c6:	47a8      	blx	r5
   139c8:	0003      	movs	r3, r0
   139ca:	7023      	strb	r3, [r4, #0]
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
   139cc:	230c      	movs	r3, #12
   139ce:	18fb      	adds	r3, r7, r3
   139d0:	2222      	movs	r2, #34	; 0x22
   139d2:	5c9b      	ldrb	r3, [r3, r2]
   139d4:	021b      	lsls	r3, r3, #8
   139d6:	b21a      	sxth	r2, r3
   139d8:	230c      	movs	r3, #12
   139da:	18fb      	adds	r3, r7, r3
   139dc:	2121      	movs	r1, #33	; 0x21
   139de:	5c5b      	ldrb	r3, [r3, r1]
   139e0:	b21b      	sxth	r3, r3
   139e2:	4313      	orrs	r3, r2
   139e4:	b21b      	sxth	r3, r3
   139e6:	b29a      	uxth	r2, r3
   139e8:	687b      	ldr	r3, [r7, #4]
   139ea:	82da      	strh	r2, [r3, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
   139ec:	230c      	movs	r3, #12
   139ee:	18fb      	adds	r3, r7, r3
   139f0:	789b      	ldrb	r3, [r3, #2]
   139f2:	021b      	lsls	r3, r3, #8
   139f4:	b21a      	sxth	r2, r3
   139f6:	230c      	movs	r3, #12
   139f8:	18fb      	adds	r3, r7, r3
   139fa:	785b      	ldrb	r3, [r3, #1]
   139fc:	b21b      	sxth	r3, r3
   139fe:	4313      	orrs	r3, r2
   13a00:	b21a      	sxth	r2, r3
   13a02:	687b      	ldr	r3, [r7, #4]
   13a04:	831a      	strh	r2, [r3, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
   13a06:	230c      	movs	r3, #12
   13a08:	18fb      	adds	r3, r7, r3
   13a0a:	78db      	ldrb	r3, [r3, #3]
   13a0c:	b25a      	sxtb	r2, r3
   13a0e:	687b      	ldr	r3, [r7, #4]
   13a10:	769a      	strb	r2, [r3, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
   13a12:	230c      	movs	r3, #12
   13a14:	18fb      	adds	r3, r7, r3
   13a16:	799b      	ldrb	r3, [r3, #6]
   13a18:	021b      	lsls	r3, r3, #8
   13a1a:	b21a      	sxth	r2, r3
   13a1c:	230c      	movs	r3, #12
   13a1e:	18fb      	adds	r3, r7, r3
   13a20:	795b      	ldrb	r3, [r3, #5]
   13a22:	b21b      	sxth	r3, r3
   13a24:	4313      	orrs	r3, r2
   13a26:	b21b      	sxth	r3, r3
   13a28:	b29a      	uxth	r2, r3
   13a2a:	687b      	ldr	r3, [r7, #4]
   13a2c:	839a      	strh	r2, [r3, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
   13a2e:	230c      	movs	r3, #12
   13a30:	18fb      	adds	r3, r7, r3
   13a32:	7a1b      	ldrb	r3, [r3, #8]
   13a34:	021b      	lsls	r3, r3, #8
   13a36:	b21a      	sxth	r2, r3
   13a38:	230c      	movs	r3, #12
   13a3a:	18fb      	adds	r3, r7, r3
   13a3c:	79db      	ldrb	r3, [r3, #7]
   13a3e:	b21b      	sxth	r3, r3
   13a40:	4313      	orrs	r3, r2
   13a42:	b21a      	sxth	r2, r3
   13a44:	687b      	ldr	r3, [r7, #4]
   13a46:	83da      	strh	r2, [r3, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
   13a48:	230c      	movs	r3, #12
   13a4a:	18fb      	adds	r3, r7, r3
   13a4c:	7a5b      	ldrb	r3, [r3, #9]
   13a4e:	b259      	sxtb	r1, r3
   13a50:	687b      	ldr	r3, [r7, #4]
   13a52:	2220      	movs	r2, #32
   13a54:	5499      	strb	r1, [r3, r2]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
   13a56:	230c      	movs	r3, #12
   13a58:	18fb      	adds	r3, r7, r3
   13a5a:	7b1b      	ldrb	r3, [r3, #12]
   13a5c:	021b      	lsls	r3, r3, #8
   13a5e:	b21a      	sxth	r2, r3
   13a60:	230c      	movs	r3, #12
   13a62:	18fb      	adds	r3, r7, r3
   13a64:	7adb      	ldrb	r3, [r3, #11]
   13a66:	b21b      	sxth	r3, r3
   13a68:	4313      	orrs	r3, r2
   13a6a:	b21a      	sxth	r2, r3
   13a6c:	687b      	ldr	r3, [r7, #4]
   13a6e:	845a      	strh	r2, [r3, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
   13a70:	230c      	movs	r3, #12
   13a72:	18fb      	adds	r3, r7, r3
   13a74:	7b9b      	ldrb	r3, [r3, #14]
   13a76:	021b      	lsls	r3, r3, #8
   13a78:	b21a      	sxth	r2, r3
   13a7a:	230c      	movs	r3, #12
   13a7c:	18fb      	adds	r3, r7, r3
   13a7e:	7b5b      	ldrb	r3, [r3, #13]
   13a80:	b21b      	sxth	r3, r3
   13a82:	4313      	orrs	r3, r2
   13a84:	b21a      	sxth	r2, r3
   13a86:	687b      	ldr	r3, [r7, #4]
   13a88:	849a      	strh	r2, [r3, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
   13a8a:	230c      	movs	r3, #12
   13a8c:	18fb      	adds	r3, r7, r3
   13a8e:	7c1b      	ldrb	r3, [r3, #16]
   13a90:	b259      	sxtb	r1, r3
   13a92:	687b      	ldr	r3, [r7, #4]
   13a94:	2226      	movs	r2, #38	; 0x26
   13a96:	5499      	strb	r1, [r3, r2]
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
   13a98:	230c      	movs	r3, #12
   13a9a:	18fb      	adds	r3, r7, r3
   13a9c:	7bdb      	ldrb	r3, [r3, #15]
   13a9e:	b259      	sxtb	r1, r3
   13aa0:	687b      	ldr	r3, [r7, #4]
   13aa2:	2227      	movs	r2, #39	; 0x27
   13aa4:	5499      	strb	r1, [r3, r2]
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
   13aa6:	230c      	movs	r3, #12
   13aa8:	18fb      	adds	r3, r7, r3
   13aaa:	7d1b      	ldrb	r3, [r3, #20]
   13aac:	021b      	lsls	r3, r3, #8
   13aae:	b21a      	sxth	r2, r3
   13ab0:	230c      	movs	r3, #12
   13ab2:	18fb      	adds	r3, r7, r3
   13ab4:	7cdb      	ldrb	r3, [r3, #19]
   13ab6:	b21b      	sxth	r3, r3
   13ab8:	4313      	orrs	r3, r2
   13aba:	b21a      	sxth	r2, r3
   13abc:	687b      	ldr	r3, [r7, #4]
   13abe:	851a      	strh	r2, [r3, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
   13ac0:	230c      	movs	r3, #12
   13ac2:	18fb      	adds	r3, r7, r3
   13ac4:	7d9b      	ldrb	r3, [r3, #22]
   13ac6:	021b      	lsls	r3, r3, #8
   13ac8:	b21a      	sxth	r2, r3
   13aca:	230c      	movs	r3, #12
   13acc:	18fb      	adds	r3, r7, r3
   13ace:	7d5b      	ldrb	r3, [r3, #21]
   13ad0:	b21b      	sxth	r3, r3
   13ad2:	4313      	orrs	r3, r2
   13ad4:	b21a      	sxth	r2, r3
   13ad6:	687b      	ldr	r3, [r7, #4]
   13ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
   13ada:	230c      	movs	r3, #12
   13adc:	18fb      	adds	r3, r7, r3
   13ade:	7dd9      	ldrb	r1, [r3, #23]
   13ae0:	687b      	ldr	r3, [r7, #4]
   13ae2:	222c      	movs	r2, #44	; 0x2c
   13ae4:	5499      	strb	r1, [r3, r2]

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   13ae6:	230c      	movs	r3, #12
   13ae8:	18fb      	adds	r3, r7, r3
   13aea:	7edb      	ldrb	r3, [r3, #27]
   13aec:	011b      	lsls	r3, r3, #4
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
   13aee:	b21a      	sxth	r2, r3
   13af0:	230c      	movs	r3, #12
   13af2:	18fb      	adds	r3, r7, r3
   13af4:	7e9b      	ldrb	r3, [r3, #26]
   13af6:	b21b      	sxth	r3, r3
   13af8:	210f      	movs	r1, #15
   13afa:	400b      	ands	r3, r1
   13afc:	b21b      	sxth	r3, r3
   13afe:	4313      	orrs	r3, r2
   13b00:	b21b      	sxth	r3, r3
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   13b02:	b29a      	uxth	r2, r3
   13b04:	687b      	ldr	r3, [r7, #4]
   13b06:	811a      	strh	r2, [r3, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   13b08:	230c      	movs	r3, #12
   13b0a:	18fb      	adds	r3, r7, r3
   13b0c:	7e5b      	ldrb	r3, [r3, #25]
   13b0e:	011b      	lsls	r3, r3, #4
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
   13b10:	b21a      	sxth	r2, r3
   13b12:	230c      	movs	r3, #12
   13b14:	18fb      	adds	r3, r7, r3
   13b16:	7e9b      	ldrb	r3, [r3, #26]
   13b18:	091b      	lsrs	r3, r3, #4
   13b1a:	b2db      	uxtb	r3, r3
   13b1c:	b21b      	sxth	r3, r3
   13b1e:	4313      	orrs	r3, r2
   13b20:	b21b      	sxth	r3, r3
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
   13b22:	b29a      	uxth	r2, r3
   13b24:	687b      	ldr	r3, [r7, #4]
   13b26:	815a      	strh	r2, [r3, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
   13b28:	230c      	movs	r3, #12
   13b2a:	18fb      	adds	r3, r7, r3
   13b2c:	7f1b      	ldrb	r3, [r3, #28]
   13b2e:	b25a      	sxtb	r2, r3
   13b30:	687b      	ldr	r3, [r7, #4]
   13b32:	731a      	strb	r2, [r3, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
   13b34:	230c      	movs	r3, #12
   13b36:	18fb      	adds	r3, r7, r3
   13b38:	7f5b      	ldrb	r3, [r3, #29]
   13b3a:	b25a      	sxtb	r2, r3
   13b3c:	687b      	ldr	r3, [r7, #4]
   13b3e:	735a      	strb	r2, [r3, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
   13b40:	230c      	movs	r3, #12
   13b42:	18fb      	adds	r3, r7, r3
   13b44:	7f9b      	ldrb	r3, [r3, #30]
   13b46:	b25a      	sxtb	r2, r3
   13b48:	687b      	ldr	r3, [r7, #4]
   13b4a:	739a      	strb	r2, [r3, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
   13b4c:	230c      	movs	r3, #12
   13b4e:	18fb      	adds	r3, r7, r3
   13b50:	7fda      	ldrb	r2, [r3, #31]
   13b52:	687b      	ldr	r3, [r7, #4]
   13b54:	73da      	strb	r2, [r3, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
   13b56:	230c      	movs	r3, #12
   13b58:	18fb      	adds	r3, r7, r3
   13b5a:	2220      	movs	r2, #32
   13b5c:	5c9b      	ldrb	r3, [r3, r2]
   13b5e:	b25a      	sxtb	r2, r3
   13b60:	687b      	ldr	r3, [r7, #4]
   13b62:	741a      	strb	r2, [r3, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
   13b64:	230c      	movs	r3, #12
   13b66:	18fb      	adds	r3, r7, r3
   13b68:	2225      	movs	r2, #37	; 0x25
   13b6a:	5c9b      	ldrb	r3, [r3, r2]
   13b6c:	b25a      	sxtb	r2, r3
   13b6e:	687b      	ldr	r3, [r7, #4]
   13b70:	745a      	strb	r2, [r3, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
   13b72:	230c      	movs	r3, #12
   13b74:	18fb      	adds	r3, r7, r3
   13b76:	2224      	movs	r2, #36	; 0x24
   13b78:	5c9b      	ldrb	r3, [r3, r2]
   13b7a:	021b      	lsls	r3, r3, #8
   13b7c:	b21a      	sxth	r2, r3
   13b7e:	230c      	movs	r3, #12
   13b80:	18fb      	adds	r3, r7, r3
   13b82:	2123      	movs	r1, #35	; 0x23
   13b84:	5c5b      	ldrb	r3, [r3, r1]
   13b86:	b21b      	sxth	r3, r3
   13b88:	4313      	orrs	r3, r2
   13b8a:	b21a      	sxth	r2, r3
   13b8c:	687b      	ldr	r3, [r7, #4]
   13b8e:	825a      	strh	r2, [r3, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
   13b90:	230c      	movs	r3, #12
   13b92:	18fb      	adds	r3, r7, r3
   13b94:	2226      	movs	r2, #38	; 0x26
   13b96:	5c9b      	ldrb	r3, [r3, r2]
   13b98:	b25a      	sxtb	r2, r3
   13b9a:	687b      	ldr	r3, [r7, #4]
   13b9c:	751a      	strb	r2, [r3, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
   13b9e:	2337      	movs	r3, #55	; 0x37
   13ba0:	18fb      	adds	r3, r7, r3
   13ba2:	781b      	ldrb	r3, [r3, #0]
   13ba4:	b25b      	sxtb	r3, r3
   13ba6:	2b00      	cmp	r3, #0
   13ba8:	d140      	bne.n	13c2c <get_calib_data+0x2dc>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
   13baa:	2337      	movs	r3, #55	; 0x37
   13bac:	18fc      	adds	r4, r7, r3
   13bae:	687b      	ldr	r3, [r7, #4]
   13bb0:	220b      	movs	r2, #11
   13bb2:	18b9      	adds	r1, r7, r2
   13bb4:	2201      	movs	r2, #1
   13bb6:	2002      	movs	r0, #2
   13bb8:	4d27      	ldr	r5, [pc, #156]	; (13c58 <get_calib_data+0x308>)
   13bba:	47a8      	blx	r5
   13bbc:	0003      	movs	r3, r0
   13bbe:	7023      	strb	r3, [r4, #0]

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
   13bc0:	230b      	movs	r3, #11
   13bc2:	18fb      	adds	r3, r7, r3
   13bc4:	781b      	ldrb	r3, [r3, #0]
   13bc6:	001a      	movs	r2, r3
   13bc8:	2330      	movs	r3, #48	; 0x30
   13bca:	4013      	ands	r3, r2
   13bcc:	d500      	bpl.n	13bd0 <get_calib_data+0x280>
   13bce:	330f      	adds	r3, #15
   13bd0:	111b      	asrs	r3, r3, #4
   13bd2:	b2d9      	uxtb	r1, r3
   13bd4:	687b      	ldr	r3, [r7, #4]
   13bd6:	2234      	movs	r2, #52	; 0x34
   13bd8:	5499      	strb	r1, [r3, r2]
			if (rslt == BME680_OK) {
   13bda:	2337      	movs	r3, #55	; 0x37
   13bdc:	18fb      	adds	r3, r7, r3
   13bde:	781b      	ldrb	r3, [r3, #0]
   13be0:	b25b      	sxtb	r3, r3
   13be2:	2b00      	cmp	r3, #0
   13be4:	d122      	bne.n	13c2c <get_calib_data+0x2dc>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
   13be6:	2337      	movs	r3, #55	; 0x37
   13be8:	18fc      	adds	r4, r7, r3
   13bea:	687b      	ldr	r3, [r7, #4]
   13bec:	220b      	movs	r2, #11
   13bee:	18b9      	adds	r1, r7, r2
   13bf0:	2201      	movs	r2, #1
   13bf2:	2000      	movs	r0, #0
   13bf4:	4d18      	ldr	r5, [pc, #96]	; (13c58 <get_calib_data+0x308>)
   13bf6:	47a8      	blx	r5
   13bf8:	0003      	movs	r3, r0
   13bfa:	7023      	strb	r3, [r4, #0]

				dev->calib.res_heat_val = (int8_t) temp_var;
   13bfc:	230b      	movs	r3, #11
   13bfe:	18fb      	adds	r3, r7, r3
   13c00:	781b      	ldrb	r3, [r3, #0]
   13c02:	b259      	sxtb	r1, r3
   13c04:	687b      	ldr	r3, [r7, #4]
   13c06:	2235      	movs	r2, #53	; 0x35
   13c08:	5499      	strb	r1, [r3, r2]
				if (rslt == BME680_OK)
   13c0a:	2337      	movs	r3, #55	; 0x37
   13c0c:	18fb      	adds	r3, r7, r3
   13c0e:	781b      	ldrb	r3, [r3, #0]
   13c10:	b25b      	sxtb	r3, r3
   13c12:	2b00      	cmp	r3, #0
   13c14:	d10a      	bne.n	13c2c <get_calib_data+0x2dc>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
   13c16:	2337      	movs	r3, #55	; 0x37
   13c18:	18fc      	adds	r4, r7, r3
   13c1a:	687b      	ldr	r3, [r7, #4]
   13c1c:	220b      	movs	r2, #11
   13c1e:	18b9      	adds	r1, r7, r2
   13c20:	2201      	movs	r2, #1
   13c22:	2004      	movs	r0, #4
   13c24:	4d0c      	ldr	r5, [pc, #48]	; (13c58 <get_calib_data+0x308>)
   13c26:	47a8      	blx	r5
   13c28:	0003      	movs	r3, r0
   13c2a:	7023      	strb	r3, [r4, #0]
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
   13c2c:	230b      	movs	r3, #11
   13c2e:	18fb      	adds	r3, r7, r3
   13c30:	781b      	ldrb	r3, [r3, #0]
   13c32:	b25b      	sxtb	r3, r3
   13c34:	111b      	asrs	r3, r3, #4
   13c36:	b259      	sxtb	r1, r3
   13c38:	687b      	ldr	r3, [r7, #4]
   13c3a:	2236      	movs	r2, #54	; 0x36
   13c3c:	5499      	strb	r1, [r3, r2]
	}

	return rslt;
   13c3e:	2337      	movs	r3, #55	; 0x37
   13c40:	18fb      	adds	r3, r7, r3
   13c42:	781b      	ldrb	r3, [r3, #0]
   13c44:	b25b      	sxtb	r3, r3
}
   13c46:	0018      	movs	r0, r3
   13c48:	46bd      	mov	sp, r7
   13c4a:	b00e      	add	sp, #56	; 0x38
   13c4c:	bdb0      	pop	{r4, r5, r7, pc}
   13c4e:	46c0      	nop			; (mov r8, r8)
   13c50:	0003794b 	.word	0x0003794b
   13c54:	0001482f 	.word	0x0001482f
   13c58:	00012ee5 	.word	0x00012ee5

00013c5c <set_gas_config>:

/*!
 * @brief This internal API is used to set the gas configuration of the sensor.
 */
static int8_t set_gas_config(struct bme680_dev *dev)
{
   13c5c:	b5b0      	push	{r4, r5, r7, lr}
   13c5e:	b084      	sub	sp, #16
   13c60:	af00      	add	r7, sp, #0
   13c62:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   13c64:	230f      	movs	r3, #15
   13c66:	18fc      	adds	r4, r7, r3
   13c68:	687b      	ldr	r3, [r7, #4]
   13c6a:	0018      	movs	r0, r3
   13c6c:	4b2c      	ldr	r3, [pc, #176]	; (13d20 <set_gas_config+0xc4>)
   13c6e:	4798      	blx	r3
   13c70:	0003      	movs	r3, r0
   13c72:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   13c74:	230f      	movs	r3, #15
   13c76:	18fb      	adds	r3, r7, r3
   13c78:	781b      	ldrb	r3, [r3, #0]
   13c7a:	b25b      	sxtb	r3, r3
   13c7c:	2b00      	cmp	r3, #0
   13c7e:	d147      	bne.n	13d10 <set_gas_config+0xb4>

		uint8_t reg_addr[2] = {0};
   13c80:	230c      	movs	r3, #12
   13c82:	18fb      	adds	r3, r7, r3
   13c84:	2200      	movs	r2, #0
   13c86:	801a      	strh	r2, [r3, #0]
		uint8_t reg_data[2] = {0};
   13c88:	2308      	movs	r3, #8
   13c8a:	18fb      	adds	r3, r7, r3
   13c8c:	2200      	movs	r2, #0
   13c8e:	801a      	strh	r2, [r3, #0]

		if (dev->power_mode == BME680_FORCED_MODE) {
   13c90:	687b      	ldr	r3, [r7, #4]
   13c92:	2244      	movs	r2, #68	; 0x44
   13c94:	5c9b      	ldrb	r3, [r3, r2]
   13c96:	2b01      	cmp	r3, #1
   13c98:	d124      	bne.n	13ce4 <set_gas_config+0x88>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
   13c9a:	230c      	movs	r3, #12
   13c9c:	18fb      	adds	r3, r7, r3
   13c9e:	225a      	movs	r2, #90	; 0x5a
   13ca0:	701a      	strb	r2, [r3, #0]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
   13ca2:	687b      	ldr	r3, [r7, #4]
   13ca4:	2240      	movs	r2, #64	; 0x40
   13ca6:	5a9b      	ldrh	r3, [r3, r2]
   13ca8:	687a      	ldr	r2, [r7, #4]
   13caa:	0011      	movs	r1, r2
   13cac:	0018      	movs	r0, r3
   13cae:	4b1d      	ldr	r3, [pc, #116]	; (13d24 <set_gas_config+0xc8>)
   13cb0:	4798      	blx	r3
   13cb2:	0003      	movs	r3, r0
   13cb4:	001a      	movs	r2, r3
   13cb6:	2308      	movs	r3, #8
   13cb8:	18fb      	adds	r3, r7, r3
   13cba:	701a      	strb	r2, [r3, #0]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
   13cbc:	230c      	movs	r3, #12
   13cbe:	18fb      	adds	r3, r7, r3
   13cc0:	2264      	movs	r2, #100	; 0x64
   13cc2:	705a      	strb	r2, [r3, #1]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
   13cc4:	687b      	ldr	r3, [r7, #4]
   13cc6:	2242      	movs	r2, #66	; 0x42
   13cc8:	5a9b      	ldrh	r3, [r3, r2]
   13cca:	0018      	movs	r0, r3
   13ccc:	4b16      	ldr	r3, [pc, #88]	; (13d28 <set_gas_config+0xcc>)
   13cce:	4798      	blx	r3
   13cd0:	0003      	movs	r3, r0
   13cd2:	001a      	movs	r2, r3
   13cd4:	2308      	movs	r3, #8
   13cd6:	18fb      	adds	r3, r7, r3
   13cd8:	705a      	strb	r2, [r3, #1]
			dev->gas_sett.nb_conv = 0;
   13cda:	687b      	ldr	r3, [r7, #4]
   13cdc:	223c      	movs	r2, #60	; 0x3c
   13cde:	2100      	movs	r1, #0
   13ce0:	5499      	strb	r1, [r3, r2]
   13ce2:	e003      	b.n	13cec <set_gas_config+0x90>
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
   13ce4:	230f      	movs	r3, #15
   13ce6:	18fb      	adds	r3, r7, r3
   13ce8:	2201      	movs	r2, #1
   13cea:	701a      	strb	r2, [r3, #0]
		}
		if (rslt == BME680_OK)
   13cec:	230f      	movs	r3, #15
   13cee:	18fb      	adds	r3, r7, r3
   13cf0:	781b      	ldrb	r3, [r3, #0]
   13cf2:	b25b      	sxtb	r3, r3
   13cf4:	2b00      	cmp	r3, #0
   13cf6:	d10b      	bne.n	13d10 <set_gas_config+0xb4>
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
   13cf8:	230f      	movs	r3, #15
   13cfa:	18fc      	adds	r4, r7, r3
   13cfc:	687b      	ldr	r3, [r7, #4]
   13cfe:	2208      	movs	r2, #8
   13d00:	18b9      	adds	r1, r7, r2
   13d02:	220c      	movs	r2, #12
   13d04:	18b8      	adds	r0, r7, r2
   13d06:	2202      	movs	r2, #2
   13d08:	4d08      	ldr	r5, [pc, #32]	; (13d2c <set_gas_config+0xd0>)
   13d0a:	47a8      	blx	r5
   13d0c:	0003      	movs	r3, r0
   13d0e:	7023      	strb	r3, [r4, #0]
	}

	return rslt;
   13d10:	230f      	movs	r3, #15
   13d12:	18fb      	adds	r3, r7, r3
   13d14:	781b      	ldrb	r3, [r3, #0]
   13d16:	b25b      	sxtb	r3, r3
}
   13d18:	0018      	movs	r0, r3
   13d1a:	46bd      	mov	sp, r7
   13d1c:	b004      	add	sp, #16
   13d1e:	bdb0      	pop	{r4, r5, r7, pc}
   13d20:	0001482f 	.word	0x0001482f
   13d24:	00014285 	.word	0x00014285
   13d28:	00014391 	.word	0x00014391
   13d2c:	00012fa9 	.word	0x00012fa9

00013d30 <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
   13d30:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d32:	b091      	sub	sp, #68	; 0x44
   13d34:	af00      	add	r7, sp, #0
   13d36:	61f8      	str	r0, [r7, #28]
   13d38:	61b9      	str	r1, [r7, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
   13d3a:	69fb      	ldr	r3, [r7, #28]
   13d3c:	10da      	asrs	r2, r3, #3
   13d3e:	69bb      	ldr	r3, [r7, #24]
   13d40:	8adb      	ldrh	r3, [r3, #22]
   13d42:	005b      	lsls	r3, r3, #1
   13d44:	1ad3      	subs	r3, r2, r3
   13d46:	63bb      	str	r3, [r7, #56]	; 0x38
   13d48:	17db      	asrs	r3, r3, #31
   13d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
   13d4c:	69bb      	ldr	r3, [r7, #24]
   13d4e:	2218      	movs	r2, #24
   13d50:	5e9b      	ldrsh	r3, [r3, r2]
   13d52:	60bb      	str	r3, [r7, #8]
   13d54:	17db      	asrs	r3, r3, #31
   13d56:	60fb      	str	r3, [r7, #12]
   13d58:	4e30      	ldr	r6, [pc, #192]	; (13e1c <calc_temperature+0xec>)
   13d5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   13d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13d5e:	68b8      	ldr	r0, [r7, #8]
   13d60:	68f9      	ldr	r1, [r7, #12]
   13d62:	47b0      	blx	r6
   13d64:	0002      	movs	r2, r0
   13d66:	000b      	movs	r3, r1
   13d68:	0559      	lsls	r1, r3, #21
   13d6a:	0ad0      	lsrs	r0, r2, #11
   13d6c:	4301      	orrs	r1, r0
   13d6e:	6339      	str	r1, [r7, #48]	; 0x30
   13d70:	12db      	asrs	r3, r3, #11
   13d72:	637b      	str	r3, [r7, #52]	; 0x34
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   13d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13d76:	07db      	lsls	r3, r3, #31
   13d78:	6bba      	ldr	r2, [r7, #56]	; 0x38
   13d7a:	0854      	lsrs	r4, r2, #1
   13d7c:	431c      	orrs	r4, r3
   13d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13d80:	105d      	asrs	r5, r3, #1
   13d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13d84:	07db      	lsls	r3, r3, #31
   13d86:	6bba      	ldr	r2, [r7, #56]	; 0x38
   13d88:	0852      	lsrs	r2, r2, #1
   13d8a:	613a      	str	r2, [r7, #16]
   13d8c:	693a      	ldr	r2, [r7, #16]
   13d8e:	431a      	orrs	r2, r3
   13d90:	613a      	str	r2, [r7, #16]
   13d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13d94:	105b      	asrs	r3, r3, #1
   13d96:	617b      	str	r3, [r7, #20]
   13d98:	4e20      	ldr	r6, [pc, #128]	; (13e1c <calc_temperature+0xec>)
   13d9a:	693a      	ldr	r2, [r7, #16]
   13d9c:	697b      	ldr	r3, [r7, #20]
   13d9e:	0020      	movs	r0, r4
   13da0:	0029      	movs	r1, r5
   13da2:	47b0      	blx	r6
   13da4:	0003      	movs	r3, r0
   13da6:	000c      	movs	r4, r1
   13da8:	0522      	lsls	r2, r4, #20
   13daa:	0b19      	lsrs	r1, r3, #12
   13dac:	430a      	orrs	r2, r1
   13dae:	62ba      	str	r2, [r7, #40]	; 0x28
   13db0:	1323      	asrs	r3, r4, #12
   13db2:	62fb      	str	r3, [r7, #44]	; 0x2c
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
   13db4:	69bb      	ldr	r3, [r7, #24]
   13db6:	7e9b      	ldrb	r3, [r3, #26]
   13db8:	b25b      	sxtb	r3, r3
   13dba:	011b      	lsls	r3, r3, #4
   13dbc:	603b      	str	r3, [r7, #0]
   13dbe:	17db      	asrs	r3, r3, #31
   13dc0:	607b      	str	r3, [r7, #4]
   13dc2:	4c16      	ldr	r4, [pc, #88]	; (13e1c <calc_temperature+0xec>)
   13dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   13dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13dc8:	6838      	ldr	r0, [r7, #0]
   13dca:	6879      	ldr	r1, [r7, #4]
   13dcc:	47a0      	blx	r4
   13dce:	0003      	movs	r3, r0
   13dd0:	000c      	movs	r4, r1
   13dd2:	04a2      	lsls	r2, r4, #18
   13dd4:	0b99      	lsrs	r1, r3, #14
   13dd6:	430a      	orrs	r2, r1
   13dd8:	62ba      	str	r2, [r7, #40]	; 0x28
   13dda:	13a3      	asrs	r3, r4, #14
   13ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
	dev->calib.t_fine = (int32_t) (var2 + var3);
   13dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   13de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13de2:	18d3      	adds	r3, r2, r3
   13de4:	001a      	movs	r2, r3
   13de6:	69bb      	ldr	r3, [r7, #24]
   13de8:	631a      	str	r2, [r3, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
   13dea:	69bb      	ldr	r3, [r7, #24]
   13dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   13dee:	0013      	movs	r3, r2
   13df0:	009b      	lsls	r3, r3, #2
   13df2:	189b      	adds	r3, r3, r2
   13df4:	3380      	adds	r3, #128	; 0x80
   13df6:	121a      	asrs	r2, r3, #8
   13df8:	230e      	movs	r3, #14
   13dfa:	2118      	movs	r1, #24
   13dfc:	468c      	mov	ip, r1
   13dfe:	44bc      	add	ip, r7
   13e00:	4463      	add	r3, ip
   13e02:	801a      	strh	r2, [r3, #0]

	return calc_temp;
   13e04:	230e      	movs	r3, #14
   13e06:	2218      	movs	r2, #24
   13e08:	4694      	mov	ip, r2
   13e0a:	44bc      	add	ip, r7
   13e0c:	4463      	add	r3, ip
   13e0e:	2200      	movs	r2, #0
   13e10:	5e9b      	ldrsh	r3, [r3, r2]
}
   13e12:	0018      	movs	r0, r3
   13e14:	46bd      	mov	sp, r7
   13e16:	b011      	add	sp, #68	; 0x44
   13e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13e1a:	46c0      	nop			; (mov r8, r8)
   13e1c:	000351c5 	.word	0x000351c5

00013e20 <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
   13e20:	b580      	push	{r7, lr}
   13e22:	b086      	sub	sp, #24
   13e24:	af00      	add	r7, sp, #0
   13e26:	6078      	str	r0, [r7, #4]
   13e28:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
   13e2a:	683b      	ldr	r3, [r7, #0]
   13e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   13e2e:	105b      	asrs	r3, r3, #1
   13e30:	4a4d      	ldr	r2, [pc, #308]	; (13f68 <calc_pressure+0x148>)
   13e32:	4694      	mov	ip, r2
   13e34:	4463      	add	r3, ip
   13e36:	613b      	str	r3, [r7, #16]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   13e38:	693b      	ldr	r3, [r7, #16]
   13e3a:	109b      	asrs	r3, r3, #2
   13e3c:	693a      	ldr	r2, [r7, #16]
   13e3e:	1092      	asrs	r2, r2, #2
   13e40:	4353      	muls	r3, r2
   13e42:	12db      	asrs	r3, r3, #11
		(int32_t)dev->calib.par_p6) >> 2;
   13e44:	683a      	ldr	r2, [r7, #0]
   13e46:	2126      	movs	r1, #38	; 0x26
   13e48:	5652      	ldrsb	r2, [r2, r1]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   13e4a:	4353      	muls	r3, r2
   13e4c:	109b      	asrs	r3, r3, #2
   13e4e:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
   13e50:	683b      	ldr	r3, [r7, #0]
   13e52:	2224      	movs	r2, #36	; 0x24
   13e54:	5e9b      	ldrsh	r3, [r3, r2]
   13e56:	001a      	movs	r2, r3
   13e58:	693b      	ldr	r3, [r7, #16]
   13e5a:	4353      	muls	r3, r2
   13e5c:	005b      	lsls	r3, r3, #1
   13e5e:	68fa      	ldr	r2, [r7, #12]
   13e60:	18d3      	adds	r3, r2, r3
   13e62:	60fb      	str	r3, [r7, #12]
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
   13e64:	68fb      	ldr	r3, [r7, #12]
   13e66:	109a      	asrs	r2, r3, #2
   13e68:	683b      	ldr	r3, [r7, #0]
   13e6a:	2122      	movs	r1, #34	; 0x22
   13e6c:	5e5b      	ldrsh	r3, [r3, r1]
   13e6e:	041b      	lsls	r3, r3, #16
   13e70:	18d3      	adds	r3, r2, r3
   13e72:	60fb      	str	r3, [r7, #12]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   13e74:	693b      	ldr	r3, [r7, #16]
   13e76:	109b      	asrs	r3, r3, #2
   13e78:	693a      	ldr	r2, [r7, #16]
   13e7a:	1092      	asrs	r2, r2, #2
   13e7c:	4353      	muls	r3, r2
   13e7e:	135b      	asrs	r3, r3, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
   13e80:	683a      	ldr	r2, [r7, #0]
   13e82:	2120      	movs	r1, #32
   13e84:	5652      	ldrsb	r2, [r2, r1]
   13e86:	0152      	lsls	r2, r2, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   13e88:	4353      	muls	r3, r2
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
   13e8a:	10da      	asrs	r2, r3, #3
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
   13e8c:	683b      	ldr	r3, [r7, #0]
   13e8e:	211e      	movs	r1, #30
   13e90:	5e5b      	ldrsh	r3, [r3, r1]
   13e92:	0019      	movs	r1, r3
   13e94:	693b      	ldr	r3, [r7, #16]
   13e96:	434b      	muls	r3, r1
   13e98:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   13e9a:	18d3      	adds	r3, r2, r3
   13e9c:	613b      	str	r3, [r7, #16]
	var1 = var1 >> 18;
   13e9e:	693b      	ldr	r3, [r7, #16]
   13ea0:	149b      	asrs	r3, r3, #18
   13ea2:	613b      	str	r3, [r7, #16]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
   13ea4:	693b      	ldr	r3, [r7, #16]
   13ea6:	2280      	movs	r2, #128	; 0x80
   13ea8:	0212      	lsls	r2, r2, #8
   13eaa:	4694      	mov	ip, r2
   13eac:	4463      	add	r3, ip
   13eae:	683a      	ldr	r2, [r7, #0]
   13eb0:	8b92      	ldrh	r2, [r2, #28]
   13eb2:	4353      	muls	r3, r2
   13eb4:	13db      	asrs	r3, r3, #15
   13eb6:	613b      	str	r3, [r7, #16]
	pressure_comp = 1048576 - pres_adc;
   13eb8:	687b      	ldr	r3, [r7, #4]
   13eba:	2280      	movs	r2, #128	; 0x80
   13ebc:	0352      	lsls	r2, r2, #13
   13ebe:	1ad3      	subs	r3, r2, r3
   13ec0:	617b      	str	r3, [r7, #20]
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
   13ec2:	68fb      	ldr	r3, [r7, #12]
   13ec4:	131b      	asrs	r3, r3, #12
   13ec6:	697a      	ldr	r2, [r7, #20]
   13ec8:	1ad3      	subs	r3, r2, r3
   13eca:	001a      	movs	r2, r3
   13ecc:	4b27      	ldr	r3, [pc, #156]	; (13f6c <calc_pressure+0x14c>)
   13ece:	4353      	muls	r3, r2
   13ed0:	617b      	str	r3, [r7, #20]
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
   13ed2:	697b      	ldr	r3, [r7, #20]
   13ed4:	4a26      	ldr	r2, [pc, #152]	; (13f70 <calc_pressure+0x150>)
   13ed6:	4293      	cmp	r3, r2
   13ed8:	dd07      	ble.n	13eea <calc_pressure+0xca>
		pressure_comp = ((pressure_comp / var1) << 1);
   13eda:	4b26      	ldr	r3, [pc, #152]	; (13f74 <calc_pressure+0x154>)
   13edc:	6939      	ldr	r1, [r7, #16]
   13ede:	6978      	ldr	r0, [r7, #20]
   13ee0:	4798      	blx	r3
   13ee2:	0003      	movs	r3, r0
   13ee4:	005b      	lsls	r3, r3, #1
   13ee6:	617b      	str	r3, [r7, #20]
   13ee8:	e007      	b.n	13efa <calc_pressure+0xda>
	else
		pressure_comp = ((pressure_comp << 1) / var1);
   13eea:	697b      	ldr	r3, [r7, #20]
   13eec:	005a      	lsls	r2, r3, #1
   13eee:	4b21      	ldr	r3, [pc, #132]	; (13f74 <calc_pressure+0x154>)
   13ef0:	6939      	ldr	r1, [r7, #16]
   13ef2:	0010      	movs	r0, r2
   13ef4:	4798      	blx	r3
   13ef6:	0003      	movs	r3, r0
   13ef8:	617b      	str	r3, [r7, #20]
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   13efa:	683b      	ldr	r3, [r7, #0]
   13efc:	222a      	movs	r2, #42	; 0x2a
   13efe:	5e9b      	ldrsh	r3, [r3, r2]
   13f00:	0019      	movs	r1, r3
   13f02:	697b      	ldr	r3, [r7, #20]
   13f04:	10db      	asrs	r3, r3, #3
		(pressure_comp >> 3)) >> 13)) >> 12;
   13f06:	697a      	ldr	r2, [r7, #20]
   13f08:	10d2      	asrs	r2, r2, #3
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   13f0a:	4353      	muls	r3, r2
		(pressure_comp >> 3)) >> 13)) >> 12;
   13f0c:	135b      	asrs	r3, r3, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
   13f0e:	434b      	muls	r3, r1
   13f10:	131b      	asrs	r3, r3, #12
   13f12:	613b      	str	r3, [r7, #16]
	var2 = ((int32_t)(pressure_comp >> 2) *
   13f14:	697b      	ldr	r3, [r7, #20]
   13f16:	109b      	asrs	r3, r3, #2
		(int32_t)dev->calib.par_p8) >> 13;
   13f18:	683a      	ldr	r2, [r7, #0]
   13f1a:	2128      	movs	r1, #40	; 0x28
   13f1c:	5e52      	ldrsh	r2, [r2, r1]
	var2 = ((int32_t)(pressure_comp >> 2) *
   13f1e:	4353      	muls	r3, r2
   13f20:	135b      	asrs	r3, r3, #13
   13f22:	60fb      	str	r3, [r7, #12]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
   13f24:	697b      	ldr	r3, [r7, #20]
   13f26:	121b      	asrs	r3, r3, #8
   13f28:	697a      	ldr	r2, [r7, #20]
   13f2a:	1212      	asrs	r2, r2, #8
   13f2c:	4353      	muls	r3, r2
		(int32_t)(pressure_comp >> 8) *
   13f2e:	697a      	ldr	r2, [r7, #20]
   13f30:	1212      	asrs	r2, r2, #8
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
   13f32:	4353      	muls	r3, r2
		(int32_t)dev->calib.par_p10) >> 17;
   13f34:	683a      	ldr	r2, [r7, #0]
   13f36:	212c      	movs	r1, #44	; 0x2c
   13f38:	5c52      	ldrb	r2, [r2, r1]
		(int32_t)(pressure_comp >> 8) *
   13f3a:	4353      	muls	r3, r2
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
   13f3c:	145b      	asrs	r3, r3, #17
   13f3e:	60bb      	str	r3, [r7, #8]

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   13f40:	693a      	ldr	r2, [r7, #16]
   13f42:	68fb      	ldr	r3, [r7, #12]
   13f44:	18d2      	adds	r2, r2, r3
   13f46:	68bb      	ldr	r3, [r7, #8]
   13f48:	18d2      	adds	r2, r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   13f4a:	683b      	ldr	r3, [r7, #0]
   13f4c:	2127      	movs	r1, #39	; 0x27
   13f4e:	565b      	ldrsb	r3, [r3, r1]
   13f50:	01db      	lsls	r3, r3, #7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   13f52:	18d3      	adds	r3, r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
   13f54:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
   13f56:	697a      	ldr	r2, [r7, #20]
   13f58:	18d3      	adds	r3, r2, r3
   13f5a:	617b      	str	r3, [r7, #20]

	return (uint32_t)pressure_comp;
   13f5c:	697b      	ldr	r3, [r7, #20]

}
   13f5e:	0018      	movs	r0, r3
   13f60:	46bd      	mov	sp, r7
   13f62:	b006      	add	sp, #24
   13f64:	bd80      	pop	{r7, pc}
   13f66:	46c0      	nop			; (mov r8, r8)
   13f68:	ffff0600 	.word	0xffff0600
   13f6c:	00000c35 	.word	0x00000c35
   13f70:	3fffffff 	.word	0x3fffffff
   13f74:	00034f29 	.word	0x00034f29

00013f78 <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
   13f78:	b5b0      	push	{r4, r5, r7, lr}
   13f7a:	b08a      	sub	sp, #40	; 0x28
   13f7c:	af00      	add	r7, sp, #0
   13f7e:	0002      	movs	r2, r0
   13f80:	6039      	str	r1, [r7, #0]
   13f82:	1dbb      	adds	r3, r7, #6
   13f84:	801a      	strh	r2, [r3, #0]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
   13f86:	683b      	ldr	r3, [r7, #0]
   13f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   13f8a:	0013      	movs	r3, r2
   13f8c:	009b      	lsls	r3, r3, #2
   13f8e:	189b      	adds	r3, r3, r2
   13f90:	3380      	adds	r3, #128	; 0x80
   13f92:	121b      	asrs	r3, r3, #8
   13f94:	623b      	str	r3, [r7, #32]
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
   13f96:	1dbb      	adds	r3, r7, #6
   13f98:	881a      	ldrh	r2, [r3, #0]
   13f9a:	683b      	ldr	r3, [r7, #0]
   13f9c:	891b      	ldrh	r3, [r3, #8]
   13f9e:	011b      	lsls	r3, r3, #4
   13fa0:	1ad4      	subs	r4, r2, r3
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
   13fa2:	683b      	ldr	r3, [r7, #0]
   13fa4:	7b1b      	ldrb	r3, [r3, #12]
   13fa6:	b25b      	sxtb	r3, r3
   13fa8:	001a      	movs	r2, r3
   13faa:	6a3b      	ldr	r3, [r7, #32]
   13fac:	435a      	muls	r2, r3
   13fae:	4b38      	ldr	r3, [pc, #224]	; (14090 <calc_humidity+0x118>)
   13fb0:	2164      	movs	r1, #100	; 0x64
   13fb2:	0010      	movs	r0, r2
   13fb4:	4798      	blx	r3
   13fb6:	0003      	movs	r3, r0
   13fb8:	105b      	asrs	r3, r3, #1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
   13fba:	1ae3      	subs	r3, r4, r3
   13fbc:	61fb      	str	r3, [r7, #28]
	var2 = ((int32_t) dev->calib.par_h2
   13fbe:	683b      	ldr	r3, [r7, #0]
   13fc0:	895b      	ldrh	r3, [r3, #10]
   13fc2:	001c      	movs	r4, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   13fc4:	683b      	ldr	r3, [r7, #0]
   13fc6:	7b5b      	ldrb	r3, [r3, #13]
   13fc8:	b25b      	sxtb	r3, r3
   13fca:	001a      	movs	r2, r3
   13fcc:	6a3b      	ldr	r3, [r7, #32]
   13fce:	435a      	muls	r2, r3
   13fd0:	4b2f      	ldr	r3, [pc, #188]	; (14090 <calc_humidity+0x118>)
   13fd2:	2164      	movs	r1, #100	; 0x64
   13fd4:	0010      	movs	r0, r2
   13fd6:	4798      	blx	r3
   13fd8:	0003      	movs	r3, r0
   13fda:	001d      	movs	r5, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   13fdc:	683b      	ldr	r3, [r7, #0]
   13fde:	7b9b      	ldrb	r3, [r3, #14]
   13fe0:	b25b      	sxtb	r3, r3
   13fe2:	001a      	movs	r2, r3
   13fe4:	6a3b      	ldr	r3, [r7, #32]
   13fe6:	435a      	muls	r2, r3
   13fe8:	4b29      	ldr	r3, [pc, #164]	; (14090 <calc_humidity+0x118>)
   13fea:	2164      	movs	r1, #100	; 0x64
   13fec:	0010      	movs	r0, r2
   13fee:	4798      	blx	r3
   13ff0:	0003      	movs	r3, r0
   13ff2:	001a      	movs	r2, r3
   13ff4:	6a3b      	ldr	r3, [r7, #32]
   13ff6:	4353      	muls	r3, r2
   13ff8:	119a      	asrs	r2, r3, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
   13ffa:	4b25      	ldr	r3, [pc, #148]	; (14090 <calc_humidity+0x118>)
   13ffc:	2164      	movs	r1, #100	; 0x64
   13ffe:	0010      	movs	r0, r2
   14000:	4798      	blx	r3
   14002:	0003      	movs	r3, r0
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
   14004:	18eb      	adds	r3, r5, r3
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
   14006:	2280      	movs	r2, #128	; 0x80
   14008:	01d2      	lsls	r2, r2, #7
   1400a:	4694      	mov	ip, r2
   1400c:	4463      	add	r3, ip
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
   1400e:	4363      	muls	r3, r4
	var2 = ((int32_t) dev->calib.par_h2
   14010:	129b      	asrs	r3, r3, #10
   14012:	61bb      	str	r3, [r7, #24]
	var3 = var1 * var2;
   14014:	69fb      	ldr	r3, [r7, #28]
   14016:	69ba      	ldr	r2, [r7, #24]
   14018:	4353      	muls	r3, r2
   1401a:	617b      	str	r3, [r7, #20]
	var4 = (int32_t) dev->calib.par_h6 << 7;
   1401c:	683b      	ldr	r3, [r7, #0]
   1401e:	7bdb      	ldrb	r3, [r3, #15]
   14020:	01db      	lsls	r3, r3, #7
   14022:	613b      	str	r3, [r7, #16]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
   14024:	683b      	ldr	r3, [r7, #0]
   14026:	7c1b      	ldrb	r3, [r3, #16]
   14028:	b25b      	sxtb	r3, r3
   1402a:	001a      	movs	r2, r3
   1402c:	6a3b      	ldr	r3, [r7, #32]
   1402e:	435a      	muls	r2, r3
   14030:	4b17      	ldr	r3, [pc, #92]	; (14090 <calc_humidity+0x118>)
   14032:	2164      	movs	r1, #100	; 0x64
   14034:	0010      	movs	r0, r2
   14036:	4798      	blx	r3
   14038:	0003      	movs	r3, r0
   1403a:	001a      	movs	r2, r3
   1403c:	693b      	ldr	r3, [r7, #16]
   1403e:	18d3      	adds	r3, r2, r3
   14040:	111b      	asrs	r3, r3, #4
   14042:	613b      	str	r3, [r7, #16]
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
   14044:	697b      	ldr	r3, [r7, #20]
   14046:	139b      	asrs	r3, r3, #14
   14048:	697a      	ldr	r2, [r7, #20]
   1404a:	1392      	asrs	r2, r2, #14
   1404c:	4353      	muls	r3, r2
   1404e:	129b      	asrs	r3, r3, #10
   14050:	60fb      	str	r3, [r7, #12]
	var6 = (var4 * var5) >> 1;
   14052:	693b      	ldr	r3, [r7, #16]
   14054:	68fa      	ldr	r2, [r7, #12]
   14056:	4353      	muls	r3, r2
   14058:	105b      	asrs	r3, r3, #1
   1405a:	60bb      	str	r3, [r7, #8]
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
   1405c:	697a      	ldr	r2, [r7, #20]
   1405e:	68bb      	ldr	r3, [r7, #8]
   14060:	18d3      	adds	r3, r2, r3
   14062:	129b      	asrs	r3, r3, #10
   14064:	22fa      	movs	r2, #250	; 0xfa
   14066:	0092      	lsls	r2, r2, #2
   14068:	4353      	muls	r3, r2
   1406a:	131b      	asrs	r3, r3, #12
   1406c:	627b      	str	r3, [r7, #36]	; 0x24

	if (calc_hum > 100000) /* Cap at 100%rH */
   1406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14070:	4a08      	ldr	r2, [pc, #32]	; (14094 <calc_humidity+0x11c>)
   14072:	4293      	cmp	r3, r2
   14074:	dd02      	ble.n	1407c <calc_humidity+0x104>
		calc_hum = 100000;
   14076:	4b07      	ldr	r3, [pc, #28]	; (14094 <calc_humidity+0x11c>)
   14078:	627b      	str	r3, [r7, #36]	; 0x24
   1407a:	e004      	b.n	14086 <calc_humidity+0x10e>
	else if (calc_hum < 0)
   1407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1407e:	2b00      	cmp	r3, #0
   14080:	da01      	bge.n	14086 <calc_humidity+0x10e>
		calc_hum = 0;
   14082:	2300      	movs	r3, #0
   14084:	627b      	str	r3, [r7, #36]	; 0x24

	return (uint32_t) calc_hum;
   14086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   14088:	0018      	movs	r0, r3
   1408a:	46bd      	mov	sp, r7
   1408c:	b00a      	add	sp, #40	; 0x28
   1408e:	bdb0      	pop	{r4, r5, r7, pc}
   14090:	00034f29 	.word	0x00034f29
   14094:	000186a0 	.word	0x000186a0

00014098 <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
   14098:	b5f0      	push	{r4, r5, r6, r7, lr}
   1409a:	b0b7      	sub	sp, #220	; 0xdc
   1409c:	af00      	add	r7, sp, #0
   1409e:	0003      	movs	r3, r0
   140a0:	633a      	str	r2, [r7, #48]	; 0x30
   140a2:	2236      	movs	r2, #54	; 0x36
   140a4:	18ba      	adds	r2, r7, r2
   140a6:	8013      	strh	r3, [r2, #0]
   140a8:	2335      	movs	r3, #53	; 0x35
   140aa:	18fa      	adds	r2, r7, r3
   140ac:	1c0b      	adds	r3, r1, #0
   140ae:	7013      	strb	r3, [r2, #0]
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
   140b0:	234c      	movs	r3, #76	; 0x4c
   140b2:	2230      	movs	r2, #48	; 0x30
   140b4:	18ba      	adds	r2, r7, r2
   140b6:	18d2      	adds	r2, r2, r3
   140b8:	4b6c      	ldr	r3, [pc, #432]	; (1426c <calc_gas_resistance+0x1d4>)
   140ba:	0010      	movs	r0, r2
   140bc:	0019      	movs	r1, r3
   140be:	2340      	movs	r3, #64	; 0x40
   140c0:	001a      	movs	r2, r3
   140c2:	4b6b      	ldr	r3, [pc, #428]	; (14270 <calc_gas_resistance+0x1d8>)
   140c4:	4798      	blx	r3
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
   140c6:	230c      	movs	r3, #12
   140c8:	2230      	movs	r2, #48	; 0x30
   140ca:	18ba      	adds	r2, r7, r2
   140cc:	18d2      	adds	r2, r2, r3
   140ce:	4b69      	ldr	r3, [pc, #420]	; (14274 <calc_gas_resistance+0x1dc>)
   140d0:	0010      	movs	r0, r2
   140d2:	0019      	movs	r1, r3
   140d4:	2340      	movs	r3, #64	; 0x40
   140d6:	001a      	movs	r2, r3
   140d8:	4b65      	ldr	r3, [pc, #404]	; (14270 <calc_gas_resistance+0x1d8>)
   140da:	4798      	blx	r3
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   140dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   140de:	2336      	movs	r3, #54	; 0x36
   140e0:	56d3      	ldrsb	r3, [r2, r3]
   140e2:	61bb      	str	r3, [r7, #24]
   140e4:	17db      	asrs	r3, r3, #31
   140e6:	61fb      	str	r3, [r7, #28]
   140e8:	69b8      	ldr	r0, [r7, #24]
   140ea:	69f9      	ldr	r1, [r7, #28]
   140ec:	0003      	movs	r3, r0
   140ee:	000c      	movs	r4, r1
   140f0:	0f9a      	lsrs	r2, r3, #30
   140f2:	00a6      	lsls	r6, r4, #2
   140f4:	4316      	orrs	r6, r2
   140f6:	009d      	lsls	r5, r3, #2
   140f8:	0003      	movs	r3, r0
   140fa:	000c      	movs	r4, r1
   140fc:	195b      	adds	r3, r3, r5
   140fe:	4174      	adcs	r4, r6
   14100:	495d      	ldr	r1, [pc, #372]	; (14278 <calc_gas_resistance+0x1e0>)
   14102:	2200      	movs	r2, #0
   14104:	185b      	adds	r3, r3, r1
   14106:	4154      	adcs	r4, r2
   14108:	0018      	movs	r0, r3
   1410a:	0021      	movs	r1, r4
		((int64_t) lookupTable1[gas_range])) >> 16;
   1410c:	2335      	movs	r3, #53	; 0x35
   1410e:	18fb      	adds	r3, r7, r3
   14110:	781b      	ldrb	r3, [r3, #0]
   14112:	224c      	movs	r2, #76	; 0x4c
   14114:	2430      	movs	r4, #48	; 0x30
   14116:	46a4      	mov	ip, r4
   14118:	44bc      	add	ip, r7
   1411a:	4462      	add	r2, ip
   1411c:	009b      	lsls	r3, r3, #2
   1411e:	589b      	ldr	r3, [r3, r2]
   14120:	613b      	str	r3, [r7, #16]
   14122:	2300      	movs	r3, #0
   14124:	617b      	str	r3, [r7, #20]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
   14126:	4c55      	ldr	r4, [pc, #340]	; (1427c <calc_gas_resistance+0x1e4>)
   14128:	693a      	ldr	r2, [r7, #16]
   1412a:	697b      	ldr	r3, [r7, #20]
   1412c:	47a0      	blx	r4
   1412e:	0003      	movs	r3, r0
   14130:	000c      	movs	r4, r1
   14132:	0422      	lsls	r2, r4, #16
   14134:	0c19      	lsrs	r1, r3, #16
   14136:	430a      	orrs	r2, r1
   14138:	21a0      	movs	r1, #160	; 0xa0
   1413a:	2030      	movs	r0, #48	; 0x30
   1413c:	4684      	mov	ip, r0
   1413e:	44bc      	add	ip, r7
   14140:	4461      	add	r1, ip
   14142:	600a      	str	r2, [r1, #0]
   14144:	1423      	asrs	r3, r4, #16
   14146:	22a4      	movs	r2, #164	; 0xa4
   14148:	2130      	movs	r1, #48	; 0x30
   1414a:	468c      	mov	ip, r1
   1414c:	44bc      	add	ip, r7
   1414e:	4462      	add	r2, ip
   14150:	6013      	str	r3, [r2, #0]
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
   14152:	2336      	movs	r3, #54	; 0x36
   14154:	18fb      	adds	r3, r7, r3
   14156:	881b      	ldrh	r3, [r3, #0]
   14158:	b29b      	uxth	r3, r3
   1415a:	60bb      	str	r3, [r7, #8]
   1415c:	2300      	movs	r3, #0
   1415e:	60fb      	str	r3, [r7, #12]
   14160:	68b9      	ldr	r1, [r7, #8]
   14162:	68fa      	ldr	r2, [r7, #12]
   14164:	000b      	movs	r3, r1
   14166:	0c5b      	lsrs	r3, r3, #17
   14168:	0010      	movs	r0, r2
   1416a:	03c0      	lsls	r0, r0, #15
   1416c:	62f8      	str	r0, [r7, #44]	; 0x2c
   1416e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   14170:	4318      	orrs	r0, r3
   14172:	62f8      	str	r0, [r7, #44]	; 0x2c
   14174:	000b      	movs	r3, r1
   14176:	03db      	lsls	r3, r3, #15
   14178:	62bb      	str	r3, [r7, #40]	; 0x28
   1417a:	23ff      	movs	r3, #255	; 0xff
   1417c:	061b      	lsls	r3, r3, #24
   1417e:	2401      	movs	r4, #1
   14180:	4264      	negs	r4, r4
   14182:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   14184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   14186:	18c9      	adds	r1, r1, r3
   14188:	4162      	adcs	r2, r4
   1418a:	23a0      	movs	r3, #160	; 0xa0
   1418c:	2030      	movs	r0, #48	; 0x30
   1418e:	4684      	mov	ip, r0
   14190:	44bc      	add	ip, r7
   14192:	4463      	add	r3, ip
   14194:	685c      	ldr	r4, [r3, #4]
   14196:	681b      	ldr	r3, [r3, #0]
   14198:	185b      	adds	r3, r3, r1
   1419a:	4154      	adcs	r4, r2
   1419c:	2298      	movs	r2, #152	; 0x98
   1419e:	2130      	movs	r1, #48	; 0x30
   141a0:	468c      	mov	ip, r1
   141a2:	44bc      	add	ip, r7
   141a4:	4462      	add	r2, ip
   141a6:	6013      	str	r3, [r2, #0]
   141a8:	6054      	str	r4, [r2, #4]
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
   141aa:	2335      	movs	r3, #53	; 0x35
   141ac:	18fb      	adds	r3, r7, r3
   141ae:	781a      	ldrb	r2, [r3, #0]
   141b0:	230c      	movs	r3, #12
   141b2:	2130      	movs	r1, #48	; 0x30
   141b4:	468c      	mov	ip, r1
   141b6:	44bc      	add	ip, r7
   141b8:	4463      	add	r3, ip
   141ba:	0092      	lsls	r2, r2, #2
   141bc:	58d3      	ldr	r3, [r2, r3]
   141be:	603b      	str	r3, [r7, #0]
   141c0:	2300      	movs	r3, #0
   141c2:	607b      	str	r3, [r7, #4]
   141c4:	4c2d      	ldr	r4, [pc, #180]	; (1427c <calc_gas_resistance+0x1e4>)
   141c6:	23a0      	movs	r3, #160	; 0xa0
   141c8:	2230      	movs	r2, #48	; 0x30
   141ca:	4694      	mov	ip, r2
   141cc:	44bc      	add	ip, r7
   141ce:	4463      	add	r3, ip
   141d0:	681a      	ldr	r2, [r3, #0]
   141d2:	685b      	ldr	r3, [r3, #4]
   141d4:	6838      	ldr	r0, [r7, #0]
   141d6:	6879      	ldr	r1, [r7, #4]
   141d8:	47a0      	blx	r4
   141da:	0003      	movs	r3, r0
   141dc:	000c      	movs	r4, r1
   141de:	05e2      	lsls	r2, r4, #23
   141e0:	0a59      	lsrs	r1, r3, #9
   141e2:	430a      	orrs	r2, r1
   141e4:	2190      	movs	r1, #144	; 0x90
   141e6:	2030      	movs	r0, #48	; 0x30
   141e8:	4684      	mov	ip, r0
   141ea:	44bc      	add	ip, r7
   141ec:	4461      	add	r1, ip
   141ee:	600a      	str	r2, [r1, #0]
   141f0:	1263      	asrs	r3, r4, #9
   141f2:	2294      	movs	r2, #148	; 0x94
   141f4:	2130      	movs	r1, #48	; 0x30
   141f6:	468c      	mov	ip, r1
   141f8:	44bc      	add	ip, r7
   141fa:	4462      	add	r2, ip
   141fc:	6013      	str	r3, [r2, #0]
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
   141fe:	2398      	movs	r3, #152	; 0x98
   14200:	2230      	movs	r2, #48	; 0x30
   14202:	4694      	mov	ip, r2
   14204:	44bc      	add	ip, r7
   14206:	4463      	add	r3, ip
   14208:	685c      	ldr	r4, [r3, #4]
   1420a:	681b      	ldr	r3, [r3, #0]
   1420c:	07e2      	lsls	r2, r4, #31
   1420e:	0859      	lsrs	r1, r3, #1
   14210:	6239      	str	r1, [r7, #32]
   14212:	6a39      	ldr	r1, [r7, #32]
   14214:	4311      	orrs	r1, r2
   14216:	6239      	str	r1, [r7, #32]
   14218:	1063      	asrs	r3, r4, #1
   1421a:	627b      	str	r3, [r7, #36]	; 0x24
   1421c:	2390      	movs	r3, #144	; 0x90
   1421e:	2230      	movs	r2, #48	; 0x30
   14220:	4694      	mov	ip, r2
   14222:	44bc      	add	ip, r7
   14224:	4463      	add	r3, ip
   14226:	685c      	ldr	r4, [r3, #4]
   14228:	681b      	ldr	r3, [r3, #0]
   1422a:	6a38      	ldr	r0, [r7, #32]
   1422c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1422e:	18c0      	adds	r0, r0, r3
   14230:	4161      	adcs	r1, r4
   14232:	2398      	movs	r3, #152	; 0x98
   14234:	2230      	movs	r2, #48	; 0x30
   14236:	4694      	mov	ip, r2
   14238:	44bc      	add	ip, r7
   1423a:	4463      	add	r3, ip
   1423c:	685c      	ldr	r4, [r3, #4]
   1423e:	681b      	ldr	r3, [r3, #0]
   14240:	4d0f      	ldr	r5, [pc, #60]	; (14280 <calc_gas_resistance+0x1e8>)
   14242:	001a      	movs	r2, r3
   14244:	0023      	movs	r3, r4
   14246:	47a8      	blx	r5
   14248:	0003      	movs	r3, r0
   1424a:	000c      	movs	r4, r1
   1424c:	228c      	movs	r2, #140	; 0x8c
   1424e:	2130      	movs	r1, #48	; 0x30
   14250:	468c      	mov	ip, r1
   14252:	44bc      	add	ip, r7
   14254:	4462      	add	r2, ip
   14256:	6013      	str	r3, [r2, #0]

	return calc_gas_res;
   14258:	238c      	movs	r3, #140	; 0x8c
   1425a:	2230      	movs	r2, #48	; 0x30
   1425c:	4694      	mov	ip, r2
   1425e:	44bc      	add	ip, r7
   14260:	4463      	add	r3, ip
   14262:	681b      	ldr	r3, [r3, #0]
}
   14264:	0018      	movs	r0, r3
   14266:	46bd      	mov	sp, r7
   14268:	b037      	add	sp, #220	; 0xdc
   1426a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1426c:	00038d30 	.word	0x00038d30
   14270:	00037915 	.word	0x00037915
   14274:	00038d70 	.word	0x00038d70
   14278:	0000053c 	.word	0x0000053c
   1427c:	000351c5 	.word	0x000351c5
   14280:	0003517d 	.word	0x0003517d

00014284 <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
   14284:	b590      	push	{r4, r7, lr}
   14286:	b08b      	sub	sp, #44	; 0x2c
   14288:	af00      	add	r7, sp, #0
   1428a:	0002      	movs	r2, r0
   1428c:	6039      	str	r1, [r7, #0]
   1428e:	1dbb      	adds	r3, r7, #6
   14290:	801a      	strh	r2, [r3, #0]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
   14292:	1dbb      	adds	r3, r7, #6
   14294:	881a      	ldrh	r2, [r3, #0]
   14296:	23c8      	movs	r3, #200	; 0xc8
   14298:	005b      	lsls	r3, r3, #1
   1429a:	429a      	cmp	r2, r3
   1429c:	d903      	bls.n	142a6 <calc_heater_res+0x22>
		temp = 400;
   1429e:	1dbb      	adds	r3, r7, #6
   142a0:	22c8      	movs	r2, #200	; 0xc8
   142a2:	0052      	lsls	r2, r2, #1
   142a4:	801a      	strh	r2, [r3, #0]

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
   142a6:	683b      	ldr	r3, [r7, #0]
   142a8:	791b      	ldrb	r3, [r3, #4]
   142aa:	b25b      	sxtb	r3, r3
   142ac:	001a      	movs	r2, r3
   142ae:	683b      	ldr	r3, [r7, #0]
   142b0:	7d1b      	ldrb	r3, [r3, #20]
   142b2:	b25b      	sxtb	r3, r3
   142b4:	4353      	muls	r3, r2
   142b6:	0018      	movs	r0, r3
   142b8:	4b33      	ldr	r3, [pc, #204]	; (14388 <calc_heater_res+0x104>)
   142ba:	22fa      	movs	r2, #250	; 0xfa
   142bc:	0091      	lsls	r1, r2, #2
   142be:	4798      	blx	r3
   142c0:	0003      	movs	r3, r0
   142c2:	021b      	lsls	r3, r3, #8
   142c4:	627b      	str	r3, [r7, #36]	; 0x24
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
   142c6:	683b      	ldr	r3, [r7, #0]
   142c8:	7c5b      	ldrb	r3, [r3, #17]
   142ca:	b25b      	sxtb	r3, r3
   142cc:	22c4      	movs	r2, #196	; 0xc4
   142ce:	0092      	lsls	r2, r2, #2
   142d0:	189c      	adds	r4, r3, r2
   142d2:	683b      	ldr	r3, [r7, #0]
   142d4:	2212      	movs	r2, #18
   142d6:	5e9b      	ldrsh	r3, [r3, r2]
   142d8:	4a2c      	ldr	r2, [pc, #176]	; (1438c <calc_heater_res+0x108>)
   142da:	4694      	mov	ip, r2
   142dc:	4463      	add	r3, ip
   142de:	1dba      	adds	r2, r7, #6
   142e0:	8812      	ldrh	r2, [r2, #0]
   142e2:	435a      	muls	r2, r3
   142e4:	0013      	movs	r3, r2
   142e6:	009b      	lsls	r3, r3, #2
   142e8:	189a      	adds	r2, r3, r2
   142ea:	4b27      	ldr	r3, [pc, #156]	; (14388 <calc_heater_res+0x104>)
   142ec:	2164      	movs	r1, #100	; 0x64
   142ee:	0010      	movs	r0, r2
   142f0:	4798      	blx	r3
   142f2:	0003      	movs	r3, r0
   142f4:	22c8      	movs	r2, #200	; 0xc8
   142f6:	0392      	lsls	r2, r2, #14
   142f8:	189a      	adds	r2, r3, r2
   142fa:	4b23      	ldr	r3, [pc, #140]	; (14388 <calc_heater_res+0x104>)
   142fc:	210a      	movs	r1, #10
   142fe:	0010      	movs	r0, r2
   14300:	4798      	blx	r3
   14302:	0003      	movs	r3, r0
   14304:	4363      	muls	r3, r4
   14306:	623b      	str	r3, [r7, #32]
	var3 = var1 + (var2 / 2);
   14308:	6a3b      	ldr	r3, [r7, #32]
   1430a:	2b00      	cmp	r3, #0
   1430c:	da00      	bge.n	14310 <calc_heater_res+0x8c>
   1430e:	3301      	adds	r3, #1
   14310:	105b      	asrs	r3, r3, #1
   14312:	001a      	movs	r2, r3
   14314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14316:	18d3      	adds	r3, r2, r3
   14318:	61fb      	str	r3, [r7, #28]
	var4 = (var3 / (dev->calib.res_heat_range + 4));
   1431a:	683b      	ldr	r3, [r7, #0]
   1431c:	2234      	movs	r2, #52	; 0x34
   1431e:	5c9b      	ldrb	r3, [r3, r2]
   14320:	1d1a      	adds	r2, r3, #4
   14322:	4b19      	ldr	r3, [pc, #100]	; (14388 <calc_heater_res+0x104>)
   14324:	0011      	movs	r1, r2
   14326:	69f8      	ldr	r0, [r7, #28]
   14328:	4798      	blx	r3
   1432a:	0003      	movs	r3, r0
   1432c:	61bb      	str	r3, [r7, #24]
	var5 = (131 * dev->calib.res_heat_val) + 65536;
   1432e:	683b      	ldr	r3, [r7, #0]
   14330:	2235      	movs	r2, #53	; 0x35
   14332:	569b      	ldrsb	r3, [r3, r2]
   14334:	001a      	movs	r2, r3
   14336:	0013      	movs	r3, r2
   14338:	019b      	lsls	r3, r3, #6
   1433a:	189b      	adds	r3, r3, r2
   1433c:	005b      	lsls	r3, r3, #1
   1433e:	189b      	adds	r3, r3, r2
   14340:	2280      	movs	r2, #128	; 0x80
   14342:	0252      	lsls	r2, r2, #9
   14344:	4694      	mov	ip, r2
   14346:	4463      	add	r3, ip
   14348:	617b      	str	r3, [r7, #20]
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
   1434a:	4b0f      	ldr	r3, [pc, #60]	; (14388 <calc_heater_res+0x104>)
   1434c:	6979      	ldr	r1, [r7, #20]
   1434e:	69b8      	ldr	r0, [r7, #24]
   14350:	4798      	blx	r3
   14352:	0003      	movs	r3, r0
   14354:	3bfa      	subs	r3, #250	; 0xfa
   14356:	001a      	movs	r2, r3
   14358:	0013      	movs	r3, r2
   1435a:	011b      	lsls	r3, r3, #4
   1435c:	189b      	adds	r3, r3, r2
   1435e:	005b      	lsls	r3, r3, #1
   14360:	613b      	str	r3, [r7, #16]
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
   14362:	693b      	ldr	r3, [r7, #16]
   14364:	3332      	adds	r3, #50	; 0x32
   14366:	001a      	movs	r2, r3
   14368:	4b07      	ldr	r3, [pc, #28]	; (14388 <calc_heater_res+0x104>)
   1436a:	2164      	movs	r1, #100	; 0x64
   1436c:	0010      	movs	r0, r2
   1436e:	4798      	blx	r3
   14370:	0003      	movs	r3, r0
   14372:	001a      	movs	r2, r3
   14374:	230f      	movs	r3, #15
   14376:	18fb      	adds	r3, r7, r3
   14378:	701a      	strb	r2, [r3, #0]

	return heatr_res;
   1437a:	230f      	movs	r3, #15
   1437c:	18fb      	adds	r3, r7, r3
   1437e:	781b      	ldrb	r3, [r3, #0]
}
   14380:	0018      	movs	r0, r3
   14382:	46bd      	mov	sp, r7
   14384:	b00b      	add	sp, #44	; 0x2c
   14386:	bd90      	pop	{r4, r7, pc}
   14388:	00034f29 	.word	0x00034f29
   1438c:	00025999 	.word	0x00025999

00014390 <calc_heater_dur>:

/*!
 * @brief This internal API is used to calculate the Heat duration value.
 */
static uint8_t calc_heater_dur(uint16_t dur)
{
   14390:	b580      	push	{r7, lr}
   14392:	b084      	sub	sp, #16
   14394:	af00      	add	r7, sp, #0
   14396:	0002      	movs	r2, r0
   14398:	1dbb      	adds	r3, r7, #6
   1439a:	801a      	strh	r2, [r3, #0]
	uint8_t factor = 0;
   1439c:	230f      	movs	r3, #15
   1439e:	18fb      	adds	r3, r7, r3
   143a0:	2200      	movs	r2, #0
   143a2:	701a      	strb	r2, [r3, #0]
	uint8_t durval;

	if (dur >= 0xfc0) {
   143a4:	1dbb      	adds	r3, r7, #6
   143a6:	881b      	ldrh	r3, [r3, #0]
   143a8:	4a15      	ldr	r2, [pc, #84]	; (14400 <calc_heater_dur+0x70>)
   143aa:	4293      	cmp	r3, r2
   143ac:	d910      	bls.n	143d0 <calc_heater_dur+0x40>
		durval = 0xff; /* Max duration*/
   143ae:	230e      	movs	r3, #14
   143b0:	18fb      	adds	r3, r7, r3
   143b2:	22ff      	movs	r2, #255	; 0xff
   143b4:	701a      	strb	r2, [r3, #0]
   143b6:	e01b      	b.n	143f0 <calc_heater_dur+0x60>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
   143b8:	1dbb      	adds	r3, r7, #6
   143ba:	1dba      	adds	r2, r7, #6
   143bc:	8812      	ldrh	r2, [r2, #0]
   143be:	0892      	lsrs	r2, r2, #2
   143c0:	801a      	strh	r2, [r3, #0]
			factor += 1;
   143c2:	230f      	movs	r3, #15
   143c4:	18fb      	adds	r3, r7, r3
   143c6:	220f      	movs	r2, #15
   143c8:	18ba      	adds	r2, r7, r2
   143ca:	7812      	ldrb	r2, [r2, #0]
   143cc:	3201      	adds	r2, #1
   143ce:	701a      	strb	r2, [r3, #0]
		while (dur > 0x3F) {
   143d0:	1dbb      	adds	r3, r7, #6
   143d2:	881b      	ldrh	r3, [r3, #0]
   143d4:	2b3f      	cmp	r3, #63	; 0x3f
   143d6:	d8ef      	bhi.n	143b8 <calc_heater_dur+0x28>
		}
		durval = (uint8_t) (dur + (factor * 64));
   143d8:	1dbb      	adds	r3, r7, #6
   143da:	881b      	ldrh	r3, [r3, #0]
   143dc:	b2d9      	uxtb	r1, r3
   143de:	230f      	movs	r3, #15
   143e0:	18fb      	adds	r3, r7, r3
   143e2:	781b      	ldrb	r3, [r3, #0]
   143e4:	019b      	lsls	r3, r3, #6
   143e6:	b2da      	uxtb	r2, r3
   143e8:	230e      	movs	r3, #14
   143ea:	18fb      	adds	r3, r7, r3
   143ec:	188a      	adds	r2, r1, r2
   143ee:	701a      	strb	r2, [r3, #0]
	}

	return durval;
   143f0:	230e      	movs	r3, #14
   143f2:	18fb      	adds	r3, r7, r3
   143f4:	781b      	ldrb	r3, [r3, #0]
}
   143f6:	0018      	movs	r0, r3
   143f8:	46bd      	mov	sp, r7
   143fa:	b004      	add	sp, #16
   143fc:	bd80      	pop	{r7, pc}
   143fe:	46c0      	nop			; (mov r8, r8)
   14400:	00000fbf 	.word	0x00000fbf

00014404 <read_field_data>:

/*!
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
   14404:	b5b0      	push	{r4, r5, r7, lr}
   14406:	b08a      	sub	sp, #40	; 0x28
   14408:	af00      	add	r7, sp, #0
   1440a:	6078      	str	r0, [r7, #4]
   1440c:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
   1440e:	2308      	movs	r3, #8
   14410:	18fb      	adds	r3, r7, r3
   14412:	0018      	movs	r0, r3
   14414:	230f      	movs	r3, #15
   14416:	001a      	movs	r2, r3
   14418:	2100      	movs	r1, #0
   1441a:	4b76      	ldr	r3, [pc, #472]	; (145f4 <read_field_data+0x1f0>)
   1441c:	4798      	blx	r3
	uint8_t gas_range;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;
   1441e:	2326      	movs	r3, #38	; 0x26
   14420:	18fb      	adds	r3, r7, r3
   14422:	220a      	movs	r2, #10
   14424:	701a      	strb	r2, [r3, #0]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   14426:	2327      	movs	r3, #39	; 0x27
   14428:	18fc      	adds	r4, r7, r3
   1442a:	683b      	ldr	r3, [r7, #0]
   1442c:	0018      	movs	r0, r3
   1442e:	4b72      	ldr	r3, [pc, #456]	; (145f8 <read_field_data+0x1f4>)
   14430:	4798      	blx	r3
   14432:	0003      	movs	r3, r0
   14434:	7023      	strb	r3, [r4, #0]
	do {
		if (rslt == BME680_OK) {
   14436:	2327      	movs	r3, #39	; 0x27
   14438:	18fb      	adds	r3, r7, r3
   1443a:	781b      	ldrb	r3, [r3, #0]
   1443c:	b25b      	sxtb	r3, r3
   1443e:	2b00      	cmp	r3, #0
   14440:	d000      	beq.n	14444 <read_field_data+0x40>
   14442:	e0b8      	b.n	145b6 <read_field_data+0x1b2>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
   14444:	2327      	movs	r3, #39	; 0x27
   14446:	18fc      	adds	r4, r7, r3
   14448:	683b      	ldr	r3, [r7, #0]
   1444a:	2208      	movs	r2, #8
   1444c:	18b9      	adds	r1, r7, r2
   1444e:	220f      	movs	r2, #15
   14450:	201d      	movs	r0, #29
   14452:	4d6a      	ldr	r5, [pc, #424]	; (145fc <read_field_data+0x1f8>)
   14454:	47a8      	blx	r5
   14456:	0003      	movs	r3, r0
   14458:	7023      	strb	r3, [r4, #0]
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
   1445a:	2308      	movs	r3, #8
   1445c:	18fb      	adds	r3, r7, r3
   1445e:	781b      	ldrb	r3, [r3, #0]
   14460:	227f      	movs	r2, #127	; 0x7f
   14462:	4393      	bics	r3, r2
   14464:	b2da      	uxtb	r2, r3
   14466:	687b      	ldr	r3, [r7, #4]
   14468:	701a      	strb	r2, [r3, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
   1446a:	2308      	movs	r3, #8
   1446c:	18fb      	adds	r3, r7, r3
   1446e:	781b      	ldrb	r3, [r3, #0]
   14470:	220f      	movs	r2, #15
   14472:	4013      	ands	r3, r2
   14474:	b2da      	uxtb	r2, r3
   14476:	687b      	ldr	r3, [r7, #4]
   14478:	705a      	strb	r2, [r3, #1]
			data->meas_index = buff[1];
   1447a:	2308      	movs	r3, #8
   1447c:	18fb      	adds	r3, r7, r3
   1447e:	785a      	ldrb	r2, [r3, #1]
   14480:	687b      	ldr	r3, [r7, #4]
   14482:	709a      	strb	r2, [r3, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   14484:	2308      	movs	r3, #8
   14486:	18fb      	adds	r3, r7, r3
   14488:	789b      	ldrb	r3, [r3, #2]
   1448a:	031a      	lsls	r2, r3, #12
   1448c:	2308      	movs	r3, #8
   1448e:	18fb      	adds	r3, r7, r3
   14490:	78db      	ldrb	r3, [r3, #3]
   14492:	011b      	lsls	r3, r3, #4
   14494:	4313      	orrs	r3, r2
				| ((uint32_t) buff[4] / 16));
   14496:	2208      	movs	r2, #8
   14498:	18ba      	adds	r2, r7, r2
   1449a:	7912      	ldrb	r2, [r2, #4]
   1449c:	0912      	lsrs	r2, r2, #4
   1449e:	b2d2      	uxtb	r2, r2
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
   144a0:	4313      	orrs	r3, r2
   144a2:	623b      	str	r3, [r7, #32]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
   144a4:	2308      	movs	r3, #8
   144a6:	18fb      	adds	r3, r7, r3
   144a8:	795b      	ldrb	r3, [r3, #5]
   144aa:	031a      	lsls	r2, r3, #12
   144ac:	2308      	movs	r3, #8
   144ae:	18fb      	adds	r3, r7, r3
   144b0:	799b      	ldrb	r3, [r3, #6]
   144b2:	011b      	lsls	r3, r3, #4
   144b4:	4313      	orrs	r3, r2
				| ((uint32_t) buff[7] / 16));
   144b6:	2208      	movs	r2, #8
   144b8:	18ba      	adds	r2, r7, r2
   144ba:	79d2      	ldrb	r2, [r2, #7]
   144bc:	0912      	lsrs	r2, r2, #4
   144be:	b2d2      	uxtb	r2, r2
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
   144c0:	4313      	orrs	r3, r2
   144c2:	61fb      	str	r3, [r7, #28]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
   144c4:	2308      	movs	r3, #8
   144c6:	18fb      	adds	r3, r7, r3
   144c8:	7a1b      	ldrb	r3, [r3, #8]
   144ca:	b29b      	uxth	r3, r3
   144cc:	021b      	lsls	r3, r3, #8
   144ce:	b299      	uxth	r1, r3
   144d0:	2308      	movs	r3, #8
   144d2:	18fb      	adds	r3, r7, r3
   144d4:	7a5b      	ldrb	r3, [r3, #9]
   144d6:	b29a      	uxth	r2, r3
   144d8:	231a      	movs	r3, #26
   144da:	18fb      	adds	r3, r7, r3
   144dc:	430a      	orrs	r2, r1
   144de:	801a      	strh	r2, [r3, #0]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
   144e0:	2308      	movs	r3, #8
   144e2:	18fb      	adds	r3, r7, r3
   144e4:	7b5b      	ldrb	r3, [r3, #13]
   144e6:	b29b      	uxth	r3, r3
   144e8:	009b      	lsls	r3, r3, #2
   144ea:	b299      	uxth	r1, r3
   144ec:	2308      	movs	r3, #8
   144ee:	18fb      	adds	r3, r7, r3
   144f0:	7b9b      	ldrb	r3, [r3, #14]
   144f2:	099b      	lsrs	r3, r3, #6
   144f4:	b2db      	uxtb	r3, r3
   144f6:	b29a      	uxth	r2, r3
   144f8:	2318      	movs	r3, #24
   144fa:	18fb      	adds	r3, r7, r3
   144fc:	430a      	orrs	r2, r1
   144fe:	801a      	strh	r2, [r3, #0]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
   14500:	2308      	movs	r3, #8
   14502:	18fb      	adds	r3, r7, r3
   14504:	7b9a      	ldrb	r2, [r3, #14]
   14506:	2317      	movs	r3, #23
   14508:	18fb      	adds	r3, r7, r3
   1450a:	210f      	movs	r1, #15
   1450c:	400a      	ands	r2, r1
   1450e:	701a      	strb	r2, [r3, #0]

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
   14510:	687b      	ldr	r3, [r7, #4]
   14512:	781b      	ldrb	r3, [r3, #0]
   14514:	b25a      	sxtb	r2, r3
   14516:	2308      	movs	r3, #8
   14518:	18fb      	adds	r3, r7, r3
   1451a:	7b9b      	ldrb	r3, [r3, #14]
   1451c:	b25b      	sxtb	r3, r3
   1451e:	2120      	movs	r1, #32
   14520:	400b      	ands	r3, r1
   14522:	b25b      	sxtb	r3, r3
   14524:	4313      	orrs	r3, r2
   14526:	b25b      	sxtb	r3, r3
   14528:	b2da      	uxtb	r2, r3
   1452a:	687b      	ldr	r3, [r7, #4]
   1452c:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
   1452e:	687b      	ldr	r3, [r7, #4]
   14530:	781b      	ldrb	r3, [r3, #0]
   14532:	b25a      	sxtb	r2, r3
   14534:	2308      	movs	r3, #8
   14536:	18fb      	adds	r3, r7, r3
   14538:	7b9b      	ldrb	r3, [r3, #14]
   1453a:	b25b      	sxtb	r3, r3
   1453c:	2110      	movs	r1, #16
   1453e:	400b      	ands	r3, r1
   14540:	b25b      	sxtb	r3, r3
   14542:	4313      	orrs	r3, r2
   14544:	b25b      	sxtb	r3, r3
   14546:	b2da      	uxtb	r2, r3
   14548:	687b      	ldr	r3, [r7, #4]
   1454a:	701a      	strb	r2, [r3, #0]

			if (data->status & BME680_NEW_DATA_MSK) {
   1454c:	687b      	ldr	r3, [r7, #4]
   1454e:	781b      	ldrb	r3, [r3, #0]
   14550:	b25b      	sxtb	r3, r3
   14552:	2b00      	cmp	r3, #0
   14554:	da2b      	bge.n	145ae <read_field_data+0x1aa>
				data->temperature = calc_temperature(adc_temp, dev);
   14556:	683a      	ldr	r2, [r7, #0]
   14558:	69fb      	ldr	r3, [r7, #28]
   1455a:	0011      	movs	r1, r2
   1455c:	0018      	movs	r0, r3
   1455e:	4b28      	ldr	r3, [pc, #160]	; (14600 <read_field_data+0x1fc>)
   14560:	4798      	blx	r3
   14562:	0003      	movs	r3, r0
   14564:	001a      	movs	r2, r3
   14566:	687b      	ldr	r3, [r7, #4]
   14568:	809a      	strh	r2, [r3, #4]
				data->pressure = calc_pressure(adc_pres, dev);
   1456a:	683a      	ldr	r2, [r7, #0]
   1456c:	6a3b      	ldr	r3, [r7, #32]
   1456e:	0011      	movs	r1, r2
   14570:	0018      	movs	r0, r3
   14572:	4b24      	ldr	r3, [pc, #144]	; (14604 <read_field_data+0x200>)
   14574:	4798      	blx	r3
   14576:	0002      	movs	r2, r0
   14578:	687b      	ldr	r3, [r7, #4]
   1457a:	609a      	str	r2, [r3, #8]
				data->humidity = calc_humidity(adc_hum, dev);
   1457c:	683a      	ldr	r2, [r7, #0]
   1457e:	231a      	movs	r3, #26
   14580:	18fb      	adds	r3, r7, r3
   14582:	881b      	ldrh	r3, [r3, #0]
   14584:	0011      	movs	r1, r2
   14586:	0018      	movs	r0, r3
   14588:	4b1f      	ldr	r3, [pc, #124]	; (14608 <read_field_data+0x204>)
   1458a:	4798      	blx	r3
   1458c:	0002      	movs	r2, r0
   1458e:	687b      	ldr	r3, [r7, #4]
   14590:	60da      	str	r2, [r3, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
   14592:	683a      	ldr	r2, [r7, #0]
   14594:	2317      	movs	r3, #23
   14596:	18fb      	adds	r3, r7, r3
   14598:	7819      	ldrb	r1, [r3, #0]
   1459a:	2318      	movs	r3, #24
   1459c:	18fb      	adds	r3, r7, r3
   1459e:	881b      	ldrh	r3, [r3, #0]
   145a0:	0018      	movs	r0, r3
   145a2:	4b1a      	ldr	r3, [pc, #104]	; (1460c <read_field_data+0x208>)
   145a4:	4798      	blx	r3
   145a6:	0002      	movs	r2, r0
   145a8:	687b      	ldr	r3, [r7, #4]
   145aa:	611a      	str	r2, [r3, #16]
				break;
   145ac:	e010      	b.n	145d0 <read_field_data+0x1cc>
			}
			/* Delay to poll the data */
			dev->delay_ms_bme(BME680_POLL_PERIOD_MS);
   145ae:	683b      	ldr	r3, [r7, #0]
   145b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   145b2:	200a      	movs	r0, #10
   145b4:	4798      	blx	r3
		}
		tries--;
   145b6:	2326      	movs	r3, #38	; 0x26
   145b8:	18fb      	adds	r3, r7, r3
   145ba:	781a      	ldrb	r2, [r3, #0]
   145bc:	2326      	movs	r3, #38	; 0x26
   145be:	18fb      	adds	r3, r7, r3
   145c0:	3a01      	subs	r2, #1
   145c2:	701a      	strb	r2, [r3, #0]
	} while (tries);
   145c4:	2326      	movs	r3, #38	; 0x26
   145c6:	18fb      	adds	r3, r7, r3
   145c8:	781b      	ldrb	r3, [r3, #0]
   145ca:	2b00      	cmp	r3, #0
   145cc:	d000      	beq.n	145d0 <read_field_data+0x1cc>
   145ce:	e732      	b.n	14436 <read_field_data+0x32>

	if (!tries)
   145d0:	2326      	movs	r3, #38	; 0x26
   145d2:	18fb      	adds	r3, r7, r3
   145d4:	781b      	ldrb	r3, [r3, #0]
   145d6:	2b00      	cmp	r3, #0
   145d8:	d103      	bne.n	145e2 <read_field_data+0x1de>
		rslt = BME680_W_NO_NEW_DATA;
   145da:	2327      	movs	r3, #39	; 0x27
   145dc:	18fb      	adds	r3, r7, r3
   145de:	2202      	movs	r2, #2
   145e0:	701a      	strb	r2, [r3, #0]

	return rslt;
   145e2:	2327      	movs	r3, #39	; 0x27
   145e4:	18fb      	adds	r3, r7, r3
   145e6:	781b      	ldrb	r3, [r3, #0]
   145e8:	b25b      	sxtb	r3, r3
}
   145ea:	0018      	movs	r0, r3
   145ec:	46bd      	mov	sp, r7
   145ee:	b00a      	add	sp, #40	; 0x28
   145f0:	bdb0      	pop	{r4, r5, r7, pc}
   145f2:	46c0      	nop			; (mov r8, r8)
   145f4:	0003794b 	.word	0x0003794b
   145f8:	0001482f 	.word	0x0001482f
   145fc:	00012ee5 	.word	0x00012ee5
   14600:	00013d31 	.word	0x00013d31
   14604:	00013e21 	.word	0x00013e21
   14608:	00013f79 	.word	0x00013f79
   1460c:	00014099 	.word	0x00014099

00014610 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
   14610:	b590      	push	{r4, r7, lr}
   14612:	b085      	sub	sp, #20
   14614:	af00      	add	r7, sp, #0
   14616:	0002      	movs	r2, r0
   14618:	6039      	str	r1, [r7, #0]
   1461a:	1dfb      	adds	r3, r7, #7
   1461c:	701a      	strb	r2, [r3, #0]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
   1461e:	230f      	movs	r3, #15
   14620:	18fc      	adds	r4, r7, r3
   14622:	683b      	ldr	r3, [r7, #0]
   14624:	0018      	movs	r0, r3
   14626:	4b3c      	ldr	r3, [pc, #240]	; (14718 <set_mem_page+0x108>)
   14628:	4798      	blx	r3
   1462a:	0003      	movs	r3, r0
   1462c:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   1462e:	230f      	movs	r3, #15
   14630:	18fb      	adds	r3, r7, r3
   14632:	781b      	ldrb	r3, [r3, #0]
   14634:	b25b      	sxtb	r3, r3
   14636:	2b00      	cmp	r3, #0
   14638:	d166      	bne.n	14708 <set_mem_page+0xf8>
		if (reg_addr > 0x7f)
   1463a:	1dfb      	adds	r3, r7, #7
   1463c:	781b      	ldrb	r3, [r3, #0]
   1463e:	b25b      	sxtb	r3, r3
   14640:	2b00      	cmp	r3, #0
   14642:	da04      	bge.n	1464e <set_mem_page+0x3e>
			mem_page = BME680_MEM_PAGE1;
   14644:	230e      	movs	r3, #14
   14646:	18fb      	adds	r3, r7, r3
   14648:	2200      	movs	r2, #0
   1464a:	701a      	strb	r2, [r3, #0]
   1464c:	e003      	b.n	14656 <set_mem_page+0x46>
		else
			mem_page = BME680_MEM_PAGE0;
   1464e:	230e      	movs	r3, #14
   14650:	18fb      	adds	r3, r7, r3
   14652:	2210      	movs	r2, #16
   14654:	701a      	strb	r2, [r3, #0]

		if (mem_page != dev->mem_page) {
   14656:	683b      	ldr	r3, [r7, #0]
   14658:	78db      	ldrb	r3, [r3, #3]
   1465a:	220e      	movs	r2, #14
   1465c:	18ba      	adds	r2, r7, r2
   1465e:	7812      	ldrb	r2, [r2, #0]
   14660:	429a      	cmp	r2, r3
   14662:	d051      	beq.n	14708 <set_mem_page+0xf8>
			dev->mem_page = mem_page;
   14664:	683b      	ldr	r3, [r7, #0]
   14666:	220e      	movs	r2, #14
   14668:	18ba      	adds	r2, r7, r2
   1466a:	7812      	ldrb	r2, [r2, #0]
   1466c:	70da      	strb	r2, [r3, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   1466e:	683b      	ldr	r3, [r7, #0]
   14670:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   14672:	683b      	ldr	r3, [r7, #0]
   14674:	7858      	ldrb	r0, [r3, #1]
   14676:	230d      	movs	r3, #13
   14678:	18fa      	adds	r2, r7, r3
   1467a:	2301      	movs	r3, #1
   1467c:	21f3      	movs	r1, #243	; 0xf3
   1467e:	47a0      	blx	r4
   14680:	0003      	movs	r3, r0
   14682:	0019      	movs	r1, r3
   14684:	683b      	ldr	r3, [r7, #0]
   14686:	2254      	movs	r2, #84	; 0x54
   14688:	5499      	strb	r1, [r3, r2]
			if (dev->com_rslt != 0)
   1468a:	683b      	ldr	r3, [r7, #0]
   1468c:	2254      	movs	r2, #84	; 0x54
   1468e:	569b      	ldrsb	r3, [r3, r2]
   14690:	2b00      	cmp	r3, #0
   14692:	d003      	beq.n	1469c <set_mem_page+0x8c>
				rslt = BME680_E_COM_FAIL;
   14694:	230f      	movs	r3, #15
   14696:	18fb      	adds	r3, r7, r3
   14698:	22fe      	movs	r2, #254	; 0xfe
   1469a:	701a      	strb	r2, [r3, #0]

			if (rslt == BME680_OK) {
   1469c:	230f      	movs	r3, #15
   1469e:	18fb      	adds	r3, r7, r3
   146a0:	781b      	ldrb	r3, [r3, #0]
   146a2:	b25b      	sxtb	r3, r3
   146a4:	2b00      	cmp	r3, #0
   146a6:	d12f      	bne.n	14708 <set_mem_page+0xf8>
				reg = reg & (~BME680_MEM_PAGE_MSK);
   146a8:	230d      	movs	r3, #13
   146aa:	18fb      	adds	r3, r7, r3
   146ac:	781b      	ldrb	r3, [r3, #0]
   146ae:	2210      	movs	r2, #16
   146b0:	4393      	bics	r3, r2
   146b2:	b2da      	uxtb	r2, r3
   146b4:	230d      	movs	r3, #13
   146b6:	18fb      	adds	r3, r7, r3
   146b8:	701a      	strb	r2, [r3, #0]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
   146ba:	683b      	ldr	r3, [r7, #0]
   146bc:	78db      	ldrb	r3, [r3, #3]
   146be:	b25b      	sxtb	r3, r3
   146c0:	2210      	movs	r2, #16
   146c2:	4013      	ands	r3, r2
   146c4:	b25a      	sxtb	r2, r3
   146c6:	230d      	movs	r3, #13
   146c8:	18fb      	adds	r3, r7, r3
   146ca:	781b      	ldrb	r3, [r3, #0]
   146cc:	b25b      	sxtb	r3, r3
   146ce:	4313      	orrs	r3, r2
   146d0:	b25b      	sxtb	r3, r3
   146d2:	b2da      	uxtb	r2, r3
   146d4:	230d      	movs	r3, #13
   146d6:	18fb      	adds	r3, r7, r3
   146d8:	701a      	strb	r2, [r3, #0]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
   146da:	683b      	ldr	r3, [r7, #0]
   146dc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
   146de:	683b      	ldr	r3, [r7, #0]
   146e0:	7858      	ldrb	r0, [r3, #1]
   146e2:	230d      	movs	r3, #13
   146e4:	18fa      	adds	r2, r7, r3
   146e6:	2301      	movs	r3, #1
   146e8:	2173      	movs	r1, #115	; 0x73
   146ea:	47a0      	blx	r4
   146ec:	0003      	movs	r3, r0
   146ee:	0019      	movs	r1, r3
   146f0:	683b      	ldr	r3, [r7, #0]
   146f2:	2254      	movs	r2, #84	; 0x54
   146f4:	5499      	strb	r1, [r3, r2]
					&reg, 1);
				if (dev->com_rslt != 0)
   146f6:	683b      	ldr	r3, [r7, #0]
   146f8:	2254      	movs	r2, #84	; 0x54
   146fa:	569b      	ldrsb	r3, [r3, r2]
   146fc:	2b00      	cmp	r3, #0
   146fe:	d003      	beq.n	14708 <set_mem_page+0xf8>
					rslt = BME680_E_COM_FAIL;
   14700:	230f      	movs	r3, #15
   14702:	18fb      	adds	r3, r7, r3
   14704:	22fe      	movs	r2, #254	; 0xfe
   14706:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	return rslt;
   14708:	230f      	movs	r3, #15
   1470a:	18fb      	adds	r3, r7, r3
   1470c:	781b      	ldrb	r3, [r3, #0]
   1470e:	b25b      	sxtb	r3, r3
}
   14710:	0018      	movs	r0, r3
   14712:	46bd      	mov	sp, r7
   14714:	b005      	add	sp, #20
   14716:	bd90      	pop	{r4, r7, pc}
   14718:	0001482f 	.word	0x0001482f

0001471c <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
   1471c:	b590      	push	{r4, r7, lr}
   1471e:	b085      	sub	sp, #20
   14720:	af00      	add	r7, sp, #0
   14722:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
   14724:	230f      	movs	r3, #15
   14726:	18fc      	adds	r4, r7, r3
   14728:	687b      	ldr	r3, [r7, #4]
   1472a:	0018      	movs	r0, r3
   1472c:	4b18      	ldr	r3, [pc, #96]	; (14790 <get_mem_page+0x74>)
   1472e:	4798      	blx	r3
   14730:	0003      	movs	r3, r0
   14732:	7023      	strb	r3, [r4, #0]
	if (rslt == BME680_OK) {
   14734:	230f      	movs	r3, #15
   14736:	18fb      	adds	r3, r7, r3
   14738:	781b      	ldrb	r3, [r3, #0]
   1473a:	b25b      	sxtb	r3, r3
   1473c:	2b00      	cmp	r3, #0
   1473e:	d11f      	bne.n	14780 <get_mem_page+0x64>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
   14740:	687b      	ldr	r3, [r7, #4]
   14742:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   14744:	687b      	ldr	r3, [r7, #4]
   14746:	7858      	ldrb	r0, [r3, #1]
   14748:	230e      	movs	r3, #14
   1474a:	18fa      	adds	r2, r7, r3
   1474c:	2301      	movs	r3, #1
   1474e:	21f3      	movs	r1, #243	; 0xf3
   14750:	47a0      	blx	r4
   14752:	0003      	movs	r3, r0
   14754:	0019      	movs	r1, r3
   14756:	687b      	ldr	r3, [r7, #4]
   14758:	2254      	movs	r2, #84	; 0x54
   1475a:	5499      	strb	r1, [r3, r2]
		if (dev->com_rslt != 0)
   1475c:	687b      	ldr	r3, [r7, #4]
   1475e:	2254      	movs	r2, #84	; 0x54
   14760:	569b      	ldrsb	r3, [r3, r2]
   14762:	2b00      	cmp	r3, #0
   14764:	d004      	beq.n	14770 <get_mem_page+0x54>
			rslt = BME680_E_COM_FAIL;
   14766:	230f      	movs	r3, #15
   14768:	18fb      	adds	r3, r7, r3
   1476a:	22fe      	movs	r2, #254	; 0xfe
   1476c:	701a      	strb	r2, [r3, #0]
   1476e:	e007      	b.n	14780 <get_mem_page+0x64>
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
   14770:	230e      	movs	r3, #14
   14772:	18fb      	adds	r3, r7, r3
   14774:	781b      	ldrb	r3, [r3, #0]
   14776:	2210      	movs	r2, #16
   14778:	4013      	ands	r3, r2
   1477a:	b2da      	uxtb	r2, r3
   1477c:	687b      	ldr	r3, [r7, #4]
   1477e:	70da      	strb	r2, [r3, #3]
	}

	return rslt;
   14780:	230f      	movs	r3, #15
   14782:	18fb      	adds	r3, r7, r3
   14784:	781b      	ldrb	r3, [r3, #0]
   14786:	b25b      	sxtb	r3, r3
}
   14788:	0018      	movs	r0, r3
   1478a:	46bd      	mov	sp, r7
   1478c:	b005      	add	sp, #20
   1478e:	bd90      	pop	{r4, r7, pc}
   14790:	0001482f 	.word	0x0001482f

00014794 <boundary_check>:
/*!
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
   14794:	b580      	push	{r7, lr}
   14796:	b086      	sub	sp, #24
   14798:	af00      	add	r7, sp, #0
   1479a:	60f8      	str	r0, [r7, #12]
   1479c:	0008      	movs	r0, r1
   1479e:	0011      	movs	r1, r2
   147a0:	607b      	str	r3, [r7, #4]
   147a2:	230b      	movs	r3, #11
   147a4:	18fb      	adds	r3, r7, r3
   147a6:	1c02      	adds	r2, r0, #0
   147a8:	701a      	strb	r2, [r3, #0]
   147aa:	230a      	movs	r3, #10
   147ac:	18fb      	adds	r3, r7, r3
   147ae:	1c0a      	adds	r2, r1, #0
   147b0:	701a      	strb	r2, [r3, #0]
	int8_t rslt = BME680_OK;
   147b2:	2317      	movs	r3, #23
   147b4:	18fb      	adds	r3, r7, r3
   147b6:	2200      	movs	r2, #0
   147b8:	701a      	strb	r2, [r3, #0]

	if (value != NULL) {
   147ba:	68fb      	ldr	r3, [r7, #12]
   147bc:	2b00      	cmp	r3, #0
   147be:	d02a      	beq.n	14816 <boundary_check+0x82>
		/* Check if value is below minimum value */
		if (*value < min) {
   147c0:	68fb      	ldr	r3, [r7, #12]
   147c2:	781b      	ldrb	r3, [r3, #0]
   147c4:	220b      	movs	r2, #11
   147c6:	18ba      	adds	r2, r7, r2
   147c8:	7812      	ldrb	r2, [r2, #0]
   147ca:	429a      	cmp	r2, r3
   147cc:	d90d      	bls.n	147ea <boundary_check+0x56>
			/* Auto correct the invalid value to minimum value */
			*value = min;
   147ce:	68fb      	ldr	r3, [r7, #12]
   147d0:	220b      	movs	r2, #11
   147d2:	18ba      	adds	r2, r7, r2
   147d4:	7812      	ldrb	r2, [r2, #0]
   147d6:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
   147d8:	687b      	ldr	r3, [r7, #4]
   147da:	2246      	movs	r2, #70	; 0x46
   147dc:	5c9b      	ldrb	r3, [r3, r2]
   147de:	2201      	movs	r2, #1
   147e0:	4313      	orrs	r3, r2
   147e2:	b2d9      	uxtb	r1, r3
   147e4:	687b      	ldr	r3, [r7, #4]
   147e6:	2246      	movs	r2, #70	; 0x46
   147e8:	5499      	strb	r1, [r3, r2]
		}
		/* Check if value is above maximum value */
		if (*value > max) {
   147ea:	68fb      	ldr	r3, [r7, #12]
   147ec:	781b      	ldrb	r3, [r3, #0]
   147ee:	220a      	movs	r2, #10
   147f0:	18ba      	adds	r2, r7, r2
   147f2:	7812      	ldrb	r2, [r2, #0]
   147f4:	429a      	cmp	r2, r3
   147f6:	d212      	bcs.n	1481e <boundary_check+0x8a>
			/* Auto correct the invalid value to maximum value */
			*value = max;
   147f8:	68fb      	ldr	r3, [r7, #12]
   147fa:	220a      	movs	r2, #10
   147fc:	18ba      	adds	r2, r7, r2
   147fe:	7812      	ldrb	r2, [r2, #0]
   14800:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
   14802:	687b      	ldr	r3, [r7, #4]
   14804:	2246      	movs	r2, #70	; 0x46
   14806:	5c9b      	ldrb	r3, [r3, r2]
   14808:	2202      	movs	r2, #2
   1480a:	4313      	orrs	r3, r2
   1480c:	b2d9      	uxtb	r1, r3
   1480e:	687b      	ldr	r3, [r7, #4]
   14810:	2246      	movs	r2, #70	; 0x46
   14812:	5499      	strb	r1, [r3, r2]
   14814:	e003      	b.n	1481e <boundary_check+0x8a>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
   14816:	2317      	movs	r3, #23
   14818:	18fb      	adds	r3, r7, r3
   1481a:	22ff      	movs	r2, #255	; 0xff
   1481c:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
   1481e:	2317      	movs	r3, #23
   14820:	18fb      	adds	r3, r7, r3
   14822:	781b      	ldrb	r3, [r3, #0]
   14824:	b25b      	sxtb	r3, r3
}
   14826:	0018      	movs	r0, r3
   14828:	46bd      	mov	sp, r7
   1482a:	b006      	add	sp, #24
   1482c:	bd80      	pop	{r7, pc}

0001482e <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
   1482e:	b580      	push	{r7, lr}
   14830:	b084      	sub	sp, #16
   14832:	af00      	add	r7, sp, #0
   14834:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms_bme == NULL)) {
   14836:	687b      	ldr	r3, [r7, #4]
   14838:	2b00      	cmp	r3, #0
   1483a:	d00b      	beq.n	14854 <null_ptr_check+0x26>
   1483c:	687b      	ldr	r3, [r7, #4]
   1483e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   14840:	2b00      	cmp	r3, #0
   14842:	d007      	beq.n	14854 <null_ptr_check+0x26>
   14844:	687b      	ldr	r3, [r7, #4]
   14846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   14848:	2b00      	cmp	r3, #0
   1484a:	d003      	beq.n	14854 <null_ptr_check+0x26>
   1484c:	687b      	ldr	r3, [r7, #4]
   1484e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   14850:	2b00      	cmp	r3, #0
   14852:	d104      	bne.n	1485e <null_ptr_check+0x30>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
   14854:	230f      	movs	r3, #15
   14856:	18fb      	adds	r3, r7, r3
   14858:	22ff      	movs	r2, #255	; 0xff
   1485a:	701a      	strb	r2, [r3, #0]
   1485c:	e003      	b.n	14866 <null_ptr_check+0x38>
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
   1485e:	230f      	movs	r3, #15
   14860:	18fb      	adds	r3, r7, r3
   14862:	2200      	movs	r2, #0
   14864:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
   14866:	230f      	movs	r3, #15
   14868:	18fb      	adds	r3, r7, r3
   1486a:	781b      	ldrb	r3, [r3, #0]
   1486c:	b25b      	sxtb	r3, r3
}
   1486e:	0018      	movs	r0, r3
   14870:	46bd      	mov	sp, r7
   14872:	b004      	add	sp, #16
   14874:	bd80      	pop	{r7, pc}
	...

00014878 <bme_write>:
//read buffer and write buffer function
uint8_t msgOutImu[64]; ///<USE ME AS A BUFFER FOR platform_write and platform_read
I2C_Data bmeData;
int8_t bme_write(uint8_t dev_id,uint8_t reg, uint8_t *bufp,uint16_t len)
{
   14878:	b5f0      	push	{r4, r5, r6, r7, lr}
   1487a:	b087      	sub	sp, #28
   1487c:	af00      	add	r7, sp, #0
   1487e:	0006      	movs	r6, r0
   14880:	0008      	movs	r0, r1
   14882:	603a      	str	r2, [r7, #0]
   14884:	0019      	movs	r1, r3
   14886:	1dfb      	adds	r3, r7, #7
   14888:	1c32      	adds	r2, r6, #0
   1488a:	701a      	strb	r2, [r3, #0]
   1488c:	1dbb      	adds	r3, r7, #6
   1488e:	1c02      	adds	r2, r0, #0
   14890:	701a      	strb	r2, [r3, #0]
   14892:	1d3b      	adds	r3, r7, #4
   14894:	1c0a      	adds	r2, r1, #0
   14896:	801a      	strh	r2, [r3, #0]
	int8_t error = ERROR_NONE;
   14898:	230f      	movs	r3, #15
   1489a:	18fb      	adds	r3, r7, r3
   1489c:	2200      	movs	r2, #0
   1489e:	701a      	strb	r2, [r3, #0]

	msgOutImu[0] = reg;
   148a0:	4b25      	ldr	r3, [pc, #148]	; (14938 <bme_write+0xc0>)
   148a2:	1dba      	adds	r2, r7, #6
   148a4:	7812      	ldrb	r2, [r2, #0]
   148a6:	701a      	strb	r2, [r3, #0]
	for (uint64_t i = 0; i < len; i++) {
   148a8:	2200      	movs	r2, #0
   148aa:	2300      	movs	r3, #0
   148ac:	613a      	str	r2, [r7, #16]
   148ae:	617b      	str	r3, [r7, #20]
   148b0:	e015      	b.n	148de <bme_write+0x66>
		msgOutImu[i+1] = bufp[i];
   148b2:	693a      	ldr	r2, [r7, #16]
   148b4:	697b      	ldr	r3, [r7, #20]
   148b6:	2001      	movs	r0, #1
   148b8:	2100      	movs	r1, #0
   148ba:	1812      	adds	r2, r2, r0
   148bc:	414b      	adcs	r3, r1
   148be:	6939      	ldr	r1, [r7, #16]
   148c0:	6838      	ldr	r0, [r7, #0]
   148c2:	1841      	adds	r1, r0, r1
   148c4:	7808      	ldrb	r0, [r1, #0]
   148c6:	491c      	ldr	r1, [pc, #112]	; (14938 <bme_write+0xc0>)
   148c8:	188b      	adds	r3, r1, r2
   148ca:	1c02      	adds	r2, r0, #0
   148cc:	701a      	strb	r2, [r3, #0]
	for (uint64_t i = 0; i < len; i++) {
   148ce:	693a      	ldr	r2, [r7, #16]
   148d0:	697b      	ldr	r3, [r7, #20]
   148d2:	2001      	movs	r0, #1
   148d4:	2100      	movs	r1, #0
   148d6:	1812      	adds	r2, r2, r0
   148d8:	414b      	adcs	r3, r1
   148da:	613a      	str	r2, [r7, #16]
   148dc:	617b      	str	r3, [r7, #20]
   148de:	1d3b      	adds	r3, r7, #4
   148e0:	881b      	ldrh	r3, [r3, #0]
   148e2:	b29b      	uxth	r3, r3
   148e4:	001c      	movs	r4, r3
   148e6:	2300      	movs	r3, #0
   148e8:	001d      	movs	r5, r3
   148ea:	697b      	ldr	r3, [r7, #20]
   148ec:	42ab      	cmp	r3, r5
   148ee:	d3e0      	bcc.n	148b2 <bme_write+0x3a>
   148f0:	697b      	ldr	r3, [r7, #20]
   148f2:	42ab      	cmp	r3, r5
   148f4:	d102      	bne.n	148fc <bme_write+0x84>
   148f6:	693b      	ldr	r3, [r7, #16]
   148f8:	42a3      	cmp	r3, r4
   148fa:	d3da      	bcc.n	148b2 <bme_write+0x3a>
	}

	bmeData.address = 0x76;
   148fc:	4b0f      	ldr	r3, [pc, #60]	; (1493c <bme_write+0xc4>)
   148fe:	2276      	movs	r2, #118	; 0x76
   14900:	701a      	strb	r2, [r3, #0]
	bmeData.msgOut = &msgOutImu;
   14902:	4b0e      	ldr	r3, [pc, #56]	; (1493c <bme_write+0xc4>)
   14904:	4a0c      	ldr	r2, [pc, #48]	; (14938 <bme_write+0xc0>)
   14906:	605a      	str	r2, [r3, #4]
	bmeData.lenOut = len + 1;
   14908:	1d3b      	adds	r3, r7, #4
   1490a:	881b      	ldrh	r3, [r3, #0]
   1490c:	3301      	adds	r3, #1
   1490e:	b29a      	uxth	r2, r3
   14910:	4b0a      	ldr	r3, [pc, #40]	; (1493c <bme_write+0xc4>)
   14912:	81da      	strh	r2, [r3, #14]

	error = (int8_t)I2cWriteDataWait(&bmeData, 100);
   14914:	4b09      	ldr	r3, [pc, #36]	; (1493c <bme_write+0xc4>)
   14916:	2164      	movs	r1, #100	; 0x64
   14918:	0018      	movs	r0, r3
   1491a:	4b09      	ldr	r3, [pc, #36]	; (14940 <bme_write+0xc8>)
   1491c:	4798      	blx	r3
   1491e:	0002      	movs	r2, r0
   14920:	230f      	movs	r3, #15
   14922:	18fb      	adds	r3, r7, r3
   14924:	701a      	strb	r2, [r3, #0]
	return error;
   14926:	230f      	movs	r3, #15
   14928:	18fb      	adds	r3, r7, r3
   1492a:	781b      	ldrb	r3, [r3, #0]
   1492c:	b25b      	sxtb	r3, r3
}
   1492e:	0018      	movs	r0, r3
   14930:	46bd      	mov	sp, r7
   14932:	b007      	add	sp, #28
   14934:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14936:	46c0      	nop			; (mov r8, r8)
   14938:	20004600 	.word	0x20004600
   1493c:	20004640 	.word	0x20004640
   14940:	00015a49 	.word	0x00015a49

00014944 <bme_read>:
int8_t bme_read(uint8_t dev_id,uint8_t reg, uint8_t *bufp, uint16_t len)
{
   14944:	b590      	push	{r4, r7, lr}
   14946:	b085      	sub	sp, #20
   14948:	af00      	add	r7, sp, #0
   1494a:	0004      	movs	r4, r0
   1494c:	0008      	movs	r0, r1
   1494e:	603a      	str	r2, [r7, #0]
   14950:	0019      	movs	r1, r3
   14952:	1dfb      	adds	r3, r7, #7
   14954:	1c22      	adds	r2, r4, #0
   14956:	701a      	strb	r2, [r3, #0]
   14958:	1dbb      	adds	r3, r7, #6
   1495a:	1c02      	adds	r2, r0, #0
   1495c:	701a      	strb	r2, [r3, #0]
   1495e:	1d3b      	adds	r3, r7, #4
   14960:	1c0a      	adds	r2, r1, #0
   14962:	801a      	strh	r2, [r3, #0]
	
	int8_t error = ERROR_NONE;
   14964:	230f      	movs	r3, #15
   14966:	18fb      	adds	r3, r7, r3
   14968:	2200      	movs	r2, #0
   1496a:	701a      	strb	r2, [r3, #0]

	bmeData.address = 0x76;
   1496c:	4b12      	ldr	r3, [pc, #72]	; (149b8 <bme_read+0x74>)
   1496e:	2276      	movs	r2, #118	; 0x76
   14970:	701a      	strb	r2, [r3, #0]
	bmeData.lenIn = len;
   14972:	4b11      	ldr	r3, [pc, #68]	; (149b8 <bme_read+0x74>)
   14974:	1d3a      	adds	r2, r7, #4
   14976:	8812      	ldrh	r2, [r2, #0]
   14978:	819a      	strh	r2, [r3, #12]
	bmeData.msgIn = bufp;
   1497a:	4b0f      	ldr	r3, [pc, #60]	; (149b8 <bme_read+0x74>)
   1497c:	683a      	ldr	r2, [r7, #0]
   1497e:	609a      	str	r2, [r3, #8]
	bmeData.lenOut = 1;
   14980:	4b0d      	ldr	r3, [pc, #52]	; (149b8 <bme_read+0x74>)
   14982:	2201      	movs	r2, #1
   14984:	81da      	strh	r2, [r3, #14]
	msgOutImu[0] = reg;
   14986:	4b0d      	ldr	r3, [pc, #52]	; (149bc <bme_read+0x78>)
   14988:	1dba      	adds	r2, r7, #6
   1498a:	7812      	ldrb	r2, [r2, #0]
   1498c:	701a      	strb	r2, [r3, #0]
	bmeData.msgOut = &msgOutImu;
   1498e:	4b0a      	ldr	r3, [pc, #40]	; (149b8 <bme_read+0x74>)
   14990:	4a0a      	ldr	r2, [pc, #40]	; (149bc <bme_read+0x78>)
   14992:	605a      	str	r2, [r3, #4]

	error = (int8_t)I2cReadDataWait(&bmeData, 50, 100);
   14994:	4b08      	ldr	r3, [pc, #32]	; (149b8 <bme_read+0x74>)
   14996:	2264      	movs	r2, #100	; 0x64
   14998:	2132      	movs	r1, #50	; 0x32
   1499a:	0018      	movs	r0, r3
   1499c:	4b08      	ldr	r3, [pc, #32]	; (149c0 <bme_read+0x7c>)
   1499e:	4798      	blx	r3
   149a0:	0002      	movs	r2, r0
   149a2:	230f      	movs	r3, #15
   149a4:	18fb      	adds	r3, r7, r3
   149a6:	701a      	strb	r2, [r3, #0]
	return error;
   149a8:	230f      	movs	r3, #15
   149aa:	18fb      	adds	r3, r7, r3
   149ac:	781b      	ldrb	r3, [r3, #0]
   149ae:	b25b      	sxtb	r3, r3
}
   149b0:	0018      	movs	r0, r3
   149b2:	46bd      	mov	sp, r7
   149b4:	b005      	add	sp, #20
   149b6:	bd90      	pop	{r4, r7, pc}
   149b8:	20004640 	.word	0x20004640
   149bc:	20004600 	.word	0x20004600
   149c0:	00015b21 	.word	0x00015b21

000149c4 <user_delay_ms>:
void user_delay_ms(uint32_t period){
   149c4:	b580      	push	{r7, lr}
   149c6:	b084      	sub	sp, #16
   149c8:	af00      	add	r7, sp, #0
   149ca:	6078      	str	r0, [r7, #4]
	{
	for(int j = 0;j<period;j++)
   149cc:	2300      	movs	r3, #0
   149ce:	60fb      	str	r3, [r7, #12]
   149d0:	e00e      	b.n	149f0 <user_delay_ms+0x2c>
	for(int i = 0;i<307;i++)
   149d2:	2300      	movs	r3, #0
   149d4:	60bb      	str	r3, [r7, #8]
   149d6:	e003      	b.n	149e0 <user_delay_ms+0x1c>
	__asm("nop");
   149d8:	46c0      	nop			; (mov r8, r8)
	for(int i = 0;i<307;i++)
   149da:	68bb      	ldr	r3, [r7, #8]
   149dc:	3301      	adds	r3, #1
   149de:	60bb      	str	r3, [r7, #8]
   149e0:	68ba      	ldr	r2, [r7, #8]
   149e2:	2399      	movs	r3, #153	; 0x99
   149e4:	005b      	lsls	r3, r3, #1
   149e6:	429a      	cmp	r2, r3
   149e8:	ddf6      	ble.n	149d8 <user_delay_ms+0x14>
	for(int j = 0;j<period;j++)
   149ea:	68fb      	ldr	r3, [r7, #12]
   149ec:	3301      	adds	r3, #1
   149ee:	60fb      	str	r3, [r7, #12]
   149f0:	68fa      	ldr	r2, [r7, #12]
   149f2:	687b      	ldr	r3, [r7, #4]
   149f4:	429a      	cmp	r2, r3
   149f6:	d3ec      	bcc.n	149d2 <user_delay_ms+0xe>
	}
}
   149f8:	46c0      	nop			; (mov r8, r8)
   149fa:	46bd      	mov	sp, r7
   149fc:	b004      	add	sp, #16
   149fe:	bd80      	pop	{r7, pc}

00014a00 <init_bme680>:
float bme_temperature = 0;
float bme_humidity = 0;
float bme_pressure = 0;
int bme_gas_resistence = 0;

void init_bme680(){
   14a00:	b590      	push	{r4, r7, lr}
   14a02:	b083      	sub	sp, #12
   14a04:	af00      	add	r7, sp, #0
	int8_t ret;
	gas_sensor.dev_id = BME680_I2C_ADDR_PRIMARY;
   14a06:	4b2b      	ldr	r3, [pc, #172]	; (14ab4 <init_bme680+0xb4>)
   14a08:	2276      	movs	r2, #118	; 0x76
   14a0a:	705a      	strb	r2, [r3, #1]
	gas_sensor.intf = BME680_I2C_INTF;
   14a0c:	4b29      	ldr	r3, [pc, #164]	; (14ab4 <init_bme680+0xb4>)
   14a0e:	2201      	movs	r2, #1
   14a10:	709a      	strb	r2, [r3, #2]
	gas_sensor.write = bme_write;
   14a12:	4b28      	ldr	r3, [pc, #160]	; (14ab4 <init_bme680+0xb4>)
   14a14:	4a28      	ldr	r2, [pc, #160]	; (14ab8 <init_bme680+0xb8>)
   14a16:	64da      	str	r2, [r3, #76]	; 0x4c
	gas_sensor.read = bme_read;
   14a18:	4b26      	ldr	r3, [pc, #152]	; (14ab4 <init_bme680+0xb4>)
   14a1a:	4a28      	ldr	r2, [pc, #160]	; (14abc <init_bme680+0xbc>)
   14a1c:	649a      	str	r2, [r3, #72]	; 0x48
	gas_sensor.delay_ms_bme = user_delay_ms;
   14a1e:	4b25      	ldr	r3, [pc, #148]	; (14ab4 <init_bme680+0xb4>)
   14a20:	4a27      	ldr	r2, [pc, #156]	; (14ac0 <init_bme680+0xc0>)
   14a22:	651a      	str	r2, [r3, #80]	; 0x50
	gas_sensor.amb_temp = 25;
   14a24:	4b23      	ldr	r3, [pc, #140]	; (14ab4 <init_bme680+0xb4>)
   14a26:	2219      	movs	r2, #25
   14a28:	711a      	strb	r2, [r3, #4]
	ret = BME680_OK;
   14a2a:	1dfb      	adds	r3, r7, #7
   14a2c:	2200      	movs	r2, #0
   14a2e:	701a      	strb	r2, [r3, #0]
	ret = bme680_init(&gas_sensor);
   14a30:	1dfc      	adds	r4, r7, #7
   14a32:	4b20      	ldr	r3, [pc, #128]	; (14ab4 <init_bme680+0xb4>)
   14a34:	0018      	movs	r0, r3
   14a36:	4b23      	ldr	r3, [pc, #140]	; (14ac4 <init_bme680+0xc4>)
   14a38:	4798      	blx	r3
   14a3a:	0003      	movs	r3, r0
   14a3c:	7023      	strb	r3, [r4, #0]
	
	
	uint8_t set_required_settings;
	gas_sensor.tph_sett.os_hum = BME680_OS_2X;
   14a3e:	4b1d      	ldr	r3, [pc, #116]	; (14ab4 <init_bme680+0xb4>)
   14a40:	2238      	movs	r2, #56	; 0x38
   14a42:	2102      	movs	r1, #2
   14a44:	5499      	strb	r1, [r3, r2]
	gas_sensor.tph_sett.os_pres = BME680_OS_4X;
   14a46:	4b1b      	ldr	r3, [pc, #108]	; (14ab4 <init_bme680+0xb4>)
   14a48:	223a      	movs	r2, #58	; 0x3a
   14a4a:	2103      	movs	r1, #3
   14a4c:	5499      	strb	r1, [r3, r2]
	gas_sensor.tph_sett.os_temp = BME680_OS_8X;
   14a4e:	4b19      	ldr	r3, [pc, #100]	; (14ab4 <init_bme680+0xb4>)
   14a50:	2239      	movs	r2, #57	; 0x39
   14a52:	2104      	movs	r1, #4
   14a54:	5499      	strb	r1, [r3, r2]
	gas_sensor.tph_sett.filter = BME680_FILTER_SIZE_3;
   14a56:	4b17      	ldr	r3, [pc, #92]	; (14ab4 <init_bme680+0xb4>)
   14a58:	223b      	movs	r2, #59	; 0x3b
   14a5a:	2102      	movs	r1, #2
   14a5c:	5499      	strb	r1, [r3, r2]
	gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
   14a5e:	4b15      	ldr	r3, [pc, #84]	; (14ab4 <init_bme680+0xb4>)
   14a60:	223e      	movs	r2, #62	; 0x3e
   14a62:	2101      	movs	r1, #1
   14a64:	5499      	strb	r1, [r3, r2]
	gas_sensor.gas_sett.heatr_temp = 320;
   14a66:	4b13      	ldr	r3, [pc, #76]	; (14ab4 <init_bme680+0xb4>)
   14a68:	2240      	movs	r2, #64	; 0x40
   14a6a:	21a0      	movs	r1, #160	; 0xa0
   14a6c:	0049      	lsls	r1, r1, #1
   14a6e:	5299      	strh	r1, [r3, r2]
	gas_sensor.gas_sett.heatr_dur = 150;
   14a70:	4b10      	ldr	r3, [pc, #64]	; (14ab4 <init_bme680+0xb4>)
   14a72:	2242      	movs	r2, #66	; 0x42
   14a74:	2196      	movs	r1, #150	; 0x96
   14a76:	5299      	strh	r1, [r3, r2]
	gas_sensor.power_mode = BME680_FORCED_MODE;
   14a78:	4b0e      	ldr	r3, [pc, #56]	; (14ab4 <init_bme680+0xb4>)
   14a7a:	2244      	movs	r2, #68	; 0x44
   14a7c:	2101      	movs	r1, #1
   14a7e:	5499      	strb	r1, [r3, r2]
	set_required_settings =BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL |BME680_FILTER_SEL | BME680_GAS_SENSOR_SEL;
   14a80:	1dbb      	adds	r3, r7, #6
   14a82:	22df      	movs	r2, #223	; 0xdf
   14a84:	701a      	strb	r2, [r3, #0]
	
	ret = bme680_set_sensor_settings(set_required_settings,&gas_sensor);
   14a86:	1dbb      	adds	r3, r7, #6
   14a88:	781b      	ldrb	r3, [r3, #0]
   14a8a:	b29b      	uxth	r3, r3
   14a8c:	1dfc      	adds	r4, r7, #7
   14a8e:	4a09      	ldr	r2, [pc, #36]	; (14ab4 <init_bme680+0xb4>)
   14a90:	0011      	movs	r1, r2
   14a92:	0018      	movs	r0, r3
   14a94:	4b0c      	ldr	r3, [pc, #48]	; (14ac8 <init_bme680+0xc8>)
   14a96:	4798      	blx	r3
   14a98:	0003      	movs	r3, r0
   14a9a:	7023      	strb	r3, [r4, #0]

	ret = bme680_set_sensor_mode(&gas_sensor);
   14a9c:	1dfc      	adds	r4, r7, #7
   14a9e:	4b05      	ldr	r3, [pc, #20]	; (14ab4 <init_bme680+0xb4>)
   14aa0:	0018      	movs	r0, r3
   14aa2:	4b0a      	ldr	r3, [pc, #40]	; (14acc <init_bme680+0xcc>)
   14aa4:	4798      	blx	r3
   14aa6:	0003      	movs	r3, r0
   14aa8:	7023      	strb	r3, [r4, #0]

}
   14aaa:	46c0      	nop			; (mov r8, r8)
   14aac:	46bd      	mov	sp, r7
   14aae:	b003      	add	sp, #12
   14ab0:	bd90      	pop	{r4, r7, pc}
   14ab2:	46c0      	nop			; (mov r8, r8)
   14ab4:	20004650 	.word	0x20004650
   14ab8:	00014879 	.word	0x00014879
   14abc:	00014945 	.word	0x00014945
   14ac0:	000149c5 	.word	0x000149c5
   14ac4:	00012e41 	.word	0x00012e41
   14ac8:	000131d1 	.word	0x000131d1
   14acc:	000136e9 	.word	0x000136e9

00014ad0 <read_sensor_data>:
void read_sensor_data(){
   14ad0:	b580      	push	{r7, lr}
   14ad2:	b082      	sub	sp, #8
   14ad4:	af00      	add	r7, sp, #0
	init_bme680();
   14ad6:	4b2a      	ldr	r3, [pc, #168]	; (14b80 <read_sensor_data+0xb0>)
   14ad8:	4798      	blx	r3
	bme_temperature = 0;
   14ada:	4b2a      	ldr	r3, [pc, #168]	; (14b84 <read_sensor_data+0xb4>)
   14adc:	2200      	movs	r2, #0
   14ade:	601a      	str	r2, [r3, #0]
	bme_humidity = 0;
   14ae0:	4b29      	ldr	r3, [pc, #164]	; (14b88 <read_sensor_data+0xb8>)
   14ae2:	2200      	movs	r2, #0
   14ae4:	601a      	str	r2, [r3, #0]
	bme_pressure = 0;
   14ae6:	4b29      	ldr	r3, [pc, #164]	; (14b8c <read_sensor_data+0xbc>)
   14ae8:	2200      	movs	r2, #0
   14aea:	601a      	str	r2, [r3, #0]
	uint8_t rslt;
	uint16_t meas_period;
	bme680_get_profile_dur(&meas_period, &gas_sensor);
   14aec:	4a28      	ldr	r2, [pc, #160]	; (14b90 <read_sensor_data+0xc0>)
   14aee:	1d3b      	adds	r3, r7, #4
   14af0:	0011      	movs	r1, r2
   14af2:	0018      	movs	r0, r3
   14af4:	4b27      	ldr	r3, [pc, #156]	; (14b94 <read_sensor_data+0xc4>)
   14af6:	4798      	blx	r3
	
	user_delay_ms(meas_period); /* Delay till the measurement is ready */
   14af8:	1d3b      	adds	r3, r7, #4
   14afa:	881b      	ldrh	r3, [r3, #0]
   14afc:	0018      	movs	r0, r3
   14afe:	4b26      	ldr	r3, [pc, #152]	; (14b98 <read_sensor_data+0xc8>)
   14b00:	4798      	blx	r3

	rslt = bme680_get_sensor_data(&data, &gas_sensor);
   14b02:	4a23      	ldr	r2, [pc, #140]	; (14b90 <read_sensor_data+0xc0>)
   14b04:	4b25      	ldr	r3, [pc, #148]	; (14b9c <read_sensor_data+0xcc>)
   14b06:	0011      	movs	r1, r2
   14b08:	0018      	movs	r0, r3
   14b0a:	4b25      	ldr	r3, [pc, #148]	; (14ba0 <read_sensor_data+0xd0>)
   14b0c:	4798      	blx	r3
   14b0e:	0003      	movs	r3, r0
   14b10:	001a      	movs	r2, r3
   14b12:	1dfb      	adds	r3, r7, #7
   14b14:	701a      	strb	r2, [r3, #0]
	
	bme_temperature = data.temperature / 100.0f;
   14b16:	4b21      	ldr	r3, [pc, #132]	; (14b9c <read_sensor_data+0xcc>)
   14b18:	2204      	movs	r2, #4
   14b1a:	5e9a      	ldrsh	r2, [r3, r2]
   14b1c:	4b21      	ldr	r3, [pc, #132]	; (14ba4 <read_sensor_data+0xd4>)
   14b1e:	0010      	movs	r0, r2
   14b20:	4798      	blx	r3
   14b22:	1c02      	adds	r2, r0, #0
   14b24:	4b20      	ldr	r3, [pc, #128]	; (14ba8 <read_sensor_data+0xd8>)
   14b26:	4921      	ldr	r1, [pc, #132]	; (14bac <read_sensor_data+0xdc>)
   14b28:	1c10      	adds	r0, r2, #0
   14b2a:	4798      	blx	r3
   14b2c:	1c03      	adds	r3, r0, #0
   14b2e:	1c1a      	adds	r2, r3, #0
   14b30:	4b14      	ldr	r3, [pc, #80]	; (14b84 <read_sensor_data+0xb4>)
   14b32:	601a      	str	r2, [r3, #0]
	bme_pressure = data.pressure / 100.0f;
   14b34:	4b19      	ldr	r3, [pc, #100]	; (14b9c <read_sensor_data+0xcc>)
   14b36:	689a      	ldr	r2, [r3, #8]
   14b38:	4b1d      	ldr	r3, [pc, #116]	; (14bb0 <read_sensor_data+0xe0>)
   14b3a:	0010      	movs	r0, r2
   14b3c:	4798      	blx	r3
   14b3e:	1c02      	adds	r2, r0, #0
   14b40:	4b19      	ldr	r3, [pc, #100]	; (14ba8 <read_sensor_data+0xd8>)
   14b42:	491a      	ldr	r1, [pc, #104]	; (14bac <read_sensor_data+0xdc>)
   14b44:	1c10      	adds	r0, r2, #0
   14b46:	4798      	blx	r3
   14b48:	1c03      	adds	r3, r0, #0
   14b4a:	1c1a      	adds	r2, r3, #0
   14b4c:	4b0f      	ldr	r3, [pc, #60]	; (14b8c <read_sensor_data+0xbc>)
   14b4e:	601a      	str	r2, [r3, #0]
	bme_humidity = data.humidity / 1000.0f;
   14b50:	4b12      	ldr	r3, [pc, #72]	; (14b9c <read_sensor_data+0xcc>)
   14b52:	68da      	ldr	r2, [r3, #12]
   14b54:	4b16      	ldr	r3, [pc, #88]	; (14bb0 <read_sensor_data+0xe0>)
   14b56:	0010      	movs	r0, r2
   14b58:	4798      	blx	r3
   14b5a:	1c02      	adds	r2, r0, #0
   14b5c:	4b12      	ldr	r3, [pc, #72]	; (14ba8 <read_sensor_data+0xd8>)
   14b5e:	4915      	ldr	r1, [pc, #84]	; (14bb4 <read_sensor_data+0xe4>)
   14b60:	1c10      	adds	r0, r2, #0
   14b62:	4798      	blx	r3
   14b64:	1c03      	adds	r3, r0, #0
   14b66:	1c1a      	adds	r2, r3, #0
   14b68:	4b07      	ldr	r3, [pc, #28]	; (14b88 <read_sensor_data+0xb8>)
   14b6a:	601a      	str	r2, [r3, #0]
	bme_gas_resistence = data.gas_resistance;
   14b6c:	4b0b      	ldr	r3, [pc, #44]	; (14b9c <read_sensor_data+0xcc>)
   14b6e:	691b      	ldr	r3, [r3, #16]
   14b70:	001a      	movs	r2, r3
   14b72:	4b11      	ldr	r3, [pc, #68]	; (14bb8 <read_sensor_data+0xe8>)
   14b74:	601a      	str	r2, [r3, #0]
}
   14b76:	46c0      	nop			; (mov r8, r8)
   14b78:	46bd      	mov	sp, r7
   14b7a:	b002      	add	sp, #8
   14b7c:	bd80      	pop	{r7, pc}
   14b7e:	46c0      	nop			; (mov r8, r8)
   14b80:	00014a01 	.word	0x00014a01
   14b84:	20000394 	.word	0x20000394
   14b88:	20000398 	.word	0x20000398
   14b8c:	2000039c 	.word	0x2000039c
   14b90:	20004650 	.word	0x20004650
   14b94:	00013809 	.word	0x00013809
   14b98:	000149c5 	.word	0x000149c5
   14b9c:	200046a8 	.word	0x200046a8
   14ba0:	000138d5 	.word	0x000138d5
   14ba4:	00035ad5 	.word	0x00035ad5
   14ba8:	0003528d 	.word	0x0003528d
   14bac:	42c80000 	.word	0x42c80000
   14bb0:	00035b75 	.word	0x00035b75
   14bb4:	447a0000 	.word	0x447a0000
   14bb8:	200003a0 	.word	0x200003a0

00014bbc <getTemperature>:

float getTemperature(){
   14bbc:	b580      	push	{r7, lr}
   14bbe:	af00      	add	r7, sp, #0
	return bme_temperature;
   14bc0:	4b02      	ldr	r3, [pc, #8]	; (14bcc <getTemperature+0x10>)
   14bc2:	681b      	ldr	r3, [r3, #0]
}
   14bc4:	1c18      	adds	r0, r3, #0
   14bc6:	46bd      	mov	sp, r7
   14bc8:	bd80      	pop	{r7, pc}
   14bca:	46c0      	nop			; (mov r8, r8)
   14bcc:	20000394 	.word	0x20000394

00014bd0 <getHumidity>:
float getHumidity(){
   14bd0:	b580      	push	{r7, lr}
   14bd2:	af00      	add	r7, sp, #0
	return bme_humidity;
   14bd4:	4b02      	ldr	r3, [pc, #8]	; (14be0 <getHumidity+0x10>)
   14bd6:	681b      	ldr	r3, [r3, #0]
}
   14bd8:	1c18      	adds	r0, r3, #0
   14bda:	46bd      	mov	sp, r7
   14bdc:	bd80      	pop	{r7, pc}
   14bde:	46c0      	nop			; (mov r8, r8)
   14be0:	20000398 	.word	0x20000398

00014be4 <getPressure>:
float getPressure(){
   14be4:	b580      	push	{r7, lr}
   14be6:	af00      	add	r7, sp, #0
	return bme_pressure;
   14be8:	4b02      	ldr	r3, [pc, #8]	; (14bf4 <getPressure+0x10>)
   14bea:	681b      	ldr	r3, [r3, #0]
}
   14bec:	1c18      	adds	r0, r3, #0
   14bee:	46bd      	mov	sp, r7
   14bf0:	bd80      	pop	{r7, pc}
   14bf2:	46c0      	nop			; (mov r8, r8)
   14bf4:	2000039c 	.word	0x2000039c

00014bf8 <getGasResistance>:
int getGasResistance(){
   14bf8:	b580      	push	{r7, lr}
   14bfa:	af00      	add	r7, sp, #0
	return bme_gas_resistence;
   14bfc:	4b02      	ldr	r3, [pc, #8]	; (14c08 <getGasResistance+0x10>)
   14bfe:	681b      	ldr	r3, [r3, #0]
   14c00:	0018      	movs	r0, r3
   14c02:	46bd      	mov	sp, r7
   14c04:	bd80      	pop	{r7, pc}
   14c06:	46c0      	nop			; (mov r8, r8)
   14c08:	200003a0 	.word	0x200003a0

00014c0c <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   14c0c:	b580      	push	{r7, lr}
   14c0e:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   14c10:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   14c14:	4b02      	ldr	r3, [pc, #8]	; (14c20 <NVIC_SystemReset+0x14>)
   14c16:	4a03      	ldr	r2, [pc, #12]	; (14c24 <NVIC_SystemReset+0x18>)
   14c18:	60da      	str	r2, [r3, #12]
   14c1a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   14c1e:	e7fe      	b.n	14c1e <NVIC_SystemReset+0x12>
   14c20:	e000ed00 	.word	0xe000ed00
   14c24:	05fa0004 	.word	0x05fa0004

00014c28 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   14c28:	b580      	push	{r7, lr}
   14c2a:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   14c2c:	4b02      	ldr	r3, [pc, #8]	; (14c38 <system_reset+0x10>)
   14c2e:	4798      	blx	r3
}
   14c30:	46c0      	nop			; (mov r8, r8)
   14c32:	46bd      	mov	sp, r7
   14c34:	bd80      	pop	{r7, pc}
   14c36:	46c0      	nop			; (mov r8, r8)
   14c38:	00014c0d 	.word	0x00014c0d

00014c3c <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   14c3c:	b580      	push	{r7, lr}
   14c3e:	b086      	sub	sp, #24
   14c40:	af00      	add	r7, sp, #0
   14c42:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   14c44:	4b9c      	ldr	r3, [pc, #624]	; (14eb8 <vCommandConsoleTask+0x27c>)
   14c46:	0018      	movs	r0, r3
   14c48:	4b9c      	ldr	r3, [pc, #624]	; (14ebc <vCommandConsoleTask+0x280>)
   14c4a:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
   14c4c:	4b9c      	ldr	r3, [pc, #624]	; (14ec0 <vCommandConsoleTask+0x284>)
   14c4e:	0018      	movs	r0, r3
   14c50:	4b9a      	ldr	r3, [pc, #616]	; (14ebc <vCommandConsoleTask+0x280>)
   14c52:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   14c54:	4b9b      	ldr	r3, [pc, #620]	; (14ec4 <vCommandConsoleTask+0x288>)
   14c56:	0018      	movs	r0, r3
   14c58:	4b98      	ldr	r3, [pc, #608]	; (14ebc <vCommandConsoleTask+0x280>)
   14c5a:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   14c5c:	4b9a      	ldr	r3, [pc, #616]	; (14ec8 <vCommandConsoleTask+0x28c>)
   14c5e:	0018      	movs	r0, r3
   14c60:	4b96      	ldr	r3, [pc, #600]	; (14ebc <vCommandConsoleTask+0x280>)
   14c62:	4798      	blx	r3
    // FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
    // FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
    // FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
    // FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   14c64:	4b99      	ldr	r3, [pc, #612]	; (14ecc <vCommandConsoleTask+0x290>)
   14c66:	0018      	movs	r0, r3
   14c68:	4b94      	ldr	r3, [pc, #592]	; (14ebc <vCommandConsoleTask+0x280>)
   14c6a:	4798      	blx	r3
	//FreeRTOS_CLIRegisterCommand(&xDC);
	//FreeRTOS_CLIRegisterCommand(&xClear);
	FreeRTOS_CLIRegisterCommand(&xLock);
   14c6c:	4b98      	ldr	r3, [pc, #608]	; (14ed0 <vCommandConsoleTask+0x294>)
   14c6e:	0018      	movs	r0, r3
   14c70:	4b92      	ldr	r3, [pc, #584]	; (14ebc <vCommandConsoleTask+0x280>)
   14c72:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xUNLock);
   14c74:	4b97      	ldr	r3, [pc, #604]	; (14ed4 <vCommandConsoleTask+0x298>)
   14c76:	0018      	movs	r0, r3
   14c78:	4b90      	ldr	r3, [pc, #576]	; (14ebc <vCommandConsoleTask+0x280>)
   14c7a:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xBME);
   14c7c:	4b96      	ldr	r3, [pc, #600]	; (14ed8 <vCommandConsoleTask+0x29c>)
   14c7e:	0018      	movs	r0, r3
   14c80:	4b8e      	ldr	r3, [pc, #568]	; (14ebc <vCommandConsoleTask+0x280>)
   14c82:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   14c84:	2317      	movs	r3, #23
   14c86:	18fb      	adds	r3, r7, r3
   14c88:	2200      	movs	r2, #0
   14c8a:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   14c8c:	4b93      	ldr	r3, [pc, #588]	; (14edc <vCommandConsoleTask+0x2a0>)
   14c8e:	0018      	movs	r0, r3
   14c90:	4b93      	ldr	r3, [pc, #588]	; (14ee0 <vCommandConsoleTask+0x2a4>)
   14c92:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   14c94:	2203      	movs	r2, #3
   14c96:	2100      	movs	r1, #0
   14c98:	2001      	movs	r0, #1
   14c9a:	4b92      	ldr	r3, [pc, #584]	; (14ee4 <vCommandConsoleTask+0x2a8>)
   14c9c:	4798      	blx	r3
   14c9e:	0002      	movs	r2, r0
   14ca0:	4b91      	ldr	r3, [pc, #580]	; (14ee8 <vCommandConsoleTask+0x2ac>)
   14ca2:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   14ca4:	4b90      	ldr	r3, [pc, #576]	; (14ee8 <vCommandConsoleTask+0x2ac>)
   14ca6:	681b      	ldr	r3, [r3, #0]
   14ca8:	2b00      	cmp	r3, #0
   14caa:	d107      	bne.n	14cbc <vCommandConsoleTask+0x80>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   14cac:	4b8f      	ldr	r3, [pc, #572]	; (14eec <vCommandConsoleTask+0x2b0>)
   14cae:	0019      	movs	r1, r3
   14cb0:	2003      	movs	r0, #3
   14cb2:	4b8f      	ldr	r3, [pc, #572]	; (14ef0 <vCommandConsoleTask+0x2b4>)
   14cb4:	4798      	blx	r3
        vTaskSuspend(NULL);
   14cb6:	2000      	movs	r0, #0
   14cb8:	4b8e      	ldr	r3, [pc, #568]	; (14ef4 <vCommandConsoleTask+0x2b8>)
   14cba:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   14cbc:	230c      	movs	r3, #12
   14cbe:	18fb      	adds	r3, r7, r3
   14cc0:	0018      	movs	r0, r3
   14cc2:	4b8d      	ldr	r3, [pc, #564]	; (14ef8 <vCommandConsoleTask+0x2bc>)
   14cc4:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   14cc6:	230c      	movs	r3, #12
   14cc8:	18fb      	adds	r3, r7, r3
   14cca:	781b      	ldrb	r3, [r3, #0]
   14ccc:	2b0a      	cmp	r3, #10
   14cce:	d004      	beq.n	14cda <vCommandConsoleTask+0x9e>
   14cd0:	230c      	movs	r3, #12
   14cd2:	18fb      	adds	r3, r7, r3
   14cd4:	781b      	ldrb	r3, [r3, #0]
   14cd6:	2b0d      	cmp	r3, #13
   14cd8:	d137      	bne.n	14d4a <vCommandConsoleTask+0x10e>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   14cda:	4b88      	ldr	r3, [pc, #544]	; (14efc <vCommandConsoleTask+0x2c0>)
   14cdc:	0018      	movs	r0, r3
   14cde:	4b80      	ldr	r3, [pc, #512]	; (14ee0 <vCommandConsoleTask+0x2a4>)
   14ce0:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   14ce2:	4b87      	ldr	r3, [pc, #540]	; (14f00 <vCommandConsoleTask+0x2c4>)
   14ce4:	2200      	movs	r2, #0
   14ce6:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   14ce8:	4b86      	ldr	r3, [pc, #536]	; (14f04 <vCommandConsoleTask+0x2c8>)
   14cea:	2200      	movs	r2, #0
   14cec:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   14cee:	4986      	ldr	r1, [pc, #536]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14cf0:	4b86      	ldr	r3, [pc, #536]	; (14f0c <vCommandConsoleTask+0x2d0>)
   14cf2:	2231      	movs	r2, #49	; 0x31
   14cf4:	0018      	movs	r0, r3
   14cf6:	4b86      	ldr	r3, [pc, #536]	; (14f10 <vCommandConsoleTask+0x2d4>)
   14cf8:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   14cfa:	4b84      	ldr	r3, [pc, #528]	; (14f0c <vCommandConsoleTask+0x2d0>)
   14cfc:	2231      	movs	r2, #49	; 0x31
   14cfe:	2100      	movs	r1, #0
   14d00:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   14d02:	4984      	ldr	r1, [pc, #528]	; (14f14 <vCommandConsoleTask+0x2d8>)
   14d04:	4b80      	ldr	r3, [pc, #512]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14d06:	2264      	movs	r2, #100	; 0x64
   14d08:	0018      	movs	r0, r3
   14d0a:	4b83      	ldr	r3, [pc, #524]	; (14f18 <vCommandConsoleTask+0x2dc>)
   14d0c:	4798      	blx	r3
   14d0e:	0003      	movs	r3, r0
   14d10:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   14d12:	4b80      	ldr	r3, [pc, #512]	; (14f14 <vCommandConsoleTask+0x2d8>)
   14d14:	2263      	movs	r2, #99	; 0x63
   14d16:	2100      	movs	r1, #0
   14d18:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   14d1a:	4b7e      	ldr	r3, [pc, #504]	; (14f14 <vCommandConsoleTask+0x2d8>)
   14d1c:	0018      	movs	r0, r3
   14d1e:	4b70      	ldr	r3, [pc, #448]	; (14ee0 <vCommandConsoleTask+0x2a4>)
   14d20:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   14d22:	693b      	ldr	r3, [r7, #16]
   14d24:	2b00      	cmp	r3, #0
   14d26:	d1ec      	bne.n	14d02 <vCommandConsoleTask+0xc6>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   14d28:	2317      	movs	r3, #23
   14d2a:	18fb      	adds	r3, r7, r3
   14d2c:	2200      	movs	r2, #0
   14d2e:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   14d30:	4b75      	ldr	r3, [pc, #468]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14d32:	2232      	movs	r2, #50	; 0x32
   14d34:	2100      	movs	r1, #0
   14d36:	0018      	movs	r0, r3
   14d38:	4b78      	ldr	r3, [pc, #480]	; (14f1c <vCommandConsoleTask+0x2e0>)
   14d3a:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   14d3c:	4b75      	ldr	r3, [pc, #468]	; (14f14 <vCommandConsoleTask+0x2d8>)
   14d3e:	2264      	movs	r2, #100	; 0x64
   14d40:	2100      	movs	r1, #0
   14d42:	0018      	movs	r0, r3
   14d44:	4b75      	ldr	r3, [pc, #468]	; (14f1c <vCommandConsoleTask+0x2e0>)
   14d46:	4798      	blx	r3
   14d48:	e0b5      	b.n	14eb6 <vCommandConsoleTask+0x27a>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   14d4a:	4b6d      	ldr	r3, [pc, #436]	; (14f00 <vCommandConsoleTask+0x2c4>)
   14d4c:	781b      	ldrb	r3, [r3, #0]
   14d4e:	2b00      	cmp	r3, #0
   14d50:	d059      	beq.n	14e06 <vCommandConsoleTask+0x1ca>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   14d52:	4b6c      	ldr	r3, [pc, #432]	; (14f04 <vCommandConsoleTask+0x2c8>)
   14d54:	781b      	ldrb	r3, [r3, #0]
   14d56:	2b03      	cmp	r3, #3
   14d58:	d80c      	bhi.n	14d74 <vCommandConsoleTask+0x138>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   14d5a:	4b6a      	ldr	r3, [pc, #424]	; (14f04 <vCommandConsoleTask+0x2c8>)
   14d5c:	781b      	ldrb	r3, [r3, #0]
   14d5e:	1c5a      	adds	r2, r3, #1
   14d60:	b2d1      	uxtb	r1, r2
   14d62:	4a68      	ldr	r2, [pc, #416]	; (14f04 <vCommandConsoleTask+0x2c8>)
   14d64:	7011      	strb	r1, [r2, #0]
   14d66:	001a      	movs	r2, r3
   14d68:	230c      	movs	r3, #12
   14d6a:	18fb      	adds	r3, r7, r3
   14d6c:	7819      	ldrb	r1, [r3, #0]
   14d6e:	4b6c      	ldr	r3, [pc, #432]	; (14f20 <vCommandConsoleTask+0x2e4>)
   14d70:	5499      	strb	r1, [r3, r2]
   14d72:	e005      	b.n	14d80 <vCommandConsoleTask+0x144>
                } else {
                    isEscapeCode = false;
   14d74:	4b62      	ldr	r3, [pc, #392]	; (14f00 <vCommandConsoleTask+0x2c4>)
   14d76:	2200      	movs	r2, #0
   14d78:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   14d7a:	4b62      	ldr	r3, [pc, #392]	; (14f04 <vCommandConsoleTask+0x2c8>)
   14d7c:	2200      	movs	r2, #0
   14d7e:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   14d80:	4b60      	ldr	r3, [pc, #384]	; (14f04 <vCommandConsoleTask+0x2c8>)
   14d82:	781b      	ldrb	r3, [r3, #0]
   14d84:	2b01      	cmp	r3, #1
   14d86:	d999      	bls.n	14cbc <vCommandConsoleTask+0x80>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   14d88:	4a66      	ldr	r2, [pc, #408]	; (14f24 <vCommandConsoleTask+0x2e8>)
   14d8a:	4b65      	ldr	r3, [pc, #404]	; (14f20 <vCommandConsoleTask+0x2e4>)
   14d8c:	0011      	movs	r1, r2
   14d8e:	0018      	movs	r0, r3
   14d90:	4b65      	ldr	r3, [pc, #404]	; (14f28 <vCommandConsoleTask+0x2ec>)
   14d92:	4798      	blx	r3
   14d94:	1e03      	subs	r3, r0, #0
   14d96:	d02f      	beq.n	14df8 <vCommandConsoleTask+0x1bc>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   14d98:	4964      	ldr	r1, [pc, #400]	; (14f2c <vCommandConsoleTask+0x2f0>)
   14d9a:	4b5b      	ldr	r3, [pc, #364]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14d9c:	221b      	movs	r2, #27
   14d9e:	0018      	movs	r0, r3
   14da0:	4b63      	ldr	r3, [pc, #396]	; (14f30 <vCommandConsoleTask+0x2f4>)
   14da2:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   14da4:	4b58      	ldr	r3, [pc, #352]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14da6:	0018      	movs	r0, r3
   14da8:	4b4d      	ldr	r3, [pc, #308]	; (14ee0 <vCommandConsoleTask+0x2a4>)
   14daa:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   14dac:	2317      	movs	r3, #23
   14dae:	18fb      	adds	r3, r7, r3
   14db0:	2200      	movs	r2, #0
   14db2:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   14db4:	4b54      	ldr	r3, [pc, #336]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14db6:	2232      	movs	r2, #50	; 0x32
   14db8:	2100      	movs	r1, #0
   14dba:	0018      	movs	r0, r3
   14dbc:	4b57      	ldr	r3, [pc, #348]	; (14f1c <vCommandConsoleTask+0x2e0>)
   14dbe:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   14dc0:	4952      	ldr	r1, [pc, #328]	; (14f0c <vCommandConsoleTask+0x2d0>)
   14dc2:	4b51      	ldr	r3, [pc, #324]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14dc4:	2231      	movs	r2, #49	; 0x31
   14dc6:	0018      	movs	r0, r3
   14dc8:	4b51      	ldr	r3, [pc, #324]	; (14f10 <vCommandConsoleTask+0x2d4>)
   14dca:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   14dcc:	4b4e      	ldr	r3, [pc, #312]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14dce:	0018      	movs	r0, r3
   14dd0:	4b58      	ldr	r3, [pc, #352]	; (14f34 <vCommandConsoleTask+0x2f8>)
   14dd2:	4798      	blx	r3
   14dd4:	0003      	movs	r3, r0
   14dd6:	2b30      	cmp	r3, #48	; 0x30
   14dd8:	d806      	bhi.n	14de8 <vCommandConsoleTask+0x1ac>
   14dda:	4b4c      	ldr	r3, [pc, #304]	; (14f0c <vCommandConsoleTask+0x2d0>)
   14ddc:	0018      	movs	r0, r3
   14dde:	4b55      	ldr	r3, [pc, #340]	; (14f34 <vCommandConsoleTask+0x2f8>)
   14de0:	4798      	blx	r3
   14de2:	0003      	movs	r3, r0
   14de4:	b2da      	uxtb	r2, r3
   14de6:	e000      	b.n	14dea <vCommandConsoleTask+0x1ae>
   14de8:	2231      	movs	r2, #49	; 0x31
   14dea:	2317      	movs	r3, #23
   14dec:	18fb      	adds	r3, r7, r3
   14dee:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   14df0:	4b45      	ldr	r3, [pc, #276]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14df2:	0018      	movs	r0, r3
   14df4:	4b3a      	ldr	r3, [pc, #232]	; (14ee0 <vCommandConsoleTask+0x2a4>)
   14df6:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   14df8:	4b41      	ldr	r3, [pc, #260]	; (14f00 <vCommandConsoleTask+0x2c4>)
   14dfa:	2200      	movs	r2, #0
   14dfc:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   14dfe:	4b41      	ldr	r3, [pc, #260]	; (14f04 <vCommandConsoleTask+0x2c8>)
   14e00:	2200      	movs	r2, #0
   14e02:	701a      	strb	r2, [r3, #0]
   14e04:	e75a      	b.n	14cbc <vCommandConsoleTask+0x80>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   14e06:	230c      	movs	r3, #12
   14e08:	18fb      	adds	r3, r7, r3
   14e0a:	781b      	ldrb	r3, [r3, #0]
   14e0c:	2b0d      	cmp	r3, #13
   14e0e:	d100      	bne.n	14e12 <vCommandConsoleTask+0x1d6>
   14e10:	e754      	b.n	14cbc <vCommandConsoleTask+0x80>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   14e12:	230c      	movs	r3, #12
   14e14:	18fb      	adds	r3, r7, r3
   14e16:	781b      	ldrb	r3, [r3, #0]
   14e18:	2b08      	cmp	r3, #8
   14e1a:	d004      	beq.n	14e26 <vCommandConsoleTask+0x1ea>
   14e1c:	230c      	movs	r3, #12
   14e1e:	18fb      	adds	r3, r7, r3
   14e20:	781b      	ldrb	r3, [r3, #0]
   14e22:	2b7f      	cmp	r3, #127	; 0x7f
   14e24:	d11c      	bne.n	14e60 <vCommandConsoleTask+0x224>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   14e26:	2308      	movs	r3, #8
   14e28:	18fb      	adds	r3, r7, r3
   14e2a:	4a43      	ldr	r2, [pc, #268]	; (14f38 <vCommandConsoleTask+0x2fc>)
   14e2c:	6812      	ldr	r2, [r2, #0]
   14e2e:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   14e30:	2308      	movs	r3, #8
   14e32:	18fb      	adds	r3, r7, r3
   14e34:	0018      	movs	r0, r3
   14e36:	4b2a      	ldr	r3, [pc, #168]	; (14ee0 <vCommandConsoleTask+0x2a4>)
   14e38:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   14e3a:	2317      	movs	r3, #23
   14e3c:	18fb      	adds	r3, r7, r3
   14e3e:	781b      	ldrb	r3, [r3, #0]
   14e40:	2b00      	cmp	r3, #0
   14e42:	d037      	beq.n	14eb4 <vCommandConsoleTask+0x278>
                    cInputIndex--;
   14e44:	2317      	movs	r3, #23
   14e46:	18fb      	adds	r3, r7, r3
   14e48:	781a      	ldrb	r2, [r3, #0]
   14e4a:	2317      	movs	r3, #23
   14e4c:	18fb      	adds	r3, r7, r3
   14e4e:	3a01      	subs	r2, #1
   14e50:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   14e52:	2317      	movs	r3, #23
   14e54:	18fb      	adds	r3, r7, r3
   14e56:	781b      	ldrb	r3, [r3, #0]
   14e58:	4a2b      	ldr	r2, [pc, #172]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14e5a:	2100      	movs	r1, #0
   14e5c:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   14e5e:	e029      	b.n	14eb4 <vCommandConsoleTask+0x278>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   14e60:	230c      	movs	r3, #12
   14e62:	18fb      	adds	r3, r7, r3
   14e64:	781b      	ldrb	r3, [r3, #0]
   14e66:	2b1b      	cmp	r3, #27
   14e68:	d106      	bne.n	14e78 <vCommandConsoleTask+0x23c>
                isEscapeCode = true;  // Next characters will be code arguments
   14e6a:	4b25      	ldr	r3, [pc, #148]	; (14f00 <vCommandConsoleTask+0x2c4>)
   14e6c:	2201      	movs	r2, #1
   14e6e:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   14e70:	4b24      	ldr	r3, [pc, #144]	; (14f04 <vCommandConsoleTask+0x2c8>)
   14e72:	2200      	movs	r2, #0
   14e74:	701a      	strb	r2, [r3, #0]
   14e76:	e721      	b.n	14cbc <vCommandConsoleTask+0x80>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   14e78:	2317      	movs	r3, #23
   14e7a:	18fb      	adds	r3, r7, r3
   14e7c:	781b      	ldrb	r3, [r3, #0]
   14e7e:	2b31      	cmp	r3, #49	; 0x31
   14e80:	d80e      	bhi.n	14ea0 <vCommandConsoleTask+0x264>
                    pcInputString[cInputIndex] = cRxedChar[0];
   14e82:	2317      	movs	r3, #23
   14e84:	18fb      	adds	r3, r7, r3
   14e86:	781b      	ldrb	r3, [r3, #0]
   14e88:	220c      	movs	r2, #12
   14e8a:	18ba      	adds	r2, r7, r2
   14e8c:	7811      	ldrb	r1, [r2, #0]
   14e8e:	4a1e      	ldr	r2, [pc, #120]	; (14f08 <vCommandConsoleTask+0x2cc>)
   14e90:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   14e92:	2317      	movs	r3, #23
   14e94:	18fb      	adds	r3, r7, r3
   14e96:	781a      	ldrb	r2, [r3, #0]
   14e98:	2317      	movs	r3, #23
   14e9a:	18fb      	adds	r3, r7, r3
   14e9c:	3201      	adds	r2, #1
   14e9e:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   14ea0:	230c      	movs	r3, #12
   14ea2:	18fb      	adds	r3, r7, r3
   14ea4:	2200      	movs	r2, #0
   14ea6:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   14ea8:	230c      	movs	r3, #12
   14eaa:	18fb      	adds	r3, r7, r3
   14eac:	0018      	movs	r0, r3
   14eae:	4b0c      	ldr	r3, [pc, #48]	; (14ee0 <vCommandConsoleTask+0x2a4>)
   14eb0:	4798      	blx	r3
   14eb2:	e703      	b.n	14cbc <vCommandConsoleTask+0x80>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   14eb4:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   14eb6:	e701      	b.n	14cbc <vCommandConsoleTask+0x80>
   14eb8:	0003912c 	.word	0x0003912c
   14ebc:	0001a2b9 	.word	0x0001a2b9
   14ec0:	0003911c 	.word	0x0003911c
   14ec4:	0003918c 	.word	0x0003918c
   14ec8:	0003915c 	.word	0x0003915c
   14ecc:	0003916c 	.word	0x0003916c
   14ed0:	0003913c 	.word	0x0003913c
   14ed4:	0003914c 	.word	0x0003914c
   14ed8:	0003917c 	.word	0x0003917c
   14edc:	00038db0 	.word	0x00038db0
   14ee0:	000201e5 	.word	0x000201e5
   14ee4:	0001c885 	.word	0x0001c885
   14ee8:	200046bc 	.word	0x200046bc
   14eec:	00038fd8 	.word	0x00038fd8
   14ef0:	000202d1 	.word	0x000202d1
   14ef4:	0001e671 	.word	0x0001e671
   14ef8:	00014f3d 	.word	0x00014f3d
   14efc:	00038ff8 	.word	0x00038ff8
   14f00:	200003b4 	.word	0x200003b4
   14f04:	200003b5 	.word	0x200003b5
   14f08:	200003ec 	.word	0x200003ec
   14f0c:	200003b8 	.word	0x200003b8
   14f10:	00037d33 	.word	0x00037d33
   14f14:	20000420 	.word	0x20000420
   14f18:	0001a329 	.word	0x0001a329
   14f1c:	0003794b 	.word	0x0003794b
   14f20:	20000484 	.word	0x20000484
   14f24:	00038ffc 	.word	0x00038ffc
   14f28:	00037c4d 	.word	0x00037c4d
   14f2c:	00039000 	.word	0x00039000
   14f30:	00037c09 	.word	0x00037c09
   14f34:	00037d03 	.word	0x00037d03
   14f38:	00039008 	.word	0x00039008

00014f3c <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   14f3c:	b580      	push	{r7, lr}
   14f3e:	b084      	sub	sp, #16
   14f40:	af00      	add	r7, sp, #0
   14f42:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   14f44:	687b      	ldr	r3, [r7, #4]
   14f46:	0018      	movs	r0, r3
   14f48:	4b0c      	ldr	r3, [pc, #48]	; (14f7c <FreeRTOS_read+0x40>)
   14f4a:	4798      	blx	r3
   14f4c:	0003      	movs	r3, r0
   14f4e:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   14f50:	e00d      	b.n	14f6e <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   14f52:	4b0b      	ldr	r3, [pc, #44]	; (14f80 <FreeRTOS_read+0x44>)
   14f54:	681a      	ldr	r2, [r3, #0]
   14f56:	2301      	movs	r3, #1
   14f58:	425b      	negs	r3, r3
   14f5a:	0019      	movs	r1, r3
   14f5c:	0010      	movs	r0, r2
   14f5e:	4b09      	ldr	r3, [pc, #36]	; (14f84 <FreeRTOS_read+0x48>)
   14f60:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   14f62:	687b      	ldr	r3, [r7, #4]
   14f64:	0018      	movs	r0, r3
   14f66:	4b05      	ldr	r3, [pc, #20]	; (14f7c <FreeRTOS_read+0x40>)
   14f68:	4798      	blx	r3
   14f6a:	0003      	movs	r3, r0
   14f6c:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   14f6e:	68fb      	ldr	r3, [r7, #12]
   14f70:	3301      	adds	r3, #1
   14f72:	d0ee      	beq.n	14f52 <FreeRTOS_read+0x16>
    }
}
   14f74:	46c0      	nop			; (mov r8, r8)
   14f76:	46bd      	mov	sp, r7
   14f78:	b004      	add	sp, #16
   14f7a:	bd80      	pop	{r7, pc}
   14f7c:	00020281 	.word	0x00020281
   14f80:	200046bc 	.word	0x200046bc
   14f84:	0001d83d 	.word	0x0001d83d

00014f88 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   14f88:	b580      	push	{r7, lr}
   14f8a:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   14f8c:	4b0a      	ldr	r3, [pc, #40]	; (14fb8 <CliCharReadySemaphoreGiveFromISR+0x30>)
   14f8e:	2200      	movs	r2, #0
   14f90:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   14f92:	4b0a      	ldr	r3, [pc, #40]	; (14fbc <CliCharReadySemaphoreGiveFromISR+0x34>)
   14f94:	681b      	ldr	r3, [r3, #0]
   14f96:	4a08      	ldr	r2, [pc, #32]	; (14fb8 <CliCharReadySemaphoreGiveFromISR+0x30>)
   14f98:	0011      	movs	r1, r2
   14f9a:	0018      	movs	r0, r3
   14f9c:	4b08      	ldr	r3, [pc, #32]	; (14fc0 <CliCharReadySemaphoreGiveFromISR+0x38>)
   14f9e:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14fa0:	4b05      	ldr	r3, [pc, #20]	; (14fb8 <CliCharReadySemaphoreGiveFromISR+0x30>)
   14fa2:	681b      	ldr	r3, [r3, #0]
   14fa4:	2b00      	cmp	r3, #0
   14fa6:	d003      	beq.n	14fb0 <CliCharReadySemaphoreGiveFromISR+0x28>
   14fa8:	4b06      	ldr	r3, [pc, #24]	; (14fc4 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   14faa:	2280      	movs	r2, #128	; 0x80
   14fac:	0552      	lsls	r2, r2, #21
   14fae:	601a      	str	r2, [r3, #0]
}
   14fb0:	46c0      	nop			; (mov r8, r8)
   14fb2:	46bd      	mov	sp, r7
   14fb4:	bd80      	pop	{r7, pc}
   14fb6:	46c0      	nop			; (mov r8, r8)
   14fb8:	20000488 	.word	0x20000488
   14fbc:	200046bc 	.word	0x200046bc
   14fc0:	0001d1b5 	.word	0x0001d1b5
   14fc4:	e000ed04 	.word	0xe000ed04

00014fc8 <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14fc8:	b5b0      	push	{r4, r5, r7, lr}
   14fca:	b08a      	sub	sp, #40	; 0x28
   14fcc:	af02      	add	r7, sp, #8
   14fce:	60f8      	str	r0, [r7, #12]
   14fd0:	60b9      	str	r1, [r7, #8]
   14fd2:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   14fd4:	4b49      	ldr	r3, [pc, #292]	; (150fc <CLI_GetImuData+0x134>)
   14fd6:	4798      	blx	r3
   14fd8:	0003      	movs	r3, r0
   14fda:	61fb      	str	r3, [r7, #28]
	struct ImuDataPacket imuPacket;

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
   14fdc:	231b      	movs	r3, #27
   14fde:	18fa      	adds	r2, r7, r3
   14fe0:	69fb      	ldr	r3, [r7, #28]
   14fe2:	0011      	movs	r1, r2
   14fe4:	0018      	movs	r0, r3
   14fe6:	4b46      	ldr	r3, [pc, #280]	; (15100 <CLI_GetImuData+0x138>)
   14fe8:	4798      	blx	r3

    if (reg) {
   14fea:	231b      	movs	r3, #27
   14fec:	18fb      	adds	r3, r7, r3
   14fee:	781b      	ldrb	r3, [r3, #0]
   14ff0:	2b00      	cmp	r3, #0
   14ff2:	d064      	beq.n	150be <CLI_GetImuData+0xf6>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   14ff4:	4b43      	ldr	r3, [pc, #268]	; (15104 <CLI_GetImuData+0x13c>)
   14ff6:	2206      	movs	r2, #6
   14ff8:	2100      	movs	r1, #0
   14ffa:	0018      	movs	r0, r3
   14ffc:	4b42      	ldr	r3, [pc, #264]	; (15108 <CLI_GetImuData+0x140>)
   14ffe:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
   15000:	4a40      	ldr	r2, [pc, #256]	; (15104 <CLI_GetImuData+0x13c>)
   15002:	69fb      	ldr	r3, [r7, #28]
   15004:	0011      	movs	r1, r2
   15006:	0018      	movs	r0, r3
   15008:	4b40      	ldr	r3, [pc, #256]	; (1510c <CLI_GetImuData+0x144>)
   1500a:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
   1500c:	4b3d      	ldr	r3, [pc, #244]	; (15104 <CLI_GetImuData+0x13c>)
   1500e:	2200      	movs	r2, #0
   15010:	5e9b      	ldrsh	r3, [r3, r2]
   15012:	0018      	movs	r0, r3
   15014:	4b3e      	ldr	r3, [pc, #248]	; (15110 <CLI_GetImuData+0x148>)
   15016:	4798      	blx	r3
   15018:	1c02      	adds	r2, r0, #0
   1501a:	4b3e      	ldr	r3, [pc, #248]	; (15114 <CLI_GetImuData+0x14c>)
   1501c:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
   1501e:	4b39      	ldr	r3, [pc, #228]	; (15104 <CLI_GetImuData+0x13c>)
   15020:	2202      	movs	r2, #2
   15022:	5e9b      	ldrsh	r3, [r3, r2]
   15024:	0018      	movs	r0, r3
   15026:	4b3a      	ldr	r3, [pc, #232]	; (15110 <CLI_GetImuData+0x148>)
   15028:	4798      	blx	r3
   1502a:	1c02      	adds	r2, r0, #0
   1502c:	4b39      	ldr	r3, [pc, #228]	; (15114 <CLI_GetImuData+0x14c>)
   1502e:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
   15030:	4b34      	ldr	r3, [pc, #208]	; (15104 <CLI_GetImuData+0x13c>)
   15032:	2204      	movs	r2, #4
   15034:	5e9b      	ldrsh	r3, [r3, r2]
   15036:	0018      	movs	r0, r3
   15038:	4b35      	ldr	r3, [pc, #212]	; (15110 <CLI_GetImuData+0x148>)
   1503a:	4798      	blx	r3
   1503c:	1c02      	adds	r2, r0, #0
   1503e:	4b35      	ldr	r3, [pc, #212]	; (15114 <CLI_GetImuData+0x14c>)
   15040:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   15042:	4b34      	ldr	r3, [pc, #208]	; (15114 <CLI_GetImuData+0x14c>)
   15044:	681a      	ldr	r2, [r3, #0]
   15046:	4b34      	ldr	r3, [pc, #208]	; (15118 <CLI_GetImuData+0x150>)
   15048:	1c10      	adds	r0, r2, #0
   1504a:	4798      	blx	r3
   1504c:	0005      	movs	r5, r0
   1504e:	4b31      	ldr	r3, [pc, #196]	; (15114 <CLI_GetImuData+0x14c>)
   15050:	685a      	ldr	r2, [r3, #4]
   15052:	4b31      	ldr	r3, [pc, #196]	; (15118 <CLI_GetImuData+0x150>)
   15054:	1c10      	adds	r0, r2, #0
   15056:	4798      	blx	r3
   15058:	0004      	movs	r4, r0
   1505a:	4b2e      	ldr	r3, [pc, #184]	; (15114 <CLI_GetImuData+0x14c>)
   1505c:	689a      	ldr	r2, [r3, #8]
   1505e:	4b2e      	ldr	r3, [pc, #184]	; (15118 <CLI_GetImuData+0x150>)
   15060:	1c10      	adds	r0, r2, #0
   15062:	4798      	blx	r3
   15064:	0003      	movs	r3, r0
   15066:	4a2d      	ldr	r2, [pc, #180]	; (1511c <CLI_GetImuData+0x154>)
   15068:	68b9      	ldr	r1, [r7, #8]
   1506a:	68f8      	ldr	r0, [r7, #12]
   1506c:	9301      	str	r3, [sp, #4]
   1506e:	9400      	str	r4, [sp, #0]
   15070:	002b      	movs	r3, r5
   15072:	4c2b      	ldr	r4, [pc, #172]	; (15120 <CLI_GetImuData+0x158>)
   15074:	47a0      	blx	r4
		imuPacket.xmg = (int)acceleration_mg[0];
   15076:	4b27      	ldr	r3, [pc, #156]	; (15114 <CLI_GetImuData+0x14c>)
   15078:	681a      	ldr	r2, [r3, #0]
   1507a:	4b27      	ldr	r3, [pc, #156]	; (15118 <CLI_GetImuData+0x150>)
   1507c:	1c10      	adds	r0, r2, #0
   1507e:	4798      	blx	r3
   15080:	0003      	movs	r3, r0
   15082:	b21a      	sxth	r2, r3
   15084:	2314      	movs	r3, #20
   15086:	18fb      	adds	r3, r7, r3
   15088:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = (int)acceleration_mg[1];
   1508a:	4b22      	ldr	r3, [pc, #136]	; (15114 <CLI_GetImuData+0x14c>)
   1508c:	685a      	ldr	r2, [r3, #4]
   1508e:	4b22      	ldr	r3, [pc, #136]	; (15118 <CLI_GetImuData+0x150>)
   15090:	1c10      	adds	r0, r2, #0
   15092:	4798      	blx	r3
   15094:	0003      	movs	r3, r0
   15096:	b21a      	sxth	r2, r3
   15098:	2314      	movs	r3, #20
   1509a:	18fb      	adds	r3, r7, r3
   1509c:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = (int)acceleration_mg[2];
   1509e:	4b1d      	ldr	r3, [pc, #116]	; (15114 <CLI_GetImuData+0x14c>)
   150a0:	689a      	ldr	r2, [r3, #8]
   150a2:	4b1d      	ldr	r3, [pc, #116]	; (15118 <CLI_GetImuData+0x150>)
   150a4:	1c10      	adds	r0, r2, #0
   150a6:	4798      	blx	r3
   150a8:	0003      	movs	r3, r0
   150aa:	b21a      	sxth	r2, r3
   150ac:	2314      	movs	r3, #20
   150ae:	18fb      	adds	r3, r7, r3
   150b0:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   150b2:	2314      	movs	r3, #20
   150b4:	18fb      	adds	r3, r7, r3
   150b6:	0018      	movs	r0, r3
   150b8:	4b1a      	ldr	r3, [pc, #104]	; (15124 <CLI_GetImuData+0x15c>)
   150ba:	4798      	blx	r3
   150bc:	e019      	b.n	150f2 <CLI_GetImuData+0x12a>
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! Sending dummy data \r\n");
   150be:	4a1a      	ldr	r2, [pc, #104]	; (15128 <CLI_GetImuData+0x160>)
   150c0:	68b9      	ldr	r1, [r7, #8]
   150c2:	68fb      	ldr	r3, [r7, #12]
   150c4:	0018      	movs	r0, r3
   150c6:	4b16      	ldr	r3, [pc, #88]	; (15120 <CLI_GetImuData+0x158>)
   150c8:	4798      	blx	r3
		imuPacket.xmg = -1;
   150ca:	2314      	movs	r3, #20
   150cc:	18fb      	adds	r3, r7, r3
   150ce:	2201      	movs	r2, #1
   150d0:	4252      	negs	r2, r2
   150d2:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = -2;
   150d4:	2314      	movs	r3, #20
   150d6:	18fb      	adds	r3, r7, r3
   150d8:	2202      	movs	r2, #2
   150da:	4252      	negs	r2, r2
   150dc:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = -3;
   150de:	2314      	movs	r3, #20
   150e0:	18fb      	adds	r3, r7, r3
   150e2:	2203      	movs	r2, #3
   150e4:	4252      	negs	r2, r2
   150e6:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   150e8:	2314      	movs	r3, #20
   150ea:	18fb      	adds	r3, r7, r3
   150ec:	0018      	movs	r0, r3
   150ee:	4b0d      	ldr	r3, [pc, #52]	; (15124 <CLI_GetImuData+0x15c>)
   150f0:	4798      	blx	r3
    }
    return pdFALSE;
   150f2:	2300      	movs	r3, #0
}
   150f4:	0018      	movs	r0, r3
   150f6:	46bd      	mov	sp, r7
   150f8:	b008      	add	sp, #32
   150fa:	bdb0      	pop	{r4, r5, r7, pc}
   150fc:	00016a51 	.word	0x00016a51
   15100:	000164fd 	.word	0x000164fd
   15104:	2000048c 	.word	0x2000048c
   15108:	0003794b 	.word	0x0003794b
   1510c:	00016539 	.word	0x00016539
   15110:	00015d8d 	.word	0x00015d8d
   15114:	20000494 	.word	0x20000494
   15118:	00035a95 	.word	0x00035a95
   1511c:	0003900c 	.word	0x0003900c
   15120:	00037ba5 	.word	0x00037ba5
   15124:	00019885 	.word	0x00019885
   15128:	00039030 	.word	0x00039030

0001512c <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1512c:	b590      	push	{r4, r7, lr}
   1512e:	b087      	sub	sp, #28
   15130:	af00      	add	r7, sp, #0
   15132:	60f8      	str	r0, [r7, #12]
   15134:	60b9      	str	r1, [r7, #8]
   15136:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   15138:	2317      	movs	r3, #23
   1513a:	18fb      	adds	r3, r7, r3
   1513c:	221b      	movs	r2, #27
   1513e:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   15140:	2317      	movs	r3, #23
   15142:	18fb      	adds	r3, r7, r3
   15144:	781b      	ldrb	r3, [r3, #0]
   15146:	4a08      	ldr	r2, [pc, #32]	; (15168 <xCliClearTerminalScreen+0x3c>)
   15148:	4808      	ldr	r0, [pc, #32]	; (1516c <xCliClearTerminalScreen+0x40>)
   1514a:	210f      	movs	r1, #15
   1514c:	4c08      	ldr	r4, [pc, #32]	; (15170 <xCliClearTerminalScreen+0x44>)
   1514e:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   15150:	4a06      	ldr	r2, [pc, #24]	; (1516c <xCliClearTerminalScreen+0x40>)
   15152:	68b9      	ldr	r1, [r7, #8]
   15154:	68fb      	ldr	r3, [r7, #12]
   15156:	0018      	movs	r0, r3
   15158:	4b05      	ldr	r3, [pc, #20]	; (15170 <xCliClearTerminalScreen+0x44>)
   1515a:	4798      	blx	r3
    return pdFALSE;
   1515c:	2300      	movs	r3, #0
}
   1515e:	0018      	movs	r0, r3
   15160:	46bd      	mov	sp, r7
   15162:	b007      	add	sp, #28
   15164:	bd90      	pop	{r4, r7, pc}
   15166:	46c0      	nop			; (mov r8, r8)
   15168:	00039058 	.word	0x00039058
   1516c:	200003a4 	.word	0x200003a4
   15170:	00037ba5 	.word	0x00037ba5

00015174 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   15174:	b580      	push	{r7, lr}
   15176:	b084      	sub	sp, #16
   15178:	af00      	add	r7, sp, #0
   1517a:	60f8      	str	r0, [r7, #12]
   1517c:	60b9      	str	r1, [r7, #8]
   1517e:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   15180:	2002      	movs	r0, #2
   15182:	4b03      	ldr	r3, [pc, #12]	; (15190 <CLI_OTAU+0x1c>)
   15184:	4798      	blx	r3

    return pdFALSE;
   15186:	2300      	movs	r3, #0
}
   15188:	0018      	movs	r0, r3
   1518a:	46bd      	mov	sp, r7
   1518c:	b004      	add	sp, #16
   1518e:	bd80      	pop	{r7, pc}
   15190:	00019851 	.word	0x00019851

00015194 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   15194:	b580      	push	{r7, lr}
   15196:	b084      	sub	sp, #16
   15198:	af00      	add	r7, sp, #0
   1519a:	60f8      	str	r0, [r7, #12]
   1519c:	60b9      	str	r1, [r7, #8]
   1519e:	607a      	str	r2, [r7, #4]
    system_reset();
   151a0:	4b03      	ldr	r3, [pc, #12]	; (151b0 <CLI_ResetDevice+0x1c>)
   151a2:	4798      	blx	r3
    return pdFALSE;
   151a4:	2300      	movs	r3, #0
}
   151a6:	0018      	movs	r0, r3
   151a8:	46bd      	mov	sp, r7
   151aa:	b004      	add	sp, #16
   151ac:	bd80      	pop	{r7, pc}
   151ae:	46c0      	nop			; (mov r8, r8)
   151b0:	00014c29 	.word	0x00014c29

000151b4 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   151b4:	b590      	push	{r4, r7, lr}
   151b6:	b08f      	sub	sp, #60	; 0x3c
   151b8:	af00      	add	r7, sp, #0
   151ba:	60f8      	str	r0, [r7, #12]
   151bc:	60b9      	str	r1, [r7, #8]
   151be:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   151c0:	2318      	movs	r3, #24
   151c2:	18fb      	adds	r3, r7, r3
   151c4:	2200      	movs	r2, #0
   151c6:	701a      	strb	r2, [r3, #0]
   151c8:	2318      	movs	r3, #24
   151ca:	18fb      	adds	r3, r7, r3
   151cc:	2200      	movs	r2, #0
   151ce:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   151d0:	2318      	movs	r3, #24
   151d2:	18fb      	adds	r3, r7, r3
   151d4:	2200      	movs	r2, #0
   151d6:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   151d8:	2318      	movs	r3, #24
   151da:	18fb      	adds	r3, r7, r3
   151dc:	2200      	movs	r2, #0
   151de:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   151e0:	231c      	movs	r3, #28
   151e2:	18fb      	adds	r3, r7, r3
   151e4:	2200      	movs	r2, #0
   151e6:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   151e8:	231c      	movs	r3, #28
   151ea:	18fb      	adds	r3, r7, r3
   151ec:	2214      	movs	r2, #20
   151ee:	18ba      	adds	r2, r7, r2
   151f0:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   151f2:	231c      	movs	r3, #28
   151f4:	18fb      	adds	r3, r7, r3
   151f6:	2201      	movs	r2, #1
   151f8:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   151fa:	231c      	movs	r3, #28
   151fc:	18fb      	adds	r3, r7, r3
   151fe:	2218      	movs	r2, #24
   15200:	18ba      	adds	r2, r7, r2
   15202:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   15204:	231c      	movs	r3, #28
   15206:	18fb      	adds	r3, r7, r3
   15208:	2201      	movs	r2, #1
   1520a:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   1520c:	4b2a      	ldr	r3, [pc, #168]	; (152b8 <CLI_i2cScan+0x104>)
   1520e:	0018      	movs	r0, r3
   15210:	4b2a      	ldr	r3, [pc, #168]	; (152bc <CLI_i2cScan+0x108>)
   15212:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   15214:	2300      	movs	r3, #0
   15216:	637b      	str	r3, [r7, #52]	; 0x34
   15218:	e042      	b.n	152a0 <CLI_i2cScan+0xec>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   1521a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1521c:	4a28      	ldr	r2, [pc, #160]	; (152c0 <CLI_i2cScan+0x10c>)
   1521e:	4829      	ldr	r0, [pc, #164]	; (152c4 <CLI_i2cScan+0x110>)
   15220:	210f      	movs	r1, #15
   15222:	4c29      	ldr	r4, [pc, #164]	; (152c8 <CLI_i2cScan+0x114>)
   15224:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   15226:	4b27      	ldr	r3, [pc, #156]	; (152c4 <CLI_i2cScan+0x110>)
   15228:	0018      	movs	r0, r3
   1522a:	4b24      	ldr	r3, [pc, #144]	; (152bc <CLI_i2cScan+0x108>)
   1522c:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   1522e:	2300      	movs	r3, #0
   15230:	633b      	str	r3, [r7, #48]	; 0x30
   15232:	e02b      	b.n	1528c <CLI_i2cScan+0xd8>
                {

                    i2cOled.address = (i + j);
   15234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15236:	b2da      	uxtb	r2, r3
   15238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1523a:	b2db      	uxtb	r3, r3
   1523c:	18d3      	adds	r3, r2, r3
   1523e:	b2da      	uxtb	r2, r3
   15240:	231c      	movs	r3, #28
   15242:	18fb      	adds	r3, r7, r3
   15244:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cPingAddressWait(&i2cOled, 100, 100);
   15246:	231c      	movs	r3, #28
   15248:	18fb      	adds	r3, r7, r3
   1524a:	2264      	movs	r2, #100	; 0x64
   1524c:	2164      	movs	r1, #100	; 0x64
   1524e:	0018      	movs	r0, r3
   15250:	4b1e      	ldr	r3, [pc, #120]	; (152cc <CLI_i2cScan+0x118>)
   15252:	4798      	blx	r3
   15254:	0003      	movs	r3, r0
   15256:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   15258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1525a:	2b00      	cmp	r3, #0
   1525c:	d10c      	bne.n	15278 <CLI_i2cScan+0xc4>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x ", i2cOled.address);
   1525e:	231c      	movs	r3, #28
   15260:	18fb      	adds	r3, r7, r3
   15262:	781b      	ldrb	r3, [r3, #0]
   15264:	4a1a      	ldr	r2, [pc, #104]	; (152d0 <CLI_i2cScan+0x11c>)
   15266:	4817      	ldr	r0, [pc, #92]	; (152c4 <CLI_i2cScan+0x110>)
   15268:	210f      	movs	r1, #15
   1526a:	4c17      	ldr	r4, [pc, #92]	; (152c8 <CLI_i2cScan+0x114>)
   1526c:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   1526e:	4b15      	ldr	r3, [pc, #84]	; (152c4 <CLI_i2cScan+0x110>)
   15270:	0018      	movs	r0, r3
   15272:	4b12      	ldr	r3, [pc, #72]	; (152bc <CLI_i2cScan+0x108>)
   15274:	4798      	blx	r3
   15276:	e006      	b.n	15286 <CLI_i2cScan+0xd2>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X  ");
   15278:	4b12      	ldr	r3, [pc, #72]	; (152c4 <CLI_i2cScan+0x110>)
   1527a:	4a16      	ldr	r2, [pc, #88]	; (152d4 <CLI_i2cScan+0x120>)
   1527c:	601a      	str	r2, [r3, #0]
						SerialConsoleWriteString(bufCli);
   1527e:	4b11      	ldr	r3, [pc, #68]	; (152c4 <CLI_i2cScan+0x110>)
   15280:	0018      	movs	r0, r3
   15282:	4b0e      	ldr	r3, [pc, #56]	; (152bc <CLI_i2cScan+0x108>)
   15284:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   15286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15288:	3301      	adds	r3, #1
   1528a:	633b      	str	r3, [r7, #48]	; 0x30
   1528c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1528e:	2b0f      	cmp	r3, #15
   15290:	ddd0      	ble.n	15234 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   15292:	4b11      	ldr	r3, [pc, #68]	; (152d8 <CLI_i2cScan+0x124>)
   15294:	0018      	movs	r0, r3
   15296:	4b09      	ldr	r3, [pc, #36]	; (152bc <CLI_i2cScan+0x108>)
   15298:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   1529a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1529c:	3310      	adds	r3, #16
   1529e:	637b      	str	r3, [r7, #52]	; 0x34
   152a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   152a2:	2b7f      	cmp	r3, #127	; 0x7f
   152a4:	ddb9      	ble.n	1521a <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   152a6:	4b0c      	ldr	r3, [pc, #48]	; (152d8 <CLI_i2cScan+0x124>)
   152a8:	0018      	movs	r0, r3
   152aa:	4b04      	ldr	r3, [pc, #16]	; (152bc <CLI_i2cScan+0x108>)
   152ac:	4798      	blx	r3
			return pdFALSE;
   152ae:	2300      	movs	r3, #0

}
   152b0:	0018      	movs	r0, r3
   152b2:	46bd      	mov	sp, r7
   152b4:	b00f      	add	sp, #60	; 0x3c
   152b6:	bd90      	pop	{r4, r7, pc}
   152b8:	000390d8 	.word	0x000390d8
   152bc:	000201e5 	.word	0x000201e5
   152c0:	0003910c 	.word	0x0003910c
   152c4:	200003a4 	.word	0x200003a4
   152c8:	00037ba5 	.word	0x00037ba5
   152cc:	00015c35 	.word	0x00015c35
   152d0:	00039114 	.word	0x00039114
   152d4:	00202058 	.word	0x00202058
   152d8:	00038ff8 	.word	0x00038ff8

000152dc <CLI_LOCK>:
}
BaseType_t CLI_CLLCD(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
	//LCD_clearScreen(WHITE);
	    return pdFALSE;
}
BaseType_t CLI_LOCK(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   152dc:	b580      	push	{r7, lr}
   152de:	b084      	sub	sp, #16
   152e0:	af00      	add	r7, sp, #0
   152e2:	60f8      	str	r0, [r7, #12]
   152e4:	60b9      	str	r1, [r7, #8]
   152e6:	607a      	str	r2, [r7, #4]
	lock();
   152e8:	4b03      	ldr	r3, [pc, #12]	; (152f8 <CLI_LOCK+0x1c>)
   152ea:	4798      	blx	r3
	    return pdFALSE;
   152ec:	2300      	movs	r3, #0
}
   152ee:	0018      	movs	r0, r3
   152f0:	46bd      	mov	sp, r7
   152f2:	b004      	add	sp, #16
   152f4:	bd80      	pop	{r7, pc}
   152f6:	46c0      	nop			; (mov r8, r8)
   152f8:	00016c55 	.word	0x00016c55

000152fc <CLI_UNLOCK>:
BaseType_t CLI_UNLOCK(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   152fc:	b580      	push	{r7, lr}
   152fe:	b084      	sub	sp, #16
   15300:	af00      	add	r7, sp, #0
   15302:	60f8      	str	r0, [r7, #12]
   15304:	60b9      	str	r1, [r7, #8]
   15306:	607a      	str	r2, [r7, #4]
	unlock();
   15308:	4b03      	ldr	r3, [pc, #12]	; (15318 <CLI_UNLOCK+0x1c>)
   1530a:	4798      	blx	r3
	    return pdFALSE;
   1530c:	2300      	movs	r3, #0
}
   1530e:	0018      	movs	r0, r3
   15310:	46bd      	mov	sp, r7
   15312:	b004      	add	sp, #16
   15314:	bd80      	pop	{r7, pc}
   15316:	46c0      	nop			; (mov r8, r8)
   15318:	00016cd1 	.word	0x00016cd1

0001531c <CLI_BME>:
BaseType_t CLI_BME(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   1531c:	b580      	push	{r7, lr}
   1531e:	b084      	sub	sp, #16
   15320:	af00      	add	r7, sp, #0
   15322:	60f8      	str	r0, [r7, #12]
   15324:	60b9      	str	r1, [r7, #8]
   15326:	607a      	str	r2, [r7, #4]
	warning_speaker();
   15328:	4b03      	ldr	r3, [pc, #12]	; (15338 <CLI_BME+0x1c>)
   1532a:	4798      	blx	r3
	return pdFALSE;
   1532c:	2300      	movs	r3, #0
   1532e:	0018      	movs	r0, r3
   15330:	46bd      	mov	sp, r7
   15332:	b004      	add	sp, #16
   15334:	bd80      	pop	{r7, pc}
   15336:	46c0      	nop			; (mov r8, r8)
   15338:	0001707d 	.word	0x0001707d

0001533c <vControlHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vControlHandlerTask(void *pvParameters)
{
   1533c:	b580      	push	{r7, lr}
   1533e:	b088      	sub	sp, #32
   15340:	af00      	add	r7, sp, #0
   15342:	6078      	str	r0, [r7, #4]
    SerialConsoleWriteString((char *)"ESE516 - Control Init Code\r\n");
   15344:	4b33      	ldr	r3, [pc, #204]	; (15414 <vControlHandlerTask+0xd8>)
   15346:	0018      	movs	r0, r3
   15348:	4b33      	ldr	r3, [pc, #204]	; (15418 <vControlHandlerTask+0xdc>)
   1534a:	4798      	blx	r3

    // Initialize Queues
    xQueueGameBufferIn = xQueueCreate(2, sizeof(struct GameDataPacket));
   1534c:	2200      	movs	r2, #0
   1534e:	2114      	movs	r1, #20
   15350:	2002      	movs	r0, #2
   15352:	4b32      	ldr	r3, [pc, #200]	; (1541c <vControlHandlerTask+0xe0>)
   15354:	4798      	blx	r3
   15356:	0002      	movs	r2, r0
   15358:	4b31      	ldr	r3, [pc, #196]	; (15420 <vControlHandlerTask+0xe4>)
   1535a:	601a      	str	r2, [r3, #0]
    xQueueRgbColorBuffer = xQueueCreate(2, sizeof(struct RgbColorPacket));
   1535c:	2200      	movs	r2, #0
   1535e:	2103      	movs	r1, #3
   15360:	2002      	movs	r0, #2
   15362:	4b2e      	ldr	r3, [pc, #184]	; (1541c <vControlHandlerTask+0xe0>)
   15364:	4798      	blx	r3
   15366:	0002      	movs	r2, r0
   15368:	4b2e      	ldr	r3, [pc, #184]	; (15424 <vControlHandlerTask+0xe8>)
   1536a:	601a      	str	r2, [r3, #0]

    if (xQueueGameBufferIn == NULL || xQueueRgbColorBuffer == NULL) {
   1536c:	4b2c      	ldr	r3, [pc, #176]	; (15420 <vControlHandlerTask+0xe4>)
   1536e:	681b      	ldr	r3, [r3, #0]
   15370:	2b00      	cmp	r3, #0
   15372:	d003      	beq.n	1537c <vControlHandlerTask+0x40>
   15374:	4b2b      	ldr	r3, [pc, #172]	; (15424 <vControlHandlerTask+0xe8>)
   15376:	681b      	ldr	r3, [r3, #0]
   15378:	2b00      	cmp	r3, #0
   1537a:	d103      	bne.n	15384 <vControlHandlerTask+0x48>
        SerialConsoleWriteString((char *)"ERROR Initializing Control Data queues!\r\n");
   1537c:	4b2a      	ldr	r3, [pc, #168]	; (15428 <vControlHandlerTask+0xec>)
   1537e:	0018      	movs	r0, r3
   15380:	4b25      	ldr	r3, [pc, #148]	; (15418 <vControlHandlerTask+0xdc>)
   15382:	4798      	blx	r3
    }
    controlState = CONTROL_WAIT_FOR_GAME;  // Initial state
   15384:	4b29      	ldr	r3, [pc, #164]	; (1542c <vControlHandlerTask+0xf0>)
   15386:	2200      	movs	r2, #0
   15388:	701a      	strb	r2, [r3, #0]

    while (1) {
        switch (controlState) {
   1538a:	4b28      	ldr	r3, [pc, #160]	; (1542c <vControlHandlerTask+0xf0>)
   1538c:	781b      	ldrb	r3, [r3, #0]
   1538e:	2b01      	cmp	r3, #1
   15390:	d01d      	beq.n	153ce <vControlHandlerTask+0x92>
   15392:	2b02      	cmp	r3, #2
   15394:	d035      	beq.n	15402 <vControlHandlerTask+0xc6>
   15396:	2b00      	cmp	r3, #0
   15398:	d12f      	bne.n	153fa <vControlHandlerTask+0xbe>
            case (CONTROL_WAIT_FOR_GAME): {  // Should set the UI to ignore button presses and should wait until there is a message from the server with a new play.
                struct GameDataPacket gamePacketIn;
                if (pdPASS == xQueueReceive(xQueueGameBufferIn, &gamePacketIn, 0)) {
   1539a:	4b21      	ldr	r3, [pc, #132]	; (15420 <vControlHandlerTask+0xe4>)
   1539c:	681b      	ldr	r3, [r3, #0]
   1539e:	220c      	movs	r2, #12
   153a0:	18b9      	adds	r1, r7, r2
   153a2:	2200      	movs	r2, #0
   153a4:	0018      	movs	r0, r3
   153a6:	4b22      	ldr	r3, [pc, #136]	; (15430 <vControlHandlerTask+0xf4>)
   153a8:	4798      	blx	r3
   153aa:	0003      	movs	r3, r0
   153ac:	2b01      	cmp	r3, #1
   153ae:	d12a      	bne.n	15406 <vControlHandlerTask+0xca>
                    LogMessage(LOG_DEBUG_LVL, "Control Thread: Consumed game packet!\r\n");
   153b0:	4b20      	ldr	r3, [pc, #128]	; (15434 <vControlHandlerTask+0xf8>)
   153b2:	0019      	movs	r1, r3
   153b4:	2001      	movs	r0, #1
   153b6:	4b20      	ldr	r3, [pc, #128]	; (15438 <vControlHandlerTask+0xfc>)
   153b8:	4798      	blx	r3
                    UiOrderShowMoves(&gamePacketIn);
   153ba:	230c      	movs	r3, #12
   153bc:	18fb      	adds	r3, r7, r3
   153be:	0018      	movs	r0, r3
   153c0:	4b1e      	ldr	r3, [pc, #120]	; (1543c <vControlHandlerTask+0x100>)
   153c2:	4798      	blx	r3
                    controlState = CONTROL_PLAYING_MOVE;
   153c4:	4b19      	ldr	r3, [pc, #100]	; (1542c <vControlHandlerTask+0xf0>)
   153c6:	2201      	movs	r2, #1
   153c8:	701a      	strb	r2, [r3, #0]
                }

                break;
   153ca:	46c0      	nop			; (mov r8, r8)
   153cc:	e01b      	b.n	15406 <vControlHandlerTask+0xca>
            }

            case (CONTROL_PLAYING_MOVE): {  // Should wait until the UI thread has showed the move AND comes back with the play from the user. Should go back to CONTROL_WAIT_FOR_GAME
                // after posting the game to MQTT
                if (UiPlayIsDone() == true) {
   153ce:	4b1c      	ldr	r3, [pc, #112]	; (15440 <vControlHandlerTask+0x104>)
   153d0:	4798      	blx	r3
   153d2:	1e03      	subs	r3, r0, #0
   153d4:	d019      	beq.n	1540a <vControlHandlerTask+0xce>
                    // Send back local game packet
                    if (pdTRUE != WifiAddGameDataToQueue(UiGetGamePacketOut())) {
   153d6:	4b1b      	ldr	r3, [pc, #108]	; (15444 <vControlHandlerTask+0x108>)
   153d8:	4798      	blx	r3
   153da:	0003      	movs	r3, r0
   153dc:	0018      	movs	r0, r3
   153de:	4b1a      	ldr	r3, [pc, #104]	; (15448 <vControlHandlerTask+0x10c>)
   153e0:	4798      	blx	r3
   153e2:	0003      	movs	r3, r0
   153e4:	2b01      	cmp	r3, #1
   153e6:	d004      	beq.n	153f2 <vControlHandlerTask+0xb6>
                        LogMessage(LOG_DEBUG_LVL, "Control Thread: Could not send game packet!\r\n");
   153e8:	4b18      	ldr	r3, [pc, #96]	; (1544c <vControlHandlerTask+0x110>)
   153ea:	0019      	movs	r1, r3
   153ec:	2001      	movs	r0, #1
   153ee:	4b12      	ldr	r3, [pc, #72]	; (15438 <vControlHandlerTask+0xfc>)
   153f0:	4798      	blx	r3
                    }
                    controlState = CONTROL_WAIT_FOR_GAME;
   153f2:	4b0e      	ldr	r3, [pc, #56]	; (1542c <vControlHandlerTask+0xf0>)
   153f4:	2200      	movs	r2, #0
   153f6:	701a      	strb	r2, [r3, #0]
                }

                break;
   153f8:	e007      	b.n	1540a <vControlHandlerTask+0xce>
            case (CONTROL_END_GAME): {
                break;
            }

            default:
                controlState = CONTROL_WAIT_FOR_GAME;
   153fa:	4b0c      	ldr	r3, [pc, #48]	; (1542c <vControlHandlerTask+0xf0>)
   153fc:	2200      	movs	r2, #0
   153fe:	701a      	strb	r2, [r3, #0]
                break;
   15400:	e004      	b.n	1540c <vControlHandlerTask+0xd0>
                break;
   15402:	46c0      	nop			; (mov r8, r8)
   15404:	e002      	b.n	1540c <vControlHandlerTask+0xd0>
                break;
   15406:	46c0      	nop			; (mov r8, r8)
   15408:	e000      	b.n	1540c <vControlHandlerTask+0xd0>
                break;
   1540a:	46c0      	nop			; (mov r8, r8)
        }
        vTaskDelay(40);
   1540c:	2028      	movs	r0, #40	; 0x28
   1540e:	4b10      	ldr	r3, [pc, #64]	; (15450 <vControlHandlerTask+0x114>)
   15410:	4798      	blx	r3
        switch (controlState) {
   15412:	e7ba      	b.n	1538a <vControlHandlerTask+0x4e>
   15414:	0003919c 	.word	0x0003919c
   15418:	000201e5 	.word	0x000201e5
   1541c:	0001c885 	.word	0x0001c885
   15420:	200004a0 	.word	0x200004a0
   15424:	200004a4 	.word	0x200004a4
   15428:	000391bc 	.word	0x000391bc
   1542c:	200046c0 	.word	0x200046c0
   15430:	0001d3e5 	.word	0x0001d3e5
   15434:	000391e8 	.word	0x000391e8
   15438:	000202d1 	.word	0x000202d1
   1543c:	00018045 	.word	0x00018045
   15440:	00018081 	.word	0x00018081
   15444:	00018095 	.word	0x00018095
   15448:	000198dd 	.word	0x000198dd
   1544c:	00039210 	.word	0x00039210
   15450:	0001e591 	.word	0x0001e591

00015454 <system_interrupt_enable>:
   15454:	b580      	push	{r7, lr}
   15456:	b082      	sub	sp, #8
   15458:	af00      	add	r7, sp, #0
   1545a:	0002      	movs	r2, r0
   1545c:	1dfb      	adds	r3, r7, #7
   1545e:	701a      	strb	r2, [r3, #0]
   15460:	4b06      	ldr	r3, [pc, #24]	; (1547c <system_interrupt_enable+0x28>)
   15462:	1dfa      	adds	r2, r7, #7
   15464:	7812      	ldrb	r2, [r2, #0]
   15466:	0011      	movs	r1, r2
   15468:	221f      	movs	r2, #31
   1546a:	400a      	ands	r2, r1
   1546c:	2101      	movs	r1, #1
   1546e:	4091      	lsls	r1, r2
   15470:	000a      	movs	r2, r1
   15472:	601a      	str	r2, [r3, #0]
   15474:	46c0      	nop			; (mov r8, r8)
   15476:	46bd      	mov	sp, r7
   15478:	b002      	add	sp, #8
   1547a:	bd80      	pop	{r7, pc}
   1547c:	e000e100 	.word	0xe000e100

00015480 <i2c_master_is_syncing>:
   15480:	b580      	push	{r7, lr}
   15482:	b084      	sub	sp, #16
   15484:	af00      	add	r7, sp, #0
   15486:	6078      	str	r0, [r7, #4]
   15488:	687b      	ldr	r3, [r7, #4]
   1548a:	681b      	ldr	r3, [r3, #0]
   1548c:	60fb      	str	r3, [r7, #12]
   1548e:	68fb      	ldr	r3, [r7, #12]
   15490:	69db      	ldr	r3, [r3, #28]
   15492:	2207      	movs	r2, #7
   15494:	4013      	ands	r3, r2
   15496:	1e5a      	subs	r2, r3, #1
   15498:	4193      	sbcs	r3, r2
   1549a:	b2db      	uxtb	r3, r3
   1549c:	0018      	movs	r0, r3
   1549e:	46bd      	mov	sp, r7
   154a0:	b004      	add	sp, #16
   154a2:	bd80      	pop	{r7, pc}

000154a4 <_i2c_master_wait_for_sync>:
   154a4:	b580      	push	{r7, lr}
   154a6:	b082      	sub	sp, #8
   154a8:	af00      	add	r7, sp, #0
   154aa:	6078      	str	r0, [r7, #4]
   154ac:	46c0      	nop			; (mov r8, r8)
   154ae:	687b      	ldr	r3, [r7, #4]
   154b0:	0018      	movs	r0, r3
   154b2:	4b04      	ldr	r3, [pc, #16]	; (154c4 <_i2c_master_wait_for_sync+0x20>)
   154b4:	4798      	blx	r3
   154b6:	1e03      	subs	r3, r0, #0
   154b8:	d1f9      	bne.n	154ae <_i2c_master_wait_for_sync+0xa>
   154ba:	46c0      	nop			; (mov r8, r8)
   154bc:	46bd      	mov	sp, r7
   154be:	b002      	add	sp, #8
   154c0:	bd80      	pop	{r7, pc}
   154c2:	46c0      	nop			; (mov r8, r8)
   154c4:	00015481 	.word	0x00015481

000154c8 <i2c_master_get_config_defaults>:
   154c8:	b580      	push	{r7, lr}
   154ca:	b082      	sub	sp, #8
   154cc:	af00      	add	r7, sp, #0
   154ce:	6078      	str	r0, [r7, #4]
   154d0:	687b      	ldr	r3, [r7, #4]
   154d2:	2264      	movs	r2, #100	; 0x64
   154d4:	601a      	str	r2, [r3, #0]
   154d6:	687b      	ldr	r3, [r7, #4]
   154d8:	4a1b      	ldr	r2, [pc, #108]	; (15548 <i2c_master_get_config_defaults+0x80>)
   154da:	605a      	str	r2, [r3, #4]
   154dc:	687b      	ldr	r3, [r7, #4]
   154de:	2200      	movs	r2, #0
   154e0:	609a      	str	r2, [r3, #8]
   154e2:	687b      	ldr	r3, [r7, #4]
   154e4:	2200      	movs	r2, #0
   154e6:	731a      	strb	r2, [r3, #12]
   154e8:	687b      	ldr	r3, [r7, #4]
   154ea:	2200      	movs	r2, #0
   154ec:	761a      	strb	r2, [r3, #24]
   154ee:	687b      	ldr	r3, [r7, #4]
   154f0:	2280      	movs	r2, #128	; 0x80
   154f2:	0392      	lsls	r2, r2, #14
   154f4:	611a      	str	r2, [r3, #16]
   154f6:	687b      	ldr	r3, [r7, #4]
   154f8:	2201      	movs	r2, #1
   154fa:	4252      	negs	r2, r2
   154fc:	82da      	strh	r2, [r3, #22]
   154fe:	687b      	ldr	r3, [r7, #4]
   15500:	2201      	movs	r2, #1
   15502:	4252      	negs	r2, r2
   15504:	829a      	strh	r2, [r3, #20]
   15506:	687b      	ldr	r3, [r7, #4]
   15508:	2200      	movs	r2, #0
   1550a:	61da      	str	r2, [r3, #28]
   1550c:	687b      	ldr	r3, [r7, #4]
   1550e:	2200      	movs	r2, #0
   15510:	621a      	str	r2, [r3, #32]
   15512:	687b      	ldr	r3, [r7, #4]
   15514:	2224      	movs	r2, #36	; 0x24
   15516:	2100      	movs	r1, #0
   15518:	5499      	strb	r1, [r3, r2]
   1551a:	687b      	ldr	r3, [r7, #4]
   1551c:	2200      	movs	r2, #0
   1551e:	629a      	str	r2, [r3, #40]	; 0x28
   15520:	687b      	ldr	r3, [r7, #4]
   15522:	222c      	movs	r2, #44	; 0x2c
   15524:	2100      	movs	r1, #0
   15526:	5499      	strb	r1, [r3, r2]
   15528:	687b      	ldr	r3, [r7, #4]
   1552a:	222d      	movs	r2, #45	; 0x2d
   1552c:	2100      	movs	r1, #0
   1552e:	5499      	strb	r1, [r3, r2]
   15530:	687b      	ldr	r3, [r7, #4]
   15532:	222e      	movs	r2, #46	; 0x2e
   15534:	2100      	movs	r1, #0
   15536:	5499      	strb	r1, [r3, r2]
   15538:	687b      	ldr	r3, [r7, #4]
   1553a:	22d7      	movs	r2, #215	; 0xd7
   1553c:	861a      	strh	r2, [r3, #48]	; 0x30
   1553e:	46c0      	nop			; (mov r8, r8)
   15540:	46bd      	mov	sp, r7
   15542:	b002      	add	sp, #8
   15544:	bd80      	pop	{r7, pc}
   15546:	46c0      	nop			; (mov r8, r8)
   15548:	00000d48 	.word	0x00000d48

0001554c <i2c_master_enable>:
   1554c:	b580      	push	{r7, lr}
   1554e:	b084      	sub	sp, #16
   15550:	af00      	add	r7, sp, #0
   15552:	6078      	str	r0, [r7, #4]
   15554:	687b      	ldr	r3, [r7, #4]
   15556:	681b      	ldr	r3, [r3, #0]
   15558:	60bb      	str	r3, [r7, #8]
   1555a:	2300      	movs	r3, #0
   1555c:	60fb      	str	r3, [r7, #12]
   1555e:	687b      	ldr	r3, [r7, #4]
   15560:	0018      	movs	r0, r3
   15562:	4b14      	ldr	r3, [pc, #80]	; (155b4 <i2c_master_enable+0x68>)
   15564:	4798      	blx	r3
   15566:	68bb      	ldr	r3, [r7, #8]
   15568:	681b      	ldr	r3, [r3, #0]
   1556a:	2202      	movs	r2, #2
   1556c:	431a      	orrs	r2, r3
   1556e:	68bb      	ldr	r3, [r7, #8]
   15570:	601a      	str	r2, [r3, #0]
   15572:	687b      	ldr	r3, [r7, #4]
   15574:	681b      	ldr	r3, [r3, #0]
   15576:	0018      	movs	r0, r3
   15578:	4b0f      	ldr	r3, [pc, #60]	; (155b8 <i2c_master_enable+0x6c>)
   1557a:	4798      	blx	r3
   1557c:	0003      	movs	r3, r0
   1557e:	0018      	movs	r0, r3
   15580:	4b0e      	ldr	r3, [pc, #56]	; (155bc <i2c_master_enable+0x70>)
   15582:	4798      	blx	r3
   15584:	e00c      	b.n	155a0 <i2c_master_enable+0x54>
   15586:	68fb      	ldr	r3, [r7, #12]
   15588:	3301      	adds	r3, #1
   1558a:	60fb      	str	r3, [r7, #12]
   1558c:	687b      	ldr	r3, [r7, #4]
   1558e:	88db      	ldrh	r3, [r3, #6]
   15590:	001a      	movs	r2, r3
   15592:	68fb      	ldr	r3, [r7, #12]
   15594:	429a      	cmp	r2, r3
   15596:	d803      	bhi.n	155a0 <i2c_master_enable+0x54>
   15598:	68bb      	ldr	r3, [r7, #8]
   1559a:	2210      	movs	r2, #16
   1559c:	835a      	strh	r2, [r3, #26]
   1559e:	e006      	b.n	155ae <i2c_master_enable+0x62>
   155a0:	68bb      	ldr	r3, [r7, #8]
   155a2:	8b5b      	ldrh	r3, [r3, #26]
   155a4:	b29b      	uxth	r3, r3
   155a6:	001a      	movs	r2, r3
   155a8:	2310      	movs	r3, #16
   155aa:	4013      	ands	r3, r2
   155ac:	d0eb      	beq.n	15586 <i2c_master_enable+0x3a>
   155ae:	46bd      	mov	sp, r7
   155b0:	b004      	add	sp, #16
   155b2:	bd80      	pop	{r7, pc}
   155b4:	000154a5 	.word	0x000154a5
   155b8:	00029a85 	.word	0x00029a85
   155bc:	00015455 	.word	0x00015455

000155c0 <i2c_master_enable_callback>:
   155c0:	b580      	push	{r7, lr}
   155c2:	b082      	sub	sp, #8
   155c4:	af00      	add	r7, sp, #0
   155c6:	6078      	str	r0, [r7, #4]
   155c8:	000a      	movs	r2, r1
   155ca:	1cfb      	adds	r3, r7, #3
   155cc:	701a      	strb	r2, [r3, #0]
   155ce:	687b      	ldr	r3, [r7, #4]
   155d0:	7e5b      	ldrb	r3, [r3, #25]
   155d2:	b2db      	uxtb	r3, r3
   155d4:	b25a      	sxtb	r2, r3
   155d6:	1cfb      	adds	r3, r7, #3
   155d8:	781b      	ldrb	r3, [r3, #0]
   155da:	2101      	movs	r1, #1
   155dc:	4099      	lsls	r1, r3
   155de:	000b      	movs	r3, r1
   155e0:	b25b      	sxtb	r3, r3
   155e2:	4313      	orrs	r3, r2
   155e4:	b25b      	sxtb	r3, r3
   155e6:	b2da      	uxtb	r2, r3
   155e8:	687b      	ldr	r3, [r7, #4]
   155ea:	765a      	strb	r2, [r3, #25]
   155ec:	46c0      	nop			; (mov r8, r8)
   155ee:	46bd      	mov	sp, r7
   155f0:	b002      	add	sp, #8
   155f2:	bd80      	pop	{r7, pc}

000155f4 <I2cDriverConfigureSensorBus>:
   155f4:	b590      	push	{r4, r7, lr}
   155f6:	b091      	sub	sp, #68	; 0x44
   155f8:	af00      	add	r7, sp, #0
   155fa:	2300      	movs	r3, #0
   155fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   155fe:	233a      	movs	r3, #58	; 0x3a
   15600:	18fb      	adds	r3, r7, r3
   15602:	2200      	movs	r2, #0
   15604:	701a      	strb	r2, [r3, #0]
   15606:	1d3b      	adds	r3, r7, #4
   15608:	0018      	movs	r0, r3
   1560a:	4b21      	ldr	r3, [pc, #132]	; (15690 <I2cDriverConfigureSensorBus+0x9c>)
   1560c:	4798      	blx	r3
   1560e:	1d3b      	adds	r3, r7, #4
   15610:	4a20      	ldr	r2, [pc, #128]	; (15694 <I2cDriverConfigureSensorBus+0xa0>)
   15612:	61da      	str	r2, [r3, #28]
   15614:	1d3b      	adds	r3, r7, #4
   15616:	4a20      	ldr	r2, [pc, #128]	; (15698 <I2cDriverConfigureSensorBus+0xa4>)
   15618:	621a      	str	r2, [r3, #32]
   1561a:	1d3b      	adds	r3, r7, #4
   1561c:	22fa      	movs	r2, #250	; 0xfa
   1561e:	0092      	lsls	r2, r2, #2
   15620:	82da      	strh	r2, [r3, #22]
   15622:	233b      	movs	r3, #59	; 0x3b
   15624:	18fb      	adds	r3, r7, r3
   15626:	2203      	movs	r2, #3
   15628:	701a      	strb	r2, [r3, #0]
   1562a:	e01e      	b.n	1566a <I2cDriverConfigureSensorBus+0x76>
   1562c:	233a      	movs	r3, #58	; 0x3a
   1562e:	18fc      	adds	r4, r7, r3
   15630:	1d3a      	adds	r2, r7, #4
   15632:	491a      	ldr	r1, [pc, #104]	; (1569c <I2cDriverConfigureSensorBus+0xa8>)
   15634:	4b1a      	ldr	r3, [pc, #104]	; (156a0 <I2cDriverConfigureSensorBus+0xac>)
   15636:	0018      	movs	r0, r3
   15638:	4b1a      	ldr	r3, [pc, #104]	; (156a4 <I2cDriverConfigureSensorBus+0xb0>)
   1563a:	4798      	blx	r3
   1563c:	0003      	movs	r3, r0
   1563e:	7023      	strb	r3, [r4, #0]
   15640:	233a      	movs	r3, #58	; 0x3a
   15642:	18fb      	adds	r3, r7, r3
   15644:	781b      	ldrb	r3, [r3, #0]
   15646:	2b00      	cmp	r3, #0
   15648:	d104      	bne.n	15654 <I2cDriverConfigureSensorBus+0x60>
   1564a:	233a      	movs	r3, #58	; 0x3a
   1564c:	18fb      	adds	r3, r7, r3
   1564e:	781b      	ldrb	r3, [r3, #0]
   15650:	63fb      	str	r3, [r7, #60]	; 0x3c
   15652:	e00f      	b.n	15674 <I2cDriverConfigureSensorBus+0x80>
   15654:	4b12      	ldr	r3, [pc, #72]	; (156a0 <I2cDriverConfigureSensorBus+0xac>)
   15656:	0018      	movs	r0, r3
   15658:	4b13      	ldr	r3, [pc, #76]	; (156a8 <I2cDriverConfigureSensorBus+0xb4>)
   1565a:	4798      	blx	r3
   1565c:	233b      	movs	r3, #59	; 0x3b
   1565e:	18fb      	adds	r3, r7, r3
   15660:	781a      	ldrb	r2, [r3, #0]
   15662:	233b      	movs	r3, #59	; 0x3b
   15664:	18fb      	adds	r3, r7, r3
   15666:	3a01      	subs	r2, #1
   15668:	701a      	strb	r2, [r3, #0]
   1566a:	233b      	movs	r3, #59	; 0x3b
   1566c:	18fb      	adds	r3, r7, r3
   1566e:	781b      	ldrb	r3, [r3, #0]
   15670:	2b00      	cmp	r3, #0
   15672:	d1db      	bne.n	1562c <I2cDriverConfigureSensorBus+0x38>
   15674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15676:	2b00      	cmp	r3, #0
   15678:	d104      	bne.n	15684 <I2cDriverConfigureSensorBus+0x90>
   1567a:	4b09      	ldr	r3, [pc, #36]	; (156a0 <I2cDriverConfigureSensorBus+0xac>)
   1567c:	0018      	movs	r0, r3
   1567e:	4b0b      	ldr	r3, [pc, #44]	; (156ac <I2cDriverConfigureSensorBus+0xb8>)
   15680:	4798      	blx	r3
   15682:	e000      	b.n	15686 <I2cDriverConfigureSensorBus+0x92>
   15684:	46c0      	nop			; (mov r8, r8)
   15686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15688:	0018      	movs	r0, r3
   1568a:	46bd      	mov	sp, r7
   1568c:	b011      	add	sp, #68	; 0x44
   1568e:	bd90      	pop	{r4, r7, pc}
   15690:	000154c9 	.word	0x000154c9
   15694:	00080002 	.word	0x00080002
   15698:	00090002 	.word	0x00090002
   1569c:	42000800 	.word	0x42000800
   156a0:	200046c8 	.word	0x200046c8
   156a4:	00019f19 	.word	0x00019f19
   156a8:	0001a04d 	.word	0x0001a04d
   156ac:	0001554d 	.word	0x0001554d

000156b0 <I2cSensorsTxComplete>:
   156b0:	b580      	push	{r7, lr}
   156b2:	b084      	sub	sp, #16
   156b4:	af00      	add	r7, sp, #0
   156b6:	6078      	str	r0, [r7, #4]
   156b8:	4b0e      	ldr	r3, [pc, #56]	; (156f4 <I2cSensorsTxComplete+0x44>)
   156ba:	2200      	movs	r2, #0
   156bc:	701a      	strb	r2, [r3, #0]
   156be:	4b0d      	ldr	r3, [pc, #52]	; (156f4 <I2cSensorsTxComplete+0x44>)
   156c0:	2201      	movs	r2, #1
   156c2:	609a      	str	r2, [r3, #8]
   156c4:	2300      	movs	r3, #0
   156c6:	60fb      	str	r3, [r7, #12]
   156c8:	4b0b      	ldr	r3, [pc, #44]	; (156f8 <I2cSensorsTxComplete+0x48>)
   156ca:	681b      	ldr	r3, [r3, #0]
   156cc:	220c      	movs	r2, #12
   156ce:	18ba      	adds	r2, r7, r2
   156d0:	0011      	movs	r1, r2
   156d2:	0018      	movs	r0, r3
   156d4:	4b09      	ldr	r3, [pc, #36]	; (156fc <I2cSensorsTxComplete+0x4c>)
   156d6:	4798      	blx	r3
   156d8:	4b09      	ldr	r3, [pc, #36]	; (15700 <I2cSensorsTxComplete+0x50>)
   156da:	2200      	movs	r2, #0
   156dc:	701a      	strb	r2, [r3, #0]
   156de:	68fb      	ldr	r3, [r7, #12]
   156e0:	2b00      	cmp	r3, #0
   156e2:	d003      	beq.n	156ec <I2cSensorsTxComplete+0x3c>
   156e4:	4b07      	ldr	r3, [pc, #28]	; (15704 <I2cSensorsTxComplete+0x54>)
   156e6:	2280      	movs	r2, #128	; 0x80
   156e8:	0552      	lsls	r2, r2, #21
   156ea:	601a      	str	r2, [r3, #0]
   156ec:	46c0      	nop			; (mov r8, r8)
   156ee:	46bd      	mov	sp, r7
   156f0:	b004      	add	sp, #16
   156f2:	bd80      	pop	{r7, pc}
   156f4:	200004ac 	.word	0x200004ac
   156f8:	200046f0 	.word	0x200046f0
   156fc:	0001d1b5 	.word	0x0001d1b5
   15700:	200004a8 	.word	0x200004a8
   15704:	e000ed04 	.word	0xe000ed04

00015708 <I2cSensorsRxComplete>:
   15708:	b580      	push	{r7, lr}
   1570a:	b084      	sub	sp, #16
   1570c:	af00      	add	r7, sp, #0
   1570e:	6078      	str	r0, [r7, #4]
   15710:	4b0e      	ldr	r3, [pc, #56]	; (1574c <I2cSensorsRxComplete+0x44>)
   15712:	2200      	movs	r2, #0
   15714:	701a      	strb	r2, [r3, #0]
   15716:	4b0d      	ldr	r3, [pc, #52]	; (1574c <I2cSensorsRxComplete+0x44>)
   15718:	2201      	movs	r2, #1
   1571a:	609a      	str	r2, [r3, #8]
   1571c:	2300      	movs	r3, #0
   1571e:	60fb      	str	r3, [r7, #12]
   15720:	4b0b      	ldr	r3, [pc, #44]	; (15750 <I2cSensorsRxComplete+0x48>)
   15722:	681b      	ldr	r3, [r3, #0]
   15724:	220c      	movs	r2, #12
   15726:	18ba      	adds	r2, r7, r2
   15728:	0011      	movs	r1, r2
   1572a:	0018      	movs	r0, r3
   1572c:	4b09      	ldr	r3, [pc, #36]	; (15754 <I2cSensorsRxComplete+0x4c>)
   1572e:	4798      	blx	r3
   15730:	4b09      	ldr	r3, [pc, #36]	; (15758 <I2cSensorsRxComplete+0x50>)
   15732:	2200      	movs	r2, #0
   15734:	701a      	strb	r2, [r3, #0]
   15736:	68fb      	ldr	r3, [r7, #12]
   15738:	2b00      	cmp	r3, #0
   1573a:	d003      	beq.n	15744 <I2cSensorsRxComplete+0x3c>
   1573c:	4b07      	ldr	r3, [pc, #28]	; (1575c <I2cSensorsRxComplete+0x54>)
   1573e:	2280      	movs	r2, #128	; 0x80
   15740:	0552      	lsls	r2, r2, #21
   15742:	601a      	str	r2, [r3, #0]
   15744:	46c0      	nop			; (mov r8, r8)
   15746:	46bd      	mov	sp, r7
   15748:	b004      	add	sp, #16
   1574a:	bd80      	pop	{r7, pc}
   1574c:	200004ac 	.word	0x200004ac
   15750:	200046f0 	.word	0x200046f0
   15754:	0001d1b5 	.word	0x0001d1b5
   15758:	200004a8 	.word	0x200004a8
   1575c:	e000ed04 	.word	0xe000ed04

00015760 <I2cSensorsError>:
   15760:	b580      	push	{r7, lr}
   15762:	b084      	sub	sp, #16
   15764:	af00      	add	r7, sp, #0
   15766:	6078      	str	r0, [r7, #4]
   15768:	4b0e      	ldr	r3, [pc, #56]	; (157a4 <I2cSensorsError+0x44>)
   1576a:	2200      	movs	r2, #0
   1576c:	701a      	strb	r2, [r3, #0]
   1576e:	4b0d      	ldr	r3, [pc, #52]	; (157a4 <I2cSensorsError+0x44>)
   15770:	2201      	movs	r2, #1
   15772:	605a      	str	r2, [r3, #4]
   15774:	2300      	movs	r3, #0
   15776:	60fb      	str	r3, [r7, #12]
   15778:	4b0b      	ldr	r3, [pc, #44]	; (157a8 <I2cSensorsError+0x48>)
   1577a:	681b      	ldr	r3, [r3, #0]
   1577c:	220c      	movs	r2, #12
   1577e:	18ba      	adds	r2, r7, r2
   15780:	0011      	movs	r1, r2
   15782:	0018      	movs	r0, r3
   15784:	4b09      	ldr	r3, [pc, #36]	; (157ac <I2cSensorsError+0x4c>)
   15786:	4798      	blx	r3
   15788:	4b09      	ldr	r3, [pc, #36]	; (157b0 <I2cSensorsError+0x50>)
   1578a:	2201      	movs	r2, #1
   1578c:	701a      	strb	r2, [r3, #0]
   1578e:	68fb      	ldr	r3, [r7, #12]
   15790:	2b00      	cmp	r3, #0
   15792:	d003      	beq.n	1579c <I2cSensorsError+0x3c>
   15794:	4b07      	ldr	r3, [pc, #28]	; (157b4 <I2cSensorsError+0x54>)
   15796:	2280      	movs	r2, #128	; 0x80
   15798:	0552      	lsls	r2, r2, #21
   1579a:	601a      	str	r2, [r3, #0]
   1579c:	46c0      	nop			; (mov r8, r8)
   1579e:	46bd      	mov	sp, r7
   157a0:	b004      	add	sp, #16
   157a2:	bd80      	pop	{r7, pc}
   157a4:	200004ac 	.word	0x200004ac
   157a8:	200046f0 	.word	0x200046f0
   157ac:	0001d1b5 	.word	0x0001d1b5
   157b0:	200004a8 	.word	0x200004a8
   157b4:	e000ed04 	.word	0xe000ed04

000157b8 <I2cDriverRegisterSensorBusCallbacks>:
   157b8:	b580      	push	{r7, lr}
   157ba:	af00      	add	r7, sp, #0
   157bc:	4911      	ldr	r1, [pc, #68]	; (15804 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   157be:	4b12      	ldr	r3, [pc, #72]	; (15808 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   157c0:	2200      	movs	r2, #0
   157c2:	0018      	movs	r0, r3
   157c4:	4b11      	ldr	r3, [pc, #68]	; (1580c <I2cDriverRegisterSensorBusCallbacks+0x54>)
   157c6:	4798      	blx	r3
   157c8:	4b0f      	ldr	r3, [pc, #60]	; (15808 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   157ca:	2100      	movs	r1, #0
   157cc:	0018      	movs	r0, r3
   157ce:	4b10      	ldr	r3, [pc, #64]	; (15810 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   157d0:	4798      	blx	r3
   157d2:	4910      	ldr	r1, [pc, #64]	; (15814 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   157d4:	4b0c      	ldr	r3, [pc, #48]	; (15808 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   157d6:	2201      	movs	r2, #1
   157d8:	0018      	movs	r0, r3
   157da:	4b0c      	ldr	r3, [pc, #48]	; (1580c <I2cDriverRegisterSensorBusCallbacks+0x54>)
   157dc:	4798      	blx	r3
   157de:	4b0a      	ldr	r3, [pc, #40]	; (15808 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   157e0:	2101      	movs	r1, #1
   157e2:	0018      	movs	r0, r3
   157e4:	4b0a      	ldr	r3, [pc, #40]	; (15810 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   157e6:	4798      	blx	r3
   157e8:	490b      	ldr	r1, [pc, #44]	; (15818 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   157ea:	4b07      	ldr	r3, [pc, #28]	; (15808 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   157ec:	2202      	movs	r2, #2
   157ee:	0018      	movs	r0, r3
   157f0:	4b06      	ldr	r3, [pc, #24]	; (1580c <I2cDriverRegisterSensorBusCallbacks+0x54>)
   157f2:	4798      	blx	r3
   157f4:	4b04      	ldr	r3, [pc, #16]	; (15808 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   157f6:	2102      	movs	r1, #2
   157f8:	0018      	movs	r0, r3
   157fa:	4b05      	ldr	r3, [pc, #20]	; (15810 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   157fc:	4798      	blx	r3
   157fe:	46c0      	nop			; (mov r8, r8)
   15800:	46bd      	mov	sp, r7
   15802:	bd80      	pop	{r7, pc}
   15804:	000156b1 	.word	0x000156b1
   15808:	200046c8 	.word	0x200046c8
   1580c:	00012909 	.word	0x00012909
   15810:	000155c1 	.word	0x000155c1
   15814:	00015709 	.word	0x00015709
   15818:	00015761 	.word	0x00015761

0001581c <I2cInitializeDriver>:
   1581c:	b580      	push	{r7, lr}
   1581e:	b082      	sub	sp, #8
   15820:	af00      	add	r7, sp, #0
   15822:	2300      	movs	r3, #0
   15824:	607b      	str	r3, [r7, #4]
   15826:	4b14      	ldr	r3, [pc, #80]	; (15878 <I2cInitializeDriver+0x5c>)
   15828:	4798      	blx	r3
   1582a:	0003      	movs	r3, r0
   1582c:	607b      	str	r3, [r7, #4]
   1582e:	687b      	ldr	r3, [r7, #4]
   15830:	2b00      	cmp	r3, #0
   15832:	d11a      	bne.n	1586a <I2cInitializeDriver+0x4e>
   15834:	4b11      	ldr	r3, [pc, #68]	; (1587c <I2cInitializeDriver+0x60>)
   15836:	4798      	blx	r3
   15838:	2001      	movs	r0, #1
   1583a:	4b11      	ldr	r3, [pc, #68]	; (15880 <I2cInitializeDriver+0x64>)
   1583c:	4798      	blx	r3
   1583e:	0002      	movs	r2, r0
   15840:	4b10      	ldr	r3, [pc, #64]	; (15884 <I2cInitializeDriver+0x68>)
   15842:	601a      	str	r2, [r3, #0]
   15844:	2203      	movs	r2, #3
   15846:	2100      	movs	r1, #0
   15848:	2001      	movs	r0, #1
   1584a:	4b0f      	ldr	r3, [pc, #60]	; (15888 <I2cInitializeDriver+0x6c>)
   1584c:	4798      	blx	r3
   1584e:	0002      	movs	r2, r0
   15850:	4b0e      	ldr	r3, [pc, #56]	; (1588c <I2cInitializeDriver+0x70>)
   15852:	601a      	str	r2, [r3, #0]
   15854:	4b0b      	ldr	r3, [pc, #44]	; (15884 <I2cInitializeDriver+0x68>)
   15856:	681b      	ldr	r3, [r3, #0]
   15858:	2b00      	cmp	r3, #0
   1585a:	d003      	beq.n	15864 <I2cInitializeDriver+0x48>
   1585c:	4b0b      	ldr	r3, [pc, #44]	; (1588c <I2cInitializeDriver+0x70>)
   1585e:	681b      	ldr	r3, [r3, #0]
   15860:	2b00      	cmp	r3, #0
   15862:	d103      	bne.n	1586c <I2cInitializeDriver+0x50>
   15864:	2306      	movs	r3, #6
   15866:	607b      	str	r3, [r7, #4]
   15868:	e000      	b.n	1586c <I2cInitializeDriver+0x50>
   1586a:	46c0      	nop			; (mov r8, r8)
   1586c:	687b      	ldr	r3, [r7, #4]
   1586e:	0018      	movs	r0, r3
   15870:	46bd      	mov	sp, r7
   15872:	b002      	add	sp, #8
   15874:	bd80      	pop	{r7, pc}
   15876:	46c0      	nop			; (mov r8, r8)
   15878:	000155f5 	.word	0x000155f5
   1587c:	000157b9 	.word	0x000157b9
   15880:	0001caed 	.word	0x0001caed
   15884:	200046c4 	.word	0x200046c4
   15888:	0001c885 	.word	0x0001c885
   1588c:	200046f0 	.word	0x200046f0

00015890 <I2cWriteData>:
   15890:	b590      	push	{r4, r7, lr}
   15892:	b085      	sub	sp, #20
   15894:	af00      	add	r7, sp, #0
   15896:	6078      	str	r0, [r7, #4]
   15898:	2300      	movs	r3, #0
   1589a:	60fb      	str	r3, [r7, #12]
   1589c:	687b      	ldr	r3, [r7, #4]
   1589e:	2b00      	cmp	r3, #0
   158a0:	d003      	beq.n	158aa <I2cWriteData+0x1a>
   158a2:	687b      	ldr	r3, [r7, #4]
   158a4:	685b      	ldr	r3, [r3, #4]
   158a6:	2b00      	cmp	r3, #0
   158a8:	d103      	bne.n	158b2 <I2cWriteData+0x22>
   158aa:	2308      	movs	r3, #8
   158ac:	425b      	negs	r3, r3
   158ae:	60fb      	str	r3, [r7, #12]
   158b0:	e01f      	b.n	158f2 <I2cWriteData+0x62>
   158b2:	687b      	ldr	r3, [r7, #4]
   158b4:	781b      	ldrb	r3, [r3, #0]
   158b6:	b29a      	uxth	r2, r3
   158b8:	4b10      	ldr	r3, [pc, #64]	; (158fc <I2cWriteData+0x6c>)
   158ba:	801a      	strh	r2, [r3, #0]
   158bc:	687b      	ldr	r3, [r7, #4]
   158be:	685a      	ldr	r2, [r3, #4]
   158c0:	4b0e      	ldr	r3, [pc, #56]	; (158fc <I2cWriteData+0x6c>)
   158c2:	605a      	str	r2, [r3, #4]
   158c4:	687b      	ldr	r3, [r7, #4]
   158c6:	89da      	ldrh	r2, [r3, #14]
   158c8:	4b0c      	ldr	r3, [pc, #48]	; (158fc <I2cWriteData+0x6c>)
   158ca:	805a      	strh	r2, [r3, #2]
   158cc:	230b      	movs	r3, #11
   158ce:	18fc      	adds	r4, r7, r3
   158d0:	4a0a      	ldr	r2, [pc, #40]	; (158fc <I2cWriteData+0x6c>)
   158d2:	4b0b      	ldr	r3, [pc, #44]	; (15900 <I2cWriteData+0x70>)
   158d4:	0011      	movs	r1, r2
   158d6:	0018      	movs	r0, r3
   158d8:	4b0a      	ldr	r3, [pc, #40]	; (15904 <I2cWriteData+0x74>)
   158da:	4798      	blx	r3
   158dc:	0003      	movs	r3, r0
   158de:	7023      	strb	r3, [r4, #0]
   158e0:	230b      	movs	r3, #11
   158e2:	18fb      	adds	r3, r7, r3
   158e4:	781b      	ldrb	r3, [r3, #0]
   158e6:	2b00      	cmp	r3, #0
   158e8:	d003      	beq.n	158f2 <I2cWriteData+0x62>
   158ea:	2306      	movs	r3, #6
   158ec:	425b      	negs	r3, r3
   158ee:	60fb      	str	r3, [r7, #12]
   158f0:	46c0      	nop			; (mov r8, r8)
   158f2:	68fb      	ldr	r3, [r7, #12]
   158f4:	0018      	movs	r0, r3
   158f6:	46bd      	mov	sp, r7
   158f8:	b005      	add	sp, #20
   158fa:	bd90      	pop	{r4, r7, pc}
   158fc:	200046f4 	.word	0x200046f4
   15900:	200046c8 	.word	0x200046c8
   15904:	00012b8d 	.word	0x00012b8d

00015908 <I2cReadData>:
   15908:	b590      	push	{r4, r7, lr}
   1590a:	b085      	sub	sp, #20
   1590c:	af00      	add	r7, sp, #0
   1590e:	6078      	str	r0, [r7, #4]
   15910:	2300      	movs	r3, #0
   15912:	60fb      	str	r3, [r7, #12]
   15914:	687b      	ldr	r3, [r7, #4]
   15916:	2b00      	cmp	r3, #0
   15918:	d003      	beq.n	15922 <I2cReadData+0x1a>
   1591a:	687b      	ldr	r3, [r7, #4]
   1591c:	685b      	ldr	r3, [r3, #4]
   1591e:	2b00      	cmp	r3, #0
   15920:	d103      	bne.n	1592a <I2cReadData+0x22>
   15922:	2308      	movs	r3, #8
   15924:	425b      	negs	r3, r3
   15926:	60fb      	str	r3, [r7, #12]
   15928:	e01f      	b.n	1596a <I2cReadData+0x62>
   1592a:	687b      	ldr	r3, [r7, #4]
   1592c:	781b      	ldrb	r3, [r3, #0]
   1592e:	b29a      	uxth	r2, r3
   15930:	4b10      	ldr	r3, [pc, #64]	; (15974 <I2cReadData+0x6c>)
   15932:	801a      	strh	r2, [r3, #0]
   15934:	687b      	ldr	r3, [r7, #4]
   15936:	689a      	ldr	r2, [r3, #8]
   15938:	4b0e      	ldr	r3, [pc, #56]	; (15974 <I2cReadData+0x6c>)
   1593a:	605a      	str	r2, [r3, #4]
   1593c:	687b      	ldr	r3, [r7, #4]
   1593e:	899a      	ldrh	r2, [r3, #12]
   15940:	4b0c      	ldr	r3, [pc, #48]	; (15974 <I2cReadData+0x6c>)
   15942:	805a      	strh	r2, [r3, #2]
   15944:	230b      	movs	r3, #11
   15946:	18fc      	adds	r4, r7, r3
   15948:	4a0a      	ldr	r2, [pc, #40]	; (15974 <I2cReadData+0x6c>)
   1594a:	4b0b      	ldr	r3, [pc, #44]	; (15978 <I2cReadData+0x70>)
   1594c:	0011      	movs	r1, r2
   1594e:	0018      	movs	r0, r3
   15950:	4b0a      	ldr	r3, [pc, #40]	; (1597c <I2cReadData+0x74>)
   15952:	4798      	blx	r3
   15954:	0003      	movs	r3, r0
   15956:	7023      	strb	r3, [r4, #0]
   15958:	230b      	movs	r3, #11
   1595a:	18fb      	adds	r3, r7, r3
   1595c:	781b      	ldrb	r3, [r3, #0]
   1595e:	2b00      	cmp	r3, #0
   15960:	d003      	beq.n	1596a <I2cReadData+0x62>
   15962:	2306      	movs	r3, #6
   15964:	425b      	negs	r3, r3
   15966:	60fb      	str	r3, [r7, #12]
   15968:	46c0      	nop			; (mov r8, r8)
   1596a:	68fb      	ldr	r3, [r7, #12]
   1596c:	0018      	movs	r0, r3
   1596e:	46bd      	mov	sp, r7
   15970:	b005      	add	sp, #20
   15972:	bd90      	pop	{r4, r7, pc}
   15974:	200046f4 	.word	0x200046f4
   15978:	200046c8 	.word	0x200046c8
   1597c:	00012aa9 	.word	0x00012aa9

00015980 <I2cFreeMutex>:
   15980:	b590      	push	{r4, r7, lr}
   15982:	b083      	sub	sp, #12
   15984:	af00      	add	r7, sp, #0
   15986:	2300      	movs	r3, #0
   15988:	607b      	str	r3, [r7, #4]
   1598a:	4b09      	ldr	r3, [pc, #36]	; (159b0 <I2cFreeMutex+0x30>)
   1598c:	6818      	ldr	r0, [r3, #0]
   1598e:	2300      	movs	r3, #0
   15990:	2200      	movs	r2, #0
   15992:	2100      	movs	r1, #0
   15994:	4c07      	ldr	r4, [pc, #28]	; (159b4 <I2cFreeMutex+0x34>)
   15996:	47a0      	blx	r4
   15998:	0003      	movs	r3, r0
   1599a:	2b01      	cmp	r3, #1
   1599c:	d002      	beq.n	159a4 <I2cFreeMutex+0x24>
   1599e:	2314      	movs	r3, #20
   159a0:	425b      	negs	r3, r3
   159a2:	607b      	str	r3, [r7, #4]
   159a4:	687b      	ldr	r3, [r7, #4]
   159a6:	0018      	movs	r0, r3
   159a8:	46bd      	mov	sp, r7
   159aa:	b003      	add	sp, #12
   159ac:	bd90      	pop	{r4, r7, pc}
   159ae:	46c0      	nop			; (mov r8, r8)
   159b0:	200046c4 	.word	0x200046c4
   159b4:	0001cb2d 	.word	0x0001cb2d

000159b8 <I2cGetMutex>:
   159b8:	b580      	push	{r7, lr}
   159ba:	b084      	sub	sp, #16
   159bc:	af00      	add	r7, sp, #0
   159be:	6078      	str	r0, [r7, #4]
   159c0:	2300      	movs	r3, #0
   159c2:	60fb      	str	r3, [r7, #12]
   159c4:	4b08      	ldr	r3, [pc, #32]	; (159e8 <I2cGetMutex+0x30>)
   159c6:	681b      	ldr	r3, [r3, #0]
   159c8:	687a      	ldr	r2, [r7, #4]
   159ca:	0011      	movs	r1, r2
   159cc:	0018      	movs	r0, r3
   159ce:	4b07      	ldr	r3, [pc, #28]	; (159ec <I2cGetMutex+0x34>)
   159d0:	4798      	blx	r3
   159d2:	0003      	movs	r3, r0
   159d4:	2b01      	cmp	r3, #1
   159d6:	d002      	beq.n	159de <I2cGetMutex+0x26>
   159d8:	231d      	movs	r3, #29
   159da:	425b      	negs	r3, r3
   159dc:	60fb      	str	r3, [r7, #12]
   159de:	68fb      	ldr	r3, [r7, #12]
   159e0:	0018      	movs	r0, r3
   159e2:	46bd      	mov	sp, r7
   159e4:	b004      	add	sp, #16
   159e6:	bd80      	pop	{r7, pc}
   159e8:	200046c4 	.word	0x200046c4
   159ec:	0001d83d 	.word	0x0001d83d

000159f0 <I2cGetSemaphoreHandle>:
   159f0:	b580      	push	{r7, lr}
   159f2:	b084      	sub	sp, #16
   159f4:	af00      	add	r7, sp, #0
   159f6:	6078      	str	r0, [r7, #4]
   159f8:	2300      	movs	r3, #0
   159fa:	60fb      	str	r3, [r7, #12]
   159fc:	4b04      	ldr	r3, [pc, #16]	; (15a10 <I2cGetSemaphoreHandle+0x20>)
   159fe:	681a      	ldr	r2, [r3, #0]
   15a00:	687b      	ldr	r3, [r7, #4]
   15a02:	601a      	str	r2, [r3, #0]
   15a04:	68fb      	ldr	r3, [r7, #12]
   15a06:	0018      	movs	r0, r3
   15a08:	46bd      	mov	sp, r7
   15a0a:	b004      	add	sp, #16
   15a0c:	bd80      	pop	{r7, pc}
   15a0e:	46c0      	nop			; (mov r8, r8)
   15a10:	200046f0 	.word	0x200046f0

00015a14 <I2cGetTaskErrorStatus>:
   15a14:	b580      	push	{r7, lr}
   15a16:	af00      	add	r7, sp, #0
   15a18:	4b02      	ldr	r3, [pc, #8]	; (15a24 <I2cGetTaskErrorStatus+0x10>)
   15a1a:	781b      	ldrb	r3, [r3, #0]
   15a1c:	0018      	movs	r0, r3
   15a1e:	46bd      	mov	sp, r7
   15a20:	bd80      	pop	{r7, pc}
   15a22:	46c0      	nop			; (mov r8, r8)
   15a24:	200004a8 	.word	0x200004a8

00015a28 <I2cSetTaskErrorStatus>:
   15a28:	b580      	push	{r7, lr}
   15a2a:	b082      	sub	sp, #8
   15a2c:	af00      	add	r7, sp, #0
   15a2e:	0002      	movs	r2, r0
   15a30:	1dfb      	adds	r3, r7, #7
   15a32:	701a      	strb	r2, [r3, #0]
   15a34:	4b03      	ldr	r3, [pc, #12]	; (15a44 <I2cSetTaskErrorStatus+0x1c>)
   15a36:	1dfa      	adds	r2, r7, #7
   15a38:	7812      	ldrb	r2, [r2, #0]
   15a3a:	701a      	strb	r2, [r3, #0]
   15a3c:	46c0      	nop			; (mov r8, r8)
   15a3e:	46bd      	mov	sp, r7
   15a40:	b002      	add	sp, #8
   15a42:	bd80      	pop	{r7, pc}
   15a44:	200004a8 	.word	0x200004a8

00015a48 <I2cWriteDataWait>:
   15a48:	b580      	push	{r7, lr}
   15a4a:	b084      	sub	sp, #16
   15a4c:	af00      	add	r7, sp, #0
   15a4e:	6078      	str	r0, [r7, #4]
   15a50:	6039      	str	r1, [r7, #0]
   15a52:	2300      	movs	r3, #0
   15a54:	60fb      	str	r3, [r7, #12]
   15a56:	2300      	movs	r3, #0
   15a58:	60bb      	str	r3, [r7, #8]
   15a5a:	2396      	movs	r3, #150	; 0x96
   15a5c:	005b      	lsls	r3, r3, #1
   15a5e:	0018      	movs	r0, r3
   15a60:	4b28      	ldr	r3, [pc, #160]	; (15b04 <I2cWriteDataWait+0xbc>)
   15a62:	4798      	blx	r3
   15a64:	0003      	movs	r3, r0
   15a66:	60fb      	str	r3, [r7, #12]
   15a68:	68fb      	ldr	r3, [r7, #12]
   15a6a:	2b00      	cmp	r3, #0
   15a6c:	d138      	bne.n	15ae0 <I2cWriteDataWait+0x98>
   15a6e:	2308      	movs	r3, #8
   15a70:	18fb      	adds	r3, r7, r3
   15a72:	0018      	movs	r0, r3
   15a74:	4b24      	ldr	r3, [pc, #144]	; (15b08 <I2cWriteDataWait+0xc0>)
   15a76:	4798      	blx	r3
   15a78:	0003      	movs	r3, r0
   15a7a:	60fb      	str	r3, [r7, #12]
   15a7c:	68fb      	ldr	r3, [r7, #12]
   15a7e:	2b00      	cmp	r3, #0
   15a80:	d130      	bne.n	15ae4 <I2cWriteDataWait+0x9c>
   15a82:	687b      	ldr	r3, [r7, #4]
   15a84:	0018      	movs	r0, r3
   15a86:	4b21      	ldr	r3, [pc, #132]	; (15b0c <I2cWriteDataWait+0xc4>)
   15a88:	4798      	blx	r3
   15a8a:	0003      	movs	r3, r0
   15a8c:	60fb      	str	r3, [r7, #12]
   15a8e:	68fb      	ldr	r3, [r7, #12]
   15a90:	2b00      	cmp	r3, #0
   15a92:	d12a      	bne.n	15aea <I2cWriteDataWait+0xa2>
   15a94:	68bb      	ldr	r3, [r7, #8]
   15a96:	683a      	ldr	r2, [r7, #0]
   15a98:	0011      	movs	r1, r2
   15a9a:	0018      	movs	r0, r3
   15a9c:	4b1c      	ldr	r3, [pc, #112]	; (15b10 <I2cWriteDataWait+0xc8>)
   15a9e:	4798      	blx	r3
   15aa0:	0003      	movs	r3, r0
   15aa2:	2b01      	cmp	r3, #1
   15aa4:	d111      	bne.n	15aca <I2cWriteDataWait+0x82>
   15aa6:	4b1b      	ldr	r3, [pc, #108]	; (15b14 <I2cWriteDataWait+0xcc>)
   15aa8:	4798      	blx	r3
   15aaa:	1e03      	subs	r3, r0, #0
   15aac:	d011      	beq.n	15ad2 <I2cWriteDataWait+0x8a>
   15aae:	2000      	movs	r0, #0
   15ab0:	4b19      	ldr	r3, [pc, #100]	; (15b18 <I2cWriteDataWait+0xd0>)
   15ab2:	4798      	blx	r3
   15ab4:	68fb      	ldr	r3, [r7, #12]
   15ab6:	2b00      	cmp	r3, #0
   15ab8:	d003      	beq.n	15ac2 <I2cWriteDataWait+0x7a>
   15aba:	2321      	movs	r3, #33	; 0x21
   15abc:	425b      	negs	r3, r3
   15abe:	60fb      	str	r3, [r7, #12]
   15ac0:	e014      	b.n	15aec <I2cWriteDataWait+0xa4>
   15ac2:	2303      	movs	r3, #3
   15ac4:	425b      	negs	r3, r3
   15ac6:	60fb      	str	r3, [r7, #12]
   15ac8:	e010      	b.n	15aec <I2cWriteDataWait+0xa4>
   15aca:	2303      	movs	r3, #3
   15acc:	425b      	negs	r3, r3
   15ace:	60fb      	str	r3, [r7, #12]
   15ad0:	e00c      	b.n	15aec <I2cWriteDataWait+0xa4>
   15ad2:	4b12      	ldr	r3, [pc, #72]	; (15b1c <I2cWriteDataWait+0xd4>)
   15ad4:	4798      	blx	r3
   15ad6:	0002      	movs	r2, r0
   15ad8:	68fb      	ldr	r3, [r7, #12]
   15ada:	4313      	orrs	r3, r2
   15adc:	60fb      	str	r3, [r7, #12]
   15ade:	e002      	b.n	15ae6 <I2cWriteDataWait+0x9e>
   15ae0:	46c0      	nop			; (mov r8, r8)
   15ae2:	e000      	b.n	15ae6 <I2cWriteDataWait+0x9e>
   15ae4:	46c0      	nop			; (mov r8, r8)
   15ae6:	68fb      	ldr	r3, [r7, #12]
   15ae8:	e007      	b.n	15afa <I2cWriteDataWait+0xb2>
   15aea:	46c0      	nop			; (mov r8, r8)
   15aec:	4b0b      	ldr	r3, [pc, #44]	; (15b1c <I2cWriteDataWait+0xd4>)
   15aee:	4798      	blx	r3
   15af0:	0002      	movs	r2, r0
   15af2:	68fb      	ldr	r3, [r7, #12]
   15af4:	4313      	orrs	r3, r2
   15af6:	60fb      	str	r3, [r7, #12]
   15af8:	68fb      	ldr	r3, [r7, #12]
   15afa:	0018      	movs	r0, r3
   15afc:	46bd      	mov	sp, r7
   15afe:	b004      	add	sp, #16
   15b00:	bd80      	pop	{r7, pc}
   15b02:	46c0      	nop			; (mov r8, r8)
   15b04:	000159b9 	.word	0x000159b9
   15b08:	000159f1 	.word	0x000159f1
   15b0c:	00015891 	.word	0x00015891
   15b10:	0001d83d 	.word	0x0001d83d
   15b14:	00015a15 	.word	0x00015a15
   15b18:	00015a29 	.word	0x00015a29
   15b1c:	00015981 	.word	0x00015981

00015b20 <I2cReadDataWait>:
   15b20:	b580      	push	{r7, lr}
   15b22:	b086      	sub	sp, #24
   15b24:	af00      	add	r7, sp, #0
   15b26:	60f8      	str	r0, [r7, #12]
   15b28:	60b9      	str	r1, [r7, #8]
   15b2a:	607a      	str	r2, [r7, #4]
   15b2c:	2300      	movs	r3, #0
   15b2e:	617b      	str	r3, [r7, #20]
   15b30:	2300      	movs	r3, #0
   15b32:	613b      	str	r3, [r7, #16]
   15b34:	2396      	movs	r3, #150	; 0x96
   15b36:	005b      	lsls	r3, r3, #1
   15b38:	0018      	movs	r0, r3
   15b3a:	4b35      	ldr	r3, [pc, #212]	; (15c10 <I2cReadDataWait+0xf0>)
   15b3c:	4798      	blx	r3
   15b3e:	0003      	movs	r3, r0
   15b40:	617b      	str	r3, [r7, #20]
   15b42:	697b      	ldr	r3, [r7, #20]
   15b44:	2b00      	cmp	r3, #0
   15b46:	d155      	bne.n	15bf4 <I2cReadDataWait+0xd4>
   15b48:	2310      	movs	r3, #16
   15b4a:	18fb      	adds	r3, r7, r3
   15b4c:	0018      	movs	r0, r3
   15b4e:	4b31      	ldr	r3, [pc, #196]	; (15c14 <I2cReadDataWait+0xf4>)
   15b50:	4798      	blx	r3
   15b52:	0003      	movs	r3, r0
   15b54:	617b      	str	r3, [r7, #20]
   15b56:	697b      	ldr	r3, [r7, #20]
   15b58:	2b00      	cmp	r3, #0
   15b5a:	d14d      	bne.n	15bf8 <I2cReadDataWait+0xd8>
   15b5c:	68fb      	ldr	r3, [r7, #12]
   15b5e:	0018      	movs	r0, r3
   15b60:	4b2d      	ldr	r3, [pc, #180]	; (15c18 <I2cReadDataWait+0xf8>)
   15b62:	4798      	blx	r3
   15b64:	0003      	movs	r3, r0
   15b66:	617b      	str	r3, [r7, #20]
   15b68:	697b      	ldr	r3, [r7, #20]
   15b6a:	2b00      	cmp	r3, #0
   15b6c:	d147      	bne.n	15bfe <I2cReadDataWait+0xde>
   15b6e:	693b      	ldr	r3, [r7, #16]
   15b70:	687a      	ldr	r2, [r7, #4]
   15b72:	0011      	movs	r1, r2
   15b74:	0018      	movs	r0, r3
   15b76:	4b29      	ldr	r3, [pc, #164]	; (15c1c <I2cReadDataWait+0xfc>)
   15b78:	4798      	blx	r3
   15b7a:	0003      	movs	r3, r0
   15b7c:	2b01      	cmp	r3, #1
   15b7e:	d118      	bne.n	15bb2 <I2cReadDataWait+0x92>
   15b80:	4b27      	ldr	r3, [pc, #156]	; (15c20 <I2cReadDataWait+0x100>)
   15b82:	4798      	blx	r3
   15b84:	1e03      	subs	r3, r0, #0
   15b86:	d006      	beq.n	15b96 <I2cReadDataWait+0x76>
   15b88:	2000      	movs	r0, #0
   15b8a:	4b26      	ldr	r3, [pc, #152]	; (15c24 <I2cReadDataWait+0x104>)
   15b8c:	4798      	blx	r3
   15b8e:	2303      	movs	r3, #3
   15b90:	425b      	negs	r3, r3
   15b92:	617b      	str	r3, [r7, #20]
   15b94:	e034      	b.n	15c00 <I2cReadDataWait+0xe0>
   15b96:	68bb      	ldr	r3, [r7, #8]
   15b98:	0018      	movs	r0, r3
   15b9a:	4b23      	ldr	r3, [pc, #140]	; (15c28 <I2cReadDataWait+0x108>)
   15b9c:	4798      	blx	r3
   15b9e:	68fb      	ldr	r3, [r7, #12]
   15ba0:	0018      	movs	r0, r3
   15ba2:	4b22      	ldr	r3, [pc, #136]	; (15c2c <I2cReadDataWait+0x10c>)
   15ba4:	4798      	blx	r3
   15ba6:	0003      	movs	r3, r0
   15ba8:	617b      	str	r3, [r7, #20]
   15baa:	697b      	ldr	r3, [r7, #20]
   15bac:	2b00      	cmp	r3, #0
   15bae:	d004      	beq.n	15bba <I2cReadDataWait+0x9a>
   15bb0:	e026      	b.n	15c00 <I2cReadDataWait+0xe0>
   15bb2:	2303      	movs	r3, #3
   15bb4:	425b      	negs	r3, r3
   15bb6:	617b      	str	r3, [r7, #20]
   15bb8:	e022      	b.n	15c00 <I2cReadDataWait+0xe0>
   15bba:	693b      	ldr	r3, [r7, #16]
   15bbc:	687a      	ldr	r2, [r7, #4]
   15bbe:	0011      	movs	r1, r2
   15bc0:	0018      	movs	r0, r3
   15bc2:	4b16      	ldr	r3, [pc, #88]	; (15c1c <I2cReadDataWait+0xfc>)
   15bc4:	4798      	blx	r3
   15bc6:	0003      	movs	r3, r0
   15bc8:	2b01      	cmp	r3, #1
   15bca:	d10a      	bne.n	15be2 <I2cReadDataWait+0xc2>
   15bcc:	4b14      	ldr	r3, [pc, #80]	; (15c20 <I2cReadDataWait+0x100>)
   15bce:	4798      	blx	r3
   15bd0:	1e03      	subs	r3, r0, #0
   15bd2:	d00a      	beq.n	15bea <I2cReadDataWait+0xca>
   15bd4:	2000      	movs	r0, #0
   15bd6:	4b13      	ldr	r3, [pc, #76]	; (15c24 <I2cReadDataWait+0x104>)
   15bd8:	4798      	blx	r3
   15bda:	2303      	movs	r3, #3
   15bdc:	425b      	negs	r3, r3
   15bde:	617b      	str	r3, [r7, #20]
   15be0:	e00e      	b.n	15c00 <I2cReadDataWait+0xe0>
   15be2:	2303      	movs	r3, #3
   15be4:	425b      	negs	r3, r3
   15be6:	617b      	str	r3, [r7, #20]
   15be8:	e00a      	b.n	15c00 <I2cReadDataWait+0xe0>
   15bea:	4b11      	ldr	r3, [pc, #68]	; (15c30 <I2cReadDataWait+0x110>)
   15bec:	4798      	blx	r3
   15bee:	0003      	movs	r3, r0
   15bf0:	617b      	str	r3, [r7, #20]
   15bf2:	e002      	b.n	15bfa <I2cReadDataWait+0xda>
   15bf4:	46c0      	nop			; (mov r8, r8)
   15bf6:	e000      	b.n	15bfa <I2cReadDataWait+0xda>
   15bf8:	46c0      	nop			; (mov r8, r8)
   15bfa:	697b      	ldr	r3, [r7, #20]
   15bfc:	e003      	b.n	15c06 <I2cReadDataWait+0xe6>
   15bfe:	46c0      	nop			; (mov r8, r8)
   15c00:	4b0b      	ldr	r3, [pc, #44]	; (15c30 <I2cReadDataWait+0x110>)
   15c02:	4798      	blx	r3
   15c04:	697b      	ldr	r3, [r7, #20]
   15c06:	0018      	movs	r0, r3
   15c08:	46bd      	mov	sp, r7
   15c0a:	b006      	add	sp, #24
   15c0c:	bd80      	pop	{r7, pc}
   15c0e:	46c0      	nop			; (mov r8, r8)
   15c10:	000159b9 	.word	0x000159b9
   15c14:	000159f1 	.word	0x000159f1
   15c18:	00015891 	.word	0x00015891
   15c1c:	0001d83d 	.word	0x0001d83d
   15c20:	00015a15 	.word	0x00015a15
   15c24:	00015a29 	.word	0x00015a29
   15c28:	0001e591 	.word	0x0001e591
   15c2c:	00015909 	.word	0x00015909
   15c30:	00015981 	.word	0x00015981

00015c34 <I2cPingAddressWait>:
   15c34:	b580      	push	{r7, lr}
   15c36:	b086      	sub	sp, #24
   15c38:	af00      	add	r7, sp, #0
   15c3a:	60f8      	str	r0, [r7, #12]
   15c3c:	60b9      	str	r1, [r7, #8]
   15c3e:	607a      	str	r2, [r7, #4]
   15c40:	2300      	movs	r3, #0
   15c42:	617b      	str	r3, [r7, #20]
   15c44:	2300      	movs	r3, #0
   15c46:	613b      	str	r3, [r7, #16]
   15c48:	2396      	movs	r3, #150	; 0x96
   15c4a:	005b      	lsls	r3, r3, #1
   15c4c:	0018      	movs	r0, r3
   15c4e:	4b24      	ldr	r3, [pc, #144]	; (15ce0 <I2cPingAddressWait+0xac>)
   15c50:	4798      	blx	r3
   15c52:	0003      	movs	r3, r0
   15c54:	617b      	str	r3, [r7, #20]
   15c56:	697b      	ldr	r3, [r7, #20]
   15c58:	2b00      	cmp	r3, #0
   15c5a:	d133      	bne.n	15cc4 <I2cPingAddressWait+0x90>
   15c5c:	2310      	movs	r3, #16
   15c5e:	18fb      	adds	r3, r7, r3
   15c60:	0018      	movs	r0, r3
   15c62:	4b20      	ldr	r3, [pc, #128]	; (15ce4 <I2cPingAddressWait+0xb0>)
   15c64:	4798      	blx	r3
   15c66:	0003      	movs	r3, r0
   15c68:	617b      	str	r3, [r7, #20]
   15c6a:	697b      	ldr	r3, [r7, #20]
   15c6c:	2b00      	cmp	r3, #0
   15c6e:	d12b      	bne.n	15cc8 <I2cPingAddressWait+0x94>
   15c70:	68fb      	ldr	r3, [r7, #12]
   15c72:	0018      	movs	r0, r3
   15c74:	4b1c      	ldr	r3, [pc, #112]	; (15ce8 <I2cPingAddressWait+0xb4>)
   15c76:	4798      	blx	r3
   15c78:	0003      	movs	r3, r0
   15c7a:	617b      	str	r3, [r7, #20]
   15c7c:	697b      	ldr	r3, [r7, #20]
   15c7e:	2b00      	cmp	r3, #0
   15c80:	d125      	bne.n	15cce <I2cPingAddressWait+0x9a>
   15c82:	693b      	ldr	r3, [r7, #16]
   15c84:	687a      	ldr	r2, [r7, #4]
   15c86:	0011      	movs	r1, r2
   15c88:	0018      	movs	r0, r3
   15c8a:	4b18      	ldr	r3, [pc, #96]	; (15cec <I2cPingAddressWait+0xb8>)
   15c8c:	4798      	blx	r3
   15c8e:	0003      	movs	r3, r0
   15c90:	2b01      	cmp	r3, #1
   15c92:	d113      	bne.n	15cbc <I2cPingAddressWait+0x88>
   15c94:	4b16      	ldr	r3, [pc, #88]	; (15cf0 <I2cPingAddressWait+0xbc>)
   15c96:	4798      	blx	r3
   15c98:	1e03      	subs	r3, r0, #0
   15c9a:	d006      	beq.n	15caa <I2cPingAddressWait+0x76>
   15c9c:	2000      	movs	r0, #0
   15c9e:	4b15      	ldr	r3, [pc, #84]	; (15cf4 <I2cPingAddressWait+0xc0>)
   15ca0:	4798      	blx	r3
   15ca2:	2303      	movs	r3, #3
   15ca4:	425b      	negs	r3, r3
   15ca6:	617b      	str	r3, [r7, #20]
   15ca8:	e012      	b.n	15cd0 <I2cPingAddressWait+0x9c>
   15caa:	68bb      	ldr	r3, [r7, #8]
   15cac:	0018      	movs	r0, r3
   15cae:	4b12      	ldr	r3, [pc, #72]	; (15cf8 <I2cPingAddressWait+0xc4>)
   15cb0:	4798      	blx	r3
   15cb2:	4b12      	ldr	r3, [pc, #72]	; (15cfc <I2cPingAddressWait+0xc8>)
   15cb4:	4798      	blx	r3
   15cb6:	0003      	movs	r3, r0
   15cb8:	617b      	str	r3, [r7, #20]
   15cba:	e006      	b.n	15cca <I2cPingAddressWait+0x96>
   15cbc:	2303      	movs	r3, #3
   15cbe:	425b      	negs	r3, r3
   15cc0:	617b      	str	r3, [r7, #20]
   15cc2:	e005      	b.n	15cd0 <I2cPingAddressWait+0x9c>
   15cc4:	46c0      	nop			; (mov r8, r8)
   15cc6:	e000      	b.n	15cca <I2cPingAddressWait+0x96>
   15cc8:	46c0      	nop			; (mov r8, r8)
   15cca:	697b      	ldr	r3, [r7, #20]
   15ccc:	e003      	b.n	15cd6 <I2cPingAddressWait+0xa2>
   15cce:	46c0      	nop			; (mov r8, r8)
   15cd0:	4b0a      	ldr	r3, [pc, #40]	; (15cfc <I2cPingAddressWait+0xc8>)
   15cd2:	4798      	blx	r3
   15cd4:	697b      	ldr	r3, [r7, #20]
   15cd6:	0018      	movs	r0, r3
   15cd8:	46bd      	mov	sp, r7
   15cda:	b006      	add	sp, #24
   15cdc:	bd80      	pop	{r7, pc}
   15cde:	46c0      	nop			; (mov r8, r8)
   15ce0:	000159b9 	.word	0x000159b9
   15ce4:	000159f1 	.word	0x000159f1
   15ce8:	00015891 	.word	0x00015891
   15cec:	0001d83d 	.word	0x0001d83d
   15cf0:	00015a15 	.word	0x00015a15
   15cf4:	00015a29 	.word	0x00015a29
   15cf8:	0001e591 	.word	0x0001e591
   15cfc:	00015981 	.word	0x00015981

00015d00 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   15d00:	b5b0      	push	{r4, r5, r7, lr}
   15d02:	b086      	sub	sp, #24
   15d04:	af00      	add	r7, sp, #0
   15d06:	60f8      	str	r0, [r7, #12]
   15d08:	0008      	movs	r0, r1
   15d0a:	607a      	str	r2, [r7, #4]
   15d0c:	0019      	movs	r1, r3
   15d0e:	230b      	movs	r3, #11
   15d10:	18fb      	adds	r3, r7, r3
   15d12:	1c02      	adds	r2, r0, #0
   15d14:	701a      	strb	r2, [r3, #0]
   15d16:	2308      	movs	r3, #8
   15d18:	18fb      	adds	r3, r7, r3
   15d1a:	1c0a      	adds	r2, r1, #0
   15d1c:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   15d1e:	68fb      	ldr	r3, [r7, #12]
   15d20:	685c      	ldr	r4, [r3, #4]
   15d22:	68fb      	ldr	r3, [r7, #12]
   15d24:	6898      	ldr	r0, [r3, #8]
   15d26:	2308      	movs	r3, #8
   15d28:	18fb      	adds	r3, r7, r3
   15d2a:	881d      	ldrh	r5, [r3, #0]
   15d2c:	687a      	ldr	r2, [r7, #4]
   15d2e:	230b      	movs	r3, #11
   15d30:	18fb      	adds	r3, r7, r3
   15d32:	7819      	ldrb	r1, [r3, #0]
   15d34:	002b      	movs	r3, r5
   15d36:	47a0      	blx	r4
   15d38:	0003      	movs	r3, r0
   15d3a:	617b      	str	r3, [r7, #20]

  return ret;
   15d3c:	697b      	ldr	r3, [r7, #20]
}
   15d3e:	0018      	movs	r0, r3
   15d40:	46bd      	mov	sp, r7
   15d42:	b006      	add	sp, #24
   15d44:	bdb0      	pop	{r4, r5, r7, pc}

00015d46 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   15d46:	b5b0      	push	{r4, r5, r7, lr}
   15d48:	b086      	sub	sp, #24
   15d4a:	af00      	add	r7, sp, #0
   15d4c:	60f8      	str	r0, [r7, #12]
   15d4e:	0008      	movs	r0, r1
   15d50:	607a      	str	r2, [r7, #4]
   15d52:	0019      	movs	r1, r3
   15d54:	230b      	movs	r3, #11
   15d56:	18fb      	adds	r3, r7, r3
   15d58:	1c02      	adds	r2, r0, #0
   15d5a:	701a      	strb	r2, [r3, #0]
   15d5c:	2308      	movs	r3, #8
   15d5e:	18fb      	adds	r3, r7, r3
   15d60:	1c0a      	adds	r2, r1, #0
   15d62:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   15d64:	68fb      	ldr	r3, [r7, #12]
   15d66:	681c      	ldr	r4, [r3, #0]
   15d68:	68fb      	ldr	r3, [r7, #12]
   15d6a:	6898      	ldr	r0, [r3, #8]
   15d6c:	2308      	movs	r3, #8
   15d6e:	18fb      	adds	r3, r7, r3
   15d70:	881d      	ldrh	r5, [r3, #0]
   15d72:	687a      	ldr	r2, [r7, #4]
   15d74:	230b      	movs	r3, #11
   15d76:	18fb      	adds	r3, r7, r3
   15d78:	7819      	ldrb	r1, [r3, #0]
   15d7a:	002b      	movs	r3, r5
   15d7c:	47a0      	blx	r4
   15d7e:	0003      	movs	r3, r0
   15d80:	617b      	str	r3, [r7, #20]

  return ret;
   15d82:	697b      	ldr	r3, [r7, #20]
}
   15d84:	0018      	movs	r0, r3
   15d86:	46bd      	mov	sp, r7
   15d88:	b006      	add	sp, #24
   15d8a:	bdb0      	pop	{r4, r5, r7, pc}

00015d8c <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
   15d8c:	b580      	push	{r7, lr}
   15d8e:	b082      	sub	sp, #8
   15d90:	af00      	add	r7, sp, #0
   15d92:	0002      	movs	r2, r0
   15d94:	1dbb      	adds	r3, r7, #6
   15d96:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
   15d98:	1dbb      	adds	r3, r7, #6
   15d9a:	2200      	movs	r2, #0
   15d9c:	5e9a      	ldrsh	r2, [r3, r2]
   15d9e:	4b06      	ldr	r3, [pc, #24]	; (15db8 <lsm6dso_from_fs2_to_mg+0x2c>)
   15da0:	0010      	movs	r0, r2
   15da2:	4798      	blx	r3
   15da4:	1c02      	adds	r2, r0, #0
   15da6:	4b05      	ldr	r3, [pc, #20]	; (15dbc <lsm6dso_from_fs2_to_mg+0x30>)
   15da8:	4905      	ldr	r1, [pc, #20]	; (15dc0 <lsm6dso_from_fs2_to_mg+0x34>)
   15daa:	1c10      	adds	r0, r2, #0
   15dac:	4798      	blx	r3
   15dae:	1c03      	adds	r3, r0, #0
}
   15db0:	1c18      	adds	r0, r3, #0
   15db2:	46bd      	mov	sp, r7
   15db4:	b002      	add	sp, #8
   15db6:	bd80      	pop	{r7, pc}
   15db8:	00035ad5 	.word	0x00035ad5
   15dbc:	0003551d 	.word	0x0003551d
   15dc0:	3d79db23 	.word	0x3d79db23

00015dc4 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
   15dc4:	b590      	push	{r4, r7, lr}
   15dc6:	b085      	sub	sp, #20
   15dc8:	af00      	add	r7, sp, #0
   15dca:	6078      	str	r0, [r7, #4]
   15dcc:	000a      	movs	r2, r1
   15dce:	1cfb      	adds	r3, r7, #3
   15dd0:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15dd2:	2308      	movs	r3, #8
   15dd4:	18fa      	adds	r2, r7, r3
   15dd6:	6878      	ldr	r0, [r7, #4]
   15dd8:	2301      	movs	r3, #1
   15dda:	2110      	movs	r1, #16
   15ddc:	4c12      	ldr	r4, [pc, #72]	; (15e28 <lsm6dso_xl_full_scale_set+0x64>)
   15dde:	47a0      	blx	r4
   15de0:	0003      	movs	r3, r0
   15de2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15de4:	68fb      	ldr	r3, [r7, #12]
   15de6:	2b00      	cmp	r3, #0
   15de8:	d119      	bne.n	15e1e <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
   15dea:	1cfb      	adds	r3, r7, #3
   15dec:	781b      	ldrb	r3, [r3, #0]
   15dee:	2203      	movs	r2, #3
   15df0:	4013      	ands	r3, r2
   15df2:	b2da      	uxtb	r2, r3
   15df4:	2308      	movs	r3, #8
   15df6:	18fb      	adds	r3, r7, r3
   15df8:	2103      	movs	r1, #3
   15dfa:	400a      	ands	r2, r1
   15dfc:	0090      	lsls	r0, r2, #2
   15dfe:	781a      	ldrb	r2, [r3, #0]
   15e00:	210c      	movs	r1, #12
   15e02:	438a      	bics	r2, r1
   15e04:	1c11      	adds	r1, r2, #0
   15e06:	1c02      	adds	r2, r0, #0
   15e08:	430a      	orrs	r2, r1
   15e0a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15e0c:	2308      	movs	r3, #8
   15e0e:	18fa      	adds	r2, r7, r3
   15e10:	6878      	ldr	r0, [r7, #4]
   15e12:	2301      	movs	r3, #1
   15e14:	2110      	movs	r1, #16
   15e16:	4c05      	ldr	r4, [pc, #20]	; (15e2c <lsm6dso_xl_full_scale_set+0x68>)
   15e18:	47a0      	blx	r4
   15e1a:	0003      	movs	r3, r0
   15e1c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15e1e:	68fb      	ldr	r3, [r7, #12]
}
   15e20:	0018      	movs	r0, r3
   15e22:	46bd      	mov	sp, r7
   15e24:	b005      	add	sp, #20
   15e26:	bd90      	pop	{r4, r7, pc}
   15e28:	00015d01 	.word	0x00015d01
   15e2c:	00015d47 	.word	0x00015d47

00015e30 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
   15e30:	b590      	push	{r4, r7, lr}
   15e32:	b087      	sub	sp, #28
   15e34:	af00      	add	r7, sp, #0
   15e36:	6078      	str	r0, [r7, #4]
   15e38:	000a      	movs	r2, r1
   15e3a:	1cfb      	adds	r3, r7, #3
   15e3c:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
   15e3e:	2317      	movs	r3, #23
   15e40:	18fb      	adds	r3, r7, r3
   15e42:	1cfa      	adds	r2, r7, #3
   15e44:	7812      	ldrb	r2, [r2, #0]
   15e46:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   15e48:	230c      	movs	r3, #12
   15e4a:	18fa      	adds	r2, r7, r3
   15e4c:	687b      	ldr	r3, [r7, #4]
   15e4e:	0011      	movs	r1, r2
   15e50:	0018      	movs	r0, r3
   15e52:	4ba4      	ldr	r3, [pc, #656]	; (160e4 <lsm6dso_xl_data_rate_set+0x2b4>)
   15e54:	4798      	blx	r3
   15e56:	0003      	movs	r3, r0
   15e58:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   15e5a:	693b      	ldr	r3, [r7, #16]
   15e5c:	2b00      	cmp	r3, #0
   15e5e:	d000      	beq.n	15e62 <lsm6dso_xl_data_rate_set+0x32>
   15e60:	e113      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15e62:	230c      	movs	r3, #12
   15e64:	18fb      	adds	r3, r7, r3
   15e66:	781b      	ldrb	r3, [r3, #0]
   15e68:	07db      	lsls	r3, r3, #31
   15e6a:	0fdb      	lsrs	r3, r3, #31
   15e6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   15e6e:	230c      	movs	r3, #12
   15e70:	18fb      	adds	r3, r7, r3
   15e72:	781b      	ldrb	r3, [r3, #0]
   15e74:	079b      	lsls	r3, r3, #30
   15e76:	0fdb      	lsrs	r3, r3, #31
   15e78:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15e7a:	4313      	orrs	r3, r2
   15e7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   15e7e:	230c      	movs	r3, #12
   15e80:	18fb      	adds	r3, r7, r3
   15e82:	781b      	ldrb	r3, [r3, #0]
   15e84:	075b      	lsls	r3, r3, #29
   15e86:	0fdb      	lsrs	r3, r3, #31
   15e88:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   15e8a:	4313      	orrs	r3, r2
   15e8c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   15e8e:	230c      	movs	r3, #12
   15e90:	18fb      	adds	r3, r7, r3
   15e92:	781b      	ldrb	r3, [r3, #0]
   15e94:	071b      	lsls	r3, r3, #28
   15e96:	0fdb      	lsrs	r3, r3, #31
   15e98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   15e9a:	4313      	orrs	r3, r2
   15e9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   15e9e:	230c      	movs	r3, #12
   15ea0:	18fb      	adds	r3, r7, r3
   15ea2:	781b      	ldrb	r3, [r3, #0]
   15ea4:	06db      	lsls	r3, r3, #27
   15ea6:	0fdb      	lsrs	r3, r3, #31
   15ea8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   15eaa:	4313      	orrs	r3, r2
   15eac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15eae:	230c      	movs	r3, #12
   15eb0:	18fb      	adds	r3, r7, r3
   15eb2:	781b      	ldrb	r3, [r3, #0]
   15eb4:	069b      	lsls	r3, r3, #26
   15eb6:	0fdb      	lsrs	r3, r3, #31
   15eb8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   15eba:	4313      	orrs	r3, r2
   15ebc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15ebe:	230c      	movs	r3, #12
   15ec0:	18fb      	adds	r3, r7, r3
   15ec2:	781b      	ldrb	r3, [r3, #0]
   15ec4:	065b      	lsls	r3, r3, #25
   15ec6:	0fdb      	lsrs	r3, r3, #31
   15ec8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15eca:	4313      	orrs	r3, r2
   15ecc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15ece:	230c      	movs	r3, #12
   15ed0:	18fb      	adds	r3, r7, r3
   15ed2:	781b      	ldrb	r3, [r3, #0]
   15ed4:	061b      	lsls	r3, r3, #24
   15ed6:	0fdb      	lsrs	r3, r3, #31
   15ed8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15eda:	4313      	orrs	r3, r2
   15edc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   15ede:	230c      	movs	r3, #12
   15ee0:	18fb      	adds	r3, r7, r3
   15ee2:	785b      	ldrb	r3, [r3, #1]
   15ee4:	07db      	lsls	r3, r3, #31
   15ee6:	0fdb      	lsrs	r3, r3, #31
   15ee8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15eea:	4313      	orrs	r3, r2
   15eec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   15eee:	230c      	movs	r3, #12
   15ef0:	18fb      	adds	r3, r7, r3
   15ef2:	785b      	ldrb	r3, [r3, #1]
   15ef4:	079b      	lsls	r3, r3, #30
   15ef6:	0fdb      	lsrs	r3, r3, #31
   15ef8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   15efa:	4313      	orrs	r3, r2
   15efc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   15efe:	230c      	movs	r3, #12
   15f00:	18fb      	adds	r3, r7, r3
   15f02:	785b      	ldrb	r3, [r3, #1]
   15f04:	075b      	lsls	r3, r3, #29
   15f06:	0fdb      	lsrs	r3, r3, #31
   15f08:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   15f0a:	4313      	orrs	r3, r2
   15f0c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   15f0e:	230c      	movs	r3, #12
   15f10:	18fb      	adds	r3, r7, r3
   15f12:	785b      	ldrb	r3, [r3, #1]
   15f14:	071b      	lsls	r3, r3, #28
   15f16:	0fdb      	lsrs	r3, r3, #31
   15f18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   15f1a:	4313      	orrs	r3, r2
   15f1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   15f1e:	230c      	movs	r3, #12
   15f20:	18fb      	adds	r3, r7, r3
   15f22:	785b      	ldrb	r3, [r3, #1]
   15f24:	06db      	lsls	r3, r3, #27
   15f26:	0fdb      	lsrs	r3, r3, #31
   15f28:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   15f2a:	4313      	orrs	r3, r2
   15f2c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   15f2e:	230c      	movs	r3, #12
   15f30:	18fb      	adds	r3, r7, r3
   15f32:	785b      	ldrb	r3, [r3, #1]
   15f34:	069b      	lsls	r3, r3, #26
   15f36:	0fdb      	lsrs	r3, r3, #31
   15f38:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   15f3a:	4313      	orrs	r3, r2
   15f3c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15f3e:	230c      	movs	r3, #12
   15f40:	18fb      	adds	r3, r7, r3
   15f42:	785b      	ldrb	r3, [r3, #1]
   15f44:	065b      	lsls	r3, r3, #25
   15f46:	0fdb      	lsrs	r3, r3, #31
   15f48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   15f4a:	4313      	orrs	r3, r2
   15f4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   15f4e:	230c      	movs	r3, #12
   15f50:	18fb      	adds	r3, r7, r3
   15f52:	785b      	ldrb	r3, [r3, #1]
   15f54:	061b      	lsls	r3, r3, #24
   15f56:	0fdb      	lsrs	r3, r3, #31
   15f58:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15f5a:	4313      	orrs	r3, r2
   15f5c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15f5e:	2b01      	cmp	r3, #1
   15f60:	d000      	beq.n	15f64 <lsm6dso_xl_data_rate_set+0x134>
   15f62:	e092      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   15f64:	230b      	movs	r3, #11
   15f66:	18fa      	adds	r2, r7, r3
   15f68:	687b      	ldr	r3, [r7, #4]
   15f6a:	0011      	movs	r1, r2
   15f6c:	0018      	movs	r0, r3
   15f6e:	4b5e      	ldr	r3, [pc, #376]	; (160e8 <lsm6dso_xl_data_rate_set+0x2b8>)
   15f70:	4798      	blx	r3
   15f72:	0003      	movs	r3, r0
   15f74:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   15f76:	693b      	ldr	r3, [r7, #16]
   15f78:	2b00      	cmp	r3, #0
   15f7a:	d000      	beq.n	15f7e <lsm6dso_xl_data_rate_set+0x14e>
   15f7c:	e085      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   15f7e:	230b      	movs	r3, #11
   15f80:	18fb      	adds	r3, r7, r3
   15f82:	781b      	ldrb	r3, [r3, #0]
   15f84:	2b01      	cmp	r3, #1
   15f86:	d017      	beq.n	15fb8 <lsm6dso_xl_data_rate_set+0x188>
   15f88:	dc02      	bgt.n	15f90 <lsm6dso_xl_data_rate_set+0x160>
   15f8a:	2b00      	cmp	r3, #0
   15f8c:	d005      	beq.n	15f9a <lsm6dso_xl_data_rate_set+0x16a>
   15f8e:	e076      	b.n	1607e <lsm6dso_xl_data_rate_set+0x24e>
   15f90:	2b02      	cmp	r3, #2
   15f92:	d029      	beq.n	15fe8 <lsm6dso_xl_data_rate_set+0x1b8>
   15f94:	2b03      	cmp	r3, #3
   15f96:	d048      	beq.n	1602a <lsm6dso_xl_data_rate_set+0x1fa>
   15f98:	e071      	b.n	1607e <lsm6dso_xl_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
   15f9a:	1cfb      	adds	r3, r7, #3
   15f9c:	781b      	ldrb	r3, [r3, #0]
   15f9e:	2b00      	cmp	r3, #0
   15fa0:	d104      	bne.n	15fac <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
   15fa2:	2317      	movs	r3, #23
   15fa4:	18fb      	adds	r3, r7, r3
   15fa6:	2201      	movs	r2, #1
   15fa8:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   15faa:	e06e      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   15fac:	2317      	movs	r3, #23
   15fae:	18fb      	adds	r3, r7, r3
   15fb0:	1cfa      	adds	r2, r7, #3
   15fb2:	7812      	ldrb	r2, [r2, #0]
   15fb4:	701a      	strb	r2, [r3, #0]
            break;
   15fb6:	e068      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   15fb8:	1cfb      	adds	r3, r7, #3
   15fba:	781b      	ldrb	r3, [r3, #0]
   15fbc:	2b00      	cmp	r3, #0
   15fbe:	d104      	bne.n	15fca <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   15fc0:	2317      	movs	r3, #23
   15fc2:	18fb      	adds	r3, r7, r3
   15fc4:	2202      	movs	r2, #2
   15fc6:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   15fc8:	e05f      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   15fca:	1cfb      	adds	r3, r7, #3
   15fcc:	781b      	ldrb	r3, [r3, #0]
   15fce:	2b01      	cmp	r3, #1
   15fd0:	d104      	bne.n	15fdc <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   15fd2:	2317      	movs	r3, #23
   15fd4:	18fb      	adds	r3, r7, r3
   15fd6:	2202      	movs	r2, #2
   15fd8:	701a      	strb	r2, [r3, #0]
            break;
   15fda:	e056      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   15fdc:	2317      	movs	r3, #23
   15fde:	18fb      	adds	r3, r7, r3
   15fe0:	1cfa      	adds	r2, r7, #3
   15fe2:	7812      	ldrb	r2, [r2, #0]
   15fe4:	701a      	strb	r2, [r3, #0]
            break;
   15fe6:	e050      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   15fe8:	1cfb      	adds	r3, r7, #3
   15fea:	781b      	ldrb	r3, [r3, #0]
   15fec:	2b00      	cmp	r3, #0
   15fee:	d104      	bne.n	15ffa <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   15ff0:	2317      	movs	r3, #23
   15ff2:	18fb      	adds	r3, r7, r3
   15ff4:	2203      	movs	r2, #3
   15ff6:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   15ff8:	e047      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   15ffa:	1cfb      	adds	r3, r7, #3
   15ffc:	781b      	ldrb	r3, [r3, #0]
   15ffe:	2b01      	cmp	r3, #1
   16000:	d104      	bne.n	1600c <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   16002:	2317      	movs	r3, #23
   16004:	18fb      	adds	r3, r7, r3
   16006:	2203      	movs	r2, #3
   16008:	701a      	strb	r2, [r3, #0]
            break;
   1600a:	e03e      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   1600c:	1cfb      	adds	r3, r7, #3
   1600e:	781b      	ldrb	r3, [r3, #0]
   16010:	2b02      	cmp	r3, #2
   16012:	d104      	bne.n	1601e <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   16014:	2317      	movs	r3, #23
   16016:	18fb      	adds	r3, r7, r3
   16018:	2203      	movs	r2, #3
   1601a:	701a      	strb	r2, [r3, #0]
            break;
   1601c:	e035      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   1601e:	2317      	movs	r3, #23
   16020:	18fb      	adds	r3, r7, r3
   16022:	1cfa      	adds	r2, r7, #3
   16024:	7812      	ldrb	r2, [r2, #0]
   16026:	701a      	strb	r2, [r3, #0]
            break;
   16028:	e02f      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   1602a:	1cfb      	adds	r3, r7, #3
   1602c:	781b      	ldrb	r3, [r3, #0]
   1602e:	2b00      	cmp	r3, #0
   16030:	d104      	bne.n	1603c <lsm6dso_xl_data_rate_set+0x20c>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   16032:	2317      	movs	r3, #23
   16034:	18fb      	adds	r3, r7, r3
   16036:	2204      	movs	r2, #4
   16038:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   1603a:	e026      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   1603c:	1cfb      	adds	r3, r7, #3
   1603e:	781b      	ldrb	r3, [r3, #0]
   16040:	2b01      	cmp	r3, #1
   16042:	d104      	bne.n	1604e <lsm6dso_xl_data_rate_set+0x21e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   16044:	2317      	movs	r3, #23
   16046:	18fb      	adds	r3, r7, r3
   16048:	2204      	movs	r2, #4
   1604a:	701a      	strb	r2, [r3, #0]
            break;
   1604c:	e01d      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   1604e:	1cfb      	adds	r3, r7, #3
   16050:	781b      	ldrb	r3, [r3, #0]
   16052:	2b02      	cmp	r3, #2
   16054:	d104      	bne.n	16060 <lsm6dso_xl_data_rate_set+0x230>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   16056:	2317      	movs	r3, #23
   16058:	18fb      	adds	r3, r7, r3
   1605a:	2204      	movs	r2, #4
   1605c:	701a      	strb	r2, [r3, #0]
            break;
   1605e:	e014      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_52Hz)
   16060:	1cfb      	adds	r3, r7, #3
   16062:	781b      	ldrb	r3, [r3, #0]
   16064:	2b03      	cmp	r3, #3
   16066:	d104      	bne.n	16072 <lsm6dso_xl_data_rate_set+0x242>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   16068:	2317      	movs	r3, #23
   1606a:	18fb      	adds	r3, r7, r3
   1606c:	2204      	movs	r2, #4
   1606e:	701a      	strb	r2, [r3, #0]
            break;
   16070:	e00b      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   16072:	2317      	movs	r3, #23
   16074:	18fb      	adds	r3, r7, r3
   16076:	1cfa      	adds	r2, r7, #3
   16078:	7812      	ldrb	r2, [r2, #0]
   1607a:	701a      	strb	r2, [r3, #0]
            break;
   1607c:	e005      	b.n	1608a <lsm6dso_xl_data_rate_set+0x25a>

          default:
            odr_xl = val;
   1607e:	2317      	movs	r3, #23
   16080:	18fb      	adds	r3, r7, r3
   16082:	1cfa      	adds	r2, r7, #3
   16084:	7812      	ldrb	r2, [r2, #0]
   16086:	701a      	strb	r2, [r3, #0]
            break;
   16088:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   1608a:	693b      	ldr	r3, [r7, #16]
   1608c:	2b00      	cmp	r3, #0
   1608e:	d108      	bne.n	160a2 <lsm6dso_xl_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   16090:	2308      	movs	r3, #8
   16092:	18fa      	adds	r2, r7, r3
   16094:	6878      	ldr	r0, [r7, #4]
   16096:	2301      	movs	r3, #1
   16098:	2110      	movs	r1, #16
   1609a:	4c14      	ldr	r4, [pc, #80]	; (160ec <lsm6dso_xl_data_rate_set+0x2bc>)
   1609c:	47a0      	blx	r4
   1609e:	0003      	movs	r3, r0
   160a0:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   160a2:	693b      	ldr	r3, [r7, #16]
   160a4:	2b00      	cmp	r3, #0
   160a6:	d118      	bne.n	160da <lsm6dso_xl_data_rate_set+0x2aa>
  {
    reg.odr_xl = (uint8_t) odr_xl;
   160a8:	2317      	movs	r3, #23
   160aa:	18fb      	adds	r3, r7, r3
   160ac:	781b      	ldrb	r3, [r3, #0]
   160ae:	220f      	movs	r2, #15
   160b0:	4013      	ands	r3, r2
   160b2:	b2da      	uxtb	r2, r3
   160b4:	2308      	movs	r3, #8
   160b6:	18fb      	adds	r3, r7, r3
   160b8:	0110      	lsls	r0, r2, #4
   160ba:	781a      	ldrb	r2, [r3, #0]
   160bc:	210f      	movs	r1, #15
   160be:	400a      	ands	r2, r1
   160c0:	1c11      	adds	r1, r2, #0
   160c2:	1c02      	adds	r2, r0, #0
   160c4:	430a      	orrs	r2, r1
   160c6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   160c8:	2308      	movs	r3, #8
   160ca:	18fa      	adds	r2, r7, r3
   160cc:	6878      	ldr	r0, [r7, #4]
   160ce:	2301      	movs	r3, #1
   160d0:	2110      	movs	r1, #16
   160d2:	4c07      	ldr	r4, [pc, #28]	; (160f0 <lsm6dso_xl_data_rate_set+0x2c0>)
   160d4:	47a0      	blx	r4
   160d6:	0003      	movs	r3, r0
   160d8:	613b      	str	r3, [r7, #16]
  }

  return ret;
   160da:	693b      	ldr	r3, [r7, #16]
}
   160dc:	0018      	movs	r0, r3
   160de:	46bd      	mov	sp, r7
   160e0:	b007      	add	sp, #28
   160e2:	bd90      	pop	{r4, r7, pc}
   160e4:	0001690d 	.word	0x0001690d
   160e8:	00016961 	.word	0x00016961
   160ec:	00015d01 	.word	0x00015d01
   160f0:	00015d47 	.word	0x00015d47

000160f4 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
   160f4:	b590      	push	{r4, r7, lr}
   160f6:	b085      	sub	sp, #20
   160f8:	af00      	add	r7, sp, #0
   160fa:	6078      	str	r0, [r7, #4]
   160fc:	000a      	movs	r2, r1
   160fe:	1cfb      	adds	r3, r7, #3
   16100:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   16102:	2308      	movs	r3, #8
   16104:	18fa      	adds	r2, r7, r3
   16106:	6878      	ldr	r0, [r7, #4]
   16108:	2301      	movs	r3, #1
   1610a:	2111      	movs	r1, #17
   1610c:	4c12      	ldr	r4, [pc, #72]	; (16158 <lsm6dso_gy_full_scale_set+0x64>)
   1610e:	47a0      	blx	r4
   16110:	0003      	movs	r3, r0
   16112:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16114:	68fb      	ldr	r3, [r7, #12]
   16116:	2b00      	cmp	r3, #0
   16118:	d119      	bne.n	1614e <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
   1611a:	1cfb      	adds	r3, r7, #3
   1611c:	781b      	ldrb	r3, [r3, #0]
   1611e:	2207      	movs	r2, #7
   16120:	4013      	ands	r3, r2
   16122:	b2da      	uxtb	r2, r3
   16124:	2308      	movs	r3, #8
   16126:	18fb      	adds	r3, r7, r3
   16128:	2107      	movs	r1, #7
   1612a:	400a      	ands	r2, r1
   1612c:	1890      	adds	r0, r2, r2
   1612e:	781a      	ldrb	r2, [r3, #0]
   16130:	210e      	movs	r1, #14
   16132:	438a      	bics	r2, r1
   16134:	1c11      	adds	r1, r2, #0
   16136:	1c02      	adds	r2, r0, #0
   16138:	430a      	orrs	r2, r1
   1613a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   1613c:	2308      	movs	r3, #8
   1613e:	18fa      	adds	r2, r7, r3
   16140:	6878      	ldr	r0, [r7, #4]
   16142:	2301      	movs	r3, #1
   16144:	2111      	movs	r1, #17
   16146:	4c05      	ldr	r4, [pc, #20]	; (1615c <lsm6dso_gy_full_scale_set+0x68>)
   16148:	47a0      	blx	r4
   1614a:	0003      	movs	r3, r0
   1614c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1614e:	68fb      	ldr	r3, [r7, #12]
}
   16150:	0018      	movs	r0, r3
   16152:	46bd      	mov	sp, r7
   16154:	b005      	add	sp, #20
   16156:	bd90      	pop	{r4, r7, pc}
   16158:	00015d01 	.word	0x00015d01
   1615c:	00015d47 	.word	0x00015d47

00016160 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
   16160:	b590      	push	{r4, r7, lr}
   16162:	b087      	sub	sp, #28
   16164:	af00      	add	r7, sp, #0
   16166:	6078      	str	r0, [r7, #4]
   16168:	000a      	movs	r2, r1
   1616a:	1cfb      	adds	r3, r7, #3
   1616c:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
   1616e:	2317      	movs	r3, #23
   16170:	18fb      	adds	r3, r7, r3
   16172:	1cfa      	adds	r2, r7, #3
   16174:	7812      	ldrb	r2, [r2, #0]
   16176:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   16178:	230c      	movs	r3, #12
   1617a:	18fa      	adds	r2, r7, r3
   1617c:	687b      	ldr	r3, [r7, #4]
   1617e:	0011      	movs	r1, r2
   16180:	0018      	movs	r0, r3
   16182:	4ba4      	ldr	r3, [pc, #656]	; (16414 <lsm6dso_gy_data_rate_set+0x2b4>)
   16184:	4798      	blx	r3
   16186:	0003      	movs	r3, r0
   16188:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   1618a:	693b      	ldr	r3, [r7, #16]
   1618c:	2b00      	cmp	r3, #0
   1618e:	d000      	beq.n	16192 <lsm6dso_gy_data_rate_set+0x32>
   16190:	e113      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   16192:	230c      	movs	r3, #12
   16194:	18fb      	adds	r3, r7, r3
   16196:	781b      	ldrb	r3, [r3, #0]
   16198:	07db      	lsls	r3, r3, #31
   1619a:	0fdb      	lsrs	r3, r3, #31
   1619c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   1619e:	230c      	movs	r3, #12
   161a0:	18fb      	adds	r3, r7, r3
   161a2:	781b      	ldrb	r3, [r3, #0]
   161a4:	079b      	lsls	r3, r3, #30
   161a6:	0fdb      	lsrs	r3, r3, #31
   161a8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   161aa:	4313      	orrs	r3, r2
   161ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   161ae:	230c      	movs	r3, #12
   161b0:	18fb      	adds	r3, r7, r3
   161b2:	781b      	ldrb	r3, [r3, #0]
   161b4:	075b      	lsls	r3, r3, #29
   161b6:	0fdb      	lsrs	r3, r3, #31
   161b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   161ba:	4313      	orrs	r3, r2
   161bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   161be:	230c      	movs	r3, #12
   161c0:	18fb      	adds	r3, r7, r3
   161c2:	781b      	ldrb	r3, [r3, #0]
   161c4:	071b      	lsls	r3, r3, #28
   161c6:	0fdb      	lsrs	r3, r3, #31
   161c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   161ca:	4313      	orrs	r3, r2
   161cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   161ce:	230c      	movs	r3, #12
   161d0:	18fb      	adds	r3, r7, r3
   161d2:	781b      	ldrb	r3, [r3, #0]
   161d4:	06db      	lsls	r3, r3, #27
   161d6:	0fdb      	lsrs	r3, r3, #31
   161d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   161da:	4313      	orrs	r3, r2
   161dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   161de:	230c      	movs	r3, #12
   161e0:	18fb      	adds	r3, r7, r3
   161e2:	781b      	ldrb	r3, [r3, #0]
   161e4:	069b      	lsls	r3, r3, #26
   161e6:	0fdb      	lsrs	r3, r3, #31
   161e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   161ea:	4313      	orrs	r3, r2
   161ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   161ee:	230c      	movs	r3, #12
   161f0:	18fb      	adds	r3, r7, r3
   161f2:	781b      	ldrb	r3, [r3, #0]
   161f4:	065b      	lsls	r3, r3, #25
   161f6:	0fdb      	lsrs	r3, r3, #31
   161f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   161fa:	4313      	orrs	r3, r2
   161fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   161fe:	230c      	movs	r3, #12
   16200:	18fb      	adds	r3, r7, r3
   16202:	781b      	ldrb	r3, [r3, #0]
   16204:	061b      	lsls	r3, r3, #24
   16206:	0fdb      	lsrs	r3, r3, #31
   16208:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   1620a:	4313      	orrs	r3, r2
   1620c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   1620e:	230c      	movs	r3, #12
   16210:	18fb      	adds	r3, r7, r3
   16212:	785b      	ldrb	r3, [r3, #1]
   16214:	07db      	lsls	r3, r3, #31
   16216:	0fdb      	lsrs	r3, r3, #31
   16218:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   1621a:	4313      	orrs	r3, r2
   1621c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   1621e:	230c      	movs	r3, #12
   16220:	18fb      	adds	r3, r7, r3
   16222:	785b      	ldrb	r3, [r3, #1]
   16224:	079b      	lsls	r3, r3, #30
   16226:	0fdb      	lsrs	r3, r3, #31
   16228:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   1622a:	4313      	orrs	r3, r2
   1622c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   1622e:	230c      	movs	r3, #12
   16230:	18fb      	adds	r3, r7, r3
   16232:	785b      	ldrb	r3, [r3, #1]
   16234:	075b      	lsls	r3, r3, #29
   16236:	0fdb      	lsrs	r3, r3, #31
   16238:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   1623a:	4313      	orrs	r3, r2
   1623c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   1623e:	230c      	movs	r3, #12
   16240:	18fb      	adds	r3, r7, r3
   16242:	785b      	ldrb	r3, [r3, #1]
   16244:	071b      	lsls	r3, r3, #28
   16246:	0fdb      	lsrs	r3, r3, #31
   16248:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   1624a:	4313      	orrs	r3, r2
   1624c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   1624e:	230c      	movs	r3, #12
   16250:	18fb      	adds	r3, r7, r3
   16252:	785b      	ldrb	r3, [r3, #1]
   16254:	06db      	lsls	r3, r3, #27
   16256:	0fdb      	lsrs	r3, r3, #31
   16258:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   1625a:	4313      	orrs	r3, r2
   1625c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   1625e:	230c      	movs	r3, #12
   16260:	18fb      	adds	r3, r7, r3
   16262:	785b      	ldrb	r3, [r3, #1]
   16264:	069b      	lsls	r3, r3, #26
   16266:	0fdb      	lsrs	r3, r3, #31
   16268:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   1626a:	4313      	orrs	r3, r2
   1626c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   1626e:	230c      	movs	r3, #12
   16270:	18fb      	adds	r3, r7, r3
   16272:	785b      	ldrb	r3, [r3, #1]
   16274:	065b      	lsls	r3, r3, #25
   16276:	0fdb      	lsrs	r3, r3, #31
   16278:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   1627a:	4313      	orrs	r3, r2
   1627c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   1627e:	230c      	movs	r3, #12
   16280:	18fb      	adds	r3, r7, r3
   16282:	785b      	ldrb	r3, [r3, #1]
   16284:	061b      	lsls	r3, r3, #24
   16286:	0fdb      	lsrs	r3, r3, #31
   16288:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   1628a:	4313      	orrs	r3, r2
   1628c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1628e:	2b01      	cmp	r3, #1
   16290:	d000      	beq.n	16294 <lsm6dso_gy_data_rate_set+0x134>
   16292:	e092      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   16294:	230b      	movs	r3, #11
   16296:	18fa      	adds	r2, r7, r3
   16298:	687b      	ldr	r3, [r7, #4]
   1629a:	0011      	movs	r1, r2
   1629c:	0018      	movs	r0, r3
   1629e:	4b5e      	ldr	r3, [pc, #376]	; (16418 <lsm6dso_gy_data_rate_set+0x2b8>)
   162a0:	4798      	blx	r3
   162a2:	0003      	movs	r3, r0
   162a4:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   162a6:	693b      	ldr	r3, [r7, #16]
   162a8:	2b00      	cmp	r3, #0
   162aa:	d000      	beq.n	162ae <lsm6dso_gy_data_rate_set+0x14e>
   162ac:	e085      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   162ae:	230b      	movs	r3, #11
   162b0:	18fb      	adds	r3, r7, r3
   162b2:	781b      	ldrb	r3, [r3, #0]
   162b4:	2b01      	cmp	r3, #1
   162b6:	d017      	beq.n	162e8 <lsm6dso_gy_data_rate_set+0x188>
   162b8:	dc02      	bgt.n	162c0 <lsm6dso_gy_data_rate_set+0x160>
   162ba:	2b00      	cmp	r3, #0
   162bc:	d005      	beq.n	162ca <lsm6dso_gy_data_rate_set+0x16a>
   162be:	e076      	b.n	163ae <lsm6dso_gy_data_rate_set+0x24e>
   162c0:	2b02      	cmp	r3, #2
   162c2:	d029      	beq.n	16318 <lsm6dso_gy_data_rate_set+0x1b8>
   162c4:	2b03      	cmp	r3, #3
   162c6:	d048      	beq.n	1635a <lsm6dso_gy_data_rate_set+0x1fa>
   162c8:	e071      	b.n	163ae <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
   162ca:	1cfb      	adds	r3, r7, #3
   162cc:	781b      	ldrb	r3, [r3, #0]
   162ce:	2b00      	cmp	r3, #0
   162d0:	d104      	bne.n	162dc <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
   162d2:	2317      	movs	r3, #23
   162d4:	18fb      	adds	r3, r7, r3
   162d6:	2201      	movs	r2, #1
   162d8:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   162da:	e06e      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   162dc:	2317      	movs	r3, #23
   162de:	18fb      	adds	r3, r7, r3
   162e0:	1cfa      	adds	r2, r7, #3
   162e2:	7812      	ldrb	r2, [r2, #0]
   162e4:	701a      	strb	r2, [r3, #0]
            break;
   162e6:	e068      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   162e8:	1cfb      	adds	r3, r7, #3
   162ea:	781b      	ldrb	r3, [r3, #0]
   162ec:	2b00      	cmp	r3, #0
   162ee:	d104      	bne.n	162fa <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   162f0:	2317      	movs	r3, #23
   162f2:	18fb      	adds	r3, r7, r3
   162f4:	2202      	movs	r2, #2
   162f6:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   162f8:	e05f      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   162fa:	1cfb      	adds	r3, r7, #3
   162fc:	781b      	ldrb	r3, [r3, #0]
   162fe:	2b01      	cmp	r3, #1
   16300:	d104      	bne.n	1630c <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   16302:	2317      	movs	r3, #23
   16304:	18fb      	adds	r3, r7, r3
   16306:	2202      	movs	r2, #2
   16308:	701a      	strb	r2, [r3, #0]
            break;
   1630a:	e056      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   1630c:	2317      	movs	r3, #23
   1630e:	18fb      	adds	r3, r7, r3
   16310:	1cfa      	adds	r2, r7, #3
   16312:	7812      	ldrb	r2, [r2, #0]
   16314:	701a      	strb	r2, [r3, #0]
            break;
   16316:	e050      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   16318:	1cfb      	adds	r3, r7, #3
   1631a:	781b      	ldrb	r3, [r3, #0]
   1631c:	2b00      	cmp	r3, #0
   1631e:	d104      	bne.n	1632a <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   16320:	2317      	movs	r3, #23
   16322:	18fb      	adds	r3, r7, r3
   16324:	2203      	movs	r2, #3
   16326:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   16328:	e047      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   1632a:	1cfb      	adds	r3, r7, #3
   1632c:	781b      	ldrb	r3, [r3, #0]
   1632e:	2b01      	cmp	r3, #1
   16330:	d104      	bne.n	1633c <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   16332:	2317      	movs	r3, #23
   16334:	18fb      	adds	r3, r7, r3
   16336:	2203      	movs	r2, #3
   16338:	701a      	strb	r2, [r3, #0]
            break;
   1633a:	e03e      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   1633c:	1cfb      	adds	r3, r7, #3
   1633e:	781b      	ldrb	r3, [r3, #0]
   16340:	2b02      	cmp	r3, #2
   16342:	d104      	bne.n	1634e <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   16344:	2317      	movs	r3, #23
   16346:	18fb      	adds	r3, r7, r3
   16348:	2203      	movs	r2, #3
   1634a:	701a      	strb	r2, [r3, #0]
            break;
   1634c:	e035      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   1634e:	2317      	movs	r3, #23
   16350:	18fb      	adds	r3, r7, r3
   16352:	1cfa      	adds	r2, r7, #3
   16354:	7812      	ldrb	r2, [r2, #0]
   16356:	701a      	strb	r2, [r3, #0]
            break;
   16358:	e02f      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   1635a:	1cfb      	adds	r3, r7, #3
   1635c:	781b      	ldrb	r3, [r3, #0]
   1635e:	2b00      	cmp	r3, #0
   16360:	d104      	bne.n	1636c <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   16362:	2317      	movs	r3, #23
   16364:	18fb      	adds	r3, r7, r3
   16366:	2204      	movs	r2, #4
   16368:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   1636a:	e026      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   1636c:	1cfb      	adds	r3, r7, #3
   1636e:	781b      	ldrb	r3, [r3, #0]
   16370:	2b01      	cmp	r3, #1
   16372:	d104      	bne.n	1637e <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   16374:	2317      	movs	r3, #23
   16376:	18fb      	adds	r3, r7, r3
   16378:	2204      	movs	r2, #4
   1637a:	701a      	strb	r2, [r3, #0]
            break;
   1637c:	e01d      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   1637e:	1cfb      	adds	r3, r7, #3
   16380:	781b      	ldrb	r3, [r3, #0]
   16382:	2b02      	cmp	r3, #2
   16384:	d104      	bne.n	16390 <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   16386:	2317      	movs	r3, #23
   16388:	18fb      	adds	r3, r7, r3
   1638a:	2204      	movs	r2, #4
   1638c:	701a      	strb	r2, [r3, #0]
            break;
   1638e:	e014      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
   16390:	1cfb      	adds	r3, r7, #3
   16392:	781b      	ldrb	r3, [r3, #0]
   16394:	2b03      	cmp	r3, #3
   16396:	d104      	bne.n	163a2 <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   16398:	2317      	movs	r3, #23
   1639a:	18fb      	adds	r3, r7, r3
   1639c:	2204      	movs	r2, #4
   1639e:	701a      	strb	r2, [r3, #0]
            break;
   163a0:	e00b      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   163a2:	2317      	movs	r3, #23
   163a4:	18fb      	adds	r3, r7, r3
   163a6:	1cfa      	adds	r2, r7, #3
   163a8:	7812      	ldrb	r2, [r2, #0]
   163aa:	701a      	strb	r2, [r3, #0]
            break;
   163ac:	e005      	b.n	163ba <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
   163ae:	2317      	movs	r3, #23
   163b0:	18fb      	adds	r3, r7, r3
   163b2:	1cfa      	adds	r2, r7, #3
   163b4:	7812      	ldrb	r2, [r2, #0]
   163b6:	701a      	strb	r2, [r3, #0]
            break;
   163b8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   163ba:	693b      	ldr	r3, [r7, #16]
   163bc:	2b00      	cmp	r3, #0
   163be:	d108      	bne.n	163d2 <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   163c0:	2308      	movs	r3, #8
   163c2:	18fa      	adds	r2, r7, r3
   163c4:	6878      	ldr	r0, [r7, #4]
   163c6:	2301      	movs	r3, #1
   163c8:	2111      	movs	r1, #17
   163ca:	4c14      	ldr	r4, [pc, #80]	; (1641c <lsm6dso_gy_data_rate_set+0x2bc>)
   163cc:	47a0      	blx	r4
   163ce:	0003      	movs	r3, r0
   163d0:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   163d2:	693b      	ldr	r3, [r7, #16]
   163d4:	2b00      	cmp	r3, #0
   163d6:	d118      	bne.n	1640a <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
   163d8:	2317      	movs	r3, #23
   163da:	18fb      	adds	r3, r7, r3
   163dc:	781b      	ldrb	r3, [r3, #0]
   163de:	220f      	movs	r2, #15
   163e0:	4013      	ands	r3, r2
   163e2:	b2da      	uxtb	r2, r3
   163e4:	2308      	movs	r3, #8
   163e6:	18fb      	adds	r3, r7, r3
   163e8:	0110      	lsls	r0, r2, #4
   163ea:	781a      	ldrb	r2, [r3, #0]
   163ec:	210f      	movs	r1, #15
   163ee:	400a      	ands	r2, r1
   163f0:	1c11      	adds	r1, r2, #0
   163f2:	1c02      	adds	r2, r0, #0
   163f4:	430a      	orrs	r2, r1
   163f6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   163f8:	2308      	movs	r3, #8
   163fa:	18fa      	adds	r2, r7, r3
   163fc:	6878      	ldr	r0, [r7, #4]
   163fe:	2301      	movs	r3, #1
   16400:	2111      	movs	r1, #17
   16402:	4c07      	ldr	r4, [pc, #28]	; (16420 <lsm6dso_gy_data_rate_set+0x2c0>)
   16404:	47a0      	blx	r4
   16406:	0003      	movs	r3, r0
   16408:	613b      	str	r3, [r7, #16]
  }

  return ret;
   1640a:	693b      	ldr	r3, [r7, #16]
}
   1640c:	0018      	movs	r0, r3
   1640e:	46bd      	mov	sp, r7
   16410:	b007      	add	sp, #28
   16412:	bd90      	pop	{r4, r7, pc}
   16414:	0001690d 	.word	0x0001690d
   16418:	00016961 	.word	0x00016961
   1641c:	00015d01 	.word	0x00015d01
   16420:	00015d47 	.word	0x00015d47

00016424 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   16424:	b590      	push	{r4, r7, lr}
   16426:	b085      	sub	sp, #20
   16428:	af00      	add	r7, sp, #0
   1642a:	6078      	str	r0, [r7, #4]
   1642c:	000a      	movs	r2, r1
   1642e:	1cfb      	adds	r3, r7, #3
   16430:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   16432:	2308      	movs	r3, #8
   16434:	18fa      	adds	r2, r7, r3
   16436:	6878      	ldr	r0, [r7, #4]
   16438:	2301      	movs	r3, #1
   1643a:	2112      	movs	r1, #18
   1643c:	4c12      	ldr	r4, [pc, #72]	; (16488 <lsm6dso_block_data_update_set+0x64>)
   1643e:	47a0      	blx	r4
   16440:	0003      	movs	r3, r0
   16442:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16444:	68fb      	ldr	r3, [r7, #12]
   16446:	2b00      	cmp	r3, #0
   16448:	d119      	bne.n	1647e <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
   1644a:	1cfb      	adds	r3, r7, #3
   1644c:	781b      	ldrb	r3, [r3, #0]
   1644e:	2201      	movs	r2, #1
   16450:	4013      	ands	r3, r2
   16452:	b2da      	uxtb	r2, r3
   16454:	2308      	movs	r3, #8
   16456:	18fb      	adds	r3, r7, r3
   16458:	2101      	movs	r1, #1
   1645a:	400a      	ands	r2, r1
   1645c:	0190      	lsls	r0, r2, #6
   1645e:	781a      	ldrb	r2, [r3, #0]
   16460:	2140      	movs	r1, #64	; 0x40
   16462:	438a      	bics	r2, r1
   16464:	1c11      	adds	r1, r2, #0
   16466:	1c02      	adds	r2, r0, #0
   16468:	430a      	orrs	r2, r1
   1646a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   1646c:	2308      	movs	r3, #8
   1646e:	18fa      	adds	r2, r7, r3
   16470:	6878      	ldr	r0, [r7, #4]
   16472:	2301      	movs	r3, #1
   16474:	2112      	movs	r1, #18
   16476:	4c05      	ldr	r4, [pc, #20]	; (1648c <lsm6dso_block_data_update_set+0x68>)
   16478:	47a0      	blx	r4
   1647a:	0003      	movs	r3, r0
   1647c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1647e:	68fb      	ldr	r3, [r7, #12]
}
   16480:	0018      	movs	r0, r3
   16482:	46bd      	mov	sp, r7
   16484:	b005      	add	sp, #20
   16486:	bd90      	pop	{r4, r7, pc}
   16488:	00015d01 	.word	0x00015d01
   1648c:	00015d47 	.word	0x00015d47

00016490 <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
   16490:	b590      	push	{r4, r7, lr}
   16492:	b085      	sub	sp, #20
   16494:	af00      	add	r7, sp, #0
   16496:	6078      	str	r0, [r7, #4]
   16498:	000a      	movs	r2, r1
   1649a:	1cfb      	adds	r3, r7, #3
   1649c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   1649e:	2308      	movs	r3, #8
   164a0:	18fa      	adds	r2, r7, r3
   164a2:	6878      	ldr	r0, [r7, #4]
   164a4:	2301      	movs	r3, #1
   164a6:	2115      	movs	r1, #21
   164a8:	4c12      	ldr	r4, [pc, #72]	; (164f4 <lsm6dso_xl_offset_weight_set+0x64>)
   164aa:	47a0      	blx	r4
   164ac:	0003      	movs	r3, r0
   164ae:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   164b0:	68fb      	ldr	r3, [r7, #12]
   164b2:	2b00      	cmp	r3, #0
   164b4:	d119      	bne.n	164ea <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
   164b6:	1cfb      	adds	r3, r7, #3
   164b8:	781b      	ldrb	r3, [r3, #0]
   164ba:	2201      	movs	r2, #1
   164bc:	4013      	ands	r3, r2
   164be:	b2da      	uxtb	r2, r3
   164c0:	2308      	movs	r3, #8
   164c2:	18fb      	adds	r3, r7, r3
   164c4:	2101      	movs	r1, #1
   164c6:	400a      	ands	r2, r1
   164c8:	00d0      	lsls	r0, r2, #3
   164ca:	781a      	ldrb	r2, [r3, #0]
   164cc:	2108      	movs	r1, #8
   164ce:	438a      	bics	r2, r1
   164d0:	1c11      	adds	r1, r2, #0
   164d2:	1c02      	adds	r2, r0, #0
   164d4:	430a      	orrs	r2, r1
   164d6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   164d8:	2308      	movs	r3, #8
   164da:	18fa      	adds	r2, r7, r3
   164dc:	6878      	ldr	r0, [r7, #4]
   164de:	2301      	movs	r3, #1
   164e0:	2115      	movs	r1, #21
   164e2:	4c05      	ldr	r4, [pc, #20]	; (164f8 <lsm6dso_xl_offset_weight_set+0x68>)
   164e4:	47a0      	blx	r4
   164e6:	0003      	movs	r3, r0
   164e8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   164ea:	68fb      	ldr	r3, [r7, #12]
}
   164ec:	0018      	movs	r0, r3
   164ee:	46bd      	mov	sp, r7
   164f0:	b005      	add	sp, #20
   164f2:	bd90      	pop	{r4, r7, pc}
   164f4:	00015d01 	.word	0x00015d01
   164f8:	00015d47 	.word	0x00015d47

000164fc <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
   164fc:	b590      	push	{r4, r7, lr}
   164fe:	b085      	sub	sp, #20
   16500:	af00      	add	r7, sp, #0
   16502:	6078      	str	r0, [r7, #4]
   16504:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
   16506:	2308      	movs	r3, #8
   16508:	18fa      	adds	r2, r7, r3
   1650a:	6878      	ldr	r0, [r7, #4]
   1650c:	2301      	movs	r3, #1
   1650e:	211e      	movs	r1, #30
   16510:	4c08      	ldr	r4, [pc, #32]	; (16534 <lsm6dso_xl_flag_data_ready_get+0x38>)
   16512:	47a0      	blx	r4
   16514:	0003      	movs	r3, r0
   16516:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
   16518:	2308      	movs	r3, #8
   1651a:	18fb      	adds	r3, r7, r3
   1651c:	781b      	ldrb	r3, [r3, #0]
   1651e:	07db      	lsls	r3, r3, #31
   16520:	0fdb      	lsrs	r3, r3, #31
   16522:	b2db      	uxtb	r3, r3
   16524:	001a      	movs	r2, r3
   16526:	683b      	ldr	r3, [r7, #0]
   16528:	701a      	strb	r2, [r3, #0]

  return ret;
   1652a:	68fb      	ldr	r3, [r7, #12]
}
   1652c:	0018      	movs	r0, r3
   1652e:	46bd      	mov	sp, r7
   16530:	b005      	add	sp, #20
   16532:	bd90      	pop	{r4, r7, pc}
   16534:	00015d01 	.word	0x00015d01

00016538 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
   16538:	b590      	push	{r4, r7, lr}
   1653a:	b087      	sub	sp, #28
   1653c:	af00      	add	r7, sp, #0
   1653e:	6078      	str	r0, [r7, #4]
   16540:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
   16542:	230c      	movs	r3, #12
   16544:	18fa      	adds	r2, r7, r3
   16546:	6878      	ldr	r0, [r7, #4]
   16548:	2306      	movs	r3, #6
   1654a:	2128      	movs	r1, #40	; 0x28
   1654c:	4c26      	ldr	r4, [pc, #152]	; (165e8 <lsm6dso_acceleration_raw_get+0xb0>)
   1654e:	47a0      	blx	r4
   16550:	0003      	movs	r3, r0
   16552:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
   16554:	230c      	movs	r3, #12
   16556:	18fb      	adds	r3, r7, r3
   16558:	785b      	ldrb	r3, [r3, #1]
   1655a:	b21a      	sxth	r2, r3
   1655c:	683b      	ldr	r3, [r7, #0]
   1655e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   16560:	683b      	ldr	r3, [r7, #0]
   16562:	2200      	movs	r2, #0
   16564:	5e9b      	ldrsh	r3, [r3, r2]
   16566:	b29b      	uxth	r3, r3
   16568:	021b      	lsls	r3, r3, #8
   1656a:	b29a      	uxth	r2, r3
   1656c:	230c      	movs	r3, #12
   1656e:	18fb      	adds	r3, r7, r3
   16570:	781b      	ldrb	r3, [r3, #0]
   16572:	b29b      	uxth	r3, r3
   16574:	18d3      	adds	r3, r2, r3
   16576:	b29b      	uxth	r3, r3
   16578:	b21a      	sxth	r2, r3
   1657a:	683b      	ldr	r3, [r7, #0]
   1657c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
   1657e:	683b      	ldr	r3, [r7, #0]
   16580:	3302      	adds	r3, #2
   16582:	220c      	movs	r2, #12
   16584:	18ba      	adds	r2, r7, r2
   16586:	78d2      	ldrb	r2, [r2, #3]
   16588:	b212      	sxth	r2, r2
   1658a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   1658c:	683b      	ldr	r3, [r7, #0]
   1658e:	3302      	adds	r3, #2
   16590:	683a      	ldr	r2, [r7, #0]
   16592:	3202      	adds	r2, #2
   16594:	2100      	movs	r1, #0
   16596:	5e52      	ldrsh	r2, [r2, r1]
   16598:	b292      	uxth	r2, r2
   1659a:	0212      	lsls	r2, r2, #8
   1659c:	b291      	uxth	r1, r2
   1659e:	220c      	movs	r2, #12
   165a0:	18ba      	adds	r2, r7, r2
   165a2:	7892      	ldrb	r2, [r2, #2]
   165a4:	b292      	uxth	r2, r2
   165a6:	188a      	adds	r2, r1, r2
   165a8:	b292      	uxth	r2, r2
   165aa:	b212      	sxth	r2, r2
   165ac:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
   165ae:	683b      	ldr	r3, [r7, #0]
   165b0:	3304      	adds	r3, #4
   165b2:	220c      	movs	r2, #12
   165b4:	18ba      	adds	r2, r7, r2
   165b6:	7952      	ldrb	r2, [r2, #5]
   165b8:	b212      	sxth	r2, r2
   165ba:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   165bc:	683b      	ldr	r3, [r7, #0]
   165be:	3304      	adds	r3, #4
   165c0:	683a      	ldr	r2, [r7, #0]
   165c2:	3204      	adds	r2, #4
   165c4:	2100      	movs	r1, #0
   165c6:	5e52      	ldrsh	r2, [r2, r1]
   165c8:	b292      	uxth	r2, r2
   165ca:	0212      	lsls	r2, r2, #8
   165cc:	b291      	uxth	r1, r2
   165ce:	220c      	movs	r2, #12
   165d0:	18ba      	adds	r2, r7, r2
   165d2:	7912      	ldrb	r2, [r2, #4]
   165d4:	b292      	uxth	r2, r2
   165d6:	188a      	adds	r2, r1, r2
   165d8:	b292      	uxth	r2, r2
   165da:	b212      	sxth	r2, r2
   165dc:	801a      	strh	r2, [r3, #0]

  return ret;
   165de:	697b      	ldr	r3, [r7, #20]
}
   165e0:	0018      	movs	r0, r3
   165e2:	46bd      	mov	sp, r7
   165e4:	b007      	add	sp, #28
   165e6:	bd90      	pop	{r4, r7, pc}
   165e8:	00015d01 	.word	0x00015d01

000165ec <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
   165ec:	b590      	push	{r4, r7, lr}
   165ee:	b085      	sub	sp, #20
   165f0:	af00      	add	r7, sp, #0
   165f2:	6078      	str	r0, [r7, #4]
   165f4:	000a      	movs	r2, r1
   165f6:	1cfb      	adds	r3, r7, #3
   165f8:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   165fa:	2308      	movs	r3, #8
   165fc:	18fa      	adds	r2, r7, r3
   165fe:	6878      	ldr	r0, [r7, #4]
   16600:	2301      	movs	r3, #1
   16602:	2101      	movs	r1, #1
   16604:	4c11      	ldr	r4, [pc, #68]	; (1664c <lsm6dso_mem_bank_set+0x60>)
   16606:	47a0      	blx	r4
   16608:	0003      	movs	r3, r0
   1660a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   1660c:	68fb      	ldr	r3, [r7, #12]
   1660e:	2b00      	cmp	r3, #0
   16610:	d117      	bne.n	16642 <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
   16612:	1cfb      	adds	r3, r7, #3
   16614:	781b      	ldrb	r3, [r3, #0]
   16616:	2203      	movs	r2, #3
   16618:	4013      	ands	r3, r2
   1661a:	b2da      	uxtb	r2, r3
   1661c:	2308      	movs	r3, #8
   1661e:	18fb      	adds	r3, r7, r3
   16620:	0190      	lsls	r0, r2, #6
   16622:	781a      	ldrb	r2, [r3, #0]
   16624:	213f      	movs	r1, #63	; 0x3f
   16626:	400a      	ands	r2, r1
   16628:	1c11      	adds	r1, r2, #0
   1662a:	1c02      	adds	r2, r0, #0
   1662c:	430a      	orrs	r2, r1
   1662e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   16630:	2308      	movs	r3, #8
   16632:	18fa      	adds	r2, r7, r3
   16634:	6878      	ldr	r0, [r7, #4]
   16636:	2301      	movs	r3, #1
   16638:	2101      	movs	r1, #1
   1663a:	4c05      	ldr	r4, [pc, #20]	; (16650 <lsm6dso_mem_bank_set+0x64>)
   1663c:	47a0      	blx	r4
   1663e:	0003      	movs	r3, r0
   16640:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   16642:	68fb      	ldr	r3, [r7, #12]
}
   16644:	0018      	movs	r0, r3
   16646:	46bd      	mov	sp, r7
   16648:	b005      	add	sp, #20
   1664a:	bd90      	pop	{r4, r7, pc}
   1664c:	00015d01 	.word	0x00015d01
   16650:	00015d47 	.word	0x00015d47

00016654 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   16654:	b590      	push	{r4, r7, lr}
   16656:	b085      	sub	sp, #20
   16658:	af00      	add	r7, sp, #0
   1665a:	6078      	str	r0, [r7, #4]
   1665c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
   1665e:	683a      	ldr	r2, [r7, #0]
   16660:	6878      	ldr	r0, [r7, #4]
   16662:	2301      	movs	r3, #1
   16664:	210f      	movs	r1, #15
   16666:	4c04      	ldr	r4, [pc, #16]	; (16678 <lsm6dso_device_id_get+0x24>)
   16668:	47a0      	blx	r4
   1666a:	0003      	movs	r3, r0
   1666c:	60fb      	str	r3, [r7, #12]

  return ret;
   1666e:	68fb      	ldr	r3, [r7, #12]
}
   16670:	0018      	movs	r0, r3
   16672:	46bd      	mov	sp, r7
   16674:	b005      	add	sp, #20
   16676:	bd90      	pop	{r4, r7, pc}
   16678:	00015d01 	.word	0x00015d01

0001667c <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
   1667c:	b590      	push	{r4, r7, lr}
   1667e:	b085      	sub	sp, #20
   16680:	af00      	add	r7, sp, #0
   16682:	6078      	str	r0, [r7, #4]
   16684:	000a      	movs	r2, r1
   16686:	1cfb      	adds	r3, r7, #3
   16688:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   1668a:	2308      	movs	r3, #8
   1668c:	18fa      	adds	r2, r7, r3
   1668e:	6878      	ldr	r0, [r7, #4]
   16690:	2301      	movs	r3, #1
   16692:	2112      	movs	r1, #18
   16694:	4c12      	ldr	r4, [pc, #72]	; (166e0 <lsm6dso_reset_set+0x64>)
   16696:	47a0      	blx	r4
   16698:	0003      	movs	r3, r0
   1669a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   1669c:	68fb      	ldr	r3, [r7, #12]
   1669e:	2b00      	cmp	r3, #0
   166a0:	d119      	bne.n	166d6 <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
   166a2:	1cfb      	adds	r3, r7, #3
   166a4:	781b      	ldrb	r3, [r3, #0]
   166a6:	2201      	movs	r2, #1
   166a8:	4013      	ands	r3, r2
   166aa:	b2da      	uxtb	r2, r3
   166ac:	2308      	movs	r3, #8
   166ae:	18fb      	adds	r3, r7, r3
   166b0:	2101      	movs	r1, #1
   166b2:	400a      	ands	r2, r1
   166b4:	0010      	movs	r0, r2
   166b6:	781a      	ldrb	r2, [r3, #0]
   166b8:	2101      	movs	r1, #1
   166ba:	438a      	bics	r2, r1
   166bc:	1c11      	adds	r1, r2, #0
   166be:	1c02      	adds	r2, r0, #0
   166c0:	430a      	orrs	r2, r1
   166c2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   166c4:	2308      	movs	r3, #8
   166c6:	18fa      	adds	r2, r7, r3
   166c8:	6878      	ldr	r0, [r7, #4]
   166ca:	2301      	movs	r3, #1
   166cc:	2112      	movs	r1, #18
   166ce:	4c05      	ldr	r4, [pc, #20]	; (166e4 <lsm6dso_reset_set+0x68>)
   166d0:	47a0      	blx	r4
   166d2:	0003      	movs	r3, r0
   166d4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   166d6:	68fb      	ldr	r3, [r7, #12]
}
   166d8:	0018      	movs	r0, r3
   166da:	46bd      	mov	sp, r7
   166dc:	b005      	add	sp, #20
   166de:	bd90      	pop	{r4, r7, pc}
   166e0:	00015d01 	.word	0x00015d01
   166e4:	00015d47 	.word	0x00015d47

000166e8 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
   166e8:	b590      	push	{r4, r7, lr}
   166ea:	b085      	sub	sp, #20
   166ec:	af00      	add	r7, sp, #0
   166ee:	6078      	str	r0, [r7, #4]
   166f0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   166f2:	2308      	movs	r3, #8
   166f4:	18fa      	adds	r2, r7, r3
   166f6:	6878      	ldr	r0, [r7, #4]
   166f8:	2301      	movs	r3, #1
   166fa:	2112      	movs	r1, #18
   166fc:	4c08      	ldr	r4, [pc, #32]	; (16720 <lsm6dso_reset_get+0x38>)
   166fe:	47a0      	blx	r4
   16700:	0003      	movs	r3, r0
   16702:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
   16704:	2308      	movs	r3, #8
   16706:	18fb      	adds	r3, r7, r3
   16708:	781b      	ldrb	r3, [r3, #0]
   1670a:	07db      	lsls	r3, r3, #31
   1670c:	0fdb      	lsrs	r3, r3, #31
   1670e:	b2db      	uxtb	r3, r3
   16710:	001a      	movs	r2, r3
   16712:	683b      	ldr	r3, [r7, #0]
   16714:	701a      	strb	r2, [r3, #0]

  return ret;
   16716:	68fb      	ldr	r3, [r7, #12]
}
   16718:	0018      	movs	r0, r3
   1671a:	46bd      	mov	sp, r7
   1671c:	b005      	add	sp, #20
   1671e:	bd90      	pop	{r4, r7, pc}
   16720:	00015d01 	.word	0x00015d01

00016724 <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
   16724:	b590      	push	{r4, r7, lr}
   16726:	b085      	sub	sp, #20
   16728:	af00      	add	r7, sp, #0
   1672a:	6078      	str	r0, [r7, #4]
   1672c:	000a      	movs	r2, r1
   1672e:	1cfb      	adds	r3, r7, #3
   16730:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   16732:	2308      	movs	r3, #8
   16734:	18fa      	adds	r2, r7, r3
   16736:	6878      	ldr	r0, [r7, #4]
   16738:	2301      	movs	r3, #1
   1673a:	2110      	movs	r1, #16
   1673c:	4c12      	ldr	r4, [pc, #72]	; (16788 <lsm6dso_xl_filter_lp2_set+0x64>)
   1673e:	47a0      	blx	r4
   16740:	0003      	movs	r3, r0
   16742:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16744:	68fb      	ldr	r3, [r7, #12]
   16746:	2b00      	cmp	r3, #0
   16748:	d119      	bne.n	1677e <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
   1674a:	1cfb      	adds	r3, r7, #3
   1674c:	781b      	ldrb	r3, [r3, #0]
   1674e:	2201      	movs	r2, #1
   16750:	4013      	ands	r3, r2
   16752:	b2da      	uxtb	r2, r3
   16754:	2308      	movs	r3, #8
   16756:	18fb      	adds	r3, r7, r3
   16758:	2101      	movs	r1, #1
   1675a:	400a      	ands	r2, r1
   1675c:	1890      	adds	r0, r2, r2
   1675e:	781a      	ldrb	r2, [r3, #0]
   16760:	2102      	movs	r1, #2
   16762:	438a      	bics	r2, r1
   16764:	1c11      	adds	r1, r2, #0
   16766:	1c02      	adds	r2, r0, #0
   16768:	430a      	orrs	r2, r1
   1676a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   1676c:	2308      	movs	r3, #8
   1676e:	18fa      	adds	r2, r7, r3
   16770:	6878      	ldr	r0, [r7, #4]
   16772:	2301      	movs	r3, #1
   16774:	2110      	movs	r1, #16
   16776:	4c05      	ldr	r4, [pc, #20]	; (1678c <lsm6dso_xl_filter_lp2_set+0x68>)
   16778:	47a0      	blx	r4
   1677a:	0003      	movs	r3, r0
   1677c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1677e:	68fb      	ldr	r3, [r7, #12]
}
   16780:	0018      	movs	r0, r3
   16782:	46bd      	mov	sp, r7
   16784:	b005      	add	sp, #20
   16786:	bd90      	pop	{r4, r7, pc}
   16788:	00015d01 	.word	0x00015d01
   1678c:	00015d47 	.word	0x00015d47

00016790 <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
   16790:	b590      	push	{r4, r7, lr}
   16792:	b085      	sub	sp, #20
   16794:	af00      	add	r7, sp, #0
   16796:	6078      	str	r0, [r7, #4]
   16798:	000a      	movs	r2, r1
   1679a:	1cfb      	adds	r3, r7, #3
   1679c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   1679e:	2308      	movs	r3, #8
   167a0:	18fa      	adds	r2, r7, r3
   167a2:	6878      	ldr	r0, [r7, #4]
   167a4:	2301      	movs	r3, #1
   167a6:	2117      	movs	r1, #23
   167a8:	4c25      	ldr	r4, [pc, #148]	; (16840 <lsm6dso_xl_hp_path_on_out_set+0xb0>)
   167aa:	47a0      	blx	r4
   167ac:	0003      	movs	r3, r0
   167ae:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   167b0:	68fb      	ldr	r3, [r7, #12]
   167b2:	2b00      	cmp	r3, #0
   167b4:	d13f      	bne.n	16836 <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
   167b6:	1cfb      	adds	r3, r7, #3
   167b8:	781b      	ldrb	r3, [r3, #0]
   167ba:	091b      	lsrs	r3, r3, #4
   167bc:	b2db      	uxtb	r3, r3
   167be:	1c1a      	adds	r2, r3, #0
   167c0:	2301      	movs	r3, #1
   167c2:	4013      	ands	r3, r2
   167c4:	b2da      	uxtb	r2, r3
   167c6:	2308      	movs	r3, #8
   167c8:	18fb      	adds	r3, r7, r3
   167ca:	2101      	movs	r1, #1
   167cc:	400a      	ands	r2, r1
   167ce:	0090      	lsls	r0, r2, #2
   167d0:	781a      	ldrb	r2, [r3, #0]
   167d2:	2104      	movs	r1, #4
   167d4:	438a      	bics	r2, r1
   167d6:	1c11      	adds	r1, r2, #0
   167d8:	1c02      	adds	r2, r0, #0
   167da:	430a      	orrs	r2, r1
   167dc:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
   167de:	1cfb      	adds	r3, r7, #3
   167e0:	781b      	ldrb	r3, [r3, #0]
   167e2:	095b      	lsrs	r3, r3, #5
   167e4:	b2db      	uxtb	r3, r3
   167e6:	1c1a      	adds	r2, r3, #0
   167e8:	2301      	movs	r3, #1
   167ea:	4013      	ands	r3, r2
   167ec:	b2da      	uxtb	r2, r3
   167ee:	2308      	movs	r3, #8
   167f0:	18fb      	adds	r3, r7, r3
   167f2:	2101      	movs	r1, #1
   167f4:	400a      	ands	r2, r1
   167f6:	0110      	lsls	r0, r2, #4
   167f8:	781a      	ldrb	r2, [r3, #0]
   167fa:	2110      	movs	r1, #16
   167fc:	438a      	bics	r2, r1
   167fe:	1c11      	adds	r1, r2, #0
   16800:	1c02      	adds	r2, r0, #0
   16802:	430a      	orrs	r2, r1
   16804:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
   16806:	1cfb      	adds	r3, r7, #3
   16808:	781b      	ldrb	r3, [r3, #0]
   1680a:	2207      	movs	r2, #7
   1680c:	4013      	ands	r3, r2
   1680e:	b2da      	uxtb	r2, r3
   16810:	2308      	movs	r3, #8
   16812:	18fb      	adds	r3, r7, r3
   16814:	0150      	lsls	r0, r2, #5
   16816:	781a      	ldrb	r2, [r3, #0]
   16818:	211f      	movs	r1, #31
   1681a:	400a      	ands	r2, r1
   1681c:	1c11      	adds	r1, r2, #0
   1681e:	1c02      	adds	r2, r0, #0
   16820:	430a      	orrs	r2, r1
   16822:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   16824:	2308      	movs	r3, #8
   16826:	18fa      	adds	r2, r7, r3
   16828:	6878      	ldr	r0, [r7, #4]
   1682a:	2301      	movs	r3, #1
   1682c:	2117      	movs	r1, #23
   1682e:	4c05      	ldr	r4, [pc, #20]	; (16844 <lsm6dso_xl_hp_path_on_out_set+0xb4>)
   16830:	47a0      	blx	r4
   16832:	0003      	movs	r3, r0
   16834:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   16836:	68fb      	ldr	r3, [r7, #12]
}
   16838:	0018      	movs	r0, r3
   1683a:	46bd      	mov	sp, r7
   1683c:	b005      	add	sp, #20
   1683e:	bd90      	pop	{r4, r7, pc}
   16840:	00015d01 	.word	0x00015d01
   16844:	00015d47 	.word	0x00015d47

00016848 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
   16848:	b590      	push	{r4, r7, lr}
   1684a:	b087      	sub	sp, #28
   1684c:	af00      	add	r7, sp, #0
   1684e:	6078      	str	r0, [r7, #4]
   16850:	000a      	movs	r2, r1
   16852:	1cfb      	adds	r3, r7, #3
   16854:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   16856:	230c      	movs	r3, #12
   16858:	18fa      	adds	r2, r7, r3
   1685a:	6878      	ldr	r0, [r7, #4]
   1685c:	2301      	movs	r3, #1
   1685e:	2118      	movs	r1, #24
   16860:	4c28      	ldr	r4, [pc, #160]	; (16904 <lsm6dso_i3c_disable_set+0xbc>)
   16862:	47a0      	blx	r4
   16864:	0003      	movs	r3, r0
   16866:	617b      	str	r3, [r7, #20]

  if (ret == 0)
   16868:	697b      	ldr	r3, [r7, #20]
   1686a:	2b00      	cmp	r3, #0
   1686c:	d11c      	bne.n	168a8 <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
   1686e:	1cfb      	adds	r3, r7, #3
   16870:	781b      	ldrb	r3, [r3, #0]
   16872:	09db      	lsrs	r3, r3, #7
   16874:	b2db      	uxtb	r3, r3
   16876:	1c1a      	adds	r2, r3, #0
   16878:	2301      	movs	r3, #1
   1687a:	4013      	ands	r3, r2
   1687c:	b2da      	uxtb	r2, r3
   1687e:	230c      	movs	r3, #12
   16880:	18fb      	adds	r3, r7, r3
   16882:	2101      	movs	r1, #1
   16884:	400a      	ands	r2, r1
   16886:	1890      	adds	r0, r2, r2
   16888:	781a      	ldrb	r2, [r3, #0]
   1688a:	2102      	movs	r1, #2
   1688c:	438a      	bics	r2, r1
   1688e:	1c11      	adds	r1, r2, #0
   16890:	1c02      	adds	r2, r0, #0
   16892:	430a      	orrs	r2, r1
   16894:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   16896:	230c      	movs	r3, #12
   16898:	18fa      	adds	r2, r7, r3
   1689a:	6878      	ldr	r0, [r7, #4]
   1689c:	2301      	movs	r3, #1
   1689e:	2118      	movs	r1, #24
   168a0:	4c19      	ldr	r4, [pc, #100]	; (16908 <lsm6dso_i3c_disable_set+0xc0>)
   168a2:	47a0      	blx	r4
   168a4:	0003      	movs	r3, r0
   168a6:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
   168a8:	697b      	ldr	r3, [r7, #20]
   168aa:	2b00      	cmp	r3, #0
   168ac:	d108      	bne.n	168c0 <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   168ae:	2310      	movs	r3, #16
   168b0:	18fa      	adds	r2, r7, r3
   168b2:	6878      	ldr	r0, [r7, #4]
   168b4:	2301      	movs	r3, #1
   168b6:	2162      	movs	r1, #98	; 0x62
   168b8:	4c12      	ldr	r4, [pc, #72]	; (16904 <lsm6dso_i3c_disable_set+0xbc>)
   168ba:	47a0      	blx	r4
   168bc:	0003      	movs	r3, r0
   168be:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
   168c0:	697b      	ldr	r3, [r7, #20]
   168c2:	2b00      	cmp	r3, #0
   168c4:	d119      	bne.n	168fa <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
   168c6:	1cfb      	adds	r3, r7, #3
   168c8:	781b      	ldrb	r3, [r3, #0]
   168ca:	2203      	movs	r2, #3
   168cc:	4013      	ands	r3, r2
   168ce:	b2da      	uxtb	r2, r3
   168d0:	2310      	movs	r3, #16
   168d2:	18fb      	adds	r3, r7, r3
   168d4:	2103      	movs	r1, #3
   168d6:	400a      	ands	r2, r1
   168d8:	00d0      	lsls	r0, r2, #3
   168da:	781a      	ldrb	r2, [r3, #0]
   168dc:	2118      	movs	r1, #24
   168de:	438a      	bics	r2, r1
   168e0:	1c11      	adds	r1, r2, #0
   168e2:	1c02      	adds	r2, r0, #0
   168e4:	430a      	orrs	r2, r1
   168e6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   168e8:	2310      	movs	r3, #16
   168ea:	18fa      	adds	r2, r7, r3
   168ec:	6878      	ldr	r0, [r7, #4]
   168ee:	2301      	movs	r3, #1
   168f0:	2162      	movs	r1, #98	; 0x62
   168f2:	4c05      	ldr	r4, [pc, #20]	; (16908 <lsm6dso_i3c_disable_set+0xc0>)
   168f4:	47a0      	blx	r4
   168f6:	0003      	movs	r3, r0
   168f8:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
   168fa:	697b      	ldr	r3, [r7, #20]
}
   168fc:	0018      	movs	r0, r3
   168fe:	46bd      	mov	sp, r7
   16900:	b007      	add	sp, #28
   16902:	bd90      	pop	{r4, r7, pc}
   16904:	00015d01 	.word	0x00015d01
   16908:	00015d47 	.word	0x00015d47

0001690c <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
   1690c:	b590      	push	{r4, r7, lr}
   1690e:	b085      	sub	sp, #20
   16910:	af00      	add	r7, sp, #0
   16912:	6078      	str	r0, [r7, #4]
   16914:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   16916:	687b      	ldr	r3, [r7, #4]
   16918:	2102      	movs	r1, #2
   1691a:	0018      	movs	r0, r3
   1691c:	4b0e      	ldr	r3, [pc, #56]	; (16958 <lsm6dso_fsm_enable_get+0x4c>)
   1691e:	4798      	blx	r3
   16920:	0003      	movs	r3, r0
   16922:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16924:	68fb      	ldr	r3, [r7, #12]
   16926:	2b00      	cmp	r3, #0
   16928:	d107      	bne.n	1693a <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
   1692a:	683a      	ldr	r2, [r7, #0]
   1692c:	6878      	ldr	r0, [r7, #4]
   1692e:	2302      	movs	r3, #2
   16930:	2146      	movs	r1, #70	; 0x46
   16932:	4c0a      	ldr	r4, [pc, #40]	; (1695c <lsm6dso_fsm_enable_get+0x50>)
   16934:	47a0      	blx	r4
   16936:	0003      	movs	r3, r0
   16938:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
   1693a:	68fb      	ldr	r3, [r7, #12]
   1693c:	2b00      	cmp	r3, #0
   1693e:	d106      	bne.n	1694e <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   16940:	687b      	ldr	r3, [r7, #4]
   16942:	2100      	movs	r1, #0
   16944:	0018      	movs	r0, r3
   16946:	4b04      	ldr	r3, [pc, #16]	; (16958 <lsm6dso_fsm_enable_get+0x4c>)
   16948:	4798      	blx	r3
   1694a:	0003      	movs	r3, r0
   1694c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1694e:	68fb      	ldr	r3, [r7, #12]
}
   16950:	0018      	movs	r0, r3
   16952:	46bd      	mov	sp, r7
   16954:	b005      	add	sp, #20
   16956:	bd90      	pop	{r4, r7, pc}
   16958:	000165ed 	.word	0x000165ed
   1695c:	00015d01 	.word	0x00015d01

00016960 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
   16960:	b590      	push	{r4, r7, lr}
   16962:	b085      	sub	sp, #20
   16964:	af00      	add	r7, sp, #0
   16966:	6078      	str	r0, [r7, #4]
   16968:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   1696a:	687b      	ldr	r3, [r7, #4]
   1696c:	2102      	movs	r1, #2
   1696e:	0018      	movs	r0, r3
   16970:	4b21      	ldr	r3, [pc, #132]	; (169f8 <lsm6dso_fsm_data_rate_get+0x98>)
   16972:	4798      	blx	r3
   16974:	0003      	movs	r3, r0
   16976:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16978:	68fb      	ldr	r3, [r7, #12]
   1697a:	2b00      	cmp	r3, #0
   1697c:	d108      	bne.n	16990 <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
   1697e:	2308      	movs	r3, #8
   16980:	18fa      	adds	r2, r7, r3
   16982:	6878      	ldr	r0, [r7, #4]
   16984:	2301      	movs	r3, #1
   16986:	215f      	movs	r1, #95	; 0x5f
   16988:	4c1c      	ldr	r4, [pc, #112]	; (169fc <lsm6dso_fsm_data_rate_get+0x9c>)
   1698a:	47a0      	blx	r4
   1698c:	0003      	movs	r3, r0
   1698e:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
   16990:	68fb      	ldr	r3, [r7, #12]
   16992:	2b00      	cmp	r3, #0
   16994:	d12b      	bne.n	169ee <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
   16996:	2308      	movs	r3, #8
   16998:	18fb      	adds	r3, r7, r3
   1699a:	781b      	ldrb	r3, [r3, #0]
   1699c:	06db      	lsls	r3, r3, #27
   1699e:	0f9b      	lsrs	r3, r3, #30
   169a0:	b2db      	uxtb	r3, r3
   169a2:	2b01      	cmp	r3, #1
   169a4:	d00c      	beq.n	169c0 <lsm6dso_fsm_data_rate_get+0x60>
   169a6:	dc02      	bgt.n	169ae <lsm6dso_fsm_data_rate_get+0x4e>
   169a8:	2b00      	cmp	r3, #0
   169aa:	d005      	beq.n	169b8 <lsm6dso_fsm_data_rate_get+0x58>
   169ac:	e014      	b.n	169d8 <lsm6dso_fsm_data_rate_get+0x78>
   169ae:	2b02      	cmp	r3, #2
   169b0:	d00a      	beq.n	169c8 <lsm6dso_fsm_data_rate_get+0x68>
   169b2:	2b03      	cmp	r3, #3
   169b4:	d00c      	beq.n	169d0 <lsm6dso_fsm_data_rate_get+0x70>
   169b6:	e00f      	b.n	169d8 <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   169b8:	683b      	ldr	r3, [r7, #0]
   169ba:	2200      	movs	r2, #0
   169bc:	701a      	strb	r2, [r3, #0]
        break;
   169be:	e00f      	b.n	169e0 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
   169c0:	683b      	ldr	r3, [r7, #0]
   169c2:	2201      	movs	r2, #1
   169c4:	701a      	strb	r2, [r3, #0]
        break;
   169c6:	e00b      	b.n	169e0 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
   169c8:	683b      	ldr	r3, [r7, #0]
   169ca:	2202      	movs	r2, #2
   169cc:	701a      	strb	r2, [r3, #0]
        break;
   169ce:	e007      	b.n	169e0 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
   169d0:	683b      	ldr	r3, [r7, #0]
   169d2:	2203      	movs	r2, #3
   169d4:	701a      	strb	r2, [r3, #0]
        break;
   169d6:	e003      	b.n	169e0 <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   169d8:	683b      	ldr	r3, [r7, #0]
   169da:	2200      	movs	r2, #0
   169dc:	701a      	strb	r2, [r3, #0]
        break;
   169de:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   169e0:	687b      	ldr	r3, [r7, #4]
   169e2:	2100      	movs	r1, #0
   169e4:	0018      	movs	r0, r3
   169e6:	4b04      	ldr	r3, [pc, #16]	; (169f8 <lsm6dso_fsm_data_rate_get+0x98>)
   169e8:	4798      	blx	r3
   169ea:	0003      	movs	r3, r0
   169ec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   169ee:	68fb      	ldr	r3, [r7, #12]
}
   169f0:	0018      	movs	r0, r3
   169f2:	46bd      	mov	sp, r7
   169f4:	b005      	add	sp, #20
   169f6:	bd90      	pop	{r4, r7, pc}
   169f8:	000165ed 	.word	0x000165ed
   169fc:	00015d01 	.word	0x00015d01

00016a00 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   16a00:	b580      	push	{r7, lr}
   16a02:	b084      	sub	sp, #16
   16a04:	af00      	add	r7, sp, #0
   16a06:	60f8      	str	r0, [r7, #12]
   16a08:	0008      	movs	r0, r1
   16a0a:	607a      	str	r2, [r7, #4]
   16a0c:	0019      	movs	r1, r3
   16a0e:	230b      	movs	r3, #11
   16a10:	18fb      	adds	r3, r7, r3
   16a12:	1c02      	adds	r2, r0, #0
   16a14:	701a      	strb	r2, [r3, #0]
   16a16:	2308      	movs	r3, #8
   16a18:	18fb      	adds	r3, r7, r3
   16a1a:	1c0a      	adds	r2, r1, #0
   16a1c:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
return 0;
   16a1e:	2300      	movs	r3, #0

}
   16a20:	0018      	movs	r0, r3
   16a22:	46bd      	mov	sp, r7
   16a24:	b004      	add	sp, #16
   16a26:	bd80      	pop	{r7, pc}

00016a28 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   16a28:	b580      	push	{r7, lr}
   16a2a:	b084      	sub	sp, #16
   16a2c:	af00      	add	r7, sp, #0
   16a2e:	60f8      	str	r0, [r7, #12]
   16a30:	0008      	movs	r0, r1
   16a32:	607a      	str	r2, [r7, #4]
   16a34:	0019      	movs	r1, r3
   16a36:	230b      	movs	r3, #11
   16a38:	18fb      	adds	r3, r7, r3
   16a3a:	1c02      	adds	r2, r0, #0
   16a3c:	701a      	strb	r2, [r3, #0]
   16a3e:	2308      	movs	r3, #8
   16a40:	18fb      	adds	r3, r7, r3
   16a42:	1c0a      	adds	r2, r1, #0
   16a44:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
return 0;
   16a46:	2300      	movs	r3, #0


}
   16a48:	0018      	movs	r0, r3
   16a4a:	46bd      	mov	sp, r7
   16a4c:	b004      	add	sp, #16
   16a4e:	bd80      	pop	{r7, pc}

00016a50 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
   16a50:	b580      	push	{r7, lr}
   16a52:	af00      	add	r7, sp, #0
return &dev_ctx;
   16a54:	4b01      	ldr	r3, [pc, #4]	; (16a5c <GetImuStruct+0xc>)
}
   16a56:	0018      	movs	r0, r3
   16a58:	46bd      	mov	sp, r7
   16a5a:	bd80      	pop	{r7, pc}
   16a5c:	20000014 	.word	0x20000014

00016a60 <InitImu>:



int32_t InitImu(void)
{
   16a60:	b580      	push	{r7, lr}
   16a62:	b082      	sub	sp, #8
   16a64:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
   16a66:	2300      	movs	r3, #0
   16a68:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
   16a6a:	4b23      	ldr	r3, [pc, #140]	; (16af8 <InitImu+0x98>)
   16a6c:	2101      	movs	r1, #1
   16a6e:	0018      	movs	r0, r3
   16a70:	4b22      	ldr	r3, [pc, #136]	; (16afc <InitImu+0x9c>)
   16a72:	4798      	blx	r3
   16a74:	0003      	movs	r3, r0
   16a76:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
   16a78:	1cfa      	adds	r2, r7, #3
   16a7a:	4b1f      	ldr	r3, [pc, #124]	; (16af8 <InitImu+0x98>)
   16a7c:	0011      	movs	r1, r2
   16a7e:	0018      	movs	r0, r3
   16a80:	4b1f      	ldr	r3, [pc, #124]	; (16b00 <InitImu+0xa0>)
   16a82:	4798      	blx	r3
   16a84:	0002      	movs	r2, r0
   16a86:	687b      	ldr	r3, [r7, #4]
   16a88:	4313      	orrs	r3, r2
   16a8a:	607b      	str	r3, [r7, #4]
  } while (rst);
   16a8c:	1cfb      	adds	r3, r7, #3
   16a8e:	781b      	ldrb	r3, [r3, #0]
   16a90:	2b00      	cmp	r3, #0
   16a92:	d1f1      	bne.n	16a78 <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
   16a94:	4b18      	ldr	r3, [pc, #96]	; (16af8 <InitImu+0x98>)
   16a96:	2180      	movs	r1, #128	; 0x80
   16a98:	0018      	movs	r0, r3
   16a9a:	4b1a      	ldr	r3, [pc, #104]	; (16b04 <InitImu+0xa4>)
   16a9c:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
   16a9e:	4b16      	ldr	r3, [pc, #88]	; (16af8 <InitImu+0x98>)
   16aa0:	2101      	movs	r1, #1
   16aa2:	0018      	movs	r0, r3
   16aa4:	4b18      	ldr	r3, [pc, #96]	; (16b08 <InitImu+0xa8>)
   16aa6:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
   16aa8:	4b13      	ldr	r3, [pc, #76]	; (16af8 <InitImu+0x98>)
   16aaa:	2100      	movs	r1, #0
   16aac:	0018      	movs	r0, r3
   16aae:	4b17      	ldr	r3, [pc, #92]	; (16b0c <InitImu+0xac>)
   16ab0:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
   16ab2:	4b11      	ldr	r3, [pc, #68]	; (16af8 <InitImu+0x98>)
   16ab4:	2101      	movs	r1, #1
   16ab6:	0018      	movs	r0, r3
   16ab8:	4b15      	ldr	r3, [pc, #84]	; (16b10 <InitImu+0xb0>)
   16aba:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
   16abc:	4b0e      	ldr	r3, [pc, #56]	; (16af8 <InitImu+0x98>)
   16abe:	2101      	movs	r1, #1
   16ac0:	0018      	movs	r0, r3
   16ac2:	4b14      	ldr	r3, [pc, #80]	; (16b14 <InitImu+0xb4>)
   16ac4:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
   16ac6:	4b0c      	ldr	r3, [pc, #48]	; (16af8 <InitImu+0x98>)
   16ac8:	2100      	movs	r1, #0
   16aca:	0018      	movs	r0, r3
   16acc:	4b12      	ldr	r3, [pc, #72]	; (16b18 <InitImu+0xb8>)
   16ace:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
   16ad0:	4b09      	ldr	r3, [pc, #36]	; (16af8 <InitImu+0x98>)
   16ad2:	2106      	movs	r1, #6
   16ad4:	0018      	movs	r0, r3
   16ad6:	4b11      	ldr	r3, [pc, #68]	; (16b1c <InitImu+0xbc>)
   16ad8:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
   16ada:	4b07      	ldr	r3, [pc, #28]	; (16af8 <InitImu+0x98>)
   16adc:	2104      	movs	r1, #4
   16ade:	0018      	movs	r0, r3
   16ae0:	4b0f      	ldr	r3, [pc, #60]	; (16b20 <InitImu+0xc0>)
   16ae2:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
   16ae4:	4b04      	ldr	r3, [pc, #16]	; (16af8 <InitImu+0x98>)
   16ae6:	2101      	movs	r1, #1
   16ae8:	0018      	movs	r0, r3
   16aea:	4b0e      	ldr	r3, [pc, #56]	; (16b24 <InitImu+0xc4>)
   16aec:	4798      	blx	r3

  return error;
   16aee:	687b      	ldr	r3, [r7, #4]
}
   16af0:	0018      	movs	r0, r3
   16af2:	46bd      	mov	sp, r7
   16af4:	b002      	add	sp, #8
   16af6:	bd80      	pop	{r7, pc}
   16af8:	20000014 	.word	0x20000014
   16afc:	0001667d 	.word	0x0001667d
   16b00:	000166e9 	.word	0x000166e9
   16b04:	00016849 	.word	0x00016849
   16b08:	00016425 	.word	0x00016425
   16b0c:	00016491 	.word	0x00016491
   16b10:	00015e31 	.word	0x00015e31
   16b14:	00016161 	.word	0x00016161
   16b18:	00015dc5 	.word	0x00015dc5
   16b1c:	000160f5 	.word	0x000160f5
   16b20:	00016791 	.word	0x00016791
   16b24:	00016725 	.word	0x00016725

00016b28 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16b28:	b580      	push	{r7, lr}
   16b2a:	b084      	sub	sp, #16
   16b2c:	af00      	add	r7, sp, #0
   16b2e:	0002      	movs	r2, r0
   16b30:	1dfb      	adds	r3, r7, #7
   16b32:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   16b34:	230f      	movs	r3, #15
   16b36:	18fb      	adds	r3, r7, r3
   16b38:	1dfa      	adds	r2, r7, #7
   16b3a:	7812      	ldrb	r2, [r2, #0]
   16b3c:	09d2      	lsrs	r2, r2, #7
   16b3e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   16b40:	230e      	movs	r3, #14
   16b42:	18fb      	adds	r3, r7, r3
   16b44:	1dfa      	adds	r2, r7, #7
   16b46:	7812      	ldrb	r2, [r2, #0]
   16b48:	0952      	lsrs	r2, r2, #5
   16b4a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   16b4c:	4b0d      	ldr	r3, [pc, #52]	; (16b84 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   16b4e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   16b50:	230f      	movs	r3, #15
   16b52:	18fb      	adds	r3, r7, r3
   16b54:	781b      	ldrb	r3, [r3, #0]
   16b56:	2b00      	cmp	r3, #0
   16b58:	d10f      	bne.n	16b7a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   16b5a:	230f      	movs	r3, #15
   16b5c:	18fb      	adds	r3, r7, r3
   16b5e:	781b      	ldrb	r3, [r3, #0]
   16b60:	009b      	lsls	r3, r3, #2
   16b62:	2210      	movs	r2, #16
   16b64:	4694      	mov	ip, r2
   16b66:	44bc      	add	ip, r7
   16b68:	4463      	add	r3, ip
   16b6a:	3b08      	subs	r3, #8
   16b6c:	681a      	ldr	r2, [r3, #0]
   16b6e:	230e      	movs	r3, #14
   16b70:	18fb      	adds	r3, r7, r3
   16b72:	781b      	ldrb	r3, [r3, #0]
   16b74:	01db      	lsls	r3, r3, #7
   16b76:	18d3      	adds	r3, r2, r3
   16b78:	e000      	b.n	16b7c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   16b7a:	2300      	movs	r3, #0
	}
}
   16b7c:	0018      	movs	r0, r3
   16b7e:	46bd      	mov	sp, r7
   16b80:	b004      	add	sp, #16
   16b82:	bd80      	pop	{r7, pc}
   16b84:	41004400 	.word	0x41004400

00016b88 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16b88:	b580      	push	{r7, lr}
   16b8a:	b082      	sub	sp, #8
   16b8c:	af00      	add	r7, sp, #0
   16b8e:	0002      	movs	r2, r0
   16b90:	1dfb      	adds	r3, r7, #7
   16b92:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   16b94:	1dfb      	adds	r3, r7, #7
   16b96:	781b      	ldrb	r3, [r3, #0]
   16b98:	0018      	movs	r0, r3
   16b9a:	4b03      	ldr	r3, [pc, #12]	; (16ba8 <port_get_group_from_gpio_pin+0x20>)
   16b9c:	4798      	blx	r3
   16b9e:	0003      	movs	r3, r0
}
   16ba0:	0018      	movs	r0, r3
   16ba2:	46bd      	mov	sp, r7
   16ba4:	b002      	add	sp, #8
   16ba6:	bd80      	pop	{r7, pc}
   16ba8:	00016b29 	.word	0x00016b29

00016bac <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   16bac:	b580      	push	{r7, lr}
   16bae:	b082      	sub	sp, #8
   16bb0:	af00      	add	r7, sp, #0
   16bb2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   16bb4:	687b      	ldr	r3, [r7, #4]
   16bb6:	2200      	movs	r2, #0
   16bb8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   16bba:	687b      	ldr	r3, [r7, #4]
   16bbc:	2201      	movs	r2, #1
   16bbe:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   16bc0:	687b      	ldr	r3, [r7, #4]
   16bc2:	2200      	movs	r2, #0
   16bc4:	709a      	strb	r2, [r3, #2]
}
   16bc6:	46c0      	nop			; (mov r8, r8)
   16bc8:	46bd      	mov	sp, r7
   16bca:	b002      	add	sp, #8
   16bcc:	bd80      	pop	{r7, pc}
	...

00016bd0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   16bd0:	b580      	push	{r7, lr}
   16bd2:	b084      	sub	sp, #16
   16bd4:	af00      	add	r7, sp, #0
   16bd6:	0002      	movs	r2, r0
   16bd8:	1dfb      	adds	r3, r7, #7
   16bda:	701a      	strb	r2, [r3, #0]
   16bdc:	1dbb      	adds	r3, r7, #6
   16bde:	1c0a      	adds	r2, r1, #0
   16be0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   16be2:	1dfb      	adds	r3, r7, #7
   16be4:	781b      	ldrb	r3, [r3, #0]
   16be6:	0018      	movs	r0, r3
   16be8:	4b0d      	ldr	r3, [pc, #52]	; (16c20 <port_pin_set_output_level+0x50>)
   16bea:	4798      	blx	r3
   16bec:	0003      	movs	r3, r0
   16bee:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   16bf0:	1dfb      	adds	r3, r7, #7
   16bf2:	781b      	ldrb	r3, [r3, #0]
   16bf4:	221f      	movs	r2, #31
   16bf6:	4013      	ands	r3, r2
   16bf8:	2201      	movs	r2, #1
   16bfa:	409a      	lsls	r2, r3
   16bfc:	0013      	movs	r3, r2
   16bfe:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   16c00:	1dbb      	adds	r3, r7, #6
   16c02:	781b      	ldrb	r3, [r3, #0]
   16c04:	2b00      	cmp	r3, #0
   16c06:	d003      	beq.n	16c10 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   16c08:	68fb      	ldr	r3, [r7, #12]
   16c0a:	68ba      	ldr	r2, [r7, #8]
   16c0c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   16c0e:	e002      	b.n	16c16 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   16c10:	68fb      	ldr	r3, [r7, #12]
   16c12:	68ba      	ldr	r2, [r7, #8]
   16c14:	615a      	str	r2, [r3, #20]
}
   16c16:	46c0      	nop			; (mov r8, r8)
   16c18:	46bd      	mov	sp, r7
   16c1a:	b004      	add	sp, #16
   16c1c:	bd80      	pop	{r7, pc}
   16c1e:	46c0      	nop			; (mov r8, r8)
   16c20:	00016b89 	.word	0x00016b89

00016c24 <configure_port_servo_pins>:
#define SERVO_PIN PIN_PA03
bool LOCKER_STATUS_LOCKED = true;
bool LOCKER_STATUS_UNLOCKED = false;
bool locker_status = true;
void configure_port_servo_pins(void)
{
   16c24:	b580      	push	{r7, lr}
   16c26:	b082      	sub	sp, #8
   16c28:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   16c2a:	1d3b      	adds	r3, r7, #4
   16c2c:	0018      	movs	r0, r3
   16c2e:	4b07      	ldr	r3, [pc, #28]	; (16c4c <configure_port_servo_pins+0x28>)
   16c30:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   16c32:	1d3b      	adds	r3, r7, #4
   16c34:	2201      	movs	r2, #1
   16c36:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SERVO_PIN, &config_port_pin);
   16c38:	1d3b      	adds	r3, r7, #4
   16c3a:	0019      	movs	r1, r3
   16c3c:	2003      	movs	r0, #3
   16c3e:	4b04      	ldr	r3, [pc, #16]	; (16c50 <configure_port_servo_pins+0x2c>)
   16c40:	4798      	blx	r3
	
}
   16c42:	46c0      	nop			; (mov r8, r8)
   16c44:	46bd      	mov	sp, r7
   16c46:	b002      	add	sp, #8
   16c48:	bd80      	pop	{r7, pc}
   16c4a:	46c0      	nop			; (mov r8, r8)
   16c4c:	00016bad 	.word	0x00016bad
   16c50:	00028db5 	.word	0x00028db5

00016c54 <lock>:

void lock()
{
   16c54:	b580      	push	{r7, lr}
   16c56:	b082      	sub	sp, #8
   16c58:	af00      	add	r7, sp, #0
	int count = 0;
   16c5a:	2300      	movs	r3, #0
   16c5c:	607b      	str	r3, [r7, #4]
	port_pin_set_output_level(SERVO_PIN,0);
   16c5e:	2100      	movs	r1, #0
   16c60:	2003      	movs	r0, #3
   16c62:	4b16      	ldr	r3, [pc, #88]	; (16cbc <lock+0x68>)
   16c64:	4798      	blx	r3
    for(int i = 0;i<1000;i++){
   16c66:	2300      	movs	r3, #0
   16c68:	603b      	str	r3, [r7, #0]
   16c6a:	e016      	b.n	16c9a <lock+0x46>
		if(count == 4)
   16c6c:	687b      	ldr	r3, [r7, #4]
   16c6e:	2b04      	cmp	r3, #4
   16c70:	d106      	bne.n	16c80 <lock+0x2c>
		{
			port_pin_set_output_level(SERVO_PIN,1);
   16c72:	2101      	movs	r1, #1
   16c74:	2003      	movs	r0, #3
   16c76:	4b11      	ldr	r3, [pc, #68]	; (16cbc <lock+0x68>)
   16c78:	4798      	blx	r3
			count = 0;
   16c7a:	2300      	movs	r3, #0
   16c7c:	607b      	str	r3, [r7, #4]
   16c7e:	e003      	b.n	16c88 <lock+0x34>
			
		}
		else{
			port_pin_set_output_level(SERVO_PIN,0);
   16c80:	2100      	movs	r1, #0
   16c82:	2003      	movs	r0, #3
   16c84:	4b0d      	ldr	r3, [pc, #52]	; (16cbc <lock+0x68>)
   16c86:	4798      	blx	r3
			
		}
		//MG90S
		vTaskDelay(1);
   16c88:	2001      	movs	r0, #1
   16c8a:	4b0d      	ldr	r3, [pc, #52]	; (16cc0 <lock+0x6c>)
   16c8c:	4798      	blx	r3
		//A0090
		//vTaskDelay(2.4);
		//delay_ms(1);
		count++;
   16c8e:	687b      	ldr	r3, [r7, #4]
   16c90:	3301      	adds	r3, #1
   16c92:	607b      	str	r3, [r7, #4]
    for(int i = 0;i<1000;i++){
   16c94:	683b      	ldr	r3, [r7, #0]
   16c96:	3301      	adds	r3, #1
   16c98:	603b      	str	r3, [r7, #0]
   16c9a:	683b      	ldr	r3, [r7, #0]
   16c9c:	4a09      	ldr	r2, [pc, #36]	; (16cc4 <lock+0x70>)
   16c9e:	4293      	cmp	r3, r2
   16ca0:	dde4      	ble.n	16c6c <lock+0x18>
	}
	port_pin_set_output_level(SERVO_PIN,0);
   16ca2:	2100      	movs	r1, #0
   16ca4:	2003      	movs	r0, #3
   16ca6:	4b05      	ldr	r3, [pc, #20]	; (16cbc <lock+0x68>)
   16ca8:	4798      	blx	r3
	locker_status = LOCKER_STATUS_LOCKED;
   16caa:	4b07      	ldr	r3, [pc, #28]	; (16cc8 <lock+0x74>)
   16cac:	781a      	ldrb	r2, [r3, #0]
   16cae:	4b07      	ldr	r3, [pc, #28]	; (16ccc <lock+0x78>)
   16cb0:	701a      	strb	r2, [r3, #0]
}
   16cb2:	46c0      	nop			; (mov r8, r8)
   16cb4:	46bd      	mov	sp, r7
   16cb6:	b002      	add	sp, #8
   16cb8:	bd80      	pop	{r7, pc}
   16cba:	46c0      	nop			; (mov r8, r8)
   16cbc:	00016bd1 	.word	0x00016bd1
   16cc0:	0001e591 	.word	0x0001e591
   16cc4:	000003e7 	.word	0x000003e7
   16cc8:	20000020 	.word	0x20000020
   16ccc:	20000021 	.word	0x20000021

00016cd0 <unlock>:

void unlock(){
   16cd0:	b580      	push	{r7, lr}
   16cd2:	b082      	sub	sp, #8
   16cd4:	af00      	add	r7, sp, #0
	int count = 0;
   16cd6:	2300      	movs	r3, #0
   16cd8:	607b      	str	r3, [r7, #4]
	port_pin_set_output_level(SERVO_PIN,0);
   16cda:	2100      	movs	r1, #0
   16cdc:	2003      	movs	r0, #3
   16cde:	4b16      	ldr	r3, [pc, #88]	; (16d38 <unlock+0x68>)
   16ce0:	4798      	blx	r3
	 for(int i = 0;i<300;i++){
   16ce2:	2300      	movs	r3, #0
   16ce4:	603b      	str	r3, [r7, #0]
   16ce6:	e016      	b.n	16d16 <unlock+0x46>
		if(count == 4)
   16ce8:	687b      	ldr	r3, [r7, #4]
   16cea:	2b04      	cmp	r3, #4
   16cec:	d106      	bne.n	16cfc <unlock+0x2c>
		{
			port_pin_set_output_level(SERVO_PIN,1);
   16cee:	2101      	movs	r1, #1
   16cf0:	2003      	movs	r0, #3
   16cf2:	4b11      	ldr	r3, [pc, #68]	; (16d38 <unlock+0x68>)
   16cf4:	4798      	blx	r3
			count = 0;
   16cf6:	2300      	movs	r3, #0
   16cf8:	607b      	str	r3, [r7, #4]
   16cfa:	e003      	b.n	16d04 <unlock+0x34>
		}
		else{
			port_pin_set_output_level(SERVO_PIN,0);
   16cfc:	2100      	movs	r1, #0
   16cfe:	2003      	movs	r0, #3
   16d00:	4b0d      	ldr	r3, [pc, #52]	; (16d38 <unlock+0x68>)
   16d02:	4798      	blx	r3
		}
		//MG90S
		vTaskDelay(9);
   16d04:	2009      	movs	r0, #9
   16d06:	4b0d      	ldr	r3, [pc, #52]	; (16d3c <unlock+0x6c>)
   16d08:	4798      	blx	r3
		//A0090
		//vTaskDelay(3.8);
		//delay_ms(2);
		count++;
   16d0a:	687b      	ldr	r3, [r7, #4]
   16d0c:	3301      	adds	r3, #1
   16d0e:	607b      	str	r3, [r7, #4]
	 for(int i = 0;i<300;i++){
   16d10:	683b      	ldr	r3, [r7, #0]
   16d12:	3301      	adds	r3, #1
   16d14:	603b      	str	r3, [r7, #0]
   16d16:	683a      	ldr	r2, [r7, #0]
   16d18:	232c      	movs	r3, #44	; 0x2c
   16d1a:	33ff      	adds	r3, #255	; 0xff
   16d1c:	429a      	cmp	r2, r3
   16d1e:	dde3      	ble.n	16ce8 <unlock+0x18>
	}
	port_pin_set_output_level(SERVO_PIN,0);
   16d20:	2100      	movs	r1, #0
   16d22:	2003      	movs	r0, #3
   16d24:	4b04      	ldr	r3, [pc, #16]	; (16d38 <unlock+0x68>)
   16d26:	4798      	blx	r3
	locker_status = LOCKER_STATUS_UNLOCKED;
   16d28:	4b05      	ldr	r3, [pc, #20]	; (16d40 <unlock+0x70>)
   16d2a:	781a      	ldrb	r2, [r3, #0]
   16d2c:	4b05      	ldr	r3, [pc, #20]	; (16d44 <unlock+0x74>)
   16d2e:	701a      	strb	r2, [r3, #0]
}
   16d30:	46c0      	nop			; (mov r8, r8)
   16d32:	46bd      	mov	sp, r7
   16d34:	b002      	add	sp, #8
   16d36:	bd80      	pop	{r7, pc}
   16d38:	00016bd1 	.word	0x00016bd1
   16d3c:	0001e591 	.word	0x0001e591
   16d40:	200004c0 	.word	0x200004c0
   16d44:	20000021 	.word	0x20000021

00016d48 <getLock>:
bool getLock(){
   16d48:	b580      	push	{r7, lr}
   16d4a:	af00      	add	r7, sp, #0
	return locker_status;
   16d4c:	4b02      	ldr	r3, [pc, #8]	; (16d58 <getLock+0x10>)
   16d4e:	781b      	ldrb	r3, [r3, #0]
}
   16d50:	0018      	movs	r0, r3
   16d52:	46bd      	mov	sp, r7
   16d54:	bd80      	pop	{r7, pc}
   16d56:	46c0      	nop			; (mov r8, r8)
   16d58:	20000021 	.word	0x20000021

00016d5c <SeesawGetKeypadCount>:

 * @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
 * @note
*/
uint8_t SeesawGetKeypadCount(void)
{
   16d5c:	b580      	push	{r7, lr}
   16d5e:	b082      	sub	sp, #8
   16d60:	af00      	add	r7, sp, #0
    uint8_t count = 0;
   16d62:	1cfb      	adds	r3, r7, #3
   16d64:	2200      	movs	r2, #0
   16d66:	701a      	strb	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   16d68:	4b11      	ldr	r3, [pc, #68]	; (16db0 <SeesawGetKeypadCount+0x54>)
   16d6a:	222e      	movs	r2, #46	; 0x2e
   16d6c:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadGetCount[0];
   16d6e:	4b10      	ldr	r3, [pc, #64]	; (16db0 <SeesawGetKeypadCount+0x54>)
   16d70:	4a10      	ldr	r2, [pc, #64]	; (16db4 <SeesawGetKeypadCount+0x58>)
   16d72:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadGetCount);
   16d74:	4b0e      	ldr	r3, [pc, #56]	; (16db0 <SeesawGetKeypadCount+0x54>)
   16d76:	2202      	movs	r2, #2
   16d78:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &count;
   16d7a:	4b0d      	ldr	r3, [pc, #52]	; (16db0 <SeesawGetKeypadCount+0x54>)
   16d7c:	1cfa      	adds	r2, r7, #3
   16d7e:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   16d80:	4b0b      	ldr	r3, [pc, #44]	; (16db0 <SeesawGetKeypadCount+0x54>)
   16d82:	2201      	movs	r2, #1
   16d84:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   16d86:	4b0a      	ldr	r3, [pc, #40]	; (16db0 <SeesawGetKeypadCount+0x54>)
   16d88:	2264      	movs	r2, #100	; 0x64
   16d8a:	2100      	movs	r1, #0
   16d8c:	0018      	movs	r0, r3
   16d8e:	4b0a      	ldr	r3, [pc, #40]	; (16db8 <SeesawGetKeypadCount+0x5c>)
   16d90:	4798      	blx	r3
   16d92:	0003      	movs	r3, r0
   16d94:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   16d96:	687b      	ldr	r3, [r7, #4]
   16d98:	2b00      	cmp	r3, #0
   16d9a:	d003      	beq.n	16da4 <SeesawGetKeypadCount+0x48>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   16d9c:	4b07      	ldr	r3, [pc, #28]	; (16dbc <SeesawGetKeypadCount+0x60>)
   16d9e:	0018      	movs	r0, r3
   16da0:	4b07      	ldr	r3, [pc, #28]	; (16dc0 <SeesawGetKeypadCount+0x64>)
   16da2:	4798      	blx	r3
    }
    return count;
   16da4:	1cfb      	adds	r3, r7, #3
   16da6:	781b      	ldrb	r3, [r3, #0]
}
   16da8:	0018      	movs	r0, r3
   16daa:	46bd      	mov	sp, r7
   16dac:	b002      	add	sp, #8
   16dae:	bd80      	pop	{r7, pc}
   16db0:	20004700 	.word	0x20004700
   16db4:	00039240 	.word	0x00039240
   16db8:	00015b21 	.word	0x00015b21
   16dbc:	00039304 	.word	0x00039304
   16dc0:	000201e5 	.word	0x000201e5

00016dc4 <SeesawReadKeypad>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
{
   16dc4:	b580      	push	{r7, lr}
   16dc6:	b084      	sub	sp, #16
   16dc8:	af00      	add	r7, sp, #0
   16dca:	6078      	str	r0, [r7, #4]
   16dcc:	000a      	movs	r2, r1
   16dce:	1cfb      	adds	r3, r7, #3
   16dd0:	701a      	strb	r2, [r3, #0]
    if (count == 0) return ERROR_NONE;
   16dd2:	1cfb      	adds	r3, r7, #3
   16dd4:	781b      	ldrb	r3, [r3, #0]
   16dd6:	2b00      	cmp	r3, #0
   16dd8:	d101      	bne.n	16dde <SeesawReadKeypad+0x1a>
   16dda:	2300      	movs	r3, #0
   16ddc:	e026      	b.n	16e2c <SeesawReadKeypad+0x68>
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   16dde:	2308      	movs	r3, #8
   16de0:	18fb      	adds	r3, r7, r3
   16de2:	4a14      	ldr	r2, [pc, #80]	; (16e34 <SeesawReadKeypad+0x70>)
   16de4:	8812      	ldrh	r2, [r2, #0]
   16de6:	801a      	strh	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   16de8:	4b13      	ldr	r3, [pc, #76]	; (16e38 <SeesawReadKeypad+0x74>)
   16dea:	222e      	movs	r2, #46	; 0x2e
   16dec:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t*) &cmd[0];
   16dee:	4b12      	ldr	r3, [pc, #72]	; (16e38 <SeesawReadKeypad+0x74>)
   16df0:	2208      	movs	r2, #8
   16df2:	18ba      	adds	r2, r7, r2
   16df4:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   16df6:	4b10      	ldr	r3, [pc, #64]	; (16e38 <SeesawReadKeypad+0x74>)
   16df8:	2202      	movs	r2, #2
   16dfa:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = buffer;
   16dfc:	4b0e      	ldr	r3, [pc, #56]	; (16e38 <SeesawReadKeypad+0x74>)
   16dfe:	687a      	ldr	r2, [r7, #4]
   16e00:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = count;
   16e02:	1cfb      	adds	r3, r7, #3
   16e04:	781b      	ldrb	r3, [r3, #0]
   16e06:	b29a      	uxth	r2, r3
   16e08:	4b0b      	ldr	r3, [pc, #44]	; (16e38 <SeesawReadKeypad+0x74>)
   16e0a:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   16e0c:	4b0a      	ldr	r3, [pc, #40]	; (16e38 <SeesawReadKeypad+0x74>)
   16e0e:	2264      	movs	r2, #100	; 0x64
   16e10:	2100      	movs	r1, #0
   16e12:	0018      	movs	r0, r3
   16e14:	4b09      	ldr	r3, [pc, #36]	; (16e3c <SeesawReadKeypad+0x78>)
   16e16:	4798      	blx	r3
   16e18:	0003      	movs	r3, r0
   16e1a:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   16e1c:	68fb      	ldr	r3, [r7, #12]
   16e1e:	2b00      	cmp	r3, #0
   16e20:	d003      	beq.n	16e2a <SeesawReadKeypad+0x66>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   16e22:	4b07      	ldr	r3, [pc, #28]	; (16e40 <SeesawReadKeypad+0x7c>)
   16e24:	0018      	movs	r0, r3
   16e26:	4b07      	ldr	r3, [pc, #28]	; (16e44 <SeesawReadKeypad+0x80>)
   16e28:	4798      	blx	r3
    }
    return error;
   16e2a:	68fb      	ldr	r3, [r7, #12]
}
   16e2c:	0018      	movs	r0, r3
   16e2e:	46bd      	mov	sp, r7
   16e30:	b004      	add	sp, #16
   16e32:	bd80      	pop	{r7, pc}
   16e34:	00039328 	.word	0x00039328
   16e38:	20004700 	.word	0x20004700
   16e3c:	00015b21 	.word	0x00015b21
   16e40:	00039304 	.word	0x00039304
   16e44:	000201e5 	.word	0x000201e5

00016e48 <SeesawSetLed>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
         FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   16e48:	b5b0      	push	{r4, r5, r7, lr}
   16e4a:	b086      	sub	sp, #24
   16e4c:	af00      	add	r7, sp, #0
   16e4e:	0005      	movs	r5, r0
   16e50:	000c      	movs	r4, r1
   16e52:	0010      	movs	r0, r2
   16e54:	0019      	movs	r1, r3
   16e56:	1dfb      	adds	r3, r7, #7
   16e58:	1c2a      	adds	r2, r5, #0
   16e5a:	701a      	strb	r2, [r3, #0]
   16e5c:	1dbb      	adds	r3, r7, #6
   16e5e:	1c22      	adds	r2, r4, #0
   16e60:	701a      	strb	r2, [r3, #0]
   16e62:	1d7b      	adds	r3, r7, #5
   16e64:	1c02      	adds	r2, r0, #0
   16e66:	701a      	strb	r2, [r3, #0]
   16e68:	1d3b      	adds	r3, r7, #4
   16e6a:	1c0a      	adds	r2, r1, #0
   16e6c:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
   16e6e:	2308      	movs	r3, #8
   16e70:	18fb      	adds	r3, r7, r3
   16e72:	220e      	movs	r2, #14
   16e74:	701a      	strb	r2, [r3, #0]
   16e76:	2308      	movs	r3, #8
   16e78:	18fb      	adds	r3, r7, r3
   16e7a:	2204      	movs	r2, #4
   16e7c:	705a      	strb	r2, [r3, #1]
   16e7e:	2308      	movs	r3, #8
   16e80:	18fb      	adds	r3, r7, r3
   16e82:	2200      	movs	r2, #0
   16e84:	709a      	strb	r2, [r3, #2]
   16e86:	2308      	movs	r3, #8
   16e88:	18fb      	adds	r3, r7, r3
   16e8a:	2200      	movs	r2, #0
   16e8c:	70da      	strb	r2, [r3, #3]
   16e8e:	2308      	movs	r3, #8
   16e90:	18fb      	adds	r3, r7, r3
   16e92:	1d7a      	adds	r2, r7, #5
   16e94:	7812      	ldrb	r2, [r2, #0]
   16e96:	711a      	strb	r2, [r3, #4]
   16e98:	2308      	movs	r3, #8
   16e9a:	18fb      	adds	r3, r7, r3
   16e9c:	1dba      	adds	r2, r7, #6
   16e9e:	7812      	ldrb	r2, [r2, #0]
   16ea0:	715a      	strb	r2, [r3, #5]
   16ea2:	2308      	movs	r3, #8
   16ea4:	18fb      	adds	r3, r7, r3
   16ea6:	1d3a      	adds	r2, r7, #4
   16ea8:	7812      	ldrb	r2, [r2, #0]
   16eaa:	719a      	strb	r2, [r3, #6]

    uint16_t offset = 3 * key;  // RGB LED
   16eac:	1dfb      	adds	r3, r7, #7
   16eae:	781b      	ldrb	r3, [r3, #0]
   16eb0:	b29b      	uxth	r3, r3
   16eb2:	2216      	movs	r2, #22
   16eb4:	18ba      	adds	r2, r7, r2
   16eb6:	1c19      	adds	r1, r3, #0
   16eb8:	1c0b      	adds	r3, r1, #0
   16eba:	18db      	adds	r3, r3, r3
   16ebc:	185b      	adds	r3, r3, r1
   16ebe:	8013      	strh	r3, [r2, #0]
    write_buffer1[2] = (offset >> 8);
   16ec0:	2316      	movs	r3, #22
   16ec2:	18fb      	adds	r3, r7, r3
   16ec4:	881b      	ldrh	r3, [r3, #0]
   16ec6:	0a1b      	lsrs	r3, r3, #8
   16ec8:	b29b      	uxth	r3, r3
   16eca:	b2da      	uxtb	r2, r3
   16ecc:	2308      	movs	r3, #8
   16ece:	18fb      	adds	r3, r7, r3
   16ed0:	709a      	strb	r2, [r3, #2]
    write_buffer1[3] = (offset);
   16ed2:	2316      	movs	r3, #22
   16ed4:	18fb      	adds	r3, r7, r3
   16ed6:	881b      	ldrh	r3, [r3, #0]
   16ed8:	b2da      	uxtb	r2, r3
   16eda:	2308      	movs	r3, #8
   16edc:	18fb      	adds	r3, r7, r3
   16ede:	70da      	strb	r2, [r3, #3]

    seesawData.msgOut = (const uint8_t *)&write_buffer1[0];
   16ee0:	4b09      	ldr	r3, [pc, #36]	; (16f08 <SeesawSetLed+0xc0>)
   16ee2:	2208      	movs	r2, #8
   16ee4:	18ba      	adds	r2, r7, r2
   16ee6:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(write_buffer1);
   16ee8:	4b07      	ldr	r3, [pc, #28]	; (16f08 <SeesawSetLed+0xc0>)
   16eea:	2207      	movs	r2, #7
   16eec:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   16eee:	4b06      	ldr	r3, [pc, #24]	; (16f08 <SeesawSetLed+0xc0>)
   16ef0:	2164      	movs	r1, #100	; 0x64
   16ef2:	0018      	movs	r0, r3
   16ef4:	4b05      	ldr	r3, [pc, #20]	; (16f0c <SeesawSetLed+0xc4>)
   16ef6:	4798      	blx	r3
   16ef8:	0003      	movs	r3, r0
   16efa:	613b      	str	r3, [r7, #16]
    return error;
   16efc:	693b      	ldr	r3, [r7, #16]
}
   16efe:	0018      	movs	r0, r3
   16f00:	46bd      	mov	sp, r7
   16f02:	b006      	add	sp, #24
   16f04:	bdb0      	pop	{r4, r5, r7, pc}
   16f06:	46c0      	nop			; (mov r8, r8)
   16f08:	20004700 	.word	0x20004700
   16f0c:	00015a49 	.word	0x00015a49

00016f10 <SeesawOrderLedUpdate>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*/
int32_t SeesawOrderLedUpdate(void)
{
   16f10:	b580      	push	{r7, lr}
   16f12:	b082      	sub	sp, #8
   16f14:	af00      	add	r7, sp, #0
    uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   16f16:	003b      	movs	r3, r7
   16f18:	4a0a      	ldr	r2, [pc, #40]	; (16f44 <SeesawOrderLedUpdate+0x34>)
   16f1a:	8812      	ldrh	r2, [r2, #0]
   16f1c:	801a      	strh	r2, [r3, #0]

    seesawData.msgOut = (const uint8_t *) &orderBuffer[0];
   16f1e:	4b0a      	ldr	r3, [pc, #40]	; (16f48 <SeesawOrderLedUpdate+0x38>)
   16f20:	003a      	movs	r2, r7
   16f22:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(orderBuffer);
   16f24:	4b08      	ldr	r3, [pc, #32]	; (16f48 <SeesawOrderLedUpdate+0x38>)
   16f26:	2202      	movs	r2, #2
   16f28:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   16f2a:	4b07      	ldr	r3, [pc, #28]	; (16f48 <SeesawOrderLedUpdate+0x38>)
   16f2c:	2164      	movs	r1, #100	; 0x64
   16f2e:	0018      	movs	r0, r3
   16f30:	4b06      	ldr	r3, [pc, #24]	; (16f4c <SeesawOrderLedUpdate+0x3c>)
   16f32:	4798      	blx	r3
   16f34:	0003      	movs	r3, r0
   16f36:	607b      	str	r3, [r7, #4]
    return error;
   16f38:	687b      	ldr	r3, [r7, #4]
}
   16f3a:	0018      	movs	r0, r3
   16f3c:	46bd      	mov	sp, r7
   16f3e:	b002      	add	sp, #8
   16f40:	bd80      	pop	{r7, pc}
   16f42:	46c0      	nop			; (mov r8, r8)
   16f44:	0003932c 	.word	0x0003932c
   16f48:	20004700 	.word	0x20004700
   16f4c:	00015a49 	.word	0x00015a49

00016f50 <system_pinmux_get_group_from_gpio_pin>:
{
   16f50:	b580      	push	{r7, lr}
   16f52:	b084      	sub	sp, #16
   16f54:	af00      	add	r7, sp, #0
   16f56:	0002      	movs	r2, r0
   16f58:	1dfb      	adds	r3, r7, #7
   16f5a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   16f5c:	230f      	movs	r3, #15
   16f5e:	18fb      	adds	r3, r7, r3
   16f60:	1dfa      	adds	r2, r7, #7
   16f62:	7812      	ldrb	r2, [r2, #0]
   16f64:	09d2      	lsrs	r2, r2, #7
   16f66:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   16f68:	230e      	movs	r3, #14
   16f6a:	18fb      	adds	r3, r7, r3
   16f6c:	1dfa      	adds	r2, r7, #7
   16f6e:	7812      	ldrb	r2, [r2, #0]
   16f70:	0952      	lsrs	r2, r2, #5
   16f72:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   16f74:	4b0d      	ldr	r3, [pc, #52]	; (16fac <system_pinmux_get_group_from_gpio_pin+0x5c>)
   16f76:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   16f78:	230f      	movs	r3, #15
   16f7a:	18fb      	adds	r3, r7, r3
   16f7c:	781b      	ldrb	r3, [r3, #0]
   16f7e:	2b00      	cmp	r3, #0
   16f80:	d10f      	bne.n	16fa2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   16f82:	230f      	movs	r3, #15
   16f84:	18fb      	adds	r3, r7, r3
   16f86:	781b      	ldrb	r3, [r3, #0]
   16f88:	009b      	lsls	r3, r3, #2
   16f8a:	2210      	movs	r2, #16
   16f8c:	4694      	mov	ip, r2
   16f8e:	44bc      	add	ip, r7
   16f90:	4463      	add	r3, ip
   16f92:	3b08      	subs	r3, #8
   16f94:	681a      	ldr	r2, [r3, #0]
   16f96:	230e      	movs	r3, #14
   16f98:	18fb      	adds	r3, r7, r3
   16f9a:	781b      	ldrb	r3, [r3, #0]
   16f9c:	01db      	lsls	r3, r3, #7
   16f9e:	18d3      	adds	r3, r2, r3
   16fa0:	e000      	b.n	16fa4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   16fa2:	2300      	movs	r3, #0
}
   16fa4:	0018      	movs	r0, r3
   16fa6:	46bd      	mov	sp, r7
   16fa8:	b004      	add	sp, #16
   16faa:	bd80      	pop	{r7, pc}
   16fac:	41004400 	.word	0x41004400

00016fb0 <port_get_group_from_gpio_pin>:
{
   16fb0:	b580      	push	{r7, lr}
   16fb2:	b082      	sub	sp, #8
   16fb4:	af00      	add	r7, sp, #0
   16fb6:	0002      	movs	r2, r0
   16fb8:	1dfb      	adds	r3, r7, #7
   16fba:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   16fbc:	1dfb      	adds	r3, r7, #7
   16fbe:	781b      	ldrb	r3, [r3, #0]
   16fc0:	0018      	movs	r0, r3
   16fc2:	4b03      	ldr	r3, [pc, #12]	; (16fd0 <port_get_group_from_gpio_pin+0x20>)
   16fc4:	4798      	blx	r3
   16fc6:	0003      	movs	r3, r0
}
   16fc8:	0018      	movs	r0, r3
   16fca:	46bd      	mov	sp, r7
   16fcc:	b002      	add	sp, #8
   16fce:	bd80      	pop	{r7, pc}
   16fd0:	00016f51 	.word	0x00016f51

00016fd4 <port_get_config_defaults>:
{
   16fd4:	b580      	push	{r7, lr}
   16fd6:	b082      	sub	sp, #8
   16fd8:	af00      	add	r7, sp, #0
   16fda:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   16fdc:	687b      	ldr	r3, [r7, #4]
   16fde:	2200      	movs	r2, #0
   16fe0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   16fe2:	687b      	ldr	r3, [r7, #4]
   16fe4:	2201      	movs	r2, #1
   16fe6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   16fe8:	687b      	ldr	r3, [r7, #4]
   16fea:	2200      	movs	r2, #0
   16fec:	709a      	strb	r2, [r3, #2]
}
   16fee:	46c0      	nop			; (mov r8, r8)
   16ff0:	46bd      	mov	sp, r7
   16ff2:	b002      	add	sp, #8
   16ff4:	bd80      	pop	{r7, pc}
	...

00016ff8 <port_pin_set_output_level>:
{
   16ff8:	b580      	push	{r7, lr}
   16ffa:	b084      	sub	sp, #16
   16ffc:	af00      	add	r7, sp, #0
   16ffe:	0002      	movs	r2, r0
   17000:	1dfb      	adds	r3, r7, #7
   17002:	701a      	strb	r2, [r3, #0]
   17004:	1dbb      	adds	r3, r7, #6
   17006:	1c0a      	adds	r2, r1, #0
   17008:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1700a:	1dfb      	adds	r3, r7, #7
   1700c:	781b      	ldrb	r3, [r3, #0]
   1700e:	0018      	movs	r0, r3
   17010:	4b0d      	ldr	r3, [pc, #52]	; (17048 <port_pin_set_output_level+0x50>)
   17012:	4798      	blx	r3
   17014:	0003      	movs	r3, r0
   17016:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   17018:	1dfb      	adds	r3, r7, #7
   1701a:	781b      	ldrb	r3, [r3, #0]
   1701c:	221f      	movs	r2, #31
   1701e:	4013      	ands	r3, r2
   17020:	2201      	movs	r2, #1
   17022:	409a      	lsls	r2, r3
   17024:	0013      	movs	r3, r2
   17026:	60bb      	str	r3, [r7, #8]
	if (level) {
   17028:	1dbb      	adds	r3, r7, #6
   1702a:	781b      	ldrb	r3, [r3, #0]
   1702c:	2b00      	cmp	r3, #0
   1702e:	d003      	beq.n	17038 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   17030:	68fb      	ldr	r3, [r7, #12]
   17032:	68ba      	ldr	r2, [r7, #8]
   17034:	619a      	str	r2, [r3, #24]
}
   17036:	e002      	b.n	1703e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   17038:	68fb      	ldr	r3, [r7, #12]
   1703a:	68ba      	ldr	r2, [r7, #8]
   1703c:	615a      	str	r2, [r3, #20]
}
   1703e:	46c0      	nop			; (mov r8, r8)
   17040:	46bd      	mov	sp, r7
   17042:	b004      	add	sp, #16
   17044:	bd80      	pop	{r7, pc}
   17046:	46c0      	nop			; (mov r8, r8)
   17048:	00016fb1 	.word	0x00016fb1

0001704c <configure_port_speaker_pins>:
 *  Author: HEY
 */ 
#include "speaker.h"
double flag = MAX_PERIOD;
void configure_port_speaker_pins(void)
{
   1704c:	b580      	push	{r7, lr}
   1704e:	b082      	sub	sp, #8
   17050:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   17052:	1d3b      	adds	r3, r7, #4
   17054:	0018      	movs	r0, r3
   17056:	4b07      	ldr	r3, [pc, #28]	; (17074 <configure_port_speaker_pins+0x28>)
   17058:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   1705a:	1d3b      	adds	r3, r7, #4
   1705c:	2201      	movs	r2, #1
   1705e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SPEAKER_PIN, &config_port_pin);
   17060:	1d3b      	adds	r3, r7, #4
   17062:	0019      	movs	r1, r3
   17064:	2004      	movs	r0, #4
   17066:	4b04      	ldr	r3, [pc, #16]	; (17078 <configure_port_speaker_pins+0x2c>)
   17068:	4798      	blx	r3
	
}
   1706a:	46c0      	nop			; (mov r8, r8)
   1706c:	46bd      	mov	sp, r7
   1706e:	b002      	add	sp, #8
   17070:	bd80      	pop	{r7, pc}
   17072:	46c0      	nop			; (mov r8, r8)
   17074:	00016fd5 	.word	0x00016fd5
   17078:	00028db5 	.word	0x00028db5

0001707c <warning_speaker>:
void warning_speaker(){
   1707c:	b5b0      	push	{r4, r5, r7, lr}
   1707e:	b082      	sub	sp, #8
   17080:	af00      	add	r7, sp, #0
	
	int count = 0;
   17082:	2300      	movs	r3, #0
   17084:	607b      	str	r3, [r7, #4]
	port_pin_set_output_level(SPEAKER_PIN,0);
   17086:	2100      	movs	r1, #0
   17088:	2004      	movs	r0, #4
   1708a:	4b2e      	ldr	r3, [pc, #184]	; (17144 <warning_speaker+0xc8>)
   1708c:	4798      	blx	r3
	for(int i = 0;i<10000;i++){
   1708e:	2300      	movs	r3, #0
   17090:	603b      	str	r3, [r7, #0]
   17092:	e04b      	b.n	1712c <warning_speaker+0xb0>
		if(count == 4)
   17094:	687b      	ldr	r3, [r7, #4]
   17096:	2b04      	cmp	r3, #4
   17098:	d133      	bne.n	17102 <warning_speaker+0x86>
		{
			port_pin_set_output_level(SPEAKER_PIN,1);
   1709a:	2101      	movs	r1, #1
   1709c:	2004      	movs	r0, #4
   1709e:	4b29      	ldr	r3, [pc, #164]	; (17144 <warning_speaker+0xc8>)
   170a0:	4798      	blx	r3
			count = 0;
   170a2:	2300      	movs	r3, #0
   170a4:	607b      	str	r3, [r7, #4]
			if(flag >= MAX_PERIOD){
   170a6:	4b28      	ldr	r3, [pc, #160]	; (17148 <warning_speaker+0xcc>)
   170a8:	6818      	ldr	r0, [r3, #0]
   170aa:	6859      	ldr	r1, [r3, #4]
   170ac:	4c27      	ldr	r4, [pc, #156]	; (1714c <warning_speaker+0xd0>)
   170ae:	2200      	movs	r2, #0
   170b0:	4b27      	ldr	r3, [pc, #156]	; (17150 <warning_speaker+0xd4>)
   170b2:	47a0      	blx	r4
   170b4:	1e03      	subs	r3, r0, #0
   170b6:	d005      	beq.n	170c4 <warning_speaker+0x48>
				flag = MIN_PERIOD;
   170b8:	4a23      	ldr	r2, [pc, #140]	; (17148 <warning_speaker+0xcc>)
   170ba:	4b26      	ldr	r3, [pc, #152]	; (17154 <warning_speaker+0xd8>)
   170bc:	4c26      	ldr	r4, [pc, #152]	; (17158 <warning_speaker+0xdc>)
   170be:	6013      	str	r3, [r2, #0]
   170c0:	6054      	str	r4, [r2, #4]
   170c2:	e022      	b.n	1710a <warning_speaker+0x8e>
			}	else{
				flag = 1000 / (1000/flag - ((1000/MIN_PERIOD - 1000/MAX_PERIOD) / 44100));
   170c4:	4b20      	ldr	r3, [pc, #128]	; (17148 <warning_speaker+0xcc>)
   170c6:	685c      	ldr	r4, [r3, #4]
   170c8:	681b      	ldr	r3, [r3, #0]
   170ca:	4d24      	ldr	r5, [pc, #144]	; (1715c <warning_speaker+0xe0>)
   170cc:	001a      	movs	r2, r3
   170ce:	0023      	movs	r3, r4
   170d0:	2000      	movs	r0, #0
   170d2:	4923      	ldr	r1, [pc, #140]	; (17160 <warning_speaker+0xe4>)
   170d4:	47a8      	blx	r5
   170d6:	0003      	movs	r3, r0
   170d8:	000c      	movs	r4, r1
   170da:	0018      	movs	r0, r3
   170dc:	0021      	movs	r1, r4
   170de:	4c21      	ldr	r4, [pc, #132]	; (17164 <warning_speaker+0xe8>)
   170e0:	4a21      	ldr	r2, [pc, #132]	; (17168 <warning_speaker+0xec>)
   170e2:	4b22      	ldr	r3, [pc, #136]	; (1716c <warning_speaker+0xf0>)
   170e4:	47a0      	blx	r4
   170e6:	0003      	movs	r3, r0
   170e8:	000c      	movs	r4, r1
   170ea:	001a      	movs	r2, r3
   170ec:	0023      	movs	r3, r4
   170ee:	4c1b      	ldr	r4, [pc, #108]	; (1715c <warning_speaker+0xe0>)
   170f0:	2000      	movs	r0, #0
   170f2:	491b      	ldr	r1, [pc, #108]	; (17160 <warning_speaker+0xe4>)
   170f4:	47a0      	blx	r4
   170f6:	0003      	movs	r3, r0
   170f8:	000c      	movs	r4, r1
   170fa:	4a13      	ldr	r2, [pc, #76]	; (17148 <warning_speaker+0xcc>)
   170fc:	6013      	str	r3, [r2, #0]
   170fe:	6054      	str	r4, [r2, #4]
   17100:	e003      	b.n	1710a <warning_speaker+0x8e>
			}
		}
		else{
			port_pin_set_output_level(SPEAKER_PIN,0);	
   17102:	2100      	movs	r1, #0
   17104:	2004      	movs	r0, #4
   17106:	4b0f      	ldr	r3, [pc, #60]	; (17144 <warning_speaker+0xc8>)
   17108:	4798      	blx	r3
		}
		vTaskDelay(flag);
   1710a:	4b0f      	ldr	r3, [pc, #60]	; (17148 <warning_speaker+0xcc>)
   1710c:	685c      	ldr	r4, [r3, #4]
   1710e:	681b      	ldr	r3, [r3, #0]
   17110:	4a17      	ldr	r2, [pc, #92]	; (17170 <warning_speaker+0xf4>)
   17112:	0018      	movs	r0, r3
   17114:	0021      	movs	r1, r4
   17116:	4790      	blx	r2
   17118:	0003      	movs	r3, r0
   1711a:	0018      	movs	r0, r3
   1711c:	4b15      	ldr	r3, [pc, #84]	; (17174 <warning_speaker+0xf8>)
   1711e:	4798      	blx	r3
		//delay_ms(1);
		count++;
   17120:	687b      	ldr	r3, [r7, #4]
   17122:	3301      	adds	r3, #1
   17124:	607b      	str	r3, [r7, #4]
	for(int i = 0;i<10000;i++){
   17126:	683b      	ldr	r3, [r7, #0]
   17128:	3301      	adds	r3, #1
   1712a:	603b      	str	r3, [r7, #0]
   1712c:	683b      	ldr	r3, [r7, #0]
   1712e:	4a12      	ldr	r2, [pc, #72]	; (17178 <warning_speaker+0xfc>)
   17130:	4293      	cmp	r3, r2
   17132:	ddaf      	ble.n	17094 <warning_speaker+0x18>
	}
	port_pin_set_output_level(SPEAKER_PIN,0);
   17134:	2100      	movs	r1, #0
   17136:	2004      	movs	r0, #4
   17138:	4b02      	ldr	r3, [pc, #8]	; (17144 <warning_speaker+0xc8>)
   1713a:	4798      	blx	r3

   1713c:	46c0      	nop			; (mov r8, r8)
   1713e:	46bd      	mov	sp, r7
   17140:	b002      	add	sp, #8
   17142:	bdb0      	pop	{r4, r5, r7, pc}
   17144:	00016ff9 	.word	0x00016ff9
   17148:	20000028 	.word	0x20000028
   1714c:	00035169 	.word	0x00035169
   17150:	40340000 	.word	0x40340000
   17154:	9999999a 	.word	0x9999999a
   17158:	3fb99999 	.word	0x3fb99999
   1715c:	00036221 	.word	0x00036221
   17160:	408f4000 	.word	0x408f4000
   17164:	00036f89 	.word	0x00036f89
   17168:	ca981738 	.word	0xca981738
   1716c:	3fcce13b 	.word	0x3fcce13b
   17170:	00035219 	.word	0x00035219
   17174:	0001e591 	.word	0x0001e591
   17178:	0000270f 	.word	0x0000270f

0001717c <system_pinmux_get_group_from_gpio_pin>:
{
   1717c:	b580      	push	{r7, lr}
   1717e:	b084      	sub	sp, #16
   17180:	af00      	add	r7, sp, #0
   17182:	0002      	movs	r2, r0
   17184:	1dfb      	adds	r3, r7, #7
   17186:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   17188:	230f      	movs	r3, #15
   1718a:	18fb      	adds	r3, r7, r3
   1718c:	1dfa      	adds	r2, r7, #7
   1718e:	7812      	ldrb	r2, [r2, #0]
   17190:	09d2      	lsrs	r2, r2, #7
   17192:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   17194:	230e      	movs	r3, #14
   17196:	18fb      	adds	r3, r7, r3
   17198:	1dfa      	adds	r2, r7, #7
   1719a:	7812      	ldrb	r2, [r2, #0]
   1719c:	0952      	lsrs	r2, r2, #5
   1719e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   171a0:	4b0d      	ldr	r3, [pc, #52]	; (171d8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   171a2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   171a4:	230f      	movs	r3, #15
   171a6:	18fb      	adds	r3, r7, r3
   171a8:	781b      	ldrb	r3, [r3, #0]
   171aa:	2b00      	cmp	r3, #0
   171ac:	d10f      	bne.n	171ce <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   171ae:	230f      	movs	r3, #15
   171b0:	18fb      	adds	r3, r7, r3
   171b2:	781b      	ldrb	r3, [r3, #0]
   171b4:	009b      	lsls	r3, r3, #2
   171b6:	2210      	movs	r2, #16
   171b8:	4694      	mov	ip, r2
   171ba:	44bc      	add	ip, r7
   171bc:	4463      	add	r3, ip
   171be:	3b08      	subs	r3, #8
   171c0:	681a      	ldr	r2, [r3, #0]
   171c2:	230e      	movs	r3, #14
   171c4:	18fb      	adds	r3, r7, r3
   171c6:	781b      	ldrb	r3, [r3, #0]
   171c8:	01db      	lsls	r3, r3, #7
   171ca:	18d3      	adds	r3, r2, r3
   171cc:	e000      	b.n	171d0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   171ce:	2300      	movs	r3, #0
}
   171d0:	0018      	movs	r0, r3
   171d2:	46bd      	mov	sp, r7
   171d4:	b004      	add	sp, #16
   171d6:	bd80      	pop	{r7, pc}
   171d8:	41004400 	.word	0x41004400

000171dc <port_get_group_from_gpio_pin>:
{
   171dc:	b580      	push	{r7, lr}
   171de:	b082      	sub	sp, #8
   171e0:	af00      	add	r7, sp, #0
   171e2:	0002      	movs	r2, r0
   171e4:	1dfb      	adds	r3, r7, #7
   171e6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   171e8:	1dfb      	adds	r3, r7, #7
   171ea:	781b      	ldrb	r3, [r3, #0]
   171ec:	0018      	movs	r0, r3
   171ee:	4b03      	ldr	r3, [pc, #12]	; (171fc <port_get_group_from_gpio_pin+0x20>)
   171f0:	4798      	blx	r3
   171f2:	0003      	movs	r3, r0
}
   171f4:	0018      	movs	r0, r3
   171f6:	46bd      	mov	sp, r7
   171f8:	b002      	add	sp, #8
   171fa:	bd80      	pop	{r7, pc}
   171fc:	0001717d 	.word	0x0001717d

00017200 <port_get_config_defaults>:
{
   17200:	b580      	push	{r7, lr}
   17202:	b082      	sub	sp, #8
   17204:	af00      	add	r7, sp, #0
   17206:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   17208:	687b      	ldr	r3, [r7, #4]
   1720a:	2200      	movs	r2, #0
   1720c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1720e:	687b      	ldr	r3, [r7, #4]
   17210:	2201      	movs	r2, #1
   17212:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   17214:	687b      	ldr	r3, [r7, #4]
   17216:	2200      	movs	r2, #0
   17218:	709a      	strb	r2, [r3, #2]
}
   1721a:	46c0      	nop			; (mov r8, r8)
   1721c:	46bd      	mov	sp, r7
   1721e:	b002      	add	sp, #8
   17220:	bd80      	pop	{r7, pc}
	...

00017224 <port_pin_set_output_level>:
{
   17224:	b580      	push	{r7, lr}
   17226:	b084      	sub	sp, #16
   17228:	af00      	add	r7, sp, #0
   1722a:	0002      	movs	r2, r0
   1722c:	1dfb      	adds	r3, r7, #7
   1722e:	701a      	strb	r2, [r3, #0]
   17230:	1dbb      	adds	r3, r7, #6
   17232:	1c0a      	adds	r2, r1, #0
   17234:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   17236:	1dfb      	adds	r3, r7, #7
   17238:	781b      	ldrb	r3, [r3, #0]
   1723a:	0018      	movs	r0, r3
   1723c:	4b0d      	ldr	r3, [pc, #52]	; (17274 <port_pin_set_output_level+0x50>)
   1723e:	4798      	blx	r3
   17240:	0003      	movs	r3, r0
   17242:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   17244:	1dfb      	adds	r3, r7, #7
   17246:	781b      	ldrb	r3, [r3, #0]
   17248:	221f      	movs	r2, #31
   1724a:	4013      	ands	r3, r2
   1724c:	2201      	movs	r2, #1
   1724e:	409a      	lsls	r2, r3
   17250:	0013      	movs	r3, r2
   17252:	60bb      	str	r3, [r7, #8]
	if (level) {
   17254:	1dbb      	adds	r3, r7, #6
   17256:	781b      	ldrb	r3, [r3, #0]
   17258:	2b00      	cmp	r3, #0
   1725a:	d003      	beq.n	17264 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1725c:	68fb      	ldr	r3, [r7, #12]
   1725e:	68ba      	ldr	r2, [r7, #8]
   17260:	619a      	str	r2, [r3, #24]
}
   17262:	e002      	b.n	1726a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   17264:	68fb      	ldr	r3, [r7, #12]
   17266:	68ba      	ldr	r2, [r7, #8]
   17268:	615a      	str	r2, [r3, #20]
}
   1726a:	46c0      	nop			; (mov r8, r8)
   1726c:	46bd      	mov	sp, r7
   1726e:	b004      	add	sp, #16
   17270:	bd80      	pop	{r7, pc}
   17272:	46c0      	nop			; (mov r8, r8)
   17274:	000171dd 	.word	0x000171dd

00017278 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   17278:	b580      	push	{r7, lr}
   1727a:	b084      	sub	sp, #16
   1727c:	af00      	add	r7, sp, #0
   1727e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   17280:	687b      	ldr	r3, [r7, #4]
   17282:	681b      	ldr	r3, [r3, #0]
   17284:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   17286:	68fb      	ldr	r3, [r7, #12]
   17288:	69db      	ldr	r3, [r3, #28]
   1728a:	1e5a      	subs	r2, r3, #1
   1728c:	4193      	sbcs	r3, r2
   1728e:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   17290:	0018      	movs	r0, r3
   17292:	46bd      	mov	sp, r7
   17294:	b004      	add	sp, #16
   17296:	bd80      	pop	{r7, pc}

00017298 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   17298:	b580      	push	{r7, lr}
   1729a:	b082      	sub	sp, #8
   1729c:	af00      	add	r7, sp, #0
   1729e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   172a0:	687b      	ldr	r3, [r7, #4]
   172a2:	2201      	movs	r2, #1
   172a4:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   172a6:	687b      	ldr	r3, [r7, #4]
   172a8:	2200      	movs	r2, #0
   172aa:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   172ac:	687b      	ldr	r3, [r7, #4]
   172ae:	2200      	movs	r2, #0
   172b0:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   172b2:	687b      	ldr	r3, [r7, #4]
   172b4:	22c0      	movs	r2, #192	; 0xc0
   172b6:	0392      	lsls	r2, r2, #14
   172b8:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   172ba:	687b      	ldr	r3, [r7, #4]
   172bc:	2200      	movs	r2, #0
   172be:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   172c0:	687b      	ldr	r3, [r7, #4]
   172c2:	2200      	movs	r2, #0
   172c4:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   172c6:	687b      	ldr	r3, [r7, #4]
   172c8:	2201      	movs	r2, #1
   172ca:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   172cc:	687b      	ldr	r3, [r7, #4]
   172ce:	2201      	movs	r2, #1
   172d0:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   172d2:	687b      	ldr	r3, [r7, #4]
   172d4:	2200      	movs	r2, #0
   172d6:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   172d8:	687b      	ldr	r3, [r7, #4]
   172da:	2224      	movs	r2, #36	; 0x24
   172dc:	2100      	movs	r1, #0
   172de:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   172e0:	687b      	ldr	r3, [r7, #4]
   172e2:	3318      	adds	r3, #24
   172e4:	220c      	movs	r2, #12
   172e6:	2100      	movs	r1, #0
   172e8:	0018      	movs	r0, r3
   172ea:	4b0a      	ldr	r3, [pc, #40]	; (17314 <spi_get_config_defaults+0x7c>)
   172ec:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   172ee:	687b      	ldr	r3, [r7, #4]
   172f0:	4a09      	ldr	r2, [pc, #36]	; (17318 <spi_get_config_defaults+0x80>)
   172f2:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   172f4:	687b      	ldr	r3, [r7, #4]
   172f6:	2200      	movs	r2, #0
   172f8:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   172fa:	687b      	ldr	r3, [r7, #4]
   172fc:	2200      	movs	r2, #0
   172fe:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   17300:	687b      	ldr	r3, [r7, #4]
   17302:	2200      	movs	r2, #0
   17304:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   17306:	687b      	ldr	r3, [r7, #4]
   17308:	2200      	movs	r2, #0
   1730a:	635a      	str	r2, [r3, #52]	; 0x34

};
   1730c:	46c0      	nop			; (mov r8, r8)
   1730e:	46bd      	mov	sp, r7
   17310:	b002      	add	sp, #8
   17312:	bd80      	pop	{r7, pc}
   17314:	0003794b 	.word	0x0003794b
   17318:	000186a0 	.word	0x000186a0

0001731c <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   1731c:	b580      	push	{r7, lr}
   1731e:	b082      	sub	sp, #8
   17320:	af00      	add	r7, sp, #0
   17322:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   17324:	687b      	ldr	r3, [r7, #4]
   17326:	220a      	movs	r2, #10
   17328:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1732a:	687b      	ldr	r3, [r7, #4]
   1732c:	2200      	movs	r2, #0
   1732e:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   17330:	687b      	ldr	r3, [r7, #4]
   17332:	2200      	movs	r2, #0
   17334:	709a      	strb	r2, [r3, #2]
}
   17336:	46c0      	nop			; (mov r8, r8)
   17338:	46bd      	mov	sp, r7
   1733a:	b002      	add	sp, #8
   1733c:	bd80      	pop	{r7, pc}
	...

00017340 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   17340:	b580      	push	{r7, lr}
   17342:	b084      	sub	sp, #16
   17344:	af00      	add	r7, sp, #0
   17346:	6078      	str	r0, [r7, #4]
   17348:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   1734a:	683b      	ldr	r3, [r7, #0]
   1734c:	781a      	ldrb	r2, [r3, #0]
   1734e:	687b      	ldr	r3, [r7, #4]
   17350:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   17352:	683b      	ldr	r3, [r7, #0]
   17354:	785a      	ldrb	r2, [r3, #1]
   17356:	687b      	ldr	r3, [r7, #4]
   17358:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1735a:	683b      	ldr	r3, [r7, #0]
   1735c:	789a      	ldrb	r2, [r3, #2]
   1735e:	687b      	ldr	r3, [r7, #4]
   17360:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   17362:	230c      	movs	r3, #12
   17364:	18fb      	adds	r3, r7, r3
   17366:	0018      	movs	r0, r3
   17368:	4b0b      	ldr	r3, [pc, #44]	; (17398 <spi_attach_slave+0x58>)
   1736a:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1736c:	230c      	movs	r3, #12
   1736e:	18fb      	adds	r3, r7, r3
   17370:	2201      	movs	r2, #1
   17372:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   17374:	687b      	ldr	r3, [r7, #4]
   17376:	781b      	ldrb	r3, [r3, #0]
   17378:	220c      	movs	r2, #12
   1737a:	18ba      	adds	r2, r7, r2
   1737c:	0011      	movs	r1, r2
   1737e:	0018      	movs	r0, r3
   17380:	4b06      	ldr	r3, [pc, #24]	; (1739c <spi_attach_slave+0x5c>)
   17382:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   17384:	687b      	ldr	r3, [r7, #4]
   17386:	781b      	ldrb	r3, [r3, #0]
   17388:	2101      	movs	r1, #1
   1738a:	0018      	movs	r0, r3
   1738c:	4b04      	ldr	r3, [pc, #16]	; (173a0 <spi_attach_slave+0x60>)
   1738e:	4798      	blx	r3
}
   17390:	46c0      	nop			; (mov r8, r8)
   17392:	46bd      	mov	sp, r7
   17394:	b004      	add	sp, #16
   17396:	bd80      	pop	{r7, pc}
   17398:	00017201 	.word	0x00017201
   1739c:	00028db5 	.word	0x00028db5
   173a0:	00017225 	.word	0x00017225

000173a4 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   173a4:	b580      	push	{r7, lr}
   173a6:	b084      	sub	sp, #16
   173a8:	af00      	add	r7, sp, #0
   173aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   173ac:	687b      	ldr	r3, [r7, #4]
   173ae:	681b      	ldr	r3, [r3, #0]
   173b0:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
   173b2:	46c0      	nop			; (mov r8, r8)
   173b4:	687b      	ldr	r3, [r7, #4]
   173b6:	0018      	movs	r0, r3
   173b8:	4b06      	ldr	r3, [pc, #24]	; (173d4 <spi_enable+0x30>)
   173ba:	4798      	blx	r3
   173bc:	1e03      	subs	r3, r0, #0
   173be:	d1f9      	bne.n	173b4 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   173c0:	68fb      	ldr	r3, [r7, #12]
   173c2:	681b      	ldr	r3, [r3, #0]
   173c4:	2202      	movs	r2, #2
   173c6:	431a      	orrs	r2, r3
   173c8:	68fb      	ldr	r3, [r7, #12]
   173ca:	601a      	str	r2, [r3, #0]
}
   173cc:	46c0      	nop			; (mov r8, r8)
   173ce:	46bd      	mov	sp, r7
   173d0:	b004      	add	sp, #16
   173d2:	bd80      	pop	{r7, pc}
   173d4:	00017279 	.word	0x00017279

000173d8 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   173d8:	b580      	push	{r7, lr}
   173da:	b084      	sub	sp, #16
   173dc:	af00      	add	r7, sp, #0
   173de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   173e0:	687b      	ldr	r3, [r7, #4]
   173e2:	681b      	ldr	r3, [r3, #0]
   173e4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   173e6:	68fb      	ldr	r3, [r7, #12]
   173e8:	7e1b      	ldrb	r3, [r3, #24]
   173ea:	b2db      	uxtb	r3, r3
   173ec:	001a      	movs	r2, r3
   173ee:	2301      	movs	r3, #1
   173f0:	4013      	ands	r3, r2
   173f2:	1e5a      	subs	r2, r3, #1
   173f4:	4193      	sbcs	r3, r2
   173f6:	b2db      	uxtb	r3, r3
}
   173f8:	0018      	movs	r0, r3
   173fa:	46bd      	mov	sp, r7
   173fc:	b004      	add	sp, #16
   173fe:	bd80      	pop	{r7, pc}

00017400 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   17400:	b580      	push	{r7, lr}
   17402:	b084      	sub	sp, #16
   17404:	af00      	add	r7, sp, #0
   17406:	6078      	str	r0, [r7, #4]
   17408:	000a      	movs	r2, r1
   1740a:	1cbb      	adds	r3, r7, #2
   1740c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1740e:	687b      	ldr	r3, [r7, #4]
   17410:	681b      	ldr	r3, [r3, #0]
   17412:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   17414:	687b      	ldr	r3, [r7, #4]
   17416:	0018      	movs	r0, r3
   17418:	4b0a      	ldr	r3, [pc, #40]	; (17444 <spi_write+0x44>)
   1741a:	4798      	blx	r3
   1741c:	0003      	movs	r3, r0
   1741e:	001a      	movs	r2, r3
   17420:	2301      	movs	r3, #1
   17422:	4053      	eors	r3, r2
   17424:	b2db      	uxtb	r3, r3
   17426:	2b00      	cmp	r3, #0
   17428:	d001      	beq.n	1742e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   1742a:	2305      	movs	r3, #5
   1742c:	e006      	b.n	1743c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1742e:	1cbb      	adds	r3, r7, #2
   17430:	881b      	ldrh	r3, [r3, #0]
   17432:	05db      	lsls	r3, r3, #23
   17434:	0dda      	lsrs	r2, r3, #23
   17436:	68fb      	ldr	r3, [r7, #12]
   17438:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   1743a:	2300      	movs	r3, #0
}
   1743c:	0018      	movs	r0, r3
   1743e:	46bd      	mov	sp, r7
   17440:	b004      	add	sp, #16
   17442:	bd80      	pop	{r7, pc}
   17444:	000173d9 	.word	0x000173d9

00017448 <configure_port_pins>:
	LCD_data(madctl);
}


void configure_port_pins(void)
{
   17448:	b580      	push	{r7, lr}
   1744a:	b082      	sub	sp, #8
   1744c:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   1744e:	1d3b      	adds	r3, r7, #4
   17450:	0018      	movs	r0, r3
   17452:	4b0f      	ldr	r3, [pc, #60]	; (17490 <configure_port_pins+0x48>)
   17454:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   17456:	1d3b      	adds	r3, r7, #4
   17458:	2201      	movs	r2, #1
   1745a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PB02, &config_port_pin);
   1745c:	1d3b      	adds	r3, r7, #4
   1745e:	0019      	movs	r1, r3
   17460:	2022      	movs	r0, #34	; 0x22
   17462:	4b0c      	ldr	r3, [pc, #48]	; (17494 <configure_port_pins+0x4c>)
   17464:	4798      	blx	r3
	struct port_config config_port_pins;
	port_get_config_defaults(&config_port_pins);
   17466:	003b      	movs	r3, r7
   17468:	0018      	movs	r0, r3
   1746a:	4b09      	ldr	r3, [pc, #36]	; (17490 <configure_port_pins+0x48>)
   1746c:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   1746e:	1d3b      	adds	r3, r7, #4
   17470:	2201      	movs	r2, #1
   17472:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA20, &config_port_pins);
   17474:	003b      	movs	r3, r7
   17476:	0019      	movs	r1, r3
   17478:	2014      	movs	r0, #20
   1747a:	4b06      	ldr	r3, [pc, #24]	; (17494 <configure_port_pins+0x4c>)
   1747c:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA20,1);
   1747e:	2101      	movs	r1, #1
   17480:	2014      	movs	r0, #20
   17482:	4b05      	ldr	r3, [pc, #20]	; (17498 <configure_port_pins+0x50>)
   17484:	4798      	blx	r3
}
   17486:	46c0      	nop			; (mov r8, r8)
   17488:	46bd      	mov	sp, r7
   1748a:	b002      	add	sp, #8
   1748c:	bd80      	pop	{r7, pc}
   1748e:	46c0      	nop			; (mov r8, r8)
   17490:	00017201 	.word	0x00017201
   17494:	00028db5 	.word	0x00028db5
   17498:	00017225 	.word	0x00017225

0001749c <drawString>:
            LCD_drawPixel(x+i,y+j,c2);
        }
    }
}

void drawString(short x, short y, char* str, short fg, short bg){
   1749c:	b5b0      	push	{r4, r5, r7, lr}
   1749e:	b088      	sub	sp, #32
   174a0:	af02      	add	r7, sp, #8
   174a2:	0004      	movs	r4, r0
   174a4:	0008      	movs	r0, r1
   174a6:	60ba      	str	r2, [r7, #8]
   174a8:	0019      	movs	r1, r3
   174aa:	230e      	movs	r3, #14
   174ac:	18fb      	adds	r3, r7, r3
   174ae:	1c22      	adds	r2, r4, #0
   174b0:	801a      	strh	r2, [r3, #0]
   174b2:	230c      	movs	r3, #12
   174b4:	18fb      	adds	r3, r7, r3
   174b6:	1c02      	adds	r2, r0, #0
   174b8:	801a      	strh	r2, [r3, #0]
   174ba:	1dbb      	adds	r3, r7, #6
   174bc:	1c0a      	adds	r2, r1, #0
   174be:	801a      	strh	r2, [r3, #0]
    int i = 0;
   174c0:	2300      	movs	r3, #0
   174c2:	617b      	str	r3, [r7, #20]
    while(str[i]){
   174c4:	e021      	b.n	1750a <drawString+0x6e>
        drawChar(x+5*i,y,str[i],fg,bg);
   174c6:	697b      	ldr	r3, [r7, #20]
   174c8:	b29b      	uxth	r3, r3
   174ca:	1c1a      	adds	r2, r3, #0
   174cc:	0092      	lsls	r2, r2, #2
   174ce:	18d3      	adds	r3, r2, r3
   174d0:	b29a      	uxth	r2, r3
   174d2:	230e      	movs	r3, #14
   174d4:	18fb      	adds	r3, r7, r3
   174d6:	881b      	ldrh	r3, [r3, #0]
   174d8:	18d3      	adds	r3, r2, r3
   174da:	b29b      	uxth	r3, r3
   174dc:	b218      	sxth	r0, r3
   174de:	697b      	ldr	r3, [r7, #20]
   174e0:	68ba      	ldr	r2, [r7, #8]
   174e2:	18d3      	adds	r3, r2, r3
   174e4:	781a      	ldrb	r2, [r3, #0]
   174e6:	1dbb      	adds	r3, r7, #6
   174e8:	2400      	movs	r4, #0
   174ea:	5f1c      	ldrsh	r4, [r3, r4]
   174ec:	230c      	movs	r3, #12
   174ee:	18fb      	adds	r3, r7, r3
   174f0:	2100      	movs	r1, #0
   174f2:	5e59      	ldrsh	r1, [r3, r1]
   174f4:	2328      	movs	r3, #40	; 0x28
   174f6:	18fb      	adds	r3, r7, r3
   174f8:	2500      	movs	r5, #0
   174fa:	5f5b      	ldrsh	r3, [r3, r5]
   174fc:	9300      	str	r3, [sp, #0]
   174fe:	0023      	movs	r3, r4
   17500:	4c07      	ldr	r4, [pc, #28]	; (17520 <drawString+0x84>)
   17502:	47a0      	blx	r4
        i++;
   17504:	697b      	ldr	r3, [r7, #20]
   17506:	3301      	adds	r3, #1
   17508:	617b      	str	r3, [r7, #20]
    while(str[i]){
   1750a:	697b      	ldr	r3, [r7, #20]
   1750c:	68ba      	ldr	r2, [r7, #8]
   1750e:	18d3      	adds	r3, r2, r3
   17510:	781b      	ldrb	r3, [r3, #0]
   17512:	2b00      	cmp	r3, #0
   17514:	d1d7      	bne.n	174c6 <drawString+0x2a>
    }
}
   17516:	46c0      	nop			; (mov r8, r8)
   17518:	46bd      	mov	sp, r7
   1751a:	b006      	add	sp, #24
   1751c:	bdb0      	pop	{r4, r5, r7, pc}
   1751e:	46c0      	nop			; (mov r8, r8)
   17520:	00017525 	.word	0x00017525

00017524 <drawChar>:


void drawChar(short x, short y, unsigned char c, short fg, short bg){
   17524:	b5b0      	push	{r4, r5, r7, lr}
   17526:	b086      	sub	sp, #24
   17528:	af00      	add	r7, sp, #0
   1752a:	0005      	movs	r5, r0
   1752c:	000c      	movs	r4, r1
   1752e:	0010      	movs	r0, r2
   17530:	0019      	movs	r1, r3
   17532:	1dbb      	adds	r3, r7, #6
   17534:	1c2a      	adds	r2, r5, #0
   17536:	801a      	strh	r2, [r3, #0]
   17538:	1d3b      	adds	r3, r7, #4
   1753a:	1c22      	adds	r2, r4, #0
   1753c:	801a      	strh	r2, [r3, #0]
   1753e:	1cfb      	adds	r3, r7, #3
   17540:	1c02      	adds	r2, r0, #0
   17542:	701a      	strb	r2, [r3, #0]
   17544:	003b      	movs	r3, r7
   17546:	1c0a      	adds	r2, r1, #0
   17548:	801a      	strh	r2, [r3, #0]
    char row = c - 0x20;
   1754a:	230f      	movs	r3, #15
   1754c:	18fb      	adds	r3, r7, r3
   1754e:	1cfa      	adds	r2, r7, #3
   17550:	7812      	ldrb	r2, [r2, #0]
   17552:	3a20      	subs	r2, #32
   17554:	701a      	strb	r2, [r3, #0]
    int i;
    if ((MAX_X-x>7)&&(MAX_Y-y>7)){
   17556:	1dbb      	adds	r3, r7, #6
   17558:	2200      	movs	r2, #0
   1755a:	5e9b      	ldrsh	r3, [r3, r2]
   1755c:	22a0      	movs	r2, #160	; 0xa0
   1755e:	1ad3      	subs	r3, r2, r3
   17560:	2b07      	cmp	r3, #7
   17562:	dd53      	ble.n	1760c <drawChar+0xe8>
   17564:	1d3b      	adds	r3, r7, #4
   17566:	2200      	movs	r2, #0
   17568:	5e9b      	ldrsh	r3, [r3, r2]
   1756a:	2280      	movs	r2, #128	; 0x80
   1756c:	1ad3      	subs	r3, r2, r3
   1756e:	2b07      	cmp	r3, #7
   17570:	dd4c      	ble.n	1760c <drawChar+0xe8>
        for(i=0;i<5;i++){
   17572:	2300      	movs	r3, #0
   17574:	617b      	str	r3, [r7, #20]
   17576:	e046      	b.n	17606 <drawChar+0xe2>
            char pixels = ASCII[row][i]; // so we have a list of pixies to go through
   17578:	230f      	movs	r3, #15
   1757a:	18fb      	adds	r3, r7, r3
   1757c:	781a      	ldrb	r2, [r3, #0]
   1757e:	230e      	movs	r3, #14
   17580:	18f9      	adds	r1, r7, r3
   17582:	4824      	ldr	r0, [pc, #144]	; (17614 <drawChar+0xf0>)
   17584:	0013      	movs	r3, r2
   17586:	009b      	lsls	r3, r3, #2
   17588:	189b      	adds	r3, r3, r2
   1758a:	18c2      	adds	r2, r0, r3
   1758c:	697b      	ldr	r3, [r7, #20]
   1758e:	18d3      	adds	r3, r2, r3
   17590:	781b      	ldrb	r3, [r3, #0]
   17592:	700b      	strb	r3, [r1, #0]
            int j;
            for(j=0;j<8;j++){
   17594:	2300      	movs	r3, #0
   17596:	613b      	str	r3, [r7, #16]
   17598:	e02f      	b.n	175fa <drawChar+0xd6>
                if ((pixels>>j)&1==1){
   1759a:	230e      	movs	r3, #14
   1759c:	18fb      	adds	r3, r7, r3
   1759e:	781a      	ldrb	r2, [r3, #0]
   175a0:	693b      	ldr	r3, [r7, #16]
   175a2:	411a      	asrs	r2, r3
   175a4:	0013      	movs	r3, r2
   175a6:	2201      	movs	r2, #1
   175a8:	4013      	ands	r3, r2
   175aa:	d011      	beq.n	175d0 <drawChar+0xac>
                    LCD_drawPixel(x+i,y+j,fg);
   175ac:	697b      	ldr	r3, [r7, #20]
   175ae:	b29a      	uxth	r2, r3
   175b0:	1dbb      	adds	r3, r7, #6
   175b2:	881b      	ldrh	r3, [r3, #0]
   175b4:	18d3      	adds	r3, r2, r3
   175b6:	b298      	uxth	r0, r3
   175b8:	693b      	ldr	r3, [r7, #16]
   175ba:	b29a      	uxth	r2, r3
   175bc:	1d3b      	adds	r3, r7, #4
   175be:	881b      	ldrh	r3, [r3, #0]
   175c0:	18d3      	adds	r3, r2, r3
   175c2:	b299      	uxth	r1, r3
   175c4:	003b      	movs	r3, r7
   175c6:	881b      	ldrh	r3, [r3, #0]
   175c8:	001a      	movs	r2, r3
   175ca:	4b13      	ldr	r3, [pc, #76]	; (17618 <drawChar+0xf4>)
   175cc:	4798      	blx	r3
   175ce:	e011      	b.n	175f4 <drawChar+0xd0>
                }
                else {
                    LCD_drawPixel(x+i,y+j,bg);
   175d0:	697b      	ldr	r3, [r7, #20]
   175d2:	b29a      	uxth	r2, r3
   175d4:	1dbb      	adds	r3, r7, #6
   175d6:	881b      	ldrh	r3, [r3, #0]
   175d8:	18d3      	adds	r3, r2, r3
   175da:	b298      	uxth	r0, r3
   175dc:	693b      	ldr	r3, [r7, #16]
   175de:	b29a      	uxth	r2, r3
   175e0:	1d3b      	adds	r3, r7, #4
   175e2:	881b      	ldrh	r3, [r3, #0]
   175e4:	18d3      	adds	r3, r2, r3
   175e6:	b29b      	uxth	r3, r3
   175e8:	2228      	movs	r2, #40	; 0x28
   175ea:	18ba      	adds	r2, r7, r2
   175ec:	8812      	ldrh	r2, [r2, #0]
   175ee:	0019      	movs	r1, r3
   175f0:	4b09      	ldr	r3, [pc, #36]	; (17618 <drawChar+0xf4>)
   175f2:	4798      	blx	r3
            for(j=0;j<8;j++){
   175f4:	693b      	ldr	r3, [r7, #16]
   175f6:	3301      	adds	r3, #1
   175f8:	613b      	str	r3, [r7, #16]
   175fa:	693b      	ldr	r3, [r7, #16]
   175fc:	2b07      	cmp	r3, #7
   175fe:	ddcc      	ble.n	1759a <drawChar+0x76>
        for(i=0;i<5;i++){
   17600:	697b      	ldr	r3, [r7, #20]
   17602:	3301      	adds	r3, #1
   17604:	617b      	str	r3, [r7, #20]
   17606:	697b      	ldr	r3, [r7, #20]
   17608:	2b04      	cmp	r3, #4
   1760a:	ddb5      	ble.n	17578 <drawChar+0x54>
                }
            }
        }
    }
}
   1760c:	46c0      	nop			; (mov r8, r8)
   1760e:	46bd      	mov	sp, r7
   17610:	b006      	add	sp, #24
   17612:	bdb0      	pop	{r4, r5, r7, pc}
   17614:	00039354 	.word	0x00039354
   17618:	00017acd 	.word	0x00017acd

0001761c <configure_spi_master>:




void configure_spi_master(void)
{
   1761c:	b580      	push	{r7, lr}
   1761e:	b090      	sub	sp, #64	; 0x40
   17620:	af00      	add	r7, sp, #0
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	/* Configure and initialize software device instance of peripheral slave */
	spi_slave_inst_get_config_defaults(&slave_dev_config);
   17622:	1d3b      	adds	r3, r7, #4
   17624:	0018      	movs	r0, r3
   17626:	4b1c      	ldr	r3, [pc, #112]	; (17698 <configure_spi_master+0x7c>)
   17628:	4798      	blx	r3
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
   1762a:	1d3b      	adds	r3, r7, #4
   1762c:	2205      	movs	r2, #5
   1762e:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave, &slave_dev_config);
   17630:	1d3a      	adds	r2, r7, #4
   17632:	4b1a      	ldr	r3, [pc, #104]	; (1769c <configure_spi_master+0x80>)
   17634:	0011      	movs	r1, r2
   17636:	0018      	movs	r0, r3
   17638:	4b19      	ldr	r3, [pc, #100]	; (176a0 <configure_spi_master+0x84>)
   1763a:	4798      	blx	r3
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
   1763c:	2308      	movs	r3, #8
   1763e:	18fb      	adds	r3, r7, r3
   17640:	0018      	movs	r0, r3
   17642:	4b18      	ldr	r3, [pc, #96]	; (176a4 <configure_spi_master+0x88>)
   17644:	4798      	blx	r3
	/*config_spi_master.transfer_mode = SPI_TRANSFER_MODE_1;*/
	config_spi_master.mux_setting = CONF_MASTER_MUX_SETTING;
   17646:	2308      	movs	r3, #8
   17648:	18fb      	adds	r3, r7, r3
   1764a:	2200      	movs	r2, #0
   1764c:	60da      	str	r2, [r3, #12]
	config_spi_master.pinmux_pad0 = CONF_MASTER_PINMUX_PAD0;
   1764e:	2308      	movs	r3, #8
   17650:	18fb      	adds	r3, r7, r3
   17652:	4a15      	ldr	r2, [pc, #84]	; (176a8 <configure_spi_master+0x8c>)
   17654:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad1 = CONF_MASTER_PINMUX_PAD1;
   17656:	2308      	movs	r3, #8
   17658:	18fb      	adds	r3, r7, r3
   1765a:	4a14      	ldr	r2, [pc, #80]	; (176ac <configure_spi_master+0x90>)
   1765c:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = CONF_MASTER_PINMUX_PAD2;
   1765e:	2308      	movs	r3, #8
   17660:	18fb      	adds	r3, r7, r3
   17662:	2201      	movs	r2, #1
   17664:	4252      	negs	r2, r2
   17666:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = CONF_MASTER_PINMUX_PAD3;
   17668:	2308      	movs	r3, #8
   1766a:	18fb      	adds	r3, r7, r3
   1766c:	2201      	movs	r2, #1
   1766e:	4252      	negs	r2, r2
   17670:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate =  12000000; //12MHz  = 400ns per signal
   17672:	2308      	movs	r3, #8
   17674:	18fb      	adds	r3, r7, r3
   17676:	4a0e      	ldr	r2, [pc, #56]	; (176b0 <configure_spi_master+0x94>)
   17678:	619a      	str	r2, [r3, #24]
	spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);
   1767a:	2308      	movs	r3, #8
   1767c:	18fa      	adds	r2, r7, r3
   1767e:	490d      	ldr	r1, [pc, #52]	; (176b4 <configure_spi_master+0x98>)
   17680:	4b0d      	ldr	r3, [pc, #52]	; (176b8 <configure_spi_master+0x9c>)
   17682:	0018      	movs	r0, r3
   17684:	4b0d      	ldr	r3, [pc, #52]	; (176bc <configure_spi_master+0xa0>)
   17686:	4798      	blx	r3
	spi_enable(&spi_master_instance);
   17688:	4b0b      	ldr	r3, [pc, #44]	; (176b8 <configure_spi_master+0x9c>)
   1768a:	0018      	movs	r0, r3
   1768c:	4b0c      	ldr	r3, [pc, #48]	; (176c0 <configure_spi_master+0xa4>)
   1768e:	4798      	blx	r3
}
   17690:	46c0      	nop			; (mov r8, r8)
   17692:	46bd      	mov	sp, r7
   17694:	b010      	add	sp, #64	; 0x40
   17696:	bd80      	pop	{r7, pc}
   17698:	0001731d 	.word	0x0001731d
   1769c:	2000471c 	.word	0x2000471c
   176a0:	00017341 	.word	0x00017341
   176a4:	00017299 	.word	0x00017299
   176a8:	00220003 	.word	0x00220003
   176ac:	00230003 	.word	0x00230003
   176b0:	00b71b00 	.word	0x00b71b00
   176b4:	42001c00 	.word	0x42001c00
   176b8:	20004710 	.word	0x20004710
   176bc:	0002a4b1 	.word	0x0002a4b1
   176c0:	000173a5 	.word	0x000173a5

000176c4 <spi_io>:



void spi_io(unsigned char o) {
   176c4:	b580      	push	{r7, lr}
   176c6:	b082      	sub	sp, #8
   176c8:	af00      	add	r7, sp, #0
   176ca:	0002      	movs	r2, r0
   176cc:	1dfb      	adds	r3, r7, #7
   176ce:	701a      	strb	r2, [r3, #0]
	spi_write(&spi_master_instance,o);
   176d0:	1dfb      	adds	r3, r7, #7
   176d2:	781b      	ldrb	r3, [r3, #0]
   176d4:	b29a      	uxth	r2, r3
   176d6:	4b04      	ldr	r3, [pc, #16]	; (176e8 <spi_io+0x24>)
   176d8:	0011      	movs	r1, r2
   176da:	0018      	movs	r0, r3
   176dc:	4b03      	ldr	r3, [pc, #12]	; (176ec <spi_io+0x28>)
   176de:	4798      	blx	r3
}
   176e0:	46c0      	nop			; (mov r8, r8)
   176e2:	46bd      	mov	sp, r7
   176e4:	b002      	add	sp, #8
   176e6:	bd80      	pop	{r7, pc}
   176e8:	20004710 	.word	0x20004710
   176ec:	00017401 	.word	0x00017401

000176f0 <LCD_command>:

void LCD_command(unsigned char com) {
   176f0:	b580      	push	{r7, lr}
   176f2:	b082      	sub	sp, #8
   176f4:	af00      	add	r7, sp, #0
   176f6:	0002      	movs	r2, r0
   176f8:	1dfb      	adds	r3, r7, #7
   176fa:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(DAT_PIN,false);
   176fc:	2100      	movs	r1, #0
   176fe:	2014      	movs	r0, #20
   17700:	4b0b      	ldr	r3, [pc, #44]	; (17730 <LCD_command+0x40>)
   17702:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, true);
   17704:	490b      	ldr	r1, [pc, #44]	; (17734 <LCD_command+0x44>)
   17706:	4b0c      	ldr	r3, [pc, #48]	; (17738 <LCD_command+0x48>)
   17708:	2201      	movs	r2, #1
   1770a:	0018      	movs	r0, r3
   1770c:	4b0b      	ldr	r3, [pc, #44]	; (1773c <LCD_command+0x4c>)
   1770e:	4798      	blx	r3
	spi_io(com);
   17710:	1dfb      	adds	r3, r7, #7
   17712:	781b      	ldrb	r3, [r3, #0]
   17714:	0018      	movs	r0, r3
   17716:	4b0a      	ldr	r3, [pc, #40]	; (17740 <LCD_command+0x50>)
   17718:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, false);
   1771a:	4906      	ldr	r1, [pc, #24]	; (17734 <LCD_command+0x44>)
   1771c:	4b06      	ldr	r3, [pc, #24]	; (17738 <LCD_command+0x48>)
   1771e:	2200      	movs	r2, #0
   17720:	0018      	movs	r0, r3
   17722:	4b06      	ldr	r3, [pc, #24]	; (1773c <LCD_command+0x4c>)
   17724:	4798      	blx	r3
}
   17726:	46c0      	nop			; (mov r8, r8)
   17728:	46bd      	mov	sp, r7
   1772a:	b002      	add	sp, #8
   1772c:	bd80      	pop	{r7, pc}
   1772e:	46c0      	nop			; (mov r8, r8)
   17730:	00017225 	.word	0x00017225
   17734:	2000471c 	.word	0x2000471c
   17738:	20004710 	.word	0x20004710
   1773c:	0002a765 	.word	0x0002a765
   17740:	000176c5 	.word	0x000176c5

00017744 <LCD_data>:

void LCD_data(unsigned char dat) {
   17744:	b580      	push	{r7, lr}
   17746:	b082      	sub	sp, #8
   17748:	af00      	add	r7, sp, #0
   1774a:	0002      	movs	r2, r0
   1774c:	1dfb      	adds	r3, r7, #7
   1774e:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(DAT_PIN,true);
   17750:	2101      	movs	r1, #1
   17752:	2014      	movs	r0, #20
   17754:	4b0b      	ldr	r3, [pc, #44]	; (17784 <LCD_data+0x40>)
   17756:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, true);
   17758:	490b      	ldr	r1, [pc, #44]	; (17788 <LCD_data+0x44>)
   1775a:	4b0c      	ldr	r3, [pc, #48]	; (1778c <LCD_data+0x48>)
   1775c:	2201      	movs	r2, #1
   1775e:	0018      	movs	r0, r3
   17760:	4b0b      	ldr	r3, [pc, #44]	; (17790 <LCD_data+0x4c>)
   17762:	4798      	blx	r3
	spi_io(dat);
   17764:	1dfb      	adds	r3, r7, #7
   17766:	781b      	ldrb	r3, [r3, #0]
   17768:	0018      	movs	r0, r3
   1776a:	4b0a      	ldr	r3, [pc, #40]	; (17794 <LCD_data+0x50>)
   1776c:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, false);
   1776e:	4906      	ldr	r1, [pc, #24]	; (17788 <LCD_data+0x44>)
   17770:	4b06      	ldr	r3, [pc, #24]	; (1778c <LCD_data+0x48>)
   17772:	2200      	movs	r2, #0
   17774:	0018      	movs	r0, r3
   17776:	4b06      	ldr	r3, [pc, #24]	; (17790 <LCD_data+0x4c>)
   17778:	4798      	blx	r3
}
   1777a:	46c0      	nop			; (mov r8, r8)
   1777c:	46bd      	mov	sp, r7
   1777e:	b002      	add	sp, #8
   17780:	bd80      	pop	{r7, pc}
   17782:	46c0      	nop			; (mov r8, r8)
   17784:	00017225 	.word	0x00017225
   17788:	2000471c 	.word	0x2000471c
   1778c:	20004710 	.word	0x20004710
   17790:	0002a765 	.word	0x0002a765
   17794:	000176c5 	.word	0x000176c5

00017798 <LCD_data16>:

void LCD_data16(unsigned short dat) {
   17798:	b580      	push	{r7, lr}
   1779a:	b082      	sub	sp, #8
   1779c:	af00      	add	r7, sp, #0
   1779e:	0002      	movs	r2, r0
   177a0:	1dbb      	adds	r3, r7, #6
   177a2:	801a      	strh	r2, [r3, #0]
	port_pin_set_output_level(DAT_PIN,true);
   177a4:	2101      	movs	r1, #1
   177a6:	2014      	movs	r0, #20
   177a8:	4b0f      	ldr	r3, [pc, #60]	; (177e8 <LCD_data16+0x50>)
   177aa:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, true);
   177ac:	490f      	ldr	r1, [pc, #60]	; (177ec <LCD_data16+0x54>)
   177ae:	4b10      	ldr	r3, [pc, #64]	; (177f0 <LCD_data16+0x58>)
   177b0:	2201      	movs	r2, #1
   177b2:	0018      	movs	r0, r3
   177b4:	4b0f      	ldr	r3, [pc, #60]	; (177f4 <LCD_data16+0x5c>)
   177b6:	4798      	blx	r3
	spi_io(dat>>8);
   177b8:	1dbb      	adds	r3, r7, #6
   177ba:	881b      	ldrh	r3, [r3, #0]
   177bc:	0a1b      	lsrs	r3, r3, #8
   177be:	b29b      	uxth	r3, r3
   177c0:	b2db      	uxtb	r3, r3
   177c2:	0018      	movs	r0, r3
   177c4:	4b0c      	ldr	r3, [pc, #48]	; (177f8 <LCD_data16+0x60>)
   177c6:	4798      	blx	r3
	spi_io(dat);
   177c8:	1dbb      	adds	r3, r7, #6
   177ca:	881b      	ldrh	r3, [r3, #0]
   177cc:	b2db      	uxtb	r3, r3
   177ce:	0018      	movs	r0, r3
   177d0:	4b09      	ldr	r3, [pc, #36]	; (177f8 <LCD_data16+0x60>)
   177d2:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, false);
   177d4:	4905      	ldr	r1, [pc, #20]	; (177ec <LCD_data16+0x54>)
   177d6:	4b06      	ldr	r3, [pc, #24]	; (177f0 <LCD_data16+0x58>)
   177d8:	2200      	movs	r2, #0
   177da:	0018      	movs	r0, r3
   177dc:	4b05      	ldr	r3, [pc, #20]	; (177f4 <LCD_data16+0x5c>)
   177de:	4798      	blx	r3
}
   177e0:	46c0      	nop			; (mov r8, r8)
   177e2:	46bd      	mov	sp, r7
   177e4:	b002      	add	sp, #8
   177e6:	bd80      	pop	{r7, pc}
   177e8:	00017225 	.word	0x00017225
   177ec:	2000471c 	.word	0x2000471c
   177f0:	20004710 	.word	0x20004710
   177f4:	0002a765 	.word	0x0002a765
   177f8:	000176c5 	.word	0x000176c5

000177fc <LCD_init>:




void LCD_init() {
   177fc:	b580      	push	{r7, lr}
   177fe:	af00      	add	r7, sp, #0
	configure_spi_master();
   17800:	4baa      	ldr	r3, [pc, #680]	; (17aac <LCD_init+0x2b0>)
   17802:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, false);
   17804:	49aa      	ldr	r1, [pc, #680]	; (17ab0 <LCD_init+0x2b4>)
   17806:	4bab      	ldr	r3, [pc, #684]	; (17ab4 <LCD_init+0x2b8>)
   17808:	2200      	movs	r2, #0
   1780a:	0018      	movs	r0, r3
   1780c:	4baa      	ldr	r3, [pc, #680]	; (17ab8 <LCD_init+0x2bc>)
   1780e:	4798      	blx	r3
	delay_ms(10000);
   17810:	4baa      	ldr	r3, [pc, #680]	; (17abc <LCD_init+0x2c0>)
   17812:	0018      	movs	r0, r3
   17814:	4baa      	ldr	r3, [pc, #680]	; (17ac0 <LCD_init+0x2c4>)
   17816:	4798      	blx	r3
  LCD_command(ST7735_SWRESET);//software reset
   17818:	2001      	movs	r0, #1
   1781a:	4baa      	ldr	r3, [pc, #680]	; (17ac4 <LCD_init+0x2c8>)
   1781c:	4798      	blx	r3
  delay_ms(50);
   1781e:	2032      	movs	r0, #50	; 0x32
   17820:	4ba7      	ldr	r3, [pc, #668]	; (17ac0 <LCD_init+0x2c4>)
   17822:	4798      	blx	r3
	LCD_command(ST7735_SLPOUT);//exit sleep
   17824:	2011      	movs	r0, #17
   17826:	4ba7      	ldr	r3, [pc, #668]	; (17ac4 <LCD_init+0x2c8>)
   17828:	4798      	blx	r3
	delay_ms(5);
   1782a:	2005      	movs	r0, #5
   1782c:	4ba4      	ldr	r3, [pc, #656]	; (17ac0 <LCD_init+0x2c4>)
   1782e:	4798      	blx	r3
	LCD_command(ST7735_FRMCTR1);//Frame Rate Control (In normal mode/Full colors)
   17830:	20b1      	movs	r0, #177	; 0xb1
   17832:	4ba4      	ldr	r3, [pc, #656]	; (17ac4 <LCD_init+0x2c8>)
   17834:	4798      	blx	r3
	LCD_data(0x01);
   17836:	2001      	movs	r0, #1
   17838:	4ba3      	ldr	r3, [pc, #652]	; (17ac8 <LCD_init+0x2cc>)
   1783a:	4798      	blx	r3
	LCD_data(0x2C);
   1783c:	202c      	movs	r0, #44	; 0x2c
   1783e:	4ba2      	ldr	r3, [pc, #648]	; (17ac8 <LCD_init+0x2cc>)
   17840:	4798      	blx	r3
	LCD_data(0x2D);
   17842:	202d      	movs	r0, #45	; 0x2d
   17844:	4ba0      	ldr	r3, [pc, #640]	; (17ac8 <LCD_init+0x2cc>)
   17846:	4798      	blx	r3
	delay_ms(1);
   17848:	2001      	movs	r0, #1
   1784a:	4b9d      	ldr	r3, [pc, #628]	; (17ac0 <LCD_init+0x2c4>)
   1784c:	4798      	blx	r3
	LCD_command(ST7735_FRMCTR2);//Frame Rate Control (In normal mode/Full colors)
   1784e:	20b2      	movs	r0, #178	; 0xb2
   17850:	4b9c      	ldr	r3, [pc, #624]	; (17ac4 <LCD_init+0x2c8>)
   17852:	4798      	blx	r3
	LCD_data(0x01);
   17854:	2001      	movs	r0, #1
   17856:	4b9c      	ldr	r3, [pc, #624]	; (17ac8 <LCD_init+0x2cc>)
   17858:	4798      	blx	r3
	LCD_data(0x2C);
   1785a:	202c      	movs	r0, #44	; 0x2c
   1785c:	4b9a      	ldr	r3, [pc, #616]	; (17ac8 <LCD_init+0x2cc>)
   1785e:	4798      	blx	r3
	LCD_data(0x2D);
   17860:	202d      	movs	r0, #45	; 0x2d
   17862:	4b99      	ldr	r3, [pc, #612]	; (17ac8 <LCD_init+0x2cc>)
   17864:	4798      	blx	r3
	delay_ms(1);
   17866:	2001      	movs	r0, #1
   17868:	4b95      	ldr	r3, [pc, #596]	; (17ac0 <LCD_init+0x2c4>)
   1786a:	4798      	blx	r3
	LCD_command(ST7735_FRMCTR3);//Frame Rate Control (In normal mode/Full colors)
   1786c:	20b3      	movs	r0, #179	; 0xb3
   1786e:	4b95      	ldr	r3, [pc, #596]	; (17ac4 <LCD_init+0x2c8>)
   17870:	4798      	blx	r3
	LCD_data(0x01);
   17872:	2001      	movs	r0, #1
   17874:	4b94      	ldr	r3, [pc, #592]	; (17ac8 <LCD_init+0x2cc>)
   17876:	4798      	blx	r3
	LCD_data(0x2C);
   17878:	202c      	movs	r0, #44	; 0x2c
   1787a:	4b93      	ldr	r3, [pc, #588]	; (17ac8 <LCD_init+0x2cc>)
   1787c:	4798      	blx	r3
	LCD_data(0x2D);
   1787e:	202d      	movs	r0, #45	; 0x2d
   17880:	4b91      	ldr	r3, [pc, #580]	; (17ac8 <LCD_init+0x2cc>)
   17882:	4798      	blx	r3
	LCD_data(0x01);
   17884:	2001      	movs	r0, #1
   17886:	4b90      	ldr	r3, [pc, #576]	; (17ac8 <LCD_init+0x2cc>)
   17888:	4798      	blx	r3
	LCD_data(0x2C);
   1788a:	202c      	movs	r0, #44	; 0x2c
   1788c:	4b8e      	ldr	r3, [pc, #568]	; (17ac8 <LCD_init+0x2cc>)
   1788e:	4798      	blx	r3
	LCD_data(0x2D);
   17890:	202d      	movs	r0, #45	; 0x2d
   17892:	4b8d      	ldr	r3, [pc, #564]	; (17ac8 <LCD_init+0x2cc>)
   17894:	4798      	blx	r3
	delay_ms(1);
   17896:	2001      	movs	r0, #1
   17898:	4b89      	ldr	r3, [pc, #548]	; (17ac0 <LCD_init+0x2c4>)
   1789a:	4798      	blx	r3
	LCD_command(ST7735_INVCTR);//display inversion
   1789c:	20b4      	movs	r0, #180	; 0xb4
   1789e:	4b89      	ldr	r3, [pc, #548]	; (17ac4 <LCD_init+0x2c8>)
   178a0:	4798      	blx	r3
	LCD_data(0x07);
   178a2:	2007      	movs	r0, #7
   178a4:	4b88      	ldr	r3, [pc, #544]	; (17ac8 <LCD_init+0x2cc>)
   178a6:	4798      	blx	r3
	delay_ms(1);
   178a8:	2001      	movs	r0, #1
   178aa:	4b85      	ldr	r3, [pc, #532]	; (17ac0 <LCD_init+0x2c4>)
   178ac:	4798      	blx	r3
	LCD_command(ST7735_PWCTR1);
   178ae:	20c0      	movs	r0, #192	; 0xc0
   178b0:	4b84      	ldr	r3, [pc, #528]	; (17ac4 <LCD_init+0x2c8>)
   178b2:	4798      	blx	r3
	LCD_data(0x0A);//4.30 - 0x0A
   178b4:	200a      	movs	r0, #10
   178b6:	4b84      	ldr	r3, [pc, #528]	; (17ac8 <LCD_init+0x2cc>)
   178b8:	4798      	blx	r3
	LCD_data(0x02);//0x05
   178ba:	2002      	movs	r0, #2
   178bc:	4b82      	ldr	r3, [pc, #520]	; (17ac8 <LCD_init+0x2cc>)
   178be:	4798      	blx	r3
	LCD_data(0x84);//added auto mode
   178c0:	2084      	movs	r0, #132	; 0x84
   178c2:	4b81      	ldr	r3, [pc, #516]	; (17ac8 <LCD_init+0x2cc>)
   178c4:	4798      	blx	r3
	delay_ms(1);
   178c6:	2001      	movs	r0, #1
   178c8:	4b7d      	ldr	r3, [pc, #500]	; (17ac0 <LCD_init+0x2c4>)
   178ca:	4798      	blx	r3
	LCD_command(ST7735_PWCTR2);
   178cc:	20c1      	movs	r0, #193	; 0xc1
   178ce:	4b7d      	ldr	r3, [pc, #500]	; (17ac4 <LCD_init+0x2c8>)
   178d0:	4798      	blx	r3
	LCD_data(0xC5);
   178d2:	20c5      	movs	r0, #197	; 0xc5
   178d4:	4b7c      	ldr	r3, [pc, #496]	; (17ac8 <LCD_init+0x2cc>)
   178d6:	4798      	blx	r3
	delay_ms(1);
   178d8:	2001      	movs	r0, #1
   178da:	4b79      	ldr	r3, [pc, #484]	; (17ac0 <LCD_init+0x2c4>)
   178dc:	4798      	blx	r3
	LCD_command( ST7735_PWCTR3);
   178de:	20c2      	movs	r0, #194	; 0xc2
   178e0:	4b78      	ldr	r3, [pc, #480]	; (17ac4 <LCD_init+0x2c8>)
   178e2:	4798      	blx	r3
	LCD_data(0x0A);
   178e4:	200a      	movs	r0, #10
   178e6:	4b78      	ldr	r3, [pc, #480]	; (17ac8 <LCD_init+0x2cc>)
   178e8:	4798      	blx	r3
	LCD_data(0x00);
   178ea:	2000      	movs	r0, #0
   178ec:	4b76      	ldr	r3, [pc, #472]	; (17ac8 <LCD_init+0x2cc>)
   178ee:	4798      	blx	r3
	delay_ms(1);
   178f0:	2001      	movs	r0, #1
   178f2:	4b73      	ldr	r3, [pc, #460]	; (17ac0 <LCD_init+0x2c4>)
   178f4:	4798      	blx	r3
	LCD_command( ST7735_PWCTR4);
   178f6:	20c3      	movs	r0, #195	; 0xc3
   178f8:	4b72      	ldr	r3, [pc, #456]	; (17ac4 <LCD_init+0x2c8>)
   178fa:	4798      	blx	r3
	LCD_data(0x8A);
   178fc:	208a      	movs	r0, #138	; 0x8a
   178fe:	4b72      	ldr	r3, [pc, #456]	; (17ac8 <LCD_init+0x2cc>)
   17900:	4798      	blx	r3
	LCD_data(0x2A);
   17902:	202a      	movs	r0, #42	; 0x2a
   17904:	4b70      	ldr	r3, [pc, #448]	; (17ac8 <LCD_init+0x2cc>)
   17906:	4798      	blx	r3
	delay_ms(1);
   17908:	2001      	movs	r0, #1
   1790a:	4b6d      	ldr	r3, [pc, #436]	; (17ac0 <LCD_init+0x2c4>)
   1790c:	4798      	blx	r3
	LCD_command( ST7735_PWCTR5);
   1790e:	20c4      	movs	r0, #196	; 0xc4
   17910:	4b6c      	ldr	r3, [pc, #432]	; (17ac4 <LCD_init+0x2c8>)
   17912:	4798      	blx	r3
	LCD_data(0x8A);
   17914:	208a      	movs	r0, #138	; 0x8a
   17916:	4b6c      	ldr	r3, [pc, #432]	; (17ac8 <LCD_init+0x2cc>)
   17918:	4798      	blx	r3
	LCD_data(0xEE);
   1791a:	20ee      	movs	r0, #238	; 0xee
   1791c:	4b6a      	ldr	r3, [pc, #424]	; (17ac8 <LCD_init+0x2cc>)
   1791e:	4798      	blx	r3
	delay_ms(1);
   17920:	2001      	movs	r0, #1
   17922:	4b67      	ldr	r3, [pc, #412]	; (17ac0 <LCD_init+0x2c4>)
   17924:	4798      	blx	r3
	LCD_command(ST7735_VMCTR1);
   17926:	20c5      	movs	r0, #197	; 0xc5
   17928:	4b66      	ldr	r3, [pc, #408]	; (17ac4 <LCD_init+0x2c8>)
   1792a:	4798      	blx	r3
	LCD_data(0x0E);
   1792c:	200e      	movs	r0, #14
   1792e:	4b66      	ldr	r3, [pc, #408]	; (17ac8 <LCD_init+0x2cc>)
   17930:	4798      	blx	r3
	delay_ms(1);
   17932:	2001      	movs	r0, #1
   17934:	4b62      	ldr	r3, [pc, #392]	; (17ac0 <LCD_init+0x2c4>)
   17936:	4798      	blx	r3
	LCD_command(ST7735_INVOFF);
   17938:	2020      	movs	r0, #32
   1793a:	4b62      	ldr	r3, [pc, #392]	; (17ac4 <LCD_init+0x2c8>)
   1793c:	4798      	blx	r3
	LCD_command(ST7735_MADCTL);
   1793e:	2036      	movs	r0, #54	; 0x36
   17940:	4b60      	ldr	r3, [pc, #384]	; (17ac4 <LCD_init+0x2c8>)
   17942:	4798      	blx	r3
	LCD_data(0xC8);
   17944:	20c8      	movs	r0, #200	; 0xc8
   17946:	4b60      	ldr	r3, [pc, #384]	; (17ac8 <LCD_init+0x2cc>)
   17948:	4798      	blx	r3
	delay_ms(1);
   1794a:	2001      	movs	r0, #1
   1794c:	4b5c      	ldr	r3, [pc, #368]	; (17ac0 <LCD_init+0x2c4>)
   1794e:	4798      	blx	r3
	LCD_command(ST7735_COLMOD);
   17950:	203a      	movs	r0, #58	; 0x3a
   17952:	4b5c      	ldr	r3, [pc, #368]	; (17ac4 <LCD_init+0x2c8>)
   17954:	4798      	blx	r3
	LCD_data(0x05);
   17956:	2005      	movs	r0, #5
   17958:	4b5b      	ldr	r3, [pc, #364]	; (17ac8 <LCD_init+0x2cc>)
   1795a:	4798      	blx	r3
	delay_ms(1);
   1795c:	2001      	movs	r0, #1
   1795e:	4b58      	ldr	r3, [pc, #352]	; (17ac0 <LCD_init+0x2c4>)
   17960:	4798      	blx	r3
	LCD_command(ST7735_CASET);
   17962:	202a      	movs	r0, #42	; 0x2a
   17964:	4b57      	ldr	r3, [pc, #348]	; (17ac4 <LCD_init+0x2c8>)
   17966:	4798      	blx	r3
	LCD_data(0x00);
   17968:	2000      	movs	r0, #0
   1796a:	4b57      	ldr	r3, [pc, #348]	; (17ac8 <LCD_init+0x2cc>)
   1796c:	4798      	blx	r3
	LCD_data(0x00);
   1796e:	2000      	movs	r0, #0
   17970:	4b55      	ldr	r3, [pc, #340]	; (17ac8 <LCD_init+0x2cc>)
   17972:	4798      	blx	r3
	LCD_data(0x00);
   17974:	2000      	movs	r0, #0
   17976:	4b54      	ldr	r3, [pc, #336]	; (17ac8 <LCD_init+0x2cc>)
   17978:	4798      	blx	r3
	LCD_data(0x7F);
   1797a:	207f      	movs	r0, #127	; 0x7f
   1797c:	4b52      	ldr	r3, [pc, #328]	; (17ac8 <LCD_init+0x2cc>)
   1797e:	4798      	blx	r3
	delay_ms(1);
   17980:	2001      	movs	r0, #1
   17982:	4b4f      	ldr	r3, [pc, #316]	; (17ac0 <LCD_init+0x2c4>)
   17984:	4798      	blx	r3
	LCD_command(ST7735_RASET);
   17986:	202b      	movs	r0, #43	; 0x2b
   17988:	4b4e      	ldr	r3, [pc, #312]	; (17ac4 <LCD_init+0x2c8>)
   1798a:	4798      	blx	r3
	LCD_data(0x00);
   1798c:	2000      	movs	r0, #0
   1798e:	4b4e      	ldr	r3, [pc, #312]	; (17ac8 <LCD_init+0x2cc>)
   17990:	4798      	blx	r3
	LCD_data(0x00);
   17992:	2000      	movs	r0, #0
   17994:	4b4c      	ldr	r3, [pc, #304]	; (17ac8 <LCD_init+0x2cc>)
   17996:	4798      	blx	r3
	LCD_data(0x00);
   17998:	2000      	movs	r0, #0
   1799a:	4b4b      	ldr	r3, [pc, #300]	; (17ac8 <LCD_init+0x2cc>)
   1799c:	4798      	blx	r3
	LCD_data(0x9F);
   1799e:	209f      	movs	r0, #159	; 0x9f
   179a0:	4b49      	ldr	r3, [pc, #292]	; (17ac8 <LCD_init+0x2cc>)
   179a2:	4798      	blx	r3
	delay_ms(1);
   179a4:	2001      	movs	r0, #1
   179a6:	4b46      	ldr	r3, [pc, #280]	; (17ac0 <LCD_init+0x2c4>)
   179a8:	4798      	blx	r3
	LCD_command(ST7735_GMCTRP1);
   179aa:	20e0      	movs	r0, #224	; 0xe0
   179ac:	4b45      	ldr	r3, [pc, #276]	; (17ac4 <LCD_init+0x2c8>)
   179ae:	4798      	blx	r3
	LCD_data(0x02);
   179b0:	2002      	movs	r0, #2
   179b2:	4b45      	ldr	r3, [pc, #276]	; (17ac8 <LCD_init+0x2cc>)
   179b4:	4798      	blx	r3
	LCD_data(0x1C);
   179b6:	201c      	movs	r0, #28
   179b8:	4b43      	ldr	r3, [pc, #268]	; (17ac8 <LCD_init+0x2cc>)
   179ba:	4798      	blx	r3
	LCD_data(0x07);
   179bc:	2007      	movs	r0, #7
   179be:	4b42      	ldr	r3, [pc, #264]	; (17ac8 <LCD_init+0x2cc>)
   179c0:	4798      	blx	r3
	LCD_data(0x12);
   179c2:	2012      	movs	r0, #18
   179c4:	4b40      	ldr	r3, [pc, #256]	; (17ac8 <LCD_init+0x2cc>)
   179c6:	4798      	blx	r3
	LCD_data(0x37);
   179c8:	2037      	movs	r0, #55	; 0x37
   179ca:	4b3f      	ldr	r3, [pc, #252]	; (17ac8 <LCD_init+0x2cc>)
   179cc:	4798      	blx	r3
	LCD_data(0x32);
   179ce:	2032      	movs	r0, #50	; 0x32
   179d0:	4b3d      	ldr	r3, [pc, #244]	; (17ac8 <LCD_init+0x2cc>)
   179d2:	4798      	blx	r3
	LCD_data(0x29);
   179d4:	2029      	movs	r0, #41	; 0x29
   179d6:	4b3c      	ldr	r3, [pc, #240]	; (17ac8 <LCD_init+0x2cc>)
   179d8:	4798      	blx	r3
	LCD_data(0x2D);
   179da:	202d      	movs	r0, #45	; 0x2d
   179dc:	4b3a      	ldr	r3, [pc, #232]	; (17ac8 <LCD_init+0x2cc>)
   179de:	4798      	blx	r3
	LCD_data(0x29);
   179e0:	2029      	movs	r0, #41	; 0x29
   179e2:	4b39      	ldr	r3, [pc, #228]	; (17ac8 <LCD_init+0x2cc>)
   179e4:	4798      	blx	r3
	LCD_data(0x25);
   179e6:	2025      	movs	r0, #37	; 0x25
   179e8:	4b37      	ldr	r3, [pc, #220]	; (17ac8 <LCD_init+0x2cc>)
   179ea:	4798      	blx	r3
	LCD_data(0x2B);
   179ec:	202b      	movs	r0, #43	; 0x2b
   179ee:	4b36      	ldr	r3, [pc, #216]	; (17ac8 <LCD_init+0x2cc>)
   179f0:	4798      	blx	r3
	LCD_data(0x39);
   179f2:	2039      	movs	r0, #57	; 0x39
   179f4:	4b34      	ldr	r3, [pc, #208]	; (17ac8 <LCD_init+0x2cc>)
   179f6:	4798      	blx	r3
	LCD_data(0x00);
   179f8:	2000      	movs	r0, #0
   179fa:	4b33      	ldr	r3, [pc, #204]	; (17ac8 <LCD_init+0x2cc>)
   179fc:	4798      	blx	r3
	LCD_data(0x01);
   179fe:	2001      	movs	r0, #1
   17a00:	4b31      	ldr	r3, [pc, #196]	; (17ac8 <LCD_init+0x2cc>)
   17a02:	4798      	blx	r3
	LCD_data(0x03);
   17a04:	2003      	movs	r0, #3
   17a06:	4b30      	ldr	r3, [pc, #192]	; (17ac8 <LCD_init+0x2cc>)
   17a08:	4798      	blx	r3
	LCD_data(0x10);
   17a0a:	2010      	movs	r0, #16
   17a0c:	4b2e      	ldr	r3, [pc, #184]	; (17ac8 <LCD_init+0x2cc>)
   17a0e:	4798      	blx	r3
	delay_ms(1);
   17a10:	2001      	movs	r0, #1
   17a12:	4b2b      	ldr	r3, [pc, #172]	; (17ac0 <LCD_init+0x2c4>)
   17a14:	4798      	blx	r3
	LCD_command(ST7735_GMCTRN1);
   17a16:	20e1      	movs	r0, #225	; 0xe1
   17a18:	4b2a      	ldr	r3, [pc, #168]	; (17ac4 <LCD_init+0x2c8>)
   17a1a:	4798      	blx	r3
	LCD_data(0x03);
   17a1c:	2003      	movs	r0, #3
   17a1e:	4b2a      	ldr	r3, [pc, #168]	; (17ac8 <LCD_init+0x2cc>)
   17a20:	4798      	blx	r3
	LCD_data(0x1D);
   17a22:	201d      	movs	r0, #29
   17a24:	4b28      	ldr	r3, [pc, #160]	; (17ac8 <LCD_init+0x2cc>)
   17a26:	4798      	blx	r3
	LCD_data(0x07);
   17a28:	2007      	movs	r0, #7
   17a2a:	4b27      	ldr	r3, [pc, #156]	; (17ac8 <LCD_init+0x2cc>)
   17a2c:	4798      	blx	r3
	LCD_data(0x06);
   17a2e:	2006      	movs	r0, #6
   17a30:	4b25      	ldr	r3, [pc, #148]	; (17ac8 <LCD_init+0x2cc>)
   17a32:	4798      	blx	r3
	LCD_data(0x2E);
   17a34:	202e      	movs	r0, #46	; 0x2e
   17a36:	4b24      	ldr	r3, [pc, #144]	; (17ac8 <LCD_init+0x2cc>)
   17a38:	4798      	blx	r3
	LCD_data(0x2C);
   17a3a:	202c      	movs	r0, #44	; 0x2c
   17a3c:	4b22      	ldr	r3, [pc, #136]	; (17ac8 <LCD_init+0x2cc>)
   17a3e:	4798      	blx	r3
	LCD_data(0x29);
   17a40:	2029      	movs	r0, #41	; 0x29
   17a42:	4b21      	ldr	r3, [pc, #132]	; (17ac8 <LCD_init+0x2cc>)
   17a44:	4798      	blx	r3
	LCD_data(0x2D);
   17a46:	202d      	movs	r0, #45	; 0x2d
   17a48:	4b1f      	ldr	r3, [pc, #124]	; (17ac8 <LCD_init+0x2cc>)
   17a4a:	4798      	blx	r3
	LCD_data(0x2E);
   17a4c:	202e      	movs	r0, #46	; 0x2e
   17a4e:	4b1e      	ldr	r3, [pc, #120]	; (17ac8 <LCD_init+0x2cc>)
   17a50:	4798      	blx	r3
	LCD_data(0x2E);
   17a52:	202e      	movs	r0, #46	; 0x2e
   17a54:	4b1c      	ldr	r3, [pc, #112]	; (17ac8 <LCD_init+0x2cc>)
   17a56:	4798      	blx	r3
	LCD_data(0x37);
   17a58:	2037      	movs	r0, #55	; 0x37
   17a5a:	4b1b      	ldr	r3, [pc, #108]	; (17ac8 <LCD_init+0x2cc>)
   17a5c:	4798      	blx	r3
	LCD_data(0x3F);
   17a5e:	203f      	movs	r0, #63	; 0x3f
   17a60:	4b19      	ldr	r3, [pc, #100]	; (17ac8 <LCD_init+0x2cc>)
   17a62:	4798      	blx	r3
	LCD_data(0x00);
   17a64:	2000      	movs	r0, #0
   17a66:	4b18      	ldr	r3, [pc, #96]	; (17ac8 <LCD_init+0x2cc>)
   17a68:	4798      	blx	r3
	LCD_data(0x00);
   17a6a:	2000      	movs	r0, #0
   17a6c:	4b16      	ldr	r3, [pc, #88]	; (17ac8 <LCD_init+0x2cc>)
   17a6e:	4798      	blx	r3
	LCD_data(0x02);
   17a70:	2002      	movs	r0, #2
   17a72:	4b15      	ldr	r3, [pc, #84]	; (17ac8 <LCD_init+0x2cc>)
   17a74:	4798      	blx	r3
	LCD_data(0x10);
   17a76:	2010      	movs	r0, #16
   17a78:	4b13      	ldr	r3, [pc, #76]	; (17ac8 <LCD_init+0x2cc>)
   17a7a:	4798      	blx	r3
	delay_ms(1);
   17a7c:	2001      	movs	r0, #1
   17a7e:	4b10      	ldr	r3, [pc, #64]	; (17ac0 <LCD_init+0x2c4>)
   17a80:	4798      	blx	r3
	LCD_command(ST7735_NORON);
   17a82:	2013      	movs	r0, #19
   17a84:	4b0f      	ldr	r3, [pc, #60]	; (17ac4 <LCD_init+0x2c8>)
   17a86:	4798      	blx	r3
	delay_ms(10);
   17a88:	200a      	movs	r0, #10
   17a8a:	4b0d      	ldr	r3, [pc, #52]	; (17ac0 <LCD_init+0x2c4>)
   17a8c:	4798      	blx	r3
	LCD_command(ST7735_DISPON);
   17a8e:	2029      	movs	r0, #41	; 0x29
   17a90:	4b0c      	ldr	r3, [pc, #48]	; (17ac4 <LCD_init+0x2c8>)
   17a92:	4798      	blx	r3
	delay_ms(100);
   17a94:	2064      	movs	r0, #100	; 0x64
   17a96:	4b0a      	ldr	r3, [pc, #40]	; (17ac0 <LCD_init+0x2c4>)
   17a98:	4798      	blx	r3
	LCD_command(ST7735_MADCTL); // rotation
   17a9a:	2036      	movs	r0, #54	; 0x36
   17a9c:	4b09      	ldr	r3, [pc, #36]	; (17ac4 <LCD_init+0x2c8>)
   17a9e:	4798      	blx	r3
    LCD_data(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
   17aa0:	20a0      	movs	r0, #160	; 0xa0
   17aa2:	4b09      	ldr	r3, [pc, #36]	; (17ac8 <LCD_init+0x2cc>)
   17aa4:	4798      	blx	r3
}
   17aa6:	46c0      	nop			; (mov r8, r8)
   17aa8:	46bd      	mov	sp, r7
   17aaa:	bd80      	pop	{r7, pc}
   17aac:	0001761d 	.word	0x0001761d
   17ab0:	2000471c 	.word	0x2000471c
   17ab4:	20004710 	.word	0x20004710
   17ab8:	0002a765 	.word	0x0002a765
   17abc:	00002710 	.word	0x00002710
   17ac0:	00022555 	.word	0x00022555
   17ac4:	000176f1 	.word	0x000176f1
   17ac8:	00017745 	.word	0x00017745

00017acc <LCD_drawPixel>:

void LCD_drawPixel(unsigned short x, unsigned short y, unsigned short color) {
   17acc:	b590      	push	{r4, r7, lr}
   17ace:	b083      	sub	sp, #12
   17ad0:	af00      	add	r7, sp, #0
   17ad2:	0004      	movs	r4, r0
   17ad4:	0008      	movs	r0, r1
   17ad6:	0011      	movs	r1, r2
   17ad8:	1dbb      	adds	r3, r7, #6
   17ada:	1c22      	adds	r2, r4, #0
   17adc:	801a      	strh	r2, [r3, #0]
   17ade:	1d3b      	adds	r3, r7, #4
   17ae0:	1c02      	adds	r2, r0, #0
   17ae2:	801a      	strh	r2, [r3, #0]
   17ae4:	1cbb      	adds	r3, r7, #2
   17ae6:	1c0a      	adds	r2, r1, #0
   17ae8:	801a      	strh	r2, [r3, #0]
  // check boundary
  LCD_setAddr(x,y,x+1,y+1);
   17aea:	1dbb      	adds	r3, r7, #6
   17aec:	881b      	ldrh	r3, [r3, #0]
   17aee:	3301      	adds	r3, #1
   17af0:	b29a      	uxth	r2, r3
   17af2:	1d3b      	adds	r3, r7, #4
   17af4:	881b      	ldrh	r3, [r3, #0]
   17af6:	3301      	adds	r3, #1
   17af8:	b29c      	uxth	r4, r3
   17afa:	1d3b      	adds	r3, r7, #4
   17afc:	8819      	ldrh	r1, [r3, #0]
   17afe:	1dbb      	adds	r3, r7, #6
   17b00:	8818      	ldrh	r0, [r3, #0]
   17b02:	0023      	movs	r3, r4
   17b04:	4c05      	ldr	r4, [pc, #20]	; (17b1c <LCD_drawPixel+0x50>)
   17b06:	47a0      	blx	r4
  LCD_data16(color);
   17b08:	1cbb      	adds	r3, r7, #2
   17b0a:	881b      	ldrh	r3, [r3, #0]
   17b0c:	0018      	movs	r0, r3
   17b0e:	4b04      	ldr	r3, [pc, #16]	; (17b20 <LCD_drawPixel+0x54>)
   17b10:	4798      	blx	r3
}
   17b12:	46c0      	nop			; (mov r8, r8)
   17b14:	46bd      	mov	sp, r7
   17b16:	b003      	add	sp, #12
   17b18:	bd90      	pop	{r4, r7, pc}
   17b1a:	46c0      	nop			; (mov r8, r8)
   17b1c:	00017b25 	.word	0x00017b25
   17b20:	00017799 	.word	0x00017799

00017b24 <LCD_setAddr>:

void LCD_setAddr(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1) {
   17b24:	b5b0      	push	{r4, r5, r7, lr}
   17b26:	b082      	sub	sp, #8
   17b28:	af00      	add	r7, sp, #0
   17b2a:	0005      	movs	r5, r0
   17b2c:	000c      	movs	r4, r1
   17b2e:	0010      	movs	r0, r2
   17b30:	0019      	movs	r1, r3
   17b32:	1dbb      	adds	r3, r7, #6
   17b34:	1c2a      	adds	r2, r5, #0
   17b36:	801a      	strh	r2, [r3, #0]
   17b38:	1d3b      	adds	r3, r7, #4
   17b3a:	1c22      	adds	r2, r4, #0
   17b3c:	801a      	strh	r2, [r3, #0]
   17b3e:	1cbb      	adds	r3, r7, #2
   17b40:	1c02      	adds	r2, r0, #0
   17b42:	801a      	strh	r2, [r3, #0]
   17b44:	003b      	movs	r3, r7
   17b46:	1c0a      	adds	r2, r1, #0
   17b48:	801a      	strh	r2, [r3, #0]
  LCD_command(ST7735_CASET); // Column
   17b4a:	202a      	movs	r0, #42	; 0x2a
   17b4c:	4b0f      	ldr	r3, [pc, #60]	; (17b8c <LCD_setAddr+0x68>)
   17b4e:	4798      	blx	r3
  LCD_data16(x0);
   17b50:	1dbb      	adds	r3, r7, #6
   17b52:	881b      	ldrh	r3, [r3, #0]
   17b54:	0018      	movs	r0, r3
   17b56:	4b0e      	ldr	r3, [pc, #56]	; (17b90 <LCD_setAddr+0x6c>)
   17b58:	4798      	blx	r3
	LCD_data16(x1);
   17b5a:	1cbb      	adds	r3, r7, #2
   17b5c:	881b      	ldrh	r3, [r3, #0]
   17b5e:	0018      	movs	r0, r3
   17b60:	4b0b      	ldr	r3, [pc, #44]	; (17b90 <LCD_setAddr+0x6c>)
   17b62:	4798      	blx	r3
	LCD_command(ST7735_RASET); // Page
   17b64:	202b      	movs	r0, #43	; 0x2b
   17b66:	4b09      	ldr	r3, [pc, #36]	; (17b8c <LCD_setAddr+0x68>)
   17b68:	4798      	blx	r3
	LCD_data16(y0);
   17b6a:	1d3b      	adds	r3, r7, #4
   17b6c:	881b      	ldrh	r3, [r3, #0]
   17b6e:	0018      	movs	r0, r3
   17b70:	4b07      	ldr	r3, [pc, #28]	; (17b90 <LCD_setAddr+0x6c>)
   17b72:	4798      	blx	r3
	LCD_data16(y1);
   17b74:	003b      	movs	r3, r7
   17b76:	881b      	ldrh	r3, [r3, #0]
   17b78:	0018      	movs	r0, r3
   17b7a:	4b05      	ldr	r3, [pc, #20]	; (17b90 <LCD_setAddr+0x6c>)
   17b7c:	4798      	blx	r3
	LCD_command(ST7735_RAMWR); // Into RAM
   17b7e:	202c      	movs	r0, #44	; 0x2c
   17b80:	4b02      	ldr	r3, [pc, #8]	; (17b8c <LCD_setAddr+0x68>)
   17b82:	4798      	blx	r3
}
   17b84:	46c0      	nop			; (mov r8, r8)
   17b86:	46bd      	mov	sp, r7
   17b88:	b002      	add	sp, #8
   17b8a:	bdb0      	pop	{r4, r5, r7, pc}
   17b8c:	000176f1 	.word	0x000176f1
   17b90:	00017799 	.word	0x00017799

00017b94 <LCD_clearScreen>:

void LCD_clearScreen(unsigned short color) {
   17b94:	b590      	push	{r4, r7, lr}
   17b96:	b085      	sub	sp, #20
   17b98:	af00      	add	r7, sp, #0
   17b9a:	0002      	movs	r2, r0
   17b9c:	1dbb      	adds	r3, r7, #6
   17b9e:	801a      	strh	r2, [r3, #0]
  int i;
  LCD_setAddr(0,0,_GRAMWIDTH,_GRAMHEIGH);
   17ba0:	2380      	movs	r3, #128	; 0x80
   17ba2:	22a0      	movs	r2, #160	; 0xa0
   17ba4:	2100      	movs	r1, #0
   17ba6:	2000      	movs	r0, #0
   17ba8:	4c0a      	ldr	r4, [pc, #40]	; (17bd4 <LCD_clearScreen+0x40>)
   17baa:	47a0      	blx	r4
	for (i = 0;i < _GRAMSIZE; i++){
   17bac:	2300      	movs	r3, #0
   17bae:	60fb      	str	r3, [r7, #12]
   17bb0:	e007      	b.n	17bc2 <LCD_clearScreen+0x2e>
		LCD_data16(color);
   17bb2:	1dbb      	adds	r3, r7, #6
   17bb4:	881b      	ldrh	r3, [r3, #0]
   17bb6:	0018      	movs	r0, r3
   17bb8:	4b07      	ldr	r3, [pc, #28]	; (17bd8 <LCD_clearScreen+0x44>)
   17bba:	4798      	blx	r3
	for (i = 0;i < _GRAMSIZE; i++){
   17bbc:	68fb      	ldr	r3, [r7, #12]
   17bbe:	3301      	adds	r3, #1
   17bc0:	60fb      	str	r3, [r7, #12]
   17bc2:	68fb      	ldr	r3, [r7, #12]
   17bc4:	4a05      	ldr	r2, [pc, #20]	; (17bdc <LCD_clearScreen+0x48>)
   17bc6:	4293      	cmp	r3, r2
   17bc8:	ddf3      	ble.n	17bb2 <LCD_clearScreen+0x1e>
	}
}
   17bca:	46c0      	nop			; (mov r8, r8)
   17bcc:	46bd      	mov	sp, r7
   17bce:	b005      	add	sp, #20
   17bd0:	bd90      	pop	{r4, r7, pc}
   17bd2:	46c0      	nop			; (mov r8, r8)
   17bd4:	00017b25 	.word	0x00017b25
   17bd8:	00017799 	.word	0x00017799
   17bdc:	00004fff 	.word	0x00004fff

00017be0 <LCD_menu>:
			}
		}
}*/


void LCD_menu(bool wifistatus){
   17be0:	b590      	push	{r4, r7, lr}
   17be2:	b08f      	sub	sp, #60	; 0x3c
   17be4:	af02      	add	r7, sp, #8
   17be6:	0002      	movs	r2, r0
   17be8:	1dfb      	adds	r3, r7, #7
   17bea:	701a      	strb	r2, [r3, #0]
	//LCD_clearScreen(WHITE);
	if(wifistatus)
   17bec:	1dfb      	adds	r3, r7, #7
   17bee:	781b      	ldrb	r3, [r3, #0]
   17bf0:	2b00      	cmp	r3, #0
   17bf2:	d008      	beq.n	17c06 <LCD_menu+0x26>
	drawString(20,30,"WIFI is Connected!    ",BLUE,WHITE);
   17bf4:	4a50      	ldr	r2, [pc, #320]	; (17d38 <LCD_menu+0x158>)
   17bf6:	2301      	movs	r3, #1
   17bf8:	425b      	negs	r3, r3
   17bfa:	9300      	str	r3, [sp, #0]
   17bfc:	231f      	movs	r3, #31
   17bfe:	211e      	movs	r1, #30
   17c00:	2014      	movs	r0, #20
   17c02:	4c4e      	ldr	r4, [pc, #312]	; (17d3c <LCD_menu+0x15c>)
   17c04:	47a0      	blx	r4
	drawString(50,50,"Welcome home!",BLACK,WHITE);
   17c06:	4a4e      	ldr	r2, [pc, #312]	; (17d40 <LCD_menu+0x160>)
   17c08:	2301      	movs	r3, #1
   17c0a:	425b      	negs	r3, r3
   17c0c:	9300      	str	r3, [sp, #0]
   17c0e:	2300      	movs	r3, #0
   17c10:	2132      	movs	r1, #50	; 0x32
   17c12:	2032      	movs	r0, #50	; 0x32
   17c14:	4c49      	ldr	r4, [pc, #292]	; (17d3c <LCD_menu+0x15c>)
   17c16:	47a0      	blx	r4
	if(getLock()){
   17c18:	4b4a      	ldr	r3, [pc, #296]	; (17d44 <LCD_menu+0x164>)
   17c1a:	4798      	blx	r3
   17c1c:	1e03      	subs	r3, r0, #0
   17c1e:	d00a      	beq.n	17c36 <LCD_menu+0x56>
		drawString(20,60,"WatchDog Status: Locked  ",RED,WHITE);
   17c20:	4949      	ldr	r1, [pc, #292]	; (17d48 <LCD_menu+0x168>)
   17c22:	4a4a      	ldr	r2, [pc, #296]	; (17d4c <LCD_menu+0x16c>)
   17c24:	2301      	movs	r3, #1
   17c26:	425b      	negs	r3, r3
   17c28:	9300      	str	r3, [sp, #0]
   17c2a:	000b      	movs	r3, r1
   17c2c:	213c      	movs	r1, #60	; 0x3c
   17c2e:	2014      	movs	r0, #20
   17c30:	4c42      	ldr	r4, [pc, #264]	; (17d3c <LCD_menu+0x15c>)
   17c32:	47a0      	blx	r4
   17c34:	e009      	b.n	17c4a <LCD_menu+0x6a>
	}
	else{drawString(20,60,"WatchDog Status: Unlocked",RED,WHITE);}
   17c36:	4944      	ldr	r1, [pc, #272]	; (17d48 <LCD_menu+0x168>)
   17c38:	4a45      	ldr	r2, [pc, #276]	; (17d50 <LCD_menu+0x170>)
   17c3a:	2301      	movs	r3, #1
   17c3c:	425b      	negs	r3, r3
   17c3e:	9300      	str	r3, [sp, #0]
   17c40:	000b      	movs	r3, r1
   17c42:	213c      	movs	r1, #60	; 0x3c
   17c44:	2014      	movs	r0, #20
   17c46:	4c3d      	ldr	r4, [pc, #244]	; (17d3c <LCD_menu+0x15c>)
   17c48:	47a0      	blx	r4
	
	char buffer[20];
	memset(buffer,0,sizeof(buffer));
   17c4a:	230c      	movs	r3, #12
   17c4c:	18fb      	adds	r3, r7, r3
   17c4e:	2214      	movs	r2, #20
   17c50:	2100      	movs	r1, #0
   17c52:	0018      	movs	r0, r3
   17c54:	4b3f      	ldr	r3, [pc, #252]	; (17d54 <LCD_menu+0x174>)
   17c56:	4798      	blx	r3
	float temp = getTemperature();
   17c58:	4b3f      	ldr	r3, [pc, #252]	; (17d58 <LCD_menu+0x178>)
   17c5a:	4798      	blx	r3
   17c5c:	1c03      	adds	r3, r0, #0
   17c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	float hum = getHumidity();
   17c60:	4b3e      	ldr	r3, [pc, #248]	; (17d5c <LCD_menu+0x17c>)
   17c62:	4798      	blx	r3
   17c64:	1c03      	adds	r3, r0, #0
   17c66:	62bb      	str	r3, [r7, #40]	; 0x28
	float pressure = getPressure();
   17c68:	4b3d      	ldr	r3, [pc, #244]	; (17d60 <LCD_menu+0x180>)
   17c6a:	4798      	blx	r3
   17c6c:	1c03      	adds	r3, r0, #0
   17c6e:	627b      	str	r3, [r7, #36]	; 0x24
	int gas = getGasResistance();
   17c70:	4b3c      	ldr	r3, [pc, #240]	; (17d64 <LCD_menu+0x184>)
   17c72:	4798      	blx	r3
   17c74:	0003      	movs	r3, r0
   17c76:	623b      	str	r3, [r7, #32]
	snprintf(buffer,sizeof(buffer),"Temperature: %d C",(int)temp);
   17c78:	4b3b      	ldr	r3, [pc, #236]	; (17d68 <LCD_menu+0x188>)
   17c7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17c7c:	4798      	blx	r3
   17c7e:	0003      	movs	r3, r0
   17c80:	4a3a      	ldr	r2, [pc, #232]	; (17d6c <LCD_menu+0x18c>)
   17c82:	210c      	movs	r1, #12
   17c84:	1878      	adds	r0, r7, r1
   17c86:	2114      	movs	r1, #20
   17c88:	4c39      	ldr	r4, [pc, #228]	; (17d70 <LCD_menu+0x190>)
   17c8a:	47a0      	blx	r4
	drawString(20,70,buffer,BLACK,WHITE);
   17c8c:	230c      	movs	r3, #12
   17c8e:	18fa      	adds	r2, r7, r3
   17c90:	2301      	movs	r3, #1
   17c92:	425b      	negs	r3, r3
   17c94:	9300      	str	r3, [sp, #0]
   17c96:	2300      	movs	r3, #0
   17c98:	2146      	movs	r1, #70	; 0x46
   17c9a:	2014      	movs	r0, #20
   17c9c:	4c27      	ldr	r4, [pc, #156]	; (17d3c <LCD_menu+0x15c>)
   17c9e:	47a0      	blx	r4
	snprintf(buffer,sizeof(buffer),"Humidity: %d %%",(int)hum);
   17ca0:	4b31      	ldr	r3, [pc, #196]	; (17d68 <LCD_menu+0x188>)
   17ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   17ca4:	4798      	blx	r3
   17ca6:	0003      	movs	r3, r0
   17ca8:	4a32      	ldr	r2, [pc, #200]	; (17d74 <LCD_menu+0x194>)
   17caa:	210c      	movs	r1, #12
   17cac:	1878      	adds	r0, r7, r1
   17cae:	2114      	movs	r1, #20
   17cb0:	4c2f      	ldr	r4, [pc, #188]	; (17d70 <LCD_menu+0x190>)
   17cb2:	47a0      	blx	r4
	drawString(20,80,buffer,BLACK,WHITE);
   17cb4:	230c      	movs	r3, #12
   17cb6:	18fa      	adds	r2, r7, r3
   17cb8:	2301      	movs	r3, #1
   17cba:	425b      	negs	r3, r3
   17cbc:	9300      	str	r3, [sp, #0]
   17cbe:	2300      	movs	r3, #0
   17cc0:	2150      	movs	r1, #80	; 0x50
   17cc2:	2014      	movs	r0, #20
   17cc4:	4c1d      	ldr	r4, [pc, #116]	; (17d3c <LCD_menu+0x15c>)
   17cc6:	47a0      	blx	r4
	snprintf(buffer,sizeof(buffer),"Pressure: %d hPa",(int)pressure);
   17cc8:	4b27      	ldr	r3, [pc, #156]	; (17d68 <LCD_menu+0x188>)
   17cca:	6a78      	ldr	r0, [r7, #36]	; 0x24
   17ccc:	4798      	blx	r3
   17cce:	0003      	movs	r3, r0
   17cd0:	4a29      	ldr	r2, [pc, #164]	; (17d78 <LCD_menu+0x198>)
   17cd2:	210c      	movs	r1, #12
   17cd4:	1878      	adds	r0, r7, r1
   17cd6:	2114      	movs	r1, #20
   17cd8:	4c25      	ldr	r4, [pc, #148]	; (17d70 <LCD_menu+0x190>)
   17cda:	47a0      	blx	r4
	drawString(20,90,buffer,BLACK,WHITE);
   17cdc:	230c      	movs	r3, #12
   17cde:	18fa      	adds	r2, r7, r3
   17ce0:	2301      	movs	r3, #1
   17ce2:	425b      	negs	r3, r3
   17ce4:	9300      	str	r3, [sp, #0]
   17ce6:	2300      	movs	r3, #0
   17ce8:	215a      	movs	r1, #90	; 0x5a
   17cea:	2014      	movs	r0, #20
   17cec:	4c13      	ldr	r4, [pc, #76]	; (17d3c <LCD_menu+0x15c>)
   17cee:	47a0      	blx	r4
	pressure = (1200 - pressure) / 1200;
   17cf0:	4b22      	ldr	r3, [pc, #136]	; (17d7c <LCD_menu+0x19c>)
   17cf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
   17cf4:	4822      	ldr	r0, [pc, #136]	; (17d80 <LCD_menu+0x1a0>)
   17cf6:	4798      	blx	r3
   17cf8:	1c03      	adds	r3, r0, #0
   17cfa:	1c1a      	adds	r2, r3, #0
   17cfc:	4b21      	ldr	r3, [pc, #132]	; (17d84 <LCD_menu+0x1a4>)
   17cfe:	4920      	ldr	r1, [pc, #128]	; (17d80 <LCD_menu+0x1a0>)
   17d00:	1c10      	adds	r0, r2, #0
   17d02:	4798      	blx	r3
   17d04:	1c03      	adds	r3, r0, #0
   17d06:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf(buffer,sizeof(buffer),"Smoke: %d %%",(int)pressure);
   17d08:	4b17      	ldr	r3, [pc, #92]	; (17d68 <LCD_menu+0x188>)
   17d0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   17d0c:	4798      	blx	r3
   17d0e:	0003      	movs	r3, r0
   17d10:	4a1d      	ldr	r2, [pc, #116]	; (17d88 <LCD_menu+0x1a8>)
   17d12:	210c      	movs	r1, #12
   17d14:	1878      	adds	r0, r7, r1
   17d16:	2114      	movs	r1, #20
   17d18:	4c15      	ldr	r4, [pc, #84]	; (17d70 <LCD_menu+0x190>)
   17d1a:	47a0      	blx	r4
	drawString(20,100,buffer,BLACK,WHITE);
   17d1c:	230c      	movs	r3, #12
   17d1e:	18fa      	adds	r2, r7, r3
   17d20:	2301      	movs	r3, #1
   17d22:	425b      	negs	r3, r3
   17d24:	9300      	str	r3, [sp, #0]
   17d26:	2300      	movs	r3, #0
   17d28:	2164      	movs	r1, #100	; 0x64
   17d2a:	2014      	movs	r0, #20
   17d2c:	4c03      	ldr	r4, [pc, #12]	; (17d3c <LCD_menu+0x15c>)
   17d2e:	47a0      	blx	r4
	

}
   17d30:	46c0      	nop			; (mov r8, r8)
   17d32:	46bd      	mov	sp, r7
   17d34:	b00d      	add	sp, #52	; 0x34
   17d36:	bd90      	pop	{r4, r7, pc}
   17d38:	00039534 	.word	0x00039534
   17d3c:	0001749d 	.word	0x0001749d
   17d40:	0003954c 	.word	0x0003954c
   17d44:	00016d49 	.word	0x00016d49
   17d48:	fffff800 	.word	0xfffff800
   17d4c:	0003955c 	.word	0x0003955c
   17d50:	00039578 	.word	0x00039578
   17d54:	0003794b 	.word	0x0003794b
   17d58:	00014bbd 	.word	0x00014bbd
   17d5c:	00014bd1 	.word	0x00014bd1
   17d60:	00014be5 	.word	0x00014be5
   17d64:	00014bf9 	.word	0x00014bf9
   17d68:	00035a95 	.word	0x00035a95
   17d6c:	00039594 	.word	0x00039594
   17d70:	00037ba5 	.word	0x00037ba5
   17d74:	000395a8 	.word	0x000395a8
   17d78:	000395b8 	.word	0x000395b8
   17d7c:	0003575d 	.word	0x0003575d
   17d80:	44960000 	.word	0x44960000
   17d84:	0003528d 	.word	0x0003528d
   17d88:	000395cc 	.word	0x000395cc

00017d8c <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   17d8c:	b590      	push	{r4, r7, lr}
   17d8e:	b087      	sub	sp, #28
   17d90:	af00      	add	r7, sp, #0
   17d92:	6078      	str	r0, [r7, #4]
    // Do initialization code here
    SerialConsoleWriteString("UI Task Started!");
   17d94:	4b92      	ldr	r3, [pc, #584]	; (17fe0 <vUiHandlerTask+0x254>)
   17d96:	0018      	movs	r0, r3
   17d98:	4b92      	ldr	r3, [pc, #584]	; (17fe4 <vUiHandlerTask+0x258>)
   17d9a:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   17d9c:	4b92      	ldr	r3, [pc, #584]	; (17fe8 <vUiHandlerTask+0x25c>)
   17d9e:	2201      	movs	r2, #1
   17da0:	701a      	strb	r2, [r3, #0]
   
   configure_port_speaker_pins();
   17da2:	4b92      	ldr	r3, [pc, #584]	; (17fec <vUiHandlerTask+0x260>)
   17da4:	4798      	blx	r3
	configure_port_servo_pins();
   17da6:	4b92      	ldr	r3, [pc, #584]	; (17ff0 <vUiHandlerTask+0x264>)
   17da8:	4798      	blx	r3
	init_bme680();
   17daa:	4b92      	ldr	r3, [pc, #584]	; (17ff4 <vUiHandlerTask+0x268>)
   17dac:	4798      	blx	r3
	read_sensor_data();
   17dae:	4b92      	ldr	r3, [pc, #584]	; (17ff8 <vUiHandlerTask+0x26c>)
   17db0:	4798      	blx	r3

		
		
		
		
	configure_port_pins();
   17db2:	4b92      	ldr	r3, [pc, #584]	; (17ffc <vUiHandlerTask+0x270>)
   17db4:	4798      	blx	r3
		//servopulse(200);
		//configure_tcc();
		//setPulse(2.4);
		//lock();
		
	LCD_init();
   17db6:	4b92      	ldr	r3, [pc, #584]	; (18000 <vUiHandlerTask+0x274>)
   17db8:	4798      	blx	r3
	LCD_clearScreen(WHITE);
   17dba:	4b92      	ldr	r3, [pc, #584]	; (18004 <vUiHandlerTask+0x278>)
   17dbc:	0018      	movs	r0, r3
   17dbe:	4b92      	ldr	r3, [pc, #584]	; (18008 <vUiHandlerTask+0x27c>)
   17dc0:	4798      	blx	r3
	
    while (1) {
	

	  // warning_speaker();
        switch (uiState) {
   17dc2:	4b89      	ldr	r3, [pc, #548]	; (17fe8 <vUiHandlerTask+0x25c>)
   17dc4:	781b      	ldrb	r3, [r3, #0]
   17dc6:	2b01      	cmp	r3, #1
   17dc8:	d100      	bne.n	17dcc <vUiHandlerTask+0x40>
   17dca:	e101      	b.n	17fd0 <vUiHandlerTask+0x244>
   17dcc:	2b02      	cmp	r3, #2
   17dce:	d002      	beq.n	17dd6 <vUiHandlerTask+0x4a>
   17dd0:	2b00      	cmp	r3, #0
   17dd2:	d068      	beq.n	17ea6 <vUiHandlerTask+0x11a>
   17dd4:	e0f8      	b.n	17fc8 <vUiHandlerTask+0x23c>
            }

            case (UI_STATE_SHOW_MOVES): {
                // Set initial state variable that will be used on the
                // UI_STATE_Handle_Buttons and need to be initialized once
                pressedKeys = 0;  // Set number of keys pressed by player to 0.
   17dd6:	4b8d      	ldr	r3, [pc, #564]	; (1800c <vUiHandlerTask+0x280>)
   17dd8:	2200      	movs	r2, #0
   17dda:	701a      	strb	r2, [r3, #0]
                keysToPress = 1;  // Set as an example to 1. STUDENTS should change this
   17ddc:	4b8c      	ldr	r3, [pc, #560]	; (18010 <vUiHandlerTask+0x284>)
   17dde:	2201      	movs	r2, #1
   17de0:	701a      	strb	r2, [r3, #0]
                                  // to the number of key presses needed.
                memset(gamePacketOut.game, 0xff,
   17de2:	4b8c      	ldr	r3, [pc, #560]	; (18014 <vUiHandlerTask+0x288>)
   17de4:	2214      	movs	r2, #20
   17de6:	21ff      	movs	r1, #255	; 0xff
   17de8:	0018      	movs	r0, r3
   17dea:	4b8b      	ldr	r3, [pc, #556]	; (18018 <vUiHandlerTask+0x28c>)
   17dec:	4798      	blx	r3
                       sizeof(gamePacketOut.game));  // Erase gamePacketOut to an initial state
                playIsDone = false;                  // Set play to false
   17dee:	4b8b      	ldr	r3, [pc, #556]	; (1801c <vUiHandlerTask+0x290>)
   17df0:	2200      	movs	r2, #0
   17df2:	701a      	strb	r2, [r3, #0]
                uint8_t presses = SeesawGetKeypadCount();
   17df4:	2317      	movs	r3, #23
   17df6:	18fc      	adds	r4, r7, r3
   17df8:	4b89      	ldr	r3, [pc, #548]	; (18020 <vUiHandlerTask+0x294>)
   17dfa:	4798      	blx	r3
   17dfc:	0003      	movs	r3, r0
   17dfe:	7023      	strb	r3, [r4, #0]
                if (presses >= BUTTON_PRESSES_MAX) presses = BUTTON_PRESSES_MAX;
   17e00:	2317      	movs	r3, #23
   17e02:	18fb      	adds	r3, r7, r3
   17e04:	781b      	ldrb	r3, [r3, #0]
   17e06:	2b0f      	cmp	r3, #15
   17e08:	d903      	bls.n	17e12 <vUiHandlerTask+0x86>
   17e0a:	2317      	movs	r3, #23
   17e0c:	18fb      	adds	r3, r7, r3
   17e0e:	2210      	movs	r2, #16
   17e10:	701a      	strb	r2, [r3, #0]
                if (presses != 0)
   17e12:	2317      	movs	r3, #23
   17e14:	18fb      	adds	r3, r7, r3
   17e16:	781b      	ldrb	r3, [r3, #0]
   17e18:	2b00      	cmp	r3, #0
   17e1a:	d007      	beq.n	17e2c <vUiHandlerTask+0xa0>
                    SeesawReadKeypad(buttons,
   17e1c:	2317      	movs	r3, #23
   17e1e:	18fb      	adds	r3, r7, r3
   17e20:	781a      	ldrb	r2, [r3, #0]
   17e22:	4b80      	ldr	r3, [pc, #512]	; (18024 <vUiHandlerTask+0x298>)
   17e24:	0011      	movs	r1, r2
   17e26:	0018      	movs	r0, r3
   17e28:	4b7f      	ldr	r3, [pc, #508]	; (18028 <vUiHandlerTask+0x29c>)
   17e2a:	4798      	blx	r3
                                     presses);  // Empty Seesaw buffer just in case
                                                // it has latent presses on it!
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   17e2c:	4b7d      	ldr	r3, [pc, #500]	; (18024 <vUiHandlerTask+0x298>)
   17e2e:	2210      	movs	r2, #16
   17e30:	2100      	movs	r1, #0
   17e32:	0018      	movs	r0, r3
   17e34:	4b78      	ldr	r3, [pc, #480]	; (18018 <vUiHandlerTask+0x28c>)
   17e36:	4798      	blx	r3
                // the message gets longer might be more fun! After you finish showing
                // the move should go to state UI_STATE_HANDLE_BUTTONS

                // In the beginner example we turn LED0 and LED15 will turn on for 500
                // ms then we go to UI_STATE_HANDLE_BUTTONS
                SeesawSetLed(0, red, green, blue);  // Turn button 1 on
   17e38:	4b7c      	ldr	r3, [pc, #496]	; (1802c <vUiHandlerTask+0x2a0>)
   17e3a:	781b      	ldrb	r3, [r3, #0]
   17e3c:	b2d9      	uxtb	r1, r3
   17e3e:	4b7c      	ldr	r3, [pc, #496]	; (18030 <vUiHandlerTask+0x2a4>)
   17e40:	781b      	ldrb	r3, [r3, #0]
   17e42:	b2da      	uxtb	r2, r3
   17e44:	4b7b      	ldr	r3, [pc, #492]	; (18034 <vUiHandlerTask+0x2a8>)
   17e46:	781b      	ldrb	r3, [r3, #0]
   17e48:	b2db      	uxtb	r3, r3
   17e4a:	2000      	movs	r0, #0
   17e4c:	4c7a      	ldr	r4, [pc, #488]	; (18038 <vUiHandlerTask+0x2ac>)
   17e4e:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   17e50:	4b7a      	ldr	r3, [pc, #488]	; (1803c <vUiHandlerTask+0x2b0>)
   17e52:	4798      	blx	r3
                vTaskDelay(10);
   17e54:	200a      	movs	r0, #10
   17e56:	4b7a      	ldr	r3, [pc, #488]	; (18040 <vUiHandlerTask+0x2b4>)
   17e58:	4798      	blx	r3
                SeesawSetLed(0, 0, 0, 0);            // Turn button 0 off
   17e5a:	2300      	movs	r3, #0
   17e5c:	2200      	movs	r2, #0
   17e5e:	2100      	movs	r1, #0
   17e60:	2000      	movs	r0, #0
   17e62:	4c75      	ldr	r4, [pc, #468]	; (18038 <vUiHandlerTask+0x2ac>)
   17e64:	47a0      	blx	r4
                SeesawSetLed(15, red, green, blue);  // Turn button 15 on
   17e66:	4b71      	ldr	r3, [pc, #452]	; (1802c <vUiHandlerTask+0x2a0>)
   17e68:	781b      	ldrb	r3, [r3, #0]
   17e6a:	b2d9      	uxtb	r1, r3
   17e6c:	4b70      	ldr	r3, [pc, #448]	; (18030 <vUiHandlerTask+0x2a4>)
   17e6e:	781b      	ldrb	r3, [r3, #0]
   17e70:	b2da      	uxtb	r2, r3
   17e72:	4b70      	ldr	r3, [pc, #448]	; (18034 <vUiHandlerTask+0x2a8>)
   17e74:	781b      	ldrb	r3, [r3, #0]
   17e76:	b2db      	uxtb	r3, r3
   17e78:	200f      	movs	r0, #15
   17e7a:	4c6f      	ldr	r4, [pc, #444]	; (18038 <vUiHandlerTask+0x2ac>)
   17e7c:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   17e7e:	4b6f      	ldr	r3, [pc, #444]	; (1803c <vUiHandlerTask+0x2b0>)
   17e80:	4798      	blx	r3
                vTaskDelay(10);
   17e82:	200a      	movs	r0, #10
   17e84:	4b6e      	ldr	r3, [pc, #440]	; (18040 <vUiHandlerTask+0x2b4>)
   17e86:	4798      	blx	r3
                SeesawSetLed(15, 0, 0, 0);  // Turn button 15 off
   17e88:	2300      	movs	r3, #0
   17e8a:	2200      	movs	r2, #0
   17e8c:	2100      	movs	r1, #0
   17e8e:	200f      	movs	r0, #15
   17e90:	4c69      	ldr	r4, [pc, #420]	; (18038 <vUiHandlerTask+0x2ac>)
   17e92:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   17e94:	4b69      	ldr	r3, [pc, #420]	; (1803c <vUiHandlerTask+0x2b0>)
   17e96:	4798      	blx	r3
                vTaskDelay(10);
   17e98:	200a      	movs	r0, #10
   17e9a:	4b69      	ldr	r3, [pc, #420]	; (18040 <vUiHandlerTask+0x2b4>)
   17e9c:	4798      	blx	r3
                uiState = UI_STATE_HANDLE_BUTTONS;
   17e9e:	4b52      	ldr	r3, [pc, #328]	; (17fe8 <vUiHandlerTask+0x25c>)
   17ea0:	2200      	movs	r2, #0
   17ea2:	701a      	strb	r2, [r3, #0]

                break;
   17ea4:	e097      	b.n	17fd6 <vUiHandlerTask+0x24a>
                // should be stored on "gamePacketOut". The keypresses that should count
                // are when the player RELEASES the button.

                // In this example, we return after only one button press!

                uint8_t numPresses = SeesawGetKeypadCount();
   17ea6:	2316      	movs	r3, #22
   17ea8:	18fc      	adds	r4, r7, r3
   17eaa:	4b5d      	ldr	r3, [pc, #372]	; (18020 <vUiHandlerTask+0x294>)
   17eac:	4798      	blx	r3
   17eae:	0003      	movs	r3, r0
   17eb0:	7023      	strb	r3, [r4, #0]
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   17eb2:	4b5c      	ldr	r3, [pc, #368]	; (18024 <vUiHandlerTask+0x298>)
   17eb4:	2210      	movs	r2, #16
   17eb6:	2100      	movs	r1, #0
   17eb8:	0018      	movs	r0, r3
   17eba:	4b57      	ldr	r3, [pc, #348]	; (18018 <vUiHandlerTask+0x28c>)
   17ebc:	4798      	blx	r3

                if (numPresses >= BUTTON_PRESSES_MAX) {
   17ebe:	2316      	movs	r3, #22
   17ec0:	18fb      	adds	r3, r7, r3
   17ec2:	781b      	ldrb	r3, [r3, #0]
   17ec4:	2b0f      	cmp	r3, #15
   17ec6:	d903      	bls.n	17ed0 <vUiHandlerTask+0x144>
                    numPresses = BUTTON_PRESSES_MAX;
   17ec8:	2316      	movs	r3, #22
   17eca:	18fb      	adds	r3, r7, r3
   17ecc:	2210      	movs	r2, #16
   17ece:	701a      	strb	r2, [r3, #0]
                }
                if (numPresses != 0 && ERROR_NONE == SeesawReadKeypad(buttons, numPresses)) {
   17ed0:	2316      	movs	r3, #22
   17ed2:	18fb      	adds	r3, r7, r3
   17ed4:	781b      	ldrb	r3, [r3, #0]
   17ed6:	2b00      	cmp	r3, #0
   17ed8:	d065      	beq.n	17fa6 <vUiHandlerTask+0x21a>
   17eda:	2316      	movs	r3, #22
   17edc:	18fb      	adds	r3, r7, r3
   17ede:	781a      	ldrb	r2, [r3, #0]
   17ee0:	4b50      	ldr	r3, [pc, #320]	; (18024 <vUiHandlerTask+0x298>)
   17ee2:	0011      	movs	r1, r2
   17ee4:	0018      	movs	r0, r3
   17ee6:	4b50      	ldr	r3, [pc, #320]	; (18028 <vUiHandlerTask+0x29c>)
   17ee8:	4798      	blx	r3
   17eea:	1e03      	subs	r3, r0, #0
   17eec:	d15b      	bne.n	17fa6 <vUiHandlerTask+0x21a>
                    // Process Buttons
                    for (int iter = 0; iter < numPresses; iter++) {
   17eee:	2300      	movs	r3, #0
   17ef0:	613b      	str	r3, [r7, #16]
   17ef2:	e050      	b.n	17f96 <vUiHandlerTask+0x20a>
                        uint8_t keynum = NEO_TRELLIS_SEESAW_KEY((buttons[iter] & 0xFD) >> 2);
   17ef4:	4a4b      	ldr	r2, [pc, #300]	; (18024 <vUiHandlerTask+0x298>)
   17ef6:	693b      	ldr	r3, [r7, #16]
   17ef8:	18d3      	adds	r3, r2, r3
   17efa:	781b      	ldrb	r3, [r3, #0]
   17efc:	089b      	lsrs	r3, r3, #2
   17efe:	b2db      	uxtb	r3, r3
   17f00:	2b00      	cmp	r3, #0
   17f02:	da00      	bge.n	17f06 <vUiHandlerTask+0x17a>
   17f04:	3307      	adds	r3, #7
   17f06:	10db      	asrs	r3, r3, #3
   17f08:	b2db      	uxtb	r3, r3
   17f0a:	009b      	lsls	r3, r3, #2
   17f0c:	b2d9      	uxtb	r1, r3
   17f0e:	4a45      	ldr	r2, [pc, #276]	; (18024 <vUiHandlerTask+0x298>)
   17f10:	693b      	ldr	r3, [r7, #16]
   17f12:	18d3      	adds	r3, r2, r3
   17f14:	781b      	ldrb	r3, [r3, #0]
   17f16:	089b      	lsrs	r3, r3, #2
   17f18:	b2db      	uxtb	r3, r3
   17f1a:	2207      	movs	r2, #7
   17f1c:	4013      	ands	r3, r2
   17f1e:	b2da      	uxtb	r2, r3
   17f20:	230f      	movs	r3, #15
   17f22:	18fb      	adds	r3, r7, r3
   17f24:	188a      	adds	r2, r1, r2
   17f26:	701a      	strb	r2, [r3, #0]
                        uint8_t actionButton = buttons[iter] & 0x03;
   17f28:	4a3e      	ldr	r2, [pc, #248]	; (18024 <vUiHandlerTask+0x298>)
   17f2a:	693b      	ldr	r3, [r7, #16]
   17f2c:	18d3      	adds	r3, r2, r3
   17f2e:	781a      	ldrb	r2, [r3, #0]
   17f30:	230e      	movs	r3, #14
   17f32:	18fb      	adds	r3, r7, r3
   17f34:	2103      	movs	r1, #3
   17f36:	400a      	ands	r2, r1
   17f38:	701a      	strb	r2, [r3, #0]
                        if (actionButton == 0x03) {
   17f3a:	230e      	movs	r3, #14
   17f3c:	18fb      	adds	r3, r7, r3
   17f3e:	781b      	ldrb	r3, [r3, #0]
   17f40:	2b03      	cmp	r3, #3
   17f42:	d10f      	bne.n	17f64 <vUiHandlerTask+0x1d8>
                            SeesawSetLed(keynum, red, green, blue);
   17f44:	4b39      	ldr	r3, [pc, #228]	; (1802c <vUiHandlerTask+0x2a0>)
   17f46:	781b      	ldrb	r3, [r3, #0]
   17f48:	b2d9      	uxtb	r1, r3
   17f4a:	4b39      	ldr	r3, [pc, #228]	; (18030 <vUiHandlerTask+0x2a4>)
   17f4c:	781b      	ldrb	r3, [r3, #0]
   17f4e:	b2da      	uxtb	r2, r3
   17f50:	4b38      	ldr	r3, [pc, #224]	; (18034 <vUiHandlerTask+0x2a8>)
   17f52:	781b      	ldrb	r3, [r3, #0]
   17f54:	b2dc      	uxtb	r4, r3
   17f56:	230f      	movs	r3, #15
   17f58:	18fb      	adds	r3, r7, r3
   17f5a:	7818      	ldrb	r0, [r3, #0]
   17f5c:	0023      	movs	r3, r4
   17f5e:	4c36      	ldr	r4, [pc, #216]	; (18038 <vUiHandlerTask+0x2ac>)
   17f60:	47a0      	blx	r4
   17f62:	e015      	b.n	17f90 <vUiHandlerTask+0x204>
                        } else {
                            SeesawSetLed(keynum, 0, 0, 0);
   17f64:	230f      	movs	r3, #15
   17f66:	18fb      	adds	r3, r7, r3
   17f68:	7818      	ldrb	r0, [r3, #0]
   17f6a:	2300      	movs	r3, #0
   17f6c:	2200      	movs	r2, #0
   17f6e:	2100      	movs	r1, #0
   17f70:	4c31      	ldr	r4, [pc, #196]	; (18038 <vUiHandlerTask+0x2ac>)
   17f72:	47a0      	blx	r4
                            // Button released! Count this into the buttons pressed by user.
                            gamePacketOut.game[pressedKeys] = keynum;
   17f74:	4b25      	ldr	r3, [pc, #148]	; (1800c <vUiHandlerTask+0x280>)
   17f76:	781b      	ldrb	r3, [r3, #0]
   17f78:	0019      	movs	r1, r3
   17f7a:	4b26      	ldr	r3, [pc, #152]	; (18014 <vUiHandlerTask+0x288>)
   17f7c:	220f      	movs	r2, #15
   17f7e:	18ba      	adds	r2, r7, r2
   17f80:	7812      	ldrb	r2, [r2, #0]
   17f82:	545a      	strb	r2, [r3, r1]
                            pressedKeys++;
   17f84:	4b21      	ldr	r3, [pc, #132]	; (1800c <vUiHandlerTask+0x280>)
   17f86:	781b      	ldrb	r3, [r3, #0]
   17f88:	3301      	adds	r3, #1
   17f8a:	b2da      	uxtb	r2, r3
   17f8c:	4b1f      	ldr	r3, [pc, #124]	; (1800c <vUiHandlerTask+0x280>)
   17f8e:	701a      	strb	r2, [r3, #0]
                    for (int iter = 0; iter < numPresses; iter++) {
   17f90:	693b      	ldr	r3, [r7, #16]
   17f92:	3301      	adds	r3, #1
   17f94:	613b      	str	r3, [r7, #16]
   17f96:	2316      	movs	r3, #22
   17f98:	18fb      	adds	r3, r7, r3
   17f9a:	781a      	ldrb	r2, [r3, #0]
   17f9c:	693b      	ldr	r3, [r7, #16]
   17f9e:	429a      	cmp	r2, r3
   17fa0:	dca8      	bgt.n	17ef4 <vUiHandlerTask+0x168>
                        }
                    }
                    SeesawOrderLedUpdate();
   17fa2:	4b26      	ldr	r3, [pc, #152]	; (1803c <vUiHandlerTask+0x2b0>)
   17fa4:	4798      	blx	r3
                }

                // Check if we are done!
                if (pressedKeys >= keysToPress || pressedKeys >= GAME_SIZE) {
   17fa6:	4b19      	ldr	r3, [pc, #100]	; (1800c <vUiHandlerTask+0x280>)
   17fa8:	781a      	ldrb	r2, [r3, #0]
   17faa:	4b19      	ldr	r3, [pc, #100]	; (18010 <vUiHandlerTask+0x284>)
   17fac:	781b      	ldrb	r3, [r3, #0]
   17fae:	429a      	cmp	r2, r3
   17fb0:	d203      	bcs.n	17fba <vUiHandlerTask+0x22e>
   17fb2:	4b16      	ldr	r3, [pc, #88]	; (1800c <vUiHandlerTask+0x280>)
   17fb4:	781b      	ldrb	r3, [r3, #0]
   17fb6:	2b13      	cmp	r3, #19
   17fb8:	d90c      	bls.n	17fd4 <vUiHandlerTask+0x248>
                    // Tell control gamePacketOut is ready to be send out AND go back to
                    // UI_STATE_IGNORE_PRESSES
                    playIsDone = true;
   17fba:	4b18      	ldr	r3, [pc, #96]	; (1801c <vUiHandlerTask+0x290>)
   17fbc:	2201      	movs	r2, #1
   17fbe:	701a      	strb	r2, [r3, #0]
                    uiState = UI_STATE_IGNORE_PRESSES;
   17fc0:	4b09      	ldr	r3, [pc, #36]	; (17fe8 <vUiHandlerTask+0x25c>)
   17fc2:	2201      	movs	r2, #1
   17fc4:	701a      	strb	r2, [r3, #0]
                }

                break;
   17fc6:	e005      	b.n	17fd4 <vUiHandlerTask+0x248>
            }

            default:  // In case of unforseen error, it is always good to sent state
                      // machine to an initial state.
                uiState = UI_STATE_HANDLE_BUTTONS;
   17fc8:	4b07      	ldr	r3, [pc, #28]	; (17fe8 <vUiHandlerTask+0x25c>)
   17fca:	2200      	movs	r2, #0
   17fcc:	701a      	strb	r2, [r3, #0]
                break;
   17fce:	e002      	b.n	17fd6 <vUiHandlerTask+0x24a>
                break;
   17fd0:	46c0      	nop			; (mov r8, r8)
   17fd2:	e000      	b.n	17fd6 <vUiHandlerTask+0x24a>
                break;
   17fd4:	46c0      	nop			; (mov r8, r8)
        }

        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
   17fd6:	2032      	movs	r0, #50	; 0x32
   17fd8:	4b19      	ldr	r3, [pc, #100]	; (18040 <vUiHandlerTask+0x2b4>)
   17fda:	4798      	blx	r3
        switch (uiState) {
   17fdc:	e6f1      	b.n	17dc2 <vUiHandlerTask+0x36>
   17fde:	46c0      	nop			; (mov r8, r8)
   17fe0:	000395dc 	.word	0x000395dc
   17fe4:	000201e5 	.word	0x000201e5
   17fe8:	20004758 	.word	0x20004758
   17fec:	0001704d 	.word	0x0001704d
   17ff0:	00016c25 	.word	0x00016c25
   17ff4:	00014a01 	.word	0x00014a01
   17ff8:	00014ad1 	.word	0x00014ad1
   17ffc:	00017449 	.word	0x00017449
   18000:	000177fd 	.word	0x000177fd
   18004:	0000ffff 	.word	0x0000ffff
   18008:	00017b95 	.word	0x00017b95
   1800c:	200004c2 	.word	0x200004c2
   18010:	200004c3 	.word	0x200004c3
   18014:	20004720 	.word	0x20004720
   18018:	0003794b 	.word	0x0003794b
   1801c:	200004c4 	.word	0x200004c4
   18020:	00016d5d 	.word	0x00016d5d
   18024:	20004748 	.word	0x20004748
   18028:	00016dc5 	.word	0x00016dc5
   1802c:	200004c1 	.word	0x200004c1
   18030:	20000030 	.word	0x20000030
   18034:	20000031 	.word	0x20000031
   18038:	00016e49 	.word	0x00016e49
   1803c:	00016f11 	.word	0x00016f11
   18040:	0001e591 	.word	0x0001e591

00018044 <UiOrderShowMoves>:

/******************************************************************************
 * Functions
 ******************************************************************************/
void UiOrderShowMoves(struct GameDataPacket *packetIn)
{
   18044:	b580      	push	{r7, lr}
   18046:	b082      	sub	sp, #8
   18048:	af00      	add	r7, sp, #0
   1804a:	6078      	str	r0, [r7, #4]
    memcpy(&gamePacketIn, packetIn, sizeof(gamePacketIn));
   1804c:	4a08      	ldr	r2, [pc, #32]	; (18070 <UiOrderShowMoves+0x2c>)
   1804e:	687b      	ldr	r3, [r7, #4]
   18050:	0010      	movs	r0, r2
   18052:	0019      	movs	r1, r3
   18054:	2314      	movs	r3, #20
   18056:	001a      	movs	r2, r3
   18058:	4b06      	ldr	r3, [pc, #24]	; (18074 <UiOrderShowMoves+0x30>)
   1805a:	4798      	blx	r3
    uiState = UI_STATE_SHOW_MOVES;
   1805c:	4b06      	ldr	r3, [pc, #24]	; (18078 <UiOrderShowMoves+0x34>)
   1805e:	2202      	movs	r2, #2
   18060:	701a      	strb	r2, [r3, #0]
    playIsDone = false;  // Set play to false
   18062:	4b06      	ldr	r3, [pc, #24]	; (1807c <UiOrderShowMoves+0x38>)
   18064:	2200      	movs	r2, #0
   18066:	701a      	strb	r2, [r3, #0]
}
   18068:	46c0      	nop			; (mov r8, r8)
   1806a:	46bd      	mov	sp, r7
   1806c:	b002      	add	sp, #8
   1806e:	bd80      	pop	{r7, pc}
   18070:	20004734 	.word	0x20004734
   18074:	00037915 	.word	0x00037915
   18078:	20004758 	.word	0x20004758
   1807c:	200004c4 	.word	0x200004c4

00018080 <UiPlayIsDone>:

bool UiPlayIsDone(void)
{
   18080:	b580      	push	{r7, lr}
   18082:	af00      	add	r7, sp, #0
    return playIsDone;
   18084:	4b02      	ldr	r3, [pc, #8]	; (18090 <UiPlayIsDone+0x10>)
   18086:	781b      	ldrb	r3, [r3, #0]
}
   18088:	0018      	movs	r0, r3
   1808a:	46bd      	mov	sp, r7
   1808c:	bd80      	pop	{r7, pc}
   1808e:	46c0      	nop			; (mov r8, r8)
   18090:	200004c4 	.word	0x200004c4

00018094 <UiGetGamePacketOut>:

struct GameDataPacket *UiGetGamePacketOut(void)
{
   18094:	b580      	push	{r7, lr}
   18096:	af00      	add	r7, sp, #0
    return &gamePacketOut;
   18098:	4b01      	ldr	r3, [pc, #4]	; (180a0 <UiGetGamePacketOut+0xc>)
}
   1809a:	0018      	movs	r0, r3
   1809c:	46bd      	mov	sp, r7
   1809e:	bd80      	pop	{r7, pc}
   180a0:	20004720 	.word	0x20004720

000180a4 <system_pinmux_get_group_from_gpio_pin>:
{
   180a4:	b580      	push	{r7, lr}
   180a6:	b084      	sub	sp, #16
   180a8:	af00      	add	r7, sp, #0
   180aa:	0002      	movs	r2, r0
   180ac:	1dfb      	adds	r3, r7, #7
   180ae:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   180b0:	230f      	movs	r3, #15
   180b2:	18fb      	adds	r3, r7, r3
   180b4:	1dfa      	adds	r2, r7, #7
   180b6:	7812      	ldrb	r2, [r2, #0]
   180b8:	09d2      	lsrs	r2, r2, #7
   180ba:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   180bc:	230e      	movs	r3, #14
   180be:	18fb      	adds	r3, r7, r3
   180c0:	1dfa      	adds	r2, r7, #7
   180c2:	7812      	ldrb	r2, [r2, #0]
   180c4:	0952      	lsrs	r2, r2, #5
   180c6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   180c8:	4b0d      	ldr	r3, [pc, #52]	; (18100 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   180ca:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   180cc:	230f      	movs	r3, #15
   180ce:	18fb      	adds	r3, r7, r3
   180d0:	781b      	ldrb	r3, [r3, #0]
   180d2:	2b00      	cmp	r3, #0
   180d4:	d10f      	bne.n	180f6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   180d6:	230f      	movs	r3, #15
   180d8:	18fb      	adds	r3, r7, r3
   180da:	781b      	ldrb	r3, [r3, #0]
   180dc:	009b      	lsls	r3, r3, #2
   180de:	2210      	movs	r2, #16
   180e0:	4694      	mov	ip, r2
   180e2:	44bc      	add	ip, r7
   180e4:	4463      	add	r3, ip
   180e6:	3b08      	subs	r3, #8
   180e8:	681a      	ldr	r2, [r3, #0]
   180ea:	230e      	movs	r3, #14
   180ec:	18fb      	adds	r3, r7, r3
   180ee:	781b      	ldrb	r3, [r3, #0]
   180f0:	01db      	lsls	r3, r3, #7
   180f2:	18d3      	adds	r3, r2, r3
   180f4:	e000      	b.n	180f8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   180f6:	2300      	movs	r3, #0
}
   180f8:	0018      	movs	r0, r3
   180fa:	46bd      	mov	sp, r7
   180fc:	b004      	add	sp, #16
   180fe:	bd80      	pop	{r7, pc}
   18100:	41004400 	.word	0x41004400

00018104 <port_get_group_from_gpio_pin>:
{
   18104:	b580      	push	{r7, lr}
   18106:	b082      	sub	sp, #8
   18108:	af00      	add	r7, sp, #0
   1810a:	0002      	movs	r2, r0
   1810c:	1dfb      	adds	r3, r7, #7
   1810e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   18110:	1dfb      	adds	r3, r7, #7
   18112:	781b      	ldrb	r3, [r3, #0]
   18114:	0018      	movs	r0, r3
   18116:	4b03      	ldr	r3, [pc, #12]	; (18124 <port_get_group_from_gpio_pin+0x20>)
   18118:	4798      	blx	r3
   1811a:	0003      	movs	r3, r0
}
   1811c:	0018      	movs	r0, r3
   1811e:	46bd      	mov	sp, r7
   18120:	b002      	add	sp, #8
   18122:	bd80      	pop	{r7, pc}
   18124:	000180a5 	.word	0x000180a5

00018128 <port_pin_set_output_level>:
{
   18128:	b580      	push	{r7, lr}
   1812a:	b084      	sub	sp, #16
   1812c:	af00      	add	r7, sp, #0
   1812e:	0002      	movs	r2, r0
   18130:	1dfb      	adds	r3, r7, #7
   18132:	701a      	strb	r2, [r3, #0]
   18134:	1dbb      	adds	r3, r7, #6
   18136:	1c0a      	adds	r2, r1, #0
   18138:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1813a:	1dfb      	adds	r3, r7, #7
   1813c:	781b      	ldrb	r3, [r3, #0]
   1813e:	0018      	movs	r0, r3
   18140:	4b0d      	ldr	r3, [pc, #52]	; (18178 <port_pin_set_output_level+0x50>)
   18142:	4798      	blx	r3
   18144:	0003      	movs	r3, r0
   18146:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   18148:	1dfb      	adds	r3, r7, #7
   1814a:	781b      	ldrb	r3, [r3, #0]
   1814c:	221f      	movs	r2, #31
   1814e:	4013      	ands	r3, r2
   18150:	2201      	movs	r2, #1
   18152:	409a      	lsls	r2, r3
   18154:	0013      	movs	r3, r2
   18156:	60bb      	str	r3, [r7, #8]
	if (level) {
   18158:	1dbb      	adds	r3, r7, #6
   1815a:	781b      	ldrb	r3, [r3, #0]
   1815c:	2b00      	cmp	r3, #0
   1815e:	d003      	beq.n	18168 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   18160:	68fb      	ldr	r3, [r7, #12]
   18162:	68ba      	ldr	r2, [r7, #8]
   18164:	619a      	str	r2, [r3, #24]
}
   18166:	e002      	b.n	1816e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   18168:	68fb      	ldr	r3, [r7, #12]
   1816a:	68ba      	ldr	r2, [r7, #8]
   1816c:	615a      	str	r2, [r3, #20]
}
   1816e:	46c0      	nop			; (mov r8, r8)
   18170:	46bd      	mov	sp, r7
   18172:	b004      	add	sp, #16
   18174:	bd80      	pop	{r7, pc}
   18176:	46c0      	nop			; (mov r8, r8)
   18178:	00018105 	.word	0x00018105

0001817c <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   1817c:	b580      	push	{r7, lr}
   1817e:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   18180:	4b02      	ldr	r3, [pc, #8]	; (1818c <init_state+0x10>)
   18182:	2200      	movs	r2, #0
   18184:	701a      	strb	r2, [r3, #0]
}
   18186:	46c0      	nop			; (mov r8, r8)
   18188:	46bd      	mov	sp, r7
   1818a:	bd80      	pop	{r7, pc}
   1818c:	200004dd 	.word	0x200004dd

00018190 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   18190:	b580      	push	{r7, lr}
   18192:	b082      	sub	sp, #8
   18194:	af00      	add	r7, sp, #0
   18196:	0002      	movs	r2, r0
   18198:	1dfb      	adds	r3, r7, #7
   1819a:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   1819c:	1dfb      	adds	r3, r7, #7
   1819e:	781b      	ldrb	r3, [r3, #0]
   181a0:	b25b      	sxtb	r3, r3
   181a2:	43db      	mvns	r3, r3
   181a4:	b25b      	sxtb	r3, r3
   181a6:	4a06      	ldr	r2, [pc, #24]	; (181c0 <clear_state+0x30>)
   181a8:	7812      	ldrb	r2, [r2, #0]
   181aa:	b252      	sxtb	r2, r2
   181ac:	4013      	ands	r3, r2
   181ae:	b25b      	sxtb	r3, r3
   181b0:	b2da      	uxtb	r2, r3
   181b2:	4b03      	ldr	r3, [pc, #12]	; (181c0 <clear_state+0x30>)
   181b4:	701a      	strb	r2, [r3, #0]
}
   181b6:	46c0      	nop			; (mov r8, r8)
   181b8:	46bd      	mov	sp, r7
   181ba:	b002      	add	sp, #8
   181bc:	bd80      	pop	{r7, pc}
   181be:	46c0      	nop			; (mov r8, r8)
   181c0:	200004dd 	.word	0x200004dd

000181c4 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   181c4:	b580      	push	{r7, lr}
   181c6:	b082      	sub	sp, #8
   181c8:	af00      	add	r7, sp, #0
   181ca:	0002      	movs	r2, r0
   181cc:	1dfb      	adds	r3, r7, #7
   181ce:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   181d0:	4b05      	ldr	r3, [pc, #20]	; (181e8 <add_state+0x24>)
   181d2:	781a      	ldrb	r2, [r3, #0]
   181d4:	1dfb      	adds	r3, r7, #7
   181d6:	781b      	ldrb	r3, [r3, #0]
   181d8:	4313      	orrs	r3, r2
   181da:	b2da      	uxtb	r2, r3
   181dc:	4b02      	ldr	r3, [pc, #8]	; (181e8 <add_state+0x24>)
   181de:	701a      	strb	r2, [r3, #0]
}
   181e0:	46c0      	nop			; (mov r8, r8)
   181e2:	46bd      	mov	sp, r7
   181e4:	b002      	add	sp, #8
   181e6:	bd80      	pop	{r7, pc}
   181e8:	200004dd 	.word	0x200004dd

000181ec <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   181ec:	b580      	push	{r7, lr}
   181ee:	b082      	sub	sp, #8
   181f0:	af00      	add	r7, sp, #0
   181f2:	0002      	movs	r2, r0
   181f4:	1dfb      	adds	r3, r7, #7
   181f6:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   181f8:	4b06      	ldr	r3, [pc, #24]	; (18214 <is_state_set+0x28>)
   181fa:	781b      	ldrb	r3, [r3, #0]
   181fc:	1dfa      	adds	r2, r7, #7
   181fe:	7812      	ldrb	r2, [r2, #0]
   18200:	4013      	ands	r3, r2
   18202:	b2db      	uxtb	r3, r3
   18204:	1e5a      	subs	r2, r3, #1
   18206:	4193      	sbcs	r3, r2
   18208:	b2db      	uxtb	r3, r3
}
   1820a:	0018      	movs	r0, r3
   1820c:	46bd      	mov	sp, r7
   1820e:	b002      	add	sp, #8
   18210:	bd80      	pop	{r7, pc}
   18212:	46c0      	nop			; (mov r8, r8)
   18214:	200004dd 	.word	0x200004dd

00018218 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   18218:	b590      	push	{r4, r7, lr}
   1821a:	b085      	sub	sp, #20
   1821c:	af00      	add	r7, sp, #0
   1821e:	6078      	str	r0, [r7, #4]
   18220:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   18222:	687b      	ldr	r3, [r7, #4]
   18224:	2b00      	cmp	r3, #0
   18226:	d002      	beq.n	1822e <is_exist_file+0x16>
   18228:	683b      	ldr	r3, [r7, #0]
   1822a:	2b00      	cmp	r3, #0
   1822c:	d101      	bne.n	18232 <is_exist_file+0x1a>
        return false;
   1822e:	2300      	movs	r3, #0
   18230:	e013      	b.n	1825a <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   18232:	230f      	movs	r3, #15
   18234:	18fc      	adds	r4, r7, r3
   18236:	6839      	ldr	r1, [r7, #0]
   18238:	4b0a      	ldr	r3, [pc, #40]	; (18264 <is_exist_file+0x4c>)
   1823a:	2200      	movs	r2, #0
   1823c:	0018      	movs	r0, r3
   1823e:	4b0a      	ldr	r3, [pc, #40]	; (18268 <is_exist_file+0x50>)
   18240:	4798      	blx	r3
   18242:	0003      	movs	r3, r0
   18244:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   18246:	4b07      	ldr	r3, [pc, #28]	; (18264 <is_exist_file+0x4c>)
   18248:	0018      	movs	r0, r3
   1824a:	4b08      	ldr	r3, [pc, #32]	; (1826c <is_exist_file+0x54>)
   1824c:	4798      	blx	r3
    return (ret == FR_OK);
   1824e:	230f      	movs	r3, #15
   18250:	18fb      	adds	r3, r7, r3
   18252:	781b      	ldrb	r3, [r3, #0]
   18254:	425a      	negs	r2, r3
   18256:	4153      	adcs	r3, r2
   18258:	b2db      	uxtb	r3, r3
}
   1825a:	0018      	movs	r0, r3
   1825c:	46bd      	mov	sp, r7
   1825e:	b005      	add	sp, #20
   18260:	bd90      	pop	{r4, r7, pc}
   18262:	46c0      	nop			; (mov r8, r8)
   18264:	20000710 	.word	0x20000710
   18268:	0002fd65 	.word	0x0002fd65
   1826c:	00030765 	.word	0x00030765

00018270 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   18270:	b580      	push	{r7, lr}
   18272:	b09e      	sub	sp, #120	; 0x78
   18274:	af00      	add	r7, sp, #0
   18276:	60f8      	str	r0, [r7, #12]
   18278:	60b9      	str	r1, [r7, #8]
   1827a:	1dfb      	adds	r3, r7, #7
   1827c:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   1827e:	2376      	movs	r3, #118	; 0x76
   18280:	18fb      	adds	r3, r7, r3
   18282:	2201      	movs	r2, #1
   18284:	801a      	strh	r2, [r3, #0]
   18286:	2374      	movs	r3, #116	; 0x74
   18288:	18fb      	adds	r3, r7, r3
   1828a:	2200      	movs	r2, #0
   1828c:	801a      	strh	r2, [r3, #0]
   1828e:	236e      	movs	r3, #110	; 0x6e
   18290:	18fb      	adds	r3, r7, r3
   18292:	2200      	movs	r2, #0
   18294:	801a      	strh	r2, [r3, #0]
   18296:	2372      	movs	r3, #114	; 0x72
   18298:	18fb      	adds	r3, r7, r3
   1829a:	2200      	movs	r2, #0
   1829c:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   1829e:	2324      	movs	r3, #36	; 0x24
   182a0:	18fb      	adds	r3, r7, r3
   182a2:	0018      	movs	r0, r3
   182a4:	2341      	movs	r3, #65	; 0x41
   182a6:	001a      	movs	r2, r3
   182a8:	2100      	movs	r1, #0
   182aa:	4b92      	ldr	r3, [pc, #584]	; (184f4 <rename_to_unique+0x284>)
   182ac:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   182ae:	2318      	movs	r3, #24
   182b0:	18fb      	adds	r3, r7, r3
   182b2:	0018      	movs	r0, r3
   182b4:	2309      	movs	r3, #9
   182b6:	001a      	movs	r2, r3
   182b8:	2100      	movs	r1, #0
   182ba:	4b8e      	ldr	r3, [pc, #568]	; (184f4 <rename_to_unique+0x284>)
   182bc:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   182be:	2314      	movs	r3, #20
   182c0:	18fb      	adds	r3, r7, r3
   182c2:	2200      	movs	r2, #0
   182c4:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   182c6:	2300      	movs	r3, #0
   182c8:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   182ca:	2371      	movs	r3, #113	; 0x71
   182cc:	18fb      	adds	r3, r7, r3
   182ce:	2200      	movs	r2, #0
   182d0:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   182d2:	68bb      	ldr	r3, [r7, #8]
   182d4:	2b00      	cmp	r3, #0
   182d6:	d101      	bne.n	182dc <rename_to_unique+0x6c>
        return false;
   182d8:	2300      	movs	r3, #0
   182da:	e106      	b.n	184ea <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   182dc:	68ba      	ldr	r2, [r7, #8]
   182de:	68fb      	ldr	r3, [r7, #12]
   182e0:	0011      	movs	r1, r2
   182e2:	0018      	movs	r0, r3
   182e4:	4b84      	ldr	r3, [pc, #528]	; (184f8 <rename_to_unique+0x288>)
   182e6:	4798      	blx	r3
   182e8:	0003      	movs	r3, r0
   182ea:	001a      	movs	r2, r3
   182ec:	2301      	movs	r3, #1
   182ee:	4053      	eors	r3, r2
   182f0:	b2db      	uxtb	r3, r3
   182f2:	2b00      	cmp	r3, #0
   182f4:	d001      	beq.n	182fa <rename_to_unique+0x8a>
        return true;
   182f6:	2301      	movs	r3, #1
   182f8:	e0f7      	b.n	184ea <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   182fa:	68bb      	ldr	r3, [r7, #8]
   182fc:	0018      	movs	r0, r3
   182fe:	4b7f      	ldr	r3, [pc, #508]	; (184fc <rename_to_unique+0x28c>)
   18300:	4798      	blx	r3
   18302:	0003      	movs	r3, r0
   18304:	2b40      	cmp	r3, #64	; 0x40
   18306:	d901      	bls.n	1830c <rename_to_unique+0x9c>
        return false;
   18308:	2300      	movs	r3, #0
   1830a:	e0ee      	b.n	184ea <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   1830c:	68bb      	ldr	r3, [r7, #8]
   1830e:	212e      	movs	r1, #46	; 0x2e
   18310:	0018      	movs	r0, r3
   18312:	4b7b      	ldr	r3, [pc, #492]	; (18500 <rename_to_unique+0x290>)
   18314:	4798      	blx	r3
   18316:	0003      	movs	r3, r0
   18318:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   1831a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1831c:	2b00      	cmp	r3, #0
   1831e:	d052      	beq.n	183c6 <rename_to_unique+0x156>
        ext_len = strlen(p);
   18320:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   18322:	0018      	movs	r0, r3
   18324:	4b75      	ldr	r3, [pc, #468]	; (184fc <rename_to_unique+0x28c>)
   18326:	4798      	blx	r3
   18328:	0002      	movs	r2, r0
   1832a:	236e      	movs	r3, #110	; 0x6e
   1832c:	18fb      	adds	r3, r7, r3
   1832e:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   18330:	236e      	movs	r3, #110	; 0x6e
   18332:	18fb      	adds	r3, r7, r3
   18334:	881b      	ldrh	r3, [r3, #0]
   18336:	2b07      	cmp	r3, #7
   18338:	d837      	bhi.n	183aa <rename_to_unique+0x13a>
            valid_ext = true;
   1833a:	2371      	movs	r3, #113	; 0x71
   1833c:	18fb      	adds	r3, r7, r3
   1833e:	2201      	movs	r2, #1
   18340:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   18342:	6eba      	ldr	r2, [r7, #104]	; 0x68
   18344:	2318      	movs	r3, #24
   18346:	18fb      	adds	r3, r7, r3
   18348:	0011      	movs	r1, r2
   1834a:	0018      	movs	r0, r3
   1834c:	4b6d      	ldr	r3, [pc, #436]	; (18504 <rename_to_unique+0x294>)
   1834e:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   18350:	68bb      	ldr	r3, [r7, #8]
   18352:	0018      	movs	r0, r3
   18354:	4b69      	ldr	r3, [pc, #420]	; (184fc <rename_to_unique+0x28c>)
   18356:	4798      	blx	r3
   18358:	0002      	movs	r2, r0
   1835a:	236e      	movs	r3, #110	; 0x6e
   1835c:	18fb      	adds	r3, r7, r3
   1835e:	881b      	ldrh	r3, [r3, #0]
   18360:	1ad3      	subs	r3, r2, r3
   18362:	2b3c      	cmp	r3, #60	; 0x3c
   18364:	d911      	bls.n	1838a <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   18366:	2374      	movs	r3, #116	; 0x74
   18368:	18fb      	adds	r3, r7, r3
   1836a:	226e      	movs	r2, #110	; 0x6e
   1836c:	18ba      	adds	r2, r7, r2
   1836e:	8812      	ldrh	r2, [r2, #0]
   18370:	213c      	movs	r1, #60	; 0x3c
   18372:	1a8a      	subs	r2, r1, r2
   18374:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   18376:	2374      	movs	r3, #116	; 0x74
   18378:	18fb      	adds	r3, r7, r3
   1837a:	881a      	ldrh	r2, [r3, #0]
   1837c:	68b9      	ldr	r1, [r7, #8]
   1837e:	2324      	movs	r3, #36	; 0x24
   18380:	18fb      	adds	r3, r7, r3
   18382:	0018      	movs	r0, r3
   18384:	4b60      	ldr	r3, [pc, #384]	; (18508 <rename_to_unique+0x298>)
   18386:	4798      	blx	r3
   18388:	e02a      	b.n	183e0 <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   1838a:	6eba      	ldr	r2, [r7, #104]	; 0x68
   1838c:	68bb      	ldr	r3, [r7, #8]
   1838e:	1ad2      	subs	r2, r2, r3
   18390:	2374      	movs	r3, #116	; 0x74
   18392:	18fb      	adds	r3, r7, r3
   18394:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   18396:	2374      	movs	r3, #116	; 0x74
   18398:	18fb      	adds	r3, r7, r3
   1839a:	881a      	ldrh	r2, [r3, #0]
   1839c:	68b9      	ldr	r1, [r7, #8]
   1839e:	2324      	movs	r3, #36	; 0x24
   183a0:	18fb      	adds	r3, r7, r3
   183a2:	0018      	movs	r0, r3
   183a4:	4b58      	ldr	r3, [pc, #352]	; (18508 <rename_to_unique+0x298>)
   183a6:	4798      	blx	r3
   183a8:	e01a      	b.n	183e0 <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   183aa:	2374      	movs	r3, #116	; 0x74
   183ac:	18fb      	adds	r3, r7, r3
   183ae:	223c      	movs	r2, #60	; 0x3c
   183b0:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   183b2:	2374      	movs	r3, #116	; 0x74
   183b4:	18fb      	adds	r3, r7, r3
   183b6:	881a      	ldrh	r2, [r3, #0]
   183b8:	68b9      	ldr	r1, [r7, #8]
   183ba:	2324      	movs	r3, #36	; 0x24
   183bc:	18fb      	adds	r3, r7, r3
   183be:	0018      	movs	r0, r3
   183c0:	4b51      	ldr	r3, [pc, #324]	; (18508 <rename_to_unique+0x298>)
   183c2:	4798      	blx	r3
   183c4:	e00c      	b.n	183e0 <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   183c6:	2374      	movs	r3, #116	; 0x74
   183c8:	18fb      	adds	r3, r7, r3
   183ca:	223c      	movs	r2, #60	; 0x3c
   183cc:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   183ce:	2374      	movs	r3, #116	; 0x74
   183d0:	18fb      	adds	r3, r7, r3
   183d2:	881a      	ldrh	r2, [r3, #0]
   183d4:	68b9      	ldr	r1, [r7, #8]
   183d6:	2324      	movs	r3, #36	; 0x24
   183d8:	18fb      	adds	r3, r7, r3
   183da:	0018      	movs	r0, r3
   183dc:	4b4a      	ldr	r3, [pc, #296]	; (18508 <rename_to_unique+0x298>)
   183de:	4798      	blx	r3
    }

    name[name_len++] = '-';
   183e0:	2374      	movs	r3, #116	; 0x74
   183e2:	18fb      	adds	r3, r7, r3
   183e4:	881b      	ldrh	r3, [r3, #0]
   183e6:	2274      	movs	r2, #116	; 0x74
   183e8:	18ba      	adds	r2, r7, r2
   183ea:	1c59      	adds	r1, r3, #1
   183ec:	8011      	strh	r1, [r2, #0]
   183ee:	001a      	movs	r2, r3
   183f0:	2324      	movs	r3, #36	; 0x24
   183f2:	18fb      	adds	r3, r7, r3
   183f4:	212d      	movs	r1, #45	; 0x2d
   183f6:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   183f8:	2376      	movs	r3, #118	; 0x76
   183fa:	18fb      	adds	r3, r7, r3
   183fc:	2200      	movs	r2, #0
   183fe:	801a      	strh	r2, [r3, #0]
   18400:	2372      	movs	r3, #114	; 0x72
   18402:	18fb      	adds	r3, r7, r3
   18404:	2201      	movs	r2, #1
   18406:	801a      	strh	r2, [r3, #0]
   18408:	e010      	b.n	1842c <rename_to_unique+0x1bc>
        count *= 10;
   1840a:	2372      	movs	r3, #114	; 0x72
   1840c:	18fa      	adds	r2, r7, r3
   1840e:	2372      	movs	r3, #114	; 0x72
   18410:	18fb      	adds	r3, r7, r3
   18412:	881b      	ldrh	r3, [r3, #0]
   18414:	1c19      	adds	r1, r3, #0
   18416:	0089      	lsls	r1, r1, #2
   18418:	18cb      	adds	r3, r1, r3
   1841a:	18db      	adds	r3, r3, r3
   1841c:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   1841e:	2376      	movs	r3, #118	; 0x76
   18420:	18fb      	adds	r3, r7, r3
   18422:	881a      	ldrh	r2, [r3, #0]
   18424:	2376      	movs	r3, #118	; 0x76
   18426:	18fb      	adds	r3, r7, r3
   18428:	3201      	adds	r2, #1
   1842a:	801a      	strh	r2, [r3, #0]
   1842c:	2376      	movs	r3, #118	; 0x76
   1842e:	18fb      	adds	r3, r7, r3
   18430:	881b      	ldrh	r3, [r3, #0]
   18432:	2b02      	cmp	r3, #2
   18434:	d9e9      	bls.n	1840a <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   18436:	2376      	movs	r3, #118	; 0x76
   18438:	18fb      	adds	r3, r7, r3
   1843a:	2201      	movs	r2, #1
   1843c:	801a      	strh	r2, [r3, #0]
   1843e:	e04b      	b.n	184d8 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   18440:	2376      	movs	r3, #118	; 0x76
   18442:	18fb      	adds	r3, r7, r3
   18444:	881a      	ldrh	r2, [r3, #0]
   18446:	4931      	ldr	r1, [pc, #196]	; (1850c <rename_to_unique+0x29c>)
   18448:	2314      	movs	r3, #20
   1844a:	18fb      	adds	r3, r7, r3
   1844c:	0018      	movs	r0, r3
   1844e:	4b30      	ldr	r3, [pc, #192]	; (18510 <rename_to_unique+0x2a0>)
   18450:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   18452:	2374      	movs	r3, #116	; 0x74
   18454:	18fb      	adds	r3, r7, r3
   18456:	881b      	ldrh	r3, [r3, #0]
   18458:	2224      	movs	r2, #36	; 0x24
   1845a:	18ba      	adds	r2, r7, r2
   1845c:	18d3      	adds	r3, r2, r3
   1845e:	2214      	movs	r2, #20
   18460:	18b9      	adds	r1, r7, r2
   18462:	2203      	movs	r2, #3
   18464:	0018      	movs	r0, r3
   18466:	4b28      	ldr	r3, [pc, #160]	; (18508 <rename_to_unique+0x298>)
   18468:	4798      	blx	r3
        if (valid_ext) {
   1846a:	2371      	movs	r3, #113	; 0x71
   1846c:	18fb      	adds	r3, r7, r3
   1846e:	781b      	ldrb	r3, [r3, #0]
   18470:	2b00      	cmp	r3, #0
   18472:	d00c      	beq.n	1848e <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   18474:	2374      	movs	r3, #116	; 0x74
   18476:	18fb      	adds	r3, r7, r3
   18478:	881b      	ldrh	r3, [r3, #0]
   1847a:	3303      	adds	r3, #3
   1847c:	2224      	movs	r2, #36	; 0x24
   1847e:	18ba      	adds	r2, r7, r2
   18480:	18d3      	adds	r3, r2, r3
   18482:	2218      	movs	r2, #24
   18484:	18ba      	adds	r2, r7, r2
   18486:	0011      	movs	r1, r2
   18488:	0018      	movs	r0, r3
   1848a:	4b1e      	ldr	r3, [pc, #120]	; (18504 <rename_to_unique+0x294>)
   1848c:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   1848e:	2324      	movs	r3, #36	; 0x24
   18490:	18fa      	adds	r2, r7, r3
   18492:	68fb      	ldr	r3, [r7, #12]
   18494:	0011      	movs	r1, r2
   18496:	0018      	movs	r0, r3
   18498:	4b17      	ldr	r3, [pc, #92]	; (184f8 <rename_to_unique+0x288>)
   1849a:	4798      	blx	r3
   1849c:	0003      	movs	r3, r0
   1849e:	001a      	movs	r2, r3
   184a0:	2301      	movs	r3, #1
   184a2:	4053      	eors	r3, r2
   184a4:	b2db      	uxtb	r3, r3
   184a6:	2b00      	cmp	r3, #0
   184a8:	d00f      	beq.n	184ca <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   184aa:	1dfb      	adds	r3, r7, #7
   184ac:	781a      	ldrb	r2, [r3, #0]
   184ae:	68bb      	ldr	r3, [r7, #8]
   184b0:	2100      	movs	r1, #0
   184b2:	0018      	movs	r0, r3
   184b4:	4b0f      	ldr	r3, [pc, #60]	; (184f4 <rename_to_unique+0x284>)
   184b6:	4798      	blx	r3
            strcpy(file_path_name, name);
   184b8:	2324      	movs	r3, #36	; 0x24
   184ba:	18fa      	adds	r2, r7, r3
   184bc:	68bb      	ldr	r3, [r7, #8]
   184be:	0011      	movs	r1, r2
   184c0:	0018      	movs	r0, r3
   184c2:	4b10      	ldr	r3, [pc, #64]	; (18504 <rename_to_unique+0x294>)
   184c4:	4798      	blx	r3
            return true;
   184c6:	2301      	movs	r3, #1
   184c8:	e00f      	b.n	184ea <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   184ca:	2376      	movs	r3, #118	; 0x76
   184cc:	18fb      	adds	r3, r7, r3
   184ce:	881a      	ldrh	r2, [r3, #0]
   184d0:	2376      	movs	r3, #118	; 0x76
   184d2:	18fb      	adds	r3, r7, r3
   184d4:	3201      	adds	r2, #1
   184d6:	801a      	strh	r2, [r3, #0]
   184d8:	2376      	movs	r3, #118	; 0x76
   184da:	18fa      	adds	r2, r7, r3
   184dc:	2372      	movs	r3, #114	; 0x72
   184de:	18fb      	adds	r3, r7, r3
   184e0:	8812      	ldrh	r2, [r2, #0]
   184e2:	881b      	ldrh	r3, [r3, #0]
   184e4:	429a      	cmp	r2, r3
   184e6:	d3ab      	bcc.n	18440 <rename_to_unique+0x1d0>
        }
    }
    return false;
   184e8:	2300      	movs	r3, #0
}
   184ea:	0018      	movs	r0, r3
   184ec:	46bd      	mov	sp, r7
   184ee:	b01e      	add	sp, #120	; 0x78
   184f0:	bd80      	pop	{r7, pc}
   184f2:	46c0      	nop			; (mov r8, r8)
   184f4:	0003794b 	.word	0x0003794b
   184f8:	00018219 	.word	0x00018219
   184fc:	00037d03 	.word	0x00037d03
   18500:	00037d5d 	.word	0x00037d5d
   18504:	00037cb7 	.word	0x00037cb7
   18508:	00037d33 	.word	0x00037d33
   1850c:	00039604 	.word	0x00039604
   18510:	00037c09 	.word	0x00037c09

00018514 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   18514:	b590      	push	{r4, r7, lr}
   18516:	b083      	sub	sp, #12
   18518:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   1851a:	2001      	movs	r0, #1
   1851c:	4b22      	ldr	r3, [pc, #136]	; (185a8 <start_download+0x94>)
   1851e:	4798      	blx	r3
   18520:	0003      	movs	r3, r0
   18522:	001a      	movs	r2, r3
   18524:	2301      	movs	r3, #1
   18526:	4053      	eors	r3, r2
   18528:	b2db      	uxtb	r3, r3
   1852a:	2b00      	cmp	r3, #0
   1852c:	d005      	beq.n	1853a <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   1852e:	4b1f      	ldr	r3, [pc, #124]	; (185ac <start_download+0x98>)
   18530:	0019      	movs	r1, r3
   18532:	2001      	movs	r0, #1
   18534:	4b1e      	ldr	r3, [pc, #120]	; (185b0 <start_download+0x9c>)
   18536:	4798      	blx	r3
        return;
   18538:	e032      	b.n	185a0 <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   1853a:	2002      	movs	r0, #2
   1853c:	4b1a      	ldr	r3, [pc, #104]	; (185a8 <start_download+0x94>)
   1853e:	4798      	blx	r3
   18540:	0003      	movs	r3, r0
   18542:	001a      	movs	r2, r3
   18544:	2301      	movs	r3, #1
   18546:	4053      	eors	r3, r2
   18548:	b2db      	uxtb	r3, r3
   1854a:	2b00      	cmp	r3, #0
   1854c:	d005      	beq.n	1855a <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   1854e:	4b19      	ldr	r3, [pc, #100]	; (185b4 <start_download+0xa0>)
   18550:	0019      	movs	r1, r3
   18552:	2001      	movs	r0, #1
   18554:	4b16      	ldr	r3, [pc, #88]	; (185b0 <start_download+0x9c>)
   18556:	4798      	blx	r3
        return;
   18558:	e022      	b.n	185a0 <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   1855a:	2004      	movs	r0, #4
   1855c:	4b12      	ldr	r3, [pc, #72]	; (185a8 <start_download+0x94>)
   1855e:	4798      	blx	r3
   18560:	1e03      	subs	r3, r0, #0
   18562:	d005      	beq.n	18570 <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   18564:	4b14      	ldr	r3, [pc, #80]	; (185b8 <start_download+0xa4>)
   18566:	0019      	movs	r1, r3
   18568:	2001      	movs	r0, #1
   1856a:	4b11      	ldr	r3, [pc, #68]	; (185b0 <start_download+0x9c>)
   1856c:	4798      	blx	r3
        return;
   1856e:	e017      	b.n	185a0 <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   18570:	2008      	movs	r0, #8
   18572:	4b0d      	ldr	r3, [pc, #52]	; (185a8 <start_download+0x94>)
   18574:	4798      	blx	r3
   18576:	1e03      	subs	r3, r0, #0
   18578:	d005      	beq.n	18586 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   1857a:	4b10      	ldr	r3, [pc, #64]	; (185bc <start_download+0xa8>)
   1857c:	0019      	movs	r1, r3
   1857e:	2001      	movs	r0, #1
   18580:	4b0b      	ldr	r3, [pc, #44]	; (185b0 <start_download+0x9c>)
   18582:	4798      	blx	r3
        return;
   18584:	e00c      	b.n	185a0 <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   18586:	4b0e      	ldr	r3, [pc, #56]	; (185c0 <start_download+0xac>)
   18588:	0019      	movs	r1, r3
   1858a:	2001      	movs	r0, #1
   1858c:	4b08      	ldr	r3, [pc, #32]	; (185b0 <start_download+0x9c>)
   1858e:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   18590:	490c      	ldr	r1, [pc, #48]	; (185c4 <start_download+0xb0>)
   18592:	480d      	ldr	r0, [pc, #52]	; (185c8 <start_download+0xb4>)
   18594:	2300      	movs	r3, #0
   18596:	9300      	str	r3, [sp, #0]
   18598:	2300      	movs	r3, #0
   1859a:	2201      	movs	r2, #1
   1859c:	4c0b      	ldr	r4, [pc, #44]	; (185cc <start_download+0xb8>)
   1859e:	47a0      	blx	r4
}
   185a0:	46bd      	mov	sp, r7
   185a2:	b001      	add	sp, #4
   185a4:	bd90      	pop	{r4, r7, pc}
   185a6:	46c0      	nop			; (mov r8, r8)
   185a8:	000181ed 	.word	0x000181ed
   185ac:	0003960c 	.word	0x0003960c
   185b0:	000202d1 	.word	0x000202d1
   185b4:	00039638 	.word	0x00039638
   185b8:	00039664 	.word	0x00039664
   185bc:	00039690 	.word	0x00039690
   185c0:	000396bc 	.word	0x000396bc
   185c4:	000396e8 	.word	0x000396e8
   185c8:	200047b4 	.word	0x200047b4
   185cc:	000333b9 	.word	0x000333b9

000185d0 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   185d0:	b5b0      	push	{r4, r5, r7, lr}
   185d2:	b086      	sub	sp, #24
   185d4:	af00      	add	r7, sp, #0
   185d6:	6078      	str	r0, [r7, #4]
   185d8:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   185da:	687b      	ldr	r3, [r7, #4]
   185dc:	2b00      	cmp	r3, #0
   185de:	d002      	beq.n	185e6 <store_file_packet+0x16>
   185e0:	683b      	ldr	r3, [r7, #0]
   185e2:	2b00      	cmp	r3, #0
   185e4:	d105      	bne.n	185f2 <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   185e6:	4b58      	ldr	r3, [pc, #352]	; (18748 <store_file_packet+0x178>)
   185e8:	0019      	movs	r1, r3
   185ea:	2001      	movs	r0, #1
   185ec:	4b57      	ldr	r3, [pc, #348]	; (1874c <store_file_packet+0x17c>)
   185ee:	4798      	blx	r3
        return;
   185f0:	e0a6      	b.n	18740 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   185f2:	2008      	movs	r0, #8
   185f4:	4b56      	ldr	r3, [pc, #344]	; (18750 <store_file_packet+0x180>)
   185f6:	4798      	blx	r3
   185f8:	0003      	movs	r3, r0
   185fa:	001a      	movs	r2, r3
   185fc:	2301      	movs	r3, #1
   185fe:	4053      	eors	r3, r2
   18600:	b2db      	uxtb	r3, r3
   18602:	2b00      	cmp	r3, #0
   18604:	d055      	beq.n	186b2 <store_file_packet+0xe2>
        char *cp = NULL;
   18606:	2300      	movs	r3, #0
   18608:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   1860a:	4b52      	ldr	r3, [pc, #328]	; (18754 <store_file_packet+0x184>)
   1860c:	2230      	movs	r2, #48	; 0x30
   1860e:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   18610:	4b50      	ldr	r3, [pc, #320]	; (18754 <store_file_packet+0x184>)
   18612:	223a      	movs	r2, #58	; 0x3a
   18614:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   18616:	4b50      	ldr	r3, [pc, #320]	; (18758 <store_file_packet+0x188>)
   18618:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   1861a:	e002      	b.n	18622 <store_file_packet+0x52>
            cp--;
   1861c:	697b      	ldr	r3, [r7, #20]
   1861e:	3b01      	subs	r3, #1
   18620:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   18622:	697b      	ldr	r3, [r7, #20]
   18624:	781b      	ldrb	r3, [r3, #0]
   18626:	2b2f      	cmp	r3, #47	; 0x2f
   18628:	d1f8      	bne.n	1861c <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   1862a:	697b      	ldr	r3, [r7, #20]
   1862c:	0018      	movs	r0, r3
   1862e:	4b4b      	ldr	r3, [pc, #300]	; (1875c <store_file_packet+0x18c>)
   18630:	4798      	blx	r3
   18632:	0003      	movs	r3, r0
   18634:	2b01      	cmp	r3, #1
   18636:	d924      	bls.n	18682 <store_file_packet+0xb2>
            cp++;
   18638:	697b      	ldr	r3, [r7, #20]
   1863a:	3301      	adds	r3, #1
   1863c:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   1863e:	697a      	ldr	r2, [r7, #20]
   18640:	4b47      	ldr	r3, [pc, #284]	; (18760 <store_file_packet+0x190>)
   18642:	0011      	movs	r1, r2
   18644:	0018      	movs	r0, r3
   18646:	4b47      	ldr	r3, [pc, #284]	; (18764 <store_file_packet+0x194>)
   18648:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   1864a:	4942      	ldr	r1, [pc, #264]	; (18754 <store_file_packet+0x184>)
   1864c:	4b46      	ldr	r3, [pc, #280]	; (18768 <store_file_packet+0x198>)
   1864e:	2240      	movs	r2, #64	; 0x40
   18650:	0018      	movs	r0, r3
   18652:	4b46      	ldr	r3, [pc, #280]	; (1876c <store_file_packet+0x19c>)
   18654:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   18656:	4a3f      	ldr	r2, [pc, #252]	; (18754 <store_file_packet+0x184>)
   18658:	4b45      	ldr	r3, [pc, #276]	; (18770 <store_file_packet+0x1a0>)
   1865a:	0019      	movs	r1, r3
   1865c:	2001      	movs	r0, #1
   1865e:	4b3b      	ldr	r3, [pc, #236]	; (1874c <store_file_packet+0x17c>)
   18660:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   18662:	2313      	movs	r3, #19
   18664:	18fc      	adds	r4, r7, r3
   18666:	493b      	ldr	r1, [pc, #236]	; (18754 <store_file_packet+0x184>)
   18668:	4b3f      	ldr	r3, [pc, #252]	; (18768 <store_file_packet+0x198>)
   1866a:	220a      	movs	r2, #10
   1866c:	0018      	movs	r0, r3
   1866e:	4b41      	ldr	r3, [pc, #260]	; (18774 <store_file_packet+0x1a4>)
   18670:	4798      	blx	r3
   18672:	0003      	movs	r3, r0
   18674:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   18676:	2313      	movs	r3, #19
   18678:	18fb      	adds	r3, r7, r3
   1867a:	781b      	ldrb	r3, [r3, #0]
   1867c:	2b00      	cmp	r3, #0
   1867e:	d012      	beq.n	186a6 <store_file_packet+0xd6>
   18680:	e008      	b.n	18694 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   18682:	4b3d      	ldr	r3, [pc, #244]	; (18778 <store_file_packet+0x1a8>)
   18684:	0019      	movs	r1, r3
   18686:	2001      	movs	r0, #1
   18688:	4b30      	ldr	r3, [pc, #192]	; (1874c <store_file_packet+0x17c>)
   1868a:	4798      	blx	r3
            add_state(CANCELED);
   1868c:	2020      	movs	r0, #32
   1868e:	4b3b      	ldr	r3, [pc, #236]	; (1877c <store_file_packet+0x1ac>)
   18690:	4798      	blx	r3
            return;
   18692:	e055      	b.n	18740 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   18694:	2313      	movs	r3, #19
   18696:	18fb      	adds	r3, r7, r3
   18698:	781a      	ldrb	r2, [r3, #0]
   1869a:	4b39      	ldr	r3, [pc, #228]	; (18780 <store_file_packet+0x1b0>)
   1869c:	0019      	movs	r1, r3
   1869e:	2001      	movs	r0, #1
   186a0:	4b2a      	ldr	r3, [pc, #168]	; (1874c <store_file_packet+0x17c>)
   186a2:	4798      	blx	r3
            return;
   186a4:	e04c      	b.n	18740 <store_file_packet+0x170>
        }

        received_file_size = 0;
   186a6:	4b37      	ldr	r3, [pc, #220]	; (18784 <store_file_packet+0x1b4>)
   186a8:	2200      	movs	r2, #0
   186aa:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   186ac:	2008      	movs	r0, #8
   186ae:	4b33      	ldr	r3, [pc, #204]	; (1877c <store_file_packet+0x1ac>)
   186b0:	4798      	blx	r3
    }

    if (data != NULL) {
   186b2:	687b      	ldr	r3, [r7, #4]
   186b4:	2b00      	cmp	r3, #0
   186b6:	d043      	beq.n	18740 <store_file_packet+0x170>
        UINT wsize = 0;
   186b8:	2300      	movs	r3, #0
   186ba:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   186bc:	2313      	movs	r3, #19
   186be:	18fc      	adds	r4, r7, r3
   186c0:	230c      	movs	r3, #12
   186c2:	18fb      	adds	r3, r7, r3
   186c4:	683a      	ldr	r2, [r7, #0]
   186c6:	6879      	ldr	r1, [r7, #4]
   186c8:	4827      	ldr	r0, [pc, #156]	; (18768 <store_file_packet+0x198>)
   186ca:	4d2f      	ldr	r5, [pc, #188]	; (18788 <store_file_packet+0x1b8>)
   186cc:	47a8      	blx	r5
   186ce:	0003      	movs	r3, r0
   186d0:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   186d2:	2313      	movs	r3, #19
   186d4:	18fb      	adds	r3, r7, r3
   186d6:	781b      	ldrb	r3, [r3, #0]
   186d8:	2b00      	cmp	r3, #0
   186da:	d00c      	beq.n	186f6 <store_file_packet+0x126>
            f_close(&file_object);
   186dc:	4b22      	ldr	r3, [pc, #136]	; (18768 <store_file_packet+0x198>)
   186de:	0018      	movs	r0, r3
   186e0:	4b2a      	ldr	r3, [pc, #168]	; (1878c <store_file_packet+0x1bc>)
   186e2:	4798      	blx	r3
            add_state(CANCELED);
   186e4:	2020      	movs	r0, #32
   186e6:	4b25      	ldr	r3, [pc, #148]	; (1877c <store_file_packet+0x1ac>)
   186e8:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   186ea:	4b29      	ldr	r3, [pc, #164]	; (18790 <store_file_packet+0x1c0>)
   186ec:	0019      	movs	r1, r3
   186ee:	2001      	movs	r0, #1
   186f0:	4b16      	ldr	r3, [pc, #88]	; (1874c <store_file_packet+0x17c>)
   186f2:	4798      	blx	r3
            return;
   186f4:	e024      	b.n	18740 <store_file_packet+0x170>
        }

        received_file_size += wsize;
   186f6:	4b23      	ldr	r3, [pc, #140]	; (18784 <store_file_packet+0x1b4>)
   186f8:	681a      	ldr	r2, [r3, #0]
   186fa:	68fb      	ldr	r3, [r7, #12]
   186fc:	18d2      	adds	r2, r2, r3
   186fe:	4b21      	ldr	r3, [pc, #132]	; (18784 <store_file_packet+0x1b4>)
   18700:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   18702:	4b20      	ldr	r3, [pc, #128]	; (18784 <store_file_packet+0x1b4>)
   18704:	681a      	ldr	r2, [r3, #0]
   18706:	4b23      	ldr	r3, [pc, #140]	; (18794 <store_file_packet+0x1c4>)
   18708:	681b      	ldr	r3, [r3, #0]
   1870a:	4923      	ldr	r1, [pc, #140]	; (18798 <store_file_packet+0x1c8>)
   1870c:	2001      	movs	r0, #1
   1870e:	4c0f      	ldr	r4, [pc, #60]	; (1874c <store_file_packet+0x17c>)
   18710:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   18712:	4b1c      	ldr	r3, [pc, #112]	; (18784 <store_file_packet+0x1b4>)
   18714:	681a      	ldr	r2, [r3, #0]
   18716:	4b1f      	ldr	r3, [pc, #124]	; (18794 <store_file_packet+0x1c4>)
   18718:	681b      	ldr	r3, [r3, #0]
   1871a:	429a      	cmp	r2, r3
   1871c:	d310      	bcc.n	18740 <store_file_packet+0x170>
            f_close(&file_object);
   1871e:	4b12      	ldr	r3, [pc, #72]	; (18768 <store_file_packet+0x198>)
   18720:	0018      	movs	r0, r3
   18722:	4b1a      	ldr	r3, [pc, #104]	; (1878c <store_file_packet+0x1bc>)
   18724:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   18726:	4b1d      	ldr	r3, [pc, #116]	; (1879c <store_file_packet+0x1cc>)
   18728:	0019      	movs	r1, r3
   1872a:	2001      	movs	r0, #1
   1872c:	4b07      	ldr	r3, [pc, #28]	; (1874c <store_file_packet+0x17c>)
   1872e:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   18730:	2100      	movs	r1, #0
   18732:	2017      	movs	r0, #23
   18734:	4b1a      	ldr	r3, [pc, #104]	; (187a0 <store_file_packet+0x1d0>)
   18736:	4798      	blx	r3
            add_state(COMPLETED);
   18738:	2010      	movs	r0, #16
   1873a:	4b10      	ldr	r3, [pc, #64]	; (1877c <store_file_packet+0x1ac>)
   1873c:	4798      	blx	r3
            return;
   1873e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   18740:	46bd      	mov	sp, r7
   18742:	b006      	add	sp, #24
   18744:	bdb0      	pop	{r4, r5, r7, pc}
   18746:	46c0      	nop			; (mov r8, r8)
   18748:	00039714 	.word	0x00039714
   1874c:	000202d1 	.word	0x000202d1
   18750:	000181ed 	.word	0x000181ed
   18754:	200000bc 	.word	0x200000bc
   18758:	00039712 	.word	0x00039712
   1875c:	00037d03 	.word	0x00037d03
   18760:	200000be 	.word	0x200000be
   18764:	00037cb7 	.word	0x00037cb7
   18768:	20000710 	.word	0x20000710
   1876c:	00018271 	.word	0x00018271
   18770:	00039778 	.word	0x00039778
   18774:	0002fd65 	.word	0x0002fd65
   18778:	00039738 	.word	0x00039738
   1877c:	000181c5 	.word	0x000181c5
   18780:	000397a0 	.word	0x000397a0
   18784:	20000738 	.word	0x20000738
   18788:	00030295 	.word	0x00030295
   1878c:	00030765 	.word	0x00030765
   18790:	000397d4 	.word	0x000397d4
   18794:	20000734 	.word	0x20000734
   18798:	00039810 	.word	0x00039810
   1879c:	00039844 	.word	0x00039844
   187a0:	00018129 	.word	0x00018129

000187a4 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   187a4:	b590      	push	{r4, r7, lr}
   187a6:	b085      	sub	sp, #20
   187a8:	af00      	add	r7, sp, #0
   187aa:	60f8      	str	r0, [r7, #12]
   187ac:	60b9      	str	r1, [r7, #8]
   187ae:	607a      	str	r2, [r7, #4]
    switch (type) {
   187b0:	68bb      	ldr	r3, [r7, #8]
   187b2:	2b04      	cmp	r3, #4
   187b4:	d900      	bls.n	187b8 <http_client_callback+0x14>
   187b6:	e077      	b.n	188a8 <http_client_callback+0x104>
   187b8:	68bb      	ldr	r3, [r7, #8]
   187ba:	009a      	lsls	r2, r3, #2
   187bc:	4b3c      	ldr	r3, [pc, #240]	; (188b0 <http_client_callback+0x10c>)
   187be:	18d3      	adds	r3, r2, r3
   187c0:	681b      	ldr	r3, [r3, #0]
   187c2:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   187c4:	4b3b      	ldr	r3, [pc, #236]	; (188b4 <http_client_callback+0x110>)
   187c6:	0019      	movs	r1, r3
   187c8:	2001      	movs	r0, #1
   187ca:	4b3b      	ldr	r3, [pc, #236]	; (188b8 <http_client_callback+0x114>)
   187cc:	4798      	blx	r3
            break;
   187ce:	e06b      	b.n	188a8 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   187d0:	4b3a      	ldr	r3, [pc, #232]	; (188bc <http_client_callback+0x118>)
   187d2:	0019      	movs	r1, r3
   187d4:	2001      	movs	r0, #1
   187d6:	4b38      	ldr	r3, [pc, #224]	; (188b8 <http_client_callback+0x114>)
   187d8:	4798      	blx	r3
            add_state(GET_REQUESTED);
   187da:	2004      	movs	r0, #4
   187dc:	4b38      	ldr	r3, [pc, #224]	; (188c0 <http_client_callback+0x11c>)
   187de:	4798      	blx	r3
            break;
   187e0:	e062      	b.n	188a8 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   187e2:	687b      	ldr	r3, [r7, #4]
   187e4:	881b      	ldrh	r3, [r3, #0]
   187e6:	001a      	movs	r2, r3
   187e8:	687b      	ldr	r3, [r7, #4]
   187ea:	685b      	ldr	r3, [r3, #4]
   187ec:	4935      	ldr	r1, [pc, #212]	; (188c4 <http_client_callback+0x120>)
   187ee:	2001      	movs	r0, #1
   187f0:	4c31      	ldr	r4, [pc, #196]	; (188b8 <http_client_callback+0x114>)
   187f2:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   187f4:	687b      	ldr	r3, [r7, #4]
   187f6:	881b      	ldrh	r3, [r3, #0]
   187f8:	2bc8      	cmp	r3, #200	; 0xc8
   187fa:	d10d      	bne.n	18818 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   187fc:	687b      	ldr	r3, [r7, #4]
   187fe:	685a      	ldr	r2, [r3, #4]
   18800:	4b31      	ldr	r3, [pc, #196]	; (188c8 <http_client_callback+0x124>)
   18802:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   18804:	4b31      	ldr	r3, [pc, #196]	; (188cc <http_client_callback+0x128>)
   18806:	2200      	movs	r2, #0
   18808:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   1880a:	687b      	ldr	r3, [r7, #4]
   1880c:	685a      	ldr	r2, [r3, #4]
   1880e:	2380      	movs	r3, #128	; 0x80
   18810:	009b      	lsls	r3, r3, #2
   18812:	429a      	cmp	r2, r3
   18814:	d843      	bhi.n	1889e <http_client_callback+0xfa>
   18816:	e003      	b.n	18820 <http_client_callback+0x7c>
                add_state(CANCELED);
   18818:	2020      	movs	r0, #32
   1881a:	4b29      	ldr	r3, [pc, #164]	; (188c0 <http_client_callback+0x11c>)
   1881c:	4798      	blx	r3
                return;
   1881e:	e043      	b.n	188a8 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   18820:	687b      	ldr	r3, [r7, #4]
   18822:	689a      	ldr	r2, [r3, #8]
   18824:	687b      	ldr	r3, [r7, #4]
   18826:	685b      	ldr	r3, [r3, #4]
   18828:	0019      	movs	r1, r3
   1882a:	0010      	movs	r0, r2
   1882c:	4b28      	ldr	r3, [pc, #160]	; (188d0 <http_client_callback+0x12c>)
   1882e:	4798      	blx	r3
                add_state(COMPLETED);
   18830:	2010      	movs	r0, #16
   18832:	4b23      	ldr	r3, [pc, #140]	; (188c0 <http_client_callback+0x11c>)
   18834:	4798      	blx	r3
            }
            break;
   18836:	e032      	b.n	1889e <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   18838:	687b      	ldr	r3, [r7, #4]
   1883a:	685a      	ldr	r2, [r3, #4]
   1883c:	687b      	ldr	r3, [r7, #4]
   1883e:	681b      	ldr	r3, [r3, #0]
   18840:	0019      	movs	r1, r3
   18842:	0010      	movs	r0, r2
   18844:	4b22      	ldr	r3, [pc, #136]	; (188d0 <http_client_callback+0x12c>)
   18846:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   18848:	687b      	ldr	r3, [r7, #4]
   1884a:	7a1b      	ldrb	r3, [r3, #8]
   1884c:	2b00      	cmp	r3, #0
   1884e:	d028      	beq.n	188a2 <http_client_callback+0xfe>
                add_state(COMPLETED);
   18850:	2010      	movs	r0, #16
   18852:	4b1b      	ldr	r3, [pc, #108]	; (188c0 <http_client_callback+0x11c>)
   18854:	4798      	blx	r3
            }

            break;
   18856:	e024      	b.n	188a2 <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   18858:	687b      	ldr	r3, [r7, #4]
   1885a:	681a      	ldr	r2, [r3, #0]
   1885c:	4b1d      	ldr	r3, [pc, #116]	; (188d4 <http_client_callback+0x130>)
   1885e:	0019      	movs	r1, r3
   18860:	2001      	movs	r0, #1
   18862:	4b15      	ldr	r3, [pc, #84]	; (188b8 <http_client_callback+0x114>)
   18864:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   18866:	687b      	ldr	r3, [r7, #4]
   18868:	681b      	ldr	r3, [r3, #0]
   1886a:	330b      	adds	r3, #11
   1886c:	d11b      	bne.n	188a6 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   1886e:	2008      	movs	r0, #8
   18870:	4b19      	ldr	r3, [pc, #100]	; (188d8 <http_client_callback+0x134>)
   18872:	4798      	blx	r3
   18874:	1e03      	subs	r3, r0, #0
   18876:	d006      	beq.n	18886 <http_client_callback+0xe2>
                    f_close(&file_object);
   18878:	4b18      	ldr	r3, [pc, #96]	; (188dc <http_client_callback+0x138>)
   1887a:	0018      	movs	r0, r3
   1887c:	4b18      	ldr	r3, [pc, #96]	; (188e0 <http_client_callback+0x13c>)
   1887e:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   18880:	2008      	movs	r0, #8
   18882:	4b18      	ldr	r3, [pc, #96]	; (188e4 <http_client_callback+0x140>)
   18884:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   18886:	2004      	movs	r0, #4
   18888:	4b13      	ldr	r3, [pc, #76]	; (188d8 <http_client_callback+0x134>)
   1888a:	4798      	blx	r3
   1888c:	1e03      	subs	r3, r0, #0
   1888e:	d002      	beq.n	18896 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   18890:	2004      	movs	r0, #4
   18892:	4b14      	ldr	r3, [pc, #80]	; (188e4 <http_client_callback+0x140>)
   18894:	4798      	blx	r3
                }

                start_download();
   18896:	4b14      	ldr	r3, [pc, #80]	; (188e8 <http_client_callback+0x144>)
   18898:	4798      	blx	r3
            }

            break;
   1889a:	46c0      	nop			; (mov r8, r8)
   1889c:	e003      	b.n	188a6 <http_client_callback+0x102>
            break;
   1889e:	46c0      	nop			; (mov r8, r8)
   188a0:	e002      	b.n	188a8 <http_client_callback+0x104>
            break;
   188a2:	46c0      	nop			; (mov r8, r8)
   188a4:	e000      	b.n	188a8 <http_client_callback+0x104>
            break;
   188a6:	46c0      	nop			; (mov r8, r8)
    }
}
   188a8:	46bd      	mov	sp, r7
   188aa:	b005      	add	sp, #20
   188ac:	bd90      	pop	{r4, r7, pc}
   188ae:	46c0      	nop			; (mov r8, r8)
   188b0:	0003a00c 	.word	0x0003a00c
   188b4:	00039878 	.word	0x00039878
   188b8:	000202d1 	.word	0x000202d1
   188bc:	000398b0 	.word	0x000398b0
   188c0:	000181c5 	.word	0x000181c5
   188c4:	000398dc 	.word	0x000398dc
   188c8:	20000734 	.word	0x20000734
   188cc:	20000738 	.word	0x20000738
   188d0:	000185d1 	.word	0x000185d1
   188d4:	00039918 	.word	0x00039918
   188d8:	000181ed 	.word	0x000181ed
   188dc:	20000710 	.word	0x20000710
   188e0:	00030765 	.word	0x00030765
   188e4:	00018191 	.word	0x00018191
   188e8:	00018515 	.word	0x00018515

000188ec <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   188ec:	b580      	push	{r7, lr}
   188ee:	b082      	sub	sp, #8
   188f0:	af00      	add	r7, sp, #0
   188f2:	603a      	str	r2, [r7, #0]
   188f4:	1dfb      	adds	r3, r7, #7
   188f6:	1c02      	adds	r2, r0, #0
   188f8:	701a      	strb	r2, [r3, #0]
   188fa:	1dbb      	adds	r3, r7, #6
   188fc:	1c0a      	adds	r2, r1, #0
   188fe:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   18900:	683a      	ldr	r2, [r7, #0]
   18902:	1dbb      	adds	r3, r7, #6
   18904:	7819      	ldrb	r1, [r3, #0]
   18906:	1dfb      	adds	r3, r7, #7
   18908:	781b      	ldrb	r3, [r3, #0]
   1890a:	b25b      	sxtb	r3, r3
   1890c:	0018      	movs	r0, r3
   1890e:	4b03      	ldr	r3, [pc, #12]	; (1891c <socket_cb+0x30>)
   18910:	4798      	blx	r3
}
   18912:	46c0      	nop			; (mov r8, r8)
   18914:	46bd      	mov	sp, r7
   18916:	b002      	add	sp, #8
   18918:	bd80      	pop	{r7, pc}
   1891a:	46c0      	nop			; (mov r8, r8)
   1891c:	000330c9 	.word	0x000330c9

00018920 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   18920:	b5b0      	push	{r4, r5, r7, lr}
   18922:	b086      	sub	sp, #24
   18924:	af04      	add	r7, sp, #16
   18926:	6078      	str	r0, [r7, #4]
   18928:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   1892a:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   1892c:	22ff      	movs	r2, #255	; 0xff
   1892e:	4013      	ands	r3, r2
   18930:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   18932:	683b      	ldr	r3, [r7, #0]
   18934:	0a1b      	lsrs	r3, r3, #8
   18936:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   18938:	23ff      	movs	r3, #255	; 0xff
   1893a:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   1893c:	683a      	ldr	r2, [r7, #0]
   1893e:	0c12      	lsrs	r2, r2, #16
   18940:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   18942:	22ff      	movs	r2, #255	; 0xff
   18944:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   18946:	6839      	ldr	r1, [r7, #0]
   18948:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   1894a:	000d      	movs	r5, r1
   1894c:	6878      	ldr	r0, [r7, #4]
   1894e:	4909      	ldr	r1, [pc, #36]	; (18974 <resolve_cb+0x54>)
   18950:	9502      	str	r5, [sp, #8]
   18952:	9201      	str	r2, [sp, #4]
   18954:	9300      	str	r3, [sp, #0]
   18956:	0023      	movs	r3, r4
   18958:	0002      	movs	r2, r0
   1895a:	2001      	movs	r0, #1
   1895c:	4c06      	ldr	r4, [pc, #24]	; (18978 <resolve_cb+0x58>)
   1895e:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   18960:	683a      	ldr	r2, [r7, #0]
   18962:	687b      	ldr	r3, [r7, #4]
   18964:	0011      	movs	r1, r2
   18966:	0018      	movs	r0, r3
   18968:	4b04      	ldr	r3, [pc, #16]	; (1897c <resolve_cb+0x5c>)
   1896a:	4798      	blx	r3
}
   1896c:	46c0      	nop			; (mov r8, r8)
   1896e:	46bd      	mov	sp, r7
   18970:	b002      	add	sp, #8
   18972:	bdb0      	pop	{r4, r5, r7, pc}
   18974:	00039948 	.word	0x00039948
   18978:	000202d1 	.word	0x000202d1
   1897c:	0003322d 	.word	0x0003322d

00018980 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   18980:	b590      	push	{r4, r7, lr}
   18982:	b087      	sub	sp, #28
   18984:	af02      	add	r7, sp, #8
   18986:	0002      	movs	r2, r0
   18988:	6039      	str	r1, [r7, #0]
   1898a:	1dfb      	adds	r3, r7, #7
   1898c:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   1898e:	1dfb      	adds	r3, r7, #7
   18990:	781b      	ldrb	r3, [r3, #0]
   18992:	2b2c      	cmp	r3, #44	; 0x2c
   18994:	d002      	beq.n	1899c <wifi_cb+0x1c>
   18996:	2b32      	cmp	r3, #50	; 0x32
   18998:	d04d      	beq.n	18a36 <wifi_cb+0xb6>
                }
            }
        } break;

        default:
            break;
   1899a:	e07f      	b.n	18a9c <wifi_cb+0x11c>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   1899c:	683b      	ldr	r3, [r7, #0]
   1899e:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   189a0:	68fb      	ldr	r3, [r7, #12]
   189a2:	781b      	ldrb	r3, [r3, #0]
   189a4:	2b01      	cmp	r3, #1
   189a6:	d10a      	bne.n	189be <wifi_cb+0x3e>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   189a8:	4b3e      	ldr	r3, [pc, #248]	; (18aa4 <wifi_cb+0x124>)
   189aa:	0019      	movs	r1, r3
   189ac:	2001      	movs	r0, #1
   189ae:	4b3e      	ldr	r3, [pc, #248]	; (18aa8 <wifi_cb+0x128>)
   189b0:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   189b2:	4b3e      	ldr	r3, [pc, #248]	; (18aac <wifi_cb+0x12c>)
   189b4:	4798      	blx	r3
				wifi_status = true;
   189b6:	4b3e      	ldr	r3, [pc, #248]	; (18ab0 <wifi_cb+0x130>)
   189b8:	2201      	movs	r2, #1
   189ba:	701a      	strb	r2, [r3, #0]
            break;
   189bc:	e06b      	b.n	18a96 <wifi_cb+0x116>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   189be:	68fb      	ldr	r3, [r7, #12]
   189c0:	781b      	ldrb	r3, [r3, #0]
   189c2:	2b00      	cmp	r3, #0
   189c4:	d167      	bne.n	18a96 <wifi_cb+0x116>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   189c6:	4b3b      	ldr	r3, [pc, #236]	; (18ab4 <wifi_cb+0x134>)
   189c8:	0019      	movs	r1, r3
   189ca:	2001      	movs	r0, #1
   189cc:	4b36      	ldr	r3, [pc, #216]	; (18aa8 <wifi_cb+0x128>)
   189ce:	4798      	blx	r3
				wifi_status = false;
   189d0:	4b37      	ldr	r3, [pc, #220]	; (18ab0 <wifi_cb+0x130>)
   189d2:	2200      	movs	r2, #0
   189d4:	701a      	strb	r2, [r3, #0]
				drawString(20,30,"Wifi is not Connected!",RED,WHITE);
   189d6:	4938      	ldr	r1, [pc, #224]	; (18ab8 <wifi_cb+0x138>)
   189d8:	4a38      	ldr	r2, [pc, #224]	; (18abc <wifi_cb+0x13c>)
   189da:	2301      	movs	r3, #1
   189dc:	425b      	negs	r3, r3
   189de:	9300      	str	r3, [sp, #0]
   189e0:	000b      	movs	r3, r1
   189e2:	211e      	movs	r1, #30
   189e4:	2014      	movs	r0, #20
   189e6:	4c36      	ldr	r4, [pc, #216]	; (18ac0 <wifi_cb+0x140>)
   189e8:	47a0      	blx	r4
                clear_state(WIFI_CONNECTED);
   189ea:	2002      	movs	r0, #2
   189ec:	4b35      	ldr	r3, [pc, #212]	; (18ac4 <wifi_cb+0x144>)
   189ee:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   189f0:	2008      	movs	r0, #8
   189f2:	4b35      	ldr	r3, [pc, #212]	; (18ac8 <wifi_cb+0x148>)
   189f4:	4798      	blx	r3
   189f6:	1e03      	subs	r3, r0, #0
   189f8:	d006      	beq.n	18a08 <wifi_cb+0x88>
                    f_close(&file_object);
   189fa:	4b34      	ldr	r3, [pc, #208]	; (18acc <wifi_cb+0x14c>)
   189fc:	0018      	movs	r0, r3
   189fe:	4b34      	ldr	r3, [pc, #208]	; (18ad0 <wifi_cb+0x150>)
   18a00:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   18a02:	2008      	movs	r0, #8
   18a04:	4b2f      	ldr	r3, [pc, #188]	; (18ac4 <wifi_cb+0x144>)
   18a06:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   18a08:	2004      	movs	r0, #4
   18a0a:	4b2f      	ldr	r3, [pc, #188]	; (18ac8 <wifi_cb+0x148>)
   18a0c:	4798      	blx	r3
   18a0e:	1e03      	subs	r3, r0, #0
   18a10:	d002      	beq.n	18a18 <wifi_cb+0x98>
                    clear_state(GET_REQUESTED);
   18a12:	2004      	movs	r0, #4
   18a14:	4b2b      	ldr	r3, [pc, #172]	; (18ac4 <wifi_cb+0x144>)
   18a16:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   18a18:	4b2e      	ldr	r3, [pc, #184]	; (18ad4 <wifi_cb+0x154>)
   18a1a:	2101      	movs	r1, #1
   18a1c:	0018      	movs	r0, r3
   18a1e:	4b2e      	ldr	r3, [pc, #184]	; (18ad8 <wifi_cb+0x158>)
   18a20:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   18a22:	4a2e      	ldr	r2, [pc, #184]	; (18adc <wifi_cb+0x15c>)
   18a24:	482e      	ldr	r0, [pc, #184]	; (18ae0 <wifi_cb+0x160>)
   18a26:	23ff      	movs	r3, #255	; 0xff
   18a28:	9300      	str	r3, [sp, #0]
   18a2a:	0013      	movs	r3, r2
   18a2c:	2202      	movs	r2, #2
   18a2e:	2112      	movs	r1, #18
   18a30:	4c2c      	ldr	r4, [pc, #176]	; (18ae4 <wifi_cb+0x164>)
   18a32:	47a0      	blx	r4
            break;
   18a34:	e02f      	b.n	18a96 <wifi_cb+0x116>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   18a36:	683b      	ldr	r3, [r7, #0]
   18a38:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   18a3a:	68bb      	ldr	r3, [r7, #8]
   18a3c:	781b      	ldrb	r3, [r3, #0]
   18a3e:	0018      	movs	r0, r3
   18a40:	68bb      	ldr	r3, [r7, #8]
   18a42:	3301      	adds	r3, #1
   18a44:	781b      	ldrb	r3, [r3, #0]
   18a46:	001c      	movs	r4, r3
   18a48:	68bb      	ldr	r3, [r7, #8]
   18a4a:	3302      	adds	r3, #2
   18a4c:	781b      	ldrb	r3, [r3, #0]
   18a4e:	001a      	movs	r2, r3
   18a50:	68bb      	ldr	r3, [r7, #8]
   18a52:	3303      	adds	r3, #3
   18a54:	781b      	ldrb	r3, [r3, #0]
   18a56:	4924      	ldr	r1, [pc, #144]	; (18ae8 <wifi_cb+0x168>)
   18a58:	9301      	str	r3, [sp, #4]
   18a5a:	9200      	str	r2, [sp, #0]
   18a5c:	0023      	movs	r3, r4
   18a5e:	0002      	movs	r2, r0
   18a60:	2001      	movs	r0, #1
   18a62:	4c11      	ldr	r4, [pc, #68]	; (18aa8 <wifi_cb+0x128>)
   18a64:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   18a66:	2002      	movs	r0, #2
   18a68:	4b20      	ldr	r3, [pc, #128]	; (18aec <wifi_cb+0x16c>)
   18a6a:	4798      	blx	r3
            if (do_download_flag == 1) {
   18a6c:	4b20      	ldr	r3, [pc, #128]	; (18af0 <wifi_cb+0x170>)
   18a6e:	781b      	ldrb	r3, [r3, #0]
   18a70:	2b01      	cmp	r3, #1
   18a72:	d102      	bne.n	18a7a <wifi_cb+0xfa>
                start_download();
   18a74:	4b1f      	ldr	r3, [pc, #124]	; (18af4 <wifi_cb+0x174>)
   18a76:	4798      	blx	r3
        } break;
   18a78:	e00f      	b.n	18a9a <wifi_cb+0x11a>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   18a7a:	4a1f      	ldr	r2, [pc, #124]	; (18af8 <wifi_cb+0x178>)
   18a7c:	4b15      	ldr	r3, [pc, #84]	; (18ad4 <wifi_cb+0x154>)
   18a7e:	0011      	movs	r1, r2
   18a80:	0018      	movs	r0, r3
   18a82:	4b1e      	ldr	r3, [pc, #120]	; (18afc <wifi_cb+0x17c>)
   18a84:	4798      	blx	r3
   18a86:	1e03      	subs	r3, r0, #0
   18a88:	d007      	beq.n	18a9a <wifi_cb+0x11a>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   18a8a:	4b1d      	ldr	r3, [pc, #116]	; (18b00 <wifi_cb+0x180>)
   18a8c:	0019      	movs	r1, r3
   18a8e:	2001      	movs	r0, #1
   18a90:	4b05      	ldr	r3, [pc, #20]	; (18aa8 <wifi_cb+0x128>)
   18a92:	4798      	blx	r3
        } break;
   18a94:	e001      	b.n	18a9a <wifi_cb+0x11a>
            break;
   18a96:	46c0      	nop			; (mov r8, r8)
   18a98:	e000      	b.n	18a9c <wifi_cb+0x11c>
        } break;
   18a9a:	46c0      	nop			; (mov r8, r8)
    }
}
   18a9c:	46c0      	nop			; (mov r8, r8)
   18a9e:	46bd      	mov	sp, r7
   18aa0:	b005      	add	sp, #20
   18aa2:	bd90      	pop	{r4, r7, pc}
   18aa4:	00039978 	.word	0x00039978
   18aa8:	000202d1 	.word	0x000202d1
   18aac:	0002483d 	.word	0x0002483d
   18ab0:	200004c5 	.word	0x200004c5
   18ab4:	00039998 	.word	0x00039998
   18ab8:	fffff800 	.word	0xfffff800
   18abc:	000399bc 	.word	0x000399bc
   18ac0:	0001749d 	.word	0x0001749d
   18ac4:	00018191 	.word	0x00018191
   18ac8:	000181ed 	.word	0x000181ed
   18acc:	20000710 	.word	0x20000710
   18ad0:	00030765 	.word	0x00030765
   18ad4:	2000073c 	.word	0x2000073c
   18ad8:	00031d75 	.word	0x00031d75
   18adc:	000399d4 	.word	0x000399d4
   18ae0:	000399e4 	.word	0x000399e4
   18ae4:	00024369 	.word	0x00024369
   18ae8:	000399f8 	.word	0x000399f8
   18aec:	000181c5 	.word	0x000181c5
   18af0:	200004dc 	.word	0x200004dc
   18af4:	00018515 	.word	0x00018515
   18af8:	000395f0 	.word	0x000395f0
   18afc:	00031c41 	.word	0x00031c41
   18b00:	00039a20 	.word	0x00039a20

00018b04 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   18b04:	b590      	push	{r4, r7, lr}
   18b06:	b083      	sub	sp, #12
   18b08:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   18b0a:	4b29      	ldr	r3, [pc, #164]	; (18bb0 <init_storage+0xac>)
   18b0c:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   18b0e:	4b29      	ldr	r3, [pc, #164]	; (18bb4 <init_storage+0xb0>)
   18b10:	0019      	movs	r1, r3
   18b12:	2001      	movs	r0, #1
   18b14:	4b28      	ldr	r3, [pc, #160]	; (18bb8 <init_storage+0xb4>)
   18b16:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   18b18:	1dfc      	adds	r4, r7, #7
   18b1a:	2000      	movs	r0, #0
   18b1c:	4b27      	ldr	r3, [pc, #156]	; (18bbc <init_storage+0xb8>)
   18b1e:	4798      	blx	r3
   18b20:	0003      	movs	r3, r0
   18b22:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   18b24:	1dfb      	adds	r3, r7, #7
   18b26:	781b      	ldrb	r3, [r3, #0]
   18b28:	2b01      	cmp	r3, #1
   18b2a:	d110      	bne.n	18b4e <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   18b2c:	4b24      	ldr	r3, [pc, #144]	; (18bc0 <init_storage+0xbc>)
   18b2e:	0019      	movs	r1, r3
   18b30:	2001      	movs	r0, #1
   18b32:	4b21      	ldr	r3, [pc, #132]	; (18bb8 <init_storage+0xb4>)
   18b34:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   18b36:	4b23      	ldr	r3, [pc, #140]	; (18bc4 <init_storage+0xc0>)
   18b38:	0019      	movs	r1, r3
   18b3a:	2001      	movs	r0, #1
   18b3c:	4b1e      	ldr	r3, [pc, #120]	; (18bb8 <init_storage+0xb4>)
   18b3e:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   18b40:	46c0      	nop			; (mov r8, r8)
   18b42:	2000      	movs	r0, #0
   18b44:	4b20      	ldr	r3, [pc, #128]	; (18bc8 <init_storage+0xc4>)
   18b46:	4798      	blx	r3
   18b48:	0003      	movs	r3, r0
   18b4a:	2b02      	cmp	r3, #2
   18b4c:	d1f9      	bne.n	18b42 <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   18b4e:	1dfb      	adds	r3, r7, #7
   18b50:	781b      	ldrb	r3, [r3, #0]
   18b52:	2b00      	cmp	r3, #0
   18b54:	d1e0      	bne.n	18b18 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   18b56:	4b1d      	ldr	r3, [pc, #116]	; (18bcc <init_storage+0xc8>)
   18b58:	0019      	movs	r1, r3
   18b5a:	2001      	movs	r0, #1
   18b5c:	4b16      	ldr	r3, [pc, #88]	; (18bb8 <init_storage+0xb4>)
   18b5e:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   18b60:	238c      	movs	r3, #140	; 0x8c
   18b62:	009a      	lsls	r2, r3, #2
   18b64:	4b1a      	ldr	r3, [pc, #104]	; (18bd0 <init_storage+0xcc>)
   18b66:	2100      	movs	r1, #0
   18b68:	0018      	movs	r0, r3
   18b6a:	4b1a      	ldr	r3, [pc, #104]	; (18bd4 <init_storage+0xd0>)
   18b6c:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   18b6e:	1dbc      	adds	r4, r7, #6
   18b70:	4b17      	ldr	r3, [pc, #92]	; (18bd0 <init_storage+0xcc>)
   18b72:	0019      	movs	r1, r3
   18b74:	2000      	movs	r0, #0
   18b76:	4b18      	ldr	r3, [pc, #96]	; (18bd8 <init_storage+0xd4>)
   18b78:	4798      	blx	r3
   18b7a:	0003      	movs	r3, r0
   18b7c:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   18b7e:	1dbb      	adds	r3, r7, #6
   18b80:	781b      	ldrb	r3, [r3, #0]
   18b82:	2b0b      	cmp	r3, #11
   18b84:	d107      	bne.n	18b96 <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   18b86:	1dbb      	adds	r3, r7, #6
   18b88:	781a      	ldrb	r2, [r3, #0]
   18b8a:	4b14      	ldr	r3, [pc, #80]	; (18bdc <init_storage+0xd8>)
   18b8c:	0019      	movs	r1, r3
   18b8e:	2001      	movs	r0, #1
   18b90:	4b09      	ldr	r3, [pc, #36]	; (18bb8 <init_storage+0xb4>)
   18b92:	4798      	blx	r3
            return;
   18b94:	e008      	b.n	18ba8 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   18b96:	4b12      	ldr	r3, [pc, #72]	; (18be0 <init_storage+0xdc>)
   18b98:	0019      	movs	r1, r3
   18b9a:	2001      	movs	r0, #1
   18b9c:	4b06      	ldr	r3, [pc, #24]	; (18bb8 <init_storage+0xb4>)
   18b9e:	4798      	blx	r3
        add_state(STORAGE_READY);
   18ba0:	2001      	movs	r0, #1
   18ba2:	4b10      	ldr	r3, [pc, #64]	; (18be4 <init_storage+0xe0>)
   18ba4:	4798      	blx	r3
        return;
   18ba6:	46c0      	nop			; (mov r8, r8)
    }
}
   18ba8:	46bd      	mov	sp, r7
   18baa:	b003      	add	sp, #12
   18bac:	bd90      	pop	{r4, r7, pc}
   18bae:	46c0      	nop			; (mov r8, r8)
   18bb0:	000210e9 	.word	0x000210e9
   18bb4:	00039a44 	.word	0x00039a44
   18bb8:	000202d1 	.word	0x000202d1
   18bbc:	000215c5 	.word	0x000215c5
   18bc0:	00039a7c 	.word	0x00039a7c
   18bc4:	00039aa4 	.word	0x00039aa4
   18bc8:	00021139 	.word	0x00021139
   18bcc:	00039ad8 	.word	0x00039ad8
   18bd0:	200004e0 	.word	0x200004e0
   18bd4:	0003794b 	.word	0x0003794b
   18bd8:	0002fd0d 	.word	0x0002fd0d
   18bdc:	00039afc 	.word	0x00039afc
   18be0:	00039b2c 	.word	0x00039b2c
   18be4:	000181c5 	.word	0x000181c5

00018be8 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   18be8:	b580      	push	{r7, lr}
   18bea:	b082      	sub	sp, #8
   18bec:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   18bee:	1d3b      	adds	r3, r7, #4
   18bf0:	0018      	movs	r0, r3
   18bf2:	4b08      	ldr	r3, [pc, #32]	; (18c14 <configure_timer+0x2c>)
   18bf4:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   18bf6:	1d3a      	adds	r2, r7, #4
   18bf8:	4b07      	ldr	r3, [pc, #28]	; (18c18 <configure_timer+0x30>)
   18bfa:	0011      	movs	r1, r2
   18bfc:	0018      	movs	r0, r3
   18bfe:	4b07      	ldr	r3, [pc, #28]	; (18c1c <configure_timer+0x34>)
   18c00:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   18c02:	4b05      	ldr	r3, [pc, #20]	; (18c18 <configure_timer+0x30>)
   18c04:	0018      	movs	r0, r3
   18c06:	4b06      	ldr	r3, [pc, #24]	; (18c20 <configure_timer+0x38>)
   18c08:	4798      	blx	r3
}
   18c0a:	46c0      	nop			; (mov r8, r8)
   18c0c:	46bd      	mov	sp, r7
   18c0e:	b002      	add	sp, #8
   18c10:	bd80      	pop	{r7, pc}
   18c12:	46c0      	nop			; (mov r8, r8)
   18c14:	0003485d 	.word	0x0003485d
   18c18:	2000475c 	.word	0x2000475c
   18c1c:	00034881 	.word	0x00034881
   18c20:	0003496d 	.word	0x0003496d

00018c24 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   18c24:	b580      	push	{r7, lr}
   18c26:	b088      	sub	sp, #32
   18c28:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   18c2a:	003b      	movs	r3, r7
   18c2c:	0018      	movs	r0, r3
   18c2e:	4b16      	ldr	r3, [pc, #88]	; (18c88 <configure_http_client+0x64>)
   18c30:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   18c32:	003b      	movs	r3, r7
   18c34:	2280      	movs	r2, #128	; 0x80
   18c36:	0092      	lsls	r2, r2, #2
   18c38:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   18c3a:	003b      	movs	r3, r7
   18c3c:	4a13      	ldr	r2, [pc, #76]	; (18c8c <configure_http_client+0x68>)
   18c3e:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 443;
   18c40:	003b      	movs	r3, r7
   18c42:	22bc      	movs	r2, #188	; 0xbc
   18c44:	32ff      	adds	r2, #255	; 0xff
   18c46:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 1;
   18c48:	003b      	movs	r3, r7
   18c4a:	2201      	movs	r2, #1
   18c4c:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   18c4e:	003a      	movs	r2, r7
   18c50:	4b0f      	ldr	r3, [pc, #60]	; (18c90 <configure_http_client+0x6c>)
   18c52:	0011      	movs	r1, r2
   18c54:	0018      	movs	r0, r3
   18c56:	4b0f      	ldr	r3, [pc, #60]	; (18c94 <configure_http_client+0x70>)
   18c58:	4798      	blx	r3
   18c5a:	0003      	movs	r3, r0
   18c5c:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   18c5e:	69fb      	ldr	r3, [r7, #28]
   18c60:	2b00      	cmp	r3, #0
   18c62:	da06      	bge.n	18c72 <configure_http_client+0x4e>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   18c64:	69fa      	ldr	r2, [r7, #28]
   18c66:	4b0c      	ldr	r3, [pc, #48]	; (18c98 <configure_http_client+0x74>)
   18c68:	0019      	movs	r1, r3
   18c6a:	2001      	movs	r0, #1
   18c6c:	4b0b      	ldr	r3, [pc, #44]	; (18c9c <configure_http_client+0x78>)
   18c6e:	4798      	blx	r3
        while (1) {
   18c70:	e7fe      	b.n	18c70 <configure_http_client+0x4c>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   18c72:	4a0b      	ldr	r2, [pc, #44]	; (18ca0 <configure_http_client+0x7c>)
   18c74:	4b06      	ldr	r3, [pc, #24]	; (18c90 <configure_http_client+0x6c>)
   18c76:	0011      	movs	r1, r2
   18c78:	0018      	movs	r0, r3
   18c7a:	4b0a      	ldr	r3, [pc, #40]	; (18ca4 <configure_http_client+0x80>)
   18c7c:	4798      	blx	r3
}
   18c7e:	46c0      	nop			; (mov r8, r8)
   18c80:	46bd      	mov	sp, r7
   18c82:	b008      	add	sp, #32
   18c84:	bd80      	pop	{r7, pc}
   18c86:	46c0      	nop			; (mov r8, r8)
   18c88:	00032ef1 	.word	0x00032ef1
   18c8c:	2000475c 	.word	0x2000475c
   18c90:	200047b4 	.word	0x200047b4
   18c94:	00032f3d 	.word	0x00032f3d
   18c98:	00039b50 	.word	0x00039b50
   18c9c:	000202d1 	.word	0x000202d1
   18ca0:	000187a5 	.word	0x000187a5
   18ca4:	00033029 	.word	0x00033029

00018ca8 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   18ca8:	b580      	push	{r7, lr}
   18caa:	b082      	sub	sp, #8
   18cac:	af00      	add	r7, sp, #0
   18cae:	603a      	str	r2, [r7, #0]
   18cb0:	1dfb      	adds	r3, r7, #7
   18cb2:	1c02      	adds	r2, r0, #0
   18cb4:	701a      	strb	r2, [r3, #0]
   18cb6:	1dbb      	adds	r3, r7, #6
   18cb8:	1c0a      	adds	r2, r1, #0
   18cba:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   18cbc:	683a      	ldr	r2, [r7, #0]
   18cbe:	1dbb      	adds	r3, r7, #6
   18cc0:	7819      	ldrb	r1, [r3, #0]
   18cc2:	1dfb      	adds	r3, r7, #7
   18cc4:	781b      	ldrb	r3, [r3, #0]
   18cc6:	b25b      	sxtb	r3, r3
   18cc8:	0018      	movs	r0, r3
   18cca:	4b03      	ldr	r3, [pc, #12]	; (18cd8 <socket_event_handler+0x30>)
   18ccc:	4798      	blx	r3
}
   18cce:	46c0      	nop			; (mov r8, r8)
   18cd0:	46bd      	mov	sp, r7
   18cd2:	b002      	add	sp, #8
   18cd4:	bd80      	pop	{r7, pc}
   18cd6:	46c0      	nop			; (mov r8, r8)
   18cd8:	00031be9 	.word	0x00031be9

00018cdc <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   18cdc:	b580      	push	{r7, lr}
   18cde:	b082      	sub	sp, #8
   18ce0:	af00      	add	r7, sp, #0
   18ce2:	6078      	str	r0, [r7, #4]
   18ce4:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   18ce6:	683a      	ldr	r2, [r7, #0]
   18ce8:	687b      	ldr	r3, [r7, #4]
   18cea:	0011      	movs	r1, r2
   18cec:	0018      	movs	r0, r3
   18cee:	4b03      	ldr	r3, [pc, #12]	; (18cfc <socket_resolve_handler+0x20>)
   18cf0:	4798      	blx	r3
}
   18cf2:	46c0      	nop			; (mov r8, r8)
   18cf4:	46bd      	mov	sp, r7
   18cf6:	b002      	add	sp, #8
   18cf8:	bd80      	pop	{r7, pc}
   18cfa:	46c0      	nop			; (mov r8, r8)
   18cfc:	00031c1d 	.word	0x00031c1d

00018d00 <SubscribeHandlerServoTopic>:
        UIChangeColors(rgb[0], rgb[1], rgb[2]);
    }
}

void SubscribeHandlerServoTopic(MessageData *msgData)
{
   18d00:	b580      	push	{r7, lr}
   18d02:	b082      	sub	sp, #8
   18d04:	af00      	add	r7, sp, #0
   18d06:	6078      	str	r0, [r7, #4]
	//LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
	
	// Will receive something of the style "rgb(222, 224, 189)"
	if(strncmp((char *)msgData->topicName->lenstring.data, SERVO_TOPIC,msgData->message->payloadlen) == 0){
   18d08:	687b      	ldr	r3, [r7, #4]
   18d0a:	685b      	ldr	r3, [r3, #4]
   18d0c:	6898      	ldr	r0, [r3, #8]
   18d0e:	687b      	ldr	r3, [r7, #4]
   18d10:	681b      	ldr	r3, [r3, #0]
   18d12:	68da      	ldr	r2, [r3, #12]
   18d14:	4b13      	ldr	r3, [pc, #76]	; (18d64 <SubscribeHandlerServoTopic+0x64>)
   18d16:	0019      	movs	r1, r3
   18d18:	4b13      	ldr	r3, [pc, #76]	; (18d68 <SubscribeHandlerServoTopic+0x68>)
   18d1a:	4798      	blx	r3
   18d1c:	1e03      	subs	r3, r0, #0
   18d1e:	d11c      	bne.n	18d5a <SubscribeHandlerServoTopic+0x5a>
	if (strncmp((char*)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0) {
   18d20:	687b      	ldr	r3, [r7, #4]
   18d22:	681b      	ldr	r3, [r3, #0]
   18d24:	6898      	ldr	r0, [r3, #8]
   18d26:	687b      	ldr	r3, [r7, #4]
   18d28:	681b      	ldr	r3, [r3, #0]
   18d2a:	68da      	ldr	r2, [r3, #12]
   18d2c:	4b0f      	ldr	r3, [pc, #60]	; (18d6c <SubscribeHandlerServoTopic+0x6c>)
   18d2e:	0019      	movs	r1, r3
   18d30:	4b0d      	ldr	r3, [pc, #52]	; (18d68 <SubscribeHandlerServoTopic+0x68>)
   18d32:	4798      	blx	r3
   18d34:	1e03      	subs	r3, r0, #0
   18d36:	d102      	bne.n	18d3e <SubscribeHandlerServoTopic+0x3e>
		lock();
   18d38:	4b0d      	ldr	r3, [pc, #52]	; (18d70 <SubscribeHandlerServoTopic+0x70>)
   18d3a:	4798      	blx	r3
	}
	else if (strncmp((char*)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0) {
		unlock();
	}
	}
}
   18d3c:	e00d      	b.n	18d5a <SubscribeHandlerServoTopic+0x5a>
	else if (strncmp((char*)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0) {
   18d3e:	687b      	ldr	r3, [r7, #4]
   18d40:	681b      	ldr	r3, [r3, #0]
   18d42:	6898      	ldr	r0, [r3, #8]
   18d44:	687b      	ldr	r3, [r7, #4]
   18d46:	681b      	ldr	r3, [r3, #0]
   18d48:	68da      	ldr	r2, [r3, #12]
   18d4a:	4b0a      	ldr	r3, [pc, #40]	; (18d74 <SubscribeHandlerServoTopic+0x74>)
   18d4c:	0019      	movs	r1, r3
   18d4e:	4b06      	ldr	r3, [pc, #24]	; (18d68 <SubscribeHandlerServoTopic+0x68>)
   18d50:	4798      	blx	r3
   18d52:	1e03      	subs	r3, r0, #0
   18d54:	d101      	bne.n	18d5a <SubscribeHandlerServoTopic+0x5a>
		unlock();
   18d56:	4b08      	ldr	r3, [pc, #32]	; (18d78 <SubscribeHandlerServoTopic+0x78>)
   18d58:	4798      	blx	r3
}
   18d5a:	46c0      	nop			; (mov r8, r8)
   18d5c:	46bd      	mov	sp, r7
   18d5e:	b002      	add	sp, #8
   18d60:	bd80      	pop	{r7, pc}
   18d62:	46c0      	nop			; (mov r8, r8)
   18d64:	00039bbc 	.word	0x00039bbc
   18d68:	00037d11 	.word	0x00037d11
   18d6c:	00039bcc 	.word	0x00039bcc
   18d70:	00016c55 	.word	0x00016c55
   18d74:	00039bd4 	.word	0x00039bd4
   18d78:	00016cd1 	.word	0x00016cd1

00018d7c <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   18d7c:	b590      	push	{r4, r7, lr}
   18d7e:	b08b      	sub	sp, #44	; 0x2c
   18d80:	af06      	add	r7, sp, #24
   18d82:	60f8      	str	r0, [r7, #12]
   18d84:	60b9      	str	r1, [r7, #8]
   18d86:	607a      	str	r2, [r7, #4]
    switch (type) {
   18d88:	68bb      	ldr	r3, [r7, #8]
   18d8a:	2b01      	cmp	r3, #1
   18d8c:	d03b      	beq.n	18e06 <mqtt_callback+0x8a>
   18d8e:	2b05      	cmp	r3, #5
   18d90:	d052      	beq.n	18e38 <mqtt_callback+0xbc>
   18d92:	2b00      	cmp	r3, #0
   18d94:	d000      	beq.n	18d98 <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   18d96:	e055      	b.n	18e44 <mqtt_callback+0xc8>
            if (data->sock_connected.result >= 0) {
   18d98:	687b      	ldr	r3, [r7, #4]
   18d9a:	681b      	ldr	r3, [r3, #0]
   18d9c:	2b00      	cmp	r3, #0
   18d9e:	db25      	blt.n	18dec <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   18da0:	4b2a      	ldr	r3, [pc, #168]	; (18e4c <mqtt_callback+0xd0>)
   18da2:	0019      	movs	r1, r3
   18da4:	2001      	movs	r0, #1
   18da6:	4b2a      	ldr	r3, [pc, #168]	; (18e50 <mqtt_callback+0xd4>)
   18da8:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   18daa:	492a      	ldr	r1, [pc, #168]	; (18e54 <mqtt_callback+0xd8>)
   18dac:	4a2a      	ldr	r2, [pc, #168]	; (18e58 <mqtt_callback+0xdc>)
   18dae:	68f8      	ldr	r0, [r7, #12]
   18db0:	2300      	movs	r3, #0
   18db2:	9305      	str	r3, [sp, #20]
   18db4:	2300      	movs	r3, #0
   18db6:	9304      	str	r3, [sp, #16]
   18db8:	2300      	movs	r3, #0
   18dba:	9303      	str	r3, [sp, #12]
   18dbc:	2300      	movs	r3, #0
   18dbe:	9302      	str	r3, [sp, #8]
   18dc0:	2300      	movs	r3, #0
   18dc2:	9301      	str	r3, [sp, #4]
   18dc4:	4b24      	ldr	r3, [pc, #144]	; (18e58 <mqtt_callback+0xdc>)
   18dc6:	9300      	str	r3, [sp, #0]
   18dc8:	000b      	movs	r3, r1
   18dca:	2101      	movs	r1, #1
   18dcc:	4c23      	ldr	r4, [pc, #140]	; (18e5c <mqtt_callback+0xe0>)
   18dce:	47a0      	blx	r4
   18dd0:	1e03      	subs	r3, r0, #0
   18dd2:	d005      	beq.n	18de0 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   18dd4:	4b22      	ldr	r3, [pc, #136]	; (18e60 <mqtt_callback+0xe4>)
   18dd6:	0019      	movs	r1, r3
   18dd8:	2001      	movs	r0, #1
   18dda:	4b1d      	ldr	r3, [pc, #116]	; (18e50 <mqtt_callback+0xd4>)
   18ddc:	4798      	blx	r3
        } break;
   18dde:	e031      	b.n	18e44 <mqtt_callback+0xc8>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   18de0:	4b20      	ldr	r3, [pc, #128]	; (18e64 <mqtt_callback+0xe8>)
   18de2:	0019      	movs	r1, r3
   18de4:	2001      	movs	r0, #1
   18de6:	4b1a      	ldr	r3, [pc, #104]	; (18e50 <mqtt_callback+0xd4>)
   18de8:	4798      	blx	r3
        } break;
   18dea:	e02b      	b.n	18e44 <mqtt_callback+0xc8>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   18dec:	4a1e      	ldr	r2, [pc, #120]	; (18e68 <mqtt_callback+0xec>)
   18dee:	4b1f      	ldr	r3, [pc, #124]	; (18e6c <mqtt_callback+0xf0>)
   18df0:	0019      	movs	r1, r3
   18df2:	2001      	movs	r0, #1
   18df4:	4b16      	ldr	r3, [pc, #88]	; (18e50 <mqtt_callback+0xd4>)
   18df6:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   18df8:	4a1b      	ldr	r2, [pc, #108]	; (18e68 <mqtt_callback+0xec>)
   18dfa:	68fb      	ldr	r3, [r7, #12]
   18dfc:	0011      	movs	r1, r2
   18dfe:	0018      	movs	r0, r3
   18e00:	4b1b      	ldr	r3, [pc, #108]	; (18e70 <mqtt_callback+0xf4>)
   18e02:	4798      	blx	r3
        } break;
   18e04:	e01e      	b.n	18e44 <mqtt_callback+0xc8>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   18e06:	687b      	ldr	r3, [r7, #4]
   18e08:	781b      	ldrb	r3, [r3, #0]
   18e0a:	2b00      	cmp	r3, #0
   18e0c:	d10b      	bne.n	18e26 <mqtt_callback+0xaa>
				mqtt_subscribe(module_inst, SERVO_TOPIC, 2, SubscribeHandlerServoTopic);
   18e0e:	4b19      	ldr	r3, [pc, #100]	; (18e74 <mqtt_callback+0xf8>)
   18e10:	4919      	ldr	r1, [pc, #100]	; (18e78 <mqtt_callback+0xfc>)
   18e12:	68f8      	ldr	r0, [r7, #12]
   18e14:	2202      	movs	r2, #2
   18e16:	4c19      	ldr	r4, [pc, #100]	; (18e7c <mqtt_callback+0x100>)
   18e18:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   18e1a:	4b19      	ldr	r3, [pc, #100]	; (18e80 <mqtt_callback+0x104>)
   18e1c:	0019      	movs	r1, r3
   18e1e:	2001      	movs	r0, #1
   18e20:	4b0b      	ldr	r3, [pc, #44]	; (18e50 <mqtt_callback+0xd4>)
   18e22:	4798      	blx	r3
            break;
   18e24:	e00e      	b.n	18e44 <mqtt_callback+0xc8>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   18e26:	687b      	ldr	r3, [r7, #4]
   18e28:	781b      	ldrb	r3, [r3, #0]
   18e2a:	001a      	movs	r2, r3
   18e2c:	4b15      	ldr	r3, [pc, #84]	; (18e84 <mqtt_callback+0x108>)
   18e2e:	0019      	movs	r1, r3
   18e30:	2001      	movs	r0, #1
   18e32:	4b07      	ldr	r3, [pc, #28]	; (18e50 <mqtt_callback+0xd4>)
   18e34:	4798      	blx	r3
            break;
   18e36:	e005      	b.n	18e44 <mqtt_callback+0xc8>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   18e38:	4b13      	ldr	r3, [pc, #76]	; (18e88 <mqtt_callback+0x10c>)
   18e3a:	0019      	movs	r1, r3
   18e3c:	2001      	movs	r0, #1
   18e3e:	4b04      	ldr	r3, [pc, #16]	; (18e50 <mqtt_callback+0xd4>)
   18e40:	4798      	blx	r3
            break;
   18e42:	46c0      	nop			; (mov r8, r8)
}
   18e44:	46c0      	nop			; (mov r8, r8)
   18e46:	46bd      	mov	sp, r7
   18e48:	b005      	add	sp, #20
   18e4a:	bd90      	pop	{r4, r7, pc}
   18e4c:	00039cdc 	.word	0x00039cdc
   18e50:	000202d1 	.word	0x000202d1
   18e54:	00039cf8 	.word	0x00039cf8
   18e58:	00039d08 	.word	0x00039d08
   18e5c:	00031c89 	.word	0x00031c89
   18e60:	00039d0c 	.word	0x00039d0c
   18e64:	00039d34 	.word	0x00039d34
   18e68:	000395f0 	.word	0x000395f0
   18e6c:	00039d50 	.word	0x00039d50
   18e70:	00031c41 	.word	0x00031c41
   18e74:	00018d01 	.word	0x00018d01
   18e78:	00039bbc 	.word	0x00039bbc
   18e7c:	00031e29 	.word	0x00031e29
   18e80:	00039d88 	.word	0x00039d88
   18e84:	00039d9c 	.word	0x00039d9c
   18e88:	00039dd0 	.word	0x00039dd0

00018e8c <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   18e8c:	b580      	push	{r7, lr}
   18e8e:	b088      	sub	sp, #32
   18e90:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   18e92:	1d3b      	adds	r3, r7, #4
   18e94:	0018      	movs	r0, r3
   18e96:	4b1f      	ldr	r3, [pc, #124]	; (18f14 <configure_mqtt+0x88>)
   18e98:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   18e9a:	1d3b      	adds	r3, r7, #4
   18e9c:	4a1e      	ldr	r2, [pc, #120]	; (18f18 <configure_mqtt+0x8c>)
   18e9e:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   18ea0:	1d3b      	adds	r3, r7, #4
   18ea2:	2280      	movs	r2, #128	; 0x80
   18ea4:	0092      	lsls	r2, r2, #2
   18ea6:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   18ea8:	1d3b      	adds	r3, r7, #4
   18eaa:	4a1c      	ldr	r2, [pc, #112]	; (18f1c <configure_mqtt+0x90>)
   18eac:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   18eae:	1d3b      	adds	r3, r7, #4
   18eb0:	2280      	movs	r2, #128	; 0x80
   18eb2:	0092      	lsls	r2, r2, #2
   18eb4:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   18eb6:	1d3b      	adds	r3, r7, #4
   18eb8:	4a19      	ldr	r2, [pc, #100]	; (18f20 <configure_mqtt+0x94>)
   18eba:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   18ebc:	1d3b      	adds	r3, r7, #4
   18ebe:	4a19      	ldr	r2, [pc, #100]	; (18f24 <configure_mqtt+0x98>)
   18ec0:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   18ec2:	1d3a      	adds	r2, r7, #4
   18ec4:	4b18      	ldr	r3, [pc, #96]	; (18f28 <configure_mqtt+0x9c>)
   18ec6:	0011      	movs	r1, r2
   18ec8:	0018      	movs	r0, r3
   18eca:	4b18      	ldr	r3, [pc, #96]	; (18f2c <configure_mqtt+0xa0>)
   18ecc:	4798      	blx	r3
   18ece:	0003      	movs	r3, r0
   18ed0:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   18ed2:	69fb      	ldr	r3, [r7, #28]
   18ed4:	2b00      	cmp	r3, #0
   18ed6:	da06      	bge.n	18ee6 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   18ed8:	69fa      	ldr	r2, [r7, #28]
   18eda:	4b15      	ldr	r3, [pc, #84]	; (18f30 <configure_mqtt+0xa4>)
   18edc:	0019      	movs	r1, r3
   18ede:	2001      	movs	r0, #1
   18ee0:	4b14      	ldr	r3, [pc, #80]	; (18f34 <configure_mqtt+0xa8>)
   18ee2:	4798      	blx	r3
        while (1) {
   18ee4:	e7fe      	b.n	18ee4 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   18ee6:	4a14      	ldr	r2, [pc, #80]	; (18f38 <configure_mqtt+0xac>)
   18ee8:	4b0f      	ldr	r3, [pc, #60]	; (18f28 <configure_mqtt+0x9c>)
   18eea:	0011      	movs	r1, r2
   18eec:	0018      	movs	r0, r3
   18eee:	4b13      	ldr	r3, [pc, #76]	; (18f3c <configure_mqtt+0xb0>)
   18ef0:	4798      	blx	r3
   18ef2:	0003      	movs	r3, r0
   18ef4:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   18ef6:	69fb      	ldr	r3, [r7, #28]
   18ef8:	2b00      	cmp	r3, #0
   18efa:	da06      	bge.n	18f0a <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   18efc:	69fa      	ldr	r2, [r7, #28]
   18efe:	4b10      	ldr	r3, [pc, #64]	; (18f40 <configure_mqtt+0xb4>)
   18f00:	0019      	movs	r1, r3
   18f02:	2001      	movs	r0, #1
   18f04:	4b0b      	ldr	r3, [pc, #44]	; (18f34 <configure_mqtt+0xa8>)
   18f06:	4798      	blx	r3
        while (1) {
   18f08:	e7fe      	b.n	18f08 <configure_mqtt+0x7c>
        }
    }
}
   18f0a:	46c0      	nop			; (mov r8, r8)
   18f0c:	46bd      	mov	sp, r7
   18f0e:	b008      	add	sp, #32
   18f10:	bd80      	pop	{r7, pc}
   18f12:	46c0      	nop			; (mov r8, r8)
   18f14:	00031b81 	.word	0x00031b81
   18f18:	20000774 	.word	0x20000774
   18f1c:	20000974 	.word	0x20000974
   18f20:	0000075b 	.word	0x0000075b
   18f24:	00001770 	.word	0x00001770
   18f28:	2000073c 	.word	0x2000073c
   18f2c:	00031ad1 	.word	0x00031ad1
   18f30:	00039de4 	.word	0x00039de4
   18f34:	000202d1 	.word	0x000202d1
   18f38:	00018d7d 	.word	0x00018d7d
   18f3c:	00031bc1 	.word	0x00031bc1
   18f40:	00039e18 	.word	0x00039e18

00018f44 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   18f44:	b580      	push	{r7, lr}
   18f46:	b084      	sub	sp, #16
   18f48:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   18f4a:	1d3b      	adds	r3, r7, #4
   18f4c:	0018      	movs	r0, r3
   18f4e:	4b0b      	ldr	r3, [pc, #44]	; (18f7c <configure_extint_channel+0x38>)
   18f50:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   18f52:	1d3b      	adds	r3, r7, #4
   18f54:	2237      	movs	r2, #55	; 0x37
   18f56:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   18f58:	1d3b      	adds	r3, r7, #4
   18f5a:	2200      	movs	r2, #0
   18f5c:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   18f5e:	1d3b      	adds	r3, r7, #4
   18f60:	2201      	movs	r2, #1
   18f62:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   18f64:	1d3b      	adds	r3, r7, #4
   18f66:	2202      	movs	r2, #2
   18f68:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   18f6a:	1d3b      	adds	r3, r7, #4
   18f6c:	0019      	movs	r1, r3
   18f6e:	2007      	movs	r0, #7
   18f70:	4b03      	ldr	r3, [pc, #12]	; (18f80 <configure_extint_channel+0x3c>)
   18f72:	4798      	blx	r3
}
   18f74:	46c0      	nop			; (mov r8, r8)
   18f76:	46bd      	mov	sp, r7
   18f78:	b004      	add	sp, #16
   18f7a:	bd80      	pop	{r7, pc}
   18f7c:	00028c5d 	.word	0x00028c5d
   18f80:	00028c91 	.word	0x00028c91

00018f84 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   18f84:	b580      	push	{r7, lr}
   18f86:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   18f88:	4b06      	ldr	r3, [pc, #24]	; (18fa4 <configure_extint_callbacks+0x20>)
   18f8a:	2200      	movs	r2, #0
   18f8c:	2107      	movs	r1, #7
   18f8e:	0018      	movs	r0, r3
   18f90:	4b05      	ldr	r3, [pc, #20]	; (18fa8 <configure_extint_callbacks+0x24>)
   18f92:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   18f94:	2100      	movs	r1, #0
   18f96:	2007      	movs	r0, #7
   18f98:	4b04      	ldr	r3, [pc, #16]	; (18fac <configure_extint_callbacks+0x28>)
   18f9a:	4798      	blx	r3
}
   18f9c:	46c0      	nop			; (mov r8, r8)
   18f9e:	46bd      	mov	sp, r7
   18fa0:	bd80      	pop	{r7, pc}
   18fa2:	46c0      	nop			; (mov r8, r8)
   18fa4:	00018fb1 	.word	0x00018fb1
   18fa8:	0002885d 	.word	0x0002885d
   18fac:	000288c1 	.word	0x000288c1

00018fb0 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   18fb0:	b5b0      	push	{r4, r5, r7, lr}
   18fb2:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   18fb4:	4b0c      	ldr	r3, [pc, #48]	; (18fe8 <extint_detection_callback+0x38>)
   18fb6:	681b      	ldr	r3, [r3, #0]
   18fb8:	1c5a      	adds	r2, r3, #1
   18fba:	4b0b      	ldr	r3, [pc, #44]	; (18fe8 <extint_detection_callback+0x38>)
   18fbc:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   18fbe:	4b0a      	ldr	r3, [pc, #40]	; (18fe8 <extint_detection_callback+0x38>)
   18fc0:	681b      	ldr	r3, [r3, #0]
   18fc2:	2b28      	cmp	r3, #40	; 0x28
   18fc4:	d902      	bls.n	18fcc <extint_detection_callback+0x1c>
   18fc6:	4b08      	ldr	r3, [pc, #32]	; (18fe8 <extint_detection_callback+0x38>)
   18fc8:	2201      	movs	r2, #1
   18fca:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   18fcc:	4b06      	ldr	r3, [pc, #24]	; (18fe8 <extint_detection_callback+0x38>)
   18fce:	681b      	ldr	r3, [r3, #0]
   18fd0:	4a06      	ldr	r2, [pc, #24]	; (18fec <extint_detection_callback+0x3c>)
   18fd2:	4807      	ldr	r0, [pc, #28]	; (18ff0 <extint_detection_callback+0x40>)
   18fd4:	213f      	movs	r1, #63	; 0x3f
   18fd6:	4c07      	ldr	r4, [pc, #28]	; (18ff4 <extint_detection_callback+0x44>)
   18fd8:	47a0      	blx	r4
    isPressed = true;
   18fda:	4b07      	ldr	r3, [pc, #28]	; (18ff8 <extint_detection_callback+0x48>)
   18fdc:	2201      	movs	r2, #1
   18fde:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   18fe0:	46c0      	nop			; (mov r8, r8)
   18fe2:	46bd      	mov	sp, r7
   18fe4:	bdb0      	pop	{r4, r5, r7, pc}
   18fe6:	46c0      	nop			; (mov r8, r8)
   18fe8:	200000b8 	.word	0x200000b8
   18fec:	00039e4c 	.word	0x00039e4c
   18ff0:	20000074 	.word	0x20000074
   18ff4:	00037ba5 	.word	0x00037ba5
   18ff8:	20000b74 	.word	0x20000b74

00018ffc <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   18ffc:	b580      	push	{r7, lr}
   18ffe:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   19000:	4a15      	ldr	r2, [pc, #84]	; (19058 <HTTP_DownloadFileInit+0x5c>)
   19002:	4b16      	ldr	r3, [pc, #88]	; (1905c <HTTP_DownloadFileInit+0x60>)
   19004:	0011      	movs	r1, r2
   19006:	0018      	movs	r0, r3
   19008:	4b15      	ldr	r3, [pc, #84]	; (19060 <HTTP_DownloadFileInit+0x64>)
   1900a:	4798      	blx	r3
   1900c:	1e03      	subs	r3, r0, #0
   1900e:	d008      	beq.n	19022 <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   19010:	4b14      	ldr	r3, [pc, #80]	; (19064 <HTTP_DownloadFileInit+0x68>)
   19012:	0019      	movs	r1, r3
   19014:	2001      	movs	r0, #1
   19016:	4b14      	ldr	r3, [pc, #80]	; (19068 <HTTP_DownloadFileInit+0x6c>)
   19018:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   1901a:	e002      	b.n	19022 <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   1901c:	2000      	movs	r0, #0
   1901e:	4b13      	ldr	r3, [pc, #76]	; (1906c <HTTP_DownloadFileInit+0x70>)
   19020:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   19022:	4b0e      	ldr	r3, [pc, #56]	; (1905c <HTTP_DownloadFileInit+0x60>)
   19024:	2234      	movs	r2, #52	; 0x34
   19026:	5c9b      	ldrb	r3, [r3, r2]
   19028:	2b00      	cmp	r3, #0
   1902a:	d1f7      	bne.n	1901c <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   1902c:	4b10      	ldr	r3, [pc, #64]	; (19070 <HTTP_DownloadFileInit+0x74>)
   1902e:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   19030:	4b10      	ldr	r3, [pc, #64]	; (19074 <HTTP_DownloadFileInit+0x78>)
   19032:	2201      	movs	r2, #1
   19034:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   19036:	4a10      	ldr	r2, [pc, #64]	; (19078 <HTTP_DownloadFileInit+0x7c>)
   19038:	4b10      	ldr	r3, [pc, #64]	; (1907c <HTTP_DownloadFileInit+0x80>)
   1903a:	0011      	movs	r1, r2
   1903c:	0018      	movs	r0, r3
   1903e:	4b10      	ldr	r3, [pc, #64]	; (19080 <HTTP_DownloadFileInit+0x84>)
   19040:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   19042:	4b10      	ldr	r3, [pc, #64]	; (19084 <HTTP_DownloadFileInit+0x88>)
   19044:	4798      	blx	r3

    start_download();
   19046:	4b10      	ldr	r3, [pc, #64]	; (19088 <HTTP_DownloadFileInit+0x8c>)
   19048:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   1904a:	4b10      	ldr	r3, [pc, #64]	; (1908c <HTTP_DownloadFileInit+0x90>)
   1904c:	2203      	movs	r2, #3
   1904e:	701a      	strb	r2, [r3, #0]
}
   19050:	46c0      	nop			; (mov r8, r8)
   19052:	46bd      	mov	sp, r7
   19054:	bd80      	pop	{r7, pc}
   19056:	46c0      	nop			; (mov r8, r8)
   19058:	000395f0 	.word	0x000395f0
   1905c:	2000073c 	.word	0x2000073c
   19060:	00031d75 	.word	0x00031d75
   19064:	00039a20 	.word	0x00039a20
   19068:	000202d1 	.word	0x000202d1
   1906c:	0002434d 	.word	0x0002434d
   19070:	00027909 	.word	0x00027909
   19074:	200004dc 	.word	0x200004dc
   19078:	00018921 	.word	0x00018921
   1907c:	000188ed 	.word	0x000188ed
   19080:	00027951 	.word	0x00027951
   19084:	000278b9 	.word	0x000278b9
   19088:	00018515 	.word	0x00018515
   1908c:	200004c6 	.word	0x200004c6

00019090 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   19090:	b590      	push	{r4, r7, lr}
   19092:	b085      	sub	sp, #20
   19094:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   19096:	e009      	b.n	190ac <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   19098:	2000      	movs	r0, #0
   1909a:	4b2a      	ldr	r3, [pc, #168]	; (19144 <HTTP_DownloadFileTransaction+0xb4>)
   1909c:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   1909e:	4b2a      	ldr	r3, [pc, #168]	; (19148 <HTTP_DownloadFileTransaction+0xb8>)
   190a0:	0018      	movs	r0, r3
   190a2:	4b2a      	ldr	r3, [pc, #168]	; (1914c <HTTP_DownloadFileTransaction+0xbc>)
   190a4:	4798      	blx	r3
        vTaskDelay(5);
   190a6:	2005      	movs	r0, #5
   190a8:	4b29      	ldr	r3, [pc, #164]	; (19150 <HTTP_DownloadFileTransaction+0xc0>)
   190aa:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   190ac:	2010      	movs	r0, #16
   190ae:	4b29      	ldr	r3, [pc, #164]	; (19154 <HTTP_DownloadFileTransaction+0xc4>)
   190b0:	4798      	blx	r3
   190b2:	0003      	movs	r3, r0
   190b4:	001a      	movs	r2, r3
   190b6:	2301      	movs	r3, #1
   190b8:	4053      	eors	r3, r2
   190ba:	b2db      	uxtb	r3, r3
   190bc:	2b00      	cmp	r3, #0
   190be:	d009      	beq.n	190d4 <HTTP_DownloadFileTransaction+0x44>
   190c0:	2020      	movs	r0, #32
   190c2:	4b24      	ldr	r3, [pc, #144]	; (19154 <HTTP_DownloadFileTransaction+0xc4>)
   190c4:	4798      	blx	r3
   190c6:	0003      	movs	r3, r0
   190c8:	001a      	movs	r2, r3
   190ca:	2301      	movs	r3, #1
   190cc:	4053      	eors	r3, r2
   190ce:	b2db      	uxtb	r3, r3
   190d0:	2b00      	cmp	r3, #0
   190d2:	d1e1      	bne.n	19098 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   190d4:	4b20      	ldr	r3, [pc, #128]	; (19158 <HTTP_DownloadFileTransaction+0xc8>)
   190d6:	4798      	blx	r3
    vTaskDelay(1000);
   190d8:	23fa      	movs	r3, #250	; 0xfa
   190da:	009b      	lsls	r3, r3, #2
   190dc:	0018      	movs	r0, r3
   190de:	4b1c      	ldr	r3, [pc, #112]	; (19150 <HTTP_DownloadFileTransaction+0xc0>)
   190e0:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   190e2:	4b1e      	ldr	r3, [pc, #120]	; (1915c <HTTP_DownloadFileTransaction+0xcc>)
   190e4:	2200      	movs	r2, #0
   190e6:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   190e8:	003b      	movs	r3, r7
   190ea:	4a1d      	ldr	r2, [pc, #116]	; (19160 <HTTP_DownloadFileTransaction+0xd0>)
   190ec:	ca13      	ldmia	r2!, {r0, r1, r4}
   190ee:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   190f0:	003b      	movs	r3, r7
   190f2:	2230      	movs	r2, #48	; 0x30
   190f4:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   190f6:	230f      	movs	r3, #15
   190f8:	18fc      	adds	r4, r7, r3
   190fa:	0039      	movs	r1, r7
   190fc:	4b19      	ldr	r3, [pc, #100]	; (19164 <HTTP_DownloadFileTransaction+0xd4>)
   190fe:	220a      	movs	r2, #10
   19100:	0018      	movs	r0, r3
   19102:	4b19      	ldr	r3, [pc, #100]	; (19168 <HTTP_DownloadFileTransaction+0xd8>)
   19104:	4798      	blx	r3
   19106:	0003      	movs	r3, r0
   19108:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   1910a:	230f      	movs	r3, #15
   1910c:	18fb      	adds	r3, r7, r3
   1910e:	781b      	ldrb	r3, [r3, #0]
   19110:	2b00      	cmp	r3, #0
   19112:	d008      	beq.n	19126 <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   19114:	230f      	movs	r3, #15
   19116:	18fb      	adds	r3, r7, r3
   19118:	781a      	ldrb	r2, [r3, #0]
   1911a:	4b14      	ldr	r3, [pc, #80]	; (1916c <HTTP_DownloadFileTransaction+0xdc>)
   1911c:	0019      	movs	r1, r3
   1911e:	2000      	movs	r0, #0
   19120:	4b13      	ldr	r3, [pc, #76]	; (19170 <HTTP_DownloadFileTransaction+0xe0>)
   19122:	4798      	blx	r3
   19124:	e003      	b.n	1912e <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   19126:	4b13      	ldr	r3, [pc, #76]	; (19174 <HTTP_DownloadFileTransaction+0xe4>)
   19128:	0018      	movs	r0, r3
   1912a:	4b13      	ldr	r3, [pc, #76]	; (19178 <HTTP_DownloadFileTransaction+0xe8>)
   1912c:	4798      	blx	r3
    }
	
	f_close(&file_object);
   1912e:	4b0d      	ldr	r3, [pc, #52]	; (19164 <HTTP_DownloadFileTransaction+0xd4>)
   19130:	0018      	movs	r0, r3
   19132:	4b12      	ldr	r3, [pc, #72]	; (1917c <HTTP_DownloadFileTransaction+0xec>)
   19134:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   19136:	4b12      	ldr	r3, [pc, #72]	; (19180 <HTTP_DownloadFileTransaction+0xf0>)
   19138:	2200      	movs	r2, #0
   1913a:	701a      	strb	r2, [r3, #0]
}
   1913c:	46c0      	nop			; (mov r8, r8)
   1913e:	46bd      	mov	sp, r7
   19140:	b005      	add	sp, #20
   19142:	bd90      	pop	{r4, r7, pc}
   19144:	0002434d 	.word	0x0002434d
   19148:	2000475c 	.word	0x2000475c
   1914c:	00034a9d 	.word	0x00034a9d
   19150:	0001e591 	.word	0x0001e591
   19154:	000181ed 	.word	0x000181ed
   19158:	00027909 	.word	0x00027909
   1915c:	200004dc 	.word	0x200004dc
   19160:	00039e84 	.word	0x00039e84
   19164:	20000710 	.word	0x20000710
   19168:	0002fd65 	.word	0x0002fd65
   1916c:	00039e60 	.word	0x00039e60
   19170:	000202d1 	.word	0x000202d1
   19174:	00039e70 	.word	0x00039e70
   19178:	000201e5 	.word	0x000201e5
   1917c:	00030765 	.word	0x00030765
   19180:	200004c6 	.word	0x200004c6

00019184 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   19184:	b580      	push	{r7, lr}
   19186:	af00      	add	r7, sp, #0
    socketDeinit();
   19188:	4b18      	ldr	r3, [pc, #96]	; (191ec <MQTT_InitRoutine+0x68>)
   1918a:	4798      	blx	r3
    configure_mqtt();
   1918c:	4b18      	ldr	r3, [pc, #96]	; (191f0 <MQTT_InitRoutine+0x6c>)
   1918e:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   19190:	4a18      	ldr	r2, [pc, #96]	; (191f4 <MQTT_InitRoutine+0x70>)
   19192:	4b19      	ldr	r3, [pc, #100]	; (191f8 <MQTT_InitRoutine+0x74>)
   19194:	0011      	movs	r1, r2
   19196:	0018      	movs	r0, r3
   19198:	4b18      	ldr	r3, [pc, #96]	; (191fc <MQTT_InitRoutine+0x78>)
   1919a:	4798      	blx	r3
    socketInit();
   1919c:	4b18      	ldr	r3, [pc, #96]	; (19200 <MQTT_InitRoutine+0x7c>)
   1919e:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   191a0:	4b18      	ldr	r3, [pc, #96]	; (19204 <MQTT_InitRoutine+0x80>)
   191a2:	2234      	movs	r2, #52	; 0x34
   191a4:	5c9b      	ldrb	r3, [r3, r2]
   191a6:	2201      	movs	r2, #1
   191a8:	4053      	eors	r3, r2
   191aa:	b2db      	uxtb	r3, r3
   191ac:	2b00      	cmp	r3, #0
   191ae:	d00c      	beq.n	191ca <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   191b0:	4a15      	ldr	r2, [pc, #84]	; (19208 <MQTT_InitRoutine+0x84>)
   191b2:	4b14      	ldr	r3, [pc, #80]	; (19204 <MQTT_InitRoutine+0x80>)
   191b4:	0011      	movs	r1, r2
   191b6:	0018      	movs	r0, r3
   191b8:	4b14      	ldr	r3, [pc, #80]	; (1920c <MQTT_InitRoutine+0x88>)
   191ba:	4798      	blx	r3
   191bc:	1e03      	subs	r3, r0, #0
   191be:	d004      	beq.n	191ca <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   191c0:	4b13      	ldr	r3, [pc, #76]	; (19210 <MQTT_InitRoutine+0x8c>)
   191c2:	0019      	movs	r1, r3
   191c4:	2001      	movs	r0, #1
   191c6:	4b13      	ldr	r3, [pc, #76]	; (19214 <MQTT_InitRoutine+0x90>)
   191c8:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   191ca:	4b0e      	ldr	r3, [pc, #56]	; (19204 <MQTT_InitRoutine+0x80>)
   191cc:	2234      	movs	r2, #52	; 0x34
   191ce:	5c9b      	ldrb	r3, [r3, r2]
   191d0:	2b00      	cmp	r3, #0
   191d2:	d004      	beq.n	191de <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   191d4:	4b10      	ldr	r3, [pc, #64]	; (19218 <MQTT_InitRoutine+0x94>)
   191d6:	0019      	movs	r1, r3
   191d8:	2001      	movs	r0, #1
   191da:	4b0e      	ldr	r3, [pc, #56]	; (19214 <MQTT_InitRoutine+0x90>)
   191dc:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   191de:	4b0f      	ldr	r3, [pc, #60]	; (1921c <MQTT_InitRoutine+0x98>)
   191e0:	2201      	movs	r2, #1
   191e2:	701a      	strb	r2, [r3, #0]
}
   191e4:	46c0      	nop			; (mov r8, r8)
   191e6:	46bd      	mov	sp, r7
   191e8:	bd80      	pop	{r7, pc}
   191ea:	46c0      	nop			; (mov r8, r8)
   191ec:	00027909 	.word	0x00027909
   191f0:	00018e8d 	.word	0x00018e8d
   191f4:	00018cdd 	.word	0x00018cdd
   191f8:	00018ca9 	.word	0x00018ca9
   191fc:	00027951 	.word	0x00027951
   19200:	000278b9 	.word	0x000278b9
   19204:	2000073c 	.word	0x2000073c
   19208:	000395f0 	.word	0x000395f0
   1920c:	00031c41 	.word	0x00031c41
   19210:	00039a20 	.word	0x00039a20
   19214:	000202d1 	.word	0x000202d1
   19218:	00039e90 	.word	0x00039e90
   1921c:	200004c6 	.word	0x200004c6

00019220 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   19220:	b580      	push	{r7, lr}
   19222:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   19224:	2000      	movs	r0, #0
   19226:	4b0c      	ldr	r3, [pc, #48]	; (19258 <MQTT_HandleTransactions+0x38>)
   19228:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   1922a:	4b0c      	ldr	r3, [pc, #48]	; (1925c <MQTT_HandleTransactions+0x3c>)
   1922c:	0018      	movs	r0, r3
   1922e:	4b0c      	ldr	r3, [pc, #48]	; (19260 <MQTT_HandleTransactions+0x40>)
   19230:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   19232:	4b0c      	ldr	r3, [pc, #48]	; (19264 <MQTT_HandleTransactions+0x44>)
   19234:	4798      	blx	r3
    MQTT_HandleImuMessages();
   19236:	4b0c      	ldr	r3, [pc, #48]	; (19268 <MQTT_HandleTransactions+0x48>)
   19238:	4798      	blx	r3
	MQTT_HandleBmeMessages();
   1923a:	4b0c      	ldr	r3, [pc, #48]	; (1926c <MQTT_HandleTransactions+0x4c>)
   1923c:	4798      	blx	r3


    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   1923e:	4b0c      	ldr	r3, [pc, #48]	; (19270 <MQTT_HandleTransactions+0x50>)
   19240:	2234      	movs	r2, #52	; 0x34
   19242:	5c9b      	ldrb	r3, [r3, r2]
   19244:	2b00      	cmp	r3, #0
   19246:	d004      	beq.n	19252 <MQTT_HandleTransactions+0x32>
   19248:	4b09      	ldr	r3, [pc, #36]	; (19270 <MQTT_HandleTransactions+0x50>)
   1924a:	2164      	movs	r1, #100	; 0x64
   1924c:	0018      	movs	r0, r3
   1924e:	4b09      	ldr	r3, [pc, #36]	; (19274 <MQTT_HandleTransactions+0x54>)
   19250:	4798      	blx	r3
}
   19252:	46c0      	nop			; (mov r8, r8)
   19254:	46bd      	mov	sp, r7
   19256:	bd80      	pop	{r7, pc}
   19258:	0002434d 	.word	0x0002434d
   1925c:	2000475c 	.word	0x2000475c
   19260:	00034a9d 	.word	0x00034a9d
   19264:	00019395 	.word	0x00019395
   19268:	00019279 	.word	0x00019279
   1926c:	00019305 	.word	0x00019305
   19270:	2000073c 	.word	0x2000073c
   19274:	00031e71 	.word	0x00031e71

00019278 <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   19278:	b590      	push	{r4, r7, lr}
   1927a:	b085      	sub	sp, #20
   1927c:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   1927e:	4b18      	ldr	r3, [pc, #96]	; (192e0 <MQTT_HandleImuMessages+0x68>)
   19280:	681b      	ldr	r3, [r3, #0]
   19282:	0039      	movs	r1, r7
   19284:	2200      	movs	r2, #0
   19286:	0018      	movs	r0, r3
   19288:	4b16      	ldr	r3, [pc, #88]	; (192e4 <MQTT_HandleImuMessages+0x6c>)
   1928a:	4798      	blx	r3
   1928c:	0003      	movs	r3, r0
   1928e:	2b01      	cmp	r3, #1
   19290:	d121      	bne.n	192d6 <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   19292:	003b      	movs	r3, r7
   19294:	2200      	movs	r2, #0
   19296:	5e9b      	ldrsh	r3, [r3, r2]
   19298:	001c      	movs	r4, r3
   1929a:	003b      	movs	r3, r7
   1929c:	2202      	movs	r2, #2
   1929e:	5e9b      	ldrsh	r3, [r3, r2]
   192a0:	0019      	movs	r1, r3
   192a2:	003b      	movs	r3, r7
   192a4:	2204      	movs	r2, #4
   192a6:	5e9b      	ldrsh	r3, [r3, r2]
   192a8:	4a0f      	ldr	r2, [pc, #60]	; (192e8 <MQTT_HandleImuMessages+0x70>)
   192aa:	4810      	ldr	r0, [pc, #64]	; (192ec <MQTT_HandleImuMessages+0x74>)
   192ac:	9301      	str	r3, [sp, #4]
   192ae:	9100      	str	r1, [sp, #0]
   192b0:	0023      	movs	r3, r4
   192b2:	213f      	movs	r1, #63	; 0x3f
   192b4:	4c0e      	ldr	r4, [pc, #56]	; (192f0 <MQTT_HandleImuMessages+0x78>)
   192b6:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   192b8:	4b0c      	ldr	r3, [pc, #48]	; (192ec <MQTT_HandleImuMessages+0x74>)
   192ba:	0018      	movs	r0, r3
   192bc:	4b0d      	ldr	r3, [pc, #52]	; (192f4 <MQTT_HandleImuMessages+0x7c>)
   192be:	4798      	blx	r3
   192c0:	0004      	movs	r4, r0
   192c2:	4a0a      	ldr	r2, [pc, #40]	; (192ec <MQTT_HandleImuMessages+0x74>)
   192c4:	490c      	ldr	r1, [pc, #48]	; (192f8 <MQTT_HandleImuMessages+0x80>)
   192c6:	480d      	ldr	r0, [pc, #52]	; (192fc <MQTT_HandleImuMessages+0x84>)
   192c8:	2300      	movs	r3, #0
   192ca:	9301      	str	r3, [sp, #4]
   192cc:	2301      	movs	r3, #1
   192ce:	9300      	str	r3, [sp, #0]
   192d0:	0023      	movs	r3, r4
   192d2:	4c0b      	ldr	r4, [pc, #44]	; (19300 <MQTT_HandleImuMessages+0x88>)
   192d4:	47a0      	blx	r4
    }
}
   192d6:	46c0      	nop			; (mov r8, r8)
   192d8:	46bd      	mov	sp, r7
   192da:	b003      	add	sp, #12
   192dc:	bd90      	pop	{r4, r7, pc}
   192de:	46c0      	nop			; (mov r8, r8)
   192e0:	200004d0 	.word	0x200004d0
   192e4:	0001d3e5 	.word	0x0001d3e5
   192e8:	00039eac 	.word	0x00039eac
   192ec:	20000034 	.word	0x20000034
   192f0:	00037ba5 	.word	0x00037ba5
   192f4:	00037d03 	.word	0x00037d03
   192f8:	00039ed0 	.word	0x00039ed0
   192fc:	2000073c 	.word	0x2000073c
   19300:	00031dbd 	.word	0x00031dbd

00019304 <MQTT_HandleBmeMessages>:
static void MQTT_HandleBmeMessages(void)
{
   19304:	b5f0      	push	{r4, r5, r6, r7, lr}
   19306:	b08b      	sub	sp, #44	; 0x2c
   19308:	af04      	add	r7, sp, #16
	struct BMEDataPacket bmeDataVar;
	if (pdPASS == xQueueReceive(xQueueBmeBuffer, &bmeDataVar, 0)) {
   1930a:	4b19      	ldr	r3, [pc, #100]	; (19370 <MQTT_HandleBmeMessages+0x6c>)
   1930c:	681b      	ldr	r3, [r3, #0]
   1930e:	1d39      	adds	r1, r7, #4
   19310:	2200      	movs	r2, #0
   19312:	0018      	movs	r0, r3
   19314:	4b17      	ldr	r3, [pc, #92]	; (19374 <MQTT_HandleBmeMessages+0x70>)
   19316:	4798      	blx	r3
   19318:	0003      	movs	r3, r0
   1931a:	2b01      	cmp	r3, #1
   1931c:	d124      	bne.n	19368 <MQTT_HandleBmeMessages+0x64>
		snprintf(mqtt_msg, 63, "{\"temp\":%d, \"hum\": %d, \"pre\": %d, \"war\": %d, \"gas\": %d}", bmeDataVar.temperature, bmeDataVar.humidity, bmeDataVar.pressure,bmeDataVar.warning_status,bmeDataVar.gas_res);
   1931e:	1d3b      	adds	r3, r7, #4
   19320:	681e      	ldr	r6, [r3, #0]
   19322:	1d3b      	adds	r3, r7, #4
   19324:	685a      	ldr	r2, [r3, #4]
   19326:	1d3b      	adds	r3, r7, #4
   19328:	6899      	ldr	r1, [r3, #8]
   1932a:	1d3b      	adds	r3, r7, #4
   1932c:	68d8      	ldr	r0, [r3, #12]
   1932e:	1d3b      	adds	r3, r7, #4
   19330:	691b      	ldr	r3, [r3, #16]
   19332:	4d11      	ldr	r5, [pc, #68]	; (19378 <MQTT_HandleBmeMessages+0x74>)
   19334:	4c11      	ldr	r4, [pc, #68]	; (1937c <MQTT_HandleBmeMessages+0x78>)
   19336:	9303      	str	r3, [sp, #12]
   19338:	9002      	str	r0, [sp, #8]
   1933a:	9101      	str	r1, [sp, #4]
   1933c:	9200      	str	r2, [sp, #0]
   1933e:	0033      	movs	r3, r6
   19340:	002a      	movs	r2, r5
   19342:	213f      	movs	r1, #63	; 0x3f
   19344:	0020      	movs	r0, r4
   19346:	4c0e      	ldr	r4, [pc, #56]	; (19380 <MQTT_HandleBmeMessages+0x7c>)
   19348:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, BME_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   1934a:	4b0c      	ldr	r3, [pc, #48]	; (1937c <MQTT_HandleBmeMessages+0x78>)
   1934c:	0018      	movs	r0, r3
   1934e:	4b0d      	ldr	r3, [pc, #52]	; (19384 <MQTT_HandleBmeMessages+0x80>)
   19350:	4798      	blx	r3
   19352:	0004      	movs	r4, r0
   19354:	4a09      	ldr	r2, [pc, #36]	; (1937c <MQTT_HandleBmeMessages+0x78>)
   19356:	490c      	ldr	r1, [pc, #48]	; (19388 <MQTT_HandleBmeMessages+0x84>)
   19358:	480c      	ldr	r0, [pc, #48]	; (1938c <MQTT_HandleBmeMessages+0x88>)
   1935a:	2300      	movs	r3, #0
   1935c:	9301      	str	r3, [sp, #4]
   1935e:	2301      	movs	r3, #1
   19360:	9300      	str	r3, [sp, #0]
   19362:	0023      	movs	r3, r4
   19364:	4c0a      	ldr	r4, [pc, #40]	; (19390 <MQTT_HandleBmeMessages+0x8c>)
   19366:	47a0      	blx	r4
	}
}
   19368:	46c0      	nop			; (mov r8, r8)
   1936a:	46bd      	mov	sp, r7
   1936c:	b007      	add	sp, #28
   1936e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19370:	200004d8 	.word	0x200004d8
   19374:	0001d3e5 	.word	0x0001d3e5
   19378:	00039ee4 	.word	0x00039ee4
   1937c:	20000034 	.word	0x20000034
   19380:	00037ba5 	.word	0x00037ba5
   19384:	00037d03 	.word	0x00037d03
   19388:	00039f1c 	.word	0x00039f1c
   1938c:	2000073c 	.word	0x2000073c
   19390:	00031dbd 	.word	0x00031dbd

00019394 <MQTT_HandleGameMessages>:


static void MQTT_HandleGameMessages(void)
{
   19394:	b590      	push	{r4, r7, lr}
   19396:	b08b      	sub	sp, #44	; 0x2c
   19398:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   1939a:	4b39      	ldr	r3, [pc, #228]	; (19480 <MQTT_HandleGameMessages+0xec>)
   1939c:	681b      	ldr	r3, [r3, #0]
   1939e:	2208      	movs	r2, #8
   193a0:	18b9      	adds	r1, r7, r2
   193a2:	2200      	movs	r2, #0
   193a4:	0018      	movs	r0, r3
   193a6:	4b37      	ldr	r3, [pc, #220]	; (19484 <MQTT_HandleGameMessages+0xf0>)
   193a8:	4798      	blx	r3
   193aa:	0003      	movs	r3, r0
   193ac:	2b01      	cmp	r3, #1
   193ae:	d163      	bne.n	19478 <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   193b0:	4b35      	ldr	r3, [pc, #212]	; (19488 <MQTT_HandleGameMessages+0xf4>)
   193b2:	4a36      	ldr	r2, [pc, #216]	; (1948c <MQTT_HandleGameMessages+0xf8>)
   193b4:	ca03      	ldmia	r2!, {r0, r1}
   193b6:	c303      	stmia	r3!, {r0, r1}
   193b8:	8812      	ldrh	r2, [r2, #0]
   193ba:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   193bc:	2300      	movs	r3, #0
   193be:	61fb      	str	r3, [r7, #28]
   193c0:	e02d      	b.n	1941e <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   193c2:	2308      	movs	r3, #8
   193c4:	18fa      	adds	r2, r7, r3
   193c6:	69fb      	ldr	r3, [r7, #28]
   193c8:	18d3      	adds	r3, r2, r3
   193ca:	781b      	ldrb	r3, [r3, #0]
   193cc:	2bff      	cmp	r3, #255	; 0xff
   193ce:	d02a      	beq.n	19426 <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   193d0:	2308      	movs	r3, #8
   193d2:	18fa      	adds	r2, r7, r3
   193d4:	69fb      	ldr	r3, [r7, #28]
   193d6:	18d3      	adds	r3, r2, r3
   193d8:	781b      	ldrb	r3, [r3, #0]
   193da:	4a2d      	ldr	r2, [pc, #180]	; (19490 <MQTT_HandleGameMessages+0xfc>)
   193dc:	0038      	movs	r0, r7
   193de:	2103      	movs	r1, #3
   193e0:	4c2c      	ldr	r4, [pc, #176]	; (19494 <MQTT_HandleGameMessages+0x100>)
   193e2:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   193e4:	003a      	movs	r2, r7
   193e6:	4b28      	ldr	r3, [pc, #160]	; (19488 <MQTT_HandleGameMessages+0xf4>)
   193e8:	0011      	movs	r1, r2
   193ea:	0018      	movs	r0, r3
   193ec:	4b2a      	ldr	r3, [pc, #168]	; (19498 <MQTT_HandleGameMessages+0x104>)
   193ee:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   193f0:	69fb      	ldr	r3, [r7, #28]
   193f2:	3301      	adds	r3, #1
   193f4:	2208      	movs	r2, #8
   193f6:	18ba      	adds	r2, r7, r2
   193f8:	5cd3      	ldrb	r3, [r2, r3]
   193fa:	2bff      	cmp	r3, #255	; 0xff
   193fc:	d00c      	beq.n	19418 <MQTT_HandleGameMessages+0x84>
   193fe:	69fb      	ldr	r3, [r7, #28]
   19400:	3301      	adds	r3, #1
   19402:	2b13      	cmp	r3, #19
   19404:	dc08      	bgt.n	19418 <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   19406:	003b      	movs	r3, r7
   19408:	222c      	movs	r2, #44	; 0x2c
   1940a:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   1940c:	003a      	movs	r2, r7
   1940e:	4b1e      	ldr	r3, [pc, #120]	; (19488 <MQTT_HandleGameMessages+0xf4>)
   19410:	0011      	movs	r1, r2
   19412:	0018      	movs	r0, r3
   19414:	4b20      	ldr	r3, [pc, #128]	; (19498 <MQTT_HandleGameMessages+0x104>)
   19416:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   19418:	69fb      	ldr	r3, [r7, #28]
   1941a:	3301      	adds	r3, #1
   1941c:	61fb      	str	r3, [r7, #28]
   1941e:	69fb      	ldr	r3, [r7, #28]
   19420:	2b13      	cmp	r3, #19
   19422:	ddce      	ble.n	193c2 <MQTT_HandleGameMessages+0x2e>
   19424:	e000      	b.n	19428 <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   19426:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   19428:	4b17      	ldr	r3, [pc, #92]	; (19488 <MQTT_HandleGameMessages+0xf4>)
   1942a:	0018      	movs	r0, r3
   1942c:	4b1b      	ldr	r3, [pc, #108]	; (1949c <MQTT_HandleGameMessages+0x108>)
   1942e:	4798      	blx	r3
   19430:	0003      	movs	r3, r0
   19432:	001a      	movs	r2, r3
   19434:	4b14      	ldr	r3, [pc, #80]	; (19488 <MQTT_HandleGameMessages+0xf4>)
   19436:	18d2      	adds	r2, r2, r3
   19438:	4b19      	ldr	r3, [pc, #100]	; (194a0 <MQTT_HandleGameMessages+0x10c>)
   1943a:	0010      	movs	r0, r2
   1943c:	0019      	movs	r1, r3
   1943e:	2303      	movs	r3, #3
   19440:	001a      	movs	r2, r3
   19442:	4b18      	ldr	r3, [pc, #96]	; (194a4 <MQTT_HandleGameMessages+0x110>)
   19444:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   19446:	4b10      	ldr	r3, [pc, #64]	; (19488 <MQTT_HandleGameMessages+0xf4>)
   19448:	0019      	movs	r1, r3
   1944a:	2001      	movs	r0, #1
   1944c:	4b16      	ldr	r3, [pc, #88]	; (194a8 <MQTT_HandleGameMessages+0x114>)
   1944e:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   19450:	4b16      	ldr	r3, [pc, #88]	; (194ac <MQTT_HandleGameMessages+0x118>)
   19452:	0019      	movs	r1, r3
   19454:	2001      	movs	r0, #1
   19456:	4b14      	ldr	r3, [pc, #80]	; (194a8 <MQTT_HandleGameMessages+0x114>)
   19458:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   1945a:	4b0b      	ldr	r3, [pc, #44]	; (19488 <MQTT_HandleGameMessages+0xf4>)
   1945c:	0018      	movs	r0, r3
   1945e:	4b0f      	ldr	r3, [pc, #60]	; (1949c <MQTT_HandleGameMessages+0x108>)
   19460:	4798      	blx	r3
   19462:	0004      	movs	r4, r0
   19464:	4a08      	ldr	r2, [pc, #32]	; (19488 <MQTT_HandleGameMessages+0xf4>)
   19466:	4912      	ldr	r1, [pc, #72]	; (194b0 <MQTT_HandleGameMessages+0x11c>)
   19468:	4812      	ldr	r0, [pc, #72]	; (194b4 <MQTT_HandleGameMessages+0x120>)
   1946a:	2300      	movs	r3, #0
   1946c:	9301      	str	r3, [sp, #4]
   1946e:	2301      	movs	r3, #1
   19470:	9300      	str	r3, [sp, #0]
   19472:	0023      	movs	r3, r4
   19474:	4c10      	ldr	r4, [pc, #64]	; (194b8 <MQTT_HandleGameMessages+0x124>)
   19476:	47a0      	blx	r4
    }
}
   19478:	46c0      	nop			; (mov r8, r8)
   1947a:	46bd      	mov	sp, r7
   1947c:	b009      	add	sp, #36	; 0x24
   1947e:	bd90      	pop	{r4, r7, pc}
   19480:	200004cc 	.word	0x200004cc
   19484:	0001d3e5 	.word	0x0001d3e5
   19488:	20000034 	.word	0x20000034
   1948c:	00039bdc 	.word	0x00039bdc
   19490:	00039f2c 	.word	0x00039f2c
   19494:	00037ba5 	.word	0x00037ba5
   19498:	00037c89 	.word	0x00037c89
   1949c:	00037d03 	.word	0x00037d03
   194a0:	00039f30 	.word	0x00039f30
   194a4:	00037915 	.word	0x00037915
   194a8:	000202d1 	.word	0x000202d1
   194ac:	00039f34 	.word	0x00039f34
   194b0:	00039f38 	.word	0x00039f38
   194b4:	2000073c 	.word	0x2000073c
   194b8:	00031dbd 	.word	0x00031dbd

000194bc <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   194bc:	b590      	push	{r4, r7, lr}
   194be:	b097      	sub	sp, #92	; 0x5c
   194c0:	af02      	add	r7, sp, #8
   194c2:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   194c4:	2064      	movs	r0, #100	; 0x64
   194c6:	4ba5      	ldr	r3, [pc, #660]	; (1975c <vWifiTask+0x2a0>)
   194c8:	4798      	blx	r3
    init_state();
   194ca:	4ba5      	ldr	r3, [pc, #660]	; (19760 <vWifiTask+0x2a4>)
   194cc:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   194ce:	2200      	movs	r2, #0
   194d0:	2104      	movs	r1, #4
   194d2:	2005      	movs	r0, #5
   194d4:	4ba3      	ldr	r3, [pc, #652]	; (19764 <vWifiTask+0x2a8>)
   194d6:	4798      	blx	r3
   194d8:	0002      	movs	r2, r0
   194da:	4ba3      	ldr	r3, [pc, #652]	; (19768 <vWifiTask+0x2ac>)
   194dc:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   194de:	2200      	movs	r2, #0
   194e0:	2106      	movs	r1, #6
   194e2:	2005      	movs	r0, #5
   194e4:	4b9f      	ldr	r3, [pc, #636]	; (19764 <vWifiTask+0x2a8>)
   194e6:	4798      	blx	r3
   194e8:	0002      	movs	r2, r0
   194ea:	4ba0      	ldr	r3, [pc, #640]	; (1976c <vWifiTask+0x2b0>)
   194ec:	601a      	str	r2, [r3, #0]
	xQueueBmeBuffer = xQueueCreate(5,sizeof(struct BMEDataPacket));
   194ee:	2200      	movs	r2, #0
   194f0:	2114      	movs	r1, #20
   194f2:	2005      	movs	r0, #5
   194f4:	4b9b      	ldr	r3, [pc, #620]	; (19764 <vWifiTask+0x2a8>)
   194f6:	4798      	blx	r3
   194f8:	0002      	movs	r2, r0
   194fa:	4b9d      	ldr	r3, [pc, #628]	; (19770 <vWifiTask+0x2b4>)
   194fc:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   194fe:	2200      	movs	r2, #0
   19500:	2114      	movs	r1, #20
   19502:	2002      	movs	r0, #2
   19504:	4b97      	ldr	r3, [pc, #604]	; (19764 <vWifiTask+0x2a8>)
   19506:	4798      	blx	r3
   19508:	0002      	movs	r2, r0
   1950a:	4b9a      	ldr	r3, [pc, #616]	; (19774 <vWifiTask+0x2b8>)
   1950c:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   1950e:	2200      	movs	r2, #0
   19510:	2102      	movs	r1, #2
   19512:	2005      	movs	r0, #5
   19514:	4b93      	ldr	r3, [pc, #588]	; (19764 <vWifiTask+0x2a8>)
   19516:	4798      	blx	r3
   19518:	0002      	movs	r2, r0
   1951a:	4b97      	ldr	r3, [pc, #604]	; (19778 <vWifiTask+0x2bc>)
   1951c:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL || xQueueBmeBuffer == NULL) {
   1951e:	4b92      	ldr	r3, [pc, #584]	; (19768 <vWifiTask+0x2ac>)
   19520:	681b      	ldr	r3, [r3, #0]
   19522:	2b00      	cmp	r3, #0
   19524:	d00f      	beq.n	19546 <vWifiTask+0x8a>
   19526:	4b91      	ldr	r3, [pc, #580]	; (1976c <vWifiTask+0x2b0>)
   19528:	681b      	ldr	r3, [r3, #0]
   1952a:	2b00      	cmp	r3, #0
   1952c:	d00b      	beq.n	19546 <vWifiTask+0x8a>
   1952e:	4b91      	ldr	r3, [pc, #580]	; (19774 <vWifiTask+0x2b8>)
   19530:	681b      	ldr	r3, [r3, #0]
   19532:	2b00      	cmp	r3, #0
   19534:	d007      	beq.n	19546 <vWifiTask+0x8a>
   19536:	4b90      	ldr	r3, [pc, #576]	; (19778 <vWifiTask+0x2bc>)
   19538:	681b      	ldr	r3, [r3, #0]
   1953a:	2b00      	cmp	r3, #0
   1953c:	d003      	beq.n	19546 <vWifiTask+0x8a>
   1953e:	4b8c      	ldr	r3, [pc, #560]	; (19770 <vWifiTask+0x2b4>)
   19540:	681b      	ldr	r3, [r3, #0]
   19542:	2b00      	cmp	r3, #0
   19544:	d103      	bne.n	1954e <vWifiTask+0x92>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   19546:	4b8d      	ldr	r3, [pc, #564]	; (1977c <vWifiTask+0x2c0>)
   19548:	0018      	movs	r0, r3
   1954a:	4b8d      	ldr	r3, [pc, #564]	; (19780 <vWifiTask+0x2c4>)
   1954c:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   1954e:	4b8d      	ldr	r3, [pc, #564]	; (19784 <vWifiTask+0x2c8>)
   19550:	0018      	movs	r0, r3
   19552:	4b8b      	ldr	r3, [pc, #556]	; (19780 <vWifiTask+0x2c4>)
   19554:	4798      	blx	r3
	
	
	/* Initialize the Locker */
	lock();
   19556:	4b8c      	ldr	r3, [pc, #560]	; (19788 <vWifiTask+0x2cc>)
   19558:	4798      	blx	r3
	
    /* Initialize the Timer. */
    configure_timer();
   1955a:	4b8c      	ldr	r3, [pc, #560]	; (1978c <vWifiTask+0x2d0>)
   1955c:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   1955e:	4b8c      	ldr	r3, [pc, #560]	; (19790 <vWifiTask+0x2d4>)
   19560:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   19562:	4b8c      	ldr	r3, [pc, #560]	; (19794 <vWifiTask+0x2d8>)
   19564:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   19566:	4b8c      	ldr	r3, [pc, #560]	; (19798 <vWifiTask+0x2dc>)
   19568:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   1956a:	4b8c      	ldr	r3, [pc, #560]	; (1979c <vWifiTask+0x2e0>)
   1956c:	4798      	blx	r3
    configure_extint_callbacks();
   1956e:	4b8c      	ldr	r3, [pc, #560]	; (197a0 <vWifiTask+0x2e4>)
   19570:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   19572:	2324      	movs	r3, #36	; 0x24
   19574:	18fb      	adds	r3, r7, r3
   19576:	2218      	movs	r2, #24
   19578:	2100      	movs	r1, #0
   1957a:	0018      	movs	r0, r3
   1957c:	4b89      	ldr	r3, [pc, #548]	; (197a4 <vWifiTask+0x2e8>)
   1957e:	4798      	blx	r3

    nm_bsp_init();
   19580:	4b89      	ldr	r3, [pc, #548]	; (197a8 <vWifiTask+0x2ec>)
   19582:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   19584:	2324      	movs	r3, #36	; 0x24
   19586:	18fb      	adds	r3, r7, r3
   19588:	4a88      	ldr	r2, [pc, #544]	; (197ac <vWifiTask+0x2f0>)
   1958a:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   1958c:	234f      	movs	r3, #79	; 0x4f
   1958e:	18fc      	adds	r4, r7, r3
   19590:	2324      	movs	r3, #36	; 0x24
   19592:	18fb      	adds	r3, r7, r3
   19594:	0018      	movs	r0, r3
   19596:	4b86      	ldr	r3, [pc, #536]	; (197b0 <vWifiTask+0x2f4>)
   19598:	4798      	blx	r3
   1959a:	0003      	movs	r3, r0
   1959c:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   1959e:	234f      	movs	r3, #79	; 0x4f
   195a0:	18fb      	adds	r3, r7, r3
   195a2:	781b      	ldrb	r3, [r3, #0]
   195a4:	b25b      	sxtb	r3, r3
   195a6:	2b00      	cmp	r3, #0
   195a8:	d009      	beq.n	195be <vWifiTask+0x102>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   195aa:	234f      	movs	r3, #79	; 0x4f
   195ac:	18fb      	adds	r3, r7, r3
   195ae:	2200      	movs	r2, #0
   195b0:	569a      	ldrsb	r2, [r3, r2]
   195b2:	4b80      	ldr	r3, [pc, #512]	; (197b4 <vWifiTask+0x2f8>)
   195b4:	0019      	movs	r1, r3
   195b6:	2001      	movs	r0, #1
   195b8:	4b7f      	ldr	r3, [pc, #508]	; (197b8 <vWifiTask+0x2fc>)
   195ba:	4798      	blx	r3
        while (1) {
   195bc:	e7fe      	b.n	195bc <vWifiTask+0x100>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   195be:	4a7f      	ldr	r2, [pc, #508]	; (197bc <vWifiTask+0x300>)
   195c0:	4b7f      	ldr	r3, [pc, #508]	; (197c0 <vWifiTask+0x304>)
   195c2:	0019      	movs	r1, r3
   195c4:	2001      	movs	r0, #1
   195c6:	4b7c      	ldr	r3, [pc, #496]	; (197b8 <vWifiTask+0x2fc>)
   195c8:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   195ca:	4b7e      	ldr	r3, [pc, #504]	; (197c4 <vWifiTask+0x308>)
   195cc:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   195ce:	4a7e      	ldr	r2, [pc, #504]	; (197c8 <vWifiTask+0x30c>)
   195d0:	4b7e      	ldr	r3, [pc, #504]	; (197cc <vWifiTask+0x310>)
   195d2:	0011      	movs	r1, r2
   195d4:	0018      	movs	r0, r3
   195d6:	4b7e      	ldr	r3, [pc, #504]	; (197d0 <vWifiTask+0x314>)
   195d8:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   195da:	4a7e      	ldr	r2, [pc, #504]	; (197d4 <vWifiTask+0x318>)
   195dc:	4877      	ldr	r0, [pc, #476]	; (197bc <vWifiTask+0x300>)
   195de:	23ff      	movs	r3, #255	; 0xff
   195e0:	9300      	str	r3, [sp, #0]
   195e2:	0013      	movs	r3, r2
   195e4:	2202      	movs	r2, #2
   195e6:	2112      	movs	r1, #18
   195e8:	4c7b      	ldr	r4, [pc, #492]	; (197d8 <vWifiTask+0x31c>)
   195ea:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   195ec:	e006      	b.n	195fc <vWifiTask+0x140>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   195ee:	2000      	movs	r0, #0
   195f0:	4b7a      	ldr	r3, [pc, #488]	; (197dc <vWifiTask+0x320>)
   195f2:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   195f4:	4b7a      	ldr	r3, [pc, #488]	; (197e0 <vWifiTask+0x324>)
   195f6:	0018      	movs	r0, r3
   195f8:	4b7a      	ldr	r3, [pc, #488]	; (197e4 <vWifiTask+0x328>)
   195fa:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   195fc:	2002      	movs	r0, #2
   195fe:	4b7a      	ldr	r3, [pc, #488]	; (197e8 <vWifiTask+0x32c>)
   19600:	4798      	blx	r3
   19602:	0003      	movs	r3, r0
   19604:	001a      	movs	r2, r3
   19606:	2301      	movs	r3, #1
   19608:	4053      	eors	r3, r2
   1960a:	b2db      	uxtb	r3, r3
   1960c:	2b00      	cmp	r3, #0
   1960e:	d1ee      	bne.n	195ee <vWifiTask+0x132>
    }

    vTaskDelay(10);
   19610:	200a      	movs	r0, #10
   19612:	4b52      	ldr	r3, [pc, #328]	; (1975c <vWifiTask+0x2a0>)
   19614:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   19616:	4b75      	ldr	r3, [pc, #468]	; (197ec <vWifiTask+0x330>)
   19618:	2201      	movs	r2, #1
   1961a:	701a      	strb	r2, [r3, #0]
   
    while (1) {
		read_sensor_data();
   1961c:	4b74      	ldr	r3, [pc, #464]	; (197f0 <vWifiTask+0x334>)
   1961e:	4798      	blx	r3
		int temp = (int)getTemperature();
   19620:	4b74      	ldr	r3, [pc, #464]	; (197f4 <vWifiTask+0x338>)
   19622:	4798      	blx	r3
   19624:	1c02      	adds	r2, r0, #0
   19626:	4b74      	ldr	r3, [pc, #464]	; (197f8 <vWifiTask+0x33c>)
   19628:	1c10      	adds	r0, r2, #0
   1962a:	4798      	blx	r3
   1962c:	0003      	movs	r3, r0
   1962e:	64bb      	str	r3, [r7, #72]	; 0x48
		int hum = (int)getHumidity();
   19630:	4b72      	ldr	r3, [pc, #456]	; (197fc <vWifiTask+0x340>)
   19632:	4798      	blx	r3
   19634:	1c02      	adds	r2, r0, #0
   19636:	4b70      	ldr	r3, [pc, #448]	; (197f8 <vWifiTask+0x33c>)
   19638:	1c10      	adds	r0, r2, #0
   1963a:	4798      	blx	r3
   1963c:	0003      	movs	r3, r0
   1963e:	647b      	str	r3, [r7, #68]	; 0x44
		int pressure = (int)getPressure();
   19640:	4b6f      	ldr	r3, [pc, #444]	; (19800 <vWifiTask+0x344>)
   19642:	4798      	blx	r3
   19644:	1c02      	adds	r2, r0, #0
   19646:	4b6c      	ldr	r3, [pc, #432]	; (197f8 <vWifiTask+0x33c>)
   19648:	1c10      	adds	r0, r2, #0
   1964a:	4798      	blx	r3
   1964c:	0003      	movs	r3, r0
   1964e:	643b      	str	r3, [r7, #64]	; 0x40
		int gas = (int)getGasResistance();
   19650:	4b6c      	ldr	r3, [pc, #432]	; (19804 <vWifiTask+0x348>)
   19652:	4798      	blx	r3
   19654:	0003      	movs	r3, r0
   19656:	63fb      	str	r3, [r7, #60]	; 0x3c
		check_sensor_data(temp,hum,pressure,gas);
   19658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1965a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1965c:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1965e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   19660:	4c69      	ldr	r4, [pc, #420]	; (19808 <vWifiTask+0x34c>)
   19662:	47a0      	blx	r4
		struct BMEDataPacket bme;
		bme.temperature = temp;
   19664:	2310      	movs	r3, #16
   19666:	18fb      	adds	r3, r7, r3
   19668:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1966a:	601a      	str	r2, [r3, #0]
		bme.humidity = hum;
   1966c:	2310      	movs	r3, #16
   1966e:	18fb      	adds	r3, r7, r3
   19670:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   19672:	605a      	str	r2, [r3, #4]
		bme.pressure = pressure;
   19674:	2310      	movs	r3, #16
   19676:	18fb      	adds	r3, r7, r3
   19678:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1967a:	609a      	str	r2, [r3, #8]
		bme.warning_status = current_warning;
   1967c:	4b63      	ldr	r3, [pc, #396]	; (1980c <vWifiTask+0x350>)
   1967e:	681a      	ldr	r2, [r3, #0]
   19680:	2310      	movs	r3, #16
   19682:	18fb      	adds	r3, r7, r3
   19684:	60da      	str	r2, [r3, #12]
		bme.gas_res = (1200 - gas)/1200;
   19686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19688:	2296      	movs	r2, #150	; 0x96
   1968a:	00d2      	lsls	r2, r2, #3
   1968c:	1ad0      	subs	r0, r2, r3
   1968e:	4b60      	ldr	r3, [pc, #384]	; (19810 <vWifiTask+0x354>)
   19690:	2296      	movs	r2, #150	; 0x96
   19692:	00d1      	lsls	r1, r2, #3
   19694:	4798      	blx	r3
   19696:	0003      	movs	r3, r0
   19698:	001a      	movs	r2, r3
   1969a:	2310      	movs	r3, #16
   1969c:	18fb      	adds	r3, r7, r3
   1969e:	611a      	str	r2, [r3, #16]
		WifiAddBmeDataToQueue(&bme);
   196a0:	2310      	movs	r3, #16
   196a2:	18fb      	adds	r3, r7, r3
   196a4:	0018      	movs	r0, r3
   196a6:	4b5b      	ldr	r3, [pc, #364]	; (19814 <vWifiTask+0x358>)
   196a8:	4798      	blx	r3
		LCD_menu(wifi_status);
   196aa:	4b5b      	ldr	r3, [pc, #364]	; (19818 <vWifiTask+0x35c>)
   196ac:	781b      	ldrb	r3, [r3, #0]
   196ae:	0018      	movs	r0, r3
   196b0:	4b5a      	ldr	r3, [pc, #360]	; (1981c <vWifiTask+0x360>)
   196b2:	4798      	blx	r3
        switch (wifiStateMachine) {
   196b4:	4b4d      	ldr	r3, [pc, #308]	; (197ec <vWifiTask+0x330>)
   196b6:	781b      	ldrb	r3, [r3, #0]
   196b8:	b25b      	sxtb	r3, r3
   196ba:	2b01      	cmp	r3, #1
   196bc:	d00b      	beq.n	196d6 <vWifiTask+0x21a>
   196be:	dc02      	bgt.n	196c6 <vWifiTask+0x20a>
   196c0:	2b00      	cmp	r3, #0
   196c2:	d005      	beq.n	196d0 <vWifiTask+0x214>
   196c4:	e010      	b.n	196e8 <vWifiTask+0x22c>
   196c6:	2b02      	cmp	r3, #2
   196c8:	d008      	beq.n	196dc <vWifiTask+0x220>
   196ca:	2b03      	cmp	r3, #3
   196cc:	d009      	beq.n	196e2 <vWifiTask+0x226>
   196ce:	e00b      	b.n	196e8 <vWifiTask+0x22c>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   196d0:	4b53      	ldr	r3, [pc, #332]	; (19820 <vWifiTask+0x364>)
   196d2:	4798      	blx	r3

                break;
   196d4:	e00c      	b.n	196f0 <vWifiTask+0x234>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   196d6:	4b53      	ldr	r3, [pc, #332]	; (19824 <vWifiTask+0x368>)
   196d8:	4798      	blx	r3
                break;
   196da:	e009      	b.n	196f0 <vWifiTask+0x234>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   196dc:	4b52      	ldr	r3, [pc, #328]	; (19828 <vWifiTask+0x36c>)
   196de:	4798      	blx	r3
                break;
   196e0:	e006      	b.n	196f0 <vWifiTask+0x234>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   196e2:	4b52      	ldr	r3, [pc, #328]	; (1982c <vWifiTask+0x370>)
   196e4:	4798      	blx	r3
                break;
   196e6:	e003      	b.n	196f0 <vWifiTask+0x234>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   196e8:	4b40      	ldr	r3, [pc, #256]	; (197ec <vWifiTask+0x330>)
   196ea:	2200      	movs	r2, #0
   196ec:	701a      	strb	r2, [r3, #0]
                break;
   196ee:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   196f0:	230f      	movs	r3, #15
   196f2:	18fb      	adds	r3, r7, r3
   196f4:	2200      	movs	r2, #0
   196f6:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   196f8:	4b1b      	ldr	r3, [pc, #108]	; (19768 <vWifiTask+0x2ac>)
   196fa:	681b      	ldr	r3, [r3, #0]
   196fc:	220f      	movs	r2, #15
   196fe:	18b9      	adds	r1, r7, r2
   19700:	2200      	movs	r2, #0
   19702:	0018      	movs	r0, r3
   19704:	4b4a      	ldr	r3, [pc, #296]	; (19830 <vWifiTask+0x374>)
   19706:	4798      	blx	r3
   19708:	0003      	movs	r3, r0
   1970a:	2b01      	cmp	r3, #1
   1970c:	d105      	bne.n	1971a <vWifiTask+0x25e>
            wifiStateMachine = DataToReceive;  // Update new state
   1970e:	230f      	movs	r3, #15
   19710:	18fb      	adds	r3, r7, r3
   19712:	781b      	ldrb	r3, [r3, #0]
   19714:	b25a      	sxtb	r2, r3
   19716:	4b35      	ldr	r3, [pc, #212]	; (197ec <vWifiTask+0x330>)
   19718:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   1971a:	4b46      	ldr	r3, [pc, #280]	; (19834 <vWifiTask+0x378>)
   1971c:	781b      	ldrb	r3, [r3, #0]
   1971e:	b2db      	uxtb	r3, r3
   19720:	2b00      	cmp	r3, #0
   19722:	d017      	beq.n	19754 <vWifiTask+0x298>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   19724:	4b44      	ldr	r3, [pc, #272]	; (19838 <vWifiTask+0x37c>)
   19726:	0018      	movs	r0, r3
   19728:	4b44      	ldr	r3, [pc, #272]	; (1983c <vWifiTask+0x380>)
   1972a:	4798      	blx	r3
   1972c:	0004      	movs	r4, r0
   1972e:	4a42      	ldr	r2, [pc, #264]	; (19838 <vWifiTask+0x37c>)
   19730:	4943      	ldr	r1, [pc, #268]	; (19840 <vWifiTask+0x384>)
   19732:	4844      	ldr	r0, [pc, #272]	; (19844 <vWifiTask+0x388>)
   19734:	2300      	movs	r3, #0
   19736:	9301      	str	r3, [sp, #4]
   19738:	2301      	movs	r3, #1
   1973a:	9300      	str	r3, [sp, #0]
   1973c:	0023      	movs	r3, r4
   1973e:	4c42      	ldr	r4, [pc, #264]	; (19848 <vWifiTask+0x38c>)
   19740:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   19742:	4a3d      	ldr	r2, [pc, #244]	; (19838 <vWifiTask+0x37c>)
   19744:	4b41      	ldr	r3, [pc, #260]	; (1984c <vWifiTask+0x390>)
   19746:	0019      	movs	r1, r3
   19748:	2001      	movs	r0, #1
   1974a:	4b1b      	ldr	r3, [pc, #108]	; (197b8 <vWifiTask+0x2fc>)
   1974c:	4798      	blx	r3
            isPressed = false;
   1974e:	4b39      	ldr	r3, [pc, #228]	; (19834 <vWifiTask+0x378>)
   19750:	2200      	movs	r2, #0
   19752:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(1);
   19754:	2001      	movs	r0, #1
   19756:	4b01      	ldr	r3, [pc, #4]	; (1975c <vWifiTask+0x2a0>)
   19758:	4798      	blx	r3
    while (1) {
   1975a:	e75f      	b.n	1961c <vWifiTask+0x160>
   1975c:	0001e591 	.word	0x0001e591
   19760:	0001817d 	.word	0x0001817d
   19764:	0001c885 	.word	0x0001c885
   19768:	200004c8 	.word	0x200004c8
   1976c:	200004d0 	.word	0x200004d0
   19770:	200004d8 	.word	0x200004d8
   19774:	200004cc 	.word	0x200004cc
   19778:	200004d4 	.word	0x200004d4
   1977c:	00039f4c 	.word	0x00039f4c
   19780:	000201e5 	.word	0x000201e5
   19784:	00039f74 	.word	0x00039f74
   19788:	00016c55 	.word	0x00016c55
   1978c:	00018be9 	.word	0x00018be9
   19790:	00018c25 	.word	0x00018c25
   19794:	00018e8d 	.word	0x00018e8d
   19798:	00018b05 	.word	0x00018b05
   1979c:	00018f45 	.word	0x00018f45
   197a0:	00018f85 	.word	0x00018f85
   197a4:	0003794b 	.word	0x0003794b
   197a8:	00022711 	.word	0x00022711
   197ac:	00018981 	.word	0x00018981
   197b0:	00024159 	.word	0x00024159
   197b4:	00039f90 	.word	0x00039f90
   197b8:	000202d1 	.word	0x000202d1
   197bc:	000399e4 	.word	0x000399e4
   197c0:	00039fbc 	.word	0x00039fbc
   197c4:	000278b9 	.word	0x000278b9
   197c8:	00018cdd 	.word	0x00018cdd
   197cc:	00018ca9 	.word	0x00018ca9
   197d0:	00027951 	.word	0x00027951
   197d4:	000399d4 	.word	0x000399d4
   197d8:	00024369 	.word	0x00024369
   197dc:	0002434d 	.word	0x0002434d
   197e0:	2000475c 	.word	0x2000475c
   197e4:	00034a9d 	.word	0x00034a9d
   197e8:	000181ed 	.word	0x000181ed
   197ec:	200004c6 	.word	0x200004c6
   197f0:	00014ad1 	.word	0x00014ad1
   197f4:	00014bbd 	.word	0x00014bbd
   197f8:	00035a95 	.word	0x00035a95
   197fc:	00014bd1 	.word	0x00014bd1
   19800:	00014be5 	.word	0x00014be5
   19804:	00014bf9 	.word	0x00014bf9
   19808:	00019909 	.word	0x00019909
   1980c:	200000b4 	.word	0x200000b4
   19810:	00034f29 	.word	0x00034f29
   19814:	000198b1 	.word	0x000198b1
   19818:	200004c5 	.word	0x200004c5
   1981c:	00017be1 	.word	0x00017be1
   19820:	00019185 	.word	0x00019185
   19824:	00019221 	.word	0x00019221
   19828:	00018ffd 	.word	0x00018ffd
   1982c:	00019091 	.word	0x00019091
   19830:	0001d3e5 	.word	0x0001d3e5
   19834:	20000b74 	.word	0x20000b74
   19838:	20000074 	.word	0x20000074
   1983c:	00037d03 	.word	0x00037d03
   19840:	00039fe0 	.word	0x00039fe0
   19844:	2000073c 	.word	0x2000073c
   19848:	00031dbd 	.word	0x00031dbd
   1984c:	00039ffc 	.word	0x00039ffc

00019850 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   19850:	b590      	push	{r4, r7, lr}
   19852:	b083      	sub	sp, #12
   19854:	af00      	add	r7, sp, #0
   19856:	0002      	movs	r2, r0
   19858:	1dfb      	adds	r3, r7, #7
   1985a:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   1985c:	1dfb      	adds	r3, r7, #7
   1985e:	781b      	ldrb	r3, [r3, #0]
   19860:	2b03      	cmp	r3, #3
   19862:	d806      	bhi.n	19872 <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   19864:	4b05      	ldr	r3, [pc, #20]	; (1987c <WifiHandlerSetState+0x2c>)
   19866:	6818      	ldr	r0, [r3, #0]
   19868:	1df9      	adds	r1, r7, #7
   1986a:	2300      	movs	r3, #0
   1986c:	220a      	movs	r2, #10
   1986e:	4c04      	ldr	r4, [pc, #16]	; (19880 <WifiHandlerSetState+0x30>)
   19870:	47a0      	blx	r4
    }
}
   19872:	46c0      	nop			; (mov r8, r8)
   19874:	46bd      	mov	sp, r7
   19876:	b003      	add	sp, #12
   19878:	bd90      	pop	{r4, r7, pc}
   1987a:	46c0      	nop			; (mov r8, r8)
   1987c:	200004c8 	.word	0x200004c8
   19880:	0001cb2d 	.word	0x0001cb2d

00019884 <WifiAddImuDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddImuDataToQueue(struct ImuDataPacket *imuPacket)
{
   19884:	b590      	push	{r4, r7, lr}
   19886:	b085      	sub	sp, #20
   19888:	af00      	add	r7, sp, #0
   1988a:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueImuBuffer, imuPacket, (TickType_t)10);
   1988c:	4b06      	ldr	r3, [pc, #24]	; (198a8 <WifiAddImuDataToQueue+0x24>)
   1988e:	6818      	ldr	r0, [r3, #0]
   19890:	6879      	ldr	r1, [r7, #4]
   19892:	2300      	movs	r3, #0
   19894:	220a      	movs	r2, #10
   19896:	4c05      	ldr	r4, [pc, #20]	; (198ac <WifiAddImuDataToQueue+0x28>)
   19898:	47a0      	blx	r4
   1989a:	0003      	movs	r3, r0
   1989c:	60fb      	str	r3, [r7, #12]
    return error;
   1989e:	68fb      	ldr	r3, [r7, #12]
}
   198a0:	0018      	movs	r0, r3
   198a2:	46bd      	mov	sp, r7
   198a4:	b005      	add	sp, #20
   198a6:	bd90      	pop	{r4, r7, pc}
   198a8:	200004d0 	.word	0x200004d0
   198ac:	0001cb2d 	.word	0x0001cb2d

000198b0 <WifiAddBmeDataToQueue>:
int WifiAddBmeDataToQueue(struct BMEDataPacket *bmePacket)
{
   198b0:	b590      	push	{r4, r7, lr}
   198b2:	b085      	sub	sp, #20
   198b4:	af00      	add	r7, sp, #0
   198b6:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueBmeBuffer, bmePacket, (TickType_t)10);
   198b8:	4b06      	ldr	r3, [pc, #24]	; (198d4 <WifiAddBmeDataToQueue+0x24>)
   198ba:	6818      	ldr	r0, [r3, #0]
   198bc:	6879      	ldr	r1, [r7, #4]
   198be:	2300      	movs	r3, #0
   198c0:	220a      	movs	r2, #10
   198c2:	4c05      	ldr	r4, [pc, #20]	; (198d8 <WifiAddBmeDataToQueue+0x28>)
   198c4:	47a0      	blx	r4
   198c6:	0003      	movs	r3, r0
   198c8:	60fb      	str	r3, [r7, #12]
	return error;
   198ca:	68fb      	ldr	r3, [r7, #12]
}
   198cc:	0018      	movs	r0, r3
   198ce:	46bd      	mov	sp, r7
   198d0:	b005      	add	sp, #20
   198d2:	bd90      	pop	{r4, r7, pc}
   198d4:	200004d8 	.word	0x200004d8
   198d8:	0001cb2d 	.word	0x0001cb2d

000198dc <WifiAddGameDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddGameDataToQueue(struct GameDataPacket *game)
{
   198dc:	b590      	push	{r4, r7, lr}
   198de:	b085      	sub	sp, #20
   198e0:	af00      	add	r7, sp, #0
   198e2:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBuffer, game, (TickType_t)10);
   198e4:	4b06      	ldr	r3, [pc, #24]	; (19900 <WifiAddGameDataToQueue+0x24>)
   198e6:	6818      	ldr	r0, [r3, #0]
   198e8:	6879      	ldr	r1, [r7, #4]
   198ea:	2300      	movs	r3, #0
   198ec:	220a      	movs	r2, #10
   198ee:	4c05      	ldr	r4, [pc, #20]	; (19904 <WifiAddGameDataToQueue+0x28>)
   198f0:	47a0      	blx	r4
   198f2:	0003      	movs	r3, r0
   198f4:	60fb      	str	r3, [r7, #12]
    return error;
   198f6:	68fb      	ldr	r3, [r7, #12]
}
   198f8:	0018      	movs	r0, r3
   198fa:	46bd      	mov	sp, r7
   198fc:	b005      	add	sp, #20
   198fe:	bd90      	pop	{r4, r7, pc}
   19900:	200004cc 	.word	0x200004cc
   19904:	0001cb2d 	.word	0x0001cb2d

00019908 <check_sensor_data>:

void check_sensor_data(int temp,int hum,int pre,int gas){
   19908:	b580      	push	{r7, lr}
   1990a:	b084      	sub	sp, #16
   1990c:	af00      	add	r7, sp, #0
   1990e:	60f8      	str	r0, [r7, #12]
   19910:	60b9      	str	r1, [r7, #8]
   19912:	607a      	str	r2, [r7, #4]
   19914:	603b      	str	r3, [r7, #0]
	if(temp > MAX_TEMP)
   19916:	68fb      	ldr	r3, [r7, #12]
   19918:	2b1b      	cmp	r3, #27
   1991a:	dd06      	ble.n	1992a <check_sensor_data+0x22>
	{
		current_warning = TEMP_WARNING;
   1991c:	4b0a      	ldr	r3, [pc, #40]	; (19948 <check_sensor_data+0x40>)
   1991e:	2201      	movs	r2, #1
   19920:	601a      	str	r2, [r3, #0]
		warning_speaker();
   19922:	4b0a      	ldr	r3, [pc, #40]	; (1994c <check_sensor_data+0x44>)
   19924:	4798      	blx	r3
		unlock();
   19926:	4b0a      	ldr	r3, [pc, #40]	; (19950 <check_sensor_data+0x48>)
   19928:	4798      	blx	r3
	}
	if(gas < MAX_GAS){
   1992a:	683b      	ldr	r3, [r7, #0]
   1992c:	2b63      	cmp	r3, #99	; 0x63
   1992e:	dc06      	bgt.n	1993e <check_sensor_data+0x36>
		current_warning = GAS_WARNING;
   19930:	4b05      	ldr	r3, [pc, #20]	; (19948 <check_sensor_data+0x40>)
   19932:	2204      	movs	r2, #4
   19934:	601a      	str	r2, [r3, #0]
		warning_speaker();
   19936:	4b05      	ldr	r3, [pc, #20]	; (1994c <check_sensor_data+0x44>)
   19938:	4798      	blx	r3
		unlock();
   1993a:	4b05      	ldr	r3, [pc, #20]	; (19950 <check_sensor_data+0x48>)
   1993c:	4798      	blx	r3
	}
   1993e:	46c0      	nop			; (mov r8, r8)
   19940:	46bd      	mov	sp, r7
   19942:	b004      	add	sp, #16
   19944:	bd80      	pop	{r7, pc}
   19946:	46c0      	nop			; (mov r8, r8)
   19948:	200000b4 	.word	0x200000b4
   1994c:	0001707d 	.word	0x0001707d
   19950:	00016cd1 	.word	0x00016cd1

00019954 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   19954:	b580      	push	{r7, lr}
   19956:	b082      	sub	sp, #8
   19958:	af00      	add	r7, sp, #0
   1995a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1995c:	687b      	ldr	r3, [r7, #4]
   1995e:	2200      	movs	r2, #0
   19960:	701a      	strb	r2, [r3, #0]
}
   19962:	46c0      	nop			; (mov r8, r8)
   19964:	46bd      	mov	sp, r7
   19966:	b002      	add	sp, #8
   19968:	bd80      	pop	{r7, pc}
	...

0001996c <system_apb_clock_set_mask>:
{
   1996c:	b580      	push	{r7, lr}
   1996e:	b082      	sub	sp, #8
   19970:	af00      	add	r7, sp, #0
   19972:	0002      	movs	r2, r0
   19974:	6039      	str	r1, [r7, #0]
   19976:	1dfb      	adds	r3, r7, #7
   19978:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1997a:	1dfb      	adds	r3, r7, #7
   1997c:	781b      	ldrb	r3, [r3, #0]
   1997e:	2b01      	cmp	r3, #1
   19980:	d00a      	beq.n	19998 <system_apb_clock_set_mask+0x2c>
   19982:	2b02      	cmp	r3, #2
   19984:	d00f      	beq.n	199a6 <system_apb_clock_set_mask+0x3a>
   19986:	2b00      	cmp	r3, #0
   19988:	d114      	bne.n	199b4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1998a:	4b0e      	ldr	r3, [pc, #56]	; (199c4 <system_apb_clock_set_mask+0x58>)
   1998c:	4a0d      	ldr	r2, [pc, #52]	; (199c4 <system_apb_clock_set_mask+0x58>)
   1998e:	6991      	ldr	r1, [r2, #24]
   19990:	683a      	ldr	r2, [r7, #0]
   19992:	430a      	orrs	r2, r1
   19994:	619a      	str	r2, [r3, #24]
			break;
   19996:	e00f      	b.n	199b8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   19998:	4b0a      	ldr	r3, [pc, #40]	; (199c4 <system_apb_clock_set_mask+0x58>)
   1999a:	4a0a      	ldr	r2, [pc, #40]	; (199c4 <system_apb_clock_set_mask+0x58>)
   1999c:	69d1      	ldr	r1, [r2, #28]
   1999e:	683a      	ldr	r2, [r7, #0]
   199a0:	430a      	orrs	r2, r1
   199a2:	61da      	str	r2, [r3, #28]
			break;
   199a4:	e008      	b.n	199b8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   199a6:	4b07      	ldr	r3, [pc, #28]	; (199c4 <system_apb_clock_set_mask+0x58>)
   199a8:	4a06      	ldr	r2, [pc, #24]	; (199c4 <system_apb_clock_set_mask+0x58>)
   199aa:	6a11      	ldr	r1, [r2, #32]
   199ac:	683a      	ldr	r2, [r7, #0]
   199ae:	430a      	orrs	r2, r1
   199b0:	621a      	str	r2, [r3, #32]
			break;
   199b2:	e001      	b.n	199b8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   199b4:	2317      	movs	r3, #23
   199b6:	e000      	b.n	199ba <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   199b8:	2300      	movs	r3, #0
}
   199ba:	0018      	movs	r0, r3
   199bc:	46bd      	mov	sp, r7
   199be:	b002      	add	sp, #8
   199c0:	bd80      	pop	{r7, pc}
   199c2:	46c0      	nop			; (mov r8, r8)
   199c4:	40000400 	.word	0x40000400

000199c8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   199c8:	b580      	push	{r7, lr}
   199ca:	b082      	sub	sp, #8
   199cc:	af00      	add	r7, sp, #0
   199ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   199d0:	687b      	ldr	r3, [r7, #4]
   199d2:	2280      	movs	r2, #128	; 0x80
   199d4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   199d6:	687b      	ldr	r3, [r7, #4]
   199d8:	2200      	movs	r2, #0
   199da:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   199dc:	687b      	ldr	r3, [r7, #4]
   199de:	2201      	movs	r2, #1
   199e0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   199e2:	687b      	ldr	r3, [r7, #4]
   199e4:	2200      	movs	r2, #0
   199e6:	70da      	strb	r2, [r3, #3]
}
   199e8:	46c0      	nop			; (mov r8, r8)
   199ea:	46bd      	mov	sp, r7
   199ec:	b002      	add	sp, #8
   199ee:	bd80      	pop	{r7, pc}

000199f0 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   199f0:	b580      	push	{r7, lr}
   199f2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   199f4:	4b05      	ldr	r3, [pc, #20]	; (19a0c <system_is_debugger_present+0x1c>)
   199f6:	789b      	ldrb	r3, [r3, #2]
   199f8:	b2db      	uxtb	r3, r3
   199fa:	001a      	movs	r2, r3
   199fc:	2302      	movs	r3, #2
   199fe:	4013      	ands	r3, r2
   19a00:	1e5a      	subs	r2, r3, #1
   19a02:	4193      	sbcs	r3, r2
   19a04:	b2db      	uxtb	r3, r3
}
   19a06:	0018      	movs	r0, r3
   19a08:	46bd      	mov	sp, r7
   19a0a:	bd80      	pop	{r7, pc}
   19a0c:	41002000 	.word	0x41002000

00019a10 <system_interrupt_enter_critical_section>:
{
   19a10:	b580      	push	{r7, lr}
   19a12:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   19a14:	4b02      	ldr	r3, [pc, #8]	; (19a20 <system_interrupt_enter_critical_section+0x10>)
   19a16:	4798      	blx	r3
}
   19a18:	46c0      	nop			; (mov r8, r8)
   19a1a:	46bd      	mov	sp, r7
   19a1c:	bd80      	pop	{r7, pc}
   19a1e:	46c0      	nop			; (mov r8, r8)
   19a20:	000285b1 	.word	0x000285b1

00019a24 <system_interrupt_leave_critical_section>:
{
   19a24:	b580      	push	{r7, lr}
   19a26:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   19a28:	4b02      	ldr	r3, [pc, #8]	; (19a34 <system_interrupt_leave_critical_section+0x10>)
   19a2a:	4798      	blx	r3
}
   19a2c:	46c0      	nop			; (mov r8, r8)
   19a2e:	46bd      	mov	sp, r7
   19a30:	bd80      	pop	{r7, pc}
   19a32:	46c0      	nop			; (mov r8, r8)
   19a34:	00028605 	.word	0x00028605

00019a38 <system_interrupt_disable>:
{
   19a38:	b580      	push	{r7, lr}
   19a3a:	b082      	sub	sp, #8
   19a3c:	af00      	add	r7, sp, #0
   19a3e:	0002      	movs	r2, r0
   19a40:	1dfb      	adds	r3, r7, #7
   19a42:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   19a44:	4a07      	ldr	r2, [pc, #28]	; (19a64 <system_interrupt_disable+0x2c>)
   19a46:	1dfb      	adds	r3, r7, #7
   19a48:	781b      	ldrb	r3, [r3, #0]
   19a4a:	0019      	movs	r1, r3
   19a4c:	231f      	movs	r3, #31
   19a4e:	400b      	ands	r3, r1
   19a50:	2101      	movs	r1, #1
   19a52:	4099      	lsls	r1, r3
   19a54:	000b      	movs	r3, r1
   19a56:	0019      	movs	r1, r3
   19a58:	2380      	movs	r3, #128	; 0x80
   19a5a:	50d1      	str	r1, [r2, r3]
}
   19a5c:	46c0      	nop			; (mov r8, r8)
   19a5e:	46bd      	mov	sp, r7
   19a60:	b002      	add	sp, #8
   19a62:	bd80      	pop	{r7, pc}
   19a64:	e000e100 	.word	0xe000e100

00019a68 <i2c_master_is_syncing>:
{
   19a68:	b580      	push	{r7, lr}
   19a6a:	b084      	sub	sp, #16
   19a6c:	af00      	add	r7, sp, #0
   19a6e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   19a70:	687b      	ldr	r3, [r7, #4]
   19a72:	681b      	ldr	r3, [r3, #0]
   19a74:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   19a76:	68fb      	ldr	r3, [r7, #12]
   19a78:	69db      	ldr	r3, [r3, #28]
   19a7a:	2207      	movs	r2, #7
   19a7c:	4013      	ands	r3, r2
   19a7e:	1e5a      	subs	r2, r3, #1
   19a80:	4193      	sbcs	r3, r2
   19a82:	b2db      	uxtb	r3, r3
}
   19a84:	0018      	movs	r0, r3
   19a86:	46bd      	mov	sp, r7
   19a88:	b004      	add	sp, #16
   19a8a:	bd80      	pop	{r7, pc}

00019a8c <_i2c_master_wait_for_sync>:
{
   19a8c:	b580      	push	{r7, lr}
   19a8e:	b082      	sub	sp, #8
   19a90:	af00      	add	r7, sp, #0
   19a92:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   19a94:	46c0      	nop			; (mov r8, r8)
   19a96:	687b      	ldr	r3, [r7, #4]
   19a98:	0018      	movs	r0, r3
   19a9a:	4b04      	ldr	r3, [pc, #16]	; (19aac <_i2c_master_wait_for_sync+0x20>)
   19a9c:	4798      	blx	r3
   19a9e:	1e03      	subs	r3, r0, #0
   19aa0:	d1f9      	bne.n	19a96 <_i2c_master_wait_for_sync+0xa>
}
   19aa2:	46c0      	nop			; (mov r8, r8)
   19aa4:	46bd      	mov	sp, r7
   19aa6:	b002      	add	sp, #8
   19aa8:	bd80      	pop	{r7, pc}
   19aaa:	46c0      	nop			; (mov r8, r8)
   19aac:	00019a69 	.word	0x00019a69

00019ab0 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   19ab0:	b580      	push	{r7, lr}
   19ab2:	b084      	sub	sp, #16
   19ab4:	af00      	add	r7, sp, #0
   19ab6:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   19ab8:	687b      	ldr	r3, [r7, #4]
   19aba:	681b      	ldr	r3, [r3, #0]
   19abc:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   19abe:	687b      	ldr	r3, [r7, #4]
   19ac0:	681b      	ldr	r3, [r3, #0]
   19ac2:	0018      	movs	r0, r3
   19ac4:	4b0d      	ldr	r3, [pc, #52]	; (19afc <i2c_master_disable+0x4c>)
   19ac6:	4798      	blx	r3
   19ac8:	0003      	movs	r3, r0
   19aca:	0018      	movs	r0, r3
   19acc:	4b0c      	ldr	r3, [pc, #48]	; (19b00 <i2c_master_disable+0x50>)
   19ace:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   19ad0:	687b      	ldr	r3, [r7, #4]
   19ad2:	0018      	movs	r0, r3
   19ad4:	4b0b      	ldr	r3, [pc, #44]	; (19b04 <i2c_master_disable+0x54>)
   19ad6:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   19ad8:	68fb      	ldr	r3, [r7, #12]
   19ada:	2283      	movs	r2, #131	; 0x83
   19adc:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   19ade:	68fb      	ldr	r3, [r7, #12]
   19ae0:	2283      	movs	r2, #131	; 0x83
   19ae2:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   19ae4:	68fb      	ldr	r3, [r7, #12]
   19ae6:	681b      	ldr	r3, [r3, #0]
   19ae8:	2202      	movs	r2, #2
   19aea:	4393      	bics	r3, r2
   19aec:	001a      	movs	r2, r3
   19aee:	68fb      	ldr	r3, [r7, #12]
   19af0:	601a      	str	r2, [r3, #0]

}
   19af2:	46c0      	nop			; (mov r8, r8)
   19af4:	46bd      	mov	sp, r7
   19af6:	b004      	add	sp, #16
   19af8:	bd80      	pop	{r7, pc}
   19afa:	46c0      	nop			; (mov r8, r8)
   19afc:	00029a85 	.word	0x00029a85
   19b00:	00019a39 	.word	0x00019a39
   19b04:	00019a8d 	.word	0x00019a8d

00019b08 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   19b08:	b5f0      	push	{r4, r5, r6, r7, lr}
   19b0a:	b097      	sub	sp, #92	; 0x5c
   19b0c:	af00      	add	r7, sp, #0
   19b0e:	6178      	str	r0, [r7, #20]
   19b10:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   19b12:	2300      	movs	r3, #0
   19b14:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   19b16:	2300      	movs	r3, #0
   19b18:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   19b1a:	2300      	movs	r3, #0
   19b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   19b1e:	233b      	movs	r3, #59	; 0x3b
   19b20:	2210      	movs	r2, #16
   19b22:	4694      	mov	ip, r2
   19b24:	44bc      	add	ip, r7
   19b26:	4463      	add	r3, ip
   19b28:	2200      	movs	r2, #0
   19b2a:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   19b2c:	697b      	ldr	r3, [r7, #20]
   19b2e:	681b      	ldr	r3, [r3, #0]
   19b30:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   19b32:	697b      	ldr	r3, [r7, #20]
   19b34:	681b      	ldr	r3, [r3, #0]
   19b36:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   19b38:	2323      	movs	r3, #35	; 0x23
   19b3a:	2210      	movs	r2, #16
   19b3c:	18ba      	adds	r2, r7, r2
   19b3e:	18d4      	adds	r4, r2, r3
   19b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19b42:	0018      	movs	r0, r3
   19b44:	4bc0      	ldr	r3, [pc, #768]	; (19e48 <_i2c_master_set_config+0x340>)
   19b46:	4798      	blx	r3
   19b48:	0003      	movs	r3, r0
   19b4a:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   19b4c:	230c      	movs	r3, #12
   19b4e:	2210      	movs	r2, #16
   19b50:	4694      	mov	ip, r2
   19b52:	44bc      	add	ip, r7
   19b54:	4463      	add	r3, ip
   19b56:	0018      	movs	r0, r3
   19b58:	4bbc      	ldr	r3, [pc, #752]	; (19e4c <_i2c_master_set_config+0x344>)
   19b5a:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   19b5c:	693b      	ldr	r3, [r7, #16]
   19b5e:	69db      	ldr	r3, [r3, #28]
   19b60:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   19b62:	693b      	ldr	r3, [r7, #16]
   19b64:	6a1b      	ldr	r3, [r3, #32]
   19b66:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   19b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   19b6a:	2b00      	cmp	r3, #0
   19b6c:	d106      	bne.n	19b7c <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   19b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19b70:	2100      	movs	r1, #0
   19b72:	0018      	movs	r0, r3
   19b74:	4bb6      	ldr	r3, [pc, #728]	; (19e50 <_i2c_master_set_config+0x348>)
   19b76:	4798      	blx	r3
   19b78:	0003      	movs	r3, r0
   19b7a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   19b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   19b7e:	b2da      	uxtb	r2, r3
   19b80:	230c      	movs	r3, #12
   19b82:	2110      	movs	r1, #16
   19b84:	468c      	mov	ip, r1
   19b86:	44bc      	add	ip, r7
   19b88:	4463      	add	r3, ip
   19b8a:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   19b8c:	230c      	movs	r3, #12
   19b8e:	2210      	movs	r2, #16
   19b90:	4694      	mov	ip, r2
   19b92:	44bc      	add	ip, r7
   19b94:	4463      	add	r3, ip
   19b96:	2202      	movs	r2, #2
   19b98:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   19b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   19b9c:	0c1b      	lsrs	r3, r3, #16
   19b9e:	b2db      	uxtb	r3, r3
   19ba0:	220c      	movs	r2, #12
   19ba2:	2110      	movs	r1, #16
   19ba4:	468c      	mov	ip, r1
   19ba6:	44bc      	add	ip, r7
   19ba8:	4462      	add	r2, ip
   19baa:	0011      	movs	r1, r2
   19bac:	0018      	movs	r0, r3
   19bae:	4ba9      	ldr	r3, [pc, #676]	; (19e54 <_i2c_master_set_config+0x34c>)
   19bb0:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   19bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19bb4:	2b00      	cmp	r3, #0
   19bb6:	d106      	bne.n	19bc6 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   19bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19bba:	2101      	movs	r1, #1
   19bbc:	0018      	movs	r0, r3
   19bbe:	4ba4      	ldr	r3, [pc, #656]	; (19e50 <_i2c_master_set_config+0x348>)
   19bc0:	4798      	blx	r3
   19bc2:	0003      	movs	r3, r0
   19bc4:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   19bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19bc8:	b2da      	uxtb	r2, r3
   19bca:	230c      	movs	r3, #12
   19bcc:	2110      	movs	r1, #16
   19bce:	468c      	mov	ip, r1
   19bd0:	44bc      	add	ip, r7
   19bd2:	4463      	add	r3, ip
   19bd4:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   19bd6:	230c      	movs	r3, #12
   19bd8:	2210      	movs	r2, #16
   19bda:	4694      	mov	ip, r2
   19bdc:	44bc      	add	ip, r7
   19bde:	4463      	add	r3, ip
   19be0:	2202      	movs	r2, #2
   19be2:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   19be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19be6:	0c1b      	lsrs	r3, r3, #16
   19be8:	b2db      	uxtb	r3, r3
   19bea:	220c      	movs	r2, #12
   19bec:	2110      	movs	r1, #16
   19bee:	468c      	mov	ip, r1
   19bf0:	44bc      	add	ip, r7
   19bf2:	4462      	add	r2, ip
   19bf4:	0011      	movs	r1, r2
   19bf6:	0018      	movs	r0, r3
   19bf8:	4b96      	ldr	r3, [pc, #600]	; (19e54 <_i2c_master_set_config+0x34c>)
   19bfa:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   19bfc:	693b      	ldr	r3, [r7, #16]
   19bfe:	8a9a      	ldrh	r2, [r3, #20]
   19c00:	697b      	ldr	r3, [r7, #20]
   19c02:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   19c04:	693b      	ldr	r3, [r7, #16]
   19c06:	8ada      	ldrh	r2, [r3, #22]
   19c08:	697b      	ldr	r3, [r7, #20]
   19c0a:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   19c0c:	693b      	ldr	r3, [r7, #16]
   19c0e:	7e1b      	ldrb	r3, [r3, #24]
   19c10:	2b00      	cmp	r3, #0
   19c12:	d103      	bne.n	19c1c <_i2c_master_set_config+0x114>
   19c14:	4b90      	ldr	r3, [pc, #576]	; (19e58 <_i2c_master_set_config+0x350>)
   19c16:	4798      	blx	r3
   19c18:	1e03      	subs	r3, r0, #0
   19c1a:	d002      	beq.n	19c22 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   19c1c:	2380      	movs	r3, #128	; 0x80
   19c1e:	657b      	str	r3, [r7, #84]	; 0x54
   19c20:	e001      	b.n	19c26 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   19c22:	2300      	movs	r3, #0
   19c24:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   19c26:	693b      	ldr	r3, [r7, #16]
   19c28:	691b      	ldr	r3, [r3, #16]
   19c2a:	2b00      	cmp	r3, #0
   19c2c:	d004      	beq.n	19c38 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   19c2e:	693b      	ldr	r3, [r7, #16]
   19c30:	691b      	ldr	r3, [r3, #16]
   19c32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   19c34:	4313      	orrs	r3, r2
   19c36:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   19c38:	693b      	ldr	r3, [r7, #16]
   19c3a:	689b      	ldr	r3, [r3, #8]
   19c3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   19c3e:	4313      	orrs	r3, r2
   19c40:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   19c42:	693b      	ldr	r3, [r7, #16]
   19c44:	2224      	movs	r2, #36	; 0x24
   19c46:	5c9b      	ldrb	r3, [r3, r2]
   19c48:	2b00      	cmp	r3, #0
   19c4a:	d004      	beq.n	19c56 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   19c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   19c4e:	2280      	movs	r2, #128	; 0x80
   19c50:	05d2      	lsls	r2, r2, #23
   19c52:	4313      	orrs	r3, r2
   19c54:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   19c56:	693b      	ldr	r3, [r7, #16]
   19c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19c5a:	2b00      	cmp	r3, #0
   19c5c:	d004      	beq.n	19c68 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   19c5e:	693b      	ldr	r3, [r7, #16]
   19c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19c62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   19c64:	4313      	orrs	r3, r2
   19c66:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   19c68:	693b      	ldr	r3, [r7, #16]
   19c6a:	222c      	movs	r2, #44	; 0x2c
   19c6c:	5c9b      	ldrb	r3, [r3, r2]
   19c6e:	2b00      	cmp	r3, #0
   19c70:	d105      	bne.n	19c7e <_i2c_master_set_config+0x176>
   19c72:	693b      	ldr	r3, [r7, #16]
   19c74:	689a      	ldr	r2, [r3, #8]
   19c76:	2380      	movs	r3, #128	; 0x80
   19c78:	049b      	lsls	r3, r3, #18
   19c7a:	429a      	cmp	r2, r3
   19c7c:	d104      	bne.n	19c88 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   19c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   19c80:	2280      	movs	r2, #128	; 0x80
   19c82:	0512      	lsls	r2, r2, #20
   19c84:	4313      	orrs	r3, r2
   19c86:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   19c88:	693b      	ldr	r3, [r7, #16]
   19c8a:	222d      	movs	r2, #45	; 0x2d
   19c8c:	5c9b      	ldrb	r3, [r3, r2]
   19c8e:	2b00      	cmp	r3, #0
   19c90:	d004      	beq.n	19c9c <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   19c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   19c94:	2280      	movs	r2, #128	; 0x80
   19c96:	0412      	lsls	r2, r2, #16
   19c98:	4313      	orrs	r3, r2
   19c9a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   19c9c:	693b      	ldr	r3, [r7, #16]
   19c9e:	222e      	movs	r2, #46	; 0x2e
   19ca0:	5c9b      	ldrb	r3, [r3, r2]
   19ca2:	2b00      	cmp	r3, #0
   19ca4:	d004      	beq.n	19cb0 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   19ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   19ca8:	2280      	movs	r2, #128	; 0x80
   19caa:	03d2      	lsls	r2, r2, #15
   19cac:	4313      	orrs	r3, r2
   19cae:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   19cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19cb2:	681a      	ldr	r2, [r3, #0]
   19cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   19cb6:	431a      	orrs	r2, r3
   19cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19cba:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   19cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19cbe:	2280      	movs	r2, #128	; 0x80
   19cc0:	0052      	lsls	r2, r2, #1
   19cc2:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   19cc4:	2323      	movs	r3, #35	; 0x23
   19cc6:	2210      	movs	r2, #16
   19cc8:	4694      	mov	ip, r2
   19cca:	44bc      	add	ip, r7
   19ccc:	4463      	add	r3, ip
   19cce:	781b      	ldrb	r3, [r3, #0]
   19cd0:	3314      	adds	r3, #20
   19cd2:	b2db      	uxtb	r3, r3
   19cd4:	0018      	movs	r0, r3
   19cd6:	4b61      	ldr	r3, [pc, #388]	; (19e5c <_i2c_master_set_config+0x354>)
   19cd8:	4798      	blx	r3
   19cda:	0003      	movs	r3, r0
   19cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   19cde:	693b      	ldr	r3, [r7, #16]
   19ce0:	681b      	ldr	r3, [r3, #0]
   19ce2:	22fa      	movs	r2, #250	; 0xfa
   19ce4:	0092      	lsls	r2, r2, #2
   19ce6:	4353      	muls	r3, r2
   19ce8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   19cea:	693b      	ldr	r3, [r7, #16]
   19cec:	685b      	ldr	r3, [r3, #4]
   19cee:	22fa      	movs	r2, #250	; 0xfa
   19cf0:	0092      	lsls	r2, r2, #2
   19cf2:	4353      	muls	r3, r2
   19cf4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   19cf6:	693b      	ldr	r3, [r7, #16]
   19cf8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   19cfa:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   19cfc:	4b58      	ldr	r3, [pc, #352]	; (19e60 <_i2c_master_set_config+0x358>)
   19cfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   19d00:	4798      	blx	r3
   19d02:	0005      	movs	r5, r0
   19d04:	000e      	movs	r6, r1
   19d06:	4b56      	ldr	r3, [pc, #344]	; (19e60 <_i2c_master_set_config+0x358>)
   19d08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   19d0a:	4798      	blx	r3
   19d0c:	60b8      	str	r0, [r7, #8]
   19d0e:	60f9      	str	r1, [r7, #12]
   19d10:	4b53      	ldr	r3, [pc, #332]	; (19e60 <_i2c_master_set_config+0x358>)
   19d12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   19d14:	4798      	blx	r3
   19d16:	4c53      	ldr	r4, [pc, #332]	; (19e64 <_i2c_master_set_config+0x35c>)
   19d18:	4a53      	ldr	r2, [pc, #332]	; (19e68 <_i2c_master_set_config+0x360>)
   19d1a:	4b54      	ldr	r3, [pc, #336]	; (19e6c <_i2c_master_set_config+0x364>)
   19d1c:	47a0      	blx	r4
   19d1e:	0003      	movs	r3, r0
   19d20:	000c      	movs	r4, r1
   19d22:	603b      	str	r3, [r7, #0]
   19d24:	607c      	str	r4, [r7, #4]
   19d26:	4b4e      	ldr	r3, [pc, #312]	; (19e60 <_i2c_master_set_config+0x358>)
   19d28:	6a38      	ldr	r0, [r7, #32]
   19d2a:	4798      	blx	r3
   19d2c:	0002      	movs	r2, r0
   19d2e:	000b      	movs	r3, r1
   19d30:	4c4c      	ldr	r4, [pc, #304]	; (19e64 <_i2c_master_set_config+0x35c>)
   19d32:	6838      	ldr	r0, [r7, #0]
   19d34:	6879      	ldr	r1, [r7, #4]
   19d36:	47a0      	blx	r4
   19d38:	0003      	movs	r3, r0
   19d3a:	000c      	movs	r4, r1
   19d3c:	0018      	movs	r0, r3
   19d3e:	0021      	movs	r1, r4
   19d40:	4c4b      	ldr	r4, [pc, #300]	; (19e70 <_i2c_master_set_config+0x368>)
   19d42:	2200      	movs	r2, #0
   19d44:	4b4b      	ldr	r3, [pc, #300]	; (19e74 <_i2c_master_set_config+0x36c>)
   19d46:	47a0      	blx	r4
   19d48:	0003      	movs	r3, r0
   19d4a:	000c      	movs	r4, r1
   19d4c:	001a      	movs	r2, r3
   19d4e:	0023      	movs	r3, r4
   19d50:	4c44      	ldr	r4, [pc, #272]	; (19e64 <_i2c_master_set_config+0x35c>)
   19d52:	68b8      	ldr	r0, [r7, #8]
   19d54:	68f9      	ldr	r1, [r7, #12]
   19d56:	47a0      	blx	r4
   19d58:	0003      	movs	r3, r0
   19d5a:	000c      	movs	r4, r1
   19d5c:	001a      	movs	r2, r3
   19d5e:	0023      	movs	r3, r4
   19d60:	4c45      	ldr	r4, [pc, #276]	; (19e78 <_i2c_master_set_config+0x370>)
   19d62:	0028      	movs	r0, r5
   19d64:	0031      	movs	r1, r6
   19d66:	47a0      	blx	r4
   19d68:	0003      	movs	r3, r0
   19d6a:	000c      	movs	r4, r1
   19d6c:	001d      	movs	r5, r3
   19d6e:	0026      	movs	r6, r4
   19d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19d72:	005a      	lsls	r2, r3, #1
   19d74:	4b3a      	ldr	r3, [pc, #232]	; (19e60 <_i2c_master_set_config+0x358>)
   19d76:	0010      	movs	r0, r2
   19d78:	4798      	blx	r3
   19d7a:	0002      	movs	r2, r0
   19d7c:	000b      	movs	r3, r1
   19d7e:	4c3c      	ldr	r4, [pc, #240]	; (19e70 <_i2c_master_set_config+0x368>)
   19d80:	0028      	movs	r0, r5
   19d82:	0031      	movs	r1, r6
   19d84:	47a0      	blx	r4
   19d86:	0003      	movs	r3, r0
   19d88:	000c      	movs	r4, r1
   19d8a:	0018      	movs	r0, r3
   19d8c:	0021      	movs	r1, r4
   19d8e:	4c3a      	ldr	r4, [pc, #232]	; (19e78 <_i2c_master_set_config+0x370>)
   19d90:	2200      	movs	r2, #0
   19d92:	4b3a      	ldr	r3, [pc, #232]	; (19e7c <_i2c_master_set_config+0x374>)
   19d94:	47a0      	blx	r4
   19d96:	0003      	movs	r3, r0
   19d98:	000c      	movs	r4, r1
   19d9a:	001d      	movs	r5, r3
   19d9c:	0026      	movs	r6, r4
   19d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19da0:	005a      	lsls	r2, r3, #1
   19da2:	4b2f      	ldr	r3, [pc, #188]	; (19e60 <_i2c_master_set_config+0x358>)
   19da4:	0010      	movs	r0, r2
   19da6:	4798      	blx	r3
   19da8:	0002      	movs	r2, r0
   19daa:	000b      	movs	r3, r1
   19dac:	4c34      	ldr	r4, [pc, #208]	; (19e80 <_i2c_master_set_config+0x378>)
   19dae:	0028      	movs	r0, r5
   19db0:	0031      	movs	r1, r6
   19db2:	47a0      	blx	r4
   19db4:	0003      	movs	r3, r0
   19db6:	000c      	movs	r4, r1
   19db8:	0019      	movs	r1, r3
   19dba:	0022      	movs	r2, r4
   19dbc:	4b31      	ldr	r3, [pc, #196]	; (19e84 <_i2c_master_set_config+0x37c>)
   19dbe:	0008      	movs	r0, r1
   19dc0:	0011      	movs	r1, r2
   19dc2:	4798      	blx	r3
   19dc4:	0003      	movs	r3, r0
   19dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   19dc8:	693b      	ldr	r3, [r7, #16]
   19dca:	689a      	ldr	r2, [r3, #8]
   19dcc:	2380      	movs	r3, #128	; 0x80
   19dce:	049b      	lsls	r3, r3, #18
   19dd0:	429a      	cmp	r2, r3
   19dd2:	d16a      	bne.n	19eaa <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   19dd4:	4b22      	ldr	r3, [pc, #136]	; (19e60 <_i2c_master_set_config+0x358>)
   19dd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   19dd8:	4798      	blx	r3
   19dda:	4c25      	ldr	r4, [pc, #148]	; (19e70 <_i2c_master_set_config+0x368>)
   19ddc:	0002      	movs	r2, r0
   19dde:	000b      	movs	r3, r1
   19de0:	47a0      	blx	r4
   19de2:	0003      	movs	r3, r0
   19de4:	000c      	movs	r4, r1
   19de6:	001d      	movs	r5, r3
   19de8:	0026      	movs	r6, r4
   19dea:	4b1d      	ldr	r3, [pc, #116]	; (19e60 <_i2c_master_set_config+0x358>)
   19dec:	6a78      	ldr	r0, [r7, #36]	; 0x24
   19dee:	4798      	blx	r3
   19df0:	4c1c      	ldr	r4, [pc, #112]	; (19e64 <_i2c_master_set_config+0x35c>)
   19df2:	2200      	movs	r2, #0
   19df4:	4b24      	ldr	r3, [pc, #144]	; (19e88 <_i2c_master_set_config+0x380>)
   19df6:	47a0      	blx	r4
   19df8:	0003      	movs	r3, r0
   19dfa:	000c      	movs	r4, r1
   19dfc:	001a      	movs	r2, r3
   19dfe:	0023      	movs	r3, r4
   19e00:	4c1f      	ldr	r4, [pc, #124]	; (19e80 <_i2c_master_set_config+0x378>)
   19e02:	0028      	movs	r0, r5
   19e04:	0031      	movs	r1, r6
   19e06:	47a0      	blx	r4
   19e08:	0003      	movs	r3, r0
   19e0a:	000c      	movs	r4, r1
   19e0c:	0018      	movs	r0, r3
   19e0e:	0021      	movs	r1, r4
   19e10:	4c19      	ldr	r4, [pc, #100]	; (19e78 <_i2c_master_set_config+0x370>)
   19e12:	2200      	movs	r2, #0
   19e14:	4b19      	ldr	r3, [pc, #100]	; (19e7c <_i2c_master_set_config+0x374>)
   19e16:	47a0      	blx	r4
   19e18:	0003      	movs	r3, r0
   19e1a:	000c      	movs	r4, r1
   19e1c:	0019      	movs	r1, r3
   19e1e:	0022      	movs	r2, r4
   19e20:	4b18      	ldr	r3, [pc, #96]	; (19e84 <_i2c_master_set_config+0x37c>)
   19e22:	0008      	movs	r0, r1
   19e24:	0011      	movs	r1, r2
   19e26:	4798      	blx	r3
   19e28:	0003      	movs	r3, r0
   19e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   19e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   19e2e:	2b00      	cmp	r3, #0
   19e30:	d02e      	beq.n	19e90 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   19e32:	4b16      	ldr	r3, [pc, #88]	; (19e8c <_i2c_master_set_config+0x384>)
   19e34:	6a79      	ldr	r1, [r7, #36]	; 0x24
   19e36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   19e38:	4798      	blx	r3
   19e3a:	0003      	movs	r3, r0
   19e3c:	1e9a      	subs	r2, r3, #2
   19e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   19e40:	1ad3      	subs	r3, r2, r3
   19e42:	653b      	str	r3, [r7, #80]	; 0x50
   19e44:	e031      	b.n	19eaa <_i2c_master_set_config+0x3a2>
   19e46:	46c0      	nop			; (mov r8, r8)
   19e48:	000299b5 	.word	0x000299b5
   19e4c:	000199c9 	.word	0x000199c9
   19e50:	000297f9 	.word	0x000297f9
   19e54:	0002c601 	.word	0x0002c601
   19e58:	000199f1 	.word	0x000199f1
   19e5c:	0002c3c5 	.word	0x0002c3c5
   19e60:	0003761d 	.word	0x0003761d
   19e64:	00036a89 	.word	0x00036a89
   19e68:	e826d695 	.word	0xe826d695
   19e6c:	3e112e0b 	.word	0x3e112e0b
   19e70:	00035c01 	.word	0x00035c01
   19e74:	40240000 	.word	0x40240000
   19e78:	00036f89 	.word	0x00036f89
   19e7c:	3ff00000 	.word	0x3ff00000
   19e80:	00036221 	.word	0x00036221
   19e84:	000375b5 	.word	0x000375b5
   19e88:	40080000 	.word	0x40080000
   19e8c:	00034e15 	.word	0x00034e15
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   19e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19e92:	005a      	lsls	r2, r3, #1
   19e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19e96:	18d3      	adds	r3, r2, r3
   19e98:	1e5a      	subs	r2, r3, #1
   19e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19e9c:	0059      	lsls	r1, r3, #1
   19e9e:	4b1d      	ldr	r3, [pc, #116]	; (19f14 <_i2c_master_set_config+0x40c>)
   19ea0:	0010      	movs	r0, r2
   19ea2:	4798      	blx	r3
   19ea4:	0003      	movs	r3, r0
   19ea6:	3b01      	subs	r3, #1
   19ea8:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   19eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19eac:	2bff      	cmp	r3, #255	; 0xff
   19eae:	dc08      	bgt.n	19ec2 <_i2c_master_set_config+0x3ba>
   19eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19eb2:	2b00      	cmp	r3, #0
   19eb4:	db05      	blt.n	19ec2 <_i2c_master_set_config+0x3ba>
   19eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   19eb8:	2bff      	cmp	r3, #255	; 0xff
   19eba:	dc02      	bgt.n	19ec2 <_i2c_master_set_config+0x3ba>
   19ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   19ebe:	2b00      	cmp	r3, #0
   19ec0:	da06      	bge.n	19ed0 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   19ec2:	233b      	movs	r3, #59	; 0x3b
   19ec4:	2210      	movs	r2, #16
   19ec6:	4694      	mov	ip, r2
   19ec8:	44bc      	add	ip, r7
   19eca:	4463      	add	r3, ip
   19ecc:	2240      	movs	r2, #64	; 0x40
   19ece:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   19ed0:	233b      	movs	r3, #59	; 0x3b
   19ed2:	2210      	movs	r2, #16
   19ed4:	4694      	mov	ip, r2
   19ed6:	44bc      	add	ip, r7
   19ed8:	4463      	add	r3, ip
   19eda:	781b      	ldrb	r3, [r3, #0]
   19edc:	2b40      	cmp	r3, #64	; 0x40
   19ede:	d00e      	beq.n	19efe <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   19ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19ee2:	22ff      	movs	r2, #255	; 0xff
   19ee4:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   19ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   19ee8:	041b      	lsls	r3, r3, #16
   19eea:	0019      	movs	r1, r3
   19eec:	23ff      	movs	r3, #255	; 0xff
   19eee:	041b      	lsls	r3, r3, #16
   19ef0:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   19ef2:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   19ef4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   19ef6:	0612      	lsls	r2, r2, #24
   19ef8:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   19efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19efc:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   19efe:	233b      	movs	r3, #59	; 0x3b
   19f00:	2210      	movs	r2, #16
   19f02:	4694      	mov	ip, r2
   19f04:	44bc      	add	ip, r7
   19f06:	4463      	add	r3, ip
   19f08:	781b      	ldrb	r3, [r3, #0]
}
   19f0a:	0018      	movs	r0, r3
   19f0c:	46bd      	mov	sp, r7
   19f0e:	b017      	add	sp, #92	; 0x5c
   19f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19f12:	46c0      	nop			; (mov r8, r8)
   19f14:	00034e15 	.word	0x00034e15

00019f18 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   19f18:	b590      	push	{r4, r7, lr}
   19f1a:	b08b      	sub	sp, #44	; 0x2c
   19f1c:	af00      	add	r7, sp, #0
   19f1e:	60f8      	str	r0, [r7, #12]
   19f20:	60b9      	str	r1, [r7, #8]
   19f22:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   19f24:	68fb      	ldr	r3, [r7, #12]
   19f26:	68ba      	ldr	r2, [r7, #8]
   19f28:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   19f2a:	68fb      	ldr	r3, [r7, #12]
   19f2c:	681b      	ldr	r3, [r3, #0]
   19f2e:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   19f30:	68fb      	ldr	r3, [r7, #12]
   19f32:	681b      	ldr	r3, [r3, #0]
   19f34:	0018      	movs	r0, r3
   19f36:	4b3b      	ldr	r3, [pc, #236]	; (1a024 <i2c_master_init+0x10c>)
   19f38:	4798      	blx	r3
   19f3a:	0003      	movs	r3, r0
   19f3c:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   19f3e:	6a3b      	ldr	r3, [r7, #32]
   19f40:	3302      	adds	r3, #2
   19f42:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   19f44:	6a3b      	ldr	r3, [r7, #32]
   19f46:	3314      	adds	r3, #20
   19f48:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   19f4a:	2201      	movs	r2, #1
   19f4c:	69fb      	ldr	r3, [r7, #28]
   19f4e:	409a      	lsls	r2, r3
   19f50:	0013      	movs	r3, r2
   19f52:	0019      	movs	r1, r3
   19f54:	2002      	movs	r0, #2
   19f56:	4b34      	ldr	r3, [pc, #208]	; (1a028 <i2c_master_init+0x110>)
   19f58:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   19f5a:	2314      	movs	r3, #20
   19f5c:	18fb      	adds	r3, r7, r3
   19f5e:	0018      	movs	r0, r3
   19f60:	4b32      	ldr	r3, [pc, #200]	; (1a02c <i2c_master_init+0x114>)
   19f62:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   19f64:	687b      	ldr	r3, [r7, #4]
   19f66:	7b1a      	ldrb	r2, [r3, #12]
   19f68:	2314      	movs	r3, #20
   19f6a:	18fb      	adds	r3, r7, r3
   19f6c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   19f6e:	69bb      	ldr	r3, [r7, #24]
   19f70:	b2db      	uxtb	r3, r3
   19f72:	2214      	movs	r2, #20
   19f74:	18ba      	adds	r2, r7, r2
   19f76:	0011      	movs	r1, r2
   19f78:	0018      	movs	r0, r3
   19f7a:	4b2d      	ldr	r3, [pc, #180]	; (1a030 <i2c_master_init+0x118>)
   19f7c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   19f7e:	69bb      	ldr	r3, [r7, #24]
   19f80:	b2db      	uxtb	r3, r3
   19f82:	0018      	movs	r0, r3
   19f84:	4b2b      	ldr	r3, [pc, #172]	; (1a034 <i2c_master_init+0x11c>)
   19f86:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   19f88:	687b      	ldr	r3, [r7, #4]
   19f8a:	7b1b      	ldrb	r3, [r3, #12]
   19f8c:	2100      	movs	r1, #0
   19f8e:	0018      	movs	r0, r3
   19f90:	4b29      	ldr	r3, [pc, #164]	; (1a038 <i2c_master_init+0x120>)
   19f92:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   19f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19f96:	681b      	ldr	r3, [r3, #0]
   19f98:	2202      	movs	r2, #2
   19f9a:	4013      	ands	r3, r2
   19f9c:	d001      	beq.n	19fa2 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   19f9e:	231c      	movs	r3, #28
   19fa0:	e03b      	b.n	1a01a <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   19fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19fa4:	681b      	ldr	r3, [r3, #0]
   19fa6:	2201      	movs	r2, #1
   19fa8:	4013      	ands	r3, r2
   19faa:	d001      	beq.n	19fb0 <i2c_master_init+0x98>
		return STATUS_BUSY;
   19fac:	2305      	movs	r3, #5
   19fae:	e034      	b.n	1a01a <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   19fb0:	68fb      	ldr	r3, [r7, #12]
   19fb2:	681b      	ldr	r3, [r3, #0]
   19fb4:	2217      	movs	r2, #23
   19fb6:	18bc      	adds	r4, r7, r2
   19fb8:	0018      	movs	r0, r3
   19fba:	4b1a      	ldr	r3, [pc, #104]	; (1a024 <i2c_master_init+0x10c>)
   19fbc:	4798      	blx	r3
   19fbe:	0003      	movs	r3, r0
   19fc0:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   19fc2:	4a1e      	ldr	r2, [pc, #120]	; (1a03c <i2c_master_init+0x124>)
   19fc4:	2317      	movs	r3, #23
   19fc6:	18fb      	adds	r3, r7, r3
   19fc8:	781b      	ldrb	r3, [r3, #0]
   19fca:	0011      	movs	r1, r2
   19fcc:	0018      	movs	r0, r3
   19fce:	4b1c      	ldr	r3, [pc, #112]	; (1a040 <i2c_master_init+0x128>)
   19fd0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   19fd2:	2317      	movs	r3, #23
   19fd4:	18fb      	adds	r3, r7, r3
   19fd6:	781a      	ldrb	r2, [r3, #0]
   19fd8:	4b1a      	ldr	r3, [pc, #104]	; (1a044 <i2c_master_init+0x12c>)
   19fda:	0092      	lsls	r2, r2, #2
   19fdc:	68f9      	ldr	r1, [r7, #12]
   19fde:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   19fe0:	68fb      	ldr	r3, [r7, #12]
   19fe2:	2200      	movs	r2, #0
   19fe4:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   19fe6:	68fb      	ldr	r3, [r7, #12]
   19fe8:	2200      	movs	r2, #0
   19fea:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   19fec:	68fb      	ldr	r3, [r7, #12]
   19fee:	2200      	movs	r2, #0
   19ff0:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   19ff2:	68fb      	ldr	r3, [r7, #12]
   19ff4:	2200      	movs	r2, #0
   19ff6:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   19ff8:	68fb      	ldr	r3, [r7, #12]
   19ffa:	2225      	movs	r2, #37	; 0x25
   19ffc:	2100      	movs	r1, #0
   19ffe:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   1a000:	68fb      	ldr	r3, [r7, #12]
   1a002:	2200      	movs	r2, #0
   1a004:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   1a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a008:	2214      	movs	r2, #20
   1a00a:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   1a00c:	687a      	ldr	r2, [r7, #4]
   1a00e:	68fb      	ldr	r3, [r7, #12]
   1a010:	0011      	movs	r1, r2
   1a012:	0018      	movs	r0, r3
   1a014:	4b0c      	ldr	r3, [pc, #48]	; (1a048 <i2c_master_init+0x130>)
   1a016:	4798      	blx	r3
   1a018:	0003      	movs	r3, r0
}
   1a01a:	0018      	movs	r0, r3
   1a01c:	46bd      	mov	sp, r7
   1a01e:	b00b      	add	sp, #44	; 0x2c
   1a020:	bd90      	pop	{r4, r7, pc}
   1a022:	46c0      	nop			; (mov r8, r8)
   1a024:	000299b5 	.word	0x000299b5
   1a028:	0001996d 	.word	0x0001996d
   1a02c:	00019955 	.word	0x00019955
   1a030:	0002c2a1 	.word	0x0002c2a1
   1a034:	0002c2e5 	.word	0x0002c2e5
   1a038:	0002976d 	.word	0x0002976d
   1a03c:	00012bcd 	.word	0x00012bcd
   1a040:	00029a19 	.word	0x00029a19
   1a044:	20005a84 	.word	0x20005a84
   1a048:	00019b09 	.word	0x00019b09

0001a04c <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   1a04c:	b580      	push	{r7, lr}
   1a04e:	b084      	sub	sp, #16
   1a050:	af00      	add	r7, sp, #0
   1a052:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1a054:	687b      	ldr	r3, [r7, #4]
   1a056:	681b      	ldr	r3, [r3, #0]
   1a058:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   1a05a:	687b      	ldr	r3, [r7, #4]
   1a05c:	0018      	movs	r0, r3
   1a05e:	4b0f      	ldr	r3, [pc, #60]	; (1a09c <i2c_master_reset+0x50>)
   1a060:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   1a062:	687b      	ldr	r3, [r7, #4]
   1a064:	0018      	movs	r0, r3
   1a066:	4b0e      	ldr	r3, [pc, #56]	; (1a0a0 <i2c_master_reset+0x54>)
   1a068:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   1a06a:	4b0e      	ldr	r3, [pc, #56]	; (1a0a4 <i2c_master_reset+0x58>)
   1a06c:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   1a06e:	687b      	ldr	r3, [r7, #4]
   1a070:	681b      	ldr	r3, [r3, #0]
   1a072:	0018      	movs	r0, r3
   1a074:	4b0c      	ldr	r3, [pc, #48]	; (1a0a8 <i2c_master_reset+0x5c>)
   1a076:	4798      	blx	r3
   1a078:	0003      	movs	r3, r0
   1a07a:	0018      	movs	r0, r3
   1a07c:	4b0b      	ldr	r3, [pc, #44]	; (1a0ac <i2c_master_reset+0x60>)
   1a07e:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   1a080:	4b0b      	ldr	r3, [pc, #44]	; (1a0b0 <i2c_master_reset+0x64>)
   1a082:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   1a084:	687b      	ldr	r3, [r7, #4]
   1a086:	0018      	movs	r0, r3
   1a088:	4b04      	ldr	r3, [pc, #16]	; (1a09c <i2c_master_reset+0x50>)
   1a08a:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   1a08c:	68fb      	ldr	r3, [r7, #12]
   1a08e:	2201      	movs	r2, #1
   1a090:	601a      	str	r2, [r3, #0]
}
   1a092:	46c0      	nop			; (mov r8, r8)
   1a094:	46bd      	mov	sp, r7
   1a096:	b004      	add	sp, #16
   1a098:	bd80      	pop	{r7, pc}
   1a09a:	46c0      	nop			; (mov r8, r8)
   1a09c:	00019a8d 	.word	0x00019a8d
   1a0a0:	00019ab1 	.word	0x00019ab1
   1a0a4:	00019a11 	.word	0x00019a11
   1a0a8:	00029a85 	.word	0x00029a85
   1a0ac:	0002c41d 	.word	0x0002c41d
   1a0b0:	00019a25 	.word	0x00019a25

0001a0b4 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   1a0b4:	b580      	push	{r7, lr}
   1a0b6:	b084      	sub	sp, #16
   1a0b8:	af00      	add	r7, sp, #0
   1a0ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1a0bc:	687b      	ldr	r3, [r7, #4]
   1a0be:	681b      	ldr	r3, [r3, #0]
   1a0c0:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   1a0c2:	68fb      	ldr	r3, [r7, #12]
   1a0c4:	7e1b      	ldrb	r3, [r3, #24]
   1a0c6:	b2db      	uxtb	r3, r3
   1a0c8:	001a      	movs	r2, r3
   1a0ca:	2302      	movs	r3, #2
   1a0cc:	4013      	ands	r3, r2
   1a0ce:	d00b      	beq.n	1a0e8 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   1a0d0:	68fb      	ldr	r3, [r7, #12]
   1a0d2:	2202      	movs	r2, #2
   1a0d4:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1a0d6:	68fb      	ldr	r3, [r7, #12]
   1a0d8:	8b5b      	ldrh	r3, [r3, #26]
   1a0da:	b29b      	uxth	r3, r3
   1a0dc:	001a      	movs	r2, r3
   1a0de:	2302      	movs	r3, #2
   1a0e0:	4013      	ands	r3, r2
   1a0e2:	d011      	beq.n	1a108 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   1a0e4:	2341      	movs	r3, #65	; 0x41
   1a0e6:	e010      	b.n	1a10a <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   1a0e8:	68fb      	ldr	r3, [r7, #12]
   1a0ea:	8b5b      	ldrh	r3, [r3, #26]
   1a0ec:	b29b      	uxth	r3, r3
   1a0ee:	001a      	movs	r2, r3
   1a0f0:	2304      	movs	r3, #4
   1a0f2:	4013      	ands	r3, r2
   1a0f4:	d008      	beq.n	1a108 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1a0f6:	68fb      	ldr	r3, [r7, #12]
   1a0f8:	685b      	ldr	r3, [r3, #4]
   1a0fa:	22c0      	movs	r2, #192	; 0xc0
   1a0fc:	0292      	lsls	r2, r2, #10
   1a0fe:	431a      	orrs	r2, r3
   1a100:	68fb      	ldr	r3, [r7, #12]
   1a102:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   1a104:	2318      	movs	r3, #24
   1a106:	e000      	b.n	1a10a <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   1a108:	2300      	movs	r3, #0
}
   1a10a:	0018      	movs	r0, r3
   1a10c:	46bd      	mov	sp, r7
   1a10e:	b004      	add	sp, #16
   1a110:	bd80      	pop	{r7, pc}

0001a112 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   1a112:	b580      	push	{r7, lr}
   1a114:	b084      	sub	sp, #16
   1a116:	af00      	add	r7, sp, #0
   1a118:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1a11a:	687b      	ldr	r3, [r7, #4]
   1a11c:	681b      	ldr	r3, [r3, #0]
   1a11e:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   1a120:	230e      	movs	r3, #14
   1a122:	18fb      	adds	r3, r7, r3
   1a124:	2200      	movs	r2, #0
   1a126:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1a128:	e00f      	b.n	1a14a <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   1a12a:	230e      	movs	r3, #14
   1a12c:	18fb      	adds	r3, r7, r3
   1a12e:	220e      	movs	r2, #14
   1a130:	18ba      	adds	r2, r7, r2
   1a132:	8812      	ldrh	r2, [r2, #0]
   1a134:	3201      	adds	r2, #1
   1a136:	801a      	strh	r2, [r3, #0]
   1a138:	687b      	ldr	r3, [r7, #4]
   1a13a:	891b      	ldrh	r3, [r3, #8]
   1a13c:	220e      	movs	r2, #14
   1a13e:	18ba      	adds	r2, r7, r2
   1a140:	8812      	ldrh	r2, [r2, #0]
   1a142:	429a      	cmp	r2, r3
   1a144:	d301      	bcc.n	1a14a <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   1a146:	2312      	movs	r3, #18
   1a148:	e00e      	b.n	1a168 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1a14a:	68bb      	ldr	r3, [r7, #8]
   1a14c:	7e1b      	ldrb	r3, [r3, #24]
   1a14e:	b2db      	uxtb	r3, r3
   1a150:	001a      	movs	r2, r3
   1a152:	2301      	movs	r3, #1
   1a154:	4013      	ands	r3, r2
   1a156:	d106      	bne.n	1a166 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   1a158:	68bb      	ldr	r3, [r7, #8]
   1a15a:	7e1b      	ldrb	r3, [r3, #24]
   1a15c:	b2db      	uxtb	r3, r3
   1a15e:	001a      	movs	r2, r3
   1a160:	2302      	movs	r3, #2
   1a162:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1a164:	d0e1      	beq.n	1a12a <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   1a166:	2300      	movs	r3, #0
}
   1a168:	0018      	movs	r0, r3
   1a16a:	46bd      	mov	sp, r7
   1a16c:	b004      	add	sp, #16
   1a16e:	bd80      	pop	{r7, pc}

0001a170 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   1a170:	b590      	push	{r4, r7, lr}
   1a172:	b085      	sub	sp, #20
   1a174:	af00      	add	r7, sp, #0
   1a176:	6078      	str	r0, [r7, #4]
   1a178:	000a      	movs	r2, r1
   1a17a:	1cfb      	adds	r3, r7, #3
   1a17c:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1a17e:	687b      	ldr	r3, [r7, #4]
   1a180:	681b      	ldr	r3, [r3, #0]
   1a182:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1a184:	68fb      	ldr	r3, [r7, #12]
   1a186:	685b      	ldr	r3, [r3, #4]
   1a188:	2280      	movs	r2, #128	; 0x80
   1a18a:	02d2      	lsls	r2, r2, #11
   1a18c:	431a      	orrs	r2, r3
   1a18e:	68fb      	ldr	r3, [r7, #12]
   1a190:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   1a192:	1cfb      	adds	r3, r7, #3
   1a194:	781a      	ldrb	r2, [r3, #0]
   1a196:	68fb      	ldr	r3, [r7, #12]
   1a198:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   1a19a:	230b      	movs	r3, #11
   1a19c:	18fc      	adds	r4, r7, r3
   1a19e:	687b      	ldr	r3, [r7, #4]
   1a1a0:	0018      	movs	r0, r3
   1a1a2:	4b07      	ldr	r3, [pc, #28]	; (1a1c0 <_i2c_master_send_hs_master_code+0x50>)
   1a1a4:	4798      	blx	r3
   1a1a6:	0003      	movs	r3, r0
   1a1a8:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   1a1aa:	68fb      	ldr	r3, [r7, #12]
   1a1ac:	2201      	movs	r2, #1
   1a1ae:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   1a1b0:	230b      	movs	r3, #11
   1a1b2:	18fb      	adds	r3, r7, r3
   1a1b4:	781b      	ldrb	r3, [r3, #0]
}
   1a1b6:	0018      	movs	r0, r3
   1a1b8:	46bd      	mov	sp, r7
   1a1ba:	b005      	add	sp, #20
   1a1bc:	bd90      	pop	{r4, r7, pc}
   1a1be:	46c0      	nop			; (mov r8, r8)
   1a1c0:	0001a113 	.word	0x0001a113

0001a1c4 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   1a1c4:	b580      	push	{r7, lr}
   1a1c6:	af00      	add	r7, sp, #0
   1a1c8:	2000      	movs	r0, #0
   1a1ca:	4b02      	ldr	r3, [pc, #8]	; (1a1d4 <TC3_Handler+0x10>)
   1a1cc:	4798      	blx	r3
   1a1ce:	46c0      	nop			; (mov r8, r8)
   1a1d0:	46bd      	mov	sp, r7
   1a1d2:	bd80      	pop	{r7, pc}
   1a1d4:	0001a201 	.word	0x0001a201

0001a1d8 <TC4_Handler>:
   1a1d8:	b580      	push	{r7, lr}
   1a1da:	af00      	add	r7, sp, #0
   1a1dc:	2001      	movs	r0, #1
   1a1de:	4b02      	ldr	r3, [pc, #8]	; (1a1e8 <TC4_Handler+0x10>)
   1a1e0:	4798      	blx	r3
   1a1e2:	46c0      	nop			; (mov r8, r8)
   1a1e4:	46bd      	mov	sp, r7
   1a1e6:	bd80      	pop	{r7, pc}
   1a1e8:	0001a201 	.word	0x0001a201

0001a1ec <TC5_Handler>:
   1a1ec:	b580      	push	{r7, lr}
   1a1ee:	af00      	add	r7, sp, #0
   1a1f0:	2002      	movs	r0, #2
   1a1f2:	4b02      	ldr	r3, [pc, #8]	; (1a1fc <TC5_Handler+0x10>)
   1a1f4:	4798      	blx	r3
   1a1f6:	46c0      	nop			; (mov r8, r8)
   1a1f8:	46bd      	mov	sp, r7
   1a1fa:	bd80      	pop	{r7, pc}
   1a1fc:	0001a201 	.word	0x0001a201

0001a200 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   1a200:	b580      	push	{r7, lr}
   1a202:	b084      	sub	sp, #16
   1a204:	af00      	add	r7, sp, #0
   1a206:	0002      	movs	r2, r0
   1a208:	1dfb      	adds	r3, r7, #7
   1a20a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   1a20c:	1dfb      	adds	r3, r7, #7
   1a20e:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   1a210:	4b28      	ldr	r3, [pc, #160]	; (1a2b4 <_tc_interrupt_handler+0xb4>)
   1a212:	0092      	lsls	r2, r2, #2
   1a214:	58d3      	ldr	r3, [r2, r3]
   1a216:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1a218:	68fb      	ldr	r3, [r7, #12]
   1a21a:	681b      	ldr	r3, [r3, #0]
   1a21c:	7b9b      	ldrb	r3, [r3, #14]
   1a21e:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   1a220:	68fa      	ldr	r2, [r7, #12]
   1a222:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1a224:	4013      	ands	r3, r2
   1a226:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   1a228:	68fb      	ldr	r3, [r7, #12]
   1a22a:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1a22c:	230b      	movs	r3, #11
   1a22e:	18fb      	adds	r3, r7, r3
   1a230:	400a      	ands	r2, r1
   1a232:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   1a234:	230b      	movs	r3, #11
   1a236:	18fb      	adds	r3, r7, r3
   1a238:	781b      	ldrb	r3, [r3, #0]
   1a23a:	2201      	movs	r2, #1
   1a23c:	4013      	ands	r3, r2
   1a23e:	d008      	beq.n	1a252 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   1a240:	68fb      	ldr	r3, [r7, #12]
   1a242:	689b      	ldr	r3, [r3, #8]
   1a244:	68fa      	ldr	r2, [r7, #12]
   1a246:	0010      	movs	r0, r2
   1a248:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   1a24a:	68fb      	ldr	r3, [r7, #12]
   1a24c:	681b      	ldr	r3, [r3, #0]
   1a24e:	2201      	movs	r2, #1
   1a250:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   1a252:	230b      	movs	r3, #11
   1a254:	18fb      	adds	r3, r7, r3
   1a256:	781b      	ldrb	r3, [r3, #0]
   1a258:	2202      	movs	r2, #2
   1a25a:	4013      	ands	r3, r2
   1a25c:	d008      	beq.n	1a270 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   1a25e:	68fb      	ldr	r3, [r7, #12]
   1a260:	68db      	ldr	r3, [r3, #12]
   1a262:	68fa      	ldr	r2, [r7, #12]
   1a264:	0010      	movs	r0, r2
   1a266:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   1a268:	68fb      	ldr	r3, [r7, #12]
   1a26a:	681b      	ldr	r3, [r3, #0]
   1a26c:	2202      	movs	r2, #2
   1a26e:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   1a270:	230b      	movs	r3, #11
   1a272:	18fb      	adds	r3, r7, r3
   1a274:	781b      	ldrb	r3, [r3, #0]
   1a276:	2210      	movs	r2, #16
   1a278:	4013      	ands	r3, r2
   1a27a:	d008      	beq.n	1a28e <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   1a27c:	68fb      	ldr	r3, [r7, #12]
   1a27e:	691b      	ldr	r3, [r3, #16]
   1a280:	68fa      	ldr	r2, [r7, #12]
   1a282:	0010      	movs	r0, r2
   1a284:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   1a286:	68fb      	ldr	r3, [r7, #12]
   1a288:	681b      	ldr	r3, [r3, #0]
   1a28a:	2210      	movs	r2, #16
   1a28c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   1a28e:	230b      	movs	r3, #11
   1a290:	18fb      	adds	r3, r7, r3
   1a292:	781b      	ldrb	r3, [r3, #0]
   1a294:	2220      	movs	r2, #32
   1a296:	4013      	ands	r3, r2
   1a298:	d008      	beq.n	1a2ac <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   1a29a:	68fb      	ldr	r3, [r7, #12]
   1a29c:	695b      	ldr	r3, [r3, #20]
   1a29e:	68fa      	ldr	r2, [r7, #12]
   1a2a0:	0010      	movs	r0, r2
   1a2a2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   1a2a4:	68fb      	ldr	r3, [r7, #12]
   1a2a6:	681b      	ldr	r3, [r3, #0]
   1a2a8:	2220      	movs	r2, #32
   1a2aa:	739a      	strb	r2, [r3, #14]
	}
}
   1a2ac:	46c0      	nop			; (mov r8, r8)
   1a2ae:	46bd      	mov	sp, r7
   1a2b0:	b004      	add	sp, #16
   1a2b2:	bd80      	pop	{r7, pc}
   1a2b4:	2000489c 	.word	0x2000489c

0001a2b8 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   1a2b8:	b580      	push	{r7, lr}
   1a2ba:	b084      	sub	sp, #16
   1a2bc:	af00      	add	r7, sp, #0
   1a2be:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   1a2c0:	2300      	movs	r3, #0
   1a2c2:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   1a2c4:	687b      	ldr	r3, [r7, #4]
   1a2c6:	2b00      	cmp	r3, #0
   1a2c8:	d101      	bne.n	1a2ce <FreeRTOS_CLIRegisterCommand+0x16>
   1a2ca:	b672      	cpsid	i
   1a2cc:	e7fe      	b.n	1a2cc <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   1a2ce:	2008      	movs	r0, #8
   1a2d0:	4b11      	ldr	r3, [pc, #68]	; (1a318 <FreeRTOS_CLIRegisterCommand+0x60>)
   1a2d2:	4798      	blx	r3
   1a2d4:	0003      	movs	r3, r0
   1a2d6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   1a2d8:	68bb      	ldr	r3, [r7, #8]
   1a2da:	2b00      	cmp	r3, #0
   1a2dc:	d101      	bne.n	1a2e2 <FreeRTOS_CLIRegisterCommand+0x2a>
   1a2de:	b672      	cpsid	i
   1a2e0:	e7fe      	b.n	1a2e0 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   1a2e2:	68bb      	ldr	r3, [r7, #8]
   1a2e4:	2b00      	cmp	r3, #0
   1a2e6:	d012      	beq.n	1a30e <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   1a2e8:	4b0c      	ldr	r3, [pc, #48]	; (1a31c <FreeRTOS_CLIRegisterCommand+0x64>)
   1a2ea:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   1a2ec:	68bb      	ldr	r3, [r7, #8]
   1a2ee:	687a      	ldr	r2, [r7, #4]
   1a2f0:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   1a2f2:	68bb      	ldr	r3, [r7, #8]
   1a2f4:	2200      	movs	r2, #0
   1a2f6:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   1a2f8:	4b09      	ldr	r3, [pc, #36]	; (1a320 <FreeRTOS_CLIRegisterCommand+0x68>)
   1a2fa:	681b      	ldr	r3, [r3, #0]
   1a2fc:	68ba      	ldr	r2, [r7, #8]
   1a2fe:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   1a300:	4b07      	ldr	r3, [pc, #28]	; (1a320 <FreeRTOS_CLIRegisterCommand+0x68>)
   1a302:	68ba      	ldr	r2, [r7, #8]
   1a304:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   1a306:	4b07      	ldr	r3, [pc, #28]	; (1a324 <FreeRTOS_CLIRegisterCommand+0x6c>)
   1a308:	4798      	blx	r3

		xReturn = pdPASS;
   1a30a:	2301      	movs	r3, #1
   1a30c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   1a30e:	68fb      	ldr	r3, [r7, #12]
}
   1a310:	0018      	movs	r0, r3
   1a312:	46bd      	mov	sp, r7
   1a314:	b004      	add	sp, #16
   1a316:	bd80      	pop	{r7, pc}
   1a318:	0001c6d1 	.word	0x0001c6d1
   1a31c:	0001c599 	.word	0x0001c599
   1a320:	20000108 	.word	0x20000108
   1a324:	0001c5bd 	.word	0x0001c5bd

0001a328 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   1a328:	b580      	push	{r7, lr}
   1a32a:	b088      	sub	sp, #32
   1a32c:	af00      	add	r7, sp, #0
   1a32e:	60f8      	str	r0, [r7, #12]
   1a330:	60b9      	str	r1, [r7, #8]
   1a332:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   1a334:	2301      	movs	r3, #1
   1a336:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   1a338:	4b3d      	ldr	r3, [pc, #244]	; (1a430 <FreeRTOS_CLIProcessCommand+0x108>)
   1a33a:	681b      	ldr	r3, [r3, #0]
   1a33c:	2b00      	cmp	r3, #0
   1a33e:	d144      	bne.n	1a3ca <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   1a340:	4b3b      	ldr	r3, [pc, #236]	; (1a430 <FreeRTOS_CLIProcessCommand+0x108>)
   1a342:	4a3c      	ldr	r2, [pc, #240]	; (1a434 <FreeRTOS_CLIProcessCommand+0x10c>)
   1a344:	601a      	str	r2, [r3, #0]
   1a346:	e03a      	b.n	1a3be <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   1a348:	4b39      	ldr	r3, [pc, #228]	; (1a430 <FreeRTOS_CLIProcessCommand+0x108>)
   1a34a:	681b      	ldr	r3, [r3, #0]
   1a34c:	681b      	ldr	r3, [r3, #0]
   1a34e:	681b      	ldr	r3, [r3, #0]
   1a350:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   1a352:	69bb      	ldr	r3, [r7, #24]
   1a354:	0018      	movs	r0, r3
   1a356:	4b38      	ldr	r3, [pc, #224]	; (1a438 <FreeRTOS_CLIProcessCommand+0x110>)
   1a358:	4798      	blx	r3
   1a35a:	0003      	movs	r3, r0
   1a35c:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   1a35e:	68fa      	ldr	r2, [r7, #12]
   1a360:	697b      	ldr	r3, [r7, #20]
   1a362:	18d3      	adds	r3, r2, r3
   1a364:	781b      	ldrb	r3, [r3, #0]
   1a366:	2b20      	cmp	r3, #32
   1a368:	d005      	beq.n	1a376 <FreeRTOS_CLIProcessCommand+0x4e>
   1a36a:	68fa      	ldr	r2, [r7, #12]
   1a36c:	697b      	ldr	r3, [r7, #20]
   1a36e:	18d3      	adds	r3, r2, r3
   1a370:	781b      	ldrb	r3, [r3, #0]
   1a372:	2b00      	cmp	r3, #0
   1a374:	d11e      	bne.n	1a3b4 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   1a376:	697a      	ldr	r2, [r7, #20]
   1a378:	69b9      	ldr	r1, [r7, #24]
   1a37a:	68fb      	ldr	r3, [r7, #12]
   1a37c:	0018      	movs	r0, r3
   1a37e:	4b2f      	ldr	r3, [pc, #188]	; (1a43c <FreeRTOS_CLIProcessCommand+0x114>)
   1a380:	4798      	blx	r3
   1a382:	1e03      	subs	r3, r0, #0
   1a384:	d116      	bne.n	1a3b4 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   1a386:	4b2a      	ldr	r3, [pc, #168]	; (1a430 <FreeRTOS_CLIProcessCommand+0x108>)
   1a388:	681b      	ldr	r3, [r3, #0]
   1a38a:	681b      	ldr	r3, [r3, #0]
   1a38c:	7b1b      	ldrb	r3, [r3, #12]
   1a38e:	b25b      	sxtb	r3, r3
   1a390:	2b00      	cmp	r3, #0
   1a392:	db19      	blt.n	1a3c8 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   1a394:	68fb      	ldr	r3, [r7, #12]
   1a396:	0018      	movs	r0, r3
   1a398:	4b29      	ldr	r3, [pc, #164]	; (1a440 <FreeRTOS_CLIProcessCommand+0x118>)
   1a39a:	4798      	blx	r3
   1a39c:	0003      	movs	r3, r0
   1a39e:	001a      	movs	r2, r3
   1a3a0:	4b23      	ldr	r3, [pc, #140]	; (1a430 <FreeRTOS_CLIProcessCommand+0x108>)
   1a3a2:	681b      	ldr	r3, [r3, #0]
   1a3a4:	681b      	ldr	r3, [r3, #0]
   1a3a6:	7b1b      	ldrb	r3, [r3, #12]
   1a3a8:	b25b      	sxtb	r3, r3
   1a3aa:	429a      	cmp	r2, r3
   1a3ac:	d00c      	beq.n	1a3c8 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   1a3ae:	2300      	movs	r3, #0
   1a3b0:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   1a3b2:	e009      	b.n	1a3c8 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   1a3b4:	4b1e      	ldr	r3, [pc, #120]	; (1a430 <FreeRTOS_CLIProcessCommand+0x108>)
   1a3b6:	681b      	ldr	r3, [r3, #0]
   1a3b8:	685a      	ldr	r2, [r3, #4]
   1a3ba:	4b1d      	ldr	r3, [pc, #116]	; (1a430 <FreeRTOS_CLIProcessCommand+0x108>)
   1a3bc:	601a      	str	r2, [r3, #0]
   1a3be:	4b1c      	ldr	r3, [pc, #112]	; (1a430 <FreeRTOS_CLIProcessCommand+0x108>)
   1a3c0:	681b      	ldr	r3, [r3, #0]
   1a3c2:	2b00      	cmp	r3, #0
   1a3c4:	d1c0      	bne.n	1a348 <FreeRTOS_CLIProcessCommand+0x20>
   1a3c6:	e000      	b.n	1a3ca <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   1a3c8:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   1a3ca:	4b19      	ldr	r3, [pc, #100]	; (1a430 <FreeRTOS_CLIProcessCommand+0x108>)
   1a3cc:	681b      	ldr	r3, [r3, #0]
   1a3ce:	2b00      	cmp	r3, #0
   1a3d0:	d00c      	beq.n	1a3ec <FreeRTOS_CLIProcessCommand+0xc4>
   1a3d2:	69fb      	ldr	r3, [r7, #28]
   1a3d4:	2b00      	cmp	r3, #0
   1a3d6:	d109      	bne.n	1a3ec <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1a3d8:	687a      	ldr	r2, [r7, #4]
   1a3da:	491a      	ldr	r1, [pc, #104]	; (1a444 <FreeRTOS_CLIProcessCommand+0x11c>)
   1a3dc:	68bb      	ldr	r3, [r7, #8]
   1a3de:	0018      	movs	r0, r3
   1a3e0:	4b19      	ldr	r3, [pc, #100]	; (1a448 <FreeRTOS_CLIProcessCommand+0x120>)
   1a3e2:	4798      	blx	r3
		pxCommand = NULL;
   1a3e4:	4b12      	ldr	r3, [pc, #72]	; (1a430 <FreeRTOS_CLIProcessCommand+0x108>)
   1a3e6:	2200      	movs	r2, #0
   1a3e8:	601a      	str	r2, [r3, #0]
   1a3ea:	e01c      	b.n	1a426 <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   1a3ec:	4b10      	ldr	r3, [pc, #64]	; (1a430 <FreeRTOS_CLIProcessCommand+0x108>)
   1a3ee:	681b      	ldr	r3, [r3, #0]
   1a3f0:	2b00      	cmp	r3, #0
   1a3f2:	d010      	beq.n	1a416 <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   1a3f4:	4b0e      	ldr	r3, [pc, #56]	; (1a430 <FreeRTOS_CLIProcessCommand+0x108>)
   1a3f6:	681b      	ldr	r3, [r3, #0]
   1a3f8:	681b      	ldr	r3, [r3, #0]
   1a3fa:	689b      	ldr	r3, [r3, #8]
   1a3fc:	68fa      	ldr	r2, [r7, #12]
   1a3fe:	6879      	ldr	r1, [r7, #4]
   1a400:	68b8      	ldr	r0, [r7, #8]
   1a402:	4798      	blx	r3
   1a404:	0003      	movs	r3, r0
   1a406:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   1a408:	69fb      	ldr	r3, [r7, #28]
   1a40a:	2b00      	cmp	r3, #0
   1a40c:	d10b      	bne.n	1a426 <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   1a40e:	4b08      	ldr	r3, [pc, #32]	; (1a430 <FreeRTOS_CLIProcessCommand+0x108>)
   1a410:	2200      	movs	r2, #0
   1a412:	601a      	str	r2, [r3, #0]
   1a414:	e007      	b.n	1a426 <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1a416:	687a      	ldr	r2, [r7, #4]
   1a418:	490c      	ldr	r1, [pc, #48]	; (1a44c <FreeRTOS_CLIProcessCommand+0x124>)
   1a41a:	68bb      	ldr	r3, [r7, #8]
   1a41c:	0018      	movs	r0, r3
   1a41e:	4b0a      	ldr	r3, [pc, #40]	; (1a448 <FreeRTOS_CLIProcessCommand+0x120>)
   1a420:	4798      	blx	r3
		xReturn = pdFALSE;
   1a422:	2300      	movs	r3, #0
   1a424:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   1a426:	69fb      	ldr	r3, [r7, #28]
}
   1a428:	0018      	movs	r0, r3
   1a42a:	46bd      	mov	sp, r7
   1a42c:	b008      	add	sp, #32
   1a42e:	bd80      	pop	{r7, pc}
   1a430:	20000b78 	.word	0x20000b78
   1a434:	20000100 	.word	0x20000100
   1a438:	00037d03 	.word	0x00037d03
   1a43c:	00037d11 	.word	0x00037d11
   1a440:	0001a4b1 	.word	0x0001a4b1
   1a444:	0003a058 	.word	0x0003a058
   1a448:	00037d33 	.word	0x00037d33
   1a44c:	0003a0b0 	.word	0x0003a0b0

0001a450 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   1a450:	b580      	push	{r7, lr}
   1a452:	b086      	sub	sp, #24
   1a454:	af00      	add	r7, sp, #0
   1a456:	60f8      	str	r0, [r7, #12]
   1a458:	60b9      	str	r1, [r7, #8]
   1a45a:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   1a45c:	4b11      	ldr	r3, [pc, #68]	; (1a4a4 <prvHelpCommand+0x54>)
   1a45e:	681b      	ldr	r3, [r3, #0]
   1a460:	2b00      	cmp	r3, #0
   1a462:	d102      	bne.n	1a46a <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   1a464:	4b0f      	ldr	r3, [pc, #60]	; (1a4a4 <prvHelpCommand+0x54>)
   1a466:	4a10      	ldr	r2, [pc, #64]	; (1a4a8 <prvHelpCommand+0x58>)
   1a468:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   1a46a:	4b0e      	ldr	r3, [pc, #56]	; (1a4a4 <prvHelpCommand+0x54>)
   1a46c:	681b      	ldr	r3, [r3, #0]
   1a46e:	681b      	ldr	r3, [r3, #0]
   1a470:	6859      	ldr	r1, [r3, #4]
   1a472:	68ba      	ldr	r2, [r7, #8]
   1a474:	68fb      	ldr	r3, [r7, #12]
   1a476:	0018      	movs	r0, r3
   1a478:	4b0c      	ldr	r3, [pc, #48]	; (1a4ac <prvHelpCommand+0x5c>)
   1a47a:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   1a47c:	4b09      	ldr	r3, [pc, #36]	; (1a4a4 <prvHelpCommand+0x54>)
   1a47e:	681b      	ldr	r3, [r3, #0]
   1a480:	685a      	ldr	r2, [r3, #4]
   1a482:	4b08      	ldr	r3, [pc, #32]	; (1a4a4 <prvHelpCommand+0x54>)
   1a484:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   1a486:	4b07      	ldr	r3, [pc, #28]	; (1a4a4 <prvHelpCommand+0x54>)
   1a488:	681b      	ldr	r3, [r3, #0]
   1a48a:	2b00      	cmp	r3, #0
   1a48c:	d102      	bne.n	1a494 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   1a48e:	2300      	movs	r3, #0
   1a490:	617b      	str	r3, [r7, #20]
   1a492:	e001      	b.n	1a498 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   1a494:	2301      	movs	r3, #1
   1a496:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   1a498:	697b      	ldr	r3, [r7, #20]
}
   1a49a:	0018      	movs	r0, r3
   1a49c:	46bd      	mov	sp, r7
   1a49e:	b006      	add	sp, #24
   1a4a0:	bd80      	pop	{r7, pc}
   1a4a2:	46c0      	nop			; (mov r8, r8)
   1a4a4:	20000b7c 	.word	0x20000b7c
   1a4a8:	20000100 	.word	0x20000100
   1a4ac:	00037d33 	.word	0x00037d33

0001a4b0 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   1a4b0:	b580      	push	{r7, lr}
   1a4b2:	b084      	sub	sp, #16
   1a4b4:	af00      	add	r7, sp, #0
   1a4b6:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   1a4b8:	230f      	movs	r3, #15
   1a4ba:	18fb      	adds	r3, r7, r3
   1a4bc:	2200      	movs	r2, #0
   1a4be:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   1a4c0:	2300      	movs	r3, #0
   1a4c2:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   1a4c4:	e018      	b.n	1a4f8 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   1a4c6:	687b      	ldr	r3, [r7, #4]
   1a4c8:	781b      	ldrb	r3, [r3, #0]
   1a4ca:	2b20      	cmp	r3, #32
   1a4cc:	d10f      	bne.n	1a4ee <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   1a4ce:	68bb      	ldr	r3, [r7, #8]
   1a4d0:	2b01      	cmp	r3, #1
   1a4d2:	d00e      	beq.n	1a4f2 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   1a4d4:	230f      	movs	r3, #15
   1a4d6:	18fb      	adds	r3, r7, r3
   1a4d8:	781b      	ldrb	r3, [r3, #0]
   1a4da:	b25b      	sxtb	r3, r3
   1a4dc:	b2db      	uxtb	r3, r3
   1a4de:	3301      	adds	r3, #1
   1a4e0:	b2da      	uxtb	r2, r3
   1a4e2:	230f      	movs	r3, #15
   1a4e4:	18fb      	adds	r3, r7, r3
   1a4e6:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   1a4e8:	2301      	movs	r3, #1
   1a4ea:	60bb      	str	r3, [r7, #8]
   1a4ec:	e001      	b.n	1a4f2 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   1a4ee:	2300      	movs	r3, #0
   1a4f0:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   1a4f2:	687b      	ldr	r3, [r7, #4]
   1a4f4:	3301      	adds	r3, #1
   1a4f6:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   1a4f8:	687b      	ldr	r3, [r7, #4]
   1a4fa:	781b      	ldrb	r3, [r3, #0]
   1a4fc:	2b00      	cmp	r3, #0
   1a4fe:	d1e2      	bne.n	1a4c6 <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   1a500:	68bb      	ldr	r3, [r7, #8]
   1a502:	2b01      	cmp	r3, #1
   1a504:	d109      	bne.n	1a51a <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   1a506:	230f      	movs	r3, #15
   1a508:	18fb      	adds	r3, r7, r3
   1a50a:	781b      	ldrb	r3, [r3, #0]
   1a50c:	b25b      	sxtb	r3, r3
   1a50e:	b2db      	uxtb	r3, r3
   1a510:	3b01      	subs	r3, #1
   1a512:	b2da      	uxtb	r2, r3
   1a514:	230f      	movs	r3, #15
   1a516:	18fb      	adds	r3, r7, r3
   1a518:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   1a51a:	230f      	movs	r3, #15
   1a51c:	18fb      	adds	r3, r7, r3
   1a51e:	781b      	ldrb	r3, [r3, #0]
   1a520:	b25b      	sxtb	r3, r3
}
   1a522:	0018      	movs	r0, r3
   1a524:	46bd      	mov	sp, r7
   1a526:	b004      	add	sp, #16
   1a528:	bd80      	pop	{r7, pc}
	...

0001a52c <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   1a52c:	b580      	push	{r7, lr}
   1a52e:	b082      	sub	sp, #8
   1a530:	af00      	add	r7, sp, #0
   1a532:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   1a534:	687b      	ldr	r3, [r7, #4]
   1a536:	0018      	movs	r0, r3
   1a538:	4b03      	ldr	r3, [pc, #12]	; (1a548 <prvTraceGetQueueNumber+0x1c>)
   1a53a:	4798      	blx	r3
   1a53c:	0003      	movs	r3, r0
}
   1a53e:	0018      	movs	r0, r3
   1a540:	46bd      	mov	sp, r7
   1a542:	b002      	add	sp, #8
   1a544:	bd80      	pop	{r7, pc}
   1a546:	46c0      	nop			; (mov r8, r8)
   1a548:	0001dcf5 	.word	0x0001dcf5

0001a54c <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   1a54c:	b580      	push	{r7, lr}
   1a54e:	b082      	sub	sp, #8
   1a550:	af00      	add	r7, sp, #0
   1a552:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   1a554:	687b      	ldr	r3, [r7, #4]
   1a556:	0018      	movs	r0, r3
   1a558:	4b03      	ldr	r3, [pc, #12]	; (1a568 <prvTraceGetQueueType+0x1c>)
   1a55a:	4798      	blx	r3
   1a55c:	0003      	movs	r3, r0
}
   1a55e:	0018      	movs	r0, r3
   1a560:	46bd      	mov	sp, r7
   1a562:	b002      	add	sp, #8
   1a564:	bd80      	pop	{r7, pc}
   1a566:	46c0      	nop			; (mov r8, r8)
   1a568:	0001dd21 	.word	0x0001dd21

0001a56c <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   1a56c:	b580      	push	{r7, lr}
   1a56e:	b082      	sub	sp, #8
   1a570:	af00      	add	r7, sp, #0
   1a572:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   1a574:	687b      	ldr	r3, [r7, #4]
   1a576:	0018      	movs	r0, r3
   1a578:	4b03      	ldr	r3, [pc, #12]	; (1a588 <prvTraceGetTaskNumberLow16+0x1c>)
   1a57a:	4798      	blx	r3
   1a57c:	0003      	movs	r3, r0
   1a57e:	b29b      	uxth	r3, r3
}
   1a580:	0018      	movs	r0, r3
   1a582:	46bd      	mov	sp, r7
   1a584:	b002      	add	sp, #8
   1a586:	bd80      	pop	{r7, pc}
   1a588:	0001f051 	.word	0x0001f051

0001a58c <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   1a58c:	b580      	push	{r7, lr}
   1a58e:	b082      	sub	sp, #8
   1a590:	af00      	add	r7, sp, #0
   1a592:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   1a594:	687b      	ldr	r3, [r7, #4]
   1a596:	0018      	movs	r0, r3
   1a598:	4b04      	ldr	r3, [pc, #16]	; (1a5ac <prvTraceGetTaskNumberHigh16+0x20>)
   1a59a:	4798      	blx	r3
   1a59c:	0003      	movs	r3, r0
   1a59e:	0c1b      	lsrs	r3, r3, #16
   1a5a0:	b29b      	uxth	r3, r3
}
   1a5a2:	0018      	movs	r0, r3
   1a5a4:	46bd      	mov	sp, r7
   1a5a6:	b002      	add	sp, #8
   1a5a8:	bd80      	pop	{r7, pc}
   1a5aa:	46c0      	nop			; (mov r8, r8)
   1a5ac:	0001f051 	.word	0x0001f051

0001a5b0 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   1a5b0:	b580      	push	{r7, lr}
   1a5b2:	b082      	sub	sp, #8
   1a5b4:	af00      	add	r7, sp, #0
   1a5b6:	6078      	str	r0, [r7, #4]
   1a5b8:	000a      	movs	r2, r1
   1a5ba:	1cbb      	adds	r3, r7, #2
   1a5bc:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   1a5be:	687b      	ldr	r3, [r7, #4]
   1a5c0:	0018      	movs	r0, r3
   1a5c2:	4b08      	ldr	r3, [pc, #32]	; (1a5e4 <prvTraceSetTaskNumberLow16+0x34>)
   1a5c4:	4798      	blx	r3
   1a5c6:	0003      	movs	r3, r0
   1a5c8:	0c1b      	lsrs	r3, r3, #16
   1a5ca:	041a      	lsls	r2, r3, #16
   1a5cc:	1cbb      	adds	r3, r7, #2
   1a5ce:	881b      	ldrh	r3, [r3, #0]
   1a5d0:	431a      	orrs	r2, r3
   1a5d2:	687b      	ldr	r3, [r7, #4]
   1a5d4:	0011      	movs	r1, r2
   1a5d6:	0018      	movs	r0, r3
   1a5d8:	4b03      	ldr	r3, [pc, #12]	; (1a5e8 <prvTraceSetTaskNumberLow16+0x38>)
   1a5da:	4798      	blx	r3
}
   1a5dc:	46c0      	nop			; (mov r8, r8)
   1a5de:	46bd      	mov	sp, r7
   1a5e0:	b002      	add	sp, #8
   1a5e2:	bd80      	pop	{r7, pc}
   1a5e4:	0001f051 	.word	0x0001f051
   1a5e8:	0001f079 	.word	0x0001f079

0001a5ec <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   1a5ec:	b580      	push	{r7, lr}
   1a5ee:	b082      	sub	sp, #8
   1a5f0:	af00      	add	r7, sp, #0
   1a5f2:	6078      	str	r0, [r7, #4]
   1a5f4:	000a      	movs	r2, r1
   1a5f6:	1cbb      	adds	r3, r7, #2
   1a5f8:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   1a5fa:	687b      	ldr	r3, [r7, #4]
   1a5fc:	0018      	movs	r0, r3
   1a5fe:	4b09      	ldr	r3, [pc, #36]	; (1a624 <prvTraceSetTaskNumberHigh16+0x38>)
   1a600:	4798      	blx	r3
   1a602:	0003      	movs	r3, r0
   1a604:	041b      	lsls	r3, r3, #16
   1a606:	0c1a      	lsrs	r2, r3, #16
   1a608:	1cbb      	adds	r3, r7, #2
   1a60a:	881b      	ldrh	r3, [r3, #0]
   1a60c:	041b      	lsls	r3, r3, #16
   1a60e:	431a      	orrs	r2, r3
   1a610:	687b      	ldr	r3, [r7, #4]
   1a612:	0011      	movs	r1, r2
   1a614:	0018      	movs	r0, r3
   1a616:	4b04      	ldr	r3, [pc, #16]	; (1a628 <prvTraceSetTaskNumberHigh16+0x3c>)
   1a618:	4798      	blx	r3
}
   1a61a:	46c0      	nop			; (mov r8, r8)
   1a61c:	46bd      	mov	sp, r7
   1a61e:	b002      	add	sp, #8
   1a620:	bd80      	pop	{r7, pc}
   1a622:	46c0      	nop			; (mov r8, r8)
   1a624:	0001f051 	.word	0x0001f051
   1a628:	0001f079 	.word	0x0001f079

0001a62c <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   1a62c:	b580      	push	{r7, lr}
   1a62e:	b082      	sub	sp, #8
   1a630:	af00      	add	r7, sp, #0
   1a632:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   1a634:	687b      	ldr	r3, [r7, #4]
   1a636:	0018      	movs	r0, r3
   1a638:	4b03      	ldr	r3, [pc, #12]	; (1a648 <prvTraceGetQueueNumberLow16+0x1c>)
   1a63a:	4798      	blx	r3
   1a63c:	0003      	movs	r3, r0
   1a63e:	b29b      	uxth	r3, r3
}
   1a640:	0018      	movs	r0, r3
   1a642:	46bd      	mov	sp, r7
   1a644:	b002      	add	sp, #8
   1a646:	bd80      	pop	{r7, pc}
   1a648:	0001a52d 	.word	0x0001a52d

0001a64c <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   1a64c:	b580      	push	{r7, lr}
   1a64e:	b082      	sub	sp, #8
   1a650:	af00      	add	r7, sp, #0
   1a652:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   1a654:	687b      	ldr	r3, [r7, #4]
   1a656:	0018      	movs	r0, r3
   1a658:	4b04      	ldr	r3, [pc, #16]	; (1a66c <prvTraceGetQueueNumberHigh16+0x20>)
   1a65a:	4798      	blx	r3
   1a65c:	0003      	movs	r3, r0
   1a65e:	0c1b      	lsrs	r3, r3, #16
   1a660:	b29b      	uxth	r3, r3
}
   1a662:	0018      	movs	r0, r3
   1a664:	46bd      	mov	sp, r7
   1a666:	b002      	add	sp, #8
   1a668:	bd80      	pop	{r7, pc}
   1a66a:	46c0      	nop			; (mov r8, r8)
   1a66c:	0001a52d 	.word	0x0001a52d

0001a670 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   1a670:	b580      	push	{r7, lr}
   1a672:	b082      	sub	sp, #8
   1a674:	af00      	add	r7, sp, #0
   1a676:	6078      	str	r0, [r7, #4]
   1a678:	000a      	movs	r2, r1
   1a67a:	1cbb      	adds	r3, r7, #2
   1a67c:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   1a67e:	687b      	ldr	r3, [r7, #4]
   1a680:	0018      	movs	r0, r3
   1a682:	4b08      	ldr	r3, [pc, #32]	; (1a6a4 <prvTraceSetQueueNumberLow16+0x34>)
   1a684:	4798      	blx	r3
   1a686:	0003      	movs	r3, r0
   1a688:	0c1b      	lsrs	r3, r3, #16
   1a68a:	041a      	lsls	r2, r3, #16
   1a68c:	1cbb      	adds	r3, r7, #2
   1a68e:	881b      	ldrh	r3, [r3, #0]
   1a690:	431a      	orrs	r2, r3
   1a692:	687b      	ldr	r3, [r7, #4]
   1a694:	0011      	movs	r1, r2
   1a696:	0018      	movs	r0, r3
   1a698:	4b03      	ldr	r3, [pc, #12]	; (1a6a8 <prvTraceSetQueueNumberLow16+0x38>)
   1a69a:	4798      	blx	r3
}
   1a69c:	46c0      	nop			; (mov r8, r8)
   1a69e:	46bd      	mov	sp, r7
   1a6a0:	b002      	add	sp, #8
   1a6a2:	bd80      	pop	{r7, pc}
   1a6a4:	0001a52d 	.word	0x0001a52d
   1a6a8:	0001dd09 	.word	0x0001dd09

0001a6ac <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   1a6ac:	b580      	push	{r7, lr}
   1a6ae:	b082      	sub	sp, #8
   1a6b0:	af00      	add	r7, sp, #0
   1a6b2:	6078      	str	r0, [r7, #4]
   1a6b4:	000a      	movs	r2, r1
   1a6b6:	1cbb      	adds	r3, r7, #2
   1a6b8:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   1a6ba:	687b      	ldr	r3, [r7, #4]
   1a6bc:	0018      	movs	r0, r3
   1a6be:	4b09      	ldr	r3, [pc, #36]	; (1a6e4 <prvTraceSetQueueNumberHigh16+0x38>)
   1a6c0:	4798      	blx	r3
   1a6c2:	0003      	movs	r3, r0
   1a6c4:	041b      	lsls	r3, r3, #16
   1a6c6:	0c1a      	lsrs	r2, r3, #16
   1a6c8:	1cbb      	adds	r3, r7, #2
   1a6ca:	881b      	ldrh	r3, [r3, #0]
   1a6cc:	041b      	lsls	r3, r3, #16
   1a6ce:	431a      	orrs	r2, r3
   1a6d0:	687b      	ldr	r3, [r7, #4]
   1a6d2:	0011      	movs	r1, r2
   1a6d4:	0018      	movs	r0, r3
   1a6d6:	4b04      	ldr	r3, [pc, #16]	; (1a6e8 <prvTraceSetQueueNumberHigh16+0x3c>)
   1a6d8:	4798      	blx	r3
}
   1a6da:	46c0      	nop			; (mov r8, r8)
   1a6dc:	46bd      	mov	sp, r7
   1a6de:	b002      	add	sp, #8
   1a6e0:	bd80      	pop	{r7, pc}
   1a6e2:	46c0      	nop			; (mov r8, r8)
   1a6e4:	0001a52d 	.word	0x0001a52d
   1a6e8:	0001dd09 	.word	0x0001dd09

0001a6ec <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   1a6ec:	b580      	push	{r7, lr}
   1a6ee:	b084      	sub	sp, #16
   1a6f0:	af00      	add	r7, sp, #0
   1a6f2:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   1a6f4:	2300      	movs	r3, #0
   1a6f6:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1a6f8:	2300      	movs	r3, #0
   1a6fa:	60bb      	str	r3, [r7, #8]
   1a6fc:	e018      	b.n	1a730 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   1a6fe:	4b14      	ldr	r3, [pc, #80]	; (1a750 <prvAddTaskToStackMonitor+0x64>)
   1a700:	68ba      	ldr	r2, [r7, #8]
   1a702:	00d2      	lsls	r2, r2, #3
   1a704:	58d3      	ldr	r3, [r2, r3]
   1a706:	2b00      	cmp	r3, #0
   1a708:	d10f      	bne.n	1a72a <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   1a70a:	4b11      	ldr	r3, [pc, #68]	; (1a750 <prvAddTaskToStackMonitor+0x64>)
   1a70c:	68ba      	ldr	r2, [r7, #8]
   1a70e:	00d2      	lsls	r2, r2, #3
   1a710:	6879      	ldr	r1, [r7, #4]
   1a712:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   1a714:	4a0e      	ldr	r2, [pc, #56]	; (1a750 <prvAddTaskToStackMonitor+0x64>)
   1a716:	68bb      	ldr	r3, [r7, #8]
   1a718:	00db      	lsls	r3, r3, #3
   1a71a:	18d3      	adds	r3, r2, r3
   1a71c:	3304      	adds	r3, #4
   1a71e:	2201      	movs	r2, #1
   1a720:	4252      	negs	r2, r2
   1a722:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   1a724:	2301      	movs	r3, #1
   1a726:	60fb      	str	r3, [r7, #12]
			break;
   1a728:	e005      	b.n	1a736 <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1a72a:	68bb      	ldr	r3, [r7, #8]
   1a72c:	3301      	adds	r3, #1
   1a72e:	60bb      	str	r3, [r7, #8]
   1a730:	68bb      	ldr	r3, [r7, #8]
   1a732:	2b09      	cmp	r3, #9
   1a734:	dde3      	ble.n	1a6fe <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   1a736:	68fb      	ldr	r3, [r7, #12]
   1a738:	2b00      	cmp	r3, #0
   1a73a:	d104      	bne.n	1a746 <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   1a73c:	4b05      	ldr	r3, [pc, #20]	; (1a754 <prvAddTaskToStackMonitor+0x68>)
   1a73e:	681b      	ldr	r3, [r3, #0]
   1a740:	1c5a      	adds	r2, r3, #1
   1a742:	4b04      	ldr	r3, [pc, #16]	; (1a754 <prvAddTaskToStackMonitor+0x68>)
   1a744:	601a      	str	r2, [r3, #0]
	}
}
   1a746:	46c0      	nop			; (mov r8, r8)
   1a748:	46bd      	mov	sp, r7
   1a74a:	b004      	add	sp, #16
   1a74c:	bd80      	pop	{r7, pc}
   1a74e:	46c0      	nop			; (mov r8, r8)
   1a750:	20000b84 	.word	0x20000b84
   1a754:	20000bd4 	.word	0x20000bd4

0001a758 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   1a758:	b590      	push	{r4, r7, lr}
   1a75a:	b085      	sub	sp, #20
   1a75c:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   1a75e:	2300      	movs	r3, #0
   1a760:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   1a762:	4b2b      	ldr	r3, [pc, #172]	; (1a810 <prvReportStackUsage+0xb8>)
   1a764:	681b      	ldr	r3, [r3, #0]
   1a766:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   1a768:	4b29      	ldr	r3, [pc, #164]	; (1a810 <prvReportStackUsage+0xb8>)
   1a76a:	681a      	ldr	r2, [r3, #0]
   1a76c:	4b29      	ldr	r3, [pc, #164]	; (1a814 <prvReportStackUsage+0xbc>)
   1a76e:	00d2      	lsls	r2, r2, #3
   1a770:	58d3      	ldr	r3, [r2, r3]
   1a772:	2b00      	cmp	r3, #0
   1a774:	d035      	beq.n	1a7e2 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   1a776:	4b26      	ldr	r3, [pc, #152]	; (1a810 <prvReportStackUsage+0xb8>)
   1a778:	681a      	ldr	r2, [r3, #0]
   1a77a:	4b26      	ldr	r3, [pc, #152]	; (1a814 <prvReportStackUsage+0xbc>)
   1a77c:	00d2      	lsls	r2, r2, #3
   1a77e:	58d3      	ldr	r3, [r2, r3]
   1a780:	0018      	movs	r0, r3
   1a782:	4b25      	ldr	r3, [pc, #148]	; (1a818 <prvReportStackUsage+0xc0>)
   1a784:	4798      	blx	r3
   1a786:	0003      	movs	r3, r0
   1a788:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   1a78a:	4b21      	ldr	r3, [pc, #132]	; (1a810 <prvReportStackUsage+0xb8>)
   1a78c:	681b      	ldr	r3, [r3, #0]
   1a78e:	4a21      	ldr	r2, [pc, #132]	; (1a814 <prvReportStackUsage+0xbc>)
   1a790:	00db      	lsls	r3, r3, #3
   1a792:	18d3      	adds	r3, r2, r3
   1a794:	3304      	adds	r3, #4
   1a796:	681a      	ldr	r2, [r3, #0]
   1a798:	687b      	ldr	r3, [r7, #4]
   1a79a:	429a      	cmp	r2, r3
   1a79c:	d907      	bls.n	1a7ae <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   1a79e:	4b1c      	ldr	r3, [pc, #112]	; (1a810 <prvReportStackUsage+0xb8>)
   1a7a0:	681b      	ldr	r3, [r3, #0]
   1a7a2:	4a1c      	ldr	r2, [pc, #112]	; (1a814 <prvReportStackUsage+0xbc>)
   1a7a4:	00db      	lsls	r3, r3, #3
   1a7a6:	18d3      	adds	r3, r2, r3
   1a7a8:	3304      	adds	r3, #4
   1a7aa:	687a      	ldr	r2, [r7, #4]
   1a7ac:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   1a7ae:	4b18      	ldr	r3, [pc, #96]	; (1a810 <prvReportStackUsage+0xb8>)
   1a7b0:	681a      	ldr	r2, [r3, #0]
   1a7b2:	4b18      	ldr	r3, [pc, #96]	; (1a814 <prvReportStackUsage+0xbc>)
   1a7b4:	00d2      	lsls	r2, r2, #3
   1a7b6:	58d3      	ldr	r3, [r2, r3]
   1a7b8:	0018      	movs	r0, r3
   1a7ba:	4b18      	ldr	r3, [pc, #96]	; (1a81c <prvReportStackUsage+0xc4>)
   1a7bc:	4798      	blx	r3
   1a7be:	0003      	movs	r3, r0
   1a7c0:	b2db      	uxtb	r3, r3
   1a7c2:	0019      	movs	r1, r3
   1a7c4:	4b12      	ldr	r3, [pc, #72]	; (1a810 <prvReportStackUsage+0xb8>)
   1a7c6:	681b      	ldr	r3, [r3, #0]
   1a7c8:	4a12      	ldr	r2, [pc, #72]	; (1a814 <prvReportStackUsage+0xbc>)
   1a7ca:	00db      	lsls	r3, r3, #3
   1a7cc:	18d3      	adds	r3, r2, r3
   1a7ce:	3304      	adds	r3, #4
   1a7d0:	681b      	ldr	r3, [r3, #0]
   1a7d2:	000a      	movs	r2, r1
   1a7d4:	2103      	movs	r1, #3
   1a7d6:	20ea      	movs	r0, #234	; 0xea
   1a7d8:	4c11      	ldr	r4, [pc, #68]	; (1a820 <prvReportStackUsage+0xc8>)
   1a7da:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   1a7dc:	68fb      	ldr	r3, [r7, #12]
   1a7de:	3301      	adds	r3, #1
   1a7e0:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   1a7e2:	4b0b      	ldr	r3, [pc, #44]	; (1a810 <prvReportStackUsage+0xb8>)
   1a7e4:	681b      	ldr	r3, [r3, #0]
   1a7e6:	1c5a      	adds	r2, r3, #1
   1a7e8:	4b0e      	ldr	r3, [pc, #56]	; (1a824 <prvReportStackUsage+0xcc>)
   1a7ea:	210a      	movs	r1, #10
   1a7ec:	0010      	movs	r0, r2
   1a7ee:	4798      	blx	r3
   1a7f0:	000b      	movs	r3, r1
   1a7f2:	001a      	movs	r2, r3
   1a7f4:	4b06      	ldr	r3, [pc, #24]	; (1a810 <prvReportStackUsage+0xb8>)
   1a7f6:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   1a7f8:	68fb      	ldr	r3, [r7, #12]
   1a7fa:	2b00      	cmp	r3, #0
   1a7fc:	dc04      	bgt.n	1a808 <prvReportStackUsage+0xb0>
   1a7fe:	4b04      	ldr	r3, [pc, #16]	; (1a810 <prvReportStackUsage+0xb8>)
   1a800:	681a      	ldr	r2, [r3, #0]
   1a802:	68bb      	ldr	r3, [r7, #8]
   1a804:	429a      	cmp	r2, r3
   1a806:	d1af      	bne.n	1a768 <prvReportStackUsage+0x10>
}
   1a808:	46c0      	nop			; (mov r8, r8)
   1a80a:	46bd      	mov	sp, r7
   1a80c:	b005      	add	sp, #20
   1a80e:	bd90      	pop	{r4, r7, pc}
   1a810:	20000bd8 	.word	0x20000bd8
   1a814:	20000b84 	.word	0x20000b84
   1a818:	0001f1f1 	.word	0x0001f1f1
   1a81c:	0001a56d 	.word	0x0001a56d
   1a820:	0001b0b5 	.word	0x0001b0b5
   1a824:	000350f5 	.word	0x000350f5

0001a828 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   1a828:	b580      	push	{r7, lr}
   1a82a:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   1a82c:	4b02      	ldr	r3, [pc, #8]	; (1a838 <prvTraceGetCurrentTaskHandle+0x10>)
   1a82e:	4798      	blx	r3
   1a830:	0003      	movs	r3, r0
}
   1a832:	0018      	movs	r0, r3
   1a834:	46bd      	mov	sp, r7
   1a836:	bd80      	pop	{r7, pc}
   1a838:	0001f29d 	.word	0x0001f29d

0001a83c <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   1a83c:	b590      	push	{r4, r7, lr}
   1a83e:	b085      	sub	sp, #20
   1a840:	af02      	add	r7, sp, #8
   1a842:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   1a844:	4b14      	ldr	r3, [pc, #80]	; (1a898 <vTraceEnable+0x5c>)
   1a846:	4798      	blx	r3

	if (startOption == TRC_START)
   1a848:	687b      	ldr	r3, [r7, #4]
   1a84a:	2b01      	cmp	r3, #1
   1a84c:	d102      	bne.n	1a854 <vTraceEnable+0x18>
	{
		vTraceStart();
   1a84e:	4b13      	ldr	r3, [pc, #76]	; (1a89c <vTraceEnable+0x60>)
   1a850:	4798      	blx	r3
   1a852:	e00e      	b.n	1a872 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   1a854:	687b      	ldr	r3, [r7, #4]
   1a856:	2b02      	cmp	r3, #2
   1a858:	d104      	bne.n	1a864 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   1a85a:	4b11      	ldr	r3, [pc, #68]	; (1a8a0 <vTraceEnable+0x64>)
   1a85c:	0018      	movs	r0, r3
   1a85e:	4b11      	ldr	r3, [pc, #68]	; (1a8a4 <vTraceEnable+0x68>)
   1a860:	4798      	blx	r3
   1a862:	e006      	b.n	1a872 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   1a864:	687b      	ldr	r3, [r7, #4]
   1a866:	2b00      	cmp	r3, #0
   1a868:	d003      	beq.n	1a872 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   1a86a:	4b0f      	ldr	r3, [pc, #60]	; (1a8a8 <vTraceEnable+0x6c>)
   1a86c:	0018      	movs	r0, r3
   1a86e:	4b0d      	ldr	r3, [pc, #52]	; (1a8a4 <vTraceEnable+0x68>)
   1a870:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   1a872:	4b0e      	ldr	r3, [pc, #56]	; (1a8ac <vTraceEnable+0x70>)
   1a874:	681b      	ldr	r3, [r3, #0]
   1a876:	2b00      	cmp	r3, #0
   1a878:	d10a      	bne.n	1a890 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   1a87a:	2396      	movs	r3, #150	; 0x96
   1a87c:	005a      	lsls	r2, r3, #1
   1a87e:	490c      	ldr	r1, [pc, #48]	; (1a8b0 <vTraceEnable+0x74>)
   1a880:	480c      	ldr	r0, [pc, #48]	; (1a8b4 <vTraceEnable+0x78>)
   1a882:	4b0a      	ldr	r3, [pc, #40]	; (1a8ac <vTraceEnable+0x70>)
   1a884:	9301      	str	r3, [sp, #4]
   1a886:	2304      	movs	r3, #4
   1a888:	9300      	str	r3, [sp, #0]
   1a88a:	2300      	movs	r3, #0
   1a88c:	4c0a      	ldr	r4, [pc, #40]	; (1a8b8 <vTraceEnable+0x7c>)
   1a88e:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   1a890:	46c0      	nop			; (mov r8, r8)
   1a892:	46bd      	mov	sp, r7
   1a894:	b003      	add	sp, #12
   1a896:	bd90      	pop	{r4, r7, pc}
   1a898:	0001b781 	.word	0x0001b781
   1a89c:	0001acd9 	.word	0x0001acd9
   1a8a0:	0003a110 	.word	0x0003a110
   1a8a4:	0001be29 	.word	0x0001be29
   1a8a8:	0003a150 	.word	0x0003a150
   1a8ac:	20000b80 	.word	0x20000b80
   1a8b0:	0003a184 	.word	0x0003a184
   1a8b4:	0001a8bd 	.word	0x0001a8bd
   1a8b8:	0001e1f5 	.word	0x0001e1f5

0001a8bc <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   1a8bc:	b580      	push	{r7, lr}
   1a8be:	b082      	sub	sp, #8
   1a8c0:	af00      	add	r7, sp, #0
   1a8c2:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   1a8c4:	4b04      	ldr	r3, [pc, #16]	; (1a8d8 <TzCtrl+0x1c>)
   1a8c6:	4798      	blx	r3
   1a8c8:	1e03      	subs	r3, r0, #0
   1a8ca:	d001      	beq.n	1a8d0 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   1a8cc:	4b03      	ldr	r3, [pc, #12]	; (1a8dc <TzCtrl+0x20>)
   1a8ce:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   1a8d0:	2004      	movs	r0, #4
   1a8d2:	4b03      	ldr	r3, [pc, #12]	; (1a8e0 <TzCtrl+0x24>)
   1a8d4:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   1a8d6:	e7f5      	b.n	1a8c4 <TzCtrl+0x8>
   1a8d8:	0001ad1d 	.word	0x0001ad1d
   1a8dc:	0001a759 	.word	0x0001a759
   1a8e0:	0001e591 	.word	0x0001e591

0001a8e4 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   1a8e4:	b580      	push	{r7, lr}
   1a8e6:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   1a8e8:	4b60      	ldr	r3, [pc, #384]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a8ea:	681b      	ldr	r3, [r3, #0]
   1a8ec:	2209      	movs	r2, #9
   1a8ee:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   1a8f0:	4b5e      	ldr	r3, [pc, #376]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a8f2:	681b      	ldr	r3, [r3, #0]
   1a8f4:	2264      	movs	r2, #100	; 0x64
   1a8f6:	210a      	movs	r1, #10
   1a8f8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   1a8fa:	4b5c      	ldr	r3, [pc, #368]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a8fc:	681b      	ldr	r3, [r3, #0]
   1a8fe:	2265      	movs	r2, #101	; 0x65
   1a900:	210a      	movs	r1, #10
   1a902:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   1a904:	4b59      	ldr	r3, [pc, #356]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a906:	681b      	ldr	r3, [r3, #0]
   1a908:	2266      	movs	r2, #102	; 0x66
   1a90a:	210a      	movs	r1, #10
   1a90c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   1a90e:	4b57      	ldr	r3, [pc, #348]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a910:	681b      	ldr	r3, [r3, #0]
   1a912:	2267      	movs	r2, #103	; 0x67
   1a914:	210f      	movs	r1, #15
   1a916:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   1a918:	4b54      	ldr	r3, [pc, #336]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a91a:	681b      	ldr	r3, [r3, #0]
   1a91c:	2268      	movs	r2, #104	; 0x68
   1a91e:	2105      	movs	r1, #5
   1a920:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   1a922:	4b52      	ldr	r3, [pc, #328]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a924:	681b      	ldr	r3, [r3, #0]
   1a926:	2269      	movs	r2, #105	; 0x69
   1a928:	2105      	movs	r1, #5
   1a92a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   1a92c:	4b4f      	ldr	r3, [pc, #316]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a92e:	681b      	ldr	r3, [r3, #0]
   1a930:	226a      	movs	r2, #106	; 0x6a
   1a932:	2105      	movs	r1, #5
   1a934:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   1a936:	4b4d      	ldr	r3, [pc, #308]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a938:	681b      	ldr	r3, [r3, #0]
   1a93a:	226b      	movs	r2, #107	; 0x6b
   1a93c:	2105      	movs	r1, #5
   1a93e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   1a940:	4b4a      	ldr	r3, [pc, #296]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a942:	681b      	ldr	r3, [r3, #0]
   1a944:	226c      	movs	r2, #108	; 0x6c
   1a946:	2105      	movs	r1, #5
   1a948:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   1a94a:	4b48      	ldr	r3, [pc, #288]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a94c:	681b      	ldr	r3, [r3, #0]
   1a94e:	2270      	movs	r2, #112	; 0x70
   1a950:	210f      	movs	r1, #15
   1a952:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   1a954:	4b45      	ldr	r3, [pc, #276]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a956:	681b      	ldr	r3, [r3, #0]
   1a958:	2271      	movs	r2, #113	; 0x71
   1a95a:	210f      	movs	r1, #15
   1a95c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   1a95e:	4b43      	ldr	r3, [pc, #268]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a960:	681b      	ldr	r3, [r3, #0]
   1a962:	2272      	movs	r2, #114	; 0x72
   1a964:	210f      	movs	r1, #15
   1a966:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   1a968:	4b40      	ldr	r3, [pc, #256]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a96a:	681b      	ldr	r3, [r3, #0]
   1a96c:	2273      	movs	r2, #115	; 0x73
   1a96e:	210f      	movs	r1, #15
   1a970:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   1a972:	4b3e      	ldr	r3, [pc, #248]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a974:	681b      	ldr	r3, [r3, #0]
   1a976:	2274      	movs	r2, #116	; 0x74
   1a978:	210f      	movs	r1, #15
   1a97a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   1a97c:	4b3b      	ldr	r3, [pc, #236]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a97e:	681b      	ldr	r3, [r3, #0]
   1a980:	2275      	movs	r2, #117	; 0x75
   1a982:	210f      	movs	r1, #15
   1a984:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   1a986:	4b39      	ldr	r3, [pc, #228]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a988:	681b      	ldr	r3, [r3, #0]
   1a98a:	2276      	movs	r2, #118	; 0x76
   1a98c:	210f      	movs	r1, #15
   1a98e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   1a990:	4b36      	ldr	r3, [pc, #216]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a992:	681b      	ldr	r3, [r3, #0]
   1a994:	2277      	movs	r2, #119	; 0x77
   1a996:	210f      	movs	r1, #15
   1a998:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   1a99a:	4b34      	ldr	r3, [pc, #208]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a99c:	681b      	ldr	r3, [r3, #0]
   1a99e:	2278      	movs	r2, #120	; 0x78
   1a9a0:	210f      	movs	r1, #15
   1a9a2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   1a9a4:	4b31      	ldr	r3, [pc, #196]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a9a6:	681b      	ldr	r3, [r3, #0]
   1a9a8:	227c      	movs	r2, #124	; 0x7c
   1a9aa:	2110      	movs	r1, #16
   1a9ac:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   1a9ae:	4b2f      	ldr	r3, [pc, #188]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a9b0:	681b      	ldr	r3, [r3, #0]
   1a9b2:	227d      	movs	r2, #125	; 0x7d
   1a9b4:	2110      	movs	r1, #16
   1a9b6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   1a9b8:	4b2c      	ldr	r3, [pc, #176]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a9ba:	681b      	ldr	r3, [r3, #0]
   1a9bc:	227e      	movs	r2, #126	; 0x7e
   1a9be:	2110      	movs	r1, #16
   1a9c0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   1a9c2:	4b2a      	ldr	r3, [pc, #168]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a9c4:	681b      	ldr	r3, [r3, #0]
   1a9c6:	227f      	movs	r2, #127	; 0x7f
   1a9c8:	2113      	movs	r1, #19
   1a9ca:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   1a9cc:	4b27      	ldr	r3, [pc, #156]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a9ce:	681b      	ldr	r3, [r3, #0]
   1a9d0:	2280      	movs	r2, #128	; 0x80
   1a9d2:	2111      	movs	r1, #17
   1a9d4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   1a9d6:	4b25      	ldr	r3, [pc, #148]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a9d8:	681b      	ldr	r3, [r3, #0]
   1a9da:	2281      	movs	r2, #129	; 0x81
   1a9dc:	2110      	movs	r1, #16
   1a9de:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   1a9e0:	4b22      	ldr	r3, [pc, #136]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a9e2:	681b      	ldr	r3, [r3, #0]
   1a9e4:	2282      	movs	r2, #130	; 0x82
   1a9e6:	2113      	movs	r1, #19
   1a9e8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   1a9ea:	4b20      	ldr	r3, [pc, #128]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a9ec:	681b      	ldr	r3, [r3, #0]
   1a9ee:	2283      	movs	r2, #131	; 0x83
   1a9f0:	2113      	movs	r1, #19
   1a9f2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   1a9f4:	4b1d      	ldr	r3, [pc, #116]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1a9f6:	681b      	ldr	r3, [r3, #0]
   1a9f8:	2284      	movs	r2, #132	; 0x84
   1a9fa:	2113      	movs	r1, #19
   1a9fc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   1a9fe:	4b1b      	ldr	r3, [pc, #108]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1aa00:	681b      	ldr	r3, [r3, #0]
   1aa02:	2288      	movs	r2, #136	; 0x88
   1aa04:	2100      	movs	r1, #0
   1aa06:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   1aa08:	4b18      	ldr	r3, [pc, #96]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1aa0a:	681b      	ldr	r3, [r3, #0]
   1aa0c:	228a      	movs	r2, #138	; 0x8a
   1aa0e:	21a0      	movs	r1, #160	; 0xa0
   1aa10:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   1aa12:	4b16      	ldr	r3, [pc, #88]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1aa14:	681b      	ldr	r3, [r3, #0]
   1aa16:	228c      	movs	r2, #140	; 0x8c
   1aa18:	21a0      	movs	r1, #160	; 0xa0
   1aa1a:	0049      	lsls	r1, r1, #1
   1aa1c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   1aa1e:	4b13      	ldr	r3, [pc, #76]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1aa20:	681b      	ldr	r3, [r3, #0]
   1aa22:	228e      	movs	r2, #142	; 0x8e
   1aa24:	21f0      	movs	r1, #240	; 0xf0
   1aa26:	0049      	lsls	r1, r1, #1
   1aa28:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   1aa2a:	4b10      	ldr	r3, [pc, #64]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1aa2c:	681b      	ldr	r3, [r3, #0]
   1aa2e:	2290      	movs	r2, #144	; 0x90
   1aa30:	490f      	ldr	r1, [pc, #60]	; (1aa70 <vTraceInitObjectPropertyTable+0x18c>)
   1aa32:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   1aa34:	4b0d      	ldr	r3, [pc, #52]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1aa36:	681b      	ldr	r3, [r3, #0]
   1aa38:	2292      	movs	r2, #146	; 0x92
   1aa3a:	490e      	ldr	r1, [pc, #56]	; (1aa74 <vTraceInitObjectPropertyTable+0x190>)
   1aa3c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   1aa3e:	4b0b      	ldr	r3, [pc, #44]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1aa40:	681b      	ldr	r3, [r3, #0]
   1aa42:	2294      	movs	r2, #148	; 0x94
   1aa44:	490c      	ldr	r1, [pc, #48]	; (1aa78 <vTraceInitObjectPropertyTable+0x194>)
   1aa46:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   1aa48:	4b08      	ldr	r3, [pc, #32]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1aa4a:	681b      	ldr	r3, [r3, #0]
   1aa4c:	2296      	movs	r2, #150	; 0x96
   1aa4e:	490b      	ldr	r1, [pc, #44]	; (1aa7c <vTraceInitObjectPropertyTable+0x198>)
   1aa50:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   1aa52:	4b06      	ldr	r3, [pc, #24]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1aa54:	681b      	ldr	r3, [r3, #0]
   1aa56:	2298      	movs	r2, #152	; 0x98
   1aa58:	218c      	movs	r1, #140	; 0x8c
   1aa5a:	00c9      	lsls	r1, r1, #3
   1aa5c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   1aa5e:	4b03      	ldr	r3, [pc, #12]	; (1aa6c <vTraceInitObjectPropertyTable+0x188>)
   1aa60:	681b      	ldr	r3, [r3, #0]
   1aa62:	4a07      	ldr	r2, [pc, #28]	; (1aa80 <vTraceInitObjectPropertyTable+0x19c>)
   1aa64:	661a      	str	r2, [r3, #96]	; 0x60
}
   1aa66:	46c0      	nop			; (mov r8, r8)
   1aa68:	46bd      	mov	sp, r7
   1aa6a:	bd80      	pop	{r7, pc}
   1aa6c:	20000c98 	.word	0x20000c98
   1aa70:	000002fd 	.word	0x000002fd
   1aa74:	00000352 	.word	0x00000352
   1aa78:	000003a2 	.word	0x000003a2
   1aa7c:	00000401 	.word	0x00000401
   1aa80:	000004bf 	.word	0x000004bf

0001aa84 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   1aa84:	b580      	push	{r7, lr}
   1aa86:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   1aa88:	4b2e      	ldr	r3, [pc, #184]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aa8a:	2200      	movs	r2, #0
   1aa8c:	825a      	strh	r2, [r3, #18]
   1aa8e:	4b2d      	ldr	r3, [pc, #180]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aa90:	8a5a      	ldrh	r2, [r3, #18]
   1aa92:	4b2c      	ldr	r3, [pc, #176]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aa94:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   1aa96:	4b2b      	ldr	r3, [pc, #172]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aa98:	220a      	movs	r2, #10
   1aa9a:	829a      	strh	r2, [r3, #20]
   1aa9c:	4b29      	ldr	r3, [pc, #164]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aa9e:	8a9a      	ldrh	r2, [r3, #20]
   1aaa0:	4b28      	ldr	r3, [pc, #160]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aaa2:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   1aaa4:	4b27      	ldr	r3, [pc, #156]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aaa6:	2214      	movs	r2, #20
   1aaa8:	82da      	strh	r2, [r3, #22]
   1aaaa:	4b26      	ldr	r3, [pc, #152]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aaac:	8ada      	ldrh	r2, [r3, #22]
   1aaae:	4b25      	ldr	r3, [pc, #148]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aab0:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   1aab2:	4b24      	ldr	r3, [pc, #144]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aab4:	221e      	movs	r2, #30
   1aab6:	831a      	strh	r2, [r3, #24]
   1aab8:	4b22      	ldr	r3, [pc, #136]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aaba:	8b1a      	ldrh	r2, [r3, #24]
   1aabc:	4b21      	ldr	r3, [pc, #132]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aabe:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   1aac0:	4b20      	ldr	r3, [pc, #128]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aac2:	222d      	movs	r2, #45	; 0x2d
   1aac4:	835a      	strh	r2, [r3, #26]
   1aac6:	4b1f      	ldr	r3, [pc, #124]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aac8:	8b5a      	ldrh	r2, [r3, #26]
   1aaca:	4b1e      	ldr	r3, [pc, #120]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aacc:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   1aace:	4b1d      	ldr	r3, [pc, #116]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aad0:	2232      	movs	r2, #50	; 0x32
   1aad2:	839a      	strh	r2, [r3, #28]
   1aad4:	4b1b      	ldr	r3, [pc, #108]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aad6:	8b9a      	ldrh	r2, [r3, #28]
   1aad8:	4b1a      	ldr	r3, [pc, #104]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aada:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   1aadc:	4b19      	ldr	r3, [pc, #100]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aade:	2237      	movs	r2, #55	; 0x37
   1aae0:	83da      	strh	r2, [r3, #30]
   1aae2:	4b18      	ldr	r3, [pc, #96]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aae4:	8bda      	ldrh	r2, [r3, #30]
   1aae6:	4b17      	ldr	r3, [pc, #92]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aae8:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   1aaea:	4b16      	ldr	r3, [pc, #88]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aaec:	223c      	movs	r2, #60	; 0x3c
   1aaee:	841a      	strh	r2, [r3, #32]
   1aaf0:	4b14      	ldr	r3, [pc, #80]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aaf2:	8c1a      	ldrh	r2, [r3, #32]
   1aaf4:	4b13      	ldr	r3, [pc, #76]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aaf6:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   1aaf8:	4b12      	ldr	r3, [pc, #72]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1aafa:	2241      	movs	r2, #65	; 0x41
   1aafc:	845a      	strh	r2, [r3, #34]	; 0x22
   1aafe:	4b11      	ldr	r3, [pc, #68]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1ab00:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   1ab02:	4b10      	ldr	r3, [pc, #64]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1ab04:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   1ab06:	4b0f      	ldr	r3, [pc, #60]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1ab08:	2209      	movs	r2, #9
   1ab0a:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   1ab0c:	4b0d      	ldr	r3, [pc, #52]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1ab0e:	2213      	movs	r2, #19
   1ab10:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   1ab12:	4b0c      	ldr	r3, [pc, #48]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1ab14:	221d      	movs	r2, #29
   1ab16:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   1ab18:	4b0a      	ldr	r3, [pc, #40]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1ab1a:	222c      	movs	r2, #44	; 0x2c
   1ab1c:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   1ab1e:	4b09      	ldr	r3, [pc, #36]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1ab20:	2231      	movs	r2, #49	; 0x31
   1ab22:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   1ab24:	4b07      	ldr	r3, [pc, #28]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1ab26:	2236      	movs	r2, #54	; 0x36
   1ab28:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   1ab2a:	4b06      	ldr	r3, [pc, #24]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1ab2c:	223b      	movs	r2, #59	; 0x3b
   1ab2e:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   1ab30:	4b04      	ldr	r3, [pc, #16]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1ab32:	2240      	movs	r2, #64	; 0x40
   1ab34:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   1ab36:	4b03      	ldr	r3, [pc, #12]	; (1ab44 <vTraceInitObjectHandleStack+0xc0>)
   1ab38:	2245      	movs	r2, #69	; 0x45
   1ab3a:	869a      	strh	r2, [r3, #52]	; 0x34
}
   1ab3c:	46c0      	nop			; (mov r8, r8)
   1ab3e:	46bd      	mov	sp, r7
   1ab40:	bd80      	pop	{r7, pc}
   1ab42:	46c0      	nop			; (mov r8, r8)
   1ab44:	20000c08 	.word	0x20000c08

0001ab48 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   1ab48:	b580      	push	{r7, lr}
   1ab4a:	b082      	sub	sp, #8
   1ab4c:	af00      	add	r7, sp, #0
   1ab4e:	0002      	movs	r2, r0
   1ab50:	1dfb      	adds	r3, r7, #7
   1ab52:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   1ab54:	1dfb      	adds	r3, r7, #7
   1ab56:	781b      	ldrb	r3, [r3, #0]
   1ab58:	2b08      	cmp	r3, #8
   1ab5a:	d816      	bhi.n	1ab8a <pszTraceGetErrorNotEnoughHandles+0x42>
   1ab5c:	009a      	lsls	r2, r3, #2
   1ab5e:	4b0d      	ldr	r3, [pc, #52]	; (1ab94 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   1ab60:	18d3      	adds	r3, r2, r3
   1ab62:	681b      	ldr	r3, [r3, #0]
   1ab64:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   1ab66:	4b0c      	ldr	r3, [pc, #48]	; (1ab98 <pszTraceGetErrorNotEnoughHandles+0x50>)
   1ab68:	e010      	b.n	1ab8c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   1ab6a:	4b0c      	ldr	r3, [pc, #48]	; (1ab9c <pszTraceGetErrorNotEnoughHandles+0x54>)
   1ab6c:	e00e      	b.n	1ab8c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   1ab6e:	4b0c      	ldr	r3, [pc, #48]	; (1aba0 <pszTraceGetErrorNotEnoughHandles+0x58>)
   1ab70:	e00c      	b.n	1ab8c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   1ab72:	4b0c      	ldr	r3, [pc, #48]	; (1aba4 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   1ab74:	e00a      	b.n	1ab8c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   1ab76:	4b0c      	ldr	r3, [pc, #48]	; (1aba8 <pszTraceGetErrorNotEnoughHandles+0x60>)
   1ab78:	e008      	b.n	1ab8c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   1ab7a:	4b0c      	ldr	r3, [pc, #48]	; (1abac <pszTraceGetErrorNotEnoughHandles+0x64>)
   1ab7c:	e006      	b.n	1ab8c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   1ab7e:	4b0c      	ldr	r3, [pc, #48]	; (1abb0 <pszTraceGetErrorNotEnoughHandles+0x68>)
   1ab80:	e004      	b.n	1ab8c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   1ab82:	4b0c      	ldr	r3, [pc, #48]	; (1abb4 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   1ab84:	e002      	b.n	1ab8c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   1ab86:	4b0c      	ldr	r3, [pc, #48]	; (1abb8 <pszTraceGetErrorNotEnoughHandles+0x70>)
   1ab88:	e000      	b.n	1ab8c <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   1ab8a:	4b0c      	ldr	r3, [pc, #48]	; (1abbc <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   1ab8c:	0018      	movs	r0, r3
   1ab8e:	46bd      	mov	sp, r7
   1ab90:	b002      	add	sp, #8
   1ab92:	bd80      	pop	{r7, pc}
   1ab94:	0003a48c 	.word	0x0003a48c
   1ab98:	0003a18c 	.word	0x0003a18c
   1ab9c:	0003a1d4 	.word	0x0003a1d4
   1aba0:	0003a21c 	.word	0x0003a21c
   1aba4:	0003a270 	.word	0x0003a270
   1aba8:	0003a2bc 	.word	0x0003a2bc
   1abac:	0003a308 	.word	0x0003a308
   1abb0:	0003a354 	.word	0x0003a354
   1abb4:	0003a3a8 	.word	0x0003a3a8
   1abb8:	0003a400 	.word	0x0003a400
   1abbc:	0003a45c 	.word	0x0003a45c

0001abc0 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   1abc0:	b590      	push	{r4, r7, lr}
   1abc2:	b087      	sub	sp, #28
   1abc4:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   1abc6:	2317      	movs	r3, #23
   1abc8:	18fb      	adds	r3, r7, r3
   1abca:	2200      	movs	r2, #0
   1abcc:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   1abce:	4b36      	ldr	r3, [pc, #216]	; (1aca8 <uiTraceStart+0xe8>)
   1abd0:	681b      	ldr	r3, [r3, #0]
   1abd2:	2b00      	cmp	r3, #0
   1abd4:	d10b      	bne.n	1abee <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   1abd6:	4b34      	ldr	r3, [pc, #208]	; (1aca8 <uiTraceStart+0xe8>)
   1abd8:	681b      	ldr	r3, [r3, #0]
   1abda:	2b00      	cmp	r3, #0
   1abdc:	d105      	bne.n	1abea <uiTraceStart+0x2a>
   1abde:	4b33      	ldr	r3, [pc, #204]	; (1acac <uiTraceStart+0xec>)
   1abe0:	0018      	movs	r0, r3
   1abe2:	4b33      	ldr	r3, [pc, #204]	; (1acb0 <uiTraceStart+0xf0>)
   1abe4:	4798      	blx	r3
   1abe6:	2300      	movs	r3, #0
   1abe8:	e059      	b.n	1ac9e <uiTraceStart+0xde>
		return 0;
   1abea:	2300      	movs	r3, #0
   1abec:	e057      	b.n	1ac9e <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   1abee:	4b2e      	ldr	r3, [pc, #184]	; (1aca8 <uiTraceStart+0xe8>)
   1abf0:	681b      	ldr	r3, [r3, #0]
   1abf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1abf4:	2b01      	cmp	r3, #1
   1abf6:	d101      	bne.n	1abfc <uiTraceStart+0x3c>
		return 1; /* Already running */
   1abf8:	2301      	movs	r3, #1
   1abfa:	e050      	b.n	1ac9e <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   1abfc:	4b2d      	ldr	r3, [pc, #180]	; (1acb4 <uiTraceStart+0xf4>)
   1abfe:	681b      	ldr	r3, [r3, #0]
   1ac00:	2b00      	cmp	r3, #0
   1ac02:	d149      	bne.n	1ac98 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1ac04:	f3ef 8310 	mrs	r3, PRIMASK
   1ac08:	60bb      	str	r3, [r7, #8]
  return(result);
   1ac0a:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   1ac0c:	613b      	str	r3, [r7, #16]
   1ac0e:	2301      	movs	r3, #1
   1ac10:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1ac12:	68fb      	ldr	r3, [r7, #12]
   1ac14:	f383 8810 	msr	PRIMASK, r3
   1ac18:	4b27      	ldr	r3, [pc, #156]	; (1acb8 <uiTraceStart+0xf8>)
   1ac1a:	681b      	ldr	r3, [r3, #0]
   1ac1c:	1c5a      	adds	r2, r3, #1
   1ac1e:	4b26      	ldr	r3, [pc, #152]	; (1acb8 <uiTraceStart+0xf8>)
   1ac20:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   1ac22:	4b21      	ldr	r3, [pc, #132]	; (1aca8 <uiTraceStart+0xe8>)
   1ac24:	681b      	ldr	r3, [r3, #0]
   1ac26:	2201      	movs	r2, #1
   1ac28:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   1ac2a:	4b24      	ldr	r3, [pc, #144]	; (1acbc <uiTraceStart+0xfc>)
   1ac2c:	4798      	blx	r3
   1ac2e:	0003      	movs	r3, r0
   1ac30:	0018      	movs	r0, r3
   1ac32:	4b23      	ldr	r3, [pc, #140]	; (1acc0 <uiTraceStart+0x100>)
   1ac34:	4798      	blx	r3
   1ac36:	0003      	movs	r3, r0
   1ac38:	001a      	movs	r2, r3
   1ac3a:	2317      	movs	r3, #23
   1ac3c:	18fb      	adds	r3, r7, r3
   1ac3e:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   1ac40:	2317      	movs	r3, #23
   1ac42:	18fb      	adds	r3, r7, r3
   1ac44:	781b      	ldrb	r3, [r3, #0]
   1ac46:	2b00      	cmp	r3, #0
   1ac48:	d116      	bne.n	1ac78 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   1ac4a:	2317      	movs	r3, #23
   1ac4c:	18fc      	adds	r4, r7, r3
   1ac4e:	2003      	movs	r0, #3
   1ac50:	4b1c      	ldr	r3, [pc, #112]	; (1acc4 <uiTraceStart+0x104>)
   1ac52:	4798      	blx	r3
   1ac54:	0003      	movs	r3, r0
   1ac56:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   1ac58:	4a1b      	ldr	r2, [pc, #108]	; (1acc8 <uiTraceStart+0x108>)
   1ac5a:	2317      	movs	r3, #23
   1ac5c:	18fb      	adds	r3, r7, r3
   1ac5e:	781b      	ldrb	r3, [r3, #0]
   1ac60:	0019      	movs	r1, r3
   1ac62:	2003      	movs	r0, #3
   1ac64:	4b19      	ldr	r3, [pc, #100]	; (1accc <uiTraceStart+0x10c>)
   1ac66:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   1ac68:	2317      	movs	r3, #23
   1ac6a:	18fb      	adds	r3, r7, r3
   1ac6c:	781b      	ldrb	r3, [r3, #0]
   1ac6e:	2200      	movs	r2, #0
   1ac70:	0019      	movs	r1, r3
   1ac72:	2003      	movs	r0, #3
   1ac74:	4b16      	ldr	r3, [pc, #88]	; (1acd0 <uiTraceStart+0x110>)
   1ac76:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   1ac78:	2317      	movs	r3, #23
   1ac7a:	18fb      	adds	r3, r7, r3
   1ac7c:	781b      	ldrb	r3, [r3, #0]
   1ac7e:	0018      	movs	r0, r3
   1ac80:	4b14      	ldr	r3, [pc, #80]	; (1acd4 <uiTraceStart+0x114>)
   1ac82:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   1ac84:	4b0c      	ldr	r3, [pc, #48]	; (1acb8 <uiTraceStart+0xf8>)
   1ac86:	681b      	ldr	r3, [r3, #0]
   1ac88:	1e5a      	subs	r2, r3, #1
   1ac8a:	4b0b      	ldr	r3, [pc, #44]	; (1acb8 <uiTraceStart+0xf8>)
   1ac8c:	601a      	str	r2, [r3, #0]
   1ac8e:	693b      	ldr	r3, [r7, #16]
   1ac90:	607b      	str	r3, [r7, #4]
   1ac92:	687b      	ldr	r3, [r7, #4]
   1ac94:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   1ac98:	4b03      	ldr	r3, [pc, #12]	; (1aca8 <uiTraceStart+0xe8>)
   1ac9a:	681b      	ldr	r3, [r3, #0]
   1ac9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   1ac9e:	0018      	movs	r0, r3
   1aca0:	46bd      	mov	sp, r7
   1aca2:	b007      	add	sp, #28
   1aca4:	bd90      	pop	{r4, r7, pc}
   1aca6:	46c0      	nop			; (mov r8, r8)
   1aca8:	20000c98 	.word	0x20000c98
   1acac:	0003a4b0 	.word	0x0003a4b0
   1acb0:	0001be29 	.word	0x0001be29
   1acb4:	20000bf8 	.word	0x20000bf8
   1acb8:	20000bf0 	.word	0x20000bf0
   1acbc:	0001a829 	.word	0x0001a829
   1acc0:	0001a56d 	.word	0x0001a56d
   1acc4:	0001bb0d 	.word	0x0001bb0d
   1acc8:	0003a4f4 	.word	0x0003a4f4
   1accc:	0001bd3d 	.word	0x0001bd3d
   1acd0:	0001b4a1 	.word	0x0001b4a1
   1acd4:	0001b389 	.word	0x0001b389

0001acd8 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   1acd8:	b580      	push	{r7, lr}
   1acda:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   1acdc:	4b02      	ldr	r3, [pc, #8]	; (1ace8 <vTraceStart+0x10>)
   1acde:	4798      	blx	r3
}
   1ace0:	46c0      	nop			; (mov r8, r8)
   1ace2:	46bd      	mov	sp, r7
   1ace4:	bd80      	pop	{r7, pc}
   1ace6:	46c0      	nop			; (mov r8, r8)
   1ace8:	0001abc1 	.word	0x0001abc1

0001acec <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   1acec:	b580      	push	{r7, lr}
   1acee:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   1acf0:	4b08      	ldr	r3, [pc, #32]	; (1ad14 <vTraceStop+0x28>)
   1acf2:	681b      	ldr	r3, [r3, #0]
   1acf4:	2b00      	cmp	r3, #0
   1acf6:	d003      	beq.n	1ad00 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   1acf8:	4b06      	ldr	r3, [pc, #24]	; (1ad14 <vTraceStop+0x28>)
   1acfa:	681b      	ldr	r3, [r3, #0]
   1acfc:	2200      	movs	r2, #0
   1acfe:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   1ad00:	4b05      	ldr	r3, [pc, #20]	; (1ad18 <vTraceStop+0x2c>)
   1ad02:	681b      	ldr	r3, [r3, #0]
   1ad04:	2b00      	cmp	r3, #0
   1ad06:	d002      	beq.n	1ad0e <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   1ad08:	4b03      	ldr	r3, [pc, #12]	; (1ad18 <vTraceStop+0x2c>)
   1ad0a:	681b      	ldr	r3, [r3, #0]
   1ad0c:	4798      	blx	r3
	}
}
   1ad0e:	46c0      	nop			; (mov r8, r8)
   1ad10:	46bd      	mov	sp, r7
   1ad12:	bd80      	pop	{r7, pc}
   1ad14:	20000c98 	.word	0x20000c98
   1ad18:	20000c00 	.word	0x20000c00

0001ad1c <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   1ad1c:	b580      	push	{r7, lr}
   1ad1e:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   1ad20:	4b05      	ldr	r3, [pc, #20]	; (1ad38 <xTraceIsRecordingEnabled+0x1c>)
   1ad22:	681b      	ldr	r3, [r3, #0]
   1ad24:	2b00      	cmp	r3, #0
   1ad26:	d003      	beq.n	1ad30 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   1ad28:	4b03      	ldr	r3, [pc, #12]	; (1ad38 <xTraceIsRecordingEnabled+0x1c>)
   1ad2a:	681b      	ldr	r3, [r3, #0]
   1ad2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ad2e:	e000      	b.n	1ad32 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   1ad30:	2300      	movs	r3, #0
	}
}
   1ad32:	0018      	movs	r0, r3
   1ad34:	46bd      	mov	sp, r7
   1ad36:	bd80      	pop	{r7, pc}
   1ad38:	20000c98 	.word	0x20000c98

0001ad3c <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   1ad3c:	b590      	push	{r4, r7, lr}
   1ad3e:	b089      	sub	sp, #36	; 0x24
   1ad40:	af00      	add	r7, sp, #0
   1ad42:	0002      	movs	r2, r0
   1ad44:	1dfb      	adds	r3, r7, #7
   1ad46:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   1ad48:	1dfb      	adds	r3, r7, #7
   1ad4a:	781b      	ldrb	r3, [r3, #0]
   1ad4c:	2b00      	cmp	r3, #0
   1ad4e:	d057      	beq.n	1ae00 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   1ad50:	4b2e      	ldr	r3, [pc, #184]	; (1ae0c <prvTraceStoreTaskReady+0xd0>)
   1ad52:	681b      	ldr	r3, [r3, #0]
   1ad54:	2b00      	cmp	r3, #0
   1ad56:	d055      	beq.n	1ae04 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   1ad58:	1dfb      	adds	r3, r7, #7
   1ad5a:	781b      	ldrb	r3, [r3, #0]
   1ad5c:	2b0f      	cmp	r3, #15
   1ad5e:	d904      	bls.n	1ad6a <prvTraceStoreTaskReady+0x2e>
   1ad60:	4b2b      	ldr	r3, [pc, #172]	; (1ae10 <prvTraceStoreTaskReady+0xd4>)
   1ad62:	0018      	movs	r0, r3
   1ad64:	4b2b      	ldr	r3, [pc, #172]	; (1ae14 <prvTraceStoreTaskReady+0xd8>)
   1ad66:	4798      	blx	r3
   1ad68:	e04d      	b.n	1ae06 <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   1ad6a:	4b2b      	ldr	r3, [pc, #172]	; (1ae18 <prvTraceStoreTaskReady+0xdc>)
   1ad6c:	681b      	ldr	r3, [r3, #0]
   1ad6e:	2b00      	cmp	r3, #0
   1ad70:	d004      	beq.n	1ad7c <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   1ad72:	4b2a      	ldr	r3, [pc, #168]	; (1ae1c <prvTraceStoreTaskReady+0xe0>)
   1ad74:	0018      	movs	r0, r3
   1ad76:	4b27      	ldr	r3, [pc, #156]	; (1ae14 <prvTraceStoreTaskReady+0xd8>)
   1ad78:	4798      	blx	r3
		return;
   1ad7a:	e044      	b.n	1ae06 <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1ad7c:	f3ef 8310 	mrs	r3, PRIMASK
   1ad80:	60fb      	str	r3, [r7, #12]
  return(result);
   1ad82:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   1ad84:	61fb      	str	r3, [r7, #28]
   1ad86:	2301      	movs	r3, #1
   1ad88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1ad8a:	693b      	ldr	r3, [r7, #16]
   1ad8c:	f383 8810 	msr	PRIMASK, r3
   1ad90:	4b21      	ldr	r3, [pc, #132]	; (1ae18 <prvTraceStoreTaskReady+0xdc>)
   1ad92:	681b      	ldr	r3, [r3, #0]
   1ad94:	1c5a      	adds	r2, r3, #1
   1ad96:	4b20      	ldr	r3, [pc, #128]	; (1ae18 <prvTraceStoreTaskReady+0xdc>)
   1ad98:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   1ad9a:	4b21      	ldr	r3, [pc, #132]	; (1ae20 <prvTraceStoreTaskReady+0xe4>)
   1ad9c:	681b      	ldr	r3, [r3, #0]
   1ad9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ada0:	2b00      	cmp	r3, #0
   1ada2:	d022      	beq.n	1adea <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1ada4:	231a      	movs	r3, #26
   1ada6:	18fc      	adds	r4, r7, r3
   1ada8:	4b1e      	ldr	r3, [pc, #120]	; (1ae24 <prvTraceStoreTaskReady+0xe8>)
   1adaa:	0018      	movs	r0, r3
   1adac:	4b1e      	ldr	r3, [pc, #120]	; (1ae28 <prvTraceStoreTaskReady+0xec>)
   1adae:	4798      	blx	r3
   1adb0:	0003      	movs	r3, r0
   1adb2:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   1adb4:	2319      	movs	r3, #25
   1adb6:	18fb      	adds	r3, r7, r3
   1adb8:	1dfa      	adds	r2, r7, #7
   1adba:	7812      	ldrb	r2, [r2, #0]
   1adbc:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   1adbe:	4b1b      	ldr	r3, [pc, #108]	; (1ae2c <prvTraceStoreTaskReady+0xf0>)
   1adc0:	4798      	blx	r3
   1adc2:	0003      	movs	r3, r0
   1adc4:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   1adc6:	697b      	ldr	r3, [r7, #20]
   1adc8:	2b00      	cmp	r3, #0
   1adca:	d00e      	beq.n	1adea <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   1adcc:	697b      	ldr	r3, [r7, #20]
   1adce:	2202      	movs	r2, #2
   1add0:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   1add2:	697b      	ldr	r3, [r7, #20]
   1add4:	221a      	movs	r2, #26
   1add6:	18ba      	adds	r2, r7, r2
   1add8:	8812      	ldrh	r2, [r2, #0]
   1adda:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   1addc:	697b      	ldr	r3, [r7, #20]
   1adde:	2219      	movs	r2, #25
   1ade0:	18ba      	adds	r2, r7, r2
   1ade2:	7812      	ldrb	r2, [r2, #0]
   1ade4:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1ade6:	4b12      	ldr	r3, [pc, #72]	; (1ae30 <prvTraceStoreTaskReady+0xf4>)
   1ade8:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1adea:	4b0b      	ldr	r3, [pc, #44]	; (1ae18 <prvTraceStoreTaskReady+0xdc>)
   1adec:	681b      	ldr	r3, [r3, #0]
   1adee:	1e5a      	subs	r2, r3, #1
   1adf0:	4b09      	ldr	r3, [pc, #36]	; (1ae18 <prvTraceStoreTaskReady+0xdc>)
   1adf2:	601a      	str	r2, [r3, #0]
   1adf4:	69fb      	ldr	r3, [r7, #28]
   1adf6:	60bb      	str	r3, [r7, #8]
   1adf8:	68bb      	ldr	r3, [r7, #8]
   1adfa:	f383 8810 	msr	PRIMASK, r3
   1adfe:	e002      	b.n	1ae06 <prvTraceStoreTaskReady+0xca>
		return;
   1ae00:	46c0      	nop			; (mov r8, r8)
   1ae02:	e000      	b.n	1ae06 <prvTraceStoreTaskReady+0xca>
		return;
   1ae04:	46c0      	nop			; (mov r8, r8)
}
   1ae06:	46bd      	mov	sp, r7
   1ae08:	b009      	add	sp, #36	; 0x24
   1ae0a:	bd90      	pop	{r4, r7, pc}
   1ae0c:	20000114 	.word	0x20000114
   1ae10:	0003a85c 	.word	0x0003a85c
   1ae14:	0001be29 	.word	0x0001be29
   1ae18:	20000bf0 	.word	0x20000bf0
   1ae1c:	0003a89c 	.word	0x0003a89c
   1ae20:	20000c98 	.word	0x20000c98
   1ae24:	0000ffff 	.word	0x0000ffff
   1ae28:	0001c03d 	.word	0x0001c03d
   1ae2c:	0001b9e1 	.word	0x0001b9e1
   1ae30:	0001bfe5 	.word	0x0001bfe5

0001ae34 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   1ae34:	b580      	push	{r7, lr}
   1ae36:	b08e      	sub	sp, #56	; 0x38
   1ae38:	af00      	add	r7, sp, #0
   1ae3a:	60f8      	str	r0, [r7, #12]
   1ae3c:	60b9      	str	r1, [r7, #8]
   1ae3e:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   1ae40:	4b48      	ldr	r3, [pc, #288]	; (1af64 <vTraceStoreMemMangEvent+0x130>)
   1ae42:	681b      	ldr	r3, [r3, #0]
   1ae44:	2b00      	cmp	r3, #0
   1ae46:	d100      	bne.n	1ae4a <vTraceStoreMemMangEvent+0x16>
   1ae48:	e088      	b.n	1af5c <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   1ae4a:	687b      	ldr	r3, [r7, #4]
   1ae4c:	2b00      	cmp	r3, #0
   1ae4e:	da03      	bge.n	1ae58 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   1ae50:	687b      	ldr	r3, [r7, #4]
   1ae52:	425b      	negs	r3, r3
   1ae54:	637b      	str	r3, [r7, #52]	; 0x34
   1ae56:	e001      	b.n	1ae5c <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   1ae58:	687b      	ldr	r3, [r7, #4]
   1ae5a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1ae5c:	f3ef 8310 	mrs	r3, PRIMASK
   1ae60:	61bb      	str	r3, [r7, #24]
  return(result);
   1ae62:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   1ae64:	633b      	str	r3, [r7, #48]	; 0x30
   1ae66:	2301      	movs	r3, #1
   1ae68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1ae6a:	69fb      	ldr	r3, [r7, #28]
   1ae6c:	f383 8810 	msr	PRIMASK, r3
   1ae70:	4b3d      	ldr	r3, [pc, #244]	; (1af68 <vTraceStoreMemMangEvent+0x134>)
   1ae72:	681b      	ldr	r3, [r3, #0]
   1ae74:	1c5a      	adds	r2, r3, #1
   1ae76:	4b3c      	ldr	r3, [pc, #240]	; (1af68 <vTraceStoreMemMangEvent+0x134>)
   1ae78:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   1ae7a:	68bb      	ldr	r3, [r7, #8]
   1ae7c:	2b00      	cmp	r3, #0
   1ae7e:	d005      	beq.n	1ae8c <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   1ae80:	4b3a      	ldr	r3, [pc, #232]	; (1af6c <vTraceStoreMemMangEvent+0x138>)
   1ae82:	681a      	ldr	r2, [r3, #0]
   1ae84:	687b      	ldr	r3, [r7, #4]
   1ae86:	18d2      	adds	r2, r2, r3
   1ae88:	4b38      	ldr	r3, [pc, #224]	; (1af6c <vTraceStoreMemMangEvent+0x138>)
   1ae8a:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   1ae8c:	4b35      	ldr	r3, [pc, #212]	; (1af64 <vTraceStoreMemMangEvent+0x130>)
   1ae8e:	681b      	ldr	r3, [r3, #0]
   1ae90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ae92:	2b00      	cmp	r3, #0
   1ae94:	d057      	beq.n	1af46 <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   1ae96:	20ff      	movs	r0, #255	; 0xff
   1ae98:	4b35      	ldr	r3, [pc, #212]	; (1af70 <vTraceStoreMemMangEvent+0x13c>)
   1ae9a:	4798      	blx	r3
   1ae9c:	0003      	movs	r3, r0
   1ae9e:	001a      	movs	r2, r3
   1aea0:	232f      	movs	r3, #47	; 0x2f
   1aea2:	18fb      	adds	r3, r7, r3
   1aea4:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   1aea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1aea8:	4a32      	ldr	r2, [pc, #200]	; (1af74 <vTraceStoreMemMangEvent+0x140>)
   1aeaa:	0019      	movs	r1, r3
   1aeac:	0010      	movs	r0, r2
   1aeae:	4b32      	ldr	r3, [pc, #200]	; (1af78 <vTraceStoreMemMangEvent+0x144>)
   1aeb0:	4798      	blx	r3
   1aeb2:	0002      	movs	r2, r0
   1aeb4:	232c      	movs	r3, #44	; 0x2c
   1aeb6:	18fb      	adds	r3, r7, r3
   1aeb8:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   1aeba:	4b30      	ldr	r3, [pc, #192]	; (1af7c <vTraceStoreMemMangEvent+0x148>)
   1aebc:	4798      	blx	r3
   1aebe:	0003      	movs	r3, r0
   1aec0:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   1aec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aec4:	2b00      	cmp	r3, #0
   1aec6:	d03e      	beq.n	1af46 <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   1aec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aeca:	222f      	movs	r2, #47	; 0x2f
   1aecc:	18ba      	adds	r2, r7, r2
   1aece:	7812      	ldrb	r2, [r2, #0]
   1aed0:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   1aed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aed4:	2200      	movs	r2, #0
   1aed6:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   1aed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aeda:	222c      	movs	r2, #44	; 0x2c
   1aedc:	18ba      	adds	r2, r7, r2
   1aede:	8812      	ldrh	r2, [r2, #0]
   1aee0:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1aee2:	4b27      	ldr	r3, [pc, #156]	; (1af80 <vTraceStoreMemMangEvent+0x14c>)
   1aee4:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   1aee6:	68bb      	ldr	r3, [r7, #8]
   1aee8:	4a22      	ldr	r2, [pc, #136]	; (1af74 <vTraceStoreMemMangEvent+0x140>)
   1aeea:	0019      	movs	r1, r3
   1aeec:	0010      	movs	r0, r2
   1aeee:	4b22      	ldr	r3, [pc, #136]	; (1af78 <vTraceStoreMemMangEvent+0x144>)
   1aef0:	4798      	blx	r3
   1aef2:	0002      	movs	r2, r0
   1aef4:	2326      	movs	r3, #38	; 0x26
   1aef6:	18fb      	adds	r3, r7, r3
   1aef8:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   1aefa:	2325      	movs	r3, #37	; 0x25
   1aefc:	18fb      	adds	r3, r7, r3
   1aefe:	2200      	movs	r2, #0
   1af00:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   1af02:	4b1e      	ldr	r3, [pc, #120]	; (1af7c <vTraceStoreMemMangEvent+0x148>)
   1af04:	4798      	blx	r3
   1af06:	0003      	movs	r3, r0
   1af08:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   1af0a:	6a3b      	ldr	r3, [r7, #32]
   1af0c:	2b00      	cmp	r3, #0
   1af0e:	d01a      	beq.n	1af46 <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   1af10:	6a3b      	ldr	r3, [r7, #32]
   1af12:	2226      	movs	r2, #38	; 0x26
   1af14:	18ba      	adds	r2, r7, r2
   1af16:	8812      	ldrh	r2, [r2, #0]
   1af18:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   1af1a:	6a3b      	ldr	r3, [r7, #32]
   1af1c:	2225      	movs	r2, #37	; 0x25
   1af1e:	18ba      	adds	r2, r7, r2
   1af20:	7812      	ldrb	r2, [r2, #0]
   1af22:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   1af24:	68fb      	ldr	r3, [r7, #12]
   1af26:	b2db      	uxtb	r3, r3
   1af28:	3301      	adds	r3, #1
   1af2a:	b2da      	uxtb	r2, r3
   1af2c:	6a3b      	ldr	r3, [r7, #32]
   1af2e:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   1af30:	68fb      	ldr	r3, [r7, #12]
   1af32:	b2da      	uxtb	r2, r3
   1af34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af36:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   1af38:	4b11      	ldr	r3, [pc, #68]	; (1af80 <vTraceStoreMemMangEvent+0x14c>)
   1af3a:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   1af3c:	4b09      	ldr	r3, [pc, #36]	; (1af64 <vTraceStoreMemMangEvent+0x130>)
   1af3e:	681b      	ldr	r3, [r3, #0]
   1af40:	4a0a      	ldr	r2, [pc, #40]	; (1af6c <vTraceStoreMemMangEvent+0x138>)
   1af42:	6812      	ldr	r2, [r2, #0]
   1af44:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   1af46:	4b08      	ldr	r3, [pc, #32]	; (1af68 <vTraceStoreMemMangEvent+0x134>)
   1af48:	681b      	ldr	r3, [r3, #0]
   1af4a:	1e5a      	subs	r2, r3, #1
   1af4c:	4b06      	ldr	r3, [pc, #24]	; (1af68 <vTraceStoreMemMangEvent+0x134>)
   1af4e:	601a      	str	r2, [r3, #0]
   1af50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1af52:	617b      	str	r3, [r7, #20]
   1af54:	697b      	ldr	r3, [r7, #20]
   1af56:	f383 8810 	msr	PRIMASK, r3
   1af5a:	e000      	b.n	1af5e <vTraceStoreMemMangEvent+0x12a>
		return;
   1af5c:	46c0      	nop			; (mov r8, r8)
}
   1af5e:	46bd      	mov	sp, r7
   1af60:	b00e      	add	sp, #56	; 0x38
   1af62:	bd80      	pop	{r7, pc}
   1af64:	20000c98 	.word	0x20000c98
   1af68:	20000bf0 	.word	0x20000bf0
   1af6c:	20000c04 	.word	0x20000c04
   1af70:	0001c03d 	.word	0x0001c03d
   1af74:	0000ffff 	.word	0x0000ffff
   1af78:	0001b201 	.word	0x0001b201
   1af7c:	0001b9e1 	.word	0x0001b9e1
   1af80:	0001bfe5 	.word	0x0001bfe5

0001af84 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   1af84:	b590      	push	{r4, r7, lr}
   1af86:	b08b      	sub	sp, #44	; 0x2c
   1af88:	af00      	add	r7, sp, #0
   1af8a:	60f8      	str	r0, [r7, #12]
   1af8c:	607a      	str	r2, [r7, #4]
   1af8e:	230b      	movs	r3, #11
   1af90:	18fb      	adds	r3, r7, r3
   1af92:	1c0a      	adds	r2, r1, #0
   1af94:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   1af96:	68fb      	ldr	r3, [r7, #12]
   1af98:	2bfe      	cmp	r3, #254	; 0xfe
   1af9a:	d904      	bls.n	1afa6 <prvTraceStoreKernelCall+0x22>
   1af9c:	4b39      	ldr	r3, [pc, #228]	; (1b084 <prvTraceStoreKernelCall+0x100>)
   1af9e:	0018      	movs	r0, r3
   1afa0:	4b39      	ldr	r3, [pc, #228]	; (1b088 <prvTraceStoreKernelCall+0x104>)
   1afa2:	4798      	blx	r3
   1afa4:	e06b      	b.n	1b07e <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1afa6:	230b      	movs	r3, #11
   1afa8:	18fb      	adds	r3, r7, r3
   1afaa:	781b      	ldrb	r3, [r3, #0]
   1afac:	2b08      	cmp	r3, #8
   1afae:	d904      	bls.n	1afba <prvTraceStoreKernelCall+0x36>
   1afb0:	4b36      	ldr	r3, [pc, #216]	; (1b08c <prvTraceStoreKernelCall+0x108>)
   1afb2:	0018      	movs	r0, r3
   1afb4:	4b34      	ldr	r3, [pc, #208]	; (1b088 <prvTraceStoreKernelCall+0x104>)
   1afb6:	4798      	blx	r3
   1afb8:	e061      	b.n	1b07e <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   1afba:	4b35      	ldr	r3, [pc, #212]	; (1b090 <prvTraceStoreKernelCall+0x10c>)
   1afbc:	681a      	ldr	r2, [r3, #0]
   1afbe:	230b      	movs	r3, #11
   1afc0:	18fb      	adds	r3, r7, r3
   1afc2:	781b      	ldrb	r3, [r3, #0]
   1afc4:	2164      	movs	r1, #100	; 0x64
   1afc6:	18d3      	adds	r3, r2, r3
   1afc8:	185b      	adds	r3, r3, r1
   1afca:	781b      	ldrb	r3, [r3, #0]
   1afcc:	001a      	movs	r2, r3
   1afce:	687b      	ldr	r3, [r7, #4]
   1afd0:	429a      	cmp	r2, r3
   1afd2:	d204      	bcs.n	1afde <prvTraceStoreKernelCall+0x5a>
   1afd4:	4b2f      	ldr	r3, [pc, #188]	; (1b094 <prvTraceStoreKernelCall+0x110>)
   1afd6:	0018      	movs	r0, r3
   1afd8:	4b2b      	ldr	r3, [pc, #172]	; (1b088 <prvTraceStoreKernelCall+0x104>)
   1afda:	4798      	blx	r3
   1afdc:	e04f      	b.n	1b07e <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   1afde:	4b2e      	ldr	r3, [pc, #184]	; (1b098 <prvTraceStoreKernelCall+0x114>)
   1afe0:	681b      	ldr	r3, [r3, #0]
   1afe2:	2b00      	cmp	r3, #0
   1afe4:	d004      	beq.n	1aff0 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   1afe6:	4b2d      	ldr	r3, [pc, #180]	; (1b09c <prvTraceStoreKernelCall+0x118>)
   1afe8:	0018      	movs	r0, r3
   1afea:	4b27      	ldr	r3, [pc, #156]	; (1b088 <prvTraceStoreKernelCall+0x104>)
   1afec:	4798      	blx	r3
		return;
   1afee:	e046      	b.n	1b07e <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   1aff0:	4b2b      	ldr	r3, [pc, #172]	; (1b0a0 <prvTraceStoreKernelCall+0x11c>)
   1aff2:	781b      	ldrb	r3, [r3, #0]
   1aff4:	2b00      	cmp	r3, #0
   1aff6:	d041      	beq.n	1b07c <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1aff8:	f3ef 8310 	mrs	r3, PRIMASK
   1affc:	617b      	str	r3, [r7, #20]
  return(result);
   1affe:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   1b000:	627b      	str	r3, [r7, #36]	; 0x24
   1b002:	2301      	movs	r3, #1
   1b004:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b006:	69bb      	ldr	r3, [r7, #24]
   1b008:	f383 8810 	msr	PRIMASK, r3
   1b00c:	4b22      	ldr	r3, [pc, #136]	; (1b098 <prvTraceStoreKernelCall+0x114>)
   1b00e:	681b      	ldr	r3, [r3, #0]
   1b010:	1c5a      	adds	r2, r3, #1
   1b012:	4b21      	ldr	r3, [pc, #132]	; (1b098 <prvTraceStoreKernelCall+0x114>)
   1b014:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   1b016:	4b1e      	ldr	r3, [pc, #120]	; (1b090 <prvTraceStoreKernelCall+0x10c>)
   1b018:	681b      	ldr	r3, [r3, #0]
   1b01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b01c:	2b00      	cmp	r3, #0
   1b01e:	d022      	beq.n	1b066 <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1b020:	2322      	movs	r3, #34	; 0x22
   1b022:	18fc      	adds	r4, r7, r3
   1b024:	4b1f      	ldr	r3, [pc, #124]	; (1b0a4 <prvTraceStoreKernelCall+0x120>)
   1b026:	0018      	movs	r0, r3
   1b028:	4b1f      	ldr	r3, [pc, #124]	; (1b0a8 <prvTraceStoreKernelCall+0x124>)
   1b02a:	4798      	blx	r3
   1b02c:	0003      	movs	r3, r0
   1b02e:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   1b030:	2321      	movs	r3, #33	; 0x21
   1b032:	18fb      	adds	r3, r7, r3
   1b034:	687a      	ldr	r2, [r7, #4]
   1b036:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   1b038:	4b1c      	ldr	r3, [pc, #112]	; (1b0ac <prvTraceStoreKernelCall+0x128>)
   1b03a:	4798      	blx	r3
   1b03c:	0003      	movs	r3, r0
   1b03e:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   1b040:	69fb      	ldr	r3, [r7, #28]
   1b042:	2b00      	cmp	r3, #0
   1b044:	d00f      	beq.n	1b066 <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   1b046:	69fb      	ldr	r3, [r7, #28]
   1b048:	2222      	movs	r2, #34	; 0x22
   1b04a:	18ba      	adds	r2, r7, r2
   1b04c:	8812      	ldrh	r2, [r2, #0]
   1b04e:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   1b050:	68fb      	ldr	r3, [r7, #12]
   1b052:	b2da      	uxtb	r2, r3
   1b054:	69fb      	ldr	r3, [r7, #28]
   1b056:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   1b058:	69fb      	ldr	r3, [r7, #28]
   1b05a:	2221      	movs	r2, #33	; 0x21
   1b05c:	18ba      	adds	r2, r7, r2
   1b05e:	7812      	ldrb	r2, [r2, #0]
   1b060:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1b062:	4b13      	ldr	r3, [pc, #76]	; (1b0b0 <prvTraceStoreKernelCall+0x12c>)
   1b064:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1b066:	4b0c      	ldr	r3, [pc, #48]	; (1b098 <prvTraceStoreKernelCall+0x114>)
   1b068:	681b      	ldr	r3, [r3, #0]
   1b06a:	1e5a      	subs	r2, r3, #1
   1b06c:	4b0a      	ldr	r3, [pc, #40]	; (1b098 <prvTraceStoreKernelCall+0x114>)
   1b06e:	601a      	str	r2, [r3, #0]
   1b070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b072:	613b      	str	r3, [r7, #16]
   1b074:	693b      	ldr	r3, [r7, #16]
   1b076:	f383 8810 	msr	PRIMASK, r3
   1b07a:	e000      	b.n	1b07e <prvTraceStoreKernelCall+0xfa>
		return;
   1b07c:	46c0      	nop			; (mov r8, r8)
}
   1b07e:	46bd      	mov	sp, r7
   1b080:	b00b      	add	sp, #44	; 0x2c
   1b082:	bd90      	pop	{r4, r7, pc}
   1b084:	0003a90c 	.word	0x0003a90c
   1b088:	0001be29 	.word	0x0001be29
   1b08c:	0003a944 	.word	0x0003a944
   1b090:	20000c98 	.word	0x20000c98
   1b094:	0003a98c 	.word	0x0003a98c
   1b098:	20000bf0 	.word	0x20000bf0
   1b09c:	0003a9d4 	.word	0x0003a9d4
   1b0a0:	20000bfc 	.word	0x20000bfc
   1b0a4:	0000ffff 	.word	0x0000ffff
   1b0a8:	0001c03d 	.word	0x0001c03d
   1b0ac:	0001b9e1 	.word	0x0001b9e1
   1b0b0:	0001bfe5 	.word	0x0001bfe5

0001b0b4 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   1b0b4:	b580      	push	{r7, lr}
   1b0b6:	b08a      	sub	sp, #40	; 0x28
   1b0b8:	af00      	add	r7, sp, #0
   1b0ba:	60f8      	str	r0, [r7, #12]
   1b0bc:	607a      	str	r2, [r7, #4]
   1b0be:	603b      	str	r3, [r7, #0]
   1b0c0:	230b      	movs	r3, #11
   1b0c2:	18fb      	adds	r3, r7, r3
   1b0c4:	1c0a      	adds	r2, r1, #0
   1b0c6:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   1b0c8:	68fb      	ldr	r3, [r7, #12]
   1b0ca:	2bfe      	cmp	r3, #254	; 0xfe
   1b0cc:	d904      	bls.n	1b0d8 <prvTraceStoreKernelCallWithParam+0x24>
   1b0ce:	4b40      	ldr	r3, [pc, #256]	; (1b1d0 <prvTraceStoreKernelCallWithParam+0x11c>)
   1b0d0:	0018      	movs	r0, r3
   1b0d2:	4b40      	ldr	r3, [pc, #256]	; (1b1d4 <prvTraceStoreKernelCallWithParam+0x120>)
   1b0d4:	4798      	blx	r3
   1b0d6:	e077      	b.n	1b1c8 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1b0d8:	230b      	movs	r3, #11
   1b0da:	18fb      	adds	r3, r7, r3
   1b0dc:	781b      	ldrb	r3, [r3, #0]
   1b0de:	2b08      	cmp	r3, #8
   1b0e0:	d904      	bls.n	1b0ec <prvTraceStoreKernelCallWithParam+0x38>
   1b0e2:	4b3d      	ldr	r3, [pc, #244]	; (1b1d8 <prvTraceStoreKernelCallWithParam+0x124>)
   1b0e4:	0018      	movs	r0, r3
   1b0e6:	4b3b      	ldr	r3, [pc, #236]	; (1b1d4 <prvTraceStoreKernelCallWithParam+0x120>)
   1b0e8:	4798      	blx	r3
   1b0ea:	e06d      	b.n	1b1c8 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   1b0ec:	4b3b      	ldr	r3, [pc, #236]	; (1b1dc <prvTraceStoreKernelCallWithParam+0x128>)
   1b0ee:	681a      	ldr	r2, [r3, #0]
   1b0f0:	230b      	movs	r3, #11
   1b0f2:	18fb      	adds	r3, r7, r3
   1b0f4:	781b      	ldrb	r3, [r3, #0]
   1b0f6:	2164      	movs	r1, #100	; 0x64
   1b0f8:	18d3      	adds	r3, r2, r3
   1b0fa:	185b      	adds	r3, r3, r1
   1b0fc:	781b      	ldrb	r3, [r3, #0]
   1b0fe:	001a      	movs	r2, r3
   1b100:	687b      	ldr	r3, [r7, #4]
   1b102:	429a      	cmp	r2, r3
   1b104:	d204      	bcs.n	1b110 <prvTraceStoreKernelCallWithParam+0x5c>
   1b106:	4b36      	ldr	r3, [pc, #216]	; (1b1e0 <prvTraceStoreKernelCallWithParam+0x12c>)
   1b108:	0018      	movs	r0, r3
   1b10a:	4b32      	ldr	r3, [pc, #200]	; (1b1d4 <prvTraceStoreKernelCallWithParam+0x120>)
   1b10c:	4798      	blx	r3
   1b10e:	e05b      	b.n	1b1c8 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   1b110:	4b34      	ldr	r3, [pc, #208]	; (1b1e4 <prvTraceStoreKernelCallWithParam+0x130>)
   1b112:	681b      	ldr	r3, [r3, #0]
   1b114:	2b00      	cmp	r3, #0
   1b116:	d004      	beq.n	1b122 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   1b118:	4b33      	ldr	r3, [pc, #204]	; (1b1e8 <prvTraceStoreKernelCallWithParam+0x134>)
   1b11a:	0018      	movs	r0, r3
   1b11c:	4b2d      	ldr	r3, [pc, #180]	; (1b1d4 <prvTraceStoreKernelCallWithParam+0x120>)
   1b11e:	4798      	blx	r3
		return;
   1b120:	e052      	b.n	1b1c8 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b122:	f3ef 8310 	mrs	r3, PRIMASK
   1b126:	617b      	str	r3, [r7, #20]
  return(result);
   1b128:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   1b12a:	627b      	str	r3, [r7, #36]	; 0x24
   1b12c:	2301      	movs	r3, #1
   1b12e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b130:	69bb      	ldr	r3, [r7, #24]
   1b132:	f383 8810 	msr	PRIMASK, r3
   1b136:	4b2b      	ldr	r3, [pc, #172]	; (1b1e4 <prvTraceStoreKernelCallWithParam+0x130>)
   1b138:	681b      	ldr	r3, [r3, #0]
   1b13a:	1c5a      	adds	r2, r3, #1
   1b13c:	4b29      	ldr	r3, [pc, #164]	; (1b1e4 <prvTraceStoreKernelCallWithParam+0x130>)
   1b13e:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   1b140:	4b26      	ldr	r3, [pc, #152]	; (1b1dc <prvTraceStoreKernelCallWithParam+0x128>)
   1b142:	681b      	ldr	r3, [r3, #0]
   1b144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b146:	2b00      	cmp	r3, #0
   1b148:	d034      	beq.n	1b1b4 <prvTraceStoreKernelCallWithParam+0x100>
   1b14a:	4b28      	ldr	r3, [pc, #160]	; (1b1ec <prvTraceStoreKernelCallWithParam+0x138>)
   1b14c:	781b      	ldrb	r3, [r3, #0]
   1b14e:	2b00      	cmp	r3, #0
   1b150:	d030      	beq.n	1b1b4 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   1b152:	20ff      	movs	r0, #255	; 0xff
   1b154:	4b26      	ldr	r3, [pc, #152]	; (1b1f0 <prvTraceStoreKernelCallWithParam+0x13c>)
   1b156:	4798      	blx	r3
   1b158:	0003      	movs	r3, r0
   1b15a:	001a      	movs	r2, r3
   1b15c:	2323      	movs	r3, #35	; 0x23
   1b15e:	18fb      	adds	r3, r7, r3
   1b160:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   1b162:	683b      	ldr	r3, [r7, #0]
   1b164:	0019      	movs	r1, r3
   1b166:	20ff      	movs	r0, #255	; 0xff
   1b168:	4b22      	ldr	r3, [pc, #136]	; (1b1f4 <prvTraceStoreKernelCallWithParam+0x140>)
   1b16a:	4798      	blx	r3
   1b16c:	0002      	movs	r2, r0
   1b16e:	2322      	movs	r3, #34	; 0x22
   1b170:	18fb      	adds	r3, r7, r3
   1b172:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   1b174:	2321      	movs	r3, #33	; 0x21
   1b176:	18fb      	adds	r3, r7, r3
   1b178:	687a      	ldr	r2, [r7, #4]
   1b17a:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   1b17c:	4b1e      	ldr	r3, [pc, #120]	; (1b1f8 <prvTraceStoreKernelCallWithParam+0x144>)
   1b17e:	4798      	blx	r3
   1b180:	0003      	movs	r3, r0
   1b182:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   1b184:	69fb      	ldr	r3, [r7, #28]
   1b186:	2b00      	cmp	r3, #0
   1b188:	d014      	beq.n	1b1b4 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   1b18a:	69fb      	ldr	r3, [r7, #28]
   1b18c:	2223      	movs	r2, #35	; 0x23
   1b18e:	18ba      	adds	r2, r7, r2
   1b190:	7812      	ldrb	r2, [r2, #0]
   1b192:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   1b194:	68fb      	ldr	r3, [r7, #12]
   1b196:	b2da      	uxtb	r2, r3
   1b198:	69fb      	ldr	r3, [r7, #28]
   1b19a:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   1b19c:	69fb      	ldr	r3, [r7, #28]
   1b19e:	2221      	movs	r2, #33	; 0x21
   1b1a0:	18ba      	adds	r2, r7, r2
   1b1a2:	7812      	ldrb	r2, [r2, #0]
   1b1a4:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   1b1a6:	69fb      	ldr	r3, [r7, #28]
   1b1a8:	2222      	movs	r2, #34	; 0x22
   1b1aa:	18ba      	adds	r2, r7, r2
   1b1ac:	7812      	ldrb	r2, [r2, #0]
   1b1ae:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   1b1b0:	4b12      	ldr	r3, [pc, #72]	; (1b1fc <prvTraceStoreKernelCallWithParam+0x148>)
   1b1b2:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1b1b4:	4b0b      	ldr	r3, [pc, #44]	; (1b1e4 <prvTraceStoreKernelCallWithParam+0x130>)
   1b1b6:	681b      	ldr	r3, [r3, #0]
   1b1b8:	1e5a      	subs	r2, r3, #1
   1b1ba:	4b0a      	ldr	r3, [pc, #40]	; (1b1e4 <prvTraceStoreKernelCallWithParam+0x130>)
   1b1bc:	601a      	str	r2, [r3, #0]
   1b1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b1c0:	613b      	str	r3, [r7, #16]
   1b1c2:	693b      	ldr	r3, [r7, #16]
   1b1c4:	f383 8810 	msr	PRIMASK, r3
}
   1b1c8:	46bd      	mov	sp, r7
   1b1ca:	b00a      	add	sp, #40	; 0x28
   1b1cc:	bd80      	pop	{r7, pc}
   1b1ce:	46c0      	nop			; (mov r8, r8)
   1b1d0:	0003aa0c 	.word	0x0003aa0c
   1b1d4:	0001be29 	.word	0x0001be29
   1b1d8:	0003aa4c 	.word	0x0003aa4c
   1b1dc:	20000c98 	.word	0x20000c98
   1b1e0:	0003aa9c 	.word	0x0003aa9c
   1b1e4:	20000bf0 	.word	0x20000bf0
   1b1e8:	0003aaec 	.word	0x0003aaec
   1b1ec:	20000bfc 	.word	0x20000bfc
   1b1f0:	0001c03d 	.word	0x0001c03d
   1b1f4:	0001b201 	.word	0x0001b201
   1b1f8:	0001b9e1 	.word	0x0001b9e1
   1b1fc:	0001bfe5 	.word	0x0001bfe5

0001b200 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   1b200:	b580      	push	{r7, lr}
   1b202:	b084      	sub	sp, #16
   1b204:	af00      	add	r7, sp, #0
   1b206:	6078      	str	r0, [r7, #4]
   1b208:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   1b20a:	687b      	ldr	r3, [r7, #4]
   1b20c:	2bff      	cmp	r3, #255	; 0xff
   1b20e:	d009      	beq.n	1b224 <prvTraceGetParam+0x24>
   1b210:	687b      	ldr	r3, [r7, #4]
   1b212:	4a19      	ldr	r2, [pc, #100]	; (1b278 <prvTraceGetParam+0x78>)
   1b214:	4293      	cmp	r3, r2
   1b216:	d005      	beq.n	1b224 <prvTraceGetParam+0x24>
   1b218:	4b18      	ldr	r3, [pc, #96]	; (1b27c <prvTraceGetParam+0x7c>)
   1b21a:	0018      	movs	r0, r3
   1b21c:	4b18      	ldr	r3, [pc, #96]	; (1b280 <prvTraceGetParam+0x80>)
   1b21e:	4798      	blx	r3
   1b220:	683b      	ldr	r3, [r7, #0]
   1b222:	e024      	b.n	1b26e <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   1b224:	683a      	ldr	r2, [r7, #0]
   1b226:	687b      	ldr	r3, [r7, #4]
   1b228:	429a      	cmp	r2, r3
   1b22a:	d801      	bhi.n	1b230 <prvTraceGetParam+0x30>
	{
		return param;
   1b22c:	683b      	ldr	r3, [r7, #0]
   1b22e:	e01e      	b.n	1b26e <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   1b230:	4b14      	ldr	r3, [pc, #80]	; (1b284 <prvTraceGetParam+0x84>)
   1b232:	4798      	blx	r3
   1b234:	0003      	movs	r3, r0
   1b236:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   1b238:	68fb      	ldr	r3, [r7, #12]
   1b23a:	2b00      	cmp	r3, #0
   1b23c:	d014      	beq.n	1b268 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   1b23e:	68fb      	ldr	r3, [r7, #12]
   1b240:	2201      	movs	r2, #1
   1b242:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   1b244:	687b      	ldr	r3, [r7, #4]
   1b246:	43db      	mvns	r3, r3
   1b248:	683a      	ldr	r2, [r7, #0]
   1b24a:	4013      	ands	r3, r2
   1b24c:	0a1b      	lsrs	r3, r3, #8
   1b24e:	b2da      	uxtb	r2, r3
   1b250:	68fb      	ldr	r3, [r7, #12]
   1b252:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   1b254:	687b      	ldr	r3, [r7, #4]
   1b256:	43db      	mvns	r3, r3
   1b258:	683a      	ldr	r2, [r7, #0]
   1b25a:	4013      	ands	r3, r2
   1b25c:	0c1b      	lsrs	r3, r3, #16
   1b25e:	b29a      	uxth	r2, r3
   1b260:	68fb      	ldr	r3, [r7, #12]
   1b262:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1b264:	4b08      	ldr	r3, [pc, #32]	; (1b288 <prvTraceGetParam+0x88>)
   1b266:	4798      	blx	r3
		}

		return param & param_max;
   1b268:	683b      	ldr	r3, [r7, #0]
   1b26a:	687a      	ldr	r2, [r7, #4]
   1b26c:	4013      	ands	r3, r2
	}
}
   1b26e:	0018      	movs	r0, r3
   1b270:	46bd      	mov	sp, r7
   1b272:	b004      	add	sp, #16
   1b274:	bd80      	pop	{r7, pc}
   1b276:	46c0      	nop			; (mov r8, r8)
   1b278:	0000ffff 	.word	0x0000ffff
   1b27c:	0003ab24 	.word	0x0003ab24
   1b280:	0001be29 	.word	0x0001be29
   1b284:	0001b9e1 	.word	0x0001b9e1
   1b288:	0001bfe5 	.word	0x0001bfe5

0001b28c <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   1b28c:	b580      	push	{r7, lr}
   1b28e:	b08a      	sub	sp, #40	; 0x28
   1b290:	af00      	add	r7, sp, #0
   1b292:	6078      	str	r0, [r7, #4]
   1b294:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   1b296:	2326      	movs	r3, #38	; 0x26
   1b298:	18fb      	adds	r3, r7, r3
   1b29a:	2200      	movs	r2, #0
   1b29c:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   1b29e:	687b      	ldr	r3, [r7, #4]
   1b2a0:	2bfe      	cmp	r3, #254	; 0xfe
   1b2a2:	d904      	bls.n	1b2ae <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   1b2a4:	4b2d      	ldr	r3, [pc, #180]	; (1b35c <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   1b2a6:	0018      	movs	r0, r3
   1b2a8:	4b2d      	ldr	r3, [pc, #180]	; (1b360 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   1b2aa:	4798      	blx	r3
   1b2ac:	e053      	b.n	1b356 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   1b2ae:	4b2d      	ldr	r3, [pc, #180]	; (1b364 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1b2b0:	681b      	ldr	r3, [r3, #0]
   1b2b2:	2b00      	cmp	r3, #0
   1b2b4:	d004      	beq.n	1b2c0 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   1b2b6:	4b2c      	ldr	r3, [pc, #176]	; (1b368 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   1b2b8:	0018      	movs	r0, r3
   1b2ba:	4b29      	ldr	r3, [pc, #164]	; (1b360 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   1b2bc:	4798      	blx	r3
		return;
   1b2be:	e04a      	b.n	1b356 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b2c0:	f3ef 8310 	mrs	r3, PRIMASK
   1b2c4:	613b      	str	r3, [r7, #16]
  return(result);
   1b2c6:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   1b2c8:	623b      	str	r3, [r7, #32]
   1b2ca:	2301      	movs	r3, #1
   1b2cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b2ce:	697b      	ldr	r3, [r7, #20]
   1b2d0:	f383 8810 	msr	PRIMASK, r3
   1b2d4:	4b23      	ldr	r3, [pc, #140]	; (1b364 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1b2d6:	681b      	ldr	r3, [r3, #0]
   1b2d8:	1c5a      	adds	r2, r3, #1
   1b2da:	4b22      	ldr	r3, [pc, #136]	; (1b364 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1b2dc:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   1b2de:	4b23      	ldr	r3, [pc, #140]	; (1b36c <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   1b2e0:	681b      	ldr	r3, [r3, #0]
   1b2e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b2e4:	2b00      	cmp	r3, #0
   1b2e6:	d02c      	beq.n	1b342 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   1b2e8:	4b21      	ldr	r3, [pc, #132]	; (1b370 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   1b2ea:	781b      	ldrb	r3, [r3, #0]
   1b2ec:	2b00      	cmp	r3, #0
   1b2ee:	d028      	beq.n	1b342 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   1b2f0:	20ff      	movs	r0, #255	; 0xff
   1b2f2:	4b20      	ldr	r3, [pc, #128]	; (1b374 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   1b2f4:	4798      	blx	r3
   1b2f6:	0003      	movs	r3, r0
   1b2f8:	001a      	movs	r2, r3
   1b2fa:	231f      	movs	r3, #31
   1b2fc:	18fb      	adds	r3, r7, r3
   1b2fe:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   1b300:	683b      	ldr	r3, [r7, #0]
   1b302:	4a1d      	ldr	r2, [pc, #116]	; (1b378 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   1b304:	0019      	movs	r1, r3
   1b306:	0010      	movs	r0, r2
   1b308:	4b1c      	ldr	r3, [pc, #112]	; (1b37c <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   1b30a:	4798      	blx	r3
   1b30c:	0002      	movs	r2, r0
   1b30e:	2326      	movs	r3, #38	; 0x26
   1b310:	18fb      	adds	r3, r7, r3
   1b312:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   1b314:	4b1a      	ldr	r3, [pc, #104]	; (1b380 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   1b316:	4798      	blx	r3
   1b318:	0003      	movs	r3, r0
   1b31a:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   1b31c:	69bb      	ldr	r3, [r7, #24]
   1b31e:	2b00      	cmp	r3, #0
   1b320:	d00f      	beq.n	1b342 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   1b322:	69bb      	ldr	r3, [r7, #24]
   1b324:	221f      	movs	r2, #31
   1b326:	18ba      	adds	r2, r7, r2
   1b328:	7812      	ldrb	r2, [r2, #0]
   1b32a:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   1b32c:	687b      	ldr	r3, [r7, #4]
   1b32e:	b2da      	uxtb	r2, r3
   1b330:	69bb      	ldr	r3, [r7, #24]
   1b332:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   1b334:	69bb      	ldr	r3, [r7, #24]
   1b336:	2226      	movs	r2, #38	; 0x26
   1b338:	18ba      	adds	r2, r7, r2
   1b33a:	8812      	ldrh	r2, [r2, #0]
   1b33c:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1b33e:	4b11      	ldr	r3, [pc, #68]	; (1b384 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   1b340:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1b342:	4b08      	ldr	r3, [pc, #32]	; (1b364 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1b344:	681b      	ldr	r3, [r3, #0]
   1b346:	1e5a      	subs	r2, r3, #1
   1b348:	4b06      	ldr	r3, [pc, #24]	; (1b364 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1b34a:	601a      	str	r2, [r3, #0]
   1b34c:	6a3b      	ldr	r3, [r7, #32]
   1b34e:	60fb      	str	r3, [r7, #12]
   1b350:	68fb      	ldr	r3, [r7, #12]
   1b352:	f383 8810 	msr	PRIMASK, r3
}
   1b356:	46bd      	mov	sp, r7
   1b358:	b00a      	add	sp, #40	; 0x28
   1b35a:	bd80      	pop	{r7, pc}
   1b35c:	0003ab60 	.word	0x0003ab60
   1b360:	0001be29 	.word	0x0001be29
   1b364:	20000bf0 	.word	0x20000bf0
   1b368:	0003abb8 	.word	0x0003abb8
   1b36c:	20000c98 	.word	0x20000c98
   1b370:	20000bfc 	.word	0x20000bfc
   1b374:	0001c03d 	.word	0x0001c03d
   1b378:	0000ffff 	.word	0x0000ffff
   1b37c:	0001b201 	.word	0x0001b201
   1b380:	0001b9e1 	.word	0x0001b9e1
   1b384:	0001bfe5 	.word	0x0001bfe5

0001b388 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   1b388:	b590      	push	{r4, r7, lr}
   1b38a:	b089      	sub	sp, #36	; 0x24
   1b38c:	af00      	add	r7, sp, #0
   1b38e:	0002      	movs	r2, r0
   1b390:	1dfb      	adds	r3, r7, #7
   1b392:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   1b394:	1dfb      	adds	r3, r7, #7
   1b396:	781b      	ldrb	r3, [r3, #0]
   1b398:	2b0f      	cmp	r3, #15
   1b39a:	d904      	bls.n	1b3a6 <prvTraceStoreTaskswitch+0x1e>
   1b39c:	4b34      	ldr	r3, [pc, #208]	; (1b470 <prvTraceStoreTaskswitch+0xe8>)
   1b39e:	0018      	movs	r0, r3
   1b3a0:	4b34      	ldr	r3, [pc, #208]	; (1b474 <prvTraceStoreTaskswitch+0xec>)
   1b3a2:	4798      	blx	r3
   1b3a4:	e061      	b.n	1b46a <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b3a6:	f3ef 8310 	mrs	r3, PRIMASK
   1b3aa:	60fb      	str	r3, [r7, #12]
  return(result);
   1b3ac:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   1b3ae:	61fb      	str	r3, [r7, #28]
   1b3b0:	2301      	movs	r3, #1
   1b3b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b3b4:	693b      	ldr	r3, [r7, #16]
   1b3b6:	f383 8810 	msr	PRIMASK, r3
   1b3ba:	4b2f      	ldr	r3, [pc, #188]	; (1b478 <prvTraceStoreTaskswitch+0xf0>)
   1b3bc:	681b      	ldr	r3, [r3, #0]
   1b3be:	1c5a      	adds	r2, r3, #1
   1b3c0:	4b2d      	ldr	r3, [pc, #180]	; (1b478 <prvTraceStoreTaskswitch+0xf0>)
   1b3c2:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   1b3c4:	4b2d      	ldr	r3, [pc, #180]	; (1b47c <prvTraceStoreTaskswitch+0xf4>)
   1b3c6:	781b      	ldrb	r3, [r3, #0]
   1b3c8:	1dfa      	adds	r2, r7, #7
   1b3ca:	7812      	ldrb	r2, [r2, #0]
   1b3cc:	429a      	cmp	r2, r3
   1b3ce:	d042      	beq.n	1b456 <prvTraceStoreTaskswitch+0xce>
   1b3d0:	4b2b      	ldr	r3, [pc, #172]	; (1b480 <prvTraceStoreTaskswitch+0xf8>)
   1b3d2:	681b      	ldr	r3, [r3, #0]
   1b3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b3d6:	2b00      	cmp	r3, #0
   1b3d8:	d03d      	beq.n	1b456 <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   1b3da:	4b2a      	ldr	r3, [pc, #168]	; (1b484 <prvTraceStoreTaskswitch+0xfc>)
   1b3dc:	2200      	movs	r2, #0
   1b3de:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1b3e0:	231a      	movs	r3, #26
   1b3e2:	18fc      	adds	r4, r7, r3
   1b3e4:	4b28      	ldr	r3, [pc, #160]	; (1b488 <prvTraceStoreTaskswitch+0x100>)
   1b3e6:	0018      	movs	r0, r3
   1b3e8:	4b28      	ldr	r3, [pc, #160]	; (1b48c <prvTraceStoreTaskswitch+0x104>)
   1b3ea:	4798      	blx	r3
   1b3ec:	0003      	movs	r3, r0
   1b3ee:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   1b3f0:	4b22      	ldr	r3, [pc, #136]	; (1b47c <prvTraceStoreTaskswitch+0xf4>)
   1b3f2:	1dfa      	adds	r2, r7, #7
   1b3f4:	7812      	ldrb	r2, [r2, #0]
   1b3f6:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   1b3f8:	2319      	movs	r3, #25
   1b3fa:	18fb      	adds	r3, r7, r3
   1b3fc:	4a1f      	ldr	r2, [pc, #124]	; (1b47c <prvTraceStoreTaskswitch+0xf4>)
   1b3fe:	7812      	ldrb	r2, [r2, #0]
   1b400:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   1b402:	4b23      	ldr	r3, [pc, #140]	; (1b490 <prvTraceStoreTaskswitch+0x108>)
   1b404:	4798      	blx	r3
   1b406:	0003      	movs	r3, r0
   1b408:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   1b40a:	697b      	ldr	r3, [r7, #20]
   1b40c:	2b00      	cmp	r3, #0
   1b40e:	d022      	beq.n	1b456 <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   1b410:	4b1a      	ldr	r3, [pc, #104]	; (1b47c <prvTraceStoreTaskswitch+0xf4>)
   1b412:	781b      	ldrb	r3, [r3, #0]
   1b414:	0019      	movs	r1, r3
   1b416:	2003      	movs	r0, #3
   1b418:	4b1e      	ldr	r3, [pc, #120]	; (1b494 <prvTraceStoreTaskswitch+0x10c>)
   1b41a:	4798      	blx	r3
   1b41c:	0003      	movs	r3, r0
   1b41e:	2b01      	cmp	r3, #1
   1b420:	d103      	bne.n	1b42a <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   1b422:	697b      	ldr	r3, [r7, #20]
   1b424:	2207      	movs	r2, #7
   1b426:	701a      	strb	r2, [r3, #0]
   1b428:	e002      	b.n	1b430 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   1b42a:	697b      	ldr	r3, [r7, #20]
   1b42c:	2206      	movs	r2, #6
   1b42e:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   1b430:	697b      	ldr	r3, [r7, #20]
   1b432:	221a      	movs	r2, #26
   1b434:	18ba      	adds	r2, r7, r2
   1b436:	8812      	ldrh	r2, [r2, #0]
   1b438:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   1b43a:	697b      	ldr	r3, [r7, #20]
   1b43c:	2219      	movs	r2, #25
   1b43e:	18ba      	adds	r2, r7, r2
   1b440:	7812      	ldrb	r2, [r2, #0]
   1b442:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   1b444:	4b0d      	ldr	r3, [pc, #52]	; (1b47c <prvTraceStoreTaskswitch+0xf4>)
   1b446:	781b      	ldrb	r3, [r3, #0]
   1b448:	2201      	movs	r2, #1
   1b44a:	0019      	movs	r1, r3
   1b44c:	2003      	movs	r0, #3
   1b44e:	4b12      	ldr	r3, [pc, #72]	; (1b498 <prvTraceStoreTaskswitch+0x110>)
   1b450:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   1b452:	4b12      	ldr	r3, [pc, #72]	; (1b49c <prvTraceStoreTaskswitch+0x114>)
   1b454:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   1b456:	4b08      	ldr	r3, [pc, #32]	; (1b478 <prvTraceStoreTaskswitch+0xf0>)
   1b458:	681b      	ldr	r3, [r3, #0]
   1b45a:	1e5a      	subs	r2, r3, #1
   1b45c:	4b06      	ldr	r3, [pc, #24]	; (1b478 <prvTraceStoreTaskswitch+0xf0>)
   1b45e:	601a      	str	r2, [r3, #0]
   1b460:	69fb      	ldr	r3, [r7, #28]
   1b462:	60bb      	str	r3, [r7, #8]
   1b464:	68bb      	ldr	r3, [r7, #8]
   1b466:	f383 8810 	msr	PRIMASK, r3
}
   1b46a:	46bd      	mov	sp, r7
   1b46c:	b009      	add	sp, #36	; 0x24
   1b46e:	bd90      	pop	{r4, r7, pc}
   1b470:	0003abf0 	.word	0x0003abf0
   1b474:	0001be29 	.word	0x0001be29
   1b478:	20000bf0 	.word	0x20000bf0
   1b47c:	20000bfc 	.word	0x20000bfc
   1b480:	20000c98 	.word	0x20000c98
   1b484:	20000bdc 	.word	0x20000bdc
   1b488:	0000ffff 	.word	0x0000ffff
   1b48c:	0001c03d 	.word	0x0001c03d
   1b490:	0001b9e1 	.word	0x0001b9e1
   1b494:	0001b685 	.word	0x0001b685
   1b498:	0001b5e1 	.word	0x0001b5e1
   1b49c:	0001bfe5 	.word	0x0001bfe5

0001b4a0 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   1b4a0:	b590      	push	{r4, r7, lr}
   1b4a2:	b083      	sub	sp, #12
   1b4a4:	af00      	add	r7, sp, #0
   1b4a6:	0004      	movs	r4, r0
   1b4a8:	0008      	movs	r0, r1
   1b4aa:	0011      	movs	r1, r2
   1b4ac:	1dfb      	adds	r3, r7, #7
   1b4ae:	1c22      	adds	r2, r4, #0
   1b4b0:	701a      	strb	r2, [r3, #0]
   1b4b2:	1dbb      	adds	r3, r7, #6
   1b4b4:	1c02      	adds	r2, r0, #0
   1b4b6:	701a      	strb	r2, [r3, #0]
   1b4b8:	1d7b      	adds	r3, r7, #5
   1b4ba:	1c0a      	adds	r2, r1, #0
   1b4bc:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1b4be:	1dfb      	adds	r3, r7, #7
   1b4c0:	781b      	ldrb	r3, [r3, #0]
   1b4c2:	2b08      	cmp	r3, #8
   1b4c4:	d904      	bls.n	1b4d0 <prvTraceSetPriorityProperty+0x30>
   1b4c6:	4b1a      	ldr	r3, [pc, #104]	; (1b530 <prvTraceSetPriorityProperty+0x90>)
   1b4c8:	0018      	movs	r0, r3
   1b4ca:	4b1a      	ldr	r3, [pc, #104]	; (1b534 <prvTraceSetPriorityProperty+0x94>)
   1b4cc:	4798      	blx	r3
   1b4ce:	e02c      	b.n	1b52a <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1b4d0:	4b19      	ldr	r3, [pc, #100]	; (1b538 <prvTraceSetPriorityProperty+0x98>)
   1b4d2:	681a      	ldr	r2, [r3, #0]
   1b4d4:	1dfb      	adds	r3, r7, #7
   1b4d6:	781b      	ldrb	r3, [r3, #0]
   1b4d8:	2164      	movs	r1, #100	; 0x64
   1b4da:	18d3      	adds	r3, r2, r3
   1b4dc:	185b      	adds	r3, r3, r1
   1b4de:	781b      	ldrb	r3, [r3, #0]
   1b4e0:	1dba      	adds	r2, r7, #6
   1b4e2:	7812      	ldrb	r2, [r2, #0]
   1b4e4:	429a      	cmp	r2, r3
   1b4e6:	d904      	bls.n	1b4f2 <prvTraceSetPriorityProperty+0x52>
   1b4e8:	4b14      	ldr	r3, [pc, #80]	; (1b53c <prvTraceSetPriorityProperty+0x9c>)
   1b4ea:	0018      	movs	r0, r3
   1b4ec:	4b11      	ldr	r3, [pc, #68]	; (1b534 <prvTraceSetPriorityProperty+0x94>)
   1b4ee:	4798      	blx	r3
   1b4f0:	e01b      	b.n	1b52a <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   1b4f2:	4b11      	ldr	r3, [pc, #68]	; (1b538 <prvTraceSetPriorityProperty+0x98>)
   1b4f4:	681c      	ldr	r4, [r3, #0]
   1b4f6:	1dfb      	adds	r3, r7, #7
   1b4f8:	781a      	ldrb	r2, [r3, #0]
   1b4fa:	1dbb      	adds	r3, r7, #6
   1b4fc:	781b      	ldrb	r3, [r3, #0]
   1b4fe:	0011      	movs	r1, r2
   1b500:	0018      	movs	r0, r3
   1b502:	4b0f      	ldr	r3, [pc, #60]	; (1b540 <prvTraceSetPriorityProperty+0xa0>)
   1b504:	4798      	blx	r3
   1b506:	0003      	movs	r3, r0
   1b508:	0018      	movs	r0, r3
   1b50a:	4b0b      	ldr	r3, [pc, #44]	; (1b538 <prvTraceSetPriorityProperty+0x98>)
   1b50c:	681a      	ldr	r2, [r3, #0]
   1b50e:	1dfb      	adds	r3, r7, #7
   1b510:	781b      	ldrb	r3, [r3, #0]
   1b512:	2170      	movs	r1, #112	; 0x70
   1b514:	18d3      	adds	r3, r2, r3
   1b516:	185b      	adds	r3, r3, r1
   1b518:	781b      	ldrb	r3, [r3, #0]
   1b51a:	18c3      	adds	r3, r0, r3
   1b51c:	3301      	adds	r3, #1
   1b51e:	229c      	movs	r2, #156	; 0x9c
   1b520:	18e3      	adds	r3, r4, r3
   1b522:	189b      	adds	r3, r3, r2
   1b524:	1d7a      	adds	r2, r7, #5
   1b526:	7812      	ldrb	r2, [r2, #0]
   1b528:	701a      	strb	r2, [r3, #0]
}
   1b52a:	46bd      	mov	sp, r7
   1b52c:	b003      	add	sp, #12
   1b52e:	bd90      	pop	{r4, r7, pc}
   1b530:	0003ad84 	.word	0x0003ad84
   1b534:	0001be29 	.word	0x0001be29
   1b538:	20000c98 	.word	0x20000c98
   1b53c:	0003add0 	.word	0x0003add0
   1b540:	0001ba35 	.word	0x0001ba35

0001b544 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   1b544:	b590      	push	{r4, r7, lr}
   1b546:	b083      	sub	sp, #12
   1b548:	af00      	add	r7, sp, #0
   1b54a:	0002      	movs	r2, r0
   1b54c:	1dfb      	adds	r3, r7, #7
   1b54e:	701a      	strb	r2, [r3, #0]
   1b550:	1dbb      	adds	r3, r7, #6
   1b552:	1c0a      	adds	r2, r1, #0
   1b554:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1b556:	1dfb      	adds	r3, r7, #7
   1b558:	781b      	ldrb	r3, [r3, #0]
   1b55a:	2b08      	cmp	r3, #8
   1b55c:	d905      	bls.n	1b56a <prvTraceGetPriorityProperty+0x26>
   1b55e:	4b1b      	ldr	r3, [pc, #108]	; (1b5cc <prvTraceGetPriorityProperty+0x88>)
   1b560:	0018      	movs	r0, r3
   1b562:	4b1b      	ldr	r3, [pc, #108]	; (1b5d0 <prvTraceGetPriorityProperty+0x8c>)
   1b564:	4798      	blx	r3
   1b566:	2300      	movs	r3, #0
   1b568:	e02b      	b.n	1b5c2 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1b56a:	4b1a      	ldr	r3, [pc, #104]	; (1b5d4 <prvTraceGetPriorityProperty+0x90>)
   1b56c:	681a      	ldr	r2, [r3, #0]
   1b56e:	1dfb      	adds	r3, r7, #7
   1b570:	781b      	ldrb	r3, [r3, #0]
   1b572:	2164      	movs	r1, #100	; 0x64
   1b574:	18d3      	adds	r3, r2, r3
   1b576:	185b      	adds	r3, r3, r1
   1b578:	781b      	ldrb	r3, [r3, #0]
   1b57a:	1dba      	adds	r2, r7, #6
   1b57c:	7812      	ldrb	r2, [r2, #0]
   1b57e:	429a      	cmp	r2, r3
   1b580:	d905      	bls.n	1b58e <prvTraceGetPriorityProperty+0x4a>
   1b582:	4b15      	ldr	r3, [pc, #84]	; (1b5d8 <prvTraceGetPriorityProperty+0x94>)
   1b584:	0018      	movs	r0, r3
   1b586:	4b12      	ldr	r3, [pc, #72]	; (1b5d0 <prvTraceGetPriorityProperty+0x8c>)
   1b588:	4798      	blx	r3
   1b58a:	2300      	movs	r3, #0
   1b58c:	e019      	b.n	1b5c2 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   1b58e:	4b11      	ldr	r3, [pc, #68]	; (1b5d4 <prvTraceGetPriorityProperty+0x90>)
   1b590:	681c      	ldr	r4, [r3, #0]
   1b592:	1dfb      	adds	r3, r7, #7
   1b594:	781a      	ldrb	r2, [r3, #0]
   1b596:	1dbb      	adds	r3, r7, #6
   1b598:	781b      	ldrb	r3, [r3, #0]
   1b59a:	0011      	movs	r1, r2
   1b59c:	0018      	movs	r0, r3
   1b59e:	4b0f      	ldr	r3, [pc, #60]	; (1b5dc <prvTraceGetPriorityProperty+0x98>)
   1b5a0:	4798      	blx	r3
   1b5a2:	0003      	movs	r3, r0
   1b5a4:	0018      	movs	r0, r3
   1b5a6:	4b0b      	ldr	r3, [pc, #44]	; (1b5d4 <prvTraceGetPriorityProperty+0x90>)
   1b5a8:	681a      	ldr	r2, [r3, #0]
   1b5aa:	1dfb      	adds	r3, r7, #7
   1b5ac:	781b      	ldrb	r3, [r3, #0]
   1b5ae:	2170      	movs	r1, #112	; 0x70
   1b5b0:	18d3      	adds	r3, r2, r3
   1b5b2:	185b      	adds	r3, r3, r1
   1b5b4:	781b      	ldrb	r3, [r3, #0]
   1b5b6:	18c3      	adds	r3, r0, r3
   1b5b8:	3301      	adds	r3, #1
   1b5ba:	229c      	movs	r2, #156	; 0x9c
   1b5bc:	18e3      	adds	r3, r4, r3
   1b5be:	189b      	adds	r3, r3, r2
   1b5c0:	781b      	ldrb	r3, [r3, #0]
}
   1b5c2:	0018      	movs	r0, r3
   1b5c4:	46bd      	mov	sp, r7
   1b5c6:	b003      	add	sp, #12
   1b5c8:	bd90      	pop	{r4, r7, pc}
   1b5ca:	46c0      	nop			; (mov r8, r8)
   1b5cc:	0003ae10 	.word	0x0003ae10
   1b5d0:	0001be29 	.word	0x0001be29
   1b5d4:	20000c98 	.word	0x20000c98
   1b5d8:	0003ae5c 	.word	0x0003ae5c
   1b5dc:	0001ba35 	.word	0x0001ba35

0001b5e0 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   1b5e0:	b590      	push	{r4, r7, lr}
   1b5e2:	b083      	sub	sp, #12
   1b5e4:	af00      	add	r7, sp, #0
   1b5e6:	0004      	movs	r4, r0
   1b5e8:	0008      	movs	r0, r1
   1b5ea:	0011      	movs	r1, r2
   1b5ec:	1dfb      	adds	r3, r7, #7
   1b5ee:	1c22      	adds	r2, r4, #0
   1b5f0:	701a      	strb	r2, [r3, #0]
   1b5f2:	1dbb      	adds	r3, r7, #6
   1b5f4:	1c02      	adds	r2, r0, #0
   1b5f6:	701a      	strb	r2, [r3, #0]
   1b5f8:	1d7b      	adds	r3, r7, #5
   1b5fa:	1c0a      	adds	r2, r1, #0
   1b5fc:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1b5fe:	1dfb      	adds	r3, r7, #7
   1b600:	781b      	ldrb	r3, [r3, #0]
   1b602:	2b08      	cmp	r3, #8
   1b604:	d904      	bls.n	1b610 <prvTraceSetObjectState+0x30>
   1b606:	4b1a      	ldr	r3, [pc, #104]	; (1b670 <prvTraceSetObjectState+0x90>)
   1b608:	0018      	movs	r0, r3
   1b60a:	4b1a      	ldr	r3, [pc, #104]	; (1b674 <prvTraceSetObjectState+0x94>)
   1b60c:	4798      	blx	r3
   1b60e:	e02b      	b.n	1b668 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1b610:	4b19      	ldr	r3, [pc, #100]	; (1b678 <prvTraceSetObjectState+0x98>)
   1b612:	681a      	ldr	r2, [r3, #0]
   1b614:	1dfb      	adds	r3, r7, #7
   1b616:	781b      	ldrb	r3, [r3, #0]
   1b618:	2164      	movs	r1, #100	; 0x64
   1b61a:	18d3      	adds	r3, r2, r3
   1b61c:	185b      	adds	r3, r3, r1
   1b61e:	781b      	ldrb	r3, [r3, #0]
   1b620:	1dba      	adds	r2, r7, #6
   1b622:	7812      	ldrb	r2, [r2, #0]
   1b624:	429a      	cmp	r2, r3
   1b626:	d904      	bls.n	1b632 <prvTraceSetObjectState+0x52>
   1b628:	4b14      	ldr	r3, [pc, #80]	; (1b67c <prvTraceSetObjectState+0x9c>)
   1b62a:	0018      	movs	r0, r3
   1b62c:	4b11      	ldr	r3, [pc, #68]	; (1b674 <prvTraceSetObjectState+0x94>)
   1b62e:	4798      	blx	r3
   1b630:	e01a      	b.n	1b668 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   1b632:	4b11      	ldr	r3, [pc, #68]	; (1b678 <prvTraceSetObjectState+0x98>)
   1b634:	681c      	ldr	r4, [r3, #0]
   1b636:	1dfb      	adds	r3, r7, #7
   1b638:	781a      	ldrb	r2, [r3, #0]
   1b63a:	1dbb      	adds	r3, r7, #6
   1b63c:	781b      	ldrb	r3, [r3, #0]
   1b63e:	0011      	movs	r1, r2
   1b640:	0018      	movs	r0, r3
   1b642:	4b0f      	ldr	r3, [pc, #60]	; (1b680 <prvTraceSetObjectState+0xa0>)
   1b644:	4798      	blx	r3
   1b646:	0003      	movs	r3, r0
   1b648:	0018      	movs	r0, r3
   1b64a:	4b0b      	ldr	r3, [pc, #44]	; (1b678 <prvTraceSetObjectState+0x98>)
   1b64c:	681a      	ldr	r2, [r3, #0]
   1b64e:	1dfb      	adds	r3, r7, #7
   1b650:	781b      	ldrb	r3, [r3, #0]
   1b652:	2170      	movs	r1, #112	; 0x70
   1b654:	18d3      	adds	r3, r2, r3
   1b656:	185b      	adds	r3, r3, r1
   1b658:	781b      	ldrb	r3, [r3, #0]
   1b65a:	18c3      	adds	r3, r0, r3
   1b65c:	229c      	movs	r2, #156	; 0x9c
   1b65e:	18e3      	adds	r3, r4, r3
   1b660:	189b      	adds	r3, r3, r2
   1b662:	1d7a      	adds	r2, r7, #5
   1b664:	7812      	ldrb	r2, [r2, #0]
   1b666:	701a      	strb	r2, [r3, #0]
}
   1b668:	46bd      	mov	sp, r7
   1b66a:	b003      	add	sp, #12
   1b66c:	bd90      	pop	{r4, r7, pc}
   1b66e:	46c0      	nop			; (mov r8, r8)
   1b670:	0003ae9c 	.word	0x0003ae9c
   1b674:	0001be29 	.word	0x0001be29
   1b678:	20000c98 	.word	0x20000c98
   1b67c:	0003aee0 	.word	0x0003aee0
   1b680:	0001ba35 	.word	0x0001ba35

0001b684 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   1b684:	b590      	push	{r4, r7, lr}
   1b686:	b083      	sub	sp, #12
   1b688:	af00      	add	r7, sp, #0
   1b68a:	0002      	movs	r2, r0
   1b68c:	1dfb      	adds	r3, r7, #7
   1b68e:	701a      	strb	r2, [r3, #0]
   1b690:	1dbb      	adds	r3, r7, #6
   1b692:	1c0a      	adds	r2, r1, #0
   1b694:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1b696:	1dfb      	adds	r3, r7, #7
   1b698:	781b      	ldrb	r3, [r3, #0]
   1b69a:	2b08      	cmp	r3, #8
   1b69c:	d905      	bls.n	1b6aa <prvTraceGetObjectState+0x26>
   1b69e:	4b1a      	ldr	r3, [pc, #104]	; (1b708 <prvTraceGetObjectState+0x84>)
   1b6a0:	0018      	movs	r0, r3
   1b6a2:	4b1a      	ldr	r3, [pc, #104]	; (1b70c <prvTraceGetObjectState+0x88>)
   1b6a4:	4798      	blx	r3
   1b6a6:	2300      	movs	r3, #0
   1b6a8:	e02a      	b.n	1b700 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1b6aa:	4b19      	ldr	r3, [pc, #100]	; (1b710 <prvTraceGetObjectState+0x8c>)
   1b6ac:	681a      	ldr	r2, [r3, #0]
   1b6ae:	1dfb      	adds	r3, r7, #7
   1b6b0:	781b      	ldrb	r3, [r3, #0]
   1b6b2:	2164      	movs	r1, #100	; 0x64
   1b6b4:	18d3      	adds	r3, r2, r3
   1b6b6:	185b      	adds	r3, r3, r1
   1b6b8:	781b      	ldrb	r3, [r3, #0]
   1b6ba:	1dba      	adds	r2, r7, #6
   1b6bc:	7812      	ldrb	r2, [r2, #0]
   1b6be:	429a      	cmp	r2, r3
   1b6c0:	d905      	bls.n	1b6ce <prvTraceGetObjectState+0x4a>
   1b6c2:	4b14      	ldr	r3, [pc, #80]	; (1b714 <prvTraceGetObjectState+0x90>)
   1b6c4:	0018      	movs	r0, r3
   1b6c6:	4b11      	ldr	r3, [pc, #68]	; (1b70c <prvTraceGetObjectState+0x88>)
   1b6c8:	4798      	blx	r3
   1b6ca:	2300      	movs	r3, #0
   1b6cc:	e018      	b.n	1b700 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   1b6ce:	4b10      	ldr	r3, [pc, #64]	; (1b710 <prvTraceGetObjectState+0x8c>)
   1b6d0:	681c      	ldr	r4, [r3, #0]
   1b6d2:	1dfb      	adds	r3, r7, #7
   1b6d4:	781a      	ldrb	r2, [r3, #0]
   1b6d6:	1dbb      	adds	r3, r7, #6
   1b6d8:	781b      	ldrb	r3, [r3, #0]
   1b6da:	0011      	movs	r1, r2
   1b6dc:	0018      	movs	r0, r3
   1b6de:	4b0e      	ldr	r3, [pc, #56]	; (1b718 <prvTraceGetObjectState+0x94>)
   1b6e0:	4798      	blx	r3
   1b6e2:	0003      	movs	r3, r0
   1b6e4:	0018      	movs	r0, r3
   1b6e6:	4b0a      	ldr	r3, [pc, #40]	; (1b710 <prvTraceGetObjectState+0x8c>)
   1b6e8:	681a      	ldr	r2, [r3, #0]
   1b6ea:	1dfb      	adds	r3, r7, #7
   1b6ec:	781b      	ldrb	r3, [r3, #0]
   1b6ee:	2170      	movs	r1, #112	; 0x70
   1b6f0:	18d3      	adds	r3, r2, r3
   1b6f2:	185b      	adds	r3, r3, r1
   1b6f4:	781b      	ldrb	r3, [r3, #0]
   1b6f6:	18c3      	adds	r3, r0, r3
   1b6f8:	229c      	movs	r2, #156	; 0x9c
   1b6fa:	18e3      	adds	r3, r4, r3
   1b6fc:	189b      	adds	r3, r3, r2
   1b6fe:	781b      	ldrb	r3, [r3, #0]
}
   1b700:	0018      	movs	r0, r3
   1b702:	46bd      	mov	sp, r7
   1b704:	b003      	add	sp, #12
   1b706:	bd90      	pop	{r4, r7, pc}
   1b708:	0003af1c 	.word	0x0003af1c
   1b70c:	0001be29 	.word	0x0001be29
   1b710:	20000c98 	.word	0x20000c98
   1b714:	0003af60 	.word	0x0003af60
   1b718:	0001ba35 	.word	0x0001ba35

0001b71c <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   1b71c:	b590      	push	{r4, r7, lr}
   1b71e:	b083      	sub	sp, #12
   1b720:	af00      	add	r7, sp, #0
   1b722:	0002      	movs	r2, r0
   1b724:	1dfb      	adds	r3, r7, #7
   1b726:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   1b728:	4b11      	ldr	r3, [pc, #68]	; (1b770 <prvTraceSetTaskInstanceFinished+0x54>)
   1b72a:	681b      	ldr	r3, [r3, #0]
   1b72c:	2267      	movs	r2, #103	; 0x67
   1b72e:	5c9b      	ldrb	r3, [r3, r2]
   1b730:	1dfa      	adds	r2, r7, #7
   1b732:	7812      	ldrb	r2, [r2, #0]
   1b734:	429a      	cmp	r2, r3
   1b736:	d904      	bls.n	1b742 <prvTraceSetTaskInstanceFinished+0x26>
   1b738:	4b0e      	ldr	r3, [pc, #56]	; (1b774 <prvTraceSetTaskInstanceFinished+0x58>)
   1b73a:	0018      	movs	r0, r3
   1b73c:	4b0e      	ldr	r3, [pc, #56]	; (1b778 <prvTraceSetTaskInstanceFinished+0x5c>)
   1b73e:	4798      	blx	r3
   1b740:	e013      	b.n	1b76a <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   1b742:	4b0b      	ldr	r3, [pc, #44]	; (1b770 <prvTraceSetTaskInstanceFinished+0x54>)
   1b744:	681c      	ldr	r4, [r3, #0]
   1b746:	1dfb      	adds	r3, r7, #7
   1b748:	781b      	ldrb	r3, [r3, #0]
   1b74a:	2103      	movs	r1, #3
   1b74c:	0018      	movs	r0, r3
   1b74e:	4b0b      	ldr	r3, [pc, #44]	; (1b77c <prvTraceSetTaskInstanceFinished+0x60>)
   1b750:	4798      	blx	r3
   1b752:	0003      	movs	r3, r0
   1b754:	0019      	movs	r1, r3
   1b756:	4b06      	ldr	r3, [pc, #24]	; (1b770 <prvTraceSetTaskInstanceFinished+0x54>)
   1b758:	681b      	ldr	r3, [r3, #0]
   1b75a:	2273      	movs	r2, #115	; 0x73
   1b75c:	5c9b      	ldrb	r3, [r3, r2]
   1b75e:	18cb      	adds	r3, r1, r3
   1b760:	229c      	movs	r2, #156	; 0x9c
   1b762:	18e3      	adds	r3, r4, r3
   1b764:	189b      	adds	r3, r3, r2
   1b766:	2200      	movs	r2, #0
   1b768:	701a      	strb	r2, [r3, #0]
#endif
}
   1b76a:	46bd      	mov	sp, r7
   1b76c:	b003      	add	sp, #12
   1b76e:	bd90      	pop	{r4, r7, pc}
   1b770:	20000c98 	.word	0x20000c98
   1b774:	0003af9c 	.word	0x0003af9c
   1b778:	0001be29 	.word	0x0001be29
   1b77c:	0001ba35 	.word	0x0001ba35

0001b780 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   1b780:	b580      	push	{r7, lr}
   1b782:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   1b784:	4b75      	ldr	r3, [pc, #468]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b786:	681b      	ldr	r3, [r3, #0]
   1b788:	2b00      	cmp	r3, #0
   1b78a:	d103      	bne.n	1b794 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   1b78c:	4b73      	ldr	r3, [pc, #460]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b78e:	4a74      	ldr	r2, [pc, #464]	; (1b960 <prvTraceInitTraceData+0x1e0>)
   1b790:	601a      	str	r2, [r3, #0]
   1b792:	e006      	b.n	1b7a2 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   1b794:	4b71      	ldr	r3, [pc, #452]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b796:	681b      	ldr	r3, [r3, #0]
   1b798:	781b      	ldrb	r3, [r3, #0]
   1b79a:	b2db      	uxtb	r3, r3
   1b79c:	2b01      	cmp	r3, #1
   1b79e:	d100      	bne.n	1b7a2 <prvTraceInitTraceData+0x22>
   1b7a0:	e0d8      	b.n	1b954 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   1b7a2:	4b70      	ldr	r3, [pc, #448]	; (1b964 <prvTraceInitTraceData+0x1e4>)
   1b7a4:	681a      	ldr	r2, [r3, #0]
   1b7a6:	4b70      	ldr	r3, [pc, #448]	; (1b968 <prvTraceInitTraceData+0x1e8>)
   1b7a8:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   1b7aa:	4b6c      	ldr	r3, [pc, #432]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b7ac:	6818      	ldr	r0, [r3, #0]
   1b7ae:	23bd      	movs	r3, #189	; 0xbd
   1b7b0:	011b      	lsls	r3, r3, #4
   1b7b2:	001a      	movs	r2, r3
   1b7b4:	2100      	movs	r1, #0
   1b7b6:	4b6d      	ldr	r3, [pc, #436]	; (1b96c <prvTraceInitTraceData+0x1ec>)
   1b7b8:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   1b7ba:	4b68      	ldr	r3, [pc, #416]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b7bc:	681b      	ldr	r3, [r3, #0]
   1b7be:	4a6c      	ldr	r2, [pc, #432]	; (1b970 <prvTraceInitTraceData+0x1f0>)
   1b7c0:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   1b7c2:	4b66      	ldr	r3, [pc, #408]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b7c4:	681b      	ldr	r3, [r3, #0]
   1b7c6:	2205      	movs	r2, #5
   1b7c8:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   1b7ca:	4b64      	ldr	r3, [pc, #400]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b7cc:	681b      	ldr	r3, [r3, #0]
   1b7ce:	2200      	movs	r2, #0
   1b7d0:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   1b7d2:	4b62      	ldr	r3, [pc, #392]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b7d4:	681b      	ldr	r3, [r3, #0]
   1b7d6:	22bd      	movs	r2, #189	; 0xbd
   1b7d8:	0112      	lsls	r2, r2, #4
   1b7da:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   1b7dc:	4b5f      	ldr	r3, [pc, #380]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b7de:	681b      	ldr	r3, [r3, #0]
   1b7e0:	2296      	movs	r2, #150	; 0x96
   1b7e2:	0052      	lsls	r2, r2, #1
   1b7e4:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   1b7e6:	4b5d      	ldr	r3, [pc, #372]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b7e8:	681b      	ldr	r3, [r3, #0]
   1b7ea:	4a62      	ldr	r2, [pc, #392]	; (1b974 <prvTraceInitTraceData+0x1f4>)
   1b7ec:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   1b7ee:	4b5b      	ldr	r3, [pc, #364]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b7f0:	681b      	ldr	r3, [r3, #0]
   1b7f2:	2200      	movs	r2, #0
   1b7f4:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   1b7f6:	4b59      	ldr	r3, [pc, #356]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b7f8:	681b      	ldr	r3, [r3, #0]
   1b7fa:	2200      	movs	r2, #0
   1b7fc:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   1b7fe:	4b5e      	ldr	r3, [pc, #376]	; (1b978 <prvTraceInitTraceData+0x1f8>)
   1b800:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   1b802:	4b56      	ldr	r3, [pc, #344]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b804:	681b      	ldr	r3, [r3, #0]
   1b806:	4a5d      	ldr	r2, [pc, #372]	; (1b97c <prvTraceInitTraceData+0x1fc>)
   1b808:	495d      	ldr	r1, [pc, #372]	; (1b980 <prvTraceInitTraceData+0x200>)
   1b80a:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   1b80c:	4b53      	ldr	r3, [pc, #332]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b80e:	681a      	ldr	r2, [r3, #0]
   1b810:	23ac      	movs	r3, #172	; 0xac
   1b812:	00db      	lsls	r3, r3, #3
   1b814:	21c8      	movs	r1, #200	; 0xc8
   1b816:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   1b818:	4b50      	ldr	r3, [pc, #320]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b81a:	681b      	ldr	r3, [r3, #0]
   1b81c:	4a59      	ldr	r2, [pc, #356]	; (1b984 <prvTraceInitTraceData+0x204>)
   1b81e:	2101      	movs	r1, #1
   1b820:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   1b822:	4b4e      	ldr	r3, [pc, #312]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b824:	681a      	ldr	r2, [r3, #0]
   1b826:	23d7      	movs	r3, #215	; 0xd7
   1b828:	00db      	lsls	r3, r3, #3
   1b82a:	4957      	ldr	r1, [pc, #348]	; (1b988 <prvTraceInitTraceData+0x208>)
   1b82c:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   1b82e:	4b4b      	ldr	r3, [pc, #300]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b830:	681b      	ldr	r3, [r3, #0]
   1b832:	4a56      	ldr	r2, [pc, #344]	; (1b98c <prvTraceInitTraceData+0x20c>)
   1b834:	4694      	mov	ip, r2
   1b836:	4463      	add	r3, ip
   1b838:	4955      	ldr	r1, [pc, #340]	; (1b990 <prvTraceInitTraceData+0x210>)
   1b83a:	2250      	movs	r2, #80	; 0x50
   1b83c:	0018      	movs	r0, r3
   1b83e:	4b55      	ldr	r3, [pc, #340]	; (1b994 <prvTraceInitTraceData+0x214>)
   1b840:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   1b842:	4b46      	ldr	r3, [pc, #280]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b844:	681b      	ldr	r3, [r3, #0]
   1b846:	4a54      	ldr	r2, [pc, #336]	; (1b998 <prvTraceInitTraceData+0x218>)
   1b848:	4954      	ldr	r1, [pc, #336]	; (1b99c <prvTraceInitTraceData+0x21c>)
   1b84a:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   1b84c:	4b43      	ldr	r3, [pc, #268]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b84e:	681b      	ldr	r3, [r3, #0]
   1b850:	4a53      	ldr	r2, [pc, #332]	; (1b9a0 <prvTraceInitTraceData+0x220>)
   1b852:	210a      	movs	r1, #10
   1b854:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   1b856:	4b41      	ldr	r3, [pc, #260]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b858:	681b      	ldr	r3, [r3, #0]
   1b85a:	4a52      	ldr	r2, [pc, #328]	; (1b9a4 <prvTraceInitTraceData+0x224>)
   1b85c:	210b      	movs	r1, #11
   1b85e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   1b860:	4b3e      	ldr	r3, [pc, #248]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b862:	681b      	ldr	r3, [r3, #0]
   1b864:	4a50      	ldr	r2, [pc, #320]	; (1b9a8 <prvTraceInitTraceData+0x228>)
   1b866:	210c      	movs	r1, #12
   1b868:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   1b86a:	4b3c      	ldr	r3, [pc, #240]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b86c:	681b      	ldr	r3, [r3, #0]
   1b86e:	4a4f      	ldr	r2, [pc, #316]	; (1b9ac <prvTraceInitTraceData+0x22c>)
   1b870:	210d      	movs	r1, #13
   1b872:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   1b874:	4b39      	ldr	r3, [pc, #228]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b876:	681b      	ldr	r3, [r3, #0]
   1b878:	4a4d      	ldr	r2, [pc, #308]	; (1b9b0 <prvTraceInitTraceData+0x230>)
   1b87a:	2171      	movs	r1, #113	; 0x71
   1b87c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   1b87e:	4b37      	ldr	r3, [pc, #220]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b880:	681b      	ldr	r3, [r3, #0]
   1b882:	4a4c      	ldr	r2, [pc, #304]	; (1b9b4 <prvTraceInitTraceData+0x234>)
   1b884:	2172      	movs	r1, #114	; 0x72
   1b886:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   1b888:	4b34      	ldr	r3, [pc, #208]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b88a:	681b      	ldr	r3, [r3, #0]
   1b88c:	4a4a      	ldr	r2, [pc, #296]	; (1b9b8 <prvTraceInitTraceData+0x238>)
   1b88e:	2173      	movs	r1, #115	; 0x73
   1b890:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   1b892:	4b32      	ldr	r3, [pc, #200]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b894:	681b      	ldr	r3, [r3, #0]
   1b896:	4a49      	ldr	r2, [pc, #292]	; (1b9bc <prvTraceInitTraceData+0x23c>)
   1b898:	2174      	movs	r1, #116	; 0x74
   1b89a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   1b89c:	4b2f      	ldr	r3, [pc, #188]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b89e:	681b      	ldr	r3, [r3, #0]
   1b8a0:	4a47      	ldr	r2, [pc, #284]	; (1b9c0 <prvTraceInitTraceData+0x240>)
   1b8a2:	21f1      	movs	r1, #241	; 0xf1
   1b8a4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   1b8a6:	4b2d      	ldr	r3, [pc, #180]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b8a8:	681b      	ldr	r3, [r3, #0]
   1b8aa:	4a46      	ldr	r2, [pc, #280]	; (1b9c4 <prvTraceInitTraceData+0x244>)
   1b8ac:	21f2      	movs	r1, #242	; 0xf2
   1b8ae:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   1b8b0:	4b2a      	ldr	r3, [pc, #168]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b8b2:	681b      	ldr	r3, [r3, #0]
   1b8b4:	4a44      	ldr	r2, [pc, #272]	; (1b9c8 <prvTraceInitTraceData+0x248>)
   1b8b6:	21f3      	movs	r1, #243	; 0xf3
   1b8b8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   1b8ba:	4b28      	ldr	r3, [pc, #160]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b8bc:	681b      	ldr	r3, [r3, #0]
   1b8be:	4a43      	ldr	r2, [pc, #268]	; (1b9cc <prvTraceInitTraceData+0x24c>)
   1b8c0:	21f4      	movs	r1, #244	; 0xf4
   1b8c2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   1b8c4:	4b42      	ldr	r3, [pc, #264]	; (1b9d0 <prvTraceInitTraceData+0x250>)
   1b8c6:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   1b8c8:	4b24      	ldr	r3, [pc, #144]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b8ca:	681b      	ldr	r3, [r3, #0]
   1b8cc:	22f4      	movs	r2, #244	; 0xf4
   1b8ce:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   1b8d0:	4b22      	ldr	r3, [pc, #136]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b8d2:	681b      	ldr	r3, [r3, #0]
   1b8d4:	22f3      	movs	r2, #243	; 0xf3
   1b8d6:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   1b8d8:	4b20      	ldr	r3, [pc, #128]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b8da:	681b      	ldr	r3, [r3, #0]
   1b8dc:	22f2      	movs	r2, #242	; 0xf2
   1b8de:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   1b8e0:	4b1e      	ldr	r3, [pc, #120]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b8e2:	681b      	ldr	r3, [r3, #0]
   1b8e4:	22f1      	movs	r2, #241	; 0xf1
   1b8e6:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   1b8e8:	4b1c      	ldr	r3, [pc, #112]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b8ea:	681b      	ldr	r3, [r3, #0]
   1b8ec:	2274      	movs	r2, #116	; 0x74
   1b8ee:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   1b8f0:	4b1a      	ldr	r3, [pc, #104]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b8f2:	681b      	ldr	r3, [r3, #0]
   1b8f4:	2273      	movs	r2, #115	; 0x73
   1b8f6:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   1b8f8:	4b18      	ldr	r3, [pc, #96]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b8fa:	681b      	ldr	r3, [r3, #0]
   1b8fc:	2272      	movs	r2, #114	; 0x72
   1b8fe:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   1b900:	4b16      	ldr	r3, [pc, #88]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b902:	681b      	ldr	r3, [r3, #0]
   1b904:	2271      	movs	r2, #113	; 0x71
   1b906:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   1b908:	4b14      	ldr	r3, [pc, #80]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b90a:	681b      	ldr	r3, [r3, #0]
   1b90c:	2204      	movs	r2, #4
   1b90e:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   1b910:	4b12      	ldr	r3, [pc, #72]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b912:	681b      	ldr	r3, [r3, #0]
   1b914:	2203      	movs	r2, #3
   1b916:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   1b918:	4b10      	ldr	r3, [pc, #64]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b91a:	681b      	ldr	r3, [r3, #0]
   1b91c:	2202      	movs	r2, #2
   1b91e:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   1b920:	4b0e      	ldr	r3, [pc, #56]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b922:	681b      	ldr	r3, [r3, #0]
   1b924:	2201      	movs	r2, #1
   1b926:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   1b928:	4b2a      	ldr	r3, [pc, #168]	; (1b9d4 <prvTraceInitTraceData+0x254>)
   1b92a:	681b      	ldr	r3, [r3, #0]
   1b92c:	2b00      	cmp	r3, #0
   1b92e:	d012      	beq.n	1b956 <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1b930:	4b0a      	ldr	r3, [pc, #40]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b932:	681b      	ldr	r3, [r3, #0]
   1b934:	4a15      	ldr	r2, [pc, #84]	; (1b98c <prvTraceInitTraceData+0x20c>)
   1b936:	1898      	adds	r0, r3, r2
   1b938:	4b26      	ldr	r3, [pc, #152]	; (1b9d4 <prvTraceInitTraceData+0x254>)
   1b93a:	681b      	ldr	r3, [r3, #0]
   1b93c:	2250      	movs	r2, #80	; 0x50
   1b93e:	0019      	movs	r1, r3
   1b940:	4b14      	ldr	r3, [pc, #80]	; (1b994 <prvTraceInitTraceData+0x214>)
   1b942:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   1b944:	4b05      	ldr	r3, [pc, #20]	; (1b95c <prvTraceInitTraceData+0x1dc>)
   1b946:	681b      	ldr	r3, [r3, #0]
   1b948:	4a23      	ldr	r2, [pc, #140]	; (1b9d8 <prvTraceInitTraceData+0x258>)
   1b94a:	2101      	movs	r1, #1
   1b94c:	5099      	str	r1, [r3, r2]
		vTraceStop();
   1b94e:	4b23      	ldr	r3, [pc, #140]	; (1b9dc <prvTraceInitTraceData+0x25c>)
   1b950:	4798      	blx	r3
   1b952:	e000      	b.n	1b956 <prvTraceInitTraceData+0x1d6>
			return;
   1b954:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   1b956:	46bd      	mov	sp, r7
   1b958:	bd80      	pop	{r7, pc}
   1b95a:	46c0      	nop			; (mov r8, r8)
   1b95c:	20000c98 	.word	0x20000c98
   1b960:	200048a8 	.word	0x200048a8
   1b964:	e000e018 	.word	0xe000e018
   1b968:	20005478 	.word	0x20005478
   1b96c:	0003794b 	.word	0x0003794b
   1b970:	00001aa1 	.word	0x00001aa1
   1b974:	f0f0f0f0 	.word	0xf0f0f0f0
   1b978:	0001a8e5 	.word	0x0001a8e5
   1b97c:	0000055c 	.word	0x0000055c
   1b980:	f1f1f1f1 	.word	0xf1f1f1f1
   1b984:	00000564 	.word	0x00000564
   1b988:	f2f2f2f2 	.word	0xf2f2f2f2
   1b98c:	000006bc 	.word	0x000006bc
   1b990:	0003afe4 	.word	0x0003afe4
   1b994:	0001bcf5 	.word	0x0001bcf5
   1b998:	0000070c 	.word	0x0000070c
   1b99c:	f3f3f3f3 	.word	0xf3f3f3f3
   1b9a0:	00000bc4 	.word	0x00000bc4
   1b9a4:	00000bc5 	.word	0x00000bc5
   1b9a8:	00000bc6 	.word	0x00000bc6
   1b9ac:	00000bc7 	.word	0x00000bc7
   1b9b0:	00000bc8 	.word	0x00000bc8
   1b9b4:	00000bc9 	.word	0x00000bc9
   1b9b8:	00000bca 	.word	0x00000bca
   1b9bc:	00000bcb 	.word	0x00000bcb
   1b9c0:	00000bcc 	.word	0x00000bcc
   1b9c4:	00000bcd 	.word	0x00000bcd
   1b9c8:	00000bce 	.word	0x00000bce
   1b9cc:	00000bcf 	.word	0x00000bcf
   1b9d0:	0001aa85 	.word	0x0001aa85
   1b9d4:	20000bf8 	.word	0x20000bf8
   1b9d8:	000006b4 	.word	0x000006b4
   1b9dc:	0001aced 	.word	0x0001aced

0001b9e0 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   1b9e0:	b580      	push	{r7, lr}
   1b9e2:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   1b9e4:	4b10      	ldr	r3, [pc, #64]	; (1ba28 <prvTraceNextFreeEventBufferSlot+0x48>)
   1b9e6:	681b      	ldr	r3, [r3, #0]
   1b9e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b9ea:	2b00      	cmp	r3, #0
   1b9ec:	d101      	bne.n	1b9f2 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   1b9ee:	2300      	movs	r3, #0
   1b9f0:	e017      	b.n	1ba22 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1b9f2:	4b0d      	ldr	r3, [pc, #52]	; (1ba28 <prvTraceNextFreeEventBufferSlot+0x48>)
   1b9f4:	681b      	ldr	r3, [r3, #0]
   1b9f6:	69da      	ldr	r2, [r3, #28]
   1b9f8:	232c      	movs	r3, #44	; 0x2c
   1b9fa:	33ff      	adds	r3, #255	; 0xff
   1b9fc:	429a      	cmp	r2, r3
   1b9fe:	d905      	bls.n	1ba0c <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   1ba00:	4b0a      	ldr	r3, [pc, #40]	; (1ba2c <prvTraceNextFreeEventBufferSlot+0x4c>)
   1ba02:	0018      	movs	r0, r3
   1ba04:	4b0a      	ldr	r3, [pc, #40]	; (1ba30 <prvTraceNextFreeEventBufferSlot+0x50>)
   1ba06:	4798      	blx	r3
		return NULL;
   1ba08:	2300      	movs	r3, #0
   1ba0a:	e00a      	b.n	1ba22 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   1ba0c:	4b06      	ldr	r3, [pc, #24]	; (1ba28 <prvTraceNextFreeEventBufferSlot+0x48>)
   1ba0e:	681a      	ldr	r2, [r3, #0]
   1ba10:	4b05      	ldr	r3, [pc, #20]	; (1ba28 <prvTraceNextFreeEventBufferSlot+0x48>)
   1ba12:	681b      	ldr	r3, [r3, #0]
   1ba14:	69db      	ldr	r3, [r3, #28]
   1ba16:	009b      	lsls	r3, r3, #2
   1ba18:	21e2      	movs	r1, #226	; 0xe2
   1ba1a:	00c9      	lsls	r1, r1, #3
   1ba1c:	468c      	mov	ip, r1
   1ba1e:	4463      	add	r3, ip
   1ba20:	18d3      	adds	r3, r2, r3
}
   1ba22:	0018      	movs	r0, r3
   1ba24:	46bd      	mov	sp, r7
   1ba26:	bd80      	pop	{r7, pc}
   1ba28:	20000c98 	.word	0x20000c98
   1ba2c:	0003aff8 	.word	0x0003aff8
   1ba30:	0001be29 	.word	0x0001be29

0001ba34 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   1ba34:	b580      	push	{r7, lr}
   1ba36:	b082      	sub	sp, #8
   1ba38:	af00      	add	r7, sp, #0
   1ba3a:	0002      	movs	r2, r0
   1ba3c:	1dfb      	adds	r3, r7, #7
   1ba3e:	701a      	strb	r2, [r3, #0]
   1ba40:	1dbb      	adds	r3, r7, #6
   1ba42:	1c0a      	adds	r2, r1, #0
   1ba44:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1ba46:	1dbb      	adds	r3, r7, #6
   1ba48:	781b      	ldrb	r3, [r3, #0]
   1ba4a:	2b08      	cmp	r3, #8
   1ba4c:	d905      	bls.n	1ba5a <uiIndexOfObject+0x26>
   1ba4e:	4b2a      	ldr	r3, [pc, #168]	; (1baf8 <uiIndexOfObject+0xc4>)
   1ba50:	0018      	movs	r0, r3
   1ba52:	4b2a      	ldr	r3, [pc, #168]	; (1bafc <uiIndexOfObject+0xc8>)
   1ba54:	4798      	blx	r3
   1ba56:	2300      	movs	r3, #0
   1ba58:	e049      	b.n	1baee <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   1ba5a:	1dfb      	adds	r3, r7, #7
   1ba5c:	781b      	ldrb	r3, [r3, #0]
   1ba5e:	2b00      	cmp	r3, #0
   1ba60:	d00b      	beq.n	1ba7a <uiIndexOfObject+0x46>
   1ba62:	4b27      	ldr	r3, [pc, #156]	; (1bb00 <uiIndexOfObject+0xcc>)
   1ba64:	681a      	ldr	r2, [r3, #0]
   1ba66:	1dbb      	adds	r3, r7, #6
   1ba68:	781b      	ldrb	r3, [r3, #0]
   1ba6a:	2164      	movs	r1, #100	; 0x64
   1ba6c:	18d3      	adds	r3, r2, r3
   1ba6e:	185b      	adds	r3, r3, r1
   1ba70:	781b      	ldrb	r3, [r3, #0]
   1ba72:	1dfa      	adds	r2, r7, #7
   1ba74:	7812      	ldrb	r2, [r2, #0]
   1ba76:	429a      	cmp	r2, r3
   1ba78:	d905      	bls.n	1ba86 <uiIndexOfObject+0x52>
   1ba7a:	4b22      	ldr	r3, [pc, #136]	; (1bb04 <uiIndexOfObject+0xd0>)
   1ba7c:	0018      	movs	r0, r3
   1ba7e:	4b1f      	ldr	r3, [pc, #124]	; (1bafc <uiIndexOfObject+0xc8>)
   1ba80:	4798      	blx	r3
   1ba82:	2300      	movs	r3, #0
   1ba84:	e033      	b.n	1baee <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1ba86:	1dbb      	adds	r3, r7, #6
   1ba88:	781b      	ldrb	r3, [r3, #0]
   1ba8a:	2b08      	cmp	r3, #8
   1ba8c:	d82a      	bhi.n	1bae4 <uiIndexOfObject+0xb0>
   1ba8e:	1dfb      	adds	r3, r7, #7
   1ba90:	781b      	ldrb	r3, [r3, #0]
   1ba92:	2b00      	cmp	r3, #0
   1ba94:	d026      	beq.n	1bae4 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   1ba96:	4b1a      	ldr	r3, [pc, #104]	; (1bb00 <uiIndexOfObject+0xcc>)
   1ba98:	681a      	ldr	r2, [r3, #0]
   1ba9a:	1dbb      	adds	r3, r7, #6
   1ba9c:	781b      	ldrb	r3, [r3, #0]
   1ba9e:	2164      	movs	r1, #100	; 0x64
   1baa0:	18d3      	adds	r3, r2, r3
   1baa2:	185b      	adds	r3, r3, r1
   1baa4:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1baa6:	1dfa      	adds	r2, r7, #7
   1baa8:	7812      	ldrb	r2, [r2, #0]
   1baaa:	429a      	cmp	r2, r3
   1baac:	d81a      	bhi.n	1bae4 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1baae:	4b14      	ldr	r3, [pc, #80]	; (1bb00 <uiIndexOfObject+0xcc>)
   1bab0:	681a      	ldr	r2, [r3, #0]
   1bab2:	1dbb      	adds	r3, r7, #6
   1bab4:	781b      	ldrb	r3, [r3, #0]
   1bab6:	3340      	adds	r3, #64	; 0x40
   1bab8:	005b      	lsls	r3, r3, #1
   1baba:	18d3      	adds	r3, r2, r3
   1babc:	3308      	adds	r3, #8
   1babe:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1bac0:	4b0f      	ldr	r3, [pc, #60]	; (1bb00 <uiIndexOfObject+0xcc>)
   1bac2:	6819      	ldr	r1, [r3, #0]
   1bac4:	1dbb      	adds	r3, r7, #6
   1bac6:	781b      	ldrb	r3, [r3, #0]
   1bac8:	207c      	movs	r0, #124	; 0x7c
   1baca:	18cb      	adds	r3, r1, r3
   1bacc:	181b      	adds	r3, r3, r0
   1bace:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1bad0:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1bad2:	1df9      	adds	r1, r7, #7
   1bad4:	7809      	ldrb	r1, [r1, #0]
   1bad6:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1bad8:	b289      	uxth	r1, r1
   1bada:	434b      	muls	r3, r1
   1badc:	b29b      	uxth	r3, r3
   1bade:	18d3      	adds	r3, r2, r3
   1bae0:	b29b      	uxth	r3, r3
   1bae2:	e004      	b.n	1baee <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   1bae4:	4b08      	ldr	r3, [pc, #32]	; (1bb08 <uiIndexOfObject+0xd4>)
   1bae6:	0018      	movs	r0, r3
   1bae8:	4b04      	ldr	r3, [pc, #16]	; (1bafc <uiIndexOfObject+0xc8>)
   1baea:	4798      	blx	r3
	return 0;
   1baec:	2300      	movs	r3, #0
}
   1baee:	0018      	movs	r0, r3
   1baf0:	46bd      	mov	sp, r7
   1baf2:	b002      	add	sp, #8
   1baf4:	bd80      	pop	{r7, pc}
   1baf6:	46c0      	nop			; (mov r8, r8)
   1baf8:	0003b020 	.word	0x0003b020
   1bafc:	0001be29 	.word	0x0001be29
   1bb00:	20000c98 	.word	0x20000c98
   1bb04:	0003b060 	.word	0x0003b060
   1bb08:	0003b0a0 	.word	0x0003b0a0

0001bb0c <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   1bb0c:	b580      	push	{r7, lr}
   1bb0e:	b088      	sub	sp, #32
   1bb10:	af00      	add	r7, sp, #0
   1bb12:	0002      	movs	r2, r0
   1bb14:	1dfb      	adds	r3, r7, #7
   1bb16:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   1bb18:	4b5a      	ldr	r3, [pc, #360]	; (1bc84 <prvTraceGetObjectHandle+0x178>)
   1bb1a:	681b      	ldr	r3, [r3, #0]
   1bb1c:	2b00      	cmp	r3, #0
   1bb1e:	d105      	bne.n	1bb2c <prvTraceGetObjectHandle+0x20>
   1bb20:	4b59      	ldr	r3, [pc, #356]	; (1bc88 <prvTraceGetObjectHandle+0x17c>)
   1bb22:	0018      	movs	r0, r3
   1bb24:	4b59      	ldr	r3, [pc, #356]	; (1bc8c <prvTraceGetObjectHandle+0x180>)
   1bb26:	4798      	blx	r3
   1bb28:	2300      	movs	r3, #0
   1bb2a:	e0a7      	b.n	1bc7c <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1bb2c:	1dfb      	adds	r3, r7, #7
   1bb2e:	781b      	ldrb	r3, [r3, #0]
   1bb30:	2b08      	cmp	r3, #8
   1bb32:	d905      	bls.n	1bb40 <prvTraceGetObjectHandle+0x34>
   1bb34:	4b56      	ldr	r3, [pc, #344]	; (1bc90 <prvTraceGetObjectHandle+0x184>)
   1bb36:	0018      	movs	r0, r3
   1bb38:	4b54      	ldr	r3, [pc, #336]	; (1bc8c <prvTraceGetObjectHandle+0x180>)
   1bb3a:	4798      	blx	r3
   1bb3c:	2300      	movs	r3, #0
   1bb3e:	e09d      	b.n	1bc7c <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1bb40:	f3ef 8310 	mrs	r3, PRIMASK
   1bb44:	60fb      	str	r3, [r7, #12]
  return(result);
   1bb46:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   1bb48:	61bb      	str	r3, [r7, #24]
   1bb4a:	2301      	movs	r3, #1
   1bb4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1bb4e:	693b      	ldr	r3, [r7, #16]
   1bb50:	f383 8810 	msr	PRIMASK, r3
   1bb54:	4b4f      	ldr	r3, [pc, #316]	; (1bc94 <prvTraceGetObjectHandle+0x188>)
   1bb56:	681b      	ldr	r3, [r3, #0]
   1bb58:	1c5a      	adds	r2, r3, #1
   1bb5a:	4b4e      	ldr	r3, [pc, #312]	; (1bc94 <prvTraceGetObjectHandle+0x188>)
   1bb5c:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   1bb5e:	1dfb      	adds	r3, r7, #7
   1bb60:	781a      	ldrb	r2, [r3, #0]
   1bb62:	4b4d      	ldr	r3, [pc, #308]	; (1bc98 <prvTraceGetObjectHandle+0x18c>)
   1bb64:	0052      	lsls	r2, r2, #1
   1bb66:	5ad3      	ldrh	r3, [r2, r3]
   1bb68:	001a      	movs	r2, r3
   1bb6a:	4b4c      	ldr	r3, [pc, #304]	; (1bc9c <prvTraceGetObjectHandle+0x190>)
   1bb6c:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   1bb6e:	4b4b      	ldr	r3, [pc, #300]	; (1bc9c <prvTraceGetObjectHandle+0x190>)
   1bb70:	681b      	ldr	r3, [r3, #0]
   1bb72:	4a49      	ldr	r2, [pc, #292]	; (1bc98 <prvTraceGetObjectHandle+0x18c>)
   1bb74:	2148      	movs	r1, #72	; 0x48
   1bb76:	18d3      	adds	r3, r2, r3
   1bb78:	185b      	adds	r3, r3, r1
   1bb7a:	781b      	ldrb	r3, [r3, #0]
   1bb7c:	2b00      	cmp	r3, #0
   1bb7e:	d117      	bne.n	1bbb0 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   1bb80:	4b46      	ldr	r3, [pc, #280]	; (1bc9c <prvTraceGetObjectHandle+0x190>)
   1bb82:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1bb84:	4b45      	ldr	r3, [pc, #276]	; (1bc9c <prvTraceGetObjectHandle+0x190>)
   1bb86:	681b      	ldr	r3, [r3, #0]
   1bb88:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   1bb8a:	1dfb      	adds	r3, r7, #7
   1bb8c:	781b      	ldrb	r3, [r3, #0]
   1bb8e:	4842      	ldr	r0, [pc, #264]	; (1bc98 <prvTraceGetObjectHandle+0x18c>)
   1bb90:	3308      	adds	r3, #8
   1bb92:	005b      	lsls	r3, r3, #1
   1bb94:	18c3      	adds	r3, r0, r3
   1bb96:	3302      	adds	r3, #2
   1bb98:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1bb9a:	b2db      	uxtb	r3, r3
   1bb9c:	1acb      	subs	r3, r1, r3
   1bb9e:	b2db      	uxtb	r3, r3
   1bba0:	3301      	adds	r3, #1
   1bba2:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   1bba4:	4b3c      	ldr	r3, [pc, #240]	; (1bc98 <prvTraceGetObjectHandle+0x18c>)
   1bba6:	2148      	movs	r1, #72	; 0x48
   1bba8:	189b      	adds	r3, r3, r2
   1bbaa:	185b      	adds	r3, r3, r1
   1bbac:	1c02      	adds	r2, r0, #0
   1bbae:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   1bbb0:	4b3a      	ldr	r3, [pc, #232]	; (1bc9c <prvTraceGetObjectHandle+0x190>)
   1bbb2:	681a      	ldr	r2, [r3, #0]
   1bbb4:	231f      	movs	r3, #31
   1bbb6:	18fb      	adds	r3, r7, r3
   1bbb8:	4937      	ldr	r1, [pc, #220]	; (1bc98 <prvTraceGetObjectHandle+0x18c>)
   1bbba:	2048      	movs	r0, #72	; 0x48
   1bbbc:	188a      	adds	r2, r1, r2
   1bbbe:	1812      	adds	r2, r2, r0
   1bbc0:	7812      	ldrb	r2, [r2, #0]
   1bbc2:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1bbc4:	1dfb      	adds	r3, r7, #7
   1bbc6:	781a      	ldrb	r2, [r3, #0]
   1bbc8:	4b33      	ldr	r3, [pc, #204]	; (1bc98 <prvTraceGetObjectHandle+0x18c>)
   1bbca:	0052      	lsls	r2, r2, #1
   1bbcc:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   1bbce:	1dfb      	adds	r3, r7, #7
   1bbd0:	781b      	ldrb	r3, [r3, #0]
   1bbd2:	4931      	ldr	r1, [pc, #196]	; (1bc98 <prvTraceGetObjectHandle+0x18c>)
   1bbd4:	3310      	adds	r3, #16
   1bbd6:	005b      	lsls	r3, r3, #1
   1bbd8:	18cb      	adds	r3, r1, r3
   1bbda:	3304      	adds	r3, #4
   1bbdc:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1bbde:	429a      	cmp	r2, r3
   1bbe0:	d90d      	bls.n	1bbfe <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1bbe2:	1dfb      	adds	r3, r7, #7
   1bbe4:	781b      	ldrb	r3, [r3, #0]
   1bbe6:	0018      	movs	r0, r3
   1bbe8:	4b2d      	ldr	r3, [pc, #180]	; (1bca0 <prvTraceGetObjectHandle+0x194>)
   1bbea:	4798      	blx	r3
   1bbec:	0003      	movs	r3, r0
   1bbee:	0018      	movs	r0, r3
   1bbf0:	4b26      	ldr	r3, [pc, #152]	; (1bc8c <prvTraceGetObjectHandle+0x180>)
   1bbf2:	4798      	blx	r3
		handle = 0;
   1bbf4:	231f      	movs	r3, #31
   1bbf6:	18fb      	adds	r3, r7, r3
   1bbf8:	2200      	movs	r2, #0
   1bbfa:	701a      	strb	r2, [r3, #0]
   1bbfc:	e031      	b.n	1bc62 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   1bbfe:	1dfb      	adds	r3, r7, #7
   1bc00:	781b      	ldrb	r3, [r3, #0]
   1bc02:	4a25      	ldr	r2, [pc, #148]	; (1bc98 <prvTraceGetObjectHandle+0x18c>)
   1bc04:	0059      	lsls	r1, r3, #1
   1bc06:	5a8a      	ldrh	r2, [r1, r2]
   1bc08:	3201      	adds	r2, #1
   1bc0a:	b291      	uxth	r1, r2
   1bc0c:	4a22      	ldr	r2, [pc, #136]	; (1bc98 <prvTraceGetObjectHandle+0x18c>)
   1bc0e:	005b      	lsls	r3, r3, #1
   1bc10:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1bc12:	1dfb      	adds	r3, r7, #7
   1bc14:	781a      	ldrb	r2, [r3, #0]
   1bc16:	4b20      	ldr	r3, [pc, #128]	; (1bc98 <prvTraceGetObjectHandle+0x18c>)
   1bc18:	0052      	lsls	r2, r2, #1
   1bc1a:	5ad3      	ldrh	r3, [r2, r3]
   1bc1c:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   1bc1e:	1dfb      	adds	r3, r7, #7
   1bc20:	781b      	ldrb	r3, [r3, #0]
   1bc22:	4a1d      	ldr	r2, [pc, #116]	; (1bc98 <prvTraceGetObjectHandle+0x18c>)
   1bc24:	3308      	adds	r3, #8
   1bc26:	005b      	lsls	r3, r3, #1
   1bc28:	18d3      	adds	r3, r2, r3
   1bc2a:	3302      	adds	r3, #2
   1bc2c:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1bc2e:	1acb      	subs	r3, r1, r3
   1bc30:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   1bc32:	1dfb      	adds	r3, r7, #7
   1bc34:	781b      	ldrb	r3, [r3, #0]
   1bc36:	4a18      	ldr	r2, [pc, #96]	; (1bc98 <prvTraceGetObjectHandle+0x18c>)
   1bc38:	3318      	adds	r3, #24
   1bc3a:	005b      	lsls	r3, r3, #1
   1bc3c:	18d3      	adds	r3, r2, r3
   1bc3e:	3306      	adds	r3, #6
   1bc40:	881b      	ldrh	r3, [r3, #0]
   1bc42:	001a      	movs	r2, r3
		if (hndCount >
   1bc44:	697b      	ldr	r3, [r7, #20]
   1bc46:	429a      	cmp	r2, r3
   1bc48:	da0b      	bge.n	1bc62 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1bc4a:	1dfb      	adds	r3, r7, #7
   1bc4c:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   1bc4e:	697a      	ldr	r2, [r7, #20]
   1bc50:	b2d2      	uxtb	r2, r2
   1bc52:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1bc54:	4a10      	ldr	r2, [pc, #64]	; (1bc98 <prvTraceGetObjectHandle+0x18c>)
   1bc56:	3318      	adds	r3, #24
   1bc58:	005b      	lsls	r3, r3, #1
   1bc5a:	18d3      	adds	r3, r2, r3
   1bc5c:	3306      	adds	r3, #6
   1bc5e:	1c0a      	adds	r2, r1, #0
   1bc60:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   1bc62:	4b0c      	ldr	r3, [pc, #48]	; (1bc94 <prvTraceGetObjectHandle+0x188>)
   1bc64:	681b      	ldr	r3, [r3, #0]
   1bc66:	1e5a      	subs	r2, r3, #1
   1bc68:	4b0a      	ldr	r3, [pc, #40]	; (1bc94 <prvTraceGetObjectHandle+0x188>)
   1bc6a:	601a      	str	r2, [r3, #0]
   1bc6c:	69bb      	ldr	r3, [r7, #24]
   1bc6e:	60bb      	str	r3, [r7, #8]
   1bc70:	68bb      	ldr	r3, [r7, #8]
   1bc72:	f383 8810 	msr	PRIMASK, r3

	return handle;
   1bc76:	231f      	movs	r3, #31
   1bc78:	18fb      	adds	r3, r7, r3
   1bc7a:	781b      	ldrb	r3, [r3, #0]
}
   1bc7c:	0018      	movs	r0, r3
   1bc7e:	46bd      	mov	sp, r7
   1bc80:	b008      	add	sp, #32
   1bc82:	bd80      	pop	{r7, pc}
   1bc84:	20000c98 	.word	0x20000c98
   1bc88:	0003a500 	.word	0x0003a500
   1bc8c:	0001be29 	.word	0x0001be29
   1bc90:	0003b0e0 	.word	0x0003b0e0
   1bc94:	20000bf0 	.word	0x20000bf0
   1bc98:	20000c08 	.word	0x20000c08
   1bc9c:	20000c9c 	.word	0x20000c9c
   1bca0:	0001ab49 	.word	0x0001ab49

0001bca4 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   1bca4:	b590      	push	{r4, r7, lr}
   1bca6:	b085      	sub	sp, #20
   1bca8:	af00      	add	r7, sp, #0
   1bcaa:	0002      	movs	r2, r0
   1bcac:	1dfb      	adds	r3, r7, #7
   1bcae:	701a      	strb	r2, [r3, #0]
   1bcb0:	1dbb      	adds	r3, r7, #6
   1bcb2:	1c0a      	adds	r2, r1, #0
   1bcb4:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   1bcb6:	230e      	movs	r3, #14
   1bcb8:	18fc      	adds	r4, r7, r3
   1bcba:	1dfb      	adds	r3, r7, #7
   1bcbc:	781a      	ldrb	r2, [r3, #0]
   1bcbe:	1dbb      	adds	r3, r7, #6
   1bcc0:	781b      	ldrb	r3, [r3, #0]
   1bcc2:	0011      	movs	r1, r2
   1bcc4:	0018      	movs	r0, r3
   1bcc6:	4b09      	ldr	r3, [pc, #36]	; (1bcec <prvMarkObjectAsUsed+0x48>)
   1bcc8:	4798      	blx	r3
   1bcca:	0003      	movs	r3, r0
   1bccc:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   1bcce:	4b08      	ldr	r3, [pc, #32]	; (1bcf0 <prvMarkObjectAsUsed+0x4c>)
   1bcd0:	681a      	ldr	r2, [r3, #0]
   1bcd2:	230e      	movs	r3, #14
   1bcd4:	18fb      	adds	r3, r7, r3
   1bcd6:	881b      	ldrh	r3, [r3, #0]
   1bcd8:	219c      	movs	r1, #156	; 0x9c
   1bcda:	18d3      	adds	r3, r2, r3
   1bcdc:	185b      	adds	r3, r3, r1
   1bcde:	2201      	movs	r2, #1
   1bce0:	701a      	strb	r2, [r3, #0]
}
   1bce2:	46c0      	nop			; (mov r8, r8)
   1bce4:	46bd      	mov	sp, r7
   1bce6:	b005      	add	sp, #20
   1bce8:	bd90      	pop	{r4, r7, pc}
   1bcea:	46c0      	nop			; (mov r8, r8)
   1bcec:	0001ba35 	.word	0x0001ba35
   1bcf0:	20000c98 	.word	0x20000c98

0001bcf4 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   1bcf4:	b580      	push	{r7, lr}
   1bcf6:	b086      	sub	sp, #24
   1bcf8:	af00      	add	r7, sp, #0
   1bcfa:	60f8      	str	r0, [r7, #12]
   1bcfc:	60b9      	str	r1, [r7, #8]
   1bcfe:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   1bd00:	2300      	movs	r3, #0
   1bd02:	617b      	str	r3, [r7, #20]
   1bd04:	e010      	b.n	1bd28 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   1bd06:	68fa      	ldr	r2, [r7, #12]
   1bd08:	697b      	ldr	r3, [r7, #20]
   1bd0a:	18d3      	adds	r3, r2, r3
   1bd0c:	68b9      	ldr	r1, [r7, #8]
   1bd0e:	697a      	ldr	r2, [r7, #20]
   1bd10:	188a      	adds	r2, r1, r2
   1bd12:	7812      	ldrb	r2, [r2, #0]
   1bd14:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   1bd16:	68ba      	ldr	r2, [r7, #8]
   1bd18:	697b      	ldr	r3, [r7, #20]
   1bd1a:	18d3      	adds	r3, r2, r3
   1bd1c:	781b      	ldrb	r3, [r3, #0]
   1bd1e:	2b00      	cmp	r3, #0
   1bd20:	d007      	beq.n	1bd32 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   1bd22:	697b      	ldr	r3, [r7, #20]
   1bd24:	3301      	adds	r3, #1
   1bd26:	617b      	str	r3, [r7, #20]
   1bd28:	697a      	ldr	r2, [r7, #20]
   1bd2a:	687b      	ldr	r3, [r7, #4]
   1bd2c:	429a      	cmp	r2, r3
   1bd2e:	d3ea      	bcc.n	1bd06 <prvStrncpy+0x12>
			break;
	}
}
   1bd30:	e000      	b.n	1bd34 <prvStrncpy+0x40>
			break;
   1bd32:	46c0      	nop			; (mov r8, r8)
}
   1bd34:	46c0      	nop			; (mov r8, r8)
   1bd36:	46bd      	mov	sp, r7
   1bd38:	b006      	add	sp, #24
   1bd3a:	bd80      	pop	{r7, pc}

0001bd3c <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   1bd3c:	b580      	push	{r7, lr}
   1bd3e:	b082      	sub	sp, #8
   1bd40:	af00      	add	r7, sp, #0
   1bd42:	603a      	str	r2, [r7, #0]
   1bd44:	1dfb      	adds	r3, r7, #7
   1bd46:	1c02      	adds	r2, r0, #0
   1bd48:	701a      	strb	r2, [r3, #0]
   1bd4a:	1dbb      	adds	r3, r7, #6
   1bd4c:	1c0a      	adds	r2, r1, #0
   1bd4e:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   1bd50:	683b      	ldr	r3, [r7, #0]
   1bd52:	2b00      	cmp	r3, #0
   1bd54:	d104      	bne.n	1bd60 <prvTraceSetObjectName+0x24>
   1bd56:	4b2a      	ldr	r3, [pc, #168]	; (1be00 <prvTraceSetObjectName+0xc4>)
   1bd58:	0018      	movs	r0, r3
   1bd5a:	4b2a      	ldr	r3, [pc, #168]	; (1be04 <prvTraceSetObjectName+0xc8>)
   1bd5c:	4798      	blx	r3
   1bd5e:	e04b      	b.n	1bdf8 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   1bd60:	1dfb      	adds	r3, r7, #7
   1bd62:	781b      	ldrb	r3, [r3, #0]
   1bd64:	2b08      	cmp	r3, #8
   1bd66:	d904      	bls.n	1bd72 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   1bd68:	4b27      	ldr	r3, [pc, #156]	; (1be08 <prvTraceSetObjectName+0xcc>)
   1bd6a:	0018      	movs	r0, r3
   1bd6c:	4b25      	ldr	r3, [pc, #148]	; (1be04 <prvTraceSetObjectName+0xc8>)
   1bd6e:	4798      	blx	r3
		return;
   1bd70:	e042      	b.n	1bdf8 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   1bd72:	1dbb      	adds	r3, r7, #6
   1bd74:	781b      	ldrb	r3, [r3, #0]
   1bd76:	2b00      	cmp	r3, #0
   1bd78:	d104      	bne.n	1bd84 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   1bd7a:	4b24      	ldr	r3, [pc, #144]	; (1be0c <prvTraceSetObjectName+0xd0>)
   1bd7c:	0018      	movs	r0, r3
   1bd7e:	4b21      	ldr	r3, [pc, #132]	; (1be04 <prvTraceSetObjectName+0xc8>)
   1bd80:	4798      	blx	r3
		return;
   1bd82:	e039      	b.n	1bdf8 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   1bd84:	4b22      	ldr	r3, [pc, #136]	; (1be10 <prvTraceSetObjectName+0xd4>)
   1bd86:	681a      	ldr	r2, [r3, #0]
   1bd88:	1dfb      	adds	r3, r7, #7
   1bd8a:	781b      	ldrb	r3, [r3, #0]
   1bd8c:	2164      	movs	r1, #100	; 0x64
   1bd8e:	18d3      	adds	r3, r2, r3
   1bd90:	185b      	adds	r3, r3, r1
   1bd92:	781b      	ldrb	r3, [r3, #0]
   1bd94:	1dba      	adds	r2, r7, #6
   1bd96:	7812      	ldrb	r2, [r2, #0]
   1bd98:	429a      	cmp	r2, r3
   1bd9a:	d909      	bls.n	1bdb0 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1bd9c:	1dfb      	adds	r3, r7, #7
   1bd9e:	781b      	ldrb	r3, [r3, #0]
   1bda0:	0018      	movs	r0, r3
   1bda2:	4b1c      	ldr	r3, [pc, #112]	; (1be14 <prvTraceSetObjectName+0xd8>)
   1bda4:	4798      	blx	r3
   1bda6:	0003      	movs	r3, r0
   1bda8:	0018      	movs	r0, r3
   1bdaa:	4b16      	ldr	r3, [pc, #88]	; (1be04 <prvTraceSetObjectName+0xc8>)
   1bdac:	4798      	blx	r3
   1bdae:	e023      	b.n	1bdf8 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   1bdb0:	1dfb      	adds	r3, r7, #7
   1bdb2:	781a      	ldrb	r2, [r3, #0]
   1bdb4:	1dbb      	adds	r3, r7, #6
   1bdb6:	781b      	ldrb	r3, [r3, #0]
   1bdb8:	0011      	movs	r1, r2
   1bdba:	0018      	movs	r0, r3
   1bdbc:	4b16      	ldr	r3, [pc, #88]	; (1be18 <prvTraceSetObjectName+0xdc>)
   1bdbe:	4798      	blx	r3
   1bdc0:	0003      	movs	r3, r0
   1bdc2:	001a      	movs	r2, r3
   1bdc4:	4b15      	ldr	r3, [pc, #84]	; (1be1c <prvTraceSetObjectName+0xe0>)
   1bdc6:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   1bdc8:	4b15      	ldr	r3, [pc, #84]	; (1be20 <prvTraceSetObjectName+0xe4>)
   1bdca:	681b      	ldr	r3, [r3, #0]
   1bdcc:	2b00      	cmp	r3, #0
   1bdce:	d113      	bne.n	1bdf8 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1bdd0:	4b0f      	ldr	r3, [pc, #60]	; (1be10 <prvTraceSetObjectName+0xd4>)
   1bdd2:	681a      	ldr	r2, [r3, #0]
   1bdd4:	4b11      	ldr	r3, [pc, #68]	; (1be1c <prvTraceSetObjectName+0xe0>)
   1bdd6:	881b      	ldrh	r3, [r3, #0]
   1bdd8:	3398      	adds	r3, #152	; 0x98
   1bdda:	18d3      	adds	r3, r2, r3
   1bddc:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   1bdde:	4b0c      	ldr	r3, [pc, #48]	; (1be10 <prvTraceSetObjectName+0xd4>)
   1bde0:	681a      	ldr	r2, [r3, #0]
   1bde2:	1dfb      	adds	r3, r7, #7
   1bde4:	781b      	ldrb	r3, [r3, #0]
   1bde6:	2170      	movs	r1, #112	; 0x70
   1bde8:	18d3      	adds	r3, r2, r3
   1bdea:	185b      	adds	r3, r3, r1
   1bdec:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1bdee:	001a      	movs	r2, r3
   1bdf0:	683b      	ldr	r3, [r7, #0]
   1bdf2:	0019      	movs	r1, r3
   1bdf4:	4b0b      	ldr	r3, [pc, #44]	; (1be24 <prvTraceSetObjectName+0xe8>)
   1bdf6:	4798      	blx	r3
		}
	}
}
   1bdf8:	46bd      	mov	sp, r7
   1bdfa:	b002      	add	sp, #8
   1bdfc:	bd80      	pop	{r7, pc}
   1bdfe:	46c0      	nop			; (mov r8, r8)
   1be00:	0003b1e4 	.word	0x0003b1e4
   1be04:	0001be29 	.word	0x0001be29
   1be08:	0003b218 	.word	0x0003b218
   1be0c:	0003b248 	.word	0x0003b248
   1be10:	20000c98 	.word	0x20000c98
   1be14:	0001ab49 	.word	0x0001ab49
   1be18:	0001ba35 	.word	0x0001ba35
   1be1c:	20000ca0 	.word	0x20000ca0
   1be20:	20000bf8 	.word	0x20000bf8
   1be24:	0001bcf5 	.word	0x0001bcf5

0001be28 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   1be28:	b580      	push	{r7, lr}
   1be2a:	b082      	sub	sp, #8
   1be2c:	af00      	add	r7, sp, #0
   1be2e:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   1be30:	4b11      	ldr	r3, [pc, #68]	; (1be78 <prvTraceError+0x50>)
   1be32:	681b      	ldr	r3, [r3, #0]
   1be34:	2b00      	cmp	r3, #0
   1be36:	d001      	beq.n	1be3c <prvTraceError+0x14>
	{
		vTraceStop();
   1be38:	4b10      	ldr	r3, [pc, #64]	; (1be7c <prvTraceError+0x54>)
   1be3a:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   1be3c:	4b10      	ldr	r3, [pc, #64]	; (1be80 <prvTraceError+0x58>)
   1be3e:	681b      	ldr	r3, [r3, #0]
   1be40:	2b00      	cmp	r3, #0
   1be42:	d115      	bne.n	1be70 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   1be44:	4b0e      	ldr	r3, [pc, #56]	; (1be80 <prvTraceError+0x58>)
   1be46:	687a      	ldr	r2, [r7, #4]
   1be48:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   1be4a:	4b0b      	ldr	r3, [pc, #44]	; (1be78 <prvTraceError+0x50>)
   1be4c:	681b      	ldr	r3, [r3, #0]
   1be4e:	2b00      	cmp	r3, #0
   1be50:	d00e      	beq.n	1be70 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1be52:	4b09      	ldr	r3, [pc, #36]	; (1be78 <prvTraceError+0x50>)
   1be54:	681b      	ldr	r3, [r3, #0]
   1be56:	4a0b      	ldr	r2, [pc, #44]	; (1be84 <prvTraceError+0x5c>)
   1be58:	1898      	adds	r0, r3, r2
   1be5a:	4b09      	ldr	r3, [pc, #36]	; (1be80 <prvTraceError+0x58>)
   1be5c:	681b      	ldr	r3, [r3, #0]
   1be5e:	2250      	movs	r2, #80	; 0x50
   1be60:	0019      	movs	r1, r3
   1be62:	4b09      	ldr	r3, [pc, #36]	; (1be88 <prvTraceError+0x60>)
   1be64:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   1be66:	4b04      	ldr	r3, [pc, #16]	; (1be78 <prvTraceError+0x50>)
   1be68:	681b      	ldr	r3, [r3, #0]
   1be6a:	4a08      	ldr	r2, [pc, #32]	; (1be8c <prvTraceError+0x64>)
   1be6c:	2101      	movs	r1, #1
   1be6e:	5099      	str	r1, [r3, r2]
		}
	}
}
   1be70:	46c0      	nop			; (mov r8, r8)
   1be72:	46bd      	mov	sp, r7
   1be74:	b002      	add	sp, #8
   1be76:	bd80      	pop	{r7, pc}
   1be78:	20000c98 	.word	0x20000c98
   1be7c:	0001aced 	.word	0x0001aced
   1be80:	20000bf8 	.word	0x20000bf8
   1be84:	000006bc 	.word	0x000006bc
   1be88:	0001bcf5 	.word	0x0001bcf5
   1be8c:	000006b4 	.word	0x000006b4

0001be90 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   1be90:	b580      	push	{r7, lr}
   1be92:	b086      	sub	sp, #24
   1be94:	af00      	add	r7, sp, #0
   1be96:	0002      	movs	r2, r0
   1be98:	1dfb      	adds	r3, r7, #7
   1be9a:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   1be9c:	2300      	movs	r3, #0
   1be9e:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   1bea0:	2300      	movs	r3, #0
   1bea2:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   1bea4:	1dfb      	adds	r3, r7, #7
   1bea6:	781b      	ldrb	r3, [r3, #0]
   1bea8:	2b00      	cmp	r3, #0
   1beaa:	d000      	beq.n	1beae <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   1beac:	e089      	b.n	1bfc2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   1beae:	4b49      	ldr	r3, [pc, #292]	; (1bfd4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   1beb0:	0018      	movs	r0, r3
   1beb2:	4b49      	ldr	r3, [pc, #292]	; (1bfd8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   1beb4:	4798      	blx	r3
   1beb6:	e08a      	b.n	1bfce <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   1beb8:	4b48      	ldr	r3, [pc, #288]	; (1bfdc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1beba:	681b      	ldr	r3, [r3, #0]
   1bebc:	69da      	ldr	r2, [r3, #28]
   1bebe:	697b      	ldr	r3, [r7, #20]
   1bec0:	18d3      	adds	r3, r2, r3
   1bec2:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1bec4:	4b45      	ldr	r3, [pc, #276]	; (1bfdc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bec6:	6819      	ldr	r1, [r3, #0]
   1bec8:	693b      	ldr	r3, [r7, #16]
   1beca:	009a      	lsls	r2, r3, #2
   1becc:	23e2      	movs	r3, #226	; 0xe2
   1bece:	00db      	lsls	r3, r3, #3
   1bed0:	188a      	adds	r2, r1, r2
   1bed2:	18d3      	adds	r3, r2, r3
   1bed4:	781b      	ldrb	r3, [r3, #0]
   1bed6:	2b98      	cmp	r3, #152	; 0x98
   1bed8:	d934      	bls.n	1bf44 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   1beda:	4b40      	ldr	r3, [pc, #256]	; (1bfdc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bedc:	6819      	ldr	r1, [r3, #0]
   1bede:	693b      	ldr	r3, [r7, #16]
   1bee0:	009a      	lsls	r2, r3, #2
   1bee2:	23e2      	movs	r3, #226	; 0xe2
   1bee4:	00db      	lsls	r3, r3, #3
   1bee6:	188a      	adds	r2, r1, r2
   1bee8:	18d3      	adds	r3, r2, r3
   1beea:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1beec:	2ba7      	cmp	r3, #167	; 0xa7
   1beee:	d829      	bhi.n	1bf44 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   1bef0:	4b3a      	ldr	r3, [pc, #232]	; (1bfdc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bef2:	6819      	ldr	r1, [r3, #0]
   1bef4:	693b      	ldr	r3, [r7, #16]
   1bef6:	009a      	lsls	r2, r3, #2
   1bef8:	23e2      	movs	r3, #226	; 0xe2
   1befa:	00db      	lsls	r3, r3, #3
   1befc:	188a      	adds	r2, r1, r2
   1befe:	18d3      	adds	r3, r2, r3
   1bf00:	781a      	ldrb	r2, [r3, #0]
   1bf02:	230f      	movs	r3, #15
   1bf04:	18fb      	adds	r3, r7, r3
   1bf06:	3268      	adds	r2, #104	; 0x68
   1bf08:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   1bf0a:	230f      	movs	r3, #15
   1bf0c:	18fb      	adds	r3, r7, r3
   1bf0e:	781a      	ldrb	r2, [r3, #0]
   1bf10:	693b      	ldr	r3, [r7, #16]
   1bf12:	18d2      	adds	r2, r2, r3
   1bf14:	4b31      	ldr	r3, [pc, #196]	; (1bfdc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bf16:	681b      	ldr	r3, [r3, #0]
   1bf18:	699b      	ldr	r3, [r3, #24]
   1bf1a:	429a      	cmp	r2, r3
   1bf1c:	d24d      	bcs.n	1bfba <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   1bf1e:	4b2f      	ldr	r3, [pc, #188]	; (1bfdc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bf20:	681a      	ldr	r2, [r3, #0]
   1bf22:	693b      	ldr	r3, [r7, #16]
   1bf24:	009b      	lsls	r3, r3, #2
   1bf26:	21e2      	movs	r1, #226	; 0xe2
   1bf28:	00c9      	lsls	r1, r1, #3
   1bf2a:	468c      	mov	ip, r1
   1bf2c:	4463      	add	r3, ip
   1bf2e:	18d0      	adds	r0, r2, r3
   1bf30:	230f      	movs	r3, #15
   1bf32:	18fb      	adds	r3, r7, r3
   1bf34:	781b      	ldrb	r3, [r3, #0]
   1bf36:	3301      	adds	r3, #1
   1bf38:	009b      	lsls	r3, r3, #2
   1bf3a:	001a      	movs	r2, r3
   1bf3c:	2100      	movs	r1, #0
   1bf3e:	4b28      	ldr	r3, [pc, #160]	; (1bfe0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1bf40:	4798      	blx	r3
		{
   1bf42:	e03a      	b.n	1bfba <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   1bf44:	4b25      	ldr	r3, [pc, #148]	; (1bfdc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bf46:	6819      	ldr	r1, [r3, #0]
   1bf48:	693b      	ldr	r3, [r7, #16]
   1bf4a:	009a      	lsls	r2, r3, #2
   1bf4c:	23e2      	movs	r3, #226	; 0xe2
   1bf4e:	00db      	lsls	r3, r3, #3
   1bf50:	188a      	adds	r2, r1, r2
   1bf52:	18d3      	adds	r3, r2, r3
   1bf54:	781b      	ldrb	r3, [r3, #0]
   1bf56:	2b01      	cmp	r3, #1
   1bf58:	d130      	bne.n	1bfbc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   1bf5a:	693b      	ldr	r3, [r7, #16]
   1bf5c:	1c5a      	adds	r2, r3, #1
   1bf5e:	4b1f      	ldr	r3, [pc, #124]	; (1bfdc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bf60:	681b      	ldr	r3, [r3, #0]
   1bf62:	699b      	ldr	r3, [r3, #24]
   1bf64:	429a      	cmp	r2, r3
   1bf66:	d20e      	bcs.n	1bf86 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   1bf68:	4b1c      	ldr	r3, [pc, #112]	; (1bfdc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bf6a:	681a      	ldr	r2, [r3, #0]
   1bf6c:	693b      	ldr	r3, [r7, #16]
   1bf6e:	009b      	lsls	r3, r3, #2
   1bf70:	21e2      	movs	r1, #226	; 0xe2
   1bf72:	00c9      	lsls	r1, r1, #3
   1bf74:	468c      	mov	ip, r1
   1bf76:	4463      	add	r3, ip
   1bf78:	18d3      	adds	r3, r2, r3
   1bf7a:	2208      	movs	r2, #8
   1bf7c:	2100      	movs	r1, #0
   1bf7e:	0018      	movs	r0, r3
   1bf80:	4b17      	ldr	r3, [pc, #92]	; (1bfe0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1bf82:	4798      	blx	r3
   1bf84:	e01a      	b.n	1bfbc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   1bf86:	4b15      	ldr	r3, [pc, #84]	; (1bfdc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bf88:	681b      	ldr	r3, [r3, #0]
   1bf8a:	22e2      	movs	r2, #226	; 0xe2
   1bf8c:	00d2      	lsls	r2, r2, #3
   1bf8e:	4694      	mov	ip, r2
   1bf90:	4463      	add	r3, ip
   1bf92:	2204      	movs	r2, #4
   1bf94:	2100      	movs	r1, #0
   1bf96:	0018      	movs	r0, r3
   1bf98:	4b11      	ldr	r3, [pc, #68]	; (1bfe0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1bf9a:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   1bf9c:	4b0f      	ldr	r3, [pc, #60]	; (1bfdc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1bf9e:	681a      	ldr	r2, [r3, #0]
   1bfa0:	693b      	ldr	r3, [r7, #16]
   1bfa2:	009b      	lsls	r3, r3, #2
   1bfa4:	21e2      	movs	r1, #226	; 0xe2
   1bfa6:	00c9      	lsls	r1, r1, #3
   1bfa8:	468c      	mov	ip, r1
   1bfaa:	4463      	add	r3, ip
   1bfac:	18d3      	adds	r3, r2, r3
   1bfae:	2204      	movs	r2, #4
   1bfb0:	2100      	movs	r1, #0
   1bfb2:	0018      	movs	r0, r3
   1bfb4:	4b0a      	ldr	r3, [pc, #40]	; (1bfe0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1bfb6:	4798      	blx	r3
   1bfb8:	e000      	b.n	1bfbc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   1bfba:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   1bfbc:	697b      	ldr	r3, [r7, #20]
   1bfbe:	3301      	adds	r3, #1
   1bfc0:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   1bfc2:	1dfb      	adds	r3, r7, #7
   1bfc4:	781a      	ldrb	r2, [r3, #0]
   1bfc6:	697b      	ldr	r3, [r7, #20]
   1bfc8:	429a      	cmp	r2, r3
   1bfca:	d900      	bls.n	1bfce <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   1bfcc:	e774      	b.n	1beb8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   1bfce:	46bd      	mov	sp, r7
   1bfd0:	b006      	add	sp, #24
   1bfd2:	bd80      	pop	{r7, pc}
   1bfd4:	0003b2a8 	.word	0x0003b2a8
   1bfd8:	0001be29 	.word	0x0001be29
   1bfdc:	20000c98 	.word	0x20000c98
   1bfe0:	0003794b 	.word	0x0003794b

0001bfe4 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   1bfe4:	b580      	push	{r7, lr}
   1bfe6:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   1bfe8:	4b12      	ldr	r3, [pc, #72]	; (1c034 <prvTraceUpdateCounters+0x50>)
   1bfea:	681b      	ldr	r3, [r3, #0]
   1bfec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1bfee:	2b00      	cmp	r3, #0
   1bff0:	d01c      	beq.n	1c02c <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   1bff2:	4b10      	ldr	r3, [pc, #64]	; (1c034 <prvTraceUpdateCounters+0x50>)
   1bff4:	681b      	ldr	r3, [r3, #0]
   1bff6:	695a      	ldr	r2, [r3, #20]
   1bff8:	3201      	adds	r2, #1
   1bffa:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   1bffc:	4b0d      	ldr	r3, [pc, #52]	; (1c034 <prvTraceUpdateCounters+0x50>)
   1bffe:	681b      	ldr	r3, [r3, #0]
   1c000:	69da      	ldr	r2, [r3, #28]
   1c002:	3201      	adds	r2, #1
   1c004:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1c006:	4b0b      	ldr	r3, [pc, #44]	; (1c034 <prvTraceUpdateCounters+0x50>)
   1c008:	681b      	ldr	r3, [r3, #0]
   1c00a:	69da      	ldr	r2, [r3, #28]
   1c00c:	232c      	movs	r3, #44	; 0x2c
   1c00e:	33ff      	adds	r3, #255	; 0xff
   1c010:	429a      	cmp	r2, r3
   1c012:	d907      	bls.n	1c024 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   1c014:	4b07      	ldr	r3, [pc, #28]	; (1c034 <prvTraceUpdateCounters+0x50>)
   1c016:	681b      	ldr	r3, [r3, #0]
   1c018:	2201      	movs	r2, #1
   1c01a:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   1c01c:	4b05      	ldr	r3, [pc, #20]	; (1c034 <prvTraceUpdateCounters+0x50>)
   1c01e:	681b      	ldr	r3, [r3, #0]
   1c020:	2200      	movs	r2, #0
   1c022:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   1c024:	2001      	movs	r0, #1
   1c026:	4b04      	ldr	r3, [pc, #16]	; (1c038 <prvTraceUpdateCounters+0x54>)
   1c028:	4798      	blx	r3
   1c02a:	e000      	b.n	1c02e <prvTraceUpdateCounters+0x4a>
		return;
   1c02c:	46c0      	nop			; (mov r8, r8)
#endif
}
   1c02e:	46bd      	mov	sp, r7
   1c030:	bd80      	pop	{r7, pc}
   1c032:	46c0      	nop			; (mov r8, r8)
   1c034:	20000c98 	.word	0x20000c98
   1c038:	0001be91 	.word	0x0001be91

0001c03c <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   1c03c:	b5b0      	push	{r4, r5, r7, lr}
   1c03e:	b086      	sub	sp, #24
   1c040:	af00      	add	r7, sp, #0
   1c042:	0002      	movs	r2, r0
   1c044:	1dbb      	adds	r3, r7, #6
   1c046:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   1c048:	2300      	movs	r3, #0
   1c04a:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   1c04c:	2300      	movs	r3, #0
   1c04e:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   1c050:	2300      	movs	r3, #0
   1c052:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   1c054:	1dbb      	adds	r3, r7, #6
   1c056:	881b      	ldrh	r3, [r3, #0]
   1c058:	2bff      	cmp	r3, #255	; 0xff
   1c05a:	d00a      	beq.n	1c072 <prvTraceGetDTS+0x36>
   1c05c:	1dbb      	adds	r3, r7, #6
   1c05e:	881b      	ldrh	r3, [r3, #0]
   1c060:	4a60      	ldr	r2, [pc, #384]	; (1c1e4 <prvTraceGetDTS+0x1a8>)
   1c062:	4293      	cmp	r3, r2
   1c064:	d005      	beq.n	1c072 <prvTraceGetDTS+0x36>
   1c066:	4b60      	ldr	r3, [pc, #384]	; (1c1e8 <prvTraceGetDTS+0x1ac>)
   1c068:	0018      	movs	r0, r3
   1c06a:	4b60      	ldr	r3, [pc, #384]	; (1c1ec <prvTraceGetDTS+0x1b0>)
   1c06c:	4798      	blx	r3
   1c06e:	2300      	movs	r3, #0
   1c070:	e0b3      	b.n	1c1da <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   1c072:	4b5f      	ldr	r3, [pc, #380]	; (1c1f0 <prvTraceGetDTS+0x1b4>)
   1c074:	681b      	ldr	r3, [r3, #0]
   1c076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c078:	2b00      	cmp	r3, #0
   1c07a:	d118      	bne.n	1c0ae <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   1c07c:	4b5d      	ldr	r3, [pc, #372]	; (1c1f4 <prvTraceGetDTS+0x1b8>)
   1c07e:	681b      	ldr	r3, [r3, #0]
   1c080:	2b00      	cmp	r3, #0
   1c082:	d006      	beq.n	1c092 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   1c084:	4b5a      	ldr	r3, [pc, #360]	; (1c1f0 <prvTraceGetDTS+0x1b4>)
   1c086:	681b      	ldr	r3, [r3, #0]
   1c088:	4a5a      	ldr	r2, [pc, #360]	; (1c1f4 <prvTraceGetDTS+0x1b8>)
   1c08a:	6812      	ldr	r2, [r2, #0]
   1c08c:	0892      	lsrs	r2, r2, #2
   1c08e:	625a      	str	r2, [r3, #36]	; 0x24
   1c090:	e00d      	b.n	1c0ae <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   1c092:	4b59      	ldr	r3, [pc, #356]	; (1c1f8 <prvTraceGetDTS+0x1bc>)
   1c094:	681a      	ldr	r2, [r3, #0]
   1c096:	4b59      	ldr	r3, [pc, #356]	; (1c1fc <prvTraceGetDTS+0x1c0>)
   1c098:	681b      	ldr	r3, [r3, #0]
   1c09a:	429a      	cmp	r2, r3
   1c09c:	d007      	beq.n	1c0ae <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   1c09e:	4b54      	ldr	r3, [pc, #336]	; (1c1f0 <prvTraceGetDTS+0x1b4>)
   1c0a0:	681c      	ldr	r4, [r3, #0]
   1c0a2:	2000      	movs	r0, #0
   1c0a4:	4b56      	ldr	r3, [pc, #344]	; (1c200 <prvTraceGetDTS+0x1c4>)
   1c0a6:	4798      	blx	r3
   1c0a8:	0003      	movs	r3, r0
   1c0aa:	089b      	lsrs	r3, r3, #2
   1c0ac:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   1c0ae:	230c      	movs	r3, #12
   1c0b0:	18fb      	adds	r3, r7, r3
   1c0b2:	0018      	movs	r0, r3
   1c0b4:	4b53      	ldr	r3, [pc, #332]	; (1c204 <prvTraceGetDTS+0x1c8>)
   1c0b6:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   1c0b8:	68fa      	ldr	r2, [r7, #12]
   1c0ba:	4b53      	ldr	r3, [pc, #332]	; (1c208 <prvTraceGetDTS+0x1cc>)
   1c0bc:	681b      	ldr	r3, [r3, #0]
   1c0be:	1ad3      	subs	r3, r2, r3
   1c0c0:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   1c0c2:	68fa      	ldr	r2, [r7, #12]
   1c0c4:	4b50      	ldr	r3, [pc, #320]	; (1c208 <prvTraceGetDTS+0x1cc>)
   1c0c6:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   1c0c8:	4b49      	ldr	r3, [pc, #292]	; (1c1f0 <prvTraceGetDTS+0x1b4>)
   1c0ca:	681b      	ldr	r3, [r3, #0]
   1c0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c0ce:	2b00      	cmp	r3, #0
   1c0d0:	d044      	beq.n	1c15c <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   1c0d2:	4b47      	ldr	r3, [pc, #284]	; (1c1f0 <prvTraceGetDTS+0x1b4>)
   1c0d4:	681b      	ldr	r3, [r3, #0]
   1c0d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1c0d8:	693b      	ldr	r3, [r7, #16]
   1c0da:	429a      	cmp	r2, r3
   1c0dc:	d21e      	bcs.n	1c11c <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   1c0de:	4b44      	ldr	r3, [pc, #272]	; (1c1f0 <prvTraceGetDTS+0x1b4>)
   1c0e0:	681c      	ldr	r4, [r3, #0]
   1c0e2:	4b43      	ldr	r3, [pc, #268]	; (1c1f0 <prvTraceGetDTS+0x1b4>)
   1c0e4:	681b      	ldr	r3, [r3, #0]
   1c0e6:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1c0e8:	4b41      	ldr	r3, [pc, #260]	; (1c1f0 <prvTraceGetDTS+0x1b4>)
   1c0ea:	681b      	ldr	r3, [r3, #0]
   1c0ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1c0ee:	4b47      	ldr	r3, [pc, #284]	; (1c20c <prvTraceGetDTS+0x1d0>)
   1c0f0:	0011      	movs	r1, r2
   1c0f2:	6938      	ldr	r0, [r7, #16]
   1c0f4:	4798      	blx	r3
   1c0f6:	0003      	movs	r3, r0
   1c0f8:	18eb      	adds	r3, r5, r3
   1c0fa:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   1c0fc:	4b3c      	ldr	r3, [pc, #240]	; (1c1f0 <prvTraceGetDTS+0x1b4>)
   1c0fe:	681c      	ldr	r4, [r3, #0]
   1c100:	4b3b      	ldr	r3, [pc, #236]	; (1c1f0 <prvTraceGetDTS+0x1b4>)
   1c102:	681b      	ldr	r3, [r3, #0]
   1c104:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1c106:	4b3a      	ldr	r3, [pc, #232]	; (1c1f0 <prvTraceGetDTS+0x1b4>)
   1c108:	681b      	ldr	r3, [r3, #0]
   1c10a:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1c10c:	693a      	ldr	r2, [r7, #16]
   1c10e:	4b40      	ldr	r3, [pc, #256]	; (1c210 <prvTraceGetDTS+0x1d4>)
   1c110:	0010      	movs	r0, r2
   1c112:	4798      	blx	r3
   1c114:	000b      	movs	r3, r1
   1c116:	18eb      	adds	r3, r5, r3
   1c118:	62a3      	str	r3, [r4, #40]	; 0x28
   1c11a:	e007      	b.n	1c12c <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   1c11c:	4b34      	ldr	r3, [pc, #208]	; (1c1f0 <prvTraceGetDTS+0x1b4>)
   1c11e:	681b      	ldr	r3, [r3, #0]
   1c120:	4a33      	ldr	r2, [pc, #204]	; (1c1f0 <prvTraceGetDTS+0x1b4>)
   1c122:	6812      	ldr	r2, [r2, #0]
   1c124:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1c126:	693a      	ldr	r2, [r7, #16]
   1c128:	188a      	adds	r2, r1, r2
   1c12a:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   1c12c:	4b30      	ldr	r3, [pc, #192]	; (1c1f0 <prvTraceGetDTS+0x1b4>)
   1c12e:	681b      	ldr	r3, [r3, #0]
   1c130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1c132:	4b2f      	ldr	r3, [pc, #188]	; (1c1f0 <prvTraceGetDTS+0x1b4>)
   1c134:	681b      	ldr	r3, [r3, #0]
   1c136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c138:	429a      	cmp	r2, r3
   1c13a:	d313      	bcc.n	1c164 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   1c13c:	4b2c      	ldr	r3, [pc, #176]	; (1c1f0 <prvTraceGetDTS+0x1b4>)
   1c13e:	681b      	ldr	r3, [r3, #0]
   1c140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c142:	3201      	adds	r2, #1
   1c144:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   1c146:	4b2a      	ldr	r3, [pc, #168]	; (1c1f0 <prvTraceGetDTS+0x1b4>)
   1c148:	681b      	ldr	r3, [r3, #0]
   1c14a:	4a29      	ldr	r2, [pc, #164]	; (1c1f0 <prvTraceGetDTS+0x1b4>)
   1c14c:	6812      	ldr	r2, [r2, #0]
   1c14e:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1c150:	4a27      	ldr	r2, [pc, #156]	; (1c1f0 <prvTraceGetDTS+0x1b4>)
   1c152:	6812      	ldr	r2, [r2, #0]
   1c154:	6a52      	ldr	r2, [r2, #36]	; 0x24
   1c156:	1a8a      	subs	r2, r1, r2
   1c158:	629a      	str	r2, [r3, #40]	; 0x28
   1c15a:	e003      	b.n	1c164 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   1c15c:	4b24      	ldr	r3, [pc, #144]	; (1c1f0 <prvTraceGetDTS+0x1b4>)
   1c15e:	681b      	ldr	r3, [r3, #0]
   1c160:	68fa      	ldr	r2, [r7, #12]
   1c162:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   1c164:	1dbb      	adds	r3, r7, #6
   1c166:	881a      	ldrh	r2, [r3, #0]
   1c168:	693b      	ldr	r3, [r7, #16]
   1c16a:	429a      	cmp	r2, r3
   1c16c:	d22f      	bcs.n	1c1ce <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   1c16e:	4b29      	ldr	r3, [pc, #164]	; (1c214 <prvTraceGetDTS+0x1d8>)
   1c170:	4798      	blx	r3
   1c172:	0003      	movs	r3, r0
   1c174:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   1c176:	697b      	ldr	r3, [r7, #20]
   1c178:	2b00      	cmp	r3, #0
   1c17a:	d028      	beq.n	1c1ce <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   1c17c:	1dbb      	adds	r3, r7, #6
   1c17e:	881b      	ldrh	r3, [r3, #0]
   1c180:	4a18      	ldr	r2, [pc, #96]	; (1c1e4 <prvTraceGetDTS+0x1a8>)
   1c182:	4293      	cmp	r3, r2
   1c184:	d10b      	bne.n	1c19e <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   1c186:	697b      	ldr	r3, [r7, #20]
   1c188:	22a9      	movs	r2, #169	; 0xa9
   1c18a:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   1c18c:	693b      	ldr	r3, [r7, #16]
   1c18e:	0c1b      	lsrs	r3, r3, #16
   1c190:	b29a      	uxth	r2, r3
   1c192:	697b      	ldr	r3, [r7, #20]
   1c194:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   1c196:	697b      	ldr	r3, [r7, #20]
   1c198:	2200      	movs	r2, #0
   1c19a:	705a      	strb	r2, [r3, #1]
   1c19c:	e015      	b.n	1c1ca <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   1c19e:	1dbb      	adds	r3, r7, #6
   1c1a0:	881b      	ldrh	r3, [r3, #0]
   1c1a2:	2bff      	cmp	r3, #255	; 0xff
   1c1a4:	d10d      	bne.n	1c1c2 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   1c1a6:	697b      	ldr	r3, [r7, #20]
   1c1a8:	22a8      	movs	r2, #168	; 0xa8
   1c1aa:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   1c1ac:	693b      	ldr	r3, [r7, #16]
   1c1ae:	0a1b      	lsrs	r3, r3, #8
   1c1b0:	b29a      	uxth	r2, r3
   1c1b2:	697b      	ldr	r3, [r7, #20]
   1c1b4:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   1c1b6:	693b      	ldr	r3, [r7, #16]
   1c1b8:	0e1b      	lsrs	r3, r3, #24
   1c1ba:	b2da      	uxtb	r2, r3
   1c1bc:	697b      	ldr	r3, [r7, #20]
   1c1be:	705a      	strb	r2, [r3, #1]
   1c1c0:	e003      	b.n	1c1ca <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   1c1c2:	4b15      	ldr	r3, [pc, #84]	; (1c218 <prvTraceGetDTS+0x1dc>)
   1c1c4:	0018      	movs	r0, r3
   1c1c6:	4b09      	ldr	r3, [pc, #36]	; (1c1ec <prvTraceGetDTS+0x1b0>)
   1c1c8:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   1c1ca:	4b14      	ldr	r3, [pc, #80]	; (1c21c <prvTraceGetDTS+0x1e0>)
   1c1cc:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   1c1ce:	693b      	ldr	r3, [r7, #16]
   1c1d0:	b29b      	uxth	r3, r3
   1c1d2:	1dba      	adds	r2, r7, #6
   1c1d4:	8812      	ldrh	r2, [r2, #0]
   1c1d6:	4013      	ands	r3, r2
   1c1d8:	b29b      	uxth	r3, r3
}
   1c1da:	0018      	movs	r0, r3
   1c1dc:	46bd      	mov	sp, r7
   1c1de:	b006      	add	sp, #24
   1c1e0:	bdb0      	pop	{r4, r5, r7, pc}
   1c1e2:	46c0      	nop			; (mov r8, r8)
   1c1e4:	0000ffff 	.word	0x0000ffff
   1c1e8:	0003b300 	.word	0x0003b300
   1c1ec:	0001be29 	.word	0x0001be29
   1c1f0:	20000c98 	.word	0x20000c98
   1c1f4:	20000bf4 	.word	0x20000bf4
   1c1f8:	e000e018 	.word	0xe000e018
   1c1fc:	20005478 	.word	0x20005478
   1c200:	0002c1c9 	.word	0x0002c1c9
   1c204:	0001c221 	.word	0x0001c221
   1c208:	20000ca4 	.word	0x20000ca4
   1c20c:	00034e15 	.word	0x00034e15
   1c210:	00034f21 	.word	0x00034f21
   1c214:	0001b9e1 	.word	0x0001b9e1
   1c218:	0003b340 	.word	0x0003b340
   1c21c:	0001bfe5 	.word	0x0001bfe5

0001c220 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   1c220:	b580      	push	{r7, lr}
   1c222:	b084      	sub	sp, #16
   1c224:	af00      	add	r7, sp, #0
   1c226:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   1c228:	2300      	movs	r3, #0
   1c22a:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   1c22c:	2300      	movs	r3, #0
   1c22e:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   1c230:	4b2d      	ldr	r3, [pc, #180]	; (1c2e8 <prvTracePortGetTimeStamp+0xc8>)
   1c232:	681b      	ldr	r3, [r3, #0]
   1c234:	2b01      	cmp	r3, #1
   1c236:	d107      	bne.n	1c248 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   1c238:	687b      	ldr	r3, [r7, #4]
   1c23a:	2b00      	cmp	r3, #0
   1c23c:	d04f      	beq.n	1c2de <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   1c23e:	4b2b      	ldr	r3, [pc, #172]	; (1c2ec <prvTracePortGetTimeStamp+0xcc>)
   1c240:	681a      	ldr	r2, [r3, #0]
   1c242:	687b      	ldr	r3, [r7, #4]
   1c244:	601a      	str	r2, [r3, #0]
		return;
   1c246:	e04a      	b.n	1c2de <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   1c248:	4b29      	ldr	r3, [pc, #164]	; (1c2f0 <prvTracePortGetTimeStamp+0xd0>)
   1c24a:	681a      	ldr	r2, [r3, #0]
   1c24c:	4b29      	ldr	r3, [pc, #164]	; (1c2f4 <prvTracePortGetTimeStamp+0xd4>)
   1c24e:	681b      	ldr	r3, [r3, #0]
   1c250:	1ad3      	subs	r3, r2, r3
   1c252:	3301      	adds	r3, #1
   1c254:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   1c256:	4b28      	ldr	r3, [pc, #160]	; (1c2f8 <prvTracePortGetTimeStamp+0xd8>)
   1c258:	681a      	ldr	r2, [r3, #0]
   1c25a:	4b28      	ldr	r3, [pc, #160]	; (1c2fc <prvTracePortGetTimeStamp+0xdc>)
   1c25c:	681b      	ldr	r3, [r3, #0]
   1c25e:	1ad3      	subs	r3, r2, r3
   1c260:	3b01      	subs	r3, #1
   1c262:	2b00      	cmp	r3, #0
   1c264:	db03      	blt.n	1c26e <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   1c266:	4b24      	ldr	r3, [pc, #144]	; (1c2f8 <prvTracePortGetTimeStamp+0xd8>)
   1c268:	681b      	ldr	r3, [r3, #0]
   1c26a:	60fb      	str	r3, [r7, #12]
   1c26c:	e002      	b.n	1c274 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   1c26e:	4b23      	ldr	r3, [pc, #140]	; (1c2fc <prvTracePortGetTimeStamp+0xdc>)
   1c270:	681b      	ldr	r3, [r3, #0]
   1c272:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   1c274:	4b20      	ldr	r3, [pc, #128]	; (1c2f8 <prvTracePortGetTimeStamp+0xd8>)
   1c276:	681b      	ldr	r3, [r3, #0]
   1c278:	68fa      	ldr	r2, [r7, #12]
   1c27a:	429a      	cmp	r2, r3
   1c27c:	d107      	bne.n	1c28e <prvTracePortGetTimeStamp+0x6e>
   1c27e:	4b20      	ldr	r3, [pc, #128]	; (1c300 <prvTracePortGetTimeStamp+0xe0>)
   1c280:	681b      	ldr	r3, [r3, #0]
   1c282:	68ba      	ldr	r2, [r7, #8]
   1c284:	429a      	cmp	r2, r3
   1c286:	d202      	bcs.n	1c28e <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   1c288:	68fb      	ldr	r3, [r7, #12]
   1c28a:	3301      	adds	r3, #1
   1c28c:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   1c28e:	687b      	ldr	r3, [r7, #4]
   1c290:	2b00      	cmp	r3, #0
   1c292:	d016      	beq.n	1c2c2 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   1c294:	4b16      	ldr	r3, [pc, #88]	; (1c2f0 <prvTracePortGetTimeStamp+0xd0>)
   1c296:	681b      	ldr	r3, [r3, #0]
   1c298:	3301      	adds	r3, #1
   1c29a:	089b      	lsrs	r3, r3, #2
   1c29c:	68fa      	ldr	r2, [r7, #12]
   1c29e:	435a      	muls	r2, r3
   1c2a0:	4b12      	ldr	r3, [pc, #72]	; (1c2ec <prvTracePortGetTimeStamp+0xcc>)
   1c2a2:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   1c2a4:	4b12      	ldr	r3, [pc, #72]	; (1c2f0 <prvTracePortGetTimeStamp+0xd0>)
   1c2a6:	681b      	ldr	r3, [r3, #0]
   1c2a8:	3301      	adds	r3, #1
   1c2aa:	2203      	movs	r2, #3
   1c2ac:	4013      	ands	r3, r2
   1c2ae:	68fa      	ldr	r2, [r7, #12]
   1c2b0:	435a      	muls	r2, r3
   1c2b2:	68bb      	ldr	r3, [r7, #8]
   1c2b4:	18d3      	adds	r3, r2, r3
   1c2b6:	089a      	lsrs	r2, r3, #2
   1c2b8:	4b0c      	ldr	r3, [pc, #48]	; (1c2ec <prvTracePortGetTimeStamp+0xcc>)
   1c2ba:	681b      	ldr	r3, [r3, #0]
   1c2bc:	18d2      	adds	r2, r2, r3
   1c2be:	4b0b      	ldr	r3, [pc, #44]	; (1c2ec <prvTracePortGetTimeStamp+0xcc>)
   1c2c0:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   1c2c2:	4b0d      	ldr	r3, [pc, #52]	; (1c2f8 <prvTracePortGetTimeStamp+0xd8>)
   1c2c4:	68fa      	ldr	r2, [r7, #12]
   1c2c6:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   1c2c8:	687b      	ldr	r3, [r7, #4]
   1c2ca:	2b00      	cmp	r3, #0
   1c2cc:	d003      	beq.n	1c2d6 <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   1c2ce:	4b07      	ldr	r3, [pc, #28]	; (1c2ec <prvTracePortGetTimeStamp+0xcc>)
   1c2d0:	681a      	ldr	r2, [r3, #0]
   1c2d2:	687b      	ldr	r3, [r7, #4]
   1c2d4:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1c2d6:	4b0a      	ldr	r3, [pc, #40]	; (1c300 <prvTracePortGetTimeStamp+0xe0>)
   1c2d8:	68ba      	ldr	r2, [r7, #8]
   1c2da:	601a      	str	r2, [r3, #0]
   1c2dc:	e000      	b.n	1c2e0 <prvTracePortGetTimeStamp+0xc0>
		return;
   1c2de:	46c0      	nop			; (mov r8, r8)
}
   1c2e0:	46bd      	mov	sp, r7
   1c2e2:	b004      	add	sp, #16
   1c2e4:	bd80      	pop	{r7, pc}
   1c2e6:	46c0      	nop			; (mov r8, r8)
   1c2e8:	20000be4 	.word	0x20000be4
   1c2ec:	20000be8 	.word	0x20000be8
   1c2f0:	e000e014 	.word	0xe000e014
   1c2f4:	e000e018 	.word	0xe000e018
   1c2f8:	20000ca8 	.word	0x20000ca8
   1c2fc:	20000be0 	.word	0x20000be0
   1c300:	20000cac 	.word	0x20000cac

0001c304 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1c304:	b580      	push	{r7, lr}
   1c306:	b082      	sub	sp, #8
   1c308:	af00      	add	r7, sp, #0
   1c30a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1c30c:	687b      	ldr	r3, [r7, #4]
   1c30e:	3308      	adds	r3, #8
   1c310:	001a      	movs	r2, r3
   1c312:	687b      	ldr	r3, [r7, #4]
   1c314:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1c316:	687b      	ldr	r3, [r7, #4]
   1c318:	2201      	movs	r2, #1
   1c31a:	4252      	negs	r2, r2
   1c31c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1c31e:	687b      	ldr	r3, [r7, #4]
   1c320:	3308      	adds	r3, #8
   1c322:	001a      	movs	r2, r3
   1c324:	687b      	ldr	r3, [r7, #4]
   1c326:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1c328:	687b      	ldr	r3, [r7, #4]
   1c32a:	3308      	adds	r3, #8
   1c32c:	001a      	movs	r2, r3
   1c32e:	687b      	ldr	r3, [r7, #4]
   1c330:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1c332:	687b      	ldr	r3, [r7, #4]
   1c334:	2200      	movs	r2, #0
   1c336:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1c338:	46c0      	nop			; (mov r8, r8)
   1c33a:	46bd      	mov	sp, r7
   1c33c:	b002      	add	sp, #8
   1c33e:	bd80      	pop	{r7, pc}

0001c340 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1c340:	b580      	push	{r7, lr}
   1c342:	b082      	sub	sp, #8
   1c344:	af00      	add	r7, sp, #0
   1c346:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1c348:	687b      	ldr	r3, [r7, #4]
   1c34a:	2200      	movs	r2, #0
   1c34c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1c34e:	46c0      	nop			; (mov r8, r8)
   1c350:	46bd      	mov	sp, r7
   1c352:	b002      	add	sp, #8
   1c354:	bd80      	pop	{r7, pc}

0001c356 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1c356:	b580      	push	{r7, lr}
   1c358:	b084      	sub	sp, #16
   1c35a:	af00      	add	r7, sp, #0
   1c35c:	6078      	str	r0, [r7, #4]
   1c35e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1c360:	687b      	ldr	r3, [r7, #4]
   1c362:	685b      	ldr	r3, [r3, #4]
   1c364:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1c366:	683b      	ldr	r3, [r7, #0]
   1c368:	68fa      	ldr	r2, [r7, #12]
   1c36a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1c36c:	68fb      	ldr	r3, [r7, #12]
   1c36e:	689a      	ldr	r2, [r3, #8]
   1c370:	683b      	ldr	r3, [r7, #0]
   1c372:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1c374:	68fb      	ldr	r3, [r7, #12]
   1c376:	689b      	ldr	r3, [r3, #8]
   1c378:	683a      	ldr	r2, [r7, #0]
   1c37a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1c37c:	68fb      	ldr	r3, [r7, #12]
   1c37e:	683a      	ldr	r2, [r7, #0]
   1c380:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1c382:	683b      	ldr	r3, [r7, #0]
   1c384:	687a      	ldr	r2, [r7, #4]
   1c386:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1c388:	687b      	ldr	r3, [r7, #4]
   1c38a:	681b      	ldr	r3, [r3, #0]
   1c38c:	1c5a      	adds	r2, r3, #1
   1c38e:	687b      	ldr	r3, [r7, #4]
   1c390:	601a      	str	r2, [r3, #0]
}
   1c392:	46c0      	nop			; (mov r8, r8)
   1c394:	46bd      	mov	sp, r7
   1c396:	b004      	add	sp, #16
   1c398:	bd80      	pop	{r7, pc}

0001c39a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1c39a:	b580      	push	{r7, lr}
   1c39c:	b084      	sub	sp, #16
   1c39e:	af00      	add	r7, sp, #0
   1c3a0:	6078      	str	r0, [r7, #4]
   1c3a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1c3a4:	683b      	ldr	r3, [r7, #0]
   1c3a6:	681b      	ldr	r3, [r3, #0]
   1c3a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1c3aa:	68bb      	ldr	r3, [r7, #8]
   1c3ac:	3301      	adds	r3, #1
   1c3ae:	d103      	bne.n	1c3b8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1c3b0:	687b      	ldr	r3, [r7, #4]
   1c3b2:	691b      	ldr	r3, [r3, #16]
   1c3b4:	60fb      	str	r3, [r7, #12]
   1c3b6:	e00c      	b.n	1c3d2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1c3b8:	687b      	ldr	r3, [r7, #4]
   1c3ba:	3308      	adds	r3, #8
   1c3bc:	60fb      	str	r3, [r7, #12]
   1c3be:	e002      	b.n	1c3c6 <vListInsert+0x2c>
   1c3c0:	68fb      	ldr	r3, [r7, #12]
   1c3c2:	685b      	ldr	r3, [r3, #4]
   1c3c4:	60fb      	str	r3, [r7, #12]
   1c3c6:	68fb      	ldr	r3, [r7, #12]
   1c3c8:	685b      	ldr	r3, [r3, #4]
   1c3ca:	681a      	ldr	r2, [r3, #0]
   1c3cc:	68bb      	ldr	r3, [r7, #8]
   1c3ce:	429a      	cmp	r2, r3
   1c3d0:	d9f6      	bls.n	1c3c0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1c3d2:	68fb      	ldr	r3, [r7, #12]
   1c3d4:	685a      	ldr	r2, [r3, #4]
   1c3d6:	683b      	ldr	r3, [r7, #0]
   1c3d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1c3da:	683b      	ldr	r3, [r7, #0]
   1c3dc:	685b      	ldr	r3, [r3, #4]
   1c3de:	683a      	ldr	r2, [r7, #0]
   1c3e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1c3e2:	683b      	ldr	r3, [r7, #0]
   1c3e4:	68fa      	ldr	r2, [r7, #12]
   1c3e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1c3e8:	68fb      	ldr	r3, [r7, #12]
   1c3ea:	683a      	ldr	r2, [r7, #0]
   1c3ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1c3ee:	683b      	ldr	r3, [r7, #0]
   1c3f0:	687a      	ldr	r2, [r7, #4]
   1c3f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1c3f4:	687b      	ldr	r3, [r7, #4]
   1c3f6:	681b      	ldr	r3, [r3, #0]
   1c3f8:	1c5a      	adds	r2, r3, #1
   1c3fa:	687b      	ldr	r3, [r7, #4]
   1c3fc:	601a      	str	r2, [r3, #0]
}
   1c3fe:	46c0      	nop			; (mov r8, r8)
   1c400:	46bd      	mov	sp, r7
   1c402:	b004      	add	sp, #16
   1c404:	bd80      	pop	{r7, pc}

0001c406 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1c406:	b580      	push	{r7, lr}
   1c408:	b084      	sub	sp, #16
   1c40a:	af00      	add	r7, sp, #0
   1c40c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1c40e:	687b      	ldr	r3, [r7, #4]
   1c410:	691b      	ldr	r3, [r3, #16]
   1c412:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1c414:	687b      	ldr	r3, [r7, #4]
   1c416:	685b      	ldr	r3, [r3, #4]
   1c418:	687a      	ldr	r2, [r7, #4]
   1c41a:	6892      	ldr	r2, [r2, #8]
   1c41c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1c41e:	687b      	ldr	r3, [r7, #4]
   1c420:	689b      	ldr	r3, [r3, #8]
   1c422:	687a      	ldr	r2, [r7, #4]
   1c424:	6852      	ldr	r2, [r2, #4]
   1c426:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1c428:	68fb      	ldr	r3, [r7, #12]
   1c42a:	685a      	ldr	r2, [r3, #4]
   1c42c:	687b      	ldr	r3, [r7, #4]
   1c42e:	429a      	cmp	r2, r3
   1c430:	d103      	bne.n	1c43a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1c432:	687b      	ldr	r3, [r7, #4]
   1c434:	689a      	ldr	r2, [r3, #8]
   1c436:	68fb      	ldr	r3, [r7, #12]
   1c438:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1c43a:	687b      	ldr	r3, [r7, #4]
   1c43c:	2200      	movs	r2, #0
   1c43e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1c440:	68fb      	ldr	r3, [r7, #12]
   1c442:	681b      	ldr	r3, [r3, #0]
   1c444:	1e5a      	subs	r2, r3, #1
   1c446:	68fb      	ldr	r3, [r7, #12]
   1c448:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1c44a:	68fb      	ldr	r3, [r7, #12]
   1c44c:	681b      	ldr	r3, [r3, #0]
}
   1c44e:	0018      	movs	r0, r3
   1c450:	46bd      	mov	sp, r7
   1c452:	b004      	add	sp, #16
   1c454:	bd80      	pop	{r7, pc}
	...

0001c458 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1c458:	b580      	push	{r7, lr}
   1c45a:	b084      	sub	sp, #16
   1c45c:	af00      	add	r7, sp, #0
   1c45e:	60f8      	str	r0, [r7, #12]
   1c460:	60b9      	str	r1, [r7, #8]
   1c462:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1c464:	68fb      	ldr	r3, [r7, #12]
   1c466:	3b04      	subs	r3, #4
   1c468:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1c46a:	68fb      	ldr	r3, [r7, #12]
   1c46c:	2280      	movs	r2, #128	; 0x80
   1c46e:	0452      	lsls	r2, r2, #17
   1c470:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1c472:	68fb      	ldr	r3, [r7, #12]
   1c474:	3b04      	subs	r3, #4
   1c476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1c478:	68ba      	ldr	r2, [r7, #8]
   1c47a:	68fb      	ldr	r3, [r7, #12]
   1c47c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1c47e:	68fb      	ldr	r3, [r7, #12]
   1c480:	3b04      	subs	r3, #4
   1c482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1c484:	4a08      	ldr	r2, [pc, #32]	; (1c4a8 <pxPortInitialiseStack+0x50>)
   1c486:	68fb      	ldr	r3, [r7, #12]
   1c488:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1c48a:	68fb      	ldr	r3, [r7, #12]
   1c48c:	3b14      	subs	r3, #20
   1c48e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1c490:	687a      	ldr	r2, [r7, #4]
   1c492:	68fb      	ldr	r3, [r7, #12]
   1c494:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1c496:	68fb      	ldr	r3, [r7, #12]
   1c498:	3b20      	subs	r3, #32
   1c49a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1c49c:	68fb      	ldr	r3, [r7, #12]
}
   1c49e:	0018      	movs	r0, r3
   1c4a0:	46bd      	mov	sp, r7
   1c4a2:	b004      	add	sp, #16
   1c4a4:	bd80      	pop	{r7, pc}
   1c4a6:	46c0      	nop			; (mov r8, r8)
   1c4a8:	0001c4ad 	.word	0x0001c4ad

0001c4ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1c4ac:	b580      	push	{r7, lr}
   1c4ae:	b082      	sub	sp, #8
   1c4b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1c4b2:	2300      	movs	r3, #0
   1c4b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1c4b6:	4b07      	ldr	r3, [pc, #28]	; (1c4d4 <prvTaskExitError+0x28>)
   1c4b8:	681b      	ldr	r3, [r3, #0]
   1c4ba:	3301      	adds	r3, #1
   1c4bc:	d001      	beq.n	1c4c2 <prvTaskExitError+0x16>
   1c4be:	b672      	cpsid	i
   1c4c0:	e7fe      	b.n	1c4c0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1c4c2:	b672      	cpsid	i
	while( ulDummy == 0 )
   1c4c4:	46c0      	nop			; (mov r8, r8)
   1c4c6:	687b      	ldr	r3, [r7, #4]
   1c4c8:	2b00      	cmp	r3, #0
   1c4ca:	d0fc      	beq.n	1c4c6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1c4cc:	46c0      	nop			; (mov r8, r8)
   1c4ce:	46bd      	mov	sp, r7
   1c4d0:	b002      	add	sp, #8
   1c4d2:	bd80      	pop	{r7, pc}
   1c4d4:	2000011c 	.word	0x2000011c

0001c4d8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1c4d8:	b580      	push	{r7, lr}
   1c4da:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1c4dc:	46c0      	nop			; (mov r8, r8)
   1c4de:	46bd      	mov	sp, r7
   1c4e0:	bd80      	pop	{r7, pc}
	...

0001c4f0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1c4f0:	4a0b      	ldr	r2, [pc, #44]	; (1c520 <pxCurrentTCBConst2>)
   1c4f2:	6813      	ldr	r3, [r2, #0]
   1c4f4:	6818      	ldr	r0, [r3, #0]
   1c4f6:	3020      	adds	r0, #32
   1c4f8:	f380 8809 	msr	PSP, r0
   1c4fc:	2002      	movs	r0, #2
   1c4fe:	f380 8814 	msr	CONTROL, r0
   1c502:	f3bf 8f6f 	isb	sy
   1c506:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1c508:	46ae      	mov	lr, r5
   1c50a:	bc08      	pop	{r3}
   1c50c:	bc04      	pop	{r2}
   1c50e:	b662      	cpsie	i
   1c510:	4718      	bx	r3
   1c512:	46c0      	nop			; (mov r8, r8)
   1c514:	46c0      	nop			; (mov r8, r8)
   1c516:	46c0      	nop			; (mov r8, r8)
   1c518:	46c0      	nop			; (mov r8, r8)
   1c51a:	46c0      	nop			; (mov r8, r8)
   1c51c:	46c0      	nop			; (mov r8, r8)
   1c51e:	46c0      	nop			; (mov r8, r8)

0001c520 <pxCurrentTCBConst2>:
   1c520:	20003f80 	.word	0x20003f80
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1c524:	46c0      	nop			; (mov r8, r8)
   1c526:	46c0      	nop			; (mov r8, r8)

0001c528 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1c528:	b580      	push	{r7, lr}
   1c52a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1c52c:	4b0e      	ldr	r3, [pc, #56]	; (1c568 <xPortStartScheduler+0x40>)
   1c52e:	4a0e      	ldr	r2, [pc, #56]	; (1c568 <xPortStartScheduler+0x40>)
   1c530:	6812      	ldr	r2, [r2, #0]
   1c532:	21ff      	movs	r1, #255	; 0xff
   1c534:	0409      	lsls	r1, r1, #16
   1c536:	430a      	orrs	r2, r1
   1c538:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1c53a:	4b0b      	ldr	r3, [pc, #44]	; (1c568 <xPortStartScheduler+0x40>)
   1c53c:	4a0a      	ldr	r2, [pc, #40]	; (1c568 <xPortStartScheduler+0x40>)
   1c53e:	6812      	ldr	r2, [r2, #0]
   1c540:	21ff      	movs	r1, #255	; 0xff
   1c542:	0609      	lsls	r1, r1, #24
   1c544:	430a      	orrs	r2, r1
   1c546:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1c548:	4b08      	ldr	r3, [pc, #32]	; (1c56c <xPortStartScheduler+0x44>)
   1c54a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1c54c:	4b08      	ldr	r3, [pc, #32]	; (1c570 <xPortStartScheduler+0x48>)
   1c54e:	2200      	movs	r2, #0
   1c550:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1c552:	4b08      	ldr	r3, [pc, #32]	; (1c574 <xPortStartScheduler+0x4c>)
   1c554:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1c556:	4b08      	ldr	r3, [pc, #32]	; (1c578 <xPortStartScheduler+0x50>)
   1c558:	4798      	blx	r3
	prvTaskExitError();
   1c55a:	4b08      	ldr	r3, [pc, #32]	; (1c57c <xPortStartScheduler+0x54>)
   1c55c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1c55e:	2300      	movs	r3, #0
}
   1c560:	0018      	movs	r0, r3
   1c562:	46bd      	mov	sp, r7
   1c564:	bd80      	pop	{r7, pc}
   1c566:	46c0      	nop			; (mov r8, r8)
   1c568:	e000ed20 	.word	0xe000ed20
   1c56c:	0001c689 	.word	0x0001c689
   1c570:	2000011c 	.word	0x2000011c
   1c574:	0001c4f1 	.word	0x0001c4f1
   1c578:	0001ebe5 	.word	0x0001ebe5
   1c57c:	0001c4ad 	.word	0x0001c4ad

0001c580 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1c580:	b580      	push	{r7, lr}
   1c582:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1c584:	4b03      	ldr	r3, [pc, #12]	; (1c594 <vPortYield+0x14>)
   1c586:	2280      	movs	r2, #128	; 0x80
   1c588:	0552      	lsls	r2, r2, #21
   1c58a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1c58c:	46c0      	nop			; (mov r8, r8)
   1c58e:	46bd      	mov	sp, r7
   1c590:	bd80      	pop	{r7, pc}
   1c592:	46c0      	nop			; (mov r8, r8)
   1c594:	e000ed04 	.word	0xe000ed04

0001c598 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1c598:	b580      	push	{r7, lr}
   1c59a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1c59c:	b672      	cpsid	i
    uxCriticalNesting++;
   1c59e:	4b06      	ldr	r3, [pc, #24]	; (1c5b8 <vPortEnterCritical+0x20>)
   1c5a0:	681b      	ldr	r3, [r3, #0]
   1c5a2:	1c5a      	adds	r2, r3, #1
   1c5a4:	4b04      	ldr	r3, [pc, #16]	; (1c5b8 <vPortEnterCritical+0x20>)
   1c5a6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1c5a8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1c5ac:	f3bf 8f6f 	isb	sy
}
   1c5b0:	46c0      	nop			; (mov r8, r8)
   1c5b2:	46bd      	mov	sp, r7
   1c5b4:	bd80      	pop	{r7, pc}
   1c5b6:	46c0      	nop			; (mov r8, r8)
   1c5b8:	2000011c 	.word	0x2000011c

0001c5bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1c5bc:	b580      	push	{r7, lr}
   1c5be:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1c5c0:	4b09      	ldr	r3, [pc, #36]	; (1c5e8 <vPortExitCritical+0x2c>)
   1c5c2:	681b      	ldr	r3, [r3, #0]
   1c5c4:	2b00      	cmp	r3, #0
   1c5c6:	d101      	bne.n	1c5cc <vPortExitCritical+0x10>
   1c5c8:	b672      	cpsid	i
   1c5ca:	e7fe      	b.n	1c5ca <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1c5cc:	4b06      	ldr	r3, [pc, #24]	; (1c5e8 <vPortExitCritical+0x2c>)
   1c5ce:	681b      	ldr	r3, [r3, #0]
   1c5d0:	1e5a      	subs	r2, r3, #1
   1c5d2:	4b05      	ldr	r3, [pc, #20]	; (1c5e8 <vPortExitCritical+0x2c>)
   1c5d4:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1c5d6:	4b04      	ldr	r3, [pc, #16]	; (1c5e8 <vPortExitCritical+0x2c>)
   1c5d8:	681b      	ldr	r3, [r3, #0]
   1c5da:	2b00      	cmp	r3, #0
   1c5dc:	d100      	bne.n	1c5e0 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1c5de:	b662      	cpsie	i
    }
}
   1c5e0:	46c0      	nop			; (mov r8, r8)
   1c5e2:	46bd      	mov	sp, r7
   1c5e4:	bd80      	pop	{r7, pc}
   1c5e6:	46c0      	nop			; (mov r8, r8)
   1c5e8:	2000011c 	.word	0x2000011c

0001c5ec <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1c5ec:	f3ef 8010 	mrs	r0, PRIMASK
   1c5f0:	b672      	cpsid	i
   1c5f2:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1c5f4:	46c0      	nop			; (mov r8, r8)
   1c5f6:	0018      	movs	r0, r3

0001c5f8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1c5f8:	f380 8810 	msr	PRIMASK, r0
   1c5fc:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1c5fe:	46c0      	nop			; (mov r8, r8)

0001c600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1c600:	f3ef 8009 	mrs	r0, PSP
   1c604:	4b0e      	ldr	r3, [pc, #56]	; (1c640 <pxCurrentTCBConst>)
   1c606:	681a      	ldr	r2, [r3, #0]
   1c608:	3820      	subs	r0, #32
   1c60a:	6010      	str	r0, [r2, #0]
   1c60c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1c60e:	4644      	mov	r4, r8
   1c610:	464d      	mov	r5, r9
   1c612:	4656      	mov	r6, sl
   1c614:	465f      	mov	r7, fp
   1c616:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1c618:	b508      	push	{r3, lr}
   1c61a:	b672      	cpsid	i
   1c61c:	f002 fae2 	bl	1ebe4 <vTaskSwitchContext>
   1c620:	b662      	cpsie	i
   1c622:	bc0c      	pop	{r2, r3}
   1c624:	6811      	ldr	r1, [r2, #0]
   1c626:	6808      	ldr	r0, [r1, #0]
   1c628:	3010      	adds	r0, #16
   1c62a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1c62c:	46a0      	mov	r8, r4
   1c62e:	46a9      	mov	r9, r5
   1c630:	46b2      	mov	sl, r6
   1c632:	46bb      	mov	fp, r7
   1c634:	f380 8809 	msr	PSP, r0
   1c638:	3820      	subs	r0, #32
   1c63a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1c63c:	4718      	bx	r3
   1c63e:	46c0      	nop			; (mov r8, r8)

0001c640 <pxCurrentTCBConst>:
   1c640:	20003f80 	.word	0x20003f80
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1c644:	46c0      	nop			; (mov r8, r8)
   1c646:	46c0      	nop			; (mov r8, r8)

0001c648 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1c648:	b580      	push	{r7, lr}
   1c64a:	b082      	sub	sp, #8
   1c64c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1c64e:	4b0a      	ldr	r3, [pc, #40]	; (1c678 <SysTick_Handler+0x30>)
   1c650:	4798      	blx	r3
   1c652:	0003      	movs	r3, r0
   1c654:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1c656:	4b09      	ldr	r3, [pc, #36]	; (1c67c <SysTick_Handler+0x34>)
   1c658:	4798      	blx	r3
   1c65a:	1e03      	subs	r3, r0, #0
   1c65c:	d003      	beq.n	1c666 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1c65e:	4b08      	ldr	r3, [pc, #32]	; (1c680 <SysTick_Handler+0x38>)
   1c660:	2280      	movs	r2, #128	; 0x80
   1c662:	0552      	lsls	r2, r2, #21
   1c664:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1c666:	687b      	ldr	r3, [r7, #4]
   1c668:	0018      	movs	r0, r3
   1c66a:	4b06      	ldr	r3, [pc, #24]	; (1c684 <SysTick_Handler+0x3c>)
   1c66c:	4798      	blx	r3
}
   1c66e:	46c0      	nop			; (mov r8, r8)
   1c670:	46bd      	mov	sp, r7
   1c672:	b002      	add	sp, #8
   1c674:	bd80      	pop	{r7, pc}
   1c676:	46c0      	nop			; (mov r8, r8)
   1c678:	0001c5ed 	.word	0x0001c5ed
   1c67c:	0001e9f5 	.word	0x0001e9f5
   1c680:	e000ed04 	.word	0xe000ed04
   1c684:	0001c5f9 	.word	0x0001c5f9

0001c688 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1c688:	b5b0      	push	{r4, r5, r7, lr}
   1c68a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1c68c:	4b0b      	ldr	r3, [pc, #44]	; (1c6bc <prvSetupTimerInterrupt+0x34>)
   1c68e:	2200      	movs	r2, #0
   1c690:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1c692:	4b0b      	ldr	r3, [pc, #44]	; (1c6c0 <prvSetupTimerInterrupt+0x38>)
   1c694:	2200      	movs	r2, #0
   1c696:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1c698:	4c0a      	ldr	r4, [pc, #40]	; (1c6c4 <prvSetupTimerInterrupt+0x3c>)
   1c69a:	2000      	movs	r0, #0
   1c69c:	4b0a      	ldr	r3, [pc, #40]	; (1c6c8 <prvSetupTimerInterrupt+0x40>)
   1c69e:	4798      	blx	r3
   1c6a0:	4b0a      	ldr	r3, [pc, #40]	; (1c6cc <prvSetupTimerInterrupt+0x44>)
   1c6a2:	22fa      	movs	r2, #250	; 0xfa
   1c6a4:	0091      	lsls	r1, r2, #2
   1c6a6:	4798      	blx	r3
   1c6a8:	0003      	movs	r3, r0
   1c6aa:	3b01      	subs	r3, #1
   1c6ac:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1c6ae:	4b03      	ldr	r3, [pc, #12]	; (1c6bc <prvSetupTimerInterrupt+0x34>)
   1c6b0:	2207      	movs	r2, #7
   1c6b2:	601a      	str	r2, [r3, #0]
}
   1c6b4:	46c0      	nop			; (mov r8, r8)
   1c6b6:	46bd      	mov	sp, r7
   1c6b8:	bdb0      	pop	{r4, r5, r7, pc}
   1c6ba:	46c0      	nop			; (mov r8, r8)
   1c6bc:	e000e010 	.word	0xe000e010
   1c6c0:	e000e018 	.word	0xe000e018
   1c6c4:	e000e014 	.word	0xe000e014
   1c6c8:	0002c1c9 	.word	0x0002c1c9
   1c6cc:	00034e15 	.word	0x00034e15

0001c6d0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1c6d0:	b580      	push	{r7, lr}
   1c6d2:	b084      	sub	sp, #16
   1c6d4:	af00      	add	r7, sp, #0
   1c6d6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   1c6d8:	2300      	movs	r3, #0
   1c6da:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1c6dc:	687b      	ldr	r3, [r7, #4]
   1c6de:	2207      	movs	r2, #7
   1c6e0:	4013      	ands	r3, r2
   1c6e2:	d004      	beq.n	1c6ee <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1c6e4:	687b      	ldr	r3, [r7, #4]
   1c6e6:	2207      	movs	r2, #7
   1c6e8:	4393      	bics	r3, r2
   1c6ea:	3308      	adds	r3, #8
   1c6ec:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1c6ee:	4b21      	ldr	r3, [pc, #132]	; (1c774 <pvPortMalloc+0xa4>)
   1c6f0:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   1c6f2:	4b21      	ldr	r3, [pc, #132]	; (1c778 <pvPortMalloc+0xa8>)
   1c6f4:	681b      	ldr	r3, [r3, #0]
   1c6f6:	2b00      	cmp	r3, #0
   1c6f8:	d105      	bne.n	1c706 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1c6fa:	4b20      	ldr	r3, [pc, #128]	; (1c77c <pvPortMalloc+0xac>)
   1c6fc:	2207      	movs	r2, #7
   1c6fe:	4393      	bics	r3, r2
   1c700:	001a      	movs	r2, r3
   1c702:	4b1d      	ldr	r3, [pc, #116]	; (1c778 <pvPortMalloc+0xa8>)
   1c704:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1c706:	4b1e      	ldr	r3, [pc, #120]	; (1c780 <pvPortMalloc+0xb0>)
   1c708:	681a      	ldr	r2, [r3, #0]
   1c70a:	687b      	ldr	r3, [r7, #4]
   1c70c:	18d3      	adds	r3, r2, r3
   1c70e:	4a1d      	ldr	r2, [pc, #116]	; (1c784 <pvPortMalloc+0xb4>)
   1c710:	4293      	cmp	r3, r2
   1c712:	d813      	bhi.n	1c73c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   1c714:	4b1a      	ldr	r3, [pc, #104]	; (1c780 <pvPortMalloc+0xb0>)
   1c716:	681a      	ldr	r2, [r3, #0]
   1c718:	687b      	ldr	r3, [r7, #4]
   1c71a:	18d2      	adds	r2, r2, r3
   1c71c:	4b18      	ldr	r3, [pc, #96]	; (1c780 <pvPortMalloc+0xb0>)
   1c71e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1c720:	429a      	cmp	r2, r3
   1c722:	d90b      	bls.n	1c73c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1c724:	4b14      	ldr	r3, [pc, #80]	; (1c778 <pvPortMalloc+0xa8>)
   1c726:	681a      	ldr	r2, [r3, #0]
   1c728:	4b15      	ldr	r3, [pc, #84]	; (1c780 <pvPortMalloc+0xb0>)
   1c72a:	681b      	ldr	r3, [r3, #0]
   1c72c:	18d3      	adds	r3, r2, r3
   1c72e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   1c730:	4b13      	ldr	r3, [pc, #76]	; (1c780 <pvPortMalloc+0xb0>)
   1c732:	681a      	ldr	r2, [r3, #0]
   1c734:	687b      	ldr	r3, [r7, #4]
   1c736:	18d2      	adds	r2, r2, r3
   1c738:	4b11      	ldr	r3, [pc, #68]	; (1c780 <pvPortMalloc+0xb0>)
   1c73a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1c73c:	68fb      	ldr	r3, [r7, #12]
   1c73e:	2b00      	cmp	r3, #0
   1c740:	d006      	beq.n	1c750 <pvPortMalloc+0x80>
   1c742:	68fb      	ldr	r3, [r7, #12]
   1c744:	687a      	ldr	r2, [r7, #4]
   1c746:	0019      	movs	r1, r3
   1c748:	2094      	movs	r0, #148	; 0x94
   1c74a:	4b0f      	ldr	r3, [pc, #60]	; (1c788 <pvPortMalloc+0xb8>)
   1c74c:	4798      	blx	r3
   1c74e:	e005      	b.n	1c75c <pvPortMalloc+0x8c>
   1c750:	68fb      	ldr	r3, [r7, #12]
   1c752:	687a      	ldr	r2, [r7, #4]
   1c754:	0019      	movs	r1, r3
   1c756:	20e8      	movs	r0, #232	; 0xe8
   1c758:	4b0b      	ldr	r3, [pc, #44]	; (1c788 <pvPortMalloc+0xb8>)
   1c75a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1c75c:	4b0b      	ldr	r3, [pc, #44]	; (1c78c <pvPortMalloc+0xbc>)
   1c75e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1c760:	68fb      	ldr	r3, [r7, #12]
   1c762:	2b00      	cmp	r3, #0
   1c764:	d101      	bne.n	1c76a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1c766:	4b0a      	ldr	r3, [pc, #40]	; (1c790 <pvPortMalloc+0xc0>)
   1c768:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1c76a:	68fb      	ldr	r3, [r7, #12]
}
   1c76c:	0018      	movs	r0, r3
   1c76e:	46bd      	mov	sp, r7
   1c770:	b004      	add	sp, #16
   1c772:	bd80      	pop	{r7, pc}
   1c774:	0001e851 	.word	0x0001e851
   1c778:	20003f7c 	.word	0x20003f7c
   1c77c:	20000cb8 	.word	0x20000cb8
   1c780:	20003f78 	.word	0x20003f78
   1c784:	000032bf 	.word	0x000032bf
   1c788:	0001ae35 	.word	0x0001ae35
   1c78c:	0001e869 	.word	0x0001e869
   1c790:	00034de5 	.word	0x00034de5

0001c794 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1c794:	b580      	push	{r7, lr}
   1c796:	b082      	sub	sp, #8
   1c798:	af00      	add	r7, sp, #0
   1c79a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1c79c:	687b      	ldr	r3, [r7, #4]
   1c79e:	2b00      	cmp	r3, #0
   1c7a0:	d001      	beq.n	1c7a6 <vPortFree+0x12>
   1c7a2:	b672      	cpsid	i
   1c7a4:	e7fe      	b.n	1c7a4 <vPortFree+0x10>
}
   1c7a6:	46c0      	nop			; (mov r8, r8)
   1c7a8:	46bd      	mov	sp, r7
   1c7aa:	b002      	add	sp, #8
   1c7ac:	bd80      	pop	{r7, pc}
	...

0001c7b0 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1c7b0:	b580      	push	{r7, lr}
   1c7b2:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   1c7b4:	4b03      	ldr	r3, [pc, #12]	; (1c7c4 <xPortGetFreeHeapSize+0x14>)
   1c7b6:	681b      	ldr	r3, [r3, #0]
   1c7b8:	22cb      	movs	r2, #203	; 0xcb
   1c7ba:	0192      	lsls	r2, r2, #6
   1c7bc:	1ad3      	subs	r3, r2, r3
}
   1c7be:	0018      	movs	r0, r3
   1c7c0:	46bd      	mov	sp, r7
   1c7c2:	bd80      	pop	{r7, pc}
   1c7c4:	20003f78 	.word	0x20003f78

0001c7c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1c7c8:	b580      	push	{r7, lr}
   1c7ca:	b084      	sub	sp, #16
   1c7cc:	af00      	add	r7, sp, #0
   1c7ce:	6078      	str	r0, [r7, #4]
   1c7d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1c7d2:	687b      	ldr	r3, [r7, #4]
   1c7d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1c7d6:	68fb      	ldr	r3, [r7, #12]
   1c7d8:	2b00      	cmp	r3, #0
   1c7da:	d101      	bne.n	1c7e0 <xQueueGenericReset+0x18>
   1c7dc:	b672      	cpsid	i
   1c7de:	e7fe      	b.n	1c7de <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1c7e0:	4b23      	ldr	r3, [pc, #140]	; (1c870 <xQueueGenericReset+0xa8>)
   1c7e2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1c7e4:	68fb      	ldr	r3, [r7, #12]
   1c7e6:	681a      	ldr	r2, [r3, #0]
   1c7e8:	68fb      	ldr	r3, [r7, #12]
   1c7ea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1c7ec:	68fb      	ldr	r3, [r7, #12]
   1c7ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c7f0:	434b      	muls	r3, r1
   1c7f2:	18d2      	adds	r2, r2, r3
   1c7f4:	68fb      	ldr	r3, [r7, #12]
   1c7f6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1c7f8:	68fb      	ldr	r3, [r7, #12]
   1c7fa:	2200      	movs	r2, #0
   1c7fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1c7fe:	68fb      	ldr	r3, [r7, #12]
   1c800:	681a      	ldr	r2, [r3, #0]
   1c802:	68fb      	ldr	r3, [r7, #12]
   1c804:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1c806:	68fb      	ldr	r3, [r7, #12]
   1c808:	681a      	ldr	r2, [r3, #0]
   1c80a:	68fb      	ldr	r3, [r7, #12]
   1c80c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c80e:	1e59      	subs	r1, r3, #1
   1c810:	68fb      	ldr	r3, [r7, #12]
   1c812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c814:	434b      	muls	r3, r1
   1c816:	18d2      	adds	r2, r2, r3
   1c818:	68fb      	ldr	r3, [r7, #12]
   1c81a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1c81c:	68fb      	ldr	r3, [r7, #12]
   1c81e:	2244      	movs	r2, #68	; 0x44
   1c820:	21ff      	movs	r1, #255	; 0xff
   1c822:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1c824:	68fb      	ldr	r3, [r7, #12]
   1c826:	2245      	movs	r2, #69	; 0x45
   1c828:	21ff      	movs	r1, #255	; 0xff
   1c82a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1c82c:	683b      	ldr	r3, [r7, #0]
   1c82e:	2b00      	cmp	r3, #0
   1c830:	d10d      	bne.n	1c84e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c832:	68fb      	ldr	r3, [r7, #12]
   1c834:	691b      	ldr	r3, [r3, #16]
   1c836:	2b00      	cmp	r3, #0
   1c838:	d013      	beq.n	1c862 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c83a:	68fb      	ldr	r3, [r7, #12]
   1c83c:	3310      	adds	r3, #16
   1c83e:	0018      	movs	r0, r3
   1c840:	4b0c      	ldr	r3, [pc, #48]	; (1c874 <xQueueGenericReset+0xac>)
   1c842:	4798      	blx	r3
   1c844:	1e03      	subs	r3, r0, #0
   1c846:	d00c      	beq.n	1c862 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1c848:	4b0b      	ldr	r3, [pc, #44]	; (1c878 <xQueueGenericReset+0xb0>)
   1c84a:	4798      	blx	r3
   1c84c:	e009      	b.n	1c862 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1c84e:	68fb      	ldr	r3, [r7, #12]
   1c850:	3310      	adds	r3, #16
   1c852:	0018      	movs	r0, r3
   1c854:	4b09      	ldr	r3, [pc, #36]	; (1c87c <xQueueGenericReset+0xb4>)
   1c856:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1c858:	68fb      	ldr	r3, [r7, #12]
   1c85a:	3324      	adds	r3, #36	; 0x24
   1c85c:	0018      	movs	r0, r3
   1c85e:	4b07      	ldr	r3, [pc, #28]	; (1c87c <xQueueGenericReset+0xb4>)
   1c860:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1c862:	4b07      	ldr	r3, [pc, #28]	; (1c880 <xQueueGenericReset+0xb8>)
   1c864:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1c866:	2301      	movs	r3, #1
}
   1c868:	0018      	movs	r0, r3
   1c86a:	46bd      	mov	sp, r7
   1c86c:	b004      	add	sp, #16
   1c86e:	bd80      	pop	{r7, pc}
   1c870:	0001c599 	.word	0x0001c599
   1c874:	0001ee29 	.word	0x0001ee29
   1c878:	0001c581 	.word	0x0001c581
   1c87c:	0001c305 	.word	0x0001c305
   1c880:	0001c5bd 	.word	0x0001c5bd

0001c884 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1c884:	b590      	push	{r4, r7, lr}
   1c886:	b08b      	sub	sp, #44	; 0x2c
   1c888:	af02      	add	r7, sp, #8
   1c88a:	60f8      	str	r0, [r7, #12]
   1c88c:	60b9      	str	r1, [r7, #8]
   1c88e:	1dfb      	adds	r3, r7, #7
   1c890:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1c892:	68fb      	ldr	r3, [r7, #12]
   1c894:	2b00      	cmp	r3, #0
   1c896:	d101      	bne.n	1c89c <xQueueGenericCreate+0x18>
   1c898:	b672      	cpsid	i
   1c89a:	e7fe      	b.n	1c89a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1c89c:	68bb      	ldr	r3, [r7, #8]
   1c89e:	2b00      	cmp	r3, #0
   1c8a0:	d102      	bne.n	1c8a8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1c8a2:	2300      	movs	r3, #0
   1c8a4:	61fb      	str	r3, [r7, #28]
   1c8a6:	e003      	b.n	1c8b0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c8a8:	68fb      	ldr	r3, [r7, #12]
   1c8aa:	68ba      	ldr	r2, [r7, #8]
   1c8ac:	4353      	muls	r3, r2
   1c8ae:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1c8b0:	69fb      	ldr	r3, [r7, #28]
   1c8b2:	3354      	adds	r3, #84	; 0x54
   1c8b4:	0018      	movs	r0, r3
   1c8b6:	4b19      	ldr	r3, [pc, #100]	; (1c91c <xQueueGenericCreate+0x98>)
   1c8b8:	4798      	blx	r3
   1c8ba:	0003      	movs	r3, r0
   1c8bc:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1c8be:	69bb      	ldr	r3, [r7, #24]
   1c8c0:	2b00      	cmp	r3, #0
   1c8c2:	d00d      	beq.n	1c8e0 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1c8c4:	69bb      	ldr	r3, [r7, #24]
   1c8c6:	3354      	adds	r3, #84	; 0x54
   1c8c8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1c8ca:	1dfb      	adds	r3, r7, #7
   1c8cc:	781c      	ldrb	r4, [r3, #0]
   1c8ce:	697a      	ldr	r2, [r7, #20]
   1c8d0:	68b9      	ldr	r1, [r7, #8]
   1c8d2:	68f8      	ldr	r0, [r7, #12]
   1c8d4:	69bb      	ldr	r3, [r7, #24]
   1c8d6:	9300      	str	r3, [sp, #0]
   1c8d8:	0023      	movs	r3, r4
   1c8da:	4c11      	ldr	r4, [pc, #68]	; (1c920 <xQueueGenericCreate+0x9c>)
   1c8dc:	47a0      	blx	r4
   1c8de:	e017      	b.n	1c910 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1c8e0:	4b10      	ldr	r3, [pc, #64]	; (1c924 <xQueueGenericCreate+0xa0>)
   1c8e2:	4798      	blx	r3
   1c8e4:	0003      	movs	r3, r0
   1c8e6:	0018      	movs	r0, r3
   1c8e8:	4b0f      	ldr	r3, [pc, #60]	; (1c928 <xQueueGenericCreate+0xa4>)
   1c8ea:	4798      	blx	r3
   1c8ec:	0003      	movs	r3, r0
   1c8ee:	001a      	movs	r2, r3
   1c8f0:	4b0e      	ldr	r3, [pc, #56]	; (1c92c <xQueueGenericCreate+0xa8>)
   1c8f2:	881b      	ldrh	r3, [r3, #0]
   1c8f4:	4013      	ands	r3, r2
   1c8f6:	b29b      	uxth	r3, r3
   1c8f8:	2b00      	cmp	r3, #0
   1c8fa:	d009      	beq.n	1c910 <xQueueGenericCreate+0x8c>
   1c8fc:	1dfb      	adds	r3, r7, #7
   1c8fe:	781b      	ldrb	r3, [r3, #0]
   1c900:	4a0b      	ldr	r2, [pc, #44]	; (1c930 <xQueueGenericCreate+0xac>)
   1c902:	5cd3      	ldrb	r3, [r2, r3]
   1c904:	3340      	adds	r3, #64	; 0x40
   1c906:	b2db      	uxtb	r3, r3
   1c908:	2100      	movs	r1, #0
   1c90a:	0018      	movs	r0, r3
   1c90c:	4b09      	ldr	r3, [pc, #36]	; (1c934 <xQueueGenericCreate+0xb0>)
   1c90e:	4798      	blx	r3
		}

		return pxNewQueue;
   1c910:	69bb      	ldr	r3, [r7, #24]
	}
   1c912:	0018      	movs	r0, r3
   1c914:	46bd      	mov	sp, r7
   1c916:	b009      	add	sp, #36	; 0x24
   1c918:	bd90      	pop	{r4, r7, pc}
   1c91a:	46c0      	nop			; (mov r8, r8)
   1c91c:	0001c6d1 	.word	0x0001c6d1
   1c920:	0001c939 	.word	0x0001c939
   1c924:	0001a829 	.word	0x0001a829
   1c928:	0001a58d 	.word	0x0001a58d
   1c92c:	20000118 	.word	0x20000118
   1c930:	2000010c 	.word	0x2000010c
   1c934:	0001b28d 	.word	0x0001b28d

0001c938 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1c938:	b5b0      	push	{r4, r5, r7, lr}
   1c93a:	b084      	sub	sp, #16
   1c93c:	af00      	add	r7, sp, #0
   1c93e:	60f8      	str	r0, [r7, #12]
   1c940:	60b9      	str	r1, [r7, #8]
   1c942:	607a      	str	r2, [r7, #4]
   1c944:	001a      	movs	r2, r3
   1c946:	1cfb      	adds	r3, r7, #3
   1c948:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1c94a:	68bb      	ldr	r3, [r7, #8]
   1c94c:	2b00      	cmp	r3, #0
   1c94e:	d103      	bne.n	1c958 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1c950:	6a3b      	ldr	r3, [r7, #32]
   1c952:	6a3a      	ldr	r2, [r7, #32]
   1c954:	601a      	str	r2, [r3, #0]
   1c956:	e002      	b.n	1c95e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1c958:	6a3b      	ldr	r3, [r7, #32]
   1c95a:	687a      	ldr	r2, [r7, #4]
   1c95c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1c95e:	6a3b      	ldr	r3, [r7, #32]
   1c960:	68fa      	ldr	r2, [r7, #12]
   1c962:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1c964:	6a3b      	ldr	r3, [r7, #32]
   1c966:	68ba      	ldr	r2, [r7, #8]
   1c968:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1c96a:	6a3b      	ldr	r3, [r7, #32]
   1c96c:	2101      	movs	r1, #1
   1c96e:	0018      	movs	r0, r3
   1c970:	4b41      	ldr	r3, [pc, #260]	; (1ca78 <prvInitialiseNewQueue+0x140>)
   1c972:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1c974:	6a3b      	ldr	r3, [r7, #32]
   1c976:	1cfa      	adds	r2, r7, #3
   1c978:	2150      	movs	r1, #80	; 0x50
   1c97a:	7812      	ldrb	r2, [r2, #0]
   1c97c:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1c97e:	6a3b      	ldr	r3, [r7, #32]
   1c980:	2200      	movs	r2, #0
   1c982:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1c984:	6a3b      	ldr	r3, [r7, #32]
   1c986:	0018      	movs	r0, r3
   1c988:	4b3c      	ldr	r3, [pc, #240]	; (1ca7c <prvInitialiseNewQueue+0x144>)
   1c98a:	4798      	blx	r3
   1c98c:	0003      	movs	r3, r0
   1c98e:	001a      	movs	r2, r3
   1c990:	4b3b      	ldr	r3, [pc, #236]	; (1ca80 <prvInitialiseNewQueue+0x148>)
   1c992:	5c9b      	ldrb	r3, [r3, r2]
   1c994:	0018      	movs	r0, r3
   1c996:	4b3b      	ldr	r3, [pc, #236]	; (1ca84 <prvInitialiseNewQueue+0x14c>)
   1c998:	4798      	blx	r3
   1c99a:	0003      	movs	r3, r0
   1c99c:	b29a      	uxth	r2, r3
   1c99e:	6a3b      	ldr	r3, [r7, #32]
   1c9a0:	0011      	movs	r1, r2
   1c9a2:	0018      	movs	r0, r3
   1c9a4:	4b38      	ldr	r3, [pc, #224]	; (1ca88 <prvInitialiseNewQueue+0x150>)
   1c9a6:	4798      	blx	r3
   1c9a8:	4b38      	ldr	r3, [pc, #224]	; (1ca8c <prvInitialiseNewQueue+0x154>)
   1c9aa:	881a      	ldrh	r2, [r3, #0]
   1c9ac:	6a3b      	ldr	r3, [r7, #32]
   1c9ae:	0011      	movs	r1, r2
   1c9b0:	0018      	movs	r0, r3
   1c9b2:	4b37      	ldr	r3, [pc, #220]	; (1ca90 <prvInitialiseNewQueue+0x158>)
   1c9b4:	4798      	blx	r3
   1c9b6:	6a3b      	ldr	r3, [r7, #32]
   1c9b8:	0018      	movs	r0, r3
   1c9ba:	4b30      	ldr	r3, [pc, #192]	; (1ca7c <prvInitialiseNewQueue+0x144>)
   1c9bc:	4798      	blx	r3
   1c9be:	0003      	movs	r3, r0
   1c9c0:	001a      	movs	r2, r3
   1c9c2:	4b2f      	ldr	r3, [pc, #188]	; (1ca80 <prvInitialiseNewQueue+0x148>)
   1c9c4:	5c9c      	ldrb	r4, [r3, r2]
   1c9c6:	6a3b      	ldr	r3, [r7, #32]
   1c9c8:	0018      	movs	r0, r3
   1c9ca:	4b32      	ldr	r3, [pc, #200]	; (1ca94 <prvInitialiseNewQueue+0x15c>)
   1c9cc:	4798      	blx	r3
   1c9ce:	0003      	movs	r3, r0
   1c9d0:	b2db      	uxtb	r3, r3
   1c9d2:	0019      	movs	r1, r3
   1c9d4:	0020      	movs	r0, r4
   1c9d6:	4b30      	ldr	r3, [pc, #192]	; (1ca98 <prvInitialiseNewQueue+0x160>)
   1c9d8:	4798      	blx	r3
   1c9da:	4b30      	ldr	r3, [pc, #192]	; (1ca9c <prvInitialiseNewQueue+0x164>)
   1c9dc:	4798      	blx	r3
   1c9de:	0003      	movs	r3, r0
   1c9e0:	0018      	movs	r0, r3
   1c9e2:	4b2f      	ldr	r3, [pc, #188]	; (1caa0 <prvInitialiseNewQueue+0x168>)
   1c9e4:	4798      	blx	r3
   1c9e6:	0003      	movs	r3, r0
   1c9e8:	001a      	movs	r2, r3
   1c9ea:	4b2e      	ldr	r3, [pc, #184]	; (1caa4 <prvInitialiseNewQueue+0x16c>)
   1c9ec:	881b      	ldrh	r3, [r3, #0]
   1c9ee:	4013      	ands	r3, r2
   1c9f0:	b29b      	uxth	r3, r3
   1c9f2:	2b00      	cmp	r3, #0
   1c9f4:	d029      	beq.n	1ca4a <prvInitialiseNewQueue+0x112>
   1c9f6:	6a3b      	ldr	r3, [r7, #32]
   1c9f8:	0018      	movs	r0, r3
   1c9fa:	4b2b      	ldr	r3, [pc, #172]	; (1caa8 <prvInitialiseNewQueue+0x170>)
   1c9fc:	4798      	blx	r3
   1c9fe:	0003      	movs	r3, r0
   1ca00:	001a      	movs	r2, r3
   1ca02:	4b28      	ldr	r3, [pc, #160]	; (1caa4 <prvInitialiseNewQueue+0x16c>)
   1ca04:	881b      	ldrh	r3, [r3, #0]
   1ca06:	4013      	ands	r3, r2
   1ca08:	b29b      	uxth	r3, r3
   1ca0a:	2b00      	cmp	r3, #0
   1ca0c:	d01d      	beq.n	1ca4a <prvInitialiseNewQueue+0x112>
   1ca0e:	6a3b      	ldr	r3, [r7, #32]
   1ca10:	0018      	movs	r0, r3
   1ca12:	4b1a      	ldr	r3, [pc, #104]	; (1ca7c <prvInitialiseNewQueue+0x144>)
   1ca14:	4798      	blx	r3
   1ca16:	0003      	movs	r3, r0
   1ca18:	001a      	movs	r2, r3
   1ca1a:	4b19      	ldr	r3, [pc, #100]	; (1ca80 <prvInitialiseNewQueue+0x148>)
   1ca1c:	5c9b      	ldrb	r3, [r3, r2]
   1ca1e:	3318      	adds	r3, #24
   1ca20:	b2db      	uxtb	r3, r3
   1ca22:	001d      	movs	r5, r3
   1ca24:	6a3b      	ldr	r3, [r7, #32]
   1ca26:	0018      	movs	r0, r3
   1ca28:	4b14      	ldr	r3, [pc, #80]	; (1ca7c <prvInitialiseNewQueue+0x144>)
   1ca2a:	4798      	blx	r3
   1ca2c:	0003      	movs	r3, r0
   1ca2e:	001a      	movs	r2, r3
   1ca30:	4b13      	ldr	r3, [pc, #76]	; (1ca80 <prvInitialiseNewQueue+0x148>)
   1ca32:	5c9c      	ldrb	r4, [r3, r2]
   1ca34:	6a3b      	ldr	r3, [r7, #32]
   1ca36:	0018      	movs	r0, r3
   1ca38:	4b16      	ldr	r3, [pc, #88]	; (1ca94 <prvInitialiseNewQueue+0x15c>)
   1ca3a:	4798      	blx	r3
   1ca3c:	0003      	movs	r3, r0
   1ca3e:	b2db      	uxtb	r3, r3
   1ca40:	001a      	movs	r2, r3
   1ca42:	0021      	movs	r1, r4
   1ca44:	0028      	movs	r0, r5
   1ca46:	4b19      	ldr	r3, [pc, #100]	; (1caac <prvInitialiseNewQueue+0x174>)
   1ca48:	4798      	blx	r3
   1ca4a:	6a3b      	ldr	r3, [r7, #32]
   1ca4c:	0018      	movs	r0, r3
   1ca4e:	4b0b      	ldr	r3, [pc, #44]	; (1ca7c <prvInitialiseNewQueue+0x144>)
   1ca50:	4798      	blx	r3
   1ca52:	0003      	movs	r3, r0
   1ca54:	001a      	movs	r2, r3
   1ca56:	4b0a      	ldr	r3, [pc, #40]	; (1ca80 <prvInitialiseNewQueue+0x148>)
   1ca58:	5c9c      	ldrb	r4, [r3, r2]
   1ca5a:	6a3b      	ldr	r3, [r7, #32]
   1ca5c:	0018      	movs	r0, r3
   1ca5e:	4b0d      	ldr	r3, [pc, #52]	; (1ca94 <prvInitialiseNewQueue+0x15c>)
   1ca60:	4798      	blx	r3
   1ca62:	0003      	movs	r3, r0
   1ca64:	b2db      	uxtb	r3, r3
   1ca66:	2200      	movs	r2, #0
   1ca68:	0019      	movs	r1, r3
   1ca6a:	0020      	movs	r0, r4
   1ca6c:	4b10      	ldr	r3, [pc, #64]	; (1cab0 <prvInitialiseNewQueue+0x178>)
   1ca6e:	4798      	blx	r3
}
   1ca70:	46c0      	nop			; (mov r8, r8)
   1ca72:	46bd      	mov	sp, r7
   1ca74:	b004      	add	sp, #16
   1ca76:	bdb0      	pop	{r4, r5, r7, pc}
   1ca78:	0001c7c9 	.word	0x0001c7c9
   1ca7c:	0001a54d 	.word	0x0001a54d
   1ca80:	2000010c 	.word	0x2000010c
   1ca84:	0001bb0d 	.word	0x0001bb0d
   1ca88:	0001a671 	.word	0x0001a671
   1ca8c:	2000011a 	.word	0x2000011a
   1ca90:	0001a6ad 	.word	0x0001a6ad
   1ca94:	0001a62d 	.word	0x0001a62d
   1ca98:	0001bca5 	.word	0x0001bca5
   1ca9c:	0001a829 	.word	0x0001a829
   1caa0:	0001a58d 	.word	0x0001a58d
   1caa4:	20000118 	.word	0x20000118
   1caa8:	0001a64d 	.word	0x0001a64d
   1caac:	0001af85 	.word	0x0001af85
   1cab0:	0001b5e1 	.word	0x0001b5e1

0001cab4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1cab4:	b590      	push	{r4, r7, lr}
   1cab6:	b083      	sub	sp, #12
   1cab8:	af00      	add	r7, sp, #0
   1caba:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1cabc:	687b      	ldr	r3, [r7, #4]
   1cabe:	2b00      	cmp	r3, #0
   1cac0:	d00e      	beq.n	1cae0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1cac2:	687b      	ldr	r3, [r7, #4]
   1cac4:	2200      	movs	r2, #0
   1cac6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1cac8:	687b      	ldr	r3, [r7, #4]
   1caca:	2200      	movs	r2, #0
   1cacc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1cace:	687b      	ldr	r3, [r7, #4]
   1cad0:	2200      	movs	r2, #0
   1cad2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1cad4:	6878      	ldr	r0, [r7, #4]
   1cad6:	2300      	movs	r3, #0
   1cad8:	2200      	movs	r2, #0
   1cada:	2100      	movs	r1, #0
   1cadc:	4c02      	ldr	r4, [pc, #8]	; (1cae8 <prvInitialiseMutex+0x34>)
   1cade:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1cae0:	46c0      	nop			; (mov r8, r8)
   1cae2:	46bd      	mov	sp, r7
   1cae4:	b003      	add	sp, #12
   1cae6:	bd90      	pop	{r4, r7, pc}
   1cae8:	0001cb2d 	.word	0x0001cb2d

0001caec <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1caec:	b580      	push	{r7, lr}
   1caee:	b086      	sub	sp, #24
   1caf0:	af00      	add	r7, sp, #0
   1caf2:	0002      	movs	r2, r0
   1caf4:	1dfb      	adds	r3, r7, #7
   1caf6:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1caf8:	2301      	movs	r3, #1
   1cafa:	617b      	str	r3, [r7, #20]
   1cafc:	2300      	movs	r3, #0
   1cafe:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1cb00:	1dfb      	adds	r3, r7, #7
   1cb02:	781a      	ldrb	r2, [r3, #0]
   1cb04:	6939      	ldr	r1, [r7, #16]
   1cb06:	697b      	ldr	r3, [r7, #20]
   1cb08:	0018      	movs	r0, r3
   1cb0a:	4b06      	ldr	r3, [pc, #24]	; (1cb24 <xQueueCreateMutex+0x38>)
   1cb0c:	4798      	blx	r3
   1cb0e:	0003      	movs	r3, r0
   1cb10:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1cb12:	68fb      	ldr	r3, [r7, #12]
   1cb14:	0018      	movs	r0, r3
   1cb16:	4b04      	ldr	r3, [pc, #16]	; (1cb28 <xQueueCreateMutex+0x3c>)
   1cb18:	4798      	blx	r3

		return pxNewQueue;
   1cb1a:	68fb      	ldr	r3, [r7, #12]
	}
   1cb1c:	0018      	movs	r0, r3
   1cb1e:	46bd      	mov	sp, r7
   1cb20:	b006      	add	sp, #24
   1cb22:	bd80      	pop	{r7, pc}
   1cb24:	0001c885 	.word	0x0001c885
   1cb28:	0001cab5 	.word	0x0001cab5

0001cb2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1cb2c:	b5b0      	push	{r4, r5, r7, lr}
   1cb2e:	b08a      	sub	sp, #40	; 0x28
   1cb30:	af00      	add	r7, sp, #0
   1cb32:	60f8      	str	r0, [r7, #12]
   1cb34:	60b9      	str	r1, [r7, #8]
   1cb36:	607a      	str	r2, [r7, #4]
   1cb38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1cb3a:	2300      	movs	r3, #0
   1cb3c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1cb3e:	68fb      	ldr	r3, [r7, #12]
   1cb40:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1cb42:	6a3b      	ldr	r3, [r7, #32]
   1cb44:	2b00      	cmp	r3, #0
   1cb46:	d101      	bne.n	1cb4c <xQueueGenericSend+0x20>
   1cb48:	b672      	cpsid	i
   1cb4a:	e7fe      	b.n	1cb4a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1cb4c:	68bb      	ldr	r3, [r7, #8]
   1cb4e:	2b00      	cmp	r3, #0
   1cb50:	d103      	bne.n	1cb5a <xQueueGenericSend+0x2e>
   1cb52:	6a3b      	ldr	r3, [r7, #32]
   1cb54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1cb56:	2b00      	cmp	r3, #0
   1cb58:	d101      	bne.n	1cb5e <xQueueGenericSend+0x32>
   1cb5a:	2301      	movs	r3, #1
   1cb5c:	e000      	b.n	1cb60 <xQueueGenericSend+0x34>
   1cb5e:	2300      	movs	r3, #0
   1cb60:	2b00      	cmp	r3, #0
   1cb62:	d101      	bne.n	1cb68 <xQueueGenericSend+0x3c>
   1cb64:	b672      	cpsid	i
   1cb66:	e7fe      	b.n	1cb66 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1cb68:	683b      	ldr	r3, [r7, #0]
   1cb6a:	2b02      	cmp	r3, #2
   1cb6c:	d103      	bne.n	1cb76 <xQueueGenericSend+0x4a>
   1cb6e:	6a3b      	ldr	r3, [r7, #32]
   1cb70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1cb72:	2b01      	cmp	r3, #1
   1cb74:	d101      	bne.n	1cb7a <xQueueGenericSend+0x4e>
   1cb76:	2301      	movs	r3, #1
   1cb78:	e000      	b.n	1cb7c <xQueueGenericSend+0x50>
   1cb7a:	2300      	movs	r3, #0
   1cb7c:	2b00      	cmp	r3, #0
   1cb7e:	d101      	bne.n	1cb84 <xQueueGenericSend+0x58>
   1cb80:	b672      	cpsid	i
   1cb82:	e7fe      	b.n	1cb82 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1cb84:	4bbc      	ldr	r3, [pc, #752]	; (1ce78 <xQueueGenericSend+0x34c>)
   1cb86:	4798      	blx	r3
   1cb88:	1e03      	subs	r3, r0, #0
   1cb8a:	d102      	bne.n	1cb92 <xQueueGenericSend+0x66>
   1cb8c:	687b      	ldr	r3, [r7, #4]
   1cb8e:	2b00      	cmp	r3, #0
   1cb90:	d101      	bne.n	1cb96 <xQueueGenericSend+0x6a>
   1cb92:	2301      	movs	r3, #1
   1cb94:	e000      	b.n	1cb98 <xQueueGenericSend+0x6c>
   1cb96:	2300      	movs	r3, #0
   1cb98:	2b00      	cmp	r3, #0
   1cb9a:	d101      	bne.n	1cba0 <xQueueGenericSend+0x74>
   1cb9c:	b672      	cpsid	i
   1cb9e:	e7fe      	b.n	1cb9e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1cba0:	4bb6      	ldr	r3, [pc, #728]	; (1ce7c <xQueueGenericSend+0x350>)
   1cba2:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1cba4:	6a3b      	ldr	r3, [r7, #32]
   1cba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1cba8:	6a3b      	ldr	r3, [r7, #32]
   1cbaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1cbac:	429a      	cmp	r2, r3
   1cbae:	d303      	bcc.n	1cbb8 <xQueueGenericSend+0x8c>
   1cbb0:	683b      	ldr	r3, [r7, #0]
   1cbb2:	2b02      	cmp	r3, #2
   1cbb4:	d000      	beq.n	1cbb8 <xQueueGenericSend+0x8c>
   1cbb6:	e08e      	b.n	1ccd6 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1cbb8:	4bb1      	ldr	r3, [pc, #708]	; (1ce80 <xQueueGenericSend+0x354>)
   1cbba:	4798      	blx	r3
   1cbbc:	0003      	movs	r3, r0
   1cbbe:	0018      	movs	r0, r3
   1cbc0:	4bb0      	ldr	r3, [pc, #704]	; (1ce84 <xQueueGenericSend+0x358>)
   1cbc2:	4798      	blx	r3
   1cbc4:	0003      	movs	r3, r0
   1cbc6:	001a      	movs	r2, r3
   1cbc8:	4baf      	ldr	r3, [pc, #700]	; (1ce88 <xQueueGenericSend+0x35c>)
   1cbca:	881b      	ldrh	r3, [r3, #0]
   1cbcc:	4013      	ands	r3, r2
   1cbce:	b29b      	uxth	r3, r3
   1cbd0:	2b00      	cmp	r3, #0
   1cbd2:	d02e      	beq.n	1cc32 <xQueueGenericSend+0x106>
   1cbd4:	6a3b      	ldr	r3, [r7, #32]
   1cbd6:	0018      	movs	r0, r3
   1cbd8:	4bac      	ldr	r3, [pc, #688]	; (1ce8c <xQueueGenericSend+0x360>)
   1cbda:	4798      	blx	r3
   1cbdc:	0003      	movs	r3, r0
   1cbde:	001a      	movs	r2, r3
   1cbe0:	4ba9      	ldr	r3, [pc, #676]	; (1ce88 <xQueueGenericSend+0x35c>)
   1cbe2:	881b      	ldrh	r3, [r3, #0]
   1cbe4:	4013      	ands	r3, r2
   1cbe6:	b29b      	uxth	r3, r3
   1cbe8:	2b00      	cmp	r3, #0
   1cbea:	d022      	beq.n	1cc32 <xQueueGenericSend+0x106>
   1cbec:	683b      	ldr	r3, [r7, #0]
   1cbee:	2b00      	cmp	r3, #0
   1cbf0:	d10b      	bne.n	1cc0a <xQueueGenericSend+0xde>
   1cbf2:	6a3b      	ldr	r3, [r7, #32]
   1cbf4:	0018      	movs	r0, r3
   1cbf6:	4ba6      	ldr	r3, [pc, #664]	; (1ce90 <xQueueGenericSend+0x364>)
   1cbf8:	4798      	blx	r3
   1cbfa:	0003      	movs	r3, r0
   1cbfc:	001a      	movs	r2, r3
   1cbfe:	4ba5      	ldr	r3, [pc, #660]	; (1ce94 <xQueueGenericSend+0x368>)
   1cc00:	5c9b      	ldrb	r3, [r3, r2]
   1cc02:	3320      	adds	r3, #32
   1cc04:	b2db      	uxtb	r3, r3
   1cc06:	001d      	movs	r5, r3
   1cc08:	e000      	b.n	1cc0c <xQueueGenericSend+0xe0>
   1cc0a:	2525      	movs	r5, #37	; 0x25
   1cc0c:	6a3b      	ldr	r3, [r7, #32]
   1cc0e:	0018      	movs	r0, r3
   1cc10:	4b9f      	ldr	r3, [pc, #636]	; (1ce90 <xQueueGenericSend+0x364>)
   1cc12:	4798      	blx	r3
   1cc14:	0003      	movs	r3, r0
   1cc16:	001a      	movs	r2, r3
   1cc18:	4b9e      	ldr	r3, [pc, #632]	; (1ce94 <xQueueGenericSend+0x368>)
   1cc1a:	5c9c      	ldrb	r4, [r3, r2]
   1cc1c:	6a3b      	ldr	r3, [r7, #32]
   1cc1e:	0018      	movs	r0, r3
   1cc20:	4b9d      	ldr	r3, [pc, #628]	; (1ce98 <xQueueGenericSend+0x36c>)
   1cc22:	4798      	blx	r3
   1cc24:	0003      	movs	r3, r0
   1cc26:	b2db      	uxtb	r3, r3
   1cc28:	001a      	movs	r2, r3
   1cc2a:	0021      	movs	r1, r4
   1cc2c:	0028      	movs	r0, r5
   1cc2e:	4b9b      	ldr	r3, [pc, #620]	; (1ce9c <xQueueGenericSend+0x370>)
   1cc30:	4798      	blx	r3
   1cc32:	6a3b      	ldr	r3, [r7, #32]
   1cc34:	0018      	movs	r0, r3
   1cc36:	4b96      	ldr	r3, [pc, #600]	; (1ce90 <xQueueGenericSend+0x364>)
   1cc38:	4798      	blx	r3
   1cc3a:	0003      	movs	r3, r0
   1cc3c:	001a      	movs	r2, r3
   1cc3e:	4b95      	ldr	r3, [pc, #596]	; (1ce94 <xQueueGenericSend+0x368>)
   1cc40:	5c9c      	ldrb	r4, [r3, r2]
   1cc42:	6a3b      	ldr	r3, [r7, #32]
   1cc44:	0018      	movs	r0, r3
   1cc46:	4b94      	ldr	r3, [pc, #592]	; (1ce98 <xQueueGenericSend+0x36c>)
   1cc48:	4798      	blx	r3
   1cc4a:	0003      	movs	r3, r0
   1cc4c:	b2dd      	uxtb	r5, r3
   1cc4e:	6a3b      	ldr	r3, [r7, #32]
   1cc50:	0018      	movs	r0, r3
   1cc52:	4b8f      	ldr	r3, [pc, #572]	; (1ce90 <xQueueGenericSend+0x364>)
   1cc54:	4798      	blx	r3
   1cc56:	0003      	movs	r3, r0
   1cc58:	001a      	movs	r2, r3
   1cc5a:	4b8e      	ldr	r3, [pc, #568]	; (1ce94 <xQueueGenericSend+0x368>)
   1cc5c:	5c9b      	ldrb	r3, [r3, r2]
   1cc5e:	2b02      	cmp	r3, #2
   1cc60:	d005      	beq.n	1cc6e <xQueueGenericSend+0x142>
   1cc62:	6a3b      	ldr	r3, [r7, #32]
   1cc64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1cc66:	b2db      	uxtb	r3, r3
   1cc68:	3301      	adds	r3, #1
   1cc6a:	b2db      	uxtb	r3, r3
   1cc6c:	e000      	b.n	1cc70 <xQueueGenericSend+0x144>
   1cc6e:	2300      	movs	r3, #0
   1cc70:	001a      	movs	r2, r3
   1cc72:	0029      	movs	r1, r5
   1cc74:	0020      	movs	r0, r4
   1cc76:	4b8a      	ldr	r3, [pc, #552]	; (1cea0 <xQueueGenericSend+0x374>)
   1cc78:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1cc7a:	683a      	ldr	r2, [r7, #0]
   1cc7c:	68b9      	ldr	r1, [r7, #8]
   1cc7e:	6a3b      	ldr	r3, [r7, #32]
   1cc80:	0018      	movs	r0, r3
   1cc82:	4b88      	ldr	r3, [pc, #544]	; (1cea4 <xQueueGenericSend+0x378>)
   1cc84:	4798      	blx	r3
   1cc86:	0003      	movs	r3, r0
   1cc88:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1cc8a:	6a3b      	ldr	r3, [r7, #32]
   1cc8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1cc8e:	2b00      	cmp	r3, #0
   1cc90:	d00a      	beq.n	1cca8 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1cc92:	683a      	ldr	r2, [r7, #0]
   1cc94:	6a3b      	ldr	r3, [r7, #32]
   1cc96:	0011      	movs	r1, r2
   1cc98:	0018      	movs	r0, r3
   1cc9a:	4b83      	ldr	r3, [pc, #524]	; (1cea8 <xQueueGenericSend+0x37c>)
   1cc9c:	4798      	blx	r3
   1cc9e:	1e03      	subs	r3, r0, #0
   1cca0:	d015      	beq.n	1ccce <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1cca2:	4b82      	ldr	r3, [pc, #520]	; (1ceac <xQueueGenericSend+0x380>)
   1cca4:	4798      	blx	r3
   1cca6:	e012      	b.n	1ccce <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1cca8:	6a3b      	ldr	r3, [r7, #32]
   1ccaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ccac:	2b00      	cmp	r3, #0
   1ccae:	d009      	beq.n	1ccc4 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1ccb0:	6a3b      	ldr	r3, [r7, #32]
   1ccb2:	3324      	adds	r3, #36	; 0x24
   1ccb4:	0018      	movs	r0, r3
   1ccb6:	4b7e      	ldr	r3, [pc, #504]	; (1ceb0 <xQueueGenericSend+0x384>)
   1ccb8:	4798      	blx	r3
   1ccba:	1e03      	subs	r3, r0, #0
   1ccbc:	d007      	beq.n	1ccce <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1ccbe:	4b7b      	ldr	r3, [pc, #492]	; (1ceac <xQueueGenericSend+0x380>)
   1ccc0:	4798      	blx	r3
   1ccc2:	e004      	b.n	1ccce <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1ccc4:	69fb      	ldr	r3, [r7, #28]
   1ccc6:	2b00      	cmp	r3, #0
   1ccc8:	d001      	beq.n	1ccce <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1ccca:	4b78      	ldr	r3, [pc, #480]	; (1ceac <xQueueGenericSend+0x380>)
   1cccc:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1ccce:	4b79      	ldr	r3, [pc, #484]	; (1ceb4 <xQueueGenericSend+0x388>)
   1ccd0:	4798      	blx	r3
				return pdPASS;
   1ccd2:	2301      	movs	r3, #1
   1ccd4:	e142      	b.n	1cf5c <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1ccd6:	687b      	ldr	r3, [r7, #4]
   1ccd8:	2b00      	cmp	r3, #0
   1ccda:	d140      	bne.n	1cd5e <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1ccdc:	4b75      	ldr	r3, [pc, #468]	; (1ceb4 <xQueueGenericSend+0x388>)
   1ccde:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1cce0:	4b67      	ldr	r3, [pc, #412]	; (1ce80 <xQueueGenericSend+0x354>)
   1cce2:	4798      	blx	r3
   1cce4:	0003      	movs	r3, r0
   1cce6:	0018      	movs	r0, r3
   1cce8:	4b66      	ldr	r3, [pc, #408]	; (1ce84 <xQueueGenericSend+0x358>)
   1ccea:	4798      	blx	r3
   1ccec:	0003      	movs	r3, r0
   1ccee:	001a      	movs	r2, r3
   1ccf0:	4b65      	ldr	r3, [pc, #404]	; (1ce88 <xQueueGenericSend+0x35c>)
   1ccf2:	881b      	ldrh	r3, [r3, #0]
   1ccf4:	4013      	ands	r3, r2
   1ccf6:	b29b      	uxth	r3, r3
   1ccf8:	2b00      	cmp	r3, #0
   1ccfa:	d02e      	beq.n	1cd5a <xQueueGenericSend+0x22e>
   1ccfc:	6a3b      	ldr	r3, [r7, #32]
   1ccfe:	0018      	movs	r0, r3
   1cd00:	4b62      	ldr	r3, [pc, #392]	; (1ce8c <xQueueGenericSend+0x360>)
   1cd02:	4798      	blx	r3
   1cd04:	0003      	movs	r3, r0
   1cd06:	001a      	movs	r2, r3
   1cd08:	4b5f      	ldr	r3, [pc, #380]	; (1ce88 <xQueueGenericSend+0x35c>)
   1cd0a:	881b      	ldrh	r3, [r3, #0]
   1cd0c:	4013      	ands	r3, r2
   1cd0e:	b29b      	uxth	r3, r3
   1cd10:	2b00      	cmp	r3, #0
   1cd12:	d022      	beq.n	1cd5a <xQueueGenericSend+0x22e>
   1cd14:	683b      	ldr	r3, [r7, #0]
   1cd16:	2b00      	cmp	r3, #0
   1cd18:	d10b      	bne.n	1cd32 <xQueueGenericSend+0x206>
   1cd1a:	6a3b      	ldr	r3, [r7, #32]
   1cd1c:	0018      	movs	r0, r3
   1cd1e:	4b5c      	ldr	r3, [pc, #368]	; (1ce90 <xQueueGenericSend+0x364>)
   1cd20:	4798      	blx	r3
   1cd22:	0003      	movs	r3, r0
   1cd24:	001a      	movs	r2, r3
   1cd26:	4b5b      	ldr	r3, [pc, #364]	; (1ce94 <xQueueGenericSend+0x368>)
   1cd28:	5c9b      	ldrb	r3, [r3, r2]
   1cd2a:	3348      	adds	r3, #72	; 0x48
   1cd2c:	b2db      	uxtb	r3, r3
   1cd2e:	001d      	movs	r5, r3
   1cd30:	e000      	b.n	1cd34 <xQueueGenericSend+0x208>
   1cd32:	254d      	movs	r5, #77	; 0x4d
   1cd34:	6a3b      	ldr	r3, [r7, #32]
   1cd36:	0018      	movs	r0, r3
   1cd38:	4b55      	ldr	r3, [pc, #340]	; (1ce90 <xQueueGenericSend+0x364>)
   1cd3a:	4798      	blx	r3
   1cd3c:	0003      	movs	r3, r0
   1cd3e:	001a      	movs	r2, r3
   1cd40:	4b54      	ldr	r3, [pc, #336]	; (1ce94 <xQueueGenericSend+0x368>)
   1cd42:	5c9c      	ldrb	r4, [r3, r2]
   1cd44:	6a3b      	ldr	r3, [r7, #32]
   1cd46:	0018      	movs	r0, r3
   1cd48:	4b53      	ldr	r3, [pc, #332]	; (1ce98 <xQueueGenericSend+0x36c>)
   1cd4a:	4798      	blx	r3
   1cd4c:	0003      	movs	r3, r0
   1cd4e:	b2db      	uxtb	r3, r3
   1cd50:	001a      	movs	r2, r3
   1cd52:	0021      	movs	r1, r4
   1cd54:	0028      	movs	r0, r5
   1cd56:	4b51      	ldr	r3, [pc, #324]	; (1ce9c <xQueueGenericSend+0x370>)
   1cd58:	4798      	blx	r3
					return errQUEUE_FULL;
   1cd5a:	2300      	movs	r3, #0
   1cd5c:	e0fe      	b.n	1cf5c <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1cd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cd60:	2b00      	cmp	r3, #0
   1cd62:	d106      	bne.n	1cd72 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1cd64:	2314      	movs	r3, #20
   1cd66:	18fb      	adds	r3, r7, r3
   1cd68:	0018      	movs	r0, r3
   1cd6a:	4b53      	ldr	r3, [pc, #332]	; (1ceb8 <xQueueGenericSend+0x38c>)
   1cd6c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1cd6e:	2301      	movs	r3, #1
   1cd70:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1cd72:	4b50      	ldr	r3, [pc, #320]	; (1ceb4 <xQueueGenericSend+0x388>)
   1cd74:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1cd76:	4b51      	ldr	r3, [pc, #324]	; (1cebc <xQueueGenericSend+0x390>)
   1cd78:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1cd7a:	4b40      	ldr	r3, [pc, #256]	; (1ce7c <xQueueGenericSend+0x350>)
   1cd7c:	4798      	blx	r3
   1cd7e:	6a3b      	ldr	r3, [r7, #32]
   1cd80:	2244      	movs	r2, #68	; 0x44
   1cd82:	5c9b      	ldrb	r3, [r3, r2]
   1cd84:	b25b      	sxtb	r3, r3
   1cd86:	3301      	adds	r3, #1
   1cd88:	d103      	bne.n	1cd92 <xQueueGenericSend+0x266>
   1cd8a:	6a3b      	ldr	r3, [r7, #32]
   1cd8c:	2244      	movs	r2, #68	; 0x44
   1cd8e:	2100      	movs	r1, #0
   1cd90:	5499      	strb	r1, [r3, r2]
   1cd92:	6a3b      	ldr	r3, [r7, #32]
   1cd94:	2245      	movs	r2, #69	; 0x45
   1cd96:	5c9b      	ldrb	r3, [r3, r2]
   1cd98:	b25b      	sxtb	r3, r3
   1cd9a:	3301      	adds	r3, #1
   1cd9c:	d103      	bne.n	1cda6 <xQueueGenericSend+0x27a>
   1cd9e:	6a3b      	ldr	r3, [r7, #32]
   1cda0:	2245      	movs	r2, #69	; 0x45
   1cda2:	2100      	movs	r1, #0
   1cda4:	5499      	strb	r1, [r3, r2]
   1cda6:	4b43      	ldr	r3, [pc, #268]	; (1ceb4 <xQueueGenericSend+0x388>)
   1cda8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1cdaa:	1d3a      	adds	r2, r7, #4
   1cdac:	2314      	movs	r3, #20
   1cdae:	18fb      	adds	r3, r7, r3
   1cdb0:	0011      	movs	r1, r2
   1cdb2:	0018      	movs	r0, r3
   1cdb4:	4b42      	ldr	r3, [pc, #264]	; (1cec0 <xQueueGenericSend+0x394>)
   1cdb6:	4798      	blx	r3
   1cdb8:	1e03      	subs	r3, r0, #0
   1cdba:	d000      	beq.n	1cdbe <xQueueGenericSend+0x292>
   1cdbc:	e08a      	b.n	1ced4 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1cdbe:	6a3b      	ldr	r3, [r7, #32]
   1cdc0:	0018      	movs	r0, r3
   1cdc2:	4b40      	ldr	r3, [pc, #256]	; (1cec4 <xQueueGenericSend+0x398>)
   1cdc4:	4798      	blx	r3
   1cdc6:	1e03      	subs	r3, r0, #0
   1cdc8:	d04f      	beq.n	1ce6a <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1cdca:	4b2d      	ldr	r3, [pc, #180]	; (1ce80 <xQueueGenericSend+0x354>)
   1cdcc:	4798      	blx	r3
   1cdce:	0003      	movs	r3, r0
   1cdd0:	0018      	movs	r0, r3
   1cdd2:	4b2c      	ldr	r3, [pc, #176]	; (1ce84 <xQueueGenericSend+0x358>)
   1cdd4:	4798      	blx	r3
   1cdd6:	0003      	movs	r3, r0
   1cdd8:	001a      	movs	r2, r3
   1cdda:	4b2b      	ldr	r3, [pc, #172]	; (1ce88 <xQueueGenericSend+0x35c>)
   1cddc:	881b      	ldrh	r3, [r3, #0]
   1cdde:	4013      	ands	r3, r2
   1cde0:	b29b      	uxth	r3, r3
   1cde2:	2b00      	cmp	r3, #0
   1cde4:	d02e      	beq.n	1ce44 <xQueueGenericSend+0x318>
   1cde6:	6a3b      	ldr	r3, [r7, #32]
   1cde8:	0018      	movs	r0, r3
   1cdea:	4b28      	ldr	r3, [pc, #160]	; (1ce8c <xQueueGenericSend+0x360>)
   1cdec:	4798      	blx	r3
   1cdee:	0003      	movs	r3, r0
   1cdf0:	001a      	movs	r2, r3
   1cdf2:	4b25      	ldr	r3, [pc, #148]	; (1ce88 <xQueueGenericSend+0x35c>)
   1cdf4:	881b      	ldrh	r3, [r3, #0]
   1cdf6:	4013      	ands	r3, r2
   1cdf8:	b29b      	uxth	r3, r3
   1cdfa:	2b00      	cmp	r3, #0
   1cdfc:	d022      	beq.n	1ce44 <xQueueGenericSend+0x318>
   1cdfe:	683b      	ldr	r3, [r7, #0]
   1ce00:	2b00      	cmp	r3, #0
   1ce02:	d10b      	bne.n	1ce1c <xQueueGenericSend+0x2f0>
   1ce04:	6a3b      	ldr	r3, [r7, #32]
   1ce06:	0018      	movs	r0, r3
   1ce08:	4b21      	ldr	r3, [pc, #132]	; (1ce90 <xQueueGenericSend+0x364>)
   1ce0a:	4798      	blx	r3
   1ce0c:	0003      	movs	r3, r0
   1ce0e:	001a      	movs	r2, r3
   1ce10:	4b20      	ldr	r3, [pc, #128]	; (1ce94 <xQueueGenericSend+0x368>)
   1ce12:	5c9b      	ldrb	r3, [r3, r2]
   1ce14:	3370      	adds	r3, #112	; 0x70
   1ce16:	b2db      	uxtb	r3, r3
   1ce18:	001d      	movs	r5, r3
   1ce1a:	e000      	b.n	1ce1e <xQueueGenericSend+0x2f2>
   1ce1c:	2575      	movs	r5, #117	; 0x75
   1ce1e:	6a3b      	ldr	r3, [r7, #32]
   1ce20:	0018      	movs	r0, r3
   1ce22:	4b1b      	ldr	r3, [pc, #108]	; (1ce90 <xQueueGenericSend+0x364>)
   1ce24:	4798      	blx	r3
   1ce26:	0003      	movs	r3, r0
   1ce28:	001a      	movs	r2, r3
   1ce2a:	4b1a      	ldr	r3, [pc, #104]	; (1ce94 <xQueueGenericSend+0x368>)
   1ce2c:	5c9c      	ldrb	r4, [r3, r2]
   1ce2e:	6a3b      	ldr	r3, [r7, #32]
   1ce30:	0018      	movs	r0, r3
   1ce32:	4b19      	ldr	r3, [pc, #100]	; (1ce98 <xQueueGenericSend+0x36c>)
   1ce34:	4798      	blx	r3
   1ce36:	0003      	movs	r3, r0
   1ce38:	b2db      	uxtb	r3, r3
   1ce3a:	001a      	movs	r2, r3
   1ce3c:	0021      	movs	r1, r4
   1ce3e:	0028      	movs	r0, r5
   1ce40:	4b16      	ldr	r3, [pc, #88]	; (1ce9c <xQueueGenericSend+0x370>)
   1ce42:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1ce44:	6a3b      	ldr	r3, [r7, #32]
   1ce46:	3310      	adds	r3, #16
   1ce48:	687a      	ldr	r2, [r7, #4]
   1ce4a:	0011      	movs	r1, r2
   1ce4c:	0018      	movs	r0, r3
   1ce4e:	4b1e      	ldr	r3, [pc, #120]	; (1cec8 <xQueueGenericSend+0x39c>)
   1ce50:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1ce52:	6a3b      	ldr	r3, [r7, #32]
   1ce54:	0018      	movs	r0, r3
   1ce56:	4b1d      	ldr	r3, [pc, #116]	; (1cecc <xQueueGenericSend+0x3a0>)
   1ce58:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1ce5a:	4b1d      	ldr	r3, [pc, #116]	; (1ced0 <xQueueGenericSend+0x3a4>)
   1ce5c:	4798      	blx	r3
   1ce5e:	1e03      	subs	r3, r0, #0
   1ce60:	d000      	beq.n	1ce64 <xQueueGenericSend+0x338>
   1ce62:	e69d      	b.n	1cba0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1ce64:	4b11      	ldr	r3, [pc, #68]	; (1ceac <xQueueGenericSend+0x380>)
   1ce66:	4798      	blx	r3
   1ce68:	e69a      	b.n	1cba0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1ce6a:	6a3b      	ldr	r3, [r7, #32]
   1ce6c:	0018      	movs	r0, r3
   1ce6e:	4b17      	ldr	r3, [pc, #92]	; (1cecc <xQueueGenericSend+0x3a0>)
   1ce70:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1ce72:	4b17      	ldr	r3, [pc, #92]	; (1ced0 <xQueueGenericSend+0x3a4>)
   1ce74:	4798      	blx	r3
   1ce76:	e693      	b.n	1cba0 <xQueueGenericSend+0x74>
   1ce78:	0001f2b9 	.word	0x0001f2b9
   1ce7c:	0001c599 	.word	0x0001c599
   1ce80:	0001a829 	.word	0x0001a829
   1ce84:	0001a58d 	.word	0x0001a58d
   1ce88:	20000118 	.word	0x20000118
   1ce8c:	0001a64d 	.word	0x0001a64d
   1ce90:	0001a54d 	.word	0x0001a54d
   1ce94:	2000010c 	.word	0x2000010c
   1ce98:	0001a62d 	.word	0x0001a62d
   1ce9c:	0001af85 	.word	0x0001af85
   1cea0:	0001b5e1 	.word	0x0001b5e1
   1cea4:	0001dd65 	.word	0x0001dd65
   1cea8:	0001e069 	.word	0x0001e069
   1ceac:	0001c581 	.word	0x0001c581
   1ceb0:	0001ee29 	.word	0x0001ee29
   1ceb4:	0001c5bd 	.word	0x0001c5bd
   1ceb8:	0001ef69 	.word	0x0001ef69
   1cebc:	0001e851 	.word	0x0001e851
   1cec0:	0001ef91 	.word	0x0001ef91
   1cec4:	0001dfb9 	.word	0x0001dfb9
   1cec8:	0001ed05 	.word	0x0001ed05
   1cecc:	0001de95 	.word	0x0001de95
   1ced0:	0001e869 	.word	0x0001e869
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1ced4:	6a3b      	ldr	r3, [r7, #32]
   1ced6:	0018      	movs	r0, r3
   1ced8:	4b22      	ldr	r3, [pc, #136]	; (1cf64 <xQueueGenericSend+0x438>)
   1ceda:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1cedc:	4b22      	ldr	r3, [pc, #136]	; (1cf68 <xQueueGenericSend+0x43c>)
   1cede:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1cee0:	4b22      	ldr	r3, [pc, #136]	; (1cf6c <xQueueGenericSend+0x440>)
   1cee2:	4798      	blx	r3
   1cee4:	0003      	movs	r3, r0
   1cee6:	0018      	movs	r0, r3
   1cee8:	4b21      	ldr	r3, [pc, #132]	; (1cf70 <xQueueGenericSend+0x444>)
   1ceea:	4798      	blx	r3
   1ceec:	0003      	movs	r3, r0
   1ceee:	001a      	movs	r2, r3
   1cef0:	4b20      	ldr	r3, [pc, #128]	; (1cf74 <xQueueGenericSend+0x448>)
   1cef2:	881b      	ldrh	r3, [r3, #0]
   1cef4:	4013      	ands	r3, r2
   1cef6:	b29b      	uxth	r3, r3
   1cef8:	2b00      	cmp	r3, #0
   1cefa:	d02e      	beq.n	1cf5a <xQueueGenericSend+0x42e>
   1cefc:	6a3b      	ldr	r3, [r7, #32]
   1cefe:	0018      	movs	r0, r3
   1cf00:	4b1d      	ldr	r3, [pc, #116]	; (1cf78 <xQueueGenericSend+0x44c>)
   1cf02:	4798      	blx	r3
   1cf04:	0003      	movs	r3, r0
   1cf06:	001a      	movs	r2, r3
   1cf08:	4b1a      	ldr	r3, [pc, #104]	; (1cf74 <xQueueGenericSend+0x448>)
   1cf0a:	881b      	ldrh	r3, [r3, #0]
   1cf0c:	4013      	ands	r3, r2
   1cf0e:	b29b      	uxth	r3, r3
   1cf10:	2b00      	cmp	r3, #0
   1cf12:	d022      	beq.n	1cf5a <xQueueGenericSend+0x42e>
   1cf14:	683b      	ldr	r3, [r7, #0]
   1cf16:	2b00      	cmp	r3, #0
   1cf18:	d10b      	bne.n	1cf32 <xQueueGenericSend+0x406>
   1cf1a:	6a3b      	ldr	r3, [r7, #32]
   1cf1c:	0018      	movs	r0, r3
   1cf1e:	4b17      	ldr	r3, [pc, #92]	; (1cf7c <xQueueGenericSend+0x450>)
   1cf20:	4798      	blx	r3
   1cf22:	0003      	movs	r3, r0
   1cf24:	001a      	movs	r2, r3
   1cf26:	4b16      	ldr	r3, [pc, #88]	; (1cf80 <xQueueGenericSend+0x454>)
   1cf28:	5c9b      	ldrb	r3, [r3, r2]
   1cf2a:	3348      	adds	r3, #72	; 0x48
   1cf2c:	b2db      	uxtb	r3, r3
   1cf2e:	001d      	movs	r5, r3
   1cf30:	e000      	b.n	1cf34 <xQueueGenericSend+0x408>
   1cf32:	254d      	movs	r5, #77	; 0x4d
   1cf34:	6a3b      	ldr	r3, [r7, #32]
   1cf36:	0018      	movs	r0, r3
   1cf38:	4b10      	ldr	r3, [pc, #64]	; (1cf7c <xQueueGenericSend+0x450>)
   1cf3a:	4798      	blx	r3
   1cf3c:	0003      	movs	r3, r0
   1cf3e:	001a      	movs	r2, r3
   1cf40:	4b0f      	ldr	r3, [pc, #60]	; (1cf80 <xQueueGenericSend+0x454>)
   1cf42:	5c9c      	ldrb	r4, [r3, r2]
   1cf44:	6a3b      	ldr	r3, [r7, #32]
   1cf46:	0018      	movs	r0, r3
   1cf48:	4b0e      	ldr	r3, [pc, #56]	; (1cf84 <xQueueGenericSend+0x458>)
   1cf4a:	4798      	blx	r3
   1cf4c:	0003      	movs	r3, r0
   1cf4e:	b2db      	uxtb	r3, r3
   1cf50:	001a      	movs	r2, r3
   1cf52:	0021      	movs	r1, r4
   1cf54:	0028      	movs	r0, r5
   1cf56:	4b0c      	ldr	r3, [pc, #48]	; (1cf88 <xQueueGenericSend+0x45c>)
   1cf58:	4798      	blx	r3
			return errQUEUE_FULL;
   1cf5a:	2300      	movs	r3, #0
		}
	}
}
   1cf5c:	0018      	movs	r0, r3
   1cf5e:	46bd      	mov	sp, r7
   1cf60:	b00a      	add	sp, #40	; 0x28
   1cf62:	bdb0      	pop	{r4, r5, r7, pc}
   1cf64:	0001de95 	.word	0x0001de95
   1cf68:	0001e869 	.word	0x0001e869
   1cf6c:	0001a829 	.word	0x0001a829
   1cf70:	0001a58d 	.word	0x0001a58d
   1cf74:	20000118 	.word	0x20000118
   1cf78:	0001a64d 	.word	0x0001a64d
   1cf7c:	0001a54d 	.word	0x0001a54d
   1cf80:	2000010c 	.word	0x2000010c
   1cf84:	0001a62d 	.word	0x0001a62d
   1cf88:	0001af85 	.word	0x0001af85

0001cf8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1cf8c:	b5b0      	push	{r4, r5, r7, lr}
   1cf8e:	b088      	sub	sp, #32
   1cf90:	af00      	add	r7, sp, #0
   1cf92:	60f8      	str	r0, [r7, #12]
   1cf94:	60b9      	str	r1, [r7, #8]
   1cf96:	607a      	str	r2, [r7, #4]
   1cf98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1cf9a:	68fb      	ldr	r3, [r7, #12]
   1cf9c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1cf9e:	69bb      	ldr	r3, [r7, #24]
   1cfa0:	2b00      	cmp	r3, #0
   1cfa2:	d101      	bne.n	1cfa8 <xQueueGenericSendFromISR+0x1c>
   1cfa4:	b672      	cpsid	i
   1cfa6:	e7fe      	b.n	1cfa6 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1cfa8:	68bb      	ldr	r3, [r7, #8]
   1cfaa:	2b00      	cmp	r3, #0
   1cfac:	d103      	bne.n	1cfb6 <xQueueGenericSendFromISR+0x2a>
   1cfae:	69bb      	ldr	r3, [r7, #24]
   1cfb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1cfb2:	2b00      	cmp	r3, #0
   1cfb4:	d101      	bne.n	1cfba <xQueueGenericSendFromISR+0x2e>
   1cfb6:	2301      	movs	r3, #1
   1cfb8:	e000      	b.n	1cfbc <xQueueGenericSendFromISR+0x30>
   1cfba:	2300      	movs	r3, #0
   1cfbc:	2b00      	cmp	r3, #0
   1cfbe:	d101      	bne.n	1cfc4 <xQueueGenericSendFromISR+0x38>
   1cfc0:	b672      	cpsid	i
   1cfc2:	e7fe      	b.n	1cfc2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1cfc4:	683b      	ldr	r3, [r7, #0]
   1cfc6:	2b02      	cmp	r3, #2
   1cfc8:	d103      	bne.n	1cfd2 <xQueueGenericSendFromISR+0x46>
   1cfca:	69bb      	ldr	r3, [r7, #24]
   1cfcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1cfce:	2b01      	cmp	r3, #1
   1cfd0:	d101      	bne.n	1cfd6 <xQueueGenericSendFromISR+0x4a>
   1cfd2:	2301      	movs	r3, #1
   1cfd4:	e000      	b.n	1cfd8 <xQueueGenericSendFromISR+0x4c>
   1cfd6:	2300      	movs	r3, #0
   1cfd8:	2b00      	cmp	r3, #0
   1cfda:	d101      	bne.n	1cfe0 <xQueueGenericSendFromISR+0x54>
   1cfdc:	b672      	cpsid	i
   1cfde:	e7fe      	b.n	1cfde <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1cfe0:	4b68      	ldr	r3, [pc, #416]	; (1d184 <xQueueGenericSendFromISR+0x1f8>)
   1cfe2:	4798      	blx	r3
   1cfe4:	0003      	movs	r3, r0
   1cfe6:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1cfe8:	69bb      	ldr	r3, [r7, #24]
   1cfea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1cfec:	69bb      	ldr	r3, [r7, #24]
   1cfee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1cff0:	429a      	cmp	r2, r3
   1cff2:	d303      	bcc.n	1cffc <xQueueGenericSendFromISR+0x70>
   1cff4:	683b      	ldr	r3, [r7, #0]
   1cff6:	2b02      	cmp	r3, #2
   1cff8:	d000      	beq.n	1cffc <xQueueGenericSendFromISR+0x70>
   1cffa:	e088      	b.n	1d10e <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1cffc:	2313      	movs	r3, #19
   1cffe:	18fb      	adds	r3, r7, r3
   1d000:	69ba      	ldr	r2, [r7, #24]
   1d002:	2145      	movs	r1, #69	; 0x45
   1d004:	5c52      	ldrb	r2, [r2, r1]
   1d006:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1d008:	69bb      	ldr	r3, [r7, #24]
   1d00a:	0018      	movs	r0, r3
   1d00c:	4b5e      	ldr	r3, [pc, #376]	; (1d188 <xQueueGenericSendFromISR+0x1fc>)
   1d00e:	4798      	blx	r3
   1d010:	0003      	movs	r3, r0
   1d012:	001a      	movs	r2, r3
   1d014:	4b5d      	ldr	r3, [pc, #372]	; (1d18c <xQueueGenericSendFromISR+0x200>)
   1d016:	881b      	ldrh	r3, [r3, #0]
   1d018:	4013      	ands	r3, r2
   1d01a:	b29b      	uxth	r3, r3
   1d01c:	2b00      	cmp	r3, #0
   1d01e:	d022      	beq.n	1d066 <xQueueGenericSendFromISR+0xda>
   1d020:	683b      	ldr	r3, [r7, #0]
   1d022:	2b00      	cmp	r3, #0
   1d024:	d10b      	bne.n	1d03e <xQueueGenericSendFromISR+0xb2>
   1d026:	69bb      	ldr	r3, [r7, #24]
   1d028:	0018      	movs	r0, r3
   1d02a:	4b59      	ldr	r3, [pc, #356]	; (1d190 <xQueueGenericSendFromISR+0x204>)
   1d02c:	4798      	blx	r3
   1d02e:	0003      	movs	r3, r0
   1d030:	001a      	movs	r2, r3
   1d032:	4b58      	ldr	r3, [pc, #352]	; (1d194 <xQueueGenericSendFromISR+0x208>)
   1d034:	5c9b      	ldrb	r3, [r3, r2]
   1d036:	3330      	adds	r3, #48	; 0x30
   1d038:	b2db      	uxtb	r3, r3
   1d03a:	001d      	movs	r5, r3
   1d03c:	e000      	b.n	1d040 <xQueueGenericSendFromISR+0xb4>
   1d03e:	2535      	movs	r5, #53	; 0x35
   1d040:	69bb      	ldr	r3, [r7, #24]
   1d042:	0018      	movs	r0, r3
   1d044:	4b52      	ldr	r3, [pc, #328]	; (1d190 <xQueueGenericSendFromISR+0x204>)
   1d046:	4798      	blx	r3
   1d048:	0003      	movs	r3, r0
   1d04a:	001a      	movs	r2, r3
   1d04c:	4b51      	ldr	r3, [pc, #324]	; (1d194 <xQueueGenericSendFromISR+0x208>)
   1d04e:	5c9c      	ldrb	r4, [r3, r2]
   1d050:	69bb      	ldr	r3, [r7, #24]
   1d052:	0018      	movs	r0, r3
   1d054:	4b50      	ldr	r3, [pc, #320]	; (1d198 <xQueueGenericSendFromISR+0x20c>)
   1d056:	4798      	blx	r3
   1d058:	0003      	movs	r3, r0
   1d05a:	b2db      	uxtb	r3, r3
   1d05c:	001a      	movs	r2, r3
   1d05e:	0021      	movs	r1, r4
   1d060:	0028      	movs	r0, r5
   1d062:	4b4e      	ldr	r3, [pc, #312]	; (1d19c <xQueueGenericSendFromISR+0x210>)
   1d064:	4798      	blx	r3
   1d066:	69bb      	ldr	r3, [r7, #24]
   1d068:	0018      	movs	r0, r3
   1d06a:	4b49      	ldr	r3, [pc, #292]	; (1d190 <xQueueGenericSendFromISR+0x204>)
   1d06c:	4798      	blx	r3
   1d06e:	0003      	movs	r3, r0
   1d070:	001a      	movs	r2, r3
   1d072:	4b48      	ldr	r3, [pc, #288]	; (1d194 <xQueueGenericSendFromISR+0x208>)
   1d074:	5c9c      	ldrb	r4, [r3, r2]
   1d076:	69bb      	ldr	r3, [r7, #24]
   1d078:	0018      	movs	r0, r3
   1d07a:	4b47      	ldr	r3, [pc, #284]	; (1d198 <xQueueGenericSendFromISR+0x20c>)
   1d07c:	4798      	blx	r3
   1d07e:	0003      	movs	r3, r0
   1d080:	b2d9      	uxtb	r1, r3
   1d082:	69bb      	ldr	r3, [r7, #24]
   1d084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d086:	b2db      	uxtb	r3, r3
   1d088:	3301      	adds	r3, #1
   1d08a:	b2db      	uxtb	r3, r3
   1d08c:	001a      	movs	r2, r3
   1d08e:	0020      	movs	r0, r4
   1d090:	4b43      	ldr	r3, [pc, #268]	; (1d1a0 <xQueueGenericSendFromISR+0x214>)
   1d092:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1d094:	683a      	ldr	r2, [r7, #0]
   1d096:	68b9      	ldr	r1, [r7, #8]
   1d098:	69bb      	ldr	r3, [r7, #24]
   1d09a:	0018      	movs	r0, r3
   1d09c:	4b41      	ldr	r3, [pc, #260]	; (1d1a4 <xQueueGenericSendFromISR+0x218>)
   1d09e:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1d0a0:	2313      	movs	r3, #19
   1d0a2:	18fb      	adds	r3, r7, r3
   1d0a4:	781b      	ldrb	r3, [r3, #0]
   1d0a6:	b25b      	sxtb	r3, r3
   1d0a8:	3301      	adds	r3, #1
   1d0aa:	d124      	bne.n	1d0f6 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1d0ac:	69bb      	ldr	r3, [r7, #24]
   1d0ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d0b0:	2b00      	cmp	r3, #0
   1d0b2:	d00e      	beq.n	1d0d2 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1d0b4:	683a      	ldr	r2, [r7, #0]
   1d0b6:	69bb      	ldr	r3, [r7, #24]
   1d0b8:	0011      	movs	r1, r2
   1d0ba:	0018      	movs	r0, r3
   1d0bc:	4b3a      	ldr	r3, [pc, #232]	; (1d1a8 <xQueueGenericSendFromISR+0x21c>)
   1d0be:	4798      	blx	r3
   1d0c0:	1e03      	subs	r3, r0, #0
   1d0c2:	d021      	beq.n	1d108 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1d0c4:	687b      	ldr	r3, [r7, #4]
   1d0c6:	2b00      	cmp	r3, #0
   1d0c8:	d01e      	beq.n	1d108 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1d0ca:	687b      	ldr	r3, [r7, #4]
   1d0cc:	2201      	movs	r2, #1
   1d0ce:	601a      	str	r2, [r3, #0]
   1d0d0:	e01a      	b.n	1d108 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1d0d2:	69bb      	ldr	r3, [r7, #24]
   1d0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d0d6:	2b00      	cmp	r3, #0
   1d0d8:	d016      	beq.n	1d108 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1d0da:	69bb      	ldr	r3, [r7, #24]
   1d0dc:	3324      	adds	r3, #36	; 0x24
   1d0de:	0018      	movs	r0, r3
   1d0e0:	4b32      	ldr	r3, [pc, #200]	; (1d1ac <xQueueGenericSendFromISR+0x220>)
   1d0e2:	4798      	blx	r3
   1d0e4:	1e03      	subs	r3, r0, #0
   1d0e6:	d00f      	beq.n	1d108 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1d0e8:	687b      	ldr	r3, [r7, #4]
   1d0ea:	2b00      	cmp	r3, #0
   1d0ec:	d00c      	beq.n	1d108 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1d0ee:	687b      	ldr	r3, [r7, #4]
   1d0f0:	2201      	movs	r2, #1
   1d0f2:	601a      	str	r2, [r3, #0]
   1d0f4:	e008      	b.n	1d108 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1d0f6:	2313      	movs	r3, #19
   1d0f8:	18fb      	adds	r3, r7, r3
   1d0fa:	781b      	ldrb	r3, [r3, #0]
   1d0fc:	3301      	adds	r3, #1
   1d0fe:	b2db      	uxtb	r3, r3
   1d100:	b259      	sxtb	r1, r3
   1d102:	69bb      	ldr	r3, [r7, #24]
   1d104:	2245      	movs	r2, #69	; 0x45
   1d106:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1d108:	2301      	movs	r3, #1
   1d10a:	61fb      	str	r3, [r7, #28]
		{
   1d10c:	e030      	b.n	1d170 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1d10e:	69bb      	ldr	r3, [r7, #24]
   1d110:	0018      	movs	r0, r3
   1d112:	4b1d      	ldr	r3, [pc, #116]	; (1d188 <xQueueGenericSendFromISR+0x1fc>)
   1d114:	4798      	blx	r3
   1d116:	0003      	movs	r3, r0
   1d118:	001a      	movs	r2, r3
   1d11a:	4b1c      	ldr	r3, [pc, #112]	; (1d18c <xQueueGenericSendFromISR+0x200>)
   1d11c:	881b      	ldrh	r3, [r3, #0]
   1d11e:	4013      	ands	r3, r2
   1d120:	b29b      	uxth	r3, r3
   1d122:	2b00      	cmp	r3, #0
   1d124:	d022      	beq.n	1d16c <xQueueGenericSendFromISR+0x1e0>
   1d126:	683b      	ldr	r3, [r7, #0]
   1d128:	2b00      	cmp	r3, #0
   1d12a:	d10b      	bne.n	1d144 <xQueueGenericSendFromISR+0x1b8>
   1d12c:	69bb      	ldr	r3, [r7, #24]
   1d12e:	0018      	movs	r0, r3
   1d130:	4b17      	ldr	r3, [pc, #92]	; (1d190 <xQueueGenericSendFromISR+0x204>)
   1d132:	4798      	blx	r3
   1d134:	0003      	movs	r3, r0
   1d136:	001a      	movs	r2, r3
   1d138:	4b16      	ldr	r3, [pc, #88]	; (1d194 <xQueueGenericSendFromISR+0x208>)
   1d13a:	5c9b      	ldrb	r3, [r3, r2]
   1d13c:	3358      	adds	r3, #88	; 0x58
   1d13e:	b2db      	uxtb	r3, r3
   1d140:	001d      	movs	r5, r3
   1d142:	e000      	b.n	1d146 <xQueueGenericSendFromISR+0x1ba>
   1d144:	255d      	movs	r5, #93	; 0x5d
   1d146:	69bb      	ldr	r3, [r7, #24]
   1d148:	0018      	movs	r0, r3
   1d14a:	4b11      	ldr	r3, [pc, #68]	; (1d190 <xQueueGenericSendFromISR+0x204>)
   1d14c:	4798      	blx	r3
   1d14e:	0003      	movs	r3, r0
   1d150:	001a      	movs	r2, r3
   1d152:	4b10      	ldr	r3, [pc, #64]	; (1d194 <xQueueGenericSendFromISR+0x208>)
   1d154:	5c9c      	ldrb	r4, [r3, r2]
   1d156:	69bb      	ldr	r3, [r7, #24]
   1d158:	0018      	movs	r0, r3
   1d15a:	4b0f      	ldr	r3, [pc, #60]	; (1d198 <xQueueGenericSendFromISR+0x20c>)
   1d15c:	4798      	blx	r3
   1d15e:	0003      	movs	r3, r0
   1d160:	b2db      	uxtb	r3, r3
   1d162:	001a      	movs	r2, r3
   1d164:	0021      	movs	r1, r4
   1d166:	0028      	movs	r0, r5
   1d168:	4b0c      	ldr	r3, [pc, #48]	; (1d19c <xQueueGenericSendFromISR+0x210>)
   1d16a:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1d16c:	2300      	movs	r3, #0
   1d16e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1d170:	697b      	ldr	r3, [r7, #20]
   1d172:	0018      	movs	r0, r3
   1d174:	4b0e      	ldr	r3, [pc, #56]	; (1d1b0 <xQueueGenericSendFromISR+0x224>)
   1d176:	4798      	blx	r3

	return xReturn;
   1d178:	69fb      	ldr	r3, [r7, #28]
}
   1d17a:	0018      	movs	r0, r3
   1d17c:	46bd      	mov	sp, r7
   1d17e:	b008      	add	sp, #32
   1d180:	bdb0      	pop	{r4, r5, r7, pc}
   1d182:	46c0      	nop			; (mov r8, r8)
   1d184:	0001c5ed 	.word	0x0001c5ed
   1d188:	0001a64d 	.word	0x0001a64d
   1d18c:	20000118 	.word	0x20000118
   1d190:	0001a54d 	.word	0x0001a54d
   1d194:	2000010c 	.word	0x2000010c
   1d198:	0001a62d 	.word	0x0001a62d
   1d19c:	0001af85 	.word	0x0001af85
   1d1a0:	0001b5e1 	.word	0x0001b5e1
   1d1a4:	0001dd65 	.word	0x0001dd65
   1d1a8:	0001e069 	.word	0x0001e069
   1d1ac:	0001ee29 	.word	0x0001ee29
   1d1b0:	0001c5f9 	.word	0x0001c5f9

0001d1b4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1d1b4:	b580      	push	{r7, lr}
   1d1b6:	b082      	sub	sp, #8
   1d1b8:	af00      	add	r7, sp, #0
   1d1ba:	6078      	str	r0, [r7, #4]
   1d1bc:	6039      	str	r1, [r7, #0]
   1d1be:	6839      	ldr	r1, [r7, #0]
   1d1c0:	687b      	ldr	r3, [r7, #4]
   1d1c2:	2200      	movs	r2, #0
   1d1c4:	0018      	movs	r0, r3
   1d1c6:	4b03      	ldr	r3, [pc, #12]	; (1d1d4 <xQueueGiveFromISR+0x20>)
   1d1c8:	4798      	blx	r3
   1d1ca:	0003      	movs	r3, r0
   1d1cc:	0018      	movs	r0, r3
   1d1ce:	46bd      	mov	sp, r7
   1d1d0:	b002      	add	sp, #8
   1d1d2:	bd80      	pop	{r7, pc}
   1d1d4:	0001d1d9 	.word	0x0001d1d9

0001d1d8 <MyWrapper>:
{
   1d1d8:	b5b0      	push	{r4, r5, r7, lr}
   1d1da:	b08a      	sub	sp, #40	; 0x28
   1d1dc:	af00      	add	r7, sp, #0
   1d1de:	60f8      	str	r0, [r7, #12]
   1d1e0:	60b9      	str	r1, [r7, #8]
   1d1e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1d1e4:	68fb      	ldr	r3, [r7, #12]
   1d1e6:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1d1e8:	6a3b      	ldr	r3, [r7, #32]
   1d1ea:	2b00      	cmp	r3, #0
   1d1ec:	d101      	bne.n	1d1f2 <MyWrapper+0x1a>
   1d1ee:	b672      	cpsid	i
   1d1f0:	e7fe      	b.n	1d1f0 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1d1f2:	6a3b      	ldr	r3, [r7, #32]
   1d1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d1f6:	2b00      	cmp	r3, #0
   1d1f8:	d001      	beq.n	1d1fe <MyWrapper+0x26>
   1d1fa:	b672      	cpsid	i
   1d1fc:	e7fe      	b.n	1d1fc <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1d1fe:	6a3b      	ldr	r3, [r7, #32]
   1d200:	681b      	ldr	r3, [r3, #0]
   1d202:	2b00      	cmp	r3, #0
   1d204:	d103      	bne.n	1d20e <MyWrapper+0x36>
   1d206:	6a3b      	ldr	r3, [r7, #32]
   1d208:	685b      	ldr	r3, [r3, #4]
   1d20a:	2b00      	cmp	r3, #0
   1d20c:	d101      	bne.n	1d212 <MyWrapper+0x3a>
   1d20e:	2301      	movs	r3, #1
   1d210:	e000      	b.n	1d214 <MyWrapper+0x3c>
   1d212:	2300      	movs	r3, #0
   1d214:	2b00      	cmp	r3, #0
   1d216:	d101      	bne.n	1d21c <MyWrapper+0x44>
   1d218:	b672      	cpsid	i
   1d21a:	e7fe      	b.n	1d21a <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1d21c:	4b66      	ldr	r3, [pc, #408]	; (1d3b8 <MyWrapper+0x1e0>)
   1d21e:	4798      	blx	r3
   1d220:	0003      	movs	r3, r0
   1d222:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1d224:	6a3b      	ldr	r3, [r7, #32]
   1d226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d228:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1d22a:	6a3b      	ldr	r3, [r7, #32]
   1d22c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1d22e:	69bb      	ldr	r3, [r7, #24]
   1d230:	429a      	cmp	r2, r3
   1d232:	d800      	bhi.n	1d236 <MyWrapper+0x5e>
   1d234:	e085      	b.n	1d342 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1d236:	2317      	movs	r3, #23
   1d238:	18fb      	adds	r3, r7, r3
   1d23a:	6a3a      	ldr	r2, [r7, #32]
   1d23c:	2145      	movs	r1, #69	; 0x45
   1d23e:	5c52      	ldrb	r2, [r2, r1]
   1d240:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1d242:	6a3b      	ldr	r3, [r7, #32]
   1d244:	0018      	movs	r0, r3
   1d246:	4b5d      	ldr	r3, [pc, #372]	; (1d3bc <MyWrapper+0x1e4>)
   1d248:	4798      	blx	r3
   1d24a:	0003      	movs	r3, r0
   1d24c:	001a      	movs	r2, r3
   1d24e:	4b5c      	ldr	r3, [pc, #368]	; (1d3c0 <MyWrapper+0x1e8>)
   1d250:	881b      	ldrh	r3, [r3, #0]
   1d252:	4013      	ands	r3, r2
   1d254:	b29b      	uxth	r3, r3
   1d256:	2b00      	cmp	r3, #0
   1d258:	d022      	beq.n	1d2a0 <MyWrapper+0xc8>
   1d25a:	687b      	ldr	r3, [r7, #4]
   1d25c:	2b00      	cmp	r3, #0
   1d25e:	d10b      	bne.n	1d278 <MyWrapper+0xa0>
   1d260:	6a3b      	ldr	r3, [r7, #32]
   1d262:	0018      	movs	r0, r3
   1d264:	4b57      	ldr	r3, [pc, #348]	; (1d3c4 <MyWrapper+0x1ec>)
   1d266:	4798      	blx	r3
   1d268:	0003      	movs	r3, r0
   1d26a:	001a      	movs	r2, r3
   1d26c:	4b56      	ldr	r3, [pc, #344]	; (1d3c8 <MyWrapper+0x1f0>)
   1d26e:	5c9b      	ldrb	r3, [r3, r2]
   1d270:	3330      	adds	r3, #48	; 0x30
   1d272:	b2db      	uxtb	r3, r3
   1d274:	001d      	movs	r5, r3
   1d276:	e000      	b.n	1d27a <MyWrapper+0xa2>
   1d278:	2535      	movs	r5, #53	; 0x35
   1d27a:	6a3b      	ldr	r3, [r7, #32]
   1d27c:	0018      	movs	r0, r3
   1d27e:	4b51      	ldr	r3, [pc, #324]	; (1d3c4 <MyWrapper+0x1ec>)
   1d280:	4798      	blx	r3
   1d282:	0003      	movs	r3, r0
   1d284:	001a      	movs	r2, r3
   1d286:	4b50      	ldr	r3, [pc, #320]	; (1d3c8 <MyWrapper+0x1f0>)
   1d288:	5c9c      	ldrb	r4, [r3, r2]
   1d28a:	6a3b      	ldr	r3, [r7, #32]
   1d28c:	0018      	movs	r0, r3
   1d28e:	4b4f      	ldr	r3, [pc, #316]	; (1d3cc <MyWrapper+0x1f4>)
   1d290:	4798      	blx	r3
   1d292:	0003      	movs	r3, r0
   1d294:	b2db      	uxtb	r3, r3
   1d296:	001a      	movs	r2, r3
   1d298:	0021      	movs	r1, r4
   1d29a:	0028      	movs	r0, r5
   1d29c:	4b4c      	ldr	r3, [pc, #304]	; (1d3d0 <MyWrapper+0x1f8>)
   1d29e:	4798      	blx	r3
   1d2a0:	6a3b      	ldr	r3, [r7, #32]
   1d2a2:	0018      	movs	r0, r3
   1d2a4:	4b47      	ldr	r3, [pc, #284]	; (1d3c4 <MyWrapper+0x1ec>)
   1d2a6:	4798      	blx	r3
   1d2a8:	0003      	movs	r3, r0
   1d2aa:	001a      	movs	r2, r3
   1d2ac:	4b46      	ldr	r3, [pc, #280]	; (1d3c8 <MyWrapper+0x1f0>)
   1d2ae:	5c9c      	ldrb	r4, [r3, r2]
   1d2b0:	6a3b      	ldr	r3, [r7, #32]
   1d2b2:	0018      	movs	r0, r3
   1d2b4:	4b45      	ldr	r3, [pc, #276]	; (1d3cc <MyWrapper+0x1f4>)
   1d2b6:	4798      	blx	r3
   1d2b8:	0003      	movs	r3, r0
   1d2ba:	b2d9      	uxtb	r1, r3
   1d2bc:	6a3b      	ldr	r3, [r7, #32]
   1d2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d2c0:	b2db      	uxtb	r3, r3
   1d2c2:	3301      	adds	r3, #1
   1d2c4:	b2db      	uxtb	r3, r3
   1d2c6:	001a      	movs	r2, r3
   1d2c8:	0020      	movs	r0, r4
   1d2ca:	4b42      	ldr	r3, [pc, #264]	; (1d3d4 <MyWrapper+0x1fc>)
   1d2cc:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1d2ce:	69bb      	ldr	r3, [r7, #24]
   1d2d0:	1c5a      	adds	r2, r3, #1
   1d2d2:	6a3b      	ldr	r3, [r7, #32]
   1d2d4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1d2d6:	2317      	movs	r3, #23
   1d2d8:	18fb      	adds	r3, r7, r3
   1d2da:	781b      	ldrb	r3, [r3, #0]
   1d2dc:	b25b      	sxtb	r3, r3
   1d2de:	3301      	adds	r3, #1
   1d2e0:	d123      	bne.n	1d32a <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1d2e2:	6a3b      	ldr	r3, [r7, #32]
   1d2e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d2e6:	2b00      	cmp	r3, #0
   1d2e8:	d00d      	beq.n	1d306 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1d2ea:	6a3b      	ldr	r3, [r7, #32]
   1d2ec:	2100      	movs	r1, #0
   1d2ee:	0018      	movs	r0, r3
   1d2f0:	4b39      	ldr	r3, [pc, #228]	; (1d3d8 <MyWrapper+0x200>)
   1d2f2:	4798      	blx	r3
   1d2f4:	1e03      	subs	r3, r0, #0
   1d2f6:	d021      	beq.n	1d33c <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1d2f8:	68bb      	ldr	r3, [r7, #8]
   1d2fa:	2b00      	cmp	r3, #0
   1d2fc:	d01e      	beq.n	1d33c <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1d2fe:	68bb      	ldr	r3, [r7, #8]
   1d300:	2201      	movs	r2, #1
   1d302:	601a      	str	r2, [r3, #0]
   1d304:	e01a      	b.n	1d33c <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1d306:	6a3b      	ldr	r3, [r7, #32]
   1d308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d30a:	2b00      	cmp	r3, #0
   1d30c:	d016      	beq.n	1d33c <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1d30e:	6a3b      	ldr	r3, [r7, #32]
   1d310:	3324      	adds	r3, #36	; 0x24
   1d312:	0018      	movs	r0, r3
   1d314:	4b31      	ldr	r3, [pc, #196]	; (1d3dc <MyWrapper+0x204>)
   1d316:	4798      	blx	r3
   1d318:	1e03      	subs	r3, r0, #0
   1d31a:	d00f      	beq.n	1d33c <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1d31c:	68bb      	ldr	r3, [r7, #8]
   1d31e:	2b00      	cmp	r3, #0
   1d320:	d00c      	beq.n	1d33c <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1d322:	68bb      	ldr	r3, [r7, #8]
   1d324:	2201      	movs	r2, #1
   1d326:	601a      	str	r2, [r3, #0]
   1d328:	e008      	b.n	1d33c <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1d32a:	2317      	movs	r3, #23
   1d32c:	18fb      	adds	r3, r7, r3
   1d32e:	781b      	ldrb	r3, [r3, #0]
   1d330:	3301      	adds	r3, #1
   1d332:	b2db      	uxtb	r3, r3
   1d334:	b259      	sxtb	r1, r3
   1d336:	6a3b      	ldr	r3, [r7, #32]
   1d338:	2245      	movs	r2, #69	; 0x45
   1d33a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1d33c:	2301      	movs	r3, #1
   1d33e:	627b      	str	r3, [r7, #36]	; 0x24
   1d340:	e030      	b.n	1d3a4 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1d342:	6a3b      	ldr	r3, [r7, #32]
   1d344:	0018      	movs	r0, r3
   1d346:	4b1d      	ldr	r3, [pc, #116]	; (1d3bc <MyWrapper+0x1e4>)
   1d348:	4798      	blx	r3
   1d34a:	0003      	movs	r3, r0
   1d34c:	001a      	movs	r2, r3
   1d34e:	4b1c      	ldr	r3, [pc, #112]	; (1d3c0 <MyWrapper+0x1e8>)
   1d350:	881b      	ldrh	r3, [r3, #0]
   1d352:	4013      	ands	r3, r2
   1d354:	b29b      	uxth	r3, r3
   1d356:	2b00      	cmp	r3, #0
   1d358:	d022      	beq.n	1d3a0 <MyWrapper+0x1c8>
   1d35a:	687b      	ldr	r3, [r7, #4]
   1d35c:	2b00      	cmp	r3, #0
   1d35e:	d10b      	bne.n	1d378 <MyWrapper+0x1a0>
   1d360:	6a3b      	ldr	r3, [r7, #32]
   1d362:	0018      	movs	r0, r3
   1d364:	4b17      	ldr	r3, [pc, #92]	; (1d3c4 <MyWrapper+0x1ec>)
   1d366:	4798      	blx	r3
   1d368:	0003      	movs	r3, r0
   1d36a:	001a      	movs	r2, r3
   1d36c:	4b16      	ldr	r3, [pc, #88]	; (1d3c8 <MyWrapper+0x1f0>)
   1d36e:	5c9b      	ldrb	r3, [r3, r2]
   1d370:	3358      	adds	r3, #88	; 0x58
   1d372:	b2db      	uxtb	r3, r3
   1d374:	001d      	movs	r5, r3
   1d376:	e000      	b.n	1d37a <MyWrapper+0x1a2>
   1d378:	255d      	movs	r5, #93	; 0x5d
   1d37a:	6a3b      	ldr	r3, [r7, #32]
   1d37c:	0018      	movs	r0, r3
   1d37e:	4b11      	ldr	r3, [pc, #68]	; (1d3c4 <MyWrapper+0x1ec>)
   1d380:	4798      	blx	r3
   1d382:	0003      	movs	r3, r0
   1d384:	001a      	movs	r2, r3
   1d386:	4b10      	ldr	r3, [pc, #64]	; (1d3c8 <MyWrapper+0x1f0>)
   1d388:	5c9c      	ldrb	r4, [r3, r2]
   1d38a:	6a3b      	ldr	r3, [r7, #32]
   1d38c:	0018      	movs	r0, r3
   1d38e:	4b0f      	ldr	r3, [pc, #60]	; (1d3cc <MyWrapper+0x1f4>)
   1d390:	4798      	blx	r3
   1d392:	0003      	movs	r3, r0
   1d394:	b2db      	uxtb	r3, r3
   1d396:	001a      	movs	r2, r3
   1d398:	0021      	movs	r1, r4
   1d39a:	0028      	movs	r0, r5
   1d39c:	4b0c      	ldr	r3, [pc, #48]	; (1d3d0 <MyWrapper+0x1f8>)
   1d39e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1d3a0:	2300      	movs	r3, #0
   1d3a2:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1d3a4:	69fb      	ldr	r3, [r7, #28]
   1d3a6:	0018      	movs	r0, r3
   1d3a8:	4b0d      	ldr	r3, [pc, #52]	; (1d3e0 <MyWrapper+0x208>)
   1d3aa:	4798      	blx	r3

	return xReturn;
   1d3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1d3ae:	0018      	movs	r0, r3
   1d3b0:	46bd      	mov	sp, r7
   1d3b2:	b00a      	add	sp, #40	; 0x28
   1d3b4:	bdb0      	pop	{r4, r5, r7, pc}
   1d3b6:	46c0      	nop			; (mov r8, r8)
   1d3b8:	0001c5ed 	.word	0x0001c5ed
   1d3bc:	0001a64d 	.word	0x0001a64d
   1d3c0:	20000118 	.word	0x20000118
   1d3c4:	0001a54d 	.word	0x0001a54d
   1d3c8:	2000010c 	.word	0x2000010c
   1d3cc:	0001a62d 	.word	0x0001a62d
   1d3d0:	0001af85 	.word	0x0001af85
   1d3d4:	0001b5e1 	.word	0x0001b5e1
   1d3d8:	0001e069 	.word	0x0001e069
   1d3dc:	0001ee29 	.word	0x0001ee29
   1d3e0:	0001c5f9 	.word	0x0001c5f9

0001d3e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1d3e4:	b5b0      	push	{r4, r5, r7, lr}
   1d3e6:	b08a      	sub	sp, #40	; 0x28
   1d3e8:	af00      	add	r7, sp, #0
   1d3ea:	60f8      	str	r0, [r7, #12]
   1d3ec:	60b9      	str	r1, [r7, #8]
   1d3ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1d3f0:	2300      	movs	r3, #0
   1d3f2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1d3f4:	68fb      	ldr	r3, [r7, #12]
   1d3f6:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1d3f8:	6a3b      	ldr	r3, [r7, #32]
   1d3fa:	2b00      	cmp	r3, #0
   1d3fc:	d101      	bne.n	1d402 <xQueueReceive+0x1e>
   1d3fe:	b672      	cpsid	i
   1d400:	e7fe      	b.n	1d400 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1d402:	68bb      	ldr	r3, [r7, #8]
   1d404:	2b00      	cmp	r3, #0
   1d406:	d103      	bne.n	1d410 <xQueueReceive+0x2c>
   1d408:	6a3b      	ldr	r3, [r7, #32]
   1d40a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d40c:	2b00      	cmp	r3, #0
   1d40e:	d101      	bne.n	1d414 <xQueueReceive+0x30>
   1d410:	2301      	movs	r3, #1
   1d412:	e000      	b.n	1d416 <xQueueReceive+0x32>
   1d414:	2300      	movs	r3, #0
   1d416:	2b00      	cmp	r3, #0
   1d418:	d101      	bne.n	1d41e <xQueueReceive+0x3a>
   1d41a:	b672      	cpsid	i
   1d41c:	e7fe      	b.n	1d41c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1d41e:	4bbf      	ldr	r3, [pc, #764]	; (1d71c <xQueueReceive+0x338>)
   1d420:	4798      	blx	r3
   1d422:	1e03      	subs	r3, r0, #0
   1d424:	d102      	bne.n	1d42c <xQueueReceive+0x48>
   1d426:	687b      	ldr	r3, [r7, #4]
   1d428:	2b00      	cmp	r3, #0
   1d42a:	d101      	bne.n	1d430 <xQueueReceive+0x4c>
   1d42c:	2301      	movs	r3, #1
   1d42e:	e000      	b.n	1d432 <xQueueReceive+0x4e>
   1d430:	2300      	movs	r3, #0
   1d432:	2b00      	cmp	r3, #0
   1d434:	d101      	bne.n	1d43a <xQueueReceive+0x56>
   1d436:	b672      	cpsid	i
   1d438:	e7fe      	b.n	1d438 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1d43a:	4bb9      	ldr	r3, [pc, #740]	; (1d720 <xQueueReceive+0x33c>)
   1d43c:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1d43e:	6a3b      	ldr	r3, [r7, #32]
   1d440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d442:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1d444:	69fb      	ldr	r3, [r7, #28]
   1d446:	2b00      	cmp	r3, #0
   1d448:	d100      	bne.n	1d44c <xQueueReceive+0x68>
   1d44a:	e07d      	b.n	1d548 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1d44c:	68ba      	ldr	r2, [r7, #8]
   1d44e:	6a3b      	ldr	r3, [r7, #32]
   1d450:	0011      	movs	r1, r2
   1d452:	0018      	movs	r0, r3
   1d454:	4bb3      	ldr	r3, [pc, #716]	; (1d724 <xQueueReceive+0x340>)
   1d456:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1d458:	4bb3      	ldr	r3, [pc, #716]	; (1d728 <xQueueReceive+0x344>)
   1d45a:	4798      	blx	r3
   1d45c:	0003      	movs	r3, r0
   1d45e:	0018      	movs	r0, r3
   1d460:	4bb2      	ldr	r3, [pc, #712]	; (1d72c <xQueueReceive+0x348>)
   1d462:	4798      	blx	r3
   1d464:	0003      	movs	r3, r0
   1d466:	001a      	movs	r2, r3
   1d468:	4bb1      	ldr	r3, [pc, #708]	; (1d730 <xQueueReceive+0x34c>)
   1d46a:	881b      	ldrh	r3, [r3, #0]
   1d46c:	4013      	ands	r3, r2
   1d46e:	b29b      	uxth	r3, r3
   1d470:	2b00      	cmp	r3, #0
   1d472:	d029      	beq.n	1d4c8 <xQueueReceive+0xe4>
   1d474:	6a3b      	ldr	r3, [r7, #32]
   1d476:	0018      	movs	r0, r3
   1d478:	4bae      	ldr	r3, [pc, #696]	; (1d734 <xQueueReceive+0x350>)
   1d47a:	4798      	blx	r3
   1d47c:	0003      	movs	r3, r0
   1d47e:	001a      	movs	r2, r3
   1d480:	4bab      	ldr	r3, [pc, #684]	; (1d730 <xQueueReceive+0x34c>)
   1d482:	881b      	ldrh	r3, [r3, #0]
   1d484:	4013      	ands	r3, r2
   1d486:	b29b      	uxth	r3, r3
   1d488:	2b00      	cmp	r3, #0
   1d48a:	d01d      	beq.n	1d4c8 <xQueueReceive+0xe4>
   1d48c:	6a3b      	ldr	r3, [r7, #32]
   1d48e:	0018      	movs	r0, r3
   1d490:	4ba9      	ldr	r3, [pc, #676]	; (1d738 <xQueueReceive+0x354>)
   1d492:	4798      	blx	r3
   1d494:	0003      	movs	r3, r0
   1d496:	001a      	movs	r2, r3
   1d498:	4ba8      	ldr	r3, [pc, #672]	; (1d73c <xQueueReceive+0x358>)
   1d49a:	5c9b      	ldrb	r3, [r3, r2]
   1d49c:	3328      	adds	r3, #40	; 0x28
   1d49e:	b2db      	uxtb	r3, r3
   1d4a0:	001d      	movs	r5, r3
   1d4a2:	6a3b      	ldr	r3, [r7, #32]
   1d4a4:	0018      	movs	r0, r3
   1d4a6:	4ba4      	ldr	r3, [pc, #656]	; (1d738 <xQueueReceive+0x354>)
   1d4a8:	4798      	blx	r3
   1d4aa:	0003      	movs	r3, r0
   1d4ac:	001a      	movs	r2, r3
   1d4ae:	4ba3      	ldr	r3, [pc, #652]	; (1d73c <xQueueReceive+0x358>)
   1d4b0:	5c9c      	ldrb	r4, [r3, r2]
   1d4b2:	6a3b      	ldr	r3, [r7, #32]
   1d4b4:	0018      	movs	r0, r3
   1d4b6:	4ba2      	ldr	r3, [pc, #648]	; (1d740 <xQueueReceive+0x35c>)
   1d4b8:	4798      	blx	r3
   1d4ba:	0003      	movs	r3, r0
   1d4bc:	b2db      	uxtb	r3, r3
   1d4be:	001a      	movs	r2, r3
   1d4c0:	0021      	movs	r1, r4
   1d4c2:	0028      	movs	r0, r5
   1d4c4:	4b9f      	ldr	r3, [pc, #636]	; (1d744 <xQueueReceive+0x360>)
   1d4c6:	4798      	blx	r3
   1d4c8:	6a3b      	ldr	r3, [r7, #32]
   1d4ca:	0018      	movs	r0, r3
   1d4cc:	4b9a      	ldr	r3, [pc, #616]	; (1d738 <xQueueReceive+0x354>)
   1d4ce:	4798      	blx	r3
   1d4d0:	0003      	movs	r3, r0
   1d4d2:	001a      	movs	r2, r3
   1d4d4:	4b99      	ldr	r3, [pc, #612]	; (1d73c <xQueueReceive+0x358>)
   1d4d6:	5c9c      	ldrb	r4, [r3, r2]
   1d4d8:	6a3b      	ldr	r3, [r7, #32]
   1d4da:	0018      	movs	r0, r3
   1d4dc:	4b98      	ldr	r3, [pc, #608]	; (1d740 <xQueueReceive+0x35c>)
   1d4de:	4798      	blx	r3
   1d4e0:	0003      	movs	r3, r0
   1d4e2:	b2dd      	uxtb	r5, r3
   1d4e4:	6a3b      	ldr	r3, [r7, #32]
   1d4e6:	0018      	movs	r0, r3
   1d4e8:	4b93      	ldr	r3, [pc, #588]	; (1d738 <xQueueReceive+0x354>)
   1d4ea:	4798      	blx	r3
   1d4ec:	0003      	movs	r3, r0
   1d4ee:	001a      	movs	r2, r3
   1d4f0:	4b92      	ldr	r3, [pc, #584]	; (1d73c <xQueueReceive+0x358>)
   1d4f2:	5c9b      	ldrb	r3, [r3, r2]
   1d4f4:	2b02      	cmp	r3, #2
   1d4f6:	d108      	bne.n	1d50a <xQueueReceive+0x126>
   1d4f8:	4b8b      	ldr	r3, [pc, #556]	; (1d728 <xQueueReceive+0x344>)
   1d4fa:	4798      	blx	r3
   1d4fc:	0003      	movs	r3, r0
   1d4fe:	0018      	movs	r0, r3
   1d500:	4b91      	ldr	r3, [pc, #580]	; (1d748 <xQueueReceive+0x364>)
   1d502:	4798      	blx	r3
   1d504:	0003      	movs	r3, r0
   1d506:	b2db      	uxtb	r3, r3
   1d508:	e004      	b.n	1d514 <xQueueReceive+0x130>
   1d50a:	6a3b      	ldr	r3, [r7, #32]
   1d50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d50e:	b2db      	uxtb	r3, r3
   1d510:	3b01      	subs	r3, #1
   1d512:	b2db      	uxtb	r3, r3
   1d514:	001a      	movs	r2, r3
   1d516:	0029      	movs	r1, r5
   1d518:	0020      	movs	r0, r4
   1d51a:	4b8c      	ldr	r3, [pc, #560]	; (1d74c <xQueueReceive+0x368>)
   1d51c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1d51e:	69fb      	ldr	r3, [r7, #28]
   1d520:	1e5a      	subs	r2, r3, #1
   1d522:	6a3b      	ldr	r3, [r7, #32]
   1d524:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1d526:	6a3b      	ldr	r3, [r7, #32]
   1d528:	691b      	ldr	r3, [r3, #16]
   1d52a:	2b00      	cmp	r3, #0
   1d52c:	d008      	beq.n	1d540 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1d52e:	6a3b      	ldr	r3, [r7, #32]
   1d530:	3310      	adds	r3, #16
   1d532:	0018      	movs	r0, r3
   1d534:	4b86      	ldr	r3, [pc, #536]	; (1d750 <xQueueReceive+0x36c>)
   1d536:	4798      	blx	r3
   1d538:	1e03      	subs	r3, r0, #0
   1d53a:	d001      	beq.n	1d540 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1d53c:	4b85      	ldr	r3, [pc, #532]	; (1d754 <xQueueReceive+0x370>)
   1d53e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1d540:	4b85      	ldr	r3, [pc, #532]	; (1d758 <xQueueReceive+0x374>)
   1d542:	4798      	blx	r3
				return pdPASS;
   1d544:	2301      	movs	r3, #1
   1d546:	e15f      	b.n	1d808 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1d548:	687b      	ldr	r3, [r7, #4]
   1d54a:	2b00      	cmp	r3, #0
   1d54c:	d13b      	bne.n	1d5c6 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1d54e:	4b82      	ldr	r3, [pc, #520]	; (1d758 <xQueueReceive+0x374>)
   1d550:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1d552:	4b75      	ldr	r3, [pc, #468]	; (1d728 <xQueueReceive+0x344>)
   1d554:	4798      	blx	r3
   1d556:	0003      	movs	r3, r0
   1d558:	0018      	movs	r0, r3
   1d55a:	4b74      	ldr	r3, [pc, #464]	; (1d72c <xQueueReceive+0x348>)
   1d55c:	4798      	blx	r3
   1d55e:	0003      	movs	r3, r0
   1d560:	001a      	movs	r2, r3
   1d562:	4b73      	ldr	r3, [pc, #460]	; (1d730 <xQueueReceive+0x34c>)
   1d564:	881b      	ldrh	r3, [r3, #0]
   1d566:	4013      	ands	r3, r2
   1d568:	b29b      	uxth	r3, r3
   1d56a:	2b00      	cmp	r3, #0
   1d56c:	d029      	beq.n	1d5c2 <xQueueReceive+0x1de>
   1d56e:	6a3b      	ldr	r3, [r7, #32]
   1d570:	0018      	movs	r0, r3
   1d572:	4b70      	ldr	r3, [pc, #448]	; (1d734 <xQueueReceive+0x350>)
   1d574:	4798      	blx	r3
   1d576:	0003      	movs	r3, r0
   1d578:	001a      	movs	r2, r3
   1d57a:	4b6d      	ldr	r3, [pc, #436]	; (1d730 <xQueueReceive+0x34c>)
   1d57c:	881b      	ldrh	r3, [r3, #0]
   1d57e:	4013      	ands	r3, r2
   1d580:	b29b      	uxth	r3, r3
   1d582:	2b00      	cmp	r3, #0
   1d584:	d01d      	beq.n	1d5c2 <xQueueReceive+0x1de>
   1d586:	6a3b      	ldr	r3, [r7, #32]
   1d588:	0018      	movs	r0, r3
   1d58a:	4b6b      	ldr	r3, [pc, #428]	; (1d738 <xQueueReceive+0x354>)
   1d58c:	4798      	blx	r3
   1d58e:	0003      	movs	r3, r0
   1d590:	001a      	movs	r2, r3
   1d592:	4b6a      	ldr	r3, [pc, #424]	; (1d73c <xQueueReceive+0x358>)
   1d594:	5c9b      	ldrb	r3, [r3, r2]
   1d596:	3350      	adds	r3, #80	; 0x50
   1d598:	b2db      	uxtb	r3, r3
   1d59a:	001d      	movs	r5, r3
   1d59c:	6a3b      	ldr	r3, [r7, #32]
   1d59e:	0018      	movs	r0, r3
   1d5a0:	4b65      	ldr	r3, [pc, #404]	; (1d738 <xQueueReceive+0x354>)
   1d5a2:	4798      	blx	r3
   1d5a4:	0003      	movs	r3, r0
   1d5a6:	001a      	movs	r2, r3
   1d5a8:	4b64      	ldr	r3, [pc, #400]	; (1d73c <xQueueReceive+0x358>)
   1d5aa:	5c9c      	ldrb	r4, [r3, r2]
   1d5ac:	6a3b      	ldr	r3, [r7, #32]
   1d5ae:	0018      	movs	r0, r3
   1d5b0:	4b63      	ldr	r3, [pc, #396]	; (1d740 <xQueueReceive+0x35c>)
   1d5b2:	4798      	blx	r3
   1d5b4:	0003      	movs	r3, r0
   1d5b6:	b2db      	uxtb	r3, r3
   1d5b8:	001a      	movs	r2, r3
   1d5ba:	0021      	movs	r1, r4
   1d5bc:	0028      	movs	r0, r5
   1d5be:	4b61      	ldr	r3, [pc, #388]	; (1d744 <xQueueReceive+0x360>)
   1d5c0:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1d5c2:	2300      	movs	r3, #0
   1d5c4:	e120      	b.n	1d808 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1d5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d5c8:	2b00      	cmp	r3, #0
   1d5ca:	d106      	bne.n	1d5da <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1d5cc:	2314      	movs	r3, #20
   1d5ce:	18fb      	adds	r3, r7, r3
   1d5d0:	0018      	movs	r0, r3
   1d5d2:	4b62      	ldr	r3, [pc, #392]	; (1d75c <xQueueReceive+0x378>)
   1d5d4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1d5d6:	2301      	movs	r3, #1
   1d5d8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1d5da:	4b5f      	ldr	r3, [pc, #380]	; (1d758 <xQueueReceive+0x374>)
   1d5dc:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1d5de:	4b60      	ldr	r3, [pc, #384]	; (1d760 <xQueueReceive+0x37c>)
   1d5e0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1d5e2:	4b4f      	ldr	r3, [pc, #316]	; (1d720 <xQueueReceive+0x33c>)
   1d5e4:	4798      	blx	r3
   1d5e6:	6a3b      	ldr	r3, [r7, #32]
   1d5e8:	2244      	movs	r2, #68	; 0x44
   1d5ea:	5c9b      	ldrb	r3, [r3, r2]
   1d5ec:	b25b      	sxtb	r3, r3
   1d5ee:	3301      	adds	r3, #1
   1d5f0:	d103      	bne.n	1d5fa <xQueueReceive+0x216>
   1d5f2:	6a3b      	ldr	r3, [r7, #32]
   1d5f4:	2244      	movs	r2, #68	; 0x44
   1d5f6:	2100      	movs	r1, #0
   1d5f8:	5499      	strb	r1, [r3, r2]
   1d5fa:	6a3b      	ldr	r3, [r7, #32]
   1d5fc:	2245      	movs	r2, #69	; 0x45
   1d5fe:	5c9b      	ldrb	r3, [r3, r2]
   1d600:	b25b      	sxtb	r3, r3
   1d602:	3301      	adds	r3, #1
   1d604:	d103      	bne.n	1d60e <xQueueReceive+0x22a>
   1d606:	6a3b      	ldr	r3, [r7, #32]
   1d608:	2245      	movs	r2, #69	; 0x45
   1d60a:	2100      	movs	r1, #0
   1d60c:	5499      	strb	r1, [r3, r2]
   1d60e:	4b52      	ldr	r3, [pc, #328]	; (1d758 <xQueueReceive+0x374>)
   1d610:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1d612:	1d3a      	adds	r2, r7, #4
   1d614:	2314      	movs	r3, #20
   1d616:	18fb      	adds	r3, r7, r3
   1d618:	0011      	movs	r1, r2
   1d61a:	0018      	movs	r0, r3
   1d61c:	4b51      	ldr	r3, [pc, #324]	; (1d764 <xQueueReceive+0x380>)
   1d61e:	4798      	blx	r3
   1d620:	1e03      	subs	r3, r0, #0
   1d622:	d000      	beq.n	1d626 <xQueueReceive+0x242>
   1d624:	e0aa      	b.n	1d77c <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1d626:	6a3b      	ldr	r3, [r7, #32]
   1d628:	0018      	movs	r0, r3
   1d62a:	4b4f      	ldr	r3, [pc, #316]	; (1d768 <xQueueReceive+0x384>)
   1d62c:	4798      	blx	r3
   1d62e:	1e03      	subs	r3, r0, #0
   1d630:	d06d      	beq.n	1d70e <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1d632:	4b3d      	ldr	r3, [pc, #244]	; (1d728 <xQueueReceive+0x344>)
   1d634:	4798      	blx	r3
   1d636:	0003      	movs	r3, r0
   1d638:	0018      	movs	r0, r3
   1d63a:	4b3c      	ldr	r3, [pc, #240]	; (1d72c <xQueueReceive+0x348>)
   1d63c:	4798      	blx	r3
   1d63e:	0003      	movs	r3, r0
   1d640:	001a      	movs	r2, r3
   1d642:	4b3b      	ldr	r3, [pc, #236]	; (1d730 <xQueueReceive+0x34c>)
   1d644:	881b      	ldrh	r3, [r3, #0]
   1d646:	4013      	ands	r3, r2
   1d648:	b29b      	uxth	r3, r3
   1d64a:	2b00      	cmp	r3, #0
   1d64c:	d029      	beq.n	1d6a2 <xQueueReceive+0x2be>
   1d64e:	6a3b      	ldr	r3, [r7, #32]
   1d650:	0018      	movs	r0, r3
   1d652:	4b38      	ldr	r3, [pc, #224]	; (1d734 <xQueueReceive+0x350>)
   1d654:	4798      	blx	r3
   1d656:	0003      	movs	r3, r0
   1d658:	001a      	movs	r2, r3
   1d65a:	4b35      	ldr	r3, [pc, #212]	; (1d730 <xQueueReceive+0x34c>)
   1d65c:	881b      	ldrh	r3, [r3, #0]
   1d65e:	4013      	ands	r3, r2
   1d660:	b29b      	uxth	r3, r3
   1d662:	2b00      	cmp	r3, #0
   1d664:	d01d      	beq.n	1d6a2 <xQueueReceive+0x2be>
   1d666:	6a3b      	ldr	r3, [r7, #32]
   1d668:	0018      	movs	r0, r3
   1d66a:	4b33      	ldr	r3, [pc, #204]	; (1d738 <xQueueReceive+0x354>)
   1d66c:	4798      	blx	r3
   1d66e:	0003      	movs	r3, r0
   1d670:	001a      	movs	r2, r3
   1d672:	4b32      	ldr	r3, [pc, #200]	; (1d73c <xQueueReceive+0x358>)
   1d674:	5c9b      	ldrb	r3, [r3, r2]
   1d676:	3368      	adds	r3, #104	; 0x68
   1d678:	b2db      	uxtb	r3, r3
   1d67a:	001d      	movs	r5, r3
   1d67c:	6a3b      	ldr	r3, [r7, #32]
   1d67e:	0018      	movs	r0, r3
   1d680:	4b2d      	ldr	r3, [pc, #180]	; (1d738 <xQueueReceive+0x354>)
   1d682:	4798      	blx	r3
   1d684:	0003      	movs	r3, r0
   1d686:	001a      	movs	r2, r3
   1d688:	4b2c      	ldr	r3, [pc, #176]	; (1d73c <xQueueReceive+0x358>)
   1d68a:	5c9c      	ldrb	r4, [r3, r2]
   1d68c:	6a3b      	ldr	r3, [r7, #32]
   1d68e:	0018      	movs	r0, r3
   1d690:	4b2b      	ldr	r3, [pc, #172]	; (1d740 <xQueueReceive+0x35c>)
   1d692:	4798      	blx	r3
   1d694:	0003      	movs	r3, r0
   1d696:	b2db      	uxtb	r3, r3
   1d698:	001a      	movs	r2, r3
   1d69a:	0021      	movs	r1, r4
   1d69c:	0028      	movs	r0, r5
   1d69e:	4b29      	ldr	r3, [pc, #164]	; (1d744 <xQueueReceive+0x360>)
   1d6a0:	4798      	blx	r3
   1d6a2:	6a3b      	ldr	r3, [r7, #32]
   1d6a4:	0018      	movs	r0, r3
   1d6a6:	4b24      	ldr	r3, [pc, #144]	; (1d738 <xQueueReceive+0x354>)
   1d6a8:	4798      	blx	r3
   1d6aa:	0003      	movs	r3, r0
   1d6ac:	001a      	movs	r2, r3
   1d6ae:	4b23      	ldr	r3, [pc, #140]	; (1d73c <xQueueReceive+0x358>)
   1d6b0:	5c9b      	ldrb	r3, [r3, r2]
   1d6b2:	2b02      	cmp	r3, #2
   1d6b4:	d018      	beq.n	1d6e8 <xQueueReceive+0x304>
   1d6b6:	4b1c      	ldr	r3, [pc, #112]	; (1d728 <xQueueReceive+0x344>)
   1d6b8:	4798      	blx	r3
   1d6ba:	0003      	movs	r3, r0
   1d6bc:	0018      	movs	r0, r3
   1d6be:	4b1b      	ldr	r3, [pc, #108]	; (1d72c <xQueueReceive+0x348>)
   1d6c0:	4798      	blx	r3
   1d6c2:	0003      	movs	r3, r0
   1d6c4:	001a      	movs	r2, r3
   1d6c6:	4b1a      	ldr	r3, [pc, #104]	; (1d730 <xQueueReceive+0x34c>)
   1d6c8:	881b      	ldrh	r3, [r3, #0]
   1d6ca:	4013      	ands	r3, r2
   1d6cc:	b29b      	uxth	r3, r3
   1d6ce:	2b00      	cmp	r3, #0
   1d6d0:	d00a      	beq.n	1d6e8 <xQueueReceive+0x304>
   1d6d2:	4b15      	ldr	r3, [pc, #84]	; (1d728 <xQueueReceive+0x344>)
   1d6d4:	4798      	blx	r3
   1d6d6:	0003      	movs	r3, r0
   1d6d8:	0018      	movs	r0, r3
   1d6da:	4b1b      	ldr	r3, [pc, #108]	; (1d748 <xQueueReceive+0x364>)
   1d6dc:	4798      	blx	r3
   1d6de:	0003      	movs	r3, r0
   1d6e0:	b2db      	uxtb	r3, r3
   1d6e2:	0018      	movs	r0, r3
   1d6e4:	4b21      	ldr	r3, [pc, #132]	; (1d76c <xQueueReceive+0x388>)
   1d6e6:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1d6e8:	6a3b      	ldr	r3, [r7, #32]
   1d6ea:	3324      	adds	r3, #36	; 0x24
   1d6ec:	687a      	ldr	r2, [r7, #4]
   1d6ee:	0011      	movs	r1, r2
   1d6f0:	0018      	movs	r0, r3
   1d6f2:	4b1f      	ldr	r3, [pc, #124]	; (1d770 <xQueueReceive+0x38c>)
   1d6f4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1d6f6:	6a3b      	ldr	r3, [r7, #32]
   1d6f8:	0018      	movs	r0, r3
   1d6fa:	4b1e      	ldr	r3, [pc, #120]	; (1d774 <xQueueReceive+0x390>)
   1d6fc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1d6fe:	4b1e      	ldr	r3, [pc, #120]	; (1d778 <xQueueReceive+0x394>)
   1d700:	4798      	blx	r3
   1d702:	1e03      	subs	r3, r0, #0
   1d704:	d000      	beq.n	1d708 <xQueueReceive+0x324>
   1d706:	e698      	b.n	1d43a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1d708:	4b12      	ldr	r3, [pc, #72]	; (1d754 <xQueueReceive+0x370>)
   1d70a:	4798      	blx	r3
   1d70c:	e695      	b.n	1d43a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1d70e:	6a3b      	ldr	r3, [r7, #32]
   1d710:	0018      	movs	r0, r3
   1d712:	4b18      	ldr	r3, [pc, #96]	; (1d774 <xQueueReceive+0x390>)
   1d714:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1d716:	4b18      	ldr	r3, [pc, #96]	; (1d778 <xQueueReceive+0x394>)
   1d718:	4798      	blx	r3
   1d71a:	e68e      	b.n	1d43a <xQueueReceive+0x56>
   1d71c:	0001f2b9 	.word	0x0001f2b9
   1d720:	0001c599 	.word	0x0001c599
   1d724:	0001de45 	.word	0x0001de45
   1d728:	0001a829 	.word	0x0001a829
   1d72c:	0001a58d 	.word	0x0001a58d
   1d730:	20000118 	.word	0x20000118
   1d734:	0001a64d 	.word	0x0001a64d
   1d738:	0001a54d 	.word	0x0001a54d
   1d73c:	2000010c 	.word	0x2000010c
   1d740:	0001a62d 	.word	0x0001a62d
   1d744:	0001af85 	.word	0x0001af85
   1d748:	0001a56d 	.word	0x0001a56d
   1d74c:	0001b5e1 	.word	0x0001b5e1
   1d750:	0001ee29 	.word	0x0001ee29
   1d754:	0001c581 	.word	0x0001c581
   1d758:	0001c5bd 	.word	0x0001c5bd
   1d75c:	0001ef69 	.word	0x0001ef69
   1d760:	0001e851 	.word	0x0001e851
   1d764:	0001ef91 	.word	0x0001ef91
   1d768:	0001df85 	.word	0x0001df85
   1d76c:	0001b71d 	.word	0x0001b71d
   1d770:	0001ed05 	.word	0x0001ed05
   1d774:	0001de95 	.word	0x0001de95
   1d778:	0001e869 	.word	0x0001e869
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1d77c:	6a3b      	ldr	r3, [r7, #32]
   1d77e:	0018      	movs	r0, r3
   1d780:	4b23      	ldr	r3, [pc, #140]	; (1d810 <xQueueReceive+0x42c>)
   1d782:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1d784:	4b23      	ldr	r3, [pc, #140]	; (1d814 <xQueueReceive+0x430>)
   1d786:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1d788:	6a3b      	ldr	r3, [r7, #32]
   1d78a:	0018      	movs	r0, r3
   1d78c:	4b22      	ldr	r3, [pc, #136]	; (1d818 <xQueueReceive+0x434>)
   1d78e:	4798      	blx	r3
   1d790:	1e03      	subs	r3, r0, #0
   1d792:	d100      	bne.n	1d796 <xQueueReceive+0x3b2>
   1d794:	e651      	b.n	1d43a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1d796:	4b21      	ldr	r3, [pc, #132]	; (1d81c <xQueueReceive+0x438>)
   1d798:	4798      	blx	r3
   1d79a:	0003      	movs	r3, r0
   1d79c:	0018      	movs	r0, r3
   1d79e:	4b20      	ldr	r3, [pc, #128]	; (1d820 <xQueueReceive+0x43c>)
   1d7a0:	4798      	blx	r3
   1d7a2:	0003      	movs	r3, r0
   1d7a4:	001a      	movs	r2, r3
   1d7a6:	4b1f      	ldr	r3, [pc, #124]	; (1d824 <xQueueReceive+0x440>)
   1d7a8:	881b      	ldrh	r3, [r3, #0]
   1d7aa:	4013      	ands	r3, r2
   1d7ac:	b29b      	uxth	r3, r3
   1d7ae:	2b00      	cmp	r3, #0
   1d7b0:	d029      	beq.n	1d806 <xQueueReceive+0x422>
   1d7b2:	6a3b      	ldr	r3, [r7, #32]
   1d7b4:	0018      	movs	r0, r3
   1d7b6:	4b1c      	ldr	r3, [pc, #112]	; (1d828 <xQueueReceive+0x444>)
   1d7b8:	4798      	blx	r3
   1d7ba:	0003      	movs	r3, r0
   1d7bc:	001a      	movs	r2, r3
   1d7be:	4b19      	ldr	r3, [pc, #100]	; (1d824 <xQueueReceive+0x440>)
   1d7c0:	881b      	ldrh	r3, [r3, #0]
   1d7c2:	4013      	ands	r3, r2
   1d7c4:	b29b      	uxth	r3, r3
   1d7c6:	2b00      	cmp	r3, #0
   1d7c8:	d01d      	beq.n	1d806 <xQueueReceive+0x422>
   1d7ca:	6a3b      	ldr	r3, [r7, #32]
   1d7cc:	0018      	movs	r0, r3
   1d7ce:	4b17      	ldr	r3, [pc, #92]	; (1d82c <xQueueReceive+0x448>)
   1d7d0:	4798      	blx	r3
   1d7d2:	0003      	movs	r3, r0
   1d7d4:	001a      	movs	r2, r3
   1d7d6:	4b16      	ldr	r3, [pc, #88]	; (1d830 <xQueueReceive+0x44c>)
   1d7d8:	5c9b      	ldrb	r3, [r3, r2]
   1d7da:	3350      	adds	r3, #80	; 0x50
   1d7dc:	b2db      	uxtb	r3, r3
   1d7de:	001d      	movs	r5, r3
   1d7e0:	6a3b      	ldr	r3, [r7, #32]
   1d7e2:	0018      	movs	r0, r3
   1d7e4:	4b11      	ldr	r3, [pc, #68]	; (1d82c <xQueueReceive+0x448>)
   1d7e6:	4798      	blx	r3
   1d7e8:	0003      	movs	r3, r0
   1d7ea:	001a      	movs	r2, r3
   1d7ec:	4b10      	ldr	r3, [pc, #64]	; (1d830 <xQueueReceive+0x44c>)
   1d7ee:	5c9c      	ldrb	r4, [r3, r2]
   1d7f0:	6a3b      	ldr	r3, [r7, #32]
   1d7f2:	0018      	movs	r0, r3
   1d7f4:	4b0f      	ldr	r3, [pc, #60]	; (1d834 <xQueueReceive+0x450>)
   1d7f6:	4798      	blx	r3
   1d7f8:	0003      	movs	r3, r0
   1d7fa:	b2db      	uxtb	r3, r3
   1d7fc:	001a      	movs	r2, r3
   1d7fe:	0021      	movs	r1, r4
   1d800:	0028      	movs	r0, r5
   1d802:	4b0d      	ldr	r3, [pc, #52]	; (1d838 <xQueueReceive+0x454>)
   1d804:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1d806:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1d808:	0018      	movs	r0, r3
   1d80a:	46bd      	mov	sp, r7
   1d80c:	b00a      	add	sp, #40	; 0x28
   1d80e:	bdb0      	pop	{r4, r5, r7, pc}
   1d810:	0001de95 	.word	0x0001de95
   1d814:	0001e869 	.word	0x0001e869
   1d818:	0001df85 	.word	0x0001df85
   1d81c:	0001a829 	.word	0x0001a829
   1d820:	0001a58d 	.word	0x0001a58d
   1d824:	20000118 	.word	0x20000118
   1d828:	0001a64d 	.word	0x0001a64d
   1d82c:	0001a54d 	.word	0x0001a54d
   1d830:	2000010c 	.word	0x2000010c
   1d834:	0001a62d 	.word	0x0001a62d
   1d838:	0001af85 	.word	0x0001af85

0001d83c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1d83c:	b5b0      	push	{r4, r5, r7, lr}
   1d83e:	b08a      	sub	sp, #40	; 0x28
   1d840:	af00      	add	r7, sp, #0
   1d842:	6078      	str	r0, [r7, #4]
   1d844:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1d846:	2300      	movs	r3, #0
   1d848:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1d84a:	687b      	ldr	r3, [r7, #4]
   1d84c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1d84e:	2300      	movs	r3, #0
   1d850:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1d852:	69fb      	ldr	r3, [r7, #28]
   1d854:	2b00      	cmp	r3, #0
   1d856:	d101      	bne.n	1d85c <xQueueSemaphoreTake+0x20>
   1d858:	b672      	cpsid	i
   1d85a:	e7fe      	b.n	1d85a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1d85c:	69fb      	ldr	r3, [r7, #28]
   1d85e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d860:	2b00      	cmp	r3, #0
   1d862:	d001      	beq.n	1d868 <xQueueSemaphoreTake+0x2c>
   1d864:	b672      	cpsid	i
   1d866:	e7fe      	b.n	1d866 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1d868:	4bcb      	ldr	r3, [pc, #812]	; (1db98 <xQueueSemaphoreTake+0x35c>)
   1d86a:	4798      	blx	r3
   1d86c:	1e03      	subs	r3, r0, #0
   1d86e:	d102      	bne.n	1d876 <xQueueSemaphoreTake+0x3a>
   1d870:	683b      	ldr	r3, [r7, #0]
   1d872:	2b00      	cmp	r3, #0
   1d874:	d101      	bne.n	1d87a <xQueueSemaphoreTake+0x3e>
   1d876:	2301      	movs	r3, #1
   1d878:	e000      	b.n	1d87c <xQueueSemaphoreTake+0x40>
   1d87a:	2300      	movs	r3, #0
   1d87c:	2b00      	cmp	r3, #0
   1d87e:	d101      	bne.n	1d884 <xQueueSemaphoreTake+0x48>
   1d880:	b672      	cpsid	i
   1d882:	e7fe      	b.n	1d882 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1d884:	4bc5      	ldr	r3, [pc, #788]	; (1db9c <xQueueSemaphoreTake+0x360>)
   1d886:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1d888:	69fb      	ldr	r3, [r7, #28]
   1d88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d88c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1d88e:	69bb      	ldr	r3, [r7, #24]
   1d890:	2b00      	cmp	r3, #0
   1d892:	d100      	bne.n	1d896 <xQueueSemaphoreTake+0x5a>
   1d894:	e080      	b.n	1d998 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1d896:	4bc2      	ldr	r3, [pc, #776]	; (1dba0 <xQueueSemaphoreTake+0x364>)
   1d898:	4798      	blx	r3
   1d89a:	0003      	movs	r3, r0
   1d89c:	0018      	movs	r0, r3
   1d89e:	4bc1      	ldr	r3, [pc, #772]	; (1dba4 <xQueueSemaphoreTake+0x368>)
   1d8a0:	4798      	blx	r3
   1d8a2:	0003      	movs	r3, r0
   1d8a4:	001a      	movs	r2, r3
   1d8a6:	4bc0      	ldr	r3, [pc, #768]	; (1dba8 <xQueueSemaphoreTake+0x36c>)
   1d8a8:	881b      	ldrh	r3, [r3, #0]
   1d8aa:	4013      	ands	r3, r2
   1d8ac:	b29b      	uxth	r3, r3
   1d8ae:	2b00      	cmp	r3, #0
   1d8b0:	d029      	beq.n	1d906 <xQueueSemaphoreTake+0xca>
   1d8b2:	69fb      	ldr	r3, [r7, #28]
   1d8b4:	0018      	movs	r0, r3
   1d8b6:	4bbd      	ldr	r3, [pc, #756]	; (1dbac <xQueueSemaphoreTake+0x370>)
   1d8b8:	4798      	blx	r3
   1d8ba:	0003      	movs	r3, r0
   1d8bc:	001a      	movs	r2, r3
   1d8be:	4bba      	ldr	r3, [pc, #744]	; (1dba8 <xQueueSemaphoreTake+0x36c>)
   1d8c0:	881b      	ldrh	r3, [r3, #0]
   1d8c2:	4013      	ands	r3, r2
   1d8c4:	b29b      	uxth	r3, r3
   1d8c6:	2b00      	cmp	r3, #0
   1d8c8:	d01d      	beq.n	1d906 <xQueueSemaphoreTake+0xca>
   1d8ca:	69fb      	ldr	r3, [r7, #28]
   1d8cc:	0018      	movs	r0, r3
   1d8ce:	4bb8      	ldr	r3, [pc, #736]	; (1dbb0 <xQueueSemaphoreTake+0x374>)
   1d8d0:	4798      	blx	r3
   1d8d2:	0003      	movs	r3, r0
   1d8d4:	001a      	movs	r2, r3
   1d8d6:	4bb7      	ldr	r3, [pc, #732]	; (1dbb4 <xQueueSemaphoreTake+0x378>)
   1d8d8:	5c9b      	ldrb	r3, [r3, r2]
   1d8da:	3328      	adds	r3, #40	; 0x28
   1d8dc:	b2db      	uxtb	r3, r3
   1d8de:	001d      	movs	r5, r3
   1d8e0:	69fb      	ldr	r3, [r7, #28]
   1d8e2:	0018      	movs	r0, r3
   1d8e4:	4bb2      	ldr	r3, [pc, #712]	; (1dbb0 <xQueueSemaphoreTake+0x374>)
   1d8e6:	4798      	blx	r3
   1d8e8:	0003      	movs	r3, r0
   1d8ea:	001a      	movs	r2, r3
   1d8ec:	4bb1      	ldr	r3, [pc, #708]	; (1dbb4 <xQueueSemaphoreTake+0x378>)
   1d8ee:	5c9c      	ldrb	r4, [r3, r2]
   1d8f0:	69fb      	ldr	r3, [r7, #28]
   1d8f2:	0018      	movs	r0, r3
   1d8f4:	4bb0      	ldr	r3, [pc, #704]	; (1dbb8 <xQueueSemaphoreTake+0x37c>)
   1d8f6:	4798      	blx	r3
   1d8f8:	0003      	movs	r3, r0
   1d8fa:	b2db      	uxtb	r3, r3
   1d8fc:	001a      	movs	r2, r3
   1d8fe:	0021      	movs	r1, r4
   1d900:	0028      	movs	r0, r5
   1d902:	4bae      	ldr	r3, [pc, #696]	; (1dbbc <xQueueSemaphoreTake+0x380>)
   1d904:	4798      	blx	r3
   1d906:	69fb      	ldr	r3, [r7, #28]
   1d908:	0018      	movs	r0, r3
   1d90a:	4ba9      	ldr	r3, [pc, #676]	; (1dbb0 <xQueueSemaphoreTake+0x374>)
   1d90c:	4798      	blx	r3
   1d90e:	0003      	movs	r3, r0
   1d910:	001a      	movs	r2, r3
   1d912:	4ba8      	ldr	r3, [pc, #672]	; (1dbb4 <xQueueSemaphoreTake+0x378>)
   1d914:	5c9c      	ldrb	r4, [r3, r2]
   1d916:	69fb      	ldr	r3, [r7, #28]
   1d918:	0018      	movs	r0, r3
   1d91a:	4ba7      	ldr	r3, [pc, #668]	; (1dbb8 <xQueueSemaphoreTake+0x37c>)
   1d91c:	4798      	blx	r3
   1d91e:	0003      	movs	r3, r0
   1d920:	b2dd      	uxtb	r5, r3
   1d922:	69fb      	ldr	r3, [r7, #28]
   1d924:	0018      	movs	r0, r3
   1d926:	4ba2      	ldr	r3, [pc, #648]	; (1dbb0 <xQueueSemaphoreTake+0x374>)
   1d928:	4798      	blx	r3
   1d92a:	0003      	movs	r3, r0
   1d92c:	001a      	movs	r2, r3
   1d92e:	4ba1      	ldr	r3, [pc, #644]	; (1dbb4 <xQueueSemaphoreTake+0x378>)
   1d930:	5c9b      	ldrb	r3, [r3, r2]
   1d932:	2b02      	cmp	r3, #2
   1d934:	d108      	bne.n	1d948 <xQueueSemaphoreTake+0x10c>
   1d936:	4b9a      	ldr	r3, [pc, #616]	; (1dba0 <xQueueSemaphoreTake+0x364>)
   1d938:	4798      	blx	r3
   1d93a:	0003      	movs	r3, r0
   1d93c:	0018      	movs	r0, r3
   1d93e:	4ba0      	ldr	r3, [pc, #640]	; (1dbc0 <xQueueSemaphoreTake+0x384>)
   1d940:	4798      	blx	r3
   1d942:	0003      	movs	r3, r0
   1d944:	b2db      	uxtb	r3, r3
   1d946:	e004      	b.n	1d952 <xQueueSemaphoreTake+0x116>
   1d948:	69fb      	ldr	r3, [r7, #28]
   1d94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d94c:	b2db      	uxtb	r3, r3
   1d94e:	3b01      	subs	r3, #1
   1d950:	b2db      	uxtb	r3, r3
   1d952:	001a      	movs	r2, r3
   1d954:	0029      	movs	r1, r5
   1d956:	0020      	movs	r0, r4
   1d958:	4b9a      	ldr	r3, [pc, #616]	; (1dbc4 <xQueueSemaphoreTake+0x388>)
   1d95a:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1d95c:	69bb      	ldr	r3, [r7, #24]
   1d95e:	1e5a      	subs	r2, r3, #1
   1d960:	69fb      	ldr	r3, [r7, #28]
   1d962:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1d964:	69fb      	ldr	r3, [r7, #28]
   1d966:	681b      	ldr	r3, [r3, #0]
   1d968:	2b00      	cmp	r3, #0
   1d96a:	d104      	bne.n	1d976 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1d96c:	4b96      	ldr	r3, [pc, #600]	; (1dbc8 <xQueueSemaphoreTake+0x38c>)
   1d96e:	4798      	blx	r3
   1d970:	0002      	movs	r2, r0
   1d972:	69fb      	ldr	r3, [r7, #28]
   1d974:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1d976:	69fb      	ldr	r3, [r7, #28]
   1d978:	691b      	ldr	r3, [r3, #16]
   1d97a:	2b00      	cmp	r3, #0
   1d97c:	d008      	beq.n	1d990 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1d97e:	69fb      	ldr	r3, [r7, #28]
   1d980:	3310      	adds	r3, #16
   1d982:	0018      	movs	r0, r3
   1d984:	4b91      	ldr	r3, [pc, #580]	; (1dbcc <xQueueSemaphoreTake+0x390>)
   1d986:	4798      	blx	r3
   1d988:	1e03      	subs	r3, r0, #0
   1d98a:	d001      	beq.n	1d990 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1d98c:	4b90      	ldr	r3, [pc, #576]	; (1dbd0 <xQueueSemaphoreTake+0x394>)
   1d98e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1d990:	4b90      	ldr	r3, [pc, #576]	; (1dbd4 <xQueueSemaphoreTake+0x398>)
   1d992:	4798      	blx	r3
				return pdPASS;
   1d994:	2301      	movs	r3, #1
   1d996:	e18b      	b.n	1dcb0 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1d998:	683b      	ldr	r3, [r7, #0]
   1d99a:	2b00      	cmp	r3, #0
   1d99c:	d140      	bne.n	1da20 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1d99e:	6a3b      	ldr	r3, [r7, #32]
   1d9a0:	2b00      	cmp	r3, #0
   1d9a2:	d001      	beq.n	1d9a8 <xQueueSemaphoreTake+0x16c>
   1d9a4:	b672      	cpsid	i
   1d9a6:	e7fe      	b.n	1d9a6 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1d9a8:	4b8a      	ldr	r3, [pc, #552]	; (1dbd4 <xQueueSemaphoreTake+0x398>)
   1d9aa:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1d9ac:	4b7c      	ldr	r3, [pc, #496]	; (1dba0 <xQueueSemaphoreTake+0x364>)
   1d9ae:	4798      	blx	r3
   1d9b0:	0003      	movs	r3, r0
   1d9b2:	0018      	movs	r0, r3
   1d9b4:	4b7b      	ldr	r3, [pc, #492]	; (1dba4 <xQueueSemaphoreTake+0x368>)
   1d9b6:	4798      	blx	r3
   1d9b8:	0003      	movs	r3, r0
   1d9ba:	001a      	movs	r2, r3
   1d9bc:	4b7a      	ldr	r3, [pc, #488]	; (1dba8 <xQueueSemaphoreTake+0x36c>)
   1d9be:	881b      	ldrh	r3, [r3, #0]
   1d9c0:	4013      	ands	r3, r2
   1d9c2:	b29b      	uxth	r3, r3
   1d9c4:	2b00      	cmp	r3, #0
   1d9c6:	d029      	beq.n	1da1c <xQueueSemaphoreTake+0x1e0>
   1d9c8:	69fb      	ldr	r3, [r7, #28]
   1d9ca:	0018      	movs	r0, r3
   1d9cc:	4b77      	ldr	r3, [pc, #476]	; (1dbac <xQueueSemaphoreTake+0x370>)
   1d9ce:	4798      	blx	r3
   1d9d0:	0003      	movs	r3, r0
   1d9d2:	001a      	movs	r2, r3
   1d9d4:	4b74      	ldr	r3, [pc, #464]	; (1dba8 <xQueueSemaphoreTake+0x36c>)
   1d9d6:	881b      	ldrh	r3, [r3, #0]
   1d9d8:	4013      	ands	r3, r2
   1d9da:	b29b      	uxth	r3, r3
   1d9dc:	2b00      	cmp	r3, #0
   1d9de:	d01d      	beq.n	1da1c <xQueueSemaphoreTake+0x1e0>
   1d9e0:	69fb      	ldr	r3, [r7, #28]
   1d9e2:	0018      	movs	r0, r3
   1d9e4:	4b72      	ldr	r3, [pc, #456]	; (1dbb0 <xQueueSemaphoreTake+0x374>)
   1d9e6:	4798      	blx	r3
   1d9e8:	0003      	movs	r3, r0
   1d9ea:	001a      	movs	r2, r3
   1d9ec:	4b71      	ldr	r3, [pc, #452]	; (1dbb4 <xQueueSemaphoreTake+0x378>)
   1d9ee:	5c9b      	ldrb	r3, [r3, r2]
   1d9f0:	3350      	adds	r3, #80	; 0x50
   1d9f2:	b2db      	uxtb	r3, r3
   1d9f4:	001d      	movs	r5, r3
   1d9f6:	69fb      	ldr	r3, [r7, #28]
   1d9f8:	0018      	movs	r0, r3
   1d9fa:	4b6d      	ldr	r3, [pc, #436]	; (1dbb0 <xQueueSemaphoreTake+0x374>)
   1d9fc:	4798      	blx	r3
   1d9fe:	0003      	movs	r3, r0
   1da00:	001a      	movs	r2, r3
   1da02:	4b6c      	ldr	r3, [pc, #432]	; (1dbb4 <xQueueSemaphoreTake+0x378>)
   1da04:	5c9c      	ldrb	r4, [r3, r2]
   1da06:	69fb      	ldr	r3, [r7, #28]
   1da08:	0018      	movs	r0, r3
   1da0a:	4b6b      	ldr	r3, [pc, #428]	; (1dbb8 <xQueueSemaphoreTake+0x37c>)
   1da0c:	4798      	blx	r3
   1da0e:	0003      	movs	r3, r0
   1da10:	b2db      	uxtb	r3, r3
   1da12:	001a      	movs	r2, r3
   1da14:	0021      	movs	r1, r4
   1da16:	0028      	movs	r0, r5
   1da18:	4b68      	ldr	r3, [pc, #416]	; (1dbbc <xQueueSemaphoreTake+0x380>)
   1da1a:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1da1c:	2300      	movs	r3, #0
   1da1e:	e147      	b.n	1dcb0 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1da20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1da22:	2b00      	cmp	r3, #0
   1da24:	d106      	bne.n	1da34 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1da26:	230c      	movs	r3, #12
   1da28:	18fb      	adds	r3, r7, r3
   1da2a:	0018      	movs	r0, r3
   1da2c:	4b6a      	ldr	r3, [pc, #424]	; (1dbd8 <xQueueSemaphoreTake+0x39c>)
   1da2e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1da30:	2301      	movs	r3, #1
   1da32:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1da34:	4b67      	ldr	r3, [pc, #412]	; (1dbd4 <xQueueSemaphoreTake+0x398>)
   1da36:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1da38:	4b68      	ldr	r3, [pc, #416]	; (1dbdc <xQueueSemaphoreTake+0x3a0>)
   1da3a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1da3c:	4b57      	ldr	r3, [pc, #348]	; (1db9c <xQueueSemaphoreTake+0x360>)
   1da3e:	4798      	blx	r3
   1da40:	69fb      	ldr	r3, [r7, #28]
   1da42:	2244      	movs	r2, #68	; 0x44
   1da44:	5c9b      	ldrb	r3, [r3, r2]
   1da46:	b25b      	sxtb	r3, r3
   1da48:	3301      	adds	r3, #1
   1da4a:	d103      	bne.n	1da54 <xQueueSemaphoreTake+0x218>
   1da4c:	69fb      	ldr	r3, [r7, #28]
   1da4e:	2244      	movs	r2, #68	; 0x44
   1da50:	2100      	movs	r1, #0
   1da52:	5499      	strb	r1, [r3, r2]
   1da54:	69fb      	ldr	r3, [r7, #28]
   1da56:	2245      	movs	r2, #69	; 0x45
   1da58:	5c9b      	ldrb	r3, [r3, r2]
   1da5a:	b25b      	sxtb	r3, r3
   1da5c:	3301      	adds	r3, #1
   1da5e:	d103      	bne.n	1da68 <xQueueSemaphoreTake+0x22c>
   1da60:	69fb      	ldr	r3, [r7, #28]
   1da62:	2245      	movs	r2, #69	; 0x45
   1da64:	2100      	movs	r1, #0
   1da66:	5499      	strb	r1, [r3, r2]
   1da68:	4b5a      	ldr	r3, [pc, #360]	; (1dbd4 <xQueueSemaphoreTake+0x398>)
   1da6a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1da6c:	003a      	movs	r2, r7
   1da6e:	230c      	movs	r3, #12
   1da70:	18fb      	adds	r3, r7, r3
   1da72:	0011      	movs	r1, r2
   1da74:	0018      	movs	r0, r3
   1da76:	4b5a      	ldr	r3, [pc, #360]	; (1dbe0 <xQueueSemaphoreTake+0x3a4>)
   1da78:	4798      	blx	r3
   1da7a:	1e03      	subs	r3, r0, #0
   1da7c:	d000      	beq.n	1da80 <xQueueSemaphoreTake+0x244>
   1da7e:	e0bd      	b.n	1dbfc <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1da80:	69fb      	ldr	r3, [r7, #28]
   1da82:	0018      	movs	r0, r3
   1da84:	4b57      	ldr	r3, [pc, #348]	; (1dbe4 <xQueueSemaphoreTake+0x3a8>)
   1da86:	4798      	blx	r3
   1da88:	1e03      	subs	r3, r0, #0
   1da8a:	d100      	bne.n	1da8e <xQueueSemaphoreTake+0x252>
   1da8c:	e07c      	b.n	1db88 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1da8e:	4b44      	ldr	r3, [pc, #272]	; (1dba0 <xQueueSemaphoreTake+0x364>)
   1da90:	4798      	blx	r3
   1da92:	0003      	movs	r3, r0
   1da94:	0018      	movs	r0, r3
   1da96:	4b43      	ldr	r3, [pc, #268]	; (1dba4 <xQueueSemaphoreTake+0x368>)
   1da98:	4798      	blx	r3
   1da9a:	0003      	movs	r3, r0
   1da9c:	001a      	movs	r2, r3
   1da9e:	4b42      	ldr	r3, [pc, #264]	; (1dba8 <xQueueSemaphoreTake+0x36c>)
   1daa0:	881b      	ldrh	r3, [r3, #0]
   1daa2:	4013      	ands	r3, r2
   1daa4:	b29b      	uxth	r3, r3
   1daa6:	2b00      	cmp	r3, #0
   1daa8:	d029      	beq.n	1dafe <xQueueSemaphoreTake+0x2c2>
   1daaa:	69fb      	ldr	r3, [r7, #28]
   1daac:	0018      	movs	r0, r3
   1daae:	4b3f      	ldr	r3, [pc, #252]	; (1dbac <xQueueSemaphoreTake+0x370>)
   1dab0:	4798      	blx	r3
   1dab2:	0003      	movs	r3, r0
   1dab4:	001a      	movs	r2, r3
   1dab6:	4b3c      	ldr	r3, [pc, #240]	; (1dba8 <xQueueSemaphoreTake+0x36c>)
   1dab8:	881b      	ldrh	r3, [r3, #0]
   1daba:	4013      	ands	r3, r2
   1dabc:	b29b      	uxth	r3, r3
   1dabe:	2b00      	cmp	r3, #0
   1dac0:	d01d      	beq.n	1dafe <xQueueSemaphoreTake+0x2c2>
   1dac2:	69fb      	ldr	r3, [r7, #28]
   1dac4:	0018      	movs	r0, r3
   1dac6:	4b3a      	ldr	r3, [pc, #232]	; (1dbb0 <xQueueSemaphoreTake+0x374>)
   1dac8:	4798      	blx	r3
   1daca:	0003      	movs	r3, r0
   1dacc:	001a      	movs	r2, r3
   1dace:	4b39      	ldr	r3, [pc, #228]	; (1dbb4 <xQueueSemaphoreTake+0x378>)
   1dad0:	5c9b      	ldrb	r3, [r3, r2]
   1dad2:	3368      	adds	r3, #104	; 0x68
   1dad4:	b2db      	uxtb	r3, r3
   1dad6:	001d      	movs	r5, r3
   1dad8:	69fb      	ldr	r3, [r7, #28]
   1dada:	0018      	movs	r0, r3
   1dadc:	4b34      	ldr	r3, [pc, #208]	; (1dbb0 <xQueueSemaphoreTake+0x374>)
   1dade:	4798      	blx	r3
   1dae0:	0003      	movs	r3, r0
   1dae2:	001a      	movs	r2, r3
   1dae4:	4b33      	ldr	r3, [pc, #204]	; (1dbb4 <xQueueSemaphoreTake+0x378>)
   1dae6:	5c9c      	ldrb	r4, [r3, r2]
   1dae8:	69fb      	ldr	r3, [r7, #28]
   1daea:	0018      	movs	r0, r3
   1daec:	4b32      	ldr	r3, [pc, #200]	; (1dbb8 <xQueueSemaphoreTake+0x37c>)
   1daee:	4798      	blx	r3
   1daf0:	0003      	movs	r3, r0
   1daf2:	b2db      	uxtb	r3, r3
   1daf4:	001a      	movs	r2, r3
   1daf6:	0021      	movs	r1, r4
   1daf8:	0028      	movs	r0, r5
   1dafa:	4b30      	ldr	r3, [pc, #192]	; (1dbbc <xQueueSemaphoreTake+0x380>)
   1dafc:	4798      	blx	r3
   1dafe:	69fb      	ldr	r3, [r7, #28]
   1db00:	0018      	movs	r0, r3
   1db02:	4b2b      	ldr	r3, [pc, #172]	; (1dbb0 <xQueueSemaphoreTake+0x374>)
   1db04:	4798      	blx	r3
   1db06:	0003      	movs	r3, r0
   1db08:	001a      	movs	r2, r3
   1db0a:	4b2a      	ldr	r3, [pc, #168]	; (1dbb4 <xQueueSemaphoreTake+0x378>)
   1db0c:	5c9b      	ldrb	r3, [r3, r2]
   1db0e:	2b02      	cmp	r3, #2
   1db10:	d018      	beq.n	1db44 <xQueueSemaphoreTake+0x308>
   1db12:	4b23      	ldr	r3, [pc, #140]	; (1dba0 <xQueueSemaphoreTake+0x364>)
   1db14:	4798      	blx	r3
   1db16:	0003      	movs	r3, r0
   1db18:	0018      	movs	r0, r3
   1db1a:	4b22      	ldr	r3, [pc, #136]	; (1dba4 <xQueueSemaphoreTake+0x368>)
   1db1c:	4798      	blx	r3
   1db1e:	0003      	movs	r3, r0
   1db20:	001a      	movs	r2, r3
   1db22:	4b21      	ldr	r3, [pc, #132]	; (1dba8 <xQueueSemaphoreTake+0x36c>)
   1db24:	881b      	ldrh	r3, [r3, #0]
   1db26:	4013      	ands	r3, r2
   1db28:	b29b      	uxth	r3, r3
   1db2a:	2b00      	cmp	r3, #0
   1db2c:	d00a      	beq.n	1db44 <xQueueSemaphoreTake+0x308>
   1db2e:	4b1c      	ldr	r3, [pc, #112]	; (1dba0 <xQueueSemaphoreTake+0x364>)
   1db30:	4798      	blx	r3
   1db32:	0003      	movs	r3, r0
   1db34:	0018      	movs	r0, r3
   1db36:	4b22      	ldr	r3, [pc, #136]	; (1dbc0 <xQueueSemaphoreTake+0x384>)
   1db38:	4798      	blx	r3
   1db3a:	0003      	movs	r3, r0
   1db3c:	b2db      	uxtb	r3, r3
   1db3e:	0018      	movs	r0, r3
   1db40:	4b29      	ldr	r3, [pc, #164]	; (1dbe8 <xQueueSemaphoreTake+0x3ac>)
   1db42:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1db44:	69fb      	ldr	r3, [r7, #28]
   1db46:	681b      	ldr	r3, [r3, #0]
   1db48:	2b00      	cmp	r3, #0
   1db4a:	d10a      	bne.n	1db62 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1db4c:	4b13      	ldr	r3, [pc, #76]	; (1db9c <xQueueSemaphoreTake+0x360>)
   1db4e:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1db50:	69fb      	ldr	r3, [r7, #28]
   1db52:	685b      	ldr	r3, [r3, #4]
   1db54:	0018      	movs	r0, r3
   1db56:	4b25      	ldr	r3, [pc, #148]	; (1dbec <xQueueSemaphoreTake+0x3b0>)
   1db58:	4798      	blx	r3
   1db5a:	0003      	movs	r3, r0
   1db5c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1db5e:	4b1d      	ldr	r3, [pc, #116]	; (1dbd4 <xQueueSemaphoreTake+0x398>)
   1db60:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1db62:	69fb      	ldr	r3, [r7, #28]
   1db64:	3324      	adds	r3, #36	; 0x24
   1db66:	683a      	ldr	r2, [r7, #0]
   1db68:	0011      	movs	r1, r2
   1db6a:	0018      	movs	r0, r3
   1db6c:	4b20      	ldr	r3, [pc, #128]	; (1dbf0 <xQueueSemaphoreTake+0x3b4>)
   1db6e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1db70:	69fb      	ldr	r3, [r7, #28]
   1db72:	0018      	movs	r0, r3
   1db74:	4b1f      	ldr	r3, [pc, #124]	; (1dbf4 <xQueueSemaphoreTake+0x3b8>)
   1db76:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1db78:	4b1f      	ldr	r3, [pc, #124]	; (1dbf8 <xQueueSemaphoreTake+0x3bc>)
   1db7a:	4798      	blx	r3
   1db7c:	1e03      	subs	r3, r0, #0
   1db7e:	d000      	beq.n	1db82 <xQueueSemaphoreTake+0x346>
   1db80:	e680      	b.n	1d884 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1db82:	4b13      	ldr	r3, [pc, #76]	; (1dbd0 <xQueueSemaphoreTake+0x394>)
   1db84:	4798      	blx	r3
   1db86:	e67d      	b.n	1d884 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1db88:	69fb      	ldr	r3, [r7, #28]
   1db8a:	0018      	movs	r0, r3
   1db8c:	4b19      	ldr	r3, [pc, #100]	; (1dbf4 <xQueueSemaphoreTake+0x3b8>)
   1db8e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1db90:	4b19      	ldr	r3, [pc, #100]	; (1dbf8 <xQueueSemaphoreTake+0x3bc>)
   1db92:	4798      	blx	r3
   1db94:	e676      	b.n	1d884 <xQueueSemaphoreTake+0x48>
   1db96:	46c0      	nop			; (mov r8, r8)
   1db98:	0001f2b9 	.word	0x0001f2b9
   1db9c:	0001c599 	.word	0x0001c599
   1dba0:	0001a829 	.word	0x0001a829
   1dba4:	0001a58d 	.word	0x0001a58d
   1dba8:	20000118 	.word	0x20000118
   1dbac:	0001a64d 	.word	0x0001a64d
   1dbb0:	0001a54d 	.word	0x0001a54d
   1dbb4:	2000010c 	.word	0x2000010c
   1dbb8:	0001a62d 	.word	0x0001a62d
   1dbbc:	0001af85 	.word	0x0001af85
   1dbc0:	0001a56d 	.word	0x0001a56d
   1dbc4:	0001b5e1 	.word	0x0001b5e1
   1dbc8:	0001f785 	.word	0x0001f785
   1dbcc:	0001ee29 	.word	0x0001ee29
   1dbd0:	0001c581 	.word	0x0001c581
   1dbd4:	0001c5bd 	.word	0x0001c5bd
   1dbd8:	0001ef69 	.word	0x0001ef69
   1dbdc:	0001e851 	.word	0x0001e851
   1dbe0:	0001ef91 	.word	0x0001ef91
   1dbe4:	0001df85 	.word	0x0001df85
   1dbe8:	0001b71d 	.word	0x0001b71d
   1dbec:	0001f2f1 	.word	0x0001f2f1
   1dbf0:	0001ed05 	.word	0x0001ed05
   1dbf4:	0001de95 	.word	0x0001de95
   1dbf8:	0001e869 	.word	0x0001e869
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1dbfc:	69fb      	ldr	r3, [r7, #28]
   1dbfe:	0018      	movs	r0, r3
   1dc00:	4b2d      	ldr	r3, [pc, #180]	; (1dcb8 <xQueueSemaphoreTake+0x47c>)
   1dc02:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1dc04:	4b2d      	ldr	r3, [pc, #180]	; (1dcbc <xQueueSemaphoreTake+0x480>)
   1dc06:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1dc08:	69fb      	ldr	r3, [r7, #28]
   1dc0a:	0018      	movs	r0, r3
   1dc0c:	4b2c      	ldr	r3, [pc, #176]	; (1dcc0 <xQueueSemaphoreTake+0x484>)
   1dc0e:	4798      	blx	r3
   1dc10:	1e03      	subs	r3, r0, #0
   1dc12:	d100      	bne.n	1dc16 <xQueueSemaphoreTake+0x3da>
   1dc14:	e636      	b.n	1d884 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1dc16:	6a3b      	ldr	r3, [r7, #32]
   1dc18:	2b00      	cmp	r3, #0
   1dc1a:	d010      	beq.n	1dc3e <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1dc1c:	4b29      	ldr	r3, [pc, #164]	; (1dcc4 <xQueueSemaphoreTake+0x488>)
   1dc1e:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1dc20:	69fb      	ldr	r3, [r7, #28]
   1dc22:	0018      	movs	r0, r3
   1dc24:	4b28      	ldr	r3, [pc, #160]	; (1dcc8 <xQueueSemaphoreTake+0x48c>)
   1dc26:	4798      	blx	r3
   1dc28:	0003      	movs	r3, r0
   1dc2a:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1dc2c:	69fb      	ldr	r3, [r7, #28]
   1dc2e:	685b      	ldr	r3, [r3, #4]
   1dc30:	697a      	ldr	r2, [r7, #20]
   1dc32:	0011      	movs	r1, r2
   1dc34:	0018      	movs	r0, r3
   1dc36:	4b25      	ldr	r3, [pc, #148]	; (1dccc <xQueueSemaphoreTake+0x490>)
   1dc38:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1dc3a:	4b25      	ldr	r3, [pc, #148]	; (1dcd0 <xQueueSemaphoreTake+0x494>)
   1dc3c:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1dc3e:	4b25      	ldr	r3, [pc, #148]	; (1dcd4 <xQueueSemaphoreTake+0x498>)
   1dc40:	4798      	blx	r3
   1dc42:	0003      	movs	r3, r0
   1dc44:	0018      	movs	r0, r3
   1dc46:	4b24      	ldr	r3, [pc, #144]	; (1dcd8 <xQueueSemaphoreTake+0x49c>)
   1dc48:	4798      	blx	r3
   1dc4a:	0003      	movs	r3, r0
   1dc4c:	001a      	movs	r2, r3
   1dc4e:	4b23      	ldr	r3, [pc, #140]	; (1dcdc <xQueueSemaphoreTake+0x4a0>)
   1dc50:	881b      	ldrh	r3, [r3, #0]
   1dc52:	4013      	ands	r3, r2
   1dc54:	b29b      	uxth	r3, r3
   1dc56:	2b00      	cmp	r3, #0
   1dc58:	d029      	beq.n	1dcae <xQueueSemaphoreTake+0x472>
   1dc5a:	69fb      	ldr	r3, [r7, #28]
   1dc5c:	0018      	movs	r0, r3
   1dc5e:	4b20      	ldr	r3, [pc, #128]	; (1dce0 <xQueueSemaphoreTake+0x4a4>)
   1dc60:	4798      	blx	r3
   1dc62:	0003      	movs	r3, r0
   1dc64:	001a      	movs	r2, r3
   1dc66:	4b1d      	ldr	r3, [pc, #116]	; (1dcdc <xQueueSemaphoreTake+0x4a0>)
   1dc68:	881b      	ldrh	r3, [r3, #0]
   1dc6a:	4013      	ands	r3, r2
   1dc6c:	b29b      	uxth	r3, r3
   1dc6e:	2b00      	cmp	r3, #0
   1dc70:	d01d      	beq.n	1dcae <xQueueSemaphoreTake+0x472>
   1dc72:	69fb      	ldr	r3, [r7, #28]
   1dc74:	0018      	movs	r0, r3
   1dc76:	4b1b      	ldr	r3, [pc, #108]	; (1dce4 <xQueueSemaphoreTake+0x4a8>)
   1dc78:	4798      	blx	r3
   1dc7a:	0003      	movs	r3, r0
   1dc7c:	001a      	movs	r2, r3
   1dc7e:	4b1a      	ldr	r3, [pc, #104]	; (1dce8 <xQueueSemaphoreTake+0x4ac>)
   1dc80:	5c9b      	ldrb	r3, [r3, r2]
   1dc82:	3350      	adds	r3, #80	; 0x50
   1dc84:	b2db      	uxtb	r3, r3
   1dc86:	001d      	movs	r5, r3
   1dc88:	69fb      	ldr	r3, [r7, #28]
   1dc8a:	0018      	movs	r0, r3
   1dc8c:	4b15      	ldr	r3, [pc, #84]	; (1dce4 <xQueueSemaphoreTake+0x4a8>)
   1dc8e:	4798      	blx	r3
   1dc90:	0003      	movs	r3, r0
   1dc92:	001a      	movs	r2, r3
   1dc94:	4b14      	ldr	r3, [pc, #80]	; (1dce8 <xQueueSemaphoreTake+0x4ac>)
   1dc96:	5c9c      	ldrb	r4, [r3, r2]
   1dc98:	69fb      	ldr	r3, [r7, #28]
   1dc9a:	0018      	movs	r0, r3
   1dc9c:	4b13      	ldr	r3, [pc, #76]	; (1dcec <xQueueSemaphoreTake+0x4b0>)
   1dc9e:	4798      	blx	r3
   1dca0:	0003      	movs	r3, r0
   1dca2:	b2db      	uxtb	r3, r3
   1dca4:	001a      	movs	r2, r3
   1dca6:	0021      	movs	r1, r4
   1dca8:	0028      	movs	r0, r5
   1dcaa:	4b11      	ldr	r3, [pc, #68]	; (1dcf0 <xQueueSemaphoreTake+0x4b4>)
   1dcac:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1dcae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1dcb0:	0018      	movs	r0, r3
   1dcb2:	46bd      	mov	sp, r7
   1dcb4:	b00a      	add	sp, #40	; 0x28
   1dcb6:	bdb0      	pop	{r4, r5, r7, pc}
   1dcb8:	0001de95 	.word	0x0001de95
   1dcbc:	0001e869 	.word	0x0001e869
   1dcc0:	0001df85 	.word	0x0001df85
   1dcc4:	0001c599 	.word	0x0001c599
   1dcc8:	0001dd37 	.word	0x0001dd37
   1dccc:	0001f5e9 	.word	0x0001f5e9
   1dcd0:	0001c5bd 	.word	0x0001c5bd
   1dcd4:	0001a829 	.word	0x0001a829
   1dcd8:	0001a58d 	.word	0x0001a58d
   1dcdc:	20000118 	.word	0x20000118
   1dce0:	0001a64d 	.word	0x0001a64d
   1dce4:	0001a54d 	.word	0x0001a54d
   1dce8:	2000010c 	.word	0x2000010c
   1dcec:	0001a62d 	.word	0x0001a62d
   1dcf0:	0001af85 	.word	0x0001af85

0001dcf4 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1dcf4:	b580      	push	{r7, lr}
   1dcf6:	b082      	sub	sp, #8
   1dcf8:	af00      	add	r7, sp, #0
   1dcfa:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1dcfc:	687b      	ldr	r3, [r7, #4]
   1dcfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1dd00:	0018      	movs	r0, r3
   1dd02:	46bd      	mov	sp, r7
   1dd04:	b002      	add	sp, #8
   1dd06:	bd80      	pop	{r7, pc}

0001dd08 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1dd08:	b580      	push	{r7, lr}
   1dd0a:	b082      	sub	sp, #8
   1dd0c:	af00      	add	r7, sp, #0
   1dd0e:	6078      	str	r0, [r7, #4]
   1dd10:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1dd12:	687b      	ldr	r3, [r7, #4]
   1dd14:	683a      	ldr	r2, [r7, #0]
   1dd16:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1dd18:	46c0      	nop			; (mov r8, r8)
   1dd1a:	46bd      	mov	sp, r7
   1dd1c:	b002      	add	sp, #8
   1dd1e:	bd80      	pop	{r7, pc}

0001dd20 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1dd20:	b580      	push	{r7, lr}
   1dd22:	b082      	sub	sp, #8
   1dd24:	af00      	add	r7, sp, #0
   1dd26:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1dd28:	687b      	ldr	r3, [r7, #4]
   1dd2a:	2250      	movs	r2, #80	; 0x50
   1dd2c:	5c9b      	ldrb	r3, [r3, r2]
	}
   1dd2e:	0018      	movs	r0, r3
   1dd30:	46bd      	mov	sp, r7
   1dd32:	b002      	add	sp, #8
   1dd34:	bd80      	pop	{r7, pc}

0001dd36 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1dd36:	b580      	push	{r7, lr}
   1dd38:	b084      	sub	sp, #16
   1dd3a:	af00      	add	r7, sp, #0
   1dd3c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1dd3e:	687b      	ldr	r3, [r7, #4]
   1dd40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1dd42:	2b00      	cmp	r3, #0
   1dd44:	d006      	beq.n	1dd54 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1dd46:	687b      	ldr	r3, [r7, #4]
   1dd48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1dd4a:	681b      	ldr	r3, [r3, #0]
   1dd4c:	2205      	movs	r2, #5
   1dd4e:	1ad3      	subs	r3, r2, r3
   1dd50:	60fb      	str	r3, [r7, #12]
   1dd52:	e001      	b.n	1dd58 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1dd54:	2300      	movs	r3, #0
   1dd56:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1dd58:	68fb      	ldr	r3, [r7, #12]
	}
   1dd5a:	0018      	movs	r0, r3
   1dd5c:	46bd      	mov	sp, r7
   1dd5e:	b004      	add	sp, #16
   1dd60:	bd80      	pop	{r7, pc}
	...

0001dd64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1dd64:	b580      	push	{r7, lr}
   1dd66:	b086      	sub	sp, #24
   1dd68:	af00      	add	r7, sp, #0
   1dd6a:	60f8      	str	r0, [r7, #12]
   1dd6c:	60b9      	str	r1, [r7, #8]
   1dd6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1dd70:	2300      	movs	r3, #0
   1dd72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1dd74:	68fb      	ldr	r3, [r7, #12]
   1dd76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1dd78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1dd7a:	68fb      	ldr	r3, [r7, #12]
   1dd7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1dd7e:	2b00      	cmp	r3, #0
   1dd80:	d10e      	bne.n	1dda0 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1dd82:	68fb      	ldr	r3, [r7, #12]
   1dd84:	681b      	ldr	r3, [r3, #0]
   1dd86:	2b00      	cmp	r3, #0
   1dd88:	d14e      	bne.n	1de28 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1dd8a:	68fb      	ldr	r3, [r7, #12]
   1dd8c:	685b      	ldr	r3, [r3, #4]
   1dd8e:	0018      	movs	r0, r3
   1dd90:	4b2a      	ldr	r3, [pc, #168]	; (1de3c <prvCopyDataToQueue+0xd8>)
   1dd92:	4798      	blx	r3
   1dd94:	0003      	movs	r3, r0
   1dd96:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1dd98:	68fb      	ldr	r3, [r7, #12]
   1dd9a:	2200      	movs	r2, #0
   1dd9c:	605a      	str	r2, [r3, #4]
   1dd9e:	e043      	b.n	1de28 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1dda0:	687b      	ldr	r3, [r7, #4]
   1dda2:	2b00      	cmp	r3, #0
   1dda4:	d119      	bne.n	1ddda <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1dda6:	68fb      	ldr	r3, [r7, #12]
   1dda8:	6898      	ldr	r0, [r3, #8]
   1ddaa:	68fb      	ldr	r3, [r7, #12]
   1ddac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1ddae:	68bb      	ldr	r3, [r7, #8]
   1ddb0:	0019      	movs	r1, r3
   1ddb2:	4b23      	ldr	r3, [pc, #140]	; (1de40 <prvCopyDataToQueue+0xdc>)
   1ddb4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1ddb6:	68fb      	ldr	r3, [r7, #12]
   1ddb8:	689a      	ldr	r2, [r3, #8]
   1ddba:	68fb      	ldr	r3, [r7, #12]
   1ddbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ddbe:	18d2      	adds	r2, r2, r3
   1ddc0:	68fb      	ldr	r3, [r7, #12]
   1ddc2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1ddc4:	68fb      	ldr	r3, [r7, #12]
   1ddc6:	689a      	ldr	r2, [r3, #8]
   1ddc8:	68fb      	ldr	r3, [r7, #12]
   1ddca:	685b      	ldr	r3, [r3, #4]
   1ddcc:	429a      	cmp	r2, r3
   1ddce:	d32b      	bcc.n	1de28 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1ddd0:	68fb      	ldr	r3, [r7, #12]
   1ddd2:	681a      	ldr	r2, [r3, #0]
   1ddd4:	68fb      	ldr	r3, [r7, #12]
   1ddd6:	609a      	str	r2, [r3, #8]
   1ddd8:	e026      	b.n	1de28 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ddda:	68fb      	ldr	r3, [r7, #12]
   1dddc:	68d8      	ldr	r0, [r3, #12]
   1ddde:	68fb      	ldr	r3, [r7, #12]
   1dde0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1dde2:	68bb      	ldr	r3, [r7, #8]
   1dde4:	0019      	movs	r1, r3
   1dde6:	4b16      	ldr	r3, [pc, #88]	; (1de40 <prvCopyDataToQueue+0xdc>)
   1dde8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1ddea:	68fb      	ldr	r3, [r7, #12]
   1ddec:	68da      	ldr	r2, [r3, #12]
   1ddee:	68fb      	ldr	r3, [r7, #12]
   1ddf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ddf2:	425b      	negs	r3, r3
   1ddf4:	18d2      	adds	r2, r2, r3
   1ddf6:	68fb      	ldr	r3, [r7, #12]
   1ddf8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1ddfa:	68fb      	ldr	r3, [r7, #12]
   1ddfc:	68da      	ldr	r2, [r3, #12]
   1ddfe:	68fb      	ldr	r3, [r7, #12]
   1de00:	681b      	ldr	r3, [r3, #0]
   1de02:	429a      	cmp	r2, r3
   1de04:	d207      	bcs.n	1de16 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1de06:	68fb      	ldr	r3, [r7, #12]
   1de08:	685a      	ldr	r2, [r3, #4]
   1de0a:	68fb      	ldr	r3, [r7, #12]
   1de0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1de0e:	425b      	negs	r3, r3
   1de10:	18d2      	adds	r2, r2, r3
   1de12:	68fb      	ldr	r3, [r7, #12]
   1de14:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1de16:	687b      	ldr	r3, [r7, #4]
   1de18:	2b02      	cmp	r3, #2
   1de1a:	d105      	bne.n	1de28 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1de1c:	693b      	ldr	r3, [r7, #16]
   1de1e:	2b00      	cmp	r3, #0
   1de20:	d002      	beq.n	1de28 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1de22:	693b      	ldr	r3, [r7, #16]
   1de24:	3b01      	subs	r3, #1
   1de26:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1de28:	693b      	ldr	r3, [r7, #16]
   1de2a:	1c5a      	adds	r2, r3, #1
   1de2c:	68fb      	ldr	r3, [r7, #12]
   1de2e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1de30:	697b      	ldr	r3, [r7, #20]
}
   1de32:	0018      	movs	r0, r3
   1de34:	46bd      	mov	sp, r7
   1de36:	b006      	add	sp, #24
   1de38:	bd80      	pop	{r7, pc}
   1de3a:	46c0      	nop			; (mov r8, r8)
   1de3c:	0001f481 	.word	0x0001f481
   1de40:	00037915 	.word	0x00037915

0001de44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1de44:	b580      	push	{r7, lr}
   1de46:	b082      	sub	sp, #8
   1de48:	af00      	add	r7, sp, #0
   1de4a:	6078      	str	r0, [r7, #4]
   1de4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1de4e:	687b      	ldr	r3, [r7, #4]
   1de50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1de52:	2b00      	cmp	r3, #0
   1de54:	d018      	beq.n	1de88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1de56:	687b      	ldr	r3, [r7, #4]
   1de58:	68da      	ldr	r2, [r3, #12]
   1de5a:	687b      	ldr	r3, [r7, #4]
   1de5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1de5e:	18d2      	adds	r2, r2, r3
   1de60:	687b      	ldr	r3, [r7, #4]
   1de62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1de64:	687b      	ldr	r3, [r7, #4]
   1de66:	68da      	ldr	r2, [r3, #12]
   1de68:	687b      	ldr	r3, [r7, #4]
   1de6a:	685b      	ldr	r3, [r3, #4]
   1de6c:	429a      	cmp	r2, r3
   1de6e:	d303      	bcc.n	1de78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1de70:	687b      	ldr	r3, [r7, #4]
   1de72:	681a      	ldr	r2, [r3, #0]
   1de74:	687b      	ldr	r3, [r7, #4]
   1de76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1de78:	687b      	ldr	r3, [r7, #4]
   1de7a:	68d9      	ldr	r1, [r3, #12]
   1de7c:	687b      	ldr	r3, [r7, #4]
   1de7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1de80:	683b      	ldr	r3, [r7, #0]
   1de82:	0018      	movs	r0, r3
   1de84:	4b02      	ldr	r3, [pc, #8]	; (1de90 <prvCopyDataFromQueue+0x4c>)
   1de86:	4798      	blx	r3
	}
}
   1de88:	46c0      	nop			; (mov r8, r8)
   1de8a:	46bd      	mov	sp, r7
   1de8c:	b002      	add	sp, #8
   1de8e:	bd80      	pop	{r7, pc}
   1de90:	00037915 	.word	0x00037915

0001de94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1de94:	b580      	push	{r7, lr}
   1de96:	b084      	sub	sp, #16
   1de98:	af00      	add	r7, sp, #0
   1de9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1de9c:	4b34      	ldr	r3, [pc, #208]	; (1df70 <prvUnlockQueue+0xdc>)
   1de9e:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1dea0:	230f      	movs	r3, #15
   1dea2:	18fb      	adds	r3, r7, r3
   1dea4:	687a      	ldr	r2, [r7, #4]
   1dea6:	2145      	movs	r1, #69	; 0x45
   1dea8:	5c52      	ldrb	r2, [r2, r1]
   1deaa:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1deac:	e022      	b.n	1def4 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1deae:	687b      	ldr	r3, [r7, #4]
   1deb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1deb2:	2b00      	cmp	r3, #0
   1deb4:	d009      	beq.n	1deca <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1deb6:	687b      	ldr	r3, [r7, #4]
   1deb8:	2100      	movs	r1, #0
   1deba:	0018      	movs	r0, r3
   1debc:	4b2d      	ldr	r3, [pc, #180]	; (1df74 <prvUnlockQueue+0xe0>)
   1debe:	4798      	blx	r3
   1dec0:	1e03      	subs	r3, r0, #0
   1dec2:	d00f      	beq.n	1dee4 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1dec4:	4b2c      	ldr	r3, [pc, #176]	; (1df78 <prvUnlockQueue+0xe4>)
   1dec6:	4798      	blx	r3
   1dec8:	e00c      	b.n	1dee4 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1deca:	687b      	ldr	r3, [r7, #4]
   1decc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1dece:	2b00      	cmp	r3, #0
   1ded0:	d017      	beq.n	1df02 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1ded2:	687b      	ldr	r3, [r7, #4]
   1ded4:	3324      	adds	r3, #36	; 0x24
   1ded6:	0018      	movs	r0, r3
   1ded8:	4b28      	ldr	r3, [pc, #160]	; (1df7c <prvUnlockQueue+0xe8>)
   1deda:	4798      	blx	r3
   1dedc:	1e03      	subs	r3, r0, #0
   1dede:	d001      	beq.n	1dee4 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1dee0:	4b25      	ldr	r3, [pc, #148]	; (1df78 <prvUnlockQueue+0xe4>)
   1dee2:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1dee4:	230f      	movs	r3, #15
   1dee6:	18fb      	adds	r3, r7, r3
   1dee8:	781b      	ldrb	r3, [r3, #0]
   1deea:	3b01      	subs	r3, #1
   1deec:	b2da      	uxtb	r2, r3
   1deee:	230f      	movs	r3, #15
   1def0:	18fb      	adds	r3, r7, r3
   1def2:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1def4:	230f      	movs	r3, #15
   1def6:	18fb      	adds	r3, r7, r3
   1def8:	781b      	ldrb	r3, [r3, #0]
   1defa:	b25b      	sxtb	r3, r3
   1defc:	2b00      	cmp	r3, #0
   1defe:	dcd6      	bgt.n	1deae <prvUnlockQueue+0x1a>
   1df00:	e000      	b.n	1df04 <prvUnlockQueue+0x70>
						break;
   1df02:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1df04:	687b      	ldr	r3, [r7, #4]
   1df06:	2245      	movs	r2, #69	; 0x45
   1df08:	21ff      	movs	r1, #255	; 0xff
   1df0a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1df0c:	4b1c      	ldr	r3, [pc, #112]	; (1df80 <prvUnlockQueue+0xec>)
   1df0e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1df10:	4b17      	ldr	r3, [pc, #92]	; (1df70 <prvUnlockQueue+0xdc>)
   1df12:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1df14:	230e      	movs	r3, #14
   1df16:	18fb      	adds	r3, r7, r3
   1df18:	687a      	ldr	r2, [r7, #4]
   1df1a:	2144      	movs	r1, #68	; 0x44
   1df1c:	5c52      	ldrb	r2, [r2, r1]
   1df1e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1df20:	e014      	b.n	1df4c <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1df22:	687b      	ldr	r3, [r7, #4]
   1df24:	691b      	ldr	r3, [r3, #16]
   1df26:	2b00      	cmp	r3, #0
   1df28:	d017      	beq.n	1df5a <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1df2a:	687b      	ldr	r3, [r7, #4]
   1df2c:	3310      	adds	r3, #16
   1df2e:	0018      	movs	r0, r3
   1df30:	4b12      	ldr	r3, [pc, #72]	; (1df7c <prvUnlockQueue+0xe8>)
   1df32:	4798      	blx	r3
   1df34:	1e03      	subs	r3, r0, #0
   1df36:	d001      	beq.n	1df3c <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1df38:	4b0f      	ldr	r3, [pc, #60]	; (1df78 <prvUnlockQueue+0xe4>)
   1df3a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1df3c:	230e      	movs	r3, #14
   1df3e:	18fb      	adds	r3, r7, r3
   1df40:	781b      	ldrb	r3, [r3, #0]
   1df42:	3b01      	subs	r3, #1
   1df44:	b2da      	uxtb	r2, r3
   1df46:	230e      	movs	r3, #14
   1df48:	18fb      	adds	r3, r7, r3
   1df4a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1df4c:	230e      	movs	r3, #14
   1df4e:	18fb      	adds	r3, r7, r3
   1df50:	781b      	ldrb	r3, [r3, #0]
   1df52:	b25b      	sxtb	r3, r3
   1df54:	2b00      	cmp	r3, #0
   1df56:	dce4      	bgt.n	1df22 <prvUnlockQueue+0x8e>
   1df58:	e000      	b.n	1df5c <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1df5a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1df5c:	687b      	ldr	r3, [r7, #4]
   1df5e:	2244      	movs	r2, #68	; 0x44
   1df60:	21ff      	movs	r1, #255	; 0xff
   1df62:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1df64:	4b06      	ldr	r3, [pc, #24]	; (1df80 <prvUnlockQueue+0xec>)
   1df66:	4798      	blx	r3
}
   1df68:	46c0      	nop			; (mov r8, r8)
   1df6a:	46bd      	mov	sp, r7
   1df6c:	b004      	add	sp, #16
   1df6e:	bd80      	pop	{r7, pc}
   1df70:	0001c599 	.word	0x0001c599
   1df74:	0001e069 	.word	0x0001e069
   1df78:	0001f03d 	.word	0x0001f03d
   1df7c:	0001ee29 	.word	0x0001ee29
   1df80:	0001c5bd 	.word	0x0001c5bd

0001df84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1df84:	b580      	push	{r7, lr}
   1df86:	b084      	sub	sp, #16
   1df88:	af00      	add	r7, sp, #0
   1df8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1df8c:	4b08      	ldr	r3, [pc, #32]	; (1dfb0 <prvIsQueueEmpty+0x2c>)
   1df8e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1df90:	687b      	ldr	r3, [r7, #4]
   1df92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1df94:	2b00      	cmp	r3, #0
   1df96:	d102      	bne.n	1df9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1df98:	2301      	movs	r3, #1
   1df9a:	60fb      	str	r3, [r7, #12]
   1df9c:	e001      	b.n	1dfa2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1df9e:	2300      	movs	r3, #0
   1dfa0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1dfa2:	4b04      	ldr	r3, [pc, #16]	; (1dfb4 <prvIsQueueEmpty+0x30>)
   1dfa4:	4798      	blx	r3

	return xReturn;
   1dfa6:	68fb      	ldr	r3, [r7, #12]
}
   1dfa8:	0018      	movs	r0, r3
   1dfaa:	46bd      	mov	sp, r7
   1dfac:	b004      	add	sp, #16
   1dfae:	bd80      	pop	{r7, pc}
   1dfb0:	0001c599 	.word	0x0001c599
   1dfb4:	0001c5bd 	.word	0x0001c5bd

0001dfb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1dfb8:	b580      	push	{r7, lr}
   1dfba:	b084      	sub	sp, #16
   1dfbc:	af00      	add	r7, sp, #0
   1dfbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1dfc0:	4b09      	ldr	r3, [pc, #36]	; (1dfe8 <prvIsQueueFull+0x30>)
   1dfc2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1dfc4:	687b      	ldr	r3, [r7, #4]
   1dfc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1dfc8:	687b      	ldr	r3, [r7, #4]
   1dfca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1dfcc:	429a      	cmp	r2, r3
   1dfce:	d102      	bne.n	1dfd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1dfd0:	2301      	movs	r3, #1
   1dfd2:	60fb      	str	r3, [r7, #12]
   1dfd4:	e001      	b.n	1dfda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1dfd6:	2300      	movs	r3, #0
   1dfd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1dfda:	4b04      	ldr	r3, [pc, #16]	; (1dfec <prvIsQueueFull+0x34>)
   1dfdc:	4798      	blx	r3

	return xReturn;
   1dfde:	68fb      	ldr	r3, [r7, #12]
}
   1dfe0:	0018      	movs	r0, r3
   1dfe2:	46bd      	mov	sp, r7
   1dfe4:	b004      	add	sp, #16
   1dfe6:	bd80      	pop	{r7, pc}
   1dfe8:	0001c599 	.word	0x0001c599
   1dfec:	0001c5bd 	.word	0x0001c5bd

0001dff0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1dff0:	b580      	push	{r7, lr}
   1dff2:	b086      	sub	sp, #24
   1dff4:	af00      	add	r7, sp, #0
   1dff6:	60f8      	str	r0, [r7, #12]
   1dff8:	60b9      	str	r1, [r7, #8]
   1dffa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1dffc:	68fb      	ldr	r3, [r7, #12]
   1dffe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1e000:	4b15      	ldr	r3, [pc, #84]	; (1e058 <vQueueWaitForMessageRestricted+0x68>)
   1e002:	4798      	blx	r3
   1e004:	697b      	ldr	r3, [r7, #20]
   1e006:	2244      	movs	r2, #68	; 0x44
   1e008:	5c9b      	ldrb	r3, [r3, r2]
   1e00a:	b25b      	sxtb	r3, r3
   1e00c:	3301      	adds	r3, #1
   1e00e:	d103      	bne.n	1e018 <vQueueWaitForMessageRestricted+0x28>
   1e010:	697b      	ldr	r3, [r7, #20]
   1e012:	2244      	movs	r2, #68	; 0x44
   1e014:	2100      	movs	r1, #0
   1e016:	5499      	strb	r1, [r3, r2]
   1e018:	697b      	ldr	r3, [r7, #20]
   1e01a:	2245      	movs	r2, #69	; 0x45
   1e01c:	5c9b      	ldrb	r3, [r3, r2]
   1e01e:	b25b      	sxtb	r3, r3
   1e020:	3301      	adds	r3, #1
   1e022:	d103      	bne.n	1e02c <vQueueWaitForMessageRestricted+0x3c>
   1e024:	697b      	ldr	r3, [r7, #20]
   1e026:	2245      	movs	r2, #69	; 0x45
   1e028:	2100      	movs	r1, #0
   1e02a:	5499      	strb	r1, [r3, r2]
   1e02c:	4b0b      	ldr	r3, [pc, #44]	; (1e05c <vQueueWaitForMessageRestricted+0x6c>)
   1e02e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1e030:	697b      	ldr	r3, [r7, #20]
   1e032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e034:	2b00      	cmp	r3, #0
   1e036:	d106      	bne.n	1e046 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1e038:	697b      	ldr	r3, [r7, #20]
   1e03a:	3324      	adds	r3, #36	; 0x24
   1e03c:	687a      	ldr	r2, [r7, #4]
   1e03e:	68b9      	ldr	r1, [r7, #8]
   1e040:	0018      	movs	r0, r3
   1e042:	4b07      	ldr	r3, [pc, #28]	; (1e060 <vQueueWaitForMessageRestricted+0x70>)
   1e044:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1e046:	697b      	ldr	r3, [r7, #20]
   1e048:	0018      	movs	r0, r3
   1e04a:	4b06      	ldr	r3, [pc, #24]	; (1e064 <vQueueWaitForMessageRestricted+0x74>)
   1e04c:	4798      	blx	r3
	}
   1e04e:	46c0      	nop			; (mov r8, r8)
   1e050:	46bd      	mov	sp, r7
   1e052:	b006      	add	sp, #24
   1e054:	bd80      	pop	{r7, pc}
   1e056:	46c0      	nop			; (mov r8, r8)
   1e058:	0001c599 	.word	0x0001c599
   1e05c:	0001c5bd 	.word	0x0001c5bd
   1e060:	0001ed49 	.word	0x0001ed49
   1e064:	0001de95 	.word	0x0001de95

0001e068 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1e068:	b5b0      	push	{r4, r5, r7, lr}
   1e06a:	b086      	sub	sp, #24
   1e06c:	af00      	add	r7, sp, #0
   1e06e:	6078      	str	r0, [r7, #4]
   1e070:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1e072:	687b      	ldr	r3, [r7, #4]
   1e074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1e076:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1e078:	2300      	movs	r3, #0
   1e07a:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1e07c:	693b      	ldr	r3, [r7, #16]
   1e07e:	2b00      	cmp	r3, #0
   1e080:	d101      	bne.n	1e086 <prvNotifyQueueSetContainer+0x1e>
   1e082:	b672      	cpsid	i
   1e084:	e7fe      	b.n	1e084 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1e086:	693b      	ldr	r3, [r7, #16]
   1e088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1e08a:	693b      	ldr	r3, [r7, #16]
   1e08c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e08e:	429a      	cmp	r2, r3
   1e090:	d301      	bcc.n	1e096 <prvNotifyQueueSetContainer+0x2e>
   1e092:	b672      	cpsid	i
   1e094:	e7fe      	b.n	1e094 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1e096:	693b      	ldr	r3, [r7, #16]
   1e098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1e09a:	693b      	ldr	r3, [r7, #16]
   1e09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e09e:	429a      	cmp	r2, r3
   1e0a0:	d300      	bcc.n	1e0a4 <prvNotifyQueueSetContainer+0x3c>
   1e0a2:	e08b      	b.n	1e1bc <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1e0a4:	230f      	movs	r3, #15
   1e0a6:	18fb      	adds	r3, r7, r3
   1e0a8:	693a      	ldr	r2, [r7, #16]
   1e0aa:	2145      	movs	r1, #69	; 0x45
   1e0ac:	5c52      	ldrb	r2, [r2, r1]
   1e0ae:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1e0b0:	4b45      	ldr	r3, [pc, #276]	; (1e1c8 <prvNotifyQueueSetContainer+0x160>)
   1e0b2:	4798      	blx	r3
   1e0b4:	0003      	movs	r3, r0
   1e0b6:	0018      	movs	r0, r3
   1e0b8:	4b44      	ldr	r3, [pc, #272]	; (1e1cc <prvNotifyQueueSetContainer+0x164>)
   1e0ba:	4798      	blx	r3
   1e0bc:	0003      	movs	r3, r0
   1e0be:	001a      	movs	r2, r3
   1e0c0:	4b43      	ldr	r3, [pc, #268]	; (1e1d0 <prvNotifyQueueSetContainer+0x168>)
   1e0c2:	881b      	ldrh	r3, [r3, #0]
   1e0c4:	4013      	ands	r3, r2
   1e0c6:	b29b      	uxth	r3, r3
   1e0c8:	2b00      	cmp	r3, #0
   1e0ca:	d02e      	beq.n	1e12a <prvNotifyQueueSetContainer+0xc2>
   1e0cc:	693b      	ldr	r3, [r7, #16]
   1e0ce:	0018      	movs	r0, r3
   1e0d0:	4b40      	ldr	r3, [pc, #256]	; (1e1d4 <prvNotifyQueueSetContainer+0x16c>)
   1e0d2:	4798      	blx	r3
   1e0d4:	0003      	movs	r3, r0
   1e0d6:	001a      	movs	r2, r3
   1e0d8:	4b3d      	ldr	r3, [pc, #244]	; (1e1d0 <prvNotifyQueueSetContainer+0x168>)
   1e0da:	881b      	ldrh	r3, [r3, #0]
   1e0dc:	4013      	ands	r3, r2
   1e0de:	b29b      	uxth	r3, r3
   1e0e0:	2b00      	cmp	r3, #0
   1e0e2:	d022      	beq.n	1e12a <prvNotifyQueueSetContainer+0xc2>
   1e0e4:	683b      	ldr	r3, [r7, #0]
   1e0e6:	2b00      	cmp	r3, #0
   1e0e8:	d10b      	bne.n	1e102 <prvNotifyQueueSetContainer+0x9a>
   1e0ea:	693b      	ldr	r3, [r7, #16]
   1e0ec:	0018      	movs	r0, r3
   1e0ee:	4b3a      	ldr	r3, [pc, #232]	; (1e1d8 <prvNotifyQueueSetContainer+0x170>)
   1e0f0:	4798      	blx	r3
   1e0f2:	0003      	movs	r3, r0
   1e0f4:	001a      	movs	r2, r3
   1e0f6:	4b39      	ldr	r3, [pc, #228]	; (1e1dc <prvNotifyQueueSetContainer+0x174>)
   1e0f8:	5c9b      	ldrb	r3, [r3, r2]
   1e0fa:	3320      	adds	r3, #32
   1e0fc:	b2db      	uxtb	r3, r3
   1e0fe:	001d      	movs	r5, r3
   1e100:	e000      	b.n	1e104 <prvNotifyQueueSetContainer+0x9c>
   1e102:	2525      	movs	r5, #37	; 0x25
   1e104:	693b      	ldr	r3, [r7, #16]
   1e106:	0018      	movs	r0, r3
   1e108:	4b33      	ldr	r3, [pc, #204]	; (1e1d8 <prvNotifyQueueSetContainer+0x170>)
   1e10a:	4798      	blx	r3
   1e10c:	0003      	movs	r3, r0
   1e10e:	001a      	movs	r2, r3
   1e110:	4b32      	ldr	r3, [pc, #200]	; (1e1dc <prvNotifyQueueSetContainer+0x174>)
   1e112:	5c9c      	ldrb	r4, [r3, r2]
   1e114:	693b      	ldr	r3, [r7, #16]
   1e116:	0018      	movs	r0, r3
   1e118:	4b31      	ldr	r3, [pc, #196]	; (1e1e0 <prvNotifyQueueSetContainer+0x178>)
   1e11a:	4798      	blx	r3
   1e11c:	0003      	movs	r3, r0
   1e11e:	b2db      	uxtb	r3, r3
   1e120:	001a      	movs	r2, r3
   1e122:	0021      	movs	r1, r4
   1e124:	0028      	movs	r0, r5
   1e126:	4b2f      	ldr	r3, [pc, #188]	; (1e1e4 <prvNotifyQueueSetContainer+0x17c>)
   1e128:	4798      	blx	r3
   1e12a:	693b      	ldr	r3, [r7, #16]
   1e12c:	0018      	movs	r0, r3
   1e12e:	4b2a      	ldr	r3, [pc, #168]	; (1e1d8 <prvNotifyQueueSetContainer+0x170>)
   1e130:	4798      	blx	r3
   1e132:	0003      	movs	r3, r0
   1e134:	001a      	movs	r2, r3
   1e136:	4b29      	ldr	r3, [pc, #164]	; (1e1dc <prvNotifyQueueSetContainer+0x174>)
   1e138:	5c9c      	ldrb	r4, [r3, r2]
   1e13a:	693b      	ldr	r3, [r7, #16]
   1e13c:	0018      	movs	r0, r3
   1e13e:	4b28      	ldr	r3, [pc, #160]	; (1e1e0 <prvNotifyQueueSetContainer+0x178>)
   1e140:	4798      	blx	r3
   1e142:	0003      	movs	r3, r0
   1e144:	b2dd      	uxtb	r5, r3
   1e146:	693b      	ldr	r3, [r7, #16]
   1e148:	0018      	movs	r0, r3
   1e14a:	4b23      	ldr	r3, [pc, #140]	; (1e1d8 <prvNotifyQueueSetContainer+0x170>)
   1e14c:	4798      	blx	r3
   1e14e:	0003      	movs	r3, r0
   1e150:	001a      	movs	r2, r3
   1e152:	4b22      	ldr	r3, [pc, #136]	; (1e1dc <prvNotifyQueueSetContainer+0x174>)
   1e154:	5c9b      	ldrb	r3, [r3, r2]
   1e156:	2b02      	cmp	r3, #2
   1e158:	d005      	beq.n	1e166 <prvNotifyQueueSetContainer+0xfe>
   1e15a:	693b      	ldr	r3, [r7, #16]
   1e15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e15e:	b2db      	uxtb	r3, r3
   1e160:	3301      	adds	r3, #1
   1e162:	b2db      	uxtb	r3, r3
   1e164:	e000      	b.n	1e168 <prvNotifyQueueSetContainer+0x100>
   1e166:	2300      	movs	r3, #0
   1e168:	001a      	movs	r2, r3
   1e16a:	0029      	movs	r1, r5
   1e16c:	0020      	movs	r0, r4
   1e16e:	4b1e      	ldr	r3, [pc, #120]	; (1e1e8 <prvNotifyQueueSetContainer+0x180>)
   1e170:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1e172:	683a      	ldr	r2, [r7, #0]
   1e174:	1d39      	adds	r1, r7, #4
   1e176:	693b      	ldr	r3, [r7, #16]
   1e178:	0018      	movs	r0, r3
   1e17a:	4b1c      	ldr	r3, [pc, #112]	; (1e1ec <prvNotifyQueueSetContainer+0x184>)
   1e17c:	4798      	blx	r3
   1e17e:	0003      	movs	r3, r0
   1e180:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1e182:	230f      	movs	r3, #15
   1e184:	18fb      	adds	r3, r7, r3
   1e186:	781b      	ldrb	r3, [r3, #0]
   1e188:	b25b      	sxtb	r3, r3
   1e18a:	3301      	adds	r3, #1
   1e18c:	d10d      	bne.n	1e1aa <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1e18e:	693b      	ldr	r3, [r7, #16]
   1e190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e192:	2b00      	cmp	r3, #0
   1e194:	d012      	beq.n	1e1bc <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1e196:	693b      	ldr	r3, [r7, #16]
   1e198:	3324      	adds	r3, #36	; 0x24
   1e19a:	0018      	movs	r0, r3
   1e19c:	4b14      	ldr	r3, [pc, #80]	; (1e1f0 <prvNotifyQueueSetContainer+0x188>)
   1e19e:	4798      	blx	r3
   1e1a0:	1e03      	subs	r3, r0, #0
   1e1a2:	d00b      	beq.n	1e1bc <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1e1a4:	2301      	movs	r3, #1
   1e1a6:	617b      	str	r3, [r7, #20]
   1e1a8:	e008      	b.n	1e1bc <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1e1aa:	230f      	movs	r3, #15
   1e1ac:	18fb      	adds	r3, r7, r3
   1e1ae:	781b      	ldrb	r3, [r3, #0]
   1e1b0:	3301      	adds	r3, #1
   1e1b2:	b2db      	uxtb	r3, r3
   1e1b4:	b259      	sxtb	r1, r3
   1e1b6:	693b      	ldr	r3, [r7, #16]
   1e1b8:	2245      	movs	r2, #69	; 0x45
   1e1ba:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1e1bc:	697b      	ldr	r3, [r7, #20]
	}
   1e1be:	0018      	movs	r0, r3
   1e1c0:	46bd      	mov	sp, r7
   1e1c2:	b006      	add	sp, #24
   1e1c4:	bdb0      	pop	{r4, r5, r7, pc}
   1e1c6:	46c0      	nop			; (mov r8, r8)
   1e1c8:	0001a829 	.word	0x0001a829
   1e1cc:	0001a58d 	.word	0x0001a58d
   1e1d0:	20000118 	.word	0x20000118
   1e1d4:	0001a64d 	.word	0x0001a64d
   1e1d8:	0001a54d 	.word	0x0001a54d
   1e1dc:	2000010c 	.word	0x2000010c
   1e1e0:	0001a62d 	.word	0x0001a62d
   1e1e4:	0001af85 	.word	0x0001af85
   1e1e8:	0001b5e1 	.word	0x0001b5e1
   1e1ec:	0001dd65 	.word	0x0001dd65
   1e1f0:	0001ee29 	.word	0x0001ee29

0001e1f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1e1f4:	b590      	push	{r4, r7, lr}
   1e1f6:	b08d      	sub	sp, #52	; 0x34
   1e1f8:	af04      	add	r7, sp, #16
   1e1fa:	60f8      	str	r0, [r7, #12]
   1e1fc:	60b9      	str	r1, [r7, #8]
   1e1fe:	603b      	str	r3, [r7, #0]
   1e200:	1dbb      	adds	r3, r7, #6
   1e202:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e204:	1dbb      	adds	r3, r7, #6
   1e206:	881b      	ldrh	r3, [r3, #0]
   1e208:	009b      	lsls	r3, r3, #2
   1e20a:	0018      	movs	r0, r3
   1e20c:	4b1d      	ldr	r3, [pc, #116]	; (1e284 <xTaskCreate+0x90>)
   1e20e:	4798      	blx	r3
   1e210:	0003      	movs	r3, r0
   1e212:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1e214:	697b      	ldr	r3, [r7, #20]
   1e216:	2b00      	cmp	r3, #0
   1e218:	d010      	beq.n	1e23c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1e21a:	2054      	movs	r0, #84	; 0x54
   1e21c:	4b19      	ldr	r3, [pc, #100]	; (1e284 <xTaskCreate+0x90>)
   1e21e:	4798      	blx	r3
   1e220:	0003      	movs	r3, r0
   1e222:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1e224:	69fb      	ldr	r3, [r7, #28]
   1e226:	2b00      	cmp	r3, #0
   1e228:	d003      	beq.n	1e232 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1e22a:	69fb      	ldr	r3, [r7, #28]
   1e22c:	697a      	ldr	r2, [r7, #20]
   1e22e:	631a      	str	r2, [r3, #48]	; 0x30
   1e230:	e006      	b.n	1e240 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1e232:	697b      	ldr	r3, [r7, #20]
   1e234:	0018      	movs	r0, r3
   1e236:	4b14      	ldr	r3, [pc, #80]	; (1e288 <xTaskCreate+0x94>)
   1e238:	4798      	blx	r3
   1e23a:	e001      	b.n	1e240 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1e23c:	2300      	movs	r3, #0
   1e23e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1e240:	69fb      	ldr	r3, [r7, #28]
   1e242:	2b00      	cmp	r3, #0
   1e244:	d016      	beq.n	1e274 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1e246:	1dbb      	adds	r3, r7, #6
   1e248:	881a      	ldrh	r2, [r3, #0]
   1e24a:	683c      	ldr	r4, [r7, #0]
   1e24c:	68b9      	ldr	r1, [r7, #8]
   1e24e:	68f8      	ldr	r0, [r7, #12]
   1e250:	2300      	movs	r3, #0
   1e252:	9303      	str	r3, [sp, #12]
   1e254:	69fb      	ldr	r3, [r7, #28]
   1e256:	9302      	str	r3, [sp, #8]
   1e258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1e25a:	9301      	str	r3, [sp, #4]
   1e25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e25e:	9300      	str	r3, [sp, #0]
   1e260:	0023      	movs	r3, r4
   1e262:	4c0a      	ldr	r4, [pc, #40]	; (1e28c <xTaskCreate+0x98>)
   1e264:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1e266:	69fb      	ldr	r3, [r7, #28]
   1e268:	0018      	movs	r0, r3
   1e26a:	4b09      	ldr	r3, [pc, #36]	; (1e290 <xTaskCreate+0x9c>)
   1e26c:	4798      	blx	r3
			xReturn = pdPASS;
   1e26e:	2301      	movs	r3, #1
   1e270:	61bb      	str	r3, [r7, #24]
   1e272:	e002      	b.n	1e27a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1e274:	2301      	movs	r3, #1
   1e276:	425b      	negs	r3, r3
   1e278:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1e27a:	69bb      	ldr	r3, [r7, #24]
	}
   1e27c:	0018      	movs	r0, r3
   1e27e:	46bd      	mov	sp, r7
   1e280:	b009      	add	sp, #36	; 0x24
   1e282:	bd90      	pop	{r4, r7, pc}
   1e284:	0001c6d1 	.word	0x0001c6d1
   1e288:	0001c795 	.word	0x0001c795
   1e28c:	0001e295 	.word	0x0001e295
   1e290:	0001e3a5 	.word	0x0001e3a5

0001e294 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1e294:	b580      	push	{r7, lr}
   1e296:	b086      	sub	sp, #24
   1e298:	af00      	add	r7, sp, #0
   1e29a:	60f8      	str	r0, [r7, #12]
   1e29c:	60b9      	str	r1, [r7, #8]
   1e29e:	607a      	str	r2, [r7, #4]
   1e2a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1e2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e2a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1e2a6:	687b      	ldr	r3, [r7, #4]
   1e2a8:	009b      	lsls	r3, r3, #2
   1e2aa:	001a      	movs	r2, r3
   1e2ac:	21a5      	movs	r1, #165	; 0xa5
   1e2ae:	4b39      	ldr	r3, [pc, #228]	; (1e394 <prvInitialiseNewTask+0x100>)
   1e2b0:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1e2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e2b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1e2b6:	687b      	ldr	r3, [r7, #4]
   1e2b8:	4937      	ldr	r1, [pc, #220]	; (1e398 <prvInitialiseNewTask+0x104>)
   1e2ba:	468c      	mov	ip, r1
   1e2bc:	4463      	add	r3, ip
   1e2be:	009b      	lsls	r3, r3, #2
   1e2c0:	18d3      	adds	r3, r2, r3
   1e2c2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1e2c4:	693b      	ldr	r3, [r7, #16]
   1e2c6:	2207      	movs	r2, #7
   1e2c8:	4393      	bics	r3, r2
   1e2ca:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1e2cc:	693b      	ldr	r3, [r7, #16]
   1e2ce:	2207      	movs	r2, #7
   1e2d0:	4013      	ands	r3, r2
   1e2d2:	d001      	beq.n	1e2d8 <prvInitialiseNewTask+0x44>
   1e2d4:	b672      	cpsid	i
   1e2d6:	e7fe      	b.n	1e2d6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1e2d8:	2300      	movs	r3, #0
   1e2da:	617b      	str	r3, [r7, #20]
   1e2dc:	e013      	b.n	1e306 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1e2de:	68ba      	ldr	r2, [r7, #8]
   1e2e0:	697b      	ldr	r3, [r7, #20]
   1e2e2:	18d3      	adds	r3, r2, r3
   1e2e4:	7818      	ldrb	r0, [r3, #0]
   1e2e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e2e8:	2134      	movs	r1, #52	; 0x34
   1e2ea:	697b      	ldr	r3, [r7, #20]
   1e2ec:	18d3      	adds	r3, r2, r3
   1e2ee:	185b      	adds	r3, r3, r1
   1e2f0:	1c02      	adds	r2, r0, #0
   1e2f2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1e2f4:	68ba      	ldr	r2, [r7, #8]
   1e2f6:	697b      	ldr	r3, [r7, #20]
   1e2f8:	18d3      	adds	r3, r2, r3
   1e2fa:	781b      	ldrb	r3, [r3, #0]
   1e2fc:	2b00      	cmp	r3, #0
   1e2fe:	d006      	beq.n	1e30e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1e300:	697b      	ldr	r3, [r7, #20]
   1e302:	3301      	adds	r3, #1
   1e304:	617b      	str	r3, [r7, #20]
   1e306:	697b      	ldr	r3, [r7, #20]
   1e308:	2b07      	cmp	r3, #7
   1e30a:	d9e8      	bls.n	1e2de <prvInitialiseNewTask+0x4a>
   1e30c:	e000      	b.n	1e310 <prvInitialiseNewTask+0x7c>
		{
			break;
   1e30e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1e310:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e312:	223b      	movs	r2, #59	; 0x3b
   1e314:	2100      	movs	r1, #0
   1e316:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1e318:	6a3b      	ldr	r3, [r7, #32]
   1e31a:	2b04      	cmp	r3, #4
   1e31c:	d901      	bls.n	1e322 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1e31e:	2304      	movs	r3, #4
   1e320:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1e322:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e324:	6a3a      	ldr	r2, [r7, #32]
   1e326:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1e328:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e32a:	6a3a      	ldr	r2, [r7, #32]
   1e32c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1e32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e330:	2200      	movs	r2, #0
   1e332:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1e334:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e336:	3304      	adds	r3, #4
   1e338:	0018      	movs	r0, r3
   1e33a:	4b18      	ldr	r3, [pc, #96]	; (1e39c <prvInitialiseNewTask+0x108>)
   1e33c:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1e33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e340:	3318      	adds	r3, #24
   1e342:	0018      	movs	r0, r3
   1e344:	4b15      	ldr	r3, [pc, #84]	; (1e39c <prvInitialiseNewTask+0x108>)
   1e346:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1e348:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e34a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e34c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e34e:	6a3b      	ldr	r3, [r7, #32]
   1e350:	2205      	movs	r2, #5
   1e352:	1ad2      	subs	r2, r2, r3
   1e354:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e356:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1e358:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e35a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e35c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1e35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e360:	2200      	movs	r2, #0
   1e362:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1e364:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e366:	2250      	movs	r2, #80	; 0x50
   1e368:	2100      	movs	r1, #0
   1e36a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1e36c:	683a      	ldr	r2, [r7, #0]
   1e36e:	68f9      	ldr	r1, [r7, #12]
   1e370:	693b      	ldr	r3, [r7, #16]
   1e372:	0018      	movs	r0, r3
   1e374:	4b0a      	ldr	r3, [pc, #40]	; (1e3a0 <prvInitialiseNewTask+0x10c>)
   1e376:	4798      	blx	r3
   1e378:	0002      	movs	r2, r0
   1e37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e37c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1e37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e380:	2b00      	cmp	r3, #0
   1e382:	d002      	beq.n	1e38a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1e384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e386:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e388:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1e38a:	46c0      	nop			; (mov r8, r8)
   1e38c:	46bd      	mov	sp, r7
   1e38e:	b006      	add	sp, #24
   1e390:	bd80      	pop	{r7, pc}
   1e392:	46c0      	nop			; (mov r8, r8)
   1e394:	0003794b 	.word	0x0003794b
   1e398:	3fffffff 	.word	0x3fffffff
   1e39c:	0001c341 	.word	0x0001c341
   1e3a0:	0001c459 	.word	0x0001c459

0001e3a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1e3a4:	b580      	push	{r7, lr}
   1e3a6:	b082      	sub	sp, #8
   1e3a8:	af00      	add	r7, sp, #0
   1e3aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1e3ac:	4b60      	ldr	r3, [pc, #384]	; (1e530 <prvAddNewTaskToReadyList+0x18c>)
   1e3ae:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1e3b0:	4b60      	ldr	r3, [pc, #384]	; (1e534 <prvAddNewTaskToReadyList+0x190>)
   1e3b2:	681b      	ldr	r3, [r3, #0]
   1e3b4:	1c5a      	adds	r2, r3, #1
   1e3b6:	4b5f      	ldr	r3, [pc, #380]	; (1e534 <prvAddNewTaskToReadyList+0x190>)
   1e3b8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1e3ba:	4b5f      	ldr	r3, [pc, #380]	; (1e538 <prvAddNewTaskToReadyList+0x194>)
   1e3bc:	681b      	ldr	r3, [r3, #0]
   1e3be:	2b00      	cmp	r3, #0
   1e3c0:	d109      	bne.n	1e3d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1e3c2:	4b5d      	ldr	r3, [pc, #372]	; (1e538 <prvAddNewTaskToReadyList+0x194>)
   1e3c4:	687a      	ldr	r2, [r7, #4]
   1e3c6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1e3c8:	4b5a      	ldr	r3, [pc, #360]	; (1e534 <prvAddNewTaskToReadyList+0x190>)
   1e3ca:	681b      	ldr	r3, [r3, #0]
   1e3cc:	2b01      	cmp	r3, #1
   1e3ce:	d110      	bne.n	1e3f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1e3d0:	4b5a      	ldr	r3, [pc, #360]	; (1e53c <prvAddNewTaskToReadyList+0x198>)
   1e3d2:	4798      	blx	r3
   1e3d4:	e00d      	b.n	1e3f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1e3d6:	4b5a      	ldr	r3, [pc, #360]	; (1e540 <prvAddNewTaskToReadyList+0x19c>)
   1e3d8:	681b      	ldr	r3, [r3, #0]
   1e3da:	2b00      	cmp	r3, #0
   1e3dc:	d109      	bne.n	1e3f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1e3de:	4b56      	ldr	r3, [pc, #344]	; (1e538 <prvAddNewTaskToReadyList+0x194>)
   1e3e0:	681b      	ldr	r3, [r3, #0]
   1e3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e3e4:	687b      	ldr	r3, [r7, #4]
   1e3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e3e8:	429a      	cmp	r2, r3
   1e3ea:	d802      	bhi.n	1e3f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1e3ec:	4b52      	ldr	r3, [pc, #328]	; (1e538 <prvAddNewTaskToReadyList+0x194>)
   1e3ee:	687a      	ldr	r2, [r7, #4]
   1e3f0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1e3f2:	4b54      	ldr	r3, [pc, #336]	; (1e544 <prvAddNewTaskToReadyList+0x1a0>)
   1e3f4:	681b      	ldr	r3, [r3, #0]
   1e3f6:	1c5a      	adds	r2, r3, #1
   1e3f8:	4b52      	ldr	r3, [pc, #328]	; (1e544 <prvAddNewTaskToReadyList+0x1a0>)
   1e3fa:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1e3fc:	4b51      	ldr	r3, [pc, #324]	; (1e544 <prvAddNewTaskToReadyList+0x1a0>)
   1e3fe:	681a      	ldr	r2, [r3, #0]
   1e400:	687b      	ldr	r3, [r7, #4]
   1e402:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1e404:	687b      	ldr	r3, [r7, #4]
   1e406:	2b00      	cmp	r3, #0
   1e408:	d052      	beq.n	1e4b0 <prvAddNewTaskToReadyList+0x10c>
   1e40a:	2003      	movs	r0, #3
   1e40c:	4b4e      	ldr	r3, [pc, #312]	; (1e548 <prvAddNewTaskToReadyList+0x1a4>)
   1e40e:	4798      	blx	r3
   1e410:	0003      	movs	r3, r0
   1e412:	b29a      	uxth	r2, r3
   1e414:	687b      	ldr	r3, [r7, #4]
   1e416:	0011      	movs	r1, r2
   1e418:	0018      	movs	r0, r3
   1e41a:	4b4c      	ldr	r3, [pc, #304]	; (1e54c <prvAddNewTaskToReadyList+0x1a8>)
   1e41c:	4798      	blx	r3
   1e41e:	4b4c      	ldr	r3, [pc, #304]	; (1e550 <prvAddNewTaskToReadyList+0x1ac>)
   1e420:	881a      	ldrh	r2, [r3, #0]
   1e422:	687b      	ldr	r3, [r7, #4]
   1e424:	0011      	movs	r1, r2
   1e426:	0018      	movs	r0, r3
   1e428:	4b4a      	ldr	r3, [pc, #296]	; (1e554 <prvAddNewTaskToReadyList+0x1b0>)
   1e42a:	4798      	blx	r3
   1e42c:	687b      	ldr	r3, [r7, #4]
   1e42e:	0018      	movs	r0, r3
   1e430:	4b49      	ldr	r3, [pc, #292]	; (1e558 <prvAddNewTaskToReadyList+0x1b4>)
   1e432:	4798      	blx	r3
   1e434:	0003      	movs	r3, r0
   1e436:	b2d9      	uxtb	r1, r3
   1e438:	687b      	ldr	r3, [r7, #4]
   1e43a:	3334      	adds	r3, #52	; 0x34
   1e43c:	001a      	movs	r2, r3
   1e43e:	2003      	movs	r0, #3
   1e440:	4b46      	ldr	r3, [pc, #280]	; (1e55c <prvAddNewTaskToReadyList+0x1b8>)
   1e442:	4798      	blx	r3
   1e444:	687b      	ldr	r3, [r7, #4]
   1e446:	0018      	movs	r0, r3
   1e448:	4b43      	ldr	r3, [pc, #268]	; (1e558 <prvAddNewTaskToReadyList+0x1b4>)
   1e44a:	4798      	blx	r3
   1e44c:	0003      	movs	r3, r0
   1e44e:	b2d9      	uxtb	r1, r3
   1e450:	687b      	ldr	r3, [r7, #4]
   1e452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e454:	b2db      	uxtb	r3, r3
   1e456:	001a      	movs	r2, r3
   1e458:	2003      	movs	r0, #3
   1e45a:	4b41      	ldr	r3, [pc, #260]	; (1e560 <prvAddNewTaskToReadyList+0x1bc>)
   1e45c:	4798      	blx	r3
   1e45e:	4b41      	ldr	r3, [pc, #260]	; (1e564 <prvAddNewTaskToReadyList+0x1c0>)
   1e460:	4798      	blx	r3
   1e462:	0003      	movs	r3, r0
   1e464:	0018      	movs	r0, r3
   1e466:	4b40      	ldr	r3, [pc, #256]	; (1e568 <prvAddNewTaskToReadyList+0x1c4>)
   1e468:	4798      	blx	r3
   1e46a:	0003      	movs	r3, r0
   1e46c:	001a      	movs	r2, r3
   1e46e:	4b3f      	ldr	r3, [pc, #252]	; (1e56c <prvAddNewTaskToReadyList+0x1c8>)
   1e470:	881b      	ldrh	r3, [r3, #0]
   1e472:	4013      	ands	r3, r2
   1e474:	b29b      	uxth	r3, r3
   1e476:	2b00      	cmp	r3, #0
   1e478:	d016      	beq.n	1e4a8 <prvAddNewTaskToReadyList+0x104>
   1e47a:	687b      	ldr	r3, [r7, #4]
   1e47c:	0018      	movs	r0, r3
   1e47e:	4b3a      	ldr	r3, [pc, #232]	; (1e568 <prvAddNewTaskToReadyList+0x1c4>)
   1e480:	4798      	blx	r3
   1e482:	0003      	movs	r3, r0
   1e484:	001a      	movs	r2, r3
   1e486:	4b39      	ldr	r3, [pc, #228]	; (1e56c <prvAddNewTaskToReadyList+0x1c8>)
   1e488:	881b      	ldrh	r3, [r3, #0]
   1e48a:	4013      	ands	r3, r2
   1e48c:	b29b      	uxth	r3, r3
   1e48e:	2b00      	cmp	r3, #0
   1e490:	d00a      	beq.n	1e4a8 <prvAddNewTaskToReadyList+0x104>
   1e492:	687b      	ldr	r3, [r7, #4]
   1e494:	0018      	movs	r0, r3
   1e496:	4b30      	ldr	r3, [pc, #192]	; (1e558 <prvAddNewTaskToReadyList+0x1b4>)
   1e498:	4798      	blx	r3
   1e49a:	0003      	movs	r3, r0
   1e49c:	b2db      	uxtb	r3, r3
   1e49e:	001a      	movs	r2, r3
   1e4a0:	2103      	movs	r1, #3
   1e4a2:	201b      	movs	r0, #27
   1e4a4:	4b32      	ldr	r3, [pc, #200]	; (1e570 <prvAddNewTaskToReadyList+0x1cc>)
   1e4a6:	4798      	blx	r3
   1e4a8:	687b      	ldr	r3, [r7, #4]
   1e4aa:	0018      	movs	r0, r3
   1e4ac:	4b31      	ldr	r3, [pc, #196]	; (1e574 <prvAddNewTaskToReadyList+0x1d0>)
   1e4ae:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1e4b0:	687b      	ldr	r3, [r7, #4]
   1e4b2:	0018      	movs	r0, r3
   1e4b4:	4b2c      	ldr	r3, [pc, #176]	; (1e568 <prvAddNewTaskToReadyList+0x1c4>)
   1e4b6:	4798      	blx	r3
   1e4b8:	0003      	movs	r3, r0
   1e4ba:	001a      	movs	r2, r3
   1e4bc:	4b2b      	ldr	r3, [pc, #172]	; (1e56c <prvAddNewTaskToReadyList+0x1c8>)
   1e4be:	881b      	ldrh	r3, [r3, #0]
   1e4c0:	4013      	ands	r3, r2
   1e4c2:	b29b      	uxth	r3, r3
   1e4c4:	2b00      	cmp	r3, #0
   1e4c6:	d008      	beq.n	1e4da <prvAddNewTaskToReadyList+0x136>
   1e4c8:	687b      	ldr	r3, [r7, #4]
   1e4ca:	0018      	movs	r0, r3
   1e4cc:	4b22      	ldr	r3, [pc, #136]	; (1e558 <prvAddNewTaskToReadyList+0x1b4>)
   1e4ce:	4798      	blx	r3
   1e4d0:	0003      	movs	r3, r0
   1e4d2:	b2db      	uxtb	r3, r3
   1e4d4:	0018      	movs	r0, r3
   1e4d6:	4b28      	ldr	r3, [pc, #160]	; (1e578 <prvAddNewTaskToReadyList+0x1d4>)
   1e4d8:	4798      	blx	r3
   1e4da:	687b      	ldr	r3, [r7, #4]
   1e4dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e4de:	4b27      	ldr	r3, [pc, #156]	; (1e57c <prvAddNewTaskToReadyList+0x1d8>)
   1e4e0:	681b      	ldr	r3, [r3, #0]
   1e4e2:	429a      	cmp	r2, r3
   1e4e4:	d903      	bls.n	1e4ee <prvAddNewTaskToReadyList+0x14a>
   1e4e6:	687b      	ldr	r3, [r7, #4]
   1e4e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e4ea:	4b24      	ldr	r3, [pc, #144]	; (1e57c <prvAddNewTaskToReadyList+0x1d8>)
   1e4ec:	601a      	str	r2, [r3, #0]
   1e4ee:	687b      	ldr	r3, [r7, #4]
   1e4f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e4f2:	0013      	movs	r3, r2
   1e4f4:	009b      	lsls	r3, r3, #2
   1e4f6:	189b      	adds	r3, r3, r2
   1e4f8:	009b      	lsls	r3, r3, #2
   1e4fa:	4a21      	ldr	r2, [pc, #132]	; (1e580 <prvAddNewTaskToReadyList+0x1dc>)
   1e4fc:	189a      	adds	r2, r3, r2
   1e4fe:	687b      	ldr	r3, [r7, #4]
   1e500:	3304      	adds	r3, #4
   1e502:	0019      	movs	r1, r3
   1e504:	0010      	movs	r0, r2
   1e506:	4b1f      	ldr	r3, [pc, #124]	; (1e584 <prvAddNewTaskToReadyList+0x1e0>)
   1e508:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1e50a:	4b1f      	ldr	r3, [pc, #124]	; (1e588 <prvAddNewTaskToReadyList+0x1e4>)
   1e50c:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1e50e:	4b0c      	ldr	r3, [pc, #48]	; (1e540 <prvAddNewTaskToReadyList+0x19c>)
   1e510:	681b      	ldr	r3, [r3, #0]
   1e512:	2b00      	cmp	r3, #0
   1e514:	d008      	beq.n	1e528 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1e516:	4b08      	ldr	r3, [pc, #32]	; (1e538 <prvAddNewTaskToReadyList+0x194>)
   1e518:	681b      	ldr	r3, [r3, #0]
   1e51a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e51c:	687b      	ldr	r3, [r7, #4]
   1e51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e520:	429a      	cmp	r2, r3
   1e522:	d201      	bcs.n	1e528 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1e524:	4b19      	ldr	r3, [pc, #100]	; (1e58c <prvAddNewTaskToReadyList+0x1e8>)
   1e526:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1e528:	46c0      	nop			; (mov r8, r8)
   1e52a:	46bd      	mov	sp, r7
   1e52c:	b002      	add	sp, #8
   1e52e:	bd80      	pop	{r7, pc}
   1e530:	0001c599 	.word	0x0001c599
   1e534:	20004058 	.word	0x20004058
   1e538:	20003f80 	.word	0x20003f80
   1e53c:	0001f0c5 	.word	0x0001f0c5
   1e540:	20004064 	.word	0x20004064
   1e544:	20004074 	.word	0x20004074
   1e548:	0001bb0d 	.word	0x0001bb0d
   1e54c:	0001a5b1 	.word	0x0001a5b1
   1e550:	2000011a 	.word	0x2000011a
   1e554:	0001a5ed 	.word	0x0001a5ed
   1e558:	0001a56d 	.word	0x0001a56d
   1e55c:	0001bd3d 	.word	0x0001bd3d
   1e560:	0001b4a1 	.word	0x0001b4a1
   1e564:	0001a829 	.word	0x0001a829
   1e568:	0001a58d 	.word	0x0001a58d
   1e56c:	20000118 	.word	0x20000118
   1e570:	0001af85 	.word	0x0001af85
   1e574:	0001a6ed 	.word	0x0001a6ed
   1e578:	0001ad3d 	.word	0x0001ad3d
   1e57c:	20004060 	.word	0x20004060
   1e580:	20003f84 	.word	0x20003f84
   1e584:	0001c357 	.word	0x0001c357
   1e588:	0001c5bd 	.word	0x0001c5bd
   1e58c:	0001c581 	.word	0x0001c581

0001e590 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1e590:	b580      	push	{r7, lr}
   1e592:	b084      	sub	sp, #16
   1e594:	af00      	add	r7, sp, #0
   1e596:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1e598:	2300      	movs	r3, #0
   1e59a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1e59c:	687b      	ldr	r3, [r7, #4]
   1e59e:	2b00      	cmp	r3, #0
   1e5a0:	d045      	beq.n	1e62e <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1e5a2:	4b27      	ldr	r3, [pc, #156]	; (1e640 <vTaskDelay+0xb0>)
   1e5a4:	681b      	ldr	r3, [r3, #0]
   1e5a6:	2b00      	cmp	r3, #0
   1e5a8:	d001      	beq.n	1e5ae <vTaskDelay+0x1e>
   1e5aa:	b672      	cpsid	i
   1e5ac:	e7fe      	b.n	1e5ac <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1e5ae:	4b25      	ldr	r3, [pc, #148]	; (1e644 <vTaskDelay+0xb4>)
   1e5b0:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1e5b2:	4b25      	ldr	r3, [pc, #148]	; (1e648 <vTaskDelay+0xb8>)
   1e5b4:	681b      	ldr	r3, [r3, #0]
   1e5b6:	0018      	movs	r0, r3
   1e5b8:	4b24      	ldr	r3, [pc, #144]	; (1e64c <vTaskDelay+0xbc>)
   1e5ba:	4798      	blx	r3
   1e5bc:	0003      	movs	r3, r0
   1e5be:	001a      	movs	r2, r3
   1e5c0:	4b23      	ldr	r3, [pc, #140]	; (1e650 <vTaskDelay+0xc0>)
   1e5c2:	881b      	ldrh	r3, [r3, #0]
   1e5c4:	4013      	ands	r3, r2
   1e5c6:	b29b      	uxth	r3, r3
   1e5c8:	2b00      	cmp	r3, #0
   1e5ca:	d00e      	beq.n	1e5ea <vTaskDelay+0x5a>
   1e5cc:	687b      	ldr	r3, [r7, #4]
   1e5ce:	0019      	movs	r1, r3
   1e5d0:	2089      	movs	r0, #137	; 0x89
   1e5d2:	4b20      	ldr	r3, [pc, #128]	; (1e654 <vTaskDelay+0xc4>)
   1e5d4:	4798      	blx	r3
   1e5d6:	4b1c      	ldr	r3, [pc, #112]	; (1e648 <vTaskDelay+0xb8>)
   1e5d8:	681b      	ldr	r3, [r3, #0]
   1e5da:	0018      	movs	r0, r3
   1e5dc:	4b1e      	ldr	r3, [pc, #120]	; (1e658 <vTaskDelay+0xc8>)
   1e5de:	4798      	blx	r3
   1e5e0:	0003      	movs	r3, r0
   1e5e2:	b2db      	uxtb	r3, r3
   1e5e4:	0018      	movs	r0, r3
   1e5e6:	4b1d      	ldr	r3, [pc, #116]	; (1e65c <vTaskDelay+0xcc>)
   1e5e8:	4798      	blx	r3
   1e5ea:	4b1d      	ldr	r3, [pc, #116]	; (1e660 <vTaskDelay+0xd0>)
   1e5ec:	4798      	blx	r3
   1e5ee:	0003      	movs	r3, r0
   1e5f0:	0018      	movs	r0, r3
   1e5f2:	4b16      	ldr	r3, [pc, #88]	; (1e64c <vTaskDelay+0xbc>)
   1e5f4:	4798      	blx	r3
   1e5f6:	0003      	movs	r3, r0
   1e5f8:	001a      	movs	r2, r3
   1e5fa:	4b15      	ldr	r3, [pc, #84]	; (1e650 <vTaskDelay+0xc0>)
   1e5fc:	881b      	ldrh	r3, [r3, #0]
   1e5fe:	4013      	ands	r3, r2
   1e600:	b29b      	uxth	r3, r3
   1e602:	2b00      	cmp	r3, #0
   1e604:	d00a      	beq.n	1e61c <vTaskDelay+0x8c>
   1e606:	4b16      	ldr	r3, [pc, #88]	; (1e660 <vTaskDelay+0xd0>)
   1e608:	4798      	blx	r3
   1e60a:	0003      	movs	r3, r0
   1e60c:	0018      	movs	r0, r3
   1e60e:	4b12      	ldr	r3, [pc, #72]	; (1e658 <vTaskDelay+0xc8>)
   1e610:	4798      	blx	r3
   1e612:	0003      	movs	r3, r0
   1e614:	b2db      	uxtb	r3, r3
   1e616:	0018      	movs	r0, r3
   1e618:	4b10      	ldr	r3, [pc, #64]	; (1e65c <vTaskDelay+0xcc>)
   1e61a:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1e61c:	687b      	ldr	r3, [r7, #4]
   1e61e:	2100      	movs	r1, #0
   1e620:	0018      	movs	r0, r3
   1e622:	4b10      	ldr	r3, [pc, #64]	; (1e664 <vTaskDelay+0xd4>)
   1e624:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1e626:	4b10      	ldr	r3, [pc, #64]	; (1e668 <vTaskDelay+0xd8>)
   1e628:	4798      	blx	r3
   1e62a:	0003      	movs	r3, r0
   1e62c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1e62e:	68fb      	ldr	r3, [r7, #12]
   1e630:	2b00      	cmp	r3, #0
   1e632:	d101      	bne.n	1e638 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1e634:	4b0d      	ldr	r3, [pc, #52]	; (1e66c <vTaskDelay+0xdc>)
   1e636:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1e638:	46c0      	nop			; (mov r8, r8)
   1e63a:	46bd      	mov	sp, r7
   1e63c:	b004      	add	sp, #16
   1e63e:	bd80      	pop	{r7, pc}
   1e640:	20004080 	.word	0x20004080
   1e644:	0001e851 	.word	0x0001e851
   1e648:	20003f80 	.word	0x20003f80
   1e64c:	0001a58d 	.word	0x0001a58d
   1e650:	20000118 	.word	0x20000118
   1e654:	0001b28d 	.word	0x0001b28d
   1e658:	0001a56d 	.word	0x0001a56d
   1e65c:	0001b71d 	.word	0x0001b71d
   1e660:	0001a829 	.word	0x0001a829
   1e664:	0001f7a9 	.word	0x0001f7a9
   1e668:	0001e869 	.word	0x0001e869
   1e66c:	0001c581 	.word	0x0001c581

0001e670 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1e670:	b580      	push	{r7, lr}
   1e672:	b084      	sub	sp, #16
   1e674:	af00      	add	r7, sp, #0
   1e676:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1e678:	4b42      	ldr	r3, [pc, #264]	; (1e784 <vTaskSuspend+0x114>)
   1e67a:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1e67c:	687b      	ldr	r3, [r7, #4]
   1e67e:	2b00      	cmp	r3, #0
   1e680:	d102      	bne.n	1e688 <vTaskSuspend+0x18>
   1e682:	4b41      	ldr	r3, [pc, #260]	; (1e788 <vTaskSuspend+0x118>)
   1e684:	681b      	ldr	r3, [r3, #0]
   1e686:	e000      	b.n	1e68a <vTaskSuspend+0x1a>
   1e688:	687b      	ldr	r3, [r7, #4]
   1e68a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1e68c:	4b3f      	ldr	r3, [pc, #252]	; (1e78c <vTaskSuspend+0x11c>)
   1e68e:	4798      	blx	r3
   1e690:	0003      	movs	r3, r0
   1e692:	0018      	movs	r0, r3
   1e694:	4b3e      	ldr	r3, [pc, #248]	; (1e790 <vTaskSuspend+0x120>)
   1e696:	4798      	blx	r3
   1e698:	0003      	movs	r3, r0
   1e69a:	001a      	movs	r2, r3
   1e69c:	4b3d      	ldr	r3, [pc, #244]	; (1e794 <vTaskSuspend+0x124>)
   1e69e:	881b      	ldrh	r3, [r3, #0]
   1e6a0:	4013      	ands	r3, r2
   1e6a2:	b29b      	uxth	r3, r3
   1e6a4:	2b00      	cmp	r3, #0
   1e6a6:	d016      	beq.n	1e6d6 <vTaskSuspend+0x66>
   1e6a8:	68fb      	ldr	r3, [r7, #12]
   1e6aa:	0018      	movs	r0, r3
   1e6ac:	4b38      	ldr	r3, [pc, #224]	; (1e790 <vTaskSuspend+0x120>)
   1e6ae:	4798      	blx	r3
   1e6b0:	0003      	movs	r3, r0
   1e6b2:	001a      	movs	r2, r3
   1e6b4:	4b37      	ldr	r3, [pc, #220]	; (1e794 <vTaskSuspend+0x124>)
   1e6b6:	881b      	ldrh	r3, [r3, #0]
   1e6b8:	4013      	ands	r3, r2
   1e6ba:	b29b      	uxth	r3, r3
   1e6bc:	2b00      	cmp	r3, #0
   1e6be:	d00a      	beq.n	1e6d6 <vTaskSuspend+0x66>
   1e6c0:	68fb      	ldr	r3, [r7, #12]
   1e6c2:	0018      	movs	r0, r3
   1e6c4:	4b34      	ldr	r3, [pc, #208]	; (1e798 <vTaskSuspend+0x128>)
   1e6c6:	4798      	blx	r3
   1e6c8:	0003      	movs	r3, r0
   1e6ca:	b2db      	uxtb	r3, r3
   1e6cc:	001a      	movs	r2, r3
   1e6ce:	2103      	movs	r1, #3
   1e6d0:	208a      	movs	r0, #138	; 0x8a
   1e6d2:	4b32      	ldr	r3, [pc, #200]	; (1e79c <vTaskSuspend+0x12c>)
   1e6d4:	4798      	blx	r3
   1e6d6:	68fb      	ldr	r3, [r7, #12]
   1e6d8:	0018      	movs	r0, r3
   1e6da:	4b2f      	ldr	r3, [pc, #188]	; (1e798 <vTaskSuspend+0x128>)
   1e6dc:	4798      	blx	r3
   1e6de:	0003      	movs	r3, r0
   1e6e0:	b2db      	uxtb	r3, r3
   1e6e2:	0018      	movs	r0, r3
   1e6e4:	4b2e      	ldr	r3, [pc, #184]	; (1e7a0 <vTaskSuspend+0x130>)
   1e6e6:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1e6e8:	68fb      	ldr	r3, [r7, #12]
   1e6ea:	3304      	adds	r3, #4
   1e6ec:	0018      	movs	r0, r3
   1e6ee:	4b2d      	ldr	r3, [pc, #180]	; (1e7a4 <vTaskSuspend+0x134>)
   1e6f0:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1e6f2:	68fb      	ldr	r3, [r7, #12]
   1e6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e6f6:	2b00      	cmp	r3, #0
   1e6f8:	d004      	beq.n	1e704 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1e6fa:	68fb      	ldr	r3, [r7, #12]
   1e6fc:	3318      	adds	r3, #24
   1e6fe:	0018      	movs	r0, r3
   1e700:	4b28      	ldr	r3, [pc, #160]	; (1e7a4 <vTaskSuspend+0x134>)
   1e702:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1e704:	68fb      	ldr	r3, [r7, #12]
   1e706:	1d1a      	adds	r2, r3, #4
   1e708:	4b27      	ldr	r3, [pc, #156]	; (1e7a8 <vTaskSuspend+0x138>)
   1e70a:	0011      	movs	r1, r2
   1e70c:	0018      	movs	r0, r3
   1e70e:	4b27      	ldr	r3, [pc, #156]	; (1e7ac <vTaskSuspend+0x13c>)
   1e710:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1e712:	68fb      	ldr	r3, [r7, #12]
   1e714:	2250      	movs	r2, #80	; 0x50
   1e716:	5c9b      	ldrb	r3, [r3, r2]
   1e718:	b2db      	uxtb	r3, r3
   1e71a:	2b01      	cmp	r3, #1
   1e71c:	d103      	bne.n	1e726 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1e71e:	68fb      	ldr	r3, [r7, #12]
   1e720:	2250      	movs	r2, #80	; 0x50
   1e722:	2100      	movs	r1, #0
   1e724:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1e726:	4b22      	ldr	r3, [pc, #136]	; (1e7b0 <vTaskSuspend+0x140>)
   1e728:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1e72a:	4b22      	ldr	r3, [pc, #136]	; (1e7b4 <vTaskSuspend+0x144>)
   1e72c:	681b      	ldr	r3, [r3, #0]
   1e72e:	2b00      	cmp	r3, #0
   1e730:	d005      	beq.n	1e73e <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1e732:	4b14      	ldr	r3, [pc, #80]	; (1e784 <vTaskSuspend+0x114>)
   1e734:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1e736:	4b20      	ldr	r3, [pc, #128]	; (1e7b8 <vTaskSuspend+0x148>)
   1e738:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1e73a:	4b1d      	ldr	r3, [pc, #116]	; (1e7b0 <vTaskSuspend+0x140>)
   1e73c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1e73e:	4b12      	ldr	r3, [pc, #72]	; (1e788 <vTaskSuspend+0x118>)
   1e740:	681b      	ldr	r3, [r3, #0]
   1e742:	68fa      	ldr	r2, [r7, #12]
   1e744:	429a      	cmp	r2, r3
   1e746:	d118      	bne.n	1e77a <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1e748:	4b1a      	ldr	r3, [pc, #104]	; (1e7b4 <vTaskSuspend+0x144>)
   1e74a:	681b      	ldr	r3, [r3, #0]
   1e74c:	2b00      	cmp	r3, #0
   1e74e:	d008      	beq.n	1e762 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1e750:	4b1a      	ldr	r3, [pc, #104]	; (1e7bc <vTaskSuspend+0x14c>)
   1e752:	681b      	ldr	r3, [r3, #0]
   1e754:	2b00      	cmp	r3, #0
   1e756:	d001      	beq.n	1e75c <vTaskSuspend+0xec>
   1e758:	b672      	cpsid	i
   1e75a:	e7fe      	b.n	1e75a <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1e75c:	4b18      	ldr	r3, [pc, #96]	; (1e7c0 <vTaskSuspend+0x150>)
   1e75e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1e760:	e00b      	b.n	1e77a <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1e762:	4b11      	ldr	r3, [pc, #68]	; (1e7a8 <vTaskSuspend+0x138>)
   1e764:	681a      	ldr	r2, [r3, #0]
   1e766:	4b17      	ldr	r3, [pc, #92]	; (1e7c4 <vTaskSuspend+0x154>)
   1e768:	681b      	ldr	r3, [r3, #0]
   1e76a:	429a      	cmp	r2, r3
   1e76c:	d103      	bne.n	1e776 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1e76e:	4b06      	ldr	r3, [pc, #24]	; (1e788 <vTaskSuspend+0x118>)
   1e770:	2200      	movs	r2, #0
   1e772:	601a      	str	r2, [r3, #0]
	}
   1e774:	e001      	b.n	1e77a <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1e776:	4b14      	ldr	r3, [pc, #80]	; (1e7c8 <vTaskSuspend+0x158>)
   1e778:	4798      	blx	r3
	}
   1e77a:	46c0      	nop			; (mov r8, r8)
   1e77c:	46bd      	mov	sp, r7
   1e77e:	b004      	add	sp, #16
   1e780:	bd80      	pop	{r7, pc}
   1e782:	46c0      	nop			; (mov r8, r8)
   1e784:	0001c599 	.word	0x0001c599
   1e788:	20003f80 	.word	0x20003f80
   1e78c:	0001a829 	.word	0x0001a829
   1e790:	0001a58d 	.word	0x0001a58d
   1e794:	20000118 	.word	0x20000118
   1e798:	0001a56d 	.word	0x0001a56d
   1e79c:	0001af85 	.word	0x0001af85
   1e7a0:	0001b71d 	.word	0x0001b71d
   1e7a4:	0001c407 	.word	0x0001c407
   1e7a8:	20004044 	.word	0x20004044
   1e7ac:	0001c357 	.word	0x0001c357
   1e7b0:	0001c5bd 	.word	0x0001c5bd
   1e7b4:	20004064 	.word	0x20004064
   1e7b8:	0001f255 	.word	0x0001f255
   1e7bc:	20004080 	.word	0x20004080
   1e7c0:	0001c581 	.word	0x0001c581
   1e7c4:	20004058 	.word	0x20004058
   1e7c8:	0001ebe5 	.word	0x0001ebe5

0001e7cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1e7cc:	b590      	push	{r4, r7, lr}
   1e7ce:	b085      	sub	sp, #20
   1e7d0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1e7d2:	4916      	ldr	r1, [pc, #88]	; (1e82c <vTaskStartScheduler+0x60>)
   1e7d4:	4816      	ldr	r0, [pc, #88]	; (1e830 <vTaskStartScheduler+0x64>)
   1e7d6:	4b17      	ldr	r3, [pc, #92]	; (1e834 <vTaskStartScheduler+0x68>)
   1e7d8:	9301      	str	r3, [sp, #4]
   1e7da:	2300      	movs	r3, #0
   1e7dc:	9300      	str	r3, [sp, #0]
   1e7de:	2300      	movs	r3, #0
   1e7e0:	2296      	movs	r2, #150	; 0x96
   1e7e2:	4c15      	ldr	r4, [pc, #84]	; (1e838 <vTaskStartScheduler+0x6c>)
   1e7e4:	47a0      	blx	r4
   1e7e6:	0003      	movs	r3, r0
   1e7e8:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1e7ea:	687b      	ldr	r3, [r7, #4]
   1e7ec:	2b01      	cmp	r3, #1
   1e7ee:	d103      	bne.n	1e7f8 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1e7f0:	4b12      	ldr	r3, [pc, #72]	; (1e83c <vTaskStartScheduler+0x70>)
   1e7f2:	4798      	blx	r3
   1e7f4:	0003      	movs	r3, r0
   1e7f6:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1e7f8:	687b      	ldr	r3, [r7, #4]
   1e7fa:	2b01      	cmp	r3, #1
   1e7fc:	d10d      	bne.n	1e81a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1e7fe:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1e800:	4b0f      	ldr	r3, [pc, #60]	; (1e840 <vTaskStartScheduler+0x74>)
   1e802:	2201      	movs	r2, #1
   1e804:	4252      	negs	r2, r2
   1e806:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1e808:	4b0e      	ldr	r3, [pc, #56]	; (1e844 <vTaskStartScheduler+0x78>)
   1e80a:	2201      	movs	r2, #1
   1e80c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1e80e:	4b0e      	ldr	r3, [pc, #56]	; (1e848 <vTaskStartScheduler+0x7c>)
   1e810:	2200      	movs	r2, #0
   1e812:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1e814:	4b0d      	ldr	r3, [pc, #52]	; (1e84c <vTaskStartScheduler+0x80>)
   1e816:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1e818:	e004      	b.n	1e824 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1e81a:	687b      	ldr	r3, [r7, #4]
   1e81c:	3301      	adds	r3, #1
   1e81e:	d101      	bne.n	1e824 <vTaskStartScheduler+0x58>
   1e820:	b672      	cpsid	i
   1e822:	e7fe      	b.n	1e822 <vTaskStartScheduler+0x56>
}
   1e824:	46c0      	nop			; (mov r8, r8)
   1e826:	46bd      	mov	sp, r7
   1e828:	b003      	add	sp, #12
   1e82a:	bd90      	pop	{r4, r7, pc}
   1e82c:	0003b52c 	.word	0x0003b52c
   1e830:	0001f09d 	.word	0x0001f09d
   1e834:	2000407c 	.word	0x2000407c
   1e838:	0001e1f5 	.word	0x0001e1f5
   1e83c:	0001f85d 	.word	0x0001f85d
   1e840:	20004078 	.word	0x20004078
   1e844:	20004064 	.word	0x20004064
   1e848:	2000405c 	.word	0x2000405c
   1e84c:	0001c529 	.word	0x0001c529

0001e850 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1e850:	b580      	push	{r7, lr}
   1e852:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1e854:	4b03      	ldr	r3, [pc, #12]	; (1e864 <vTaskSuspendAll+0x14>)
   1e856:	681b      	ldr	r3, [r3, #0]
   1e858:	1c5a      	adds	r2, r3, #1
   1e85a:	4b02      	ldr	r3, [pc, #8]	; (1e864 <vTaskSuspendAll+0x14>)
   1e85c:	601a      	str	r2, [r3, #0]
}
   1e85e:	46c0      	nop			; (mov r8, r8)
   1e860:	46bd      	mov	sp, r7
   1e862:	bd80      	pop	{r7, pc}
   1e864:	20004080 	.word	0x20004080

0001e868 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1e868:	b580      	push	{r7, lr}
   1e86a:	b084      	sub	sp, #16
   1e86c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1e86e:	2300      	movs	r3, #0
   1e870:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1e872:	2300      	movs	r3, #0
   1e874:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1e876:	4b45      	ldr	r3, [pc, #276]	; (1e98c <xTaskResumeAll+0x124>)
   1e878:	681b      	ldr	r3, [r3, #0]
   1e87a:	2b00      	cmp	r3, #0
   1e87c:	d101      	bne.n	1e882 <xTaskResumeAll+0x1a>
   1e87e:	b672      	cpsid	i
   1e880:	e7fe      	b.n	1e880 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1e882:	4b43      	ldr	r3, [pc, #268]	; (1e990 <xTaskResumeAll+0x128>)
   1e884:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1e886:	4b41      	ldr	r3, [pc, #260]	; (1e98c <xTaskResumeAll+0x124>)
   1e888:	681b      	ldr	r3, [r3, #0]
   1e88a:	1e5a      	subs	r2, r3, #1
   1e88c:	4b3f      	ldr	r3, [pc, #252]	; (1e98c <xTaskResumeAll+0x124>)
   1e88e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1e890:	4b3e      	ldr	r3, [pc, #248]	; (1e98c <xTaskResumeAll+0x124>)
   1e892:	681b      	ldr	r3, [r3, #0]
   1e894:	2b00      	cmp	r3, #0
   1e896:	d000      	beq.n	1e89a <xTaskResumeAll+0x32>
   1e898:	e071      	b.n	1e97e <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1e89a:	4b3e      	ldr	r3, [pc, #248]	; (1e994 <xTaskResumeAll+0x12c>)
   1e89c:	681b      	ldr	r3, [r3, #0]
   1e89e:	2b00      	cmp	r3, #0
   1e8a0:	d100      	bne.n	1e8a4 <xTaskResumeAll+0x3c>
   1e8a2:	e06c      	b.n	1e97e <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1e8a4:	e044      	b.n	1e930 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1e8a6:	4b3c      	ldr	r3, [pc, #240]	; (1e998 <xTaskResumeAll+0x130>)
   1e8a8:	68db      	ldr	r3, [r3, #12]
   1e8aa:	68db      	ldr	r3, [r3, #12]
   1e8ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1e8ae:	68fb      	ldr	r3, [r7, #12]
   1e8b0:	3318      	adds	r3, #24
   1e8b2:	0018      	movs	r0, r3
   1e8b4:	4b39      	ldr	r3, [pc, #228]	; (1e99c <xTaskResumeAll+0x134>)
   1e8b6:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1e8b8:	68fb      	ldr	r3, [r7, #12]
   1e8ba:	3304      	adds	r3, #4
   1e8bc:	0018      	movs	r0, r3
   1e8be:	4b37      	ldr	r3, [pc, #220]	; (1e99c <xTaskResumeAll+0x134>)
   1e8c0:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1e8c2:	68fb      	ldr	r3, [r7, #12]
   1e8c4:	0018      	movs	r0, r3
   1e8c6:	4b36      	ldr	r3, [pc, #216]	; (1e9a0 <xTaskResumeAll+0x138>)
   1e8c8:	4798      	blx	r3
   1e8ca:	0003      	movs	r3, r0
   1e8cc:	001a      	movs	r2, r3
   1e8ce:	4b35      	ldr	r3, [pc, #212]	; (1e9a4 <xTaskResumeAll+0x13c>)
   1e8d0:	881b      	ldrh	r3, [r3, #0]
   1e8d2:	4013      	ands	r3, r2
   1e8d4:	b29b      	uxth	r3, r3
   1e8d6:	2b00      	cmp	r3, #0
   1e8d8:	d008      	beq.n	1e8ec <xTaskResumeAll+0x84>
   1e8da:	68fb      	ldr	r3, [r7, #12]
   1e8dc:	0018      	movs	r0, r3
   1e8de:	4b32      	ldr	r3, [pc, #200]	; (1e9a8 <xTaskResumeAll+0x140>)
   1e8e0:	4798      	blx	r3
   1e8e2:	0003      	movs	r3, r0
   1e8e4:	b2db      	uxtb	r3, r3
   1e8e6:	0018      	movs	r0, r3
   1e8e8:	4b30      	ldr	r3, [pc, #192]	; (1e9ac <xTaskResumeAll+0x144>)
   1e8ea:	4798      	blx	r3
   1e8ec:	68fb      	ldr	r3, [r7, #12]
   1e8ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e8f0:	4b2f      	ldr	r3, [pc, #188]	; (1e9b0 <xTaskResumeAll+0x148>)
   1e8f2:	681b      	ldr	r3, [r3, #0]
   1e8f4:	429a      	cmp	r2, r3
   1e8f6:	d903      	bls.n	1e900 <xTaskResumeAll+0x98>
   1e8f8:	68fb      	ldr	r3, [r7, #12]
   1e8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e8fc:	4b2c      	ldr	r3, [pc, #176]	; (1e9b0 <xTaskResumeAll+0x148>)
   1e8fe:	601a      	str	r2, [r3, #0]
   1e900:	68fb      	ldr	r3, [r7, #12]
   1e902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e904:	0013      	movs	r3, r2
   1e906:	009b      	lsls	r3, r3, #2
   1e908:	189b      	adds	r3, r3, r2
   1e90a:	009b      	lsls	r3, r3, #2
   1e90c:	4a29      	ldr	r2, [pc, #164]	; (1e9b4 <xTaskResumeAll+0x14c>)
   1e90e:	189a      	adds	r2, r3, r2
   1e910:	68fb      	ldr	r3, [r7, #12]
   1e912:	3304      	adds	r3, #4
   1e914:	0019      	movs	r1, r3
   1e916:	0010      	movs	r0, r2
   1e918:	4b27      	ldr	r3, [pc, #156]	; (1e9b8 <xTaskResumeAll+0x150>)
   1e91a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1e91c:	68fb      	ldr	r3, [r7, #12]
   1e91e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e920:	4b26      	ldr	r3, [pc, #152]	; (1e9bc <xTaskResumeAll+0x154>)
   1e922:	681b      	ldr	r3, [r3, #0]
   1e924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e926:	429a      	cmp	r2, r3
   1e928:	d302      	bcc.n	1e930 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1e92a:	4b25      	ldr	r3, [pc, #148]	; (1e9c0 <xTaskResumeAll+0x158>)
   1e92c:	2201      	movs	r2, #1
   1e92e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1e930:	4b19      	ldr	r3, [pc, #100]	; (1e998 <xTaskResumeAll+0x130>)
   1e932:	681b      	ldr	r3, [r3, #0]
   1e934:	2b00      	cmp	r3, #0
   1e936:	d1b6      	bne.n	1e8a6 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1e938:	68fb      	ldr	r3, [r7, #12]
   1e93a:	2b00      	cmp	r3, #0
   1e93c:	d001      	beq.n	1e942 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1e93e:	4b21      	ldr	r3, [pc, #132]	; (1e9c4 <xTaskResumeAll+0x15c>)
   1e940:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1e942:	4b21      	ldr	r3, [pc, #132]	; (1e9c8 <xTaskResumeAll+0x160>)
   1e944:	681b      	ldr	r3, [r3, #0]
   1e946:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1e948:	687b      	ldr	r3, [r7, #4]
   1e94a:	2b00      	cmp	r3, #0
   1e94c:	d00f      	beq.n	1e96e <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1e94e:	4b1f      	ldr	r3, [pc, #124]	; (1e9cc <xTaskResumeAll+0x164>)
   1e950:	4798      	blx	r3
   1e952:	1e03      	subs	r3, r0, #0
   1e954:	d002      	beq.n	1e95c <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1e956:	4b1a      	ldr	r3, [pc, #104]	; (1e9c0 <xTaskResumeAll+0x158>)
   1e958:	2201      	movs	r2, #1
   1e95a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1e95c:	687b      	ldr	r3, [r7, #4]
   1e95e:	3b01      	subs	r3, #1
   1e960:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1e962:	687b      	ldr	r3, [r7, #4]
   1e964:	2b00      	cmp	r3, #0
   1e966:	d1f2      	bne.n	1e94e <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1e968:	4b17      	ldr	r3, [pc, #92]	; (1e9c8 <xTaskResumeAll+0x160>)
   1e96a:	2200      	movs	r2, #0
   1e96c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1e96e:	4b14      	ldr	r3, [pc, #80]	; (1e9c0 <xTaskResumeAll+0x158>)
   1e970:	681b      	ldr	r3, [r3, #0]
   1e972:	2b00      	cmp	r3, #0
   1e974:	d003      	beq.n	1e97e <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1e976:	2301      	movs	r3, #1
   1e978:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1e97a:	4b15      	ldr	r3, [pc, #84]	; (1e9d0 <xTaskResumeAll+0x168>)
   1e97c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1e97e:	4b15      	ldr	r3, [pc, #84]	; (1e9d4 <xTaskResumeAll+0x16c>)
   1e980:	4798      	blx	r3

	return xAlreadyYielded;
   1e982:	68bb      	ldr	r3, [r7, #8]
}
   1e984:	0018      	movs	r0, r3
   1e986:	46bd      	mov	sp, r7
   1e988:	b004      	add	sp, #16
   1e98a:	bd80      	pop	{r7, pc}
   1e98c:	20004080 	.word	0x20004080
   1e990:	0001c599 	.word	0x0001c599
   1e994:	20004058 	.word	0x20004058
   1e998:	20004018 	.word	0x20004018
   1e99c:	0001c407 	.word	0x0001c407
   1e9a0:	0001a58d 	.word	0x0001a58d
   1e9a4:	20000118 	.word	0x20000118
   1e9a8:	0001a56d 	.word	0x0001a56d
   1e9ac:	0001ad3d 	.word	0x0001ad3d
   1e9b0:	20004060 	.word	0x20004060
   1e9b4:	20003f84 	.word	0x20003f84
   1e9b8:	0001c357 	.word	0x0001c357
   1e9bc:	20003f80 	.word	0x20003f80
   1e9c0:	2000406c 	.word	0x2000406c
   1e9c4:	0001f255 	.word	0x0001f255
   1e9c8:	20004068 	.word	0x20004068
   1e9cc:	0001e9f5 	.word	0x0001e9f5
   1e9d0:	0001c581 	.word	0x0001c581
   1e9d4:	0001c5bd 	.word	0x0001c5bd

0001e9d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1e9d8:	b580      	push	{r7, lr}
   1e9da:	b082      	sub	sp, #8
   1e9dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1e9de:	4b04      	ldr	r3, [pc, #16]	; (1e9f0 <xTaskGetTickCount+0x18>)
   1e9e0:	681b      	ldr	r3, [r3, #0]
   1e9e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1e9e4:	687b      	ldr	r3, [r7, #4]
}
   1e9e6:	0018      	movs	r0, r3
   1e9e8:	46bd      	mov	sp, r7
   1e9ea:	b002      	add	sp, #8
   1e9ec:	bd80      	pop	{r7, pc}
   1e9ee:	46c0      	nop			; (mov r8, r8)
   1e9f0:	2000405c 	.word	0x2000405c

0001e9f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1e9f4:	b580      	push	{r7, lr}
   1e9f6:	b086      	sub	sp, #24
   1e9f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1e9fa:	2300      	movs	r3, #0
   1e9fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1e9fe:	4b64      	ldr	r3, [pc, #400]	; (1eb90 <xTaskIncrementTick+0x19c>)
   1ea00:	681b      	ldr	r3, [r3, #0]
   1ea02:	2b01      	cmp	r3, #1
   1ea04:	d003      	beq.n	1ea0e <xTaskIncrementTick+0x1a>
   1ea06:	4b63      	ldr	r3, [pc, #396]	; (1eb94 <xTaskIncrementTick+0x1a0>)
   1ea08:	681b      	ldr	r3, [r3, #0]
   1ea0a:	2b00      	cmp	r3, #0
   1ea0c:	d107      	bne.n	1ea1e <xTaskIncrementTick+0x2a>
   1ea0e:	4b62      	ldr	r3, [pc, #392]	; (1eb98 <xTaskIncrementTick+0x1a4>)
   1ea10:	681b      	ldr	r3, [r3, #0]
   1ea12:	1c5a      	adds	r2, r3, #1
   1ea14:	4b60      	ldr	r3, [pc, #384]	; (1eb98 <xTaskIncrementTick+0x1a4>)
   1ea16:	601a      	str	r2, [r3, #0]
   1ea18:	2000      	movs	r0, #0
   1ea1a:	4b60      	ldr	r3, [pc, #384]	; (1eb9c <xTaskIncrementTick+0x1a8>)
   1ea1c:	4798      	blx	r3
   1ea1e:	4b5c      	ldr	r3, [pc, #368]	; (1eb90 <xTaskIncrementTick+0x19c>)
   1ea20:	681b      	ldr	r3, [r3, #0]
   1ea22:	2b00      	cmp	r3, #0
   1ea24:	d106      	bne.n	1ea34 <xTaskIncrementTick+0x40>
   1ea26:	4b5e      	ldr	r3, [pc, #376]	; (1eba0 <xTaskIncrementTick+0x1ac>)
   1ea28:	681b      	ldr	r3, [r3, #0]
   1ea2a:	3301      	adds	r3, #1
   1ea2c:	0019      	movs	r1, r3
   1ea2e:	2003      	movs	r0, #3
   1ea30:	4b5c      	ldr	r3, [pc, #368]	; (1eba4 <xTaskIncrementTick+0x1b0>)
   1ea32:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1ea34:	4b56      	ldr	r3, [pc, #344]	; (1eb90 <xTaskIncrementTick+0x19c>)
   1ea36:	681b      	ldr	r3, [r3, #0]
   1ea38:	2b00      	cmp	r3, #0
   1ea3a:	d000      	beq.n	1ea3e <xTaskIncrementTick+0x4a>
   1ea3c:	e098      	b.n	1eb70 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1ea3e:	4b58      	ldr	r3, [pc, #352]	; (1eba0 <xTaskIncrementTick+0x1ac>)
   1ea40:	681b      	ldr	r3, [r3, #0]
   1ea42:	3301      	adds	r3, #1
   1ea44:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1ea46:	4b56      	ldr	r3, [pc, #344]	; (1eba0 <xTaskIncrementTick+0x1ac>)
   1ea48:	693a      	ldr	r2, [r7, #16]
   1ea4a:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1ea4c:	693b      	ldr	r3, [r7, #16]
   1ea4e:	2b00      	cmp	r3, #0
   1ea50:	d117      	bne.n	1ea82 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1ea52:	4b55      	ldr	r3, [pc, #340]	; (1eba8 <xTaskIncrementTick+0x1b4>)
   1ea54:	681b      	ldr	r3, [r3, #0]
   1ea56:	681b      	ldr	r3, [r3, #0]
   1ea58:	2b00      	cmp	r3, #0
   1ea5a:	d001      	beq.n	1ea60 <xTaskIncrementTick+0x6c>
   1ea5c:	b672      	cpsid	i
   1ea5e:	e7fe      	b.n	1ea5e <xTaskIncrementTick+0x6a>
   1ea60:	4b51      	ldr	r3, [pc, #324]	; (1eba8 <xTaskIncrementTick+0x1b4>)
   1ea62:	681b      	ldr	r3, [r3, #0]
   1ea64:	60fb      	str	r3, [r7, #12]
   1ea66:	4b51      	ldr	r3, [pc, #324]	; (1ebac <xTaskIncrementTick+0x1b8>)
   1ea68:	681a      	ldr	r2, [r3, #0]
   1ea6a:	4b4f      	ldr	r3, [pc, #316]	; (1eba8 <xTaskIncrementTick+0x1b4>)
   1ea6c:	601a      	str	r2, [r3, #0]
   1ea6e:	4b4f      	ldr	r3, [pc, #316]	; (1ebac <xTaskIncrementTick+0x1b8>)
   1ea70:	68fa      	ldr	r2, [r7, #12]
   1ea72:	601a      	str	r2, [r3, #0]
   1ea74:	4b4e      	ldr	r3, [pc, #312]	; (1ebb0 <xTaskIncrementTick+0x1bc>)
   1ea76:	681b      	ldr	r3, [r3, #0]
   1ea78:	1c5a      	adds	r2, r3, #1
   1ea7a:	4b4d      	ldr	r3, [pc, #308]	; (1ebb0 <xTaskIncrementTick+0x1bc>)
   1ea7c:	601a      	str	r2, [r3, #0]
   1ea7e:	4b4d      	ldr	r3, [pc, #308]	; (1ebb4 <xTaskIncrementTick+0x1c0>)
   1ea80:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1ea82:	4b4d      	ldr	r3, [pc, #308]	; (1ebb8 <xTaskIncrementTick+0x1c4>)
   1ea84:	681b      	ldr	r3, [r3, #0]
   1ea86:	693a      	ldr	r2, [r7, #16]
   1ea88:	429a      	cmp	r2, r3
   1ea8a:	d363      	bcc.n	1eb54 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1ea8c:	4b46      	ldr	r3, [pc, #280]	; (1eba8 <xTaskIncrementTick+0x1b4>)
   1ea8e:	681b      	ldr	r3, [r3, #0]
   1ea90:	681b      	ldr	r3, [r3, #0]
   1ea92:	2b00      	cmp	r3, #0
   1ea94:	d101      	bne.n	1ea9a <xTaskIncrementTick+0xa6>
   1ea96:	2301      	movs	r3, #1
   1ea98:	e000      	b.n	1ea9c <xTaskIncrementTick+0xa8>
   1ea9a:	2300      	movs	r3, #0
   1ea9c:	2b00      	cmp	r3, #0
   1ea9e:	d004      	beq.n	1eaaa <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1eaa0:	4b45      	ldr	r3, [pc, #276]	; (1ebb8 <xTaskIncrementTick+0x1c4>)
   1eaa2:	2201      	movs	r2, #1
   1eaa4:	4252      	negs	r2, r2
   1eaa6:	601a      	str	r2, [r3, #0]
					break;
   1eaa8:	e054      	b.n	1eb54 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1eaaa:	4b3f      	ldr	r3, [pc, #252]	; (1eba8 <xTaskIncrementTick+0x1b4>)
   1eaac:	681b      	ldr	r3, [r3, #0]
   1eaae:	68db      	ldr	r3, [r3, #12]
   1eab0:	68db      	ldr	r3, [r3, #12]
   1eab2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1eab4:	68bb      	ldr	r3, [r7, #8]
   1eab6:	685b      	ldr	r3, [r3, #4]
   1eab8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1eaba:	693a      	ldr	r2, [r7, #16]
   1eabc:	687b      	ldr	r3, [r7, #4]
   1eabe:	429a      	cmp	r2, r3
   1eac0:	d203      	bcs.n	1eaca <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1eac2:	4b3d      	ldr	r3, [pc, #244]	; (1ebb8 <xTaskIncrementTick+0x1c4>)
   1eac4:	687a      	ldr	r2, [r7, #4]
   1eac6:	601a      	str	r2, [r3, #0]
						break;
   1eac8:	e044      	b.n	1eb54 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1eaca:	68bb      	ldr	r3, [r7, #8]
   1eacc:	3304      	adds	r3, #4
   1eace:	0018      	movs	r0, r3
   1ead0:	4b3a      	ldr	r3, [pc, #232]	; (1ebbc <xTaskIncrementTick+0x1c8>)
   1ead2:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1ead4:	68bb      	ldr	r3, [r7, #8]
   1ead6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ead8:	2b00      	cmp	r3, #0
   1eada:	d004      	beq.n	1eae6 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1eadc:	68bb      	ldr	r3, [r7, #8]
   1eade:	3318      	adds	r3, #24
   1eae0:	0018      	movs	r0, r3
   1eae2:	4b36      	ldr	r3, [pc, #216]	; (1ebbc <xTaskIncrementTick+0x1c8>)
   1eae4:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1eae6:	68bb      	ldr	r3, [r7, #8]
   1eae8:	0018      	movs	r0, r3
   1eaea:	4b35      	ldr	r3, [pc, #212]	; (1ebc0 <xTaskIncrementTick+0x1cc>)
   1eaec:	4798      	blx	r3
   1eaee:	0003      	movs	r3, r0
   1eaf0:	001a      	movs	r2, r3
   1eaf2:	4b34      	ldr	r3, [pc, #208]	; (1ebc4 <xTaskIncrementTick+0x1d0>)
   1eaf4:	881b      	ldrh	r3, [r3, #0]
   1eaf6:	4013      	ands	r3, r2
   1eaf8:	b29b      	uxth	r3, r3
   1eafa:	2b00      	cmp	r3, #0
   1eafc:	d008      	beq.n	1eb10 <xTaskIncrementTick+0x11c>
   1eafe:	68bb      	ldr	r3, [r7, #8]
   1eb00:	0018      	movs	r0, r3
   1eb02:	4b31      	ldr	r3, [pc, #196]	; (1ebc8 <xTaskIncrementTick+0x1d4>)
   1eb04:	4798      	blx	r3
   1eb06:	0003      	movs	r3, r0
   1eb08:	b2db      	uxtb	r3, r3
   1eb0a:	0018      	movs	r0, r3
   1eb0c:	4b2f      	ldr	r3, [pc, #188]	; (1ebcc <xTaskIncrementTick+0x1d8>)
   1eb0e:	4798      	blx	r3
   1eb10:	68bb      	ldr	r3, [r7, #8]
   1eb12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1eb14:	4b2e      	ldr	r3, [pc, #184]	; (1ebd0 <xTaskIncrementTick+0x1dc>)
   1eb16:	681b      	ldr	r3, [r3, #0]
   1eb18:	429a      	cmp	r2, r3
   1eb1a:	d903      	bls.n	1eb24 <xTaskIncrementTick+0x130>
   1eb1c:	68bb      	ldr	r3, [r7, #8]
   1eb1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1eb20:	4b2b      	ldr	r3, [pc, #172]	; (1ebd0 <xTaskIncrementTick+0x1dc>)
   1eb22:	601a      	str	r2, [r3, #0]
   1eb24:	68bb      	ldr	r3, [r7, #8]
   1eb26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1eb28:	0013      	movs	r3, r2
   1eb2a:	009b      	lsls	r3, r3, #2
   1eb2c:	189b      	adds	r3, r3, r2
   1eb2e:	009b      	lsls	r3, r3, #2
   1eb30:	4a28      	ldr	r2, [pc, #160]	; (1ebd4 <xTaskIncrementTick+0x1e0>)
   1eb32:	189a      	adds	r2, r3, r2
   1eb34:	68bb      	ldr	r3, [r7, #8]
   1eb36:	3304      	adds	r3, #4
   1eb38:	0019      	movs	r1, r3
   1eb3a:	0010      	movs	r0, r2
   1eb3c:	4b26      	ldr	r3, [pc, #152]	; (1ebd8 <xTaskIncrementTick+0x1e4>)
   1eb3e:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1eb40:	68bb      	ldr	r3, [r7, #8]
   1eb42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1eb44:	4b25      	ldr	r3, [pc, #148]	; (1ebdc <xTaskIncrementTick+0x1e8>)
   1eb46:	681b      	ldr	r3, [r3, #0]
   1eb48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1eb4a:	429a      	cmp	r2, r3
   1eb4c:	d39e      	bcc.n	1ea8c <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1eb4e:	2301      	movs	r3, #1
   1eb50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1eb52:	e79b      	b.n	1ea8c <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1eb54:	4b21      	ldr	r3, [pc, #132]	; (1ebdc <xTaskIncrementTick+0x1e8>)
   1eb56:	681b      	ldr	r3, [r3, #0]
   1eb58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1eb5a:	491e      	ldr	r1, [pc, #120]	; (1ebd4 <xTaskIncrementTick+0x1e0>)
   1eb5c:	0013      	movs	r3, r2
   1eb5e:	009b      	lsls	r3, r3, #2
   1eb60:	189b      	adds	r3, r3, r2
   1eb62:	009b      	lsls	r3, r3, #2
   1eb64:	585b      	ldr	r3, [r3, r1]
   1eb66:	2b01      	cmp	r3, #1
   1eb68:	d907      	bls.n	1eb7a <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1eb6a:	2301      	movs	r3, #1
   1eb6c:	617b      	str	r3, [r7, #20]
   1eb6e:	e004      	b.n	1eb7a <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1eb70:	4b08      	ldr	r3, [pc, #32]	; (1eb94 <xTaskIncrementTick+0x1a0>)
   1eb72:	681b      	ldr	r3, [r3, #0]
   1eb74:	1c5a      	adds	r2, r3, #1
   1eb76:	4b07      	ldr	r3, [pc, #28]	; (1eb94 <xTaskIncrementTick+0x1a0>)
   1eb78:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1eb7a:	4b19      	ldr	r3, [pc, #100]	; (1ebe0 <xTaskIncrementTick+0x1ec>)
   1eb7c:	681b      	ldr	r3, [r3, #0]
   1eb7e:	2b00      	cmp	r3, #0
   1eb80:	d001      	beq.n	1eb86 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1eb82:	2301      	movs	r3, #1
   1eb84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1eb86:	697b      	ldr	r3, [r7, #20]
}
   1eb88:	0018      	movs	r0, r3
   1eb8a:	46bd      	mov	sp, r7
   1eb8c:	b006      	add	sp, #24
   1eb8e:	bd80      	pop	{r7, pc}
   1eb90:	20004080 	.word	0x20004080
   1eb94:	20004068 	.word	0x20004068
   1eb98:	20000be0 	.word	0x20000be0
   1eb9c:	0001c221 	.word	0x0001c221
   1eba0:	2000405c 	.word	0x2000405c
   1eba4:	0001b28d 	.word	0x0001b28d
   1eba8:	20004010 	.word	0x20004010
   1ebac:	20004014 	.word	0x20004014
   1ebb0:	20004070 	.word	0x20004070
   1ebb4:	0001f255 	.word	0x0001f255
   1ebb8:	20004078 	.word	0x20004078
   1ebbc:	0001c407 	.word	0x0001c407
   1ebc0:	0001a58d 	.word	0x0001a58d
   1ebc4:	20000118 	.word	0x20000118
   1ebc8:	0001a56d 	.word	0x0001a56d
   1ebcc:	0001ad3d 	.word	0x0001ad3d
   1ebd0:	20004060 	.word	0x20004060
   1ebd4:	20003f84 	.word	0x20003f84
   1ebd8:	0001c357 	.word	0x0001c357
   1ebdc:	20003f80 	.word	0x20003f80
   1ebe0:	2000406c 	.word	0x2000406c

0001ebe4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1ebe4:	b580      	push	{r7, lr}
   1ebe6:	b082      	sub	sp, #8
   1ebe8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1ebea:	4b3a      	ldr	r3, [pc, #232]	; (1ecd4 <vTaskSwitchContext+0xf0>)
   1ebec:	681b      	ldr	r3, [r3, #0]
   1ebee:	2b00      	cmp	r3, #0
   1ebf0:	d003      	beq.n	1ebfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1ebf2:	4b39      	ldr	r3, [pc, #228]	; (1ecd8 <vTaskSwitchContext+0xf4>)
   1ebf4:	2201      	movs	r2, #1
   1ebf6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1ebf8:	e067      	b.n	1ecca <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1ebfa:	4b37      	ldr	r3, [pc, #220]	; (1ecd8 <vTaskSwitchContext+0xf4>)
   1ebfc:	2200      	movs	r2, #0
   1ebfe:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1ec00:	4b36      	ldr	r3, [pc, #216]	; (1ecdc <vTaskSwitchContext+0xf8>)
   1ec02:	681b      	ldr	r3, [r3, #0]
   1ec04:	681a      	ldr	r2, [r3, #0]
   1ec06:	4b35      	ldr	r3, [pc, #212]	; (1ecdc <vTaskSwitchContext+0xf8>)
   1ec08:	681b      	ldr	r3, [r3, #0]
   1ec0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ec0c:	429a      	cmp	r2, r3
   1ec0e:	d808      	bhi.n	1ec22 <vTaskSwitchContext+0x3e>
   1ec10:	4b32      	ldr	r3, [pc, #200]	; (1ecdc <vTaskSwitchContext+0xf8>)
   1ec12:	681a      	ldr	r2, [r3, #0]
   1ec14:	4b31      	ldr	r3, [pc, #196]	; (1ecdc <vTaskSwitchContext+0xf8>)
   1ec16:	681b      	ldr	r3, [r3, #0]
   1ec18:	3334      	adds	r3, #52	; 0x34
   1ec1a:	0019      	movs	r1, r3
   1ec1c:	0010      	movs	r0, r2
   1ec1e:	4b30      	ldr	r3, [pc, #192]	; (1ece0 <vTaskSwitchContext+0xfc>)
   1ec20:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1ec22:	4b30      	ldr	r3, [pc, #192]	; (1ece4 <vTaskSwitchContext+0x100>)
   1ec24:	681b      	ldr	r3, [r3, #0]
   1ec26:	607b      	str	r3, [r7, #4]
   1ec28:	e007      	b.n	1ec3a <vTaskSwitchContext+0x56>
   1ec2a:	687b      	ldr	r3, [r7, #4]
   1ec2c:	2b00      	cmp	r3, #0
   1ec2e:	d101      	bne.n	1ec34 <vTaskSwitchContext+0x50>
   1ec30:	b672      	cpsid	i
   1ec32:	e7fe      	b.n	1ec32 <vTaskSwitchContext+0x4e>
   1ec34:	687b      	ldr	r3, [r7, #4]
   1ec36:	3b01      	subs	r3, #1
   1ec38:	607b      	str	r3, [r7, #4]
   1ec3a:	492b      	ldr	r1, [pc, #172]	; (1ece8 <vTaskSwitchContext+0x104>)
   1ec3c:	687a      	ldr	r2, [r7, #4]
   1ec3e:	0013      	movs	r3, r2
   1ec40:	009b      	lsls	r3, r3, #2
   1ec42:	189b      	adds	r3, r3, r2
   1ec44:	009b      	lsls	r3, r3, #2
   1ec46:	585b      	ldr	r3, [r3, r1]
   1ec48:	2b00      	cmp	r3, #0
   1ec4a:	d0ee      	beq.n	1ec2a <vTaskSwitchContext+0x46>
   1ec4c:	687a      	ldr	r2, [r7, #4]
   1ec4e:	0013      	movs	r3, r2
   1ec50:	009b      	lsls	r3, r3, #2
   1ec52:	189b      	adds	r3, r3, r2
   1ec54:	009b      	lsls	r3, r3, #2
   1ec56:	4a24      	ldr	r2, [pc, #144]	; (1ece8 <vTaskSwitchContext+0x104>)
   1ec58:	189b      	adds	r3, r3, r2
   1ec5a:	603b      	str	r3, [r7, #0]
   1ec5c:	683b      	ldr	r3, [r7, #0]
   1ec5e:	685b      	ldr	r3, [r3, #4]
   1ec60:	685a      	ldr	r2, [r3, #4]
   1ec62:	683b      	ldr	r3, [r7, #0]
   1ec64:	605a      	str	r2, [r3, #4]
   1ec66:	683b      	ldr	r3, [r7, #0]
   1ec68:	685a      	ldr	r2, [r3, #4]
   1ec6a:	683b      	ldr	r3, [r7, #0]
   1ec6c:	3308      	adds	r3, #8
   1ec6e:	429a      	cmp	r2, r3
   1ec70:	d104      	bne.n	1ec7c <vTaskSwitchContext+0x98>
   1ec72:	683b      	ldr	r3, [r7, #0]
   1ec74:	685b      	ldr	r3, [r3, #4]
   1ec76:	685a      	ldr	r2, [r3, #4]
   1ec78:	683b      	ldr	r3, [r7, #0]
   1ec7a:	605a      	str	r2, [r3, #4]
   1ec7c:	683b      	ldr	r3, [r7, #0]
   1ec7e:	685b      	ldr	r3, [r3, #4]
   1ec80:	68da      	ldr	r2, [r3, #12]
   1ec82:	4b16      	ldr	r3, [pc, #88]	; (1ecdc <vTaskSwitchContext+0xf8>)
   1ec84:	601a      	str	r2, [r3, #0]
   1ec86:	4b17      	ldr	r3, [pc, #92]	; (1ece4 <vTaskSwitchContext+0x100>)
   1ec88:	687a      	ldr	r2, [r7, #4]
   1ec8a:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1ec8c:	4b17      	ldr	r3, [pc, #92]	; (1ecec <vTaskSwitchContext+0x108>)
   1ec8e:	2201      	movs	r2, #1
   1ec90:	601a      	str	r2, [r3, #0]
   1ec92:	4b17      	ldr	r3, [pc, #92]	; (1ecf0 <vTaskSwitchContext+0x10c>)
   1ec94:	4798      	blx	r3
   1ec96:	0003      	movs	r3, r0
   1ec98:	0018      	movs	r0, r3
   1ec9a:	4b16      	ldr	r3, [pc, #88]	; (1ecf4 <vTaskSwitchContext+0x110>)
   1ec9c:	4798      	blx	r3
   1ec9e:	0003      	movs	r3, r0
   1eca0:	001a      	movs	r2, r3
   1eca2:	4b15      	ldr	r3, [pc, #84]	; (1ecf8 <vTaskSwitchContext+0x114>)
   1eca4:	881b      	ldrh	r3, [r3, #0]
   1eca6:	4013      	ands	r3, r2
   1eca8:	b29b      	uxth	r3, r3
   1ecaa:	2b00      	cmp	r3, #0
   1ecac:	d00a      	beq.n	1ecc4 <vTaskSwitchContext+0xe0>
   1ecae:	4b10      	ldr	r3, [pc, #64]	; (1ecf0 <vTaskSwitchContext+0x10c>)
   1ecb0:	4798      	blx	r3
   1ecb2:	0003      	movs	r3, r0
   1ecb4:	0018      	movs	r0, r3
   1ecb6:	4b11      	ldr	r3, [pc, #68]	; (1ecfc <vTaskSwitchContext+0x118>)
   1ecb8:	4798      	blx	r3
   1ecba:	0003      	movs	r3, r0
   1ecbc:	b2db      	uxtb	r3, r3
   1ecbe:	0018      	movs	r0, r3
   1ecc0:	4b0f      	ldr	r3, [pc, #60]	; (1ed00 <vTaskSwitchContext+0x11c>)
   1ecc2:	4798      	blx	r3
   1ecc4:	4b09      	ldr	r3, [pc, #36]	; (1ecec <vTaskSwitchContext+0x108>)
   1ecc6:	2202      	movs	r2, #2
   1ecc8:	601a      	str	r2, [r3, #0]
}
   1ecca:	46c0      	nop			; (mov r8, r8)
   1eccc:	46bd      	mov	sp, r7
   1ecce:	b002      	add	sp, #8
   1ecd0:	bd80      	pop	{r7, pc}
   1ecd2:	46c0      	nop			; (mov r8, r8)
   1ecd4:	20004080 	.word	0x20004080
   1ecd8:	2000406c 	.word	0x2000406c
   1ecdc:	20003f80 	.word	0x20003f80
   1ece0:	00034dfd 	.word	0x00034dfd
   1ece4:	20004060 	.word	0x20004060
   1ece8:	20003f84 	.word	0x20003f84
   1ecec:	20000bec 	.word	0x20000bec
   1ecf0:	0001a829 	.word	0x0001a829
   1ecf4:	0001a58d 	.word	0x0001a58d
   1ecf8:	20000118 	.word	0x20000118
   1ecfc:	0001a56d 	.word	0x0001a56d
   1ed00:	0001b389 	.word	0x0001b389

0001ed04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1ed04:	b580      	push	{r7, lr}
   1ed06:	b082      	sub	sp, #8
   1ed08:	af00      	add	r7, sp, #0
   1ed0a:	6078      	str	r0, [r7, #4]
   1ed0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1ed0e:	687b      	ldr	r3, [r7, #4]
   1ed10:	2b00      	cmp	r3, #0
   1ed12:	d101      	bne.n	1ed18 <vTaskPlaceOnEventList+0x14>
   1ed14:	b672      	cpsid	i
   1ed16:	e7fe      	b.n	1ed16 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1ed18:	4b08      	ldr	r3, [pc, #32]	; (1ed3c <vTaskPlaceOnEventList+0x38>)
   1ed1a:	681b      	ldr	r3, [r3, #0]
   1ed1c:	3318      	adds	r3, #24
   1ed1e:	001a      	movs	r2, r3
   1ed20:	687b      	ldr	r3, [r7, #4]
   1ed22:	0011      	movs	r1, r2
   1ed24:	0018      	movs	r0, r3
   1ed26:	4b06      	ldr	r3, [pc, #24]	; (1ed40 <vTaskPlaceOnEventList+0x3c>)
   1ed28:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1ed2a:	683b      	ldr	r3, [r7, #0]
   1ed2c:	2101      	movs	r1, #1
   1ed2e:	0018      	movs	r0, r3
   1ed30:	4b04      	ldr	r3, [pc, #16]	; (1ed44 <vTaskPlaceOnEventList+0x40>)
   1ed32:	4798      	blx	r3
}
   1ed34:	46c0      	nop			; (mov r8, r8)
   1ed36:	46bd      	mov	sp, r7
   1ed38:	b002      	add	sp, #8
   1ed3a:	bd80      	pop	{r7, pc}
   1ed3c:	20003f80 	.word	0x20003f80
   1ed40:	0001c39b 	.word	0x0001c39b
   1ed44:	0001f7a9 	.word	0x0001f7a9

0001ed48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1ed48:	b580      	push	{r7, lr}
   1ed4a:	b084      	sub	sp, #16
   1ed4c:	af00      	add	r7, sp, #0
   1ed4e:	60f8      	str	r0, [r7, #12]
   1ed50:	60b9      	str	r1, [r7, #8]
   1ed52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1ed54:	68fb      	ldr	r3, [r7, #12]
   1ed56:	2b00      	cmp	r3, #0
   1ed58:	d101      	bne.n	1ed5e <vTaskPlaceOnEventListRestricted+0x16>
   1ed5a:	b672      	cpsid	i
   1ed5c:	e7fe      	b.n	1ed5c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1ed5e:	4b28      	ldr	r3, [pc, #160]	; (1ee00 <vTaskPlaceOnEventListRestricted+0xb8>)
   1ed60:	681b      	ldr	r3, [r3, #0]
   1ed62:	3318      	adds	r3, #24
   1ed64:	001a      	movs	r2, r3
   1ed66:	68fb      	ldr	r3, [r7, #12]
   1ed68:	0011      	movs	r1, r2
   1ed6a:	0018      	movs	r0, r3
   1ed6c:	4b25      	ldr	r3, [pc, #148]	; (1ee04 <vTaskPlaceOnEventListRestricted+0xbc>)
   1ed6e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1ed70:	687b      	ldr	r3, [r7, #4]
   1ed72:	2b00      	cmp	r3, #0
   1ed74:	d002      	beq.n	1ed7c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1ed76:	2301      	movs	r3, #1
   1ed78:	425b      	negs	r3, r3
   1ed7a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1ed7c:	4b20      	ldr	r3, [pc, #128]	; (1ee00 <vTaskPlaceOnEventListRestricted+0xb8>)
   1ed7e:	681b      	ldr	r3, [r3, #0]
   1ed80:	0018      	movs	r0, r3
   1ed82:	4b21      	ldr	r3, [pc, #132]	; (1ee08 <vTaskPlaceOnEventListRestricted+0xc0>)
   1ed84:	4798      	blx	r3
   1ed86:	0003      	movs	r3, r0
   1ed88:	001a      	movs	r2, r3
   1ed8a:	4b20      	ldr	r3, [pc, #128]	; (1ee0c <vTaskPlaceOnEventListRestricted+0xc4>)
   1ed8c:	881b      	ldrh	r3, [r3, #0]
   1ed8e:	4013      	ands	r3, r2
   1ed90:	b29b      	uxth	r3, r3
   1ed92:	2b00      	cmp	r3, #0
   1ed94:	d011      	beq.n	1edba <vTaskPlaceOnEventListRestricted+0x72>
   1ed96:	4b1e      	ldr	r3, [pc, #120]	; (1ee10 <vTaskPlaceOnEventListRestricted+0xc8>)
   1ed98:	681a      	ldr	r2, [r3, #0]
   1ed9a:	68bb      	ldr	r3, [r7, #8]
   1ed9c:	18d3      	adds	r3, r2, r3
   1ed9e:	0019      	movs	r1, r3
   1eda0:	2088      	movs	r0, #136	; 0x88
   1eda2:	4b1c      	ldr	r3, [pc, #112]	; (1ee14 <vTaskPlaceOnEventListRestricted+0xcc>)
   1eda4:	4798      	blx	r3
   1eda6:	4b16      	ldr	r3, [pc, #88]	; (1ee00 <vTaskPlaceOnEventListRestricted+0xb8>)
   1eda8:	681b      	ldr	r3, [r3, #0]
   1edaa:	0018      	movs	r0, r3
   1edac:	4b1a      	ldr	r3, [pc, #104]	; (1ee18 <vTaskPlaceOnEventListRestricted+0xd0>)
   1edae:	4798      	blx	r3
   1edb0:	0003      	movs	r3, r0
   1edb2:	b2db      	uxtb	r3, r3
   1edb4:	0018      	movs	r0, r3
   1edb6:	4b19      	ldr	r3, [pc, #100]	; (1ee1c <vTaskPlaceOnEventListRestricted+0xd4>)
   1edb8:	4798      	blx	r3
   1edba:	4b19      	ldr	r3, [pc, #100]	; (1ee20 <vTaskPlaceOnEventListRestricted+0xd8>)
   1edbc:	4798      	blx	r3
   1edbe:	0003      	movs	r3, r0
   1edc0:	0018      	movs	r0, r3
   1edc2:	4b11      	ldr	r3, [pc, #68]	; (1ee08 <vTaskPlaceOnEventListRestricted+0xc0>)
   1edc4:	4798      	blx	r3
   1edc6:	0003      	movs	r3, r0
   1edc8:	001a      	movs	r2, r3
   1edca:	4b10      	ldr	r3, [pc, #64]	; (1ee0c <vTaskPlaceOnEventListRestricted+0xc4>)
   1edcc:	881b      	ldrh	r3, [r3, #0]
   1edce:	4013      	ands	r3, r2
   1edd0:	b29b      	uxth	r3, r3
   1edd2:	2b00      	cmp	r3, #0
   1edd4:	d00a      	beq.n	1edec <vTaskPlaceOnEventListRestricted+0xa4>
   1edd6:	4b12      	ldr	r3, [pc, #72]	; (1ee20 <vTaskPlaceOnEventListRestricted+0xd8>)
   1edd8:	4798      	blx	r3
   1edda:	0003      	movs	r3, r0
   1eddc:	0018      	movs	r0, r3
   1edde:	4b0e      	ldr	r3, [pc, #56]	; (1ee18 <vTaskPlaceOnEventListRestricted+0xd0>)
   1ede0:	4798      	blx	r3
   1ede2:	0003      	movs	r3, r0
   1ede4:	b2db      	uxtb	r3, r3
   1ede6:	0018      	movs	r0, r3
   1ede8:	4b0c      	ldr	r3, [pc, #48]	; (1ee1c <vTaskPlaceOnEventListRestricted+0xd4>)
   1edea:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1edec:	687a      	ldr	r2, [r7, #4]
   1edee:	68bb      	ldr	r3, [r7, #8]
   1edf0:	0011      	movs	r1, r2
   1edf2:	0018      	movs	r0, r3
   1edf4:	4b0b      	ldr	r3, [pc, #44]	; (1ee24 <vTaskPlaceOnEventListRestricted+0xdc>)
   1edf6:	4798      	blx	r3
	}
   1edf8:	46c0      	nop			; (mov r8, r8)
   1edfa:	46bd      	mov	sp, r7
   1edfc:	b004      	add	sp, #16
   1edfe:	bd80      	pop	{r7, pc}
   1ee00:	20003f80 	.word	0x20003f80
   1ee04:	0001c357 	.word	0x0001c357
   1ee08:	0001a58d 	.word	0x0001a58d
   1ee0c:	20000118 	.word	0x20000118
   1ee10:	2000405c 	.word	0x2000405c
   1ee14:	0001b28d 	.word	0x0001b28d
   1ee18:	0001a56d 	.word	0x0001a56d
   1ee1c:	0001b71d 	.word	0x0001b71d
   1ee20:	0001a829 	.word	0x0001a829
   1ee24:	0001f7a9 	.word	0x0001f7a9

0001ee28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1ee28:	b580      	push	{r7, lr}
   1ee2a:	b084      	sub	sp, #16
   1ee2c:	af00      	add	r7, sp, #0
   1ee2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1ee30:	687b      	ldr	r3, [r7, #4]
   1ee32:	68db      	ldr	r3, [r3, #12]
   1ee34:	68db      	ldr	r3, [r3, #12]
   1ee36:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1ee38:	68bb      	ldr	r3, [r7, #8]
   1ee3a:	2b00      	cmp	r3, #0
   1ee3c:	d101      	bne.n	1ee42 <xTaskRemoveFromEventList+0x1a>
   1ee3e:	b672      	cpsid	i
   1ee40:	e7fe      	b.n	1ee40 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1ee42:	68bb      	ldr	r3, [r7, #8]
   1ee44:	3318      	adds	r3, #24
   1ee46:	0018      	movs	r0, r3
   1ee48:	4b2a      	ldr	r3, [pc, #168]	; (1eef4 <xTaskRemoveFromEventList+0xcc>)
   1ee4a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1ee4c:	4b2a      	ldr	r3, [pc, #168]	; (1eef8 <xTaskRemoveFromEventList+0xd0>)
   1ee4e:	681b      	ldr	r3, [r3, #0]
   1ee50:	2b00      	cmp	r3, #0
   1ee52:	d132      	bne.n	1eeba <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1ee54:	68bb      	ldr	r3, [r7, #8]
   1ee56:	3304      	adds	r3, #4
   1ee58:	0018      	movs	r0, r3
   1ee5a:	4b26      	ldr	r3, [pc, #152]	; (1eef4 <xTaskRemoveFromEventList+0xcc>)
   1ee5c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1ee5e:	68bb      	ldr	r3, [r7, #8]
   1ee60:	0018      	movs	r0, r3
   1ee62:	4b26      	ldr	r3, [pc, #152]	; (1eefc <xTaskRemoveFromEventList+0xd4>)
   1ee64:	4798      	blx	r3
   1ee66:	0003      	movs	r3, r0
   1ee68:	001a      	movs	r2, r3
   1ee6a:	4b25      	ldr	r3, [pc, #148]	; (1ef00 <xTaskRemoveFromEventList+0xd8>)
   1ee6c:	881b      	ldrh	r3, [r3, #0]
   1ee6e:	4013      	ands	r3, r2
   1ee70:	b29b      	uxth	r3, r3
   1ee72:	2b00      	cmp	r3, #0
   1ee74:	d008      	beq.n	1ee88 <xTaskRemoveFromEventList+0x60>
   1ee76:	68bb      	ldr	r3, [r7, #8]
   1ee78:	0018      	movs	r0, r3
   1ee7a:	4b22      	ldr	r3, [pc, #136]	; (1ef04 <xTaskRemoveFromEventList+0xdc>)
   1ee7c:	4798      	blx	r3
   1ee7e:	0003      	movs	r3, r0
   1ee80:	b2db      	uxtb	r3, r3
   1ee82:	0018      	movs	r0, r3
   1ee84:	4b20      	ldr	r3, [pc, #128]	; (1ef08 <xTaskRemoveFromEventList+0xe0>)
   1ee86:	4798      	blx	r3
   1ee88:	68bb      	ldr	r3, [r7, #8]
   1ee8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ee8c:	4b1f      	ldr	r3, [pc, #124]	; (1ef0c <xTaskRemoveFromEventList+0xe4>)
   1ee8e:	681b      	ldr	r3, [r3, #0]
   1ee90:	429a      	cmp	r2, r3
   1ee92:	d903      	bls.n	1ee9c <xTaskRemoveFromEventList+0x74>
   1ee94:	68bb      	ldr	r3, [r7, #8]
   1ee96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ee98:	4b1c      	ldr	r3, [pc, #112]	; (1ef0c <xTaskRemoveFromEventList+0xe4>)
   1ee9a:	601a      	str	r2, [r3, #0]
   1ee9c:	68bb      	ldr	r3, [r7, #8]
   1ee9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1eea0:	0013      	movs	r3, r2
   1eea2:	009b      	lsls	r3, r3, #2
   1eea4:	189b      	adds	r3, r3, r2
   1eea6:	009b      	lsls	r3, r3, #2
   1eea8:	4a19      	ldr	r2, [pc, #100]	; (1ef10 <xTaskRemoveFromEventList+0xe8>)
   1eeaa:	189a      	adds	r2, r3, r2
   1eeac:	68bb      	ldr	r3, [r7, #8]
   1eeae:	3304      	adds	r3, #4
   1eeb0:	0019      	movs	r1, r3
   1eeb2:	0010      	movs	r0, r2
   1eeb4:	4b17      	ldr	r3, [pc, #92]	; (1ef14 <xTaskRemoveFromEventList+0xec>)
   1eeb6:	4798      	blx	r3
   1eeb8:	e007      	b.n	1eeca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1eeba:	68bb      	ldr	r3, [r7, #8]
   1eebc:	3318      	adds	r3, #24
   1eebe:	001a      	movs	r2, r3
   1eec0:	4b15      	ldr	r3, [pc, #84]	; (1ef18 <xTaskRemoveFromEventList+0xf0>)
   1eec2:	0011      	movs	r1, r2
   1eec4:	0018      	movs	r0, r3
   1eec6:	4b13      	ldr	r3, [pc, #76]	; (1ef14 <xTaskRemoveFromEventList+0xec>)
   1eec8:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1eeca:	68bb      	ldr	r3, [r7, #8]
   1eecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1eece:	4b13      	ldr	r3, [pc, #76]	; (1ef1c <xTaskRemoveFromEventList+0xf4>)
   1eed0:	681b      	ldr	r3, [r3, #0]
   1eed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1eed4:	429a      	cmp	r2, r3
   1eed6:	d905      	bls.n	1eee4 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1eed8:	2301      	movs	r3, #1
   1eeda:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1eedc:	4b10      	ldr	r3, [pc, #64]	; (1ef20 <xTaskRemoveFromEventList+0xf8>)
   1eede:	2201      	movs	r2, #1
   1eee0:	601a      	str	r2, [r3, #0]
   1eee2:	e001      	b.n	1eee8 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1eee4:	2300      	movs	r3, #0
   1eee6:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1eee8:	68fb      	ldr	r3, [r7, #12]
}
   1eeea:	0018      	movs	r0, r3
   1eeec:	46bd      	mov	sp, r7
   1eeee:	b004      	add	sp, #16
   1eef0:	bd80      	pop	{r7, pc}
   1eef2:	46c0      	nop			; (mov r8, r8)
   1eef4:	0001c407 	.word	0x0001c407
   1eef8:	20004080 	.word	0x20004080
   1eefc:	0001a58d 	.word	0x0001a58d
   1ef00:	20000118 	.word	0x20000118
   1ef04:	0001a56d 	.word	0x0001a56d
   1ef08:	0001ad3d 	.word	0x0001ad3d
   1ef0c:	20004060 	.word	0x20004060
   1ef10:	20003f84 	.word	0x20003f84
   1ef14:	0001c357 	.word	0x0001c357
   1ef18:	20004018 	.word	0x20004018
   1ef1c:	20003f80 	.word	0x20003f80
   1ef20:	2000406c 	.word	0x2000406c

0001ef24 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1ef24:	b580      	push	{r7, lr}
   1ef26:	b082      	sub	sp, #8
   1ef28:	af00      	add	r7, sp, #0
   1ef2a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1ef2c:	687b      	ldr	r3, [r7, #4]
   1ef2e:	2b00      	cmp	r3, #0
   1ef30:	d101      	bne.n	1ef36 <vTaskSetTimeOutState+0x12>
   1ef32:	b672      	cpsid	i
   1ef34:	e7fe      	b.n	1ef34 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1ef36:	4b08      	ldr	r3, [pc, #32]	; (1ef58 <vTaskSetTimeOutState+0x34>)
   1ef38:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1ef3a:	4b08      	ldr	r3, [pc, #32]	; (1ef5c <vTaskSetTimeOutState+0x38>)
   1ef3c:	681a      	ldr	r2, [r3, #0]
   1ef3e:	687b      	ldr	r3, [r7, #4]
   1ef40:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1ef42:	4b07      	ldr	r3, [pc, #28]	; (1ef60 <vTaskSetTimeOutState+0x3c>)
   1ef44:	681a      	ldr	r2, [r3, #0]
   1ef46:	687b      	ldr	r3, [r7, #4]
   1ef48:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1ef4a:	4b06      	ldr	r3, [pc, #24]	; (1ef64 <vTaskSetTimeOutState+0x40>)
   1ef4c:	4798      	blx	r3
}
   1ef4e:	46c0      	nop			; (mov r8, r8)
   1ef50:	46bd      	mov	sp, r7
   1ef52:	b002      	add	sp, #8
   1ef54:	bd80      	pop	{r7, pc}
   1ef56:	46c0      	nop			; (mov r8, r8)
   1ef58:	0001c599 	.word	0x0001c599
   1ef5c:	20004070 	.word	0x20004070
   1ef60:	2000405c 	.word	0x2000405c
   1ef64:	0001c5bd 	.word	0x0001c5bd

0001ef68 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1ef68:	b580      	push	{r7, lr}
   1ef6a:	b082      	sub	sp, #8
   1ef6c:	af00      	add	r7, sp, #0
   1ef6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1ef70:	4b05      	ldr	r3, [pc, #20]	; (1ef88 <vTaskInternalSetTimeOutState+0x20>)
   1ef72:	681a      	ldr	r2, [r3, #0]
   1ef74:	687b      	ldr	r3, [r7, #4]
   1ef76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1ef78:	4b04      	ldr	r3, [pc, #16]	; (1ef8c <vTaskInternalSetTimeOutState+0x24>)
   1ef7a:	681a      	ldr	r2, [r3, #0]
   1ef7c:	687b      	ldr	r3, [r7, #4]
   1ef7e:	605a      	str	r2, [r3, #4]
}
   1ef80:	46c0      	nop			; (mov r8, r8)
   1ef82:	46bd      	mov	sp, r7
   1ef84:	b002      	add	sp, #8
   1ef86:	bd80      	pop	{r7, pc}
   1ef88:	20004070 	.word	0x20004070
   1ef8c:	2000405c 	.word	0x2000405c

0001ef90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1ef90:	b580      	push	{r7, lr}
   1ef92:	b086      	sub	sp, #24
   1ef94:	af00      	add	r7, sp, #0
   1ef96:	6078      	str	r0, [r7, #4]
   1ef98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1ef9a:	687b      	ldr	r3, [r7, #4]
   1ef9c:	2b00      	cmp	r3, #0
   1ef9e:	d101      	bne.n	1efa4 <xTaskCheckForTimeOut+0x14>
   1efa0:	b672      	cpsid	i
   1efa2:	e7fe      	b.n	1efa2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1efa4:	683b      	ldr	r3, [r7, #0]
   1efa6:	2b00      	cmp	r3, #0
   1efa8:	d101      	bne.n	1efae <xTaskCheckForTimeOut+0x1e>
   1efaa:	b672      	cpsid	i
   1efac:	e7fe      	b.n	1efac <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1efae:	4b1e      	ldr	r3, [pc, #120]	; (1f028 <xTaskCheckForTimeOut+0x98>)
   1efb0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1efb2:	4b1e      	ldr	r3, [pc, #120]	; (1f02c <xTaskCheckForTimeOut+0x9c>)
   1efb4:	681b      	ldr	r3, [r3, #0]
   1efb6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1efb8:	687b      	ldr	r3, [r7, #4]
   1efba:	685b      	ldr	r3, [r3, #4]
   1efbc:	693a      	ldr	r2, [r7, #16]
   1efbe:	1ad3      	subs	r3, r2, r3
   1efc0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1efc2:	683b      	ldr	r3, [r7, #0]
   1efc4:	681b      	ldr	r3, [r3, #0]
   1efc6:	3301      	adds	r3, #1
   1efc8:	d102      	bne.n	1efd0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1efca:	2300      	movs	r3, #0
   1efcc:	617b      	str	r3, [r7, #20]
   1efce:	e024      	b.n	1f01a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1efd0:	687b      	ldr	r3, [r7, #4]
   1efd2:	681a      	ldr	r2, [r3, #0]
   1efd4:	4b16      	ldr	r3, [pc, #88]	; (1f030 <xTaskCheckForTimeOut+0xa0>)
   1efd6:	681b      	ldr	r3, [r3, #0]
   1efd8:	429a      	cmp	r2, r3
   1efda:	d007      	beq.n	1efec <xTaskCheckForTimeOut+0x5c>
   1efdc:	687b      	ldr	r3, [r7, #4]
   1efde:	685a      	ldr	r2, [r3, #4]
   1efe0:	693b      	ldr	r3, [r7, #16]
   1efe2:	429a      	cmp	r2, r3
   1efe4:	d802      	bhi.n	1efec <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1efe6:	2301      	movs	r3, #1
   1efe8:	617b      	str	r3, [r7, #20]
   1efea:	e016      	b.n	1f01a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1efec:	683b      	ldr	r3, [r7, #0]
   1efee:	681a      	ldr	r2, [r3, #0]
   1eff0:	68fb      	ldr	r3, [r7, #12]
   1eff2:	429a      	cmp	r2, r3
   1eff4:	d90c      	bls.n	1f010 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1eff6:	683b      	ldr	r3, [r7, #0]
   1eff8:	681a      	ldr	r2, [r3, #0]
   1effa:	68fb      	ldr	r3, [r7, #12]
   1effc:	1ad2      	subs	r2, r2, r3
   1effe:	683b      	ldr	r3, [r7, #0]
   1f000:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1f002:	687b      	ldr	r3, [r7, #4]
   1f004:	0018      	movs	r0, r3
   1f006:	4b0b      	ldr	r3, [pc, #44]	; (1f034 <xTaskCheckForTimeOut+0xa4>)
   1f008:	4798      	blx	r3
			xReturn = pdFALSE;
   1f00a:	2300      	movs	r3, #0
   1f00c:	617b      	str	r3, [r7, #20]
   1f00e:	e004      	b.n	1f01a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1f010:	683b      	ldr	r3, [r7, #0]
   1f012:	2200      	movs	r2, #0
   1f014:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1f016:	2301      	movs	r3, #1
   1f018:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1f01a:	4b07      	ldr	r3, [pc, #28]	; (1f038 <xTaskCheckForTimeOut+0xa8>)
   1f01c:	4798      	blx	r3

	return xReturn;
   1f01e:	697b      	ldr	r3, [r7, #20]
}
   1f020:	0018      	movs	r0, r3
   1f022:	46bd      	mov	sp, r7
   1f024:	b006      	add	sp, #24
   1f026:	bd80      	pop	{r7, pc}
   1f028:	0001c599 	.word	0x0001c599
   1f02c:	2000405c 	.word	0x2000405c
   1f030:	20004070 	.word	0x20004070
   1f034:	0001ef69 	.word	0x0001ef69
   1f038:	0001c5bd 	.word	0x0001c5bd

0001f03c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1f03c:	b580      	push	{r7, lr}
   1f03e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1f040:	4b02      	ldr	r3, [pc, #8]	; (1f04c <vTaskMissedYield+0x10>)
   1f042:	2201      	movs	r2, #1
   1f044:	601a      	str	r2, [r3, #0]
}
   1f046:	46c0      	nop			; (mov r8, r8)
   1f048:	46bd      	mov	sp, r7
   1f04a:	bd80      	pop	{r7, pc}
   1f04c:	2000406c 	.word	0x2000406c

0001f050 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1f050:	b580      	push	{r7, lr}
   1f052:	b084      	sub	sp, #16
   1f054:	af00      	add	r7, sp, #0
   1f056:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1f058:	687b      	ldr	r3, [r7, #4]
   1f05a:	2b00      	cmp	r3, #0
   1f05c:	d005      	beq.n	1f06a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1f05e:	687b      	ldr	r3, [r7, #4]
   1f060:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1f062:	68bb      	ldr	r3, [r7, #8]
   1f064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f066:	60fb      	str	r3, [r7, #12]
   1f068:	e001      	b.n	1f06e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1f06a:	2300      	movs	r3, #0
   1f06c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1f06e:	68fb      	ldr	r3, [r7, #12]
	}
   1f070:	0018      	movs	r0, r3
   1f072:	46bd      	mov	sp, r7
   1f074:	b004      	add	sp, #16
   1f076:	bd80      	pop	{r7, pc}

0001f078 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1f078:	b580      	push	{r7, lr}
   1f07a:	b084      	sub	sp, #16
   1f07c:	af00      	add	r7, sp, #0
   1f07e:	6078      	str	r0, [r7, #4]
   1f080:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1f082:	687b      	ldr	r3, [r7, #4]
   1f084:	2b00      	cmp	r3, #0
   1f086:	d004      	beq.n	1f092 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1f088:	687b      	ldr	r3, [r7, #4]
   1f08a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1f08c:	68fb      	ldr	r3, [r7, #12]
   1f08e:	683a      	ldr	r2, [r7, #0]
   1f090:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1f092:	46c0      	nop			; (mov r8, r8)
   1f094:	46bd      	mov	sp, r7
   1f096:	b004      	add	sp, #16
   1f098:	bd80      	pop	{r7, pc}
	...

0001f09c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1f09c:	b580      	push	{r7, lr}
   1f09e:	b082      	sub	sp, #8
   1f0a0:	af00      	add	r7, sp, #0
   1f0a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1f0a4:	4b04      	ldr	r3, [pc, #16]	; (1f0b8 <prvIdleTask+0x1c>)
   1f0a6:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1f0a8:	4b04      	ldr	r3, [pc, #16]	; (1f0bc <prvIdleTask+0x20>)
   1f0aa:	681b      	ldr	r3, [r3, #0]
   1f0ac:	2b01      	cmp	r3, #1
   1f0ae:	d9f9      	bls.n	1f0a4 <prvIdleTask+0x8>
			{
				taskYIELD();
   1f0b0:	4b03      	ldr	r3, [pc, #12]	; (1f0c0 <prvIdleTask+0x24>)
   1f0b2:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1f0b4:	e7f6      	b.n	1f0a4 <prvIdleTask+0x8>
   1f0b6:	46c0      	nop			; (mov r8, r8)
   1f0b8:	0001f151 	.word	0x0001f151
   1f0bc:	20003f84 	.word	0x20003f84
   1f0c0:	0001c581 	.word	0x0001c581

0001f0c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1f0c4:	b580      	push	{r7, lr}
   1f0c6:	b082      	sub	sp, #8
   1f0c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1f0ca:	2300      	movs	r3, #0
   1f0cc:	607b      	str	r3, [r7, #4]
   1f0ce:	e00c      	b.n	1f0ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1f0d0:	687a      	ldr	r2, [r7, #4]
   1f0d2:	0013      	movs	r3, r2
   1f0d4:	009b      	lsls	r3, r3, #2
   1f0d6:	189b      	adds	r3, r3, r2
   1f0d8:	009b      	lsls	r3, r3, #2
   1f0da:	4a14      	ldr	r2, [pc, #80]	; (1f12c <prvInitialiseTaskLists+0x68>)
   1f0dc:	189b      	adds	r3, r3, r2
   1f0de:	0018      	movs	r0, r3
   1f0e0:	4b13      	ldr	r3, [pc, #76]	; (1f130 <prvInitialiseTaskLists+0x6c>)
   1f0e2:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1f0e4:	687b      	ldr	r3, [r7, #4]
   1f0e6:	3301      	adds	r3, #1
   1f0e8:	607b      	str	r3, [r7, #4]
   1f0ea:	687b      	ldr	r3, [r7, #4]
   1f0ec:	2b04      	cmp	r3, #4
   1f0ee:	d9ef      	bls.n	1f0d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1f0f0:	4b10      	ldr	r3, [pc, #64]	; (1f134 <prvInitialiseTaskLists+0x70>)
   1f0f2:	0018      	movs	r0, r3
   1f0f4:	4b0e      	ldr	r3, [pc, #56]	; (1f130 <prvInitialiseTaskLists+0x6c>)
   1f0f6:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1f0f8:	4b0f      	ldr	r3, [pc, #60]	; (1f138 <prvInitialiseTaskLists+0x74>)
   1f0fa:	0018      	movs	r0, r3
   1f0fc:	4b0c      	ldr	r3, [pc, #48]	; (1f130 <prvInitialiseTaskLists+0x6c>)
   1f0fe:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1f100:	4b0e      	ldr	r3, [pc, #56]	; (1f13c <prvInitialiseTaskLists+0x78>)
   1f102:	0018      	movs	r0, r3
   1f104:	4b0a      	ldr	r3, [pc, #40]	; (1f130 <prvInitialiseTaskLists+0x6c>)
   1f106:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1f108:	4b0d      	ldr	r3, [pc, #52]	; (1f140 <prvInitialiseTaskLists+0x7c>)
   1f10a:	0018      	movs	r0, r3
   1f10c:	4b08      	ldr	r3, [pc, #32]	; (1f130 <prvInitialiseTaskLists+0x6c>)
   1f10e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1f110:	4b0c      	ldr	r3, [pc, #48]	; (1f144 <prvInitialiseTaskLists+0x80>)
   1f112:	0018      	movs	r0, r3
   1f114:	4b06      	ldr	r3, [pc, #24]	; (1f130 <prvInitialiseTaskLists+0x6c>)
   1f116:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1f118:	4b0b      	ldr	r3, [pc, #44]	; (1f148 <prvInitialiseTaskLists+0x84>)
   1f11a:	4a06      	ldr	r2, [pc, #24]	; (1f134 <prvInitialiseTaskLists+0x70>)
   1f11c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1f11e:	4b0b      	ldr	r3, [pc, #44]	; (1f14c <prvInitialiseTaskLists+0x88>)
   1f120:	4a05      	ldr	r2, [pc, #20]	; (1f138 <prvInitialiseTaskLists+0x74>)
   1f122:	601a      	str	r2, [r3, #0]
}
   1f124:	46c0      	nop			; (mov r8, r8)
   1f126:	46bd      	mov	sp, r7
   1f128:	b002      	add	sp, #8
   1f12a:	bd80      	pop	{r7, pc}
   1f12c:	20003f84 	.word	0x20003f84
   1f130:	0001c305 	.word	0x0001c305
   1f134:	20003fe8 	.word	0x20003fe8
   1f138:	20003ffc 	.word	0x20003ffc
   1f13c:	20004018 	.word	0x20004018
   1f140:	2000402c 	.word	0x2000402c
   1f144:	20004044 	.word	0x20004044
   1f148:	20004010 	.word	0x20004010
   1f14c:	20004014 	.word	0x20004014

0001f150 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1f150:	b580      	push	{r7, lr}
   1f152:	b082      	sub	sp, #8
   1f154:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1f156:	e01a      	b.n	1f18e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1f158:	4b11      	ldr	r3, [pc, #68]	; (1f1a0 <prvCheckTasksWaitingTermination+0x50>)
   1f15a:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1f15c:	4b11      	ldr	r3, [pc, #68]	; (1f1a4 <prvCheckTasksWaitingTermination+0x54>)
   1f15e:	68db      	ldr	r3, [r3, #12]
   1f160:	68db      	ldr	r3, [r3, #12]
   1f162:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1f164:	687b      	ldr	r3, [r7, #4]
   1f166:	3304      	adds	r3, #4
   1f168:	0018      	movs	r0, r3
   1f16a:	4b0f      	ldr	r3, [pc, #60]	; (1f1a8 <prvCheckTasksWaitingTermination+0x58>)
   1f16c:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1f16e:	4b0f      	ldr	r3, [pc, #60]	; (1f1ac <prvCheckTasksWaitingTermination+0x5c>)
   1f170:	681b      	ldr	r3, [r3, #0]
   1f172:	1e5a      	subs	r2, r3, #1
   1f174:	4b0d      	ldr	r3, [pc, #52]	; (1f1ac <prvCheckTasksWaitingTermination+0x5c>)
   1f176:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1f178:	4b0d      	ldr	r3, [pc, #52]	; (1f1b0 <prvCheckTasksWaitingTermination+0x60>)
   1f17a:	681b      	ldr	r3, [r3, #0]
   1f17c:	1e5a      	subs	r2, r3, #1
   1f17e:	4b0c      	ldr	r3, [pc, #48]	; (1f1b0 <prvCheckTasksWaitingTermination+0x60>)
   1f180:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1f182:	4b0c      	ldr	r3, [pc, #48]	; (1f1b4 <prvCheckTasksWaitingTermination+0x64>)
   1f184:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1f186:	687b      	ldr	r3, [r7, #4]
   1f188:	0018      	movs	r0, r3
   1f18a:	4b0b      	ldr	r3, [pc, #44]	; (1f1b8 <prvCheckTasksWaitingTermination+0x68>)
   1f18c:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1f18e:	4b08      	ldr	r3, [pc, #32]	; (1f1b0 <prvCheckTasksWaitingTermination+0x60>)
   1f190:	681b      	ldr	r3, [r3, #0]
   1f192:	2b00      	cmp	r3, #0
   1f194:	d1e0      	bne.n	1f158 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1f196:	46c0      	nop			; (mov r8, r8)
   1f198:	46bd      	mov	sp, r7
   1f19a:	b002      	add	sp, #8
   1f19c:	bd80      	pop	{r7, pc}
   1f19e:	46c0      	nop			; (mov r8, r8)
   1f1a0:	0001c599 	.word	0x0001c599
   1f1a4:	2000402c 	.word	0x2000402c
   1f1a8:	0001c407 	.word	0x0001c407
   1f1ac:	20004058 	.word	0x20004058
   1f1b0:	20004040 	.word	0x20004040
   1f1b4:	0001c5bd 	.word	0x0001c5bd
   1f1b8:	0001f22d 	.word	0x0001f22d

0001f1bc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1f1bc:	b580      	push	{r7, lr}
   1f1be:	b084      	sub	sp, #16
   1f1c0:	af00      	add	r7, sp, #0
   1f1c2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1f1c4:	2300      	movs	r3, #0
   1f1c6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1f1c8:	e005      	b.n	1f1d6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1f1ca:	687b      	ldr	r3, [r7, #4]
   1f1cc:	3301      	adds	r3, #1
   1f1ce:	607b      	str	r3, [r7, #4]
			ulCount++;
   1f1d0:	68fb      	ldr	r3, [r7, #12]
   1f1d2:	3301      	adds	r3, #1
   1f1d4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1f1d6:	687b      	ldr	r3, [r7, #4]
   1f1d8:	781b      	ldrb	r3, [r3, #0]
   1f1da:	2ba5      	cmp	r3, #165	; 0xa5
   1f1dc:	d0f5      	beq.n	1f1ca <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1f1de:	68fb      	ldr	r3, [r7, #12]
   1f1e0:	089b      	lsrs	r3, r3, #2
   1f1e2:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1f1e4:	68fb      	ldr	r3, [r7, #12]
   1f1e6:	b29b      	uxth	r3, r3
	}
   1f1e8:	0018      	movs	r0, r3
   1f1ea:	46bd      	mov	sp, r7
   1f1ec:	b004      	add	sp, #16
   1f1ee:	bd80      	pop	{r7, pc}

0001f1f0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1f1f0:	b580      	push	{r7, lr}
   1f1f2:	b086      	sub	sp, #24
   1f1f4:	af00      	add	r7, sp, #0
   1f1f6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1f1f8:	687b      	ldr	r3, [r7, #4]
   1f1fa:	2b00      	cmp	r3, #0
   1f1fc:	d102      	bne.n	1f204 <uxTaskGetStackHighWaterMark+0x14>
   1f1fe:	4b09      	ldr	r3, [pc, #36]	; (1f224 <uxTaskGetStackHighWaterMark+0x34>)
   1f200:	681b      	ldr	r3, [r3, #0]
   1f202:	e000      	b.n	1f206 <uxTaskGetStackHighWaterMark+0x16>
   1f204:	687b      	ldr	r3, [r7, #4]
   1f206:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1f208:	697b      	ldr	r3, [r7, #20]
   1f20a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1f20c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1f20e:	693b      	ldr	r3, [r7, #16]
   1f210:	0018      	movs	r0, r3
   1f212:	4b05      	ldr	r3, [pc, #20]	; (1f228 <uxTaskGetStackHighWaterMark+0x38>)
   1f214:	4798      	blx	r3
   1f216:	0003      	movs	r3, r0
   1f218:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1f21a:	68fb      	ldr	r3, [r7, #12]
	}
   1f21c:	0018      	movs	r0, r3
   1f21e:	46bd      	mov	sp, r7
   1f220:	b006      	add	sp, #24
   1f222:	bd80      	pop	{r7, pc}
   1f224:	20003f80 	.word	0x20003f80
   1f228:	0001f1bd 	.word	0x0001f1bd

0001f22c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1f22c:	b580      	push	{r7, lr}
   1f22e:	b082      	sub	sp, #8
   1f230:	af00      	add	r7, sp, #0
   1f232:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1f234:	687b      	ldr	r3, [r7, #4]
   1f236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1f238:	0018      	movs	r0, r3
   1f23a:	4b05      	ldr	r3, [pc, #20]	; (1f250 <prvDeleteTCB+0x24>)
   1f23c:	4798      	blx	r3
			vPortFree( pxTCB );
   1f23e:	687b      	ldr	r3, [r7, #4]
   1f240:	0018      	movs	r0, r3
   1f242:	4b03      	ldr	r3, [pc, #12]	; (1f250 <prvDeleteTCB+0x24>)
   1f244:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1f246:	46c0      	nop			; (mov r8, r8)
   1f248:	46bd      	mov	sp, r7
   1f24a:	b002      	add	sp, #8
   1f24c:	bd80      	pop	{r7, pc}
   1f24e:	46c0      	nop			; (mov r8, r8)
   1f250:	0001c795 	.word	0x0001c795

0001f254 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1f254:	b580      	push	{r7, lr}
   1f256:	b082      	sub	sp, #8
   1f258:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1f25a:	4b0e      	ldr	r3, [pc, #56]	; (1f294 <prvResetNextTaskUnblockTime+0x40>)
   1f25c:	681b      	ldr	r3, [r3, #0]
   1f25e:	681b      	ldr	r3, [r3, #0]
   1f260:	2b00      	cmp	r3, #0
   1f262:	d101      	bne.n	1f268 <prvResetNextTaskUnblockTime+0x14>
   1f264:	2301      	movs	r3, #1
   1f266:	e000      	b.n	1f26a <prvResetNextTaskUnblockTime+0x16>
   1f268:	2300      	movs	r3, #0
   1f26a:	2b00      	cmp	r3, #0
   1f26c:	d004      	beq.n	1f278 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1f26e:	4b0a      	ldr	r3, [pc, #40]	; (1f298 <prvResetNextTaskUnblockTime+0x44>)
   1f270:	2201      	movs	r2, #1
   1f272:	4252      	negs	r2, r2
   1f274:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1f276:	e008      	b.n	1f28a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1f278:	4b06      	ldr	r3, [pc, #24]	; (1f294 <prvResetNextTaskUnblockTime+0x40>)
   1f27a:	681b      	ldr	r3, [r3, #0]
   1f27c:	68db      	ldr	r3, [r3, #12]
   1f27e:	68db      	ldr	r3, [r3, #12]
   1f280:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1f282:	687b      	ldr	r3, [r7, #4]
   1f284:	685a      	ldr	r2, [r3, #4]
   1f286:	4b04      	ldr	r3, [pc, #16]	; (1f298 <prvResetNextTaskUnblockTime+0x44>)
   1f288:	601a      	str	r2, [r3, #0]
}
   1f28a:	46c0      	nop			; (mov r8, r8)
   1f28c:	46bd      	mov	sp, r7
   1f28e:	b002      	add	sp, #8
   1f290:	bd80      	pop	{r7, pc}
   1f292:	46c0      	nop			; (mov r8, r8)
   1f294:	20004010 	.word	0x20004010
   1f298:	20004078 	.word	0x20004078

0001f29c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1f29c:	b580      	push	{r7, lr}
   1f29e:	b082      	sub	sp, #8
   1f2a0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1f2a2:	4b04      	ldr	r3, [pc, #16]	; (1f2b4 <xTaskGetCurrentTaskHandle+0x18>)
   1f2a4:	681b      	ldr	r3, [r3, #0]
   1f2a6:	607b      	str	r3, [r7, #4]

		return xReturn;
   1f2a8:	687b      	ldr	r3, [r7, #4]
	}
   1f2aa:	0018      	movs	r0, r3
   1f2ac:	46bd      	mov	sp, r7
   1f2ae:	b002      	add	sp, #8
   1f2b0:	bd80      	pop	{r7, pc}
   1f2b2:	46c0      	nop			; (mov r8, r8)
   1f2b4:	20003f80 	.word	0x20003f80

0001f2b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1f2b8:	b580      	push	{r7, lr}
   1f2ba:	b082      	sub	sp, #8
   1f2bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1f2be:	4b0a      	ldr	r3, [pc, #40]	; (1f2e8 <xTaskGetSchedulerState+0x30>)
   1f2c0:	681b      	ldr	r3, [r3, #0]
   1f2c2:	2b00      	cmp	r3, #0
   1f2c4:	d102      	bne.n	1f2cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1f2c6:	2301      	movs	r3, #1
   1f2c8:	607b      	str	r3, [r7, #4]
   1f2ca:	e008      	b.n	1f2de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1f2cc:	4b07      	ldr	r3, [pc, #28]	; (1f2ec <xTaskGetSchedulerState+0x34>)
   1f2ce:	681b      	ldr	r3, [r3, #0]
   1f2d0:	2b00      	cmp	r3, #0
   1f2d2:	d102      	bne.n	1f2da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1f2d4:	2302      	movs	r3, #2
   1f2d6:	607b      	str	r3, [r7, #4]
   1f2d8:	e001      	b.n	1f2de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1f2da:	2300      	movs	r3, #0
   1f2dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1f2de:	687b      	ldr	r3, [r7, #4]
	}
   1f2e0:	0018      	movs	r0, r3
   1f2e2:	46bd      	mov	sp, r7
   1f2e4:	b002      	add	sp, #8
   1f2e6:	bd80      	pop	{r7, pc}
   1f2e8:	20004064 	.word	0x20004064
   1f2ec:	20004080 	.word	0x20004080

0001f2f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1f2f0:	b590      	push	{r4, r7, lr}
   1f2f2:	b085      	sub	sp, #20
   1f2f4:	af00      	add	r7, sp, #0
   1f2f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1f2f8:	687b      	ldr	r3, [r7, #4]
   1f2fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1f2fc:	2300      	movs	r3, #0
   1f2fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1f300:	687b      	ldr	r3, [r7, #4]
   1f302:	2b00      	cmp	r3, #0
   1f304:	d100      	bne.n	1f308 <xTaskPriorityInherit+0x18>
   1f306:	e09d      	b.n	1f444 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1f308:	68bb      	ldr	r3, [r7, #8]
   1f30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f30c:	4b50      	ldr	r3, [pc, #320]	; (1f450 <xTaskPriorityInherit+0x160>)
   1f30e:	681b      	ldr	r3, [r3, #0]
   1f310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f312:	429a      	cmp	r2, r3
   1f314:	d300      	bcc.n	1f318 <xTaskPriorityInherit+0x28>
   1f316:	e08c      	b.n	1f432 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1f318:	68bb      	ldr	r3, [r7, #8]
   1f31a:	699b      	ldr	r3, [r3, #24]
   1f31c:	2b00      	cmp	r3, #0
   1f31e:	db06      	blt.n	1f32e <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f320:	4b4b      	ldr	r3, [pc, #300]	; (1f450 <xTaskPriorityInherit+0x160>)
   1f322:	681b      	ldr	r3, [r3, #0]
   1f324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f326:	2205      	movs	r2, #5
   1f328:	1ad2      	subs	r2, r2, r3
   1f32a:	68bb      	ldr	r3, [r7, #8]
   1f32c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1f32e:	68bb      	ldr	r3, [r7, #8]
   1f330:	6959      	ldr	r1, [r3, #20]
   1f332:	68bb      	ldr	r3, [r7, #8]
   1f334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f336:	0013      	movs	r3, r2
   1f338:	009b      	lsls	r3, r3, #2
   1f33a:	189b      	adds	r3, r3, r2
   1f33c:	009b      	lsls	r3, r3, #2
   1f33e:	4a45      	ldr	r2, [pc, #276]	; (1f454 <xTaskPriorityInherit+0x164>)
   1f340:	189b      	adds	r3, r3, r2
   1f342:	4299      	cmp	r1, r3
   1f344:	d101      	bne.n	1f34a <xTaskPriorityInherit+0x5a>
   1f346:	2301      	movs	r3, #1
   1f348:	e000      	b.n	1f34c <xTaskPriorityInherit+0x5c>
   1f34a:	2300      	movs	r3, #0
   1f34c:	2b00      	cmp	r3, #0
   1f34e:	d037      	beq.n	1f3c0 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1f350:	68bb      	ldr	r3, [r7, #8]
   1f352:	3304      	adds	r3, #4
   1f354:	0018      	movs	r0, r3
   1f356:	4b40      	ldr	r3, [pc, #256]	; (1f458 <xTaskPriorityInherit+0x168>)
   1f358:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1f35a:	4b3d      	ldr	r3, [pc, #244]	; (1f450 <xTaskPriorityInherit+0x160>)
   1f35c:	681b      	ldr	r3, [r3, #0]
   1f35e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f360:	68bb      	ldr	r3, [r7, #8]
   1f362:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1f364:	68bb      	ldr	r3, [r7, #8]
   1f366:	0018      	movs	r0, r3
   1f368:	4b3c      	ldr	r3, [pc, #240]	; (1f45c <xTaskPriorityInherit+0x16c>)
   1f36a:	4798      	blx	r3
   1f36c:	0003      	movs	r3, r0
   1f36e:	001a      	movs	r2, r3
   1f370:	4b3b      	ldr	r3, [pc, #236]	; (1f460 <xTaskPriorityInherit+0x170>)
   1f372:	881b      	ldrh	r3, [r3, #0]
   1f374:	4013      	ands	r3, r2
   1f376:	b29b      	uxth	r3, r3
   1f378:	2b00      	cmp	r3, #0
   1f37a:	d008      	beq.n	1f38e <xTaskPriorityInherit+0x9e>
   1f37c:	68bb      	ldr	r3, [r7, #8]
   1f37e:	0018      	movs	r0, r3
   1f380:	4b38      	ldr	r3, [pc, #224]	; (1f464 <xTaskPriorityInherit+0x174>)
   1f382:	4798      	blx	r3
   1f384:	0003      	movs	r3, r0
   1f386:	b2db      	uxtb	r3, r3
   1f388:	0018      	movs	r0, r3
   1f38a:	4b37      	ldr	r3, [pc, #220]	; (1f468 <xTaskPriorityInherit+0x178>)
   1f38c:	4798      	blx	r3
   1f38e:	68bb      	ldr	r3, [r7, #8]
   1f390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f392:	4b36      	ldr	r3, [pc, #216]	; (1f46c <xTaskPriorityInherit+0x17c>)
   1f394:	681b      	ldr	r3, [r3, #0]
   1f396:	429a      	cmp	r2, r3
   1f398:	d903      	bls.n	1f3a2 <xTaskPriorityInherit+0xb2>
   1f39a:	68bb      	ldr	r3, [r7, #8]
   1f39c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f39e:	4b33      	ldr	r3, [pc, #204]	; (1f46c <xTaskPriorityInherit+0x17c>)
   1f3a0:	601a      	str	r2, [r3, #0]
   1f3a2:	68bb      	ldr	r3, [r7, #8]
   1f3a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f3a6:	0013      	movs	r3, r2
   1f3a8:	009b      	lsls	r3, r3, #2
   1f3aa:	189b      	adds	r3, r3, r2
   1f3ac:	009b      	lsls	r3, r3, #2
   1f3ae:	4a29      	ldr	r2, [pc, #164]	; (1f454 <xTaskPriorityInherit+0x164>)
   1f3b0:	189a      	adds	r2, r3, r2
   1f3b2:	68bb      	ldr	r3, [r7, #8]
   1f3b4:	3304      	adds	r3, #4
   1f3b6:	0019      	movs	r1, r3
   1f3b8:	0010      	movs	r0, r2
   1f3ba:	4b2d      	ldr	r3, [pc, #180]	; (1f470 <xTaskPriorityInherit+0x180>)
   1f3bc:	4798      	blx	r3
   1f3be:	e004      	b.n	1f3ca <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1f3c0:	4b23      	ldr	r3, [pc, #140]	; (1f450 <xTaskPriorityInherit+0x160>)
   1f3c2:	681b      	ldr	r3, [r3, #0]
   1f3c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f3c6:	68bb      	ldr	r3, [r7, #8]
   1f3c8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1f3ca:	68bb      	ldr	r3, [r7, #8]
   1f3cc:	0018      	movs	r0, r3
   1f3ce:	4b23      	ldr	r3, [pc, #140]	; (1f45c <xTaskPriorityInherit+0x16c>)
   1f3d0:	4798      	blx	r3
   1f3d2:	0003      	movs	r3, r0
   1f3d4:	001a      	movs	r2, r3
   1f3d6:	4b22      	ldr	r3, [pc, #136]	; (1f460 <xTaskPriorityInherit+0x170>)
   1f3d8:	881b      	ldrh	r3, [r3, #0]
   1f3da:	4013      	ands	r3, r2
   1f3dc:	b29b      	uxth	r3, r3
   1f3de:	2b00      	cmp	r3, #0
   1f3e0:	d024      	beq.n	1f42c <xTaskPriorityInherit+0x13c>
   1f3e2:	68bb      	ldr	r3, [r7, #8]
   1f3e4:	0018      	movs	r0, r3
   1f3e6:	4b1f      	ldr	r3, [pc, #124]	; (1f464 <xTaskPriorityInherit+0x174>)
   1f3e8:	4798      	blx	r3
   1f3ea:	0003      	movs	r3, r0
   1f3ec:	b2db      	uxtb	r3, r3
   1f3ee:	001c      	movs	r4, r3
   1f3f0:	68bb      	ldr	r3, [r7, #8]
   1f3f2:	0018      	movs	r0, r3
   1f3f4:	4b1b      	ldr	r3, [pc, #108]	; (1f464 <xTaskPriorityInherit+0x174>)
   1f3f6:	4798      	blx	r3
   1f3f8:	0003      	movs	r3, r0
   1f3fa:	b2db      	uxtb	r3, r3
   1f3fc:	0019      	movs	r1, r3
   1f3fe:	2003      	movs	r0, #3
   1f400:	4b1c      	ldr	r3, [pc, #112]	; (1f474 <xTaskPriorityInherit+0x184>)
   1f402:	4798      	blx	r3
   1f404:	0003      	movs	r3, r0
   1f406:	0022      	movs	r2, r4
   1f408:	2103      	movs	r1, #3
   1f40a:	208e      	movs	r0, #142	; 0x8e
   1f40c:	4c1a      	ldr	r4, [pc, #104]	; (1f478 <xTaskPriorityInherit+0x188>)
   1f40e:	47a0      	blx	r4
   1f410:	68bb      	ldr	r3, [r7, #8]
   1f412:	0018      	movs	r0, r3
   1f414:	4b13      	ldr	r3, [pc, #76]	; (1f464 <xTaskPriorityInherit+0x174>)
   1f416:	4798      	blx	r3
   1f418:	0003      	movs	r3, r0
   1f41a:	b2d9      	uxtb	r1, r3
   1f41c:	4b0c      	ldr	r3, [pc, #48]	; (1f450 <xTaskPriorityInherit+0x160>)
   1f41e:	681b      	ldr	r3, [r3, #0]
   1f420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f422:	b2db      	uxtb	r3, r3
   1f424:	001a      	movs	r2, r3
   1f426:	2003      	movs	r0, #3
   1f428:	4b14      	ldr	r3, [pc, #80]	; (1f47c <xTaskPriorityInherit+0x18c>)
   1f42a:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1f42c:	2301      	movs	r3, #1
   1f42e:	60fb      	str	r3, [r7, #12]
   1f430:	e008      	b.n	1f444 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1f432:	68bb      	ldr	r3, [r7, #8]
   1f434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1f436:	4b06      	ldr	r3, [pc, #24]	; (1f450 <xTaskPriorityInherit+0x160>)
   1f438:	681b      	ldr	r3, [r3, #0]
   1f43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f43c:	429a      	cmp	r2, r3
   1f43e:	d201      	bcs.n	1f444 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1f440:	2301      	movs	r3, #1
   1f442:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1f444:	68fb      	ldr	r3, [r7, #12]
	}
   1f446:	0018      	movs	r0, r3
   1f448:	46bd      	mov	sp, r7
   1f44a:	b005      	add	sp, #20
   1f44c:	bd90      	pop	{r4, r7, pc}
   1f44e:	46c0      	nop			; (mov r8, r8)
   1f450:	20003f80 	.word	0x20003f80
   1f454:	20003f84 	.word	0x20003f84
   1f458:	0001c407 	.word	0x0001c407
   1f45c:	0001a58d 	.word	0x0001a58d
   1f460:	20000118 	.word	0x20000118
   1f464:	0001a56d 	.word	0x0001a56d
   1f468:	0001ad3d 	.word	0x0001ad3d
   1f46c:	20004060 	.word	0x20004060
   1f470:	0001c357 	.word	0x0001c357
   1f474:	0001b545 	.word	0x0001b545
   1f478:	0001b0b5 	.word	0x0001b0b5
   1f47c:	0001b4a1 	.word	0x0001b4a1

0001f480 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1f480:	b590      	push	{r4, r7, lr}
   1f482:	b085      	sub	sp, #20
   1f484:	af00      	add	r7, sp, #0
   1f486:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1f488:	687b      	ldr	r3, [r7, #4]
   1f48a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1f48c:	2300      	movs	r3, #0
   1f48e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1f490:	687b      	ldr	r3, [r7, #4]
   1f492:	2b00      	cmp	r3, #0
   1f494:	d100      	bne.n	1f498 <xTaskPriorityDisinherit+0x18>
   1f496:	e089      	b.n	1f5ac <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1f498:	4b47      	ldr	r3, [pc, #284]	; (1f5b8 <xTaskPriorityDisinherit+0x138>)
   1f49a:	681b      	ldr	r3, [r3, #0]
   1f49c:	68ba      	ldr	r2, [r7, #8]
   1f49e:	429a      	cmp	r2, r3
   1f4a0:	d001      	beq.n	1f4a6 <xTaskPriorityDisinherit+0x26>
   1f4a2:	b672      	cpsid	i
   1f4a4:	e7fe      	b.n	1f4a4 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1f4a6:	68bb      	ldr	r3, [r7, #8]
   1f4a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f4aa:	2b00      	cmp	r3, #0
   1f4ac:	d101      	bne.n	1f4b2 <xTaskPriorityDisinherit+0x32>
   1f4ae:	b672      	cpsid	i
   1f4b0:	e7fe      	b.n	1f4b0 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1f4b2:	68bb      	ldr	r3, [r7, #8]
   1f4b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f4b6:	1e5a      	subs	r2, r3, #1
   1f4b8:	68bb      	ldr	r3, [r7, #8]
   1f4ba:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1f4bc:	68bb      	ldr	r3, [r7, #8]
   1f4be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f4c0:	68bb      	ldr	r3, [r7, #8]
   1f4c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f4c4:	429a      	cmp	r2, r3
   1f4c6:	d071      	beq.n	1f5ac <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1f4c8:	68bb      	ldr	r3, [r7, #8]
   1f4ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f4cc:	2b00      	cmp	r3, #0
   1f4ce:	d16d      	bne.n	1f5ac <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1f4d0:	68bb      	ldr	r3, [r7, #8]
   1f4d2:	3304      	adds	r3, #4
   1f4d4:	0018      	movs	r0, r3
   1f4d6:	4b39      	ldr	r3, [pc, #228]	; (1f5bc <xTaskPriorityDisinherit+0x13c>)
   1f4d8:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1f4da:	68bb      	ldr	r3, [r7, #8]
   1f4dc:	0018      	movs	r0, r3
   1f4de:	4b38      	ldr	r3, [pc, #224]	; (1f5c0 <xTaskPriorityDisinherit+0x140>)
   1f4e0:	4798      	blx	r3
   1f4e2:	0003      	movs	r3, r0
   1f4e4:	001a      	movs	r2, r3
   1f4e6:	4b37      	ldr	r3, [pc, #220]	; (1f5c4 <xTaskPriorityDisinherit+0x144>)
   1f4e8:	881b      	ldrh	r3, [r3, #0]
   1f4ea:	4013      	ands	r3, r2
   1f4ec:	b29b      	uxth	r3, r3
   1f4ee:	2b00      	cmp	r3, #0
   1f4f0:	d023      	beq.n	1f53a <xTaskPriorityDisinherit+0xba>
   1f4f2:	68bb      	ldr	r3, [r7, #8]
   1f4f4:	0018      	movs	r0, r3
   1f4f6:	4b34      	ldr	r3, [pc, #208]	; (1f5c8 <xTaskPriorityDisinherit+0x148>)
   1f4f8:	4798      	blx	r3
   1f4fa:	0003      	movs	r3, r0
   1f4fc:	b2db      	uxtb	r3, r3
   1f4fe:	001c      	movs	r4, r3
   1f500:	68bb      	ldr	r3, [r7, #8]
   1f502:	0018      	movs	r0, r3
   1f504:	4b30      	ldr	r3, [pc, #192]	; (1f5c8 <xTaskPriorityDisinherit+0x148>)
   1f506:	4798      	blx	r3
   1f508:	0003      	movs	r3, r0
   1f50a:	b2db      	uxtb	r3, r3
   1f50c:	0019      	movs	r1, r3
   1f50e:	2003      	movs	r0, #3
   1f510:	4b2e      	ldr	r3, [pc, #184]	; (1f5cc <xTaskPriorityDisinherit+0x14c>)
   1f512:	4798      	blx	r3
   1f514:	0003      	movs	r3, r0
   1f516:	0022      	movs	r2, r4
   1f518:	2103      	movs	r1, #3
   1f51a:	208f      	movs	r0, #143	; 0x8f
   1f51c:	4c2c      	ldr	r4, [pc, #176]	; (1f5d0 <xTaskPriorityDisinherit+0x150>)
   1f51e:	47a0      	blx	r4
   1f520:	68bb      	ldr	r3, [r7, #8]
   1f522:	0018      	movs	r0, r3
   1f524:	4b28      	ldr	r3, [pc, #160]	; (1f5c8 <xTaskPriorityDisinherit+0x148>)
   1f526:	4798      	blx	r3
   1f528:	0003      	movs	r3, r0
   1f52a:	b2d9      	uxtb	r1, r3
   1f52c:	68bb      	ldr	r3, [r7, #8]
   1f52e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f530:	b2db      	uxtb	r3, r3
   1f532:	001a      	movs	r2, r3
   1f534:	2003      	movs	r0, #3
   1f536:	4b27      	ldr	r3, [pc, #156]	; (1f5d4 <xTaskPriorityDisinherit+0x154>)
   1f538:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1f53a:	68bb      	ldr	r3, [r7, #8]
   1f53c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1f53e:	68bb      	ldr	r3, [r7, #8]
   1f540:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f542:	68bb      	ldr	r3, [r7, #8]
   1f544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f546:	2205      	movs	r2, #5
   1f548:	1ad2      	subs	r2, r2, r3
   1f54a:	68bb      	ldr	r3, [r7, #8]
   1f54c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1f54e:	68bb      	ldr	r3, [r7, #8]
   1f550:	0018      	movs	r0, r3
   1f552:	4b1b      	ldr	r3, [pc, #108]	; (1f5c0 <xTaskPriorityDisinherit+0x140>)
   1f554:	4798      	blx	r3
   1f556:	0003      	movs	r3, r0
   1f558:	001a      	movs	r2, r3
   1f55a:	4b1a      	ldr	r3, [pc, #104]	; (1f5c4 <xTaskPriorityDisinherit+0x144>)
   1f55c:	881b      	ldrh	r3, [r3, #0]
   1f55e:	4013      	ands	r3, r2
   1f560:	b29b      	uxth	r3, r3
   1f562:	2b00      	cmp	r3, #0
   1f564:	d008      	beq.n	1f578 <xTaskPriorityDisinherit+0xf8>
   1f566:	68bb      	ldr	r3, [r7, #8]
   1f568:	0018      	movs	r0, r3
   1f56a:	4b17      	ldr	r3, [pc, #92]	; (1f5c8 <xTaskPriorityDisinherit+0x148>)
   1f56c:	4798      	blx	r3
   1f56e:	0003      	movs	r3, r0
   1f570:	b2db      	uxtb	r3, r3
   1f572:	0018      	movs	r0, r3
   1f574:	4b18      	ldr	r3, [pc, #96]	; (1f5d8 <xTaskPriorityDisinherit+0x158>)
   1f576:	4798      	blx	r3
   1f578:	68bb      	ldr	r3, [r7, #8]
   1f57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f57c:	4b17      	ldr	r3, [pc, #92]	; (1f5dc <xTaskPriorityDisinherit+0x15c>)
   1f57e:	681b      	ldr	r3, [r3, #0]
   1f580:	429a      	cmp	r2, r3
   1f582:	d903      	bls.n	1f58c <xTaskPriorityDisinherit+0x10c>
   1f584:	68bb      	ldr	r3, [r7, #8]
   1f586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f588:	4b14      	ldr	r3, [pc, #80]	; (1f5dc <xTaskPriorityDisinherit+0x15c>)
   1f58a:	601a      	str	r2, [r3, #0]
   1f58c:	68bb      	ldr	r3, [r7, #8]
   1f58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f590:	0013      	movs	r3, r2
   1f592:	009b      	lsls	r3, r3, #2
   1f594:	189b      	adds	r3, r3, r2
   1f596:	009b      	lsls	r3, r3, #2
   1f598:	4a11      	ldr	r2, [pc, #68]	; (1f5e0 <xTaskPriorityDisinherit+0x160>)
   1f59a:	189a      	adds	r2, r3, r2
   1f59c:	68bb      	ldr	r3, [r7, #8]
   1f59e:	3304      	adds	r3, #4
   1f5a0:	0019      	movs	r1, r3
   1f5a2:	0010      	movs	r0, r2
   1f5a4:	4b0f      	ldr	r3, [pc, #60]	; (1f5e4 <xTaskPriorityDisinherit+0x164>)
   1f5a6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1f5a8:	2301      	movs	r3, #1
   1f5aa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1f5ac:	68fb      	ldr	r3, [r7, #12]
	}
   1f5ae:	0018      	movs	r0, r3
   1f5b0:	46bd      	mov	sp, r7
   1f5b2:	b005      	add	sp, #20
   1f5b4:	bd90      	pop	{r4, r7, pc}
   1f5b6:	46c0      	nop			; (mov r8, r8)
   1f5b8:	20003f80 	.word	0x20003f80
   1f5bc:	0001c407 	.word	0x0001c407
   1f5c0:	0001a58d 	.word	0x0001a58d
   1f5c4:	20000118 	.word	0x20000118
   1f5c8:	0001a56d 	.word	0x0001a56d
   1f5cc:	0001b545 	.word	0x0001b545
   1f5d0:	0001b0b5 	.word	0x0001b0b5
   1f5d4:	0001b4a1 	.word	0x0001b4a1
   1f5d8:	0001ad3d 	.word	0x0001ad3d
   1f5dc:	20004060 	.word	0x20004060
   1f5e0:	20003f84 	.word	0x20003f84
   1f5e4:	0001c357 	.word	0x0001c357

0001f5e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1f5e8:	b590      	push	{r4, r7, lr}
   1f5ea:	b087      	sub	sp, #28
   1f5ec:	af00      	add	r7, sp, #0
   1f5ee:	6078      	str	r0, [r7, #4]
   1f5f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1f5f2:	687b      	ldr	r3, [r7, #4]
   1f5f4:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1f5f6:	2301      	movs	r3, #1
   1f5f8:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1f5fa:	687b      	ldr	r3, [r7, #4]
   1f5fc:	2b00      	cmp	r3, #0
   1f5fe:	d100      	bne.n	1f602 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1f600:	e0a4      	b.n	1f74c <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1f602:	693b      	ldr	r3, [r7, #16]
   1f604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f606:	2b00      	cmp	r3, #0
   1f608:	d101      	bne.n	1f60e <vTaskPriorityDisinheritAfterTimeout+0x26>
   1f60a:	b672      	cpsid	i
   1f60c:	e7fe      	b.n	1f60c <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1f60e:	693b      	ldr	r3, [r7, #16]
   1f610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1f612:	683b      	ldr	r3, [r7, #0]
   1f614:	429a      	cmp	r2, r3
   1f616:	d202      	bcs.n	1f61e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1f618:	683b      	ldr	r3, [r7, #0]
   1f61a:	617b      	str	r3, [r7, #20]
   1f61c:	e002      	b.n	1f624 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1f61e:	693b      	ldr	r3, [r7, #16]
   1f620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f622:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1f624:	693b      	ldr	r3, [r7, #16]
   1f626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f628:	697b      	ldr	r3, [r7, #20]
   1f62a:	429a      	cmp	r2, r3
   1f62c:	d100      	bne.n	1f630 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1f62e:	e08d      	b.n	1f74c <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1f630:	693b      	ldr	r3, [r7, #16]
   1f632:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1f634:	68fb      	ldr	r3, [r7, #12]
   1f636:	429a      	cmp	r2, r3
   1f638:	d000      	beq.n	1f63c <vTaskPriorityDisinheritAfterTimeout+0x54>
   1f63a:	e087      	b.n	1f74c <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1f63c:	4b45      	ldr	r3, [pc, #276]	; (1f754 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1f63e:	681b      	ldr	r3, [r3, #0]
   1f640:	693a      	ldr	r2, [r7, #16]
   1f642:	429a      	cmp	r2, r3
   1f644:	d101      	bne.n	1f64a <vTaskPriorityDisinheritAfterTimeout+0x62>
   1f646:	b672      	cpsid	i
   1f648:	e7fe      	b.n	1f648 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1f64a:	693b      	ldr	r3, [r7, #16]
   1f64c:	0018      	movs	r0, r3
   1f64e:	4b42      	ldr	r3, [pc, #264]	; (1f758 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1f650:	4798      	blx	r3
   1f652:	0003      	movs	r3, r0
   1f654:	001a      	movs	r2, r3
   1f656:	4b41      	ldr	r3, [pc, #260]	; (1f75c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1f658:	881b      	ldrh	r3, [r3, #0]
   1f65a:	4013      	ands	r3, r2
   1f65c:	b29b      	uxth	r3, r3
   1f65e:	2b00      	cmp	r3, #0
   1f660:	d023      	beq.n	1f6aa <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1f662:	693b      	ldr	r3, [r7, #16]
   1f664:	0018      	movs	r0, r3
   1f666:	4b3e      	ldr	r3, [pc, #248]	; (1f760 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1f668:	4798      	blx	r3
   1f66a:	0003      	movs	r3, r0
   1f66c:	b2db      	uxtb	r3, r3
   1f66e:	001c      	movs	r4, r3
   1f670:	693b      	ldr	r3, [r7, #16]
   1f672:	0018      	movs	r0, r3
   1f674:	4b3a      	ldr	r3, [pc, #232]	; (1f760 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1f676:	4798      	blx	r3
   1f678:	0003      	movs	r3, r0
   1f67a:	b2db      	uxtb	r3, r3
   1f67c:	0019      	movs	r1, r3
   1f67e:	2003      	movs	r0, #3
   1f680:	4b38      	ldr	r3, [pc, #224]	; (1f764 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1f682:	4798      	blx	r3
   1f684:	0003      	movs	r3, r0
   1f686:	0022      	movs	r2, r4
   1f688:	2103      	movs	r1, #3
   1f68a:	208f      	movs	r0, #143	; 0x8f
   1f68c:	4c36      	ldr	r4, [pc, #216]	; (1f768 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1f68e:	47a0      	blx	r4
   1f690:	693b      	ldr	r3, [r7, #16]
   1f692:	0018      	movs	r0, r3
   1f694:	4b32      	ldr	r3, [pc, #200]	; (1f760 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1f696:	4798      	blx	r3
   1f698:	0003      	movs	r3, r0
   1f69a:	b2d9      	uxtb	r1, r3
   1f69c:	693b      	ldr	r3, [r7, #16]
   1f69e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f6a0:	b2db      	uxtb	r3, r3
   1f6a2:	001a      	movs	r2, r3
   1f6a4:	2003      	movs	r0, #3
   1f6a6:	4b31      	ldr	r3, [pc, #196]	; (1f76c <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1f6a8:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1f6aa:	693b      	ldr	r3, [r7, #16]
   1f6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f6ae:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1f6b0:	693b      	ldr	r3, [r7, #16]
   1f6b2:	697a      	ldr	r2, [r7, #20]
   1f6b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1f6b6:	693b      	ldr	r3, [r7, #16]
   1f6b8:	699b      	ldr	r3, [r3, #24]
   1f6ba:	2b00      	cmp	r3, #0
   1f6bc:	db04      	blt.n	1f6c8 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f6be:	697b      	ldr	r3, [r7, #20]
   1f6c0:	2205      	movs	r2, #5
   1f6c2:	1ad2      	subs	r2, r2, r3
   1f6c4:	693b      	ldr	r3, [r7, #16]
   1f6c6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1f6c8:	693b      	ldr	r3, [r7, #16]
   1f6ca:	6959      	ldr	r1, [r3, #20]
   1f6cc:	68ba      	ldr	r2, [r7, #8]
   1f6ce:	0013      	movs	r3, r2
   1f6d0:	009b      	lsls	r3, r3, #2
   1f6d2:	189b      	adds	r3, r3, r2
   1f6d4:	009b      	lsls	r3, r3, #2
   1f6d6:	4a26      	ldr	r2, [pc, #152]	; (1f770 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1f6d8:	189b      	adds	r3, r3, r2
   1f6da:	4299      	cmp	r1, r3
   1f6dc:	d101      	bne.n	1f6e2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1f6de:	2301      	movs	r3, #1
   1f6e0:	e000      	b.n	1f6e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1f6e2:	2300      	movs	r3, #0
   1f6e4:	2b00      	cmp	r3, #0
   1f6e6:	d031      	beq.n	1f74c <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1f6e8:	693b      	ldr	r3, [r7, #16]
   1f6ea:	3304      	adds	r3, #4
   1f6ec:	0018      	movs	r0, r3
   1f6ee:	4b21      	ldr	r3, [pc, #132]	; (1f774 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1f6f0:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1f6f2:	693b      	ldr	r3, [r7, #16]
   1f6f4:	0018      	movs	r0, r3
   1f6f6:	4b18      	ldr	r3, [pc, #96]	; (1f758 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1f6f8:	4798      	blx	r3
   1f6fa:	0003      	movs	r3, r0
   1f6fc:	001a      	movs	r2, r3
   1f6fe:	4b17      	ldr	r3, [pc, #92]	; (1f75c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1f700:	881b      	ldrh	r3, [r3, #0]
   1f702:	4013      	ands	r3, r2
   1f704:	b29b      	uxth	r3, r3
   1f706:	2b00      	cmp	r3, #0
   1f708:	d008      	beq.n	1f71c <vTaskPriorityDisinheritAfterTimeout+0x134>
   1f70a:	693b      	ldr	r3, [r7, #16]
   1f70c:	0018      	movs	r0, r3
   1f70e:	4b14      	ldr	r3, [pc, #80]	; (1f760 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1f710:	4798      	blx	r3
   1f712:	0003      	movs	r3, r0
   1f714:	b2db      	uxtb	r3, r3
   1f716:	0018      	movs	r0, r3
   1f718:	4b17      	ldr	r3, [pc, #92]	; (1f778 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1f71a:	4798      	blx	r3
   1f71c:	693b      	ldr	r3, [r7, #16]
   1f71e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f720:	4b16      	ldr	r3, [pc, #88]	; (1f77c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1f722:	681b      	ldr	r3, [r3, #0]
   1f724:	429a      	cmp	r2, r3
   1f726:	d903      	bls.n	1f730 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1f728:	693b      	ldr	r3, [r7, #16]
   1f72a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f72c:	4b13      	ldr	r3, [pc, #76]	; (1f77c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1f72e:	601a      	str	r2, [r3, #0]
   1f730:	693b      	ldr	r3, [r7, #16]
   1f732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f734:	0013      	movs	r3, r2
   1f736:	009b      	lsls	r3, r3, #2
   1f738:	189b      	adds	r3, r3, r2
   1f73a:	009b      	lsls	r3, r3, #2
   1f73c:	4a0c      	ldr	r2, [pc, #48]	; (1f770 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1f73e:	189a      	adds	r2, r3, r2
   1f740:	693b      	ldr	r3, [r7, #16]
   1f742:	3304      	adds	r3, #4
   1f744:	0019      	movs	r1, r3
   1f746:	0010      	movs	r0, r2
   1f748:	4b0d      	ldr	r3, [pc, #52]	; (1f780 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1f74a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1f74c:	46c0      	nop			; (mov r8, r8)
   1f74e:	46bd      	mov	sp, r7
   1f750:	b007      	add	sp, #28
   1f752:	bd90      	pop	{r4, r7, pc}
   1f754:	20003f80 	.word	0x20003f80
   1f758:	0001a58d 	.word	0x0001a58d
   1f75c:	20000118 	.word	0x20000118
   1f760:	0001a56d 	.word	0x0001a56d
   1f764:	0001b545 	.word	0x0001b545
   1f768:	0001b0b5 	.word	0x0001b0b5
   1f76c:	0001b4a1 	.word	0x0001b4a1
   1f770:	20003f84 	.word	0x20003f84
   1f774:	0001c407 	.word	0x0001c407
   1f778:	0001ad3d 	.word	0x0001ad3d
   1f77c:	20004060 	.word	0x20004060
   1f780:	0001c357 	.word	0x0001c357

0001f784 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1f784:	b580      	push	{r7, lr}
   1f786:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1f788:	4b06      	ldr	r3, [pc, #24]	; (1f7a4 <pvTaskIncrementMutexHeldCount+0x20>)
   1f78a:	681b      	ldr	r3, [r3, #0]
   1f78c:	2b00      	cmp	r3, #0
   1f78e:	d004      	beq.n	1f79a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1f790:	4b04      	ldr	r3, [pc, #16]	; (1f7a4 <pvTaskIncrementMutexHeldCount+0x20>)
   1f792:	681b      	ldr	r3, [r3, #0]
   1f794:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1f796:	3201      	adds	r2, #1
   1f798:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1f79a:	4b02      	ldr	r3, [pc, #8]	; (1f7a4 <pvTaskIncrementMutexHeldCount+0x20>)
   1f79c:	681b      	ldr	r3, [r3, #0]
	}
   1f79e:	0018      	movs	r0, r3
   1f7a0:	46bd      	mov	sp, r7
   1f7a2:	bd80      	pop	{r7, pc}
   1f7a4:	20003f80 	.word	0x20003f80

0001f7a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1f7a8:	b580      	push	{r7, lr}
   1f7aa:	b084      	sub	sp, #16
   1f7ac:	af00      	add	r7, sp, #0
   1f7ae:	6078      	str	r0, [r7, #4]
   1f7b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1f7b2:	4b21      	ldr	r3, [pc, #132]	; (1f838 <prvAddCurrentTaskToDelayedList+0x90>)
   1f7b4:	681b      	ldr	r3, [r3, #0]
   1f7b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1f7b8:	4b20      	ldr	r3, [pc, #128]	; (1f83c <prvAddCurrentTaskToDelayedList+0x94>)
   1f7ba:	681b      	ldr	r3, [r3, #0]
   1f7bc:	3304      	adds	r3, #4
   1f7be:	0018      	movs	r0, r3
   1f7c0:	4b1f      	ldr	r3, [pc, #124]	; (1f840 <prvAddCurrentTaskToDelayedList+0x98>)
   1f7c2:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1f7c4:	687b      	ldr	r3, [r7, #4]
   1f7c6:	3301      	adds	r3, #1
   1f7c8:	d10b      	bne.n	1f7e2 <prvAddCurrentTaskToDelayedList+0x3a>
   1f7ca:	683b      	ldr	r3, [r7, #0]
   1f7cc:	2b00      	cmp	r3, #0
   1f7ce:	d008      	beq.n	1f7e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1f7d0:	4b1a      	ldr	r3, [pc, #104]	; (1f83c <prvAddCurrentTaskToDelayedList+0x94>)
   1f7d2:	681b      	ldr	r3, [r3, #0]
   1f7d4:	1d1a      	adds	r2, r3, #4
   1f7d6:	4b1b      	ldr	r3, [pc, #108]	; (1f844 <prvAddCurrentTaskToDelayedList+0x9c>)
   1f7d8:	0011      	movs	r1, r2
   1f7da:	0018      	movs	r0, r3
   1f7dc:	4b1a      	ldr	r3, [pc, #104]	; (1f848 <prvAddCurrentTaskToDelayedList+0xa0>)
   1f7de:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1f7e0:	e026      	b.n	1f830 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1f7e2:	68fa      	ldr	r2, [r7, #12]
   1f7e4:	687b      	ldr	r3, [r7, #4]
   1f7e6:	18d3      	adds	r3, r2, r3
   1f7e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1f7ea:	4b14      	ldr	r3, [pc, #80]	; (1f83c <prvAddCurrentTaskToDelayedList+0x94>)
   1f7ec:	681b      	ldr	r3, [r3, #0]
   1f7ee:	68ba      	ldr	r2, [r7, #8]
   1f7f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1f7f2:	68ba      	ldr	r2, [r7, #8]
   1f7f4:	68fb      	ldr	r3, [r7, #12]
   1f7f6:	429a      	cmp	r2, r3
   1f7f8:	d209      	bcs.n	1f80e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1f7fa:	4b14      	ldr	r3, [pc, #80]	; (1f84c <prvAddCurrentTaskToDelayedList+0xa4>)
   1f7fc:	681a      	ldr	r2, [r3, #0]
   1f7fe:	4b0f      	ldr	r3, [pc, #60]	; (1f83c <prvAddCurrentTaskToDelayedList+0x94>)
   1f800:	681b      	ldr	r3, [r3, #0]
   1f802:	3304      	adds	r3, #4
   1f804:	0019      	movs	r1, r3
   1f806:	0010      	movs	r0, r2
   1f808:	4b11      	ldr	r3, [pc, #68]	; (1f850 <prvAddCurrentTaskToDelayedList+0xa8>)
   1f80a:	4798      	blx	r3
}
   1f80c:	e010      	b.n	1f830 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1f80e:	4b11      	ldr	r3, [pc, #68]	; (1f854 <prvAddCurrentTaskToDelayedList+0xac>)
   1f810:	681a      	ldr	r2, [r3, #0]
   1f812:	4b0a      	ldr	r3, [pc, #40]	; (1f83c <prvAddCurrentTaskToDelayedList+0x94>)
   1f814:	681b      	ldr	r3, [r3, #0]
   1f816:	3304      	adds	r3, #4
   1f818:	0019      	movs	r1, r3
   1f81a:	0010      	movs	r0, r2
   1f81c:	4b0c      	ldr	r3, [pc, #48]	; (1f850 <prvAddCurrentTaskToDelayedList+0xa8>)
   1f81e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1f820:	4b0d      	ldr	r3, [pc, #52]	; (1f858 <prvAddCurrentTaskToDelayedList+0xb0>)
   1f822:	681b      	ldr	r3, [r3, #0]
   1f824:	68ba      	ldr	r2, [r7, #8]
   1f826:	429a      	cmp	r2, r3
   1f828:	d202      	bcs.n	1f830 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1f82a:	4b0b      	ldr	r3, [pc, #44]	; (1f858 <prvAddCurrentTaskToDelayedList+0xb0>)
   1f82c:	68ba      	ldr	r2, [r7, #8]
   1f82e:	601a      	str	r2, [r3, #0]
}
   1f830:	46c0      	nop			; (mov r8, r8)
   1f832:	46bd      	mov	sp, r7
   1f834:	b004      	add	sp, #16
   1f836:	bd80      	pop	{r7, pc}
   1f838:	2000405c 	.word	0x2000405c
   1f83c:	20003f80 	.word	0x20003f80
   1f840:	0001c407 	.word	0x0001c407
   1f844:	20004044 	.word	0x20004044
   1f848:	0001c357 	.word	0x0001c357
   1f84c:	20004014 	.word	0x20004014
   1f850:	0001c39b 	.word	0x0001c39b
   1f854:	20004010 	.word	0x20004010
   1f858:	20004078 	.word	0x20004078

0001f85c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1f85c:	b590      	push	{r4, r7, lr}
   1f85e:	b085      	sub	sp, #20
   1f860:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1f862:	2300      	movs	r3, #0
   1f864:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1f866:	4b0e      	ldr	r3, [pc, #56]	; (1f8a0 <xTimerCreateTimerTask+0x44>)
   1f868:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1f86a:	4b0e      	ldr	r3, [pc, #56]	; (1f8a4 <xTimerCreateTimerTask+0x48>)
   1f86c:	681b      	ldr	r3, [r3, #0]
   1f86e:	2b00      	cmp	r3, #0
   1f870:	d00b      	beq.n	1f88a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1f872:	490d      	ldr	r1, [pc, #52]	; (1f8a8 <xTimerCreateTimerTask+0x4c>)
   1f874:	480d      	ldr	r0, [pc, #52]	; (1f8ac <xTimerCreateTimerTask+0x50>)
   1f876:	4b0e      	ldr	r3, [pc, #56]	; (1f8b0 <xTimerCreateTimerTask+0x54>)
   1f878:	9301      	str	r3, [sp, #4]
   1f87a:	2302      	movs	r3, #2
   1f87c:	9300      	str	r3, [sp, #0]
   1f87e:	2300      	movs	r3, #0
   1f880:	2280      	movs	r2, #128	; 0x80
   1f882:	4c0c      	ldr	r4, [pc, #48]	; (1f8b4 <xTimerCreateTimerTask+0x58>)
   1f884:	47a0      	blx	r4
   1f886:	0003      	movs	r3, r0
   1f888:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1f88a:	687b      	ldr	r3, [r7, #4]
   1f88c:	2b00      	cmp	r3, #0
   1f88e:	d101      	bne.n	1f894 <xTimerCreateTimerTask+0x38>
   1f890:	b672      	cpsid	i
   1f892:	e7fe      	b.n	1f892 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1f894:	687b      	ldr	r3, [r7, #4]
}
   1f896:	0018      	movs	r0, r3
   1f898:	46bd      	mov	sp, r7
   1f89a:	b003      	add	sp, #12
   1f89c:	bd90      	pop	{r4, r7, pc}
   1f89e:	46c0      	nop			; (mov r8, r8)
   1f8a0:	0001fda5 	.word	0x0001fda5
   1f8a4:	200040b4 	.word	0x200040b4
   1f8a8:	0003b534 	.word	0x0003b534
   1f8ac:	0001f9dd 	.word	0x0001f9dd
   1f8b0:	200040b8 	.word	0x200040b8
   1f8b4:	0001e1f5 	.word	0x0001e1f5

0001f8b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1f8b8:	b590      	push	{r4, r7, lr}
   1f8ba:	b089      	sub	sp, #36	; 0x24
   1f8bc:	af00      	add	r7, sp, #0
   1f8be:	60f8      	str	r0, [r7, #12]
   1f8c0:	60b9      	str	r1, [r7, #8]
   1f8c2:	607a      	str	r2, [r7, #4]
   1f8c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1f8c6:	2300      	movs	r3, #0
   1f8c8:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1f8ca:	68fb      	ldr	r3, [r7, #12]
   1f8cc:	2b00      	cmp	r3, #0
   1f8ce:	d101      	bne.n	1f8d4 <xTimerGenericCommand+0x1c>
   1f8d0:	b672      	cpsid	i
   1f8d2:	e7fe      	b.n	1f8d2 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1f8d4:	4b1e      	ldr	r3, [pc, #120]	; (1f950 <xTimerGenericCommand+0x98>)
   1f8d6:	681b      	ldr	r3, [r3, #0]
   1f8d8:	2b00      	cmp	r3, #0
   1f8da:	d033      	beq.n	1f944 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1f8dc:	2310      	movs	r3, #16
   1f8de:	18fb      	adds	r3, r7, r3
   1f8e0:	68ba      	ldr	r2, [r7, #8]
   1f8e2:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1f8e4:	2310      	movs	r3, #16
   1f8e6:	18fb      	adds	r3, r7, r3
   1f8e8:	687a      	ldr	r2, [r7, #4]
   1f8ea:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1f8ec:	2310      	movs	r3, #16
   1f8ee:	18fb      	adds	r3, r7, r3
   1f8f0:	68fa      	ldr	r2, [r7, #12]
   1f8f2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1f8f4:	68bb      	ldr	r3, [r7, #8]
   1f8f6:	2b05      	cmp	r3, #5
   1f8f8:	dc1a      	bgt.n	1f930 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1f8fa:	4b16      	ldr	r3, [pc, #88]	; (1f954 <xTimerGenericCommand+0x9c>)
   1f8fc:	4798      	blx	r3
   1f8fe:	0003      	movs	r3, r0
   1f900:	2b02      	cmp	r3, #2
   1f902:	d10a      	bne.n	1f91a <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1f904:	4b12      	ldr	r3, [pc, #72]	; (1f950 <xTimerGenericCommand+0x98>)
   1f906:	6818      	ldr	r0, [r3, #0]
   1f908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1f90a:	2310      	movs	r3, #16
   1f90c:	18f9      	adds	r1, r7, r3
   1f90e:	2300      	movs	r3, #0
   1f910:	4c11      	ldr	r4, [pc, #68]	; (1f958 <xTimerGenericCommand+0xa0>)
   1f912:	47a0      	blx	r4
   1f914:	0003      	movs	r3, r0
   1f916:	61fb      	str	r3, [r7, #28]
   1f918:	e014      	b.n	1f944 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1f91a:	4b0d      	ldr	r3, [pc, #52]	; (1f950 <xTimerGenericCommand+0x98>)
   1f91c:	6818      	ldr	r0, [r3, #0]
   1f91e:	2310      	movs	r3, #16
   1f920:	18f9      	adds	r1, r7, r3
   1f922:	2300      	movs	r3, #0
   1f924:	2200      	movs	r2, #0
   1f926:	4c0c      	ldr	r4, [pc, #48]	; (1f958 <xTimerGenericCommand+0xa0>)
   1f928:	47a0      	blx	r4
   1f92a:	0003      	movs	r3, r0
   1f92c:	61fb      	str	r3, [r7, #28]
   1f92e:	e009      	b.n	1f944 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1f930:	4b07      	ldr	r3, [pc, #28]	; (1f950 <xTimerGenericCommand+0x98>)
   1f932:	6818      	ldr	r0, [r3, #0]
   1f934:	683a      	ldr	r2, [r7, #0]
   1f936:	2310      	movs	r3, #16
   1f938:	18f9      	adds	r1, r7, r3
   1f93a:	2300      	movs	r3, #0
   1f93c:	4c07      	ldr	r4, [pc, #28]	; (1f95c <xTimerGenericCommand+0xa4>)
   1f93e:	47a0      	blx	r4
   1f940:	0003      	movs	r3, r0
   1f942:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1f944:	69fb      	ldr	r3, [r7, #28]
}
   1f946:	0018      	movs	r0, r3
   1f948:	46bd      	mov	sp, r7
   1f94a:	b009      	add	sp, #36	; 0x24
   1f94c:	bd90      	pop	{r4, r7, pc}
   1f94e:	46c0      	nop			; (mov r8, r8)
   1f950:	200040b4 	.word	0x200040b4
   1f954:	0001f2b9 	.word	0x0001f2b9
   1f958:	0001cb2d 	.word	0x0001cb2d
   1f95c:	0001cf8d 	.word	0x0001cf8d

0001f960 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1f960:	b590      	push	{r4, r7, lr}
   1f962:	b087      	sub	sp, #28
   1f964:	af02      	add	r7, sp, #8
   1f966:	6078      	str	r0, [r7, #4]
   1f968:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1f96a:	4b18      	ldr	r3, [pc, #96]	; (1f9cc <prvProcessExpiredTimer+0x6c>)
   1f96c:	681b      	ldr	r3, [r3, #0]
   1f96e:	68db      	ldr	r3, [r3, #12]
   1f970:	68db      	ldr	r3, [r3, #12]
   1f972:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1f974:	68fb      	ldr	r3, [r7, #12]
   1f976:	3304      	adds	r3, #4
   1f978:	0018      	movs	r0, r3
   1f97a:	4b15      	ldr	r3, [pc, #84]	; (1f9d0 <prvProcessExpiredTimer+0x70>)
   1f97c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1f97e:	68fb      	ldr	r3, [r7, #12]
   1f980:	69db      	ldr	r3, [r3, #28]
   1f982:	2b01      	cmp	r3, #1
   1f984:	d119      	bne.n	1f9ba <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1f986:	68fb      	ldr	r3, [r7, #12]
   1f988:	699a      	ldr	r2, [r3, #24]
   1f98a:	687b      	ldr	r3, [r7, #4]
   1f98c:	18d1      	adds	r1, r2, r3
   1f98e:	687b      	ldr	r3, [r7, #4]
   1f990:	683a      	ldr	r2, [r7, #0]
   1f992:	68f8      	ldr	r0, [r7, #12]
   1f994:	4c0f      	ldr	r4, [pc, #60]	; (1f9d4 <prvProcessExpiredTimer+0x74>)
   1f996:	47a0      	blx	r4
   1f998:	1e03      	subs	r3, r0, #0
   1f99a:	d00e      	beq.n	1f9ba <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1f99c:	687a      	ldr	r2, [r7, #4]
   1f99e:	68f8      	ldr	r0, [r7, #12]
   1f9a0:	2300      	movs	r3, #0
   1f9a2:	9300      	str	r3, [sp, #0]
   1f9a4:	2300      	movs	r3, #0
   1f9a6:	2100      	movs	r1, #0
   1f9a8:	4c0b      	ldr	r4, [pc, #44]	; (1f9d8 <prvProcessExpiredTimer+0x78>)
   1f9aa:	47a0      	blx	r4
   1f9ac:	0003      	movs	r3, r0
   1f9ae:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1f9b0:	68bb      	ldr	r3, [r7, #8]
   1f9b2:	2b00      	cmp	r3, #0
   1f9b4:	d101      	bne.n	1f9ba <prvProcessExpiredTimer+0x5a>
   1f9b6:	b672      	cpsid	i
   1f9b8:	e7fe      	b.n	1f9b8 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1f9ba:	68fb      	ldr	r3, [r7, #12]
   1f9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f9be:	68fa      	ldr	r2, [r7, #12]
   1f9c0:	0010      	movs	r0, r2
   1f9c2:	4798      	blx	r3
}
   1f9c4:	46c0      	nop			; (mov r8, r8)
   1f9c6:	46bd      	mov	sp, r7
   1f9c8:	b005      	add	sp, #20
   1f9ca:	bd90      	pop	{r4, r7, pc}
   1f9cc:	200040ac 	.word	0x200040ac
   1f9d0:	0001c407 	.word	0x0001c407
   1f9d4:	0001fb45 	.word	0x0001fb45
   1f9d8:	0001f8b9 	.word	0x0001f8b9

0001f9dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1f9dc:	b580      	push	{r7, lr}
   1f9de:	b084      	sub	sp, #16
   1f9e0:	af00      	add	r7, sp, #0
   1f9e2:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1f9e4:	4b08      	ldr	r3, [pc, #32]	; (1fa08 <prvTimerTask+0x2c>)
   1f9e6:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1f9e8:	2308      	movs	r3, #8
   1f9ea:	18fb      	adds	r3, r7, r3
   1f9ec:	0018      	movs	r0, r3
   1f9ee:	4b07      	ldr	r3, [pc, #28]	; (1fa0c <prvTimerTask+0x30>)
   1f9f0:	4798      	blx	r3
   1f9f2:	0003      	movs	r3, r0
   1f9f4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1f9f6:	68ba      	ldr	r2, [r7, #8]
   1f9f8:	68fb      	ldr	r3, [r7, #12]
   1f9fa:	0011      	movs	r1, r2
   1f9fc:	0018      	movs	r0, r3
   1f9fe:	4b04      	ldr	r3, [pc, #16]	; (1fa10 <prvTimerTask+0x34>)
   1fa00:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1fa02:	4b04      	ldr	r3, [pc, #16]	; (1fa14 <prvTimerTask+0x38>)
   1fa04:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1fa06:	e7ef      	b.n	1f9e8 <prvTimerTask+0xc>
   1fa08:	00034b95 	.word	0x00034b95
   1fa0c:	0001fabd 	.word	0x0001fabd
   1fa10:	0001fa19 	.word	0x0001fa19
   1fa14:	0001fbcd 	.word	0x0001fbcd

0001fa18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1fa18:	b580      	push	{r7, lr}
   1fa1a:	b084      	sub	sp, #16
   1fa1c:	af00      	add	r7, sp, #0
   1fa1e:	6078      	str	r0, [r7, #4]
   1fa20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1fa22:	4b1e      	ldr	r3, [pc, #120]	; (1fa9c <prvProcessTimerOrBlockTask+0x84>)
   1fa24:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1fa26:	2308      	movs	r3, #8
   1fa28:	18fb      	adds	r3, r7, r3
   1fa2a:	0018      	movs	r0, r3
   1fa2c:	4b1c      	ldr	r3, [pc, #112]	; (1faa0 <prvProcessTimerOrBlockTask+0x88>)
   1fa2e:	4798      	blx	r3
   1fa30:	0003      	movs	r3, r0
   1fa32:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1fa34:	68bb      	ldr	r3, [r7, #8]
   1fa36:	2b00      	cmp	r3, #0
   1fa38:	d129      	bne.n	1fa8e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1fa3a:	683b      	ldr	r3, [r7, #0]
   1fa3c:	2b00      	cmp	r3, #0
   1fa3e:	d10c      	bne.n	1fa5a <prvProcessTimerOrBlockTask+0x42>
   1fa40:	687a      	ldr	r2, [r7, #4]
   1fa42:	68fb      	ldr	r3, [r7, #12]
   1fa44:	429a      	cmp	r2, r3
   1fa46:	d808      	bhi.n	1fa5a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1fa48:	4b16      	ldr	r3, [pc, #88]	; (1faa4 <prvProcessTimerOrBlockTask+0x8c>)
   1fa4a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1fa4c:	68fa      	ldr	r2, [r7, #12]
   1fa4e:	687b      	ldr	r3, [r7, #4]
   1fa50:	0011      	movs	r1, r2
   1fa52:	0018      	movs	r0, r3
   1fa54:	4b14      	ldr	r3, [pc, #80]	; (1faa8 <prvProcessTimerOrBlockTask+0x90>)
   1fa56:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1fa58:	e01b      	b.n	1fa92 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1fa5a:	683b      	ldr	r3, [r7, #0]
   1fa5c:	2b00      	cmp	r3, #0
   1fa5e:	d006      	beq.n	1fa6e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1fa60:	4b12      	ldr	r3, [pc, #72]	; (1faac <prvProcessTimerOrBlockTask+0x94>)
   1fa62:	681b      	ldr	r3, [r3, #0]
   1fa64:	681b      	ldr	r3, [r3, #0]
   1fa66:	425a      	negs	r2, r3
   1fa68:	4153      	adcs	r3, r2
   1fa6a:	b2db      	uxtb	r3, r3
   1fa6c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1fa6e:	4b10      	ldr	r3, [pc, #64]	; (1fab0 <prvProcessTimerOrBlockTask+0x98>)
   1fa70:	6818      	ldr	r0, [r3, #0]
   1fa72:	687a      	ldr	r2, [r7, #4]
   1fa74:	68fb      	ldr	r3, [r7, #12]
   1fa76:	1ad3      	subs	r3, r2, r3
   1fa78:	683a      	ldr	r2, [r7, #0]
   1fa7a:	0019      	movs	r1, r3
   1fa7c:	4b0d      	ldr	r3, [pc, #52]	; (1fab4 <prvProcessTimerOrBlockTask+0x9c>)
   1fa7e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1fa80:	4b08      	ldr	r3, [pc, #32]	; (1faa4 <prvProcessTimerOrBlockTask+0x8c>)
   1fa82:	4798      	blx	r3
   1fa84:	1e03      	subs	r3, r0, #0
   1fa86:	d104      	bne.n	1fa92 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1fa88:	4b0b      	ldr	r3, [pc, #44]	; (1fab8 <prvProcessTimerOrBlockTask+0xa0>)
   1fa8a:	4798      	blx	r3
}
   1fa8c:	e001      	b.n	1fa92 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1fa8e:	4b05      	ldr	r3, [pc, #20]	; (1faa4 <prvProcessTimerOrBlockTask+0x8c>)
   1fa90:	4798      	blx	r3
}
   1fa92:	46c0      	nop			; (mov r8, r8)
   1fa94:	46bd      	mov	sp, r7
   1fa96:	b004      	add	sp, #16
   1fa98:	bd80      	pop	{r7, pc}
   1fa9a:	46c0      	nop			; (mov r8, r8)
   1fa9c:	0001e851 	.word	0x0001e851
   1faa0:	0001fafd 	.word	0x0001fafd
   1faa4:	0001e869 	.word	0x0001e869
   1faa8:	0001f961 	.word	0x0001f961
   1faac:	200040b0 	.word	0x200040b0
   1fab0:	200040b4 	.word	0x200040b4
   1fab4:	0001dff1 	.word	0x0001dff1
   1fab8:	0001c581 	.word	0x0001c581

0001fabc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1fabc:	b580      	push	{r7, lr}
   1fabe:	b084      	sub	sp, #16
   1fac0:	af00      	add	r7, sp, #0
   1fac2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1fac4:	4b0c      	ldr	r3, [pc, #48]	; (1faf8 <prvGetNextExpireTime+0x3c>)
   1fac6:	681b      	ldr	r3, [r3, #0]
   1fac8:	681b      	ldr	r3, [r3, #0]
   1faca:	425a      	negs	r2, r3
   1facc:	4153      	adcs	r3, r2
   1face:	b2db      	uxtb	r3, r3
   1fad0:	001a      	movs	r2, r3
   1fad2:	687b      	ldr	r3, [r7, #4]
   1fad4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1fad6:	687b      	ldr	r3, [r7, #4]
   1fad8:	681b      	ldr	r3, [r3, #0]
   1fada:	2b00      	cmp	r3, #0
   1fadc:	d105      	bne.n	1faea <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1fade:	4b06      	ldr	r3, [pc, #24]	; (1faf8 <prvGetNextExpireTime+0x3c>)
   1fae0:	681b      	ldr	r3, [r3, #0]
   1fae2:	68db      	ldr	r3, [r3, #12]
   1fae4:	681b      	ldr	r3, [r3, #0]
   1fae6:	60fb      	str	r3, [r7, #12]
   1fae8:	e001      	b.n	1faee <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1faea:	2300      	movs	r3, #0
   1faec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1faee:	68fb      	ldr	r3, [r7, #12]
}
   1faf0:	0018      	movs	r0, r3
   1faf2:	46bd      	mov	sp, r7
   1faf4:	b004      	add	sp, #16
   1faf6:	bd80      	pop	{r7, pc}
   1faf8:	200040ac 	.word	0x200040ac

0001fafc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1fafc:	b580      	push	{r7, lr}
   1fafe:	b084      	sub	sp, #16
   1fb00:	af00      	add	r7, sp, #0
   1fb02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1fb04:	4b0c      	ldr	r3, [pc, #48]	; (1fb38 <prvSampleTimeNow+0x3c>)
   1fb06:	4798      	blx	r3
   1fb08:	0003      	movs	r3, r0
   1fb0a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1fb0c:	4b0b      	ldr	r3, [pc, #44]	; (1fb3c <prvSampleTimeNow+0x40>)
   1fb0e:	681b      	ldr	r3, [r3, #0]
   1fb10:	68fa      	ldr	r2, [r7, #12]
   1fb12:	429a      	cmp	r2, r3
   1fb14:	d205      	bcs.n	1fb22 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1fb16:	4b0a      	ldr	r3, [pc, #40]	; (1fb40 <prvSampleTimeNow+0x44>)
   1fb18:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1fb1a:	687b      	ldr	r3, [r7, #4]
   1fb1c:	2201      	movs	r2, #1
   1fb1e:	601a      	str	r2, [r3, #0]
   1fb20:	e002      	b.n	1fb28 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1fb22:	687b      	ldr	r3, [r7, #4]
   1fb24:	2200      	movs	r2, #0
   1fb26:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1fb28:	4b04      	ldr	r3, [pc, #16]	; (1fb3c <prvSampleTimeNow+0x40>)
   1fb2a:	68fa      	ldr	r2, [r7, #12]
   1fb2c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1fb2e:	68fb      	ldr	r3, [r7, #12]
}
   1fb30:	0018      	movs	r0, r3
   1fb32:	46bd      	mov	sp, r7
   1fb34:	b004      	add	sp, #16
   1fb36:	bd80      	pop	{r7, pc}
   1fb38:	0001e9d9 	.word	0x0001e9d9
   1fb3c:	200040bc 	.word	0x200040bc
   1fb40:	0001fce5 	.word	0x0001fce5

0001fb44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1fb44:	b580      	push	{r7, lr}
   1fb46:	b086      	sub	sp, #24
   1fb48:	af00      	add	r7, sp, #0
   1fb4a:	60f8      	str	r0, [r7, #12]
   1fb4c:	60b9      	str	r1, [r7, #8]
   1fb4e:	607a      	str	r2, [r7, #4]
   1fb50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1fb52:	2300      	movs	r3, #0
   1fb54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1fb56:	68fb      	ldr	r3, [r7, #12]
   1fb58:	68ba      	ldr	r2, [r7, #8]
   1fb5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1fb5c:	68fb      	ldr	r3, [r7, #12]
   1fb5e:	68fa      	ldr	r2, [r7, #12]
   1fb60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1fb62:	68ba      	ldr	r2, [r7, #8]
   1fb64:	687b      	ldr	r3, [r7, #4]
   1fb66:	429a      	cmp	r2, r3
   1fb68:	d812      	bhi.n	1fb90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1fb6a:	687a      	ldr	r2, [r7, #4]
   1fb6c:	683b      	ldr	r3, [r7, #0]
   1fb6e:	1ad2      	subs	r2, r2, r3
   1fb70:	68fb      	ldr	r3, [r7, #12]
   1fb72:	699b      	ldr	r3, [r3, #24]
   1fb74:	429a      	cmp	r2, r3
   1fb76:	d302      	bcc.n	1fb7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1fb78:	2301      	movs	r3, #1
   1fb7a:	617b      	str	r3, [r7, #20]
   1fb7c:	e01b      	b.n	1fbb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1fb7e:	4b10      	ldr	r3, [pc, #64]	; (1fbc0 <prvInsertTimerInActiveList+0x7c>)
   1fb80:	681a      	ldr	r2, [r3, #0]
   1fb82:	68fb      	ldr	r3, [r7, #12]
   1fb84:	3304      	adds	r3, #4
   1fb86:	0019      	movs	r1, r3
   1fb88:	0010      	movs	r0, r2
   1fb8a:	4b0e      	ldr	r3, [pc, #56]	; (1fbc4 <prvInsertTimerInActiveList+0x80>)
   1fb8c:	4798      	blx	r3
   1fb8e:	e012      	b.n	1fbb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1fb90:	687a      	ldr	r2, [r7, #4]
   1fb92:	683b      	ldr	r3, [r7, #0]
   1fb94:	429a      	cmp	r2, r3
   1fb96:	d206      	bcs.n	1fba6 <prvInsertTimerInActiveList+0x62>
   1fb98:	68ba      	ldr	r2, [r7, #8]
   1fb9a:	683b      	ldr	r3, [r7, #0]
   1fb9c:	429a      	cmp	r2, r3
   1fb9e:	d302      	bcc.n	1fba6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1fba0:	2301      	movs	r3, #1
   1fba2:	617b      	str	r3, [r7, #20]
   1fba4:	e007      	b.n	1fbb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1fba6:	4b08      	ldr	r3, [pc, #32]	; (1fbc8 <prvInsertTimerInActiveList+0x84>)
   1fba8:	681a      	ldr	r2, [r3, #0]
   1fbaa:	68fb      	ldr	r3, [r7, #12]
   1fbac:	3304      	adds	r3, #4
   1fbae:	0019      	movs	r1, r3
   1fbb0:	0010      	movs	r0, r2
   1fbb2:	4b04      	ldr	r3, [pc, #16]	; (1fbc4 <prvInsertTimerInActiveList+0x80>)
   1fbb4:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1fbb6:	697b      	ldr	r3, [r7, #20]
}
   1fbb8:	0018      	movs	r0, r3
   1fbba:	46bd      	mov	sp, r7
   1fbbc:	b006      	add	sp, #24
   1fbbe:	bd80      	pop	{r7, pc}
   1fbc0:	200040b0 	.word	0x200040b0
   1fbc4:	0001c39b 	.word	0x0001c39b
   1fbc8:	200040ac 	.word	0x200040ac

0001fbcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1fbcc:	b590      	push	{r4, r7, lr}
   1fbce:	b08b      	sub	sp, #44	; 0x2c
   1fbd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1fbd2:	e068      	b.n	1fca6 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1fbd4:	2308      	movs	r3, #8
   1fbd6:	18fb      	adds	r3, r7, r3
   1fbd8:	681b      	ldr	r3, [r3, #0]
   1fbda:	2b00      	cmp	r3, #0
   1fbdc:	db63      	blt.n	1fca6 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1fbde:	2308      	movs	r3, #8
   1fbe0:	18fb      	adds	r3, r7, r3
   1fbe2:	689b      	ldr	r3, [r3, #8]
   1fbe4:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1fbe6:	69fb      	ldr	r3, [r7, #28]
   1fbe8:	695b      	ldr	r3, [r3, #20]
   1fbea:	2b00      	cmp	r3, #0
   1fbec:	d004      	beq.n	1fbf8 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1fbee:	69fb      	ldr	r3, [r7, #28]
   1fbf0:	3304      	adds	r3, #4
   1fbf2:	0018      	movs	r0, r3
   1fbf4:	4b33      	ldr	r3, [pc, #204]	; (1fcc4 <prvProcessReceivedCommands+0xf8>)
   1fbf6:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1fbf8:	1d3b      	adds	r3, r7, #4
   1fbfa:	0018      	movs	r0, r3
   1fbfc:	4b32      	ldr	r3, [pc, #200]	; (1fcc8 <prvProcessReceivedCommands+0xfc>)
   1fbfe:	4798      	blx	r3
   1fc00:	0003      	movs	r3, r0
   1fc02:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1fc04:	2308      	movs	r3, #8
   1fc06:	18fb      	adds	r3, r7, r3
   1fc08:	681b      	ldr	r3, [r3, #0]
   1fc0a:	2b09      	cmp	r3, #9
   1fc0c:	d84a      	bhi.n	1fca4 <prvProcessReceivedCommands+0xd8>
   1fc0e:	009a      	lsls	r2, r3, #2
   1fc10:	4b2e      	ldr	r3, [pc, #184]	; (1fccc <prvProcessReceivedCommands+0x100>)
   1fc12:	18d3      	adds	r3, r2, r3
   1fc14:	681b      	ldr	r3, [r3, #0]
   1fc16:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1fc18:	2308      	movs	r3, #8
   1fc1a:	18fb      	adds	r3, r7, r3
   1fc1c:	685a      	ldr	r2, [r3, #4]
   1fc1e:	69fb      	ldr	r3, [r7, #28]
   1fc20:	699b      	ldr	r3, [r3, #24]
   1fc22:	18d1      	adds	r1, r2, r3
   1fc24:	2308      	movs	r3, #8
   1fc26:	18fb      	adds	r3, r7, r3
   1fc28:	685b      	ldr	r3, [r3, #4]
   1fc2a:	69ba      	ldr	r2, [r7, #24]
   1fc2c:	69f8      	ldr	r0, [r7, #28]
   1fc2e:	4c28      	ldr	r4, [pc, #160]	; (1fcd0 <prvProcessReceivedCommands+0x104>)
   1fc30:	47a0      	blx	r4
   1fc32:	1e03      	subs	r3, r0, #0
   1fc34:	d037      	beq.n	1fca6 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1fc36:	69fb      	ldr	r3, [r7, #28]
   1fc38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fc3a:	69fa      	ldr	r2, [r7, #28]
   1fc3c:	0010      	movs	r0, r2
   1fc3e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1fc40:	69fb      	ldr	r3, [r7, #28]
   1fc42:	69db      	ldr	r3, [r3, #28]
   1fc44:	2b01      	cmp	r3, #1
   1fc46:	d12e      	bne.n	1fca6 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1fc48:	2308      	movs	r3, #8
   1fc4a:	18fb      	adds	r3, r7, r3
   1fc4c:	685a      	ldr	r2, [r3, #4]
   1fc4e:	69fb      	ldr	r3, [r7, #28]
   1fc50:	699b      	ldr	r3, [r3, #24]
   1fc52:	18d2      	adds	r2, r2, r3
   1fc54:	69f8      	ldr	r0, [r7, #28]
   1fc56:	2300      	movs	r3, #0
   1fc58:	9300      	str	r3, [sp, #0]
   1fc5a:	2300      	movs	r3, #0
   1fc5c:	2100      	movs	r1, #0
   1fc5e:	4c1d      	ldr	r4, [pc, #116]	; (1fcd4 <prvProcessReceivedCommands+0x108>)
   1fc60:	47a0      	blx	r4
   1fc62:	0003      	movs	r3, r0
   1fc64:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1fc66:	697b      	ldr	r3, [r7, #20]
   1fc68:	2b00      	cmp	r3, #0
   1fc6a:	d11c      	bne.n	1fca6 <prvProcessReceivedCommands+0xda>
   1fc6c:	b672      	cpsid	i
   1fc6e:	e7fe      	b.n	1fc6e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1fc70:	2308      	movs	r3, #8
   1fc72:	18fb      	adds	r3, r7, r3
   1fc74:	685a      	ldr	r2, [r3, #4]
   1fc76:	69fb      	ldr	r3, [r7, #28]
   1fc78:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1fc7a:	69fb      	ldr	r3, [r7, #28]
   1fc7c:	699b      	ldr	r3, [r3, #24]
   1fc7e:	2b00      	cmp	r3, #0
   1fc80:	d101      	bne.n	1fc86 <prvProcessReceivedCommands+0xba>
   1fc82:	b672      	cpsid	i
   1fc84:	e7fe      	b.n	1fc84 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1fc86:	69fb      	ldr	r3, [r7, #28]
   1fc88:	699a      	ldr	r2, [r3, #24]
   1fc8a:	69bb      	ldr	r3, [r7, #24]
   1fc8c:	18d1      	adds	r1, r2, r3
   1fc8e:	69bb      	ldr	r3, [r7, #24]
   1fc90:	69ba      	ldr	r2, [r7, #24]
   1fc92:	69f8      	ldr	r0, [r7, #28]
   1fc94:	4c0e      	ldr	r4, [pc, #56]	; (1fcd0 <prvProcessReceivedCommands+0x104>)
   1fc96:	47a0      	blx	r4
					break;
   1fc98:	e005      	b.n	1fca6 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1fc9a:	69fb      	ldr	r3, [r7, #28]
   1fc9c:	0018      	movs	r0, r3
   1fc9e:	4b0e      	ldr	r3, [pc, #56]	; (1fcd8 <prvProcessReceivedCommands+0x10c>)
   1fca0:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1fca2:	e000      	b.n	1fca6 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1fca4:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1fca6:	4b0d      	ldr	r3, [pc, #52]	; (1fcdc <prvProcessReceivedCommands+0x110>)
   1fca8:	681b      	ldr	r3, [r3, #0]
   1fcaa:	2208      	movs	r2, #8
   1fcac:	18b9      	adds	r1, r7, r2
   1fcae:	2200      	movs	r2, #0
   1fcb0:	0018      	movs	r0, r3
   1fcb2:	4b0b      	ldr	r3, [pc, #44]	; (1fce0 <prvProcessReceivedCommands+0x114>)
   1fcb4:	4798      	blx	r3
   1fcb6:	1e03      	subs	r3, r0, #0
   1fcb8:	d18c      	bne.n	1fbd4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1fcba:	46c0      	nop			; (mov r8, r8)
   1fcbc:	46bd      	mov	sp, r7
   1fcbe:	b009      	add	sp, #36	; 0x24
   1fcc0:	bd90      	pop	{r4, r7, pc}
   1fcc2:	46c0      	nop			; (mov r8, r8)
   1fcc4:	0001c407 	.word	0x0001c407
   1fcc8:	0001fafd 	.word	0x0001fafd
   1fccc:	0003b53c 	.word	0x0003b53c
   1fcd0:	0001fb45 	.word	0x0001fb45
   1fcd4:	0001f8b9 	.word	0x0001f8b9
   1fcd8:	0001c795 	.word	0x0001c795
   1fcdc:	200040b4 	.word	0x200040b4
   1fce0:	0001d3e5 	.word	0x0001d3e5

0001fce4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1fce4:	b590      	push	{r4, r7, lr}
   1fce6:	b089      	sub	sp, #36	; 0x24
   1fce8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1fcea:	e03e      	b.n	1fd6a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1fcec:	4b28      	ldr	r3, [pc, #160]	; (1fd90 <prvSwitchTimerLists+0xac>)
   1fcee:	681b      	ldr	r3, [r3, #0]
   1fcf0:	68db      	ldr	r3, [r3, #12]
   1fcf2:	681b      	ldr	r3, [r3, #0]
   1fcf4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1fcf6:	4b26      	ldr	r3, [pc, #152]	; (1fd90 <prvSwitchTimerLists+0xac>)
   1fcf8:	681b      	ldr	r3, [r3, #0]
   1fcfa:	68db      	ldr	r3, [r3, #12]
   1fcfc:	68db      	ldr	r3, [r3, #12]
   1fcfe:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1fd00:	693b      	ldr	r3, [r7, #16]
   1fd02:	3304      	adds	r3, #4
   1fd04:	0018      	movs	r0, r3
   1fd06:	4b23      	ldr	r3, [pc, #140]	; (1fd94 <prvSwitchTimerLists+0xb0>)
   1fd08:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1fd0a:	693b      	ldr	r3, [r7, #16]
   1fd0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fd0e:	693a      	ldr	r2, [r7, #16]
   1fd10:	0010      	movs	r0, r2
   1fd12:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1fd14:	693b      	ldr	r3, [r7, #16]
   1fd16:	69db      	ldr	r3, [r3, #28]
   1fd18:	2b01      	cmp	r3, #1
   1fd1a:	d126      	bne.n	1fd6a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1fd1c:	693b      	ldr	r3, [r7, #16]
   1fd1e:	699a      	ldr	r2, [r3, #24]
   1fd20:	697b      	ldr	r3, [r7, #20]
   1fd22:	18d3      	adds	r3, r2, r3
   1fd24:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1fd26:	68fa      	ldr	r2, [r7, #12]
   1fd28:	697b      	ldr	r3, [r7, #20]
   1fd2a:	429a      	cmp	r2, r3
   1fd2c:	d90e      	bls.n	1fd4c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1fd2e:	693b      	ldr	r3, [r7, #16]
   1fd30:	68fa      	ldr	r2, [r7, #12]
   1fd32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1fd34:	693b      	ldr	r3, [r7, #16]
   1fd36:	693a      	ldr	r2, [r7, #16]
   1fd38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1fd3a:	4b15      	ldr	r3, [pc, #84]	; (1fd90 <prvSwitchTimerLists+0xac>)
   1fd3c:	681a      	ldr	r2, [r3, #0]
   1fd3e:	693b      	ldr	r3, [r7, #16]
   1fd40:	3304      	adds	r3, #4
   1fd42:	0019      	movs	r1, r3
   1fd44:	0010      	movs	r0, r2
   1fd46:	4b14      	ldr	r3, [pc, #80]	; (1fd98 <prvSwitchTimerLists+0xb4>)
   1fd48:	4798      	blx	r3
   1fd4a:	e00e      	b.n	1fd6a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1fd4c:	697a      	ldr	r2, [r7, #20]
   1fd4e:	6938      	ldr	r0, [r7, #16]
   1fd50:	2300      	movs	r3, #0
   1fd52:	9300      	str	r3, [sp, #0]
   1fd54:	2300      	movs	r3, #0
   1fd56:	2100      	movs	r1, #0
   1fd58:	4c10      	ldr	r4, [pc, #64]	; (1fd9c <prvSwitchTimerLists+0xb8>)
   1fd5a:	47a0      	blx	r4
   1fd5c:	0003      	movs	r3, r0
   1fd5e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1fd60:	68bb      	ldr	r3, [r7, #8]
   1fd62:	2b00      	cmp	r3, #0
   1fd64:	d101      	bne.n	1fd6a <prvSwitchTimerLists+0x86>
   1fd66:	b672      	cpsid	i
   1fd68:	e7fe      	b.n	1fd68 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1fd6a:	4b09      	ldr	r3, [pc, #36]	; (1fd90 <prvSwitchTimerLists+0xac>)
   1fd6c:	681b      	ldr	r3, [r3, #0]
   1fd6e:	681b      	ldr	r3, [r3, #0]
   1fd70:	2b00      	cmp	r3, #0
   1fd72:	d1bb      	bne.n	1fcec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1fd74:	4b06      	ldr	r3, [pc, #24]	; (1fd90 <prvSwitchTimerLists+0xac>)
   1fd76:	681b      	ldr	r3, [r3, #0]
   1fd78:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1fd7a:	4b09      	ldr	r3, [pc, #36]	; (1fda0 <prvSwitchTimerLists+0xbc>)
   1fd7c:	681a      	ldr	r2, [r3, #0]
   1fd7e:	4b04      	ldr	r3, [pc, #16]	; (1fd90 <prvSwitchTimerLists+0xac>)
   1fd80:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1fd82:	4b07      	ldr	r3, [pc, #28]	; (1fda0 <prvSwitchTimerLists+0xbc>)
   1fd84:	687a      	ldr	r2, [r7, #4]
   1fd86:	601a      	str	r2, [r3, #0]
}
   1fd88:	46c0      	nop			; (mov r8, r8)
   1fd8a:	46bd      	mov	sp, r7
   1fd8c:	b007      	add	sp, #28
   1fd8e:	bd90      	pop	{r4, r7, pc}
   1fd90:	200040ac 	.word	0x200040ac
   1fd94:	0001c407 	.word	0x0001c407
   1fd98:	0001c39b 	.word	0x0001c39b
   1fd9c:	0001f8b9 	.word	0x0001f8b9
   1fda0:	200040b0 	.word	0x200040b0

0001fda4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1fda4:	b580      	push	{r7, lr}
   1fda6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1fda8:	4b10      	ldr	r3, [pc, #64]	; (1fdec <prvCheckForValidListAndQueue+0x48>)
   1fdaa:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1fdac:	4b10      	ldr	r3, [pc, #64]	; (1fdf0 <prvCheckForValidListAndQueue+0x4c>)
   1fdae:	681b      	ldr	r3, [r3, #0]
   1fdb0:	2b00      	cmp	r3, #0
   1fdb2:	d115      	bne.n	1fde0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1fdb4:	4b0f      	ldr	r3, [pc, #60]	; (1fdf4 <prvCheckForValidListAndQueue+0x50>)
   1fdb6:	0018      	movs	r0, r3
   1fdb8:	4b0f      	ldr	r3, [pc, #60]	; (1fdf8 <prvCheckForValidListAndQueue+0x54>)
   1fdba:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1fdbc:	4b0f      	ldr	r3, [pc, #60]	; (1fdfc <prvCheckForValidListAndQueue+0x58>)
   1fdbe:	0018      	movs	r0, r3
   1fdc0:	4b0d      	ldr	r3, [pc, #52]	; (1fdf8 <prvCheckForValidListAndQueue+0x54>)
   1fdc2:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1fdc4:	4b0e      	ldr	r3, [pc, #56]	; (1fe00 <prvCheckForValidListAndQueue+0x5c>)
   1fdc6:	4a0b      	ldr	r2, [pc, #44]	; (1fdf4 <prvCheckForValidListAndQueue+0x50>)
   1fdc8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1fdca:	4b0e      	ldr	r3, [pc, #56]	; (1fe04 <prvCheckForValidListAndQueue+0x60>)
   1fdcc:	4a0b      	ldr	r2, [pc, #44]	; (1fdfc <prvCheckForValidListAndQueue+0x58>)
   1fdce:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1fdd0:	2200      	movs	r2, #0
   1fdd2:	210c      	movs	r1, #12
   1fdd4:	2005      	movs	r0, #5
   1fdd6:	4b0c      	ldr	r3, [pc, #48]	; (1fe08 <prvCheckForValidListAndQueue+0x64>)
   1fdd8:	4798      	blx	r3
   1fdda:	0002      	movs	r2, r0
   1fddc:	4b04      	ldr	r3, [pc, #16]	; (1fdf0 <prvCheckForValidListAndQueue+0x4c>)
   1fdde:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1fde0:	4b0a      	ldr	r3, [pc, #40]	; (1fe0c <prvCheckForValidListAndQueue+0x68>)
   1fde2:	4798      	blx	r3
}
   1fde4:	46c0      	nop			; (mov r8, r8)
   1fde6:	46bd      	mov	sp, r7
   1fde8:	bd80      	pop	{r7, pc}
   1fdea:	46c0      	nop			; (mov r8, r8)
   1fdec:	0001c599 	.word	0x0001c599
   1fdf0:	200040b4 	.word	0x200040b4
   1fdf4:	20004084 	.word	0x20004084
   1fdf8:	0001c305 	.word	0x0001c305
   1fdfc:	20004098 	.word	0x20004098
   1fe00:	200040ac 	.word	0x200040ac
   1fe04:	200040b0 	.word	0x200040b0
   1fe08:	0001c885 	.word	0x0001c885
   1fe0c:	0001c5bd 	.word	0x0001c5bd

0001fe10 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1fe10:	b580      	push	{r7, lr}
   1fe12:	b082      	sub	sp, #8
   1fe14:	af00      	add	r7, sp, #0
   1fe16:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1fe18:	687b      	ldr	r3, [r7, #4]
   1fe1a:	7c1b      	ldrb	r3, [r3, #16]
   1fe1c:	2b00      	cmp	r3, #0
   1fe1e:	d00b      	beq.n	1fe38 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1fe20:	687b      	ldr	r3, [r7, #4]
   1fe22:	689b      	ldr	r3, [r3, #8]
   1fe24:	1c5a      	adds	r2, r3, #1
   1fe26:	687b      	ldr	r3, [r7, #4]
   1fe28:	68d9      	ldr	r1, [r3, #12]
   1fe2a:	4b10      	ldr	r3, [pc, #64]	; (1fe6c <advance_pointer+0x5c>)
   1fe2c:	0010      	movs	r0, r2
   1fe2e:	4798      	blx	r3
   1fe30:	000b      	movs	r3, r1
   1fe32:	001a      	movs	r2, r3
   1fe34:	687b      	ldr	r3, [r7, #4]
   1fe36:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1fe38:	687b      	ldr	r3, [r7, #4]
   1fe3a:	685b      	ldr	r3, [r3, #4]
   1fe3c:	1c5a      	adds	r2, r3, #1
   1fe3e:	687b      	ldr	r3, [r7, #4]
   1fe40:	68d9      	ldr	r1, [r3, #12]
   1fe42:	4b0a      	ldr	r3, [pc, #40]	; (1fe6c <advance_pointer+0x5c>)
   1fe44:	0010      	movs	r0, r2
   1fe46:	4798      	blx	r3
   1fe48:	000b      	movs	r3, r1
   1fe4a:	001a      	movs	r2, r3
   1fe4c:	687b      	ldr	r3, [r7, #4]
   1fe4e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1fe50:	687b      	ldr	r3, [r7, #4]
   1fe52:	685a      	ldr	r2, [r3, #4]
   1fe54:	687b      	ldr	r3, [r7, #4]
   1fe56:	689b      	ldr	r3, [r3, #8]
   1fe58:	1ad3      	subs	r3, r2, r3
   1fe5a:	425a      	negs	r2, r3
   1fe5c:	4153      	adcs	r3, r2
   1fe5e:	b2da      	uxtb	r2, r3
   1fe60:	687b      	ldr	r3, [r7, #4]
   1fe62:	741a      	strb	r2, [r3, #16]
 }
   1fe64:	46c0      	nop			; (mov r8, r8)
   1fe66:	46bd      	mov	sp, r7
   1fe68:	b002      	add	sp, #8
   1fe6a:	bd80      	pop	{r7, pc}
   1fe6c:	00034f21 	.word	0x00034f21

0001fe70 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1fe70:	b580      	push	{r7, lr}
   1fe72:	b082      	sub	sp, #8
   1fe74:	af00      	add	r7, sp, #0
   1fe76:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1fe78:	687b      	ldr	r3, [r7, #4]
   1fe7a:	2200      	movs	r2, #0
   1fe7c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1fe7e:	687b      	ldr	r3, [r7, #4]
   1fe80:	689b      	ldr	r3, [r3, #8]
   1fe82:	1c5a      	adds	r2, r3, #1
   1fe84:	687b      	ldr	r3, [r7, #4]
   1fe86:	68d9      	ldr	r1, [r3, #12]
   1fe88:	4b05      	ldr	r3, [pc, #20]	; (1fea0 <retreat_pointer+0x30>)
   1fe8a:	0010      	movs	r0, r2
   1fe8c:	4798      	blx	r3
   1fe8e:	000b      	movs	r3, r1
   1fe90:	001a      	movs	r2, r3
   1fe92:	687b      	ldr	r3, [r7, #4]
   1fe94:	609a      	str	r2, [r3, #8]
 }
   1fe96:	46c0      	nop			; (mov r8, r8)
   1fe98:	46bd      	mov	sp, r7
   1fe9a:	b002      	add	sp, #8
   1fe9c:	bd80      	pop	{r7, pc}
   1fe9e:	46c0      	nop			; (mov r8, r8)
   1fea0:	00034f21 	.word	0x00034f21

0001fea4 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1fea4:	b580      	push	{r7, lr}
   1fea6:	b084      	sub	sp, #16
   1fea8:	af00      	add	r7, sp, #0
   1feaa:	6078      	str	r0, [r7, #4]
   1feac:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1feae:	2014      	movs	r0, #20
   1feb0:	4b09      	ldr	r3, [pc, #36]	; (1fed8 <circular_buf_init+0x34>)
   1feb2:	4798      	blx	r3
   1feb4:	0003      	movs	r3, r0
   1feb6:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1feb8:	68fb      	ldr	r3, [r7, #12]
   1feba:	687a      	ldr	r2, [r7, #4]
   1febc:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1febe:	68fb      	ldr	r3, [r7, #12]
   1fec0:	683a      	ldr	r2, [r7, #0]
   1fec2:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1fec4:	68fb      	ldr	r3, [r7, #12]
   1fec6:	0018      	movs	r0, r3
   1fec8:	4b04      	ldr	r3, [pc, #16]	; (1fedc <circular_buf_init+0x38>)
   1feca:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1fecc:	68fb      	ldr	r3, [r7, #12]
 }
   1fece:	0018      	movs	r0, r3
   1fed0:	46bd      	mov	sp, r7
   1fed2:	b004      	add	sp, #16
   1fed4:	bd80      	pop	{r7, pc}
   1fed6:	46c0      	nop			; (mov r8, r8)
   1fed8:	000378ed 	.word	0x000378ed
   1fedc:	0001fee1 	.word	0x0001fee1

0001fee0 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1fee0:	b580      	push	{r7, lr}
   1fee2:	b082      	sub	sp, #8
   1fee4:	af00      	add	r7, sp, #0
   1fee6:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1fee8:	687b      	ldr	r3, [r7, #4]
   1feea:	2200      	movs	r2, #0
   1feec:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1feee:	687b      	ldr	r3, [r7, #4]
   1fef0:	2200      	movs	r2, #0
   1fef2:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1fef4:	687b      	ldr	r3, [r7, #4]
   1fef6:	2200      	movs	r2, #0
   1fef8:	741a      	strb	r2, [r3, #16]
 }
   1fefa:	46c0      	nop			; (mov r8, r8)
   1fefc:	46bd      	mov	sp, r7
   1fefe:	b002      	add	sp, #8
   1ff00:	bd80      	pop	{r7, pc}
	...

0001ff04 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1ff04:	b580      	push	{r7, lr}
   1ff06:	b082      	sub	sp, #8
   1ff08:	af00      	add	r7, sp, #0
   1ff0a:	6078      	str	r0, [r7, #4]
   1ff0c:	000a      	movs	r2, r1
   1ff0e:	1cfb      	adds	r3, r7, #3
   1ff10:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1ff12:	687b      	ldr	r3, [r7, #4]
   1ff14:	681a      	ldr	r2, [r3, #0]
   1ff16:	687b      	ldr	r3, [r7, #4]
   1ff18:	685b      	ldr	r3, [r3, #4]
   1ff1a:	18d3      	adds	r3, r2, r3
   1ff1c:	1cfa      	adds	r2, r7, #3
   1ff1e:	7812      	ldrb	r2, [r2, #0]
   1ff20:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1ff22:	687b      	ldr	r3, [r7, #4]
   1ff24:	0018      	movs	r0, r3
   1ff26:	4b03      	ldr	r3, [pc, #12]	; (1ff34 <circular_buf_put+0x30>)
   1ff28:	4798      	blx	r3
 }
   1ff2a:	46c0      	nop			; (mov r8, r8)
   1ff2c:	46bd      	mov	sp, r7
   1ff2e:	b002      	add	sp, #8
   1ff30:	bd80      	pop	{r7, pc}
   1ff32:	46c0      	nop			; (mov r8, r8)
   1ff34:	0001fe11 	.word	0x0001fe11

0001ff38 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1ff38:	b580      	push	{r7, lr}
   1ff3a:	b084      	sub	sp, #16
   1ff3c:	af00      	add	r7, sp, #0
   1ff3e:	6078      	str	r0, [r7, #4]
   1ff40:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1ff42:	2301      	movs	r3, #1
   1ff44:	425b      	negs	r3, r3
   1ff46:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1ff48:	687b      	ldr	r3, [r7, #4]
   1ff4a:	0018      	movs	r0, r3
   1ff4c:	4b0d      	ldr	r3, [pc, #52]	; (1ff84 <circular_buf_get+0x4c>)
   1ff4e:	4798      	blx	r3
   1ff50:	0003      	movs	r3, r0
   1ff52:	001a      	movs	r2, r3
   1ff54:	2301      	movs	r3, #1
   1ff56:	4053      	eors	r3, r2
   1ff58:	b2db      	uxtb	r3, r3
   1ff5a:	2b00      	cmp	r3, #0
   1ff5c:	d00d      	beq.n	1ff7a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1ff5e:	687b      	ldr	r3, [r7, #4]
   1ff60:	681a      	ldr	r2, [r3, #0]
   1ff62:	687b      	ldr	r3, [r7, #4]
   1ff64:	689b      	ldr	r3, [r3, #8]
   1ff66:	18d3      	adds	r3, r2, r3
   1ff68:	781a      	ldrb	r2, [r3, #0]
   1ff6a:	683b      	ldr	r3, [r7, #0]
   1ff6c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1ff6e:	687b      	ldr	r3, [r7, #4]
   1ff70:	0018      	movs	r0, r3
   1ff72:	4b05      	ldr	r3, [pc, #20]	; (1ff88 <circular_buf_get+0x50>)
   1ff74:	4798      	blx	r3

		 r = 0;
   1ff76:	2300      	movs	r3, #0
   1ff78:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1ff7a:	68fb      	ldr	r3, [r7, #12]
 }
   1ff7c:	0018      	movs	r0, r3
   1ff7e:	46bd      	mov	sp, r7
   1ff80:	b004      	add	sp, #16
   1ff82:	bd80      	pop	{r7, pc}
   1ff84:	0001ff8d 	.word	0x0001ff8d
   1ff88:	0001fe71 	.word	0x0001fe71

0001ff8c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1ff8c:	b580      	push	{r7, lr}
   1ff8e:	b082      	sub	sp, #8
   1ff90:	af00      	add	r7, sp, #0
   1ff92:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1ff94:	687b      	ldr	r3, [r7, #4]
   1ff96:	7c1b      	ldrb	r3, [r3, #16]
   1ff98:	2201      	movs	r2, #1
   1ff9a:	4053      	eors	r3, r2
   1ff9c:	b2db      	uxtb	r3, r3
   1ff9e:	2b00      	cmp	r3, #0
   1ffa0:	d007      	beq.n	1ffb2 <circular_buf_empty+0x26>
   1ffa2:	687b      	ldr	r3, [r7, #4]
   1ffa4:	685a      	ldr	r2, [r3, #4]
   1ffa6:	687b      	ldr	r3, [r7, #4]
   1ffa8:	689b      	ldr	r3, [r3, #8]
   1ffaa:	429a      	cmp	r2, r3
   1ffac:	d101      	bne.n	1ffb2 <circular_buf_empty+0x26>
   1ffae:	2301      	movs	r3, #1
   1ffb0:	e000      	b.n	1ffb4 <circular_buf_empty+0x28>
   1ffb2:	2300      	movs	r3, #0
   1ffb4:	1c1a      	adds	r2, r3, #0
   1ffb6:	2301      	movs	r3, #1
   1ffb8:	4013      	ands	r3, r2
   1ffba:	b2db      	uxtb	r3, r3
 }
   1ffbc:	0018      	movs	r0, r3
   1ffbe:	46bd      	mov	sp, r7
   1ffc0:	b002      	add	sp, #8
   1ffc2:	bd80      	pop	{r7, pc}

0001ffc4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   1ffc4:	b580      	push	{r7, lr}
   1ffc6:	b082      	sub	sp, #8
   1ffc8:	af00      	add	r7, sp, #0
   1ffca:	0002      	movs	r2, r0
   1ffcc:	1dfb      	adds	r3, r7, #7
   1ffce:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1ffd0:	4b06      	ldr	r3, [pc, #24]	; (1ffec <system_interrupt_enable+0x28>)
   1ffd2:	1dfa      	adds	r2, r7, #7
   1ffd4:	7812      	ldrb	r2, [r2, #0]
   1ffd6:	0011      	movs	r1, r2
   1ffd8:	221f      	movs	r2, #31
   1ffda:	400a      	ands	r2, r1
   1ffdc:	2101      	movs	r1, #1
   1ffde:	4091      	lsls	r1, r2
   1ffe0:	000a      	movs	r2, r1
   1ffe2:	601a      	str	r2, [r3, #0]
}
   1ffe4:	46c0      	nop			; (mov r8, r8)
   1ffe6:	46bd      	mov	sp, r7
   1ffe8:	b002      	add	sp, #8
   1ffea:	bd80      	pop	{r7, pc}
   1ffec:	e000e100 	.word	0xe000e100

0001fff0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1fff0:	b580      	push	{r7, lr}
   1fff2:	b084      	sub	sp, #16
   1fff4:	af00      	add	r7, sp, #0
   1fff6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1fff8:	687b      	ldr	r3, [r7, #4]
   1fffa:	681b      	ldr	r3, [r3, #0]
   1fffc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1fffe:	68fb      	ldr	r3, [r7, #12]
   20000:	69db      	ldr	r3, [r3, #28]
   20002:	1e5a      	subs	r2, r3, #1
   20004:	4193      	sbcs	r3, r2
   20006:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   20008:	0018      	movs	r0, r3
   2000a:	46bd      	mov	sp, r7
   2000c:	b004      	add	sp, #16
   2000e:	bd80      	pop	{r7, pc}

00020010 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   20010:	b580      	push	{r7, lr}
   20012:	b082      	sub	sp, #8
   20014:	af00      	add	r7, sp, #0
   20016:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   20018:	46c0      	nop			; (mov r8, r8)
   2001a:	687b      	ldr	r3, [r7, #4]
   2001c:	0018      	movs	r0, r3
   2001e:	4b04      	ldr	r3, [pc, #16]	; (20030 <_usart_wait_for_sync+0x20>)
   20020:	4798      	blx	r3
   20022:	1e03      	subs	r3, r0, #0
   20024:	d1f9      	bne.n	2001a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   20026:	46c0      	nop			; (mov r8, r8)
   20028:	46bd      	mov	sp, r7
   2002a:	b002      	add	sp, #8
   2002c:	bd80      	pop	{r7, pc}
   2002e:	46c0      	nop			; (mov r8, r8)
   20030:	0001fff1 	.word	0x0001fff1

00020034 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   20034:	b580      	push	{r7, lr}
   20036:	b082      	sub	sp, #8
   20038:	af00      	add	r7, sp, #0
   2003a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   2003c:	687b      	ldr	r3, [r7, #4]
   2003e:	2280      	movs	r2, #128	; 0x80
   20040:	05d2      	lsls	r2, r2, #23
   20042:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   20044:	687b      	ldr	r3, [r7, #4]
   20046:	2200      	movs	r2, #0
   20048:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   2004a:	687b      	ldr	r3, [r7, #4]
   2004c:	22ff      	movs	r2, #255	; 0xff
   2004e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   20050:	687b      	ldr	r3, [r7, #4]
   20052:	2200      	movs	r2, #0
   20054:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   20056:	687b      	ldr	r3, [r7, #4]
   20058:	2200      	movs	r2, #0
   2005a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   2005c:	687b      	ldr	r3, [r7, #4]
   2005e:	2296      	movs	r2, #150	; 0x96
   20060:	0192      	lsls	r2, r2, #6
   20062:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   20064:	687b      	ldr	r3, [r7, #4]
   20066:	2224      	movs	r2, #36	; 0x24
   20068:	2101      	movs	r1, #1
   2006a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   2006c:	687b      	ldr	r3, [r7, #4]
   2006e:	2225      	movs	r2, #37	; 0x25
   20070:	2101      	movs	r1, #1
   20072:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   20074:	687b      	ldr	r3, [r7, #4]
   20076:	2226      	movs	r2, #38	; 0x26
   20078:	2100      	movs	r1, #0
   2007a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   2007c:	687b      	ldr	r3, [r7, #4]
   2007e:	2227      	movs	r2, #39	; 0x27
   20080:	2100      	movs	r1, #0
   20082:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   20084:	687b      	ldr	r3, [r7, #4]
   20086:	2200      	movs	r2, #0
   20088:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   2008a:	687b      	ldr	r3, [r7, #4]
   2008c:	2288      	movs	r2, #136	; 0x88
   2008e:	0352      	lsls	r2, r2, #13
   20090:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   20092:	687b      	ldr	r3, [r7, #4]
   20094:	222c      	movs	r2, #44	; 0x2c
   20096:	2100      	movs	r1, #0
   20098:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   2009a:	687b      	ldr	r3, [r7, #4]
   2009c:	222d      	movs	r2, #45	; 0x2d
   2009e:	2100      	movs	r1, #0
   200a0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   200a2:	687b      	ldr	r3, [r7, #4]
   200a4:	2200      	movs	r2, #0
   200a6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   200a8:	687b      	ldr	r3, [r7, #4]
   200aa:	2200      	movs	r2, #0
   200ac:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   200ae:	687b      	ldr	r3, [r7, #4]
   200b0:	2200      	movs	r2, #0
   200b2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   200b4:	687b      	ldr	r3, [r7, #4]
   200b6:	2200      	movs	r2, #0
   200b8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   200ba:	687b      	ldr	r3, [r7, #4]
   200bc:	2200      	movs	r2, #0
   200be:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   200c0:	687b      	ldr	r3, [r7, #4]
   200c2:	2200      	movs	r2, #0
   200c4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   200c6:	687b      	ldr	r3, [r7, #4]
   200c8:	2200      	movs	r2, #0
   200ca:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   200cc:	687b      	ldr	r3, [r7, #4]
   200ce:	2200      	movs	r2, #0
   200d0:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   200d2:	687b      	ldr	r3, [r7, #4]
   200d4:	2200      	movs	r2, #0
   200d6:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   200d8:	687b      	ldr	r3, [r7, #4]
   200da:	2200      	movs	r2, #0
   200dc:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   200de:	687b      	ldr	r3, [r7, #4]
   200e0:	2213      	movs	r2, #19
   200e2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   200e4:	687b      	ldr	r3, [r7, #4]
   200e6:	2200      	movs	r2, #0
   200e8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   200ea:	46c0      	nop			; (mov r8, r8)
   200ec:	46bd      	mov	sp, r7
   200ee:	b002      	add	sp, #8
   200f0:	bd80      	pop	{r7, pc}
	...

000200f4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   200f4:	b580      	push	{r7, lr}
   200f6:	b084      	sub	sp, #16
   200f8:	af00      	add	r7, sp, #0
   200fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   200fc:	687b      	ldr	r3, [r7, #4]
   200fe:	681b      	ldr	r3, [r3, #0]
   20100:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   20102:	687b      	ldr	r3, [r7, #4]
   20104:	681b      	ldr	r3, [r3, #0]
   20106:	0018      	movs	r0, r3
   20108:	4b09      	ldr	r3, [pc, #36]	; (20130 <usart_enable+0x3c>)
   2010a:	4798      	blx	r3
   2010c:	0003      	movs	r3, r0
   2010e:	0018      	movs	r0, r3
   20110:	4b08      	ldr	r3, [pc, #32]	; (20134 <usart_enable+0x40>)
   20112:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   20114:	687b      	ldr	r3, [r7, #4]
   20116:	0018      	movs	r0, r3
   20118:	4b07      	ldr	r3, [pc, #28]	; (20138 <usart_enable+0x44>)
   2011a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   2011c:	68fb      	ldr	r3, [r7, #12]
   2011e:	681b      	ldr	r3, [r3, #0]
   20120:	2202      	movs	r2, #2
   20122:	431a      	orrs	r2, r3
   20124:	68fb      	ldr	r3, [r7, #12]
   20126:	601a      	str	r2, [r3, #0]
}
   20128:	46c0      	nop			; (mov r8, r8)
   2012a:	46bd      	mov	sp, r7
   2012c:	b004      	add	sp, #16
   2012e:	bd80      	pop	{r7, pc}
   20130:	00029a85 	.word	0x00029a85
   20134:	0001ffc5 	.word	0x0001ffc5
   20138:	00020011 	.word	0x00020011

0002013c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   2013c:	b580      	push	{r7, lr}
   2013e:	b082      	sub	sp, #8
   20140:	af00      	add	r7, sp, #0
   20142:	6078      	str	r0, [r7, #4]
   20144:	000a      	movs	r2, r1
   20146:	1cfb      	adds	r3, r7, #3
   20148:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   2014a:	687b      	ldr	r3, [r7, #4]
   2014c:	2231      	movs	r2, #49	; 0x31
   2014e:	5c9b      	ldrb	r3, [r3, r2]
   20150:	b25a      	sxtb	r2, r3
   20152:	1cfb      	adds	r3, r7, #3
   20154:	781b      	ldrb	r3, [r3, #0]
   20156:	2101      	movs	r1, #1
   20158:	4099      	lsls	r1, r3
   2015a:	000b      	movs	r3, r1
   2015c:	b25b      	sxtb	r3, r3
   2015e:	4313      	orrs	r3, r2
   20160:	b25b      	sxtb	r3, r3
   20162:	b2d9      	uxtb	r1, r3
   20164:	687b      	ldr	r3, [r7, #4]
   20166:	2231      	movs	r2, #49	; 0x31
   20168:	5499      	strb	r1, [r3, r2]

}
   2016a:	46c0      	nop			; (mov r8, r8)
   2016c:	46bd      	mov	sp, r7
   2016e:	b002      	add	sp, #8
   20170:	bd80      	pop	{r7, pc}
	...

00020174 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   20174:	b580      	push	{r7, lr}
   20176:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   20178:	2380      	movs	r3, #128	; 0x80
   2017a:	009a      	lsls	r2, r3, #2
   2017c:	4b0f      	ldr	r3, [pc, #60]	; (201bc <InitializeSerialConsole+0x48>)
   2017e:	0011      	movs	r1, r2
   20180:	0018      	movs	r0, r3
   20182:	4b0f      	ldr	r3, [pc, #60]	; (201c0 <InitializeSerialConsole+0x4c>)
   20184:	4798      	blx	r3
   20186:	0002      	movs	r2, r0
   20188:	4b0e      	ldr	r3, [pc, #56]	; (201c4 <InitializeSerialConsole+0x50>)
   2018a:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   2018c:	2380      	movs	r3, #128	; 0x80
   2018e:	009a      	lsls	r2, r3, #2
   20190:	4b0d      	ldr	r3, [pc, #52]	; (201c8 <InitializeSerialConsole+0x54>)
   20192:	0011      	movs	r1, r2
   20194:	0018      	movs	r0, r3
   20196:	4b0a      	ldr	r3, [pc, #40]	; (201c0 <InitializeSerialConsole+0x4c>)
   20198:	4798      	blx	r3
   2019a:	0002      	movs	r2, r0
   2019c:	4b0b      	ldr	r3, [pc, #44]	; (201cc <InitializeSerialConsole+0x58>)
   2019e:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   201a0:	4b0b      	ldr	r3, [pc, #44]	; (201d0 <InitializeSerialConsole+0x5c>)
   201a2:	4798      	blx	r3
    configure_usart_callbacks();
   201a4:	4b0b      	ldr	r3, [pc, #44]	; (201d4 <InitializeSerialConsole+0x60>)
   201a6:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   201a8:	490b      	ldr	r1, [pc, #44]	; (201d8 <InitializeSerialConsole+0x64>)
   201aa:	4b0c      	ldr	r3, [pc, #48]	; (201dc <InitializeSerialConsole+0x68>)
   201ac:	2201      	movs	r2, #1
   201ae:	0018      	movs	r0, r3
   201b0:	4b0b      	ldr	r3, [pc, #44]	; (201e0 <InitializeSerialConsole+0x6c>)
   201b2:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   201b4:	46c0      	nop			; (mov r8, r8)
   201b6:	46bd      	mov	sp, r7
   201b8:	bd80      	pop	{r7, pc}
   201ba:	46c0      	nop			; (mov r8, r8)
   201bc:	20005738 	.word	0x20005738
   201c0:	0001fea5 	.word	0x0001fea5
   201c4:	20005530 	.word	0x20005530
   201c8:	20005538 	.word	0x20005538
   201cc:	2000593c 	.word	0x2000593c
   201d0:	00020349 	.word	0x00020349
   201d4:	000203c1 	.word	0x000203c1
   201d8:	20005534 	.word	0x20005534
   201dc:	200054fc 	.word	0x200054fc
   201e0:	0002b389 	.word	0x0002b389

000201e4 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   201e4:	b580      	push	{r7, lr}
   201e6:	b084      	sub	sp, #16
   201e8:	af00      	add	r7, sp, #0
   201ea:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   201ec:	4b1a      	ldr	r3, [pc, #104]	; (20258 <SerialConsoleWriteString+0x74>)
   201ee:	4798      	blx	r3
    if (string != NULL) {
   201f0:	687b      	ldr	r3, [r7, #4]
   201f2:	2b00      	cmp	r3, #0
   201f4:	d02a      	beq.n	2024c <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   201f6:	2300      	movs	r3, #0
   201f8:	60fb      	str	r3, [r7, #12]
   201fa:	e00b      	b.n	20214 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   201fc:	4b17      	ldr	r3, [pc, #92]	; (2025c <SerialConsoleWriteString+0x78>)
   201fe:	6818      	ldr	r0, [r3, #0]
   20200:	687a      	ldr	r2, [r7, #4]
   20202:	68fb      	ldr	r3, [r7, #12]
   20204:	18d3      	adds	r3, r2, r3
   20206:	781b      	ldrb	r3, [r3, #0]
   20208:	0019      	movs	r1, r3
   2020a:	4b15      	ldr	r3, [pc, #84]	; (20260 <SerialConsoleWriteString+0x7c>)
   2020c:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   2020e:	68fb      	ldr	r3, [r7, #12]
   20210:	3301      	adds	r3, #1
   20212:	60fb      	str	r3, [r7, #12]
   20214:	687b      	ldr	r3, [r7, #4]
   20216:	0018      	movs	r0, r3
   20218:	4b12      	ldr	r3, [pc, #72]	; (20264 <SerialConsoleWriteString+0x80>)
   2021a:	4798      	blx	r3
   2021c:	0002      	movs	r2, r0
   2021e:	68fb      	ldr	r3, [r7, #12]
   20220:	429a      	cmp	r2, r3
   20222:	d8eb      	bhi.n	201fc <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   20224:	4b10      	ldr	r3, [pc, #64]	; (20268 <SerialConsoleWriteString+0x84>)
   20226:	2101      	movs	r1, #1
   20228:	0018      	movs	r0, r3
   2022a:	4b10      	ldr	r3, [pc, #64]	; (2026c <SerialConsoleWriteString+0x88>)
   2022c:	4798      	blx	r3
   2022e:	1e03      	subs	r3, r0, #0
   20230:	d10c      	bne.n	2024c <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   20232:	4b0a      	ldr	r3, [pc, #40]	; (2025c <SerialConsoleWriteString+0x78>)
   20234:	681b      	ldr	r3, [r3, #0]
   20236:	4a0e      	ldr	r2, [pc, #56]	; (20270 <SerialConsoleWriteString+0x8c>)
   20238:	0011      	movs	r1, r2
   2023a:	0018      	movs	r0, r3
   2023c:	4b0d      	ldr	r3, [pc, #52]	; (20274 <SerialConsoleWriteString+0x90>)
   2023e:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   20240:	490b      	ldr	r1, [pc, #44]	; (20270 <SerialConsoleWriteString+0x8c>)
   20242:	4b09      	ldr	r3, [pc, #36]	; (20268 <SerialConsoleWriteString+0x84>)
   20244:	2201      	movs	r2, #1
   20246:	0018      	movs	r0, r3
   20248:	4b0b      	ldr	r3, [pc, #44]	; (20278 <SerialConsoleWriteString+0x94>)
   2024a:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   2024c:	4b0b      	ldr	r3, [pc, #44]	; (2027c <SerialConsoleWriteString+0x98>)
   2024e:	4798      	blx	r3
}
   20250:	46c0      	nop			; (mov r8, r8)
   20252:	46bd      	mov	sp, r7
   20254:	b004      	add	sp, #16
   20256:	bd80      	pop	{r7, pc}
   20258:	0001e851 	.word	0x0001e851
   2025c:	2000593c 	.word	0x2000593c
   20260:	0001ff05 	.word	0x0001ff05
   20264:	00037d03 	.word	0x00037d03
   20268:	200054fc 	.word	0x200054fc
   2026c:	0002b3d1 	.word	0x0002b3d1
   20270:	20005938 	.word	0x20005938
   20274:	0001ff39 	.word	0x0001ff39
   20278:	0002b341 	.word	0x0002b341
   2027c:	0001e869 	.word	0x0001e869

00020280 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   20280:	b580      	push	{r7, lr}
   20282:	b084      	sub	sp, #16
   20284:	af00      	add	r7, sp, #0
   20286:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   20288:	4b08      	ldr	r3, [pc, #32]	; (202ac <SerialConsoleReadCharacter+0x2c>)
   2028a:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   2028c:	4b08      	ldr	r3, [pc, #32]	; (202b0 <SerialConsoleReadCharacter+0x30>)
   2028e:	681b      	ldr	r3, [r3, #0]
   20290:	687a      	ldr	r2, [r7, #4]
   20292:	0011      	movs	r1, r2
   20294:	0018      	movs	r0, r3
   20296:	4b07      	ldr	r3, [pc, #28]	; (202b4 <SerialConsoleReadCharacter+0x34>)
   20298:	4798      	blx	r3
   2029a:	0003      	movs	r3, r0
   2029c:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   2029e:	4b06      	ldr	r3, [pc, #24]	; (202b8 <SerialConsoleReadCharacter+0x38>)
   202a0:	4798      	blx	r3
    return a;
   202a2:	68fb      	ldr	r3, [r7, #12]
}
   202a4:	0018      	movs	r0, r3
   202a6:	46bd      	mov	sp, r7
   202a8:	b004      	add	sp, #16
   202aa:	bd80      	pop	{r7, pc}
   202ac:	0001e851 	.word	0x0001e851
   202b0:	20005530 	.word	0x20005530
   202b4:	0001ff39 	.word	0x0001ff39
   202b8:	0001e869 	.word	0x0001e869

000202bc <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   202bc:	b580      	push	{r7, lr}
   202be:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   202c0:	4b02      	ldr	r3, [pc, #8]	; (202cc <getLogLevel+0x10>)
   202c2:	781b      	ldrb	r3, [r3, #0]
}
   202c4:	0018      	movs	r0, r3
   202c6:	46bd      	mov	sp, r7
   202c8:	bd80      	pop	{r7, pc}
   202ca:	46c0      	nop			; (mov r8, r8)
   202cc:	200040c0 	.word	0x200040c0

000202d0 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   202d0:	b40e      	push	{r1, r2, r3}
   202d2:	b590      	push	{r4, r7, lr}
   202d4:	b084      	sub	sp, #16
   202d6:	af00      	add	r7, sp, #0
   202d8:	0002      	movs	r2, r0
   202da:	1dfb      	adds	r3, r7, #7
   202dc:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   202de:	4b0e      	ldr	r3, [pc, #56]	; (20318 <LogMessage+0x48>)
   202e0:	4798      	blx	r3
   202e2:	0003      	movs	r3, r0
   202e4:	001a      	movs	r2, r3
   202e6:	1dfb      	adds	r3, r7, #7
   202e8:	781b      	ldrb	r3, [r3, #0]
   202ea:	4293      	cmp	r3, r2
   202ec:	d30c      	bcc.n	20308 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   202ee:	2320      	movs	r3, #32
   202f0:	18fb      	adds	r3, r7, r3
   202f2:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   202f4:	68fb      	ldr	r3, [r7, #12]
   202f6:	69fa      	ldr	r2, [r7, #28]
   202f8:	4808      	ldr	r0, [pc, #32]	; (2031c <LogMessage+0x4c>)
   202fa:	217f      	movs	r1, #127	; 0x7f
   202fc:	4c08      	ldr	r4, [pc, #32]	; (20320 <LogMessage+0x50>)
   202fe:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   20300:	4b06      	ldr	r3, [pc, #24]	; (2031c <LogMessage+0x4c>)
   20302:	0018      	movs	r0, r3
   20304:	4b07      	ldr	r3, [pc, #28]	; (20324 <LogMessage+0x54>)
   20306:	4798      	blx	r3
        va_end(ap);
    }
};
   20308:	46c0      	nop			; (mov r8, r8)
   2030a:	46bd      	mov	sp, r7
   2030c:	b004      	add	sp, #16
   2030e:	bc90      	pop	{r4, r7}
   20310:	bc08      	pop	{r3}
   20312:	b003      	add	sp, #12
   20314:	4718      	bx	r3
   20316:	46c0      	nop			; (mov r8, r8)
   20318:	000202bd 	.word	0x000202bd
   2031c:	2000547c 	.word	0x2000547c
   20320:	00037f3d 	.word	0x00037f3d
   20324:	000201e5 	.word	0x000201e5

00020328 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   20328:	b40f      	push	{r0, r1, r2, r3}
   2032a:	b580      	push	{r7, lr}
   2032c:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   2032e:	68bb      	ldr	r3, [r7, #8]
   20330:	0019      	movs	r1, r3
   20332:	2001      	movs	r0, #1
   20334:	4b03      	ldr	r3, [pc, #12]	; (20344 <LogMessageDebug+0x1c>)
   20336:	4798      	blx	r3
};
   20338:	46c0      	nop			; (mov r8, r8)
   2033a:	46bd      	mov	sp, r7
   2033c:	bc80      	pop	{r7}
   2033e:	bc08      	pop	{r3}
   20340:	b004      	add	sp, #16
   20342:	4718      	bx	r3
   20344:	000202d1 	.word	0x000202d1

00020348 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   20348:	b580      	push	{r7, lr}
   2034a:	b090      	sub	sp, #64	; 0x40
   2034c:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   2034e:	003b      	movs	r3, r7
   20350:	0018      	movs	r0, r3
   20352:	4b14      	ldr	r3, [pc, #80]	; (203a4 <configure_usart+0x5c>)
   20354:	4798      	blx	r3

    config_usart.baudrate = 115200;
   20356:	003b      	movs	r3, r7
   20358:	22e1      	movs	r2, #225	; 0xe1
   2035a:	0252      	lsls	r2, r2, #9
   2035c:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   2035e:	003b      	movs	r3, r7
   20360:	22c4      	movs	r2, #196	; 0xc4
   20362:	0392      	lsls	r2, r2, #14
   20364:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   20366:	003b      	movs	r3, r7
   20368:	2201      	movs	r2, #1
   2036a:	4252      	negs	r2, r2
   2036c:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   2036e:	003b      	movs	r3, r7
   20370:	2201      	movs	r2, #1
   20372:	4252      	negs	r2, r2
   20374:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   20376:	003b      	movs	r3, r7
   20378:	4a0b      	ldr	r2, [pc, #44]	; (203a8 <configure_usart+0x60>)
   2037a:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   2037c:	003b      	movs	r3, r7
   2037e:	4a0b      	ldr	r2, [pc, #44]	; (203ac <configure_usart+0x64>)
   20380:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   20382:	46c0      	nop			; (mov r8, r8)
   20384:	003a      	movs	r2, r7
   20386:	490a      	ldr	r1, [pc, #40]	; (203b0 <configure_usart+0x68>)
   20388:	4b0a      	ldr	r3, [pc, #40]	; (203b4 <configure_usart+0x6c>)
   2038a:	0018      	movs	r0, r3
   2038c:	4b0a      	ldr	r3, [pc, #40]	; (203b8 <configure_usart+0x70>)
   2038e:	4798      	blx	r3
   20390:	1e03      	subs	r3, r0, #0
   20392:	d1f7      	bne.n	20384 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   20394:	4b07      	ldr	r3, [pc, #28]	; (203b4 <configure_usart+0x6c>)
   20396:	0018      	movs	r0, r3
   20398:	4b08      	ldr	r3, [pc, #32]	; (203bc <configure_usart+0x74>)
   2039a:	4798      	blx	r3
}
   2039c:	46c0      	nop			; (mov r8, r8)
   2039e:	46bd      	mov	sp, r7
   203a0:	b010      	add	sp, #64	; 0x40
   203a2:	bd80      	pop	{r7, pc}
   203a4:	00020035 	.word	0x00020035
   203a8:	002a0003 	.word	0x002a0003
   203ac:	002b0003 	.word	0x002b0003
   203b0:	42001800 	.word	0x42001800
   203b4:	200054fc 	.word	0x200054fc
   203b8:	0002af45 	.word	0x0002af45
   203bc:	000200f5 	.word	0x000200f5

000203c0 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   203c0:	b580      	push	{r7, lr}
   203c2:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   203c4:	490c      	ldr	r1, [pc, #48]	; (203f8 <configure_usart_callbacks+0x38>)
   203c6:	4b0d      	ldr	r3, [pc, #52]	; (203fc <configure_usart_callbacks+0x3c>)
   203c8:	2200      	movs	r2, #0
   203ca:	0018      	movs	r0, r3
   203cc:	4b0c      	ldr	r3, [pc, #48]	; (20400 <configure_usart_callbacks+0x40>)
   203ce:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   203d0:	490c      	ldr	r1, [pc, #48]	; (20404 <configure_usart_callbacks+0x44>)
   203d2:	4b0a      	ldr	r3, [pc, #40]	; (203fc <configure_usart_callbacks+0x3c>)
   203d4:	2201      	movs	r2, #1
   203d6:	0018      	movs	r0, r3
   203d8:	4b09      	ldr	r3, [pc, #36]	; (20400 <configure_usart_callbacks+0x40>)
   203da:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   203dc:	4b07      	ldr	r3, [pc, #28]	; (203fc <configure_usart_callbacks+0x3c>)
   203de:	2100      	movs	r1, #0
   203e0:	0018      	movs	r0, r3
   203e2:	4b09      	ldr	r3, [pc, #36]	; (20408 <configure_usart_callbacks+0x48>)
   203e4:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   203e6:	4b05      	ldr	r3, [pc, #20]	; (203fc <configure_usart_callbacks+0x3c>)
   203e8:	2101      	movs	r1, #1
   203ea:	0018      	movs	r0, r3
   203ec:	4b06      	ldr	r3, [pc, #24]	; (20408 <configure_usart_callbacks+0x48>)
   203ee:	4798      	blx	r3
}
   203f0:	46c0      	nop			; (mov r8, r8)
   203f2:	46bd      	mov	sp, r7
   203f4:	bd80      	pop	{r7, pc}
   203f6:	46c0      	nop			; (mov r8, r8)
   203f8:	00020455 	.word	0x00020455
   203fc:	200054fc 	.word	0x200054fc
   20400:	0002b2f9 	.word	0x0002b2f9
   20404:	0002040d 	.word	0x0002040d
   20408:	0002013d 	.word	0x0002013d

0002040c <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   2040c:	b580      	push	{r7, lr}
   2040e:	b082      	sub	sp, #8
   20410:	af00      	add	r7, sp, #0
   20412:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   20414:	4b09      	ldr	r3, [pc, #36]	; (2043c <usart_read_callback+0x30>)
   20416:	681a      	ldr	r2, [r3, #0]
   20418:	4b09      	ldr	r3, [pc, #36]	; (20440 <usart_read_callback+0x34>)
   2041a:	781b      	ldrb	r3, [r3, #0]
   2041c:	0019      	movs	r1, r3
   2041e:	0010      	movs	r0, r2
   20420:	4b08      	ldr	r3, [pc, #32]	; (20444 <usart_read_callback+0x38>)
   20422:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   20424:	4906      	ldr	r1, [pc, #24]	; (20440 <usart_read_callback+0x34>)
   20426:	4b08      	ldr	r3, [pc, #32]	; (20448 <usart_read_callback+0x3c>)
   20428:	2201      	movs	r2, #1
   2042a:	0018      	movs	r0, r3
   2042c:	4b07      	ldr	r3, [pc, #28]	; (2044c <usart_read_callback+0x40>)
   2042e:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   20430:	4b07      	ldr	r3, [pc, #28]	; (20450 <usart_read_callback+0x44>)
   20432:	4798      	blx	r3
}
   20434:	46c0      	nop			; (mov r8, r8)
   20436:	46bd      	mov	sp, r7
   20438:	b002      	add	sp, #8
   2043a:	bd80      	pop	{r7, pc}
   2043c:	20005530 	.word	0x20005530
   20440:	20005534 	.word	0x20005534
   20444:	0001ff05 	.word	0x0001ff05
   20448:	200054fc 	.word	0x200054fc
   2044c:	0002b389 	.word	0x0002b389
   20450:	00014f89 	.word	0x00014f89

00020454 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   20454:	b580      	push	{r7, lr}
   20456:	b082      	sub	sp, #8
   20458:	af00      	add	r7, sp, #0
   2045a:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   2045c:	4b09      	ldr	r3, [pc, #36]	; (20484 <usart_write_callback+0x30>)
   2045e:	681b      	ldr	r3, [r3, #0]
   20460:	4a09      	ldr	r2, [pc, #36]	; (20488 <usart_write_callback+0x34>)
   20462:	0011      	movs	r1, r2
   20464:	0018      	movs	r0, r3
   20466:	4b09      	ldr	r3, [pc, #36]	; (2048c <usart_write_callback+0x38>)
   20468:	4798      	blx	r3
   2046a:	0003      	movs	r3, r0
   2046c:	3301      	adds	r3, #1
   2046e:	d005      	beq.n	2047c <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   20470:	4905      	ldr	r1, [pc, #20]	; (20488 <usart_write_callback+0x34>)
   20472:	4b07      	ldr	r3, [pc, #28]	; (20490 <usart_write_callback+0x3c>)
   20474:	2201      	movs	r2, #1
   20476:	0018      	movs	r0, r3
   20478:	4b06      	ldr	r3, [pc, #24]	; (20494 <usart_write_callback+0x40>)
   2047a:	4798      	blx	r3
    }
}
   2047c:	46c0      	nop			; (mov r8, r8)
   2047e:	46bd      	mov	sp, r7
   20480:	b002      	add	sp, #8
   20482:	bd80      	pop	{r7, pc}
   20484:	2000593c 	.word	0x2000593c
   20488:	20005938 	.word	0x20005938
   2048c:	0001ff39 	.word	0x0001ff39
   20490:	200054fc 	.word	0x200054fc
   20494:	0002b341 	.word	0x0002b341

00020498 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   20498:	b590      	push	{r4, r7, lr}
   2049a:	b087      	sub	sp, #28
   2049c:	af00      	add	r7, sp, #0
   2049e:	60f8      	str	r0, [r7, #12]
   204a0:	000c      	movs	r4, r1
   204a2:	0010      	movs	r0, r2
   204a4:	0019      	movs	r1, r3
   204a6:	230a      	movs	r3, #10
   204a8:	18fb      	adds	r3, r7, r3
   204aa:	1c22      	adds	r2, r4, #0
   204ac:	801a      	strh	r2, [r3, #0]
   204ae:	2308      	movs	r3, #8
   204b0:	18fb      	adds	r3, r7, r3
   204b2:	1c02      	adds	r2, r0, #0
   204b4:	801a      	strh	r2, [r3, #0]
   204b6:	1dfb      	adds	r3, r7, #7
   204b8:	1c0a      	adds	r2, r1, #0
   204ba:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   204bc:	230a      	movs	r3, #10
   204be:	18fb      	adds	r3, r7, r3
   204c0:	881a      	ldrh	r2, [r3, #0]
   204c2:	2308      	movs	r3, #8
   204c4:	18fb      	adds	r3, r7, r3
   204c6:	881b      	ldrh	r3, [r3, #0]
   204c8:	1ad3      	subs	r3, r2, r3
   204ca:	3307      	adds	r3, #7
   204cc:	2b00      	cmp	r3, #0
   204ce:	da00      	bge.n	204d2 <SDMMC_UNSTUFF_BITS+0x3a>
   204d0:	3307      	adds	r3, #7
   204d2:	10db      	asrs	r3, r3, #3
   204d4:	3b01      	subs	r3, #1
   204d6:	68fa      	ldr	r2, [r7, #12]
   204d8:	18d3      	adds	r3, r2, r3
   204da:	781b      	ldrb	r3, [r3, #0]
   204dc:	0019      	movs	r1, r3
   204de:	2308      	movs	r3, #8
   204e0:	18fb      	adds	r3, r7, r3
   204e2:	881b      	ldrh	r3, [r3, #0]
   204e4:	2207      	movs	r2, #7
   204e6:	4013      	ands	r3, r2
   204e8:	4119      	asrs	r1, r3
   204ea:	000b      	movs	r3, r1
   204ec:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   204ee:	2308      	movs	r3, #8
   204f0:	18fb      	adds	r3, r7, r3
   204f2:	881b      	ldrh	r3, [r3, #0]
   204f4:	2207      	movs	r2, #7
   204f6:	401a      	ands	r2, r3
   204f8:	1dfb      	adds	r3, r7, #7
   204fa:	781b      	ldrb	r3, [r3, #0]
   204fc:	18d3      	adds	r3, r2, r3
   204fe:	2b08      	cmp	r3, #8
   20500:	dd1c      	ble.n	2053c <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   20502:	230a      	movs	r3, #10
   20504:	18fb      	adds	r3, r7, r3
   20506:	881a      	ldrh	r2, [r3, #0]
   20508:	2308      	movs	r3, #8
   2050a:	18fb      	adds	r3, r7, r3
   2050c:	881b      	ldrh	r3, [r3, #0]
   2050e:	1ad3      	subs	r3, r2, r3
   20510:	3307      	adds	r3, #7
   20512:	2b00      	cmp	r3, #0
   20514:	da00      	bge.n	20518 <SDMMC_UNSTUFF_BITS+0x80>
   20516:	3307      	adds	r3, #7
   20518:	10db      	asrs	r3, r3, #3
   2051a:	3b02      	subs	r3, #2
   2051c:	68fa      	ldr	r2, [r7, #12]
   2051e:	18d3      	adds	r3, r2, r3
   20520:	781b      	ldrb	r3, [r3, #0]
   20522:	0019      	movs	r1, r3
   20524:	2308      	movs	r3, #8
   20526:	18fb      	adds	r3, r7, r3
   20528:	881b      	ldrh	r3, [r3, #0]
   2052a:	2207      	movs	r2, #7
   2052c:	4013      	ands	r3, r2
   2052e:	2208      	movs	r2, #8
   20530:	1ad3      	subs	r3, r2, r3
   20532:	4099      	lsls	r1, r3
   20534:	000b      	movs	r3, r1
   20536:	697a      	ldr	r2, [r7, #20]
   20538:	4313      	orrs	r3, r2
   2053a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   2053c:	2308      	movs	r3, #8
   2053e:	18fb      	adds	r3, r7, r3
   20540:	881b      	ldrh	r3, [r3, #0]
   20542:	2207      	movs	r2, #7
   20544:	401a      	ands	r2, r3
   20546:	1dfb      	adds	r3, r7, #7
   20548:	781b      	ldrb	r3, [r3, #0]
   2054a:	18d3      	adds	r3, r2, r3
   2054c:	2b10      	cmp	r3, #16
   2054e:	dd1c      	ble.n	2058a <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   20550:	230a      	movs	r3, #10
   20552:	18fb      	adds	r3, r7, r3
   20554:	881a      	ldrh	r2, [r3, #0]
   20556:	2308      	movs	r3, #8
   20558:	18fb      	adds	r3, r7, r3
   2055a:	881b      	ldrh	r3, [r3, #0]
   2055c:	1ad3      	subs	r3, r2, r3
   2055e:	3307      	adds	r3, #7
   20560:	2b00      	cmp	r3, #0
   20562:	da00      	bge.n	20566 <SDMMC_UNSTUFF_BITS+0xce>
   20564:	3307      	adds	r3, #7
   20566:	10db      	asrs	r3, r3, #3
   20568:	3b03      	subs	r3, #3
   2056a:	68fa      	ldr	r2, [r7, #12]
   2056c:	18d3      	adds	r3, r2, r3
   2056e:	781b      	ldrb	r3, [r3, #0]
   20570:	0019      	movs	r1, r3
   20572:	2308      	movs	r3, #8
   20574:	18fb      	adds	r3, r7, r3
   20576:	881b      	ldrh	r3, [r3, #0]
   20578:	2207      	movs	r2, #7
   2057a:	4013      	ands	r3, r2
   2057c:	2210      	movs	r2, #16
   2057e:	1ad3      	subs	r3, r2, r3
   20580:	4099      	lsls	r1, r3
   20582:	000b      	movs	r3, r1
   20584:	697a      	ldr	r2, [r7, #20]
   20586:	4313      	orrs	r3, r2
   20588:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   2058a:	2308      	movs	r3, #8
   2058c:	18fb      	adds	r3, r7, r3
   2058e:	881b      	ldrh	r3, [r3, #0]
   20590:	2207      	movs	r2, #7
   20592:	401a      	ands	r2, r3
   20594:	1dfb      	adds	r3, r7, #7
   20596:	781b      	ldrb	r3, [r3, #0]
   20598:	18d3      	adds	r3, r2, r3
   2059a:	2b10      	cmp	r3, #16
   2059c:	dd1c      	ble.n	205d8 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   2059e:	230a      	movs	r3, #10
   205a0:	18fb      	adds	r3, r7, r3
   205a2:	881a      	ldrh	r2, [r3, #0]
   205a4:	2308      	movs	r3, #8
   205a6:	18fb      	adds	r3, r7, r3
   205a8:	881b      	ldrh	r3, [r3, #0]
   205aa:	1ad3      	subs	r3, r2, r3
   205ac:	3307      	adds	r3, #7
   205ae:	2b00      	cmp	r3, #0
   205b0:	da00      	bge.n	205b4 <SDMMC_UNSTUFF_BITS+0x11c>
   205b2:	3307      	adds	r3, #7
   205b4:	10db      	asrs	r3, r3, #3
   205b6:	3b03      	subs	r3, #3
   205b8:	68fa      	ldr	r2, [r7, #12]
   205ba:	18d3      	adds	r3, r2, r3
   205bc:	781b      	ldrb	r3, [r3, #0]
   205be:	0019      	movs	r1, r3
   205c0:	2308      	movs	r3, #8
   205c2:	18fb      	adds	r3, r7, r3
   205c4:	881b      	ldrh	r3, [r3, #0]
   205c6:	2207      	movs	r2, #7
   205c8:	4013      	ands	r3, r2
   205ca:	2210      	movs	r2, #16
   205cc:	1ad3      	subs	r3, r2, r3
   205ce:	4099      	lsls	r1, r3
   205d0:	000b      	movs	r3, r1
   205d2:	697a      	ldr	r2, [r7, #20]
   205d4:	4313      	orrs	r3, r2
   205d6:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   205d8:	1dfb      	adds	r3, r7, #7
   205da:	781b      	ldrb	r3, [r3, #0]
   205dc:	2201      	movs	r2, #1
   205de:	409a      	lsls	r2, r3
   205e0:	0013      	movs	r3, r2
   205e2:	1e5a      	subs	r2, r3, #1
   205e4:	697b      	ldr	r3, [r7, #20]
   205e6:	4013      	ands	r3, r2
   205e8:	617b      	str	r3, [r7, #20]
	return value;
   205ea:	697b      	ldr	r3, [r7, #20]
}
   205ec:	0018      	movs	r0, r3
   205ee:	46bd      	mov	sp, r7
   205f0:	b007      	add	sp, #28
   205f2:	bd90      	pop	{r4, r7, pc}

000205f4 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   205f4:	b580      	push	{r7, lr}
   205f6:	b082      	sub	sp, #8
   205f8:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   205fa:	4b23      	ldr	r3, [pc, #140]	; (20688 <mmc_spi_op_cond+0x94>)
   205fc:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   205fe:	4b23      	ldr	r3, [pc, #140]	; (2068c <mmc_spi_op_cond+0x98>)
   20600:	2100      	movs	r1, #0
   20602:	0018      	movs	r0, r3
   20604:	4b22      	ldr	r3, [pc, #136]	; (20690 <mmc_spi_op_cond+0x9c>)
   20606:	4798      	blx	r3
   20608:	0003      	movs	r3, r0
   2060a:	001a      	movs	r2, r3
   2060c:	2301      	movs	r3, #1
   2060e:	4053      	eors	r3, r2
   20610:	b2db      	uxtb	r3, r3
   20612:	2b00      	cmp	r3, #0
   20614:	d001      	beq.n	2061a <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   20616:	2300      	movs	r3, #0
   20618:	e031      	b.n	2067e <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   2061a:	4b1e      	ldr	r3, [pc, #120]	; (20694 <mmc_spi_op_cond+0xa0>)
   2061c:	4798      	blx	r3
   2061e:	0003      	movs	r3, r0
   20620:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   20622:	683b      	ldr	r3, [r7, #0]
   20624:	2201      	movs	r2, #1
   20626:	4013      	ands	r3, r2
   20628:	d006      	beq.n	20638 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   2062a:	687b      	ldr	r3, [r7, #4]
   2062c:	1e5a      	subs	r2, r3, #1
   2062e:	607a      	str	r2, [r7, #4]
   20630:	2b00      	cmp	r3, #0
   20632:	d1e4      	bne.n	205fe <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   20634:	2300      	movs	r3, #0
   20636:	e022      	b.n	2067e <mmc_spi_op_cond+0x8a>
			break;
   20638:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   2063a:	4b17      	ldr	r3, [pc, #92]	; (20698 <mmc_spi_op_cond+0xa4>)
   2063c:	2100      	movs	r1, #0
   2063e:	0018      	movs	r0, r3
   20640:	4b13      	ldr	r3, [pc, #76]	; (20690 <mmc_spi_op_cond+0x9c>)
   20642:	4798      	blx	r3
   20644:	0003      	movs	r3, r0
   20646:	001a      	movs	r2, r3
   20648:	2301      	movs	r3, #1
   2064a:	4053      	eors	r3, r2
   2064c:	b2db      	uxtb	r3, r3
   2064e:	2b00      	cmp	r3, #0
   20650:	d001      	beq.n	20656 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   20652:	2300      	movs	r3, #0
   20654:	e013      	b.n	2067e <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   20656:	4b0f      	ldr	r3, [pc, #60]	; (20694 <mmc_spi_op_cond+0xa0>)
   20658:	4798      	blx	r3
   2065a:	0002      	movs	r2, r0
   2065c:	23c0      	movs	r3, #192	; 0xc0
   2065e:	05db      	lsls	r3, r3, #23
   20660:	401a      	ands	r2, r3
   20662:	2380      	movs	r3, #128	; 0x80
   20664:	05db      	lsls	r3, r3, #23
   20666:	429a      	cmp	r2, r3
   20668:	d108      	bne.n	2067c <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   2066a:	4b0c      	ldr	r3, [pc, #48]	; (2069c <mmc_spi_op_cond+0xa8>)
   2066c:	681a      	ldr	r2, [r3, #0]
   2066e:	4b0b      	ldr	r3, [pc, #44]	; (2069c <mmc_spi_op_cond+0xa8>)
   20670:	681b      	ldr	r3, [r3, #0]
   20672:	7adb      	ldrb	r3, [r3, #11]
   20674:	2108      	movs	r1, #8
   20676:	430b      	orrs	r3, r1
   20678:	b2db      	uxtb	r3, r3
   2067a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   2067c:	2301      	movs	r3, #1
}
   2067e:	0018      	movs	r0, r3
   20680:	46bd      	mov	sp, r7
   20682:	b002      	add	sp, #8
   20684:	bd80      	pop	{r7, pc}
   20686:	46c0      	nop			; (mov r8, r8)
   20688:	00001bee 	.word	0x00001bee
   2068c:	00001101 	.word	0x00001101
   20690:	00022029 	.word	0x00022029
   20694:	00022269 	.word	0x00022269
   20698:	0000053a 	.word	0x0000053a
   2069c:	200040e8 	.word	0x200040e8

000206a0 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   206a0:	b580      	push	{r7, lr}
   206a2:	b086      	sub	sp, #24
   206a4:	af00      	add	r7, sp, #0
   206a6:	0002      	movs	r2, r0
   206a8:	1dfb      	adds	r3, r7, #7
   206aa:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   206ac:	4b2e      	ldr	r3, [pc, #184]	; (20768 <sd_spi_op_cond+0xc8>)
   206ae:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   206b0:	4b2e      	ldr	r3, [pc, #184]	; (2076c <sd_spi_op_cond+0xcc>)
   206b2:	2100      	movs	r1, #0
   206b4:	0018      	movs	r0, r3
   206b6:	4b2e      	ldr	r3, [pc, #184]	; (20770 <sd_spi_op_cond+0xd0>)
   206b8:	4798      	blx	r3
   206ba:	0003      	movs	r3, r0
   206bc:	001a      	movs	r2, r3
   206be:	2301      	movs	r3, #1
   206c0:	4053      	eors	r3, r2
   206c2:	b2db      	uxtb	r3, r3
   206c4:	2b00      	cmp	r3, #0
   206c6:	d001      	beq.n	206cc <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   206c8:	2300      	movs	r3, #0
   206ca:	e048      	b.n	2075e <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   206cc:	2300      	movs	r3, #0
   206ce:	617b      	str	r3, [r7, #20]
		if (v2) {
   206d0:	1dfb      	adds	r3, r7, #7
   206d2:	781b      	ldrb	r3, [r3, #0]
   206d4:	2b00      	cmp	r3, #0
   206d6:	d004      	beq.n	206e2 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   206d8:	697b      	ldr	r3, [r7, #20]
   206da:	2280      	movs	r2, #128	; 0x80
   206dc:	05d2      	lsls	r2, r2, #23
   206de:	4313      	orrs	r3, r2
   206e0:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   206e2:	697b      	ldr	r3, [r7, #20]
   206e4:	4a23      	ldr	r2, [pc, #140]	; (20774 <sd_spi_op_cond+0xd4>)
   206e6:	0019      	movs	r1, r3
   206e8:	0010      	movs	r0, r2
   206ea:	4b21      	ldr	r3, [pc, #132]	; (20770 <sd_spi_op_cond+0xd0>)
   206ec:	4798      	blx	r3
   206ee:	0003      	movs	r3, r0
   206f0:	001a      	movs	r2, r3
   206f2:	2301      	movs	r3, #1
   206f4:	4053      	eors	r3, r2
   206f6:	b2db      	uxtb	r3, r3
   206f8:	2b00      	cmp	r3, #0
   206fa:	d001      	beq.n	20700 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   206fc:	2300      	movs	r3, #0
   206fe:	e02e      	b.n	2075e <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   20700:	4b1d      	ldr	r3, [pc, #116]	; (20778 <sd_spi_op_cond+0xd8>)
   20702:	4798      	blx	r3
   20704:	0003      	movs	r3, r0
   20706:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   20708:	68fb      	ldr	r3, [r7, #12]
   2070a:	2201      	movs	r2, #1
   2070c:	4013      	ands	r3, r2
   2070e:	d006      	beq.n	2071e <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   20710:	693b      	ldr	r3, [r7, #16]
   20712:	1e5a      	subs	r2, r3, #1
   20714:	613a      	str	r2, [r7, #16]
   20716:	2b00      	cmp	r3, #0
   20718:	d1ca      	bne.n	206b0 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   2071a:	2300      	movs	r3, #0
   2071c:	e01f      	b.n	2075e <sd_spi_op_cond+0xbe>
			break;
   2071e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   20720:	4b16      	ldr	r3, [pc, #88]	; (2077c <sd_spi_op_cond+0xdc>)
   20722:	2100      	movs	r1, #0
   20724:	0018      	movs	r0, r3
   20726:	4b12      	ldr	r3, [pc, #72]	; (20770 <sd_spi_op_cond+0xd0>)
   20728:	4798      	blx	r3
   2072a:	0003      	movs	r3, r0
   2072c:	001a      	movs	r2, r3
   2072e:	2301      	movs	r3, #1
   20730:	4053      	eors	r3, r2
   20732:	b2db      	uxtb	r3, r3
   20734:	2b00      	cmp	r3, #0
   20736:	d001      	beq.n	2073c <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   20738:	2300      	movs	r3, #0
   2073a:	e010      	b.n	2075e <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   2073c:	4b0e      	ldr	r3, [pc, #56]	; (20778 <sd_spi_op_cond+0xd8>)
   2073e:	4798      	blx	r3
   20740:	0002      	movs	r2, r0
   20742:	2380      	movs	r3, #128	; 0x80
   20744:	05db      	lsls	r3, r3, #23
   20746:	4013      	ands	r3, r2
   20748:	d008      	beq.n	2075c <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   2074a:	4b0d      	ldr	r3, [pc, #52]	; (20780 <sd_spi_op_cond+0xe0>)
   2074c:	681a      	ldr	r2, [r3, #0]
   2074e:	4b0c      	ldr	r3, [pc, #48]	; (20780 <sd_spi_op_cond+0xe0>)
   20750:	681b      	ldr	r3, [r3, #0]
   20752:	7adb      	ldrb	r3, [r3, #11]
   20754:	2108      	movs	r1, #8
   20756:	430b      	orrs	r3, r1
   20758:	b2db      	uxtb	r3, r3
   2075a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   2075c:	2301      	movs	r3, #1
}
   2075e:	0018      	movs	r0, r3
   20760:	46bd      	mov	sp, r7
   20762:	b006      	add	sp, #24
   20764:	bd80      	pop	{r7, pc}
   20766:	46c0      	nop			; (mov r8, r8)
   20768:	00001bee 	.word	0x00001bee
   2076c:	00001137 	.word	0x00001137
   20770:	00022029 	.word	0x00022029
   20774:	00001129 	.word	0x00001129
   20778:	00022269 	.word	0x00022269
   2077c:	0000053a 	.word	0x0000053a
   20780:	200040e8 	.word	0x200040e8

00020784 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   20784:	b580      	push	{r7, lr}
   20786:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   20788:	2301      	movs	r3, #1
}
   2078a:	0018      	movs	r0, r3
   2078c:	46bd      	mov	sp, r7
   2078e:	bd80      	pop	{r7, pc}

00020790 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   20790:	b580      	push	{r7, lr}
   20792:	b084      	sub	sp, #16
   20794:	af00      	add	r7, sp, #0
   20796:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   20798:	687b      	ldr	r3, [r7, #4]
   2079a:	2200      	movs	r2, #0
   2079c:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   2079e:	23d5      	movs	r3, #213	; 0xd5
   207a0:	005b      	lsls	r3, r3, #1
   207a2:	4a14      	ldr	r2, [pc, #80]	; (207f4 <sd_cmd8+0x64>)
   207a4:	0019      	movs	r1, r3
   207a6:	0010      	movs	r0, r2
   207a8:	4b13      	ldr	r3, [pc, #76]	; (207f8 <sd_cmd8+0x68>)
   207aa:	4798      	blx	r3
   207ac:	0003      	movs	r3, r0
   207ae:	001a      	movs	r2, r3
   207b0:	2301      	movs	r3, #1
   207b2:	4053      	eors	r3, r2
   207b4:	b2db      	uxtb	r3, r3
   207b6:	2b00      	cmp	r3, #0
   207b8:	d001      	beq.n	207be <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   207ba:	2301      	movs	r3, #1
   207bc:	e015      	b.n	207ea <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   207be:	4b0f      	ldr	r3, [pc, #60]	; (207fc <sd_cmd8+0x6c>)
   207c0:	4798      	blx	r3
   207c2:	0003      	movs	r3, r0
   207c4:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   207c6:	68fb      	ldr	r3, [r7, #12]
   207c8:	3301      	adds	r3, #1
   207ca:	d101      	bne.n	207d0 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   207cc:	2301      	movs	r3, #1
   207ce:	e00c      	b.n	207ea <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   207d0:	68fb      	ldr	r3, [r7, #12]
   207d2:	051b      	lsls	r3, r3, #20
   207d4:	0d1a      	lsrs	r2, r3, #20
   207d6:	23d5      	movs	r3, #213	; 0xd5
   207d8:	005b      	lsls	r3, r3, #1
   207da:	429a      	cmp	r2, r3
   207dc:	d001      	beq.n	207e2 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   207de:	2300      	movs	r3, #0
   207e0:	e003      	b.n	207ea <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   207e2:	687b      	ldr	r3, [r7, #4]
   207e4:	2201      	movs	r2, #1
   207e6:	701a      	strb	r2, [r3, #0]
	return true;
   207e8:	2301      	movs	r3, #1
}
   207ea:	0018      	movs	r0, r3
   207ec:	46bd      	mov	sp, r7
   207ee:	b004      	add	sp, #16
   207f0:	bd80      	pop	{r7, pc}
   207f2:	46c0      	nop			; (mov r8, r8)
   207f4:	00005508 	.word	0x00005508
   207f8:	00022029 	.word	0x00022029
   207fc:	00022269 	.word	0x00022269

00020800 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   20800:	b590      	push	{r4, r7, lr}
   20802:	b089      	sub	sp, #36	; 0x24
   20804:	af02      	add	r7, sp, #8
   20806:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   20808:	2380      	movs	r3, #128	; 0x80
   2080a:	009a      	lsls	r2, r3, #2
   2080c:	4841      	ldr	r0, [pc, #260]	; (20914 <mmc_cmd8+0x114>)
   2080e:	2300      	movs	r3, #0
   20810:	9300      	str	r3, [sp, #0]
   20812:	2301      	movs	r3, #1
   20814:	2100      	movs	r1, #0
   20816:	4c40      	ldr	r4, [pc, #256]	; (20918 <mmc_cmd8+0x118>)
   20818:	47a0      	blx	r4
   2081a:	0003      	movs	r3, r0
   2081c:	001a      	movs	r2, r3
   2081e:	2301      	movs	r3, #1
   20820:	4053      	eors	r3, r2
   20822:	b2db      	uxtb	r3, r3
   20824:	2b00      	cmp	r3, #0
   20826:	d001      	beq.n	2082c <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   20828:	2300      	movs	r3, #0
   2082a:	e06e      	b.n	2090a <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   2082c:	2316      	movs	r3, #22
   2082e:	18fb      	adds	r3, r7, r3
   20830:	2200      	movs	r2, #0
   20832:	801a      	strh	r2, [r3, #0]
   20834:	e014      	b.n	20860 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   20836:	2310      	movs	r3, #16
   20838:	18fb      	adds	r3, r7, r3
   2083a:	0018      	movs	r0, r3
   2083c:	4b37      	ldr	r3, [pc, #220]	; (2091c <mmc_cmd8+0x11c>)
   2083e:	4798      	blx	r3
   20840:	0003      	movs	r3, r0
   20842:	001a      	movs	r2, r3
   20844:	2301      	movs	r3, #1
   20846:	4053      	eors	r3, r2
   20848:	b2db      	uxtb	r3, r3
   2084a:	2b00      	cmp	r3, #0
   2084c:	d001      	beq.n	20852 <mmc_cmd8+0x52>
			return false;
   2084e:	2300      	movs	r3, #0
   20850:	e05b      	b.n	2090a <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   20852:	2316      	movs	r3, #22
   20854:	18fb      	adds	r3, r7, r3
   20856:	881a      	ldrh	r2, [r3, #0]
   20858:	2316      	movs	r3, #22
   2085a:	18fb      	adds	r3, r7, r3
   2085c:	3201      	adds	r2, #1
   2085e:	801a      	strh	r2, [r3, #0]
   20860:	2316      	movs	r3, #22
   20862:	18fb      	adds	r3, r7, r3
   20864:	881b      	ldrh	r3, [r3, #0]
   20866:	2b31      	cmp	r3, #49	; 0x31
   20868:	d9e5      	bls.n	20836 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   2086a:	693b      	ldr	r3, [r7, #16]
   2086c:	b2db      	uxtb	r3, r3
   2086e:	2202      	movs	r2, #2
   20870:	4013      	ands	r3, r2
   20872:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   20874:	687b      	ldr	r3, [r7, #4]
   20876:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   20878:	4b29      	ldr	r3, [pc, #164]	; (20920 <mmc_cmd8+0x120>)
   2087a:	681b      	ldr	r3, [r3, #0]
   2087c:	330e      	adds	r3, #14
   2087e:	0018      	movs	r0, r3
   20880:	230c      	movs	r3, #12
   20882:	223e      	movs	r2, #62	; 0x3e
   20884:	2180      	movs	r1, #128	; 0x80
   20886:	4c27      	ldr	r4, [pc, #156]	; (20924 <mmc_cmd8+0x124>)
   20888:	47a0      	blx	r4
   2088a:	0002      	movs	r2, r0
   2088c:	4b26      	ldr	r3, [pc, #152]	; (20928 <mmc_cmd8+0x128>)
   2088e:	429a      	cmp	r2, r3
   20890:	d135      	bne.n	208fe <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   20892:	e014      	b.n	208be <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   20894:	230c      	movs	r3, #12
   20896:	18fb      	adds	r3, r7, r3
   20898:	0018      	movs	r0, r3
   2089a:	4b20      	ldr	r3, [pc, #128]	; (2091c <mmc_cmd8+0x11c>)
   2089c:	4798      	blx	r3
   2089e:	0003      	movs	r3, r0
   208a0:	001a      	movs	r2, r3
   208a2:	2301      	movs	r3, #1
   208a4:	4053      	eors	r3, r2
   208a6:	b2db      	uxtb	r3, r3
   208a8:	2b00      	cmp	r3, #0
   208aa:	d001      	beq.n	208b0 <mmc_cmd8+0xb0>
				return false;
   208ac:	2300      	movs	r3, #0
   208ae:	e02c      	b.n	2090a <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   208b0:	2316      	movs	r3, #22
   208b2:	18fb      	adds	r3, r7, r3
   208b4:	881a      	ldrh	r2, [r3, #0]
   208b6:	2316      	movs	r3, #22
   208b8:	18fb      	adds	r3, r7, r3
   208ba:	3201      	adds	r2, #1
   208bc:	801a      	strh	r2, [r3, #0]
   208be:	2316      	movs	r3, #22
   208c0:	18fb      	adds	r3, r7, r3
   208c2:	881b      	ldrh	r3, [r3, #0]
   208c4:	2b35      	cmp	r3, #53	; 0x35
   208c6:	d9e5      	bls.n	20894 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   208c8:	4b15      	ldr	r3, [pc, #84]	; (20920 <mmc_cmd8+0x120>)
   208ca:	681b      	ldr	r3, [r3, #0]
   208cc:	68fa      	ldr	r2, [r7, #12]
   208ce:	0852      	lsrs	r2, r2, #1
   208d0:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   208d2:	e014      	b.n	208fe <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   208d4:	230c      	movs	r3, #12
   208d6:	18fb      	adds	r3, r7, r3
   208d8:	0018      	movs	r0, r3
   208da:	4b10      	ldr	r3, [pc, #64]	; (2091c <mmc_cmd8+0x11c>)
   208dc:	4798      	blx	r3
   208de:	0003      	movs	r3, r0
   208e0:	001a      	movs	r2, r3
   208e2:	2301      	movs	r3, #1
   208e4:	4053      	eors	r3, r2
   208e6:	b2db      	uxtb	r3, r3
   208e8:	2b00      	cmp	r3, #0
   208ea:	d001      	beq.n	208f0 <mmc_cmd8+0xf0>
			return false;
   208ec:	2300      	movs	r3, #0
   208ee:	e00c      	b.n	2090a <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   208f0:	2316      	movs	r3, #22
   208f2:	18fb      	adds	r3, r7, r3
   208f4:	881a      	ldrh	r2, [r3, #0]
   208f6:	2316      	movs	r3, #22
   208f8:	18fb      	adds	r3, r7, r3
   208fa:	3201      	adds	r2, #1
   208fc:	801a      	strh	r2, [r3, #0]
   208fe:	2316      	movs	r3, #22
   20900:	18fb      	adds	r3, r7, r3
   20902:	881b      	ldrh	r3, [r3, #0]
   20904:	2b7f      	cmp	r3, #127	; 0x7f
   20906:	d9e5      	bls.n	208d4 <mmc_cmd8+0xd4>
		}
	}
	return true;
   20908:	2301      	movs	r3, #1
}
   2090a:	0018      	movs	r0, r3
   2090c:	46bd      	mov	sp, r7
   2090e:	b007      	add	sp, #28
   20910:	bd90      	pop	{r4, r7, pc}
   20912:	46c0      	nop			; (mov r8, r8)
   20914:	00081108 	.word	0x00081108
   20918:	00022051 	.word	0x00022051
   2091c:	0002227d 	.word	0x0002227d
   20920:	200040e8 	.word	0x200040e8
   20924:	00020499 	.word	0x00020499
   20928:	00000fff 	.word	0x00000fff

0002092c <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   2092c:	b590      	push	{r4, r7, lr}
   2092e:	b083      	sub	sp, #12
   20930:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   20932:	4b15      	ldr	r3, [pc, #84]	; (20988 <sd_mmc_cmd9_spi+0x5c>)
   20934:	681b      	ldr	r3, [r3, #0]
   20936:	891b      	ldrh	r3, [r3, #8]
   20938:	0419      	lsls	r1, r3, #16
   2093a:	4814      	ldr	r0, [pc, #80]	; (2098c <sd_mmc_cmd9_spi+0x60>)
   2093c:	2301      	movs	r3, #1
   2093e:	9300      	str	r3, [sp, #0]
   20940:	2301      	movs	r3, #1
   20942:	2210      	movs	r2, #16
   20944:	4c12      	ldr	r4, [pc, #72]	; (20990 <sd_mmc_cmd9_spi+0x64>)
   20946:	47a0      	blx	r4
   20948:	0003      	movs	r3, r0
   2094a:	001a      	movs	r2, r3
   2094c:	2301      	movs	r3, #1
   2094e:	4053      	eors	r3, r2
   20950:	b2db      	uxtb	r3, r3
   20952:	2b00      	cmp	r3, #0
   20954:	d001      	beq.n	2095a <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   20956:	2300      	movs	r3, #0
   20958:	e012      	b.n	20980 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   2095a:	4b0b      	ldr	r3, [pc, #44]	; (20988 <sd_mmc_cmd9_spi+0x5c>)
   2095c:	681b      	ldr	r3, [r3, #0]
   2095e:	330e      	adds	r3, #14
   20960:	2101      	movs	r1, #1
   20962:	0018      	movs	r0, r3
   20964:	4b0b      	ldr	r3, [pc, #44]	; (20994 <sd_mmc_cmd9_spi+0x68>)
   20966:	4798      	blx	r3
   20968:	0003      	movs	r3, r0
   2096a:	001a      	movs	r2, r3
   2096c:	2301      	movs	r3, #1
   2096e:	4053      	eors	r3, r2
   20970:	b2db      	uxtb	r3, r3
   20972:	2b00      	cmp	r3, #0
   20974:	d001      	beq.n	2097a <sd_mmc_cmd9_spi+0x4e>
		return false;
   20976:	2300      	movs	r3, #0
   20978:	e002      	b.n	20980 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   2097a:	4b07      	ldr	r3, [pc, #28]	; (20998 <sd_mmc_cmd9_spi+0x6c>)
   2097c:	4798      	blx	r3
   2097e:	0003      	movs	r3, r0
}
   20980:	0018      	movs	r0, r3
   20982:	46bd      	mov	sp, r7
   20984:	b001      	add	sp, #4
   20986:	bd90      	pop	{r4, r7, pc}
   20988:	200040e8 	.word	0x200040e8
   2098c:	00081109 	.word	0x00081109
   20990:	00022051 	.word	0x00022051
   20994:	00022321 	.word	0x00022321
   20998:	000223c5 	.word	0x000223c5

0002099c <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   2099c:	b5b0      	push	{r4, r5, r7, lr}
   2099e:	b084      	sub	sp, #16
   209a0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   209a2:	4b45      	ldr	r3, [pc, #276]	; (20ab8 <mmc_decode_csd+0x11c>)
   209a4:	681b      	ldr	r3, [r3, #0]
   209a6:	330e      	adds	r3, #14
   209a8:	0018      	movs	r0, r3
   209aa:	2304      	movs	r3, #4
   209ac:	227a      	movs	r2, #122	; 0x7a
   209ae:	2180      	movs	r1, #128	; 0x80
   209b0:	4c42      	ldr	r4, [pc, #264]	; (20abc <mmc_decode_csd+0x120>)
   209b2:	47a0      	blx	r4
   209b4:	0003      	movs	r3, r0
   209b6:	2b02      	cmp	r3, #2
   209b8:	d011      	beq.n	209de <mmc_decode_csd+0x42>
   209ba:	d802      	bhi.n	209c2 <mmc_decode_csd+0x26>
   209bc:	2b01      	cmp	r3, #1
   209be:	d009      	beq.n	209d4 <mmc_decode_csd+0x38>
   209c0:	e003      	b.n	209ca <mmc_decode_csd+0x2e>
   209c2:	2b03      	cmp	r3, #3
   209c4:	d010      	beq.n	209e8 <mmc_decode_csd+0x4c>
   209c6:	2b04      	cmp	r3, #4
   209c8:	d013      	beq.n	209f2 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   209ca:	4b3b      	ldr	r3, [pc, #236]	; (20ab8 <mmc_decode_csd+0x11c>)
   209cc:	681b      	ldr	r3, [r3, #0]
   209ce:	2212      	movs	r2, #18
   209d0:	731a      	strb	r2, [r3, #12]
		break;
   209d2:	e013      	b.n	209fc <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   209d4:	4b38      	ldr	r3, [pc, #224]	; (20ab8 <mmc_decode_csd+0x11c>)
   209d6:	681b      	ldr	r3, [r3, #0]
   209d8:	2214      	movs	r2, #20
   209da:	731a      	strb	r2, [r3, #12]
		break;
   209dc:	e00e      	b.n	209fc <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   209de:	4b36      	ldr	r3, [pc, #216]	; (20ab8 <mmc_decode_csd+0x11c>)
   209e0:	681b      	ldr	r3, [r3, #0]
   209e2:	2222      	movs	r2, #34	; 0x22
   209e4:	731a      	strb	r2, [r3, #12]
		break;
   209e6:	e009      	b.n	209fc <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   209e8:	4b33      	ldr	r3, [pc, #204]	; (20ab8 <mmc_decode_csd+0x11c>)
   209ea:	681b      	ldr	r3, [r3, #0]
   209ec:	2230      	movs	r2, #48	; 0x30
   209ee:	731a      	strb	r2, [r3, #12]
		break;
   209f0:	e004      	b.n	209fc <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   209f2:	4b31      	ldr	r3, [pc, #196]	; (20ab8 <mmc_decode_csd+0x11c>)
   209f4:	681b      	ldr	r3, [r3, #0]
   209f6:	2240      	movs	r2, #64	; 0x40
   209f8:	731a      	strb	r2, [r3, #12]
		break;
   209fa:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   209fc:	4b2e      	ldr	r3, [pc, #184]	; (20ab8 <mmc_decode_csd+0x11c>)
   209fe:	681b      	ldr	r3, [r3, #0]
   20a00:	330e      	adds	r3, #14
   20a02:	0018      	movs	r0, r3
   20a04:	2308      	movs	r3, #8
   20a06:	2260      	movs	r2, #96	; 0x60
   20a08:	2180      	movs	r1, #128	; 0x80
   20a0a:	4c2c      	ldr	r4, [pc, #176]	; (20abc <mmc_decode_csd+0x120>)
   20a0c:	47a0      	blx	r4
   20a0e:	0003      	movs	r3, r0
   20a10:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   20a12:	68fb      	ldr	r3, [r7, #12]
   20a14:	2207      	movs	r2, #7
   20a16:	401a      	ands	r2, r3
   20a18:	4b29      	ldr	r3, [pc, #164]	; (20ac0 <mmc_decode_csd+0x124>)
   20a1a:	0092      	lsls	r2, r2, #2
   20a1c:	58d3      	ldr	r3, [r2, r3]
   20a1e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   20a20:	68fb      	ldr	r3, [r7, #12]
   20a22:	08db      	lsrs	r3, r3, #3
   20a24:	220f      	movs	r2, #15
   20a26:	401a      	ands	r2, r3
   20a28:	4b26      	ldr	r3, [pc, #152]	; (20ac4 <mmc_decode_csd+0x128>)
   20a2a:	0092      	lsls	r2, r2, #2
   20a2c:	58d3      	ldr	r3, [r2, r3]
   20a2e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   20a30:	4b21      	ldr	r3, [pc, #132]	; (20ab8 <mmc_decode_csd+0x11c>)
   20a32:	681b      	ldr	r3, [r3, #0]
   20a34:	68ba      	ldr	r2, [r7, #8]
   20a36:	6879      	ldr	r1, [r7, #4]
   20a38:	434a      	muls	r2, r1
   20a3a:	21fa      	movs	r1, #250	; 0xfa
   20a3c:	0089      	lsls	r1, r1, #2
   20a3e:	434a      	muls	r2, r1
   20a40:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   20a42:	4b1d      	ldr	r3, [pc, #116]	; (20ab8 <mmc_decode_csd+0x11c>)
   20a44:	681b      	ldr	r3, [r3, #0]
   20a46:	330e      	adds	r3, #14
   20a48:	0018      	movs	r0, r3
   20a4a:	230c      	movs	r3, #12
   20a4c:	223e      	movs	r2, #62	; 0x3e
   20a4e:	2180      	movs	r1, #128	; 0x80
   20a50:	4c1a      	ldr	r4, [pc, #104]	; (20abc <mmc_decode_csd+0x120>)
   20a52:	47a0      	blx	r4
   20a54:	0002      	movs	r2, r0
   20a56:	4b1c      	ldr	r3, [pc, #112]	; (20ac8 <mmc_decode_csd+0x12c>)
   20a58:	429a      	cmp	r2, r3
   20a5a:	d028      	beq.n	20aae <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   20a5c:	4b16      	ldr	r3, [pc, #88]	; (20ab8 <mmc_decode_csd+0x11c>)
   20a5e:	681b      	ldr	r3, [r3, #0]
   20a60:	330e      	adds	r3, #14
   20a62:	0018      	movs	r0, r3
   20a64:	230c      	movs	r3, #12
   20a66:	223e      	movs	r2, #62	; 0x3e
   20a68:	2180      	movs	r1, #128	; 0x80
   20a6a:	4c14      	ldr	r4, [pc, #80]	; (20abc <mmc_decode_csd+0x120>)
   20a6c:	47a0      	blx	r4
   20a6e:	0003      	movs	r3, r0
   20a70:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   20a72:	4b11      	ldr	r3, [pc, #68]	; (20ab8 <mmc_decode_csd+0x11c>)
   20a74:	681b      	ldr	r3, [r3, #0]
   20a76:	330e      	adds	r3, #14
   20a78:	0018      	movs	r0, r3
   20a7a:	2303      	movs	r3, #3
   20a7c:	222f      	movs	r2, #47	; 0x2f
   20a7e:	2180      	movs	r1, #128	; 0x80
   20a80:	4d0e      	ldr	r5, [pc, #56]	; (20abc <mmc_decode_csd+0x120>)
   20a82:	47a8      	blx	r5
   20a84:	0003      	movs	r3, r0
   20a86:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   20a88:	409c      	lsls	r4, r3
   20a8a:	0023      	movs	r3, r4
   20a8c:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   20a8e:	4b0a      	ldr	r3, [pc, #40]	; (20ab8 <mmc_decode_csd+0x11c>)
   20a90:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   20a92:	4b09      	ldr	r3, [pc, #36]	; (20ab8 <mmc_decode_csd+0x11c>)
   20a94:	681b      	ldr	r3, [r3, #0]
   20a96:	330e      	adds	r3, #14
   20a98:	0018      	movs	r0, r3
   20a9a:	2304      	movs	r3, #4
   20a9c:	2250      	movs	r2, #80	; 0x50
   20a9e:	2180      	movs	r1, #128	; 0x80
   20aa0:	4d06      	ldr	r5, [pc, #24]	; (20abc <mmc_decode_csd+0x120>)
   20aa2:	47a8      	blx	r5
   20aa4:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   20aa6:	683b      	ldr	r3, [r7, #0]
   20aa8:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   20aaa:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   20aac:	6063      	str	r3, [r4, #4]
	}
}
   20aae:	46c0      	nop			; (mov r8, r8)
   20ab0:	46bd      	mov	sp, r7
   20ab2:	b004      	add	sp, #16
   20ab4:	bdb0      	pop	{r4, r5, r7, pc}
   20ab6:	46c0      	nop			; (mov r8, r8)
   20ab8:	200040e8 	.word	0x200040e8
   20abc:	00020499 	.word	0x00020499
   20ac0:	0003b564 	.word	0x0003b564
   20ac4:	0003b5c0 	.word	0x0003b5c0
   20ac8:	00000fff 	.word	0x00000fff

00020acc <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   20acc:	b5b0      	push	{r4, r5, r7, lr}
   20ace:	b084      	sub	sp, #16
   20ad0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   20ad2:	4b35      	ldr	r3, [pc, #212]	; (20ba8 <sd_decode_csd+0xdc>)
   20ad4:	681b      	ldr	r3, [r3, #0]
   20ad6:	330e      	adds	r3, #14
   20ad8:	0018      	movs	r0, r3
   20ada:	2308      	movs	r3, #8
   20adc:	2260      	movs	r2, #96	; 0x60
   20ade:	2180      	movs	r1, #128	; 0x80
   20ae0:	4c32      	ldr	r4, [pc, #200]	; (20bac <sd_decode_csd+0xe0>)
   20ae2:	47a0      	blx	r4
   20ae4:	0003      	movs	r3, r0
   20ae6:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   20ae8:	68fb      	ldr	r3, [r7, #12]
   20aea:	2207      	movs	r2, #7
   20aec:	401a      	ands	r2, r3
   20aee:	4b30      	ldr	r3, [pc, #192]	; (20bb0 <sd_decode_csd+0xe4>)
   20af0:	0092      	lsls	r2, r2, #2
   20af2:	58d3      	ldr	r3, [r2, r3]
   20af4:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   20af6:	68fb      	ldr	r3, [r7, #12]
   20af8:	08db      	lsrs	r3, r3, #3
   20afa:	220f      	movs	r2, #15
   20afc:	401a      	ands	r2, r3
   20afe:	4b2d      	ldr	r3, [pc, #180]	; (20bb4 <sd_decode_csd+0xe8>)
   20b00:	0092      	lsls	r2, r2, #2
   20b02:	58d3      	ldr	r3, [r2, r3]
   20b04:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   20b06:	4b28      	ldr	r3, [pc, #160]	; (20ba8 <sd_decode_csd+0xdc>)
   20b08:	681b      	ldr	r3, [r3, #0]
   20b0a:	68ba      	ldr	r2, [r7, #8]
   20b0c:	6879      	ldr	r1, [r7, #4]
   20b0e:	434a      	muls	r2, r1
   20b10:	21fa      	movs	r1, #250	; 0xfa
   20b12:	0089      	lsls	r1, r1, #2
   20b14:	434a      	muls	r2, r1
   20b16:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   20b18:	4b23      	ldr	r3, [pc, #140]	; (20ba8 <sd_decode_csd+0xdc>)
   20b1a:	681b      	ldr	r3, [r3, #0]
   20b1c:	330e      	adds	r3, #14
   20b1e:	0018      	movs	r0, r3
   20b20:	2302      	movs	r3, #2
   20b22:	227e      	movs	r2, #126	; 0x7e
   20b24:	2180      	movs	r1, #128	; 0x80
   20b26:	4c21      	ldr	r4, [pc, #132]	; (20bac <sd_decode_csd+0xe0>)
   20b28:	47a0      	blx	r4
   20b2a:	1e03      	subs	r3, r0, #0
   20b2c:	d00f      	beq.n	20b4e <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   20b2e:	4b1e      	ldr	r3, [pc, #120]	; (20ba8 <sd_decode_csd+0xdc>)
   20b30:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   20b32:	4b1d      	ldr	r3, [pc, #116]	; (20ba8 <sd_decode_csd+0xdc>)
   20b34:	681b      	ldr	r3, [r3, #0]
   20b36:	330e      	adds	r3, #14
   20b38:	0018      	movs	r0, r3
   20b3a:	2316      	movs	r3, #22
   20b3c:	2230      	movs	r2, #48	; 0x30
   20b3e:	2180      	movs	r1, #128	; 0x80
   20b40:	4d1a      	ldr	r5, [pc, #104]	; (20bac <sd_decode_csd+0xe0>)
   20b42:	47a8      	blx	r5
   20b44:	0003      	movs	r3, r0
				* 512;
   20b46:	3301      	adds	r3, #1
   20b48:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   20b4a:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   20b4c:	e028      	b.n	20ba0 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   20b4e:	4b16      	ldr	r3, [pc, #88]	; (20ba8 <sd_decode_csd+0xdc>)
   20b50:	681b      	ldr	r3, [r3, #0]
   20b52:	330e      	adds	r3, #14
   20b54:	0018      	movs	r0, r3
   20b56:	230c      	movs	r3, #12
   20b58:	223e      	movs	r2, #62	; 0x3e
   20b5a:	2180      	movs	r1, #128	; 0x80
   20b5c:	4c13      	ldr	r4, [pc, #76]	; (20bac <sd_decode_csd+0xe0>)
   20b5e:	47a0      	blx	r4
   20b60:	0003      	movs	r3, r0
   20b62:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   20b64:	4b10      	ldr	r3, [pc, #64]	; (20ba8 <sd_decode_csd+0xdc>)
   20b66:	681b      	ldr	r3, [r3, #0]
   20b68:	330e      	adds	r3, #14
   20b6a:	0018      	movs	r0, r3
   20b6c:	2303      	movs	r3, #3
   20b6e:	222f      	movs	r2, #47	; 0x2f
   20b70:	2180      	movs	r1, #128	; 0x80
   20b72:	4d0e      	ldr	r5, [pc, #56]	; (20bac <sd_decode_csd+0xe0>)
   20b74:	47a8      	blx	r5
   20b76:	0003      	movs	r3, r0
   20b78:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   20b7a:	409c      	lsls	r4, r3
   20b7c:	0023      	movs	r3, r4
   20b7e:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   20b80:	4b09      	ldr	r3, [pc, #36]	; (20ba8 <sd_decode_csd+0xdc>)
   20b82:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   20b84:	4b08      	ldr	r3, [pc, #32]	; (20ba8 <sd_decode_csd+0xdc>)
   20b86:	681b      	ldr	r3, [r3, #0]
   20b88:	330e      	adds	r3, #14
   20b8a:	0018      	movs	r0, r3
   20b8c:	2304      	movs	r3, #4
   20b8e:	2250      	movs	r2, #80	; 0x50
   20b90:	2180      	movs	r1, #128	; 0x80
   20b92:	4d06      	ldr	r5, [pc, #24]	; (20bac <sd_decode_csd+0xe0>)
   20b94:	47a8      	blx	r5
   20b96:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   20b98:	683b      	ldr	r3, [r7, #0]
   20b9a:	4093      	lsls	r3, r2
				/ 1024;
   20b9c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   20b9e:	6063      	str	r3, [r4, #4]
}
   20ba0:	46c0      	nop			; (mov r8, r8)
   20ba2:	46bd      	mov	sp, r7
   20ba4:	b004      	add	sp, #16
   20ba6:	bdb0      	pop	{r4, r5, r7, pc}
   20ba8:	200040e8 	.word	0x200040e8
   20bac:	00020499 	.word	0x00020499
   20bb0:	0003b564 	.word	0x0003b564
   20bb4:	0003b580 	.word	0x0003b580

00020bb8 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   20bb8:	b580      	push	{r7, lr}
   20bba:	b082      	sub	sp, #8
   20bbc:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   20bbe:	4b11      	ldr	r3, [pc, #68]	; (20c04 <sd_mmc_cmd13+0x4c>)
   20bc0:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   20bc2:	4b11      	ldr	r3, [pc, #68]	; (20c08 <sd_mmc_cmd13+0x50>)
   20bc4:	2100      	movs	r1, #0
   20bc6:	0018      	movs	r0, r3
   20bc8:	4b10      	ldr	r3, [pc, #64]	; (20c0c <sd_mmc_cmd13+0x54>)
   20bca:	4798      	blx	r3
   20bcc:	0003      	movs	r3, r0
   20bce:	001a      	movs	r2, r3
   20bd0:	2301      	movs	r3, #1
   20bd2:	4053      	eors	r3, r2
   20bd4:	b2db      	uxtb	r3, r3
   20bd6:	2b00      	cmp	r3, #0
   20bd8:	d001      	beq.n	20bde <sd_mmc_cmd13+0x26>
				return false;
   20bda:	2300      	movs	r3, #0
   20bdc:	e00e      	b.n	20bfc <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   20bde:	4b0c      	ldr	r3, [pc, #48]	; (20c10 <sd_mmc_cmd13+0x58>)
   20be0:	4798      	blx	r3
   20be2:	0002      	movs	r2, r0
   20be4:	23ff      	movs	r3, #255	; 0xff
   20be6:	4013      	ands	r3, r2
   20be8:	d006      	beq.n	20bf8 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   20bea:	687b      	ldr	r3, [r7, #4]
   20bec:	1e5a      	subs	r2, r3, #1
   20bee:	607a      	str	r2, [r7, #4]
   20bf0:	2b00      	cmp	r3, #0
   20bf2:	d1e6      	bne.n	20bc2 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   20bf4:	2300      	movs	r3, #0
   20bf6:	e001      	b.n	20bfc <sd_mmc_cmd13+0x44>
				break;
   20bf8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   20bfa:	2301      	movs	r3, #1
}
   20bfc:	0018      	movs	r0, r3
   20bfe:	46bd      	mov	sp, r7
   20c00:	b002      	add	sp, #8
   20c02:	bd80      	pop	{r7, pc}
   20c04:	00030d40 	.word	0x00030d40
   20c08:	00001b0d 	.word	0x00001b0d
   20c0c:	00022029 	.word	0x00022029
   20c10:	00022269 	.word	0x00022269

00020c14 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   20c14:	b590      	push	{r4, r7, lr}
   20c16:	b085      	sub	sp, #20
   20c18:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   20c1a:	4b38      	ldr	r3, [pc, #224]	; (20cfc <sd_acmd51+0xe8>)
   20c1c:	681b      	ldr	r3, [r3, #0]
   20c1e:	891b      	ldrh	r3, [r3, #8]
   20c20:	041b      	lsls	r3, r3, #16
   20c22:	4a37      	ldr	r2, [pc, #220]	; (20d00 <sd_acmd51+0xec>)
   20c24:	0019      	movs	r1, r3
   20c26:	0010      	movs	r0, r2
   20c28:	4b36      	ldr	r3, [pc, #216]	; (20d04 <sd_acmd51+0xf0>)
   20c2a:	4798      	blx	r3
   20c2c:	0003      	movs	r3, r0
   20c2e:	001a      	movs	r2, r3
   20c30:	2301      	movs	r3, #1
   20c32:	4053      	eors	r3, r2
   20c34:	b2db      	uxtb	r3, r3
   20c36:	2b00      	cmp	r3, #0
   20c38:	d001      	beq.n	20c3e <sd_acmd51+0x2a>
		return false;
   20c3a:	2300      	movs	r3, #0
   20c3c:	e059      	b.n	20cf2 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   20c3e:	4832      	ldr	r0, [pc, #200]	; (20d08 <sd_acmd51+0xf4>)
   20c40:	2301      	movs	r3, #1
   20c42:	9300      	str	r3, [sp, #0]
   20c44:	2301      	movs	r3, #1
   20c46:	2208      	movs	r2, #8
   20c48:	2100      	movs	r1, #0
   20c4a:	4c30      	ldr	r4, [pc, #192]	; (20d0c <sd_acmd51+0xf8>)
   20c4c:	47a0      	blx	r4
   20c4e:	0003      	movs	r3, r0
   20c50:	001a      	movs	r2, r3
   20c52:	2301      	movs	r3, #1
   20c54:	4053      	eors	r3, r2
   20c56:	b2db      	uxtb	r3, r3
   20c58:	2b00      	cmp	r3, #0
   20c5a:	d001      	beq.n	20c60 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   20c5c:	2300      	movs	r3, #0
   20c5e:	e048      	b.n	20cf2 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   20c60:	003b      	movs	r3, r7
   20c62:	2101      	movs	r1, #1
   20c64:	0018      	movs	r0, r3
   20c66:	4b2a      	ldr	r3, [pc, #168]	; (20d10 <sd_acmd51+0xfc>)
   20c68:	4798      	blx	r3
   20c6a:	0003      	movs	r3, r0
   20c6c:	001a      	movs	r2, r3
   20c6e:	2301      	movs	r3, #1
   20c70:	4053      	eors	r3, r2
   20c72:	b2db      	uxtb	r3, r3
   20c74:	2b00      	cmp	r3, #0
   20c76:	d001      	beq.n	20c7c <sd_acmd51+0x68>
		return false;
   20c78:	2300      	movs	r3, #0
   20c7a:	e03a      	b.n	20cf2 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   20c7c:	4b25      	ldr	r3, [pc, #148]	; (20d14 <sd_acmd51+0x100>)
   20c7e:	4798      	blx	r3
   20c80:	0003      	movs	r3, r0
   20c82:	001a      	movs	r2, r3
   20c84:	2301      	movs	r3, #1
   20c86:	4053      	eors	r3, r2
   20c88:	b2db      	uxtb	r3, r3
   20c8a:	2b00      	cmp	r3, #0
   20c8c:	d001      	beq.n	20c92 <sd_acmd51+0x7e>
		return false;
   20c8e:	2300      	movs	r3, #0
   20c90:	e02f      	b.n	20cf2 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   20c92:	0038      	movs	r0, r7
   20c94:	2304      	movs	r3, #4
   20c96:	2238      	movs	r2, #56	; 0x38
   20c98:	2140      	movs	r1, #64	; 0x40
   20c9a:	4c1f      	ldr	r4, [pc, #124]	; (20d18 <sd_acmd51+0x104>)
   20c9c:	47a0      	blx	r4
   20c9e:	0003      	movs	r3, r0
   20ca0:	2b01      	cmp	r3, #1
   20ca2:	d008      	beq.n	20cb6 <sd_acmd51+0xa2>
   20ca4:	d302      	bcc.n	20cac <sd_acmd51+0x98>
   20ca6:	2b02      	cmp	r3, #2
   20ca8:	d00a      	beq.n	20cc0 <sd_acmd51+0xac>
   20caa:	e01c      	b.n	20ce6 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   20cac:	4b13      	ldr	r3, [pc, #76]	; (20cfc <sd_acmd51+0xe8>)
   20cae:	681b      	ldr	r3, [r3, #0]
   20cb0:	2210      	movs	r2, #16
   20cb2:	731a      	strb	r2, [r3, #12]
		break;
   20cb4:	e01c      	b.n	20cf0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   20cb6:	4b11      	ldr	r3, [pc, #68]	; (20cfc <sd_acmd51+0xe8>)
   20cb8:	681b      	ldr	r3, [r3, #0]
   20cba:	221a      	movs	r2, #26
   20cbc:	731a      	strb	r2, [r3, #12]
		break;
   20cbe:	e017      	b.n	20cf0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   20cc0:	0038      	movs	r0, r7
   20cc2:	2301      	movs	r3, #1
   20cc4:	222f      	movs	r2, #47	; 0x2f
   20cc6:	2140      	movs	r1, #64	; 0x40
   20cc8:	4c13      	ldr	r4, [pc, #76]	; (20d18 <sd_acmd51+0x104>)
   20cca:	47a0      	blx	r4
   20ccc:	0003      	movs	r3, r0
   20cce:	2b01      	cmp	r3, #1
   20cd0:	d104      	bne.n	20cdc <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   20cd2:	4b0a      	ldr	r3, [pc, #40]	; (20cfc <sd_acmd51+0xe8>)
   20cd4:	681b      	ldr	r3, [r3, #0]
   20cd6:	2230      	movs	r2, #48	; 0x30
   20cd8:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   20cda:	e009      	b.n	20cf0 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   20cdc:	4b07      	ldr	r3, [pc, #28]	; (20cfc <sd_acmd51+0xe8>)
   20cde:	681b      	ldr	r3, [r3, #0]
   20ce0:	2220      	movs	r2, #32
   20ce2:	731a      	strb	r2, [r3, #12]
		break;
   20ce4:	e004      	b.n	20cf0 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   20ce6:	4b05      	ldr	r3, [pc, #20]	; (20cfc <sd_acmd51+0xe8>)
   20ce8:	681b      	ldr	r3, [r3, #0]
   20cea:	2210      	movs	r2, #16
   20cec:	731a      	strb	r2, [r3, #12]
		break;
   20cee:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   20cf0:	2301      	movs	r3, #1
}
   20cf2:	0018      	movs	r0, r3
   20cf4:	46bd      	mov	sp, r7
   20cf6:	b003      	add	sp, #12
   20cf8:	bd90      	pop	{r4, r7, pc}
   20cfa:	46c0      	nop			; (mov r8, r8)
   20cfc:	200040e8 	.word	0x200040e8
   20d00:	00001137 	.word	0x00001137
   20d04:	00022029 	.word	0x00022029
   20d08:	00081133 	.word	0x00081133
   20d0c:	00022051 	.word	0x00022051
   20d10:	00022321 	.word	0x00022321
   20d14:	000223c5 	.word	0x000223c5
   20d18:	00020499 	.word	0x00020499

00020d1c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   20d1c:	b580      	push	{r7, lr}
   20d1e:	b082      	sub	sp, #8
   20d20:	af00      	add	r7, sp, #0
   20d22:	0002      	movs	r2, r0
   20d24:	1dfb      	adds	r3, r7, #7
   20d26:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   20d28:	1dfb      	adds	r3, r7, #7
   20d2a:	781b      	ldrb	r3, [r3, #0]
   20d2c:	2b00      	cmp	r3, #0
   20d2e:	d001      	beq.n	20d34 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   20d30:	2304      	movs	r3, #4
   20d32:	e047      	b.n	20dc4 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   20d34:	1dfb      	adds	r3, r7, #7
   20d36:	781b      	ldrb	r3, [r3, #0]
   20d38:	4a24      	ldr	r2, [pc, #144]	; (20dcc <sd_mmc_select_slot+0xb0>)
   20d3a:	015b      	lsls	r3, r3, #5
   20d3c:	18d3      	adds	r3, r2, r3
   20d3e:	330a      	adds	r3, #10
   20d40:	781b      	ldrb	r3, [r3, #0]
   20d42:	2b04      	cmp	r3, #4
   20d44:	d008      	beq.n	20d58 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   20d46:	1dfb      	adds	r3, r7, #7
   20d48:	781b      	ldrb	r3, [r3, #0]
   20d4a:	4a20      	ldr	r2, [pc, #128]	; (20dcc <sd_mmc_select_slot+0xb0>)
   20d4c:	015b      	lsls	r3, r3, #5
   20d4e:	18d3      	adds	r3, r2, r3
   20d50:	330a      	adds	r3, #10
   20d52:	781b      	ldrb	r3, [r3, #0]
   20d54:	2b03      	cmp	r3, #3
   20d56:	d11d      	bne.n	20d94 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   20d58:	1dfb      	adds	r3, r7, #7
   20d5a:	781b      	ldrb	r3, [r3, #0]
   20d5c:	4a1b      	ldr	r2, [pc, #108]	; (20dcc <sd_mmc_select_slot+0xb0>)
   20d5e:	015b      	lsls	r3, r3, #5
   20d60:	18d3      	adds	r3, r2, r3
   20d62:	330a      	adds	r3, #10
   20d64:	2202      	movs	r2, #2
   20d66:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   20d68:	1dfb      	adds	r3, r7, #7
   20d6a:	781a      	ldrb	r2, [r3, #0]
   20d6c:	4b17      	ldr	r3, [pc, #92]	; (20dcc <sd_mmc_select_slot+0xb0>)
   20d6e:	0152      	lsls	r2, r2, #5
   20d70:	4917      	ldr	r1, [pc, #92]	; (20dd0 <sd_mmc_select_slot+0xb4>)
   20d72:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   20d74:	1dfb      	adds	r3, r7, #7
   20d76:	781b      	ldrb	r3, [r3, #0]
   20d78:	4a14      	ldr	r2, [pc, #80]	; (20dcc <sd_mmc_select_slot+0xb0>)
   20d7a:	015b      	lsls	r3, r3, #5
   20d7c:	18d3      	adds	r3, r2, r3
   20d7e:	330d      	adds	r3, #13
   20d80:	2201      	movs	r2, #1
   20d82:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   20d84:	1dfb      	adds	r3, r7, #7
   20d86:	781b      	ldrb	r3, [r3, #0]
   20d88:	4a10      	ldr	r2, [pc, #64]	; (20dcc <sd_mmc_select_slot+0xb0>)
   20d8a:	015b      	lsls	r3, r3, #5
   20d8c:	18d3      	adds	r3, r2, r3
   20d8e:	331e      	adds	r3, #30
   20d90:	2200      	movs	r2, #0
   20d92:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   20d94:	4b0f      	ldr	r3, [pc, #60]	; (20dd4 <sd_mmc_select_slot+0xb8>)
   20d96:	1dfa      	adds	r2, r7, #7
   20d98:	7812      	ldrb	r2, [r2, #0]
   20d9a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   20d9c:	1dfb      	adds	r3, r7, #7
   20d9e:	781b      	ldrb	r3, [r3, #0]
   20da0:	015a      	lsls	r2, r3, #5
   20da2:	4b0a      	ldr	r3, [pc, #40]	; (20dcc <sd_mmc_select_slot+0xb0>)
   20da4:	18d2      	adds	r2, r2, r3
   20da6:	4b0c      	ldr	r3, [pc, #48]	; (20dd8 <sd_mmc_select_slot+0xbc>)
   20da8:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   20daa:	4b0c      	ldr	r3, [pc, #48]	; (20ddc <sd_mmc_select_slot+0xc0>)
   20dac:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   20dae:	1dfb      	adds	r3, r7, #7
   20db0:	781b      	ldrb	r3, [r3, #0]
   20db2:	4a06      	ldr	r2, [pc, #24]	; (20dcc <sd_mmc_select_slot+0xb0>)
   20db4:	015b      	lsls	r3, r3, #5
   20db6:	18d3      	adds	r3, r2, r3
   20db8:	330a      	adds	r3, #10
   20dba:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   20dbc:	3b02      	subs	r3, #2
   20dbe:	425a      	negs	r2, r3
   20dc0:	4153      	adcs	r3, r2
   20dc2:	b2db      	uxtb	r3, r3
}
   20dc4:	0018      	movs	r0, r3
   20dc6:	46bd      	mov	sp, r7
   20dc8:	b002      	add	sp, #8
   20dca:	bd80      	pop	{r7, pc}
   20dcc:	200040c4 	.word	0x200040c4
   20dd0:	00061a80 	.word	0x00061a80
   20dd4:	200040e4 	.word	0x200040e4
   20dd8:	200040e8 	.word	0x200040e8
   20ddc:	00020de1 	.word	0x00020de1

00020de0 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   20de0:	b5b0      	push	{r4, r5, r7, lr}
   20de2:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   20de4:	4b09      	ldr	r3, [pc, #36]	; (20e0c <sd_mmc_configure_slot+0x2c>)
   20de6:	7818      	ldrb	r0, [r3, #0]
   20de8:	4b09      	ldr	r3, [pc, #36]	; (20e10 <sd_mmc_configure_slot+0x30>)
   20dea:	681b      	ldr	r3, [r3, #0]
   20dec:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   20dee:	4b08      	ldr	r3, [pc, #32]	; (20e10 <sd_mmc_configure_slot+0x30>)
   20df0:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   20df2:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   20df4:	4b06      	ldr	r3, [pc, #24]	; (20e10 <sd_mmc_configure_slot+0x30>)
   20df6:	681b      	ldr	r3, [r3, #0]
   20df8:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   20dfa:	1e5c      	subs	r4, r3, #1
   20dfc:	41a3      	sbcs	r3, r4
   20dfe:	b2db      	uxtb	r3, r3
   20e00:	4c04      	ldr	r4, [pc, #16]	; (20e14 <sd_mmc_configure_slot+0x34>)
   20e02:	47a0      	blx	r4
}
   20e04:	46c0      	nop			; (mov r8, r8)
   20e06:	46bd      	mov	sp, r7
   20e08:	bdb0      	pop	{r4, r5, r7, pc}
   20e0a:	46c0      	nop			; (mov r8, r8)
   20e0c:	200040e4 	.word	0x200040e4
   20e10:	200040e8 	.word	0x200040e8
   20e14:	00021f11 	.word	0x00021f11

00020e18 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   20e18:	b580      	push	{r7, lr}
   20e1a:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   20e1c:	4b05      	ldr	r3, [pc, #20]	; (20e34 <sd_mmc_deselect_slot+0x1c>)
   20e1e:	781b      	ldrb	r3, [r3, #0]
   20e20:	2b00      	cmp	r3, #0
   20e22:	d104      	bne.n	20e2e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   20e24:	4b03      	ldr	r3, [pc, #12]	; (20e34 <sd_mmc_deselect_slot+0x1c>)
   20e26:	781b      	ldrb	r3, [r3, #0]
   20e28:	0018      	movs	r0, r3
   20e2a:	4b03      	ldr	r3, [pc, #12]	; (20e38 <sd_mmc_deselect_slot+0x20>)
   20e2c:	4798      	blx	r3
	}
}
   20e2e:	46c0      	nop			; (mov r8, r8)
   20e30:	46bd      	mov	sp, r7
   20e32:	bd80      	pop	{r7, pc}
   20e34:	200040e4 	.word	0x200040e4
   20e38:	00021f99 	.word	0x00021f99

00020e3c <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   20e3c:	b580      	push	{r7, lr}
   20e3e:	b082      	sub	sp, #8
   20e40:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   20e42:	1dfb      	adds	r3, r7, #7
   20e44:	2200      	movs	r2, #0
   20e46:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   20e48:	4b59      	ldr	r3, [pc, #356]	; (20fb0 <sd_mmc_spi_card_init+0x174>)
   20e4a:	681b      	ldr	r3, [r3, #0]
   20e4c:	2201      	movs	r2, #1
   20e4e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   20e50:	4b57      	ldr	r3, [pc, #348]	; (20fb0 <sd_mmc_spi_card_init+0x174>)
   20e52:	681b      	ldr	r3, [r3, #0]
   20e54:	2200      	movs	r2, #0
   20e56:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   20e58:	4b55      	ldr	r3, [pc, #340]	; (20fb0 <sd_mmc_spi_card_init+0x174>)
   20e5a:	681b      	ldr	r3, [r3, #0]
   20e5c:	2200      	movs	r2, #0
   20e5e:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   20e60:	4b54      	ldr	r3, [pc, #336]	; (20fb4 <sd_mmc_spi_card_init+0x178>)
   20e62:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   20e64:	2388      	movs	r3, #136	; 0x88
   20e66:	015b      	lsls	r3, r3, #5
   20e68:	2100      	movs	r1, #0
   20e6a:	0018      	movs	r0, r3
   20e6c:	4b52      	ldr	r3, [pc, #328]	; (20fb8 <sd_mmc_spi_card_init+0x17c>)
   20e6e:	4798      	blx	r3
   20e70:	0003      	movs	r3, r0
   20e72:	001a      	movs	r2, r3
   20e74:	2301      	movs	r3, #1
   20e76:	4053      	eors	r3, r2
   20e78:	b2db      	uxtb	r3, r3
   20e7a:	2b00      	cmp	r3, #0
   20e7c:	d001      	beq.n	20e82 <sd_mmc_spi_card_init+0x46>
		return false;
   20e7e:	2300      	movs	r3, #0
   20e80:	e092      	b.n	20fa8 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   20e82:	1dfb      	adds	r3, r7, #7
   20e84:	0018      	movs	r0, r3
   20e86:	4b4d      	ldr	r3, [pc, #308]	; (20fbc <sd_mmc_spi_card_init+0x180>)
   20e88:	4798      	blx	r3
   20e8a:	0003      	movs	r3, r0
   20e8c:	001a      	movs	r2, r3
   20e8e:	2301      	movs	r3, #1
   20e90:	4053      	eors	r3, r2
   20e92:	b2db      	uxtb	r3, r3
   20e94:	2b00      	cmp	r3, #0
   20e96:	d001      	beq.n	20e9c <sd_mmc_spi_card_init+0x60>
		return false;
   20e98:	2300      	movs	r3, #0
   20e9a:	e085      	b.n	20fa8 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   20e9c:	4b48      	ldr	r3, [pc, #288]	; (20fc0 <sd_mmc_spi_card_init+0x184>)
   20e9e:	4798      	blx	r3
   20ea0:	0003      	movs	r3, r0
   20ea2:	001a      	movs	r2, r3
   20ea4:	2301      	movs	r3, #1
   20ea6:	4053      	eors	r3, r2
   20ea8:	b2db      	uxtb	r3, r3
   20eaa:	2b00      	cmp	r3, #0
   20eac:	d001      	beq.n	20eb2 <sd_mmc_spi_card_init+0x76>
		return false;
   20eae:	2300      	movs	r3, #0
   20eb0:	e07a      	b.n	20fa8 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   20eb2:	4b3f      	ldr	r3, [pc, #252]	; (20fb0 <sd_mmc_spi_card_init+0x174>)
   20eb4:	681b      	ldr	r3, [r3, #0]
   20eb6:	7adb      	ldrb	r3, [r3, #11]
   20eb8:	001a      	movs	r2, r3
   20eba:	2301      	movs	r3, #1
   20ebc:	4013      	ands	r3, r2
   20ebe:	d021      	beq.n	20f04 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   20ec0:	1dfb      	adds	r3, r7, #7
   20ec2:	781b      	ldrb	r3, [r3, #0]
   20ec4:	0018      	movs	r0, r3
   20ec6:	4b3f      	ldr	r3, [pc, #252]	; (20fc4 <sd_mmc_spi_card_init+0x188>)
   20ec8:	4798      	blx	r3
   20eca:	0003      	movs	r3, r0
   20ecc:	001a      	movs	r2, r3
   20ece:	2301      	movs	r3, #1
   20ed0:	4053      	eors	r3, r2
   20ed2:	b2db      	uxtb	r3, r3
   20ed4:	2b00      	cmp	r3, #0
   20ed6:	d007      	beq.n	20ee8 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   20ed8:	4b35      	ldr	r3, [pc, #212]	; (20fb0 <sd_mmc_spi_card_init+0x174>)
   20eda:	681b      	ldr	r3, [r3, #0]
   20edc:	2202      	movs	r2, #2
   20ede:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   20ee0:	4b39      	ldr	r3, [pc, #228]	; (20fc8 <sd_mmc_spi_card_init+0x18c>)
   20ee2:	4798      	blx	r3
   20ee4:	0003      	movs	r3, r0
   20ee6:	e05f      	b.n	20fa8 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   20ee8:	4b38      	ldr	r3, [pc, #224]	; (20fcc <sd_mmc_spi_card_init+0x190>)
   20eea:	2100      	movs	r1, #0
   20eec:	0018      	movs	r0, r3
   20eee:	4b32      	ldr	r3, [pc, #200]	; (20fb8 <sd_mmc_spi_card_init+0x17c>)
   20ef0:	4798      	blx	r3
   20ef2:	0003      	movs	r3, r0
   20ef4:	001a      	movs	r2, r3
   20ef6:	2301      	movs	r3, #1
   20ef8:	4053      	eors	r3, r2
   20efa:	b2db      	uxtb	r3, r3
   20efc:	2b00      	cmp	r3, #0
   20efe:	d001      	beq.n	20f04 <sd_mmc_spi_card_init+0xc8>
			return false;
   20f00:	2300      	movs	r3, #0
   20f02:	e051      	b.n	20fa8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   20f04:	4b2a      	ldr	r3, [pc, #168]	; (20fb0 <sd_mmc_spi_card_init+0x174>)
   20f06:	681b      	ldr	r3, [r3, #0]
   20f08:	7adb      	ldrb	r3, [r3, #11]
   20f0a:	001a      	movs	r2, r3
   20f0c:	2301      	movs	r3, #1
   20f0e:	4013      	ands	r3, r2
   20f10:	d017      	beq.n	20f42 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   20f12:	4b2f      	ldr	r3, [pc, #188]	; (20fd0 <sd_mmc_spi_card_init+0x194>)
   20f14:	4798      	blx	r3
   20f16:	0003      	movs	r3, r0
   20f18:	001a      	movs	r2, r3
   20f1a:	2301      	movs	r3, #1
   20f1c:	4053      	eors	r3, r2
   20f1e:	b2db      	uxtb	r3, r3
   20f20:	2b00      	cmp	r3, #0
   20f22:	d001      	beq.n	20f28 <sd_mmc_spi_card_init+0xec>
			return false;
   20f24:	2300      	movs	r3, #0
   20f26:	e03f      	b.n	20fa8 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   20f28:	4b2a      	ldr	r3, [pc, #168]	; (20fd4 <sd_mmc_spi_card_init+0x198>)
   20f2a:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   20f2c:	4b2a      	ldr	r3, [pc, #168]	; (20fd8 <sd_mmc_spi_card_init+0x19c>)
   20f2e:	4798      	blx	r3
   20f30:	0003      	movs	r3, r0
   20f32:	001a      	movs	r2, r3
   20f34:	2301      	movs	r3, #1
   20f36:	4053      	eors	r3, r2
   20f38:	b2db      	uxtb	r3, r3
   20f3a:	2b00      	cmp	r3, #0
   20f3c:	d001      	beq.n	20f42 <sd_mmc_spi_card_init+0x106>
			return false;
   20f3e:	2300      	movs	r3, #0
   20f40:	e032      	b.n	20fa8 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   20f42:	4b1b      	ldr	r3, [pc, #108]	; (20fb0 <sd_mmc_spi_card_init+0x174>)
   20f44:	681b      	ldr	r3, [r3, #0]
   20f46:	7adb      	ldrb	r3, [r3, #11]
   20f48:	001a      	movs	r2, r3
   20f4a:	2301      	movs	r3, #1
   20f4c:	4013      	ands	r3, r2
   20f4e:	d016      	beq.n	20f7e <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   20f50:	4b17      	ldr	r3, [pc, #92]	; (20fb0 <sd_mmc_spi_card_init+0x174>)
   20f52:	681b      	ldr	r3, [r3, #0]
   20f54:	7adb      	ldrb	r3, [r3, #11]
   20f56:	001a      	movs	r2, r3
   20f58:	2308      	movs	r3, #8
   20f5a:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   20f5c:	d10f      	bne.n	20f7e <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   20f5e:	2380      	movs	r3, #128	; 0x80
   20f60:	009b      	lsls	r3, r3, #2
   20f62:	4a1e      	ldr	r2, [pc, #120]	; (20fdc <sd_mmc_spi_card_init+0x1a0>)
   20f64:	0019      	movs	r1, r3
   20f66:	0010      	movs	r0, r2
   20f68:	4b13      	ldr	r3, [pc, #76]	; (20fb8 <sd_mmc_spi_card_init+0x17c>)
   20f6a:	4798      	blx	r3
   20f6c:	0003      	movs	r3, r0
   20f6e:	001a      	movs	r2, r3
   20f70:	2301      	movs	r3, #1
   20f72:	4053      	eors	r3, r2
   20f74:	b2db      	uxtb	r3, r3
   20f76:	2b00      	cmp	r3, #0
   20f78:	d001      	beq.n	20f7e <sd_mmc_spi_card_init+0x142>
			return false;
   20f7a:	2300      	movs	r3, #0
   20f7c:	e014      	b.n	20fa8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   20f7e:	4b0c      	ldr	r3, [pc, #48]	; (20fb0 <sd_mmc_spi_card_init+0x174>)
   20f80:	681b      	ldr	r3, [r3, #0]
   20f82:	7adb      	ldrb	r3, [r3, #11]
   20f84:	001a      	movs	r2, r3
   20f86:	2301      	movs	r3, #1
   20f88:	4013      	ands	r3, r2
   20f8a:	d00a      	beq.n	20fa2 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   20f8c:	4b14      	ldr	r3, [pc, #80]	; (20fe0 <sd_mmc_spi_card_init+0x1a4>)
   20f8e:	4798      	blx	r3
   20f90:	0003      	movs	r3, r0
   20f92:	001a      	movs	r2, r3
   20f94:	2301      	movs	r3, #1
   20f96:	4053      	eors	r3, r2
   20f98:	b2db      	uxtb	r3, r3
   20f9a:	2b00      	cmp	r3, #0
   20f9c:	d001      	beq.n	20fa2 <sd_mmc_spi_card_init+0x166>
			return false;
   20f9e:	2300      	movs	r3, #0
   20fa0:	e002      	b.n	20fa8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   20fa2:	4b10      	ldr	r3, [pc, #64]	; (20fe4 <sd_mmc_spi_card_init+0x1a8>)
   20fa4:	4798      	blx	r3
	return true;
   20fa6:	2301      	movs	r3, #1
}
   20fa8:	0018      	movs	r0, r3
   20faa:	46bd      	mov	sp, r7
   20fac:	b002      	add	sp, #8
   20fae:	bd80      	pop	{r7, pc}
   20fb0:	200040e8 	.word	0x200040e8
   20fb4:	00021fdd 	.word	0x00021fdd
   20fb8:	00022029 	.word	0x00022029
   20fbc:	00020791 	.word	0x00020791
   20fc0:	00020785 	.word	0x00020785
   20fc4:	000206a1 	.word	0x000206a1
   20fc8:	00020fe9 	.word	0x00020fe9
   20fcc:	0000113b 	.word	0x0000113b
   20fd0:	0002092d 	.word	0x0002092d
   20fd4:	00020acd 	.word	0x00020acd
   20fd8:	00020c15 	.word	0x00020c15
   20fdc:	00001110 	.word	0x00001110
   20fe0:	00020bb9 	.word	0x00020bb9
   20fe4:	00020de1 	.word	0x00020de1

00020fe8 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   20fe8:	b580      	push	{r7, lr}
   20fea:	b082      	sub	sp, #8
   20fec:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   20fee:	2388      	movs	r3, #136	; 0x88
   20ff0:	015b      	lsls	r3, r3, #5
   20ff2:	2100      	movs	r1, #0
   20ff4:	0018      	movs	r0, r3
   20ff6:	4b32      	ldr	r3, [pc, #200]	; (210c0 <sd_mmc_spi_install_mmc+0xd8>)
   20ff8:	4798      	blx	r3
   20ffa:	0003      	movs	r3, r0
   20ffc:	001a      	movs	r2, r3
   20ffe:	2301      	movs	r3, #1
   21000:	4053      	eors	r3, r2
   21002:	b2db      	uxtb	r3, r3
   21004:	2b00      	cmp	r3, #0
   21006:	d001      	beq.n	2100c <sd_mmc_spi_install_mmc+0x24>
		return false;
   21008:	2300      	movs	r3, #0
   2100a:	e055      	b.n	210b8 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   2100c:	4b2d      	ldr	r3, [pc, #180]	; (210c4 <sd_mmc_spi_install_mmc+0xdc>)
   2100e:	4798      	blx	r3
   21010:	0003      	movs	r3, r0
   21012:	001a      	movs	r2, r3
   21014:	2301      	movs	r3, #1
   21016:	4053      	eors	r3, r2
   21018:	b2db      	uxtb	r3, r3
   2101a:	2b00      	cmp	r3, #0
   2101c:	d001      	beq.n	21022 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   2101e:	2300      	movs	r3, #0
   21020:	e04a      	b.n	210b8 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   21022:	4b29      	ldr	r3, [pc, #164]	; (210c8 <sd_mmc_spi_install_mmc+0xe0>)
   21024:	2100      	movs	r1, #0
   21026:	0018      	movs	r0, r3
   21028:	4b25      	ldr	r3, [pc, #148]	; (210c0 <sd_mmc_spi_install_mmc+0xd8>)
   2102a:	4798      	blx	r3
   2102c:	0003      	movs	r3, r0
   2102e:	001a      	movs	r2, r3
   21030:	2301      	movs	r3, #1
   21032:	4053      	eors	r3, r2
   21034:	b2db      	uxtb	r3, r3
   21036:	2b00      	cmp	r3, #0
   21038:	d001      	beq.n	2103e <sd_mmc_spi_install_mmc+0x56>
		return false;
   2103a:	2300      	movs	r3, #0
   2103c:	e03c      	b.n	210b8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   2103e:	4b23      	ldr	r3, [pc, #140]	; (210cc <sd_mmc_spi_install_mmc+0xe4>)
   21040:	4798      	blx	r3
   21042:	0003      	movs	r3, r0
   21044:	001a      	movs	r2, r3
   21046:	2301      	movs	r3, #1
   21048:	4053      	eors	r3, r2
   2104a:	b2db      	uxtb	r3, r3
   2104c:	2b00      	cmp	r3, #0
   2104e:	d001      	beq.n	21054 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   21050:	2300      	movs	r3, #0
   21052:	e031      	b.n	210b8 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   21054:	4b1e      	ldr	r3, [pc, #120]	; (210d0 <sd_mmc_spi_install_mmc+0xe8>)
   21056:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   21058:	4b1e      	ldr	r3, [pc, #120]	; (210d4 <sd_mmc_spi_install_mmc+0xec>)
   2105a:	681b      	ldr	r3, [r3, #0]
   2105c:	7b1b      	ldrb	r3, [r3, #12]
   2105e:	2b3f      	cmp	r3, #63	; 0x3f
   21060:	d90c      	bls.n	2107c <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   21062:	1dfb      	adds	r3, r7, #7
   21064:	0018      	movs	r0, r3
   21066:	4b1c      	ldr	r3, [pc, #112]	; (210d8 <sd_mmc_spi_install_mmc+0xf0>)
   21068:	4798      	blx	r3
   2106a:	0003      	movs	r3, r0
   2106c:	001a      	movs	r2, r3
   2106e:	2301      	movs	r3, #1
   21070:	4053      	eors	r3, r2
   21072:	b2db      	uxtb	r3, r3
   21074:	2b00      	cmp	r3, #0
   21076:	d001      	beq.n	2107c <sd_mmc_spi_install_mmc+0x94>
			return false;
   21078:	2300      	movs	r3, #0
   2107a:	e01d      	b.n	210b8 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   2107c:	2380      	movs	r3, #128	; 0x80
   2107e:	009b      	lsls	r3, r3, #2
   21080:	4a16      	ldr	r2, [pc, #88]	; (210dc <sd_mmc_spi_install_mmc+0xf4>)
   21082:	0019      	movs	r1, r3
   21084:	0010      	movs	r0, r2
   21086:	4b0e      	ldr	r3, [pc, #56]	; (210c0 <sd_mmc_spi_install_mmc+0xd8>)
   21088:	4798      	blx	r3
   2108a:	0003      	movs	r3, r0
   2108c:	001a      	movs	r2, r3
   2108e:	2301      	movs	r3, #1
   21090:	4053      	eors	r3, r2
   21092:	b2db      	uxtb	r3, r3
   21094:	2b00      	cmp	r3, #0
   21096:	d001      	beq.n	2109c <sd_mmc_spi_install_mmc+0xb4>
		return false;
   21098:	2300      	movs	r3, #0
   2109a:	e00d      	b.n	210b8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   2109c:	4b10      	ldr	r3, [pc, #64]	; (210e0 <sd_mmc_spi_install_mmc+0xf8>)
   2109e:	4798      	blx	r3
   210a0:	0003      	movs	r3, r0
   210a2:	001a      	movs	r2, r3
   210a4:	2301      	movs	r3, #1
   210a6:	4053      	eors	r3, r2
   210a8:	b2db      	uxtb	r3, r3
   210aa:	2b00      	cmp	r3, #0
   210ac:	d001      	beq.n	210b2 <sd_mmc_spi_install_mmc+0xca>
		return false;
   210ae:	2300      	movs	r3, #0
   210b0:	e002      	b.n	210b8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   210b2:	4b0c      	ldr	r3, [pc, #48]	; (210e4 <sd_mmc_spi_install_mmc+0xfc>)
   210b4:	4798      	blx	r3
	return true;
   210b6:	2301      	movs	r3, #1
}
   210b8:	0018      	movs	r0, r3
   210ba:	46bd      	mov	sp, r7
   210bc:	b002      	add	sp, #8
   210be:	bd80      	pop	{r7, pc}
   210c0:	00022029 	.word	0x00022029
   210c4:	000205f5 	.word	0x000205f5
   210c8:	0000113b 	.word	0x0000113b
   210cc:	0002092d 	.word	0x0002092d
   210d0:	0002099d 	.word	0x0002099d
   210d4:	200040e8 	.word	0x200040e8
   210d8:	00020801 	.word	0x00020801
   210dc:	00001110 	.word	0x00001110
   210e0:	00020bb9 	.word	0x00020bb9
   210e4:	00020de1 	.word	0x00020de1

000210e8 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   210e8:	b580      	push	{r7, lr}
   210ea:	b082      	sub	sp, #8
   210ec:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   210ee:	1dfb      	adds	r3, r7, #7
   210f0:	2200      	movs	r2, #0
   210f2:	701a      	strb	r2, [r3, #0]
   210f4:	e00c      	b.n	21110 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   210f6:	1dfb      	adds	r3, r7, #7
   210f8:	781b      	ldrb	r3, [r3, #0]
   210fa:	4a0c      	ldr	r2, [pc, #48]	; (2112c <sd_mmc_init+0x44>)
   210fc:	015b      	lsls	r3, r3, #5
   210fe:	18d3      	adds	r3, r2, r3
   21100:	330a      	adds	r3, #10
   21102:	2204      	movs	r2, #4
   21104:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   21106:	1dfb      	adds	r3, r7, #7
   21108:	781a      	ldrb	r2, [r3, #0]
   2110a:	1dfb      	adds	r3, r7, #7
   2110c:	3201      	adds	r2, #1
   2110e:	701a      	strb	r2, [r3, #0]
   21110:	1dfb      	adds	r3, r7, #7
   21112:	781b      	ldrb	r3, [r3, #0]
   21114:	2b00      	cmp	r3, #0
   21116:	d0ee      	beq.n	210f6 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   21118:	4b05      	ldr	r3, [pc, #20]	; (21130 <sd_mmc_init+0x48>)
   2111a:	22ff      	movs	r2, #255	; 0xff
   2111c:	701a      	strb	r2, [r3, #0]
	driver_init();
   2111e:	4b05      	ldr	r3, [pc, #20]	; (21134 <sd_mmc_init+0x4c>)
   21120:	4798      	blx	r3
}
   21122:	46c0      	nop			; (mov r8, r8)
   21124:	46bd      	mov	sp, r7
   21126:	b002      	add	sp, #8
   21128:	bd80      	pop	{r7, pc}
   2112a:	46c0      	nop			; (mov r8, r8)
   2112c:	200040c4 	.word	0x200040c4
   21130:	200040e4 	.word	0x200040e4
   21134:	00021e49 	.word	0x00021e49

00021138 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   21138:	b590      	push	{r4, r7, lr}
   2113a:	b085      	sub	sp, #20
   2113c:	af00      	add	r7, sp, #0
   2113e:	0002      	movs	r2, r0
   21140:	1dfb      	adds	r3, r7, #7
   21142:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   21144:	230f      	movs	r3, #15
   21146:	18fc      	adds	r4, r7, r3
   21148:	1dfb      	adds	r3, r7, #7
   2114a:	781b      	ldrb	r3, [r3, #0]
   2114c:	0018      	movs	r0, r3
   2114e:	4b13      	ldr	r3, [pc, #76]	; (2119c <sd_mmc_check+0x64>)
   21150:	4798      	blx	r3
   21152:	0003      	movs	r3, r0
   21154:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   21156:	230f      	movs	r3, #15
   21158:	18fb      	adds	r3, r7, r3
   2115a:	781b      	ldrb	r3, [r3, #0]
   2115c:	2b01      	cmp	r3, #1
   2115e:	d005      	beq.n	2116c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   21160:	4b0f      	ldr	r3, [pc, #60]	; (211a0 <sd_mmc_check+0x68>)
   21162:	4798      	blx	r3
		return sd_mmc_err;
   21164:	230f      	movs	r3, #15
   21166:	18fb      	adds	r3, r7, r3
   21168:	781b      	ldrb	r3, [r3, #0]
   2116a:	e012      	b.n	21192 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   2116c:	4b0d      	ldr	r3, [pc, #52]	; (211a4 <sd_mmc_check+0x6c>)
   2116e:	4798      	blx	r3
   21170:	1e03      	subs	r3, r0, #0
   21172:	d007      	beq.n	21184 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   21174:	4b0c      	ldr	r3, [pc, #48]	; (211a8 <sd_mmc_check+0x70>)
   21176:	681b      	ldr	r3, [r3, #0]
   21178:	2200      	movs	r2, #0
   2117a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   2117c:	4b08      	ldr	r3, [pc, #32]	; (211a0 <sd_mmc_check+0x68>)
   2117e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   21180:	2301      	movs	r3, #1
   21182:	e006      	b.n	21192 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   21184:	4b08      	ldr	r3, [pc, #32]	; (211a8 <sd_mmc_check+0x70>)
   21186:	681b      	ldr	r3, [r3, #0]
   21188:	2203      	movs	r2, #3
   2118a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   2118c:	4b04      	ldr	r3, [pc, #16]	; (211a0 <sd_mmc_check+0x68>)
   2118e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   21190:	2303      	movs	r3, #3
}
   21192:	0018      	movs	r0, r3
   21194:	46bd      	mov	sp, r7
   21196:	b005      	add	sp, #20
   21198:	bd90      	pop	{r4, r7, pc}
   2119a:	46c0      	nop			; (mov r8, r8)
   2119c:	00020d1d 	.word	0x00020d1d
   211a0:	00020e19 	.word	0x00020e19
   211a4:	00020e3d 	.word	0x00020e3d
   211a8:	200040e8 	.word	0x200040e8

000211ac <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   211ac:	b580      	push	{r7, lr}
   211ae:	b082      	sub	sp, #8
   211b0:	af00      	add	r7, sp, #0
   211b2:	0002      	movs	r2, r0
   211b4:	1dfb      	adds	r3, r7, #7
   211b6:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   211b8:	1dfb      	adds	r3, r7, #7
   211ba:	781b      	ldrb	r3, [r3, #0]
   211bc:	0018      	movs	r0, r3
   211be:	4b07      	ldr	r3, [pc, #28]	; (211dc <sd_mmc_get_type+0x30>)
   211c0:	4798      	blx	r3
   211c2:	1e03      	subs	r3, r0, #0
   211c4:	d001      	beq.n	211ca <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   211c6:	2300      	movs	r3, #0
   211c8:	e004      	b.n	211d4 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   211ca:	4b05      	ldr	r3, [pc, #20]	; (211e0 <sd_mmc_get_type+0x34>)
   211cc:	4798      	blx	r3
	return sd_mmc_card->type;
   211ce:	4b05      	ldr	r3, [pc, #20]	; (211e4 <sd_mmc_get_type+0x38>)
   211d0:	681b      	ldr	r3, [r3, #0]
   211d2:	7adb      	ldrb	r3, [r3, #11]
}
   211d4:	0018      	movs	r0, r3
   211d6:	46bd      	mov	sp, r7
   211d8:	b002      	add	sp, #8
   211da:	bd80      	pop	{r7, pc}
   211dc:	00020d1d 	.word	0x00020d1d
   211e0:	00020e19 	.word	0x00020e19
   211e4:	200040e8 	.word	0x200040e8

000211e8 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   211e8:	b580      	push	{r7, lr}
   211ea:	b082      	sub	sp, #8
   211ec:	af00      	add	r7, sp, #0
   211ee:	0002      	movs	r2, r0
   211f0:	1dfb      	adds	r3, r7, #7
   211f2:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   211f4:	1dfb      	adds	r3, r7, #7
   211f6:	781b      	ldrb	r3, [r3, #0]
   211f8:	0018      	movs	r0, r3
   211fa:	4b07      	ldr	r3, [pc, #28]	; (21218 <sd_mmc_get_capacity+0x30>)
   211fc:	4798      	blx	r3
   211fe:	1e03      	subs	r3, r0, #0
   21200:	d001      	beq.n	21206 <sd_mmc_get_capacity+0x1e>
		return 0;
   21202:	2300      	movs	r3, #0
   21204:	e004      	b.n	21210 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   21206:	4b05      	ldr	r3, [pc, #20]	; (2121c <sd_mmc_get_capacity+0x34>)
   21208:	4798      	blx	r3
	return sd_mmc_card->capacity;
   2120a:	4b05      	ldr	r3, [pc, #20]	; (21220 <sd_mmc_get_capacity+0x38>)
   2120c:	681b      	ldr	r3, [r3, #0]
   2120e:	685b      	ldr	r3, [r3, #4]
}
   21210:	0018      	movs	r0, r3
   21212:	46bd      	mov	sp, r7
   21214:	b002      	add	sp, #8
   21216:	bd80      	pop	{r7, pc}
   21218:	00020d1d 	.word	0x00020d1d
   2121c:	00020e19 	.word	0x00020e19
   21220:	200040e8 	.word	0x200040e8

00021224 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   21224:	b580      	push	{r7, lr}
   21226:	b082      	sub	sp, #8
   21228:	af00      	add	r7, sp, #0
   2122a:	0002      	movs	r2, r0
   2122c:	1dfb      	adds	r3, r7, #7
   2122e:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   21230:	2300      	movs	r3, #0
}
   21232:	0018      	movs	r0, r3
   21234:	46bd      	mov	sp, r7
   21236:	b002      	add	sp, #8
   21238:	bd80      	pop	{r7, pc}
	...

0002123c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   2123c:	b590      	push	{r4, r7, lr}
   2123e:	b089      	sub	sp, #36	; 0x24
   21240:	af02      	add	r7, sp, #8
   21242:	6039      	str	r1, [r7, #0]
   21244:	0011      	movs	r1, r2
   21246:	1dfb      	adds	r3, r7, #7
   21248:	1c02      	adds	r2, r0, #0
   2124a:	701a      	strb	r2, [r3, #0]
   2124c:	1d3b      	adds	r3, r7, #4
   2124e:	1c0a      	adds	r2, r1, #0
   21250:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   21252:	230f      	movs	r3, #15
   21254:	18fc      	adds	r4, r7, r3
   21256:	1dfb      	adds	r3, r7, #7
   21258:	781b      	ldrb	r3, [r3, #0]
   2125a:	0018      	movs	r0, r3
   2125c:	4b29      	ldr	r3, [pc, #164]	; (21304 <sd_mmc_init_read_blocks+0xc8>)
   2125e:	4798      	blx	r3
   21260:	0003      	movs	r3, r0
   21262:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   21264:	230f      	movs	r3, #15
   21266:	18fb      	adds	r3, r7, r3
   21268:	781b      	ldrb	r3, [r3, #0]
   2126a:	2b00      	cmp	r3, #0
   2126c:	d003      	beq.n	21276 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   2126e:	230f      	movs	r3, #15
   21270:	18fb      	adds	r3, r7, r3
   21272:	781b      	ldrb	r3, [r3, #0]
   21274:	e041      	b.n	212fa <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   21276:	4b24      	ldr	r3, [pc, #144]	; (21308 <sd_mmc_init_read_blocks+0xcc>)
   21278:	4798      	blx	r3
   2127a:	0003      	movs	r3, r0
   2127c:	001a      	movs	r2, r3
   2127e:	2301      	movs	r3, #1
   21280:	4053      	eors	r3, r2
   21282:	b2db      	uxtb	r3, r3
   21284:	2b00      	cmp	r3, #0
   21286:	d003      	beq.n	21290 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   21288:	4b20      	ldr	r3, [pc, #128]	; (2130c <sd_mmc_init_read_blocks+0xd0>)
   2128a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   2128c:	2305      	movs	r3, #5
   2128e:	e034      	b.n	212fa <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   21290:	1d3b      	adds	r3, r7, #4
   21292:	881b      	ldrh	r3, [r3, #0]
   21294:	2b01      	cmp	r3, #1
   21296:	d902      	bls.n	2129e <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   21298:	4b1d      	ldr	r3, [pc, #116]	; (21310 <sd_mmc_init_read_blocks+0xd4>)
   2129a:	617b      	str	r3, [r7, #20]
   2129c:	e001      	b.n	212a2 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   2129e:	4b1d      	ldr	r3, [pc, #116]	; (21314 <sd_mmc_init_read_blocks+0xd8>)
   212a0:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   212a2:	4b1d      	ldr	r3, [pc, #116]	; (21318 <sd_mmc_init_read_blocks+0xdc>)
   212a4:	681b      	ldr	r3, [r3, #0]
   212a6:	7adb      	ldrb	r3, [r3, #11]
   212a8:	001a      	movs	r2, r3
   212aa:	2308      	movs	r3, #8
   212ac:	4013      	ands	r3, r2
   212ae:	d002      	beq.n	212b6 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   212b0:	683b      	ldr	r3, [r7, #0]
   212b2:	613b      	str	r3, [r7, #16]
   212b4:	e002      	b.n	212bc <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   212b6:	683b      	ldr	r3, [r7, #0]
   212b8:	025b      	lsls	r3, r3, #9
   212ba:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   212bc:	1d3b      	adds	r3, r7, #4
   212be:	881c      	ldrh	r4, [r3, #0]
   212c0:	2380      	movs	r3, #128	; 0x80
   212c2:	009a      	lsls	r2, r3, #2
   212c4:	6939      	ldr	r1, [r7, #16]
   212c6:	6978      	ldr	r0, [r7, #20]
   212c8:	2301      	movs	r3, #1
   212ca:	9300      	str	r3, [sp, #0]
   212cc:	0023      	movs	r3, r4
   212ce:	4c13      	ldr	r4, [pc, #76]	; (2131c <sd_mmc_init_read_blocks+0xe0>)
   212d0:	47a0      	blx	r4
   212d2:	0003      	movs	r3, r0
   212d4:	001a      	movs	r2, r3
   212d6:	2301      	movs	r3, #1
   212d8:	4053      	eors	r3, r2
   212da:	b2db      	uxtb	r3, r3
   212dc:	2b00      	cmp	r3, #0
   212de:	d003      	beq.n	212e8 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   212e0:	4b0a      	ldr	r3, [pc, #40]	; (2130c <sd_mmc_init_read_blocks+0xd0>)
   212e2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   212e4:	2305      	movs	r3, #5
   212e6:	e008      	b.n	212fa <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   212e8:	4b0d      	ldr	r3, [pc, #52]	; (21320 <sd_mmc_init_read_blocks+0xe4>)
   212ea:	1d3a      	adds	r2, r7, #4
   212ec:	8812      	ldrh	r2, [r2, #0]
   212ee:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   212f0:	4b0c      	ldr	r3, [pc, #48]	; (21324 <sd_mmc_init_read_blocks+0xe8>)
   212f2:	1d3a      	adds	r2, r7, #4
   212f4:	8812      	ldrh	r2, [r2, #0]
   212f6:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   212f8:	2300      	movs	r3, #0
}
   212fa:	0018      	movs	r0, r3
   212fc:	46bd      	mov	sp, r7
   212fe:	b007      	add	sp, #28
   21300:	bd90      	pop	{r4, r7, pc}
   21302:	46c0      	nop			; (mov r8, r8)
   21304:	00020d1d 	.word	0x00020d1d
   21308:	00020bb9 	.word	0x00020bb9
   2130c:	00020e19 	.word	0x00020e19
   21310:	00101112 	.word	0x00101112
   21314:	00081111 	.word	0x00081111
   21318:	200040e8 	.word	0x200040e8
   2131c:	00022051 	.word	0x00022051
   21320:	200040ee 	.word	0x200040ee
   21324:	200040ec 	.word	0x200040ec

00021328 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   21328:	b580      	push	{r7, lr}
   2132a:	b082      	sub	sp, #8
   2132c:	af00      	add	r7, sp, #0
   2132e:	6078      	str	r0, [r7, #4]
   21330:	000a      	movs	r2, r1
   21332:	1cbb      	adds	r3, r7, #2
   21334:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   21336:	1cbb      	adds	r3, r7, #2
   21338:	881a      	ldrh	r2, [r3, #0]
   2133a:	687b      	ldr	r3, [r7, #4]
   2133c:	0011      	movs	r1, r2
   2133e:	0018      	movs	r0, r3
   21340:	4b0d      	ldr	r3, [pc, #52]	; (21378 <sd_mmc_start_read_blocks+0x50>)
   21342:	4798      	blx	r3
   21344:	0003      	movs	r3, r0
   21346:	001a      	movs	r2, r3
   21348:	2301      	movs	r3, #1
   2134a:	4053      	eors	r3, r2
   2134c:	b2db      	uxtb	r3, r3
   2134e:	2b00      	cmp	r3, #0
   21350:	d004      	beq.n	2135c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   21352:	4b0a      	ldr	r3, [pc, #40]	; (2137c <sd_mmc_start_read_blocks+0x54>)
   21354:	2200      	movs	r2, #0
   21356:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   21358:	2305      	movs	r3, #5
   2135a:	e008      	b.n	2136e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   2135c:	4b07      	ldr	r3, [pc, #28]	; (2137c <sd_mmc_start_read_blocks+0x54>)
   2135e:	881a      	ldrh	r2, [r3, #0]
   21360:	1cbb      	adds	r3, r7, #2
   21362:	881b      	ldrh	r3, [r3, #0]
   21364:	1ad3      	subs	r3, r2, r3
   21366:	b29a      	uxth	r2, r3
   21368:	4b04      	ldr	r3, [pc, #16]	; (2137c <sd_mmc_start_read_blocks+0x54>)
   2136a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   2136c:	2300      	movs	r3, #0
}
   2136e:	0018      	movs	r0, r3
   21370:	46bd      	mov	sp, r7
   21372:	b002      	add	sp, #8
   21374:	bd80      	pop	{r7, pc}
   21376:	46c0      	nop			; (mov r8, r8)
   21378:	00022321 	.word	0x00022321
   2137c:	200040ee 	.word	0x200040ee

00021380 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   21380:	b580      	push	{r7, lr}
   21382:	b082      	sub	sp, #8
   21384:	af00      	add	r7, sp, #0
   21386:	0002      	movs	r2, r0
   21388:	1dfb      	adds	r3, r7, #7
   2138a:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   2138c:	4b1c      	ldr	r3, [pc, #112]	; (21400 <sd_mmc_wait_end_of_read_blocks+0x80>)
   2138e:	4798      	blx	r3
   21390:	0003      	movs	r3, r0
   21392:	001a      	movs	r2, r3
   21394:	2301      	movs	r3, #1
   21396:	4053      	eors	r3, r2
   21398:	b2db      	uxtb	r3, r3
   2139a:	2b00      	cmp	r3, #0
   2139c:	d001      	beq.n	213a2 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   2139e:	2305      	movs	r3, #5
   213a0:	e029      	b.n	213f6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   213a2:	1dfb      	adds	r3, r7, #7
   213a4:	781b      	ldrb	r3, [r3, #0]
   213a6:	2b00      	cmp	r3, #0
   213a8:	d003      	beq.n	213b2 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   213aa:	4b16      	ldr	r3, [pc, #88]	; (21404 <sd_mmc_wait_end_of_read_blocks+0x84>)
   213ac:	2200      	movs	r2, #0
   213ae:	801a      	strh	r2, [r3, #0]
   213b0:	e005      	b.n	213be <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   213b2:	4b14      	ldr	r3, [pc, #80]	; (21404 <sd_mmc_wait_end_of_read_blocks+0x84>)
   213b4:	881b      	ldrh	r3, [r3, #0]
   213b6:	2b00      	cmp	r3, #0
   213b8:	d001      	beq.n	213be <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   213ba:	2300      	movs	r3, #0
   213bc:	e01b      	b.n	213f6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   213be:	4b12      	ldr	r3, [pc, #72]	; (21408 <sd_mmc_wait_end_of_read_blocks+0x88>)
   213c0:	881b      	ldrh	r3, [r3, #0]
   213c2:	2b01      	cmp	r3, #1
   213c4:	d103      	bne.n	213ce <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   213c6:	4b11      	ldr	r3, [pc, #68]	; (2140c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   213c8:	4798      	blx	r3
		return SD_MMC_OK;
   213ca:	2300      	movs	r3, #0
   213cc:	e013      	b.n	213f6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   213ce:	4b10      	ldr	r3, [pc, #64]	; (21410 <sd_mmc_wait_end_of_read_blocks+0x90>)
   213d0:	2100      	movs	r1, #0
   213d2:	0018      	movs	r0, r3
   213d4:	4b0f      	ldr	r3, [pc, #60]	; (21414 <sd_mmc_wait_end_of_read_blocks+0x94>)
   213d6:	4798      	blx	r3
   213d8:	0003      	movs	r3, r0
   213da:	001a      	movs	r2, r3
   213dc:	2301      	movs	r3, #1
   213de:	4053      	eors	r3, r2
   213e0:	b2db      	uxtb	r3, r3
   213e2:	2b00      	cmp	r3, #0
   213e4:	d004      	beq.n	213f0 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   213e6:	4b0a      	ldr	r3, [pc, #40]	; (21410 <sd_mmc_wait_end_of_read_blocks+0x90>)
   213e8:	2100      	movs	r1, #0
   213ea:	0018      	movs	r0, r3
   213ec:	4b09      	ldr	r3, [pc, #36]	; (21414 <sd_mmc_wait_end_of_read_blocks+0x94>)
   213ee:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   213f0:	4b06      	ldr	r3, [pc, #24]	; (2140c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   213f2:	4798      	blx	r3
	return SD_MMC_OK;
   213f4:	2300      	movs	r3, #0
}
   213f6:	0018      	movs	r0, r3
   213f8:	46bd      	mov	sp, r7
   213fa:	b002      	add	sp, #8
   213fc:	bd80      	pop	{r7, pc}
   213fe:	46c0      	nop			; (mov r8, r8)
   21400:	000223c5 	.word	0x000223c5
   21404:	200040ee 	.word	0x200040ee
   21408:	200040ec 	.word	0x200040ec
   2140c:	00020e19 	.word	0x00020e19
   21410:	0000310c 	.word	0x0000310c
   21414:	00022029 	.word	0x00022029

00021418 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   21418:	b590      	push	{r4, r7, lr}
   2141a:	b089      	sub	sp, #36	; 0x24
   2141c:	af02      	add	r7, sp, #8
   2141e:	6039      	str	r1, [r7, #0]
   21420:	0011      	movs	r1, r2
   21422:	1dfb      	adds	r3, r7, #7
   21424:	1c02      	adds	r2, r0, #0
   21426:	701a      	strb	r2, [r3, #0]
   21428:	1d3b      	adds	r3, r7, #4
   2142a:	1c0a      	adds	r2, r1, #0
   2142c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   2142e:	230f      	movs	r3, #15
   21430:	18fc      	adds	r4, r7, r3
   21432:	1dfb      	adds	r3, r7, #7
   21434:	781b      	ldrb	r3, [r3, #0]
   21436:	0018      	movs	r0, r3
   21438:	4b28      	ldr	r3, [pc, #160]	; (214dc <sd_mmc_init_write_blocks+0xc4>)
   2143a:	4798      	blx	r3
   2143c:	0003      	movs	r3, r0
   2143e:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   21440:	230f      	movs	r3, #15
   21442:	18fb      	adds	r3, r7, r3
   21444:	781b      	ldrb	r3, [r3, #0]
   21446:	2b00      	cmp	r3, #0
   21448:	d003      	beq.n	21452 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   2144a:	230f      	movs	r3, #15
   2144c:	18fb      	adds	r3, r7, r3
   2144e:	781b      	ldrb	r3, [r3, #0]
   21450:	e03f      	b.n	214d2 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   21452:	1dfb      	adds	r3, r7, #7
   21454:	781b      	ldrb	r3, [r3, #0]
   21456:	0018      	movs	r0, r3
   21458:	4b21      	ldr	r3, [pc, #132]	; (214e0 <sd_mmc_init_write_blocks+0xc8>)
   2145a:	4798      	blx	r3
   2145c:	1e03      	subs	r3, r0, #0
   2145e:	d003      	beq.n	21468 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   21460:	4b20      	ldr	r3, [pc, #128]	; (214e4 <sd_mmc_init_write_blocks+0xcc>)
   21462:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   21464:	2307      	movs	r3, #7
   21466:	e034      	b.n	214d2 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   21468:	1d3b      	adds	r3, r7, #4
   2146a:	881b      	ldrh	r3, [r3, #0]
   2146c:	2b01      	cmp	r3, #1
   2146e:	d902      	bls.n	21476 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   21470:	4b1d      	ldr	r3, [pc, #116]	; (214e8 <sd_mmc_init_write_blocks+0xd0>)
   21472:	617b      	str	r3, [r7, #20]
   21474:	e001      	b.n	2147a <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   21476:	4b1d      	ldr	r3, [pc, #116]	; (214ec <sd_mmc_init_write_blocks+0xd4>)
   21478:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   2147a:	4b1d      	ldr	r3, [pc, #116]	; (214f0 <sd_mmc_init_write_blocks+0xd8>)
   2147c:	681b      	ldr	r3, [r3, #0]
   2147e:	7adb      	ldrb	r3, [r3, #11]
   21480:	001a      	movs	r2, r3
   21482:	2308      	movs	r3, #8
   21484:	4013      	ands	r3, r2
   21486:	d002      	beq.n	2148e <sd_mmc_init_write_blocks+0x76>
		arg = start;
   21488:	683b      	ldr	r3, [r7, #0]
   2148a:	613b      	str	r3, [r7, #16]
   2148c:	e002      	b.n	21494 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   2148e:	683b      	ldr	r3, [r7, #0]
   21490:	025b      	lsls	r3, r3, #9
   21492:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   21494:	1d3b      	adds	r3, r7, #4
   21496:	881c      	ldrh	r4, [r3, #0]
   21498:	2380      	movs	r3, #128	; 0x80
   2149a:	009a      	lsls	r2, r3, #2
   2149c:	6939      	ldr	r1, [r7, #16]
   2149e:	6978      	ldr	r0, [r7, #20]
   214a0:	2301      	movs	r3, #1
   214a2:	9300      	str	r3, [sp, #0]
   214a4:	0023      	movs	r3, r4
   214a6:	4c13      	ldr	r4, [pc, #76]	; (214f4 <sd_mmc_init_write_blocks+0xdc>)
   214a8:	47a0      	blx	r4
   214aa:	0003      	movs	r3, r0
   214ac:	001a      	movs	r2, r3
   214ae:	2301      	movs	r3, #1
   214b0:	4053      	eors	r3, r2
   214b2:	b2db      	uxtb	r3, r3
   214b4:	2b00      	cmp	r3, #0
   214b6:	d003      	beq.n	214c0 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   214b8:	4b0a      	ldr	r3, [pc, #40]	; (214e4 <sd_mmc_init_write_blocks+0xcc>)
   214ba:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   214bc:	2305      	movs	r3, #5
   214be:	e008      	b.n	214d2 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   214c0:	4b0d      	ldr	r3, [pc, #52]	; (214f8 <sd_mmc_init_write_blocks+0xe0>)
   214c2:	1d3a      	adds	r2, r7, #4
   214c4:	8812      	ldrh	r2, [r2, #0]
   214c6:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   214c8:	4b0c      	ldr	r3, [pc, #48]	; (214fc <sd_mmc_init_write_blocks+0xe4>)
   214ca:	1d3a      	adds	r2, r7, #4
   214cc:	8812      	ldrh	r2, [r2, #0]
   214ce:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   214d0:	2300      	movs	r3, #0
}
   214d2:	0018      	movs	r0, r3
   214d4:	46bd      	mov	sp, r7
   214d6:	b007      	add	sp, #28
   214d8:	bd90      	pop	{r4, r7, pc}
   214da:	46c0      	nop			; (mov r8, r8)
   214dc:	00020d1d 	.word	0x00020d1d
   214e0:	00021225 	.word	0x00021225
   214e4:	00020e19 	.word	0x00020e19
   214e8:	00109119 	.word	0x00109119
   214ec:	00089118 	.word	0x00089118
   214f0:	200040e8 	.word	0x200040e8
   214f4:	00022051 	.word	0x00022051
   214f8:	200040ee 	.word	0x200040ee
   214fc:	200040ec 	.word	0x200040ec

00021500 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   21500:	b580      	push	{r7, lr}
   21502:	b082      	sub	sp, #8
   21504:	af00      	add	r7, sp, #0
   21506:	6078      	str	r0, [r7, #4]
   21508:	000a      	movs	r2, r1
   2150a:	1cbb      	adds	r3, r7, #2
   2150c:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   2150e:	1cbb      	adds	r3, r7, #2
   21510:	881a      	ldrh	r2, [r3, #0]
   21512:	687b      	ldr	r3, [r7, #4]
   21514:	0011      	movs	r1, r2
   21516:	0018      	movs	r0, r3
   21518:	4b0d      	ldr	r3, [pc, #52]	; (21550 <sd_mmc_start_write_blocks+0x50>)
   2151a:	4798      	blx	r3
   2151c:	0003      	movs	r3, r0
   2151e:	001a      	movs	r2, r3
   21520:	2301      	movs	r3, #1
   21522:	4053      	eors	r3, r2
   21524:	b2db      	uxtb	r3, r3
   21526:	2b00      	cmp	r3, #0
   21528:	d004      	beq.n	21534 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   2152a:	4b0a      	ldr	r3, [pc, #40]	; (21554 <sd_mmc_start_write_blocks+0x54>)
   2152c:	2200      	movs	r2, #0
   2152e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   21530:	2305      	movs	r3, #5
   21532:	e008      	b.n	21546 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   21534:	4b07      	ldr	r3, [pc, #28]	; (21554 <sd_mmc_start_write_blocks+0x54>)
   21536:	881a      	ldrh	r2, [r3, #0]
   21538:	1cbb      	adds	r3, r7, #2
   2153a:	881b      	ldrh	r3, [r3, #0]
   2153c:	1ad3      	subs	r3, r2, r3
   2153e:	b29a      	uxth	r2, r3
   21540:	4b04      	ldr	r3, [pc, #16]	; (21554 <sd_mmc_start_write_blocks+0x54>)
   21542:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   21544:	2300      	movs	r3, #0
}
   21546:	0018      	movs	r0, r3
   21548:	46bd      	mov	sp, r7
   2154a:	b002      	add	sp, #8
   2154c:	bd80      	pop	{r7, pc}
   2154e:	46c0      	nop			; (mov r8, r8)
   21550:	000223d1 	.word	0x000223d1
   21554:	200040ee 	.word	0x200040ee

00021558 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   21558:	b580      	push	{r7, lr}
   2155a:	b082      	sub	sp, #8
   2155c:	af00      	add	r7, sp, #0
   2155e:	0002      	movs	r2, r0
   21560:	1dfb      	adds	r3, r7, #7
   21562:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   21564:	4b13      	ldr	r3, [pc, #76]	; (215b4 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   21566:	4798      	blx	r3
   21568:	0003      	movs	r3, r0
   2156a:	001a      	movs	r2, r3
   2156c:	2301      	movs	r3, #1
   2156e:	4053      	eors	r3, r2
   21570:	b2db      	uxtb	r3, r3
   21572:	2b00      	cmp	r3, #0
   21574:	d001      	beq.n	2157a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   21576:	2305      	movs	r3, #5
   21578:	e018      	b.n	215ac <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   2157a:	1dfb      	adds	r3, r7, #7
   2157c:	781b      	ldrb	r3, [r3, #0]
   2157e:	2b00      	cmp	r3, #0
   21580:	d003      	beq.n	2158a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   21582:	4b0d      	ldr	r3, [pc, #52]	; (215b8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   21584:	2200      	movs	r2, #0
   21586:	801a      	strh	r2, [r3, #0]
   21588:	e005      	b.n	21596 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   2158a:	4b0b      	ldr	r3, [pc, #44]	; (215b8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   2158c:	881b      	ldrh	r3, [r3, #0]
   2158e:	2b00      	cmp	r3, #0
   21590:	d001      	beq.n	21596 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   21592:	2300      	movs	r3, #0
   21594:	e00a      	b.n	215ac <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   21596:	4b09      	ldr	r3, [pc, #36]	; (215bc <sd_mmc_wait_end_of_write_blocks+0x64>)
   21598:	881b      	ldrh	r3, [r3, #0]
   2159a:	2b01      	cmp	r3, #1
   2159c:	d103      	bne.n	215a6 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   2159e:	4b08      	ldr	r3, [pc, #32]	; (215c0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   215a0:	4798      	blx	r3
		return SD_MMC_OK;
   215a2:	2300      	movs	r3, #0
   215a4:	e002      	b.n	215ac <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   215a6:	4b06      	ldr	r3, [pc, #24]	; (215c0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   215a8:	4798      	blx	r3
	return SD_MMC_OK;
   215aa:	2300      	movs	r3, #0
}
   215ac:	0018      	movs	r0, r3
   215ae:	46bd      	mov	sp, r7
   215b0:	b002      	add	sp, #8
   215b2:	bd80      	pop	{r7, pc}
   215b4:	00022491 	.word	0x00022491
   215b8:	200040ee 	.word	0x200040ee
   215bc:	200040ec 	.word	0x200040ec
   215c0:	00020e19 	.word	0x00020e19

000215c4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   215c4:	b580      	push	{r7, lr}
   215c6:	b082      	sub	sp, #8
   215c8:	af00      	add	r7, sp, #0
   215ca:	0002      	movs	r2, r0
   215cc:	1dfb      	adds	r3, r7, #7
   215ce:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   215d0:	1dfb      	adds	r3, r7, #7
   215d2:	781b      	ldrb	r3, [r3, #0]
   215d4:	0018      	movs	r0, r3
   215d6:	4b16      	ldr	r3, [pc, #88]	; (21630 <sd_mmc_test_unit_ready+0x6c>)
   215d8:	4798      	blx	r3
   215da:	0003      	movs	r3, r0
   215dc:	2b01      	cmp	r3, #1
   215de:	d019      	beq.n	21614 <sd_mmc_test_unit_ready+0x50>
   215e0:	2b02      	cmp	r3, #2
   215e2:	d019      	beq.n	21618 <sd_mmc_test_unit_ready+0x54>
   215e4:	2b00      	cmp	r3, #0
   215e6:	d11e      	bne.n	21626 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   215e8:	1dfb      	adds	r3, r7, #7
   215ea:	781b      	ldrb	r3, [r3, #0]
   215ec:	4a11      	ldr	r2, [pc, #68]	; (21634 <sd_mmc_test_unit_ready+0x70>)
   215ee:	5cd3      	ldrb	r3, [r2, r3]
   215f0:	2b00      	cmp	r3, #0
   215f2:	d001      	beq.n	215f8 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   215f4:	2302      	movs	r3, #2
   215f6:	e017      	b.n	21628 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   215f8:	1dfb      	adds	r3, r7, #7
   215fa:	781b      	ldrb	r3, [r3, #0]
   215fc:	0018      	movs	r0, r3
   215fe:	4b0e      	ldr	r3, [pc, #56]	; (21638 <sd_mmc_test_unit_ready+0x74>)
   21600:	4798      	blx	r3
   21602:	0003      	movs	r3, r0
   21604:	001a      	movs	r2, r3
   21606:	2303      	movs	r3, #3
   21608:	4013      	ands	r3, r2
   2160a:	d001      	beq.n	21610 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   2160c:	2300      	movs	r3, #0
   2160e:	e00b      	b.n	21628 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   21610:	2302      	movs	r3, #2
   21612:	e009      	b.n	21628 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   21614:	2303      	movs	r3, #3
   21616:	e007      	b.n	21628 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   21618:	1dfb      	adds	r3, r7, #7
   2161a:	781b      	ldrb	r3, [r3, #0]
   2161c:	4a05      	ldr	r2, [pc, #20]	; (21634 <sd_mmc_test_unit_ready+0x70>)
   2161e:	2100      	movs	r1, #0
   21620:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   21622:	2302      	movs	r3, #2
   21624:	e000      	b.n	21628 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   21626:	2301      	movs	r3, #1
	}
}
   21628:	0018      	movs	r0, r3
   2162a:	46bd      	mov	sp, r7
   2162c:	b002      	add	sp, #8
   2162e:	bd80      	pop	{r7, pc}
   21630:	00021139 	.word	0x00021139
   21634:	200040f0 	.word	0x200040f0
   21638:	000211ad 	.word	0x000211ad

0002163c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   2163c:	b580      	push	{r7, lr}
   2163e:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   21640:	2000      	movs	r0, #0
   21642:	4b03      	ldr	r3, [pc, #12]	; (21650 <sd_mmc_test_unit_ready_0+0x14>)
   21644:	4798      	blx	r3
   21646:	0003      	movs	r3, r0
}
   21648:	0018      	movs	r0, r3
   2164a:	46bd      	mov	sp, r7
   2164c:	bd80      	pop	{r7, pc}
   2164e:	46c0      	nop			; (mov r8, r8)
   21650:	000215c5 	.word	0x000215c5

00021654 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   21654:	b580      	push	{r7, lr}
   21656:	b082      	sub	sp, #8
   21658:	af00      	add	r7, sp, #0
   2165a:	0002      	movs	r2, r0
   2165c:	6039      	str	r1, [r7, #0]
   2165e:	1dfb      	adds	r3, r7, #7
   21660:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   21662:	1dfb      	adds	r3, r7, #7
   21664:	781b      	ldrb	r3, [r3, #0]
   21666:	0018      	movs	r0, r3
   21668:	4b08      	ldr	r3, [pc, #32]	; (2168c <sd_mmc_read_capacity+0x38>)
   2166a:	4798      	blx	r3
   2166c:	0003      	movs	r3, r0
   2166e:	005b      	lsls	r3, r3, #1
   21670:	1e5a      	subs	r2, r3, #1
   21672:	683b      	ldr	r3, [r7, #0]
   21674:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   21676:	1dfb      	adds	r3, r7, #7
   21678:	781b      	ldrb	r3, [r3, #0]
   2167a:	0018      	movs	r0, r3
   2167c:	4b04      	ldr	r3, [pc, #16]	; (21690 <sd_mmc_read_capacity+0x3c>)
   2167e:	4798      	blx	r3
   21680:	0003      	movs	r3, r0
}
   21682:	0018      	movs	r0, r3
   21684:	46bd      	mov	sp, r7
   21686:	b002      	add	sp, #8
   21688:	bd80      	pop	{r7, pc}
   2168a:	46c0      	nop			; (mov r8, r8)
   2168c:	000211e9 	.word	0x000211e9
   21690:	000215c5 	.word	0x000215c5

00021694 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   21694:	b580      	push	{r7, lr}
   21696:	b082      	sub	sp, #8
   21698:	af00      	add	r7, sp, #0
   2169a:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   2169c:	687b      	ldr	r3, [r7, #4]
   2169e:	0019      	movs	r1, r3
   216a0:	2000      	movs	r0, #0
   216a2:	4b03      	ldr	r3, [pc, #12]	; (216b0 <sd_mmc_read_capacity_0+0x1c>)
   216a4:	4798      	blx	r3
   216a6:	0003      	movs	r3, r0
}
   216a8:	0018      	movs	r0, r3
   216aa:	46bd      	mov	sp, r7
   216ac:	b002      	add	sp, #8
   216ae:	bd80      	pop	{r7, pc}
   216b0:	00021655 	.word	0x00021655

000216b4 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   216b4:	b580      	push	{r7, lr}
   216b6:	b082      	sub	sp, #8
   216b8:	af00      	add	r7, sp, #0
   216ba:	0002      	movs	r2, r0
   216bc:	1dfb      	adds	r3, r7, #7
   216be:	701a      	strb	r2, [r3, #0]
   216c0:	1dbb      	adds	r3, r7, #6
   216c2:	1c0a      	adds	r2, r1, #0
   216c4:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   216c6:	1dfb      	adds	r3, r7, #7
   216c8:	781b      	ldrb	r3, [r3, #0]
   216ca:	4a04      	ldr	r2, [pc, #16]	; (216dc <sd_mmc_unload+0x28>)
   216cc:	1db9      	adds	r1, r7, #6
   216ce:	7809      	ldrb	r1, [r1, #0]
   216d0:	54d1      	strb	r1, [r2, r3]
	return true;
   216d2:	2301      	movs	r3, #1
}
   216d4:	0018      	movs	r0, r3
   216d6:	46bd      	mov	sp, r7
   216d8:	b002      	add	sp, #8
   216da:	bd80      	pop	{r7, pc}
   216dc:	200040f0 	.word	0x200040f0

000216e0 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   216e0:	b580      	push	{r7, lr}
   216e2:	b082      	sub	sp, #8
   216e4:	af00      	add	r7, sp, #0
   216e6:	0002      	movs	r2, r0
   216e8:	1dfb      	adds	r3, r7, #7
   216ea:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   216ec:	1dfb      	adds	r3, r7, #7
   216ee:	781b      	ldrb	r3, [r3, #0]
   216f0:	0019      	movs	r1, r3
   216f2:	2000      	movs	r0, #0
   216f4:	4b03      	ldr	r3, [pc, #12]	; (21704 <sd_mmc_unload_0+0x24>)
   216f6:	4798      	blx	r3
   216f8:	0003      	movs	r3, r0
}
   216fa:	0018      	movs	r0, r3
   216fc:	46bd      	mov	sp, r7
   216fe:	b002      	add	sp, #8
   21700:	bd80      	pop	{r7, pc}
   21702:	46c0      	nop			; (mov r8, r8)
   21704:	000216b5 	.word	0x000216b5

00021708 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   21708:	b580      	push	{r7, lr}
   2170a:	b082      	sub	sp, #8
   2170c:	af00      	add	r7, sp, #0
   2170e:	0002      	movs	r2, r0
   21710:	1dfb      	adds	r3, r7, #7
   21712:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   21714:	1dfb      	adds	r3, r7, #7
   21716:	781b      	ldrb	r3, [r3, #0]
   21718:	0018      	movs	r0, r3
   2171a:	4b03      	ldr	r3, [pc, #12]	; (21728 <sd_mmc_wr_protect+0x20>)
   2171c:	4798      	blx	r3
   2171e:	0003      	movs	r3, r0
}
   21720:	0018      	movs	r0, r3
   21722:	46bd      	mov	sp, r7
   21724:	b002      	add	sp, #8
   21726:	bd80      	pop	{r7, pc}
   21728:	00021225 	.word	0x00021225

0002172c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   2172c:	b580      	push	{r7, lr}
   2172e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   21730:	2000      	movs	r0, #0
   21732:	4b03      	ldr	r3, [pc, #12]	; (21740 <sd_mmc_wr_protect_0+0x14>)
   21734:	4798      	blx	r3
   21736:	0003      	movs	r3, r0
}
   21738:	0018      	movs	r0, r3
   2173a:	46bd      	mov	sp, r7
   2173c:	bd80      	pop	{r7, pc}
   2173e:	46c0      	nop			; (mov r8, r8)
   21740:	00021709 	.word	0x00021709

00021744 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   21744:	b580      	push	{r7, lr}
   21746:	b082      	sub	sp, #8
   21748:	af00      	add	r7, sp, #0
   2174a:	0002      	movs	r2, r0
   2174c:	1dfb      	adds	r3, r7, #7
   2174e:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   21750:	2301      	movs	r3, #1
}
   21752:	0018      	movs	r0, r3
   21754:	46bd      	mov	sp, r7
   21756:	b002      	add	sp, #8
   21758:	bd80      	pop	{r7, pc}
	...

0002175c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   2175c:	b580      	push	{r7, lr}
   2175e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   21760:	2000      	movs	r0, #0
   21762:	4b03      	ldr	r3, [pc, #12]	; (21770 <sd_mmc_removal_0+0x14>)
   21764:	4798      	blx	r3
   21766:	0003      	movs	r3, r0
}
   21768:	0018      	movs	r0, r3
   2176a:	46bd      	mov	sp, r7
   2176c:	bd80      	pop	{r7, pc}
   2176e:	46c0      	nop			; (mov r8, r8)
   21770:	00021745 	.word	0x00021745

00021774 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   21774:	b580      	push	{r7, lr}
   21776:	b084      	sub	sp, #16
   21778:	af00      	add	r7, sp, #0
   2177a:	60b9      	str	r1, [r7, #8]
   2177c:	607a      	str	r2, [r7, #4]
   2177e:	230f      	movs	r3, #15
   21780:	18fb      	adds	r3, r7, r3
   21782:	1c02      	adds	r2, r0, #0
   21784:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   21786:	68b9      	ldr	r1, [r7, #8]
   21788:	230f      	movs	r3, #15
   2178a:	18fb      	adds	r3, r7, r3
   2178c:	781b      	ldrb	r3, [r3, #0]
   2178e:	2201      	movs	r2, #1
   21790:	0018      	movs	r0, r3
   21792:	4b10      	ldr	r3, [pc, #64]	; (217d4 <sd_mmc_mem_2_ram+0x60>)
   21794:	4798      	blx	r3
   21796:	1e03      	subs	r3, r0, #0
   21798:	d005      	beq.n	217a6 <sd_mmc_mem_2_ram+0x32>
   2179a:	2b02      	cmp	r3, #2
   2179c:	d101      	bne.n	217a2 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   2179e:	2302      	movs	r3, #2
   217a0:	e013      	b.n	217ca <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   217a2:	2301      	movs	r3, #1
   217a4:	e011      	b.n	217ca <sd_mmc_mem_2_ram+0x56>
		break;
   217a6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   217a8:	687b      	ldr	r3, [r7, #4]
   217aa:	2101      	movs	r1, #1
   217ac:	0018      	movs	r0, r3
   217ae:	4b0a      	ldr	r3, [pc, #40]	; (217d8 <sd_mmc_mem_2_ram+0x64>)
   217b0:	4798      	blx	r3
   217b2:	1e03      	subs	r3, r0, #0
   217b4:	d001      	beq.n	217ba <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   217b6:	2301      	movs	r3, #1
   217b8:	e007      	b.n	217ca <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   217ba:	2000      	movs	r0, #0
   217bc:	4b07      	ldr	r3, [pc, #28]	; (217dc <sd_mmc_mem_2_ram+0x68>)
   217be:	4798      	blx	r3
   217c0:	1e03      	subs	r3, r0, #0
   217c2:	d001      	beq.n	217c8 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   217c4:	2301      	movs	r3, #1
   217c6:	e000      	b.n	217ca <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   217c8:	2300      	movs	r3, #0
}
   217ca:	0018      	movs	r0, r3
   217cc:	46bd      	mov	sp, r7
   217ce:	b004      	add	sp, #16
   217d0:	bd80      	pop	{r7, pc}
   217d2:	46c0      	nop			; (mov r8, r8)
   217d4:	0002123d 	.word	0x0002123d
   217d8:	00021329 	.word	0x00021329
   217dc:	00021381 	.word	0x00021381

000217e0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   217e0:	b580      	push	{r7, lr}
   217e2:	b082      	sub	sp, #8
   217e4:	af00      	add	r7, sp, #0
   217e6:	6078      	str	r0, [r7, #4]
   217e8:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   217ea:	683a      	ldr	r2, [r7, #0]
   217ec:	687b      	ldr	r3, [r7, #4]
   217ee:	0019      	movs	r1, r3
   217f0:	2000      	movs	r0, #0
   217f2:	4b03      	ldr	r3, [pc, #12]	; (21800 <sd_mmc_mem_2_ram_0+0x20>)
   217f4:	4798      	blx	r3
   217f6:	0003      	movs	r3, r0
}
   217f8:	0018      	movs	r0, r3
   217fa:	46bd      	mov	sp, r7
   217fc:	b002      	add	sp, #8
   217fe:	bd80      	pop	{r7, pc}
   21800:	00021775 	.word	0x00021775

00021804 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   21804:	b580      	push	{r7, lr}
   21806:	b084      	sub	sp, #16
   21808:	af00      	add	r7, sp, #0
   2180a:	60b9      	str	r1, [r7, #8]
   2180c:	607a      	str	r2, [r7, #4]
   2180e:	230f      	movs	r3, #15
   21810:	18fb      	adds	r3, r7, r3
   21812:	1c02      	adds	r2, r0, #0
   21814:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   21816:	68b9      	ldr	r1, [r7, #8]
   21818:	230f      	movs	r3, #15
   2181a:	18fb      	adds	r3, r7, r3
   2181c:	781b      	ldrb	r3, [r3, #0]
   2181e:	2201      	movs	r2, #1
   21820:	0018      	movs	r0, r3
   21822:	4b10      	ldr	r3, [pc, #64]	; (21864 <sd_mmc_ram_2_mem+0x60>)
   21824:	4798      	blx	r3
   21826:	1e03      	subs	r3, r0, #0
   21828:	d005      	beq.n	21836 <sd_mmc_ram_2_mem+0x32>
   2182a:	2b02      	cmp	r3, #2
   2182c:	d101      	bne.n	21832 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   2182e:	2302      	movs	r3, #2
   21830:	e013      	b.n	2185a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   21832:	2301      	movs	r3, #1
   21834:	e011      	b.n	2185a <sd_mmc_ram_2_mem+0x56>
		break;
   21836:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   21838:	687b      	ldr	r3, [r7, #4]
   2183a:	2101      	movs	r1, #1
   2183c:	0018      	movs	r0, r3
   2183e:	4b0a      	ldr	r3, [pc, #40]	; (21868 <sd_mmc_ram_2_mem+0x64>)
   21840:	4798      	blx	r3
   21842:	1e03      	subs	r3, r0, #0
   21844:	d001      	beq.n	2184a <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   21846:	2301      	movs	r3, #1
   21848:	e007      	b.n	2185a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   2184a:	2000      	movs	r0, #0
   2184c:	4b07      	ldr	r3, [pc, #28]	; (2186c <sd_mmc_ram_2_mem+0x68>)
   2184e:	4798      	blx	r3
   21850:	1e03      	subs	r3, r0, #0
   21852:	d001      	beq.n	21858 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   21854:	2301      	movs	r3, #1
   21856:	e000      	b.n	2185a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   21858:	2300      	movs	r3, #0
}
   2185a:	0018      	movs	r0, r3
   2185c:	46bd      	mov	sp, r7
   2185e:	b004      	add	sp, #16
   21860:	bd80      	pop	{r7, pc}
   21862:	46c0      	nop			; (mov r8, r8)
   21864:	00021419 	.word	0x00021419
   21868:	00021501 	.word	0x00021501
   2186c:	00021559 	.word	0x00021559

00021870 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   21870:	b580      	push	{r7, lr}
   21872:	b082      	sub	sp, #8
   21874:	af00      	add	r7, sp, #0
   21876:	6078      	str	r0, [r7, #4]
   21878:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   2187a:	683a      	ldr	r2, [r7, #0]
   2187c:	687b      	ldr	r3, [r7, #4]
   2187e:	0019      	movs	r1, r3
   21880:	2000      	movs	r0, #0
   21882:	4b03      	ldr	r3, [pc, #12]	; (21890 <sd_mmc_ram_2_mem_0+0x20>)
   21884:	4798      	blx	r3
   21886:	0003      	movs	r3, r0
}
   21888:	0018      	movs	r0, r3
   2188a:	46bd      	mov	sp, r7
   2188c:	b002      	add	sp, #8
   2188e:	bd80      	pop	{r7, pc}
   21890:	00021805 	.word	0x00021805

00021894 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   21894:	b580      	push	{r7, lr}
   21896:	b084      	sub	sp, #16
   21898:	af00      	add	r7, sp, #0
   2189a:	0002      	movs	r2, r0
   2189c:	1dfb      	adds	r3, r7, #7
   2189e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   218a0:	230f      	movs	r3, #15
   218a2:	18fb      	adds	r3, r7, r3
   218a4:	1dfa      	adds	r2, r7, #7
   218a6:	7812      	ldrb	r2, [r2, #0]
   218a8:	09d2      	lsrs	r2, r2, #7
   218aa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   218ac:	230e      	movs	r3, #14
   218ae:	18fb      	adds	r3, r7, r3
   218b0:	1dfa      	adds	r2, r7, #7
   218b2:	7812      	ldrb	r2, [r2, #0]
   218b4:	0952      	lsrs	r2, r2, #5
   218b6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   218b8:	4b0d      	ldr	r3, [pc, #52]	; (218f0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   218ba:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   218bc:	230f      	movs	r3, #15
   218be:	18fb      	adds	r3, r7, r3
   218c0:	781b      	ldrb	r3, [r3, #0]
   218c2:	2b00      	cmp	r3, #0
   218c4:	d10f      	bne.n	218e6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   218c6:	230f      	movs	r3, #15
   218c8:	18fb      	adds	r3, r7, r3
   218ca:	781b      	ldrb	r3, [r3, #0]
   218cc:	009b      	lsls	r3, r3, #2
   218ce:	2210      	movs	r2, #16
   218d0:	4694      	mov	ip, r2
   218d2:	44bc      	add	ip, r7
   218d4:	4463      	add	r3, ip
   218d6:	3b08      	subs	r3, #8
   218d8:	681a      	ldr	r2, [r3, #0]
   218da:	230e      	movs	r3, #14
   218dc:	18fb      	adds	r3, r7, r3
   218de:	781b      	ldrb	r3, [r3, #0]
   218e0:	01db      	lsls	r3, r3, #7
   218e2:	18d3      	adds	r3, r2, r3
   218e4:	e000      	b.n	218e8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   218e6:	2300      	movs	r3, #0
	}
}
   218e8:	0018      	movs	r0, r3
   218ea:	46bd      	mov	sp, r7
   218ec:	b004      	add	sp, #16
   218ee:	bd80      	pop	{r7, pc}
   218f0:	41004400 	.word	0x41004400

000218f4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   218f4:	b580      	push	{r7, lr}
   218f6:	b082      	sub	sp, #8
   218f8:	af00      	add	r7, sp, #0
   218fa:	0002      	movs	r2, r0
   218fc:	1dfb      	adds	r3, r7, #7
   218fe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   21900:	1dfb      	adds	r3, r7, #7
   21902:	781b      	ldrb	r3, [r3, #0]
   21904:	0018      	movs	r0, r3
   21906:	4b03      	ldr	r3, [pc, #12]	; (21914 <port_get_group_from_gpio_pin+0x20>)
   21908:	4798      	blx	r3
   2190a:	0003      	movs	r3, r0
}
   2190c:	0018      	movs	r0, r3
   2190e:	46bd      	mov	sp, r7
   21910:	b002      	add	sp, #8
   21912:	bd80      	pop	{r7, pc}
   21914:	00021895 	.word	0x00021895

00021918 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   21918:	b580      	push	{r7, lr}
   2191a:	b082      	sub	sp, #8
   2191c:	af00      	add	r7, sp, #0
   2191e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   21920:	687b      	ldr	r3, [r7, #4]
   21922:	2200      	movs	r2, #0
   21924:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   21926:	687b      	ldr	r3, [r7, #4]
   21928:	2201      	movs	r2, #1
   2192a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   2192c:	687b      	ldr	r3, [r7, #4]
   2192e:	2200      	movs	r2, #0
   21930:	709a      	strb	r2, [r3, #2]
}
   21932:	46c0      	nop			; (mov r8, r8)
   21934:	46bd      	mov	sp, r7
   21936:	b002      	add	sp, #8
   21938:	bd80      	pop	{r7, pc}
	...

0002193c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   2193c:	b580      	push	{r7, lr}
   2193e:	b084      	sub	sp, #16
   21940:	af00      	add	r7, sp, #0
   21942:	0002      	movs	r2, r0
   21944:	1dfb      	adds	r3, r7, #7
   21946:	701a      	strb	r2, [r3, #0]
   21948:	1dbb      	adds	r3, r7, #6
   2194a:	1c0a      	adds	r2, r1, #0
   2194c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2194e:	1dfb      	adds	r3, r7, #7
   21950:	781b      	ldrb	r3, [r3, #0]
   21952:	0018      	movs	r0, r3
   21954:	4b0d      	ldr	r3, [pc, #52]	; (2198c <port_pin_set_output_level+0x50>)
   21956:	4798      	blx	r3
   21958:	0003      	movs	r3, r0
   2195a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2195c:	1dfb      	adds	r3, r7, #7
   2195e:	781b      	ldrb	r3, [r3, #0]
   21960:	221f      	movs	r2, #31
   21962:	4013      	ands	r3, r2
   21964:	2201      	movs	r2, #1
   21966:	409a      	lsls	r2, r3
   21968:	0013      	movs	r3, r2
   2196a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   2196c:	1dbb      	adds	r3, r7, #6
   2196e:	781b      	ldrb	r3, [r3, #0]
   21970:	2b00      	cmp	r3, #0
   21972:	d003      	beq.n	2197c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   21974:	68fb      	ldr	r3, [r7, #12]
   21976:	68ba      	ldr	r2, [r7, #8]
   21978:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   2197a:	e002      	b.n	21982 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2197c:	68fb      	ldr	r3, [r7, #12]
   2197e:	68ba      	ldr	r2, [r7, #8]
   21980:	615a      	str	r2, [r3, #20]
}
   21982:	46c0      	nop			; (mov r8, r8)
   21984:	46bd      	mov	sp, r7
   21986:	b004      	add	sp, #16
   21988:	bd80      	pop	{r7, pc}
   2198a:	46c0      	nop			; (mov r8, r8)
   2198c:	000218f5 	.word	0x000218f5

00021990 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   21990:	b580      	push	{r7, lr}
   21992:	b084      	sub	sp, #16
   21994:	af00      	add	r7, sp, #0
   21996:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21998:	687b      	ldr	r3, [r7, #4]
   2199a:	681b      	ldr	r3, [r3, #0]
   2199c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   2199e:	68fb      	ldr	r3, [r7, #12]
   219a0:	69db      	ldr	r3, [r3, #28]
   219a2:	1e5a      	subs	r2, r3, #1
   219a4:	4193      	sbcs	r3, r2
   219a6:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   219a8:	0018      	movs	r0, r3
   219aa:	46bd      	mov	sp, r7
   219ac:	b004      	add	sp, #16
   219ae:	bd80      	pop	{r7, pc}

000219b0 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   219b0:	b580      	push	{r7, lr}
   219b2:	b082      	sub	sp, #8
   219b4:	af00      	add	r7, sp, #0
   219b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   219b8:	687b      	ldr	r3, [r7, #4]
   219ba:	2201      	movs	r2, #1
   219bc:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   219be:	687b      	ldr	r3, [r7, #4]
   219c0:	2200      	movs	r2, #0
   219c2:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   219c4:	687b      	ldr	r3, [r7, #4]
   219c6:	2200      	movs	r2, #0
   219c8:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   219ca:	687b      	ldr	r3, [r7, #4]
   219cc:	22c0      	movs	r2, #192	; 0xc0
   219ce:	0392      	lsls	r2, r2, #14
   219d0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   219d2:	687b      	ldr	r3, [r7, #4]
   219d4:	2200      	movs	r2, #0
   219d6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   219d8:	687b      	ldr	r3, [r7, #4]
   219da:	2200      	movs	r2, #0
   219dc:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   219de:	687b      	ldr	r3, [r7, #4]
   219e0:	2201      	movs	r2, #1
   219e2:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   219e4:	687b      	ldr	r3, [r7, #4]
   219e6:	2201      	movs	r2, #1
   219e8:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   219ea:	687b      	ldr	r3, [r7, #4]
   219ec:	2200      	movs	r2, #0
   219ee:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   219f0:	687b      	ldr	r3, [r7, #4]
   219f2:	2224      	movs	r2, #36	; 0x24
   219f4:	2100      	movs	r1, #0
   219f6:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   219f8:	687b      	ldr	r3, [r7, #4]
   219fa:	3318      	adds	r3, #24
   219fc:	220c      	movs	r2, #12
   219fe:	2100      	movs	r1, #0
   21a00:	0018      	movs	r0, r3
   21a02:	4b0a      	ldr	r3, [pc, #40]	; (21a2c <spi_get_config_defaults+0x7c>)
   21a04:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   21a06:	687b      	ldr	r3, [r7, #4]
   21a08:	4a09      	ldr	r2, [pc, #36]	; (21a30 <spi_get_config_defaults+0x80>)
   21a0a:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   21a0c:	687b      	ldr	r3, [r7, #4]
   21a0e:	2200      	movs	r2, #0
   21a10:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   21a12:	687b      	ldr	r3, [r7, #4]
   21a14:	2200      	movs	r2, #0
   21a16:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   21a18:	687b      	ldr	r3, [r7, #4]
   21a1a:	2200      	movs	r2, #0
   21a1c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   21a1e:	687b      	ldr	r3, [r7, #4]
   21a20:	2200      	movs	r2, #0
   21a22:	635a      	str	r2, [r3, #52]	; 0x34

};
   21a24:	46c0      	nop			; (mov r8, r8)
   21a26:	46bd      	mov	sp, r7
   21a28:	b002      	add	sp, #8
   21a2a:	bd80      	pop	{r7, pc}
   21a2c:	0003794b 	.word	0x0003794b
   21a30:	000186a0 	.word	0x000186a0

00021a34 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   21a34:	b580      	push	{r7, lr}
   21a36:	b082      	sub	sp, #8
   21a38:	af00      	add	r7, sp, #0
   21a3a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   21a3c:	687b      	ldr	r3, [r7, #4]
   21a3e:	220a      	movs	r2, #10
   21a40:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   21a42:	687b      	ldr	r3, [r7, #4]
   21a44:	2200      	movs	r2, #0
   21a46:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   21a48:	687b      	ldr	r3, [r7, #4]
   21a4a:	2200      	movs	r2, #0
   21a4c:	709a      	strb	r2, [r3, #2]
}
   21a4e:	46c0      	nop			; (mov r8, r8)
   21a50:	46bd      	mov	sp, r7
   21a52:	b002      	add	sp, #8
   21a54:	bd80      	pop	{r7, pc}
	...

00021a58 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   21a58:	b580      	push	{r7, lr}
   21a5a:	b084      	sub	sp, #16
   21a5c:	af00      	add	r7, sp, #0
   21a5e:	6078      	str	r0, [r7, #4]
   21a60:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   21a62:	683b      	ldr	r3, [r7, #0]
   21a64:	781a      	ldrb	r2, [r3, #0]
   21a66:	687b      	ldr	r3, [r7, #4]
   21a68:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   21a6a:	683b      	ldr	r3, [r7, #0]
   21a6c:	785a      	ldrb	r2, [r3, #1]
   21a6e:	687b      	ldr	r3, [r7, #4]
   21a70:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   21a72:	683b      	ldr	r3, [r7, #0]
   21a74:	789a      	ldrb	r2, [r3, #2]
   21a76:	687b      	ldr	r3, [r7, #4]
   21a78:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   21a7a:	230c      	movs	r3, #12
   21a7c:	18fb      	adds	r3, r7, r3
   21a7e:	0018      	movs	r0, r3
   21a80:	4b0b      	ldr	r3, [pc, #44]	; (21ab0 <spi_attach_slave+0x58>)
   21a82:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   21a84:	230c      	movs	r3, #12
   21a86:	18fb      	adds	r3, r7, r3
   21a88:	2201      	movs	r2, #1
   21a8a:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   21a8c:	687b      	ldr	r3, [r7, #4]
   21a8e:	781b      	ldrb	r3, [r3, #0]
   21a90:	220c      	movs	r2, #12
   21a92:	18ba      	adds	r2, r7, r2
   21a94:	0011      	movs	r1, r2
   21a96:	0018      	movs	r0, r3
   21a98:	4b06      	ldr	r3, [pc, #24]	; (21ab4 <spi_attach_slave+0x5c>)
   21a9a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   21a9c:	687b      	ldr	r3, [r7, #4]
   21a9e:	781b      	ldrb	r3, [r3, #0]
   21aa0:	2101      	movs	r1, #1
   21aa2:	0018      	movs	r0, r3
   21aa4:	4b04      	ldr	r3, [pc, #16]	; (21ab8 <spi_attach_slave+0x60>)
   21aa6:	4798      	blx	r3
}
   21aa8:	46c0      	nop			; (mov r8, r8)
   21aaa:	46bd      	mov	sp, r7
   21aac:	b004      	add	sp, #16
   21aae:	bd80      	pop	{r7, pc}
   21ab0:	00021919 	.word	0x00021919
   21ab4:	00028db5 	.word	0x00028db5
   21ab8:	0002193d 	.word	0x0002193d

00021abc <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   21abc:	b580      	push	{r7, lr}
   21abe:	b084      	sub	sp, #16
   21ac0:	af00      	add	r7, sp, #0
   21ac2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21ac4:	687b      	ldr	r3, [r7, #4]
   21ac6:	681b      	ldr	r3, [r3, #0]
   21ac8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
   21aca:	46c0      	nop			; (mov r8, r8)
   21acc:	687b      	ldr	r3, [r7, #4]
   21ace:	0018      	movs	r0, r3
   21ad0:	4b06      	ldr	r3, [pc, #24]	; (21aec <spi_enable+0x30>)
   21ad2:	4798      	blx	r3
   21ad4:	1e03      	subs	r3, r0, #0
   21ad6:	d1f9      	bne.n	21acc <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   21ad8:	68fb      	ldr	r3, [r7, #12]
   21ada:	681b      	ldr	r3, [r3, #0]
   21adc:	2202      	movs	r2, #2
   21ade:	431a      	orrs	r2, r3
   21ae0:	68fb      	ldr	r3, [r7, #12]
   21ae2:	601a      	str	r2, [r3, #0]
}
   21ae4:	46c0      	nop			; (mov r8, r8)
   21ae6:	46bd      	mov	sp, r7
   21ae8:	b004      	add	sp, #16
   21aea:	bd80      	pop	{r7, pc}
   21aec:	00021991 	.word	0x00021991

00021af0 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   21af0:	b580      	push	{r7, lr}
   21af2:	b084      	sub	sp, #16
   21af4:	af00      	add	r7, sp, #0
   21af6:	6078      	str	r0, [r7, #4]
   21af8:	000a      	movs	r2, r1
   21afa:	1cfb      	adds	r3, r7, #3
   21afc:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   21afe:	230f      	movs	r3, #15
   21b00:	18fb      	adds	r3, r7, r3
   21b02:	2200      	movs	r2, #0
   21b04:	701a      	strb	r2, [r3, #0]
	while (size--) {
   21b06:	e038      	b.n	21b7a <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   21b08:	687b      	ldr	r3, [r7, #4]
   21b0a:	1c5a      	adds	r2, r3, #1
   21b0c:	607a      	str	r2, [r7, #4]
   21b0e:	220e      	movs	r2, #14
   21b10:	18ba      	adds	r2, r7, r2
   21b12:	781b      	ldrb	r3, [r3, #0]
   21b14:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   21b16:	230d      	movs	r3, #13
   21b18:	18fb      	adds	r3, r7, r3
   21b1a:	2200      	movs	r2, #0
   21b1c:	701a      	strb	r2, [r3, #0]
   21b1e:	e027      	b.n	21b70 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   21b20:	230f      	movs	r3, #15
   21b22:	18fa      	adds	r2, r7, r3
   21b24:	230f      	movs	r3, #15
   21b26:	18fb      	adds	r3, r7, r3
   21b28:	781b      	ldrb	r3, [r3, #0]
   21b2a:	18db      	adds	r3, r3, r3
   21b2c:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   21b2e:	230e      	movs	r3, #14
   21b30:	18fa      	adds	r2, r7, r3
   21b32:	230f      	movs	r3, #15
   21b34:	18fb      	adds	r3, r7, r3
   21b36:	7812      	ldrb	r2, [r2, #0]
   21b38:	781b      	ldrb	r3, [r3, #0]
   21b3a:	4053      	eors	r3, r2
   21b3c:	b2db      	uxtb	r3, r3
   21b3e:	b25b      	sxtb	r3, r3
   21b40:	2b00      	cmp	r3, #0
   21b42:	da07      	bge.n	21b54 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   21b44:	230f      	movs	r3, #15
   21b46:	18fb      	adds	r3, r7, r3
   21b48:	220f      	movs	r2, #15
   21b4a:	18ba      	adds	r2, r7, r2
   21b4c:	7812      	ldrb	r2, [r2, #0]
   21b4e:	2109      	movs	r1, #9
   21b50:	404a      	eors	r2, r1
   21b52:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   21b54:	230e      	movs	r3, #14
   21b56:	18fa      	adds	r2, r7, r3
   21b58:	230e      	movs	r3, #14
   21b5a:	18fb      	adds	r3, r7, r3
   21b5c:	781b      	ldrb	r3, [r3, #0]
   21b5e:	18db      	adds	r3, r3, r3
   21b60:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   21b62:	230d      	movs	r3, #13
   21b64:	18fb      	adds	r3, r7, r3
   21b66:	781a      	ldrb	r2, [r3, #0]
   21b68:	230d      	movs	r3, #13
   21b6a:	18fb      	adds	r3, r7, r3
   21b6c:	3201      	adds	r2, #1
   21b6e:	701a      	strb	r2, [r3, #0]
   21b70:	230d      	movs	r3, #13
   21b72:	18fb      	adds	r3, r7, r3
   21b74:	781b      	ldrb	r3, [r3, #0]
   21b76:	2b07      	cmp	r3, #7
   21b78:	d9d2      	bls.n	21b20 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   21b7a:	1cfb      	adds	r3, r7, #3
   21b7c:	781b      	ldrb	r3, [r3, #0]
   21b7e:	1cfa      	adds	r2, r7, #3
   21b80:	1e59      	subs	r1, r3, #1
   21b82:	7011      	strb	r1, [r2, #0]
   21b84:	2b00      	cmp	r3, #0
   21b86:	d1bf      	bne.n	21b08 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   21b88:	230f      	movs	r3, #15
   21b8a:	18fb      	adds	r3, r7, r3
   21b8c:	781b      	ldrb	r3, [r3, #0]
   21b8e:	005b      	lsls	r3, r3, #1
   21b90:	b25b      	sxtb	r3, r3
   21b92:	2201      	movs	r2, #1
   21b94:	4313      	orrs	r3, r2
   21b96:	b25a      	sxtb	r2, r3
   21b98:	230f      	movs	r3, #15
   21b9a:	18fb      	adds	r3, r7, r3
   21b9c:	701a      	strb	r2, [r3, #0]
	return crc;
   21b9e:	230f      	movs	r3, #15
   21ba0:	18fb      	adds	r3, r7, r3
   21ba2:	781b      	ldrb	r3, [r3, #0]
}
   21ba4:	0018      	movs	r0, r3
   21ba6:	46bd      	mov	sp, r7
   21ba8:	b004      	add	sp, #16
   21baa:	bd80      	pop	{r7, pc}

00021bac <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   21bac:	b590      	push	{r4, r7, lr}
   21bae:	b083      	sub	sp, #12
   21bb0:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   21bb2:	1c7b      	adds	r3, r7, #1
   21bb4:	22ff      	movs	r2, #255	; 0xff
   21bb6:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   21bb8:	1cbb      	adds	r3, r7, #2
   21bba:	22ff      	movs	r2, #255	; 0xff
   21bbc:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   21bbe:	1cbb      	adds	r3, r7, #2
   21bc0:	881b      	ldrh	r3, [r3, #0]
   21bc2:	1c79      	adds	r1, r7, #1
   21bc4:	4811      	ldr	r0, [pc, #68]	; (21c0c <sd_mmc_spi_wait_busy+0x60>)
   21bc6:	2201      	movs	r2, #1
   21bc8:	4c11      	ldr	r4, [pc, #68]	; (21c10 <sd_mmc_spi_wait_busy+0x64>)
   21bca:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   21bcc:	4b11      	ldr	r3, [pc, #68]	; (21c14 <sd_mmc_spi_wait_busy+0x68>)
   21bce:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   21bd0:	1cbb      	adds	r3, r7, #2
   21bd2:	881b      	ldrh	r3, [r3, #0]
   21bd4:	1c79      	adds	r1, r7, #1
   21bd6:	480d      	ldr	r0, [pc, #52]	; (21c0c <sd_mmc_spi_wait_busy+0x60>)
   21bd8:	2201      	movs	r2, #1
   21bda:	4c0d      	ldr	r4, [pc, #52]	; (21c10 <sd_mmc_spi_wait_busy+0x64>)
   21bdc:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   21bde:	1cbb      	adds	r3, r7, #2
   21be0:	881b      	ldrh	r3, [r3, #0]
   21be2:	1c79      	adds	r1, r7, #1
   21be4:	4809      	ldr	r0, [pc, #36]	; (21c0c <sd_mmc_spi_wait_busy+0x60>)
   21be6:	2201      	movs	r2, #1
   21be8:	4c09      	ldr	r4, [pc, #36]	; (21c10 <sd_mmc_spi_wait_busy+0x64>)
   21bea:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   21bec:	687b      	ldr	r3, [r7, #4]
   21bee:	1e5a      	subs	r2, r3, #1
   21bf0:	607a      	str	r2, [r7, #4]
   21bf2:	2b00      	cmp	r3, #0
   21bf4:	d101      	bne.n	21bfa <sd_mmc_spi_wait_busy+0x4e>
			return false;
   21bf6:	2300      	movs	r3, #0
   21bf8:	e004      	b.n	21c04 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   21bfa:	1c7b      	adds	r3, r7, #1
   21bfc:	781b      	ldrb	r3, [r3, #0]
   21bfe:	2bff      	cmp	r3, #255	; 0xff
   21c00:	d1ed      	bne.n	21bde <sd_mmc_spi_wait_busy+0x32>
	return true;
   21c02:	2301      	movs	r3, #1
}
   21c04:	0018      	movs	r0, r3
   21c06:	46bd      	mov	sp, r7
   21c08:	b003      	add	sp, #12
   21c0a:	bd90      	pop	{r4, r7, pc}
   21c0c:	200040f4 	.word	0x200040f4
   21c10:	0002a5b9 	.word	0x0002a5b9
   21c14:	00030d40 	.word	0x00030d40

00021c18 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   21c18:	b590      	push	{r4, r7, lr}
   21c1a:	b083      	sub	sp, #12
   21c1c:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   21c1e:	1cbb      	adds	r3, r7, #2
   21c20:	22ff      	movs	r2, #255	; 0xff
   21c22:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   21c24:	1c7b      	adds	r3, r7, #1
   21c26:	2200      	movs	r2, #0
   21c28:	701a      	strb	r2, [r3, #0]
	i = 500000;
   21c2a:	4b18      	ldr	r3, [pc, #96]	; (21c8c <sd_mmc_spi_start_read_block+0x74>)
   21c2c:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   21c2e:	687b      	ldr	r3, [r7, #4]
   21c30:	1e5a      	subs	r2, r3, #1
   21c32:	607a      	str	r2, [r7, #4]
   21c34:	2b00      	cmp	r3, #0
   21c36:	d104      	bne.n	21c42 <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   21c38:	4b15      	ldr	r3, [pc, #84]	; (21c90 <sd_mmc_spi_start_read_block+0x78>)
   21c3a:	2204      	movs	r2, #4
   21c3c:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   21c3e:	2300      	movs	r3, #0
   21c40:	e020      	b.n	21c84 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   21c42:	1cbb      	adds	r3, r7, #2
   21c44:	881b      	ldrh	r3, [r3, #0]
   21c46:	1c79      	adds	r1, r7, #1
   21c48:	4812      	ldr	r0, [pc, #72]	; (21c94 <sd_mmc_spi_start_read_block+0x7c>)
   21c4a:	2201      	movs	r2, #1
   21c4c:	4c12      	ldr	r4, [pc, #72]	; (21c98 <sd_mmc_spi_start_read_block+0x80>)
   21c4e:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   21c50:	1c7b      	adds	r3, r7, #1
   21c52:	781b      	ldrb	r3, [r3, #0]
   21c54:	001a      	movs	r2, r3
   21c56:	23f0      	movs	r3, #240	; 0xf0
   21c58:	4013      	ands	r3, r2
   21c5a:	d10e      	bne.n	21c7a <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   21c5c:	1c7b      	adds	r3, r7, #1
   21c5e:	781b      	ldrb	r3, [r3, #0]
   21c60:	001a      	movs	r2, r3
   21c62:	2307      	movs	r3, #7
   21c64:	4013      	ands	r3, r2
   21c66:	d003      	beq.n	21c70 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   21c68:	4b09      	ldr	r3, [pc, #36]	; (21c90 <sd_mmc_spi_start_read_block+0x78>)
   21c6a:	2207      	movs	r2, #7
   21c6c:	701a      	strb	r2, [r3, #0]
   21c6e:	e002      	b.n	21c76 <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   21c70:	4b07      	ldr	r3, [pc, #28]	; (21c90 <sd_mmc_spi_start_read_block+0x78>)
   21c72:	220b      	movs	r2, #11
   21c74:	701a      	strb	r2, [r3, #0]
			}
			return false;
   21c76:	2300      	movs	r3, #0
   21c78:	e004      	b.n	21c84 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   21c7a:	1c7b      	adds	r3, r7, #1
   21c7c:	781b      	ldrb	r3, [r3, #0]
   21c7e:	2bfe      	cmp	r3, #254	; 0xfe
   21c80:	d1d5      	bne.n	21c2e <sd_mmc_spi_start_read_block+0x16>

	return true;
   21c82:	2301      	movs	r3, #1
}
   21c84:	0018      	movs	r0, r3
   21c86:	46bd      	mov	sp, r7
   21c88:	b003      	add	sp, #12
   21c8a:	bd90      	pop	{r4, r7, pc}
   21c8c:	0007a120 	.word	0x0007a120
   21c90:	20004107 	.word	0x20004107
   21c94:	200040f4 	.word	0x200040f4
   21c98:	0002a5b9 	.word	0x0002a5b9

00021c9c <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   21c9c:	b590      	push	{r4, r7, lr}
   21c9e:	b083      	sub	sp, #12
   21ca0:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   21ca2:	1dbb      	adds	r3, r7, #6
   21ca4:	22ff      	movs	r2, #255	; 0xff
   21ca6:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   21ca8:	1dbb      	adds	r3, r7, #6
   21caa:	881b      	ldrh	r3, [r3, #0]
   21cac:	1d39      	adds	r1, r7, #4
   21cae:	4804      	ldr	r0, [pc, #16]	; (21cc0 <sd_mmc_spi_stop_read_block+0x24>)
   21cb0:	2202      	movs	r2, #2
   21cb2:	4c04      	ldr	r4, [pc, #16]	; (21cc4 <sd_mmc_spi_stop_read_block+0x28>)
   21cb4:	47a0      	blx	r4
			dummy);
}
   21cb6:	46c0      	nop			; (mov r8, r8)
   21cb8:	46bd      	mov	sp, r7
   21cba:	b003      	add	sp, #12
   21cbc:	bd90      	pop	{r4, r7, pc}
   21cbe:	46c0      	nop			; (mov r8, r8)
   21cc0:	200040f4 	.word	0x200040f4
   21cc4:	0002a5b9 	.word	0x0002a5b9

00021cc8 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   21cc8:	b580      	push	{r7, lr}
   21cca:	b082      	sub	sp, #8
   21ccc:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   21cce:	1dfb      	adds	r3, r7, #7
   21cd0:	22ff      	movs	r2, #255	; 0xff
   21cd2:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   21cd4:	1df9      	adds	r1, r7, #7
   21cd6:	4b0d      	ldr	r3, [pc, #52]	; (21d0c <sd_mmc_spi_start_write_block+0x44>)
   21cd8:	2201      	movs	r2, #1
   21cda:	0018      	movs	r0, r3
   21cdc:	4b0c      	ldr	r3, [pc, #48]	; (21d10 <sd_mmc_spi_start_write_block+0x48>)
   21cde:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   21ce0:	4b0c      	ldr	r3, [pc, #48]	; (21d14 <sd_mmc_spi_start_write_block+0x4c>)
   21ce2:	881b      	ldrh	r3, [r3, #0]
   21ce4:	2b01      	cmp	r3, #1
   21ce6:	d103      	bne.n	21cf0 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   21ce8:	1dbb      	adds	r3, r7, #6
   21cea:	22fe      	movs	r2, #254	; 0xfe
   21cec:	701a      	strb	r2, [r3, #0]
   21cee:	e002      	b.n	21cf6 <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   21cf0:	1dbb      	adds	r3, r7, #6
   21cf2:	22fc      	movs	r2, #252	; 0xfc
   21cf4:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   21cf6:	1db9      	adds	r1, r7, #6
   21cf8:	4b04      	ldr	r3, [pc, #16]	; (21d0c <sd_mmc_spi_start_write_block+0x44>)
   21cfa:	2201      	movs	r2, #1
   21cfc:	0018      	movs	r0, r3
   21cfe:	4b04      	ldr	r3, [pc, #16]	; (21d10 <sd_mmc_spi_start_write_block+0x48>)
   21d00:	4798      	blx	r3
}
   21d02:	46c0      	nop			; (mov r8, r8)
   21d04:	46bd      	mov	sp, r7
   21d06:	b002      	add	sp, #8
   21d08:	bd80      	pop	{r7, pc}
   21d0a:	46c0      	nop			; (mov r8, r8)
   21d0c:	200040f4 	.word	0x200040f4
   21d10:	0002a855 	.word	0x0002a855
   21d14:	20004112 	.word	0x20004112

00021d18 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   21d18:	b590      	push	{r4, r7, lr}
   21d1a:	b083      	sub	sp, #12
   21d1c:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   21d1e:	1dbb      	adds	r3, r7, #6
   21d20:	22ff      	movs	r2, #255	; 0xff
   21d22:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   21d24:	1cbb      	adds	r3, r7, #2
   21d26:	2201      	movs	r2, #1
   21d28:	4252      	negs	r2, r2
   21d2a:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   21d2c:	1cb9      	adds	r1, r7, #2
   21d2e:	4b1b      	ldr	r3, [pc, #108]	; (21d9c <sd_mmc_spi_stop_write_block+0x84>)
   21d30:	2202      	movs	r2, #2
   21d32:	0018      	movs	r0, r3
   21d34:	4b1a      	ldr	r3, [pc, #104]	; (21da0 <sd_mmc_spi_stop_write_block+0x88>)
   21d36:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   21d38:	1dbb      	adds	r3, r7, #6
   21d3a:	881b      	ldrh	r3, [r3, #0]
   21d3c:	1d79      	adds	r1, r7, #5
   21d3e:	4817      	ldr	r0, [pc, #92]	; (21d9c <sd_mmc_spi_stop_write_block+0x84>)
   21d40:	2201      	movs	r2, #1
   21d42:	4c18      	ldr	r4, [pc, #96]	; (21da4 <sd_mmc_spi_stop_write_block+0x8c>)
   21d44:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   21d46:	1d7b      	adds	r3, r7, #5
   21d48:	781b      	ldrb	r3, [r3, #0]
   21d4a:	001a      	movs	r2, r3
   21d4c:	2310      	movs	r3, #16
   21d4e:	4013      	ands	r3, r2
   21d50:	d105      	bne.n	21d5e <sd_mmc_spi_stop_write_block+0x46>
   21d52:	1d7b      	adds	r3, r7, #5
   21d54:	781b      	ldrb	r3, [r3, #0]
   21d56:	001a      	movs	r2, r3
   21d58:	2301      	movs	r3, #1
   21d5a:	4013      	ands	r3, r2
   21d5c:	d104      	bne.n	21d68 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   21d5e:	4b12      	ldr	r3, [pc, #72]	; (21da8 <sd_mmc_spi_stop_write_block+0x90>)
   21d60:	2201      	movs	r2, #1
   21d62:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   21d64:	2300      	movs	r3, #0
   21d66:	e014      	b.n	21d92 <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   21d68:	1d7b      	adds	r3, r7, #5
   21d6a:	781b      	ldrb	r3, [r3, #0]
   21d6c:	001a      	movs	r2, r3
   21d6e:	231e      	movs	r3, #30
   21d70:	4013      	ands	r3, r2
   21d72:	2b04      	cmp	r3, #4
   21d74:	d00b      	beq.n	21d8e <sd_mmc_spi_stop_write_block+0x76>
   21d76:	2b0a      	cmp	r3, #10
   21d78:	d104      	bne.n	21d84 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   21d7a:	4b0b      	ldr	r3, [pc, #44]	; (21da8 <sd_mmc_spi_stop_write_block+0x90>)
   21d7c:	2208      	movs	r2, #8
   21d7e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   21d80:	2300      	movs	r3, #0
   21d82:	e006      	b.n	21d92 <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   21d84:	4b08      	ldr	r3, [pc, #32]	; (21da8 <sd_mmc_spi_stop_write_block+0x90>)
   21d86:	220a      	movs	r2, #10
   21d88:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   21d8a:	2300      	movs	r3, #0
   21d8c:	e001      	b.n	21d92 <sd_mmc_spi_stop_write_block+0x7a>
		break;
   21d8e:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   21d90:	2301      	movs	r3, #1
}
   21d92:	0018      	movs	r0, r3
   21d94:	46bd      	mov	sp, r7
   21d96:	b003      	add	sp, #12
   21d98:	bd90      	pop	{r4, r7, pc}
   21d9a:	46c0      	nop			; (mov r8, r8)
   21d9c:	200040f4 	.word	0x200040f4
   21da0:	0002a855 	.word	0x0002a855
   21da4:	0002a5b9 	.word	0x0002a5b9
   21da8:	20004107 	.word	0x20004107

00021dac <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   21dac:	b590      	push	{r4, r7, lr}
   21dae:	b083      	sub	sp, #12
   21db0:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   21db2:	4b1d      	ldr	r3, [pc, #116]	; (21e28 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   21db4:	881b      	ldrh	r3, [r3, #0]
   21db6:	2b01      	cmp	r3, #1
   21db8:	d101      	bne.n	21dbe <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   21dba:	2301      	movs	r3, #1
   21dbc:	e030      	b.n	21e20 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   21dbe:	4b1a      	ldr	r3, [pc, #104]	; (21e28 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   21dc0:	881b      	ldrh	r3, [r3, #0]
   21dc2:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   21dc4:	4b19      	ldr	r3, [pc, #100]	; (21e2c <sd_mmc_spi_stop_multiwrite_block+0x80>)
   21dc6:	681a      	ldr	r2, [r3, #0]
   21dc8:	4b19      	ldr	r3, [pc, #100]	; (21e30 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   21dca:	881b      	ldrh	r3, [r3, #0]
   21dcc:	0019      	movs	r1, r3
   21dce:	4b19      	ldr	r3, [pc, #100]	; (21e34 <sd_mmc_spi_stop_multiwrite_block+0x88>)
   21dd0:	0010      	movs	r0, r2
   21dd2:	4798      	blx	r3
   21dd4:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   21dd6:	429c      	cmp	r4, r3
   21dd8:	d901      	bls.n	21dde <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   21dda:	2301      	movs	r3, #1
   21ddc:	e020      	b.n	21e20 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   21dde:	1dfb      	adds	r3, r7, #7
   21de0:	22ff      	movs	r2, #255	; 0xff
   21de2:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   21de4:	1df9      	adds	r1, r7, #7
   21de6:	4b14      	ldr	r3, [pc, #80]	; (21e38 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   21de8:	2201      	movs	r2, #1
   21dea:	0018      	movs	r0, r3
   21dec:	4b13      	ldr	r3, [pc, #76]	; (21e3c <sd_mmc_spi_stop_multiwrite_block+0x90>)
   21dee:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   21df0:	1dfb      	adds	r3, r7, #7
   21df2:	22fd      	movs	r2, #253	; 0xfd
   21df4:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   21df6:	1df9      	adds	r1, r7, #7
   21df8:	4b0f      	ldr	r3, [pc, #60]	; (21e38 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   21dfa:	2201      	movs	r2, #1
   21dfc:	0018      	movs	r0, r3
   21dfe:	4b0f      	ldr	r3, [pc, #60]	; (21e3c <sd_mmc_spi_stop_multiwrite_block+0x90>)
   21e00:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   21e02:	4b0f      	ldr	r3, [pc, #60]	; (21e40 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   21e04:	4798      	blx	r3
   21e06:	0003      	movs	r3, r0
   21e08:	001a      	movs	r2, r3
   21e0a:	2301      	movs	r3, #1
   21e0c:	4053      	eors	r3, r2
   21e0e:	b2db      	uxtb	r3, r3
   21e10:	2b00      	cmp	r3, #0
   21e12:	d004      	beq.n	21e1e <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   21e14:	4b0b      	ldr	r3, [pc, #44]	; (21e44 <sd_mmc_spi_stop_multiwrite_block+0x98>)
   21e16:	2205      	movs	r2, #5
   21e18:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   21e1a:	2300      	movs	r3, #0
   21e1c:	e000      	b.n	21e20 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   21e1e:	2301      	movs	r3, #1
}
   21e20:	0018      	movs	r0, r3
   21e22:	46bd      	mov	sp, r7
   21e24:	b003      	add	sp, #12
   21e26:	bd90      	pop	{r4, r7, pc}
   21e28:	20004112 	.word	0x20004112
   21e2c:	2000410c 	.word	0x2000410c
   21e30:	20004110 	.word	0x20004110
   21e34:	00034e15 	.word	0x00034e15
   21e38:	200040f4 	.word	0x200040f4
   21e3c:	0002a855 	.word	0x0002a855
   21e40:	00021bad 	.word	0x00021bad
   21e44:	20004107 	.word	0x20004107

00021e48 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   21e48:	b580      	push	{r7, lr}
   21e4a:	b090      	sub	sp, #64	; 0x40
   21e4c:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   21e4e:	4b1f      	ldr	r3, [pc, #124]	; (21ecc <sd_mmc_spi_init+0x84>)
   21e50:	2200      	movs	r2, #0
   21e52:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   21e54:	233c      	movs	r3, #60	; 0x3c
   21e56:	18fb      	adds	r3, r7, r3
   21e58:	0018      	movs	r0, r3
   21e5a:	4b1d      	ldr	r3, [pc, #116]	; (21ed0 <sd_mmc_spi_init+0x88>)
   21e5c:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   21e5e:	1d3b      	adds	r3, r7, #4
   21e60:	0018      	movs	r0, r3
   21e62:	4b1c      	ldr	r3, [pc, #112]	; (21ed4 <sd_mmc_spi_init+0x8c>)
   21e64:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   21e66:	1d3b      	adds	r3, r7, #4
   21e68:	2280      	movs	r2, #128	; 0x80
   21e6a:	0252      	lsls	r2, r2, #9
   21e6c:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   21e6e:	1d3b      	adds	r3, r7, #4
   21e70:	4a19      	ldr	r2, [pc, #100]	; (21ed8 <sd_mmc_spi_init+0x90>)
   21e72:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   21e74:	1d3b      	adds	r3, r7, #4
   21e76:	4a19      	ldr	r2, [pc, #100]	; (21edc <sd_mmc_spi_init+0x94>)
   21e78:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   21e7a:	1d3b      	adds	r3, r7, #4
   21e7c:	4a18      	ldr	r2, [pc, #96]	; (21ee0 <sd_mmc_spi_init+0x98>)
   21e7e:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   21e80:	1d3b      	adds	r3, r7, #4
   21e82:	4a18      	ldr	r2, [pc, #96]	; (21ee4 <sd_mmc_spi_init+0x9c>)
   21e84:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   21e86:	1d3b      	adds	r3, r7, #4
   21e88:	2224      	movs	r2, #36	; 0x24
   21e8a:	2100      	movs	r1, #0
   21e8c:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   21e8e:	1d3b      	adds	r3, r7, #4
   21e90:	4a15      	ldr	r2, [pc, #84]	; (21ee8 <sd_mmc_spi_init+0xa0>)
   21e92:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   21e94:	1d3a      	adds	r2, r7, #4
   21e96:	4915      	ldr	r1, [pc, #84]	; (21eec <sd_mmc_spi_init+0xa4>)
   21e98:	4b15      	ldr	r3, [pc, #84]	; (21ef0 <sd_mmc_spi_init+0xa8>)
   21e9a:	0018      	movs	r0, r3
   21e9c:	4b15      	ldr	r3, [pc, #84]	; (21ef4 <sd_mmc_spi_init+0xac>)
   21e9e:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   21ea0:	4b13      	ldr	r3, [pc, #76]	; (21ef0 <sd_mmc_spi_init+0xa8>)
   21ea2:	0018      	movs	r0, r3
   21ea4:	4b14      	ldr	r3, [pc, #80]	; (21ef8 <sd_mmc_spi_init+0xb0>)
   21ea6:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   21ea8:	4b14      	ldr	r3, [pc, #80]	; (21efc <sd_mmc_spi_init+0xb4>)
   21eaa:	0018      	movs	r0, r3
   21eac:	4b14      	ldr	r3, [pc, #80]	; (21f00 <sd_mmc_spi_init+0xb8>)
   21eae:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   21eb0:	4b14      	ldr	r3, [pc, #80]	; (21f04 <sd_mmc_spi_init+0xbc>)
   21eb2:	781a      	ldrb	r2, [r3, #0]
   21eb4:	4b11      	ldr	r3, [pc, #68]	; (21efc <sd_mmc_spi_init+0xb4>)
   21eb6:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   21eb8:	4a10      	ldr	r2, [pc, #64]	; (21efc <sd_mmc_spi_init+0xb4>)
   21eba:	4b13      	ldr	r3, [pc, #76]	; (21f08 <sd_mmc_spi_init+0xc0>)
   21ebc:	0011      	movs	r1, r2
   21ebe:	0018      	movs	r0, r3
   21ec0:	4b12      	ldr	r3, [pc, #72]	; (21f0c <sd_mmc_spi_init+0xc4>)
   21ec2:	4798      	blx	r3
}
   21ec4:	46c0      	nop			; (mov r8, r8)
   21ec6:	46bd      	mov	sp, r7
   21ec8:	b010      	add	sp, #64	; 0x40
   21eca:	bd80      	pop	{r7, pc}
   21ecc:	20004107 	.word	0x20004107
   21ed0:	00021919 	.word	0x00021919
   21ed4:	000219b1 	.word	0x000219b1
   21ed8:	00100002 	.word	0x00100002
   21edc:	00110002 	.word	0x00110002
   21ee0:	00120002 	.word	0x00120002
   21ee4:	00130002 	.word	0x00130002
   21ee8:	00061a80 	.word	0x00061a80
   21eec:	42000c00 	.word	0x42000c00
   21ef0:	200040f4 	.word	0x200040f4
   21ef4:	0002a4b1 	.word	0x0002a4b1
   21ef8:	00021abd 	.word	0x00021abd
   21efc:	20004104 	.word	0x20004104
   21f00:	00021a35 	.word	0x00021a35
   21f04:	20000120 	.word	0x20000120
   21f08:	20004100 	.word	0x20004100
   21f0c:	00021a59 	.word	0x00021a59

00021f10 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   21f10:	b590      	push	{r4, r7, lr}
   21f12:	b083      	sub	sp, #12
   21f14:	af00      	add	r7, sp, #0
   21f16:	0004      	movs	r4, r0
   21f18:	6039      	str	r1, [r7, #0]
   21f1a:	0010      	movs	r0, r2
   21f1c:	0019      	movs	r1, r3
   21f1e:	1dfb      	adds	r3, r7, #7
   21f20:	1c22      	adds	r2, r4, #0
   21f22:	701a      	strb	r2, [r3, #0]
   21f24:	1dbb      	adds	r3, r7, #6
   21f26:	1c02      	adds	r2, r0, #0
   21f28:	701a      	strb	r2, [r3, #0]
   21f2a:	1d7b      	adds	r3, r7, #5
   21f2c:	1c0a      	adds	r2, r1, #0
   21f2e:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   21f30:	4b13      	ldr	r3, [pc, #76]	; (21f80 <sd_mmc_spi_select_device+0x70>)
   21f32:	2200      	movs	r2, #0
   21f34:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   21f36:	683b      	ldr	r3, [r7, #0]
   21f38:	4a12      	ldr	r2, [pc, #72]	; (21f84 <sd_mmc_spi_select_device+0x74>)
   21f3a:	4293      	cmp	r3, r2
   21f3c:	d907      	bls.n	21f4e <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   21f3e:	4b11      	ldr	r3, [pc, #68]	; (21f84 <sd_mmc_spi_select_device+0x74>)
   21f40:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   21f42:	e004      	b.n	21f4e <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   21f44:	683b      	ldr	r3, [r7, #0]
   21f46:	08db      	lsrs	r3, r3, #3
   21f48:	683a      	ldr	r2, [r7, #0]
   21f4a:	1ad3      	subs	r3, r2, r3
   21f4c:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   21f4e:	683a      	ldr	r2, [r7, #0]
   21f50:	4b0d      	ldr	r3, [pc, #52]	; (21f88 <sd_mmc_spi_select_device+0x78>)
   21f52:	0011      	movs	r1, r2
   21f54:	0018      	movs	r0, r3
   21f56:	4b0d      	ldr	r3, [pc, #52]	; (21f8c <sd_mmc_spi_select_device+0x7c>)
   21f58:	4798      	blx	r3
   21f5a:	0003      	movs	r3, r0
   21f5c:	2b17      	cmp	r3, #23
   21f5e:	d0f1      	beq.n	21f44 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   21f60:	1dfb      	adds	r3, r7, #7
   21f62:	781a      	ldrb	r2, [r3, #0]
   21f64:	0013      	movs	r3, r2
   21f66:	005b      	lsls	r3, r3, #1
   21f68:	189b      	adds	r3, r3, r2
   21f6a:	4a09      	ldr	r2, [pc, #36]	; (21f90 <sd_mmc_spi_select_device+0x80>)
   21f6c:	1899      	adds	r1, r3, r2
   21f6e:	4b06      	ldr	r3, [pc, #24]	; (21f88 <sd_mmc_spi_select_device+0x78>)
   21f70:	2201      	movs	r2, #1
   21f72:	0018      	movs	r0, r3
   21f74:	4b07      	ldr	r3, [pc, #28]	; (21f94 <sd_mmc_spi_select_device+0x84>)
   21f76:	4798      	blx	r3
}
   21f78:	46c0      	nop			; (mov r8, r8)
   21f7a:	46bd      	mov	sp, r7
   21f7c:	b003      	add	sp, #12
   21f7e:	bd90      	pop	{r4, r7, pc}
   21f80:	20004107 	.word	0x20004107
   21f84:	00989680 	.word	0x00989680
   21f88:	200040f4 	.word	0x200040f4
   21f8c:	00029f49 	.word	0x00029f49
   21f90:	20004100 	.word	0x20004100
   21f94:	0002a765 	.word	0x0002a765

00021f98 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   21f98:	b580      	push	{r7, lr}
   21f9a:	b082      	sub	sp, #8
   21f9c:	af00      	add	r7, sp, #0
   21f9e:	0002      	movs	r2, r0
   21fa0:	1dfb      	adds	r3, r7, #7
   21fa2:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   21fa4:	4b09      	ldr	r3, [pc, #36]	; (21fcc <sd_mmc_spi_deselect_device+0x34>)
   21fa6:	2200      	movs	r2, #0
   21fa8:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   21faa:	1dfb      	adds	r3, r7, #7
   21fac:	781a      	ldrb	r2, [r3, #0]
   21fae:	0013      	movs	r3, r2
   21fb0:	005b      	lsls	r3, r3, #1
   21fb2:	189b      	adds	r3, r3, r2
   21fb4:	4a06      	ldr	r2, [pc, #24]	; (21fd0 <sd_mmc_spi_deselect_device+0x38>)
   21fb6:	1899      	adds	r1, r3, r2
   21fb8:	4b06      	ldr	r3, [pc, #24]	; (21fd4 <sd_mmc_spi_deselect_device+0x3c>)
   21fba:	2200      	movs	r2, #0
   21fbc:	0018      	movs	r0, r3
   21fbe:	4b06      	ldr	r3, [pc, #24]	; (21fd8 <sd_mmc_spi_deselect_device+0x40>)
   21fc0:	4798      	blx	r3
}
   21fc2:	46c0      	nop			; (mov r8, r8)
   21fc4:	46bd      	mov	sp, r7
   21fc6:	b002      	add	sp, #8
   21fc8:	bd80      	pop	{r7, pc}
   21fca:	46c0      	nop			; (mov r8, r8)
   21fcc:	20004107 	.word	0x20004107
   21fd0:	20004100 	.word	0x20004100
   21fd4:	200040f4 	.word	0x200040f4
   21fd8:	0002a765 	.word	0x0002a765

00021fdc <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   21fdc:	b580      	push	{r7, lr}
   21fde:	b082      	sub	sp, #8
   21fe0:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   21fe2:	1dbb      	adds	r3, r7, #6
   21fe4:	22ff      	movs	r2, #255	; 0xff
   21fe6:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   21fe8:	4b0c      	ldr	r3, [pc, #48]	; (2201c <sd_mmc_spi_send_clock+0x40>)
   21fea:	2200      	movs	r2, #0
   21fec:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   21fee:	1dfb      	adds	r3, r7, #7
   21ff0:	2200      	movs	r2, #0
   21ff2:	701a      	strb	r2, [r3, #0]
   21ff4:	e00a      	b.n	2200c <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   21ff6:	1db9      	adds	r1, r7, #6
   21ff8:	4b09      	ldr	r3, [pc, #36]	; (22020 <sd_mmc_spi_send_clock+0x44>)
   21ffa:	2201      	movs	r2, #1
   21ffc:	0018      	movs	r0, r3
   21ffe:	4b09      	ldr	r3, [pc, #36]	; (22024 <sd_mmc_spi_send_clock+0x48>)
   22000:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   22002:	1dfb      	adds	r3, r7, #7
   22004:	781a      	ldrb	r2, [r3, #0]
   22006:	1dfb      	adds	r3, r7, #7
   22008:	3201      	adds	r2, #1
   2200a:	701a      	strb	r2, [r3, #0]
   2200c:	1dfb      	adds	r3, r7, #7
   2200e:	781b      	ldrb	r3, [r3, #0]
   22010:	2b09      	cmp	r3, #9
   22012:	d9f0      	bls.n	21ff6 <sd_mmc_spi_send_clock+0x1a>
	}
}
   22014:	46c0      	nop			; (mov r8, r8)
   22016:	46bd      	mov	sp, r7
   22018:	b002      	add	sp, #8
   2201a:	bd80      	pop	{r7, pc}
   2201c:	20004107 	.word	0x20004107
   22020:	200040f4 	.word	0x200040f4
   22024:	0002a855 	.word	0x0002a855

00022028 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   22028:	b590      	push	{r4, r7, lr}
   2202a:	b085      	sub	sp, #20
   2202c:	af02      	add	r7, sp, #8
   2202e:	6078      	str	r0, [r7, #4]
   22030:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   22032:	6839      	ldr	r1, [r7, #0]
   22034:	6878      	ldr	r0, [r7, #4]
   22036:	2300      	movs	r3, #0
   22038:	9300      	str	r3, [sp, #0]
   2203a:	2300      	movs	r3, #0
   2203c:	2200      	movs	r2, #0
   2203e:	4c03      	ldr	r4, [pc, #12]	; (2204c <sd_mmc_spi_send_cmd+0x24>)
   22040:	47a0      	blx	r4
   22042:	0003      	movs	r3, r0
}
   22044:	0018      	movs	r0, r3
   22046:	46bd      	mov	sp, r7
   22048:	b003      	add	sp, #12
   2204a:	bd90      	pop	{r4, r7, pc}
   2204c:	00022051 	.word	0x00022051

00022050 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   22050:	b590      	push	{r4, r7, lr}
   22052:	b089      	sub	sp, #36	; 0x24
   22054:	af00      	add	r7, sp, #0
   22056:	60f8      	str	r0, [r7, #12]
   22058:	60b9      	str	r1, [r7, #8]
   2205a:	0019      	movs	r1, r3
   2205c:	1dbb      	adds	r3, r7, #6
   2205e:	801a      	strh	r2, [r3, #0]
   22060:	1d3b      	adds	r3, r7, #4
   22062:	1c0a      	adds	r2, r1, #0
   22064:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   22066:	231b      	movs	r3, #27
   22068:	18fb      	adds	r3, r7, r3
   2206a:	22ff      	movs	r2, #255	; 0xff
   2206c:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   2206e:	231c      	movs	r3, #28
   22070:	18fb      	adds	r3, r7, r3
   22072:	22ff      	movs	r2, #255	; 0xff
   22074:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   22076:	4b72      	ldr	r3, [pc, #456]	; (22240 <sd_mmc_spi_adtc_start+0x1f0>)
   22078:	2200      	movs	r2, #0
   2207a:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   2207c:	68fb      	ldr	r3, [r7, #12]
   2207e:	b2db      	uxtb	r3, r3
   22080:	223f      	movs	r2, #63	; 0x3f
   22082:	4013      	ands	r3, r2
   22084:	b2db      	uxtb	r3, r3
   22086:	2240      	movs	r2, #64	; 0x40
   22088:	4313      	orrs	r3, r2
   2208a:	b2da      	uxtb	r2, r3
   2208c:	2314      	movs	r3, #20
   2208e:	18fb      	adds	r3, r7, r3
   22090:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   22092:	68bb      	ldr	r3, [r7, #8]
   22094:	0e1b      	lsrs	r3, r3, #24
   22096:	b2da      	uxtb	r2, r3
   22098:	2314      	movs	r3, #20
   2209a:	18fb      	adds	r3, r7, r3
   2209c:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   2209e:	68bb      	ldr	r3, [r7, #8]
   220a0:	0c1b      	lsrs	r3, r3, #16
   220a2:	b2da      	uxtb	r2, r3
   220a4:	2314      	movs	r3, #20
   220a6:	18fb      	adds	r3, r7, r3
   220a8:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   220aa:	68bb      	ldr	r3, [r7, #8]
   220ac:	0a1b      	lsrs	r3, r3, #8
   220ae:	b2da      	uxtb	r2, r3
   220b0:	2314      	movs	r3, #20
   220b2:	18fb      	adds	r3, r7, r3
   220b4:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   220b6:	68bb      	ldr	r3, [r7, #8]
   220b8:	b2da      	uxtb	r2, r3
   220ba:	2314      	movs	r3, #20
   220bc:	18fb      	adds	r3, r7, r3
   220be:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   220c0:	2314      	movs	r3, #20
   220c2:	18fb      	adds	r3, r7, r3
   220c4:	2105      	movs	r1, #5
   220c6:	0018      	movs	r0, r3
   220c8:	4b5e      	ldr	r3, [pc, #376]	; (22244 <sd_mmc_spi_adtc_start+0x1f4>)
   220ca:	4798      	blx	r3
   220cc:	0003      	movs	r3, r0
   220ce:	001a      	movs	r2, r3
   220d0:	2314      	movs	r3, #20
   220d2:	18fb      	adds	r3, r7, r3
   220d4:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   220d6:	231b      	movs	r3, #27
   220d8:	18f9      	adds	r1, r7, r3
   220da:	4b5b      	ldr	r3, [pc, #364]	; (22248 <sd_mmc_spi_adtc_start+0x1f8>)
   220dc:	2201      	movs	r2, #1
   220de:	0018      	movs	r0, r3
   220e0:	4b5a      	ldr	r3, [pc, #360]	; (2224c <sd_mmc_spi_adtc_start+0x1fc>)
   220e2:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   220e4:	2314      	movs	r3, #20
   220e6:	18f9      	adds	r1, r7, r3
   220e8:	4b57      	ldr	r3, [pc, #348]	; (22248 <sd_mmc_spi_adtc_start+0x1f8>)
   220ea:	2206      	movs	r2, #6
   220ec:	0018      	movs	r0, r3
   220ee:	4b57      	ldr	r3, [pc, #348]	; (2224c <sd_mmc_spi_adtc_start+0x1fc>)
   220f0:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   220f2:	2313      	movs	r3, #19
   220f4:	18fb      	adds	r3, r7, r3
   220f6:	22ff      	movs	r2, #255	; 0xff
   220f8:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   220fa:	231c      	movs	r3, #28
   220fc:	18fb      	adds	r3, r7, r3
   220fe:	881b      	ldrh	r3, [r3, #0]
   22100:	2213      	movs	r2, #19
   22102:	18b9      	adds	r1, r7, r2
   22104:	4850      	ldr	r0, [pc, #320]	; (22248 <sd_mmc_spi_adtc_start+0x1f8>)
   22106:	2201      	movs	r2, #1
   22108:	4c51      	ldr	r4, [pc, #324]	; (22250 <sd_mmc_spi_adtc_start+0x200>)
   2210a:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   2210c:	231f      	movs	r3, #31
   2210e:	18fb      	adds	r3, r7, r3
   22110:	2207      	movs	r2, #7
   22112:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   22114:	231c      	movs	r3, #28
   22116:	18fb      	adds	r3, r7, r3
   22118:	881b      	ldrh	r3, [r3, #0]
   2211a:	2213      	movs	r2, #19
   2211c:	18b9      	adds	r1, r7, r2
   2211e:	484a      	ldr	r0, [pc, #296]	; (22248 <sd_mmc_spi_adtc_start+0x1f8>)
   22120:	2201      	movs	r2, #1
   22122:	4c4b      	ldr	r4, [pc, #300]	; (22250 <sd_mmc_spi_adtc_start+0x200>)
   22124:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   22126:	2313      	movs	r3, #19
   22128:	18fb      	adds	r3, r7, r3
   2212a:	781b      	ldrb	r3, [r3, #0]
   2212c:	b25b      	sxtb	r3, r3
   2212e:	2b00      	cmp	r3, #0
   22130:	da10      	bge.n	22154 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   22132:	231f      	movs	r3, #31
   22134:	18fb      	adds	r3, r7, r3
   22136:	221f      	movs	r2, #31
   22138:	18ba      	adds	r2, r7, r2
   2213a:	7812      	ldrb	r2, [r2, #0]
   2213c:	3a01      	subs	r2, #1
   2213e:	701a      	strb	r2, [r3, #0]
   22140:	231f      	movs	r3, #31
   22142:	18fb      	adds	r3, r7, r3
   22144:	781b      	ldrb	r3, [r3, #0]
   22146:	2b00      	cmp	r3, #0
   22148:	d1e4      	bne.n	22114 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   2214a:	4b3d      	ldr	r3, [pc, #244]	; (22240 <sd_mmc_spi_adtc_start+0x1f0>)
   2214c:	2202      	movs	r2, #2
   2214e:	701a      	strb	r2, [r3, #0]
			return false;
   22150:	2300      	movs	r3, #0
   22152:	e070      	b.n	22236 <sd_mmc_spi_adtc_start+0x1e6>
			break;
   22154:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   22156:	2313      	movs	r3, #19
   22158:	18fb      	adds	r3, r7, r3
   2215a:	781b      	ldrb	r3, [r3, #0]
   2215c:	001a      	movs	r2, r3
   2215e:	4b3d      	ldr	r3, [pc, #244]	; (22254 <sd_mmc_spi_adtc_start+0x204>)
   22160:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   22162:	2313      	movs	r3, #19
   22164:	18fb      	adds	r3, r7, r3
   22166:	781b      	ldrb	r3, [r3, #0]
   22168:	001a      	movs	r2, r3
   2216a:	2308      	movs	r3, #8
   2216c:	4013      	ands	r3, r2
   2216e:	d004      	beq.n	2217a <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   22170:	4b33      	ldr	r3, [pc, #204]	; (22240 <sd_mmc_spi_adtc_start+0x1f0>)
   22172:	2206      	movs	r2, #6
   22174:	701a      	strb	r2, [r3, #0]
		return false;
   22176:	2300      	movs	r3, #0
   22178:	e05d      	b.n	22236 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   2217a:	2313      	movs	r3, #19
   2217c:	18fb      	adds	r3, r7, r3
   2217e:	781b      	ldrb	r3, [r3, #0]
   22180:	001a      	movs	r2, r3
   22182:	2304      	movs	r3, #4
   22184:	4013      	ands	r3, r2
   22186:	d004      	beq.n	22192 <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   22188:	4b2d      	ldr	r3, [pc, #180]	; (22240 <sd_mmc_spi_adtc_start+0x1f0>)
   2218a:	2209      	movs	r2, #9
   2218c:	701a      	strb	r2, [r3, #0]
		return false;
   2218e:	2300      	movs	r3, #0
   22190:	e051      	b.n	22236 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   22192:	2313      	movs	r3, #19
   22194:	18fb      	adds	r3, r7, r3
   22196:	781b      	ldrb	r3, [r3, #0]
   22198:	001a      	movs	r2, r3
   2219a:	2301      	movs	r3, #1
   2219c:	439a      	bics	r2, r3
   2219e:	1e13      	subs	r3, r2, #0
   221a0:	d004      	beq.n	221ac <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   221a2:	4b27      	ldr	r3, [pc, #156]	; (22240 <sd_mmc_spi_adtc_start+0x1f0>)
   221a4:	2201      	movs	r2, #1
   221a6:	701a      	strb	r2, [r3, #0]
		return false;
   221a8:	2300      	movs	r3, #0
   221aa:	e044      	b.n	22236 <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   221ac:	68fa      	ldr	r2, [r7, #12]
   221ae:	2380      	movs	r3, #128	; 0x80
   221b0:	019b      	lsls	r3, r3, #6
   221b2:	4013      	ands	r3, r2
   221b4:	d00d      	beq.n	221d2 <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   221b6:	4b28      	ldr	r3, [pc, #160]	; (22258 <sd_mmc_spi_adtc_start+0x208>)
   221b8:	4798      	blx	r3
   221ba:	0003      	movs	r3, r0
   221bc:	001a      	movs	r2, r3
   221be:	2301      	movs	r3, #1
   221c0:	4053      	eors	r3, r2
   221c2:	b2db      	uxtb	r3, r3
   221c4:	2b00      	cmp	r3, #0
   221c6:	d004      	beq.n	221d2 <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   221c8:	4b1d      	ldr	r3, [pc, #116]	; (22240 <sd_mmc_spi_adtc_start+0x1f0>)
   221ca:	2203      	movs	r2, #3
   221cc:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   221ce:	2300      	movs	r3, #0
   221d0:	e031      	b.n	22236 <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   221d2:	68fa      	ldr	r2, [r7, #12]
   221d4:	2380      	movs	r3, #128	; 0x80
   221d6:	009b      	lsls	r3, r3, #2
   221d8:	4013      	ands	r3, r2
   221da:	d00e      	beq.n	221fa <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   221dc:	4b1d      	ldr	r3, [pc, #116]	; (22254 <sd_mmc_spi_adtc_start+0x204>)
   221de:	2200      	movs	r2, #0
   221e0:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   221e2:	231c      	movs	r3, #28
   221e4:	18fb      	adds	r3, r7, r3
   221e6:	881b      	ldrh	r3, [r3, #0]
   221e8:	491a      	ldr	r1, [pc, #104]	; (22254 <sd_mmc_spi_adtc_start+0x204>)
   221ea:	4817      	ldr	r0, [pc, #92]	; (22248 <sd_mmc_spi_adtc_start+0x1f8>)
   221ec:	2201      	movs	r2, #1
   221ee:	4c18      	ldr	r4, [pc, #96]	; (22250 <sd_mmc_spi_adtc_start+0x200>)
   221f0:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   221f2:	4b18      	ldr	r3, [pc, #96]	; (22254 <sd_mmc_spi_adtc_start+0x204>)
   221f4:	681a      	ldr	r2, [r3, #0]
   221f6:	4b17      	ldr	r3, [pc, #92]	; (22254 <sd_mmc_spi_adtc_start+0x204>)
   221f8:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   221fa:	68fa      	ldr	r2, [r7, #12]
   221fc:	2380      	movs	r3, #128	; 0x80
   221fe:	00db      	lsls	r3, r3, #3
   22200:	4013      	ands	r3, r2
   22202:	d00c      	beq.n	2221e <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   22204:	231c      	movs	r3, #28
   22206:	18fb      	adds	r3, r7, r3
   22208:	881b      	ldrh	r3, [r3, #0]
   2220a:	4912      	ldr	r1, [pc, #72]	; (22254 <sd_mmc_spi_adtc_start+0x204>)
   2220c:	480e      	ldr	r0, [pc, #56]	; (22248 <sd_mmc_spi_adtc_start+0x1f8>)
   2220e:	2204      	movs	r2, #4
   22210:	4c0f      	ldr	r4, [pc, #60]	; (22250 <sd_mmc_spi_adtc_start+0x200>)
   22212:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   22214:	4b0f      	ldr	r3, [pc, #60]	; (22254 <sd_mmc_spi_adtc_start+0x204>)
   22216:	681b      	ldr	r3, [r3, #0]
   22218:	ba1a      	rev	r2, r3
   2221a:	4b0e      	ldr	r3, [pc, #56]	; (22254 <sd_mmc_spi_adtc_start+0x204>)
   2221c:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   2221e:	4b0f      	ldr	r3, [pc, #60]	; (2225c <sd_mmc_spi_adtc_start+0x20c>)
   22220:	1dba      	adds	r2, r7, #6
   22222:	8812      	ldrh	r2, [r2, #0]
   22224:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   22226:	4b0e      	ldr	r3, [pc, #56]	; (22260 <sd_mmc_spi_adtc_start+0x210>)
   22228:	1d3a      	adds	r2, r7, #4
   2222a:	8812      	ldrh	r2, [r2, #0]
   2222c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   2222e:	4b0d      	ldr	r3, [pc, #52]	; (22264 <sd_mmc_spi_adtc_start+0x214>)
   22230:	2200      	movs	r2, #0
   22232:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   22234:	2301      	movs	r3, #1
}
   22236:	0018      	movs	r0, r3
   22238:	46bd      	mov	sp, r7
   2223a:	b009      	add	sp, #36	; 0x24
   2223c:	bd90      	pop	{r4, r7, pc}
   2223e:	46c0      	nop			; (mov r8, r8)
   22240:	20004107 	.word	0x20004107
   22244:	00021af1 	.word	0x00021af1
   22248:	200040f4 	.word	0x200040f4
   2224c:	0002a855 	.word	0x0002a855
   22250:	0002a5b9 	.word	0x0002a5b9
   22254:	20004108 	.word	0x20004108
   22258:	00021bad 	.word	0x00021bad
   2225c:	20004110 	.word	0x20004110
   22260:	20004112 	.word	0x20004112
   22264:	2000410c 	.word	0x2000410c

00022268 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   22268:	b580      	push	{r7, lr}
   2226a:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   2226c:	4b02      	ldr	r3, [pc, #8]	; (22278 <sd_mmc_spi_get_response+0x10>)
   2226e:	681b      	ldr	r3, [r3, #0]
}
   22270:	0018      	movs	r0, r3
   22272:	46bd      	mov	sp, r7
   22274:	bd80      	pop	{r7, pc}
   22276:	46c0      	nop			; (mov r8, r8)
   22278:	20004108 	.word	0x20004108

0002227c <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   2227c:	b590      	push	{r4, r7, lr}
   2227e:	b085      	sub	sp, #20
   22280:	af00      	add	r7, sp, #0
   22282:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   22284:	230e      	movs	r3, #14
   22286:	18fb      	adds	r3, r7, r3
   22288:	22ff      	movs	r2, #255	; 0xff
   2228a:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   2228c:	4b1c      	ldr	r3, [pc, #112]	; (22300 <sd_mmc_spi_read_word+0x84>)
   2228e:	2200      	movs	r2, #0
   22290:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   22292:	4b1c      	ldr	r3, [pc, #112]	; (22304 <sd_mmc_spi_read_word+0x88>)
   22294:	681a      	ldr	r2, [r3, #0]
   22296:	4b1c      	ldr	r3, [pc, #112]	; (22308 <sd_mmc_spi_read_word+0x8c>)
   22298:	881b      	ldrh	r3, [r3, #0]
   2229a:	0019      	movs	r1, r3
   2229c:	4b1b      	ldr	r3, [pc, #108]	; (2230c <sd_mmc_spi_read_word+0x90>)
   2229e:	0010      	movs	r0, r2
   222a0:	4798      	blx	r3
   222a2:	1e0b      	subs	r3, r1, #0
   222a4:	d10a      	bne.n	222bc <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   222a6:	4b1a      	ldr	r3, [pc, #104]	; (22310 <sd_mmc_spi_read_word+0x94>)
   222a8:	4798      	blx	r3
   222aa:	0003      	movs	r3, r0
   222ac:	001a      	movs	r2, r3
   222ae:	2301      	movs	r3, #1
   222b0:	4053      	eors	r3, r2
   222b2:	b2db      	uxtb	r3, r3
   222b4:	2b00      	cmp	r3, #0
   222b6:	d001      	beq.n	222bc <sd_mmc_spi_read_word+0x40>
			return false;
   222b8:	2300      	movs	r3, #0
   222ba:	e01d      	b.n	222f8 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   222bc:	230e      	movs	r3, #14
   222be:	18fb      	adds	r3, r7, r3
   222c0:	881b      	ldrh	r3, [r3, #0]
   222c2:	1d39      	adds	r1, r7, #4
   222c4:	4813      	ldr	r0, [pc, #76]	; (22314 <sd_mmc_spi_read_word+0x98>)
   222c6:	2204      	movs	r2, #4
   222c8:	4c13      	ldr	r4, [pc, #76]	; (22318 <sd_mmc_spi_read_word+0x9c>)
   222ca:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   222cc:	687b      	ldr	r3, [r7, #4]
   222ce:	687a      	ldr	r2, [r7, #4]
   222d0:	6812      	ldr	r2, [r2, #0]
   222d2:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   222d4:	4b0b      	ldr	r3, [pc, #44]	; (22304 <sd_mmc_spi_read_word+0x88>)
   222d6:	681b      	ldr	r3, [r3, #0]
   222d8:	1d1a      	adds	r2, r3, #4
   222da:	4b0a      	ldr	r3, [pc, #40]	; (22304 <sd_mmc_spi_read_word+0x88>)
   222dc:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   222de:	4b09      	ldr	r3, [pc, #36]	; (22304 <sd_mmc_spi_read_word+0x88>)
   222e0:	681a      	ldr	r2, [r3, #0]
   222e2:	4b09      	ldr	r3, [pc, #36]	; (22308 <sd_mmc_spi_read_word+0x8c>)
   222e4:	881b      	ldrh	r3, [r3, #0]
   222e6:	0019      	movs	r1, r3
   222e8:	4b08      	ldr	r3, [pc, #32]	; (2230c <sd_mmc_spi_read_word+0x90>)
   222ea:	0010      	movs	r0, r2
   222ec:	4798      	blx	r3
   222ee:	1e0b      	subs	r3, r1, #0
   222f0:	d101      	bne.n	222f6 <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   222f2:	4b0a      	ldr	r3, [pc, #40]	; (2231c <sd_mmc_spi_read_word+0xa0>)
   222f4:	4798      	blx	r3
	}
	return true;
   222f6:	2301      	movs	r3, #1
}
   222f8:	0018      	movs	r0, r3
   222fa:	46bd      	mov	sp, r7
   222fc:	b005      	add	sp, #20
   222fe:	bd90      	pop	{r4, r7, pc}
   22300:	20004107 	.word	0x20004107
   22304:	2000410c 	.word	0x2000410c
   22308:	20004110 	.word	0x20004110
   2230c:	00034f21 	.word	0x00034f21
   22310:	00021c19 	.word	0x00021c19
   22314:	200040f4 	.word	0x200040f4
   22318:	0002a5b9 	.word	0x0002a5b9
   2231c:	00021c9d 	.word	0x00021c9d

00022320 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   22320:	b590      	push	{r4, r7, lr}
   22322:	b085      	sub	sp, #20
   22324:	af00      	add	r7, sp, #0
   22326:	6078      	str	r0, [r7, #4]
   22328:	000a      	movs	r2, r1
   2232a:	1cbb      	adds	r3, r7, #2
   2232c:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   2232e:	230a      	movs	r3, #10
   22330:	18fb      	adds	r3, r7, r3
   22332:	22ff      	movs	r2, #255	; 0xff
   22334:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   22336:	4b1c      	ldr	r3, [pc, #112]	; (223a8 <sd_mmc_spi_start_read_blocks+0x88>)
   22338:	2200      	movs	r2, #0
   2233a:	701a      	strb	r2, [r3, #0]
	pos = 0;
   2233c:	2300      	movs	r3, #0
   2233e:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   22340:	e025      	b.n	2238e <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   22342:	4b1a      	ldr	r3, [pc, #104]	; (223ac <sd_mmc_spi_start_read_blocks+0x8c>)
   22344:	4798      	blx	r3
   22346:	0003      	movs	r3, r0
   22348:	001a      	movs	r2, r3
   2234a:	2301      	movs	r3, #1
   2234c:	4053      	eors	r3, r2
   2234e:	b2db      	uxtb	r3, r3
   22350:	2b00      	cmp	r3, #0
   22352:	d001      	beq.n	22358 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   22354:	2300      	movs	r3, #0
   22356:	e022      	b.n	2239e <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   22358:	687a      	ldr	r2, [r7, #4]
   2235a:	68fb      	ldr	r3, [r7, #12]
   2235c:	18d1      	adds	r1, r2, r3
   2235e:	4b14      	ldr	r3, [pc, #80]	; (223b0 <sd_mmc_spi_start_read_blocks+0x90>)
   22360:	881a      	ldrh	r2, [r3, #0]
   22362:	230a      	movs	r3, #10
   22364:	18fb      	adds	r3, r7, r3
   22366:	881b      	ldrh	r3, [r3, #0]
   22368:	4812      	ldr	r0, [pc, #72]	; (223b4 <sd_mmc_spi_start_read_blocks+0x94>)
   2236a:	4c13      	ldr	r4, [pc, #76]	; (223b8 <sd_mmc_spi_start_read_blocks+0x98>)
   2236c:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   2236e:	4b10      	ldr	r3, [pc, #64]	; (223b0 <sd_mmc_spi_start_read_blocks+0x90>)
   22370:	881b      	ldrh	r3, [r3, #0]
   22372:	001a      	movs	r2, r3
   22374:	68fb      	ldr	r3, [r7, #12]
   22376:	189b      	adds	r3, r3, r2
   22378:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   2237a:	4b0d      	ldr	r3, [pc, #52]	; (223b0 <sd_mmc_spi_start_read_blocks+0x90>)
   2237c:	881b      	ldrh	r3, [r3, #0]
   2237e:	001a      	movs	r2, r3
   22380:	4b0e      	ldr	r3, [pc, #56]	; (223bc <sd_mmc_spi_start_read_blocks+0x9c>)
   22382:	681b      	ldr	r3, [r3, #0]
   22384:	18d2      	adds	r2, r2, r3
   22386:	4b0d      	ldr	r3, [pc, #52]	; (223bc <sd_mmc_spi_start_read_blocks+0x9c>)
   22388:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   2238a:	4b0d      	ldr	r3, [pc, #52]	; (223c0 <sd_mmc_spi_start_read_blocks+0xa0>)
   2238c:	4798      	blx	r3
	while (nb_block--) {
   2238e:	1cbb      	adds	r3, r7, #2
   22390:	881b      	ldrh	r3, [r3, #0]
   22392:	1cba      	adds	r2, r7, #2
   22394:	1e59      	subs	r1, r3, #1
   22396:	8011      	strh	r1, [r2, #0]
   22398:	2b00      	cmp	r3, #0
   2239a:	d1d2      	bne.n	22342 <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   2239c:	2301      	movs	r3, #1
}
   2239e:	0018      	movs	r0, r3
   223a0:	46bd      	mov	sp, r7
   223a2:	b005      	add	sp, #20
   223a4:	bd90      	pop	{r4, r7, pc}
   223a6:	46c0      	nop			; (mov r8, r8)
   223a8:	20004107 	.word	0x20004107
   223ac:	00021c19 	.word	0x00021c19
   223b0:	20004110 	.word	0x20004110
   223b4:	200040f4 	.word	0x200040f4
   223b8:	0002a5b9 	.word	0x0002a5b9
   223bc:	2000410c 	.word	0x2000410c
   223c0:	00021c9d 	.word	0x00021c9d

000223c4 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   223c4:	b580      	push	{r7, lr}
   223c6:	af00      	add	r7, sp, #0
	return true;
   223c8:	2301      	movs	r3, #1
}
   223ca:	0018      	movs	r0, r3
   223cc:	46bd      	mov	sp, r7
   223ce:	bd80      	pop	{r7, pc}

000223d0 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   223d0:	b580      	push	{r7, lr}
   223d2:	b084      	sub	sp, #16
   223d4:	af00      	add	r7, sp, #0
   223d6:	6078      	str	r0, [r7, #4]
   223d8:	000a      	movs	r2, r1
   223da:	1cbb      	adds	r3, r7, #2
   223dc:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   223de:	4b24      	ldr	r3, [pc, #144]	; (22470 <sd_mmc_spi_start_write_blocks+0xa0>)
   223e0:	2200      	movs	r2, #0
   223e2:	701a      	strb	r2, [r3, #0]
	pos = 0;
   223e4:	2300      	movs	r3, #0
   223e6:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   223e8:	e035      	b.n	22456 <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   223ea:	4b22      	ldr	r3, [pc, #136]	; (22474 <sd_mmc_spi_start_write_blocks+0xa4>)
   223ec:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   223ee:	687a      	ldr	r2, [r7, #4]
   223f0:	68fb      	ldr	r3, [r7, #12]
   223f2:	18d1      	adds	r1, r2, r3
   223f4:	4b20      	ldr	r3, [pc, #128]	; (22478 <sd_mmc_spi_start_write_blocks+0xa8>)
   223f6:	881a      	ldrh	r2, [r3, #0]
   223f8:	4b20      	ldr	r3, [pc, #128]	; (2247c <sd_mmc_spi_start_write_blocks+0xac>)
   223fa:	0018      	movs	r0, r3
   223fc:	4b20      	ldr	r3, [pc, #128]	; (22480 <sd_mmc_spi_start_write_blocks+0xb0>)
   223fe:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   22400:	4b1d      	ldr	r3, [pc, #116]	; (22478 <sd_mmc_spi_start_write_blocks+0xa8>)
   22402:	881b      	ldrh	r3, [r3, #0]
   22404:	001a      	movs	r2, r3
   22406:	68fb      	ldr	r3, [r7, #12]
   22408:	189b      	adds	r3, r3, r2
   2240a:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   2240c:	4b1a      	ldr	r3, [pc, #104]	; (22478 <sd_mmc_spi_start_write_blocks+0xa8>)
   2240e:	881b      	ldrh	r3, [r3, #0]
   22410:	001a      	movs	r2, r3
   22412:	4b1c      	ldr	r3, [pc, #112]	; (22484 <sd_mmc_spi_start_write_blocks+0xb4>)
   22414:	681b      	ldr	r3, [r3, #0]
   22416:	18d2      	adds	r2, r2, r3
   22418:	4b1a      	ldr	r3, [pc, #104]	; (22484 <sd_mmc_spi_start_write_blocks+0xb4>)
   2241a:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   2241c:	4b1a      	ldr	r3, [pc, #104]	; (22488 <sd_mmc_spi_start_write_blocks+0xb8>)
   2241e:	4798      	blx	r3
   22420:	0003      	movs	r3, r0
   22422:	001a      	movs	r2, r3
   22424:	2301      	movs	r3, #1
   22426:	4053      	eors	r3, r2
   22428:	b2db      	uxtb	r3, r3
   2242a:	2b00      	cmp	r3, #0
   2242c:	d001      	beq.n	22432 <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   2242e:	2300      	movs	r3, #0
   22430:	e019      	b.n	22466 <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   22432:	1cbb      	adds	r3, r7, #2
   22434:	881b      	ldrh	r3, [r3, #0]
   22436:	2b00      	cmp	r3, #0
   22438:	d00d      	beq.n	22456 <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   2243a:	4b14      	ldr	r3, [pc, #80]	; (2248c <sd_mmc_spi_start_write_blocks+0xbc>)
   2243c:	4798      	blx	r3
   2243e:	0003      	movs	r3, r0
   22440:	001a      	movs	r2, r3
   22442:	2301      	movs	r3, #1
   22444:	4053      	eors	r3, r2
   22446:	b2db      	uxtb	r3, r3
   22448:	2b00      	cmp	r3, #0
   2244a:	d004      	beq.n	22456 <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   2244c:	4b08      	ldr	r3, [pc, #32]	; (22470 <sd_mmc_spi_start_write_blocks+0xa0>)
   2244e:	2205      	movs	r2, #5
   22450:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   22452:	2300      	movs	r3, #0
   22454:	e007      	b.n	22466 <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   22456:	1cbb      	adds	r3, r7, #2
   22458:	881b      	ldrh	r3, [r3, #0]
   2245a:	1cba      	adds	r2, r7, #2
   2245c:	1e59      	subs	r1, r3, #1
   2245e:	8011      	strh	r1, [r2, #0]
   22460:	2b00      	cmp	r3, #0
   22462:	d1c2      	bne.n	223ea <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   22464:	2301      	movs	r3, #1
}
   22466:	0018      	movs	r0, r3
   22468:	46bd      	mov	sp, r7
   2246a:	b004      	add	sp, #16
   2246c:	bd80      	pop	{r7, pc}
   2246e:	46c0      	nop			; (mov r8, r8)
   22470:	20004107 	.word	0x20004107
   22474:	00021cc9 	.word	0x00021cc9
   22478:	20004110 	.word	0x20004110
   2247c:	200040f4 	.word	0x200040f4
   22480:	0002a855 	.word	0x0002a855
   22484:	2000410c 	.word	0x2000410c
   22488:	00021d19 	.word	0x00021d19
   2248c:	00021bad 	.word	0x00021bad

00022490 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   22490:	b580      	push	{r7, lr}
   22492:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   22494:	4b09      	ldr	r3, [pc, #36]	; (224bc <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   22496:	4798      	blx	r3
   22498:	0003      	movs	r3, r0
   2249a:	001a      	movs	r2, r3
   2249c:	2301      	movs	r3, #1
   2249e:	4053      	eors	r3, r2
   224a0:	b2db      	uxtb	r3, r3
   224a2:	2b00      	cmp	r3, #0
   224a4:	d004      	beq.n	224b0 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   224a6:	4b06      	ldr	r3, [pc, #24]	; (224c0 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   224a8:	2205      	movs	r2, #5
   224aa:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   224ac:	2300      	movs	r3, #0
   224ae:	e002      	b.n	224b6 <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   224b0:	4b04      	ldr	r3, [pc, #16]	; (224c4 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   224b2:	4798      	blx	r3
   224b4:	0003      	movs	r3, r0
}
   224b6:	0018      	movs	r0, r3
   224b8:	46bd      	mov	sp, r7
   224ba:	bd80      	pop	{r7, pc}
   224bc:	00021bad 	.word	0x00021bad
   224c0:	20004107 	.word	0x20004107
   224c4:	00021dad 	.word	0x00021dad

000224c8 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   224c8:	b580      	push	{r7, lr}
   224ca:	b082      	sub	sp, #8
   224cc:	af00      	add	r7, sp, #0
   224ce:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   224d0:	687b      	ldr	r3, [r7, #4]
   224d2:	2b00      	cmp	r3, #0
   224d4:	d00c      	beq.n	224f0 <delay_cycles+0x28>
		SysTick->LOAD = n;
   224d6:	4b08      	ldr	r3, [pc, #32]	; (224f8 <delay_cycles+0x30>)
   224d8:	687a      	ldr	r2, [r7, #4]
   224da:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   224dc:	4b06      	ldr	r3, [pc, #24]	; (224f8 <delay_cycles+0x30>)
   224de:	2200      	movs	r2, #0
   224e0:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   224e2:	46c0      	nop			; (mov r8, r8)
   224e4:	4b04      	ldr	r3, [pc, #16]	; (224f8 <delay_cycles+0x30>)
   224e6:	681a      	ldr	r2, [r3, #0]
   224e8:	2380      	movs	r3, #128	; 0x80
   224ea:	025b      	lsls	r3, r3, #9
   224ec:	4013      	ands	r3, r2
   224ee:	d0f9      	beq.n	224e4 <delay_cycles+0x1c>
		};
	}
}
   224f0:	46c0      	nop			; (mov r8, r8)
   224f2:	46bd      	mov	sp, r7
   224f4:	b002      	add	sp, #8
   224f6:	bd80      	pop	{r7, pc}
   224f8:	e000e010 	.word	0xe000e010

000224fc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   224fc:	b580      	push	{r7, lr}
   224fe:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   22500:	2000      	movs	r0, #0
   22502:	4b0f      	ldr	r3, [pc, #60]	; (22540 <delay_init+0x44>)
   22504:	4798      	blx	r3
   22506:	0002      	movs	r2, r0
   22508:	4b0e      	ldr	r3, [pc, #56]	; (22544 <delay_init+0x48>)
   2250a:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   2250c:	4b0d      	ldr	r3, [pc, #52]	; (22544 <delay_init+0x48>)
   2250e:	6818      	ldr	r0, [r3, #0]
   22510:	4b0d      	ldr	r3, [pc, #52]	; (22548 <delay_init+0x4c>)
   22512:	22fa      	movs	r2, #250	; 0xfa
   22514:	0091      	lsls	r1, r2, #2
   22516:	4798      	blx	r3
   22518:	0003      	movs	r3, r0
   2251a:	001a      	movs	r2, r3
   2251c:	4b09      	ldr	r3, [pc, #36]	; (22544 <delay_init+0x48>)
   2251e:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   22520:	4b08      	ldr	r3, [pc, #32]	; (22544 <delay_init+0x48>)
   22522:	6818      	ldr	r0, [r3, #0]
   22524:	4b08      	ldr	r3, [pc, #32]	; (22548 <delay_init+0x4c>)
   22526:	22fa      	movs	r2, #250	; 0xfa
   22528:	0091      	lsls	r1, r2, #2
   2252a:	4798      	blx	r3
   2252c:	0003      	movs	r3, r0
   2252e:	001a      	movs	r2, r3
   22530:	4b06      	ldr	r3, [pc, #24]	; (2254c <delay_init+0x50>)
   22532:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   22534:	4b06      	ldr	r3, [pc, #24]	; (22550 <delay_init+0x54>)
   22536:	2205      	movs	r2, #5
   22538:	601a      	str	r2, [r3, #0]
}
   2253a:	46c0      	nop			; (mov r8, r8)
   2253c:	46bd      	mov	sp, r7
   2253e:	bd80      	pop	{r7, pc}
   22540:	0002c1c9 	.word	0x0002c1c9
   22544:	20000124 	.word	0x20000124
   22548:	00034e15 	.word	0x00034e15
   2254c:	20000128 	.word	0x20000128
   22550:	e000e010 	.word	0xe000e010

00022554 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   22554:	b580      	push	{r7, lr}
   22556:	b082      	sub	sp, #8
   22558:	af00      	add	r7, sp, #0
   2255a:	6078      	str	r0, [r7, #4]
	while (n--) {
   2255c:	e004      	b.n	22568 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   2255e:	4b07      	ldr	r3, [pc, #28]	; (2257c <delay_cycles_ms+0x28>)
   22560:	681b      	ldr	r3, [r3, #0]
   22562:	0018      	movs	r0, r3
   22564:	4b06      	ldr	r3, [pc, #24]	; (22580 <delay_cycles_ms+0x2c>)
   22566:	4798      	blx	r3
	while (n--) {
   22568:	687b      	ldr	r3, [r7, #4]
   2256a:	1e5a      	subs	r2, r3, #1
   2256c:	607a      	str	r2, [r7, #4]
   2256e:	2b00      	cmp	r3, #0
   22570:	d1f5      	bne.n	2255e <delay_cycles_ms+0xa>
	}
}
   22572:	46c0      	nop			; (mov r8, r8)
   22574:	46bd      	mov	sp, r7
   22576:	b002      	add	sp, #8
   22578:	bd80      	pop	{r7, pc}
   2257a:	46c0      	nop			; (mov r8, r8)
   2257c:	20000124 	.word	0x20000124
   22580:	000224c9 	.word	0x000224c9

00022584 <system_pinmux_get_group_from_gpio_pin>:
{
   22584:	b580      	push	{r7, lr}
   22586:	b084      	sub	sp, #16
   22588:	af00      	add	r7, sp, #0
   2258a:	0002      	movs	r2, r0
   2258c:	1dfb      	adds	r3, r7, #7
   2258e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   22590:	230f      	movs	r3, #15
   22592:	18fb      	adds	r3, r7, r3
   22594:	1dfa      	adds	r2, r7, #7
   22596:	7812      	ldrb	r2, [r2, #0]
   22598:	09d2      	lsrs	r2, r2, #7
   2259a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2259c:	230e      	movs	r3, #14
   2259e:	18fb      	adds	r3, r7, r3
   225a0:	1dfa      	adds	r2, r7, #7
   225a2:	7812      	ldrb	r2, [r2, #0]
   225a4:	0952      	lsrs	r2, r2, #5
   225a6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   225a8:	4b0d      	ldr	r3, [pc, #52]	; (225e0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   225aa:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   225ac:	230f      	movs	r3, #15
   225ae:	18fb      	adds	r3, r7, r3
   225b0:	781b      	ldrb	r3, [r3, #0]
   225b2:	2b00      	cmp	r3, #0
   225b4:	d10f      	bne.n	225d6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   225b6:	230f      	movs	r3, #15
   225b8:	18fb      	adds	r3, r7, r3
   225ba:	781b      	ldrb	r3, [r3, #0]
   225bc:	009b      	lsls	r3, r3, #2
   225be:	2210      	movs	r2, #16
   225c0:	4694      	mov	ip, r2
   225c2:	44bc      	add	ip, r7
   225c4:	4463      	add	r3, ip
   225c6:	3b08      	subs	r3, #8
   225c8:	681a      	ldr	r2, [r3, #0]
   225ca:	230e      	movs	r3, #14
   225cc:	18fb      	adds	r3, r7, r3
   225ce:	781b      	ldrb	r3, [r3, #0]
   225d0:	01db      	lsls	r3, r3, #7
   225d2:	18d3      	adds	r3, r2, r3
   225d4:	e000      	b.n	225d8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   225d6:	2300      	movs	r3, #0
}
   225d8:	0018      	movs	r0, r3
   225da:	46bd      	mov	sp, r7
   225dc:	b004      	add	sp, #16
   225de:	bd80      	pop	{r7, pc}
   225e0:	41004400 	.word	0x41004400

000225e4 <system_interrupt_enable_global>:
{
   225e4:	b580      	push	{r7, lr}
   225e6:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   225e8:	4b04      	ldr	r3, [pc, #16]	; (225fc <system_interrupt_enable_global+0x18>)
   225ea:	2201      	movs	r2, #1
   225ec:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   225ee:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   225f2:	b662      	cpsie	i
}
   225f4:	46c0      	nop			; (mov r8, r8)
   225f6:	46bd      	mov	sp, r7
   225f8:	bd80      	pop	{r7, pc}
   225fa:	46c0      	nop			; (mov r8, r8)
   225fc:	2000012e 	.word	0x2000012e

00022600 <port_get_group_from_gpio_pin>:
{
   22600:	b580      	push	{r7, lr}
   22602:	b082      	sub	sp, #8
   22604:	af00      	add	r7, sp, #0
   22606:	0002      	movs	r2, r0
   22608:	1dfb      	adds	r3, r7, #7
   2260a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2260c:	1dfb      	adds	r3, r7, #7
   2260e:	781b      	ldrb	r3, [r3, #0]
   22610:	0018      	movs	r0, r3
   22612:	4b03      	ldr	r3, [pc, #12]	; (22620 <port_get_group_from_gpio_pin+0x20>)
   22614:	4798      	blx	r3
   22616:	0003      	movs	r3, r0
}
   22618:	0018      	movs	r0, r3
   2261a:	46bd      	mov	sp, r7
   2261c:	b002      	add	sp, #8
   2261e:	bd80      	pop	{r7, pc}
   22620:	00022585 	.word	0x00022585

00022624 <port_get_config_defaults>:
{
   22624:	b580      	push	{r7, lr}
   22626:	b082      	sub	sp, #8
   22628:	af00      	add	r7, sp, #0
   2262a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   2262c:	687b      	ldr	r3, [r7, #4]
   2262e:	2200      	movs	r2, #0
   22630:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   22632:	687b      	ldr	r3, [r7, #4]
   22634:	2201      	movs	r2, #1
   22636:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   22638:	687b      	ldr	r3, [r7, #4]
   2263a:	2200      	movs	r2, #0
   2263c:	709a      	strb	r2, [r3, #2]
}
   2263e:	46c0      	nop			; (mov r8, r8)
   22640:	46bd      	mov	sp, r7
   22642:	b002      	add	sp, #8
   22644:	bd80      	pop	{r7, pc}
	...

00022648 <port_pin_set_output_level>:
{
   22648:	b580      	push	{r7, lr}
   2264a:	b084      	sub	sp, #16
   2264c:	af00      	add	r7, sp, #0
   2264e:	0002      	movs	r2, r0
   22650:	1dfb      	adds	r3, r7, #7
   22652:	701a      	strb	r2, [r3, #0]
   22654:	1dbb      	adds	r3, r7, #6
   22656:	1c0a      	adds	r2, r1, #0
   22658:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2265a:	1dfb      	adds	r3, r7, #7
   2265c:	781b      	ldrb	r3, [r3, #0]
   2265e:	0018      	movs	r0, r3
   22660:	4b0d      	ldr	r3, [pc, #52]	; (22698 <port_pin_set_output_level+0x50>)
   22662:	4798      	blx	r3
   22664:	0003      	movs	r3, r0
   22666:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   22668:	1dfb      	adds	r3, r7, #7
   2266a:	781b      	ldrb	r3, [r3, #0]
   2266c:	221f      	movs	r2, #31
   2266e:	4013      	ands	r3, r2
   22670:	2201      	movs	r2, #1
   22672:	409a      	lsls	r2, r3
   22674:	0013      	movs	r3, r2
   22676:	60bb      	str	r3, [r7, #8]
	if (level) {
   22678:	1dbb      	adds	r3, r7, #6
   2267a:	781b      	ldrb	r3, [r3, #0]
   2267c:	2b00      	cmp	r3, #0
   2267e:	d003      	beq.n	22688 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   22680:	68fb      	ldr	r3, [r7, #12]
   22682:	68ba      	ldr	r2, [r7, #8]
   22684:	619a      	str	r2, [r3, #24]
}
   22686:	e002      	b.n	2268e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   22688:	68fb      	ldr	r3, [r7, #12]
   2268a:	68ba      	ldr	r2, [r7, #8]
   2268c:	615a      	str	r2, [r3, #20]
}
   2268e:	46c0      	nop			; (mov r8, r8)
   22690:	46bd      	mov	sp, r7
   22692:	b004      	add	sp, #16
   22694:	bd80      	pop	{r7, pc}
   22696:	46c0      	nop			; (mov r8, r8)
   22698:	00022601 	.word	0x00022601

0002269c <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   2269c:	b580      	push	{r7, lr}
   2269e:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   226a0:	4b04      	ldr	r3, [pc, #16]	; (226b4 <chip_isr+0x18>)
   226a2:	681b      	ldr	r3, [r3, #0]
   226a4:	2b00      	cmp	r3, #0
   226a6:	d002      	beq.n	226ae <chip_isr+0x12>
		gpfIsr();
   226a8:	4b02      	ldr	r3, [pc, #8]	; (226b4 <chip_isr+0x18>)
   226aa:	681b      	ldr	r3, [r3, #0]
   226ac:	4798      	blx	r3
	}
}
   226ae:	46c0      	nop			; (mov r8, r8)
   226b0:	46bd      	mov	sp, r7
   226b2:	bd80      	pop	{r7, pc}
   226b4:	20004114 	.word	0x20004114

000226b8 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   226b8:	b580      	push	{r7, lr}
   226ba:	b082      	sub	sp, #8
   226bc:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   226be:	1d3b      	adds	r3, r7, #4
   226c0:	0018      	movs	r0, r3
   226c2:	4b10      	ldr	r3, [pc, #64]	; (22704 <init_chip_pins+0x4c>)
   226c4:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   226c6:	1d3b      	adds	r3, r7, #4
   226c8:	2201      	movs	r2, #1
   226ca:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   226cc:	1d3b      	adds	r3, r7, #4
   226ce:	0019      	movs	r1, r3
   226d0:	201b      	movs	r0, #27
   226d2:	4b0d      	ldr	r3, [pc, #52]	; (22708 <init_chip_pins+0x50>)
   226d4:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   226d6:	1d3b      	adds	r3, r7, #4
   226d8:	0019      	movs	r1, r3
   226da:	201c      	movs	r0, #28
   226dc:	4b0a      	ldr	r3, [pc, #40]	; (22708 <init_chip_pins+0x50>)
   226de:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   226e0:	1d3b      	adds	r3, r7, #4
   226e2:	0019      	movs	r1, r3
   226e4:	2028      	movs	r0, #40	; 0x28
   226e6:	4b08      	ldr	r3, [pc, #32]	; (22708 <init_chip_pins+0x50>)
   226e8:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   226ea:	2100      	movs	r1, #0
   226ec:	201c      	movs	r0, #28
   226ee:	4b07      	ldr	r3, [pc, #28]	; (2270c <init_chip_pins+0x54>)
   226f0:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   226f2:	2100      	movs	r1, #0
   226f4:	201b      	movs	r0, #27
   226f6:	4b05      	ldr	r3, [pc, #20]	; (2270c <init_chip_pins+0x54>)
   226f8:	4798      	blx	r3
}
   226fa:	46c0      	nop			; (mov r8, r8)
   226fc:	46bd      	mov	sp, r7
   226fe:	b002      	add	sp, #8
   22700:	bd80      	pop	{r7, pc}
   22702:	46c0      	nop			; (mov r8, r8)
   22704:	00022625 	.word	0x00022625
   22708:	00028db5 	.word	0x00028db5
   2270c:	00022649 	.word	0x00022649

00022710 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   22710:	b580      	push	{r7, lr}
   22712:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   22714:	4b0b      	ldr	r3, [pc, #44]	; (22744 <nm_bsp_init+0x34>)
   22716:	2200      	movs	r2, #0
   22718:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   2271a:	4b0b      	ldr	r3, [pc, #44]	; (22748 <nm_bsp_init+0x38>)
   2271c:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   2271e:	4b0b      	ldr	r3, [pc, #44]	; (2274c <nm_bsp_init+0x3c>)
   22720:	681b      	ldr	r3, [r3, #0]
   22722:	2201      	movs	r2, #1
   22724:	4013      	ands	r3, r2
   22726:	d004      	beq.n	22732 <nm_bsp_init+0x22>
   22728:	4b08      	ldr	r3, [pc, #32]	; (2274c <nm_bsp_init+0x3c>)
   2272a:	681b      	ldr	r3, [r3, #0]
   2272c:	2202      	movs	r2, #2
   2272e:	4013      	ands	r3, r2
   22730:	d101      	bne.n	22736 <nm_bsp_init+0x26>
	    delay_init();
   22732:	4b07      	ldr	r3, [pc, #28]	; (22750 <nm_bsp_init+0x40>)
   22734:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   22736:	4b07      	ldr	r3, [pc, #28]	; (22754 <nm_bsp_init+0x44>)
   22738:	4798      	blx	r3

	return M2M_SUCCESS;
   2273a:	2300      	movs	r3, #0
}
   2273c:	0018      	movs	r0, r3
   2273e:	46bd      	mov	sp, r7
   22740:	bd80      	pop	{r7, pc}
   22742:	46c0      	nop			; (mov r8, r8)
   22744:	20004114 	.word	0x20004114
   22748:	000226b9 	.word	0x000226b9
   2274c:	e000e010 	.word	0xe000e010
   22750:	000224fd 	.word	0x000224fd
   22754:	000225e5 	.word	0x000225e5

00022758 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   22758:	b580      	push	{r7, lr}
   2275a:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   2275c:	2100      	movs	r1, #0
   2275e:	201c      	movs	r0, #28
   22760:	4b0b      	ldr	r3, [pc, #44]	; (22790 <nm_bsp_reset+0x38>)
   22762:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   22764:	2100      	movs	r1, #0
   22766:	201b      	movs	r0, #27
   22768:	4b09      	ldr	r3, [pc, #36]	; (22790 <nm_bsp_reset+0x38>)
   2276a:	4798      	blx	r3
	nm_bsp_sleep(1);
   2276c:	2001      	movs	r0, #1
   2276e:	4b09      	ldr	r3, [pc, #36]	; (22794 <nm_bsp_reset+0x3c>)
   22770:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   22772:	2101      	movs	r1, #1
   22774:	201c      	movs	r0, #28
   22776:	4b06      	ldr	r3, [pc, #24]	; (22790 <nm_bsp_reset+0x38>)
   22778:	4798      	blx	r3
	nm_bsp_sleep(10);
   2277a:	200a      	movs	r0, #10
   2277c:	4b05      	ldr	r3, [pc, #20]	; (22794 <nm_bsp_reset+0x3c>)
   2277e:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   22780:	2101      	movs	r1, #1
   22782:	201b      	movs	r0, #27
   22784:	4b02      	ldr	r3, [pc, #8]	; (22790 <nm_bsp_reset+0x38>)
   22786:	4798      	blx	r3
}
   22788:	46c0      	nop			; (mov r8, r8)
   2278a:	46bd      	mov	sp, r7
   2278c:	bd80      	pop	{r7, pc}
   2278e:	46c0      	nop			; (mov r8, r8)
   22790:	00022649 	.word	0x00022649
   22794:	00022799 	.word	0x00022799

00022798 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   22798:	b580      	push	{r7, lr}
   2279a:	b082      	sub	sp, #8
   2279c:	af00      	add	r7, sp, #0
   2279e:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   227a0:	687b      	ldr	r3, [r7, #4]
   227a2:	0018      	movs	r0, r3
   227a4:	4b02      	ldr	r3, [pc, #8]	; (227b0 <nm_bsp_sleep+0x18>)
   227a6:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   227a8:	46c0      	nop			; (mov r8, r8)
   227aa:	46bd      	mov	sp, r7
   227ac:	b002      	add	sp, #8
   227ae:	bd80      	pop	{r7, pc}
   227b0:	0001e591 	.word	0x0001e591

000227b4 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   227b4:	b580      	push	{r7, lr}
   227b6:	b086      	sub	sp, #24
   227b8:	af00      	add	r7, sp, #0
   227ba:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   227bc:	4b15      	ldr	r3, [pc, #84]	; (22814 <nm_bsp_register_isr+0x60>)
   227be:	687a      	ldr	r2, [r7, #4]
   227c0:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   227c2:	230c      	movs	r3, #12
   227c4:	18fb      	adds	r3, r7, r3
   227c6:	0018      	movs	r0, r3
   227c8:	4b13      	ldr	r3, [pc, #76]	; (22818 <nm_bsp_register_isr+0x64>)
   227ca:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   227cc:	230c      	movs	r3, #12
   227ce:	18fb      	adds	r3, r7, r3
   227d0:	2229      	movs	r2, #41	; 0x29
   227d2:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   227d4:	230c      	movs	r3, #12
   227d6:	18fb      	adds	r3, r7, r3
   227d8:	2200      	movs	r2, #0
   227da:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   227dc:	230c      	movs	r3, #12
   227de:	18fb      	adds	r3, r7, r3
   227e0:	2201      	movs	r2, #1
   227e2:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   227e4:	230c      	movs	r3, #12
   227e6:	18fb      	adds	r3, r7, r3
   227e8:	2202      	movs	r2, #2
   227ea:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   227ec:	230c      	movs	r3, #12
   227ee:	18fb      	adds	r3, r7, r3
   227f0:	0019      	movs	r1, r3
   227f2:	2009      	movs	r0, #9
   227f4:	4b09      	ldr	r3, [pc, #36]	; (2281c <nm_bsp_register_isr+0x68>)
   227f6:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   227f8:	4b09      	ldr	r3, [pc, #36]	; (22820 <nm_bsp_register_isr+0x6c>)
   227fa:	2200      	movs	r2, #0
   227fc:	2109      	movs	r1, #9
   227fe:	0018      	movs	r0, r3
   22800:	4b08      	ldr	r3, [pc, #32]	; (22824 <nm_bsp_register_isr+0x70>)
   22802:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   22804:	2100      	movs	r1, #0
   22806:	2009      	movs	r0, #9
   22808:	4b07      	ldr	r3, [pc, #28]	; (22828 <nm_bsp_register_isr+0x74>)
   2280a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   2280c:	46c0      	nop			; (mov r8, r8)
   2280e:	46bd      	mov	sp, r7
   22810:	b006      	add	sp, #24
   22812:	bd80      	pop	{r7, pc}
   22814:	20004114 	.word	0x20004114
   22818:	00028c5d 	.word	0x00028c5d
   2281c:	00028c91 	.word	0x00028c91
   22820:	0002269d 	.word	0x0002269d
   22824:	0002885d 	.word	0x0002885d
   22828:	000288c1 	.word	0x000288c1

0002282c <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   2282c:	b580      	push	{r7, lr}
   2282e:	b082      	sub	sp, #8
   22830:	af00      	add	r7, sp, #0
   22832:	0002      	movs	r2, r0
   22834:	1dfb      	adds	r3, r7, #7
   22836:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   22838:	1dfb      	adds	r3, r7, #7
   2283a:	781b      	ldrb	r3, [r3, #0]
   2283c:	2b00      	cmp	r3, #0
   2283e:	d004      	beq.n	2284a <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   22840:	2100      	movs	r1, #0
   22842:	2009      	movs	r0, #9
   22844:	4b05      	ldr	r3, [pc, #20]	; (2285c <nm_bsp_interrupt_ctrl+0x30>)
   22846:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   22848:	e003      	b.n	22852 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   2284a:	2100      	movs	r1, #0
   2284c:	2009      	movs	r0, #9
   2284e:	4b04      	ldr	r3, [pc, #16]	; (22860 <nm_bsp_interrupt_ctrl+0x34>)
   22850:	4798      	blx	r3
}
   22852:	46c0      	nop			; (mov r8, r8)
   22854:	46bd      	mov	sp, r7
   22856:	b002      	add	sp, #8
   22858:	bd80      	pop	{r7, pc}
   2285a:	46c0      	nop			; (mov r8, r8)
   2285c:	000288c1 	.word	0x000288c1
   22860:	00028909 	.word	0x00028909

00022864 <system_pinmux_get_group_from_gpio_pin>:
{
   22864:	b580      	push	{r7, lr}
   22866:	b084      	sub	sp, #16
   22868:	af00      	add	r7, sp, #0
   2286a:	0002      	movs	r2, r0
   2286c:	1dfb      	adds	r3, r7, #7
   2286e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   22870:	230f      	movs	r3, #15
   22872:	18fb      	adds	r3, r7, r3
   22874:	1dfa      	adds	r2, r7, #7
   22876:	7812      	ldrb	r2, [r2, #0]
   22878:	09d2      	lsrs	r2, r2, #7
   2287a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2287c:	230e      	movs	r3, #14
   2287e:	18fb      	adds	r3, r7, r3
   22880:	1dfa      	adds	r2, r7, #7
   22882:	7812      	ldrb	r2, [r2, #0]
   22884:	0952      	lsrs	r2, r2, #5
   22886:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   22888:	4b0d      	ldr	r3, [pc, #52]	; (228c0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2288a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2288c:	230f      	movs	r3, #15
   2288e:	18fb      	adds	r3, r7, r3
   22890:	781b      	ldrb	r3, [r3, #0]
   22892:	2b00      	cmp	r3, #0
   22894:	d10f      	bne.n	228b6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   22896:	230f      	movs	r3, #15
   22898:	18fb      	adds	r3, r7, r3
   2289a:	781b      	ldrb	r3, [r3, #0]
   2289c:	009b      	lsls	r3, r3, #2
   2289e:	2210      	movs	r2, #16
   228a0:	4694      	mov	ip, r2
   228a2:	44bc      	add	ip, r7
   228a4:	4463      	add	r3, ip
   228a6:	3b08      	subs	r3, #8
   228a8:	681a      	ldr	r2, [r3, #0]
   228aa:	230e      	movs	r3, #14
   228ac:	18fb      	adds	r3, r7, r3
   228ae:	781b      	ldrb	r3, [r3, #0]
   228b0:	01db      	lsls	r3, r3, #7
   228b2:	18d3      	adds	r3, r2, r3
   228b4:	e000      	b.n	228b8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   228b6:	2300      	movs	r3, #0
}
   228b8:	0018      	movs	r0, r3
   228ba:	46bd      	mov	sp, r7
   228bc:	b004      	add	sp, #16
   228be:	bd80      	pop	{r7, pc}
   228c0:	41004400 	.word	0x41004400

000228c4 <port_get_group_from_gpio_pin>:
{
   228c4:	b580      	push	{r7, lr}
   228c6:	b082      	sub	sp, #8
   228c8:	af00      	add	r7, sp, #0
   228ca:	0002      	movs	r2, r0
   228cc:	1dfb      	adds	r3, r7, #7
   228ce:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   228d0:	1dfb      	adds	r3, r7, #7
   228d2:	781b      	ldrb	r3, [r3, #0]
   228d4:	0018      	movs	r0, r3
   228d6:	4b03      	ldr	r3, [pc, #12]	; (228e4 <port_get_group_from_gpio_pin+0x20>)
   228d8:	4798      	blx	r3
   228da:	0003      	movs	r3, r0
}
   228dc:	0018      	movs	r0, r3
   228de:	46bd      	mov	sp, r7
   228e0:	b002      	add	sp, #8
   228e2:	bd80      	pop	{r7, pc}
   228e4:	00022865 	.word	0x00022865

000228e8 <port_get_config_defaults>:
{
   228e8:	b580      	push	{r7, lr}
   228ea:	b082      	sub	sp, #8
   228ec:	af00      	add	r7, sp, #0
   228ee:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   228f0:	687b      	ldr	r3, [r7, #4]
   228f2:	2200      	movs	r2, #0
   228f4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   228f6:	687b      	ldr	r3, [r7, #4]
   228f8:	2201      	movs	r2, #1
   228fa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   228fc:	687b      	ldr	r3, [r7, #4]
   228fe:	2200      	movs	r2, #0
   22900:	709a      	strb	r2, [r3, #2]
}
   22902:	46c0      	nop			; (mov r8, r8)
   22904:	46bd      	mov	sp, r7
   22906:	b002      	add	sp, #8
   22908:	bd80      	pop	{r7, pc}
	...

0002290c <port_pin_set_output_level>:
{
   2290c:	b580      	push	{r7, lr}
   2290e:	b084      	sub	sp, #16
   22910:	af00      	add	r7, sp, #0
   22912:	0002      	movs	r2, r0
   22914:	1dfb      	adds	r3, r7, #7
   22916:	701a      	strb	r2, [r3, #0]
   22918:	1dbb      	adds	r3, r7, #6
   2291a:	1c0a      	adds	r2, r1, #0
   2291c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2291e:	1dfb      	adds	r3, r7, #7
   22920:	781b      	ldrb	r3, [r3, #0]
   22922:	0018      	movs	r0, r3
   22924:	4b0d      	ldr	r3, [pc, #52]	; (2295c <port_pin_set_output_level+0x50>)
   22926:	4798      	blx	r3
   22928:	0003      	movs	r3, r0
   2292a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2292c:	1dfb      	adds	r3, r7, #7
   2292e:	781b      	ldrb	r3, [r3, #0]
   22930:	221f      	movs	r2, #31
   22932:	4013      	ands	r3, r2
   22934:	2201      	movs	r2, #1
   22936:	409a      	lsls	r2, r3
   22938:	0013      	movs	r3, r2
   2293a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2293c:	1dbb      	adds	r3, r7, #6
   2293e:	781b      	ldrb	r3, [r3, #0]
   22940:	2b00      	cmp	r3, #0
   22942:	d003      	beq.n	2294c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   22944:	68fb      	ldr	r3, [r7, #12]
   22946:	68ba      	ldr	r2, [r7, #8]
   22948:	619a      	str	r2, [r3, #24]
}
   2294a:	e002      	b.n	22952 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2294c:	68fb      	ldr	r3, [r7, #12]
   2294e:	68ba      	ldr	r2, [r7, #8]
   22950:	615a      	str	r2, [r3, #20]
}
   22952:	46c0      	nop			; (mov r8, r8)
   22954:	46bd      	mov	sp, r7
   22956:	b004      	add	sp, #16
   22958:	bd80      	pop	{r7, pc}
   2295a:	46c0      	nop			; (mov r8, r8)
   2295c:	000228c5 	.word	0x000228c5

00022960 <spi_is_syncing>:
{
   22960:	b580      	push	{r7, lr}
   22962:	b084      	sub	sp, #16
   22964:	af00      	add	r7, sp, #0
   22966:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   22968:	687b      	ldr	r3, [r7, #4]
   2296a:	681b      	ldr	r3, [r3, #0]
   2296c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   2296e:	68fb      	ldr	r3, [r7, #12]
   22970:	69db      	ldr	r3, [r3, #28]
   22972:	1e5a      	subs	r2, r3, #1
   22974:	4193      	sbcs	r3, r2
   22976:	b2db      	uxtb	r3, r3
}
   22978:	0018      	movs	r0, r3
   2297a:	46bd      	mov	sp, r7
   2297c:	b004      	add	sp, #16
   2297e:	bd80      	pop	{r7, pc}

00022980 <spi_get_config_defaults>:
{
   22980:	b580      	push	{r7, lr}
   22982:	b082      	sub	sp, #8
   22984:	af00      	add	r7, sp, #0
   22986:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   22988:	687b      	ldr	r3, [r7, #4]
   2298a:	2201      	movs	r2, #1
   2298c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   2298e:	687b      	ldr	r3, [r7, #4]
   22990:	2200      	movs	r2, #0
   22992:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   22994:	687b      	ldr	r3, [r7, #4]
   22996:	2200      	movs	r2, #0
   22998:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   2299a:	687b      	ldr	r3, [r7, #4]
   2299c:	22c0      	movs	r2, #192	; 0xc0
   2299e:	0392      	lsls	r2, r2, #14
   229a0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   229a2:	687b      	ldr	r3, [r7, #4]
   229a4:	2200      	movs	r2, #0
   229a6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   229a8:	687b      	ldr	r3, [r7, #4]
   229aa:	2200      	movs	r2, #0
   229ac:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   229ae:	687b      	ldr	r3, [r7, #4]
   229b0:	2201      	movs	r2, #1
   229b2:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   229b4:	687b      	ldr	r3, [r7, #4]
   229b6:	2201      	movs	r2, #1
   229b8:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   229ba:	687b      	ldr	r3, [r7, #4]
   229bc:	2200      	movs	r2, #0
   229be:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   229c0:	687b      	ldr	r3, [r7, #4]
   229c2:	2224      	movs	r2, #36	; 0x24
   229c4:	2100      	movs	r1, #0
   229c6:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   229c8:	687b      	ldr	r3, [r7, #4]
   229ca:	3318      	adds	r3, #24
   229cc:	220c      	movs	r2, #12
   229ce:	2100      	movs	r1, #0
   229d0:	0018      	movs	r0, r3
   229d2:	4b0a      	ldr	r3, [pc, #40]	; (229fc <spi_get_config_defaults+0x7c>)
   229d4:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   229d6:	687b      	ldr	r3, [r7, #4]
   229d8:	4a09      	ldr	r2, [pc, #36]	; (22a00 <spi_get_config_defaults+0x80>)
   229da:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   229dc:	687b      	ldr	r3, [r7, #4]
   229de:	2200      	movs	r2, #0
   229e0:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   229e2:	687b      	ldr	r3, [r7, #4]
   229e4:	2200      	movs	r2, #0
   229e6:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   229e8:	687b      	ldr	r3, [r7, #4]
   229ea:	2200      	movs	r2, #0
   229ec:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   229ee:	687b      	ldr	r3, [r7, #4]
   229f0:	2200      	movs	r2, #0
   229f2:	635a      	str	r2, [r3, #52]	; 0x34
};
   229f4:	46c0      	nop			; (mov r8, r8)
   229f6:	46bd      	mov	sp, r7
   229f8:	b002      	add	sp, #8
   229fa:	bd80      	pop	{r7, pc}
   229fc:	0003794b 	.word	0x0003794b
   22a00:	000186a0 	.word	0x000186a0

00022a04 <spi_slave_inst_get_config_defaults>:
{
   22a04:	b580      	push	{r7, lr}
   22a06:	b082      	sub	sp, #8
   22a08:	af00      	add	r7, sp, #0
   22a0a:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   22a0c:	687b      	ldr	r3, [r7, #4]
   22a0e:	220a      	movs	r2, #10
   22a10:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   22a12:	687b      	ldr	r3, [r7, #4]
   22a14:	2200      	movs	r2, #0
   22a16:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   22a18:	687b      	ldr	r3, [r7, #4]
   22a1a:	2200      	movs	r2, #0
   22a1c:	709a      	strb	r2, [r3, #2]
}
   22a1e:	46c0      	nop			; (mov r8, r8)
   22a20:	46bd      	mov	sp, r7
   22a22:	b002      	add	sp, #8
   22a24:	bd80      	pop	{r7, pc}
	...

00022a28 <spi_attach_slave>:
{
   22a28:	b580      	push	{r7, lr}
   22a2a:	b084      	sub	sp, #16
   22a2c:	af00      	add	r7, sp, #0
   22a2e:	6078      	str	r0, [r7, #4]
   22a30:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   22a32:	683b      	ldr	r3, [r7, #0]
   22a34:	781a      	ldrb	r2, [r3, #0]
   22a36:	687b      	ldr	r3, [r7, #4]
   22a38:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   22a3a:	683b      	ldr	r3, [r7, #0]
   22a3c:	785a      	ldrb	r2, [r3, #1]
   22a3e:	687b      	ldr	r3, [r7, #4]
   22a40:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   22a42:	683b      	ldr	r3, [r7, #0]
   22a44:	789a      	ldrb	r2, [r3, #2]
   22a46:	687b      	ldr	r3, [r7, #4]
   22a48:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   22a4a:	230c      	movs	r3, #12
   22a4c:	18fb      	adds	r3, r7, r3
   22a4e:	0018      	movs	r0, r3
   22a50:	4b0b      	ldr	r3, [pc, #44]	; (22a80 <spi_attach_slave+0x58>)
   22a52:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   22a54:	230c      	movs	r3, #12
   22a56:	18fb      	adds	r3, r7, r3
   22a58:	2201      	movs	r2, #1
   22a5a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   22a5c:	687b      	ldr	r3, [r7, #4]
   22a5e:	781b      	ldrb	r3, [r3, #0]
   22a60:	220c      	movs	r2, #12
   22a62:	18ba      	adds	r2, r7, r2
   22a64:	0011      	movs	r1, r2
   22a66:	0018      	movs	r0, r3
   22a68:	4b06      	ldr	r3, [pc, #24]	; (22a84 <spi_attach_slave+0x5c>)
   22a6a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   22a6c:	687b      	ldr	r3, [r7, #4]
   22a6e:	781b      	ldrb	r3, [r3, #0]
   22a70:	2101      	movs	r1, #1
   22a72:	0018      	movs	r0, r3
   22a74:	4b04      	ldr	r3, [pc, #16]	; (22a88 <spi_attach_slave+0x60>)
   22a76:	4798      	blx	r3
}
   22a78:	46c0      	nop			; (mov r8, r8)
   22a7a:	46bd      	mov	sp, r7
   22a7c:	b004      	add	sp, #16
   22a7e:	bd80      	pop	{r7, pc}
   22a80:	000228e9 	.word	0x000228e9
   22a84:	00028db5 	.word	0x00028db5
   22a88:	0002290d 	.word	0x0002290d

00022a8c <spi_enable>:
{
   22a8c:	b580      	push	{r7, lr}
   22a8e:	b084      	sub	sp, #16
   22a90:	af00      	add	r7, sp, #0
   22a92:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   22a94:	687b      	ldr	r3, [r7, #4]
   22a96:	681b      	ldr	r3, [r3, #0]
   22a98:	60fb      	str	r3, [r7, #12]
	while (spi_is_syncing(module)) {
   22a9a:	46c0      	nop			; (mov r8, r8)
   22a9c:	687b      	ldr	r3, [r7, #4]
   22a9e:	0018      	movs	r0, r3
   22aa0:	4b06      	ldr	r3, [pc, #24]	; (22abc <spi_enable+0x30>)
   22aa2:	4798      	blx	r3
   22aa4:	1e03      	subs	r3, r0, #0
   22aa6:	d1f9      	bne.n	22a9c <spi_enable+0x10>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   22aa8:	68fb      	ldr	r3, [r7, #12]
   22aaa:	681b      	ldr	r3, [r3, #0]
   22aac:	2202      	movs	r2, #2
   22aae:	431a      	orrs	r2, r3
   22ab0:	68fb      	ldr	r3, [r7, #12]
   22ab2:	601a      	str	r2, [r3, #0]
}
   22ab4:	46c0      	nop			; (mov r8, r8)
   22ab6:	46bd      	mov	sp, r7
   22ab8:	b004      	add	sp, #16
   22aba:	bd80      	pop	{r7, pc}
   22abc:	00022961 	.word	0x00022961

00022ac0 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   22ac0:	b580      	push	{r7, lr}
   22ac2:	b084      	sub	sp, #16
   22ac4:	af00      	add	r7, sp, #0
   22ac6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   22ac8:	687b      	ldr	r3, [r7, #4]
   22aca:	681b      	ldr	r3, [r3, #0]
   22acc:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
   22ace:	46c0      	nop			; (mov r8, r8)
   22ad0:	687b      	ldr	r3, [r7, #4]
   22ad2:	0018      	movs	r0, r3
   22ad4:	4b0a      	ldr	r3, [pc, #40]	; (22b00 <spi_disable+0x40>)
   22ad6:	4798      	blx	r3
   22ad8:	1e03      	subs	r3, r0, #0
   22ada:	d1f9      	bne.n	22ad0 <spi_disable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   22adc:	68fb      	ldr	r3, [r7, #12]
   22ade:	228f      	movs	r2, #143	; 0x8f
   22ae0:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   22ae2:	68fb      	ldr	r3, [r7, #12]
   22ae4:	228f      	movs	r2, #143	; 0x8f
   22ae6:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   22ae8:	68fb      	ldr	r3, [r7, #12]
   22aea:	681b      	ldr	r3, [r3, #0]
   22aec:	2202      	movs	r2, #2
   22aee:	4393      	bics	r3, r2
   22af0:	001a      	movs	r2, r3
   22af2:	68fb      	ldr	r3, [r7, #12]
   22af4:	601a      	str	r2, [r3, #0]
}
   22af6:	46c0      	nop			; (mov r8, r8)
   22af8:	46bd      	mov	sp, r7
   22afa:	b004      	add	sp, #16
   22afc:	bd80      	pop	{r7, pc}
   22afe:	46c0      	nop			; (mov r8, r8)
   22b00:	00022961 	.word	0x00022961

00022b04 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   22b04:	b580      	push	{r7, lr}
   22b06:	b084      	sub	sp, #16
   22b08:	af00      	add	r7, sp, #0
   22b0a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   22b0c:	687b      	ldr	r3, [r7, #4]
   22b0e:	681b      	ldr	r3, [r3, #0]
   22b10:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   22b12:	68fb      	ldr	r3, [r7, #12]
   22b14:	7e1b      	ldrb	r3, [r3, #24]
   22b16:	b2db      	uxtb	r3, r3
   22b18:	001a      	movs	r2, r3
   22b1a:	2302      	movs	r3, #2
   22b1c:	4013      	ands	r3, r2
   22b1e:	1e5a      	subs	r2, r3, #1
   22b20:	4193      	sbcs	r3, r2
   22b22:	b2db      	uxtb	r3, r3
}
   22b24:	0018      	movs	r0, r3
   22b26:	46bd      	mov	sp, r7
   22b28:	b004      	add	sp, #16
   22b2a:	bd80      	pop	{r7, pc}

00022b2c <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   22b2c:	b580      	push	{r7, lr}
   22b2e:	b084      	sub	sp, #16
   22b30:	af00      	add	r7, sp, #0
   22b32:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   22b34:	687b      	ldr	r3, [r7, #4]
   22b36:	681b      	ldr	r3, [r3, #0]
   22b38:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   22b3a:	68fb      	ldr	r3, [r7, #12]
   22b3c:	7e1b      	ldrb	r3, [r3, #24]
   22b3e:	b2db      	uxtb	r3, r3
   22b40:	001a      	movs	r2, r3
   22b42:	2301      	movs	r3, #1
   22b44:	4013      	ands	r3, r2
   22b46:	1e5a      	subs	r2, r3, #1
   22b48:	4193      	sbcs	r3, r2
   22b4a:	b2db      	uxtb	r3, r3
}
   22b4c:	0018      	movs	r0, r3
   22b4e:	46bd      	mov	sp, r7
   22b50:	b004      	add	sp, #16
   22b52:	bd80      	pop	{r7, pc}

00022b54 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   22b54:	b580      	push	{r7, lr}
   22b56:	b084      	sub	sp, #16
   22b58:	af00      	add	r7, sp, #0
   22b5a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   22b5c:	687b      	ldr	r3, [r7, #4]
   22b5e:	681b      	ldr	r3, [r3, #0]
   22b60:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   22b62:	68fb      	ldr	r3, [r7, #12]
   22b64:	7e1b      	ldrb	r3, [r3, #24]
   22b66:	b2db      	uxtb	r3, r3
   22b68:	001a      	movs	r2, r3
   22b6a:	2304      	movs	r3, #4
   22b6c:	4013      	ands	r3, r2
   22b6e:	1e5a      	subs	r2, r3, #1
   22b70:	4193      	sbcs	r3, r2
   22b72:	b2db      	uxtb	r3, r3
}
   22b74:	0018      	movs	r0, r3
   22b76:	46bd      	mov	sp, r7
   22b78:	b004      	add	sp, #16
   22b7a:	bd80      	pop	{r7, pc}

00022b7c <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   22b7c:	b580      	push	{r7, lr}
   22b7e:	b084      	sub	sp, #16
   22b80:	af00      	add	r7, sp, #0
   22b82:	6078      	str	r0, [r7, #4]
   22b84:	000a      	movs	r2, r1
   22b86:	1cbb      	adds	r3, r7, #2
   22b88:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   22b8a:	687b      	ldr	r3, [r7, #4]
   22b8c:	681b      	ldr	r3, [r3, #0]
   22b8e:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   22b90:	687b      	ldr	r3, [r7, #4]
   22b92:	0018      	movs	r0, r3
   22b94:	4b0a      	ldr	r3, [pc, #40]	; (22bc0 <spi_write+0x44>)
   22b96:	4798      	blx	r3
   22b98:	0003      	movs	r3, r0
   22b9a:	001a      	movs	r2, r3
   22b9c:	2301      	movs	r3, #1
   22b9e:	4053      	eors	r3, r2
   22ba0:	b2db      	uxtb	r3, r3
   22ba2:	2b00      	cmp	r3, #0
   22ba4:	d001      	beq.n	22baa <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   22ba6:	2305      	movs	r3, #5
   22ba8:	e006      	b.n	22bb8 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   22baa:	1cbb      	adds	r3, r7, #2
   22bac:	881b      	ldrh	r3, [r3, #0]
   22bae:	05db      	lsls	r3, r3, #23
   22bb0:	0dda      	lsrs	r2, r3, #23
   22bb2:	68fb      	ldr	r3, [r7, #12]
   22bb4:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   22bb6:	2300      	movs	r3, #0
}
   22bb8:	0018      	movs	r0, r3
   22bba:	46bd      	mov	sp, r7
   22bbc:	b004      	add	sp, #16
   22bbe:	bd80      	pop	{r7, pc}
   22bc0:	00022b2d 	.word	0x00022b2d

00022bc4 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   22bc4:	b580      	push	{r7, lr}
   22bc6:	b084      	sub	sp, #16
   22bc8:	af00      	add	r7, sp, #0
   22bca:	6078      	str	r0, [r7, #4]
   22bcc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   22bce:	687b      	ldr	r3, [r7, #4]
   22bd0:	681b      	ldr	r3, [r3, #0]
   22bd2:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   22bd4:	687b      	ldr	r3, [r7, #4]
   22bd6:	0018      	movs	r0, r3
   22bd8:	4b1b      	ldr	r3, [pc, #108]	; (22c48 <spi_read+0x84>)
   22bda:	4798      	blx	r3
   22bdc:	0003      	movs	r3, r0
   22bde:	001a      	movs	r2, r3
   22be0:	2301      	movs	r3, #1
   22be2:	4053      	eors	r3, r2
   22be4:	b2db      	uxtb	r3, r3
   22be6:	2b00      	cmp	r3, #0
   22be8:	d001      	beq.n	22bee <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   22bea:	2310      	movs	r3, #16
   22bec:	e027      	b.n	22c3e <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   22bee:	230f      	movs	r3, #15
   22bf0:	18fb      	adds	r3, r7, r3
   22bf2:	2200      	movs	r2, #0
   22bf4:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   22bf6:	68bb      	ldr	r3, [r7, #8]
   22bf8:	8b5b      	ldrh	r3, [r3, #26]
   22bfa:	b29b      	uxth	r3, r3
   22bfc:	001a      	movs	r2, r3
   22bfe:	2304      	movs	r3, #4
   22c00:	4013      	ands	r3, r2
   22c02:	d006      	beq.n	22c12 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   22c04:	230f      	movs	r3, #15
   22c06:	18fb      	adds	r3, r7, r3
   22c08:	221e      	movs	r2, #30
   22c0a:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   22c0c:	68bb      	ldr	r3, [r7, #8]
   22c0e:	2204      	movs	r2, #4
   22c10:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   22c12:	687b      	ldr	r3, [r7, #4]
   22c14:	799b      	ldrb	r3, [r3, #6]
   22c16:	2b01      	cmp	r3, #1
   22c18:	d108      	bne.n	22c2c <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   22c1a:	68bb      	ldr	r3, [r7, #8]
   22c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22c1e:	b29b      	uxth	r3, r3
   22c20:	05db      	lsls	r3, r3, #23
   22c22:	0ddb      	lsrs	r3, r3, #23
   22c24:	b29a      	uxth	r2, r3
   22c26:	683b      	ldr	r3, [r7, #0]
   22c28:	801a      	strh	r2, [r3, #0]
   22c2a:	e005      	b.n	22c38 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   22c2c:	68bb      	ldr	r3, [r7, #8]
   22c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22c30:	b2db      	uxtb	r3, r3
   22c32:	b29a      	uxth	r2, r3
   22c34:	683b      	ldr	r3, [r7, #0]
   22c36:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   22c38:	230f      	movs	r3, #15
   22c3a:	18fb      	adds	r3, r7, r3
   22c3c:	781b      	ldrb	r3, [r3, #0]
}
   22c3e:	0018      	movs	r0, r3
   22c40:	46bd      	mov	sp, r7
   22c42:	b004      	add	sp, #16
   22c44:	bd80      	pop	{r7, pc}
   22c46:	46c0      	nop			; (mov r8, r8)
   22c48:	00022b55 	.word	0x00022b55

00022c4c <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   22c4c:	b580      	push	{r7, lr}
   22c4e:	b086      	sub	sp, #24
   22c50:	af00      	add	r7, sp, #0
   22c52:	60f8      	str	r0, [r7, #12]
   22c54:	60b9      	str	r1, [r7, #8]
   22c56:	1dbb      	adds	r3, r7, #6
   22c58:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   22c5a:	2313      	movs	r3, #19
   22c5c:	18fb      	adds	r3, r7, r3
   22c5e:	22ff      	movs	r2, #255	; 0xff
   22c60:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   22c62:	2317      	movs	r3, #23
   22c64:	18fb      	adds	r3, r7, r3
   22c66:	2200      	movs	r2, #0
   22c68:	701a      	strb	r2, [r3, #0]
   22c6a:	2316      	movs	r3, #22
   22c6c:	18fb      	adds	r3, r7, r3
   22c6e:	2200      	movs	r2, #0
   22c70:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   22c72:	2314      	movs	r3, #20
   22c74:	18fb      	adds	r3, r7, r3
   22c76:	2200      	movs	r2, #0
   22c78:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   22c7a:	2310      	movs	r3, #16
   22c7c:	18fb      	adds	r3, r7, r3
   22c7e:	2200      	movs	r2, #0
   22c80:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   22c82:	68bb      	ldr	r3, [r7, #8]
   22c84:	2b00      	cmp	r3, #0
   22c86:	d102      	bne.n	22c8e <spi_rw+0x42>
   22c88:	68fb      	ldr	r3, [r7, #12]
   22c8a:	2b00      	cmp	r3, #0
   22c8c:	d003      	beq.n	22c96 <spi_rw+0x4a>
   22c8e:	1dbb      	adds	r3, r7, #6
   22c90:	881b      	ldrh	r3, [r3, #0]
   22c92:	2b00      	cmp	r3, #0
   22c94:	d102      	bne.n	22c9c <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   22c96:	230f      	movs	r3, #15
   22c98:	425b      	negs	r3, r3
   22c9a:	e07e      	b.n	22d9a <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   22c9c:	68fb      	ldr	r3, [r7, #12]
   22c9e:	2b00      	cmp	r3, #0
   22ca0:	d106      	bne.n	22cb0 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   22ca2:	2313      	movs	r3, #19
   22ca4:	18fb      	adds	r3, r7, r3
   22ca6:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   22ca8:	2317      	movs	r3, #23
   22caa:	18fb      	adds	r3, r7, r3
   22cac:	2201      	movs	r2, #1
   22cae:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   22cb0:	68bb      	ldr	r3, [r7, #8]
   22cb2:	2b00      	cmp	r3, #0
   22cb4:	d106      	bne.n	22cc4 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   22cb6:	2313      	movs	r3, #19
   22cb8:	18fb      	adds	r3, r7, r3
   22cba:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   22cbc:	2316      	movs	r3, #22
   22cbe:	18fb      	adds	r3, r7, r3
   22cc0:	2201      	movs	r2, #1
   22cc2:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   22cc4:	4937      	ldr	r1, [pc, #220]	; (22da4 <spi_rw+0x158>)
   22cc6:	4b38      	ldr	r3, [pc, #224]	; (22da8 <spi_rw+0x15c>)
   22cc8:	2201      	movs	r2, #1
   22cca:	0018      	movs	r0, r3
   22ccc:	4b37      	ldr	r3, [pc, #220]	; (22dac <spi_rw+0x160>)
   22cce:	4798      	blx	r3

	while (u16Sz) {
   22cd0:	e04c      	b.n	22d6c <spi_rw+0x120>
		txd_data = *pu8Mosi;
   22cd2:	68fb      	ldr	r3, [r7, #12]
   22cd4:	781a      	ldrb	r2, [r3, #0]
   22cd6:	2314      	movs	r3, #20
   22cd8:	18fb      	adds	r3, r7, r3
   22cda:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   22cdc:	46c0      	nop			; (mov r8, r8)
   22cde:	4b32      	ldr	r3, [pc, #200]	; (22da8 <spi_rw+0x15c>)
   22ce0:	0018      	movs	r0, r3
   22ce2:	4b33      	ldr	r3, [pc, #204]	; (22db0 <spi_rw+0x164>)
   22ce4:	4798      	blx	r3
   22ce6:	0003      	movs	r3, r0
   22ce8:	001a      	movs	r2, r3
   22cea:	2301      	movs	r3, #1
   22cec:	4053      	eors	r3, r2
   22cee:	b2db      	uxtb	r3, r3
   22cf0:	2b00      	cmp	r3, #0
   22cf2:	d1f4      	bne.n	22cde <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   22cf4:	46c0      	nop			; (mov r8, r8)
   22cf6:	2314      	movs	r3, #20
   22cf8:	18fb      	adds	r3, r7, r3
   22cfa:	881a      	ldrh	r2, [r3, #0]
   22cfc:	4b2a      	ldr	r3, [pc, #168]	; (22da8 <spi_rw+0x15c>)
   22cfe:	0011      	movs	r1, r2
   22d00:	0018      	movs	r0, r3
   22d02:	4b2c      	ldr	r3, [pc, #176]	; (22db4 <spi_rw+0x168>)
   22d04:	4798      	blx	r3
   22d06:	1e03      	subs	r3, r0, #0
   22d08:	d1f5      	bne.n	22cf6 <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   22d0a:	46c0      	nop			; (mov r8, r8)
   22d0c:	4b26      	ldr	r3, [pc, #152]	; (22da8 <spi_rw+0x15c>)
   22d0e:	0018      	movs	r0, r3
   22d10:	4b29      	ldr	r3, [pc, #164]	; (22db8 <spi_rw+0x16c>)
   22d12:	4798      	blx	r3
   22d14:	0003      	movs	r3, r0
   22d16:	001a      	movs	r2, r3
   22d18:	2301      	movs	r3, #1
   22d1a:	4053      	eors	r3, r2
   22d1c:	b2db      	uxtb	r3, r3
   22d1e:	2b00      	cmp	r3, #0
   22d20:	d1f4      	bne.n	22d0c <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   22d22:	46c0      	nop			; (mov r8, r8)
   22d24:	2310      	movs	r3, #16
   22d26:	18fa      	adds	r2, r7, r3
   22d28:	4b1f      	ldr	r3, [pc, #124]	; (22da8 <spi_rw+0x15c>)
   22d2a:	0011      	movs	r1, r2
   22d2c:	0018      	movs	r0, r3
   22d2e:	4b23      	ldr	r3, [pc, #140]	; (22dbc <spi_rw+0x170>)
   22d30:	4798      	blx	r3
   22d32:	1e03      	subs	r3, r0, #0
   22d34:	d1f6      	bne.n	22d24 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   22d36:	2310      	movs	r3, #16
   22d38:	18fb      	adds	r3, r7, r3
   22d3a:	881b      	ldrh	r3, [r3, #0]
   22d3c:	b2da      	uxtb	r2, r3
   22d3e:	68bb      	ldr	r3, [r7, #8]
   22d40:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   22d42:	1dbb      	adds	r3, r7, #6
   22d44:	881a      	ldrh	r2, [r3, #0]
   22d46:	1dbb      	adds	r3, r7, #6
   22d48:	3a01      	subs	r2, #1
   22d4a:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   22d4c:	2316      	movs	r3, #22
   22d4e:	18fb      	adds	r3, r7, r3
   22d50:	781b      	ldrb	r3, [r3, #0]
   22d52:	2b00      	cmp	r3, #0
   22d54:	d102      	bne.n	22d5c <spi_rw+0x110>
			pu8Miso++;
   22d56:	68bb      	ldr	r3, [r7, #8]
   22d58:	3301      	adds	r3, #1
   22d5a:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   22d5c:	2317      	movs	r3, #23
   22d5e:	18fb      	adds	r3, r7, r3
   22d60:	781b      	ldrb	r3, [r3, #0]
   22d62:	2b00      	cmp	r3, #0
   22d64:	d102      	bne.n	22d6c <spi_rw+0x120>
			pu8Mosi++;
   22d66:	68fb      	ldr	r3, [r7, #12]
   22d68:	3301      	adds	r3, #1
   22d6a:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   22d6c:	1dbb      	adds	r3, r7, #6
   22d6e:	881b      	ldrh	r3, [r3, #0]
   22d70:	2b00      	cmp	r3, #0
   22d72:	d1ae      	bne.n	22cd2 <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   22d74:	46c0      	nop			; (mov r8, r8)
   22d76:	4b0c      	ldr	r3, [pc, #48]	; (22da8 <spi_rw+0x15c>)
   22d78:	0018      	movs	r0, r3
   22d7a:	4b11      	ldr	r3, [pc, #68]	; (22dc0 <spi_rw+0x174>)
   22d7c:	4798      	blx	r3
   22d7e:	0003      	movs	r3, r0
   22d80:	001a      	movs	r2, r3
   22d82:	2301      	movs	r3, #1
   22d84:	4053      	eors	r3, r2
   22d86:	b2db      	uxtb	r3, r3
   22d88:	2b00      	cmp	r3, #0
   22d8a:	d1f4      	bne.n	22d76 <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   22d8c:	4905      	ldr	r1, [pc, #20]	; (22da4 <spi_rw+0x158>)
   22d8e:	4b06      	ldr	r3, [pc, #24]	; (22da8 <spi_rw+0x15c>)
   22d90:	2200      	movs	r2, #0
   22d92:	0018      	movs	r0, r3
   22d94:	4b05      	ldr	r3, [pc, #20]	; (22dac <spi_rw+0x160>)
   22d96:	4798      	blx	r3

	return M2M_SUCCESS;
   22d98:	2300      	movs	r3, #0
}
   22d9a:	0018      	movs	r0, r3
   22d9c:	46bd      	mov	sp, r7
   22d9e:	b006      	add	sp, #24
   22da0:	bd80      	pop	{r7, pc}
   22da2:	46c0      	nop			; (mov r8, r8)
   22da4:	20005940 	.word	0x20005940
   22da8:	20005944 	.word	0x20005944
   22dac:	0002a765 	.word	0x0002a765
   22db0:	00022b2d 	.word	0x00022b2d
   22db4:	00022b7d 	.word	0x00022b7d
   22db8:	00022b55 	.word	0x00022b55
   22dbc:	00022bc5 	.word	0x00022bc5
   22dc0:	00022b05 	.word	0x00022b05

00022dc4 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   22dc4:	b580      	push	{r7, lr}
   22dc6:	b092      	sub	sp, #72	; 0x48
   22dc8:	af00      	add	r7, sp, #0
   22dca:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   22dcc:	2347      	movs	r3, #71	; 0x47
   22dce:	18fb      	adds	r3, r7, r3
   22dd0:	2200      	movs	r2, #0
   22dd2:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   22dd4:	2308      	movs	r3, #8
   22dd6:	18fb      	adds	r3, r7, r3
   22dd8:	0018      	movs	r0, r3
   22dda:	4b26      	ldr	r3, [pc, #152]	; (22e74 <nm_bus_init+0xb0>)
   22ddc:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   22dde:	2308      	movs	r3, #8
   22de0:	18fb      	adds	r3, r7, r3
   22de2:	220e      	movs	r2, #14
   22de4:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   22de6:	2308      	movs	r3, #8
   22de8:	18fa      	adds	r2, r7, r3
   22dea:	4b23      	ldr	r3, [pc, #140]	; (22e78 <nm_bus_init+0xb4>)
   22dec:	0011      	movs	r1, r2
   22dee:	0018      	movs	r0, r3
   22df0:	4b22      	ldr	r3, [pc, #136]	; (22e7c <nm_bus_init+0xb8>)
   22df2:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   22df4:	230c      	movs	r3, #12
   22df6:	18fb      	adds	r3, r7, r3
   22df8:	0018      	movs	r0, r3
   22dfa:	4b21      	ldr	r3, [pc, #132]	; (22e80 <nm_bus_init+0xbc>)
   22dfc:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   22dfe:	230c      	movs	r3, #12
   22e00:	18fb      	adds	r3, r7, r3
   22e02:	22c0      	movs	r2, #192	; 0xc0
   22e04:	0392      	lsls	r2, r2, #14
   22e06:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   22e08:	230c      	movs	r3, #12
   22e0a:	18fb      	adds	r3, r7, r3
   22e0c:	4a1d      	ldr	r2, [pc, #116]	; (22e84 <nm_bus_init+0xc0>)
   22e0e:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   22e10:	230c      	movs	r3, #12
   22e12:	18fb      	adds	r3, r7, r3
   22e14:	4a1c      	ldr	r2, [pc, #112]	; (22e88 <nm_bus_init+0xc4>)
   22e16:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   22e18:	230c      	movs	r3, #12
   22e1a:	18fb      	adds	r3, r7, r3
   22e1c:	2201      	movs	r2, #1
   22e1e:	4252      	negs	r2, r2
   22e20:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   22e22:	230c      	movs	r3, #12
   22e24:	18fb      	adds	r3, r7, r3
   22e26:	4a19      	ldr	r2, [pc, #100]	; (22e8c <nm_bus_init+0xc8>)
   22e28:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   22e2a:	230c      	movs	r3, #12
   22e2c:	18fb      	adds	r3, r7, r3
   22e2e:	2200      	movs	r2, #0
   22e30:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   22e32:	230c      	movs	r3, #12
   22e34:	18fb      	adds	r3, r7, r3
   22e36:	4a16      	ldr	r2, [pc, #88]	; (22e90 <nm_bus_init+0xcc>)
   22e38:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   22e3a:	230c      	movs	r3, #12
   22e3c:	18fa      	adds	r2, r7, r3
   22e3e:	4915      	ldr	r1, [pc, #84]	; (22e94 <nm_bus_init+0xd0>)
   22e40:	4b15      	ldr	r3, [pc, #84]	; (22e98 <nm_bus_init+0xd4>)
   22e42:	0018      	movs	r0, r3
   22e44:	4b15      	ldr	r3, [pc, #84]	; (22e9c <nm_bus_init+0xd8>)
   22e46:	4798      	blx	r3
   22e48:	1e03      	subs	r3, r0, #0
   22e4a:	d002      	beq.n	22e52 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   22e4c:	2306      	movs	r3, #6
   22e4e:	425b      	negs	r3, r3
   22e50:	e00c      	b.n	22e6c <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   22e52:	4b11      	ldr	r3, [pc, #68]	; (22e98 <nm_bus_init+0xd4>)
   22e54:	0018      	movs	r0, r3
   22e56:	4b12      	ldr	r3, [pc, #72]	; (22ea0 <nm_bus_init+0xdc>)
   22e58:	4798      	blx	r3

	nm_bsp_reset();
   22e5a:	4b12      	ldr	r3, [pc, #72]	; (22ea4 <nm_bus_init+0xe0>)
   22e5c:	4798      	blx	r3
	nm_bsp_sleep(1);
   22e5e:	2001      	movs	r0, #1
   22e60:	4b11      	ldr	r3, [pc, #68]	; (22ea8 <nm_bus_init+0xe4>)
   22e62:	4798      	blx	r3
#endif
	return result;
   22e64:	2347      	movs	r3, #71	; 0x47
   22e66:	18fb      	adds	r3, r7, r3
   22e68:	781b      	ldrb	r3, [r3, #0]
   22e6a:	b25b      	sxtb	r3, r3
}
   22e6c:	0018      	movs	r0, r3
   22e6e:	46bd      	mov	sp, r7
   22e70:	b012      	add	sp, #72	; 0x48
   22e72:	bd80      	pop	{r7, pc}
   22e74:	00022a05 	.word	0x00022a05
   22e78:	20005940 	.word	0x20005940
   22e7c:	00022a29 	.word	0x00022a29
   22e80:	00022981 	.word	0x00022981
   22e84:	000c0002 	.word	0x000c0002
   22e88:	000d0002 	.word	0x000d0002
   22e8c:	000f0002 	.word	0x000f0002
   22e90:	00124f80 	.word	0x00124f80
   22e94:	42001000 	.word	0x42001000
   22e98:	20005944 	.word	0x20005944
   22e9c:	0002a4b1 	.word	0x0002a4b1
   22ea0:	00022a8d 	.word	0x00022a8d
   22ea4:	00022759 	.word	0x00022759
   22ea8:	00022799 	.word	0x00022799

00022eac <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   22eac:	b590      	push	{r4, r7, lr}
   22eae:	b085      	sub	sp, #20
   22eb0:	af00      	add	r7, sp, #0
   22eb2:	0002      	movs	r2, r0
   22eb4:	6039      	str	r1, [r7, #0]
   22eb6:	1dfb      	adds	r3, r7, #7
   22eb8:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   22eba:	230f      	movs	r3, #15
   22ebc:	18fb      	adds	r3, r7, r3
   22ebe:	2200      	movs	r2, #0
   22ec0:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   22ec2:	1dfb      	adds	r3, r7, #7
   22ec4:	781b      	ldrb	r3, [r3, #0]
   22ec6:	2b03      	cmp	r3, #3
   22ec8:	d10f      	bne.n	22eea <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   22eca:	683b      	ldr	r3, [r7, #0]
   22ecc:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   22ece:	68bb      	ldr	r3, [r7, #8]
   22ed0:	6818      	ldr	r0, [r3, #0]
   22ed2:	68bb      	ldr	r3, [r7, #8]
   22ed4:	6859      	ldr	r1, [r3, #4]
   22ed6:	68bb      	ldr	r3, [r7, #8]
   22ed8:	891b      	ldrh	r3, [r3, #8]
   22eda:	220f      	movs	r2, #15
   22edc:	18bc      	adds	r4, r7, r2
   22ede:	001a      	movs	r2, r3
   22ee0:	4b10      	ldr	r3, [pc, #64]	; (22f24 <nm_bus_ioctl+0x78>)
   22ee2:	4798      	blx	r3
   22ee4:	0003      	movs	r3, r0
   22ee6:	7023      	strb	r3, [r4, #0]
		}
		break;
   22ee8:	e013      	b.n	22f12 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   22eea:	230f      	movs	r3, #15
   22eec:	18fb      	adds	r3, r7, r3
   22eee:	22ff      	movs	r2, #255	; 0xff
   22ef0:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   22ef2:	2383      	movs	r3, #131	; 0x83
   22ef4:	005a      	lsls	r2, r3, #1
   22ef6:	490c      	ldr	r1, [pc, #48]	; (22f28 <nm_bus_ioctl+0x7c>)
   22ef8:	4b0c      	ldr	r3, [pc, #48]	; (22f2c <nm_bus_ioctl+0x80>)
   22efa:	0018      	movs	r0, r3
   22efc:	4b0c      	ldr	r3, [pc, #48]	; (22f30 <nm_bus_ioctl+0x84>)
   22efe:	4798      	blx	r3
   22f00:	4b0c      	ldr	r3, [pc, #48]	; (22f34 <nm_bus_ioctl+0x88>)
   22f02:	0018      	movs	r0, r3
   22f04:	4b0a      	ldr	r3, [pc, #40]	; (22f30 <nm_bus_ioctl+0x84>)
   22f06:	4798      	blx	r3
   22f08:	4b0b      	ldr	r3, [pc, #44]	; (22f38 <nm_bus_ioctl+0x8c>)
   22f0a:	0018      	movs	r0, r3
   22f0c:	4b08      	ldr	r3, [pc, #32]	; (22f30 <nm_bus_ioctl+0x84>)
   22f0e:	4798      	blx	r3
			break;
   22f10:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   22f12:	230f      	movs	r3, #15
   22f14:	18fb      	adds	r3, r7, r3
   22f16:	781b      	ldrb	r3, [r3, #0]
   22f18:	b25b      	sxtb	r3, r3
}
   22f1a:	0018      	movs	r0, r3
   22f1c:	46bd      	mov	sp, r7
   22f1e:	b005      	add	sp, #20
   22f20:	bd90      	pop	{r4, r7, pc}
   22f22:	46c0      	nop			; (mov r8, r8)
   22f24:	00022c4d 	.word	0x00022c4d
   22f28:	0003b62c 	.word	0x0003b62c
   22f2c:	0003b600 	.word	0x0003b600
   22f30:	00020329 	.word	0x00020329
   22f34:	0003b614 	.word	0x0003b614
   22f38:	0003b628 	.word	0x0003b628

00022f3c <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   22f3c:	b580      	push	{r7, lr}
   22f3e:	b082      	sub	sp, #8
   22f40:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   22f42:	1dfb      	adds	r3, r7, #7
   22f44:	2200      	movs	r2, #0
   22f46:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   22f48:	1d3b      	adds	r3, r7, #4
   22f4a:	0018      	movs	r0, r3
   22f4c:	4b13      	ldr	r3, [pc, #76]	; (22f9c <nm_bus_deinit+0x60>)
   22f4e:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   22f50:	1d3b      	adds	r3, r7, #4
   22f52:	2200      	movs	r2, #0
   22f54:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   22f56:	1d3b      	adds	r3, r7, #4
   22f58:	2200      	movs	r2, #0
   22f5a:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   22f5c:	4b10      	ldr	r3, [pc, #64]	; (22fa0 <nm_bus_deinit+0x64>)
   22f5e:	0018      	movs	r0, r3
   22f60:	4b10      	ldr	r3, [pc, #64]	; (22fa4 <nm_bus_deinit+0x68>)
   22f62:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   22f64:	1d3b      	adds	r3, r7, #4
   22f66:	0019      	movs	r1, r3
   22f68:	200c      	movs	r0, #12
   22f6a:	4b0f      	ldr	r3, [pc, #60]	; (22fa8 <nm_bus_deinit+0x6c>)
   22f6c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   22f6e:	1d3b      	adds	r3, r7, #4
   22f70:	0019      	movs	r1, r3
   22f72:	200f      	movs	r0, #15
   22f74:	4b0c      	ldr	r3, [pc, #48]	; (22fa8 <nm_bus_deinit+0x6c>)
   22f76:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   22f78:	1d3b      	adds	r3, r7, #4
   22f7a:	0019      	movs	r1, r3
   22f7c:	200d      	movs	r0, #13
   22f7e:	4b0a      	ldr	r3, [pc, #40]	; (22fa8 <nm_bus_deinit+0x6c>)
   22f80:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   22f82:	1d3b      	adds	r3, r7, #4
   22f84:	0019      	movs	r1, r3
   22f86:	200e      	movs	r0, #14
   22f88:	4b07      	ldr	r3, [pc, #28]	; (22fa8 <nm_bus_deinit+0x6c>)
   22f8a:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   22f8c:	1dfb      	adds	r3, r7, #7
   22f8e:	781b      	ldrb	r3, [r3, #0]
   22f90:	b25b      	sxtb	r3, r3
}
   22f92:	0018      	movs	r0, r3
   22f94:	46bd      	mov	sp, r7
   22f96:	b002      	add	sp, #8
   22f98:	bd80      	pop	{r7, pc}
   22f9a:	46c0      	nop			; (mov r8, r8)
   22f9c:	000228e9 	.word	0x000228e9
   22fa0:	20005944 	.word	0x20005944
   22fa4:	00022ac1 	.word	0x00022ac1
   22fa8:	00028db5 	.word	0x00028db5

00022fac <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   22fac:	b580      	push	{r7, lr}
   22fae:	b084      	sub	sp, #16
   22fb0:	af00      	add	r7, sp, #0
   22fb2:	60f8      	str	r0, [r7, #12]
   22fb4:	60b9      	str	r1, [r7, #8]
   22fb6:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   22fb8:	687b      	ldr	r3, [r7, #4]
   22fba:	2b00      	cmp	r3, #0
   22fbc:	d010      	beq.n	22fe0 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   22fbe:	68bb      	ldr	r3, [r7, #8]
   22fc0:	781a      	ldrb	r2, [r3, #0]
   22fc2:	68fb      	ldr	r3, [r7, #12]
   22fc4:	701a      	strb	r2, [r3, #0]
		pDst++;
   22fc6:	68fb      	ldr	r3, [r7, #12]
   22fc8:	3301      	adds	r3, #1
   22fca:	60fb      	str	r3, [r7, #12]
		pSrc++;
   22fcc:	68bb      	ldr	r3, [r7, #8]
   22fce:	3301      	adds	r3, #1
   22fd0:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   22fd2:	687b      	ldr	r3, [r7, #4]
   22fd4:	3b01      	subs	r3, #1
   22fd6:	607b      	str	r3, [r7, #4]
   22fd8:	687b      	ldr	r3, [r7, #4]
   22fda:	2b00      	cmp	r3, #0
   22fdc:	d1ef      	bne.n	22fbe <m2m_memcpy+0x12>
   22fde:	e000      	b.n	22fe2 <m2m_memcpy+0x36>
	if(sz == 0) return;
   22fe0:	46c0      	nop			; (mov r8, r8)
}
   22fe2:	46bd      	mov	sp, r7
   22fe4:	b004      	add	sp, #16
   22fe6:	bd80      	pop	{r7, pc}

00022fe8 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   22fe8:	b580      	push	{r7, lr}
   22fea:	b084      	sub	sp, #16
   22fec:	af00      	add	r7, sp, #0
   22fee:	60f8      	str	r0, [r7, #12]
   22ff0:	607a      	str	r2, [r7, #4]
   22ff2:	230b      	movs	r3, #11
   22ff4:	18fb      	adds	r3, r7, r3
   22ff6:	1c0a      	adds	r2, r1, #0
   22ff8:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   22ffa:	687b      	ldr	r3, [r7, #4]
   22ffc:	2b00      	cmp	r3, #0
   22ffe:	d00e      	beq.n	2301e <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   23000:	68fb      	ldr	r3, [r7, #12]
   23002:	220b      	movs	r2, #11
   23004:	18ba      	adds	r2, r7, r2
   23006:	7812      	ldrb	r2, [r2, #0]
   23008:	701a      	strb	r2, [r3, #0]
		pBuf++;
   2300a:	68fb      	ldr	r3, [r7, #12]
   2300c:	3301      	adds	r3, #1
   2300e:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   23010:	687b      	ldr	r3, [r7, #4]
   23012:	3b01      	subs	r3, #1
   23014:	607b      	str	r3, [r7, #4]
   23016:	687b      	ldr	r3, [r7, #4]
   23018:	2b00      	cmp	r3, #0
   2301a:	d1f1      	bne.n	23000 <m2m_memset+0x18>
   2301c:	e000      	b.n	23020 <m2m_memset+0x38>
	if(sz == 0) return;
   2301e:	46c0      	nop			; (mov r8, r8)
}
   23020:	46bd      	mov	sp, r7
   23022:	b004      	add	sp, #16
   23024:	bd80      	pop	{r7, pc}

00023026 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   23026:	b580      	push	{r7, lr}
   23028:	b084      	sub	sp, #16
   2302a:	af00      	add	r7, sp, #0
   2302c:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   2302e:	230e      	movs	r3, #14
   23030:	18fb      	adds	r3, r7, r3
   23032:	2200      	movs	r2, #0
   23034:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   23036:	e009      	b.n	2304c <m2m_strlen+0x26>
	{
		u16StrLen ++;
   23038:	230e      	movs	r3, #14
   2303a:	18fb      	adds	r3, r7, r3
   2303c:	881a      	ldrh	r2, [r3, #0]
   2303e:	230e      	movs	r3, #14
   23040:	18fb      	adds	r3, r7, r3
   23042:	3201      	adds	r2, #1
   23044:	801a      	strh	r2, [r3, #0]
		pcStr++;
   23046:	687b      	ldr	r3, [r7, #4]
   23048:	3301      	adds	r3, #1
   2304a:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   2304c:	687b      	ldr	r3, [r7, #4]
   2304e:	781b      	ldrb	r3, [r3, #0]
   23050:	2b00      	cmp	r3, #0
   23052:	d1f1      	bne.n	23038 <m2m_strlen+0x12>
	}
	return u16StrLen;
   23054:	230e      	movs	r3, #14
   23056:	18fb      	adds	r3, r7, r3
   23058:	881b      	ldrh	r3, [r3, #0]
}
   2305a:	0018      	movs	r0, r3
   2305c:	46bd      	mov	sp, r7
   2305e:	b004      	add	sp, #16
   23060:	bd80      	pop	{r7, pc}
	...

00023064 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   23064:	b580      	push	{r7, lr}
   23066:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   23068:	4b04      	ldr	r3, [pc, #16]	; (2307c <isr+0x18>)
   2306a:	78db      	ldrb	r3, [r3, #3]
   2306c:	b2db      	uxtb	r3, r3
   2306e:	3301      	adds	r3, #1
   23070:	b2da      	uxtb	r2, r3
   23072:	4b02      	ldr	r3, [pc, #8]	; (2307c <isr+0x18>)
   23074:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   23076:	46c0      	nop			; (mov r8, r8)
   23078:	46bd      	mov	sp, r7
   2307a:	bd80      	pop	{r7, pc}
   2307c:	20005950 	.word	0x20005950

00023080 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   23080:	b590      	push	{r4, r7, lr}
   23082:	b083      	sub	sp, #12
   23084:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   23086:	1dfb      	adds	r3, r7, #7
   23088:	2200      	movs	r2, #0
   2308a:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   2308c:	4b14      	ldr	r3, [pc, #80]	; (230e0 <hif_set_rx_done+0x60>)
   2308e:	2200      	movs	r2, #0
   23090:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   23092:	2001      	movs	r0, #1
   23094:	4b13      	ldr	r3, [pc, #76]	; (230e4 <hif_set_rx_done+0x64>)
   23096:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   23098:	1dfc      	adds	r4, r7, #7
   2309a:	003b      	movs	r3, r7
   2309c:	4a12      	ldr	r2, [pc, #72]	; (230e8 <hif_set_rx_done+0x68>)
   2309e:	0019      	movs	r1, r3
   230a0:	0010      	movs	r0, r2
   230a2:	4b12      	ldr	r3, [pc, #72]	; (230ec <hif_set_rx_done+0x6c>)
   230a4:	4798      	blx	r3
   230a6:	0003      	movs	r3, r0
   230a8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   230aa:	1dfb      	adds	r3, r7, #7
   230ac:	781b      	ldrb	r3, [r3, #0]
   230ae:	b25b      	sxtb	r3, r3
   230b0:	2b00      	cmp	r3, #0
   230b2:	d10d      	bne.n	230d0 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   230b4:	683b      	ldr	r3, [r7, #0]
   230b6:	2202      	movs	r2, #2
   230b8:	4313      	orrs	r3, r2
   230ba:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   230bc:	683b      	ldr	r3, [r7, #0]
   230be:	1dfc      	adds	r4, r7, #7
   230c0:	4a09      	ldr	r2, [pc, #36]	; (230e8 <hif_set_rx_done+0x68>)
   230c2:	0019      	movs	r1, r3
   230c4:	0010      	movs	r0, r2
   230c6:	4b0a      	ldr	r3, [pc, #40]	; (230f0 <hif_set_rx_done+0x70>)
   230c8:	4798      	blx	r3
   230ca:	0003      	movs	r3, r0
   230cc:	7023      	strb	r3, [r4, #0]
   230ce:	e000      	b.n	230d2 <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   230d0:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   230d2:	1dfb      	adds	r3, r7, #7
   230d4:	781b      	ldrb	r3, [r3, #0]
   230d6:	b25b      	sxtb	r3, r3

}
   230d8:	0018      	movs	r0, r3
   230da:	46bd      	mov	sp, r7
   230dc:	b003      	add	sp, #12
   230de:	bd90      	pop	{r4, r7, pc}
   230e0:	20005950 	.word	0x20005950
   230e4:	0002282d 	.word	0x0002282d
   230e8:	00001070 	.word	0x00001070
   230ec:	00025079 	.word	0x00025079
   230f0:	0002509d 	.word	0x0002509d

000230f4 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   230f4:	b580      	push	{r7, lr}
   230f6:	b082      	sub	sp, #8
   230f8:	af00      	add	r7, sp, #0
   230fa:	603a      	str	r2, [r7, #0]
   230fc:	1dfb      	adds	r3, r7, #7
   230fe:	1c02      	adds	r2, r0, #0
   23100:	701a      	strb	r2, [r3, #0]
   23102:	1d3b      	adds	r3, r7, #4
   23104:	1c0a      	adds	r2, r1, #0
   23106:	801a      	strh	r2, [r3, #0]


}
   23108:	46c0      	nop			; (mov r8, r8)
   2310a:	46bd      	mov	sp, r7
   2310c:	b002      	add	sp, #8
   2310e:	bd80      	pop	{r7, pc}

00023110 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   23110:	b590      	push	{r4, r7, lr}
   23112:	b083      	sub	sp, #12
   23114:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   23116:	1dfb      	adds	r3, r7, #7
   23118:	2200      	movs	r2, #0
   2311a:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   2311c:	4b16      	ldr	r3, [pc, #88]	; (23178 <hif_chip_wake+0x68>)
   2311e:	789b      	ldrb	r3, [r3, #2]
   23120:	b2db      	uxtb	r3, r3
   23122:	2b00      	cmp	r3, #0
   23124:	d003      	beq.n	2312e <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   23126:	1dfb      	adds	r3, r7, #7
   23128:	781b      	ldrb	r3, [r3, #0]
   2312a:	b25b      	sxtb	r3, r3
   2312c:	e01f      	b.n	2316e <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   2312e:	4b12      	ldr	r3, [pc, #72]	; (23178 <hif_chip_wake+0x68>)
   23130:	785b      	ldrb	r3, [r3, #1]
   23132:	b2db      	uxtb	r3, r3
   23134:	2b00      	cmp	r3, #0
   23136:	d10e      	bne.n	23156 <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   23138:	4b0f      	ldr	r3, [pc, #60]	; (23178 <hif_chip_wake+0x68>)
   2313a:	781b      	ldrb	r3, [r3, #0]
   2313c:	b2db      	uxtb	r3, r3
   2313e:	2b00      	cmp	r3, #0
   23140:	d009      	beq.n	23156 <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   23142:	1dfc      	adds	r4, r7, #7
   23144:	4b0d      	ldr	r3, [pc, #52]	; (2317c <hif_chip_wake+0x6c>)
   23146:	4798      	blx	r3
   23148:	0003      	movs	r3, r0
   2314a:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   2314c:	1dfb      	adds	r3, r7, #7
   2314e:	781b      	ldrb	r3, [r3, #0]
   23150:	b25b      	sxtb	r3, r3
   23152:	2b00      	cmp	r3, #0
   23154:	d107      	bne.n	23166 <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   23156:	4b08      	ldr	r3, [pc, #32]	; (23178 <hif_chip_wake+0x68>)
   23158:	785b      	ldrb	r3, [r3, #1]
   2315a:	b2db      	uxtb	r3, r3
   2315c:	3301      	adds	r3, #1
   2315e:	b2da      	uxtb	r2, r3
   23160:	4b05      	ldr	r3, [pc, #20]	; (23178 <hif_chip_wake+0x68>)
   23162:	705a      	strb	r2, [r3, #1]
   23164:	e000      	b.n	23168 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   23166:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   23168:	1dfb      	adds	r3, r7, #7
   2316a:	781b      	ldrb	r3, [r3, #0]
   2316c:	b25b      	sxtb	r3, r3
}
   2316e:	0018      	movs	r0, r3
   23170:	46bd      	mov	sp, r7
   23172:	b003      	add	sp, #12
   23174:	bd90      	pop	{r4, r7, pc}
   23176:	46c0      	nop			; (mov r8, r8)
   23178:	20005950 	.word	0x20005950
   2317c:	00024b49 	.word	0x00024b49

00023180 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   23180:	b580      	push	{r7, lr}
   23182:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   23184:	4b07      	ldr	r3, [pc, #28]	; (231a4 <hif_chip_sleep_sc+0x24>)
   23186:	785b      	ldrb	r3, [r3, #1]
   23188:	b2db      	uxtb	r3, r3
   2318a:	2b00      	cmp	r3, #0
   2318c:	d006      	beq.n	2319c <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   2318e:	4b05      	ldr	r3, [pc, #20]	; (231a4 <hif_chip_sleep_sc+0x24>)
   23190:	785b      	ldrb	r3, [r3, #1]
   23192:	b2db      	uxtb	r3, r3
   23194:	3b01      	subs	r3, #1
   23196:	b2da      	uxtb	r2, r3
   23198:	4b02      	ldr	r3, [pc, #8]	; (231a4 <hif_chip_sleep_sc+0x24>)
   2319a:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   2319c:	2300      	movs	r3, #0
}
   2319e:	0018      	movs	r0, r3
   231a0:	46bd      	mov	sp, r7
   231a2:	bd80      	pop	{r7, pc}
   231a4:	20005950 	.word	0x20005950

000231a8 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   231a8:	b590      	push	{r4, r7, lr}
   231aa:	b083      	sub	sp, #12
   231ac:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   231ae:	1dfb      	adds	r3, r7, #7
   231b0:	2200      	movs	r2, #0
   231b2:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   231b4:	4b10      	ldr	r3, [pc, #64]	; (231f8 <hif_chip_sleep+0x50>)
   231b6:	785b      	ldrb	r3, [r3, #1]
   231b8:	b2db      	uxtb	r3, r3
   231ba:	2b00      	cmp	r3, #0
   231bc:	d006      	beq.n	231cc <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   231be:	4b0e      	ldr	r3, [pc, #56]	; (231f8 <hif_chip_sleep+0x50>)
   231c0:	785b      	ldrb	r3, [r3, #1]
   231c2:	b2db      	uxtb	r3, r3
   231c4:	3b01      	subs	r3, #1
   231c6:	b2da      	uxtb	r2, r3
   231c8:	4b0b      	ldr	r3, [pc, #44]	; (231f8 <hif_chip_sleep+0x50>)
   231ca:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   231cc:	4b0a      	ldr	r3, [pc, #40]	; (231f8 <hif_chip_sleep+0x50>)
   231ce:	785b      	ldrb	r3, [r3, #1]
   231d0:	b2db      	uxtb	r3, r3
   231d2:	2b00      	cmp	r3, #0
   231d4:	d109      	bne.n	231ea <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   231d6:	4b08      	ldr	r3, [pc, #32]	; (231f8 <hif_chip_sleep+0x50>)
   231d8:	781b      	ldrb	r3, [r3, #0]
   231da:	b2db      	uxtb	r3, r3
   231dc:	2b00      	cmp	r3, #0
   231de:	d004      	beq.n	231ea <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   231e0:	1dfc      	adds	r4, r7, #7
   231e2:	4b06      	ldr	r3, [pc, #24]	; (231fc <hif_chip_sleep+0x54>)
   231e4:	4798      	blx	r3
   231e6:	0003      	movs	r3, r0
   231e8:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   231ea:	1dfb      	adds	r3, r7, #7
   231ec:	781b      	ldrb	r3, [r3, #0]
   231ee:	b25b      	sxtb	r3, r3
}
   231f0:	0018      	movs	r0, r3
   231f2:	46bd      	mov	sp, r7
   231f4:	b003      	add	sp, #12
   231f6:	bd90      	pop	{r4, r7, pc}
   231f8:	20005950 	.word	0x20005950
   231fc:	00024a71 	.word	0x00024a71

00023200 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   23200:	b580      	push	{r7, lr}
   23202:	b082      	sub	sp, #8
   23204:	af00      	add	r7, sp, #0
   23206:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   23208:	4b09      	ldr	r3, [pc, #36]	; (23230 <hif_init+0x30>)
   2320a:	222c      	movs	r2, #44	; 0x2c
   2320c:	2100      	movs	r1, #0
   2320e:	0018      	movs	r0, r3
   23210:	4b08      	ldr	r3, [pc, #32]	; (23234 <hif_init+0x34>)
   23212:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   23214:	4b08      	ldr	r3, [pc, #32]	; (23238 <hif_init+0x38>)
   23216:	0018      	movs	r0, r3
   23218:	4b08      	ldr	r3, [pc, #32]	; (2323c <hif_init+0x3c>)
   2321a:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   2321c:	4b08      	ldr	r3, [pc, #32]	; (23240 <hif_init+0x40>)
   2321e:	0019      	movs	r1, r3
   23220:	2003      	movs	r0, #3
   23222:	4b08      	ldr	r3, [pc, #32]	; (23244 <hif_init+0x44>)
   23224:	4798      	blx	r3
	return M2M_SUCCESS;
   23226:	2300      	movs	r3, #0
}
   23228:	0018      	movs	r0, r3
   2322a:	46bd      	mov	sp, r7
   2322c:	b002      	add	sp, #8
   2322e:	bd80      	pop	{r7, pc}
   23230:	20005950 	.word	0x20005950
   23234:	00022fe9 	.word	0x00022fe9
   23238:	00023065 	.word	0x00023065
   2323c:	000227b5 	.word	0x000227b5
   23240:	000230f5 	.word	0x000230f5
   23244:	00023ce5 	.word	0x00023ce5

00023248 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   23248:	b590      	push	{r4, r7, lr}
   2324a:	b089      	sub	sp, #36	; 0x24
   2324c:	af00      	add	r7, sp, #0
   2324e:	0004      	movs	r4, r0
   23250:	0008      	movs	r0, r1
   23252:	603a      	str	r2, [r7, #0]
   23254:	0019      	movs	r1, r3
   23256:	1dfb      	adds	r3, r7, #7
   23258:	1c22      	adds	r2, r4, #0
   2325a:	701a      	strb	r2, [r3, #0]
   2325c:	1dbb      	adds	r3, r7, #6
   2325e:	1c02      	adds	r2, r0, #0
   23260:	701a      	strb	r2, [r3, #0]
   23262:	1d3b      	adds	r3, r7, #4
   23264:	1c0a      	adds	r2, r1, #0
   23266:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   23268:	231f      	movs	r3, #31
   2326a:	18fb      	adds	r3, r7, r3
   2326c:	22ff      	movs	r2, #255	; 0xff
   2326e:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   23270:	1dbb      	adds	r3, r7, #6
   23272:	781b      	ldrb	r3, [r3, #0]
   23274:	227f      	movs	r2, #127	; 0x7f
   23276:	4013      	ands	r3, r2
   23278:	b2da      	uxtb	r2, r3
   2327a:	2318      	movs	r3, #24
   2327c:	18fb      	adds	r3, r7, r3
   2327e:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   23280:	2318      	movs	r3, #24
   23282:	18fb      	adds	r3, r7, r3
   23284:	1dfa      	adds	r2, r7, #7
   23286:	7812      	ldrb	r2, [r2, #0]
   23288:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   2328a:	2318      	movs	r3, #24
   2328c:	18fb      	adds	r3, r7, r3
   2328e:	2208      	movs	r2, #8
   23290:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   23292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   23294:	2b00      	cmp	r3, #0
   23296:	d011      	beq.n	232bc <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   23298:	2318      	movs	r3, #24
   2329a:	18fb      	adds	r3, r7, r3
   2329c:	885b      	ldrh	r3, [r3, #2]
   2329e:	b29a      	uxth	r2, r3
   232a0:	2338      	movs	r3, #56	; 0x38
   232a2:	18f9      	adds	r1, r7, r3
   232a4:	2334      	movs	r3, #52	; 0x34
   232a6:	18fb      	adds	r3, r7, r3
   232a8:	8809      	ldrh	r1, [r1, #0]
   232aa:	881b      	ldrh	r3, [r3, #0]
   232ac:	18cb      	adds	r3, r1, r3
   232ae:	b29b      	uxth	r3, r3
   232b0:	18d3      	adds	r3, r2, r3
   232b2:	b29a      	uxth	r2, r3
   232b4:	2318      	movs	r3, #24
   232b6:	18fb      	adds	r3, r7, r3
   232b8:	805a      	strh	r2, [r3, #2]
   232ba:	e00a      	b.n	232d2 <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   232bc:	2318      	movs	r3, #24
   232be:	18fb      	adds	r3, r7, r3
   232c0:	885b      	ldrh	r3, [r3, #2]
   232c2:	b29a      	uxth	r2, r3
   232c4:	1d3b      	adds	r3, r7, #4
   232c6:	881b      	ldrh	r3, [r3, #0]
   232c8:	18d3      	adds	r3, r2, r3
   232ca:	b29a      	uxth	r2, r3
   232cc:	2318      	movs	r3, #24
   232ce:	18fb      	adds	r3, r7, r3
   232d0:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   232d2:	231f      	movs	r3, #31
   232d4:	18fc      	adds	r4, r7, r3
   232d6:	4bb2      	ldr	r3, [pc, #712]	; (235a0 <hif_send+0x358>)
   232d8:	4798      	blx	r3
   232da:	0003      	movs	r3, r0
   232dc:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   232de:	231f      	movs	r3, #31
   232e0:	18fb      	adds	r3, r7, r3
   232e2:	781b      	ldrb	r3, [r3, #0]
   232e4:	b25b      	sxtb	r3, r3
   232e6:	2b00      	cmp	r3, #0
   232e8:	d000      	beq.n	232ec <hif_send+0xa4>
   232ea:	e129      	b.n	23540 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   232ec:	2300      	movs	r3, #0
   232ee:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   232f0:	230e      	movs	r3, #14
   232f2:	18fb      	adds	r3, r7, r3
   232f4:	2200      	movs	r2, #0
   232f6:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   232f8:	2300      	movs	r3, #0
   232fa:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   232fc:	1dfb      	adds	r3, r7, #7
   232fe:	781a      	ldrb	r2, [r3, #0]
   23300:	697b      	ldr	r3, [r7, #20]
   23302:	4313      	orrs	r3, r2
   23304:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   23306:	1dbb      	adds	r3, r7, #6
   23308:	781b      	ldrb	r3, [r3, #0]
   2330a:	021a      	lsls	r2, r3, #8
   2330c:	697b      	ldr	r3, [r7, #20]
   2330e:	4313      	orrs	r3, r2
   23310:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   23312:	2318      	movs	r3, #24
   23314:	18fb      	adds	r3, r7, r3
   23316:	885b      	ldrh	r3, [r3, #2]
   23318:	b29b      	uxth	r3, r3
   2331a:	041a      	lsls	r2, r3, #16
   2331c:	697b      	ldr	r3, [r7, #20]
   2331e:	4313      	orrs	r3, r2
   23320:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   23322:	697b      	ldr	r3, [r7, #20]
   23324:	221f      	movs	r2, #31
   23326:	18bc      	adds	r4, r7, r2
   23328:	4a9e      	ldr	r2, [pc, #632]	; (235a4 <hif_send+0x35c>)
   2332a:	0019      	movs	r1, r3
   2332c:	0010      	movs	r0, r2
   2332e:	4b9e      	ldr	r3, [pc, #632]	; (235a8 <hif_send+0x360>)
   23330:	4798      	blx	r3
   23332:	0003      	movs	r3, r0
   23334:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   23336:	231f      	movs	r3, #31
   23338:	18fb      	adds	r3, r7, r3
   2333a:	781b      	ldrb	r3, [r3, #0]
   2333c:	b25b      	sxtb	r3, r3
   2333e:	2b00      	cmp	r3, #0
   23340:	d000      	beq.n	23344 <hif_send+0xfc>
   23342:	e119      	b.n	23578 <hif_send+0x330>

		reg = 0UL;
   23344:	2300      	movs	r3, #0
   23346:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   23348:	697b      	ldr	r3, [r7, #20]
   2334a:	2202      	movs	r2, #2
   2334c:	4313      	orrs	r3, r2
   2334e:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   23350:	697b      	ldr	r3, [r7, #20]
   23352:	221f      	movs	r2, #31
   23354:	18bc      	adds	r4, r7, r2
   23356:	4a95      	ldr	r2, [pc, #596]	; (235ac <hif_send+0x364>)
   23358:	0019      	movs	r1, r3
   2335a:	0010      	movs	r0, r2
   2335c:	4b92      	ldr	r3, [pc, #584]	; (235a8 <hif_send+0x360>)
   2335e:	4798      	blx	r3
   23360:	0003      	movs	r3, r0
   23362:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   23364:	231f      	movs	r3, #31
   23366:	18fb      	adds	r3, r7, r3
   23368:	781b      	ldrb	r3, [r3, #0]
   2336a:	b25b      	sxtb	r3, r3
   2336c:	2b00      	cmp	r3, #0
   2336e:	d000      	beq.n	23372 <hif_send+0x12a>
   23370:	e104      	b.n	2357c <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   23372:	2300      	movs	r3, #0
   23374:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   23376:	230e      	movs	r3, #14
   23378:	18fb      	adds	r3, r7, r3
   2337a:	2200      	movs	r2, #0
   2337c:	801a      	strh	r2, [r3, #0]
   2337e:	e050      	b.n	23422 <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   23380:	231f      	movs	r3, #31
   23382:	18fc      	adds	r4, r7, r3
   23384:	2314      	movs	r3, #20
   23386:	18fb      	adds	r3, r7, r3
   23388:	4a88      	ldr	r2, [pc, #544]	; (235ac <hif_send+0x364>)
   2338a:	0019      	movs	r1, r3
   2338c:	0010      	movs	r0, r2
   2338e:	4b88      	ldr	r3, [pc, #544]	; (235b0 <hif_send+0x368>)
   23390:	4798      	blx	r3
   23392:	0003      	movs	r3, r0
   23394:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   23396:	231f      	movs	r3, #31
   23398:	18fb      	adds	r3, r7, r3
   2339a:	781b      	ldrb	r3, [r3, #0]
   2339c:	b25b      	sxtb	r3, r3
   2339e:	2b00      	cmp	r3, #0
   233a0:	d147      	bne.n	23432 <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   233a2:	230e      	movs	r3, #14
   233a4:	18fb      	adds	r3, r7, r3
   233a6:	881b      	ldrh	r3, [r3, #0]
   233a8:	b29a      	uxth	r2, r3
   233aa:	23f4      	movs	r3, #244	; 0xf4
   233ac:	33ff      	adds	r3, #255	; 0xff
   233ae:	429a      	cmp	r2, r3
   233b0:	d916      	bls.n	233e0 <hif_send+0x198>
				if(cnt < 501) {
   233b2:	230e      	movs	r3, #14
   233b4:	18fb      	adds	r3, r7, r3
   233b6:	881b      	ldrh	r3, [r3, #0]
   233b8:	b29a      	uxth	r2, r3
   233ba:	23fa      	movs	r3, #250	; 0xfa
   233bc:	005b      	lsls	r3, r3, #1
   233be:	429a      	cmp	r2, r3
   233c0:	d80b      	bhi.n	233da <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   233c2:	4b7c      	ldr	r3, [pc, #496]	; (235b4 <hif_send+0x36c>)
   233c4:	0018      	movs	r0, r3
   233c6:	4b7c      	ldr	r3, [pc, #496]	; (235b8 <hif_send+0x370>)
   233c8:	4798      	blx	r3
   233ca:	4b7c      	ldr	r3, [pc, #496]	; (235bc <hif_send+0x374>)
   233cc:	0018      	movs	r0, r3
   233ce:	4b7a      	ldr	r3, [pc, #488]	; (235b8 <hif_send+0x370>)
   233d0:	4798      	blx	r3
   233d2:	4b7b      	ldr	r3, [pc, #492]	; (235c0 <hif_send+0x378>)
   233d4:	0018      	movs	r0, r3
   233d6:	4b78      	ldr	r3, [pc, #480]	; (235b8 <hif_send+0x370>)
   233d8:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   233da:	2001      	movs	r0, #1
   233dc:	4b79      	ldr	r3, [pc, #484]	; (235c4 <hif_send+0x37c>)
   233de:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   233e0:	697b      	ldr	r3, [r7, #20]
   233e2:	2202      	movs	r2, #2
   233e4:	4013      	ands	r3, r2
   233e6:	d113      	bne.n	23410 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   233e8:	231f      	movs	r3, #31
   233ea:	18fc      	adds	r4, r7, r3
   233ec:	2310      	movs	r3, #16
   233ee:	18fb      	adds	r3, r7, r3
   233f0:	4a75      	ldr	r2, [pc, #468]	; (235c8 <hif_send+0x380>)
   233f2:	0019      	movs	r1, r3
   233f4:	0010      	movs	r0, r2
   233f6:	4b6e      	ldr	r3, [pc, #440]	; (235b0 <hif_send+0x368>)
   233f8:	4798      	blx	r3
   233fa:	0003      	movs	r3, r0
   233fc:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   233fe:	231f      	movs	r3, #31
   23400:	18fb      	adds	r3, r7, r3
   23402:	781b      	ldrb	r3, [r3, #0]
   23404:	b25b      	sxtb	r3, r3
   23406:	2b00      	cmp	r3, #0
   23408:	d015      	beq.n	23436 <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   2340a:	2300      	movs	r3, #0
   2340c:	613b      	str	r3, [r7, #16]
					goto ERR1;
   2340e:	e0bc      	b.n	2358a <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   23410:	230e      	movs	r3, #14
   23412:	18fb      	adds	r3, r7, r3
   23414:	881b      	ldrh	r3, [r3, #0]
   23416:	b29b      	uxth	r3, r3
   23418:	3301      	adds	r3, #1
   2341a:	b29a      	uxth	r2, r3
   2341c:	230e      	movs	r3, #14
   2341e:	18fb      	adds	r3, r7, r3
   23420:	801a      	strh	r2, [r3, #0]
   23422:	230e      	movs	r3, #14
   23424:	18fb      	adds	r3, r7, r3
   23426:	881b      	ldrh	r3, [r3, #0]
   23428:	b29b      	uxth	r3, r3
   2342a:	4a68      	ldr	r2, [pc, #416]	; (235cc <hif_send+0x384>)
   2342c:	4293      	cmp	r3, r2
   2342e:	d9a7      	bls.n	23380 <hif_send+0x138>
   23430:	e002      	b.n	23438 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   23432:	46c0      	nop			; (mov r8, r8)
   23434:	e000      	b.n	23438 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   23436:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   23438:	693b      	ldr	r3, [r7, #16]
   2343a:	2b00      	cmp	r3, #0
   2343c:	d100      	bne.n	23440 <hif_send+0x1f8>
   2343e:	e074      	b.n	2352a <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   23440:	693b      	ldr	r3, [r7, #16]
   23442:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   23444:	2318      	movs	r3, #24
   23446:	18fb      	adds	r3, r7, r3
   23448:	885b      	ldrh	r3, [r3, #2]
   2344a:	b29a      	uxth	r2, r3
   2344c:	2318      	movs	r3, #24
   2344e:	18fb      	adds	r3, r7, r3
   23450:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   23452:	68bb      	ldr	r3, [r7, #8]
   23454:	221f      	movs	r2, #31
   23456:	18bc      	adds	r4, r7, r2
   23458:	2218      	movs	r2, #24
   2345a:	18b9      	adds	r1, r7, r2
   2345c:	2208      	movs	r2, #8
   2345e:	0018      	movs	r0, r3
   23460:	4b5b      	ldr	r3, [pc, #364]	; (235d0 <hif_send+0x388>)
   23462:	4798      	blx	r3
   23464:	0003      	movs	r3, r0
   23466:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   23468:	231f      	movs	r3, #31
   2346a:	18fb      	adds	r3, r7, r3
   2346c:	781b      	ldrb	r3, [r3, #0]
   2346e:	b25b      	sxtb	r3, r3
   23470:	2b00      	cmp	r3, #0
   23472:	d000      	beq.n	23476 <hif_send+0x22e>
   23474:	e084      	b.n	23580 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   23476:	68bb      	ldr	r3, [r7, #8]
   23478:	3308      	adds	r3, #8
   2347a:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   2347c:	683b      	ldr	r3, [r7, #0]
   2347e:	2b00      	cmp	r3, #0
   23480:	d016      	beq.n	234b0 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   23482:	68b8      	ldr	r0, [r7, #8]
   23484:	1d3b      	adds	r3, r7, #4
   23486:	881a      	ldrh	r2, [r3, #0]
   23488:	231f      	movs	r3, #31
   2348a:	18fc      	adds	r4, r7, r3
   2348c:	683b      	ldr	r3, [r7, #0]
   2348e:	0019      	movs	r1, r3
   23490:	4b4f      	ldr	r3, [pc, #316]	; (235d0 <hif_send+0x388>)
   23492:	4798      	blx	r3
   23494:	0003      	movs	r3, r0
   23496:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   23498:	231f      	movs	r3, #31
   2349a:	18fb      	adds	r3, r7, r3
   2349c:	781b      	ldrb	r3, [r3, #0]
   2349e:	b25b      	sxtb	r3, r3
   234a0:	2b00      	cmp	r3, #0
   234a2:	d000      	beq.n	234a6 <hif_send+0x25e>
   234a4:	e06e      	b.n	23584 <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   234a6:	1d3b      	adds	r3, r7, #4
   234a8:	881a      	ldrh	r2, [r3, #0]
   234aa:	68bb      	ldr	r3, [r7, #8]
   234ac:	18d3      	adds	r3, r2, r3
   234ae:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   234b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   234b2:	2b00      	cmp	r3, #0
   234b4:	d021      	beq.n	234fa <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   234b6:	2338      	movs	r3, #56	; 0x38
   234b8:	18fb      	adds	r3, r7, r3
   234ba:	881a      	ldrh	r2, [r3, #0]
   234bc:	1d3b      	adds	r3, r7, #4
   234be:	881b      	ldrh	r3, [r3, #0]
   234c0:	1ad3      	subs	r3, r2, r3
   234c2:	001a      	movs	r2, r3
   234c4:	68bb      	ldr	r3, [r7, #8]
   234c6:	18d3      	adds	r3, r2, r3
   234c8:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   234ca:	68b8      	ldr	r0, [r7, #8]
   234cc:	2334      	movs	r3, #52	; 0x34
   234ce:	18fb      	adds	r3, r7, r3
   234d0:	881a      	ldrh	r2, [r3, #0]
   234d2:	231f      	movs	r3, #31
   234d4:	18fc      	adds	r4, r7, r3
   234d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   234d8:	0019      	movs	r1, r3
   234da:	4b3d      	ldr	r3, [pc, #244]	; (235d0 <hif_send+0x388>)
   234dc:	4798      	blx	r3
   234de:	0003      	movs	r3, r0
   234e0:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   234e2:	231f      	movs	r3, #31
   234e4:	18fb      	adds	r3, r7, r3
   234e6:	781b      	ldrb	r3, [r3, #0]
   234e8:	b25b      	sxtb	r3, r3
   234ea:	2b00      	cmp	r3, #0
   234ec:	d14c      	bne.n	23588 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   234ee:	2334      	movs	r3, #52	; 0x34
   234f0:	18fb      	adds	r3, r7, r3
   234f2:	881a      	ldrh	r2, [r3, #0]
   234f4:	68bb      	ldr	r3, [r7, #8]
   234f6:	18d3      	adds	r3, r2, r3
   234f8:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   234fa:	693b      	ldr	r3, [r7, #16]
   234fc:	009b      	lsls	r3, r3, #2
   234fe:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   23500:	697b      	ldr	r3, [r7, #20]
   23502:	2202      	movs	r2, #2
   23504:	4313      	orrs	r3, r2
   23506:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   23508:	697b      	ldr	r3, [r7, #20]
   2350a:	221f      	movs	r2, #31
   2350c:	18bc      	adds	r4, r7, r2
   2350e:	4a31      	ldr	r2, [pc, #196]	; (235d4 <hif_send+0x38c>)
   23510:	0019      	movs	r1, r3
   23512:	0010      	movs	r0, r2
   23514:	4b24      	ldr	r3, [pc, #144]	; (235a8 <hif_send+0x360>)
   23516:	4798      	blx	r3
   23518:	0003      	movs	r3, r0
   2351a:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   2351c:	231f      	movs	r3, #31
   2351e:	18fb      	adds	r3, r7, r3
   23520:	781b      	ldrb	r3, [r3, #0]
   23522:	b25b      	sxtb	r3, r3
   23524:	2b00      	cmp	r3, #0
   23526:	d01c      	beq.n	23562 <hif_send+0x31a>
   23528:	e02f      	b.n	2358a <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   2352a:	231f      	movs	r3, #31
   2352c:	18fc      	adds	r4, r7, r3
   2352e:	4b2a      	ldr	r3, [pc, #168]	; (235d8 <hif_send+0x390>)
   23530:	4798      	blx	r3
   23532:	0003      	movs	r3, r0
   23534:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   23536:	231f      	movs	r3, #31
   23538:	18fb      	adds	r3, r7, r3
   2353a:	22fd      	movs	r2, #253	; 0xfd
   2353c:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   2353e:	e026      	b.n	2358e <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   23540:	2398      	movs	r3, #152	; 0x98
   23542:	33ff      	adds	r3, #255	; 0xff
   23544:	001a      	movs	r2, r3
   23546:	4925      	ldr	r1, [pc, #148]	; (235dc <hif_send+0x394>)
   23548:	4b25      	ldr	r3, [pc, #148]	; (235e0 <hif_send+0x398>)
   2354a:	0018      	movs	r0, r3
   2354c:	4b1a      	ldr	r3, [pc, #104]	; (235b8 <hif_send+0x370>)
   2354e:	4798      	blx	r3
   23550:	4b24      	ldr	r3, [pc, #144]	; (235e4 <hif_send+0x39c>)
   23552:	0018      	movs	r0, r3
   23554:	4b18      	ldr	r3, [pc, #96]	; (235b8 <hif_send+0x370>)
   23556:	4798      	blx	r3
   23558:	4b19      	ldr	r3, [pc, #100]	; (235c0 <hif_send+0x378>)
   2355a:	0018      	movs	r0, r3
   2355c:	4b16      	ldr	r3, [pc, #88]	; (235b8 <hif_send+0x370>)
   2355e:	4798      	blx	r3
		goto ERR2;
   23560:	e015      	b.n	2358e <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   23562:	231f      	movs	r3, #31
   23564:	18fc      	adds	r4, r7, r3
   23566:	4b1c      	ldr	r3, [pc, #112]	; (235d8 <hif_send+0x390>)
   23568:	4798      	blx	r3
   2356a:	0003      	movs	r3, r0
   2356c:	7023      	strb	r3, [r4, #0]
	return ret;
   2356e:	231f      	movs	r3, #31
   23570:	18fb      	adds	r3, r7, r3
   23572:	781b      	ldrb	r3, [r3, #0]
   23574:	b25b      	sxtb	r3, r3
   23576:	e00e      	b.n	23596 <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   23578:	46c0      	nop			; (mov r8, r8)
   2357a:	e006      	b.n	2358a <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   2357c:	46c0      	nop			; (mov r8, r8)
   2357e:	e004      	b.n	2358a <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   23580:	46c0      	nop			; (mov r8, r8)
   23582:	e002      	b.n	2358a <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   23584:	46c0      	nop			; (mov r8, r8)
   23586:	e000      	b.n	2358a <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   23588:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   2358a:	4b17      	ldr	r3, [pc, #92]	; (235e8 <hif_send+0x3a0>)
   2358c:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   2358e:	231f      	movs	r3, #31
   23590:	18fb      	adds	r3, r7, r3
   23592:	781b      	ldrb	r3, [r3, #0]
   23594:	b25b      	sxtb	r3, r3
}
   23596:	0018      	movs	r0, r3
   23598:	46bd      	mov	sp, r7
   2359a:	b009      	add	sp, #36	; 0x24
   2359c:	bd90      	pop	{r4, r7, pc}
   2359e:	46c0      	nop			; (mov r8, r8)
   235a0:	00023111 	.word	0x00023111
   235a4:	0000108c 	.word	0x0000108c
   235a8:	0002509d 	.word	0x0002509d
   235ac:	00001078 	.word	0x00001078
   235b0:	00025079 	.word	0x00025079
   235b4:	0003b63c 	.word	0x0003b63c
   235b8:	00020329 	.word	0x00020329
   235bc:	0003b648 	.word	0x0003b648
   235c0:	0003b65c 	.word	0x0003b65c
   235c4:	00022799 	.word	0x00022799
   235c8:	00150400 	.word	0x00150400
   235cc:	000003e7 	.word	0x000003e7
   235d0:	000251e5 	.word	0x000251e5
   235d4:	0000106c 	.word	0x0000106c
   235d8:	000231a9 	.word	0x000231a9
   235dc:	0003b964 	.word	0x0003b964
   235e0:	0003b660 	.word	0x0003b660
   235e4:	0003b674 	.word	0x0003b674
   235e8:	00023181 	.word	0x00023181

000235ec <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   235ec:	b590      	push	{r4, r7, lr}
   235ee:	b087      	sub	sp, #28
   235f0:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   235f2:	230f      	movs	r3, #15
   235f4:	18fb      	adds	r3, r7, r3
   235f6:	2200      	movs	r2, #0
   235f8:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   235fa:	230f      	movs	r3, #15
   235fc:	18fc      	adds	r4, r7, r3
   235fe:	2308      	movs	r3, #8
   23600:	18fb      	adds	r3, r7, r3
   23602:	4adc      	ldr	r2, [pc, #880]	; (23974 <hif_isr+0x388>)
   23604:	0019      	movs	r1, r3
   23606:	0010      	movs	r0, r2
   23608:	4bdb      	ldr	r3, [pc, #876]	; (23978 <hif_isr+0x38c>)
   2360a:	4798      	blx	r3
   2360c:	0003      	movs	r3, r0
   2360e:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   23610:	230f      	movs	r3, #15
   23612:	18fb      	adds	r3, r7, r3
   23614:	781b      	ldrb	r3, [r3, #0]
   23616:	b25b      	sxtb	r3, r3
   23618:	2b00      	cmp	r3, #0
   2361a:	d000      	beq.n	2361e <hif_isr+0x32>
   2361c:	e21e      	b.n	23a5c <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   2361e:	68bb      	ldr	r3, [r7, #8]
   23620:	2201      	movs	r2, #1
   23622:	4013      	ands	r3, r2
   23624:	d100      	bne.n	23628 <hif_isr+0x3c>
   23626:	e204      	b.n	23a32 <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   23628:	2000      	movs	r0, #0
   2362a:	4bd4      	ldr	r3, [pc, #848]	; (2397c <hif_isr+0x390>)
   2362c:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   2362e:	68bb      	ldr	r3, [r7, #8]
   23630:	2201      	movs	r2, #1
   23632:	4393      	bics	r3, r2
   23634:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   23636:	68bb      	ldr	r3, [r7, #8]
   23638:	220f      	movs	r2, #15
   2363a:	18bc      	adds	r4, r7, r2
   2363c:	4acd      	ldr	r2, [pc, #820]	; (23974 <hif_isr+0x388>)
   2363e:	0019      	movs	r1, r3
   23640:	0010      	movs	r0, r2
   23642:	4bcf      	ldr	r3, [pc, #828]	; (23980 <hif_isr+0x394>)
   23644:	4798      	blx	r3
   23646:	0003      	movs	r3, r0
   23648:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   2364a:	230f      	movs	r3, #15
   2364c:	18fb      	adds	r3, r7, r3
   2364e:	781b      	ldrb	r3, [r3, #0]
   23650:	b25b      	sxtb	r3, r3
   23652:	2b00      	cmp	r3, #0
   23654:	d000      	beq.n	23658 <hif_isr+0x6c>
   23656:	e210      	b.n	23a7a <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   23658:	4bca      	ldr	r3, [pc, #808]	; (23984 <hif_isr+0x398>)
   2365a:	2201      	movs	r2, #1
   2365c:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   2365e:	68bb      	ldr	r3, [r7, #8]
   23660:	089b      	lsrs	r3, r3, #2
   23662:	b29a      	uxth	r2, r3
   23664:	230c      	movs	r3, #12
   23666:	18fb      	adds	r3, r7, r3
   23668:	0512      	lsls	r2, r2, #20
   2366a:	0d12      	lsrs	r2, r2, #20
   2366c:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   2366e:	230c      	movs	r3, #12
   23670:	18fb      	adds	r3, r7, r3
   23672:	881b      	ldrh	r3, [r3, #0]
   23674:	2b00      	cmp	r3, #0
   23676:	d100      	bne.n	2367a <hif_isr+0x8e>
   23678:	e1c8      	b.n	23a0c <hif_isr+0x420>
				uint32 address = 0;
   2367a:	2300      	movs	r3, #0
   2367c:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   2367e:	230f      	movs	r3, #15
   23680:	18fc      	adds	r4, r7, r3
   23682:	003b      	movs	r3, r7
   23684:	4ac0      	ldr	r2, [pc, #768]	; (23988 <hif_isr+0x39c>)
   23686:	0019      	movs	r1, r3
   23688:	0010      	movs	r0, r2
   2368a:	4bbb      	ldr	r3, [pc, #748]	; (23978 <hif_isr+0x38c>)
   2368c:	4798      	blx	r3
   2368e:	0003      	movs	r3, r0
   23690:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   23692:	230f      	movs	r3, #15
   23694:	18fb      	adds	r3, r7, r3
   23696:	781b      	ldrb	r3, [r3, #0]
   23698:	b25b      	sxtb	r3, r3
   2369a:	2b00      	cmp	r3, #0
   2369c:	d012      	beq.n	236c4 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   2369e:	23e4      	movs	r3, #228	; 0xe4
   236a0:	005a      	lsls	r2, r3, #1
   236a2:	49ba      	ldr	r1, [pc, #744]	; (2398c <hif_isr+0x3a0>)
   236a4:	4bba      	ldr	r3, [pc, #744]	; (23990 <hif_isr+0x3a4>)
   236a6:	0018      	movs	r0, r3
   236a8:	4bba      	ldr	r3, [pc, #744]	; (23994 <hif_isr+0x3a8>)
   236aa:	4798      	blx	r3
   236ac:	4bba      	ldr	r3, [pc, #744]	; (23998 <hif_isr+0x3ac>)
   236ae:	0018      	movs	r0, r3
   236b0:	4bb8      	ldr	r3, [pc, #736]	; (23994 <hif_isr+0x3a8>)
   236b2:	4798      	blx	r3
   236b4:	4bb9      	ldr	r3, [pc, #740]	; (2399c <hif_isr+0x3b0>)
   236b6:	0018      	movs	r0, r3
   236b8:	4bb6      	ldr	r3, [pc, #728]	; (23994 <hif_isr+0x3a8>)
   236ba:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   236bc:	2001      	movs	r0, #1
   236be:	4baf      	ldr	r3, [pc, #700]	; (2397c <hif_isr+0x390>)
   236c0:	4798      	blx	r3
					goto ERR1;
   236c2:	e1db      	b.n	23a7c <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   236c4:	683a      	ldr	r2, [r7, #0]
   236c6:	4baf      	ldr	r3, [pc, #700]	; (23984 <hif_isr+0x398>)
   236c8:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   236ca:	230c      	movs	r3, #12
   236cc:	18fb      	adds	r3, r7, r3
   236ce:	881a      	ldrh	r2, [r3, #0]
   236d0:	4bac      	ldr	r3, [pc, #688]	; (23984 <hif_isr+0x398>)
   236d2:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   236d4:	683b      	ldr	r3, [r7, #0]
   236d6:	220f      	movs	r2, #15
   236d8:	18bc      	adds	r4, r7, r2
   236da:	1d39      	adds	r1, r7, #4
   236dc:	2204      	movs	r2, #4
   236de:	0018      	movs	r0, r3
   236e0:	4baf      	ldr	r3, [pc, #700]	; (239a0 <hif_isr+0x3b4>)
   236e2:	4798      	blx	r3
   236e4:	0003      	movs	r3, r0
   236e6:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   236e8:	1d3b      	adds	r3, r7, #4
   236ea:	885b      	ldrh	r3, [r3, #2]
   236ec:	b29a      	uxth	r2, r3
   236ee:	1d3b      	adds	r3, r7, #4
   236f0:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   236f2:	230f      	movs	r3, #15
   236f4:	18fb      	adds	r3, r7, r3
   236f6:	781b      	ldrb	r3, [r3, #0]
   236f8:	b25b      	sxtb	r3, r3
   236fa:	2b00      	cmp	r3, #0
   236fc:	d012      	beq.n	23724 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   236fe:	23e9      	movs	r3, #233	; 0xe9
   23700:	005a      	lsls	r2, r3, #1
   23702:	49a2      	ldr	r1, [pc, #648]	; (2398c <hif_isr+0x3a0>)
   23704:	4ba2      	ldr	r3, [pc, #648]	; (23990 <hif_isr+0x3a4>)
   23706:	0018      	movs	r0, r3
   23708:	4ba2      	ldr	r3, [pc, #648]	; (23994 <hif_isr+0x3a8>)
   2370a:	4798      	blx	r3
   2370c:	4ba5      	ldr	r3, [pc, #660]	; (239a4 <hif_isr+0x3b8>)
   2370e:	0018      	movs	r0, r3
   23710:	4ba0      	ldr	r3, [pc, #640]	; (23994 <hif_isr+0x3a8>)
   23712:	4798      	blx	r3
   23714:	4ba1      	ldr	r3, [pc, #644]	; (2399c <hif_isr+0x3b0>)
   23716:	0018      	movs	r0, r3
   23718:	4b9e      	ldr	r3, [pc, #632]	; (23994 <hif_isr+0x3a8>)
   2371a:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   2371c:	2001      	movs	r0, #1
   2371e:	4b97      	ldr	r3, [pc, #604]	; (2397c <hif_isr+0x390>)
   23720:	4798      	blx	r3
					goto ERR1;
   23722:	e1ab      	b.n	23a7c <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   23724:	1d3b      	adds	r3, r7, #4
   23726:	885b      	ldrh	r3, [r3, #2]
   23728:	b29b      	uxth	r3, r3
   2372a:	220c      	movs	r2, #12
   2372c:	18ba      	adds	r2, r7, r2
   2372e:	8812      	ldrh	r2, [r2, #0]
   23730:	429a      	cmp	r2, r3
   23732:	d02f      	beq.n	23794 <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   23734:	230c      	movs	r3, #12
   23736:	18fb      	adds	r3, r7, r3
   23738:	881b      	ldrh	r3, [r3, #0]
   2373a:	1d3a      	adds	r2, r7, #4
   2373c:	8852      	ldrh	r2, [r2, #2]
   2373e:	b292      	uxth	r2, r2
   23740:	1a9b      	subs	r3, r3, r2
   23742:	2b04      	cmp	r3, #4
   23744:	dd26      	ble.n	23794 <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   23746:	23dc      	movs	r3, #220	; 0xdc
   23748:	33ff      	adds	r3, #255	; 0xff
   2374a:	001a      	movs	r2, r3
   2374c:	498f      	ldr	r1, [pc, #572]	; (2398c <hif_isr+0x3a0>)
   2374e:	4b90      	ldr	r3, [pc, #576]	; (23990 <hif_isr+0x3a4>)
   23750:	0018      	movs	r0, r3
   23752:	4b90      	ldr	r3, [pc, #576]	; (23994 <hif_isr+0x3a8>)
   23754:	4798      	blx	r3
   23756:	230c      	movs	r3, #12
   23758:	18fb      	adds	r3, r7, r3
   2375a:	8819      	ldrh	r1, [r3, #0]
   2375c:	1d3b      	adds	r3, r7, #4
   2375e:	885b      	ldrh	r3, [r3, #2]
   23760:	b29b      	uxth	r3, r3
   23762:	001a      	movs	r2, r3
   23764:	1d3b      	adds	r3, r7, #4
   23766:	781b      	ldrb	r3, [r3, #0]
   23768:	b2db      	uxtb	r3, r3
   2376a:	001c      	movs	r4, r3
   2376c:	1d3b      	adds	r3, r7, #4
   2376e:	785b      	ldrb	r3, [r3, #1]
   23770:	b2db      	uxtb	r3, r3
   23772:	488d      	ldr	r0, [pc, #564]	; (239a8 <hif_isr+0x3bc>)
   23774:	9300      	str	r3, [sp, #0]
   23776:	0023      	movs	r3, r4
   23778:	4c86      	ldr	r4, [pc, #536]	; (23994 <hif_isr+0x3a8>)
   2377a:	47a0      	blx	r4
   2377c:	4b87      	ldr	r3, [pc, #540]	; (2399c <hif_isr+0x3b0>)
   2377e:	0018      	movs	r0, r3
   23780:	4b84      	ldr	r3, [pc, #528]	; (23994 <hif_isr+0x3a8>)
   23782:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   23784:	2001      	movs	r0, #1
   23786:	4b7d      	ldr	r3, [pc, #500]	; (2397c <hif_isr+0x390>)
   23788:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   2378a:	230f      	movs	r3, #15
   2378c:	18fb      	adds	r3, r7, r3
   2378e:	22fa      	movs	r2, #250	; 0xfa
   23790:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   23792:	e173      	b.n	23a7c <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   23794:	1d3b      	adds	r3, r7, #4
   23796:	781b      	ldrb	r3, [r3, #0]
   23798:	b2db      	uxtb	r3, r3
   2379a:	2b01      	cmp	r3, #1
   2379c:	d122      	bne.n	237e4 <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   2379e:	4b79      	ldr	r3, [pc, #484]	; (23984 <hif_isr+0x398>)
   237a0:	691b      	ldr	r3, [r3, #16]
   237a2:	2b00      	cmp	r3, #0
   237a4:	d00d      	beq.n	237c2 <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   237a6:	4b77      	ldr	r3, [pc, #476]	; (23984 <hif_isr+0x398>)
   237a8:	691b      	ldr	r3, [r3, #16]
   237aa:	1d3a      	adds	r2, r7, #4
   237ac:	7852      	ldrb	r2, [r2, #1]
   237ae:	b2d0      	uxtb	r0, r2
   237b0:	1d3a      	adds	r2, r7, #4
   237b2:	8852      	ldrh	r2, [r2, #2]
   237b4:	b292      	uxth	r2, r2
   237b6:	3a08      	subs	r2, #8
   237b8:	b291      	uxth	r1, r2
   237ba:	683a      	ldr	r2, [r7, #0]
   237bc:	3208      	adds	r2, #8
   237be:	4798      	blx	r3
   237c0:	e102      	b.n	239c8 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   237c2:	23e8      	movs	r3, #232	; 0xe8
   237c4:	33ff      	adds	r3, #255	; 0xff
   237c6:	001a      	movs	r2, r3
   237c8:	4970      	ldr	r1, [pc, #448]	; (2398c <hif_isr+0x3a0>)
   237ca:	4b71      	ldr	r3, [pc, #452]	; (23990 <hif_isr+0x3a4>)
   237cc:	0018      	movs	r0, r3
   237ce:	4b71      	ldr	r3, [pc, #452]	; (23994 <hif_isr+0x3a8>)
   237d0:	4798      	blx	r3
   237d2:	4b76      	ldr	r3, [pc, #472]	; (239ac <hif_isr+0x3c0>)
   237d4:	0018      	movs	r0, r3
   237d6:	4b6f      	ldr	r3, [pc, #444]	; (23994 <hif_isr+0x3a8>)
   237d8:	4798      	blx	r3
   237da:	4b70      	ldr	r3, [pc, #448]	; (2399c <hif_isr+0x3b0>)
   237dc:	0018      	movs	r0, r3
   237de:	4b6d      	ldr	r3, [pc, #436]	; (23994 <hif_isr+0x3a8>)
   237e0:	4798      	blx	r3
   237e2:	e0f1      	b.n	239c8 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   237e4:	1d3b      	adds	r3, r7, #4
   237e6:	781b      	ldrb	r3, [r3, #0]
   237e8:	b2db      	uxtb	r3, r3
   237ea:	2b02      	cmp	r3, #2
   237ec:	d122      	bne.n	23834 <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   237ee:	4b65      	ldr	r3, [pc, #404]	; (23984 <hif_isr+0x398>)
   237f0:	695b      	ldr	r3, [r3, #20]
   237f2:	2b00      	cmp	r3, #0
   237f4:	d00d      	beq.n	23812 <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   237f6:	4b63      	ldr	r3, [pc, #396]	; (23984 <hif_isr+0x398>)
   237f8:	695b      	ldr	r3, [r3, #20]
   237fa:	1d3a      	adds	r2, r7, #4
   237fc:	7852      	ldrb	r2, [r2, #1]
   237fe:	b2d0      	uxtb	r0, r2
   23800:	1d3a      	adds	r2, r7, #4
   23802:	8852      	ldrh	r2, [r2, #2]
   23804:	b292      	uxth	r2, r2
   23806:	3a08      	subs	r2, #8
   23808:	b291      	uxth	r1, r2
   2380a:	683a      	ldr	r2, [r7, #0]
   2380c:	3208      	adds	r2, #8
   2380e:	4798      	blx	r3
   23810:	e0da      	b.n	239c8 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   23812:	23f0      	movs	r3, #240	; 0xf0
   23814:	33ff      	adds	r3, #255	; 0xff
   23816:	001a      	movs	r2, r3
   23818:	495c      	ldr	r1, [pc, #368]	; (2398c <hif_isr+0x3a0>)
   2381a:	4b5d      	ldr	r3, [pc, #372]	; (23990 <hif_isr+0x3a4>)
   2381c:	0018      	movs	r0, r3
   2381e:	4b5d      	ldr	r3, [pc, #372]	; (23994 <hif_isr+0x3a8>)
   23820:	4798      	blx	r3
   23822:	4b63      	ldr	r3, [pc, #396]	; (239b0 <hif_isr+0x3c4>)
   23824:	0018      	movs	r0, r3
   23826:	4b5b      	ldr	r3, [pc, #364]	; (23994 <hif_isr+0x3a8>)
   23828:	4798      	blx	r3
   2382a:	4b5c      	ldr	r3, [pc, #368]	; (2399c <hif_isr+0x3b0>)
   2382c:	0018      	movs	r0, r3
   2382e:	4b59      	ldr	r3, [pc, #356]	; (23994 <hif_isr+0x3a8>)
   23830:	4798      	blx	r3
   23832:	e0c9      	b.n	239c8 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   23834:	1d3b      	adds	r3, r7, #4
   23836:	781b      	ldrb	r3, [r3, #0]
   23838:	b2db      	uxtb	r3, r3
   2383a:	2b04      	cmp	r3, #4
   2383c:	d122      	bne.n	23884 <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   2383e:	4b51      	ldr	r3, [pc, #324]	; (23984 <hif_isr+0x398>)
   23840:	699b      	ldr	r3, [r3, #24]
   23842:	2b00      	cmp	r3, #0
   23844:	d00d      	beq.n	23862 <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   23846:	4b4f      	ldr	r3, [pc, #316]	; (23984 <hif_isr+0x398>)
   23848:	699b      	ldr	r3, [r3, #24]
   2384a:	1d3a      	adds	r2, r7, #4
   2384c:	7852      	ldrb	r2, [r2, #1]
   2384e:	b2d0      	uxtb	r0, r2
   23850:	1d3a      	adds	r2, r7, #4
   23852:	8852      	ldrh	r2, [r2, #2]
   23854:	b292      	uxth	r2, r2
   23856:	3a08      	subs	r2, #8
   23858:	b291      	uxth	r1, r2
   2385a:	683a      	ldr	r2, [r7, #0]
   2385c:	3208      	adds	r2, #8
   2385e:	4798      	blx	r3
   23860:	e0b2      	b.n	239c8 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   23862:	23f8      	movs	r3, #248	; 0xf8
   23864:	33ff      	adds	r3, #255	; 0xff
   23866:	001a      	movs	r2, r3
   23868:	4948      	ldr	r1, [pc, #288]	; (2398c <hif_isr+0x3a0>)
   2386a:	4b49      	ldr	r3, [pc, #292]	; (23990 <hif_isr+0x3a4>)
   2386c:	0018      	movs	r0, r3
   2386e:	4b49      	ldr	r3, [pc, #292]	; (23994 <hif_isr+0x3a8>)
   23870:	4798      	blx	r3
   23872:	4b50      	ldr	r3, [pc, #320]	; (239b4 <hif_isr+0x3c8>)
   23874:	0018      	movs	r0, r3
   23876:	4b47      	ldr	r3, [pc, #284]	; (23994 <hif_isr+0x3a8>)
   23878:	4798      	blx	r3
   2387a:	4b48      	ldr	r3, [pc, #288]	; (2399c <hif_isr+0x3b0>)
   2387c:	0018      	movs	r0, r3
   2387e:	4b45      	ldr	r3, [pc, #276]	; (23994 <hif_isr+0x3a8>)
   23880:	4798      	blx	r3
   23882:	e0a1      	b.n	239c8 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   23884:	1d3b      	adds	r3, r7, #4
   23886:	781b      	ldrb	r3, [r3, #0]
   23888:	b2db      	uxtb	r3, r3
   2388a:	2b06      	cmp	r3, #6
   2388c:	d121      	bne.n	238d2 <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   2388e:	4b3d      	ldr	r3, [pc, #244]	; (23984 <hif_isr+0x398>)
   23890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   23892:	2b00      	cmp	r3, #0
   23894:	d00d      	beq.n	238b2 <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   23896:	4b3b      	ldr	r3, [pc, #236]	; (23984 <hif_isr+0x398>)
   23898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2389a:	1d3a      	adds	r2, r7, #4
   2389c:	7852      	ldrb	r2, [r2, #1]
   2389e:	b2d0      	uxtb	r0, r2
   238a0:	1d3a      	adds	r2, r7, #4
   238a2:	8852      	ldrh	r2, [r2, #2]
   238a4:	b292      	uxth	r2, r2
   238a6:	3a08      	subs	r2, #8
   238a8:	b291      	uxth	r1, r2
   238aa:	683a      	ldr	r2, [r7, #0]
   238ac:	3208      	adds	r2, #8
   238ae:	4798      	blx	r3
   238b0:	e08a      	b.n	239c8 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   238b2:	2380      	movs	r3, #128	; 0x80
   238b4:	009a      	lsls	r2, r3, #2
   238b6:	4935      	ldr	r1, [pc, #212]	; (2398c <hif_isr+0x3a0>)
   238b8:	4b35      	ldr	r3, [pc, #212]	; (23990 <hif_isr+0x3a4>)
   238ba:	0018      	movs	r0, r3
   238bc:	4b35      	ldr	r3, [pc, #212]	; (23994 <hif_isr+0x3a8>)
   238be:	4798      	blx	r3
   238c0:	4b3d      	ldr	r3, [pc, #244]	; (239b8 <hif_isr+0x3cc>)
   238c2:	0018      	movs	r0, r3
   238c4:	4b33      	ldr	r3, [pc, #204]	; (23994 <hif_isr+0x3a8>)
   238c6:	4798      	blx	r3
   238c8:	4b34      	ldr	r3, [pc, #208]	; (2399c <hif_isr+0x3b0>)
   238ca:	0018      	movs	r0, r3
   238cc:	4b31      	ldr	r3, [pc, #196]	; (23994 <hif_isr+0x3a8>)
   238ce:	4798      	blx	r3
   238d0:	e07a      	b.n	239c8 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   238d2:	1d3b      	adds	r3, r7, #4
   238d4:	781b      	ldrb	r3, [r3, #0]
   238d6:	b2db      	uxtb	r3, r3
   238d8:	2b07      	cmp	r3, #7
   238da:	d120      	bne.n	2391e <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   238dc:	4b29      	ldr	r3, [pc, #164]	; (23984 <hif_isr+0x398>)
   238de:	69db      	ldr	r3, [r3, #28]
   238e0:	2b00      	cmp	r3, #0
   238e2:	d00d      	beq.n	23900 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   238e4:	4b27      	ldr	r3, [pc, #156]	; (23984 <hif_isr+0x398>)
   238e6:	69db      	ldr	r3, [r3, #28]
   238e8:	1d3a      	adds	r2, r7, #4
   238ea:	7852      	ldrb	r2, [r2, #1]
   238ec:	b2d0      	uxtb	r0, r2
   238ee:	1d3a      	adds	r2, r7, #4
   238f0:	8852      	ldrh	r2, [r2, #2]
   238f2:	b292      	uxth	r2, r2
   238f4:	3a08      	subs	r2, #8
   238f6:	b291      	uxth	r1, r2
   238f8:	683a      	ldr	r2, [r7, #0]
   238fa:	3208      	adds	r2, #8
   238fc:	4798      	blx	r3
   238fe:	e063      	b.n	239c8 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   23900:	4a2e      	ldr	r2, [pc, #184]	; (239bc <hif_isr+0x3d0>)
   23902:	4922      	ldr	r1, [pc, #136]	; (2398c <hif_isr+0x3a0>)
   23904:	4b22      	ldr	r3, [pc, #136]	; (23990 <hif_isr+0x3a4>)
   23906:	0018      	movs	r0, r3
   23908:	4b22      	ldr	r3, [pc, #136]	; (23994 <hif_isr+0x3a8>)
   2390a:	4798      	blx	r3
   2390c:	4b2c      	ldr	r3, [pc, #176]	; (239c0 <hif_isr+0x3d4>)
   2390e:	0018      	movs	r0, r3
   23910:	4b20      	ldr	r3, [pc, #128]	; (23994 <hif_isr+0x3a8>)
   23912:	4798      	blx	r3
   23914:	4b21      	ldr	r3, [pc, #132]	; (2399c <hif_isr+0x3b0>)
   23916:	0018      	movs	r0, r3
   23918:	4b1e      	ldr	r3, [pc, #120]	; (23994 <hif_isr+0x3a8>)
   2391a:	4798      	blx	r3
   2391c:	e054      	b.n	239c8 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   2391e:	1d3b      	adds	r3, r7, #4
   23920:	781b      	ldrb	r3, [r3, #0]
   23922:	b2db      	uxtb	r3, r3
   23924:	2b05      	cmp	r3, #5
   23926:	d111      	bne.n	2394c <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   23928:	4b16      	ldr	r3, [pc, #88]	; (23984 <hif_isr+0x398>)
   2392a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2392c:	2b00      	cmp	r3, #0
   2392e:	d04b      	beq.n	239c8 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   23930:	4b14      	ldr	r3, [pc, #80]	; (23984 <hif_isr+0x398>)
   23932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   23934:	1d3a      	adds	r2, r7, #4
   23936:	7852      	ldrb	r2, [r2, #1]
   23938:	b2d0      	uxtb	r0, r2
   2393a:	1d3a      	adds	r2, r7, #4
   2393c:	8852      	ldrh	r2, [r2, #2]
   2393e:	b292      	uxth	r2, r2
   23940:	3a08      	subs	r2, #8
   23942:	b291      	uxth	r1, r2
   23944:	683a      	ldr	r2, [r7, #0]
   23946:	3208      	adds	r2, #8
   23948:	4798      	blx	r3
   2394a:	e03d      	b.n	239c8 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   2394c:	2384      	movs	r3, #132	; 0x84
   2394e:	009a      	lsls	r2, r3, #2
   23950:	490e      	ldr	r1, [pc, #56]	; (2398c <hif_isr+0x3a0>)
   23952:	4b0f      	ldr	r3, [pc, #60]	; (23990 <hif_isr+0x3a4>)
   23954:	0018      	movs	r0, r3
   23956:	4b0f      	ldr	r3, [pc, #60]	; (23994 <hif_isr+0x3a8>)
   23958:	4798      	blx	r3
   2395a:	4b1a      	ldr	r3, [pc, #104]	; (239c4 <hif_isr+0x3d8>)
   2395c:	0018      	movs	r0, r3
   2395e:	4b0d      	ldr	r3, [pc, #52]	; (23994 <hif_isr+0x3a8>)
   23960:	4798      	blx	r3
   23962:	4b0e      	ldr	r3, [pc, #56]	; (2399c <hif_isr+0x3b0>)
   23964:	0018      	movs	r0, r3
   23966:	4b0b      	ldr	r3, [pc, #44]	; (23994 <hif_isr+0x3a8>)
   23968:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   2396a:	230f      	movs	r3, #15
   2396c:	18fb      	adds	r3, r7, r3
   2396e:	22fa      	movs	r2, #250	; 0xfa
   23970:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   23972:	e083      	b.n	23a7c <hif_isr+0x490>
   23974:	00001070 	.word	0x00001070
   23978:	00025079 	.word	0x00025079
   2397c:	0002282d 	.word	0x0002282d
   23980:	0002509d 	.word	0x0002509d
   23984:	20005950 	.word	0x20005950
   23988:	00001084 	.word	0x00001084
   2398c:	0003b970 	.word	0x0003b970
   23990:	0003b660 	.word	0x0003b660
   23994:	00020329 	.word	0x00020329
   23998:	0003b694 	.word	0x0003b694
   2399c:	0003b65c 	.word	0x0003b65c
   239a0:	000250ed 	.word	0x000250ed
   239a4:	0003b6bc 	.word	0x0003b6bc
   239a8:	0003b6d4 	.word	0x0003b6d4
   239ac:	0003b714 	.word	0x0003b714
   239b0:	0003b738 	.word	0x0003b738
   239b4:	0003b75c 	.word	0x0003b75c
   239b8:	0003b77c 	.word	0x0003b77c
   239bc:	00000207 	.word	0x00000207
   239c0:	0003b7a0 	.word	0x0003b7a0
   239c4:	0003b7c4 	.word	0x0003b7c4
				}
				if(gstrHifCxt.u8HifRXDone)
   239c8:	4b30      	ldr	r3, [pc, #192]	; (23a8c <hif_isr+0x4a0>)
   239ca:	789b      	ldrb	r3, [r3, #2]
   239cc:	b2db      	uxtb	r3, r3
   239ce:	2b00      	cmp	r3, #0
   239d0:	d054      	beq.n	23a7c <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   239d2:	4a2f      	ldr	r2, [pc, #188]	; (23a90 <hif_isr+0x4a4>)
   239d4:	492f      	ldr	r1, [pc, #188]	; (23a94 <hif_isr+0x4a8>)
   239d6:	4b30      	ldr	r3, [pc, #192]	; (23a98 <hif_isr+0x4ac>)
   239d8:	0018      	movs	r0, r3
   239da:	4b30      	ldr	r3, [pc, #192]	; (23a9c <hif_isr+0x4b0>)
   239dc:	4798      	blx	r3
   239de:	1d3b      	adds	r3, r7, #4
   239e0:	781b      	ldrb	r3, [r3, #0]
   239e2:	b2db      	uxtb	r3, r3
   239e4:	0019      	movs	r1, r3
   239e6:	1d3b      	adds	r3, r7, #4
   239e8:	785b      	ldrb	r3, [r3, #1]
   239ea:	b2db      	uxtb	r3, r3
   239ec:	001a      	movs	r2, r3
   239ee:	4b2c      	ldr	r3, [pc, #176]	; (23aa0 <hif_isr+0x4b4>)
   239f0:	0018      	movs	r0, r3
   239f2:	4b2a      	ldr	r3, [pc, #168]	; (23a9c <hif_isr+0x4b0>)
   239f4:	4798      	blx	r3
   239f6:	4b2b      	ldr	r3, [pc, #172]	; (23aa4 <hif_isr+0x4b8>)
   239f8:	0018      	movs	r0, r3
   239fa:	4b28      	ldr	r3, [pc, #160]	; (23a9c <hif_isr+0x4b0>)
   239fc:	4798      	blx	r3
					ret = hif_set_rx_done();
   239fe:	230f      	movs	r3, #15
   23a00:	18fc      	adds	r4, r7, r3
   23a02:	4b29      	ldr	r3, [pc, #164]	; (23aa8 <hif_isr+0x4bc>)
   23a04:	4798      	blx	r3
   23a06:	0003      	movs	r3, r0
   23a08:	7023      	strb	r3, [r4, #0]
   23a0a:	e037      	b.n	23a7c <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   23a0c:	4a27      	ldr	r2, [pc, #156]	; (23aac <hif_isr+0x4c0>)
   23a0e:	4921      	ldr	r1, [pc, #132]	; (23a94 <hif_isr+0x4a8>)
   23a10:	4b21      	ldr	r3, [pc, #132]	; (23a98 <hif_isr+0x4ac>)
   23a12:	0018      	movs	r0, r3
   23a14:	4b21      	ldr	r3, [pc, #132]	; (23a9c <hif_isr+0x4b0>)
   23a16:	4798      	blx	r3
   23a18:	4b25      	ldr	r3, [pc, #148]	; (23ab0 <hif_isr+0x4c4>)
   23a1a:	0018      	movs	r0, r3
   23a1c:	4b1f      	ldr	r3, [pc, #124]	; (23a9c <hif_isr+0x4b0>)
   23a1e:	4798      	blx	r3
   23a20:	4b20      	ldr	r3, [pc, #128]	; (23aa4 <hif_isr+0x4b8>)
   23a22:	0018      	movs	r0, r3
   23a24:	4b1d      	ldr	r3, [pc, #116]	; (23a9c <hif_isr+0x4b0>)
   23a26:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   23a28:	230f      	movs	r3, #15
   23a2a:	18fb      	adds	r3, r7, r3
   23a2c:	22fe      	movs	r2, #254	; 0xfe
   23a2e:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   23a30:	e024      	b.n	23a7c <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   23a32:	4a20      	ldr	r2, [pc, #128]	; (23ab4 <hif_isr+0x4c8>)
   23a34:	4917      	ldr	r1, [pc, #92]	; (23a94 <hif_isr+0x4a8>)
   23a36:	4b18      	ldr	r3, [pc, #96]	; (23a98 <hif_isr+0x4ac>)
   23a38:	0018      	movs	r0, r3
   23a3a:	4b18      	ldr	r3, [pc, #96]	; (23a9c <hif_isr+0x4b0>)
   23a3c:	4798      	blx	r3
   23a3e:	68ba      	ldr	r2, [r7, #8]
   23a40:	4b1d      	ldr	r3, [pc, #116]	; (23ab8 <hif_isr+0x4cc>)
   23a42:	0011      	movs	r1, r2
   23a44:	0018      	movs	r0, r3
   23a46:	4b15      	ldr	r3, [pc, #84]	; (23a9c <hif_isr+0x4b0>)
   23a48:	4798      	blx	r3
   23a4a:	4b16      	ldr	r3, [pc, #88]	; (23aa4 <hif_isr+0x4b8>)
   23a4c:	0018      	movs	r0, r3
   23a4e:	4b13      	ldr	r3, [pc, #76]	; (23a9c <hif_isr+0x4b0>)
   23a50:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   23a52:	230f      	movs	r3, #15
   23a54:	18fb      	adds	r3, r7, r3
   23a56:	22f4      	movs	r2, #244	; 0xf4
   23a58:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   23a5a:	e00f      	b.n	23a7c <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   23a5c:	4a17      	ldr	r2, [pc, #92]	; (23abc <hif_isr+0x4d0>)
   23a5e:	490d      	ldr	r1, [pc, #52]	; (23a94 <hif_isr+0x4a8>)
   23a60:	4b0d      	ldr	r3, [pc, #52]	; (23a98 <hif_isr+0x4ac>)
   23a62:	0018      	movs	r0, r3
   23a64:	4b0d      	ldr	r3, [pc, #52]	; (23a9c <hif_isr+0x4b0>)
   23a66:	4798      	blx	r3
   23a68:	4b15      	ldr	r3, [pc, #84]	; (23ac0 <hif_isr+0x4d4>)
   23a6a:	0018      	movs	r0, r3
   23a6c:	4b0b      	ldr	r3, [pc, #44]	; (23a9c <hif_isr+0x4b0>)
   23a6e:	4798      	blx	r3
   23a70:	4b0c      	ldr	r3, [pc, #48]	; (23aa4 <hif_isr+0x4b8>)
   23a72:	0018      	movs	r0, r3
   23a74:	4b09      	ldr	r3, [pc, #36]	; (23a9c <hif_isr+0x4b0>)
   23a76:	4798      	blx	r3
		goto ERR1;
   23a78:	e000      	b.n	23a7c <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   23a7a:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   23a7c:	230f      	movs	r3, #15
   23a7e:	18fb      	adds	r3, r7, r3
   23a80:	781b      	ldrb	r3, [r3, #0]
   23a82:	b25b      	sxtb	r3, r3
}
   23a84:	0018      	movs	r0, r3
   23a86:	46bd      	mov	sp, r7
   23a88:	b005      	add	sp, #20
   23a8a:	bd90      	pop	{r4, r7, pc}
   23a8c:	20005950 	.word	0x20005950
   23a90:	00000216 	.word	0x00000216
   23a94:	0003b970 	.word	0x0003b970
   23a98:	0003b660 	.word	0x0003b660
   23a9c:	00020329 	.word	0x00020329
   23aa0:	0003b7dc 	.word	0x0003b7dc
   23aa4:	0003b65c 	.word	0x0003b65c
   23aa8:	00023081 	.word	0x00023081
   23aac:	0000021d 	.word	0x0000021d
   23ab0:	0003b808 	.word	0x0003b808
   23ab4:	00000225 	.word	0x00000225
   23ab8:	0003b81c 	.word	0x0003b81c
   23abc:	0000022e 	.word	0x0000022e
   23ac0:	0003b838 	.word	0x0003b838

00023ac4 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   23ac4:	b590      	push	{r4, r7, lr}
   23ac6:	b083      	sub	sp, #12
   23ac8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   23aca:	1dfb      	adds	r3, r7, #7
   23acc:	2200      	movs	r2, #0
   23ace:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   23ad0:	4b1c      	ldr	r3, [pc, #112]	; (23b44 <hif_handle_isr+0x80>)
   23ad2:	2200      	movs	r2, #0
   23ad4:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   23ad6:	e024      	b.n	23b22 <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   23ad8:	4b1a      	ldr	r3, [pc, #104]	; (23b44 <hif_handle_isr+0x80>)
   23ada:	78db      	ldrb	r3, [r3, #3]
   23adc:	b2db      	uxtb	r3, r3
   23ade:	3b01      	subs	r3, #1
   23ae0:	b2da      	uxtb	r2, r3
   23ae2:	4b18      	ldr	r3, [pc, #96]	; (23b44 <hif_handle_isr+0x80>)
   23ae4:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   23ae6:	1dfc      	adds	r4, r7, #7
   23ae8:	4b17      	ldr	r3, [pc, #92]	; (23b48 <hif_handle_isr+0x84>)
   23aea:	4798      	blx	r3
   23aec:	0003      	movs	r3, r0
   23aee:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   23af0:	1dfb      	adds	r3, r7, #7
   23af2:	781b      	ldrb	r3, [r3, #0]
   23af4:	b25b      	sxtb	r3, r3
   23af6:	2b00      	cmp	r3, #0
   23af8:	d100      	bne.n	23afc <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   23afa:	e012      	b.n	23b22 <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   23afc:	4a13      	ldr	r2, [pc, #76]	; (23b4c <hif_handle_isr+0x88>)
   23afe:	4914      	ldr	r1, [pc, #80]	; (23b50 <hif_handle_isr+0x8c>)
   23b00:	4b14      	ldr	r3, [pc, #80]	; (23b54 <hif_handle_isr+0x90>)
   23b02:	0018      	movs	r0, r3
   23b04:	4b14      	ldr	r3, [pc, #80]	; (23b58 <hif_handle_isr+0x94>)
   23b06:	4798      	blx	r3
   23b08:	1dfb      	adds	r3, r7, #7
   23b0a:	2200      	movs	r2, #0
   23b0c:	569a      	ldrsb	r2, [r3, r2]
   23b0e:	4b13      	ldr	r3, [pc, #76]	; (23b5c <hif_handle_isr+0x98>)
   23b10:	0011      	movs	r1, r2
   23b12:	0018      	movs	r0, r3
   23b14:	4b10      	ldr	r3, [pc, #64]	; (23b58 <hif_handle_isr+0x94>)
   23b16:	4798      	blx	r3
   23b18:	4b11      	ldr	r3, [pc, #68]	; (23b60 <hif_handle_isr+0x9c>)
   23b1a:	0018      	movs	r0, r3
   23b1c:	4b0e      	ldr	r3, [pc, #56]	; (23b58 <hif_handle_isr+0x94>)
   23b1e:	4798      	blx	r3
			ret = hif_isr();
   23b20:	e7e1      	b.n	23ae6 <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   23b22:	4b08      	ldr	r3, [pc, #32]	; (23b44 <hif_handle_isr+0x80>)
   23b24:	78db      	ldrb	r3, [r3, #3]
   23b26:	b2db      	uxtb	r3, r3
   23b28:	2b00      	cmp	r3, #0
   23b2a:	d004      	beq.n	23b36 <hif_handle_isr+0x72>
   23b2c:	4b05      	ldr	r3, [pc, #20]	; (23b44 <hif_handle_isr+0x80>)
   23b2e:	791b      	ldrb	r3, [r3, #4]
   23b30:	b2db      	uxtb	r3, r3
   23b32:	2b00      	cmp	r3, #0
   23b34:	d0d0      	beq.n	23ad8 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   23b36:	1dfb      	adds	r3, r7, #7
   23b38:	781b      	ldrb	r3, [r3, #0]
   23b3a:	b25b      	sxtb	r3, r3
}
   23b3c:	0018      	movs	r0, r3
   23b3e:	46bd      	mov	sp, r7
   23b40:	b003      	add	sp, #12
   23b42:	bd90      	pop	{r4, r7, pc}
   23b44:	20005950 	.word	0x20005950
   23b48:	000235ed 	.word	0x000235ed
   23b4c:	00000257 	.word	0x00000257
   23b50:	0003b978 	.word	0x0003b978
   23b54:	0003b660 	.word	0x0003b660
   23b58:	00020329 	.word	0x00020329
   23b5c:	0003b85c 	.word	0x0003b85c
   23b60:	0003b65c 	.word	0x0003b65c

00023b64 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   23b64:	b590      	push	{r4, r7, lr}
   23b66:	b087      	sub	sp, #28
   23b68:	af00      	add	r7, sp, #0
   23b6a:	60f8      	str	r0, [r7, #12]
   23b6c:	60b9      	str	r1, [r7, #8]
   23b6e:	0019      	movs	r1, r3
   23b70:	1dbb      	adds	r3, r7, #6
   23b72:	801a      	strh	r2, [r3, #0]
   23b74:	1d7b      	adds	r3, r7, #5
   23b76:	1c0a      	adds	r2, r1, #0
   23b78:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   23b7a:	2317      	movs	r3, #23
   23b7c:	18fb      	adds	r3, r7, r3
   23b7e:	2200      	movs	r2, #0
   23b80:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   23b82:	68fb      	ldr	r3, [r7, #12]
   23b84:	2b00      	cmp	r3, #0
   23b86:	d006      	beq.n	23b96 <hif_receive+0x32>
   23b88:	68bb      	ldr	r3, [r7, #8]
   23b8a:	2b00      	cmp	r3, #0
   23b8c:	d003      	beq.n	23b96 <hif_receive+0x32>
   23b8e:	1dbb      	adds	r3, r7, #6
   23b90:	881b      	ldrh	r3, [r3, #0]
   23b92:	2b00      	cmp	r3, #0
   23b94:	d11e      	bne.n	23bd4 <hif_receive+0x70>
	{
		if(isDone)
   23b96:	1d7b      	adds	r3, r7, #5
   23b98:	781b      	ldrb	r3, [r3, #0]
   23b9a:	2b00      	cmp	r3, #0
   23b9c:	d006      	beq.n	23bac <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   23b9e:	2317      	movs	r3, #23
   23ba0:	18fc      	adds	r4, r7, r3
   23ba2:	4b45      	ldr	r3, [pc, #276]	; (23cb8 <hif_receive+0x154>)
   23ba4:	4798      	blx	r3
   23ba6:	0003      	movs	r3, r0
   23ba8:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   23baa:	e07c      	b.n	23ca6 <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   23bac:	2317      	movs	r3, #23
   23bae:	18fb      	adds	r3, r7, r3
   23bb0:	22f4      	movs	r2, #244	; 0xf4
   23bb2:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   23bb4:	239e      	movs	r3, #158	; 0x9e
   23bb6:	009a      	lsls	r2, r3, #2
   23bb8:	4940      	ldr	r1, [pc, #256]	; (23cbc <hif_receive+0x158>)
   23bba:	4b41      	ldr	r3, [pc, #260]	; (23cc0 <hif_receive+0x15c>)
   23bbc:	0018      	movs	r0, r3
   23bbe:	4b41      	ldr	r3, [pc, #260]	; (23cc4 <hif_receive+0x160>)
   23bc0:	4798      	blx	r3
   23bc2:	4b41      	ldr	r3, [pc, #260]	; (23cc8 <hif_receive+0x164>)
   23bc4:	0018      	movs	r0, r3
   23bc6:	4b3f      	ldr	r3, [pc, #252]	; (23cc4 <hif_receive+0x160>)
   23bc8:	4798      	blx	r3
   23bca:	4b40      	ldr	r3, [pc, #256]	; (23ccc <hif_receive+0x168>)
   23bcc:	0018      	movs	r0, r3
   23bce:	4b3d      	ldr	r3, [pc, #244]	; (23cc4 <hif_receive+0x160>)
   23bd0:	4798      	blx	r3
		goto ERR1;
   23bd2:	e068      	b.n	23ca6 <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   23bd4:	1dbb      	adds	r3, r7, #6
   23bd6:	881a      	ldrh	r2, [r3, #0]
   23bd8:	4b3d      	ldr	r3, [pc, #244]	; (23cd0 <hif_receive+0x16c>)
   23bda:	68db      	ldr	r3, [r3, #12]
   23bdc:	429a      	cmp	r2, r3
   23bde:	d917      	bls.n	23c10 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   23be0:	2317      	movs	r3, #23
   23be2:	18fb      	adds	r3, r7, r3
   23be4:	22f4      	movs	r2, #244	; 0xf4
   23be6:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   23be8:	23a0      	movs	r3, #160	; 0xa0
   23bea:	009a      	lsls	r2, r3, #2
   23bec:	4933      	ldr	r1, [pc, #204]	; (23cbc <hif_receive+0x158>)
   23bee:	4b34      	ldr	r3, [pc, #208]	; (23cc0 <hif_receive+0x15c>)
   23bf0:	0018      	movs	r0, r3
   23bf2:	4b34      	ldr	r3, [pc, #208]	; (23cc4 <hif_receive+0x160>)
   23bf4:	4798      	blx	r3
   23bf6:	1dbb      	adds	r3, r7, #6
   23bf8:	8819      	ldrh	r1, [r3, #0]
   23bfa:	4b35      	ldr	r3, [pc, #212]	; (23cd0 <hif_receive+0x16c>)
   23bfc:	68da      	ldr	r2, [r3, #12]
   23bfe:	4b35      	ldr	r3, [pc, #212]	; (23cd4 <hif_receive+0x170>)
   23c00:	0018      	movs	r0, r3
   23c02:	4b30      	ldr	r3, [pc, #192]	; (23cc4 <hif_receive+0x160>)
   23c04:	4798      	blx	r3
   23c06:	4b31      	ldr	r3, [pc, #196]	; (23ccc <hif_receive+0x168>)
   23c08:	0018      	movs	r0, r3
   23c0a:	4b2e      	ldr	r3, [pc, #184]	; (23cc4 <hif_receive+0x160>)
   23c0c:	4798      	blx	r3
		goto ERR1;
   23c0e:	e04a      	b.n	23ca6 <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   23c10:	4b2f      	ldr	r3, [pc, #188]	; (23cd0 <hif_receive+0x16c>)
   23c12:	689a      	ldr	r2, [r3, #8]
   23c14:	68fb      	ldr	r3, [r7, #12]
   23c16:	429a      	cmp	r2, r3
   23c18:	d80a      	bhi.n	23c30 <hif_receive+0xcc>
   23c1a:	1dbb      	adds	r3, r7, #6
   23c1c:	881a      	ldrh	r2, [r3, #0]
   23c1e:	68fb      	ldr	r3, [r7, #12]
   23c20:	18d2      	adds	r2, r2, r3
   23c22:	4b2b      	ldr	r3, [pc, #172]	; (23cd0 <hif_receive+0x16c>)
   23c24:	6899      	ldr	r1, [r3, #8]
   23c26:	4b2a      	ldr	r3, [pc, #168]	; (23cd0 <hif_receive+0x16c>)
   23c28:	68db      	ldr	r3, [r3, #12]
   23c2a:	18cb      	adds	r3, r1, r3
   23c2c:	429a      	cmp	r2, r3
   23c2e:	d912      	bls.n	23c56 <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   23c30:	2317      	movs	r3, #23
   23c32:	18fb      	adds	r3, r7, r3
   23c34:	22f4      	movs	r2, #244	; 0xf4
   23c36:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   23c38:	4a27      	ldr	r2, [pc, #156]	; (23cd8 <hif_receive+0x174>)
   23c3a:	4920      	ldr	r1, [pc, #128]	; (23cbc <hif_receive+0x158>)
   23c3c:	4b20      	ldr	r3, [pc, #128]	; (23cc0 <hif_receive+0x15c>)
   23c3e:	0018      	movs	r0, r3
   23c40:	4b20      	ldr	r3, [pc, #128]	; (23cc4 <hif_receive+0x160>)
   23c42:	4798      	blx	r3
   23c44:	4b25      	ldr	r3, [pc, #148]	; (23cdc <hif_receive+0x178>)
   23c46:	0018      	movs	r0, r3
   23c48:	4b1e      	ldr	r3, [pc, #120]	; (23cc4 <hif_receive+0x160>)
   23c4a:	4798      	blx	r3
   23c4c:	4b1f      	ldr	r3, [pc, #124]	; (23ccc <hif_receive+0x168>)
   23c4e:	0018      	movs	r0, r3
   23c50:	4b1c      	ldr	r3, [pc, #112]	; (23cc4 <hif_receive+0x160>)
   23c52:	4798      	blx	r3
		goto ERR1;
   23c54:	e027      	b.n	23ca6 <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   23c56:	1dbb      	adds	r3, r7, #6
   23c58:	881a      	ldrh	r2, [r3, #0]
   23c5a:	2317      	movs	r3, #23
   23c5c:	18fc      	adds	r4, r7, r3
   23c5e:	68b9      	ldr	r1, [r7, #8]
   23c60:	68fb      	ldr	r3, [r7, #12]
   23c62:	0018      	movs	r0, r3
   23c64:	4b1e      	ldr	r3, [pc, #120]	; (23ce0 <hif_receive+0x17c>)
   23c66:	4798      	blx	r3
   23c68:	0003      	movs	r3, r0
   23c6a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   23c6c:	2317      	movs	r3, #23
   23c6e:	18fb      	adds	r3, r7, r3
   23c70:	781b      	ldrb	r3, [r3, #0]
   23c72:	b25b      	sxtb	r3, r3
   23c74:	2b00      	cmp	r3, #0
   23c76:	d115      	bne.n	23ca4 <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   23c78:	4b15      	ldr	r3, [pc, #84]	; (23cd0 <hif_receive+0x16c>)
   23c7a:	689a      	ldr	r2, [r3, #8]
   23c7c:	4b14      	ldr	r3, [pc, #80]	; (23cd0 <hif_receive+0x16c>)
   23c7e:	68db      	ldr	r3, [r3, #12]
   23c80:	18d2      	adds	r2, r2, r3
   23c82:	1dbb      	adds	r3, r7, #6
   23c84:	8819      	ldrh	r1, [r3, #0]
   23c86:	68fb      	ldr	r3, [r7, #12]
   23c88:	18cb      	adds	r3, r1, r3
   23c8a:	429a      	cmp	r2, r3
   23c8c:	d003      	beq.n	23c96 <hif_receive+0x132>
   23c8e:	1d7b      	adds	r3, r7, #5
   23c90:	781b      	ldrb	r3, [r3, #0]
   23c92:	2b00      	cmp	r3, #0
   23c94:	d007      	beq.n	23ca6 <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   23c96:	2317      	movs	r3, #23
   23c98:	18fc      	adds	r4, r7, r3
   23c9a:	4b07      	ldr	r3, [pc, #28]	; (23cb8 <hif_receive+0x154>)
   23c9c:	4798      	blx	r3
   23c9e:	0003      	movs	r3, r0
   23ca0:	7023      	strb	r3, [r4, #0]
   23ca2:	e000      	b.n	23ca6 <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   23ca4:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   23ca6:	2317      	movs	r3, #23
   23ca8:	18fb      	adds	r3, r7, r3
   23caa:	781b      	ldrb	r3, [r3, #0]
   23cac:	b25b      	sxtb	r3, r3
}
   23cae:	0018      	movs	r0, r3
   23cb0:	46bd      	mov	sp, r7
   23cb2:	b007      	add	sp, #28
   23cb4:	bd90      	pop	{r4, r7, pc}
   23cb6:	46c0      	nop			; (mov r8, r8)
   23cb8:	00023081 	.word	0x00023081
   23cbc:	0003b988 	.word	0x0003b988
   23cc0:	0003b660 	.word	0x0003b660
   23cc4:	00020329 	.word	0x00020329
   23cc8:	0003b88c 	.word	0x0003b88c
   23ccc:	0003b65c 	.word	0x0003b65c
   23cd0:	20005950 	.word	0x20005950
   23cd4:	0003b8ac 	.word	0x0003b8ac
   23cd8:	00000286 	.word	0x00000286
   23cdc:	0003b8f4 	.word	0x0003b8f4
   23ce0:	000250ed 	.word	0x000250ed

00023ce4 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   23ce4:	b580      	push	{r7, lr}
   23ce6:	b084      	sub	sp, #16
   23ce8:	af00      	add	r7, sp, #0
   23cea:	0002      	movs	r2, r0
   23cec:	6039      	str	r1, [r7, #0]
   23cee:	1dfb      	adds	r3, r7, #7
   23cf0:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   23cf2:	230f      	movs	r3, #15
   23cf4:	18fb      	adds	r3, r7, r3
   23cf6:	2200      	movs	r2, #0
   23cf8:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   23cfa:	1dfb      	adds	r3, r7, #7
   23cfc:	781b      	ldrb	r3, [r3, #0]
   23cfe:	2b07      	cmp	r3, #7
   23d00:	d820      	bhi.n	23d44 <hif_register_cb+0x60>
   23d02:	009a      	lsls	r2, r3, #2
   23d04:	4b1e      	ldr	r3, [pc, #120]	; (23d80 <hif_register_cb+0x9c>)
   23d06:	18d3      	adds	r3, r2, r3
   23d08:	681b      	ldr	r3, [r3, #0]
   23d0a:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   23d0c:	4b1d      	ldr	r3, [pc, #116]	; (23d84 <hif_register_cb+0xa0>)
   23d0e:	683a      	ldr	r2, [r7, #0]
   23d10:	615a      	str	r2, [r3, #20]
			break;
   23d12:	e02d      	b.n	23d70 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   23d14:	4b1b      	ldr	r3, [pc, #108]	; (23d84 <hif_register_cb+0xa0>)
   23d16:	683a      	ldr	r2, [r7, #0]
   23d18:	611a      	str	r2, [r3, #16]
			break;
   23d1a:	e029      	b.n	23d70 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   23d1c:	4b19      	ldr	r3, [pc, #100]	; (23d84 <hif_register_cb+0xa0>)
   23d1e:	683a      	ldr	r2, [r7, #0]
   23d20:	619a      	str	r2, [r3, #24]
			break;
   23d22:	e025      	b.n	23d70 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   23d24:	4b17      	ldr	r3, [pc, #92]	; (23d84 <hif_register_cb+0xa0>)
   23d26:	683a      	ldr	r2, [r7, #0]
   23d28:	621a      	str	r2, [r3, #32]
			break;
   23d2a:	e021      	b.n	23d70 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   23d2c:	4b15      	ldr	r3, [pc, #84]	; (23d84 <hif_register_cb+0xa0>)
   23d2e:	683a      	ldr	r2, [r7, #0]
   23d30:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   23d32:	e01d      	b.n	23d70 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   23d34:	4b13      	ldr	r3, [pc, #76]	; (23d84 <hif_register_cb+0xa0>)
   23d36:	683a      	ldr	r2, [r7, #0]
   23d38:	61da      	str	r2, [r3, #28]
			break;
   23d3a:	e019      	b.n	23d70 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   23d3c:	4b11      	ldr	r3, [pc, #68]	; (23d84 <hif_register_cb+0xa0>)
   23d3e:	683a      	ldr	r2, [r7, #0]
   23d40:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   23d42:	e015      	b.n	23d70 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   23d44:	4a10      	ldr	r2, [pc, #64]	; (23d88 <hif_register_cb+0xa4>)
   23d46:	4911      	ldr	r1, [pc, #68]	; (23d8c <hif_register_cb+0xa8>)
   23d48:	4b11      	ldr	r3, [pc, #68]	; (23d90 <hif_register_cb+0xac>)
   23d4a:	0018      	movs	r0, r3
   23d4c:	4b11      	ldr	r3, [pc, #68]	; (23d94 <hif_register_cb+0xb0>)
   23d4e:	4798      	blx	r3
   23d50:	1dfb      	adds	r3, r7, #7
   23d52:	781a      	ldrb	r2, [r3, #0]
   23d54:	4b10      	ldr	r3, [pc, #64]	; (23d98 <hif_register_cb+0xb4>)
   23d56:	0011      	movs	r1, r2
   23d58:	0018      	movs	r0, r3
   23d5a:	4b0e      	ldr	r3, [pc, #56]	; (23d94 <hif_register_cb+0xb0>)
   23d5c:	4798      	blx	r3
   23d5e:	4b0f      	ldr	r3, [pc, #60]	; (23d9c <hif_register_cb+0xb8>)
   23d60:	0018      	movs	r0, r3
   23d62:	4b0c      	ldr	r3, [pc, #48]	; (23d94 <hif_register_cb+0xb0>)
   23d64:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   23d66:	230f      	movs	r3, #15
   23d68:	18fb      	adds	r3, r7, r3
   23d6a:	22f4      	movs	r2, #244	; 0xf4
   23d6c:	701a      	strb	r2, [r3, #0]
			break;
   23d6e:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   23d70:	230f      	movs	r3, #15
   23d72:	18fb      	adds	r3, r7, r3
   23d74:	781b      	ldrb	r3, [r3, #0]
   23d76:	b25b      	sxtb	r3, r3
}
   23d78:	0018      	movs	r0, r3
   23d7a:	46bd      	mov	sp, r7
   23d7c:	b004      	add	sp, #16
   23d7e:	bd80      	pop	{r7, pc}
   23d80:	0003b944 	.word	0x0003b944
   23d84:	20005950 	.word	0x20005950
   23d88:	000002be 	.word	0x000002be
   23d8c:	0003b994 	.word	0x0003b994
   23d90:	0003b660 	.word	0x0003b660
   23d94:	00020329 	.word	0x00020329
   23d98:	0003b938 	.word	0x0003b938
   23d9c:	0003b65c 	.word	0x0003b65c

00023da0 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   23da0:	b590      	push	{r4, r7, lr}
   23da2:	b0af      	sub	sp, #188	; 0xbc
   23da4:	af02      	add	r7, sp, #8
   23da6:	603a      	str	r2, [r7, #0]
   23da8:	1dfb      	adds	r3, r7, #7
   23daa:	1c02      	adds	r2, r0, #0
   23dac:	701a      	strb	r2, [r3, #0]
   23dae:	1d3b      	adds	r3, r7, #4
   23db0:	1c0a      	adds	r2, r1, #0
   23db2:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   23db4:	1dfb      	adds	r3, r7, #7
   23db6:	781b      	ldrb	r3, [r3, #0]
   23db8:	2b2c      	cmp	r3, #44	; 0x2c
   23dba:	d116      	bne.n	23dea <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   23dbc:	23a4      	movs	r3, #164	; 0xa4
   23dbe:	18f9      	adds	r1, r7, r3
   23dc0:	6838      	ldr	r0, [r7, #0]
   23dc2:	2300      	movs	r3, #0
   23dc4:	2204      	movs	r2, #4
   23dc6:	4cca      	ldr	r4, [pc, #808]	; (240f0 <m2m_wifi_cb+0x350>)
   23dc8:	47a0      	blx	r4
   23dca:	1e03      	subs	r3, r0, #0
   23dcc:	d000      	beq.n	23dd0 <m2m_wifi_cb+0x30>
   23dce:	e1b4      	b.n	2413a <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   23dd0:	4bc8      	ldr	r3, [pc, #800]	; (240f4 <m2m_wifi_cb+0x354>)
   23dd2:	681b      	ldr	r3, [r3, #0]
   23dd4:	2b00      	cmp	r3, #0
   23dd6:	d100      	bne.n	23dda <m2m_wifi_cb+0x3a>
   23dd8:	e1af      	b.n	2413a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   23dda:	4bc6      	ldr	r3, [pc, #792]	; (240f4 <m2m_wifi_cb+0x354>)
   23ddc:	681b      	ldr	r3, [r3, #0]
   23dde:	22a4      	movs	r2, #164	; 0xa4
   23de0:	18ba      	adds	r2, r7, r2
   23de2:	0011      	movs	r1, r2
   23de4:	202c      	movs	r0, #44	; 0x2c
   23de6:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   23de8:	e1a7      	b.n	2413a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   23dea:	1dfb      	adds	r3, r7, #7
   23dec:	781b      	ldrb	r3, [r3, #0]
   23dee:	2b1b      	cmp	r3, #27
   23df0:	d116      	bne.n	23e20 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   23df2:	239c      	movs	r3, #156	; 0x9c
   23df4:	18f9      	adds	r1, r7, r3
   23df6:	6838      	ldr	r0, [r7, #0]
   23df8:	2300      	movs	r3, #0
   23dfa:	2208      	movs	r2, #8
   23dfc:	4cbc      	ldr	r4, [pc, #752]	; (240f0 <m2m_wifi_cb+0x350>)
   23dfe:	47a0      	blx	r4
   23e00:	1e03      	subs	r3, r0, #0
   23e02:	d000      	beq.n	23e06 <m2m_wifi_cb+0x66>
   23e04:	e199      	b.n	2413a <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   23e06:	4bbb      	ldr	r3, [pc, #748]	; (240f4 <m2m_wifi_cb+0x354>)
   23e08:	681b      	ldr	r3, [r3, #0]
   23e0a:	2b00      	cmp	r3, #0
   23e0c:	d100      	bne.n	23e10 <m2m_wifi_cb+0x70>
   23e0e:	e194      	b.n	2413a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   23e10:	4bb8      	ldr	r3, [pc, #736]	; (240f4 <m2m_wifi_cb+0x354>)
   23e12:	681b      	ldr	r3, [r3, #0]
   23e14:	229c      	movs	r2, #156	; 0x9c
   23e16:	18ba      	adds	r2, r7, r2
   23e18:	0011      	movs	r1, r2
   23e1a:	201b      	movs	r0, #27
   23e1c:	4798      	blx	r3
}
   23e1e:	e18c      	b.n	2413a <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   23e20:	1dfb      	adds	r3, r7, #7
   23e22:	781b      	ldrb	r3, [r3, #0]
   23e24:	2b06      	cmp	r3, #6
   23e26:	d116      	bne.n	23e56 <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   23e28:	230c      	movs	r3, #12
   23e2a:	18f9      	adds	r1, r7, r3
   23e2c:	6838      	ldr	r0, [r7, #0]
   23e2e:	2301      	movs	r3, #1
   23e30:	2230      	movs	r2, #48	; 0x30
   23e32:	4caf      	ldr	r4, [pc, #700]	; (240f0 <m2m_wifi_cb+0x350>)
   23e34:	47a0      	blx	r4
   23e36:	1e03      	subs	r3, r0, #0
   23e38:	d000      	beq.n	23e3c <m2m_wifi_cb+0x9c>
   23e3a:	e17e      	b.n	2413a <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   23e3c:	4bad      	ldr	r3, [pc, #692]	; (240f4 <m2m_wifi_cb+0x354>)
   23e3e:	681b      	ldr	r3, [r3, #0]
   23e40:	2b00      	cmp	r3, #0
   23e42:	d100      	bne.n	23e46 <m2m_wifi_cb+0xa6>
   23e44:	e179      	b.n	2413a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   23e46:	4bab      	ldr	r3, [pc, #684]	; (240f4 <m2m_wifi_cb+0x354>)
   23e48:	681b      	ldr	r3, [r3, #0]
   23e4a:	220c      	movs	r2, #12
   23e4c:	18ba      	adds	r2, r7, r2
   23e4e:	0011      	movs	r1, r2
   23e50:	2006      	movs	r0, #6
   23e52:	4798      	blx	r3
}
   23e54:	e171      	b.n	2413a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   23e56:	1dfb      	adds	r3, r7, #7
   23e58:	781b      	ldrb	r3, [r3, #0]
   23e5a:	2b0e      	cmp	r3, #14
   23e5c:	d100      	bne.n	23e60 <m2m_wifi_cb+0xc0>
   23e5e:	e16c      	b.n	2413a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   23e60:	1dfb      	adds	r3, r7, #7
   23e62:	781b      	ldrb	r3, [r3, #0]
   23e64:	2b32      	cmp	r3, #50	; 0x32
   23e66:	d116      	bne.n	23e96 <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   23e68:	2384      	movs	r3, #132	; 0x84
   23e6a:	18f9      	adds	r1, r7, r3
   23e6c:	6838      	ldr	r0, [r7, #0]
   23e6e:	2300      	movs	r3, #0
   23e70:	2218      	movs	r2, #24
   23e72:	4c9f      	ldr	r4, [pc, #636]	; (240f0 <m2m_wifi_cb+0x350>)
   23e74:	47a0      	blx	r4
   23e76:	1e03      	subs	r3, r0, #0
   23e78:	d000      	beq.n	23e7c <m2m_wifi_cb+0xdc>
   23e7a:	e15e      	b.n	2413a <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   23e7c:	4b9d      	ldr	r3, [pc, #628]	; (240f4 <m2m_wifi_cb+0x354>)
   23e7e:	681b      	ldr	r3, [r3, #0]
   23e80:	2b00      	cmp	r3, #0
   23e82:	d100      	bne.n	23e86 <m2m_wifi_cb+0xe6>
   23e84:	e159      	b.n	2413a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   23e86:	4b9b      	ldr	r3, [pc, #620]	; (240f4 <m2m_wifi_cb+0x354>)
   23e88:	681b      	ldr	r3, [r3, #0]
   23e8a:	2284      	movs	r2, #132	; 0x84
   23e8c:	18ba      	adds	r2, r7, r2
   23e8e:	0011      	movs	r1, r2
   23e90:	2032      	movs	r0, #50	; 0x32
   23e92:	4798      	blx	r3
}
   23e94:	e151      	b.n	2413a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   23e96:	1dfb      	adds	r3, r7, #7
   23e98:	781b      	ldrb	r3, [r3, #0]
   23e9a:	2b2f      	cmp	r3, #47	; 0x2f
   23e9c:	d11d      	bne.n	23eda <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   23e9e:	230c      	movs	r3, #12
   23ea0:	18fb      	adds	r3, r7, r3
   23ea2:	2264      	movs	r2, #100	; 0x64
   23ea4:	2100      	movs	r1, #0
   23ea6:	0018      	movs	r0, r3
   23ea8:	4b93      	ldr	r3, [pc, #588]	; (240f8 <m2m_wifi_cb+0x358>)
   23eaa:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   23eac:	230c      	movs	r3, #12
   23eae:	18f9      	adds	r1, r7, r3
   23eb0:	6838      	ldr	r0, [r7, #0]
   23eb2:	2300      	movs	r3, #0
   23eb4:	2264      	movs	r2, #100	; 0x64
   23eb6:	4c8e      	ldr	r4, [pc, #568]	; (240f0 <m2m_wifi_cb+0x350>)
   23eb8:	47a0      	blx	r4
   23eba:	1e03      	subs	r3, r0, #0
   23ebc:	d000      	beq.n	23ec0 <m2m_wifi_cb+0x120>
   23ebe:	e13c      	b.n	2413a <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   23ec0:	4b8c      	ldr	r3, [pc, #560]	; (240f4 <m2m_wifi_cb+0x354>)
   23ec2:	681b      	ldr	r3, [r3, #0]
   23ec4:	2b00      	cmp	r3, #0
   23ec6:	d100      	bne.n	23eca <m2m_wifi_cb+0x12a>
   23ec8:	e137      	b.n	2413a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   23eca:	4b8a      	ldr	r3, [pc, #552]	; (240f4 <m2m_wifi_cb+0x354>)
   23ecc:	681b      	ldr	r3, [r3, #0]
   23ece:	220c      	movs	r2, #12
   23ed0:	18ba      	adds	r2, r7, r2
   23ed2:	0011      	movs	r1, r2
   23ed4:	202f      	movs	r0, #47	; 0x2f
   23ed6:	4798      	blx	r3
}
   23ed8:	e12f      	b.n	2413a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   23eda:	1dfb      	adds	r3, r7, #7
   23edc:	781b      	ldrb	r3, [r3, #0]
   23ede:	2b34      	cmp	r3, #52	; 0x34
   23ee0:	d137      	bne.n	23f52 <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   23ee2:	2380      	movs	r3, #128	; 0x80
   23ee4:	18f9      	adds	r1, r7, r3
   23ee6:	6838      	ldr	r0, [r7, #0]
   23ee8:	2300      	movs	r3, #0
   23eea:	2204      	movs	r2, #4
   23eec:	4c80      	ldr	r4, [pc, #512]	; (240f0 <m2m_wifi_cb+0x350>)
   23eee:	47a0      	blx	r4
   23ef0:	1e03      	subs	r3, r0, #0
   23ef2:	d000      	beq.n	23ef6 <m2m_wifi_cb+0x156>
   23ef4:	e121      	b.n	2413a <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   23ef6:	4b81      	ldr	r3, [pc, #516]	; (240fc <m2m_wifi_cb+0x35c>)
   23ef8:	0018      	movs	r0, r3
   23efa:	4b81      	ldr	r3, [pc, #516]	; (24100 <m2m_wifi_cb+0x360>)
   23efc:	4798      	blx	r3
   23efe:	2380      	movs	r3, #128	; 0x80
   23f00:	18fb      	adds	r3, r7, r3
   23f02:	681b      	ldr	r3, [r3, #0]
   23f04:	0e1b      	lsrs	r3, r3, #24
   23f06:	b2db      	uxtb	r3, r3
   23f08:	0019      	movs	r1, r3
   23f0a:	2380      	movs	r3, #128	; 0x80
   23f0c:	18fb      	adds	r3, r7, r3
   23f0e:	681b      	ldr	r3, [r3, #0]
   23f10:	0c1b      	lsrs	r3, r3, #16
   23f12:	b2db      	uxtb	r3, r3
   23f14:	001a      	movs	r2, r3
   23f16:	2380      	movs	r3, #128	; 0x80
   23f18:	18fb      	adds	r3, r7, r3
   23f1a:	681b      	ldr	r3, [r3, #0]
   23f1c:	0a1b      	lsrs	r3, r3, #8
   23f1e:	b2db      	uxtb	r3, r3
   23f20:	001c      	movs	r4, r3
   23f22:	2380      	movs	r3, #128	; 0x80
   23f24:	18fb      	adds	r3, r7, r3
   23f26:	681b      	ldr	r3, [r3, #0]
   23f28:	b2db      	uxtb	r3, r3
   23f2a:	4876      	ldr	r0, [pc, #472]	; (24104 <m2m_wifi_cb+0x364>)
   23f2c:	9300      	str	r3, [sp, #0]
   23f2e:	0023      	movs	r3, r4
   23f30:	4c73      	ldr	r4, [pc, #460]	; (24100 <m2m_wifi_cb+0x360>)
   23f32:	47a0      	blx	r4
   23f34:	4b74      	ldr	r3, [pc, #464]	; (24108 <m2m_wifi_cb+0x368>)
   23f36:	0018      	movs	r0, r3
   23f38:	4b71      	ldr	r3, [pc, #452]	; (24100 <m2m_wifi_cb+0x360>)
   23f3a:	4798      	blx	r3
			if (gpfAppWifiCb)
   23f3c:	4b6d      	ldr	r3, [pc, #436]	; (240f4 <m2m_wifi_cb+0x354>)
   23f3e:	681b      	ldr	r3, [r3, #0]
   23f40:	2b00      	cmp	r3, #0
   23f42:	d100      	bne.n	23f46 <m2m_wifi_cb+0x1a6>
   23f44:	e0f9      	b.n	2413a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   23f46:	4b6b      	ldr	r3, [pc, #428]	; (240f4 <m2m_wifi_cb+0x354>)
   23f48:	681b      	ldr	r3, [r3, #0]
   23f4a:	2100      	movs	r1, #0
   23f4c:	2034      	movs	r0, #52	; 0x34
   23f4e:	4798      	blx	r3
}
   23f50:	e0f3      	b.n	2413a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   23f52:	1dfb      	adds	r3, r7, #7
   23f54:	781b      	ldrb	r3, [r3, #0]
   23f56:	2b11      	cmp	r3, #17
   23f58:	d11e      	bne.n	23f98 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   23f5a:	4b6c      	ldr	r3, [pc, #432]	; (2410c <m2m_wifi_cb+0x36c>)
   23f5c:	2200      	movs	r2, #0
   23f5e:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   23f60:	237c      	movs	r3, #124	; 0x7c
   23f62:	18f9      	adds	r1, r7, r3
   23f64:	6838      	ldr	r0, [r7, #0]
   23f66:	2300      	movs	r3, #0
   23f68:	2204      	movs	r2, #4
   23f6a:	4c61      	ldr	r4, [pc, #388]	; (240f0 <m2m_wifi_cb+0x350>)
   23f6c:	47a0      	blx	r4
   23f6e:	1e03      	subs	r3, r0, #0
   23f70:	d000      	beq.n	23f74 <m2m_wifi_cb+0x1d4>
   23f72:	e0e2      	b.n	2413a <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   23f74:	237c      	movs	r3, #124	; 0x7c
   23f76:	18fb      	adds	r3, r7, r3
   23f78:	781a      	ldrb	r2, [r3, #0]
   23f7a:	4b65      	ldr	r3, [pc, #404]	; (24110 <m2m_wifi_cb+0x370>)
   23f7c:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   23f7e:	4b5d      	ldr	r3, [pc, #372]	; (240f4 <m2m_wifi_cb+0x354>)
   23f80:	681b      	ldr	r3, [r3, #0]
   23f82:	2b00      	cmp	r3, #0
   23f84:	d100      	bne.n	23f88 <m2m_wifi_cb+0x1e8>
   23f86:	e0d8      	b.n	2413a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   23f88:	4b5a      	ldr	r3, [pc, #360]	; (240f4 <m2m_wifi_cb+0x354>)
   23f8a:	681b      	ldr	r3, [r3, #0]
   23f8c:	227c      	movs	r2, #124	; 0x7c
   23f8e:	18ba      	adds	r2, r7, r2
   23f90:	0011      	movs	r1, r2
   23f92:	2011      	movs	r0, #17
   23f94:	4798      	blx	r3
}
   23f96:	e0d0      	b.n	2413a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   23f98:	1dfb      	adds	r3, r7, #7
   23f9a:	781b      	ldrb	r3, [r3, #0]
   23f9c:	2b13      	cmp	r3, #19
   23f9e:	d116      	bne.n	23fce <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   23fa0:	230c      	movs	r3, #12
   23fa2:	18f9      	adds	r1, r7, r3
   23fa4:	6838      	ldr	r0, [r7, #0]
   23fa6:	2300      	movs	r3, #0
   23fa8:	222c      	movs	r2, #44	; 0x2c
   23faa:	4c51      	ldr	r4, [pc, #324]	; (240f0 <m2m_wifi_cb+0x350>)
   23fac:	47a0      	blx	r4
   23fae:	1e03      	subs	r3, r0, #0
   23fb0:	d000      	beq.n	23fb4 <m2m_wifi_cb+0x214>
   23fb2:	e0c2      	b.n	2413a <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   23fb4:	4b4f      	ldr	r3, [pc, #316]	; (240f4 <m2m_wifi_cb+0x354>)
   23fb6:	681b      	ldr	r3, [r3, #0]
   23fb8:	2b00      	cmp	r3, #0
   23fba:	d100      	bne.n	23fbe <m2m_wifi_cb+0x21e>
   23fbc:	e0bd      	b.n	2413a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   23fbe:	4b4d      	ldr	r3, [pc, #308]	; (240f4 <m2m_wifi_cb+0x354>)
   23fc0:	681b      	ldr	r3, [r3, #0]
   23fc2:	220c      	movs	r2, #12
   23fc4:	18ba      	adds	r2, r7, r2
   23fc6:	0011      	movs	r1, r2
   23fc8:	2013      	movs	r0, #19
   23fca:	4798      	blx	r3
}
   23fcc:	e0b5      	b.n	2413a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   23fce:	1dfb      	adds	r3, r7, #7
   23fd0:	781b      	ldrb	r3, [r3, #0]
   23fd2:	2b04      	cmp	r3, #4
   23fd4:	d116      	bne.n	24004 <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   23fd6:	23a8      	movs	r3, #168	; 0xa8
   23fd8:	18f9      	adds	r1, r7, r3
   23fda:	6838      	ldr	r0, [r7, #0]
   23fdc:	2300      	movs	r3, #0
   23fde:	2204      	movs	r2, #4
   23fe0:	4c43      	ldr	r4, [pc, #268]	; (240f0 <m2m_wifi_cb+0x350>)
   23fe2:	47a0      	blx	r4
   23fe4:	1e03      	subs	r3, r0, #0
   23fe6:	d000      	beq.n	23fea <m2m_wifi_cb+0x24a>
   23fe8:	e0a7      	b.n	2413a <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   23fea:	4b42      	ldr	r3, [pc, #264]	; (240f4 <m2m_wifi_cb+0x354>)
   23fec:	681b      	ldr	r3, [r3, #0]
   23fee:	2b00      	cmp	r3, #0
   23ff0:	d100      	bne.n	23ff4 <m2m_wifi_cb+0x254>
   23ff2:	e0a2      	b.n	2413a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   23ff4:	4b3f      	ldr	r3, [pc, #252]	; (240f4 <m2m_wifi_cb+0x354>)
   23ff6:	681b      	ldr	r3, [r3, #0]
   23ff8:	22a8      	movs	r2, #168	; 0xa8
   23ffa:	18ba      	adds	r2, r7, r2
   23ffc:	0011      	movs	r1, r2
   23ffe:	2004      	movs	r0, #4
   24000:	4798      	blx	r3
}
   24002:	e09a      	b.n	2413a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   24004:	1dfb      	adds	r3, r7, #7
   24006:	781b      	ldrb	r3, [r3, #0]
   24008:	2b65      	cmp	r3, #101	; 0x65
   2400a:	d116      	bne.n	2403a <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   2400c:	23a8      	movs	r3, #168	; 0xa8
   2400e:	18f9      	adds	r1, r7, r3
   24010:	6838      	ldr	r0, [r7, #0]
   24012:	2300      	movs	r3, #0
   24014:	2204      	movs	r2, #4
   24016:	4c36      	ldr	r4, [pc, #216]	; (240f0 <m2m_wifi_cb+0x350>)
   24018:	47a0      	blx	r4
   2401a:	1e03      	subs	r3, r0, #0
   2401c:	d000      	beq.n	24020 <m2m_wifi_cb+0x280>
   2401e:	e08c      	b.n	2413a <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   24020:	4b34      	ldr	r3, [pc, #208]	; (240f4 <m2m_wifi_cb+0x354>)
   24022:	681b      	ldr	r3, [r3, #0]
   24024:	2b00      	cmp	r3, #0
   24026:	d100      	bne.n	2402a <m2m_wifi_cb+0x28a>
   24028:	e087      	b.n	2413a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   2402a:	4b32      	ldr	r3, [pc, #200]	; (240f4 <m2m_wifi_cb+0x354>)
   2402c:	681b      	ldr	r3, [r3, #0]
   2402e:	22a8      	movs	r2, #168	; 0xa8
   24030:	18ba      	adds	r2, r7, r2
   24032:	0011      	movs	r1, r2
   24034:	2065      	movs	r0, #101	; 0x65
   24036:	4798      	blx	r3
}
   24038:	e07f      	b.n	2413a <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   2403a:	1dfb      	adds	r3, r7, #7
   2403c:	781b      	ldrb	r3, [r3, #0]
   2403e:	2b09      	cmp	r3, #9
   24040:	d116      	bne.n	24070 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   24042:	230c      	movs	r3, #12
   24044:	18f9      	adds	r1, r7, r3
   24046:	6838      	ldr	r0, [r7, #0]
   24048:	2301      	movs	r3, #1
   2404a:	2264      	movs	r2, #100	; 0x64
   2404c:	4c28      	ldr	r4, [pc, #160]	; (240f0 <m2m_wifi_cb+0x350>)
   2404e:	47a0      	blx	r4
   24050:	1e03      	subs	r3, r0, #0
   24052:	d000      	beq.n	24056 <m2m_wifi_cb+0x2b6>
   24054:	e071      	b.n	2413a <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   24056:	4b27      	ldr	r3, [pc, #156]	; (240f4 <m2m_wifi_cb+0x354>)
   24058:	681b      	ldr	r3, [r3, #0]
   2405a:	2b00      	cmp	r3, #0
   2405c:	d100      	bne.n	24060 <m2m_wifi_cb+0x2c0>
   2405e:	e06c      	b.n	2413a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   24060:	4b24      	ldr	r3, [pc, #144]	; (240f4 <m2m_wifi_cb+0x354>)
   24062:	681b      	ldr	r3, [r3, #0]
   24064:	220c      	movs	r2, #12
   24066:	18ba      	adds	r2, r7, r2
   24068:	0011      	movs	r1, r2
   2406a:	2009      	movs	r0, #9
   2406c:	4798      	blx	r3
}
   2406e:	e064      	b.n	2413a <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   24070:	1dfb      	adds	r3, r7, #7
   24072:	781b      	ldrb	r3, [r3, #0]
   24074:	2b2a      	cmp	r3, #42	; 0x2a
   24076:	d114      	bne.n	240a2 <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   24078:	2378      	movs	r3, #120	; 0x78
   2407a:	18f9      	adds	r1, r7, r3
   2407c:	6838      	ldr	r0, [r7, #0]
   2407e:	2301      	movs	r3, #1
   24080:	2204      	movs	r2, #4
   24082:	4c1b      	ldr	r4, [pc, #108]	; (240f0 <m2m_wifi_cb+0x350>)
   24084:	47a0      	blx	r4
   24086:	1e03      	subs	r3, r0, #0
   24088:	d157      	bne.n	2413a <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   2408a:	4b1a      	ldr	r3, [pc, #104]	; (240f4 <m2m_wifi_cb+0x354>)
   2408c:	681b      	ldr	r3, [r3, #0]
   2408e:	2b00      	cmp	r3, #0
   24090:	d053      	beq.n	2413a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   24092:	4b18      	ldr	r3, [pc, #96]	; (240f4 <m2m_wifi_cb+0x354>)
   24094:	681b      	ldr	r3, [r3, #0]
   24096:	2278      	movs	r2, #120	; 0x78
   24098:	18ba      	adds	r2, r7, r2
   2409a:	0011      	movs	r1, r2
   2409c:	202a      	movs	r0, #42	; 0x2a
   2409e:	4798      	blx	r3
}
   240a0:	e04b      	b.n	2413a <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   240a2:	1dfb      	adds	r3, r7, #7
   240a4:	781b      	ldrb	r3, [r3, #0]
   240a6:	2b20      	cmp	r3, #32
   240a8:	d134      	bne.n	24114 <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   240aa:	2370      	movs	r3, #112	; 0x70
   240ac:	18f9      	adds	r1, r7, r3
   240ae:	6838      	ldr	r0, [r7, #0]
   240b0:	2300      	movs	r3, #0
   240b2:	2208      	movs	r2, #8
   240b4:	4c0e      	ldr	r4, [pc, #56]	; (240f0 <m2m_wifi_cb+0x350>)
   240b6:	47a0      	blx	r4
   240b8:	1e03      	subs	r3, r0, #0
   240ba:	d13e      	bne.n	2413a <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   240bc:	683b      	ldr	r3, [r7, #0]
   240be:	3308      	adds	r3, #8
   240c0:	0018      	movs	r0, r3
   240c2:	2370      	movs	r3, #112	; 0x70
   240c4:	18fb      	adds	r3, r7, r3
   240c6:	6819      	ldr	r1, [r3, #0]
   240c8:	2370      	movs	r3, #112	; 0x70
   240ca:	18fb      	adds	r3, r7, r3
   240cc:	889a      	ldrh	r2, [r3, #4]
   240ce:	2301      	movs	r3, #1
   240d0:	4c07      	ldr	r4, [pc, #28]	; (240f0 <m2m_wifi_cb+0x350>)
   240d2:	47a0      	blx	r4
   240d4:	1e03      	subs	r3, r0, #0
   240d6:	d130      	bne.n	2413a <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   240d8:	4b06      	ldr	r3, [pc, #24]	; (240f4 <m2m_wifi_cb+0x354>)
   240da:	681b      	ldr	r3, [r3, #0]
   240dc:	2b00      	cmp	r3, #0
   240de:	d02c      	beq.n	2413a <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   240e0:	4b04      	ldr	r3, [pc, #16]	; (240f4 <m2m_wifi_cb+0x354>)
   240e2:	681b      	ldr	r3, [r3, #0]
   240e4:	2270      	movs	r2, #112	; 0x70
   240e6:	18ba      	adds	r2, r7, r2
   240e8:	0011      	movs	r1, r2
   240ea:	2020      	movs	r0, #32
   240ec:	4798      	blx	r3
}
   240ee:	e024      	b.n	2413a <m2m_wifi_cb+0x39a>
   240f0:	00023b65 	.word	0x00023b65
   240f4:	2000411c 	.word	0x2000411c
   240f8:	00022fe9 	.word	0x00022fe9
   240fc:	0003b9a4 	.word	0x0003b9a4
   24100:	00020329 	.word	0x00020329
   24104:	0003b9b0 	.word	0x0003b9b0
   24108:	0003b9d0 	.word	0x0003b9d0
   2410c:	20004119 	.word	0x20004119
   24110:	20004118 	.word	0x20004118
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   24114:	2324      	movs	r3, #36	; 0x24
   24116:	33ff      	adds	r3, #255	; 0xff
   24118:	001a      	movs	r2, r3
   2411a:	490a      	ldr	r1, [pc, #40]	; (24144 <m2m_wifi_cb+0x3a4>)
   2411c:	4b0a      	ldr	r3, [pc, #40]	; (24148 <m2m_wifi_cb+0x3a8>)
   2411e:	0018      	movs	r0, r3
   24120:	4b0a      	ldr	r3, [pc, #40]	; (2414c <m2m_wifi_cb+0x3ac>)
   24122:	4798      	blx	r3
   24124:	1dfb      	adds	r3, r7, #7
   24126:	781a      	ldrb	r2, [r3, #0]
   24128:	4b09      	ldr	r3, [pc, #36]	; (24150 <m2m_wifi_cb+0x3b0>)
   2412a:	0011      	movs	r1, r2
   2412c:	0018      	movs	r0, r3
   2412e:	4b07      	ldr	r3, [pc, #28]	; (2414c <m2m_wifi_cb+0x3ac>)
   24130:	4798      	blx	r3
   24132:	4b08      	ldr	r3, [pc, #32]	; (24154 <m2m_wifi_cb+0x3b4>)
   24134:	0018      	movs	r0, r3
   24136:	4b05      	ldr	r3, [pc, #20]	; (2414c <m2m_wifi_cb+0x3ac>)
   24138:	4798      	blx	r3
}
   2413a:	46c0      	nop			; (mov r8, r8)
   2413c:	46bd      	mov	sp, r7
   2413e:	b02d      	add	sp, #180	; 0xb4
   24140:	bd90      	pop	{r4, r7, pc}
   24142:	46c0      	nop			; (mov r8, r8)
   24144:	0003bd70 	.word	0x0003bd70
   24148:	0003b9d4 	.word	0x0003b9d4
   2414c:	00020329 	.word	0x00020329
   24150:	0003b9e8 	.word	0x0003b9e8
   24154:	0003b9d0 	.word	0x0003b9d0

00024158 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   24158:	b590      	push	{r4, r7, lr}
   2415a:	b091      	sub	sp, #68	; 0x44
   2415c:	af02      	add	r7, sp, #8
   2415e:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   24160:	2337      	movs	r3, #55	; 0x37
   24162:	18fb      	adds	r3, r7, r3
   24164:	2200      	movs	r2, #0
   24166:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   24168:	230b      	movs	r3, #11
   2416a:	18fb      	adds	r3, r7, r3
   2416c:	2201      	movs	r2, #1
   2416e:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   24170:	687b      	ldr	r3, [r7, #4]
   24172:	2b00      	cmp	r3, #0
   24174:	d104      	bne.n	24180 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   24176:	2337      	movs	r3, #55	; 0x37
   24178:	18fb      	adds	r3, r7, r3
   2417a:	22f4      	movs	r2, #244	; 0xf4
   2417c:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   2417e:	e0b3      	b.n	242e8 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   24180:	687b      	ldr	r3, [r7, #4]
   24182:	681a      	ldr	r2, [r3, #0]
   24184:	4b5c      	ldr	r3, [pc, #368]	; (242f8 <m2m_wifi_init+0x1a0>)
   24186:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   24188:	4b5c      	ldr	r3, [pc, #368]	; (242fc <m2m_wifi_init+0x1a4>)
   2418a:	2200      	movs	r2, #0
   2418c:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   2418e:	2337      	movs	r3, #55	; 0x37
   24190:	18fc      	adds	r4, r7, r3
   24192:	230b      	movs	r3, #11
   24194:	18fb      	adds	r3, r7, r3
   24196:	0018      	movs	r0, r3
   24198:	4b59      	ldr	r3, [pc, #356]	; (24300 <m2m_wifi_init+0x1a8>)
   2419a:	4798      	blx	r3
   2419c:	0003      	movs	r3, r0
   2419e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   241a0:	2337      	movs	r3, #55	; 0x37
   241a2:	18fb      	adds	r3, r7, r3
   241a4:	781b      	ldrb	r3, [r3, #0]
   241a6:	b25b      	sxtb	r3, r3
   241a8:	2b00      	cmp	r3, #0
   241aa:	d000      	beq.n	241ae <m2m_wifi_init+0x56>
   241ac:	e099      	b.n	242e2 <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   241ae:	2337      	movs	r3, #55	; 0x37
   241b0:	18fc      	adds	r4, r7, r3
   241b2:	2000      	movs	r0, #0
   241b4:	4b53      	ldr	r3, [pc, #332]	; (24304 <m2m_wifi_init+0x1ac>)
   241b6:	4798      	blx	r3
   241b8:	0003      	movs	r3, r0
   241ba:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   241bc:	2337      	movs	r3, #55	; 0x37
   241be:	18fb      	adds	r3, r7, r3
   241c0:	781b      	ldrb	r3, [r3, #0]
   241c2:	b25b      	sxtb	r3, r3
   241c4:	2b00      	cmp	r3, #0
   241c6:	d000      	beq.n	241ca <m2m_wifi_init+0x72>
   241c8:	e086      	b.n	242d8 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   241ca:	4b4f      	ldr	r3, [pc, #316]	; (24308 <m2m_wifi_init+0x1b0>)
   241cc:	0019      	movs	r1, r3
   241ce:	2001      	movs	r0, #1
   241d0:	4b4e      	ldr	r3, [pc, #312]	; (2430c <m2m_wifi_init+0x1b4>)
   241d2:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   241d4:	2337      	movs	r3, #55	; 0x37
   241d6:	18fc      	adds	r4, r7, r3
   241d8:	230c      	movs	r3, #12
   241da:	18fb      	adds	r3, r7, r3
   241dc:	0018      	movs	r0, r3
   241de:	4b4c      	ldr	r3, [pc, #304]	; (24310 <m2m_wifi_init+0x1b8>)
   241e0:	4798      	blx	r3
   241e2:	0003      	movs	r3, r0
   241e4:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   241e6:	4b4b      	ldr	r3, [pc, #300]	; (24314 <m2m_wifi_init+0x1bc>)
   241e8:	0018      	movs	r0, r3
   241ea:	4b4b      	ldr	r3, [pc, #300]	; (24318 <m2m_wifi_init+0x1c0>)
   241ec:	4798      	blx	r3
   241ee:	230c      	movs	r3, #12
   241f0:	18fb      	adds	r3, r7, r3
   241f2:	791b      	ldrb	r3, [r3, #4]
   241f4:	0019      	movs	r1, r3
   241f6:	230c      	movs	r3, #12
   241f8:	18fb      	adds	r3, r7, r3
   241fa:	795b      	ldrb	r3, [r3, #5]
   241fc:	001a      	movs	r2, r3
   241fe:	230c      	movs	r3, #12
   24200:	18fb      	adds	r3, r7, r3
   24202:	799b      	ldrb	r3, [r3, #6]
   24204:	001c      	movs	r4, r3
   24206:	230c      	movs	r3, #12
   24208:	18fb      	adds	r3, r7, r3
   2420a:	8c1b      	ldrh	r3, [r3, #32]
   2420c:	4843      	ldr	r0, [pc, #268]	; (2431c <m2m_wifi_init+0x1c4>)
   2420e:	9300      	str	r3, [sp, #0]
   24210:	0023      	movs	r3, r4
   24212:	4c41      	ldr	r4, [pc, #260]	; (24318 <m2m_wifi_init+0x1c0>)
   24214:	47a0      	blx	r4
   24216:	4b42      	ldr	r3, [pc, #264]	; (24320 <m2m_wifi_init+0x1c8>)
   24218:	0018      	movs	r0, r3
   2421a:	4b3f      	ldr	r3, [pc, #252]	; (24318 <m2m_wifi_init+0x1c0>)
   2421c:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   2421e:	4b3d      	ldr	r3, [pc, #244]	; (24314 <m2m_wifi_init+0x1bc>)
   24220:	0018      	movs	r0, r3
   24222:	4b3d      	ldr	r3, [pc, #244]	; (24318 <m2m_wifi_init+0x1c0>)
   24224:	4798      	blx	r3
   24226:	230c      	movs	r3, #12
   24228:	18fb      	adds	r3, r7, r3
   2422a:	3316      	adds	r3, #22
   2422c:	001a      	movs	r2, r3
   2422e:	230c      	movs	r3, #12
   24230:	18fb      	adds	r3, r7, r3
   24232:	330a      	adds	r3, #10
   24234:	0019      	movs	r1, r3
   24236:	4b3b      	ldr	r3, [pc, #236]	; (24324 <m2m_wifi_init+0x1cc>)
   24238:	0018      	movs	r0, r3
   2423a:	4b37      	ldr	r3, [pc, #220]	; (24318 <m2m_wifi_init+0x1c0>)
   2423c:	4798      	blx	r3
   2423e:	4b38      	ldr	r3, [pc, #224]	; (24320 <m2m_wifi_init+0x1c8>)
   24240:	0018      	movs	r0, r3
   24242:	4b35      	ldr	r3, [pc, #212]	; (24318 <m2m_wifi_init+0x1c0>)
   24244:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   24246:	4b33      	ldr	r3, [pc, #204]	; (24314 <m2m_wifi_init+0x1bc>)
   24248:	0018      	movs	r0, r3
   2424a:	4b33      	ldr	r3, [pc, #204]	; (24318 <m2m_wifi_init+0x1c0>)
   2424c:	4798      	blx	r3
   2424e:	230c      	movs	r3, #12
   24250:	18fb      	adds	r3, r7, r3
   24252:	79db      	ldrb	r3, [r3, #7]
   24254:	0019      	movs	r1, r3
   24256:	230c      	movs	r3, #12
   24258:	18fb      	adds	r3, r7, r3
   2425a:	7a1b      	ldrb	r3, [r3, #8]
   2425c:	001a      	movs	r2, r3
   2425e:	230c      	movs	r3, #12
   24260:	18fb      	adds	r3, r7, r3
   24262:	7a5b      	ldrb	r3, [r3, #9]
   24264:	4830      	ldr	r0, [pc, #192]	; (24328 <m2m_wifi_init+0x1d0>)
   24266:	4c2c      	ldr	r4, [pc, #176]	; (24318 <m2m_wifi_init+0x1c0>)
   24268:	47a0      	blx	r4
   2426a:	4b2d      	ldr	r3, [pc, #180]	; (24320 <m2m_wifi_init+0x1c8>)
   2426c:	0018      	movs	r0, r3
   2426e:	4b2a      	ldr	r3, [pc, #168]	; (24318 <m2m_wifi_init+0x1c0>)
   24270:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   24272:	4b28      	ldr	r3, [pc, #160]	; (24314 <m2m_wifi_init+0x1bc>)
   24274:	0018      	movs	r0, r3
   24276:	4b28      	ldr	r3, [pc, #160]	; (24318 <m2m_wifi_init+0x1c0>)
   24278:	4798      	blx	r3
   2427a:	482c      	ldr	r0, [pc, #176]	; (2432c <m2m_wifi_init+0x1d4>)
   2427c:	2304      	movs	r3, #4
   2427e:	2205      	movs	r2, #5
   24280:	2113      	movs	r1, #19
   24282:	4c25      	ldr	r4, [pc, #148]	; (24318 <m2m_wifi_init+0x1c0>)
   24284:	47a0      	blx	r4
   24286:	4b26      	ldr	r3, [pc, #152]	; (24320 <m2m_wifi_init+0x1c8>)
   24288:	0018      	movs	r0, r3
   2428a:	4b23      	ldr	r3, [pc, #140]	; (24318 <m2m_wifi_init+0x1c0>)
   2428c:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   2428e:	4b21      	ldr	r3, [pc, #132]	; (24314 <m2m_wifi_init+0x1bc>)
   24290:	0018      	movs	r0, r3
   24292:	4b21      	ldr	r3, [pc, #132]	; (24318 <m2m_wifi_init+0x1c0>)
   24294:	4798      	blx	r3
   24296:	4a26      	ldr	r2, [pc, #152]	; (24330 <m2m_wifi_init+0x1d8>)
   24298:	4926      	ldr	r1, [pc, #152]	; (24334 <m2m_wifi_init+0x1dc>)
   2429a:	4b27      	ldr	r3, [pc, #156]	; (24338 <m2m_wifi_init+0x1e0>)
   2429c:	0018      	movs	r0, r3
   2429e:	4b1e      	ldr	r3, [pc, #120]	; (24318 <m2m_wifi_init+0x1c0>)
   242a0:	4798      	blx	r3
   242a2:	4b1f      	ldr	r3, [pc, #124]	; (24320 <m2m_wifi_init+0x1c8>)
   242a4:	0018      	movs	r0, r3
   242a6:	4b1c      	ldr	r3, [pc, #112]	; (24318 <m2m_wifi_init+0x1c0>)
   242a8:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   242aa:	2337      	movs	r3, #55	; 0x37
   242ac:	18fb      	adds	r3, r7, r3
   242ae:	781b      	ldrb	r3, [r3, #0]
   242b0:	b25b      	sxtb	r3, r3
   242b2:	330d      	adds	r3, #13
   242b4:	d117      	bne.n	242e6 <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   242b6:	23e8      	movs	r3, #232	; 0xe8
   242b8:	33ff      	adds	r3, #255	; 0xff
   242ba:	001a      	movs	r2, r3
   242bc:	491f      	ldr	r1, [pc, #124]	; (2433c <m2m_wifi_init+0x1e4>)
   242be:	4b20      	ldr	r3, [pc, #128]	; (24340 <m2m_wifi_init+0x1e8>)
   242c0:	0018      	movs	r0, r3
   242c2:	4b15      	ldr	r3, [pc, #84]	; (24318 <m2m_wifi_init+0x1c0>)
   242c4:	4798      	blx	r3
   242c6:	4b1f      	ldr	r3, [pc, #124]	; (24344 <m2m_wifi_init+0x1ec>)
   242c8:	0018      	movs	r0, r3
   242ca:	4b13      	ldr	r3, [pc, #76]	; (24318 <m2m_wifi_init+0x1c0>)
   242cc:	4798      	blx	r3
   242ce:	4b14      	ldr	r3, [pc, #80]	; (24320 <m2m_wifi_init+0x1c8>)
   242d0:	0018      	movs	r0, r3
   242d2:	4b11      	ldr	r3, [pc, #68]	; (24318 <m2m_wifi_init+0x1c0>)
   242d4:	4798      	blx	r3
	}

	goto _EXIT0;
   242d6:	e006      	b.n	242e6 <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   242d8:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   242da:	2000      	movs	r0, #0
   242dc:	4b1a      	ldr	r3, [pc, #104]	; (24348 <m2m_wifi_init+0x1f0>)
   242de:	4798      	blx	r3
   242e0:	e002      	b.n	242e8 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   242e2:	46c0      	nop			; (mov r8, r8)
   242e4:	e000      	b.n	242e8 <m2m_wifi_init+0x190>
	goto _EXIT0;
   242e6:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   242e8:	2337      	movs	r3, #55	; 0x37
   242ea:	18fb      	adds	r3, r7, r3
   242ec:	781b      	ldrb	r3, [r3, #0]
   242ee:	b25b      	sxtb	r3, r3
}
   242f0:	0018      	movs	r0, r3
   242f2:	46bd      	mov	sp, r7
   242f4:	b00f      	add	sp, #60	; 0x3c
   242f6:	bd90      	pop	{r4, r7, pc}
   242f8:	2000411c 	.word	0x2000411c
   242fc:	20004119 	.word	0x20004119
   24300:	0002547d 	.word	0x0002547d
   24304:	00023201 	.word	0x00023201
   24308:	00023da1 	.word	0x00023da1
   2430c:	00023ce5 	.word	0x00023ce5
   24310:	000252b1 	.word	0x000252b1
   24314:	0003b9a4 	.word	0x0003b9a4
   24318:	00020329 	.word	0x00020329
   2431c:	0003bb48 	.word	0x0003bb48
   24320:	0003b9d0 	.word	0x0003b9d0
   24324:	0003bb70 	.word	0x0003bb70
   24328:	0003bb8c 	.word	0x0003bb8c
   2432c:	0003bbb0 	.word	0x0003bbb0
   24330:	0003bbc8 	.word	0x0003bbc8
   24334:	0003bbd4 	.word	0x0003bbd4
   24338:	0003bbe0 	.word	0x0003bbe0
   2433c:	0003bd7c 	.word	0x0003bd7c
   24340:	0003b9d4 	.word	0x0003b9d4
   24344:	0003bbf8 	.word	0x0003bbf8
   24348:	0002560d 	.word	0x0002560d

0002434c <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   2434c:	b580      	push	{r7, lr}
   2434e:	b082      	sub	sp, #8
   24350:	af00      	add	r7, sp, #0
   24352:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   24354:	4b03      	ldr	r3, [pc, #12]	; (24364 <m2m_wifi_handle_events+0x18>)
   24356:	4798      	blx	r3
   24358:	0003      	movs	r3, r0
}
   2435a:	0018      	movs	r0, r3
   2435c:	46bd      	mov	sp, r7
   2435e:	b002      	add	sp, #8
   24360:	bd80      	pop	{r7, pc}
   24362:	46c0      	nop			; (mov r8, r8)
   24364:	00023ac5 	.word	0x00023ac5

00024368 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   24368:	b590      	push	{r4, r7, lr}
   2436a:	b087      	sub	sp, #28
   2436c:	af02      	add	r7, sp, #8
   2436e:	60f8      	str	r0, [r7, #12]
   24370:	0008      	movs	r0, r1
   24372:	0011      	movs	r1, r2
   24374:	607b      	str	r3, [r7, #4]
   24376:	230b      	movs	r3, #11
   24378:	18fb      	adds	r3, r7, r3
   2437a:	1c02      	adds	r2, r0, #0
   2437c:	701a      	strb	r2, [r3, #0]
   2437e:	230a      	movs	r3, #10
   24380:	18fb      	adds	r3, r7, r3
   24382:	1c0a      	adds	r2, r1, #0
   24384:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   24386:	687c      	ldr	r4, [r7, #4]
   24388:	230a      	movs	r3, #10
   2438a:	18fb      	adds	r3, r7, r3
   2438c:	781a      	ldrb	r2, [r3, #0]
   2438e:	230b      	movs	r3, #11
   24390:	18fb      	adds	r3, r7, r3
   24392:	7819      	ldrb	r1, [r3, #0]
   24394:	68f8      	ldr	r0, [r7, #12]
   24396:	2300      	movs	r3, #0
   24398:	9301      	str	r3, [sp, #4]
   2439a:	2320      	movs	r3, #32
   2439c:	18fb      	adds	r3, r7, r3
   2439e:	881b      	ldrh	r3, [r3, #0]
   243a0:	9300      	str	r3, [sp, #0]
   243a2:	0023      	movs	r3, r4
   243a4:	4c03      	ldr	r4, [pc, #12]	; (243b4 <m2m_wifi_connect+0x4c>)
   243a6:	47a0      	blx	r4
   243a8:	0003      	movs	r3, r0
}
   243aa:	0018      	movs	r0, r3
   243ac:	46bd      	mov	sp, r7
   243ae:	b005      	add	sp, #20
   243b0:	bd90      	pop	{r4, r7, pc}
   243b2:	46c0      	nop			; (mov r8, r8)
   243b4:	000243b9 	.word	0x000243b9

000243b8 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   243b8:	b5b0      	push	{r4, r5, r7, lr}
   243ba:	b0aa      	sub	sp, #168	; 0xa8
   243bc:	af04      	add	r7, sp, #16
   243be:	60f8      	str	r0, [r7, #12]
   243c0:	0008      	movs	r0, r1
   243c2:	0011      	movs	r1, r2
   243c4:	607b      	str	r3, [r7, #4]
   243c6:	230b      	movs	r3, #11
   243c8:	18fb      	adds	r3, r7, r3
   243ca:	1c02      	adds	r2, r0, #0
   243cc:	701a      	strb	r2, [r3, #0]
   243ce:	230a      	movs	r3, #10
   243d0:	18fb      	adds	r3, r7, r3
   243d2:	1c0a      	adds	r2, r1, #0
   243d4:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   243d6:	2397      	movs	r3, #151	; 0x97
   243d8:	18fb      	adds	r3, r7, r3
   243da:	2200      	movs	r2, #0
   243dc:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   243de:	230a      	movs	r3, #10
   243e0:	18fb      	adds	r3, r7, r3
   243e2:	781b      	ldrb	r3, [r3, #0]
   243e4:	2b01      	cmp	r3, #1
   243e6:	d100      	bne.n	243ea <m2m_wifi_connect_sc+0x32>
   243e8:	e085      	b.n	244f6 <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   243ea:	687b      	ldr	r3, [r7, #4]
   243ec:	2b00      	cmp	r3, #0
   243ee:	d112      	bne.n	24416 <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   243f0:	4ad8      	ldr	r2, [pc, #864]	; (24754 <m2m_wifi_connect_sc+0x39c>)
   243f2:	49d9      	ldr	r1, [pc, #868]	; (24758 <m2m_wifi_connect_sc+0x3a0>)
   243f4:	4bd9      	ldr	r3, [pc, #868]	; (2475c <m2m_wifi_connect_sc+0x3a4>)
   243f6:	0018      	movs	r0, r3
   243f8:	4bd9      	ldr	r3, [pc, #868]	; (24760 <m2m_wifi_connect_sc+0x3a8>)
   243fa:	4798      	blx	r3
   243fc:	4bd9      	ldr	r3, [pc, #868]	; (24764 <m2m_wifi_connect_sc+0x3ac>)
   243fe:	0018      	movs	r0, r3
   24400:	4bd7      	ldr	r3, [pc, #860]	; (24760 <m2m_wifi_connect_sc+0x3a8>)
   24402:	4798      	blx	r3
   24404:	4bd8      	ldr	r3, [pc, #864]	; (24768 <m2m_wifi_connect_sc+0x3b0>)
   24406:	0018      	movs	r0, r3
   24408:	4bd5      	ldr	r3, [pc, #852]	; (24760 <m2m_wifi_connect_sc+0x3a8>)
   2440a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2440c:	2397      	movs	r3, #151	; 0x97
   2440e:	18fb      	adds	r3, r7, r3
   24410:	22f4      	movs	r2, #244	; 0xf4
   24412:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   24414:	e1f9      	b.n	2480a <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   24416:	230a      	movs	r3, #10
   24418:	18fb      	adds	r3, r7, r3
   2441a:	781b      	ldrb	r3, [r3, #0]
   2441c:	2b02      	cmp	r3, #2
   2441e:	d16a      	bne.n	244f6 <m2m_wifi_connect_sc+0x13e>
   24420:	687b      	ldr	r3, [r7, #4]
   24422:	0018      	movs	r0, r3
   24424:	4bd1      	ldr	r3, [pc, #836]	; (2476c <m2m_wifi_connect_sc+0x3b4>)
   24426:	4798      	blx	r3
   24428:	0003      	movs	r3, r0
   2442a:	2b40      	cmp	r3, #64	; 0x40
   2442c:	d163      	bne.n	244f6 <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   2442e:	2396      	movs	r3, #150	; 0x96
   24430:	18fb      	adds	r3, r7, r3
   24432:	2200      	movs	r2, #0
   24434:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   24436:	687b      	ldr	r3, [r7, #4]
   24438:	2290      	movs	r2, #144	; 0x90
   2443a:	18ba      	adds	r2, r7, r2
   2443c:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   2443e:	e055      	b.n	244ec <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   24440:	2396      	movs	r3, #150	; 0x96
   24442:	18fb      	adds	r3, r7, r3
   24444:	781b      	ldrb	r3, [r3, #0]
   24446:	2290      	movs	r2, #144	; 0x90
   24448:	18ba      	adds	r2, r7, r2
   2444a:	6812      	ldr	r2, [r2, #0]
   2444c:	18d3      	adds	r3, r2, r3
   2444e:	781b      	ldrb	r3, [r3, #0]
   24450:	2b2f      	cmp	r3, #47	; 0x2f
   24452:	d931      	bls.n	244b8 <m2m_wifi_connect_sc+0x100>
   24454:	2396      	movs	r3, #150	; 0x96
   24456:	18fb      	adds	r3, r7, r3
   24458:	781b      	ldrb	r3, [r3, #0]
   2445a:	2290      	movs	r2, #144	; 0x90
   2445c:	18ba      	adds	r2, r7, r2
   2445e:	6812      	ldr	r2, [r2, #0]
   24460:	18d3      	adds	r3, r2, r3
   24462:	781b      	ldrb	r3, [r3, #0]
   24464:	2b39      	cmp	r3, #57	; 0x39
   24466:	d909      	bls.n	2447c <m2m_wifi_connect_sc+0xc4>
   24468:	2396      	movs	r3, #150	; 0x96
   2446a:	18fb      	adds	r3, r7, r3
   2446c:	781b      	ldrb	r3, [r3, #0]
   2446e:	2290      	movs	r2, #144	; 0x90
   24470:	18ba      	adds	r2, r7, r2
   24472:	6812      	ldr	r2, [r2, #0]
   24474:	18d3      	adds	r3, r2, r3
   24476:	781b      	ldrb	r3, [r3, #0]
   24478:	2b40      	cmp	r3, #64	; 0x40
   2447a:	d91d      	bls.n	244b8 <m2m_wifi_connect_sc+0x100>
   2447c:	2396      	movs	r3, #150	; 0x96
   2447e:	18fb      	adds	r3, r7, r3
   24480:	781b      	ldrb	r3, [r3, #0]
   24482:	2290      	movs	r2, #144	; 0x90
   24484:	18ba      	adds	r2, r7, r2
   24486:	6812      	ldr	r2, [r2, #0]
   24488:	18d3      	adds	r3, r2, r3
   2448a:	781b      	ldrb	r3, [r3, #0]
   2448c:	2b46      	cmp	r3, #70	; 0x46
   2448e:	d909      	bls.n	244a4 <m2m_wifi_connect_sc+0xec>
   24490:	2396      	movs	r3, #150	; 0x96
   24492:	18fb      	adds	r3, r7, r3
   24494:	781b      	ldrb	r3, [r3, #0]
   24496:	2290      	movs	r2, #144	; 0x90
   24498:	18ba      	adds	r2, r7, r2
   2449a:	6812      	ldr	r2, [r2, #0]
   2449c:	18d3      	adds	r3, r2, r3
   2449e:	781b      	ldrb	r3, [r3, #0]
   244a0:	2b60      	cmp	r3, #96	; 0x60
   244a2:	d909      	bls.n	244b8 <m2m_wifi_connect_sc+0x100>
   244a4:	2396      	movs	r3, #150	; 0x96
   244a6:	18fb      	adds	r3, r7, r3
   244a8:	781b      	ldrb	r3, [r3, #0]
   244aa:	2290      	movs	r2, #144	; 0x90
   244ac:	18ba      	adds	r2, r7, r2
   244ae:	6812      	ldr	r2, [r2, #0]
   244b0:	18d3      	adds	r3, r2, r3
   244b2:	781b      	ldrb	r3, [r3, #0]
   244b4:	2b66      	cmp	r3, #102	; 0x66
   244b6:	d912      	bls.n	244de <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   244b8:	4aad      	ldr	r2, [pc, #692]	; (24770 <m2m_wifi_connect_sc+0x3b8>)
   244ba:	49a7      	ldr	r1, [pc, #668]	; (24758 <m2m_wifi_connect_sc+0x3a0>)
   244bc:	4ba7      	ldr	r3, [pc, #668]	; (2475c <m2m_wifi_connect_sc+0x3a4>)
   244be:	0018      	movs	r0, r3
   244c0:	4ba7      	ldr	r3, [pc, #668]	; (24760 <m2m_wifi_connect_sc+0x3a8>)
   244c2:	4798      	blx	r3
   244c4:	4bab      	ldr	r3, [pc, #684]	; (24774 <m2m_wifi_connect_sc+0x3bc>)
   244c6:	0018      	movs	r0, r3
   244c8:	4ba5      	ldr	r3, [pc, #660]	; (24760 <m2m_wifi_connect_sc+0x3a8>)
   244ca:	4798      	blx	r3
   244cc:	4ba6      	ldr	r3, [pc, #664]	; (24768 <m2m_wifi_connect_sc+0x3b0>)
   244ce:	0018      	movs	r0, r3
   244d0:	4ba3      	ldr	r3, [pc, #652]	; (24760 <m2m_wifi_connect_sc+0x3a8>)
   244d2:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   244d4:	2397      	movs	r3, #151	; 0x97
   244d6:	18fb      	adds	r3, r7, r3
   244d8:	22f4      	movs	r2, #244	; 0xf4
   244da:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   244dc:	e195      	b.n	2480a <m2m_wifi_connect_sc+0x452>
				}
				i++;
   244de:	2396      	movs	r3, #150	; 0x96
   244e0:	18fb      	adds	r3, r7, r3
   244e2:	781a      	ldrb	r2, [r3, #0]
   244e4:	2396      	movs	r3, #150	; 0x96
   244e6:	18fb      	adds	r3, r7, r3
   244e8:	3201      	adds	r2, #1
   244ea:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   244ec:	2396      	movs	r3, #150	; 0x96
   244ee:	18fb      	adds	r3, r7, r3
   244f0:	781b      	ldrb	r3, [r3, #0]
   244f2:	2b3f      	cmp	r3, #63	; 0x3f
   244f4:	d9a4      	bls.n	24440 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   244f6:	230b      	movs	r3, #11
   244f8:	18fb      	adds	r3, r7, r3
   244fa:	781b      	ldrb	r3, [r3, #0]
   244fc:	2b00      	cmp	r3, #0
   244fe:	d004      	beq.n	2450a <m2m_wifi_connect_sc+0x152>
   24500:	230b      	movs	r3, #11
   24502:	18fb      	adds	r3, r7, r3
   24504:	781b      	ldrb	r3, [r3, #0]
   24506:	2b20      	cmp	r3, #32
   24508:	d913      	bls.n	24532 <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   2450a:	238c      	movs	r3, #140	; 0x8c
   2450c:	009a      	lsls	r2, r3, #2
   2450e:	4992      	ldr	r1, [pc, #584]	; (24758 <m2m_wifi_connect_sc+0x3a0>)
   24510:	4b92      	ldr	r3, [pc, #584]	; (2475c <m2m_wifi_connect_sc+0x3a4>)
   24512:	0018      	movs	r0, r3
   24514:	4b92      	ldr	r3, [pc, #584]	; (24760 <m2m_wifi_connect_sc+0x3a8>)
   24516:	4798      	blx	r3
   24518:	4b97      	ldr	r3, [pc, #604]	; (24778 <m2m_wifi_connect_sc+0x3c0>)
   2451a:	0018      	movs	r0, r3
   2451c:	4b90      	ldr	r3, [pc, #576]	; (24760 <m2m_wifi_connect_sc+0x3a8>)
   2451e:	4798      	blx	r3
   24520:	4b91      	ldr	r3, [pc, #580]	; (24768 <m2m_wifi_connect_sc+0x3b0>)
   24522:	0018      	movs	r0, r3
   24524:	4b8e      	ldr	r3, [pc, #568]	; (24760 <m2m_wifi_connect_sc+0x3a8>)
   24526:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   24528:	2397      	movs	r3, #151	; 0x97
   2452a:	18fb      	adds	r3, r7, r3
   2452c:	22f4      	movs	r2, #244	; 0xf4
   2452e:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   24530:	e16b      	b.n	2480a <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   24532:	23a8      	movs	r3, #168	; 0xa8
   24534:	18fb      	adds	r3, r7, r3
   24536:	881b      	ldrh	r3, [r3, #0]
   24538:	2b00      	cmp	r3, #0
   2453a:	d004      	beq.n	24546 <m2m_wifi_connect_sc+0x18e>
   2453c:	23a8      	movs	r3, #168	; 0xa8
   2453e:	18fb      	adds	r3, r7, r3
   24540:	881b      	ldrh	r3, [r3, #0]
   24542:	2b0e      	cmp	r3, #14
   24544:	d917      	bls.n	24576 <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   24546:	23a8      	movs	r3, #168	; 0xa8
   24548:	18fb      	adds	r3, r7, r3
   2454a:	881b      	ldrh	r3, [r3, #0]
   2454c:	2bff      	cmp	r3, #255	; 0xff
   2454e:	d012      	beq.n	24576 <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   24550:	4a8a      	ldr	r2, [pc, #552]	; (2477c <m2m_wifi_connect_sc+0x3c4>)
   24552:	4981      	ldr	r1, [pc, #516]	; (24758 <m2m_wifi_connect_sc+0x3a0>)
   24554:	4b81      	ldr	r3, [pc, #516]	; (2475c <m2m_wifi_connect_sc+0x3a4>)
   24556:	0018      	movs	r0, r3
   24558:	4b81      	ldr	r3, [pc, #516]	; (24760 <m2m_wifi_connect_sc+0x3a8>)
   2455a:	4798      	blx	r3
   2455c:	4b88      	ldr	r3, [pc, #544]	; (24780 <m2m_wifi_connect_sc+0x3c8>)
   2455e:	0018      	movs	r0, r3
   24560:	4b7f      	ldr	r3, [pc, #508]	; (24760 <m2m_wifi_connect_sc+0x3a8>)
   24562:	4798      	blx	r3
   24564:	4b80      	ldr	r3, [pc, #512]	; (24768 <m2m_wifi_connect_sc+0x3b0>)
   24566:	0018      	movs	r0, r3
   24568:	4b7d      	ldr	r3, [pc, #500]	; (24760 <m2m_wifi_connect_sc+0x3a8>)
   2456a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2456c:	2397      	movs	r3, #151	; 0x97
   2456e:	18fb      	adds	r3, r7, r3
   24570:	22f4      	movs	r2, #244	; 0xf4
   24572:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   24574:	e149      	b.n	2480a <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   24576:	230b      	movs	r3, #11
   24578:	18fb      	adds	r3, r7, r3
   2457a:	781a      	ldrb	r2, [r3, #0]
   2457c:	68f9      	ldr	r1, [r7, #12]
   2457e:	2314      	movs	r3, #20
   24580:	18fb      	adds	r3, r7, r3
   24582:	3346      	adds	r3, #70	; 0x46
   24584:	0018      	movs	r0, r3
   24586:	4b7f      	ldr	r3, [pc, #508]	; (24784 <m2m_wifi_connect_sc+0x3cc>)
   24588:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   2458a:	230b      	movs	r3, #11
   2458c:	18fb      	adds	r3, r7, r3
   2458e:	781b      	ldrb	r3, [r3, #0]
   24590:	2214      	movs	r2, #20
   24592:	18ba      	adds	r2, r7, r2
   24594:	2146      	movs	r1, #70	; 0x46
   24596:	18d3      	adds	r3, r2, r3
   24598:	185b      	adds	r3, r3, r1
   2459a:	2200      	movs	r2, #0
   2459c:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   2459e:	2314      	movs	r3, #20
   245a0:	18fb      	adds	r3, r7, r3
   245a2:	22a8      	movs	r2, #168	; 0xa8
   245a4:	18ba      	adds	r2, r7, r2
   245a6:	2144      	movs	r1, #68	; 0x44
   245a8:	8812      	ldrh	r2, [r2, #0]
   245aa:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   245ac:	23ac      	movs	r3, #172	; 0xac
   245ae:	18fb      	adds	r3, r7, r3
   245b0:	781b      	ldrb	r3, [r3, #0]
   245b2:	1e5a      	subs	r2, r3, #1
   245b4:	4193      	sbcs	r3, r2
   245b6:	b2db      	uxtb	r3, r3
   245b8:	0019      	movs	r1, r3
   245ba:	2314      	movs	r3, #20
   245bc:	18fb      	adds	r3, r7, r3
   245be:	2267      	movs	r2, #103	; 0x67
   245c0:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   245c2:	2314      	movs	r3, #20
   245c4:	18fb      	adds	r3, r7, r3
   245c6:	228c      	movs	r2, #140	; 0x8c
   245c8:	18ba      	adds	r2, r7, r2
   245ca:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   245cc:	238c      	movs	r3, #140	; 0x8c
   245ce:	18fb      	adds	r3, r7, r3
   245d0:	681b      	ldr	r3, [r3, #0]
   245d2:	220a      	movs	r2, #10
   245d4:	18ba      	adds	r2, r7, r2
   245d6:	2141      	movs	r1, #65	; 0x41
   245d8:	7812      	ldrb	r2, [r2, #0]
   245da:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   245dc:	230a      	movs	r3, #10
   245de:	18fb      	adds	r3, r7, r3
   245e0:	781b      	ldrb	r3, [r3, #0]
   245e2:	2b03      	cmp	r3, #3
   245e4:	d000      	beq.n	245e8 <m2m_wifi_connect_sc+0x230>
   245e6:	e07d      	b.n	246e4 <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   245e8:	687b      	ldr	r3, [r7, #4]
   245ea:	2288      	movs	r2, #136	; 0x88
   245ec:	18ba      	adds	r2, r7, r2
   245ee:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   245f0:	238c      	movs	r3, #140	; 0x8c
   245f2:	18fb      	adds	r3, r7, r3
   245f4:	681b      	ldr	r3, [r3, #0]
   245f6:	2284      	movs	r2, #132	; 0x84
   245f8:	18ba      	adds	r2, r7, r2
   245fa:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   245fc:	2388      	movs	r3, #136	; 0x88
   245fe:	18fb      	adds	r3, r7, r3
   24600:	681b      	ldr	r3, [r3, #0]
   24602:	781b      	ldrb	r3, [r3, #0]
   24604:	3b01      	subs	r3, #1
   24606:	b2da      	uxtb	r2, r3
   24608:	2384      	movs	r3, #132	; 0x84
   2460a:	18fb      	adds	r3, r7, r3
   2460c:	681b      	ldr	r3, [r3, #0]
   2460e:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   24610:	2384      	movs	r3, #132	; 0x84
   24612:	18fb      	adds	r3, r7, r3
   24614:	681b      	ldr	r3, [r3, #0]
   24616:	781b      	ldrb	r3, [r3, #0]
   24618:	2b03      	cmp	r3, #3
   2461a:	d919      	bls.n	24650 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   2461c:	2394      	movs	r3, #148	; 0x94
   2461e:	009a      	lsls	r2, r3, #2
   24620:	494d      	ldr	r1, [pc, #308]	; (24758 <m2m_wifi_connect_sc+0x3a0>)
   24622:	4b4e      	ldr	r3, [pc, #312]	; (2475c <m2m_wifi_connect_sc+0x3a4>)
   24624:	0018      	movs	r0, r3
   24626:	4b4e      	ldr	r3, [pc, #312]	; (24760 <m2m_wifi_connect_sc+0x3a8>)
   24628:	4798      	blx	r3
   2462a:	2384      	movs	r3, #132	; 0x84
   2462c:	18fb      	adds	r3, r7, r3
   2462e:	681b      	ldr	r3, [r3, #0]
   24630:	781b      	ldrb	r3, [r3, #0]
   24632:	001a      	movs	r2, r3
   24634:	4b54      	ldr	r3, [pc, #336]	; (24788 <m2m_wifi_connect_sc+0x3d0>)
   24636:	0011      	movs	r1, r2
   24638:	0018      	movs	r0, r3
   2463a:	4b49      	ldr	r3, [pc, #292]	; (24760 <m2m_wifi_connect_sc+0x3a8>)
   2463c:	4798      	blx	r3
   2463e:	4b4a      	ldr	r3, [pc, #296]	; (24768 <m2m_wifi_connect_sc+0x3b0>)
   24640:	0018      	movs	r0, r3
   24642:	4b47      	ldr	r3, [pc, #284]	; (24760 <m2m_wifi_connect_sc+0x3a8>)
   24644:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   24646:	2397      	movs	r3, #151	; 0x97
   24648:	18fb      	adds	r3, r7, r3
   2464a:	22f4      	movs	r2, #244	; 0xf4
   2464c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2464e:	e0dc      	b.n	2480a <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   24650:	2388      	movs	r3, #136	; 0x88
   24652:	18fb      	adds	r3, r7, r3
   24654:	681b      	ldr	r3, [r3, #0]
   24656:	785b      	ldrb	r3, [r3, #1]
   24658:	3b01      	subs	r3, #1
   2465a:	b2da      	uxtb	r2, r3
   2465c:	2384      	movs	r3, #132	; 0x84
   2465e:	18fb      	adds	r3, r7, r3
   24660:	681b      	ldr	r3, [r3, #0]
   24662:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   24664:	2384      	movs	r3, #132	; 0x84
   24666:	18fb      	adds	r3, r7, r3
   24668:	681b      	ldr	r3, [r3, #0]
   2466a:	785b      	ldrb	r3, [r3, #1]
   2466c:	2b0a      	cmp	r3, #10
   2466e:	d01e      	beq.n	246ae <m2m_wifi_connect_sc+0x2f6>
   24670:	2384      	movs	r3, #132	; 0x84
   24672:	18fb      	adds	r3, r7, r3
   24674:	681b      	ldr	r3, [r3, #0]
   24676:	785b      	ldrb	r3, [r3, #1]
   24678:	2b1a      	cmp	r3, #26
   2467a:	d018      	beq.n	246ae <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   2467c:	4a43      	ldr	r2, [pc, #268]	; (2478c <m2m_wifi_connect_sc+0x3d4>)
   2467e:	4936      	ldr	r1, [pc, #216]	; (24758 <m2m_wifi_connect_sc+0x3a0>)
   24680:	4b36      	ldr	r3, [pc, #216]	; (2475c <m2m_wifi_connect_sc+0x3a4>)
   24682:	0018      	movs	r0, r3
   24684:	4b36      	ldr	r3, [pc, #216]	; (24760 <m2m_wifi_connect_sc+0x3a8>)
   24686:	4798      	blx	r3
   24688:	2384      	movs	r3, #132	; 0x84
   2468a:	18fb      	adds	r3, r7, r3
   2468c:	681b      	ldr	r3, [r3, #0]
   2468e:	785b      	ldrb	r3, [r3, #1]
   24690:	001a      	movs	r2, r3
   24692:	4b3f      	ldr	r3, [pc, #252]	; (24790 <m2m_wifi_connect_sc+0x3d8>)
   24694:	0011      	movs	r1, r2
   24696:	0018      	movs	r0, r3
   24698:	4b31      	ldr	r3, [pc, #196]	; (24760 <m2m_wifi_connect_sc+0x3a8>)
   2469a:	4798      	blx	r3
   2469c:	4b32      	ldr	r3, [pc, #200]	; (24768 <m2m_wifi_connect_sc+0x3b0>)
   2469e:	0018      	movs	r0, r3
   246a0:	4b2f      	ldr	r3, [pc, #188]	; (24760 <m2m_wifi_connect_sc+0x3a8>)
   246a2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   246a4:	2397      	movs	r3, #151	; 0x97
   246a6:	18fb      	adds	r3, r7, r3
   246a8:	22f4      	movs	r2, #244	; 0xf4
   246aa:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   246ac:	e0ad      	b.n	2480a <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   246ae:	2384      	movs	r3, #132	; 0x84
   246b0:	18fb      	adds	r3, r7, r3
   246b2:	681b      	ldr	r3, [r3, #0]
   246b4:	1c98      	adds	r0, r3, #2
   246b6:	2388      	movs	r3, #136	; 0x88
   246b8:	18fb      	adds	r3, r7, r3
   246ba:	681b      	ldr	r3, [r3, #0]
   246bc:	1c99      	adds	r1, r3, #2
   246be:	2388      	movs	r3, #136	; 0x88
   246c0:	18fb      	adds	r3, r7, r3
   246c2:	681b      	ldr	r3, [r3, #0]
   246c4:	785b      	ldrb	r3, [r3, #1]
   246c6:	001a      	movs	r2, r3
   246c8:	4b2e      	ldr	r3, [pc, #184]	; (24784 <m2m_wifi_connect_sc+0x3cc>)
   246ca:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   246cc:	2388      	movs	r3, #136	; 0x88
   246ce:	18fb      	adds	r3, r7, r3
   246d0:	681b      	ldr	r3, [r3, #0]
   246d2:	785b      	ldrb	r3, [r3, #1]
   246d4:	001a      	movs	r2, r3
   246d6:	2384      	movs	r3, #132	; 0x84
   246d8:	18fb      	adds	r3, r7, r3
   246da:	681b      	ldr	r3, [r3, #0]
   246dc:	189b      	adds	r3, r3, r2
   246de:	2200      	movs	r2, #0
   246e0:	709a      	strb	r2, [r3, #2]
   246e2:	e081      	b.n	247e8 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   246e4:	230a      	movs	r3, #10
   246e6:	18fb      	adds	r3, r7, r3
   246e8:	781b      	ldrb	r3, [r3, #0]
   246ea:	2b02      	cmp	r3, #2
   246ec:	d156      	bne.n	2479c <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   246ee:	2382      	movs	r3, #130	; 0x82
   246f0:	18fc      	adds	r4, r7, r3
   246f2:	687b      	ldr	r3, [r7, #4]
   246f4:	0018      	movs	r0, r3
   246f6:	4b1d      	ldr	r3, [pc, #116]	; (2476c <m2m_wifi_connect_sc+0x3b4>)
   246f8:	4798      	blx	r3
   246fa:	0003      	movs	r3, r0
   246fc:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   246fe:	2382      	movs	r3, #130	; 0x82
   24700:	18fb      	adds	r3, r7, r3
   24702:	881b      	ldrh	r3, [r3, #0]
   24704:	2b00      	cmp	r3, #0
   24706:	d004      	beq.n	24712 <m2m_wifi_connect_sc+0x35a>
   24708:	2382      	movs	r3, #130	; 0x82
   2470a:	18fb      	adds	r3, r7, r3
   2470c:	881b      	ldrh	r3, [r3, #0]
   2470e:	2b40      	cmp	r3, #64	; 0x40
   24710:	d912      	bls.n	24738 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   24712:	4a20      	ldr	r2, [pc, #128]	; (24794 <m2m_wifi_connect_sc+0x3dc>)
   24714:	4910      	ldr	r1, [pc, #64]	; (24758 <m2m_wifi_connect_sc+0x3a0>)
   24716:	4b11      	ldr	r3, [pc, #68]	; (2475c <m2m_wifi_connect_sc+0x3a4>)
   24718:	0018      	movs	r0, r3
   2471a:	4b11      	ldr	r3, [pc, #68]	; (24760 <m2m_wifi_connect_sc+0x3a8>)
   2471c:	4798      	blx	r3
   2471e:	4b1e      	ldr	r3, [pc, #120]	; (24798 <m2m_wifi_connect_sc+0x3e0>)
   24720:	0018      	movs	r0, r3
   24722:	4b0f      	ldr	r3, [pc, #60]	; (24760 <m2m_wifi_connect_sc+0x3a8>)
   24724:	4798      	blx	r3
   24726:	4b10      	ldr	r3, [pc, #64]	; (24768 <m2m_wifi_connect_sc+0x3b0>)
   24728:	0018      	movs	r0, r3
   2472a:	4b0d      	ldr	r3, [pc, #52]	; (24760 <m2m_wifi_connect_sc+0x3a8>)
   2472c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2472e:	2397      	movs	r3, #151	; 0x97
   24730:	18fb      	adds	r3, r7, r3
   24732:	22f4      	movs	r2, #244	; 0xf4
   24734:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   24736:	e068      	b.n	2480a <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   24738:	238c      	movs	r3, #140	; 0x8c
   2473a:	18fb      	adds	r3, r7, r3
   2473c:	6818      	ldr	r0, [r3, #0]
   2473e:	2382      	movs	r3, #130	; 0x82
   24740:	18fb      	adds	r3, r7, r3
   24742:	881b      	ldrh	r3, [r3, #0]
   24744:	3301      	adds	r3, #1
   24746:	001a      	movs	r2, r3
   24748:	687b      	ldr	r3, [r7, #4]
   2474a:	0019      	movs	r1, r3
   2474c:	4b0d      	ldr	r3, [pc, #52]	; (24784 <m2m_wifi_connect_sc+0x3cc>)
   2474e:	4798      	blx	r3
   24750:	e04a      	b.n	247e8 <m2m_wifi_connect_sc+0x430>
   24752:	46c0      	nop			; (mov r8, r8)
   24754:	0000021a 	.word	0x0000021a
   24758:	0003bd8c 	.word	0x0003bd8c
   2475c:	0003b9d4 	.word	0x0003b9d4
   24760:	00020329 	.word	0x00020329
   24764:	0003bc14 	.word	0x0003bc14
   24768:	0003b9d0 	.word	0x0003b9d0
   2476c:	00023027 	.word	0x00023027
   24770:	00000226 	.word	0x00000226
   24774:	0003bc28 	.word	0x0003bc28
   24778:	0003bc38 	.word	0x0003bc38
   2477c:	00000239 	.word	0x00000239
   24780:	0003bc4c 	.word	0x0003bc4c
   24784:	00022fad 	.word	0x00022fad
   24788:	0003bc58 	.word	0x0003bc58
   2478c:	00000257 	.word	0x00000257
   24790:	0003bc74 	.word	0x0003bc74
   24794:	00000266 	.word	0x00000266
   24798:	0003bc90 	.word	0x0003bc90
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   2479c:	230a      	movs	r3, #10
   2479e:	18fb      	adds	r3, r7, r3
   247a0:	781b      	ldrb	r3, [r3, #0]
   247a2:	2b04      	cmp	r3, #4
   247a4:	d108      	bne.n	247b8 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   247a6:	238c      	movs	r3, #140	; 0x8c
   247a8:	18fb      	adds	r3, r7, r3
   247aa:	681b      	ldr	r3, [r3, #0]
   247ac:	6879      	ldr	r1, [r7, #4]
   247ae:	223e      	movs	r2, #62	; 0x3e
   247b0:	0018      	movs	r0, r3
   247b2:	4b1a      	ldr	r3, [pc, #104]	; (2481c <m2m_wifi_connect_sc+0x464>)
   247b4:	4798      	blx	r3
   247b6:	e017      	b.n	247e8 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   247b8:	230a      	movs	r3, #10
   247ba:	18fb      	adds	r3, r7, r3
   247bc:	781b      	ldrb	r3, [r3, #0]
   247be:	2b01      	cmp	r3, #1
   247c0:	d012      	beq.n	247e8 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   247c2:	4a17      	ldr	r2, [pc, #92]	; (24820 <m2m_wifi_connect_sc+0x468>)
   247c4:	4917      	ldr	r1, [pc, #92]	; (24824 <m2m_wifi_connect_sc+0x46c>)
   247c6:	4b18      	ldr	r3, [pc, #96]	; (24828 <m2m_wifi_connect_sc+0x470>)
   247c8:	0018      	movs	r0, r3
   247ca:	4b18      	ldr	r3, [pc, #96]	; (2482c <m2m_wifi_connect_sc+0x474>)
   247cc:	4798      	blx	r3
   247ce:	4b18      	ldr	r3, [pc, #96]	; (24830 <m2m_wifi_connect_sc+0x478>)
   247d0:	0018      	movs	r0, r3
   247d2:	4b16      	ldr	r3, [pc, #88]	; (2482c <m2m_wifi_connect_sc+0x474>)
   247d4:	4798      	blx	r3
   247d6:	4b17      	ldr	r3, [pc, #92]	; (24834 <m2m_wifi_connect_sc+0x47c>)
   247d8:	0018      	movs	r0, r3
   247da:	4b14      	ldr	r3, [pc, #80]	; (2482c <m2m_wifi_connect_sc+0x474>)
   247dc:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   247de:	2397      	movs	r3, #151	; 0x97
   247e0:	18fb      	adds	r3, r7, r3
   247e2:	22f4      	movs	r2, #244	; 0xf4
   247e4:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   247e6:	e010      	b.n	2480a <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   247e8:	2397      	movs	r3, #151	; 0x97
   247ea:	18fc      	adds	r4, r7, r3
   247ec:	2314      	movs	r3, #20
   247ee:	18fa      	adds	r2, r7, r3
   247f0:	2300      	movs	r3, #0
   247f2:	9302      	str	r3, [sp, #8]
   247f4:	2300      	movs	r3, #0
   247f6:	9301      	str	r3, [sp, #4]
   247f8:	2300      	movs	r3, #0
   247fa:	9300      	str	r3, [sp, #0]
   247fc:	236c      	movs	r3, #108	; 0x6c
   247fe:	2128      	movs	r1, #40	; 0x28
   24800:	2001      	movs	r0, #1
   24802:	4d0d      	ldr	r5, [pc, #52]	; (24838 <m2m_wifi_connect_sc+0x480>)
   24804:	47a8      	blx	r5
   24806:	0003      	movs	r3, r0
   24808:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   2480a:	2397      	movs	r3, #151	; 0x97
   2480c:	18fb      	adds	r3, r7, r3
   2480e:	781b      	ldrb	r3, [r3, #0]
   24810:	b25b      	sxtb	r3, r3
}
   24812:	0018      	movs	r0, r3
   24814:	46bd      	mov	sp, r7
   24816:	b026      	add	sp, #152	; 0x98
   24818:	bdb0      	pop	{r4, r5, r7, pc}
   2481a:	46c0      	nop			; (mov r8, r8)
   2481c:	00022fad 	.word	0x00022fad
   24820:	00000276 	.word	0x00000276
   24824:	0003bd8c 	.word	0x0003bd8c
   24828:	0003b9d4 	.word	0x0003b9d4
   2482c:	00020329 	.word	0x00020329
   24830:	0003bcac 	.word	0x0003bcac
   24834:	0003b9d0 	.word	0x0003b9d0
   24838:	00023249 	.word	0x00023249

0002483c <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   2483c:	b580      	push	{r7, lr}
   2483e:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   24840:	2300      	movs	r3, #0
}
   24842:	0018      	movs	r0, r3
   24844:	46bd      	mov	sp, r7
   24846:	bd80      	pop	{r7, pc}

00024848 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   24848:	b590      	push	{r4, r7, lr}
   2484a:	b087      	sub	sp, #28
   2484c:	af00      	add	r7, sp, #0
   2484e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   24850:	2317      	movs	r3, #23
   24852:	18fb      	adds	r3, r7, r3
   24854:	2200      	movs	r2, #0
   24856:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   24858:	687b      	ldr	r3, [r7, #4]
   2485a:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   2485c:	693b      	ldr	r3, [r7, #16]
   2485e:	2280      	movs	r2, #128	; 0x80
   24860:	0052      	lsls	r2, r2, #1
   24862:	4313      	orrs	r3, r2
   24864:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   24866:	693a      	ldr	r2, [r7, #16]
   24868:	23a5      	movs	r3, #165	; 0xa5
   2486a:	015b      	lsls	r3, r3, #5
   2486c:	0011      	movs	r1, r2
   2486e:	0018      	movs	r0, r3
   24870:	4b12      	ldr	r3, [pc, #72]	; (248bc <chip_apply_conf+0x74>)
   24872:	4798      	blx	r3
		if(val32 != 0) {		
   24874:	693b      	ldr	r3, [r7, #16]
   24876:	2b00      	cmp	r3, #0
   24878:	d018      	beq.n	248ac <chip_apply_conf+0x64>
			uint32 reg = 0;
   2487a:	2300      	movs	r3, #0
   2487c:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   2487e:	2317      	movs	r3, #23
   24880:	18fc      	adds	r4, r7, r3
   24882:	230c      	movs	r3, #12
   24884:	18fa      	adds	r2, r7, r3
   24886:	23a5      	movs	r3, #165	; 0xa5
   24888:	015b      	lsls	r3, r3, #5
   2488a:	0011      	movs	r1, r2
   2488c:	0018      	movs	r0, r3
   2488e:	4b0c      	ldr	r3, [pc, #48]	; (248c0 <chip_apply_conf+0x78>)
   24890:	4798      	blx	r3
   24892:	0003      	movs	r3, r0
   24894:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   24896:	2317      	movs	r3, #23
   24898:	18fb      	adds	r3, r7, r3
   2489a:	781b      	ldrb	r3, [r3, #0]
   2489c:	b25b      	sxtb	r3, r3
   2489e:	2b00      	cmp	r3, #0
   248a0:	d1e1      	bne.n	24866 <chip_apply_conf+0x1e>
				if(reg == val32)
   248a2:	68fa      	ldr	r2, [r7, #12]
   248a4:	693b      	ldr	r3, [r7, #16]
   248a6:	429a      	cmp	r2, r3
   248a8:	d002      	beq.n	248b0 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   248aa:	e7dc      	b.n	24866 <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   248ac:	46c0      	nop			; (mov r8, r8)
   248ae:	e000      	b.n	248b2 <chip_apply_conf+0x6a>
					break;
   248b0:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   248b2:	2300      	movs	r3, #0
}
   248b4:	0018      	movs	r0, r3
   248b6:	46bd      	mov	sp, r7
   248b8:	b007      	add	sp, #28
   248ba:	bd90      	pop	{r4, r7, pc}
   248bc:	0002509d 	.word	0x0002509d
   248c0:	00025079 	.word	0x00025079

000248c4 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   248c4:	b590      	push	{r4, r7, lr}
   248c6:	b083      	sub	sp, #12
   248c8:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   248ca:	2300      	movs	r3, #0
   248cc:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   248ce:	1dfb      	adds	r3, r7, #7
   248d0:	2200      	movs	r2, #0
   248d2:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   248d4:	1dfc      	adds	r4, r7, #7
   248d6:	003b      	movs	r3, r7
   248d8:	4a24      	ldr	r2, [pc, #144]	; (2496c <enable_interrupts+0xa8>)
   248da:	0019      	movs	r1, r3
   248dc:	0010      	movs	r0, r2
   248de:	4b24      	ldr	r3, [pc, #144]	; (24970 <enable_interrupts+0xac>)
   248e0:	4798      	blx	r3
   248e2:	0003      	movs	r3, r0
   248e4:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   248e6:	1dfb      	adds	r3, r7, #7
   248e8:	781b      	ldrb	r3, [r3, #0]
   248ea:	b25b      	sxtb	r3, r3
   248ec:	2b00      	cmp	r3, #0
   248ee:	d131      	bne.n	24954 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   248f0:	683b      	ldr	r3, [r7, #0]
   248f2:	2280      	movs	r2, #128	; 0x80
   248f4:	0052      	lsls	r2, r2, #1
   248f6:	4313      	orrs	r3, r2
   248f8:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   248fa:	683b      	ldr	r3, [r7, #0]
   248fc:	1dfc      	adds	r4, r7, #7
   248fe:	4a1b      	ldr	r2, [pc, #108]	; (2496c <enable_interrupts+0xa8>)
   24900:	0019      	movs	r1, r3
   24902:	0010      	movs	r0, r2
   24904:	4b1b      	ldr	r3, [pc, #108]	; (24974 <enable_interrupts+0xb0>)
   24906:	4798      	blx	r3
   24908:	0003      	movs	r3, r0
   2490a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   2490c:	1dfb      	adds	r3, r7, #7
   2490e:	781b      	ldrb	r3, [r3, #0]
   24910:	b25b      	sxtb	r3, r3
   24912:	2b00      	cmp	r3, #0
   24914:	d120      	bne.n	24958 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   24916:	1dfc      	adds	r4, r7, #7
   24918:	003a      	movs	r2, r7
   2491a:	23d0      	movs	r3, #208	; 0xd0
   2491c:	015b      	lsls	r3, r3, #5
   2491e:	0011      	movs	r1, r2
   24920:	0018      	movs	r0, r3
   24922:	4b13      	ldr	r3, [pc, #76]	; (24970 <enable_interrupts+0xac>)
   24924:	4798      	blx	r3
   24926:	0003      	movs	r3, r0
   24928:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   2492a:	1dfb      	adds	r3, r7, #7
   2492c:	781b      	ldrb	r3, [r3, #0]
   2492e:	b25b      	sxtb	r3, r3
   24930:	2b00      	cmp	r3, #0
   24932:	d113      	bne.n	2495c <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   24934:	683b      	ldr	r3, [r7, #0]
   24936:	2280      	movs	r2, #128	; 0x80
   24938:	0252      	lsls	r2, r2, #9
   2493a:	4313      	orrs	r3, r2
   2493c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   2493e:	683a      	ldr	r2, [r7, #0]
   24940:	1dfc      	adds	r4, r7, #7
   24942:	23d0      	movs	r3, #208	; 0xd0
   24944:	015b      	lsls	r3, r3, #5
   24946:	0011      	movs	r1, r2
   24948:	0018      	movs	r0, r3
   2494a:	4b0a      	ldr	r3, [pc, #40]	; (24974 <enable_interrupts+0xb0>)
   2494c:	4798      	blx	r3
   2494e:	0003      	movs	r3, r0
   24950:	7023      	strb	r3, [r4, #0]
   24952:	e004      	b.n	2495e <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   24954:	46c0      	nop			; (mov r8, r8)
   24956:	e002      	b.n	2495e <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   24958:	46c0      	nop			; (mov r8, r8)
   2495a:	e000      	b.n	2495e <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   2495c:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   2495e:	1dfb      	adds	r3, r7, #7
   24960:	781b      	ldrb	r3, [r3, #0]
   24962:	b25b      	sxtb	r3, r3
}
   24964:	0018      	movs	r0, r3
   24966:	46bd      	mov	sp, r7
   24968:	b003      	add	sp, #12
   2496a:	bd90      	pop	{r4, r7, pc}
   2496c:	00001408 	.word	0x00001408
   24970:	00025079 	.word	0x00025079
   24974:	0002509d 	.word	0x0002509d

00024978 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   24978:	b580      	push	{r7, lr}
   2497a:	b082      	sub	sp, #8
   2497c:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   2497e:	4b32      	ldr	r3, [pc, #200]	; (24a48 <nmi_get_chipid+0xd0>)
   24980:	681b      	ldr	r3, [r3, #0]
   24982:	2b00      	cmp	r3, #0
   24984:	d159      	bne.n	24a3a <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   24986:	4a30      	ldr	r2, [pc, #192]	; (24a48 <nmi_get_chipid+0xd0>)
   24988:	2380      	movs	r3, #128	; 0x80
   2498a:	015b      	lsls	r3, r3, #5
   2498c:	0011      	movs	r1, r2
   2498e:	0018      	movs	r0, r3
   24990:	4b2e      	ldr	r3, [pc, #184]	; (24a4c <nmi_get_chipid+0xd4>)
   24992:	4798      	blx	r3
   24994:	1e03      	subs	r3, r0, #0
   24996:	d004      	beq.n	249a2 <nmi_get_chipid+0x2a>
			chipid = 0;
   24998:	4b2b      	ldr	r3, [pc, #172]	; (24a48 <nmi_get_chipid+0xd0>)
   2499a:	2200      	movs	r2, #0
   2499c:	601a      	str	r2, [r3, #0]
			return 0;
   2499e:	2300      	movs	r3, #0
   249a0:	e04d      	b.n	24a3e <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   249a2:	1d3b      	adds	r3, r7, #4
   249a4:	4a2a      	ldr	r2, [pc, #168]	; (24a50 <nmi_get_chipid+0xd8>)
   249a6:	0019      	movs	r1, r3
   249a8:	0010      	movs	r0, r2
   249aa:	4b28      	ldr	r3, [pc, #160]	; (24a4c <nmi_get_chipid+0xd4>)
   249ac:	4798      	blx	r3
   249ae:	1e03      	subs	r3, r0, #0
   249b0:	d004      	beq.n	249bc <nmi_get_chipid+0x44>
			chipid = 0;
   249b2:	4b25      	ldr	r3, [pc, #148]	; (24a48 <nmi_get_chipid+0xd0>)
   249b4:	2200      	movs	r2, #0
   249b6:	601a      	str	r2, [r3, #0]
			return 0;
   249b8:	2300      	movs	r3, #0
   249ba:	e040      	b.n	24a3e <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   249bc:	4b22      	ldr	r3, [pc, #136]	; (24a48 <nmi_get_chipid+0xd0>)
   249be:	681b      	ldr	r3, [r3, #0]
   249c0:	4a24      	ldr	r2, [pc, #144]	; (24a54 <nmi_get_chipid+0xdc>)
   249c2:	4293      	cmp	r3, r2
   249c4:	d106      	bne.n	249d4 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   249c6:	687b      	ldr	r3, [r7, #4]
   249c8:	2b01      	cmp	r3, #1
   249ca:	d029      	beq.n	24a20 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   249cc:	4b1e      	ldr	r3, [pc, #120]	; (24a48 <nmi_get_chipid+0xd0>)
   249ce:	4a22      	ldr	r2, [pc, #136]	; (24a58 <nmi_get_chipid+0xe0>)
   249d0:	601a      	str	r2, [r3, #0]
   249d2:	e025      	b.n	24a20 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   249d4:	4b1c      	ldr	r3, [pc, #112]	; (24a48 <nmi_get_chipid+0xd0>)
   249d6:	681b      	ldr	r3, [r3, #0]
   249d8:	4a20      	ldr	r2, [pc, #128]	; (24a5c <nmi_get_chipid+0xe4>)
   249da:	4293      	cmp	r3, r2
   249dc:	d10d      	bne.n	249fa <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   249de:	687b      	ldr	r3, [r7, #4]
   249e0:	2b03      	cmp	r3, #3
   249e2:	d01d      	beq.n	24a20 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   249e4:	687b      	ldr	r3, [r7, #4]
   249e6:	2b04      	cmp	r3, #4
   249e8:	d103      	bne.n	249f2 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   249ea:	4b17      	ldr	r3, [pc, #92]	; (24a48 <nmi_get_chipid+0xd0>)
   249ec:	4a1c      	ldr	r2, [pc, #112]	; (24a60 <nmi_get_chipid+0xe8>)
   249ee:	601a      	str	r2, [r3, #0]
   249f0:	e016      	b.n	24a20 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   249f2:	4b15      	ldr	r3, [pc, #84]	; (24a48 <nmi_get_chipid+0xd0>)
   249f4:	4a1b      	ldr	r2, [pc, #108]	; (24a64 <nmi_get_chipid+0xec>)
   249f6:	601a      	str	r2, [r3, #0]
   249f8:	e012      	b.n	24a20 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   249fa:	4b13      	ldr	r3, [pc, #76]	; (24a48 <nmi_get_chipid+0xd0>)
   249fc:	681b      	ldr	r3, [r3, #0]
   249fe:	4a1a      	ldr	r2, [pc, #104]	; (24a68 <nmi_get_chipid+0xf0>)
   24a00:	4293      	cmp	r3, r2
   24a02:	d10d      	bne.n	24a20 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   24a04:	4a10      	ldr	r2, [pc, #64]	; (24a48 <nmi_get_chipid+0xd0>)
   24a06:	23ec      	movs	r3, #236	; 0xec
   24a08:	039b      	lsls	r3, r3, #14
   24a0a:	0011      	movs	r1, r2
   24a0c:	0018      	movs	r0, r3
   24a0e:	4b0f      	ldr	r3, [pc, #60]	; (24a4c <nmi_get_chipid+0xd4>)
   24a10:	4798      	blx	r3
   24a12:	1e03      	subs	r3, r0, #0
   24a14:	d004      	beq.n	24a20 <nmi_get_chipid+0xa8>
			chipid = 0;
   24a16:	4b0c      	ldr	r3, [pc, #48]	; (24a48 <nmi_get_chipid+0xd0>)
   24a18:	2200      	movs	r2, #0
   24a1a:	601a      	str	r2, [r3, #0]
			return 0;
   24a1c:	2300      	movs	r3, #0
   24a1e:	e00e      	b.n	24a3e <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   24a20:	4b09      	ldr	r3, [pc, #36]	; (24a48 <nmi_get_chipid+0xd0>)
   24a22:	681b      	ldr	r3, [r3, #0]
   24a24:	4a11      	ldr	r2, [pc, #68]	; (24a6c <nmi_get_chipid+0xf4>)
   24a26:	401a      	ands	r2, r3
   24a28:	4b07      	ldr	r3, [pc, #28]	; (24a48 <nmi_get_chipid+0xd0>)
   24a2a:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   24a2c:	4b06      	ldr	r3, [pc, #24]	; (24a48 <nmi_get_chipid+0xd0>)
   24a2e:	681b      	ldr	r3, [r3, #0]
   24a30:	22a0      	movs	r2, #160	; 0xa0
   24a32:	02d2      	lsls	r2, r2, #11
   24a34:	431a      	orrs	r2, r3
   24a36:	4b04      	ldr	r3, [pc, #16]	; (24a48 <nmi_get_chipid+0xd0>)
   24a38:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   24a3a:	4b03      	ldr	r3, [pc, #12]	; (24a48 <nmi_get_chipid+0xd0>)
   24a3c:	681b      	ldr	r3, [r3, #0]
}
   24a3e:	0018      	movs	r0, r3
   24a40:	46bd      	mov	sp, r7
   24a42:	b002      	add	sp, #8
   24a44:	bd80      	pop	{r7, pc}
   24a46:	46c0      	nop			; (mov r8, r8)
   24a48:	20004120 	.word	0x20004120
   24a4c:	00025079 	.word	0x00025079
   24a50:	000013f4 	.word	0x000013f4
   24a54:	001002a0 	.word	0x001002a0
   24a58:	001002a1 	.word	0x001002a1
   24a5c:	001002b0 	.word	0x001002b0
   24a60:	001002b1 	.word	0x001002b1
   24a64:	001002b2 	.word	0x001002b2
   24a68:	001000f0 	.word	0x001000f0
   24a6c:	fff0ffff 	.word	0xfff0ffff

00024a70 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   24a70:	b590      	push	{r4, r7, lr}
   24a72:	b083      	sub	sp, #12
   24a74:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   24a76:	1dfb      	adds	r3, r7, #7
   24a78:	2200      	movs	r2, #0
   24a7a:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   24a7c:	1dfc      	adds	r4, r7, #7
   24a7e:	003b      	movs	r3, r7
   24a80:	0019      	movs	r1, r3
   24a82:	2010      	movs	r0, #16
   24a84:	4b2e      	ldr	r3, [pc, #184]	; (24b40 <chip_sleep+0xd0>)
   24a86:	4798      	blx	r3
   24a88:	0003      	movs	r3, r0
   24a8a:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   24a8c:	1dfb      	adds	r3, r7, #7
   24a8e:	781b      	ldrb	r3, [r3, #0]
   24a90:	b25b      	sxtb	r3, r3
   24a92:	2b00      	cmp	r3, #0
   24a94:	d145      	bne.n	24b22 <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   24a96:	683b      	ldr	r3, [r7, #0]
   24a98:	2201      	movs	r2, #1
   24a9a:	4013      	ands	r3, r2
   24a9c:	d000      	beq.n	24aa0 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   24a9e:	e7ed      	b.n	24a7c <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   24aa0:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   24aa2:	1dfc      	adds	r4, r7, #7
   24aa4:	003b      	movs	r3, r7
   24aa6:	0019      	movs	r1, r3
   24aa8:	2001      	movs	r0, #1
   24aaa:	4b25      	ldr	r3, [pc, #148]	; (24b40 <chip_sleep+0xd0>)
   24aac:	4798      	blx	r3
   24aae:	0003      	movs	r3, r0
   24ab0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   24ab2:	1dfb      	adds	r3, r7, #7
   24ab4:	781b      	ldrb	r3, [r3, #0]
   24ab6:	b25b      	sxtb	r3, r3
   24ab8:	2b00      	cmp	r3, #0
   24aba:	d134      	bne.n	24b26 <chip_sleep+0xb6>
	if(reg & NBIT1)
   24abc:	683b      	ldr	r3, [r7, #0]
   24abe:	2202      	movs	r2, #2
   24ac0:	4013      	ands	r3, r2
   24ac2:	d010      	beq.n	24ae6 <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   24ac4:	683b      	ldr	r3, [r7, #0]
   24ac6:	2202      	movs	r2, #2
   24ac8:	4393      	bics	r3, r2
   24aca:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   24acc:	683b      	ldr	r3, [r7, #0]
   24ace:	1dfc      	adds	r4, r7, #7
   24ad0:	0019      	movs	r1, r3
   24ad2:	2001      	movs	r0, #1
   24ad4:	4b1b      	ldr	r3, [pc, #108]	; (24b44 <chip_sleep+0xd4>)
   24ad6:	4798      	blx	r3
   24ad8:	0003      	movs	r3, r0
   24ada:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   24adc:	1dfb      	adds	r3, r7, #7
   24ade:	781b      	ldrb	r3, [r3, #0]
   24ae0:	b25b      	sxtb	r3, r3
   24ae2:	2b00      	cmp	r3, #0
   24ae4:	d121      	bne.n	24b2a <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   24ae6:	1dfc      	adds	r4, r7, #7
   24ae8:	003b      	movs	r3, r7
   24aea:	0019      	movs	r1, r3
   24aec:	200b      	movs	r0, #11
   24aee:	4b14      	ldr	r3, [pc, #80]	; (24b40 <chip_sleep+0xd0>)
   24af0:	4798      	blx	r3
   24af2:	0003      	movs	r3, r0
   24af4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   24af6:	1dfb      	adds	r3, r7, #7
   24af8:	781b      	ldrb	r3, [r3, #0]
   24afa:	b25b      	sxtb	r3, r3
   24afc:	2b00      	cmp	r3, #0
   24afe:	d116      	bne.n	24b2e <chip_sleep+0xbe>
	if(reg & NBIT0)
   24b00:	683b      	ldr	r3, [r7, #0]
   24b02:	2201      	movs	r2, #1
   24b04:	4013      	ands	r3, r2
   24b06:	d013      	beq.n	24b30 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   24b08:	683b      	ldr	r3, [r7, #0]
   24b0a:	2201      	movs	r2, #1
   24b0c:	4393      	bics	r3, r2
   24b0e:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   24b10:	683b      	ldr	r3, [r7, #0]
   24b12:	1dfc      	adds	r4, r7, #7
   24b14:	0019      	movs	r1, r3
   24b16:	200b      	movs	r0, #11
   24b18:	4b0a      	ldr	r3, [pc, #40]	; (24b44 <chip_sleep+0xd4>)
   24b1a:	4798      	blx	r3
   24b1c:	0003      	movs	r3, r0
   24b1e:	7023      	strb	r3, [r4, #0]
   24b20:	e006      	b.n	24b30 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   24b22:	46c0      	nop			; (mov r8, r8)
   24b24:	e004      	b.n	24b30 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   24b26:	46c0      	nop			; (mov r8, r8)
   24b28:	e002      	b.n	24b30 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   24b2a:	46c0      	nop			; (mov r8, r8)
   24b2c:	e000      	b.n	24b30 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   24b2e:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   24b30:	1dfb      	adds	r3, r7, #7
   24b32:	781b      	ldrb	r3, [r3, #0]
   24b34:	b25b      	sxtb	r3, r3
}
   24b36:	0018      	movs	r0, r3
   24b38:	46bd      	mov	sp, r7
   24b3a:	b003      	add	sp, #12
   24b3c:	bd90      	pop	{r4, r7, pc}
   24b3e:	46c0      	nop			; (mov r8, r8)
   24b40:	00025079 	.word	0x00025079
   24b44:	0002509d 	.word	0x0002509d

00024b48 <chip_wake>:
sint8 chip_wake(void)
{
   24b48:	b590      	push	{r4, r7, lr}
   24b4a:	b085      	sub	sp, #20
   24b4c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   24b4e:	230f      	movs	r3, #15
   24b50:	18fb      	adds	r3, r7, r3
   24b52:	2200      	movs	r2, #0
   24b54:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   24b56:	2300      	movs	r3, #0
   24b58:	607b      	str	r3, [r7, #4]
   24b5a:	2300      	movs	r3, #0
   24b5c:	603b      	str	r3, [r7, #0]
   24b5e:	2300      	movs	r3, #0
   24b60:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   24b62:	230f      	movs	r3, #15
   24b64:	18fc      	adds	r4, r7, r3
   24b66:	1d3b      	adds	r3, r7, #4
   24b68:	0019      	movs	r1, r3
   24b6a:	200b      	movs	r0, #11
   24b6c:	4b4e      	ldr	r3, [pc, #312]	; (24ca8 <chip_wake+0x160>)
   24b6e:	4798      	blx	r3
   24b70:	0003      	movs	r3, r0
   24b72:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   24b74:	230f      	movs	r3, #15
   24b76:	18fb      	adds	r3, r7, r3
   24b78:	781b      	ldrb	r3, [r3, #0]
   24b7a:	b25b      	sxtb	r3, r3
   24b7c:	2b00      	cmp	r3, #0
   24b7e:	d000      	beq.n	24b82 <chip_wake+0x3a>
   24b80:	e082      	b.n	24c88 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   24b82:	687b      	ldr	r3, [r7, #4]
   24b84:	2201      	movs	r2, #1
   24b86:	4013      	ands	r3, r2
   24b88:	d111      	bne.n	24bae <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   24b8a:	687b      	ldr	r3, [r7, #4]
   24b8c:	2201      	movs	r2, #1
   24b8e:	4313      	orrs	r3, r2
   24b90:	220f      	movs	r2, #15
   24b92:	18bc      	adds	r4, r7, r2
   24b94:	0019      	movs	r1, r3
   24b96:	200b      	movs	r0, #11
   24b98:	4b44      	ldr	r3, [pc, #272]	; (24cac <chip_wake+0x164>)
   24b9a:	4798      	blx	r3
   24b9c:	0003      	movs	r3, r0
   24b9e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   24ba0:	230f      	movs	r3, #15
   24ba2:	18fb      	adds	r3, r7, r3
   24ba4:	781b      	ldrb	r3, [r3, #0]
   24ba6:	b25b      	sxtb	r3, r3
   24ba8:	2b00      	cmp	r3, #0
   24baa:	d000      	beq.n	24bae <chip_wake+0x66>
   24bac:	e06e      	b.n	24c8c <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   24bae:	230f      	movs	r3, #15
   24bb0:	18fc      	adds	r4, r7, r3
   24bb2:	1d3b      	adds	r3, r7, #4
   24bb4:	0019      	movs	r1, r3
   24bb6:	2001      	movs	r0, #1
   24bb8:	4b3b      	ldr	r3, [pc, #236]	; (24ca8 <chip_wake+0x160>)
   24bba:	4798      	blx	r3
   24bbc:	0003      	movs	r3, r0
   24bbe:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   24bc0:	230f      	movs	r3, #15
   24bc2:	18fb      	adds	r3, r7, r3
   24bc4:	781b      	ldrb	r3, [r3, #0]
   24bc6:	b25b      	sxtb	r3, r3
   24bc8:	2b00      	cmp	r3, #0
   24bca:	d161      	bne.n	24c90 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   24bcc:	687b      	ldr	r3, [r7, #4]
   24bce:	2202      	movs	r2, #2
   24bd0:	4013      	ands	r3, r2
   24bd2:	d110      	bne.n	24bf6 <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   24bd4:	687b      	ldr	r3, [r7, #4]
   24bd6:	2202      	movs	r2, #2
   24bd8:	4313      	orrs	r3, r2
   24bda:	220f      	movs	r2, #15
   24bdc:	18bc      	adds	r4, r7, r2
   24bde:	0019      	movs	r1, r3
   24be0:	2001      	movs	r0, #1
   24be2:	4b32      	ldr	r3, [pc, #200]	; (24cac <chip_wake+0x164>)
   24be4:	4798      	blx	r3
   24be6:	0003      	movs	r3, r0
   24be8:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   24bea:	230f      	movs	r3, #15
   24bec:	18fb      	adds	r3, r7, r3
   24bee:	781b      	ldrb	r3, [r3, #0]
   24bf0:	b25b      	sxtb	r3, r3
   24bf2:	2b00      	cmp	r3, #0
   24bf4:	d14e      	bne.n	24c94 <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   24bf6:	230f      	movs	r3, #15
   24bf8:	18fc      	adds	r4, r7, r3
   24bfa:	003b      	movs	r3, r7
   24bfc:	0019      	movs	r1, r3
   24bfe:	200f      	movs	r0, #15
   24c00:	4b29      	ldr	r3, [pc, #164]	; (24ca8 <chip_wake+0x160>)
   24c02:	4798      	blx	r3
   24c04:	0003      	movs	r3, r0
   24c06:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   24c08:	230f      	movs	r3, #15
   24c0a:	18fb      	adds	r3, r7, r3
   24c0c:	781b      	ldrb	r3, [r3, #0]
   24c0e:	b25b      	sxtb	r3, r3
   24c10:	2b00      	cmp	r3, #0
   24c12:	d014      	beq.n	24c3e <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   24c14:	23a8      	movs	r3, #168	; 0xa8
   24c16:	005a      	lsls	r2, r3, #1
   24c18:	4925      	ldr	r1, [pc, #148]	; (24cb0 <chip_wake+0x168>)
   24c1a:	4b26      	ldr	r3, [pc, #152]	; (24cb4 <chip_wake+0x16c>)
   24c1c:	0018      	movs	r0, r3
   24c1e:	4b26      	ldr	r3, [pc, #152]	; (24cb8 <chip_wake+0x170>)
   24c20:	4798      	blx	r3
   24c22:	230f      	movs	r3, #15
   24c24:	18fb      	adds	r3, r7, r3
   24c26:	2100      	movs	r1, #0
   24c28:	5659      	ldrsb	r1, [r3, r1]
   24c2a:	683a      	ldr	r2, [r7, #0]
   24c2c:	4b23      	ldr	r3, [pc, #140]	; (24cbc <chip_wake+0x174>)
   24c2e:	0018      	movs	r0, r3
   24c30:	4b21      	ldr	r3, [pc, #132]	; (24cb8 <chip_wake+0x170>)
   24c32:	4798      	blx	r3
   24c34:	4b22      	ldr	r3, [pc, #136]	; (24cc0 <chip_wake+0x178>)
   24c36:	0018      	movs	r0, r3
   24c38:	4b1f      	ldr	r3, [pc, #124]	; (24cb8 <chip_wake+0x170>)
   24c3a:	4798      	blx	r3
			goto _WAKE_EXIT;
   24c3c:	e02b      	b.n	24c96 <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   24c3e:	683b      	ldr	r3, [r7, #0]
   24c40:	2204      	movs	r2, #4
   24c42:	4013      	ands	r3, r2
   24c44:	d11c      	bne.n	24c80 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   24c46:	2002      	movs	r0, #2
   24c48:	4b1e      	ldr	r3, [pc, #120]	; (24cc4 <chip_wake+0x17c>)
   24c4a:	4798      	blx	r3
		trials++;
   24c4c:	68bb      	ldr	r3, [r7, #8]
   24c4e:	3301      	adds	r3, #1
   24c50:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   24c52:	68bb      	ldr	r3, [r7, #8]
   24c54:	2b04      	cmp	r3, #4
   24c56:	d9ce      	bls.n	24bf6 <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   24c58:	23ad      	movs	r3, #173	; 0xad
   24c5a:	005a      	lsls	r2, r3, #1
   24c5c:	4914      	ldr	r1, [pc, #80]	; (24cb0 <chip_wake+0x168>)
   24c5e:	4b15      	ldr	r3, [pc, #84]	; (24cb4 <chip_wake+0x16c>)
   24c60:	0018      	movs	r0, r3
   24c62:	4b15      	ldr	r3, [pc, #84]	; (24cb8 <chip_wake+0x170>)
   24c64:	4798      	blx	r3
   24c66:	4b18      	ldr	r3, [pc, #96]	; (24cc8 <chip_wake+0x180>)
   24c68:	0018      	movs	r0, r3
   24c6a:	4b13      	ldr	r3, [pc, #76]	; (24cb8 <chip_wake+0x170>)
   24c6c:	4798      	blx	r3
   24c6e:	4b14      	ldr	r3, [pc, #80]	; (24cc0 <chip_wake+0x178>)
   24c70:	0018      	movs	r0, r3
   24c72:	4b11      	ldr	r3, [pc, #68]	; (24cb8 <chip_wake+0x170>)
   24c74:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   24c76:	230f      	movs	r3, #15
   24c78:	18fb      	adds	r3, r7, r3
   24c7a:	22fc      	movs	r2, #252	; 0xfc
   24c7c:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   24c7e:	e00a      	b.n	24c96 <chip_wake+0x14e>
			break;
   24c80:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   24c82:	4b12      	ldr	r3, [pc, #72]	; (24ccc <chip_wake+0x184>)
   24c84:	4798      	blx	r3
   24c86:	e006      	b.n	24c96 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   24c88:	46c0      	nop			; (mov r8, r8)
   24c8a:	e004      	b.n	24c96 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   24c8c:	46c0      	nop			; (mov r8, r8)
   24c8e:	e002      	b.n	24c96 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   24c90:	46c0      	nop			; (mov r8, r8)
   24c92:	e000      	b.n	24c96 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   24c94:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   24c96:	230f      	movs	r3, #15
   24c98:	18fb      	adds	r3, r7, r3
   24c9a:	781b      	ldrb	r3, [r3, #0]
   24c9c:	b25b      	sxtb	r3, r3
}
   24c9e:	0018      	movs	r0, r3
   24ca0:	46bd      	mov	sp, r7
   24ca2:	b005      	add	sp, #20
   24ca4:	bd90      	pop	{r4, r7, pc}
   24ca6:	46c0      	nop			; (mov r8, r8)
   24ca8:	00025079 	.word	0x00025079
   24cac:	0002509d 	.word	0x0002509d
   24cb0:	0003be2c 	.word	0x0003be2c
   24cb4:	0003bda0 	.word	0x0003bda0
   24cb8:	00020329 	.word	0x00020329
   24cbc:	0003bdb4 	.word	0x0003bdb4
   24cc0:	0003bdcc 	.word	0x0003bdcc
   24cc4:	00022799 	.word	0x00022799
   24cc8:	0003bdd0 	.word	0x0003bdd0
   24ccc:	00025039 	.word	0x00025039

00024cd0 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   24cd0:	b580      	push	{r7, lr}
   24cd2:	b088      	sub	sp, #32
   24cd4:	af00      	add	r7, sp, #0
   24cd6:	0002      	movs	r2, r0
   24cd8:	1dfb      	adds	r3, r7, #7
   24cda:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   24cdc:	2313      	movs	r3, #19
   24cde:	18fb      	adds	r3, r7, r3
   24ce0:	2200      	movs	r2, #0
   24ce2:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   24ce4:	2300      	movs	r3, #0
   24ce6:	61fb      	str	r3, [r7, #28]
   24ce8:	2300      	movs	r3, #0
   24cea:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   24cec:	2300      	movs	r3, #0
   24cee:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   24cf0:	4b4a      	ldr	r3, [pc, #296]	; (24e1c <wait_for_bootrom+0x14c>)
   24cf2:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   24cf4:	2300      	movs	r3, #0
   24cf6:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   24cf8:	4b49      	ldr	r3, [pc, #292]	; (24e20 <wait_for_bootrom+0x150>)
   24cfa:	0018      	movs	r0, r3
   24cfc:	4b49      	ldr	r3, [pc, #292]	; (24e24 <wait_for_bootrom+0x154>)
   24cfe:	4798      	blx	r3
   24d00:	0003      	movs	r3, r0
   24d02:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   24d04:	69fb      	ldr	r3, [r7, #28]
   24d06:	2b00      	cmp	r3, #0
   24d08:	db03      	blt.n	24d12 <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   24d0a:	2001      	movs	r0, #1
   24d0c:	4b46      	ldr	r3, [pc, #280]	; (24e28 <wait_for_bootrom+0x158>)
   24d0e:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   24d10:	e7f2      	b.n	24cf8 <wait_for_bootrom+0x28>
			break;
   24d12:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   24d14:	4b45      	ldr	r3, [pc, #276]	; (24e2c <wait_for_bootrom+0x15c>)
   24d16:	0018      	movs	r0, r3
   24d18:	4b42      	ldr	r3, [pc, #264]	; (24e24 <wait_for_bootrom+0x154>)
   24d1a:	4798      	blx	r3
   24d1c:	0003      	movs	r3, r0
   24d1e:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   24d20:	69fb      	ldr	r3, [r7, #28]
   24d22:	2201      	movs	r2, #1
   24d24:	4013      	ands	r3, r2
   24d26:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   24d28:	69fb      	ldr	r3, [r7, #28]
   24d2a:	2b00      	cmp	r3, #0
   24d2c:	d112      	bne.n	24d54 <wait_for_bootrom+0x84>
	{
		reg = 0;
   24d2e:	2300      	movs	r3, #0
   24d30:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   24d32:	e00b      	b.n	24d4c <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   24d34:	2001      	movs	r0, #1
   24d36:	4b3c      	ldr	r3, [pc, #240]	; (24e28 <wait_for_bootrom+0x158>)
   24d38:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   24d3a:	4b3d      	ldr	r3, [pc, #244]	; (24e30 <wait_for_bootrom+0x160>)
   24d3c:	0018      	movs	r0, r3
   24d3e:	4b39      	ldr	r3, [pc, #228]	; (24e24 <wait_for_bootrom+0x154>)
   24d40:	4798      	blx	r3
   24d42:	0003      	movs	r3, r0
   24d44:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   24d46:	69bb      	ldr	r3, [r7, #24]
   24d48:	3301      	adds	r3, #1
   24d4a:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   24d4c:	69fb      	ldr	r3, [r7, #28]
   24d4e:	4a39      	ldr	r2, [pc, #228]	; (24e34 <wait_for_bootrom+0x164>)
   24d50:	4293      	cmp	r3, r2
   24d52:	d1ef      	bne.n	24d34 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   24d54:	1dfb      	adds	r3, r7, #7
   24d56:	781b      	ldrb	r3, [r3, #0]
   24d58:	2b02      	cmp	r3, #2
   24d5a:	d10d      	bne.n	24d78 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   24d5c:	4a36      	ldr	r2, [pc, #216]	; (24e38 <wait_for_bootrom+0x168>)
   24d5e:	4b37      	ldr	r3, [pc, #220]	; (24e3c <wait_for_bootrom+0x16c>)
   24d60:	0011      	movs	r1, r2
   24d62:	0018      	movs	r0, r3
   24d64:	4b36      	ldr	r3, [pc, #216]	; (24e40 <wait_for_bootrom+0x170>)
   24d66:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   24d68:	2380      	movs	r3, #128	; 0x80
   24d6a:	035b      	lsls	r3, r3, #13
   24d6c:	4a35      	ldr	r2, [pc, #212]	; (24e44 <wait_for_bootrom+0x174>)
   24d6e:	0019      	movs	r1, r3
   24d70:	0010      	movs	r0, r2
   24d72:	4b33      	ldr	r3, [pc, #204]	; (24e40 <wait_for_bootrom+0x170>)
   24d74:	4798      	blx	r3
   24d76:	e022      	b.n	24dbe <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   24d78:	1dfb      	adds	r3, r7, #7
   24d7a:	781b      	ldrb	r3, [r3, #0]
   24d7c:	2b03      	cmp	r3, #3
   24d7e:	d10b      	bne.n	24d98 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   24d80:	4a2d      	ldr	r2, [pc, #180]	; (24e38 <wait_for_bootrom+0x168>)
   24d82:	4b2e      	ldr	r3, [pc, #184]	; (24e3c <wait_for_bootrom+0x16c>)
   24d84:	0011      	movs	r1, r2
   24d86:	0018      	movs	r0, r3
   24d88:	4b2d      	ldr	r3, [pc, #180]	; (24e40 <wait_for_bootrom+0x170>)
   24d8a:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   24d8c:	4b2d      	ldr	r3, [pc, #180]	; (24e44 <wait_for_bootrom+0x174>)
   24d8e:	2100      	movs	r1, #0
   24d90:	0018      	movs	r0, r3
   24d92:	4b2b      	ldr	r3, [pc, #172]	; (24e40 <wait_for_bootrom+0x170>)
   24d94:	4798      	blx	r3
   24d96:	e012      	b.n	24dbe <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   24d98:	1dfb      	adds	r3, r7, #7
   24d9a:	781b      	ldrb	r3, [r3, #0]
   24d9c:	2b04      	cmp	r3, #4
   24d9e:	d108      	bne.n	24db2 <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   24da0:	2380      	movs	r3, #128	; 0x80
   24da2:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   24da4:	68fb      	ldr	r3, [r7, #12]
   24da6:	4a27      	ldr	r2, [pc, #156]	; (24e44 <wait_for_bootrom+0x174>)
   24da8:	0019      	movs	r1, r3
   24daa:	0010      	movs	r0, r2
   24dac:	4b24      	ldr	r3, [pc, #144]	; (24e40 <wait_for_bootrom+0x170>)
   24dae:	4798      	blx	r3
   24db0:	e005      	b.n	24dbe <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   24db2:	68fb      	ldr	r3, [r7, #12]
   24db4:	4a23      	ldr	r2, [pc, #140]	; (24e44 <wait_for_bootrom+0x174>)
   24db6:	0019      	movs	r1, r3
   24db8:	0010      	movs	r0, r2
   24dba:	4b21      	ldr	r3, [pc, #132]	; (24e40 <wait_for_bootrom+0x170>)
   24dbc:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   24dbe:	4b22      	ldr	r3, [pc, #136]	; (24e48 <wait_for_bootrom+0x178>)
   24dc0:	4798      	blx	r3
   24dc2:	0003      	movs	r3, r0
   24dc4:	051b      	lsls	r3, r3, #20
   24dc6:	0d1b      	lsrs	r3, r3, #20
   24dc8:	4a20      	ldr	r2, [pc, #128]	; (24e4c <wait_for_bootrom+0x17c>)
   24dca:	4293      	cmp	r3, r2
   24dcc:	d906      	bls.n	24ddc <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   24dce:	697b      	ldr	r3, [r7, #20]
   24dd0:	2202      	movs	r2, #2
   24dd2:	4313      	orrs	r3, r2
   24dd4:	0018      	movs	r0, r3
   24dd6:	4b1e      	ldr	r3, [pc, #120]	; (24e50 <wait_for_bootrom+0x180>)
   24dd8:	4798      	blx	r3
   24dda:	e003      	b.n	24de4 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   24ddc:	697b      	ldr	r3, [r7, #20]
   24dde:	0018      	movs	r0, r3
   24de0:	4b1b      	ldr	r3, [pc, #108]	; (24e50 <wait_for_bootrom+0x180>)
   24de2:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   24de4:	4b1b      	ldr	r3, [pc, #108]	; (24e54 <wait_for_bootrom+0x184>)
   24de6:	0018      	movs	r0, r3
   24de8:	4b1b      	ldr	r3, [pc, #108]	; (24e58 <wait_for_bootrom+0x188>)
   24dea:	4798      	blx	r3
   24dec:	68fa      	ldr	r2, [r7, #12]
   24dee:	4b1b      	ldr	r3, [pc, #108]	; (24e5c <wait_for_bootrom+0x18c>)
   24df0:	0011      	movs	r1, r2
   24df2:	0018      	movs	r0, r3
   24df4:	4b18      	ldr	r3, [pc, #96]	; (24e58 <wait_for_bootrom+0x188>)
   24df6:	4798      	blx	r3
   24df8:	4b19      	ldr	r3, [pc, #100]	; (24e60 <wait_for_bootrom+0x190>)
   24dfa:	0018      	movs	r0, r3
   24dfc:	4b16      	ldr	r3, [pc, #88]	; (24e58 <wait_for_bootrom+0x188>)
   24dfe:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   24e00:	4a18      	ldr	r2, [pc, #96]	; (24e64 <wait_for_bootrom+0x194>)
   24e02:	4b0b      	ldr	r3, [pc, #44]	; (24e30 <wait_for_bootrom+0x160>)
   24e04:	0011      	movs	r1, r2
   24e06:	0018      	movs	r0, r3
   24e08:	4b0d      	ldr	r3, [pc, #52]	; (24e40 <wait_for_bootrom+0x170>)
   24e0a:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   24e0c:	2313      	movs	r3, #19
   24e0e:	18fb      	adds	r3, r7, r3
   24e10:	781b      	ldrb	r3, [r3, #0]
   24e12:	b25b      	sxtb	r3, r3
}
   24e14:	0018      	movs	r0, r3
   24e16:	46bd      	mov	sp, r7
   24e18:	b008      	add	sp, #32
   24e1a:	bd80      	pop	{r7, pc}
   24e1c:	13301354 	.word	0x13301354
   24e20:	00001014 	.word	0x00001014
   24e24:	00025059 	.word	0x00025059
   24e28:	00022799 	.word	0x00022799
   24e2c:	000207bc 	.word	0x000207bc
   24e30:	000c000c 	.word	0x000c000c
   24e34:	10add09e 	.word	0x10add09e
   24e38:	3c1cd57d 	.word	0x3c1cd57d
   24e3c:	000207ac 	.word	0x000207ac
   24e40:	0002509d 	.word	0x0002509d
   24e44:	0000108c 	.word	0x0000108c
   24e48:	00024979 	.word	0x00024979
   24e4c:	0000039f 	.word	0x0000039f
   24e50:	00024849 	.word	0x00024849
   24e54:	0003bdec 	.word	0x0003bdec
   24e58:	00020329 	.word	0x00020329
   24e5c:	0003bdf8 	.word	0x0003bdf8
   24e60:	0003bdcc 	.word	0x0003bdcc
   24e64:	ef522f61 	.word	0xef522f61

00024e68 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   24e68:	b580      	push	{r7, lr}
   24e6a:	b088      	sub	sp, #32
   24e6c:	af00      	add	r7, sp, #0
   24e6e:	0002      	movs	r2, r0
   24e70:	1dfb      	adds	r3, r7, #7
   24e72:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   24e74:	231f      	movs	r3, #31
   24e76:	18fb      	adds	r3, r7, r3
   24e78:	2200      	movs	r2, #0
   24e7a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   24e7c:	2300      	movs	r3, #0
   24e7e:	61bb      	str	r3, [r7, #24]
   24e80:	2300      	movs	r3, #0
   24e82:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   24e84:	2301      	movs	r3, #1
   24e86:	425b      	negs	r3, r3
   24e88:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   24e8a:	4b1d      	ldr	r3, [pc, #116]	; (24f00 <wait_for_firmware_start+0x98>)
   24e8c:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   24e8e:	4b1d      	ldr	r3, [pc, #116]	; (24f04 <wait_for_firmware_start+0x9c>)
   24e90:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   24e92:	1dfb      	adds	r3, r7, #7
   24e94:	781b      	ldrb	r3, [r3, #0]
   24e96:	2b02      	cmp	r3, #2
   24e98:	d003      	beq.n	24ea2 <wait_for_firmware_start+0x3a>
   24e9a:	1dfb      	adds	r3, r7, #7
   24e9c:	781b      	ldrb	r3, [r3, #0]
   24e9e:	2b03      	cmp	r3, #3
   24ea0:	d119      	bne.n	24ed6 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   24ea2:	4b19      	ldr	r3, [pc, #100]	; (24f08 <wait_for_firmware_start+0xa0>)
   24ea4:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   24ea6:	4b19      	ldr	r3, [pc, #100]	; (24f0c <wait_for_firmware_start+0xa4>)
   24ea8:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   24eaa:	e014      	b.n	24ed6 <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   24eac:	2002      	movs	r0, #2
   24eae:	4b18      	ldr	r3, [pc, #96]	; (24f10 <wait_for_firmware_start+0xa8>)
   24eb0:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   24eb2:	68fb      	ldr	r3, [r7, #12]
   24eb4:	0018      	movs	r0, r3
   24eb6:	4b17      	ldr	r3, [pc, #92]	; (24f14 <wait_for_firmware_start+0xac>)
   24eb8:	4798      	blx	r3
   24eba:	0003      	movs	r3, r0
   24ebc:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   24ebe:	697b      	ldr	r3, [r7, #20]
   24ec0:	3301      	adds	r3, #1
   24ec2:	617b      	str	r3, [r7, #20]
   24ec4:	697a      	ldr	r2, [r7, #20]
   24ec6:	693b      	ldr	r3, [r7, #16]
   24ec8:	429a      	cmp	r2, r3
   24eca:	d304      	bcc.n	24ed6 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   24ecc:	231f      	movs	r3, #31
   24ece:	18fb      	adds	r3, r7, r3
   24ed0:	22fb      	movs	r2, #251	; 0xfb
   24ed2:	701a      	strb	r2, [r3, #0]
			goto ERR;
   24ed4:	e00c      	b.n	24ef0 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   24ed6:	68ba      	ldr	r2, [r7, #8]
   24ed8:	69bb      	ldr	r3, [r7, #24]
   24eda:	429a      	cmp	r2, r3
   24edc:	d1e6      	bne.n	24eac <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   24ede:	68bb      	ldr	r3, [r7, #8]
   24ee0:	4a08      	ldr	r2, [pc, #32]	; (24f04 <wait_for_firmware_start+0x9c>)
   24ee2:	4293      	cmp	r3, r2
   24ee4:	d104      	bne.n	24ef0 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   24ee6:	4b06      	ldr	r3, [pc, #24]	; (24f00 <wait_for_firmware_start+0x98>)
   24ee8:	2100      	movs	r1, #0
   24eea:	0018      	movs	r0, r3
   24eec:	4b0a      	ldr	r3, [pc, #40]	; (24f18 <wait_for_firmware_start+0xb0>)
   24eee:	4798      	blx	r3
	}
ERR:
	return ret;
   24ef0:	231f      	movs	r3, #31
   24ef2:	18fb      	adds	r3, r7, r3
   24ef4:	781b      	ldrb	r3, [r3, #0]
   24ef6:	b25b      	sxtb	r3, r3
}
   24ef8:	0018      	movs	r0, r3
   24efa:	46bd      	mov	sp, r7
   24efc:	b008      	add	sp, #32
   24efe:	bd80      	pop	{r7, pc}
   24f00:	0000108c 	.word	0x0000108c
   24f04:	02532636 	.word	0x02532636
   24f08:	000207ac 	.word	0x000207ac
   24f0c:	d75dc1c3 	.word	0xd75dc1c3
   24f10:	00022799 	.word	0x00022799
   24f14:	00025059 	.word	0x00025059
   24f18:	0002509d 	.word	0x0002509d

00024f1c <chip_deinit>:

sint8 chip_deinit(void)
{
   24f1c:	b590      	push	{r4, r7, lr}
   24f1e:	b083      	sub	sp, #12
   24f20:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   24f22:	2300      	movs	r3, #0
   24f24:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   24f26:	1dfc      	adds	r4, r7, #7
   24f28:	003a      	movs	r2, r7
   24f2a:	23a0      	movs	r3, #160	; 0xa0
   24f2c:	015b      	lsls	r3, r3, #5
   24f2e:	0011      	movs	r1, r2
   24f30:	0018      	movs	r0, r3
   24f32:	4b20      	ldr	r3, [pc, #128]	; (24fb4 <chip_deinit+0x98>)
   24f34:	4798      	blx	r3
   24f36:	0003      	movs	r3, r0
   24f38:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   24f3a:	1dfb      	adds	r3, r7, #7
   24f3c:	781b      	ldrb	r3, [r3, #0]
   24f3e:	b25b      	sxtb	r3, r3
   24f40:	2b00      	cmp	r3, #0
   24f42:	d00e      	beq.n	24f62 <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   24f44:	4a1c      	ldr	r2, [pc, #112]	; (24fb8 <chip_deinit+0x9c>)
   24f46:	491d      	ldr	r1, [pc, #116]	; (24fbc <chip_deinit+0xa0>)
   24f48:	4b1d      	ldr	r3, [pc, #116]	; (24fc0 <chip_deinit+0xa4>)
   24f4a:	0018      	movs	r0, r3
   24f4c:	4b1d      	ldr	r3, [pc, #116]	; (24fc4 <chip_deinit+0xa8>)
   24f4e:	4798      	blx	r3
   24f50:	4b1d      	ldr	r3, [pc, #116]	; (24fc8 <chip_deinit+0xac>)
   24f52:	0018      	movs	r0, r3
   24f54:	4b1b      	ldr	r3, [pc, #108]	; (24fc4 <chip_deinit+0xa8>)
   24f56:	4798      	blx	r3
   24f58:	4b1c      	ldr	r3, [pc, #112]	; (24fcc <chip_deinit+0xb0>)
   24f5a:	0018      	movs	r0, r3
   24f5c:	4b19      	ldr	r3, [pc, #100]	; (24fc4 <chip_deinit+0xa8>)
   24f5e:	4798      	blx	r3
		goto ERR1;
   24f60:	e021      	b.n	24fa6 <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   24f62:	683b      	ldr	r3, [r7, #0]
   24f64:	4a1a      	ldr	r2, [pc, #104]	; (24fd0 <chip_deinit+0xb4>)
   24f66:	4013      	ands	r3, r2
   24f68:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   24f6a:	683a      	ldr	r2, [r7, #0]
   24f6c:	1dfc      	adds	r4, r7, #7
   24f6e:	23a0      	movs	r3, #160	; 0xa0
   24f70:	015b      	lsls	r3, r3, #5
   24f72:	0011      	movs	r1, r2
   24f74:	0018      	movs	r0, r3
   24f76:	4b17      	ldr	r3, [pc, #92]	; (24fd4 <chip_deinit+0xb8>)
   24f78:	4798      	blx	r3
   24f7a:	0003      	movs	r3, r0
   24f7c:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   24f7e:	1dfb      	adds	r3, r7, #7
   24f80:	781b      	ldrb	r3, [r3, #0]
   24f82:	b25b      	sxtb	r3, r3
   24f84:	2b00      	cmp	r3, #0
   24f86:	d00e      	beq.n	24fa6 <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   24f88:	4a13      	ldr	r2, [pc, #76]	; (24fd8 <chip_deinit+0xbc>)
   24f8a:	490c      	ldr	r1, [pc, #48]	; (24fbc <chip_deinit+0xa0>)
   24f8c:	4b0c      	ldr	r3, [pc, #48]	; (24fc0 <chip_deinit+0xa4>)
   24f8e:	0018      	movs	r0, r3
   24f90:	4b0c      	ldr	r3, [pc, #48]	; (24fc4 <chip_deinit+0xa8>)
   24f92:	4798      	blx	r3
   24f94:	4b0c      	ldr	r3, [pc, #48]	; (24fc8 <chip_deinit+0xac>)
   24f96:	0018      	movs	r0, r3
   24f98:	4b0a      	ldr	r3, [pc, #40]	; (24fc4 <chip_deinit+0xa8>)
   24f9a:	4798      	blx	r3
   24f9c:	4b0b      	ldr	r3, [pc, #44]	; (24fcc <chip_deinit+0xb0>)
   24f9e:	0018      	movs	r0, r3
   24fa0:	4b08      	ldr	r3, [pc, #32]	; (24fc4 <chip_deinit+0xa8>)
   24fa2:	4798      	blx	r3
		goto ERR1;
   24fa4:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   24fa6:	1dfb      	adds	r3, r7, #7
   24fa8:	781b      	ldrb	r3, [r3, #0]
   24faa:	b25b      	sxtb	r3, r3
}
   24fac:	0018      	movs	r0, r3
   24fae:	46bd      	mov	sp, r7
   24fb0:	b003      	add	sp, #12
   24fb2:	bd90      	pop	{r4, r7, pc}
   24fb4:	00025079 	.word	0x00025079
   24fb8:	00000201 	.word	0x00000201
   24fbc:	0003be38 	.word	0x0003be38
   24fc0:	0003bda0 	.word	0x0003bda0
   24fc4:	00020329 	.word	0x00020329
   24fc8:	0003be10 	.word	0x0003be10
   24fcc:	0003bdcc 	.word	0x0003bdcc
   24fd0:	fffffbff 	.word	0xfffffbff
   24fd4:	0002509d 	.word	0x0002509d
   24fd8:	00000207 	.word	0x00000207

00024fdc <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   24fdc:	b590      	push	{r4, r7, lr}
   24fde:	b085      	sub	sp, #20
   24fe0:	af00      	add	r7, sp, #0
   24fe2:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   24fe4:	230f      	movs	r3, #15
   24fe6:	18fb      	adds	r3, r7, r3
   24fe8:	2200      	movs	r2, #0
   24fea:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   24fec:	230f      	movs	r3, #15
   24fee:	18fc      	adds	r4, r7, r3
   24ff0:	687b      	ldr	r3, [r7, #4]
   24ff2:	0018      	movs	r0, r3
   24ff4:	4b05      	ldr	r3, [pc, #20]	; (2500c <nm_bus_iface_init+0x30>)
   24ff6:	4798      	blx	r3
   24ff8:	0003      	movs	r3, r0
   24ffa:	7023      	strb	r3, [r4, #0]
	return ret;
   24ffc:	230f      	movs	r3, #15
   24ffe:	18fb      	adds	r3, r7, r3
   25000:	781b      	ldrb	r3, [r3, #0]
   25002:	b25b      	sxtb	r3, r3
}
   25004:	0018      	movs	r0, r3
   25006:	46bd      	mov	sp, r7
   25008:	b005      	add	sp, #20
   2500a:	bd90      	pop	{r4, r7, pc}
   2500c:	00022dc5 	.word	0x00022dc5

00025010 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   25010:	b590      	push	{r4, r7, lr}
   25012:	b083      	sub	sp, #12
   25014:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   25016:	1dfb      	adds	r3, r7, #7
   25018:	2200      	movs	r2, #0
   2501a:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   2501c:	1dfc      	adds	r4, r7, #7
   2501e:	4b05      	ldr	r3, [pc, #20]	; (25034 <nm_bus_iface_deinit+0x24>)
   25020:	4798      	blx	r3
   25022:	0003      	movs	r3, r0
   25024:	7023      	strb	r3, [r4, #0]

	return ret;
   25026:	1dfb      	adds	r3, r7, #7
   25028:	781b      	ldrb	r3, [r3, #0]
   2502a:	b25b      	sxtb	r3, r3
}
   2502c:	0018      	movs	r0, r3
   2502e:	46bd      	mov	sp, r7
   25030:	b003      	add	sp, #12
   25032:	bd90      	pop	{r4, r7, pc}
   25034:	00022f3d 	.word	0x00022f3d

00025038 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   25038:	b580      	push	{r7, lr}
   2503a:	b082      	sub	sp, #8
   2503c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2503e:	1dfb      	adds	r3, r7, #7
   25040:	2200      	movs	r2, #0
   25042:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   25044:	4b03      	ldr	r3, [pc, #12]	; (25054 <nm_bus_reset+0x1c>)
   25046:	4798      	blx	r3
   25048:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   2504a:	0018      	movs	r0, r3
   2504c:	46bd      	mov	sp, r7
   2504e:	b002      	add	sp, #8
   25050:	bd80      	pop	{r7, pc}
   25052:	46c0      	nop			; (mov r8, r8)
   25054:	00026e65 	.word	0x00026e65

00025058 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   25058:	b580      	push	{r7, lr}
   2505a:	b082      	sub	sp, #8
   2505c:	af00      	add	r7, sp, #0
   2505e:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   25060:	687b      	ldr	r3, [r7, #4]
   25062:	0018      	movs	r0, r3
   25064:	4b03      	ldr	r3, [pc, #12]	; (25074 <nm_read_reg+0x1c>)
   25066:	4798      	blx	r3
   25068:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   2506a:	0018      	movs	r0, r3
   2506c:	46bd      	mov	sp, r7
   2506e:	b002      	add	sp, #8
   25070:	bd80      	pop	{r7, pc}
   25072:	46c0      	nop			; (mov r8, r8)
   25074:	00026ff9 	.word	0x00026ff9

00025078 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   25078:	b580      	push	{r7, lr}
   2507a:	b082      	sub	sp, #8
   2507c:	af00      	add	r7, sp, #0
   2507e:	6078      	str	r0, [r7, #4]
   25080:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   25082:	683a      	ldr	r2, [r7, #0]
   25084:	687b      	ldr	r3, [r7, #4]
   25086:	0011      	movs	r1, r2
   25088:	0018      	movs	r0, r3
   2508a:	4b03      	ldr	r3, [pc, #12]	; (25098 <nm_read_reg_with_ret+0x20>)
   2508c:	4798      	blx	r3
   2508e:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   25090:	0018      	movs	r0, r3
   25092:	46bd      	mov	sp, r7
   25094:	b002      	add	sp, #8
   25096:	bd80      	pop	{r7, pc}
   25098:	0002701d 	.word	0x0002701d

0002509c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   2509c:	b580      	push	{r7, lr}
   2509e:	b082      	sub	sp, #8
   250a0:	af00      	add	r7, sp, #0
   250a2:	6078      	str	r0, [r7, #4]
   250a4:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   250a6:	683a      	ldr	r2, [r7, #0]
   250a8:	687b      	ldr	r3, [r7, #4]
   250aa:	0011      	movs	r1, r2
   250ac:	0018      	movs	r0, r3
   250ae:	4b03      	ldr	r3, [pc, #12]	; (250bc <nm_write_reg+0x20>)
   250b0:	4798      	blx	r3
   250b2:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   250b4:	0018      	movs	r0, r3
   250b6:	46bd      	mov	sp, r7
   250b8:	b002      	add	sp, #8
   250ba:	bd80      	pop	{r7, pc}
   250bc:	0002706d 	.word	0x0002706d

000250c0 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   250c0:	b580      	push	{r7, lr}
   250c2:	b084      	sub	sp, #16
   250c4:	af00      	add	r7, sp, #0
   250c6:	60f8      	str	r0, [r7, #12]
   250c8:	60b9      	str	r1, [r7, #8]
   250ca:	1dbb      	adds	r3, r7, #6
   250cc:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   250ce:	1dbb      	adds	r3, r7, #6
   250d0:	881a      	ldrh	r2, [r3, #0]
   250d2:	68b9      	ldr	r1, [r7, #8]
   250d4:	68fb      	ldr	r3, [r7, #12]
   250d6:	0018      	movs	r0, r3
   250d8:	4b03      	ldr	r3, [pc, #12]	; (250e8 <p_nm_read_block+0x28>)
   250da:	4798      	blx	r3
   250dc:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   250de:	0018      	movs	r0, r3
   250e0:	46bd      	mov	sp, r7
   250e2:	b004      	add	sp, #16
   250e4:	bd80      	pop	{r7, pc}
   250e6:	46c0      	nop			; (mov r8, r8)
   250e8:	000270bd 	.word	0x000270bd

000250ec <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   250ec:	b580      	push	{r7, lr}
   250ee:	b086      	sub	sp, #24
   250f0:	af00      	add	r7, sp, #0
   250f2:	60f8      	str	r0, [r7, #12]
   250f4:	60b9      	str	r1, [r7, #8]
   250f6:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   250f8:	4b2d      	ldr	r3, [pc, #180]	; (251b0 <nm_read_block+0xc4>)
   250fa:	881a      	ldrh	r2, [r3, #0]
   250fc:	2310      	movs	r3, #16
   250fe:	18fb      	adds	r3, r7, r3
   25100:	3a08      	subs	r2, #8
   25102:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   25104:	2300      	movs	r3, #0
   25106:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   25108:	2313      	movs	r3, #19
   2510a:	18fb      	adds	r3, r7, r3
   2510c:	2200      	movs	r2, #0
   2510e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   25110:	2310      	movs	r3, #16
   25112:	18fb      	adds	r3, r7, r3
   25114:	881a      	ldrh	r2, [r3, #0]
   25116:	687b      	ldr	r3, [r7, #4]
   25118:	429a      	cmp	r2, r3
   2511a:	d313      	bcc.n	25144 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   2511c:	68ba      	ldr	r2, [r7, #8]
   2511e:	697b      	ldr	r3, [r7, #20]
   25120:	18d1      	adds	r1, r2, r3
   25122:	687b      	ldr	r3, [r7, #4]
   25124:	b29a      	uxth	r2, r3
   25126:	68fb      	ldr	r3, [r7, #12]
   25128:	0018      	movs	r0, r3
   2512a:	4b22      	ldr	r3, [pc, #136]	; (251b4 <nm_read_block+0xc8>)
   2512c:	4798      	blx	r3
   2512e:	0003      	movs	r3, r0
   25130:	b2da      	uxtb	r2, r3
   25132:	2313      	movs	r3, #19
   25134:	18fb      	adds	r3, r7, r3
   25136:	781b      	ldrb	r3, [r3, #0]
   25138:	18d3      	adds	r3, r2, r3
   2513a:	b2da      	uxtb	r2, r3
   2513c:	2313      	movs	r3, #19
   2513e:	18fb      	adds	r3, r7, r3
   25140:	701a      	strb	r2, [r3, #0]
			break;
   25142:	e02d      	b.n	251a0 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   25144:	68ba      	ldr	r2, [r7, #8]
   25146:	697b      	ldr	r3, [r7, #20]
   25148:	18d1      	adds	r1, r2, r3
   2514a:	2310      	movs	r3, #16
   2514c:	18fb      	adds	r3, r7, r3
   2514e:	881a      	ldrh	r2, [r3, #0]
   25150:	68fb      	ldr	r3, [r7, #12]
   25152:	0018      	movs	r0, r3
   25154:	4b17      	ldr	r3, [pc, #92]	; (251b4 <nm_read_block+0xc8>)
   25156:	4798      	blx	r3
   25158:	0003      	movs	r3, r0
   2515a:	b2da      	uxtb	r2, r3
   2515c:	2313      	movs	r3, #19
   2515e:	18fb      	adds	r3, r7, r3
   25160:	781b      	ldrb	r3, [r3, #0]
   25162:	18d3      	adds	r3, r2, r3
   25164:	b2da      	uxtb	r2, r3
   25166:	2313      	movs	r3, #19
   25168:	18fb      	adds	r3, r7, r3
   2516a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   2516c:	2313      	movs	r3, #19
   2516e:	18fb      	adds	r3, r7, r3
   25170:	781b      	ldrb	r3, [r3, #0]
   25172:	b25b      	sxtb	r3, r3
   25174:	2b00      	cmp	r3, #0
   25176:	d112      	bne.n	2519e <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   25178:	2310      	movs	r3, #16
   2517a:	18fb      	adds	r3, r7, r3
   2517c:	881b      	ldrh	r3, [r3, #0]
   2517e:	687a      	ldr	r2, [r7, #4]
   25180:	1ad3      	subs	r3, r2, r3
   25182:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   25184:	2310      	movs	r3, #16
   25186:	18fb      	adds	r3, r7, r3
   25188:	881b      	ldrh	r3, [r3, #0]
   2518a:	697a      	ldr	r2, [r7, #20]
   2518c:	18d3      	adds	r3, r2, r3
   2518e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   25190:	2310      	movs	r3, #16
   25192:	18fb      	adds	r3, r7, r3
   25194:	881b      	ldrh	r3, [r3, #0]
   25196:	68fa      	ldr	r2, [r7, #12]
   25198:	18d3      	adds	r3, r2, r3
   2519a:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   2519c:	e7b8      	b.n	25110 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   2519e:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   251a0:	2313      	movs	r3, #19
   251a2:	18fb      	adds	r3, r7, r3
   251a4:	781b      	ldrb	r3, [r3, #0]
   251a6:	b25b      	sxtb	r3, r3
}
   251a8:	0018      	movs	r0, r3
   251aa:	46bd      	mov	sp, r7
   251ac:	b006      	add	sp, #24
   251ae:	bd80      	pop	{r7, pc}
   251b0:	2000012c 	.word	0x2000012c
   251b4:	000250c1 	.word	0x000250c1

000251b8 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   251b8:	b580      	push	{r7, lr}
   251ba:	b084      	sub	sp, #16
   251bc:	af00      	add	r7, sp, #0
   251be:	60f8      	str	r0, [r7, #12]
   251c0:	60b9      	str	r1, [r7, #8]
   251c2:	1dbb      	adds	r3, r7, #6
   251c4:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   251c6:	1dbb      	adds	r3, r7, #6
   251c8:	881a      	ldrh	r2, [r3, #0]
   251ca:	68b9      	ldr	r1, [r7, #8]
   251cc:	68fb      	ldr	r3, [r7, #12]
   251ce:	0018      	movs	r0, r3
   251d0:	4b03      	ldr	r3, [pc, #12]	; (251e0 <p_nm_write_block+0x28>)
   251d2:	4798      	blx	r3
   251d4:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   251d6:	0018      	movs	r0, r3
   251d8:	46bd      	mov	sp, r7
   251da:	b004      	add	sp, #16
   251dc:	bd80      	pop	{r7, pc}
   251de:	46c0      	nop			; (mov r8, r8)
   251e0:	00027115 	.word	0x00027115

000251e4 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   251e4:	b580      	push	{r7, lr}
   251e6:	b086      	sub	sp, #24
   251e8:	af00      	add	r7, sp, #0
   251ea:	60f8      	str	r0, [r7, #12]
   251ec:	60b9      	str	r1, [r7, #8]
   251ee:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   251f0:	4b2d      	ldr	r3, [pc, #180]	; (252a8 <nm_write_block+0xc4>)
   251f2:	881a      	ldrh	r2, [r3, #0]
   251f4:	2310      	movs	r3, #16
   251f6:	18fb      	adds	r3, r7, r3
   251f8:	3a08      	subs	r2, #8
   251fa:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   251fc:	2300      	movs	r3, #0
   251fe:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   25200:	2313      	movs	r3, #19
   25202:	18fb      	adds	r3, r7, r3
   25204:	2200      	movs	r2, #0
   25206:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   25208:	2310      	movs	r3, #16
   2520a:	18fb      	adds	r3, r7, r3
   2520c:	881a      	ldrh	r2, [r3, #0]
   2520e:	687b      	ldr	r3, [r7, #4]
   25210:	429a      	cmp	r2, r3
   25212:	d313      	bcc.n	2523c <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   25214:	68ba      	ldr	r2, [r7, #8]
   25216:	697b      	ldr	r3, [r7, #20]
   25218:	18d1      	adds	r1, r2, r3
   2521a:	687b      	ldr	r3, [r7, #4]
   2521c:	b29a      	uxth	r2, r3
   2521e:	68fb      	ldr	r3, [r7, #12]
   25220:	0018      	movs	r0, r3
   25222:	4b22      	ldr	r3, [pc, #136]	; (252ac <nm_write_block+0xc8>)
   25224:	4798      	blx	r3
   25226:	0003      	movs	r3, r0
   25228:	b2da      	uxtb	r2, r3
   2522a:	2313      	movs	r3, #19
   2522c:	18fb      	adds	r3, r7, r3
   2522e:	781b      	ldrb	r3, [r3, #0]
   25230:	18d3      	adds	r3, r2, r3
   25232:	b2da      	uxtb	r2, r3
   25234:	2313      	movs	r3, #19
   25236:	18fb      	adds	r3, r7, r3
   25238:	701a      	strb	r2, [r3, #0]
			break;
   2523a:	e02d      	b.n	25298 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   2523c:	68ba      	ldr	r2, [r7, #8]
   2523e:	697b      	ldr	r3, [r7, #20]
   25240:	18d1      	adds	r1, r2, r3
   25242:	2310      	movs	r3, #16
   25244:	18fb      	adds	r3, r7, r3
   25246:	881a      	ldrh	r2, [r3, #0]
   25248:	68fb      	ldr	r3, [r7, #12]
   2524a:	0018      	movs	r0, r3
   2524c:	4b17      	ldr	r3, [pc, #92]	; (252ac <nm_write_block+0xc8>)
   2524e:	4798      	blx	r3
   25250:	0003      	movs	r3, r0
   25252:	b2da      	uxtb	r2, r3
   25254:	2313      	movs	r3, #19
   25256:	18fb      	adds	r3, r7, r3
   25258:	781b      	ldrb	r3, [r3, #0]
   2525a:	18d3      	adds	r3, r2, r3
   2525c:	b2da      	uxtb	r2, r3
   2525e:	2313      	movs	r3, #19
   25260:	18fb      	adds	r3, r7, r3
   25262:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   25264:	2313      	movs	r3, #19
   25266:	18fb      	adds	r3, r7, r3
   25268:	781b      	ldrb	r3, [r3, #0]
   2526a:	b25b      	sxtb	r3, r3
   2526c:	2b00      	cmp	r3, #0
   2526e:	d112      	bne.n	25296 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   25270:	2310      	movs	r3, #16
   25272:	18fb      	adds	r3, r7, r3
   25274:	881b      	ldrh	r3, [r3, #0]
   25276:	687a      	ldr	r2, [r7, #4]
   25278:	1ad3      	subs	r3, r2, r3
   2527a:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   2527c:	2310      	movs	r3, #16
   2527e:	18fb      	adds	r3, r7, r3
   25280:	881b      	ldrh	r3, [r3, #0]
   25282:	697a      	ldr	r2, [r7, #20]
   25284:	18d3      	adds	r3, r2, r3
   25286:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   25288:	2310      	movs	r3, #16
   2528a:	18fb      	adds	r3, r7, r3
   2528c:	881b      	ldrh	r3, [r3, #0]
   2528e:	68fa      	ldr	r2, [r7, #12]
   25290:	18d3      	adds	r3, r2, r3
   25292:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   25294:	e7b8      	b.n	25208 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   25296:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   25298:	2313      	movs	r3, #19
   2529a:	18fb      	adds	r3, r7, r3
   2529c:	781b      	ldrb	r3, [r3, #0]
   2529e:	b25b      	sxtb	r3, r3
}
   252a0:	0018      	movs	r0, r3
   252a2:	46bd      	mov	sp, r7
   252a4:	b006      	add	sp, #24
   252a6:	bd80      	pop	{r7, pc}
   252a8:	2000012c 	.word	0x2000012c
   252ac:	000251b9 	.word	0x000251b9

000252b0 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   252b0:	b590      	push	{r4, r7, lr}
   252b2:	b089      	sub	sp, #36	; 0x24
   252b4:	af00      	add	r7, sp, #0
   252b6:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   252b8:	2300      	movs	r3, #0
   252ba:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   252bc:	231f      	movs	r3, #31
   252be:	18fb      	adds	r3, r7, r3
   252c0:	2200      	movs	r2, #0
   252c2:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   252c4:	230c      	movs	r3, #12
   252c6:	18fb      	adds	r3, r7, r3
   252c8:	0018      	movs	r0, r3
   252ca:	2308      	movs	r3, #8
   252cc:	001a      	movs	r2, r3
   252ce:	2100      	movs	r1, #0
   252d0:	4b64      	ldr	r3, [pc, #400]	; (25464 <nm_get_firmware_full_info+0x1b4>)
   252d2:	4798      	blx	r3
	if (pstrRev != NULL)
   252d4:	687b      	ldr	r3, [r7, #4]
   252d6:	2b00      	cmp	r3, #0
   252d8:	d100      	bne.n	252dc <nm_get_firmware_full_info+0x2c>
   252da:	e0ba      	b.n	25452 <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   252dc:	687b      	ldr	r3, [r7, #4]
   252de:	2228      	movs	r2, #40	; 0x28
   252e0:	2100      	movs	r1, #0
   252e2:	0018      	movs	r0, r3
   252e4:	4b60      	ldr	r3, [pc, #384]	; (25468 <nm_get_firmware_full_info+0x1b8>)
   252e6:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   252e8:	231f      	movs	r3, #31
   252ea:	18fc      	adds	r4, r7, r3
   252ec:	2314      	movs	r3, #20
   252ee:	18fb      	adds	r3, r7, r3
   252f0:	4a5e      	ldr	r2, [pc, #376]	; (2546c <nm_get_firmware_full_info+0x1bc>)
   252f2:	0019      	movs	r1, r3
   252f4:	0010      	movs	r0, r2
   252f6:	4b5e      	ldr	r3, [pc, #376]	; (25470 <nm_get_firmware_full_info+0x1c0>)
   252f8:	4798      	blx	r3
   252fa:	0003      	movs	r3, r0
   252fc:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   252fe:	231f      	movs	r3, #31
   25300:	18fb      	adds	r3, r7, r3
   25302:	781b      	ldrb	r3, [r3, #0]
   25304:	b25b      	sxtb	r3, r3
   25306:	2b00      	cmp	r3, #0
   25308:	d000      	beq.n	2530c <nm_get_firmware_full_info+0x5c>
   2530a:	e0a2      	b.n	25452 <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   2530c:	697b      	ldr	r3, [r7, #20]
   2530e:	2b00      	cmp	r3, #0
   25310:	d100      	bne.n	25314 <nm_get_firmware_full_info+0x64>
   25312:	e09a      	b.n	2544a <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   25314:	697b      	ldr	r3, [r7, #20]
   25316:	22c0      	movs	r2, #192	; 0xc0
   25318:	0292      	lsls	r2, r2, #10
   2531a:	4313      	orrs	r3, r2
   2531c:	221f      	movs	r2, #31
   2531e:	18bc      	adds	r4, r7, r2
   25320:	220c      	movs	r2, #12
   25322:	18b9      	adds	r1, r7, r2
   25324:	2208      	movs	r2, #8
   25326:	0018      	movs	r0, r3
   25328:	4b52      	ldr	r3, [pc, #328]	; (25474 <nm_get_firmware_full_info+0x1c4>)
   2532a:	4798      	blx	r3
   2532c:	0003      	movs	r3, r0
   2532e:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   25330:	231f      	movs	r3, #31
   25332:	18fb      	adds	r3, r7, r3
   25334:	781b      	ldrb	r3, [r3, #0]
   25336:	b25b      	sxtb	r3, r3
   25338:	2b00      	cmp	r3, #0
   2533a:	d000      	beq.n	2533e <nm_get_firmware_full_info+0x8e>
   2533c:	e089      	b.n	25452 <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   2533e:	230c      	movs	r3, #12
   25340:	18fb      	adds	r3, r7, r3
   25342:	685b      	ldr	r3, [r3, #4]
   25344:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   25346:	697b      	ldr	r3, [r7, #20]
   25348:	041b      	lsls	r3, r3, #16
   2534a:	0c1b      	lsrs	r3, r3, #16
   2534c:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   2534e:	697b      	ldr	r3, [r7, #20]
   25350:	2b00      	cmp	r3, #0
   25352:	d100      	bne.n	25356 <nm_get_firmware_full_info+0xa6>
   25354:	e074      	b.n	25440 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   25356:	697b      	ldr	r3, [r7, #20]
   25358:	22c0      	movs	r2, #192	; 0xc0
   2535a:	0292      	lsls	r2, r2, #10
   2535c:	4313      	orrs	r3, r2
   2535e:	221f      	movs	r2, #31
   25360:	18bc      	adds	r4, r7, r2
   25362:	6879      	ldr	r1, [r7, #4]
   25364:	2228      	movs	r2, #40	; 0x28
   25366:	0018      	movs	r0, r3
   25368:	4b42      	ldr	r3, [pc, #264]	; (25474 <nm_get_firmware_full_info+0x1c4>)
   2536a:	4798      	blx	r3
   2536c:	0003      	movs	r3, r0
   2536e:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   25370:	231f      	movs	r3, #31
   25372:	18fb      	adds	r3, r7, r3
   25374:	781b      	ldrb	r3, [r3, #0]
   25376:	b25b      	sxtb	r3, r3
   25378:	2b00      	cmp	r3, #0
   2537a:	d16a      	bne.n	25452 <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   2537c:	687b      	ldr	r3, [r7, #4]
   2537e:	791b      	ldrb	r3, [r3, #4]
   25380:	021b      	lsls	r3, r3, #8
   25382:	b21a      	sxth	r2, r3
   25384:	687b      	ldr	r3, [r7, #4]
   25386:	795b      	ldrb	r3, [r3, #5]
   25388:	011b      	lsls	r3, r3, #4
   2538a:	b21b      	sxth	r3, r3
   2538c:	21ff      	movs	r1, #255	; 0xff
   2538e:	400b      	ands	r3, r1
   25390:	b21b      	sxth	r3, r3
   25392:	4313      	orrs	r3, r2
   25394:	b21a      	sxth	r2, r3
   25396:	687b      	ldr	r3, [r7, #4]
   25398:	799b      	ldrb	r3, [r3, #6]
   2539a:	b21b      	sxth	r3, r3
   2539c:	210f      	movs	r1, #15
   2539e:	400b      	ands	r3, r1
   253a0:	b21b      	sxth	r3, r3
   253a2:	4313      	orrs	r3, r2
   253a4:	b21a      	sxth	r2, r3
   253a6:	231c      	movs	r3, #28
   253a8:	18fb      	adds	r3, r7, r3
   253aa:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   253ac:	231a      	movs	r3, #26
   253ae:	18fb      	adds	r3, r7, r3
   253b0:	4a31      	ldr	r2, [pc, #196]	; (25478 <nm_get_firmware_full_info+0x1c8>)
   253b2:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   253b4:	687b      	ldr	r3, [r7, #4]
   253b6:	79db      	ldrb	r3, [r3, #7]
   253b8:	021b      	lsls	r3, r3, #8
   253ba:	b21a      	sxth	r2, r3
   253bc:	687b      	ldr	r3, [r7, #4]
   253be:	7a1b      	ldrb	r3, [r3, #8]
   253c0:	011b      	lsls	r3, r3, #4
   253c2:	b21b      	sxth	r3, r3
   253c4:	21ff      	movs	r1, #255	; 0xff
   253c6:	400b      	ands	r3, r1
   253c8:	b21b      	sxth	r3, r3
   253ca:	4313      	orrs	r3, r2
   253cc:	b21a      	sxth	r2, r3
   253ce:	687b      	ldr	r3, [r7, #4]
   253d0:	7a5b      	ldrb	r3, [r3, #9]
   253d2:	b21b      	sxth	r3, r3
   253d4:	210f      	movs	r1, #15
   253d6:	400b      	ands	r3, r1
   253d8:	b21b      	sxth	r3, r3
   253da:	4313      	orrs	r3, r2
   253dc:	b21a      	sxth	r2, r3
   253de:	2318      	movs	r3, #24
   253e0:	18fb      	adds	r3, r7, r3
   253e2:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   253e4:	231c      	movs	r3, #28
   253e6:	18fb      	adds	r3, r7, r3
   253e8:	881b      	ldrh	r3, [r3, #0]
   253ea:	2b00      	cmp	r3, #0
   253ec:	d009      	beq.n	25402 <nm_get_firmware_full_info+0x152>
   253ee:	2318      	movs	r3, #24
   253f0:	18fb      	adds	r3, r7, r3
   253f2:	881b      	ldrh	r3, [r3, #0]
   253f4:	2b00      	cmp	r3, #0
   253f6:	d004      	beq.n	25402 <nm_get_firmware_full_info+0x152>
   253f8:	2318      	movs	r3, #24
   253fa:	18fb      	adds	r3, r7, r3
   253fc:	881b      	ldrh	r3, [r3, #0]
   253fe:	2b00      	cmp	r3, #0
   25400:	d104      	bne.n	2540c <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   25402:	231f      	movs	r3, #31
   25404:	18fb      	adds	r3, r7, r3
   25406:	22f4      	movs	r2, #244	; 0xf4
   25408:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   2540a:	e022      	b.n	25452 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   2540c:	231a      	movs	r3, #26
   2540e:	18fa      	adds	r2, r7, r3
   25410:	2318      	movs	r3, #24
   25412:	18fb      	adds	r3, r7, r3
   25414:	8812      	ldrh	r2, [r2, #0]
   25416:	881b      	ldrh	r3, [r3, #0]
   25418:	429a      	cmp	r2, r3
   2541a:	d204      	bcs.n	25426 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   2541c:	231f      	movs	r3, #31
   2541e:	18fb      	adds	r3, r7, r3
   25420:	22f3      	movs	r2, #243	; 0xf3
   25422:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   25424:	e015      	b.n	25452 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   25426:	231a      	movs	r3, #26
   25428:	18fa      	adds	r2, r7, r3
   2542a:	231c      	movs	r3, #28
   2542c:	18fb      	adds	r3, r7, r3
   2542e:	8812      	ldrh	r2, [r2, #0]
   25430:	881b      	ldrh	r3, [r3, #0]
   25432:	429a      	cmp	r2, r3
   25434:	d90d      	bls.n	25452 <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   25436:	231f      	movs	r3, #31
   25438:	18fb      	adds	r3, r7, r3
   2543a:	22f3      	movs	r2, #243	; 0xf3
   2543c:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   2543e:	e008      	b.n	25452 <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   25440:	231f      	movs	r3, #31
   25442:	18fb      	adds	r3, r7, r3
   25444:	22f4      	movs	r2, #244	; 0xf4
   25446:	701a      	strb	r2, [r3, #0]
   25448:	e003      	b.n	25452 <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   2544a:	231f      	movs	r3, #31
   2544c:	18fb      	adds	r3, r7, r3
   2544e:	22f4      	movs	r2, #244	; 0xf4
   25450:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   25452:	231f      	movs	r3, #31
   25454:	18fb      	adds	r3, r7, r3
   25456:	781b      	ldrb	r3, [r3, #0]
   25458:	b25b      	sxtb	r3, r3
}
   2545a:	0018      	movs	r0, r3
   2545c:	46bd      	mov	sp, r7
   2545e:	b009      	add	sp, #36	; 0x24
   25460:	bd90      	pop	{r4, r7, pc}
   25462:	46c0      	nop			; (mov r8, r8)
   25464:	0003794b 	.word	0x0003794b
   25468:	00022fe9 	.word	0x00022fe9
   2546c:	000c0008 	.word	0x000c0008
   25470:	00025079 	.word	0x00025079
   25474:	000250ed 	.word	0x000250ed
   25478:	00001354 	.word	0x00001354

0002547c <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   2547c:	b590      	push	{r4, r7, lr}
   2547e:	b085      	sub	sp, #20
   25480:	af00      	add	r7, sp, #0
   25482:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   25484:	230f      	movs	r3, #15
   25486:	18fb      	adds	r3, r7, r3
   25488:	2200      	movs	r2, #0
   2548a:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   2548c:	687b      	ldr	r3, [r7, #4]
   2548e:	2b00      	cmp	r3, #0
   25490:	d013      	beq.n	254ba <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   25492:	230e      	movs	r3, #14
   25494:	18fb      	adds	r3, r7, r3
   25496:	687a      	ldr	r2, [r7, #4]
   25498:	7812      	ldrb	r2, [r2, #0]
   2549a:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   2549c:	230e      	movs	r3, #14
   2549e:	18fb      	adds	r3, r7, r3
   254a0:	781b      	ldrb	r3, [r3, #0]
   254a2:	2b00      	cmp	r3, #0
   254a4:	d004      	beq.n	254b0 <nm_drv_init+0x34>
   254a6:	230e      	movs	r3, #14
   254a8:	18fb      	adds	r3, r7, r3
   254aa:	781b      	ldrb	r3, [r3, #0]
   254ac:	2b04      	cmp	r3, #4
   254ae:	d908      	bls.n	254c2 <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   254b0:	230e      	movs	r3, #14
   254b2:	18fb      	adds	r3, r7, r3
   254b4:	2201      	movs	r2, #1
   254b6:	701a      	strb	r2, [r3, #0]
   254b8:	e003      	b.n	254c2 <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   254ba:	230e      	movs	r3, #14
   254bc:	18fb      	adds	r3, r7, r3
   254be:	2201      	movs	r2, #1
   254c0:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   254c2:	230f      	movs	r3, #15
   254c4:	18fc      	adds	r4, r7, r3
   254c6:	2000      	movs	r0, #0
   254c8:	4b41      	ldr	r3, [pc, #260]	; (255d0 <nm_drv_init+0x154>)
   254ca:	4798      	blx	r3
   254cc:	0003      	movs	r3, r0
   254ce:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   254d0:	230f      	movs	r3, #15
   254d2:	18fb      	adds	r3, r7, r3
   254d4:	781b      	ldrb	r3, [r3, #0]
   254d6:	b25b      	sxtb	r3, r3
   254d8:	2b00      	cmp	r3, #0
   254da:	d00f      	beq.n	254fc <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   254dc:	2390      	movs	r3, #144	; 0x90
   254de:	005a      	lsls	r2, r3, #1
   254e0:	493c      	ldr	r1, [pc, #240]	; (255d4 <nm_drv_init+0x158>)
   254e2:	4b3d      	ldr	r3, [pc, #244]	; (255d8 <nm_drv_init+0x15c>)
   254e4:	0018      	movs	r0, r3
   254e6:	4b3d      	ldr	r3, [pc, #244]	; (255dc <nm_drv_init+0x160>)
   254e8:	4798      	blx	r3
   254ea:	4b3d      	ldr	r3, [pc, #244]	; (255e0 <nm_drv_init+0x164>)
   254ec:	0018      	movs	r0, r3
   254ee:	4b3b      	ldr	r3, [pc, #236]	; (255dc <nm_drv_init+0x160>)
   254f0:	4798      	blx	r3
   254f2:	4b3c      	ldr	r3, [pc, #240]	; (255e4 <nm_drv_init+0x168>)
   254f4:	0018      	movs	r0, r3
   254f6:	4b39      	ldr	r3, [pc, #228]	; (255dc <nm_drv_init+0x160>)
   254f8:	4798      	blx	r3
		goto ERR1;
   254fa:	e061      	b.n	255c0 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   254fc:	4b3a      	ldr	r3, [pc, #232]	; (255e8 <nm_drv_init+0x16c>)
   254fe:	0018      	movs	r0, r3
   25500:	4b36      	ldr	r3, [pc, #216]	; (255dc <nm_drv_init+0x160>)
   25502:	4798      	blx	r3
   25504:	4b39      	ldr	r3, [pc, #228]	; (255ec <nm_drv_init+0x170>)
   25506:	4798      	blx	r3
   25508:	0002      	movs	r2, r0
   2550a:	4b39      	ldr	r3, [pc, #228]	; (255f0 <nm_drv_init+0x174>)
   2550c:	0011      	movs	r1, r2
   2550e:	0018      	movs	r0, r3
   25510:	4b32      	ldr	r3, [pc, #200]	; (255dc <nm_drv_init+0x160>)
   25512:	4798      	blx	r3
   25514:	4b33      	ldr	r3, [pc, #204]	; (255e4 <nm_drv_init+0x168>)
   25516:	0018      	movs	r0, r3
   25518:	4b30      	ldr	r3, [pc, #192]	; (255dc <nm_drv_init+0x160>)
   2551a:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   2551c:	4b35      	ldr	r3, [pc, #212]	; (255f4 <nm_drv_init+0x178>)
   2551e:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   25520:	230f      	movs	r3, #15
   25522:	18fc      	adds	r4, r7, r3
   25524:	230e      	movs	r3, #14
   25526:	18fb      	adds	r3, r7, r3
   25528:	781b      	ldrb	r3, [r3, #0]
   2552a:	0018      	movs	r0, r3
   2552c:	4b32      	ldr	r3, [pc, #200]	; (255f8 <nm_drv_init+0x17c>)
   2552e:	4798      	blx	r3
   25530:	0003      	movs	r3, r0
   25532:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   25534:	230f      	movs	r3, #15
   25536:	18fb      	adds	r3, r7, r3
   25538:	781b      	ldrb	r3, [r3, #0]
   2553a:	b25b      	sxtb	r3, r3
   2553c:	2b00      	cmp	r3, #0
   2553e:	d13a      	bne.n	255b6 <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   25540:	230f      	movs	r3, #15
   25542:	18fc      	adds	r4, r7, r3
   25544:	230e      	movs	r3, #14
   25546:	18fb      	adds	r3, r7, r3
   25548:	781b      	ldrb	r3, [r3, #0]
   2554a:	0018      	movs	r0, r3
   2554c:	4b2b      	ldr	r3, [pc, #172]	; (255fc <nm_drv_init+0x180>)
   2554e:	4798      	blx	r3
   25550:	0003      	movs	r3, r0
   25552:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   25554:	230f      	movs	r3, #15
   25556:	18fb      	adds	r3, r7, r3
   25558:	781b      	ldrb	r3, [r3, #0]
   2555a:	b25b      	sxtb	r3, r3
   2555c:	2b00      	cmp	r3, #0
   2555e:	d12c      	bne.n	255ba <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   25560:	230e      	movs	r3, #14
   25562:	18fb      	adds	r3, r7, r3
   25564:	781b      	ldrb	r3, [r3, #0]
   25566:	2b02      	cmp	r3, #2
   25568:	d02a      	beq.n	255c0 <nm_drv_init+0x144>
   2556a:	230e      	movs	r3, #14
   2556c:	18fb      	adds	r3, r7, r3
   2556e:	781b      	ldrb	r3, [r3, #0]
   25570:	2b03      	cmp	r3, #3
   25572:	d025      	beq.n	255c0 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   25574:	230f      	movs	r3, #15
   25576:	18fc      	adds	r4, r7, r3
   25578:	4b21      	ldr	r3, [pc, #132]	; (25600 <nm_drv_init+0x184>)
   2557a:	4798      	blx	r3
   2557c:	0003      	movs	r3, r0
   2557e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   25580:	230f      	movs	r3, #15
   25582:	18fb      	adds	r3, r7, r3
   25584:	781b      	ldrb	r3, [r3, #0]
   25586:	b25b      	sxtb	r3, r3
   25588:	2b00      	cmp	r3, #0
   2558a:	d00f      	beq.n	255ac <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   2558c:	23a7      	movs	r3, #167	; 0xa7
   2558e:	005a      	lsls	r2, r3, #1
   25590:	4910      	ldr	r1, [pc, #64]	; (255d4 <nm_drv_init+0x158>)
   25592:	4b11      	ldr	r3, [pc, #68]	; (255d8 <nm_drv_init+0x15c>)
   25594:	0018      	movs	r0, r3
   25596:	4b11      	ldr	r3, [pc, #68]	; (255dc <nm_drv_init+0x160>)
   25598:	4798      	blx	r3
   2559a:	4b1a      	ldr	r3, [pc, #104]	; (25604 <nm_drv_init+0x188>)
   2559c:	0018      	movs	r0, r3
   2559e:	4b0f      	ldr	r3, [pc, #60]	; (255dc <nm_drv_init+0x160>)
   255a0:	4798      	blx	r3
   255a2:	4b10      	ldr	r3, [pc, #64]	; (255e4 <nm_drv_init+0x168>)
   255a4:	0018      	movs	r0, r3
   255a6:	4b0d      	ldr	r3, [pc, #52]	; (255dc <nm_drv_init+0x160>)
   255a8:	4798      	blx	r3
		goto ERR2;
   255aa:	e007      	b.n	255bc <nm_drv_init+0x140>
	}
	return ret;
   255ac:	230f      	movs	r3, #15
   255ae:	18fb      	adds	r3, r7, r3
   255b0:	781b      	ldrb	r3, [r3, #0]
   255b2:	b25b      	sxtb	r3, r3
   255b4:	e008      	b.n	255c8 <nm_drv_init+0x14c>
		goto ERR2;
   255b6:	46c0      	nop			; (mov r8, r8)
   255b8:	e000      	b.n	255bc <nm_drv_init+0x140>
		goto ERR2;
   255ba:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   255bc:	4b12      	ldr	r3, [pc, #72]	; (25608 <nm_drv_init+0x18c>)
   255be:	4798      	blx	r3
ERR1:
	return ret;
   255c0:	230f      	movs	r3, #15
   255c2:	18fb      	adds	r3, r7, r3
   255c4:	781b      	ldrb	r3, [r3, #0]
   255c6:	b25b      	sxtb	r3, r3
}
   255c8:	0018      	movs	r0, r3
   255ca:	46bd      	mov	sp, r7
   255cc:	b005      	add	sp, #20
   255ce:	bd90      	pop	{r4, r7, pc}
   255d0:	00024fdd 	.word	0x00024fdd
   255d4:	0003bf14 	.word	0x0003bf14
   255d8:	0003be44 	.word	0x0003be44
   255dc:	00020329 	.word	0x00020329
   255e0:	0003be58 	.word	0x0003be58
   255e4:	0003be74 	.word	0x0003be74
   255e8:	0003be78 	.word	0x0003be78
   255ec:	00024979 	.word	0x00024979
   255f0:	0003be84 	.word	0x0003be84
   255f4:	00026e95 	.word	0x00026e95
   255f8:	00024cd1 	.word	0x00024cd1
   255fc:	00024e69 	.word	0x00024e69
   25600:	000248c5 	.word	0x000248c5
   25604:	0003be94 	.word	0x0003be94
   25608:	00025011 	.word	0x00025011

0002560c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   2560c:	b590      	push	{r4, r7, lr}
   2560e:	b085      	sub	sp, #20
   25610:	af00      	add	r7, sp, #0
   25612:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   25614:	230f      	movs	r3, #15
   25616:	18fc      	adds	r4, r7, r3
   25618:	4b2e      	ldr	r3, [pc, #184]	; (256d4 <nm_drv_deinit+0xc8>)
   2561a:	4798      	blx	r3
   2561c:	0003      	movs	r3, r0
   2561e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   25620:	230f      	movs	r3, #15
   25622:	18fb      	adds	r3, r7, r3
   25624:	781b      	ldrb	r3, [r3, #0]
   25626:	b25b      	sxtb	r3, r3
   25628:	2b00      	cmp	r3, #0
   2562a:	d010      	beq.n	2564e <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   2562c:	2366      	movs	r3, #102	; 0x66
   2562e:	33ff      	adds	r3, #255	; 0xff
   25630:	001a      	movs	r2, r3
   25632:	4929      	ldr	r1, [pc, #164]	; (256d8 <nm_drv_deinit+0xcc>)
   25634:	4b29      	ldr	r3, [pc, #164]	; (256dc <nm_drv_deinit+0xd0>)
   25636:	0018      	movs	r0, r3
   25638:	4b29      	ldr	r3, [pc, #164]	; (256e0 <nm_drv_deinit+0xd4>)
   2563a:	4798      	blx	r3
   2563c:	4b29      	ldr	r3, [pc, #164]	; (256e4 <nm_drv_deinit+0xd8>)
   2563e:	0018      	movs	r0, r3
   25640:	4b27      	ldr	r3, [pc, #156]	; (256e0 <nm_drv_deinit+0xd4>)
   25642:	4798      	blx	r3
   25644:	4b28      	ldr	r3, [pc, #160]	; (256e8 <nm_drv_deinit+0xdc>)
   25646:	0018      	movs	r0, r3
   25648:	4b25      	ldr	r3, [pc, #148]	; (256e0 <nm_drv_deinit+0xd4>)
   2564a:	4798      	blx	r3
		goto ERR1;
   2564c:	e03a      	b.n	256c4 <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   2564e:	230f      	movs	r3, #15
   25650:	18fc      	adds	r4, r7, r3
   25652:	2000      	movs	r0, #0
   25654:	4b25      	ldr	r3, [pc, #148]	; (256ec <nm_drv_deinit+0xe0>)
   25656:	4798      	blx	r3
   25658:	0003      	movs	r3, r0
   2565a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2565c:	230f      	movs	r3, #15
   2565e:	18fb      	adds	r3, r7, r3
   25660:	781b      	ldrb	r3, [r3, #0]
   25662:	b25b      	sxtb	r3, r3
   25664:	2b00      	cmp	r3, #0
   25666:	d00f      	beq.n	25688 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   25668:	23b6      	movs	r3, #182	; 0xb6
   2566a:	005a      	lsls	r2, r3, #1
   2566c:	491a      	ldr	r1, [pc, #104]	; (256d8 <nm_drv_deinit+0xcc>)
   2566e:	4b1b      	ldr	r3, [pc, #108]	; (256dc <nm_drv_deinit+0xd0>)
   25670:	0018      	movs	r0, r3
   25672:	4b1b      	ldr	r3, [pc, #108]	; (256e0 <nm_drv_deinit+0xd4>)
   25674:	4798      	blx	r3
   25676:	4b1e      	ldr	r3, [pc, #120]	; (256f0 <nm_drv_deinit+0xe4>)
   25678:	0018      	movs	r0, r3
   2567a:	4b19      	ldr	r3, [pc, #100]	; (256e0 <nm_drv_deinit+0xd4>)
   2567c:	4798      	blx	r3
   2567e:	4b1a      	ldr	r3, [pc, #104]	; (256e8 <nm_drv_deinit+0xdc>)
   25680:	0018      	movs	r0, r3
   25682:	4b17      	ldr	r3, [pc, #92]	; (256e0 <nm_drv_deinit+0xd4>)
   25684:	4798      	blx	r3
		goto ERR1;
   25686:	e01d      	b.n	256c4 <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   25688:	230f      	movs	r3, #15
   2568a:	18fc      	adds	r4, r7, r3
   2568c:	4b19      	ldr	r3, [pc, #100]	; (256f4 <nm_drv_deinit+0xe8>)
   2568e:	4798      	blx	r3
   25690:	0003      	movs	r3, r0
   25692:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   25694:	230f      	movs	r3, #15
   25696:	18fb      	adds	r3, r7, r3
   25698:	781b      	ldrb	r3, [r3, #0]
   2569a:	b25b      	sxtb	r3, r3
   2569c:	2b00      	cmp	r3, #0
   2569e:	d00f      	beq.n	256c0 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   256a0:	23b9      	movs	r3, #185	; 0xb9
   256a2:	005a      	lsls	r2, r3, #1
   256a4:	490c      	ldr	r1, [pc, #48]	; (256d8 <nm_drv_deinit+0xcc>)
   256a6:	4b0d      	ldr	r3, [pc, #52]	; (256dc <nm_drv_deinit+0xd0>)
   256a8:	0018      	movs	r0, r3
   256aa:	4b0d      	ldr	r3, [pc, #52]	; (256e0 <nm_drv_deinit+0xd4>)
   256ac:	4798      	blx	r3
   256ae:	4b12      	ldr	r3, [pc, #72]	; (256f8 <nm_drv_deinit+0xec>)
   256b0:	0018      	movs	r0, r3
   256b2:	4b0b      	ldr	r3, [pc, #44]	; (256e0 <nm_drv_deinit+0xd4>)
   256b4:	4798      	blx	r3
   256b6:	4b0c      	ldr	r3, [pc, #48]	; (256e8 <nm_drv_deinit+0xdc>)
   256b8:	0018      	movs	r0, r3
   256ba:	4b09      	ldr	r3, [pc, #36]	; (256e0 <nm_drv_deinit+0xd4>)
   256bc:	4798      	blx	r3
		goto ERR1;
   256be:	e001      	b.n	256c4 <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   256c0:	4b0e      	ldr	r3, [pc, #56]	; (256fc <nm_drv_deinit+0xf0>)
   256c2:	4798      	blx	r3
#endif

ERR1:
	return ret;
   256c4:	230f      	movs	r3, #15
   256c6:	18fb      	adds	r3, r7, r3
   256c8:	781b      	ldrb	r3, [r3, #0]
   256ca:	b25b      	sxtb	r3, r3
}
   256cc:	0018      	movs	r0, r3
   256ce:	46bd      	mov	sp, r7
   256d0:	b005      	add	sp, #20
   256d2:	bd90      	pop	{r4, r7, pc}
   256d4:	00024f1d 	.word	0x00024f1d
   256d8:	0003bf20 	.word	0x0003bf20
   256dc:	0003be44 	.word	0x0003be44
   256e0:	00020329 	.word	0x00020329
   256e4:	0003beb4 	.word	0x0003beb4
   256e8:	0003be74 	.word	0x0003be74
   256ec:	0002833d 	.word	0x0002833d
   256f0:	0003bed4 	.word	0x0003bed4
   256f4:	00025011 	.word	0x00025011
   256f8:	0003bef8 	.word	0x0003bef8
   256fc:	00026fe1 	.word	0x00026fe1

00025700 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   25700:	b580      	push	{r7, lr}
   25702:	b086      	sub	sp, #24
   25704:	af00      	add	r7, sp, #0
   25706:	6078      	str	r0, [r7, #4]
   25708:	000a      	movs	r2, r1
   2570a:	1cbb      	adds	r3, r7, #2
   2570c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   2570e:	230c      	movs	r3, #12
   25710:	18fb      	adds	r3, r7, r3
   25712:	2200      	movs	r2, #0
   25714:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   25716:	230c      	movs	r3, #12
   25718:	18fb      	adds	r3, r7, r3
   2571a:	687a      	ldr	r2, [r7, #4]
   2571c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   2571e:	230c      	movs	r3, #12
   25720:	18fb      	adds	r3, r7, r3
   25722:	1cba      	adds	r2, r7, #2
   25724:	8812      	ldrh	r2, [r2, #0]
   25726:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   25728:	230c      	movs	r3, #12
   2572a:	18fb      	adds	r3, r7, r3
   2572c:	0019      	movs	r1, r3
   2572e:	2003      	movs	r0, #3
   25730:	4b03      	ldr	r3, [pc, #12]	; (25740 <nmi_spi_read+0x40>)
   25732:	4798      	blx	r3
   25734:	0003      	movs	r3, r0
}
   25736:	0018      	movs	r0, r3
   25738:	46bd      	mov	sp, r7
   2573a:	b006      	add	sp, #24
   2573c:	bd80      	pop	{r7, pc}
   2573e:	46c0      	nop			; (mov r8, r8)
   25740:	00022ead 	.word	0x00022ead

00025744 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   25744:	b580      	push	{r7, lr}
   25746:	b086      	sub	sp, #24
   25748:	af00      	add	r7, sp, #0
   2574a:	6078      	str	r0, [r7, #4]
   2574c:	000a      	movs	r2, r1
   2574e:	1cbb      	adds	r3, r7, #2
   25750:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   25752:	230c      	movs	r3, #12
   25754:	18fb      	adds	r3, r7, r3
   25756:	687a      	ldr	r2, [r7, #4]
   25758:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   2575a:	230c      	movs	r3, #12
   2575c:	18fb      	adds	r3, r7, r3
   2575e:	2200      	movs	r2, #0
   25760:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   25762:	230c      	movs	r3, #12
   25764:	18fb      	adds	r3, r7, r3
   25766:	1cba      	adds	r2, r7, #2
   25768:	8812      	ldrh	r2, [r2, #0]
   2576a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   2576c:	230c      	movs	r3, #12
   2576e:	18fb      	adds	r3, r7, r3
   25770:	0019      	movs	r1, r3
   25772:	2003      	movs	r0, #3
   25774:	4b03      	ldr	r3, [pc, #12]	; (25784 <nmi_spi_write+0x40>)
   25776:	4798      	blx	r3
   25778:	0003      	movs	r3, r0
}
   2577a:	0018      	movs	r0, r3
   2577c:	46bd      	mov	sp, r7
   2577e:	b006      	add	sp, #24
   25780:	bd80      	pop	{r7, pc}
   25782:	46c0      	nop			; (mov r8, r8)
   25784:	00022ead 	.word	0x00022ead

00025788 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   25788:	b580      	push	{r7, lr}
   2578a:	b088      	sub	sp, #32
   2578c:	af00      	add	r7, sp, #0
   2578e:	60f8      	str	r0, [r7, #12]
   25790:	60b9      	str	r1, [r7, #8]
   25792:	1dbb      	adds	r3, r7, #6
   25794:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   25796:	2314      	movs	r3, #20
   25798:	18fb      	adds	r3, r7, r3
   2579a:	68fa      	ldr	r2, [r7, #12]
   2579c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   2579e:	2314      	movs	r3, #20
   257a0:	18fb      	adds	r3, r7, r3
   257a2:	68ba      	ldr	r2, [r7, #8]
   257a4:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   257a6:	2314      	movs	r3, #20
   257a8:	18fb      	adds	r3, r7, r3
   257aa:	1dba      	adds	r2, r7, #6
   257ac:	8812      	ldrh	r2, [r2, #0]
   257ae:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   257b0:	2314      	movs	r3, #20
   257b2:	18fb      	adds	r3, r7, r3
   257b4:	0019      	movs	r1, r3
   257b6:	2003      	movs	r0, #3
   257b8:	4b03      	ldr	r3, [pc, #12]	; (257c8 <nmi_spi_rw+0x40>)
   257ba:	4798      	blx	r3
   257bc:	0003      	movs	r3, r0
}
   257be:	0018      	movs	r0, r3
   257c0:	46bd      	mov	sp, r7
   257c2:	b008      	add	sp, #32
   257c4:	bd80      	pop	{r7, pc}
   257c6:	46c0      	nop			; (mov r8, r8)
   257c8:	00022ead 	.word	0x00022ead

000257cc <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   257cc:	b580      	push	{r7, lr}
   257ce:	b082      	sub	sp, #8
   257d0:	af00      	add	r7, sp, #0
   257d2:	0002      	movs	r2, r0
   257d4:	1dfb      	adds	r3, r7, #7
   257d6:	701a      	strb	r2, [r3, #0]
   257d8:	1dbb      	adds	r3, r7, #6
   257da:	1c0a      	adds	r2, r1, #0
   257dc:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   257de:	1dfb      	adds	r3, r7, #7
   257e0:	781b      	ldrb	r3, [r3, #0]
   257e2:	005a      	lsls	r2, r3, #1
   257e4:	1dbb      	adds	r3, r7, #6
   257e6:	781b      	ldrb	r3, [r3, #0]
   257e8:	4053      	eors	r3, r2
   257ea:	4a03      	ldr	r2, [pc, #12]	; (257f8 <crc7_byte+0x2c>)
   257ec:	5cd3      	ldrb	r3, [r2, r3]
}
   257ee:	0018      	movs	r0, r3
   257f0:	46bd      	mov	sp, r7
   257f2:	b002      	add	sp, #8
   257f4:	bd80      	pop	{r7, pc}
   257f6:	46c0      	nop			; (mov r8, r8)
   257f8:	0003bf30 	.word	0x0003bf30

000257fc <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   257fc:	b590      	push	{r4, r7, lr}
   257fe:	b085      	sub	sp, #20
   25800:	af00      	add	r7, sp, #0
   25802:	60b9      	str	r1, [r7, #8]
   25804:	607a      	str	r2, [r7, #4]
   25806:	230f      	movs	r3, #15
   25808:	18fb      	adds	r3, r7, r3
   2580a:	1c02      	adds	r2, r0, #0
   2580c:	701a      	strb	r2, [r3, #0]
	while (len--)
   2580e:	e00e      	b.n	2582e <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   25810:	68bb      	ldr	r3, [r7, #8]
   25812:	1c5a      	adds	r2, r3, #1
   25814:	60ba      	str	r2, [r7, #8]
   25816:	781a      	ldrb	r2, [r3, #0]
   25818:	230f      	movs	r3, #15
   2581a:	18fc      	adds	r4, r7, r3
   2581c:	230f      	movs	r3, #15
   2581e:	18fb      	adds	r3, r7, r3
   25820:	781b      	ldrb	r3, [r3, #0]
   25822:	0011      	movs	r1, r2
   25824:	0018      	movs	r0, r3
   25826:	4b08      	ldr	r3, [pc, #32]	; (25848 <crc7+0x4c>)
   25828:	4798      	blx	r3
   2582a:	0003      	movs	r3, r0
   2582c:	7023      	strb	r3, [r4, #0]
	while (len--)
   2582e:	687b      	ldr	r3, [r7, #4]
   25830:	1e5a      	subs	r2, r3, #1
   25832:	607a      	str	r2, [r7, #4]
   25834:	2b00      	cmp	r3, #0
   25836:	d1eb      	bne.n	25810 <crc7+0x14>
	return crc;
   25838:	230f      	movs	r3, #15
   2583a:	18fb      	adds	r3, r7, r3
   2583c:	781b      	ldrb	r3, [r3, #0]
}
   2583e:	0018      	movs	r0, r3
   25840:	46bd      	mov	sp, r7
   25842:	b005      	add	sp, #20
   25844:	bd90      	pop	{r4, r7, pc}
   25846:	46c0      	nop			; (mov r8, r8)
   25848:	000257cd 	.word	0x000257cd

0002584c <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   2584c:	b590      	push	{r4, r7, lr}
   2584e:	b089      	sub	sp, #36	; 0x24
   25850:	af00      	add	r7, sp, #0
   25852:	60b9      	str	r1, [r7, #8]
   25854:	607a      	str	r2, [r7, #4]
   25856:	603b      	str	r3, [r7, #0]
   25858:	230f      	movs	r3, #15
   2585a:	18fb      	adds	r3, r7, r3
   2585c:	1c02      	adds	r2, r0, #0
   2585e:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   25860:	231f      	movs	r3, #31
   25862:	18fb      	adds	r3, r7, r3
   25864:	2205      	movs	r2, #5
   25866:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   25868:	231e      	movs	r3, #30
   2586a:	18fb      	adds	r3, r7, r3
   2586c:	2201      	movs	r2, #1
   2586e:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   25870:	2314      	movs	r3, #20
   25872:	18fb      	adds	r3, r7, r3
   25874:	220f      	movs	r2, #15
   25876:	18ba      	adds	r2, r7, r2
   25878:	7812      	ldrb	r2, [r2, #0]
   2587a:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   2587c:	230f      	movs	r3, #15
   2587e:	18fb      	adds	r3, r7, r3
   25880:	781b      	ldrb	r3, [r3, #0]
   25882:	3bc1      	subs	r3, #193	; 0xc1
   25884:	2b0e      	cmp	r3, #14
   25886:	d900      	bls.n	2588a <spi_cmd+0x3e>
   25888:	e11b      	b.n	25ac2 <spi_cmd+0x276>
   2588a:	009a      	lsls	r2, r3, #2
   2588c:	4bb6      	ldr	r3, [pc, #728]	; (25b68 <spi_cmd+0x31c>)
   2588e:	18d3      	adds	r3, r2, r3
   25890:	681b      	ldr	r3, [r3, #0]
   25892:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   25894:	68bb      	ldr	r3, [r7, #8]
   25896:	0c1b      	lsrs	r3, r3, #16
   25898:	b2da      	uxtb	r2, r3
   2589a:	2314      	movs	r3, #20
   2589c:	18fb      	adds	r3, r7, r3
   2589e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   258a0:	68bb      	ldr	r3, [r7, #8]
   258a2:	0a1b      	lsrs	r3, r3, #8
   258a4:	b2da      	uxtb	r2, r3
   258a6:	2314      	movs	r3, #20
   258a8:	18fb      	adds	r3, r7, r3
   258aa:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   258ac:	68bb      	ldr	r3, [r7, #8]
   258ae:	b2da      	uxtb	r2, r3
   258b0:	2314      	movs	r3, #20
   258b2:	18fb      	adds	r3, r7, r3
   258b4:	70da      	strb	r2, [r3, #3]
		len = 5;
   258b6:	231f      	movs	r3, #31
   258b8:	18fb      	adds	r3, r7, r3
   258ba:	2205      	movs	r2, #5
   258bc:	701a      	strb	r2, [r3, #0]
		break;
   258be:	e105      	b.n	25acc <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   258c0:	68bb      	ldr	r3, [r7, #8]
   258c2:	0a1b      	lsrs	r3, r3, #8
   258c4:	b2da      	uxtb	r2, r3
   258c6:	2314      	movs	r3, #20
   258c8:	18fb      	adds	r3, r7, r3
   258ca:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   258cc:	2330      	movs	r3, #48	; 0x30
   258ce:	18fb      	adds	r3, r7, r3
   258d0:	781b      	ldrb	r3, [r3, #0]
   258d2:	2b00      	cmp	r3, #0
   258d4:	d009      	beq.n	258ea <spi_cmd+0x9e>
   258d6:	2314      	movs	r3, #20
   258d8:	18fb      	adds	r3, r7, r3
   258da:	785b      	ldrb	r3, [r3, #1]
   258dc:	2280      	movs	r2, #128	; 0x80
   258de:	4252      	negs	r2, r2
   258e0:	4313      	orrs	r3, r2
   258e2:	b2da      	uxtb	r2, r3
   258e4:	2314      	movs	r3, #20
   258e6:	18fb      	adds	r3, r7, r3
   258e8:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   258ea:	68bb      	ldr	r3, [r7, #8]
   258ec:	b2da      	uxtb	r2, r3
   258ee:	2314      	movs	r3, #20
   258f0:	18fb      	adds	r3, r7, r3
   258f2:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   258f4:	2314      	movs	r3, #20
   258f6:	18fb      	adds	r3, r7, r3
   258f8:	2200      	movs	r2, #0
   258fa:	70da      	strb	r2, [r3, #3]
		len = 5;
   258fc:	231f      	movs	r3, #31
   258fe:	18fb      	adds	r3, r7, r3
   25900:	2205      	movs	r2, #5
   25902:	701a      	strb	r2, [r3, #0]
		break;
   25904:	e0e2      	b.n	25acc <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   25906:	2314      	movs	r3, #20
   25908:	18fb      	adds	r3, r7, r3
   2590a:	2200      	movs	r2, #0
   2590c:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   2590e:	2314      	movs	r3, #20
   25910:	18fb      	adds	r3, r7, r3
   25912:	2200      	movs	r2, #0
   25914:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   25916:	2314      	movs	r3, #20
   25918:	18fb      	adds	r3, r7, r3
   2591a:	2200      	movs	r2, #0
   2591c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2591e:	231f      	movs	r3, #31
   25920:	18fb      	adds	r3, r7, r3
   25922:	2205      	movs	r2, #5
   25924:	701a      	strb	r2, [r3, #0]
		break;
   25926:	e0d1      	b.n	25acc <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   25928:	2314      	movs	r3, #20
   2592a:	18fb      	adds	r3, r7, r3
   2592c:	2200      	movs	r2, #0
   2592e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   25930:	2314      	movs	r3, #20
   25932:	18fb      	adds	r3, r7, r3
   25934:	2200      	movs	r2, #0
   25936:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   25938:	2314      	movs	r3, #20
   2593a:	18fb      	adds	r3, r7, r3
   2593c:	2200      	movs	r2, #0
   2593e:	70da      	strb	r2, [r3, #3]
		len = 5;
   25940:	231f      	movs	r3, #31
   25942:	18fb      	adds	r3, r7, r3
   25944:	2205      	movs	r2, #5
   25946:	701a      	strb	r2, [r3, #0]
		break;
   25948:	e0c0      	b.n	25acc <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   2594a:	2314      	movs	r3, #20
   2594c:	18fb      	adds	r3, r7, r3
   2594e:	22ff      	movs	r2, #255	; 0xff
   25950:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   25952:	2314      	movs	r3, #20
   25954:	18fb      	adds	r3, r7, r3
   25956:	22ff      	movs	r2, #255	; 0xff
   25958:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   2595a:	2314      	movs	r3, #20
   2595c:	18fb      	adds	r3, r7, r3
   2595e:	22ff      	movs	r2, #255	; 0xff
   25960:	70da      	strb	r2, [r3, #3]
		len = 5;
   25962:	231f      	movs	r3, #31
   25964:	18fb      	adds	r3, r7, r3
   25966:	2205      	movs	r2, #5
   25968:	701a      	strb	r2, [r3, #0]
		break;
   2596a:	e0af      	b.n	25acc <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   2596c:	68bb      	ldr	r3, [r7, #8]
   2596e:	0c1b      	lsrs	r3, r3, #16
   25970:	b2da      	uxtb	r2, r3
   25972:	2314      	movs	r3, #20
   25974:	18fb      	adds	r3, r7, r3
   25976:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   25978:	68bb      	ldr	r3, [r7, #8]
   2597a:	0a1b      	lsrs	r3, r3, #8
   2597c:	b2da      	uxtb	r2, r3
   2597e:	2314      	movs	r3, #20
   25980:	18fb      	adds	r3, r7, r3
   25982:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   25984:	68bb      	ldr	r3, [r7, #8]
   25986:	b2da      	uxtb	r2, r3
   25988:	2314      	movs	r3, #20
   2598a:	18fb      	adds	r3, r7, r3
   2598c:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   2598e:	683b      	ldr	r3, [r7, #0]
   25990:	0a1b      	lsrs	r3, r3, #8
   25992:	b2da      	uxtb	r2, r3
   25994:	2314      	movs	r3, #20
   25996:	18fb      	adds	r3, r7, r3
   25998:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   2599a:	683b      	ldr	r3, [r7, #0]
   2599c:	b2da      	uxtb	r2, r3
   2599e:	2314      	movs	r3, #20
   259a0:	18fb      	adds	r3, r7, r3
   259a2:	715a      	strb	r2, [r3, #5]
		len = 7;
   259a4:	231f      	movs	r3, #31
   259a6:	18fb      	adds	r3, r7, r3
   259a8:	2207      	movs	r2, #7
   259aa:	701a      	strb	r2, [r3, #0]
		break;
   259ac:	e08e      	b.n	25acc <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   259ae:	68bb      	ldr	r3, [r7, #8]
   259b0:	0c1b      	lsrs	r3, r3, #16
   259b2:	b2da      	uxtb	r2, r3
   259b4:	2314      	movs	r3, #20
   259b6:	18fb      	adds	r3, r7, r3
   259b8:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   259ba:	68bb      	ldr	r3, [r7, #8]
   259bc:	0a1b      	lsrs	r3, r3, #8
   259be:	b2da      	uxtb	r2, r3
   259c0:	2314      	movs	r3, #20
   259c2:	18fb      	adds	r3, r7, r3
   259c4:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   259c6:	68bb      	ldr	r3, [r7, #8]
   259c8:	b2da      	uxtb	r2, r3
   259ca:	2314      	movs	r3, #20
   259cc:	18fb      	adds	r3, r7, r3
   259ce:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   259d0:	683b      	ldr	r3, [r7, #0]
   259d2:	0c1b      	lsrs	r3, r3, #16
   259d4:	b2da      	uxtb	r2, r3
   259d6:	2314      	movs	r3, #20
   259d8:	18fb      	adds	r3, r7, r3
   259da:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   259dc:	683b      	ldr	r3, [r7, #0]
   259de:	0a1b      	lsrs	r3, r3, #8
   259e0:	b2da      	uxtb	r2, r3
   259e2:	2314      	movs	r3, #20
   259e4:	18fb      	adds	r3, r7, r3
   259e6:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   259e8:	683b      	ldr	r3, [r7, #0]
   259ea:	b2da      	uxtb	r2, r3
   259ec:	2314      	movs	r3, #20
   259ee:	18fb      	adds	r3, r7, r3
   259f0:	719a      	strb	r2, [r3, #6]
		len = 8;
   259f2:	231f      	movs	r3, #31
   259f4:	18fb      	adds	r3, r7, r3
   259f6:	2208      	movs	r2, #8
   259f8:	701a      	strb	r2, [r3, #0]
		break;
   259fa:	e067      	b.n	25acc <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   259fc:	68bb      	ldr	r3, [r7, #8]
   259fe:	0a1b      	lsrs	r3, r3, #8
   25a00:	b2da      	uxtb	r2, r3
   25a02:	2314      	movs	r3, #20
   25a04:	18fb      	adds	r3, r7, r3
   25a06:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   25a08:	2330      	movs	r3, #48	; 0x30
   25a0a:	18fb      	adds	r3, r7, r3
   25a0c:	781b      	ldrb	r3, [r3, #0]
   25a0e:	2b00      	cmp	r3, #0
   25a10:	d009      	beq.n	25a26 <spi_cmd+0x1da>
   25a12:	2314      	movs	r3, #20
   25a14:	18fb      	adds	r3, r7, r3
   25a16:	785b      	ldrb	r3, [r3, #1]
   25a18:	2280      	movs	r2, #128	; 0x80
   25a1a:	4252      	negs	r2, r2
   25a1c:	4313      	orrs	r3, r2
   25a1e:	b2da      	uxtb	r2, r3
   25a20:	2314      	movs	r3, #20
   25a22:	18fb      	adds	r3, r7, r3
   25a24:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   25a26:	68bb      	ldr	r3, [r7, #8]
   25a28:	b2da      	uxtb	r2, r3
   25a2a:	2314      	movs	r3, #20
   25a2c:	18fb      	adds	r3, r7, r3
   25a2e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   25a30:	687b      	ldr	r3, [r7, #4]
   25a32:	0e1b      	lsrs	r3, r3, #24
   25a34:	b2da      	uxtb	r2, r3
   25a36:	2314      	movs	r3, #20
   25a38:	18fb      	adds	r3, r7, r3
   25a3a:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   25a3c:	687b      	ldr	r3, [r7, #4]
   25a3e:	0c1b      	lsrs	r3, r3, #16
   25a40:	b2da      	uxtb	r2, r3
   25a42:	2314      	movs	r3, #20
   25a44:	18fb      	adds	r3, r7, r3
   25a46:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   25a48:	687b      	ldr	r3, [r7, #4]
   25a4a:	0a1b      	lsrs	r3, r3, #8
   25a4c:	b2da      	uxtb	r2, r3
   25a4e:	2314      	movs	r3, #20
   25a50:	18fb      	adds	r3, r7, r3
   25a52:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   25a54:	687b      	ldr	r3, [r7, #4]
   25a56:	b2da      	uxtb	r2, r3
   25a58:	2314      	movs	r3, #20
   25a5a:	18fb      	adds	r3, r7, r3
   25a5c:	719a      	strb	r2, [r3, #6]
		len = 8;
   25a5e:	231f      	movs	r3, #31
   25a60:	18fb      	adds	r3, r7, r3
   25a62:	2208      	movs	r2, #8
   25a64:	701a      	strb	r2, [r3, #0]
		break;
   25a66:	e031      	b.n	25acc <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   25a68:	68bb      	ldr	r3, [r7, #8]
   25a6a:	0c1b      	lsrs	r3, r3, #16
   25a6c:	b2da      	uxtb	r2, r3
   25a6e:	2314      	movs	r3, #20
   25a70:	18fb      	adds	r3, r7, r3
   25a72:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   25a74:	68bb      	ldr	r3, [r7, #8]
   25a76:	0a1b      	lsrs	r3, r3, #8
   25a78:	b2da      	uxtb	r2, r3
   25a7a:	2314      	movs	r3, #20
   25a7c:	18fb      	adds	r3, r7, r3
   25a7e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   25a80:	68bb      	ldr	r3, [r7, #8]
   25a82:	b2da      	uxtb	r2, r3
   25a84:	2314      	movs	r3, #20
   25a86:	18fb      	adds	r3, r7, r3
   25a88:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   25a8a:	687b      	ldr	r3, [r7, #4]
   25a8c:	0e1b      	lsrs	r3, r3, #24
   25a8e:	b2da      	uxtb	r2, r3
   25a90:	2314      	movs	r3, #20
   25a92:	18fb      	adds	r3, r7, r3
   25a94:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   25a96:	687b      	ldr	r3, [r7, #4]
   25a98:	0c1b      	lsrs	r3, r3, #16
   25a9a:	b2da      	uxtb	r2, r3
   25a9c:	2314      	movs	r3, #20
   25a9e:	18fb      	adds	r3, r7, r3
   25aa0:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   25aa2:	687b      	ldr	r3, [r7, #4]
   25aa4:	0a1b      	lsrs	r3, r3, #8
   25aa6:	b2da      	uxtb	r2, r3
   25aa8:	2314      	movs	r3, #20
   25aaa:	18fb      	adds	r3, r7, r3
   25aac:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   25aae:	687b      	ldr	r3, [r7, #4]
   25ab0:	b2da      	uxtb	r2, r3
   25ab2:	2314      	movs	r3, #20
   25ab4:	18fb      	adds	r3, r7, r3
   25ab6:	71da      	strb	r2, [r3, #7]
		len = 9;
   25ab8:	231f      	movs	r3, #31
   25aba:	18fb      	adds	r3, r7, r3
   25abc:	2209      	movs	r2, #9
   25abe:	701a      	strb	r2, [r3, #0]
		break;
   25ac0:	e004      	b.n	25acc <spi_cmd+0x280>
	default:
		result = N_FAIL;
   25ac2:	231e      	movs	r3, #30
   25ac4:	18fb      	adds	r3, r7, r3
   25ac6:	2200      	movs	r2, #0
   25ac8:	701a      	strb	r2, [r3, #0]
		break;
   25aca:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   25acc:	231e      	movs	r3, #30
   25ace:	18fb      	adds	r3, r7, r3
   25ad0:	781b      	ldrb	r3, [r3, #0]
   25ad2:	b25b      	sxtb	r3, r3
   25ad4:	2b00      	cmp	r3, #0
   25ad6:	d03f      	beq.n	25b58 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   25ad8:	4b24      	ldr	r3, [pc, #144]	; (25b6c <spi_cmd+0x320>)
   25ada:	781b      	ldrb	r3, [r3, #0]
   25adc:	2b00      	cmp	r3, #0
   25ade:	d115      	bne.n	25b0c <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   25ae0:	231f      	movs	r3, #31
   25ae2:	18fb      	adds	r3, r7, r3
   25ae4:	781b      	ldrb	r3, [r3, #0]
   25ae6:	1e5c      	subs	r4, r3, #1
   25ae8:	231f      	movs	r3, #31
   25aea:	18fb      	adds	r3, r7, r3
   25aec:	781b      	ldrb	r3, [r3, #0]
   25aee:	3b01      	subs	r3, #1
   25af0:	001a      	movs	r2, r3
   25af2:	2314      	movs	r3, #20
   25af4:	18fb      	adds	r3, r7, r3
   25af6:	0019      	movs	r1, r3
   25af8:	207f      	movs	r0, #127	; 0x7f
   25afa:	4b1d      	ldr	r3, [pc, #116]	; (25b70 <spi_cmd+0x324>)
   25afc:	4798      	blx	r3
   25afe:	0003      	movs	r3, r0
   25b00:	18db      	adds	r3, r3, r3
   25b02:	b2da      	uxtb	r2, r3
   25b04:	2314      	movs	r3, #20
   25b06:	18fb      	adds	r3, r7, r3
   25b08:	551a      	strb	r2, [r3, r4]
   25b0a:	e006      	b.n	25b1a <spi_cmd+0x2ce>
		else
			len-=1;
   25b0c:	231f      	movs	r3, #31
   25b0e:	18fb      	adds	r3, r7, r3
   25b10:	221f      	movs	r2, #31
   25b12:	18ba      	adds	r2, r7, r2
   25b14:	7812      	ldrb	r2, [r2, #0]
   25b16:	3a01      	subs	r2, #1
   25b18:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   25b1a:	231f      	movs	r3, #31
   25b1c:	18fb      	adds	r3, r7, r3
   25b1e:	781b      	ldrb	r3, [r3, #0]
   25b20:	b29a      	uxth	r2, r3
   25b22:	2314      	movs	r3, #20
   25b24:	18fb      	adds	r3, r7, r3
   25b26:	0011      	movs	r1, r2
   25b28:	0018      	movs	r0, r3
   25b2a:	4b12      	ldr	r3, [pc, #72]	; (25b74 <spi_cmd+0x328>)
   25b2c:	4798      	blx	r3
   25b2e:	1e03      	subs	r3, r0, #0
   25b30:	d012      	beq.n	25b58 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   25b32:	2390      	movs	r3, #144	; 0x90
   25b34:	005a      	lsls	r2, r3, #1
   25b36:	4910      	ldr	r1, [pc, #64]	; (25b78 <spi_cmd+0x32c>)
   25b38:	4b10      	ldr	r3, [pc, #64]	; (25b7c <spi_cmd+0x330>)
   25b3a:	0018      	movs	r0, r3
   25b3c:	4b10      	ldr	r3, [pc, #64]	; (25b80 <spi_cmd+0x334>)
   25b3e:	4798      	blx	r3
   25b40:	4b10      	ldr	r3, [pc, #64]	; (25b84 <spi_cmd+0x338>)
   25b42:	0018      	movs	r0, r3
   25b44:	4b0e      	ldr	r3, [pc, #56]	; (25b80 <spi_cmd+0x334>)
   25b46:	4798      	blx	r3
   25b48:	4b0f      	ldr	r3, [pc, #60]	; (25b88 <spi_cmd+0x33c>)
   25b4a:	0018      	movs	r0, r3
   25b4c:	4b0c      	ldr	r3, [pc, #48]	; (25b80 <spi_cmd+0x334>)
   25b4e:	4798      	blx	r3
			result = N_FAIL;
   25b50:	231e      	movs	r3, #30
   25b52:	18fb      	adds	r3, r7, r3
   25b54:	2200      	movs	r2, #0
   25b56:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   25b58:	231e      	movs	r3, #30
   25b5a:	18fb      	adds	r3, r7, r3
   25b5c:	781b      	ldrb	r3, [r3, #0]
   25b5e:	b25b      	sxtb	r3, r3
}
   25b60:	0018      	movs	r0, r3
   25b62:	46bd      	mov	sp, r7
   25b64:	b009      	add	sp, #36	; 0x24
   25b66:	bd90      	pop	{r4, r7, pc}
   25b68:	0003c5a8 	.word	0x0003c5a8
   25b6c:	20004124 	.word	0x20004124
   25b70:	000257fd 	.word	0x000257fd
   25b74:	00025745 	.word	0x00025745
   25b78:	0003c620 	.word	0x0003c620
   25b7c:	0003c030 	.word	0x0003c030
   25b80:	00020329 	.word	0x00020329
   25b84:	0003c044 	.word	0x0003c044
   25b88:	0003c070 	.word	0x0003c070

00025b8c <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   25b8c:	b590      	push	{r4, r7, lr}
   25b8e:	b085      	sub	sp, #20
   25b90:	af00      	add	r7, sp, #0
   25b92:	0002      	movs	r2, r0
   25b94:	1dfb      	adds	r3, r7, #7
   25b96:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   25b98:	230e      	movs	r3, #14
   25b9a:	18fb      	adds	r3, r7, r3
   25b9c:	2201      	movs	r2, #1
   25b9e:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   25ba0:	4b32      	ldr	r3, [pc, #200]	; (25c6c <spi_data_rsp+0xe0>)
   25ba2:	781b      	ldrb	r3, [r3, #0]
   25ba4:	2b00      	cmp	r3, #0
   25ba6:	d104      	bne.n	25bb2 <spi_data_rsp+0x26>
		len = 2;
   25ba8:	230f      	movs	r3, #15
   25baa:	18fb      	adds	r3, r7, r3
   25bac:	2202      	movs	r2, #2
   25bae:	701a      	strb	r2, [r3, #0]
   25bb0:	e003      	b.n	25bba <spi_data_rsp+0x2e>
	else
		len = 3;
   25bb2:	230f      	movs	r3, #15
   25bb4:	18fb      	adds	r3, r7, r3
   25bb6:	2203      	movs	r2, #3
   25bb8:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   25bba:	230f      	movs	r3, #15
   25bbc:	18fb      	adds	r3, r7, r3
   25bbe:	781b      	ldrb	r3, [r3, #0]
   25bc0:	b29a      	uxth	r2, r3
   25bc2:	2308      	movs	r3, #8
   25bc4:	18fb      	adds	r3, r7, r3
   25bc6:	0011      	movs	r1, r2
   25bc8:	0018      	movs	r0, r3
   25bca:	4b29      	ldr	r3, [pc, #164]	; (25c70 <spi_data_rsp+0xe4>)
   25bcc:	4798      	blx	r3
   25bce:	1e03      	subs	r3, r0, #0
   25bd0:	d013      	beq.n	25bfa <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   25bd2:	239a      	movs	r3, #154	; 0x9a
   25bd4:	005a      	lsls	r2, r3, #1
   25bd6:	4927      	ldr	r1, [pc, #156]	; (25c74 <spi_data_rsp+0xe8>)
   25bd8:	4b27      	ldr	r3, [pc, #156]	; (25c78 <spi_data_rsp+0xec>)
   25bda:	0018      	movs	r0, r3
   25bdc:	4b27      	ldr	r3, [pc, #156]	; (25c7c <spi_data_rsp+0xf0>)
   25bde:	4798      	blx	r3
   25be0:	4b27      	ldr	r3, [pc, #156]	; (25c80 <spi_data_rsp+0xf4>)
   25be2:	0018      	movs	r0, r3
   25be4:	4b25      	ldr	r3, [pc, #148]	; (25c7c <spi_data_rsp+0xf0>)
   25be6:	4798      	blx	r3
   25be8:	4b26      	ldr	r3, [pc, #152]	; (25c84 <spi_data_rsp+0xf8>)
   25bea:	0018      	movs	r0, r3
   25bec:	4b23      	ldr	r3, [pc, #140]	; (25c7c <spi_data_rsp+0xf0>)
   25bee:	4798      	blx	r3
		result = N_FAIL;
   25bf0:	230e      	movs	r3, #14
   25bf2:	18fb      	adds	r3, r7, r3
   25bf4:	2200      	movs	r2, #0
   25bf6:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   25bf8:	e030      	b.n	25c5c <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   25bfa:	230f      	movs	r3, #15
   25bfc:	18fb      	adds	r3, r7, r3
   25bfe:	781b      	ldrb	r3, [r3, #0]
   25c00:	3b01      	subs	r3, #1
   25c02:	2208      	movs	r2, #8
   25c04:	18ba      	adds	r2, r7, r2
   25c06:	5cd3      	ldrb	r3, [r2, r3]
   25c08:	2b00      	cmp	r3, #0
   25c0a:	d108      	bne.n	25c1e <spi_data_rsp+0x92>
   25c0c:	230f      	movs	r3, #15
   25c0e:	18fb      	adds	r3, r7, r3
   25c10:	781b      	ldrb	r3, [r3, #0]
   25c12:	3b02      	subs	r3, #2
   25c14:	2208      	movs	r2, #8
   25c16:	18ba      	adds	r2, r7, r2
   25c18:	5cd3      	ldrb	r3, [r2, r3]
   25c1a:	2bc3      	cmp	r3, #195	; 0xc3
   25c1c:	d01e      	beq.n	25c5c <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   25c1e:	233c      	movs	r3, #60	; 0x3c
   25c20:	33ff      	adds	r3, #255	; 0xff
   25c22:	001a      	movs	r2, r3
   25c24:	4913      	ldr	r1, [pc, #76]	; (25c74 <spi_data_rsp+0xe8>)
   25c26:	4b14      	ldr	r3, [pc, #80]	; (25c78 <spi_data_rsp+0xec>)
   25c28:	0018      	movs	r0, r3
   25c2a:	4b14      	ldr	r3, [pc, #80]	; (25c7c <spi_data_rsp+0xf0>)
   25c2c:	4798      	blx	r3
   25c2e:	2308      	movs	r3, #8
   25c30:	18fb      	adds	r3, r7, r3
   25c32:	781b      	ldrb	r3, [r3, #0]
   25c34:	0019      	movs	r1, r3
   25c36:	2308      	movs	r3, #8
   25c38:	18fb      	adds	r3, r7, r3
   25c3a:	785b      	ldrb	r3, [r3, #1]
   25c3c:	001a      	movs	r2, r3
   25c3e:	2308      	movs	r3, #8
   25c40:	18fb      	adds	r3, r7, r3
   25c42:	789b      	ldrb	r3, [r3, #2]
   25c44:	4810      	ldr	r0, [pc, #64]	; (25c88 <spi_data_rsp+0xfc>)
   25c46:	4c0d      	ldr	r4, [pc, #52]	; (25c7c <spi_data_rsp+0xf0>)
   25c48:	47a0      	blx	r4
   25c4a:	4b0e      	ldr	r3, [pc, #56]	; (25c84 <spi_data_rsp+0xf8>)
   25c4c:	0018      	movs	r0, r3
   25c4e:	4b0b      	ldr	r3, [pc, #44]	; (25c7c <spi_data_rsp+0xf0>)
   25c50:	4798      	blx	r3
		result = N_FAIL;
   25c52:	230e      	movs	r3, #14
   25c54:	18fb      	adds	r3, r7, r3
   25c56:	2200      	movs	r2, #0
   25c58:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   25c5a:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   25c5c:	230e      	movs	r3, #14
   25c5e:	18fb      	adds	r3, r7, r3
   25c60:	781b      	ldrb	r3, [r3, #0]
   25c62:	b25b      	sxtb	r3, r3
}
   25c64:	0018      	movs	r0, r3
   25c66:	46bd      	mov	sp, r7
   25c68:	b005      	add	sp, #20
   25c6a:	bd90      	pop	{r4, r7, pc}
   25c6c:	20004124 	.word	0x20004124
   25c70:	00025701 	.word	0x00025701
   25c74:	0003c628 	.word	0x0003c628
   25c78:	0003c030 	.word	0x0003c030
   25c7c:	00020329 	.word	0x00020329
   25c80:	0003c074 	.word	0x0003c074
   25c84:	0003c070 	.word	0x0003c070
   25c88:	0003c094 	.word	0x0003c094

00025c8c <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   25c8c:	b580      	push	{r7, lr}
   25c8e:	b084      	sub	sp, #16
   25c90:	af00      	add	r7, sp, #0
   25c92:	0002      	movs	r2, r0
   25c94:	1dfb      	adds	r3, r7, #7
   25c96:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   25c98:	230f      	movs	r3, #15
   25c9a:	18fb      	adds	r3, r7, r3
   25c9c:	2201      	movs	r2, #1
   25c9e:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   25ca0:	1dfb      	adds	r3, r7, #7
   25ca2:	781b      	ldrb	r3, [r3, #0]
   25ca4:	2bcf      	cmp	r3, #207	; 0xcf
   25ca6:	d007      	beq.n	25cb8 <spi_cmd_rsp+0x2c>
   25ca8:	1dfb      	adds	r3, r7, #7
   25caa:	781b      	ldrb	r3, [r3, #0]
   25cac:	2bc5      	cmp	r3, #197	; 0xc5
   25cae:	d003      	beq.n	25cb8 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   25cb0:	1dfb      	adds	r3, r7, #7
   25cb2:	781b      	ldrb	r3, [r3, #0]
   25cb4:	2bc6      	cmp	r3, #198	; 0xc6
   25cb6:	d10c      	bne.n	25cd2 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   25cb8:	230d      	movs	r3, #13
   25cba:	18fb      	adds	r3, r7, r3
   25cbc:	2101      	movs	r1, #1
   25cbe:	0018      	movs	r0, r3
   25cc0:	4b3b      	ldr	r3, [pc, #236]	; (25db0 <spi_cmd_rsp+0x124>)
   25cc2:	4798      	blx	r3
   25cc4:	1e03      	subs	r3, r0, #0
   25cc6:	d004      	beq.n	25cd2 <spi_cmd_rsp+0x46>
			result = N_FAIL;
   25cc8:	230f      	movs	r3, #15
   25cca:	18fb      	adds	r3, r7, r3
   25ccc:	2200      	movs	r2, #0
   25cce:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   25cd0:	e065      	b.n	25d9e <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   25cd2:	230e      	movs	r3, #14
   25cd4:	18fb      	adds	r3, r7, r3
   25cd6:	220a      	movs	r2, #10
   25cd8:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   25cda:	230d      	movs	r3, #13
   25cdc:	18fb      	adds	r3, r7, r3
   25cde:	2101      	movs	r1, #1
   25ce0:	0018      	movs	r0, r3
   25ce2:	4b33      	ldr	r3, [pc, #204]	; (25db0 <spi_cmd_rsp+0x124>)
   25ce4:	4798      	blx	r3
   25ce6:	1e03      	subs	r3, r0, #0
   25ce8:	d014      	beq.n	25d14 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   25cea:	235c      	movs	r3, #92	; 0x5c
   25cec:	33ff      	adds	r3, #255	; 0xff
   25cee:	001a      	movs	r2, r3
   25cf0:	4930      	ldr	r1, [pc, #192]	; (25db4 <spi_cmd_rsp+0x128>)
   25cf2:	4b31      	ldr	r3, [pc, #196]	; (25db8 <spi_cmd_rsp+0x12c>)
   25cf4:	0018      	movs	r0, r3
   25cf6:	4b31      	ldr	r3, [pc, #196]	; (25dbc <spi_cmd_rsp+0x130>)
   25cf8:	4798      	blx	r3
   25cfa:	4b31      	ldr	r3, [pc, #196]	; (25dc0 <spi_cmd_rsp+0x134>)
   25cfc:	0018      	movs	r0, r3
   25cfe:	4b2f      	ldr	r3, [pc, #188]	; (25dbc <spi_cmd_rsp+0x130>)
   25d00:	4798      	blx	r3
   25d02:	4b30      	ldr	r3, [pc, #192]	; (25dc4 <spi_cmd_rsp+0x138>)
   25d04:	0018      	movs	r0, r3
   25d06:	4b2d      	ldr	r3, [pc, #180]	; (25dbc <spi_cmd_rsp+0x130>)
   25d08:	4798      	blx	r3
			result = N_FAIL;
   25d0a:	230f      	movs	r3, #15
   25d0c:	18fb      	adds	r3, r7, r3
   25d0e:	2200      	movs	r2, #0
   25d10:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   25d12:	e044      	b.n	25d9e <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   25d14:	230d      	movs	r3, #13
   25d16:	18fb      	adds	r3, r7, r3
   25d18:	781b      	ldrb	r3, [r3, #0]
   25d1a:	1dfa      	adds	r2, r7, #7
   25d1c:	7812      	ldrb	r2, [r2, #0]
   25d1e:	429a      	cmp	r2, r3
   25d20:	d00b      	beq.n	25d3a <spi_cmd_rsp+0xae>
   25d22:	230e      	movs	r3, #14
   25d24:	18fb      	adds	r3, r7, r3
   25d26:	781b      	ldrb	r3, [r3, #0]
   25d28:	b25b      	sxtb	r3, r3
   25d2a:	b2da      	uxtb	r2, r3
   25d2c:	3a01      	subs	r2, #1
   25d2e:	b2d1      	uxtb	r1, r2
   25d30:	220e      	movs	r2, #14
   25d32:	18ba      	adds	r2, r7, r2
   25d34:	7011      	strb	r1, [r2, #0]
   25d36:	2b00      	cmp	r3, #0
   25d38:	dccf      	bgt.n	25cda <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   25d3a:	230e      	movs	r3, #14
   25d3c:	18fb      	adds	r3, r7, r3
   25d3e:	220a      	movs	r2, #10
   25d40:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   25d42:	230d      	movs	r3, #13
   25d44:	18fb      	adds	r3, r7, r3
   25d46:	2101      	movs	r1, #1
   25d48:	0018      	movs	r0, r3
   25d4a:	4b19      	ldr	r3, [pc, #100]	; (25db0 <spi_cmd_rsp+0x124>)
   25d4c:	4798      	blx	r3
   25d4e:	1e03      	subs	r3, r0, #0
   25d50:	d014      	beq.n	25d7c <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   25d52:	236a      	movs	r3, #106	; 0x6a
   25d54:	33ff      	adds	r3, #255	; 0xff
   25d56:	001a      	movs	r2, r3
   25d58:	4916      	ldr	r1, [pc, #88]	; (25db4 <spi_cmd_rsp+0x128>)
   25d5a:	4b17      	ldr	r3, [pc, #92]	; (25db8 <spi_cmd_rsp+0x12c>)
   25d5c:	0018      	movs	r0, r3
   25d5e:	4b17      	ldr	r3, [pc, #92]	; (25dbc <spi_cmd_rsp+0x130>)
   25d60:	4798      	blx	r3
   25d62:	4b17      	ldr	r3, [pc, #92]	; (25dc0 <spi_cmd_rsp+0x134>)
   25d64:	0018      	movs	r0, r3
   25d66:	4b15      	ldr	r3, [pc, #84]	; (25dbc <spi_cmd_rsp+0x130>)
   25d68:	4798      	blx	r3
   25d6a:	4b16      	ldr	r3, [pc, #88]	; (25dc4 <spi_cmd_rsp+0x138>)
   25d6c:	0018      	movs	r0, r3
   25d6e:	4b13      	ldr	r3, [pc, #76]	; (25dbc <spi_cmd_rsp+0x130>)
   25d70:	4798      	blx	r3
			result = N_FAIL;
   25d72:	230f      	movs	r3, #15
   25d74:	18fb      	adds	r3, r7, r3
   25d76:	2200      	movs	r2, #0
   25d78:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   25d7a:	e010      	b.n	25d9e <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   25d7c:	230d      	movs	r3, #13
   25d7e:	18fb      	adds	r3, r7, r3
   25d80:	781b      	ldrb	r3, [r3, #0]
   25d82:	2b00      	cmp	r3, #0
   25d84:	d00b      	beq.n	25d9e <spi_cmd_rsp+0x112>
   25d86:	230e      	movs	r3, #14
   25d88:	18fb      	adds	r3, r7, r3
   25d8a:	781b      	ldrb	r3, [r3, #0]
   25d8c:	b25b      	sxtb	r3, r3
   25d8e:	b2da      	uxtb	r2, r3
   25d90:	3a01      	subs	r2, #1
   25d92:	b2d1      	uxtb	r1, r2
   25d94:	220e      	movs	r2, #14
   25d96:	18ba      	adds	r2, r7, r2
   25d98:	7011      	strb	r1, [r2, #0]
   25d9a:	2b00      	cmp	r3, #0
   25d9c:	dcd1      	bgt.n	25d42 <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   25d9e:	230f      	movs	r3, #15
   25da0:	18fb      	adds	r3, r7, r3
   25da2:	781b      	ldrb	r3, [r3, #0]
   25da4:	b25b      	sxtb	r3, r3
}
   25da6:	0018      	movs	r0, r3
   25da8:	46bd      	mov	sp, r7
   25daa:	b004      	add	sp, #16
   25dac:	bd80      	pop	{r7, pc}
   25dae:	46c0      	nop			; (mov r8, r8)
   25db0:	00025701 	.word	0x00025701
   25db4:	0003c638 	.word	0x0003c638
   25db8:	0003c030 	.word	0x0003c030
   25dbc:	00020329 	.word	0x00020329
   25dc0:	0003c0c4 	.word	0x0003c0c4
   25dc4:	0003c070 	.word	0x0003c070

00025dc8 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   25dc8:	b590      	push	{r4, r7, lr}
   25dca:	b09f      	sub	sp, #124	; 0x7c
   25dcc:	af00      	add	r7, sp, #0
   25dce:	60b9      	str	r1, [r7, #8]
   25dd0:	607a      	str	r2, [r7, #4]
   25dd2:	603b      	str	r3, [r7, #0]
   25dd4:	230f      	movs	r3, #15
   25dd6:	18fb      	adds	r3, r7, r3
   25dd8:	1c02      	adds	r2, r0, #0
   25dda:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   25ddc:	2300      	movs	r3, #0
   25dde:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   25de0:	2301      	movs	r3, #1
   25de2:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   25de4:	2338      	movs	r3, #56	; 0x38
   25de6:	18fb      	adds	r3, r7, r3
   25de8:	220f      	movs	r2, #15
   25dea:	18ba      	adds	r2, r7, r2
   25dec:	7812      	ldrb	r2, [r2, #0]
   25dee:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   25df0:	230f      	movs	r3, #15
   25df2:	18fb      	adds	r3, r7, r3
   25df4:	781b      	ldrb	r3, [r3, #0]
   25df6:	3bc1      	subs	r3, #193	; 0xc1
   25df8:	2b0e      	cmp	r3, #14
   25dfa:	d900      	bls.n	25dfe <spi_cmd_complete+0x36>
   25dfc:	e103      	b.n	26006 <spi_cmd_complete+0x23e>
   25dfe:	009a      	lsls	r2, r3, #2
   25e00:	4bd1      	ldr	r3, [pc, #836]	; (26148 <spi_cmd_complete+0x380>)
   25e02:	18d3      	adds	r3, r2, r3
   25e04:	681b      	ldr	r3, [r3, #0]
   25e06:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   25e08:	68bb      	ldr	r3, [r7, #8]
   25e0a:	0c1b      	lsrs	r3, r3, #16
   25e0c:	b2da      	uxtb	r2, r3
   25e0e:	2338      	movs	r3, #56	; 0x38
   25e10:	18fb      	adds	r3, r7, r3
   25e12:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   25e14:	68bb      	ldr	r3, [r7, #8]
   25e16:	0a1b      	lsrs	r3, r3, #8
   25e18:	b2da      	uxtb	r2, r3
   25e1a:	2338      	movs	r3, #56	; 0x38
   25e1c:	18fb      	adds	r3, r7, r3
   25e1e:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   25e20:	68bb      	ldr	r3, [r7, #8]
   25e22:	b2da      	uxtb	r2, r3
   25e24:	2338      	movs	r3, #56	; 0x38
   25e26:	18fb      	adds	r3, r7, r3
   25e28:	70da      	strb	r2, [r3, #3]
		len = 5;
   25e2a:	2305      	movs	r3, #5
   25e2c:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   25e2e:	e0ed      	b.n	2600c <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   25e30:	68bb      	ldr	r3, [r7, #8]
   25e32:	0a1b      	lsrs	r3, r3, #8
   25e34:	b2da      	uxtb	r2, r3
   25e36:	2338      	movs	r3, #56	; 0x38
   25e38:	18fb      	adds	r3, r7, r3
   25e3a:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   25e3c:	2388      	movs	r3, #136	; 0x88
   25e3e:	18fb      	adds	r3, r7, r3
   25e40:	781b      	ldrb	r3, [r3, #0]
   25e42:	2b01      	cmp	r3, #1
   25e44:	d109      	bne.n	25e5a <spi_cmd_complete+0x92>
   25e46:	2338      	movs	r3, #56	; 0x38
   25e48:	18fb      	adds	r3, r7, r3
   25e4a:	785b      	ldrb	r3, [r3, #1]
   25e4c:	2280      	movs	r2, #128	; 0x80
   25e4e:	4252      	negs	r2, r2
   25e50:	4313      	orrs	r3, r2
   25e52:	b2da      	uxtb	r2, r3
   25e54:	2338      	movs	r3, #56	; 0x38
   25e56:	18fb      	adds	r3, r7, r3
   25e58:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   25e5a:	68bb      	ldr	r3, [r7, #8]
   25e5c:	b2da      	uxtb	r2, r3
   25e5e:	2338      	movs	r3, #56	; 0x38
   25e60:	18fb      	adds	r3, r7, r3
   25e62:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   25e64:	2338      	movs	r3, #56	; 0x38
   25e66:	18fb      	adds	r3, r7, r3
   25e68:	2200      	movs	r2, #0
   25e6a:	70da      	strb	r2, [r3, #3]
		len = 5;
   25e6c:	2305      	movs	r3, #5
   25e6e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25e70:	e0cc      	b.n	2600c <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   25e72:	2338      	movs	r3, #56	; 0x38
   25e74:	18fb      	adds	r3, r7, r3
   25e76:	2200      	movs	r2, #0
   25e78:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   25e7a:	2338      	movs	r3, #56	; 0x38
   25e7c:	18fb      	adds	r3, r7, r3
   25e7e:	2200      	movs	r2, #0
   25e80:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   25e82:	2338      	movs	r3, #56	; 0x38
   25e84:	18fb      	adds	r3, r7, r3
   25e86:	2200      	movs	r2, #0
   25e88:	70da      	strb	r2, [r3, #3]
		len = 5;
   25e8a:	2305      	movs	r3, #5
   25e8c:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25e8e:	e0bd      	b.n	2600c <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   25e90:	2338      	movs	r3, #56	; 0x38
   25e92:	18fb      	adds	r3, r7, r3
   25e94:	2200      	movs	r2, #0
   25e96:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   25e98:	2338      	movs	r3, #56	; 0x38
   25e9a:	18fb      	adds	r3, r7, r3
   25e9c:	2200      	movs	r2, #0
   25e9e:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   25ea0:	2338      	movs	r3, #56	; 0x38
   25ea2:	18fb      	adds	r3, r7, r3
   25ea4:	2200      	movs	r2, #0
   25ea6:	70da      	strb	r2, [r3, #3]
		len = 5;
   25ea8:	2305      	movs	r3, #5
   25eaa:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25eac:	e0ae      	b.n	2600c <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   25eae:	2338      	movs	r3, #56	; 0x38
   25eb0:	18fb      	adds	r3, r7, r3
   25eb2:	22ff      	movs	r2, #255	; 0xff
   25eb4:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   25eb6:	2338      	movs	r3, #56	; 0x38
   25eb8:	18fb      	adds	r3, r7, r3
   25eba:	22ff      	movs	r2, #255	; 0xff
   25ebc:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   25ebe:	2338      	movs	r3, #56	; 0x38
   25ec0:	18fb      	adds	r3, r7, r3
   25ec2:	22ff      	movs	r2, #255	; 0xff
   25ec4:	70da      	strb	r2, [r3, #3]
		len = 5;
   25ec6:	2305      	movs	r3, #5
   25ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25eca:	e09f      	b.n	2600c <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   25ecc:	68bb      	ldr	r3, [r7, #8]
   25ece:	0c1b      	lsrs	r3, r3, #16
   25ed0:	b2da      	uxtb	r2, r3
   25ed2:	2338      	movs	r3, #56	; 0x38
   25ed4:	18fb      	adds	r3, r7, r3
   25ed6:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   25ed8:	68bb      	ldr	r3, [r7, #8]
   25eda:	0a1b      	lsrs	r3, r3, #8
   25edc:	b2da      	uxtb	r2, r3
   25ede:	2338      	movs	r3, #56	; 0x38
   25ee0:	18fb      	adds	r3, r7, r3
   25ee2:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   25ee4:	68bb      	ldr	r3, [r7, #8]
   25ee6:	b2da      	uxtb	r2, r3
   25ee8:	2338      	movs	r3, #56	; 0x38
   25eea:	18fb      	adds	r3, r7, r3
   25eec:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   25eee:	683b      	ldr	r3, [r7, #0]
   25ef0:	0a1b      	lsrs	r3, r3, #8
   25ef2:	b2da      	uxtb	r2, r3
   25ef4:	2338      	movs	r3, #56	; 0x38
   25ef6:	18fb      	adds	r3, r7, r3
   25ef8:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   25efa:	683b      	ldr	r3, [r7, #0]
   25efc:	b2da      	uxtb	r2, r3
   25efe:	2338      	movs	r3, #56	; 0x38
   25f00:	18fb      	adds	r3, r7, r3
   25f02:	715a      	strb	r2, [r3, #5]
		len = 7;
   25f04:	2307      	movs	r3, #7
   25f06:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25f08:	e080      	b.n	2600c <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   25f0a:	68bb      	ldr	r3, [r7, #8]
   25f0c:	0c1b      	lsrs	r3, r3, #16
   25f0e:	b2da      	uxtb	r2, r3
   25f10:	2338      	movs	r3, #56	; 0x38
   25f12:	18fb      	adds	r3, r7, r3
   25f14:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   25f16:	68bb      	ldr	r3, [r7, #8]
   25f18:	0a1b      	lsrs	r3, r3, #8
   25f1a:	b2da      	uxtb	r2, r3
   25f1c:	2338      	movs	r3, #56	; 0x38
   25f1e:	18fb      	adds	r3, r7, r3
   25f20:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   25f22:	68bb      	ldr	r3, [r7, #8]
   25f24:	b2da      	uxtb	r2, r3
   25f26:	2338      	movs	r3, #56	; 0x38
   25f28:	18fb      	adds	r3, r7, r3
   25f2a:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   25f2c:	683b      	ldr	r3, [r7, #0]
   25f2e:	0c1b      	lsrs	r3, r3, #16
   25f30:	b2da      	uxtb	r2, r3
   25f32:	2338      	movs	r3, #56	; 0x38
   25f34:	18fb      	adds	r3, r7, r3
   25f36:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   25f38:	683b      	ldr	r3, [r7, #0]
   25f3a:	0a1b      	lsrs	r3, r3, #8
   25f3c:	b2da      	uxtb	r2, r3
   25f3e:	2338      	movs	r3, #56	; 0x38
   25f40:	18fb      	adds	r3, r7, r3
   25f42:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   25f44:	683b      	ldr	r3, [r7, #0]
   25f46:	b2da      	uxtb	r2, r3
   25f48:	2338      	movs	r3, #56	; 0x38
   25f4a:	18fb      	adds	r3, r7, r3
   25f4c:	719a      	strb	r2, [r3, #6]
		len = 8;
   25f4e:	2308      	movs	r3, #8
   25f50:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25f52:	e05b      	b.n	2600c <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   25f54:	68bb      	ldr	r3, [r7, #8]
   25f56:	0a1b      	lsrs	r3, r3, #8
   25f58:	b2da      	uxtb	r2, r3
   25f5a:	2338      	movs	r3, #56	; 0x38
   25f5c:	18fb      	adds	r3, r7, r3
   25f5e:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   25f60:	2388      	movs	r3, #136	; 0x88
   25f62:	18fb      	adds	r3, r7, r3
   25f64:	781b      	ldrb	r3, [r3, #0]
   25f66:	2b01      	cmp	r3, #1
   25f68:	d109      	bne.n	25f7e <spi_cmd_complete+0x1b6>
   25f6a:	2338      	movs	r3, #56	; 0x38
   25f6c:	18fb      	adds	r3, r7, r3
   25f6e:	785b      	ldrb	r3, [r3, #1]
   25f70:	2280      	movs	r2, #128	; 0x80
   25f72:	4252      	negs	r2, r2
   25f74:	4313      	orrs	r3, r2
   25f76:	b2da      	uxtb	r2, r3
   25f78:	2338      	movs	r3, #56	; 0x38
   25f7a:	18fb      	adds	r3, r7, r3
   25f7c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   25f7e:	68bb      	ldr	r3, [r7, #8]
   25f80:	b2da      	uxtb	r2, r3
   25f82:	2338      	movs	r3, #56	; 0x38
   25f84:	18fb      	adds	r3, r7, r3
   25f86:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   25f88:	687b      	ldr	r3, [r7, #4]
   25f8a:	78da      	ldrb	r2, [r3, #3]
   25f8c:	2338      	movs	r3, #56	; 0x38
   25f8e:	18fb      	adds	r3, r7, r3
   25f90:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   25f92:	687b      	ldr	r3, [r7, #4]
   25f94:	789a      	ldrb	r2, [r3, #2]
   25f96:	2338      	movs	r3, #56	; 0x38
   25f98:	18fb      	adds	r3, r7, r3
   25f9a:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   25f9c:	687b      	ldr	r3, [r7, #4]
   25f9e:	785a      	ldrb	r2, [r3, #1]
   25fa0:	2338      	movs	r3, #56	; 0x38
   25fa2:	18fb      	adds	r3, r7, r3
   25fa4:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   25fa6:	687b      	ldr	r3, [r7, #4]
   25fa8:	781a      	ldrb	r2, [r3, #0]
   25faa:	2338      	movs	r3, #56	; 0x38
   25fac:	18fb      	adds	r3, r7, r3
   25fae:	719a      	strb	r2, [r3, #6]
		len = 8;
   25fb0:	2308      	movs	r3, #8
   25fb2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   25fb4:	e02a      	b.n	2600c <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   25fb6:	68bb      	ldr	r3, [r7, #8]
   25fb8:	0c1b      	lsrs	r3, r3, #16
   25fba:	b2da      	uxtb	r2, r3
   25fbc:	2338      	movs	r3, #56	; 0x38
   25fbe:	18fb      	adds	r3, r7, r3
   25fc0:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   25fc2:	68bb      	ldr	r3, [r7, #8]
   25fc4:	0a1b      	lsrs	r3, r3, #8
   25fc6:	b2da      	uxtb	r2, r3
   25fc8:	2338      	movs	r3, #56	; 0x38
   25fca:	18fb      	adds	r3, r7, r3
   25fcc:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   25fce:	68bb      	ldr	r3, [r7, #8]
   25fd0:	b2da      	uxtb	r2, r3
   25fd2:	2338      	movs	r3, #56	; 0x38
   25fd4:	18fb      	adds	r3, r7, r3
   25fd6:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   25fd8:	687b      	ldr	r3, [r7, #4]
   25fda:	78da      	ldrb	r2, [r3, #3]
   25fdc:	2338      	movs	r3, #56	; 0x38
   25fde:	18fb      	adds	r3, r7, r3
   25fe0:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   25fe2:	687b      	ldr	r3, [r7, #4]
   25fe4:	789a      	ldrb	r2, [r3, #2]
   25fe6:	2338      	movs	r3, #56	; 0x38
   25fe8:	18fb      	adds	r3, r7, r3
   25fea:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   25fec:	687b      	ldr	r3, [r7, #4]
   25fee:	785a      	ldrb	r2, [r3, #1]
   25ff0:	2338      	movs	r3, #56	; 0x38
   25ff2:	18fb      	adds	r3, r7, r3
   25ff4:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   25ff6:	687b      	ldr	r3, [r7, #4]
   25ff8:	781a      	ldrb	r2, [r3, #0]
   25ffa:	2338      	movs	r3, #56	; 0x38
   25ffc:	18fb      	adds	r3, r7, r3
   25ffe:	71da      	strb	r2, [r3, #7]
		len = 9;
   26000:	2309      	movs	r3, #9
   26002:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   26004:	e002      	b.n	2600c <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   26006:	2300      	movs	r3, #0
   26008:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   2600a:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   2600c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2600e:	2b01      	cmp	r3, #1
   26010:	d001      	beq.n	26016 <spi_cmd_complete+0x24e>
		return result;
   26012:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26014:	e33a      	b.n	2668c <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   26016:	4b4d      	ldr	r3, [pc, #308]	; (2614c <spi_cmd_complete+0x384>)
   26018:	781b      	ldrb	r3, [r3, #0]
   2601a:	2b00      	cmp	r3, #0
   2601c:	d111      	bne.n	26042 <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   2601e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   26020:	1e5c      	subs	r4, r3, #1
   26022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   26024:	3b01      	subs	r3, #1
   26026:	001a      	movs	r2, r3
   26028:	2338      	movs	r3, #56	; 0x38
   2602a:	18fb      	adds	r3, r7, r3
   2602c:	0019      	movs	r1, r3
   2602e:	207f      	movs	r0, #127	; 0x7f
   26030:	4b47      	ldr	r3, [pc, #284]	; (26150 <spi_cmd_complete+0x388>)
   26032:	4798      	blx	r3
   26034:	0003      	movs	r3, r0
   26036:	18db      	adds	r3, r3, r3
   26038:	b2da      	uxtb	r2, r3
   2603a:	2338      	movs	r3, #56	; 0x38
   2603c:	18fb      	adds	r3, r7, r3
   2603e:	551a      	strb	r2, [r3, r4]
   26040:	e002      	b.n	26048 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   26042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   26044:	3b01      	subs	r3, #1
   26046:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   26048:	230f      	movs	r3, #15
   2604a:	18fb      	adds	r3, r7, r3
   2604c:	781b      	ldrb	r3, [r3, #0]
   2604e:	2bcf      	cmp	r3, #207	; 0xcf
   26050:	d009      	beq.n	26066 <spi_cmd_complete+0x29e>
   26052:	230f      	movs	r3, #15
   26054:	18fb      	adds	r3, r7, r3
   26056:	781b      	ldrb	r3, [r3, #0]
   26058:	2bc5      	cmp	r3, #197	; 0xc5
   2605a:	d004      	beq.n	26066 <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   2605c:	230f      	movs	r3, #15
   2605e:	18fb      	adds	r3, r7, r3
   26060:	781b      	ldrb	r3, [r3, #0]
   26062:	2bc6      	cmp	r3, #198	; 0xc6
   26064:	d103      	bne.n	2606e <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   26066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   26068:	3306      	adds	r3, #6
   2606a:	673b      	str	r3, [r7, #112]	; 0x70
   2606c:	e018      	b.n	260a0 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   2606e:	230f      	movs	r3, #15
   26070:	18fb      	adds	r3, r7, r3
   26072:	781b      	ldrb	r3, [r3, #0]
   26074:	2bc4      	cmp	r3, #196	; 0xc4
   26076:	d004      	beq.n	26082 <spi_cmd_complete+0x2ba>
   26078:	230f      	movs	r3, #15
   2607a:	18fb      	adds	r3, r7, r3
   2607c:	781b      	ldrb	r3, [r3, #0]
   2607e:	2bca      	cmp	r3, #202	; 0xca
   26080:	d10b      	bne.n	2609a <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   26082:	4b32      	ldr	r3, [pc, #200]	; (2614c <spi_cmd_complete+0x384>)
   26084:	781b      	ldrb	r3, [r3, #0]
   26086:	2b00      	cmp	r3, #0
   26088:	d103      	bne.n	26092 <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   2608a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2608c:	330c      	adds	r3, #12
   2608e:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   26090:	e006      	b.n	260a0 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   26092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   26094:	330a      	adds	r3, #10
   26096:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   26098:	e002      	b.n	260a0 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   2609a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2609c:	3305      	adds	r3, #5
   2609e:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   260a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   260a2:	2b20      	cmp	r3, #32
   260a4:	d914      	bls.n	260d0 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   260a6:	23f7      	movs	r3, #247	; 0xf7
   260a8:	005a      	lsls	r2, r3, #1
   260aa:	492a      	ldr	r1, [pc, #168]	; (26154 <spi_cmd_complete+0x38c>)
   260ac:	4b2a      	ldr	r3, [pc, #168]	; (26158 <spi_cmd_complete+0x390>)
   260ae:	0018      	movs	r0, r3
   260b0:	4b2a      	ldr	r3, [pc, #168]	; (2615c <spi_cmd_complete+0x394>)
   260b2:	4798      	blx	r3
   260b4:	6f39      	ldr	r1, [r7, #112]	; 0x70
   260b6:	4b2a      	ldr	r3, [pc, #168]	; (26160 <spi_cmd_complete+0x398>)
   260b8:	2220      	movs	r2, #32
   260ba:	0018      	movs	r0, r3
   260bc:	4b27      	ldr	r3, [pc, #156]	; (2615c <spi_cmd_complete+0x394>)
   260be:	4798      	blx	r3
   260c0:	4b28      	ldr	r3, [pc, #160]	; (26164 <spi_cmd_complete+0x39c>)
   260c2:	0018      	movs	r0, r3
   260c4:	4b25      	ldr	r3, [pc, #148]	; (2615c <spi_cmd_complete+0x394>)
   260c6:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   260c8:	2300      	movs	r3, #0
   260ca:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   260cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   260ce:	e2dd      	b.n	2668c <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   260d0:	2377      	movs	r3, #119	; 0x77
   260d2:	18fb      	adds	r3, r7, r3
   260d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   260d6:	701a      	strb	r2, [r3, #0]
   260d8:	e00d      	b.n	260f6 <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   260da:	2377      	movs	r3, #119	; 0x77
   260dc:	18fb      	adds	r3, r7, r3
   260de:	781b      	ldrb	r3, [r3, #0]
   260e0:	2238      	movs	r2, #56	; 0x38
   260e2:	18ba      	adds	r2, r7, r2
   260e4:	2100      	movs	r1, #0
   260e6:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   260e8:	2377      	movs	r3, #119	; 0x77
   260ea:	18fb      	adds	r3, r7, r3
   260ec:	781a      	ldrb	r2, [r3, #0]
   260ee:	2377      	movs	r3, #119	; 0x77
   260f0:	18fb      	adds	r3, r7, r3
   260f2:	3201      	adds	r2, #1
   260f4:	701a      	strb	r2, [r3, #0]
   260f6:	2377      	movs	r3, #119	; 0x77
   260f8:	18fb      	adds	r3, r7, r3
   260fa:	781a      	ldrb	r2, [r3, #0]
   260fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   260fe:	429a      	cmp	r2, r3
   26100:	d3eb      	bcc.n	260da <spi_cmd_complete+0x312>
	}
	rix = len;
   26102:	2376      	movs	r3, #118	; 0x76
   26104:	18fb      	adds	r3, r7, r3
   26106:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   26108:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   2610a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2610c:	b29a      	uxth	r2, r3
   2610e:	2318      	movs	r3, #24
   26110:	18f9      	adds	r1, r7, r3
   26112:	2338      	movs	r3, #56	; 0x38
   26114:	18fb      	adds	r3, r7, r3
   26116:	0018      	movs	r0, r3
   26118:	4b13      	ldr	r3, [pc, #76]	; (26168 <spi_cmd_complete+0x3a0>)
   2611a:	4798      	blx	r3
   2611c:	1e03      	subs	r3, r0, #0
   2611e:	d027      	beq.n	26170 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   26120:	23fa      	movs	r3, #250	; 0xfa
   26122:	33ff      	adds	r3, #255	; 0xff
   26124:	001a      	movs	r2, r3
   26126:	490b      	ldr	r1, [pc, #44]	; (26154 <spi_cmd_complete+0x38c>)
   26128:	4b0b      	ldr	r3, [pc, #44]	; (26158 <spi_cmd_complete+0x390>)
   2612a:	0018      	movs	r0, r3
   2612c:	4b0b      	ldr	r3, [pc, #44]	; (2615c <spi_cmd_complete+0x394>)
   2612e:	4798      	blx	r3
   26130:	4b0e      	ldr	r3, [pc, #56]	; (2616c <spi_cmd_complete+0x3a4>)
   26132:	0018      	movs	r0, r3
   26134:	4b09      	ldr	r3, [pc, #36]	; (2615c <spi_cmd_complete+0x394>)
   26136:	4798      	blx	r3
   26138:	4b0a      	ldr	r3, [pc, #40]	; (26164 <spi_cmd_complete+0x39c>)
   2613a:	0018      	movs	r0, r3
   2613c:	4b07      	ldr	r3, [pc, #28]	; (2615c <spi_cmd_complete+0x394>)
   2613e:	4798      	blx	r3
		result = N_FAIL;
   26140:	2300      	movs	r3, #0
   26142:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   26144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26146:	e2a1      	b.n	2668c <spi_cmd_complete+0x8c4>
   26148:	0003c5e4 	.word	0x0003c5e4
   2614c:	20004124 	.word	0x20004124
   26150:	000257fd 	.word	0x000257fd
   26154:	0003c644 	.word	0x0003c644
   26158:	0003c030 	.word	0x0003c030
   2615c:	00020329 	.word	0x00020329
   26160:	0003c0f8 	.word	0x0003c0f8
   26164:	0003c070 	.word	0x0003c070
   26168:	00025789 	.word	0x00025789
   2616c:	0003c044 	.word	0x0003c044
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   26170:	230f      	movs	r3, #15
   26172:	18fb      	adds	r3, r7, r3
   26174:	781b      	ldrb	r3, [r3, #0]
   26176:	2bcf      	cmp	r3, #207	; 0xcf
   26178:	d009      	beq.n	2618e <spi_cmd_complete+0x3c6>
   2617a:	230f      	movs	r3, #15
   2617c:	18fb      	adds	r3, r7, r3
   2617e:	781b      	ldrb	r3, [r3, #0]
   26180:	2bc5      	cmp	r3, #197	; 0xc5
   26182:	d004      	beq.n	2618e <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   26184:	230f      	movs	r3, #15
   26186:	18fb      	adds	r3, r7, r3
   26188:	781b      	ldrb	r3, [r3, #0]
   2618a:	2bc6      	cmp	r3, #198	; 0xc6
   2618c:	d106      	bne.n	2619c <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   2618e:	2376      	movs	r3, #118	; 0x76
   26190:	18fb      	adds	r3, r7, r3
   26192:	781a      	ldrb	r2, [r3, #0]
   26194:	2376      	movs	r3, #118	; 0x76
   26196:	18fb      	adds	r3, r7, r3
   26198:	3201      	adds	r2, #1
   2619a:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   2619c:	2376      	movs	r3, #118	; 0x76
   2619e:	18fb      	adds	r3, r7, r3
   261a0:	781b      	ldrb	r3, [r3, #0]
   261a2:	2276      	movs	r2, #118	; 0x76
   261a4:	18ba      	adds	r2, r7, r2
   261a6:	1c59      	adds	r1, r3, #1
   261a8:	7011      	strb	r1, [r2, #0]
   261aa:	001a      	movs	r2, r3
   261ac:	2318      	movs	r3, #24
   261ae:	18fb      	adds	r3, r7, r3
   261b0:	5c9a      	ldrb	r2, [r3, r2]
   261b2:	2317      	movs	r3, #23
   261b4:	18fb      	adds	r3, r7, r3
   261b6:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   261b8:	2317      	movs	r3, #23
   261ba:	18fb      	adds	r3, r7, r3
   261bc:	781b      	ldrb	r3, [r3, #0]
   261be:	220f      	movs	r2, #15
   261c0:	18ba      	adds	r2, r7, r2
   261c2:	7812      	ldrb	r2, [r2, #0]
   261c4:	429a      	cmp	r2, r3
   261c6:	d018      	beq.n	261fa <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   261c8:	4add      	ldr	r2, [pc, #884]	; (26540 <spi_cmd_complete+0x778>)
   261ca:	49de      	ldr	r1, [pc, #888]	; (26544 <spi_cmd_complete+0x77c>)
   261cc:	4bde      	ldr	r3, [pc, #888]	; (26548 <spi_cmd_complete+0x780>)
   261ce:	0018      	movs	r0, r3
   261d0:	4bde      	ldr	r3, [pc, #888]	; (2654c <spi_cmd_complete+0x784>)
   261d2:	4798      	blx	r3
   261d4:	230f      	movs	r3, #15
   261d6:	18fb      	adds	r3, r7, r3
   261d8:	7819      	ldrb	r1, [r3, #0]
   261da:	2317      	movs	r3, #23
   261dc:	18fb      	adds	r3, r7, r3
   261de:	781b      	ldrb	r3, [r3, #0]
   261e0:	001a      	movs	r2, r3
   261e2:	4bdb      	ldr	r3, [pc, #876]	; (26550 <spi_cmd_complete+0x788>)
   261e4:	0018      	movs	r0, r3
   261e6:	4bd9      	ldr	r3, [pc, #868]	; (2654c <spi_cmd_complete+0x784>)
   261e8:	4798      	blx	r3
   261ea:	4bda      	ldr	r3, [pc, #872]	; (26554 <spi_cmd_complete+0x78c>)
   261ec:	0018      	movs	r0, r3
   261ee:	4bd7      	ldr	r3, [pc, #860]	; (2654c <spi_cmd_complete+0x784>)
   261f0:	4798      	blx	r3
		result = N_FAIL;
   261f2:	2300      	movs	r3, #0
   261f4:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   261f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   261f8:	e248      	b.n	2668c <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   261fa:	2376      	movs	r3, #118	; 0x76
   261fc:	18fb      	adds	r3, r7, r3
   261fe:	781b      	ldrb	r3, [r3, #0]
   26200:	2276      	movs	r2, #118	; 0x76
   26202:	18ba      	adds	r2, r7, r2
   26204:	1c59      	adds	r1, r3, #1
   26206:	7011      	strb	r1, [r2, #0]
   26208:	001a      	movs	r2, r3
   2620a:	2318      	movs	r3, #24
   2620c:	18fb      	adds	r3, r7, r3
   2620e:	5c9a      	ldrb	r2, [r3, r2]
   26210:	2317      	movs	r3, #23
   26212:	18fb      	adds	r3, r7, r3
   26214:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   26216:	2317      	movs	r3, #23
   26218:	18fb      	adds	r3, r7, r3
   2621a:	781b      	ldrb	r3, [r3, #0]
   2621c:	2b00      	cmp	r3, #0
   2621e:	d016      	beq.n	2624e <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   26220:	4acd      	ldr	r2, [pc, #820]	; (26558 <spi_cmd_complete+0x790>)
   26222:	49c8      	ldr	r1, [pc, #800]	; (26544 <spi_cmd_complete+0x77c>)
   26224:	4bc8      	ldr	r3, [pc, #800]	; (26548 <spi_cmd_complete+0x780>)
   26226:	0018      	movs	r0, r3
   26228:	4bc8      	ldr	r3, [pc, #800]	; (2654c <spi_cmd_complete+0x784>)
   2622a:	4798      	blx	r3
   2622c:	2317      	movs	r3, #23
   2622e:	18fb      	adds	r3, r7, r3
   26230:	781b      	ldrb	r3, [r3, #0]
   26232:	001a      	movs	r2, r3
   26234:	4bc9      	ldr	r3, [pc, #804]	; (2655c <spi_cmd_complete+0x794>)
   26236:	0011      	movs	r1, r2
   26238:	0018      	movs	r0, r3
   2623a:	4bc4      	ldr	r3, [pc, #784]	; (2654c <spi_cmd_complete+0x784>)
   2623c:	4798      	blx	r3
   2623e:	4bc5      	ldr	r3, [pc, #788]	; (26554 <spi_cmd_complete+0x78c>)
   26240:	0018      	movs	r0, r3
   26242:	4bc2      	ldr	r3, [pc, #776]	; (2654c <spi_cmd_complete+0x784>)
   26244:	4798      	blx	r3
		result = N_FAIL;
   26246:	2300      	movs	r3, #0
   26248:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2624a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2624c:	e21e      	b.n	2668c <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   2624e:	230f      	movs	r3, #15
   26250:	18fb      	adds	r3, r7, r3
   26252:	781b      	ldrb	r3, [r3, #0]
   26254:	2bc4      	cmp	r3, #196	; 0xc4
   26256:	d00f      	beq.n	26278 <spi_cmd_complete+0x4b0>
   26258:	230f      	movs	r3, #15
   2625a:	18fb      	adds	r3, r7, r3
   2625c:	781b      	ldrb	r3, [r3, #0]
   2625e:	2bca      	cmp	r3, #202	; 0xca
   26260:	d00a      	beq.n	26278 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   26262:	230f      	movs	r3, #15
   26264:	18fb      	adds	r3, r7, r3
   26266:	781b      	ldrb	r3, [r3, #0]
   26268:	2bc2      	cmp	r3, #194	; 0xc2
   2626a:	d005      	beq.n	26278 <spi_cmd_complete+0x4b0>
   2626c:	230f      	movs	r3, #15
   2626e:	18fb      	adds	r3, r7, r3
   26270:	781b      	ldrb	r3, [r3, #0]
   26272:	2bc8      	cmp	r3, #200	; 0xc8
   26274:	d000      	beq.n	26278 <spi_cmd_complete+0x4b0>
   26276:	e208      	b.n	2668a <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   26278:	230a      	movs	r3, #10
   2627a:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   2627c:	2376      	movs	r3, #118	; 0x76
   2627e:	18fb      	adds	r3, r7, r3
   26280:	781a      	ldrb	r2, [r3, #0]
   26282:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   26284:	429a      	cmp	r2, r3
   26286:	d218      	bcs.n	262ba <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   26288:	2376      	movs	r3, #118	; 0x76
   2628a:	18fb      	adds	r3, r7, r3
   2628c:	781b      	ldrb	r3, [r3, #0]
   2628e:	2276      	movs	r2, #118	; 0x76
   26290:	18ba      	adds	r2, r7, r2
   26292:	1c59      	adds	r1, r3, #1
   26294:	7011      	strb	r1, [r2, #0]
   26296:	001a      	movs	r2, r3
   26298:	2318      	movs	r3, #24
   2629a:	18fb      	adds	r3, r7, r3
   2629c:	5c9a      	ldrb	r2, [r3, r2]
   2629e:	2317      	movs	r3, #23
   262a0:	18fb      	adds	r3, r7, r3
   262a2:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   262a4:	2317      	movs	r3, #23
   262a6:	18fb      	adds	r3, r7, r3
   262a8:	781b      	ldrb	r3, [r3, #0]
   262aa:	091b      	lsrs	r3, r3, #4
   262ac:	b2db      	uxtb	r3, r3
   262ae:	001a      	movs	r2, r3
   262b0:	230f      	movs	r3, #15
   262b2:	4013      	ands	r3, r2
   262b4:	2b0f      	cmp	r3, #15
   262b6:	d103      	bne.n	262c0 <spi_cmd_complete+0x4f8>
					break;
   262b8:	e007      	b.n	262ca <spi_cmd_complete+0x502>
					retry = 0;
   262ba:	2300      	movs	r3, #0
   262bc:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   262be:	e004      	b.n	262ca <spi_cmd_complete+0x502>
			} while (retry--);
   262c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   262c2:	1e5a      	subs	r2, r3, #1
   262c4:	667a      	str	r2, [r7, #100]	; 0x64
   262c6:	2b00      	cmp	r3, #0
   262c8:	d1d8      	bne.n	2627c <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   262ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   262cc:	2b00      	cmp	r3, #0
   262ce:	dc18      	bgt.n	26302 <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   262d0:	2395      	movs	r3, #149	; 0x95
   262d2:	009a      	lsls	r2, r3, #2
   262d4:	499b      	ldr	r1, [pc, #620]	; (26544 <spi_cmd_complete+0x77c>)
   262d6:	4b9c      	ldr	r3, [pc, #624]	; (26548 <spi_cmd_complete+0x780>)
   262d8:	0018      	movs	r0, r3
   262da:	4b9c      	ldr	r3, [pc, #624]	; (2654c <spi_cmd_complete+0x784>)
   262dc:	4798      	blx	r3
   262de:	2317      	movs	r3, #23
   262e0:	18fb      	adds	r3, r7, r3
   262e2:	781b      	ldrb	r3, [r3, #0]
   262e4:	001a      	movs	r2, r3
   262e6:	4b9e      	ldr	r3, [pc, #632]	; (26560 <spi_cmd_complete+0x798>)
   262e8:	0011      	movs	r1, r2
   262ea:	0018      	movs	r0, r3
   262ec:	4b97      	ldr	r3, [pc, #604]	; (2654c <spi_cmd_complete+0x784>)
   262ee:	4798      	blx	r3
   262f0:	4b98      	ldr	r3, [pc, #608]	; (26554 <spi_cmd_complete+0x78c>)
   262f2:	0018      	movs	r0, r3
   262f4:	4b95      	ldr	r3, [pc, #596]	; (2654c <spi_cmd_complete+0x784>)
   262f6:	4798      	blx	r3
				result = N_RESET;
   262f8:	2301      	movs	r3, #1
   262fa:	425b      	negs	r3, r3
   262fc:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   262fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26300:	e1c4      	b.n	2668c <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   26302:	230f      	movs	r3, #15
   26304:	18fb      	adds	r3, r7, r3
   26306:	781b      	ldrb	r3, [r3, #0]
   26308:	2bc4      	cmp	r3, #196	; 0xc4
   2630a:	d005      	beq.n	26318 <spi_cmd_complete+0x550>
   2630c:	230f      	movs	r3, #15
   2630e:	18fb      	adds	r3, r7, r3
   26310:	781b      	ldrb	r3, [r3, #0]
   26312:	2bca      	cmp	r3, #202	; 0xca
   26314:	d000      	beq.n	26318 <spi_cmd_complete+0x550>
   26316:	e08e      	b.n	26436 <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   26318:	2376      	movs	r3, #118	; 0x76
   2631a:	18fb      	adds	r3, r7, r3
   2631c:	781b      	ldrb	r3, [r3, #0]
   2631e:	3303      	adds	r3, #3
   26320:	001a      	movs	r2, r3
   26322:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   26324:	429a      	cmp	r2, r3
   26326:	d23c      	bcs.n	263a2 <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   26328:	2376      	movs	r3, #118	; 0x76
   2632a:	18fb      	adds	r3, r7, r3
   2632c:	781b      	ldrb	r3, [r3, #0]
   2632e:	2276      	movs	r2, #118	; 0x76
   26330:	18ba      	adds	r2, r7, r2
   26332:	1c59      	adds	r1, r3, #1
   26334:	7011      	strb	r1, [r2, #0]
   26336:	001a      	movs	r2, r3
   26338:	2318      	movs	r3, #24
   2633a:	18fb      	adds	r3, r7, r3
   2633c:	5c9a      	ldrb	r2, [r3, r2]
   2633e:	687b      	ldr	r3, [r7, #4]
   26340:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   26342:	687b      	ldr	r3, [r7, #4]
   26344:	1c5a      	adds	r2, r3, #1
   26346:	2376      	movs	r3, #118	; 0x76
   26348:	18fb      	adds	r3, r7, r3
   2634a:	781b      	ldrb	r3, [r3, #0]
   2634c:	2176      	movs	r1, #118	; 0x76
   2634e:	1879      	adds	r1, r7, r1
   26350:	1c58      	adds	r0, r3, #1
   26352:	7008      	strb	r0, [r1, #0]
   26354:	0019      	movs	r1, r3
   26356:	2318      	movs	r3, #24
   26358:	18fb      	adds	r3, r7, r3
   2635a:	5c5b      	ldrb	r3, [r3, r1]
   2635c:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   2635e:	687b      	ldr	r3, [r7, #4]
   26360:	1c9a      	adds	r2, r3, #2
   26362:	2376      	movs	r3, #118	; 0x76
   26364:	18fb      	adds	r3, r7, r3
   26366:	781b      	ldrb	r3, [r3, #0]
   26368:	2176      	movs	r1, #118	; 0x76
   2636a:	1879      	adds	r1, r7, r1
   2636c:	1c58      	adds	r0, r3, #1
   2636e:	7008      	strb	r0, [r1, #0]
   26370:	0019      	movs	r1, r3
   26372:	2318      	movs	r3, #24
   26374:	18fb      	adds	r3, r7, r3
   26376:	5c5b      	ldrb	r3, [r3, r1]
   26378:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   2637a:	687b      	ldr	r3, [r7, #4]
   2637c:	1cda      	adds	r2, r3, #3
   2637e:	2376      	movs	r3, #118	; 0x76
   26380:	18fb      	adds	r3, r7, r3
   26382:	781b      	ldrb	r3, [r3, #0]
   26384:	2176      	movs	r1, #118	; 0x76
   26386:	1879      	adds	r1, r7, r1
   26388:	1c58      	adds	r0, r3, #1
   2638a:	7008      	strb	r0, [r1, #0]
   2638c:	0019      	movs	r1, r3
   2638e:	2318      	movs	r3, #24
   26390:	18fb      	adds	r3, r7, r3
   26392:	5c5b      	ldrb	r3, [r3, r1]
   26394:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   26396:	4b73      	ldr	r3, [pc, #460]	; (26564 <spi_cmd_complete+0x79c>)
   26398:	781b      	ldrb	r3, [r3, #0]
   2639a:	2b00      	cmp	r3, #0
   2639c:	d000      	beq.n	263a0 <spi_cmd_complete+0x5d8>
   2639e:	e174      	b.n	2668a <spi_cmd_complete+0x8c2>
   263a0:	e011      	b.n	263c6 <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   263a2:	4a71      	ldr	r2, [pc, #452]	; (26568 <spi_cmd_complete+0x7a0>)
   263a4:	4967      	ldr	r1, [pc, #412]	; (26544 <spi_cmd_complete+0x77c>)
   263a6:	4b68      	ldr	r3, [pc, #416]	; (26548 <spi_cmd_complete+0x780>)
   263a8:	0018      	movs	r0, r3
   263aa:	4b68      	ldr	r3, [pc, #416]	; (2654c <spi_cmd_complete+0x784>)
   263ac:	4798      	blx	r3
   263ae:	4b6f      	ldr	r3, [pc, #444]	; (2656c <spi_cmd_complete+0x7a4>)
   263b0:	0018      	movs	r0, r3
   263b2:	4b66      	ldr	r3, [pc, #408]	; (2654c <spi_cmd_complete+0x784>)
   263b4:	4798      	blx	r3
   263b6:	4b67      	ldr	r3, [pc, #412]	; (26554 <spi_cmd_complete+0x78c>)
   263b8:	0018      	movs	r0, r3
   263ba:	4b64      	ldr	r3, [pc, #400]	; (2654c <spi_cmd_complete+0x784>)
   263bc:	4798      	blx	r3
					result = N_FAIL;
   263be:	2300      	movs	r3, #0
   263c0:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   263c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   263c4:	e162      	b.n	2668c <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   263c6:	2376      	movs	r3, #118	; 0x76
   263c8:	18fb      	adds	r3, r7, r3
   263ca:	781b      	ldrb	r3, [r3, #0]
   263cc:	3301      	adds	r3, #1
   263ce:	001a      	movs	r2, r3
   263d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   263d2:	429a      	cmp	r2, r3
   263d4:	d21c      	bcs.n	26410 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   263d6:	2376      	movs	r3, #118	; 0x76
   263d8:	18fb      	adds	r3, r7, r3
   263da:	781b      	ldrb	r3, [r3, #0]
   263dc:	2276      	movs	r2, #118	; 0x76
   263de:	18ba      	adds	r2, r7, r2
   263e0:	1c59      	adds	r1, r3, #1
   263e2:	7011      	strb	r1, [r2, #0]
   263e4:	001a      	movs	r2, r3
   263e6:	2318      	movs	r3, #24
   263e8:	18fb      	adds	r3, r7, r3
   263ea:	5c9a      	ldrb	r2, [r3, r2]
   263ec:	2314      	movs	r3, #20
   263ee:	18fb      	adds	r3, r7, r3
   263f0:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   263f2:	2376      	movs	r3, #118	; 0x76
   263f4:	18fb      	adds	r3, r7, r3
   263f6:	781b      	ldrb	r3, [r3, #0]
   263f8:	2276      	movs	r2, #118	; 0x76
   263fa:	18ba      	adds	r2, r7, r2
   263fc:	1c59      	adds	r1, r3, #1
   263fe:	7011      	strb	r1, [r2, #0]
   26400:	001a      	movs	r2, r3
   26402:	2318      	movs	r3, #24
   26404:	18fb      	adds	r3, r7, r3
   26406:	5c9a      	ldrb	r2, [r3, r2]
   26408:	2314      	movs	r3, #20
   2640a:	18fb      	adds	r3, r7, r3
   2640c:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   2640e:	e13c      	b.n	2668a <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   26410:	239c      	movs	r3, #156	; 0x9c
   26412:	009a      	lsls	r2, r3, #2
   26414:	494b      	ldr	r1, [pc, #300]	; (26544 <spi_cmd_complete+0x77c>)
   26416:	4b4c      	ldr	r3, [pc, #304]	; (26548 <spi_cmd_complete+0x780>)
   26418:	0018      	movs	r0, r3
   2641a:	4b4c      	ldr	r3, [pc, #304]	; (2654c <spi_cmd_complete+0x784>)
   2641c:	4798      	blx	r3
   2641e:	4b54      	ldr	r3, [pc, #336]	; (26570 <spi_cmd_complete+0x7a8>)
   26420:	0018      	movs	r0, r3
   26422:	4b4a      	ldr	r3, [pc, #296]	; (2654c <spi_cmd_complete+0x784>)
   26424:	4798      	blx	r3
   26426:	4b4b      	ldr	r3, [pc, #300]	; (26554 <spi_cmd_complete+0x78c>)
   26428:	0018      	movs	r0, r3
   2642a:	4b48      	ldr	r3, [pc, #288]	; (2654c <spi_cmd_complete+0x784>)
   2642c:	4798      	blx	r3
						result = N_FAIL;
   2642e:	2300      	movs	r3, #0
   26430:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   26432:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26434:	e12a      	b.n	2668c <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   26436:	230f      	movs	r3, #15
   26438:	18fb      	adds	r3, r7, r3
   2643a:	781b      	ldrb	r3, [r3, #0]
   2643c:	2bc2      	cmp	r3, #194	; 0xc2
   2643e:	d005      	beq.n	2644c <spi_cmd_complete+0x684>
   26440:	230f      	movs	r3, #15
   26442:	18fb      	adds	r3, r7, r3
   26444:	781b      	ldrb	r3, [r3, #0]
   26446:	2bc8      	cmp	r3, #200	; 0xc8
   26448:	d000      	beq.n	2644c <spi_cmd_complete+0x684>
   2644a:	e11e      	b.n	2668a <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   2644c:	2300      	movs	r3, #0
   2644e:	663b      	str	r3, [r7, #96]	; 0x60
   26450:	e011      	b.n	26476 <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   26452:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   26454:	1c5a      	adds	r2, r3, #1
   26456:	663a      	str	r2, [r7, #96]	; 0x60
   26458:	001a      	movs	r2, r3
   2645a:	687b      	ldr	r3, [r7, #4]
   2645c:	189a      	adds	r2, r3, r2
   2645e:	2376      	movs	r3, #118	; 0x76
   26460:	18fb      	adds	r3, r7, r3
   26462:	781b      	ldrb	r3, [r3, #0]
   26464:	2176      	movs	r1, #118	; 0x76
   26466:	1879      	adds	r1, r7, r1
   26468:	1c58      	adds	r0, r3, #1
   2646a:	7008      	strb	r0, [r1, #0]
   2646c:	0019      	movs	r1, r3
   2646e:	2318      	movs	r3, #24
   26470:	18fb      	adds	r3, r7, r3
   26472:	5c5b      	ldrb	r3, [r3, r1]
   26474:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   26476:	2376      	movs	r3, #118	; 0x76
   26478:	18fb      	adds	r3, r7, r3
   2647a:	781a      	ldrb	r2, [r3, #0]
   2647c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2647e:	429a      	cmp	r2, r3
   26480:	d203      	bcs.n	2648a <spi_cmd_complete+0x6c2>
   26482:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   26484:	683b      	ldr	r3, [r7, #0]
   26486:	429a      	cmp	r2, r3
   26488:	d3e3      	bcc.n	26452 <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   2648a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2648c:	683a      	ldr	r2, [r7, #0]
   2648e:	1ad3      	subs	r3, r2, r3
   26490:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   26492:	683b      	ldr	r3, [r7, #0]
   26494:	2b00      	cmp	r3, #0
   26496:	d100      	bne.n	2649a <spi_cmd_complete+0x6d2>
   26498:	e0f1      	b.n	2667e <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   2649a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2649c:	2280      	movs	r2, #128	; 0x80
   2649e:	0192      	lsls	r2, r2, #6
   264a0:	1ad3      	subs	r3, r2, r3
   264a2:	001a      	movs	r2, r3
   264a4:	683b      	ldr	r3, [r7, #0]
   264a6:	429a      	cmp	r2, r3
   264a8:	d302      	bcc.n	264b0 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   264aa:	683b      	ldr	r3, [r7, #0]
   264ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   264ae:	e004      	b.n	264ba <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   264b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   264b2:	2280      	movs	r2, #128	; 0x80
   264b4:	0192      	lsls	r2, r2, #6
   264b6:	1ad3      	subs	r3, r2, r3
   264b8:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   264ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   264bc:	687a      	ldr	r2, [r7, #4]
   264be:	18d3      	adds	r3, r2, r3
   264c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   264c2:	b292      	uxth	r2, r2
   264c4:	0011      	movs	r1, r2
   264c6:	0018      	movs	r0, r3
   264c8:	4b2a      	ldr	r3, [pc, #168]	; (26574 <spi_cmd_complete+0x7ac>)
   264ca:	4798      	blx	r3
   264cc:	1e03      	subs	r3, r0, #0
   264ce:	d010      	beq.n	264f2 <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   264d0:	4a29      	ldr	r2, [pc, #164]	; (26578 <spi_cmd_complete+0x7b0>)
   264d2:	491c      	ldr	r1, [pc, #112]	; (26544 <spi_cmd_complete+0x77c>)
   264d4:	4b1c      	ldr	r3, [pc, #112]	; (26548 <spi_cmd_complete+0x780>)
   264d6:	0018      	movs	r0, r3
   264d8:	4b1c      	ldr	r3, [pc, #112]	; (2654c <spi_cmd_complete+0x784>)
   264da:	4798      	blx	r3
   264dc:	4b27      	ldr	r3, [pc, #156]	; (2657c <spi_cmd_complete+0x7b4>)
   264de:	0018      	movs	r0, r3
   264e0:	4b1a      	ldr	r3, [pc, #104]	; (2654c <spi_cmd_complete+0x784>)
   264e2:	4798      	blx	r3
   264e4:	4b1b      	ldr	r3, [pc, #108]	; (26554 <spi_cmd_complete+0x78c>)
   264e6:	0018      	movs	r0, r3
   264e8:	4b18      	ldr	r3, [pc, #96]	; (2654c <spi_cmd_complete+0x784>)
   264ea:	4798      	blx	r3
						result = N_FAIL;
   264ec:	2300      	movs	r3, #0
   264ee:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   264f0:	e0cb      	b.n	2668a <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   264f2:	4b1c      	ldr	r3, [pc, #112]	; (26564 <spi_cmd_complete+0x79c>)
   264f4:	781b      	ldrb	r3, [r3, #0]
   264f6:	2b00      	cmp	r3, #0
   264f8:	d119      	bne.n	2652e <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   264fa:	2314      	movs	r3, #20
   264fc:	18fb      	adds	r3, r7, r3
   264fe:	2102      	movs	r1, #2
   26500:	0018      	movs	r0, r3
   26502:	4b1c      	ldr	r3, [pc, #112]	; (26574 <spi_cmd_complete+0x7ac>)
   26504:	4798      	blx	r3
   26506:	1e03      	subs	r3, r0, #0
   26508:	d011      	beq.n	2652e <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   2650a:	23a6      	movs	r3, #166	; 0xa6
   2650c:	009a      	lsls	r2, r3, #2
   2650e:	490d      	ldr	r1, [pc, #52]	; (26544 <spi_cmd_complete+0x77c>)
   26510:	4b0d      	ldr	r3, [pc, #52]	; (26548 <spi_cmd_complete+0x780>)
   26512:	0018      	movs	r0, r3
   26514:	4b0d      	ldr	r3, [pc, #52]	; (2654c <spi_cmd_complete+0x784>)
   26516:	4798      	blx	r3
   26518:	4b19      	ldr	r3, [pc, #100]	; (26580 <spi_cmd_complete+0x7b8>)
   2651a:	0018      	movs	r0, r3
   2651c:	4b0b      	ldr	r3, [pc, #44]	; (2654c <spi_cmd_complete+0x784>)
   2651e:	4798      	blx	r3
   26520:	4b0c      	ldr	r3, [pc, #48]	; (26554 <spi_cmd_complete+0x78c>)
   26522:	0018      	movs	r0, r3
   26524:	4b09      	ldr	r3, [pc, #36]	; (2654c <spi_cmd_complete+0x784>)
   26526:	4798      	blx	r3
							result = N_FAIL;
   26528:	2300      	movs	r3, #0
   2652a:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   2652c:	e0ad      	b.n	2668a <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   2652e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   26530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   26532:	18d3      	adds	r3, r2, r3
   26534:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   26536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   26538:	683a      	ldr	r2, [r7, #0]
   2653a:	1ad3      	subs	r3, r2, r3
   2653c:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   2653e:	e09e      	b.n	2667e <spi_cmd_complete+0x8b6>
   26540:	0000022f 	.word	0x0000022f
   26544:	0003c644 	.word	0x0003c644
   26548:	0003c030 	.word	0x0003c030
   2654c:	00020329 	.word	0x00020329
   26550:	0003c128 	.word	0x0003c128
   26554:	0003c070 	.word	0x0003c070
   26558:	00000239 	.word	0x00000239
   2655c:	0003c164 	.word	0x0003c164
   26560:	0003c198 	.word	0x0003c198
   26564:	20004124 	.word	0x20004124
   26568:	00000263 	.word	0x00000263
   2656c:	0003c1c8 	.word	0x0003c1c8
   26570:	0003c1f8 	.word	0x0003c1f8
   26574:	00025701 	.word	0x00025701
   26578:	0000028e 	.word	0x0000028e
   2657c:	0003c228 	.word	0x0003c228
   26580:	0003c25c 	.word	0x0003c25c
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   26584:	683a      	ldr	r2, [r7, #0]
   26586:	2380      	movs	r3, #128	; 0x80
   26588:	019b      	lsls	r3, r3, #6
   2658a:	429a      	cmp	r2, r3
   2658c:	d802      	bhi.n	26594 <spi_cmd_complete+0x7cc>
						nbytes = sz;
   2658e:	683b      	ldr	r3, [r7, #0]
   26590:	65bb      	str	r3, [r7, #88]	; 0x58
   26592:	e002      	b.n	2659a <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   26594:	2380      	movs	r3, #128	; 0x80
   26596:	019b      	lsls	r3, r3, #6
   26598:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   2659a:	230a      	movs	r3, #10
   2659c:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   2659e:	2317      	movs	r3, #23
   265a0:	18fb      	adds	r3, r7, r3
   265a2:	2101      	movs	r1, #1
   265a4:	0018      	movs	r0, r3
   265a6:	4b3b      	ldr	r3, [pc, #236]	; (26694 <spi_cmd_complete+0x8cc>)
   265a8:	4798      	blx	r3
   265aa:	1e03      	subs	r3, r0, #0
   265ac:	d011      	beq.n	265d2 <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   265ae:	23ae      	movs	r3, #174	; 0xae
   265b0:	009a      	lsls	r2, r3, #2
   265b2:	4939      	ldr	r1, [pc, #228]	; (26698 <spi_cmd_complete+0x8d0>)
   265b4:	4b39      	ldr	r3, [pc, #228]	; (2669c <spi_cmd_complete+0x8d4>)
   265b6:	0018      	movs	r0, r3
   265b8:	4b39      	ldr	r3, [pc, #228]	; (266a0 <spi_cmd_complete+0x8d8>)
   265ba:	4798      	blx	r3
   265bc:	4b39      	ldr	r3, [pc, #228]	; (266a4 <spi_cmd_complete+0x8dc>)
   265be:	0018      	movs	r0, r3
   265c0:	4b37      	ldr	r3, [pc, #220]	; (266a0 <spi_cmd_complete+0x8d8>)
   265c2:	4798      	blx	r3
   265c4:	4b38      	ldr	r3, [pc, #224]	; (266a8 <spi_cmd_complete+0x8e0>)
   265c6:	0018      	movs	r0, r3
   265c8:	4b35      	ldr	r3, [pc, #212]	; (266a0 <spi_cmd_complete+0x8d8>)
   265ca:	4798      	blx	r3
							result = N_FAIL;
   265cc:	2300      	movs	r3, #0
   265ce:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   265d0:	e010      	b.n	265f4 <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   265d2:	2317      	movs	r3, #23
   265d4:	18fb      	adds	r3, r7, r3
   265d6:	781b      	ldrb	r3, [r3, #0]
   265d8:	091b      	lsrs	r3, r3, #4
   265da:	b2db      	uxtb	r3, r3
   265dc:	001a      	movs	r2, r3
   265de:	230f      	movs	r3, #15
   265e0:	4013      	ands	r3, r2
   265e2:	2b0f      	cmp	r3, #15
   265e4:	d005      	beq.n	265f2 <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   265e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   265e8:	1e5a      	subs	r2, r3, #1
   265ea:	667a      	str	r2, [r7, #100]	; 0x64
   265ec:	2b00      	cmp	r3, #0
   265ee:	d1d6      	bne.n	2659e <spi_cmd_complete+0x7d6>
   265f0:	e000      	b.n	265f4 <spi_cmd_complete+0x82c>
							break;
   265f2:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   265f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   265f6:	2b00      	cmp	r3, #0
   265f8:	d046      	beq.n	26688 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   265fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   265fc:	687a      	ldr	r2, [r7, #4]
   265fe:	18d3      	adds	r3, r2, r3
   26600:	6dba      	ldr	r2, [r7, #88]	; 0x58
   26602:	b292      	uxth	r2, r2
   26604:	0011      	movs	r1, r2
   26606:	0018      	movs	r0, r3
   26608:	4b22      	ldr	r3, [pc, #136]	; (26694 <spi_cmd_complete+0x8cc>)
   2660a:	4798      	blx	r3
   2660c:	1e03      	subs	r3, r0, #0
   2660e:	d011      	beq.n	26634 <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   26610:	23b2      	movs	r3, #178	; 0xb2
   26612:	009a      	lsls	r2, r3, #2
   26614:	4920      	ldr	r1, [pc, #128]	; (26698 <spi_cmd_complete+0x8d0>)
   26616:	4b21      	ldr	r3, [pc, #132]	; (2669c <spi_cmd_complete+0x8d4>)
   26618:	0018      	movs	r0, r3
   2661a:	4b21      	ldr	r3, [pc, #132]	; (266a0 <spi_cmd_complete+0x8d8>)
   2661c:	4798      	blx	r3
   2661e:	4b23      	ldr	r3, [pc, #140]	; (266ac <spi_cmd_complete+0x8e4>)
   26620:	0018      	movs	r0, r3
   26622:	4b1f      	ldr	r3, [pc, #124]	; (266a0 <spi_cmd_complete+0x8d8>)
   26624:	4798      	blx	r3
   26626:	4b20      	ldr	r3, [pc, #128]	; (266a8 <spi_cmd_complete+0x8e0>)
   26628:	0018      	movs	r0, r3
   2662a:	4b1d      	ldr	r3, [pc, #116]	; (266a0 <spi_cmd_complete+0x8d8>)
   2662c:	4798      	blx	r3
						result = N_FAIL;
   2662e:	2300      	movs	r3, #0
   26630:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   26632:	e02a      	b.n	2668a <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   26634:	4b1e      	ldr	r3, [pc, #120]	; (266b0 <spi_cmd_complete+0x8e8>)
   26636:	781b      	ldrb	r3, [r3, #0]
   26638:	2b00      	cmp	r3, #0
   2663a:	d118      	bne.n	2666e <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   2663c:	2314      	movs	r3, #20
   2663e:	18fb      	adds	r3, r7, r3
   26640:	2102      	movs	r1, #2
   26642:	0018      	movs	r0, r3
   26644:	4b13      	ldr	r3, [pc, #76]	; (26694 <spi_cmd_complete+0x8cc>)
   26646:	4798      	blx	r3
   26648:	1e03      	subs	r3, r0, #0
   2664a:	d010      	beq.n	2666e <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   2664c:	4a19      	ldr	r2, [pc, #100]	; (266b4 <spi_cmd_complete+0x8ec>)
   2664e:	4912      	ldr	r1, [pc, #72]	; (26698 <spi_cmd_complete+0x8d0>)
   26650:	4b12      	ldr	r3, [pc, #72]	; (2669c <spi_cmd_complete+0x8d4>)
   26652:	0018      	movs	r0, r3
   26654:	4b12      	ldr	r3, [pc, #72]	; (266a0 <spi_cmd_complete+0x8d8>)
   26656:	4798      	blx	r3
   26658:	4b17      	ldr	r3, [pc, #92]	; (266b8 <spi_cmd_complete+0x8f0>)
   2665a:	0018      	movs	r0, r3
   2665c:	4b10      	ldr	r3, [pc, #64]	; (266a0 <spi_cmd_complete+0x8d8>)
   2665e:	4798      	blx	r3
   26660:	4b11      	ldr	r3, [pc, #68]	; (266a8 <spi_cmd_complete+0x8e0>)
   26662:	0018      	movs	r0, r3
   26664:	4b0e      	ldr	r3, [pc, #56]	; (266a0 <spi_cmd_complete+0x8d8>)
   26666:	4798      	blx	r3
							result = N_FAIL;
   26668:	2300      	movs	r3, #0
   2666a:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   2666c:	e00d      	b.n	2668a <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   2666e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   26670:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26672:	18d3      	adds	r3, r2, r3
   26674:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   26676:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26678:	683a      	ldr	r2, [r7, #0]
   2667a:	1ad3      	subs	r3, r2, r3
   2667c:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   2667e:	683b      	ldr	r3, [r7, #0]
   26680:	2b00      	cmp	r3, #0
   26682:	d000      	beq.n	26686 <spi_cmd_complete+0x8be>
   26684:	e77e      	b.n	26584 <spi_cmd_complete+0x7bc>
   26686:	e000      	b.n	2668a <spi_cmd_complete+0x8c2>
						break;
   26688:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   2668a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   2668c:	0018      	movs	r0, r3
   2668e:	46bd      	mov	sp, r7
   26690:	b01f      	add	sp, #124	; 0x7c
   26692:	bd90      	pop	{r4, r7, pc}
   26694:	00025701 	.word	0x00025701
   26698:	0003c644 	.word	0x0003c644
   2669c:	0003c030 	.word	0x0003c030
   266a0:	00020329 	.word	0x00020329
   266a4:	0003c294 	.word	0x0003c294
   266a8:	0003c070 	.word	0x0003c070
   266ac:	0003c228 	.word	0x0003c228
   266b0:	20004124 	.word	0x20004124
   266b4:	000002d2 	.word	0x000002d2
   266b8:	0003c25c 	.word	0x0003c25c

000266bc <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   266bc:	b580      	push	{r7, lr}
   266be:	b086      	sub	sp, #24
   266c0:	af00      	add	r7, sp, #0
   266c2:	6078      	str	r0, [r7, #4]
   266c4:	000a      	movs	r2, r1
   266c6:	1cbb      	adds	r3, r7, #2
   266c8:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   266ca:	2313      	movs	r3, #19
   266cc:	18fb      	adds	r3, r7, r3
   266ce:	2201      	movs	r2, #1
   266d0:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   266d2:	230c      	movs	r3, #12
   266d4:	18fb      	adds	r3, r7, r3
   266d6:	2200      	movs	r2, #0
   266d8:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   266da:	2316      	movs	r3, #22
   266dc:	18fb      	adds	r3, r7, r3
   266de:	2200      	movs	r2, #0
   266e0:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   266e2:	1cbb      	adds	r3, r7, #2
   266e4:	881a      	ldrh	r2, [r3, #0]
   266e6:	2380      	movs	r3, #128	; 0x80
   266e8:	019b      	lsls	r3, r3, #6
   266ea:	429a      	cmp	r2, r3
   266ec:	d805      	bhi.n	266fa <spi_data_write+0x3e>
			nbytes = sz;
   266ee:	2314      	movs	r3, #20
   266f0:	18fb      	adds	r3, r7, r3
   266f2:	1cba      	adds	r2, r7, #2
   266f4:	8812      	ldrh	r2, [r2, #0]
   266f6:	801a      	strh	r2, [r3, #0]
   266f8:	e004      	b.n	26704 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   266fa:	2314      	movs	r3, #20
   266fc:	18fb      	adds	r3, r7, r3
   266fe:	2280      	movs	r2, #128	; 0x80
   26700:	0192      	lsls	r2, r2, #6
   26702:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   26704:	2311      	movs	r3, #17
   26706:	18fb      	adds	r3, r7, r3
   26708:	22f0      	movs	r2, #240	; 0xf0
   2670a:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   2670c:	2316      	movs	r3, #22
   2670e:	18fb      	adds	r3, r7, r3
   26710:	2200      	movs	r2, #0
   26712:	5e9b      	ldrsh	r3, [r3, r2]
   26714:	2b00      	cmp	r3, #0
   26716:	d10f      	bne.n	26738 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   26718:	1cbb      	adds	r3, r7, #2
   2671a:	881a      	ldrh	r2, [r3, #0]
   2671c:	2380      	movs	r3, #128	; 0x80
   2671e:	019b      	lsls	r3, r3, #6
   26720:	429a      	cmp	r2, r3
   26722:	d804      	bhi.n	2672e <spi_data_write+0x72>
				order = 0x3;
   26724:	2312      	movs	r3, #18
   26726:	18fb      	adds	r3, r7, r3
   26728:	2203      	movs	r2, #3
   2672a:	701a      	strb	r2, [r3, #0]
   2672c:	e013      	b.n	26756 <spi_data_write+0x9a>
			else
				order = 0x1;
   2672e:	2312      	movs	r3, #18
   26730:	18fb      	adds	r3, r7, r3
   26732:	2201      	movs	r2, #1
   26734:	701a      	strb	r2, [r3, #0]
   26736:	e00e      	b.n	26756 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   26738:	1cbb      	adds	r3, r7, #2
   2673a:	881a      	ldrh	r2, [r3, #0]
   2673c:	2380      	movs	r3, #128	; 0x80
   2673e:	019b      	lsls	r3, r3, #6
   26740:	429a      	cmp	r2, r3
   26742:	d804      	bhi.n	2674e <spi_data_write+0x92>
				order = 0x3;
   26744:	2312      	movs	r3, #18
   26746:	18fb      	adds	r3, r7, r3
   26748:	2203      	movs	r2, #3
   2674a:	701a      	strb	r2, [r3, #0]
   2674c:	e003      	b.n	26756 <spi_data_write+0x9a>
			else
				order = 0x2;
   2674e:	2312      	movs	r3, #18
   26750:	18fb      	adds	r3, r7, r3
   26752:	2202      	movs	r2, #2
   26754:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   26756:	2311      	movs	r3, #17
   26758:	18fb      	adds	r3, r7, r3
   2675a:	781a      	ldrb	r2, [r3, #0]
   2675c:	2312      	movs	r3, #18
   2675e:	18fb      	adds	r3, r7, r3
   26760:	781b      	ldrb	r3, [r3, #0]
   26762:	4313      	orrs	r3, r2
   26764:	b2da      	uxtb	r2, r3
   26766:	2311      	movs	r3, #17
   26768:	18fb      	adds	r3, r7, r3
   2676a:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   2676c:	2311      	movs	r3, #17
   2676e:	18fb      	adds	r3, r7, r3
   26770:	2101      	movs	r1, #1
   26772:	0018      	movs	r0, r3
   26774:	4b3c      	ldr	r3, [pc, #240]	; (26868 <spi_data_write+0x1ac>)
   26776:	4798      	blx	r3
   26778:	1e03      	subs	r3, r0, #0
   2677a:	d012      	beq.n	267a2 <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   2677c:	4a3b      	ldr	r2, [pc, #236]	; (2686c <spi_data_write+0x1b0>)
   2677e:	493c      	ldr	r1, [pc, #240]	; (26870 <spi_data_write+0x1b4>)
   26780:	4b3c      	ldr	r3, [pc, #240]	; (26874 <spi_data_write+0x1b8>)
   26782:	0018      	movs	r0, r3
   26784:	4b3c      	ldr	r3, [pc, #240]	; (26878 <spi_data_write+0x1bc>)
   26786:	4798      	blx	r3
   26788:	4b3c      	ldr	r3, [pc, #240]	; (2687c <spi_data_write+0x1c0>)
   2678a:	0018      	movs	r0, r3
   2678c:	4b3a      	ldr	r3, [pc, #232]	; (26878 <spi_data_write+0x1bc>)
   2678e:	4798      	blx	r3
   26790:	4b3b      	ldr	r3, [pc, #236]	; (26880 <spi_data_write+0x1c4>)
   26792:	0018      	movs	r0, r3
   26794:	4b38      	ldr	r3, [pc, #224]	; (26878 <spi_data_write+0x1bc>)
   26796:	4798      	blx	r3
			result = N_FAIL;
   26798:	2313      	movs	r3, #19
   2679a:	18fb      	adds	r3, r7, r3
   2679c:	2200      	movs	r2, #0
   2679e:	701a      	strb	r2, [r3, #0]
			break;
   267a0:	e059      	b.n	26856 <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   267a2:	2316      	movs	r3, #22
   267a4:	18fb      	adds	r3, r7, r3
   267a6:	2200      	movs	r2, #0
   267a8:	5e9b      	ldrsh	r3, [r3, r2]
   267aa:	687a      	ldr	r2, [r7, #4]
   267ac:	18d2      	adds	r2, r2, r3
   267ae:	2314      	movs	r3, #20
   267b0:	18fb      	adds	r3, r7, r3
   267b2:	881b      	ldrh	r3, [r3, #0]
   267b4:	0019      	movs	r1, r3
   267b6:	0010      	movs	r0, r2
   267b8:	4b2b      	ldr	r3, [pc, #172]	; (26868 <spi_data_write+0x1ac>)
   267ba:	4798      	blx	r3
   267bc:	1e03      	subs	r3, r0, #0
   267be:	d012      	beq.n	267e6 <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   267c0:	4a30      	ldr	r2, [pc, #192]	; (26884 <spi_data_write+0x1c8>)
   267c2:	492b      	ldr	r1, [pc, #172]	; (26870 <spi_data_write+0x1b4>)
   267c4:	4b2b      	ldr	r3, [pc, #172]	; (26874 <spi_data_write+0x1b8>)
   267c6:	0018      	movs	r0, r3
   267c8:	4b2b      	ldr	r3, [pc, #172]	; (26878 <spi_data_write+0x1bc>)
   267ca:	4798      	blx	r3
   267cc:	4b2e      	ldr	r3, [pc, #184]	; (26888 <spi_data_write+0x1cc>)
   267ce:	0018      	movs	r0, r3
   267d0:	4b29      	ldr	r3, [pc, #164]	; (26878 <spi_data_write+0x1bc>)
   267d2:	4798      	blx	r3
   267d4:	4b2a      	ldr	r3, [pc, #168]	; (26880 <spi_data_write+0x1c4>)
   267d6:	0018      	movs	r0, r3
   267d8:	4b27      	ldr	r3, [pc, #156]	; (26878 <spi_data_write+0x1bc>)
   267da:	4798      	blx	r3
			result = N_FAIL;
   267dc:	2313      	movs	r3, #19
   267de:	18fb      	adds	r3, r7, r3
   267e0:	2200      	movs	r2, #0
   267e2:	701a      	strb	r2, [r3, #0]
			break;
   267e4:	e037      	b.n	26856 <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   267e6:	4b29      	ldr	r3, [pc, #164]	; (2688c <spi_data_write+0x1d0>)
   267e8:	781b      	ldrb	r3, [r3, #0]
   267ea:	2b00      	cmp	r3, #0
   267ec:	d11b      	bne.n	26826 <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   267ee:	230c      	movs	r3, #12
   267f0:	18fb      	adds	r3, r7, r3
   267f2:	2102      	movs	r1, #2
   267f4:	0018      	movs	r0, r3
   267f6:	4b1c      	ldr	r3, [pc, #112]	; (26868 <spi_data_write+0x1ac>)
   267f8:	4798      	blx	r3
   267fa:	1e03      	subs	r3, r0, #0
   267fc:	d013      	beq.n	26826 <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   267fe:	23d7      	movs	r3, #215	; 0xd7
   26800:	009a      	lsls	r2, r3, #2
   26802:	491b      	ldr	r1, [pc, #108]	; (26870 <spi_data_write+0x1b4>)
   26804:	4b1b      	ldr	r3, [pc, #108]	; (26874 <spi_data_write+0x1b8>)
   26806:	0018      	movs	r0, r3
   26808:	4b1b      	ldr	r3, [pc, #108]	; (26878 <spi_data_write+0x1bc>)
   2680a:	4798      	blx	r3
   2680c:	4b20      	ldr	r3, [pc, #128]	; (26890 <spi_data_write+0x1d4>)
   2680e:	0018      	movs	r0, r3
   26810:	4b19      	ldr	r3, [pc, #100]	; (26878 <spi_data_write+0x1bc>)
   26812:	4798      	blx	r3
   26814:	4b1a      	ldr	r3, [pc, #104]	; (26880 <spi_data_write+0x1c4>)
   26816:	0018      	movs	r0, r3
   26818:	4b17      	ldr	r3, [pc, #92]	; (26878 <spi_data_write+0x1bc>)
   2681a:	4798      	blx	r3
				result = N_FAIL;
   2681c:	2313      	movs	r3, #19
   2681e:	18fb      	adds	r3, r7, r3
   26820:	2200      	movs	r2, #0
   26822:	701a      	strb	r2, [r3, #0]
				break;
   26824:	e017      	b.n	26856 <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   26826:	2316      	movs	r3, #22
   26828:	18fb      	adds	r3, r7, r3
   2682a:	881a      	ldrh	r2, [r3, #0]
   2682c:	2314      	movs	r3, #20
   2682e:	18fb      	adds	r3, r7, r3
   26830:	881b      	ldrh	r3, [r3, #0]
   26832:	18d3      	adds	r3, r2, r3
   26834:	b29a      	uxth	r2, r3
   26836:	2316      	movs	r3, #22
   26838:	18fb      	adds	r3, r7, r3
   2683a:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   2683c:	1cbb      	adds	r3, r7, #2
   2683e:	1cb9      	adds	r1, r7, #2
   26840:	2214      	movs	r2, #20
   26842:	18ba      	adds	r2, r7, r2
   26844:	8809      	ldrh	r1, [r1, #0]
   26846:	8812      	ldrh	r2, [r2, #0]
   26848:	1a8a      	subs	r2, r1, r2
   2684a:	801a      	strh	r2, [r3, #0]
	} while (sz);
   2684c:	1cbb      	adds	r3, r7, #2
   2684e:	881b      	ldrh	r3, [r3, #0]
   26850:	2b00      	cmp	r3, #0
   26852:	d000      	beq.n	26856 <spi_data_write+0x19a>
   26854:	e745      	b.n	266e2 <spi_data_write+0x26>


	return result;
   26856:	2313      	movs	r3, #19
   26858:	18fb      	adds	r3, r7, r3
   2685a:	781b      	ldrb	r3, [r3, #0]
   2685c:	b25b      	sxtb	r3, r3
}
   2685e:	0018      	movs	r0, r3
   26860:	46bd      	mov	sp, r7
   26862:	b006      	add	sp, #24
   26864:	bd80      	pop	{r7, pc}
   26866:	46c0      	nop			; (mov r8, r8)
   26868:	00025745 	.word	0x00025745
   2686c:	00000349 	.word	0x00000349
   26870:	0003c658 	.word	0x0003c658
   26874:	0003c030 	.word	0x0003c030
   26878:	00020329 	.word	0x00020329
   2687c:	0003c2f8 	.word	0x0003c2f8
   26880:	0003c070 	.word	0x0003c070
   26884:	00000352 	.word	0x00000352
   26888:	0003c330 	.word	0x0003c330
   2688c:	20004124 	.word	0x20004124
   26890:	0003c364 	.word	0x0003c364

00026894 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   26894:	b590      	push	{r4, r7, lr}
   26896:	b087      	sub	sp, #28
   26898:	af02      	add	r7, sp, #8
   2689a:	6078      	str	r0, [r7, #4]
   2689c:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   2689e:	230f      	movs	r3, #15
   268a0:	18fb      	adds	r3, r7, r3
   268a2:	220a      	movs	r2, #10
   268a4:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   268a6:	230c      	movs	r3, #12
   268a8:	18fb      	adds	r3, r7, r3
   268aa:	2201      	movs	r2, #1
   268ac:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   268ae:	230e      	movs	r3, #14
   268b0:	18fb      	adds	r3, r7, r3
   268b2:	22c9      	movs	r2, #201	; 0xc9
   268b4:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   268b6:	230d      	movs	r3, #13
   268b8:	18fb      	adds	r3, r7, r3
   268ba:	2200      	movs	r2, #0
   268bc:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   268be:	687b      	ldr	r3, [r7, #4]
   268c0:	2b30      	cmp	r3, #48	; 0x30
   268c2:	d808      	bhi.n	268d6 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   268c4:	230e      	movs	r3, #14
   268c6:	18fb      	adds	r3, r7, r3
   268c8:	22c3      	movs	r2, #195	; 0xc3
   268ca:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   268cc:	230d      	movs	r3, #13
   268ce:	18fb      	adds	r3, r7, r3
   268d0:	2201      	movs	r2, #1
   268d2:	701a      	strb	r2, [r3, #0]
   268d4:	e007      	b.n	268e6 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   268d6:	230e      	movs	r3, #14
   268d8:	18fb      	adds	r3, r7, r3
   268da:	22c9      	movs	r2, #201	; 0xc9
   268dc:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   268de:	230d      	movs	r3, #13
   268e0:	18fb      	adds	r3, r7, r3
   268e2:	2200      	movs	r2, #0
   268e4:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   268e6:	003a      	movs	r2, r7
   268e8:	6879      	ldr	r1, [r7, #4]
   268ea:	230e      	movs	r3, #14
   268ec:	18fb      	adds	r3, r7, r3
   268ee:	7818      	ldrb	r0, [r3, #0]
   268f0:	230d      	movs	r3, #13
   268f2:	18fb      	adds	r3, r7, r3
   268f4:	781b      	ldrb	r3, [r3, #0]
   268f6:	9300      	str	r3, [sp, #0]
   268f8:	2304      	movs	r3, #4
   268fa:	4c2e      	ldr	r4, [pc, #184]	; (269b4 <spi_write_reg+0x120>)
   268fc:	47a0      	blx	r4
   268fe:	0002      	movs	r2, r0
   26900:	230c      	movs	r3, #12
   26902:	18fb      	adds	r3, r7, r3
   26904:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   26906:	230c      	movs	r3, #12
   26908:	18fb      	adds	r3, r7, r3
   2690a:	781b      	ldrb	r3, [r3, #0]
   2690c:	b25b      	sxtb	r3, r3
   2690e:	2b01      	cmp	r3, #1
   26910:	d010      	beq.n	26934 <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   26912:	4a29      	ldr	r2, [pc, #164]	; (269b8 <spi_write_reg+0x124>)
   26914:	4929      	ldr	r1, [pc, #164]	; (269bc <spi_write_reg+0x128>)
   26916:	4b2a      	ldr	r3, [pc, #168]	; (269c0 <spi_write_reg+0x12c>)
   26918:	0018      	movs	r0, r3
   2691a:	4b2a      	ldr	r3, [pc, #168]	; (269c4 <spi_write_reg+0x130>)
   2691c:	4798      	blx	r3
   2691e:	687a      	ldr	r2, [r7, #4]
   26920:	4b29      	ldr	r3, [pc, #164]	; (269c8 <spi_write_reg+0x134>)
   26922:	0011      	movs	r1, r2
   26924:	0018      	movs	r0, r3
   26926:	4b27      	ldr	r3, [pc, #156]	; (269c4 <spi_write_reg+0x130>)
   26928:	4798      	blx	r3
   2692a:	4b28      	ldr	r3, [pc, #160]	; (269cc <spi_write_reg+0x138>)
   2692c:	0018      	movs	r0, r3
   2692e:	4b25      	ldr	r3, [pc, #148]	; (269c4 <spi_write_reg+0x130>)
   26930:	4798      	blx	r3
		goto _FAIL_;
   26932:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   26934:	230c      	movs	r3, #12
   26936:	18fb      	adds	r3, r7, r3
   26938:	781b      	ldrb	r3, [r3, #0]
   2693a:	b25b      	sxtb	r3, r3
   2693c:	2b01      	cmp	r3, #1
   2693e:	d030      	beq.n	269a2 <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   26940:	2001      	movs	r0, #1
   26942:	4b23      	ldr	r3, [pc, #140]	; (269d0 <spi_write_reg+0x13c>)
   26944:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   26946:	2300      	movs	r3, #0
   26948:	9300      	str	r3, [sp, #0]
   2694a:	2300      	movs	r3, #0
   2694c:	2200      	movs	r2, #0
   2694e:	2100      	movs	r1, #0
   26950:	20cf      	movs	r0, #207	; 0xcf
   26952:	4c20      	ldr	r4, [pc, #128]	; (269d4 <spi_write_reg+0x140>)
   26954:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   26956:	20cf      	movs	r0, #207	; 0xcf
   26958:	4b1f      	ldr	r3, [pc, #124]	; (269d8 <spi_write_reg+0x144>)
   2695a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   2695c:	23ea      	movs	r3, #234	; 0xea
   2695e:	009a      	lsls	r2, r3, #2
   26960:	4916      	ldr	r1, [pc, #88]	; (269bc <spi_write_reg+0x128>)
   26962:	4b17      	ldr	r3, [pc, #92]	; (269c0 <spi_write_reg+0x12c>)
   26964:	0018      	movs	r0, r3
   26966:	4b17      	ldr	r3, [pc, #92]	; (269c4 <spi_write_reg+0x130>)
   26968:	4798      	blx	r3
   2696a:	230f      	movs	r3, #15
   2696c:	18fb      	adds	r3, r7, r3
   2696e:	7819      	ldrb	r1, [r3, #0]
   26970:	683b      	ldr	r3, [r7, #0]
   26972:	687a      	ldr	r2, [r7, #4]
   26974:	4819      	ldr	r0, [pc, #100]	; (269dc <spi_write_reg+0x148>)
   26976:	4c13      	ldr	r4, [pc, #76]	; (269c4 <spi_write_reg+0x130>)
   26978:	47a0      	blx	r4
   2697a:	4b14      	ldr	r3, [pc, #80]	; (269cc <spi_write_reg+0x138>)
   2697c:	0018      	movs	r0, r3
   2697e:	4b11      	ldr	r3, [pc, #68]	; (269c4 <spi_write_reg+0x130>)
   26980:	4798      	blx	r3
		nm_bsp_sleep(1);
   26982:	2001      	movs	r0, #1
   26984:	4b12      	ldr	r3, [pc, #72]	; (269d0 <spi_write_reg+0x13c>)
   26986:	4798      	blx	r3
		retry--;
   26988:	230f      	movs	r3, #15
   2698a:	18fb      	adds	r3, r7, r3
   2698c:	781a      	ldrb	r2, [r3, #0]
   2698e:	230f      	movs	r3, #15
   26990:	18fb      	adds	r3, r7, r3
   26992:	3a01      	subs	r2, #1
   26994:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   26996:	230f      	movs	r3, #15
   26998:	18fb      	adds	r3, r7, r3
   2699a:	781b      	ldrb	r3, [r3, #0]
   2699c:	2b00      	cmp	r3, #0
   2699e:	d000      	beq.n	269a2 <spi_write_reg+0x10e>
   269a0:	e78d      	b.n	268be <spi_write_reg+0x2a>
	}

	return result;
   269a2:	230c      	movs	r3, #12
   269a4:	18fb      	adds	r3, r7, r3
   269a6:	781b      	ldrb	r3, [r3, #0]
   269a8:	b25b      	sxtb	r3, r3
}
   269aa:	0018      	movs	r0, r3
   269ac:	46bd      	mov	sp, r7
   269ae:	b005      	add	sp, #20
   269b0:	bd90      	pop	{r4, r7, pc}
   269b2:	46c0      	nop			; (mov r8, r8)
   269b4:	00025dc9 	.word	0x00025dc9
   269b8:	0000039d 	.word	0x0000039d
   269bc:	0003c668 	.word	0x0003c668
   269c0:	0003c030 	.word	0x0003c030
   269c4:	00020329 	.word	0x00020329
   269c8:	0003c39c 	.word	0x0003c39c
   269cc:	0003c070 	.word	0x0003c070
   269d0:	00022799 	.word	0x00022799
   269d4:	0002584d 	.word	0x0002584d
   269d8:	00025c8d 	.word	0x00025c8d
   269dc:	0003c3c8 	.word	0x0003c3c8

000269e0 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   269e0:	b590      	push	{r4, r7, lr}
   269e2:	b089      	sub	sp, #36	; 0x24
   269e4:	af02      	add	r7, sp, #8
   269e6:	60f8      	str	r0, [r7, #12]
   269e8:	60b9      	str	r1, [r7, #8]
   269ea:	1dbb      	adds	r3, r7, #6
   269ec:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   269ee:	2316      	movs	r3, #22
   269f0:	18fb      	adds	r3, r7, r3
   269f2:	220a      	movs	r2, #10
   269f4:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   269f6:	2315      	movs	r3, #21
   269f8:	18fb      	adds	r3, r7, r3
   269fa:	22c7      	movs	r2, #199	; 0xc7
   269fc:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   269fe:	1dbb      	adds	r3, r7, #6
   26a00:	881a      	ldrh	r2, [r3, #0]
   26a02:	68f9      	ldr	r1, [r7, #12]
   26a04:	2315      	movs	r3, #21
   26a06:	18fb      	adds	r3, r7, r3
   26a08:	7818      	ldrb	r0, [r3, #0]
   26a0a:	2300      	movs	r3, #0
   26a0c:	9300      	str	r3, [sp, #0]
   26a0e:	0013      	movs	r3, r2
   26a10:	2200      	movs	r2, #0
   26a12:	4c4d      	ldr	r4, [pc, #308]	; (26b48 <nm_spi_write+0x168>)
   26a14:	47a0      	blx	r4
   26a16:	0002      	movs	r2, r0
   26a18:	2317      	movs	r3, #23
   26a1a:	18fb      	adds	r3, r7, r3
   26a1c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   26a1e:	2317      	movs	r3, #23
   26a20:	18fb      	adds	r3, r7, r3
   26a22:	781b      	ldrb	r3, [r3, #0]
   26a24:	b25b      	sxtb	r3, r3
   26a26:	2b01      	cmp	r3, #1
   26a28:	d010      	beq.n	26a4c <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   26a2a:	4a48      	ldr	r2, [pc, #288]	; (26b4c <nm_spi_write+0x16c>)
   26a2c:	4948      	ldr	r1, [pc, #288]	; (26b50 <nm_spi_write+0x170>)
   26a2e:	4b49      	ldr	r3, [pc, #292]	; (26b54 <nm_spi_write+0x174>)
   26a30:	0018      	movs	r0, r3
   26a32:	4b49      	ldr	r3, [pc, #292]	; (26b58 <nm_spi_write+0x178>)
   26a34:	4798      	blx	r3
   26a36:	68fa      	ldr	r2, [r7, #12]
   26a38:	4b48      	ldr	r3, [pc, #288]	; (26b5c <nm_spi_write+0x17c>)
   26a3a:	0011      	movs	r1, r2
   26a3c:	0018      	movs	r0, r3
   26a3e:	4b46      	ldr	r3, [pc, #280]	; (26b58 <nm_spi_write+0x178>)
   26a40:	4798      	blx	r3
   26a42:	4b47      	ldr	r3, [pc, #284]	; (26b60 <nm_spi_write+0x180>)
   26a44:	0018      	movs	r0, r3
   26a46:	4b44      	ldr	r3, [pc, #272]	; (26b58 <nm_spi_write+0x178>)
   26a48:	4798      	blx	r3
		goto _FAIL_;
   26a4a:	e03e      	b.n	26aca <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   26a4c:	2317      	movs	r3, #23
   26a4e:	18fc      	adds	r4, r7, r3
   26a50:	1dbb      	adds	r3, r7, #6
   26a52:	881a      	ldrh	r2, [r3, #0]
   26a54:	68bb      	ldr	r3, [r7, #8]
   26a56:	0011      	movs	r1, r2
   26a58:	0018      	movs	r0, r3
   26a5a:	4b42      	ldr	r3, [pc, #264]	; (26b64 <nm_spi_write+0x184>)
   26a5c:	4798      	blx	r3
   26a5e:	0003      	movs	r3, r0
   26a60:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   26a62:	2317      	movs	r3, #23
   26a64:	18fb      	adds	r3, r7, r3
   26a66:	781b      	ldrb	r3, [r3, #0]
   26a68:	b25b      	sxtb	r3, r3
   26a6a:	2b01      	cmp	r3, #1
   26a6c:	d00e      	beq.n	26a8c <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   26a6e:	4a3e      	ldr	r2, [pc, #248]	; (26b68 <nm_spi_write+0x188>)
   26a70:	4937      	ldr	r1, [pc, #220]	; (26b50 <nm_spi_write+0x170>)
   26a72:	4b38      	ldr	r3, [pc, #224]	; (26b54 <nm_spi_write+0x174>)
   26a74:	0018      	movs	r0, r3
   26a76:	4b38      	ldr	r3, [pc, #224]	; (26b58 <nm_spi_write+0x178>)
   26a78:	4798      	blx	r3
   26a7a:	4b3c      	ldr	r3, [pc, #240]	; (26b6c <nm_spi_write+0x18c>)
   26a7c:	0018      	movs	r0, r3
   26a7e:	4b36      	ldr	r3, [pc, #216]	; (26b58 <nm_spi_write+0x178>)
   26a80:	4798      	blx	r3
   26a82:	4b37      	ldr	r3, [pc, #220]	; (26b60 <nm_spi_write+0x180>)
   26a84:	0018      	movs	r0, r3
   26a86:	4b34      	ldr	r3, [pc, #208]	; (26b58 <nm_spi_write+0x178>)
   26a88:	4798      	blx	r3
		goto _FAIL_;
   26a8a:	e01e      	b.n	26aca <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   26a8c:	2317      	movs	r3, #23
   26a8e:	18fc      	adds	r4, r7, r3
   26a90:	2315      	movs	r3, #21
   26a92:	18fb      	adds	r3, r7, r3
   26a94:	781b      	ldrb	r3, [r3, #0]
   26a96:	0018      	movs	r0, r3
   26a98:	4b35      	ldr	r3, [pc, #212]	; (26b70 <nm_spi_write+0x190>)
   26a9a:	4798      	blx	r3
   26a9c:	0003      	movs	r3, r0
   26a9e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   26aa0:	2317      	movs	r3, #23
   26aa2:	18fb      	adds	r3, r7, r3
   26aa4:	781b      	ldrb	r3, [r3, #0]
   26aa6:	b25b      	sxtb	r3, r3
   26aa8:	2b01      	cmp	r3, #1
   26aaa:	d00e      	beq.n	26aca <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   26aac:	4a31      	ldr	r2, [pc, #196]	; (26b74 <nm_spi_write+0x194>)
   26aae:	4928      	ldr	r1, [pc, #160]	; (26b50 <nm_spi_write+0x170>)
   26ab0:	4b28      	ldr	r3, [pc, #160]	; (26b54 <nm_spi_write+0x174>)
   26ab2:	0018      	movs	r0, r3
   26ab4:	4b28      	ldr	r3, [pc, #160]	; (26b58 <nm_spi_write+0x178>)
   26ab6:	4798      	blx	r3
   26ab8:	4b2c      	ldr	r3, [pc, #176]	; (26b6c <nm_spi_write+0x18c>)
   26aba:	0018      	movs	r0, r3
   26abc:	4b26      	ldr	r3, [pc, #152]	; (26b58 <nm_spi_write+0x178>)
   26abe:	4798      	blx	r3
   26ac0:	4b27      	ldr	r3, [pc, #156]	; (26b60 <nm_spi_write+0x180>)
   26ac2:	0018      	movs	r0, r3
   26ac4:	4b24      	ldr	r3, [pc, #144]	; (26b58 <nm_spi_write+0x178>)
   26ac6:	4798      	blx	r3
		goto _FAIL_;
   26ac8:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   26aca:	2317      	movs	r3, #23
   26acc:	18fb      	adds	r3, r7, r3
   26ace:	781b      	ldrb	r3, [r3, #0]
   26ad0:	b25b      	sxtb	r3, r3
   26ad2:	2b01      	cmp	r3, #1
   26ad4:	d030      	beq.n	26b38 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   26ad6:	2001      	movs	r0, #1
   26ad8:	4b27      	ldr	r3, [pc, #156]	; (26b78 <nm_spi_write+0x198>)
   26ada:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   26adc:	2300      	movs	r3, #0
   26ade:	9300      	str	r3, [sp, #0]
   26ae0:	2300      	movs	r3, #0
   26ae2:	2200      	movs	r2, #0
   26ae4:	2100      	movs	r1, #0
   26ae6:	20cf      	movs	r0, #207	; 0xcf
   26ae8:	4c24      	ldr	r4, [pc, #144]	; (26b7c <nm_spi_write+0x19c>)
   26aea:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   26aec:	20cf      	movs	r0, #207	; 0xcf
   26aee:	4b24      	ldr	r3, [pc, #144]	; (26b80 <nm_spi_write+0x1a0>)
   26af0:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   26af2:	4a24      	ldr	r2, [pc, #144]	; (26b84 <nm_spi_write+0x1a4>)
   26af4:	4916      	ldr	r1, [pc, #88]	; (26b50 <nm_spi_write+0x170>)
   26af6:	4b17      	ldr	r3, [pc, #92]	; (26b54 <nm_spi_write+0x174>)
   26af8:	0018      	movs	r0, r3
   26afa:	4b17      	ldr	r3, [pc, #92]	; (26b58 <nm_spi_write+0x178>)
   26afc:	4798      	blx	r3
   26afe:	2316      	movs	r3, #22
   26b00:	18fb      	adds	r3, r7, r3
   26b02:	7819      	ldrb	r1, [r3, #0]
   26b04:	1dbb      	adds	r3, r7, #6
   26b06:	881b      	ldrh	r3, [r3, #0]
   26b08:	68fa      	ldr	r2, [r7, #12]
   26b0a:	481f      	ldr	r0, [pc, #124]	; (26b88 <nm_spi_write+0x1a8>)
   26b0c:	4c12      	ldr	r4, [pc, #72]	; (26b58 <nm_spi_write+0x178>)
   26b0e:	47a0      	blx	r4
   26b10:	4b13      	ldr	r3, [pc, #76]	; (26b60 <nm_spi_write+0x180>)
   26b12:	0018      	movs	r0, r3
   26b14:	4b10      	ldr	r3, [pc, #64]	; (26b58 <nm_spi_write+0x178>)
   26b16:	4798      	blx	r3
		nm_bsp_sleep(1);
   26b18:	2001      	movs	r0, #1
   26b1a:	4b17      	ldr	r3, [pc, #92]	; (26b78 <nm_spi_write+0x198>)
   26b1c:	4798      	blx	r3
		retry--;
   26b1e:	2316      	movs	r3, #22
   26b20:	18fb      	adds	r3, r7, r3
   26b22:	781a      	ldrb	r2, [r3, #0]
   26b24:	2316      	movs	r3, #22
   26b26:	18fb      	adds	r3, r7, r3
   26b28:	3a01      	subs	r2, #1
   26b2a:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   26b2c:	2316      	movs	r3, #22
   26b2e:	18fb      	adds	r3, r7, r3
   26b30:	781b      	ldrb	r3, [r3, #0]
   26b32:	2b00      	cmp	r3, #0
   26b34:	d000      	beq.n	26b38 <nm_spi_write+0x158>
   26b36:	e762      	b.n	269fe <nm_spi_write+0x1e>
	}


	return result;
   26b38:	2317      	movs	r3, #23
   26b3a:	18fb      	adds	r3, r7, r3
   26b3c:	781b      	ldrb	r3, [r3, #0]
   26b3e:	b25b      	sxtb	r3, r3
}
   26b40:	0018      	movs	r0, r3
   26b42:	46bd      	mov	sp, r7
   26b44:	b007      	add	sp, #28
   26b46:	bd90      	pop	{r4, r7, pc}
   26b48:	00025dc9 	.word	0x00025dc9
   26b4c:	000003cf 	.word	0x000003cf
   26b50:	0003c678 	.word	0x0003c678
   26b54:	0003c030 	.word	0x0003c030
   26b58:	00020329 	.word	0x00020329
   26b5c:	0003c3e4 	.word	0x0003c3e4
   26b60:	0003c070 	.word	0x0003c070
   26b64:	000266bd 	.word	0x000266bd
   26b68:	000003d9 	.word	0x000003d9
   26b6c:	0003c414 	.word	0x0003c414
   26b70:	00025b8d 	.word	0x00025b8d
   26b74:	000003e1 	.word	0x000003e1
   26b78:	00022799 	.word	0x00022799
   26b7c:	0002584d 	.word	0x0002584d
   26b80:	00025c8d 	.word	0x00025c8d
   26b84:	000003eb 	.word	0x000003eb
   26b88:	0003c43c 	.word	0x0003c43c

00026b8c <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   26b8c:	b590      	push	{r4, r7, lr}
   26b8e:	b087      	sub	sp, #28
   26b90:	af02      	add	r7, sp, #8
   26b92:	6078      	str	r0, [r7, #4]
   26b94:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   26b96:	230f      	movs	r3, #15
   26b98:	18fb      	adds	r3, r7, r3
   26b9a:	220a      	movs	r2, #10
   26b9c:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   26b9e:	230c      	movs	r3, #12
   26ba0:	18fb      	adds	r3, r7, r3
   26ba2:	2201      	movs	r2, #1
   26ba4:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   26ba6:	230e      	movs	r3, #14
   26ba8:	18fb      	adds	r3, r7, r3
   26baa:	22ca      	movs	r2, #202	; 0xca
   26bac:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   26bae:	230d      	movs	r3, #13
   26bb0:	18fb      	adds	r3, r7, r3
   26bb2:	2200      	movs	r2, #0
   26bb4:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   26bb6:	687b      	ldr	r3, [r7, #4]
   26bb8:	2bff      	cmp	r3, #255	; 0xff
   26bba:	d808      	bhi.n	26bce <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   26bbc:	230e      	movs	r3, #14
   26bbe:	18fb      	adds	r3, r7, r3
   26bc0:	22c4      	movs	r2, #196	; 0xc4
   26bc2:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   26bc4:	230d      	movs	r3, #13
   26bc6:	18fb      	adds	r3, r7, r3
   26bc8:	2201      	movs	r2, #1
   26bca:	701a      	strb	r2, [r3, #0]
   26bcc:	e007      	b.n	26bde <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   26bce:	230e      	movs	r3, #14
   26bd0:	18fb      	adds	r3, r7, r3
   26bd2:	22ca      	movs	r2, #202	; 0xca
   26bd4:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   26bd6:	230d      	movs	r3, #13
   26bd8:	18fb      	adds	r3, r7, r3
   26bda:	2200      	movs	r2, #0
   26bdc:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   26bde:	2308      	movs	r3, #8
   26be0:	18fa      	adds	r2, r7, r3
   26be2:	6879      	ldr	r1, [r7, #4]
   26be4:	230e      	movs	r3, #14
   26be6:	18fb      	adds	r3, r7, r3
   26be8:	7818      	ldrb	r0, [r3, #0]
   26bea:	230d      	movs	r3, #13
   26bec:	18fb      	adds	r3, r7, r3
   26bee:	781b      	ldrb	r3, [r3, #0]
   26bf0:	9300      	str	r3, [sp, #0]
   26bf2:	2304      	movs	r3, #4
   26bf4:	4c37      	ldr	r4, [pc, #220]	; (26cd4 <spi_read_reg+0x148>)
   26bf6:	47a0      	blx	r4
   26bf8:	0002      	movs	r2, r0
   26bfa:	230c      	movs	r3, #12
   26bfc:	18fb      	adds	r3, r7, r3
   26bfe:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   26c00:	230c      	movs	r3, #12
   26c02:	18fb      	adds	r3, r7, r3
   26c04:	781b      	ldrb	r3, [r3, #0]
   26c06:	b25b      	sxtb	r3, r3
   26c08:	2b01      	cmp	r3, #1
   26c0a:	d010      	beq.n	26c2e <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   26c0c:	4a32      	ldr	r2, [pc, #200]	; (26cd8 <spi_read_reg+0x14c>)
   26c0e:	4933      	ldr	r1, [pc, #204]	; (26cdc <spi_read_reg+0x150>)
   26c10:	4b33      	ldr	r3, [pc, #204]	; (26ce0 <spi_read_reg+0x154>)
   26c12:	0018      	movs	r0, r3
   26c14:	4b33      	ldr	r3, [pc, #204]	; (26ce4 <spi_read_reg+0x158>)
   26c16:	4798      	blx	r3
   26c18:	687a      	ldr	r2, [r7, #4]
   26c1a:	4b33      	ldr	r3, [pc, #204]	; (26ce8 <spi_read_reg+0x15c>)
   26c1c:	0011      	movs	r1, r2
   26c1e:	0018      	movs	r0, r3
   26c20:	4b30      	ldr	r3, [pc, #192]	; (26ce4 <spi_read_reg+0x158>)
   26c22:	4798      	blx	r3
   26c24:	4b31      	ldr	r3, [pc, #196]	; (26cec <spi_read_reg+0x160>)
   26c26:	0018      	movs	r0, r3
   26c28:	4b2e      	ldr	r3, [pc, #184]	; (26ce4 <spi_read_reg+0x158>)
   26c2a:	4798      	blx	r3
		goto _FAIL_;
   26c2c:	e014      	b.n	26c58 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   26c2e:	2308      	movs	r3, #8
   26c30:	18fb      	adds	r3, r7, r3
   26c32:	781b      	ldrb	r3, [r3, #0]
   26c34:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   26c36:	2308      	movs	r3, #8
   26c38:	18fb      	adds	r3, r7, r3
   26c3a:	785b      	ldrb	r3, [r3, #1]
   26c3c:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   26c3e:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   26c40:	2308      	movs	r3, #8
   26c42:	18fb      	adds	r3, r7, r3
   26c44:	789b      	ldrb	r3, [r3, #2]
   26c46:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   26c48:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   26c4a:	2308      	movs	r3, #8
   26c4c:	18fb      	adds	r3, r7, r3
   26c4e:	78db      	ldrb	r3, [r3, #3]
   26c50:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   26c52:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   26c54:	683b      	ldr	r3, [r7, #0]
   26c56:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   26c58:	230c      	movs	r3, #12
   26c5a:	18fb      	adds	r3, r7, r3
   26c5c:	781b      	ldrb	r3, [r3, #0]
   26c5e:	b25b      	sxtb	r3, r3
   26c60:	2b01      	cmp	r3, #1
   26c62:	d02f      	beq.n	26cc4 <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   26c64:	2001      	movs	r0, #1
   26c66:	4b22      	ldr	r3, [pc, #136]	; (26cf0 <spi_read_reg+0x164>)
   26c68:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   26c6a:	2300      	movs	r3, #0
   26c6c:	9300      	str	r3, [sp, #0]
   26c6e:	2300      	movs	r3, #0
   26c70:	2200      	movs	r2, #0
   26c72:	2100      	movs	r1, #0
   26c74:	20cf      	movs	r0, #207	; 0xcf
   26c76:	4c1f      	ldr	r4, [pc, #124]	; (26cf4 <spi_read_reg+0x168>)
   26c78:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   26c7a:	20cf      	movs	r0, #207	; 0xcf
   26c7c:	4b1e      	ldr	r3, [pc, #120]	; (26cf8 <spi_read_reg+0x16c>)
   26c7e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   26c80:	4a1e      	ldr	r2, [pc, #120]	; (26cfc <spi_read_reg+0x170>)
   26c82:	4916      	ldr	r1, [pc, #88]	; (26cdc <spi_read_reg+0x150>)
   26c84:	4b16      	ldr	r3, [pc, #88]	; (26ce0 <spi_read_reg+0x154>)
   26c86:	0018      	movs	r0, r3
   26c88:	4b16      	ldr	r3, [pc, #88]	; (26ce4 <spi_read_reg+0x158>)
   26c8a:	4798      	blx	r3
   26c8c:	230f      	movs	r3, #15
   26c8e:	18fb      	adds	r3, r7, r3
   26c90:	7819      	ldrb	r1, [r3, #0]
   26c92:	687a      	ldr	r2, [r7, #4]
   26c94:	4b1a      	ldr	r3, [pc, #104]	; (26d00 <spi_read_reg+0x174>)
   26c96:	0018      	movs	r0, r3
   26c98:	4b12      	ldr	r3, [pc, #72]	; (26ce4 <spi_read_reg+0x158>)
   26c9a:	4798      	blx	r3
   26c9c:	4b13      	ldr	r3, [pc, #76]	; (26cec <spi_read_reg+0x160>)
   26c9e:	0018      	movs	r0, r3
   26ca0:	4b10      	ldr	r3, [pc, #64]	; (26ce4 <spi_read_reg+0x158>)
   26ca2:	4798      	blx	r3
		nm_bsp_sleep(1);
   26ca4:	2001      	movs	r0, #1
   26ca6:	4b12      	ldr	r3, [pc, #72]	; (26cf0 <spi_read_reg+0x164>)
   26ca8:	4798      	blx	r3
		retry--;
   26caa:	230f      	movs	r3, #15
   26cac:	18fb      	adds	r3, r7, r3
   26cae:	781a      	ldrb	r2, [r3, #0]
   26cb0:	230f      	movs	r3, #15
   26cb2:	18fb      	adds	r3, r7, r3
   26cb4:	3a01      	subs	r2, #1
   26cb6:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   26cb8:	230f      	movs	r3, #15
   26cba:	18fb      	adds	r3, r7, r3
   26cbc:	781b      	ldrb	r3, [r3, #0]
   26cbe:	2b00      	cmp	r3, #0
   26cc0:	d000      	beq.n	26cc4 <spi_read_reg+0x138>
   26cc2:	e778      	b.n	26bb6 <spi_read_reg+0x2a>
	}
		
	return result;
   26cc4:	230c      	movs	r3, #12
   26cc6:	18fb      	adds	r3, r7, r3
   26cc8:	781b      	ldrb	r3, [r3, #0]
   26cca:	b25b      	sxtb	r3, r3
}
   26ccc:	0018      	movs	r0, r3
   26cce:	46bd      	mov	sp, r7
   26cd0:	b005      	add	sp, #20
   26cd2:	bd90      	pop	{r4, r7, pc}
   26cd4:	00025dc9 	.word	0x00025dc9
   26cd8:	00000423 	.word	0x00000423
   26cdc:	0003c688 	.word	0x0003c688
   26ce0:	0003c030 	.word	0x0003c030
   26ce4:	00020329 	.word	0x00020329
   26ce8:	0003c458 	.word	0x0003c458
   26cec:	0003c070 	.word	0x0003c070
   26cf0:	00022799 	.word	0x00022799
   26cf4:	0002584d 	.word	0x0002584d
   26cf8:	00025c8d 	.word	0x00025c8d
   26cfc:	00000435 	.word	0x00000435
   26d00:	0003c484 	.word	0x0003c484

00026d04 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   26d04:	b590      	push	{r4, r7, lr}
   26d06:	b089      	sub	sp, #36	; 0x24
   26d08:	af02      	add	r7, sp, #8
   26d0a:	60f8      	str	r0, [r7, #12]
   26d0c:	60b9      	str	r1, [r7, #8]
   26d0e:	1dbb      	adds	r3, r7, #6
   26d10:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   26d12:	2316      	movs	r3, #22
   26d14:	18fb      	adds	r3, r7, r3
   26d16:	22c8      	movs	r2, #200	; 0xc8
   26d18:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   26d1a:	2317      	movs	r3, #23
   26d1c:	18fb      	adds	r3, r7, r3
   26d1e:	220a      	movs	r2, #10
   26d20:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   26d22:	1dbb      	adds	r3, r7, #6
   26d24:	881c      	ldrh	r4, [r3, #0]
   26d26:	68ba      	ldr	r2, [r7, #8]
   26d28:	68f9      	ldr	r1, [r7, #12]
   26d2a:	2316      	movs	r3, #22
   26d2c:	18fb      	adds	r3, r7, r3
   26d2e:	7818      	ldrb	r0, [r3, #0]
   26d30:	2300      	movs	r3, #0
   26d32:	9300      	str	r3, [sp, #0]
   26d34:	0023      	movs	r3, r4
   26d36:	4c2e      	ldr	r4, [pc, #184]	; (26df0 <nm_spi_read+0xec>)
   26d38:	47a0      	blx	r4
   26d3a:	0002      	movs	r2, r0
   26d3c:	2315      	movs	r3, #21
   26d3e:	18fb      	adds	r3, r7, r3
   26d40:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   26d42:	2315      	movs	r3, #21
   26d44:	18fb      	adds	r3, r7, r3
   26d46:	781b      	ldrb	r3, [r3, #0]
   26d48:	b25b      	sxtb	r3, r3
   26d4a:	2b01      	cmp	r3, #1
   26d4c:	d010      	beq.n	26d70 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   26d4e:	4a29      	ldr	r2, [pc, #164]	; (26df4 <nm_spi_read+0xf0>)
   26d50:	4929      	ldr	r1, [pc, #164]	; (26df8 <nm_spi_read+0xf4>)
   26d52:	4b2a      	ldr	r3, [pc, #168]	; (26dfc <nm_spi_read+0xf8>)
   26d54:	0018      	movs	r0, r3
   26d56:	4b2a      	ldr	r3, [pc, #168]	; (26e00 <nm_spi_read+0xfc>)
   26d58:	4798      	blx	r3
   26d5a:	68fa      	ldr	r2, [r7, #12]
   26d5c:	4b29      	ldr	r3, [pc, #164]	; (26e04 <nm_spi_read+0x100>)
   26d5e:	0011      	movs	r1, r2
   26d60:	0018      	movs	r0, r3
   26d62:	4b27      	ldr	r3, [pc, #156]	; (26e00 <nm_spi_read+0xfc>)
   26d64:	4798      	blx	r3
   26d66:	4b28      	ldr	r3, [pc, #160]	; (26e08 <nm_spi_read+0x104>)
   26d68:	0018      	movs	r0, r3
   26d6a:	4b25      	ldr	r3, [pc, #148]	; (26e00 <nm_spi_read+0xfc>)
   26d6c:	4798      	blx	r3
		goto _FAIL_;
   26d6e:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   26d70:	2315      	movs	r3, #21
   26d72:	18fb      	adds	r3, r7, r3
   26d74:	781b      	ldrb	r3, [r3, #0]
   26d76:	b25b      	sxtb	r3, r3
   26d78:	2b01      	cmp	r3, #1
   26d7a:	d030      	beq.n	26dde <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   26d7c:	2001      	movs	r0, #1
   26d7e:	4b23      	ldr	r3, [pc, #140]	; (26e0c <nm_spi_read+0x108>)
   26d80:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   26d82:	2300      	movs	r3, #0
   26d84:	9300      	str	r3, [sp, #0]
   26d86:	2300      	movs	r3, #0
   26d88:	2200      	movs	r2, #0
   26d8a:	2100      	movs	r1, #0
   26d8c:	20cf      	movs	r0, #207	; 0xcf
   26d8e:	4c20      	ldr	r4, [pc, #128]	; (26e10 <nm_spi_read+0x10c>)
   26d90:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   26d92:	20cf      	movs	r0, #207	; 0xcf
   26d94:	4b1f      	ldr	r3, [pc, #124]	; (26e14 <nm_spi_read+0x110>)
   26d96:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   26d98:	4a1f      	ldr	r2, [pc, #124]	; (26e18 <nm_spi_read+0x114>)
   26d9a:	4917      	ldr	r1, [pc, #92]	; (26df8 <nm_spi_read+0xf4>)
   26d9c:	4b17      	ldr	r3, [pc, #92]	; (26dfc <nm_spi_read+0xf8>)
   26d9e:	0018      	movs	r0, r3
   26da0:	4b17      	ldr	r3, [pc, #92]	; (26e00 <nm_spi_read+0xfc>)
   26da2:	4798      	blx	r3
   26da4:	2317      	movs	r3, #23
   26da6:	18fb      	adds	r3, r7, r3
   26da8:	7819      	ldrb	r1, [r3, #0]
   26daa:	1dbb      	adds	r3, r7, #6
   26dac:	881b      	ldrh	r3, [r3, #0]
   26dae:	68fa      	ldr	r2, [r7, #12]
   26db0:	481a      	ldr	r0, [pc, #104]	; (26e1c <nm_spi_read+0x118>)
   26db2:	4c13      	ldr	r4, [pc, #76]	; (26e00 <nm_spi_read+0xfc>)
   26db4:	47a0      	blx	r4
   26db6:	4b14      	ldr	r3, [pc, #80]	; (26e08 <nm_spi_read+0x104>)
   26db8:	0018      	movs	r0, r3
   26dba:	4b11      	ldr	r3, [pc, #68]	; (26e00 <nm_spi_read+0xfc>)
   26dbc:	4798      	blx	r3
		nm_bsp_sleep(1);
   26dbe:	2001      	movs	r0, #1
   26dc0:	4b12      	ldr	r3, [pc, #72]	; (26e0c <nm_spi_read+0x108>)
   26dc2:	4798      	blx	r3
		retry--;
   26dc4:	2317      	movs	r3, #23
   26dc6:	18fb      	adds	r3, r7, r3
   26dc8:	781a      	ldrb	r2, [r3, #0]
   26dca:	2317      	movs	r3, #23
   26dcc:	18fb      	adds	r3, r7, r3
   26dce:	3a01      	subs	r2, #1
   26dd0:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   26dd2:	2317      	movs	r3, #23
   26dd4:	18fb      	adds	r3, r7, r3
   26dd6:	781b      	ldrb	r3, [r3, #0]
   26dd8:	2b00      	cmp	r3, #0
   26dda:	d000      	beq.n	26dde <nm_spi_read+0xda>
   26ddc:	e7a1      	b.n	26d22 <nm_spi_read+0x1e>
	}

	return result;
   26dde:	2315      	movs	r3, #21
   26de0:	18fb      	adds	r3, r7, r3
   26de2:	781b      	ldrb	r3, [r3, #0]
   26de4:	b25b      	sxtb	r3, r3
}
   26de6:	0018      	movs	r0, r3
   26de8:	46bd      	mov	sp, r7
   26dea:	b007      	add	sp, #28
   26dec:	bd90      	pop	{r4, r7, pc}
   26dee:	46c0      	nop			; (mov r8, r8)
   26df0:	00025dc9 	.word	0x00025dc9
   26df4:	00000472 	.word	0x00000472
   26df8:	0003c698 	.word	0x0003c698
   26dfc:	0003c030 	.word	0x0003c030
   26e00:	00020329 	.word	0x00020329
   26e04:	0003c49c 	.word	0x0003c49c
   26e08:	0003c070 	.word	0x0003c070
   26e0c:	00022799 	.word	0x00022799
   26e10:	0002584d 	.word	0x0002584d
   26e14:	00025c8d 	.word	0x00025c8d
   26e18:	0000047d 	.word	0x0000047d
   26e1c:	0003c43c 	.word	0x0003c43c

00026e20 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   26e20:	b580      	push	{r7, lr}
   26e22:	b082      	sub	sp, #8
   26e24:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   26e26:	4b0c      	ldr	r3, [pc, #48]	; (26e58 <spi_init_pkt_sz+0x38>)
   26e28:	0018      	movs	r0, r3
   26e2a:	4b0c      	ldr	r3, [pc, #48]	; (26e5c <spi_init_pkt_sz+0x3c>)
   26e2c:	4798      	blx	r3
   26e2e:	0003      	movs	r3, r0
   26e30:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   26e32:	687b      	ldr	r3, [r7, #4]
   26e34:	2270      	movs	r2, #112	; 0x70
   26e36:	4393      	bics	r3, r2
   26e38:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   26e3a:	687b      	ldr	r3, [r7, #4]
   26e3c:	2250      	movs	r2, #80	; 0x50
   26e3e:	4313      	orrs	r3, r2
   26e40:	607b      	str	r3, [r7, #4]
   26e42:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   26e44:	687b      	ldr	r3, [r7, #4]
   26e46:	4a04      	ldr	r2, [pc, #16]	; (26e58 <spi_init_pkt_sz+0x38>)
   26e48:	0019      	movs	r1, r3
   26e4a:	0010      	movs	r0, r2
   26e4c:	4b04      	ldr	r3, [pc, #16]	; (26e60 <spi_init_pkt_sz+0x40>)
   26e4e:	4798      	blx	r3
}
   26e50:	46c0      	nop			; (mov r8, r8)
   26e52:	46bd      	mov	sp, r7
   26e54:	b002      	add	sp, #8
   26e56:	bd80      	pop	{r7, pc}
   26e58:	0000e824 	.word	0x0000e824
   26e5c:	00026ff9 	.word	0x00026ff9
   26e60:	0002706d 	.word	0x0002706d

00026e64 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   26e64:	b590      	push	{r4, r7, lr}
   26e66:	b083      	sub	sp, #12
   26e68:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   26e6a:	2300      	movs	r3, #0
   26e6c:	9300      	str	r3, [sp, #0]
   26e6e:	2300      	movs	r3, #0
   26e70:	2200      	movs	r2, #0
   26e72:	2100      	movs	r1, #0
   26e74:	20cf      	movs	r0, #207	; 0xcf
   26e76:	4c05      	ldr	r4, [pc, #20]	; (26e8c <nm_spi_reset+0x28>)
   26e78:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   26e7a:	20cf      	movs	r0, #207	; 0xcf
   26e7c:	4b04      	ldr	r3, [pc, #16]	; (26e90 <nm_spi_reset+0x2c>)
   26e7e:	4798      	blx	r3
	return M2M_SUCCESS;
   26e80:	2300      	movs	r3, #0
}
   26e82:	0018      	movs	r0, r3
   26e84:	46bd      	mov	sp, r7
   26e86:	b001      	add	sp, #4
   26e88:	bd90      	pop	{r4, r7, pc}
   26e8a:	46c0      	nop			; (mov r8, r8)
   26e8c:	0002584d 	.word	0x0002584d
   26e90:	00025c8d 	.word	0x00025c8d

00026e94 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   26e94:	b580      	push	{r7, lr}
   26e96:	b082      	sub	sp, #8
   26e98:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   26e9a:	2300      	movs	r3, #0
   26e9c:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   26e9e:	4b40      	ldr	r3, [pc, #256]	; (26fa0 <nm_spi_init+0x10c>)
   26ea0:	2200      	movs	r2, #0
   26ea2:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   26ea4:	003b      	movs	r3, r7
   26ea6:	4a3f      	ldr	r2, [pc, #252]	; (26fa4 <nm_spi_init+0x110>)
   26ea8:	0019      	movs	r1, r3
   26eaa:	0010      	movs	r0, r2
   26eac:	4b3e      	ldr	r3, [pc, #248]	; (26fa8 <nm_spi_init+0x114>)
   26eae:	4798      	blx	r3
   26eb0:	1e03      	subs	r3, r0, #0
   26eb2:	d129      	bne.n	26f08 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   26eb4:	4b3a      	ldr	r3, [pc, #232]	; (26fa0 <nm_spi_init+0x10c>)
   26eb6:	2201      	movs	r2, #1
   26eb8:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   26eba:	2398      	movs	r3, #152	; 0x98
   26ebc:	00da      	lsls	r2, r3, #3
   26ebe:	493b      	ldr	r1, [pc, #236]	; (26fac <nm_spi_init+0x118>)
   26ec0:	4b3b      	ldr	r3, [pc, #236]	; (26fb0 <nm_spi_init+0x11c>)
   26ec2:	0018      	movs	r0, r3
   26ec4:	4b3b      	ldr	r3, [pc, #236]	; (26fb4 <nm_spi_init+0x120>)
   26ec6:	4798      	blx	r3
   26ec8:	4b3b      	ldr	r3, [pc, #236]	; (26fb8 <nm_spi_init+0x124>)
   26eca:	0018      	movs	r0, r3
   26ecc:	4b39      	ldr	r3, [pc, #228]	; (26fb4 <nm_spi_init+0x120>)
   26ece:	4798      	blx	r3
   26ed0:	4b3a      	ldr	r3, [pc, #232]	; (26fbc <nm_spi_init+0x128>)
   26ed2:	0018      	movs	r0, r3
   26ed4:	4b37      	ldr	r3, [pc, #220]	; (26fb4 <nm_spi_init+0x120>)
   26ed6:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   26ed8:	003b      	movs	r3, r7
   26eda:	4a32      	ldr	r2, [pc, #200]	; (26fa4 <nm_spi_init+0x110>)
   26edc:	0019      	movs	r1, r3
   26ede:	0010      	movs	r0, r2
   26ee0:	4b31      	ldr	r3, [pc, #196]	; (26fa8 <nm_spi_init+0x114>)
   26ee2:	4798      	blx	r3
   26ee4:	1e03      	subs	r3, r0, #0
   26ee6:	d10f      	bne.n	26f08 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   26ee8:	4a35      	ldr	r2, [pc, #212]	; (26fc0 <nm_spi_init+0x12c>)
   26eea:	4930      	ldr	r1, [pc, #192]	; (26fac <nm_spi_init+0x118>)
   26eec:	4b30      	ldr	r3, [pc, #192]	; (26fb0 <nm_spi_init+0x11c>)
   26eee:	0018      	movs	r0, r3
   26ef0:	4b30      	ldr	r3, [pc, #192]	; (26fb4 <nm_spi_init+0x120>)
   26ef2:	4798      	blx	r3
   26ef4:	4b33      	ldr	r3, [pc, #204]	; (26fc4 <nm_spi_init+0x130>)
   26ef6:	0018      	movs	r0, r3
   26ef8:	4b2e      	ldr	r3, [pc, #184]	; (26fb4 <nm_spi_init+0x120>)
   26efa:	4798      	blx	r3
   26efc:	4b2f      	ldr	r3, [pc, #188]	; (26fbc <nm_spi_init+0x128>)
   26efe:	0018      	movs	r0, r3
   26f00:	4b2c      	ldr	r3, [pc, #176]	; (26fb4 <nm_spi_init+0x120>)
   26f02:	4798      	blx	r3
			return 0;
   26f04:	2300      	movs	r3, #0
   26f06:	e047      	b.n	26f98 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   26f08:	4b25      	ldr	r3, [pc, #148]	; (26fa0 <nm_spi_init+0x10c>)
   26f0a:	781b      	ldrb	r3, [r3, #0]
   26f0c:	2b00      	cmp	r3, #0
   26f0e:	d126      	bne.n	26f5e <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   26f10:	683b      	ldr	r3, [r7, #0]
   26f12:	220c      	movs	r2, #12
   26f14:	4393      	bics	r3, r2
   26f16:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   26f18:	683b      	ldr	r3, [r7, #0]
   26f1a:	2270      	movs	r2, #112	; 0x70
   26f1c:	4393      	bics	r3, r2
   26f1e:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   26f20:	683b      	ldr	r3, [r7, #0]
   26f22:	2250      	movs	r2, #80	; 0x50
   26f24:	4313      	orrs	r3, r2
   26f26:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   26f28:	683b      	ldr	r3, [r7, #0]
   26f2a:	4a1e      	ldr	r2, [pc, #120]	; (26fa4 <nm_spi_init+0x110>)
   26f2c:	0019      	movs	r1, r3
   26f2e:	0010      	movs	r0, r2
   26f30:	4b25      	ldr	r3, [pc, #148]	; (26fc8 <nm_spi_init+0x134>)
   26f32:	4798      	blx	r3
   26f34:	1e03      	subs	r3, r0, #0
   26f36:	d10f      	bne.n	26f58 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   26f38:	4a24      	ldr	r2, [pc, #144]	; (26fcc <nm_spi_init+0x138>)
   26f3a:	491c      	ldr	r1, [pc, #112]	; (26fac <nm_spi_init+0x118>)
   26f3c:	4b1c      	ldr	r3, [pc, #112]	; (26fb0 <nm_spi_init+0x11c>)
   26f3e:	0018      	movs	r0, r3
   26f40:	4b1c      	ldr	r3, [pc, #112]	; (26fb4 <nm_spi_init+0x120>)
   26f42:	4798      	blx	r3
   26f44:	4b22      	ldr	r3, [pc, #136]	; (26fd0 <nm_spi_init+0x13c>)
   26f46:	0018      	movs	r0, r3
   26f48:	4b1a      	ldr	r3, [pc, #104]	; (26fb4 <nm_spi_init+0x120>)
   26f4a:	4798      	blx	r3
   26f4c:	4b1b      	ldr	r3, [pc, #108]	; (26fbc <nm_spi_init+0x128>)
   26f4e:	0018      	movs	r0, r3
   26f50:	4b18      	ldr	r3, [pc, #96]	; (26fb4 <nm_spi_init+0x120>)
   26f52:	4798      	blx	r3
			return 0;
   26f54:	2300      	movs	r3, #0
   26f56:	e01f      	b.n	26f98 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   26f58:	4b11      	ldr	r3, [pc, #68]	; (26fa0 <nm_spi_init+0x10c>)
   26f5a:	2201      	movs	r2, #1
   26f5c:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   26f5e:	1d3a      	adds	r2, r7, #4
   26f60:	2380      	movs	r3, #128	; 0x80
   26f62:	015b      	lsls	r3, r3, #5
   26f64:	0011      	movs	r1, r2
   26f66:	0018      	movs	r0, r3
   26f68:	4b0f      	ldr	r3, [pc, #60]	; (26fa8 <nm_spi_init+0x114>)
   26f6a:	4798      	blx	r3
   26f6c:	1e03      	subs	r3, r0, #0
   26f6e:	d110      	bne.n	26f92 <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   26f70:	4a18      	ldr	r2, [pc, #96]	; (26fd4 <nm_spi_init+0x140>)
   26f72:	490e      	ldr	r1, [pc, #56]	; (26fac <nm_spi_init+0x118>)
   26f74:	4b0e      	ldr	r3, [pc, #56]	; (26fb0 <nm_spi_init+0x11c>)
   26f76:	0018      	movs	r0, r3
   26f78:	4b0e      	ldr	r3, [pc, #56]	; (26fb4 <nm_spi_init+0x120>)
   26f7a:	4798      	blx	r3
   26f7c:	4b16      	ldr	r3, [pc, #88]	; (26fd8 <nm_spi_init+0x144>)
   26f7e:	0018      	movs	r0, r3
   26f80:	4b0c      	ldr	r3, [pc, #48]	; (26fb4 <nm_spi_init+0x120>)
   26f82:	4798      	blx	r3
   26f84:	4b0d      	ldr	r3, [pc, #52]	; (26fbc <nm_spi_init+0x128>)
   26f86:	0018      	movs	r0, r3
   26f88:	4b0a      	ldr	r3, [pc, #40]	; (26fb4 <nm_spi_init+0x120>)
   26f8a:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   26f8c:	2306      	movs	r3, #6
   26f8e:	425b      	negs	r3, r3
   26f90:	e002      	b.n	26f98 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   26f92:	4b12      	ldr	r3, [pc, #72]	; (26fdc <nm_spi_init+0x148>)
   26f94:	4798      	blx	r3


	return M2M_SUCCESS;
   26f96:	2300      	movs	r3, #0
}
   26f98:	0018      	movs	r0, r3
   26f9a:	46bd      	mov	sp, r7
   26f9c:	b002      	add	sp, #8
   26f9e:	bd80      	pop	{r7, pc}
   26fa0:	20004124 	.word	0x20004124
   26fa4:	0000e824 	.word	0x0000e824
   26fa8:	00026b8d 	.word	0x00026b8d
   26fac:	0003c6a4 	.word	0x0003c6a4
   26fb0:	0003c030 	.word	0x0003c030
   26fb4:	00020329 	.word	0x00020329
   26fb8:	0003c4cc 	.word	0x0003c4cc
   26fbc:	0003c070 	.word	0x0003c070
   26fc0:	000004c3 	.word	0x000004c3
   26fc4:	0003c51c 	.word	0x0003c51c
   26fc8:	00026895 	.word	0x00026895
   26fcc:	000004cd 	.word	0x000004cd
   26fd0:	0003c54c 	.word	0x0003c54c
   26fd4:	000004d7 	.word	0x000004d7
   26fd8:	0003c580 	.word	0x0003c580
   26fdc:	00026e21 	.word	0x00026e21

00026fe0 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   26fe0:	b580      	push	{r7, lr}
   26fe2:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   26fe4:	4b03      	ldr	r3, [pc, #12]	; (26ff4 <nm_spi_deinit+0x14>)
   26fe6:	2200      	movs	r2, #0
   26fe8:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   26fea:	2300      	movs	r3, #0
}
   26fec:	0018      	movs	r0, r3
   26fee:	46bd      	mov	sp, r7
   26ff0:	bd80      	pop	{r7, pc}
   26ff2:	46c0      	nop			; (mov r8, r8)
   26ff4:	20004124 	.word	0x20004124

00026ff8 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   26ff8:	b580      	push	{r7, lr}
   26ffa:	b084      	sub	sp, #16
   26ffc:	af00      	add	r7, sp, #0
   26ffe:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   27000:	230c      	movs	r3, #12
   27002:	18fa      	adds	r2, r7, r3
   27004:	687b      	ldr	r3, [r7, #4]
   27006:	0011      	movs	r1, r2
   27008:	0018      	movs	r0, r3
   2700a:	4b03      	ldr	r3, [pc, #12]	; (27018 <nm_spi_read_reg+0x20>)
   2700c:	4798      	blx	r3

	return u32Val;
   2700e:	68fb      	ldr	r3, [r7, #12]
}
   27010:	0018      	movs	r0, r3
   27012:	46bd      	mov	sp, r7
   27014:	b004      	add	sp, #16
   27016:	bd80      	pop	{r7, pc}
   27018:	00026b8d 	.word	0x00026b8d

0002701c <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   2701c:	b590      	push	{r4, r7, lr}
   2701e:	b085      	sub	sp, #20
   27020:	af00      	add	r7, sp, #0
   27022:	6078      	str	r0, [r7, #4]
   27024:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   27026:	230f      	movs	r3, #15
   27028:	18fc      	adds	r4, r7, r3
   2702a:	683a      	ldr	r2, [r7, #0]
   2702c:	687b      	ldr	r3, [r7, #4]
   2702e:	0011      	movs	r1, r2
   27030:	0018      	movs	r0, r3
   27032:	4b0d      	ldr	r3, [pc, #52]	; (27068 <nm_spi_read_reg_with_ret+0x4c>)
   27034:	4798      	blx	r3
   27036:	0003      	movs	r3, r0
   27038:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   2703a:	230f      	movs	r3, #15
   2703c:	18fb      	adds	r3, r7, r3
   2703e:	781b      	ldrb	r3, [r3, #0]
   27040:	b25b      	sxtb	r3, r3
   27042:	2b01      	cmp	r3, #1
   27044:	d104      	bne.n	27050 <nm_spi_read_reg_with_ret+0x34>
   27046:	230f      	movs	r3, #15
   27048:	18fb      	adds	r3, r7, r3
   2704a:	2200      	movs	r2, #0
   2704c:	701a      	strb	r2, [r3, #0]
   2704e:	e003      	b.n	27058 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   27050:	230f      	movs	r3, #15
   27052:	18fb      	adds	r3, r7, r3
   27054:	22fa      	movs	r2, #250	; 0xfa
   27056:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   27058:	230f      	movs	r3, #15
   2705a:	18fb      	adds	r3, r7, r3
   2705c:	781b      	ldrb	r3, [r3, #0]
   2705e:	b25b      	sxtb	r3, r3
}
   27060:	0018      	movs	r0, r3
   27062:	46bd      	mov	sp, r7
   27064:	b005      	add	sp, #20
   27066:	bd90      	pop	{r4, r7, pc}
   27068:	00026b8d 	.word	0x00026b8d

0002706c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   2706c:	b590      	push	{r4, r7, lr}
   2706e:	b085      	sub	sp, #20
   27070:	af00      	add	r7, sp, #0
   27072:	6078      	str	r0, [r7, #4]
   27074:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   27076:	230f      	movs	r3, #15
   27078:	18fc      	adds	r4, r7, r3
   2707a:	683a      	ldr	r2, [r7, #0]
   2707c:	687b      	ldr	r3, [r7, #4]
   2707e:	0011      	movs	r1, r2
   27080:	0018      	movs	r0, r3
   27082:	4b0d      	ldr	r3, [pc, #52]	; (270b8 <nm_spi_write_reg+0x4c>)
   27084:	4798      	blx	r3
   27086:	0003      	movs	r3, r0
   27088:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   2708a:	230f      	movs	r3, #15
   2708c:	18fb      	adds	r3, r7, r3
   2708e:	781b      	ldrb	r3, [r3, #0]
   27090:	b25b      	sxtb	r3, r3
   27092:	2b01      	cmp	r3, #1
   27094:	d104      	bne.n	270a0 <nm_spi_write_reg+0x34>
   27096:	230f      	movs	r3, #15
   27098:	18fb      	adds	r3, r7, r3
   2709a:	2200      	movs	r2, #0
   2709c:	701a      	strb	r2, [r3, #0]
   2709e:	e003      	b.n	270a8 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   270a0:	230f      	movs	r3, #15
   270a2:	18fb      	adds	r3, r7, r3
   270a4:	22fa      	movs	r2, #250	; 0xfa
   270a6:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   270a8:	230f      	movs	r3, #15
   270aa:	18fb      	adds	r3, r7, r3
   270ac:	781b      	ldrb	r3, [r3, #0]
   270ae:	b25b      	sxtb	r3, r3
}
   270b0:	0018      	movs	r0, r3
   270b2:	46bd      	mov	sp, r7
   270b4:	b005      	add	sp, #20
   270b6:	bd90      	pop	{r4, r7, pc}
   270b8:	00026895 	.word	0x00026895

000270bc <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   270bc:	b590      	push	{r4, r7, lr}
   270be:	b087      	sub	sp, #28
   270c0:	af00      	add	r7, sp, #0
   270c2:	60f8      	str	r0, [r7, #12]
   270c4:	60b9      	str	r1, [r7, #8]
   270c6:	1dbb      	adds	r3, r7, #6
   270c8:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   270ca:	2317      	movs	r3, #23
   270cc:	18fc      	adds	r4, r7, r3
   270ce:	1dbb      	adds	r3, r7, #6
   270d0:	881a      	ldrh	r2, [r3, #0]
   270d2:	68b9      	ldr	r1, [r7, #8]
   270d4:	68fb      	ldr	r3, [r7, #12]
   270d6:	0018      	movs	r0, r3
   270d8:	4b0d      	ldr	r3, [pc, #52]	; (27110 <nm_spi_read_block+0x54>)
   270da:	4798      	blx	r3
   270dc:	0003      	movs	r3, r0
   270de:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   270e0:	2317      	movs	r3, #23
   270e2:	18fb      	adds	r3, r7, r3
   270e4:	781b      	ldrb	r3, [r3, #0]
   270e6:	b25b      	sxtb	r3, r3
   270e8:	2b01      	cmp	r3, #1
   270ea:	d104      	bne.n	270f6 <nm_spi_read_block+0x3a>
   270ec:	2317      	movs	r3, #23
   270ee:	18fb      	adds	r3, r7, r3
   270f0:	2200      	movs	r2, #0
   270f2:	701a      	strb	r2, [r3, #0]
   270f4:	e003      	b.n	270fe <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   270f6:	2317      	movs	r3, #23
   270f8:	18fb      	adds	r3, r7, r3
   270fa:	22fa      	movs	r2, #250	; 0xfa
   270fc:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   270fe:	2317      	movs	r3, #23
   27100:	18fb      	adds	r3, r7, r3
   27102:	781b      	ldrb	r3, [r3, #0]
   27104:	b25b      	sxtb	r3, r3
}
   27106:	0018      	movs	r0, r3
   27108:	46bd      	mov	sp, r7
   2710a:	b007      	add	sp, #28
   2710c:	bd90      	pop	{r4, r7, pc}
   2710e:	46c0      	nop			; (mov r8, r8)
   27110:	00026d05 	.word	0x00026d05

00027114 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   27114:	b590      	push	{r4, r7, lr}
   27116:	b087      	sub	sp, #28
   27118:	af00      	add	r7, sp, #0
   2711a:	60f8      	str	r0, [r7, #12]
   2711c:	60b9      	str	r1, [r7, #8]
   2711e:	1dbb      	adds	r3, r7, #6
   27120:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   27122:	2317      	movs	r3, #23
   27124:	18fc      	adds	r4, r7, r3
   27126:	1dbb      	adds	r3, r7, #6
   27128:	881a      	ldrh	r2, [r3, #0]
   2712a:	68b9      	ldr	r1, [r7, #8]
   2712c:	68fb      	ldr	r3, [r7, #12]
   2712e:	0018      	movs	r0, r3
   27130:	4b0d      	ldr	r3, [pc, #52]	; (27168 <nm_spi_write_block+0x54>)
   27132:	4798      	blx	r3
   27134:	0003      	movs	r3, r0
   27136:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   27138:	2317      	movs	r3, #23
   2713a:	18fb      	adds	r3, r7, r3
   2713c:	781b      	ldrb	r3, [r3, #0]
   2713e:	b25b      	sxtb	r3, r3
   27140:	2b01      	cmp	r3, #1
   27142:	d104      	bne.n	2714e <nm_spi_write_block+0x3a>
   27144:	2317      	movs	r3, #23
   27146:	18fb      	adds	r3, r7, r3
   27148:	2200      	movs	r2, #0
   2714a:	701a      	strb	r2, [r3, #0]
   2714c:	e003      	b.n	27156 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   2714e:	2317      	movs	r3, #23
   27150:	18fb      	adds	r3, r7, r3
   27152:	22fa      	movs	r2, #250	; 0xfa
   27154:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   27156:	2317      	movs	r3, #23
   27158:	18fb      	adds	r3, r7, r3
   2715a:	781b      	ldrb	r3, [r3, #0]
   2715c:	b25b      	sxtb	r3, r3
}
   2715e:	0018      	movs	r0, r3
   27160:	46bd      	mov	sp, r7
   27162:	b007      	add	sp, #28
   27164:	bd90      	pop	{r4, r7, pc}
   27166:	46c0      	nop			; (mov r8, r8)
   27168:	000269e1 	.word	0x000269e1

0002716c <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   2716c:	b590      	push	{r4, r7, lr}
   2716e:	b089      	sub	sp, #36	; 0x24
   27170:	af00      	add	r7, sp, #0
   27172:	60b9      	str	r1, [r7, #8]
   27174:	0011      	movs	r1, r2
   27176:	607b      	str	r3, [r7, #4]
   27178:	230f      	movs	r3, #15
   2717a:	18fb      	adds	r3, r7, r3
   2717c:	1c02      	adds	r2, r0, #0
   2717e:	701a      	strb	r2, [r3, #0]
   27180:	230e      	movs	r3, #14
   27182:	18fb      	adds	r3, r7, r3
   27184:	1c0a      	adds	r2, r1, #0
   27186:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   27188:	2330      	movs	r3, #48	; 0x30
   2718a:	18fb      	adds	r3, r7, r3
   2718c:	881b      	ldrh	r3, [r3, #0]
   2718e:	2b00      	cmp	r3, #0
   27190:	d100      	bne.n	27194 <Socket_ReadSocketData+0x28>
   27192:	e0d7      	b.n	27344 <Socket_ReadSocketData+0x1d8>
   27194:	230f      	movs	r3, #15
   27196:	18fb      	adds	r3, r7, r3
   27198:	2200      	movs	r2, #0
   2719a:	569a      	ldrsb	r2, [r3, r2]
   2719c:	4b6b      	ldr	r3, [pc, #428]	; (2734c <Socket_ReadSocketData+0x1e0>)
   2719e:	0112      	lsls	r2, r2, #4
   271a0:	58d3      	ldr	r3, [r2, r3]
   271a2:	2b00      	cmp	r3, #0
   271a4:	d100      	bne.n	271a8 <Socket_ReadSocketData+0x3c>
   271a6:	e0cd      	b.n	27344 <Socket_ReadSocketData+0x1d8>
   271a8:	230f      	movs	r3, #15
   271aa:	18fb      	adds	r3, r7, r3
   271ac:	781b      	ldrb	r3, [r3, #0]
   271ae:	b25b      	sxtb	r3, r3
   271b0:	4a66      	ldr	r2, [pc, #408]	; (2734c <Socket_ReadSocketData+0x1e0>)
   271b2:	011b      	lsls	r3, r3, #4
   271b4:	18d3      	adds	r3, r2, r3
   271b6:	3304      	adds	r3, #4
   271b8:	881b      	ldrh	r3, [r3, #0]
   271ba:	b29b      	uxth	r3, r3
   271bc:	2b00      	cmp	r3, #0
   271be:	d100      	bne.n	271c2 <Socket_ReadSocketData+0x56>
   271c0:	e0c0      	b.n	27344 <Socket_ReadSocketData+0x1d8>
   271c2:	230f      	movs	r3, #15
   271c4:	18fb      	adds	r3, r7, r3
   271c6:	781b      	ldrb	r3, [r3, #0]
   271c8:	b25b      	sxtb	r3, r3
   271ca:	4a60      	ldr	r2, [pc, #384]	; (2734c <Socket_ReadSocketData+0x1e0>)
   271cc:	011b      	lsls	r3, r3, #4
   271ce:	18d3      	adds	r3, r2, r3
   271d0:	330a      	adds	r3, #10
   271d2:	781b      	ldrb	r3, [r3, #0]
   271d4:	b2db      	uxtb	r3, r3
   271d6:	2b01      	cmp	r3, #1
   271d8:	d000      	beq.n	271dc <Socket_ReadSocketData+0x70>
   271da:	e0b3      	b.n	27344 <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   271dc:	687b      	ldr	r3, [r7, #4]
   271de:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   271e0:	68bb      	ldr	r3, [r7, #8]
   271e2:	2230      	movs	r2, #48	; 0x30
   271e4:	18ba      	adds	r2, r7, r2
   271e6:	8812      	ldrh	r2, [r2, #0]
   271e8:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   271ea:	2319      	movs	r3, #25
   271ec:	18fb      	adds	r3, r7, r3
   271ee:	2201      	movs	r2, #1
   271f0:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   271f2:	231a      	movs	r3, #26
   271f4:	18fb      	adds	r3, r7, r3
   271f6:	2230      	movs	r2, #48	; 0x30
   271f8:	18ba      	adds	r2, r7, r2
   271fa:	8812      	ldrh	r2, [r2, #0]
   271fc:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   271fe:	230f      	movs	r3, #15
   27200:	18fb      	adds	r3, r7, r3
   27202:	781b      	ldrb	r3, [r3, #0]
   27204:	b25b      	sxtb	r3, r3
   27206:	4a51      	ldr	r2, [pc, #324]	; (2734c <Socket_ReadSocketData+0x1e0>)
   27208:	011b      	lsls	r3, r3, #4
   2720a:	18d3      	adds	r3, r2, r3
   2720c:	3304      	adds	r3, #4
   2720e:	881b      	ldrh	r3, [r3, #0]
   27210:	b29b      	uxth	r3, r3
   27212:	221a      	movs	r2, #26
   27214:	18ba      	adds	r2, r7, r2
   27216:	8812      	ldrh	r2, [r2, #0]
   27218:	1ad3      	subs	r3, r2, r3
   2721a:	b29a      	uxth	r2, r3
   2721c:	2316      	movs	r3, #22
   2721e:	18fb      	adds	r3, r7, r3
   27220:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   27222:	2316      	movs	r3, #22
   27224:	18fb      	adds	r3, r7, r3
   27226:	2200      	movs	r2, #0
   27228:	5e9b      	ldrsh	r3, [r3, r2]
   2722a:	2b00      	cmp	r3, #0
   2722c:	dd0f      	ble.n	2724e <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   2722e:	2319      	movs	r3, #25
   27230:	18fb      	adds	r3, r7, r3
   27232:	2200      	movs	r2, #0
   27234:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   27236:	230f      	movs	r3, #15
   27238:	18fb      	adds	r3, r7, r3
   2723a:	2200      	movs	r2, #0
   2723c:	569a      	ldrsb	r2, [r3, r2]
   2723e:	231a      	movs	r3, #26
   27240:	18fb      	adds	r3, r7, r3
   27242:	4942      	ldr	r1, [pc, #264]	; (2734c <Socket_ReadSocketData+0x1e0>)
   27244:	0112      	lsls	r2, r2, #4
   27246:	188a      	adds	r2, r1, r2
   27248:	3204      	adds	r2, #4
   2724a:	8812      	ldrh	r2, [r2, #0]
   2724c:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   2724e:	230f      	movs	r3, #15
   27250:	18fb      	adds	r3, r7, r3
   27252:	2200      	movs	r2, #0
   27254:	569a      	ldrsb	r2, [r3, r2]
   27256:	4b3d      	ldr	r3, [pc, #244]	; (2734c <Socket_ReadSocketData+0x1e0>)
   27258:	0112      	lsls	r2, r2, #4
   2725a:	58d1      	ldr	r1, [r2, r3]
   2725c:	2319      	movs	r3, #25
   2725e:	18fb      	adds	r3, r7, r3
   27260:	781c      	ldrb	r4, [r3, #0]
   27262:	231a      	movs	r3, #26
   27264:	18fb      	adds	r3, r7, r3
   27266:	881a      	ldrh	r2, [r3, #0]
   27268:	69f8      	ldr	r0, [r7, #28]
   2726a:	0023      	movs	r3, r4
   2726c:	4c38      	ldr	r4, [pc, #224]	; (27350 <Socket_ReadSocketData+0x1e4>)
   2726e:	47a0      	blx	r4
   27270:	1e03      	subs	r3, r0, #0
   27272:	d14f      	bne.n	27314 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   27274:	230f      	movs	r3, #15
   27276:	18fb      	adds	r3, r7, r3
   27278:	2200      	movs	r2, #0
   2727a:	569a      	ldrsb	r2, [r3, r2]
   2727c:	4b33      	ldr	r3, [pc, #204]	; (2734c <Socket_ReadSocketData+0x1e0>)
   2727e:	0112      	lsls	r2, r2, #4
   27280:	58d2      	ldr	r2, [r2, r3]
   27282:	68bb      	ldr	r3, [r7, #8]
   27284:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   27286:	231a      	movs	r3, #26
   27288:	18fb      	adds	r3, r7, r3
   2728a:	2200      	movs	r2, #0
   2728c:	5e9a      	ldrsh	r2, [r3, r2]
   2728e:	68bb      	ldr	r3, [r7, #8]
   27290:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   27292:	68bb      	ldr	r3, [r7, #8]
   27294:	88da      	ldrh	r2, [r3, #6]
   27296:	231a      	movs	r3, #26
   27298:	18fb      	adds	r3, r7, r3
   2729a:	881b      	ldrh	r3, [r3, #0]
   2729c:	1ad3      	subs	r3, r2, r3
   2729e:	b29a      	uxth	r2, r3
   272a0:	68bb      	ldr	r3, [r7, #8]
   272a2:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   272a4:	4b2b      	ldr	r3, [pc, #172]	; (27354 <Socket_ReadSocketData+0x1e8>)
   272a6:	681b      	ldr	r3, [r3, #0]
   272a8:	2b00      	cmp	r3, #0
   272aa:	d00b      	beq.n	272c4 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   272ac:	4b29      	ldr	r3, [pc, #164]	; (27354 <Socket_ReadSocketData+0x1e8>)
   272ae:	681b      	ldr	r3, [r3, #0]
   272b0:	68bc      	ldr	r4, [r7, #8]
   272b2:	220e      	movs	r2, #14
   272b4:	18ba      	adds	r2, r7, r2
   272b6:	7811      	ldrb	r1, [r2, #0]
   272b8:	220f      	movs	r2, #15
   272ba:	18ba      	adds	r2, r7, r2
   272bc:	2000      	movs	r0, #0
   272be:	5610      	ldrsb	r0, [r2, r0]
   272c0:	0022      	movs	r2, r4
   272c2:	4798      	blx	r3

				u16ReadCount -= u16Read;
   272c4:	2330      	movs	r3, #48	; 0x30
   272c6:	18f9      	adds	r1, r7, r3
   272c8:	2330      	movs	r3, #48	; 0x30
   272ca:	18fa      	adds	r2, r7, r3
   272cc:	231a      	movs	r3, #26
   272ce:	18fb      	adds	r3, r7, r3
   272d0:	8812      	ldrh	r2, [r2, #0]
   272d2:	881b      	ldrh	r3, [r3, #0]
   272d4:	1ad3      	subs	r3, r2, r3
   272d6:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   272d8:	231a      	movs	r3, #26
   272da:	18fb      	adds	r3, r7, r3
   272dc:	881b      	ldrh	r3, [r3, #0]
   272de:	69fa      	ldr	r2, [r7, #28]
   272e0:	18d3      	adds	r3, r2, r3
   272e2:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   272e4:	230f      	movs	r3, #15
   272e6:	18fb      	adds	r3, r7, r3
   272e8:	781b      	ldrb	r3, [r3, #0]
   272ea:	b25b      	sxtb	r3, r3
   272ec:	4a17      	ldr	r2, [pc, #92]	; (2734c <Socket_ReadSocketData+0x1e0>)
   272ee:	011b      	lsls	r3, r3, #4
   272f0:	18d3      	adds	r3, r2, r3
   272f2:	330a      	adds	r3, #10
   272f4:	781b      	ldrb	r3, [r3, #0]
   272f6:	b2db      	uxtb	r3, r3
   272f8:	2b00      	cmp	r3, #0
   272fa:	d11c      	bne.n	27336 <Socket_ReadSocketData+0x1ca>
   272fc:	2330      	movs	r3, #48	; 0x30
   272fe:	18fb      	adds	r3, r7, r3
   27300:	881b      	ldrh	r3, [r3, #0]
   27302:	2b00      	cmp	r3, #0
   27304:	d017      	beq.n	27336 <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   27306:	2301      	movs	r3, #1
   27308:	2200      	movs	r2, #0
   2730a:	2100      	movs	r1, #0
   2730c:	2000      	movs	r0, #0
   2730e:	4c10      	ldr	r4, [pc, #64]	; (27350 <Socket_ReadSocketData+0x1e4>)
   27310:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   27312:	e017      	b.n	27344 <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   27314:	4b10      	ldr	r3, [pc, #64]	; (27358 <Socket_ReadSocketData+0x1ec>)
   27316:	0018      	movs	r0, r3
   27318:	4b10      	ldr	r3, [pc, #64]	; (2735c <Socket_ReadSocketData+0x1f0>)
   2731a:	4798      	blx	r3
   2731c:	2330      	movs	r3, #48	; 0x30
   2731e:	18fb      	adds	r3, r7, r3
   27320:	881a      	ldrh	r2, [r3, #0]
   27322:	4b0f      	ldr	r3, [pc, #60]	; (27360 <Socket_ReadSocketData+0x1f4>)
   27324:	0011      	movs	r1, r2
   27326:	0018      	movs	r0, r3
   27328:	4b0c      	ldr	r3, [pc, #48]	; (2735c <Socket_ReadSocketData+0x1f0>)
   2732a:	4798      	blx	r3
   2732c:	4b0d      	ldr	r3, [pc, #52]	; (27364 <Socket_ReadSocketData+0x1f8>)
   2732e:	0018      	movs	r0, r3
   27330:	4b0a      	ldr	r3, [pc, #40]	; (2735c <Socket_ReadSocketData+0x1f0>)
   27332:	4798      	blx	r3
				break;
   27334:	e006      	b.n	27344 <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   27336:	2330      	movs	r3, #48	; 0x30
   27338:	18fb      	adds	r3, r7, r3
   2733a:	881b      	ldrh	r3, [r3, #0]
   2733c:	2b00      	cmp	r3, #0
   2733e:	d000      	beq.n	27342 <Socket_ReadSocketData+0x1d6>
   27340:	e753      	b.n	271ea <Socket_ReadSocketData+0x7e>
	}
}
   27342:	e7ff      	b.n	27344 <Socket_ReadSocketData+0x1d8>
   27344:	46c0      	nop			; (mov r8, r8)
   27346:	46bd      	mov	sp, r7
   27348:	b009      	add	sp, #36	; 0x24
   2734a:	bd90      	pop	{r4, r7, pc}
   2734c:	20005980 	.word	0x20005980
   27350:	00023b65 	.word	0x00023b65
   27354:	20005a30 	.word	0x20005a30
   27358:	0003c6b0 	.word	0x0003c6b0
   2735c:	00020329 	.word	0x00020329
   27360:	0003c6bc 	.word	0x0003c6bc
   27364:	0003c6d0 	.word	0x0003c6d0

00027368 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   27368:	b590      	push	{r4, r7, lr}
   2736a:	b0bb      	sub	sp, #236	; 0xec
   2736c:	af02      	add	r7, sp, #8
   2736e:	603a      	str	r2, [r7, #0]
   27370:	1dfb      	adds	r3, r7, #7
   27372:	1c02      	adds	r2, r0, #0
   27374:	701a      	strb	r2, [r3, #0]
   27376:	1d3b      	adds	r3, r7, #4
   27378:	1c0a      	adds	r2, r1, #0
   2737a:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   2737c:	1dfb      	adds	r3, r7, #7
   2737e:	781b      	ldrb	r3, [r3, #0]
   27380:	2b41      	cmp	r3, #65	; 0x41
   27382:	d003      	beq.n	2738c <m2m_ip_cb+0x24>
   27384:	1dfb      	adds	r3, r7, #7
   27386:	781b      	ldrb	r3, [r3, #0]
   27388:	2b54      	cmp	r3, #84	; 0x54
   2738a:	d120      	bne.n	273ce <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   2738c:	23cc      	movs	r3, #204	; 0xcc
   2738e:	18f9      	adds	r1, r7, r3
   27390:	6838      	ldr	r0, [r7, #0]
   27392:	2300      	movs	r3, #0
   27394:	2204      	movs	r2, #4
   27396:	4c98      	ldr	r4, [pc, #608]	; (275f8 <m2m_ip_cb+0x290>)
   27398:	47a0      	blx	r4
   2739a:	1e03      	subs	r3, r0, #0
   2739c:	d000      	beq.n	273a0 <m2m_ip_cb+0x38>
   2739e:	e275      	b.n	2788c <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   273a0:	23cc      	movs	r3, #204	; 0xcc
   273a2:	18fb      	adds	r3, r7, r3
   273a4:	2201      	movs	r2, #1
   273a6:	569a      	ldrsb	r2, [r3, r2]
   273a8:	23c8      	movs	r3, #200	; 0xc8
   273aa:	18fb      	adds	r3, r7, r3
   273ac:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   273ae:	4b93      	ldr	r3, [pc, #588]	; (275fc <m2m_ip_cb+0x294>)
   273b0:	681b      	ldr	r3, [r3, #0]
   273b2:	2b00      	cmp	r3, #0
   273b4:	d100      	bne.n	273b8 <m2m_ip_cb+0x50>
   273b6:	e269      	b.n	2788c <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   273b8:	4b90      	ldr	r3, [pc, #576]	; (275fc <m2m_ip_cb+0x294>)
   273ba:	681b      	ldr	r3, [r3, #0]
   273bc:	22cc      	movs	r2, #204	; 0xcc
   273be:	18ba      	adds	r2, r7, r2
   273c0:	2000      	movs	r0, #0
   273c2:	5610      	ldrsb	r0, [r2, r0]
   273c4:	22c8      	movs	r2, #200	; 0xc8
   273c6:	18ba      	adds	r2, r7, r2
   273c8:	2101      	movs	r1, #1
   273ca:	4798      	blx	r3
	{
   273cc:	e25e      	b.n	2788c <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   273ce:	1dfb      	adds	r3, r7, #7
   273d0:	781b      	ldrb	r3, [r3, #0]
   273d2:	2b42      	cmp	r3, #66	; 0x42
   273d4:	d120      	bne.n	27418 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   273d6:	23c4      	movs	r3, #196	; 0xc4
   273d8:	18f9      	adds	r1, r7, r3
   273da:	6838      	ldr	r0, [r7, #0]
   273dc:	2300      	movs	r3, #0
   273de:	2204      	movs	r2, #4
   273e0:	4c85      	ldr	r4, [pc, #532]	; (275f8 <m2m_ip_cb+0x290>)
   273e2:	47a0      	blx	r4
   273e4:	1e03      	subs	r3, r0, #0
   273e6:	d000      	beq.n	273ea <m2m_ip_cb+0x82>
   273e8:	e257      	b.n	2789a <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   273ea:	23c4      	movs	r3, #196	; 0xc4
   273ec:	18fb      	adds	r3, r7, r3
   273ee:	2201      	movs	r2, #1
   273f0:	569a      	ldrsb	r2, [r3, r2]
   273f2:	23c0      	movs	r3, #192	; 0xc0
   273f4:	18fb      	adds	r3, r7, r3
   273f6:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   273f8:	4b80      	ldr	r3, [pc, #512]	; (275fc <m2m_ip_cb+0x294>)
   273fa:	681b      	ldr	r3, [r3, #0]
   273fc:	2b00      	cmp	r3, #0
   273fe:	d100      	bne.n	27402 <m2m_ip_cb+0x9a>
   27400:	e24b      	b.n	2789a <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   27402:	4b7e      	ldr	r3, [pc, #504]	; (275fc <m2m_ip_cb+0x294>)
   27404:	681b      	ldr	r3, [r3, #0]
   27406:	22c4      	movs	r2, #196	; 0xc4
   27408:	18ba      	adds	r2, r7, r2
   2740a:	2000      	movs	r0, #0
   2740c:	5610      	ldrsb	r0, [r2, r0]
   2740e:	22c0      	movs	r2, #192	; 0xc0
   27410:	18ba      	adds	r2, r7, r2
   27412:	2102      	movs	r1, #2
   27414:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   27416:	e240      	b.n	2789a <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   27418:	1dfb      	adds	r3, r7, #7
   2741a:	781b      	ldrb	r3, [r3, #0]
   2741c:	2b43      	cmp	r3, #67	; 0x43
   2741e:	d000      	beq.n	27422 <m2m_ip_cb+0xba>
   27420:	e086      	b.n	27530 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   27422:	23b4      	movs	r3, #180	; 0xb4
   27424:	18f9      	adds	r1, r7, r3
   27426:	6838      	ldr	r0, [r7, #0]
   27428:	2300      	movs	r3, #0
   2742a:	220c      	movs	r2, #12
   2742c:	4c72      	ldr	r4, [pc, #456]	; (275f8 <m2m_ip_cb+0x290>)
   2742e:	47a0      	blx	r4
   27430:	1e03      	subs	r3, r0, #0
   27432:	d000      	beq.n	27436 <m2m_ip_cb+0xce>
   27434:	e231      	b.n	2789a <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   27436:	23b4      	movs	r3, #180	; 0xb4
   27438:	18fb      	adds	r3, r7, r3
   2743a:	7a5b      	ldrb	r3, [r3, #9]
   2743c:	b25b      	sxtb	r3, r3
   2743e:	2b00      	cmp	r3, #0
   27440:	db4f      	blt.n	274e2 <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   27442:	23b4      	movs	r3, #180	; 0xb4
   27444:	18fb      	adds	r3, r7, r3
   27446:	7a5b      	ldrb	r3, [r3, #9]
   27448:	b25b      	sxtb	r3, r3
   2744a:	0018      	movs	r0, r3
   2744c:	23b4      	movs	r3, #180	; 0xb4
   2744e:	18fb      	adds	r3, r7, r3
   27450:	7a1b      	ldrb	r3, [r3, #8]
   27452:	b25b      	sxtb	r3, r3
   27454:	4a6a      	ldr	r2, [pc, #424]	; (27600 <m2m_ip_cb+0x298>)
   27456:	011b      	lsls	r3, r3, #4
   27458:	18d3      	adds	r3, r2, r3
   2745a:	330b      	adds	r3, #11
   2745c:	781b      	ldrb	r3, [r3, #0]
   2745e:	b2d9      	uxtb	r1, r3
   27460:	4a67      	ldr	r2, [pc, #412]	; (27600 <m2m_ip_cb+0x298>)
   27462:	0103      	lsls	r3, r0, #4
   27464:	18d3      	adds	r3, r2, r3
   27466:	330b      	adds	r3, #11
   27468:	1c0a      	adds	r2, r1, #0
   2746a:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   2746c:	23b4      	movs	r3, #180	; 0xb4
   2746e:	18fb      	adds	r3, r7, r3
   27470:	7a5b      	ldrb	r3, [r3, #9]
   27472:	b25b      	sxtb	r3, r3
   27474:	4a62      	ldr	r2, [pc, #392]	; (27600 <m2m_ip_cb+0x298>)
   27476:	011b      	lsls	r3, r3, #4
   27478:	18d3      	adds	r3, r2, r3
   2747a:	330a      	adds	r3, #10
   2747c:	2201      	movs	r2, #1
   2747e:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   27480:	23b4      	movs	r3, #180	; 0xb4
   27482:	18fb      	adds	r3, r7, r3
   27484:	7a5b      	ldrb	r3, [r3, #9]
   27486:	b25b      	sxtb	r3, r3
   27488:	0018      	movs	r0, r3
   2748a:	23b4      	movs	r3, #180	; 0xb4
   2748c:	18fb      	adds	r3, r7, r3
   2748e:	895b      	ldrh	r3, [r3, #10]
   27490:	3b08      	subs	r3, #8
   27492:	b299      	uxth	r1, r3
   27494:	4a5a      	ldr	r2, [pc, #360]	; (27600 <m2m_ip_cb+0x298>)
   27496:	0103      	lsls	r3, r0, #4
   27498:	18d3      	adds	r3, r2, r3
   2749a:	3308      	adds	r3, #8
   2749c:	1c0a      	adds	r2, r1, #0
   2749e:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   274a0:	4b58      	ldr	r3, [pc, #352]	; (27604 <m2m_ip_cb+0x29c>)
   274a2:	881b      	ldrh	r3, [r3, #0]
   274a4:	b29b      	uxth	r3, r3
   274a6:	3301      	adds	r3, #1
   274a8:	b29a      	uxth	r2, r3
   274aa:	4b56      	ldr	r3, [pc, #344]	; (27604 <m2m_ip_cb+0x29c>)
   274ac:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   274ae:	4b55      	ldr	r3, [pc, #340]	; (27604 <m2m_ip_cb+0x29c>)
   274b0:	881b      	ldrh	r3, [r3, #0]
   274b2:	b29b      	uxth	r3, r3
   274b4:	2b00      	cmp	r3, #0
   274b6:	d106      	bne.n	274c6 <m2m_ip_cb+0x15e>
					++gu16SessionID;
   274b8:	4b52      	ldr	r3, [pc, #328]	; (27604 <m2m_ip_cb+0x29c>)
   274ba:	881b      	ldrh	r3, [r3, #0]
   274bc:	b29b      	uxth	r3, r3
   274be:	3301      	adds	r3, #1
   274c0:	b29a      	uxth	r2, r3
   274c2:	4b50      	ldr	r3, [pc, #320]	; (27604 <m2m_ip_cb+0x29c>)
   274c4:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   274c6:	23b4      	movs	r3, #180	; 0xb4
   274c8:	18fb      	adds	r3, r7, r3
   274ca:	7a5b      	ldrb	r3, [r3, #9]
   274cc:	b25b      	sxtb	r3, r3
   274ce:	0018      	movs	r0, r3
   274d0:	4b4c      	ldr	r3, [pc, #304]	; (27604 <m2m_ip_cb+0x29c>)
   274d2:	881b      	ldrh	r3, [r3, #0]
   274d4:	b299      	uxth	r1, r3
   274d6:	4a4a      	ldr	r2, [pc, #296]	; (27600 <m2m_ip_cb+0x298>)
   274d8:	0103      	lsls	r3, r0, #4
   274da:	18d3      	adds	r3, r2, r3
   274dc:	3306      	adds	r3, #6
   274de:	1c0a      	adds	r2, r1, #0
   274e0:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   274e2:	23b4      	movs	r3, #180	; 0xb4
   274e4:	18fb      	adds	r3, r7, r3
   274e6:	2209      	movs	r2, #9
   274e8:	569a      	ldrsb	r2, [r3, r2]
   274ea:	23a0      	movs	r3, #160	; 0xa0
   274ec:	18fb      	adds	r3, r7, r3
   274ee:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   274f0:	23a0      	movs	r3, #160	; 0xa0
   274f2:	18fb      	adds	r3, r7, r3
   274f4:	2202      	movs	r2, #2
   274f6:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   274f8:	23b4      	movs	r3, #180	; 0xb4
   274fa:	18fb      	adds	r3, r7, r3
   274fc:	885a      	ldrh	r2, [r3, #2]
   274fe:	23a0      	movs	r3, #160	; 0xa0
   27500:	18fb      	adds	r3, r7, r3
   27502:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   27504:	23b4      	movs	r3, #180	; 0xb4
   27506:	18fb      	adds	r3, r7, r3
   27508:	685a      	ldr	r2, [r3, #4]
   2750a:	23a0      	movs	r3, #160	; 0xa0
   2750c:	18fb      	adds	r3, r7, r3
   2750e:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   27510:	4b3a      	ldr	r3, [pc, #232]	; (275fc <m2m_ip_cb+0x294>)
   27512:	681b      	ldr	r3, [r3, #0]
   27514:	2b00      	cmp	r3, #0
   27516:	d100      	bne.n	2751a <m2m_ip_cb+0x1b2>
   27518:	e1bf      	b.n	2789a <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   2751a:	4b38      	ldr	r3, [pc, #224]	; (275fc <m2m_ip_cb+0x294>)
   2751c:	681b      	ldr	r3, [r3, #0]
   2751e:	22b4      	movs	r2, #180	; 0xb4
   27520:	18ba      	adds	r2, r7, r2
   27522:	2008      	movs	r0, #8
   27524:	5610      	ldrsb	r0, [r2, r0]
   27526:	22a0      	movs	r2, #160	; 0xa0
   27528:	18ba      	adds	r2, r7, r2
   2752a:	2104      	movs	r1, #4
   2752c:	4798      	blx	r3
}
   2752e:	e1b4      	b.n	2789a <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   27530:	1dfb      	adds	r3, r7, #7
   27532:	781b      	ldrb	r3, [r3, #0]
   27534:	2b44      	cmp	r3, #68	; 0x44
   27536:	d003      	beq.n	27540 <m2m_ip_cb+0x1d8>
   27538:	1dfb      	adds	r3, r7, #7
   2753a:	781b      	ldrb	r3, [r3, #0]
   2753c:	2b4b      	cmp	r3, #75	; 0x4b
   2753e:	d13d      	bne.n	275bc <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   27540:	239c      	movs	r3, #156	; 0x9c
   27542:	18f9      	adds	r1, r7, r3
   27544:	6838      	ldr	r0, [r7, #0]
   27546:	2300      	movs	r3, #0
   27548:	2204      	movs	r2, #4
   2754a:	4c2b      	ldr	r4, [pc, #172]	; (275f8 <m2m_ip_cb+0x290>)
   2754c:	47a0      	blx	r4
   2754e:	1e03      	subs	r3, r0, #0
   27550:	d000      	beq.n	27554 <m2m_ip_cb+0x1ec>
   27552:	e19d      	b.n	27890 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   27554:	239c      	movs	r3, #156	; 0x9c
   27556:	18fb      	adds	r3, r7, r3
   27558:	2200      	movs	r2, #0
   2755a:	569a      	ldrsb	r2, [r3, r2]
   2755c:	2398      	movs	r3, #152	; 0x98
   2755e:	18fb      	adds	r3, r7, r3
   27560:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   27562:	239c      	movs	r3, #156	; 0x9c
   27564:	18fb      	adds	r3, r7, r3
   27566:	2201      	movs	r2, #1
   27568:	569a      	ldrsb	r2, [r3, r2]
   2756a:	2398      	movs	r3, #152	; 0x98
   2756c:	18fb      	adds	r3, r7, r3
   2756e:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   27570:	239c      	movs	r3, #156	; 0x9c
   27572:	18fb      	adds	r3, r7, r3
   27574:	785b      	ldrb	r3, [r3, #1]
   27576:	b25b      	sxtb	r3, r3
   27578:	2b00      	cmp	r3, #0
   2757a:	d10f      	bne.n	2759c <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   2757c:	239c      	movs	r3, #156	; 0x9c
   2757e:	18fb      	adds	r3, r7, r3
   27580:	781b      	ldrb	r3, [r3, #0]
   27582:	b25b      	sxtb	r3, r3
   27584:	0018      	movs	r0, r3
   27586:	239c      	movs	r3, #156	; 0x9c
   27588:	18fb      	adds	r3, r7, r3
   2758a:	885b      	ldrh	r3, [r3, #2]
   2758c:	3b08      	subs	r3, #8
   2758e:	b299      	uxth	r1, r3
   27590:	4a1b      	ldr	r2, [pc, #108]	; (27600 <m2m_ip_cb+0x298>)
   27592:	0103      	lsls	r3, r0, #4
   27594:	18d3      	adds	r3, r2, r3
   27596:	3308      	adds	r3, #8
   27598:	1c0a      	adds	r2, r1, #0
   2759a:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   2759c:	4b17      	ldr	r3, [pc, #92]	; (275fc <m2m_ip_cb+0x294>)
   2759e:	681b      	ldr	r3, [r3, #0]
   275a0:	2b00      	cmp	r3, #0
   275a2:	d100      	bne.n	275a6 <m2m_ip_cb+0x23e>
   275a4:	e174      	b.n	27890 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   275a6:	4b15      	ldr	r3, [pc, #84]	; (275fc <m2m_ip_cb+0x294>)
   275a8:	681b      	ldr	r3, [r3, #0]
   275aa:	229c      	movs	r2, #156	; 0x9c
   275ac:	18ba      	adds	r2, r7, r2
   275ae:	2000      	movs	r0, #0
   275b0:	5610      	ldrsb	r0, [r2, r0]
   275b2:	2298      	movs	r2, #152	; 0x98
   275b4:	18ba      	adds	r2, r7, r2
   275b6:	2105      	movs	r1, #5
   275b8:	4798      	blx	r3
	{
   275ba:	e169      	b.n	27890 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   275bc:	1dfb      	adds	r3, r7, #7
   275be:	781b      	ldrb	r3, [r3, #0]
   275c0:	2b4a      	cmp	r3, #74	; 0x4a
   275c2:	d123      	bne.n	2760c <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   275c4:	230c      	movs	r3, #12
   275c6:	18f9      	adds	r1, r7, r3
   275c8:	6838      	ldr	r0, [r7, #0]
   275ca:	2300      	movs	r3, #0
   275cc:	2244      	movs	r2, #68	; 0x44
   275ce:	4c0a      	ldr	r4, [pc, #40]	; (275f8 <m2m_ip_cb+0x290>)
   275d0:	47a0      	blx	r4
   275d2:	1e03      	subs	r3, r0, #0
   275d4:	d000      	beq.n	275d8 <m2m_ip_cb+0x270>
   275d6:	e160      	b.n	2789a <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   275d8:	4b0b      	ldr	r3, [pc, #44]	; (27608 <m2m_ip_cb+0x2a0>)
   275da:	681b      	ldr	r3, [r3, #0]
   275dc:	2b00      	cmp	r3, #0
   275de:	d100      	bne.n	275e2 <m2m_ip_cb+0x27a>
   275e0:	e15b      	b.n	2789a <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   275e2:	4b09      	ldr	r3, [pc, #36]	; (27608 <m2m_ip_cb+0x2a0>)
   275e4:	681a      	ldr	r2, [r3, #0]
   275e6:	230c      	movs	r3, #12
   275e8:	18fb      	adds	r3, r7, r3
   275ea:	6c19      	ldr	r1, [r3, #64]	; 0x40
   275ec:	230c      	movs	r3, #12
   275ee:	18fb      	adds	r3, r7, r3
   275f0:	0018      	movs	r0, r3
   275f2:	4790      	blx	r2
}
   275f4:	e151      	b.n	2789a <m2m_ip_cb+0x532>
   275f6:	46c0      	nop			; (mov r8, r8)
   275f8:	00023b65 	.word	0x00023b65
   275fc:	20005a30 	.word	0x20005a30
   27600:	20005980 	.word	0x20005980
   27604:	20004126 	.word	0x20004126
   27608:	20005a38 	.word	0x20005a38
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   2760c:	1dfb      	adds	r3, r7, #7
   2760e:	781b      	ldrb	r3, [r3, #0]
   27610:	2b46      	cmp	r3, #70	; 0x46
   27612:	d008      	beq.n	27626 <m2m_ip_cb+0x2be>
   27614:	1dfb      	adds	r3, r7, #7
   27616:	781b      	ldrb	r3, [r3, #0]
   27618:	2b48      	cmp	r3, #72	; 0x48
   2761a:	d004      	beq.n	27626 <m2m_ip_cb+0x2be>
   2761c:	1dfb      	adds	r3, r7, #7
   2761e:	781b      	ldrb	r3, [r3, #0]
   27620:	2b4d      	cmp	r3, #77	; 0x4d
   27622:	d000      	beq.n	27626 <m2m_ip_cb+0x2be>
   27624:	e0b4      	b.n	27790 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   27626:	23df      	movs	r3, #223	; 0xdf
   27628:	18fb      	adds	r3, r7, r3
   2762a:	2206      	movs	r2, #6
   2762c:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   2762e:	1dfb      	adds	r3, r7, #7
   27630:	781b      	ldrb	r3, [r3, #0]
   27632:	2b48      	cmp	r3, #72	; 0x48
   27634:	d103      	bne.n	2763e <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   27636:	23df      	movs	r3, #223	; 0xdf
   27638:	18fb      	adds	r3, r7, r3
   2763a:	2209      	movs	r2, #9
   2763c:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   2763e:	23d8      	movs	r3, #216	; 0xd8
   27640:	18fb      	adds	r3, r7, r3
   27642:	2210      	movs	r2, #16
   27644:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   27646:	23d8      	movs	r3, #216	; 0xd8
   27648:	18fb      	adds	r3, r7, r3
   2764a:	881a      	ldrh	r2, [r3, #0]
   2764c:	2388      	movs	r3, #136	; 0x88
   2764e:	18f9      	adds	r1, r7, r3
   27650:	6838      	ldr	r0, [r7, #0]
   27652:	2300      	movs	r3, #0
   27654:	4c93      	ldr	r4, [pc, #588]	; (278a4 <m2m_ip_cb+0x53c>)
   27656:	47a0      	blx	r4
   27658:	1e03      	subs	r3, r0, #0
   2765a:	d000      	beq.n	2765e <m2m_ip_cb+0x2f6>
   2765c:	e11a      	b.n	27894 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   2765e:	23d6      	movs	r3, #214	; 0xd6
   27660:	18fb      	adds	r3, r7, r3
   27662:	2200      	movs	r2, #0
   27664:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   27666:	23d5      	movs	r3, #213	; 0xd5
   27668:	18fb      	adds	r3, r7, r3
   2766a:	2288      	movs	r2, #136	; 0x88
   2766c:	18ba      	adds	r2, r7, r2
   2766e:	7b12      	ldrb	r2, [r2, #12]
   27670:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   27672:	23d6      	movs	r3, #214	; 0xd6
   27674:	18fb      	adds	r3, r7, r3
   27676:	2288      	movs	r2, #136	; 0x88
   27678:	18ba      	adds	r2, r7, r2
   2767a:	89d2      	ldrh	r2, [r2, #14]
   2767c:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   2767e:	23d5      	movs	r3, #213	; 0xd5
   27680:	18fb      	adds	r3, r7, r3
   27682:	781b      	ldrb	r3, [r3, #0]
   27684:	b25b      	sxtb	r3, r3
   27686:	4a88      	ldr	r2, [pc, #544]	; (278a8 <m2m_ip_cb+0x540>)
   27688:	011b      	lsls	r3, r3, #4
   2768a:	18d3      	adds	r3, r2, r3
   2768c:	330c      	adds	r3, #12
   2768e:	2200      	movs	r2, #0
   27690:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   27692:	23d2      	movs	r3, #210	; 0xd2
   27694:	18fb      	adds	r3, r7, r3
   27696:	2288      	movs	r2, #136	; 0x88
   27698:	18ba      	adds	r2, r7, r2
   2769a:	8912      	ldrh	r2, [r2, #8]
   2769c:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   2769e:	23d0      	movs	r3, #208	; 0xd0
   276a0:	18fb      	adds	r3, r7, r3
   276a2:	2288      	movs	r2, #136	; 0x88
   276a4:	18ba      	adds	r2, r7, r2
   276a6:	8952      	ldrh	r2, [r2, #10]
   276a8:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   276aa:	2388      	movs	r3, #136	; 0x88
   276ac:	18fb      	adds	r3, r7, r3
   276ae:	885a      	ldrh	r2, [r3, #2]
   276b0:	2370      	movs	r3, #112	; 0x70
   276b2:	18fb      	adds	r3, r7, r3
   276b4:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   276b6:	2388      	movs	r3, #136	; 0x88
   276b8:	18fb      	adds	r3, r7, r3
   276ba:	685a      	ldr	r2, [r3, #4]
   276bc:	2370      	movs	r3, #112	; 0x70
   276be:	18fb      	adds	r3, r7, r3
   276c0:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   276c2:	23d5      	movs	r3, #213	; 0xd5
   276c4:	18fb      	adds	r3, r7, r3
   276c6:	781b      	ldrb	r3, [r3, #0]
   276c8:	b25b      	sxtb	r3, r3
   276ca:	4a77      	ldr	r2, [pc, #476]	; (278a8 <m2m_ip_cb+0x540>)
   276cc:	011b      	lsls	r3, r3, #4
   276ce:	18d3      	adds	r3, r2, r3
   276d0:	3306      	adds	r3, #6
   276d2:	881b      	ldrh	r3, [r3, #0]
   276d4:	b29b      	uxth	r3, r3
   276d6:	22d6      	movs	r2, #214	; 0xd6
   276d8:	18ba      	adds	r2, r7, r2
   276da:	8812      	ldrh	r2, [r2, #0]
   276dc:	429a      	cmp	r2, r3
   276de:	d148      	bne.n	27772 <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   276e0:	23d2      	movs	r3, #210	; 0xd2
   276e2:	18fb      	adds	r3, r7, r3
   276e4:	2200      	movs	r2, #0
   276e6:	5e9b      	ldrsh	r3, [r3, r2]
   276e8:	2b00      	cmp	r3, #0
   276ea:	dd25      	ble.n	27738 <m2m_ip_cb+0x3d0>
   276ec:	23d2      	movs	r3, #210	; 0xd2
   276ee:	18fb      	adds	r3, r7, r3
   276f0:	2200      	movs	r2, #0
   276f2:	5e9a      	ldrsh	r2, [r3, r2]
   276f4:	1d3b      	adds	r3, r7, #4
   276f6:	881b      	ldrh	r3, [r3, #0]
   276f8:	429a      	cmp	r2, r3
   276fa:	da1d      	bge.n	27738 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   276fc:	23d0      	movs	r3, #208	; 0xd0
   276fe:	18fb      	adds	r3, r7, r3
   27700:	881b      	ldrh	r3, [r3, #0]
   27702:	683a      	ldr	r2, [r7, #0]
   27704:	18d3      	adds	r3, r2, r3
   27706:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   27708:	23d8      	movs	r3, #216	; 0xd8
   2770a:	18fb      	adds	r3, r7, r3
   2770c:	22d2      	movs	r2, #210	; 0xd2
   2770e:	18ba      	adds	r2, r7, r2
   27710:	8812      	ldrh	r2, [r2, #0]
   27712:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   27714:	683c      	ldr	r4, [r7, #0]
   27716:	23df      	movs	r3, #223	; 0xdf
   27718:	18fb      	adds	r3, r7, r3
   2771a:	781a      	ldrb	r2, [r3, #0]
   2771c:	2370      	movs	r3, #112	; 0x70
   2771e:	18f9      	adds	r1, r7, r3
   27720:	23d5      	movs	r3, #213	; 0xd5
   27722:	18fb      	adds	r3, r7, r3
   27724:	2000      	movs	r0, #0
   27726:	5618      	ldrsb	r0, [r3, r0]
   27728:	23d8      	movs	r3, #216	; 0xd8
   2772a:	18fb      	adds	r3, r7, r3
   2772c:	881b      	ldrh	r3, [r3, #0]
   2772e:	9300      	str	r3, [sp, #0]
   27730:	0023      	movs	r3, r4
   27732:	4c5e      	ldr	r4, [pc, #376]	; (278ac <m2m_ip_cb+0x544>)
   27734:	47a0      	blx	r4
	{
   27736:	e0ad      	b.n	27894 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   27738:	2370      	movs	r3, #112	; 0x70
   2773a:	18fb      	adds	r3, r7, r3
   2773c:	22d2      	movs	r2, #210	; 0xd2
   2773e:	18ba      	adds	r2, r7, r2
   27740:	8812      	ldrh	r2, [r2, #0]
   27742:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   27744:	2370      	movs	r3, #112	; 0x70
   27746:	18fb      	adds	r3, r7, r3
   27748:	2200      	movs	r2, #0
   2774a:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   2774c:	4b58      	ldr	r3, [pc, #352]	; (278b0 <m2m_ip_cb+0x548>)
   2774e:	681b      	ldr	r3, [r3, #0]
   27750:	2b00      	cmp	r3, #0
   27752:	d100      	bne.n	27756 <m2m_ip_cb+0x3ee>
   27754:	e09e      	b.n	27894 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   27756:	4b56      	ldr	r3, [pc, #344]	; (278b0 <m2m_ip_cb+0x548>)
   27758:	681b      	ldr	r3, [r3, #0]
   2775a:	2270      	movs	r2, #112	; 0x70
   2775c:	18bc      	adds	r4, r7, r2
   2775e:	22df      	movs	r2, #223	; 0xdf
   27760:	18ba      	adds	r2, r7, r2
   27762:	7811      	ldrb	r1, [r2, #0]
   27764:	22d5      	movs	r2, #213	; 0xd5
   27766:	18ba      	adds	r2, r7, r2
   27768:	2000      	movs	r0, #0
   2776a:	5610      	ldrsb	r0, [r2, r0]
   2776c:	0022      	movs	r2, r4
   2776e:	4798      	blx	r3
	{
   27770:	e090      	b.n	27894 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   27772:	23d8      	movs	r3, #216	; 0xd8
   27774:	18fa      	adds	r2, r7, r3
   27776:	1d3b      	adds	r3, r7, #4
   27778:	8812      	ldrh	r2, [r2, #0]
   2777a:	881b      	ldrh	r3, [r3, #0]
   2777c:	429a      	cmp	r2, r3
   2777e:	d300      	bcc.n	27782 <m2m_ip_cb+0x41a>
   27780:	e088      	b.n	27894 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   27782:	2301      	movs	r3, #1
   27784:	2200      	movs	r2, #0
   27786:	2100      	movs	r1, #0
   27788:	2000      	movs	r0, #0
   2778a:	4c46      	ldr	r4, [pc, #280]	; (278a4 <m2m_ip_cb+0x53c>)
   2778c:	47a0      	blx	r4
	{
   2778e:	e081      	b.n	27894 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   27790:	1dfb      	adds	r3, r7, #7
   27792:	781b      	ldrb	r3, [r3, #0]
   27794:	2b45      	cmp	r3, #69	; 0x45
   27796:	d007      	beq.n	277a8 <m2m_ip_cb+0x440>
   27798:	1dfb      	adds	r3, r7, #7
   2779a:	781b      	ldrb	r3, [r3, #0]
   2779c:	2b47      	cmp	r3, #71	; 0x47
   2779e:	d003      	beq.n	277a8 <m2m_ip_cb+0x440>
   277a0:	1dfb      	adds	r3, r7, #7
   277a2:	781b      	ldrb	r3, [r3, #0]
   277a4:	2b4c      	cmp	r3, #76	; 0x4c
   277a6:	d14c      	bne.n	27842 <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   277a8:	23de      	movs	r3, #222	; 0xde
   277aa:	18fb      	adds	r3, r7, r3
   277ac:	2207      	movs	r2, #7
   277ae:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   277b0:	1dfb      	adds	r3, r7, #7
   277b2:	781b      	ldrb	r3, [r3, #0]
   277b4:	2b47      	cmp	r3, #71	; 0x47
   277b6:	d103      	bne.n	277c0 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   277b8:	23de      	movs	r3, #222	; 0xde
   277ba:	18fb      	adds	r3, r7, r3
   277bc:	2208      	movs	r2, #8
   277be:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   277c0:	2364      	movs	r3, #100	; 0x64
   277c2:	18f9      	adds	r1, r7, r3
   277c4:	6838      	ldr	r0, [r7, #0]
   277c6:	2300      	movs	r3, #0
   277c8:	2208      	movs	r2, #8
   277ca:	4c36      	ldr	r4, [pc, #216]	; (278a4 <m2m_ip_cb+0x53c>)
   277cc:	47a0      	blx	r4
   277ce:	1e03      	subs	r3, r0, #0
   277d0:	d162      	bne.n	27898 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   277d2:	23dc      	movs	r3, #220	; 0xdc
   277d4:	18fb      	adds	r3, r7, r3
   277d6:	2200      	movs	r2, #0
   277d8:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   277da:	23db      	movs	r3, #219	; 0xdb
   277dc:	18fb      	adds	r3, r7, r3
   277de:	2264      	movs	r2, #100	; 0x64
   277e0:	18ba      	adds	r2, r7, r2
   277e2:	7812      	ldrb	r2, [r2, #0]
   277e4:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   277e6:	23dc      	movs	r3, #220	; 0xdc
   277e8:	18fb      	adds	r3, r7, r3
   277ea:	2264      	movs	r2, #100	; 0x64
   277ec:	18ba      	adds	r2, r7, r2
   277ee:	8892      	ldrh	r2, [r2, #4]
   277f0:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   277f2:	2364      	movs	r3, #100	; 0x64
   277f4:	18fb      	adds	r3, r7, r3
   277f6:	2202      	movs	r2, #2
   277f8:	5e9a      	ldrsh	r2, [r3, r2]
   277fa:	236e      	movs	r3, #110	; 0x6e
   277fc:	18fb      	adds	r3, r7, r3
   277fe:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   27800:	23db      	movs	r3, #219	; 0xdb
   27802:	18fb      	adds	r3, r7, r3
   27804:	781b      	ldrb	r3, [r3, #0]
   27806:	b25b      	sxtb	r3, r3
   27808:	4a27      	ldr	r2, [pc, #156]	; (278a8 <m2m_ip_cb+0x540>)
   2780a:	011b      	lsls	r3, r3, #4
   2780c:	18d3      	adds	r3, r2, r3
   2780e:	3306      	adds	r3, #6
   27810:	881b      	ldrh	r3, [r3, #0]
   27812:	b29b      	uxth	r3, r3
   27814:	22dc      	movs	r2, #220	; 0xdc
   27816:	18ba      	adds	r2, r7, r2
   27818:	8812      	ldrh	r2, [r2, #0]
   2781a:	429a      	cmp	r2, r3
   2781c:	d13c      	bne.n	27898 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   2781e:	4b24      	ldr	r3, [pc, #144]	; (278b0 <m2m_ip_cb+0x548>)
   27820:	681b      	ldr	r3, [r3, #0]
   27822:	2b00      	cmp	r3, #0
   27824:	d038      	beq.n	27898 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   27826:	4b22      	ldr	r3, [pc, #136]	; (278b0 <m2m_ip_cb+0x548>)
   27828:	681b      	ldr	r3, [r3, #0]
   2782a:	226e      	movs	r2, #110	; 0x6e
   2782c:	18bc      	adds	r4, r7, r2
   2782e:	22de      	movs	r2, #222	; 0xde
   27830:	18ba      	adds	r2, r7, r2
   27832:	7811      	ldrb	r1, [r2, #0]
   27834:	22db      	movs	r2, #219	; 0xdb
   27836:	18ba      	adds	r2, r7, r2
   27838:	2000      	movs	r0, #0
   2783a:	5610      	ldrsb	r0, [r2, r0]
   2783c:	0022      	movs	r2, r4
   2783e:	4798      	blx	r3
	{
   27840:	e02a      	b.n	27898 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   27842:	1dfb      	adds	r3, r7, #7
   27844:	781b      	ldrb	r3, [r3, #0]
   27846:	2b52      	cmp	r3, #82	; 0x52
   27848:	d127      	bne.n	2789a <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   2784a:	2350      	movs	r3, #80	; 0x50
   2784c:	18f9      	adds	r1, r7, r3
   2784e:	6838      	ldr	r0, [r7, #0]
   27850:	2301      	movs	r3, #1
   27852:	2214      	movs	r2, #20
   27854:	4c13      	ldr	r4, [pc, #76]	; (278a4 <m2m_ip_cb+0x53c>)
   27856:	47a0      	blx	r4
   27858:	1e03      	subs	r3, r0, #0
   2785a:	d11e      	bne.n	2789a <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   2785c:	2350      	movs	r3, #80	; 0x50
   2785e:	18fb      	adds	r3, r7, r3
   27860:	685b      	ldr	r3, [r3, #4]
   27862:	001a      	movs	r2, r3
   27864:	4b13      	ldr	r3, [pc, #76]	; (278b4 <m2m_ip_cb+0x54c>)
   27866:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   27868:	4b12      	ldr	r3, [pc, #72]	; (278b4 <m2m_ip_cb+0x54c>)
   2786a:	681b      	ldr	r3, [r3, #0]
   2786c:	2b00      	cmp	r3, #0
   2786e:	d014      	beq.n	2789a <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   27870:	4b10      	ldr	r3, [pc, #64]	; (278b4 <m2m_ip_cb+0x54c>)
   27872:	681c      	ldr	r4, [r3, #0]
   27874:	2350      	movs	r3, #80	; 0x50
   27876:	18fb      	adds	r3, r7, r3
   27878:	6818      	ldr	r0, [r3, #0]
   2787a:	2350      	movs	r3, #80	; 0x50
   2787c:	18fb      	adds	r3, r7, r3
   2787e:	6899      	ldr	r1, [r3, #8]
   27880:	2350      	movs	r3, #80	; 0x50
   27882:	18fb      	adds	r3, r7, r3
   27884:	7c1b      	ldrb	r3, [r3, #16]
   27886:	001a      	movs	r2, r3
   27888:	47a0      	blx	r4
}
   2788a:	e006      	b.n	2789a <m2m_ip_cb+0x532>
	{
   2788c:	46c0      	nop			; (mov r8, r8)
   2788e:	e004      	b.n	2789a <m2m_ip_cb+0x532>
	{
   27890:	46c0      	nop			; (mov r8, r8)
   27892:	e002      	b.n	2789a <m2m_ip_cb+0x532>
	{
   27894:	46c0      	nop			; (mov r8, r8)
   27896:	e000      	b.n	2789a <m2m_ip_cb+0x532>
	{
   27898:	46c0      	nop			; (mov r8, r8)
}
   2789a:	46c0      	nop			; (mov r8, r8)
   2789c:	46bd      	mov	sp, r7
   2789e:	b039      	add	sp, #228	; 0xe4
   278a0:	bd90      	pop	{r4, r7, pc}
   278a2:	46c0      	nop			; (mov r8, r8)
   278a4:	00023b65 	.word	0x00023b65
   278a8:	20005980 	.word	0x20005980
   278ac:	0002716d 	.word	0x0002716d
   278b0:	20005a30 	.word	0x20005a30
   278b4:	20005a34 	.word	0x20005a34

000278b8 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   278b8:	b580      	push	{r7, lr}
   278ba:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   278bc:	4b0c      	ldr	r3, [pc, #48]	; (278f0 <socketInit+0x38>)
   278be:	781b      	ldrb	r3, [r3, #0]
   278c0:	b2db      	uxtb	r3, r3
   278c2:	2b00      	cmp	r3, #0
   278c4:	d110      	bne.n	278e8 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   278c6:	4b0b      	ldr	r3, [pc, #44]	; (278f4 <socketInit+0x3c>)
   278c8:	22b0      	movs	r2, #176	; 0xb0
   278ca:	2100      	movs	r1, #0
   278cc:	0018      	movs	r0, r3
   278ce:	4b0a      	ldr	r3, [pc, #40]	; (278f8 <socketInit+0x40>)
   278d0:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   278d2:	4b0a      	ldr	r3, [pc, #40]	; (278fc <socketInit+0x44>)
   278d4:	0019      	movs	r1, r3
   278d6:	2002      	movs	r0, #2
   278d8:	4b09      	ldr	r3, [pc, #36]	; (27900 <socketInit+0x48>)
   278da:	4798      	blx	r3
		gbSocketInit	= 1;
   278dc:	4b04      	ldr	r3, [pc, #16]	; (278f0 <socketInit+0x38>)
   278de:	2201      	movs	r2, #1
   278e0:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   278e2:	4b08      	ldr	r3, [pc, #32]	; (27904 <socketInit+0x4c>)
   278e4:	2200      	movs	r2, #0
   278e6:	801a      	strh	r2, [r3, #0]
	}
}
   278e8:	46c0      	nop			; (mov r8, r8)
   278ea:	46bd      	mov	sp, r7
   278ec:	bd80      	pop	{r7, pc}
   278ee:	46c0      	nop			; (mov r8, r8)
   278f0:	20004128 	.word	0x20004128
   278f4:	20005980 	.word	0x20005980
   278f8:	00022fe9 	.word	0x00022fe9
   278fc:	00027369 	.word	0x00027369
   27900:	00023ce5 	.word	0x00023ce5
   27904:	20004126 	.word	0x20004126

00027908 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   27908:	b580      	push	{r7, lr}
   2790a:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   2790c:	4b0a      	ldr	r3, [pc, #40]	; (27938 <socketDeinit+0x30>)
   2790e:	22b0      	movs	r2, #176	; 0xb0
   27910:	2100      	movs	r1, #0
   27912:	0018      	movs	r0, r3
   27914:	4b09      	ldr	r3, [pc, #36]	; (2793c <socketDeinit+0x34>)
   27916:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   27918:	2100      	movs	r1, #0
   2791a:	2002      	movs	r0, #2
   2791c:	4b08      	ldr	r3, [pc, #32]	; (27940 <socketDeinit+0x38>)
   2791e:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   27920:	4b08      	ldr	r3, [pc, #32]	; (27944 <socketDeinit+0x3c>)
   27922:	2200      	movs	r2, #0
   27924:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   27926:	4b08      	ldr	r3, [pc, #32]	; (27948 <socketDeinit+0x40>)
   27928:	2200      	movs	r2, #0
   2792a:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   2792c:	4b07      	ldr	r3, [pc, #28]	; (2794c <socketDeinit+0x44>)
   2792e:	2200      	movs	r2, #0
   27930:	701a      	strb	r2, [r3, #0]
}
   27932:	46c0      	nop			; (mov r8, r8)
   27934:	46bd      	mov	sp, r7
   27936:	bd80      	pop	{r7, pc}
   27938:	20005980 	.word	0x20005980
   2793c:	00022fe9 	.word	0x00022fe9
   27940:	00023ce5 	.word	0x00023ce5
   27944:	20005a30 	.word	0x20005a30
   27948:	20005a38 	.word	0x20005a38
   2794c:	20004128 	.word	0x20004128

00027950 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   27950:	b580      	push	{r7, lr}
   27952:	b082      	sub	sp, #8
   27954:	af00      	add	r7, sp, #0
   27956:	6078      	str	r0, [r7, #4]
   27958:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   2795a:	4b05      	ldr	r3, [pc, #20]	; (27970 <registerSocketCallback+0x20>)
   2795c:	687a      	ldr	r2, [r7, #4]
   2795e:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   27960:	4b04      	ldr	r3, [pc, #16]	; (27974 <registerSocketCallback+0x24>)
   27962:	683a      	ldr	r2, [r7, #0]
   27964:	601a      	str	r2, [r3, #0]
}
   27966:	46c0      	nop			; (mov r8, r8)
   27968:	46bd      	mov	sp, r7
   2796a:	b002      	add	sp, #8
   2796c:	bd80      	pop	{r7, pc}
   2796e:	46c0      	nop			; (mov r8, r8)
   27970:	20005a30 	.word	0x20005a30
   27974:	20005a38 	.word	0x20005a38

00027978 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   27978:	b590      	push	{r4, r7, lr}
   2797a:	b08d      	sub	sp, #52	; 0x34
   2797c:	af04      	add	r7, sp, #16
   2797e:	0004      	movs	r4, r0
   27980:	0008      	movs	r0, r1
   27982:	0011      	movs	r1, r2
   27984:	1dbb      	adds	r3, r7, #6
   27986:	1c22      	adds	r2, r4, #0
   27988:	801a      	strh	r2, [r3, #0]
   2798a:	1d7b      	adds	r3, r7, #5
   2798c:	1c02      	adds	r2, r0, #0
   2798e:	701a      	strb	r2, [r3, #0]
   27990:	1d3b      	adds	r3, r7, #4
   27992:	1c0a      	adds	r2, r1, #0
   27994:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   27996:	231f      	movs	r3, #31
   27998:	18fb      	adds	r3, r7, r3
   2799a:	22ff      	movs	r2, #255	; 0xff
   2799c:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   2799e:	1dbb      	adds	r3, r7, #6
   279a0:	881b      	ldrh	r3, [r3, #0]
   279a2:	2b02      	cmp	r3, #2
   279a4:	d000      	beq.n	279a8 <socket+0x30>
   279a6:	e0ce      	b.n	27b46 <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   279a8:	1d7b      	adds	r3, r7, #5
   279aa:	781b      	ldrb	r3, [r3, #0]
   279ac:	2b01      	cmp	r3, #1
   279ae:	d135      	bne.n	27a1c <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   279b0:	231e      	movs	r3, #30
   279b2:	18fb      	adds	r3, r7, r3
   279b4:	2200      	movs	r2, #0
   279b6:	701a      	strb	r2, [r3, #0]
   279b8:	e02a      	b.n	27a10 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   279ba:	2317      	movs	r3, #23
   279bc:	18fb      	adds	r3, r7, r3
   279be:	4a66      	ldr	r2, [pc, #408]	; (27b58 <socket+0x1e0>)
   279c0:	7812      	ldrb	r2, [r2, #0]
   279c2:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   279c4:	4b64      	ldr	r3, [pc, #400]	; (27b58 <socket+0x1e0>)
   279c6:	781b      	ldrb	r3, [r3, #0]
   279c8:	b2db      	uxtb	r3, r3
   279ca:	011a      	lsls	r2, r3, #4
   279cc:	4b63      	ldr	r3, [pc, #396]	; (27b5c <socket+0x1e4>)
   279ce:	18d3      	adds	r3, r2, r3
   279d0:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   279d2:	4b61      	ldr	r3, [pc, #388]	; (27b58 <socket+0x1e0>)
   279d4:	781b      	ldrb	r3, [r3, #0]
   279d6:	b2db      	uxtb	r3, r3
   279d8:	1c5a      	adds	r2, r3, #1
   279da:	4b61      	ldr	r3, [pc, #388]	; (27b60 <socket+0x1e8>)
   279dc:	2107      	movs	r1, #7
   279de:	0010      	movs	r0, r2
   279e0:	4798      	blx	r3
   279e2:	000b      	movs	r3, r1
   279e4:	b2da      	uxtb	r2, r3
   279e6:	4b5c      	ldr	r3, [pc, #368]	; (27b58 <socket+0x1e0>)
   279e8:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   279ea:	69bb      	ldr	r3, [r7, #24]
   279ec:	7a9b      	ldrb	r3, [r3, #10]
   279ee:	b2db      	uxtb	r3, r3
   279f0:	2b00      	cmp	r3, #0
   279f2:	d106      	bne.n	27a02 <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   279f4:	231f      	movs	r3, #31
   279f6:	18fb      	adds	r3, r7, r3
   279f8:	2217      	movs	r2, #23
   279fa:	18ba      	adds	r2, r7, r2
   279fc:	7812      	ldrb	r2, [r2, #0]
   279fe:	701a      	strb	r2, [r3, #0]
					break;
   27a00:	e04c      	b.n	27a9c <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   27a02:	231e      	movs	r3, #30
   27a04:	18fb      	adds	r3, r7, r3
   27a06:	781a      	ldrb	r2, [r3, #0]
   27a08:	231e      	movs	r3, #30
   27a0a:	18fb      	adds	r3, r7, r3
   27a0c:	3201      	adds	r2, #1
   27a0e:	701a      	strb	r2, [r3, #0]
   27a10:	231e      	movs	r3, #30
   27a12:	18fb      	adds	r3, r7, r3
   27a14:	781b      	ldrb	r3, [r3, #0]
   27a16:	2b06      	cmp	r3, #6
   27a18:	d9cf      	bls.n	279ba <socket+0x42>
   27a1a:	e03f      	b.n	27a9c <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   27a1c:	1d7b      	adds	r3, r7, #5
   27a1e:	781b      	ldrb	r3, [r3, #0]
   27a20:	2b02      	cmp	r3, #2
   27a22:	d13b      	bne.n	27a9c <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   27a24:	4b4f      	ldr	r3, [pc, #316]	; (27b64 <socket+0x1ec>)
   27a26:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   27a28:	231e      	movs	r3, #30
   27a2a:	18fb      	adds	r3, r7, r3
   27a2c:	2200      	movs	r2, #0
   27a2e:	701a      	strb	r2, [r3, #0]
   27a30:	e02f      	b.n	27a92 <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   27a32:	2317      	movs	r3, #23
   27a34:	18fb      	adds	r3, r7, r3
   27a36:	4a4c      	ldr	r2, [pc, #304]	; (27b68 <socket+0x1f0>)
   27a38:	7812      	ldrb	r2, [r2, #0]
   27a3a:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   27a3c:	4b4a      	ldr	r3, [pc, #296]	; (27b68 <socket+0x1f0>)
   27a3e:	781b      	ldrb	r3, [r3, #0]
   27a40:	b2db      	uxtb	r3, r3
   27a42:	011b      	lsls	r3, r3, #4
   27a44:	693a      	ldr	r2, [r7, #16]
   27a46:	18d3      	adds	r3, r2, r3
   27a48:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   27a4a:	4b47      	ldr	r3, [pc, #284]	; (27b68 <socket+0x1f0>)
   27a4c:	781b      	ldrb	r3, [r3, #0]
   27a4e:	b2db      	uxtb	r3, r3
   27a50:	3301      	adds	r3, #1
   27a52:	4a46      	ldr	r2, [pc, #280]	; (27b6c <socket+0x1f4>)
   27a54:	4013      	ands	r3, r2
   27a56:	d504      	bpl.n	27a62 <socket+0xea>
   27a58:	3b01      	subs	r3, #1
   27a5a:	2204      	movs	r2, #4
   27a5c:	4252      	negs	r2, r2
   27a5e:	4313      	orrs	r3, r2
   27a60:	3301      	adds	r3, #1
   27a62:	b2da      	uxtb	r2, r3
   27a64:	4b40      	ldr	r3, [pc, #256]	; (27b68 <socket+0x1f0>)
   27a66:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   27a68:	69bb      	ldr	r3, [r7, #24]
   27a6a:	7a9b      	ldrb	r3, [r3, #10]
   27a6c:	b2db      	uxtb	r3, r3
   27a6e:	2b00      	cmp	r3, #0
   27a70:	d108      	bne.n	27a84 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   27a72:	2317      	movs	r3, #23
   27a74:	18fb      	adds	r3, r7, r3
   27a76:	781b      	ldrb	r3, [r3, #0]
   27a78:	3307      	adds	r3, #7
   27a7a:	b2da      	uxtb	r2, r3
   27a7c:	231f      	movs	r3, #31
   27a7e:	18fb      	adds	r3, r7, r3
   27a80:	701a      	strb	r2, [r3, #0]
					break;
   27a82:	e00b      	b.n	27a9c <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   27a84:	231e      	movs	r3, #30
   27a86:	18fb      	adds	r3, r7, r3
   27a88:	781a      	ldrb	r2, [r3, #0]
   27a8a:	231e      	movs	r3, #30
   27a8c:	18fb      	adds	r3, r7, r3
   27a8e:	3201      	adds	r2, #1
   27a90:	701a      	strb	r2, [r3, #0]
   27a92:	231e      	movs	r3, #30
   27a94:	18fb      	adds	r3, r7, r3
   27a96:	781b      	ldrb	r3, [r3, #0]
   27a98:	2b03      	cmp	r3, #3
   27a9a:	d9ca      	bls.n	27a32 <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   27a9c:	231f      	movs	r3, #31
   27a9e:	18fb      	adds	r3, r7, r3
   27aa0:	781b      	ldrb	r3, [r3, #0]
   27aa2:	2b7f      	cmp	r3, #127	; 0x7f
   27aa4:	d84f      	bhi.n	27b46 <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   27aa6:	69bb      	ldr	r3, [r7, #24]
   27aa8:	2210      	movs	r2, #16
   27aaa:	2100      	movs	r1, #0
   27aac:	0018      	movs	r0, r3
   27aae:	4b30      	ldr	r3, [pc, #192]	; (27b70 <socket+0x1f8>)
   27ab0:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   27ab2:	69bb      	ldr	r3, [r7, #24]
   27ab4:	2201      	movs	r2, #1
   27ab6:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   27ab8:	4b2e      	ldr	r3, [pc, #184]	; (27b74 <socket+0x1fc>)
   27aba:	881b      	ldrh	r3, [r3, #0]
   27abc:	b29b      	uxth	r3, r3
   27abe:	3301      	adds	r3, #1
   27ac0:	b29a      	uxth	r2, r3
   27ac2:	4b2c      	ldr	r3, [pc, #176]	; (27b74 <socket+0x1fc>)
   27ac4:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   27ac6:	4b2b      	ldr	r3, [pc, #172]	; (27b74 <socket+0x1fc>)
   27ac8:	881b      	ldrh	r3, [r3, #0]
   27aca:	b29b      	uxth	r3, r3
   27acc:	2b00      	cmp	r3, #0
   27ace:	d106      	bne.n	27ade <socket+0x166>
				++gu16SessionID;
   27ad0:	4b28      	ldr	r3, [pc, #160]	; (27b74 <socket+0x1fc>)
   27ad2:	881b      	ldrh	r3, [r3, #0]
   27ad4:	b29b      	uxth	r3, r3
   27ad6:	3301      	adds	r3, #1
   27ad8:	b29a      	uxth	r2, r3
   27ada:	4b26      	ldr	r3, [pc, #152]	; (27b74 <socket+0x1fc>)
   27adc:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   27ade:	4b25      	ldr	r3, [pc, #148]	; (27b74 <socket+0x1fc>)
   27ae0:	881b      	ldrh	r3, [r3, #0]
   27ae2:	b29a      	uxth	r2, r3
   27ae4:	69bb      	ldr	r3, [r7, #24]
   27ae6:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   27ae8:	4b23      	ldr	r3, [pc, #140]	; (27b78 <socket+0x200>)
   27aea:	0018      	movs	r0, r3
   27aec:	4b23      	ldr	r3, [pc, #140]	; (27b7c <socket+0x204>)
   27aee:	4798      	blx	r3
   27af0:	231f      	movs	r3, #31
   27af2:	18fb      	adds	r3, r7, r3
   27af4:	2100      	movs	r1, #0
   27af6:	5659      	ldrsb	r1, [r3, r1]
   27af8:	4b1e      	ldr	r3, [pc, #120]	; (27b74 <socket+0x1fc>)
   27afa:	881b      	ldrh	r3, [r3, #0]
   27afc:	b29b      	uxth	r3, r3
   27afe:	001a      	movs	r2, r3
   27b00:	4b1f      	ldr	r3, [pc, #124]	; (27b80 <socket+0x208>)
   27b02:	0018      	movs	r0, r3
   27b04:	4b1d      	ldr	r3, [pc, #116]	; (27b7c <socket+0x204>)
   27b06:	4798      	blx	r3
   27b08:	4b1e      	ldr	r3, [pc, #120]	; (27b84 <socket+0x20c>)
   27b0a:	0018      	movs	r0, r3
   27b0c:	4b1b      	ldr	r3, [pc, #108]	; (27b7c <socket+0x204>)
   27b0e:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   27b10:	1d3b      	adds	r3, r7, #4
   27b12:	781b      	ldrb	r3, [r3, #0]
   27b14:	2201      	movs	r2, #1
   27b16:	4013      	ands	r3, r2
   27b18:	d015      	beq.n	27b46 <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   27b1a:	230c      	movs	r3, #12
   27b1c:	18fb      	adds	r3, r7, r3
   27b1e:	221f      	movs	r2, #31
   27b20:	18ba      	adds	r2, r7, r2
   27b22:	7812      	ldrb	r2, [r2, #0]
   27b24:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   27b26:	69bb      	ldr	r3, [r7, #24]
   27b28:	2221      	movs	r2, #33	; 0x21
   27b2a:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   27b2c:	230c      	movs	r3, #12
   27b2e:	18fa      	adds	r2, r7, r3
   27b30:	2300      	movs	r3, #0
   27b32:	9302      	str	r3, [sp, #8]
   27b34:	2300      	movs	r3, #0
   27b36:	9301      	str	r3, [sp, #4]
   27b38:	2300      	movs	r3, #0
   27b3a:	9300      	str	r3, [sp, #0]
   27b3c:	2304      	movs	r3, #4
   27b3e:	2150      	movs	r1, #80	; 0x50
   27b40:	2002      	movs	r0, #2
   27b42:	4c11      	ldr	r4, [pc, #68]	; (27b88 <socket+0x210>)
   27b44:	47a0      	blx	r4
			}
		}
	}
	return sock;
   27b46:	231f      	movs	r3, #31
   27b48:	18fb      	adds	r3, r7, r3
   27b4a:	781b      	ldrb	r3, [r3, #0]
   27b4c:	b25b      	sxtb	r3, r3
}
   27b4e:	0018      	movs	r0, r3
   27b50:	46bd      	mov	sp, r7
   27b52:	b009      	add	sp, #36	; 0x24
   27b54:	bd90      	pop	{r4, r7, pc}
   27b56:	46c0      	nop			; (mov r8, r8)
   27b58:	20004129 	.word	0x20004129
   27b5c:	20005980 	.word	0x20005980
   27b60:	000350f5 	.word	0x000350f5
   27b64:	200059f0 	.word	0x200059f0
   27b68:	2000412a 	.word	0x2000412a
   27b6c:	80000003 	.word	0x80000003
   27b70:	00022fe9 	.word	0x00022fe9
   27b74:	20004126 	.word	0x20004126
   27b78:	0003c6b0 	.word	0x0003c6b0
   27b7c:	00020329 	.word	0x00020329
   27b80:	0003c6d4 	.word	0x0003c6d4
   27b84:	0003c6d0 	.word	0x0003c6d0
   27b88:	00023249 	.word	0x00023249

00027b8c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   27b8c:	b5b0      	push	{r4, r5, r7, lr}
   27b8e:	b08a      	sub	sp, #40	; 0x28
   27b90:	af04      	add	r7, sp, #16
   27b92:	6039      	str	r1, [r7, #0]
   27b94:	0011      	movs	r1, r2
   27b96:	1dfb      	adds	r3, r7, #7
   27b98:	1c02      	adds	r2, r0, #0
   27b9a:	701a      	strb	r2, [r3, #0]
   27b9c:	1dbb      	adds	r3, r7, #6
   27b9e:	1c0a      	adds	r2, r1, #0
   27ba0:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   27ba2:	2317      	movs	r3, #23
   27ba4:	18fb      	adds	r3, r7, r3
   27ba6:	22fa      	movs	r2, #250	; 0xfa
   27ba8:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   27baa:	1dfb      	adds	r3, r7, #7
   27bac:	781b      	ldrb	r3, [r3, #0]
   27bae:	2b7f      	cmp	r3, #127	; 0x7f
   27bb0:	d867      	bhi.n	27c82 <connect+0xf6>
   27bb2:	683b      	ldr	r3, [r7, #0]
   27bb4:	2b00      	cmp	r3, #0
   27bb6:	d064      	beq.n	27c82 <connect+0xf6>
   27bb8:	1dfb      	adds	r3, r7, #7
   27bba:	781b      	ldrb	r3, [r3, #0]
   27bbc:	b25b      	sxtb	r3, r3
   27bbe:	4a35      	ldr	r2, [pc, #212]	; (27c94 <connect+0x108>)
   27bc0:	011b      	lsls	r3, r3, #4
   27bc2:	18d3      	adds	r3, r2, r3
   27bc4:	330a      	adds	r3, #10
   27bc6:	781b      	ldrb	r3, [r3, #0]
   27bc8:	b2db      	uxtb	r3, r3
   27bca:	2b01      	cmp	r3, #1
   27bcc:	d159      	bne.n	27c82 <connect+0xf6>
   27bce:	1dbb      	adds	r3, r7, #6
   27bd0:	781b      	ldrb	r3, [r3, #0]
   27bd2:	2b00      	cmp	r3, #0
   27bd4:	d055      	beq.n	27c82 <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   27bd6:	2316      	movs	r3, #22
   27bd8:	18fb      	adds	r3, r7, r3
   27bda:	2244      	movs	r2, #68	; 0x44
   27bdc:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   27bde:	1dfb      	adds	r3, r7, #7
   27be0:	781b      	ldrb	r3, [r3, #0]
   27be2:	b25b      	sxtb	r3, r3
   27be4:	4a2b      	ldr	r2, [pc, #172]	; (27c94 <connect+0x108>)
   27be6:	011b      	lsls	r3, r3, #4
   27be8:	18d3      	adds	r3, r2, r3
   27bea:	330b      	adds	r3, #11
   27bec:	781b      	ldrb	r3, [r3, #0]
   27bee:	b2db      	uxtb	r3, r3
   27bf0:	001a      	movs	r2, r3
   27bf2:	2301      	movs	r3, #1
   27bf4:	4013      	ands	r3, r2
   27bf6:	d00f      	beq.n	27c18 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   27bf8:	2316      	movs	r3, #22
   27bfa:	18fb      	adds	r3, r7, r3
   27bfc:	224b      	movs	r2, #75	; 0x4b
   27bfe:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   27c00:	1dfb      	adds	r3, r7, #7
   27c02:	781b      	ldrb	r3, [r3, #0]
   27c04:	b25b      	sxtb	r3, r3
   27c06:	4a23      	ldr	r2, [pc, #140]	; (27c94 <connect+0x108>)
   27c08:	011b      	lsls	r3, r3, #4
   27c0a:	18d3      	adds	r3, r2, r3
   27c0c:	330b      	adds	r3, #11
   27c0e:	781b      	ldrb	r3, [r3, #0]
   27c10:	b2da      	uxtb	r2, r3
   27c12:	2308      	movs	r3, #8
   27c14:	18fb      	adds	r3, r7, r3
   27c16:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   27c18:	2308      	movs	r3, #8
   27c1a:	18fb      	adds	r3, r7, r3
   27c1c:	1dfa      	adds	r2, r7, #7
   27c1e:	7812      	ldrb	r2, [r2, #0]
   27c20:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   27c22:	6839      	ldr	r1, [r7, #0]
   27c24:	2308      	movs	r3, #8
   27c26:	18fb      	adds	r3, r7, r3
   27c28:	2208      	movs	r2, #8
   27c2a:	0018      	movs	r0, r3
   27c2c:	4b1a      	ldr	r3, [pc, #104]	; (27c98 <connect+0x10c>)
   27c2e:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   27c30:	1dfb      	adds	r3, r7, #7
   27c32:	781b      	ldrb	r3, [r3, #0]
   27c34:	b25b      	sxtb	r3, r3
   27c36:	4a17      	ldr	r2, [pc, #92]	; (27c94 <connect+0x108>)
   27c38:	011b      	lsls	r3, r3, #4
   27c3a:	18d3      	adds	r3, r2, r3
   27c3c:	3306      	adds	r3, #6
   27c3e:	881b      	ldrh	r3, [r3, #0]
   27c40:	b29a      	uxth	r2, r3
   27c42:	2308      	movs	r3, #8
   27c44:	18fb      	adds	r3, r7, r3
   27c46:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   27c48:	2317      	movs	r3, #23
   27c4a:	18fc      	adds	r4, r7, r3
   27c4c:	2308      	movs	r3, #8
   27c4e:	18fa      	adds	r2, r7, r3
   27c50:	2316      	movs	r3, #22
   27c52:	18fb      	adds	r3, r7, r3
   27c54:	7819      	ldrb	r1, [r3, #0]
   27c56:	2300      	movs	r3, #0
   27c58:	9302      	str	r3, [sp, #8]
   27c5a:	2300      	movs	r3, #0
   27c5c:	9301      	str	r3, [sp, #4]
   27c5e:	2300      	movs	r3, #0
   27c60:	9300      	str	r3, [sp, #0]
   27c62:	230c      	movs	r3, #12
   27c64:	2002      	movs	r0, #2
   27c66:	4d0d      	ldr	r5, [pc, #52]	; (27c9c <connect+0x110>)
   27c68:	47a8      	blx	r5
   27c6a:	0003      	movs	r3, r0
   27c6c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   27c6e:	2317      	movs	r3, #23
   27c70:	18fb      	adds	r3, r7, r3
   27c72:	781b      	ldrb	r3, [r3, #0]
   27c74:	b25b      	sxtb	r3, r3
   27c76:	2b00      	cmp	r3, #0
   27c78:	d003      	beq.n	27c82 <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   27c7a:	2317      	movs	r3, #23
   27c7c:	18fb      	adds	r3, r7, r3
   27c7e:	22f7      	movs	r2, #247	; 0xf7
   27c80:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   27c82:	2317      	movs	r3, #23
   27c84:	18fb      	adds	r3, r7, r3
   27c86:	781b      	ldrb	r3, [r3, #0]
   27c88:	b25b      	sxtb	r3, r3
}
   27c8a:	0018      	movs	r0, r3
   27c8c:	46bd      	mov	sp, r7
   27c8e:	b006      	add	sp, #24
   27c90:	bdb0      	pop	{r4, r5, r7, pc}
   27c92:	46c0      	nop			; (mov r8, r8)
   27c94:	20005980 	.word	0x20005980
   27c98:	00022fad 	.word	0x00022fad
   27c9c:	00023249 	.word	0x00023249

00027ca0 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   27ca0:	b590      	push	{r4, r7, lr}
   27ca2:	b08f      	sub	sp, #60	; 0x3c
   27ca4:	af04      	add	r7, sp, #16
   27ca6:	0004      	movs	r4, r0
   27ca8:	60b9      	str	r1, [r7, #8]
   27caa:	0010      	movs	r0, r2
   27cac:	0019      	movs	r1, r3
   27cae:	230f      	movs	r3, #15
   27cb0:	18fb      	adds	r3, r7, r3
   27cb2:	1c22      	adds	r2, r4, #0
   27cb4:	701a      	strb	r2, [r3, #0]
   27cb6:	230c      	movs	r3, #12
   27cb8:	18fb      	adds	r3, r7, r3
   27cba:	1c02      	adds	r2, r0, #0
   27cbc:	801a      	strh	r2, [r3, #0]
   27cbe:	1dbb      	adds	r3, r7, #6
   27cc0:	1c0a      	adds	r2, r1, #0
   27cc2:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   27cc4:	2326      	movs	r3, #38	; 0x26
   27cc6:	18fb      	adds	r3, r7, r3
   27cc8:	2206      	movs	r2, #6
   27cca:	4252      	negs	r2, r2
   27ccc:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   27cce:	230f      	movs	r3, #15
   27cd0:	18fb      	adds	r3, r7, r3
   27cd2:	781b      	ldrb	r3, [r3, #0]
   27cd4:	2b7f      	cmp	r3, #127	; 0x7f
   27cd6:	d900      	bls.n	27cda <send+0x3a>
   27cd8:	e087      	b.n	27dea <send+0x14a>
   27cda:	68bb      	ldr	r3, [r7, #8]
   27cdc:	2b00      	cmp	r3, #0
   27cde:	d100      	bne.n	27ce2 <send+0x42>
   27ce0:	e083      	b.n	27dea <send+0x14a>
   27ce2:	230c      	movs	r3, #12
   27ce4:	18fb      	adds	r3, r7, r3
   27ce6:	881a      	ldrh	r2, [r3, #0]
   27ce8:	23af      	movs	r3, #175	; 0xaf
   27cea:	00db      	lsls	r3, r3, #3
   27cec:	429a      	cmp	r2, r3
   27cee:	d900      	bls.n	27cf2 <send+0x52>
   27cf0:	e07b      	b.n	27dea <send+0x14a>
   27cf2:	230f      	movs	r3, #15
   27cf4:	18fb      	adds	r3, r7, r3
   27cf6:	781b      	ldrb	r3, [r3, #0]
   27cf8:	b25b      	sxtb	r3, r3
   27cfa:	4a40      	ldr	r2, [pc, #256]	; (27dfc <send+0x15c>)
   27cfc:	011b      	lsls	r3, r3, #4
   27cfe:	18d3      	adds	r3, r2, r3
   27d00:	330a      	adds	r3, #10
   27d02:	781b      	ldrb	r3, [r3, #0]
   27d04:	b2db      	uxtb	r3, r3
   27d06:	2b01      	cmp	r3, #1
   27d08:	d16f      	bne.n	27dea <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   27d0a:	2323      	movs	r3, #35	; 0x23
   27d0c:	18fb      	adds	r3, r7, r3
   27d0e:	2245      	movs	r2, #69	; 0x45
   27d10:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   27d12:	2324      	movs	r3, #36	; 0x24
   27d14:	18fb      	adds	r3, r7, r3
   27d16:	2250      	movs	r2, #80	; 0x50
   27d18:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   27d1a:	2310      	movs	r3, #16
   27d1c:	18fb      	adds	r3, r7, r3
   27d1e:	220f      	movs	r2, #15
   27d20:	18ba      	adds	r2, r7, r2
   27d22:	7812      	ldrb	r2, [r2, #0]
   27d24:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   27d26:	2310      	movs	r3, #16
   27d28:	18fb      	adds	r3, r7, r3
   27d2a:	220c      	movs	r2, #12
   27d2c:	18ba      	adds	r2, r7, r2
   27d2e:	8812      	ldrh	r2, [r2, #0]
   27d30:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   27d32:	230f      	movs	r3, #15
   27d34:	18fb      	adds	r3, r7, r3
   27d36:	781b      	ldrb	r3, [r3, #0]
   27d38:	b25b      	sxtb	r3, r3
   27d3a:	4a30      	ldr	r2, [pc, #192]	; (27dfc <send+0x15c>)
   27d3c:	011b      	lsls	r3, r3, #4
   27d3e:	18d3      	adds	r3, r2, r3
   27d40:	3306      	adds	r3, #6
   27d42:	881b      	ldrh	r3, [r3, #0]
   27d44:	b29a      	uxth	r2, r3
   27d46:	2310      	movs	r3, #16
   27d48:	18fb      	adds	r3, r7, r3
   27d4a:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   27d4c:	230f      	movs	r3, #15
   27d4e:	18fb      	adds	r3, r7, r3
   27d50:	781b      	ldrb	r3, [r3, #0]
   27d52:	b25b      	sxtb	r3, r3
   27d54:	2b06      	cmp	r3, #6
   27d56:	dd03      	ble.n	27d60 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   27d58:	2324      	movs	r3, #36	; 0x24
   27d5a:	18fb      	adds	r3, r7, r3
   27d5c:	2244      	movs	r2, #68	; 0x44
   27d5e:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   27d60:	230f      	movs	r3, #15
   27d62:	18fb      	adds	r3, r7, r3
   27d64:	781b      	ldrb	r3, [r3, #0]
   27d66:	b25b      	sxtb	r3, r3
   27d68:	4a24      	ldr	r2, [pc, #144]	; (27dfc <send+0x15c>)
   27d6a:	011b      	lsls	r3, r3, #4
   27d6c:	18d3      	adds	r3, r2, r3
   27d6e:	330b      	adds	r3, #11
   27d70:	781b      	ldrb	r3, [r3, #0]
   27d72:	b2db      	uxtb	r3, r3
   27d74:	001a      	movs	r2, r3
   27d76:	2301      	movs	r3, #1
   27d78:	4013      	ands	r3, r2
   27d7a:	d00f      	beq.n	27d9c <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   27d7c:	2323      	movs	r3, #35	; 0x23
   27d7e:	18fb      	adds	r3, r7, r3
   27d80:	224c      	movs	r2, #76	; 0x4c
   27d82:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   27d84:	230f      	movs	r3, #15
   27d86:	18fb      	adds	r3, r7, r3
   27d88:	2200      	movs	r2, #0
   27d8a:	569a      	ldrsb	r2, [r3, r2]
   27d8c:	2324      	movs	r3, #36	; 0x24
   27d8e:	18fb      	adds	r3, r7, r3
   27d90:	491a      	ldr	r1, [pc, #104]	; (27dfc <send+0x15c>)
   27d92:	0112      	lsls	r2, r2, #4
   27d94:	188a      	adds	r2, r1, r2
   27d96:	3208      	adds	r2, #8
   27d98:	8812      	ldrh	r2, [r2, #0]
   27d9a:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   27d9c:	2323      	movs	r3, #35	; 0x23
   27d9e:	18fb      	adds	r3, r7, r3
   27da0:	781b      	ldrb	r3, [r3, #0]
   27da2:	2280      	movs	r2, #128	; 0x80
   27da4:	4252      	negs	r2, r2
   27da6:	4313      	orrs	r3, r2
   27da8:	b2d9      	uxtb	r1, r3
   27daa:	2310      	movs	r3, #16
   27dac:	18fa      	adds	r2, r7, r3
   27dae:	2324      	movs	r3, #36	; 0x24
   27db0:	18fb      	adds	r3, r7, r3
   27db2:	881b      	ldrh	r3, [r3, #0]
   27db4:	9302      	str	r3, [sp, #8]
   27db6:	230c      	movs	r3, #12
   27db8:	18fb      	adds	r3, r7, r3
   27dba:	881b      	ldrh	r3, [r3, #0]
   27dbc:	9301      	str	r3, [sp, #4]
   27dbe:	68bb      	ldr	r3, [r7, #8]
   27dc0:	9300      	str	r3, [sp, #0]
   27dc2:	2310      	movs	r3, #16
   27dc4:	2002      	movs	r0, #2
   27dc6:	4c0e      	ldr	r4, [pc, #56]	; (27e00 <send+0x160>)
   27dc8:	47a0      	blx	r4
   27dca:	0003      	movs	r3, r0
   27dcc:	001a      	movs	r2, r3
   27dce:	2326      	movs	r3, #38	; 0x26
   27dd0:	18fb      	adds	r3, r7, r3
   27dd2:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   27dd4:	2326      	movs	r3, #38	; 0x26
   27dd6:	18fb      	adds	r3, r7, r3
   27dd8:	2200      	movs	r2, #0
   27dda:	5e9b      	ldrsh	r3, [r3, r2]
   27ddc:	2b00      	cmp	r3, #0
   27dde:	d004      	beq.n	27dea <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   27de0:	2326      	movs	r3, #38	; 0x26
   27de2:	18fb      	adds	r3, r7, r3
   27de4:	220e      	movs	r2, #14
   27de6:	4252      	negs	r2, r2
   27de8:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   27dea:	2326      	movs	r3, #38	; 0x26
   27dec:	18fb      	adds	r3, r7, r3
   27dee:	2200      	movs	r2, #0
   27df0:	5e9b      	ldrsh	r3, [r3, r2]
}
   27df2:	0018      	movs	r0, r3
   27df4:	46bd      	mov	sp, r7
   27df6:	b00b      	add	sp, #44	; 0x2c
   27df8:	bd90      	pop	{r4, r7, pc}
   27dfa:	46c0      	nop			; (mov r8, r8)
   27dfc:	20005980 	.word	0x20005980
   27e00:	00023249 	.word	0x00023249

00027e04 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   27e04:	b590      	push	{r4, r7, lr}
   27e06:	b08d      	sub	sp, #52	; 0x34
   27e08:	af04      	add	r7, sp, #16
   27e0a:	60b9      	str	r1, [r7, #8]
   27e0c:	0011      	movs	r1, r2
   27e0e:	607b      	str	r3, [r7, #4]
   27e10:	230f      	movs	r3, #15
   27e12:	18fb      	adds	r3, r7, r3
   27e14:	1c02      	adds	r2, r0, #0
   27e16:	701a      	strb	r2, [r3, #0]
   27e18:	230c      	movs	r3, #12
   27e1a:	18fb      	adds	r3, r7, r3
   27e1c:	1c0a      	adds	r2, r1, #0
   27e1e:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   27e20:	231e      	movs	r3, #30
   27e22:	18fb      	adds	r3, r7, r3
   27e24:	2206      	movs	r2, #6
   27e26:	4252      	negs	r2, r2
   27e28:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   27e2a:	230f      	movs	r3, #15
   27e2c:	18fb      	adds	r3, r7, r3
   27e2e:	781b      	ldrb	r3, [r3, #0]
   27e30:	2b7f      	cmp	r3, #127	; 0x7f
   27e32:	d900      	bls.n	27e36 <recv+0x32>
   27e34:	e099      	b.n	27f6a <recv+0x166>
   27e36:	68bb      	ldr	r3, [r7, #8]
   27e38:	2b00      	cmp	r3, #0
   27e3a:	d100      	bne.n	27e3e <recv+0x3a>
   27e3c:	e095      	b.n	27f6a <recv+0x166>
   27e3e:	230c      	movs	r3, #12
   27e40:	18fb      	adds	r3, r7, r3
   27e42:	881b      	ldrh	r3, [r3, #0]
   27e44:	2b00      	cmp	r3, #0
   27e46:	d100      	bne.n	27e4a <recv+0x46>
   27e48:	e08f      	b.n	27f6a <recv+0x166>
   27e4a:	230f      	movs	r3, #15
   27e4c:	18fb      	adds	r3, r7, r3
   27e4e:	781b      	ldrb	r3, [r3, #0]
   27e50:	b25b      	sxtb	r3, r3
   27e52:	4a4a      	ldr	r2, [pc, #296]	; (27f7c <recv+0x178>)
   27e54:	011b      	lsls	r3, r3, #4
   27e56:	18d3      	adds	r3, r2, r3
   27e58:	330a      	adds	r3, #10
   27e5a:	781b      	ldrb	r3, [r3, #0]
   27e5c:	b2db      	uxtb	r3, r3
   27e5e:	2b01      	cmp	r3, #1
   27e60:	d000      	beq.n	27e64 <recv+0x60>
   27e62:	e082      	b.n	27f6a <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   27e64:	231e      	movs	r3, #30
   27e66:	18fb      	adds	r3, r7, r3
   27e68:	2200      	movs	r2, #0
   27e6a:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   27e6c:	230f      	movs	r3, #15
   27e6e:	18fb      	adds	r3, r7, r3
   27e70:	2200      	movs	r2, #0
   27e72:	569a      	ldrsb	r2, [r3, r2]
   27e74:	4b41      	ldr	r3, [pc, #260]	; (27f7c <recv+0x178>)
   27e76:	0112      	lsls	r2, r2, #4
   27e78:	68b9      	ldr	r1, [r7, #8]
   27e7a:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   27e7c:	230f      	movs	r3, #15
   27e7e:	18fb      	adds	r3, r7, r3
   27e80:	781b      	ldrb	r3, [r3, #0]
   27e82:	b25b      	sxtb	r3, r3
   27e84:	4a3d      	ldr	r2, [pc, #244]	; (27f7c <recv+0x178>)
   27e86:	011b      	lsls	r3, r3, #4
   27e88:	18d3      	adds	r3, r2, r3
   27e8a:	3304      	adds	r3, #4
   27e8c:	220c      	movs	r2, #12
   27e8e:	18ba      	adds	r2, r7, r2
   27e90:	8812      	ldrh	r2, [r2, #0]
   27e92:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   27e94:	230f      	movs	r3, #15
   27e96:	18fb      	adds	r3, r7, r3
   27e98:	781b      	ldrb	r3, [r3, #0]
   27e9a:	b25b      	sxtb	r3, r3
   27e9c:	4a37      	ldr	r2, [pc, #220]	; (27f7c <recv+0x178>)
   27e9e:	011b      	lsls	r3, r3, #4
   27ea0:	18d3      	adds	r3, r2, r3
   27ea2:	330c      	adds	r3, #12
   27ea4:	781b      	ldrb	r3, [r3, #0]
   27ea6:	b2db      	uxtb	r3, r3
   27ea8:	2b00      	cmp	r3, #0
   27eaa:	d15e      	bne.n	27f6a <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   27eac:	231d      	movs	r3, #29
   27eae:	18fb      	adds	r3, r7, r3
   27eb0:	2246      	movs	r2, #70	; 0x46
   27eb2:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   27eb4:	230f      	movs	r3, #15
   27eb6:	18fb      	adds	r3, r7, r3
   27eb8:	781b      	ldrb	r3, [r3, #0]
   27eba:	b25b      	sxtb	r3, r3
   27ebc:	4a2f      	ldr	r2, [pc, #188]	; (27f7c <recv+0x178>)
   27ebe:	011b      	lsls	r3, r3, #4
   27ec0:	18d3      	adds	r3, r2, r3
   27ec2:	330c      	adds	r3, #12
   27ec4:	2201      	movs	r2, #1
   27ec6:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   27ec8:	230f      	movs	r3, #15
   27eca:	18fb      	adds	r3, r7, r3
   27ecc:	781b      	ldrb	r3, [r3, #0]
   27ece:	b25b      	sxtb	r3, r3
   27ed0:	4a2a      	ldr	r2, [pc, #168]	; (27f7c <recv+0x178>)
   27ed2:	011b      	lsls	r3, r3, #4
   27ed4:	18d3      	adds	r3, r2, r3
   27ed6:	330b      	adds	r3, #11
   27ed8:	781b      	ldrb	r3, [r3, #0]
   27eda:	b2db      	uxtb	r3, r3
   27edc:	001a      	movs	r2, r3
   27ede:	2301      	movs	r3, #1
   27ee0:	4013      	ands	r3, r2
   27ee2:	d003      	beq.n	27eec <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   27ee4:	231d      	movs	r3, #29
   27ee6:	18fb      	adds	r3, r7, r3
   27ee8:	224d      	movs	r2, #77	; 0x4d
   27eea:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   27eec:	687b      	ldr	r3, [r7, #4]
   27eee:	2b00      	cmp	r3, #0
   27ef0:	d105      	bne.n	27efe <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   27ef2:	2314      	movs	r3, #20
   27ef4:	18fb      	adds	r3, r7, r3
   27ef6:	2201      	movs	r2, #1
   27ef8:	4252      	negs	r2, r2
   27efa:	601a      	str	r2, [r3, #0]
   27efc:	e003      	b.n	27f06 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   27efe:	2314      	movs	r3, #20
   27f00:	18fb      	adds	r3, r7, r3
   27f02:	687a      	ldr	r2, [r7, #4]
   27f04:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   27f06:	2314      	movs	r3, #20
   27f08:	18fb      	adds	r3, r7, r3
   27f0a:	220f      	movs	r2, #15
   27f0c:	18ba      	adds	r2, r7, r2
   27f0e:	7812      	ldrb	r2, [r2, #0]
   27f10:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   27f12:	230f      	movs	r3, #15
   27f14:	18fb      	adds	r3, r7, r3
   27f16:	781b      	ldrb	r3, [r3, #0]
   27f18:	b25b      	sxtb	r3, r3
   27f1a:	4a18      	ldr	r2, [pc, #96]	; (27f7c <recv+0x178>)
   27f1c:	011b      	lsls	r3, r3, #4
   27f1e:	18d3      	adds	r3, r2, r3
   27f20:	3306      	adds	r3, #6
   27f22:	881b      	ldrh	r3, [r3, #0]
   27f24:	b29a      	uxth	r2, r3
   27f26:	2314      	movs	r3, #20
   27f28:	18fb      	adds	r3, r7, r3
   27f2a:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   27f2c:	2314      	movs	r3, #20
   27f2e:	18fa      	adds	r2, r7, r3
   27f30:	231d      	movs	r3, #29
   27f32:	18fb      	adds	r3, r7, r3
   27f34:	7819      	ldrb	r1, [r3, #0]
   27f36:	2300      	movs	r3, #0
   27f38:	9302      	str	r3, [sp, #8]
   27f3a:	2300      	movs	r3, #0
   27f3c:	9301      	str	r3, [sp, #4]
   27f3e:	2300      	movs	r3, #0
   27f40:	9300      	str	r3, [sp, #0]
   27f42:	2308      	movs	r3, #8
   27f44:	2002      	movs	r0, #2
   27f46:	4c0e      	ldr	r4, [pc, #56]	; (27f80 <recv+0x17c>)
   27f48:	47a0      	blx	r4
   27f4a:	0003      	movs	r3, r0
   27f4c:	001a      	movs	r2, r3
   27f4e:	231e      	movs	r3, #30
   27f50:	18fb      	adds	r3, r7, r3
   27f52:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   27f54:	231e      	movs	r3, #30
   27f56:	18fb      	adds	r3, r7, r3
   27f58:	2200      	movs	r2, #0
   27f5a:	5e9b      	ldrsh	r3, [r3, r2]
   27f5c:	2b00      	cmp	r3, #0
   27f5e:	d004      	beq.n	27f6a <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   27f60:	231e      	movs	r3, #30
   27f62:	18fb      	adds	r3, r7, r3
   27f64:	220e      	movs	r2, #14
   27f66:	4252      	negs	r2, r2
   27f68:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   27f6a:	231e      	movs	r3, #30
   27f6c:	18fb      	adds	r3, r7, r3
   27f6e:	2200      	movs	r2, #0
   27f70:	5e9b      	ldrsh	r3, [r3, r2]
}
   27f72:	0018      	movs	r0, r3
   27f74:	46bd      	mov	sp, r7
   27f76:	b009      	add	sp, #36	; 0x24
   27f78:	bd90      	pop	{r4, r7, pc}
   27f7a:	46c0      	nop			; (mov r8, r8)
   27f7c:	20005980 	.word	0x20005980
   27f80:	00023249 	.word	0x00023249

00027f84 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   27f84:	b5b0      	push	{r4, r5, r7, lr}
   27f86:	b088      	sub	sp, #32
   27f88:	af04      	add	r7, sp, #16
   27f8a:	0002      	movs	r2, r0
   27f8c:	1dfb      	adds	r3, r7, #7
   27f8e:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   27f90:	230f      	movs	r3, #15
   27f92:	18fb      	adds	r3, r7, r3
   27f94:	22fa      	movs	r2, #250	; 0xfa
   27f96:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   27f98:	4b43      	ldr	r3, [pc, #268]	; (280a8 <close+0x124>)
   27f9a:	0018      	movs	r0, r3
   27f9c:	4b43      	ldr	r3, [pc, #268]	; (280ac <close+0x128>)
   27f9e:	4798      	blx	r3
   27fa0:	1dfb      	adds	r3, r7, #7
   27fa2:	2200      	movs	r2, #0
   27fa4:	569a      	ldrsb	r2, [r3, r2]
   27fa6:	4b42      	ldr	r3, [pc, #264]	; (280b0 <close+0x12c>)
   27fa8:	0011      	movs	r1, r2
   27faa:	0018      	movs	r0, r3
   27fac:	4b3f      	ldr	r3, [pc, #252]	; (280ac <close+0x128>)
   27fae:	4798      	blx	r3
   27fb0:	4b40      	ldr	r3, [pc, #256]	; (280b4 <close+0x130>)
   27fb2:	0018      	movs	r0, r3
   27fb4:	4b3d      	ldr	r3, [pc, #244]	; (280ac <close+0x128>)
   27fb6:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   27fb8:	1dfb      	adds	r3, r7, #7
   27fba:	781b      	ldrb	r3, [r3, #0]
   27fbc:	2b7f      	cmp	r3, #127	; 0x7f
   27fbe:	d86a      	bhi.n	28096 <close+0x112>
   27fc0:	1dfb      	adds	r3, r7, #7
   27fc2:	781b      	ldrb	r3, [r3, #0]
   27fc4:	b25b      	sxtb	r3, r3
   27fc6:	4a3c      	ldr	r2, [pc, #240]	; (280b8 <close+0x134>)
   27fc8:	011b      	lsls	r3, r3, #4
   27fca:	18d3      	adds	r3, r2, r3
   27fcc:	330a      	adds	r3, #10
   27fce:	781b      	ldrb	r3, [r3, #0]
   27fd0:	b2db      	uxtb	r3, r3
   27fd2:	2b01      	cmp	r3, #1
   27fd4:	d15f      	bne.n	28096 <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   27fd6:	230e      	movs	r3, #14
   27fd8:	18fb      	adds	r3, r7, r3
   27fda:	2249      	movs	r2, #73	; 0x49
   27fdc:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   27fde:	2308      	movs	r3, #8
   27fe0:	18fb      	adds	r3, r7, r3
   27fe2:	1dfa      	adds	r2, r7, #7
   27fe4:	7812      	ldrb	r2, [r2, #0]
   27fe6:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   27fe8:	1dfb      	adds	r3, r7, #7
   27fea:	781b      	ldrb	r3, [r3, #0]
   27fec:	b25b      	sxtb	r3, r3
   27fee:	4a32      	ldr	r2, [pc, #200]	; (280b8 <close+0x134>)
   27ff0:	011b      	lsls	r3, r3, #4
   27ff2:	18d3      	adds	r3, r2, r3
   27ff4:	3306      	adds	r3, #6
   27ff6:	881b      	ldrh	r3, [r3, #0]
   27ff8:	b29a      	uxth	r2, r3
   27ffa:	2308      	movs	r3, #8
   27ffc:	18fb      	adds	r3, r7, r3
   27ffe:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   28000:	1dfb      	adds	r3, r7, #7
   28002:	781b      	ldrb	r3, [r3, #0]
   28004:	b25b      	sxtb	r3, r3
   28006:	4a2c      	ldr	r2, [pc, #176]	; (280b8 <close+0x134>)
   28008:	011b      	lsls	r3, r3, #4
   2800a:	18d3      	adds	r3, r2, r3
   2800c:	330a      	adds	r3, #10
   2800e:	2200      	movs	r2, #0
   28010:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   28012:	1dfb      	adds	r3, r7, #7
   28014:	781b      	ldrb	r3, [r3, #0]
   28016:	b25b      	sxtb	r3, r3
   28018:	4a27      	ldr	r2, [pc, #156]	; (280b8 <close+0x134>)
   2801a:	011b      	lsls	r3, r3, #4
   2801c:	18d3      	adds	r3, r2, r3
   2801e:	3306      	adds	r3, #6
   28020:	2200      	movs	r2, #0
   28022:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   28024:	1dfb      	adds	r3, r7, #7
   28026:	781b      	ldrb	r3, [r3, #0]
   28028:	b25b      	sxtb	r3, r3
   2802a:	4a23      	ldr	r2, [pc, #140]	; (280b8 <close+0x134>)
   2802c:	011b      	lsls	r3, r3, #4
   2802e:	18d3      	adds	r3, r2, r3
   28030:	330b      	adds	r3, #11
   28032:	781b      	ldrb	r3, [r3, #0]
   28034:	b2db      	uxtb	r3, r3
   28036:	001a      	movs	r2, r3
   28038:	2301      	movs	r3, #1
   2803a:	4013      	ands	r3, r2
   2803c:	d003      	beq.n	28046 <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   2803e:	230e      	movs	r3, #14
   28040:	18fb      	adds	r3, r7, r3
   28042:	224e      	movs	r2, #78	; 0x4e
   28044:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   28046:	230f      	movs	r3, #15
   28048:	18fc      	adds	r4, r7, r3
   2804a:	2308      	movs	r3, #8
   2804c:	18fa      	adds	r2, r7, r3
   2804e:	230e      	movs	r3, #14
   28050:	18fb      	adds	r3, r7, r3
   28052:	7819      	ldrb	r1, [r3, #0]
   28054:	2300      	movs	r3, #0
   28056:	9302      	str	r3, [sp, #8]
   28058:	2300      	movs	r3, #0
   2805a:	9301      	str	r3, [sp, #4]
   2805c:	2300      	movs	r3, #0
   2805e:	9300      	str	r3, [sp, #0]
   28060:	2304      	movs	r3, #4
   28062:	2002      	movs	r0, #2
   28064:	4d15      	ldr	r5, [pc, #84]	; (280bc <close+0x138>)
   28066:	47a8      	blx	r5
   28068:	0003      	movs	r3, r0
   2806a:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   2806c:	230f      	movs	r3, #15
   2806e:	18fb      	adds	r3, r7, r3
   28070:	781b      	ldrb	r3, [r3, #0]
   28072:	b25b      	sxtb	r3, r3
   28074:	2b00      	cmp	r3, #0
   28076:	d003      	beq.n	28080 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   28078:	230f      	movs	r3, #15
   2807a:	18fb      	adds	r3, r7, r3
   2807c:	22f7      	movs	r2, #247	; 0xf7
   2807e:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   28080:	1dfb      	adds	r3, r7, #7
   28082:	781b      	ldrb	r3, [r3, #0]
   28084:	b25b      	sxtb	r3, r3
   28086:	011a      	lsls	r2, r3, #4
   28088:	4b0b      	ldr	r3, [pc, #44]	; (280b8 <close+0x134>)
   2808a:	18d3      	adds	r3, r2, r3
   2808c:	2210      	movs	r2, #16
   2808e:	2100      	movs	r1, #0
   28090:	0018      	movs	r0, r3
   28092:	4b0b      	ldr	r3, [pc, #44]	; (280c0 <close+0x13c>)
   28094:	4798      	blx	r3
	}
	return s8Ret;
   28096:	230f      	movs	r3, #15
   28098:	18fb      	adds	r3, r7, r3
   2809a:	781b      	ldrb	r3, [r3, #0]
   2809c:	b25b      	sxtb	r3, r3
}
   2809e:	0018      	movs	r0, r3
   280a0:	46bd      	mov	sp, r7
   280a2:	b004      	add	sp, #16
   280a4:	bdb0      	pop	{r4, r5, r7, pc}
   280a6:	46c0      	nop			; (mov r8, r8)
   280a8:	0003c6b0 	.word	0x0003c6b0
   280ac:	00020329 	.word	0x00020329
   280b0:	0003c6f0 	.word	0x0003c6f0
   280b4:	0003c6d0 	.word	0x0003c6d0
   280b8:	20005980 	.word	0x20005980
   280bc:	00023249 	.word	0x00023249
   280c0:	00022fe9 	.word	0x00022fe9

000280c4 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   280c4:	b580      	push	{r7, lr}
   280c6:	b086      	sub	sp, #24
   280c8:	af00      	add	r7, sp, #0
   280ca:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   280cc:	2300      	movs	r3, #0
   280ce:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   280d0:	2317      	movs	r3, #23
   280d2:	18fb      	adds	r3, r7, r3
   280d4:	2200      	movs	r2, #0
   280d6:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   280d8:	2316      	movs	r3, #22
   280da:	18fb      	adds	r3, r7, r3
   280dc:	2200      	movs	r2, #0
   280de:	701a      	strb	r2, [r3, #0]
   280e0:	e060      	b.n	281a4 <nmi_inet_addr+0xe0>
	{
		j = 0;
   280e2:	2315      	movs	r3, #21
   280e4:	18fb      	adds	r3, r7, r3
   280e6:	2200      	movs	r2, #0
   280e8:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   280ea:	2314      	movs	r3, #20
   280ec:	18fb      	adds	r3, r7, r3
   280ee:	687a      	ldr	r2, [r7, #4]
   280f0:	7812      	ldrb	r2, [r2, #0]
   280f2:	701a      	strb	r2, [r3, #0]
			++j;
   280f4:	2315      	movs	r3, #21
   280f6:	18fb      	adds	r3, r7, r3
   280f8:	2215      	movs	r2, #21
   280fa:	18ba      	adds	r2, r7, r2
   280fc:	7812      	ldrb	r2, [r2, #0]
   280fe:	3201      	adds	r2, #1
   28100:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   28102:	2315      	movs	r3, #21
   28104:	18fb      	adds	r3, r7, r3
   28106:	781b      	ldrb	r3, [r3, #0]
   28108:	2b04      	cmp	r3, #4
   2810a:	d901      	bls.n	28110 <nmi_inet_addr+0x4c>
			{
				return 0;
   2810c:	2300      	movs	r3, #0
   2810e:	e057      	b.n	281c0 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   28110:	2314      	movs	r3, #20
   28112:	18fb      	adds	r3, r7, r3
   28114:	781b      	ldrb	r3, [r3, #0]
   28116:	2b2e      	cmp	r3, #46	; 0x2e
   28118:	d004      	beq.n	28124 <nmi_inet_addr+0x60>
   2811a:	2314      	movs	r3, #20
   2811c:	18fb      	adds	r3, r7, r3
   2811e:	781b      	ldrb	r3, [r3, #0]
   28120:	2b00      	cmp	r3, #0
   28122:	d10d      	bne.n	28140 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   28124:	2316      	movs	r3, #22
   28126:	18fb      	adds	r3, r7, r3
   28128:	781b      	ldrb	r3, [r3, #0]
   2812a:	220c      	movs	r2, #12
   2812c:	18ba      	adds	r2, r7, r2
   2812e:	2117      	movs	r1, #23
   28130:	1879      	adds	r1, r7, r1
   28132:	7809      	ldrb	r1, [r1, #0]
   28134:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   28136:	2317      	movs	r3, #23
   28138:	18fb      	adds	r3, r7, r3
   2813a:	2200      	movs	r2, #0
   2813c:	701a      	strb	r2, [r3, #0]
   2813e:	e01d      	b.n	2817c <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   28140:	2314      	movs	r3, #20
   28142:	18fb      	adds	r3, r7, r3
   28144:	781b      	ldrb	r3, [r3, #0]
   28146:	2b2f      	cmp	r3, #47	; 0x2f
   28148:	d916      	bls.n	28178 <nmi_inet_addr+0xb4>
   2814a:	2314      	movs	r3, #20
   2814c:	18fb      	adds	r3, r7, r3
   2814e:	781b      	ldrb	r3, [r3, #0]
   28150:	2b39      	cmp	r3, #57	; 0x39
   28152:	d811      	bhi.n	28178 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   28154:	2317      	movs	r3, #23
   28156:	18fb      	adds	r3, r7, r3
   28158:	781b      	ldrb	r3, [r3, #0]
   2815a:	1c1a      	adds	r2, r3, #0
   2815c:	0092      	lsls	r2, r2, #2
   2815e:	18d3      	adds	r3, r2, r3
   28160:	18db      	adds	r3, r3, r3
   28162:	b2da      	uxtb	r2, r3
   28164:	2314      	movs	r3, #20
   28166:	18fb      	adds	r3, r7, r3
   28168:	781b      	ldrb	r3, [r3, #0]
   2816a:	18d3      	adds	r3, r2, r3
   2816c:	b2da      	uxtb	r2, r3
   2816e:	2317      	movs	r3, #23
   28170:	18fb      	adds	r3, r7, r3
   28172:	3a30      	subs	r2, #48	; 0x30
   28174:	701a      	strb	r2, [r3, #0]
   28176:	e001      	b.n	2817c <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   28178:	2300      	movs	r3, #0
   2817a:	e021      	b.n	281c0 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   2817c:	687b      	ldr	r3, [r7, #4]
   2817e:	3301      	adds	r3, #1
   28180:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   28182:	2314      	movs	r3, #20
   28184:	18fb      	adds	r3, r7, r3
   28186:	781b      	ldrb	r3, [r3, #0]
   28188:	2b2e      	cmp	r3, #46	; 0x2e
   2818a:	d004      	beq.n	28196 <nmi_inet_addr+0xd2>
   2818c:	2314      	movs	r3, #20
   2818e:	18fb      	adds	r3, r7, r3
   28190:	781b      	ldrb	r3, [r3, #0]
   28192:	2b00      	cmp	r3, #0
   28194:	d1a9      	bne.n	280ea <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   28196:	2316      	movs	r3, #22
   28198:	18fb      	adds	r3, r7, r3
   2819a:	2216      	movs	r2, #22
   2819c:	18ba      	adds	r2, r7, r2
   2819e:	7812      	ldrb	r2, [r2, #0]
   281a0:	3201      	adds	r2, #1
   281a2:	701a      	strb	r2, [r3, #0]
   281a4:	2316      	movs	r3, #22
   281a6:	18fb      	adds	r3, r7, r3
   281a8:	781b      	ldrb	r3, [r3, #0]
   281aa:	2b03      	cmp	r3, #3
   281ac:	d999      	bls.n	280e2 <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   281ae:	230c      	movs	r3, #12
   281b0:	18f9      	adds	r1, r7, r3
   281b2:	2310      	movs	r3, #16
   281b4:	18fb      	adds	r3, r7, r3
   281b6:	2204      	movs	r2, #4
   281b8:	0018      	movs	r0, r3
   281ba:	4b03      	ldr	r3, [pc, #12]	; (281c8 <nmi_inet_addr+0x104>)
   281bc:	4798      	blx	r3
	return u32IP;
   281be:	693b      	ldr	r3, [r7, #16]
}
   281c0:	0018      	movs	r0, r3
   281c2:	46bd      	mov	sp, r7
   281c4:	b006      	add	sp, #24
   281c6:	bd80      	pop	{r7, pc}
   281c8:	00022fad 	.word	0x00022fad

000281cc <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   281cc:	b5b0      	push	{r4, r5, r7, lr}
   281ce:	b088      	sub	sp, #32
   281d0:	af04      	add	r7, sp, #16
   281d2:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   281d4:	230f      	movs	r3, #15
   281d6:	18fb      	adds	r3, r7, r3
   281d8:	22fa      	movs	r2, #250	; 0xfa
   281da:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   281dc:	687b      	ldr	r3, [r7, #4]
   281de:	0018      	movs	r0, r3
   281e0:	4b14      	ldr	r3, [pc, #80]	; (28234 <gethostbyname+0x68>)
   281e2:	4798      	blx	r3
   281e4:	0003      	movs	r3, r0
   281e6:	001a      	movs	r2, r3
   281e8:	230e      	movs	r3, #14
   281ea:	18fb      	adds	r3, r7, r3
   281ec:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   281ee:	230e      	movs	r3, #14
   281f0:	18fb      	adds	r3, r7, r3
   281f2:	781b      	ldrb	r3, [r3, #0]
   281f4:	2b40      	cmp	r3, #64	; 0x40
   281f6:	d815      	bhi.n	28224 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   281f8:	230e      	movs	r3, #14
   281fa:	18fb      	adds	r3, r7, r3
   281fc:	781b      	ldrb	r3, [r3, #0]
   281fe:	b29b      	uxth	r3, r3
   28200:	3301      	adds	r3, #1
   28202:	b299      	uxth	r1, r3
   28204:	230f      	movs	r3, #15
   28206:	18fc      	adds	r4, r7, r3
   28208:	687a      	ldr	r2, [r7, #4]
   2820a:	2300      	movs	r3, #0
   2820c:	9302      	str	r3, [sp, #8]
   2820e:	2300      	movs	r3, #0
   28210:	9301      	str	r3, [sp, #4]
   28212:	2300      	movs	r3, #0
   28214:	9300      	str	r3, [sp, #0]
   28216:	000b      	movs	r3, r1
   28218:	214a      	movs	r1, #74	; 0x4a
   2821a:	2002      	movs	r0, #2
   2821c:	4d06      	ldr	r5, [pc, #24]	; (28238 <gethostbyname+0x6c>)
   2821e:	47a8      	blx	r5
   28220:	0003      	movs	r3, r0
   28222:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   28224:	230f      	movs	r3, #15
   28226:	18fb      	adds	r3, r7, r3
   28228:	781b      	ldrb	r3, [r3, #0]
   2822a:	b25b      	sxtb	r3, r3
}
   2822c:	0018      	movs	r0, r3
   2822e:	46bd      	mov	sp, r7
   28230:	b004      	add	sp, #16
   28232:	bdb0      	pop	{r4, r5, r7, pc}
   28234:	00023027 	.word	0x00023027
   28238:	00023249 	.word	0x00023249

0002823c <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   2823c:	b580      	push	{r7, lr}
   2823e:	b082      	sub	sp, #8
   28240:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   28242:	003b      	movs	r3, r7
   28244:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   28246:	687b      	ldr	r3, [r7, #4]
   28248:	22b9      	movs	r2, #185	; 0xb9
   2824a:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   2824c:	4b13      	ldr	r3, [pc, #76]	; (2829c <spi_flash_enter_low_power_mode+0x60>)
   2824e:	2100      	movs	r1, #0
   28250:	0018      	movs	r0, r3
   28252:	4b13      	ldr	r3, [pc, #76]	; (282a0 <spi_flash_enter_low_power_mode+0x64>)
   28254:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   28256:	687b      	ldr	r3, [r7, #4]
   28258:	781b      	ldrb	r3, [r3, #0]
   2825a:	001a      	movs	r2, r3
   2825c:	4b11      	ldr	r3, [pc, #68]	; (282a4 <spi_flash_enter_low_power_mode+0x68>)
   2825e:	0011      	movs	r1, r2
   28260:	0018      	movs	r0, r3
   28262:	4b0f      	ldr	r3, [pc, #60]	; (282a0 <spi_flash_enter_low_power_mode+0x64>)
   28264:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   28266:	4b10      	ldr	r3, [pc, #64]	; (282a8 <spi_flash_enter_low_power_mode+0x6c>)
   28268:	2101      	movs	r1, #1
   2826a:	0018      	movs	r0, r3
   2826c:	4b0c      	ldr	r3, [pc, #48]	; (282a0 <spi_flash_enter_low_power_mode+0x64>)
   2826e:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   28270:	4b0e      	ldr	r3, [pc, #56]	; (282ac <spi_flash_enter_low_power_mode+0x70>)
   28272:	2100      	movs	r1, #0
   28274:	0018      	movs	r0, r3
   28276:	4b0a      	ldr	r3, [pc, #40]	; (282a0 <spi_flash_enter_low_power_mode+0x64>)
   28278:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   2827a:	4b0d      	ldr	r3, [pc, #52]	; (282b0 <spi_flash_enter_low_power_mode+0x74>)
   2827c:	2181      	movs	r1, #129	; 0x81
   2827e:	0018      	movs	r0, r3
   28280:	4b07      	ldr	r3, [pc, #28]	; (282a0 <spi_flash_enter_low_power_mode+0x64>)
   28282:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   28284:	46c0      	nop			; (mov r8, r8)
   28286:	4b0b      	ldr	r3, [pc, #44]	; (282b4 <spi_flash_enter_low_power_mode+0x78>)
   28288:	0018      	movs	r0, r3
   2828a:	4b0b      	ldr	r3, [pc, #44]	; (282b8 <spi_flash_enter_low_power_mode+0x7c>)
   2828c:	4798      	blx	r3
   2828e:	0003      	movs	r3, r0
   28290:	2b01      	cmp	r3, #1
   28292:	d1f8      	bne.n	28286 <spi_flash_enter_low_power_mode+0x4a>
}
   28294:	46c0      	nop			; (mov r8, r8)
   28296:	46bd      	mov	sp, r7
   28298:	b002      	add	sp, #8
   2829a:	bd80      	pop	{r7, pc}
   2829c:	00010208 	.word	0x00010208
   282a0:	0002509d 	.word	0x0002509d
   282a4:	0001020c 	.word	0x0001020c
   282a8:	00010214 	.word	0x00010214
   282ac:	0001021c 	.word	0x0001021c
   282b0:	00010204 	.word	0x00010204
   282b4:	00010218 	.word	0x00010218
   282b8:	00025059 	.word	0x00025059

000282bc <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   282bc:	b580      	push	{r7, lr}
   282be:	b082      	sub	sp, #8
   282c0:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   282c2:	003b      	movs	r3, r7
   282c4:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   282c6:	687b      	ldr	r3, [r7, #4]
   282c8:	22ab      	movs	r2, #171	; 0xab
   282ca:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   282cc:	4b13      	ldr	r3, [pc, #76]	; (2831c <spi_flash_leave_low_power_mode+0x60>)
   282ce:	2100      	movs	r1, #0
   282d0:	0018      	movs	r0, r3
   282d2:	4b13      	ldr	r3, [pc, #76]	; (28320 <spi_flash_leave_low_power_mode+0x64>)
   282d4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   282d6:	687b      	ldr	r3, [r7, #4]
   282d8:	781b      	ldrb	r3, [r3, #0]
   282da:	001a      	movs	r2, r3
   282dc:	4b11      	ldr	r3, [pc, #68]	; (28324 <spi_flash_leave_low_power_mode+0x68>)
   282de:	0011      	movs	r1, r2
   282e0:	0018      	movs	r0, r3
   282e2:	4b0f      	ldr	r3, [pc, #60]	; (28320 <spi_flash_leave_low_power_mode+0x64>)
   282e4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   282e6:	4b10      	ldr	r3, [pc, #64]	; (28328 <spi_flash_leave_low_power_mode+0x6c>)
   282e8:	2101      	movs	r1, #1
   282ea:	0018      	movs	r0, r3
   282ec:	4b0c      	ldr	r3, [pc, #48]	; (28320 <spi_flash_leave_low_power_mode+0x64>)
   282ee:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   282f0:	4b0e      	ldr	r3, [pc, #56]	; (2832c <spi_flash_leave_low_power_mode+0x70>)
   282f2:	2100      	movs	r1, #0
   282f4:	0018      	movs	r0, r3
   282f6:	4b0a      	ldr	r3, [pc, #40]	; (28320 <spi_flash_leave_low_power_mode+0x64>)
   282f8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   282fa:	4b0d      	ldr	r3, [pc, #52]	; (28330 <spi_flash_leave_low_power_mode+0x74>)
   282fc:	2181      	movs	r1, #129	; 0x81
   282fe:	0018      	movs	r0, r3
   28300:	4b07      	ldr	r3, [pc, #28]	; (28320 <spi_flash_leave_low_power_mode+0x64>)
   28302:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   28304:	46c0      	nop			; (mov r8, r8)
   28306:	4b0b      	ldr	r3, [pc, #44]	; (28334 <spi_flash_leave_low_power_mode+0x78>)
   28308:	0018      	movs	r0, r3
   2830a:	4b0b      	ldr	r3, [pc, #44]	; (28338 <spi_flash_leave_low_power_mode+0x7c>)
   2830c:	4798      	blx	r3
   2830e:	0003      	movs	r3, r0
   28310:	2b01      	cmp	r3, #1
   28312:	d1f8      	bne.n	28306 <spi_flash_leave_low_power_mode+0x4a>
}
   28314:	46c0      	nop			; (mov r8, r8)
   28316:	46bd      	mov	sp, r7
   28318:	b002      	add	sp, #8
   2831a:	bd80      	pop	{r7, pc}
   2831c:	00010208 	.word	0x00010208
   28320:	0002509d 	.word	0x0002509d
   28324:	0001020c 	.word	0x0001020c
   28328:	00010214 	.word	0x00010214
   2832c:	0001021c 	.word	0x0001021c
   28330:	00010204 	.word	0x00010204
   28334:	00010218 	.word	0x00010218
   28338:	00025059 	.word	0x00025059

0002833c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   2833c:	b590      	push	{r4, r7, lr}
   2833e:	b085      	sub	sp, #20
   28340:	af00      	add	r7, sp, #0
   28342:	0002      	movs	r2, r0
   28344:	1dfb      	adds	r3, r7, #7
   28346:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   28348:	230f      	movs	r3, #15
   2834a:	18fb      	adds	r3, r7, r3
   2834c:	2200      	movs	r2, #0
   2834e:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   28350:	4b24      	ldr	r3, [pc, #144]	; (283e4 <spi_flash_enable+0xa8>)
   28352:	4798      	blx	r3
   28354:	0003      	movs	r3, r0
   28356:	051b      	lsls	r3, r3, #20
   28358:	0d1b      	lsrs	r3, r3, #20
   2835a:	4a23      	ldr	r2, [pc, #140]	; (283e8 <spi_flash_enable+0xac>)
   2835c:	4293      	cmp	r3, r2
   2835e:	d938      	bls.n	283d2 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   28360:	230f      	movs	r3, #15
   28362:	18fc      	adds	r4, r7, r3
   28364:	2308      	movs	r3, #8
   28366:	18fb      	adds	r3, r7, r3
   28368:	4a20      	ldr	r2, [pc, #128]	; (283ec <spi_flash_enable+0xb0>)
   2836a:	0019      	movs	r1, r3
   2836c:	0010      	movs	r0, r2
   2836e:	4b20      	ldr	r3, [pc, #128]	; (283f0 <spi_flash_enable+0xb4>)
   28370:	4798      	blx	r3
   28372:	0003      	movs	r3, r0
   28374:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   28376:	230f      	movs	r3, #15
   28378:	18fb      	adds	r3, r7, r3
   2837a:	781b      	ldrb	r3, [r3, #0]
   2837c:	b25b      	sxtb	r3, r3
   2837e:	2b00      	cmp	r3, #0
   28380:	d126      	bne.n	283d0 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   28382:	68bb      	ldr	r3, [r7, #8]
   28384:	4a1b      	ldr	r2, [pc, #108]	; (283f4 <spi_flash_enable+0xb8>)
   28386:	4013      	ands	r3, r2
   28388:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   2838a:	68bb      	ldr	r3, [r7, #8]
   2838c:	4a1a      	ldr	r2, [pc, #104]	; (283f8 <spi_flash_enable+0xbc>)
   2838e:	4313      	orrs	r3, r2
   28390:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   28392:	68bb      	ldr	r3, [r7, #8]
   28394:	4a15      	ldr	r2, [pc, #84]	; (283ec <spi_flash_enable+0xb0>)
   28396:	0019      	movs	r1, r3
   28398:	0010      	movs	r0, r2
   2839a:	4b18      	ldr	r3, [pc, #96]	; (283fc <spi_flash_enable+0xc0>)
   2839c:	4798      	blx	r3
		if(enable) {
   2839e:	1dfb      	adds	r3, r7, #7
   283a0:	781b      	ldrb	r3, [r3, #0]
   283a2:	2b00      	cmp	r3, #0
   283a4:	d002      	beq.n	283ac <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   283a6:	4b16      	ldr	r3, [pc, #88]	; (28400 <spi_flash_enable+0xc4>)
   283a8:	4798      	blx	r3
   283aa:	e001      	b.n	283b0 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   283ac:	4b15      	ldr	r3, [pc, #84]	; (28404 <spi_flash_enable+0xc8>)
   283ae:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   283b0:	68bb      	ldr	r3, [r7, #8]
   283b2:	4a10      	ldr	r2, [pc, #64]	; (283f4 <spi_flash_enable+0xb8>)
   283b4:	4013      	ands	r3, r2
   283b6:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   283b8:	68bb      	ldr	r3, [r7, #8]
   283ba:	2280      	movs	r2, #128	; 0x80
   283bc:	0252      	lsls	r2, r2, #9
   283be:	4313      	orrs	r3, r2
   283c0:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   283c2:	68bb      	ldr	r3, [r7, #8]
   283c4:	4a09      	ldr	r2, [pc, #36]	; (283ec <spi_flash_enable+0xb0>)
   283c6:	0019      	movs	r1, r3
   283c8:	0010      	movs	r0, r2
   283ca:	4b0c      	ldr	r3, [pc, #48]	; (283fc <spi_flash_enable+0xc0>)
   283cc:	4798      	blx	r3
   283ce:	e000      	b.n	283d2 <spi_flash_enable+0x96>
			goto ERR1;
   283d0:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   283d2:	230f      	movs	r3, #15
   283d4:	18fb      	adds	r3, r7, r3
   283d6:	781b      	ldrb	r3, [r3, #0]
   283d8:	b25b      	sxtb	r3, r3
}
   283da:	0018      	movs	r0, r3
   283dc:	46bd      	mov	sp, r7
   283de:	b005      	add	sp, #20
   283e0:	bd90      	pop	{r4, r7, pc}
   283e2:	46c0      	nop			; (mov r8, r8)
   283e4:	00024979 	.word	0x00024979
   283e8:	0000039f 	.word	0x0000039f
   283ec:	00001410 	.word	0x00001410
   283f0:	00025079 	.word	0x00025079
   283f4:	f8888fff 	.word	0xf8888fff
   283f8:	01111000 	.word	0x01111000
   283fc:	0002509d 	.word	0x0002509d
   28400:	000282bd 	.word	0x000282bd
   28404:	0002823d 	.word	0x0002823d

00028408 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   28408:	b580      	push	{r7, lr}
   2840a:	b084      	sub	sp, #16
   2840c:	af00      	add	r7, sp, #0
   2840e:	0002      	movs	r2, r0
   28410:	1dfb      	adds	r3, r7, #7
   28412:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   28414:	1dfb      	adds	r3, r7, #7
   28416:	781b      	ldrb	r3, [r3, #0]
   28418:	2b00      	cmp	r3, #0
   2841a:	d108      	bne.n	2842e <mem_test_unit_ready+0x26>
   2841c:	1dfb      	adds	r3, r7, #7
   2841e:	781a      	ldrb	r2, [r3, #0]
   28420:	4b08      	ldr	r3, [pc, #32]	; (28444 <mem_test_unit_ready+0x3c>)
   28422:	0152      	lsls	r2, r2, #5
   28424:	58d3      	ldr	r3, [r2, r3]
   28426:	4798      	blx	r3
   28428:	0003      	movs	r3, r0
   2842a:	001a      	movs	r2, r3
   2842c:	e000      	b.n	28430 <mem_test_unit_ready+0x28>
   2842e:	2201      	movs	r2, #1
  status =
   28430:	230f      	movs	r3, #15
   28432:	18fb      	adds	r3, r7, r3
   28434:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   28436:	230f      	movs	r3, #15
   28438:	18fb      	adds	r3, r7, r3
   2843a:	781b      	ldrb	r3, [r3, #0]
}
   2843c:	0018      	movs	r0, r3
   2843e:	46bd      	mov	sp, r7
   28440:	b004      	add	sp, #16
   28442:	bd80      	pop	{r7, pc}
   28444:	0003c77c 	.word	0x0003c77c

00028448 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   28448:	b580      	push	{r7, lr}
   2844a:	b084      	sub	sp, #16
   2844c:	af00      	add	r7, sp, #0
   2844e:	0002      	movs	r2, r0
   28450:	6039      	str	r1, [r7, #0]
   28452:	1dfb      	adds	r3, r7, #7
   28454:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   28456:	1dfb      	adds	r3, r7, #7
   28458:	781b      	ldrb	r3, [r3, #0]
   2845a:	2b00      	cmp	r3, #0
   2845c:	d10c      	bne.n	28478 <mem_read_capacity+0x30>
   2845e:	1dfb      	adds	r3, r7, #7
   28460:	781b      	ldrb	r3, [r3, #0]
   28462:	4a0b      	ldr	r2, [pc, #44]	; (28490 <mem_read_capacity+0x48>)
   28464:	015b      	lsls	r3, r3, #5
   28466:	18d3      	adds	r3, r2, r3
   28468:	3304      	adds	r3, #4
   2846a:	681b      	ldr	r3, [r3, #0]
   2846c:	683a      	ldr	r2, [r7, #0]
   2846e:	0010      	movs	r0, r2
   28470:	4798      	blx	r3
   28472:	0003      	movs	r3, r0
   28474:	001a      	movs	r2, r3
   28476:	e000      	b.n	2847a <mem_read_capacity+0x32>
   28478:	2201      	movs	r2, #1
  status =
   2847a:	230f      	movs	r3, #15
   2847c:	18fb      	adds	r3, r7, r3
   2847e:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   28480:	230f      	movs	r3, #15
   28482:	18fb      	adds	r3, r7, r3
   28484:	781b      	ldrb	r3, [r3, #0]
}
   28486:	0018      	movs	r0, r3
   28488:	46bd      	mov	sp, r7
   2848a:	b004      	add	sp, #16
   2848c:	bd80      	pop	{r7, pc}
   2848e:	46c0      	nop			; (mov r8, r8)
   28490:	0003c77c 	.word	0x0003c77c

00028494 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   28494:	b580      	push	{r7, lr}
   28496:	b084      	sub	sp, #16
   28498:	af00      	add	r7, sp, #0
   2849a:	0002      	movs	r2, r0
   2849c:	1dfb      	adds	r3, r7, #7
   2849e:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   284a0:	1dfb      	adds	r3, r7, #7
   284a2:	781b      	ldrb	r3, [r3, #0]
   284a4:	425a      	negs	r2, r3
   284a6:	4153      	adcs	r3, r2
   284a8:	b2da      	uxtb	r2, r3
  sector_size =
   284aa:	230f      	movs	r3, #15
   284ac:	18fb      	adds	r3, r7, r3
   284ae:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   284b0:	230f      	movs	r3, #15
   284b2:	18fb      	adds	r3, r7, r3
   284b4:	781b      	ldrb	r3, [r3, #0]
}
   284b6:	0018      	movs	r0, r3
   284b8:	46bd      	mov	sp, r7
   284ba:	b004      	add	sp, #16
   284bc:	bd80      	pop	{r7, pc}
	...

000284c0 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   284c0:	b580      	push	{r7, lr}
   284c2:	b084      	sub	sp, #16
   284c4:	af00      	add	r7, sp, #0
   284c6:	0002      	movs	r2, r0
   284c8:	1dfb      	adds	r3, r7, #7
   284ca:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   284cc:	1dfb      	adds	r3, r7, #7
   284ce:	781b      	ldrb	r3, [r3, #0]
   284d0:	2b00      	cmp	r3, #0
   284d2:	d109      	bne.n	284e8 <mem_wr_protect+0x28>
   284d4:	1dfb      	adds	r3, r7, #7
   284d6:	781b      	ldrb	r3, [r3, #0]
   284d8:	4a0a      	ldr	r2, [pc, #40]	; (28504 <mem_wr_protect+0x44>)
   284da:	015b      	lsls	r3, r3, #5
   284dc:	18d3      	adds	r3, r2, r3
   284de:	330c      	adds	r3, #12
   284e0:	681b      	ldr	r3, [r3, #0]
   284e2:	4798      	blx	r3
   284e4:	1e03      	subs	r3, r0, #0
   284e6:	d001      	beq.n	284ec <mem_wr_protect+0x2c>
   284e8:	2201      	movs	r2, #1
   284ea:	e000      	b.n	284ee <mem_wr_protect+0x2e>
   284ec:	2200      	movs	r2, #0
  wr_protect =
   284ee:	230f      	movs	r3, #15
   284f0:	18fb      	adds	r3, r7, r3
   284f2:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   284f4:	230f      	movs	r3, #15
   284f6:	18fb      	adds	r3, r7, r3
   284f8:	781b      	ldrb	r3, [r3, #0]
}
   284fa:	0018      	movs	r0, r3
   284fc:	46bd      	mov	sp, r7
   284fe:	b004      	add	sp, #16
   28500:	bd80      	pop	{r7, pc}
   28502:	46c0      	nop			; (mov r8, r8)
   28504:	0003c77c 	.word	0x0003c77c

00028508 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   28508:	b580      	push	{r7, lr}
   2850a:	b086      	sub	sp, #24
   2850c:	af00      	add	r7, sp, #0
   2850e:	60b9      	str	r1, [r7, #8]
   28510:	607a      	str	r2, [r7, #4]
   28512:	230f      	movs	r3, #15
   28514:	18fb      	adds	r3, r7, r3
   28516:	1c02      	adds	r2, r0, #0
   28518:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   2851a:	230f      	movs	r3, #15
   2851c:	18fb      	adds	r3, r7, r3
   2851e:	781b      	ldrb	r3, [r3, #0]
   28520:	2b00      	cmp	r3, #0
   28522:	d10e      	bne.n	28542 <memory_2_ram+0x3a>
   28524:	230f      	movs	r3, #15
   28526:	18fb      	adds	r3, r7, r3
   28528:	781b      	ldrb	r3, [r3, #0]
   2852a:	4a0b      	ldr	r2, [pc, #44]	; (28558 <memory_2_ram+0x50>)
   2852c:	015b      	lsls	r3, r3, #5
   2852e:	18d3      	adds	r3, r2, r3
   28530:	3314      	adds	r3, #20
   28532:	681b      	ldr	r3, [r3, #0]
   28534:	6879      	ldr	r1, [r7, #4]
   28536:	68ba      	ldr	r2, [r7, #8]
   28538:	0010      	movs	r0, r2
   2853a:	4798      	blx	r3
   2853c:	0003      	movs	r3, r0
   2853e:	001a      	movs	r2, r3
   28540:	e000      	b.n	28544 <memory_2_ram+0x3c>
   28542:	2201      	movs	r2, #1
  status =
   28544:	2317      	movs	r3, #23
   28546:	18fb      	adds	r3, r7, r3
   28548:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   2854a:	2317      	movs	r3, #23
   2854c:	18fb      	adds	r3, r7, r3
   2854e:	781b      	ldrb	r3, [r3, #0]
}
   28550:	0018      	movs	r0, r3
   28552:	46bd      	mov	sp, r7
   28554:	b006      	add	sp, #24
   28556:	bd80      	pop	{r7, pc}
   28558:	0003c77c 	.word	0x0003c77c

0002855c <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   2855c:	b580      	push	{r7, lr}
   2855e:	b086      	sub	sp, #24
   28560:	af00      	add	r7, sp, #0
   28562:	60b9      	str	r1, [r7, #8]
   28564:	607a      	str	r2, [r7, #4]
   28566:	230f      	movs	r3, #15
   28568:	18fb      	adds	r3, r7, r3
   2856a:	1c02      	adds	r2, r0, #0
   2856c:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   2856e:	230f      	movs	r3, #15
   28570:	18fb      	adds	r3, r7, r3
   28572:	781b      	ldrb	r3, [r3, #0]
   28574:	2b00      	cmp	r3, #0
   28576:	d10e      	bne.n	28596 <ram_2_memory+0x3a>
   28578:	230f      	movs	r3, #15
   2857a:	18fb      	adds	r3, r7, r3
   2857c:	781b      	ldrb	r3, [r3, #0]
   2857e:	4a0b      	ldr	r2, [pc, #44]	; (285ac <ram_2_memory+0x50>)
   28580:	015b      	lsls	r3, r3, #5
   28582:	18d3      	adds	r3, r2, r3
   28584:	3318      	adds	r3, #24
   28586:	681b      	ldr	r3, [r3, #0]
   28588:	6879      	ldr	r1, [r7, #4]
   2858a:	68ba      	ldr	r2, [r7, #8]
   2858c:	0010      	movs	r0, r2
   2858e:	4798      	blx	r3
   28590:	0003      	movs	r3, r0
   28592:	001a      	movs	r2, r3
   28594:	e000      	b.n	28598 <ram_2_memory+0x3c>
   28596:	2201      	movs	r2, #1
  status =
   28598:	2317      	movs	r3, #23
   2859a:	18fb      	adds	r3, r7, r3
   2859c:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   2859e:	2317      	movs	r3, #23
   285a0:	18fb      	adds	r3, r7, r3
   285a2:	781b      	ldrb	r3, [r3, #0]
}
   285a4:	0018      	movs	r0, r3
   285a6:	46bd      	mov	sp, r7
   285a8:	b006      	add	sp, #24
   285aa:	bd80      	pop	{r7, pc}
   285ac:	0003c77c 	.word	0x0003c77c

000285b0 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   285b0:	b580      	push	{r7, lr}
   285b2:	b082      	sub	sp, #8
   285b4:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   285b6:	4b10      	ldr	r3, [pc, #64]	; (285f8 <cpu_irq_enter_critical+0x48>)
   285b8:	681b      	ldr	r3, [r3, #0]
   285ba:	2b00      	cmp	r3, #0
   285bc:	d112      	bne.n	285e4 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   285be:	f3ef 8310 	mrs	r3, PRIMASK
   285c2:	607b      	str	r3, [r7, #4]
  return(result);
   285c4:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   285c6:	2b00      	cmp	r3, #0
   285c8:	d109      	bne.n	285de <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   285ca:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   285cc:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   285d0:	4b0a      	ldr	r3, [pc, #40]	; (285fc <cpu_irq_enter_critical+0x4c>)
   285d2:	2200      	movs	r2, #0
   285d4:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   285d6:	4b0a      	ldr	r3, [pc, #40]	; (28600 <cpu_irq_enter_critical+0x50>)
   285d8:	2201      	movs	r2, #1
   285da:	701a      	strb	r2, [r3, #0]
   285dc:	e002      	b.n	285e4 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   285de:	4b08      	ldr	r3, [pc, #32]	; (28600 <cpu_irq_enter_critical+0x50>)
   285e0:	2200      	movs	r2, #0
   285e2:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   285e4:	4b04      	ldr	r3, [pc, #16]	; (285f8 <cpu_irq_enter_critical+0x48>)
   285e6:	681b      	ldr	r3, [r3, #0]
   285e8:	1c5a      	adds	r2, r3, #1
   285ea:	4b03      	ldr	r3, [pc, #12]	; (285f8 <cpu_irq_enter_critical+0x48>)
   285ec:	601a      	str	r2, [r3, #0]
}
   285ee:	46c0      	nop			; (mov r8, r8)
   285f0:	46bd      	mov	sp, r7
   285f2:	b002      	add	sp, #8
   285f4:	bd80      	pop	{r7, pc}
   285f6:	46c0      	nop			; (mov r8, r8)
   285f8:	2000412c 	.word	0x2000412c
   285fc:	2000012e 	.word	0x2000012e
   28600:	20004130 	.word	0x20004130

00028604 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   28604:	b580      	push	{r7, lr}
   28606:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   28608:	4b0b      	ldr	r3, [pc, #44]	; (28638 <cpu_irq_leave_critical+0x34>)
   2860a:	681b      	ldr	r3, [r3, #0]
   2860c:	1e5a      	subs	r2, r3, #1
   2860e:	4b0a      	ldr	r3, [pc, #40]	; (28638 <cpu_irq_leave_critical+0x34>)
   28610:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   28612:	4b09      	ldr	r3, [pc, #36]	; (28638 <cpu_irq_leave_critical+0x34>)
   28614:	681b      	ldr	r3, [r3, #0]
   28616:	2b00      	cmp	r3, #0
   28618:	d10a      	bne.n	28630 <cpu_irq_leave_critical+0x2c>
   2861a:	4b08      	ldr	r3, [pc, #32]	; (2863c <cpu_irq_leave_critical+0x38>)
   2861c:	781b      	ldrb	r3, [r3, #0]
   2861e:	b2db      	uxtb	r3, r3
   28620:	2b00      	cmp	r3, #0
   28622:	d005      	beq.n	28630 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   28624:	4b06      	ldr	r3, [pc, #24]	; (28640 <cpu_irq_leave_critical+0x3c>)
   28626:	2201      	movs	r2, #1
   28628:	701a      	strb	r2, [r3, #0]
   2862a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   2862e:	b662      	cpsie	i
	}
}
   28630:	46c0      	nop			; (mov r8, r8)
   28632:	46bd      	mov	sp, r7
   28634:	bd80      	pop	{r7, pc}
   28636:	46c0      	nop			; (mov r8, r8)
   28638:	2000412c 	.word	0x2000412c
   2863c:	20004130 	.word	0x20004130
   28640:	2000012e 	.word	0x2000012e

00028644 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   28644:	b580      	push	{r7, lr}
   28646:	b084      	sub	sp, #16
   28648:	af00      	add	r7, sp, #0
   2864a:	0002      	movs	r2, r0
   2864c:	1dfb      	adds	r3, r7, #7
   2864e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   28650:	230f      	movs	r3, #15
   28652:	18fb      	adds	r3, r7, r3
   28654:	1dfa      	adds	r2, r7, #7
   28656:	7812      	ldrb	r2, [r2, #0]
   28658:	09d2      	lsrs	r2, r2, #7
   2865a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2865c:	230e      	movs	r3, #14
   2865e:	18fb      	adds	r3, r7, r3
   28660:	1dfa      	adds	r2, r7, #7
   28662:	7812      	ldrb	r2, [r2, #0]
   28664:	0952      	lsrs	r2, r2, #5
   28666:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   28668:	4b0d      	ldr	r3, [pc, #52]	; (286a0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2866a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   2866c:	230f      	movs	r3, #15
   2866e:	18fb      	adds	r3, r7, r3
   28670:	781b      	ldrb	r3, [r3, #0]
   28672:	2b00      	cmp	r3, #0
   28674:	d10f      	bne.n	28696 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   28676:	230f      	movs	r3, #15
   28678:	18fb      	adds	r3, r7, r3
   2867a:	781b      	ldrb	r3, [r3, #0]
   2867c:	009b      	lsls	r3, r3, #2
   2867e:	2210      	movs	r2, #16
   28680:	4694      	mov	ip, r2
   28682:	44bc      	add	ip, r7
   28684:	4463      	add	r3, ip
   28686:	3b08      	subs	r3, #8
   28688:	681a      	ldr	r2, [r3, #0]
   2868a:	230e      	movs	r3, #14
   2868c:	18fb      	adds	r3, r7, r3
   2868e:	781b      	ldrb	r3, [r3, #0]
   28690:	01db      	lsls	r3, r3, #7
   28692:	18d3      	adds	r3, r2, r3
   28694:	e000      	b.n	28698 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   28696:	2300      	movs	r3, #0
	}
}
   28698:	0018      	movs	r0, r3
   2869a:	46bd      	mov	sp, r7
   2869c:	b004      	add	sp, #16
   2869e:	bd80      	pop	{r7, pc}
   286a0:	41004400 	.word	0x41004400

000286a4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   286a4:	b580      	push	{r7, lr}
   286a6:	b082      	sub	sp, #8
   286a8:	af00      	add	r7, sp, #0
   286aa:	0002      	movs	r2, r0
   286ac:	1dfb      	adds	r3, r7, #7
   286ae:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   286b0:	1dfb      	adds	r3, r7, #7
   286b2:	781b      	ldrb	r3, [r3, #0]
   286b4:	0018      	movs	r0, r3
   286b6:	4b03      	ldr	r3, [pc, #12]	; (286c4 <port_get_group_from_gpio_pin+0x20>)
   286b8:	4798      	blx	r3
   286ba:	0003      	movs	r3, r0
}
   286bc:	0018      	movs	r0, r3
   286be:	46bd      	mov	sp, r7
   286c0:	b002      	add	sp, #8
   286c2:	bd80      	pop	{r7, pc}
   286c4:	00028645 	.word	0x00028645

000286c8 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   286c8:	b580      	push	{r7, lr}
   286ca:	b082      	sub	sp, #8
   286cc:	af00      	add	r7, sp, #0
   286ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   286d0:	687b      	ldr	r3, [r7, #4]
   286d2:	2200      	movs	r2, #0
   286d4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   286d6:	687b      	ldr	r3, [r7, #4]
   286d8:	2201      	movs	r2, #1
   286da:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   286dc:	687b      	ldr	r3, [r7, #4]
   286de:	2200      	movs	r2, #0
   286e0:	709a      	strb	r2, [r3, #2]
}
   286e2:	46c0      	nop			; (mov r8, r8)
   286e4:	46bd      	mov	sp, r7
   286e6:	b002      	add	sp, #8
   286e8:	bd80      	pop	{r7, pc}
	...

000286ec <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   286ec:	b580      	push	{r7, lr}
   286ee:	b084      	sub	sp, #16
   286f0:	af00      	add	r7, sp, #0
   286f2:	0002      	movs	r2, r0
   286f4:	1dfb      	adds	r3, r7, #7
   286f6:	701a      	strb	r2, [r3, #0]
   286f8:	1dbb      	adds	r3, r7, #6
   286fa:	1c0a      	adds	r2, r1, #0
   286fc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   286fe:	1dfb      	adds	r3, r7, #7
   28700:	781b      	ldrb	r3, [r3, #0]
   28702:	0018      	movs	r0, r3
   28704:	4b0d      	ldr	r3, [pc, #52]	; (2873c <port_pin_set_output_level+0x50>)
   28706:	4798      	blx	r3
   28708:	0003      	movs	r3, r0
   2870a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2870c:	1dfb      	adds	r3, r7, #7
   2870e:	781b      	ldrb	r3, [r3, #0]
   28710:	221f      	movs	r2, #31
   28712:	4013      	ands	r3, r2
   28714:	2201      	movs	r2, #1
   28716:	409a      	lsls	r2, r3
   28718:	0013      	movs	r3, r2
   2871a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   2871c:	1dbb      	adds	r3, r7, #6
   2871e:	781b      	ldrb	r3, [r3, #0]
   28720:	2b00      	cmp	r3, #0
   28722:	d003      	beq.n	2872c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   28724:	68fb      	ldr	r3, [r7, #12]
   28726:	68ba      	ldr	r2, [r7, #8]
   28728:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   2872a:	e002      	b.n	28732 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2872c:	68fb      	ldr	r3, [r7, #12]
   2872e:	68ba      	ldr	r2, [r7, #8]
   28730:	615a      	str	r2, [r3, #20]
}
   28732:	46c0      	nop			; (mov r8, r8)
   28734:	46bd      	mov	sp, r7
   28736:	b004      	add	sp, #16
   28738:	bd80      	pop	{r7, pc}
   2873a:	46c0      	nop			; (mov r8, r8)
   2873c:	000286a5 	.word	0x000286a5

00028740 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   28740:	b580      	push	{r7, lr}
   28742:	b082      	sub	sp, #8
   28744:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   28746:	1d3b      	adds	r3, r7, #4
   28748:	0018      	movs	r0, r3
   2874a:	4b0e      	ldr	r3, [pc, #56]	; (28784 <system_board_init+0x44>)
   2874c:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   2874e:	1d3b      	adds	r3, r7, #4
   28750:	2201      	movs	r2, #1
   28752:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   28754:	1d3b      	adds	r3, r7, #4
   28756:	0019      	movs	r1, r3
   28758:	2017      	movs	r0, #23
   2875a:	4b0b      	ldr	r3, [pc, #44]	; (28788 <system_board_init+0x48>)
   2875c:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   2875e:	2101      	movs	r1, #1
   28760:	2017      	movs	r0, #23
   28762:	4b0a      	ldr	r3, [pc, #40]	; (2878c <system_board_init+0x4c>)
   28764:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   28766:	1d3b      	adds	r3, r7, #4
   28768:	2200      	movs	r2, #0
   2876a:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   2876c:	1d3b      	adds	r3, r7, #4
   2876e:	2201      	movs	r2, #1
   28770:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   28772:	1d3b      	adds	r3, r7, #4
   28774:	0019      	movs	r1, r3
   28776:	2037      	movs	r0, #55	; 0x37
   28778:	4b03      	ldr	r3, [pc, #12]	; (28788 <system_board_init+0x48>)
   2877a:	4798      	blx	r3
}
   2877c:	46c0      	nop			; (mov r8, r8)
   2877e:	46bd      	mov	sp, r7
   28780:	b002      	add	sp, #8
   28782:	bd80      	pop	{r7, pc}
   28784:	000286c9 	.word	0x000286c9
   28788:	00028db5 	.word	0x00028db5
   2878c:	000286ed 	.word	0x000286ed

00028790 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   28790:	b580      	push	{r7, lr}
   28792:	b084      	sub	sp, #16
   28794:	af00      	add	r7, sp, #0
   28796:	0002      	movs	r2, r0
   28798:	1dfb      	adds	r3, r7, #7
   2879a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   2879c:	230f      	movs	r3, #15
   2879e:	18fb      	adds	r3, r7, r3
   287a0:	1dfa      	adds	r2, r7, #7
   287a2:	7812      	ldrb	r2, [r2, #0]
   287a4:	0952      	lsrs	r2, r2, #5
   287a6:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   287a8:	230f      	movs	r3, #15
   287aa:	18fb      	adds	r3, r7, r3
   287ac:	781b      	ldrb	r3, [r3, #0]
   287ae:	2b00      	cmp	r3, #0
   287b0:	d10c      	bne.n	287cc <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   287b2:	4b09      	ldr	r3, [pc, #36]	; (287d8 <_extint_get_eic_from_channel+0x48>)
   287b4:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   287b6:	230f      	movs	r3, #15
   287b8:	18fb      	adds	r3, r7, r3
   287ba:	781b      	ldrb	r3, [r3, #0]
   287bc:	009b      	lsls	r3, r3, #2
   287be:	2210      	movs	r2, #16
   287c0:	4694      	mov	ip, r2
   287c2:	44bc      	add	ip, r7
   287c4:	4463      	add	r3, ip
   287c6:	3b08      	subs	r3, #8
   287c8:	681b      	ldr	r3, [r3, #0]
   287ca:	e000      	b.n	287ce <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   287cc:	2300      	movs	r3, #0
	}
}
   287ce:	0018      	movs	r0, r3
   287d0:	46bd      	mov	sp, r7
   287d2:	b004      	add	sp, #16
   287d4:	bd80      	pop	{r7, pc}
   287d6:	46c0      	nop			; (mov r8, r8)
   287d8:	40001800 	.word	0x40001800

000287dc <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   287dc:	b580      	push	{r7, lr}
   287de:	b084      	sub	sp, #16
   287e0:	af00      	add	r7, sp, #0
   287e2:	0002      	movs	r2, r0
   287e4:	1dfb      	adds	r3, r7, #7
   287e6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   287e8:	1dfb      	adds	r3, r7, #7
   287ea:	781b      	ldrb	r3, [r3, #0]
   287ec:	0018      	movs	r0, r3
   287ee:	4b0b      	ldr	r3, [pc, #44]	; (2881c <extint_chan_is_detected+0x40>)
   287f0:	4798      	blx	r3
   287f2:	0003      	movs	r3, r0
   287f4:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   287f6:	1dfb      	adds	r3, r7, #7
   287f8:	781b      	ldrb	r3, [r3, #0]
   287fa:	221f      	movs	r2, #31
   287fc:	4013      	ands	r3, r2
   287fe:	2201      	movs	r2, #1
   28800:	409a      	lsls	r2, r3
   28802:	0013      	movs	r3, r2
   28804:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   28806:	68fb      	ldr	r3, [r7, #12]
   28808:	691b      	ldr	r3, [r3, #16]
   2880a:	68ba      	ldr	r2, [r7, #8]
   2880c:	4013      	ands	r3, r2
   2880e:	1e5a      	subs	r2, r3, #1
   28810:	4193      	sbcs	r3, r2
   28812:	b2db      	uxtb	r3, r3
}
   28814:	0018      	movs	r0, r3
   28816:	46bd      	mov	sp, r7
   28818:	b004      	add	sp, #16
   2881a:	bd80      	pop	{r7, pc}
   2881c:	00028791 	.word	0x00028791

00028820 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   28820:	b580      	push	{r7, lr}
   28822:	b084      	sub	sp, #16
   28824:	af00      	add	r7, sp, #0
   28826:	0002      	movs	r2, r0
   28828:	1dfb      	adds	r3, r7, #7
   2882a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   2882c:	1dfb      	adds	r3, r7, #7
   2882e:	781b      	ldrb	r3, [r3, #0]
   28830:	0018      	movs	r0, r3
   28832:	4b09      	ldr	r3, [pc, #36]	; (28858 <extint_chan_clear_detected+0x38>)
   28834:	4798      	blx	r3
   28836:	0003      	movs	r3, r0
   28838:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   2883a:	1dfb      	adds	r3, r7, #7
   2883c:	781b      	ldrb	r3, [r3, #0]
   2883e:	221f      	movs	r2, #31
   28840:	4013      	ands	r3, r2
   28842:	2201      	movs	r2, #1
   28844:	409a      	lsls	r2, r3
   28846:	0013      	movs	r3, r2
   28848:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   2884a:	68fb      	ldr	r3, [r7, #12]
   2884c:	68ba      	ldr	r2, [r7, #8]
   2884e:	611a      	str	r2, [r3, #16]
}
   28850:	46c0      	nop			; (mov r8, r8)
   28852:	46bd      	mov	sp, r7
   28854:	b004      	add	sp, #16
   28856:	bd80      	pop	{r7, pc}
   28858:	00028791 	.word	0x00028791

0002885c <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   2885c:	b580      	push	{r7, lr}
   2885e:	b082      	sub	sp, #8
   28860:	af00      	add	r7, sp, #0
   28862:	6078      	str	r0, [r7, #4]
   28864:	0008      	movs	r0, r1
   28866:	0011      	movs	r1, r2
   28868:	1cfb      	adds	r3, r7, #3
   2886a:	1c02      	adds	r2, r0, #0
   2886c:	701a      	strb	r2, [r3, #0]
   2886e:	1cbb      	adds	r3, r7, #2
   28870:	1c0a      	adds	r2, r1, #0
   28872:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   28874:	1cbb      	adds	r3, r7, #2
   28876:	781b      	ldrb	r3, [r3, #0]
   28878:	2b00      	cmp	r3, #0
   2887a:	d001      	beq.n	28880 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2887c:	2317      	movs	r3, #23
   2887e:	e019      	b.n	288b4 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   28880:	1cfb      	adds	r3, r7, #3
   28882:	781a      	ldrb	r2, [r3, #0]
   28884:	4b0d      	ldr	r3, [pc, #52]	; (288bc <extint_register_callback+0x60>)
   28886:	0092      	lsls	r2, r2, #2
   28888:	58d3      	ldr	r3, [r2, r3]
   2888a:	2b00      	cmp	r3, #0
   2888c:	d107      	bne.n	2889e <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   2888e:	1cfb      	adds	r3, r7, #3
   28890:	781a      	ldrb	r2, [r3, #0]
   28892:	4b0a      	ldr	r3, [pc, #40]	; (288bc <extint_register_callback+0x60>)
   28894:	0092      	lsls	r2, r2, #2
   28896:	6879      	ldr	r1, [r7, #4]
   28898:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   2889a:	2300      	movs	r3, #0
   2889c:	e00a      	b.n	288b4 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   2889e:	1cfb      	adds	r3, r7, #3
   288a0:	781a      	ldrb	r2, [r3, #0]
   288a2:	4b06      	ldr	r3, [pc, #24]	; (288bc <extint_register_callback+0x60>)
   288a4:	0092      	lsls	r2, r2, #2
   288a6:	58d2      	ldr	r2, [r2, r3]
   288a8:	687b      	ldr	r3, [r7, #4]
   288aa:	429a      	cmp	r2, r3
   288ac:	d101      	bne.n	288b2 <extint_register_callback+0x56>
		return STATUS_OK;
   288ae:	2300      	movs	r3, #0
   288b0:	e000      	b.n	288b4 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   288b2:	231d      	movs	r3, #29
}
   288b4:	0018      	movs	r0, r3
   288b6:	46bd      	mov	sp, r7
   288b8:	b002      	add	sp, #8
   288ba:	bd80      	pop	{r7, pc}
   288bc:	20005a40 	.word	0x20005a40

000288c0 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   288c0:	b580      	push	{r7, lr}
   288c2:	b084      	sub	sp, #16
   288c4:	af00      	add	r7, sp, #0
   288c6:	0002      	movs	r2, r0
   288c8:	1dfb      	adds	r3, r7, #7
   288ca:	701a      	strb	r2, [r3, #0]
   288cc:	1dbb      	adds	r3, r7, #6
   288ce:	1c0a      	adds	r2, r1, #0
   288d0:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   288d2:	1dbb      	adds	r3, r7, #6
   288d4:	781b      	ldrb	r3, [r3, #0]
   288d6:	2b00      	cmp	r3, #0
   288d8:	d10e      	bne.n	288f8 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   288da:	1dfb      	adds	r3, r7, #7
   288dc:	781b      	ldrb	r3, [r3, #0]
   288de:	0018      	movs	r0, r3
   288e0:	4b08      	ldr	r3, [pc, #32]	; (28904 <extint_chan_enable_callback+0x44>)
   288e2:	4798      	blx	r3
   288e4:	0003      	movs	r3, r0
   288e6:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   288e8:	1dfb      	adds	r3, r7, #7
   288ea:	781b      	ldrb	r3, [r3, #0]
   288ec:	2201      	movs	r2, #1
   288ee:	409a      	lsls	r2, r3
   288f0:	68fb      	ldr	r3, [r7, #12]
   288f2:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   288f4:	2300      	movs	r3, #0
   288f6:	e000      	b.n	288fa <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   288f8:	2317      	movs	r3, #23
}
   288fa:	0018      	movs	r0, r3
   288fc:	46bd      	mov	sp, r7
   288fe:	b004      	add	sp, #16
   28900:	bd80      	pop	{r7, pc}
   28902:	46c0      	nop			; (mov r8, r8)
   28904:	00028791 	.word	0x00028791

00028908 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   28908:	b580      	push	{r7, lr}
   2890a:	b084      	sub	sp, #16
   2890c:	af00      	add	r7, sp, #0
   2890e:	0002      	movs	r2, r0
   28910:	1dfb      	adds	r3, r7, #7
   28912:	701a      	strb	r2, [r3, #0]
   28914:	1dbb      	adds	r3, r7, #6
   28916:	1c0a      	adds	r2, r1, #0
   28918:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   2891a:	1dbb      	adds	r3, r7, #6
   2891c:	781b      	ldrb	r3, [r3, #0]
   2891e:	2b00      	cmp	r3, #0
   28920:	d10e      	bne.n	28940 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   28922:	1dfb      	adds	r3, r7, #7
   28924:	781b      	ldrb	r3, [r3, #0]
   28926:	0018      	movs	r0, r3
   28928:	4b08      	ldr	r3, [pc, #32]	; (2894c <extint_chan_disable_callback+0x44>)
   2892a:	4798      	blx	r3
   2892c:	0003      	movs	r3, r0
   2892e:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   28930:	1dfb      	adds	r3, r7, #7
   28932:	781b      	ldrb	r3, [r3, #0]
   28934:	2201      	movs	r2, #1
   28936:	409a      	lsls	r2, r3
   28938:	68fb      	ldr	r3, [r7, #12]
   2893a:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   2893c:	2300      	movs	r3, #0
   2893e:	e000      	b.n	28942 <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   28940:	2317      	movs	r3, #23
}
   28942:	0018      	movs	r0, r3
   28944:	46bd      	mov	sp, r7
   28946:	b004      	add	sp, #16
   28948:	bd80      	pop	{r7, pc}
   2894a:	46c0      	nop			; (mov r8, r8)
   2894c:	00028791 	.word	0x00028791

00028950 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   28950:	b580      	push	{r7, lr}
   28952:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   28954:	4b15      	ldr	r3, [pc, #84]	; (289ac <EIC_Handler+0x5c>)
   28956:	2200      	movs	r2, #0
   28958:	701a      	strb	r2, [r3, #0]
   2895a:	e020      	b.n	2899e <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   2895c:	4b13      	ldr	r3, [pc, #76]	; (289ac <EIC_Handler+0x5c>)
   2895e:	781b      	ldrb	r3, [r3, #0]
   28960:	0018      	movs	r0, r3
   28962:	4b13      	ldr	r3, [pc, #76]	; (289b0 <EIC_Handler+0x60>)
   28964:	4798      	blx	r3
   28966:	1e03      	subs	r3, r0, #0
   28968:	d013      	beq.n	28992 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   2896a:	4b10      	ldr	r3, [pc, #64]	; (289ac <EIC_Handler+0x5c>)
   2896c:	781b      	ldrb	r3, [r3, #0]
   2896e:	0018      	movs	r0, r3
   28970:	4b10      	ldr	r3, [pc, #64]	; (289b4 <EIC_Handler+0x64>)
   28972:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   28974:	4b0d      	ldr	r3, [pc, #52]	; (289ac <EIC_Handler+0x5c>)
   28976:	781b      	ldrb	r3, [r3, #0]
   28978:	001a      	movs	r2, r3
   2897a:	4b0f      	ldr	r3, [pc, #60]	; (289b8 <EIC_Handler+0x68>)
   2897c:	0092      	lsls	r2, r2, #2
   2897e:	58d3      	ldr	r3, [r2, r3]
   28980:	2b00      	cmp	r3, #0
   28982:	d006      	beq.n	28992 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   28984:	4b09      	ldr	r3, [pc, #36]	; (289ac <EIC_Handler+0x5c>)
   28986:	781b      	ldrb	r3, [r3, #0]
   28988:	001a      	movs	r2, r3
   2898a:	4b0b      	ldr	r3, [pc, #44]	; (289b8 <EIC_Handler+0x68>)
   2898c:	0092      	lsls	r2, r2, #2
   2898e:	58d3      	ldr	r3, [r2, r3]
   28990:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   28992:	4b06      	ldr	r3, [pc, #24]	; (289ac <EIC_Handler+0x5c>)
   28994:	781b      	ldrb	r3, [r3, #0]
   28996:	3301      	adds	r3, #1
   28998:	b2da      	uxtb	r2, r3
   2899a:	4b04      	ldr	r3, [pc, #16]	; (289ac <EIC_Handler+0x5c>)
   2899c:	701a      	strb	r2, [r3, #0]
   2899e:	4b03      	ldr	r3, [pc, #12]	; (289ac <EIC_Handler+0x5c>)
   289a0:	781b      	ldrb	r3, [r3, #0]
   289a2:	2b0f      	cmp	r3, #15
   289a4:	d9da      	bls.n	2895c <EIC_Handler+0xc>
			}
		}
	}
}
   289a6:	46c0      	nop			; (mov r8, r8)
   289a8:	46bd      	mov	sp, r7
   289aa:	bd80      	pop	{r7, pc}
   289ac:	20005a3c 	.word	0x20005a3c
   289b0:	000287dd 	.word	0x000287dd
   289b4:	00028821 	.word	0x00028821
   289b8:	20005a40 	.word	0x20005a40

000289bc <system_gclk_chan_get_config_defaults>:
{
   289bc:	b580      	push	{r7, lr}
   289be:	b082      	sub	sp, #8
   289c0:	af00      	add	r7, sp, #0
   289c2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   289c4:	687b      	ldr	r3, [r7, #4]
   289c6:	2200      	movs	r2, #0
   289c8:	701a      	strb	r2, [r3, #0]
}
   289ca:	46c0      	nop			; (mov r8, r8)
   289cc:	46bd      	mov	sp, r7
   289ce:	b002      	add	sp, #8
   289d0:	bd80      	pop	{r7, pc}
	...

000289d4 <system_apb_clock_set_mask>:
{
   289d4:	b580      	push	{r7, lr}
   289d6:	b082      	sub	sp, #8
   289d8:	af00      	add	r7, sp, #0
   289da:	0002      	movs	r2, r0
   289dc:	6039      	str	r1, [r7, #0]
   289de:	1dfb      	adds	r3, r7, #7
   289e0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   289e2:	1dfb      	adds	r3, r7, #7
   289e4:	781b      	ldrb	r3, [r3, #0]
   289e6:	2b01      	cmp	r3, #1
   289e8:	d00a      	beq.n	28a00 <system_apb_clock_set_mask+0x2c>
   289ea:	2b02      	cmp	r3, #2
   289ec:	d00f      	beq.n	28a0e <system_apb_clock_set_mask+0x3a>
   289ee:	2b00      	cmp	r3, #0
   289f0:	d114      	bne.n	28a1c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   289f2:	4b0e      	ldr	r3, [pc, #56]	; (28a2c <system_apb_clock_set_mask+0x58>)
   289f4:	4a0d      	ldr	r2, [pc, #52]	; (28a2c <system_apb_clock_set_mask+0x58>)
   289f6:	6991      	ldr	r1, [r2, #24]
   289f8:	683a      	ldr	r2, [r7, #0]
   289fa:	430a      	orrs	r2, r1
   289fc:	619a      	str	r2, [r3, #24]
			break;
   289fe:	e00f      	b.n	28a20 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28a00:	4b0a      	ldr	r3, [pc, #40]	; (28a2c <system_apb_clock_set_mask+0x58>)
   28a02:	4a0a      	ldr	r2, [pc, #40]	; (28a2c <system_apb_clock_set_mask+0x58>)
   28a04:	69d1      	ldr	r1, [r2, #28]
   28a06:	683a      	ldr	r2, [r7, #0]
   28a08:	430a      	orrs	r2, r1
   28a0a:	61da      	str	r2, [r3, #28]
			break;
   28a0c:	e008      	b.n	28a20 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28a0e:	4b07      	ldr	r3, [pc, #28]	; (28a2c <system_apb_clock_set_mask+0x58>)
   28a10:	4a06      	ldr	r2, [pc, #24]	; (28a2c <system_apb_clock_set_mask+0x58>)
   28a12:	6a11      	ldr	r1, [r2, #32]
   28a14:	683a      	ldr	r2, [r7, #0]
   28a16:	430a      	orrs	r2, r1
   28a18:	621a      	str	r2, [r3, #32]
			break;
   28a1a:	e001      	b.n	28a20 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28a1c:	2317      	movs	r3, #23
   28a1e:	e000      	b.n	28a22 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28a20:	2300      	movs	r3, #0
}
   28a22:	0018      	movs	r0, r3
   28a24:	46bd      	mov	sp, r7
   28a26:	b002      	add	sp, #8
   28a28:	bd80      	pop	{r7, pc}
   28a2a:	46c0      	nop			; (mov r8, r8)
   28a2c:	40000400 	.word	0x40000400

00028a30 <system_pinmux_get_config_defaults>:
{
   28a30:	b580      	push	{r7, lr}
   28a32:	b082      	sub	sp, #8
   28a34:	af00      	add	r7, sp, #0
   28a36:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   28a38:	687b      	ldr	r3, [r7, #4]
   28a3a:	2280      	movs	r2, #128	; 0x80
   28a3c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28a3e:	687b      	ldr	r3, [r7, #4]
   28a40:	2200      	movs	r2, #0
   28a42:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   28a44:	687b      	ldr	r3, [r7, #4]
   28a46:	2201      	movs	r2, #1
   28a48:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   28a4a:	687b      	ldr	r3, [r7, #4]
   28a4c:	2200      	movs	r2, #0
   28a4e:	70da      	strb	r2, [r3, #3]
}
   28a50:	46c0      	nop			; (mov r8, r8)
   28a52:	46bd      	mov	sp, r7
   28a54:	b002      	add	sp, #8
   28a56:	bd80      	pop	{r7, pc}

00028a58 <system_interrupt_enable>:
{
   28a58:	b580      	push	{r7, lr}
   28a5a:	b082      	sub	sp, #8
   28a5c:	af00      	add	r7, sp, #0
   28a5e:	0002      	movs	r2, r0
   28a60:	1dfb      	adds	r3, r7, #7
   28a62:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   28a64:	4b06      	ldr	r3, [pc, #24]	; (28a80 <system_interrupt_enable+0x28>)
   28a66:	1dfa      	adds	r2, r7, #7
   28a68:	7812      	ldrb	r2, [r2, #0]
   28a6a:	0011      	movs	r1, r2
   28a6c:	221f      	movs	r2, #31
   28a6e:	400a      	ands	r2, r1
   28a70:	2101      	movs	r1, #1
   28a72:	4091      	lsls	r1, r2
   28a74:	000a      	movs	r2, r1
   28a76:	601a      	str	r2, [r3, #0]
}
   28a78:	46c0      	nop			; (mov r8, r8)
   28a7a:	46bd      	mov	sp, r7
   28a7c:	b002      	add	sp, #8
   28a7e:	bd80      	pop	{r7, pc}
   28a80:	e000e100 	.word	0xe000e100

00028a84 <_extint_get_eic_from_channel>:
{
   28a84:	b580      	push	{r7, lr}
   28a86:	b084      	sub	sp, #16
   28a88:	af00      	add	r7, sp, #0
   28a8a:	0002      	movs	r2, r0
   28a8c:	1dfb      	adds	r3, r7, #7
   28a8e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   28a90:	230f      	movs	r3, #15
   28a92:	18fb      	adds	r3, r7, r3
   28a94:	1dfa      	adds	r2, r7, #7
   28a96:	7812      	ldrb	r2, [r2, #0]
   28a98:	0952      	lsrs	r2, r2, #5
   28a9a:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   28a9c:	230f      	movs	r3, #15
   28a9e:	18fb      	adds	r3, r7, r3
   28aa0:	781b      	ldrb	r3, [r3, #0]
   28aa2:	2b00      	cmp	r3, #0
   28aa4:	d10c      	bne.n	28ac0 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   28aa6:	4b09      	ldr	r3, [pc, #36]	; (28acc <_extint_get_eic_from_channel+0x48>)
   28aa8:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   28aaa:	230f      	movs	r3, #15
   28aac:	18fb      	adds	r3, r7, r3
   28aae:	781b      	ldrb	r3, [r3, #0]
   28ab0:	009b      	lsls	r3, r3, #2
   28ab2:	2210      	movs	r2, #16
   28ab4:	4694      	mov	ip, r2
   28ab6:	44bc      	add	ip, r7
   28ab8:	4463      	add	r3, ip
   28aba:	3b08      	subs	r3, #8
   28abc:	681b      	ldr	r3, [r3, #0]
   28abe:	e000      	b.n	28ac2 <_extint_get_eic_from_channel+0x3e>
		return NULL;
   28ac0:	2300      	movs	r3, #0
}
   28ac2:	0018      	movs	r0, r3
   28ac4:	46bd      	mov	sp, r7
   28ac6:	b004      	add	sp, #16
   28ac8:	bd80      	pop	{r7, pc}
   28aca:	46c0      	nop			; (mov r8, r8)
   28acc:	40001800 	.word	0x40001800

00028ad0 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   28ad0:	b580      	push	{r7, lr}
   28ad2:	b082      	sub	sp, #8
   28ad4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   28ad6:	4b0f      	ldr	r3, [pc, #60]	; (28b14 <extint_is_syncing+0x44>)
   28ad8:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   28ada:	2300      	movs	r3, #0
   28adc:	607b      	str	r3, [r7, #4]
   28ade:	e011      	b.n	28b04 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   28ae0:	687b      	ldr	r3, [r7, #4]
   28ae2:	009b      	lsls	r3, r3, #2
   28ae4:	2208      	movs	r2, #8
   28ae6:	4694      	mov	ip, r2
   28ae8:	44bc      	add	ip, r7
   28aea:	4463      	add	r3, ip
   28aec:	3b08      	subs	r3, #8
   28aee:	681b      	ldr	r3, [r3, #0]
   28af0:	785b      	ldrb	r3, [r3, #1]
   28af2:	b2db      	uxtb	r3, r3
   28af4:	b25b      	sxtb	r3, r3
   28af6:	2b00      	cmp	r3, #0
   28af8:	da01      	bge.n	28afe <extint_is_syncing+0x2e>
			return true;
   28afa:	2301      	movs	r3, #1
   28afc:	e006      	b.n	28b0c <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   28afe:	687b      	ldr	r3, [r7, #4]
   28b00:	3301      	adds	r3, #1
   28b02:	607b      	str	r3, [r7, #4]
   28b04:	687b      	ldr	r3, [r7, #4]
   28b06:	2b00      	cmp	r3, #0
   28b08:	d0ea      	beq.n	28ae0 <extint_is_syncing+0x10>
		}
	}
	return false;
   28b0a:	2300      	movs	r3, #0
}
   28b0c:	0018      	movs	r0, r3
   28b0e:	46bd      	mov	sp, r7
   28b10:	b002      	add	sp, #8
   28b12:	bd80      	pop	{r7, pc}
   28b14:	40001800 	.word	0x40001800

00028b18 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   28b18:	b580      	push	{r7, lr}
   28b1a:	b084      	sub	sp, #16
   28b1c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   28b1e:	4b2d      	ldr	r3, [pc, #180]	; (28bd4 <_system_extint_init+0xbc>)
   28b20:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   28b22:	2140      	movs	r1, #64	; 0x40
   28b24:	2000      	movs	r0, #0
   28b26:	4b2c      	ldr	r3, [pc, #176]	; (28bd8 <_system_extint_init+0xc0>)
   28b28:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   28b2a:	003b      	movs	r3, r7
   28b2c:	0018      	movs	r0, r3
   28b2e:	4b2b      	ldr	r3, [pc, #172]	; (28bdc <_system_extint_init+0xc4>)
   28b30:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   28b32:	003b      	movs	r3, r7
   28b34:	2200      	movs	r2, #0
   28b36:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   28b38:	003b      	movs	r3, r7
   28b3a:	0019      	movs	r1, r3
   28b3c:	2005      	movs	r0, #5
   28b3e:	4b28      	ldr	r3, [pc, #160]	; (28be0 <_system_extint_init+0xc8>)
   28b40:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   28b42:	2005      	movs	r0, #5
   28b44:	4b27      	ldr	r3, [pc, #156]	; (28be4 <_system_extint_init+0xcc>)
   28b46:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   28b48:	2300      	movs	r3, #0
   28b4a:	60fb      	str	r3, [r7, #12]
   28b4c:	e018      	b.n	28b80 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   28b4e:	68fb      	ldr	r3, [r7, #12]
   28b50:	009b      	lsls	r3, r3, #2
   28b52:	2210      	movs	r2, #16
   28b54:	4694      	mov	ip, r2
   28b56:	44bc      	add	ip, r7
   28b58:	4463      	add	r3, ip
   28b5a:	3b0c      	subs	r3, #12
   28b5c:	681a      	ldr	r2, [r3, #0]
   28b5e:	68fb      	ldr	r3, [r7, #12]
   28b60:	009b      	lsls	r3, r3, #2
   28b62:	2110      	movs	r1, #16
   28b64:	468c      	mov	ip, r1
   28b66:	44bc      	add	ip, r7
   28b68:	4463      	add	r3, ip
   28b6a:	3b0c      	subs	r3, #12
   28b6c:	681b      	ldr	r3, [r3, #0]
   28b6e:	781b      	ldrb	r3, [r3, #0]
   28b70:	b2db      	uxtb	r3, r3
   28b72:	2101      	movs	r1, #1
   28b74:	430b      	orrs	r3, r1
   28b76:	b2db      	uxtb	r3, r3
   28b78:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   28b7a:	68fb      	ldr	r3, [r7, #12]
   28b7c:	3301      	adds	r3, #1
   28b7e:	60fb      	str	r3, [r7, #12]
   28b80:	68fb      	ldr	r3, [r7, #12]
   28b82:	2b00      	cmp	r3, #0
   28b84:	d0e3      	beq.n	28b4e <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   28b86:	46c0      	nop			; (mov r8, r8)
   28b88:	4b17      	ldr	r3, [pc, #92]	; (28be8 <_system_extint_init+0xd0>)
   28b8a:	4798      	blx	r3
   28b8c:	1e03      	subs	r3, r0, #0
   28b8e:	d1fb      	bne.n	28b88 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   28b90:	230b      	movs	r3, #11
   28b92:	18fb      	adds	r3, r7, r3
   28b94:	2200      	movs	r2, #0
   28b96:	701a      	strb	r2, [r3, #0]
   28b98:	e00d      	b.n	28bb6 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   28b9a:	230b      	movs	r3, #11
   28b9c:	18fb      	adds	r3, r7, r3
   28b9e:	781a      	ldrb	r2, [r3, #0]
   28ba0:	4b12      	ldr	r3, [pc, #72]	; (28bec <_system_extint_init+0xd4>)
   28ba2:	0092      	lsls	r2, r2, #2
   28ba4:	2100      	movs	r1, #0
   28ba6:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   28ba8:	230b      	movs	r3, #11
   28baa:	18fb      	adds	r3, r7, r3
   28bac:	781a      	ldrb	r2, [r3, #0]
   28bae:	230b      	movs	r3, #11
   28bb0:	18fb      	adds	r3, r7, r3
   28bb2:	3201      	adds	r2, #1
   28bb4:	701a      	strb	r2, [r3, #0]
   28bb6:	230b      	movs	r3, #11
   28bb8:	18fb      	adds	r3, r7, r3
   28bba:	781b      	ldrb	r3, [r3, #0]
   28bbc:	2b0f      	cmp	r3, #15
   28bbe:	d9ec      	bls.n	28b9a <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   28bc0:	2004      	movs	r0, #4
   28bc2:	4b0b      	ldr	r3, [pc, #44]	; (28bf0 <_system_extint_init+0xd8>)
   28bc4:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   28bc6:	4b0b      	ldr	r3, [pc, #44]	; (28bf4 <_system_extint_init+0xdc>)
   28bc8:	4798      	blx	r3
}
   28bca:	46c0      	nop			; (mov r8, r8)
   28bcc:	46bd      	mov	sp, r7
   28bce:	b004      	add	sp, #16
   28bd0:	bd80      	pop	{r7, pc}
   28bd2:	46c0      	nop			; (mov r8, r8)
   28bd4:	40001800 	.word	0x40001800
   28bd8:	000289d5 	.word	0x000289d5
   28bdc:	000289bd 	.word	0x000289bd
   28be0:	0002c2a1 	.word	0x0002c2a1
   28be4:	0002c2e5 	.word	0x0002c2e5
   28be8:	00028ad1 	.word	0x00028ad1
   28bec:	20005a40 	.word	0x20005a40
   28bf0:	00028a59 	.word	0x00028a59
   28bf4:	00028bf9 	.word	0x00028bf9

00028bf8 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   28bf8:	b580      	push	{r7, lr}
   28bfa:	b082      	sub	sp, #8
   28bfc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   28bfe:	4b15      	ldr	r3, [pc, #84]	; (28c54 <_extint_enable+0x5c>)
   28c00:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   28c02:	2300      	movs	r3, #0
   28c04:	607b      	str	r3, [r7, #4]
   28c06:	e018      	b.n	28c3a <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   28c08:	687b      	ldr	r3, [r7, #4]
   28c0a:	009b      	lsls	r3, r3, #2
   28c0c:	2208      	movs	r2, #8
   28c0e:	4694      	mov	ip, r2
   28c10:	44bc      	add	ip, r7
   28c12:	4463      	add	r3, ip
   28c14:	3b08      	subs	r3, #8
   28c16:	681a      	ldr	r2, [r3, #0]
   28c18:	687b      	ldr	r3, [r7, #4]
   28c1a:	009b      	lsls	r3, r3, #2
   28c1c:	2108      	movs	r1, #8
   28c1e:	468c      	mov	ip, r1
   28c20:	44bc      	add	ip, r7
   28c22:	4463      	add	r3, ip
   28c24:	3b08      	subs	r3, #8
   28c26:	681b      	ldr	r3, [r3, #0]
   28c28:	781b      	ldrb	r3, [r3, #0]
   28c2a:	b2db      	uxtb	r3, r3
   28c2c:	2102      	movs	r1, #2
   28c2e:	430b      	orrs	r3, r1
   28c30:	b2db      	uxtb	r3, r3
   28c32:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   28c34:	687b      	ldr	r3, [r7, #4]
   28c36:	3301      	adds	r3, #1
   28c38:	607b      	str	r3, [r7, #4]
   28c3a:	687b      	ldr	r3, [r7, #4]
   28c3c:	2b00      	cmp	r3, #0
   28c3e:	d0e3      	beq.n	28c08 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   28c40:	46c0      	nop			; (mov r8, r8)
   28c42:	4b05      	ldr	r3, [pc, #20]	; (28c58 <_extint_enable+0x60>)
   28c44:	4798      	blx	r3
   28c46:	1e03      	subs	r3, r0, #0
   28c48:	d1fb      	bne.n	28c42 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   28c4a:	46c0      	nop			; (mov r8, r8)
   28c4c:	46bd      	mov	sp, r7
   28c4e:	b002      	add	sp, #8
   28c50:	bd80      	pop	{r7, pc}
   28c52:	46c0      	nop			; (mov r8, r8)
   28c54:	40001800 	.word	0x40001800
   28c58:	00028ad1 	.word	0x00028ad1

00028c5c <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   28c5c:	b580      	push	{r7, lr}
   28c5e:	b082      	sub	sp, #8
   28c60:	af00      	add	r7, sp, #0
   28c62:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   28c64:	687b      	ldr	r3, [r7, #4]
   28c66:	2200      	movs	r2, #0
   28c68:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   28c6a:	687b      	ldr	r3, [r7, #4]
   28c6c:	2200      	movs	r2, #0
   28c6e:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   28c70:	687b      	ldr	r3, [r7, #4]
   28c72:	2201      	movs	r2, #1
   28c74:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   28c76:	687b      	ldr	r3, [r7, #4]
   28c78:	2201      	movs	r2, #1
   28c7a:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   28c7c:	687b      	ldr	r3, [r7, #4]
   28c7e:	2200      	movs	r2, #0
   28c80:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   28c82:	687b      	ldr	r3, [r7, #4]
   28c84:	2202      	movs	r2, #2
   28c86:	72da      	strb	r2, [r3, #11]
}
   28c88:	46c0      	nop			; (mov r8, r8)
   28c8a:	46bd      	mov	sp, r7
   28c8c:	b002      	add	sp, #8
   28c8e:	bd80      	pop	{r7, pc}

00028c90 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   28c90:	b580      	push	{r7, lr}
   28c92:	b086      	sub	sp, #24
   28c94:	af00      	add	r7, sp, #0
   28c96:	0002      	movs	r2, r0
   28c98:	6039      	str	r1, [r7, #0]
   28c9a:	1dfb      	adds	r3, r7, #7
   28c9c:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   28c9e:	2308      	movs	r3, #8
   28ca0:	18fb      	adds	r3, r7, r3
   28ca2:	0018      	movs	r0, r3
   28ca4:	4b36      	ldr	r3, [pc, #216]	; (28d80 <extint_chan_set_config+0xf0>)
   28ca6:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   28ca8:	683b      	ldr	r3, [r7, #0]
   28caa:	685b      	ldr	r3, [r3, #4]
   28cac:	b2da      	uxtb	r2, r3
   28cae:	2308      	movs	r3, #8
   28cb0:	18fb      	adds	r3, r7, r3
   28cb2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28cb4:	2308      	movs	r3, #8
   28cb6:	18fb      	adds	r3, r7, r3
   28cb8:	2200      	movs	r2, #0
   28cba:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   28cbc:	683b      	ldr	r3, [r7, #0]
   28cbe:	7a1a      	ldrb	r2, [r3, #8]
   28cc0:	2308      	movs	r3, #8
   28cc2:	18fb      	adds	r3, r7, r3
   28cc4:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   28cc6:	683b      	ldr	r3, [r7, #0]
   28cc8:	681b      	ldr	r3, [r3, #0]
   28cca:	b2db      	uxtb	r3, r3
   28ccc:	2208      	movs	r2, #8
   28cce:	18ba      	adds	r2, r7, r2
   28cd0:	0011      	movs	r1, r2
   28cd2:	0018      	movs	r0, r3
   28cd4:	4b2b      	ldr	r3, [pc, #172]	; (28d84 <extint_chan_set_config+0xf4>)
   28cd6:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   28cd8:	1dfb      	adds	r3, r7, #7
   28cda:	781b      	ldrb	r3, [r3, #0]
   28cdc:	0018      	movs	r0, r3
   28cde:	4b2a      	ldr	r3, [pc, #168]	; (28d88 <extint_chan_set_config+0xf8>)
   28ce0:	4798      	blx	r3
   28ce2:	0003      	movs	r3, r0
   28ce4:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   28ce6:	1dfb      	adds	r3, r7, #7
   28ce8:	781b      	ldrb	r3, [r3, #0]
   28cea:	2207      	movs	r2, #7
   28cec:	4013      	ands	r3, r2
   28cee:	009b      	lsls	r3, r3, #2
   28cf0:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   28cf2:	683b      	ldr	r3, [r7, #0]
   28cf4:	7adb      	ldrb	r3, [r3, #11]
   28cf6:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   28cf8:	683b      	ldr	r3, [r7, #0]
   28cfa:	7a9b      	ldrb	r3, [r3, #10]
   28cfc:	2b00      	cmp	r3, #0
   28cfe:	d003      	beq.n	28d08 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   28d00:	697b      	ldr	r3, [r7, #20]
   28d02:	2208      	movs	r2, #8
   28d04:	4313      	orrs	r3, r2
   28d06:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   28d08:	1dfb      	adds	r3, r7, #7
   28d0a:	781b      	ldrb	r3, [r3, #0]
   28d0c:	08db      	lsrs	r3, r3, #3
   28d0e:	b2db      	uxtb	r3, r3
   28d10:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   28d12:	1dfb      	adds	r3, r7, #7
   28d14:	781b      	ldrb	r3, [r3, #0]
   28d16:	08db      	lsrs	r3, r3, #3
   28d18:	b2db      	uxtb	r3, r3
   28d1a:	001a      	movs	r2, r3
   28d1c:	693b      	ldr	r3, [r7, #16]
   28d1e:	3206      	adds	r2, #6
   28d20:	0092      	lsls	r2, r2, #2
   28d22:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   28d24:	210f      	movs	r1, #15
   28d26:	68fa      	ldr	r2, [r7, #12]
   28d28:	4091      	lsls	r1, r2
   28d2a:	000a      	movs	r2, r1
   28d2c:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   28d2e:	401a      	ands	r2, r3
			(new_config << config_pos);
   28d30:	6979      	ldr	r1, [r7, #20]
   28d32:	68fb      	ldr	r3, [r7, #12]
   28d34:	4099      	lsls	r1, r3
   28d36:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   28d38:	431a      	orrs	r2, r3
   28d3a:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   28d3c:	693b      	ldr	r3, [r7, #16]
   28d3e:	1d82      	adds	r2, r0, #6
   28d40:	0092      	lsls	r2, r2, #2
   28d42:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   28d44:	683b      	ldr	r3, [r7, #0]
   28d46:	7a5b      	ldrb	r3, [r3, #9]
   28d48:	2b00      	cmp	r3, #0
   28d4a:	d00a      	beq.n	28d62 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   28d4c:	693b      	ldr	r3, [r7, #16]
   28d4e:	695a      	ldr	r2, [r3, #20]
   28d50:	1dfb      	adds	r3, r7, #7
   28d52:	781b      	ldrb	r3, [r3, #0]
   28d54:	2101      	movs	r1, #1
   28d56:	4099      	lsls	r1, r3
   28d58:	000b      	movs	r3, r1
   28d5a:	431a      	orrs	r2, r3
   28d5c:	693b      	ldr	r3, [r7, #16]
   28d5e:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   28d60:	e00a      	b.n	28d78 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   28d62:	693b      	ldr	r3, [r7, #16]
   28d64:	695b      	ldr	r3, [r3, #20]
   28d66:	1dfa      	adds	r2, r7, #7
   28d68:	7812      	ldrb	r2, [r2, #0]
   28d6a:	2101      	movs	r1, #1
   28d6c:	4091      	lsls	r1, r2
   28d6e:	000a      	movs	r2, r1
   28d70:	43d2      	mvns	r2, r2
   28d72:	401a      	ands	r2, r3
   28d74:	693b      	ldr	r3, [r7, #16]
   28d76:	615a      	str	r2, [r3, #20]
}
   28d78:	46c0      	nop			; (mov r8, r8)
   28d7a:	46bd      	mov	sp, r7
   28d7c:	b006      	add	sp, #24
   28d7e:	bd80      	pop	{r7, pc}
   28d80:	00028a31 	.word	0x00028a31
   28d84:	0002c601 	.word	0x0002c601
   28d88:	00028a85 	.word	0x00028a85

00028d8c <system_pinmux_get_config_defaults>:
{
   28d8c:	b580      	push	{r7, lr}
   28d8e:	b082      	sub	sp, #8
   28d90:	af00      	add	r7, sp, #0
   28d92:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   28d94:	687b      	ldr	r3, [r7, #4]
   28d96:	2280      	movs	r2, #128	; 0x80
   28d98:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28d9a:	687b      	ldr	r3, [r7, #4]
   28d9c:	2200      	movs	r2, #0
   28d9e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   28da0:	687b      	ldr	r3, [r7, #4]
   28da2:	2201      	movs	r2, #1
   28da4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   28da6:	687b      	ldr	r3, [r7, #4]
   28da8:	2200      	movs	r2, #0
   28daa:	70da      	strb	r2, [r3, #3]
}
   28dac:	46c0      	nop			; (mov r8, r8)
   28dae:	46bd      	mov	sp, r7
   28db0:	b002      	add	sp, #8
   28db2:	bd80      	pop	{r7, pc}

00028db4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   28db4:	b580      	push	{r7, lr}
   28db6:	b084      	sub	sp, #16
   28db8:	af00      	add	r7, sp, #0
   28dba:	0002      	movs	r2, r0
   28dbc:	6039      	str	r1, [r7, #0]
   28dbe:	1dfb      	adds	r3, r7, #7
   28dc0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   28dc2:	230c      	movs	r3, #12
   28dc4:	18fb      	adds	r3, r7, r3
   28dc6:	0018      	movs	r0, r3
   28dc8:	4b10      	ldr	r3, [pc, #64]	; (28e0c <port_pin_set_config+0x58>)
   28dca:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   28dcc:	230c      	movs	r3, #12
   28dce:	18fb      	adds	r3, r7, r3
   28dd0:	2280      	movs	r2, #128	; 0x80
   28dd2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   28dd4:	683b      	ldr	r3, [r7, #0]
   28dd6:	781a      	ldrb	r2, [r3, #0]
   28dd8:	230c      	movs	r3, #12
   28dda:	18fb      	adds	r3, r7, r3
   28ddc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   28dde:	683b      	ldr	r3, [r7, #0]
   28de0:	785a      	ldrb	r2, [r3, #1]
   28de2:	230c      	movs	r3, #12
   28de4:	18fb      	adds	r3, r7, r3
   28de6:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   28de8:	683b      	ldr	r3, [r7, #0]
   28dea:	789a      	ldrb	r2, [r3, #2]
   28dec:	230c      	movs	r3, #12
   28dee:	18fb      	adds	r3, r7, r3
   28df0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   28df2:	230c      	movs	r3, #12
   28df4:	18fa      	adds	r2, r7, r3
   28df6:	1dfb      	adds	r3, r7, #7
   28df8:	781b      	ldrb	r3, [r3, #0]
   28dfa:	0011      	movs	r1, r2
   28dfc:	0018      	movs	r0, r3
   28dfe:	4b04      	ldr	r3, [pc, #16]	; (28e10 <port_pin_set_config+0x5c>)
   28e00:	4798      	blx	r3
}
   28e02:	46c0      	nop			; (mov r8, r8)
   28e04:	46bd      	mov	sp, r7
   28e06:	b004      	add	sp, #16
   28e08:	bd80      	pop	{r7, pc}
   28e0a:	46c0      	nop			; (mov r8, r8)
   28e0c:	00028d8d 	.word	0x00028d8d
   28e10:	0002c601 	.word	0x0002c601

00028e14 <system_gclk_chan_get_config_defaults>:
{
   28e14:	b580      	push	{r7, lr}
   28e16:	b082      	sub	sp, #8
   28e18:	af00      	add	r7, sp, #0
   28e1a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28e1c:	687b      	ldr	r3, [r7, #4]
   28e1e:	2200      	movs	r2, #0
   28e20:	701a      	strb	r2, [r3, #0]
}
   28e22:	46c0      	nop			; (mov r8, r8)
   28e24:	46bd      	mov	sp, r7
   28e26:	b002      	add	sp, #8
   28e28:	bd80      	pop	{r7, pc}
	...

00028e2c <system_apb_clock_set_mask>:
{
   28e2c:	b580      	push	{r7, lr}
   28e2e:	b082      	sub	sp, #8
   28e30:	af00      	add	r7, sp, #0
   28e32:	0002      	movs	r2, r0
   28e34:	6039      	str	r1, [r7, #0]
   28e36:	1dfb      	adds	r3, r7, #7
   28e38:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28e3a:	1dfb      	adds	r3, r7, #7
   28e3c:	781b      	ldrb	r3, [r3, #0]
   28e3e:	2b01      	cmp	r3, #1
   28e40:	d00a      	beq.n	28e58 <system_apb_clock_set_mask+0x2c>
   28e42:	2b02      	cmp	r3, #2
   28e44:	d00f      	beq.n	28e66 <system_apb_clock_set_mask+0x3a>
   28e46:	2b00      	cmp	r3, #0
   28e48:	d114      	bne.n	28e74 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   28e4a:	4b0e      	ldr	r3, [pc, #56]	; (28e84 <system_apb_clock_set_mask+0x58>)
   28e4c:	4a0d      	ldr	r2, [pc, #52]	; (28e84 <system_apb_clock_set_mask+0x58>)
   28e4e:	6991      	ldr	r1, [r2, #24]
   28e50:	683a      	ldr	r2, [r7, #0]
   28e52:	430a      	orrs	r2, r1
   28e54:	619a      	str	r2, [r3, #24]
			break;
   28e56:	e00f      	b.n	28e78 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28e58:	4b0a      	ldr	r3, [pc, #40]	; (28e84 <system_apb_clock_set_mask+0x58>)
   28e5a:	4a0a      	ldr	r2, [pc, #40]	; (28e84 <system_apb_clock_set_mask+0x58>)
   28e5c:	69d1      	ldr	r1, [r2, #28]
   28e5e:	683a      	ldr	r2, [r7, #0]
   28e60:	430a      	orrs	r2, r1
   28e62:	61da      	str	r2, [r3, #28]
			break;
   28e64:	e008      	b.n	28e78 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28e66:	4b07      	ldr	r3, [pc, #28]	; (28e84 <system_apb_clock_set_mask+0x58>)
   28e68:	4a06      	ldr	r2, [pc, #24]	; (28e84 <system_apb_clock_set_mask+0x58>)
   28e6a:	6a11      	ldr	r1, [r2, #32]
   28e6c:	683a      	ldr	r2, [r7, #0]
   28e6e:	430a      	orrs	r2, r1
   28e70:	621a      	str	r2, [r3, #32]
			break;
   28e72:	e001      	b.n	28e78 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28e74:	2317      	movs	r3, #23
   28e76:	e000      	b.n	28e7a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28e78:	2300      	movs	r3, #0
}
   28e7a:	0018      	movs	r0, r3
   28e7c:	46bd      	mov	sp, r7
   28e7e:	b002      	add	sp, #8
   28e80:	bd80      	pop	{r7, pc}
   28e82:	46c0      	nop			; (mov r8, r8)
   28e84:	40000400 	.word	0x40000400

00028e88 <system_interrupt_enable>:
{
   28e88:	b580      	push	{r7, lr}
   28e8a:	b082      	sub	sp, #8
   28e8c:	af00      	add	r7, sp, #0
   28e8e:	0002      	movs	r2, r0
   28e90:	1dfb      	adds	r3, r7, #7
   28e92:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   28e94:	4b06      	ldr	r3, [pc, #24]	; (28eb0 <system_interrupt_enable+0x28>)
   28e96:	1dfa      	adds	r2, r7, #7
   28e98:	7812      	ldrb	r2, [r2, #0]
   28e9a:	0011      	movs	r1, r2
   28e9c:	221f      	movs	r2, #31
   28e9e:	400a      	ands	r2, r1
   28ea0:	2101      	movs	r1, #1
   28ea2:	4091      	lsls	r1, r2
   28ea4:	000a      	movs	r2, r1
   28ea6:	601a      	str	r2, [r3, #0]
}
   28ea8:	46c0      	nop			; (mov r8, r8)
   28eaa:	46bd      	mov	sp, r7
   28eac:	b002      	add	sp, #8
   28eae:	bd80      	pop	{r7, pc}
   28eb0:	e000e100 	.word	0xe000e100

00028eb4 <system_interrupt_disable>:
{
   28eb4:	b580      	push	{r7, lr}
   28eb6:	b082      	sub	sp, #8
   28eb8:	af00      	add	r7, sp, #0
   28eba:	0002      	movs	r2, r0
   28ebc:	1dfb      	adds	r3, r7, #7
   28ebe:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   28ec0:	4a07      	ldr	r2, [pc, #28]	; (28ee0 <system_interrupt_disable+0x2c>)
   28ec2:	1dfb      	adds	r3, r7, #7
   28ec4:	781b      	ldrb	r3, [r3, #0]
   28ec6:	0019      	movs	r1, r3
   28ec8:	231f      	movs	r3, #31
   28eca:	400b      	ands	r3, r1
   28ecc:	2101      	movs	r1, #1
   28ece:	4099      	lsls	r1, r3
   28ed0:	000b      	movs	r3, r1
   28ed2:	0019      	movs	r1, r3
   28ed4:	2380      	movs	r3, #128	; 0x80
   28ed6:	50d1      	str	r1, [r2, r3]
}
   28ed8:	46c0      	nop			; (mov r8, r8)
   28eda:	46bd      	mov	sp, r7
   28edc:	b002      	add	sp, #8
   28ede:	bd80      	pop	{r7, pc}
   28ee0:	e000e100 	.word	0xe000e100

00028ee4 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   28ee4:	b580      	push	{r7, lr}
   28ee6:	b084      	sub	sp, #16
   28ee8:	af00      	add	r7, sp, #0
   28eea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   28eec:	687b      	ldr	r3, [r7, #4]
   28eee:	681b      	ldr	r3, [r3, #0]
   28ef0:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   28ef2:	68fb      	ldr	r3, [r7, #12]
   28ef4:	7a9b      	ldrb	r3, [r3, #10]
   28ef6:	b2db      	uxtb	r3, r3
   28ef8:	b25b      	sxtb	r3, r3
   28efa:	2b00      	cmp	r3, #0
   28efc:	da01      	bge.n	28f02 <rtc_calendar_is_syncing+0x1e>
                return true;
   28efe:	2301      	movs	r3, #1
   28f00:	e000      	b.n	28f04 <rtc_calendar_is_syncing+0x20>
        }

        return false;
   28f02:	2300      	movs	r3, #0
}
   28f04:	0018      	movs	r0, r3
   28f06:	46bd      	mov	sp, r7
   28f08:	b004      	add	sp, #16
   28f0a:	bd80      	pop	{r7, pc}

00028f0c <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   28f0c:	b580      	push	{r7, lr}
   28f0e:	b084      	sub	sp, #16
   28f10:	af00      	add	r7, sp, #0
   28f12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   28f14:	687b      	ldr	r3, [r7, #4]
   28f16:	681b      	ldr	r3, [r3, #0]
   28f18:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   28f1a:	2003      	movs	r0, #3
   28f1c:	4b0a      	ldr	r3, [pc, #40]	; (28f48 <rtc_calendar_enable+0x3c>)
   28f1e:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   28f20:	46c0      	nop			; (mov r8, r8)
   28f22:	687b      	ldr	r3, [r7, #4]
   28f24:	0018      	movs	r0, r3
   28f26:	4b09      	ldr	r3, [pc, #36]	; (28f4c <rtc_calendar_enable+0x40>)
   28f28:	4798      	blx	r3
   28f2a:	1e03      	subs	r3, r0, #0
   28f2c:	d1f9      	bne.n	28f22 <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   28f2e:	68fb      	ldr	r3, [r7, #12]
   28f30:	881b      	ldrh	r3, [r3, #0]
   28f32:	b29b      	uxth	r3, r3
   28f34:	2202      	movs	r2, #2
   28f36:	4313      	orrs	r3, r2
   28f38:	b29a      	uxth	r2, r3
   28f3a:	68fb      	ldr	r3, [r7, #12]
   28f3c:	801a      	strh	r2, [r3, #0]
}
   28f3e:	46c0      	nop			; (mov r8, r8)
   28f40:	46bd      	mov	sp, r7
   28f42:	b004      	add	sp, #16
   28f44:	bd80      	pop	{r7, pc}
   28f46:	46c0      	nop			; (mov r8, r8)
   28f48:	00028e89 	.word	0x00028e89
   28f4c:	00028ee5 	.word	0x00028ee5

00028f50 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   28f50:	b580      	push	{r7, lr}
   28f52:	b084      	sub	sp, #16
   28f54:	af00      	add	r7, sp, #0
   28f56:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   28f58:	687b      	ldr	r3, [r7, #4]
   28f5a:	681b      	ldr	r3, [r3, #0]
   28f5c:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   28f5e:	2003      	movs	r0, #3
   28f60:	4b0d      	ldr	r3, [pc, #52]	; (28f98 <rtc_calendar_disable+0x48>)
   28f62:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   28f64:	46c0      	nop			; (mov r8, r8)
   28f66:	687b      	ldr	r3, [r7, #4]
   28f68:	0018      	movs	r0, r3
   28f6a:	4b0c      	ldr	r3, [pc, #48]	; (28f9c <rtc_calendar_disable+0x4c>)
   28f6c:	4798      	blx	r3
   28f6e:	1e03      	subs	r3, r0, #0
   28f70:	d1f9      	bne.n	28f66 <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   28f72:	68fb      	ldr	r3, [r7, #12]
   28f74:	22c1      	movs	r2, #193	; 0xc1
   28f76:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   28f78:	68fb      	ldr	r3, [r7, #12]
   28f7a:	22c1      	movs	r2, #193	; 0xc1
   28f7c:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   28f7e:	68fb      	ldr	r3, [r7, #12]
   28f80:	881b      	ldrh	r3, [r3, #0]
   28f82:	b29b      	uxth	r3, r3
   28f84:	2202      	movs	r2, #2
   28f86:	4393      	bics	r3, r2
   28f88:	b29a      	uxth	r2, r3
   28f8a:	68fb      	ldr	r3, [r7, #12]
   28f8c:	801a      	strh	r2, [r3, #0]
}
   28f8e:	46c0      	nop			; (mov r8, r8)
   28f90:	46bd      	mov	sp, r7
   28f92:	b004      	add	sp, #16
   28f94:	bd80      	pop	{r7, pc}
   28f96:	46c0      	nop			; (mov r8, r8)
   28f98:	00028eb5 	.word	0x00028eb5
   28f9c:	00028ee5 	.word	0x00028ee5

00028fa0 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   28fa0:	b580      	push	{r7, lr}
   28fa2:	b084      	sub	sp, #16
   28fa4:	af00      	add	r7, sp, #0
   28fa6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   28fa8:	687b      	ldr	r3, [r7, #4]
   28faa:	681b      	ldr	r3, [r3, #0]
   28fac:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   28fae:	687b      	ldr	r3, [r7, #4]
   28fb0:	0018      	movs	r0, r3
   28fb2:	4b0d      	ldr	r3, [pc, #52]	; (28fe8 <rtc_calendar_reset+0x48>)
   28fb4:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   28fb6:	687b      	ldr	r3, [r7, #4]
   28fb8:	2200      	movs	r2, #0
   28fba:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   28fbc:	687b      	ldr	r3, [r7, #4]
   28fbe:	2200      	movs	r2, #0
   28fc0:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   28fc2:	46c0      	nop			; (mov r8, r8)
   28fc4:	687b      	ldr	r3, [r7, #4]
   28fc6:	0018      	movs	r0, r3
   28fc8:	4b08      	ldr	r3, [pc, #32]	; (28fec <rtc_calendar_reset+0x4c>)
   28fca:	4798      	blx	r3
   28fcc:	1e03      	subs	r3, r0, #0
   28fce:	d1f9      	bne.n	28fc4 <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   28fd0:	68fb      	ldr	r3, [r7, #12]
   28fd2:	881b      	ldrh	r3, [r3, #0]
   28fd4:	b29b      	uxth	r3, r3
   28fd6:	2201      	movs	r2, #1
   28fd8:	4313      	orrs	r3, r2
   28fda:	b29a      	uxth	r2, r3
   28fdc:	68fb      	ldr	r3, [r7, #12]
   28fde:	801a      	strh	r2, [r3, #0]
}
   28fe0:	46c0      	nop			; (mov r8, r8)
   28fe2:	46bd      	mov	sp, r7
   28fe4:	b004      	add	sp, #16
   28fe6:	bd80      	pop	{r7, pc}
   28fe8:	00028f51 	.word	0x00028f51
   28fec:	00028ee5 	.word	0x00028ee5

00028ff0 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   28ff0:	b580      	push	{r7, lr}
   28ff2:	b084      	sub	sp, #16
   28ff4:	af00      	add	r7, sp, #0
   28ff6:	6078      	str	r0, [r7, #4]
   28ff8:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   28ffa:	683b      	ldr	r3, [r7, #0]
   28ffc:	88db      	ldrh	r3, [r3, #6]
   28ffe:	001a      	movs	r2, r3
   29000:	687b      	ldr	r3, [r7, #4]
   29002:	88db      	ldrh	r3, [r3, #6]
   29004:	1ad3      	subs	r3, r2, r3
   29006:	069b      	lsls	r3, r3, #26
   29008:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   2900a:	683b      	ldr	r3, [r7, #0]
   2900c:	795b      	ldrb	r3, [r3, #5]
   2900e:	059b      	lsls	r3, r3, #22
   29010:	001a      	movs	r2, r3
   29012:	68fb      	ldr	r3, [r7, #12]
   29014:	4313      	orrs	r3, r2
   29016:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   29018:	683b      	ldr	r3, [r7, #0]
   2901a:	791b      	ldrb	r3, [r3, #4]
   2901c:	045b      	lsls	r3, r3, #17
   2901e:	001a      	movs	r2, r3
   29020:	68fb      	ldr	r3, [r7, #12]
   29022:	4313      	orrs	r3, r2
   29024:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   29026:	683b      	ldr	r3, [r7, #0]
   29028:	789b      	ldrb	r3, [r3, #2]
   2902a:	031b      	lsls	r3, r3, #12
   2902c:	001a      	movs	r2, r3
   2902e:	68fb      	ldr	r3, [r7, #12]
   29030:	4313      	orrs	r3, r2
   29032:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   29034:	687b      	ldr	r3, [r7, #4]
   29036:	791b      	ldrb	r3, [r3, #4]
   29038:	2201      	movs	r2, #1
   2903a:	4053      	eors	r3, r2
   2903c:	b2db      	uxtb	r3, r3
   2903e:	2b00      	cmp	r3, #0
   29040:	d008      	beq.n	29054 <rtc_calendar_time_to_register_value+0x64>
   29042:	683b      	ldr	r3, [r7, #0]
   29044:	78db      	ldrb	r3, [r3, #3]
   29046:	2b00      	cmp	r3, #0
   29048:	d004      	beq.n	29054 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   2904a:	68fb      	ldr	r3, [r7, #12]
   2904c:	2280      	movs	r2, #128	; 0x80
   2904e:	0252      	lsls	r2, r2, #9
   29050:	4313      	orrs	r3, r2
   29052:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   29054:	683b      	ldr	r3, [r7, #0]
   29056:	785b      	ldrb	r3, [r3, #1]
   29058:	019b      	lsls	r3, r3, #6
   2905a:	001a      	movs	r2, r3
   2905c:	68fb      	ldr	r3, [r7, #12]
   2905e:	4313      	orrs	r3, r2
   29060:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   29062:	683b      	ldr	r3, [r7, #0]
   29064:	781b      	ldrb	r3, [r3, #0]
   29066:	001a      	movs	r2, r3
   29068:	68fb      	ldr	r3, [r7, #12]
   2906a:	4313      	orrs	r3, r2
   2906c:	60fb      	str	r3, [r7, #12]

	return register_value;
   2906e:	68fb      	ldr	r3, [r7, #12]
}
   29070:	0018      	movs	r0, r3
   29072:	46bd      	mov	sp, r7
   29074:	b004      	add	sp, #16
   29076:	bd80      	pop	{r7, pc}

00029078 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   29078:	b580      	push	{r7, lr}
   2907a:	b084      	sub	sp, #16
   2907c:	af00      	add	r7, sp, #0
   2907e:	60f8      	str	r0, [r7, #12]
   29080:	60b9      	str	r1, [r7, #8]
   29082:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   29084:	68bb      	ldr	r3, [r7, #8]
   29086:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   29088:	b29a      	uxth	r2, r3
   2908a:	68fb      	ldr	r3, [r7, #12]
   2908c:	88db      	ldrh	r3, [r3, #6]
   2908e:	18d3      	adds	r3, r2, r3
   29090:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   29092:	687b      	ldr	r3, [r7, #4]
   29094:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   29096:	68bb      	ldr	r3, [r7, #8]
   29098:	0d9b      	lsrs	r3, r3, #22
   2909a:	b2db      	uxtb	r3, r3
   2909c:	220f      	movs	r2, #15
   2909e:	4013      	ands	r3, r2
   290a0:	b2da      	uxtb	r2, r3
   290a2:	687b      	ldr	r3, [r7, #4]
   290a4:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   290a6:	68bb      	ldr	r3, [r7, #8]
   290a8:	0c5b      	lsrs	r3, r3, #17
   290aa:	b2db      	uxtb	r3, r3
   290ac:	221f      	movs	r2, #31
   290ae:	4013      	ands	r3, r2
   290b0:	b2da      	uxtb	r2, r3
   290b2:	687b      	ldr	r3, [r7, #4]
   290b4:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   290b6:	68fb      	ldr	r3, [r7, #12]
   290b8:	791b      	ldrb	r3, [r3, #4]
   290ba:	2b00      	cmp	r3, #0
   290bc:	d008      	beq.n	290d0 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   290be:	68bb      	ldr	r3, [r7, #8]
   290c0:	0b1b      	lsrs	r3, r3, #12
   290c2:	b2db      	uxtb	r3, r3
   290c4:	221f      	movs	r2, #31
   290c6:	4013      	ands	r3, r2
   290c8:	b2da      	uxtb	r2, r3
   290ca:	687b      	ldr	r3, [r7, #4]
   290cc:	709a      	strb	r2, [r3, #2]
   290ce:	e010      	b.n	290f2 <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   290d0:	68bb      	ldr	r3, [r7, #8]
   290d2:	0b1b      	lsrs	r3, r3, #12
   290d4:	b2db      	uxtb	r3, r3
   290d6:	220f      	movs	r2, #15
   290d8:	4013      	ands	r3, r2
   290da:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   290dc:	687b      	ldr	r3, [r7, #4]
   290de:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   290e0:	68ba      	ldr	r2, [r7, #8]
   290e2:	2380      	movs	r3, #128	; 0x80
   290e4:	025b      	lsls	r3, r3, #9
   290e6:	4013      	ands	r3, r2
   290e8:	1e5a      	subs	r2, r3, #1
   290ea:	4193      	sbcs	r3, r2
   290ec:	b2da      	uxtb	r2, r3
   290ee:	687b      	ldr	r3, [r7, #4]
   290f0:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   290f2:	68bb      	ldr	r3, [r7, #8]
   290f4:	099b      	lsrs	r3, r3, #6
   290f6:	b2db      	uxtb	r3, r3
   290f8:	223f      	movs	r2, #63	; 0x3f
   290fa:	4013      	ands	r3, r2
   290fc:	b2da      	uxtb	r2, r3
   290fe:	687b      	ldr	r3, [r7, #4]
   29100:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   29102:	68bb      	ldr	r3, [r7, #8]
   29104:	b2db      	uxtb	r3, r3
   29106:	223f      	movs	r2, #63	; 0x3f
   29108:	4013      	ands	r3, r2
   2910a:	b2da      	uxtb	r2, r3
   2910c:	687b      	ldr	r3, [r7, #4]
   2910e:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   29110:	46c0      	nop			; (mov r8, r8)
   29112:	46bd      	mov	sp, r7
   29114:	b004      	add	sp, #16
   29116:	bd80      	pop	{r7, pc}

00029118 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   29118:	b580      	push	{r7, lr}
   2911a:	b084      	sub	sp, #16
   2911c:	af00      	add	r7, sp, #0
   2911e:	6078      	str	r0, [r7, #4]
   29120:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   29122:	687b      	ldr	r3, [r7, #4]
   29124:	681b      	ldr	r3, [r3, #0]
   29126:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   29128:	683b      	ldr	r3, [r7, #0]
   2912a:	881a      	ldrh	r2, [r3, #0]
   2912c:	230e      	movs	r3, #14
   2912e:	18fb      	adds	r3, r7, r3
   29130:	2108      	movs	r1, #8
   29132:	430a      	orrs	r2, r1
   29134:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   29136:	683b      	ldr	r3, [r7, #0]
   29138:	791b      	ldrb	r3, [r3, #4]
   2913a:	2201      	movs	r2, #1
   2913c:	4053      	eors	r3, r2
   2913e:	b2db      	uxtb	r3, r3
   29140:	2b00      	cmp	r3, #0
   29142:	d007      	beq.n	29154 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   29144:	230e      	movs	r3, #14
   29146:	18fb      	adds	r3, r7, r3
   29148:	220e      	movs	r2, #14
   2914a:	18ba      	adds	r2, r7, r2
   2914c:	8812      	ldrh	r2, [r2, #0]
   2914e:	2140      	movs	r1, #64	; 0x40
   29150:	430a      	orrs	r2, r1
   29152:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   29154:	683b      	ldr	r3, [r7, #0]
   29156:	789b      	ldrb	r3, [r3, #2]
   29158:	2b00      	cmp	r3, #0
   2915a:	d007      	beq.n	2916c <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   2915c:	230e      	movs	r3, #14
   2915e:	18fb      	adds	r3, r7, r3
   29160:	220e      	movs	r2, #14
   29162:	18ba      	adds	r2, r7, r2
   29164:	8812      	ldrh	r2, [r2, #0]
   29166:	2180      	movs	r1, #128	; 0x80
   29168:	430a      	orrs	r2, r1
   2916a:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   2916c:	68bb      	ldr	r3, [r7, #8]
   2916e:	220e      	movs	r2, #14
   29170:	18ba      	adds	r2, r7, r2
   29172:	8812      	ldrh	r2, [r2, #0]
   29174:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   29176:	683b      	ldr	r3, [r7, #0]
   29178:	78db      	ldrb	r3, [r3, #3]
   2917a:	2b00      	cmp	r3, #0
   2917c:	d008      	beq.n	29190 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   2917e:	68bb      	ldr	r3, [r7, #8]
   29180:	885b      	ldrh	r3, [r3, #2]
   29182:	b29b      	uxth	r3, r3
   29184:	2280      	movs	r2, #128	; 0x80
   29186:	01d2      	lsls	r2, r2, #7
   29188:	4313      	orrs	r3, r2
   2918a:	b29a      	uxth	r2, r3
   2918c:	68bb      	ldr	r3, [r7, #8]
   2918e:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   29190:	230d      	movs	r3, #13
   29192:	18fb      	adds	r3, r7, r3
   29194:	2200      	movs	r2, #0
   29196:	701a      	strb	r2, [r3, #0]
   29198:	e017      	b.n	291ca <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   2919a:	230d      	movs	r3, #13
   2919c:	18fb      	adds	r3, r7, r3
   2919e:	781a      	ldrb	r2, [r3, #0]
   291a0:	0013      	movs	r3, r2
   291a2:	009b      	lsls	r3, r3, #2
   291a4:	189b      	adds	r3, r3, r2
   291a6:	005b      	lsls	r3, r3, #1
   291a8:	3308      	adds	r3, #8
   291aa:	683a      	ldr	r2, [r7, #0]
   291ac:	18d1      	adds	r1, r2, r3
   291ae:	230d      	movs	r3, #13
   291b0:	18fb      	adds	r3, r7, r3
   291b2:	781a      	ldrb	r2, [r3, #0]
   291b4:	687b      	ldr	r3, [r7, #4]
   291b6:	0018      	movs	r0, r3
   291b8:	4b08      	ldr	r3, [pc, #32]	; (291dc <_rtc_calendar_set_config+0xc4>)
   291ba:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   291bc:	230d      	movs	r3, #13
   291be:	18fb      	adds	r3, r7, r3
   291c0:	781a      	ldrb	r2, [r3, #0]
   291c2:	230d      	movs	r3, #13
   291c4:	18fb      	adds	r3, r7, r3
   291c6:	3201      	adds	r2, #1
   291c8:	701a      	strb	r2, [r3, #0]
   291ca:	230d      	movs	r3, #13
   291cc:	18fb      	adds	r3, r7, r3
   291ce:	781b      	ldrb	r3, [r3, #0]
   291d0:	2b00      	cmp	r3, #0
   291d2:	d0e2      	beq.n	2919a <_rtc_calendar_set_config+0x82>
	}
}
   291d4:	46c0      	nop			; (mov r8, r8)
   291d6:	46bd      	mov	sp, r7
   291d8:	b004      	add	sp, #16
   291da:	bd80      	pop	{r7, pc}
   291dc:	00029301 	.word	0x00029301

000291e0 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   291e0:	b580      	push	{r7, lr}
   291e2:	b086      	sub	sp, #24
   291e4:	af00      	add	r7, sp, #0
   291e6:	60f8      	str	r0, [r7, #12]
   291e8:	60b9      	str	r1, [r7, #8]
   291ea:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   291ec:	68fb      	ldr	r3, [r7, #12]
   291ee:	68ba      	ldr	r2, [r7, #8]
   291f0:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   291f2:	2120      	movs	r1, #32
   291f4:	2000      	movs	r0, #0
   291f6:	4b18      	ldr	r3, [pc, #96]	; (29258 <rtc_calendar_init+0x78>)
   291f8:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   291fa:	2314      	movs	r3, #20
   291fc:	18fb      	adds	r3, r7, r3
   291fe:	0018      	movs	r0, r3
   29200:	4b16      	ldr	r3, [pc, #88]	; (2925c <rtc_calendar_init+0x7c>)
   29202:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   29204:	2314      	movs	r3, #20
   29206:	18fb      	adds	r3, r7, r3
   29208:	2202      	movs	r2, #2
   2920a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   2920c:	2314      	movs	r3, #20
   2920e:	18fb      	adds	r3, r7, r3
   29210:	0019      	movs	r1, r3
   29212:	2004      	movs	r0, #4
   29214:	4b12      	ldr	r3, [pc, #72]	; (29260 <rtc_calendar_init+0x80>)
   29216:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   29218:	2004      	movs	r0, #4
   2921a:	4b12      	ldr	r3, [pc, #72]	; (29264 <rtc_calendar_init+0x84>)
   2921c:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   2921e:	68fb      	ldr	r3, [r7, #12]
   29220:	0018      	movs	r0, r3
   29222:	4b11      	ldr	r3, [pc, #68]	; (29268 <rtc_calendar_init+0x88>)
   29224:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   29226:	687b      	ldr	r3, [r7, #4]
   29228:	791a      	ldrb	r2, [r3, #4]
   2922a:	68fb      	ldr	r3, [r7, #12]
   2922c:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   2922e:	687b      	ldr	r3, [r7, #4]
   29230:	78da      	ldrb	r2, [r3, #3]
   29232:	68fb      	ldr	r3, [r7, #12]
   29234:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   29236:	687b      	ldr	r3, [r7, #4]
   29238:	88da      	ldrh	r2, [r3, #6]
   2923a:	68fb      	ldr	r3, [r7, #12]
   2923c:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   2923e:	4b0b      	ldr	r3, [pc, #44]	; (2926c <rtc_calendar_init+0x8c>)
   29240:	68fa      	ldr	r2, [r7, #12]
   29242:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   29244:	687a      	ldr	r2, [r7, #4]
   29246:	68fb      	ldr	r3, [r7, #12]
   29248:	0011      	movs	r1, r2
   2924a:	0018      	movs	r0, r3
   2924c:	4b08      	ldr	r3, [pc, #32]	; (29270 <rtc_calendar_init+0x90>)
   2924e:	4798      	blx	r3
}
   29250:	46c0      	nop			; (mov r8, r8)
   29252:	46bd      	mov	sp, r7
   29254:	b006      	add	sp, #24
   29256:	bd80      	pop	{r7, pc}
   29258:	00028e2d 	.word	0x00028e2d
   2925c:	00028e15 	.word	0x00028e15
   29260:	0002c2a1 	.word	0x0002c2a1
   29264:	0002c2e5 	.word	0x0002c2e5
   29268:	00028fa1 	.word	0x00028fa1
   2926c:	20005a80 	.word	0x20005a80
   29270:	00029119 	.word	0x00029119

00029274 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   29274:	b580      	push	{r7, lr}
   29276:	b084      	sub	sp, #16
   29278:	af00      	add	r7, sp, #0
   2927a:	6078      	str	r0, [r7, #4]
   2927c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2927e:	687b      	ldr	r3, [r7, #4]
   29280:	681b      	ldr	r3, [r3, #0]
   29282:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   29284:	687b      	ldr	r3, [r7, #4]
   29286:	795b      	ldrb	r3, [r3, #5]
   29288:	2201      	movs	r2, #1
   2928a:	4053      	eors	r3, r2
   2928c:	b2db      	uxtb	r3, r3
   2928e:	2b00      	cmp	r3, #0
   29290:	d00a      	beq.n	292a8 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   29292:	68fb      	ldr	r3, [r7, #12]
   29294:	4a16      	ldr	r2, [pc, #88]	; (292f0 <rtc_calendar_get_time+0x7c>)
   29296:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   29298:	46c0      	nop			; (mov r8, r8)
   2929a:	687b      	ldr	r3, [r7, #4]
   2929c:	0018      	movs	r0, r3
   2929e:	4b15      	ldr	r3, [pc, #84]	; (292f4 <rtc_calendar_get_time+0x80>)
   292a0:	4798      	blx	r3
   292a2:	1e03      	subs	r3, r0, #0
   292a4:	d1f9      	bne.n	2929a <rtc_calendar_get_time+0x26>
   292a6:	e016      	b.n	292d6 <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   292a8:	68fb      	ldr	r3, [r7, #12]
   292aa:	885b      	ldrh	r3, [r3, #2]
   292ac:	b29b      	uxth	r3, r3
   292ae:	001a      	movs	r2, r3
   292b0:	2380      	movs	r3, #128	; 0x80
   292b2:	01db      	lsls	r3, r3, #7
   292b4:	4013      	ands	r3, r2
   292b6:	d10e      	bne.n	292d6 <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   292b8:	68fb      	ldr	r3, [r7, #12]
   292ba:	885b      	ldrh	r3, [r3, #2]
   292bc:	b29b      	uxth	r3, r3
   292be:	4a0e      	ldr	r2, [pc, #56]	; (292f8 <rtc_calendar_get_time+0x84>)
   292c0:	4313      	orrs	r3, r2
   292c2:	b29a      	uxth	r2, r3
   292c4:	68fb      	ldr	r3, [r7, #12]
   292c6:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   292c8:	46c0      	nop			; (mov r8, r8)
   292ca:	687b      	ldr	r3, [r7, #4]
   292cc:	0018      	movs	r0, r3
   292ce:	4b09      	ldr	r3, [pc, #36]	; (292f4 <rtc_calendar_get_time+0x80>)
   292d0:	4798      	blx	r3
   292d2:	1e03      	subs	r3, r0, #0
   292d4:	d1f9      	bne.n	292ca <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   292d6:	68fb      	ldr	r3, [r7, #12]
   292d8:	691b      	ldr	r3, [r3, #16]
   292da:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   292dc:	683a      	ldr	r2, [r7, #0]
   292de:	68b9      	ldr	r1, [r7, #8]
   292e0:	687b      	ldr	r3, [r7, #4]
   292e2:	0018      	movs	r0, r3
   292e4:	4b05      	ldr	r3, [pc, #20]	; (292fc <rtc_calendar_get_time+0x88>)
   292e6:	4798      	blx	r3
}
   292e8:	46c0      	nop			; (mov r8, r8)
   292ea:	46bd      	mov	sp, r7
   292ec:	b004      	add	sp, #16
   292ee:	bd80      	pop	{r7, pc}
   292f0:	ffff8000 	.word	0xffff8000
   292f4:	00028ee5 	.word	0x00028ee5
   292f8:	ffffc000 	.word	0xffffc000
   292fc:	00029079 	.word	0x00029079

00029300 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   29300:	b580      	push	{r7, lr}
   29302:	b086      	sub	sp, #24
   29304:	af00      	add	r7, sp, #0
   29306:	60f8      	str	r0, [r7, #12]
   29308:	60b9      	str	r1, [r7, #8]
   2930a:	1dfb      	adds	r3, r7, #7
   2930c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2930e:	68fb      	ldr	r3, [r7, #12]
   29310:	681b      	ldr	r3, [r3, #0]
   29312:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   29314:	1dfb      	adds	r3, r7, #7
   29316:	781b      	ldrb	r3, [r3, #0]
   29318:	2b01      	cmp	r3, #1
   2931a:	d901      	bls.n	29320 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   2931c:	2317      	movs	r3, #23
   2931e:	e021      	b.n	29364 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   29320:	68ba      	ldr	r2, [r7, #8]
   29322:	68fb      	ldr	r3, [r7, #12]
   29324:	0011      	movs	r1, r2
   29326:	0018      	movs	r0, r3
   29328:	4b10      	ldr	r3, [pc, #64]	; (2936c <rtc_calendar_set_alarm+0x6c>)
   2932a:	4798      	blx	r3
   2932c:	0003      	movs	r3, r0
   2932e:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   29330:	46c0      	nop			; (mov r8, r8)
   29332:	68fb      	ldr	r3, [r7, #12]
   29334:	0018      	movs	r0, r3
   29336:	4b0e      	ldr	r3, [pc, #56]	; (29370 <rtc_calendar_set_alarm+0x70>)
   29338:	4798      	blx	r3
   2933a:	1e03      	subs	r3, r0, #0
   2933c:	d1f9      	bne.n	29332 <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   2933e:	1dfb      	adds	r3, r7, #7
   29340:	781a      	ldrb	r2, [r3, #0]
   29342:	697b      	ldr	r3, [r7, #20]
   29344:	3203      	adds	r2, #3
   29346:	00d2      	lsls	r2, r2, #3
   29348:	6939      	ldr	r1, [r7, #16]
   2934a:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   2934c:	1dfb      	adds	r3, r7, #7
   2934e:	781b      	ldrb	r3, [r3, #0]
   29350:	68ba      	ldr	r2, [r7, #8]
   29352:	7a11      	ldrb	r1, [r2, #8]
   29354:	697a      	ldr	r2, [r7, #20]
   29356:	3303      	adds	r3, #3
   29358:	00db      	lsls	r3, r3, #3
   2935a:	18d3      	adds	r3, r2, r3
   2935c:	3304      	adds	r3, #4
   2935e:	1c0a      	adds	r2, r1, #0
   29360:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   29362:	2300      	movs	r3, #0
}
   29364:	0018      	movs	r0, r3
   29366:	46bd      	mov	sp, r7
   29368:	b006      	add	sp, #24
   2936a:	bd80      	pop	{r7, pc}
   2936c:	00028ff1 	.word	0x00028ff1
   29370:	00028ee5 	.word	0x00028ee5

00029374 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   29374:	b580      	push	{r7, lr}
   29376:	b086      	sub	sp, #24
   29378:	af00      	add	r7, sp, #0
   2937a:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   2937c:	4b28      	ldr	r3, [pc, #160]	; (29420 <_rtc_interrupt_handler+0xac>)
   2937e:	687a      	ldr	r2, [r7, #4]
   29380:	0092      	lsls	r2, r2, #2
   29382:	58d3      	ldr	r3, [r2, r3]
   29384:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   29386:	697b      	ldr	r3, [r7, #20]
   29388:	681b      	ldr	r3, [r3, #0]
   2938a:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   2938c:	230e      	movs	r3, #14
   2938e:	18fb      	adds	r3, r7, r3
   29390:	697a      	ldr	r2, [r7, #20]
   29392:	8a52      	ldrh	r2, [r2, #18]
   29394:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   29396:	697b      	ldr	r3, [r7, #20]
   29398:	8a1b      	ldrh	r3, [r3, #16]
   2939a:	b29a      	uxth	r2, r3
   2939c:	230e      	movs	r3, #14
   2939e:	18fb      	adds	r3, r7, r3
   293a0:	210e      	movs	r1, #14
   293a2:	1879      	adds	r1, r7, r1
   293a4:	8809      	ldrh	r1, [r1, #0]
   293a6:	400a      	ands	r2, r1
   293a8:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   293aa:	693b      	ldr	r3, [r7, #16]
   293ac:	7a1b      	ldrb	r3, [r3, #8]
   293ae:	b2da      	uxtb	r2, r3
   293b0:	230c      	movs	r3, #12
   293b2:	18fb      	adds	r3, r7, r3
   293b4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   293b6:	693b      	ldr	r3, [r7, #16]
   293b8:	79db      	ldrb	r3, [r3, #7]
   293ba:	b2db      	uxtb	r3, r3
   293bc:	b29a      	uxth	r2, r3
   293be:	230c      	movs	r3, #12
   293c0:	18fb      	adds	r3, r7, r3
   293c2:	210c      	movs	r1, #12
   293c4:	1879      	adds	r1, r7, r1
   293c6:	8809      	ldrh	r1, [r1, #0]
   293c8:	400a      	ands	r2, r1
   293ca:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   293cc:	230c      	movs	r3, #12
   293ce:	18fb      	adds	r3, r7, r3
   293d0:	881b      	ldrh	r3, [r3, #0]
   293d2:	2280      	movs	r2, #128	; 0x80
   293d4:	4013      	ands	r3, r2
   293d6:	d00c      	beq.n	293f2 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   293d8:	230e      	movs	r3, #14
   293da:	18fb      	adds	r3, r7, r3
   293dc:	881b      	ldrh	r3, [r3, #0]
   293de:	2202      	movs	r2, #2
   293e0:	4013      	ands	r3, r2
   293e2:	d002      	beq.n	293ea <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   293e4:	697b      	ldr	r3, [r7, #20]
   293e6:	68db      	ldr	r3, [r3, #12]
   293e8:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   293ea:	693b      	ldr	r3, [r7, #16]
   293ec:	2280      	movs	r2, #128	; 0x80
   293ee:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   293f0:	e011      	b.n	29416 <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   293f2:	230c      	movs	r3, #12
   293f4:	18fb      	adds	r3, r7, r3
   293f6:	881b      	ldrh	r3, [r3, #0]
   293f8:	2201      	movs	r2, #1
   293fa:	4013      	ands	r3, r2
   293fc:	d00b      	beq.n	29416 <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   293fe:	230e      	movs	r3, #14
   29400:	18fb      	adds	r3, r7, r3
   29402:	881b      	ldrh	r3, [r3, #0]
   29404:	2201      	movs	r2, #1
   29406:	4013      	ands	r3, r2
   29408:	d002      	beq.n	29410 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   2940a:	697b      	ldr	r3, [r7, #20]
   2940c:	689b      	ldr	r3, [r3, #8]
   2940e:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   29410:	693b      	ldr	r3, [r7, #16]
   29412:	2201      	movs	r2, #1
   29414:	721a      	strb	r2, [r3, #8]
}
   29416:	46c0      	nop			; (mov r8, r8)
   29418:	46bd      	mov	sp, r7
   2941a:	b006      	add	sp, #24
   2941c:	bd80      	pop	{r7, pc}
   2941e:	46c0      	nop			; (mov r8, r8)
   29420:	20005a80 	.word	0x20005a80

00029424 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   29424:	b580      	push	{r7, lr}
   29426:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   29428:	2000      	movs	r0, #0
   2942a:	4b02      	ldr	r3, [pc, #8]	; (29434 <RTC_Handler+0x10>)
   2942c:	4798      	blx	r3
}
   2942e:	46c0      	nop			; (mov r8, r8)
   29430:	46bd      	mov	sp, r7
   29432:	bd80      	pop	{r7, pc}
   29434:	00029375 	.word	0x00029375

00029438 <system_gclk_chan_get_config_defaults>:
{
   29438:	b580      	push	{r7, lr}
   2943a:	b082      	sub	sp, #8
   2943c:	af00      	add	r7, sp, #0
   2943e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29440:	687b      	ldr	r3, [r7, #4]
   29442:	2200      	movs	r2, #0
   29444:	701a      	strb	r2, [r3, #0]
}
   29446:	46c0      	nop			; (mov r8, r8)
   29448:	46bd      	mov	sp, r7
   2944a:	b002      	add	sp, #8
   2944c:	bd80      	pop	{r7, pc}

0002944e <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   2944e:	b5f0      	push	{r4, r5, r6, r7, lr}
   29450:	b08d      	sub	sp, #52	; 0x34
   29452:	af00      	add	r7, sp, #0
   29454:	60b8      	str	r0, [r7, #8]
   29456:	60f9      	str	r1, [r7, #12]
   29458:	603a      	str	r2, [r7, #0]
   2945a:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   2945c:	2300      	movs	r3, #0
   2945e:	2400      	movs	r4, #0
   29460:	623b      	str	r3, [r7, #32]
   29462:	627c      	str	r4, [r7, #36]	; 0x24
   29464:	2300      	movs	r3, #0
   29466:	2400      	movs	r4, #0
   29468:	61bb      	str	r3, [r7, #24]
   2946a:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   2946c:	233f      	movs	r3, #63	; 0x3f
   2946e:	62fb      	str	r3, [r7, #44]	; 0x2c
   29470:	e053      	b.n	2951a <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   29472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29474:	3b20      	subs	r3, #32
   29476:	2b00      	cmp	r3, #0
   29478:	db04      	blt.n	29484 <long_division+0x36>
   2947a:	2201      	movs	r2, #1
   2947c:	409a      	lsls	r2, r3
   2947e:	0013      	movs	r3, r2
   29480:	617b      	str	r3, [r7, #20]
   29482:	e00b      	b.n	2949c <long_division+0x4e>
   29484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29486:	2220      	movs	r2, #32
   29488:	1ad3      	subs	r3, r2, r3
   2948a:	2201      	movs	r2, #1
   2948c:	40da      	lsrs	r2, r3
   2948e:	0013      	movs	r3, r2
   29490:	2100      	movs	r1, #0
   29492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   29494:	4091      	lsls	r1, r2
   29496:	000a      	movs	r2, r1
   29498:	4313      	orrs	r3, r2
   2949a:	617b      	str	r3, [r7, #20]
   2949c:	2201      	movs	r2, #1
   2949e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   294a0:	409a      	lsls	r2, r3
   294a2:	0013      	movs	r3, r2
   294a4:	613b      	str	r3, [r7, #16]

		r = r << 1;
   294a6:	69bb      	ldr	r3, [r7, #24]
   294a8:	69fc      	ldr	r4, [r7, #28]
   294aa:	18db      	adds	r3, r3, r3
   294ac:	4164      	adcs	r4, r4
   294ae:	61bb      	str	r3, [r7, #24]
   294b0:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   294b2:	68bb      	ldr	r3, [r7, #8]
   294b4:	693a      	ldr	r2, [r7, #16]
   294b6:	401a      	ands	r2, r3
   294b8:	0015      	movs	r5, r2
   294ba:	68fb      	ldr	r3, [r7, #12]
   294bc:	697a      	ldr	r2, [r7, #20]
   294be:	401a      	ands	r2, r3
   294c0:	0016      	movs	r6, r2
   294c2:	002b      	movs	r3, r5
   294c4:	4333      	orrs	r3, r6
   294c6:	d007      	beq.n	294d8 <long_division+0x8a>
			r |= 0x01;
   294c8:	69bb      	ldr	r3, [r7, #24]
   294ca:	2201      	movs	r2, #1
   294cc:	4313      	orrs	r3, r2
   294ce:	61bb      	str	r3, [r7, #24]
   294d0:	69fb      	ldr	r3, [r7, #28]
   294d2:	2200      	movs	r2, #0
   294d4:	4313      	orrs	r3, r2
   294d6:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   294d8:	687a      	ldr	r2, [r7, #4]
   294da:	69fb      	ldr	r3, [r7, #28]
   294dc:	429a      	cmp	r2, r3
   294de:	d819      	bhi.n	29514 <long_division+0xc6>
   294e0:	687a      	ldr	r2, [r7, #4]
   294e2:	69fb      	ldr	r3, [r7, #28]
   294e4:	429a      	cmp	r2, r3
   294e6:	d103      	bne.n	294f0 <long_division+0xa2>
   294e8:	683a      	ldr	r2, [r7, #0]
   294ea:	69bb      	ldr	r3, [r7, #24]
   294ec:	429a      	cmp	r2, r3
   294ee:	d811      	bhi.n	29514 <long_division+0xc6>
			r = r - d;
   294f0:	69b9      	ldr	r1, [r7, #24]
   294f2:	69fa      	ldr	r2, [r7, #28]
   294f4:	683b      	ldr	r3, [r7, #0]
   294f6:	687c      	ldr	r4, [r7, #4]
   294f8:	1ac9      	subs	r1, r1, r3
   294fa:	41a2      	sbcs	r2, r4
   294fc:	000b      	movs	r3, r1
   294fe:	0014      	movs	r4, r2
   29500:	61bb      	str	r3, [r7, #24]
   29502:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   29504:	6a3a      	ldr	r2, [r7, #32]
   29506:	693b      	ldr	r3, [r7, #16]
   29508:	4313      	orrs	r3, r2
   2950a:	623b      	str	r3, [r7, #32]
   2950c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2950e:	697b      	ldr	r3, [r7, #20]
   29510:	4313      	orrs	r3, r2
   29512:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   29514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   29516:	3b01      	subs	r3, #1
   29518:	62fb      	str	r3, [r7, #44]	; 0x2c
   2951a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2951c:	2b00      	cmp	r3, #0
   2951e:	daa8      	bge.n	29472 <long_division+0x24>
		}
	}

	return q;
   29520:	6a3b      	ldr	r3, [r7, #32]
   29522:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   29524:	0018      	movs	r0, r3
   29526:	0021      	movs	r1, r4
   29528:	46bd      	mov	sp, r7
   2952a:	b00d      	add	sp, #52	; 0x34
   2952c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002952e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   2952e:	b580      	push	{r7, lr}
   29530:	b086      	sub	sp, #24
   29532:	af00      	add	r7, sp, #0
   29534:	60f8      	str	r0, [r7, #12]
   29536:	60b9      	str	r1, [r7, #8]
   29538:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   2953a:	2316      	movs	r3, #22
   2953c:	18fb      	adds	r3, r7, r3
   2953e:	2200      	movs	r2, #0
   29540:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   29542:	68bb      	ldr	r3, [r7, #8]
   29544:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   29546:	68bb      	ldr	r3, [r7, #8]
   29548:	085a      	lsrs	r2, r3, #1
   2954a:	68fb      	ldr	r3, [r7, #12]
   2954c:	429a      	cmp	r2, r3
   2954e:	d201      	bcs.n	29554 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   29550:	2340      	movs	r3, #64	; 0x40
   29552:	e026      	b.n	295a2 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   29554:	68bb      	ldr	r3, [r7, #8]
   29556:	085b      	lsrs	r3, r3, #1
   29558:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   2955a:	e00a      	b.n	29572 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   2955c:	693a      	ldr	r2, [r7, #16]
   2955e:	68fb      	ldr	r3, [r7, #12]
   29560:	1ad3      	subs	r3, r2, r3
   29562:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   29564:	2316      	movs	r3, #22
   29566:	18fb      	adds	r3, r7, r3
   29568:	881a      	ldrh	r2, [r3, #0]
   2956a:	2316      	movs	r3, #22
   2956c:	18fb      	adds	r3, r7, r3
   2956e:	3201      	adds	r2, #1
   29570:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   29572:	693a      	ldr	r2, [r7, #16]
   29574:	68fb      	ldr	r3, [r7, #12]
   29576:	429a      	cmp	r2, r3
   29578:	d2f0      	bcs.n	2955c <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   2957a:	2316      	movs	r3, #22
   2957c:	18fb      	adds	r3, r7, r3
   2957e:	2216      	movs	r2, #22
   29580:	18ba      	adds	r2, r7, r2
   29582:	8812      	ldrh	r2, [r2, #0]
   29584:	3a01      	subs	r2, #1
   29586:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   29588:	2316      	movs	r3, #22
   2958a:	18fb      	adds	r3, r7, r3
   2958c:	881b      	ldrh	r3, [r3, #0]
   2958e:	2bff      	cmp	r3, #255	; 0xff
   29590:	d901      	bls.n	29596 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   29592:	2340      	movs	r3, #64	; 0x40
   29594:	e005      	b.n	295a2 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   29596:	687b      	ldr	r3, [r7, #4]
   29598:	2216      	movs	r2, #22
   2959a:	18ba      	adds	r2, r7, r2
   2959c:	8812      	ldrh	r2, [r2, #0]
   2959e:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   295a0:	2300      	movs	r3, #0
	}
}
   295a2:	0018      	movs	r0, r3
   295a4:	46bd      	mov	sp, r7
   295a6:	b006      	add	sp, #24
   295a8:	bd80      	pop	{r7, pc}
	...

000295ac <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   295ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   295ae:	b0a1      	sub	sp, #132	; 0x84
   295b0:	af00      	add	r7, sp, #0
   295b2:	64f8      	str	r0, [r7, #76]	; 0x4c
   295b4:	64b9      	str	r1, [r7, #72]	; 0x48
   295b6:	647a      	str	r2, [r7, #68]	; 0x44
   295b8:	2243      	movs	r2, #67	; 0x43
   295ba:	18ba      	adds	r2, r7, r2
   295bc:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   295be:	2300      	movs	r3, #0
   295c0:	2400      	movs	r4, #0
   295c2:	673b      	str	r3, [r7, #112]	; 0x70
   295c4:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   295c6:	2300      	movs	r3, #0
   295c8:	2400      	movs	r4, #0
   295ca:	66bb      	str	r3, [r7, #104]	; 0x68
   295cc:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   295ce:	2300      	movs	r3, #0
   295d0:	2400      	movs	r4, #0
   295d2:	67bb      	str	r3, [r7, #120]	; 0x78
   295d4:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   295d6:	2300      	movs	r3, #0
   295d8:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   295da:	2358      	movs	r3, #88	; 0x58
   295dc:	2240      	movs	r2, #64	; 0x40
   295de:	4694      	mov	ip, r2
   295e0:	44bc      	add	ip, r7
   295e2:	4463      	add	r3, ip
   295e4:	781a      	ldrb	r2, [r3, #0]
   295e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   295e8:	435a      	muls	r2, r3
   295ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   295ec:	429a      	cmp	r2, r3
   295ee:	d901      	bls.n	295f4 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   295f0:	2340      	movs	r3, #64	; 0x40
   295f2:	e0b3      	b.n	2975c <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   295f4:	2343      	movs	r3, #67	; 0x43
   295f6:	18fb      	adds	r3, r7, r3
   295f8:	781b      	ldrb	r3, [r3, #0]
   295fa:	2b00      	cmp	r3, #0
   295fc:	d13d      	bne.n	2967a <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   295fe:	2358      	movs	r3, #88	; 0x58
   29600:	2240      	movs	r2, #64	; 0x40
   29602:	4694      	mov	ip, r2
   29604:	44bc      	add	ip, r7
   29606:	4463      	add	r3, ip
   29608:	781b      	ldrb	r3, [r3, #0]
   2960a:	b2db      	uxtb	r3, r3
   2960c:	613b      	str	r3, [r7, #16]
   2960e:	2300      	movs	r3, #0
   29610:	617b      	str	r3, [r7, #20]
   29612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   29614:	60bb      	str	r3, [r7, #8]
   29616:	2300      	movs	r3, #0
   29618:	60fb      	str	r3, [r7, #12]
   2961a:	4c52      	ldr	r4, [pc, #328]	; (29764 <_sercom_get_async_baud_val+0x1b8>)
   2961c:	68ba      	ldr	r2, [r7, #8]
   2961e:	68fb      	ldr	r3, [r7, #12]
   29620:	6938      	ldr	r0, [r7, #16]
   29622:	6979      	ldr	r1, [r7, #20]
   29624:	47a0      	blx	r4
   29626:	0003      	movs	r3, r0
   29628:	000c      	movs	r4, r1
   2962a:	001b      	movs	r3, r3
   2962c:	65fb      	str	r3, [r7, #92]	; 0x5c
   2962e:	2300      	movs	r3, #0
   29630:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   29632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   29634:	603b      	str	r3, [r7, #0]
   29636:	2300      	movs	r3, #0
   29638:	607b      	str	r3, [r7, #4]
   2963a:	6db8      	ldr	r0, [r7, #88]	; 0x58
   2963c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   2963e:	683a      	ldr	r2, [r7, #0]
   29640:	687b      	ldr	r3, [r7, #4]
   29642:	4c49      	ldr	r4, [pc, #292]	; (29768 <_sercom_get_async_baud_val+0x1bc>)
   29644:	47a0      	blx	r4
   29646:	0003      	movs	r3, r0
   29648:	000c      	movs	r4, r1
   2964a:	673b      	str	r3, [r7, #112]	; 0x70
   2964c:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   2964e:	2100      	movs	r1, #0
   29650:	2201      	movs	r2, #1
   29652:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   29654:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   29656:	1ac9      	subs	r1, r1, r3
   29658:	41a2      	sbcs	r2, r4
   2965a:	000b      	movs	r3, r1
   2965c:	0014      	movs	r4, r2
   2965e:	66bb      	str	r3, [r7, #104]	; 0x68
   29660:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   29662:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   29664:	0c1b      	lsrs	r3, r3, #16
   29666:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   29668:	0416      	lsls	r6, r2, #16
   2966a:	431e      	orrs	r6, r3
   2966c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2966e:	041d      	lsls	r5, r3, #16
   29670:	0033      	movs	r3, r6
   29672:	67bb      	str	r3, [r7, #120]	; 0x78
   29674:	2300      	movs	r3, #0
   29676:	67fb      	str	r3, [r7, #124]	; 0x7c
   29678:	e06a      	b.n	29750 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   2967a:	2343      	movs	r3, #67	; 0x43
   2967c:	18fb      	adds	r3, r7, r3
   2967e:	781b      	ldrb	r3, [r3, #0]
   29680:	2b01      	cmp	r3, #1
   29682:	d165      	bne.n	29750 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   29684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   29686:	633b      	str	r3, [r7, #48]	; 0x30
   29688:	2300      	movs	r3, #0
   2968a:	637b      	str	r3, [r7, #52]	; 0x34
   2968c:	2358      	movs	r3, #88	; 0x58
   2968e:	2240      	movs	r2, #64	; 0x40
   29690:	4694      	mov	ip, r2
   29692:	44bc      	add	ip, r7
   29694:	4463      	add	r3, ip
   29696:	781b      	ldrb	r3, [r3, #0]
   29698:	b2db      	uxtb	r3, r3
   2969a:	62bb      	str	r3, [r7, #40]	; 0x28
   2969c:	2300      	movs	r3, #0
   2969e:	62fb      	str	r3, [r7, #44]	; 0x2c
   296a0:	4c30      	ldr	r4, [pc, #192]	; (29764 <_sercom_get_async_baud_val+0x1b8>)
   296a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   296a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   296a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
   296a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
   296aa:	47a0      	blx	r4
   296ac:	0003      	movs	r3, r0
   296ae:	000c      	movs	r4, r1
   296b0:	65bb      	str	r3, [r7, #88]	; 0x58
   296b2:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   296b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   296b6:	623b      	str	r3, [r7, #32]
   296b8:	2300      	movs	r3, #0
   296ba:	627b      	str	r3, [r7, #36]	; 0x24
   296bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   296be:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   296c0:	001a      	movs	r2, r3
   296c2:	0023      	movs	r3, r4
   296c4:	6a38      	ldr	r0, [r7, #32]
   296c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
   296c8:	4c27      	ldr	r4, [pc, #156]	; (29768 <_sercom_get_async_baud_val+0x1bc>)
   296ca:	47a0      	blx	r4
   296cc:	0003      	movs	r3, r0
   296ce:	000c      	movs	r4, r1
   296d0:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   296d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   296d4:	2380      	movs	r3, #128	; 0x80
   296d6:	019b      	lsls	r3, r3, #6
   296d8:	429a      	cmp	r2, r3
   296da:	d901      	bls.n	296e0 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   296dc:	2340      	movs	r3, #64	; 0x40
   296de:	e03d      	b.n	2975c <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   296e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   296e2:	61bb      	str	r3, [r7, #24]
   296e4:	2300      	movs	r3, #0
   296e6:	61fb      	str	r3, [r7, #28]
   296e8:	69b9      	ldr	r1, [r7, #24]
   296ea:	69fa      	ldr	r2, [r7, #28]
   296ec:	000b      	movs	r3, r1
   296ee:	0f5b      	lsrs	r3, r3, #29
   296f0:	0010      	movs	r0, r2
   296f2:	00c0      	lsls	r0, r0, #3
   296f4:	63f8      	str	r0, [r7, #60]	; 0x3c
   296f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   296f8:	4318      	orrs	r0, r3
   296fa:	63f8      	str	r0, [r7, #60]	; 0x3c
   296fc:	000b      	movs	r3, r1
   296fe:	00db      	lsls	r3, r3, #3
   29700:	63bb      	str	r3, [r7, #56]	; 0x38
   29702:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   29704:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   29706:	001a      	movs	r2, r3
   29708:	0023      	movs	r3, r4
   2970a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   2970c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2970e:	4c16      	ldr	r4, [pc, #88]	; (29768 <_sercom_get_async_baud_val+0x1bc>)
   29710:	47a0      	blx	r4
   29712:	0003      	movs	r3, r0
   29714:	000c      	movs	r4, r1
   29716:	65bb      	str	r3, [r7, #88]	; 0x58
   29718:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   2971a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2971c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   2971e:	b2d9      	uxtb	r1, r3
   29720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   29722:	b2db      	uxtb	r3, r3
   29724:	00db      	lsls	r3, r3, #3
   29726:	b2da      	uxtb	r2, r3
   29728:	2317      	movs	r3, #23
   2972a:	2040      	movs	r0, #64	; 0x40
   2972c:	4684      	mov	ip, r0
   2972e:	44bc      	add	ip, r7
   29730:	4463      	add	r3, ip
   29732:	1a8a      	subs	r2, r1, r2
   29734:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   29736:	2317      	movs	r3, #23
   29738:	2240      	movs	r2, #64	; 0x40
   2973a:	4694      	mov	ip, r2
   2973c:	44bc      	add	ip, r7
   2973e:	4463      	add	r3, ip
   29740:	781b      	ldrb	r3, [r3, #0]
   29742:	035b      	lsls	r3, r3, #13
   29744:	001a      	movs	r2, r3
   29746:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   29748:	4313      	orrs	r3, r2
   2974a:	67bb      	str	r3, [r7, #120]	; 0x78
   2974c:	2300      	movs	r3, #0
   2974e:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   29750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   29752:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   29754:	b29a      	uxth	r2, r3
   29756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   29758:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   2975a:	2300      	movs	r3, #0
}
   2975c:	0018      	movs	r0, r3
   2975e:	46bd      	mov	sp, r7
   29760:	b021      	add	sp, #132	; 0x84
   29762:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29764:	000351c5 	.word	0x000351c5
   29768:	0002944f 	.word	0x0002944f

0002976c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   2976c:	b580      	push	{r7, lr}
   2976e:	b084      	sub	sp, #16
   29770:	af00      	add	r7, sp, #0
   29772:	0002      	movs	r2, r0
   29774:	1dfb      	adds	r3, r7, #7
   29776:	701a      	strb	r2, [r3, #0]
   29778:	1dbb      	adds	r3, r7, #6
   2977a:	1c0a      	adds	r2, r1, #0
   2977c:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   2977e:	4b1a      	ldr	r3, [pc, #104]	; (297e8 <sercom_set_gclk_generator+0x7c>)
   29780:	781b      	ldrb	r3, [r3, #0]
   29782:	2201      	movs	r2, #1
   29784:	4053      	eors	r3, r2
   29786:	b2db      	uxtb	r3, r3
   29788:	2b00      	cmp	r3, #0
   2978a:	d103      	bne.n	29794 <sercom_set_gclk_generator+0x28>
   2978c:	1dbb      	adds	r3, r7, #6
   2978e:	781b      	ldrb	r3, [r3, #0]
   29790:	2b00      	cmp	r3, #0
   29792:	d01b      	beq.n	297cc <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   29794:	230c      	movs	r3, #12
   29796:	18fb      	adds	r3, r7, r3
   29798:	0018      	movs	r0, r3
   2979a:	4b14      	ldr	r3, [pc, #80]	; (297ec <sercom_set_gclk_generator+0x80>)
   2979c:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   2979e:	230c      	movs	r3, #12
   297a0:	18fb      	adds	r3, r7, r3
   297a2:	1dfa      	adds	r2, r7, #7
   297a4:	7812      	ldrb	r2, [r2, #0]
   297a6:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   297a8:	230c      	movs	r3, #12
   297aa:	18fb      	adds	r3, r7, r3
   297ac:	0019      	movs	r1, r3
   297ae:	2013      	movs	r0, #19
   297b0:	4b0f      	ldr	r3, [pc, #60]	; (297f0 <sercom_set_gclk_generator+0x84>)
   297b2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   297b4:	2013      	movs	r0, #19
   297b6:	4b0f      	ldr	r3, [pc, #60]	; (297f4 <sercom_set_gclk_generator+0x88>)
   297b8:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   297ba:	4b0b      	ldr	r3, [pc, #44]	; (297e8 <sercom_set_gclk_generator+0x7c>)
   297bc:	1dfa      	adds	r2, r7, #7
   297be:	7812      	ldrb	r2, [r2, #0]
   297c0:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   297c2:	4b09      	ldr	r3, [pc, #36]	; (297e8 <sercom_set_gclk_generator+0x7c>)
   297c4:	2201      	movs	r2, #1
   297c6:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   297c8:	2300      	movs	r3, #0
   297ca:	e008      	b.n	297de <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   297cc:	4b06      	ldr	r3, [pc, #24]	; (297e8 <sercom_set_gclk_generator+0x7c>)
   297ce:	785b      	ldrb	r3, [r3, #1]
   297d0:	1dfa      	adds	r2, r7, #7
   297d2:	7812      	ldrb	r2, [r2, #0]
   297d4:	429a      	cmp	r2, r3
   297d6:	d101      	bne.n	297dc <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   297d8:	2300      	movs	r3, #0
   297da:	e000      	b.n	297de <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   297dc:	231d      	movs	r3, #29
}
   297de:	0018      	movs	r0, r3
   297e0:	46bd      	mov	sp, r7
   297e2:	b004      	add	sp, #16
   297e4:	bd80      	pop	{r7, pc}
   297e6:	46c0      	nop			; (mov r8, r8)
   297e8:	20004134 	.word	0x20004134
   297ec:	00029439 	.word	0x00029439
   297f0:	0002c2a1 	.word	0x0002c2a1
   297f4:	0002c2e5 	.word	0x0002c2e5

000297f8 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   297f8:	b580      	push	{r7, lr}
   297fa:	b082      	sub	sp, #8
   297fc:	af00      	add	r7, sp, #0
   297fe:	6078      	str	r0, [r7, #4]
   29800:	000a      	movs	r2, r1
   29802:	1cfb      	adds	r3, r7, #3
   29804:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   29806:	687b      	ldr	r3, [r7, #4]
   29808:	4a4d      	ldr	r2, [pc, #308]	; (29940 <_sercom_get_default_pad+0x148>)
   2980a:	4293      	cmp	r3, r2
   2980c:	d03f      	beq.n	2988e <_sercom_get_default_pad+0x96>
   2980e:	4a4c      	ldr	r2, [pc, #304]	; (29940 <_sercom_get_default_pad+0x148>)
   29810:	4293      	cmp	r3, r2
   29812:	d806      	bhi.n	29822 <_sercom_get_default_pad+0x2a>
   29814:	4a4b      	ldr	r2, [pc, #300]	; (29944 <_sercom_get_default_pad+0x14c>)
   29816:	4293      	cmp	r3, r2
   29818:	d00f      	beq.n	2983a <_sercom_get_default_pad+0x42>
   2981a:	4a4b      	ldr	r2, [pc, #300]	; (29948 <_sercom_get_default_pad+0x150>)
   2981c:	4293      	cmp	r3, r2
   2981e:	d021      	beq.n	29864 <_sercom_get_default_pad+0x6c>
   29820:	e089      	b.n	29936 <_sercom_get_default_pad+0x13e>
   29822:	4a4a      	ldr	r2, [pc, #296]	; (2994c <_sercom_get_default_pad+0x154>)
   29824:	4293      	cmp	r3, r2
   29826:	d100      	bne.n	2982a <_sercom_get_default_pad+0x32>
   29828:	e05b      	b.n	298e2 <_sercom_get_default_pad+0xea>
   2982a:	4a49      	ldr	r2, [pc, #292]	; (29950 <_sercom_get_default_pad+0x158>)
   2982c:	4293      	cmp	r3, r2
   2982e:	d100      	bne.n	29832 <_sercom_get_default_pad+0x3a>
   29830:	e06c      	b.n	2990c <_sercom_get_default_pad+0x114>
   29832:	4a48      	ldr	r2, [pc, #288]	; (29954 <_sercom_get_default_pad+0x15c>)
   29834:	4293      	cmp	r3, r2
   29836:	d03f      	beq.n	298b8 <_sercom_get_default_pad+0xc0>
   29838:	e07d      	b.n	29936 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   2983a:	1cfb      	adds	r3, r7, #3
   2983c:	781b      	ldrb	r3, [r3, #0]
   2983e:	2b01      	cmp	r3, #1
   29840:	d00a      	beq.n	29858 <_sercom_get_default_pad+0x60>
   29842:	dc02      	bgt.n	2984a <_sercom_get_default_pad+0x52>
   29844:	2b00      	cmp	r3, #0
   29846:	d005      	beq.n	29854 <_sercom_get_default_pad+0x5c>
   29848:	e075      	b.n	29936 <_sercom_get_default_pad+0x13e>
   2984a:	2b02      	cmp	r3, #2
   2984c:	d006      	beq.n	2985c <_sercom_get_default_pad+0x64>
   2984e:	2b03      	cmp	r3, #3
   29850:	d006      	beq.n	29860 <_sercom_get_default_pad+0x68>
   29852:	e070      	b.n	29936 <_sercom_get_default_pad+0x13e>
   29854:	4b40      	ldr	r3, [pc, #256]	; (29958 <_sercom_get_default_pad+0x160>)
   29856:	e06f      	b.n	29938 <_sercom_get_default_pad+0x140>
   29858:	4b40      	ldr	r3, [pc, #256]	; (2995c <_sercom_get_default_pad+0x164>)
   2985a:	e06d      	b.n	29938 <_sercom_get_default_pad+0x140>
   2985c:	4b40      	ldr	r3, [pc, #256]	; (29960 <_sercom_get_default_pad+0x168>)
   2985e:	e06b      	b.n	29938 <_sercom_get_default_pad+0x140>
   29860:	4b40      	ldr	r3, [pc, #256]	; (29964 <_sercom_get_default_pad+0x16c>)
   29862:	e069      	b.n	29938 <_sercom_get_default_pad+0x140>
   29864:	1cfb      	adds	r3, r7, #3
   29866:	781b      	ldrb	r3, [r3, #0]
   29868:	2b01      	cmp	r3, #1
   2986a:	d00a      	beq.n	29882 <_sercom_get_default_pad+0x8a>
   2986c:	dc02      	bgt.n	29874 <_sercom_get_default_pad+0x7c>
   2986e:	2b00      	cmp	r3, #0
   29870:	d005      	beq.n	2987e <_sercom_get_default_pad+0x86>
   29872:	e060      	b.n	29936 <_sercom_get_default_pad+0x13e>
   29874:	2b02      	cmp	r3, #2
   29876:	d006      	beq.n	29886 <_sercom_get_default_pad+0x8e>
   29878:	2b03      	cmp	r3, #3
   2987a:	d006      	beq.n	2988a <_sercom_get_default_pad+0x92>
   2987c:	e05b      	b.n	29936 <_sercom_get_default_pad+0x13e>
   2987e:	2303      	movs	r3, #3
   29880:	e05a      	b.n	29938 <_sercom_get_default_pad+0x140>
   29882:	4b39      	ldr	r3, [pc, #228]	; (29968 <_sercom_get_default_pad+0x170>)
   29884:	e058      	b.n	29938 <_sercom_get_default_pad+0x140>
   29886:	4b39      	ldr	r3, [pc, #228]	; (2996c <_sercom_get_default_pad+0x174>)
   29888:	e056      	b.n	29938 <_sercom_get_default_pad+0x140>
   2988a:	4b39      	ldr	r3, [pc, #228]	; (29970 <_sercom_get_default_pad+0x178>)
   2988c:	e054      	b.n	29938 <_sercom_get_default_pad+0x140>
   2988e:	1cfb      	adds	r3, r7, #3
   29890:	781b      	ldrb	r3, [r3, #0]
   29892:	2b01      	cmp	r3, #1
   29894:	d00a      	beq.n	298ac <_sercom_get_default_pad+0xb4>
   29896:	dc02      	bgt.n	2989e <_sercom_get_default_pad+0xa6>
   29898:	2b00      	cmp	r3, #0
   2989a:	d005      	beq.n	298a8 <_sercom_get_default_pad+0xb0>
   2989c:	e04b      	b.n	29936 <_sercom_get_default_pad+0x13e>
   2989e:	2b02      	cmp	r3, #2
   298a0:	d006      	beq.n	298b0 <_sercom_get_default_pad+0xb8>
   298a2:	2b03      	cmp	r3, #3
   298a4:	d006      	beq.n	298b4 <_sercom_get_default_pad+0xbc>
   298a6:	e046      	b.n	29936 <_sercom_get_default_pad+0x13e>
   298a8:	4b32      	ldr	r3, [pc, #200]	; (29974 <_sercom_get_default_pad+0x17c>)
   298aa:	e045      	b.n	29938 <_sercom_get_default_pad+0x140>
   298ac:	4b32      	ldr	r3, [pc, #200]	; (29978 <_sercom_get_default_pad+0x180>)
   298ae:	e043      	b.n	29938 <_sercom_get_default_pad+0x140>
   298b0:	4b32      	ldr	r3, [pc, #200]	; (2997c <_sercom_get_default_pad+0x184>)
   298b2:	e041      	b.n	29938 <_sercom_get_default_pad+0x140>
   298b4:	4b32      	ldr	r3, [pc, #200]	; (29980 <_sercom_get_default_pad+0x188>)
   298b6:	e03f      	b.n	29938 <_sercom_get_default_pad+0x140>
   298b8:	1cfb      	adds	r3, r7, #3
   298ba:	781b      	ldrb	r3, [r3, #0]
   298bc:	2b01      	cmp	r3, #1
   298be:	d00a      	beq.n	298d6 <_sercom_get_default_pad+0xde>
   298c0:	dc02      	bgt.n	298c8 <_sercom_get_default_pad+0xd0>
   298c2:	2b00      	cmp	r3, #0
   298c4:	d005      	beq.n	298d2 <_sercom_get_default_pad+0xda>
   298c6:	e036      	b.n	29936 <_sercom_get_default_pad+0x13e>
   298c8:	2b02      	cmp	r3, #2
   298ca:	d006      	beq.n	298da <_sercom_get_default_pad+0xe2>
   298cc:	2b03      	cmp	r3, #3
   298ce:	d006      	beq.n	298de <_sercom_get_default_pad+0xe6>
   298d0:	e031      	b.n	29936 <_sercom_get_default_pad+0x13e>
   298d2:	4b2c      	ldr	r3, [pc, #176]	; (29984 <_sercom_get_default_pad+0x18c>)
   298d4:	e030      	b.n	29938 <_sercom_get_default_pad+0x140>
   298d6:	4b2c      	ldr	r3, [pc, #176]	; (29988 <_sercom_get_default_pad+0x190>)
   298d8:	e02e      	b.n	29938 <_sercom_get_default_pad+0x140>
   298da:	4b2c      	ldr	r3, [pc, #176]	; (2998c <_sercom_get_default_pad+0x194>)
   298dc:	e02c      	b.n	29938 <_sercom_get_default_pad+0x140>
   298de:	4b2c      	ldr	r3, [pc, #176]	; (29990 <_sercom_get_default_pad+0x198>)
   298e0:	e02a      	b.n	29938 <_sercom_get_default_pad+0x140>
   298e2:	1cfb      	adds	r3, r7, #3
   298e4:	781b      	ldrb	r3, [r3, #0]
   298e6:	2b01      	cmp	r3, #1
   298e8:	d00a      	beq.n	29900 <_sercom_get_default_pad+0x108>
   298ea:	dc02      	bgt.n	298f2 <_sercom_get_default_pad+0xfa>
   298ec:	2b00      	cmp	r3, #0
   298ee:	d005      	beq.n	298fc <_sercom_get_default_pad+0x104>
   298f0:	e021      	b.n	29936 <_sercom_get_default_pad+0x13e>
   298f2:	2b02      	cmp	r3, #2
   298f4:	d006      	beq.n	29904 <_sercom_get_default_pad+0x10c>
   298f6:	2b03      	cmp	r3, #3
   298f8:	d006      	beq.n	29908 <_sercom_get_default_pad+0x110>
   298fa:	e01c      	b.n	29936 <_sercom_get_default_pad+0x13e>
   298fc:	4b25      	ldr	r3, [pc, #148]	; (29994 <_sercom_get_default_pad+0x19c>)
   298fe:	e01b      	b.n	29938 <_sercom_get_default_pad+0x140>
   29900:	4b25      	ldr	r3, [pc, #148]	; (29998 <_sercom_get_default_pad+0x1a0>)
   29902:	e019      	b.n	29938 <_sercom_get_default_pad+0x140>
   29904:	4b25      	ldr	r3, [pc, #148]	; (2999c <_sercom_get_default_pad+0x1a4>)
   29906:	e017      	b.n	29938 <_sercom_get_default_pad+0x140>
   29908:	4b25      	ldr	r3, [pc, #148]	; (299a0 <_sercom_get_default_pad+0x1a8>)
   2990a:	e015      	b.n	29938 <_sercom_get_default_pad+0x140>
   2990c:	1cfb      	adds	r3, r7, #3
   2990e:	781b      	ldrb	r3, [r3, #0]
   29910:	2b01      	cmp	r3, #1
   29912:	d00a      	beq.n	2992a <_sercom_get_default_pad+0x132>
   29914:	dc02      	bgt.n	2991c <_sercom_get_default_pad+0x124>
   29916:	2b00      	cmp	r3, #0
   29918:	d005      	beq.n	29926 <_sercom_get_default_pad+0x12e>
   2991a:	e00c      	b.n	29936 <_sercom_get_default_pad+0x13e>
   2991c:	2b02      	cmp	r3, #2
   2991e:	d006      	beq.n	2992e <_sercom_get_default_pad+0x136>
   29920:	2b03      	cmp	r3, #3
   29922:	d006      	beq.n	29932 <_sercom_get_default_pad+0x13a>
   29924:	e007      	b.n	29936 <_sercom_get_default_pad+0x13e>
   29926:	4b1f      	ldr	r3, [pc, #124]	; (299a4 <_sercom_get_default_pad+0x1ac>)
   29928:	e006      	b.n	29938 <_sercom_get_default_pad+0x140>
   2992a:	4b1f      	ldr	r3, [pc, #124]	; (299a8 <_sercom_get_default_pad+0x1b0>)
   2992c:	e004      	b.n	29938 <_sercom_get_default_pad+0x140>
   2992e:	4b1f      	ldr	r3, [pc, #124]	; (299ac <_sercom_get_default_pad+0x1b4>)
   29930:	e002      	b.n	29938 <_sercom_get_default_pad+0x140>
   29932:	4b1f      	ldr	r3, [pc, #124]	; (299b0 <_sercom_get_default_pad+0x1b8>)
   29934:	e000      	b.n	29938 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   29936:	2300      	movs	r3, #0
}
   29938:	0018      	movs	r0, r3
   2993a:	46bd      	mov	sp, r7
   2993c:	b002      	add	sp, #8
   2993e:	bd80      	pop	{r7, pc}
   29940:	42001000 	.word	0x42001000
   29944:	42000800 	.word	0x42000800
   29948:	42000c00 	.word	0x42000c00
   2994c:	42001800 	.word	0x42001800
   29950:	42001c00 	.word	0x42001c00
   29954:	42001400 	.word	0x42001400
   29958:	00040003 	.word	0x00040003
   2995c:	00050003 	.word	0x00050003
   29960:	00060003 	.word	0x00060003
   29964:	00070003 	.word	0x00070003
   29968:	00010003 	.word	0x00010003
   2996c:	001e0003 	.word	0x001e0003
   29970:	001f0003 	.word	0x001f0003
   29974:	00080003 	.word	0x00080003
   29978:	00090003 	.word	0x00090003
   2997c:	000a0003 	.word	0x000a0003
   29980:	000b0003 	.word	0x000b0003
   29984:	00100003 	.word	0x00100003
   29988:	00110003 	.word	0x00110003
   2998c:	00120003 	.word	0x00120003
   29990:	00130003 	.word	0x00130003
   29994:	000c0003 	.word	0x000c0003
   29998:	000d0003 	.word	0x000d0003
   2999c:	000e0003 	.word	0x000e0003
   299a0:	000f0003 	.word	0x000f0003
   299a4:	00160003 	.word	0x00160003
   299a8:	00170003 	.word	0x00170003
   299ac:	00180003 	.word	0x00180003
   299b0:	00190003 	.word	0x00190003

000299b4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   299b4:	b590      	push	{r4, r7, lr}
   299b6:	b08b      	sub	sp, #44	; 0x2c
   299b8:	af00      	add	r7, sp, #0
   299ba:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   299bc:	230c      	movs	r3, #12
   299be:	18fb      	adds	r3, r7, r3
   299c0:	4a0f      	ldr	r2, [pc, #60]	; (29a00 <_sercom_get_sercom_inst_index+0x4c>)
   299c2:	ca13      	ldmia	r2!, {r0, r1, r4}
   299c4:	c313      	stmia	r3!, {r0, r1, r4}
   299c6:	ca13      	ldmia	r2!, {r0, r1, r4}
   299c8:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   299ca:	2300      	movs	r3, #0
   299cc:	627b      	str	r3, [r7, #36]	; 0x24
   299ce:	e00e      	b.n	299ee <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   299d0:	230c      	movs	r3, #12
   299d2:	18fb      	adds	r3, r7, r3
   299d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   299d6:	0092      	lsls	r2, r2, #2
   299d8:	58d3      	ldr	r3, [r2, r3]
   299da:	001a      	movs	r2, r3
   299dc:	687b      	ldr	r3, [r7, #4]
   299de:	429a      	cmp	r2, r3
   299e0:	d102      	bne.n	299e8 <_sercom_get_sercom_inst_index+0x34>
			return i;
   299e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   299e4:	b2db      	uxtb	r3, r3
   299e6:	e006      	b.n	299f6 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   299e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   299ea:	3301      	adds	r3, #1
   299ec:	627b      	str	r3, [r7, #36]	; 0x24
   299ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   299f0:	2b05      	cmp	r3, #5
   299f2:	d9ed      	bls.n	299d0 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   299f4:	2300      	movs	r3, #0
}
   299f6:	0018      	movs	r0, r3
   299f8:	46bd      	mov	sp, r7
   299fa:	b00b      	add	sp, #44	; 0x2c
   299fc:	bd90      	pop	{r4, r7, pc}
   299fe:	46c0      	nop			; (mov r8, r8)
   29a00:	0003c79c 	.word	0x0003c79c

00029a04 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   29a04:	b580      	push	{r7, lr}
   29a06:	b082      	sub	sp, #8
   29a08:	af00      	add	r7, sp, #0
   29a0a:	0002      	movs	r2, r0
   29a0c:	1dfb      	adds	r3, r7, #7
   29a0e:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   29a10:	46c0      	nop			; (mov r8, r8)
   29a12:	46bd      	mov	sp, r7
   29a14:	b002      	add	sp, #8
   29a16:	bd80      	pop	{r7, pc}

00029a18 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   29a18:	b580      	push	{r7, lr}
   29a1a:	b084      	sub	sp, #16
   29a1c:	af00      	add	r7, sp, #0
   29a1e:	0002      	movs	r2, r0
   29a20:	6039      	str	r1, [r7, #0]
   29a22:	1dfb      	adds	r3, r7, #7
   29a24:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   29a26:	4b13      	ldr	r3, [pc, #76]	; (29a74 <_sercom_set_handler+0x5c>)
   29a28:	781b      	ldrb	r3, [r3, #0]
   29a2a:	2201      	movs	r2, #1
   29a2c:	4053      	eors	r3, r2
   29a2e:	b2db      	uxtb	r3, r3
   29a30:	2b00      	cmp	r3, #0
   29a32:	d015      	beq.n	29a60 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   29a34:	2300      	movs	r3, #0
   29a36:	60fb      	str	r3, [r7, #12]
   29a38:	e00c      	b.n	29a54 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   29a3a:	4b0f      	ldr	r3, [pc, #60]	; (29a78 <_sercom_set_handler+0x60>)
   29a3c:	68fa      	ldr	r2, [r7, #12]
   29a3e:	0092      	lsls	r2, r2, #2
   29a40:	490e      	ldr	r1, [pc, #56]	; (29a7c <_sercom_set_handler+0x64>)
   29a42:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   29a44:	4b0e      	ldr	r3, [pc, #56]	; (29a80 <_sercom_set_handler+0x68>)
   29a46:	68fa      	ldr	r2, [r7, #12]
   29a48:	0092      	lsls	r2, r2, #2
   29a4a:	2100      	movs	r1, #0
   29a4c:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   29a4e:	68fb      	ldr	r3, [r7, #12]
   29a50:	3301      	adds	r3, #1
   29a52:	60fb      	str	r3, [r7, #12]
   29a54:	68fb      	ldr	r3, [r7, #12]
   29a56:	2b05      	cmp	r3, #5
   29a58:	d9ef      	bls.n	29a3a <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   29a5a:	4b06      	ldr	r3, [pc, #24]	; (29a74 <_sercom_set_handler+0x5c>)
   29a5c:	2201      	movs	r2, #1
   29a5e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   29a60:	1dfb      	adds	r3, r7, #7
   29a62:	781a      	ldrb	r2, [r3, #0]
   29a64:	4b04      	ldr	r3, [pc, #16]	; (29a78 <_sercom_set_handler+0x60>)
   29a66:	0092      	lsls	r2, r2, #2
   29a68:	6839      	ldr	r1, [r7, #0]
   29a6a:	50d1      	str	r1, [r2, r3]
}
   29a6c:	46c0      	nop			; (mov r8, r8)
   29a6e:	46bd      	mov	sp, r7
   29a70:	b004      	add	sp, #16
   29a72:	bd80      	pop	{r7, pc}
   29a74:	20004136 	.word	0x20004136
   29a78:	20004138 	.word	0x20004138
   29a7c:	00029a05 	.word	0x00029a05
   29a80:	20005a84 	.word	0x20005a84

00029a84 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   29a84:	b590      	push	{r4, r7, lr}
   29a86:	b085      	sub	sp, #20
   29a88:	af00      	add	r7, sp, #0
   29a8a:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   29a8c:	2308      	movs	r3, #8
   29a8e:	18fb      	adds	r3, r7, r3
   29a90:	4a0b      	ldr	r2, [pc, #44]	; (29ac0 <_sercom_get_interrupt_vector+0x3c>)
   29a92:	6811      	ldr	r1, [r2, #0]
   29a94:	6019      	str	r1, [r3, #0]
   29a96:	8892      	ldrh	r2, [r2, #4]
   29a98:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   29a9a:	230f      	movs	r3, #15
   29a9c:	18fc      	adds	r4, r7, r3
   29a9e:	687b      	ldr	r3, [r7, #4]
   29aa0:	0018      	movs	r0, r3
   29aa2:	4b08      	ldr	r3, [pc, #32]	; (29ac4 <_sercom_get_interrupt_vector+0x40>)
   29aa4:	4798      	blx	r3
   29aa6:	0003      	movs	r3, r0
   29aa8:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   29aaa:	230f      	movs	r3, #15
   29aac:	18fb      	adds	r3, r7, r3
   29aae:	781b      	ldrb	r3, [r3, #0]
   29ab0:	2208      	movs	r2, #8
   29ab2:	18ba      	adds	r2, r7, r2
   29ab4:	5cd3      	ldrb	r3, [r2, r3]
   29ab6:	b25b      	sxtb	r3, r3
}
   29ab8:	0018      	movs	r0, r3
   29aba:	46bd      	mov	sp, r7
   29abc:	b005      	add	sp, #20
   29abe:	bd90      	pop	{r4, r7, pc}
   29ac0:	0003c7b4 	.word	0x0003c7b4
   29ac4:	000299b5 	.word	0x000299b5

00029ac8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   29ac8:	b580      	push	{r7, lr}
   29aca:	af00      	add	r7, sp, #0
   29acc:	4b03      	ldr	r3, [pc, #12]	; (29adc <SERCOM0_Handler+0x14>)
   29ace:	681b      	ldr	r3, [r3, #0]
   29ad0:	2000      	movs	r0, #0
   29ad2:	4798      	blx	r3
   29ad4:	46c0      	nop			; (mov r8, r8)
   29ad6:	46bd      	mov	sp, r7
   29ad8:	bd80      	pop	{r7, pc}
   29ada:	46c0      	nop			; (mov r8, r8)
   29adc:	20004138 	.word	0x20004138

00029ae0 <SERCOM1_Handler>:
   29ae0:	b580      	push	{r7, lr}
   29ae2:	af00      	add	r7, sp, #0
   29ae4:	4b03      	ldr	r3, [pc, #12]	; (29af4 <SERCOM1_Handler+0x14>)
   29ae6:	685b      	ldr	r3, [r3, #4]
   29ae8:	2001      	movs	r0, #1
   29aea:	4798      	blx	r3
   29aec:	46c0      	nop			; (mov r8, r8)
   29aee:	46bd      	mov	sp, r7
   29af0:	bd80      	pop	{r7, pc}
   29af2:	46c0      	nop			; (mov r8, r8)
   29af4:	20004138 	.word	0x20004138

00029af8 <SERCOM2_Handler>:
   29af8:	b580      	push	{r7, lr}
   29afa:	af00      	add	r7, sp, #0
   29afc:	4b03      	ldr	r3, [pc, #12]	; (29b0c <SERCOM2_Handler+0x14>)
   29afe:	689b      	ldr	r3, [r3, #8]
   29b00:	2002      	movs	r0, #2
   29b02:	4798      	blx	r3
   29b04:	46c0      	nop			; (mov r8, r8)
   29b06:	46bd      	mov	sp, r7
   29b08:	bd80      	pop	{r7, pc}
   29b0a:	46c0      	nop			; (mov r8, r8)
   29b0c:	20004138 	.word	0x20004138

00029b10 <SERCOM3_Handler>:
   29b10:	b580      	push	{r7, lr}
   29b12:	af00      	add	r7, sp, #0
   29b14:	4b03      	ldr	r3, [pc, #12]	; (29b24 <SERCOM3_Handler+0x14>)
   29b16:	68db      	ldr	r3, [r3, #12]
   29b18:	2003      	movs	r0, #3
   29b1a:	4798      	blx	r3
   29b1c:	46c0      	nop			; (mov r8, r8)
   29b1e:	46bd      	mov	sp, r7
   29b20:	bd80      	pop	{r7, pc}
   29b22:	46c0      	nop			; (mov r8, r8)
   29b24:	20004138 	.word	0x20004138

00029b28 <SERCOM4_Handler>:
   29b28:	b580      	push	{r7, lr}
   29b2a:	af00      	add	r7, sp, #0
   29b2c:	4b03      	ldr	r3, [pc, #12]	; (29b3c <SERCOM4_Handler+0x14>)
   29b2e:	691b      	ldr	r3, [r3, #16]
   29b30:	2004      	movs	r0, #4
   29b32:	4798      	blx	r3
   29b34:	46c0      	nop			; (mov r8, r8)
   29b36:	46bd      	mov	sp, r7
   29b38:	bd80      	pop	{r7, pc}
   29b3a:	46c0      	nop			; (mov r8, r8)
   29b3c:	20004138 	.word	0x20004138

00029b40 <SERCOM5_Handler>:
   29b40:	b580      	push	{r7, lr}
   29b42:	af00      	add	r7, sp, #0
   29b44:	4b03      	ldr	r3, [pc, #12]	; (29b54 <SERCOM5_Handler+0x14>)
   29b46:	695b      	ldr	r3, [r3, #20]
   29b48:	2005      	movs	r0, #5
   29b4a:	4798      	blx	r3
   29b4c:	46c0      	nop			; (mov r8, r8)
   29b4e:	46bd      	mov	sp, r7
   29b50:	bd80      	pop	{r7, pc}
   29b52:	46c0      	nop			; (mov r8, r8)
   29b54:	20004138 	.word	0x20004138

00029b58 <system_pinmux_get_config_defaults>:
{
   29b58:	b580      	push	{r7, lr}
   29b5a:	b082      	sub	sp, #8
   29b5c:	af00      	add	r7, sp, #0
   29b5e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   29b60:	687b      	ldr	r3, [r7, #4]
   29b62:	2280      	movs	r2, #128	; 0x80
   29b64:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29b66:	687b      	ldr	r3, [r7, #4]
   29b68:	2200      	movs	r2, #0
   29b6a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   29b6c:	687b      	ldr	r3, [r7, #4]
   29b6e:	2201      	movs	r2, #1
   29b70:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   29b72:	687b      	ldr	r3, [r7, #4]
   29b74:	2200      	movs	r2, #0
   29b76:	70da      	strb	r2, [r3, #3]
}
   29b78:	46c0      	nop			; (mov r8, r8)
   29b7a:	46bd      	mov	sp, r7
   29b7c:	b002      	add	sp, #8
   29b7e:	bd80      	pop	{r7, pc}

00029b80 <system_pinmux_get_group_from_gpio_pin>:
{
   29b80:	b580      	push	{r7, lr}
   29b82:	b084      	sub	sp, #16
   29b84:	af00      	add	r7, sp, #0
   29b86:	0002      	movs	r2, r0
   29b88:	1dfb      	adds	r3, r7, #7
   29b8a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   29b8c:	230f      	movs	r3, #15
   29b8e:	18fb      	adds	r3, r7, r3
   29b90:	1dfa      	adds	r2, r7, #7
   29b92:	7812      	ldrb	r2, [r2, #0]
   29b94:	09d2      	lsrs	r2, r2, #7
   29b96:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   29b98:	230e      	movs	r3, #14
   29b9a:	18fb      	adds	r3, r7, r3
   29b9c:	1dfa      	adds	r2, r7, #7
   29b9e:	7812      	ldrb	r2, [r2, #0]
   29ba0:	0952      	lsrs	r2, r2, #5
   29ba2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   29ba4:	4b0d      	ldr	r3, [pc, #52]	; (29bdc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   29ba6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   29ba8:	230f      	movs	r3, #15
   29baa:	18fb      	adds	r3, r7, r3
   29bac:	781b      	ldrb	r3, [r3, #0]
   29bae:	2b00      	cmp	r3, #0
   29bb0:	d10f      	bne.n	29bd2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   29bb2:	230f      	movs	r3, #15
   29bb4:	18fb      	adds	r3, r7, r3
   29bb6:	781b      	ldrb	r3, [r3, #0]
   29bb8:	009b      	lsls	r3, r3, #2
   29bba:	2210      	movs	r2, #16
   29bbc:	4694      	mov	ip, r2
   29bbe:	44bc      	add	ip, r7
   29bc0:	4463      	add	r3, ip
   29bc2:	3b08      	subs	r3, #8
   29bc4:	681a      	ldr	r2, [r3, #0]
   29bc6:	230e      	movs	r3, #14
   29bc8:	18fb      	adds	r3, r7, r3
   29bca:	781b      	ldrb	r3, [r3, #0]
   29bcc:	01db      	lsls	r3, r3, #7
   29bce:	18d3      	adds	r3, r2, r3
   29bd0:	e000      	b.n	29bd4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   29bd2:	2300      	movs	r3, #0
}
   29bd4:	0018      	movs	r0, r3
   29bd6:	46bd      	mov	sp, r7
   29bd8:	b004      	add	sp, #16
   29bda:	bd80      	pop	{r7, pc}
   29bdc:	41004400 	.word	0x41004400

00029be0 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
   29be0:	b580      	push	{r7, lr}
   29be2:	b086      	sub	sp, #24
   29be4:	af00      	add	r7, sp, #0
   29be6:	0002      	movs	r2, r0
   29be8:	1dfb      	adds	r3, r7, #7
   29bea:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   29bec:	1dfb      	adds	r3, r7, #7
   29bee:	781b      	ldrb	r3, [r3, #0]
   29bf0:	0018      	movs	r0, r3
   29bf2:	4b19      	ldr	r3, [pc, #100]	; (29c58 <system_pinmux_pin_get_mux_position+0x78>)
   29bf4:	4798      	blx	r3
   29bf6:	0003      	movs	r3, r0
   29bf8:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
   29bfa:	1dfb      	adds	r3, r7, #7
   29bfc:	781b      	ldrb	r3, [r3, #0]
   29bfe:	221f      	movs	r2, #31
   29c00:	4013      	ands	r3, r2
   29c02:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
   29c04:	697a      	ldr	r2, [r7, #20]
   29c06:	2140      	movs	r1, #64	; 0x40
   29c08:	693b      	ldr	r3, [r7, #16]
   29c0a:	18d3      	adds	r3, r2, r3
   29c0c:	185b      	adds	r3, r3, r1
   29c0e:	781b      	ldrb	r3, [r3, #0]
   29c10:	b2db      	uxtb	r3, r3
   29c12:	001a      	movs	r2, r3
   29c14:	2301      	movs	r3, #1
   29c16:	4013      	ands	r3, r2
   29c18:	d101      	bne.n	29c1e <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
   29c1a:	2380      	movs	r3, #128	; 0x80
   29c1c:	e018      	b.n	29c50 <system_pinmux_pin_get_mux_position+0x70>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
   29c1e:	693b      	ldr	r3, [r7, #16]
   29c20:	085b      	lsrs	r3, r3, #1
   29c22:	697a      	ldr	r2, [r7, #20]
   29c24:	2130      	movs	r1, #48	; 0x30
   29c26:	18d3      	adds	r3, r2, r3
   29c28:	185b      	adds	r3, r3, r1
   29c2a:	781b      	ldrb	r3, [r3, #0]
   29c2c:	b2db      	uxtb	r3, r3
   29c2e:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
   29c30:	693b      	ldr	r3, [r7, #16]
   29c32:	2201      	movs	r2, #1
   29c34:	4013      	ands	r3, r2
   29c36:	d006      	beq.n	29c46 <system_pinmux_pin_get_mux_position+0x66>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
   29c38:	68fb      	ldr	r3, [r7, #12]
   29c3a:	091b      	lsrs	r3, r3, #4
   29c3c:	b2db      	uxtb	r3, r3
   29c3e:	220f      	movs	r2, #15
   29c40:	4013      	ands	r3, r2
   29c42:	b2db      	uxtb	r3, r3
   29c44:	e004      	b.n	29c50 <system_pinmux_pin_get_mux_position+0x70>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
   29c46:	68fb      	ldr	r3, [r7, #12]
   29c48:	b2db      	uxtb	r3, r3
   29c4a:	220f      	movs	r2, #15
   29c4c:	4013      	ands	r3, r2
   29c4e:	b2db      	uxtb	r3, r3
	}
}
   29c50:	0018      	movs	r0, r3
   29c52:	46bd      	mov	sp, r7
   29c54:	b006      	add	sp, #24
   29c56:	bd80      	pop	{r7, pc}
   29c58:	00029b81 	.word	0x00029b81

00029c5c <port_get_group_from_gpio_pin>:
{
   29c5c:	b580      	push	{r7, lr}
   29c5e:	b082      	sub	sp, #8
   29c60:	af00      	add	r7, sp, #0
   29c62:	0002      	movs	r2, r0
   29c64:	1dfb      	adds	r3, r7, #7
   29c66:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   29c68:	1dfb      	adds	r3, r7, #7
   29c6a:	781b      	ldrb	r3, [r3, #0]
   29c6c:	0018      	movs	r0, r3
   29c6e:	4b03      	ldr	r3, [pc, #12]	; (29c7c <port_get_group_from_gpio_pin+0x20>)
   29c70:	4798      	blx	r3
   29c72:	0003      	movs	r3, r0
}
   29c74:	0018      	movs	r0, r3
   29c76:	46bd      	mov	sp, r7
   29c78:	b002      	add	sp, #8
   29c7a:	bd80      	pop	{r7, pc}
   29c7c:	00029b81 	.word	0x00029b81

00029c80 <port_pin_set_output_level>:
{
   29c80:	b580      	push	{r7, lr}
   29c82:	b084      	sub	sp, #16
   29c84:	af00      	add	r7, sp, #0
   29c86:	0002      	movs	r2, r0
   29c88:	1dfb      	adds	r3, r7, #7
   29c8a:	701a      	strb	r2, [r3, #0]
   29c8c:	1dbb      	adds	r3, r7, #6
   29c8e:	1c0a      	adds	r2, r1, #0
   29c90:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   29c92:	1dfb      	adds	r3, r7, #7
   29c94:	781b      	ldrb	r3, [r3, #0]
   29c96:	0018      	movs	r0, r3
   29c98:	4b0d      	ldr	r3, [pc, #52]	; (29cd0 <port_pin_set_output_level+0x50>)
   29c9a:	4798      	blx	r3
   29c9c:	0003      	movs	r3, r0
   29c9e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   29ca0:	1dfb      	adds	r3, r7, #7
   29ca2:	781b      	ldrb	r3, [r3, #0]
   29ca4:	221f      	movs	r2, #31
   29ca6:	4013      	ands	r3, r2
   29ca8:	2201      	movs	r2, #1
   29caa:	409a      	lsls	r2, r3
   29cac:	0013      	movs	r3, r2
   29cae:	60bb      	str	r3, [r7, #8]
	if (level) {
   29cb0:	1dbb      	adds	r3, r7, #6
   29cb2:	781b      	ldrb	r3, [r3, #0]
   29cb4:	2b00      	cmp	r3, #0
   29cb6:	d003      	beq.n	29cc0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   29cb8:	68fb      	ldr	r3, [r7, #12]
   29cba:	68ba      	ldr	r2, [r7, #8]
   29cbc:	619a      	str	r2, [r3, #24]
}
   29cbe:	e002      	b.n	29cc6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   29cc0:	68fb      	ldr	r3, [r7, #12]
   29cc2:	68ba      	ldr	r2, [r7, #8]
   29cc4:	615a      	str	r2, [r3, #20]
}
   29cc6:	46c0      	nop			; (mov r8, r8)
   29cc8:	46bd      	mov	sp, r7
   29cca:	b004      	add	sp, #16
   29ccc:	bd80      	pop	{r7, pc}
   29cce:	46c0      	nop			; (mov r8, r8)
   29cd0:	00029c5d 	.word	0x00029c5d

00029cd4 <system_gclk_chan_get_config_defaults>:
{
   29cd4:	b580      	push	{r7, lr}
   29cd6:	b082      	sub	sp, #8
   29cd8:	af00      	add	r7, sp, #0
   29cda:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29cdc:	687b      	ldr	r3, [r7, #4]
   29cde:	2200      	movs	r2, #0
   29ce0:	701a      	strb	r2, [r3, #0]
}
   29ce2:	46c0      	nop			; (mov r8, r8)
   29ce4:	46bd      	mov	sp, r7
   29ce6:	b002      	add	sp, #8
   29ce8:	bd80      	pop	{r7, pc}
	...

00029cec <system_apb_clock_set_mask>:
{
   29cec:	b580      	push	{r7, lr}
   29cee:	b082      	sub	sp, #8
   29cf0:	af00      	add	r7, sp, #0
   29cf2:	0002      	movs	r2, r0
   29cf4:	6039      	str	r1, [r7, #0]
   29cf6:	1dfb      	adds	r3, r7, #7
   29cf8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29cfa:	1dfb      	adds	r3, r7, #7
   29cfc:	781b      	ldrb	r3, [r3, #0]
   29cfe:	2b01      	cmp	r3, #1
   29d00:	d00a      	beq.n	29d18 <system_apb_clock_set_mask+0x2c>
   29d02:	2b02      	cmp	r3, #2
   29d04:	d00f      	beq.n	29d26 <system_apb_clock_set_mask+0x3a>
   29d06:	2b00      	cmp	r3, #0
   29d08:	d114      	bne.n	29d34 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   29d0a:	4b0e      	ldr	r3, [pc, #56]	; (29d44 <system_apb_clock_set_mask+0x58>)
   29d0c:	4a0d      	ldr	r2, [pc, #52]	; (29d44 <system_apb_clock_set_mask+0x58>)
   29d0e:	6991      	ldr	r1, [r2, #24]
   29d10:	683a      	ldr	r2, [r7, #0]
   29d12:	430a      	orrs	r2, r1
   29d14:	619a      	str	r2, [r3, #24]
			break;
   29d16:	e00f      	b.n	29d38 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29d18:	4b0a      	ldr	r3, [pc, #40]	; (29d44 <system_apb_clock_set_mask+0x58>)
   29d1a:	4a0a      	ldr	r2, [pc, #40]	; (29d44 <system_apb_clock_set_mask+0x58>)
   29d1c:	69d1      	ldr	r1, [r2, #28]
   29d1e:	683a      	ldr	r2, [r7, #0]
   29d20:	430a      	orrs	r2, r1
   29d22:	61da      	str	r2, [r3, #28]
			break;
   29d24:	e008      	b.n	29d38 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   29d26:	4b07      	ldr	r3, [pc, #28]	; (29d44 <system_apb_clock_set_mask+0x58>)
   29d28:	4a06      	ldr	r2, [pc, #24]	; (29d44 <system_apb_clock_set_mask+0x58>)
   29d2a:	6a11      	ldr	r1, [r2, #32]
   29d2c:	683a      	ldr	r2, [r7, #0]
   29d2e:	430a      	orrs	r2, r1
   29d30:	621a      	str	r2, [r3, #32]
			break;
   29d32:	e001      	b.n	29d38 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29d34:	2317      	movs	r3, #23
   29d36:	e000      	b.n	29d3a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29d38:	2300      	movs	r3, #0
}
   29d3a:	0018      	movs	r0, r3
   29d3c:	46bd      	mov	sp, r7
   29d3e:	b002      	add	sp, #8
   29d40:	bd80      	pop	{r7, pc}
   29d42:	46c0      	nop			; (mov r8, r8)
   29d44:	40000400 	.word	0x40000400

00029d48 <system_is_debugger_present>:
{
   29d48:	b580      	push	{r7, lr}
   29d4a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   29d4c:	4b05      	ldr	r3, [pc, #20]	; (29d64 <system_is_debugger_present+0x1c>)
   29d4e:	789b      	ldrb	r3, [r3, #2]
   29d50:	b2db      	uxtb	r3, r3
   29d52:	001a      	movs	r2, r3
   29d54:	2302      	movs	r3, #2
   29d56:	4013      	ands	r3, r2
   29d58:	1e5a      	subs	r2, r3, #1
   29d5a:	4193      	sbcs	r3, r2
   29d5c:	b2db      	uxtb	r3, r3
}
   29d5e:	0018      	movs	r0, r3
   29d60:	46bd      	mov	sp, r7
   29d62:	bd80      	pop	{r7, pc}
   29d64:	41002000 	.word	0x41002000

00029d68 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   29d68:	b580      	push	{r7, lr}
   29d6a:	b084      	sub	sp, #16
   29d6c:	af00      	add	r7, sp, #0
   29d6e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29d70:	687b      	ldr	r3, [r7, #4]
   29d72:	681b      	ldr	r3, [r3, #0]
   29d74:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   29d76:	68fb      	ldr	r3, [r7, #12]
   29d78:	69db      	ldr	r3, [r3, #28]
   29d7a:	1e5a      	subs	r2, r3, #1
   29d7c:	4193      	sbcs	r3, r2
   29d7e:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   29d80:	0018      	movs	r0, r3
   29d82:	46bd      	mov	sp, r7
   29d84:	b004      	add	sp, #16
   29d86:	bd80      	pop	{r7, pc}

00029d88 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   29d88:	b580      	push	{r7, lr}
   29d8a:	b084      	sub	sp, #16
   29d8c:	af00      	add	r7, sp, #0
   29d8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29d90:	687b      	ldr	r3, [r7, #4]
   29d92:	681b      	ldr	r3, [r3, #0]
   29d94:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
   29d96:	46c0      	nop			; (mov r8, r8)
   29d98:	687b      	ldr	r3, [r7, #4]
   29d9a:	0018      	movs	r0, r3
   29d9c:	4b06      	ldr	r3, [pc, #24]	; (29db8 <spi_enable+0x30>)
   29d9e:	4798      	blx	r3
   29da0:	1e03      	subs	r3, r0, #0
   29da2:	d1f9      	bne.n	29d98 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   29da4:	68fb      	ldr	r3, [r7, #12]
   29da6:	681b      	ldr	r3, [r3, #0]
   29da8:	2202      	movs	r2, #2
   29daa:	431a      	orrs	r2, r3
   29dac:	68fb      	ldr	r3, [r7, #12]
   29dae:	601a      	str	r2, [r3, #0]
}
   29db0:	46c0      	nop			; (mov r8, r8)
   29db2:	46bd      	mov	sp, r7
   29db4:	b004      	add	sp, #16
   29db6:	bd80      	pop	{r7, pc}
   29db8:	00029d69 	.word	0x00029d69

00029dbc <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   29dbc:	b580      	push	{r7, lr}
   29dbe:	b084      	sub	sp, #16
   29dc0:	af00      	add	r7, sp, #0
   29dc2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29dc4:	687b      	ldr	r3, [r7, #4]
   29dc6:	681b      	ldr	r3, [r3, #0]
   29dc8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
   29dca:	46c0      	nop			; (mov r8, r8)
   29dcc:	687b      	ldr	r3, [r7, #4]
   29dce:	0018      	movs	r0, r3
   29dd0:	4b0a      	ldr	r3, [pc, #40]	; (29dfc <spi_disable+0x40>)
   29dd2:	4798      	blx	r3
   29dd4:	1e03      	subs	r3, r0, #0
   29dd6:	d1f9      	bne.n	29dcc <spi_disable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   29dd8:	68fb      	ldr	r3, [r7, #12]
   29dda:	228f      	movs	r2, #143	; 0x8f
   29ddc:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   29dde:	68fb      	ldr	r3, [r7, #12]
   29de0:	228f      	movs	r2, #143	; 0x8f
   29de2:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   29de4:	68fb      	ldr	r3, [r7, #12]
   29de6:	681b      	ldr	r3, [r3, #0]
   29de8:	2202      	movs	r2, #2
   29dea:	4393      	bics	r3, r2
   29dec:	001a      	movs	r2, r3
   29dee:	68fb      	ldr	r3, [r7, #12]
   29df0:	601a      	str	r2, [r3, #0]
}
   29df2:	46c0      	nop			; (mov r8, r8)
   29df4:	46bd      	mov	sp, r7
   29df6:	b004      	add	sp, #16
   29df8:	bd80      	pop	{r7, pc}
   29dfa:	46c0      	nop			; (mov r8, r8)
   29dfc:	00029d69 	.word	0x00029d69

00029e00 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   29e00:	b580      	push	{r7, lr}
   29e02:	b084      	sub	sp, #16
   29e04:	af00      	add	r7, sp, #0
   29e06:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29e08:	687b      	ldr	r3, [r7, #4]
   29e0a:	681b      	ldr	r3, [r3, #0]
   29e0c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   29e0e:	68fb      	ldr	r3, [r7, #12]
   29e10:	7e1b      	ldrb	r3, [r3, #24]
   29e12:	b2db      	uxtb	r3, r3
   29e14:	001a      	movs	r2, r3
   29e16:	2302      	movs	r3, #2
   29e18:	4013      	ands	r3, r2
   29e1a:	1e5a      	subs	r2, r3, #1
   29e1c:	4193      	sbcs	r3, r2
   29e1e:	b2db      	uxtb	r3, r3
}
   29e20:	0018      	movs	r0, r3
   29e22:	46bd      	mov	sp, r7
   29e24:	b004      	add	sp, #16
   29e26:	bd80      	pop	{r7, pc}

00029e28 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   29e28:	b580      	push	{r7, lr}
   29e2a:	b084      	sub	sp, #16
   29e2c:	af00      	add	r7, sp, #0
   29e2e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29e30:	687b      	ldr	r3, [r7, #4]
   29e32:	681b      	ldr	r3, [r3, #0]
   29e34:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   29e36:	68fb      	ldr	r3, [r7, #12]
   29e38:	7e1b      	ldrb	r3, [r3, #24]
   29e3a:	b2db      	uxtb	r3, r3
   29e3c:	001a      	movs	r2, r3
   29e3e:	2301      	movs	r3, #1
   29e40:	4013      	ands	r3, r2
   29e42:	1e5a      	subs	r2, r3, #1
   29e44:	4193      	sbcs	r3, r2
   29e46:	b2db      	uxtb	r3, r3
}
   29e48:	0018      	movs	r0, r3
   29e4a:	46bd      	mov	sp, r7
   29e4c:	b004      	add	sp, #16
   29e4e:	bd80      	pop	{r7, pc}

00029e50 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   29e50:	b580      	push	{r7, lr}
   29e52:	b084      	sub	sp, #16
   29e54:	af00      	add	r7, sp, #0
   29e56:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29e58:	687b      	ldr	r3, [r7, #4]
   29e5a:	681b      	ldr	r3, [r3, #0]
   29e5c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   29e5e:	68fb      	ldr	r3, [r7, #12]
   29e60:	7e1b      	ldrb	r3, [r3, #24]
   29e62:	b2db      	uxtb	r3, r3
   29e64:	001a      	movs	r2, r3
   29e66:	2304      	movs	r3, #4
   29e68:	4013      	ands	r3, r2
   29e6a:	1e5a      	subs	r2, r3, #1
   29e6c:	4193      	sbcs	r3, r2
   29e6e:	b2db      	uxtb	r3, r3
}
   29e70:	0018      	movs	r0, r3
   29e72:	46bd      	mov	sp, r7
   29e74:	b004      	add	sp, #16
   29e76:	bd80      	pop	{r7, pc}

00029e78 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   29e78:	b580      	push	{r7, lr}
   29e7a:	b084      	sub	sp, #16
   29e7c:	af00      	add	r7, sp, #0
   29e7e:	6078      	str	r0, [r7, #4]
   29e80:	000a      	movs	r2, r1
   29e82:	1cbb      	adds	r3, r7, #2
   29e84:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29e86:	687b      	ldr	r3, [r7, #4]
   29e88:	681b      	ldr	r3, [r3, #0]
   29e8a:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   29e8c:	687b      	ldr	r3, [r7, #4]
   29e8e:	0018      	movs	r0, r3
   29e90:	4b0a      	ldr	r3, [pc, #40]	; (29ebc <spi_write+0x44>)
   29e92:	4798      	blx	r3
   29e94:	0003      	movs	r3, r0
   29e96:	001a      	movs	r2, r3
   29e98:	2301      	movs	r3, #1
   29e9a:	4053      	eors	r3, r2
   29e9c:	b2db      	uxtb	r3, r3
   29e9e:	2b00      	cmp	r3, #0
   29ea0:	d001      	beq.n	29ea6 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   29ea2:	2305      	movs	r3, #5
   29ea4:	e006      	b.n	29eb4 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   29ea6:	1cbb      	adds	r3, r7, #2
   29ea8:	881b      	ldrh	r3, [r3, #0]
   29eaa:	05db      	lsls	r3, r3, #23
   29eac:	0dda      	lsrs	r2, r3, #23
   29eae:	68fb      	ldr	r3, [r7, #12]
   29eb0:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   29eb2:	2300      	movs	r3, #0
}
   29eb4:	0018      	movs	r0, r3
   29eb6:	46bd      	mov	sp, r7
   29eb8:	b004      	add	sp, #16
   29eba:	bd80      	pop	{r7, pc}
   29ebc:	00029e29 	.word	0x00029e29

00029ec0 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   29ec0:	b580      	push	{r7, lr}
   29ec2:	b084      	sub	sp, #16
   29ec4:	af00      	add	r7, sp, #0
   29ec6:	6078      	str	r0, [r7, #4]
   29ec8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   29eca:	687b      	ldr	r3, [r7, #4]
   29ecc:	681b      	ldr	r3, [r3, #0]
   29ece:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   29ed0:	687b      	ldr	r3, [r7, #4]
   29ed2:	0018      	movs	r0, r3
   29ed4:	4b1b      	ldr	r3, [pc, #108]	; (29f44 <spi_read+0x84>)
   29ed6:	4798      	blx	r3
   29ed8:	0003      	movs	r3, r0
   29eda:	001a      	movs	r2, r3
   29edc:	2301      	movs	r3, #1
   29ede:	4053      	eors	r3, r2
   29ee0:	b2db      	uxtb	r3, r3
   29ee2:	2b00      	cmp	r3, #0
   29ee4:	d001      	beq.n	29eea <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   29ee6:	2310      	movs	r3, #16
   29ee8:	e027      	b.n	29f3a <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   29eea:	230f      	movs	r3, #15
   29eec:	18fb      	adds	r3, r7, r3
   29eee:	2200      	movs	r2, #0
   29ef0:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   29ef2:	68bb      	ldr	r3, [r7, #8]
   29ef4:	8b5b      	ldrh	r3, [r3, #26]
   29ef6:	b29b      	uxth	r3, r3
   29ef8:	001a      	movs	r2, r3
   29efa:	2304      	movs	r3, #4
   29efc:	4013      	ands	r3, r2
   29efe:	d006      	beq.n	29f0e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   29f00:	230f      	movs	r3, #15
   29f02:	18fb      	adds	r3, r7, r3
   29f04:	221e      	movs	r2, #30
   29f06:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   29f08:	68bb      	ldr	r3, [r7, #8]
   29f0a:	2204      	movs	r2, #4
   29f0c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   29f0e:	687b      	ldr	r3, [r7, #4]
   29f10:	799b      	ldrb	r3, [r3, #6]
   29f12:	2b01      	cmp	r3, #1
   29f14:	d108      	bne.n	29f28 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   29f16:	68bb      	ldr	r3, [r7, #8]
   29f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29f1a:	b29b      	uxth	r3, r3
   29f1c:	05db      	lsls	r3, r3, #23
   29f1e:	0ddb      	lsrs	r3, r3, #23
   29f20:	b29a      	uxth	r2, r3
   29f22:	683b      	ldr	r3, [r7, #0]
   29f24:	801a      	strh	r2, [r3, #0]
   29f26:	e005      	b.n	29f34 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   29f28:	68bb      	ldr	r3, [r7, #8]
   29f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29f2c:	b2db      	uxtb	r3, r3
   29f2e:	b29a      	uxth	r2, r3
   29f30:	683b      	ldr	r3, [r7, #0]
   29f32:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   29f34:	230f      	movs	r3, #15
   29f36:	18fb      	adds	r3, r7, r3
   29f38:	781b      	ldrb	r3, [r3, #0]
}
   29f3a:	0018      	movs	r0, r3
   29f3c:	46bd      	mov	sp, r7
   29f3e:	b004      	add	sp, #16
   29f40:	bd80      	pop	{r7, pc}
   29f42:	46c0      	nop			; (mov r8, r8)
   29f44:	00029e51 	.word	0x00029e51

00029f48 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   29f48:	b590      	push	{r4, r7, lr}
   29f4a:	b089      	sub	sp, #36	; 0x24
   29f4c:	af00      	add	r7, sp, #0
   29f4e:	6078      	str	r0, [r7, #4]
   29f50:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   29f52:	230c      	movs	r3, #12
   29f54:	18fb      	adds	r3, r7, r3
   29f56:	2200      	movs	r2, #0
   29f58:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   29f5a:	687b      	ldr	r3, [r7, #4]
   29f5c:	681b      	ldr	r3, [r3, #0]
   29f5e:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   29f60:	687b      	ldr	r3, [r7, #4]
   29f62:	0018      	movs	r0, r3
   29f64:	4b24      	ldr	r3, [pc, #144]	; (29ff8 <spi_set_baudrate+0xb0>)
   29f66:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   29f68:	46c0      	nop			; (mov r8, r8)
   29f6a:	687b      	ldr	r3, [r7, #4]
   29f6c:	0018      	movs	r0, r3
   29f6e:	4b23      	ldr	r3, [pc, #140]	; (29ffc <spi_set_baudrate+0xb4>)
   29f70:	4798      	blx	r3
   29f72:	1e03      	subs	r3, r0, #0
   29f74:	d1f9      	bne.n	29f6a <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   29f76:	687b      	ldr	r3, [r7, #4]
   29f78:	681b      	ldr	r3, [r3, #0]
   29f7a:	0018      	movs	r0, r3
   29f7c:	4b20      	ldr	r3, [pc, #128]	; (2a000 <spi_set_baudrate+0xb8>)
   29f7e:	4798      	blx	r3
   29f80:	0003      	movs	r3, r0
   29f82:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   29f84:	69bb      	ldr	r3, [r7, #24]
   29f86:	3314      	adds	r3, #20
   29f88:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   29f8a:	697b      	ldr	r3, [r7, #20]
   29f8c:	b2db      	uxtb	r3, r3
   29f8e:	0018      	movs	r0, r3
   29f90:	4b1c      	ldr	r3, [pc, #112]	; (2a004 <spi_set_baudrate+0xbc>)
   29f92:	4798      	blx	r3
   29f94:	0003      	movs	r3, r0
   29f96:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   29f98:	230f      	movs	r3, #15
   29f9a:	18fc      	adds	r4, r7, r3
   29f9c:	230c      	movs	r3, #12
   29f9e:	18fa      	adds	r2, r7, r3
   29fa0:	6939      	ldr	r1, [r7, #16]
   29fa2:	683b      	ldr	r3, [r7, #0]
   29fa4:	0018      	movs	r0, r3
   29fa6:	4b18      	ldr	r3, [pc, #96]	; (2a008 <spi_set_baudrate+0xc0>)
   29fa8:	4798      	blx	r3
   29faa:	0003      	movs	r3, r0
   29fac:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   29fae:	230f      	movs	r3, #15
   29fb0:	18fb      	adds	r3, r7, r3
   29fb2:	781b      	ldrb	r3, [r3, #0]
   29fb4:	2b00      	cmp	r3, #0
   29fb6:	d001      	beq.n	29fbc <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   29fb8:	2317      	movs	r3, #23
   29fba:	e018      	b.n	29fee <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   29fbc:	230c      	movs	r3, #12
   29fbe:	18fb      	adds	r3, r7, r3
   29fc0:	881b      	ldrh	r3, [r3, #0]
   29fc2:	b2da      	uxtb	r2, r3
   29fc4:	69fb      	ldr	r3, [r7, #28]
   29fc6:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   29fc8:	46c0      	nop			; (mov r8, r8)
   29fca:	687b      	ldr	r3, [r7, #4]
   29fcc:	0018      	movs	r0, r3
   29fce:	4b0b      	ldr	r3, [pc, #44]	; (29ffc <spi_set_baudrate+0xb4>)
   29fd0:	4798      	blx	r3
   29fd2:	1e03      	subs	r3, r0, #0
   29fd4:	d1f9      	bne.n	29fca <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   29fd6:	687b      	ldr	r3, [r7, #4]
   29fd8:	0018      	movs	r0, r3
   29fda:	4b0c      	ldr	r3, [pc, #48]	; (2a00c <spi_set_baudrate+0xc4>)
   29fdc:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   29fde:	46c0      	nop			; (mov r8, r8)
   29fe0:	687b      	ldr	r3, [r7, #4]
   29fe2:	0018      	movs	r0, r3
   29fe4:	4b05      	ldr	r3, [pc, #20]	; (29ffc <spi_set_baudrate+0xb4>)
   29fe6:	4798      	blx	r3
   29fe8:	1e03      	subs	r3, r0, #0
   29fea:	d1f9      	bne.n	29fe0 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   29fec:	2300      	movs	r3, #0
}
   29fee:	0018      	movs	r0, r3
   29ff0:	46bd      	mov	sp, r7
   29ff2:	b009      	add	sp, #36	; 0x24
   29ff4:	bd90      	pop	{r4, r7, pc}
   29ff6:	46c0      	nop			; (mov r8, r8)
   29ff8:	00029dbd 	.word	0x00029dbd
   29ffc:	00029d69 	.word	0x00029d69
   2a000:	000299b5 	.word	0x000299b5
   2a004:	0002c3c5 	.word	0x0002c3c5
   2a008:	0002952f 	.word	0x0002952f
   2a00c:	00029d89 	.word	0x00029d89

0002a010 <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
   2a010:	b580      	push	{r7, lr}
   2a012:	b084      	sub	sp, #16
   2a014:	af00      	add	r7, sp, #0
   2a016:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2a018:	687b      	ldr	r3, [r7, #4]
   2a01a:	681b      	ldr	r3, [r3, #0]
   2a01c:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   2a01e:	68fb      	ldr	r3, [r7, #12]
   2a020:	2202      	movs	r2, #2
   2a022:	761a      	strb	r2, [r3, #24]
}
   2a024:	46c0      	nop			; (mov r8, r8)
   2a026:	46bd      	mov	sp, r7
   2a028:	b004      	add	sp, #16
   2a02a:	bd80      	pop	{r7, pc}

0002a02c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   2a02c:	b590      	push	{r4, r7, lr}
   2a02e:	b093      	sub	sp, #76	; 0x4c
   2a030:	af00      	add	r7, sp, #0
   2a032:	6078      	str	r0, [r7, #4]
   2a034:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2a036:	687b      	ldr	r3, [r7, #4]
   2a038:	681b      	ldr	r3, [r3, #0]
   2a03a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   2a03c:	687b      	ldr	r3, [r7, #4]
   2a03e:	681b      	ldr	r3, [r3, #0]
   2a040:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   2a042:	231c      	movs	r3, #28
   2a044:	18fb      	adds	r3, r7, r3
   2a046:	0018      	movs	r0, r3
   2a048:	4b85      	ldr	r3, [pc, #532]	; (2a260 <_spi_set_config+0x234>)
   2a04a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2a04c:	231c      	movs	r3, #28
   2a04e:	18fb      	adds	r3, r7, r3
   2a050:	2200      	movs	r2, #0
   2a052:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   2a054:	683b      	ldr	r3, [r7, #0]
   2a056:	781b      	ldrb	r3, [r3, #0]
   2a058:	2b00      	cmp	r3, #0
   2a05a:	d103      	bne.n	2a064 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   2a05c:	231c      	movs	r3, #28
   2a05e:	18fb      	adds	r3, r7, r3
   2a060:	2200      	movs	r2, #0
   2a062:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   2a064:	683b      	ldr	r3, [r7, #0]
   2a066:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   2a068:	230c      	movs	r3, #12
   2a06a:	18fb      	adds	r3, r7, r3
   2a06c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2a06e:	683b      	ldr	r3, [r7, #0]
   2a070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   2a072:	230c      	movs	r3, #12
   2a074:	18fb      	adds	r3, r7, r3
   2a076:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   2a078:	683b      	ldr	r3, [r7, #0]
   2a07a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   2a07c:	230c      	movs	r3, #12
   2a07e:	18fb      	adds	r3, r7, r3
   2a080:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2a082:	683b      	ldr	r3, [r7, #0]
   2a084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2a086:	230c      	movs	r3, #12
   2a088:	18fb      	adds	r3, r7, r3
   2a08a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   2a08c:	2347      	movs	r3, #71	; 0x47
   2a08e:	18fb      	adds	r3, r7, r3
   2a090:	2200      	movs	r2, #0
   2a092:	701a      	strb	r2, [r3, #0]
   2a094:	e02c      	b.n	2a0f0 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   2a096:	2347      	movs	r3, #71	; 0x47
   2a098:	18fb      	adds	r3, r7, r3
   2a09a:	781a      	ldrb	r2, [r3, #0]
   2a09c:	230c      	movs	r3, #12
   2a09e:	18fb      	adds	r3, r7, r3
   2a0a0:	0092      	lsls	r2, r2, #2
   2a0a2:	58d3      	ldr	r3, [r2, r3]
   2a0a4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   2a0a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2a0a8:	2b00      	cmp	r3, #0
   2a0aa:	d109      	bne.n	2a0c0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2a0ac:	2347      	movs	r3, #71	; 0x47
   2a0ae:	18fb      	adds	r3, r7, r3
   2a0b0:	781a      	ldrb	r2, [r3, #0]
   2a0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a0b4:	0011      	movs	r1, r2
   2a0b6:	0018      	movs	r0, r3
   2a0b8:	4b6a      	ldr	r3, [pc, #424]	; (2a264 <_spi_set_config+0x238>)
   2a0ba:	4798      	blx	r3
   2a0bc:	0003      	movs	r3, r0
   2a0be:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   2a0c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2a0c2:	3301      	adds	r3, #1
   2a0c4:	d00d      	beq.n	2a0e2 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   2a0c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2a0c8:	b2da      	uxtb	r2, r3
   2a0ca:	231c      	movs	r3, #28
   2a0cc:	18fb      	adds	r3, r7, r3
   2a0ce:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   2a0d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2a0d2:	0c1b      	lsrs	r3, r3, #16
   2a0d4:	b2db      	uxtb	r3, r3
   2a0d6:	221c      	movs	r2, #28
   2a0d8:	18ba      	adds	r2, r7, r2
   2a0da:	0011      	movs	r1, r2
   2a0dc:	0018      	movs	r0, r3
   2a0de:	4b62      	ldr	r3, [pc, #392]	; (2a268 <_spi_set_config+0x23c>)
   2a0e0:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   2a0e2:	2347      	movs	r3, #71	; 0x47
   2a0e4:	18fb      	adds	r3, r7, r3
   2a0e6:	781a      	ldrb	r2, [r3, #0]
   2a0e8:	2347      	movs	r3, #71	; 0x47
   2a0ea:	18fb      	adds	r3, r7, r3
   2a0ec:	3201      	adds	r2, #1
   2a0ee:	701a      	strb	r2, [r3, #0]
   2a0f0:	2347      	movs	r3, #71	; 0x47
   2a0f2:	18fb      	adds	r3, r7, r3
   2a0f4:	781b      	ldrb	r3, [r3, #0]
   2a0f6:	2b03      	cmp	r3, #3
   2a0f8:	d9cd      	bls.n	2a096 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   2a0fa:	683b      	ldr	r3, [r7, #0]
   2a0fc:	781a      	ldrb	r2, [r3, #0]
   2a0fe:	687b      	ldr	r3, [r7, #4]
   2a100:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   2a102:	683b      	ldr	r3, [r7, #0]
   2a104:	7c1a      	ldrb	r2, [r3, #16]
   2a106:	687b      	ldr	r3, [r7, #4]
   2a108:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   2a10a:	683b      	ldr	r3, [r7, #0]
   2a10c:	7c9a      	ldrb	r2, [r3, #18]
   2a10e:	687b      	ldr	r3, [r7, #4]
   2a110:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   2a112:	683b      	ldr	r3, [r7, #0]
   2a114:	7d1a      	ldrb	r2, [r3, #20]
   2a116:	687b      	ldr	r3, [r7, #4]
   2a118:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   2a11a:	230a      	movs	r3, #10
   2a11c:	18fb      	adds	r3, r7, r3
   2a11e:	2200      	movs	r2, #0
   2a120:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   2a122:	2300      	movs	r3, #0
   2a124:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   2a126:	2300      	movs	r3, #0
   2a128:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   2a12a:	683b      	ldr	r3, [r7, #0]
   2a12c:	781b      	ldrb	r3, [r3, #0]
   2a12e:	2b01      	cmp	r3, #1
   2a130:	d129      	bne.n	2a186 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2a132:	687b      	ldr	r3, [r7, #4]
   2a134:	681b      	ldr	r3, [r3, #0]
   2a136:	0018      	movs	r0, r3
   2a138:	4b4c      	ldr	r3, [pc, #304]	; (2a26c <_spi_set_config+0x240>)
   2a13a:	4798      	blx	r3
   2a13c:	0003      	movs	r3, r0
   2a13e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2a140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a142:	3314      	adds	r3, #20
   2a144:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   2a146:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a148:	b2db      	uxtb	r3, r3
   2a14a:	0018      	movs	r0, r3
   2a14c:	4b48      	ldr	r3, [pc, #288]	; (2a270 <_spi_set_config+0x244>)
   2a14e:	4798      	blx	r3
   2a150:	0003      	movs	r3, r0
   2a152:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   2a154:	683b      	ldr	r3, [r7, #0]
   2a156:	699b      	ldr	r3, [r3, #24]
   2a158:	2223      	movs	r2, #35	; 0x23
   2a15a:	18bc      	adds	r4, r7, r2
   2a15c:	220a      	movs	r2, #10
   2a15e:	18ba      	adds	r2, r7, r2
   2a160:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2a162:	0018      	movs	r0, r3
   2a164:	4b43      	ldr	r3, [pc, #268]	; (2a274 <_spi_set_config+0x248>)
   2a166:	4798      	blx	r3
   2a168:	0003      	movs	r3, r0
   2a16a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   2a16c:	2323      	movs	r3, #35	; 0x23
   2a16e:	18fb      	adds	r3, r7, r3
   2a170:	781b      	ldrb	r3, [r3, #0]
   2a172:	2b00      	cmp	r3, #0
   2a174:	d001      	beq.n	2a17a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   2a176:	2317      	movs	r3, #23
   2a178:	e06d      	b.n	2a256 <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   2a17a:	230a      	movs	r3, #10
   2a17c:	18fb      	adds	r3, r7, r3
   2a17e:	881b      	ldrh	r3, [r3, #0]
   2a180:	b2da      	uxtb	r2, r3
   2a182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a184:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
   2a186:	683b      	ldr	r3, [r7, #0]
   2a188:	781b      	ldrb	r3, [r3, #0]
   2a18a:	2b00      	cmp	r3, #0
   2a18c:	d11a      	bne.n	2a1c4 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
   2a18e:	683b      	ldr	r3, [r7, #0]
   2a190:	699b      	ldr	r3, [r3, #24]
   2a192:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
   2a194:	683b      	ldr	r3, [r7, #0]
   2a196:	8b9b      	ldrh	r3, [r3, #28]
   2a198:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
   2a19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   2a19e:	683a      	ldr	r2, [r7, #0]
   2a1a0:	7f92      	ldrb	r2, [r2, #30]
   2a1a2:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
   2a1a4:	683a      	ldr	r2, [r7, #0]
   2a1a6:	7fd2      	ldrb	r2, [r2, #31]
   2a1a8:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   2a1aa:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
   2a1ac:	431a      	orrs	r2, r3
   2a1ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a1b0:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
   2a1b2:	683b      	ldr	r3, [r7, #0]
   2a1b4:	2220      	movs	r2, #32
   2a1b6:	5c9b      	ldrb	r3, [r3, r2]
   2a1b8:	2b00      	cmp	r3, #0
   2a1ba:	d003      	beq.n	2a1c4 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
   2a1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a1be:	2240      	movs	r2, #64	; 0x40
   2a1c0:	4313      	orrs	r3, r2
   2a1c2:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   2a1c4:	683b      	ldr	r3, [r7, #0]
   2a1c6:	685b      	ldr	r3, [r3, #4]
   2a1c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a1ca:	4313      	orrs	r3, r2
   2a1cc:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   2a1ce:	683b      	ldr	r3, [r7, #0]
   2a1d0:	689b      	ldr	r3, [r3, #8]
   2a1d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a1d4:	4313      	orrs	r3, r2
   2a1d6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   2a1d8:	683b      	ldr	r3, [r7, #0]
   2a1da:	68db      	ldr	r3, [r3, #12]
   2a1dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a1de:	4313      	orrs	r3, r2
   2a1e0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   2a1e2:	683b      	ldr	r3, [r7, #0]
   2a1e4:	7c1b      	ldrb	r3, [r3, #16]
   2a1e6:	001a      	movs	r2, r3
   2a1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a1ea:	4313      	orrs	r3, r2
   2a1ec:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   2a1ee:	683b      	ldr	r3, [r7, #0]
   2a1f0:	7c5b      	ldrb	r3, [r3, #17]
   2a1f2:	2b00      	cmp	r3, #0
   2a1f4:	d103      	bne.n	2a1fe <_spi_set_config+0x1d2>
   2a1f6:	4b20      	ldr	r3, [pc, #128]	; (2a278 <_spi_set_config+0x24c>)
   2a1f8:	4798      	blx	r3
   2a1fa:	1e03      	subs	r3, r0, #0
   2a1fc:	d003      	beq.n	2a206 <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   2a1fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a200:	2280      	movs	r2, #128	; 0x80
   2a202:	4313      	orrs	r3, r2
   2a204:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   2a206:	683b      	ldr	r3, [r7, #0]
   2a208:	7c9b      	ldrb	r3, [r3, #18]
   2a20a:	2b00      	cmp	r3, #0
   2a20c:	d004      	beq.n	2a218 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   2a20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a210:	2280      	movs	r2, #128	; 0x80
   2a212:	0292      	lsls	r2, r2, #10
   2a214:	4313      	orrs	r3, r2
   2a216:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   2a218:	683b      	ldr	r3, [r7, #0]
   2a21a:	7cdb      	ldrb	r3, [r3, #19]
   2a21c:	2b00      	cmp	r3, #0
   2a21e:	d004      	beq.n	2a22a <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   2a220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a222:	2280      	movs	r2, #128	; 0x80
   2a224:	0092      	lsls	r2, r2, #2
   2a226:	4313      	orrs	r3, r2
   2a228:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   2a22a:	683b      	ldr	r3, [r7, #0]
   2a22c:	7d1b      	ldrb	r3, [r3, #20]
   2a22e:	2b00      	cmp	r3, #0
   2a230:	d004      	beq.n	2a23c <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   2a232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a234:	2280      	movs	r2, #128	; 0x80
   2a236:	0192      	lsls	r2, r2, #6
   2a238:	4313      	orrs	r3, r2
   2a23a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   2a23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a23e:	681a      	ldr	r2, [r3, #0]
   2a240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a242:	431a      	orrs	r2, r3
   2a244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a246:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   2a248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a24a:	685a      	ldr	r2, [r3, #4]
   2a24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a24e:	431a      	orrs	r2, r3
   2a250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a252:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   2a254:	2300      	movs	r3, #0
}
   2a256:	0018      	movs	r0, r3
   2a258:	46bd      	mov	sp, r7
   2a25a:	b013      	add	sp, #76	; 0x4c
   2a25c:	bd90      	pop	{r4, r7, pc}
   2a25e:	46c0      	nop			; (mov r8, r8)
   2a260:	00029b59 	.word	0x00029b59
   2a264:	000297f9 	.word	0x000297f9
   2a268:	0002c601 	.word	0x0002c601
   2a26c:	000299b5 	.word	0x000299b5
   2a270:	0002c3c5 	.word	0x0002c3c5
   2a274:	0002952f 	.word	0x0002952f
   2a278:	00029d49 	.word	0x00029d49

0002a27c <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   2a27c:	b590      	push	{r4, r7, lr}
   2a27e:	b091      	sub	sp, #68	; 0x44
   2a280:	af00      	add	r7, sp, #0
   2a282:	6078      	str	r0, [r7, #4]
   2a284:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2a286:	687b      	ldr	r3, [r7, #4]
   2a288:	681b      	ldr	r3, [r3, #0]
   2a28a:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
   2a28c:	687b      	ldr	r3, [r7, #4]
   2a28e:	681b      	ldr	r3, [r3, #0]
   2a290:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
   2a292:	683b      	ldr	r3, [r7, #0]
   2a294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   2a296:	230c      	movs	r3, #12
   2a298:	18fb      	adds	r3, r7, r3
   2a29a:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
   2a29c:	683b      	ldr	r3, [r7, #0]
   2a29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   2a2a0:	230c      	movs	r3, #12
   2a2a2:	18fb      	adds	r3, r7, r3
   2a2a4:	605a      	str	r2, [r3, #4]
		config->pinmux_pad2, config->pinmux_pad3
   2a2a6:	683b      	ldr	r3, [r7, #0]
   2a2a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   2a2aa:	230c      	movs	r3, #12
   2a2ac:	18fb      	adds	r3, r7, r3
   2a2ae:	609a      	str	r2, [r3, #8]
		config->pinmux_pad2, config->pinmux_pad3
   2a2b0:	683b      	ldr	r3, [r7, #0]
   2a2b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2a2b4:	230c      	movs	r3, #12
   2a2b6:	18fb      	adds	r3, r7, r3
   2a2b8:	60da      	str	r2, [r3, #12]
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   2a2ba:	233f      	movs	r3, #63	; 0x3f
   2a2bc:	18fb      	adds	r3, r7, r3
   2a2be:	2200      	movs	r2, #0
   2a2c0:	701a      	strb	r2, [r3, #0]
   2a2c2:	e030      	b.n	2a326 <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   2a2c4:	233f      	movs	r3, #63	; 0x3f
   2a2c6:	18fb      	adds	r3, r7, r3
   2a2c8:	781a      	ldrb	r2, [r3, #0]
   2a2ca:	230c      	movs	r3, #12
   2a2cc:	18fb      	adds	r3, r7, r3
   2a2ce:	0092      	lsls	r2, r2, #2
   2a2d0:	58d3      	ldr	r3, [r2, r3]
   2a2d2:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
   2a2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a2d6:	2b00      	cmp	r3, #0
   2a2d8:	d109      	bne.n	2a2ee <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2a2da:	233f      	movs	r3, #63	; 0x3f
   2a2dc:	18fb      	adds	r3, r7, r3
   2a2de:	781a      	ldrb	r2, [r3, #0]
   2a2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2a2e2:	0011      	movs	r1, r2
   2a2e4:	0018      	movs	r0, r3
   2a2e6:	4b6e      	ldr	r3, [pc, #440]	; (2a4a0 <_spi_check_config+0x224>)
   2a2e8:	4798      	blx	r3
   2a2ea:	0003      	movs	r3, r0
   2a2ec:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
   2a2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a2f0:	3301      	adds	r3, #1
   2a2f2:	d010      	beq.n	2a316 <_spi_check_config+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
   2a2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a2f6:	041b      	lsls	r3, r3, #16
   2a2f8:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
   2a2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2a2fc:	0c1b      	lsrs	r3, r3, #16
   2a2fe:	b2db      	uxtb	r3, r3
   2a300:	0018      	movs	r0, r3
   2a302:	4b68      	ldr	r3, [pc, #416]	; (2a4a4 <_spi_check_config+0x228>)
   2a304:	4798      	blx	r3
   2a306:	0003      	movs	r3, r0
		if ((current_pinmux & 0xFFFF) !=
   2a308:	429c      	cmp	r4, r3
   2a30a:	d005      	beq.n	2a318 <_spi_check_config+0x9c>
			module->hw = NULL;
   2a30c:	687b      	ldr	r3, [r7, #4]
   2a30e:	2200      	movs	r2, #0
   2a310:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
   2a312:	231c      	movs	r3, #28
   2a314:	e0bf      	b.n	2a496 <_spi_check_config+0x21a>
			continue;
   2a316:	46c0      	nop			; (mov r8, r8)
	for (uint8_t pad = 0; pad < 4; pad++) {
   2a318:	233f      	movs	r3, #63	; 0x3f
   2a31a:	18fb      	adds	r3, r7, r3
   2a31c:	781a      	ldrb	r2, [r3, #0]
   2a31e:	233f      	movs	r3, #63	; 0x3f
   2a320:	18fb      	adds	r3, r7, r3
   2a322:	3201      	adds	r2, #1
   2a324:	701a      	strb	r2, [r3, #0]
   2a326:	233f      	movs	r3, #63	; 0x3f
   2a328:	18fb      	adds	r3, r7, r3
   2a32a:	781b      	ldrb	r3, [r3, #0]
   2a32c:	2b03      	cmp	r3, #3
   2a32e:	d9c9      	bls.n	2a2c4 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
   2a330:	2013      	movs	r0, #19
   2a332:	4b5d      	ldr	r3, [pc, #372]	; (2a4a8 <_spi_check_config+0x22c>)
   2a334:	4798      	blx	r3
   2a336:	0003      	movs	r3, r0
   2a338:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
   2a33a:	2300      	movs	r3, #0
   2a33c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
   2a33e:	2300      	movs	r3, #0
   2a340:	633b      	str	r3, [r7, #48]	; 0x30
#  if CONF_SPI_SLAVE_ENABLE == true
	uint32_t addr = 0;
   2a342:	2300      	movs	r3, #0
   2a344:	623b      	str	r3, [r7, #32]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
   2a346:	683b      	ldr	r3, [r7, #0]
   2a348:	781b      	ldrb	r3, [r3, #0]
   2a34a:	2b01      	cmp	r3, #1
   2a34c:	d121      	bne.n	2a392 <_spi_check_config+0x116>
		enum status_code error_code = _sercom_get_sync_baud_val(
   2a34e:	683b      	ldr	r3, [r7, #0]
   2a350:	699b      	ldr	r3, [r3, #24]
   2a352:	221f      	movs	r2, #31
   2a354:	18bc      	adds	r4, r7, r2
   2a356:	220a      	movs	r2, #10
   2a358:	18ba      	adds	r2, r7, r2
   2a35a:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2a35c:	0018      	movs	r0, r3
   2a35e:	4b53      	ldr	r3, [pc, #332]	; (2a4ac <_spi_check_config+0x230>)
   2a360:	4798      	blx	r3
   2a362:	0003      	movs	r3, r0
   2a364:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
   2a366:	231f      	movs	r3, #31
   2a368:	18fb      	adds	r3, r7, r3
   2a36a:	781b      	ldrb	r3, [r3, #0]
   2a36c:	2b00      	cmp	r3, #0
   2a36e:	d001      	beq.n	2a374 <_spi_check_config+0xf8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   2a370:	2317      	movs	r3, #23
   2a372:	e090      	b.n	2a496 <_spi_check_config+0x21a>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
   2a374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a376:	7b1b      	ldrb	r3, [r3, #12]
   2a378:	b2da      	uxtb	r2, r3
   2a37a:	230a      	movs	r3, #10
   2a37c:	18fb      	adds	r3, r7, r3
   2a37e:	881b      	ldrh	r3, [r3, #0]
   2a380:	b2db      	uxtb	r3, r3
   2a382:	429a      	cmp	r2, r3
   2a384:	d001      	beq.n	2a38a <_spi_check_config+0x10e>
			return STATUS_ERR_DENIED;
   2a386:	231c      	movs	r3, #28
   2a388:	e085      	b.n	2a496 <_spi_check_config+0x21a>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
   2a38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a38c:	220c      	movs	r2, #12
   2a38e:	4313      	orrs	r3, r2
   2a390:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
   2a392:	683b      	ldr	r3, [r7, #0]
   2a394:	781b      	ldrb	r3, [r3, #0]
   2a396:	2b00      	cmp	r3, #0
   2a398:	d129      	bne.n	2a3ee <_spi_check_config+0x172>

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
   2a39a:	683b      	ldr	r3, [r7, #0]
   2a39c:	699b      	ldr	r3, [r3, #24]
   2a39e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2a3a0:	4313      	orrs	r3, r2
   2a3a2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
   2a3a4:	683b      	ldr	r3, [r7, #0]
   2a3a6:	8b9b      	ldrh	r3, [r3, #28]
   2a3a8:	001a      	movs	r2, r3
   2a3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a3ac:	4313      	orrs	r3, r2
   2a3ae:	633b      	str	r3, [r7, #48]	; 0x30

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   2a3b0:	683b      	ldr	r3, [r7, #0]
   2a3b2:	7f9b      	ldrb	r3, [r3, #30]
   2a3b4:	001a      	movs	r2, r3
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
   2a3b6:	683b      	ldr	r3, [r7, #0]
   2a3b8:	7fdb      	ldrb	r3, [r3, #31]
   2a3ba:	041b      	lsls	r3, r3, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   2a3bc:	4313      	orrs	r3, r2
   2a3be:	001a      	movs	r2, r3
   2a3c0:	6a3b      	ldr	r3, [r7, #32]
   2a3c2:	4313      	orrs	r3, r2
   2a3c4:	623b      	str	r3, [r7, #32]
		if (spi_module->CTRLA.reg != addr) {
   2a3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a3c8:	681a      	ldr	r2, [r3, #0]
   2a3ca:	6a3b      	ldr	r3, [r7, #32]
   2a3cc:	429a      	cmp	r2, r3
   2a3ce:	d001      	beq.n	2a3d4 <_spi_check_config+0x158>
			return STATUS_ERR_DENIED;
   2a3d0:	231c      	movs	r3, #28
   2a3d2:	e060      	b.n	2a496 <_spi_check_config+0x21a>
		}

		if (config->mode_specific.slave.preload_enable) {
   2a3d4:	683b      	ldr	r3, [r7, #0]
   2a3d6:	2220      	movs	r2, #32
   2a3d8:	5c9b      	ldrb	r3, [r3, r2]
   2a3da:	2b00      	cmp	r3, #0
   2a3dc:	d003      	beq.n	2a3e6 <_spi_check_config+0x16a>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
   2a3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a3e0:	2240      	movs	r2, #64	; 0x40
   2a3e2:	4313      	orrs	r3, r2
   2a3e4:	633b      	str	r3, [r7, #48]	; 0x30
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
   2a3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a3e8:	2208      	movs	r2, #8
   2a3ea:	4313      	orrs	r3, r2
   2a3ec:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
   2a3ee:	683b      	ldr	r3, [r7, #0]
   2a3f0:	685b      	ldr	r3, [r3, #4]
   2a3f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2a3f4:	4313      	orrs	r3, r2
   2a3f6:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   2a3f8:	683b      	ldr	r3, [r7, #0]
   2a3fa:	689b      	ldr	r3, [r3, #8]
   2a3fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2a3fe:	4313      	orrs	r3, r2
   2a400:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   2a402:	683b      	ldr	r3, [r7, #0]
   2a404:	68db      	ldr	r3, [r3, #12]
   2a406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2a408:	4313      	orrs	r3, r2
   2a40a:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
   2a40c:	683b      	ldr	r3, [r7, #0]
   2a40e:	7c1b      	ldrb	r3, [r3, #16]
   2a410:	001a      	movs	r2, r3
   2a412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a414:	4313      	orrs	r3, r2
   2a416:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
   2a418:	683b      	ldr	r3, [r7, #0]
   2a41a:	7c5b      	ldrb	r3, [r3, #17]
   2a41c:	2b00      	cmp	r3, #0
   2a41e:	d003      	beq.n	2a428 <_spi_check_config+0x1ac>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   2a420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a422:	2280      	movs	r2, #128	; 0x80
   2a424:	4313      	orrs	r3, r2
   2a426:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
   2a428:	683b      	ldr	r3, [r7, #0]
   2a42a:	7c9b      	ldrb	r3, [r3, #18]
   2a42c:	2b00      	cmp	r3, #0
   2a42e:	d004      	beq.n	2a43a <_spi_check_config+0x1be>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   2a430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a432:	2280      	movs	r2, #128	; 0x80
   2a434:	0292      	lsls	r2, r2, #10
   2a436:	4313      	orrs	r3, r2
   2a438:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   2a43a:	683b      	ldr	r3, [r7, #0]
   2a43c:	7cdb      	ldrb	r3, [r3, #19]
   2a43e:	2b00      	cmp	r3, #0
   2a440:	d004      	beq.n	2a44c <_spi_check_config+0x1d0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   2a442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a444:	2280      	movs	r2, #128	; 0x80
   2a446:	0092      	lsls	r2, r2, #2
   2a448:	4313      	orrs	r3, r2
   2a44a:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   2a44c:	683b      	ldr	r3, [r7, #0]
   2a44e:	7d1b      	ldrb	r3, [r3, #20]
   2a450:	2b00      	cmp	r3, #0
   2a452:	d004      	beq.n	2a45e <_spi_check_config+0x1e2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   2a454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a456:	2280      	movs	r2, #128	; 0x80
   2a458:	0192      	lsls	r2, r2, #6
   2a45a:	4313      	orrs	r3, r2
   2a45c:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
   2a45e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a460:	2202      	movs	r2, #2
   2a462:	4313      	orrs	r3, r2
   2a464:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
   2a466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a468:	681a      	ldr	r2, [r3, #0]
   2a46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a46c:	429a      	cmp	r2, r3
   2a46e:	d10e      	bne.n	2a48e <_spi_check_config+0x212>
			spi_module->CTRLB.reg == ctrlb) {
   2a470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a472:	685a      	ldr	r2, [r3, #4]
	if (spi_module->CTRLA.reg == ctrla &&
   2a474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2a476:	429a      	cmp	r2, r3
   2a478:	d109      	bne.n	2a48e <_spi_check_config+0x212>
		module->mode           = config->mode;
   2a47a:	683b      	ldr	r3, [r7, #0]
   2a47c:	781a      	ldrb	r2, [r3, #0]
   2a47e:	687b      	ldr	r3, [r7, #4]
   2a480:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
   2a482:	683b      	ldr	r3, [r7, #0]
   2a484:	7c1a      	ldrb	r2, [r3, #16]
   2a486:	687b      	ldr	r3, [r7, #4]
   2a488:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
   2a48a:	2300      	movs	r3, #0
   2a48c:	e003      	b.n	2a496 <_spi_check_config+0x21a>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
   2a48e:	687b      	ldr	r3, [r7, #4]
   2a490:	2200      	movs	r2, #0
   2a492:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
   2a494:	231c      	movs	r3, #28
}
   2a496:	0018      	movs	r0, r3
   2a498:	46bd      	mov	sp, r7
   2a49a:	b011      	add	sp, #68	; 0x44
   2a49c:	bd90      	pop	{r4, r7, pc}
   2a49e:	46c0      	nop			; (mov r8, r8)
   2a4a0:	000297f9 	.word	0x000297f9
   2a4a4:	00029be1 	.word	0x00029be1
   2a4a8:	0002c3c5 	.word	0x0002c3c5
   2a4ac:	0002952f 	.word	0x0002952f

0002a4b0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   2a4b0:	b580      	push	{r7, lr}
   2a4b2:	b08a      	sub	sp, #40	; 0x28
   2a4b4:	af00      	add	r7, sp, #0
   2a4b6:	60f8      	str	r0, [r7, #12]
   2a4b8:	60b9      	str	r1, [r7, #8]
   2a4ba:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   2a4bc:	68fb      	ldr	r3, [r7, #12]
   2a4be:	68ba      	ldr	r2, [r7, #8]
   2a4c0:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   2a4c2:	68fb      	ldr	r3, [r7, #12]
   2a4c4:	681b      	ldr	r3, [r3, #0]
   2a4c6:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   2a4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a4ca:	681b      	ldr	r3, [r3, #0]
   2a4cc:	2202      	movs	r2, #2
   2a4ce:	4013      	ands	r3, r2
   2a4d0:	d007      	beq.n	2a4e2 <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
   2a4d2:	687a      	ldr	r2, [r7, #4]
   2a4d4:	68fb      	ldr	r3, [r7, #12]
   2a4d6:	0011      	movs	r1, r2
   2a4d8:	0018      	movs	r0, r3
   2a4da:	4b2f      	ldr	r3, [pc, #188]	; (2a598 <spi_init+0xe8>)
   2a4dc:	4798      	blx	r3
   2a4de:	0003      	movs	r3, r0
   2a4e0:	e055      	b.n	2a58e <spi_init+0xde>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   2a4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a4e4:	681b      	ldr	r3, [r3, #0]
   2a4e6:	2201      	movs	r2, #1
   2a4e8:	4013      	ands	r3, r2
   2a4ea:	d001      	beq.n	2a4f0 <spi_init+0x40>
		return STATUS_BUSY;
   2a4ec:	2305      	movs	r3, #5
   2a4ee:	e04e      	b.n	2a58e <spi_init+0xde>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2a4f0:	68fb      	ldr	r3, [r7, #12]
   2a4f2:	681b      	ldr	r3, [r3, #0]
   2a4f4:	0018      	movs	r0, r3
   2a4f6:	4b29      	ldr	r3, [pc, #164]	; (2a59c <spi_init+0xec>)
   2a4f8:	4798      	blx	r3
   2a4fa:	0003      	movs	r3, r0
   2a4fc:	623b      	str	r3, [r7, #32]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2a4fe:	6a3b      	ldr	r3, [r7, #32]
   2a500:	3302      	adds	r3, #2
   2a502:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2a504:	6a3b      	ldr	r3, [r7, #32]
   2a506:	3314      	adds	r3, #20
   2a508:	61bb      	str	r3, [r7, #24]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2a50a:	2201      	movs	r2, #1
   2a50c:	69fb      	ldr	r3, [r7, #28]
   2a50e:	409a      	lsls	r2, r3
   2a510:	0013      	movs	r3, r2
   2a512:	0019      	movs	r1, r3
   2a514:	2002      	movs	r0, #2
   2a516:	4b22      	ldr	r3, [pc, #136]	; (2a5a0 <spi_init+0xf0>)
   2a518:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2a51a:	2314      	movs	r3, #20
   2a51c:	18fb      	adds	r3, r7, r3
   2a51e:	0018      	movs	r0, r3
   2a520:	4b20      	ldr	r3, [pc, #128]	; (2a5a4 <spi_init+0xf4>)
   2a522:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   2a524:	687b      	ldr	r3, [r7, #4]
   2a526:	2224      	movs	r2, #36	; 0x24
   2a528:	5c9a      	ldrb	r2, [r3, r2]
   2a52a:	2314      	movs	r3, #20
   2a52c:	18fb      	adds	r3, r7, r3
   2a52e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   2a530:	69bb      	ldr	r3, [r7, #24]
   2a532:	b2db      	uxtb	r3, r3
   2a534:	2214      	movs	r2, #20
   2a536:	18ba      	adds	r2, r7, r2
   2a538:	0011      	movs	r1, r2
   2a53a:	0018      	movs	r0, r3
   2a53c:	4b1a      	ldr	r3, [pc, #104]	; (2a5a8 <spi_init+0xf8>)
   2a53e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   2a540:	69bb      	ldr	r3, [r7, #24]
   2a542:	b2db      	uxtb	r3, r3
   2a544:	0018      	movs	r0, r3
   2a546:	4b19      	ldr	r3, [pc, #100]	; (2a5ac <spi_init+0xfc>)
   2a548:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   2a54a:	687b      	ldr	r3, [r7, #4]
   2a54c:	2224      	movs	r2, #36	; 0x24
   2a54e:	5c9b      	ldrb	r3, [r3, r2]
   2a550:	2100      	movs	r1, #0
   2a552:	0018      	movs	r0, r3
   2a554:	4b16      	ldr	r3, [pc, #88]	; (2a5b0 <spi_init+0x100>)
   2a556:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   2a558:	687b      	ldr	r3, [r7, #4]
   2a55a:	781b      	ldrb	r3, [r3, #0]
   2a55c:	2b01      	cmp	r3, #1
   2a55e:	d105      	bne.n	2a56c <spi_init+0xbc>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   2a560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a562:	681b      	ldr	r3, [r3, #0]
   2a564:	220c      	movs	r2, #12
   2a566:	431a      	orrs	r2, r3
   2a568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a56a:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
   2a56c:	687b      	ldr	r3, [r7, #4]
   2a56e:	781b      	ldrb	r3, [r3, #0]
   2a570:	2b00      	cmp	r3, #0
   2a572:	d105      	bne.n	2a580 <spi_init+0xd0>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
   2a574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a576:	681b      	ldr	r3, [r3, #0]
   2a578:	2208      	movs	r2, #8
   2a57a:	431a      	orrs	r2, r3
   2a57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a57e:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   2a580:	687a      	ldr	r2, [r7, #4]
   2a582:	68fb      	ldr	r3, [r7, #12]
   2a584:	0011      	movs	r1, r2
   2a586:	0018      	movs	r0, r3
   2a588:	4b0a      	ldr	r3, [pc, #40]	; (2a5b4 <spi_init+0x104>)
   2a58a:	4798      	blx	r3
   2a58c:	0003      	movs	r3, r0
}
   2a58e:	0018      	movs	r0, r3
   2a590:	46bd      	mov	sp, r7
   2a592:	b00a      	add	sp, #40	; 0x28
   2a594:	bd80      	pop	{r7, pc}
   2a596:	46c0      	nop			; (mov r8, r8)
   2a598:	0002a27d 	.word	0x0002a27d
   2a59c:	000299b5 	.word	0x000299b5
   2a5a0:	00029ced 	.word	0x00029ced
   2a5a4:	00029cd5 	.word	0x00029cd5
   2a5a8:	0002c2a1 	.word	0x0002c2a1
   2a5ac:	0002c2e5 	.word	0x0002c2e5
   2a5b0:	0002976d 	.word	0x0002976d
   2a5b4:	0002a02d 	.word	0x0002a02d

0002a5b8 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   2a5b8:	b590      	push	{r4, r7, lr}
   2a5ba:	b089      	sub	sp, #36	; 0x24
   2a5bc:	af00      	add	r7, sp, #0
   2a5be:	60f8      	str	r0, [r7, #12]
   2a5c0:	60b9      	str	r1, [r7, #8]
   2a5c2:	0019      	movs	r1, r3
   2a5c4:	1dbb      	adds	r3, r7, #6
   2a5c6:	801a      	strh	r2, [r3, #0]
   2a5c8:	1d3b      	adds	r3, r7, #4
   2a5ca:	1c0a      	adds	r2, r1, #0
   2a5cc:	801a      	strh	r2, [r3, #0]
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   2a5ce:	1dbb      	adds	r3, r7, #6
   2a5d0:	881b      	ldrh	r3, [r3, #0]
   2a5d2:	2b00      	cmp	r3, #0
   2a5d4:	d101      	bne.n	2a5da <spi_read_buffer_wait+0x22>
		return STATUS_ERR_INVALID_ARG;
   2a5d6:	2317      	movs	r3, #23
   2a5d8:	e0b2      	b.n	2a740 <spi_read_buffer_wait+0x188>
	}

	if (!(module->receiver_enabled)) {
   2a5da:	68fb      	ldr	r3, [r7, #12]
   2a5dc:	79db      	ldrb	r3, [r3, #7]
   2a5de:	2201      	movs	r2, #1
   2a5e0:	4053      	eors	r3, r2
   2a5e2:	b2db      	uxtb	r3, r3
   2a5e4:	2b00      	cmp	r3, #0
   2a5e6:	d001      	beq.n	2a5ec <spi_read_buffer_wait+0x34>
		return STATUS_ERR_DENIED;
   2a5e8:	231c      	movs	r3, #28
   2a5ea:	e0a9      	b.n	2a740 <spi_read_buffer_wait+0x188>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
   2a5ec:	68fb      	ldr	r3, [r7, #12]
   2a5ee:	795b      	ldrb	r3, [r3, #5]
   2a5f0:	2b00      	cmp	r3, #0
   2a5f2:	d109      	bne.n	2a608 <spi_read_buffer_wait+0x50>
   2a5f4:	68fb      	ldr	r3, [r7, #12]
   2a5f6:	0018      	movs	r0, r3
   2a5f8:	4b53      	ldr	r3, [pc, #332]	; (2a748 <spi_read_buffer_wait+0x190>)
   2a5fa:	4798      	blx	r3
   2a5fc:	1e03      	subs	r3, r0, #0
   2a5fe:	d003      	beq.n	2a608 <spi_read_buffer_wait+0x50>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
   2a600:	68fb      	ldr	r3, [r7, #12]
   2a602:	0018      	movs	r0, r3
   2a604:	4b51      	ldr	r3, [pc, #324]	; (2a74c <spi_read_buffer_wait+0x194>)
   2a606:	4798      	blx	r3
	}
#  endif
	uint16_t rx_pos = 0;
   2a608:	231e      	movs	r3, #30
   2a60a:	18fb      	adds	r3, r7, r3
   2a60c:	2200      	movs	r2, #0
   2a60e:	801a      	strh	r2, [r3, #0]

	while (length--) {
   2a610:	e08d      	b.n	2a72e <spi_read_buffer_wait+0x176>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   2a612:	68fb      	ldr	r3, [r7, #12]
   2a614:	795b      	ldrb	r3, [r3, #5]
   2a616:	2b01      	cmp	r3, #1
   2a618:	d112      	bne.n	2a640 <spi_read_buffer_wait+0x88>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   2a61a:	46c0      	nop			; (mov r8, r8)
   2a61c:	68fb      	ldr	r3, [r7, #12]
   2a61e:	0018      	movs	r0, r3
   2a620:	4b4b      	ldr	r3, [pc, #300]	; (2a750 <spi_read_buffer_wait+0x198>)
   2a622:	4798      	blx	r3
   2a624:	0003      	movs	r3, r0
   2a626:	001a      	movs	r2, r3
   2a628:	2301      	movs	r3, #1
   2a62a:	4053      	eors	r3, r2
   2a62c:	b2db      	uxtb	r3, r3
   2a62e:	2b00      	cmp	r3, #0
   2a630:	d1f4      	bne.n	2a61c <spi_read_buffer_wait+0x64>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   2a632:	1d3b      	adds	r3, r7, #4
   2a634:	881a      	ldrh	r2, [r3, #0]
   2a636:	68fb      	ldr	r3, [r7, #12]
   2a638:	0011      	movs	r1, r2
   2a63a:	0018      	movs	r0, r3
   2a63c:	4b45      	ldr	r3, [pc, #276]	; (2a754 <spi_read_buffer_wait+0x19c>)
   2a63e:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
   2a640:	68fb      	ldr	r3, [r7, #12]
   2a642:	795b      	ldrb	r3, [r3, #5]
   2a644:	2b00      	cmp	r3, #0
   2a646:	d12a      	bne.n	2a69e <spi_read_buffer_wait+0xe6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2a648:	2300      	movs	r3, #0
   2a64a:	61bb      	str	r3, [r7, #24]
   2a64c:	e008      	b.n	2a660 <spi_read_buffer_wait+0xa8>
				if (spi_is_ready_to_read(module)) {
   2a64e:	68fb      	ldr	r3, [r7, #12]
   2a650:	0018      	movs	r0, r3
   2a652:	4b41      	ldr	r3, [pc, #260]	; (2a758 <spi_read_buffer_wait+0x1a0>)
   2a654:	4798      	blx	r3
   2a656:	1e03      	subs	r3, r0, #0
   2a658:	d107      	bne.n	2a66a <spi_read_buffer_wait+0xb2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2a65a:	69bb      	ldr	r3, [r7, #24]
   2a65c:	3301      	adds	r3, #1
   2a65e:	61bb      	str	r3, [r7, #24]
   2a660:	69bb      	ldr	r3, [r7, #24]
   2a662:	4a3e      	ldr	r2, [pc, #248]	; (2a75c <spi_read_buffer_wait+0x1a4>)
   2a664:	4293      	cmp	r3, r2
   2a666:	d9f2      	bls.n	2a64e <spi_read_buffer_wait+0x96>
   2a668:	e000      	b.n	2a66c <spi_read_buffer_wait+0xb4>
					break;
   2a66a:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
   2a66c:	68fb      	ldr	r3, [r7, #12]
   2a66e:	0018      	movs	r0, r3
   2a670:	4b35      	ldr	r3, [pc, #212]	; (2a748 <spi_read_buffer_wait+0x190>)
   2a672:	4798      	blx	r3
   2a674:	1e03      	subs	r3, r0, #0
   2a676:	d005      	beq.n	2a684 <spi_read_buffer_wait+0xcc>
				_spi_clear_tx_complete_flag(module);
   2a678:	68fb      	ldr	r3, [r7, #12]
   2a67a:	0018      	movs	r0, r3
   2a67c:	4b33      	ldr	r3, [pc, #204]	; (2a74c <spi_read_buffer_wait+0x194>)
   2a67e:	4798      	blx	r3
				return STATUS_ABORTED;
   2a680:	2304      	movs	r3, #4
   2a682:	e05d      	b.n	2a740 <spi_read_buffer_wait+0x188>
			}

			if (!spi_is_ready_to_read(module)) {
   2a684:	68fb      	ldr	r3, [r7, #12]
   2a686:	0018      	movs	r0, r3
   2a688:	4b33      	ldr	r3, [pc, #204]	; (2a758 <spi_read_buffer_wait+0x1a0>)
   2a68a:	4798      	blx	r3
   2a68c:	0003      	movs	r3, r0
   2a68e:	001a      	movs	r2, r3
   2a690:	2301      	movs	r3, #1
   2a692:	4053      	eors	r3, r2
   2a694:	b2db      	uxtb	r3, r3
   2a696:	2b00      	cmp	r3, #0
   2a698:	d001      	beq.n	2a69e <spi_read_buffer_wait+0xe6>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
   2a69a:	2312      	movs	r3, #18
   2a69c:	e050      	b.n	2a740 <spi_read_buffer_wait+0x188>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   2a69e:	46c0      	nop			; (mov r8, r8)
   2a6a0:	68fb      	ldr	r3, [r7, #12]
   2a6a2:	0018      	movs	r0, r3
   2a6a4:	4b2c      	ldr	r3, [pc, #176]	; (2a758 <spi_read_buffer_wait+0x1a0>)
   2a6a6:	4798      	blx	r3
   2a6a8:	0003      	movs	r3, r0
   2a6aa:	001a      	movs	r2, r3
   2a6ac:	2301      	movs	r3, #1
   2a6ae:	4053      	eors	r3, r2
   2a6b0:	b2db      	uxtb	r3, r3
   2a6b2:	2b00      	cmp	r3, #0
   2a6b4:	d1f4      	bne.n	2a6a0 <spi_read_buffer_wait+0xe8>
		}

		uint16_t received_data = 0;
   2a6b6:	2314      	movs	r3, #20
   2a6b8:	18fb      	adds	r3, r7, r3
   2a6ba:	2200      	movs	r2, #0
   2a6bc:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   2a6be:	2317      	movs	r3, #23
   2a6c0:	18fc      	adds	r4, r7, r3
   2a6c2:	2314      	movs	r3, #20
   2a6c4:	18fa      	adds	r2, r7, r3
   2a6c6:	68fb      	ldr	r3, [r7, #12]
   2a6c8:	0011      	movs	r1, r2
   2a6ca:	0018      	movs	r0, r3
   2a6cc:	4b24      	ldr	r3, [pc, #144]	; (2a760 <spi_read_buffer_wait+0x1a8>)
   2a6ce:	4798      	blx	r3
   2a6d0:	0003      	movs	r3, r0
   2a6d2:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   2a6d4:	2317      	movs	r3, #23
   2a6d6:	18fb      	adds	r3, r7, r3
   2a6d8:	781b      	ldrb	r3, [r3, #0]
   2a6da:	2b00      	cmp	r3, #0
   2a6dc:	d003      	beq.n	2a6e6 <spi_read_buffer_wait+0x12e>
			/* Overflow, abort */
			return retval;
   2a6de:	2317      	movs	r3, #23
   2a6e0:	18fb      	adds	r3, r7, r3
   2a6e2:	781b      	ldrb	r3, [r3, #0]
   2a6e4:	e02c      	b.n	2a740 <spi_read_buffer_wait+0x188>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   2a6e6:	231e      	movs	r3, #30
   2a6e8:	18fb      	adds	r3, r7, r3
   2a6ea:	881b      	ldrh	r3, [r3, #0]
   2a6ec:	221e      	movs	r2, #30
   2a6ee:	18ba      	adds	r2, r7, r2
   2a6f0:	1c59      	adds	r1, r3, #1
   2a6f2:	8011      	strh	r1, [r2, #0]
   2a6f4:	001a      	movs	r2, r3
   2a6f6:	68bb      	ldr	r3, [r7, #8]
   2a6f8:	189b      	adds	r3, r3, r2
   2a6fa:	2214      	movs	r2, #20
   2a6fc:	18ba      	adds	r2, r7, r2
   2a6fe:	8812      	ldrh	r2, [r2, #0]
   2a700:	b2d2      	uxtb	r2, r2
   2a702:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2a704:	68fb      	ldr	r3, [r7, #12]
   2a706:	799b      	ldrb	r3, [r3, #6]
   2a708:	2b01      	cmp	r3, #1
   2a70a:	d110      	bne.n	2a72e <spi_read_buffer_wait+0x176>
			rx_data[rx_pos++] = (received_data >> 8);
   2a70c:	231e      	movs	r3, #30
   2a70e:	18fb      	adds	r3, r7, r3
   2a710:	881b      	ldrh	r3, [r3, #0]
   2a712:	221e      	movs	r2, #30
   2a714:	18ba      	adds	r2, r7, r2
   2a716:	1c59      	adds	r1, r3, #1
   2a718:	8011      	strh	r1, [r2, #0]
   2a71a:	001a      	movs	r2, r3
   2a71c:	68bb      	ldr	r3, [r7, #8]
   2a71e:	189b      	adds	r3, r3, r2
   2a720:	2214      	movs	r2, #20
   2a722:	18ba      	adds	r2, r7, r2
   2a724:	8812      	ldrh	r2, [r2, #0]
   2a726:	0a12      	lsrs	r2, r2, #8
   2a728:	b292      	uxth	r2, r2
   2a72a:	b2d2      	uxtb	r2, r2
   2a72c:	701a      	strb	r2, [r3, #0]
	while (length--) {
   2a72e:	1dbb      	adds	r3, r7, #6
   2a730:	881b      	ldrh	r3, [r3, #0]
   2a732:	1dba      	adds	r2, r7, #6
   2a734:	1e59      	subs	r1, r3, #1
   2a736:	8011      	strh	r1, [r2, #0]
   2a738:	2b00      	cmp	r3, #0
   2a73a:	d000      	beq.n	2a73e <spi_read_buffer_wait+0x186>
   2a73c:	e769      	b.n	2a612 <spi_read_buffer_wait+0x5a>
		}
	}

	return STATUS_OK;
   2a73e:	2300      	movs	r3, #0
}
   2a740:	0018      	movs	r0, r3
   2a742:	46bd      	mov	sp, r7
   2a744:	b009      	add	sp, #36	; 0x24
   2a746:	bd90      	pop	{r4, r7, pc}
   2a748:	00029e01 	.word	0x00029e01
   2a74c:	0002a011 	.word	0x0002a011
   2a750:	00029e29 	.word	0x00029e29
   2a754:	00029e79 	.word	0x00029e79
   2a758:	00029e51 	.word	0x00029e51
   2a75c:	00002710 	.word	0x00002710
   2a760:	00029ec1 	.word	0x00029ec1

0002a764 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   2a764:	b580      	push	{r7, lr}
   2a766:	b086      	sub	sp, #24
   2a768:	af00      	add	r7, sp, #0
   2a76a:	60f8      	str	r0, [r7, #12]
   2a76c:	60b9      	str	r1, [r7, #8]
   2a76e:	1dfb      	adds	r3, r7, #7
   2a770:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   2a772:	68fb      	ldr	r3, [r7, #12]
   2a774:	795b      	ldrb	r3, [r3, #5]
   2a776:	2b01      	cmp	r3, #1
   2a778:	d001      	beq.n	2a77e <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   2a77a:	2315      	movs	r3, #21
   2a77c:	e05c      	b.n	2a838 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   2a77e:	68fb      	ldr	r3, [r7, #12]
   2a780:	7a1b      	ldrb	r3, [r3, #8]
   2a782:	2201      	movs	r2, #1
   2a784:	4053      	eors	r3, r2
   2a786:	b2db      	uxtb	r3, r3
   2a788:	2b00      	cmp	r3, #0
   2a78a:	d054      	beq.n	2a836 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   2a78c:	1dfb      	adds	r3, r7, #7
   2a78e:	781b      	ldrb	r3, [r3, #0]
   2a790:	2b00      	cmp	r3, #0
   2a792:	d04a      	beq.n	2a82a <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   2a794:	68bb      	ldr	r3, [r7, #8]
   2a796:	785b      	ldrb	r3, [r3, #1]
   2a798:	2b00      	cmp	r3, #0
   2a79a:	d03f      	beq.n	2a81c <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   2a79c:	68fb      	ldr	r3, [r7, #12]
   2a79e:	0018      	movs	r0, r3
   2a7a0:	4b27      	ldr	r3, [pc, #156]	; (2a840 <spi_select_slave+0xdc>)
   2a7a2:	4798      	blx	r3
   2a7a4:	0003      	movs	r3, r0
   2a7a6:	001a      	movs	r2, r3
   2a7a8:	2301      	movs	r3, #1
   2a7aa:	4053      	eors	r3, r2
   2a7ac:	b2db      	uxtb	r3, r3
   2a7ae:	2b00      	cmp	r3, #0
   2a7b0:	d007      	beq.n	2a7c2 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   2a7b2:	68bb      	ldr	r3, [r7, #8]
   2a7b4:	781b      	ldrb	r3, [r3, #0]
   2a7b6:	2101      	movs	r1, #1
   2a7b8:	0018      	movs	r0, r3
   2a7ba:	4b22      	ldr	r3, [pc, #136]	; (2a844 <spi_select_slave+0xe0>)
   2a7bc:	4798      	blx	r3
					return STATUS_BUSY;
   2a7be:	2305      	movs	r3, #5
   2a7c0:	e03a      	b.n	2a838 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   2a7c2:	68bb      	ldr	r3, [r7, #8]
   2a7c4:	781b      	ldrb	r3, [r3, #0]
   2a7c6:	2100      	movs	r1, #0
   2a7c8:	0018      	movs	r0, r3
   2a7ca:	4b1e      	ldr	r3, [pc, #120]	; (2a844 <spi_select_slave+0xe0>)
   2a7cc:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   2a7ce:	68bb      	ldr	r3, [r7, #8]
   2a7d0:	789b      	ldrb	r3, [r3, #2]
   2a7d2:	b29a      	uxth	r2, r3
   2a7d4:	68fb      	ldr	r3, [r7, #12]
   2a7d6:	0011      	movs	r1, r2
   2a7d8:	0018      	movs	r0, r3
   2a7da:	4b1b      	ldr	r3, [pc, #108]	; (2a848 <spi_select_slave+0xe4>)
   2a7dc:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   2a7de:	68fb      	ldr	r3, [r7, #12]
   2a7e0:	79db      	ldrb	r3, [r3, #7]
   2a7e2:	2201      	movs	r2, #1
   2a7e4:	4053      	eors	r3, r2
   2a7e6:	b2db      	uxtb	r3, r3
   2a7e8:	2b00      	cmp	r3, #0
   2a7ea:	d024      	beq.n	2a836 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   2a7ec:	46c0      	nop			; (mov r8, r8)
   2a7ee:	68fb      	ldr	r3, [r7, #12]
   2a7f0:	0018      	movs	r0, r3
   2a7f2:	4b16      	ldr	r3, [pc, #88]	; (2a84c <spi_select_slave+0xe8>)
   2a7f4:	4798      	blx	r3
   2a7f6:	0003      	movs	r3, r0
   2a7f8:	001a      	movs	r2, r3
   2a7fa:	2301      	movs	r3, #1
   2a7fc:	4053      	eors	r3, r2
   2a7fe:	b2db      	uxtb	r3, r3
   2a800:	2b00      	cmp	r3, #0
   2a802:	d1f4      	bne.n	2a7ee <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   2a804:	2316      	movs	r3, #22
   2a806:	18fb      	adds	r3, r7, r3
   2a808:	2200      	movs	r2, #0
   2a80a:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   2a80c:	2316      	movs	r3, #22
   2a80e:	18fa      	adds	r2, r7, r3
   2a810:	68fb      	ldr	r3, [r7, #12]
   2a812:	0011      	movs	r1, r2
   2a814:	0018      	movs	r0, r3
   2a816:	4b0e      	ldr	r3, [pc, #56]	; (2a850 <spi_select_slave+0xec>)
   2a818:	4798      	blx	r3
   2a81a:	e00c      	b.n	2a836 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   2a81c:	68bb      	ldr	r3, [r7, #8]
   2a81e:	781b      	ldrb	r3, [r3, #0]
   2a820:	2100      	movs	r1, #0
   2a822:	0018      	movs	r0, r3
   2a824:	4b07      	ldr	r3, [pc, #28]	; (2a844 <spi_select_slave+0xe0>)
   2a826:	4798      	blx	r3
   2a828:	e005      	b.n	2a836 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   2a82a:	68bb      	ldr	r3, [r7, #8]
   2a82c:	781b      	ldrb	r3, [r3, #0]
   2a82e:	2101      	movs	r1, #1
   2a830:	0018      	movs	r0, r3
   2a832:	4b04      	ldr	r3, [pc, #16]	; (2a844 <spi_select_slave+0xe0>)
   2a834:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   2a836:	2300      	movs	r3, #0
}
   2a838:	0018      	movs	r0, r3
   2a83a:	46bd      	mov	sp, r7
   2a83c:	b006      	add	sp, #24
   2a83e:	bd80      	pop	{r7, pc}
   2a840:	00029e29 	.word	0x00029e29
   2a844:	00029c81 	.word	0x00029c81
   2a848:	00029e79 	.word	0x00029e79
   2a84c:	00029e51 	.word	0x00029e51
   2a850:	00029ec1 	.word	0x00029ec1

0002a854 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   2a854:	b580      	push	{r7, lr}
   2a856:	b08a      	sub	sp, #40	; 0x28
   2a858:	af00      	add	r7, sp, #0
   2a85a:	60f8      	str	r0, [r7, #12]
   2a85c:	60b9      	str	r1, [r7, #8]
   2a85e:	1dbb      	adds	r3, r7, #6
   2a860:	801a      	strh	r2, [r3, #0]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
   2a862:	1dbb      	adds	r3, r7, #6
   2a864:	881b      	ldrh	r3, [r3, #0]
   2a866:	2b00      	cmp	r3, #0
   2a868:	d101      	bne.n	2a86e <spi_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
   2a86a:	2317      	movs	r3, #23
   2a86c:	e16a      	b.n	2ab44 <spi_write_buffer_wait+0x2f0>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
   2a86e:	68fb      	ldr	r3, [r7, #12]
   2a870:	795b      	ldrb	r3, [r3, #5]
   2a872:	2b00      	cmp	r3, #0
   2a874:	d109      	bne.n	2a88a <spi_write_buffer_wait+0x36>
   2a876:	68fb      	ldr	r3, [r7, #12]
   2a878:	0018      	movs	r0, r3
   2a87a:	4bb4      	ldr	r3, [pc, #720]	; (2ab4c <spi_write_buffer_wait+0x2f8>)
   2a87c:	4798      	blx	r3
   2a87e:	1e03      	subs	r3, r0, #0
   2a880:	d003      	beq.n	2a88a <spi_write_buffer_wait+0x36>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
   2a882:	68fb      	ldr	r3, [r7, #12]
   2a884:	0018      	movs	r0, r3
   2a886:	4bb2      	ldr	r3, [pc, #712]	; (2ab50 <spi_write_buffer_wait+0x2fc>)
   2a888:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
   2a88a:	2326      	movs	r3, #38	; 0x26
   2a88c:	18fb      	adds	r3, r7, r3
   2a88e:	2200      	movs	r2, #0
   2a890:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   2a892:	2324      	movs	r3, #36	; 0x24
   2a894:	18fb      	adds	r3, r7, r3
   2a896:	1dba      	adds	r2, r7, #6
   2a898:	8812      	ldrh	r2, [r2, #0]
   2a89a:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   2a89c:	e0fe      	b.n	2aa9c <spi_write_buffer_wait+0x248>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
   2a89e:	68fb      	ldr	r3, [r7, #12]
   2a8a0:	795b      	ldrb	r3, [r3, #5]
   2a8a2:	2b00      	cmp	r3, #0
   2a8a4:	d12a      	bne.n	2a8fc <spi_write_buffer_wait+0xa8>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2a8a6:	2300      	movs	r3, #0
   2a8a8:	623b      	str	r3, [r7, #32]
   2a8aa:	e008      	b.n	2a8be <spi_write_buffer_wait+0x6a>
				if (spi_is_ready_to_write(module)) {
   2a8ac:	68fb      	ldr	r3, [r7, #12]
   2a8ae:	0018      	movs	r0, r3
   2a8b0:	4ba8      	ldr	r3, [pc, #672]	; (2ab54 <spi_write_buffer_wait+0x300>)
   2a8b2:	4798      	blx	r3
   2a8b4:	1e03      	subs	r3, r0, #0
   2a8b6:	d107      	bne.n	2a8c8 <spi_write_buffer_wait+0x74>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2a8b8:	6a3b      	ldr	r3, [r7, #32]
   2a8ba:	3301      	adds	r3, #1
   2a8bc:	623b      	str	r3, [r7, #32]
   2a8be:	6a3b      	ldr	r3, [r7, #32]
   2a8c0:	4aa5      	ldr	r2, [pc, #660]	; (2ab58 <spi_write_buffer_wait+0x304>)
   2a8c2:	4293      	cmp	r3, r2
   2a8c4:	d9f2      	bls.n	2a8ac <spi_write_buffer_wait+0x58>
   2a8c6:	e000      	b.n	2a8ca <spi_write_buffer_wait+0x76>
					break;
   2a8c8:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
   2a8ca:	68fb      	ldr	r3, [r7, #12]
   2a8cc:	0018      	movs	r0, r3
   2a8ce:	4b9f      	ldr	r3, [pc, #636]	; (2ab4c <spi_write_buffer_wait+0x2f8>)
   2a8d0:	4798      	blx	r3
   2a8d2:	1e03      	subs	r3, r0, #0
   2a8d4:	d005      	beq.n	2a8e2 <spi_write_buffer_wait+0x8e>
				_spi_clear_tx_complete_flag(module);
   2a8d6:	68fb      	ldr	r3, [r7, #12]
   2a8d8:	0018      	movs	r0, r3
   2a8da:	4b9d      	ldr	r3, [pc, #628]	; (2ab50 <spi_write_buffer_wait+0x2fc>)
   2a8dc:	4798      	blx	r3
				return STATUS_ABORTED;
   2a8de:	2304      	movs	r3, #4
   2a8e0:	e130      	b.n	2ab44 <spi_write_buffer_wait+0x2f0>
			}

			if (!spi_is_ready_to_write(module)) {
   2a8e2:	68fb      	ldr	r3, [r7, #12]
   2a8e4:	0018      	movs	r0, r3
   2a8e6:	4b9b      	ldr	r3, [pc, #620]	; (2ab54 <spi_write_buffer_wait+0x300>)
   2a8e8:	4798      	blx	r3
   2a8ea:	0003      	movs	r3, r0
   2a8ec:	001a      	movs	r2, r3
   2a8ee:	2301      	movs	r3, #1
   2a8f0:	4053      	eors	r3, r2
   2a8f2:	b2db      	uxtb	r3, r3
   2a8f4:	2b00      	cmp	r3, #0
   2a8f6:	d001      	beq.n	2a8fc <spi_write_buffer_wait+0xa8>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
   2a8f8:	2312      	movs	r3, #18
   2a8fa:	e123      	b.n	2ab44 <spi_write_buffer_wait+0x2f0>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   2a8fc:	46c0      	nop			; (mov r8, r8)
   2a8fe:	68fb      	ldr	r3, [r7, #12]
   2a900:	0018      	movs	r0, r3
   2a902:	4b94      	ldr	r3, [pc, #592]	; (2ab54 <spi_write_buffer_wait+0x300>)
   2a904:	4798      	blx	r3
   2a906:	0003      	movs	r3, r0
   2a908:	001a      	movs	r2, r3
   2a90a:	2301      	movs	r3, #1
   2a90c:	4053      	eors	r3, r2
   2a90e:	b2db      	uxtb	r3, r3
   2a910:	2b00      	cmp	r3, #0
   2a912:	d1f4      	bne.n	2a8fe <spi_write_buffer_wait+0xaa>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   2a914:	2326      	movs	r3, #38	; 0x26
   2a916:	18fb      	adds	r3, r7, r3
   2a918:	881b      	ldrh	r3, [r3, #0]
   2a91a:	2226      	movs	r2, #38	; 0x26
   2a91c:	18ba      	adds	r2, r7, r2
   2a91e:	1c59      	adds	r1, r3, #1
   2a920:	8011      	strh	r1, [r2, #0]
   2a922:	001a      	movs	r2, r3
   2a924:	68bb      	ldr	r3, [r7, #8]
   2a926:	189b      	adds	r3, r3, r2
   2a928:	781a      	ldrb	r2, [r3, #0]
   2a92a:	231e      	movs	r3, #30
   2a92c:	18fb      	adds	r3, r7, r3
   2a92e:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2a930:	68fb      	ldr	r3, [r7, #12]
   2a932:	799b      	ldrb	r3, [r3, #6]
   2a934:	2b01      	cmp	r3, #1
   2a936:	d115      	bne.n	2a964 <spi_write_buffer_wait+0x110>
			data_to_send |= (tx_data[tx_pos++] << 8);
   2a938:	2326      	movs	r3, #38	; 0x26
   2a93a:	18fb      	adds	r3, r7, r3
   2a93c:	881b      	ldrh	r3, [r3, #0]
   2a93e:	2226      	movs	r2, #38	; 0x26
   2a940:	18ba      	adds	r2, r7, r2
   2a942:	1c59      	adds	r1, r3, #1
   2a944:	8011      	strh	r1, [r2, #0]
   2a946:	001a      	movs	r2, r3
   2a948:	68bb      	ldr	r3, [r7, #8]
   2a94a:	189b      	adds	r3, r3, r2
   2a94c:	781b      	ldrb	r3, [r3, #0]
   2a94e:	021b      	lsls	r3, r3, #8
   2a950:	b21a      	sxth	r2, r3
   2a952:	231e      	movs	r3, #30
   2a954:	18fb      	adds	r3, r7, r3
   2a956:	2100      	movs	r1, #0
   2a958:	5e5b      	ldrsh	r3, [r3, r1]
   2a95a:	4313      	orrs	r3, r2
   2a95c:	b21a      	sxth	r2, r3
   2a95e:	231e      	movs	r3, #30
   2a960:	18fb      	adds	r3, r7, r3
   2a962:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   2a964:	231e      	movs	r3, #30
   2a966:	18fb      	adds	r3, r7, r3
   2a968:	881a      	ldrh	r2, [r3, #0]
   2a96a:	68fb      	ldr	r3, [r7, #12]
   2a96c:	0011      	movs	r1, r2
   2a96e:	0018      	movs	r0, r3
   2a970:	4b7a      	ldr	r3, [pc, #488]	; (2ab5c <spi_write_buffer_wait+0x308>)
   2a972:	4798      	blx	r3

		if (module->receiver_enabled) {
   2a974:	68fb      	ldr	r3, [r7, #12]
   2a976:	79db      	ldrb	r3, [r3, #7]
   2a978:	2224      	movs	r2, #36	; 0x24
   2a97a:	18ba      	adds	r2, r7, r2
   2a97c:	2124      	movs	r1, #36	; 0x24
   2a97e:	1879      	adds	r1, r7, r1
   2a980:	8809      	ldrh	r1, [r1, #0]
   2a982:	8011      	strh	r1, [r2, #0]
   2a984:	2b00      	cmp	r3, #0
   2a986:	d100      	bne.n	2a98a <spi_write_buffer_wait+0x136>
   2a988:	e088      	b.n	2aa9c <spi_write_buffer_wait+0x248>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
   2a98a:	68fb      	ldr	r3, [r7, #12]
   2a98c:	795b      	ldrb	r3, [r3, #5]
   2a98e:	2b00      	cmp	r3, #0
   2a990:	d000      	beq.n	2a994 <spi_write_buffer_wait+0x140>
   2a992:	e069      	b.n	2aa68 <spi_write_buffer_wait+0x214>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2a994:	2300      	movs	r3, #0
   2a996:	61bb      	str	r3, [r7, #24]
   2a998:	e047      	b.n	2aa2a <spi_write_buffer_wait+0x1d6>
					if (length && spi_is_ready_to_write(module)) {
   2a99a:	1dbb      	adds	r3, r7, #6
   2a99c:	881b      	ldrh	r3, [r3, #0]
   2a99e:	2b00      	cmp	r3, #0
   2a9a0:	d03a      	beq.n	2aa18 <spi_write_buffer_wait+0x1c4>
   2a9a2:	68fb      	ldr	r3, [r7, #12]
   2a9a4:	0018      	movs	r0, r3
   2a9a6:	4b6b      	ldr	r3, [pc, #428]	; (2ab54 <spi_write_buffer_wait+0x300>)
   2a9a8:	4798      	blx	r3
   2a9aa:	1e03      	subs	r3, r0, #0
   2a9ac:	d034      	beq.n	2aa18 <spi_write_buffer_wait+0x1c4>
						data_to_send = tx_data[tx_pos++];
   2a9ae:	2326      	movs	r3, #38	; 0x26
   2a9b0:	18fb      	adds	r3, r7, r3
   2a9b2:	881b      	ldrh	r3, [r3, #0]
   2a9b4:	2226      	movs	r2, #38	; 0x26
   2a9b6:	18ba      	adds	r2, r7, r2
   2a9b8:	1c59      	adds	r1, r3, #1
   2a9ba:	8011      	strh	r1, [r2, #0]
   2a9bc:	001a      	movs	r2, r3
   2a9be:	68bb      	ldr	r3, [r7, #8]
   2a9c0:	189b      	adds	r3, r3, r2
   2a9c2:	781a      	ldrb	r2, [r3, #0]
   2a9c4:	231e      	movs	r3, #30
   2a9c6:	18fb      	adds	r3, r7, r3
   2a9c8:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2a9ca:	68fb      	ldr	r3, [r7, #12]
   2a9cc:	799b      	ldrb	r3, [r3, #6]
   2a9ce:	2b01      	cmp	r3, #1
   2a9d0:	d115      	bne.n	2a9fe <spi_write_buffer_wait+0x1aa>
							data_to_send |= (tx_data[tx_pos++] << 8);
   2a9d2:	2326      	movs	r3, #38	; 0x26
   2a9d4:	18fb      	adds	r3, r7, r3
   2a9d6:	881b      	ldrh	r3, [r3, #0]
   2a9d8:	2226      	movs	r2, #38	; 0x26
   2a9da:	18ba      	adds	r2, r7, r2
   2a9dc:	1c59      	adds	r1, r3, #1
   2a9de:	8011      	strh	r1, [r2, #0]
   2a9e0:	001a      	movs	r2, r3
   2a9e2:	68bb      	ldr	r3, [r7, #8]
   2a9e4:	189b      	adds	r3, r3, r2
   2a9e6:	781b      	ldrb	r3, [r3, #0]
   2a9e8:	021b      	lsls	r3, r3, #8
   2a9ea:	b21a      	sxth	r2, r3
   2a9ec:	231e      	movs	r3, #30
   2a9ee:	18fb      	adds	r3, r7, r3
   2a9f0:	2100      	movs	r1, #0
   2a9f2:	5e5b      	ldrsh	r3, [r3, r1]
   2a9f4:	4313      	orrs	r3, r2
   2a9f6:	b21a      	sxth	r2, r3
   2a9f8:	231e      	movs	r3, #30
   2a9fa:	18fb      	adds	r3, r7, r3
   2a9fc:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
   2a9fe:	231e      	movs	r3, #30
   2aa00:	18fb      	adds	r3, r7, r3
   2aa02:	881a      	ldrh	r2, [r3, #0]
   2aa04:	68fb      	ldr	r3, [r7, #12]
   2aa06:	0011      	movs	r1, r2
   2aa08:	0018      	movs	r0, r3
   2aa0a:	4b54      	ldr	r3, [pc, #336]	; (2ab5c <spi_write_buffer_wait+0x308>)
   2aa0c:	4798      	blx	r3
						length--;
   2aa0e:	1dbb      	adds	r3, r7, #6
   2aa10:	881a      	ldrh	r2, [r3, #0]
   2aa12:	1dbb      	adds	r3, r7, #6
   2aa14:	3a01      	subs	r2, #1
   2aa16:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
   2aa18:	68fb      	ldr	r3, [r7, #12]
   2aa1a:	0018      	movs	r0, r3
   2aa1c:	4b50      	ldr	r3, [pc, #320]	; (2ab60 <spi_write_buffer_wait+0x30c>)
   2aa1e:	4798      	blx	r3
   2aa20:	1e03      	subs	r3, r0, #0
   2aa22:	d107      	bne.n	2aa34 <spi_write_buffer_wait+0x1e0>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2aa24:	69bb      	ldr	r3, [r7, #24]
   2aa26:	3301      	adds	r3, #1
   2aa28:	61bb      	str	r3, [r7, #24]
   2aa2a:	69bb      	ldr	r3, [r7, #24]
   2aa2c:	4a4a      	ldr	r2, [pc, #296]	; (2ab58 <spi_write_buffer_wait+0x304>)
   2aa2e:	4293      	cmp	r3, r2
   2aa30:	d9b3      	bls.n	2a99a <spi_write_buffer_wait+0x146>
   2aa32:	e000      	b.n	2aa36 <spi_write_buffer_wait+0x1e2>
						break;
   2aa34:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
   2aa36:	68fb      	ldr	r3, [r7, #12]
   2aa38:	0018      	movs	r0, r3
   2aa3a:	4b44      	ldr	r3, [pc, #272]	; (2ab4c <spi_write_buffer_wait+0x2f8>)
   2aa3c:	4798      	blx	r3
   2aa3e:	1e03      	subs	r3, r0, #0
   2aa40:	d005      	beq.n	2aa4e <spi_write_buffer_wait+0x1fa>
					_spi_clear_tx_complete_flag(module);
   2aa42:	68fb      	ldr	r3, [r7, #12]
   2aa44:	0018      	movs	r0, r3
   2aa46:	4b42      	ldr	r3, [pc, #264]	; (2ab50 <spi_write_buffer_wait+0x2fc>)
   2aa48:	4798      	blx	r3
					return STATUS_ABORTED;
   2aa4a:	2304      	movs	r3, #4
   2aa4c:	e07a      	b.n	2ab44 <spi_write_buffer_wait+0x2f0>
				}

				if (!spi_is_ready_to_read(module)) {
   2aa4e:	68fb      	ldr	r3, [r7, #12]
   2aa50:	0018      	movs	r0, r3
   2aa52:	4b43      	ldr	r3, [pc, #268]	; (2ab60 <spi_write_buffer_wait+0x30c>)
   2aa54:	4798      	blx	r3
   2aa56:	0003      	movs	r3, r0
   2aa58:	001a      	movs	r2, r3
   2aa5a:	2301      	movs	r3, #1
   2aa5c:	4053      	eors	r3, r2
   2aa5e:	b2db      	uxtb	r3, r3
   2aa60:	2b00      	cmp	r3, #0
   2aa62:	d001      	beq.n	2aa68 <spi_write_buffer_wait+0x214>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
   2aa64:	2312      	movs	r3, #18
   2aa66:	e06d      	b.n	2ab44 <spi_write_buffer_wait+0x2f0>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   2aa68:	46c0      	nop			; (mov r8, r8)
   2aa6a:	68fb      	ldr	r3, [r7, #12]
   2aa6c:	0018      	movs	r0, r3
   2aa6e:	4b3c      	ldr	r3, [pc, #240]	; (2ab60 <spi_write_buffer_wait+0x30c>)
   2aa70:	4798      	blx	r3
   2aa72:	0003      	movs	r3, r0
   2aa74:	001a      	movs	r2, r3
   2aa76:	2301      	movs	r3, #1
   2aa78:	4053      	eors	r3, r2
   2aa7a:	b2db      	uxtb	r3, r3
   2aa7c:	2b00      	cmp	r3, #0
   2aa7e:	d1f4      	bne.n	2aa6a <spi_write_buffer_wait+0x216>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   2aa80:	2312      	movs	r3, #18
   2aa82:	18fa      	adds	r2, r7, r3
   2aa84:	68fb      	ldr	r3, [r7, #12]
   2aa86:	0011      	movs	r1, r2
   2aa88:	0018      	movs	r0, r3
   2aa8a:	4b36      	ldr	r3, [pc, #216]	; (2ab64 <spi_write_buffer_wait+0x310>)
   2aa8c:	4798      	blx	r3
			flush_length--;
   2aa8e:	2324      	movs	r3, #36	; 0x24
   2aa90:	18fb      	adds	r3, r7, r3
   2aa92:	881a      	ldrh	r2, [r3, #0]
   2aa94:	2324      	movs	r3, #36	; 0x24
   2aa96:	18fb      	adds	r3, r7, r3
   2aa98:	3a01      	subs	r2, #1
   2aa9a:	801a      	strh	r2, [r3, #0]
	while (length--) {
   2aa9c:	1dbb      	adds	r3, r7, #6
   2aa9e:	881b      	ldrh	r3, [r3, #0]
   2aaa0:	1dba      	adds	r2, r7, #6
   2aaa2:	1e59      	subs	r1, r3, #1
   2aaa4:	8011      	strh	r1, [r2, #0]
   2aaa6:	2b00      	cmp	r3, #0
   2aaa8:	d000      	beq.n	2aaac <spi_write_buffer_wait+0x258>
   2aaaa:	e6f8      	b.n	2a89e <spi_write_buffer_wait+0x4a>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   2aaac:	68fb      	ldr	r3, [r7, #12]
   2aaae:	795b      	ldrb	r3, [r3, #5]
   2aab0:	2b01      	cmp	r3, #1
   2aab2:	d10b      	bne.n	2aacc <spi_write_buffer_wait+0x278>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   2aab4:	46c0      	nop			; (mov r8, r8)
   2aab6:	68fb      	ldr	r3, [r7, #12]
   2aab8:	0018      	movs	r0, r3
   2aaba:	4b24      	ldr	r3, [pc, #144]	; (2ab4c <spi_write_buffer_wait+0x2f8>)
   2aabc:	4798      	blx	r3
   2aabe:	0003      	movs	r3, r0
   2aac0:	001a      	movs	r2, r3
   2aac2:	2301      	movs	r3, #1
   2aac4:	4053      	eors	r3, r2
   2aac6:	b2db      	uxtb	r3, r3
   2aac8:	2b00      	cmp	r3, #0
   2aaca:	d1f4      	bne.n	2aab6 <spi_write_buffer_wait+0x262>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
   2aacc:	68fb      	ldr	r3, [r7, #12]
   2aace:	795b      	ldrb	r3, [r3, #5]
   2aad0:	2b00      	cmp	r3, #0
   2aad2:	d136      	bne.n	2ab42 <spi_write_buffer_wait+0x2ee>
		if (module->receiver_enabled) {
   2aad4:	68fb      	ldr	r3, [r7, #12]
   2aad6:	79db      	ldrb	r3, [r3, #7]
   2aad8:	2b00      	cmp	r3, #0
   2aada:	d032      	beq.n	2ab42 <spi_write_buffer_wait+0x2ee>
			while (flush_length) {
   2aadc:	e02c      	b.n	2ab38 <spi_write_buffer_wait+0x2e4>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2aade:	2300      	movs	r3, #0
   2aae0:	617b      	str	r3, [r7, #20]
   2aae2:	e008      	b.n	2aaf6 <spi_write_buffer_wait+0x2a2>
					if (spi_is_ready_to_read(module)) {
   2aae4:	68fb      	ldr	r3, [r7, #12]
   2aae6:	0018      	movs	r0, r3
   2aae8:	4b1d      	ldr	r3, [pc, #116]	; (2ab60 <spi_write_buffer_wait+0x30c>)
   2aaea:	4798      	blx	r3
   2aaec:	1e03      	subs	r3, r0, #0
   2aaee:	d107      	bne.n	2ab00 <spi_write_buffer_wait+0x2ac>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   2aaf0:	697b      	ldr	r3, [r7, #20]
   2aaf2:	3301      	adds	r3, #1
   2aaf4:	617b      	str	r3, [r7, #20]
   2aaf6:	697b      	ldr	r3, [r7, #20]
   2aaf8:	4a17      	ldr	r2, [pc, #92]	; (2ab58 <spi_write_buffer_wait+0x304>)
   2aafa:	4293      	cmp	r3, r2
   2aafc:	d9f2      	bls.n	2aae4 <spi_write_buffer_wait+0x290>
   2aafe:	e000      	b.n	2ab02 <spi_write_buffer_wait+0x2ae>
						break;
   2ab00:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
   2ab02:	68fb      	ldr	r3, [r7, #12]
   2ab04:	0018      	movs	r0, r3
   2ab06:	4b16      	ldr	r3, [pc, #88]	; (2ab60 <spi_write_buffer_wait+0x30c>)
   2ab08:	4798      	blx	r3
   2ab0a:	0003      	movs	r3, r0
   2ab0c:	001a      	movs	r2, r3
   2ab0e:	2301      	movs	r3, #1
   2ab10:	4053      	eors	r3, r2
   2ab12:	b2db      	uxtb	r3, r3
   2ab14:	2b00      	cmp	r3, #0
   2ab16:	d001      	beq.n	2ab1c <spi_write_buffer_wait+0x2c8>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
   2ab18:	2312      	movs	r3, #18
   2ab1a:	e013      	b.n	2ab44 <spi_write_buffer_wait+0x2f0>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
   2ab1c:	2310      	movs	r3, #16
   2ab1e:	18fa      	adds	r2, r7, r3
   2ab20:	68fb      	ldr	r3, [r7, #12]
   2ab22:	0011      	movs	r1, r2
   2ab24:	0018      	movs	r0, r3
   2ab26:	4b0f      	ldr	r3, [pc, #60]	; (2ab64 <spi_write_buffer_wait+0x310>)
   2ab28:	4798      	blx	r3
				flush_length--;
   2ab2a:	2324      	movs	r3, #36	; 0x24
   2ab2c:	18fb      	adds	r3, r7, r3
   2ab2e:	881a      	ldrh	r2, [r3, #0]
   2ab30:	2324      	movs	r3, #36	; 0x24
   2ab32:	18fb      	adds	r3, r7, r3
   2ab34:	3a01      	subs	r2, #1
   2ab36:	801a      	strh	r2, [r3, #0]
			while (flush_length) {
   2ab38:	2324      	movs	r3, #36	; 0x24
   2ab3a:	18fb      	adds	r3, r7, r3
   2ab3c:	881b      	ldrh	r3, [r3, #0]
   2ab3e:	2b00      	cmp	r3, #0
   2ab40:	d1cd      	bne.n	2aade <spi_write_buffer_wait+0x28a>
			}
		}
	}
#  endif
	return STATUS_OK;
   2ab42:	2300      	movs	r3, #0
}
   2ab44:	0018      	movs	r0, r3
   2ab46:	46bd      	mov	sp, r7
   2ab48:	b00a      	add	sp, #40	; 0x28
   2ab4a:	bd80      	pop	{r7, pc}
   2ab4c:	00029e01 	.word	0x00029e01
   2ab50:	0002a011 	.word	0x0002a011
   2ab54:	00029e29 	.word	0x00029e29
   2ab58:	00002710 	.word	0x00002710
   2ab5c:	00029e79 	.word	0x00029e79
   2ab60:	00029e51 	.word	0x00029e51
   2ab64:	00029ec1 	.word	0x00029ec1

0002ab68 <system_gclk_chan_get_config_defaults>:
{
   2ab68:	b580      	push	{r7, lr}
   2ab6a:	b082      	sub	sp, #8
   2ab6c:	af00      	add	r7, sp, #0
   2ab6e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2ab70:	687b      	ldr	r3, [r7, #4]
   2ab72:	2200      	movs	r2, #0
   2ab74:	701a      	strb	r2, [r3, #0]
}
   2ab76:	46c0      	nop			; (mov r8, r8)
   2ab78:	46bd      	mov	sp, r7
   2ab7a:	b002      	add	sp, #8
   2ab7c:	bd80      	pop	{r7, pc}
	...

0002ab80 <system_apb_clock_set_mask>:
{
   2ab80:	b580      	push	{r7, lr}
   2ab82:	b082      	sub	sp, #8
   2ab84:	af00      	add	r7, sp, #0
   2ab86:	0002      	movs	r2, r0
   2ab88:	6039      	str	r1, [r7, #0]
   2ab8a:	1dfb      	adds	r3, r7, #7
   2ab8c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2ab8e:	1dfb      	adds	r3, r7, #7
   2ab90:	781b      	ldrb	r3, [r3, #0]
   2ab92:	2b01      	cmp	r3, #1
   2ab94:	d00a      	beq.n	2abac <system_apb_clock_set_mask+0x2c>
   2ab96:	2b02      	cmp	r3, #2
   2ab98:	d00f      	beq.n	2abba <system_apb_clock_set_mask+0x3a>
   2ab9a:	2b00      	cmp	r3, #0
   2ab9c:	d114      	bne.n	2abc8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2ab9e:	4b0e      	ldr	r3, [pc, #56]	; (2abd8 <system_apb_clock_set_mask+0x58>)
   2aba0:	4a0d      	ldr	r2, [pc, #52]	; (2abd8 <system_apb_clock_set_mask+0x58>)
   2aba2:	6991      	ldr	r1, [r2, #24]
   2aba4:	683a      	ldr	r2, [r7, #0]
   2aba6:	430a      	orrs	r2, r1
   2aba8:	619a      	str	r2, [r3, #24]
			break;
   2abaa:	e00f      	b.n	2abcc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2abac:	4b0a      	ldr	r3, [pc, #40]	; (2abd8 <system_apb_clock_set_mask+0x58>)
   2abae:	4a0a      	ldr	r2, [pc, #40]	; (2abd8 <system_apb_clock_set_mask+0x58>)
   2abb0:	69d1      	ldr	r1, [r2, #28]
   2abb2:	683a      	ldr	r2, [r7, #0]
   2abb4:	430a      	orrs	r2, r1
   2abb6:	61da      	str	r2, [r3, #28]
			break;
   2abb8:	e008      	b.n	2abcc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2abba:	4b07      	ldr	r3, [pc, #28]	; (2abd8 <system_apb_clock_set_mask+0x58>)
   2abbc:	4a06      	ldr	r2, [pc, #24]	; (2abd8 <system_apb_clock_set_mask+0x58>)
   2abbe:	6a11      	ldr	r1, [r2, #32]
   2abc0:	683a      	ldr	r2, [r7, #0]
   2abc2:	430a      	orrs	r2, r1
   2abc4:	621a      	str	r2, [r3, #32]
			break;
   2abc6:	e001      	b.n	2abcc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2abc8:	2317      	movs	r3, #23
   2abca:	e000      	b.n	2abce <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2abcc:	2300      	movs	r3, #0
}
   2abce:	0018      	movs	r0, r3
   2abd0:	46bd      	mov	sp, r7
   2abd2:	b002      	add	sp, #8
   2abd4:	bd80      	pop	{r7, pc}
   2abd6:	46c0      	nop			; (mov r8, r8)
   2abd8:	40000400 	.word	0x40000400

0002abdc <system_pinmux_get_config_defaults>:
{
   2abdc:	b580      	push	{r7, lr}
   2abde:	b082      	sub	sp, #8
   2abe0:	af00      	add	r7, sp, #0
   2abe2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2abe4:	687b      	ldr	r3, [r7, #4]
   2abe6:	2280      	movs	r2, #128	; 0x80
   2abe8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2abea:	687b      	ldr	r3, [r7, #4]
   2abec:	2200      	movs	r2, #0
   2abee:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2abf0:	687b      	ldr	r3, [r7, #4]
   2abf2:	2201      	movs	r2, #1
   2abf4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2abf6:	687b      	ldr	r3, [r7, #4]
   2abf8:	2200      	movs	r2, #0
   2abfa:	70da      	strb	r2, [r3, #3]
}
   2abfc:	46c0      	nop			; (mov r8, r8)
   2abfe:	46bd      	mov	sp, r7
   2ac00:	b002      	add	sp, #8
   2ac02:	bd80      	pop	{r7, pc}

0002ac04 <system_is_debugger_present>:
{
   2ac04:	b580      	push	{r7, lr}
   2ac06:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   2ac08:	4b05      	ldr	r3, [pc, #20]	; (2ac20 <system_is_debugger_present+0x1c>)
   2ac0a:	789b      	ldrb	r3, [r3, #2]
   2ac0c:	b2db      	uxtb	r3, r3
   2ac0e:	001a      	movs	r2, r3
   2ac10:	2302      	movs	r3, #2
   2ac12:	4013      	ands	r3, r2
   2ac14:	1e5a      	subs	r2, r3, #1
   2ac16:	4193      	sbcs	r3, r2
   2ac18:	b2db      	uxtb	r3, r3
}
   2ac1a:	0018      	movs	r0, r3
   2ac1c:	46bd      	mov	sp, r7
   2ac1e:	bd80      	pop	{r7, pc}
   2ac20:	41002000 	.word	0x41002000

0002ac24 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   2ac24:	b580      	push	{r7, lr}
   2ac26:	b084      	sub	sp, #16
   2ac28:	af00      	add	r7, sp, #0
   2ac2a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   2ac2c:	687b      	ldr	r3, [r7, #4]
   2ac2e:	681b      	ldr	r3, [r3, #0]
   2ac30:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   2ac32:	68fb      	ldr	r3, [r7, #12]
   2ac34:	69db      	ldr	r3, [r3, #28]
   2ac36:	1e5a      	subs	r2, r3, #1
   2ac38:	4193      	sbcs	r3, r2
   2ac3a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   2ac3c:	0018      	movs	r0, r3
   2ac3e:	46bd      	mov	sp, r7
   2ac40:	b004      	add	sp, #16
   2ac42:	bd80      	pop	{r7, pc}

0002ac44 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   2ac44:	b580      	push	{r7, lr}
   2ac46:	b082      	sub	sp, #8
   2ac48:	af00      	add	r7, sp, #0
   2ac4a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   2ac4c:	46c0      	nop			; (mov r8, r8)
   2ac4e:	687b      	ldr	r3, [r7, #4]
   2ac50:	0018      	movs	r0, r3
   2ac52:	4b04      	ldr	r3, [pc, #16]	; (2ac64 <_usart_wait_for_sync+0x20>)
   2ac54:	4798      	blx	r3
   2ac56:	1e03      	subs	r3, r0, #0
   2ac58:	d1f9      	bne.n	2ac4e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   2ac5a:	46c0      	nop			; (mov r8, r8)
   2ac5c:	46bd      	mov	sp, r7
   2ac5e:	b002      	add	sp, #8
   2ac60:	bd80      	pop	{r7, pc}
   2ac62:	46c0      	nop			; (mov r8, r8)
   2ac64:	0002ac25 	.word	0x0002ac25

0002ac68 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   2ac68:	b5b0      	push	{r4, r5, r7, lr}
   2ac6a:	b08c      	sub	sp, #48	; 0x30
   2ac6c:	af02      	add	r7, sp, #8
   2ac6e:	6078      	str	r0, [r7, #4]
   2ac70:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2ac72:	687b      	ldr	r3, [r7, #4]
   2ac74:	681b      	ldr	r3, [r3, #0]
   2ac76:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2ac78:	687b      	ldr	r3, [r7, #4]
   2ac7a:	681b      	ldr	r3, [r3, #0]
   2ac7c:	0018      	movs	r0, r3
   2ac7e:	4bab      	ldr	r3, [pc, #684]	; (2af2c <_usart_set_config+0x2c4>)
   2ac80:	4798      	blx	r3
   2ac82:	0003      	movs	r3, r0
   2ac84:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2ac86:	697b      	ldr	r3, [r7, #20]
   2ac88:	3314      	adds	r3, #20
   2ac8a:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   2ac8c:	2300      	movs	r3, #0
   2ac8e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   2ac90:	2300      	movs	r3, #0
   2ac92:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   2ac94:	230a      	movs	r3, #10
   2ac96:	18fb      	adds	r3, r7, r3
   2ac98:	2200      	movs	r2, #0
   2ac9a:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2ac9c:	231f      	movs	r3, #31
   2ac9e:	18fb      	adds	r3, r7, r3
   2aca0:	2200      	movs	r2, #0
   2aca2:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2aca4:	231e      	movs	r3, #30
   2aca6:	18fb      	adds	r3, r7, r3
   2aca8:	2210      	movs	r2, #16
   2acaa:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   2acac:	683b      	ldr	r3, [r7, #0]
   2acae:	8a1b      	ldrh	r3, [r3, #16]
   2acb0:	2280      	movs	r2, #128	; 0x80
   2acb2:	01d2      	lsls	r2, r2, #7
   2acb4:	4293      	cmp	r3, r2
   2acb6:	d01c      	beq.n	2acf2 <_usart_set_config+0x8a>
   2acb8:	2280      	movs	r2, #128	; 0x80
   2acba:	01d2      	lsls	r2, r2, #7
   2acbc:	4293      	cmp	r3, r2
   2acbe:	dc06      	bgt.n	2acce <_usart_set_config+0x66>
   2acc0:	2b00      	cmp	r3, #0
   2acc2:	d00d      	beq.n	2ace0 <_usart_set_config+0x78>
   2acc4:	2280      	movs	r2, #128	; 0x80
   2acc6:	0192      	lsls	r2, r2, #6
   2acc8:	4293      	cmp	r3, r2
   2acca:	d024      	beq.n	2ad16 <_usart_set_config+0xae>
   2accc:	e035      	b.n	2ad3a <_usart_set_config+0xd2>
   2acce:	22c0      	movs	r2, #192	; 0xc0
   2acd0:	01d2      	lsls	r2, r2, #7
   2acd2:	4293      	cmp	r3, r2
   2acd4:	d028      	beq.n	2ad28 <_usart_set_config+0xc0>
   2acd6:	2280      	movs	r2, #128	; 0x80
   2acd8:	0212      	lsls	r2, r2, #8
   2acda:	4293      	cmp	r3, r2
   2acdc:	d012      	beq.n	2ad04 <_usart_set_config+0x9c>
   2acde:	e02c      	b.n	2ad3a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2ace0:	231f      	movs	r3, #31
   2ace2:	18fb      	adds	r3, r7, r3
   2ace4:	2200      	movs	r2, #0
   2ace6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2ace8:	231e      	movs	r3, #30
   2acea:	18fb      	adds	r3, r7, r3
   2acec:	2210      	movs	r2, #16
   2acee:	701a      	strb	r2, [r3, #0]
			break;
   2acf0:	e023      	b.n	2ad3a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2acf2:	231f      	movs	r3, #31
   2acf4:	18fb      	adds	r3, r7, r3
   2acf6:	2200      	movs	r2, #0
   2acf8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2acfa:	231e      	movs	r3, #30
   2acfc:	18fb      	adds	r3, r7, r3
   2acfe:	2208      	movs	r2, #8
   2ad00:	701a      	strb	r2, [r3, #0]
			break;
   2ad02:	e01a      	b.n	2ad3a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2ad04:	231f      	movs	r3, #31
   2ad06:	18fb      	adds	r3, r7, r3
   2ad08:	2200      	movs	r2, #0
   2ad0a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   2ad0c:	231e      	movs	r3, #30
   2ad0e:	18fb      	adds	r3, r7, r3
   2ad10:	2203      	movs	r2, #3
   2ad12:	701a      	strb	r2, [r3, #0]
			break;
   2ad14:	e011      	b.n	2ad3a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   2ad16:	231f      	movs	r3, #31
   2ad18:	18fb      	adds	r3, r7, r3
   2ad1a:	2201      	movs	r2, #1
   2ad1c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2ad1e:	231e      	movs	r3, #30
   2ad20:	18fb      	adds	r3, r7, r3
   2ad22:	2210      	movs	r2, #16
   2ad24:	701a      	strb	r2, [r3, #0]
			break;
   2ad26:	e008      	b.n	2ad3a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   2ad28:	231f      	movs	r3, #31
   2ad2a:	18fb      	adds	r3, r7, r3
   2ad2c:	2201      	movs	r2, #1
   2ad2e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2ad30:	231e      	movs	r3, #30
   2ad32:	18fb      	adds	r3, r7, r3
   2ad34:	2208      	movs	r2, #8
   2ad36:	701a      	strb	r2, [r3, #0]
			break;
   2ad38:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   2ad3a:	683b      	ldr	r3, [r7, #0]
   2ad3c:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   2ad3e:	683b      	ldr	r3, [r7, #0]
   2ad40:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   2ad42:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   2ad44:	683b      	ldr	r3, [r7, #0]
   2ad46:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   2ad48:	4313      	orrs	r3, r2
		config->sample_rate |
   2ad4a:	683a      	ldr	r2, [r7, #0]
   2ad4c:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   2ad4e:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   2ad50:	683a      	ldr	r2, [r7, #0]
   2ad52:	7e12      	ldrb	r2, [r2, #24]
   2ad54:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   2ad56:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   2ad58:	683a      	ldr	r2, [r7, #0]
   2ad5a:	2126      	movs	r1, #38	; 0x26
   2ad5c:	5c52      	ldrb	r2, [r2, r1]
   2ad5e:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   2ad60:	4313      	orrs	r3, r2
   2ad62:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   2ad64:	231d      	movs	r3, #29
   2ad66:	18fb      	adds	r3, r7, r3
   2ad68:	2200      	movs	r2, #0
   2ad6a:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   2ad6c:	683b      	ldr	r3, [r7, #0]
   2ad6e:	685b      	ldr	r3, [r3, #4]
   2ad70:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   2ad72:	68fb      	ldr	r3, [r7, #12]
   2ad74:	2b00      	cmp	r3, #0
   2ad76:	d01e      	beq.n	2adb6 <_usart_set_config+0x14e>
   2ad78:	2280      	movs	r2, #128	; 0x80
   2ad7a:	0552      	lsls	r2, r2, #21
   2ad7c:	4293      	cmp	r3, r2
   2ad7e:	d14f      	bne.n	2ae20 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   2ad80:	683b      	ldr	r3, [r7, #0]
   2ad82:	2227      	movs	r2, #39	; 0x27
   2ad84:	5c9b      	ldrb	r3, [r3, r2]
   2ad86:	2201      	movs	r2, #1
   2ad88:	4053      	eors	r3, r2
   2ad8a:	b2db      	uxtb	r3, r3
   2ad8c:	2b00      	cmp	r3, #0
   2ad8e:	d046      	beq.n	2ae1e <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   2ad90:	683b      	ldr	r3, [r7, #0]
   2ad92:	6a1d      	ldr	r5, [r3, #32]
   2ad94:	693b      	ldr	r3, [r7, #16]
   2ad96:	b2db      	uxtb	r3, r3
   2ad98:	0018      	movs	r0, r3
   2ad9a:	4b65      	ldr	r3, [pc, #404]	; (2af30 <_usart_set_config+0x2c8>)
   2ad9c:	4798      	blx	r3
   2ad9e:	0001      	movs	r1, r0
   2ada0:	231d      	movs	r3, #29
   2ada2:	18fc      	adds	r4, r7, r3
   2ada4:	230a      	movs	r3, #10
   2ada6:	18fb      	adds	r3, r7, r3
   2ada8:	001a      	movs	r2, r3
   2adaa:	0028      	movs	r0, r5
   2adac:	4b61      	ldr	r3, [pc, #388]	; (2af34 <_usart_set_config+0x2cc>)
   2adae:	4798      	blx	r3
   2adb0:	0003      	movs	r3, r0
   2adb2:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   2adb4:	e033      	b.n	2ae1e <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   2adb6:	683b      	ldr	r3, [r7, #0]
   2adb8:	2227      	movs	r2, #39	; 0x27
   2adba:	5c9b      	ldrb	r3, [r3, r2]
   2adbc:	2b00      	cmp	r3, #0
   2adbe:	d014      	beq.n	2adea <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   2adc0:	683b      	ldr	r3, [r7, #0]
   2adc2:	6a18      	ldr	r0, [r3, #32]
   2adc4:	683b      	ldr	r3, [r7, #0]
   2adc6:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   2adc8:	231d      	movs	r3, #29
   2adca:	18fc      	adds	r4, r7, r3
   2adcc:	231f      	movs	r3, #31
   2adce:	18fb      	adds	r3, r7, r3
   2add0:	781d      	ldrb	r5, [r3, #0]
   2add2:	230a      	movs	r3, #10
   2add4:	18fa      	adds	r2, r7, r3
   2add6:	231e      	movs	r3, #30
   2add8:	18fb      	adds	r3, r7, r3
   2adda:	781b      	ldrb	r3, [r3, #0]
   2addc:	9300      	str	r3, [sp, #0]
   2adde:	002b      	movs	r3, r5
   2ade0:	4d55      	ldr	r5, [pc, #340]	; (2af38 <_usart_set_config+0x2d0>)
   2ade2:	47a8      	blx	r5
   2ade4:	0003      	movs	r3, r0
   2ade6:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   2ade8:	e01a      	b.n	2ae20 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   2adea:	683b      	ldr	r3, [r7, #0]
   2adec:	6a1d      	ldr	r5, [r3, #32]
   2adee:	693b      	ldr	r3, [r7, #16]
   2adf0:	b2db      	uxtb	r3, r3
   2adf2:	0018      	movs	r0, r3
   2adf4:	4b4e      	ldr	r3, [pc, #312]	; (2af30 <_usart_set_config+0x2c8>)
   2adf6:	4798      	blx	r3
				status_code =
   2adf8:	231d      	movs	r3, #29
   2adfa:	18fc      	adds	r4, r7, r3
   2adfc:	231f      	movs	r3, #31
   2adfe:	18fb      	adds	r3, r7, r3
   2ae00:	7819      	ldrb	r1, [r3, #0]
   2ae02:	230a      	movs	r3, #10
   2ae04:	18fa      	adds	r2, r7, r3
   2ae06:	231e      	movs	r3, #30
   2ae08:	18fb      	adds	r3, r7, r3
   2ae0a:	781b      	ldrb	r3, [r3, #0]
   2ae0c:	9300      	str	r3, [sp, #0]
   2ae0e:	000b      	movs	r3, r1
   2ae10:	0001      	movs	r1, r0
   2ae12:	0028      	movs	r0, r5
   2ae14:	4d48      	ldr	r5, [pc, #288]	; (2af38 <_usart_set_config+0x2d0>)
   2ae16:	47a8      	blx	r5
   2ae18:	0003      	movs	r3, r0
   2ae1a:	7023      	strb	r3, [r4, #0]
			break;
   2ae1c:	e000      	b.n	2ae20 <_usart_set_config+0x1b8>
			break;
   2ae1e:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   2ae20:	231d      	movs	r3, #29
   2ae22:	18fb      	adds	r3, r7, r3
   2ae24:	781b      	ldrb	r3, [r3, #0]
   2ae26:	2b00      	cmp	r3, #0
   2ae28:	d003      	beq.n	2ae32 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   2ae2a:	231d      	movs	r3, #29
   2ae2c:	18fb      	adds	r3, r7, r3
   2ae2e:	781b      	ldrb	r3, [r3, #0]
   2ae30:	e077      	b.n	2af22 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   2ae32:	683b      	ldr	r3, [r7, #0]
   2ae34:	7e5b      	ldrb	r3, [r3, #25]
   2ae36:	2b00      	cmp	r3, #0
   2ae38:	d003      	beq.n	2ae42 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   2ae3a:	683b      	ldr	r3, [r7, #0]
   2ae3c:	7e9a      	ldrb	r2, [r3, #26]
   2ae3e:	69bb      	ldr	r3, [r7, #24]
   2ae40:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2ae42:	687b      	ldr	r3, [r7, #4]
   2ae44:	0018      	movs	r0, r3
   2ae46:	4b3d      	ldr	r3, [pc, #244]	; (2af3c <_usart_set_config+0x2d4>)
   2ae48:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   2ae4a:	230a      	movs	r3, #10
   2ae4c:	18fb      	adds	r3, r7, r3
   2ae4e:	881a      	ldrh	r2, [r3, #0]
   2ae50:	69bb      	ldr	r3, [r7, #24]
   2ae52:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   2ae54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2ae56:	68fb      	ldr	r3, [r7, #12]
   2ae58:	4313      	orrs	r3, r2
   2ae5a:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   2ae5c:	683b      	ldr	r3, [r7, #0]
   2ae5e:	2227      	movs	r2, #39	; 0x27
   2ae60:	5c9b      	ldrb	r3, [r3, r2]
   2ae62:	2201      	movs	r2, #1
   2ae64:	4053      	eors	r3, r2
   2ae66:	b2db      	uxtb	r3, r3
   2ae68:	2b00      	cmp	r3, #0
   2ae6a:	d003      	beq.n	2ae74 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   2ae6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ae6e:	2204      	movs	r2, #4
   2ae70:	4313      	orrs	r3, r2
   2ae72:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   2ae74:	683b      	ldr	r3, [r7, #0]
   2ae76:	7e5b      	ldrb	r3, [r3, #25]
   2ae78:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   2ae7a:	683b      	ldr	r3, [r7, #0]
   2ae7c:	7f1b      	ldrb	r3, [r3, #28]
   2ae7e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   2ae80:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2ae82:	683b      	ldr	r3, [r7, #0]
   2ae84:	7f5b      	ldrb	r3, [r3, #29]
   2ae86:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   2ae88:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2ae8a:	683b      	ldr	r3, [r7, #0]
   2ae8c:	2124      	movs	r1, #36	; 0x24
   2ae8e:	5c5b      	ldrb	r3, [r3, r1]
   2ae90:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2ae92:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   2ae94:	683b      	ldr	r3, [r7, #0]
   2ae96:	2125      	movs	r1, #37	; 0x25
   2ae98:	5c5b      	ldrb	r3, [r3, r1]
   2ae9a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2ae9c:	4313      	orrs	r3, r2
	ctrlb =  
   2ae9e:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   2aea0:	683b      	ldr	r3, [r7, #0]
   2aea2:	7a9b      	ldrb	r3, [r3, #10]
   2aea4:	001a      	movs	r2, r3
   2aea6:	6a3b      	ldr	r3, [r7, #32]
   2aea8:	4313      	orrs	r3, r2
   2aeaa:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   2aeac:	683b      	ldr	r3, [r7, #0]
   2aeae:	7adb      	ldrb	r3, [r3, #11]
   2aeb0:	001a      	movs	r2, r3
   2aeb2:	6a3b      	ldr	r3, [r7, #32]
   2aeb4:	4313      	orrs	r3, r2
   2aeb6:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   2aeb8:	683b      	ldr	r3, [r7, #0]
   2aeba:	891b      	ldrh	r3, [r3, #8]
   2aebc:	2bff      	cmp	r3, #255	; 0xff
   2aebe:	d00b      	beq.n	2aed8 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   2aec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2aec2:	2280      	movs	r2, #128	; 0x80
   2aec4:	0452      	lsls	r2, r2, #17
   2aec6:	4313      	orrs	r3, r2
   2aec8:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   2aeca:	683b      	ldr	r3, [r7, #0]
   2aecc:	891b      	ldrh	r3, [r3, #8]
   2aece:	001a      	movs	r2, r3
   2aed0:	6a3b      	ldr	r3, [r7, #32]
   2aed2:	4313      	orrs	r3, r2
   2aed4:	623b      	str	r3, [r7, #32]
   2aed6:	e008      	b.n	2aeea <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   2aed8:	683b      	ldr	r3, [r7, #0]
   2aeda:	7edb      	ldrb	r3, [r3, #27]
   2aedc:	2b00      	cmp	r3, #0
   2aede:	d004      	beq.n	2aeea <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   2aee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2aee2:	2280      	movs	r2, #128	; 0x80
   2aee4:	04d2      	lsls	r2, r2, #19
   2aee6:	4313      	orrs	r3, r2
   2aee8:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   2aeea:	683b      	ldr	r3, [r7, #0]
   2aeec:	222c      	movs	r2, #44	; 0x2c
   2aeee:	5c9b      	ldrb	r3, [r3, r2]
   2aef0:	2b00      	cmp	r3, #0
   2aef2:	d103      	bne.n	2aefc <_usart_set_config+0x294>
   2aef4:	4b12      	ldr	r3, [pc, #72]	; (2af40 <_usart_set_config+0x2d8>)
   2aef6:	4798      	blx	r3
   2aef8:	1e03      	subs	r3, r0, #0
   2aefa:	d003      	beq.n	2af04 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   2aefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2aefe:	2280      	movs	r2, #128	; 0x80
   2af00:	4313      	orrs	r3, r2
   2af02:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2af04:	687b      	ldr	r3, [r7, #4]
   2af06:	0018      	movs	r0, r3
   2af08:	4b0c      	ldr	r3, [pc, #48]	; (2af3c <_usart_set_config+0x2d4>)
   2af0a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   2af0c:	69bb      	ldr	r3, [r7, #24]
   2af0e:	6a3a      	ldr	r2, [r7, #32]
   2af10:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2af12:	687b      	ldr	r3, [r7, #4]
   2af14:	0018      	movs	r0, r3
   2af16:	4b09      	ldr	r3, [pc, #36]	; (2af3c <_usart_set_config+0x2d4>)
   2af18:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   2af1a:	69bb      	ldr	r3, [r7, #24]
   2af1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2af1e:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   2af20:	2300      	movs	r3, #0
}
   2af22:	0018      	movs	r0, r3
   2af24:	46bd      	mov	sp, r7
   2af26:	b00a      	add	sp, #40	; 0x28
   2af28:	bdb0      	pop	{r4, r5, r7, pc}
   2af2a:	46c0      	nop			; (mov r8, r8)
   2af2c:	000299b5 	.word	0x000299b5
   2af30:	0002c3c5 	.word	0x0002c3c5
   2af34:	0002952f 	.word	0x0002952f
   2af38:	000295ad 	.word	0x000295ad
   2af3c:	0002ac45 	.word	0x0002ac45
   2af40:	0002ac05 	.word	0x0002ac05

0002af44 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   2af44:	b590      	push	{r4, r7, lr}
   2af46:	b093      	sub	sp, #76	; 0x4c
   2af48:	af00      	add	r7, sp, #0
   2af4a:	60f8      	str	r0, [r7, #12]
   2af4c:	60b9      	str	r1, [r7, #8]
   2af4e:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   2af50:	233b      	movs	r3, #59	; 0x3b
   2af52:	18fb      	adds	r3, r7, r3
   2af54:	2200      	movs	r2, #0
   2af56:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   2af58:	68fb      	ldr	r3, [r7, #12]
   2af5a:	68ba      	ldr	r2, [r7, #8]
   2af5c:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2af5e:	68fb      	ldr	r3, [r7, #12]
   2af60:	681b      	ldr	r3, [r3, #0]
   2af62:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2af64:	68fb      	ldr	r3, [r7, #12]
   2af66:	681b      	ldr	r3, [r3, #0]
   2af68:	0018      	movs	r0, r3
   2af6a:	4b86      	ldr	r3, [pc, #536]	; (2b184 <usart_init+0x240>)
   2af6c:	4798      	blx	r3
   2af6e:	0003      	movs	r3, r0
   2af70:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2af72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2af74:	3302      	adds	r3, #2
   2af76:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2af78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2af7a:	3314      	adds	r3, #20
   2af7c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   2af7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2af80:	681b      	ldr	r3, [r3, #0]
   2af82:	2201      	movs	r2, #1
   2af84:	4013      	ands	r3, r2
   2af86:	d001      	beq.n	2af8c <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   2af88:	2305      	movs	r3, #5
   2af8a:	e0f6      	b.n	2b17a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   2af8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2af8e:	681b      	ldr	r3, [r3, #0]
   2af90:	2202      	movs	r2, #2
   2af92:	4013      	ands	r3, r2
   2af94:	d001      	beq.n	2af9a <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   2af96:	231c      	movs	r3, #28
   2af98:	e0ef      	b.n	2b17a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2af9a:	2201      	movs	r2, #1
   2af9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2af9e:	409a      	lsls	r2, r3
   2afa0:	0013      	movs	r3, r2
   2afa2:	0019      	movs	r1, r3
   2afa4:	2002      	movs	r0, #2
   2afa6:	4b78      	ldr	r3, [pc, #480]	; (2b188 <usart_init+0x244>)
   2afa8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2afaa:	2324      	movs	r3, #36	; 0x24
   2afac:	18fb      	adds	r3, r7, r3
   2afae:	0018      	movs	r0, r3
   2afb0:	4b76      	ldr	r3, [pc, #472]	; (2b18c <usart_init+0x248>)
   2afb2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   2afb4:	687b      	ldr	r3, [r7, #4]
   2afb6:	222d      	movs	r2, #45	; 0x2d
   2afb8:	5c9a      	ldrb	r2, [r3, r2]
   2afba:	2324      	movs	r3, #36	; 0x24
   2afbc:	18fb      	adds	r3, r7, r3
   2afbe:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   2afc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2afc2:	b2db      	uxtb	r3, r3
   2afc4:	2224      	movs	r2, #36	; 0x24
   2afc6:	18ba      	adds	r2, r7, r2
   2afc8:	0011      	movs	r1, r2
   2afca:	0018      	movs	r0, r3
   2afcc:	4b70      	ldr	r3, [pc, #448]	; (2b190 <usart_init+0x24c>)
   2afce:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   2afd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2afd2:	b2db      	uxtb	r3, r3
   2afd4:	0018      	movs	r0, r3
   2afd6:	4b6f      	ldr	r3, [pc, #444]	; (2b194 <usart_init+0x250>)
   2afd8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   2afda:	687b      	ldr	r3, [r7, #4]
   2afdc:	222d      	movs	r2, #45	; 0x2d
   2afde:	5c9b      	ldrb	r3, [r3, r2]
   2afe0:	2100      	movs	r1, #0
   2afe2:	0018      	movs	r0, r3
   2afe4:	4b6c      	ldr	r3, [pc, #432]	; (2b198 <usart_init+0x254>)
   2afe6:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   2afe8:	687b      	ldr	r3, [r7, #4]
   2afea:	7ada      	ldrb	r2, [r3, #11]
   2afec:	68fb      	ldr	r3, [r7, #12]
   2afee:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   2aff0:	687b      	ldr	r3, [r7, #4]
   2aff2:	2224      	movs	r2, #36	; 0x24
   2aff4:	5c9a      	ldrb	r2, [r3, r2]
   2aff6:	68fb      	ldr	r3, [r7, #12]
   2aff8:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   2affa:	687b      	ldr	r3, [r7, #4]
   2affc:	2225      	movs	r2, #37	; 0x25
   2affe:	5c9a      	ldrb	r2, [r3, r2]
   2b000:	68fb      	ldr	r3, [r7, #12]
   2b002:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   2b004:	687b      	ldr	r3, [r7, #4]
   2b006:	7eda      	ldrb	r2, [r3, #27]
   2b008:	68fb      	ldr	r3, [r7, #12]
   2b00a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   2b00c:	687b      	ldr	r3, [r7, #4]
   2b00e:	7f1a      	ldrb	r2, [r3, #28]
   2b010:	68fb      	ldr	r3, [r7, #12]
   2b012:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   2b014:	233b      	movs	r3, #59	; 0x3b
   2b016:	18fc      	adds	r4, r7, r3
   2b018:	687a      	ldr	r2, [r7, #4]
   2b01a:	68fb      	ldr	r3, [r7, #12]
   2b01c:	0011      	movs	r1, r2
   2b01e:	0018      	movs	r0, r3
   2b020:	4b5e      	ldr	r3, [pc, #376]	; (2b19c <usart_init+0x258>)
   2b022:	4798      	blx	r3
   2b024:	0003      	movs	r3, r0
   2b026:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   2b028:	233b      	movs	r3, #59	; 0x3b
   2b02a:	18fb      	adds	r3, r7, r3
   2b02c:	781b      	ldrb	r3, [r3, #0]
   2b02e:	2b00      	cmp	r3, #0
   2b030:	d003      	beq.n	2b03a <usart_init+0xf6>
		return status_code;
   2b032:	233b      	movs	r3, #59	; 0x3b
   2b034:	18fb      	adds	r3, r7, r3
   2b036:	781b      	ldrb	r3, [r3, #0]
   2b038:	e09f      	b.n	2b17a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   2b03a:	2320      	movs	r3, #32
   2b03c:	18fb      	adds	r3, r7, r3
   2b03e:	0018      	movs	r0, r3
   2b040:	4b57      	ldr	r3, [pc, #348]	; (2b1a0 <usart_init+0x25c>)
   2b042:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2b044:	2320      	movs	r3, #32
   2b046:	18fb      	adds	r3, r7, r3
   2b048:	2200      	movs	r2, #0
   2b04a:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   2b04c:	2320      	movs	r3, #32
   2b04e:	18fb      	adds	r3, r7, r3
   2b050:	2200      	movs	r2, #0
   2b052:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   2b054:	687b      	ldr	r3, [r7, #4]
   2b056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   2b058:	2310      	movs	r3, #16
   2b05a:	18fb      	adds	r3, r7, r3
   2b05c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2b05e:	687b      	ldr	r3, [r7, #4]
   2b060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2b062:	2310      	movs	r3, #16
   2b064:	18fb      	adds	r3, r7, r3
   2b066:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   2b068:	687b      	ldr	r3, [r7, #4]
   2b06a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   2b06c:	2310      	movs	r3, #16
   2b06e:	18fb      	adds	r3, r7, r3
   2b070:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2b072:	687b      	ldr	r3, [r7, #4]
   2b074:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   2b076:	2310      	movs	r3, #16
   2b078:	18fb      	adds	r3, r7, r3
   2b07a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   2b07c:	2347      	movs	r3, #71	; 0x47
   2b07e:	18fb      	adds	r3, r7, r3
   2b080:	2200      	movs	r2, #0
   2b082:	701a      	strb	r2, [r3, #0]
   2b084:	e02c      	b.n	2b0e0 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   2b086:	2347      	movs	r3, #71	; 0x47
   2b088:	18fb      	adds	r3, r7, r3
   2b08a:	781a      	ldrb	r2, [r3, #0]
   2b08c:	2310      	movs	r3, #16
   2b08e:	18fb      	adds	r3, r7, r3
   2b090:	0092      	lsls	r2, r2, #2
   2b092:	58d3      	ldr	r3, [r2, r3]
   2b094:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   2b096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2b098:	2b00      	cmp	r3, #0
   2b09a:	d109      	bne.n	2b0b0 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2b09c:	2347      	movs	r3, #71	; 0x47
   2b09e:	18fb      	adds	r3, r7, r3
   2b0a0:	781a      	ldrb	r2, [r3, #0]
   2b0a2:	68bb      	ldr	r3, [r7, #8]
   2b0a4:	0011      	movs	r1, r2
   2b0a6:	0018      	movs	r0, r3
   2b0a8:	4b3e      	ldr	r3, [pc, #248]	; (2b1a4 <usart_init+0x260>)
   2b0aa:	4798      	blx	r3
   2b0ac:	0003      	movs	r3, r0
   2b0ae:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   2b0b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2b0b2:	3301      	adds	r3, #1
   2b0b4:	d00d      	beq.n	2b0d2 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   2b0b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2b0b8:	b2da      	uxtb	r2, r3
   2b0ba:	2320      	movs	r3, #32
   2b0bc:	18fb      	adds	r3, r7, r3
   2b0be:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   2b0c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2b0c2:	0c1b      	lsrs	r3, r3, #16
   2b0c4:	b2db      	uxtb	r3, r3
   2b0c6:	2220      	movs	r2, #32
   2b0c8:	18ba      	adds	r2, r7, r2
   2b0ca:	0011      	movs	r1, r2
   2b0cc:	0018      	movs	r0, r3
   2b0ce:	4b36      	ldr	r3, [pc, #216]	; (2b1a8 <usart_init+0x264>)
   2b0d0:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   2b0d2:	2347      	movs	r3, #71	; 0x47
   2b0d4:	18fb      	adds	r3, r7, r3
   2b0d6:	781a      	ldrb	r2, [r3, #0]
   2b0d8:	2347      	movs	r3, #71	; 0x47
   2b0da:	18fb      	adds	r3, r7, r3
   2b0dc:	3201      	adds	r2, #1
   2b0de:	701a      	strb	r2, [r3, #0]
   2b0e0:	2347      	movs	r3, #71	; 0x47
   2b0e2:	18fb      	adds	r3, r7, r3
   2b0e4:	781b      	ldrb	r3, [r3, #0]
   2b0e6:	2b03      	cmp	r3, #3
   2b0e8:	d9cd      	bls.n	2b086 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   2b0ea:	2300      	movs	r3, #0
   2b0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b0ee:	e00a      	b.n	2b106 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   2b0f0:	68fa      	ldr	r2, [r7, #12]
   2b0f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b0f4:	3302      	adds	r3, #2
   2b0f6:	009b      	lsls	r3, r3, #2
   2b0f8:	18d3      	adds	r3, r2, r3
   2b0fa:	3304      	adds	r3, #4
   2b0fc:	2200      	movs	r2, #0
   2b0fe:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   2b100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b102:	3301      	adds	r3, #1
   2b104:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b108:	2b05      	cmp	r3, #5
   2b10a:	d9f1      	bls.n	2b0f0 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   2b10c:	68fb      	ldr	r3, [r7, #12]
   2b10e:	2200      	movs	r2, #0
   2b110:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   2b112:	68fb      	ldr	r3, [r7, #12]
   2b114:	2200      	movs	r2, #0
   2b116:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   2b118:	68fb      	ldr	r3, [r7, #12]
   2b11a:	2200      	movs	r2, #0
   2b11c:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   2b11e:	68fb      	ldr	r3, [r7, #12]
   2b120:	2200      	movs	r2, #0
   2b122:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   2b124:	68fb      	ldr	r3, [r7, #12]
   2b126:	2230      	movs	r2, #48	; 0x30
   2b128:	2100      	movs	r1, #0
   2b12a:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   2b12c:	68fb      	ldr	r3, [r7, #12]
   2b12e:	2231      	movs	r2, #49	; 0x31
   2b130:	2100      	movs	r1, #0
   2b132:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   2b134:	68fb      	ldr	r3, [r7, #12]
   2b136:	2232      	movs	r2, #50	; 0x32
   2b138:	2100      	movs	r1, #0
   2b13a:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   2b13c:	68fb      	ldr	r3, [r7, #12]
   2b13e:	2233      	movs	r2, #51	; 0x33
   2b140:	2100      	movs	r1, #0
   2b142:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   2b144:	68fb      	ldr	r3, [r7, #12]
   2b146:	681b      	ldr	r3, [r3, #0]
   2b148:	2227      	movs	r2, #39	; 0x27
   2b14a:	18bc      	adds	r4, r7, r2
   2b14c:	0018      	movs	r0, r3
   2b14e:	4b0d      	ldr	r3, [pc, #52]	; (2b184 <usart_init+0x240>)
   2b150:	4798      	blx	r3
   2b152:	0003      	movs	r3, r0
   2b154:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   2b156:	4a15      	ldr	r2, [pc, #84]	; (2b1ac <usart_init+0x268>)
   2b158:	2327      	movs	r3, #39	; 0x27
   2b15a:	18fb      	adds	r3, r7, r3
   2b15c:	781b      	ldrb	r3, [r3, #0]
   2b15e:	0011      	movs	r1, r2
   2b160:	0018      	movs	r0, r3
   2b162:	4b13      	ldr	r3, [pc, #76]	; (2b1b0 <usart_init+0x26c>)
   2b164:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   2b166:	2327      	movs	r3, #39	; 0x27
   2b168:	18fb      	adds	r3, r7, r3
   2b16a:	781a      	ldrb	r2, [r3, #0]
   2b16c:	4b11      	ldr	r3, [pc, #68]	; (2b1b4 <usart_init+0x270>)
   2b16e:	0092      	lsls	r2, r2, #2
   2b170:	68f9      	ldr	r1, [r7, #12]
   2b172:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   2b174:	233b      	movs	r3, #59	; 0x3b
   2b176:	18fb      	adds	r3, r7, r3
   2b178:	781b      	ldrb	r3, [r3, #0]
}
   2b17a:	0018      	movs	r0, r3
   2b17c:	46bd      	mov	sp, r7
   2b17e:	b013      	add	sp, #76	; 0x4c
   2b180:	bd90      	pop	{r4, r7, pc}
   2b182:	46c0      	nop			; (mov r8, r8)
   2b184:	000299b5 	.word	0x000299b5
   2b188:	0002ab81 	.word	0x0002ab81
   2b18c:	0002ab69 	.word	0x0002ab69
   2b190:	0002c2a1 	.word	0x0002c2a1
   2b194:	0002c2e5 	.word	0x0002c2e5
   2b198:	0002976d 	.word	0x0002976d
   2b19c:	0002ac69 	.word	0x0002ac69
   2b1a0:	0002abdd 	.word	0x0002abdd
   2b1a4:	000297f9 	.word	0x000297f9
   2b1a8:	0002c601 	.word	0x0002c601
   2b1ac:	0002b421 	.word	0x0002b421
   2b1b0:	00029a19 	.word	0x00029a19
   2b1b4:	20005a84 	.word	0x20005a84

0002b1b8 <system_interrupt_enter_critical_section>:
{
   2b1b8:	b580      	push	{r7, lr}
   2b1ba:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2b1bc:	4b02      	ldr	r3, [pc, #8]	; (2b1c8 <system_interrupt_enter_critical_section+0x10>)
   2b1be:	4798      	blx	r3
}
   2b1c0:	46c0      	nop			; (mov r8, r8)
   2b1c2:	46bd      	mov	sp, r7
   2b1c4:	bd80      	pop	{r7, pc}
   2b1c6:	46c0      	nop			; (mov r8, r8)
   2b1c8:	000285b1 	.word	0x000285b1

0002b1cc <system_interrupt_leave_critical_section>:
{
   2b1cc:	b580      	push	{r7, lr}
   2b1ce:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2b1d0:	4b02      	ldr	r3, [pc, #8]	; (2b1dc <system_interrupt_leave_critical_section+0x10>)
   2b1d2:	4798      	blx	r3
}
   2b1d4:	46c0      	nop			; (mov r8, r8)
   2b1d6:	46bd      	mov	sp, r7
   2b1d8:	bd80      	pop	{r7, pc}
   2b1da:	46c0      	nop			; (mov r8, r8)
   2b1dc:	00028605 	.word	0x00028605

0002b1e0 <usart_is_syncing>:
{
   2b1e0:	b580      	push	{r7, lr}
   2b1e2:	b084      	sub	sp, #16
   2b1e4:	af00      	add	r7, sp, #0
   2b1e6:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   2b1e8:	687b      	ldr	r3, [r7, #4]
   2b1ea:	681b      	ldr	r3, [r3, #0]
   2b1ec:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   2b1ee:	68fb      	ldr	r3, [r7, #12]
   2b1f0:	69db      	ldr	r3, [r3, #28]
   2b1f2:	1e5a      	subs	r2, r3, #1
   2b1f4:	4193      	sbcs	r3, r2
   2b1f6:	b2db      	uxtb	r3, r3
}
   2b1f8:	0018      	movs	r0, r3
   2b1fa:	46bd      	mov	sp, r7
   2b1fc:	b004      	add	sp, #16
   2b1fe:	bd80      	pop	{r7, pc}

0002b200 <_usart_wait_for_sync>:
{
   2b200:	b580      	push	{r7, lr}
   2b202:	b082      	sub	sp, #8
   2b204:	af00      	add	r7, sp, #0
   2b206:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   2b208:	46c0      	nop			; (mov r8, r8)
   2b20a:	687b      	ldr	r3, [r7, #4]
   2b20c:	0018      	movs	r0, r3
   2b20e:	4b04      	ldr	r3, [pc, #16]	; (2b220 <_usart_wait_for_sync+0x20>)
   2b210:	4798      	blx	r3
   2b212:	1e03      	subs	r3, r0, #0
   2b214:	d1f9      	bne.n	2b20a <_usart_wait_for_sync+0xa>
}
   2b216:	46c0      	nop			; (mov r8, r8)
   2b218:	46bd      	mov	sp, r7
   2b21a:	b002      	add	sp, #8
   2b21c:	bd80      	pop	{r7, pc}
   2b21e:	46c0      	nop			; (mov r8, r8)
   2b220:	0002b1e1 	.word	0x0002b1e1

0002b224 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   2b224:	b580      	push	{r7, lr}
   2b226:	b086      	sub	sp, #24
   2b228:	af00      	add	r7, sp, #0
   2b22a:	60f8      	str	r0, [r7, #12]
   2b22c:	60b9      	str	r1, [r7, #8]
   2b22e:	1dbb      	adds	r3, r7, #6
   2b230:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2b232:	68fb      	ldr	r3, [r7, #12]
   2b234:	681b      	ldr	r3, [r3, #0]
   2b236:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   2b238:	4b0f      	ldr	r3, [pc, #60]	; (2b278 <_usart_write_buffer+0x54>)
   2b23a:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   2b23c:	68fb      	ldr	r3, [r7, #12]
   2b23e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2b240:	b29b      	uxth	r3, r3
   2b242:	2b00      	cmp	r3, #0
   2b244:	d003      	beq.n	2b24e <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   2b246:	4b0d      	ldr	r3, [pc, #52]	; (2b27c <_usart_write_buffer+0x58>)
   2b248:	4798      	blx	r3
		return STATUS_BUSY;
   2b24a:	2305      	movs	r3, #5
   2b24c:	e010      	b.n	2b270 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   2b24e:	68fb      	ldr	r3, [r7, #12]
   2b250:	1dba      	adds	r2, r7, #6
   2b252:	8812      	ldrh	r2, [r2, #0]
   2b254:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   2b256:	4b09      	ldr	r3, [pc, #36]	; (2b27c <_usart_write_buffer+0x58>)
   2b258:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   2b25a:	68fb      	ldr	r3, [r7, #12]
   2b25c:	68ba      	ldr	r2, [r7, #8]
   2b25e:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   2b260:	68fb      	ldr	r3, [r7, #12]
   2b262:	2233      	movs	r2, #51	; 0x33
   2b264:	2105      	movs	r1, #5
   2b266:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   2b268:	697b      	ldr	r3, [r7, #20]
   2b26a:	2201      	movs	r2, #1
   2b26c:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   2b26e:	2300      	movs	r3, #0
}
   2b270:	0018      	movs	r0, r3
   2b272:	46bd      	mov	sp, r7
   2b274:	b006      	add	sp, #24
   2b276:	bd80      	pop	{r7, pc}
   2b278:	0002b1b9 	.word	0x0002b1b9
   2b27c:	0002b1cd 	.word	0x0002b1cd

0002b280 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   2b280:	b580      	push	{r7, lr}
   2b282:	b086      	sub	sp, #24
   2b284:	af00      	add	r7, sp, #0
   2b286:	60f8      	str	r0, [r7, #12]
   2b288:	60b9      	str	r1, [r7, #8]
   2b28a:	1dbb      	adds	r3, r7, #6
   2b28c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2b28e:	68fb      	ldr	r3, [r7, #12]
   2b290:	681b      	ldr	r3, [r3, #0]
   2b292:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   2b294:	4b16      	ldr	r3, [pc, #88]	; (2b2f0 <_usart_read_buffer+0x70>)
   2b296:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   2b298:	68fb      	ldr	r3, [r7, #12]
   2b29a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2b29c:	b29b      	uxth	r3, r3
   2b29e:	2b00      	cmp	r3, #0
   2b2a0:	d003      	beq.n	2b2aa <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   2b2a2:	4b14      	ldr	r3, [pc, #80]	; (2b2f4 <_usart_read_buffer+0x74>)
   2b2a4:	4798      	blx	r3
		return STATUS_BUSY;
   2b2a6:	2305      	movs	r3, #5
   2b2a8:	e01e      	b.n	2b2e8 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   2b2aa:	68fb      	ldr	r3, [r7, #12]
   2b2ac:	1dba      	adds	r2, r7, #6
   2b2ae:	8812      	ldrh	r2, [r2, #0]
   2b2b0:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   2b2b2:	4b10      	ldr	r3, [pc, #64]	; (2b2f4 <_usart_read_buffer+0x74>)
   2b2b4:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   2b2b6:	68fb      	ldr	r3, [r7, #12]
   2b2b8:	68ba      	ldr	r2, [r7, #8]
   2b2ba:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   2b2bc:	68fb      	ldr	r3, [r7, #12]
   2b2be:	2232      	movs	r2, #50	; 0x32
   2b2c0:	2105      	movs	r1, #5
   2b2c2:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   2b2c4:	697b      	ldr	r3, [r7, #20]
   2b2c6:	2204      	movs	r2, #4
   2b2c8:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   2b2ca:	68fb      	ldr	r3, [r7, #12]
   2b2cc:	7a1b      	ldrb	r3, [r3, #8]
   2b2ce:	2b00      	cmp	r3, #0
   2b2d0:	d002      	beq.n	2b2d8 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   2b2d2:	697b      	ldr	r3, [r7, #20]
   2b2d4:	2220      	movs	r2, #32
   2b2d6:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   2b2d8:	68fb      	ldr	r3, [r7, #12]
   2b2da:	7a5b      	ldrb	r3, [r3, #9]
   2b2dc:	2b00      	cmp	r3, #0
   2b2de:	d002      	beq.n	2b2e6 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   2b2e0:	697b      	ldr	r3, [r7, #20]
   2b2e2:	2208      	movs	r2, #8
   2b2e4:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   2b2e6:	2300      	movs	r3, #0
}
   2b2e8:	0018      	movs	r0, r3
   2b2ea:	46bd      	mov	sp, r7
   2b2ec:	b006      	add	sp, #24
   2b2ee:	bd80      	pop	{r7, pc}
   2b2f0:	0002b1b9 	.word	0x0002b1b9
   2b2f4:	0002b1cd 	.word	0x0002b1cd

0002b2f8 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   2b2f8:	b580      	push	{r7, lr}
   2b2fa:	b084      	sub	sp, #16
   2b2fc:	af00      	add	r7, sp, #0
   2b2fe:	60f8      	str	r0, [r7, #12]
   2b300:	60b9      	str	r1, [r7, #8]
   2b302:	1dfb      	adds	r3, r7, #7
   2b304:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2b306:	1dfb      	adds	r3, r7, #7
   2b308:	781b      	ldrb	r3, [r3, #0]
   2b30a:	68fa      	ldr	r2, [r7, #12]
   2b30c:	3302      	adds	r3, #2
   2b30e:	009b      	lsls	r3, r3, #2
   2b310:	18d3      	adds	r3, r2, r3
   2b312:	3304      	adds	r3, #4
   2b314:	68ba      	ldr	r2, [r7, #8]
   2b316:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   2b318:	68fb      	ldr	r3, [r7, #12]
   2b31a:	2230      	movs	r2, #48	; 0x30
   2b31c:	5c9b      	ldrb	r3, [r3, r2]
   2b31e:	b25a      	sxtb	r2, r3
   2b320:	1dfb      	adds	r3, r7, #7
   2b322:	781b      	ldrb	r3, [r3, #0]
   2b324:	2101      	movs	r1, #1
   2b326:	4099      	lsls	r1, r3
   2b328:	000b      	movs	r3, r1
   2b32a:	b25b      	sxtb	r3, r3
   2b32c:	4313      	orrs	r3, r2
   2b32e:	b25b      	sxtb	r3, r3
   2b330:	b2d9      	uxtb	r1, r3
   2b332:	68fb      	ldr	r3, [r7, #12]
   2b334:	2230      	movs	r2, #48	; 0x30
   2b336:	5499      	strb	r1, [r3, r2]
}
   2b338:	46c0      	nop			; (mov r8, r8)
   2b33a:	46bd      	mov	sp, r7
   2b33c:	b004      	add	sp, #16
   2b33e:	bd80      	pop	{r7, pc}

0002b340 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   2b340:	b580      	push	{r7, lr}
   2b342:	b084      	sub	sp, #16
   2b344:	af00      	add	r7, sp, #0
   2b346:	60f8      	str	r0, [r7, #12]
   2b348:	60b9      	str	r1, [r7, #8]
   2b34a:	1dbb      	adds	r3, r7, #6
   2b34c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   2b34e:	1dbb      	adds	r3, r7, #6
   2b350:	881b      	ldrh	r3, [r3, #0]
   2b352:	2b00      	cmp	r3, #0
   2b354:	d101      	bne.n	2b35a <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   2b356:	2317      	movs	r3, #23
   2b358:	e010      	b.n	2b37c <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   2b35a:	68fb      	ldr	r3, [r7, #12]
   2b35c:	79db      	ldrb	r3, [r3, #7]
   2b35e:	2201      	movs	r2, #1
   2b360:	4053      	eors	r3, r2
   2b362:	b2db      	uxtb	r3, r3
   2b364:	2b00      	cmp	r3, #0
   2b366:	d001      	beq.n	2b36c <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   2b368:	231c      	movs	r3, #28
   2b36a:	e007      	b.n	2b37c <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   2b36c:	1dbb      	adds	r3, r7, #6
   2b36e:	881a      	ldrh	r2, [r3, #0]
   2b370:	68b9      	ldr	r1, [r7, #8]
   2b372:	68fb      	ldr	r3, [r7, #12]
   2b374:	0018      	movs	r0, r3
   2b376:	4b03      	ldr	r3, [pc, #12]	; (2b384 <usart_write_buffer_job+0x44>)
   2b378:	4798      	blx	r3
   2b37a:	0003      	movs	r3, r0
}
   2b37c:	0018      	movs	r0, r3
   2b37e:	46bd      	mov	sp, r7
   2b380:	b004      	add	sp, #16
   2b382:	bd80      	pop	{r7, pc}
   2b384:	0002b225 	.word	0x0002b225

0002b388 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   2b388:	b580      	push	{r7, lr}
   2b38a:	b084      	sub	sp, #16
   2b38c:	af00      	add	r7, sp, #0
   2b38e:	60f8      	str	r0, [r7, #12]
   2b390:	60b9      	str	r1, [r7, #8]
   2b392:	1dbb      	adds	r3, r7, #6
   2b394:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   2b396:	1dbb      	adds	r3, r7, #6
   2b398:	881b      	ldrh	r3, [r3, #0]
   2b39a:	2b00      	cmp	r3, #0
   2b39c:	d101      	bne.n	2b3a2 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   2b39e:	2317      	movs	r3, #23
   2b3a0:	e010      	b.n	2b3c4 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   2b3a2:	68fb      	ldr	r3, [r7, #12]
   2b3a4:	799b      	ldrb	r3, [r3, #6]
   2b3a6:	2201      	movs	r2, #1
   2b3a8:	4053      	eors	r3, r2
   2b3aa:	b2db      	uxtb	r3, r3
   2b3ac:	2b00      	cmp	r3, #0
   2b3ae:	d001      	beq.n	2b3b4 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   2b3b0:	231c      	movs	r3, #28
   2b3b2:	e007      	b.n	2b3c4 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   2b3b4:	1dbb      	adds	r3, r7, #6
   2b3b6:	881a      	ldrh	r2, [r3, #0]
   2b3b8:	68b9      	ldr	r1, [r7, #8]
   2b3ba:	68fb      	ldr	r3, [r7, #12]
   2b3bc:	0018      	movs	r0, r3
   2b3be:	4b03      	ldr	r3, [pc, #12]	; (2b3cc <usart_read_buffer_job+0x44>)
   2b3c0:	4798      	blx	r3
   2b3c2:	0003      	movs	r3, r0
}
   2b3c4:	0018      	movs	r0, r3
   2b3c6:	46bd      	mov	sp, r7
   2b3c8:	b004      	add	sp, #16
   2b3ca:	bd80      	pop	{r7, pc}
   2b3cc:	0002b281 	.word	0x0002b281

0002b3d0 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   2b3d0:	b580      	push	{r7, lr}
   2b3d2:	b084      	sub	sp, #16
   2b3d4:	af00      	add	r7, sp, #0
   2b3d6:	6078      	str	r0, [r7, #4]
   2b3d8:	000a      	movs	r2, r1
   2b3da:	1cfb      	adds	r3, r7, #3
   2b3dc:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   2b3de:	1cfb      	adds	r3, r7, #3
   2b3e0:	781b      	ldrb	r3, [r3, #0]
   2b3e2:	2b00      	cmp	r3, #0
   2b3e4:	d002      	beq.n	2b3ec <usart_get_job_status+0x1c>
   2b3e6:	2b01      	cmp	r3, #1
   2b3e8:	d007      	beq.n	2b3fa <usart_get_job_status+0x2a>
   2b3ea:	e00d      	b.n	2b408 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   2b3ec:	230f      	movs	r3, #15
   2b3ee:	18fb      	adds	r3, r7, r3
   2b3f0:	687a      	ldr	r2, [r7, #4]
   2b3f2:	2132      	movs	r1, #50	; 0x32
   2b3f4:	5c52      	ldrb	r2, [r2, r1]
   2b3f6:	701a      	strb	r2, [r3, #0]
			break;
   2b3f8:	e00b      	b.n	2b412 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   2b3fa:	230f      	movs	r3, #15
   2b3fc:	18fb      	adds	r3, r7, r3
   2b3fe:	687a      	ldr	r2, [r7, #4]
   2b400:	2133      	movs	r1, #51	; 0x33
   2b402:	5c52      	ldrb	r2, [r2, r1]
   2b404:	701a      	strb	r2, [r3, #0]
			break;
   2b406:	e004      	b.n	2b412 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   2b408:	230f      	movs	r3, #15
   2b40a:	18fb      	adds	r3, r7, r3
   2b40c:	2217      	movs	r2, #23
   2b40e:	701a      	strb	r2, [r3, #0]
			break;
   2b410:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   2b412:	230f      	movs	r3, #15
   2b414:	18fb      	adds	r3, r7, r3
   2b416:	781b      	ldrb	r3, [r3, #0]
}
   2b418:	0018      	movs	r0, r3
   2b41a:	46bd      	mov	sp, r7
   2b41c:	b004      	add	sp, #16
   2b41e:	bd80      	pop	{r7, pc}

0002b420 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   2b420:	b580      	push	{r7, lr}
   2b422:	b088      	sub	sp, #32
   2b424:	af00      	add	r7, sp, #0
   2b426:	0002      	movs	r2, r0
   2b428:	1dfb      	adds	r3, r7, #7
   2b42a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   2b42c:	1dfb      	adds	r3, r7, #7
   2b42e:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   2b430:	4ba3      	ldr	r3, [pc, #652]	; (2b6c0 <_usart_interrupt_handler+0x2a0>)
   2b432:	0092      	lsls	r2, r2, #2
   2b434:	58d3      	ldr	r3, [r2, r3]
   2b436:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   2b438:	69bb      	ldr	r3, [r7, #24]
   2b43a:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   2b43c:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   2b43e:	69bb      	ldr	r3, [r7, #24]
   2b440:	0018      	movs	r0, r3
   2b442:	4ba0      	ldr	r3, [pc, #640]	; (2b6c4 <_usart_interrupt_handler+0x2a4>)
   2b444:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   2b446:	697b      	ldr	r3, [r7, #20]
   2b448:	7e1b      	ldrb	r3, [r3, #24]
   2b44a:	b2da      	uxtb	r2, r3
   2b44c:	2312      	movs	r3, #18
   2b44e:	18fb      	adds	r3, r7, r3
   2b450:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   2b452:	697b      	ldr	r3, [r7, #20]
   2b454:	7d9b      	ldrb	r3, [r3, #22]
   2b456:	b2db      	uxtb	r3, r3
   2b458:	b29a      	uxth	r2, r3
   2b45a:	2312      	movs	r3, #18
   2b45c:	18fb      	adds	r3, r7, r3
   2b45e:	2112      	movs	r1, #18
   2b460:	1879      	adds	r1, r7, r1
   2b462:	8809      	ldrh	r1, [r1, #0]
   2b464:	400a      	ands	r2, r1
   2b466:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   2b468:	69bb      	ldr	r3, [r7, #24]
   2b46a:	2230      	movs	r2, #48	; 0x30
   2b46c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   2b46e:	69ba      	ldr	r2, [r7, #24]
   2b470:	2131      	movs	r1, #49	; 0x31
   2b472:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   2b474:	4013      	ands	r3, r2
   2b476:	b2da      	uxtb	r2, r3
   2b478:	2310      	movs	r3, #16
   2b47a:	18fb      	adds	r3, r7, r3
   2b47c:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   2b47e:	2312      	movs	r3, #18
   2b480:	18fb      	adds	r3, r7, r3
   2b482:	881b      	ldrh	r3, [r3, #0]
   2b484:	2201      	movs	r2, #1
   2b486:	4013      	ands	r3, r2
   2b488:	d044      	beq.n	2b514 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   2b48a:	69bb      	ldr	r3, [r7, #24]
   2b48c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2b48e:	b29b      	uxth	r3, r3
   2b490:	2b00      	cmp	r3, #0
   2b492:	d03c      	beq.n	2b50e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   2b494:	69bb      	ldr	r3, [r7, #24]
   2b496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b498:	781b      	ldrb	r3, [r3, #0]
   2b49a:	b2da      	uxtb	r2, r3
   2b49c:	231c      	movs	r3, #28
   2b49e:	18fb      	adds	r3, r7, r3
   2b4a0:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   2b4a2:	69bb      	ldr	r3, [r7, #24]
   2b4a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b4a6:	1c5a      	adds	r2, r3, #1
   2b4a8:	69bb      	ldr	r3, [r7, #24]
   2b4aa:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2b4ac:	69bb      	ldr	r3, [r7, #24]
   2b4ae:	795b      	ldrb	r3, [r3, #5]
   2b4b0:	2b01      	cmp	r3, #1
   2b4b2:	d113      	bne.n	2b4dc <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   2b4b4:	69bb      	ldr	r3, [r7, #24]
   2b4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b4b8:	781b      	ldrb	r3, [r3, #0]
   2b4ba:	b2db      	uxtb	r3, r3
   2b4bc:	021b      	lsls	r3, r3, #8
   2b4be:	b21a      	sxth	r2, r3
   2b4c0:	231c      	movs	r3, #28
   2b4c2:	18fb      	adds	r3, r7, r3
   2b4c4:	2100      	movs	r1, #0
   2b4c6:	5e5b      	ldrsh	r3, [r3, r1]
   2b4c8:	4313      	orrs	r3, r2
   2b4ca:	b21a      	sxth	r2, r3
   2b4cc:	231c      	movs	r3, #28
   2b4ce:	18fb      	adds	r3, r7, r3
   2b4d0:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   2b4d2:	69bb      	ldr	r3, [r7, #24]
   2b4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b4d6:	1c5a      	adds	r2, r3, #1
   2b4d8:	69bb      	ldr	r3, [r7, #24]
   2b4da:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   2b4dc:	231c      	movs	r3, #28
   2b4de:	18fb      	adds	r3, r7, r3
   2b4e0:	881b      	ldrh	r3, [r3, #0]
   2b4e2:	05db      	lsls	r3, r3, #23
   2b4e4:	0ddb      	lsrs	r3, r3, #23
   2b4e6:	b29a      	uxth	r2, r3
   2b4e8:	697b      	ldr	r3, [r7, #20]
   2b4ea:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   2b4ec:	69bb      	ldr	r3, [r7, #24]
   2b4ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2b4f0:	b29b      	uxth	r3, r3
   2b4f2:	3b01      	subs	r3, #1
   2b4f4:	b29b      	uxth	r3, r3
   2b4f6:	69ba      	ldr	r2, [r7, #24]
   2b4f8:	1c19      	adds	r1, r3, #0
   2b4fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
   2b4fc:	2b00      	cmp	r3, #0
   2b4fe:	d109      	bne.n	2b514 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2b500:	697b      	ldr	r3, [r7, #20]
   2b502:	2201      	movs	r2, #1
   2b504:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   2b506:	697b      	ldr	r3, [r7, #20]
   2b508:	2202      	movs	r2, #2
   2b50a:	759a      	strb	r2, [r3, #22]
   2b50c:	e002      	b.n	2b514 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2b50e:	697b      	ldr	r3, [r7, #20]
   2b510:	2201      	movs	r2, #1
   2b512:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   2b514:	2312      	movs	r3, #18
   2b516:	18fb      	adds	r3, r7, r3
   2b518:	881b      	ldrh	r3, [r3, #0]
   2b51a:	2202      	movs	r2, #2
   2b51c:	4013      	ands	r3, r2
   2b51e:	d011      	beq.n	2b544 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   2b520:	697b      	ldr	r3, [r7, #20]
   2b522:	2202      	movs	r2, #2
   2b524:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   2b526:	69bb      	ldr	r3, [r7, #24]
   2b528:	2233      	movs	r2, #51	; 0x33
   2b52a:	2100      	movs	r1, #0
   2b52c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   2b52e:	2310      	movs	r3, #16
   2b530:	18fb      	adds	r3, r7, r3
   2b532:	881b      	ldrh	r3, [r3, #0]
   2b534:	2201      	movs	r2, #1
   2b536:	4013      	ands	r3, r2
   2b538:	d004      	beq.n	2b544 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   2b53a:	69bb      	ldr	r3, [r7, #24]
   2b53c:	68db      	ldr	r3, [r3, #12]
   2b53e:	69ba      	ldr	r2, [r7, #24]
   2b540:	0010      	movs	r0, r2
   2b542:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   2b544:	2312      	movs	r3, #18
   2b546:	18fb      	adds	r3, r7, r3
   2b548:	881b      	ldrh	r3, [r3, #0]
   2b54a:	2204      	movs	r2, #4
   2b54c:	4013      	ands	r3, r2
   2b54e:	d100      	bne.n	2b552 <_usart_interrupt_handler+0x132>
   2b550:	e0bd      	b.n	2b6ce <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   2b552:	69bb      	ldr	r3, [r7, #24]
   2b554:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2b556:	b29b      	uxth	r3, r3
   2b558:	2b00      	cmp	r3, #0
   2b55a:	d100      	bne.n	2b55e <_usart_interrupt_handler+0x13e>
   2b55c:	e0b4      	b.n	2b6c8 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   2b55e:	697b      	ldr	r3, [r7, #20]
   2b560:	8b5b      	ldrh	r3, [r3, #26]
   2b562:	b29b      	uxth	r3, r3
   2b564:	b2da      	uxtb	r2, r3
   2b566:	231f      	movs	r3, #31
   2b568:	18fb      	adds	r3, r7, r3
   2b56a:	213f      	movs	r1, #63	; 0x3f
   2b56c:	400a      	ands	r2, r1
   2b56e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   2b570:	231f      	movs	r3, #31
   2b572:	18fb      	adds	r3, r7, r3
   2b574:	781b      	ldrb	r3, [r3, #0]
   2b576:	2208      	movs	r2, #8
   2b578:	4013      	ands	r3, r2
   2b57a:	d007      	beq.n	2b58c <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   2b57c:	231f      	movs	r3, #31
   2b57e:	18fb      	adds	r3, r7, r3
   2b580:	221f      	movs	r2, #31
   2b582:	18ba      	adds	r2, r7, r2
   2b584:	7812      	ldrb	r2, [r2, #0]
   2b586:	2108      	movs	r1, #8
   2b588:	438a      	bics	r2, r1
   2b58a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   2b58c:	231f      	movs	r3, #31
   2b58e:	18fb      	adds	r3, r7, r3
   2b590:	781b      	ldrb	r3, [r3, #0]
   2b592:	2b00      	cmp	r3, #0
   2b594:	d050      	beq.n	2b638 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   2b596:	231f      	movs	r3, #31
   2b598:	18fb      	adds	r3, r7, r3
   2b59a:	781b      	ldrb	r3, [r3, #0]
   2b59c:	2202      	movs	r2, #2
   2b59e:	4013      	ands	r3, r2
   2b5a0:	d007      	beq.n	2b5b2 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   2b5a2:	69bb      	ldr	r3, [r7, #24]
   2b5a4:	2232      	movs	r2, #50	; 0x32
   2b5a6:	211a      	movs	r1, #26
   2b5a8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   2b5aa:	697b      	ldr	r3, [r7, #20]
   2b5ac:	2202      	movs	r2, #2
   2b5ae:	835a      	strh	r2, [r3, #26]
   2b5b0:	e036      	b.n	2b620 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   2b5b2:	231f      	movs	r3, #31
   2b5b4:	18fb      	adds	r3, r7, r3
   2b5b6:	781b      	ldrb	r3, [r3, #0]
   2b5b8:	2204      	movs	r2, #4
   2b5ba:	4013      	ands	r3, r2
   2b5bc:	d007      	beq.n	2b5ce <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   2b5be:	69bb      	ldr	r3, [r7, #24]
   2b5c0:	2232      	movs	r2, #50	; 0x32
   2b5c2:	211e      	movs	r1, #30
   2b5c4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   2b5c6:	697b      	ldr	r3, [r7, #20]
   2b5c8:	2204      	movs	r2, #4
   2b5ca:	835a      	strh	r2, [r3, #26]
   2b5cc:	e028      	b.n	2b620 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   2b5ce:	231f      	movs	r3, #31
   2b5d0:	18fb      	adds	r3, r7, r3
   2b5d2:	781b      	ldrb	r3, [r3, #0]
   2b5d4:	2201      	movs	r2, #1
   2b5d6:	4013      	ands	r3, r2
   2b5d8:	d007      	beq.n	2b5ea <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   2b5da:	69bb      	ldr	r3, [r7, #24]
   2b5dc:	2232      	movs	r2, #50	; 0x32
   2b5de:	2113      	movs	r1, #19
   2b5e0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   2b5e2:	697b      	ldr	r3, [r7, #20]
   2b5e4:	2201      	movs	r2, #1
   2b5e6:	835a      	strh	r2, [r3, #26]
   2b5e8:	e01a      	b.n	2b620 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   2b5ea:	231f      	movs	r3, #31
   2b5ec:	18fb      	adds	r3, r7, r3
   2b5ee:	781b      	ldrb	r3, [r3, #0]
   2b5f0:	2210      	movs	r2, #16
   2b5f2:	4013      	ands	r3, r2
   2b5f4:	d007      	beq.n	2b606 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   2b5f6:	69bb      	ldr	r3, [r7, #24]
   2b5f8:	2232      	movs	r2, #50	; 0x32
   2b5fa:	2142      	movs	r1, #66	; 0x42
   2b5fc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   2b5fe:	697b      	ldr	r3, [r7, #20]
   2b600:	2210      	movs	r2, #16
   2b602:	835a      	strh	r2, [r3, #26]
   2b604:	e00c      	b.n	2b620 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   2b606:	231f      	movs	r3, #31
   2b608:	18fb      	adds	r3, r7, r3
   2b60a:	781b      	ldrb	r3, [r3, #0]
   2b60c:	2220      	movs	r2, #32
   2b60e:	4013      	ands	r3, r2
   2b610:	d006      	beq.n	2b620 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   2b612:	69bb      	ldr	r3, [r7, #24]
   2b614:	2232      	movs	r2, #50	; 0x32
   2b616:	2141      	movs	r1, #65	; 0x41
   2b618:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   2b61a:	697b      	ldr	r3, [r7, #20]
   2b61c:	2220      	movs	r2, #32
   2b61e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   2b620:	2310      	movs	r3, #16
   2b622:	18fb      	adds	r3, r7, r3
   2b624:	881b      	ldrh	r3, [r3, #0]
   2b626:	2204      	movs	r2, #4
   2b628:	4013      	ands	r3, r2
				if (callback_status
   2b62a:	d050      	beq.n	2b6ce <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   2b62c:	69bb      	ldr	r3, [r7, #24]
   2b62e:	695b      	ldr	r3, [r3, #20]
   2b630:	69ba      	ldr	r2, [r7, #24]
   2b632:	0010      	movs	r0, r2
   2b634:	4798      	blx	r3
   2b636:	e04a      	b.n	2b6ce <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   2b638:	697b      	ldr	r3, [r7, #20]
   2b63a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   2b63c:	b29a      	uxth	r2, r3
   2b63e:	230e      	movs	r3, #14
   2b640:	18fb      	adds	r3, r7, r3
   2b642:	05d2      	lsls	r2, r2, #23
   2b644:	0dd2      	lsrs	r2, r2, #23
   2b646:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   2b648:	69bb      	ldr	r3, [r7, #24]
   2b64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b64c:	220e      	movs	r2, #14
   2b64e:	18ba      	adds	r2, r7, r2
   2b650:	8812      	ldrh	r2, [r2, #0]
   2b652:	b2d2      	uxtb	r2, r2
   2b654:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   2b656:	69bb      	ldr	r3, [r7, #24]
   2b658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b65a:	1c5a      	adds	r2, r3, #1
   2b65c:	69bb      	ldr	r3, [r7, #24]
   2b65e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2b660:	69bb      	ldr	r3, [r7, #24]
   2b662:	795b      	ldrb	r3, [r3, #5]
   2b664:	2b01      	cmp	r3, #1
   2b666:	d10d      	bne.n	2b684 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   2b668:	69bb      	ldr	r3, [r7, #24]
   2b66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b66c:	220e      	movs	r2, #14
   2b66e:	18ba      	adds	r2, r7, r2
   2b670:	8812      	ldrh	r2, [r2, #0]
   2b672:	0a12      	lsrs	r2, r2, #8
   2b674:	b292      	uxth	r2, r2
   2b676:	b2d2      	uxtb	r2, r2
   2b678:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   2b67a:	69bb      	ldr	r3, [r7, #24]
   2b67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b67e:	1c5a      	adds	r2, r3, #1
   2b680:	69bb      	ldr	r3, [r7, #24]
   2b682:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   2b684:	69bb      	ldr	r3, [r7, #24]
   2b686:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2b688:	b29b      	uxth	r3, r3
   2b68a:	3b01      	subs	r3, #1
   2b68c:	b29b      	uxth	r3, r3
   2b68e:	69ba      	ldr	r2, [r7, #24]
   2b690:	1c19      	adds	r1, r3, #0
   2b692:	8591      	strh	r1, [r2, #44]	; 0x2c
   2b694:	2b00      	cmp	r3, #0
   2b696:	d11a      	bne.n	2b6ce <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   2b698:	697b      	ldr	r3, [r7, #20]
   2b69a:	2204      	movs	r2, #4
   2b69c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   2b69e:	69bb      	ldr	r3, [r7, #24]
   2b6a0:	2232      	movs	r2, #50	; 0x32
   2b6a2:	2100      	movs	r1, #0
   2b6a4:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   2b6a6:	2310      	movs	r3, #16
   2b6a8:	18fb      	adds	r3, r7, r3
   2b6aa:	881b      	ldrh	r3, [r3, #0]
   2b6ac:	2202      	movs	r2, #2
   2b6ae:	4013      	ands	r3, r2
					if (callback_status
   2b6b0:	d00d      	beq.n	2b6ce <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   2b6b2:	69bb      	ldr	r3, [r7, #24]
   2b6b4:	691b      	ldr	r3, [r3, #16]
   2b6b6:	69ba      	ldr	r2, [r7, #24]
   2b6b8:	0010      	movs	r0, r2
   2b6ba:	4798      	blx	r3
   2b6bc:	e007      	b.n	2b6ce <_usart_interrupt_handler+0x2ae>
   2b6be:	46c0      	nop			; (mov r8, r8)
   2b6c0:	20005a84 	.word	0x20005a84
   2b6c4:	0002b201 	.word	0x0002b201
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   2b6c8:	697b      	ldr	r3, [r7, #20]
   2b6ca:	2204      	movs	r2, #4
   2b6cc:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   2b6ce:	2312      	movs	r3, #18
   2b6d0:	18fb      	adds	r3, r7, r3
   2b6d2:	881b      	ldrh	r3, [r3, #0]
   2b6d4:	2210      	movs	r2, #16
   2b6d6:	4013      	ands	r3, r2
   2b6d8:	d010      	beq.n	2b6fc <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   2b6da:	697b      	ldr	r3, [r7, #20]
   2b6dc:	2210      	movs	r2, #16
   2b6de:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   2b6e0:	697b      	ldr	r3, [r7, #20]
   2b6e2:	2210      	movs	r2, #16
   2b6e4:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   2b6e6:	2310      	movs	r3, #16
   2b6e8:	18fb      	adds	r3, r7, r3
   2b6ea:	881b      	ldrh	r3, [r3, #0]
   2b6ec:	2210      	movs	r2, #16
   2b6ee:	4013      	ands	r3, r2
   2b6f0:	d004      	beq.n	2b6fc <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   2b6f2:	69bb      	ldr	r3, [r7, #24]
   2b6f4:	69db      	ldr	r3, [r3, #28]
   2b6f6:	69ba      	ldr	r2, [r7, #24]
   2b6f8:	0010      	movs	r0, r2
   2b6fa:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   2b6fc:	2312      	movs	r3, #18
   2b6fe:	18fb      	adds	r3, r7, r3
   2b700:	881b      	ldrh	r3, [r3, #0]
   2b702:	2220      	movs	r2, #32
   2b704:	4013      	ands	r3, r2
   2b706:	d010      	beq.n	2b72a <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   2b708:	697b      	ldr	r3, [r7, #20]
   2b70a:	2220      	movs	r2, #32
   2b70c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   2b70e:	697b      	ldr	r3, [r7, #20]
   2b710:	2220      	movs	r2, #32
   2b712:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   2b714:	2310      	movs	r3, #16
   2b716:	18fb      	adds	r3, r7, r3
   2b718:	881b      	ldrh	r3, [r3, #0]
   2b71a:	2208      	movs	r2, #8
   2b71c:	4013      	ands	r3, r2
   2b71e:	d004      	beq.n	2b72a <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   2b720:	69bb      	ldr	r3, [r7, #24]
   2b722:	699b      	ldr	r3, [r3, #24]
   2b724:	69ba      	ldr	r2, [r7, #24]
   2b726:	0010      	movs	r0, r2
   2b728:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   2b72a:	2312      	movs	r3, #18
   2b72c:	18fb      	adds	r3, r7, r3
   2b72e:	881b      	ldrh	r3, [r3, #0]
   2b730:	2208      	movs	r2, #8
   2b732:	4013      	ands	r3, r2
   2b734:	d010      	beq.n	2b758 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   2b736:	697b      	ldr	r3, [r7, #20]
   2b738:	2208      	movs	r2, #8
   2b73a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   2b73c:	697b      	ldr	r3, [r7, #20]
   2b73e:	2208      	movs	r2, #8
   2b740:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   2b742:	2310      	movs	r3, #16
   2b744:	18fb      	adds	r3, r7, r3
   2b746:	881b      	ldrh	r3, [r3, #0]
   2b748:	2220      	movs	r2, #32
   2b74a:	4013      	ands	r3, r2
   2b74c:	d004      	beq.n	2b758 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   2b74e:	69bb      	ldr	r3, [r7, #24]
   2b750:	6a1b      	ldr	r3, [r3, #32]
   2b752:	69ba      	ldr	r2, [r7, #24]
   2b754:	0010      	movs	r0, r2
   2b756:	4798      	blx	r3
		}
	}
#endif
}
   2b758:	46c0      	nop			; (mov r8, r8)
   2b75a:	46bd      	mov	sp, r7
   2b75c:	b008      	add	sp, #32
   2b75e:	bd80      	pop	{r7, pc}

0002b760 <system_gclk_gen_get_config_defaults>:
{
   2b760:	b580      	push	{r7, lr}
   2b762:	b082      	sub	sp, #8
   2b764:	af00      	add	r7, sp, #0
   2b766:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   2b768:	687b      	ldr	r3, [r7, #4]
   2b76a:	2201      	movs	r2, #1
   2b76c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   2b76e:	687b      	ldr	r3, [r7, #4]
   2b770:	2200      	movs	r2, #0
   2b772:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   2b774:	687b      	ldr	r3, [r7, #4]
   2b776:	2206      	movs	r2, #6
   2b778:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   2b77a:	687b      	ldr	r3, [r7, #4]
   2b77c:	2200      	movs	r2, #0
   2b77e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   2b780:	687b      	ldr	r3, [r7, #4]
   2b782:	2200      	movs	r2, #0
   2b784:	725a      	strb	r2, [r3, #9]
}
   2b786:	46c0      	nop			; (mov r8, r8)
   2b788:	46bd      	mov	sp, r7
   2b78a:	b002      	add	sp, #8
   2b78c:	bd80      	pop	{r7, pc}

0002b78e <system_gclk_chan_get_config_defaults>:
{
   2b78e:	b580      	push	{r7, lr}
   2b790:	b082      	sub	sp, #8
   2b792:	af00      	add	r7, sp, #0
   2b794:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2b796:	687b      	ldr	r3, [r7, #4]
   2b798:	2200      	movs	r2, #0
   2b79a:	701a      	strb	r2, [r3, #0]
}
   2b79c:	46c0      	nop			; (mov r8, r8)
   2b79e:	46bd      	mov	sp, r7
   2b7a0:	b002      	add	sp, #8
   2b7a2:	bd80      	pop	{r7, pc}

0002b7a4 <system_clock_source_osc8m_get_config_defaults>:
{
   2b7a4:	b580      	push	{r7, lr}
   2b7a6:	b082      	sub	sp, #8
   2b7a8:	af00      	add	r7, sp, #0
   2b7aa:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   2b7ac:	687b      	ldr	r3, [r7, #4]
   2b7ae:	2203      	movs	r2, #3
   2b7b0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   2b7b2:	687b      	ldr	r3, [r7, #4]
   2b7b4:	2200      	movs	r2, #0
   2b7b6:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   2b7b8:	687b      	ldr	r3, [r7, #4]
   2b7ba:	2201      	movs	r2, #1
   2b7bc:	709a      	strb	r2, [r3, #2]
}
   2b7be:	46c0      	nop			; (mov r8, r8)
   2b7c0:	46bd      	mov	sp, r7
   2b7c2:	b002      	add	sp, #8
   2b7c4:	bd80      	pop	{r7, pc}
	...

0002b7c8 <system_cpu_clock_set_divider>:
{
   2b7c8:	b580      	push	{r7, lr}
   2b7ca:	b082      	sub	sp, #8
   2b7cc:	af00      	add	r7, sp, #0
   2b7ce:	0002      	movs	r2, r0
   2b7d0:	1dfb      	adds	r3, r7, #7
   2b7d2:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   2b7d4:	4a03      	ldr	r2, [pc, #12]	; (2b7e4 <system_cpu_clock_set_divider+0x1c>)
   2b7d6:	1dfb      	adds	r3, r7, #7
   2b7d8:	781b      	ldrb	r3, [r3, #0]
   2b7da:	7213      	strb	r3, [r2, #8]
}
   2b7dc:	46c0      	nop			; (mov r8, r8)
   2b7de:	46bd      	mov	sp, r7
   2b7e0:	b002      	add	sp, #8
   2b7e2:	bd80      	pop	{r7, pc}
   2b7e4:	40000400 	.word	0x40000400

0002b7e8 <system_apb_clock_set_divider>:
{
   2b7e8:	b580      	push	{r7, lr}
   2b7ea:	b082      	sub	sp, #8
   2b7ec:	af00      	add	r7, sp, #0
   2b7ee:	0002      	movs	r2, r0
   2b7f0:	1dfb      	adds	r3, r7, #7
   2b7f2:	701a      	strb	r2, [r3, #0]
   2b7f4:	1dbb      	adds	r3, r7, #6
   2b7f6:	1c0a      	adds	r2, r1, #0
   2b7f8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2b7fa:	1dfb      	adds	r3, r7, #7
   2b7fc:	781b      	ldrb	r3, [r3, #0]
   2b7fe:	2b01      	cmp	r3, #1
   2b800:	d008      	beq.n	2b814 <system_apb_clock_set_divider+0x2c>
   2b802:	2b02      	cmp	r3, #2
   2b804:	d00b      	beq.n	2b81e <system_apb_clock_set_divider+0x36>
   2b806:	2b00      	cmp	r3, #0
   2b808:	d10e      	bne.n	2b828 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   2b80a:	4a0b      	ldr	r2, [pc, #44]	; (2b838 <system_apb_clock_set_divider+0x50>)
   2b80c:	1dbb      	adds	r3, r7, #6
   2b80e:	781b      	ldrb	r3, [r3, #0]
   2b810:	7253      	strb	r3, [r2, #9]
			break;
   2b812:	e00b      	b.n	2b82c <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   2b814:	4a08      	ldr	r2, [pc, #32]	; (2b838 <system_apb_clock_set_divider+0x50>)
   2b816:	1dbb      	adds	r3, r7, #6
   2b818:	781b      	ldrb	r3, [r3, #0]
   2b81a:	7293      	strb	r3, [r2, #10]
			break;
   2b81c:	e006      	b.n	2b82c <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   2b81e:	4a06      	ldr	r2, [pc, #24]	; (2b838 <system_apb_clock_set_divider+0x50>)
   2b820:	1dbb      	adds	r3, r7, #6
   2b822:	781b      	ldrb	r3, [r3, #0]
   2b824:	72d3      	strb	r3, [r2, #11]
			break;
   2b826:	e001      	b.n	2b82c <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   2b828:	2317      	movs	r3, #23
   2b82a:	e000      	b.n	2b82e <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   2b82c:	2300      	movs	r3, #0
}
   2b82e:	0018      	movs	r0, r3
   2b830:	46bd      	mov	sp, r7
   2b832:	b002      	add	sp, #8
   2b834:	bd80      	pop	{r7, pc}
   2b836:	46c0      	nop			; (mov r8, r8)
   2b838:	40000400 	.word	0x40000400

0002b83c <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   2b83c:	b580      	push	{r7, lr}
   2b83e:	b082      	sub	sp, #8
   2b840:	af00      	add	r7, sp, #0
   2b842:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   2b844:	687b      	ldr	r3, [r7, #4]
   2b846:	2201      	movs	r2, #1
   2b848:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   2b84a:	687b      	ldr	r3, [r7, #4]
   2b84c:	2200      	movs	r2, #0
   2b84e:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   2b850:	687b      	ldr	r3, [r7, #4]
   2b852:	2200      	movs	r2, #0
   2b854:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   2b856:	687b      	ldr	r3, [r7, #4]
   2b858:	2200      	movs	r2, #0
   2b85a:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   2b85c:	687b      	ldr	r3, [r7, #4]
   2b85e:	2200      	movs	r2, #0
   2b860:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   2b862:	687b      	ldr	r3, [r7, #4]
   2b864:	4a0a      	ldr	r2, [pc, #40]	; (2b890 <system_clock_source_dpll_get_config_defaults+0x54>)
   2b866:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   2b868:	687b      	ldr	r3, [r7, #4]
   2b86a:	2280      	movs	r2, #128	; 0x80
   2b86c:	0212      	lsls	r2, r2, #8
   2b86e:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   2b870:	687b      	ldr	r3, [r7, #4]
   2b872:	2201      	movs	r2, #1
   2b874:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   2b876:	687b      	ldr	r3, [r7, #4]
   2b878:	2200      	movs	r2, #0
   2b87a:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   2b87c:	687b      	ldr	r3, [r7, #4]
   2b87e:	2200      	movs	r2, #0
   2b880:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   2b882:	687b      	ldr	r3, [r7, #4]
   2b884:	2200      	movs	r2, #0
   2b886:	749a      	strb	r2, [r3, #18]
};
   2b888:	46c0      	nop			; (mov r8, r8)
   2b88a:	46bd      	mov	sp, r7
   2b88c:	b002      	add	sp, #8
   2b88e:	bd80      	pop	{r7, pc}
   2b890:	02dc6c00 	.word	0x02dc6c00

0002b894 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   2b894:	b580      	push	{r7, lr}
   2b896:	b082      	sub	sp, #8
   2b898:	af00      	add	r7, sp, #0
   2b89a:	0002      	movs	r2, r0
   2b89c:	1dfb      	adds	r3, r7, #7
   2b89e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   2b8a0:	4a08      	ldr	r2, [pc, #32]	; (2b8c4 <system_flash_set_waitstates+0x30>)
   2b8a2:	1dfb      	adds	r3, r7, #7
   2b8a4:	781b      	ldrb	r3, [r3, #0]
   2b8a6:	210f      	movs	r1, #15
   2b8a8:	400b      	ands	r3, r1
   2b8aa:	b2d9      	uxtb	r1, r3
   2b8ac:	6853      	ldr	r3, [r2, #4]
   2b8ae:	200f      	movs	r0, #15
   2b8b0:	4001      	ands	r1, r0
   2b8b2:	0049      	lsls	r1, r1, #1
   2b8b4:	201e      	movs	r0, #30
   2b8b6:	4383      	bics	r3, r0
   2b8b8:	430b      	orrs	r3, r1
   2b8ba:	6053      	str	r3, [r2, #4]
}
   2b8bc:	46c0      	nop			; (mov r8, r8)
   2b8be:	46bd      	mov	sp, r7
   2b8c0:	b002      	add	sp, #8
   2b8c2:	bd80      	pop	{r7, pc}
   2b8c4:	41004000 	.word	0x41004000

0002b8c8 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   2b8c8:	b580      	push	{r7, lr}
   2b8ca:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   2b8cc:	46c0      	nop			; (mov r8, r8)
   2b8ce:	4b04      	ldr	r3, [pc, #16]	; (2b8e0 <_system_dfll_wait_for_sync+0x18>)
   2b8d0:	68db      	ldr	r3, [r3, #12]
   2b8d2:	2210      	movs	r2, #16
   2b8d4:	4013      	ands	r3, r2
   2b8d6:	d0fa      	beq.n	2b8ce <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   2b8d8:	46c0      	nop			; (mov r8, r8)
   2b8da:	46bd      	mov	sp, r7
   2b8dc:	bd80      	pop	{r7, pc}
   2b8de:	46c0      	nop			; (mov r8, r8)
   2b8e0:	40000800 	.word	0x40000800

0002b8e4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   2b8e4:	b580      	push	{r7, lr}
   2b8e6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   2b8e8:	4b0c      	ldr	r3, [pc, #48]	; (2b91c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2b8ea:	2202      	movs	r2, #2
   2b8ec:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2b8ee:	4b0c      	ldr	r3, [pc, #48]	; (2b920 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2b8f0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   2b8f2:	4a0a      	ldr	r2, [pc, #40]	; (2b91c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2b8f4:	4b0b      	ldr	r3, [pc, #44]	; (2b924 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2b8f6:	689b      	ldr	r3, [r3, #8]
   2b8f8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   2b8fa:	4a08      	ldr	r2, [pc, #32]	; (2b91c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2b8fc:	4b09      	ldr	r3, [pc, #36]	; (2b924 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2b8fe:	685b      	ldr	r3, [r3, #4]
   2b900:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   2b902:	4b06      	ldr	r3, [pc, #24]	; (2b91c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2b904:	2200      	movs	r2, #0
   2b906:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2b908:	4b05      	ldr	r3, [pc, #20]	; (2b920 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2b90a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   2b90c:	4a03      	ldr	r2, [pc, #12]	; (2b91c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2b90e:	4b05      	ldr	r3, [pc, #20]	; (2b924 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2b910:	681b      	ldr	r3, [r3, #0]
   2b912:	b29b      	uxth	r3, r3
   2b914:	8493      	strh	r3, [r2, #36]	; 0x24
}
   2b916:	46c0      	nop			; (mov r8, r8)
   2b918:	46bd      	mov	sp, r7
   2b91a:	bd80      	pop	{r7, pc}
   2b91c:	40000800 	.word	0x40000800
   2b920:	0002b8c9 	.word	0x0002b8c9
   2b924:	20004150 	.word	0x20004150

0002b928 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   2b928:	b580      	push	{r7, lr}
   2b92a:	b082      	sub	sp, #8
   2b92c:	af00      	add	r7, sp, #0
   2b92e:	0002      	movs	r2, r0
   2b930:	1dfb      	adds	r3, r7, #7
   2b932:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2b934:	1dfb      	adds	r3, r7, #7
   2b936:	781b      	ldrb	r3, [r3, #0]
   2b938:	2b08      	cmp	r3, #8
   2b93a:	d841      	bhi.n	2b9c0 <system_clock_source_get_hz+0x98>
   2b93c:	009a      	lsls	r2, r3, #2
   2b93e:	4b23      	ldr	r3, [pc, #140]	; (2b9cc <system_clock_source_get_hz+0xa4>)
   2b940:	18d3      	adds	r3, r2, r3
   2b942:	681b      	ldr	r3, [r3, #0]
   2b944:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   2b946:	4b22      	ldr	r3, [pc, #136]	; (2b9d0 <system_clock_source_get_hz+0xa8>)
   2b948:	691b      	ldr	r3, [r3, #16]
   2b94a:	e03a      	b.n	2b9c2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   2b94c:	4b21      	ldr	r3, [pc, #132]	; (2b9d4 <system_clock_source_get_hz+0xac>)
   2b94e:	6a1b      	ldr	r3, [r3, #32]
   2b950:	059b      	lsls	r3, r3, #22
   2b952:	0f9b      	lsrs	r3, r3, #30
   2b954:	b2db      	uxtb	r3, r3
   2b956:	001a      	movs	r2, r3
   2b958:	4b1f      	ldr	r3, [pc, #124]	; (2b9d8 <system_clock_source_get_hz+0xb0>)
   2b95a:	40d3      	lsrs	r3, r2
   2b95c:	e031      	b.n	2b9c2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   2b95e:	2380      	movs	r3, #128	; 0x80
   2b960:	021b      	lsls	r3, r3, #8
   2b962:	e02e      	b.n	2b9c2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   2b964:	2380      	movs	r3, #128	; 0x80
   2b966:	021b      	lsls	r3, r3, #8
   2b968:	e02b      	b.n	2b9c2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   2b96a:	4b19      	ldr	r3, [pc, #100]	; (2b9d0 <system_clock_source_get_hz+0xa8>)
   2b96c:	695b      	ldr	r3, [r3, #20]
   2b96e:	e028      	b.n	2b9c2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   2b970:	4b17      	ldr	r3, [pc, #92]	; (2b9d0 <system_clock_source_get_hz+0xa8>)
   2b972:	681b      	ldr	r3, [r3, #0]
   2b974:	2202      	movs	r2, #2
   2b976:	4013      	ands	r3, r2
   2b978:	d101      	bne.n	2b97e <system_clock_source_get_hz+0x56>
			return 0;
   2b97a:	2300      	movs	r3, #0
   2b97c:	e021      	b.n	2b9c2 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   2b97e:	4b17      	ldr	r3, [pc, #92]	; (2b9dc <system_clock_source_get_hz+0xb4>)
   2b980:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   2b982:	4b13      	ldr	r3, [pc, #76]	; (2b9d0 <system_clock_source_get_hz+0xa8>)
   2b984:	681b      	ldr	r3, [r3, #0]
   2b986:	2224      	movs	r2, #36	; 0x24
   2b988:	4013      	ands	r3, r2
   2b98a:	2b04      	cmp	r3, #4
   2b98c:	d109      	bne.n	2b9a2 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2b98e:	2000      	movs	r0, #0
   2b990:	4b13      	ldr	r3, [pc, #76]	; (2b9e0 <system_clock_source_get_hz+0xb8>)
   2b992:	4798      	blx	r3
   2b994:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   2b996:	4b0e      	ldr	r3, [pc, #56]	; (2b9d0 <system_clock_source_get_hz+0xa8>)
   2b998:	689b      	ldr	r3, [r3, #8]
   2b99a:	041b      	lsls	r3, r3, #16
   2b99c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2b99e:	4353      	muls	r3, r2
   2b9a0:	e00f      	b.n	2b9c2 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   2b9a2:	4b10      	ldr	r3, [pc, #64]	; (2b9e4 <system_clock_source_get_hz+0xbc>)
   2b9a4:	e00d      	b.n	2b9c2 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   2b9a6:	4a0b      	ldr	r2, [pc, #44]	; (2b9d4 <system_clock_source_get_hz+0xac>)
   2b9a8:	2350      	movs	r3, #80	; 0x50
   2b9aa:	5cd3      	ldrb	r3, [r2, r3]
   2b9ac:	b2db      	uxtb	r3, r3
   2b9ae:	001a      	movs	r2, r3
   2b9b0:	2304      	movs	r3, #4
   2b9b2:	4013      	ands	r3, r2
   2b9b4:	d101      	bne.n	2b9ba <system_clock_source_get_hz+0x92>
			return 0;
   2b9b6:	2300      	movs	r3, #0
   2b9b8:	e003      	b.n	2b9c2 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   2b9ba:	4b05      	ldr	r3, [pc, #20]	; (2b9d0 <system_clock_source_get_hz+0xa8>)
   2b9bc:	68db      	ldr	r3, [r3, #12]
   2b9be:	e000      	b.n	2b9c2 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   2b9c0:	2300      	movs	r3, #0
	}
}
   2b9c2:	0018      	movs	r0, r3
   2b9c4:	46bd      	mov	sp, r7
   2b9c6:	b002      	add	sp, #8
   2b9c8:	bd80      	pop	{r7, pc}
   2b9ca:	46c0      	nop			; (mov r8, r8)
   2b9cc:	0003c7bc 	.word	0x0003c7bc
   2b9d0:	20004150 	.word	0x20004150
   2b9d4:	40000800 	.word	0x40000800
   2b9d8:	007a1200 	.word	0x007a1200
   2b9dc:	0002b8c9 	.word	0x0002b8c9
   2b9e0:	0002c3c5 	.word	0x0002c3c5
   2b9e4:	02dc6c00 	.word	0x02dc6c00

0002b9e8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   2b9e8:	b580      	push	{r7, lr}
   2b9ea:	b084      	sub	sp, #16
   2b9ec:	af00      	add	r7, sp, #0
   2b9ee:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   2b9f0:	4b1a      	ldr	r3, [pc, #104]	; (2ba5c <system_clock_source_osc8m_set_config+0x74>)
   2b9f2:	6a1b      	ldr	r3, [r3, #32]
   2b9f4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   2b9f6:	687b      	ldr	r3, [r7, #4]
   2b9f8:	781b      	ldrb	r3, [r3, #0]
   2b9fa:	1c1a      	adds	r2, r3, #0
   2b9fc:	2303      	movs	r3, #3
   2b9fe:	4013      	ands	r3, r2
   2ba00:	b2da      	uxtb	r2, r3
   2ba02:	230d      	movs	r3, #13
   2ba04:	18fb      	adds	r3, r7, r3
   2ba06:	2103      	movs	r1, #3
   2ba08:	400a      	ands	r2, r1
   2ba0a:	0010      	movs	r0, r2
   2ba0c:	781a      	ldrb	r2, [r3, #0]
   2ba0e:	2103      	movs	r1, #3
   2ba10:	438a      	bics	r2, r1
   2ba12:	1c11      	adds	r1, r2, #0
   2ba14:	1c02      	adds	r2, r0, #0
   2ba16:	430a      	orrs	r2, r1
   2ba18:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   2ba1a:	687b      	ldr	r3, [r7, #4]
   2ba1c:	789a      	ldrb	r2, [r3, #2]
   2ba1e:	230c      	movs	r3, #12
   2ba20:	18fb      	adds	r3, r7, r3
   2ba22:	01d0      	lsls	r0, r2, #7
   2ba24:	781a      	ldrb	r2, [r3, #0]
   2ba26:	217f      	movs	r1, #127	; 0x7f
   2ba28:	400a      	ands	r2, r1
   2ba2a:	1c11      	adds	r1, r2, #0
   2ba2c:	1c02      	adds	r2, r0, #0
   2ba2e:	430a      	orrs	r2, r1
   2ba30:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   2ba32:	687b      	ldr	r3, [r7, #4]
   2ba34:	785a      	ldrb	r2, [r3, #1]
   2ba36:	230c      	movs	r3, #12
   2ba38:	18fb      	adds	r3, r7, r3
   2ba3a:	2101      	movs	r1, #1
   2ba3c:	400a      	ands	r2, r1
   2ba3e:	0190      	lsls	r0, r2, #6
   2ba40:	781a      	ldrb	r2, [r3, #0]
   2ba42:	2140      	movs	r1, #64	; 0x40
   2ba44:	438a      	bics	r2, r1
   2ba46:	1c11      	adds	r1, r2, #0
   2ba48:	1c02      	adds	r2, r0, #0
   2ba4a:	430a      	orrs	r2, r1
   2ba4c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   2ba4e:	4b03      	ldr	r3, [pc, #12]	; (2ba5c <system_clock_source_osc8m_set_config+0x74>)
   2ba50:	68fa      	ldr	r2, [r7, #12]
   2ba52:	621a      	str	r2, [r3, #32]
}
   2ba54:	46c0      	nop			; (mov r8, r8)
   2ba56:	46bd      	mov	sp, r7
   2ba58:	b004      	add	sp, #16
   2ba5a:	bd80      	pop	{r7, pc}
   2ba5c:	40000800 	.word	0x40000800

0002ba60 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   2ba60:	b580      	push	{r7, lr}
   2ba62:	b086      	sub	sp, #24
   2ba64:	af00      	add	r7, sp, #0
   2ba66:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   2ba68:	687b      	ldr	r3, [r7, #4]
   2ba6a:	68db      	ldr	r3, [r3, #12]
   2ba6c:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   2ba6e:	687b      	ldr	r3, [r7, #4]
   2ba70:	7d1b      	ldrb	r3, [r3, #20]
   2ba72:	2b01      	cmp	r3, #1
   2ba74:	d10a      	bne.n	2ba8c <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   2ba76:	687b      	ldr	r3, [r7, #4]
   2ba78:	8a1b      	ldrh	r3, [r3, #16]
   2ba7a:	3301      	adds	r3, #1
   2ba7c:	005b      	lsls	r3, r3, #1
   2ba7e:	001a      	movs	r2, r3
   2ba80:	4b36      	ldr	r3, [pc, #216]	; (2bb5c <system_clock_source_dpll_set_config+0xfc>)
   2ba82:	0011      	movs	r1, r2
   2ba84:	6978      	ldr	r0, [r7, #20]
   2ba86:	4798      	blx	r3
   2ba88:	0003      	movs	r3, r0
   2ba8a:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   2ba8c:	687b      	ldr	r3, [r7, #4]
   2ba8e:	689b      	ldr	r3, [r3, #8]
   2ba90:	011a      	lsls	r2, r3, #4
   2ba92:	4b32      	ldr	r3, [pc, #200]	; (2bb5c <system_clock_source_dpll_set_config+0xfc>)
   2ba94:	6979      	ldr	r1, [r7, #20]
   2ba96:	0010      	movs	r0, r2
   2ba98:	4798      	blx	r3
   2ba9a:	0003      	movs	r3, r0
   2ba9c:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   2ba9e:	693b      	ldr	r3, [r7, #16]
   2baa0:	b2da      	uxtb	r2, r3
   2baa2:	230f      	movs	r3, #15
   2baa4:	18fb      	adds	r3, r7, r3
   2baa6:	210f      	movs	r1, #15
   2baa8:	400a      	ands	r2, r1
   2baaa:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   2baac:	693b      	ldr	r3, [r7, #16]
   2baae:	091b      	lsrs	r3, r3, #4
   2bab0:	3b01      	subs	r3, #1
   2bab2:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   2bab4:	492a      	ldr	r1, [pc, #168]	; (2bb60 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2bab6:	687b      	ldr	r3, [r7, #4]
   2bab8:	781b      	ldrb	r3, [r3, #0]
   2baba:	01db      	lsls	r3, r3, #7
   2babc:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   2babe:	687b      	ldr	r3, [r7, #4]
   2bac0:	785b      	ldrb	r3, [r3, #1]
   2bac2:	019b      	lsls	r3, r3, #6
   2bac4:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2bac6:	4313      	orrs	r3, r2
   2bac8:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   2baca:	2344      	movs	r3, #68	; 0x44
   2bacc:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   2bace:	4b24      	ldr	r3, [pc, #144]	; (2bb60 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2bad0:	220f      	movs	r2, #15
   2bad2:	18ba      	adds	r2, r7, r2
   2bad4:	7812      	ldrb	r2, [r2, #0]
   2bad6:	0412      	lsls	r2, r2, #16
   2bad8:	0011      	movs	r1, r2
   2bada:	22f0      	movs	r2, #240	; 0xf0
   2badc:	0312      	lsls	r2, r2, #12
   2bade:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   2bae0:	693a      	ldr	r2, [r7, #16]
   2bae2:	0512      	lsls	r2, r2, #20
   2bae4:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2bae6:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   2bae8:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   2baea:	4b1d      	ldr	r3, [pc, #116]	; (2bb60 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2baec:	687a      	ldr	r2, [r7, #4]
   2baee:	8a12      	ldrh	r2, [r2, #16]
   2baf0:	0412      	lsls	r2, r2, #16
   2baf2:	0011      	movs	r1, r2
   2baf4:	4a1b      	ldr	r2, [pc, #108]	; (2bb64 <system_clock_source_dpll_set_config+0x104>)
   2baf6:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2baf8:	687a      	ldr	r2, [r7, #4]
   2bafa:	7892      	ldrb	r2, [r2, #2]
   2bafc:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2bafe:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2bb00:	687a      	ldr	r2, [r7, #4]
   2bb02:	7cd2      	ldrb	r2, [r2, #19]
   2bb04:	0212      	lsls	r2, r2, #8
   2bb06:	0010      	movs	r0, r2
   2bb08:	22e0      	movs	r2, #224	; 0xe0
   2bb0a:	00d2      	lsls	r2, r2, #3
   2bb0c:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2bb0e:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2bb10:	687a      	ldr	r2, [r7, #4]
   2bb12:	7d12      	ldrb	r2, [r2, #20]
   2bb14:	0112      	lsls	r2, r2, #4
   2bb16:	0010      	movs	r0, r2
   2bb18:	2230      	movs	r2, #48	; 0x30
   2bb1a:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2bb1c:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2bb1e:	687a      	ldr	r2, [r7, #4]
   2bb20:	78d2      	ldrb	r2, [r2, #3]
   2bb22:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2bb24:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2bb26:	687a      	ldr	r2, [r7, #4]
   2bb28:	7912      	ldrb	r2, [r2, #4]
   2bb2a:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2bb2c:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   2bb2e:	687a      	ldr	r2, [r7, #4]
   2bb30:	7c92      	ldrb	r2, [r2, #18]
   2bb32:	0010      	movs	r0, r2
   2bb34:	2203      	movs	r2, #3
   2bb36:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2bb38:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   2bb3a:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   2bb3c:	693b      	ldr	r3, [r7, #16]
   2bb3e:	3301      	adds	r3, #1
   2bb40:	011a      	lsls	r2, r3, #4
   2bb42:	230f      	movs	r3, #15
   2bb44:	18fb      	adds	r3, r7, r3
   2bb46:	781b      	ldrb	r3, [r3, #0]
   2bb48:	18d3      	adds	r3, r2, r3
   2bb4a:	697a      	ldr	r2, [r7, #20]
   2bb4c:	4353      	muls	r3, r2
   2bb4e:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   2bb50:	4b05      	ldr	r3, [pc, #20]	; (2bb68 <system_clock_source_dpll_set_config+0x108>)
   2bb52:	60da      	str	r2, [r3, #12]
}
   2bb54:	46c0      	nop			; (mov r8, r8)
   2bb56:	46bd      	mov	sp, r7
   2bb58:	b006      	add	sp, #24
   2bb5a:	bd80      	pop	{r7, pc}
   2bb5c:	00034e15 	.word	0x00034e15
   2bb60:	40000800 	.word	0x40000800
   2bb64:	07ff0000 	.word	0x07ff0000
   2bb68:	20004150 	.word	0x20004150

0002bb6c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   2bb6c:	b580      	push	{r7, lr}
   2bb6e:	b082      	sub	sp, #8
   2bb70:	af00      	add	r7, sp, #0
   2bb72:	0002      	movs	r2, r0
   2bb74:	1dfb      	adds	r3, r7, #7
   2bb76:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2bb78:	1dfb      	adds	r3, r7, #7
   2bb7a:	781b      	ldrb	r3, [r3, #0]
   2bb7c:	2b08      	cmp	r3, #8
   2bb7e:	d83b      	bhi.n	2bbf8 <system_clock_source_enable+0x8c>
   2bb80:	009a      	lsls	r2, r3, #2
   2bb82:	4b21      	ldr	r3, [pc, #132]	; (2bc08 <system_clock_source_enable+0x9c>)
   2bb84:	18d3      	adds	r3, r2, r3
   2bb86:	681b      	ldr	r3, [r3, #0]
   2bb88:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   2bb8a:	4b20      	ldr	r3, [pc, #128]	; (2bc0c <system_clock_source_enable+0xa0>)
   2bb8c:	4a1f      	ldr	r2, [pc, #124]	; (2bc0c <system_clock_source_enable+0xa0>)
   2bb8e:	6a12      	ldr	r2, [r2, #32]
   2bb90:	2102      	movs	r1, #2
   2bb92:	430a      	orrs	r2, r1
   2bb94:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   2bb96:	2300      	movs	r3, #0
   2bb98:	e031      	b.n	2bbfe <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   2bb9a:	4b1c      	ldr	r3, [pc, #112]	; (2bc0c <system_clock_source_enable+0xa0>)
   2bb9c:	4a1b      	ldr	r2, [pc, #108]	; (2bc0c <system_clock_source_enable+0xa0>)
   2bb9e:	6992      	ldr	r2, [r2, #24]
   2bba0:	2102      	movs	r1, #2
   2bba2:	430a      	orrs	r2, r1
   2bba4:	619a      	str	r2, [r3, #24]
		break;
   2bba6:	e029      	b.n	2bbfc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   2bba8:	4a18      	ldr	r2, [pc, #96]	; (2bc0c <system_clock_source_enable+0xa0>)
   2bbaa:	4b18      	ldr	r3, [pc, #96]	; (2bc0c <system_clock_source_enable+0xa0>)
   2bbac:	8a1b      	ldrh	r3, [r3, #16]
   2bbae:	b29b      	uxth	r3, r3
   2bbb0:	2102      	movs	r1, #2
   2bbb2:	430b      	orrs	r3, r1
   2bbb4:	b29b      	uxth	r3, r3
   2bbb6:	8213      	strh	r3, [r2, #16]
		break;
   2bbb8:	e020      	b.n	2bbfc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   2bbba:	4a14      	ldr	r2, [pc, #80]	; (2bc0c <system_clock_source_enable+0xa0>)
   2bbbc:	4b13      	ldr	r3, [pc, #76]	; (2bc0c <system_clock_source_enable+0xa0>)
   2bbbe:	8a9b      	ldrh	r3, [r3, #20]
   2bbc0:	b29b      	uxth	r3, r3
   2bbc2:	2102      	movs	r1, #2
   2bbc4:	430b      	orrs	r3, r1
   2bbc6:	b29b      	uxth	r3, r3
   2bbc8:	8293      	strh	r3, [r2, #20]
		break;
   2bbca:	e017      	b.n	2bbfc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   2bbcc:	4b10      	ldr	r3, [pc, #64]	; (2bc10 <system_clock_source_enable+0xa4>)
   2bbce:	681b      	ldr	r3, [r3, #0]
   2bbd0:	2202      	movs	r2, #2
   2bbd2:	431a      	orrs	r2, r3
   2bbd4:	4b0e      	ldr	r3, [pc, #56]	; (2bc10 <system_clock_source_enable+0xa4>)
   2bbd6:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   2bbd8:	4b0e      	ldr	r3, [pc, #56]	; (2bc14 <system_clock_source_enable+0xa8>)
   2bbda:	4798      	blx	r3
		break;
   2bbdc:	e00e      	b.n	2bbfc <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   2bbde:	4a0b      	ldr	r2, [pc, #44]	; (2bc0c <system_clock_source_enable+0xa0>)
   2bbe0:	490a      	ldr	r1, [pc, #40]	; (2bc0c <system_clock_source_enable+0xa0>)
   2bbe2:	2344      	movs	r3, #68	; 0x44
   2bbe4:	5ccb      	ldrb	r3, [r1, r3]
   2bbe6:	b2db      	uxtb	r3, r3
   2bbe8:	2102      	movs	r1, #2
   2bbea:	430b      	orrs	r3, r1
   2bbec:	b2d9      	uxtb	r1, r3
   2bbee:	2344      	movs	r3, #68	; 0x44
   2bbf0:	54d1      	strb	r1, [r2, r3]
		break;
   2bbf2:	e003      	b.n	2bbfc <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   2bbf4:	2300      	movs	r3, #0
   2bbf6:	e002      	b.n	2bbfe <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2bbf8:	2317      	movs	r3, #23
   2bbfa:	e000      	b.n	2bbfe <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   2bbfc:	2300      	movs	r3, #0
}
   2bbfe:	0018      	movs	r0, r3
   2bc00:	46bd      	mov	sp, r7
   2bc02:	b002      	add	sp, #8
   2bc04:	bd80      	pop	{r7, pc}
   2bc06:	46c0      	nop			; (mov r8, r8)
   2bc08:	0003c7e0 	.word	0x0003c7e0
   2bc0c:	40000800 	.word	0x40000800
   2bc10:	20004150 	.word	0x20004150
   2bc14:	0002b8e5 	.word	0x0002b8e5

0002bc18 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   2bc18:	b580      	push	{r7, lr}
   2bc1a:	b084      	sub	sp, #16
   2bc1c:	af00      	add	r7, sp, #0
   2bc1e:	0002      	movs	r2, r0
   2bc20:	1dfb      	adds	r3, r7, #7
   2bc22:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   2bc24:	2300      	movs	r3, #0
   2bc26:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   2bc28:	1dfb      	adds	r3, r7, #7
   2bc2a:	781b      	ldrb	r3, [r3, #0]
   2bc2c:	2b08      	cmp	r3, #8
   2bc2e:	d821      	bhi.n	2bc74 <system_clock_source_is_ready+0x5c>
   2bc30:	009a      	lsls	r2, r3, #2
   2bc32:	4b18      	ldr	r3, [pc, #96]	; (2bc94 <system_clock_source_is_ready+0x7c>)
   2bc34:	18d3      	adds	r3, r2, r3
   2bc36:	681b      	ldr	r3, [r3, #0]
   2bc38:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   2bc3a:	2308      	movs	r3, #8
   2bc3c:	60fb      	str	r3, [r7, #12]
		break;
   2bc3e:	e01b      	b.n	2bc78 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   2bc40:	2304      	movs	r3, #4
   2bc42:	60fb      	str	r3, [r7, #12]
		break;
   2bc44:	e018      	b.n	2bc78 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   2bc46:	2301      	movs	r3, #1
   2bc48:	60fb      	str	r3, [r7, #12]
		break;
   2bc4a:	e015      	b.n	2bc78 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   2bc4c:	2302      	movs	r3, #2
   2bc4e:	60fb      	str	r3, [r7, #12]
		break;
   2bc50:	e012      	b.n	2bc78 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   2bc52:	2310      	movs	r3, #16
   2bc54:	60fb      	str	r3, [r7, #12]
		}
		break;
   2bc56:	e00f      	b.n	2bc78 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   2bc58:	4a0f      	ldr	r2, [pc, #60]	; (2bc98 <system_clock_source_is_ready+0x80>)
   2bc5a:	2350      	movs	r3, #80	; 0x50
   2bc5c:	5cd3      	ldrb	r3, [r2, r3]
   2bc5e:	b2db      	uxtb	r3, r3
   2bc60:	001a      	movs	r2, r3
   2bc62:	2303      	movs	r3, #3
   2bc64:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   2bc66:	3b03      	subs	r3, #3
   2bc68:	425a      	negs	r2, r3
   2bc6a:	4153      	adcs	r3, r2
   2bc6c:	b2db      	uxtb	r3, r3
   2bc6e:	e00c      	b.n	2bc8a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   2bc70:	2301      	movs	r3, #1
   2bc72:	e00a      	b.n	2bc8a <system_clock_source_is_ready+0x72>

	default:
		return false;
   2bc74:	2300      	movs	r3, #0
   2bc76:	e008      	b.n	2bc8a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   2bc78:	4b07      	ldr	r3, [pc, #28]	; (2bc98 <system_clock_source_is_ready+0x80>)
   2bc7a:	68db      	ldr	r3, [r3, #12]
   2bc7c:	68fa      	ldr	r2, [r7, #12]
   2bc7e:	401a      	ands	r2, r3
   2bc80:	68fb      	ldr	r3, [r7, #12]
   2bc82:	1ad3      	subs	r3, r2, r3
   2bc84:	425a      	negs	r2, r3
   2bc86:	4153      	adcs	r3, r2
   2bc88:	b2db      	uxtb	r3, r3
}
   2bc8a:	0018      	movs	r0, r3
   2bc8c:	46bd      	mov	sp, r7
   2bc8e:	b004      	add	sp, #16
   2bc90:	bd80      	pop	{r7, pc}
   2bc92:	46c0      	nop			; (mov r8, r8)
   2bc94:	0003c804 	.word	0x0003c804
   2bc98:	40000800 	.word	0x40000800

0002bc9c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   2bc9c:	b580      	push	{r7, lr}
   2bc9e:	b082      	sub	sp, #8
   2bca0:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   2bca2:	003b      	movs	r3, r7
   2bca4:	2203      	movs	r2, #3
   2bca6:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2bca8:	2300      	movs	r3, #0
   2bcaa:	607b      	str	r3, [r7, #4]
   2bcac:	e009      	b.n	2bcc2 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   2bcae:	687b      	ldr	r3, [r7, #4]
   2bcb0:	b2db      	uxtb	r3, r3
   2bcb2:	003a      	movs	r2, r7
   2bcb4:	0011      	movs	r1, r2
   2bcb6:	0018      	movs	r0, r3
   2bcb8:	4b05      	ldr	r3, [pc, #20]	; (2bcd0 <_switch_peripheral_gclk+0x34>)
   2bcba:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2bcbc:	687b      	ldr	r3, [r7, #4]
   2bcbe:	3301      	adds	r3, #1
   2bcc0:	607b      	str	r3, [r7, #4]
   2bcc2:	687b      	ldr	r3, [r7, #4]
   2bcc4:	2b24      	cmp	r3, #36	; 0x24
   2bcc6:	d9f2      	bls.n	2bcae <_switch_peripheral_gclk+0x12>
	}
}
   2bcc8:	46c0      	nop			; (mov r8, r8)
   2bcca:	46bd      	mov	sp, r7
   2bccc:	b002      	add	sp, #8
   2bcce:	bd80      	pop	{r7, pc}
   2bcd0:	0002c2a1 	.word	0x0002c2a1

0002bcd4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   2bcd4:	b580      	push	{r7, lr}
   2bcd6:	b0a6      	sub	sp, #152	; 0x98
   2bcd8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   2bcda:	4b92      	ldr	r3, [pc, #584]	; (2bf24 <system_clock_init+0x250>)
   2bcdc:	22c2      	movs	r2, #194	; 0xc2
   2bcde:	00d2      	lsls	r2, r2, #3
   2bce0:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   2bce2:	2003      	movs	r0, #3
   2bce4:	4b90      	ldr	r3, [pc, #576]	; (2bf28 <system_clock_init+0x254>)
   2bce6:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   2bce8:	4b90      	ldr	r3, [pc, #576]	; (2bf2c <system_clock_init+0x258>)
   2bcea:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   2bcec:	2394      	movs	r3, #148	; 0x94
   2bcee:	18fb      	adds	r3, r7, r3
   2bcf0:	0018      	movs	r0, r3
   2bcf2:	4b8f      	ldr	r3, [pc, #572]	; (2bf30 <system_clock_init+0x25c>)
   2bcf4:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   2bcf6:	2394      	movs	r3, #148	; 0x94
   2bcf8:	18fb      	adds	r3, r7, r3
   2bcfa:	2200      	movs	r2, #0
   2bcfc:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   2bcfe:	2394      	movs	r3, #148	; 0x94
   2bd00:	18fb      	adds	r3, r7, r3
   2bd02:	2201      	movs	r2, #1
   2bd04:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   2bd06:	2394      	movs	r3, #148	; 0x94
   2bd08:	18fb      	adds	r3, r7, r3
   2bd0a:	2200      	movs	r2, #0
   2bd0c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   2bd0e:	2394      	movs	r3, #148	; 0x94
   2bd10:	18fb      	adds	r3, r7, r3
   2bd12:	0018      	movs	r0, r3
   2bd14:	4b87      	ldr	r3, [pc, #540]	; (2bf34 <system_clock_init+0x260>)
   2bd16:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   2bd18:	2006      	movs	r0, #6
   2bd1a:	4b87      	ldr	r3, [pc, #540]	; (2bf38 <system_clock_init+0x264>)
   2bd1c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   2bd1e:	4b87      	ldr	r3, [pc, #540]	; (2bf3c <system_clock_init+0x268>)
   2bd20:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   2bd22:	2360      	movs	r3, #96	; 0x60
   2bd24:	18fb      	adds	r3, r7, r3
   2bd26:	0018      	movs	r0, r3
   2bd28:	4b85      	ldr	r3, [pc, #532]	; (2bf40 <system_clock_init+0x26c>)
   2bd2a:	4798      	blx	r3
   2bd2c:	2360      	movs	r3, #96	; 0x60
   2bd2e:	18fb      	adds	r3, r7, r3
   2bd30:	2206      	movs	r2, #6
   2bd32:	701a      	strb	r2, [r3, #0]
   2bd34:	2360      	movs	r3, #96	; 0x60
   2bd36:	18fb      	adds	r3, r7, r3
   2bd38:	2208      	movs	r2, #8
   2bd3a:	605a      	str	r2, [r3, #4]
   2bd3c:	2360      	movs	r3, #96	; 0x60
   2bd3e:	18fb      	adds	r3, r7, r3
   2bd40:	2200      	movs	r2, #0
   2bd42:	721a      	strb	r2, [r3, #8]
   2bd44:	2360      	movs	r3, #96	; 0x60
   2bd46:	18fb      	adds	r3, r7, r3
   2bd48:	2200      	movs	r2, #0
   2bd4a:	725a      	strb	r2, [r3, #9]
   2bd4c:	2360      	movs	r3, #96	; 0x60
   2bd4e:	18fb      	adds	r3, r7, r3
   2bd50:	0019      	movs	r1, r3
   2bd52:	2001      	movs	r0, #1
   2bd54:	4b7b      	ldr	r3, [pc, #492]	; (2bf44 <system_clock_init+0x270>)
   2bd56:	4798      	blx	r3
   2bd58:	2001      	movs	r0, #1
   2bd5a:	4b7b      	ldr	r3, [pc, #492]	; (2bf48 <system_clock_init+0x274>)
   2bd5c:	4798      	blx	r3
   2bd5e:	2354      	movs	r3, #84	; 0x54
   2bd60:	18fb      	adds	r3, r7, r3
   2bd62:	0018      	movs	r0, r3
   2bd64:	4b76      	ldr	r3, [pc, #472]	; (2bf40 <system_clock_init+0x26c>)
   2bd66:	4798      	blx	r3
   2bd68:	2354      	movs	r3, #84	; 0x54
   2bd6a:	18fb      	adds	r3, r7, r3
   2bd6c:	2203      	movs	r2, #3
   2bd6e:	701a      	strb	r2, [r3, #0]
   2bd70:	2354      	movs	r3, #84	; 0x54
   2bd72:	18fb      	adds	r3, r7, r3
   2bd74:	2201      	movs	r2, #1
   2bd76:	605a      	str	r2, [r3, #4]
   2bd78:	2354      	movs	r3, #84	; 0x54
   2bd7a:	18fb      	adds	r3, r7, r3
   2bd7c:	2201      	movs	r2, #1
   2bd7e:	721a      	strb	r2, [r3, #8]
   2bd80:	2354      	movs	r3, #84	; 0x54
   2bd82:	18fb      	adds	r3, r7, r3
   2bd84:	2200      	movs	r2, #0
   2bd86:	725a      	strb	r2, [r3, #9]
   2bd88:	2354      	movs	r3, #84	; 0x54
   2bd8a:	18fb      	adds	r3, r7, r3
   2bd8c:	0019      	movs	r1, r3
   2bd8e:	2002      	movs	r0, #2
   2bd90:	4b6c      	ldr	r3, [pc, #432]	; (2bf44 <system_clock_init+0x270>)
   2bd92:	4798      	blx	r3
   2bd94:	2002      	movs	r0, #2
   2bd96:	4b6c      	ldr	r3, [pc, #432]	; (2bf48 <system_clock_init+0x274>)
   2bd98:	4798      	blx	r3
   2bd9a:	233c      	movs	r3, #60	; 0x3c
   2bd9c:	18fb      	adds	r3, r7, r3
   2bd9e:	0018      	movs	r0, r3
   2bda0:	4b67      	ldr	r3, [pc, #412]	; (2bf40 <system_clock_init+0x26c>)
   2bda2:	4798      	blx	r3
   2bda4:	233c      	movs	r3, #60	; 0x3c
   2bda6:	18fb      	adds	r3, r7, r3
   2bda8:	2203      	movs	r2, #3
   2bdaa:	701a      	strb	r2, [r3, #0]
   2bdac:	233c      	movs	r3, #60	; 0x3c
   2bdae:	18fb      	adds	r3, r7, r3
   2bdb0:	2220      	movs	r2, #32
   2bdb2:	605a      	str	r2, [r3, #4]
   2bdb4:	233c      	movs	r3, #60	; 0x3c
   2bdb6:	18fb      	adds	r3, r7, r3
   2bdb8:	2200      	movs	r2, #0
   2bdba:	721a      	strb	r2, [r3, #8]
   2bdbc:	233c      	movs	r3, #60	; 0x3c
   2bdbe:	18fb      	adds	r3, r7, r3
   2bdc0:	2200      	movs	r2, #0
   2bdc2:	725a      	strb	r2, [r3, #9]
   2bdc4:	233c      	movs	r3, #60	; 0x3c
   2bdc6:	18fb      	adds	r3, r7, r3
   2bdc8:	0019      	movs	r1, r3
   2bdca:	2004      	movs	r0, #4
   2bdcc:	4b5d      	ldr	r3, [pc, #372]	; (2bf44 <system_clock_init+0x270>)
   2bdce:	4798      	blx	r3
   2bdd0:	2004      	movs	r0, #4
   2bdd2:	4b5d      	ldr	r3, [pc, #372]	; (2bf48 <system_clock_init+0x274>)
   2bdd4:	4798      	blx	r3
   2bdd6:	2330      	movs	r3, #48	; 0x30
   2bdd8:	18fb      	adds	r3, r7, r3
   2bdda:	0018      	movs	r0, r3
   2bddc:	4b58      	ldr	r3, [pc, #352]	; (2bf40 <system_clock_init+0x26c>)
   2bdde:	4798      	blx	r3
   2bde0:	2330      	movs	r3, #48	; 0x30
   2bde2:	18fb      	adds	r3, r7, r3
   2bde4:	2206      	movs	r2, #6
   2bde6:	701a      	strb	r2, [r3, #0]
   2bde8:	2330      	movs	r3, #48	; 0x30
   2bdea:	18fb      	adds	r3, r7, r3
   2bdec:	2201      	movs	r2, #1
   2bdee:	605a      	str	r2, [r3, #4]
   2bdf0:	2330      	movs	r3, #48	; 0x30
   2bdf2:	18fb      	adds	r3, r7, r3
   2bdf4:	2200      	movs	r2, #0
   2bdf6:	721a      	strb	r2, [r3, #8]
   2bdf8:	2330      	movs	r3, #48	; 0x30
   2bdfa:	18fb      	adds	r3, r7, r3
   2bdfc:	2200      	movs	r2, #0
   2bdfe:	725a      	strb	r2, [r3, #9]
   2be00:	2330      	movs	r3, #48	; 0x30
   2be02:	18fb      	adds	r3, r7, r3
   2be04:	0019      	movs	r1, r3
   2be06:	2005      	movs	r0, #5
   2be08:	4b4e      	ldr	r3, [pc, #312]	; (2bf44 <system_clock_init+0x270>)
   2be0a:	4798      	blx	r3
   2be0c:	2005      	movs	r0, #5
   2be0e:	4b4e      	ldr	r3, [pc, #312]	; (2bf48 <system_clock_init+0x274>)
   2be10:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   2be12:	2390      	movs	r3, #144	; 0x90
   2be14:	18fb      	adds	r3, r7, r3
   2be16:	0018      	movs	r0, r3
   2be18:	4b4c      	ldr	r3, [pc, #304]	; (2bf4c <system_clock_init+0x278>)
   2be1a:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   2be1c:	2390      	movs	r3, #144	; 0x90
   2be1e:	18fb      	adds	r3, r7, r3
   2be20:	2201      	movs	r2, #1
   2be22:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   2be24:	2390      	movs	r3, #144	; 0x90
   2be26:	18fb      	adds	r3, r7, r3
   2be28:	0019      	movs	r1, r3
   2be2a:	2001      	movs	r0, #1
   2be2c:	4b48      	ldr	r3, [pc, #288]	; (2bf50 <system_clock_init+0x27c>)
   2be2e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   2be30:	2001      	movs	r0, #1
   2be32:	4b48      	ldr	r3, [pc, #288]	; (2bf54 <system_clock_init+0x280>)
   2be34:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   2be36:	2378      	movs	r3, #120	; 0x78
   2be38:	18fb      	adds	r3, r7, r3
   2be3a:	0018      	movs	r0, r3
   2be3c:	4b46      	ldr	r3, [pc, #280]	; (2bf58 <system_clock_init+0x284>)
   2be3e:	4798      	blx	r3

	dpll_config.on_demand        = false;
   2be40:	2378      	movs	r3, #120	; 0x78
   2be42:	18fb      	adds	r3, r7, r3
   2be44:	2200      	movs	r2, #0
   2be46:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   2be48:	2378      	movs	r3, #120	; 0x78
   2be4a:	18fb      	adds	r3, r7, r3
   2be4c:	2200      	movs	r2, #0
   2be4e:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   2be50:	2378      	movs	r3, #120	; 0x78
   2be52:	18fb      	adds	r3, r7, r3
   2be54:	2200      	movs	r2, #0
   2be56:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   2be58:	2378      	movs	r3, #120	; 0x78
   2be5a:	18fb      	adds	r3, r7, r3
   2be5c:	2200      	movs	r2, #0
   2be5e:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   2be60:	2378      	movs	r3, #120	; 0x78
   2be62:	18fb      	adds	r3, r7, r3
   2be64:	2200      	movs	r2, #0
   2be66:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   2be68:	2378      	movs	r3, #120	; 0x78
   2be6a:	18fb      	adds	r3, r7, r3
   2be6c:	2200      	movs	r2, #0
   2be6e:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   2be70:	2378      	movs	r3, #120	; 0x78
   2be72:	18fb      	adds	r3, r7, r3
   2be74:	2200      	movs	r2, #0
   2be76:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   2be78:	2378      	movs	r3, #120	; 0x78
   2be7a:	18fb      	adds	r3, r7, r3
   2be7c:	2202      	movs	r2, #2
   2be7e:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   2be80:	2378      	movs	r3, #120	; 0x78
   2be82:	18fb      	adds	r3, r7, r3
   2be84:	4a35      	ldr	r2, [pc, #212]	; (2bf5c <system_clock_init+0x288>)
   2be86:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   2be88:	2378      	movs	r3, #120	; 0x78
   2be8a:	18fb      	adds	r3, r7, r3
   2be8c:	2201      	movs	r2, #1
   2be8e:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   2be90:	2378      	movs	r3, #120	; 0x78
   2be92:	18fb      	adds	r3, r7, r3
   2be94:	4a32      	ldr	r2, [pc, #200]	; (2bf60 <system_clock_init+0x28c>)
   2be96:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   2be98:	2378      	movs	r3, #120	; 0x78
   2be9a:	18fb      	adds	r3, r7, r3
   2be9c:	0018      	movs	r0, r3
   2be9e:	4b31      	ldr	r3, [pc, #196]	; (2bf64 <system_clock_init+0x290>)
   2bea0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   2bea2:	2008      	movs	r0, #8
   2bea4:	4b24      	ldr	r3, [pc, #144]	; (2bf38 <system_clock_init+0x264>)
   2bea6:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   2bea8:	46c0      	nop			; (mov r8, r8)
   2beaa:	2008      	movs	r0, #8
   2beac:	4b2e      	ldr	r3, [pc, #184]	; (2bf68 <system_clock_init+0x294>)
   2beae:	4798      	blx	r3
   2beb0:	0003      	movs	r3, r0
   2beb2:	001a      	movs	r2, r3
   2beb4:	2301      	movs	r3, #1
   2beb6:	4053      	eors	r3, r2
   2beb8:	b2db      	uxtb	r3, r3
   2beba:	2b00      	cmp	r3, #0
   2bebc:	d1f5      	bne.n	2beaa <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   2bebe:	4919      	ldr	r1, [pc, #100]	; (2bf24 <system_clock_init+0x250>)
   2bec0:	2244      	movs	r2, #68	; 0x44
   2bec2:	5c8b      	ldrb	r3, [r1, r2]
   2bec4:	2080      	movs	r0, #128	; 0x80
   2bec6:	4240      	negs	r0, r0
   2bec8:	4303      	orrs	r3, r0
   2beca:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   2becc:	2000      	movs	r0, #0
   2bece:	4b27      	ldr	r3, [pc, #156]	; (2bf6c <system_clock_init+0x298>)
   2bed0:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   2bed2:	2100      	movs	r1, #0
   2bed4:	2000      	movs	r0, #0
   2bed6:	4b26      	ldr	r3, [pc, #152]	; (2bf70 <system_clock_init+0x29c>)
   2bed8:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   2beda:	2100      	movs	r1, #0
   2bedc:	2001      	movs	r0, #1
   2bede:	4b24      	ldr	r3, [pc, #144]	; (2bf70 <system_clock_init+0x29c>)
   2bee0:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   2bee2:	2100      	movs	r1, #0
   2bee4:	2002      	movs	r0, #2
   2bee6:	4b22      	ldr	r3, [pc, #136]	; (2bf70 <system_clock_init+0x29c>)
   2bee8:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   2beea:	003b      	movs	r3, r7
   2beec:	0018      	movs	r0, r3
   2beee:	4b14      	ldr	r3, [pc, #80]	; (2bf40 <system_clock_init+0x26c>)
   2bef0:	4798      	blx	r3
   2bef2:	003b      	movs	r3, r7
   2bef4:	2208      	movs	r2, #8
   2bef6:	701a      	strb	r2, [r3, #0]
   2bef8:	003b      	movs	r3, r7
   2befa:	2201      	movs	r2, #1
   2befc:	605a      	str	r2, [r3, #4]
   2befe:	003b      	movs	r3, r7
   2bf00:	2200      	movs	r2, #0
   2bf02:	721a      	strb	r2, [r3, #8]
   2bf04:	003b      	movs	r3, r7
   2bf06:	2201      	movs	r2, #1
   2bf08:	725a      	strb	r2, [r3, #9]
   2bf0a:	003b      	movs	r3, r7
   2bf0c:	0019      	movs	r1, r3
   2bf0e:	2000      	movs	r0, #0
   2bf10:	4b0c      	ldr	r3, [pc, #48]	; (2bf44 <system_clock_init+0x270>)
   2bf12:	4798      	blx	r3
   2bf14:	2000      	movs	r0, #0
   2bf16:	4b0c      	ldr	r3, [pc, #48]	; (2bf48 <system_clock_init+0x274>)
   2bf18:	4798      	blx	r3
#endif
}
   2bf1a:	46c0      	nop			; (mov r8, r8)
   2bf1c:	46bd      	mov	sp, r7
   2bf1e:	b026      	add	sp, #152	; 0x98
   2bf20:	bd80      	pop	{r7, pc}
   2bf22:	46c0      	nop			; (mov r8, r8)
   2bf24:	40000800 	.word	0x40000800
   2bf28:	0002b895 	.word	0x0002b895
   2bf2c:	0002bc9d 	.word	0x0002bc9d
   2bf30:	0002b7a5 	.word	0x0002b7a5
   2bf34:	0002b9e9 	.word	0x0002b9e9
   2bf38:	0002bb6d 	.word	0x0002bb6d
   2bf3c:	0002c019 	.word	0x0002c019
   2bf40:	0002b761 	.word	0x0002b761
   2bf44:	0002c049 	.word	0x0002c049
   2bf48:	0002c16d 	.word	0x0002c16d
   2bf4c:	0002b78f 	.word	0x0002b78f
   2bf50:	0002c2a1 	.word	0x0002c2a1
   2bf54:	0002c2e5 	.word	0x0002c2e5
   2bf58:	0002b83d 	.word	0x0002b83d
   2bf5c:	000f4240 	.word	0x000f4240
   2bf60:	02dc6c00 	.word	0x02dc6c00
   2bf64:	0002ba61 	.word	0x0002ba61
   2bf68:	0002bc19 	.word	0x0002bc19
   2bf6c:	0002b7c9 	.word	0x0002b7c9
   2bf70:	0002b7e9 	.word	0x0002b7e9

0002bf74 <system_apb_clock_set_mask>:
{
   2bf74:	b580      	push	{r7, lr}
   2bf76:	b082      	sub	sp, #8
   2bf78:	af00      	add	r7, sp, #0
   2bf7a:	0002      	movs	r2, r0
   2bf7c:	6039      	str	r1, [r7, #0]
   2bf7e:	1dfb      	adds	r3, r7, #7
   2bf80:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2bf82:	1dfb      	adds	r3, r7, #7
   2bf84:	781b      	ldrb	r3, [r3, #0]
   2bf86:	2b01      	cmp	r3, #1
   2bf88:	d00a      	beq.n	2bfa0 <system_apb_clock_set_mask+0x2c>
   2bf8a:	2b02      	cmp	r3, #2
   2bf8c:	d00f      	beq.n	2bfae <system_apb_clock_set_mask+0x3a>
   2bf8e:	2b00      	cmp	r3, #0
   2bf90:	d114      	bne.n	2bfbc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2bf92:	4b0e      	ldr	r3, [pc, #56]	; (2bfcc <system_apb_clock_set_mask+0x58>)
   2bf94:	4a0d      	ldr	r2, [pc, #52]	; (2bfcc <system_apb_clock_set_mask+0x58>)
   2bf96:	6991      	ldr	r1, [r2, #24]
   2bf98:	683a      	ldr	r2, [r7, #0]
   2bf9a:	430a      	orrs	r2, r1
   2bf9c:	619a      	str	r2, [r3, #24]
			break;
   2bf9e:	e00f      	b.n	2bfc0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2bfa0:	4b0a      	ldr	r3, [pc, #40]	; (2bfcc <system_apb_clock_set_mask+0x58>)
   2bfa2:	4a0a      	ldr	r2, [pc, #40]	; (2bfcc <system_apb_clock_set_mask+0x58>)
   2bfa4:	69d1      	ldr	r1, [r2, #28]
   2bfa6:	683a      	ldr	r2, [r7, #0]
   2bfa8:	430a      	orrs	r2, r1
   2bfaa:	61da      	str	r2, [r3, #28]
			break;
   2bfac:	e008      	b.n	2bfc0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2bfae:	4b07      	ldr	r3, [pc, #28]	; (2bfcc <system_apb_clock_set_mask+0x58>)
   2bfb0:	4a06      	ldr	r2, [pc, #24]	; (2bfcc <system_apb_clock_set_mask+0x58>)
   2bfb2:	6a11      	ldr	r1, [r2, #32]
   2bfb4:	683a      	ldr	r2, [r7, #0]
   2bfb6:	430a      	orrs	r2, r1
   2bfb8:	621a      	str	r2, [r3, #32]
			break;
   2bfba:	e001      	b.n	2bfc0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2bfbc:	2317      	movs	r3, #23
   2bfbe:	e000      	b.n	2bfc2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2bfc0:	2300      	movs	r3, #0
}
   2bfc2:	0018      	movs	r0, r3
   2bfc4:	46bd      	mov	sp, r7
   2bfc6:	b002      	add	sp, #8
   2bfc8:	bd80      	pop	{r7, pc}
   2bfca:	46c0      	nop			; (mov r8, r8)
   2bfcc:	40000400 	.word	0x40000400

0002bfd0 <system_interrupt_enter_critical_section>:
{
   2bfd0:	b580      	push	{r7, lr}
   2bfd2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2bfd4:	4b02      	ldr	r3, [pc, #8]	; (2bfe0 <system_interrupt_enter_critical_section+0x10>)
   2bfd6:	4798      	blx	r3
}
   2bfd8:	46c0      	nop			; (mov r8, r8)
   2bfda:	46bd      	mov	sp, r7
   2bfdc:	bd80      	pop	{r7, pc}
   2bfde:	46c0      	nop			; (mov r8, r8)
   2bfe0:	000285b1 	.word	0x000285b1

0002bfe4 <system_interrupt_leave_critical_section>:
{
   2bfe4:	b580      	push	{r7, lr}
   2bfe6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2bfe8:	4b02      	ldr	r3, [pc, #8]	; (2bff4 <system_interrupt_leave_critical_section+0x10>)
   2bfea:	4798      	blx	r3
}
   2bfec:	46c0      	nop			; (mov r8, r8)
   2bfee:	46bd      	mov	sp, r7
   2bff0:	bd80      	pop	{r7, pc}
   2bff2:	46c0      	nop			; (mov r8, r8)
   2bff4:	00028605 	.word	0x00028605

0002bff8 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   2bff8:	b580      	push	{r7, lr}
   2bffa:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   2bffc:	4b05      	ldr	r3, [pc, #20]	; (2c014 <system_gclk_is_syncing+0x1c>)
   2bffe:	785b      	ldrb	r3, [r3, #1]
   2c000:	b2db      	uxtb	r3, r3
   2c002:	b25b      	sxtb	r3, r3
   2c004:	2b00      	cmp	r3, #0
   2c006:	da01      	bge.n	2c00c <system_gclk_is_syncing+0x14>
		return true;
   2c008:	2301      	movs	r3, #1
   2c00a:	e000      	b.n	2c00e <system_gclk_is_syncing+0x16>
	}

	return false;
   2c00c:	2300      	movs	r3, #0
}
   2c00e:	0018      	movs	r0, r3
   2c010:	46bd      	mov	sp, r7
   2c012:	bd80      	pop	{r7, pc}
   2c014:	40000c00 	.word	0x40000c00

0002c018 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   2c018:	b580      	push	{r7, lr}
   2c01a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   2c01c:	2108      	movs	r1, #8
   2c01e:	2000      	movs	r0, #0
   2c020:	4b07      	ldr	r3, [pc, #28]	; (2c040 <system_gclk_init+0x28>)
   2c022:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   2c024:	4b07      	ldr	r3, [pc, #28]	; (2c044 <system_gclk_init+0x2c>)
   2c026:	2201      	movs	r2, #1
   2c028:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   2c02a:	46c0      	nop			; (mov r8, r8)
   2c02c:	4b05      	ldr	r3, [pc, #20]	; (2c044 <system_gclk_init+0x2c>)
   2c02e:	781b      	ldrb	r3, [r3, #0]
   2c030:	b2db      	uxtb	r3, r3
   2c032:	001a      	movs	r2, r3
   2c034:	2301      	movs	r3, #1
   2c036:	4013      	ands	r3, r2
   2c038:	d1f8      	bne.n	2c02c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   2c03a:	46c0      	nop			; (mov r8, r8)
   2c03c:	46bd      	mov	sp, r7
   2c03e:	bd80      	pop	{r7, pc}
   2c040:	0002bf75 	.word	0x0002bf75
   2c044:	40000c00 	.word	0x40000c00

0002c048 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   2c048:	b580      	push	{r7, lr}
   2c04a:	b086      	sub	sp, #24
   2c04c:	af00      	add	r7, sp, #0
   2c04e:	0002      	movs	r2, r0
   2c050:	6039      	str	r1, [r7, #0]
   2c052:	1dfb      	adds	r3, r7, #7
   2c054:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   2c056:	1dfb      	adds	r3, r7, #7
   2c058:	781b      	ldrb	r3, [r3, #0]
   2c05a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   2c05c:	1dfb      	adds	r3, r7, #7
   2c05e:	781b      	ldrb	r3, [r3, #0]
   2c060:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   2c062:	683b      	ldr	r3, [r7, #0]
   2c064:	781b      	ldrb	r3, [r3, #0]
   2c066:	021b      	lsls	r3, r3, #8
   2c068:	001a      	movs	r2, r3
   2c06a:	697b      	ldr	r3, [r7, #20]
   2c06c:	4313      	orrs	r3, r2
   2c06e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   2c070:	683b      	ldr	r3, [r7, #0]
   2c072:	785b      	ldrb	r3, [r3, #1]
   2c074:	2b00      	cmp	r3, #0
   2c076:	d004      	beq.n	2c082 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   2c078:	697b      	ldr	r3, [r7, #20]
   2c07a:	2280      	movs	r2, #128	; 0x80
   2c07c:	02d2      	lsls	r2, r2, #11
   2c07e:	4313      	orrs	r3, r2
   2c080:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2c082:	683b      	ldr	r3, [r7, #0]
   2c084:	7a5b      	ldrb	r3, [r3, #9]
   2c086:	2b00      	cmp	r3, #0
   2c088:	d004      	beq.n	2c094 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   2c08a:	697b      	ldr	r3, [r7, #20]
   2c08c:	2280      	movs	r2, #128	; 0x80
   2c08e:	0312      	lsls	r2, r2, #12
   2c090:	4313      	orrs	r3, r2
   2c092:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   2c094:	683b      	ldr	r3, [r7, #0]
   2c096:	685b      	ldr	r3, [r3, #4]
   2c098:	2b01      	cmp	r3, #1
   2c09a:	d92c      	bls.n	2c0f6 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   2c09c:	683b      	ldr	r3, [r7, #0]
   2c09e:	685a      	ldr	r2, [r3, #4]
   2c0a0:	683b      	ldr	r3, [r7, #0]
   2c0a2:	685b      	ldr	r3, [r3, #4]
   2c0a4:	3b01      	subs	r3, #1
   2c0a6:	4013      	ands	r3, r2
   2c0a8:	d11a      	bne.n	2c0e0 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   2c0aa:	2300      	movs	r3, #0
   2c0ac:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   2c0ae:	2302      	movs	r3, #2
   2c0b0:	60bb      	str	r3, [r7, #8]
   2c0b2:	e005      	b.n	2c0c0 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   2c0b4:	68fb      	ldr	r3, [r7, #12]
   2c0b6:	3301      	adds	r3, #1
   2c0b8:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   2c0ba:	68bb      	ldr	r3, [r7, #8]
   2c0bc:	005b      	lsls	r3, r3, #1
   2c0be:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   2c0c0:	683b      	ldr	r3, [r7, #0]
   2c0c2:	685a      	ldr	r2, [r3, #4]
   2c0c4:	68bb      	ldr	r3, [r7, #8]
   2c0c6:	429a      	cmp	r2, r3
   2c0c8:	d8f4      	bhi.n	2c0b4 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   2c0ca:	68fb      	ldr	r3, [r7, #12]
   2c0cc:	021b      	lsls	r3, r3, #8
   2c0ce:	693a      	ldr	r2, [r7, #16]
   2c0d0:	4313      	orrs	r3, r2
   2c0d2:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   2c0d4:	697b      	ldr	r3, [r7, #20]
   2c0d6:	2280      	movs	r2, #128	; 0x80
   2c0d8:	0352      	lsls	r2, r2, #13
   2c0da:	4313      	orrs	r3, r2
   2c0dc:	617b      	str	r3, [r7, #20]
   2c0de:	e00a      	b.n	2c0f6 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   2c0e0:	683b      	ldr	r3, [r7, #0]
   2c0e2:	685b      	ldr	r3, [r3, #4]
   2c0e4:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2c0e6:	693a      	ldr	r2, [r7, #16]
   2c0e8:	4313      	orrs	r3, r2
   2c0ea:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   2c0ec:	697b      	ldr	r3, [r7, #20]
   2c0ee:	2280      	movs	r2, #128	; 0x80
   2c0f0:	0292      	lsls	r2, r2, #10
   2c0f2:	4313      	orrs	r3, r2
   2c0f4:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2c0f6:	683b      	ldr	r3, [r7, #0]
   2c0f8:	7a1b      	ldrb	r3, [r3, #8]
   2c0fa:	2b00      	cmp	r3, #0
   2c0fc:	d004      	beq.n	2c108 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   2c0fe:	697b      	ldr	r3, [r7, #20]
   2c100:	2280      	movs	r2, #128	; 0x80
   2c102:	0392      	lsls	r2, r2, #14
   2c104:	4313      	orrs	r3, r2
   2c106:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2c108:	46c0      	nop			; (mov r8, r8)
   2c10a:	4b13      	ldr	r3, [pc, #76]	; (2c158 <system_gclk_gen_set_config+0x110>)
   2c10c:	4798      	blx	r3
   2c10e:	1e03      	subs	r3, r0, #0
   2c110:	d1fb      	bne.n	2c10a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2c112:	4b12      	ldr	r3, [pc, #72]	; (2c15c <system_gclk_gen_set_config+0x114>)
   2c114:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2c116:	4a12      	ldr	r2, [pc, #72]	; (2c160 <system_gclk_gen_set_config+0x118>)
   2c118:	1dfb      	adds	r3, r7, #7
   2c11a:	781b      	ldrb	r3, [r3, #0]
   2c11c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   2c11e:	46c0      	nop			; (mov r8, r8)
   2c120:	4b0d      	ldr	r3, [pc, #52]	; (2c158 <system_gclk_gen_set_config+0x110>)
   2c122:	4798      	blx	r3
   2c124:	1e03      	subs	r3, r0, #0
   2c126:	d1fb      	bne.n	2c120 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   2c128:	4b0e      	ldr	r3, [pc, #56]	; (2c164 <system_gclk_gen_set_config+0x11c>)
   2c12a:	693a      	ldr	r2, [r7, #16]
   2c12c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   2c12e:	46c0      	nop			; (mov r8, r8)
   2c130:	4b09      	ldr	r3, [pc, #36]	; (2c158 <system_gclk_gen_set_config+0x110>)
   2c132:	4798      	blx	r3
   2c134:	1e03      	subs	r3, r0, #0
   2c136:	d1fb      	bne.n	2c130 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   2c138:	4b0a      	ldr	r3, [pc, #40]	; (2c164 <system_gclk_gen_set_config+0x11c>)
   2c13a:	4a0a      	ldr	r2, [pc, #40]	; (2c164 <system_gclk_gen_set_config+0x11c>)
   2c13c:	6851      	ldr	r1, [r2, #4]
   2c13e:	2280      	movs	r2, #128	; 0x80
   2c140:	0252      	lsls	r2, r2, #9
   2c142:	4011      	ands	r1, r2
   2c144:	697a      	ldr	r2, [r7, #20]
   2c146:	430a      	orrs	r2, r1
   2c148:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2c14a:	4b07      	ldr	r3, [pc, #28]	; (2c168 <system_gclk_gen_set_config+0x120>)
   2c14c:	4798      	blx	r3
}
   2c14e:	46c0      	nop			; (mov r8, r8)
   2c150:	46bd      	mov	sp, r7
   2c152:	b006      	add	sp, #24
   2c154:	bd80      	pop	{r7, pc}
   2c156:	46c0      	nop			; (mov r8, r8)
   2c158:	0002bff9 	.word	0x0002bff9
   2c15c:	0002bfd1 	.word	0x0002bfd1
   2c160:	40000c08 	.word	0x40000c08
   2c164:	40000c00 	.word	0x40000c00
   2c168:	0002bfe5 	.word	0x0002bfe5

0002c16c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   2c16c:	b580      	push	{r7, lr}
   2c16e:	b082      	sub	sp, #8
   2c170:	af00      	add	r7, sp, #0
   2c172:	0002      	movs	r2, r0
   2c174:	1dfb      	adds	r3, r7, #7
   2c176:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2c178:	46c0      	nop			; (mov r8, r8)
   2c17a:	4b0e      	ldr	r3, [pc, #56]	; (2c1b4 <system_gclk_gen_enable+0x48>)
   2c17c:	4798      	blx	r3
   2c17e:	1e03      	subs	r3, r0, #0
   2c180:	d1fb      	bne.n	2c17a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2c182:	4b0d      	ldr	r3, [pc, #52]	; (2c1b8 <system_gclk_gen_enable+0x4c>)
   2c184:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2c186:	4a0d      	ldr	r2, [pc, #52]	; (2c1bc <system_gclk_gen_enable+0x50>)
   2c188:	1dfb      	adds	r3, r7, #7
   2c18a:	781b      	ldrb	r3, [r3, #0]
   2c18c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2c18e:	46c0      	nop			; (mov r8, r8)
   2c190:	4b08      	ldr	r3, [pc, #32]	; (2c1b4 <system_gclk_gen_enable+0x48>)
   2c192:	4798      	blx	r3
   2c194:	1e03      	subs	r3, r0, #0
   2c196:	d1fb      	bne.n	2c190 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   2c198:	4b09      	ldr	r3, [pc, #36]	; (2c1c0 <system_gclk_gen_enable+0x54>)
   2c19a:	4a09      	ldr	r2, [pc, #36]	; (2c1c0 <system_gclk_gen_enable+0x54>)
   2c19c:	6852      	ldr	r2, [r2, #4]
   2c19e:	2180      	movs	r1, #128	; 0x80
   2c1a0:	0249      	lsls	r1, r1, #9
   2c1a2:	430a      	orrs	r2, r1
   2c1a4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2c1a6:	4b07      	ldr	r3, [pc, #28]	; (2c1c4 <system_gclk_gen_enable+0x58>)
   2c1a8:	4798      	blx	r3
}
   2c1aa:	46c0      	nop			; (mov r8, r8)
   2c1ac:	46bd      	mov	sp, r7
   2c1ae:	b002      	add	sp, #8
   2c1b0:	bd80      	pop	{r7, pc}
   2c1b2:	46c0      	nop			; (mov r8, r8)
   2c1b4:	0002bff9 	.word	0x0002bff9
   2c1b8:	0002bfd1 	.word	0x0002bfd1
   2c1bc:	40000c04 	.word	0x40000c04
   2c1c0:	40000c00 	.word	0x40000c00
   2c1c4:	0002bfe5 	.word	0x0002bfe5

0002c1c8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2c1c8:	b580      	push	{r7, lr}
   2c1ca:	b086      	sub	sp, #24
   2c1cc:	af00      	add	r7, sp, #0
   2c1ce:	0002      	movs	r2, r0
   2c1d0:	1dfb      	adds	r3, r7, #7
   2c1d2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2c1d4:	46c0      	nop			; (mov r8, r8)
   2c1d6:	4b2a      	ldr	r3, [pc, #168]	; (2c280 <system_gclk_gen_get_hz+0xb8>)
   2c1d8:	4798      	blx	r3
   2c1da:	1e03      	subs	r3, r0, #0
   2c1dc:	d1fb      	bne.n	2c1d6 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2c1de:	4b29      	ldr	r3, [pc, #164]	; (2c284 <system_gclk_gen_get_hz+0xbc>)
   2c1e0:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2c1e2:	4a29      	ldr	r2, [pc, #164]	; (2c288 <system_gclk_gen_get_hz+0xc0>)
   2c1e4:	1dfb      	adds	r3, r7, #7
   2c1e6:	781b      	ldrb	r3, [r3, #0]
   2c1e8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2c1ea:	46c0      	nop			; (mov r8, r8)
   2c1ec:	4b24      	ldr	r3, [pc, #144]	; (2c280 <system_gclk_gen_get_hz+0xb8>)
   2c1ee:	4798      	blx	r3
   2c1f0:	1e03      	subs	r3, r0, #0
   2c1f2:	d1fb      	bne.n	2c1ec <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   2c1f4:	4b25      	ldr	r3, [pc, #148]	; (2c28c <system_gclk_gen_get_hz+0xc4>)
   2c1f6:	685b      	ldr	r3, [r3, #4]
   2c1f8:	04db      	lsls	r3, r3, #19
   2c1fa:	0edb      	lsrs	r3, r3, #27
   2c1fc:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   2c1fe:	0018      	movs	r0, r3
   2c200:	4b23      	ldr	r3, [pc, #140]	; (2c290 <system_gclk_gen_get_hz+0xc8>)
   2c202:	4798      	blx	r3
   2c204:	0003      	movs	r3, r0
   2c206:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2c208:	4a1f      	ldr	r2, [pc, #124]	; (2c288 <system_gclk_gen_get_hz+0xc0>)
   2c20a:	1dfb      	adds	r3, r7, #7
   2c20c:	781b      	ldrb	r3, [r3, #0]
   2c20e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   2c210:	4b1e      	ldr	r3, [pc, #120]	; (2c28c <system_gclk_gen_get_hz+0xc4>)
   2c212:	685b      	ldr	r3, [r3, #4]
   2c214:	02db      	lsls	r3, r3, #11
   2c216:	0fdb      	lsrs	r3, r3, #31
   2c218:	b2da      	uxtb	r2, r3
   2c21a:	2313      	movs	r3, #19
   2c21c:	18fb      	adds	r3, r7, r3
   2c21e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2c220:	4a1c      	ldr	r2, [pc, #112]	; (2c294 <system_gclk_gen_get_hz+0xcc>)
   2c222:	1dfb      	adds	r3, r7, #7
   2c224:	781b      	ldrb	r3, [r3, #0]
   2c226:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2c228:	46c0      	nop			; (mov r8, r8)
   2c22a:	4b15      	ldr	r3, [pc, #84]	; (2c280 <system_gclk_gen_get_hz+0xb8>)
   2c22c:	4798      	blx	r3
   2c22e:	1e03      	subs	r3, r0, #0
   2c230:	d1fb      	bne.n	2c22a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   2c232:	4b16      	ldr	r3, [pc, #88]	; (2c28c <system_gclk_gen_get_hz+0xc4>)
   2c234:	689b      	ldr	r3, [r3, #8]
   2c236:	021b      	lsls	r3, r3, #8
   2c238:	0c1b      	lsrs	r3, r3, #16
   2c23a:	b29b      	uxth	r3, r3
   2c23c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   2c23e:	4b16      	ldr	r3, [pc, #88]	; (2c298 <system_gclk_gen_get_hz+0xd0>)
   2c240:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   2c242:	2313      	movs	r3, #19
   2c244:	18fb      	adds	r3, r7, r3
   2c246:	781b      	ldrb	r3, [r3, #0]
   2c248:	2b00      	cmp	r3, #0
   2c24a:	d109      	bne.n	2c260 <system_gclk_gen_get_hz+0x98>
   2c24c:	68fb      	ldr	r3, [r7, #12]
   2c24e:	2b01      	cmp	r3, #1
   2c250:	d906      	bls.n	2c260 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   2c252:	4b12      	ldr	r3, [pc, #72]	; (2c29c <system_gclk_gen_get_hz+0xd4>)
   2c254:	68f9      	ldr	r1, [r7, #12]
   2c256:	6978      	ldr	r0, [r7, #20]
   2c258:	4798      	blx	r3
   2c25a:	0003      	movs	r3, r0
   2c25c:	617b      	str	r3, [r7, #20]
   2c25e:	e00a      	b.n	2c276 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   2c260:	2313      	movs	r3, #19
   2c262:	18fb      	adds	r3, r7, r3
   2c264:	781b      	ldrb	r3, [r3, #0]
   2c266:	2b00      	cmp	r3, #0
   2c268:	d005      	beq.n	2c276 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   2c26a:	68fb      	ldr	r3, [r7, #12]
   2c26c:	3301      	adds	r3, #1
   2c26e:	697a      	ldr	r2, [r7, #20]
   2c270:	40da      	lsrs	r2, r3
   2c272:	0013      	movs	r3, r2
   2c274:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   2c276:	697b      	ldr	r3, [r7, #20]
}
   2c278:	0018      	movs	r0, r3
   2c27a:	46bd      	mov	sp, r7
   2c27c:	b006      	add	sp, #24
   2c27e:	bd80      	pop	{r7, pc}
   2c280:	0002bff9 	.word	0x0002bff9
   2c284:	0002bfd1 	.word	0x0002bfd1
   2c288:	40000c04 	.word	0x40000c04
   2c28c:	40000c00 	.word	0x40000c00
   2c290:	0002b929 	.word	0x0002b929
   2c294:	40000c08 	.word	0x40000c08
   2c298:	0002bfe5 	.word	0x0002bfe5
   2c29c:	00034e15 	.word	0x00034e15

0002c2a0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   2c2a0:	b580      	push	{r7, lr}
   2c2a2:	b084      	sub	sp, #16
   2c2a4:	af00      	add	r7, sp, #0
   2c2a6:	0002      	movs	r2, r0
   2c2a8:	6039      	str	r1, [r7, #0]
   2c2aa:	1dfb      	adds	r3, r7, #7
   2c2ac:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   2c2ae:	1dfb      	adds	r3, r7, #7
   2c2b0:	781b      	ldrb	r3, [r3, #0]
   2c2b2:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   2c2b4:	683b      	ldr	r3, [r7, #0]
   2c2b6:	781b      	ldrb	r3, [r3, #0]
   2c2b8:	021b      	lsls	r3, r3, #8
   2c2ba:	001a      	movs	r2, r3
   2c2bc:	68fb      	ldr	r3, [r7, #12]
   2c2be:	4313      	orrs	r3, r2
   2c2c0:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   2c2c2:	1dfb      	adds	r3, r7, #7
   2c2c4:	781b      	ldrb	r3, [r3, #0]
   2c2c6:	0018      	movs	r0, r3
   2c2c8:	4b04      	ldr	r3, [pc, #16]	; (2c2dc <system_gclk_chan_set_config+0x3c>)
   2c2ca:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   2c2cc:	4b04      	ldr	r3, [pc, #16]	; (2c2e0 <system_gclk_chan_set_config+0x40>)
   2c2ce:	68fa      	ldr	r2, [r7, #12]
   2c2d0:	b292      	uxth	r2, r2
   2c2d2:	805a      	strh	r2, [r3, #2]
}
   2c2d4:	46c0      	nop			; (mov r8, r8)
   2c2d6:	46bd      	mov	sp, r7
   2c2d8:	b004      	add	sp, #16
   2c2da:	bd80      	pop	{r7, pc}
   2c2dc:	0002c32d 	.word	0x0002c32d
   2c2e0:	40000c00 	.word	0x40000c00

0002c2e4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   2c2e4:	b580      	push	{r7, lr}
   2c2e6:	b082      	sub	sp, #8
   2c2e8:	af00      	add	r7, sp, #0
   2c2ea:	0002      	movs	r2, r0
   2c2ec:	1dfb      	adds	r3, r7, #7
   2c2ee:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2c2f0:	4b0a      	ldr	r3, [pc, #40]	; (2c31c <system_gclk_chan_enable+0x38>)
   2c2f2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2c2f4:	4a0a      	ldr	r2, [pc, #40]	; (2c320 <system_gclk_chan_enable+0x3c>)
   2c2f6:	1dfb      	adds	r3, r7, #7
   2c2f8:	781b      	ldrb	r3, [r3, #0]
   2c2fa:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   2c2fc:	4909      	ldr	r1, [pc, #36]	; (2c324 <system_gclk_chan_enable+0x40>)
   2c2fe:	4b09      	ldr	r3, [pc, #36]	; (2c324 <system_gclk_chan_enable+0x40>)
   2c300:	885b      	ldrh	r3, [r3, #2]
   2c302:	b29b      	uxth	r3, r3
   2c304:	2280      	movs	r2, #128	; 0x80
   2c306:	01d2      	lsls	r2, r2, #7
   2c308:	4313      	orrs	r3, r2
   2c30a:	b29b      	uxth	r3, r3
   2c30c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   2c30e:	4b06      	ldr	r3, [pc, #24]	; (2c328 <system_gclk_chan_enable+0x44>)
   2c310:	4798      	blx	r3
}
   2c312:	46c0      	nop			; (mov r8, r8)
   2c314:	46bd      	mov	sp, r7
   2c316:	b002      	add	sp, #8
   2c318:	bd80      	pop	{r7, pc}
   2c31a:	46c0      	nop			; (mov r8, r8)
   2c31c:	0002bfd1 	.word	0x0002bfd1
   2c320:	40000c02 	.word	0x40000c02
   2c324:	40000c00 	.word	0x40000c00
   2c328:	0002bfe5 	.word	0x0002bfe5

0002c32c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   2c32c:	b580      	push	{r7, lr}
   2c32e:	b084      	sub	sp, #16
   2c330:	af00      	add	r7, sp, #0
   2c332:	0002      	movs	r2, r0
   2c334:	1dfb      	adds	r3, r7, #7
   2c336:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2c338:	4b1c      	ldr	r3, [pc, #112]	; (2c3ac <system_gclk_chan_disable+0x80>)
   2c33a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2c33c:	4a1c      	ldr	r2, [pc, #112]	; (2c3b0 <system_gclk_chan_disable+0x84>)
   2c33e:	1dfb      	adds	r3, r7, #7
   2c340:	781b      	ldrb	r3, [r3, #0]
   2c342:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   2c344:	4b1b      	ldr	r3, [pc, #108]	; (2c3b4 <system_gclk_chan_disable+0x88>)
   2c346:	885b      	ldrh	r3, [r3, #2]
   2c348:	051b      	lsls	r3, r3, #20
   2c34a:	0f1b      	lsrs	r3, r3, #28
   2c34c:	b2db      	uxtb	r3, r3
   2c34e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   2c350:	4a18      	ldr	r2, [pc, #96]	; (2c3b4 <system_gclk_chan_disable+0x88>)
   2c352:	8853      	ldrh	r3, [r2, #2]
   2c354:	4918      	ldr	r1, [pc, #96]	; (2c3b8 <system_gclk_chan_disable+0x8c>)
   2c356:	400b      	ands	r3, r1
   2c358:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   2c35a:	4a16      	ldr	r2, [pc, #88]	; (2c3b4 <system_gclk_chan_disable+0x88>)
   2c35c:	4b15      	ldr	r3, [pc, #84]	; (2c3b4 <system_gclk_chan_disable+0x88>)
   2c35e:	885b      	ldrh	r3, [r3, #2]
   2c360:	b29b      	uxth	r3, r3
   2c362:	4916      	ldr	r1, [pc, #88]	; (2c3bc <system_gclk_chan_disable+0x90>)
   2c364:	400b      	ands	r3, r1
   2c366:	b29b      	uxth	r3, r3
   2c368:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   2c36a:	46c0      	nop			; (mov r8, r8)
   2c36c:	4b11      	ldr	r3, [pc, #68]	; (2c3b4 <system_gclk_chan_disable+0x88>)
   2c36e:	885b      	ldrh	r3, [r3, #2]
   2c370:	b29b      	uxth	r3, r3
   2c372:	001a      	movs	r2, r3
   2c374:	2380      	movs	r3, #128	; 0x80
   2c376:	01db      	lsls	r3, r3, #7
   2c378:	4013      	ands	r3, r2
   2c37a:	d1f7      	bne.n	2c36c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   2c37c:	4a0d      	ldr	r2, [pc, #52]	; (2c3b4 <system_gclk_chan_disable+0x88>)
   2c37e:	68fb      	ldr	r3, [r7, #12]
   2c380:	b2db      	uxtb	r3, r3
   2c382:	1c19      	adds	r1, r3, #0
   2c384:	230f      	movs	r3, #15
   2c386:	400b      	ands	r3, r1
   2c388:	b2d9      	uxtb	r1, r3
   2c38a:	8853      	ldrh	r3, [r2, #2]
   2c38c:	1c08      	adds	r0, r1, #0
   2c38e:	210f      	movs	r1, #15
   2c390:	4001      	ands	r1, r0
   2c392:	0208      	lsls	r0, r1, #8
   2c394:	4908      	ldr	r1, [pc, #32]	; (2c3b8 <system_gclk_chan_disable+0x8c>)
   2c396:	400b      	ands	r3, r1
   2c398:	1c19      	adds	r1, r3, #0
   2c39a:	1c03      	adds	r3, r0, #0
   2c39c:	430b      	orrs	r3, r1
   2c39e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   2c3a0:	4b07      	ldr	r3, [pc, #28]	; (2c3c0 <system_gclk_chan_disable+0x94>)
   2c3a2:	4798      	blx	r3
}
   2c3a4:	46c0      	nop			; (mov r8, r8)
   2c3a6:	46bd      	mov	sp, r7
   2c3a8:	b004      	add	sp, #16
   2c3aa:	bd80      	pop	{r7, pc}
   2c3ac:	0002bfd1 	.word	0x0002bfd1
   2c3b0:	40000c02 	.word	0x40000c02
   2c3b4:	40000c00 	.word	0x40000c00
   2c3b8:	fffff0ff 	.word	0xfffff0ff
   2c3bc:	ffffbfff 	.word	0xffffbfff
   2c3c0:	0002bfe5 	.word	0x0002bfe5

0002c3c4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   2c3c4:	b580      	push	{r7, lr}
   2c3c6:	b084      	sub	sp, #16
   2c3c8:	af00      	add	r7, sp, #0
   2c3ca:	0002      	movs	r2, r0
   2c3cc:	1dfb      	adds	r3, r7, #7
   2c3ce:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   2c3d0:	4b0d      	ldr	r3, [pc, #52]	; (2c408 <system_gclk_chan_get_hz+0x44>)
   2c3d2:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2c3d4:	4a0d      	ldr	r2, [pc, #52]	; (2c40c <system_gclk_chan_get_hz+0x48>)
   2c3d6:	1dfb      	adds	r3, r7, #7
   2c3d8:	781b      	ldrb	r3, [r3, #0]
   2c3da:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   2c3dc:	4b0c      	ldr	r3, [pc, #48]	; (2c410 <system_gclk_chan_get_hz+0x4c>)
   2c3de:	885b      	ldrh	r3, [r3, #2]
   2c3e0:	051b      	lsls	r3, r3, #20
   2c3e2:	0f1b      	lsrs	r3, r3, #28
   2c3e4:	b2da      	uxtb	r2, r3
   2c3e6:	230f      	movs	r3, #15
   2c3e8:	18fb      	adds	r3, r7, r3
   2c3ea:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   2c3ec:	4b09      	ldr	r3, [pc, #36]	; (2c414 <system_gclk_chan_get_hz+0x50>)
   2c3ee:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   2c3f0:	230f      	movs	r3, #15
   2c3f2:	18fb      	adds	r3, r7, r3
   2c3f4:	781b      	ldrb	r3, [r3, #0]
   2c3f6:	0018      	movs	r0, r3
   2c3f8:	4b07      	ldr	r3, [pc, #28]	; (2c418 <system_gclk_chan_get_hz+0x54>)
   2c3fa:	4798      	blx	r3
   2c3fc:	0003      	movs	r3, r0
}
   2c3fe:	0018      	movs	r0, r3
   2c400:	46bd      	mov	sp, r7
   2c402:	b004      	add	sp, #16
   2c404:	bd80      	pop	{r7, pc}
   2c406:	46c0      	nop			; (mov r8, r8)
   2c408:	0002bfd1 	.word	0x0002bfd1
   2c40c:	40000c02 	.word	0x40000c02
   2c410:	40000c00 	.word	0x40000c00
   2c414:	0002bfe5 	.word	0x0002bfe5
   2c418:	0002c1c9 	.word	0x0002c1c9

0002c41c <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   2c41c:	b580      	push	{r7, lr}
   2c41e:	b084      	sub	sp, #16
   2c420:	af00      	add	r7, sp, #0
   2c422:	0002      	movs	r2, r0
   2c424:	1dfb      	adds	r3, r7, #7
   2c426:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   2c428:	230f      	movs	r3, #15
   2c42a:	18fb      	adds	r3, r7, r3
   2c42c:	2200      	movs	r2, #0
   2c42e:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   2c430:	1dfb      	adds	r3, r7, #7
   2c432:	781b      	ldrb	r3, [r3, #0]
   2c434:	2b7f      	cmp	r3, #127	; 0x7f
   2c436:	d80b      	bhi.n	2c450 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   2c438:	4a13      	ldr	r2, [pc, #76]	; (2c488 <system_interrupt_clear_pending+0x6c>)
   2c43a:	1dfb      	adds	r3, r7, #7
   2c43c:	781b      	ldrb	r3, [r3, #0]
   2c43e:	b25b      	sxtb	r3, r3
   2c440:	2101      	movs	r1, #1
   2c442:	4099      	lsls	r1, r3
   2c444:	000b      	movs	r3, r1
   2c446:	0019      	movs	r1, r3
   2c448:	23c0      	movs	r3, #192	; 0xc0
   2c44a:	005b      	lsls	r3, r3, #1
   2c44c:	50d1      	str	r1, [r2, r3]
   2c44e:	e014      	b.n	2c47a <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   2c450:	1dfb      	adds	r3, r7, #7
   2c452:	781b      	ldrb	r3, [r3, #0]
   2c454:	b25b      	sxtb	r3, r3
   2c456:	330e      	adds	r3, #14
   2c458:	d101      	bne.n	2c45e <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   2c45a:	2317      	movs	r3, #23
   2c45c:	e010      	b.n	2c480 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   2c45e:	1dfb      	adds	r3, r7, #7
   2c460:	781b      	ldrb	r3, [r3, #0]
   2c462:	b25b      	sxtb	r3, r3
   2c464:	3301      	adds	r3, #1
   2c466:	d104      	bne.n	2c472 <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   2c468:	4b08      	ldr	r3, [pc, #32]	; (2c48c <system_interrupt_clear_pending+0x70>)
   2c46a:	2280      	movs	r2, #128	; 0x80
   2c46c:	0492      	lsls	r2, r2, #18
   2c46e:	605a      	str	r2, [r3, #4]
   2c470:	e003      	b.n	2c47a <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   2c472:	230f      	movs	r3, #15
   2c474:	18fb      	adds	r3, r7, r3
   2c476:	2217      	movs	r2, #23
   2c478:	701a      	strb	r2, [r3, #0]
	}

	return status;
   2c47a:	230f      	movs	r3, #15
   2c47c:	18fb      	adds	r3, r7, r3
   2c47e:	781b      	ldrb	r3, [r3, #0]
}
   2c480:	0018      	movs	r0, r3
   2c482:	46bd      	mov	sp, r7
   2c484:	b004      	add	sp, #16
   2c486:	bd80      	pop	{r7, pc}
   2c488:	e000e100 	.word	0xe000e100
   2c48c:	e000ed00 	.word	0xe000ed00

0002c490 <system_pinmux_get_group_from_gpio_pin>:
{
   2c490:	b580      	push	{r7, lr}
   2c492:	b084      	sub	sp, #16
   2c494:	af00      	add	r7, sp, #0
   2c496:	0002      	movs	r2, r0
   2c498:	1dfb      	adds	r3, r7, #7
   2c49a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2c49c:	230f      	movs	r3, #15
   2c49e:	18fb      	adds	r3, r7, r3
   2c4a0:	1dfa      	adds	r2, r7, #7
   2c4a2:	7812      	ldrb	r2, [r2, #0]
   2c4a4:	09d2      	lsrs	r2, r2, #7
   2c4a6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2c4a8:	230e      	movs	r3, #14
   2c4aa:	18fb      	adds	r3, r7, r3
   2c4ac:	1dfa      	adds	r2, r7, #7
   2c4ae:	7812      	ldrb	r2, [r2, #0]
   2c4b0:	0952      	lsrs	r2, r2, #5
   2c4b2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2c4b4:	4b0d      	ldr	r3, [pc, #52]	; (2c4ec <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2c4b6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2c4b8:	230f      	movs	r3, #15
   2c4ba:	18fb      	adds	r3, r7, r3
   2c4bc:	781b      	ldrb	r3, [r3, #0]
   2c4be:	2b00      	cmp	r3, #0
   2c4c0:	d10f      	bne.n	2c4e2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2c4c2:	230f      	movs	r3, #15
   2c4c4:	18fb      	adds	r3, r7, r3
   2c4c6:	781b      	ldrb	r3, [r3, #0]
   2c4c8:	009b      	lsls	r3, r3, #2
   2c4ca:	2210      	movs	r2, #16
   2c4cc:	4694      	mov	ip, r2
   2c4ce:	44bc      	add	ip, r7
   2c4d0:	4463      	add	r3, ip
   2c4d2:	3b08      	subs	r3, #8
   2c4d4:	681a      	ldr	r2, [r3, #0]
   2c4d6:	230e      	movs	r3, #14
   2c4d8:	18fb      	adds	r3, r7, r3
   2c4da:	781b      	ldrb	r3, [r3, #0]
   2c4dc:	01db      	lsls	r3, r3, #7
   2c4de:	18d3      	adds	r3, r2, r3
   2c4e0:	e000      	b.n	2c4e4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2c4e2:	2300      	movs	r3, #0
}
   2c4e4:	0018      	movs	r0, r3
   2c4e6:	46bd      	mov	sp, r7
   2c4e8:	b004      	add	sp, #16
   2c4ea:	bd80      	pop	{r7, pc}
   2c4ec:	41004400 	.word	0x41004400

0002c4f0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   2c4f0:	b580      	push	{r7, lr}
   2c4f2:	b088      	sub	sp, #32
   2c4f4:	af00      	add	r7, sp, #0
   2c4f6:	60f8      	str	r0, [r7, #12]
   2c4f8:	60b9      	str	r1, [r7, #8]
   2c4fa:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   2c4fc:	2300      	movs	r3, #0
   2c4fe:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   2c500:	687b      	ldr	r3, [r7, #4]
   2c502:	78db      	ldrb	r3, [r3, #3]
   2c504:	2201      	movs	r2, #1
   2c506:	4053      	eors	r3, r2
   2c508:	b2db      	uxtb	r3, r3
   2c50a:	2b00      	cmp	r3, #0
   2c50c:	d035      	beq.n	2c57a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2c50e:	687b      	ldr	r3, [r7, #4]
   2c510:	781b      	ldrb	r3, [r3, #0]
   2c512:	2b80      	cmp	r3, #128	; 0x80
   2c514:	d00b      	beq.n	2c52e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   2c516:	69fb      	ldr	r3, [r7, #28]
   2c518:	2280      	movs	r2, #128	; 0x80
   2c51a:	0252      	lsls	r2, r2, #9
   2c51c:	4313      	orrs	r3, r2
   2c51e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   2c520:	687b      	ldr	r3, [r7, #4]
   2c522:	781b      	ldrb	r3, [r3, #0]
   2c524:	061b      	lsls	r3, r3, #24
   2c526:	001a      	movs	r2, r3
   2c528:	69fb      	ldr	r3, [r7, #28]
   2c52a:	4313      	orrs	r3, r2
   2c52c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2c52e:	687b      	ldr	r3, [r7, #4]
   2c530:	785b      	ldrb	r3, [r3, #1]
   2c532:	2b00      	cmp	r3, #0
   2c534:	d003      	beq.n	2c53e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2c536:	687b      	ldr	r3, [r7, #4]
   2c538:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2c53a:	2b02      	cmp	r3, #2
   2c53c:	d110      	bne.n	2c560 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2c53e:	69fb      	ldr	r3, [r7, #28]
   2c540:	2280      	movs	r2, #128	; 0x80
   2c542:	0292      	lsls	r2, r2, #10
   2c544:	4313      	orrs	r3, r2
   2c546:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   2c548:	687b      	ldr	r3, [r7, #4]
   2c54a:	789b      	ldrb	r3, [r3, #2]
   2c54c:	2b00      	cmp	r3, #0
   2c54e:	d004      	beq.n	2c55a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   2c550:	69fb      	ldr	r3, [r7, #28]
   2c552:	2280      	movs	r2, #128	; 0x80
   2c554:	02d2      	lsls	r2, r2, #11
   2c556:	4313      	orrs	r3, r2
   2c558:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2c55a:	68fb      	ldr	r3, [r7, #12]
   2c55c:	68ba      	ldr	r2, [r7, #8]
   2c55e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2c560:	687b      	ldr	r3, [r7, #4]
   2c562:	785b      	ldrb	r3, [r3, #1]
   2c564:	2b01      	cmp	r3, #1
   2c566:	d003      	beq.n	2c570 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2c568:	687b      	ldr	r3, [r7, #4]
   2c56a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2c56c:	2b02      	cmp	r3, #2
   2c56e:	d107      	bne.n	2c580 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   2c570:	69fb      	ldr	r3, [r7, #28]
   2c572:	4a22      	ldr	r2, [pc, #136]	; (2c5fc <_system_pinmux_config+0x10c>)
   2c574:	4013      	ands	r3, r2
   2c576:	61fb      	str	r3, [r7, #28]
   2c578:	e002      	b.n	2c580 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2c57a:	68fb      	ldr	r3, [r7, #12]
   2c57c:	68ba      	ldr	r2, [r7, #8]
   2c57e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   2c580:	68bb      	ldr	r3, [r7, #8]
   2c582:	041b      	lsls	r3, r3, #16
   2c584:	0c1b      	lsrs	r3, r3, #16
   2c586:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   2c588:	68bb      	ldr	r3, [r7, #8]
   2c58a:	0c1b      	lsrs	r3, r3, #16
   2c58c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2c58e:	69ba      	ldr	r2, [r7, #24]
   2c590:	69fb      	ldr	r3, [r7, #28]
   2c592:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   2c594:	22a0      	movs	r2, #160	; 0xa0
   2c596:	05d2      	lsls	r2, r2, #23
   2c598:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2c59a:	68fb      	ldr	r3, [r7, #12]
   2c59c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2c59e:	697a      	ldr	r2, [r7, #20]
   2c5a0:	69fb      	ldr	r3, [r7, #28]
   2c5a2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   2c5a4:	22d0      	movs	r2, #208	; 0xd0
   2c5a6:	0612      	lsls	r2, r2, #24
   2c5a8:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2c5aa:	68fb      	ldr	r3, [r7, #12]
   2c5ac:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2c5ae:	687b      	ldr	r3, [r7, #4]
   2c5b0:	78db      	ldrb	r3, [r3, #3]
   2c5b2:	2201      	movs	r2, #1
   2c5b4:	4053      	eors	r3, r2
   2c5b6:	b2db      	uxtb	r3, r3
   2c5b8:	2b00      	cmp	r3, #0
   2c5ba:	d01a      	beq.n	2c5f2 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   2c5bc:	69fa      	ldr	r2, [r7, #28]
   2c5be:	2380      	movs	r3, #128	; 0x80
   2c5c0:	02db      	lsls	r3, r3, #11
   2c5c2:	4013      	ands	r3, r2
   2c5c4:	d00a      	beq.n	2c5dc <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   2c5c6:	687b      	ldr	r3, [r7, #4]
   2c5c8:	789b      	ldrb	r3, [r3, #2]
   2c5ca:	2b01      	cmp	r3, #1
   2c5cc:	d103      	bne.n	2c5d6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2c5ce:	68fb      	ldr	r3, [r7, #12]
   2c5d0:	68ba      	ldr	r2, [r7, #8]
   2c5d2:	619a      	str	r2, [r3, #24]
   2c5d4:	e002      	b.n	2c5dc <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   2c5d6:	68fb      	ldr	r3, [r7, #12]
   2c5d8:	68ba      	ldr	r2, [r7, #8]
   2c5da:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2c5dc:	687b      	ldr	r3, [r7, #4]
   2c5de:	785b      	ldrb	r3, [r3, #1]
   2c5e0:	2b01      	cmp	r3, #1
   2c5e2:	d003      	beq.n	2c5ec <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2c5e4:	687b      	ldr	r3, [r7, #4]
   2c5e6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2c5e8:	2b02      	cmp	r3, #2
   2c5ea:	d102      	bne.n	2c5f2 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   2c5ec:	68fb      	ldr	r3, [r7, #12]
   2c5ee:	68ba      	ldr	r2, [r7, #8]
   2c5f0:	609a      	str	r2, [r3, #8]
		}
	}
}
   2c5f2:	46c0      	nop			; (mov r8, r8)
   2c5f4:	46bd      	mov	sp, r7
   2c5f6:	b008      	add	sp, #32
   2c5f8:	bd80      	pop	{r7, pc}
   2c5fa:	46c0      	nop			; (mov r8, r8)
   2c5fc:	fffbffff 	.word	0xfffbffff

0002c600 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   2c600:	b580      	push	{r7, lr}
   2c602:	b084      	sub	sp, #16
   2c604:	af00      	add	r7, sp, #0
   2c606:	0002      	movs	r2, r0
   2c608:	6039      	str	r1, [r7, #0]
   2c60a:	1dfb      	adds	r3, r7, #7
   2c60c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2c60e:	1dfb      	adds	r3, r7, #7
   2c610:	781b      	ldrb	r3, [r3, #0]
   2c612:	0018      	movs	r0, r3
   2c614:	4b0a      	ldr	r3, [pc, #40]	; (2c640 <system_pinmux_pin_set_config+0x40>)
   2c616:	4798      	blx	r3
   2c618:	0003      	movs	r3, r0
   2c61a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   2c61c:	1dfb      	adds	r3, r7, #7
   2c61e:	781b      	ldrb	r3, [r3, #0]
   2c620:	221f      	movs	r2, #31
   2c622:	4013      	ands	r3, r2
   2c624:	2201      	movs	r2, #1
   2c626:	409a      	lsls	r2, r3
   2c628:	0013      	movs	r3, r2
   2c62a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2c62c:	683a      	ldr	r2, [r7, #0]
   2c62e:	68b9      	ldr	r1, [r7, #8]
   2c630:	68fb      	ldr	r3, [r7, #12]
   2c632:	0018      	movs	r0, r3
   2c634:	4b03      	ldr	r3, [pc, #12]	; (2c644 <system_pinmux_pin_set_config+0x44>)
   2c636:	4798      	blx	r3
}
   2c638:	46c0      	nop			; (mov r8, r8)
   2c63a:	46bd      	mov	sp, r7
   2c63c:	b004      	add	sp, #16
   2c63e:	bd80      	pop	{r7, pc}
   2c640:	0002c491 	.word	0x0002c491
   2c644:	0002c4f1 	.word	0x0002c4f1

0002c648 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   2c648:	b580      	push	{r7, lr}
   2c64a:	af00      	add	r7, sp, #0
	return;
   2c64c:	46c0      	nop			; (mov r8, r8)
}
   2c64e:	46bd      	mov	sp, r7
   2c650:	bd80      	pop	{r7, pc}
	...

0002c654 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   2c654:	b580      	push	{r7, lr}
   2c656:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   2c658:	4b06      	ldr	r3, [pc, #24]	; (2c674 <system_init+0x20>)
   2c65a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2c65c:	4b06      	ldr	r3, [pc, #24]	; (2c678 <system_init+0x24>)
   2c65e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   2c660:	4b06      	ldr	r3, [pc, #24]	; (2c67c <system_init+0x28>)
   2c662:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   2c664:	4b06      	ldr	r3, [pc, #24]	; (2c680 <system_init+0x2c>)
   2c666:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   2c668:	4b06      	ldr	r3, [pc, #24]	; (2c684 <system_init+0x30>)
   2c66a:	4798      	blx	r3
}
   2c66c:	46c0      	nop			; (mov r8, r8)
   2c66e:	46bd      	mov	sp, r7
   2c670:	bd80      	pop	{r7, pc}
   2c672:	46c0      	nop			; (mov r8, r8)
   2c674:	0002bcd5 	.word	0x0002bcd5
   2c678:	00028741 	.word	0x00028741
   2c67c:	00012669 	.word	0x00012669
   2c680:	00028b19 	.word	0x00028b19
   2c684:	0002c649 	.word	0x0002c649

0002c688 <system_gclk_chan_get_config_defaults>:
{
   2c688:	b580      	push	{r7, lr}
   2c68a:	b082      	sub	sp, #8
   2c68c:	af00      	add	r7, sp, #0
   2c68e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2c690:	687b      	ldr	r3, [r7, #4]
   2c692:	2200      	movs	r2, #0
   2c694:	701a      	strb	r2, [r3, #0]
}
   2c696:	46c0      	nop			; (mov r8, r8)
   2c698:	46bd      	mov	sp, r7
   2c69a:	b002      	add	sp, #8
   2c69c:	bd80      	pop	{r7, pc}
	...

0002c6a0 <system_apb_clock_set_mask>:
{
   2c6a0:	b580      	push	{r7, lr}
   2c6a2:	b082      	sub	sp, #8
   2c6a4:	af00      	add	r7, sp, #0
   2c6a6:	0002      	movs	r2, r0
   2c6a8:	6039      	str	r1, [r7, #0]
   2c6aa:	1dfb      	adds	r3, r7, #7
   2c6ac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2c6ae:	1dfb      	adds	r3, r7, #7
   2c6b0:	781b      	ldrb	r3, [r3, #0]
   2c6b2:	2b01      	cmp	r3, #1
   2c6b4:	d00a      	beq.n	2c6cc <system_apb_clock_set_mask+0x2c>
   2c6b6:	2b02      	cmp	r3, #2
   2c6b8:	d00f      	beq.n	2c6da <system_apb_clock_set_mask+0x3a>
   2c6ba:	2b00      	cmp	r3, #0
   2c6bc:	d114      	bne.n	2c6e8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2c6be:	4b0e      	ldr	r3, [pc, #56]	; (2c6f8 <system_apb_clock_set_mask+0x58>)
   2c6c0:	4a0d      	ldr	r2, [pc, #52]	; (2c6f8 <system_apb_clock_set_mask+0x58>)
   2c6c2:	6991      	ldr	r1, [r2, #24]
   2c6c4:	683a      	ldr	r2, [r7, #0]
   2c6c6:	430a      	orrs	r2, r1
   2c6c8:	619a      	str	r2, [r3, #24]
			break;
   2c6ca:	e00f      	b.n	2c6ec <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2c6cc:	4b0a      	ldr	r3, [pc, #40]	; (2c6f8 <system_apb_clock_set_mask+0x58>)
   2c6ce:	4a0a      	ldr	r2, [pc, #40]	; (2c6f8 <system_apb_clock_set_mask+0x58>)
   2c6d0:	69d1      	ldr	r1, [r2, #28]
   2c6d2:	683a      	ldr	r2, [r7, #0]
   2c6d4:	430a      	orrs	r2, r1
   2c6d6:	61da      	str	r2, [r3, #28]
			break;
   2c6d8:	e008      	b.n	2c6ec <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2c6da:	4b07      	ldr	r3, [pc, #28]	; (2c6f8 <system_apb_clock_set_mask+0x58>)
   2c6dc:	4a06      	ldr	r2, [pc, #24]	; (2c6f8 <system_apb_clock_set_mask+0x58>)
   2c6de:	6a11      	ldr	r1, [r2, #32]
   2c6e0:	683a      	ldr	r2, [r7, #0]
   2c6e2:	430a      	orrs	r2, r1
   2c6e4:	621a      	str	r2, [r3, #32]
			break;
   2c6e6:	e001      	b.n	2c6ec <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2c6e8:	2317      	movs	r3, #23
   2c6ea:	e000      	b.n	2c6ee <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2c6ec:	2300      	movs	r3, #0
}
   2c6ee:	0018      	movs	r0, r3
   2c6f0:	46bd      	mov	sp, r7
   2c6f2:	b002      	add	sp, #8
   2c6f4:	bd80      	pop	{r7, pc}
   2c6f6:	46c0      	nop			; (mov r8, r8)
   2c6f8:	40000400 	.word	0x40000400

0002c6fc <system_pinmux_get_config_defaults>:
{
   2c6fc:	b580      	push	{r7, lr}
   2c6fe:	b082      	sub	sp, #8
   2c700:	af00      	add	r7, sp, #0
   2c702:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2c704:	687b      	ldr	r3, [r7, #4]
   2c706:	2280      	movs	r2, #128	; 0x80
   2c708:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2c70a:	687b      	ldr	r3, [r7, #4]
   2c70c:	2200      	movs	r2, #0
   2c70e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2c710:	687b      	ldr	r3, [r7, #4]
   2c712:	2201      	movs	r2, #1
   2c714:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2c716:	687b      	ldr	r3, [r7, #4]
   2c718:	2200      	movs	r2, #0
   2c71a:	70da      	strb	r2, [r3, #3]
}
   2c71c:	46c0      	nop			; (mov r8, r8)
   2c71e:	46bd      	mov	sp, r7
   2c720:	b002      	add	sp, #8
   2c722:	bd80      	pop	{r7, pc}

0002c724 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   2c724:	b580      	push	{r7, lr}
   2c726:	b084      	sub	sp, #16
   2c728:	af00      	add	r7, sp, #0
   2c72a:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2c72c:	2300      	movs	r3, #0
   2c72e:	60fb      	str	r3, [r7, #12]
   2c730:	e00c      	b.n	2c74c <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   2c732:	4b0a      	ldr	r3, [pc, #40]	; (2c75c <_tcc_get_inst_index+0x38>)
   2c734:	68fa      	ldr	r2, [r7, #12]
   2c736:	0092      	lsls	r2, r2, #2
   2c738:	58d2      	ldr	r2, [r2, r3]
   2c73a:	687b      	ldr	r3, [r7, #4]
   2c73c:	429a      	cmp	r2, r3
   2c73e:	d102      	bne.n	2c746 <_tcc_get_inst_index+0x22>
			return i;
   2c740:	68fb      	ldr	r3, [r7, #12]
   2c742:	b2db      	uxtb	r3, r3
   2c744:	e006      	b.n	2c754 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2c746:	68fb      	ldr	r3, [r7, #12]
   2c748:	3301      	adds	r3, #1
   2c74a:	60fb      	str	r3, [r7, #12]
   2c74c:	68fb      	ldr	r3, [r7, #12]
   2c74e:	2b02      	cmp	r3, #2
   2c750:	d9ef      	bls.n	2c732 <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2c752:	2300      	movs	r3, #0
}
   2c754:	0018      	movs	r0, r3
   2c756:	46bd      	mov	sp, r7
   2c758:	b004      	add	sp, #16
   2c75a:	bd80      	pop	{r7, pc}
   2c75c:	0003c828 	.word	0x0003c828

0002c760 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   2c760:	b590      	push	{r4, r7, lr}
   2c762:	b085      	sub	sp, #20
   2c764:	af00      	add	r7, sp, #0
   2c766:	6078      	str	r0, [r7, #4]
   2c768:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2c76a:	230f      	movs	r3, #15
   2c76c:	18fc      	adds	r4, r7, r3
   2c76e:	683b      	ldr	r3, [r7, #0]
   2c770:	0018      	movs	r0, r3
   2c772:	4bad      	ldr	r3, [pc, #692]	; (2ca28 <tcc_get_config_defaults+0x2c8>)
   2c774:	4798      	blx	r3
   2c776:	0003      	movs	r3, r0
   2c778:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   2c77a:	687b      	ldr	r3, [r7, #4]
   2c77c:	2200      	movs	r2, #0
   2c77e:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   2c780:	230f      	movs	r3, #15
   2c782:	18fb      	adds	r3, r7, r3
   2c784:	781a      	ldrb	r2, [r3, #0]
   2c786:	4ba9      	ldr	r3, [pc, #676]	; (2ca2c <tcc_get_config_defaults+0x2cc>)
   2c788:	0092      	lsls	r2, r2, #2
   2c78a:	58d2      	ldr	r2, [r2, r3]
   2c78c:	687b      	ldr	r3, [r7, #4]
   2c78e:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   2c790:	687b      	ldr	r3, [r7, #4]
   2c792:	2200      	movs	r2, #0
   2c794:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   2c796:	687b      	ldr	r3, [r7, #4]
   2c798:	2200      	movs	r2, #0
   2c79a:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   2c79c:	687b      	ldr	r3, [r7, #4]
   2c79e:	2200      	movs	r2, #0
   2c7a0:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2c7a2:	687b      	ldr	r3, [r7, #4]
   2c7a4:	2200      	movs	r2, #0
   2c7a6:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   2c7a8:	687b      	ldr	r3, [r7, #4]
   2c7aa:	2200      	movs	r2, #0
   2c7ac:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2c7ae:	687b      	ldr	r3, [r7, #4]
   2c7b0:	2200      	movs	r2, #0
   2c7b2:	61da      	str	r2, [r3, #28]
   2c7b4:	687b      	ldr	r3, [r7, #4]
   2c7b6:	2200      	movs	r2, #0
   2c7b8:	621a      	str	r2, [r3, #32]
   2c7ba:	687b      	ldr	r3, [r7, #4]
   2c7bc:	2200      	movs	r2, #0
   2c7be:	625a      	str	r2, [r3, #36]	; 0x24
   2c7c0:	687b      	ldr	r3, [r7, #4]
   2c7c2:	2200      	movs	r2, #0
   2c7c4:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2c7c6:	687b      	ldr	r3, [r7, #4]
   2c7c8:	2200      	movs	r2, #0
   2c7ca:	751a      	strb	r2, [r3, #20]
   2c7cc:	687b      	ldr	r3, [r7, #4]
   2c7ce:	2200      	movs	r2, #0
   2c7d0:	755a      	strb	r2, [r3, #21]
   2c7d2:	687b      	ldr	r3, [r7, #4]
   2c7d4:	2200      	movs	r2, #0
   2c7d6:	759a      	strb	r2, [r3, #22]
   2c7d8:	687b      	ldr	r3, [r7, #4]
   2c7da:	2200      	movs	r2, #0
   2c7dc:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   2c7de:	687b      	ldr	r3, [r7, #4]
   2c7e0:	2200      	movs	r2, #0
   2c7e2:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   2c7e4:	687b      	ldr	r3, [r7, #4]
   2c7e6:	2200      	movs	r2, #0
   2c7e8:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2c7ea:	687b      	ldr	r3, [r7, #4]
   2c7ec:	2200      	movs	r2, #0
   2c7ee:	741a      	strb	r2, [r3, #16]
   2c7f0:	687b      	ldr	r3, [r7, #4]
   2c7f2:	2200      	movs	r2, #0
   2c7f4:	745a      	strb	r2, [r3, #17]
   2c7f6:	687b      	ldr	r3, [r7, #4]
   2c7f8:	2200      	movs	r2, #0
   2c7fa:	749a      	strb	r2, [r3, #18]
   2c7fc:	687b      	ldr	r3, [r7, #4]
   2c7fe:	2200      	movs	r2, #0
   2c800:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2c802:	687b      	ldr	r3, [r7, #4]
   2c804:	222c      	movs	r2, #44	; 0x2c
   2c806:	2100      	movs	r1, #0
   2c808:	5499      	strb	r1, [r3, r2]
   2c80a:	687b      	ldr	r3, [r7, #4]
   2c80c:	222d      	movs	r2, #45	; 0x2d
   2c80e:	2100      	movs	r1, #0
   2c810:	5499      	strb	r1, [r3, r2]
   2c812:	687b      	ldr	r3, [r7, #4]
   2c814:	222e      	movs	r2, #46	; 0x2e
   2c816:	2100      	movs	r1, #0
   2c818:	5499      	strb	r1, [r3, r2]
   2c81a:	687b      	ldr	r3, [r7, #4]
   2c81c:	222f      	movs	r2, #47	; 0x2f
   2c81e:	2100      	movs	r1, #0
   2c820:	5499      	strb	r1, [r3, r2]
   2c822:	687b      	ldr	r3, [r7, #4]
   2c824:	2230      	movs	r2, #48	; 0x30
   2c826:	2100      	movs	r1, #0
   2c828:	5499      	strb	r1, [r3, r2]
   2c82a:	687b      	ldr	r3, [r7, #4]
   2c82c:	2231      	movs	r2, #49	; 0x31
   2c82e:	2100      	movs	r1, #0
   2c830:	5499      	strb	r1, [r3, r2]
   2c832:	687b      	ldr	r3, [r7, #4]
   2c834:	2232      	movs	r2, #50	; 0x32
   2c836:	2100      	movs	r1, #0
   2c838:	5499      	strb	r1, [r3, r2]
   2c83a:	687b      	ldr	r3, [r7, #4]
   2c83c:	2233      	movs	r2, #51	; 0x33
   2c83e:	2100      	movs	r1, #0
   2c840:	5499      	strb	r1, [r3, r2]
   2c842:	687b      	ldr	r3, [r7, #4]
   2c844:	2234      	movs	r2, #52	; 0x34
   2c846:	2100      	movs	r1, #0
   2c848:	5499      	strb	r1, [r3, r2]
   2c84a:	687b      	ldr	r3, [r7, #4]
   2c84c:	2235      	movs	r2, #53	; 0x35
   2c84e:	2100      	movs	r1, #0
   2c850:	5499      	strb	r1, [r3, r2]
   2c852:	687b      	ldr	r3, [r7, #4]
   2c854:	2236      	movs	r2, #54	; 0x36
   2c856:	2100      	movs	r1, #0
   2c858:	5499      	strb	r1, [r3, r2]
   2c85a:	687b      	ldr	r3, [r7, #4]
   2c85c:	2237      	movs	r2, #55	; 0x37
   2c85e:	2100      	movs	r1, #0
   2c860:	5499      	strb	r1, [r3, r2]
   2c862:	687b      	ldr	r3, [r7, #4]
   2c864:	2238      	movs	r2, #56	; 0x38
   2c866:	2100      	movs	r1, #0
   2c868:	5499      	strb	r1, [r3, r2]
   2c86a:	687b      	ldr	r3, [r7, #4]
   2c86c:	2239      	movs	r2, #57	; 0x39
   2c86e:	2100      	movs	r1, #0
   2c870:	5499      	strb	r1, [r3, r2]
   2c872:	687b      	ldr	r3, [r7, #4]
   2c874:	223a      	movs	r2, #58	; 0x3a
   2c876:	2100      	movs	r1, #0
   2c878:	5499      	strb	r1, [r3, r2]
   2c87a:	687b      	ldr	r3, [r7, #4]
   2c87c:	223b      	movs	r2, #59	; 0x3b
   2c87e:	2100      	movs	r1, #0
   2c880:	5499      	strb	r1, [r3, r2]
   2c882:	687b      	ldr	r3, [r7, #4]
   2c884:	223c      	movs	r2, #60	; 0x3c
   2c886:	2100      	movs	r1, #0
   2c888:	5499      	strb	r1, [r3, r2]
   2c88a:	687b      	ldr	r3, [r7, #4]
   2c88c:	223d      	movs	r2, #61	; 0x3d
   2c88e:	2100      	movs	r1, #0
   2c890:	5499      	strb	r1, [r3, r2]
   2c892:	687b      	ldr	r3, [r7, #4]
   2c894:	223e      	movs	r2, #62	; 0x3e
   2c896:	2100      	movs	r1, #0
   2c898:	5499      	strb	r1, [r3, r2]
   2c89a:	687b      	ldr	r3, [r7, #4]
   2c89c:	223f      	movs	r2, #63	; 0x3f
   2c89e:	2100      	movs	r1, #0
   2c8a0:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2c8a2:	687b      	ldr	r3, [r7, #4]
   2c8a4:	2240      	movs	r2, #64	; 0x40
   2c8a6:	2100      	movs	r1, #0
   2c8a8:	5499      	strb	r1, [r3, r2]
   2c8aa:	687b      	ldr	r3, [r7, #4]
   2c8ac:	2241      	movs	r2, #65	; 0x41
   2c8ae:	2100      	movs	r1, #0
   2c8b0:	5499      	strb	r1, [r3, r2]
   2c8b2:	687b      	ldr	r3, [r7, #4]
   2c8b4:	2242      	movs	r2, #66	; 0x42
   2c8b6:	2100      	movs	r1, #0
   2c8b8:	5499      	strb	r1, [r3, r2]
   2c8ba:	687b      	ldr	r3, [r7, #4]
   2c8bc:	2243      	movs	r2, #67	; 0x43
   2c8be:	2100      	movs	r1, #0
   2c8c0:	5499      	strb	r1, [r3, r2]
   2c8c2:	687b      	ldr	r3, [r7, #4]
   2c8c4:	2244      	movs	r2, #68	; 0x44
   2c8c6:	2100      	movs	r1, #0
   2c8c8:	5499      	strb	r1, [r3, r2]
   2c8ca:	687b      	ldr	r3, [r7, #4]
   2c8cc:	2245      	movs	r2, #69	; 0x45
   2c8ce:	2100      	movs	r1, #0
   2c8d0:	5499      	strb	r1, [r3, r2]
   2c8d2:	687b      	ldr	r3, [r7, #4]
   2c8d4:	2246      	movs	r2, #70	; 0x46
   2c8d6:	2100      	movs	r1, #0
   2c8d8:	5499      	strb	r1, [r3, r2]
   2c8da:	687b      	ldr	r3, [r7, #4]
   2c8dc:	2247      	movs	r2, #71	; 0x47
   2c8de:	2100      	movs	r1, #0
   2c8e0:	5499      	strb	r1, [r3, r2]
   2c8e2:	687b      	ldr	r3, [r7, #4]
   2c8e4:	2248      	movs	r2, #72	; 0x48
   2c8e6:	2100      	movs	r1, #0
   2c8e8:	5499      	strb	r1, [r3, r2]
   2c8ea:	687b      	ldr	r3, [r7, #4]
   2c8ec:	2249      	movs	r2, #73	; 0x49
   2c8ee:	2100      	movs	r1, #0
   2c8f0:	5499      	strb	r1, [r3, r2]
   2c8f2:	687b      	ldr	r3, [r7, #4]
   2c8f4:	224a      	movs	r2, #74	; 0x4a
   2c8f6:	2100      	movs	r1, #0
   2c8f8:	5499      	strb	r1, [r3, r2]
   2c8fa:	687b      	ldr	r3, [r7, #4]
   2c8fc:	224b      	movs	r2, #75	; 0x4b
   2c8fe:	2100      	movs	r1, #0
   2c900:	5499      	strb	r1, [r3, r2]
   2c902:	687b      	ldr	r3, [r7, #4]
   2c904:	224c      	movs	r2, #76	; 0x4c
   2c906:	2100      	movs	r1, #0
   2c908:	5499      	strb	r1, [r3, r2]
   2c90a:	687b      	ldr	r3, [r7, #4]
   2c90c:	224d      	movs	r2, #77	; 0x4d
   2c90e:	2100      	movs	r1, #0
   2c910:	5499      	strb	r1, [r3, r2]
   2c912:	687b      	ldr	r3, [r7, #4]
   2c914:	224e      	movs	r2, #78	; 0x4e
   2c916:	2100      	movs	r1, #0
   2c918:	5499      	strb	r1, [r3, r2]
   2c91a:	687b      	ldr	r3, [r7, #4]
   2c91c:	224f      	movs	r2, #79	; 0x4f
   2c91e:	2100      	movs	r1, #0
   2c920:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2c922:	687b      	ldr	r3, [r7, #4]
   2c924:	2250      	movs	r2, #80	; 0x50
   2c926:	2100      	movs	r1, #0
   2c928:	5499      	strb	r1, [r3, r2]
   2c92a:	687b      	ldr	r3, [r7, #4]
   2c92c:	2251      	movs	r2, #81	; 0x51
   2c92e:	2100      	movs	r1, #0
   2c930:	5499      	strb	r1, [r3, r2]
   2c932:	687b      	ldr	r3, [r7, #4]
   2c934:	2252      	movs	r2, #82	; 0x52
   2c936:	2100      	movs	r1, #0
   2c938:	5499      	strb	r1, [r3, r2]
   2c93a:	687b      	ldr	r3, [r7, #4]
   2c93c:	2253      	movs	r2, #83	; 0x53
   2c93e:	2100      	movs	r1, #0
   2c940:	5499      	strb	r1, [r3, r2]
   2c942:	687b      	ldr	r3, [r7, #4]
   2c944:	2254      	movs	r2, #84	; 0x54
   2c946:	2100      	movs	r1, #0
   2c948:	5499      	strb	r1, [r3, r2]
   2c94a:	687b      	ldr	r3, [r7, #4]
   2c94c:	2255      	movs	r2, #85	; 0x55
   2c94e:	2100      	movs	r1, #0
   2c950:	5499      	strb	r1, [r3, r2]
   2c952:	687b      	ldr	r3, [r7, #4]
   2c954:	2256      	movs	r2, #86	; 0x56
   2c956:	2100      	movs	r1, #0
   2c958:	5499      	strb	r1, [r3, r2]
   2c95a:	687b      	ldr	r3, [r7, #4]
   2c95c:	2257      	movs	r2, #87	; 0x57
   2c95e:	2100      	movs	r1, #0
   2c960:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2c962:	687b      	ldr	r3, [r7, #4]
   2c964:	2298      	movs	r2, #152	; 0x98
   2c966:	2100      	movs	r1, #0
   2c968:	5499      	strb	r1, [r3, r2]
   2c96a:	687b      	ldr	r3, [r7, #4]
   2c96c:	2200      	movs	r2, #0
   2c96e:	659a      	str	r2, [r3, #88]	; 0x58
   2c970:	687b      	ldr	r3, [r7, #4]
   2c972:	2200      	movs	r2, #0
   2c974:	679a      	str	r2, [r3, #120]	; 0x78
   2c976:	687b      	ldr	r3, [r7, #4]
   2c978:	2299      	movs	r2, #153	; 0x99
   2c97a:	2100      	movs	r1, #0
   2c97c:	5499      	strb	r1, [r3, r2]
   2c97e:	687b      	ldr	r3, [r7, #4]
   2c980:	2200      	movs	r2, #0
   2c982:	65da      	str	r2, [r3, #92]	; 0x5c
   2c984:	687b      	ldr	r3, [r7, #4]
   2c986:	2200      	movs	r2, #0
   2c988:	67da      	str	r2, [r3, #124]	; 0x7c
   2c98a:	687b      	ldr	r3, [r7, #4]
   2c98c:	229a      	movs	r2, #154	; 0x9a
   2c98e:	2100      	movs	r1, #0
   2c990:	5499      	strb	r1, [r3, r2]
   2c992:	687b      	ldr	r3, [r7, #4]
   2c994:	2200      	movs	r2, #0
   2c996:	661a      	str	r2, [r3, #96]	; 0x60
   2c998:	687b      	ldr	r3, [r7, #4]
   2c99a:	2280      	movs	r2, #128	; 0x80
   2c99c:	2100      	movs	r1, #0
   2c99e:	5099      	str	r1, [r3, r2]
   2c9a0:	687b      	ldr	r3, [r7, #4]
   2c9a2:	229b      	movs	r2, #155	; 0x9b
   2c9a4:	2100      	movs	r1, #0
   2c9a6:	5499      	strb	r1, [r3, r2]
   2c9a8:	687b      	ldr	r3, [r7, #4]
   2c9aa:	2200      	movs	r2, #0
   2c9ac:	665a      	str	r2, [r3, #100]	; 0x64
   2c9ae:	687b      	ldr	r3, [r7, #4]
   2c9b0:	2284      	movs	r2, #132	; 0x84
   2c9b2:	2100      	movs	r1, #0
   2c9b4:	5099      	str	r1, [r3, r2]
   2c9b6:	687b      	ldr	r3, [r7, #4]
   2c9b8:	229c      	movs	r2, #156	; 0x9c
   2c9ba:	2100      	movs	r1, #0
   2c9bc:	5499      	strb	r1, [r3, r2]
   2c9be:	687b      	ldr	r3, [r7, #4]
   2c9c0:	2200      	movs	r2, #0
   2c9c2:	669a      	str	r2, [r3, #104]	; 0x68
   2c9c4:	687b      	ldr	r3, [r7, #4]
   2c9c6:	2288      	movs	r2, #136	; 0x88
   2c9c8:	2100      	movs	r1, #0
   2c9ca:	5099      	str	r1, [r3, r2]
   2c9cc:	687b      	ldr	r3, [r7, #4]
   2c9ce:	229d      	movs	r2, #157	; 0x9d
   2c9d0:	2100      	movs	r1, #0
   2c9d2:	5499      	strb	r1, [r3, r2]
   2c9d4:	687b      	ldr	r3, [r7, #4]
   2c9d6:	2200      	movs	r2, #0
   2c9d8:	66da      	str	r2, [r3, #108]	; 0x6c
   2c9da:	687b      	ldr	r3, [r7, #4]
   2c9dc:	228c      	movs	r2, #140	; 0x8c
   2c9de:	2100      	movs	r1, #0
   2c9e0:	5099      	str	r1, [r3, r2]
   2c9e2:	687b      	ldr	r3, [r7, #4]
   2c9e4:	229e      	movs	r2, #158	; 0x9e
   2c9e6:	2100      	movs	r1, #0
   2c9e8:	5499      	strb	r1, [r3, r2]
   2c9ea:	687b      	ldr	r3, [r7, #4]
   2c9ec:	2200      	movs	r2, #0
   2c9ee:	671a      	str	r2, [r3, #112]	; 0x70
   2c9f0:	687b      	ldr	r3, [r7, #4]
   2c9f2:	2290      	movs	r2, #144	; 0x90
   2c9f4:	2100      	movs	r1, #0
   2c9f6:	5099      	str	r1, [r3, r2]
   2c9f8:	687b      	ldr	r3, [r7, #4]
   2c9fa:	229f      	movs	r2, #159	; 0x9f
   2c9fc:	2100      	movs	r1, #0
   2c9fe:	5499      	strb	r1, [r3, r2]
   2ca00:	687b      	ldr	r3, [r7, #4]
   2ca02:	2200      	movs	r2, #0
   2ca04:	675a      	str	r2, [r3, #116]	; 0x74
   2ca06:	687b      	ldr	r3, [r7, #4]
   2ca08:	2294      	movs	r2, #148	; 0x94
   2ca0a:	2100      	movs	r1, #0
   2ca0c:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   2ca0e:	687b      	ldr	r3, [r7, #4]
   2ca10:	22a0      	movs	r2, #160	; 0xa0
   2ca12:	2101      	movs	r1, #1
   2ca14:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   2ca16:	687b      	ldr	r3, [r7, #4]
   2ca18:	22a1      	movs	r2, #161	; 0xa1
   2ca1a:	2100      	movs	r1, #0
   2ca1c:	5499      	strb	r1, [r3, r2]
}
   2ca1e:	46c0      	nop			; (mov r8, r8)
   2ca20:	46bd      	mov	sp, r7
   2ca22:	b005      	add	sp, #20
   2ca24:	bd90      	pop	{r4, r7, pc}
   2ca26:	46c0      	nop			; (mov r8, r8)
   2ca28:	0002c725 	.word	0x0002c725
   2ca2c:	0003c844 	.word	0x0003c844

0002ca30 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2ca30:	b580      	push	{r7, lr}
   2ca32:	b086      	sub	sp, #24
   2ca34:	af00      	add	r7, sp, #0
   2ca36:	60b9      	str	r1, [r7, #8]
   2ca38:	607a      	str	r2, [r7, #4]
   2ca3a:	230f      	movs	r3, #15
   2ca3c:	18fb      	adds	r3, r7, r3
   2ca3e:	1c02      	adds	r2, r0, #0
   2ca40:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2ca42:	2300      	movs	r3, #0
   2ca44:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2ca46:	2300      	movs	r3, #0
   2ca48:	613b      	str	r3, [r7, #16]
   2ca4a:	e01d      	b.n	2ca88 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2ca4c:	68ba      	ldr	r2, [r7, #8]
   2ca4e:	693b      	ldr	r3, [r7, #16]
   2ca50:	18d3      	adds	r3, r2, r3
   2ca52:	3310      	adds	r3, #16
   2ca54:	781b      	ldrb	r3, [r3, #0]
   2ca56:	2b01      	cmp	r3, #1
   2ca58:	d113      	bne.n	2ca82 <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2ca5a:	230f      	movs	r3, #15
   2ca5c:	18fb      	adds	r3, r7, r3
   2ca5e:	781b      	ldrb	r3, [r3, #0]
   2ca60:	4a1b      	ldr	r2, [pc, #108]	; (2cad0 <_tcc_build_ctrla+0xa0>)
   2ca62:	5cd3      	ldrb	r3, [r2, r3]
   2ca64:	001a      	movs	r2, r3
   2ca66:	693b      	ldr	r3, [r7, #16]
   2ca68:	429a      	cmp	r2, r3
   2ca6a:	da01      	bge.n	2ca70 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2ca6c:	2317      	movs	r3, #23
   2ca6e:	e02a      	b.n	2cac6 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2ca70:	2380      	movs	r3, #128	; 0x80
   2ca72:	045a      	lsls	r2, r3, #17
   2ca74:	693b      	ldr	r3, [r7, #16]
   2ca76:	409a      	lsls	r2, r3
   2ca78:	0013      	movs	r3, r2
   2ca7a:	001a      	movs	r2, r3
   2ca7c:	697b      	ldr	r3, [r7, #20]
   2ca7e:	4313      	orrs	r3, r2
   2ca80:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2ca82:	693b      	ldr	r3, [r7, #16]
   2ca84:	3301      	adds	r3, #1
   2ca86:	613b      	str	r3, [r7, #16]
   2ca88:	693b      	ldr	r3, [r7, #16]
   2ca8a:	2b03      	cmp	r3, #3
   2ca8c:	ddde      	ble.n	2ca4c <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2ca8e:	68bb      	ldr	r3, [r7, #8]
   2ca90:	22a1      	movs	r2, #161	; 0xa1
   2ca92:	5c9b      	ldrb	r3, [r3, r2]
   2ca94:	2b00      	cmp	r3, #0
   2ca96:	d004      	beq.n	2caa2 <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2ca98:	697b      	ldr	r3, [r7, #20]
   2ca9a:	2280      	movs	r2, #128	; 0x80
   2ca9c:	0112      	lsls	r2, r2, #4
   2ca9e:	4313      	orrs	r3, r2
   2caa0:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2caa2:	68bb      	ldr	r3, [r7, #8]
   2caa4:	7b1b      	ldrb	r3, [r3, #12]
   2caa6:	031b      	lsls	r3, r3, #12
   2caa8:	001a      	movs	r2, r3
   2caaa:	697b      	ldr	r3, [r7, #20]
   2caac:	4313      	orrs	r3, r2
   2caae:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2cab0:	68bb      	ldr	r3, [r7, #8]
   2cab2:	7adb      	ldrb	r3, [r3, #11]
   2cab4:	021b      	lsls	r3, r3, #8
   2cab6:	001a      	movs	r2, r3
   2cab8:	697b      	ldr	r3, [r7, #20]
   2caba:	4313      	orrs	r3, r2
   2cabc:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2cabe:	687b      	ldr	r3, [r7, #4]
   2cac0:	697a      	ldr	r2, [r7, #20]
   2cac2:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2cac4:	2300      	movs	r3, #0
}
   2cac6:	0018      	movs	r0, r3
   2cac8:	46bd      	mov	sp, r7
   2caca:	b006      	add	sp, #24
   2cacc:	bd80      	pop	{r7, pc}
   2cace:	46c0      	nop			; (mov r8, r8)
   2cad0:	0003c850 	.word	0x0003c850

0002cad4 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2cad4:	b580      	push	{r7, lr}
   2cad6:	b086      	sub	sp, #24
   2cad8:	af00      	add	r7, sp, #0
   2cada:	60b9      	str	r1, [r7, #8]
   2cadc:	607a      	str	r2, [r7, #4]
   2cade:	230f      	movs	r3, #15
   2cae0:	18fb      	adds	r3, r7, r3
   2cae2:	1c02      	adds	r2, r0, #0
   2cae4:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2cae6:	2317      	movs	r3, #23
   2cae8:	18fb      	adds	r3, r7, r3
   2caea:	2200      	movs	r2, #0
   2caec:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2caee:	68bb      	ldr	r3, [r7, #8]
   2caf0:	7a1b      	ldrb	r3, [r3, #8]
   2caf2:	2b00      	cmp	r3, #0
   2caf4:	d007      	beq.n	2cb06 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2caf6:	2317      	movs	r3, #23
   2caf8:	18fb      	adds	r3, r7, r3
   2cafa:	2217      	movs	r2, #23
   2cafc:	18ba      	adds	r2, r7, r2
   2cafe:	7812      	ldrb	r2, [r2, #0]
   2cb00:	2104      	movs	r1, #4
   2cb02:	430a      	orrs	r2, r1
   2cb04:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2cb06:	68bb      	ldr	r3, [r7, #8]
   2cb08:	7a5b      	ldrb	r3, [r3, #9]
   2cb0a:	2b01      	cmp	r3, #1
   2cb0c:	d107      	bne.n	2cb1e <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2cb0e:	2317      	movs	r3, #23
   2cb10:	18fb      	adds	r3, r7, r3
   2cb12:	2217      	movs	r2, #23
   2cb14:	18ba      	adds	r2, r7, r2
   2cb16:	7812      	ldrb	r2, [r2, #0]
   2cb18:	2101      	movs	r1, #1
   2cb1a:	430a      	orrs	r2, r1
   2cb1c:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2cb1e:	687b      	ldr	r3, [r7, #4]
   2cb20:	2217      	movs	r2, #23
   2cb22:	18ba      	adds	r2, r7, r2
   2cb24:	7812      	ldrb	r2, [r2, #0]
   2cb26:	701a      	strb	r2, [r3, #0]
}
   2cb28:	46c0      	nop			; (mov r8, r8)
   2cb2a:	46bd      	mov	sp, r7
   2cb2c:	b006      	add	sp, #24
   2cb2e:	bd80      	pop	{r7, pc}

0002cb30 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2cb30:	b580      	push	{r7, lr}
   2cb32:	b088      	sub	sp, #32
   2cb34:	af00      	add	r7, sp, #0
   2cb36:	60b9      	str	r1, [r7, #8]
   2cb38:	607a      	str	r2, [r7, #4]
   2cb3a:	230f      	movs	r3, #15
   2cb3c:	18fb      	adds	r3, r7, r3
   2cb3e:	1c02      	adds	r2, r0, #0
   2cb40:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2cb42:	230f      	movs	r3, #15
   2cb44:	18fb      	adds	r3, r7, r3
   2cb46:	781a      	ldrb	r2, [r3, #0]
   2cb48:	231b      	movs	r3, #27
   2cb4a:	18fb      	adds	r3, r7, r3
   2cb4c:	493e      	ldr	r1, [pc, #248]	; (2cc48 <_tcc_build_faults+0x118>)
   2cb4e:	5c8a      	ldrb	r2, [r1, r2]
   2cb50:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2cb52:	2300      	movs	r3, #0
   2cb54:	61fb      	str	r3, [r7, #28]
   2cb56:	e06e      	b.n	2cc36 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2cb58:	69fa      	ldr	r2, [r7, #28]
   2cb5a:	0013      	movs	r3, r2
   2cb5c:	009b      	lsls	r3, r3, #2
   2cb5e:	189b      	adds	r3, r3, r2
   2cb60:	005b      	lsls	r3, r3, #1
   2cb62:	3328      	adds	r3, #40	; 0x28
   2cb64:	68ba      	ldr	r2, [r7, #8]
   2cb66:	18d3      	adds	r3, r2, r3
   2cb68:	3304      	adds	r3, #4
   2cb6a:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2cb6c:	697b      	ldr	r3, [r7, #20]
   2cb6e:	7a5b      	ldrb	r3, [r3, #9]
   2cb70:	221b      	movs	r2, #27
   2cb72:	18ba      	adds	r2, r7, r2
   2cb74:	7812      	ldrb	r2, [r2, #0]
   2cb76:	429a      	cmp	r2, r3
   2cb78:	d801      	bhi.n	2cb7e <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2cb7a:	2317      	movs	r3, #23
   2cb7c:	e05f      	b.n	2cc3e <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2cb7e:	697b      	ldr	r3, [r7, #20]
   2cb80:	781b      	ldrb	r3, [r3, #0]
   2cb82:	2b0f      	cmp	r3, #15
   2cb84:	d901      	bls.n	2cb8a <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2cb86:	2317      	movs	r3, #23
   2cb88:	e059      	b.n	2cc3e <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2cb8a:	697b      	ldr	r3, [r7, #20]
   2cb8c:	781b      	ldrb	r3, [r3, #0]
   2cb8e:	061b      	lsls	r3, r3, #24
   2cb90:	001a      	movs	r2, r3
   2cb92:	23f0      	movs	r3, #240	; 0xf0
   2cb94:	051b      	lsls	r3, r3, #20
   2cb96:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2cb98:	697b      	ldr	r3, [r7, #20]
   2cb9a:	785b      	ldrb	r3, [r3, #1]
   2cb9c:	041b      	lsls	r3, r3, #16
   2cb9e:	0019      	movs	r1, r3
   2cba0:	23ff      	movs	r3, #255	; 0xff
   2cba2:	041b      	lsls	r3, r3, #16
   2cba4:	400b      	ands	r3, r1
   2cba6:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2cba8:	697b      	ldr	r3, [r7, #20]
   2cbaa:	789b      	ldrb	r3, [r3, #2]
   2cbac:	2b00      	cmp	r3, #0
   2cbae:	d001      	beq.n	2cbb4 <_tcc_build_faults+0x84>
   2cbb0:	2380      	movs	r3, #128	; 0x80
   2cbb2:	e000      	b.n	2cbb6 <_tcc_build_faults+0x86>
   2cbb4:	2300      	movs	r3, #0
   2cbb6:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2cbb8:	697b      	ldr	r3, [r7, #20]
   2cbba:	78db      	ldrb	r3, [r3, #3]
   2cbbc:	2b00      	cmp	r3, #0
   2cbbe:	d001      	beq.n	2cbc4 <_tcc_build_faults+0x94>
   2cbc0:	2308      	movs	r3, #8
   2cbc2:	e000      	b.n	2cbc6 <_tcc_build_faults+0x96>
   2cbc4:	2300      	movs	r3, #0
   2cbc6:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2cbc8:	697b      	ldr	r3, [r7, #20]
   2cbca:	791b      	ldrb	r3, [r3, #4]
   2cbcc:	2b00      	cmp	r3, #0
   2cbce:	d001      	beq.n	2cbd4 <_tcc_build_faults+0xa4>
   2cbd0:	2310      	movs	r3, #16
   2cbd2:	e000      	b.n	2cbd6 <_tcc_build_faults+0xa6>
   2cbd4:	2300      	movs	r3, #0
   2cbd6:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2cbd8:	697b      	ldr	r3, [r7, #20]
   2cbda:	795b      	ldrb	r3, [r3, #5]
   2cbdc:	0019      	movs	r1, r3
   2cbde:	2303      	movs	r3, #3
   2cbe0:	400b      	ands	r3, r1
   2cbe2:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2cbe4:	697b      	ldr	r3, [r7, #20]
   2cbe6:	799b      	ldrb	r3, [r3, #6]
   2cbe8:	015b      	lsls	r3, r3, #5
   2cbea:	0019      	movs	r1, r3
   2cbec:	2360      	movs	r3, #96	; 0x60
   2cbee:	400b      	ands	r3, r1
   2cbf0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2cbf2:	697b      	ldr	r3, [r7, #20]
   2cbf4:	79db      	ldrb	r3, [r3, #7]
   2cbf6:	021b      	lsls	r3, r3, #8
   2cbf8:	0019      	movs	r1, r3
   2cbfa:	23c0      	movs	r3, #192	; 0xc0
   2cbfc:	009b      	lsls	r3, r3, #2
   2cbfe:	400b      	ands	r3, r1
   2cc00:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2cc02:	697b      	ldr	r3, [r7, #20]
   2cc04:	7a1b      	ldrb	r3, [r3, #8]
   2cc06:	031b      	lsls	r3, r3, #12
   2cc08:	0019      	movs	r1, r3
   2cc0a:	23e0      	movs	r3, #224	; 0xe0
   2cc0c:	01db      	lsls	r3, r3, #7
   2cc0e:	400b      	ands	r3, r1
   2cc10:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2cc12:	697b      	ldr	r3, [r7, #20]
   2cc14:	7a5b      	ldrb	r3, [r3, #9]
   2cc16:	029b      	lsls	r3, r3, #10
   2cc18:	0019      	movs	r1, r3
   2cc1a:	23c0      	movs	r3, #192	; 0xc0
   2cc1c:	011b      	lsls	r3, r3, #4
   2cc1e:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2cc20:	4313      	orrs	r3, r2
   2cc22:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2cc24:	69fb      	ldr	r3, [r7, #28]
   2cc26:	009b      	lsls	r3, r3, #2
   2cc28:	687a      	ldr	r2, [r7, #4]
   2cc2a:	18d3      	adds	r3, r2, r3
   2cc2c:	693a      	ldr	r2, [r7, #16]
   2cc2e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2cc30:	69fb      	ldr	r3, [r7, #28]
   2cc32:	3301      	adds	r3, #1
   2cc34:	61fb      	str	r3, [r7, #28]
   2cc36:	69fb      	ldr	r3, [r7, #28]
   2cc38:	2b01      	cmp	r3, #1
   2cc3a:	dd8d      	ble.n	2cb58 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2cc3c:	2300      	movs	r3, #0
}
   2cc3e:	0018      	movs	r0, r3
   2cc40:	46bd      	mov	sp, r7
   2cc42:	b008      	add	sp, #32
   2cc44:	bd80      	pop	{r7, pc}
   2cc46:	46c0      	nop			; (mov r8, r8)
   2cc48:	0003c850 	.word	0x0003c850

0002cc4c <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2cc4c:	b580      	push	{r7, lr}
   2cc4e:	b088      	sub	sp, #32
   2cc50:	af00      	add	r7, sp, #0
   2cc52:	60b9      	str	r1, [r7, #8]
   2cc54:	607a      	str	r2, [r7, #4]
   2cc56:	230f      	movs	r3, #15
   2cc58:	18fb      	adds	r3, r7, r3
   2cc5a:	1c02      	adds	r2, r0, #0
   2cc5c:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2cc5e:	230f      	movs	r3, #15
   2cc60:	18fb      	adds	r3, r7, r3
   2cc62:	781a      	ldrb	r2, [r3, #0]
   2cc64:	2317      	movs	r3, #23
   2cc66:	18fb      	adds	r3, r7, r3
   2cc68:	492d      	ldr	r1, [pc, #180]	; (2cd20 <_tcc_build_drvctrl+0xd4>)
   2cc6a:	5c8a      	ldrb	r2, [r1, r2]
   2cc6c:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2cc6e:	2300      	movs	r3, #0
   2cc70:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2cc72:	2300      	movs	r3, #0
   2cc74:	61fb      	str	r3, [r7, #28]
   2cc76:	e048      	b.n	2cd0a <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2cc78:	68ba      	ldr	r2, [r7, #8]
   2cc7a:	2150      	movs	r1, #80	; 0x50
   2cc7c:	69fb      	ldr	r3, [r7, #28]
   2cc7e:	18d3      	adds	r3, r2, r3
   2cc80:	185b      	adds	r3, r3, r1
   2cc82:	781b      	ldrb	r3, [r3, #0]
   2cc84:	2b00      	cmp	r3, #0
   2cc86:	d010      	beq.n	2ccaa <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2cc88:	2317      	movs	r3, #23
   2cc8a:	18fb      	adds	r3, r7, r3
   2cc8c:	781a      	ldrb	r2, [r3, #0]
   2cc8e:	69fb      	ldr	r3, [r7, #28]
   2cc90:	429a      	cmp	r2, r3
   2cc92:	d801      	bhi.n	2cc98 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2cc94:	2317      	movs	r3, #23
   2cc96:	e03f      	b.n	2cd18 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2cc98:	2380      	movs	r3, #128	; 0x80
   2cc9a:	025a      	lsls	r2, r3, #9
   2cc9c:	69fb      	ldr	r3, [r7, #28]
   2cc9e:	409a      	lsls	r2, r3
   2cca0:	0013      	movs	r3, r2
   2cca2:	001a      	movs	r2, r3
   2cca4:	69bb      	ldr	r3, [r7, #24]
   2cca6:	4313      	orrs	r3, r2
   2cca8:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2ccaa:	68ba      	ldr	r2, [r7, #8]
   2ccac:	69fb      	ldr	r3, [r7, #28]
   2ccae:	331c      	adds	r3, #28
   2ccb0:	005b      	lsls	r3, r3, #1
   2ccb2:	18d3      	adds	r3, r2, r3
   2ccb4:	3309      	adds	r3, #9
   2ccb6:	781b      	ldrb	r3, [r3, #0]
   2ccb8:	2b00      	cmp	r3, #0
   2ccba:	d023      	beq.n	2cd04 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2ccbc:	2317      	movs	r3, #23
   2ccbe:	18fb      	adds	r3, r7, r3
   2ccc0:	781a      	ldrb	r2, [r3, #0]
   2ccc2:	69fb      	ldr	r3, [r7, #28]
   2ccc4:	429a      	cmp	r2, r3
   2ccc6:	d801      	bhi.n	2cccc <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2ccc8:	2317      	movs	r3, #23
   2ccca:	e025      	b.n	2cd18 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2cccc:	68ba      	ldr	r2, [r7, #8]
   2ccce:	69fb      	ldr	r3, [r7, #28]
   2ccd0:	331c      	adds	r3, #28
   2ccd2:	005b      	lsls	r3, r3, #1
   2ccd4:	18d3      	adds	r3, r2, r3
   2ccd6:	3309      	adds	r3, #9
   2ccd8:	781b      	ldrb	r3, [r3, #0]
   2ccda:	2b02      	cmp	r3, #2
   2ccdc:	d10a      	bne.n	2ccf4 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2ccde:	2302      	movs	r3, #2
   2cce0:	33ff      	adds	r3, #255	; 0xff
   2cce2:	001a      	movs	r2, r3
   2cce4:	69fb      	ldr	r3, [r7, #28]
   2cce6:	409a      	lsls	r2, r3
   2cce8:	0013      	movs	r3, r2
   2ccea:	001a      	movs	r2, r3
   2ccec:	69bb      	ldr	r3, [r7, #24]
   2ccee:	4313      	orrs	r3, r2
   2ccf0:	61bb      	str	r3, [r7, #24]
   2ccf2:	e007      	b.n	2cd04 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2ccf4:	2201      	movs	r2, #1
   2ccf6:	69fb      	ldr	r3, [r7, #28]
   2ccf8:	409a      	lsls	r2, r3
   2ccfa:	0013      	movs	r3, r2
   2ccfc:	001a      	movs	r2, r3
   2ccfe:	69bb      	ldr	r3, [r7, #24]
   2cd00:	4313      	orrs	r3, r2
   2cd02:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2cd04:	69fb      	ldr	r3, [r7, #28]
   2cd06:	3301      	adds	r3, #1
   2cd08:	61fb      	str	r3, [r7, #28]
   2cd0a:	69fb      	ldr	r3, [r7, #28]
   2cd0c:	2b07      	cmp	r3, #7
   2cd0e:	d9b3      	bls.n	2cc78 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2cd10:	687b      	ldr	r3, [r7, #4]
   2cd12:	69ba      	ldr	r2, [r7, #24]
   2cd14:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2cd16:	2300      	movs	r3, #0
}
   2cd18:	0018      	movs	r0, r3
   2cd1a:	46bd      	mov	sp, r7
   2cd1c:	b008      	add	sp, #32
   2cd1e:	bd80      	pop	{r7, pc}
   2cd20:	0003c854 	.word	0x0003c854

0002cd24 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2cd24:	b580      	push	{r7, lr}
   2cd26:	b088      	sub	sp, #32
   2cd28:	af00      	add	r7, sp, #0
   2cd2a:	60b9      	str	r1, [r7, #8]
   2cd2c:	607a      	str	r2, [r7, #4]
   2cd2e:	230f      	movs	r3, #15
   2cd30:	18fb      	adds	r3, r7, r3
   2cd32:	1c02      	adds	r2, r0, #0
   2cd34:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2cd36:	230f      	movs	r3, #15
   2cd38:	18fb      	adds	r3, r7, r3
   2cd3a:	781a      	ldrb	r2, [r3, #0]
   2cd3c:	2317      	movs	r3, #23
   2cd3e:	18fb      	adds	r3, r7, r3
   2cd40:	491d      	ldr	r1, [pc, #116]	; (2cdb8 <_tcc_build_waves+0x94>)
   2cd42:	5c8a      	ldrb	r2, [r1, r2]
   2cd44:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2cd46:	68bb      	ldr	r3, [r7, #8]
   2cd48:	3310      	adds	r3, #16
   2cd4a:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2cd4c:	693b      	ldr	r3, [r7, #16]
   2cd4e:	7a5b      	ldrb	r3, [r3, #9]
   2cd50:	011b      	lsls	r3, r3, #4
   2cd52:	001a      	movs	r2, r3
   2cd54:	2330      	movs	r3, #48	; 0x30
   2cd56:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2cd58:	693b      	ldr	r3, [r7, #16]
   2cd5a:	7a1b      	ldrb	r3, [r3, #8]
   2cd5c:	0019      	movs	r1, r3
   2cd5e:	2307      	movs	r3, #7
   2cd60:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2cd62:	4313      	orrs	r3, r2
   2cd64:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2cd66:	2300      	movs	r3, #0
   2cd68:	61fb      	str	r3, [r7, #28]
   2cd6a:	e01a      	b.n	2cda2 <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2cd6c:	693a      	ldr	r2, [r7, #16]
   2cd6e:	69fb      	ldr	r3, [r7, #28]
   2cd70:	18d3      	adds	r3, r2, r3
   2cd72:	3304      	adds	r3, #4
   2cd74:	781b      	ldrb	r3, [r3, #0]
   2cd76:	2b00      	cmp	r3, #0
   2cd78:	d010      	beq.n	2cd9c <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2cd7a:	2317      	movs	r3, #23
   2cd7c:	18fb      	adds	r3, r7, r3
   2cd7e:	781a      	ldrb	r2, [r3, #0]
   2cd80:	69fb      	ldr	r3, [r7, #28]
   2cd82:	429a      	cmp	r2, r3
   2cd84:	dc01      	bgt.n	2cd8a <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2cd86:	2317      	movs	r3, #23
   2cd88:	e012      	b.n	2cdb0 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2cd8a:	2380      	movs	r3, #128	; 0x80
   2cd8c:	025a      	lsls	r2, r3, #9
   2cd8e:	69fb      	ldr	r3, [r7, #28]
   2cd90:	409a      	lsls	r2, r3
   2cd92:	0013      	movs	r3, r2
   2cd94:	001a      	movs	r2, r3
   2cd96:	69bb      	ldr	r3, [r7, #24]
   2cd98:	4313      	orrs	r3, r2
   2cd9a:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2cd9c:	69fb      	ldr	r3, [r7, #28]
   2cd9e:	3301      	adds	r3, #1
   2cda0:	61fb      	str	r3, [r7, #28]
   2cda2:	69fb      	ldr	r3, [r7, #28]
   2cda4:	2b03      	cmp	r3, #3
   2cda6:	dde1      	ble.n	2cd6c <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2cda8:	687b      	ldr	r3, [r7, #4]
   2cdaa:	69ba      	ldr	r2, [r7, #24]
   2cdac:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2cdae:	2300      	movs	r3, #0
}
   2cdb0:	0018      	movs	r0, r3
   2cdb2:	46bd      	mov	sp, r7
   2cdb4:	b008      	add	sp, #32
   2cdb6:	bd80      	pop	{r7, pc}
   2cdb8:	0003c850 	.word	0x0003c850

0002cdbc <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2cdbc:	b590      	push	{r4, r7, lr}
   2cdbe:	b091      	sub	sp, #68	; 0x44
   2cdc0:	af00      	add	r7, sp, #0
   2cdc2:	60f8      	str	r0, [r7, #12]
   2cdc4:	60b9      	str	r1, [r7, #8]
   2cdc6:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2cdc8:	233b      	movs	r3, #59	; 0x3b
   2cdca:	18fc      	adds	r4, r7, r3
   2cdcc:	68bb      	ldr	r3, [r7, #8]
   2cdce:	0018      	movs	r0, r3
   2cdd0:	4bc4      	ldr	r3, [pc, #784]	; (2d0e4 <tcc_init+0x328>)
   2cdd2:	4798      	blx	r3
   2cdd4:	0003      	movs	r3, r0
   2cdd6:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2cdd8:	233b      	movs	r3, #59	; 0x3b
   2cdda:	18fb      	adds	r3, r7, r3
   2cddc:	781a      	ldrb	r2, [r3, #0]
   2cdde:	4bc2      	ldr	r3, [pc, #776]	; (2d0e8 <tcc_init+0x32c>)
   2cde0:	0092      	lsls	r2, r2, #2
   2cde2:	58d3      	ldr	r3, [r2, r3]
   2cde4:	0019      	movs	r1, r3
   2cde6:	2002      	movs	r0, #2
   2cde8:	4bc0      	ldr	r3, [pc, #768]	; (2d0ec <tcc_init+0x330>)
   2cdea:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2cdec:	68bb      	ldr	r3, [r7, #8]
   2cdee:	681b      	ldr	r3, [r3, #0]
   2cdf0:	2202      	movs	r2, #2
   2cdf2:	4013      	ands	r3, r2
   2cdf4:	d001      	beq.n	2cdfa <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2cdf6:	231c      	movs	r3, #28
   2cdf8:	e1be      	b.n	2d178 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2cdfa:	68bb      	ldr	r3, [r7, #8]
   2cdfc:	681b      	ldr	r3, [r3, #0]
   2cdfe:	2201      	movs	r2, #1
   2ce00:	4013      	ands	r3, r2
   2ce02:	d001      	beq.n	2ce08 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2ce04:	231c      	movs	r3, #28
   2ce06:	e1b7      	b.n	2d178 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2ce08:	233b      	movs	r3, #59	; 0x3b
   2ce0a:	18fb      	adds	r3, r7, r3
   2ce0c:	781a      	ldrb	r2, [r3, #0]
   2ce0e:	4bb8      	ldr	r3, [pc, #736]	; (2d0f0 <tcc_init+0x334>)
   2ce10:	0092      	lsls	r2, r2, #2
   2ce12:	58d3      	ldr	r3, [r2, r3]
   2ce14:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2ce16:	687b      	ldr	r3, [r7, #4]
   2ce18:	681a      	ldr	r2, [r3, #0]
   2ce1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2ce1c:	429a      	cmp	r2, r3
   2ce1e:	d804      	bhi.n	2ce2a <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2ce20:	687b      	ldr	r3, [r7, #4]
   2ce22:	685a      	ldr	r2, [r3, #4]
   2ce24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2ce26:	429a      	cmp	r2, r3
   2ce28:	d901      	bls.n	2ce2e <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2ce2a:	2317      	movs	r3, #23
   2ce2c:	e1a4      	b.n	2d178 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2ce2e:	2300      	movs	r3, #0
   2ce30:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ce32:	e00e      	b.n	2ce52 <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2ce34:	687a      	ldr	r2, [r7, #4]
   2ce36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ce38:	3306      	adds	r3, #6
   2ce3a:	009b      	lsls	r3, r3, #2
   2ce3c:	18d3      	adds	r3, r2, r3
   2ce3e:	3304      	adds	r3, #4
   2ce40:	681a      	ldr	r2, [r3, #0]
   2ce42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2ce44:	429a      	cmp	r2, r3
   2ce46:	d901      	bls.n	2ce4c <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2ce48:	2317      	movs	r3, #23
   2ce4a:	e195      	b.n	2d178 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2ce4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ce4e:	3301      	adds	r3, #1
   2ce50:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ce52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ce54:	2b03      	cmp	r3, #3
   2ce56:	dded      	ble.n	2ce34 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2ce58:	2300      	movs	r3, #0
   2ce5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ce5c:	e019      	b.n	2ce92 <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2ce5e:	687a      	ldr	r2, [r7, #4]
   2ce60:	2198      	movs	r1, #152	; 0x98
   2ce62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ce64:	18d3      	adds	r3, r2, r3
   2ce66:	185b      	adds	r3, r3, r1
   2ce68:	781b      	ldrb	r3, [r3, #0]
   2ce6a:	2201      	movs	r2, #1
   2ce6c:	4053      	eors	r3, r2
   2ce6e:	b2db      	uxtb	r3, r3
   2ce70:	2b00      	cmp	r3, #0
   2ce72:	d10a      	bne.n	2ce8a <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2ce74:	233b      	movs	r3, #59	; 0x3b
   2ce76:	18fb      	adds	r3, r7, r3
   2ce78:	781b      	ldrb	r3, [r3, #0]
   2ce7a:	4a9e      	ldr	r2, [pc, #632]	; (2d0f4 <tcc_init+0x338>)
   2ce7c:	5cd3      	ldrb	r3, [r2, r3]
   2ce7e:	001a      	movs	r2, r3
   2ce80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ce82:	429a      	cmp	r2, r3
   2ce84:	dc02      	bgt.n	2ce8c <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2ce86:	2317      	movs	r3, #23
   2ce88:	e176      	b.n	2d178 <tcc_init+0x3bc>
			continue;
   2ce8a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2ce8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ce8e:	3301      	adds	r3, #1
   2ce90:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ce92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ce94:	2b07      	cmp	r3, #7
   2ce96:	dde2      	ble.n	2ce5e <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2ce98:	2300      	movs	r3, #0
   2ce9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2ce9c:	2333      	movs	r3, #51	; 0x33
   2ce9e:	18fc      	adds	r4, r7, r3
   2cea0:	232c      	movs	r3, #44	; 0x2c
   2cea2:	18fa      	adds	r2, r7, r3
   2cea4:	6879      	ldr	r1, [r7, #4]
   2cea6:	233b      	movs	r3, #59	; 0x3b
   2cea8:	18fb      	adds	r3, r7, r3
   2ceaa:	781b      	ldrb	r3, [r3, #0]
   2ceac:	0018      	movs	r0, r3
   2ceae:	4b92      	ldr	r3, [pc, #584]	; (2d0f8 <tcc_init+0x33c>)
   2ceb0:	4798      	blx	r3
   2ceb2:	0003      	movs	r3, r0
   2ceb4:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2ceb6:	2333      	movs	r3, #51	; 0x33
   2ceb8:	18fb      	adds	r3, r7, r3
   2ceba:	781b      	ldrb	r3, [r3, #0]
   2cebc:	2b00      	cmp	r3, #0
   2cebe:	d003      	beq.n	2cec8 <tcc_init+0x10c>
		return status;
   2cec0:	2333      	movs	r3, #51	; 0x33
   2cec2:	18fb      	adds	r3, r7, r3
   2cec4:	781b      	ldrb	r3, [r3, #0]
   2cec6:	e157      	b.n	2d178 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2cec8:	232b      	movs	r3, #43	; 0x2b
   2ceca:	18fa      	adds	r2, r7, r3
   2cecc:	6879      	ldr	r1, [r7, #4]
   2cece:	233b      	movs	r3, #59	; 0x3b
   2ced0:	18fb      	adds	r3, r7, r3
   2ced2:	781b      	ldrb	r3, [r3, #0]
   2ced4:	0018      	movs	r0, r3
   2ced6:	4b89      	ldr	r3, [pc, #548]	; (2d0fc <tcc_init+0x340>)
   2ced8:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2ceda:	2333      	movs	r3, #51	; 0x33
   2cedc:	18fc      	adds	r4, r7, r3
   2cede:	2320      	movs	r3, #32
   2cee0:	18fa      	adds	r2, r7, r3
   2cee2:	6879      	ldr	r1, [r7, #4]
   2cee4:	233b      	movs	r3, #59	; 0x3b
   2cee6:	18fb      	adds	r3, r7, r3
   2cee8:	781b      	ldrb	r3, [r3, #0]
   2ceea:	0018      	movs	r0, r3
   2ceec:	4b84      	ldr	r3, [pc, #528]	; (2d100 <tcc_init+0x344>)
   2ceee:	4798      	blx	r3
   2cef0:	0003      	movs	r3, r0
   2cef2:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2cef4:	2333      	movs	r3, #51	; 0x33
   2cef6:	18fb      	adds	r3, r7, r3
   2cef8:	781b      	ldrb	r3, [r3, #0]
   2cefa:	2b00      	cmp	r3, #0
   2cefc:	d003      	beq.n	2cf06 <tcc_init+0x14a>
		return status;
   2cefe:	2333      	movs	r3, #51	; 0x33
   2cf00:	18fb      	adds	r3, r7, r3
   2cf02:	781b      	ldrb	r3, [r3, #0]
   2cf04:	e138      	b.n	2d178 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2cf06:	2300      	movs	r3, #0
   2cf08:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2cf0a:	2333      	movs	r3, #51	; 0x33
   2cf0c:	18fc      	adds	r4, r7, r3
   2cf0e:	231c      	movs	r3, #28
   2cf10:	18fa      	adds	r2, r7, r3
   2cf12:	6879      	ldr	r1, [r7, #4]
   2cf14:	233b      	movs	r3, #59	; 0x3b
   2cf16:	18fb      	adds	r3, r7, r3
   2cf18:	781b      	ldrb	r3, [r3, #0]
   2cf1a:	0018      	movs	r0, r3
   2cf1c:	4b79      	ldr	r3, [pc, #484]	; (2d104 <tcc_init+0x348>)
   2cf1e:	4798      	blx	r3
   2cf20:	0003      	movs	r3, r0
   2cf22:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2cf24:	2333      	movs	r3, #51	; 0x33
   2cf26:	18fb      	adds	r3, r7, r3
   2cf28:	781b      	ldrb	r3, [r3, #0]
   2cf2a:	2b00      	cmp	r3, #0
   2cf2c:	d003      	beq.n	2cf36 <tcc_init+0x17a>
		return status;
   2cf2e:	2333      	movs	r3, #51	; 0x33
   2cf30:	18fb      	adds	r3, r7, r3
   2cf32:	781b      	ldrb	r3, [r3, #0]
   2cf34:	e120      	b.n	2d178 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2cf36:	2333      	movs	r3, #51	; 0x33
   2cf38:	18fc      	adds	r4, r7, r3
   2cf3a:	2318      	movs	r3, #24
   2cf3c:	18fa      	adds	r2, r7, r3
   2cf3e:	6879      	ldr	r1, [r7, #4]
   2cf40:	233b      	movs	r3, #59	; 0x3b
   2cf42:	18fb      	adds	r3, r7, r3
   2cf44:	781b      	ldrb	r3, [r3, #0]
   2cf46:	0018      	movs	r0, r3
   2cf48:	4b6f      	ldr	r3, [pc, #444]	; (2d108 <tcc_init+0x34c>)
   2cf4a:	4798      	blx	r3
   2cf4c:	0003      	movs	r3, r0
   2cf4e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2cf50:	2333      	movs	r3, #51	; 0x33
   2cf52:	18fb      	adds	r3, r7, r3
   2cf54:	781b      	ldrb	r3, [r3, #0]
   2cf56:	2b00      	cmp	r3, #0
   2cf58:	d003      	beq.n	2cf62 <tcc_init+0x1a6>
		return status;
   2cf5a:	2333      	movs	r3, #51	; 0x33
   2cf5c:	18fb      	adds	r3, r7, r3
   2cf5e:	781b      	ldrb	r3, [r3, #0]
   2cf60:	e10a      	b.n	2d178 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2cf62:	2300      	movs	r3, #0
   2cf64:	63fb      	str	r3, [r7, #60]	; 0x3c
   2cf66:	e009      	b.n	2cf7c <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2cf68:	68fa      	ldr	r2, [r7, #12]
   2cf6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cf6c:	009b      	lsls	r3, r3, #2
   2cf6e:	18d3      	adds	r3, r2, r3
   2cf70:	3304      	adds	r3, #4
   2cf72:	2200      	movs	r2, #0
   2cf74:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2cf76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cf78:	3301      	adds	r3, #1
   2cf7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2cf7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cf7e:	2b0b      	cmp	r3, #11
   2cf80:	ddf2      	ble.n	2cf68 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2cf82:	68fb      	ldr	r3, [r7, #12]
   2cf84:	2200      	movs	r2, #0
   2cf86:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2cf88:	68fb      	ldr	r3, [r7, #12]
   2cf8a:	2200      	movs	r2, #0
   2cf8c:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2cf8e:	233b      	movs	r3, #59	; 0x3b
   2cf90:	18fb      	adds	r3, r7, r3
   2cf92:	781a      	ldrb	r2, [r3, #0]
   2cf94:	4b5d      	ldr	r3, [pc, #372]	; (2d10c <tcc_init+0x350>)
   2cf96:	0092      	lsls	r2, r2, #2
   2cf98:	68f9      	ldr	r1, [r7, #12]
   2cf9a:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2cf9c:	68fb      	ldr	r3, [r7, #12]
   2cf9e:	68ba      	ldr	r2, [r7, #8]
   2cfa0:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2cfa2:	687b      	ldr	r3, [r7, #4]
   2cfa4:	22a0      	movs	r2, #160	; 0xa0
   2cfa6:	5c99      	ldrb	r1, [r3, r2]
   2cfa8:	68fb      	ldr	r3, [r7, #12]
   2cfaa:	223c      	movs	r2, #60	; 0x3c
   2cfac:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2cfae:	2314      	movs	r3, #20
   2cfb0:	18fb      	adds	r3, r7, r3
   2cfb2:	0018      	movs	r0, r3
   2cfb4:	4b56      	ldr	r3, [pc, #344]	; (2d110 <tcc_init+0x354>)
   2cfb6:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2cfb8:	687b      	ldr	r3, [r7, #4]
   2cfba:	7a9a      	ldrb	r2, [r3, #10]
   2cfbc:	2314      	movs	r3, #20
   2cfbe:	18fb      	adds	r3, r7, r3
   2cfc0:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2cfc2:	233b      	movs	r3, #59	; 0x3b
   2cfc4:	18fb      	adds	r3, r7, r3
   2cfc6:	781b      	ldrb	r3, [r3, #0]
   2cfc8:	4a52      	ldr	r2, [pc, #328]	; (2d114 <tcc_init+0x358>)
   2cfca:	5cd3      	ldrb	r3, [r2, r3]
   2cfcc:	2214      	movs	r2, #20
   2cfce:	18ba      	adds	r2, r7, r2
   2cfd0:	0011      	movs	r1, r2
   2cfd2:	0018      	movs	r0, r3
   2cfd4:	4b50      	ldr	r3, [pc, #320]	; (2d118 <tcc_init+0x35c>)
   2cfd6:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2cfd8:	233b      	movs	r3, #59	; 0x3b
   2cfda:	18fb      	adds	r3, r7, r3
   2cfdc:	781b      	ldrb	r3, [r3, #0]
   2cfde:	4a4d      	ldr	r2, [pc, #308]	; (2d114 <tcc_init+0x358>)
   2cfe0:	5cd3      	ldrb	r3, [r2, r3]
   2cfe2:	0018      	movs	r0, r3
   2cfe4:	4b4d      	ldr	r3, [pc, #308]	; (2d11c <tcc_init+0x360>)
   2cfe6:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2cfe8:	2300      	movs	r3, #0
   2cfea:	63fb      	str	r3, [r7, #60]	; 0x3c
   2cfec:	e02d      	b.n	2d04a <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2cfee:	687a      	ldr	r2, [r7, #4]
   2cff0:	2198      	movs	r1, #152	; 0x98
   2cff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cff4:	18d3      	adds	r3, r2, r3
   2cff6:	185b      	adds	r3, r3, r1
   2cff8:	781b      	ldrb	r3, [r3, #0]
   2cffa:	2201      	movs	r2, #1
   2cffc:	4053      	eors	r3, r2
   2cffe:	b2db      	uxtb	r3, r3
   2d000:	2b00      	cmp	r3, #0
   2d002:	d11e      	bne.n	2d042 <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2d004:	2310      	movs	r3, #16
   2d006:	18fb      	adds	r3, r7, r3
   2d008:	0018      	movs	r0, r3
   2d00a:	4b45      	ldr	r3, [pc, #276]	; (2d120 <tcc_init+0x364>)
   2d00c:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2d00e:	687b      	ldr	r3, [r7, #4]
   2d010:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d012:	321e      	adds	r2, #30
   2d014:	0092      	lsls	r2, r2, #2
   2d016:	58d3      	ldr	r3, [r2, r3]
   2d018:	b2da      	uxtb	r2, r3
   2d01a:	2310      	movs	r3, #16
   2d01c:	18fb      	adds	r3, r7, r3
   2d01e:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2d020:	2310      	movs	r3, #16
   2d022:	18fb      	adds	r3, r7, r3
   2d024:	2201      	movs	r2, #1
   2d026:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2d028:	687b      	ldr	r3, [r7, #4]
   2d02a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d02c:	3216      	adds	r2, #22
   2d02e:	0092      	lsls	r2, r2, #2
   2d030:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2d032:	b2db      	uxtb	r3, r3
   2d034:	2210      	movs	r2, #16
   2d036:	18ba      	adds	r2, r7, r2
   2d038:	0011      	movs	r1, r2
   2d03a:	0018      	movs	r0, r3
   2d03c:	4b39      	ldr	r3, [pc, #228]	; (2d124 <tcc_init+0x368>)
   2d03e:	4798      	blx	r3
   2d040:	e000      	b.n	2d044 <tcc_init+0x288>
			continue;
   2d042:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2d044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d046:	3301      	adds	r3, #1
   2d048:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d04a:	233b      	movs	r3, #59	; 0x3b
   2d04c:	18fb      	adds	r3, r7, r3
   2d04e:	781b      	ldrb	r3, [r3, #0]
   2d050:	4a28      	ldr	r2, [pc, #160]	; (2d0f4 <tcc_init+0x338>)
   2d052:	5cd3      	ldrb	r3, [r2, r3]
   2d054:	001a      	movs	r2, r3
   2d056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d058:	429a      	cmp	r2, r3
   2d05a:	dcc8      	bgt.n	2cfee <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2d05c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2d05e:	68bb      	ldr	r3, [r7, #8]
   2d060:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2d062:	46c0      	nop			; (mov r8, r8)
   2d064:	68bb      	ldr	r3, [r7, #8]
   2d066:	689b      	ldr	r3, [r3, #8]
   2d068:	2204      	movs	r2, #4
   2d06a:	4013      	ands	r3, r2
   2d06c:	d1fa      	bne.n	2d064 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2d06e:	68bb      	ldr	r3, [r7, #8]
   2d070:	22ff      	movs	r2, #255	; 0xff
   2d072:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2d074:	46c0      	nop			; (mov r8, r8)
   2d076:	68bb      	ldr	r3, [r7, #8]
   2d078:	689b      	ldr	r3, [r3, #8]
   2d07a:	2204      	movs	r2, #4
   2d07c:	4013      	ands	r3, r2
   2d07e:	d1fa      	bne.n	2d076 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2d080:	232b      	movs	r3, #43	; 0x2b
   2d082:	18fb      	adds	r3, r7, r3
   2d084:	781a      	ldrb	r2, [r3, #0]
   2d086:	68bb      	ldr	r3, [r7, #8]
   2d088:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2d08a:	2320      	movs	r3, #32
   2d08c:	18fb      	adds	r3, r7, r3
   2d08e:	681a      	ldr	r2, [r3, #0]
   2d090:	68bb      	ldr	r3, [r7, #8]
   2d092:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2d094:	2320      	movs	r3, #32
   2d096:	18fb      	adds	r3, r7, r3
   2d098:	685a      	ldr	r2, [r3, #4]
   2d09a:	68bb      	ldr	r3, [r7, #8]
   2d09c:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2d09e:	69fa      	ldr	r2, [r7, #28]
   2d0a0:	68bb      	ldr	r3, [r7, #8]
   2d0a2:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2d0a4:	46c0      	nop			; (mov r8, r8)
   2d0a6:	68bb      	ldr	r3, [r7, #8]
   2d0a8:	689b      	ldr	r3, [r3, #8]
   2d0aa:	4a1f      	ldr	r2, [pc, #124]	; (2d128 <tcc_init+0x36c>)
   2d0ac:	4013      	ands	r3, r2
   2d0ae:	d1fa      	bne.n	2d0a6 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2d0b0:	69ba      	ldr	r2, [r7, #24]
   2d0b2:	68bb      	ldr	r3, [r7, #8]
   2d0b4:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2d0b6:	46c0      	nop			; (mov r8, r8)
   2d0b8:	68bb      	ldr	r3, [r7, #8]
   2d0ba:	689b      	ldr	r3, [r3, #8]
   2d0bc:	2210      	movs	r2, #16
   2d0be:	4013      	ands	r3, r2
   2d0c0:	d1fa      	bne.n	2d0b8 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2d0c2:	687b      	ldr	r3, [r7, #4]
   2d0c4:	681a      	ldr	r2, [r3, #0]
   2d0c6:	68bb      	ldr	r3, [r7, #8]
   2d0c8:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2d0ca:	46c0      	nop			; (mov r8, r8)
   2d0cc:	68bb      	ldr	r3, [r7, #8]
   2d0ce:	689b      	ldr	r3, [r3, #8]
   2d0d0:	4a16      	ldr	r2, [pc, #88]	; (2d12c <tcc_init+0x370>)
   2d0d2:	4013      	ands	r3, r2
   2d0d4:	d1fa      	bne.n	2d0cc <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2d0d6:	687b      	ldr	r3, [r7, #4]
   2d0d8:	685a      	ldr	r2, [r3, #4]
   2d0da:	68bb      	ldr	r3, [r7, #8]
   2d0dc:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2d0de:	2300      	movs	r3, #0
   2d0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d0e2:	e03f      	b.n	2d164 <tcc_init+0x3a8>
   2d0e4:	0002c725 	.word	0x0002c725
   2d0e8:	0003c838 	.word	0x0003c838
   2d0ec:	0002c6a1 	.word	0x0002c6a1
   2d0f0:	0003c844 	.word	0x0003c844
   2d0f4:	0003c854 	.word	0x0003c854
   2d0f8:	0002ca31 	.word	0x0002ca31
   2d0fc:	0002cad5 	.word	0x0002cad5
   2d100:	0002cb31 	.word	0x0002cb31
   2d104:	0002cc4d 	.word	0x0002cc4d
   2d108:	0002cd25 	.word	0x0002cd25
   2d10c:	20005a9c 	.word	0x20005a9c
   2d110:	0002c689 	.word	0x0002c689
   2d114:	0003c834 	.word	0x0003c834
   2d118:	0002c2a1 	.word	0x0002c2a1
   2d11c:	0002c2e5 	.word	0x0002c2e5
   2d120:	0002c6fd 	.word	0x0002c6fd
   2d124:	0002c601 	.word	0x0002c601
   2d128:	00020040 	.word	0x00020040
   2d12c:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2d130:	46c0      	nop			; (mov r8, r8)
   2d132:	68bb      	ldr	r3, [r7, #8]
   2d134:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2d136:	4912      	ldr	r1, [pc, #72]	; (2d180 <tcc_init+0x3c4>)
   2d138:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d13a:	4091      	lsls	r1, r2
   2d13c:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2d13e:	4013      	ands	r3, r2
   2d140:	d1f7      	bne.n	2d132 <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2d142:	687a      	ldr	r2, [r7, #4]
   2d144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d146:	3306      	adds	r3, #6
   2d148:	009b      	lsls	r3, r3, #2
   2d14a:	18d3      	adds	r3, r2, r3
   2d14c:	3304      	adds	r3, #4
   2d14e:	681a      	ldr	r2, [r3, #0]
   2d150:	68b9      	ldr	r1, [r7, #8]
   2d152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d154:	3310      	adds	r3, #16
   2d156:	009b      	lsls	r3, r3, #2
   2d158:	18cb      	adds	r3, r1, r3
   2d15a:	3304      	adds	r3, #4
   2d15c:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2d15e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d160:	3301      	adds	r3, #1
   2d162:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d164:	233b      	movs	r3, #59	; 0x3b
   2d166:	18fb      	adds	r3, r7, r3
   2d168:	781b      	ldrb	r3, [r3, #0]
   2d16a:	4a06      	ldr	r2, [pc, #24]	; (2d184 <tcc_init+0x3c8>)
   2d16c:	5cd3      	ldrb	r3, [r2, r3]
   2d16e:	001a      	movs	r2, r3
   2d170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d172:	429a      	cmp	r2, r3
   2d174:	dcdc      	bgt.n	2d130 <tcc_init+0x374>
	}

	return STATUS_OK;
   2d176:	2300      	movs	r3, #0
}
   2d178:	0018      	movs	r0, r3
   2d17a:	46bd      	mov	sp, r7
   2d17c:	b011      	add	sp, #68	; 0x44
   2d17e:	bd90      	pop	{r4, r7, pc}
   2d180:	00080100 	.word	0x00080100
   2d184:	0003c850 	.word	0x0003c850

0002d188 <system_interrupt_enable>:
{
   2d188:	b580      	push	{r7, lr}
   2d18a:	b082      	sub	sp, #8
   2d18c:	af00      	add	r7, sp, #0
   2d18e:	0002      	movs	r2, r0
   2d190:	1dfb      	adds	r3, r7, #7
   2d192:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2d194:	4b06      	ldr	r3, [pc, #24]	; (2d1b0 <system_interrupt_enable+0x28>)
   2d196:	1dfa      	adds	r2, r7, #7
   2d198:	7812      	ldrb	r2, [r2, #0]
   2d19a:	0011      	movs	r1, r2
   2d19c:	221f      	movs	r2, #31
   2d19e:	400a      	ands	r2, r1
   2d1a0:	2101      	movs	r1, #1
   2d1a2:	4091      	lsls	r1, r2
   2d1a4:	000a      	movs	r2, r1
   2d1a6:	601a      	str	r2, [r3, #0]
}
   2d1a8:	46c0      	nop			; (mov r8, r8)
   2d1aa:	46bd      	mov	sp, r7
   2d1ac:	b002      	add	sp, #8
   2d1ae:	bd80      	pop	{r7, pc}
   2d1b0:	e000e100 	.word	0xe000e100

0002d1b4 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2d1b4:	b580      	push	{r7, lr}
   2d1b6:	b082      	sub	sp, #8
   2d1b8:	af00      	add	r7, sp, #0
   2d1ba:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2d1bc:	4a04      	ldr	r2, [pc, #16]	; (2d1d0 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2d1be:	687b      	ldr	r3, [r7, #4]
   2d1c0:	18d3      	adds	r3, r2, r3
   2d1c2:	781b      	ldrb	r3, [r3, #0]
   2d1c4:	b25b      	sxtb	r3, r3
}
   2d1c6:	0018      	movs	r0, r3
   2d1c8:	46bd      	mov	sp, r7
   2d1ca:	b002      	add	sp, #8
   2d1cc:	bd80      	pop	{r7, pc}
   2d1ce:	46c0      	nop			; (mov r8, r8)
   2d1d0:	20000130 	.word	0x20000130

0002d1d4 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2d1d4:	b580      	push	{r7, lr}
   2d1d6:	b084      	sub	sp, #16
   2d1d8:	af00      	add	r7, sp, #0
   2d1da:	60f8      	str	r0, [r7, #12]
   2d1dc:	60b9      	str	r1, [r7, #8]
   2d1de:	1dfb      	adds	r3, r7, #7
   2d1e0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2d1e2:	1dfb      	adds	r3, r7, #7
   2d1e4:	781b      	ldrb	r3, [r3, #0]
   2d1e6:	68fa      	ldr	r2, [r7, #12]
   2d1e8:	009b      	lsls	r3, r3, #2
   2d1ea:	18d3      	adds	r3, r2, r3
   2d1ec:	3304      	adds	r3, #4
   2d1ee:	68ba      	ldr	r2, [r7, #8]
   2d1f0:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2d1f2:	68fb      	ldr	r3, [r7, #12]
   2d1f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2d1f6:	1dfb      	adds	r3, r7, #7
   2d1f8:	7819      	ldrb	r1, [r3, #0]
   2d1fa:	4b05      	ldr	r3, [pc, #20]	; (2d210 <tcc_register_callback+0x3c>)
   2d1fc:	0089      	lsls	r1, r1, #2
   2d1fe:	58cb      	ldr	r3, [r1, r3]
   2d200:	431a      	orrs	r2, r3
   2d202:	68fb      	ldr	r3, [r7, #12]
   2d204:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2d206:	2300      	movs	r3, #0
}
   2d208:	0018      	movs	r0, r3
   2d20a:	46bd      	mov	sp, r7
   2d20c:	b004      	add	sp, #16
   2d20e:	bd80      	pop	{r7, pc}
   2d210:	0003c858 	.word	0x0003c858

0002d214 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2d214:	b580      	push	{r7, lr}
   2d216:	b082      	sub	sp, #8
   2d218:	af00      	add	r7, sp, #0
   2d21a:	6078      	str	r0, [r7, #4]
   2d21c:	000a      	movs	r2, r1
   2d21e:	1cfb      	adds	r3, r7, #3
   2d220:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2d222:	687b      	ldr	r3, [r7, #4]
   2d224:	681b      	ldr	r3, [r3, #0]
   2d226:	0018      	movs	r0, r3
   2d228:	4b0f      	ldr	r3, [pc, #60]	; (2d268 <tcc_enable_callback+0x54>)
   2d22a:	4798      	blx	r3
   2d22c:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2d22e:	0018      	movs	r0, r3
   2d230:	4b0e      	ldr	r3, [pc, #56]	; (2d26c <tcc_enable_callback+0x58>)
   2d232:	4798      	blx	r3
   2d234:	0003      	movs	r3, r0
   2d236:	0018      	movs	r0, r3
   2d238:	4b0d      	ldr	r3, [pc, #52]	; (2d270 <tcc_enable_callback+0x5c>)
   2d23a:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2d23c:	687b      	ldr	r3, [r7, #4]
   2d23e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2d240:	1cfb      	adds	r3, r7, #3
   2d242:	7819      	ldrb	r1, [r3, #0]
   2d244:	4b0b      	ldr	r3, [pc, #44]	; (2d274 <tcc_enable_callback+0x60>)
   2d246:	0089      	lsls	r1, r1, #2
   2d248:	58cb      	ldr	r3, [r1, r3]
   2d24a:	431a      	orrs	r2, r3
   2d24c:	687b      	ldr	r3, [r7, #4]
   2d24e:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2d250:	687b      	ldr	r3, [r7, #4]
   2d252:	681b      	ldr	r3, [r3, #0]
   2d254:	1cfa      	adds	r2, r7, #3
   2d256:	7811      	ldrb	r1, [r2, #0]
   2d258:	4a06      	ldr	r2, [pc, #24]	; (2d274 <tcc_enable_callback+0x60>)
   2d25a:	0089      	lsls	r1, r1, #2
   2d25c:	588a      	ldr	r2, [r1, r2]
   2d25e:	629a      	str	r2, [r3, #40]	; 0x28
}
   2d260:	46c0      	nop			; (mov r8, r8)
   2d262:	46bd      	mov	sp, r7
   2d264:	b002      	add	sp, #8
   2d266:	bd80      	pop	{r7, pc}
   2d268:	0002c725 	.word	0x0002c725
   2d26c:	0002d1b5 	.word	0x0002d1b5
   2d270:	0002d189 	.word	0x0002d189
   2d274:	0003c858 	.word	0x0003c858

0002d278 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2d278:	b580      	push	{r7, lr}
   2d27a:	af00      	add	r7, sp, #0
   2d27c:	2000      	movs	r0, #0
   2d27e:	4b02      	ldr	r3, [pc, #8]	; (2d288 <TCC0_Handler+0x10>)
   2d280:	4798      	blx	r3
   2d282:	46c0      	nop			; (mov r8, r8)
   2d284:	46bd      	mov	sp, r7
   2d286:	bd80      	pop	{r7, pc}
   2d288:	0002d2b5 	.word	0x0002d2b5

0002d28c <TCC1_Handler>:
   2d28c:	b580      	push	{r7, lr}
   2d28e:	af00      	add	r7, sp, #0
   2d290:	2001      	movs	r0, #1
   2d292:	4b02      	ldr	r3, [pc, #8]	; (2d29c <TCC1_Handler+0x10>)
   2d294:	4798      	blx	r3
   2d296:	46c0      	nop			; (mov r8, r8)
   2d298:	46bd      	mov	sp, r7
   2d29a:	bd80      	pop	{r7, pc}
   2d29c:	0002d2b5 	.word	0x0002d2b5

0002d2a0 <TCC2_Handler>:
   2d2a0:	b580      	push	{r7, lr}
   2d2a2:	af00      	add	r7, sp, #0
   2d2a4:	2002      	movs	r0, #2
   2d2a6:	4b02      	ldr	r3, [pc, #8]	; (2d2b0 <TCC2_Handler+0x10>)
   2d2a8:	4798      	blx	r3
   2d2aa:	46c0      	nop			; (mov r8, r8)
   2d2ac:	46bd      	mov	sp, r7
   2d2ae:	bd80      	pop	{r7, pc}
   2d2b0:	0002d2b5 	.word	0x0002d2b5

0002d2b4 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2d2b4:	b580      	push	{r7, lr}
   2d2b6:	b086      	sub	sp, #24
   2d2b8:	af00      	add	r7, sp, #0
   2d2ba:	0002      	movs	r2, r0
   2d2bc:	1dfb      	adds	r3, r7, #7
   2d2be:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2d2c0:	1dfb      	adds	r3, r7, #7
   2d2c2:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2d2c4:	4b18      	ldr	r3, [pc, #96]	; (2d328 <_tcc_interrupt_handler+0x74>)
   2d2c6:	0092      	lsls	r2, r2, #2
   2d2c8:	58d3      	ldr	r3, [r2, r3]
   2d2ca:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2d2cc:	693b      	ldr	r3, [r7, #16]
   2d2ce:	681b      	ldr	r3, [r3, #0]
   2d2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2d2d2:	693b      	ldr	r3, [r7, #16]
   2d2d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2d2d6:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2d2d8:	693b      	ldr	r3, [r7, #16]
   2d2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2d2dc:	4013      	ands	r3, r2
   2d2de:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2d2e0:	2300      	movs	r3, #0
   2d2e2:	617b      	str	r3, [r7, #20]
   2d2e4:	e019      	b.n	2d31a <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2d2e6:	4b11      	ldr	r3, [pc, #68]	; (2d32c <_tcc_interrupt_handler+0x78>)
   2d2e8:	697a      	ldr	r2, [r7, #20]
   2d2ea:	0092      	lsls	r2, r2, #2
   2d2ec:	58d3      	ldr	r3, [r2, r3]
   2d2ee:	68fa      	ldr	r2, [r7, #12]
   2d2f0:	4013      	ands	r3, r2
   2d2f2:	d00f      	beq.n	2d314 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2d2f4:	693a      	ldr	r2, [r7, #16]
   2d2f6:	697b      	ldr	r3, [r7, #20]
   2d2f8:	009b      	lsls	r3, r3, #2
   2d2fa:	18d3      	adds	r3, r2, r3
   2d2fc:	3304      	adds	r3, #4
   2d2fe:	681b      	ldr	r3, [r3, #0]
   2d300:	693a      	ldr	r2, [r7, #16]
   2d302:	0010      	movs	r0, r2
   2d304:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2d306:	693b      	ldr	r3, [r7, #16]
   2d308:	681b      	ldr	r3, [r3, #0]
   2d30a:	4a08      	ldr	r2, [pc, #32]	; (2d32c <_tcc_interrupt_handler+0x78>)
   2d30c:	6979      	ldr	r1, [r7, #20]
   2d30e:	0089      	lsls	r1, r1, #2
   2d310:	588a      	ldr	r2, [r1, r2]
   2d312:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2d314:	697b      	ldr	r3, [r7, #20]
   2d316:	3301      	adds	r3, #1
   2d318:	617b      	str	r3, [r7, #20]
   2d31a:	697b      	ldr	r3, [r7, #20]
   2d31c:	2b0b      	cmp	r3, #11
   2d31e:	dde2      	ble.n	2d2e6 <_tcc_interrupt_handler+0x32>
		}
	}
}
   2d320:	46c0      	nop			; (mov r8, r8)
   2d322:	46bd      	mov	sp, r7
   2d324:	b006      	add	sp, #24
   2d326:	bd80      	pop	{r7, pc}
   2d328:	20005a9c 	.word	0x20005a9c
   2d32c:	0003c858 	.word	0x0003c858

0002d330 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2d330:	b580      	push	{r7, lr}
   2d332:	b082      	sub	sp, #8
   2d334:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2d336:	4b2f      	ldr	r3, [pc, #188]	; (2d3f4 <Reset_Handler+0xc4>)
   2d338:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2d33a:	4b2f      	ldr	r3, [pc, #188]	; (2d3f8 <Reset_Handler+0xc8>)
   2d33c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2d33e:	687a      	ldr	r2, [r7, #4]
   2d340:	683b      	ldr	r3, [r7, #0]
   2d342:	429a      	cmp	r2, r3
   2d344:	d00c      	beq.n	2d360 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2d346:	e007      	b.n	2d358 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2d348:	683b      	ldr	r3, [r7, #0]
   2d34a:	1d1a      	adds	r2, r3, #4
   2d34c:	603a      	str	r2, [r7, #0]
   2d34e:	687a      	ldr	r2, [r7, #4]
   2d350:	1d11      	adds	r1, r2, #4
   2d352:	6079      	str	r1, [r7, #4]
   2d354:	6812      	ldr	r2, [r2, #0]
   2d356:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2d358:	683a      	ldr	r2, [r7, #0]
   2d35a:	4b28      	ldr	r3, [pc, #160]	; (2d3fc <Reset_Handler+0xcc>)
   2d35c:	429a      	cmp	r2, r3
   2d35e:	d3f3      	bcc.n	2d348 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2d360:	4b27      	ldr	r3, [pc, #156]	; (2d400 <Reset_Handler+0xd0>)
   2d362:	603b      	str	r3, [r7, #0]
   2d364:	e004      	b.n	2d370 <Reset_Handler+0x40>
                *pDest++ = 0;
   2d366:	683b      	ldr	r3, [r7, #0]
   2d368:	1d1a      	adds	r2, r3, #4
   2d36a:	603a      	str	r2, [r7, #0]
   2d36c:	2200      	movs	r2, #0
   2d36e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2d370:	683a      	ldr	r2, [r7, #0]
   2d372:	4b24      	ldr	r3, [pc, #144]	; (2d404 <Reset_Handler+0xd4>)
   2d374:	429a      	cmp	r2, r3
   2d376:	d3f6      	bcc.n	2d366 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2d378:	4b23      	ldr	r3, [pc, #140]	; (2d408 <Reset_Handler+0xd8>)
   2d37a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2d37c:	4b23      	ldr	r3, [pc, #140]	; (2d40c <Reset_Handler+0xdc>)
   2d37e:	687a      	ldr	r2, [r7, #4]
   2d380:	21ff      	movs	r1, #255	; 0xff
   2d382:	438a      	bics	r2, r1
   2d384:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2d386:	4a22      	ldr	r2, [pc, #136]	; (2d410 <Reset_Handler+0xe0>)
   2d388:	2390      	movs	r3, #144	; 0x90
   2d38a:	005b      	lsls	r3, r3, #1
   2d38c:	2102      	movs	r1, #2
   2d38e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2d390:	4a20      	ldr	r2, [pc, #128]	; (2d414 <Reset_Handler+0xe4>)
   2d392:	78d3      	ldrb	r3, [r2, #3]
   2d394:	2103      	movs	r1, #3
   2d396:	438b      	bics	r3, r1
   2d398:	1c19      	adds	r1, r3, #0
   2d39a:	2302      	movs	r3, #2
   2d39c:	430b      	orrs	r3, r1
   2d39e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2d3a0:	4a1c      	ldr	r2, [pc, #112]	; (2d414 <Reset_Handler+0xe4>)
   2d3a2:	78d3      	ldrb	r3, [r2, #3]
   2d3a4:	210c      	movs	r1, #12
   2d3a6:	438b      	bics	r3, r1
   2d3a8:	1c19      	adds	r1, r3, #0
   2d3aa:	2308      	movs	r3, #8
   2d3ac:	430b      	orrs	r3, r1
   2d3ae:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2d3b0:	4a19      	ldr	r2, [pc, #100]	; (2d418 <Reset_Handler+0xe8>)
   2d3b2:	7b93      	ldrb	r3, [r2, #14]
   2d3b4:	2130      	movs	r1, #48	; 0x30
   2d3b6:	438b      	bics	r3, r1
   2d3b8:	1c19      	adds	r1, r3, #0
   2d3ba:	2320      	movs	r3, #32
   2d3bc:	430b      	orrs	r3, r1
   2d3be:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2d3c0:	4a15      	ldr	r2, [pc, #84]	; (2d418 <Reset_Handler+0xe8>)
   2d3c2:	7b93      	ldrb	r3, [r2, #14]
   2d3c4:	210c      	movs	r1, #12
   2d3c6:	438b      	bics	r3, r1
   2d3c8:	1c19      	adds	r1, r3, #0
   2d3ca:	2308      	movs	r3, #8
   2d3cc:	430b      	orrs	r3, r1
   2d3ce:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2d3d0:	4a11      	ldr	r2, [pc, #68]	; (2d418 <Reset_Handler+0xe8>)
   2d3d2:	7b93      	ldrb	r3, [r2, #14]
   2d3d4:	2103      	movs	r1, #3
   2d3d6:	438b      	bics	r3, r1
   2d3d8:	1c19      	adds	r1, r3, #0
   2d3da:	2302      	movs	r3, #2
   2d3dc:	430b      	orrs	r3, r1
   2d3de:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2d3e0:	4a0e      	ldr	r2, [pc, #56]	; (2d41c <Reset_Handler+0xec>)
   2d3e2:	6853      	ldr	r3, [r2, #4]
   2d3e4:	2180      	movs	r1, #128	; 0x80
   2d3e6:	430b      	orrs	r3, r1
   2d3e8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2d3ea:	4b0d      	ldr	r3, [pc, #52]	; (2d420 <Reset_Handler+0xf0>)
   2d3ec:	4798      	blx	r3

        /* Branch to main function */
        main();
   2d3ee:	4b0d      	ldr	r3, [pc, #52]	; (2d424 <Reset_Handler+0xf4>)
   2d3f0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2d3f2:	e7fe      	b.n	2d3f2 <Reset_Handler+0xc2>
   2d3f4:	0003d660 	.word	0x0003d660
   2d3f8:	20000000 	.word	0x20000000
   2d3fc:	20000308 	.word	0x20000308
   2d400:	20000310 	.word	0x20000310
   2d404:	20005b0c 	.word	0x20005b0c
   2d408:	00012000 	.word	0x00012000
   2d40c:	e000ed00 	.word	0xe000ed00
   2d410:	41007000 	.word	0x41007000
   2d414:	41005000 	.word	0x41005000
   2d418:	41004800 	.word	0x41004800
   2d41c:	41004000 	.word	0x41004000
   2d420:	000378a5 	.word	0x000378a5
   2d424:	00034b65 	.word	0x00034b65

0002d428 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2d428:	b580      	push	{r7, lr}
   2d42a:	af00      	add	r7, sp, #0
  __asm volatile (
   2d42c:	2004      	movs	r0, #4
   2d42e:	4671      	mov	r1, lr
   2d430:	4208      	tst	r0, r1
   2d432:	d002      	beq.n	2d43a <_MSP>
   2d434:	f3ef 8009 	mrs	r0, PSP
   2d438:	e001      	b.n	2d43e <_HALT>

0002d43a <_MSP>:
   2d43a:	f3ef 8008 	mrs	r0, MSP

0002d43e <_HALT>:
   2d43e:	6941      	ldr	r1, [r0, #20]
   2d440:	e004      	b.n	2d44c <HardFault_HandlerC>
   2d442:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2d444:	46c0      	nop			; (mov r8, r8)
   2d446:	46bd      	mov	sp, r7
   2d448:	bd80      	pop	{r7, pc}
	...

0002d44c <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2d44c:	b580      	push	{r7, lr}
   2d44e:	b090      	sub	sp, #64	; 0x40
   2d450:	af00      	add	r7, sp, #0
   2d452:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2d454:	687b      	ldr	r3, [r7, #4]
   2d456:	681b      	ldr	r3, [r3, #0]
   2d458:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2d45a:	687b      	ldr	r3, [r7, #4]
   2d45c:	685b      	ldr	r3, [r3, #4]
   2d45e:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2d460:	687b      	ldr	r3, [r7, #4]
   2d462:	689b      	ldr	r3, [r3, #8]
   2d464:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2d466:	687b      	ldr	r3, [r7, #4]
   2d468:	68db      	ldr	r3, [r3, #12]
   2d46a:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2d46c:	687b      	ldr	r3, [r7, #4]
   2d46e:	691b      	ldr	r3, [r3, #16]
   2d470:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2d472:	687b      	ldr	r3, [r7, #4]
   2d474:	695b      	ldr	r3, [r3, #20]
   2d476:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2d478:	687b      	ldr	r3, [r7, #4]
   2d47a:	699b      	ldr	r3, [r3, #24]
   2d47c:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2d47e:	687b      	ldr	r3, [r7, #4]
   2d480:	69db      	ldr	r3, [r3, #28]
   2d482:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2d484:	4b0b      	ldr	r3, [pc, #44]	; (2d4b4 <HardFault_HandlerC+0x68>)
   2d486:	681b      	ldr	r3, [r3, #0]
   2d488:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2d48a:	4b0b      	ldr	r3, [pc, #44]	; (2d4b8 <HardFault_HandlerC+0x6c>)
   2d48c:	681b      	ldr	r3, [r3, #0]
   2d48e:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2d490:	4b0a      	ldr	r3, [pc, #40]	; (2d4bc <HardFault_HandlerC+0x70>)
   2d492:	681b      	ldr	r3, [r3, #0]
   2d494:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2d496:	4b0a      	ldr	r3, [pc, #40]	; (2d4c0 <HardFault_HandlerC+0x74>)
   2d498:	681b      	ldr	r3, [r3, #0]
   2d49a:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2d49c:	4b09      	ldr	r3, [pc, #36]	; (2d4c4 <HardFault_HandlerC+0x78>)
   2d49e:	681b      	ldr	r3, [r3, #0]
   2d4a0:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2d4a2:	4b09      	ldr	r3, [pc, #36]	; (2d4c8 <HardFault_HandlerC+0x7c>)
   2d4a4:	681b      	ldr	r3, [r3, #0]
   2d4a6:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2d4a8:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2d4aa:	46c0      	nop			; (mov r8, r8)
   2d4ac:	46bd      	mov	sp, r7
   2d4ae:	b010      	add	sp, #64	; 0x40
   2d4b0:	bd80      	pop	{r7, pc}
   2d4b2:	46c0      	nop			; (mov r8, r8)
   2d4b4:	e000ed28 	.word	0xe000ed28
   2d4b8:	e000ed2c 	.word	0xe000ed2c
   2d4bc:	e000ed30 	.word	0xe000ed30
   2d4c0:	e000ed3c 	.word	0xe000ed3c
   2d4c4:	e000ed34 	.word	0xe000ed34
   2d4c8:	e000ed38 	.word	0xe000ed38

0002d4cc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2d4cc:	b580      	push	{r7, lr}
   2d4ce:	b086      	sub	sp, #24
   2d4d0:	af00      	add	r7, sp, #0
   2d4d2:	60f8      	str	r0, [r7, #12]
   2d4d4:	60b9      	str	r1, [r7, #8]
   2d4d6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2d4d8:	2300      	movs	r3, #0
   2d4da:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2d4dc:	68fb      	ldr	r3, [r7, #12]
   2d4de:	2b00      	cmp	r3, #0
   2d4e0:	d012      	beq.n	2d508 <_read+0x3c>
		return -1;
   2d4e2:	2301      	movs	r3, #1
   2d4e4:	425b      	negs	r3, r3
   2d4e6:	e013      	b.n	2d510 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2d4e8:	4b0b      	ldr	r3, [pc, #44]	; (2d518 <_read+0x4c>)
   2d4ea:	681a      	ldr	r2, [r3, #0]
   2d4ec:	4b0b      	ldr	r3, [pc, #44]	; (2d51c <_read+0x50>)
   2d4ee:	681b      	ldr	r3, [r3, #0]
   2d4f0:	68b9      	ldr	r1, [r7, #8]
   2d4f2:	0018      	movs	r0, r3
   2d4f4:	4790      	blx	r2
		ptr++;
   2d4f6:	68bb      	ldr	r3, [r7, #8]
   2d4f8:	3301      	adds	r3, #1
   2d4fa:	60bb      	str	r3, [r7, #8]
		nChars++;
   2d4fc:	697b      	ldr	r3, [r7, #20]
   2d4fe:	3301      	adds	r3, #1
   2d500:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2d502:	687b      	ldr	r3, [r7, #4]
   2d504:	3b01      	subs	r3, #1
   2d506:	607b      	str	r3, [r7, #4]
   2d508:	687b      	ldr	r3, [r7, #4]
   2d50a:	2b00      	cmp	r3, #0
   2d50c:	dcec      	bgt.n	2d4e8 <_read+0x1c>
	}
	return nChars;
   2d50e:	697b      	ldr	r3, [r7, #20]
}
   2d510:	0018      	movs	r0, r3
   2d512:	46bd      	mov	sp, r7
   2d514:	b006      	add	sp, #24
   2d516:	bd80      	pop	{r7, pc}
   2d518:	20005aa8 	.word	0x20005aa8
   2d51c:	20005ab0 	.word	0x20005ab0

0002d520 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2d520:	b580      	push	{r7, lr}
   2d522:	b086      	sub	sp, #24
   2d524:	af00      	add	r7, sp, #0
   2d526:	60f8      	str	r0, [r7, #12]
   2d528:	60b9      	str	r1, [r7, #8]
   2d52a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2d52c:	2300      	movs	r3, #0
   2d52e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2d530:	68fb      	ldr	r3, [r7, #12]
   2d532:	2b01      	cmp	r3, #1
   2d534:	d01d      	beq.n	2d572 <_write+0x52>
   2d536:	68fb      	ldr	r3, [r7, #12]
   2d538:	2b02      	cmp	r3, #2
   2d53a:	d01a      	beq.n	2d572 <_write+0x52>
   2d53c:	68fb      	ldr	r3, [r7, #12]
   2d53e:	2b03      	cmp	r3, #3
   2d540:	d017      	beq.n	2d572 <_write+0x52>
		return -1;
   2d542:	2301      	movs	r3, #1
   2d544:	425b      	negs	r3, r3
   2d546:	e018      	b.n	2d57a <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2d548:	4b0e      	ldr	r3, [pc, #56]	; (2d584 <_write+0x64>)
   2d54a:	681a      	ldr	r2, [r3, #0]
   2d54c:	4b0e      	ldr	r3, [pc, #56]	; (2d588 <_write+0x68>)
   2d54e:	6818      	ldr	r0, [r3, #0]
   2d550:	68bb      	ldr	r3, [r7, #8]
   2d552:	1c59      	adds	r1, r3, #1
   2d554:	60b9      	str	r1, [r7, #8]
   2d556:	781b      	ldrb	r3, [r3, #0]
   2d558:	0019      	movs	r1, r3
   2d55a:	4790      	blx	r2
   2d55c:	1e03      	subs	r3, r0, #0
   2d55e:	da02      	bge.n	2d566 <_write+0x46>
			return -1;
   2d560:	2301      	movs	r3, #1
   2d562:	425b      	negs	r3, r3
   2d564:	e009      	b.n	2d57a <_write+0x5a>
		}
		++nChars;
   2d566:	697b      	ldr	r3, [r7, #20]
   2d568:	3301      	adds	r3, #1
   2d56a:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2d56c:	687b      	ldr	r3, [r7, #4]
   2d56e:	3b01      	subs	r3, #1
   2d570:	607b      	str	r3, [r7, #4]
   2d572:	687b      	ldr	r3, [r7, #4]
   2d574:	2b00      	cmp	r3, #0
   2d576:	d1e7      	bne.n	2d548 <_write+0x28>
	}
	return nChars;
   2d578:	697b      	ldr	r3, [r7, #20]
}
   2d57a:	0018      	movs	r0, r3
   2d57c:	46bd      	mov	sp, r7
   2d57e:	b006      	add	sp, #24
   2d580:	bd80      	pop	{r7, pc}
   2d582:	46c0      	nop			; (mov r8, r8)
   2d584:	20005aac 	.word	0x20005aac
   2d588:	20005ab0 	.word	0x20005ab0

0002d58c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2d58c:	b580      	push	{r7, lr}
   2d58e:	b084      	sub	sp, #16
   2d590:	af00      	add	r7, sp, #0
   2d592:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2d594:	4b0a      	ldr	r3, [pc, #40]	; (2d5c0 <_sbrk+0x34>)
   2d596:	681b      	ldr	r3, [r3, #0]
   2d598:	2b00      	cmp	r3, #0
   2d59a:	d102      	bne.n	2d5a2 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2d59c:	4b08      	ldr	r3, [pc, #32]	; (2d5c0 <_sbrk+0x34>)
   2d59e:	4a09      	ldr	r2, [pc, #36]	; (2d5c4 <_sbrk+0x38>)
   2d5a0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2d5a2:	4b07      	ldr	r3, [pc, #28]	; (2d5c0 <_sbrk+0x34>)
   2d5a4:	681b      	ldr	r3, [r3, #0]
   2d5a6:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2d5a8:	4b05      	ldr	r3, [pc, #20]	; (2d5c0 <_sbrk+0x34>)
   2d5aa:	681a      	ldr	r2, [r3, #0]
   2d5ac:	687b      	ldr	r3, [r7, #4]
   2d5ae:	18d2      	adds	r2, r2, r3
   2d5b0:	4b03      	ldr	r3, [pc, #12]	; (2d5c0 <_sbrk+0x34>)
   2d5b2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2d5b4:	68fb      	ldr	r3, [r7, #12]
}
   2d5b6:	0018      	movs	r0, r3
   2d5b8:	46bd      	mov	sp, r7
   2d5ba:	b004      	add	sp, #16
   2d5bc:	bd80      	pop	{r7, pc}
   2d5be:	46c0      	nop			; (mov r8, r8)
   2d5c0:	20004168 	.word	0x20004168
   2d5c4:	20007b10 	.word	0x20007b10

0002d5c8 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2d5c8:	b580      	push	{r7, lr}
   2d5ca:	b082      	sub	sp, #8
   2d5cc:	af00      	add	r7, sp, #0
   2d5ce:	6078      	str	r0, [r7, #4]
	return -1;
   2d5d0:	2301      	movs	r3, #1
   2d5d2:	425b      	negs	r3, r3
}
   2d5d4:	0018      	movs	r0, r3
   2d5d6:	46bd      	mov	sp, r7
   2d5d8:	b002      	add	sp, #8
   2d5da:	bd80      	pop	{r7, pc}

0002d5dc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2d5dc:	b580      	push	{r7, lr}
   2d5de:	b082      	sub	sp, #8
   2d5e0:	af00      	add	r7, sp, #0
   2d5e2:	6078      	str	r0, [r7, #4]
   2d5e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2d5e6:	683b      	ldr	r3, [r7, #0]
   2d5e8:	2280      	movs	r2, #128	; 0x80
   2d5ea:	0192      	lsls	r2, r2, #6
   2d5ec:	605a      	str	r2, [r3, #4]

	return 0;
   2d5ee:	2300      	movs	r3, #0
}
   2d5f0:	0018      	movs	r0, r3
   2d5f2:	46bd      	mov	sp, r7
   2d5f4:	b002      	add	sp, #8
   2d5f6:	bd80      	pop	{r7, pc}

0002d5f8 <_isatty>:

extern int _isatty(int file)
{
   2d5f8:	b580      	push	{r7, lr}
   2d5fa:	b082      	sub	sp, #8
   2d5fc:	af00      	add	r7, sp, #0
   2d5fe:	6078      	str	r0, [r7, #4]
	return 1;
   2d600:	2301      	movs	r3, #1
}
   2d602:	0018      	movs	r0, r3
   2d604:	46bd      	mov	sp, r7
   2d606:	b002      	add	sp, #8
   2d608:	bd80      	pop	{r7, pc}

0002d60a <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2d60a:	b580      	push	{r7, lr}
   2d60c:	b084      	sub	sp, #16
   2d60e:	af00      	add	r7, sp, #0
   2d610:	60f8      	str	r0, [r7, #12]
   2d612:	60b9      	str	r1, [r7, #8]
   2d614:	607a      	str	r2, [r7, #4]
	return 0;
   2d616:	2300      	movs	r3, #0
}
   2d618:	0018      	movs	r0, r3
   2d61a:	46bd      	mov	sp, r7
   2d61c:	b004      	add	sp, #16
   2d61e:	bd80      	pop	{r7, pc}

0002d620 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2d620:	b580      	push	{r7, lr}
   2d622:	b082      	sub	sp, #8
   2d624:	af00      	add	r7, sp, #0
   2d626:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2d628:	687b      	ldr	r3, [r7, #4]
   2d62a:	2200      	movs	r2, #0
   2d62c:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2d62e:	687b      	ldr	r3, [r7, #4]
   2d630:	2200      	movs	r2, #0
   2d632:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2d634:	687b      	ldr	r3, [r7, #4]
   2d636:	2200      	movs	r2, #0
   2d638:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2d63a:	687b      	ldr	r3, [r7, #4]
   2d63c:	2200      	movs	r2, #0
   2d63e:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2d640:	687b      	ldr	r3, [r7, #4]
   2d642:	2201      	movs	r2, #1
   2d644:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2d646:	687b      	ldr	r3, [r7, #4]
   2d648:	2201      	movs	r2, #1
   2d64a:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2d64c:	687b      	ldr	r3, [r7, #4]
   2d64e:	22fa      	movs	r2, #250	; 0xfa
   2d650:	00d2      	lsls	r2, r2, #3
   2d652:	80da      	strh	r2, [r3, #6]
}
   2d654:	46c0      	nop			; (mov r8, r8)
   2d656:	46bd      	mov	sp, r7
   2d658:	b002      	add	sp, #8
   2d65a:	bd80      	pop	{r7, pc}

0002d65c <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2d65c:	b580      	push	{r7, lr}
   2d65e:	b086      	sub	sp, #24
   2d660:	af00      	add	r7, sp, #0
   2d662:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2d664:	230c      	movs	r3, #12
   2d666:	18fb      	adds	r3, r7, r3
   2d668:	0018      	movs	r0, r3
   2d66a:	4b23      	ldr	r3, [pc, #140]	; (2d6f8 <rtc_calendar_get_config_defaults+0x9c>)
   2d66c:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2d66e:	687b      	ldr	r3, [r7, #4]
   2d670:	22a0      	movs	r2, #160	; 0xa0
   2d672:	0112      	lsls	r2, r2, #4
   2d674:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2d676:	687b      	ldr	r3, [r7, #4]
   2d678:	2200      	movs	r2, #0
   2d67a:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2d67c:	687b      	ldr	r3, [r7, #4]
   2d67e:	2200      	movs	r2, #0
   2d680:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2d682:	687b      	ldr	r3, [r7, #4]
   2d684:	2200      	movs	r2, #0
   2d686:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2d688:	687b      	ldr	r3, [r7, #4]
   2d68a:	22fa      	movs	r2, #250	; 0xfa
   2d68c:	00d2      	lsls	r2, r2, #3
   2d68e:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2d690:	2317      	movs	r3, #23
   2d692:	18fb      	adds	r3, r7, r3
   2d694:	2200      	movs	r2, #0
   2d696:	701a      	strb	r2, [r3, #0]
   2d698:	e025      	b.n	2d6e6 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2d69a:	2317      	movs	r3, #23
   2d69c:	18fb      	adds	r3, r7, r3
   2d69e:	781a      	ldrb	r2, [r3, #0]
   2d6a0:	6879      	ldr	r1, [r7, #4]
   2d6a2:	2008      	movs	r0, #8
   2d6a4:	0013      	movs	r3, r2
   2d6a6:	009b      	lsls	r3, r3, #2
   2d6a8:	189b      	adds	r3, r3, r2
   2d6aa:	005b      	lsls	r3, r3, #1
   2d6ac:	18cb      	adds	r3, r1, r3
   2d6ae:	181a      	adds	r2, r3, r0
   2d6b0:	230c      	movs	r3, #12
   2d6b2:	18fb      	adds	r3, r7, r3
   2d6b4:	0010      	movs	r0, r2
   2d6b6:	0019      	movs	r1, r3
   2d6b8:	2308      	movs	r3, #8
   2d6ba:	001a      	movs	r2, r3
   2d6bc:	4b0f      	ldr	r3, [pc, #60]	; (2d6fc <rtc_calendar_get_config_defaults+0xa0>)
   2d6be:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2d6c0:	2317      	movs	r3, #23
   2d6c2:	18fb      	adds	r3, r7, r3
   2d6c4:	781a      	ldrb	r2, [r3, #0]
   2d6c6:	6879      	ldr	r1, [r7, #4]
   2d6c8:	0013      	movs	r3, r2
   2d6ca:	009b      	lsls	r3, r3, #2
   2d6cc:	189b      	adds	r3, r3, r2
   2d6ce:	005b      	lsls	r3, r3, #1
   2d6d0:	18cb      	adds	r3, r1, r3
   2d6d2:	3310      	adds	r3, #16
   2d6d4:	2206      	movs	r2, #6
   2d6d6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2d6d8:	2317      	movs	r3, #23
   2d6da:	18fb      	adds	r3, r7, r3
   2d6dc:	781a      	ldrb	r2, [r3, #0]
   2d6de:	2317      	movs	r3, #23
   2d6e0:	18fb      	adds	r3, r7, r3
   2d6e2:	3201      	adds	r2, #1
   2d6e4:	701a      	strb	r2, [r3, #0]
   2d6e6:	2317      	movs	r3, #23
   2d6e8:	18fb      	adds	r3, r7, r3
   2d6ea:	781b      	ldrb	r3, [r3, #0]
   2d6ec:	2b00      	cmp	r3, #0
   2d6ee:	d0d4      	beq.n	2d69a <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2d6f0:	46c0      	nop			; (mov r8, r8)
   2d6f2:	46bd      	mov	sp, r7
   2d6f4:	b006      	add	sp, #24
   2d6f6:	bd80      	pop	{r7, pc}
   2d6f8:	0002d621 	.word	0x0002d621
   2d6fc:	00037915 	.word	0x00037915

0002d700 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2d700:	b580      	push	{r7, lr}
   2d702:	b088      	sub	sp, #32
   2d704:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2d706:	230c      	movs	r3, #12
   2d708:	18fb      	adds	r3, r7, r3
   2d70a:	0018      	movs	r0, r3
   2d70c:	4b1a      	ldr	r3, [pc, #104]	; (2d778 <configure_rtc_calendar+0x78>)
   2d70e:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2d710:	1d3b      	adds	r3, r7, #4
   2d712:	0018      	movs	r0, r3
   2d714:	4b19      	ldr	r3, [pc, #100]	; (2d77c <configure_rtc_calendar+0x7c>)
   2d716:	4798      	blx	r3
	init_time.year   = 2014;
   2d718:	1d3b      	adds	r3, r7, #4
   2d71a:	4a19      	ldr	r2, [pc, #100]	; (2d780 <configure_rtc_calendar+0x80>)
   2d71c:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2d71e:	1d3b      	adds	r3, r7, #4
   2d720:	2201      	movs	r2, #1
   2d722:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2d724:	1d3b      	adds	r3, r7, #4
   2d726:	2201      	movs	r2, #1
   2d728:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2d72a:	1d3b      	adds	r3, r7, #4
   2d72c:	2200      	movs	r2, #0
   2d72e:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2d730:	1d3b      	adds	r3, r7, #4
   2d732:	2200      	movs	r2, #0
   2d734:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2d736:	1d3b      	adds	r3, r7, #4
   2d738:	2204      	movs	r2, #4
   2d73a:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2d73c:	230c      	movs	r3, #12
   2d73e:	18fb      	adds	r3, r7, r3
   2d740:	2201      	movs	r2, #1
   2d742:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2d744:	230c      	movs	r3, #12
   2d746:	18fb      	adds	r3, r7, r3
   2d748:	1d3a      	adds	r2, r7, #4
   2d74a:	3308      	adds	r3, #8
   2d74c:	ca03      	ldmia	r2!, {r0, r1}
   2d74e:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2d750:	230c      	movs	r3, #12
   2d752:	18fb      	adds	r3, r7, r3
   2d754:	2206      	movs	r2, #6
   2d756:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2d758:	230c      	movs	r3, #12
   2d75a:	18fa      	adds	r2, r7, r3
   2d75c:	4909      	ldr	r1, [pc, #36]	; (2d784 <configure_rtc_calendar+0x84>)
   2d75e:	4b0a      	ldr	r3, [pc, #40]	; (2d788 <configure_rtc_calendar+0x88>)
   2d760:	0018      	movs	r0, r3
   2d762:	4b0a      	ldr	r3, [pc, #40]	; (2d78c <configure_rtc_calendar+0x8c>)
   2d764:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2d766:	4b08      	ldr	r3, [pc, #32]	; (2d788 <configure_rtc_calendar+0x88>)
   2d768:	0018      	movs	r0, r3
   2d76a:	4b09      	ldr	r3, [pc, #36]	; (2d790 <configure_rtc_calendar+0x90>)
   2d76c:	4798      	blx	r3
}
   2d76e:	46c0      	nop			; (mov r8, r8)
   2d770:	46bd      	mov	sp, r7
   2d772:	b008      	add	sp, #32
   2d774:	bd80      	pop	{r7, pc}
   2d776:	46c0      	nop			; (mov r8, r8)
   2d778:	0002d65d 	.word	0x0002d65d
   2d77c:	0002d621 	.word	0x0002d621
   2d780:	000007de 	.word	0x000007de
   2d784:	40001400 	.word	0x40001400
   2d788:	20005ab4 	.word	0x20005ab4
   2d78c:	000291e1 	.word	0x000291e1
   2d790:	00028f0d 	.word	0x00028f0d

0002d794 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2d794:	b590      	push	{r4, r7, lr}
   2d796:	b085      	sub	sp, #20
   2d798:	af00      	add	r7, sp, #0
   2d79a:	0002      	movs	r2, r0
   2d79c:	1dfb      	adds	r3, r7, #7
   2d79e:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2d7a0:	4b1a      	ldr	r3, [pc, #104]	; (2d80c <disk_initialize+0x78>)
   2d7a2:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2d7a4:	1dfb      	adds	r3, r7, #7
   2d7a6:	781b      	ldrb	r3, [r3, #0]
   2d7a8:	2b01      	cmp	r3, #1
   2d7aa:	d901      	bls.n	2d7b0 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2d7ac:	2301      	movs	r3, #1
   2d7ae:	e029      	b.n	2d804 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2d7b0:	2300      	movs	r3, #0
   2d7b2:	60fb      	str	r3, [r7, #12]
   2d7b4:	e010      	b.n	2d7d8 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2d7b6:	230b      	movs	r3, #11
   2d7b8:	18fc      	adds	r4, r7, r3
   2d7ba:	1dfb      	adds	r3, r7, #7
   2d7bc:	781b      	ldrb	r3, [r3, #0]
   2d7be:	0018      	movs	r0, r3
   2d7c0:	4b13      	ldr	r3, [pc, #76]	; (2d810 <disk_initialize+0x7c>)
   2d7c2:	4798      	blx	r3
   2d7c4:	0003      	movs	r3, r0
   2d7c6:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2d7c8:	230b      	movs	r3, #11
   2d7ca:	18fb      	adds	r3, r7, r3
   2d7cc:	781b      	ldrb	r3, [r3, #0]
   2d7ce:	2b03      	cmp	r3, #3
   2d7d0:	d106      	bne.n	2d7e0 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2d7d2:	68fb      	ldr	r3, [r7, #12]
   2d7d4:	3301      	adds	r3, #1
   2d7d6:	60fb      	str	r3, [r7, #12]
   2d7d8:	68fb      	ldr	r3, [r7, #12]
   2d7da:	2b01      	cmp	r3, #1
   2d7dc:	ddeb      	ble.n	2d7b6 <disk_initialize+0x22>
   2d7de:	e000      	b.n	2d7e2 <disk_initialize+0x4e>
			break;
   2d7e0:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2d7e2:	230b      	movs	r3, #11
   2d7e4:	18fb      	adds	r3, r7, r3
   2d7e6:	781b      	ldrb	r3, [r3, #0]
   2d7e8:	2b00      	cmp	r3, #0
   2d7ea:	d001      	beq.n	2d7f0 <disk_initialize+0x5c>
		return STA_NOINIT;
   2d7ec:	2301      	movs	r3, #1
   2d7ee:	e009      	b.n	2d804 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2d7f0:	1dfb      	adds	r3, r7, #7
   2d7f2:	781b      	ldrb	r3, [r3, #0]
   2d7f4:	0018      	movs	r0, r3
   2d7f6:	4b07      	ldr	r3, [pc, #28]	; (2d814 <disk_initialize+0x80>)
   2d7f8:	4798      	blx	r3
   2d7fa:	1e03      	subs	r3, r0, #0
   2d7fc:	d001      	beq.n	2d802 <disk_initialize+0x6e>
		return STA_PROTECT;
   2d7fe:	2304      	movs	r3, #4
   2d800:	e000      	b.n	2d804 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2d802:	2300      	movs	r3, #0
}
   2d804:	0018      	movs	r0, r3
   2d806:	46bd      	mov	sp, r7
   2d808:	b005      	add	sp, #20
   2d80a:	bd90      	pop	{r4, r7, pc}
   2d80c:	0002d701 	.word	0x0002d701
   2d810:	00028409 	.word	0x00028409
   2d814:	000284c1 	.word	0x000284c1

0002d818 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2d818:	b580      	push	{r7, lr}
   2d81a:	b082      	sub	sp, #8
   2d81c:	af00      	add	r7, sp, #0
   2d81e:	0002      	movs	r2, r0
   2d820:	1dfb      	adds	r3, r7, #7
   2d822:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2d824:	1dfb      	adds	r3, r7, #7
   2d826:	781b      	ldrb	r3, [r3, #0]
   2d828:	0018      	movs	r0, r3
   2d82a:	4b08      	ldr	r3, [pc, #32]	; (2d84c <disk_status+0x34>)
   2d82c:	4798      	blx	r3
   2d82e:	1e03      	subs	r3, r0, #0
   2d830:	d002      	beq.n	2d838 <disk_status+0x20>
   2d832:	2b02      	cmp	r3, #2
   2d834:	d002      	beq.n	2d83c <disk_status+0x24>
   2d836:	e003      	b.n	2d840 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2d838:	2300      	movs	r3, #0
   2d83a:	e002      	b.n	2d842 <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2d83c:	2303      	movs	r3, #3
   2d83e:	e000      	b.n	2d842 <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2d840:	2301      	movs	r3, #1
	}
}
   2d842:	0018      	movs	r0, r3
   2d844:	46bd      	mov	sp, r7
   2d846:	b002      	add	sp, #8
   2d848:	bd80      	pop	{r7, pc}
   2d84a:	46c0      	nop			; (mov r8, r8)
   2d84c:	00028409 	.word	0x00028409

0002d850 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2d850:	b590      	push	{r4, r7, lr}
   2d852:	b089      	sub	sp, #36	; 0x24
   2d854:	af00      	add	r7, sp, #0
   2d856:	60b9      	str	r1, [r7, #8]
   2d858:	607a      	str	r2, [r7, #4]
   2d85a:	0019      	movs	r1, r3
   2d85c:	230f      	movs	r3, #15
   2d85e:	18fb      	adds	r3, r7, r3
   2d860:	1c02      	adds	r2, r0, #0
   2d862:	701a      	strb	r2, [r3, #0]
   2d864:	230e      	movs	r3, #14
   2d866:	18fb      	adds	r3, r7, r3
   2d868:	1c0a      	adds	r2, r1, #0
   2d86a:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2d86c:	231b      	movs	r3, #27
   2d86e:	18fc      	adds	r4, r7, r3
   2d870:	230f      	movs	r3, #15
   2d872:	18fb      	adds	r3, r7, r3
   2d874:	781b      	ldrb	r3, [r3, #0]
   2d876:	0018      	movs	r0, r3
   2d878:	4b28      	ldr	r3, [pc, #160]	; (2d91c <disk_read+0xcc>)
   2d87a:	4798      	blx	r3
   2d87c:	0003      	movs	r3, r0
   2d87e:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2d880:	231b      	movs	r3, #27
   2d882:	18fb      	adds	r3, r7, r3
   2d884:	781b      	ldrb	r3, [r3, #0]
   2d886:	2b00      	cmp	r3, #0
   2d888:	d101      	bne.n	2d88e <disk_read+0x3e>
		return RES_ERROR;
   2d88a:	2301      	movs	r3, #1
   2d88c:	e042      	b.n	2d914 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2d88e:	2314      	movs	r3, #20
   2d890:	18fa      	adds	r2, r7, r3
   2d892:	230f      	movs	r3, #15
   2d894:	18fb      	adds	r3, r7, r3
   2d896:	781b      	ldrb	r3, [r3, #0]
   2d898:	0011      	movs	r1, r2
   2d89a:	0018      	movs	r0, r3
   2d89c:	4b20      	ldr	r3, [pc, #128]	; (2d920 <disk_read+0xd0>)
   2d89e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2d8a0:	230e      	movs	r3, #14
   2d8a2:	18fb      	adds	r3, r7, r3
   2d8a4:	781b      	ldrb	r3, [r3, #0]
   2d8a6:	221b      	movs	r2, #27
   2d8a8:	18ba      	adds	r2, r7, r2
   2d8aa:	7812      	ldrb	r2, [r2, #0]
   2d8ac:	4353      	muls	r3, r2
   2d8ae:	001a      	movs	r2, r3
   2d8b0:	687b      	ldr	r3, [r7, #4]
   2d8b2:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2d8b4:	697b      	ldr	r3, [r7, #20]
   2d8b6:	3301      	adds	r3, #1
   2d8b8:	211b      	movs	r1, #27
   2d8ba:	1879      	adds	r1, r7, r1
   2d8bc:	7809      	ldrb	r1, [r1, #0]
   2d8be:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2d8c0:	429a      	cmp	r2, r3
   2d8c2:	d901      	bls.n	2d8c8 <disk_read+0x78>
		return RES_PARERR;
   2d8c4:	2304      	movs	r3, #4
   2d8c6:	e025      	b.n	2d914 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2d8c8:	2300      	movs	r3, #0
   2d8ca:	61fb      	str	r3, [r7, #28]
   2d8cc:	e01b      	b.n	2d906 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2d8ce:	231b      	movs	r3, #27
   2d8d0:	18fb      	adds	r3, r7, r3
   2d8d2:	781b      	ldrb	r3, [r3, #0]
   2d8d4:	69fa      	ldr	r2, [r7, #28]
   2d8d6:	435a      	muls	r2, r3
   2d8d8:	687b      	ldr	r3, [r7, #4]
   2d8da:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2d8dc:	231b      	movs	r3, #27
   2d8de:	18fb      	adds	r3, r7, r3
   2d8e0:	781b      	ldrb	r3, [r3, #0]
   2d8e2:	69fa      	ldr	r2, [r7, #28]
   2d8e4:	4353      	muls	r3, r2
   2d8e6:	025b      	lsls	r3, r3, #9
   2d8e8:	68ba      	ldr	r2, [r7, #8]
   2d8ea:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2d8ec:	230f      	movs	r3, #15
   2d8ee:	18fb      	adds	r3, r7, r3
   2d8f0:	781b      	ldrb	r3, [r3, #0]
   2d8f2:	0018      	movs	r0, r3
   2d8f4:	4b0b      	ldr	r3, [pc, #44]	; (2d924 <disk_read+0xd4>)
   2d8f6:	4798      	blx	r3
   2d8f8:	1e03      	subs	r3, r0, #0
   2d8fa:	d001      	beq.n	2d900 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2d8fc:	2301      	movs	r3, #1
   2d8fe:	e009      	b.n	2d914 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2d900:	69fb      	ldr	r3, [r7, #28]
   2d902:	3301      	adds	r3, #1
   2d904:	61fb      	str	r3, [r7, #28]
   2d906:	230e      	movs	r3, #14
   2d908:	18fb      	adds	r3, r7, r3
   2d90a:	781a      	ldrb	r2, [r3, #0]
   2d90c:	69fb      	ldr	r3, [r7, #28]
   2d90e:	429a      	cmp	r2, r3
   2d910:	d8dd      	bhi.n	2d8ce <disk_read+0x7e>
		}
	}

	return RES_OK;
   2d912:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2d914:	0018      	movs	r0, r3
   2d916:	46bd      	mov	sp, r7
   2d918:	b009      	add	sp, #36	; 0x24
   2d91a:	bd90      	pop	{r4, r7, pc}
   2d91c:	00028495 	.word	0x00028495
   2d920:	00028449 	.word	0x00028449
   2d924:	00028509 	.word	0x00028509

0002d928 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2d928:	b590      	push	{r4, r7, lr}
   2d92a:	b089      	sub	sp, #36	; 0x24
   2d92c:	af00      	add	r7, sp, #0
   2d92e:	60b9      	str	r1, [r7, #8]
   2d930:	607a      	str	r2, [r7, #4]
   2d932:	0019      	movs	r1, r3
   2d934:	230f      	movs	r3, #15
   2d936:	18fb      	adds	r3, r7, r3
   2d938:	1c02      	adds	r2, r0, #0
   2d93a:	701a      	strb	r2, [r3, #0]
   2d93c:	230e      	movs	r3, #14
   2d93e:	18fb      	adds	r3, r7, r3
   2d940:	1c0a      	adds	r2, r1, #0
   2d942:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2d944:	231b      	movs	r3, #27
   2d946:	18fc      	adds	r4, r7, r3
   2d948:	230f      	movs	r3, #15
   2d94a:	18fb      	adds	r3, r7, r3
   2d94c:	781b      	ldrb	r3, [r3, #0]
   2d94e:	0018      	movs	r0, r3
   2d950:	4b28      	ldr	r3, [pc, #160]	; (2d9f4 <disk_write+0xcc>)
   2d952:	4798      	blx	r3
   2d954:	0003      	movs	r3, r0
   2d956:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2d958:	231b      	movs	r3, #27
   2d95a:	18fb      	adds	r3, r7, r3
   2d95c:	781b      	ldrb	r3, [r3, #0]
   2d95e:	2b00      	cmp	r3, #0
   2d960:	d101      	bne.n	2d966 <disk_write+0x3e>
		return RES_ERROR;
   2d962:	2301      	movs	r3, #1
   2d964:	e042      	b.n	2d9ec <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2d966:	2314      	movs	r3, #20
   2d968:	18fa      	adds	r2, r7, r3
   2d96a:	230f      	movs	r3, #15
   2d96c:	18fb      	adds	r3, r7, r3
   2d96e:	781b      	ldrb	r3, [r3, #0]
   2d970:	0011      	movs	r1, r2
   2d972:	0018      	movs	r0, r3
   2d974:	4b20      	ldr	r3, [pc, #128]	; (2d9f8 <disk_write+0xd0>)
   2d976:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2d978:	230e      	movs	r3, #14
   2d97a:	18fb      	adds	r3, r7, r3
   2d97c:	781b      	ldrb	r3, [r3, #0]
   2d97e:	221b      	movs	r2, #27
   2d980:	18ba      	adds	r2, r7, r2
   2d982:	7812      	ldrb	r2, [r2, #0]
   2d984:	4353      	muls	r3, r2
   2d986:	001a      	movs	r2, r3
   2d988:	687b      	ldr	r3, [r7, #4]
   2d98a:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2d98c:	697b      	ldr	r3, [r7, #20]
   2d98e:	3301      	adds	r3, #1
   2d990:	211b      	movs	r1, #27
   2d992:	1879      	adds	r1, r7, r1
   2d994:	7809      	ldrb	r1, [r1, #0]
   2d996:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2d998:	429a      	cmp	r2, r3
   2d99a:	d901      	bls.n	2d9a0 <disk_write+0x78>
		return RES_PARERR;
   2d99c:	2304      	movs	r3, #4
   2d99e:	e025      	b.n	2d9ec <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2d9a0:	2300      	movs	r3, #0
   2d9a2:	61fb      	str	r3, [r7, #28]
   2d9a4:	e01b      	b.n	2d9de <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2d9a6:	231b      	movs	r3, #27
   2d9a8:	18fb      	adds	r3, r7, r3
   2d9aa:	781b      	ldrb	r3, [r3, #0]
   2d9ac:	69fa      	ldr	r2, [r7, #28]
   2d9ae:	435a      	muls	r2, r3
   2d9b0:	687b      	ldr	r3, [r7, #4]
   2d9b2:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2d9b4:	231b      	movs	r3, #27
   2d9b6:	18fb      	adds	r3, r7, r3
   2d9b8:	781b      	ldrb	r3, [r3, #0]
   2d9ba:	69fa      	ldr	r2, [r7, #28]
   2d9bc:	4353      	muls	r3, r2
   2d9be:	025b      	lsls	r3, r3, #9
   2d9c0:	68ba      	ldr	r2, [r7, #8]
   2d9c2:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2d9c4:	230f      	movs	r3, #15
   2d9c6:	18fb      	adds	r3, r7, r3
   2d9c8:	781b      	ldrb	r3, [r3, #0]
   2d9ca:	0018      	movs	r0, r3
   2d9cc:	4b0b      	ldr	r3, [pc, #44]	; (2d9fc <disk_write+0xd4>)
   2d9ce:	4798      	blx	r3
   2d9d0:	1e03      	subs	r3, r0, #0
   2d9d2:	d001      	beq.n	2d9d8 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2d9d4:	2301      	movs	r3, #1
   2d9d6:	e009      	b.n	2d9ec <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2d9d8:	69fb      	ldr	r3, [r7, #28]
   2d9da:	3301      	adds	r3, #1
   2d9dc:	61fb      	str	r3, [r7, #28]
   2d9de:	230e      	movs	r3, #14
   2d9e0:	18fb      	adds	r3, r7, r3
   2d9e2:	781a      	ldrb	r2, [r3, #0]
   2d9e4:	69fb      	ldr	r3, [r7, #28]
   2d9e6:	429a      	cmp	r2, r3
   2d9e8:	d8dd      	bhi.n	2d9a6 <disk_write+0x7e>
		}
	}

	return RES_OK;
   2d9ea:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2d9ec:	0018      	movs	r0, r3
   2d9ee:	46bd      	mov	sp, r7
   2d9f0:	b009      	add	sp, #36	; 0x24
   2d9f2:	bd90      	pop	{r4, r7, pc}
   2d9f4:	00028495 	.word	0x00028495
   2d9f8:	00028449 	.word	0x00028449
   2d9fc:	0002855d 	.word	0x0002855d

0002da00 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2da00:	b590      	push	{r4, r7, lr}
   2da02:	b085      	sub	sp, #20
   2da04:	af00      	add	r7, sp, #0
   2da06:	603a      	str	r2, [r7, #0]
   2da08:	1dfb      	adds	r3, r7, #7
   2da0a:	1c02      	adds	r2, r0, #0
   2da0c:	701a      	strb	r2, [r3, #0]
   2da0e:	1dbb      	adds	r3, r7, #6
   2da10:	1c0a      	adds	r2, r1, #0
   2da12:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2da14:	230f      	movs	r3, #15
   2da16:	18fb      	adds	r3, r7, r3
   2da18:	2204      	movs	r2, #4
   2da1a:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2da1c:	1dbb      	adds	r3, r7, #6
   2da1e:	781b      	ldrb	r3, [r3, #0]
   2da20:	2b01      	cmp	r3, #1
   2da22:	d00f      	beq.n	2da44 <disk_ioctl+0x44>
   2da24:	dc02      	bgt.n	2da2c <disk_ioctl+0x2c>
   2da26:	2b00      	cmp	r3, #0
   2da28:	d044      	beq.n	2dab4 <disk_ioctl+0xb4>
   2da2a:	e054      	b.n	2dad6 <disk_ioctl+0xd6>
   2da2c:	2b02      	cmp	r3, #2
   2da2e:	d01a      	beq.n	2da66 <disk_ioctl+0x66>
   2da30:	2b03      	cmp	r3, #3
   2da32:	d150      	bne.n	2dad6 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2da34:	683b      	ldr	r3, [r7, #0]
   2da36:	2201      	movs	r2, #1
   2da38:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2da3a:	230f      	movs	r3, #15
   2da3c:	18fb      	adds	r3, r7, r3
   2da3e:	2200      	movs	r2, #0
   2da40:	701a      	strb	r2, [r3, #0]
		break;
   2da42:	e04c      	b.n	2dade <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2da44:	2308      	movs	r3, #8
   2da46:	18fa      	adds	r2, r7, r3
   2da48:	1dfb      	adds	r3, r7, #7
   2da4a:	781b      	ldrb	r3, [r3, #0]
   2da4c:	0011      	movs	r1, r2
   2da4e:	0018      	movs	r0, r3
   2da50:	4b26      	ldr	r3, [pc, #152]	; (2daec <disk_ioctl+0xec>)
   2da52:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2da54:	68bb      	ldr	r3, [r7, #8]
   2da56:	1c5a      	adds	r2, r3, #1
   2da58:	683b      	ldr	r3, [r7, #0]
   2da5a:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2da5c:	230f      	movs	r3, #15
   2da5e:	18fb      	adds	r3, r7, r3
   2da60:	2200      	movs	r2, #0
   2da62:	701a      	strb	r2, [r3, #0]
	}
	break;
   2da64:	e03b      	b.n	2dade <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2da66:	230e      	movs	r3, #14
   2da68:	18fc      	adds	r4, r7, r3
   2da6a:	1dfb      	adds	r3, r7, #7
   2da6c:	781b      	ldrb	r3, [r3, #0]
   2da6e:	0018      	movs	r0, r3
   2da70:	4b1f      	ldr	r3, [pc, #124]	; (2daf0 <disk_ioctl+0xf0>)
   2da72:	4798      	blx	r3
   2da74:	0003      	movs	r3, r0
   2da76:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2da78:	230e      	movs	r3, #14
   2da7a:	18fb      	adds	r3, r7, r3
   2da7c:	781b      	ldrb	r3, [r3, #0]
   2da7e:	2b01      	cmp	r3, #1
   2da80:	d010      	beq.n	2daa4 <disk_ioctl+0xa4>
   2da82:	230e      	movs	r3, #14
   2da84:	18fb      	adds	r3, r7, r3
   2da86:	781b      	ldrb	r3, [r3, #0]
   2da88:	2b02      	cmp	r3, #2
   2da8a:	d00b      	beq.n	2daa4 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2da8c:	230e      	movs	r3, #14
   2da8e:	18fb      	adds	r3, r7, r3
   2da90:	781b      	ldrb	r3, [r3, #0]
   2da92:	2b04      	cmp	r3, #4
   2da94:	d006      	beq.n	2daa4 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2da96:	230e      	movs	r3, #14
   2da98:	18fb      	adds	r3, r7, r3
   2da9a:	781b      	ldrb	r3, [r3, #0]
   2da9c:	2b08      	cmp	r3, #8
   2da9e:	d001      	beq.n	2daa4 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2daa0:	2301      	movs	r3, #1
   2daa2:	e01f      	b.n	2dae4 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2daa4:	683b      	ldr	r3, [r7, #0]
   2daa6:	2200      	movs	r2, #0
   2daa8:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2daaa:	230f      	movs	r3, #15
   2daac:	18fb      	adds	r3, r7, r3
   2daae:	2200      	movs	r2, #0
   2dab0:	701a      	strb	r2, [r3, #0]
	}
	break;
   2dab2:	e014      	b.n	2dade <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2dab4:	1dfb      	adds	r3, r7, #7
   2dab6:	781b      	ldrb	r3, [r3, #0]
   2dab8:	0018      	movs	r0, r3
   2daba:	4b0e      	ldr	r3, [pc, #56]	; (2daf4 <disk_ioctl+0xf4>)
   2dabc:	4798      	blx	r3
   2dabe:	1e03      	subs	r3, r0, #0
   2dac0:	d104      	bne.n	2dacc <disk_ioctl+0xcc>
			res = RES_OK;
   2dac2:	230f      	movs	r3, #15
   2dac4:	18fb      	adds	r3, r7, r3
   2dac6:	2200      	movs	r2, #0
   2dac8:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2daca:	e008      	b.n	2dade <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2dacc:	230f      	movs	r3, #15
   2dace:	18fb      	adds	r3, r7, r3
   2dad0:	2203      	movs	r2, #3
   2dad2:	701a      	strb	r2, [r3, #0]
		break;
   2dad4:	e003      	b.n	2dade <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2dad6:	230f      	movs	r3, #15
   2dad8:	18fb      	adds	r3, r7, r3
   2dada:	2204      	movs	r2, #4
   2dadc:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2dade:	230f      	movs	r3, #15
   2dae0:	18fb      	adds	r3, r7, r3
   2dae2:	781b      	ldrb	r3, [r3, #0]
}
   2dae4:	0018      	movs	r0, r3
   2dae6:	46bd      	mov	sp, r7
   2dae8:	b005      	add	sp, #20
   2daea:	bd90      	pop	{r4, r7, pc}
   2daec:	00028449 	.word	0x00028449
   2daf0:	00028495 	.word	0x00028495
   2daf4:	00028409 	.word	0x00028409

0002daf8 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2daf8:	b580      	push	{r7, lr}
   2dafa:	b084      	sub	sp, #16
   2dafc:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2dafe:	1d3a      	adds	r2, r7, #4
   2db00:	4b12      	ldr	r3, [pc, #72]	; (2db4c <get_fattime+0x54>)
   2db02:	0011      	movs	r1, r2
   2db04:	0018      	movs	r0, r3
   2db06:	4b12      	ldr	r3, [pc, #72]	; (2db50 <get_fattime+0x58>)
   2db08:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2db0a:	1d3b      	adds	r3, r7, #4
   2db0c:	88db      	ldrh	r3, [r3, #6]
   2db0e:	4a11      	ldr	r2, [pc, #68]	; (2db54 <get_fattime+0x5c>)
   2db10:	4694      	mov	ip, r2
   2db12:	4463      	add	r3, ip
   2db14:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2db16:	1d3b      	adds	r3, r7, #4
   2db18:	795b      	ldrb	r3, [r3, #5]
   2db1a:	055b      	lsls	r3, r3, #21
   2db1c:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2db1e:	1d3b      	adds	r3, r7, #4
   2db20:	791b      	ldrb	r3, [r3, #4]
   2db22:	041b      	lsls	r3, r3, #16
   2db24:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2db26:	1d3b      	adds	r3, r7, #4
   2db28:	789b      	ldrb	r3, [r3, #2]
   2db2a:	02db      	lsls	r3, r3, #11
   2db2c:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2db2e:	1d3b      	adds	r3, r7, #4
   2db30:	785b      	ldrb	r3, [r3, #1]
   2db32:	015b      	lsls	r3, r3, #5
   2db34:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2db36:	1d3a      	adds	r2, r7, #4
   2db38:	7812      	ldrb	r2, [r2, #0]
   2db3a:	0852      	lsrs	r2, r2, #1
   2db3c:	b2d2      	uxtb	r2, r2
   2db3e:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2db40:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2db42:	68fb      	ldr	r3, [r7, #12]
}
   2db44:	0018      	movs	r0, r3
   2db46:	46bd      	mov	sp, r7
   2db48:	b004      	add	sp, #16
   2db4a:	bd80      	pop	{r7, pc}
   2db4c:	20005ab4 	.word	0x20005ab4
   2db50:	00029275 	.word	0x00029275
   2db54:	fffff844 	.word	0xfffff844

0002db58 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2db58:	b580      	push	{r7, lr}
   2db5a:	b086      	sub	sp, #24
   2db5c:	af00      	add	r7, sp, #0
   2db5e:	60f8      	str	r0, [r7, #12]
   2db60:	60b9      	str	r1, [r7, #8]
   2db62:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2db64:	68fb      	ldr	r3, [r7, #12]
   2db66:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2db68:	68bb      	ldr	r3, [r7, #8]
   2db6a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2db6c:	e007      	b.n	2db7e <mem_cpy+0x26>
		*d++ = *s++;
   2db6e:	697b      	ldr	r3, [r7, #20]
   2db70:	1c5a      	adds	r2, r3, #1
   2db72:	617a      	str	r2, [r7, #20]
   2db74:	693a      	ldr	r2, [r7, #16]
   2db76:	1c51      	adds	r1, r2, #1
   2db78:	6139      	str	r1, [r7, #16]
   2db7a:	7812      	ldrb	r2, [r2, #0]
   2db7c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2db7e:	687b      	ldr	r3, [r7, #4]
   2db80:	1e5a      	subs	r2, r3, #1
   2db82:	607a      	str	r2, [r7, #4]
   2db84:	2b00      	cmp	r3, #0
   2db86:	d1f2      	bne.n	2db6e <mem_cpy+0x16>
}
   2db88:	46c0      	nop			; (mov r8, r8)
   2db8a:	46bd      	mov	sp, r7
   2db8c:	b006      	add	sp, #24
   2db8e:	bd80      	pop	{r7, pc}

0002db90 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2db90:	b580      	push	{r7, lr}
   2db92:	b086      	sub	sp, #24
   2db94:	af00      	add	r7, sp, #0
   2db96:	60f8      	str	r0, [r7, #12]
   2db98:	60b9      	str	r1, [r7, #8]
   2db9a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2db9c:	68fb      	ldr	r3, [r7, #12]
   2db9e:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2dba0:	e005      	b.n	2dbae <mem_set+0x1e>
		*d++ = (BYTE)val;
   2dba2:	697b      	ldr	r3, [r7, #20]
   2dba4:	1c5a      	adds	r2, r3, #1
   2dba6:	617a      	str	r2, [r7, #20]
   2dba8:	68ba      	ldr	r2, [r7, #8]
   2dbaa:	b2d2      	uxtb	r2, r2
   2dbac:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2dbae:	687b      	ldr	r3, [r7, #4]
   2dbb0:	1e5a      	subs	r2, r3, #1
   2dbb2:	607a      	str	r2, [r7, #4]
   2dbb4:	2b00      	cmp	r3, #0
   2dbb6:	d1f4      	bne.n	2dba2 <mem_set+0x12>
}
   2dbb8:	46c0      	nop			; (mov r8, r8)
   2dbba:	46bd      	mov	sp, r7
   2dbbc:	b006      	add	sp, #24
   2dbbe:	bd80      	pop	{r7, pc}

0002dbc0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2dbc0:	b580      	push	{r7, lr}
   2dbc2:	b088      	sub	sp, #32
   2dbc4:	af00      	add	r7, sp, #0
   2dbc6:	60f8      	str	r0, [r7, #12]
   2dbc8:	60b9      	str	r1, [r7, #8]
   2dbca:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2dbcc:	68fb      	ldr	r3, [r7, #12]
   2dbce:	61fb      	str	r3, [r7, #28]
   2dbd0:	68bb      	ldr	r3, [r7, #8]
   2dbd2:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2dbd4:	2300      	movs	r3, #0
   2dbd6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2dbd8:	46c0      	nop			; (mov r8, r8)
   2dbda:	687b      	ldr	r3, [r7, #4]
   2dbdc:	1e5a      	subs	r2, r3, #1
   2dbde:	607a      	str	r2, [r7, #4]
   2dbe0:	2b00      	cmp	r3, #0
   2dbe2:	d00d      	beq.n	2dc00 <mem_cmp+0x40>
   2dbe4:	69fb      	ldr	r3, [r7, #28]
   2dbe6:	1c5a      	adds	r2, r3, #1
   2dbe8:	61fa      	str	r2, [r7, #28]
   2dbea:	781b      	ldrb	r3, [r3, #0]
   2dbec:	0019      	movs	r1, r3
   2dbee:	69bb      	ldr	r3, [r7, #24]
   2dbf0:	1c5a      	adds	r2, r3, #1
   2dbf2:	61ba      	str	r2, [r7, #24]
   2dbf4:	781b      	ldrb	r3, [r3, #0]
   2dbf6:	1acb      	subs	r3, r1, r3
   2dbf8:	617b      	str	r3, [r7, #20]
   2dbfa:	697b      	ldr	r3, [r7, #20]
   2dbfc:	2b00      	cmp	r3, #0
   2dbfe:	d0ec      	beq.n	2dbda <mem_cmp+0x1a>
	return r;
   2dc00:	697b      	ldr	r3, [r7, #20]
}
   2dc02:	0018      	movs	r0, r3
   2dc04:	46bd      	mov	sp, r7
   2dc06:	b008      	add	sp, #32
   2dc08:	bd80      	pop	{r7, pc}

0002dc0a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2dc0a:	b580      	push	{r7, lr}
   2dc0c:	b082      	sub	sp, #8
   2dc0e:	af00      	add	r7, sp, #0
   2dc10:	6078      	str	r0, [r7, #4]
   2dc12:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2dc14:	e002      	b.n	2dc1c <chk_chr+0x12>
   2dc16:	687b      	ldr	r3, [r7, #4]
   2dc18:	3301      	adds	r3, #1
   2dc1a:	607b      	str	r3, [r7, #4]
   2dc1c:	687b      	ldr	r3, [r7, #4]
   2dc1e:	781b      	ldrb	r3, [r3, #0]
   2dc20:	2b00      	cmp	r3, #0
   2dc22:	d005      	beq.n	2dc30 <chk_chr+0x26>
   2dc24:	687b      	ldr	r3, [r7, #4]
   2dc26:	781b      	ldrb	r3, [r3, #0]
   2dc28:	001a      	movs	r2, r3
   2dc2a:	683b      	ldr	r3, [r7, #0]
   2dc2c:	429a      	cmp	r2, r3
   2dc2e:	d1f2      	bne.n	2dc16 <chk_chr+0xc>
	return *str;
   2dc30:	687b      	ldr	r3, [r7, #4]
   2dc32:	781b      	ldrb	r3, [r3, #0]
}
   2dc34:	0018      	movs	r0, r3
   2dc36:	46bd      	mov	sp, r7
   2dc38:	b002      	add	sp, #8
   2dc3a:	bd80      	pop	{r7, pc}

0002dc3c <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2dc3c:	b590      	push	{r4, r7, lr}
   2dc3e:	b085      	sub	sp, #20
   2dc40:	af00      	add	r7, sp, #0
   2dc42:	6078      	str	r0, [r7, #4]
   2dc44:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2dc46:	687b      	ldr	r3, [r7, #4]
   2dc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2dc4a:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2dc4c:	68fa      	ldr	r2, [r7, #12]
   2dc4e:	683b      	ldr	r3, [r7, #0]
   2dc50:	429a      	cmp	r2, r3
   2dc52:	d04e      	beq.n	2dcf2 <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2dc54:	687b      	ldr	r3, [r7, #4]
   2dc56:	791b      	ldrb	r3, [r3, #4]
   2dc58:	2b00      	cmp	r3, #0
   2dc5a:	d037      	beq.n	2dccc <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2dc5c:	687b      	ldr	r3, [r7, #4]
   2dc5e:	7858      	ldrb	r0, [r3, #1]
   2dc60:	687b      	ldr	r3, [r7, #4]
   2dc62:	3330      	adds	r3, #48	; 0x30
   2dc64:	0019      	movs	r1, r3
   2dc66:	68fa      	ldr	r2, [r7, #12]
   2dc68:	2301      	movs	r3, #1
   2dc6a:	4c24      	ldr	r4, [pc, #144]	; (2dcfc <move_window+0xc0>)
   2dc6c:	47a0      	blx	r4
   2dc6e:	1e03      	subs	r3, r0, #0
   2dc70:	d001      	beq.n	2dc76 <move_window+0x3a>
				return FR_DISK_ERR;
   2dc72:	2301      	movs	r3, #1
   2dc74:	e03e      	b.n	2dcf4 <move_window+0xb8>
			fs->wflag = 0;
   2dc76:	687b      	ldr	r3, [r7, #4]
   2dc78:	2200      	movs	r2, #0
   2dc7a:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2dc7c:	687b      	ldr	r3, [r7, #4]
   2dc7e:	6a1a      	ldr	r2, [r3, #32]
   2dc80:	687b      	ldr	r3, [r7, #4]
   2dc82:	69db      	ldr	r3, [r3, #28]
   2dc84:	18d2      	adds	r2, r2, r3
   2dc86:	68fb      	ldr	r3, [r7, #12]
   2dc88:	429a      	cmp	r2, r3
   2dc8a:	d91f      	bls.n	2dccc <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2dc8c:	230b      	movs	r3, #11
   2dc8e:	18fb      	adds	r3, r7, r3
   2dc90:	687a      	ldr	r2, [r7, #4]
   2dc92:	78d2      	ldrb	r2, [r2, #3]
   2dc94:	701a      	strb	r2, [r3, #0]
   2dc96:	e014      	b.n	2dcc2 <move_window+0x86>
					wsect += fs->fsize;
   2dc98:	687b      	ldr	r3, [r7, #4]
   2dc9a:	69db      	ldr	r3, [r3, #28]
   2dc9c:	68fa      	ldr	r2, [r7, #12]
   2dc9e:	18d3      	adds	r3, r2, r3
   2dca0:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2dca2:	687b      	ldr	r3, [r7, #4]
   2dca4:	7858      	ldrb	r0, [r3, #1]
   2dca6:	687b      	ldr	r3, [r7, #4]
   2dca8:	3330      	adds	r3, #48	; 0x30
   2dcaa:	0019      	movs	r1, r3
   2dcac:	68fa      	ldr	r2, [r7, #12]
   2dcae:	2301      	movs	r3, #1
   2dcb0:	4c12      	ldr	r4, [pc, #72]	; (2dcfc <move_window+0xc0>)
   2dcb2:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2dcb4:	230b      	movs	r3, #11
   2dcb6:	18fb      	adds	r3, r7, r3
   2dcb8:	781a      	ldrb	r2, [r3, #0]
   2dcba:	230b      	movs	r3, #11
   2dcbc:	18fb      	adds	r3, r7, r3
   2dcbe:	3a01      	subs	r2, #1
   2dcc0:	701a      	strb	r2, [r3, #0]
   2dcc2:	230b      	movs	r3, #11
   2dcc4:	18fb      	adds	r3, r7, r3
   2dcc6:	781b      	ldrb	r3, [r3, #0]
   2dcc8:	2b01      	cmp	r3, #1
   2dcca:	d8e5      	bhi.n	2dc98 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2dccc:	683b      	ldr	r3, [r7, #0]
   2dcce:	2b00      	cmp	r3, #0
   2dcd0:	d00f      	beq.n	2dcf2 <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2dcd2:	687b      	ldr	r3, [r7, #4]
   2dcd4:	7858      	ldrb	r0, [r3, #1]
   2dcd6:	687b      	ldr	r3, [r7, #4]
   2dcd8:	3330      	adds	r3, #48	; 0x30
   2dcda:	0019      	movs	r1, r3
   2dcdc:	683a      	ldr	r2, [r7, #0]
   2dcde:	2301      	movs	r3, #1
   2dce0:	4c07      	ldr	r4, [pc, #28]	; (2dd00 <move_window+0xc4>)
   2dce2:	47a0      	blx	r4
   2dce4:	1e03      	subs	r3, r0, #0
   2dce6:	d001      	beq.n	2dcec <move_window+0xb0>
				return FR_DISK_ERR;
   2dce8:	2301      	movs	r3, #1
   2dcea:	e003      	b.n	2dcf4 <move_window+0xb8>
			fs->winsect = sector;
   2dcec:	687b      	ldr	r3, [r7, #4]
   2dcee:	683a      	ldr	r2, [r7, #0]
   2dcf0:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2dcf2:	2300      	movs	r3, #0
}
   2dcf4:	0018      	movs	r0, r3
   2dcf6:	46bd      	mov	sp, r7
   2dcf8:	b005      	add	sp, #20
   2dcfa:	bd90      	pop	{r4, r7, pc}
   2dcfc:	0002d929 	.word	0x0002d929
   2dd00:	0002d851 	.word	0x0002d851

0002dd04 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2dd04:	b590      	push	{r4, r7, lr}
   2dd06:	b085      	sub	sp, #20
   2dd08:	af00      	add	r7, sp, #0
   2dd0a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2dd0c:	230f      	movs	r3, #15
   2dd0e:	18fc      	adds	r4, r7, r3
   2dd10:	687b      	ldr	r3, [r7, #4]
   2dd12:	2100      	movs	r1, #0
   2dd14:	0018      	movs	r0, r3
   2dd16:	4b52      	ldr	r3, [pc, #328]	; (2de60 <sync+0x15c>)
   2dd18:	4798      	blx	r3
   2dd1a:	0003      	movs	r3, r0
   2dd1c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2dd1e:	230f      	movs	r3, #15
   2dd20:	18fb      	adds	r3, r7, r3
   2dd22:	781b      	ldrb	r3, [r3, #0]
   2dd24:	2b00      	cmp	r3, #0
   2dd26:	d000      	beq.n	2dd2a <sync+0x26>
   2dd28:	e093      	b.n	2de52 <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2dd2a:	687b      	ldr	r3, [r7, #4]
   2dd2c:	781b      	ldrb	r3, [r3, #0]
   2dd2e:	2b03      	cmp	r3, #3
   2dd30:	d000      	beq.n	2dd34 <sync+0x30>
   2dd32:	e081      	b.n	2de38 <sync+0x134>
   2dd34:	687b      	ldr	r3, [r7, #4]
   2dd36:	795b      	ldrb	r3, [r3, #5]
   2dd38:	2b00      	cmp	r3, #0
   2dd3a:	d07d      	beq.n	2de38 <sync+0x134>
			fs->winsect = 0;
   2dd3c:	687b      	ldr	r3, [r7, #4]
   2dd3e:	2200      	movs	r2, #0
   2dd40:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2dd42:	687b      	ldr	r3, [r7, #4]
   2dd44:	3330      	adds	r3, #48	; 0x30
   2dd46:	0018      	movs	r0, r3
   2dd48:	2380      	movs	r3, #128	; 0x80
   2dd4a:	009b      	lsls	r3, r3, #2
   2dd4c:	001a      	movs	r2, r3
   2dd4e:	2100      	movs	r1, #0
   2dd50:	4b44      	ldr	r3, [pc, #272]	; (2de64 <sync+0x160>)
   2dd52:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2dd54:	687b      	ldr	r3, [r7, #4]
   2dd56:	4a44      	ldr	r2, [pc, #272]	; (2de68 <sync+0x164>)
   2dd58:	2155      	movs	r1, #85	; 0x55
   2dd5a:	5499      	strb	r1, [r3, r2]
   2dd5c:	687b      	ldr	r3, [r7, #4]
   2dd5e:	4a43      	ldr	r2, [pc, #268]	; (2de6c <sync+0x168>)
   2dd60:	21aa      	movs	r1, #170	; 0xaa
   2dd62:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2dd64:	687b      	ldr	r3, [r7, #4]
   2dd66:	2230      	movs	r2, #48	; 0x30
   2dd68:	2152      	movs	r1, #82	; 0x52
   2dd6a:	5499      	strb	r1, [r3, r2]
   2dd6c:	687b      	ldr	r3, [r7, #4]
   2dd6e:	2231      	movs	r2, #49	; 0x31
   2dd70:	2152      	movs	r1, #82	; 0x52
   2dd72:	5499      	strb	r1, [r3, r2]
   2dd74:	687b      	ldr	r3, [r7, #4]
   2dd76:	2232      	movs	r2, #50	; 0x32
   2dd78:	2161      	movs	r1, #97	; 0x61
   2dd7a:	5499      	strb	r1, [r3, r2]
   2dd7c:	687b      	ldr	r3, [r7, #4]
   2dd7e:	2233      	movs	r2, #51	; 0x33
   2dd80:	2141      	movs	r1, #65	; 0x41
   2dd82:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2dd84:	687a      	ldr	r2, [r7, #4]
   2dd86:	2385      	movs	r3, #133	; 0x85
   2dd88:	009b      	lsls	r3, r3, #2
   2dd8a:	2172      	movs	r1, #114	; 0x72
   2dd8c:	54d1      	strb	r1, [r2, r3]
   2dd8e:	687b      	ldr	r3, [r7, #4]
   2dd90:	4a37      	ldr	r2, [pc, #220]	; (2de70 <sync+0x16c>)
   2dd92:	2172      	movs	r1, #114	; 0x72
   2dd94:	5499      	strb	r1, [r3, r2]
   2dd96:	687b      	ldr	r3, [r7, #4]
   2dd98:	4a36      	ldr	r2, [pc, #216]	; (2de74 <sync+0x170>)
   2dd9a:	2141      	movs	r1, #65	; 0x41
   2dd9c:	5499      	strb	r1, [r3, r2]
   2dd9e:	687b      	ldr	r3, [r7, #4]
   2dda0:	4a35      	ldr	r2, [pc, #212]	; (2de78 <sync+0x174>)
   2dda2:	2161      	movs	r1, #97	; 0x61
   2dda4:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2dda6:	687b      	ldr	r3, [r7, #4]
   2dda8:	691b      	ldr	r3, [r3, #16]
   2ddaa:	b2d9      	uxtb	r1, r3
   2ddac:	687a      	ldr	r2, [r7, #4]
   2ddae:	2386      	movs	r3, #134	; 0x86
   2ddb0:	009b      	lsls	r3, r3, #2
   2ddb2:	54d1      	strb	r1, [r2, r3]
   2ddb4:	687b      	ldr	r3, [r7, #4]
   2ddb6:	691b      	ldr	r3, [r3, #16]
   2ddb8:	b29b      	uxth	r3, r3
   2ddba:	0a1b      	lsrs	r3, r3, #8
   2ddbc:	b29b      	uxth	r3, r3
   2ddbe:	b2d9      	uxtb	r1, r3
   2ddc0:	687b      	ldr	r3, [r7, #4]
   2ddc2:	4a2e      	ldr	r2, [pc, #184]	; (2de7c <sync+0x178>)
   2ddc4:	5499      	strb	r1, [r3, r2]
   2ddc6:	687b      	ldr	r3, [r7, #4]
   2ddc8:	691b      	ldr	r3, [r3, #16]
   2ddca:	0c1b      	lsrs	r3, r3, #16
   2ddcc:	b2d9      	uxtb	r1, r3
   2ddce:	687b      	ldr	r3, [r7, #4]
   2ddd0:	4a2b      	ldr	r2, [pc, #172]	; (2de80 <sync+0x17c>)
   2ddd2:	5499      	strb	r1, [r3, r2]
   2ddd4:	687b      	ldr	r3, [r7, #4]
   2ddd6:	691b      	ldr	r3, [r3, #16]
   2ddd8:	0e1b      	lsrs	r3, r3, #24
   2ddda:	b2d9      	uxtb	r1, r3
   2dddc:	687b      	ldr	r3, [r7, #4]
   2ddde:	4a29      	ldr	r2, [pc, #164]	; (2de84 <sync+0x180>)
   2dde0:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2dde2:	687b      	ldr	r3, [r7, #4]
   2dde4:	68db      	ldr	r3, [r3, #12]
   2dde6:	b2d9      	uxtb	r1, r3
   2dde8:	687a      	ldr	r2, [r7, #4]
   2ddea:	2387      	movs	r3, #135	; 0x87
   2ddec:	009b      	lsls	r3, r3, #2
   2ddee:	54d1      	strb	r1, [r2, r3]
   2ddf0:	687b      	ldr	r3, [r7, #4]
   2ddf2:	68db      	ldr	r3, [r3, #12]
   2ddf4:	b29b      	uxth	r3, r3
   2ddf6:	0a1b      	lsrs	r3, r3, #8
   2ddf8:	b29b      	uxth	r3, r3
   2ddfa:	b2d9      	uxtb	r1, r3
   2ddfc:	687b      	ldr	r3, [r7, #4]
   2ddfe:	4a22      	ldr	r2, [pc, #136]	; (2de88 <sync+0x184>)
   2de00:	5499      	strb	r1, [r3, r2]
   2de02:	687b      	ldr	r3, [r7, #4]
   2de04:	68db      	ldr	r3, [r3, #12]
   2de06:	0c1b      	lsrs	r3, r3, #16
   2de08:	b2d9      	uxtb	r1, r3
   2de0a:	687b      	ldr	r3, [r7, #4]
   2de0c:	4a1f      	ldr	r2, [pc, #124]	; (2de8c <sync+0x188>)
   2de0e:	5499      	strb	r1, [r3, r2]
   2de10:	687b      	ldr	r3, [r7, #4]
   2de12:	68db      	ldr	r3, [r3, #12]
   2de14:	0e1b      	lsrs	r3, r3, #24
   2de16:	b2d9      	uxtb	r1, r3
   2de18:	687b      	ldr	r3, [r7, #4]
   2de1a:	4a1d      	ldr	r2, [pc, #116]	; (2de90 <sync+0x18c>)
   2de1c:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2de1e:	687b      	ldr	r3, [r7, #4]
   2de20:	7858      	ldrb	r0, [r3, #1]
   2de22:	687b      	ldr	r3, [r7, #4]
   2de24:	3330      	adds	r3, #48	; 0x30
   2de26:	0019      	movs	r1, r3
   2de28:	687b      	ldr	r3, [r7, #4]
   2de2a:	695a      	ldr	r2, [r3, #20]
   2de2c:	2301      	movs	r3, #1
   2de2e:	4c19      	ldr	r4, [pc, #100]	; (2de94 <sync+0x190>)
   2de30:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2de32:	687b      	ldr	r3, [r7, #4]
   2de34:	2200      	movs	r2, #0
   2de36:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2de38:	687b      	ldr	r3, [r7, #4]
   2de3a:	785b      	ldrb	r3, [r3, #1]
   2de3c:	2200      	movs	r2, #0
   2de3e:	2100      	movs	r1, #0
   2de40:	0018      	movs	r0, r3
   2de42:	4b15      	ldr	r3, [pc, #84]	; (2de98 <sync+0x194>)
   2de44:	4798      	blx	r3
   2de46:	1e03      	subs	r3, r0, #0
   2de48:	d003      	beq.n	2de52 <sync+0x14e>
			res = FR_DISK_ERR;
   2de4a:	230f      	movs	r3, #15
   2de4c:	18fb      	adds	r3, r7, r3
   2de4e:	2201      	movs	r2, #1
   2de50:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2de52:	230f      	movs	r3, #15
   2de54:	18fb      	adds	r3, r7, r3
   2de56:	781b      	ldrb	r3, [r3, #0]
}
   2de58:	0018      	movs	r0, r3
   2de5a:	46bd      	mov	sp, r7
   2de5c:	b005      	add	sp, #20
   2de5e:	bd90      	pop	{r4, r7, pc}
   2de60:	0002dc3d 	.word	0x0002dc3d
   2de64:	0002db91 	.word	0x0002db91
   2de68:	0000022e 	.word	0x0000022e
   2de6c:	0000022f 	.word	0x0000022f
   2de70:	00000215 	.word	0x00000215
   2de74:	00000216 	.word	0x00000216
   2de78:	00000217 	.word	0x00000217
   2de7c:	00000219 	.word	0x00000219
   2de80:	0000021a 	.word	0x0000021a
   2de84:	0000021b 	.word	0x0000021b
   2de88:	0000021d 	.word	0x0000021d
   2de8c:	0000021e 	.word	0x0000021e
   2de90:	0000021f 	.word	0x0000021f
   2de94:	0002d929 	.word	0x0002d929
   2de98:	0002da01 	.word	0x0002da01

0002de9c <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2de9c:	b580      	push	{r7, lr}
   2de9e:	b082      	sub	sp, #8
   2dea0:	af00      	add	r7, sp, #0
   2dea2:	6078      	str	r0, [r7, #4]
   2dea4:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2dea6:	683b      	ldr	r3, [r7, #0]
   2dea8:	3b02      	subs	r3, #2
   2deaa:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2deac:	687b      	ldr	r3, [r7, #4]
   2deae:	699b      	ldr	r3, [r3, #24]
   2deb0:	1e9a      	subs	r2, r3, #2
   2deb2:	683b      	ldr	r3, [r7, #0]
   2deb4:	429a      	cmp	r2, r3
   2deb6:	d801      	bhi.n	2debc <clust2sect+0x20>
   2deb8:	2300      	movs	r3, #0
   2deba:	e007      	b.n	2decc <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2debc:	687b      	ldr	r3, [r7, #4]
   2debe:	789b      	ldrb	r3, [r3, #2]
   2dec0:	001a      	movs	r2, r3
   2dec2:	683b      	ldr	r3, [r7, #0]
   2dec4:	435a      	muls	r2, r3
   2dec6:	687b      	ldr	r3, [r7, #4]
   2dec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2deca:	18d3      	adds	r3, r2, r3
}
   2decc:	0018      	movs	r0, r3
   2dece:	46bd      	mov	sp, r7
   2ded0:	b002      	add	sp, #8
   2ded2:	bd80      	pop	{r7, pc}

0002ded4 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2ded4:	b580      	push	{r7, lr}
   2ded6:	b086      	sub	sp, #24
   2ded8:	af00      	add	r7, sp, #0
   2deda:	6078      	str	r0, [r7, #4]
   2dedc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2dede:	683b      	ldr	r3, [r7, #0]
   2dee0:	2b01      	cmp	r3, #1
   2dee2:	d904      	bls.n	2deee <get_fat+0x1a>
   2dee4:	687b      	ldr	r3, [r7, #4]
   2dee6:	699a      	ldr	r2, [r3, #24]
   2dee8:	683b      	ldr	r3, [r7, #0]
   2deea:	429a      	cmp	r2, r3
   2deec:	d801      	bhi.n	2def2 <get_fat+0x1e>
		return 1;
   2deee:	2301      	movs	r3, #1
   2def0:	e09f      	b.n	2e032 <get_fat+0x15e>

	switch (fs->fs_type) {
   2def2:	687b      	ldr	r3, [r7, #4]
   2def4:	781b      	ldrb	r3, [r3, #0]
   2def6:	2b02      	cmp	r3, #2
   2def8:	d048      	beq.n	2df8c <get_fat+0xb8>
   2defa:	2b03      	cmp	r3, #3
   2defc:	d067      	beq.n	2dfce <get_fat+0xfa>
   2defe:	2b01      	cmp	r3, #1
   2df00:	d000      	beq.n	2df04 <get_fat+0x30>
   2df02:	e094      	b.n	2e02e <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2df04:	683b      	ldr	r3, [r7, #0]
   2df06:	617b      	str	r3, [r7, #20]
   2df08:	697b      	ldr	r3, [r7, #20]
   2df0a:	085b      	lsrs	r3, r3, #1
   2df0c:	697a      	ldr	r2, [r7, #20]
   2df0e:	18d3      	adds	r3, r2, r3
   2df10:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2df12:	687b      	ldr	r3, [r7, #4]
   2df14:	6a1a      	ldr	r2, [r3, #32]
   2df16:	697b      	ldr	r3, [r7, #20]
   2df18:	0a5b      	lsrs	r3, r3, #9
   2df1a:	18d2      	adds	r2, r2, r3
   2df1c:	687b      	ldr	r3, [r7, #4]
   2df1e:	0011      	movs	r1, r2
   2df20:	0018      	movs	r0, r3
   2df22:	4b46      	ldr	r3, [pc, #280]	; (2e03c <get_fat+0x168>)
   2df24:	4798      	blx	r3
   2df26:	1e03      	subs	r3, r0, #0
   2df28:	d000      	beq.n	2df2c <get_fat+0x58>
   2df2a:	e079      	b.n	2e020 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2df2c:	697b      	ldr	r3, [r7, #20]
   2df2e:	05db      	lsls	r3, r3, #23
   2df30:	0ddb      	lsrs	r3, r3, #23
   2df32:	687a      	ldr	r2, [r7, #4]
   2df34:	2130      	movs	r1, #48	; 0x30
   2df36:	18d3      	adds	r3, r2, r3
   2df38:	185b      	adds	r3, r3, r1
   2df3a:	781b      	ldrb	r3, [r3, #0]
   2df3c:	613b      	str	r3, [r7, #16]
   2df3e:	697b      	ldr	r3, [r7, #20]
   2df40:	3301      	adds	r3, #1
   2df42:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2df44:	687b      	ldr	r3, [r7, #4]
   2df46:	6a1a      	ldr	r2, [r3, #32]
   2df48:	697b      	ldr	r3, [r7, #20]
   2df4a:	0a5b      	lsrs	r3, r3, #9
   2df4c:	18d2      	adds	r2, r2, r3
   2df4e:	687b      	ldr	r3, [r7, #4]
   2df50:	0011      	movs	r1, r2
   2df52:	0018      	movs	r0, r3
   2df54:	4b39      	ldr	r3, [pc, #228]	; (2e03c <get_fat+0x168>)
   2df56:	4798      	blx	r3
   2df58:	1e03      	subs	r3, r0, #0
   2df5a:	d163      	bne.n	2e024 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2df5c:	697b      	ldr	r3, [r7, #20]
   2df5e:	05db      	lsls	r3, r3, #23
   2df60:	0ddb      	lsrs	r3, r3, #23
   2df62:	687a      	ldr	r2, [r7, #4]
   2df64:	2130      	movs	r1, #48	; 0x30
   2df66:	18d3      	adds	r3, r2, r3
   2df68:	185b      	adds	r3, r3, r1
   2df6a:	781b      	ldrb	r3, [r3, #0]
   2df6c:	021b      	lsls	r3, r3, #8
   2df6e:	001a      	movs	r2, r3
   2df70:	693b      	ldr	r3, [r7, #16]
   2df72:	4313      	orrs	r3, r2
   2df74:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2df76:	683b      	ldr	r3, [r7, #0]
   2df78:	2201      	movs	r2, #1
   2df7a:	4013      	ands	r3, r2
   2df7c:	d002      	beq.n	2df84 <get_fat+0xb0>
   2df7e:	693b      	ldr	r3, [r7, #16]
   2df80:	091b      	lsrs	r3, r3, #4
   2df82:	e056      	b.n	2e032 <get_fat+0x15e>
   2df84:	693b      	ldr	r3, [r7, #16]
   2df86:	051b      	lsls	r3, r3, #20
   2df88:	0d1b      	lsrs	r3, r3, #20
   2df8a:	e052      	b.n	2e032 <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2df8c:	687b      	ldr	r3, [r7, #4]
   2df8e:	6a1a      	ldr	r2, [r3, #32]
   2df90:	683b      	ldr	r3, [r7, #0]
   2df92:	0a1b      	lsrs	r3, r3, #8
   2df94:	18d2      	adds	r2, r2, r3
   2df96:	687b      	ldr	r3, [r7, #4]
   2df98:	0011      	movs	r1, r2
   2df9a:	0018      	movs	r0, r3
   2df9c:	4b27      	ldr	r3, [pc, #156]	; (2e03c <get_fat+0x168>)
   2df9e:	4798      	blx	r3
   2dfa0:	1e03      	subs	r3, r0, #0
   2dfa2:	d141      	bne.n	2e028 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2dfa4:	683b      	ldr	r3, [r7, #0]
   2dfa6:	005a      	lsls	r2, r3, #1
   2dfa8:	23ff      	movs	r3, #255	; 0xff
   2dfaa:	005b      	lsls	r3, r3, #1
   2dfac:	4013      	ands	r3, r2
   2dfae:	3330      	adds	r3, #48	; 0x30
   2dfb0:	687a      	ldr	r2, [r7, #4]
   2dfb2:	18d3      	adds	r3, r2, r3
   2dfb4:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2dfb6:	68fb      	ldr	r3, [r7, #12]
   2dfb8:	3301      	adds	r3, #1
   2dfba:	781b      	ldrb	r3, [r3, #0]
   2dfbc:	021b      	lsls	r3, r3, #8
   2dfbe:	b21a      	sxth	r2, r3
   2dfc0:	68fb      	ldr	r3, [r7, #12]
   2dfc2:	781b      	ldrb	r3, [r3, #0]
   2dfc4:	b21b      	sxth	r3, r3
   2dfc6:	4313      	orrs	r3, r2
   2dfc8:	b21b      	sxth	r3, r3
   2dfca:	b29b      	uxth	r3, r3
   2dfcc:	e031      	b.n	2e032 <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2dfce:	687b      	ldr	r3, [r7, #4]
   2dfd0:	6a1a      	ldr	r2, [r3, #32]
   2dfd2:	683b      	ldr	r3, [r7, #0]
   2dfd4:	09db      	lsrs	r3, r3, #7
   2dfd6:	18d2      	adds	r2, r2, r3
   2dfd8:	687b      	ldr	r3, [r7, #4]
   2dfda:	0011      	movs	r1, r2
   2dfdc:	0018      	movs	r0, r3
   2dfde:	4b17      	ldr	r3, [pc, #92]	; (2e03c <get_fat+0x168>)
   2dfe0:	4798      	blx	r3
   2dfe2:	1e03      	subs	r3, r0, #0
   2dfe4:	d122      	bne.n	2e02c <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2dfe6:	683b      	ldr	r3, [r7, #0]
   2dfe8:	009a      	lsls	r2, r3, #2
   2dfea:	23fe      	movs	r3, #254	; 0xfe
   2dfec:	005b      	lsls	r3, r3, #1
   2dfee:	4013      	ands	r3, r2
   2dff0:	3330      	adds	r3, #48	; 0x30
   2dff2:	687a      	ldr	r2, [r7, #4]
   2dff4:	18d3      	adds	r3, r2, r3
   2dff6:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2dff8:	68fb      	ldr	r3, [r7, #12]
   2dffa:	3303      	adds	r3, #3
   2dffc:	781b      	ldrb	r3, [r3, #0]
   2dffe:	061a      	lsls	r2, r3, #24
   2e000:	68fb      	ldr	r3, [r7, #12]
   2e002:	3302      	adds	r3, #2
   2e004:	781b      	ldrb	r3, [r3, #0]
   2e006:	041b      	lsls	r3, r3, #16
   2e008:	4313      	orrs	r3, r2
   2e00a:	68fa      	ldr	r2, [r7, #12]
   2e00c:	3201      	adds	r2, #1
   2e00e:	7812      	ldrb	r2, [r2, #0]
   2e010:	0212      	lsls	r2, r2, #8
   2e012:	4313      	orrs	r3, r2
   2e014:	68fa      	ldr	r2, [r7, #12]
   2e016:	7812      	ldrb	r2, [r2, #0]
   2e018:	4313      	orrs	r3, r2
   2e01a:	011b      	lsls	r3, r3, #4
   2e01c:	091b      	lsrs	r3, r3, #4
   2e01e:	e008      	b.n	2e032 <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2e020:	46c0      	nop			; (mov r8, r8)
   2e022:	e004      	b.n	2e02e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2e024:	46c0      	nop			; (mov r8, r8)
   2e026:	e002      	b.n	2e02e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2e028:	46c0      	nop			; (mov r8, r8)
   2e02a:	e000      	b.n	2e02e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2e02c:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2e02e:	2301      	movs	r3, #1
   2e030:	425b      	negs	r3, r3
}
   2e032:	0018      	movs	r0, r3
   2e034:	46bd      	mov	sp, r7
   2e036:	b006      	add	sp, #24
   2e038:	bd80      	pop	{r7, pc}
   2e03a:	46c0      	nop			; (mov r8, r8)
   2e03c:	0002dc3d 	.word	0x0002dc3d

0002e040 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2e040:	b590      	push	{r4, r7, lr}
   2e042:	b089      	sub	sp, #36	; 0x24
   2e044:	af00      	add	r7, sp, #0
   2e046:	60f8      	str	r0, [r7, #12]
   2e048:	60b9      	str	r1, [r7, #8]
   2e04a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2e04c:	68bb      	ldr	r3, [r7, #8]
   2e04e:	2b01      	cmp	r3, #1
   2e050:	d904      	bls.n	2e05c <put_fat+0x1c>
   2e052:	68fb      	ldr	r3, [r7, #12]
   2e054:	699a      	ldr	r2, [r3, #24]
   2e056:	68bb      	ldr	r3, [r7, #8]
   2e058:	429a      	cmp	r2, r3
   2e05a:	d804      	bhi.n	2e066 <put_fat+0x26>
		res = FR_INT_ERR;
   2e05c:	231f      	movs	r3, #31
   2e05e:	18fb      	adds	r3, r7, r3
   2e060:	2202      	movs	r2, #2
   2e062:	701a      	strb	r2, [r3, #0]
   2e064:	e100      	b.n	2e268 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2e066:	68fb      	ldr	r3, [r7, #12]
   2e068:	781b      	ldrb	r3, [r3, #0]
   2e06a:	2b02      	cmp	r3, #2
   2e06c:	d100      	bne.n	2e070 <put_fat+0x30>
   2e06e:	e078      	b.n	2e162 <put_fat+0x122>
   2e070:	2b03      	cmp	r3, #3
   2e072:	d100      	bne.n	2e076 <put_fat+0x36>
   2e074:	e09e      	b.n	2e1b4 <put_fat+0x174>
   2e076:	2b01      	cmp	r3, #1
   2e078:	d000      	beq.n	2e07c <put_fat+0x3c>
   2e07a:	e0e6      	b.n	2e24a <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2e07c:	68bb      	ldr	r3, [r7, #8]
   2e07e:	61bb      	str	r3, [r7, #24]
   2e080:	69bb      	ldr	r3, [r7, #24]
   2e082:	085b      	lsrs	r3, r3, #1
   2e084:	69ba      	ldr	r2, [r7, #24]
   2e086:	18d3      	adds	r3, r2, r3
   2e088:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2e08a:	68fb      	ldr	r3, [r7, #12]
   2e08c:	6a1a      	ldr	r2, [r3, #32]
   2e08e:	69bb      	ldr	r3, [r7, #24]
   2e090:	0a5b      	lsrs	r3, r3, #9
   2e092:	18d2      	adds	r2, r2, r3
   2e094:	231f      	movs	r3, #31
   2e096:	18fc      	adds	r4, r7, r3
   2e098:	68fb      	ldr	r3, [r7, #12]
   2e09a:	0011      	movs	r1, r2
   2e09c:	0018      	movs	r0, r3
   2e09e:	4b76      	ldr	r3, [pc, #472]	; (2e278 <put_fat+0x238>)
   2e0a0:	4798      	blx	r3
   2e0a2:	0003      	movs	r3, r0
   2e0a4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2e0a6:	231f      	movs	r3, #31
   2e0a8:	18fb      	adds	r3, r7, r3
   2e0aa:	781b      	ldrb	r3, [r3, #0]
   2e0ac:	2b00      	cmp	r3, #0
   2e0ae:	d000      	beq.n	2e0b2 <put_fat+0x72>
   2e0b0:	e0d0      	b.n	2e254 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2e0b2:	69bb      	ldr	r3, [r7, #24]
   2e0b4:	05db      	lsls	r3, r3, #23
   2e0b6:	0ddb      	lsrs	r3, r3, #23
   2e0b8:	3330      	adds	r3, #48	; 0x30
   2e0ba:	68fa      	ldr	r2, [r7, #12]
   2e0bc:	18d3      	adds	r3, r2, r3
   2e0be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2e0c0:	68bb      	ldr	r3, [r7, #8]
   2e0c2:	2201      	movs	r2, #1
   2e0c4:	4013      	ands	r3, r2
   2e0c6:	d00d      	beq.n	2e0e4 <put_fat+0xa4>
   2e0c8:	697b      	ldr	r3, [r7, #20]
   2e0ca:	781b      	ldrb	r3, [r3, #0]
   2e0cc:	b25b      	sxtb	r3, r3
   2e0ce:	220f      	movs	r2, #15
   2e0d0:	4013      	ands	r3, r2
   2e0d2:	b25a      	sxtb	r2, r3
   2e0d4:	687b      	ldr	r3, [r7, #4]
   2e0d6:	b2db      	uxtb	r3, r3
   2e0d8:	011b      	lsls	r3, r3, #4
   2e0da:	b25b      	sxtb	r3, r3
   2e0dc:	4313      	orrs	r3, r2
   2e0de:	b25b      	sxtb	r3, r3
   2e0e0:	b2db      	uxtb	r3, r3
   2e0e2:	e001      	b.n	2e0e8 <put_fat+0xa8>
   2e0e4:	687b      	ldr	r3, [r7, #4]
   2e0e6:	b2db      	uxtb	r3, r3
   2e0e8:	697a      	ldr	r2, [r7, #20]
   2e0ea:	7013      	strb	r3, [r2, #0]
			bc++;
   2e0ec:	69bb      	ldr	r3, [r7, #24]
   2e0ee:	3301      	adds	r3, #1
   2e0f0:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2e0f2:	68fb      	ldr	r3, [r7, #12]
   2e0f4:	2201      	movs	r2, #1
   2e0f6:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2e0f8:	68fb      	ldr	r3, [r7, #12]
   2e0fa:	6a1a      	ldr	r2, [r3, #32]
   2e0fc:	69bb      	ldr	r3, [r7, #24]
   2e0fe:	0a5b      	lsrs	r3, r3, #9
   2e100:	18d2      	adds	r2, r2, r3
   2e102:	231f      	movs	r3, #31
   2e104:	18fc      	adds	r4, r7, r3
   2e106:	68fb      	ldr	r3, [r7, #12]
   2e108:	0011      	movs	r1, r2
   2e10a:	0018      	movs	r0, r3
   2e10c:	4b5a      	ldr	r3, [pc, #360]	; (2e278 <put_fat+0x238>)
   2e10e:	4798      	blx	r3
   2e110:	0003      	movs	r3, r0
   2e112:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2e114:	231f      	movs	r3, #31
   2e116:	18fb      	adds	r3, r7, r3
   2e118:	781b      	ldrb	r3, [r3, #0]
   2e11a:	2b00      	cmp	r3, #0
   2e11c:	d000      	beq.n	2e120 <put_fat+0xe0>
   2e11e:	e09b      	b.n	2e258 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2e120:	69bb      	ldr	r3, [r7, #24]
   2e122:	05db      	lsls	r3, r3, #23
   2e124:	0ddb      	lsrs	r3, r3, #23
   2e126:	3330      	adds	r3, #48	; 0x30
   2e128:	68fa      	ldr	r2, [r7, #12]
   2e12a:	18d3      	adds	r3, r2, r3
   2e12c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2e12e:	68bb      	ldr	r3, [r7, #8]
   2e130:	2201      	movs	r2, #1
   2e132:	4013      	ands	r3, r2
   2e134:	d003      	beq.n	2e13e <put_fat+0xfe>
   2e136:	687b      	ldr	r3, [r7, #4]
   2e138:	091b      	lsrs	r3, r3, #4
   2e13a:	b2db      	uxtb	r3, r3
   2e13c:	e00e      	b.n	2e15c <put_fat+0x11c>
   2e13e:	697b      	ldr	r3, [r7, #20]
   2e140:	781b      	ldrb	r3, [r3, #0]
   2e142:	b25b      	sxtb	r3, r3
   2e144:	220f      	movs	r2, #15
   2e146:	4393      	bics	r3, r2
   2e148:	b25a      	sxtb	r2, r3
   2e14a:	687b      	ldr	r3, [r7, #4]
   2e14c:	0a1b      	lsrs	r3, r3, #8
   2e14e:	b25b      	sxtb	r3, r3
   2e150:	210f      	movs	r1, #15
   2e152:	400b      	ands	r3, r1
   2e154:	b25b      	sxtb	r3, r3
   2e156:	4313      	orrs	r3, r2
   2e158:	b25b      	sxtb	r3, r3
   2e15a:	b2db      	uxtb	r3, r3
   2e15c:	697a      	ldr	r2, [r7, #20]
   2e15e:	7013      	strb	r3, [r2, #0]
			break;
   2e160:	e07f      	b.n	2e262 <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2e162:	68fb      	ldr	r3, [r7, #12]
   2e164:	6a1a      	ldr	r2, [r3, #32]
   2e166:	68bb      	ldr	r3, [r7, #8]
   2e168:	0a1b      	lsrs	r3, r3, #8
   2e16a:	18d2      	adds	r2, r2, r3
   2e16c:	231f      	movs	r3, #31
   2e16e:	18fc      	adds	r4, r7, r3
   2e170:	68fb      	ldr	r3, [r7, #12]
   2e172:	0011      	movs	r1, r2
   2e174:	0018      	movs	r0, r3
   2e176:	4b40      	ldr	r3, [pc, #256]	; (2e278 <put_fat+0x238>)
   2e178:	4798      	blx	r3
   2e17a:	0003      	movs	r3, r0
   2e17c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2e17e:	231f      	movs	r3, #31
   2e180:	18fb      	adds	r3, r7, r3
   2e182:	781b      	ldrb	r3, [r3, #0]
   2e184:	2b00      	cmp	r3, #0
   2e186:	d169      	bne.n	2e25c <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2e188:	68bb      	ldr	r3, [r7, #8]
   2e18a:	005a      	lsls	r2, r3, #1
   2e18c:	23ff      	movs	r3, #255	; 0xff
   2e18e:	005b      	lsls	r3, r3, #1
   2e190:	4013      	ands	r3, r2
   2e192:	3330      	adds	r3, #48	; 0x30
   2e194:	68fa      	ldr	r2, [r7, #12]
   2e196:	18d3      	adds	r3, r2, r3
   2e198:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2e19a:	687b      	ldr	r3, [r7, #4]
   2e19c:	b2da      	uxtb	r2, r3
   2e19e:	697b      	ldr	r3, [r7, #20]
   2e1a0:	701a      	strb	r2, [r3, #0]
   2e1a2:	697b      	ldr	r3, [r7, #20]
   2e1a4:	3301      	adds	r3, #1
   2e1a6:	687a      	ldr	r2, [r7, #4]
   2e1a8:	b292      	uxth	r2, r2
   2e1aa:	0a12      	lsrs	r2, r2, #8
   2e1ac:	b292      	uxth	r2, r2
   2e1ae:	b2d2      	uxtb	r2, r2
   2e1b0:	701a      	strb	r2, [r3, #0]
			break;
   2e1b2:	e056      	b.n	2e262 <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2e1b4:	68fb      	ldr	r3, [r7, #12]
   2e1b6:	6a1a      	ldr	r2, [r3, #32]
   2e1b8:	68bb      	ldr	r3, [r7, #8]
   2e1ba:	09db      	lsrs	r3, r3, #7
   2e1bc:	18d2      	adds	r2, r2, r3
   2e1be:	231f      	movs	r3, #31
   2e1c0:	18fc      	adds	r4, r7, r3
   2e1c2:	68fb      	ldr	r3, [r7, #12]
   2e1c4:	0011      	movs	r1, r2
   2e1c6:	0018      	movs	r0, r3
   2e1c8:	4b2b      	ldr	r3, [pc, #172]	; (2e278 <put_fat+0x238>)
   2e1ca:	4798      	blx	r3
   2e1cc:	0003      	movs	r3, r0
   2e1ce:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2e1d0:	231f      	movs	r3, #31
   2e1d2:	18fb      	adds	r3, r7, r3
   2e1d4:	781b      	ldrb	r3, [r3, #0]
   2e1d6:	2b00      	cmp	r3, #0
   2e1d8:	d142      	bne.n	2e260 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2e1da:	68bb      	ldr	r3, [r7, #8]
   2e1dc:	009a      	lsls	r2, r3, #2
   2e1de:	23fe      	movs	r3, #254	; 0xfe
   2e1e0:	005b      	lsls	r3, r3, #1
   2e1e2:	4013      	ands	r3, r2
   2e1e4:	3330      	adds	r3, #48	; 0x30
   2e1e6:	68fa      	ldr	r2, [r7, #12]
   2e1e8:	18d3      	adds	r3, r2, r3
   2e1ea:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2e1ec:	697b      	ldr	r3, [r7, #20]
   2e1ee:	3303      	adds	r3, #3
   2e1f0:	781b      	ldrb	r3, [r3, #0]
   2e1f2:	061a      	lsls	r2, r3, #24
   2e1f4:	697b      	ldr	r3, [r7, #20]
   2e1f6:	3302      	adds	r3, #2
   2e1f8:	781b      	ldrb	r3, [r3, #0]
   2e1fa:	041b      	lsls	r3, r3, #16
   2e1fc:	4313      	orrs	r3, r2
   2e1fe:	697a      	ldr	r2, [r7, #20]
   2e200:	3201      	adds	r2, #1
   2e202:	7812      	ldrb	r2, [r2, #0]
   2e204:	0212      	lsls	r2, r2, #8
   2e206:	4313      	orrs	r3, r2
   2e208:	697a      	ldr	r2, [r7, #20]
   2e20a:	7812      	ldrb	r2, [r2, #0]
   2e20c:	4313      	orrs	r3, r2
   2e20e:	0f1b      	lsrs	r3, r3, #28
   2e210:	071b      	lsls	r3, r3, #28
   2e212:	687a      	ldr	r2, [r7, #4]
   2e214:	4313      	orrs	r3, r2
   2e216:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2e218:	687b      	ldr	r3, [r7, #4]
   2e21a:	b2da      	uxtb	r2, r3
   2e21c:	697b      	ldr	r3, [r7, #20]
   2e21e:	701a      	strb	r2, [r3, #0]
   2e220:	697b      	ldr	r3, [r7, #20]
   2e222:	3301      	adds	r3, #1
   2e224:	687a      	ldr	r2, [r7, #4]
   2e226:	b292      	uxth	r2, r2
   2e228:	0a12      	lsrs	r2, r2, #8
   2e22a:	b292      	uxth	r2, r2
   2e22c:	b2d2      	uxtb	r2, r2
   2e22e:	701a      	strb	r2, [r3, #0]
   2e230:	697b      	ldr	r3, [r7, #20]
   2e232:	3302      	adds	r3, #2
   2e234:	687a      	ldr	r2, [r7, #4]
   2e236:	0c12      	lsrs	r2, r2, #16
   2e238:	b2d2      	uxtb	r2, r2
   2e23a:	701a      	strb	r2, [r3, #0]
   2e23c:	697b      	ldr	r3, [r7, #20]
   2e23e:	3303      	adds	r3, #3
   2e240:	687a      	ldr	r2, [r7, #4]
   2e242:	0e12      	lsrs	r2, r2, #24
   2e244:	b2d2      	uxtb	r2, r2
   2e246:	701a      	strb	r2, [r3, #0]
			break;
   2e248:	e00b      	b.n	2e262 <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2e24a:	231f      	movs	r3, #31
   2e24c:	18fb      	adds	r3, r7, r3
   2e24e:	2202      	movs	r2, #2
   2e250:	701a      	strb	r2, [r3, #0]
   2e252:	e006      	b.n	2e262 <put_fat+0x222>
			if (res != FR_OK) break;
   2e254:	46c0      	nop			; (mov r8, r8)
   2e256:	e004      	b.n	2e262 <put_fat+0x222>
			if (res != FR_OK) break;
   2e258:	46c0      	nop			; (mov r8, r8)
   2e25a:	e002      	b.n	2e262 <put_fat+0x222>
			if (res != FR_OK) break;
   2e25c:	46c0      	nop			; (mov r8, r8)
   2e25e:	e000      	b.n	2e262 <put_fat+0x222>
			if (res != FR_OK) break;
   2e260:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2e262:	68fb      	ldr	r3, [r7, #12]
   2e264:	2201      	movs	r2, #1
   2e266:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2e268:	231f      	movs	r3, #31
   2e26a:	18fb      	adds	r3, r7, r3
   2e26c:	781b      	ldrb	r3, [r3, #0]
}
   2e26e:	0018      	movs	r0, r3
   2e270:	46bd      	mov	sp, r7
   2e272:	b009      	add	sp, #36	; 0x24
   2e274:	bd90      	pop	{r4, r7, pc}
   2e276:	46c0      	nop			; (mov r8, r8)
   2e278:	0002dc3d 	.word	0x0002dc3d

0002e27c <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2e27c:	b590      	push	{r4, r7, lr}
   2e27e:	b085      	sub	sp, #20
   2e280:	af00      	add	r7, sp, #0
   2e282:	6078      	str	r0, [r7, #4]
   2e284:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2e286:	683b      	ldr	r3, [r7, #0]
   2e288:	2b01      	cmp	r3, #1
   2e28a:	d904      	bls.n	2e296 <remove_chain+0x1a>
   2e28c:	687b      	ldr	r3, [r7, #4]
   2e28e:	699a      	ldr	r2, [r3, #24]
   2e290:	683b      	ldr	r3, [r7, #0]
   2e292:	429a      	cmp	r2, r3
   2e294:	d804      	bhi.n	2e2a0 <remove_chain+0x24>
		res = FR_INT_ERR;
   2e296:	230f      	movs	r3, #15
   2e298:	18fb      	adds	r3, r7, r3
   2e29a:	2202      	movs	r2, #2
   2e29c:	701a      	strb	r2, [r3, #0]
   2e29e:	e045      	b.n	2e32c <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2e2a0:	230f      	movs	r3, #15
   2e2a2:	18fb      	adds	r3, r7, r3
   2e2a4:	2200      	movs	r2, #0
   2e2a6:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2e2a8:	e037      	b.n	2e31a <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2e2aa:	683a      	ldr	r2, [r7, #0]
   2e2ac:	687b      	ldr	r3, [r7, #4]
   2e2ae:	0011      	movs	r1, r2
   2e2b0:	0018      	movs	r0, r3
   2e2b2:	4b22      	ldr	r3, [pc, #136]	; (2e33c <remove_chain+0xc0>)
   2e2b4:	4798      	blx	r3
   2e2b6:	0003      	movs	r3, r0
   2e2b8:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2e2ba:	68bb      	ldr	r3, [r7, #8]
   2e2bc:	2b00      	cmp	r3, #0
   2e2be:	d032      	beq.n	2e326 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2e2c0:	68bb      	ldr	r3, [r7, #8]
   2e2c2:	2b01      	cmp	r3, #1
   2e2c4:	d104      	bne.n	2e2d0 <remove_chain+0x54>
   2e2c6:	230f      	movs	r3, #15
   2e2c8:	18fb      	adds	r3, r7, r3
   2e2ca:	2202      	movs	r2, #2
   2e2cc:	701a      	strb	r2, [r3, #0]
   2e2ce:	e02d      	b.n	2e32c <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2e2d0:	68bb      	ldr	r3, [r7, #8]
   2e2d2:	3301      	adds	r3, #1
   2e2d4:	d104      	bne.n	2e2e0 <remove_chain+0x64>
   2e2d6:	230f      	movs	r3, #15
   2e2d8:	18fb      	adds	r3, r7, r3
   2e2da:	2201      	movs	r2, #1
   2e2dc:	701a      	strb	r2, [r3, #0]
   2e2de:	e025      	b.n	2e32c <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2e2e0:	230f      	movs	r3, #15
   2e2e2:	18fc      	adds	r4, r7, r3
   2e2e4:	6839      	ldr	r1, [r7, #0]
   2e2e6:	687b      	ldr	r3, [r7, #4]
   2e2e8:	2200      	movs	r2, #0
   2e2ea:	0018      	movs	r0, r3
   2e2ec:	4b14      	ldr	r3, [pc, #80]	; (2e340 <remove_chain+0xc4>)
   2e2ee:	4798      	blx	r3
   2e2f0:	0003      	movs	r3, r0
   2e2f2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2e2f4:	230f      	movs	r3, #15
   2e2f6:	18fb      	adds	r3, r7, r3
   2e2f8:	781b      	ldrb	r3, [r3, #0]
   2e2fa:	2b00      	cmp	r3, #0
   2e2fc:	d115      	bne.n	2e32a <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2e2fe:	687b      	ldr	r3, [r7, #4]
   2e300:	691b      	ldr	r3, [r3, #16]
   2e302:	3301      	adds	r3, #1
   2e304:	d007      	beq.n	2e316 <remove_chain+0x9a>
				fs->free_clust++;
   2e306:	687b      	ldr	r3, [r7, #4]
   2e308:	691b      	ldr	r3, [r3, #16]
   2e30a:	1c5a      	adds	r2, r3, #1
   2e30c:	687b      	ldr	r3, [r7, #4]
   2e30e:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2e310:	687b      	ldr	r3, [r7, #4]
   2e312:	2201      	movs	r2, #1
   2e314:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2e316:	68bb      	ldr	r3, [r7, #8]
   2e318:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2e31a:	687b      	ldr	r3, [r7, #4]
   2e31c:	699a      	ldr	r2, [r3, #24]
   2e31e:	683b      	ldr	r3, [r7, #0]
   2e320:	429a      	cmp	r2, r3
   2e322:	d8c2      	bhi.n	2e2aa <remove_chain+0x2e>
   2e324:	e002      	b.n	2e32c <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2e326:	46c0      	nop			; (mov r8, r8)
   2e328:	e000      	b.n	2e32c <remove_chain+0xb0>
			if (res != FR_OK) break;
   2e32a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2e32c:	230f      	movs	r3, #15
   2e32e:	18fb      	adds	r3, r7, r3
   2e330:	781b      	ldrb	r3, [r3, #0]
}
   2e332:	0018      	movs	r0, r3
   2e334:	46bd      	mov	sp, r7
   2e336:	b005      	add	sp, #20
   2e338:	bd90      	pop	{r4, r7, pc}
   2e33a:	46c0      	nop			; (mov r8, r8)
   2e33c:	0002ded5 	.word	0x0002ded5
   2e340:	0002e041 	.word	0x0002e041

0002e344 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2e344:	b590      	push	{r4, r7, lr}
   2e346:	b087      	sub	sp, #28
   2e348:	af00      	add	r7, sp, #0
   2e34a:	6078      	str	r0, [r7, #4]
   2e34c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2e34e:	683b      	ldr	r3, [r7, #0]
   2e350:	2b00      	cmp	r3, #0
   2e352:	d10d      	bne.n	2e370 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2e354:	687b      	ldr	r3, [r7, #4]
   2e356:	68db      	ldr	r3, [r3, #12]
   2e358:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2e35a:	693b      	ldr	r3, [r7, #16]
   2e35c:	2b00      	cmp	r3, #0
   2e35e:	d004      	beq.n	2e36a <create_chain+0x26>
   2e360:	687b      	ldr	r3, [r7, #4]
   2e362:	699a      	ldr	r2, [r3, #24]
   2e364:	693b      	ldr	r3, [r7, #16]
   2e366:	429a      	cmp	r2, r3
   2e368:	d818      	bhi.n	2e39c <create_chain+0x58>
   2e36a:	2301      	movs	r3, #1
   2e36c:	613b      	str	r3, [r7, #16]
   2e36e:	e015      	b.n	2e39c <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2e370:	683a      	ldr	r2, [r7, #0]
   2e372:	687b      	ldr	r3, [r7, #4]
   2e374:	0011      	movs	r1, r2
   2e376:	0018      	movs	r0, r3
   2e378:	4b3e      	ldr	r3, [pc, #248]	; (2e474 <create_chain+0x130>)
   2e37a:	4798      	blx	r3
   2e37c:	0003      	movs	r3, r0
   2e37e:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2e380:	68bb      	ldr	r3, [r7, #8]
   2e382:	2b01      	cmp	r3, #1
   2e384:	d801      	bhi.n	2e38a <create_chain+0x46>
   2e386:	2301      	movs	r3, #1
   2e388:	e070      	b.n	2e46c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2e38a:	687b      	ldr	r3, [r7, #4]
   2e38c:	699a      	ldr	r2, [r3, #24]
   2e38e:	68bb      	ldr	r3, [r7, #8]
   2e390:	429a      	cmp	r2, r3
   2e392:	d901      	bls.n	2e398 <create_chain+0x54>
   2e394:	68bb      	ldr	r3, [r7, #8]
   2e396:	e069      	b.n	2e46c <create_chain+0x128>
		scl = clst;
   2e398:	683b      	ldr	r3, [r7, #0]
   2e39a:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2e39c:	693b      	ldr	r3, [r7, #16]
   2e39e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2e3a0:	697b      	ldr	r3, [r7, #20]
   2e3a2:	3301      	adds	r3, #1
   2e3a4:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2e3a6:	687b      	ldr	r3, [r7, #4]
   2e3a8:	699a      	ldr	r2, [r3, #24]
   2e3aa:	697b      	ldr	r3, [r7, #20]
   2e3ac:	429a      	cmp	r2, r3
   2e3ae:	d807      	bhi.n	2e3c0 <create_chain+0x7c>
			ncl = 2;
   2e3b0:	2302      	movs	r3, #2
   2e3b2:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2e3b4:	697a      	ldr	r2, [r7, #20]
   2e3b6:	693b      	ldr	r3, [r7, #16]
   2e3b8:	429a      	cmp	r2, r3
   2e3ba:	d901      	bls.n	2e3c0 <create_chain+0x7c>
   2e3bc:	2300      	movs	r3, #0
   2e3be:	e055      	b.n	2e46c <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2e3c0:	697a      	ldr	r2, [r7, #20]
   2e3c2:	687b      	ldr	r3, [r7, #4]
   2e3c4:	0011      	movs	r1, r2
   2e3c6:	0018      	movs	r0, r3
   2e3c8:	4b2a      	ldr	r3, [pc, #168]	; (2e474 <create_chain+0x130>)
   2e3ca:	4798      	blx	r3
   2e3cc:	0003      	movs	r3, r0
   2e3ce:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2e3d0:	68bb      	ldr	r3, [r7, #8]
   2e3d2:	2b00      	cmp	r3, #0
   2e3d4:	d00d      	beq.n	2e3f2 <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2e3d6:	68bb      	ldr	r3, [r7, #8]
   2e3d8:	3301      	adds	r3, #1
   2e3da:	d002      	beq.n	2e3e2 <create_chain+0x9e>
   2e3dc:	68bb      	ldr	r3, [r7, #8]
   2e3de:	2b01      	cmp	r3, #1
   2e3e0:	d101      	bne.n	2e3e6 <create_chain+0xa2>
			return cs;
   2e3e2:	68bb      	ldr	r3, [r7, #8]
   2e3e4:	e042      	b.n	2e46c <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2e3e6:	697a      	ldr	r2, [r7, #20]
   2e3e8:	693b      	ldr	r3, [r7, #16]
   2e3ea:	429a      	cmp	r2, r3
   2e3ec:	d1d8      	bne.n	2e3a0 <create_chain+0x5c>
   2e3ee:	2300      	movs	r3, #0
   2e3f0:	e03c      	b.n	2e46c <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2e3f2:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2e3f4:	230f      	movs	r3, #15
   2e3f6:	18fc      	adds	r4, r7, r3
   2e3f8:	4a1f      	ldr	r2, [pc, #124]	; (2e478 <create_chain+0x134>)
   2e3fa:	6979      	ldr	r1, [r7, #20]
   2e3fc:	687b      	ldr	r3, [r7, #4]
   2e3fe:	0018      	movs	r0, r3
   2e400:	4b1e      	ldr	r3, [pc, #120]	; (2e47c <create_chain+0x138>)
   2e402:	4798      	blx	r3
   2e404:	0003      	movs	r3, r0
   2e406:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2e408:	230f      	movs	r3, #15
   2e40a:	18fb      	adds	r3, r7, r3
   2e40c:	781b      	ldrb	r3, [r3, #0]
   2e40e:	2b00      	cmp	r3, #0
   2e410:	d10c      	bne.n	2e42c <create_chain+0xe8>
   2e412:	683b      	ldr	r3, [r7, #0]
   2e414:	2b00      	cmp	r3, #0
   2e416:	d009      	beq.n	2e42c <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2e418:	230f      	movs	r3, #15
   2e41a:	18fc      	adds	r4, r7, r3
   2e41c:	697a      	ldr	r2, [r7, #20]
   2e41e:	6839      	ldr	r1, [r7, #0]
   2e420:	687b      	ldr	r3, [r7, #4]
   2e422:	0018      	movs	r0, r3
   2e424:	4b15      	ldr	r3, [pc, #84]	; (2e47c <create_chain+0x138>)
   2e426:	4798      	blx	r3
   2e428:	0003      	movs	r3, r0
   2e42a:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2e42c:	230f      	movs	r3, #15
   2e42e:	18fb      	adds	r3, r7, r3
   2e430:	781b      	ldrb	r3, [r3, #0]
   2e432:	2b00      	cmp	r3, #0
   2e434:	d10f      	bne.n	2e456 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2e436:	687b      	ldr	r3, [r7, #4]
   2e438:	697a      	ldr	r2, [r7, #20]
   2e43a:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2e43c:	687b      	ldr	r3, [r7, #4]
   2e43e:	691b      	ldr	r3, [r3, #16]
   2e440:	3301      	adds	r3, #1
   2e442:	d012      	beq.n	2e46a <create_chain+0x126>
			fs->free_clust--;
   2e444:	687b      	ldr	r3, [r7, #4]
   2e446:	691b      	ldr	r3, [r3, #16]
   2e448:	1e5a      	subs	r2, r3, #1
   2e44a:	687b      	ldr	r3, [r7, #4]
   2e44c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2e44e:	687b      	ldr	r3, [r7, #4]
   2e450:	2201      	movs	r2, #1
   2e452:	715a      	strb	r2, [r3, #5]
   2e454:	e009      	b.n	2e46a <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2e456:	230f      	movs	r3, #15
   2e458:	18fb      	adds	r3, r7, r3
   2e45a:	781b      	ldrb	r3, [r3, #0]
   2e45c:	2b01      	cmp	r3, #1
   2e45e:	d102      	bne.n	2e466 <create_chain+0x122>
   2e460:	2301      	movs	r3, #1
   2e462:	425b      	negs	r3, r3
   2e464:	e000      	b.n	2e468 <create_chain+0x124>
   2e466:	2301      	movs	r3, #1
   2e468:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2e46a:	697b      	ldr	r3, [r7, #20]
}
   2e46c:	0018      	movs	r0, r3
   2e46e:	46bd      	mov	sp, r7
   2e470:	b007      	add	sp, #28
   2e472:	bd90      	pop	{r4, r7, pc}
   2e474:	0002ded5 	.word	0x0002ded5
   2e478:	0fffffff 	.word	0x0fffffff
   2e47c:	0002e041 	.word	0x0002e041

0002e480 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2e480:	b580      	push	{r7, lr}
   2e482:	b084      	sub	sp, #16
   2e484:	af00      	add	r7, sp, #0
   2e486:	6078      	str	r0, [r7, #4]
   2e488:	000a      	movs	r2, r1
   2e48a:	1cbb      	adds	r3, r7, #2
   2e48c:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2e48e:	687b      	ldr	r3, [r7, #4]
   2e490:	1cba      	adds	r2, r7, #2
   2e492:	8812      	ldrh	r2, [r2, #0]
   2e494:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2e496:	687b      	ldr	r3, [r7, #4]
   2e498:	689b      	ldr	r3, [r3, #8]
   2e49a:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2e49c:	68fb      	ldr	r3, [r7, #12]
   2e49e:	2b01      	cmp	r3, #1
   2e4a0:	d005      	beq.n	2e4ae <dir_sdi+0x2e>
   2e4a2:	687b      	ldr	r3, [r7, #4]
   2e4a4:	681b      	ldr	r3, [r3, #0]
   2e4a6:	699a      	ldr	r2, [r3, #24]
   2e4a8:	68fb      	ldr	r3, [r7, #12]
   2e4aa:	429a      	cmp	r2, r3
   2e4ac:	d801      	bhi.n	2e4b2 <dir_sdi+0x32>
		return FR_INT_ERR;
   2e4ae:	2302      	movs	r3, #2
   2e4b0:	e075      	b.n	2e59e <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2e4b2:	68fb      	ldr	r3, [r7, #12]
   2e4b4:	2b00      	cmp	r3, #0
   2e4b6:	d108      	bne.n	2e4ca <dir_sdi+0x4a>
   2e4b8:	687b      	ldr	r3, [r7, #4]
   2e4ba:	681b      	ldr	r3, [r3, #0]
   2e4bc:	781b      	ldrb	r3, [r3, #0]
   2e4be:	2b03      	cmp	r3, #3
   2e4c0:	d103      	bne.n	2e4ca <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2e4c2:	687b      	ldr	r3, [r7, #4]
   2e4c4:	681b      	ldr	r3, [r3, #0]
   2e4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2e4c8:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2e4ca:	68fb      	ldr	r3, [r7, #12]
   2e4cc:	2b00      	cmp	r3, #0
   2e4ce:	d116      	bne.n	2e4fe <dir_sdi+0x7e>
		dj->clust = clst;
   2e4d0:	687b      	ldr	r3, [r7, #4]
   2e4d2:	68fa      	ldr	r2, [r7, #12]
   2e4d4:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2e4d6:	687b      	ldr	r3, [r7, #4]
   2e4d8:	681b      	ldr	r3, [r3, #0]
   2e4da:	891b      	ldrh	r3, [r3, #8]
   2e4dc:	1cba      	adds	r2, r7, #2
   2e4de:	8812      	ldrh	r2, [r2, #0]
   2e4e0:	429a      	cmp	r2, r3
   2e4e2:	d301      	bcc.n	2e4e8 <dir_sdi+0x68>
			return FR_INT_ERR;
   2e4e4:	2302      	movs	r3, #2
   2e4e6:	e05a      	b.n	2e59e <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2e4e8:	687b      	ldr	r3, [r7, #4]
   2e4ea:	681b      	ldr	r3, [r3, #0]
   2e4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2e4ee:	1cba      	adds	r2, r7, #2
   2e4f0:	8812      	ldrh	r2, [r2, #0]
   2e4f2:	0912      	lsrs	r2, r2, #4
   2e4f4:	b292      	uxth	r2, r2
   2e4f6:	189a      	adds	r2, r3, r2
   2e4f8:	687b      	ldr	r3, [r7, #4]
   2e4fa:	611a      	str	r2, [r3, #16]
   2e4fc:	e042      	b.n	2e584 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2e4fe:	687b      	ldr	r3, [r7, #4]
   2e500:	681b      	ldr	r3, [r3, #0]
   2e502:	789b      	ldrb	r3, [r3, #2]
   2e504:	b29a      	uxth	r2, r3
   2e506:	230a      	movs	r3, #10
   2e508:	18fb      	adds	r3, r7, r3
   2e50a:	0112      	lsls	r2, r2, #4
   2e50c:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2e50e:	e020      	b.n	2e552 <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2e510:	687b      	ldr	r3, [r7, #4]
   2e512:	681b      	ldr	r3, [r3, #0]
   2e514:	68fa      	ldr	r2, [r7, #12]
   2e516:	0011      	movs	r1, r2
   2e518:	0018      	movs	r0, r3
   2e51a:	4b23      	ldr	r3, [pc, #140]	; (2e5a8 <dir_sdi+0x128>)
   2e51c:	4798      	blx	r3
   2e51e:	0003      	movs	r3, r0
   2e520:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2e522:	68fb      	ldr	r3, [r7, #12]
   2e524:	3301      	adds	r3, #1
   2e526:	d101      	bne.n	2e52c <dir_sdi+0xac>
   2e528:	2301      	movs	r3, #1
   2e52a:	e038      	b.n	2e59e <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2e52c:	68fb      	ldr	r3, [r7, #12]
   2e52e:	2b01      	cmp	r3, #1
   2e530:	d905      	bls.n	2e53e <dir_sdi+0xbe>
   2e532:	687b      	ldr	r3, [r7, #4]
   2e534:	681b      	ldr	r3, [r3, #0]
   2e536:	699a      	ldr	r2, [r3, #24]
   2e538:	68fb      	ldr	r3, [r7, #12]
   2e53a:	429a      	cmp	r2, r3
   2e53c:	d801      	bhi.n	2e542 <dir_sdi+0xc2>
				return FR_INT_ERR;
   2e53e:	2302      	movs	r3, #2
   2e540:	e02d      	b.n	2e59e <dir_sdi+0x11e>
			idx -= ic;
   2e542:	1cbb      	adds	r3, r7, #2
   2e544:	1cb9      	adds	r1, r7, #2
   2e546:	220a      	movs	r2, #10
   2e548:	18ba      	adds	r2, r7, r2
   2e54a:	8809      	ldrh	r1, [r1, #0]
   2e54c:	8812      	ldrh	r2, [r2, #0]
   2e54e:	1a8a      	subs	r2, r1, r2
   2e550:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2e552:	1cba      	adds	r2, r7, #2
   2e554:	230a      	movs	r3, #10
   2e556:	18fb      	adds	r3, r7, r3
   2e558:	8812      	ldrh	r2, [r2, #0]
   2e55a:	881b      	ldrh	r3, [r3, #0]
   2e55c:	429a      	cmp	r2, r3
   2e55e:	d2d7      	bcs.n	2e510 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2e560:	687b      	ldr	r3, [r7, #4]
   2e562:	68fa      	ldr	r2, [r7, #12]
   2e564:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2e566:	687b      	ldr	r3, [r7, #4]
   2e568:	681b      	ldr	r3, [r3, #0]
   2e56a:	68fa      	ldr	r2, [r7, #12]
   2e56c:	0011      	movs	r1, r2
   2e56e:	0018      	movs	r0, r3
   2e570:	4b0e      	ldr	r3, [pc, #56]	; (2e5ac <dir_sdi+0x12c>)
   2e572:	4798      	blx	r3
   2e574:	0002      	movs	r2, r0
   2e576:	1cbb      	adds	r3, r7, #2
   2e578:	881b      	ldrh	r3, [r3, #0]
   2e57a:	091b      	lsrs	r3, r3, #4
   2e57c:	b29b      	uxth	r3, r3
   2e57e:	18d2      	adds	r2, r2, r3
   2e580:	687b      	ldr	r3, [r7, #4]
   2e582:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2e584:	687b      	ldr	r3, [r7, #4]
   2e586:	681b      	ldr	r3, [r3, #0]
   2e588:	3330      	adds	r3, #48	; 0x30
   2e58a:	001a      	movs	r2, r3
   2e58c:	1cbb      	adds	r3, r7, #2
   2e58e:	881b      	ldrh	r3, [r3, #0]
   2e590:	210f      	movs	r1, #15
   2e592:	400b      	ands	r3, r1
   2e594:	015b      	lsls	r3, r3, #5
   2e596:	18d2      	adds	r2, r2, r3
   2e598:	687b      	ldr	r3, [r7, #4]
   2e59a:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2e59c:	2300      	movs	r3, #0
}
   2e59e:	0018      	movs	r0, r3
   2e5a0:	46bd      	mov	sp, r7
   2e5a2:	b004      	add	sp, #16
   2e5a4:	bd80      	pop	{r7, pc}
   2e5a6:	46c0      	nop			; (mov r8, r8)
   2e5a8:	0002ded5 	.word	0x0002ded5
   2e5ac:	0002de9d 	.word	0x0002de9d

0002e5b0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2e5b0:	b590      	push	{r4, r7, lr}
   2e5b2:	b085      	sub	sp, #20
   2e5b4:	af00      	add	r7, sp, #0
   2e5b6:	6078      	str	r0, [r7, #4]
   2e5b8:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2e5ba:	687b      	ldr	r3, [r7, #4]
   2e5bc:	88da      	ldrh	r2, [r3, #6]
   2e5be:	2308      	movs	r3, #8
   2e5c0:	18fb      	adds	r3, r7, r3
   2e5c2:	3201      	adds	r2, #1
   2e5c4:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2e5c6:	2308      	movs	r3, #8
   2e5c8:	18fb      	adds	r3, r7, r3
   2e5ca:	881b      	ldrh	r3, [r3, #0]
   2e5cc:	2b00      	cmp	r3, #0
   2e5ce:	d003      	beq.n	2e5d8 <dir_next+0x28>
   2e5d0:	687b      	ldr	r3, [r7, #4]
   2e5d2:	691b      	ldr	r3, [r3, #16]
   2e5d4:	2b00      	cmp	r3, #0
   2e5d6:	d101      	bne.n	2e5dc <dir_next+0x2c>
		return FR_NO_FILE;
   2e5d8:	2304      	movs	r3, #4
   2e5da:	e0d2      	b.n	2e782 <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2e5dc:	2308      	movs	r3, #8
   2e5de:	18fb      	adds	r3, r7, r3
   2e5e0:	881b      	ldrh	r3, [r3, #0]
   2e5e2:	220f      	movs	r2, #15
   2e5e4:	4013      	ands	r3, r2
   2e5e6:	b29b      	uxth	r3, r3
   2e5e8:	2b00      	cmp	r3, #0
   2e5ea:	d000      	beq.n	2e5ee <dir_next+0x3e>
   2e5ec:	e0b6      	b.n	2e75c <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2e5ee:	687b      	ldr	r3, [r7, #4]
   2e5f0:	691b      	ldr	r3, [r3, #16]
   2e5f2:	1c5a      	adds	r2, r3, #1
   2e5f4:	687b      	ldr	r3, [r7, #4]
   2e5f6:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2e5f8:	687b      	ldr	r3, [r7, #4]
   2e5fa:	68db      	ldr	r3, [r3, #12]
   2e5fc:	2b00      	cmp	r3, #0
   2e5fe:	d10a      	bne.n	2e616 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2e600:	687b      	ldr	r3, [r7, #4]
   2e602:	681b      	ldr	r3, [r3, #0]
   2e604:	891b      	ldrh	r3, [r3, #8]
   2e606:	2208      	movs	r2, #8
   2e608:	18ba      	adds	r2, r7, r2
   2e60a:	8812      	ldrh	r2, [r2, #0]
   2e60c:	429a      	cmp	r2, r3
   2e60e:	d200      	bcs.n	2e612 <dir_next+0x62>
   2e610:	e0a4      	b.n	2e75c <dir_next+0x1ac>
				return FR_NO_FILE;
   2e612:	2304      	movs	r3, #4
   2e614:	e0b5      	b.n	2e782 <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2e616:	2308      	movs	r3, #8
   2e618:	18fb      	adds	r3, r7, r3
   2e61a:	881b      	ldrh	r3, [r3, #0]
   2e61c:	091b      	lsrs	r3, r3, #4
   2e61e:	b29b      	uxth	r3, r3
   2e620:	001a      	movs	r2, r3
   2e622:	687b      	ldr	r3, [r7, #4]
   2e624:	681b      	ldr	r3, [r3, #0]
   2e626:	789b      	ldrb	r3, [r3, #2]
   2e628:	3b01      	subs	r3, #1
   2e62a:	4013      	ands	r3, r2
   2e62c:	d000      	beq.n	2e630 <dir_next+0x80>
   2e62e:	e095      	b.n	2e75c <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2e630:	687b      	ldr	r3, [r7, #4]
   2e632:	681a      	ldr	r2, [r3, #0]
   2e634:	687b      	ldr	r3, [r7, #4]
   2e636:	68db      	ldr	r3, [r3, #12]
   2e638:	0019      	movs	r1, r3
   2e63a:	0010      	movs	r0, r2
   2e63c:	4b53      	ldr	r3, [pc, #332]	; (2e78c <dir_next+0x1dc>)
   2e63e:	4798      	blx	r3
   2e640:	0003      	movs	r3, r0
   2e642:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2e644:	68fb      	ldr	r3, [r7, #12]
   2e646:	2b01      	cmp	r3, #1
   2e648:	d801      	bhi.n	2e64e <dir_next+0x9e>
   2e64a:	2302      	movs	r3, #2
   2e64c:	e099      	b.n	2e782 <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2e64e:	68fb      	ldr	r3, [r7, #12]
   2e650:	3301      	adds	r3, #1
   2e652:	d101      	bne.n	2e658 <dir_next+0xa8>
   2e654:	2301      	movs	r3, #1
   2e656:	e094      	b.n	2e782 <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2e658:	687b      	ldr	r3, [r7, #4]
   2e65a:	681b      	ldr	r3, [r3, #0]
   2e65c:	699a      	ldr	r2, [r3, #24]
   2e65e:	68fb      	ldr	r3, [r7, #12]
   2e660:	429a      	cmp	r2, r3
   2e662:	d900      	bls.n	2e666 <dir_next+0xb6>
   2e664:	e06d      	b.n	2e742 <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2e666:	683b      	ldr	r3, [r7, #0]
   2e668:	2b00      	cmp	r3, #0
   2e66a:	d101      	bne.n	2e670 <dir_next+0xc0>
   2e66c:	2304      	movs	r3, #4
   2e66e:	e088      	b.n	2e782 <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2e670:	687b      	ldr	r3, [r7, #4]
   2e672:	681a      	ldr	r2, [r3, #0]
   2e674:	687b      	ldr	r3, [r7, #4]
   2e676:	68db      	ldr	r3, [r3, #12]
   2e678:	0019      	movs	r1, r3
   2e67a:	0010      	movs	r0, r2
   2e67c:	4b44      	ldr	r3, [pc, #272]	; (2e790 <dir_next+0x1e0>)
   2e67e:	4798      	blx	r3
   2e680:	0003      	movs	r3, r0
   2e682:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2e684:	68fb      	ldr	r3, [r7, #12]
   2e686:	2b00      	cmp	r3, #0
   2e688:	d101      	bne.n	2e68e <dir_next+0xde>
   2e68a:	2307      	movs	r3, #7
   2e68c:	e079      	b.n	2e782 <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2e68e:	68fb      	ldr	r3, [r7, #12]
   2e690:	2b01      	cmp	r3, #1
   2e692:	d101      	bne.n	2e698 <dir_next+0xe8>
   2e694:	2302      	movs	r3, #2
   2e696:	e074      	b.n	2e782 <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2e698:	68fb      	ldr	r3, [r7, #12]
   2e69a:	3301      	adds	r3, #1
   2e69c:	d101      	bne.n	2e6a2 <dir_next+0xf2>
   2e69e:	2301      	movs	r3, #1
   2e6a0:	e06f      	b.n	2e782 <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2e6a2:	687b      	ldr	r3, [r7, #4]
   2e6a4:	681b      	ldr	r3, [r3, #0]
   2e6a6:	2100      	movs	r1, #0
   2e6a8:	0018      	movs	r0, r3
   2e6aa:	4b3a      	ldr	r3, [pc, #232]	; (2e794 <dir_next+0x1e4>)
   2e6ac:	4798      	blx	r3
   2e6ae:	1e03      	subs	r3, r0, #0
   2e6b0:	d001      	beq.n	2e6b6 <dir_next+0x106>
   2e6b2:	2301      	movs	r3, #1
   2e6b4:	e065      	b.n	2e782 <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2e6b6:	687b      	ldr	r3, [r7, #4]
   2e6b8:	681b      	ldr	r3, [r3, #0]
   2e6ba:	3330      	adds	r3, #48	; 0x30
   2e6bc:	0018      	movs	r0, r3
   2e6be:	2380      	movs	r3, #128	; 0x80
   2e6c0:	009b      	lsls	r3, r3, #2
   2e6c2:	001a      	movs	r2, r3
   2e6c4:	2100      	movs	r1, #0
   2e6c6:	4b34      	ldr	r3, [pc, #208]	; (2e798 <dir_next+0x1e8>)
   2e6c8:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2e6ca:	687b      	ldr	r3, [r7, #4]
   2e6cc:	681c      	ldr	r4, [r3, #0]
   2e6ce:	687b      	ldr	r3, [r7, #4]
   2e6d0:	681b      	ldr	r3, [r3, #0]
   2e6d2:	68fa      	ldr	r2, [r7, #12]
   2e6d4:	0011      	movs	r1, r2
   2e6d6:	0018      	movs	r0, r3
   2e6d8:	4b30      	ldr	r3, [pc, #192]	; (2e79c <dir_next+0x1ec>)
   2e6da:	4798      	blx	r3
   2e6dc:	0003      	movs	r3, r0
   2e6de:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2e6e0:	230b      	movs	r3, #11
   2e6e2:	18fb      	adds	r3, r7, r3
   2e6e4:	2200      	movs	r2, #0
   2e6e6:	701a      	strb	r2, [r3, #0]
   2e6e8:	e019      	b.n	2e71e <dir_next+0x16e>
						dj->fs->wflag = 1;
   2e6ea:	687b      	ldr	r3, [r7, #4]
   2e6ec:	681b      	ldr	r3, [r3, #0]
   2e6ee:	2201      	movs	r2, #1
   2e6f0:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2e6f2:	687b      	ldr	r3, [r7, #4]
   2e6f4:	681b      	ldr	r3, [r3, #0]
   2e6f6:	2100      	movs	r1, #0
   2e6f8:	0018      	movs	r0, r3
   2e6fa:	4b26      	ldr	r3, [pc, #152]	; (2e794 <dir_next+0x1e4>)
   2e6fc:	4798      	blx	r3
   2e6fe:	1e03      	subs	r3, r0, #0
   2e700:	d001      	beq.n	2e706 <dir_next+0x156>
   2e702:	2301      	movs	r3, #1
   2e704:	e03d      	b.n	2e782 <dir_next+0x1d2>
						dj->fs->winsect++;
   2e706:	687b      	ldr	r3, [r7, #4]
   2e708:	681b      	ldr	r3, [r3, #0]
   2e70a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e70c:	3201      	adds	r2, #1
   2e70e:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2e710:	230b      	movs	r3, #11
   2e712:	18fb      	adds	r3, r7, r3
   2e714:	781a      	ldrb	r2, [r3, #0]
   2e716:	230b      	movs	r3, #11
   2e718:	18fb      	adds	r3, r7, r3
   2e71a:	3201      	adds	r2, #1
   2e71c:	701a      	strb	r2, [r3, #0]
   2e71e:	687b      	ldr	r3, [r7, #4]
   2e720:	681b      	ldr	r3, [r3, #0]
   2e722:	789b      	ldrb	r3, [r3, #2]
   2e724:	220b      	movs	r2, #11
   2e726:	18ba      	adds	r2, r7, r2
   2e728:	7812      	ldrb	r2, [r2, #0]
   2e72a:	429a      	cmp	r2, r3
   2e72c:	d3dd      	bcc.n	2e6ea <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2e72e:	687b      	ldr	r3, [r7, #4]
   2e730:	681b      	ldr	r3, [r3, #0]
   2e732:	687a      	ldr	r2, [r7, #4]
   2e734:	6812      	ldr	r2, [r2, #0]
   2e736:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2e738:	220b      	movs	r2, #11
   2e73a:	18ba      	adds	r2, r7, r2
   2e73c:	7812      	ldrb	r2, [r2, #0]
   2e73e:	1a8a      	subs	r2, r1, r2
   2e740:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2e742:	687b      	ldr	r3, [r7, #4]
   2e744:	68fa      	ldr	r2, [r7, #12]
   2e746:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2e748:	687b      	ldr	r3, [r7, #4]
   2e74a:	681b      	ldr	r3, [r3, #0]
   2e74c:	68fa      	ldr	r2, [r7, #12]
   2e74e:	0011      	movs	r1, r2
   2e750:	0018      	movs	r0, r3
   2e752:	4b12      	ldr	r3, [pc, #72]	; (2e79c <dir_next+0x1ec>)
   2e754:	4798      	blx	r3
   2e756:	0002      	movs	r2, r0
   2e758:	687b      	ldr	r3, [r7, #4]
   2e75a:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2e75c:	687b      	ldr	r3, [r7, #4]
   2e75e:	2208      	movs	r2, #8
   2e760:	18ba      	adds	r2, r7, r2
   2e762:	8812      	ldrh	r2, [r2, #0]
   2e764:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2e766:	687b      	ldr	r3, [r7, #4]
   2e768:	681b      	ldr	r3, [r3, #0]
   2e76a:	3330      	adds	r3, #48	; 0x30
   2e76c:	001a      	movs	r2, r3
   2e76e:	2308      	movs	r3, #8
   2e770:	18fb      	adds	r3, r7, r3
   2e772:	881b      	ldrh	r3, [r3, #0]
   2e774:	210f      	movs	r1, #15
   2e776:	400b      	ands	r3, r1
   2e778:	015b      	lsls	r3, r3, #5
   2e77a:	18d2      	adds	r2, r2, r3
   2e77c:	687b      	ldr	r3, [r7, #4]
   2e77e:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2e780:	2300      	movs	r3, #0
}
   2e782:	0018      	movs	r0, r3
   2e784:	46bd      	mov	sp, r7
   2e786:	b005      	add	sp, #20
   2e788:	bd90      	pop	{r4, r7, pc}
   2e78a:	46c0      	nop			; (mov r8, r8)
   2e78c:	0002ded5 	.word	0x0002ded5
   2e790:	0002e345 	.word	0x0002e345
   2e794:	0002dc3d 	.word	0x0002dc3d
   2e798:	0002db91 	.word	0x0002db91
   2e79c:	0002de9d 	.word	0x0002de9d

0002e7a0 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2e7a0:	b590      	push	{r4, r7, lr}
   2e7a2:	b087      	sub	sp, #28
   2e7a4:	af00      	add	r7, sp, #0
   2e7a6:	6078      	str	r0, [r7, #4]
   2e7a8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2e7aa:	683b      	ldr	r3, [r7, #0]
   2e7ac:	781b      	ldrb	r3, [r3, #0]
   2e7ae:	001a      	movs	r2, r3
   2e7b0:	2340      	movs	r3, #64	; 0x40
   2e7b2:	439a      	bics	r2, r3
   2e7b4:	0013      	movs	r3, r2
   2e7b6:	1e5a      	subs	r2, r3, #1
   2e7b8:	0013      	movs	r3, r2
   2e7ba:	005b      	lsls	r3, r3, #1
   2e7bc:	189b      	adds	r3, r3, r2
   2e7be:	009b      	lsls	r3, r3, #2
   2e7c0:	189b      	adds	r3, r3, r2
   2e7c2:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2e7c4:	2300      	movs	r3, #0
   2e7c6:	613b      	str	r3, [r7, #16]
   2e7c8:	230e      	movs	r3, #14
   2e7ca:	18fb      	adds	r3, r7, r3
   2e7cc:	2201      	movs	r2, #1
   2e7ce:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2e7d0:	4a31      	ldr	r2, [pc, #196]	; (2e898 <cmp_lfn+0xf8>)
   2e7d2:	693b      	ldr	r3, [r7, #16]
   2e7d4:	18d3      	adds	r3, r2, r3
   2e7d6:	781b      	ldrb	r3, [r3, #0]
   2e7d8:	3301      	adds	r3, #1
   2e7da:	683a      	ldr	r2, [r7, #0]
   2e7dc:	18d3      	adds	r3, r2, r3
   2e7de:	781b      	ldrb	r3, [r3, #0]
   2e7e0:	021b      	lsls	r3, r3, #8
   2e7e2:	b21a      	sxth	r2, r3
   2e7e4:	492c      	ldr	r1, [pc, #176]	; (2e898 <cmp_lfn+0xf8>)
   2e7e6:	693b      	ldr	r3, [r7, #16]
   2e7e8:	18cb      	adds	r3, r1, r3
   2e7ea:	781b      	ldrb	r3, [r3, #0]
   2e7ec:	0019      	movs	r1, r3
   2e7ee:	683b      	ldr	r3, [r7, #0]
   2e7f0:	185b      	adds	r3, r3, r1
   2e7f2:	781b      	ldrb	r3, [r3, #0]
   2e7f4:	b21b      	sxth	r3, r3
   2e7f6:	4313      	orrs	r3, r2
   2e7f8:	b21a      	sxth	r2, r3
   2e7fa:	230c      	movs	r3, #12
   2e7fc:	18fb      	adds	r3, r7, r3
   2e7fe:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2e800:	230e      	movs	r3, #14
   2e802:	18fb      	adds	r3, r7, r3
   2e804:	881b      	ldrh	r3, [r3, #0]
   2e806:	2b00      	cmp	r3, #0
   2e808:	d01f      	beq.n	2e84a <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2e80a:	230e      	movs	r3, #14
   2e80c:	18fc      	adds	r4, r7, r3
   2e80e:	230c      	movs	r3, #12
   2e810:	18fb      	adds	r3, r7, r3
   2e812:	881b      	ldrh	r3, [r3, #0]
   2e814:	0018      	movs	r0, r3
   2e816:	4b21      	ldr	r3, [pc, #132]	; (2e89c <cmp_lfn+0xfc>)
   2e818:	4798      	blx	r3
   2e81a:	0003      	movs	r3, r0
   2e81c:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2e81e:	697b      	ldr	r3, [r7, #20]
   2e820:	2bfe      	cmp	r3, #254	; 0xfe
   2e822:	d810      	bhi.n	2e846 <cmp_lfn+0xa6>
   2e824:	697b      	ldr	r3, [r7, #20]
   2e826:	1c5a      	adds	r2, r3, #1
   2e828:	617a      	str	r2, [r7, #20]
   2e82a:	005b      	lsls	r3, r3, #1
   2e82c:	687a      	ldr	r2, [r7, #4]
   2e82e:	18d3      	adds	r3, r2, r3
   2e830:	881b      	ldrh	r3, [r3, #0]
   2e832:	0018      	movs	r0, r3
   2e834:	4b19      	ldr	r3, [pc, #100]	; (2e89c <cmp_lfn+0xfc>)
   2e836:	4798      	blx	r3
   2e838:	0003      	movs	r3, r0
   2e83a:	001a      	movs	r2, r3
   2e83c:	230e      	movs	r3, #14
   2e83e:	18fb      	adds	r3, r7, r3
   2e840:	881b      	ldrh	r3, [r3, #0]
   2e842:	4293      	cmp	r3, r2
   2e844:	d009      	beq.n	2e85a <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2e846:	2300      	movs	r3, #0
   2e848:	e022      	b.n	2e890 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2e84a:	230c      	movs	r3, #12
   2e84c:	18fb      	adds	r3, r7, r3
   2e84e:	881b      	ldrh	r3, [r3, #0]
   2e850:	4a13      	ldr	r2, [pc, #76]	; (2e8a0 <cmp_lfn+0x100>)
   2e852:	4293      	cmp	r3, r2
   2e854:	d001      	beq.n	2e85a <cmp_lfn+0xba>
   2e856:	2300      	movs	r3, #0
   2e858:	e01a      	b.n	2e890 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2e85a:	693b      	ldr	r3, [r7, #16]
   2e85c:	3301      	adds	r3, #1
   2e85e:	613b      	str	r3, [r7, #16]
   2e860:	693b      	ldr	r3, [r7, #16]
   2e862:	2b0c      	cmp	r3, #12
   2e864:	d9b4      	bls.n	2e7d0 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2e866:	683b      	ldr	r3, [r7, #0]
   2e868:	781b      	ldrb	r3, [r3, #0]
   2e86a:	001a      	movs	r2, r3
   2e86c:	2340      	movs	r3, #64	; 0x40
   2e86e:	4013      	ands	r3, r2
   2e870:	d00d      	beq.n	2e88e <cmp_lfn+0xee>
   2e872:	230e      	movs	r3, #14
   2e874:	18fb      	adds	r3, r7, r3
   2e876:	881b      	ldrh	r3, [r3, #0]
   2e878:	2b00      	cmp	r3, #0
   2e87a:	d008      	beq.n	2e88e <cmp_lfn+0xee>
   2e87c:	697b      	ldr	r3, [r7, #20]
   2e87e:	005b      	lsls	r3, r3, #1
   2e880:	687a      	ldr	r2, [r7, #4]
   2e882:	18d3      	adds	r3, r2, r3
   2e884:	881b      	ldrh	r3, [r3, #0]
   2e886:	2b00      	cmp	r3, #0
   2e888:	d001      	beq.n	2e88e <cmp_lfn+0xee>
		return 0;
   2e88a:	2300      	movs	r3, #0
   2e88c:	e000      	b.n	2e890 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2e88e:	2301      	movs	r3, #1
}
   2e890:	0018      	movs	r0, r3
   2e892:	46bd      	mov	sp, r7
   2e894:	b007      	add	sp, #28
   2e896:	bd90      	pop	{r4, r7, pc}
   2e898:	0003c888 	.word	0x0003c888
   2e89c:	0003084d 	.word	0x0003084d
   2e8a0:	0000ffff 	.word	0x0000ffff

0002e8a4 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2e8a4:	b580      	push	{r7, lr}
   2e8a6:	b088      	sub	sp, #32
   2e8a8:	af00      	add	r7, sp, #0
   2e8aa:	60f8      	str	r0, [r7, #12]
   2e8ac:	60b9      	str	r1, [r7, #8]
   2e8ae:	0019      	movs	r1, r3
   2e8b0:	1dfb      	adds	r3, r7, #7
   2e8b2:	701a      	strb	r2, [r3, #0]
   2e8b4:	1dbb      	adds	r3, r7, #6
   2e8b6:	1c0a      	adds	r2, r1, #0
   2e8b8:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2e8ba:	68bb      	ldr	r3, [r7, #8]
   2e8bc:	330d      	adds	r3, #13
   2e8be:	1dba      	adds	r2, r7, #6
   2e8c0:	7812      	ldrb	r2, [r2, #0]
   2e8c2:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2e8c4:	68bb      	ldr	r3, [r7, #8]
   2e8c6:	330b      	adds	r3, #11
   2e8c8:	220f      	movs	r2, #15
   2e8ca:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2e8cc:	68bb      	ldr	r3, [r7, #8]
   2e8ce:	330c      	adds	r3, #12
   2e8d0:	2200      	movs	r2, #0
   2e8d2:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2e8d4:	68bb      	ldr	r3, [r7, #8]
   2e8d6:	331a      	adds	r3, #26
   2e8d8:	2200      	movs	r2, #0
   2e8da:	701a      	strb	r2, [r3, #0]
   2e8dc:	68bb      	ldr	r3, [r7, #8]
   2e8de:	331b      	adds	r3, #27
   2e8e0:	2200      	movs	r2, #0
   2e8e2:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2e8e4:	1dfb      	adds	r3, r7, #7
   2e8e6:	781b      	ldrb	r3, [r3, #0]
   2e8e8:	1e5a      	subs	r2, r3, #1
   2e8ea:	0013      	movs	r3, r2
   2e8ec:	005b      	lsls	r3, r3, #1
   2e8ee:	189b      	adds	r3, r3, r2
   2e8f0:	009b      	lsls	r3, r3, #2
   2e8f2:	189b      	adds	r3, r3, r2
   2e8f4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2e8f6:	2316      	movs	r3, #22
   2e8f8:	18fb      	adds	r3, r7, r3
   2e8fa:	2200      	movs	r2, #0
   2e8fc:	801a      	strh	r2, [r3, #0]
   2e8fe:	2300      	movs	r3, #0
   2e900:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2e902:	2316      	movs	r3, #22
   2e904:	18fb      	adds	r3, r7, r3
   2e906:	881b      	ldrh	r3, [r3, #0]
   2e908:	4a28      	ldr	r2, [pc, #160]	; (2e9ac <fit_lfn+0x108>)
   2e90a:	4293      	cmp	r3, r2
   2e90c:	d009      	beq.n	2e922 <fit_lfn+0x7e>
   2e90e:	69fb      	ldr	r3, [r7, #28]
   2e910:	1c5a      	adds	r2, r3, #1
   2e912:	61fa      	str	r2, [r7, #28]
   2e914:	005b      	lsls	r3, r3, #1
   2e916:	68fa      	ldr	r2, [r7, #12]
   2e918:	18d2      	adds	r2, r2, r3
   2e91a:	2316      	movs	r3, #22
   2e91c:	18fb      	adds	r3, r7, r3
   2e91e:	8812      	ldrh	r2, [r2, #0]
   2e920:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2e922:	4a23      	ldr	r2, [pc, #140]	; (2e9b0 <fit_lfn+0x10c>)
   2e924:	69bb      	ldr	r3, [r7, #24]
   2e926:	18d3      	adds	r3, r2, r3
   2e928:	781b      	ldrb	r3, [r3, #0]
   2e92a:	001a      	movs	r2, r3
   2e92c:	68bb      	ldr	r3, [r7, #8]
   2e92e:	189b      	adds	r3, r3, r2
   2e930:	2216      	movs	r2, #22
   2e932:	18ba      	adds	r2, r7, r2
   2e934:	8812      	ldrh	r2, [r2, #0]
   2e936:	b2d2      	uxtb	r2, r2
   2e938:	701a      	strb	r2, [r3, #0]
   2e93a:	4a1d      	ldr	r2, [pc, #116]	; (2e9b0 <fit_lfn+0x10c>)
   2e93c:	69bb      	ldr	r3, [r7, #24]
   2e93e:	18d3      	adds	r3, r2, r3
   2e940:	781b      	ldrb	r3, [r3, #0]
   2e942:	3301      	adds	r3, #1
   2e944:	68ba      	ldr	r2, [r7, #8]
   2e946:	18d3      	adds	r3, r2, r3
   2e948:	2216      	movs	r2, #22
   2e94a:	18ba      	adds	r2, r7, r2
   2e94c:	8812      	ldrh	r2, [r2, #0]
   2e94e:	0a12      	lsrs	r2, r2, #8
   2e950:	b292      	uxth	r2, r2
   2e952:	b2d2      	uxtb	r2, r2
   2e954:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2e956:	2316      	movs	r3, #22
   2e958:	18fb      	adds	r3, r7, r3
   2e95a:	881b      	ldrh	r3, [r3, #0]
   2e95c:	2b00      	cmp	r3, #0
   2e95e:	d104      	bne.n	2e96a <fit_lfn+0xc6>
   2e960:	2316      	movs	r3, #22
   2e962:	18fb      	adds	r3, r7, r3
   2e964:	2201      	movs	r2, #1
   2e966:	4252      	negs	r2, r2
   2e968:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2e96a:	69bb      	ldr	r3, [r7, #24]
   2e96c:	3301      	adds	r3, #1
   2e96e:	61bb      	str	r3, [r7, #24]
   2e970:	69bb      	ldr	r3, [r7, #24]
   2e972:	2b0c      	cmp	r3, #12
   2e974:	d9c5      	bls.n	2e902 <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2e976:	2316      	movs	r3, #22
   2e978:	18fb      	adds	r3, r7, r3
   2e97a:	881b      	ldrh	r3, [r3, #0]
   2e97c:	4a0b      	ldr	r2, [pc, #44]	; (2e9ac <fit_lfn+0x108>)
   2e97e:	4293      	cmp	r3, r2
   2e980:	d006      	beq.n	2e990 <fit_lfn+0xec>
   2e982:	69fb      	ldr	r3, [r7, #28]
   2e984:	005b      	lsls	r3, r3, #1
   2e986:	68fa      	ldr	r2, [r7, #12]
   2e988:	18d3      	adds	r3, r2, r3
   2e98a:	881b      	ldrh	r3, [r3, #0]
   2e98c:	2b00      	cmp	r3, #0
   2e98e:	d105      	bne.n	2e99c <fit_lfn+0xf8>
   2e990:	1dfb      	adds	r3, r7, #7
   2e992:	1dfa      	adds	r2, r7, #7
   2e994:	7812      	ldrb	r2, [r2, #0]
   2e996:	2140      	movs	r1, #64	; 0x40
   2e998:	430a      	orrs	r2, r1
   2e99a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2e99c:	68bb      	ldr	r3, [r7, #8]
   2e99e:	1dfa      	adds	r2, r7, #7
   2e9a0:	7812      	ldrb	r2, [r2, #0]
   2e9a2:	701a      	strb	r2, [r3, #0]
}
   2e9a4:	46c0      	nop			; (mov r8, r8)
   2e9a6:	46bd      	mov	sp, r7
   2e9a8:	b008      	add	sp, #32
   2e9aa:	bd80      	pop	{r7, pc}
   2e9ac:	0000ffff 	.word	0x0000ffff
   2e9b0:	0003c888 	.word	0x0003c888

0002e9b4 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2e9b4:	b580      	push	{r7, lr}
   2e9b6:	b08a      	sub	sp, #40	; 0x28
   2e9b8:	af00      	add	r7, sp, #0
   2e9ba:	60f8      	str	r0, [r7, #12]
   2e9bc:	60b9      	str	r1, [r7, #8]
   2e9be:	607a      	str	r2, [r7, #4]
   2e9c0:	001a      	movs	r2, r3
   2e9c2:	1cbb      	adds	r3, r7, #2
   2e9c4:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2e9c6:	68b9      	ldr	r1, [r7, #8]
   2e9c8:	68fb      	ldr	r3, [r7, #12]
   2e9ca:	220b      	movs	r2, #11
   2e9cc:	0018      	movs	r0, r3
   2e9ce:	4b38      	ldr	r3, [pc, #224]	; (2eab0 <gen_numname+0xfc>)
   2e9d0:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2e9d2:	1cbb      	adds	r3, r7, #2
   2e9d4:	881b      	ldrh	r3, [r3, #0]
   2e9d6:	2b05      	cmp	r3, #5
   2e9d8:	d911      	bls.n	2e9fe <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2e9da:	1cbb      	adds	r3, r7, #2
   2e9dc:	881b      	ldrh	r3, [r3, #0]
   2e9de:	b29a      	uxth	r2, r3
   2e9e0:	0852      	lsrs	r2, r2, #1
   2e9e2:	03db      	lsls	r3, r3, #15
   2e9e4:	4313      	orrs	r3, r2
   2e9e6:	b299      	uxth	r1, r3
   2e9e8:	687b      	ldr	r3, [r7, #4]
   2e9ea:	1c9a      	adds	r2, r3, #2
   2e9ec:	607a      	str	r2, [r7, #4]
   2e9ee:	881a      	ldrh	r2, [r3, #0]
   2e9f0:	1cbb      	adds	r3, r7, #2
   2e9f2:	188a      	adds	r2, r1, r2
   2e9f4:	801a      	strh	r2, [r3, #0]
   2e9f6:	687b      	ldr	r3, [r7, #4]
   2e9f8:	881b      	ldrh	r3, [r3, #0]
   2e9fa:	2b00      	cmp	r3, #0
   2e9fc:	d1ed      	bne.n	2e9da <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2e9fe:	2307      	movs	r3, #7
   2ea00:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2ea02:	1cbb      	adds	r3, r7, #2
   2ea04:	881b      	ldrh	r3, [r3, #0]
   2ea06:	b2db      	uxtb	r3, r3
   2ea08:	220f      	movs	r2, #15
   2ea0a:	4013      	ands	r3, r2
   2ea0c:	b2da      	uxtb	r2, r3
   2ea0e:	2327      	movs	r3, #39	; 0x27
   2ea10:	18fb      	adds	r3, r7, r3
   2ea12:	3230      	adds	r2, #48	; 0x30
   2ea14:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2ea16:	2327      	movs	r3, #39	; 0x27
   2ea18:	18fb      	adds	r3, r7, r3
   2ea1a:	781b      	ldrb	r3, [r3, #0]
   2ea1c:	2b39      	cmp	r3, #57	; 0x39
   2ea1e:	d906      	bls.n	2ea2e <gen_numname+0x7a>
   2ea20:	2327      	movs	r3, #39	; 0x27
   2ea22:	18fb      	adds	r3, r7, r3
   2ea24:	2227      	movs	r2, #39	; 0x27
   2ea26:	18ba      	adds	r2, r7, r2
   2ea28:	7812      	ldrb	r2, [r2, #0]
   2ea2a:	3207      	adds	r2, #7
   2ea2c:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2ea2e:	6a3b      	ldr	r3, [r7, #32]
   2ea30:	1e5a      	subs	r2, r3, #1
   2ea32:	623a      	str	r2, [r7, #32]
   2ea34:	2214      	movs	r2, #20
   2ea36:	18ba      	adds	r2, r7, r2
   2ea38:	2127      	movs	r1, #39	; 0x27
   2ea3a:	1879      	adds	r1, r7, r1
   2ea3c:	7809      	ldrb	r1, [r1, #0]
   2ea3e:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2ea40:	1cbb      	adds	r3, r7, #2
   2ea42:	1cba      	adds	r2, r7, #2
   2ea44:	8812      	ldrh	r2, [r2, #0]
   2ea46:	0912      	lsrs	r2, r2, #4
   2ea48:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2ea4a:	1cbb      	adds	r3, r7, #2
   2ea4c:	881b      	ldrh	r3, [r3, #0]
   2ea4e:	2b00      	cmp	r3, #0
   2ea50:	d1d7      	bne.n	2ea02 <gen_numname+0x4e>
	ns[i] = '~';
   2ea52:	2314      	movs	r3, #20
   2ea54:	18fa      	adds	r2, r7, r3
   2ea56:	6a3b      	ldr	r3, [r7, #32]
   2ea58:	18d3      	adds	r3, r2, r3
   2ea5a:	227e      	movs	r2, #126	; 0x7e
   2ea5c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2ea5e:	2300      	movs	r3, #0
   2ea60:	61fb      	str	r3, [r7, #28]
   2ea62:	e002      	b.n	2ea6a <gen_numname+0xb6>
   2ea64:	69fb      	ldr	r3, [r7, #28]
   2ea66:	3301      	adds	r3, #1
   2ea68:	61fb      	str	r3, [r7, #28]
   2ea6a:	69fa      	ldr	r2, [r7, #28]
   2ea6c:	6a3b      	ldr	r3, [r7, #32]
   2ea6e:	429a      	cmp	r2, r3
   2ea70:	d205      	bcs.n	2ea7e <gen_numname+0xca>
   2ea72:	68fa      	ldr	r2, [r7, #12]
   2ea74:	69fb      	ldr	r3, [r7, #28]
   2ea76:	18d3      	adds	r3, r2, r3
   2ea78:	781b      	ldrb	r3, [r3, #0]
   2ea7a:	2b20      	cmp	r3, #32
   2ea7c:	d1f2      	bne.n	2ea64 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2ea7e:	69fb      	ldr	r3, [r7, #28]
   2ea80:	1c5a      	adds	r2, r3, #1
   2ea82:	61fa      	str	r2, [r7, #28]
   2ea84:	68fa      	ldr	r2, [r7, #12]
   2ea86:	18d2      	adds	r2, r2, r3
   2ea88:	6a3b      	ldr	r3, [r7, #32]
   2ea8a:	2b07      	cmp	r3, #7
   2ea8c:	d806      	bhi.n	2ea9c <gen_numname+0xe8>
   2ea8e:	6a3b      	ldr	r3, [r7, #32]
   2ea90:	1c59      	adds	r1, r3, #1
   2ea92:	6239      	str	r1, [r7, #32]
   2ea94:	2114      	movs	r1, #20
   2ea96:	1879      	adds	r1, r7, r1
   2ea98:	5ccb      	ldrb	r3, [r1, r3]
   2ea9a:	e000      	b.n	2ea9e <gen_numname+0xea>
   2ea9c:	2320      	movs	r3, #32
   2ea9e:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2eaa0:	69fb      	ldr	r3, [r7, #28]
   2eaa2:	2b07      	cmp	r3, #7
   2eaa4:	d9eb      	bls.n	2ea7e <gen_numname+0xca>
}
   2eaa6:	46c0      	nop			; (mov r8, r8)
   2eaa8:	46bd      	mov	sp, r7
   2eaaa:	b00a      	add	sp, #40	; 0x28
   2eaac:	bd80      	pop	{r7, pc}
   2eaae:	46c0      	nop			; (mov r8, r8)
   2eab0:	0002db59 	.word	0x0002db59

0002eab4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2eab4:	b580      	push	{r7, lr}
   2eab6:	b084      	sub	sp, #16
   2eab8:	af00      	add	r7, sp, #0
   2eaba:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2eabc:	230f      	movs	r3, #15
   2eabe:	18fb      	adds	r3, r7, r3
   2eac0:	2200      	movs	r2, #0
   2eac2:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2eac4:	230b      	movs	r3, #11
   2eac6:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2eac8:	230f      	movs	r3, #15
   2eaca:	18fb      	adds	r3, r7, r3
   2eacc:	781b      	ldrb	r3, [r3, #0]
   2eace:	b2da      	uxtb	r2, r3
   2ead0:	0852      	lsrs	r2, r2, #1
   2ead2:	01db      	lsls	r3, r3, #7
   2ead4:	4313      	orrs	r3, r2
   2ead6:	b2d9      	uxtb	r1, r3
   2ead8:	687b      	ldr	r3, [r7, #4]
   2eada:	1c5a      	adds	r2, r3, #1
   2eadc:	607a      	str	r2, [r7, #4]
   2eade:	781a      	ldrb	r2, [r3, #0]
   2eae0:	230f      	movs	r3, #15
   2eae2:	18fb      	adds	r3, r7, r3
   2eae4:	188a      	adds	r2, r1, r2
   2eae6:	701a      	strb	r2, [r3, #0]
   2eae8:	68bb      	ldr	r3, [r7, #8]
   2eaea:	3b01      	subs	r3, #1
   2eaec:	60bb      	str	r3, [r7, #8]
   2eaee:	68bb      	ldr	r3, [r7, #8]
   2eaf0:	2b00      	cmp	r3, #0
   2eaf2:	d1e9      	bne.n	2eac8 <sum_sfn+0x14>
	return sum;
   2eaf4:	230f      	movs	r3, #15
   2eaf6:	18fb      	adds	r3, r7, r3
   2eaf8:	781b      	ldrb	r3, [r3, #0]
}
   2eafa:	0018      	movs	r0, r3
   2eafc:	46bd      	mov	sp, r7
   2eafe:	b004      	add	sp, #16
   2eb00:	bd80      	pop	{r7, pc}
	...

0002eb04 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2eb04:	b590      	push	{r4, r7, lr}
   2eb06:	b087      	sub	sp, #28
   2eb08:	af00      	add	r7, sp, #0
   2eb0a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2eb0c:	2317      	movs	r3, #23
   2eb0e:	18fc      	adds	r4, r7, r3
   2eb10:	687b      	ldr	r3, [r7, #4]
   2eb12:	2100      	movs	r1, #0
   2eb14:	0018      	movs	r0, r3
   2eb16:	4b74      	ldr	r3, [pc, #464]	; (2ece8 <dir_find+0x1e4>)
   2eb18:	4798      	blx	r3
   2eb1a:	0003      	movs	r3, r0
   2eb1c:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2eb1e:	2317      	movs	r3, #23
   2eb20:	18fb      	adds	r3, r7, r3
   2eb22:	781b      	ldrb	r3, [r3, #0]
   2eb24:	2b00      	cmp	r3, #0
   2eb26:	d003      	beq.n	2eb30 <dir_find+0x2c>
   2eb28:	2317      	movs	r3, #23
   2eb2a:	18fb      	adds	r3, r7, r3
   2eb2c:	781b      	ldrb	r3, [r3, #0]
   2eb2e:	e0d6      	b.n	2ecde <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2eb30:	2314      	movs	r3, #20
   2eb32:	18fb      	adds	r3, r7, r3
   2eb34:	22ff      	movs	r2, #255	; 0xff
   2eb36:	701a      	strb	r2, [r3, #0]
   2eb38:	2315      	movs	r3, #21
   2eb3a:	18fb      	adds	r3, r7, r3
   2eb3c:	2214      	movs	r2, #20
   2eb3e:	18ba      	adds	r2, r7, r2
   2eb40:	7812      	ldrb	r2, [r2, #0]
   2eb42:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2eb44:	687b      	ldr	r3, [r7, #4]
   2eb46:	681a      	ldr	r2, [r3, #0]
   2eb48:	687b      	ldr	r3, [r7, #4]
   2eb4a:	691b      	ldr	r3, [r3, #16]
   2eb4c:	2117      	movs	r1, #23
   2eb4e:	187c      	adds	r4, r7, r1
   2eb50:	0019      	movs	r1, r3
   2eb52:	0010      	movs	r0, r2
   2eb54:	4b65      	ldr	r3, [pc, #404]	; (2ecec <dir_find+0x1e8>)
   2eb56:	4798      	blx	r3
   2eb58:	0003      	movs	r3, r0
   2eb5a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2eb5c:	2317      	movs	r3, #23
   2eb5e:	18fb      	adds	r3, r7, r3
   2eb60:	781b      	ldrb	r3, [r3, #0]
   2eb62:	2b00      	cmp	r3, #0
   2eb64:	d000      	beq.n	2eb68 <dir_find+0x64>
   2eb66:	e0b2      	b.n	2ecce <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2eb68:	687b      	ldr	r3, [r7, #4]
   2eb6a:	695b      	ldr	r3, [r3, #20]
   2eb6c:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2eb6e:	2316      	movs	r3, #22
   2eb70:	18fb      	adds	r3, r7, r3
   2eb72:	693a      	ldr	r2, [r7, #16]
   2eb74:	7812      	ldrb	r2, [r2, #0]
   2eb76:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2eb78:	2316      	movs	r3, #22
   2eb7a:	18fb      	adds	r3, r7, r3
   2eb7c:	781b      	ldrb	r3, [r3, #0]
   2eb7e:	2b00      	cmp	r3, #0
   2eb80:	d104      	bne.n	2eb8c <dir_find+0x88>
   2eb82:	2317      	movs	r3, #23
   2eb84:	18fb      	adds	r3, r7, r3
   2eb86:	2204      	movs	r2, #4
   2eb88:	701a      	strb	r2, [r3, #0]
   2eb8a:	e0a5      	b.n	2ecd8 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2eb8c:	693b      	ldr	r3, [r7, #16]
   2eb8e:	330b      	adds	r3, #11
   2eb90:	781a      	ldrb	r2, [r3, #0]
   2eb92:	230f      	movs	r3, #15
   2eb94:	18fb      	adds	r3, r7, r3
   2eb96:	213f      	movs	r1, #63	; 0x3f
   2eb98:	400a      	ands	r2, r1
   2eb9a:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2eb9c:	2316      	movs	r3, #22
   2eb9e:	18fb      	adds	r3, r7, r3
   2eba0:	781b      	ldrb	r3, [r3, #0]
   2eba2:	2be5      	cmp	r3, #229	; 0xe5
   2eba4:	d00a      	beq.n	2ebbc <dir_find+0xb8>
   2eba6:	230f      	movs	r3, #15
   2eba8:	18fb      	adds	r3, r7, r3
   2ebaa:	781b      	ldrb	r3, [r3, #0]
   2ebac:	2208      	movs	r2, #8
   2ebae:	4013      	ands	r3, r2
   2ebb0:	d009      	beq.n	2ebc6 <dir_find+0xc2>
   2ebb2:	230f      	movs	r3, #15
   2ebb4:	18fb      	adds	r3, r7, r3
   2ebb6:	781b      	ldrb	r3, [r3, #0]
   2ebb8:	2b0f      	cmp	r3, #15
   2ebba:	d004      	beq.n	2ebc6 <dir_find+0xc2>
			ord = 0xFF;
   2ebbc:	2315      	movs	r3, #21
   2ebbe:	18fb      	adds	r3, r7, r3
   2ebc0:	22ff      	movs	r2, #255	; 0xff
   2ebc2:	701a      	strb	r2, [r3, #0]
   2ebc4:	e073      	b.n	2ecae <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2ebc6:	230f      	movs	r3, #15
   2ebc8:	18fb      	adds	r3, r7, r3
   2ebca:	781b      	ldrb	r3, [r3, #0]
   2ebcc:	2b0f      	cmp	r3, #15
   2ebce:	d145      	bne.n	2ec5c <dir_find+0x158>
				if (dj->lfn) {
   2ebd0:	687b      	ldr	r3, [r7, #4]
   2ebd2:	69db      	ldr	r3, [r3, #28]
   2ebd4:	2b00      	cmp	r3, #0
   2ebd6:	d100      	bne.n	2ebda <dir_find+0xd6>
   2ebd8:	e069      	b.n	2ecae <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2ebda:	2316      	movs	r3, #22
   2ebdc:	18fb      	adds	r3, r7, r3
   2ebde:	781b      	ldrb	r3, [r3, #0]
   2ebe0:	2240      	movs	r2, #64	; 0x40
   2ebe2:	4013      	ands	r3, r2
   2ebe4:	d016      	beq.n	2ec14 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2ebe6:	2314      	movs	r3, #20
   2ebe8:	18fb      	adds	r3, r7, r3
   2ebea:	693a      	ldr	r2, [r7, #16]
   2ebec:	7b52      	ldrb	r2, [r2, #13]
   2ebee:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2ebf0:	2316      	movs	r3, #22
   2ebf2:	18fb      	adds	r3, r7, r3
   2ebf4:	2216      	movs	r2, #22
   2ebf6:	18ba      	adds	r2, r7, r2
   2ebf8:	7812      	ldrb	r2, [r2, #0]
   2ebfa:	2140      	movs	r1, #64	; 0x40
   2ebfc:	438a      	bics	r2, r1
   2ebfe:	701a      	strb	r2, [r3, #0]
   2ec00:	2315      	movs	r3, #21
   2ec02:	18fb      	adds	r3, r7, r3
   2ec04:	2216      	movs	r2, #22
   2ec06:	18ba      	adds	r2, r7, r2
   2ec08:	7812      	ldrb	r2, [r2, #0]
   2ec0a:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2ec0c:	687b      	ldr	r3, [r7, #4]
   2ec0e:	88da      	ldrh	r2, [r3, #6]
   2ec10:	687b      	ldr	r3, [r7, #4]
   2ec12:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2ec14:	2316      	movs	r3, #22
   2ec16:	18fa      	adds	r2, r7, r3
   2ec18:	2315      	movs	r3, #21
   2ec1a:	18fb      	adds	r3, r7, r3
   2ec1c:	7812      	ldrb	r2, [r2, #0]
   2ec1e:	781b      	ldrb	r3, [r3, #0]
   2ec20:	429a      	cmp	r2, r3
   2ec22:	d116      	bne.n	2ec52 <dir_find+0x14e>
   2ec24:	693b      	ldr	r3, [r7, #16]
   2ec26:	330d      	adds	r3, #13
   2ec28:	781b      	ldrb	r3, [r3, #0]
   2ec2a:	2214      	movs	r2, #20
   2ec2c:	18ba      	adds	r2, r7, r2
   2ec2e:	7812      	ldrb	r2, [r2, #0]
   2ec30:	429a      	cmp	r2, r3
   2ec32:	d10e      	bne.n	2ec52 <dir_find+0x14e>
   2ec34:	687b      	ldr	r3, [r7, #4]
   2ec36:	69db      	ldr	r3, [r3, #28]
   2ec38:	693a      	ldr	r2, [r7, #16]
   2ec3a:	0011      	movs	r1, r2
   2ec3c:	0018      	movs	r0, r3
   2ec3e:	4b2c      	ldr	r3, [pc, #176]	; (2ecf0 <dir_find+0x1ec>)
   2ec40:	4798      	blx	r3
   2ec42:	1e03      	subs	r3, r0, #0
   2ec44:	d005      	beq.n	2ec52 <dir_find+0x14e>
   2ec46:	2315      	movs	r3, #21
   2ec48:	18fb      	adds	r3, r7, r3
   2ec4a:	781b      	ldrb	r3, [r3, #0]
   2ec4c:	3b01      	subs	r3, #1
   2ec4e:	b2da      	uxtb	r2, r3
   2ec50:	e000      	b.n	2ec54 <dir_find+0x150>
   2ec52:	22ff      	movs	r2, #255	; 0xff
   2ec54:	2315      	movs	r3, #21
   2ec56:	18fb      	adds	r3, r7, r3
   2ec58:	701a      	strb	r2, [r3, #0]
   2ec5a:	e028      	b.n	2ecae <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2ec5c:	2315      	movs	r3, #21
   2ec5e:	18fb      	adds	r3, r7, r3
   2ec60:	781b      	ldrb	r3, [r3, #0]
   2ec62:	2b00      	cmp	r3, #0
   2ec64:	d10a      	bne.n	2ec7c <dir_find+0x178>
   2ec66:	693b      	ldr	r3, [r7, #16]
   2ec68:	0018      	movs	r0, r3
   2ec6a:	4b22      	ldr	r3, [pc, #136]	; (2ecf4 <dir_find+0x1f0>)
   2ec6c:	4798      	blx	r3
   2ec6e:	0003      	movs	r3, r0
   2ec70:	001a      	movs	r2, r3
   2ec72:	2314      	movs	r3, #20
   2ec74:	18fb      	adds	r3, r7, r3
   2ec76:	781b      	ldrb	r3, [r3, #0]
   2ec78:	4293      	cmp	r3, r2
   2ec7a:	d02a      	beq.n	2ecd2 <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2ec7c:	2315      	movs	r3, #21
   2ec7e:	18fb      	adds	r3, r7, r3
   2ec80:	22ff      	movs	r2, #255	; 0xff
   2ec82:	701a      	strb	r2, [r3, #0]
   2ec84:	687b      	ldr	r3, [r7, #4]
   2ec86:	2201      	movs	r2, #1
   2ec88:	4252      	negs	r2, r2
   2ec8a:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2ec8c:	687b      	ldr	r3, [r7, #4]
   2ec8e:	699b      	ldr	r3, [r3, #24]
   2ec90:	330b      	adds	r3, #11
   2ec92:	781b      	ldrb	r3, [r3, #0]
   2ec94:	001a      	movs	r2, r3
   2ec96:	2301      	movs	r3, #1
   2ec98:	4013      	ands	r3, r2
   2ec9a:	d108      	bne.n	2ecae <dir_find+0x1aa>
   2ec9c:	687b      	ldr	r3, [r7, #4]
   2ec9e:	6999      	ldr	r1, [r3, #24]
   2eca0:	693b      	ldr	r3, [r7, #16]
   2eca2:	220b      	movs	r2, #11
   2eca4:	0018      	movs	r0, r3
   2eca6:	4b14      	ldr	r3, [pc, #80]	; (2ecf8 <dir_find+0x1f4>)
   2eca8:	4798      	blx	r3
   2ecaa:	1e03      	subs	r3, r0, #0
   2ecac:	d013      	beq.n	2ecd6 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2ecae:	2317      	movs	r3, #23
   2ecb0:	18fc      	adds	r4, r7, r3
   2ecb2:	687b      	ldr	r3, [r7, #4]
   2ecb4:	2100      	movs	r1, #0
   2ecb6:	0018      	movs	r0, r3
   2ecb8:	4b10      	ldr	r3, [pc, #64]	; (2ecfc <dir_find+0x1f8>)
   2ecba:	4798      	blx	r3
   2ecbc:	0003      	movs	r3, r0
   2ecbe:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2ecc0:	2317      	movs	r3, #23
   2ecc2:	18fb      	adds	r3, r7, r3
   2ecc4:	781b      	ldrb	r3, [r3, #0]
   2ecc6:	2b00      	cmp	r3, #0
   2ecc8:	d100      	bne.n	2eccc <dir_find+0x1c8>
   2ecca:	e73b      	b.n	2eb44 <dir_find+0x40>
   2eccc:	e004      	b.n	2ecd8 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2ecce:	46c0      	nop			; (mov r8, r8)
   2ecd0:	e002      	b.n	2ecd8 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2ecd2:	46c0      	nop			; (mov r8, r8)
   2ecd4:	e000      	b.n	2ecd8 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2ecd6:	46c0      	nop			; (mov r8, r8)

	return res;
   2ecd8:	2317      	movs	r3, #23
   2ecda:	18fb      	adds	r3, r7, r3
   2ecdc:	781b      	ldrb	r3, [r3, #0]
}
   2ecde:	0018      	movs	r0, r3
   2ece0:	46bd      	mov	sp, r7
   2ece2:	b007      	add	sp, #28
   2ece4:	bd90      	pop	{r4, r7, pc}
   2ece6:	46c0      	nop			; (mov r8, r8)
   2ece8:	0002e481 	.word	0x0002e481
   2ecec:	0002dc3d 	.word	0x0002dc3d
   2ecf0:	0002e7a1 	.word	0x0002e7a1
   2ecf4:	0002eab5 	.word	0x0002eab5
   2ecf8:	0002dbc1 	.word	0x0002dbc1
   2ecfc:	0002e5b1 	.word	0x0002e5b1

0002ed00 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2ed00:	b590      	push	{r4, r7, lr}
   2ed02:	b08d      	sub	sp, #52	; 0x34
   2ed04:	af00      	add	r7, sp, #0
   2ed06:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2ed08:	687b      	ldr	r3, [r7, #4]
   2ed0a:	699b      	ldr	r3, [r3, #24]
   2ed0c:	627b      	str	r3, [r7, #36]	; 0x24
   2ed0e:	687b      	ldr	r3, [r7, #4]
   2ed10:	69db      	ldr	r3, [r3, #28]
   2ed12:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2ed14:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2ed16:	230c      	movs	r3, #12
   2ed18:	18fb      	adds	r3, r7, r3
   2ed1a:	220c      	movs	r2, #12
   2ed1c:	0018      	movs	r0, r3
   2ed1e:	4bc8      	ldr	r3, [pc, #800]	; (2f040 <dir_register+0x340>)
   2ed20:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2ed22:	230c      	movs	r3, #12
   2ed24:	18fb      	adds	r3, r7, r3
   2ed26:	7adb      	ldrb	r3, [r3, #11]
   2ed28:	001a      	movs	r2, r3
   2ed2a:	2301      	movs	r3, #1
   2ed2c:	4013      	ands	r3, r2
   2ed2e:	d048      	beq.n	2edc2 <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2ed30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ed32:	330b      	adds	r3, #11
   2ed34:	2200      	movs	r2, #0
   2ed36:	701a      	strb	r2, [r3, #0]
   2ed38:	687b      	ldr	r3, [r7, #4]
   2ed3a:	2200      	movs	r2, #0
   2ed3c:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2ed3e:	232c      	movs	r3, #44	; 0x2c
   2ed40:	18fb      	adds	r3, r7, r3
   2ed42:	2201      	movs	r2, #1
   2ed44:	801a      	strh	r2, [r3, #0]
   2ed46:	e01c      	b.n	2ed82 <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2ed48:	232c      	movs	r3, #44	; 0x2c
   2ed4a:	18fb      	adds	r3, r7, r3
   2ed4c:	881b      	ldrh	r3, [r3, #0]
   2ed4e:	6a3a      	ldr	r2, [r7, #32]
   2ed50:	210c      	movs	r1, #12
   2ed52:	1879      	adds	r1, r7, r1
   2ed54:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2ed56:	4cbb      	ldr	r4, [pc, #748]	; (2f044 <dir_register+0x344>)
   2ed58:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2ed5a:	232f      	movs	r3, #47	; 0x2f
   2ed5c:	18fc      	adds	r4, r7, r3
   2ed5e:	687b      	ldr	r3, [r7, #4]
   2ed60:	0018      	movs	r0, r3
   2ed62:	4bb9      	ldr	r3, [pc, #740]	; (2f048 <dir_register+0x348>)
   2ed64:	4798      	blx	r3
   2ed66:	0003      	movs	r3, r0
   2ed68:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2ed6a:	232f      	movs	r3, #47	; 0x2f
   2ed6c:	18fb      	adds	r3, r7, r3
   2ed6e:	781b      	ldrb	r3, [r3, #0]
   2ed70:	2b00      	cmp	r3, #0
   2ed72:	d10c      	bne.n	2ed8e <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2ed74:	232c      	movs	r3, #44	; 0x2c
   2ed76:	18fb      	adds	r3, r7, r3
   2ed78:	881a      	ldrh	r2, [r3, #0]
   2ed7a:	232c      	movs	r3, #44	; 0x2c
   2ed7c:	18fb      	adds	r3, r7, r3
   2ed7e:	3201      	adds	r2, #1
   2ed80:	801a      	strh	r2, [r3, #0]
   2ed82:	232c      	movs	r3, #44	; 0x2c
   2ed84:	18fb      	adds	r3, r7, r3
   2ed86:	881b      	ldrh	r3, [r3, #0]
   2ed88:	2b63      	cmp	r3, #99	; 0x63
   2ed8a:	d9dd      	bls.n	2ed48 <dir_register+0x48>
   2ed8c:	e000      	b.n	2ed90 <dir_register+0x90>
			if (res != FR_OK) break;
   2ed8e:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2ed90:	232c      	movs	r3, #44	; 0x2c
   2ed92:	18fb      	adds	r3, r7, r3
   2ed94:	881b      	ldrh	r3, [r3, #0]
   2ed96:	2b64      	cmp	r3, #100	; 0x64
   2ed98:	d101      	bne.n	2ed9e <dir_register+0x9e>
   2ed9a:	2307      	movs	r3, #7
   2ed9c:	e14c      	b.n	2f038 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2ed9e:	232f      	movs	r3, #47	; 0x2f
   2eda0:	18fb      	adds	r3, r7, r3
   2eda2:	781b      	ldrb	r3, [r3, #0]
   2eda4:	2b04      	cmp	r3, #4
   2eda6:	d003      	beq.n	2edb0 <dir_register+0xb0>
   2eda8:	232f      	movs	r3, #47	; 0x2f
   2edaa:	18fb      	adds	r3, r7, r3
   2edac:	781b      	ldrb	r3, [r3, #0]
   2edae:	e143      	b.n	2f038 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2edb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2edb2:	330b      	adds	r3, #11
   2edb4:	220c      	movs	r2, #12
   2edb6:	18ba      	adds	r2, r7, r2
   2edb8:	7ad2      	ldrb	r2, [r2, #11]
   2edba:	701a      	strb	r2, [r3, #0]
   2edbc:	687b      	ldr	r3, [r7, #4]
   2edbe:	6a3a      	ldr	r2, [r7, #32]
   2edc0:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2edc2:	230c      	movs	r3, #12
   2edc4:	18fb      	adds	r3, r7, r3
   2edc6:	7adb      	ldrb	r3, [r3, #11]
   2edc8:	001a      	movs	r2, r3
   2edca:	2302      	movs	r3, #2
   2edcc:	4013      	ands	r3, r2
   2edce:	d023      	beq.n	2ee18 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2edd0:	232a      	movs	r3, #42	; 0x2a
   2edd2:	18fb      	adds	r3, r7, r3
   2edd4:	2200      	movs	r2, #0
   2edd6:	801a      	strh	r2, [r3, #0]
   2edd8:	e006      	b.n	2ede8 <dir_register+0xe8>
   2edda:	232a      	movs	r3, #42	; 0x2a
   2eddc:	18fb      	adds	r3, r7, r3
   2edde:	881a      	ldrh	r2, [r3, #0]
   2ede0:	232a      	movs	r3, #42	; 0x2a
   2ede2:	18fb      	adds	r3, r7, r3
   2ede4:	3201      	adds	r2, #1
   2ede6:	801a      	strh	r2, [r3, #0]
   2ede8:	232a      	movs	r3, #42	; 0x2a
   2edea:	18fb      	adds	r3, r7, r3
   2edec:	881b      	ldrh	r3, [r3, #0]
   2edee:	005b      	lsls	r3, r3, #1
   2edf0:	6a3a      	ldr	r2, [r7, #32]
   2edf2:	18d3      	adds	r3, r2, r3
   2edf4:	881b      	ldrh	r3, [r3, #0]
   2edf6:	2b00      	cmp	r3, #0
   2edf8:	d1ef      	bne.n	2edda <dir_register+0xda>
		ne = (ne + 25) / 13;
   2edfa:	232a      	movs	r3, #42	; 0x2a
   2edfc:	18fb      	adds	r3, r7, r3
   2edfe:	881b      	ldrh	r3, [r3, #0]
   2ee00:	3319      	adds	r3, #25
   2ee02:	001a      	movs	r2, r3
   2ee04:	4b91      	ldr	r3, [pc, #580]	; (2f04c <dir_register+0x34c>)
   2ee06:	210d      	movs	r1, #13
   2ee08:	0010      	movs	r0, r2
   2ee0a:	4798      	blx	r3
   2ee0c:	0003      	movs	r3, r0
   2ee0e:	001a      	movs	r2, r3
   2ee10:	232a      	movs	r3, #42	; 0x2a
   2ee12:	18fb      	adds	r3, r7, r3
   2ee14:	801a      	strh	r2, [r3, #0]
   2ee16:	e003      	b.n	2ee20 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2ee18:	232a      	movs	r3, #42	; 0x2a
   2ee1a:	18fb      	adds	r3, r7, r3
   2ee1c:	2201      	movs	r2, #1
   2ee1e:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2ee20:	232f      	movs	r3, #47	; 0x2f
   2ee22:	18fc      	adds	r4, r7, r3
   2ee24:	687b      	ldr	r3, [r7, #4]
   2ee26:	2100      	movs	r1, #0
   2ee28:	0018      	movs	r0, r3
   2ee2a:	4b89      	ldr	r3, [pc, #548]	; (2f050 <dir_register+0x350>)
   2ee2c:	4798      	blx	r3
   2ee2e:	0003      	movs	r3, r0
   2ee30:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2ee32:	232f      	movs	r3, #47	; 0x2f
   2ee34:	18fb      	adds	r3, r7, r3
   2ee36:	781b      	ldrb	r3, [r3, #0]
   2ee38:	2b00      	cmp	r3, #0
   2ee3a:	d003      	beq.n	2ee44 <dir_register+0x144>
   2ee3c:	232f      	movs	r3, #47	; 0x2f
   2ee3e:	18fb      	adds	r3, r7, r3
   2ee40:	781b      	ldrb	r3, [r3, #0]
   2ee42:	e0f9      	b.n	2f038 <dir_register+0x338>
	n = is = 0;
   2ee44:	2328      	movs	r3, #40	; 0x28
   2ee46:	18fb      	adds	r3, r7, r3
   2ee48:	2200      	movs	r2, #0
   2ee4a:	801a      	strh	r2, [r3, #0]
   2ee4c:	232c      	movs	r3, #44	; 0x2c
   2ee4e:	18fb      	adds	r3, r7, r3
   2ee50:	2228      	movs	r2, #40	; 0x28
   2ee52:	18ba      	adds	r2, r7, r2
   2ee54:	8812      	ldrh	r2, [r2, #0]
   2ee56:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2ee58:	687b      	ldr	r3, [r7, #4]
   2ee5a:	681a      	ldr	r2, [r3, #0]
   2ee5c:	687b      	ldr	r3, [r7, #4]
   2ee5e:	691b      	ldr	r3, [r3, #16]
   2ee60:	212f      	movs	r1, #47	; 0x2f
   2ee62:	187c      	adds	r4, r7, r1
   2ee64:	0019      	movs	r1, r3
   2ee66:	0010      	movs	r0, r2
   2ee68:	4b7a      	ldr	r3, [pc, #488]	; (2f054 <dir_register+0x354>)
   2ee6a:	4798      	blx	r3
   2ee6c:	0003      	movs	r3, r0
   2ee6e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2ee70:	232f      	movs	r3, #47	; 0x2f
   2ee72:	18fb      	adds	r3, r7, r3
   2ee74:	781b      	ldrb	r3, [r3, #0]
   2ee76:	2b00      	cmp	r3, #0
   2ee78:	d13c      	bne.n	2eef4 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2ee7a:	687b      	ldr	r3, [r7, #4]
   2ee7c:	695a      	ldr	r2, [r3, #20]
   2ee7e:	231f      	movs	r3, #31
   2ee80:	18fb      	adds	r3, r7, r3
   2ee82:	7812      	ldrb	r2, [r2, #0]
   2ee84:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2ee86:	231f      	movs	r3, #31
   2ee88:	18fb      	adds	r3, r7, r3
   2ee8a:	781b      	ldrb	r3, [r3, #0]
   2ee8c:	2be5      	cmp	r3, #229	; 0xe5
   2ee8e:	d004      	beq.n	2ee9a <dir_register+0x19a>
   2ee90:	231f      	movs	r3, #31
   2ee92:	18fb      	adds	r3, r7, r3
   2ee94:	781b      	ldrb	r3, [r3, #0]
   2ee96:	2b00      	cmp	r3, #0
   2ee98:	d119      	bne.n	2eece <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2ee9a:	232c      	movs	r3, #44	; 0x2c
   2ee9c:	18fb      	adds	r3, r7, r3
   2ee9e:	881b      	ldrh	r3, [r3, #0]
   2eea0:	2b00      	cmp	r3, #0
   2eea2:	d104      	bne.n	2eeae <dir_register+0x1ae>
   2eea4:	2328      	movs	r3, #40	; 0x28
   2eea6:	18fb      	adds	r3, r7, r3
   2eea8:	687a      	ldr	r2, [r7, #4]
   2eeaa:	88d2      	ldrh	r2, [r2, #6]
   2eeac:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2eeae:	232c      	movs	r3, #44	; 0x2c
   2eeb0:	18fb      	adds	r3, r7, r3
   2eeb2:	222c      	movs	r2, #44	; 0x2c
   2eeb4:	18ba      	adds	r2, r7, r2
   2eeb6:	8812      	ldrh	r2, [r2, #0]
   2eeb8:	3201      	adds	r2, #1
   2eeba:	801a      	strh	r2, [r3, #0]
   2eebc:	232c      	movs	r3, #44	; 0x2c
   2eebe:	18fa      	adds	r2, r7, r3
   2eec0:	232a      	movs	r3, #42	; 0x2a
   2eec2:	18fb      	adds	r3, r7, r3
   2eec4:	8812      	ldrh	r2, [r2, #0]
   2eec6:	881b      	ldrh	r3, [r3, #0]
   2eec8:	429a      	cmp	r2, r3
   2eeca:	d104      	bne.n	2eed6 <dir_register+0x1d6>
   2eecc:	e013      	b.n	2eef6 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2eece:	232c      	movs	r3, #44	; 0x2c
   2eed0:	18fb      	adds	r3, r7, r3
   2eed2:	2200      	movs	r2, #0
   2eed4:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2eed6:	232f      	movs	r3, #47	; 0x2f
   2eed8:	18fc      	adds	r4, r7, r3
   2eeda:	687b      	ldr	r3, [r7, #4]
   2eedc:	2101      	movs	r1, #1
   2eede:	0018      	movs	r0, r3
   2eee0:	4b5d      	ldr	r3, [pc, #372]	; (2f058 <dir_register+0x358>)
   2eee2:	4798      	blx	r3
   2eee4:	0003      	movs	r3, r0
   2eee6:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2eee8:	232f      	movs	r3, #47	; 0x2f
   2eeea:	18fb      	adds	r3, r7, r3
   2eeec:	781b      	ldrb	r3, [r3, #0]
   2eeee:	2b00      	cmp	r3, #0
   2eef0:	d0b2      	beq.n	2ee58 <dir_register+0x158>
   2eef2:	e000      	b.n	2eef6 <dir_register+0x1f6>
		if (res != FR_OK) break;
   2eef4:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2eef6:	232f      	movs	r3, #47	; 0x2f
   2eef8:	18fb      	adds	r3, r7, r3
   2eefa:	781b      	ldrb	r3, [r3, #0]
   2eefc:	2b00      	cmp	r3, #0
   2eefe:	d163      	bne.n	2efc8 <dir_register+0x2c8>
   2ef00:	232a      	movs	r3, #42	; 0x2a
   2ef02:	18fb      	adds	r3, r7, r3
   2ef04:	881b      	ldrh	r3, [r3, #0]
   2ef06:	2b01      	cmp	r3, #1
   2ef08:	d95e      	bls.n	2efc8 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2ef0a:	232f      	movs	r3, #47	; 0x2f
   2ef0c:	18fc      	adds	r4, r7, r3
   2ef0e:	2328      	movs	r3, #40	; 0x28
   2ef10:	18fb      	adds	r3, r7, r3
   2ef12:	881a      	ldrh	r2, [r3, #0]
   2ef14:	687b      	ldr	r3, [r7, #4]
   2ef16:	0011      	movs	r1, r2
   2ef18:	0018      	movs	r0, r3
   2ef1a:	4b4d      	ldr	r3, [pc, #308]	; (2f050 <dir_register+0x350>)
   2ef1c:	4798      	blx	r3
   2ef1e:	0003      	movs	r3, r0
   2ef20:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2ef22:	232f      	movs	r3, #47	; 0x2f
   2ef24:	18fb      	adds	r3, r7, r3
   2ef26:	781b      	ldrb	r3, [r3, #0]
   2ef28:	2b00      	cmp	r3, #0
   2ef2a:	d14d      	bne.n	2efc8 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2ef2c:	687b      	ldr	r3, [r7, #4]
   2ef2e:	699b      	ldr	r3, [r3, #24]
   2ef30:	221e      	movs	r2, #30
   2ef32:	18bc      	adds	r4, r7, r2
   2ef34:	0018      	movs	r0, r3
   2ef36:	4b49      	ldr	r3, [pc, #292]	; (2f05c <dir_register+0x35c>)
   2ef38:	4798      	blx	r3
   2ef3a:	0003      	movs	r3, r0
   2ef3c:	7023      	strb	r3, [r4, #0]
			ne--;
   2ef3e:	232a      	movs	r3, #42	; 0x2a
   2ef40:	18fb      	adds	r3, r7, r3
   2ef42:	881a      	ldrh	r2, [r3, #0]
   2ef44:	232a      	movs	r3, #42	; 0x2a
   2ef46:	18fb      	adds	r3, r7, r3
   2ef48:	3a01      	subs	r2, #1
   2ef4a:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2ef4c:	687b      	ldr	r3, [r7, #4]
   2ef4e:	681a      	ldr	r2, [r3, #0]
   2ef50:	687b      	ldr	r3, [r7, #4]
   2ef52:	691b      	ldr	r3, [r3, #16]
   2ef54:	212f      	movs	r1, #47	; 0x2f
   2ef56:	187c      	adds	r4, r7, r1
   2ef58:	0019      	movs	r1, r3
   2ef5a:	0010      	movs	r0, r2
   2ef5c:	4b3d      	ldr	r3, [pc, #244]	; (2f054 <dir_register+0x354>)
   2ef5e:	4798      	blx	r3
   2ef60:	0003      	movs	r3, r0
   2ef62:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2ef64:	232f      	movs	r3, #47	; 0x2f
   2ef66:	18fb      	adds	r3, r7, r3
   2ef68:	781b      	ldrb	r3, [r3, #0]
   2ef6a:	2b00      	cmp	r3, #0
   2ef6c:	d12b      	bne.n	2efc6 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2ef6e:	687b      	ldr	r3, [r7, #4]
   2ef70:	69d8      	ldr	r0, [r3, #28]
   2ef72:	687b      	ldr	r3, [r7, #4]
   2ef74:	6959      	ldr	r1, [r3, #20]
   2ef76:	232a      	movs	r3, #42	; 0x2a
   2ef78:	18fb      	adds	r3, r7, r3
   2ef7a:	881b      	ldrh	r3, [r3, #0]
   2ef7c:	b2da      	uxtb	r2, r3
   2ef7e:	231e      	movs	r3, #30
   2ef80:	18fb      	adds	r3, r7, r3
   2ef82:	781b      	ldrb	r3, [r3, #0]
   2ef84:	4c36      	ldr	r4, [pc, #216]	; (2f060 <dir_register+0x360>)
   2ef86:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2ef88:	687b      	ldr	r3, [r7, #4]
   2ef8a:	681b      	ldr	r3, [r3, #0]
   2ef8c:	2201      	movs	r2, #1
   2ef8e:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2ef90:	232f      	movs	r3, #47	; 0x2f
   2ef92:	18fc      	adds	r4, r7, r3
   2ef94:	687b      	ldr	r3, [r7, #4]
   2ef96:	2100      	movs	r1, #0
   2ef98:	0018      	movs	r0, r3
   2ef9a:	4b2f      	ldr	r3, [pc, #188]	; (2f058 <dir_register+0x358>)
   2ef9c:	4798      	blx	r3
   2ef9e:	0003      	movs	r3, r0
   2efa0:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2efa2:	232f      	movs	r3, #47	; 0x2f
   2efa4:	18fb      	adds	r3, r7, r3
   2efa6:	781b      	ldrb	r3, [r3, #0]
   2efa8:	2b00      	cmp	r3, #0
   2efaa:	d10d      	bne.n	2efc8 <dir_register+0x2c8>
   2efac:	232a      	movs	r3, #42	; 0x2a
   2efae:	18fb      	adds	r3, r7, r3
   2efb0:	222a      	movs	r2, #42	; 0x2a
   2efb2:	18ba      	adds	r2, r7, r2
   2efb4:	8812      	ldrh	r2, [r2, #0]
   2efb6:	3a01      	subs	r2, #1
   2efb8:	801a      	strh	r2, [r3, #0]
   2efba:	232a      	movs	r3, #42	; 0x2a
   2efbc:	18fb      	adds	r3, r7, r3
   2efbe:	881b      	ldrh	r3, [r3, #0]
   2efc0:	2b00      	cmp	r3, #0
   2efc2:	d1c3      	bne.n	2ef4c <dir_register+0x24c>
   2efc4:	e000      	b.n	2efc8 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2efc6:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2efc8:	232f      	movs	r3, #47	; 0x2f
   2efca:	18fb      	adds	r3, r7, r3
   2efcc:	781b      	ldrb	r3, [r3, #0]
   2efce:	2b00      	cmp	r3, #0
   2efd0:	d12f      	bne.n	2f032 <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2efd2:	687b      	ldr	r3, [r7, #4]
   2efd4:	681a      	ldr	r2, [r3, #0]
   2efd6:	687b      	ldr	r3, [r7, #4]
   2efd8:	691b      	ldr	r3, [r3, #16]
   2efda:	212f      	movs	r1, #47	; 0x2f
   2efdc:	187c      	adds	r4, r7, r1
   2efde:	0019      	movs	r1, r3
   2efe0:	0010      	movs	r0, r2
   2efe2:	4b1c      	ldr	r3, [pc, #112]	; (2f054 <dir_register+0x354>)
   2efe4:	4798      	blx	r3
   2efe6:	0003      	movs	r3, r0
   2efe8:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2efea:	232f      	movs	r3, #47	; 0x2f
   2efec:	18fb      	adds	r3, r7, r3
   2efee:	781b      	ldrb	r3, [r3, #0]
   2eff0:	2b00      	cmp	r3, #0
   2eff2:	d11e      	bne.n	2f032 <dir_register+0x332>
			dir = dj->dir;
   2eff4:	687b      	ldr	r3, [r7, #4]
   2eff6:	695b      	ldr	r3, [r3, #20]
   2eff8:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2effa:	69bb      	ldr	r3, [r7, #24]
   2effc:	2220      	movs	r2, #32
   2effe:	2100      	movs	r1, #0
   2f000:	0018      	movs	r0, r3
   2f002:	4b18      	ldr	r3, [pc, #96]	; (2f064 <dir_register+0x364>)
   2f004:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2f006:	687b      	ldr	r3, [r7, #4]
   2f008:	6999      	ldr	r1, [r3, #24]
   2f00a:	69bb      	ldr	r3, [r7, #24]
   2f00c:	220b      	movs	r2, #11
   2f00e:	0018      	movs	r0, r3
   2f010:	4b0b      	ldr	r3, [pc, #44]	; (2f040 <dir_register+0x340>)
   2f012:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2f014:	69bb      	ldr	r3, [r7, #24]
   2f016:	330c      	adds	r3, #12
   2f018:	001a      	movs	r2, r3
   2f01a:	687b      	ldr	r3, [r7, #4]
   2f01c:	699b      	ldr	r3, [r3, #24]
   2f01e:	330b      	adds	r3, #11
   2f020:	781b      	ldrb	r3, [r3, #0]
   2f022:	2118      	movs	r1, #24
   2f024:	400b      	ands	r3, r1
   2f026:	b2db      	uxtb	r3, r3
   2f028:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2f02a:	687b      	ldr	r3, [r7, #4]
   2f02c:	681b      	ldr	r3, [r3, #0]
   2f02e:	2201      	movs	r2, #1
   2f030:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2f032:	232f      	movs	r3, #47	; 0x2f
   2f034:	18fb      	adds	r3, r7, r3
   2f036:	781b      	ldrb	r3, [r3, #0]
}
   2f038:	0018      	movs	r0, r3
   2f03a:	46bd      	mov	sp, r7
   2f03c:	b00d      	add	sp, #52	; 0x34
   2f03e:	bd90      	pop	{r4, r7, pc}
   2f040:	0002db59 	.word	0x0002db59
   2f044:	0002e9b5 	.word	0x0002e9b5
   2f048:	0002eb05 	.word	0x0002eb05
   2f04c:	00034f29 	.word	0x00034f29
   2f050:	0002e481 	.word	0x0002e481
   2f054:	0002dc3d 	.word	0x0002dc3d
   2f058:	0002e5b1 	.word	0x0002e5b1
   2f05c:	0002eab5 	.word	0x0002eab5
   2f060:	0002e8a5 	.word	0x0002e8a5
   2f064:	0002db91 	.word	0x0002db91

0002f068 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2f068:	b590      	push	{r4, r7, lr}
   2f06a:	b08b      	sub	sp, #44	; 0x2c
   2f06c:	af00      	add	r7, sp, #0
   2f06e:	6078      	str	r0, [r7, #4]
   2f070:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2f072:	683b      	ldr	r3, [r7, #0]
   2f074:	681b      	ldr	r3, [r3, #0]
   2f076:	613b      	str	r3, [r7, #16]
   2f078:	e002      	b.n	2f080 <create_name+0x18>
   2f07a:	693b      	ldr	r3, [r7, #16]
   2f07c:	3301      	adds	r3, #1
   2f07e:	613b      	str	r3, [r7, #16]
   2f080:	693b      	ldr	r3, [r7, #16]
   2f082:	781b      	ldrb	r3, [r3, #0]
   2f084:	2b2f      	cmp	r3, #47	; 0x2f
   2f086:	d0f8      	beq.n	2f07a <create_name+0x12>
   2f088:	693b      	ldr	r3, [r7, #16]
   2f08a:	781b      	ldrb	r3, [r3, #0]
   2f08c:	2b5c      	cmp	r3, #92	; 0x5c
   2f08e:	d0f4      	beq.n	2f07a <create_name+0x12>
	lfn = dj->lfn;
   2f090:	687b      	ldr	r3, [r7, #4]
   2f092:	69db      	ldr	r3, [r3, #28]
   2f094:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2f096:	2300      	movs	r3, #0
   2f098:	617b      	str	r3, [r7, #20]
   2f09a:	697b      	ldr	r3, [r7, #20]
   2f09c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2f09e:	69bb      	ldr	r3, [r7, #24]
   2f0a0:	1c5a      	adds	r2, r3, #1
   2f0a2:	61ba      	str	r2, [r7, #24]
   2f0a4:	693a      	ldr	r2, [r7, #16]
   2f0a6:	18d3      	adds	r3, r2, r3
   2f0a8:	781a      	ldrb	r2, [r3, #0]
   2f0aa:	2324      	movs	r3, #36	; 0x24
   2f0ac:	18fb      	adds	r3, r7, r3
   2f0ae:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2f0b0:	2324      	movs	r3, #36	; 0x24
   2f0b2:	18fb      	adds	r3, r7, r3
   2f0b4:	881b      	ldrh	r3, [r3, #0]
   2f0b6:	2b1f      	cmp	r3, #31
   2f0b8:	d944      	bls.n	2f144 <create_name+0xdc>
   2f0ba:	2324      	movs	r3, #36	; 0x24
   2f0bc:	18fb      	adds	r3, r7, r3
   2f0be:	881b      	ldrh	r3, [r3, #0]
   2f0c0:	2b2f      	cmp	r3, #47	; 0x2f
   2f0c2:	d03f      	beq.n	2f144 <create_name+0xdc>
   2f0c4:	2324      	movs	r3, #36	; 0x24
   2f0c6:	18fb      	adds	r3, r7, r3
   2f0c8:	881b      	ldrh	r3, [r3, #0]
   2f0ca:	2b5c      	cmp	r3, #92	; 0x5c
   2f0cc:	d03a      	beq.n	2f144 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2f0ce:	697b      	ldr	r3, [r7, #20]
   2f0d0:	2bfe      	cmp	r3, #254	; 0xfe
   2f0d2:	d901      	bls.n	2f0d8 <create_name+0x70>
			return FR_INVALID_NAME;
   2f0d4:	2306      	movs	r3, #6
   2f0d6:	e1e7      	b.n	2f4a8 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2f0d8:	2324      	movs	r3, #36	; 0x24
   2f0da:	18fb      	adds	r3, r7, r3
   2f0dc:	2224      	movs	r2, #36	; 0x24
   2f0de:	18ba      	adds	r2, r7, r2
   2f0e0:	8812      	ldrh	r2, [r2, #0]
   2f0e2:	21ff      	movs	r1, #255	; 0xff
   2f0e4:	400a      	ands	r2, r1
   2f0e6:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2f0e8:	2324      	movs	r3, #36	; 0x24
   2f0ea:	18fc      	adds	r4, r7, r3
   2f0ec:	2324      	movs	r3, #36	; 0x24
   2f0ee:	18fb      	adds	r3, r7, r3
   2f0f0:	881b      	ldrh	r3, [r3, #0]
   2f0f2:	2101      	movs	r1, #1
   2f0f4:	0018      	movs	r0, r3
   2f0f6:	4bba      	ldr	r3, [pc, #744]	; (2f3e0 <create_name+0x378>)
   2f0f8:	4798      	blx	r3
   2f0fa:	0003      	movs	r3, r0
   2f0fc:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2f0fe:	2324      	movs	r3, #36	; 0x24
   2f100:	18fb      	adds	r3, r7, r3
   2f102:	881b      	ldrh	r3, [r3, #0]
   2f104:	2b00      	cmp	r3, #0
   2f106:	d101      	bne.n	2f10c <create_name+0xa4>
   2f108:	2306      	movs	r3, #6
   2f10a:	e1cd      	b.n	2f4a8 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2f10c:	2324      	movs	r3, #36	; 0x24
   2f10e:	18fb      	adds	r3, r7, r3
   2f110:	881b      	ldrh	r3, [r3, #0]
   2f112:	2b7f      	cmp	r3, #127	; 0x7f
   2f114:	d80b      	bhi.n	2f12e <create_name+0xc6>
   2f116:	2324      	movs	r3, #36	; 0x24
   2f118:	18fb      	adds	r3, r7, r3
   2f11a:	881a      	ldrh	r2, [r3, #0]
   2f11c:	4bb1      	ldr	r3, [pc, #708]	; (2f3e4 <create_name+0x37c>)
   2f11e:	0011      	movs	r1, r2
   2f120:	0018      	movs	r0, r3
   2f122:	4bb1      	ldr	r3, [pc, #708]	; (2f3e8 <create_name+0x380>)
   2f124:	4798      	blx	r3
   2f126:	1e03      	subs	r3, r0, #0
   2f128:	d001      	beq.n	2f12e <create_name+0xc6>
			return FR_INVALID_NAME;
   2f12a:	2306      	movs	r3, #6
   2f12c:	e1bc      	b.n	2f4a8 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2f12e:	697b      	ldr	r3, [r7, #20]
   2f130:	1c5a      	adds	r2, r3, #1
   2f132:	617a      	str	r2, [r7, #20]
   2f134:	005b      	lsls	r3, r3, #1
   2f136:	68fa      	ldr	r2, [r7, #12]
   2f138:	18d3      	adds	r3, r2, r3
   2f13a:	2224      	movs	r2, #36	; 0x24
   2f13c:	18ba      	adds	r2, r7, r2
   2f13e:	8812      	ldrh	r2, [r2, #0]
   2f140:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2f142:	e7ac      	b.n	2f09e <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2f144:	693a      	ldr	r2, [r7, #16]
   2f146:	69bb      	ldr	r3, [r7, #24]
   2f148:	18d2      	adds	r2, r2, r3
   2f14a:	683b      	ldr	r3, [r7, #0]
   2f14c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2f14e:	2324      	movs	r3, #36	; 0x24
   2f150:	18fb      	adds	r3, r7, r3
   2f152:	881b      	ldrh	r3, [r3, #0]
   2f154:	2b1f      	cmp	r3, #31
   2f156:	d801      	bhi.n	2f15c <create_name+0xf4>
   2f158:	2204      	movs	r2, #4
   2f15a:	e000      	b.n	2f15e <create_name+0xf6>
   2f15c:	2200      	movs	r2, #0
   2f15e:	2326      	movs	r3, #38	; 0x26
   2f160:	18fb      	adds	r3, r7, r3
   2f162:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2f164:	e017      	b.n	2f196 <create_name+0x12e>
		w = lfn[di-1];
   2f166:	697b      	ldr	r3, [r7, #20]
   2f168:	4aa0      	ldr	r2, [pc, #640]	; (2f3ec <create_name+0x384>)
   2f16a:	4694      	mov	ip, r2
   2f16c:	4463      	add	r3, ip
   2f16e:	005b      	lsls	r3, r3, #1
   2f170:	68fa      	ldr	r2, [r7, #12]
   2f172:	18d2      	adds	r2, r2, r3
   2f174:	2324      	movs	r3, #36	; 0x24
   2f176:	18fb      	adds	r3, r7, r3
   2f178:	8812      	ldrh	r2, [r2, #0]
   2f17a:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2f17c:	2324      	movs	r3, #36	; 0x24
   2f17e:	18fb      	adds	r3, r7, r3
   2f180:	881b      	ldrh	r3, [r3, #0]
   2f182:	2b20      	cmp	r3, #32
   2f184:	d004      	beq.n	2f190 <create_name+0x128>
   2f186:	2324      	movs	r3, #36	; 0x24
   2f188:	18fb      	adds	r3, r7, r3
   2f18a:	881b      	ldrh	r3, [r3, #0]
   2f18c:	2b2e      	cmp	r3, #46	; 0x2e
   2f18e:	d106      	bne.n	2f19e <create_name+0x136>
		di--;
   2f190:	697b      	ldr	r3, [r7, #20]
   2f192:	3b01      	subs	r3, #1
   2f194:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2f196:	697b      	ldr	r3, [r7, #20]
   2f198:	2b00      	cmp	r3, #0
   2f19a:	d1e4      	bne.n	2f166 <create_name+0xfe>
   2f19c:	e000      	b.n	2f1a0 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2f19e:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2f1a0:	697b      	ldr	r3, [r7, #20]
   2f1a2:	2b00      	cmp	r3, #0
   2f1a4:	d101      	bne.n	2f1aa <create_name+0x142>
   2f1a6:	2306      	movs	r3, #6
   2f1a8:	e17e      	b.n	2f4a8 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2f1aa:	697b      	ldr	r3, [r7, #20]
   2f1ac:	005b      	lsls	r3, r3, #1
   2f1ae:	68fa      	ldr	r2, [r7, #12]
   2f1b0:	18d3      	adds	r3, r2, r3
   2f1b2:	2200      	movs	r2, #0
   2f1b4:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2f1b6:	687b      	ldr	r3, [r7, #4]
   2f1b8:	699b      	ldr	r3, [r3, #24]
   2f1ba:	220b      	movs	r2, #11
   2f1bc:	2120      	movs	r1, #32
   2f1be:	0018      	movs	r0, r3
   2f1c0:	4b8b      	ldr	r3, [pc, #556]	; (2f3f0 <create_name+0x388>)
   2f1c2:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2f1c4:	2300      	movs	r3, #0
   2f1c6:	61bb      	str	r3, [r7, #24]
   2f1c8:	e002      	b.n	2f1d0 <create_name+0x168>
   2f1ca:	69bb      	ldr	r3, [r7, #24]
   2f1cc:	3301      	adds	r3, #1
   2f1ce:	61bb      	str	r3, [r7, #24]
   2f1d0:	69bb      	ldr	r3, [r7, #24]
   2f1d2:	005b      	lsls	r3, r3, #1
   2f1d4:	68fa      	ldr	r2, [r7, #12]
   2f1d6:	18d3      	adds	r3, r2, r3
   2f1d8:	881b      	ldrh	r3, [r3, #0]
   2f1da:	2b20      	cmp	r3, #32
   2f1dc:	d0f5      	beq.n	2f1ca <create_name+0x162>
   2f1de:	69bb      	ldr	r3, [r7, #24]
   2f1e0:	005b      	lsls	r3, r3, #1
   2f1e2:	68fa      	ldr	r2, [r7, #12]
   2f1e4:	18d3      	adds	r3, r2, r3
   2f1e6:	881b      	ldrh	r3, [r3, #0]
   2f1e8:	2b2e      	cmp	r3, #46	; 0x2e
   2f1ea:	d0ee      	beq.n	2f1ca <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2f1ec:	69bb      	ldr	r3, [r7, #24]
   2f1ee:	2b00      	cmp	r3, #0
   2f1f0:	d00b      	beq.n	2f20a <create_name+0x1a2>
   2f1f2:	2326      	movs	r3, #38	; 0x26
   2f1f4:	18fb      	adds	r3, r7, r3
   2f1f6:	2226      	movs	r2, #38	; 0x26
   2f1f8:	18ba      	adds	r2, r7, r2
   2f1fa:	7812      	ldrb	r2, [r2, #0]
   2f1fc:	2103      	movs	r1, #3
   2f1fe:	430a      	orrs	r2, r1
   2f200:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2f202:	e002      	b.n	2f20a <create_name+0x1a2>
   2f204:	697b      	ldr	r3, [r7, #20]
   2f206:	3b01      	subs	r3, #1
   2f208:	617b      	str	r3, [r7, #20]
   2f20a:	697b      	ldr	r3, [r7, #20]
   2f20c:	2b00      	cmp	r3, #0
   2f20e:	d009      	beq.n	2f224 <create_name+0x1bc>
   2f210:	697b      	ldr	r3, [r7, #20]
   2f212:	4a76      	ldr	r2, [pc, #472]	; (2f3ec <create_name+0x384>)
   2f214:	4694      	mov	ip, r2
   2f216:	4463      	add	r3, ip
   2f218:	005b      	lsls	r3, r3, #1
   2f21a:	68fa      	ldr	r2, [r7, #12]
   2f21c:	18d3      	adds	r3, r2, r3
   2f21e:	881b      	ldrh	r3, [r3, #0]
   2f220:	2b2e      	cmp	r3, #46	; 0x2e
   2f222:	d1ef      	bne.n	2f204 <create_name+0x19c>

	b = i = 0; ni = 8;
   2f224:	2300      	movs	r3, #0
   2f226:	623b      	str	r3, [r7, #32]
   2f228:	2327      	movs	r3, #39	; 0x27
   2f22a:	18fb      	adds	r3, r7, r3
   2f22c:	2200      	movs	r2, #0
   2f22e:	701a      	strb	r2, [r3, #0]
   2f230:	2308      	movs	r3, #8
   2f232:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2f234:	69bb      	ldr	r3, [r7, #24]
   2f236:	1c5a      	adds	r2, r3, #1
   2f238:	61ba      	str	r2, [r7, #24]
   2f23a:	005b      	lsls	r3, r3, #1
   2f23c:	68fa      	ldr	r2, [r7, #12]
   2f23e:	18d2      	adds	r2, r2, r3
   2f240:	2324      	movs	r3, #36	; 0x24
   2f242:	18fb      	adds	r3, r7, r3
   2f244:	8812      	ldrh	r2, [r2, #0]
   2f246:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2f248:	2324      	movs	r3, #36	; 0x24
   2f24a:	18fb      	adds	r3, r7, r3
   2f24c:	881b      	ldrh	r3, [r3, #0]
   2f24e:	2b00      	cmp	r3, #0
   2f250:	d100      	bne.n	2f254 <create_name+0x1ec>
   2f252:	e0c3      	b.n	2f3dc <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2f254:	2324      	movs	r3, #36	; 0x24
   2f256:	18fb      	adds	r3, r7, r3
   2f258:	881b      	ldrh	r3, [r3, #0]
   2f25a:	2b20      	cmp	r3, #32
   2f25c:	d008      	beq.n	2f270 <create_name+0x208>
   2f25e:	2324      	movs	r3, #36	; 0x24
   2f260:	18fb      	adds	r3, r7, r3
   2f262:	881b      	ldrh	r3, [r3, #0]
   2f264:	2b2e      	cmp	r3, #46	; 0x2e
   2f266:	d10c      	bne.n	2f282 <create_name+0x21a>
   2f268:	69ba      	ldr	r2, [r7, #24]
   2f26a:	697b      	ldr	r3, [r7, #20]
   2f26c:	429a      	cmp	r2, r3
   2f26e:	d008      	beq.n	2f282 <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2f270:	2326      	movs	r3, #38	; 0x26
   2f272:	18fb      	adds	r3, r7, r3
   2f274:	2226      	movs	r2, #38	; 0x26
   2f276:	18ba      	adds	r2, r7, r2
   2f278:	7812      	ldrb	r2, [r2, #0]
   2f27a:	2103      	movs	r1, #3
   2f27c:	430a      	orrs	r2, r1
   2f27e:	701a      	strb	r2, [r3, #0]
   2f280:	e0ab      	b.n	2f3da <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2f282:	6a3a      	ldr	r2, [r7, #32]
   2f284:	69fb      	ldr	r3, [r7, #28]
   2f286:	429a      	cmp	r2, r3
   2f288:	d203      	bcs.n	2f292 <create_name+0x22a>
   2f28a:	69ba      	ldr	r2, [r7, #24]
   2f28c:	697b      	ldr	r3, [r7, #20]
   2f28e:	429a      	cmp	r2, r3
   2f290:	d12a      	bne.n	2f2e8 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2f292:	69fb      	ldr	r3, [r7, #28]
   2f294:	2b0b      	cmp	r3, #11
   2f296:	d108      	bne.n	2f2aa <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2f298:	2326      	movs	r3, #38	; 0x26
   2f29a:	18fb      	adds	r3, r7, r3
   2f29c:	2226      	movs	r2, #38	; 0x26
   2f29e:	18ba      	adds	r2, r7, r2
   2f2a0:	7812      	ldrb	r2, [r2, #0]
   2f2a2:	2103      	movs	r1, #3
   2f2a4:	430a      	orrs	r2, r1
   2f2a6:	701a      	strb	r2, [r3, #0]
   2f2a8:	e0a9      	b.n	2f3fe <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2f2aa:	69ba      	ldr	r2, [r7, #24]
   2f2ac:	697b      	ldr	r3, [r7, #20]
   2f2ae:	429a      	cmp	r2, r3
   2f2b0:	d007      	beq.n	2f2c2 <create_name+0x25a>
   2f2b2:	2326      	movs	r3, #38	; 0x26
   2f2b4:	18fb      	adds	r3, r7, r3
   2f2b6:	2226      	movs	r2, #38	; 0x26
   2f2b8:	18ba      	adds	r2, r7, r2
   2f2ba:	7812      	ldrb	r2, [r2, #0]
   2f2bc:	2103      	movs	r1, #3
   2f2be:	430a      	orrs	r2, r1
   2f2c0:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2f2c2:	69ba      	ldr	r2, [r7, #24]
   2f2c4:	697b      	ldr	r3, [r7, #20]
   2f2c6:	429a      	cmp	r2, r3
   2f2c8:	d900      	bls.n	2f2cc <create_name+0x264>
   2f2ca:	e097      	b.n	2f3fc <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2f2cc:	697b      	ldr	r3, [r7, #20]
   2f2ce:	61bb      	str	r3, [r7, #24]
   2f2d0:	2308      	movs	r3, #8
   2f2d2:	623b      	str	r3, [r7, #32]
   2f2d4:	230b      	movs	r3, #11
   2f2d6:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2f2d8:	2327      	movs	r3, #39	; 0x27
   2f2da:	18fb      	adds	r3, r7, r3
   2f2dc:	2227      	movs	r2, #39	; 0x27
   2f2de:	18ba      	adds	r2, r7, r2
   2f2e0:	7812      	ldrb	r2, [r2, #0]
   2f2e2:	0092      	lsls	r2, r2, #2
   2f2e4:	701a      	strb	r2, [r3, #0]
   2f2e6:	e078      	b.n	2f3da <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2f2e8:	2324      	movs	r3, #36	; 0x24
   2f2ea:	18fb      	adds	r3, r7, r3
   2f2ec:	881b      	ldrh	r3, [r3, #0]
   2f2ee:	2b7f      	cmp	r3, #127	; 0x7f
   2f2f0:	d920      	bls.n	2f334 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2f2f2:	2324      	movs	r3, #36	; 0x24
   2f2f4:	18fc      	adds	r4, r7, r3
   2f2f6:	2324      	movs	r3, #36	; 0x24
   2f2f8:	18fb      	adds	r3, r7, r3
   2f2fa:	881b      	ldrh	r3, [r3, #0]
   2f2fc:	2100      	movs	r1, #0
   2f2fe:	0018      	movs	r0, r3
   2f300:	4b37      	ldr	r3, [pc, #220]	; (2f3e0 <create_name+0x378>)
   2f302:	4798      	blx	r3
   2f304:	0003      	movs	r3, r0
   2f306:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2f308:	2324      	movs	r3, #36	; 0x24
   2f30a:	18fb      	adds	r3, r7, r3
   2f30c:	881b      	ldrh	r3, [r3, #0]
   2f30e:	2b00      	cmp	r3, #0
   2f310:	d008      	beq.n	2f324 <create_name+0x2bc>
   2f312:	2324      	movs	r3, #36	; 0x24
   2f314:	18fb      	adds	r3, r7, r3
   2f316:	881b      	ldrh	r3, [r3, #0]
   2f318:	3b80      	subs	r3, #128	; 0x80
   2f31a:	4a36      	ldr	r2, [pc, #216]	; (2f3f4 <create_name+0x38c>)
   2f31c:	5cd2      	ldrb	r2, [r2, r3]
   2f31e:	2324      	movs	r3, #36	; 0x24
   2f320:	18fb      	adds	r3, r7, r3
   2f322:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2f324:	2326      	movs	r3, #38	; 0x26
   2f326:	18fb      	adds	r3, r7, r3
   2f328:	2226      	movs	r2, #38	; 0x26
   2f32a:	18ba      	adds	r2, r7, r2
   2f32c:	7812      	ldrb	r2, [r2, #0]
   2f32e:	2102      	movs	r1, #2
   2f330:	430a      	orrs	r2, r1
   2f332:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2f334:	2324      	movs	r3, #36	; 0x24
   2f336:	18fb      	adds	r3, r7, r3
   2f338:	881b      	ldrh	r3, [r3, #0]
   2f33a:	2b00      	cmp	r3, #0
   2f33c:	d009      	beq.n	2f352 <create_name+0x2ea>
   2f33e:	2324      	movs	r3, #36	; 0x24
   2f340:	18fb      	adds	r3, r7, r3
   2f342:	881a      	ldrh	r2, [r3, #0]
   2f344:	4b2c      	ldr	r3, [pc, #176]	; (2f3f8 <create_name+0x390>)
   2f346:	0011      	movs	r1, r2
   2f348:	0018      	movs	r0, r3
   2f34a:	4b27      	ldr	r3, [pc, #156]	; (2f3e8 <create_name+0x380>)
   2f34c:	4798      	blx	r3
   2f34e:	1e03      	subs	r3, r0, #0
   2f350:	d00c      	beq.n	2f36c <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2f352:	2324      	movs	r3, #36	; 0x24
   2f354:	18fb      	adds	r3, r7, r3
   2f356:	225f      	movs	r2, #95	; 0x5f
   2f358:	801a      	strh	r2, [r3, #0]
   2f35a:	2326      	movs	r3, #38	; 0x26
   2f35c:	18fb      	adds	r3, r7, r3
   2f35e:	2226      	movs	r2, #38	; 0x26
   2f360:	18ba      	adds	r2, r7, r2
   2f362:	7812      	ldrb	r2, [r2, #0]
   2f364:	2103      	movs	r1, #3
   2f366:	430a      	orrs	r2, r1
   2f368:	701a      	strb	r2, [r3, #0]
   2f36a:	e02b      	b.n	2f3c4 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2f36c:	2324      	movs	r3, #36	; 0x24
   2f36e:	18fb      	adds	r3, r7, r3
   2f370:	881b      	ldrh	r3, [r3, #0]
   2f372:	2b40      	cmp	r3, #64	; 0x40
   2f374:	d90d      	bls.n	2f392 <create_name+0x32a>
   2f376:	2324      	movs	r3, #36	; 0x24
   2f378:	18fb      	adds	r3, r7, r3
   2f37a:	881b      	ldrh	r3, [r3, #0]
   2f37c:	2b5a      	cmp	r3, #90	; 0x5a
   2f37e:	d808      	bhi.n	2f392 <create_name+0x32a>
					b |= 2;
   2f380:	2327      	movs	r3, #39	; 0x27
   2f382:	18fb      	adds	r3, r7, r3
   2f384:	2227      	movs	r2, #39	; 0x27
   2f386:	18ba      	adds	r2, r7, r2
   2f388:	7812      	ldrb	r2, [r2, #0]
   2f38a:	2102      	movs	r1, #2
   2f38c:	430a      	orrs	r2, r1
   2f38e:	701a      	strb	r2, [r3, #0]
   2f390:	e018      	b.n	2f3c4 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2f392:	2324      	movs	r3, #36	; 0x24
   2f394:	18fb      	adds	r3, r7, r3
   2f396:	881b      	ldrh	r3, [r3, #0]
   2f398:	2b60      	cmp	r3, #96	; 0x60
   2f39a:	d913      	bls.n	2f3c4 <create_name+0x35c>
   2f39c:	2324      	movs	r3, #36	; 0x24
   2f39e:	18fb      	adds	r3, r7, r3
   2f3a0:	881b      	ldrh	r3, [r3, #0]
   2f3a2:	2b7a      	cmp	r3, #122	; 0x7a
   2f3a4:	d80e      	bhi.n	2f3c4 <create_name+0x35c>
						b |= 1; w -= 0x20;
   2f3a6:	2327      	movs	r3, #39	; 0x27
   2f3a8:	18fb      	adds	r3, r7, r3
   2f3aa:	2227      	movs	r2, #39	; 0x27
   2f3ac:	18ba      	adds	r2, r7, r2
   2f3ae:	7812      	ldrb	r2, [r2, #0]
   2f3b0:	2101      	movs	r1, #1
   2f3b2:	430a      	orrs	r2, r1
   2f3b4:	701a      	strb	r2, [r3, #0]
   2f3b6:	2324      	movs	r3, #36	; 0x24
   2f3b8:	18fb      	adds	r3, r7, r3
   2f3ba:	2224      	movs	r2, #36	; 0x24
   2f3bc:	18ba      	adds	r2, r7, r2
   2f3be:	8812      	ldrh	r2, [r2, #0]
   2f3c0:	3a20      	subs	r2, #32
   2f3c2:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2f3c4:	687b      	ldr	r3, [r7, #4]
   2f3c6:	699a      	ldr	r2, [r3, #24]
   2f3c8:	6a3b      	ldr	r3, [r7, #32]
   2f3ca:	1c59      	adds	r1, r3, #1
   2f3cc:	6239      	str	r1, [r7, #32]
   2f3ce:	18d3      	adds	r3, r2, r3
   2f3d0:	2224      	movs	r2, #36	; 0x24
   2f3d2:	18ba      	adds	r2, r7, r2
   2f3d4:	8812      	ldrh	r2, [r2, #0]
   2f3d6:	b2d2      	uxtb	r2, r2
   2f3d8:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2f3da:	e72b      	b.n	2f234 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2f3dc:	46c0      	nop			; (mov r8, r8)
   2f3de:	e00e      	b.n	2f3fe <create_name+0x396>
   2f3e0:	000307a1 	.word	0x000307a1
   2f3e4:	0003c898 	.word	0x0003c898
   2f3e8:	0002dc0b 	.word	0x0002dc0b
   2f3ec:	7fffffff 	.word	0x7fffffff
   2f3f0:	0002db91 	.word	0x0002db91
   2f3f4:	0003c8e0 	.word	0x0003c8e0
   2f3f8:	0003c8a4 	.word	0x0003c8a4
			if (si > di) break;			/* No extension */
   2f3fc:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2f3fe:	687b      	ldr	r3, [r7, #4]
   2f400:	699b      	ldr	r3, [r3, #24]
   2f402:	781b      	ldrb	r3, [r3, #0]
   2f404:	2be5      	cmp	r3, #229	; 0xe5
   2f406:	d103      	bne.n	2f410 <create_name+0x3a8>
   2f408:	687b      	ldr	r3, [r7, #4]
   2f40a:	699b      	ldr	r3, [r3, #24]
   2f40c:	2205      	movs	r2, #5
   2f40e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2f410:	69fb      	ldr	r3, [r7, #28]
   2f412:	2b08      	cmp	r3, #8
   2f414:	d106      	bne.n	2f424 <create_name+0x3bc>
   2f416:	2327      	movs	r3, #39	; 0x27
   2f418:	18fb      	adds	r3, r7, r3
   2f41a:	2227      	movs	r2, #39	; 0x27
   2f41c:	18ba      	adds	r2, r7, r2
   2f41e:	7812      	ldrb	r2, [r2, #0]
   2f420:	0092      	lsls	r2, r2, #2
   2f422:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2f424:	2327      	movs	r3, #39	; 0x27
   2f426:	18fb      	adds	r3, r7, r3
   2f428:	781b      	ldrb	r3, [r3, #0]
   2f42a:	220c      	movs	r2, #12
   2f42c:	4013      	ands	r3, r2
   2f42e:	2b0c      	cmp	r3, #12
   2f430:	d006      	beq.n	2f440 <create_name+0x3d8>
   2f432:	2327      	movs	r3, #39	; 0x27
   2f434:	18fb      	adds	r3, r7, r3
   2f436:	781b      	ldrb	r3, [r3, #0]
   2f438:	2203      	movs	r2, #3
   2f43a:	4013      	ands	r3, r2
   2f43c:	2b03      	cmp	r3, #3
   2f43e:	d107      	bne.n	2f450 <create_name+0x3e8>
		cf |= NS_LFN;
   2f440:	2326      	movs	r3, #38	; 0x26
   2f442:	18fb      	adds	r3, r7, r3
   2f444:	2226      	movs	r2, #38	; 0x26
   2f446:	18ba      	adds	r2, r7, r2
   2f448:	7812      	ldrb	r2, [r2, #0]
   2f44a:	2102      	movs	r1, #2
   2f44c:	430a      	orrs	r2, r1
   2f44e:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2f450:	2326      	movs	r3, #38	; 0x26
   2f452:	18fb      	adds	r3, r7, r3
   2f454:	781b      	ldrb	r3, [r3, #0]
   2f456:	2202      	movs	r2, #2
   2f458:	4013      	ands	r3, r2
   2f45a:	d11d      	bne.n	2f498 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2f45c:	2327      	movs	r3, #39	; 0x27
   2f45e:	18fb      	adds	r3, r7, r3
   2f460:	781b      	ldrb	r3, [r3, #0]
   2f462:	2203      	movs	r2, #3
   2f464:	4013      	ands	r3, r2
   2f466:	2b01      	cmp	r3, #1
   2f468:	d107      	bne.n	2f47a <create_name+0x412>
   2f46a:	2326      	movs	r3, #38	; 0x26
   2f46c:	18fb      	adds	r3, r7, r3
   2f46e:	2226      	movs	r2, #38	; 0x26
   2f470:	18ba      	adds	r2, r7, r2
   2f472:	7812      	ldrb	r2, [r2, #0]
   2f474:	2110      	movs	r1, #16
   2f476:	430a      	orrs	r2, r1
   2f478:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2f47a:	2327      	movs	r3, #39	; 0x27
   2f47c:	18fb      	adds	r3, r7, r3
   2f47e:	781b      	ldrb	r3, [r3, #0]
   2f480:	220c      	movs	r2, #12
   2f482:	4013      	ands	r3, r2
   2f484:	2b04      	cmp	r3, #4
   2f486:	d107      	bne.n	2f498 <create_name+0x430>
   2f488:	2326      	movs	r3, #38	; 0x26
   2f48a:	18fb      	adds	r3, r7, r3
   2f48c:	2226      	movs	r2, #38	; 0x26
   2f48e:	18ba      	adds	r2, r7, r2
   2f490:	7812      	ldrb	r2, [r2, #0]
   2f492:	2108      	movs	r1, #8
   2f494:	430a      	orrs	r2, r1
   2f496:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2f498:	687b      	ldr	r3, [r7, #4]
   2f49a:	699b      	ldr	r3, [r3, #24]
   2f49c:	330b      	adds	r3, #11
   2f49e:	2226      	movs	r2, #38	; 0x26
   2f4a0:	18ba      	adds	r2, r7, r2
   2f4a2:	7812      	ldrb	r2, [r2, #0]
   2f4a4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2f4a6:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2f4a8:	0018      	movs	r0, r3
   2f4aa:	46bd      	mov	sp, r7
   2f4ac:	b00b      	add	sp, #44	; 0x2c
   2f4ae:	bd90      	pop	{r4, r7, pc}

0002f4b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2f4b0:	b590      	push	{r4, r7, lr}
   2f4b2:	b085      	sub	sp, #20
   2f4b4:	af00      	add	r7, sp, #0
   2f4b6:	6078      	str	r0, [r7, #4]
   2f4b8:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2f4ba:	683b      	ldr	r3, [r7, #0]
   2f4bc:	781b      	ldrb	r3, [r3, #0]
   2f4be:	2b2f      	cmp	r3, #47	; 0x2f
   2f4c0:	d003      	beq.n	2f4ca <follow_path+0x1a>
   2f4c2:	683b      	ldr	r3, [r7, #0]
   2f4c4:	781b      	ldrb	r3, [r3, #0]
   2f4c6:	2b5c      	cmp	r3, #92	; 0x5c
   2f4c8:	d102      	bne.n	2f4d0 <follow_path+0x20>
		path++;
   2f4ca:	683b      	ldr	r3, [r7, #0]
   2f4cc:	3301      	adds	r3, #1
   2f4ce:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2f4d0:	687b      	ldr	r3, [r7, #4]
   2f4d2:	2200      	movs	r2, #0
   2f4d4:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2f4d6:	683b      	ldr	r3, [r7, #0]
   2f4d8:	781b      	ldrb	r3, [r3, #0]
   2f4da:	2b1f      	cmp	r3, #31
   2f4dc:	d80c      	bhi.n	2f4f8 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2f4de:	230f      	movs	r3, #15
   2f4e0:	18fc      	adds	r4, r7, r3
   2f4e2:	687b      	ldr	r3, [r7, #4]
   2f4e4:	2100      	movs	r1, #0
   2f4e6:	0018      	movs	r0, r3
   2f4e8:	4b3c      	ldr	r3, [pc, #240]	; (2f5dc <follow_path+0x12c>)
   2f4ea:	4798      	blx	r3
   2f4ec:	0003      	movs	r3, r0
   2f4ee:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2f4f0:	687b      	ldr	r3, [r7, #4]
   2f4f2:	2200      	movs	r2, #0
   2f4f4:	615a      	str	r2, [r3, #20]
   2f4f6:	e06a      	b.n	2f5ce <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2f4f8:	230f      	movs	r3, #15
   2f4fa:	18fc      	adds	r4, r7, r3
   2f4fc:	003a      	movs	r2, r7
   2f4fe:	687b      	ldr	r3, [r7, #4]
   2f500:	0011      	movs	r1, r2
   2f502:	0018      	movs	r0, r3
   2f504:	4b36      	ldr	r3, [pc, #216]	; (2f5e0 <follow_path+0x130>)
   2f506:	4798      	blx	r3
   2f508:	0003      	movs	r3, r0
   2f50a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2f50c:	230f      	movs	r3, #15
   2f50e:	18fb      	adds	r3, r7, r3
   2f510:	781b      	ldrb	r3, [r3, #0]
   2f512:	2b00      	cmp	r3, #0
   2f514:	d154      	bne.n	2f5c0 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2f516:	230f      	movs	r3, #15
   2f518:	18fc      	adds	r4, r7, r3
   2f51a:	687b      	ldr	r3, [r7, #4]
   2f51c:	0018      	movs	r0, r3
   2f51e:	4b31      	ldr	r3, [pc, #196]	; (2f5e4 <follow_path+0x134>)
   2f520:	4798      	blx	r3
   2f522:	0003      	movs	r3, r0
   2f524:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2f526:	687b      	ldr	r3, [r7, #4]
   2f528:	699a      	ldr	r2, [r3, #24]
   2f52a:	230e      	movs	r3, #14
   2f52c:	18fb      	adds	r3, r7, r3
   2f52e:	7ad2      	ldrb	r2, [r2, #11]
   2f530:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2f532:	230f      	movs	r3, #15
   2f534:	18fb      	adds	r3, r7, r3
   2f536:	781b      	ldrb	r3, [r3, #0]
   2f538:	2b00      	cmp	r3, #0
   2f53a:	d00f      	beq.n	2f55c <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2f53c:	230f      	movs	r3, #15
   2f53e:	18fb      	adds	r3, r7, r3
   2f540:	781b      	ldrb	r3, [r3, #0]
   2f542:	2b04      	cmp	r3, #4
   2f544:	d13e      	bne.n	2f5c4 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2f546:	230e      	movs	r3, #14
   2f548:	18fb      	adds	r3, r7, r3
   2f54a:	781b      	ldrb	r3, [r3, #0]
   2f54c:	2204      	movs	r2, #4
   2f54e:	4013      	ands	r3, r2
   2f550:	d13a      	bne.n	2f5c8 <follow_path+0x118>
   2f552:	230f      	movs	r3, #15
   2f554:	18fb      	adds	r3, r7, r3
   2f556:	2205      	movs	r2, #5
   2f558:	701a      	strb	r2, [r3, #0]
				}
				break;
   2f55a:	e035      	b.n	2f5c8 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2f55c:	230e      	movs	r3, #14
   2f55e:	18fb      	adds	r3, r7, r3
   2f560:	781b      	ldrb	r3, [r3, #0]
   2f562:	2204      	movs	r2, #4
   2f564:	4013      	ands	r3, r2
   2f566:	d131      	bne.n	2f5cc <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2f568:	687b      	ldr	r3, [r7, #4]
   2f56a:	695b      	ldr	r3, [r3, #20]
   2f56c:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2f56e:	68bb      	ldr	r3, [r7, #8]
   2f570:	330b      	adds	r3, #11
   2f572:	781b      	ldrb	r3, [r3, #0]
   2f574:	001a      	movs	r2, r3
   2f576:	2310      	movs	r3, #16
   2f578:	4013      	ands	r3, r2
   2f57a:	d104      	bne.n	2f586 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2f57c:	230f      	movs	r3, #15
   2f57e:	18fb      	adds	r3, r7, r3
   2f580:	2205      	movs	r2, #5
   2f582:	701a      	strb	r2, [r3, #0]
   2f584:	e023      	b.n	2f5ce <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2f586:	68bb      	ldr	r3, [r7, #8]
   2f588:	3315      	adds	r3, #21
   2f58a:	781b      	ldrb	r3, [r3, #0]
   2f58c:	021b      	lsls	r3, r3, #8
   2f58e:	b21a      	sxth	r2, r3
   2f590:	68bb      	ldr	r3, [r7, #8]
   2f592:	3314      	adds	r3, #20
   2f594:	781b      	ldrb	r3, [r3, #0]
   2f596:	b21b      	sxth	r3, r3
   2f598:	4313      	orrs	r3, r2
   2f59a:	b21b      	sxth	r3, r3
   2f59c:	b29b      	uxth	r3, r3
   2f59e:	041b      	lsls	r3, r3, #16
   2f5a0:	68ba      	ldr	r2, [r7, #8]
   2f5a2:	321b      	adds	r2, #27
   2f5a4:	7812      	ldrb	r2, [r2, #0]
   2f5a6:	0212      	lsls	r2, r2, #8
   2f5a8:	b211      	sxth	r1, r2
   2f5aa:	68ba      	ldr	r2, [r7, #8]
   2f5ac:	321a      	adds	r2, #26
   2f5ae:	7812      	ldrb	r2, [r2, #0]
   2f5b0:	b212      	sxth	r2, r2
   2f5b2:	430a      	orrs	r2, r1
   2f5b4:	b212      	sxth	r2, r2
   2f5b6:	b292      	uxth	r2, r2
   2f5b8:	431a      	orrs	r2, r3
   2f5ba:	687b      	ldr	r3, [r7, #4]
   2f5bc:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2f5be:	e79b      	b.n	2f4f8 <follow_path+0x48>
			if (res != FR_OK) break;
   2f5c0:	46c0      	nop			; (mov r8, r8)
   2f5c2:	e004      	b.n	2f5ce <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2f5c4:	46c0      	nop			; (mov r8, r8)
   2f5c6:	e002      	b.n	2f5ce <follow_path+0x11e>
				break;
   2f5c8:	46c0      	nop			; (mov r8, r8)
   2f5ca:	e000      	b.n	2f5ce <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2f5cc:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2f5ce:	230f      	movs	r3, #15
   2f5d0:	18fb      	adds	r3, r7, r3
   2f5d2:	781b      	ldrb	r3, [r3, #0]
}
   2f5d4:	0018      	movs	r0, r3
   2f5d6:	46bd      	mov	sp, r7
   2f5d8:	b005      	add	sp, #20
   2f5da:	bd90      	pop	{r4, r7, pc}
   2f5dc:	0002e481 	.word	0x0002e481
   2f5e0:	0002f069 	.word	0x0002f069
   2f5e4:	0002eb05 	.word	0x0002eb05

0002f5e8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2f5e8:	b590      	push	{r4, r7, lr}
   2f5ea:	b083      	sub	sp, #12
   2f5ec:	af00      	add	r7, sp, #0
   2f5ee:	6078      	str	r0, [r7, #4]
   2f5f0:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2f5f2:	687b      	ldr	r3, [r7, #4]
   2f5f4:	7858      	ldrb	r0, [r3, #1]
   2f5f6:	687b      	ldr	r3, [r7, #4]
   2f5f8:	3330      	adds	r3, #48	; 0x30
   2f5fa:	0019      	movs	r1, r3
   2f5fc:	683a      	ldr	r2, [r7, #0]
   2f5fe:	2301      	movs	r3, #1
   2f600:	4c2a      	ldr	r4, [pc, #168]	; (2f6ac <check_fs+0xc4>)
   2f602:	47a0      	blx	r4
   2f604:	1e03      	subs	r3, r0, #0
   2f606:	d001      	beq.n	2f60c <check_fs+0x24>
		return 3;
   2f608:	2303      	movs	r3, #3
   2f60a:	e04b      	b.n	2f6a4 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2f60c:	687b      	ldr	r3, [r7, #4]
   2f60e:	4a28      	ldr	r2, [pc, #160]	; (2f6b0 <check_fs+0xc8>)
   2f610:	4694      	mov	ip, r2
   2f612:	4463      	add	r3, ip
   2f614:	3301      	adds	r3, #1
   2f616:	781b      	ldrb	r3, [r3, #0]
   2f618:	021b      	lsls	r3, r3, #8
   2f61a:	b21a      	sxth	r2, r3
   2f61c:	687b      	ldr	r3, [r7, #4]
   2f61e:	4924      	ldr	r1, [pc, #144]	; (2f6b0 <check_fs+0xc8>)
   2f620:	5c5b      	ldrb	r3, [r3, r1]
   2f622:	b21b      	sxth	r3, r3
   2f624:	4313      	orrs	r3, r2
   2f626:	b21b      	sxth	r3, r3
   2f628:	4a22      	ldr	r2, [pc, #136]	; (2f6b4 <check_fs+0xcc>)
   2f62a:	4293      	cmp	r3, r2
   2f62c:	d001      	beq.n	2f632 <check_fs+0x4a>
		return 2;
   2f62e:	2302      	movs	r3, #2
   2f630:	e038      	b.n	2f6a4 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2f632:	687b      	ldr	r3, [r7, #4]
   2f634:	3366      	adds	r3, #102	; 0x66
   2f636:	3303      	adds	r3, #3
   2f638:	781b      	ldrb	r3, [r3, #0]
   2f63a:	061a      	lsls	r2, r3, #24
   2f63c:	687b      	ldr	r3, [r7, #4]
   2f63e:	3366      	adds	r3, #102	; 0x66
   2f640:	3302      	adds	r3, #2
   2f642:	781b      	ldrb	r3, [r3, #0]
   2f644:	041b      	lsls	r3, r3, #16
   2f646:	4313      	orrs	r3, r2
   2f648:	687a      	ldr	r2, [r7, #4]
   2f64a:	3266      	adds	r2, #102	; 0x66
   2f64c:	3201      	adds	r2, #1
   2f64e:	7812      	ldrb	r2, [r2, #0]
   2f650:	0212      	lsls	r2, r2, #8
   2f652:	4313      	orrs	r3, r2
   2f654:	687a      	ldr	r2, [r7, #4]
   2f656:	2166      	movs	r1, #102	; 0x66
   2f658:	5c52      	ldrb	r2, [r2, r1]
   2f65a:	4313      	orrs	r3, r2
   2f65c:	021b      	lsls	r3, r3, #8
   2f65e:	0a1b      	lsrs	r3, r3, #8
   2f660:	4a15      	ldr	r2, [pc, #84]	; (2f6b8 <check_fs+0xd0>)
   2f662:	4293      	cmp	r3, r2
   2f664:	d101      	bne.n	2f66a <check_fs+0x82>
		return 0;
   2f666:	2300      	movs	r3, #0
   2f668:	e01c      	b.n	2f6a4 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2f66a:	687b      	ldr	r3, [r7, #4]
   2f66c:	3382      	adds	r3, #130	; 0x82
   2f66e:	3303      	adds	r3, #3
   2f670:	781b      	ldrb	r3, [r3, #0]
   2f672:	061a      	lsls	r2, r3, #24
   2f674:	687b      	ldr	r3, [r7, #4]
   2f676:	3382      	adds	r3, #130	; 0x82
   2f678:	3302      	adds	r3, #2
   2f67a:	781b      	ldrb	r3, [r3, #0]
   2f67c:	041b      	lsls	r3, r3, #16
   2f67e:	4313      	orrs	r3, r2
   2f680:	687a      	ldr	r2, [r7, #4]
   2f682:	3282      	adds	r2, #130	; 0x82
   2f684:	3201      	adds	r2, #1
   2f686:	7812      	ldrb	r2, [r2, #0]
   2f688:	0212      	lsls	r2, r2, #8
   2f68a:	4313      	orrs	r3, r2
   2f68c:	687a      	ldr	r2, [r7, #4]
   2f68e:	2182      	movs	r1, #130	; 0x82
   2f690:	5c52      	ldrb	r2, [r2, r1]
   2f692:	4313      	orrs	r3, r2
   2f694:	021b      	lsls	r3, r3, #8
   2f696:	0a1b      	lsrs	r3, r3, #8
   2f698:	4a07      	ldr	r2, [pc, #28]	; (2f6b8 <check_fs+0xd0>)
   2f69a:	4293      	cmp	r3, r2
   2f69c:	d101      	bne.n	2f6a2 <check_fs+0xba>
		return 0;
   2f69e:	2300      	movs	r3, #0
   2f6a0:	e000      	b.n	2f6a4 <check_fs+0xbc>

	return 1;
   2f6a2:	2301      	movs	r3, #1
}
   2f6a4:	0018      	movs	r0, r3
   2f6a6:	46bd      	mov	sp, r7
   2f6a8:	b003      	add	sp, #12
   2f6aa:	bd90      	pop	{r4, r7, pc}
   2f6ac:	0002d851 	.word	0x0002d851
   2f6b0:	0000022e 	.word	0x0000022e
   2f6b4:	ffffaa55 	.word	0xffffaa55
   2f6b8:	00544146 	.word	0x00544146

0002f6bc <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2f6bc:	b590      	push	{r4, r7, lr}
   2f6be:	b093      	sub	sp, #76	; 0x4c
   2f6c0:	af00      	add	r7, sp, #0
   2f6c2:	60f8      	str	r0, [r7, #12]
   2f6c4:	60b9      	str	r1, [r7, #8]
   2f6c6:	1dfb      	adds	r3, r7, #7
   2f6c8:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2f6ca:	68fb      	ldr	r3, [r7, #12]
   2f6cc:	681b      	ldr	r3, [r3, #0]
   2f6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2f6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2f6d2:	781b      	ldrb	r3, [r3, #0]
   2f6d4:	3b30      	subs	r3, #48	; 0x30
   2f6d6:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2f6d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f6da:	2b09      	cmp	r3, #9
   2f6dc:	d80b      	bhi.n	2f6f6 <chk_mounted+0x3a>
   2f6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2f6e0:	3301      	adds	r3, #1
   2f6e2:	781b      	ldrb	r3, [r3, #0]
   2f6e4:	2b3a      	cmp	r3, #58	; 0x3a
   2f6e6:	d106      	bne.n	2f6f6 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2f6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2f6ea:	3302      	adds	r3, #2
   2f6ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   2f6ee:	68fb      	ldr	r3, [r7, #12]
   2f6f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2f6f2:	601a      	str	r2, [r3, #0]
   2f6f4:	e001      	b.n	2f6fa <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2f6f6:	2300      	movs	r3, #0
   2f6f8:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2f6fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f6fc:	2b07      	cmp	r3, #7
   2f6fe:	d901      	bls.n	2f704 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2f700:	230b      	movs	r3, #11
   2f702:	e2af      	b.n	2fc64 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2f704:	4bc5      	ldr	r3, [pc, #788]	; (2fa1c <chk_mounted+0x360>)
   2f706:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2f708:	0092      	lsls	r2, r2, #2
   2f70a:	58d3      	ldr	r3, [r2, r3]
   2f70c:	62bb      	str	r3, [r7, #40]	; 0x28
   2f70e:	68bb      	ldr	r3, [r7, #8]
   2f710:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f712:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2f714:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f716:	2b00      	cmp	r3, #0
   2f718:	d101      	bne.n	2f71e <chk_mounted+0x62>
   2f71a:	230c      	movs	r3, #12
   2f71c:	e2a2      	b.n	2fc64 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2f71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f720:	781b      	ldrb	r3, [r3, #0]
   2f722:	2b00      	cmp	r3, #0
   2f724:	d01c      	beq.n	2f760 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2f726:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f728:	785b      	ldrb	r3, [r3, #1]
   2f72a:	2227      	movs	r2, #39	; 0x27
   2f72c:	18bc      	adds	r4, r7, r2
   2f72e:	0018      	movs	r0, r3
   2f730:	4bbb      	ldr	r3, [pc, #748]	; (2fa20 <chk_mounted+0x364>)
   2f732:	4798      	blx	r3
   2f734:	0003      	movs	r3, r0
   2f736:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2f738:	2327      	movs	r3, #39	; 0x27
   2f73a:	18fb      	adds	r3, r7, r3
   2f73c:	781b      	ldrb	r3, [r3, #0]
   2f73e:	2201      	movs	r2, #1
   2f740:	4013      	ands	r3, r2
   2f742:	d10d      	bne.n	2f760 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2f744:	1dfb      	adds	r3, r7, #7
   2f746:	781b      	ldrb	r3, [r3, #0]
   2f748:	2b00      	cmp	r3, #0
   2f74a:	d007      	beq.n	2f75c <chk_mounted+0xa0>
   2f74c:	2327      	movs	r3, #39	; 0x27
   2f74e:	18fb      	adds	r3, r7, r3
   2f750:	781b      	ldrb	r3, [r3, #0]
   2f752:	2204      	movs	r2, #4
   2f754:	4013      	ands	r3, r2
   2f756:	d001      	beq.n	2f75c <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2f758:	230a      	movs	r3, #10
   2f75a:	e283      	b.n	2fc64 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2f75c:	2300      	movs	r3, #0
   2f75e:	e281      	b.n	2fc64 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2f760:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f762:	2200      	movs	r2, #0
   2f764:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2f766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f768:	b2da      	uxtb	r2, r3
   2f76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f76c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2f76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f770:	785b      	ldrb	r3, [r3, #1]
   2f772:	2227      	movs	r2, #39	; 0x27
   2f774:	18bc      	adds	r4, r7, r2
   2f776:	0018      	movs	r0, r3
   2f778:	4baa      	ldr	r3, [pc, #680]	; (2fa24 <chk_mounted+0x368>)
   2f77a:	4798      	blx	r3
   2f77c:	0003      	movs	r3, r0
   2f77e:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2f780:	2327      	movs	r3, #39	; 0x27
   2f782:	18fb      	adds	r3, r7, r3
   2f784:	781b      	ldrb	r3, [r3, #0]
   2f786:	2201      	movs	r2, #1
   2f788:	4013      	ands	r3, r2
   2f78a:	d001      	beq.n	2f790 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2f78c:	2303      	movs	r3, #3
   2f78e:	e269      	b.n	2fc64 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2f790:	1dfb      	adds	r3, r7, #7
   2f792:	781b      	ldrb	r3, [r3, #0]
   2f794:	2b00      	cmp	r3, #0
   2f796:	d007      	beq.n	2f7a8 <chk_mounted+0xec>
   2f798:	2327      	movs	r3, #39	; 0x27
   2f79a:	18fb      	adds	r3, r7, r3
   2f79c:	781b      	ldrb	r3, [r3, #0]
   2f79e:	2204      	movs	r2, #4
   2f7a0:	4013      	ands	r3, r2
   2f7a2:	d001      	beq.n	2f7a8 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2f7a4:	230a      	movs	r3, #10
   2f7a6:	e25d      	b.n	2fc64 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2f7a8:	2300      	movs	r3, #0
   2f7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   2f7ac:	2347      	movs	r3, #71	; 0x47
   2f7ae:	18fc      	adds	r4, r7, r3
   2f7b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2f7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f7b4:	0011      	movs	r1, r2
   2f7b6:	0018      	movs	r0, r3
   2f7b8:	4b9b      	ldr	r3, [pc, #620]	; (2fa28 <chk_mounted+0x36c>)
   2f7ba:	4798      	blx	r3
   2f7bc:	0003      	movs	r3, r0
   2f7be:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2f7c0:	2347      	movs	r3, #71	; 0x47
   2f7c2:	18fb      	adds	r3, r7, r3
   2f7c4:	781b      	ldrb	r3, [r3, #0]
   2f7c6:	2b01      	cmp	r3, #1
   2f7c8:	d13b      	bne.n	2f842 <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2f7ca:	2346      	movs	r3, #70	; 0x46
   2f7cc:	18fb      	adds	r3, r7, r3
   2f7ce:	2200      	movs	r2, #0
   2f7d0:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2f7d2:	2346      	movs	r3, #70	; 0x46
   2f7d4:	18fb      	adds	r3, r7, r3
   2f7d6:	781b      	ldrb	r3, [r3, #0]
   2f7d8:	2b00      	cmp	r3, #0
   2f7da:	d006      	beq.n	2f7ea <chk_mounted+0x12e>
   2f7dc:	2346      	movs	r3, #70	; 0x46
   2f7de:	18fb      	adds	r3, r7, r3
   2f7e0:	781a      	ldrb	r2, [r3, #0]
   2f7e2:	2346      	movs	r3, #70	; 0x46
   2f7e4:	18fb      	adds	r3, r7, r3
   2f7e6:	3a01      	subs	r2, #1
   2f7e8:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2f7ea:	2346      	movs	r3, #70	; 0x46
   2f7ec:	18fb      	adds	r3, r7, r3
   2f7ee:	781b      	ldrb	r3, [r3, #0]
   2f7f0:	011b      	lsls	r3, r3, #4
   2f7f2:	33bf      	adds	r3, #191	; 0xbf
   2f7f4:	33ff      	adds	r3, #255	; 0xff
   2f7f6:	3330      	adds	r3, #48	; 0x30
   2f7f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f7fa:	18d3      	adds	r3, r2, r3
   2f7fc:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2f7fe:	6a3b      	ldr	r3, [r7, #32]
   2f800:	3304      	adds	r3, #4
   2f802:	781b      	ldrb	r3, [r3, #0]
   2f804:	2b00      	cmp	r3, #0
   2f806:	d01c      	beq.n	2f842 <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2f808:	6a3b      	ldr	r3, [r7, #32]
   2f80a:	330b      	adds	r3, #11
   2f80c:	781b      	ldrb	r3, [r3, #0]
   2f80e:	061a      	lsls	r2, r3, #24
   2f810:	6a3b      	ldr	r3, [r7, #32]
   2f812:	330a      	adds	r3, #10
   2f814:	781b      	ldrb	r3, [r3, #0]
   2f816:	041b      	lsls	r3, r3, #16
   2f818:	4313      	orrs	r3, r2
   2f81a:	6a3a      	ldr	r2, [r7, #32]
   2f81c:	3209      	adds	r2, #9
   2f81e:	7812      	ldrb	r2, [r2, #0]
   2f820:	0212      	lsls	r2, r2, #8
   2f822:	4313      	orrs	r3, r2
   2f824:	6a3a      	ldr	r2, [r7, #32]
   2f826:	3208      	adds	r2, #8
   2f828:	7812      	ldrb	r2, [r2, #0]
   2f82a:	4313      	orrs	r3, r2
   2f82c:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2f82e:	2347      	movs	r3, #71	; 0x47
   2f830:	18fc      	adds	r4, r7, r3
   2f832:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2f834:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f836:	0011      	movs	r1, r2
   2f838:	0018      	movs	r0, r3
   2f83a:	4b7b      	ldr	r3, [pc, #492]	; (2fa28 <chk_mounted+0x36c>)
   2f83c:	4798      	blx	r3
   2f83e:	0003      	movs	r3, r0
   2f840:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2f842:	2347      	movs	r3, #71	; 0x47
   2f844:	18fb      	adds	r3, r7, r3
   2f846:	781b      	ldrb	r3, [r3, #0]
   2f848:	2b03      	cmp	r3, #3
   2f84a:	d101      	bne.n	2f850 <chk_mounted+0x194>
   2f84c:	2301      	movs	r3, #1
   2f84e:	e209      	b.n	2fc64 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2f850:	2347      	movs	r3, #71	; 0x47
   2f852:	18fb      	adds	r3, r7, r3
   2f854:	781b      	ldrb	r3, [r3, #0]
   2f856:	2b00      	cmp	r3, #0
   2f858:	d001      	beq.n	2f85e <chk_mounted+0x1a2>
   2f85a:	230d      	movs	r3, #13
   2f85c:	e202      	b.n	2fc64 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2f85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f860:	223c      	movs	r2, #60	; 0x3c
   2f862:	5c9b      	ldrb	r3, [r3, r2]
   2f864:	021b      	lsls	r3, r3, #8
   2f866:	b21a      	sxth	r2, r3
   2f868:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f86a:	213b      	movs	r1, #59	; 0x3b
   2f86c:	5c5b      	ldrb	r3, [r3, r1]
   2f86e:	b21b      	sxth	r3, r3
   2f870:	4313      	orrs	r3, r2
   2f872:	b21a      	sxth	r2, r3
   2f874:	2380      	movs	r3, #128	; 0x80
   2f876:	009b      	lsls	r3, r3, #2
   2f878:	429a      	cmp	r2, r3
   2f87a:	d001      	beq.n	2f880 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2f87c:	230d      	movs	r3, #13
   2f87e:	e1f1      	b.n	2fc64 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2f880:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f882:	2247      	movs	r2, #71	; 0x47
   2f884:	5c9b      	ldrb	r3, [r3, r2]
   2f886:	021b      	lsls	r3, r3, #8
   2f888:	b21a      	sxth	r2, r3
   2f88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f88c:	2146      	movs	r1, #70	; 0x46
   2f88e:	5c5b      	ldrb	r3, [r3, r1]
   2f890:	b21b      	sxth	r3, r3
   2f892:	4313      	orrs	r3, r2
   2f894:	b21b      	sxth	r3, r3
   2f896:	b29b      	uxth	r3, r3
   2f898:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2f89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f89c:	2b00      	cmp	r3, #0
   2f89e:	d112      	bne.n	2f8c6 <chk_mounted+0x20a>
   2f8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f8a2:	2257      	movs	r2, #87	; 0x57
   2f8a4:	5c9b      	ldrb	r3, [r3, r2]
   2f8a6:	061a      	lsls	r2, r3, #24
   2f8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f8aa:	2156      	movs	r1, #86	; 0x56
   2f8ac:	5c5b      	ldrb	r3, [r3, r1]
   2f8ae:	041b      	lsls	r3, r3, #16
   2f8b0:	4313      	orrs	r3, r2
   2f8b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f8b4:	2155      	movs	r1, #85	; 0x55
   2f8b6:	5c52      	ldrb	r2, [r2, r1]
   2f8b8:	0212      	lsls	r2, r2, #8
   2f8ba:	4313      	orrs	r3, r2
   2f8bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f8be:	2154      	movs	r1, #84	; 0x54
   2f8c0:	5c52      	ldrb	r2, [r2, r1]
   2f8c2:	4313      	orrs	r3, r2
   2f8c4:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2f8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f8c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2f8ca:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2f8cc:	231f      	movs	r3, #31
   2f8ce:	18fb      	adds	r3, r7, r3
   2f8d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f8d2:	2140      	movs	r1, #64	; 0x40
   2f8d4:	5c52      	ldrb	r2, [r2, r1]
   2f8d6:	701a      	strb	r2, [r3, #0]
   2f8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f8da:	221f      	movs	r2, #31
   2f8dc:	18ba      	adds	r2, r7, r2
   2f8de:	7812      	ldrb	r2, [r2, #0]
   2f8e0:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2f8e2:	231f      	movs	r3, #31
   2f8e4:	18fb      	adds	r3, r7, r3
   2f8e6:	781b      	ldrb	r3, [r3, #0]
   2f8e8:	2b01      	cmp	r3, #1
   2f8ea:	d006      	beq.n	2f8fa <chk_mounted+0x23e>
   2f8ec:	231f      	movs	r3, #31
   2f8ee:	18fb      	adds	r3, r7, r3
   2f8f0:	781b      	ldrb	r3, [r3, #0]
   2f8f2:	2b02      	cmp	r3, #2
   2f8f4:	d001      	beq.n	2f8fa <chk_mounted+0x23e>
   2f8f6:	230d      	movs	r3, #13
   2f8f8:	e1b4      	b.n	2fc64 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2f8fa:	231f      	movs	r3, #31
   2f8fc:	18fb      	adds	r3, r7, r3
   2f8fe:	781a      	ldrb	r2, [r3, #0]
   2f900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f902:	4353      	muls	r3, r2
   2f904:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2f906:	231f      	movs	r3, #31
   2f908:	18fb      	adds	r3, r7, r3
   2f90a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f90c:	213d      	movs	r1, #61	; 0x3d
   2f90e:	5c52      	ldrb	r2, [r2, r1]
   2f910:	701a      	strb	r2, [r3, #0]
   2f912:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f914:	221f      	movs	r2, #31
   2f916:	18ba      	adds	r2, r7, r2
   2f918:	7812      	ldrb	r2, [r2, #0]
   2f91a:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2f91c:	231f      	movs	r3, #31
   2f91e:	18fb      	adds	r3, r7, r3
   2f920:	781b      	ldrb	r3, [r3, #0]
   2f922:	2b00      	cmp	r3, #0
   2f924:	d008      	beq.n	2f938 <chk_mounted+0x27c>
   2f926:	231f      	movs	r3, #31
   2f928:	18fb      	adds	r3, r7, r3
   2f92a:	781b      	ldrb	r3, [r3, #0]
   2f92c:	221f      	movs	r2, #31
   2f92e:	18ba      	adds	r2, r7, r2
   2f930:	7812      	ldrb	r2, [r2, #0]
   2f932:	3a01      	subs	r2, #1
   2f934:	4013      	ands	r3, r2
   2f936:	d001      	beq.n	2f93c <chk_mounted+0x280>
   2f938:	230d      	movs	r3, #13
   2f93a:	e193      	b.n	2fc64 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2f93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f93e:	2242      	movs	r2, #66	; 0x42
   2f940:	5c9b      	ldrb	r3, [r3, r2]
   2f942:	021b      	lsls	r3, r3, #8
   2f944:	b21a      	sxth	r2, r3
   2f946:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f948:	2141      	movs	r1, #65	; 0x41
   2f94a:	5c5b      	ldrb	r3, [r3, r1]
   2f94c:	b21b      	sxth	r3, r3
   2f94e:	4313      	orrs	r3, r2
   2f950:	b21b      	sxth	r3, r3
   2f952:	b29a      	uxth	r2, r3
   2f954:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f956:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2f958:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f95a:	891b      	ldrh	r3, [r3, #8]
   2f95c:	220f      	movs	r2, #15
   2f95e:	4013      	ands	r3, r2
   2f960:	b29b      	uxth	r3, r3
   2f962:	2b00      	cmp	r3, #0
   2f964:	d001      	beq.n	2f96a <chk_mounted+0x2ae>
   2f966:	230d      	movs	r3, #13
   2f968:	e17c      	b.n	2fc64 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2f96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f96c:	2244      	movs	r2, #68	; 0x44
   2f96e:	5c9b      	ldrb	r3, [r3, r2]
   2f970:	021b      	lsls	r3, r3, #8
   2f972:	b21a      	sxth	r2, r3
   2f974:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f976:	2143      	movs	r1, #67	; 0x43
   2f978:	5c5b      	ldrb	r3, [r3, r1]
   2f97a:	b21b      	sxth	r3, r3
   2f97c:	4313      	orrs	r3, r2
   2f97e:	b21b      	sxth	r3, r3
   2f980:	b29b      	uxth	r3, r3
   2f982:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2f984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f986:	2b00      	cmp	r3, #0
   2f988:	d112      	bne.n	2f9b0 <chk_mounted+0x2f4>
   2f98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f98c:	2253      	movs	r2, #83	; 0x53
   2f98e:	5c9b      	ldrb	r3, [r3, r2]
   2f990:	061a      	lsls	r2, r3, #24
   2f992:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f994:	2152      	movs	r1, #82	; 0x52
   2f996:	5c5b      	ldrb	r3, [r3, r1]
   2f998:	041b      	lsls	r3, r3, #16
   2f99a:	4313      	orrs	r3, r2
   2f99c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f99e:	2151      	movs	r1, #81	; 0x51
   2f9a0:	5c52      	ldrb	r2, [r2, r1]
   2f9a2:	0212      	lsls	r2, r2, #8
   2f9a4:	4313      	orrs	r3, r2
   2f9a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f9a8:	2150      	movs	r1, #80	; 0x50
   2f9aa:	5c52      	ldrb	r2, [r2, r1]
   2f9ac:	4313      	orrs	r3, r2
   2f9ae:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2f9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f9b2:	223f      	movs	r2, #63	; 0x3f
   2f9b4:	5c9b      	ldrb	r3, [r3, r2]
   2f9b6:	021b      	lsls	r3, r3, #8
   2f9b8:	b21a      	sxth	r2, r3
   2f9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f9bc:	213e      	movs	r1, #62	; 0x3e
   2f9be:	5c5b      	ldrb	r3, [r3, r1]
   2f9c0:	b21b      	sxth	r3, r3
   2f9c2:	4313      	orrs	r3, r2
   2f9c4:	b21a      	sxth	r2, r3
   2f9c6:	231c      	movs	r3, #28
   2f9c8:	18fb      	adds	r3, r7, r3
   2f9ca:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2f9cc:	231c      	movs	r3, #28
   2f9ce:	18fb      	adds	r3, r7, r3
   2f9d0:	881b      	ldrh	r3, [r3, #0]
   2f9d2:	2b00      	cmp	r3, #0
   2f9d4:	d101      	bne.n	2f9da <chk_mounted+0x31e>
   2f9d6:	230d      	movs	r3, #13
   2f9d8:	e144      	b.n	2fc64 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2f9da:	231c      	movs	r3, #28
   2f9dc:	18fb      	adds	r3, r7, r3
   2f9de:	881a      	ldrh	r2, [r3, #0]
   2f9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f9e2:	18d3      	adds	r3, r2, r3
   2f9e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f9e6:	8912      	ldrh	r2, [r2, #8]
   2f9e8:	0912      	lsrs	r2, r2, #4
   2f9ea:	b292      	uxth	r2, r2
   2f9ec:	189b      	adds	r3, r3, r2
   2f9ee:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2f9f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2f9f2:	69bb      	ldr	r3, [r7, #24]
   2f9f4:	429a      	cmp	r2, r3
   2f9f6:	d201      	bcs.n	2f9fc <chk_mounted+0x340>
   2f9f8:	230d      	movs	r3, #13
   2f9fa:	e133      	b.n	2fc64 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2f9fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2f9fe:	69bb      	ldr	r3, [r7, #24]
   2fa00:	1ad2      	subs	r2, r2, r3
   2fa02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fa04:	789b      	ldrb	r3, [r3, #2]
   2fa06:	0019      	movs	r1, r3
   2fa08:	4b08      	ldr	r3, [pc, #32]	; (2fa2c <chk_mounted+0x370>)
   2fa0a:	0010      	movs	r0, r2
   2fa0c:	4798      	blx	r3
   2fa0e:	0003      	movs	r3, r0
   2fa10:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2fa12:	697b      	ldr	r3, [r7, #20]
   2fa14:	2b00      	cmp	r3, #0
   2fa16:	d10b      	bne.n	2fa30 <chk_mounted+0x374>
   2fa18:	230d      	movs	r3, #13
   2fa1a:	e123      	b.n	2fc64 <chk_mounted+0x5a8>
   2fa1c:	2000416c 	.word	0x2000416c
   2fa20:	0002d819 	.word	0x0002d819
   2fa24:	0002d795 	.word	0x0002d795
   2fa28:	0002f5e9 	.word	0x0002f5e9
   2fa2c:	00034e15 	.word	0x00034e15
	fmt = FS_FAT12;
   2fa30:	2347      	movs	r3, #71	; 0x47
   2fa32:	18fb      	adds	r3, r7, r3
   2fa34:	2201      	movs	r2, #1
   2fa36:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2fa38:	697b      	ldr	r3, [r7, #20]
   2fa3a:	4a8c      	ldr	r2, [pc, #560]	; (2fc6c <chk_mounted+0x5b0>)
   2fa3c:	4293      	cmp	r3, r2
   2fa3e:	d903      	bls.n	2fa48 <chk_mounted+0x38c>
   2fa40:	2347      	movs	r3, #71	; 0x47
   2fa42:	18fb      	adds	r3, r7, r3
   2fa44:	2202      	movs	r2, #2
   2fa46:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2fa48:	697b      	ldr	r3, [r7, #20]
   2fa4a:	4a89      	ldr	r2, [pc, #548]	; (2fc70 <chk_mounted+0x5b4>)
   2fa4c:	4293      	cmp	r3, r2
   2fa4e:	d903      	bls.n	2fa58 <chk_mounted+0x39c>
   2fa50:	2347      	movs	r3, #71	; 0x47
   2fa52:	18fb      	adds	r3, r7, r3
   2fa54:	2203      	movs	r2, #3
   2fa56:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2fa58:	697b      	ldr	r3, [r7, #20]
   2fa5a:	1c9a      	adds	r2, r3, #2
   2fa5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fa5e:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2fa60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2fa62:	69bb      	ldr	r3, [r7, #24]
   2fa64:	18d2      	adds	r2, r2, r3
   2fa66:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fa68:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2fa6a:	231c      	movs	r3, #28
   2fa6c:	18fb      	adds	r3, r7, r3
   2fa6e:	881a      	ldrh	r2, [r3, #0]
   2fa70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2fa72:	18d2      	adds	r2, r2, r3
   2fa74:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fa76:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2fa78:	2347      	movs	r3, #71	; 0x47
   2fa7a:	18fb      	adds	r3, r7, r3
   2fa7c:	781b      	ldrb	r3, [r3, #0]
   2fa7e:	2b03      	cmp	r3, #3
   2fa80:	d11e      	bne.n	2fac0 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2fa82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fa84:	891b      	ldrh	r3, [r3, #8]
   2fa86:	2b00      	cmp	r3, #0
   2fa88:	d001      	beq.n	2fa8e <chk_mounted+0x3d2>
   2fa8a:	230d      	movs	r3, #13
   2fa8c:	e0ea      	b.n	2fc64 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2fa8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fa90:	225f      	movs	r2, #95	; 0x5f
   2fa92:	5c9b      	ldrb	r3, [r3, r2]
   2fa94:	061a      	lsls	r2, r3, #24
   2fa96:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fa98:	215e      	movs	r1, #94	; 0x5e
   2fa9a:	5c5b      	ldrb	r3, [r3, r1]
   2fa9c:	041b      	lsls	r3, r3, #16
   2fa9e:	4313      	orrs	r3, r2
   2faa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2faa2:	215d      	movs	r1, #93	; 0x5d
   2faa4:	5c52      	ldrb	r2, [r2, r1]
   2faa6:	0212      	lsls	r2, r2, #8
   2faa8:	4313      	orrs	r3, r2
   2faaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2faac:	215c      	movs	r1, #92	; 0x5c
   2faae:	5c52      	ldrb	r2, [r2, r1]
   2fab0:	431a      	orrs	r2, r3
   2fab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fab4:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2fab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fab8:	699b      	ldr	r3, [r3, #24]
   2faba:	009b      	lsls	r3, r3, #2
   2fabc:	633b      	str	r3, [r7, #48]	; 0x30
   2fabe:	e020      	b.n	2fb02 <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2fac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fac2:	891b      	ldrh	r3, [r3, #8]
   2fac4:	2b00      	cmp	r3, #0
   2fac6:	d101      	bne.n	2facc <chk_mounted+0x410>
   2fac8:	230d      	movs	r3, #13
   2faca:	e0cb      	b.n	2fc64 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2facc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2face:	6a1a      	ldr	r2, [r3, #32]
   2fad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2fad2:	18d2      	adds	r2, r2, r3
   2fad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fad6:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2fad8:	2347      	movs	r3, #71	; 0x47
   2fada:	18fb      	adds	r3, r7, r3
   2fadc:	781b      	ldrb	r3, [r3, #0]
   2fade:	2b02      	cmp	r3, #2
   2fae0:	d103      	bne.n	2faea <chk_mounted+0x42e>
   2fae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fae4:	699b      	ldr	r3, [r3, #24]
   2fae6:	005b      	lsls	r3, r3, #1
   2fae8:	e00a      	b.n	2fb00 <chk_mounted+0x444>
   2faea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2faec:	699a      	ldr	r2, [r3, #24]
   2faee:	0013      	movs	r3, r2
   2faf0:	005b      	lsls	r3, r3, #1
   2faf2:	189b      	adds	r3, r3, r2
   2faf4:	085a      	lsrs	r2, r3, #1
   2faf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2faf8:	699b      	ldr	r3, [r3, #24]
   2fafa:	2101      	movs	r1, #1
   2fafc:	400b      	ands	r3, r1
   2fafe:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2fb00:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2fb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb04:	69da      	ldr	r2, [r3, #28]
   2fb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2fb08:	495a      	ldr	r1, [pc, #360]	; (2fc74 <chk_mounted+0x5b8>)
   2fb0a:	468c      	mov	ip, r1
   2fb0c:	4463      	add	r3, ip
   2fb0e:	0a5b      	lsrs	r3, r3, #9
   2fb10:	429a      	cmp	r2, r3
   2fb12:	d201      	bcs.n	2fb18 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2fb14:	230d      	movs	r3, #13
   2fb16:	e0a5      	b.n	2fc64 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2fb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb1a:	2201      	movs	r2, #1
   2fb1c:	4252      	negs	r2, r2
   2fb1e:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2fb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb22:	2200      	movs	r2, #0
   2fb24:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2fb26:	2347      	movs	r3, #71	; 0x47
   2fb28:	18fb      	adds	r3, r7, r3
   2fb2a:	781b      	ldrb	r3, [r3, #0]
   2fb2c:	2b03      	cmp	r3, #3
   2fb2e:	d000      	beq.n	2fb32 <chk_mounted+0x476>
   2fb30:	e082      	b.n	2fc38 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2fb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb34:	2200      	movs	r2, #0
   2fb36:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2fb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb3a:	2261      	movs	r2, #97	; 0x61
   2fb3c:	5c9b      	ldrb	r3, [r3, r2]
   2fb3e:	021b      	lsls	r3, r3, #8
   2fb40:	b21a      	sxth	r2, r3
   2fb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb44:	2160      	movs	r1, #96	; 0x60
   2fb46:	5c5b      	ldrb	r3, [r3, r1]
   2fb48:	b21b      	sxth	r3, r3
   2fb4a:	4313      	orrs	r3, r2
   2fb4c:	b21b      	sxth	r3, r3
   2fb4e:	b29b      	uxth	r3, r3
   2fb50:	001a      	movs	r2, r3
   2fb52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2fb54:	18d2      	adds	r2, r2, r3
   2fb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb58:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2fb5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb5c:	7858      	ldrb	r0, [r3, #1]
   2fb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb60:	3330      	adds	r3, #48	; 0x30
   2fb62:	0019      	movs	r1, r3
   2fb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb66:	695a      	ldr	r2, [r3, #20]
   2fb68:	2301      	movs	r3, #1
   2fb6a:	4c43      	ldr	r4, [pc, #268]	; (2fc78 <chk_mounted+0x5bc>)
   2fb6c:	47a0      	blx	r4
   2fb6e:	1e03      	subs	r3, r0, #0
   2fb70:	d162      	bne.n	2fc38 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2fb72:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb74:	4a41      	ldr	r2, [pc, #260]	; (2fc7c <chk_mounted+0x5c0>)
   2fb76:	5c9b      	ldrb	r3, [r3, r2]
   2fb78:	021b      	lsls	r3, r3, #8
   2fb7a:	b21a      	sxth	r2, r3
   2fb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb7e:	4940      	ldr	r1, [pc, #256]	; (2fc80 <chk_mounted+0x5c4>)
   2fb80:	5c5b      	ldrb	r3, [r3, r1]
   2fb82:	b21b      	sxth	r3, r3
   2fb84:	4313      	orrs	r3, r2
   2fb86:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2fb88:	4a3e      	ldr	r2, [pc, #248]	; (2fc84 <chk_mounted+0x5c8>)
   2fb8a:	4293      	cmp	r3, r2
   2fb8c:	d154      	bne.n	2fc38 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2fb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb90:	2233      	movs	r2, #51	; 0x33
   2fb92:	5c9b      	ldrb	r3, [r3, r2]
   2fb94:	061a      	lsls	r2, r3, #24
   2fb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fb98:	2132      	movs	r1, #50	; 0x32
   2fb9a:	5c5b      	ldrb	r3, [r3, r1]
   2fb9c:	041b      	lsls	r3, r3, #16
   2fb9e:	4313      	orrs	r3, r2
   2fba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2fba2:	2131      	movs	r1, #49	; 0x31
   2fba4:	5c52      	ldrb	r2, [r2, r1]
   2fba6:	0212      	lsls	r2, r2, #8
   2fba8:	4313      	orrs	r3, r2
   2fbaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2fbac:	2130      	movs	r1, #48	; 0x30
   2fbae:	5c52      	ldrb	r2, [r2, r1]
   2fbb0:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2fbb2:	4a35      	ldr	r2, [pc, #212]	; (2fc88 <chk_mounted+0x5cc>)
   2fbb4:	4293      	cmp	r3, r2
   2fbb6:	d13f      	bne.n	2fc38 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2fbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fbba:	4a34      	ldr	r2, [pc, #208]	; (2fc8c <chk_mounted+0x5d0>)
   2fbbc:	5c9b      	ldrb	r3, [r3, r2]
   2fbbe:	061a      	lsls	r2, r3, #24
   2fbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fbc2:	4933      	ldr	r1, [pc, #204]	; (2fc90 <chk_mounted+0x5d4>)
   2fbc4:	5c5b      	ldrb	r3, [r3, r1]
   2fbc6:	041b      	lsls	r3, r3, #16
   2fbc8:	4313      	orrs	r3, r2
   2fbca:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2fbcc:	4931      	ldr	r1, [pc, #196]	; (2fc94 <chk_mounted+0x5d8>)
   2fbce:	5c52      	ldrb	r2, [r2, r1]
   2fbd0:	0212      	lsls	r2, r2, #8
   2fbd2:	4313      	orrs	r3, r2
   2fbd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2fbd6:	2285      	movs	r2, #133	; 0x85
   2fbd8:	0092      	lsls	r2, r2, #2
   2fbda:	5c8a      	ldrb	r2, [r1, r2]
   2fbdc:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2fbde:	4a2e      	ldr	r2, [pc, #184]	; (2fc98 <chk_mounted+0x5dc>)
   2fbe0:	4293      	cmp	r3, r2
   2fbe2:	d129      	bne.n	2fc38 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2fbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fbe6:	4a2d      	ldr	r2, [pc, #180]	; (2fc9c <chk_mounted+0x5e0>)
   2fbe8:	5c9b      	ldrb	r3, [r3, r2]
   2fbea:	061a      	lsls	r2, r3, #24
   2fbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fbee:	492c      	ldr	r1, [pc, #176]	; (2fca0 <chk_mounted+0x5e4>)
   2fbf0:	5c5b      	ldrb	r3, [r3, r1]
   2fbf2:	041b      	lsls	r3, r3, #16
   2fbf4:	4313      	orrs	r3, r2
   2fbf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2fbf8:	492a      	ldr	r1, [pc, #168]	; (2fca4 <chk_mounted+0x5e8>)
   2fbfa:	5c52      	ldrb	r2, [r2, r1]
   2fbfc:	0212      	lsls	r2, r2, #8
   2fbfe:	4313      	orrs	r3, r2
   2fc00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2fc02:	2287      	movs	r2, #135	; 0x87
   2fc04:	0092      	lsls	r2, r2, #2
   2fc06:	5c8a      	ldrb	r2, [r1, r2]
   2fc08:	431a      	orrs	r2, r3
   2fc0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fc0c:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2fc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fc10:	4a25      	ldr	r2, [pc, #148]	; (2fca8 <chk_mounted+0x5ec>)
   2fc12:	5c9b      	ldrb	r3, [r3, r2]
   2fc14:	061a      	lsls	r2, r3, #24
   2fc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fc18:	4924      	ldr	r1, [pc, #144]	; (2fcac <chk_mounted+0x5f0>)
   2fc1a:	5c5b      	ldrb	r3, [r3, r1]
   2fc1c:	041b      	lsls	r3, r3, #16
   2fc1e:	4313      	orrs	r3, r2
   2fc20:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2fc22:	4923      	ldr	r1, [pc, #140]	; (2fcb0 <chk_mounted+0x5f4>)
   2fc24:	5c52      	ldrb	r2, [r2, r1]
   2fc26:	0212      	lsls	r2, r2, #8
   2fc28:	4313      	orrs	r3, r2
   2fc2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2fc2c:	2286      	movs	r2, #134	; 0x86
   2fc2e:	0092      	lsls	r2, r2, #2
   2fc30:	5c8a      	ldrb	r2, [r1, r2]
   2fc32:	431a      	orrs	r2, r3
   2fc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fc36:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2fc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fc3a:	2247      	movs	r2, #71	; 0x47
   2fc3c:	18ba      	adds	r2, r7, r2
   2fc3e:	7812      	ldrb	r2, [r2, #0]
   2fc40:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2fc42:	4b1c      	ldr	r3, [pc, #112]	; (2fcb4 <chk_mounted+0x5f8>)
   2fc44:	881b      	ldrh	r3, [r3, #0]
   2fc46:	3301      	adds	r3, #1
   2fc48:	b29a      	uxth	r2, r3
   2fc4a:	4b1a      	ldr	r3, [pc, #104]	; (2fcb4 <chk_mounted+0x5f8>)
   2fc4c:	801a      	strh	r2, [r3, #0]
   2fc4e:	4b19      	ldr	r3, [pc, #100]	; (2fcb4 <chk_mounted+0x5f8>)
   2fc50:	881a      	ldrh	r2, [r3, #0]
   2fc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fc54:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2fc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fc58:	2200      	movs	r2, #0
   2fc5a:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2fc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fc5e:	2200      	movs	r2, #0
   2fc60:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2fc62:	2300      	movs	r3, #0
}
   2fc64:	0018      	movs	r0, r3
   2fc66:	46bd      	mov	sp, r7
   2fc68:	b013      	add	sp, #76	; 0x4c
   2fc6a:	bd90      	pop	{r4, r7, pc}
   2fc6c:	00000ff5 	.word	0x00000ff5
   2fc70:	0000fff5 	.word	0x0000fff5
   2fc74:	000001ff 	.word	0x000001ff
   2fc78:	0002d851 	.word	0x0002d851
   2fc7c:	0000022f 	.word	0x0000022f
   2fc80:	0000022e 	.word	0x0000022e
   2fc84:	ffffaa55 	.word	0xffffaa55
   2fc88:	41615252 	.word	0x41615252
   2fc8c:	00000217 	.word	0x00000217
   2fc90:	00000216 	.word	0x00000216
   2fc94:	00000215 	.word	0x00000215
   2fc98:	61417272 	.word	0x61417272
   2fc9c:	0000021f 	.word	0x0000021f
   2fca0:	0000021e 	.word	0x0000021e
   2fca4:	0000021d 	.word	0x0000021d
   2fca8:	0000021b 	.word	0x0000021b
   2fcac:	0000021a 	.word	0x0000021a
   2fcb0:	00000219 	.word	0x00000219
   2fcb4:	2000418c 	.word	0x2000418c

0002fcb8 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2fcb8:	b580      	push	{r7, lr}
   2fcba:	b082      	sub	sp, #8
   2fcbc:	af00      	add	r7, sp, #0
   2fcbe:	6078      	str	r0, [r7, #4]
   2fcc0:	000a      	movs	r2, r1
   2fcc2:	1cbb      	adds	r3, r7, #2
   2fcc4:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2fcc6:	687b      	ldr	r3, [r7, #4]
   2fcc8:	2b00      	cmp	r3, #0
   2fcca:	d009      	beq.n	2fce0 <validate+0x28>
   2fccc:	687b      	ldr	r3, [r7, #4]
   2fcce:	781b      	ldrb	r3, [r3, #0]
   2fcd0:	2b00      	cmp	r3, #0
   2fcd2:	d005      	beq.n	2fce0 <validate+0x28>
   2fcd4:	687b      	ldr	r3, [r7, #4]
   2fcd6:	88db      	ldrh	r3, [r3, #6]
   2fcd8:	1cba      	adds	r2, r7, #2
   2fcda:	8812      	ldrh	r2, [r2, #0]
   2fcdc:	429a      	cmp	r2, r3
   2fcde:	d001      	beq.n	2fce4 <validate+0x2c>
		return FR_INVALID_OBJECT;
   2fce0:	2309      	movs	r3, #9
   2fce2:	e00c      	b.n	2fcfe <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2fce4:	687b      	ldr	r3, [r7, #4]
   2fce6:	785b      	ldrb	r3, [r3, #1]
   2fce8:	0018      	movs	r0, r3
   2fcea:	4b07      	ldr	r3, [pc, #28]	; (2fd08 <validate+0x50>)
   2fcec:	4798      	blx	r3
   2fcee:	0003      	movs	r3, r0
   2fcf0:	001a      	movs	r2, r3
   2fcf2:	2301      	movs	r3, #1
   2fcf4:	4013      	ands	r3, r2
   2fcf6:	d001      	beq.n	2fcfc <validate+0x44>
		return FR_NOT_READY;
   2fcf8:	2303      	movs	r3, #3
   2fcfa:	e000      	b.n	2fcfe <validate+0x46>

	return FR_OK;
   2fcfc:	2300      	movs	r3, #0
}
   2fcfe:	0018      	movs	r0, r3
   2fd00:	46bd      	mov	sp, r7
   2fd02:	b002      	add	sp, #8
   2fd04:	bd80      	pop	{r7, pc}
   2fd06:	46c0      	nop			; (mov r8, r8)
   2fd08:	0002d819 	.word	0x0002d819

0002fd0c <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2fd0c:	b580      	push	{r7, lr}
   2fd0e:	b084      	sub	sp, #16
   2fd10:	af00      	add	r7, sp, #0
   2fd12:	0002      	movs	r2, r0
   2fd14:	6039      	str	r1, [r7, #0]
   2fd16:	1dfb      	adds	r3, r7, #7
   2fd18:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2fd1a:	1dfb      	adds	r3, r7, #7
   2fd1c:	781b      	ldrb	r3, [r3, #0]
   2fd1e:	2b07      	cmp	r3, #7
   2fd20:	d901      	bls.n	2fd26 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2fd22:	230b      	movs	r3, #11
   2fd24:	e018      	b.n	2fd58 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2fd26:	1dfb      	adds	r3, r7, #7
   2fd28:	781a      	ldrb	r2, [r3, #0]
   2fd2a:	4b0d      	ldr	r3, [pc, #52]	; (2fd60 <f_mount+0x54>)
   2fd2c:	0092      	lsls	r2, r2, #2
   2fd2e:	58d3      	ldr	r3, [r2, r3]
   2fd30:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2fd32:	68fb      	ldr	r3, [r7, #12]
   2fd34:	2b00      	cmp	r3, #0
   2fd36:	d002      	beq.n	2fd3e <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2fd38:	68fb      	ldr	r3, [r7, #12]
   2fd3a:	2200      	movs	r2, #0
   2fd3c:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2fd3e:	683b      	ldr	r3, [r7, #0]
   2fd40:	2b00      	cmp	r3, #0
   2fd42:	d002      	beq.n	2fd4a <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2fd44:	683b      	ldr	r3, [r7, #0]
   2fd46:	2200      	movs	r2, #0
   2fd48:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2fd4a:	1dfb      	adds	r3, r7, #7
   2fd4c:	781a      	ldrb	r2, [r3, #0]
   2fd4e:	4b04      	ldr	r3, [pc, #16]	; (2fd60 <f_mount+0x54>)
   2fd50:	0092      	lsls	r2, r2, #2
   2fd52:	6839      	ldr	r1, [r7, #0]
   2fd54:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2fd56:	2300      	movs	r3, #0
}
   2fd58:	0018      	movs	r0, r3
   2fd5a:	46bd      	mov	sp, r7
   2fd5c:	b004      	add	sp, #16
   2fd5e:	bd80      	pop	{r7, pc}
   2fd60:	2000416c 	.word	0x2000416c

0002fd64 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2fd64:	b590      	push	{r4, r7, lr}
   2fd66:	4ce5      	ldr	r4, [pc, #916]	; (300fc <f_open+0x398>)
   2fd68:	44a5      	add	sp, r4
   2fd6a:	af00      	add	r7, sp, #0
   2fd6c:	60f8      	str	r0, [r7, #12]
   2fd6e:	60b9      	str	r1, [r7, #8]
   2fd70:	4be3      	ldr	r3, [pc, #908]	; (30100 <f_open+0x39c>)
   2fd72:	2194      	movs	r1, #148	; 0x94
   2fd74:	0089      	lsls	r1, r1, #2
   2fd76:	468c      	mov	ip, r1
   2fd78:	44bc      	add	ip, r7
   2fd7a:	4463      	add	r3, ip
   2fd7c:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2fd7e:	68fb      	ldr	r3, [r7, #12]
   2fd80:	2200      	movs	r2, #0
   2fd82:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2fd84:	4bde      	ldr	r3, [pc, #888]	; (30100 <f_open+0x39c>)
   2fd86:	2294      	movs	r2, #148	; 0x94
   2fd88:	0092      	lsls	r2, r2, #2
   2fd8a:	4694      	mov	ip, r2
   2fd8c:	44bc      	add	ip, r7
   2fd8e:	4463      	add	r3, ip
   2fd90:	4adb      	ldr	r2, [pc, #876]	; (30100 <f_open+0x39c>)
   2fd92:	2194      	movs	r1, #148	; 0x94
   2fd94:	0089      	lsls	r1, r1, #2
   2fd96:	468c      	mov	ip, r1
   2fd98:	44bc      	add	ip, r7
   2fd9a:	4462      	add	r2, ip
   2fd9c:	7812      	ldrb	r2, [r2, #0]
   2fd9e:	211f      	movs	r1, #31
   2fda0:	400a      	ands	r2, r1
   2fda2:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2fda4:	4bd6      	ldr	r3, [pc, #856]	; (30100 <f_open+0x39c>)
   2fda6:	2294      	movs	r2, #148	; 0x94
   2fda8:	0092      	lsls	r2, r2, #2
   2fdaa:	4694      	mov	ip, r2
   2fdac:	44bc      	add	ip, r7
   2fdae:	4463      	add	r3, ip
   2fdb0:	781b      	ldrb	r3, [r3, #0]
   2fdb2:	2201      	movs	r2, #1
   2fdb4:	4393      	bics	r3, r2
   2fdb6:	b2da      	uxtb	r2, r3
   2fdb8:	4bd2      	ldr	r3, [pc, #840]	; (30104 <f_open+0x3a0>)
   2fdba:	18fc      	adds	r4, r7, r3
   2fdbc:	2387      	movs	r3, #135	; 0x87
   2fdbe:	009b      	lsls	r3, r3, #2
   2fdc0:	18f9      	adds	r1, r7, r3
   2fdc2:	2308      	movs	r3, #8
   2fdc4:	18fb      	adds	r3, r7, r3
   2fdc6:	0018      	movs	r0, r3
   2fdc8:	4bcf      	ldr	r3, [pc, #828]	; (30108 <f_open+0x3a4>)
   2fdca:	4798      	blx	r3
   2fdcc:	0003      	movs	r3, r0
   2fdce:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2fdd0:	2387      	movs	r3, #135	; 0x87
   2fdd2:	009b      	lsls	r3, r3, #2
   2fdd4:	18fb      	adds	r3, r7, r3
   2fdd6:	2284      	movs	r2, #132	; 0x84
   2fdd8:	0092      	lsls	r2, r2, #2
   2fdda:	18ba      	adds	r2, r7, r2
   2fddc:	619a      	str	r2, [r3, #24]
   2fdde:	2387      	movs	r3, #135	; 0x87
   2fde0:	009b      	lsls	r3, r3, #2
   2fde2:	18fb      	adds	r3, r7, r3
   2fde4:	2210      	movs	r2, #16
   2fde6:	18ba      	adds	r2, r7, r2
   2fde8:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2fdea:	4bc6      	ldr	r3, [pc, #792]	; (30104 <f_open+0x3a0>)
   2fdec:	18fb      	adds	r3, r7, r3
   2fdee:	781b      	ldrb	r3, [r3, #0]
   2fdf0:	2b00      	cmp	r3, #0
   2fdf2:	d10b      	bne.n	2fe0c <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2fdf4:	68ba      	ldr	r2, [r7, #8]
   2fdf6:	4bc3      	ldr	r3, [pc, #780]	; (30104 <f_open+0x3a0>)
   2fdf8:	18fc      	adds	r4, r7, r3
   2fdfa:	2387      	movs	r3, #135	; 0x87
   2fdfc:	009b      	lsls	r3, r3, #2
   2fdfe:	18fb      	adds	r3, r7, r3
   2fe00:	0011      	movs	r1, r2
   2fe02:	0018      	movs	r0, r3
   2fe04:	4bc1      	ldr	r3, [pc, #772]	; (3010c <f_open+0x3a8>)
   2fe06:	4798      	blx	r3
   2fe08:	0003      	movs	r3, r0
   2fe0a:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2fe0c:	2387      	movs	r3, #135	; 0x87
   2fe0e:	009b      	lsls	r3, r3, #2
   2fe10:	18fb      	adds	r3, r7, r3
   2fe12:	695b      	ldr	r3, [r3, #20]
   2fe14:	2292      	movs	r2, #146	; 0x92
   2fe16:	0092      	lsls	r2, r2, #2
   2fe18:	18ba      	adds	r2, r7, r2
   2fe1a:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2fe1c:	4bb9      	ldr	r3, [pc, #740]	; (30104 <f_open+0x3a0>)
   2fe1e:	18fb      	adds	r3, r7, r3
   2fe20:	781b      	ldrb	r3, [r3, #0]
   2fe22:	2b00      	cmp	r3, #0
   2fe24:	d109      	bne.n	2fe3a <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2fe26:	2392      	movs	r3, #146	; 0x92
   2fe28:	009b      	lsls	r3, r3, #2
   2fe2a:	18fb      	adds	r3, r7, r3
   2fe2c:	681b      	ldr	r3, [r3, #0]
   2fe2e:	2b00      	cmp	r3, #0
   2fe30:	d103      	bne.n	2fe3a <f_open+0xd6>
			res = FR_INVALID_NAME;
   2fe32:	4bb4      	ldr	r3, [pc, #720]	; (30104 <f_open+0x3a0>)
   2fe34:	18fb      	adds	r3, r7, r3
   2fe36:	2206      	movs	r2, #6
   2fe38:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2fe3a:	4bb1      	ldr	r3, [pc, #708]	; (30100 <f_open+0x39c>)
   2fe3c:	2294      	movs	r2, #148	; 0x94
   2fe3e:	0092      	lsls	r2, r2, #2
   2fe40:	4694      	mov	ip, r2
   2fe42:	44bc      	add	ip, r7
   2fe44:	4463      	add	r3, ip
   2fe46:	781b      	ldrb	r3, [r3, #0]
   2fe48:	221c      	movs	r2, #28
   2fe4a:	4013      	ands	r3, r2
   2fe4c:	d100      	bne.n	2fe50 <f_open+0xec>
   2fe4e:	e141      	b.n	300d4 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2fe50:	4bac      	ldr	r3, [pc, #688]	; (30104 <f_open+0x3a0>)
   2fe52:	18fb      	adds	r3, r7, r3
   2fe54:	781b      	ldrb	r3, [r3, #0]
   2fe56:	2b00      	cmp	r3, #0
   2fe58:	d027      	beq.n	2feaa <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2fe5a:	4baa      	ldr	r3, [pc, #680]	; (30104 <f_open+0x3a0>)
   2fe5c:	18fb      	adds	r3, r7, r3
   2fe5e:	781b      	ldrb	r3, [r3, #0]
   2fe60:	2b04      	cmp	r3, #4
   2fe62:	d109      	bne.n	2fe78 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2fe64:	4ba7      	ldr	r3, [pc, #668]	; (30104 <f_open+0x3a0>)
   2fe66:	18fc      	adds	r4, r7, r3
   2fe68:	2387      	movs	r3, #135	; 0x87
   2fe6a:	009b      	lsls	r3, r3, #2
   2fe6c:	18fb      	adds	r3, r7, r3
   2fe6e:	0018      	movs	r0, r3
   2fe70:	4ba7      	ldr	r3, [pc, #668]	; (30110 <f_open+0x3ac>)
   2fe72:	4798      	blx	r3
   2fe74:	0003      	movs	r3, r0
   2fe76:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2fe78:	4ba1      	ldr	r3, [pc, #644]	; (30100 <f_open+0x39c>)
   2fe7a:	2294      	movs	r2, #148	; 0x94
   2fe7c:	0092      	lsls	r2, r2, #2
   2fe7e:	4694      	mov	ip, r2
   2fe80:	44bc      	add	ip, r7
   2fe82:	4463      	add	r3, ip
   2fe84:	4a9e      	ldr	r2, [pc, #632]	; (30100 <f_open+0x39c>)
   2fe86:	2194      	movs	r1, #148	; 0x94
   2fe88:	0089      	lsls	r1, r1, #2
   2fe8a:	468c      	mov	ip, r1
   2fe8c:	44bc      	add	ip, r7
   2fe8e:	4462      	add	r2, ip
   2fe90:	7812      	ldrb	r2, [r2, #0]
   2fe92:	2108      	movs	r1, #8
   2fe94:	430a      	orrs	r2, r1
   2fe96:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2fe98:	2387      	movs	r3, #135	; 0x87
   2fe9a:	009b      	lsls	r3, r3, #2
   2fe9c:	18fb      	adds	r3, r7, r3
   2fe9e:	695b      	ldr	r3, [r3, #20]
   2fea0:	2292      	movs	r2, #146	; 0x92
   2fea2:	0092      	lsls	r2, r2, #2
   2fea4:	18ba      	adds	r2, r7, r2
   2fea6:	6013      	str	r3, [r2, #0]
   2fea8:	e01c      	b.n	2fee4 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2feaa:	2392      	movs	r3, #146	; 0x92
   2feac:	009b      	lsls	r3, r3, #2
   2feae:	18fb      	adds	r3, r7, r3
   2feb0:	681b      	ldr	r3, [r3, #0]
   2feb2:	330b      	adds	r3, #11
   2feb4:	781b      	ldrb	r3, [r3, #0]
   2feb6:	001a      	movs	r2, r3
   2feb8:	2311      	movs	r3, #17
   2feba:	4013      	ands	r3, r2
   2febc:	d004      	beq.n	2fec8 <f_open+0x164>
				res = FR_DENIED;
   2febe:	4b91      	ldr	r3, [pc, #580]	; (30104 <f_open+0x3a0>)
   2fec0:	18fb      	adds	r3, r7, r3
   2fec2:	2207      	movs	r2, #7
   2fec4:	701a      	strb	r2, [r3, #0]
   2fec6:	e00d      	b.n	2fee4 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2fec8:	4b8d      	ldr	r3, [pc, #564]	; (30100 <f_open+0x39c>)
   2feca:	2294      	movs	r2, #148	; 0x94
   2fecc:	0092      	lsls	r2, r2, #2
   2fece:	4694      	mov	ip, r2
   2fed0:	44bc      	add	ip, r7
   2fed2:	4463      	add	r3, ip
   2fed4:	781b      	ldrb	r3, [r3, #0]
   2fed6:	2204      	movs	r2, #4
   2fed8:	4013      	ands	r3, r2
   2feda:	d003      	beq.n	2fee4 <f_open+0x180>
					res = FR_EXIST;
   2fedc:	4b89      	ldr	r3, [pc, #548]	; (30104 <f_open+0x3a0>)
   2fede:	18fb      	adds	r3, r7, r3
   2fee0:	2208      	movs	r2, #8
   2fee2:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2fee4:	4b87      	ldr	r3, [pc, #540]	; (30104 <f_open+0x3a0>)
   2fee6:	18fb      	adds	r3, r7, r3
   2fee8:	781b      	ldrb	r3, [r3, #0]
   2feea:	2b00      	cmp	r3, #0
   2feec:	d000      	beq.n	2fef0 <f_open+0x18c>
   2feee:	e12f      	b.n	30150 <f_open+0x3ec>
   2fef0:	4b83      	ldr	r3, [pc, #524]	; (30100 <f_open+0x39c>)
   2fef2:	2294      	movs	r2, #148	; 0x94
   2fef4:	0092      	lsls	r2, r2, #2
   2fef6:	4694      	mov	ip, r2
   2fef8:	44bc      	add	ip, r7
   2fefa:	4463      	add	r3, ip
   2fefc:	781b      	ldrb	r3, [r3, #0]
   2fefe:	2208      	movs	r2, #8
   2ff00:	4013      	ands	r3, r2
   2ff02:	d100      	bne.n	2ff06 <f_open+0x1a2>
   2ff04:	e124      	b.n	30150 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2ff06:	4b83      	ldr	r3, [pc, #524]	; (30114 <f_open+0x3b0>)
   2ff08:	4798      	blx	r3
   2ff0a:	0003      	movs	r3, r0
   2ff0c:	2291      	movs	r2, #145	; 0x91
   2ff0e:	0092      	lsls	r2, r2, #2
   2ff10:	18ba      	adds	r2, r7, r2
   2ff12:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2ff14:	2392      	movs	r3, #146	; 0x92
   2ff16:	009b      	lsls	r3, r3, #2
   2ff18:	18fb      	adds	r3, r7, r3
   2ff1a:	681b      	ldr	r3, [r3, #0]
   2ff1c:	330e      	adds	r3, #14
   2ff1e:	2291      	movs	r2, #145	; 0x91
   2ff20:	0092      	lsls	r2, r2, #2
   2ff22:	18ba      	adds	r2, r7, r2
   2ff24:	6812      	ldr	r2, [r2, #0]
   2ff26:	b2d2      	uxtb	r2, r2
   2ff28:	701a      	strb	r2, [r3, #0]
   2ff2a:	2392      	movs	r3, #146	; 0x92
   2ff2c:	009b      	lsls	r3, r3, #2
   2ff2e:	18fb      	adds	r3, r7, r3
   2ff30:	681b      	ldr	r3, [r3, #0]
   2ff32:	330f      	adds	r3, #15
   2ff34:	2291      	movs	r2, #145	; 0x91
   2ff36:	0092      	lsls	r2, r2, #2
   2ff38:	18ba      	adds	r2, r7, r2
   2ff3a:	6812      	ldr	r2, [r2, #0]
   2ff3c:	b292      	uxth	r2, r2
   2ff3e:	0a12      	lsrs	r2, r2, #8
   2ff40:	b292      	uxth	r2, r2
   2ff42:	b2d2      	uxtb	r2, r2
   2ff44:	701a      	strb	r2, [r3, #0]
   2ff46:	2392      	movs	r3, #146	; 0x92
   2ff48:	009b      	lsls	r3, r3, #2
   2ff4a:	18fb      	adds	r3, r7, r3
   2ff4c:	681b      	ldr	r3, [r3, #0]
   2ff4e:	3310      	adds	r3, #16
   2ff50:	2291      	movs	r2, #145	; 0x91
   2ff52:	0092      	lsls	r2, r2, #2
   2ff54:	18ba      	adds	r2, r7, r2
   2ff56:	6812      	ldr	r2, [r2, #0]
   2ff58:	0c12      	lsrs	r2, r2, #16
   2ff5a:	b2d2      	uxtb	r2, r2
   2ff5c:	701a      	strb	r2, [r3, #0]
   2ff5e:	2392      	movs	r3, #146	; 0x92
   2ff60:	009b      	lsls	r3, r3, #2
   2ff62:	18fb      	adds	r3, r7, r3
   2ff64:	681b      	ldr	r3, [r3, #0]
   2ff66:	3311      	adds	r3, #17
   2ff68:	2291      	movs	r2, #145	; 0x91
   2ff6a:	0092      	lsls	r2, r2, #2
   2ff6c:	18ba      	adds	r2, r7, r2
   2ff6e:	6812      	ldr	r2, [r2, #0]
   2ff70:	0e12      	lsrs	r2, r2, #24
   2ff72:	b2d2      	uxtb	r2, r2
   2ff74:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2ff76:	2392      	movs	r3, #146	; 0x92
   2ff78:	009b      	lsls	r3, r3, #2
   2ff7a:	18fb      	adds	r3, r7, r3
   2ff7c:	681b      	ldr	r3, [r3, #0]
   2ff7e:	330b      	adds	r3, #11
   2ff80:	2200      	movs	r2, #0
   2ff82:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2ff84:	2392      	movs	r3, #146	; 0x92
   2ff86:	009b      	lsls	r3, r3, #2
   2ff88:	18fb      	adds	r3, r7, r3
   2ff8a:	681b      	ldr	r3, [r3, #0]
   2ff8c:	331c      	adds	r3, #28
   2ff8e:	2200      	movs	r2, #0
   2ff90:	701a      	strb	r2, [r3, #0]
   2ff92:	2392      	movs	r3, #146	; 0x92
   2ff94:	009b      	lsls	r3, r3, #2
   2ff96:	18fb      	adds	r3, r7, r3
   2ff98:	681b      	ldr	r3, [r3, #0]
   2ff9a:	331d      	adds	r3, #29
   2ff9c:	2200      	movs	r2, #0
   2ff9e:	701a      	strb	r2, [r3, #0]
   2ffa0:	2392      	movs	r3, #146	; 0x92
   2ffa2:	009b      	lsls	r3, r3, #2
   2ffa4:	18fb      	adds	r3, r7, r3
   2ffa6:	681b      	ldr	r3, [r3, #0]
   2ffa8:	331e      	adds	r3, #30
   2ffaa:	2200      	movs	r2, #0
   2ffac:	701a      	strb	r2, [r3, #0]
   2ffae:	2392      	movs	r3, #146	; 0x92
   2ffb0:	009b      	lsls	r3, r3, #2
   2ffb2:	18fb      	adds	r3, r7, r3
   2ffb4:	681b      	ldr	r3, [r3, #0]
   2ffb6:	331f      	adds	r3, #31
   2ffb8:	2200      	movs	r2, #0
   2ffba:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2ffbc:	2392      	movs	r3, #146	; 0x92
   2ffbe:	009b      	lsls	r3, r3, #2
   2ffc0:	18fb      	adds	r3, r7, r3
   2ffc2:	681b      	ldr	r3, [r3, #0]
   2ffc4:	3315      	adds	r3, #21
   2ffc6:	781b      	ldrb	r3, [r3, #0]
   2ffc8:	021b      	lsls	r3, r3, #8
   2ffca:	b21a      	sxth	r2, r3
   2ffcc:	2392      	movs	r3, #146	; 0x92
   2ffce:	009b      	lsls	r3, r3, #2
   2ffd0:	18fb      	adds	r3, r7, r3
   2ffd2:	681b      	ldr	r3, [r3, #0]
   2ffd4:	3314      	adds	r3, #20
   2ffd6:	781b      	ldrb	r3, [r3, #0]
   2ffd8:	b21b      	sxth	r3, r3
   2ffda:	4313      	orrs	r3, r2
   2ffdc:	b21b      	sxth	r3, r3
   2ffde:	b29b      	uxth	r3, r3
   2ffe0:	041b      	lsls	r3, r3, #16
   2ffe2:	2292      	movs	r2, #146	; 0x92
   2ffe4:	0092      	lsls	r2, r2, #2
   2ffe6:	18ba      	adds	r2, r7, r2
   2ffe8:	6812      	ldr	r2, [r2, #0]
   2ffea:	321b      	adds	r2, #27
   2ffec:	7812      	ldrb	r2, [r2, #0]
   2ffee:	0212      	lsls	r2, r2, #8
   2fff0:	b211      	sxth	r1, r2
   2fff2:	2292      	movs	r2, #146	; 0x92
   2fff4:	0092      	lsls	r2, r2, #2
   2fff6:	18ba      	adds	r2, r7, r2
   2fff8:	6812      	ldr	r2, [r2, #0]
   2fffa:	321a      	adds	r2, #26
   2fffc:	7812      	ldrb	r2, [r2, #0]
   2fffe:	b212      	sxth	r2, r2
   30000:	430a      	orrs	r2, r1
   30002:	b212      	sxth	r2, r2
   30004:	b292      	uxth	r2, r2
   30006:	4313      	orrs	r3, r2
   30008:	2290      	movs	r2, #144	; 0x90
   3000a:	0092      	lsls	r2, r2, #2
   3000c:	18ba      	adds	r2, r7, r2
   3000e:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   30010:	2392      	movs	r3, #146	; 0x92
   30012:	009b      	lsls	r3, r3, #2
   30014:	18fb      	adds	r3, r7, r3
   30016:	681b      	ldr	r3, [r3, #0]
   30018:	331a      	adds	r3, #26
   3001a:	2200      	movs	r2, #0
   3001c:	701a      	strb	r2, [r3, #0]
   3001e:	2392      	movs	r3, #146	; 0x92
   30020:	009b      	lsls	r3, r3, #2
   30022:	18fb      	adds	r3, r7, r3
   30024:	681b      	ldr	r3, [r3, #0]
   30026:	331b      	adds	r3, #27
   30028:	2200      	movs	r2, #0
   3002a:	701a      	strb	r2, [r3, #0]
   3002c:	2392      	movs	r3, #146	; 0x92
   3002e:	009b      	lsls	r3, r3, #2
   30030:	18fb      	adds	r3, r7, r3
   30032:	681b      	ldr	r3, [r3, #0]
   30034:	3314      	adds	r3, #20
   30036:	2200      	movs	r2, #0
   30038:	701a      	strb	r2, [r3, #0]
   3003a:	2392      	movs	r3, #146	; 0x92
   3003c:	009b      	lsls	r3, r3, #2
   3003e:	18fb      	adds	r3, r7, r3
   30040:	681b      	ldr	r3, [r3, #0]
   30042:	3315      	adds	r3, #21
   30044:	2200      	movs	r2, #0
   30046:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   30048:	2387      	movs	r3, #135	; 0x87
   3004a:	009b      	lsls	r3, r3, #2
   3004c:	18fb      	adds	r3, r7, r3
   3004e:	681b      	ldr	r3, [r3, #0]
   30050:	2201      	movs	r2, #1
   30052:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   30054:	2390      	movs	r3, #144	; 0x90
   30056:	009b      	lsls	r3, r3, #2
   30058:	18fb      	adds	r3, r7, r3
   3005a:	681b      	ldr	r3, [r3, #0]
   3005c:	2b00      	cmp	r3, #0
   3005e:	d100      	bne.n	30062 <f_open+0x2fe>
   30060:	e076      	b.n	30150 <f_open+0x3ec>
				dw = dj.fs->winsect;
   30062:	2387      	movs	r3, #135	; 0x87
   30064:	009b      	lsls	r3, r3, #2
   30066:	18fb      	adds	r3, r7, r3
   30068:	681b      	ldr	r3, [r3, #0]
   3006a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   3006c:	2291      	movs	r2, #145	; 0x91
   3006e:	0092      	lsls	r2, r2, #2
   30070:	18ba      	adds	r2, r7, r2
   30072:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   30074:	2387      	movs	r3, #135	; 0x87
   30076:	009b      	lsls	r3, r3, #2
   30078:	18fb      	adds	r3, r7, r3
   3007a:	681b      	ldr	r3, [r3, #0]
   3007c:	4a21      	ldr	r2, [pc, #132]	; (30104 <f_open+0x3a0>)
   3007e:	18bc      	adds	r4, r7, r2
   30080:	2290      	movs	r2, #144	; 0x90
   30082:	0092      	lsls	r2, r2, #2
   30084:	18ba      	adds	r2, r7, r2
   30086:	6812      	ldr	r2, [r2, #0]
   30088:	0011      	movs	r1, r2
   3008a:	0018      	movs	r0, r3
   3008c:	4b22      	ldr	r3, [pc, #136]	; (30118 <f_open+0x3b4>)
   3008e:	4798      	blx	r3
   30090:	0003      	movs	r3, r0
   30092:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   30094:	4b1b      	ldr	r3, [pc, #108]	; (30104 <f_open+0x3a0>)
   30096:	18fb      	adds	r3, r7, r3
   30098:	781b      	ldrb	r3, [r3, #0]
   3009a:	2b00      	cmp	r3, #0
   3009c:	d158      	bne.n	30150 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   3009e:	2387      	movs	r3, #135	; 0x87
   300a0:	009b      	lsls	r3, r3, #2
   300a2:	18fb      	adds	r3, r7, r3
   300a4:	681b      	ldr	r3, [r3, #0]
   300a6:	2290      	movs	r2, #144	; 0x90
   300a8:	0092      	lsls	r2, r2, #2
   300aa:	18ba      	adds	r2, r7, r2
   300ac:	6812      	ldr	r2, [r2, #0]
   300ae:	3a01      	subs	r2, #1
   300b0:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   300b2:	2387      	movs	r3, #135	; 0x87
   300b4:	009b      	lsls	r3, r3, #2
   300b6:	18fb      	adds	r3, r7, r3
   300b8:	681b      	ldr	r3, [r3, #0]
   300ba:	4a12      	ldr	r2, [pc, #72]	; (30104 <f_open+0x3a0>)
   300bc:	18bc      	adds	r4, r7, r2
   300be:	2291      	movs	r2, #145	; 0x91
   300c0:	0092      	lsls	r2, r2, #2
   300c2:	18ba      	adds	r2, r7, r2
   300c4:	6812      	ldr	r2, [r2, #0]
   300c6:	0011      	movs	r1, r2
   300c8:	0018      	movs	r0, r3
   300ca:	4b14      	ldr	r3, [pc, #80]	; (3011c <f_open+0x3b8>)
   300cc:	4798      	blx	r3
   300ce:	0003      	movs	r3, r0
   300d0:	7023      	strb	r3, [r4, #0]
   300d2:	e03d      	b.n	30150 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   300d4:	4b0b      	ldr	r3, [pc, #44]	; (30104 <f_open+0x3a0>)
   300d6:	18fb      	adds	r3, r7, r3
   300d8:	781b      	ldrb	r3, [r3, #0]
   300da:	2b00      	cmp	r3, #0
   300dc:	d138      	bne.n	30150 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   300de:	2392      	movs	r3, #146	; 0x92
   300e0:	009b      	lsls	r3, r3, #2
   300e2:	18fb      	adds	r3, r7, r3
   300e4:	681b      	ldr	r3, [r3, #0]
   300e6:	330b      	adds	r3, #11
   300e8:	781b      	ldrb	r3, [r3, #0]
   300ea:	001a      	movs	r2, r3
   300ec:	2310      	movs	r3, #16
   300ee:	4013      	ands	r3, r2
   300f0:	d016      	beq.n	30120 <f_open+0x3bc>
				res = FR_NO_FILE;
   300f2:	4b04      	ldr	r3, [pc, #16]	; (30104 <f_open+0x3a0>)
   300f4:	18fb      	adds	r3, r7, r3
   300f6:	2204      	movs	r2, #4
   300f8:	701a      	strb	r2, [r3, #0]
   300fa:	e029      	b.n	30150 <f_open+0x3ec>
   300fc:	fffffdac 	.word	0xfffffdac
   30100:	fffffdb7 	.word	0xfffffdb7
   30104:	0000024f 	.word	0x0000024f
   30108:	0002f6bd 	.word	0x0002f6bd
   3010c:	0002f4b1 	.word	0x0002f4b1
   30110:	0002ed01 	.word	0x0002ed01
   30114:	0002daf9 	.word	0x0002daf9
   30118:	0002e27d 	.word	0x0002e27d
   3011c:	0002dc3d 	.word	0x0002dc3d
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   30120:	4b5a      	ldr	r3, [pc, #360]	; (3028c <f_open+0x528>)
   30122:	2294      	movs	r2, #148	; 0x94
   30124:	0092      	lsls	r2, r2, #2
   30126:	4694      	mov	ip, r2
   30128:	44bc      	add	ip, r7
   3012a:	4463      	add	r3, ip
   3012c:	781b      	ldrb	r3, [r3, #0]
   3012e:	2202      	movs	r2, #2
   30130:	4013      	ands	r3, r2
   30132:	d00d      	beq.n	30150 <f_open+0x3ec>
   30134:	2392      	movs	r3, #146	; 0x92
   30136:	009b      	lsls	r3, r3, #2
   30138:	18fb      	adds	r3, r7, r3
   3013a:	681b      	ldr	r3, [r3, #0]
   3013c:	330b      	adds	r3, #11
   3013e:	781b      	ldrb	r3, [r3, #0]
   30140:	001a      	movs	r2, r3
   30142:	2301      	movs	r3, #1
   30144:	4013      	ands	r3, r2
   30146:	d003      	beq.n	30150 <f_open+0x3ec>
					res = FR_DENIED;
   30148:	4b51      	ldr	r3, [pc, #324]	; (30290 <f_open+0x52c>)
   3014a:	18fb      	adds	r3, r7, r3
   3014c:	2207      	movs	r2, #7
   3014e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   30150:	4b4f      	ldr	r3, [pc, #316]	; (30290 <f_open+0x52c>)
   30152:	18fb      	adds	r3, r7, r3
   30154:	781b      	ldrb	r3, [r3, #0]
   30156:	2b00      	cmp	r3, #0
   30158:	d126      	bne.n	301a8 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   3015a:	4b4c      	ldr	r3, [pc, #304]	; (3028c <f_open+0x528>)
   3015c:	2294      	movs	r2, #148	; 0x94
   3015e:	0092      	lsls	r2, r2, #2
   30160:	4694      	mov	ip, r2
   30162:	44bc      	add	ip, r7
   30164:	4463      	add	r3, ip
   30166:	781b      	ldrb	r3, [r3, #0]
   30168:	2208      	movs	r2, #8
   3016a:	4013      	ands	r3, r2
   3016c:	d00f      	beq.n	3018e <f_open+0x42a>
			mode |= FA__WRITTEN;
   3016e:	4b47      	ldr	r3, [pc, #284]	; (3028c <f_open+0x528>)
   30170:	2294      	movs	r2, #148	; 0x94
   30172:	0092      	lsls	r2, r2, #2
   30174:	4694      	mov	ip, r2
   30176:	44bc      	add	ip, r7
   30178:	4463      	add	r3, ip
   3017a:	4a44      	ldr	r2, [pc, #272]	; (3028c <f_open+0x528>)
   3017c:	2194      	movs	r1, #148	; 0x94
   3017e:	0089      	lsls	r1, r1, #2
   30180:	468c      	mov	ip, r1
   30182:	44bc      	add	ip, r7
   30184:	4462      	add	r2, ip
   30186:	7812      	ldrb	r2, [r2, #0]
   30188:	2120      	movs	r1, #32
   3018a:	430a      	orrs	r2, r1
   3018c:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   3018e:	2387      	movs	r3, #135	; 0x87
   30190:	009b      	lsls	r3, r3, #2
   30192:	18fb      	adds	r3, r7, r3
   30194:	681b      	ldr	r3, [r3, #0]
   30196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   30198:	68fb      	ldr	r3, [r7, #12]
   3019a:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   3019c:	68fb      	ldr	r3, [r7, #12]
   3019e:	2292      	movs	r2, #146	; 0x92
   301a0:	0092      	lsls	r2, r2, #2
   301a2:	18ba      	adds	r2, r7, r2
   301a4:	6812      	ldr	r2, [r2, #0]
   301a6:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   301a8:	4b39      	ldr	r3, [pc, #228]	; (30290 <f_open+0x52c>)
   301aa:	18fb      	adds	r3, r7, r3
   301ac:	781b      	ldrb	r3, [r3, #0]
   301ae:	2b00      	cmp	r3, #0
   301b0:	d163      	bne.n	3027a <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   301b2:	68fb      	ldr	r3, [r7, #12]
   301b4:	4a35      	ldr	r2, [pc, #212]	; (3028c <f_open+0x528>)
   301b6:	2194      	movs	r1, #148	; 0x94
   301b8:	0089      	lsls	r1, r1, #2
   301ba:	468c      	mov	ip, r1
   301bc:	44bc      	add	ip, r7
   301be:	4462      	add	r2, ip
   301c0:	7812      	ldrb	r2, [r2, #0]
   301c2:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   301c4:	2392      	movs	r3, #146	; 0x92
   301c6:	009b      	lsls	r3, r3, #2
   301c8:	18fb      	adds	r3, r7, r3
   301ca:	681b      	ldr	r3, [r3, #0]
   301cc:	3315      	adds	r3, #21
   301ce:	781b      	ldrb	r3, [r3, #0]
   301d0:	021b      	lsls	r3, r3, #8
   301d2:	b21a      	sxth	r2, r3
   301d4:	2392      	movs	r3, #146	; 0x92
   301d6:	009b      	lsls	r3, r3, #2
   301d8:	18fb      	adds	r3, r7, r3
   301da:	681b      	ldr	r3, [r3, #0]
   301dc:	3314      	adds	r3, #20
   301de:	781b      	ldrb	r3, [r3, #0]
   301e0:	b21b      	sxth	r3, r3
   301e2:	4313      	orrs	r3, r2
   301e4:	b21b      	sxth	r3, r3
   301e6:	b29b      	uxth	r3, r3
   301e8:	041b      	lsls	r3, r3, #16
   301ea:	2292      	movs	r2, #146	; 0x92
   301ec:	0092      	lsls	r2, r2, #2
   301ee:	18ba      	adds	r2, r7, r2
   301f0:	6812      	ldr	r2, [r2, #0]
   301f2:	321b      	adds	r2, #27
   301f4:	7812      	ldrb	r2, [r2, #0]
   301f6:	0212      	lsls	r2, r2, #8
   301f8:	b211      	sxth	r1, r2
   301fa:	2292      	movs	r2, #146	; 0x92
   301fc:	0092      	lsls	r2, r2, #2
   301fe:	18ba      	adds	r2, r7, r2
   30200:	6812      	ldr	r2, [r2, #0]
   30202:	321a      	adds	r2, #26
   30204:	7812      	ldrb	r2, [r2, #0]
   30206:	b212      	sxth	r2, r2
   30208:	430a      	orrs	r2, r1
   3020a:	b212      	sxth	r2, r2
   3020c:	b292      	uxth	r2, r2
   3020e:	431a      	orrs	r2, r3
   30210:	68fb      	ldr	r3, [r7, #12]
   30212:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   30214:	2392      	movs	r3, #146	; 0x92
   30216:	009b      	lsls	r3, r3, #2
   30218:	18fb      	adds	r3, r7, r3
   3021a:	681b      	ldr	r3, [r3, #0]
   3021c:	331f      	adds	r3, #31
   3021e:	781b      	ldrb	r3, [r3, #0]
   30220:	061a      	lsls	r2, r3, #24
   30222:	2392      	movs	r3, #146	; 0x92
   30224:	009b      	lsls	r3, r3, #2
   30226:	18fb      	adds	r3, r7, r3
   30228:	681b      	ldr	r3, [r3, #0]
   3022a:	331e      	adds	r3, #30
   3022c:	781b      	ldrb	r3, [r3, #0]
   3022e:	041b      	lsls	r3, r3, #16
   30230:	4313      	orrs	r3, r2
   30232:	2292      	movs	r2, #146	; 0x92
   30234:	0092      	lsls	r2, r2, #2
   30236:	18ba      	adds	r2, r7, r2
   30238:	6812      	ldr	r2, [r2, #0]
   3023a:	321d      	adds	r2, #29
   3023c:	7812      	ldrb	r2, [r2, #0]
   3023e:	0212      	lsls	r2, r2, #8
   30240:	4313      	orrs	r3, r2
   30242:	2292      	movs	r2, #146	; 0x92
   30244:	0092      	lsls	r2, r2, #2
   30246:	18ba      	adds	r2, r7, r2
   30248:	6812      	ldr	r2, [r2, #0]
   3024a:	321c      	adds	r2, #28
   3024c:	7812      	ldrb	r2, [r2, #0]
   3024e:	431a      	orrs	r2, r3
   30250:	68fb      	ldr	r3, [r7, #12]
   30252:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   30254:	68fb      	ldr	r3, [r7, #12]
   30256:	2200      	movs	r2, #0
   30258:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   3025a:	68fb      	ldr	r3, [r7, #12]
   3025c:	2200      	movs	r2, #0
   3025e:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   30260:	2387      	movs	r3, #135	; 0x87
   30262:	009b      	lsls	r3, r3, #2
   30264:	18fb      	adds	r3, r7, r3
   30266:	681a      	ldr	r2, [r3, #0]
   30268:	68fb      	ldr	r3, [r7, #12]
   3026a:	601a      	str	r2, [r3, #0]
   3026c:	2387      	movs	r3, #135	; 0x87
   3026e:	009b      	lsls	r3, r3, #2
   30270:	18fb      	adds	r3, r7, r3
   30272:	681b      	ldr	r3, [r3, #0]
   30274:	88da      	ldrh	r2, [r3, #6]
   30276:	68fb      	ldr	r3, [r7, #12]
   30278:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   3027a:	4b05      	ldr	r3, [pc, #20]	; (30290 <f_open+0x52c>)
   3027c:	18fb      	adds	r3, r7, r3
   3027e:	781b      	ldrb	r3, [r3, #0]
}
   30280:	0018      	movs	r0, r3
   30282:	46bd      	mov	sp, r7
   30284:	2395      	movs	r3, #149	; 0x95
   30286:	009b      	lsls	r3, r3, #2
   30288:	449d      	add	sp, r3
   3028a:	bd90      	pop	{r4, r7, pc}
   3028c:	fffffdb7 	.word	0xfffffdb7
   30290:	0000024f 	.word	0x0000024f

00030294 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   30294:	b590      	push	{r4, r7, lr}
   30296:	b08b      	sub	sp, #44	; 0x2c
   30298:	af00      	add	r7, sp, #0
   3029a:	60f8      	str	r0, [r7, #12]
   3029c:	60b9      	str	r1, [r7, #8]
   3029e:	607a      	str	r2, [r7, #4]
   302a0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   302a2:	68bb      	ldr	r3, [r7, #8]
   302a4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   302a6:	683b      	ldr	r3, [r7, #0]
   302a8:	2200      	movs	r2, #0
   302aa:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   302ac:	68fb      	ldr	r3, [r7, #12]
   302ae:	681a      	ldr	r2, [r3, #0]
   302b0:	68fb      	ldr	r3, [r7, #12]
   302b2:	889b      	ldrh	r3, [r3, #4]
   302b4:	2117      	movs	r1, #23
   302b6:	187c      	adds	r4, r7, r1
   302b8:	0019      	movs	r1, r3
   302ba:	0010      	movs	r0, r2
   302bc:	4bc3      	ldr	r3, [pc, #780]	; (305cc <f_write+0x338>)
   302be:	4798      	blx	r3
   302c0:	0003      	movs	r3, r0
   302c2:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   302c4:	2317      	movs	r3, #23
   302c6:	18fb      	adds	r3, r7, r3
   302c8:	781b      	ldrb	r3, [r3, #0]
   302ca:	2b00      	cmp	r3, #0
   302cc:	d003      	beq.n	302d6 <f_write+0x42>
   302ce:	2317      	movs	r3, #23
   302d0:	18fb      	adds	r3, r7, r3
   302d2:	781b      	ldrb	r3, [r3, #0]
   302d4:	e176      	b.n	305c4 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   302d6:	68fb      	ldr	r3, [r7, #12]
   302d8:	799b      	ldrb	r3, [r3, #6]
   302da:	b25b      	sxtb	r3, r3
   302dc:	2b00      	cmp	r3, #0
   302de:	da01      	bge.n	302e4 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   302e0:	2302      	movs	r3, #2
   302e2:	e16f      	b.n	305c4 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   302e4:	68fb      	ldr	r3, [r7, #12]
   302e6:	799b      	ldrb	r3, [r3, #6]
   302e8:	001a      	movs	r2, r3
   302ea:	2302      	movs	r3, #2
   302ec:	4013      	ands	r3, r2
   302ee:	d101      	bne.n	302f4 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   302f0:	2307      	movs	r3, #7
   302f2:	e167      	b.n	305c4 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   302f4:	68fb      	ldr	r3, [r7, #12]
   302f6:	68da      	ldr	r2, [r3, #12]
   302f8:	687b      	ldr	r3, [r7, #4]
   302fa:	18d2      	adds	r2, r2, r3
   302fc:	68fb      	ldr	r3, [r7, #12]
   302fe:	68db      	ldr	r3, [r3, #12]
   30300:	429a      	cmp	r2, r3
   30302:	d300      	bcc.n	30306 <f_write+0x72>
   30304:	e146      	b.n	30594 <f_write+0x300>
   30306:	2300      	movs	r3, #0
   30308:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   3030a:	e143      	b.n	30594 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   3030c:	68fb      	ldr	r3, [r7, #12]
   3030e:	689b      	ldr	r3, [r3, #8]
   30310:	05db      	lsls	r3, r3, #23
   30312:	0ddb      	lsrs	r3, r3, #23
   30314:	d000      	beq.n	30318 <f_write+0x84>
   30316:	e0f6      	b.n	30506 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   30318:	68fb      	ldr	r3, [r7, #12]
   3031a:	689b      	ldr	r3, [r3, #8]
   3031c:	0a5b      	lsrs	r3, r3, #9
   3031e:	b2da      	uxtb	r2, r3
   30320:	68fb      	ldr	r3, [r7, #12]
   30322:	681b      	ldr	r3, [r3, #0]
   30324:	789b      	ldrb	r3, [r3, #2]
   30326:	3b01      	subs	r3, #1
   30328:	b2d9      	uxtb	r1, r3
   3032a:	2316      	movs	r3, #22
   3032c:	18fb      	adds	r3, r7, r3
   3032e:	400a      	ands	r2, r1
   30330:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   30332:	2316      	movs	r3, #22
   30334:	18fb      	adds	r3, r7, r3
   30336:	781b      	ldrb	r3, [r3, #0]
   30338:	2b00      	cmp	r3, #0
   3033a:	d140      	bne.n	303be <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   3033c:	68fb      	ldr	r3, [r7, #12]
   3033e:	689b      	ldr	r3, [r3, #8]
   30340:	2b00      	cmp	r3, #0
   30342:	d111      	bne.n	30368 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   30344:	68fb      	ldr	r3, [r7, #12]
   30346:	691b      	ldr	r3, [r3, #16]
   30348:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   3034a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3034c:	2b00      	cmp	r3, #0
   3034e:	d115      	bne.n	3037c <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   30350:	68fb      	ldr	r3, [r7, #12]
   30352:	681b      	ldr	r3, [r3, #0]
   30354:	2100      	movs	r1, #0
   30356:	0018      	movs	r0, r3
   30358:	4b9d      	ldr	r3, [pc, #628]	; (305d0 <f_write+0x33c>)
   3035a:	4798      	blx	r3
   3035c:	0003      	movs	r3, r0
   3035e:	627b      	str	r3, [r7, #36]	; 0x24
   30360:	68fb      	ldr	r3, [r7, #12]
   30362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30364:	611a      	str	r2, [r3, #16]
   30366:	e009      	b.n	3037c <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   30368:	68fb      	ldr	r3, [r7, #12]
   3036a:	681a      	ldr	r2, [r3, #0]
   3036c:	68fb      	ldr	r3, [r7, #12]
   3036e:	695b      	ldr	r3, [r3, #20]
   30370:	0019      	movs	r1, r3
   30372:	0010      	movs	r0, r2
   30374:	4b96      	ldr	r3, [pc, #600]	; (305d0 <f_write+0x33c>)
   30376:	4798      	blx	r3
   30378:	0003      	movs	r3, r0
   3037a:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   3037c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3037e:	2b00      	cmp	r3, #0
   30380:	d100      	bne.n	30384 <f_write+0xf0>
   30382:	e10c      	b.n	3059e <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   30384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30386:	2b01      	cmp	r3, #1
   30388:	d109      	bne.n	3039e <f_write+0x10a>
   3038a:	68fb      	ldr	r3, [r7, #12]
   3038c:	799b      	ldrb	r3, [r3, #6]
   3038e:	2280      	movs	r2, #128	; 0x80
   30390:	4252      	negs	r2, r2
   30392:	4313      	orrs	r3, r2
   30394:	b2da      	uxtb	r2, r3
   30396:	68fb      	ldr	r3, [r7, #12]
   30398:	719a      	strb	r2, [r3, #6]
   3039a:	2302      	movs	r3, #2
   3039c:	e112      	b.n	305c4 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   3039e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   303a0:	3301      	adds	r3, #1
   303a2:	d109      	bne.n	303b8 <f_write+0x124>
   303a4:	68fb      	ldr	r3, [r7, #12]
   303a6:	799b      	ldrb	r3, [r3, #6]
   303a8:	2280      	movs	r2, #128	; 0x80
   303aa:	4252      	negs	r2, r2
   303ac:	4313      	orrs	r3, r2
   303ae:	b2da      	uxtb	r2, r3
   303b0:	68fb      	ldr	r3, [r7, #12]
   303b2:	719a      	strb	r2, [r3, #6]
   303b4:	2301      	movs	r3, #1
   303b6:	e105      	b.n	305c4 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   303b8:	68fb      	ldr	r3, [r7, #12]
   303ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   303bc:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   303be:	68fb      	ldr	r3, [r7, #12]
   303c0:	681b      	ldr	r3, [r3, #0]
   303c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   303c4:	68fb      	ldr	r3, [r7, #12]
   303c6:	699b      	ldr	r3, [r3, #24]
   303c8:	429a      	cmp	r2, r3
   303ca:	d111      	bne.n	303f0 <f_write+0x15c>
   303cc:	68fb      	ldr	r3, [r7, #12]
   303ce:	681b      	ldr	r3, [r3, #0]
   303d0:	2100      	movs	r1, #0
   303d2:	0018      	movs	r0, r3
   303d4:	4b7f      	ldr	r3, [pc, #508]	; (305d4 <f_write+0x340>)
   303d6:	4798      	blx	r3
   303d8:	1e03      	subs	r3, r0, #0
   303da:	d009      	beq.n	303f0 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   303dc:	68fb      	ldr	r3, [r7, #12]
   303de:	799b      	ldrb	r3, [r3, #6]
   303e0:	2280      	movs	r2, #128	; 0x80
   303e2:	4252      	negs	r2, r2
   303e4:	4313      	orrs	r3, r2
   303e6:	b2da      	uxtb	r2, r3
   303e8:	68fb      	ldr	r3, [r7, #12]
   303ea:	719a      	strb	r2, [r3, #6]
   303ec:	2301      	movs	r3, #1
   303ee:	e0e9      	b.n	305c4 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   303f0:	68fb      	ldr	r3, [r7, #12]
   303f2:	681a      	ldr	r2, [r3, #0]
   303f4:	68fb      	ldr	r3, [r7, #12]
   303f6:	695b      	ldr	r3, [r3, #20]
   303f8:	0019      	movs	r1, r3
   303fa:	0010      	movs	r0, r2
   303fc:	4b76      	ldr	r3, [pc, #472]	; (305d8 <f_write+0x344>)
   303fe:	4798      	blx	r3
   30400:	0003      	movs	r3, r0
   30402:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   30404:	693b      	ldr	r3, [r7, #16]
   30406:	2b00      	cmp	r3, #0
   30408:	d109      	bne.n	3041e <f_write+0x18a>
   3040a:	68fb      	ldr	r3, [r7, #12]
   3040c:	799b      	ldrb	r3, [r3, #6]
   3040e:	2280      	movs	r2, #128	; 0x80
   30410:	4252      	negs	r2, r2
   30412:	4313      	orrs	r3, r2
   30414:	b2da      	uxtb	r2, r3
   30416:	68fb      	ldr	r3, [r7, #12]
   30418:	719a      	strb	r2, [r3, #6]
   3041a:	2302      	movs	r3, #2
   3041c:	e0d2      	b.n	305c4 <f_write+0x330>
			sect += csect;
   3041e:	2316      	movs	r3, #22
   30420:	18fb      	adds	r3, r7, r3
   30422:	781b      	ldrb	r3, [r3, #0]
   30424:	693a      	ldr	r2, [r7, #16]
   30426:	18d3      	adds	r3, r2, r3
   30428:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   3042a:	687b      	ldr	r3, [r7, #4]
   3042c:	0a5b      	lsrs	r3, r3, #9
   3042e:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   30430:	69fb      	ldr	r3, [r7, #28]
   30432:	2b00      	cmp	r3, #0
   30434:	d048      	beq.n	304c8 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   30436:	2316      	movs	r3, #22
   30438:	18fb      	adds	r3, r7, r3
   3043a:	781a      	ldrb	r2, [r3, #0]
   3043c:	69fb      	ldr	r3, [r7, #28]
   3043e:	18d2      	adds	r2, r2, r3
   30440:	68fb      	ldr	r3, [r7, #12]
   30442:	681b      	ldr	r3, [r3, #0]
   30444:	789b      	ldrb	r3, [r3, #2]
   30446:	429a      	cmp	r2, r3
   30448:	d908      	bls.n	3045c <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   3044a:	68fb      	ldr	r3, [r7, #12]
   3044c:	681b      	ldr	r3, [r3, #0]
   3044e:	789b      	ldrb	r3, [r3, #2]
   30450:	001a      	movs	r2, r3
   30452:	2316      	movs	r3, #22
   30454:	18fb      	adds	r3, r7, r3
   30456:	781b      	ldrb	r3, [r3, #0]
   30458:	1ad3      	subs	r3, r2, r3
   3045a:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   3045c:	68fb      	ldr	r3, [r7, #12]
   3045e:	681b      	ldr	r3, [r3, #0]
   30460:	7858      	ldrb	r0, [r3, #1]
   30462:	69fb      	ldr	r3, [r7, #28]
   30464:	b2db      	uxtb	r3, r3
   30466:	693a      	ldr	r2, [r7, #16]
   30468:	69b9      	ldr	r1, [r7, #24]
   3046a:	4c5c      	ldr	r4, [pc, #368]	; (305dc <f_write+0x348>)
   3046c:	47a0      	blx	r4
   3046e:	1e03      	subs	r3, r0, #0
   30470:	d009      	beq.n	30486 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   30472:	68fb      	ldr	r3, [r7, #12]
   30474:	799b      	ldrb	r3, [r3, #6]
   30476:	2280      	movs	r2, #128	; 0x80
   30478:	4252      	negs	r2, r2
   3047a:	4313      	orrs	r3, r2
   3047c:	b2da      	uxtb	r2, r3
   3047e:	68fb      	ldr	r3, [r7, #12]
   30480:	719a      	strb	r2, [r3, #6]
   30482:	2301      	movs	r3, #1
   30484:	e09e      	b.n	305c4 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   30486:	68fb      	ldr	r3, [r7, #12]
   30488:	681b      	ldr	r3, [r3, #0]
   3048a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   3048c:	693b      	ldr	r3, [r7, #16]
   3048e:	1ad2      	subs	r2, r2, r3
   30490:	69fb      	ldr	r3, [r7, #28]
   30492:	429a      	cmp	r2, r3
   30494:	d214      	bcs.n	304c0 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   30496:	68fb      	ldr	r3, [r7, #12]
   30498:	681b      	ldr	r3, [r3, #0]
   3049a:	3330      	adds	r3, #48	; 0x30
   3049c:	0018      	movs	r0, r3
   3049e:	68fb      	ldr	r3, [r7, #12]
   304a0:	681b      	ldr	r3, [r3, #0]
   304a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   304a4:	693b      	ldr	r3, [r7, #16]
   304a6:	1ad3      	subs	r3, r2, r3
   304a8:	025b      	lsls	r3, r3, #9
   304aa:	69ba      	ldr	r2, [r7, #24]
   304ac:	18d1      	adds	r1, r2, r3
   304ae:	2380      	movs	r3, #128	; 0x80
   304b0:	009b      	lsls	r3, r3, #2
   304b2:	001a      	movs	r2, r3
   304b4:	4b4a      	ldr	r3, [pc, #296]	; (305e0 <f_write+0x34c>)
   304b6:	4798      	blx	r3
					fp->fs->wflag = 0;
   304b8:	68fb      	ldr	r3, [r7, #12]
   304ba:	681b      	ldr	r3, [r3, #0]
   304bc:	2200      	movs	r2, #0
   304be:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   304c0:	69fb      	ldr	r3, [r7, #28]
   304c2:	025b      	lsls	r3, r3, #9
   304c4:	623b      	str	r3, [r7, #32]
				continue;
   304c6:	e051      	b.n	3056c <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   304c8:	68fb      	ldr	r3, [r7, #12]
   304ca:	689a      	ldr	r2, [r3, #8]
   304cc:	68fb      	ldr	r3, [r7, #12]
   304ce:	68db      	ldr	r3, [r3, #12]
   304d0:	429a      	cmp	r2, r3
   304d2:	d315      	bcc.n	30500 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   304d4:	68fb      	ldr	r3, [r7, #12]
   304d6:	681b      	ldr	r3, [r3, #0]
   304d8:	2100      	movs	r1, #0
   304da:	0018      	movs	r0, r3
   304dc:	4b3d      	ldr	r3, [pc, #244]	; (305d4 <f_write+0x340>)
   304de:	4798      	blx	r3
   304e0:	1e03      	subs	r3, r0, #0
   304e2:	d009      	beq.n	304f8 <f_write+0x264>
   304e4:	68fb      	ldr	r3, [r7, #12]
   304e6:	799b      	ldrb	r3, [r3, #6]
   304e8:	2280      	movs	r2, #128	; 0x80
   304ea:	4252      	negs	r2, r2
   304ec:	4313      	orrs	r3, r2
   304ee:	b2da      	uxtb	r2, r3
   304f0:	68fb      	ldr	r3, [r7, #12]
   304f2:	719a      	strb	r2, [r3, #6]
   304f4:	2301      	movs	r3, #1
   304f6:	e065      	b.n	305c4 <f_write+0x330>
				fp->fs->winsect = sect;
   304f8:	68fb      	ldr	r3, [r7, #12]
   304fa:	681b      	ldr	r3, [r3, #0]
   304fc:	693a      	ldr	r2, [r7, #16]
   304fe:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   30500:	68fb      	ldr	r3, [r7, #12]
   30502:	693a      	ldr	r2, [r7, #16]
   30504:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   30506:	68fb      	ldr	r3, [r7, #12]
   30508:	689b      	ldr	r3, [r3, #8]
   3050a:	05db      	lsls	r3, r3, #23
   3050c:	0ddb      	lsrs	r3, r3, #23
   3050e:	2280      	movs	r2, #128	; 0x80
   30510:	0092      	lsls	r2, r2, #2
   30512:	1ad3      	subs	r3, r2, r3
   30514:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   30516:	6a3a      	ldr	r2, [r7, #32]
   30518:	687b      	ldr	r3, [r7, #4]
   3051a:	429a      	cmp	r2, r3
   3051c:	d901      	bls.n	30522 <f_write+0x28e>
   3051e:	687b      	ldr	r3, [r7, #4]
   30520:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   30522:	68fb      	ldr	r3, [r7, #12]
   30524:	681a      	ldr	r2, [r3, #0]
   30526:	68fb      	ldr	r3, [r7, #12]
   30528:	699b      	ldr	r3, [r3, #24]
   3052a:	0019      	movs	r1, r3
   3052c:	0010      	movs	r0, r2
   3052e:	4b29      	ldr	r3, [pc, #164]	; (305d4 <f_write+0x340>)
   30530:	4798      	blx	r3
   30532:	1e03      	subs	r3, r0, #0
   30534:	d009      	beq.n	3054a <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   30536:	68fb      	ldr	r3, [r7, #12]
   30538:	799b      	ldrb	r3, [r3, #6]
   3053a:	2280      	movs	r2, #128	; 0x80
   3053c:	4252      	negs	r2, r2
   3053e:	4313      	orrs	r3, r2
   30540:	b2da      	uxtb	r2, r3
   30542:	68fb      	ldr	r3, [r7, #12]
   30544:	719a      	strb	r2, [r3, #6]
   30546:	2301      	movs	r3, #1
   30548:	e03c      	b.n	305c4 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   3054a:	68fb      	ldr	r3, [r7, #12]
   3054c:	681a      	ldr	r2, [r3, #0]
   3054e:	68fb      	ldr	r3, [r7, #12]
   30550:	689b      	ldr	r3, [r3, #8]
   30552:	05db      	lsls	r3, r3, #23
   30554:	0ddb      	lsrs	r3, r3, #23
   30556:	3330      	adds	r3, #48	; 0x30
   30558:	18d3      	adds	r3, r2, r3
   3055a:	6a3a      	ldr	r2, [r7, #32]
   3055c:	69b9      	ldr	r1, [r7, #24]
   3055e:	0018      	movs	r0, r3
   30560:	4b1f      	ldr	r3, [pc, #124]	; (305e0 <f_write+0x34c>)
   30562:	4798      	blx	r3
		fp->fs->wflag = 1;
   30564:	68fb      	ldr	r3, [r7, #12]
   30566:	681b      	ldr	r3, [r3, #0]
   30568:	2201      	movs	r2, #1
   3056a:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   3056c:	69ba      	ldr	r2, [r7, #24]
   3056e:	6a3b      	ldr	r3, [r7, #32]
   30570:	18d3      	adds	r3, r2, r3
   30572:	61bb      	str	r3, [r7, #24]
   30574:	68fb      	ldr	r3, [r7, #12]
   30576:	689a      	ldr	r2, [r3, #8]
   30578:	6a3b      	ldr	r3, [r7, #32]
   3057a:	18d2      	adds	r2, r2, r3
   3057c:	68fb      	ldr	r3, [r7, #12]
   3057e:	609a      	str	r2, [r3, #8]
   30580:	683b      	ldr	r3, [r7, #0]
   30582:	681a      	ldr	r2, [r3, #0]
   30584:	6a3b      	ldr	r3, [r7, #32]
   30586:	18d2      	adds	r2, r2, r3
   30588:	683b      	ldr	r3, [r7, #0]
   3058a:	601a      	str	r2, [r3, #0]
   3058c:	687a      	ldr	r2, [r7, #4]
   3058e:	6a3b      	ldr	r3, [r7, #32]
   30590:	1ad3      	subs	r3, r2, r3
   30592:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   30594:	687b      	ldr	r3, [r7, #4]
   30596:	2b00      	cmp	r3, #0
   30598:	d000      	beq.n	3059c <f_write+0x308>
   3059a:	e6b7      	b.n	3030c <f_write+0x78>
   3059c:	e000      	b.n	305a0 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   3059e:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   305a0:	68fb      	ldr	r3, [r7, #12]
   305a2:	689a      	ldr	r2, [r3, #8]
   305a4:	68fb      	ldr	r3, [r7, #12]
   305a6:	68db      	ldr	r3, [r3, #12]
   305a8:	429a      	cmp	r2, r3
   305aa:	d903      	bls.n	305b4 <f_write+0x320>
   305ac:	68fb      	ldr	r3, [r7, #12]
   305ae:	689a      	ldr	r2, [r3, #8]
   305b0:	68fb      	ldr	r3, [r7, #12]
   305b2:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   305b4:	68fb      	ldr	r3, [r7, #12]
   305b6:	799b      	ldrb	r3, [r3, #6]
   305b8:	2220      	movs	r2, #32
   305ba:	4313      	orrs	r3, r2
   305bc:	b2da      	uxtb	r2, r3
   305be:	68fb      	ldr	r3, [r7, #12]
   305c0:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   305c2:	2300      	movs	r3, #0
}
   305c4:	0018      	movs	r0, r3
   305c6:	46bd      	mov	sp, r7
   305c8:	b00b      	add	sp, #44	; 0x2c
   305ca:	bd90      	pop	{r4, r7, pc}
   305cc:	0002fcb9 	.word	0x0002fcb9
   305d0:	0002e345 	.word	0x0002e345
   305d4:	0002dc3d 	.word	0x0002dc3d
   305d8:	0002de9d 	.word	0x0002de9d
   305dc:	0002d929 	.word	0x0002d929
   305e0:	0002db59 	.word	0x0002db59

000305e4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   305e4:	b590      	push	{r4, r7, lr}
   305e6:	b087      	sub	sp, #28
   305e8:	af00      	add	r7, sp, #0
   305ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   305ec:	687b      	ldr	r3, [r7, #4]
   305ee:	681a      	ldr	r2, [r3, #0]
   305f0:	687b      	ldr	r3, [r7, #4]
   305f2:	889b      	ldrh	r3, [r3, #4]
   305f4:	2117      	movs	r1, #23
   305f6:	187c      	adds	r4, r7, r1
   305f8:	0019      	movs	r1, r3
   305fa:	0010      	movs	r0, r2
   305fc:	4b55      	ldr	r3, [pc, #340]	; (30754 <f_sync+0x170>)
   305fe:	4798      	blx	r3
   30600:	0003      	movs	r3, r0
   30602:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   30604:	2317      	movs	r3, #23
   30606:	18fb      	adds	r3, r7, r3
   30608:	781b      	ldrb	r3, [r3, #0]
   3060a:	2b00      	cmp	r3, #0
   3060c:	d000      	beq.n	30610 <f_sync+0x2c>
   3060e:	e09a      	b.n	30746 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   30610:	687b      	ldr	r3, [r7, #4]
   30612:	799b      	ldrb	r3, [r3, #6]
   30614:	001a      	movs	r2, r3
   30616:	2320      	movs	r3, #32
   30618:	4013      	ands	r3, r2
   3061a:	d100      	bne.n	3061e <f_sync+0x3a>
   3061c:	e093      	b.n	30746 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   3061e:	687b      	ldr	r3, [r7, #4]
   30620:	681a      	ldr	r2, [r3, #0]
   30622:	687b      	ldr	r3, [r7, #4]
   30624:	69db      	ldr	r3, [r3, #28]
   30626:	2117      	movs	r1, #23
   30628:	187c      	adds	r4, r7, r1
   3062a:	0019      	movs	r1, r3
   3062c:	0010      	movs	r0, r2
   3062e:	4b4a      	ldr	r3, [pc, #296]	; (30758 <f_sync+0x174>)
   30630:	4798      	blx	r3
   30632:	0003      	movs	r3, r0
   30634:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   30636:	2317      	movs	r3, #23
   30638:	18fb      	adds	r3, r7, r3
   3063a:	781b      	ldrb	r3, [r3, #0]
   3063c:	2b00      	cmp	r3, #0
   3063e:	d000      	beq.n	30642 <f_sync+0x5e>
   30640:	e081      	b.n	30746 <f_sync+0x162>
				dir = fp->dir_ptr;
   30642:	687b      	ldr	r3, [r7, #4]
   30644:	6a1b      	ldr	r3, [r3, #32]
   30646:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   30648:	693b      	ldr	r3, [r7, #16]
   3064a:	330b      	adds	r3, #11
   3064c:	693a      	ldr	r2, [r7, #16]
   3064e:	320b      	adds	r2, #11
   30650:	7812      	ldrb	r2, [r2, #0]
   30652:	2120      	movs	r1, #32
   30654:	430a      	orrs	r2, r1
   30656:	b2d2      	uxtb	r2, r2
   30658:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   3065a:	693b      	ldr	r3, [r7, #16]
   3065c:	331c      	adds	r3, #28
   3065e:	001a      	movs	r2, r3
   30660:	687b      	ldr	r3, [r7, #4]
   30662:	68db      	ldr	r3, [r3, #12]
   30664:	b2db      	uxtb	r3, r3
   30666:	7013      	strb	r3, [r2, #0]
   30668:	693b      	ldr	r3, [r7, #16]
   3066a:	331d      	adds	r3, #29
   3066c:	001a      	movs	r2, r3
   3066e:	687b      	ldr	r3, [r7, #4]
   30670:	68db      	ldr	r3, [r3, #12]
   30672:	b29b      	uxth	r3, r3
   30674:	0a1b      	lsrs	r3, r3, #8
   30676:	b29b      	uxth	r3, r3
   30678:	b2db      	uxtb	r3, r3
   3067a:	7013      	strb	r3, [r2, #0]
   3067c:	693b      	ldr	r3, [r7, #16]
   3067e:	331e      	adds	r3, #30
   30680:	001a      	movs	r2, r3
   30682:	687b      	ldr	r3, [r7, #4]
   30684:	68db      	ldr	r3, [r3, #12]
   30686:	0c1b      	lsrs	r3, r3, #16
   30688:	b2db      	uxtb	r3, r3
   3068a:	7013      	strb	r3, [r2, #0]
   3068c:	693b      	ldr	r3, [r7, #16]
   3068e:	331f      	adds	r3, #31
   30690:	001a      	movs	r2, r3
   30692:	687b      	ldr	r3, [r7, #4]
   30694:	68db      	ldr	r3, [r3, #12]
   30696:	0e1b      	lsrs	r3, r3, #24
   30698:	b2db      	uxtb	r3, r3
   3069a:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   3069c:	693b      	ldr	r3, [r7, #16]
   3069e:	331a      	adds	r3, #26
   306a0:	001a      	movs	r2, r3
   306a2:	687b      	ldr	r3, [r7, #4]
   306a4:	691b      	ldr	r3, [r3, #16]
   306a6:	b2db      	uxtb	r3, r3
   306a8:	7013      	strb	r3, [r2, #0]
   306aa:	693b      	ldr	r3, [r7, #16]
   306ac:	331b      	adds	r3, #27
   306ae:	001a      	movs	r2, r3
   306b0:	687b      	ldr	r3, [r7, #4]
   306b2:	691b      	ldr	r3, [r3, #16]
   306b4:	b29b      	uxth	r3, r3
   306b6:	0a1b      	lsrs	r3, r3, #8
   306b8:	b29b      	uxth	r3, r3
   306ba:	b2db      	uxtb	r3, r3
   306bc:	7013      	strb	r3, [r2, #0]
   306be:	693b      	ldr	r3, [r7, #16]
   306c0:	3314      	adds	r3, #20
   306c2:	001a      	movs	r2, r3
   306c4:	687b      	ldr	r3, [r7, #4]
   306c6:	691b      	ldr	r3, [r3, #16]
   306c8:	0c1b      	lsrs	r3, r3, #16
   306ca:	b2db      	uxtb	r3, r3
   306cc:	7013      	strb	r3, [r2, #0]
   306ce:	693b      	ldr	r3, [r7, #16]
   306d0:	3315      	adds	r3, #21
   306d2:	001a      	movs	r2, r3
   306d4:	687b      	ldr	r3, [r7, #4]
   306d6:	691b      	ldr	r3, [r3, #16]
   306d8:	0c1b      	lsrs	r3, r3, #16
   306da:	b29b      	uxth	r3, r3
   306dc:	0a1b      	lsrs	r3, r3, #8
   306de:	b29b      	uxth	r3, r3
   306e0:	b2db      	uxtb	r3, r3
   306e2:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   306e4:	4b1d      	ldr	r3, [pc, #116]	; (3075c <f_sync+0x178>)
   306e6:	4798      	blx	r3
   306e8:	0003      	movs	r3, r0
   306ea:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   306ec:	693b      	ldr	r3, [r7, #16]
   306ee:	3316      	adds	r3, #22
   306f0:	68fa      	ldr	r2, [r7, #12]
   306f2:	b2d2      	uxtb	r2, r2
   306f4:	701a      	strb	r2, [r3, #0]
   306f6:	693b      	ldr	r3, [r7, #16]
   306f8:	3317      	adds	r3, #23
   306fa:	68fa      	ldr	r2, [r7, #12]
   306fc:	b292      	uxth	r2, r2
   306fe:	0a12      	lsrs	r2, r2, #8
   30700:	b292      	uxth	r2, r2
   30702:	b2d2      	uxtb	r2, r2
   30704:	701a      	strb	r2, [r3, #0]
   30706:	693b      	ldr	r3, [r7, #16]
   30708:	3318      	adds	r3, #24
   3070a:	68fa      	ldr	r2, [r7, #12]
   3070c:	0c12      	lsrs	r2, r2, #16
   3070e:	b2d2      	uxtb	r2, r2
   30710:	701a      	strb	r2, [r3, #0]
   30712:	693b      	ldr	r3, [r7, #16]
   30714:	3319      	adds	r3, #25
   30716:	68fa      	ldr	r2, [r7, #12]
   30718:	0e12      	lsrs	r2, r2, #24
   3071a:	b2d2      	uxtb	r2, r2
   3071c:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   3071e:	687b      	ldr	r3, [r7, #4]
   30720:	799b      	ldrb	r3, [r3, #6]
   30722:	2220      	movs	r2, #32
   30724:	4393      	bics	r3, r2
   30726:	b2da      	uxtb	r2, r3
   30728:	687b      	ldr	r3, [r7, #4]
   3072a:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   3072c:	687b      	ldr	r3, [r7, #4]
   3072e:	681b      	ldr	r3, [r3, #0]
   30730:	2201      	movs	r2, #1
   30732:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   30734:	687b      	ldr	r3, [r7, #4]
   30736:	681b      	ldr	r3, [r3, #0]
   30738:	2217      	movs	r2, #23
   3073a:	18bc      	adds	r4, r7, r2
   3073c:	0018      	movs	r0, r3
   3073e:	4b08      	ldr	r3, [pc, #32]	; (30760 <f_sync+0x17c>)
   30740:	4798      	blx	r3
   30742:	0003      	movs	r3, r0
   30744:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   30746:	2317      	movs	r3, #23
   30748:	18fb      	adds	r3, r7, r3
   3074a:	781b      	ldrb	r3, [r3, #0]
}
   3074c:	0018      	movs	r0, r3
   3074e:	46bd      	mov	sp, r7
   30750:	b007      	add	sp, #28
   30752:	bd90      	pop	{r4, r7, pc}
   30754:	0002fcb9 	.word	0x0002fcb9
   30758:	0002dc3d 	.word	0x0002dc3d
   3075c:	0002daf9 	.word	0x0002daf9
   30760:	0002dd05 	.word	0x0002dd05

00030764 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   30764:	b590      	push	{r4, r7, lr}
   30766:	b085      	sub	sp, #20
   30768:	af00      	add	r7, sp, #0
   3076a:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   3076c:	230f      	movs	r3, #15
   3076e:	18fc      	adds	r4, r7, r3
   30770:	687b      	ldr	r3, [r7, #4]
   30772:	0018      	movs	r0, r3
   30774:	4b09      	ldr	r3, [pc, #36]	; (3079c <f_close+0x38>)
   30776:	4798      	blx	r3
   30778:	0003      	movs	r3, r0
   3077a:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   3077c:	230f      	movs	r3, #15
   3077e:	18fb      	adds	r3, r7, r3
   30780:	781b      	ldrb	r3, [r3, #0]
   30782:	2b00      	cmp	r3, #0
   30784:	d102      	bne.n	3078c <f_close+0x28>
   30786:	687b      	ldr	r3, [r7, #4]
   30788:	2200      	movs	r2, #0
   3078a:	601a      	str	r2, [r3, #0]
	return res;
   3078c:	230f      	movs	r3, #15
   3078e:	18fb      	adds	r3, r7, r3
   30790:	781b      	ldrb	r3, [r3, #0]
#endif
}
   30792:	0018      	movs	r0, r3
   30794:	46bd      	mov	sp, r7
   30796:	b005      	add	sp, #20
   30798:	bd90      	pop	{r4, r7, pc}
   3079a:	46c0      	nop			; (mov r8, r8)
   3079c:	000305e5 	.word	0x000305e5

000307a0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   307a0:	b580      	push	{r7, lr}
   307a2:	b084      	sub	sp, #16
   307a4:	af00      	add	r7, sp, #0
   307a6:	0002      	movs	r2, r0
   307a8:	6039      	str	r1, [r7, #0]
   307aa:	1dbb      	adds	r3, r7, #6
   307ac:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   307ae:	1dbb      	adds	r3, r7, #6
   307b0:	881b      	ldrh	r3, [r3, #0]
   307b2:	2b7f      	cmp	r3, #127	; 0x7f
   307b4:	d805      	bhi.n	307c2 <ff_convert+0x22>
		c = src;
   307b6:	230e      	movs	r3, #14
   307b8:	18fb      	adds	r3, r7, r3
   307ba:	1dba      	adds	r2, r7, #6
   307bc:	8812      	ldrh	r2, [r2, #0]
   307be:	801a      	strh	r2, [r3, #0]
   307c0:	e03a      	b.n	30838 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   307c2:	683b      	ldr	r3, [r7, #0]
   307c4:	2b00      	cmp	r3, #0
   307c6:	d010      	beq.n	307ea <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   307c8:	1dbb      	adds	r3, r7, #6
   307ca:	881b      	ldrh	r3, [r3, #0]
   307cc:	2bff      	cmp	r3, #255	; 0xff
   307ce:	d807      	bhi.n	307e0 <ff_convert+0x40>
   307d0:	1dbb      	adds	r3, r7, #6
   307d2:	881b      	ldrh	r3, [r3, #0]
   307d4:	3b80      	subs	r3, #128	; 0x80
   307d6:	001a      	movs	r2, r3
   307d8:	4b1b      	ldr	r3, [pc, #108]	; (30848 <ff_convert+0xa8>)
   307da:	0052      	lsls	r2, r2, #1
   307dc:	5ad2      	ldrh	r2, [r2, r3]
   307de:	e000      	b.n	307e2 <ff_convert+0x42>
   307e0:	2200      	movs	r2, #0
   307e2:	230e      	movs	r3, #14
   307e4:	18fb      	adds	r3, r7, r3
   307e6:	801a      	strh	r2, [r3, #0]
   307e8:	e026      	b.n	30838 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   307ea:	230e      	movs	r3, #14
   307ec:	18fb      	adds	r3, r7, r3
   307ee:	2200      	movs	r2, #0
   307f0:	801a      	strh	r2, [r3, #0]
   307f2:	e010      	b.n	30816 <ff_convert+0x76>
				if (src == Tbl[c]) break;
   307f4:	230e      	movs	r3, #14
   307f6:	18fb      	adds	r3, r7, r3
   307f8:	881a      	ldrh	r2, [r3, #0]
   307fa:	4b13      	ldr	r3, [pc, #76]	; (30848 <ff_convert+0xa8>)
   307fc:	0052      	lsls	r2, r2, #1
   307fe:	5ad3      	ldrh	r3, [r2, r3]
   30800:	1dba      	adds	r2, r7, #6
   30802:	8812      	ldrh	r2, [r2, #0]
   30804:	429a      	cmp	r2, r3
   30806:	d00c      	beq.n	30822 <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   30808:	230e      	movs	r3, #14
   3080a:	18fb      	adds	r3, r7, r3
   3080c:	881a      	ldrh	r2, [r3, #0]
   3080e:	230e      	movs	r3, #14
   30810:	18fb      	adds	r3, r7, r3
   30812:	3201      	adds	r2, #1
   30814:	801a      	strh	r2, [r3, #0]
   30816:	230e      	movs	r3, #14
   30818:	18fb      	adds	r3, r7, r3
   3081a:	881b      	ldrh	r3, [r3, #0]
   3081c:	2b7f      	cmp	r3, #127	; 0x7f
   3081e:	d9e9      	bls.n	307f4 <ff_convert+0x54>
   30820:	e000      	b.n	30824 <ff_convert+0x84>
				if (src == Tbl[c]) break;
   30822:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   30824:	230e      	movs	r3, #14
   30826:	18fb      	adds	r3, r7, r3
   30828:	881b      	ldrh	r3, [r3, #0]
   3082a:	3380      	adds	r3, #128	; 0x80
   3082c:	b29a      	uxth	r2, r3
   3082e:	230e      	movs	r3, #14
   30830:	18fb      	adds	r3, r7, r3
   30832:	21ff      	movs	r1, #255	; 0xff
   30834:	400a      	ands	r2, r1
   30836:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   30838:	230e      	movs	r3, #14
   3083a:	18fb      	adds	r3, r7, r3
   3083c:	881b      	ldrh	r3, [r3, #0]
}
   3083e:	0018      	movs	r0, r3
   30840:	46bd      	mov	sp, r7
   30842:	b004      	add	sp, #16
   30844:	bd80      	pop	{r7, pc}
   30846:	46c0      	nop			; (mov r8, r8)
   30848:	0003c960 	.word	0x0003c960

0003084c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   3084c:	b580      	push	{r7, lr}
   3084e:	b084      	sub	sp, #16
   30850:	af00      	add	r7, sp, #0
   30852:	0002      	movs	r2, r0
   30854:	1dbb      	adds	r3, r7, #6
   30856:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   30858:	2300      	movs	r3, #0
   3085a:	60fb      	str	r3, [r7, #12]
   3085c:	e002      	b.n	30864 <ff_wtoupper+0x18>
   3085e:	68fb      	ldr	r3, [r7, #12]
   30860:	3301      	adds	r3, #1
   30862:	60fb      	str	r3, [r7, #12]
   30864:	4b0f      	ldr	r3, [pc, #60]	; (308a4 <ff_wtoupper+0x58>)
   30866:	68fa      	ldr	r2, [r7, #12]
   30868:	0052      	lsls	r2, r2, #1
   3086a:	5ad3      	ldrh	r3, [r2, r3]
   3086c:	2b00      	cmp	r3, #0
   3086e:	d007      	beq.n	30880 <ff_wtoupper+0x34>
   30870:	4b0c      	ldr	r3, [pc, #48]	; (308a4 <ff_wtoupper+0x58>)
   30872:	68fa      	ldr	r2, [r7, #12]
   30874:	0052      	lsls	r2, r2, #1
   30876:	5ad3      	ldrh	r3, [r2, r3]
   30878:	1dba      	adds	r2, r7, #6
   3087a:	8812      	ldrh	r2, [r2, #0]
   3087c:	429a      	cmp	r2, r3
   3087e:	d1ee      	bne.n	3085e <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   30880:	4b08      	ldr	r3, [pc, #32]	; (308a4 <ff_wtoupper+0x58>)
   30882:	68fa      	ldr	r2, [r7, #12]
   30884:	0052      	lsls	r2, r2, #1
   30886:	5ad3      	ldrh	r3, [r2, r3]
   30888:	2b00      	cmp	r3, #0
   3088a:	d004      	beq.n	30896 <ff_wtoupper+0x4a>
   3088c:	4b06      	ldr	r3, [pc, #24]	; (308a8 <ff_wtoupper+0x5c>)
   3088e:	68fa      	ldr	r2, [r7, #12]
   30890:	0052      	lsls	r2, r2, #1
   30892:	5ad3      	ldrh	r3, [r2, r3]
   30894:	e001      	b.n	3089a <ff_wtoupper+0x4e>
   30896:	1dbb      	adds	r3, r7, #6
   30898:	881b      	ldrh	r3, [r3, #0]
}
   3089a:	0018      	movs	r0, r3
   3089c:	46bd      	mov	sp, r7
   3089e:	b004      	add	sp, #16
   308a0:	bd80      	pop	{r7, pc}
   308a2:	46c0      	nop			; (mov r8, r8)
   308a4:	0003ca60 	.word	0x0003ca60
   308a8:	0003cc40 	.word	0x0003cc40

000308ac <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   308ac:	b580      	push	{r7, lr}
   308ae:	b084      	sub	sp, #16
   308b0:	af00      	add	r7, sp, #0
   308b2:	60f8      	str	r0, [r7, #12]
   308b4:	60b9      	str	r1, [r7, #8]
   308b6:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   308b8:	68fb      	ldr	r3, [r7, #12]
   308ba:	68ba      	ldr	r2, [r7, #8]
   308bc:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   308be:	68fb      	ldr	r3, [r7, #12]
   308c0:	687a      	ldr	r2, [r7, #4]
   308c2:	601a      	str	r2, [r3, #0]
}
   308c4:	46c0      	nop			; (mov r8, r8)
   308c6:	46bd      	mov	sp, r7
   308c8:	b004      	add	sp, #16
   308ca:	bd80      	pop	{r7, pc}

000308cc <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   308cc:	b580      	push	{r7, lr}
   308ce:	b082      	sub	sp, #8
   308d0:	af00      	add	r7, sp, #0
   308d2:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   308d4:	687b      	ldr	r3, [r7, #4]
   308d6:	681b      	ldr	r3, [r3, #0]
   308d8:	4a07      	ldr	r2, [pc, #28]	; (308f8 <getNextPacketId+0x2c>)
   308da:	4293      	cmp	r3, r2
   308dc:	d003      	beq.n	308e6 <getNextPacketId+0x1a>
   308de:	687b      	ldr	r3, [r7, #4]
   308e0:	681b      	ldr	r3, [r3, #0]
   308e2:	1c5a      	adds	r2, r3, #1
   308e4:	e000      	b.n	308e8 <getNextPacketId+0x1c>
   308e6:	2201      	movs	r2, #1
   308e8:	687b      	ldr	r3, [r7, #4]
   308ea:	601a      	str	r2, [r3, #0]
   308ec:	687b      	ldr	r3, [r7, #4]
   308ee:	681b      	ldr	r3, [r3, #0]
}
   308f0:	0018      	movs	r0, r3
   308f2:	46bd      	mov	sp, r7
   308f4:	b002      	add	sp, #8
   308f6:	bd80      	pop	{r7, pc}
   308f8:	0000ffff 	.word	0x0000ffff

000308fc <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   308fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   308fe:	b087      	sub	sp, #28
   30900:	af00      	add	r7, sp, #0
   30902:	60f8      	str	r0, [r7, #12]
   30904:	60b9      	str	r1, [r7, #8]
   30906:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   30908:	2301      	movs	r3, #1
   3090a:	425b      	negs	r3, r3
   3090c:	617b      	str	r3, [r7, #20]
        sent = 0;
   3090e:	2300      	movs	r3, #0
   30910:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   30912:	e01a      	b.n	3094a <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   30914:	68fb      	ldr	r3, [r7, #12]
   30916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   30918:	68dc      	ldr	r4, [r3, #12]
   3091a:	68fb      	ldr	r3, [r7, #12]
   3091c:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   3091e:	68fb      	ldr	r3, [r7, #12]
   30920:	691a      	ldr	r2, [r3, #16]
   30922:	693b      	ldr	r3, [r7, #16]
   30924:	18d6      	adds	r6, r2, r3
   30926:	687b      	ldr	r3, [r7, #4]
   30928:	0018      	movs	r0, r3
   3092a:	4b1a      	ldr	r3, [pc, #104]	; (30994 <sendPacket+0x98>)
   3092c:	4798      	blx	r3
   3092e:	0003      	movs	r3, r0
   30930:	68ba      	ldr	r2, [r7, #8]
   30932:	0031      	movs	r1, r6
   30934:	0028      	movs	r0, r5
   30936:	47a0      	blx	r4
   30938:	0003      	movs	r3, r0
   3093a:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   3093c:	697b      	ldr	r3, [r7, #20]
   3093e:	2b00      	cmp	r3, #0
   30940:	db0e      	blt.n	30960 <sendPacket+0x64>
            break;
        sent += rc;
   30942:	693a      	ldr	r2, [r7, #16]
   30944:	697b      	ldr	r3, [r7, #20]
   30946:	18d3      	adds	r3, r2, r3
   30948:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   3094a:	693a      	ldr	r2, [r7, #16]
   3094c:	68bb      	ldr	r3, [r7, #8]
   3094e:	429a      	cmp	r2, r3
   30950:	da07      	bge.n	30962 <sendPacket+0x66>
   30952:	687b      	ldr	r3, [r7, #4]
   30954:	0018      	movs	r0, r3
   30956:	4b10      	ldr	r3, [pc, #64]	; (30998 <sendPacket+0x9c>)
   30958:	4798      	blx	r3
   3095a:	1e03      	subs	r3, r0, #0
   3095c:	d0da      	beq.n	30914 <sendPacket+0x18>
   3095e:	e000      	b.n	30962 <sendPacket+0x66>
            break;
   30960:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   30962:	693a      	ldr	r2, [r7, #16]
   30964:	68bb      	ldr	r3, [r7, #8]
   30966:	429a      	cmp	r2, r3
   30968:	d10b      	bne.n	30982 <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   3096a:	68fb      	ldr	r3, [r7, #12]
   3096c:	3354      	adds	r3, #84	; 0x54
   3096e:	001a      	movs	r2, r3
   30970:	68fb      	ldr	r3, [r7, #12]
   30972:	699b      	ldr	r3, [r3, #24]
   30974:	0019      	movs	r1, r3
   30976:	0010      	movs	r0, r2
   30978:	4b08      	ldr	r3, [pc, #32]	; (3099c <sendPacket+0xa0>)
   3097a:	4798      	blx	r3
        rc = SUCCESS;
   3097c:	2300      	movs	r3, #0
   3097e:	617b      	str	r3, [r7, #20]
   30980:	e002      	b.n	30988 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   30982:	2301      	movs	r3, #1
   30984:	425b      	negs	r3, r3
   30986:	617b      	str	r3, [r7, #20]
    return rc;
   30988:	697b      	ldr	r3, [r7, #20]
}
   3098a:	0018      	movs	r0, r3
   3098c:	46bd      	mov	sp, r7
   3098e:	b007      	add	sp, #28
   30990:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30992:	46c0      	nop			; (mov r8, r8)
   30994:	0003175d 	.word	0x0003175d
   30998:	000316e1 	.word	0x000316e1
   3099c:	00031735 	.word	0x00031735

000309a0 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   309a0:	b580      	push	{r7, lr}
   309a2:	b086      	sub	sp, #24
   309a4:	af00      	add	r7, sp, #0
   309a6:	60f8      	str	r0, [r7, #12]
   309a8:	60b9      	str	r1, [r7, #8]
   309aa:	607a      	str	r2, [r7, #4]
   309ac:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   309ae:	68fb      	ldr	r3, [r7, #12]
   309b0:	68ba      	ldr	r2, [r7, #8]
   309b2:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   309b4:	2300      	movs	r3, #0
   309b6:	617b      	str	r3, [r7, #20]
   309b8:	e00a      	b.n	309d0 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   309ba:	68fa      	ldr	r2, [r7, #12]
   309bc:	697b      	ldr	r3, [r7, #20]
   309be:	3304      	adds	r3, #4
   309c0:	00db      	lsls	r3, r3, #3
   309c2:	18d3      	adds	r3, r2, r3
   309c4:	3304      	adds	r3, #4
   309c6:	2200      	movs	r2, #0
   309c8:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   309ca:	697b      	ldr	r3, [r7, #20]
   309cc:	3301      	adds	r3, #1
   309ce:	617b      	str	r3, [r7, #20]
   309d0:	697b      	ldr	r3, [r7, #20]
   309d2:	2b04      	cmp	r3, #4
   309d4:	ddf1      	ble.n	309ba <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   309d6:	68fb      	ldr	r3, [r7, #12]
   309d8:	687a      	ldr	r2, [r7, #4]
   309da:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   309dc:	68fb      	ldr	r3, [r7, #12]
   309de:	683a      	ldr	r2, [r7, #0]
   309e0:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   309e2:	68fb      	ldr	r3, [r7, #12]
   309e4:	6a3a      	ldr	r2, [r7, #32]
   309e6:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   309e8:	68fb      	ldr	r3, [r7, #12]
   309ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   309ec:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   309ee:	68fb      	ldr	r3, [r7, #12]
   309f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   309f2:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   309f4:	68fb      	ldr	r3, [r7, #12]
   309f6:	2200      	movs	r2, #0
   309f8:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   309fa:	68fb      	ldr	r3, [r7, #12]
   309fc:	2200      	movs	r2, #0
   309fe:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   30a00:	68fb      	ldr	r3, [r7, #12]
   30a02:	2200      	movs	r2, #0
   30a04:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   30a06:	68fb      	ldr	r3, [r7, #12]
   30a08:	2201      	movs	r2, #1
   30a0a:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   30a0c:	68fb      	ldr	r3, [r7, #12]
   30a0e:	3354      	adds	r3, #84	; 0x54
   30a10:	0018      	movs	r0, r3
   30a12:	4b03      	ldr	r3, [pc, #12]	; (30a20 <MQTTClientInit+0x80>)
   30a14:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   30a16:	46c0      	nop			; (mov r8, r8)
   30a18:	46bd      	mov	sp, r7
   30a1a:	b006      	add	sp, #24
   30a1c:	bd80      	pop	{r7, pc}
   30a1e:	46c0      	nop			; (mov r8, r8)
   30a20:	00031785 	.word	0x00031785

00030a24 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   30a24:	b590      	push	{r4, r7, lr}
   30a26:	b08b      	sub	sp, #44	; 0x2c
   30a28:	af00      	add	r7, sp, #0
   30a2a:	60f8      	str	r0, [r7, #12]
   30a2c:	60b9      	str	r1, [r7, #8]
   30a2e:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   30a30:	2301      	movs	r3, #1
   30a32:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   30a34:	2300      	movs	r3, #0
   30a36:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   30a38:	2304      	movs	r3, #4
   30a3a:	61fb      	str	r3, [r7, #28]

    *value = 0;
   30a3c:	68bb      	ldr	r3, [r7, #8]
   30a3e:	2200      	movs	r2, #0
   30a40:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   30a42:	2301      	movs	r3, #1
   30a44:	425b      	negs	r3, r3
   30a46:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   30a48:	6a3b      	ldr	r3, [r7, #32]
   30a4a:	3301      	adds	r3, #1
   30a4c:	623b      	str	r3, [r7, #32]
   30a4e:	6a3a      	ldr	r2, [r7, #32]
   30a50:	69fb      	ldr	r3, [r7, #28]
   30a52:	429a      	cmp	r2, r3
   30a54:	dd03      	ble.n	30a5e <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   30a56:	2301      	movs	r3, #1
   30a58:	425b      	negs	r3, r3
   30a5a:	61bb      	str	r3, [r7, #24]
            goto exit;
   30a5c:	e026      	b.n	30aac <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   30a5e:	68fb      	ldr	r3, [r7, #12]
   30a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   30a62:	689c      	ldr	r4, [r3, #8]
   30a64:	68fb      	ldr	r3, [r7, #12]
   30a66:	6d18      	ldr	r0, [r3, #80]	; 0x50
   30a68:	687b      	ldr	r3, [r7, #4]
   30a6a:	2217      	movs	r2, #23
   30a6c:	18b9      	adds	r1, r7, r2
   30a6e:	2201      	movs	r2, #1
   30a70:	47a0      	blx	r4
   30a72:	0003      	movs	r3, r0
   30a74:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   30a76:	69bb      	ldr	r3, [r7, #24]
   30a78:	2b01      	cmp	r3, #1
   30a7a:	d116      	bne.n	30aaa <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   30a7c:	68bb      	ldr	r3, [r7, #8]
   30a7e:	681a      	ldr	r2, [r3, #0]
   30a80:	2317      	movs	r3, #23
   30a82:	18fb      	adds	r3, r7, r3
   30a84:	781b      	ldrb	r3, [r3, #0]
   30a86:	0019      	movs	r1, r3
   30a88:	237f      	movs	r3, #127	; 0x7f
   30a8a:	400b      	ands	r3, r1
   30a8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   30a8e:	434b      	muls	r3, r1
   30a90:	18d2      	adds	r2, r2, r3
   30a92:	68bb      	ldr	r3, [r7, #8]
   30a94:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   30a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30a98:	01db      	lsls	r3, r3, #7
   30a9a:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   30a9c:	2317      	movs	r3, #23
   30a9e:	18fb      	adds	r3, r7, r3
   30aa0:	781b      	ldrb	r3, [r3, #0]
   30aa2:	b25b      	sxtb	r3, r3
   30aa4:	2b00      	cmp	r3, #0
   30aa6:	dbcc      	blt.n	30a42 <decodePacket+0x1e>
   30aa8:	e000      	b.n	30aac <decodePacket+0x88>
            goto exit;
   30aaa:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   30aac:	6a3b      	ldr	r3, [r7, #32]
}
   30aae:	0018      	movs	r0, r3
   30ab0:	46bd      	mov	sp, r7
   30ab2:	b00b      	add	sp, #44	; 0x2c
   30ab4:	bd90      	pop	{r4, r7, pc}
	...

00030ab8 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   30ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
   30aba:	46c6      	mov	lr, r8
   30abc:	b500      	push	{lr}
   30abe:	b086      	sub	sp, #24
   30ac0:	af00      	add	r7, sp, #0
   30ac2:	6078      	str	r0, [r7, #4]
   30ac4:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   30ac6:	2301      	movs	r3, #1
   30ac8:	425b      	negs	r3, r3
   30aca:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   30acc:	2300      	movs	r3, #0
   30ace:	60fb      	str	r3, [r7, #12]
    int len = 0;
   30ad0:	2300      	movs	r3, #0
   30ad2:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   30ad4:	2300      	movs	r3, #0
   30ad6:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   30ad8:	687b      	ldr	r3, [r7, #4]
   30ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   30adc:	689c      	ldr	r4, [r3, #8]
   30ade:	687b      	ldr	r3, [r7, #4]
   30ae0:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   30ae2:	687b      	ldr	r3, [r7, #4]
   30ae4:	695e      	ldr	r6, [r3, #20]
   30ae6:	683b      	ldr	r3, [r7, #0]
   30ae8:	0018      	movs	r0, r3
   30aea:	4b2b      	ldr	r3, [pc, #172]	; (30b98 <readPacket+0xe0>)
   30aec:	4798      	blx	r3
   30aee:	0003      	movs	r3, r0
   30af0:	2201      	movs	r2, #1
   30af2:	0031      	movs	r1, r6
   30af4:	0028      	movs	r0, r5
   30af6:	47a0      	blx	r4
   30af8:	0003      	movs	r3, r0
   30afa:	2b01      	cmp	r3, #1
   30afc:	d141      	bne.n	30b82 <readPacket+0xca>
        goto exit;

    len = 1;
   30afe:	2301      	movs	r3, #1
   30b00:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   30b02:	683b      	ldr	r3, [r7, #0]
   30b04:	0018      	movs	r0, r3
   30b06:	4b24      	ldr	r3, [pc, #144]	; (30b98 <readPacket+0xe0>)
   30b08:	4798      	blx	r3
   30b0a:	0002      	movs	r2, r0
   30b0c:	2308      	movs	r3, #8
   30b0e:	18f9      	adds	r1, r7, r3
   30b10:	687b      	ldr	r3, [r7, #4]
   30b12:	0018      	movs	r0, r3
   30b14:	4b21      	ldr	r3, [pc, #132]	; (30b9c <readPacket+0xe4>)
   30b16:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   30b18:	687b      	ldr	r3, [r7, #4]
   30b1a:	695b      	ldr	r3, [r3, #20]
   30b1c:	3301      	adds	r3, #1
   30b1e:	68ba      	ldr	r2, [r7, #8]
   30b20:	0011      	movs	r1, r2
   30b22:	0018      	movs	r0, r3
   30b24:	4b1e      	ldr	r3, [pc, #120]	; (30ba0 <readPacket+0xe8>)
   30b26:	4798      	blx	r3
   30b28:	0002      	movs	r2, r0
   30b2a:	693b      	ldr	r3, [r7, #16]
   30b2c:	189b      	adds	r3, r3, r2
   30b2e:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   30b30:	68bb      	ldr	r3, [r7, #8]
   30b32:	2b00      	cmp	r3, #0
   30b34:	dd17      	ble.n	30b66 <readPacket+0xae>
   30b36:	687b      	ldr	r3, [r7, #4]
   30b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   30b3a:	689c      	ldr	r4, [r3, #8]
   30b3c:	687b      	ldr	r3, [r7, #4]
   30b3e:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   30b40:	687b      	ldr	r3, [r7, #4]
   30b42:	695a      	ldr	r2, [r3, #20]
   30b44:	693b      	ldr	r3, [r7, #16]
   30b46:	18d6      	adds	r6, r2, r3
   30b48:	68bb      	ldr	r3, [r7, #8]
   30b4a:	4698      	mov	r8, r3
   30b4c:	683b      	ldr	r3, [r7, #0]
   30b4e:	0018      	movs	r0, r3
   30b50:	4b11      	ldr	r3, [pc, #68]	; (30b98 <readPacket+0xe0>)
   30b52:	4798      	blx	r3
   30b54:	0003      	movs	r3, r0
   30b56:	4642      	mov	r2, r8
   30b58:	0031      	movs	r1, r6
   30b5a:	0028      	movs	r0, r5
   30b5c:	47a0      	blx	r4
   30b5e:	0002      	movs	r2, r0
   30b60:	68bb      	ldr	r3, [r7, #8]
   30b62:	429a      	cmp	r2, r3
   30b64:	d10f      	bne.n	30b86 <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   30b66:	687b      	ldr	r3, [r7, #4]
   30b68:	695b      	ldr	r3, [r3, #20]
   30b6a:	781a      	ldrb	r2, [r3, #0]
   30b6c:	230c      	movs	r3, #12
   30b6e:	18fb      	adds	r3, r7, r3
   30b70:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   30b72:	230c      	movs	r3, #12
   30b74:	18fb      	adds	r3, r7, r3
   30b76:	781b      	ldrb	r3, [r3, #0]
   30b78:	061b      	lsls	r3, r3, #24
   30b7a:	0f1b      	lsrs	r3, r3, #28
   30b7c:	b2db      	uxtb	r3, r3
   30b7e:	617b      	str	r3, [r7, #20]
   30b80:	e002      	b.n	30b88 <readPacket+0xd0>
        goto exit;
   30b82:	46c0      	nop			; (mov r8, r8)
   30b84:	e000      	b.n	30b88 <readPacket+0xd0>
        goto exit;
   30b86:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   30b88:	697b      	ldr	r3, [r7, #20]
}
   30b8a:	0018      	movs	r0, r3
   30b8c:	46bd      	mov	sp, r7
   30b8e:	b006      	add	sp, #24
   30b90:	bc04      	pop	{r2}
   30b92:	4690      	mov	r8, r2
   30b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30b96:	46c0      	nop			; (mov r8, r8)
   30b98:	0003175d 	.word	0x0003175d
   30b9c:	00030a25 	.word	0x00030a25
   30ba0:	00032535 	.word	0x00032535

00030ba4 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   30ba4:	b580      	push	{r7, lr}
   30ba6:	b086      	sub	sp, #24
   30ba8:	af00      	add	r7, sp, #0
   30baa:	6078      	str	r0, [r7, #4]
   30bac:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   30bae:	687b      	ldr	r3, [r7, #4]
   30bb0:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   30bb2:	683b      	ldr	r3, [r7, #0]
   30bb4:	689b      	ldr	r3, [r3, #8]
   30bb6:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   30bb8:	683b      	ldr	r3, [r7, #0]
   30bba:	685b      	ldr	r3, [r3, #4]
   30bbc:	001a      	movs	r2, r3
   30bbe:	693b      	ldr	r3, [r7, #16]
   30bc0:	189b      	adds	r3, r3, r2
   30bc2:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   30bc4:	e039      	b.n	30c3a <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   30bc6:	693b      	ldr	r3, [r7, #16]
   30bc8:	781b      	ldrb	r3, [r3, #0]
   30bca:	2b2f      	cmp	r3, #47	; 0x2f
   30bcc:	d103      	bne.n	30bd6 <isTopicMatched+0x32>
   30bce:	697b      	ldr	r3, [r7, #20]
   30bd0:	781b      	ldrb	r3, [r3, #0]
   30bd2:	2b2f      	cmp	r3, #47	; 0x2f
   30bd4:	d13a      	bne.n	30c4c <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   30bd6:	697b      	ldr	r3, [r7, #20]
   30bd8:	781b      	ldrb	r3, [r3, #0]
   30bda:	2b2b      	cmp	r3, #43	; 0x2b
   30bdc:	d009      	beq.n	30bf2 <isTopicMatched+0x4e>
   30bde:	697b      	ldr	r3, [r7, #20]
   30be0:	781b      	ldrb	r3, [r3, #0]
   30be2:	2b23      	cmp	r3, #35	; 0x23
   30be4:	d005      	beq.n	30bf2 <isTopicMatched+0x4e>
   30be6:	697b      	ldr	r3, [r7, #20]
   30be8:	781a      	ldrb	r2, [r3, #0]
   30bea:	693b      	ldr	r3, [r7, #16]
   30bec:	781b      	ldrb	r3, [r3, #0]
   30bee:	429a      	cmp	r2, r3
   30bf0:	d12e      	bne.n	30c50 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   30bf2:	697b      	ldr	r3, [r7, #20]
   30bf4:	781b      	ldrb	r3, [r3, #0]
   30bf6:	2b2b      	cmp	r3, #43	; 0x2b
   30bf8:	d112      	bne.n	30c20 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   30bfa:	693b      	ldr	r3, [r7, #16]
   30bfc:	3301      	adds	r3, #1
   30bfe:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   30c00:	e005      	b.n	30c0e <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   30c02:	693b      	ldr	r3, [r7, #16]
   30c04:	3301      	adds	r3, #1
   30c06:	613b      	str	r3, [r7, #16]
   30c08:	693b      	ldr	r3, [r7, #16]
   30c0a:	3301      	adds	r3, #1
   30c0c:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   30c0e:	68fa      	ldr	r2, [r7, #12]
   30c10:	68bb      	ldr	r3, [r7, #8]
   30c12:	429a      	cmp	r2, r3
   30c14:	d20b      	bcs.n	30c2e <isTopicMatched+0x8a>
   30c16:	68fb      	ldr	r3, [r7, #12]
   30c18:	781b      	ldrb	r3, [r3, #0]
   30c1a:	2b2f      	cmp	r3, #47	; 0x2f
   30c1c:	d1f1      	bne.n	30c02 <isTopicMatched+0x5e>
   30c1e:	e006      	b.n	30c2e <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   30c20:	697b      	ldr	r3, [r7, #20]
   30c22:	781b      	ldrb	r3, [r3, #0]
   30c24:	2b23      	cmp	r3, #35	; 0x23
   30c26:	d102      	bne.n	30c2e <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   30c28:	68bb      	ldr	r3, [r7, #8]
   30c2a:	3b01      	subs	r3, #1
   30c2c:	613b      	str	r3, [r7, #16]
        curf++;
   30c2e:	697b      	ldr	r3, [r7, #20]
   30c30:	3301      	adds	r3, #1
   30c32:	617b      	str	r3, [r7, #20]
        curn++;
   30c34:	693b      	ldr	r3, [r7, #16]
   30c36:	3301      	adds	r3, #1
   30c38:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   30c3a:	697b      	ldr	r3, [r7, #20]
   30c3c:	781b      	ldrb	r3, [r3, #0]
   30c3e:	2b00      	cmp	r3, #0
   30c40:	d007      	beq.n	30c52 <isTopicMatched+0xae>
   30c42:	693a      	ldr	r2, [r7, #16]
   30c44:	68bb      	ldr	r3, [r7, #8]
   30c46:	429a      	cmp	r2, r3
   30c48:	d3bd      	bcc.n	30bc6 <isTopicMatched+0x22>
   30c4a:	e002      	b.n	30c52 <isTopicMatched+0xae>
            break;
   30c4c:	46c0      	nop			; (mov r8, r8)
   30c4e:	e000      	b.n	30c52 <isTopicMatched+0xae>
            break;
   30c50:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   30c52:	693a      	ldr	r2, [r7, #16]
   30c54:	68bb      	ldr	r3, [r7, #8]
   30c56:	429a      	cmp	r2, r3
   30c58:	d105      	bne.n	30c66 <isTopicMatched+0xc2>
   30c5a:	697b      	ldr	r3, [r7, #20]
   30c5c:	781b      	ldrb	r3, [r3, #0]
   30c5e:	2b00      	cmp	r3, #0
   30c60:	d101      	bne.n	30c66 <isTopicMatched+0xc2>
   30c62:	2301      	movs	r3, #1
   30c64:	e000      	b.n	30c68 <isTopicMatched+0xc4>
   30c66:	2300      	movs	r3, #0
   30c68:	b2db      	uxtb	r3, r3
}
   30c6a:	0018      	movs	r0, r3
   30c6c:	46bd      	mov	sp, r7
   30c6e:	b006      	add	sp, #24
   30c70:	bd80      	pop	{r7, pc}
	...

00030c74 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   30c74:	b580      	push	{r7, lr}
   30c76:	b08a      	sub	sp, #40	; 0x28
   30c78:	af00      	add	r7, sp, #0
   30c7a:	60f8      	str	r0, [r7, #12]
   30c7c:	60b9      	str	r1, [r7, #8]
   30c7e:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   30c80:	2301      	movs	r3, #1
   30c82:	425b      	negs	r3, r3
   30c84:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   30c86:	2300      	movs	r3, #0
   30c88:	627b      	str	r3, [r7, #36]	; 0x24
   30c8a:	e044      	b.n	30d16 <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   30c8c:	68fa      	ldr	r2, [r7, #12]
   30c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30c90:	3304      	adds	r3, #4
   30c92:	00db      	lsls	r3, r3, #3
   30c94:	18d3      	adds	r3, r2, r3
   30c96:	3304      	adds	r3, #4
   30c98:	681b      	ldr	r3, [r3, #0]
   30c9a:	2b00      	cmp	r3, #0
   30c9c:	d038      	beq.n	30d10 <deliverMessage+0x9c>
   30c9e:	68fa      	ldr	r2, [r7, #12]
   30ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30ca2:	3304      	adds	r3, #4
   30ca4:	00db      	lsls	r3, r3, #3
   30ca6:	18d3      	adds	r3, r2, r3
   30ca8:	3304      	adds	r3, #4
   30caa:	681a      	ldr	r2, [r3, #0]
   30cac:	68bb      	ldr	r3, [r7, #8]
   30cae:	0011      	movs	r1, r2
   30cb0:	0018      	movs	r0, r3
   30cb2:	4b28      	ldr	r3, [pc, #160]	; (30d54 <deliverMessage+0xe0>)
   30cb4:	4798      	blx	r3
   30cb6:	1e03      	subs	r3, r0, #0
   30cb8:	d10d      	bne.n	30cd6 <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   30cba:	68fa      	ldr	r2, [r7, #12]
   30cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30cbe:	3304      	adds	r3, #4
   30cc0:	00db      	lsls	r3, r3, #3
   30cc2:	18d3      	adds	r3, r2, r3
   30cc4:	3304      	adds	r3, #4
   30cc6:	681b      	ldr	r3, [r3, #0]
   30cc8:	68ba      	ldr	r2, [r7, #8]
   30cca:	0011      	movs	r1, r2
   30ccc:	0018      	movs	r0, r3
   30cce:	4b22      	ldr	r3, [pc, #136]	; (30d58 <deliverMessage+0xe4>)
   30cd0:	4798      	blx	r3
   30cd2:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   30cd4:	d01c      	beq.n	30d10 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   30cd6:	68fa      	ldr	r2, [r7, #12]
   30cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30cda:	3304      	adds	r3, #4
   30cdc:	00db      	lsls	r3, r3, #3
   30cde:	18d3      	adds	r3, r2, r3
   30ce0:	3308      	adds	r3, #8
   30ce2:	681b      	ldr	r3, [r3, #0]
   30ce4:	2b00      	cmp	r3, #0
   30ce6:	d013      	beq.n	30d10 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   30ce8:	687a      	ldr	r2, [r7, #4]
   30cea:	68b9      	ldr	r1, [r7, #8]
   30cec:	2318      	movs	r3, #24
   30cee:	18fb      	adds	r3, r7, r3
   30cf0:	0018      	movs	r0, r3
   30cf2:	4b1a      	ldr	r3, [pc, #104]	; (30d5c <deliverMessage+0xe8>)
   30cf4:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   30cf6:	68fa      	ldr	r2, [r7, #12]
   30cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30cfa:	3304      	adds	r3, #4
   30cfc:	00db      	lsls	r3, r3, #3
   30cfe:	18d3      	adds	r3, r2, r3
   30d00:	3308      	adds	r3, #8
   30d02:	681b      	ldr	r3, [r3, #0]
   30d04:	2218      	movs	r2, #24
   30d06:	18ba      	adds	r2, r7, r2
   30d08:	0010      	movs	r0, r2
   30d0a:	4798      	blx	r3
                rc = SUCCESS;
   30d0c:	2300      	movs	r3, #0
   30d0e:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   30d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30d12:	3301      	adds	r3, #1
   30d14:	627b      	str	r3, [r7, #36]	; 0x24
   30d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30d18:	2b04      	cmp	r3, #4
   30d1a:	ddb7      	ble.n	30c8c <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   30d1c:	6a3b      	ldr	r3, [r7, #32]
   30d1e:	3301      	adds	r3, #1
   30d20:	d112      	bne.n	30d48 <deliverMessage+0xd4>
   30d22:	68fb      	ldr	r3, [r7, #12]
   30d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30d26:	2b00      	cmp	r3, #0
   30d28:	d00e      	beq.n	30d48 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   30d2a:	687a      	ldr	r2, [r7, #4]
   30d2c:	68b9      	ldr	r1, [r7, #8]
   30d2e:	2310      	movs	r3, #16
   30d30:	18fb      	adds	r3, r7, r3
   30d32:	0018      	movs	r0, r3
   30d34:	4b09      	ldr	r3, [pc, #36]	; (30d5c <deliverMessage+0xe8>)
   30d36:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   30d38:	68fb      	ldr	r3, [r7, #12]
   30d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30d3c:	2210      	movs	r2, #16
   30d3e:	18ba      	adds	r2, r7, r2
   30d40:	0010      	movs	r0, r2
   30d42:	4798      	blx	r3
        rc = SUCCESS;
   30d44:	2300      	movs	r3, #0
   30d46:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   30d48:	6a3b      	ldr	r3, [r7, #32]
}
   30d4a:	0018      	movs	r0, r3
   30d4c:	46bd      	mov	sp, r7
   30d4e:	b00a      	add	sp, #40	; 0x28
   30d50:	bd80      	pop	{r7, pc}
   30d52:	46c0      	nop			; (mov r8, r8)
   30d54:	00032949 	.word	0x00032949
   30d58:	00030ba5 	.word	0x00030ba5
   30d5c:	000308ad 	.word	0x000308ad

00030d60 <keepalive>:


int keepalive(MQTTClient* c)
{
   30d60:	b580      	push	{r7, lr}
   30d62:	b088      	sub	sp, #32
   30d64:	af00      	add	r7, sp, #0
   30d66:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   30d68:	2301      	movs	r3, #1
   30d6a:	425b      	negs	r3, r3
   30d6c:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   30d6e:	687b      	ldr	r3, [r7, #4]
   30d70:	699b      	ldr	r3, [r3, #24]
   30d72:	2b00      	cmp	r3, #0
   30d74:	d102      	bne.n	30d7c <keepalive+0x1c>
    {
        rc = SUCCESS;
   30d76:	2300      	movs	r3, #0
   30d78:	61fb      	str	r3, [r7, #28]
        goto exit;
   30d7a:	e033      	b.n	30de4 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   30d7c:	687b      	ldr	r3, [r7, #4]
   30d7e:	3354      	adds	r3, #84	; 0x54
   30d80:	0018      	movs	r0, r3
   30d82:	4b1b      	ldr	r3, [pc, #108]	; (30df0 <keepalive+0x90>)
   30d84:	4798      	blx	r3
   30d86:	1e03      	subs	r3, r0, #0
   30d88:	d02c      	beq.n	30de4 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   30d8a:	687b      	ldr	r3, [r7, #4]
   30d8c:	7f1b      	ldrb	r3, [r3, #28]
   30d8e:	2b00      	cmp	r3, #0
   30d90:	d128      	bne.n	30de4 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   30d92:	230c      	movs	r3, #12
   30d94:	18fb      	adds	r3, r7, r3
   30d96:	0018      	movs	r0, r3
   30d98:	4b16      	ldr	r3, [pc, #88]	; (30df4 <keepalive+0x94>)
   30d9a:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   30d9c:	23fa      	movs	r3, #250	; 0xfa
   30d9e:	009a      	lsls	r2, r3, #2
   30da0:	230c      	movs	r3, #12
   30da2:	18fb      	adds	r3, r7, r3
   30da4:	0011      	movs	r1, r2
   30da6:	0018      	movs	r0, r3
   30da8:	4b13      	ldr	r3, [pc, #76]	; (30df8 <keepalive+0x98>)
   30daa:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   30dac:	687b      	ldr	r3, [r7, #4]
   30dae:	691a      	ldr	r2, [r3, #16]
   30db0:	687b      	ldr	r3, [r7, #4]
   30db2:	689b      	ldr	r3, [r3, #8]
   30db4:	0019      	movs	r1, r3
   30db6:	0010      	movs	r0, r2
   30db8:	4b10      	ldr	r3, [pc, #64]	; (30dfc <keepalive+0x9c>)
   30dba:	4798      	blx	r3
   30dbc:	0003      	movs	r3, r0
   30dbe:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   30dc0:	69bb      	ldr	r3, [r7, #24]
   30dc2:	2b00      	cmp	r3, #0
   30dc4:	dd0e      	ble.n	30de4 <keepalive+0x84>
   30dc6:	230c      	movs	r3, #12
   30dc8:	18fa      	adds	r2, r7, r3
   30dca:	69b9      	ldr	r1, [r7, #24]
   30dcc:	687b      	ldr	r3, [r7, #4]
   30dce:	0018      	movs	r0, r3
   30dd0:	4b0b      	ldr	r3, [pc, #44]	; (30e00 <keepalive+0xa0>)
   30dd2:	4798      	blx	r3
   30dd4:	0003      	movs	r3, r0
   30dd6:	61fb      	str	r3, [r7, #28]
   30dd8:	69fb      	ldr	r3, [r7, #28]
   30dda:	2b00      	cmp	r3, #0
   30ddc:	d102      	bne.n	30de4 <keepalive+0x84>
                c->ping_outstanding = 1;
   30dde:	687b      	ldr	r3, [r7, #4]
   30de0:	2201      	movs	r2, #1
   30de2:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   30de4:	69fb      	ldr	r3, [r7, #28]
}
   30de6:	0018      	movs	r0, r3
   30de8:	46bd      	mov	sp, r7
   30dea:	b008      	add	sp, #32
   30dec:	bd80      	pop	{r7, pc}
   30dee:	46c0      	nop			; (mov r8, r8)
   30df0:	000316e1 	.word	0x000316e1
   30df4:	00031785 	.word	0x00031785
   30df8:	0003170d 	.word	0x0003170d
   30dfc:	00032359 	.word	0x00032359
   30e00:	000308fd 	.word	0x000308fd

00030e04 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   30e04:	b5f0      	push	{r4, r5, r6, r7, lr}
   30e06:	b095      	sub	sp, #84	; 0x54
   30e08:	af06      	add	r7, sp, #24
   30e0a:	6078      	str	r0, [r7, #4]
   30e0c:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   30e0e:	683a      	ldr	r2, [r7, #0]
   30e10:	687b      	ldr	r3, [r7, #4]
   30e12:	0011      	movs	r1, r2
   30e14:	0018      	movs	r0, r3
   30e16:	4b70      	ldr	r3, [pc, #448]	; (30fd8 <cycle+0x1d4>)
   30e18:	4798      	blx	r3
   30e1a:	0002      	movs	r2, r0
   30e1c:	232e      	movs	r3, #46	; 0x2e
   30e1e:	18fb      	adds	r3, r7, r3
   30e20:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   30e22:	2300      	movs	r3, #0
   30e24:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   30e26:	2300      	movs	r3, #0
   30e28:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   30e2a:	232e      	movs	r3, #46	; 0x2e
   30e2c:	18fb      	adds	r3, r7, r3
   30e2e:	881b      	ldrh	r3, [r3, #0]
   30e30:	2b0d      	cmp	r3, #13
   30e32:	d900      	bls.n	30e36 <cycle+0x32>
   30e34:	e0bd      	b.n	30fb2 <cycle+0x1ae>
   30e36:	009a      	lsls	r2, r3, #2
   30e38:	4b68      	ldr	r3, [pc, #416]	; (30fdc <cycle+0x1d8>)
   30e3a:	18d3      	adds	r3, r2, r3
   30e3c:	681b      	ldr	r3, [r3, #0]
   30e3e:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   30e40:	687b      	ldr	r3, [r7, #4]
   30e42:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   30e44:	687b      	ldr	r3, [r7, #4]
   30e46:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   30e48:	001e      	movs	r6, r3
   30e4a:	2310      	movs	r3, #16
   30e4c:	18fb      	adds	r3, r7, r3
   30e4e:	1d1d      	adds	r5, r3, #4
   30e50:	2310      	movs	r3, #16
   30e52:	18fb      	adds	r3, r7, r3
   30e54:	1c5c      	adds	r4, r3, #1
   30e56:	230c      	movs	r3, #12
   30e58:	18f9      	adds	r1, r7, r3
   30e5a:	2310      	movs	r3, #16
   30e5c:	18fb      	adds	r3, r7, r3
   30e5e:	1c98      	adds	r0, r3, #2
   30e60:	9604      	str	r6, [sp, #16]
   30e62:	9203      	str	r2, [sp, #12]
   30e64:	2310      	movs	r3, #16
   30e66:	18fb      	adds	r3, r7, r3
   30e68:	330c      	adds	r3, #12
   30e6a:	9302      	str	r3, [sp, #8]
   30e6c:	2310      	movs	r3, #16
   30e6e:	18fb      	adds	r3, r7, r3
   30e70:	3308      	adds	r3, #8
   30e72:	9301      	str	r3, [sp, #4]
   30e74:	2320      	movs	r3, #32
   30e76:	18fb      	adds	r3, r7, r3
   30e78:	9300      	str	r3, [sp, #0]
   30e7a:	002b      	movs	r3, r5
   30e7c:	0022      	movs	r2, r4
   30e7e:	4c58      	ldr	r4, [pc, #352]	; (30fe0 <cycle+0x1dc>)
   30e80:	47a0      	blx	r4
   30e82:	0003      	movs	r3, r0
   30e84:	2b01      	cmp	r3, #1
   30e86:	d000      	beq.n	30e8a <cycle+0x86>
   30e88:	e098      	b.n	30fbc <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   30e8a:	68fb      	ldr	r3, [r7, #12]
   30e8c:	b2da      	uxtb	r2, r3
   30e8e:	2310      	movs	r3, #16
   30e90:	18fb      	adds	r3, r7, r3
   30e92:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   30e94:	2310      	movs	r3, #16
   30e96:	18fa      	adds	r2, r7, r3
   30e98:	2320      	movs	r3, #32
   30e9a:	18f9      	adds	r1, r7, r3
   30e9c:	687b      	ldr	r3, [r7, #4]
   30e9e:	0018      	movs	r0, r3
   30ea0:	4b50      	ldr	r3, [pc, #320]	; (30fe4 <cycle+0x1e0>)
   30ea2:	4798      	blx	r3
            if (msg.qos != QOS0)
   30ea4:	2310      	movs	r3, #16
   30ea6:	18fb      	adds	r3, r7, r3
   30ea8:	781b      	ldrb	r3, [r3, #0]
   30eaa:	2b00      	cmp	r3, #0
   30eac:	d100      	bne.n	30eb0 <cycle+0xac>
   30eae:	e07d      	b.n	30fac <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   30eb0:	2310      	movs	r3, #16
   30eb2:	18fb      	adds	r3, r7, r3
   30eb4:	781b      	ldrb	r3, [r3, #0]
   30eb6:	2b01      	cmp	r3, #1
   30eb8:	d10f      	bne.n	30eda <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   30eba:	687b      	ldr	r3, [r7, #4]
   30ebc:	6918      	ldr	r0, [r3, #16]
   30ebe:	687b      	ldr	r3, [r7, #4]
   30ec0:	689b      	ldr	r3, [r3, #8]
   30ec2:	0019      	movs	r1, r3
   30ec4:	2310      	movs	r3, #16
   30ec6:	18fb      	adds	r3, r7, r3
   30ec8:	889b      	ldrh	r3, [r3, #4]
   30eca:	9300      	str	r3, [sp, #0]
   30ecc:	2300      	movs	r3, #0
   30ece:	2204      	movs	r2, #4
   30ed0:	4c45      	ldr	r4, [pc, #276]	; (30fe8 <cycle+0x1e4>)
   30ed2:	47a0      	blx	r4
   30ed4:	0003      	movs	r3, r0
   30ed6:	637b      	str	r3, [r7, #52]	; 0x34
   30ed8:	e013      	b.n	30f02 <cycle+0xfe>
                else if (msg.qos == QOS2)
   30eda:	2310      	movs	r3, #16
   30edc:	18fb      	adds	r3, r7, r3
   30ede:	781b      	ldrb	r3, [r3, #0]
   30ee0:	2b02      	cmp	r3, #2
   30ee2:	d10e      	bne.n	30f02 <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   30ee4:	687b      	ldr	r3, [r7, #4]
   30ee6:	6918      	ldr	r0, [r3, #16]
   30ee8:	687b      	ldr	r3, [r7, #4]
   30eea:	689b      	ldr	r3, [r3, #8]
   30eec:	0019      	movs	r1, r3
   30eee:	2310      	movs	r3, #16
   30ef0:	18fb      	adds	r3, r7, r3
   30ef2:	889b      	ldrh	r3, [r3, #4]
   30ef4:	9300      	str	r3, [sp, #0]
   30ef6:	2300      	movs	r3, #0
   30ef8:	2205      	movs	r2, #5
   30efa:	4c3b      	ldr	r4, [pc, #236]	; (30fe8 <cycle+0x1e4>)
   30efc:	47a0      	blx	r4
   30efe:	0003      	movs	r3, r0
   30f00:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   30f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   30f04:	2b00      	cmp	r3, #0
   30f06:	dc03      	bgt.n	30f10 <cycle+0x10c>
                    rc = FAILURE;
   30f08:	2301      	movs	r3, #1
   30f0a:	425b      	negs	r3, r3
   30f0c:	633b      	str	r3, [r7, #48]	; 0x30
   30f0e:	e007      	b.n	30f20 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   30f10:	683a      	ldr	r2, [r7, #0]
   30f12:	6b79      	ldr	r1, [r7, #52]	; 0x34
   30f14:	687b      	ldr	r3, [r7, #4]
   30f16:	0018      	movs	r0, r3
   30f18:	4b34      	ldr	r3, [pc, #208]	; (30fec <cycle+0x1e8>)
   30f1a:	4798      	blx	r3
   30f1c:	0003      	movs	r3, r0
   30f1e:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   30f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30f22:	3301      	adds	r3, #1
   30f24:	d142      	bne.n	30fac <cycle+0x1a8>
                    goto exit; // there was a problem
   30f26:	46c0      	nop			; (mov r8, r8)
   30f28:	e049      	b.n	30fbe <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   30f2a:	687b      	ldr	r3, [r7, #4]
   30f2c:	695c      	ldr	r4, [r3, #20]
   30f2e:	687b      	ldr	r3, [r7, #4]
   30f30:	68db      	ldr	r3, [r3, #12]
   30f32:	220a      	movs	r2, #10
   30f34:	18ba      	adds	r2, r7, r2
   30f36:	2109      	movs	r1, #9
   30f38:	1879      	adds	r1, r7, r1
   30f3a:	2008      	movs	r0, #8
   30f3c:	1838      	adds	r0, r7, r0
   30f3e:	9300      	str	r3, [sp, #0]
   30f40:	0023      	movs	r3, r4
   30f42:	4c2b      	ldr	r4, [pc, #172]	; (30ff0 <cycle+0x1ec>)
   30f44:	47a0      	blx	r4
   30f46:	0003      	movs	r3, r0
   30f48:	2b01      	cmp	r3, #1
   30f4a:	d003      	beq.n	30f54 <cycle+0x150>
                rc = FAILURE;
   30f4c:	2301      	movs	r3, #1
   30f4e:	425b      	negs	r3, r3
   30f50:	633b      	str	r3, [r7, #48]	; 0x30
   30f52:	e023      	b.n	30f9c <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   30f54:	687b      	ldr	r3, [r7, #4]
   30f56:	6918      	ldr	r0, [r3, #16]
   30f58:	687b      	ldr	r3, [r7, #4]
   30f5a:	689b      	ldr	r3, [r3, #8]
   30f5c:	0019      	movs	r1, r3
   30f5e:	230a      	movs	r3, #10
   30f60:	18fb      	adds	r3, r7, r3
   30f62:	881b      	ldrh	r3, [r3, #0]
   30f64:	9300      	str	r3, [sp, #0]
   30f66:	2300      	movs	r3, #0
   30f68:	2206      	movs	r2, #6
   30f6a:	4c1f      	ldr	r4, [pc, #124]	; (30fe8 <cycle+0x1e4>)
   30f6c:	47a0      	blx	r4
   30f6e:	0003      	movs	r3, r0
   30f70:	637b      	str	r3, [r7, #52]	; 0x34
   30f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   30f74:	2b00      	cmp	r3, #0
   30f76:	dc03      	bgt.n	30f80 <cycle+0x17c>
                rc = FAILURE;
   30f78:	2301      	movs	r3, #1
   30f7a:	425b      	negs	r3, r3
   30f7c:	633b      	str	r3, [r7, #48]	; 0x30
   30f7e:	e00d      	b.n	30f9c <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   30f80:	683a      	ldr	r2, [r7, #0]
   30f82:	6b79      	ldr	r1, [r7, #52]	; 0x34
   30f84:	687b      	ldr	r3, [r7, #4]
   30f86:	0018      	movs	r0, r3
   30f88:	4b18      	ldr	r3, [pc, #96]	; (30fec <cycle+0x1e8>)
   30f8a:	4798      	blx	r3
   30f8c:	0003      	movs	r3, r0
   30f8e:	633b      	str	r3, [r7, #48]	; 0x30
   30f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30f92:	2b00      	cmp	r3, #0
   30f94:	d002      	beq.n	30f9c <cycle+0x198>
                rc = FAILURE; // there was a problem
   30f96:	2301      	movs	r3, #1
   30f98:	425b      	negs	r3, r3
   30f9a:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   30f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30f9e:	3301      	adds	r3, #1
   30fa0:	d106      	bne.n	30fb0 <cycle+0x1ac>
                goto exit; // there was a problem
   30fa2:	e00c      	b.n	30fbe <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   30fa4:	687b      	ldr	r3, [r7, #4]
   30fa6:	2200      	movs	r2, #0
   30fa8:	771a      	strb	r2, [r3, #28]
            break;
   30faa:	e002      	b.n	30fb2 <cycle+0x1ae>
            break;
   30fac:	46c0      	nop			; (mov r8, r8)
   30fae:	e000      	b.n	30fb2 <cycle+0x1ae>
            break;
   30fb0:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   30fb2:	687b      	ldr	r3, [r7, #4]
   30fb4:	0018      	movs	r0, r3
   30fb6:	4b0f      	ldr	r3, [pc, #60]	; (30ff4 <cycle+0x1f0>)
   30fb8:	4798      	blx	r3
   30fba:	e000      	b.n	30fbe <cycle+0x1ba>
                goto exit;
   30fbc:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   30fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30fc0:	2b00      	cmp	r3, #0
   30fc2:	d103      	bne.n	30fcc <cycle+0x1c8>
        rc = packet_type;
   30fc4:	232e      	movs	r3, #46	; 0x2e
   30fc6:	18fb      	adds	r3, r7, r3
   30fc8:	881b      	ldrh	r3, [r3, #0]
   30fca:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   30fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   30fce:	0018      	movs	r0, r3
   30fd0:	46bd      	mov	sp, r7
   30fd2:	b00f      	add	sp, #60	; 0x3c
   30fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30fd6:	46c0      	nop			; (mov r8, r8)
   30fd8:	00030ab9 	.word	0x00030ab9
   30fdc:	0003ce20 	.word	0x0003ce20
   30fe0:	0003237d 	.word	0x0003237d
   30fe4:	00030c75 	.word	0x00030c75
   30fe8:	00032b75 	.word	0x00032b75
   30fec:	000308fd 	.word	0x000308fd
   30ff0:	00032481 	.word	0x00032481
   30ff4:	00030d61 	.word	0x00030d61

00030ff8 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   30ff8:	b580      	push	{r7, lr}
   30ffa:	b086      	sub	sp, #24
   30ffc:	af00      	add	r7, sp, #0
   30ffe:	6078      	str	r0, [r7, #4]
   31000:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   31002:	2300      	movs	r3, #0
   31004:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   31006:	2308      	movs	r3, #8
   31008:	18fb      	adds	r3, r7, r3
   3100a:	0018      	movs	r0, r3
   3100c:	4b11      	ldr	r3, [pc, #68]	; (31054 <MQTTYield+0x5c>)
   3100e:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   31010:	683a      	ldr	r2, [r7, #0]
   31012:	2308      	movs	r3, #8
   31014:	18fb      	adds	r3, r7, r3
   31016:	0011      	movs	r1, r2
   31018:	0018      	movs	r0, r3
   3101a:	4b0f      	ldr	r3, [pc, #60]	; (31058 <MQTTYield+0x60>)
   3101c:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   3101e:	2308      	movs	r3, #8
   31020:	18fa      	adds	r2, r7, r3
   31022:	687b      	ldr	r3, [r7, #4]
   31024:	0011      	movs	r1, r2
   31026:	0018      	movs	r0, r3
   31028:	4b0c      	ldr	r3, [pc, #48]	; (3105c <MQTTYield+0x64>)
   3102a:	4798      	blx	r3
   3102c:	0003      	movs	r3, r0
   3102e:	3301      	adds	r3, #1
   31030:	d103      	bne.n	3103a <MQTTYield+0x42>
        {
            rc = FAILURE;
   31032:	2301      	movs	r3, #1
   31034:	425b      	negs	r3, r3
   31036:	617b      	str	r3, [r7, #20]
            break;
   31038:	e006      	b.n	31048 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   3103a:	2308      	movs	r3, #8
   3103c:	18fb      	adds	r3, r7, r3
   3103e:	0018      	movs	r0, r3
   31040:	4b07      	ldr	r3, [pc, #28]	; (31060 <MQTTYield+0x68>)
   31042:	4798      	blx	r3
   31044:	1e03      	subs	r3, r0, #0
   31046:	d0ea      	beq.n	3101e <MQTTYield+0x26>
        
    return rc;
   31048:	697b      	ldr	r3, [r7, #20]
}
   3104a:	0018      	movs	r0, r3
   3104c:	46bd      	mov	sp, r7
   3104e:	b006      	add	sp, #24
   31050:	bd80      	pop	{r7, pc}
   31052:	46c0      	nop			; (mov r8, r8)
   31054:	00031785 	.word	0x00031785
   31058:	0003170d 	.word	0x0003170d
   3105c:	00030e05 	.word	0x00030e05
   31060:	000316e1 	.word	0x000316e1

00031064 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   31064:	b580      	push	{r7, lr}
   31066:	b086      	sub	sp, #24
   31068:	af00      	add	r7, sp, #0
   3106a:	60f8      	str	r0, [r7, #12]
   3106c:	60b9      	str	r1, [r7, #8]
   3106e:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   31070:	2301      	movs	r3, #1
   31072:	425b      	negs	r3, r3
   31074:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   31076:	687b      	ldr	r3, [r7, #4]
   31078:	0018      	movs	r0, r3
   3107a:	4b0b      	ldr	r3, [pc, #44]	; (310a8 <waitfor+0x44>)
   3107c:	4798      	blx	r3
   3107e:	1e03      	subs	r3, r0, #0
   31080:	d10c      	bne.n	3109c <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   31082:	687a      	ldr	r2, [r7, #4]
   31084:	68fb      	ldr	r3, [r7, #12]
   31086:	0011      	movs	r1, r2
   31088:	0018      	movs	r0, r3
   3108a:	4b08      	ldr	r3, [pc, #32]	; (310ac <waitfor+0x48>)
   3108c:	4798      	blx	r3
   3108e:	0003      	movs	r3, r0
   31090:	617b      	str	r3, [r7, #20]
   31092:	697a      	ldr	r2, [r7, #20]
   31094:	68bb      	ldr	r3, [r7, #8]
   31096:	429a      	cmp	r2, r3
   31098:	d1ed      	bne.n	31076 <waitfor+0x12>
   3109a:	e000      	b.n	3109e <waitfor+0x3a>
            break; // we timed out
   3109c:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   3109e:	697b      	ldr	r3, [r7, #20]
}
   310a0:	0018      	movs	r0, r3
   310a2:	46bd      	mov	sp, r7
   310a4:	b006      	add	sp, #24
   310a6:	bd80      	pop	{r7, pc}
   310a8:	000316e1 	.word	0x000316e1
   310ac:	00030e05 	.word	0x00030e05

000310b0 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   310b0:	b590      	push	{r4, r7, lr}
   310b2:	b09f      	sub	sp, #124	; 0x7c
   310b4:	af00      	add	r7, sp, #0
   310b6:	6078      	str	r0, [r7, #4]
   310b8:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   310ba:	2301      	movs	r3, #1
   310bc:	425b      	negs	r3, r3
   310be:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   310c0:	230c      	movs	r3, #12
   310c2:	18fa      	adds	r2, r7, r3
   310c4:	4b41      	ldr	r3, [pc, #260]	; (311cc <MQTTConnect+0x11c>)
   310c6:	0010      	movs	r0, r2
   310c8:	0019      	movs	r1, r3
   310ca:	2358      	movs	r3, #88	; 0x58
   310cc:	001a      	movs	r2, r3
   310ce:	4b40      	ldr	r3, [pc, #256]	; (311d0 <MQTTConnect+0x120>)
   310d0:	4798      	blx	r3
    int len = 0;
   310d2:	2300      	movs	r3, #0
   310d4:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   310d6:	687b      	ldr	r3, [r7, #4]
   310d8:	6a1b      	ldr	r3, [r3, #32]
   310da:	2b00      	cmp	r3, #0
   310dc:	d166      	bne.n	311ac <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   310de:	2364      	movs	r3, #100	; 0x64
   310e0:	18fb      	adds	r3, r7, r3
   310e2:	0018      	movs	r0, r3
   310e4:	4b3b      	ldr	r3, [pc, #236]	; (311d4 <MQTTConnect+0x124>)
   310e6:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   310e8:	687b      	ldr	r3, [r7, #4]
   310ea:	685a      	ldr	r2, [r3, #4]
   310ec:	2364      	movs	r3, #100	; 0x64
   310ee:	18fb      	adds	r3, r7, r3
   310f0:	0011      	movs	r1, r2
   310f2:	0018      	movs	r0, r3
   310f4:	4b38      	ldr	r3, [pc, #224]	; (311d8 <MQTTConnect+0x128>)
   310f6:	4798      	blx	r3

    if (options == 0)
   310f8:	683b      	ldr	r3, [r7, #0]
   310fa:	2b00      	cmp	r3, #0
   310fc:	d102      	bne.n	31104 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   310fe:	230c      	movs	r3, #12
   31100:	18fb      	adds	r3, r7, r3
   31102:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   31104:	683b      	ldr	r3, [r7, #0]
   31106:	8b1b      	ldrh	r3, [r3, #24]
   31108:	001a      	movs	r2, r3
   3110a:	687b      	ldr	r3, [r7, #4]
   3110c:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   3110e:	687b      	ldr	r3, [r7, #4]
   31110:	3354      	adds	r3, #84	; 0x54
   31112:	001a      	movs	r2, r3
   31114:	687b      	ldr	r3, [r7, #4]
   31116:	699b      	ldr	r3, [r3, #24]
   31118:	0019      	movs	r1, r3
   3111a:	0010      	movs	r0, r2
   3111c:	4b2f      	ldr	r3, [pc, #188]	; (311dc <MQTTConnect+0x12c>)
   3111e:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   31120:	687b      	ldr	r3, [r7, #4]
   31122:	6918      	ldr	r0, [r3, #16]
   31124:	687b      	ldr	r3, [r7, #4]
   31126:	689b      	ldr	r3, [r3, #8]
   31128:	0019      	movs	r1, r3
   3112a:	683b      	ldr	r3, [r7, #0]
   3112c:	001a      	movs	r2, r3
   3112e:	4b2c      	ldr	r3, [pc, #176]	; (311e0 <MQTTConnect+0x130>)
   31130:	4798      	blx	r3
   31132:	0003      	movs	r3, r0
   31134:	673b      	str	r3, [r7, #112]	; 0x70
   31136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31138:	2b00      	cmp	r3, #0
   3113a:	dd39      	ble.n	311b0 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   3113c:	2364      	movs	r3, #100	; 0x64
   3113e:	18fa      	adds	r2, r7, r3
   31140:	6f39      	ldr	r1, [r7, #112]	; 0x70
   31142:	687b      	ldr	r3, [r7, #4]
   31144:	0018      	movs	r0, r3
   31146:	4b27      	ldr	r3, [pc, #156]	; (311e4 <MQTTConnect+0x134>)
   31148:	4798      	blx	r3
   3114a:	0003      	movs	r3, r0
   3114c:	677b      	str	r3, [r7, #116]	; 0x74
   3114e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31150:	2b00      	cmp	r3, #0
   31152:	d12f      	bne.n	311b4 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   31154:	2364      	movs	r3, #100	; 0x64
   31156:	18fa      	adds	r2, r7, r3
   31158:	687b      	ldr	r3, [r7, #4]
   3115a:	2102      	movs	r1, #2
   3115c:	0018      	movs	r0, r3
   3115e:	4b22      	ldr	r3, [pc, #136]	; (311e8 <MQTTConnect+0x138>)
   31160:	4798      	blx	r3
   31162:	0003      	movs	r3, r0
   31164:	2b02      	cmp	r3, #2
   31166:	d11d      	bne.n	311a4 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   31168:	230b      	movs	r3, #11
   3116a:	18fb      	adds	r3, r7, r3
   3116c:	22ff      	movs	r2, #255	; 0xff
   3116e:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   31170:	230a      	movs	r3, #10
   31172:	18fb      	adds	r3, r7, r3
   31174:	2200      	movs	r2, #0
   31176:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   31178:	687b      	ldr	r3, [r7, #4]
   3117a:	695a      	ldr	r2, [r3, #20]
   3117c:	687b      	ldr	r3, [r7, #4]
   3117e:	68db      	ldr	r3, [r3, #12]
   31180:	210b      	movs	r1, #11
   31182:	1879      	adds	r1, r7, r1
   31184:	200a      	movs	r0, #10
   31186:	1838      	adds	r0, r7, r0
   31188:	4c18      	ldr	r4, [pc, #96]	; (311ec <MQTTConnect+0x13c>)
   3118a:	47a0      	blx	r4
   3118c:	0003      	movs	r3, r0
   3118e:	2b01      	cmp	r3, #1
   31190:	d104      	bne.n	3119c <MQTTConnect+0xec>
            rc = connack_rc;
   31192:	230b      	movs	r3, #11
   31194:	18fb      	adds	r3, r7, r3
   31196:	781b      	ldrb	r3, [r3, #0]
   31198:	677b      	str	r3, [r7, #116]	; 0x74
   3119a:	e00c      	b.n	311b6 <MQTTConnect+0x106>
        else
            rc = FAILURE;
   3119c:	2301      	movs	r3, #1
   3119e:	425b      	negs	r3, r3
   311a0:	677b      	str	r3, [r7, #116]	; 0x74
   311a2:	e008      	b.n	311b6 <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   311a4:	2301      	movs	r3, #1
   311a6:	425b      	negs	r3, r3
   311a8:	677b      	str	r3, [r7, #116]	; 0x74
   311aa:	e004      	b.n	311b6 <MQTTConnect+0x106>
		goto exit;
   311ac:	46c0      	nop			; (mov r8, r8)
   311ae:	e002      	b.n	311b6 <MQTTConnect+0x106>
        goto exit;
   311b0:	46c0      	nop			; (mov r8, r8)
   311b2:	e000      	b.n	311b6 <MQTTConnect+0x106>
        goto exit; // there was a problem
   311b4:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   311b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   311b8:	2b00      	cmp	r3, #0
   311ba:	d102      	bne.n	311c2 <MQTTConnect+0x112>
        c->isconnected = 1;
   311bc:	687b      	ldr	r3, [r7, #4]
   311be:	2201      	movs	r2, #1
   311c0:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   311c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   311c4:	0018      	movs	r0, r3
   311c6:	46bd      	mov	sp, r7
   311c8:	b01f      	add	sp, #124	; 0x7c
   311ca:	bd90      	pop	{r4, r7, pc}
   311cc:	0003ce58 	.word	0x0003ce58
   311d0:	00037915 	.word	0x00037915
   311d4:	00031785 	.word	0x00031785
   311d8:	0003170d 	.word	0x0003170d
   311dc:	00031735 	.word	0x00031735
   311e0:	00031f61 	.word	0x00031f61
   311e4:	000308fd 	.word	0x000308fd
   311e8:	00031065 	.word	0x00031065
   311ec:	000321dd 	.word	0x000321dd

000311f0 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   311f0:	b5b0      	push	{r4, r5, r7, lr}
   311f2:	b096      	sub	sp, #88	; 0x58
   311f4:	af04      	add	r7, sp, #16
   311f6:	60f8      	str	r0, [r7, #12]
   311f8:	60b9      	str	r1, [r7, #8]
   311fa:	603b      	str	r3, [r7, #0]
   311fc:	1dfb      	adds	r3, r7, #7
   311fe:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   31200:	2301      	movs	r3, #1
   31202:	425b      	negs	r3, r3
   31204:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   31206:	2300      	movs	r3, #0
   31208:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   3120a:	2324      	movs	r3, #36	; 0x24
   3120c:	18fb      	adds	r3, r7, r3
   3120e:	2200      	movs	r2, #0
   31210:	601a      	str	r2, [r3, #0]
   31212:	2324      	movs	r3, #36	; 0x24
   31214:	18fb      	adds	r3, r7, r3
   31216:	2200      	movs	r2, #0
   31218:	605a      	str	r2, [r3, #4]
   3121a:	2324      	movs	r3, #36	; 0x24
   3121c:	18fb      	adds	r3, r7, r3
   3121e:	2200      	movs	r2, #0
   31220:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   31222:	1dfb      	adds	r3, r7, #7
   31224:	781b      	ldrb	r3, [r3, #0]
   31226:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   31228:	2324      	movs	r3, #36	; 0x24
   3122a:	18fb      	adds	r3, r7, r3
   3122c:	68ba      	ldr	r2, [r7, #8]
   3122e:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   31230:	68fb      	ldr	r3, [r7, #12]
   31232:	6a1b      	ldr	r3, [r3, #32]
   31234:	2b00      	cmp	r3, #0
   31236:	d100      	bne.n	3123a <MQTTSubscribe+0x4a>
   31238:	e088      	b.n	3134c <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   3123a:	2330      	movs	r3, #48	; 0x30
   3123c:	18fb      	adds	r3, r7, r3
   3123e:	0018      	movs	r0, r3
   31240:	4b47      	ldr	r3, [pc, #284]	; (31360 <MQTTSubscribe+0x170>)
   31242:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   31244:	68fb      	ldr	r3, [r7, #12]
   31246:	685a      	ldr	r2, [r3, #4]
   31248:	2330      	movs	r3, #48	; 0x30
   3124a:	18fb      	adds	r3, r7, r3
   3124c:	0011      	movs	r1, r2
   3124e:	0018      	movs	r0, r3
   31250:	4b44      	ldr	r3, [pc, #272]	; (31364 <MQTTSubscribe+0x174>)
   31252:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   31254:	68fb      	ldr	r3, [r7, #12]
   31256:	691c      	ldr	r4, [r3, #16]
   31258:	68fb      	ldr	r3, [r7, #12]
   3125a:	689b      	ldr	r3, [r3, #8]
   3125c:	001d      	movs	r5, r3
   3125e:	68fb      	ldr	r3, [r7, #12]
   31260:	0018      	movs	r0, r3
   31262:	4b41      	ldr	r3, [pc, #260]	; (31368 <MQTTSubscribe+0x178>)
   31264:	4798      	blx	r3
   31266:	0003      	movs	r3, r0
   31268:	b29a      	uxth	r2, r3
   3126a:	2320      	movs	r3, #32
   3126c:	18fb      	adds	r3, r7, r3
   3126e:	9302      	str	r3, [sp, #8]
   31270:	2324      	movs	r3, #36	; 0x24
   31272:	18fb      	adds	r3, r7, r3
   31274:	9301      	str	r3, [sp, #4]
   31276:	2301      	movs	r3, #1
   31278:	9300      	str	r3, [sp, #0]
   3127a:	0013      	movs	r3, r2
   3127c:	2200      	movs	r2, #0
   3127e:	0029      	movs	r1, r5
   31280:	0020      	movs	r0, r4
   31282:	4c3a      	ldr	r4, [pc, #232]	; (3136c <MQTTSubscribe+0x17c>)
   31284:	47a0      	blx	r4
   31286:	0003      	movs	r3, r0
   31288:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   3128a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   3128c:	2b00      	cmp	r3, #0
   3128e:	dd5f      	ble.n	31350 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   31290:	2330      	movs	r3, #48	; 0x30
   31292:	18fa      	adds	r2, r7, r3
   31294:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   31296:	68fb      	ldr	r3, [r7, #12]
   31298:	0018      	movs	r0, r3
   3129a:	4b35      	ldr	r3, [pc, #212]	; (31370 <MQTTSubscribe+0x180>)
   3129c:	4798      	blx	r3
   3129e:	0003      	movs	r3, r0
   312a0:	647b      	str	r3, [r7, #68]	; 0x44
   312a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   312a4:	2b00      	cmp	r3, #0
   312a6:	d155      	bne.n	31354 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   312a8:	2330      	movs	r3, #48	; 0x30
   312aa:	18fa      	adds	r2, r7, r3
   312ac:	68fb      	ldr	r3, [r7, #12]
   312ae:	2109      	movs	r1, #9
   312b0:	0018      	movs	r0, r3
   312b2:	4b30      	ldr	r3, [pc, #192]	; (31374 <MQTTSubscribe+0x184>)
   312b4:	4798      	blx	r3
   312b6:	0003      	movs	r3, r0
   312b8:	2b09      	cmp	r3, #9
   312ba:	d143      	bne.n	31344 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   312bc:	2300      	movs	r3, #0
   312be:	61fb      	str	r3, [r7, #28]
   312c0:	2301      	movs	r3, #1
   312c2:	425b      	negs	r3, r3
   312c4:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   312c6:	68fb      	ldr	r3, [r7, #12]
   312c8:	695a      	ldr	r2, [r3, #20]
   312ca:	68fb      	ldr	r3, [r7, #12]
   312cc:	68db      	ldr	r3, [r3, #12]
   312ce:	001c      	movs	r4, r3
   312d0:	2318      	movs	r3, #24
   312d2:	18fb      	adds	r3, r7, r3
   312d4:	211c      	movs	r1, #28
   312d6:	1879      	adds	r1, r7, r1
   312d8:	2016      	movs	r0, #22
   312da:	1838      	adds	r0, r7, r0
   312dc:	9401      	str	r4, [sp, #4]
   312de:	9200      	str	r2, [sp, #0]
   312e0:	000a      	movs	r2, r1
   312e2:	2101      	movs	r1, #1
   312e4:	4c24      	ldr	r4, [pc, #144]	; (31378 <MQTTSubscribe+0x188>)
   312e6:	47a0      	blx	r4
   312e8:	0003      	movs	r3, r0
   312ea:	2b01      	cmp	r3, #1
   312ec:	d101      	bne.n	312f2 <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   312ee:	69bb      	ldr	r3, [r7, #24]
   312f0:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   312f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   312f4:	2b80      	cmp	r3, #128	; 0x80
   312f6:	d02e      	beq.n	31356 <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   312f8:	2300      	movs	r3, #0
   312fa:	643b      	str	r3, [r7, #64]	; 0x40
   312fc:	e01e      	b.n	3133c <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   312fe:	68fa      	ldr	r2, [r7, #12]
   31300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   31302:	3304      	adds	r3, #4
   31304:	00db      	lsls	r3, r3, #3
   31306:	18d3      	adds	r3, r2, r3
   31308:	3304      	adds	r3, #4
   3130a:	681b      	ldr	r3, [r3, #0]
   3130c:	2b00      	cmp	r3, #0
   3130e:	d112      	bne.n	31336 <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   31310:	68fa      	ldr	r2, [r7, #12]
   31312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   31314:	3304      	adds	r3, #4
   31316:	00db      	lsls	r3, r3, #3
   31318:	18d3      	adds	r3, r2, r3
   3131a:	3304      	adds	r3, #4
   3131c:	68ba      	ldr	r2, [r7, #8]
   3131e:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   31320:	68fa      	ldr	r2, [r7, #12]
   31322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   31324:	3304      	adds	r3, #4
   31326:	00db      	lsls	r3, r3, #3
   31328:	18d3      	adds	r3, r2, r3
   3132a:	3308      	adds	r3, #8
   3132c:	683a      	ldr	r2, [r7, #0]
   3132e:	601a      	str	r2, [r3, #0]
                    rc = 0;
   31330:	2300      	movs	r3, #0
   31332:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   31334:	e00f      	b.n	31356 <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   31336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   31338:	3301      	adds	r3, #1
   3133a:	643b      	str	r3, [r7, #64]	; 0x40
   3133c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   3133e:	2b04      	cmp	r3, #4
   31340:	dddd      	ble.n	312fe <MQTTSubscribe+0x10e>
   31342:	e008      	b.n	31356 <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   31344:	2301      	movs	r3, #1
   31346:	425b      	negs	r3, r3
   31348:	647b      	str	r3, [r7, #68]	; 0x44
   3134a:	e004      	b.n	31356 <MQTTSubscribe+0x166>
		goto exit;
   3134c:	46c0      	nop			; (mov r8, r8)
   3134e:	e002      	b.n	31356 <MQTTSubscribe+0x166>
        goto exit;
   31350:	46c0      	nop			; (mov r8, r8)
   31352:	e000      	b.n	31356 <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   31354:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   31356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   31358:	0018      	movs	r0, r3
   3135a:	46bd      	mov	sp, r7
   3135c:	b012      	add	sp, #72	; 0x48
   3135e:	bdb0      	pop	{r4, r5, r7, pc}
   31360:	00031785 	.word	0x00031785
   31364:	0003170d 	.word	0x0003170d
   31368:	000308cd 	.word	0x000308cd
   3136c:	00032cbd 	.word	0x00032cbd
   31370:	000308fd 	.word	0x000308fd
   31374:	00031065 	.word	0x00031065
   31378:	00032e0d 	.word	0x00032e0d

0003137c <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   3137c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3137e:	46ce      	mov	lr, r9
   31380:	4647      	mov	r7, r8
   31382:	b580      	push	{r7, lr}
   31384:	b097      	sub	sp, #92	; 0x5c
   31386:	af08      	add	r7, sp, #32
   31388:	60f8      	str	r0, [r7, #12]
   3138a:	60b9      	str	r1, [r7, #8]
   3138c:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   3138e:	2301      	movs	r3, #1
   31390:	425b      	negs	r3, r3
   31392:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   31394:	2318      	movs	r3, #24
   31396:	18fb      	adds	r3, r7, r3
   31398:	2200      	movs	r2, #0
   3139a:	601a      	str	r2, [r3, #0]
   3139c:	2318      	movs	r3, #24
   3139e:	18fb      	adds	r3, r7, r3
   313a0:	2200      	movs	r2, #0
   313a2:	605a      	str	r2, [r3, #4]
   313a4:	2318      	movs	r3, #24
   313a6:	18fb      	adds	r3, r7, r3
   313a8:	2200      	movs	r2, #0
   313aa:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   313ac:	2318      	movs	r3, #24
   313ae:	18fb      	adds	r3, r7, r3
   313b0:	68ba      	ldr	r2, [r7, #8]
   313b2:	601a      	str	r2, [r3, #0]
    int len = 0;
   313b4:	2300      	movs	r3, #0
   313b6:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   313b8:	68fb      	ldr	r3, [r7, #12]
   313ba:	6a1b      	ldr	r3, [r3, #32]
   313bc:	2b00      	cmp	r3, #0
   313be:	d100      	bne.n	313c2 <MQTTPublish+0x46>
   313c0:	e0a0      	b.n	31504 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   313c2:	2324      	movs	r3, #36	; 0x24
   313c4:	18fb      	adds	r3, r7, r3
   313c6:	0018      	movs	r0, r3
   313c8:	4b55      	ldr	r3, [pc, #340]	; (31520 <MQTTPublish+0x1a4>)
   313ca:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   313cc:	68fb      	ldr	r3, [r7, #12]
   313ce:	685a      	ldr	r2, [r3, #4]
   313d0:	2324      	movs	r3, #36	; 0x24
   313d2:	18fb      	adds	r3, r7, r3
   313d4:	0011      	movs	r1, r2
   313d6:	0018      	movs	r0, r3
   313d8:	4b52      	ldr	r3, [pc, #328]	; (31524 <MQTTPublish+0x1a8>)
   313da:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   313dc:	687b      	ldr	r3, [r7, #4]
   313de:	781b      	ldrb	r3, [r3, #0]
   313e0:	2b01      	cmp	r3, #1
   313e2:	d003      	beq.n	313ec <MQTTPublish+0x70>
   313e4:	687b      	ldr	r3, [r7, #4]
   313e6:	781b      	ldrb	r3, [r3, #0]
   313e8:	2b02      	cmp	r3, #2
   313ea:	d107      	bne.n	313fc <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   313ec:	68fb      	ldr	r3, [r7, #12]
   313ee:	0018      	movs	r0, r3
   313f0:	4b4d      	ldr	r3, [pc, #308]	; (31528 <MQTTPublish+0x1ac>)
   313f2:	4798      	blx	r3
   313f4:	0003      	movs	r3, r0
   313f6:	b29a      	uxth	r2, r3
   313f8:	687b      	ldr	r3, [r7, #4]
   313fa:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   313fc:	68fb      	ldr	r3, [r7, #12]
   313fe:	691b      	ldr	r3, [r3, #16]
   31400:	469c      	mov	ip, r3
   31402:	68fb      	ldr	r3, [r7, #12]
   31404:	689b      	ldr	r3, [r3, #8]
   31406:	001d      	movs	r5, r3
   31408:	687b      	ldr	r3, [r7, #4]
   3140a:	781b      	ldrb	r3, [r3, #0]
   3140c:	001e      	movs	r6, r3
   3140e:	687b      	ldr	r3, [r7, #4]
   31410:	785b      	ldrb	r3, [r3, #1]
   31412:	4698      	mov	r8, r3
   31414:	687b      	ldr	r3, [r7, #4]
   31416:	889b      	ldrh	r3, [r3, #4]
   31418:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   3141a:	687b      	ldr	r3, [r7, #4]
   3141c:	689a      	ldr	r2, [r3, #8]
   3141e:	687b      	ldr	r3, [r7, #4]
   31420:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   31422:	9306      	str	r3, [sp, #24]
   31424:	9205      	str	r2, [sp, #20]
   31426:	2318      	movs	r3, #24
   31428:	18fa      	adds	r2, r7, r3
   3142a:	2308      	movs	r3, #8
   3142c:	446b      	add	r3, sp
   3142e:	ca13      	ldmia	r2!, {r0, r1, r4}
   31430:	c313      	stmia	r3!, {r0, r1, r4}
   31432:	464b      	mov	r3, r9
   31434:	9301      	str	r3, [sp, #4]
   31436:	4643      	mov	r3, r8
   31438:	9300      	str	r3, [sp, #0]
   3143a:	0033      	movs	r3, r6
   3143c:	2200      	movs	r2, #0
   3143e:	0029      	movs	r1, r5
   31440:	4660      	mov	r0, ip
   31442:	4c3a      	ldr	r4, [pc, #232]	; (3152c <MQTTPublish+0x1b0>)
   31444:	47a0      	blx	r4
   31446:	0003      	movs	r3, r0
   31448:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   3144a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3144c:	2b00      	cmp	r3, #0
   3144e:	dd5b      	ble.n	31508 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   31450:	2324      	movs	r3, #36	; 0x24
   31452:	18fa      	adds	r2, r7, r3
   31454:	6b39      	ldr	r1, [r7, #48]	; 0x30
   31456:	68fb      	ldr	r3, [r7, #12]
   31458:	0018      	movs	r0, r3
   3145a:	4b35      	ldr	r3, [pc, #212]	; (31530 <MQTTPublish+0x1b4>)
   3145c:	4798      	blx	r3
   3145e:	0003      	movs	r3, r0
   31460:	637b      	str	r3, [r7, #52]	; 0x34
   31462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   31464:	2b00      	cmp	r3, #0
   31466:	d151      	bne.n	3150c <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   31468:	687b      	ldr	r3, [r7, #4]
   3146a:	781b      	ldrb	r3, [r3, #0]
   3146c:	2b01      	cmp	r3, #1
   3146e:	d122      	bne.n	314b6 <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   31470:	2324      	movs	r3, #36	; 0x24
   31472:	18fa      	adds	r2, r7, r3
   31474:	68fb      	ldr	r3, [r7, #12]
   31476:	2104      	movs	r1, #4
   31478:	0018      	movs	r0, r3
   3147a:	4b2e      	ldr	r3, [pc, #184]	; (31534 <MQTTPublish+0x1b8>)
   3147c:	4798      	blx	r3
   3147e:	0003      	movs	r3, r0
   31480:	2b04      	cmp	r3, #4
   31482:	d114      	bne.n	314ae <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   31484:	68fb      	ldr	r3, [r7, #12]
   31486:	695c      	ldr	r4, [r3, #20]
   31488:	68fb      	ldr	r3, [r7, #12]
   3148a:	68db      	ldr	r3, [r3, #12]
   3148c:	2216      	movs	r2, #22
   3148e:	18ba      	adds	r2, r7, r2
   31490:	2115      	movs	r1, #21
   31492:	1879      	adds	r1, r7, r1
   31494:	2014      	movs	r0, #20
   31496:	1838      	adds	r0, r7, r0
   31498:	9300      	str	r3, [sp, #0]
   3149a:	0023      	movs	r3, r4
   3149c:	4c26      	ldr	r4, [pc, #152]	; (31538 <MQTTPublish+0x1bc>)
   3149e:	47a0      	blx	r4
   314a0:	0003      	movs	r3, r0
   314a2:	2b01      	cmp	r3, #1
   314a4:	d033      	beq.n	3150e <MQTTPublish+0x192>
                rc = FAILURE;
   314a6:	2301      	movs	r3, #1
   314a8:	425b      	negs	r3, r3
   314aa:	637b      	str	r3, [r7, #52]	; 0x34
   314ac:	e02f      	b.n	3150e <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   314ae:	2301      	movs	r3, #1
   314b0:	425b      	negs	r3, r3
   314b2:	637b      	str	r3, [r7, #52]	; 0x34
   314b4:	e02b      	b.n	3150e <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   314b6:	687b      	ldr	r3, [r7, #4]
   314b8:	781b      	ldrb	r3, [r3, #0]
   314ba:	2b02      	cmp	r3, #2
   314bc:	d127      	bne.n	3150e <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   314be:	2324      	movs	r3, #36	; 0x24
   314c0:	18fa      	adds	r2, r7, r3
   314c2:	68fb      	ldr	r3, [r7, #12]
   314c4:	2107      	movs	r1, #7
   314c6:	0018      	movs	r0, r3
   314c8:	4b1a      	ldr	r3, [pc, #104]	; (31534 <MQTTPublish+0x1b8>)
   314ca:	4798      	blx	r3
   314cc:	0003      	movs	r3, r0
   314ce:	2b07      	cmp	r3, #7
   314d0:	d114      	bne.n	314fc <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   314d2:	68fb      	ldr	r3, [r7, #12]
   314d4:	695c      	ldr	r4, [r3, #20]
   314d6:	68fb      	ldr	r3, [r7, #12]
   314d8:	68db      	ldr	r3, [r3, #12]
   314da:	2212      	movs	r2, #18
   314dc:	18ba      	adds	r2, r7, r2
   314de:	2111      	movs	r1, #17
   314e0:	1879      	adds	r1, r7, r1
   314e2:	2010      	movs	r0, #16
   314e4:	1838      	adds	r0, r7, r0
   314e6:	9300      	str	r3, [sp, #0]
   314e8:	0023      	movs	r3, r4
   314ea:	4c13      	ldr	r4, [pc, #76]	; (31538 <MQTTPublish+0x1bc>)
   314ec:	47a0      	blx	r4
   314ee:	0003      	movs	r3, r0
   314f0:	2b01      	cmp	r3, #1
   314f2:	d00c      	beq.n	3150e <MQTTPublish+0x192>
                rc = FAILURE;
   314f4:	2301      	movs	r3, #1
   314f6:	425b      	negs	r3, r3
   314f8:	637b      	str	r3, [r7, #52]	; 0x34
   314fa:	e008      	b.n	3150e <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   314fc:	2301      	movs	r3, #1
   314fe:	425b      	negs	r3, r3
   31500:	637b      	str	r3, [r7, #52]	; 0x34
   31502:	e004      	b.n	3150e <MQTTPublish+0x192>
		goto exit;
   31504:	46c0      	nop			; (mov r8, r8)
   31506:	e002      	b.n	3150e <MQTTPublish+0x192>
        goto exit;
   31508:	46c0      	nop			; (mov r8, r8)
   3150a:	e000      	b.n	3150e <MQTTPublish+0x192>
        goto exit; // there was a problem
   3150c:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   3150e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   31510:	0018      	movs	r0, r3
   31512:	46bd      	mov	sp, r7
   31514:	b00f      	add	sp, #60	; 0x3c
   31516:	bc0c      	pop	{r2, r3}
   31518:	4690      	mov	r8, r2
   3151a:	4699      	mov	r9, r3
   3151c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3151e:	46c0      	nop			; (mov r8, r8)
   31520:	00031785 	.word	0x00031785
   31524:	0003170d 	.word	0x0003170d
   31528:	000308cd 	.word	0x000308cd
   3152c:	00032a09 	.word	0x00032a09
   31530:	000308fd 	.word	0x000308fd
   31534:	00031065 	.word	0x00031065
   31538:	00032481 	.word	0x00032481

0003153c <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   3153c:	b580      	push	{r7, lr}
   3153e:	b088      	sub	sp, #32
   31540:	af00      	add	r7, sp, #0
   31542:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   31544:	2301      	movs	r3, #1
   31546:	425b      	negs	r3, r3
   31548:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   3154a:	2300      	movs	r3, #0
   3154c:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   3154e:	230c      	movs	r3, #12
   31550:	18fb      	adds	r3, r7, r3
   31552:	0018      	movs	r0, r3
   31554:	4b13      	ldr	r3, [pc, #76]	; (315a4 <MQTTDisconnect+0x68>)
   31556:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   31558:	687b      	ldr	r3, [r7, #4]
   3155a:	685a      	ldr	r2, [r3, #4]
   3155c:	230c      	movs	r3, #12
   3155e:	18fb      	adds	r3, r7, r3
   31560:	0011      	movs	r1, r2
   31562:	0018      	movs	r0, r3
   31564:	4b10      	ldr	r3, [pc, #64]	; (315a8 <MQTTDisconnect+0x6c>)
   31566:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   31568:	687b      	ldr	r3, [r7, #4]
   3156a:	691a      	ldr	r2, [r3, #16]
   3156c:	687b      	ldr	r3, [r7, #4]
   3156e:	689b      	ldr	r3, [r3, #8]
   31570:	0019      	movs	r1, r3
   31572:	0010      	movs	r0, r2
   31574:	4b0d      	ldr	r3, [pc, #52]	; (315ac <MQTTDisconnect+0x70>)
   31576:	4798      	blx	r3
   31578:	0003      	movs	r3, r0
   3157a:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   3157c:	69bb      	ldr	r3, [r7, #24]
   3157e:	2b00      	cmp	r3, #0
   31580:	dd08      	ble.n	31594 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   31582:	230c      	movs	r3, #12
   31584:	18fa      	adds	r2, r7, r3
   31586:	69b9      	ldr	r1, [r7, #24]
   31588:	687b      	ldr	r3, [r7, #4]
   3158a:	0018      	movs	r0, r3
   3158c:	4b08      	ldr	r3, [pc, #32]	; (315b0 <MQTTDisconnect+0x74>)
   3158e:	4798      	blx	r3
   31590:	0003      	movs	r3, r0
   31592:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   31594:	687b      	ldr	r3, [r7, #4]
   31596:	2200      	movs	r2, #0
   31598:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   3159a:	69fb      	ldr	r3, [r7, #28]
}
   3159c:	0018      	movs	r0, r3
   3159e:	46bd      	mov	sp, r7
   315a0:	b008      	add	sp, #32
   315a2:	bd80      	pop	{r7, pc}
   315a4:	00031785 	.word	0x00031785
   315a8:	0003170d 	.word	0x0003170d
   315ac:	00032335 	.word	0x00032335
   315b0:	000308fd 	.word	0x000308fd

000315b4 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   315b4:	b580      	push	{r7, lr}
   315b6:	b084      	sub	sp, #16
   315b8:	af00      	add	r7, sp, #0
   315ba:	0002      	movs	r2, r0
   315bc:	1dfb      	adds	r3, r7, #7
   315be:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   315c0:	2300      	movs	r3, #0
   315c2:	60fb      	str	r3, [r7, #12]
   315c4:	e01c      	b.n	31600 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   315c6:	4a12      	ldr	r2, [pc, #72]	; (31610 <isMQTTSocket+0x5c>)
   315c8:	68fb      	ldr	r3, [r7, #12]
   315ca:	2164      	movs	r1, #100	; 0x64
   315cc:	434b      	muls	r3, r1
   315ce:	18d3      	adds	r3, r2, r3
   315d0:	3360      	adds	r3, #96	; 0x60
   315d2:	681b      	ldr	r3, [r3, #0]
   315d4:	2b00      	cmp	r3, #0
   315d6:	d010      	beq.n	315fa <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   315d8:	4a0d      	ldr	r2, [pc, #52]	; (31610 <isMQTTSocket+0x5c>)
   315da:	68fb      	ldr	r3, [r7, #12]
   315dc:	2164      	movs	r1, #100	; 0x64
   315de:	434b      	muls	r3, r1
   315e0:	18d3      	adds	r3, r2, r3
   315e2:	3360      	adds	r3, #96	; 0x60
   315e4:	681b      	ldr	r3, [r3, #0]
   315e6:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   315e8:	68bb      	ldr	r3, [r7, #8]
   315ea:	6a1a      	ldr	r2, [r3, #32]
   315ec:	1dfb      	adds	r3, r7, #7
   315ee:	781b      	ldrb	r3, [r3, #0]
   315f0:	b25b      	sxtb	r3, r3
   315f2:	429a      	cmp	r2, r3
   315f4:	d101      	bne.n	315fa <isMQTTSocket+0x46>
				return true;
   315f6:	2301      	movs	r3, #1
   315f8:	e006      	b.n	31608 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   315fa:	68fb      	ldr	r3, [r7, #12]
   315fc:	3301      	adds	r3, #1
   315fe:	60fb      	str	r3, [r7, #12]
   31600:	68fb      	ldr	r3, [r7, #12]
   31602:	2b06      	cmp	r3, #6
   31604:	d9df      	bls.n	315c6 <isMQTTSocket+0x12>
		}
	}
	return false;
   31606:	2300      	movs	r3, #0
}
   31608:	0018      	movs	r0, r3
   3160a:	46bd      	mov	sp, r7
   3160c:	b004      	add	sp, #16
   3160e:	bd80      	pop	{r7, pc}
   31610:	200042a8 	.word	0x200042a8

00031614 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   31614:	b580      	push	{r7, lr}
   31616:	b082      	sub	sp, #8
   31618:	af00      	add	r7, sp, #0
   3161a:	6078      	str	r0, [r7, #4]
   3161c:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   3161e:	4b0d      	ldr	r3, [pc, #52]	; (31654 <dnsResolveCallback+0x40>)
   31620:	781b      	ldrb	r3, [r3, #0]
   31622:	2201      	movs	r2, #1
   31624:	4053      	eors	r3, r2
   31626:	b2db      	uxtb	r3, r3
   31628:	2b00      	cmp	r3, #0
   3162a:	d00e      	beq.n	3164a <dnsResolveCallback+0x36>
   3162c:	4b0a      	ldr	r3, [pc, #40]	; (31658 <dnsResolveCallback+0x44>)
   3162e:	681b      	ldr	r3, [r3, #0]
   31630:	687a      	ldr	r2, [r7, #4]
   31632:	0011      	movs	r1, r2
   31634:	0018      	movs	r0, r3
   31636:	4b09      	ldr	r3, [pc, #36]	; (3165c <dnsResolveCallback+0x48>)
   31638:	4798      	blx	r3
   3163a:	1e03      	subs	r3, r0, #0
   3163c:	d105      	bne.n	3164a <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   3163e:	683a      	ldr	r2, [r7, #0]
   31640:	4b07      	ldr	r3, [pc, #28]	; (31660 <dnsResolveCallback+0x4c>)
   31642:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   31644:	4b03      	ldr	r3, [pc, #12]	; (31654 <dnsResolveCallback+0x40>)
   31646:	2201      	movs	r2, #1
   31648:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   3164a:	46c0      	nop			; (mov r8, r8)
   3164c:	46bd      	mov	sp, r7
   3164e:	b002      	add	sp, #8
   31650:	bd80      	pop	{r7, pc}
   31652:	46c0      	nop			; (mov r8, r8)
   31654:	20004198 	.word	0x20004198
   31658:	200042a4 	.word	0x200042a4
   3165c:	00037ca3 	.word	0x00037ca3
   31660:	20004190 	.word	0x20004190

00031664 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   31664:	b580      	push	{r7, lr}
   31666:	b084      	sub	sp, #16
   31668:	af00      	add	r7, sp, #0
   3166a:	603a      	str	r2, [r7, #0]
   3166c:	1dfb      	adds	r3, r7, #7
   3166e:	1c02      	adds	r2, r0, #0
   31670:	701a      	strb	r2, [r3, #0]
   31672:	1dbb      	adds	r3, r7, #6
   31674:	1c0a      	adds	r2, r1, #0
   31676:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   31678:	1dfb      	adds	r3, r7, #7
   3167a:	781b      	ldrb	r3, [r3, #0]
   3167c:	b25b      	sxtb	r3, r3
   3167e:	0018      	movs	r0, r3
   31680:	4b12      	ldr	r3, [pc, #72]	; (316cc <tcpClientSocketEventHandler+0x68>)
   31682:	4798      	blx	r3
   31684:	1e03      	subs	r3, r0, #0
   31686:	d01c      	beq.n	316c2 <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   31688:	1dbb      	adds	r3, r7, #6
   3168a:	781b      	ldrb	r3, [r3, #0]
   3168c:	2b06      	cmp	r3, #6
   3168e:	d00c      	beq.n	316aa <tcpClientSocketEventHandler+0x46>
   31690:	2b07      	cmp	r3, #7
   31692:	d006      	beq.n	316a2 <tcpClientSocketEventHandler+0x3e>
   31694:	2b05      	cmp	r3, #5
   31696:	d000      	beq.n	3169a <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   31698:	e013      	b.n	316c2 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   3169a:	4b0d      	ldr	r3, [pc, #52]	; (316d0 <tcpClientSocketEventHandler+0x6c>)
   3169c:	2201      	movs	r2, #1
   3169e:	701a      	strb	r2, [r3, #0]
			break;
   316a0:	e00f      	b.n	316c2 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   316a2:	4b0c      	ldr	r3, [pc, #48]	; (316d4 <tcpClientSocketEventHandler+0x70>)
   316a4:	2201      	movs	r2, #1
   316a6:	701a      	strb	r2, [r3, #0]
			break;
   316a8:	e00b      	b.n	316c2 <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   316aa:	683b      	ldr	r3, [r7, #0]
   316ac:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   316ae:	68fb      	ldr	r3, [r7, #12]
   316b0:	2204      	movs	r2, #4
   316b2:	5e9b      	ldrsh	r3, [r3, r2]
   316b4:	001a      	movs	r2, r3
   316b6:	4b08      	ldr	r3, [pc, #32]	; (316d8 <tcpClientSocketEventHandler+0x74>)
   316b8:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   316ba:	4b08      	ldr	r3, [pc, #32]	; (316dc <tcpClientSocketEventHandler+0x78>)
   316bc:	2201      	movs	r2, #1
   316be:	701a      	strb	r2, [r3, #0]
			break;
   316c0:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   316c2:	46c0      	nop			; (mov r8, r8)
   316c4:	46bd      	mov	sp, r7
   316c6:	b004      	add	sp, #16
   316c8:	bd80      	pop	{r7, pc}
   316ca:	46c0      	nop			; (mov r8, r8)
   316cc:	000315b5 	.word	0x000315b5
   316d0:	20004199 	.word	0x20004199
   316d4:	2000419a 	.word	0x2000419a
   316d8:	20004194 	.word	0x20004194
   316dc:	2000419b 	.word	0x2000419b

000316e0 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   316e0:	b580      	push	{r7, lr}
   316e2:	b082      	sub	sp, #8
   316e4:	af00      	add	r7, sp, #0
   316e6:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   316e8:	687b      	ldr	r3, [r7, #4]
   316ea:	3304      	adds	r3, #4
   316ec:	687a      	ldr	r2, [r7, #4]
   316ee:	0011      	movs	r1, r2
   316f0:	0018      	movs	r0, r3
   316f2:	4b05      	ldr	r3, [pc, #20]	; (31708 <TimerIsExpired+0x28>)
   316f4:	4798      	blx	r3
   316f6:	0003      	movs	r3, r0
   316f8:	3b01      	subs	r3, #1
   316fa:	425a      	negs	r2, r3
   316fc:	4153      	adcs	r3, r2
   316fe:	b2db      	uxtb	r3, r3
}
   31700:	0018      	movs	r0, r3
   31702:	46bd      	mov	sp, r7
   31704:	b002      	add	sp, #8
   31706:	bd80      	pop	{r7, pc}
   31708:	0001ef91 	.word	0x0001ef91

0003170c <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   3170c:	b580      	push	{r7, lr}
   3170e:	b082      	sub	sp, #8
   31710:	af00      	add	r7, sp, #0
   31712:	6078      	str	r0, [r7, #4]
   31714:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   31716:	687b      	ldr	r3, [r7, #4]
   31718:	683a      	ldr	r2, [r7, #0]
   3171a:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   3171c:	687b      	ldr	r3, [r7, #4]
   3171e:	3304      	adds	r3, #4
   31720:	0018      	movs	r0, r3
   31722:	4b03      	ldr	r3, [pc, #12]	; (31730 <TimerCountdownMS+0x24>)
   31724:	4798      	blx	r3
}
   31726:	46c0      	nop			; (mov r8, r8)
   31728:	46bd      	mov	sp, r7
   3172a:	b002      	add	sp, #8
   3172c:	bd80      	pop	{r7, pc}
   3172e:	46c0      	nop			; (mov r8, r8)
   31730:	0001ef25 	.word	0x0001ef25

00031734 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   31734:	b580      	push	{r7, lr}
   31736:	b082      	sub	sp, #8
   31738:	af00      	add	r7, sp, #0
   3173a:	6078      	str	r0, [r7, #4]
   3173c:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   3173e:	683b      	ldr	r3, [r7, #0]
   31740:	22fa      	movs	r2, #250	; 0xfa
   31742:	0092      	lsls	r2, r2, #2
   31744:	435a      	muls	r2, r3
   31746:	687b      	ldr	r3, [r7, #4]
   31748:	0011      	movs	r1, r2
   3174a:	0018      	movs	r0, r3
   3174c:	4b02      	ldr	r3, [pc, #8]	; (31758 <TimerCountdown+0x24>)
   3174e:	4798      	blx	r3
}
   31750:	46c0      	nop			; (mov r8, r8)
   31752:	46bd      	mov	sp, r7
   31754:	b002      	add	sp, #8
   31756:	bd80      	pop	{r7, pc}
   31758:	0003170d 	.word	0x0003170d

0003175c <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   3175c:	b580      	push	{r7, lr}
   3175e:	b082      	sub	sp, #8
   31760:	af00      	add	r7, sp, #0
   31762:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   31764:	687b      	ldr	r3, [r7, #4]
   31766:	3304      	adds	r3, #4
   31768:	687a      	ldr	r2, [r7, #4]
   3176a:	0011      	movs	r1, r2
   3176c:	0018      	movs	r0, r3
   3176e:	4b04      	ldr	r3, [pc, #16]	; (31780 <TimerLeftMS+0x24>)
   31770:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   31772:	687b      	ldr	r3, [r7, #4]
   31774:	681b      	ldr	r3, [r3, #0]
}
   31776:	0018      	movs	r0, r3
   31778:	46bd      	mov	sp, r7
   3177a:	b002      	add	sp, #8
   3177c:	bd80      	pop	{r7, pc}
   3177e:	46c0      	nop			; (mov r8, r8)
   31780:	0001ef91 	.word	0x0001ef91

00031784 <TimerInit>:


void TimerInit(Timer* timer) {
   31784:	b580      	push	{r7, lr}
   31786:	b082      	sub	sp, #8
   31788:	af00      	add	r7, sp, #0
   3178a:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   3178c:	687b      	ldr	r3, [r7, #4]
   3178e:	2200      	movs	r2, #0
   31790:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   31792:	687b      	ldr	r3, [r7, #4]
   31794:	3304      	adds	r3, #4
   31796:	2208      	movs	r2, #8
   31798:	2100      	movs	r1, #0
   3179a:	0018      	movs	r0, r3
   3179c:	4b02      	ldr	r3, [pc, #8]	; (317a8 <TimerInit+0x24>)
   3179e:	4798      	blx	r3
}
   317a0:	46c0      	nop			; (mov r8, r8)
   317a2:	46bd      	mov	sp, r7
   317a4:	b002      	add	sp, #8
   317a6:	bd80      	pop	{r7, pc}
   317a8:	0003794b 	.word	0x0003794b

000317ac <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   317ac:	b590      	push	{r4, r7, lr}
   317ae:	b085      	sub	sp, #20
   317b0:	af00      	add	r7, sp, #0
   317b2:	60f8      	str	r0, [r7, #12]
   317b4:	60b9      	str	r1, [r7, #8]
   317b6:	607a      	str	r2, [r7, #4]
   317b8:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   317ba:	683b      	ldr	r3, [r7, #0]
   317bc:	2b00      	cmp	r3, #0
   317be:	d101      	bne.n	317c4 <WINC1500_read+0x18>
   317c0:	230a      	movs	r3, #10
   317c2:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   317c4:	4b2c      	ldr	r3, [pc, #176]	; (31878 <WINC1500_read+0xcc>)
   317c6:	681b      	ldr	r3, [r3, #0]
   317c8:	2b00      	cmp	r3, #0
   317ca:	d131      	bne.n	31830 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   317cc:	4b2b      	ldr	r3, [pc, #172]	; (3187c <WINC1500_read+0xd0>)
   317ce:	2200      	movs	r2, #0
   317d0:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   317d2:	68fb      	ldr	r3, [r7, #12]
   317d4:	681b      	ldr	r3, [r3, #0]
   317d6:	b258      	sxtb	r0, r3
   317d8:	683c      	ldr	r4, [r7, #0]
   317da:	2380      	movs	r3, #128	; 0x80
   317dc:	005a      	lsls	r2, r3, #1
   317de:	4928      	ldr	r1, [pc, #160]	; (31880 <WINC1500_read+0xd4>)
   317e0:	0023      	movs	r3, r4
   317e2:	4c28      	ldr	r4, [pc, #160]	; (31884 <WINC1500_read+0xd8>)
   317e4:	47a0      	blx	r4
   317e6:	1e03      	subs	r3, r0, #0
   317e8:	d005      	beq.n	317f6 <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   317ea:	2301      	movs	r3, #1
   317ec:	425b      	negs	r3, r3
   317ee:	e03e      	b.n	3186e <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   317f0:	2000      	movs	r0, #0
   317f2:	4b25      	ldr	r3, [pc, #148]	; (31888 <WINC1500_read+0xdc>)
   317f4:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   317f6:	4b21      	ldr	r3, [pc, #132]	; (3187c <WINC1500_read+0xd0>)
   317f8:	781b      	ldrb	r3, [r3, #0]
   317fa:	2201      	movs	r2, #1
   317fc:	4053      	eors	r3, r2
   317fe:	b2db      	uxtb	r3, r3
   31800:	2b00      	cmp	r3, #0
   31802:	d1f5      	bne.n	317f0 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   31804:	4b21      	ldr	r3, [pc, #132]	; (3188c <WINC1500_read+0xe0>)
   31806:	681b      	ldr	r3, [r3, #0]
   31808:	2b00      	cmp	r3, #0
   3180a:	dd08      	ble.n	3181e <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   3180c:	4b1f      	ldr	r3, [pc, #124]	; (3188c <WINC1500_read+0xe0>)
   3180e:	681b      	ldr	r3, [r3, #0]
   31810:	001a      	movs	r2, r3
   31812:	4b19      	ldr	r3, [pc, #100]	; (31878 <WINC1500_read+0xcc>)
   31814:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   31816:	4b1e      	ldr	r3, [pc, #120]	; (31890 <WINC1500_read+0xe4>)
   31818:	2200      	movs	r2, #0
   3181a:	601a      	str	r2, [r3, #0]
   3181c:	e008      	b.n	31830 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   3181e:	4b16      	ldr	r3, [pc, #88]	; (31878 <WINC1500_read+0xcc>)
   31820:	2200      	movs	r2, #0
   31822:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   31824:	4b1a      	ldr	r3, [pc, #104]	; (31890 <WINC1500_read+0xe4>)
   31826:	2200      	movs	r2, #0
   31828:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   3182a:	4b18      	ldr	r3, [pc, #96]	; (3188c <WINC1500_read+0xe0>)
   3182c:	681b      	ldr	r3, [r3, #0]
   3182e:	e01e      	b.n	3186e <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   31830:	4b11      	ldr	r3, [pc, #68]	; (31878 <WINC1500_read+0xcc>)
   31832:	681b      	ldr	r3, [r3, #0]
   31834:	001a      	movs	r2, r3
   31836:	687b      	ldr	r3, [r7, #4]
   31838:	4293      	cmp	r3, r2
   3183a:	dd02      	ble.n	31842 <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   3183c:	2301      	movs	r3, #1
   3183e:	425b      	negs	r3, r3
   31840:	e015      	b.n	3186e <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   31842:	4b13      	ldr	r3, [pc, #76]	; (31890 <WINC1500_read+0xe4>)
   31844:	681a      	ldr	r2, [r3, #0]
   31846:	4b0e      	ldr	r3, [pc, #56]	; (31880 <WINC1500_read+0xd4>)
   31848:	18d1      	adds	r1, r2, r3
   3184a:	687a      	ldr	r2, [r7, #4]
   3184c:	68bb      	ldr	r3, [r7, #8]
   3184e:	0018      	movs	r0, r3
   31850:	4b10      	ldr	r3, [pc, #64]	; (31894 <WINC1500_read+0xe8>)
   31852:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   31854:	4b08      	ldr	r3, [pc, #32]	; (31878 <WINC1500_read+0xcc>)
   31856:	681a      	ldr	r2, [r3, #0]
   31858:	687b      	ldr	r3, [r7, #4]
   3185a:	1ad2      	subs	r2, r2, r3
   3185c:	4b06      	ldr	r3, [pc, #24]	; (31878 <WINC1500_read+0xcc>)
   3185e:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   31860:	4b0b      	ldr	r3, [pc, #44]	; (31890 <WINC1500_read+0xe4>)
   31862:	681a      	ldr	r2, [r3, #0]
   31864:	687b      	ldr	r3, [r7, #4]
   31866:	18d2      	adds	r2, r2, r3
   31868:	4b09      	ldr	r3, [pc, #36]	; (31890 <WINC1500_read+0xe4>)
   3186a:	601a      	str	r2, [r3, #0]
  
  return len;
   3186c:	687b      	ldr	r3, [r7, #4]
}
   3186e:	0018      	movs	r0, r3
   31870:	46bd      	mov	sp, r7
   31872:	b005      	add	sp, #20
   31874:	bd90      	pop	{r4, r7, pc}
   31876:	46c0      	nop			; (mov r8, r8)
   31878:	200042a0 	.word	0x200042a0
   3187c:	2000419b 	.word	0x2000419b
   31880:	2000419c 	.word	0x2000419c
   31884:	00027e05 	.word	0x00027e05
   31888:	0002434d 	.word	0x0002434d
   3188c:	20004194 	.word	0x20004194
   31890:	2000429c 	.word	0x2000429c
   31894:	00037915 	.word	0x00037915

00031898 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   31898:	b590      	push	{r4, r7, lr}
   3189a:	b085      	sub	sp, #20
   3189c:	af00      	add	r7, sp, #0
   3189e:	60f8      	str	r0, [r7, #12]
   318a0:	60b9      	str	r1, [r7, #8]
   318a2:	607a      	str	r2, [r7, #4]
   318a4:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   318a6:	4b10      	ldr	r3, [pc, #64]	; (318e8 <WINC1500_write+0x50>)
   318a8:	2200      	movs	r2, #0
   318aa:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   318ac:	68fb      	ldr	r3, [r7, #12]
   318ae:	681b      	ldr	r3, [r3, #0]
   318b0:	b258      	sxtb	r0, r3
   318b2:	687b      	ldr	r3, [r7, #4]
   318b4:	b29a      	uxth	r2, r3
   318b6:	68b9      	ldr	r1, [r7, #8]
   318b8:	2300      	movs	r3, #0
   318ba:	4c0c      	ldr	r4, [pc, #48]	; (318ec <WINC1500_write+0x54>)
   318bc:	47a0      	blx	r4
   318be:	1e03      	subs	r3, r0, #0
   318c0:	d005      	beq.n	318ce <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   318c2:	2301      	movs	r3, #1
   318c4:	425b      	negs	r3, r3
   318c6:	e00a      	b.n	318de <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   318c8:	2000      	movs	r0, #0
   318ca:	4b09      	ldr	r3, [pc, #36]	; (318f0 <WINC1500_write+0x58>)
   318cc:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   318ce:	4b06      	ldr	r3, [pc, #24]	; (318e8 <WINC1500_write+0x50>)
   318d0:	781b      	ldrb	r3, [r3, #0]
   318d2:	2201      	movs	r2, #1
   318d4:	4053      	eors	r3, r2
   318d6:	b2db      	uxtb	r3, r3
   318d8:	2b00      	cmp	r3, #0
   318da:	d1f5      	bne.n	318c8 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   318dc:	687b      	ldr	r3, [r7, #4]
}
   318de:	0018      	movs	r0, r3
   318e0:	46bd      	mov	sp, r7
   318e2:	b005      	add	sp, #20
   318e4:	bd90      	pop	{r4, r7, pc}
   318e6:	46c0      	nop			; (mov r8, r8)
   318e8:	2000419a 	.word	0x2000419a
   318ec:	00027ca1 	.word	0x00027ca1
   318f0:	0002434d 	.word	0x0002434d

000318f4 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   318f4:	b580      	push	{r7, lr}
   318f6:	b082      	sub	sp, #8
   318f8:	af00      	add	r7, sp, #0
   318fa:	6078      	str	r0, [r7, #4]
	close(n->socket);
   318fc:	687b      	ldr	r3, [r7, #4]
   318fe:	681b      	ldr	r3, [r3, #0]
   31900:	b25b      	sxtb	r3, r3
   31902:	0018      	movs	r0, r3
   31904:	4b06      	ldr	r3, [pc, #24]	; (31920 <WINC1500_disconnect+0x2c>)
   31906:	4798      	blx	r3
	n->socket=-1;
   31908:	687b      	ldr	r3, [r7, #4]
   3190a:	2201      	movs	r2, #1
   3190c:	4252      	negs	r2, r2
   3190e:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   31910:	4b04      	ldr	r3, [pc, #16]	; (31924 <WINC1500_disconnect+0x30>)
   31912:	2200      	movs	r2, #0
   31914:	701a      	strb	r2, [r3, #0]
}
   31916:	46c0      	nop			; (mov r8, r8)
   31918:	46bd      	mov	sp, r7
   3191a:	b002      	add	sp, #8
   3191c:	bd80      	pop	{r7, pc}
   3191e:	46c0      	nop			; (mov r8, r8)
   31920:	00027f85 	.word	0x00027f85
   31924:	20004199 	.word	0x20004199

00031928 <NetworkInit>:


void NetworkInit(Network* n) {
   31928:	b580      	push	{r7, lr}
   3192a:	b082      	sub	sp, #8
   3192c:	af00      	add	r7, sp, #0
   3192e:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   31930:	687b      	ldr	r3, [r7, #4]
   31932:	2201      	movs	r2, #1
   31934:	4252      	negs	r2, r2
   31936:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   31938:	687b      	ldr	r3, [r7, #4]
   3193a:	4a06      	ldr	r2, [pc, #24]	; (31954 <NetworkInit+0x2c>)
   3193c:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   3193e:	687b      	ldr	r3, [r7, #4]
   31940:	4a05      	ldr	r2, [pc, #20]	; (31958 <NetworkInit+0x30>)
   31942:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   31944:	687b      	ldr	r3, [r7, #4]
   31946:	4a05      	ldr	r2, [pc, #20]	; (3195c <NetworkInit+0x34>)
   31948:	611a      	str	r2, [r3, #16]
}
   3194a:	46c0      	nop			; (mov r8, r8)
   3194c:	46bd      	mov	sp, r7
   3194e:	b002      	add	sp, #8
   31950:	bd80      	pop	{r7, pc}
   31952:	46c0      	nop			; (mov r8, r8)
   31954:	000317ad 	.word	0x000317ad
   31958:	00031899 	.word	0x00031899
   3195c:	000318f5 	.word	0x000318f5

00031960 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   31960:	b580      	push	{r7, lr}
   31962:	b088      	sub	sp, #32
   31964:	af00      	add	r7, sp, #0
   31966:	60f8      	str	r0, [r7, #12]
   31968:	60b9      	str	r1, [r7, #8]
   3196a:	607a      	str	r2, [r7, #4]
   3196c:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   3196e:	4b37      	ldr	r3, [pc, #220]	; (31a4c <ConnectNetwork+0xec>)
   31970:	2200      	movs	r2, #0
   31972:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   31974:	4b36      	ldr	r3, [pc, #216]	; (31a50 <ConnectNetwork+0xf0>)
   31976:	68ba      	ldr	r2, [r7, #8]
   31978:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   3197a:	68bb      	ldr	r3, [r7, #8]
   3197c:	0018      	movs	r0, r3
   3197e:	4b35      	ldr	r3, [pc, #212]	; (31a54 <ConnectNetwork+0xf4>)
   31980:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   31982:	e002      	b.n	3198a <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   31984:	2000      	movs	r0, #0
   31986:	4b34      	ldr	r3, [pc, #208]	; (31a58 <ConnectNetwork+0xf8>)
   31988:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   3198a:	4b30      	ldr	r3, [pc, #192]	; (31a4c <ConnectNetwork+0xec>)
   3198c:	781b      	ldrb	r3, [r3, #0]
   3198e:	2201      	movs	r2, #1
   31990:	4053      	eors	r3, r2
   31992:	b2db      	uxtb	r3, r3
   31994:	2b00      	cmp	r3, #0
   31996:	d1f5      	bne.n	31984 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   31998:	4b30      	ldr	r3, [pc, #192]	; (31a5c <ConnectNetwork+0xfc>)
   3199a:	681a      	ldr	r2, [r3, #0]
   3199c:	68fb      	ldr	r3, [r7, #12]
   3199e:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   319a0:	2310      	movs	r3, #16
   319a2:	18fb      	adds	r3, r7, r3
   319a4:	2202      	movs	r2, #2
   319a6:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   319a8:	687b      	ldr	r3, [r7, #4]
   319aa:	b29b      	uxth	r3, r3
   319ac:	021b      	lsls	r3, r3, #8
   319ae:	b21a      	sxth	r2, r3
   319b0:	687b      	ldr	r3, [r7, #4]
   319b2:	b29b      	uxth	r3, r3
   319b4:	0a1b      	lsrs	r3, r3, #8
   319b6:	b29b      	uxth	r3, r3
   319b8:	b21b      	sxth	r3, r3
   319ba:	4313      	orrs	r3, r2
   319bc:	b21b      	sxth	r3, r3
   319be:	b29a      	uxth	r2, r3
   319c0:	2310      	movs	r3, #16
   319c2:	18fb      	adds	r3, r7, r3
   319c4:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   319c6:	4b25      	ldr	r3, [pc, #148]	; (31a5c <ConnectNetwork+0xfc>)
   319c8:	681b      	ldr	r3, [r3, #0]
   319ca:	001a      	movs	r2, r3
   319cc:	2310      	movs	r3, #16
   319ce:	18fb      	adds	r3, r7, r3
   319d0:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   319d2:	68fb      	ldr	r3, [r7, #12]
   319d4:	681b      	ldr	r3, [r3, #0]
   319d6:	2b00      	cmp	r3, #0
   319d8:	da0a      	bge.n	319f0 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   319da:	683b      	ldr	r3, [r7, #0]
   319dc:	b2db      	uxtb	r3, r3
   319de:	001a      	movs	r2, r3
   319e0:	2101      	movs	r1, #1
   319e2:	2002      	movs	r0, #2
   319e4:	4b1e      	ldr	r3, [pc, #120]	; (31a60 <ConnectNetwork+0x100>)
   319e6:	4798      	blx	r3
   319e8:	0003      	movs	r3, r0
   319ea:	001a      	movs	r2, r3
   319ec:	68fb      	ldr	r3, [r7, #12]
   319ee:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   319f0:	68fb      	ldr	r3, [r7, #12]
   319f2:	681b      	ldr	r3, [r3, #0]
   319f4:	3301      	adds	r3, #1
   319f6:	d108      	bne.n	31a0a <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   319f8:	68fb      	ldr	r3, [r7, #12]
   319fa:	681b      	ldr	r3, [r3, #0]
   319fc:	b25b      	sxtb	r3, r3
   319fe:	0018      	movs	r0, r3
   31a00:	4b18      	ldr	r3, [pc, #96]	; (31a64 <ConnectNetwork+0x104>)
   31a02:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   31a04:	2309      	movs	r3, #9
   31a06:	425b      	negs	r3, r3
   31a08:	e01c      	b.n	31a44 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   31a0a:	68fb      	ldr	r3, [r7, #12]
   31a0c:	681b      	ldr	r3, [r3, #0]
   31a0e:	b25b      	sxtb	r3, r3
   31a10:	2210      	movs	r2, #16
   31a12:	18b9      	adds	r1, r7, r2
   31a14:	2210      	movs	r2, #16
   31a16:	0018      	movs	r0, r3
   31a18:	4b13      	ldr	r3, [pc, #76]	; (31a68 <ConnectNetwork+0x108>)
   31a1a:	4798      	blx	r3
   31a1c:	1e03      	subs	r3, r0, #0
   31a1e:	d002      	beq.n	31a26 <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   31a20:	2309      	movs	r3, #9
   31a22:	425b      	negs	r3, r3
   31a24:	e00e      	b.n	31a44 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   31a26:	4b11      	ldr	r3, [pc, #68]	; (31a6c <ConnectNetwork+0x10c>)
   31a28:	2200      	movs	r2, #0
   31a2a:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   31a2c:	e002      	b.n	31a34 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   31a2e:	2000      	movs	r0, #0
   31a30:	4b09      	ldr	r3, [pc, #36]	; (31a58 <ConnectNetwork+0xf8>)
   31a32:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   31a34:	4b0d      	ldr	r3, [pc, #52]	; (31a6c <ConnectNetwork+0x10c>)
   31a36:	781b      	ldrb	r3, [r3, #0]
   31a38:	2201      	movs	r2, #1
   31a3a:	4053      	eors	r3, r2
   31a3c:	b2db      	uxtb	r3, r3
   31a3e:	2b00      	cmp	r3, #0
   31a40:	d1f5      	bne.n	31a2e <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   31a42:	2300      	movs	r3, #0
   31a44:	0018      	movs	r0, r3
   31a46:	46bd      	mov	sp, r7
   31a48:	b008      	add	sp, #32
   31a4a:	bd80      	pop	{r7, pc}
   31a4c:	20004198 	.word	0x20004198
   31a50:	200042a4 	.word	0x200042a4
   31a54:	000281cd 	.word	0x000281cd
   31a58:	0002434d 	.word	0x0002434d
   31a5c:	20004190 	.word	0x20004190
   31a60:	00027979 	.word	0x00027979
   31a64:	00027f85 	.word	0x00027f85
   31a68:	00027b8d 	.word	0x00027b8d
   31a6c:	20004199 	.word	0x20004199

00031a70 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   31a70:	b580      	push	{r7, lr}
   31a72:	b084      	sub	sp, #16
   31a74:	af00      	add	r7, sp, #0
   31a76:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   31a78:	687b      	ldr	r3, [r7, #4]
   31a7a:	2b00      	cmp	r3, #0
   31a7c:	d022      	beq.n	31ac4 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   31a7e:	2300      	movs	r3, #0
   31a80:	60fb      	str	r3, [r7, #12]
   31a82:	e01b      	b.n	31abc <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   31a84:	4a11      	ldr	r2, [pc, #68]	; (31acc <allocateClient+0x5c>)
   31a86:	68fb      	ldr	r3, [r7, #12]
   31a88:	2164      	movs	r1, #100	; 0x64
   31a8a:	434b      	muls	r3, r1
   31a8c:	18d3      	adds	r3, r2, r3
   31a8e:	3360      	adds	r3, #96	; 0x60
   31a90:	681b      	ldr	r3, [r3, #0]
   31a92:	2b00      	cmp	r3, #0
   31a94:	d10f      	bne.n	31ab6 <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   31a96:	4a0d      	ldr	r2, [pc, #52]	; (31acc <allocateClient+0x5c>)
   31a98:	68fb      	ldr	r3, [r7, #12]
   31a9a:	2164      	movs	r1, #100	; 0x64
   31a9c:	434b      	muls	r3, r1
   31a9e:	18d3      	adds	r3, r2, r3
   31aa0:	3360      	adds	r3, #96	; 0x60
   31aa2:	687a      	ldr	r2, [r7, #4]
   31aa4:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   31aa6:	68fb      	ldr	r3, [r7, #12]
   31aa8:	2264      	movs	r2, #100	; 0x64
   31aaa:	435a      	muls	r2, r3
   31aac:	4b07      	ldr	r3, [pc, #28]	; (31acc <allocateClient+0x5c>)
   31aae:	18d2      	adds	r2, r2, r3
   31ab0:	687b      	ldr	r3, [r7, #4]
   31ab2:	61da      	str	r2, [r3, #28]
			return;
   31ab4:	e007      	b.n	31ac6 <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   31ab6:	68fb      	ldr	r3, [r7, #12]
   31ab8:	3301      	adds	r3, #1
   31aba:	60fb      	str	r3, [r7, #12]
   31abc:	68fb      	ldr	r3, [r7, #12]
   31abe:	2b06      	cmp	r3, #6
   31ac0:	d9e0      	bls.n	31a84 <allocateClient+0x14>
   31ac2:	e000      	b.n	31ac6 <allocateClient+0x56>
		return;
   31ac4:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   31ac6:	46bd      	mov	sp, r7
   31ac8:	b004      	add	sp, #16
   31aca:	bd80      	pop	{r7, pc}
   31acc:	200042a8 	.word	0x200042a8

00031ad0 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   31ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
   31ad2:	b089      	sub	sp, #36	; 0x24
   31ad4:	af04      	add	r7, sp, #16
   31ad6:	6078      	str	r0, [r7, #4]
   31ad8:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   31ada:	687b      	ldr	r3, [r7, #4]
   31adc:	2b00      	cmp	r3, #0
   31ade:	d00a      	beq.n	31af6 <mqtt_init+0x26>
   31ae0:	683b      	ldr	r3, [r7, #0]
   31ae2:	2b00      	cmp	r3, #0
   31ae4:	d007      	beq.n	31af6 <mqtt_init+0x26>
   31ae6:	683b      	ldr	r3, [r7, #0]
   31ae8:	691b      	ldr	r3, [r3, #16]
   31aea:	2b00      	cmp	r3, #0
   31aec:	d003      	beq.n	31af6 <mqtt_init+0x26>
   31aee:	683b      	ldr	r3, [r7, #0]
   31af0:	689b      	ldr	r3, [r3, #8]
   31af2:	2b00      	cmp	r3, #0
   31af4:	d102      	bne.n	31afc <mqtt_init+0x2c>
		return FAILURE;
   31af6:	2301      	movs	r3, #1
   31af8:	425b      	negs	r3, r3
   31afa:	e034      	b.n	31b66 <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   31afc:	683b      	ldr	r3, [r7, #0]
   31afe:	889b      	ldrh	r3, [r3, #4]
   31b00:	001a      	movs	r2, r3
   31b02:	23fa      	movs	r3, #250	; 0xfa
   31b04:	009b      	lsls	r3, r3, #2
   31b06:	4353      	muls	r3, r2
   31b08:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   31b0a:	687b      	ldr	r3, [r7, #4]
   31b0c:	3320      	adds	r3, #32
   31b0e:	0018      	movs	r0, r3
   31b10:	4b17      	ldr	r3, [pc, #92]	; (31b70 <mqtt_init+0xa0>)
   31b12:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   31b14:	687b      	ldr	r3, [r7, #4]
   31b16:	3304      	adds	r3, #4
   31b18:	6839      	ldr	r1, [r7, #0]
   31b1a:	2218      	movs	r2, #24
   31b1c:	0018      	movs	r0, r3
   31b1e:	4b15      	ldr	r3, [pc, #84]	; (31b74 <mqtt_init+0xa4>)
   31b20:	4798      	blx	r3
	allocateClient(module);
   31b22:	687b      	ldr	r3, [r7, #4]
   31b24:	0018      	movs	r0, r3
   31b26:	4b14      	ldr	r3, [pc, #80]	; (31b78 <mqtt_init+0xa8>)
   31b28:	4798      	blx	r3
	
	if(module->client)
   31b2a:	687b      	ldr	r3, [r7, #4]
   31b2c:	69db      	ldr	r3, [r3, #28]
   31b2e:	2b00      	cmp	r3, #0
   31b30:	d017      	beq.n	31b62 <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   31b32:	687b      	ldr	r3, [r7, #4]
   31b34:	69d8      	ldr	r0, [r3, #28]
   31b36:	687b      	ldr	r3, [r7, #4]
   31b38:	3320      	adds	r3, #32
   31b3a:	001c      	movs	r4, r3
   31b3c:	683b      	ldr	r3, [r7, #0]
   31b3e:	691e      	ldr	r6, [r3, #16]
   31b40:	683b      	ldr	r3, [r7, #0]
   31b42:	695a      	ldr	r2, [r3, #20]
   31b44:	683b      	ldr	r3, [r7, #0]
   31b46:	6899      	ldr	r1, [r3, #8]
   31b48:	683b      	ldr	r3, [r7, #0]
   31b4a:	68db      	ldr	r3, [r3, #12]
   31b4c:	68fd      	ldr	r5, [r7, #12]
   31b4e:	9302      	str	r3, [sp, #8]
   31b50:	9101      	str	r1, [sp, #4]
   31b52:	9200      	str	r2, [sp, #0]
   31b54:	0033      	movs	r3, r6
   31b56:	002a      	movs	r2, r5
   31b58:	0021      	movs	r1, r4
   31b5a:	4c08      	ldr	r4, [pc, #32]	; (31b7c <mqtt_init+0xac>)
   31b5c:	47a0      	blx	r4
		return SUCCESS;
   31b5e:	2300      	movs	r3, #0
   31b60:	e001      	b.n	31b66 <mqtt_init+0x96>
	}
	else
		return FAILURE;
   31b62:	2301      	movs	r3, #1
   31b64:	425b      	negs	r3, r3
}
   31b66:	0018      	movs	r0, r3
   31b68:	46bd      	mov	sp, r7
   31b6a:	b005      	add	sp, #20
   31b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31b6e:	46c0      	nop			; (mov r8, r8)
   31b70:	00031929 	.word	0x00031929
   31b74:	00037915 	.word	0x00037915
   31b78:	00031a71 	.word	0x00031a71
   31b7c:	000309a1 	.word	0x000309a1

00031b80 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   31b80:	b580      	push	{r7, lr}
   31b82:	b082      	sub	sp, #8
   31b84:	af00      	add	r7, sp, #0
   31b86:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   31b88:	687b      	ldr	r3, [r7, #4]
   31b8a:	4a0c      	ldr	r2, [pc, #48]	; (31bbc <mqtt_get_config_defaults+0x3c>)
   31b8c:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   31b8e:	687b      	ldr	r3, [r7, #4]
   31b90:	2200      	movs	r2, #0
   31b92:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   31b94:	687b      	ldr	r3, [r7, #4]
   31b96:	223c      	movs	r2, #60	; 0x3c
   31b98:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   31b9a:	687b      	ldr	r3, [r7, #4]
   31b9c:	2200      	movs	r2, #0
   31b9e:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   31ba0:	687b      	ldr	r3, [r7, #4]
   31ba2:	2200      	movs	r2, #0
   31ba4:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   31ba6:	687b      	ldr	r3, [r7, #4]
   31ba8:	2200      	movs	r2, #0
   31baa:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   31bac:	687b      	ldr	r3, [r7, #4]
   31bae:	2200      	movs	r2, #0
   31bb0:	615a      	str	r2, [r3, #20]
}
   31bb2:	46c0      	nop			; (mov r8, r8)
   31bb4:	46bd      	mov	sp, r7
   31bb6:	b002      	add	sp, #8
   31bb8:	bd80      	pop	{r7, pc}
   31bba:	46c0      	nop			; (mov r8, r8)
   31bbc:	0000075b 	.word	0x0000075b

00031bc0 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   31bc0:	b580      	push	{r7, lr}
   31bc2:	b082      	sub	sp, #8
   31bc4:	af00      	add	r7, sp, #0
   31bc6:	6078      	str	r0, [r7, #4]
   31bc8:	6039      	str	r1, [r7, #0]
	if(module)
   31bca:	687b      	ldr	r3, [r7, #4]
   31bcc:	2b00      	cmp	r3, #0
   31bce:	d004      	beq.n	31bda <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   31bd0:	687b      	ldr	r3, [r7, #4]
   31bd2:	683a      	ldr	r2, [r7, #0]
   31bd4:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   31bd6:	2300      	movs	r3, #0
   31bd8:	e001      	b.n	31bde <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   31bda:	2301      	movs	r3, #1
   31bdc:	425b      	negs	r3, r3
}
   31bde:	0018      	movs	r0, r3
   31be0:	46bd      	mov	sp, r7
   31be2:	b002      	add	sp, #8
   31be4:	bd80      	pop	{r7, pc}
	...

00031be8 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   31be8:	b580      	push	{r7, lr}
   31bea:	b082      	sub	sp, #8
   31bec:	af00      	add	r7, sp, #0
   31bee:	603a      	str	r2, [r7, #0]
   31bf0:	1dfb      	adds	r3, r7, #7
   31bf2:	1c02      	adds	r2, r0, #0
   31bf4:	701a      	strb	r2, [r3, #0]
   31bf6:	1dbb      	adds	r3, r7, #6
   31bf8:	1c0a      	adds	r2, r1, #0
   31bfa:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   31bfc:	683a      	ldr	r2, [r7, #0]
   31bfe:	1dbb      	adds	r3, r7, #6
   31c00:	7819      	ldrb	r1, [r3, #0]
   31c02:	1dfb      	adds	r3, r7, #7
   31c04:	781b      	ldrb	r3, [r3, #0]
   31c06:	b25b      	sxtb	r3, r3
   31c08:	0018      	movs	r0, r3
   31c0a:	4b03      	ldr	r3, [pc, #12]	; (31c18 <mqtt_socket_event_handler+0x30>)
   31c0c:	4798      	blx	r3
}
   31c0e:	46c0      	nop			; (mov r8, r8)
   31c10:	46bd      	mov	sp, r7
   31c12:	b002      	add	sp, #8
   31c14:	bd80      	pop	{r7, pc}
   31c16:	46c0      	nop			; (mov r8, r8)
   31c18:	00031665 	.word	0x00031665

00031c1c <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   31c1c:	b580      	push	{r7, lr}
   31c1e:	b082      	sub	sp, #8
   31c20:	af00      	add	r7, sp, #0
   31c22:	6078      	str	r0, [r7, #4]
   31c24:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   31c26:	683a      	ldr	r2, [r7, #0]
   31c28:	687b      	ldr	r3, [r7, #4]
   31c2a:	0011      	movs	r1, r2
   31c2c:	0018      	movs	r0, r3
   31c2e:	4b03      	ldr	r3, [pc, #12]	; (31c3c <mqtt_socket_resolve_handler+0x20>)
   31c30:	4798      	blx	r3
}
   31c32:	46c0      	nop			; (mov r8, r8)
   31c34:	46bd      	mov	sp, r7
   31c36:	b002      	add	sp, #8
   31c38:	bd80      	pop	{r7, pc}
   31c3a:	46c0      	nop			; (mov r8, r8)
   31c3c:	00031615 	.word	0x00031615

00031c40 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   31c40:	b590      	push	{r4, r7, lr}
   31c42:	b085      	sub	sp, #20
   31c44:	af00      	add	r7, sp, #0
   31c46:	6078      	str	r0, [r7, #4]
   31c48:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   31c4a:	687b      	ldr	r3, [r7, #4]
   31c4c:	3320      	adds	r3, #32
   31c4e:	0018      	movs	r0, r3
   31c50:	687b      	ldr	r3, [r7, #4]
   31c52:	889b      	ldrh	r3, [r3, #4]
   31c54:	001a      	movs	r2, r3
   31c56:	687b      	ldr	r3, [r7, #4]
   31c58:	799b      	ldrb	r3, [r3, #6]
   31c5a:	6839      	ldr	r1, [r7, #0]
   31c5c:	4c09      	ldr	r4, [pc, #36]	; (31c84 <mqtt_connect+0x44>)
   31c5e:	47a0      	blx	r4
   31c60:	0003      	movs	r3, r0
   31c62:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   31c64:	687b      	ldr	r3, [r7, #4]
   31c66:	681b      	ldr	r3, [r3, #0]
   31c68:	2b00      	cmp	r3, #0
   31c6a:	d006      	beq.n	31c7a <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   31c6c:	687b      	ldr	r3, [r7, #4]
   31c6e:	681b      	ldr	r3, [r3, #0]
   31c70:	220c      	movs	r2, #12
   31c72:	18ba      	adds	r2, r7, r2
   31c74:	6878      	ldr	r0, [r7, #4]
   31c76:	2100      	movs	r1, #0
   31c78:	4798      	blx	r3
	return connResult.sock_connected.result;
   31c7a:	68fb      	ldr	r3, [r7, #12]
}
   31c7c:	0018      	movs	r0, r3
   31c7e:	46bd      	mov	sp, r7
   31c80:	b005      	add	sp, #20
   31c82:	bd90      	pop	{r4, r7, pc}
   31c84:	00031961 	.word	0x00031961

00031c88 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   31c88:	b580      	push	{r7, lr}
   31c8a:	b09c      	sub	sp, #112	; 0x70
   31c8c:	af00      	add	r7, sp, #0
   31c8e:	60f8      	str	r0, [r7, #12]
   31c90:	607a      	str	r2, [r7, #4]
   31c92:	603b      	str	r3, [r7, #0]
   31c94:	230b      	movs	r3, #11
   31c96:	18fb      	adds	r3, r7, r3
   31c98:	1c0a      	adds	r2, r1, #0
   31c9a:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   31c9c:	2310      	movs	r3, #16
   31c9e:	18fa      	adds	r2, r7, r3
   31ca0:	4b31      	ldr	r3, [pc, #196]	; (31d68 <mqtt_connect_broker+0xe0>)
   31ca2:	0010      	movs	r0, r2
   31ca4:	0019      	movs	r1, r3
   31ca6:	2358      	movs	r3, #88	; 0x58
   31ca8:	001a      	movs	r2, r3
   31caa:	4b30      	ldr	r3, [pc, #192]	; (31d6c <mqtt_connect_broker+0xe4>)
   31cac:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   31cae:	2310      	movs	r3, #16
   31cb0:	18fb      	adds	r3, r7, r3
   31cb2:	2204      	movs	r2, #4
   31cb4:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   31cb6:	2310      	movs	r3, #16
   31cb8:	18fb      	adds	r3, r7, r3
   31cba:	6fba      	ldr	r2, [r7, #120]	; 0x78
   31cbc:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   31cbe:	2310      	movs	r3, #16
   31cc0:	18fb      	adds	r3, r7, r3
   31cc2:	687a      	ldr	r2, [r7, #4]
   31cc4:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   31cc6:	2310      	movs	r3, #16
   31cc8:	18fb      	adds	r3, r7, r3
   31cca:	683a      	ldr	r2, [r7, #0]
   31ccc:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   31cce:	2310      	movs	r3, #16
   31cd0:	18fb      	adds	r3, r7, r3
   31cd2:	220b      	movs	r2, #11
   31cd4:	18ba      	adds	r2, r7, r2
   31cd6:	7812      	ldrb	r2, [r2, #0]
   31cd8:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   31cda:	2310      	movs	r3, #16
   31cdc:	18fb      	adds	r3, r7, r3
   31cde:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   31ce0:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   31ce2:	2310      	movs	r3, #16
   31ce4:	18fb      	adds	r3, r7, r3
   31ce6:	2280      	movs	r2, #128	; 0x80
   31ce8:	18ba      	adds	r2, r7, r2
   31cea:	6812      	ldr	r2, [r2, #0]
   31cec:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   31cee:	2310      	movs	r3, #16
   31cf0:	18fb      	adds	r3, r7, r3
   31cf2:	228c      	movs	r2, #140	; 0x8c
   31cf4:	18ba      	adds	r2, r7, r2
   31cf6:	213c      	movs	r1, #60	; 0x3c
   31cf8:	7812      	ldrb	r2, [r2, #0]
   31cfa:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   31cfc:	2310      	movs	r3, #16
   31cfe:	18fb      	adds	r3, r7, r3
   31d00:	2288      	movs	r2, #136	; 0x88
   31d02:	18ba      	adds	r2, r7, r2
   31d04:	213d      	movs	r1, #61	; 0x3d
   31d06:	7812      	ldrb	r2, [r2, #0]
   31d08:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   31d0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   31d0c:	2b00      	cmp	r3, #0
   31d0e:	d008      	beq.n	31d22 <mqtt_connect_broker+0x9a>
   31d10:	2380      	movs	r3, #128	; 0x80
   31d12:	18fb      	adds	r3, r7, r3
   31d14:	681b      	ldr	r3, [r3, #0]
   31d16:	2b00      	cmp	r3, #0
   31d18:	d003      	beq.n	31d22 <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   31d1a:	2310      	movs	r3, #16
   31d1c:	18fb      	adds	r3, r7, r3
   31d1e:	2201      	movs	r2, #1
   31d20:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   31d22:	68fb      	ldr	r3, [r7, #12]
   31d24:	69db      	ldr	r3, [r3, #28]
   31d26:	2210      	movs	r2, #16
   31d28:	18ba      	adds	r2, r7, r2
   31d2a:	0011      	movs	r1, r2
   31d2c:	0018      	movs	r0, r3
   31d2e:	4b10      	ldr	r3, [pc, #64]	; (31d70 <mqtt_connect_broker+0xe8>)
   31d30:	4798      	blx	r3
   31d32:	0003      	movs	r3, r0
   31d34:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   31d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   31d38:	b2da      	uxtb	r2, r3
   31d3a:	2368      	movs	r3, #104	; 0x68
   31d3c:	18fb      	adds	r3, r7, r3
   31d3e:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   31d40:	68fb      	ldr	r3, [r7, #12]
   31d42:	681b      	ldr	r3, [r3, #0]
   31d44:	2b00      	cmp	r3, #0
   31d46:	d006      	beq.n	31d56 <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   31d48:	68fb      	ldr	r3, [r7, #12]
   31d4a:	681b      	ldr	r3, [r3, #0]
   31d4c:	2268      	movs	r2, #104	; 0x68
   31d4e:	18ba      	adds	r2, r7, r2
   31d50:	68f8      	ldr	r0, [r7, #12]
   31d52:	2101      	movs	r1, #1
   31d54:	4798      	blx	r3
	
	module->isConnected = true;
   31d56:	68fb      	ldr	r3, [r7, #12]
   31d58:	2234      	movs	r2, #52	; 0x34
   31d5a:	2101      	movs	r1, #1
   31d5c:	5499      	strb	r1, [r3, r2]
	return rc;
   31d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   31d60:	0018      	movs	r0, r3
   31d62:	46bd      	mov	sp, r7
   31d64:	b01c      	add	sp, #112	; 0x70
   31d66:	bd80      	pop	{r7, pc}
   31d68:	0003ceb0 	.word	0x0003ceb0
   31d6c:	00037915 	.word	0x00037915
   31d70:	000310b1 	.word	0x000310b1

00031d74 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   31d74:	b580      	push	{r7, lr}
   31d76:	b084      	sub	sp, #16
   31d78:	af00      	add	r7, sp, #0
   31d7a:	6078      	str	r0, [r7, #4]
   31d7c:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   31d7e:	687b      	ldr	r3, [r7, #4]
   31d80:	69db      	ldr	r3, [r3, #28]
   31d82:	0018      	movs	r0, r3
   31d84:	4b0c      	ldr	r3, [pc, #48]	; (31db8 <mqtt_disconnect+0x44>)
   31d86:	4798      	blx	r3
   31d88:	0003      	movs	r3, r0
   31d8a:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   31d8c:	68fb      	ldr	r3, [r7, #12]
   31d8e:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   31d90:	687b      	ldr	r3, [r7, #4]
   31d92:	681b      	ldr	r3, [r3, #0]
   31d94:	2b00      	cmp	r3, #0
   31d96:	d006      	beq.n	31da6 <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   31d98:	687b      	ldr	r3, [r7, #4]
   31d9a:	681b      	ldr	r3, [r3, #0]
   31d9c:	2208      	movs	r2, #8
   31d9e:	18ba      	adds	r2, r7, r2
   31da0:	6878      	ldr	r0, [r7, #4]
   31da2:	2105      	movs	r1, #5
   31da4:	4798      	blx	r3
	
	module->isConnected = false;
   31da6:	687b      	ldr	r3, [r7, #4]
   31da8:	2234      	movs	r2, #52	; 0x34
   31daa:	2100      	movs	r1, #0
   31dac:	5499      	strb	r1, [r3, r2]
	return rc;
   31dae:	68fb      	ldr	r3, [r7, #12]
}
   31db0:	0018      	movs	r0, r3
   31db2:	46bd      	mov	sp, r7
   31db4:	b004      	add	sp, #16
   31db6:	bd80      	pop	{r7, pc}
   31db8:	0003153d 	.word	0x0003153d

00031dbc <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   31dbc:	b580      	push	{r7, lr}
   31dbe:	b08a      	sub	sp, #40	; 0x28
   31dc0:	af00      	add	r7, sp, #0
   31dc2:	60f8      	str	r0, [r7, #12]
   31dc4:	60b9      	str	r1, [r7, #8]
   31dc6:	607a      	str	r2, [r7, #4]
   31dc8:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   31dca:	2314      	movs	r3, #20
   31dcc:	18fb      	adds	r3, r7, r3
   31dce:	2230      	movs	r2, #48	; 0x30
   31dd0:	18ba      	adds	r2, r7, r2
   31dd2:	7812      	ldrb	r2, [r2, #0]
   31dd4:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   31dd6:	2314      	movs	r3, #20
   31dd8:	18fb      	adds	r3, r7, r3
   31dda:	687a      	ldr	r2, [r7, #4]
   31ddc:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   31dde:	2314      	movs	r3, #20
   31de0:	18fb      	adds	r3, r7, r3
   31de2:	683a      	ldr	r2, [r7, #0]
   31de4:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   31de6:	2314      	movs	r3, #20
   31de8:	18fb      	adds	r3, r7, r3
   31dea:	2234      	movs	r2, #52	; 0x34
   31dec:	18ba      	adds	r2, r7, r2
   31dee:	7812      	ldrb	r2, [r2, #0]
   31df0:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   31df2:	68fb      	ldr	r3, [r7, #12]
   31df4:	69db      	ldr	r3, [r3, #28]
   31df6:	2214      	movs	r2, #20
   31df8:	18ba      	adds	r2, r7, r2
   31dfa:	68b9      	ldr	r1, [r7, #8]
   31dfc:	0018      	movs	r0, r3
   31dfe:	4b09      	ldr	r3, [pc, #36]	; (31e24 <mqtt_publish+0x68>)
   31e00:	4798      	blx	r3
   31e02:	0003      	movs	r3, r0
   31e04:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   31e06:	68fb      	ldr	r3, [r7, #12]
   31e08:	681b      	ldr	r3, [r3, #0]
   31e0a:	2b00      	cmp	r3, #0
   31e0c:	d005      	beq.n	31e1a <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   31e0e:	68fb      	ldr	r3, [r7, #12]
   31e10:	681b      	ldr	r3, [r3, #0]
   31e12:	68f8      	ldr	r0, [r7, #12]
   31e14:	2200      	movs	r2, #0
   31e16:	2102      	movs	r1, #2
   31e18:	4798      	blx	r3
	
	return rc;
   31e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   31e1c:	0018      	movs	r0, r3
   31e1e:	46bd      	mov	sp, r7
   31e20:	b00a      	add	sp, #40	; 0x28
   31e22:	bd80      	pop	{r7, pc}
   31e24:	0003137d 	.word	0x0003137d

00031e28 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   31e28:	b590      	push	{r4, r7, lr}
   31e2a:	b087      	sub	sp, #28
   31e2c:	af00      	add	r7, sp, #0
   31e2e:	60f8      	str	r0, [r7, #12]
   31e30:	60b9      	str	r1, [r7, #8]
   31e32:	603b      	str	r3, [r7, #0]
   31e34:	1dfb      	adds	r3, r7, #7
   31e36:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   31e38:	68fb      	ldr	r3, [r7, #12]
   31e3a:	69d8      	ldr	r0, [r3, #28]
   31e3c:	683c      	ldr	r4, [r7, #0]
   31e3e:	1dfb      	adds	r3, r7, #7
   31e40:	781a      	ldrb	r2, [r3, #0]
   31e42:	68b9      	ldr	r1, [r7, #8]
   31e44:	0023      	movs	r3, r4
   31e46:	4c09      	ldr	r4, [pc, #36]	; (31e6c <mqtt_subscribe+0x44>)
   31e48:	47a0      	blx	r4
   31e4a:	0003      	movs	r3, r0
   31e4c:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   31e4e:	68fb      	ldr	r3, [r7, #12]
   31e50:	681b      	ldr	r3, [r3, #0]
   31e52:	2b00      	cmp	r3, #0
   31e54:	d005      	beq.n	31e62 <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   31e56:	68fb      	ldr	r3, [r7, #12]
   31e58:	681b      	ldr	r3, [r3, #0]
   31e5a:	68f8      	ldr	r0, [r7, #12]
   31e5c:	2200      	movs	r2, #0
   31e5e:	2103      	movs	r1, #3
   31e60:	4798      	blx	r3
	
	return rc;
   31e62:	697b      	ldr	r3, [r7, #20]
}
   31e64:	0018      	movs	r0, r3
   31e66:	46bd      	mov	sp, r7
   31e68:	b007      	add	sp, #28
   31e6a:	bd90      	pop	{r4, r7, pc}
   31e6c:	000311f1 	.word	0x000311f1

00031e70 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   31e70:	b580      	push	{r7, lr}
   31e72:	b082      	sub	sp, #8
   31e74:	af00      	add	r7, sp, #0
   31e76:	6078      	str	r0, [r7, #4]
   31e78:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   31e7a:	687b      	ldr	r3, [r7, #4]
   31e7c:	69db      	ldr	r3, [r3, #28]
   31e7e:	683a      	ldr	r2, [r7, #0]
   31e80:	0011      	movs	r1, r2
   31e82:	0018      	movs	r0, r3
   31e84:	4b03      	ldr	r3, [pc, #12]	; (31e94 <mqtt_yield+0x24>)
   31e86:	4798      	blx	r3
   31e88:	0003      	movs	r3, r0
   31e8a:	0018      	movs	r0, r3
   31e8c:	46bd      	mov	sp, r7
   31e8e:	b002      	add	sp, #8
   31e90:	bd80      	pop	{r7, pc}
   31e92:	46c0      	nop			; (mov r8, r8)
   31e94:	00030ff9 	.word	0x00030ff9

00031e98 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   31e98:	b590      	push	{r4, r7, lr}
   31e9a:	b085      	sub	sp, #20
   31e9c:	af00      	add	r7, sp, #0
   31e9e:	6078      	str	r0, [r7, #4]
	int len = 0;
   31ea0:	2300      	movs	r3, #0
   31ea2:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   31ea4:	687b      	ldr	r3, [r7, #4]
   31ea6:	7a1b      	ldrb	r3, [r3, #8]
   31ea8:	2b03      	cmp	r3, #3
   31eaa:	d102      	bne.n	31eb2 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   31eac:	230c      	movs	r3, #12
   31eae:	60fb      	str	r3, [r7, #12]
   31eb0:	e005      	b.n	31ebe <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   31eb2:	687b      	ldr	r3, [r7, #4]
   31eb4:	7a1b      	ldrb	r3, [r3, #8]
   31eb6:	2b04      	cmp	r3, #4
   31eb8:	d101      	bne.n	31ebe <MQTTSerialize_connectLength+0x26>
		len = 10;
   31eba:	230a      	movs	r3, #10
   31ebc:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   31ebe:	687b      	ldr	r3, [r7, #4]
   31ec0:	68d8      	ldr	r0, [r3, #12]
   31ec2:	6919      	ldr	r1, [r3, #16]
   31ec4:	695a      	ldr	r2, [r3, #20]
   31ec6:	4b25      	ldr	r3, [pc, #148]	; (31f5c <MQTTSerialize_connectLength+0xc4>)
   31ec8:	4798      	blx	r3
   31eca:	0003      	movs	r3, r0
   31ecc:	3302      	adds	r3, #2
   31ece:	68fa      	ldr	r2, [r7, #12]
   31ed0:	18d3      	adds	r3, r2, r3
   31ed2:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   31ed4:	687b      	ldr	r3, [r7, #4]
   31ed6:	7edb      	ldrb	r3, [r3, #27]
   31ed8:	2b00      	cmp	r3, #0
   31eda:	d013      	beq.n	31f04 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   31edc:	687b      	ldr	r3, [r7, #4]
   31ede:	6a58      	ldr	r0, [r3, #36]	; 0x24
   31ee0:	6a99      	ldr	r1, [r3, #40]	; 0x28
   31ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   31ee4:	4b1d      	ldr	r3, [pc, #116]	; (31f5c <MQTTSerialize_connectLength+0xc4>)
   31ee6:	4798      	blx	r3
   31ee8:	0003      	movs	r3, r0
   31eea:	1c9c      	adds	r4, r3, #2
   31eec:	687b      	ldr	r3, [r7, #4]
   31eee:	6b18      	ldr	r0, [r3, #48]	; 0x30
   31ef0:	6b59      	ldr	r1, [r3, #52]	; 0x34
   31ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   31ef4:	4b19      	ldr	r3, [pc, #100]	; (31f5c <MQTTSerialize_connectLength+0xc4>)
   31ef6:	4798      	blx	r3
   31ef8:	0003      	movs	r3, r0
   31efa:	18e3      	adds	r3, r4, r3
   31efc:	3302      	adds	r3, #2
   31efe:	68fa      	ldr	r2, [r7, #12]
   31f00:	18d3      	adds	r3, r2, r3
   31f02:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   31f04:	687b      	ldr	r3, [r7, #4]
   31f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   31f08:	2b00      	cmp	r3, #0
   31f0a:	d103      	bne.n	31f14 <MQTTSerialize_connectLength+0x7c>
   31f0c:	687b      	ldr	r3, [r7, #4]
   31f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   31f10:	2b00      	cmp	r3, #0
   31f12:	d00a      	beq.n	31f2a <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   31f14:	687b      	ldr	r3, [r7, #4]
   31f16:	6c18      	ldr	r0, [r3, #64]	; 0x40
   31f18:	6c59      	ldr	r1, [r3, #68]	; 0x44
   31f1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   31f1c:	4b0f      	ldr	r3, [pc, #60]	; (31f5c <MQTTSerialize_connectLength+0xc4>)
   31f1e:	4798      	blx	r3
   31f20:	0003      	movs	r3, r0
   31f22:	3302      	adds	r3, #2
   31f24:	68fa      	ldr	r2, [r7, #12]
   31f26:	18d3      	adds	r3, r2, r3
   31f28:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   31f2a:	687b      	ldr	r3, [r7, #4]
   31f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31f2e:	2b00      	cmp	r3, #0
   31f30:	d103      	bne.n	31f3a <MQTTSerialize_connectLength+0xa2>
   31f32:	687b      	ldr	r3, [r7, #4]
   31f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   31f36:	2b00      	cmp	r3, #0
   31f38:	d00a      	beq.n	31f50 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   31f3a:	687b      	ldr	r3, [r7, #4]
   31f3c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   31f3e:	6d19      	ldr	r1, [r3, #80]	; 0x50
   31f40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   31f42:	4b06      	ldr	r3, [pc, #24]	; (31f5c <MQTTSerialize_connectLength+0xc4>)
   31f44:	4798      	blx	r3
   31f46:	0003      	movs	r3, r0
   31f48:	3302      	adds	r3, #2
   31f4a:	68fa      	ldr	r2, [r7, #12]
   31f4c:	18d3      	adds	r3, r2, r3
   31f4e:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   31f50:	68fb      	ldr	r3, [r7, #12]
}
   31f52:	0018      	movs	r0, r3
   31f54:	46bd      	mov	sp, r7
   31f56:	b005      	add	sp, #20
   31f58:	bd90      	pop	{r4, r7, pc}
   31f5a:	46c0      	nop			; (mov r8, r8)
   31f5c:	00032909 	.word	0x00032909

00031f60 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   31f60:	b590      	push	{r4, r7, lr}
   31f62:	b08b      	sub	sp, #44	; 0x2c
   31f64:	af00      	add	r7, sp, #0
   31f66:	60f8      	str	r0, [r7, #12]
   31f68:	60b9      	str	r1, [r7, #8]
   31f6a:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   31f6c:	68fb      	ldr	r3, [r7, #12]
   31f6e:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   31f70:	2300      	movs	r3, #0
   31f72:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   31f74:	2300      	movs	r3, #0
   31f76:	617b      	str	r3, [r7, #20]
	int len = 0;
   31f78:	2300      	movs	r3, #0
   31f7a:	623b      	str	r3, [r7, #32]
	int rc = -1;
   31f7c:	2301      	movs	r3, #1
   31f7e:	425b      	negs	r3, r3
   31f80:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   31f82:	687b      	ldr	r3, [r7, #4]
   31f84:	0018      	movs	r0, r3
   31f86:	4b8c      	ldr	r3, [pc, #560]	; (321b8 <MQTTSerialize_connect+0x258>)
   31f88:	4798      	blx	r3
   31f8a:	0003      	movs	r3, r0
   31f8c:	623b      	str	r3, [r7, #32]
   31f8e:	6a3b      	ldr	r3, [r7, #32]
   31f90:	0018      	movs	r0, r3
   31f92:	4b8a      	ldr	r3, [pc, #552]	; (321bc <MQTTSerialize_connect+0x25c>)
   31f94:	4798      	blx	r3
   31f96:	0002      	movs	r2, r0
   31f98:	68bb      	ldr	r3, [r7, #8]
   31f9a:	429a      	cmp	r2, r3
   31f9c:	dd03      	ble.n	31fa6 <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   31f9e:	2302      	movs	r3, #2
   31fa0:	425b      	negs	r3, r3
   31fa2:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   31fa4:	e103      	b.n	321ae <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   31fa6:	2318      	movs	r3, #24
   31fa8:	18fb      	adds	r3, r7, r3
   31faa:	2200      	movs	r2, #0
   31fac:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   31fae:	2318      	movs	r3, #24
   31fb0:	18fb      	adds	r3, r7, r3
   31fb2:	781a      	ldrb	r2, [r3, #0]
   31fb4:	210f      	movs	r1, #15
   31fb6:	400a      	ands	r2, r1
   31fb8:	1c11      	adds	r1, r2, #0
   31fba:	2210      	movs	r2, #16
   31fbc:	430a      	orrs	r2, r1
   31fbe:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   31fc0:	2318      	movs	r3, #24
   31fc2:	18fb      	adds	r3, r7, r3
   31fc4:	781a      	ldrb	r2, [r3, #0]
   31fc6:	231c      	movs	r3, #28
   31fc8:	18fb      	adds	r3, r7, r3
   31fca:	0011      	movs	r1, r2
   31fcc:	0018      	movs	r0, r3
   31fce:	4b7c      	ldr	r3, [pc, #496]	; (321c0 <MQTTSerialize_connect+0x260>)
   31fd0:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   31fd2:	69fb      	ldr	r3, [r7, #28]
   31fd4:	6a3a      	ldr	r2, [r7, #32]
   31fd6:	0011      	movs	r1, r2
   31fd8:	0018      	movs	r0, r3
   31fda:	4b7a      	ldr	r3, [pc, #488]	; (321c4 <MQTTSerialize_connect+0x264>)
   31fdc:	4798      	blx	r3
   31fde:	0002      	movs	r2, r0
   31fe0:	69fb      	ldr	r3, [r7, #28]
   31fe2:	189b      	adds	r3, r3, r2
   31fe4:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   31fe6:	687b      	ldr	r3, [r7, #4]
   31fe8:	7a1b      	ldrb	r3, [r3, #8]
   31fea:	2b04      	cmp	r3, #4
   31fec:	d10d      	bne.n	3200a <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   31fee:	4a76      	ldr	r2, [pc, #472]	; (321c8 <MQTTSerialize_connect+0x268>)
   31ff0:	231c      	movs	r3, #28
   31ff2:	18fb      	adds	r3, r7, r3
   31ff4:	0011      	movs	r1, r2
   31ff6:	0018      	movs	r0, r3
   31ff8:	4b74      	ldr	r3, [pc, #464]	; (321cc <MQTTSerialize_connect+0x26c>)
   31ffa:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   31ffc:	231c      	movs	r3, #28
   31ffe:	18fb      	adds	r3, r7, r3
   32000:	2104      	movs	r1, #4
   32002:	0018      	movs	r0, r3
   32004:	4b6e      	ldr	r3, [pc, #440]	; (321c0 <MQTTSerialize_connect+0x260>)
   32006:	4798      	blx	r3
   32008:	e00c      	b.n	32024 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   3200a:	4a71      	ldr	r2, [pc, #452]	; (321d0 <MQTTSerialize_connect+0x270>)
   3200c:	231c      	movs	r3, #28
   3200e:	18fb      	adds	r3, r7, r3
   32010:	0011      	movs	r1, r2
   32012:	0018      	movs	r0, r3
   32014:	4b6d      	ldr	r3, [pc, #436]	; (321cc <MQTTSerialize_connect+0x26c>)
   32016:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   32018:	231c      	movs	r3, #28
   3201a:	18fb      	adds	r3, r7, r3
   3201c:	2103      	movs	r1, #3
   3201e:	0018      	movs	r0, r3
   32020:	4b67      	ldr	r3, [pc, #412]	; (321c0 <MQTTSerialize_connect+0x260>)
   32022:	4798      	blx	r3
	}

	flags.all = 0;
   32024:	2314      	movs	r3, #20
   32026:	18fb      	adds	r3, r7, r3
   32028:	2200      	movs	r2, #0
   3202a:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   3202c:	687b      	ldr	r3, [r7, #4]
   3202e:	7e9b      	ldrb	r3, [r3, #26]
   32030:	1c1a      	adds	r2, r3, #0
   32032:	2301      	movs	r3, #1
   32034:	4013      	ands	r3, r2
   32036:	b2da      	uxtb	r2, r3
   32038:	2314      	movs	r3, #20
   3203a:	18fb      	adds	r3, r7, r3
   3203c:	2101      	movs	r1, #1
   3203e:	400a      	ands	r2, r1
   32040:	1890      	adds	r0, r2, r2
   32042:	781a      	ldrb	r2, [r3, #0]
   32044:	2102      	movs	r1, #2
   32046:	438a      	bics	r2, r1
   32048:	1c11      	adds	r1, r2, #0
   3204a:	1c02      	adds	r2, r0, #0
   3204c:	430a      	orrs	r2, r1
   3204e:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   32050:	687b      	ldr	r3, [r7, #4]
   32052:	7edb      	ldrb	r3, [r3, #27]
   32054:	1e5a      	subs	r2, r3, #1
   32056:	4193      	sbcs	r3, r2
   32058:	b2da      	uxtb	r2, r3
   3205a:	2314      	movs	r3, #20
   3205c:	18fb      	adds	r3, r7, r3
   3205e:	2101      	movs	r1, #1
   32060:	400a      	ands	r2, r1
   32062:	0090      	lsls	r0, r2, #2
   32064:	781a      	ldrb	r2, [r3, #0]
   32066:	2104      	movs	r1, #4
   32068:	438a      	bics	r2, r1
   3206a:	1c11      	adds	r1, r2, #0
   3206c:	1c02      	adds	r2, r0, #0
   3206e:	430a      	orrs	r2, r1
   32070:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   32072:	2314      	movs	r3, #20
   32074:	18fb      	adds	r3, r7, r3
   32076:	781b      	ldrb	r3, [r3, #0]
   32078:	2204      	movs	r2, #4
   3207a:	4013      	ands	r3, r2
   3207c:	b2db      	uxtb	r3, r3
   3207e:	2b00      	cmp	r3, #0
   32080:	d025      	beq.n	320ce <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   32082:	687b      	ldr	r3, [r7, #4]
   32084:	223d      	movs	r2, #61	; 0x3d
   32086:	5c9b      	ldrb	r3, [r3, r2]
   32088:	1c1a      	adds	r2, r3, #0
   3208a:	2303      	movs	r3, #3
   3208c:	4013      	ands	r3, r2
   3208e:	b2da      	uxtb	r2, r3
   32090:	2314      	movs	r3, #20
   32092:	18fb      	adds	r3, r7, r3
   32094:	2103      	movs	r1, #3
   32096:	400a      	ands	r2, r1
   32098:	00d0      	lsls	r0, r2, #3
   3209a:	781a      	ldrb	r2, [r3, #0]
   3209c:	2118      	movs	r1, #24
   3209e:	438a      	bics	r2, r1
   320a0:	1c11      	adds	r1, r2, #0
   320a2:	1c02      	adds	r2, r0, #0
   320a4:	430a      	orrs	r2, r1
   320a6:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   320a8:	687b      	ldr	r3, [r7, #4]
   320aa:	223c      	movs	r2, #60	; 0x3c
   320ac:	5c9b      	ldrb	r3, [r3, r2]
   320ae:	1c1a      	adds	r2, r3, #0
   320b0:	2301      	movs	r3, #1
   320b2:	4013      	ands	r3, r2
   320b4:	b2da      	uxtb	r2, r3
   320b6:	2314      	movs	r3, #20
   320b8:	18fb      	adds	r3, r7, r3
   320ba:	2101      	movs	r1, #1
   320bc:	400a      	ands	r2, r1
   320be:	0150      	lsls	r0, r2, #5
   320c0:	781a      	ldrb	r2, [r3, #0]
   320c2:	2120      	movs	r1, #32
   320c4:	438a      	bics	r2, r1
   320c6:	1c11      	adds	r1, r2, #0
   320c8:	1c02      	adds	r2, r0, #0
   320ca:	430a      	orrs	r2, r1
   320cc:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   320ce:	687b      	ldr	r3, [r7, #4]
   320d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   320d2:	2b00      	cmp	r3, #0
   320d4:	d103      	bne.n	320de <MQTTSerialize_connect+0x17e>
   320d6:	687b      	ldr	r3, [r7, #4]
   320d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   320da:	2b00      	cmp	r3, #0
   320dc:	d006      	beq.n	320ec <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   320de:	2314      	movs	r3, #20
   320e0:	18fb      	adds	r3, r7, r3
   320e2:	781a      	ldrb	r2, [r3, #0]
   320e4:	2180      	movs	r1, #128	; 0x80
   320e6:	4249      	negs	r1, r1
   320e8:	430a      	orrs	r2, r1
   320ea:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   320ec:	687b      	ldr	r3, [r7, #4]
   320ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   320f0:	2b00      	cmp	r3, #0
   320f2:	d103      	bne.n	320fc <MQTTSerialize_connect+0x19c>
   320f4:	687b      	ldr	r3, [r7, #4]
   320f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   320f8:	2b00      	cmp	r3, #0
   320fa:	d005      	beq.n	32108 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   320fc:	2314      	movs	r3, #20
   320fe:	18fb      	adds	r3, r7, r3
   32100:	781a      	ldrb	r2, [r3, #0]
   32102:	2140      	movs	r1, #64	; 0x40
   32104:	430a      	orrs	r2, r1
   32106:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   32108:	2314      	movs	r3, #20
   3210a:	18fb      	adds	r3, r7, r3
   3210c:	781a      	ldrb	r2, [r3, #0]
   3210e:	231c      	movs	r3, #28
   32110:	18fb      	adds	r3, r7, r3
   32112:	0011      	movs	r1, r2
   32114:	0018      	movs	r0, r3
   32116:	4b2a      	ldr	r3, [pc, #168]	; (321c0 <MQTTSerialize_connect+0x260>)
   32118:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   3211a:	687b      	ldr	r3, [r7, #4]
   3211c:	8b1b      	ldrh	r3, [r3, #24]
   3211e:	001a      	movs	r2, r3
   32120:	231c      	movs	r3, #28
   32122:	18fb      	adds	r3, r7, r3
   32124:	0011      	movs	r1, r2
   32126:	0018      	movs	r0, r3
   32128:	4b2a      	ldr	r3, [pc, #168]	; (321d4 <MQTTSerialize_connect+0x274>)
   3212a:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   3212c:	687b      	ldr	r3, [r7, #4]
   3212e:	221c      	movs	r2, #28
   32130:	18b8      	adds	r0, r7, r2
   32132:	68d9      	ldr	r1, [r3, #12]
   32134:	691a      	ldr	r2, [r3, #16]
   32136:	695b      	ldr	r3, [r3, #20]
   32138:	4c27      	ldr	r4, [pc, #156]	; (321d8 <MQTTSerialize_connect+0x278>)
   3213a:	47a0      	blx	r4
	if (options->willFlag)
   3213c:	687b      	ldr	r3, [r7, #4]
   3213e:	7edb      	ldrb	r3, [r3, #27]
   32140:	2b00      	cmp	r3, #0
   32142:	d00f      	beq.n	32164 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   32144:	687b      	ldr	r3, [r7, #4]
   32146:	221c      	movs	r2, #28
   32148:	18b8      	adds	r0, r7, r2
   3214a:	6a59      	ldr	r1, [r3, #36]	; 0x24
   3214c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   3214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   32150:	4c21      	ldr	r4, [pc, #132]	; (321d8 <MQTTSerialize_connect+0x278>)
   32152:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   32154:	687b      	ldr	r3, [r7, #4]
   32156:	221c      	movs	r2, #28
   32158:	18b8      	adds	r0, r7, r2
   3215a:	6b19      	ldr	r1, [r3, #48]	; 0x30
   3215c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   3215e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   32160:	4c1d      	ldr	r4, [pc, #116]	; (321d8 <MQTTSerialize_connect+0x278>)
   32162:	47a0      	blx	r4
	}
	if (flags.bits.username)
   32164:	2314      	movs	r3, #20
   32166:	18fb      	adds	r3, r7, r3
   32168:	781b      	ldrb	r3, [r3, #0]
   3216a:	227f      	movs	r2, #127	; 0x7f
   3216c:	4393      	bics	r3, r2
   3216e:	b2db      	uxtb	r3, r3
   32170:	2b00      	cmp	r3, #0
   32172:	d007      	beq.n	32184 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   32174:	687b      	ldr	r3, [r7, #4]
   32176:	221c      	movs	r2, #28
   32178:	18b8      	adds	r0, r7, r2
   3217a:	6c19      	ldr	r1, [r3, #64]	; 0x40
   3217c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   3217e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   32180:	4c15      	ldr	r4, [pc, #84]	; (321d8 <MQTTSerialize_connect+0x278>)
   32182:	47a0      	blx	r4
	if (flags.bits.password)
   32184:	2314      	movs	r3, #20
   32186:	18fb      	adds	r3, r7, r3
   32188:	781b      	ldrb	r3, [r3, #0]
   3218a:	2240      	movs	r2, #64	; 0x40
   3218c:	4013      	ands	r3, r2
   3218e:	b2db      	uxtb	r3, r3
   32190:	2b00      	cmp	r3, #0
   32192:	d007      	beq.n	321a4 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   32194:	687b      	ldr	r3, [r7, #4]
   32196:	221c      	movs	r2, #28
   32198:	18b8      	adds	r0, r7, r2
   3219a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   3219c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   3219e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   321a0:	4c0d      	ldr	r4, [pc, #52]	; (321d8 <MQTTSerialize_connect+0x278>)
   321a2:	47a0      	blx	r4

	rc = ptr - buf;
   321a4:	69fb      	ldr	r3, [r7, #28]
   321a6:	001a      	movs	r2, r3
   321a8:	68fb      	ldr	r3, [r7, #12]
   321aa:	1ad3      	subs	r3, r2, r3
   321ac:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   321ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   321b0:	0018      	movs	r0, r3
   321b2:	46bd      	mov	sp, r7
   321b4:	b00b      	add	sp, #44	; 0x2c
   321b6:	bd90      	pop	{r4, r7, pc}
   321b8:	00031e99 	.word	0x00031e99
   321bc:	0003262d 	.word	0x0003262d
   321c0:	0003274f 	.word	0x0003274f
   321c4:	00032535 	.word	0x00032535
   321c8:	0003cf08 	.word	0x0003cf08
   321cc:	000327d1 	.word	0x000327d1
   321d0:	0003cf10 	.word	0x0003cf10
   321d4:	00032779 	.word	0x00032779
   321d8:	00032821 	.word	0x00032821

000321dc <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   321dc:	b580      	push	{r7, lr}
   321de:	b08a      	sub	sp, #40	; 0x28
   321e0:	af00      	add	r7, sp, #0
   321e2:	60f8      	str	r0, [r7, #12]
   321e4:	60b9      	str	r1, [r7, #8]
   321e6:	607a      	str	r2, [r7, #4]
   321e8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   321ea:	2300      	movs	r3, #0
   321ec:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   321ee:	687b      	ldr	r3, [r7, #4]
   321f0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   321f2:	2300      	movs	r3, #0
   321f4:	623b      	str	r3, [r7, #32]
	int rc = 0;
   321f6:	2300      	movs	r3, #0
   321f8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   321fa:	2300      	movs	r3, #0
   321fc:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   321fe:	2318      	movs	r3, #24
   32200:	18fb      	adds	r3, r7, r3
   32202:	0018      	movs	r0, r3
   32204:	4b25      	ldr	r3, [pc, #148]	; (3229c <MQTTDeserialize_connack+0xc0>)
   32206:	4798      	blx	r3
   32208:	0003      	movs	r3, r0
   3220a:	001a      	movs	r2, r3
   3220c:	231c      	movs	r3, #28
   3220e:	18fb      	adds	r3, r7, r3
   32210:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   32212:	231c      	movs	r3, #28
   32214:	18fb      	adds	r3, r7, r3
   32216:	781b      	ldrb	r3, [r3, #0]
   32218:	220f      	movs	r2, #15
   3221a:	4393      	bics	r3, r2
   3221c:	b2db      	uxtb	r3, r3
   3221e:	2b20      	cmp	r3, #32
   32220:	d134      	bne.n	3228c <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   32222:	69bb      	ldr	r3, [r7, #24]
   32224:	2214      	movs	r2, #20
   32226:	18ba      	adds	r2, r7, r2
   32228:	0011      	movs	r1, r2
   3222a:	0018      	movs	r0, r3
   3222c:	4b1c      	ldr	r3, [pc, #112]	; (322a0 <MQTTDeserialize_connack+0xc4>)
   3222e:	4798      	blx	r3
   32230:	0003      	movs	r3, r0
   32232:	627b      	str	r3, [r7, #36]	; 0x24
   32234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   32236:	69bb      	ldr	r3, [r7, #24]
   32238:	189b      	adds	r3, r3, r2
   3223a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   3223c:	69bb      	ldr	r3, [r7, #24]
   3223e:	697a      	ldr	r2, [r7, #20]
   32240:	189b      	adds	r3, r3, r2
   32242:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   32244:	6a3b      	ldr	r3, [r7, #32]
   32246:	69ba      	ldr	r2, [r7, #24]
   32248:	1a9b      	subs	r3, r3, r2
   3224a:	2b01      	cmp	r3, #1
   3224c:	dd20      	ble.n	32290 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   3224e:	2318      	movs	r3, #24
   32250:	18fb      	adds	r3, r7, r3
   32252:	0018      	movs	r0, r3
   32254:	4b11      	ldr	r3, [pc, #68]	; (3229c <MQTTDeserialize_connack+0xc0>)
   32256:	4798      	blx	r3
   32258:	0003      	movs	r3, r0
   3225a:	001a      	movs	r2, r3
   3225c:	2310      	movs	r3, #16
   3225e:	18fb      	adds	r3, r7, r3
   32260:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   32262:	2310      	movs	r3, #16
   32264:	18fb      	adds	r3, r7, r3
   32266:	781b      	ldrb	r3, [r3, #0]
   32268:	061b      	lsls	r3, r3, #24
   3226a:	0fdb      	lsrs	r3, r3, #31
   3226c:	b2db      	uxtb	r3, r3
   3226e:	001a      	movs	r2, r3
   32270:	68fb      	ldr	r3, [r7, #12]
   32272:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   32274:	2318      	movs	r3, #24
   32276:	18fb      	adds	r3, r7, r3
   32278:	0018      	movs	r0, r3
   3227a:	4b08      	ldr	r3, [pc, #32]	; (3229c <MQTTDeserialize_connack+0xc0>)
   3227c:	4798      	blx	r3
   3227e:	0003      	movs	r3, r0
   32280:	001a      	movs	r2, r3
   32282:	68bb      	ldr	r3, [r7, #8]
   32284:	701a      	strb	r2, [r3, #0]

	rc = 1;
   32286:	2301      	movs	r3, #1
   32288:	627b      	str	r3, [r7, #36]	; 0x24
   3228a:	e002      	b.n	32292 <MQTTDeserialize_connack+0xb6>
		goto exit;
   3228c:	46c0      	nop			; (mov r8, r8)
   3228e:	e000      	b.n	32292 <MQTTDeserialize_connack+0xb6>
		goto exit;
   32290:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   32294:	0018      	movs	r0, r3
   32296:	46bd      	mov	sp, r7
   32298:	b00a      	add	sp, #40	; 0x28
   3229a:	bd80      	pop	{r7, pc}
   3229c:	00032723 	.word	0x00032723
   322a0:	000326bd 	.word	0x000326bd

000322a4 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   322a4:	b580      	push	{r7, lr}
   322a6:	b088      	sub	sp, #32
   322a8:	af00      	add	r7, sp, #0
   322aa:	60f8      	str	r0, [r7, #12]
   322ac:	60b9      	str	r1, [r7, #8]
   322ae:	1dfb      	adds	r3, r7, #7
   322b0:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   322b2:	2300      	movs	r3, #0
   322b4:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   322b6:	2301      	movs	r3, #1
   322b8:	425b      	negs	r3, r3
   322ba:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   322bc:	68fb      	ldr	r3, [r7, #12]
   322be:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   322c0:	68bb      	ldr	r3, [r7, #8]
   322c2:	2b01      	cmp	r3, #1
   322c4:	dc03      	bgt.n	322ce <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   322c6:	2302      	movs	r3, #2
   322c8:	425b      	negs	r3, r3
   322ca:	61fb      	str	r3, [r7, #28]
		goto exit;
   322cc:	e029      	b.n	32322 <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   322ce:	2318      	movs	r3, #24
   322d0:	18fb      	adds	r3, r7, r3
   322d2:	2200      	movs	r2, #0
   322d4:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   322d6:	1dfb      	adds	r3, r7, #7
   322d8:	781b      	ldrb	r3, [r3, #0]
   322da:	220f      	movs	r2, #15
   322dc:	4013      	ands	r3, r2
   322de:	b2da      	uxtb	r2, r3
   322e0:	2318      	movs	r3, #24
   322e2:	18fb      	adds	r3, r7, r3
   322e4:	0110      	lsls	r0, r2, #4
   322e6:	781a      	ldrb	r2, [r3, #0]
   322e8:	210f      	movs	r1, #15
   322ea:	400a      	ands	r2, r1
   322ec:	1c11      	adds	r1, r2, #0
   322ee:	1c02      	adds	r2, r0, #0
   322f0:	430a      	orrs	r2, r1
   322f2:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   322f4:	2318      	movs	r3, #24
   322f6:	18fb      	adds	r3, r7, r3
   322f8:	781a      	ldrb	r2, [r3, #0]
   322fa:	2314      	movs	r3, #20
   322fc:	18fb      	adds	r3, r7, r3
   322fe:	0011      	movs	r1, r2
   32300:	0018      	movs	r0, r3
   32302:	4b0a      	ldr	r3, [pc, #40]	; (3232c <MQTTSerialize_zero+0x88>)
   32304:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   32306:	697b      	ldr	r3, [r7, #20]
   32308:	2100      	movs	r1, #0
   3230a:	0018      	movs	r0, r3
   3230c:	4b08      	ldr	r3, [pc, #32]	; (32330 <MQTTSerialize_zero+0x8c>)
   3230e:	4798      	blx	r3
   32310:	0002      	movs	r2, r0
   32312:	697b      	ldr	r3, [r7, #20]
   32314:	189b      	adds	r3, r3, r2
   32316:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   32318:	697b      	ldr	r3, [r7, #20]
   3231a:	001a      	movs	r2, r3
   3231c:	68fb      	ldr	r3, [r7, #12]
   3231e:	1ad3      	subs	r3, r2, r3
   32320:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32322:	69fb      	ldr	r3, [r7, #28]
}
   32324:	0018      	movs	r0, r3
   32326:	46bd      	mov	sp, r7
   32328:	b008      	add	sp, #32
   3232a:	bd80      	pop	{r7, pc}
   3232c:	0003274f 	.word	0x0003274f
   32330:	00032535 	.word	0x00032535

00032334 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   32334:	b580      	push	{r7, lr}
   32336:	b082      	sub	sp, #8
   32338:	af00      	add	r7, sp, #0
   3233a:	6078      	str	r0, [r7, #4]
   3233c:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   3233e:	6839      	ldr	r1, [r7, #0]
   32340:	687b      	ldr	r3, [r7, #4]
   32342:	220e      	movs	r2, #14
   32344:	0018      	movs	r0, r3
   32346:	4b03      	ldr	r3, [pc, #12]	; (32354 <MQTTSerialize_disconnect+0x20>)
   32348:	4798      	blx	r3
   3234a:	0003      	movs	r3, r0
}
   3234c:	0018      	movs	r0, r3
   3234e:	46bd      	mov	sp, r7
   32350:	b002      	add	sp, #8
   32352:	bd80      	pop	{r7, pc}
   32354:	000322a5 	.word	0x000322a5

00032358 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   32358:	b580      	push	{r7, lr}
   3235a:	b082      	sub	sp, #8
   3235c:	af00      	add	r7, sp, #0
   3235e:	6078      	str	r0, [r7, #4]
   32360:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   32362:	6839      	ldr	r1, [r7, #0]
   32364:	687b      	ldr	r3, [r7, #4]
   32366:	220c      	movs	r2, #12
   32368:	0018      	movs	r0, r3
   3236a:	4b03      	ldr	r3, [pc, #12]	; (32378 <MQTTSerialize_pingreq+0x20>)
   3236c:	4798      	blx	r3
   3236e:	0003      	movs	r3, r0
}
   32370:	0018      	movs	r0, r3
   32372:	46bd      	mov	sp, r7
   32374:	b002      	add	sp, #8
   32376:	bd80      	pop	{r7, pc}
   32378:	000322a5 	.word	0x000322a5

0003237c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   3237c:	b580      	push	{r7, lr}
   3237e:	b08a      	sub	sp, #40	; 0x28
   32380:	af00      	add	r7, sp, #0
   32382:	60f8      	str	r0, [r7, #12]
   32384:	60b9      	str	r1, [r7, #8]
   32386:	607a      	str	r2, [r7, #4]
   32388:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   3238a:	2300      	movs	r3, #0
   3238c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   3238e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   32390:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   32392:	2300      	movs	r3, #0
   32394:	623b      	str	r3, [r7, #32]
	int rc = 0;
   32396:	2300      	movs	r3, #0
   32398:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   3239a:	2300      	movs	r3, #0
   3239c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   3239e:	2318      	movs	r3, #24
   323a0:	18fb      	adds	r3, r7, r3
   323a2:	0018      	movs	r0, r3
   323a4:	4b32      	ldr	r3, [pc, #200]	; (32470 <MQTTDeserialize_publish+0xf4>)
   323a6:	4798      	blx	r3
   323a8:	0003      	movs	r3, r0
   323aa:	001a      	movs	r2, r3
   323ac:	231c      	movs	r3, #28
   323ae:	18fb      	adds	r3, r7, r3
   323b0:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   323b2:	231c      	movs	r3, #28
   323b4:	18fb      	adds	r3, r7, r3
   323b6:	781b      	ldrb	r3, [r3, #0]
   323b8:	220f      	movs	r2, #15
   323ba:	4393      	bics	r3, r2
   323bc:	b2db      	uxtb	r3, r3
   323be:	2b30      	cmp	r3, #48	; 0x30
   323c0:	d150      	bne.n	32464 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   323c2:	231c      	movs	r3, #28
   323c4:	18fb      	adds	r3, r7, r3
   323c6:	781b      	ldrb	r3, [r3, #0]
   323c8:	071b      	lsls	r3, r3, #28
   323ca:	0fdb      	lsrs	r3, r3, #31
   323cc:	b2db      	uxtb	r3, r3
   323ce:	001a      	movs	r2, r3
   323d0:	68fb      	ldr	r3, [r7, #12]
   323d2:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   323d4:	231c      	movs	r3, #28
   323d6:	18fb      	adds	r3, r7, r3
   323d8:	781b      	ldrb	r3, [r3, #0]
   323da:	075b      	lsls	r3, r3, #29
   323dc:	0f9b      	lsrs	r3, r3, #30
   323de:	b2db      	uxtb	r3, r3
   323e0:	001a      	movs	r2, r3
   323e2:	68bb      	ldr	r3, [r7, #8]
   323e4:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   323e6:	231c      	movs	r3, #28
   323e8:	18fb      	adds	r3, r7, r3
   323ea:	781b      	ldrb	r3, [r3, #0]
   323ec:	07db      	lsls	r3, r3, #31
   323ee:	0fdb      	lsrs	r3, r3, #31
   323f0:	b2db      	uxtb	r3, r3
   323f2:	001a      	movs	r2, r3
   323f4:	687b      	ldr	r3, [r7, #4]
   323f6:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   323f8:	69bb      	ldr	r3, [r7, #24]
   323fa:	2214      	movs	r2, #20
   323fc:	18ba      	adds	r2, r7, r2
   323fe:	0011      	movs	r1, r2
   32400:	0018      	movs	r0, r3
   32402:	4b1c      	ldr	r3, [pc, #112]	; (32474 <MQTTDeserialize_publish+0xf8>)
   32404:	4798      	blx	r3
   32406:	0003      	movs	r3, r0
   32408:	627b      	str	r3, [r7, #36]	; 0x24
   3240a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   3240c:	69bb      	ldr	r3, [r7, #24]
   3240e:	189b      	adds	r3, r3, r2
   32410:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   32412:	69bb      	ldr	r3, [r7, #24]
   32414:	697a      	ldr	r2, [r7, #20]
   32416:	189b      	adds	r3, r3, r2
   32418:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   3241a:	6a3a      	ldr	r2, [r7, #32]
   3241c:	2318      	movs	r3, #24
   3241e:	18f9      	adds	r1, r7, r3
   32420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   32422:	0018      	movs	r0, r3
   32424:	4b14      	ldr	r3, [pc, #80]	; (32478 <MQTTDeserialize_publish+0xfc>)
   32426:	4798      	blx	r3
   32428:	1e03      	subs	r3, r0, #0
   3242a:	d01c      	beq.n	32466 <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   3242c:	6a3b      	ldr	r3, [r7, #32]
   3242e:	69ba      	ldr	r2, [r7, #24]
   32430:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   32432:	d418      	bmi.n	32466 <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   32434:	68bb      	ldr	r3, [r7, #8]
   32436:	681b      	ldr	r3, [r3, #0]
   32438:	2b00      	cmp	r3, #0
   3243a:	dd08      	ble.n	3244e <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   3243c:	2318      	movs	r3, #24
   3243e:	18fb      	adds	r3, r7, r3
   32440:	0018      	movs	r0, r3
   32442:	4b0e      	ldr	r3, [pc, #56]	; (3247c <MQTTDeserialize_publish+0x100>)
   32444:	4798      	blx	r3
   32446:	0003      	movs	r3, r0
   32448:	b29a      	uxth	r2, r3
   3244a:	683b      	ldr	r3, [r7, #0]
   3244c:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   3244e:	6a3b      	ldr	r3, [r7, #32]
   32450:	69ba      	ldr	r2, [r7, #24]
   32452:	1a9a      	subs	r2, r3, r2
   32454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   32456:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   32458:	69ba      	ldr	r2, [r7, #24]
   3245a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   3245c:	601a      	str	r2, [r3, #0]
	rc = 1;
   3245e:	2301      	movs	r3, #1
   32460:	627b      	str	r3, [r7, #36]	; 0x24
   32462:	e000      	b.n	32466 <MQTTDeserialize_publish+0xea>
		goto exit;
   32464:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   32468:	0018      	movs	r0, r3
   3246a:	46bd      	mov	sp, r7
   3246c:	b00a      	add	sp, #40	; 0x28
   3246e:	bd80      	pop	{r7, pc}
   32470:	00032723 	.word	0x00032723
   32474:	000326bd 	.word	0x000326bd
   32478:	000328a1 	.word	0x000328a1
   3247c:	000326f1 	.word	0x000326f1

00032480 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   32480:	b580      	push	{r7, lr}
   32482:	b08a      	sub	sp, #40	; 0x28
   32484:	af00      	add	r7, sp, #0
   32486:	60f8      	str	r0, [r7, #12]
   32488:	60b9      	str	r1, [r7, #8]
   3248a:	607a      	str	r2, [r7, #4]
   3248c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   3248e:	2300      	movs	r3, #0
   32490:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   32492:	683b      	ldr	r3, [r7, #0]
   32494:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   32496:	2300      	movs	r3, #0
   32498:	623b      	str	r3, [r7, #32]
	int rc = 0;
   3249a:	2300      	movs	r3, #0
   3249c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   3249e:	2318      	movs	r3, #24
   324a0:	18fb      	adds	r3, r7, r3
   324a2:	0018      	movs	r0, r3
   324a4:	4b20      	ldr	r3, [pc, #128]	; (32528 <MQTTDeserialize_ack+0xa8>)
   324a6:	4798      	blx	r3
   324a8:	0003      	movs	r3, r0
   324aa:	001a      	movs	r2, r3
   324ac:	231c      	movs	r3, #28
   324ae:	18fb      	adds	r3, r7, r3
   324b0:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   324b2:	231c      	movs	r3, #28
   324b4:	18fb      	adds	r3, r7, r3
   324b6:	781b      	ldrb	r3, [r3, #0]
   324b8:	071b      	lsls	r3, r3, #28
   324ba:	0fdb      	lsrs	r3, r3, #31
   324bc:	b2db      	uxtb	r3, r3
   324be:	001a      	movs	r2, r3
   324c0:	68bb      	ldr	r3, [r7, #8]
   324c2:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   324c4:	231c      	movs	r3, #28
   324c6:	18fb      	adds	r3, r7, r3
   324c8:	781b      	ldrb	r3, [r3, #0]
   324ca:	061b      	lsls	r3, r3, #24
   324cc:	0f1b      	lsrs	r3, r3, #28
   324ce:	b2db      	uxtb	r3, r3
   324d0:	001a      	movs	r2, r3
   324d2:	68fb      	ldr	r3, [r7, #12]
   324d4:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   324d6:	69bb      	ldr	r3, [r7, #24]
   324d8:	2214      	movs	r2, #20
   324da:	18ba      	adds	r2, r7, r2
   324dc:	0011      	movs	r1, r2
   324de:	0018      	movs	r0, r3
   324e0:	4b12      	ldr	r3, [pc, #72]	; (3252c <MQTTDeserialize_ack+0xac>)
   324e2:	4798      	blx	r3
   324e4:	0003      	movs	r3, r0
   324e6:	627b      	str	r3, [r7, #36]	; 0x24
   324e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   324ea:	69bb      	ldr	r3, [r7, #24]
   324ec:	189b      	adds	r3, r3, r2
   324ee:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   324f0:	69bb      	ldr	r3, [r7, #24]
   324f2:	697a      	ldr	r2, [r7, #20]
   324f4:	189b      	adds	r3, r3, r2
   324f6:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   324f8:	6a3b      	ldr	r3, [r7, #32]
   324fa:	69ba      	ldr	r2, [r7, #24]
   324fc:	1a9b      	subs	r3, r3, r2
   324fe:	2b01      	cmp	r3, #1
   32500:	dd0b      	ble.n	3251a <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   32502:	2318      	movs	r3, #24
   32504:	18fb      	adds	r3, r7, r3
   32506:	0018      	movs	r0, r3
   32508:	4b09      	ldr	r3, [pc, #36]	; (32530 <MQTTDeserialize_ack+0xb0>)
   3250a:	4798      	blx	r3
   3250c:	0003      	movs	r3, r0
   3250e:	b29a      	uxth	r2, r3
   32510:	687b      	ldr	r3, [r7, #4]
   32512:	801a      	strh	r2, [r3, #0]

	rc = 1;
   32514:	2301      	movs	r3, #1
   32516:	627b      	str	r3, [r7, #36]	; 0x24
   32518:	e000      	b.n	3251c <MQTTDeserialize_ack+0x9c>
		goto exit;
   3251a:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   3251e:	0018      	movs	r0, r3
   32520:	46bd      	mov	sp, r7
   32522:	b00a      	add	sp, #40	; 0x28
   32524:	bd80      	pop	{r7, pc}
   32526:	46c0      	nop			; (mov r8, r8)
   32528:	00032723 	.word	0x00032723
   3252c:	000326bd 	.word	0x000326bd
   32530:	000326f1 	.word	0x000326f1

00032534 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   32534:	b580      	push	{r7, lr}
   32536:	b084      	sub	sp, #16
   32538:	af00      	add	r7, sp, #0
   3253a:	6078      	str	r0, [r7, #4]
   3253c:	6039      	str	r1, [r7, #0]
	int rc = 0;
   3253e:	2300      	movs	r3, #0
   32540:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   32542:	683b      	ldr	r3, [r7, #0]
   32544:	4a17      	ldr	r2, [pc, #92]	; (325a4 <MQTTPacket_encode+0x70>)
   32546:	4013      	ands	r3, r2
   32548:	d504      	bpl.n	32554 <MQTTPacket_encode+0x20>
   3254a:	3b01      	subs	r3, #1
   3254c:	2280      	movs	r2, #128	; 0x80
   3254e:	4252      	negs	r2, r2
   32550:	4313      	orrs	r3, r2
   32552:	3301      	adds	r3, #1
   32554:	001a      	movs	r2, r3
   32556:	230b      	movs	r3, #11
   32558:	18fb      	adds	r3, r7, r3
   3255a:	701a      	strb	r2, [r3, #0]
		length /= 128;
   3255c:	683b      	ldr	r3, [r7, #0]
   3255e:	2b00      	cmp	r3, #0
   32560:	da00      	bge.n	32564 <MQTTPacket_encode+0x30>
   32562:	337f      	adds	r3, #127	; 0x7f
   32564:	11db      	asrs	r3, r3, #7
   32566:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   32568:	683b      	ldr	r3, [r7, #0]
   3256a:	2b00      	cmp	r3, #0
   3256c:	dd08      	ble.n	32580 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   3256e:	230b      	movs	r3, #11
   32570:	18fb      	adds	r3, r7, r3
   32572:	220b      	movs	r2, #11
   32574:	18ba      	adds	r2, r7, r2
   32576:	7812      	ldrb	r2, [r2, #0]
   32578:	2180      	movs	r1, #128	; 0x80
   3257a:	4249      	negs	r1, r1
   3257c:	430a      	orrs	r2, r1
   3257e:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   32580:	68fb      	ldr	r3, [r7, #12]
   32582:	1c5a      	adds	r2, r3, #1
   32584:	60fa      	str	r2, [r7, #12]
   32586:	001a      	movs	r2, r3
   32588:	687b      	ldr	r3, [r7, #4]
   3258a:	189b      	adds	r3, r3, r2
   3258c:	220b      	movs	r2, #11
   3258e:	18ba      	adds	r2, r7, r2
   32590:	7812      	ldrb	r2, [r2, #0]
   32592:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   32594:	683b      	ldr	r3, [r7, #0]
   32596:	2b00      	cmp	r3, #0
   32598:	dcd3      	bgt.n	32542 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   3259a:	68fb      	ldr	r3, [r7, #12]
}
   3259c:	0018      	movs	r0, r3
   3259e:	46bd      	mov	sp, r7
   325a0:	b004      	add	sp, #16
   325a2:	bd80      	pop	{r7, pc}
   325a4:	8000007f 	.word	0x8000007f

000325a8 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   325a8:	b580      	push	{r7, lr}
   325aa:	b086      	sub	sp, #24
   325ac:	af00      	add	r7, sp, #0
   325ae:	6078      	str	r0, [r7, #4]
   325b0:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   325b2:	2301      	movs	r3, #1
   325b4:	617b      	str	r3, [r7, #20]
	int len = 0;
   325b6:	2300      	movs	r3, #0
   325b8:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   325ba:	683b      	ldr	r3, [r7, #0]
   325bc:	2200      	movs	r2, #0
   325be:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   325c0:	2301      	movs	r3, #1
   325c2:	425b      	negs	r3, r3
   325c4:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   325c6:	693b      	ldr	r3, [r7, #16]
   325c8:	3301      	adds	r3, #1
   325ca:	613b      	str	r3, [r7, #16]
   325cc:	693b      	ldr	r3, [r7, #16]
   325ce:	2b04      	cmp	r3, #4
   325d0:	dd03      	ble.n	325da <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   325d2:	2301      	movs	r3, #1
   325d4:	425b      	negs	r3, r3
   325d6:	60fb      	str	r3, [r7, #12]
			goto exit;
   325d8:	e022      	b.n	32620 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   325da:	230b      	movs	r3, #11
   325dc:	18fa      	adds	r2, r7, r3
   325de:	687b      	ldr	r3, [r7, #4]
   325e0:	2101      	movs	r1, #1
   325e2:	0010      	movs	r0, r2
   325e4:	4798      	blx	r3
   325e6:	0003      	movs	r3, r0
   325e8:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   325ea:	68fb      	ldr	r3, [r7, #12]
   325ec:	2b01      	cmp	r3, #1
   325ee:	d116      	bne.n	3261e <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   325f0:	683b      	ldr	r3, [r7, #0]
   325f2:	681a      	ldr	r2, [r3, #0]
   325f4:	230b      	movs	r3, #11
   325f6:	18fb      	adds	r3, r7, r3
   325f8:	781b      	ldrb	r3, [r3, #0]
   325fa:	0019      	movs	r1, r3
   325fc:	237f      	movs	r3, #127	; 0x7f
   325fe:	400b      	ands	r3, r1
   32600:	6979      	ldr	r1, [r7, #20]
   32602:	434b      	muls	r3, r1
   32604:	18d2      	adds	r2, r2, r3
   32606:	683b      	ldr	r3, [r7, #0]
   32608:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   3260a:	697b      	ldr	r3, [r7, #20]
   3260c:	01db      	lsls	r3, r3, #7
   3260e:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   32610:	230b      	movs	r3, #11
   32612:	18fb      	adds	r3, r7, r3
   32614:	781b      	ldrb	r3, [r3, #0]
   32616:	b25b      	sxtb	r3, r3
   32618:	2b00      	cmp	r3, #0
   3261a:	dbd1      	blt.n	325c0 <MQTTPacket_decode+0x18>
   3261c:	e000      	b.n	32620 <MQTTPacket_decode+0x78>
			goto exit;
   3261e:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   32620:	693b      	ldr	r3, [r7, #16]
}
   32622:	0018      	movs	r0, r3
   32624:	46bd      	mov	sp, r7
   32626:	b006      	add	sp, #24
   32628:	bd80      	pop	{r7, pc}
	...

0003262c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   3262c:	b580      	push	{r7, lr}
   3262e:	b082      	sub	sp, #8
   32630:	af00      	add	r7, sp, #0
   32632:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   32634:	687b      	ldr	r3, [r7, #4]
   32636:	3301      	adds	r3, #1
   32638:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   3263a:	687b      	ldr	r3, [r7, #4]
   3263c:	2b7f      	cmp	r3, #127	; 0x7f
   3263e:	dc03      	bgt.n	32648 <MQTTPacket_len+0x1c>
		rem_len += 1;
   32640:	687b      	ldr	r3, [r7, #4]
   32642:	3301      	adds	r3, #1
   32644:	607b      	str	r3, [r7, #4]
   32646:	e012      	b.n	3266e <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   32648:	687b      	ldr	r3, [r7, #4]
   3264a:	4a0b      	ldr	r2, [pc, #44]	; (32678 <MQTTPacket_len+0x4c>)
   3264c:	4293      	cmp	r3, r2
   3264e:	dc03      	bgt.n	32658 <MQTTPacket_len+0x2c>
		rem_len += 2;
   32650:	687b      	ldr	r3, [r7, #4]
   32652:	3302      	adds	r3, #2
   32654:	607b      	str	r3, [r7, #4]
   32656:	e00a      	b.n	3266e <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   32658:	687b      	ldr	r3, [r7, #4]
   3265a:	4a08      	ldr	r2, [pc, #32]	; (3267c <MQTTPacket_len+0x50>)
   3265c:	4293      	cmp	r3, r2
   3265e:	dc03      	bgt.n	32668 <MQTTPacket_len+0x3c>
		rem_len += 3;
   32660:	687b      	ldr	r3, [r7, #4]
   32662:	3303      	adds	r3, #3
   32664:	607b      	str	r3, [r7, #4]
   32666:	e002      	b.n	3266e <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   32668:	687b      	ldr	r3, [r7, #4]
   3266a:	3304      	adds	r3, #4
   3266c:	607b      	str	r3, [r7, #4]
	return rem_len;
   3266e:	687b      	ldr	r3, [r7, #4]
}
   32670:	0018      	movs	r0, r3
   32672:	46bd      	mov	sp, r7
   32674:	b002      	add	sp, #8
   32676:	bd80      	pop	{r7, pc}
   32678:	00003fff 	.word	0x00003fff
   3267c:	001ffffe 	.word	0x001ffffe

00032680 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   32680:	b580      	push	{r7, lr}
   32682:	b084      	sub	sp, #16
   32684:	af00      	add	r7, sp, #0
   32686:	6078      	str	r0, [r7, #4]
   32688:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   3268a:	2300      	movs	r3, #0
   3268c:	60fb      	str	r3, [r7, #12]
   3268e:	e00a      	b.n	326a6 <bufchar+0x26>
		*c = *bufptr++;
   32690:	4b09      	ldr	r3, [pc, #36]	; (326b8 <bufchar+0x38>)
   32692:	681b      	ldr	r3, [r3, #0]
   32694:	1c59      	adds	r1, r3, #1
   32696:	4a08      	ldr	r2, [pc, #32]	; (326b8 <bufchar+0x38>)
   32698:	6011      	str	r1, [r2, #0]
   3269a:	781a      	ldrb	r2, [r3, #0]
   3269c:	687b      	ldr	r3, [r7, #4]
   3269e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   326a0:	68fb      	ldr	r3, [r7, #12]
   326a2:	3301      	adds	r3, #1
   326a4:	60fb      	str	r3, [r7, #12]
   326a6:	68fa      	ldr	r2, [r7, #12]
   326a8:	683b      	ldr	r3, [r7, #0]
   326aa:	429a      	cmp	r2, r3
   326ac:	dbf0      	blt.n	32690 <bufchar+0x10>
	return count;
   326ae:	683b      	ldr	r3, [r7, #0]
}
   326b0:	0018      	movs	r0, r3
   326b2:	46bd      	mov	sp, r7
   326b4:	b004      	add	sp, #16
   326b6:	bd80      	pop	{r7, pc}
   326b8:	20004564 	.word	0x20004564

000326bc <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   326bc:	b580      	push	{r7, lr}
   326be:	b082      	sub	sp, #8
   326c0:	af00      	add	r7, sp, #0
   326c2:	6078      	str	r0, [r7, #4]
   326c4:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   326c6:	4b07      	ldr	r3, [pc, #28]	; (326e4 <MQTTPacket_decodeBuf+0x28>)
   326c8:	687a      	ldr	r2, [r7, #4]
   326ca:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   326cc:	683a      	ldr	r2, [r7, #0]
   326ce:	4b06      	ldr	r3, [pc, #24]	; (326e8 <MQTTPacket_decodeBuf+0x2c>)
   326d0:	0011      	movs	r1, r2
   326d2:	0018      	movs	r0, r3
   326d4:	4b05      	ldr	r3, [pc, #20]	; (326ec <MQTTPacket_decodeBuf+0x30>)
   326d6:	4798      	blx	r3
   326d8:	0003      	movs	r3, r0
}
   326da:	0018      	movs	r0, r3
   326dc:	46bd      	mov	sp, r7
   326de:	b002      	add	sp, #8
   326e0:	bd80      	pop	{r7, pc}
   326e2:	46c0      	nop			; (mov r8, r8)
   326e4:	20004564 	.word	0x20004564
   326e8:	00032681 	.word	0x00032681
   326ec:	000325a9 	.word	0x000325a9

000326f0 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   326f0:	b580      	push	{r7, lr}
   326f2:	b084      	sub	sp, #16
   326f4:	af00      	add	r7, sp, #0
   326f6:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   326f8:	687b      	ldr	r3, [r7, #4]
   326fa:	681b      	ldr	r3, [r3, #0]
   326fc:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   326fe:	68fb      	ldr	r3, [r7, #12]
   32700:	781b      	ldrb	r3, [r3, #0]
   32702:	021b      	lsls	r3, r3, #8
   32704:	68fa      	ldr	r2, [r7, #12]
   32706:	3201      	adds	r2, #1
   32708:	7812      	ldrb	r2, [r2, #0]
   3270a:	189b      	adds	r3, r3, r2
   3270c:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   3270e:	687b      	ldr	r3, [r7, #4]
   32710:	681b      	ldr	r3, [r3, #0]
   32712:	1c9a      	adds	r2, r3, #2
   32714:	687b      	ldr	r3, [r7, #4]
   32716:	601a      	str	r2, [r3, #0]
	return len;
   32718:	68bb      	ldr	r3, [r7, #8]
}
   3271a:	0018      	movs	r0, r3
   3271c:	46bd      	mov	sp, r7
   3271e:	b004      	add	sp, #16
   32720:	bd80      	pop	{r7, pc}

00032722 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   32722:	b580      	push	{r7, lr}
   32724:	b084      	sub	sp, #16
   32726:	af00      	add	r7, sp, #0
   32728:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   3272a:	687b      	ldr	r3, [r7, #4]
   3272c:	681a      	ldr	r2, [r3, #0]
   3272e:	230f      	movs	r3, #15
   32730:	18fb      	adds	r3, r7, r3
   32732:	7812      	ldrb	r2, [r2, #0]
   32734:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   32736:	687b      	ldr	r3, [r7, #4]
   32738:	681b      	ldr	r3, [r3, #0]
   3273a:	1c5a      	adds	r2, r3, #1
   3273c:	687b      	ldr	r3, [r7, #4]
   3273e:	601a      	str	r2, [r3, #0]
	return c;
   32740:	230f      	movs	r3, #15
   32742:	18fb      	adds	r3, r7, r3
   32744:	781b      	ldrb	r3, [r3, #0]
}
   32746:	0018      	movs	r0, r3
   32748:	46bd      	mov	sp, r7
   3274a:	b004      	add	sp, #16
   3274c:	bd80      	pop	{r7, pc}

0003274e <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   3274e:	b580      	push	{r7, lr}
   32750:	b082      	sub	sp, #8
   32752:	af00      	add	r7, sp, #0
   32754:	6078      	str	r0, [r7, #4]
   32756:	000a      	movs	r2, r1
   32758:	1cfb      	adds	r3, r7, #3
   3275a:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   3275c:	687b      	ldr	r3, [r7, #4]
   3275e:	681b      	ldr	r3, [r3, #0]
   32760:	1cfa      	adds	r2, r7, #3
   32762:	7812      	ldrb	r2, [r2, #0]
   32764:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   32766:	687b      	ldr	r3, [r7, #4]
   32768:	681b      	ldr	r3, [r3, #0]
   3276a:	1c5a      	adds	r2, r3, #1
   3276c:	687b      	ldr	r3, [r7, #4]
   3276e:	601a      	str	r2, [r3, #0]
}
   32770:	46c0      	nop			; (mov r8, r8)
   32772:	46bd      	mov	sp, r7
   32774:	b002      	add	sp, #8
   32776:	bd80      	pop	{r7, pc}

00032778 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   32778:	b580      	push	{r7, lr}
   3277a:	b082      	sub	sp, #8
   3277c:	af00      	add	r7, sp, #0
   3277e:	6078      	str	r0, [r7, #4]
   32780:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   32782:	687b      	ldr	r3, [r7, #4]
   32784:	681a      	ldr	r2, [r3, #0]
   32786:	683b      	ldr	r3, [r7, #0]
   32788:	2b00      	cmp	r3, #0
   3278a:	da00      	bge.n	3278e <writeInt+0x16>
   3278c:	33ff      	adds	r3, #255	; 0xff
   3278e:	121b      	asrs	r3, r3, #8
   32790:	b2db      	uxtb	r3, r3
   32792:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   32794:	687b      	ldr	r3, [r7, #4]
   32796:	681b      	ldr	r3, [r3, #0]
   32798:	1c5a      	adds	r2, r3, #1
   3279a:	687b      	ldr	r3, [r7, #4]
   3279c:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   3279e:	687b      	ldr	r3, [r7, #4]
   327a0:	681a      	ldr	r2, [r3, #0]
   327a2:	683b      	ldr	r3, [r7, #0]
   327a4:	4908      	ldr	r1, [pc, #32]	; (327c8 <writeInt+0x50>)
   327a6:	400b      	ands	r3, r1
   327a8:	d503      	bpl.n	327b2 <writeInt+0x3a>
   327aa:	3b01      	subs	r3, #1
   327ac:	4907      	ldr	r1, [pc, #28]	; (327cc <writeInt+0x54>)
   327ae:	430b      	orrs	r3, r1
   327b0:	3301      	adds	r3, #1
   327b2:	b2db      	uxtb	r3, r3
   327b4:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   327b6:	687b      	ldr	r3, [r7, #4]
   327b8:	681b      	ldr	r3, [r3, #0]
   327ba:	1c5a      	adds	r2, r3, #1
   327bc:	687b      	ldr	r3, [r7, #4]
   327be:	601a      	str	r2, [r3, #0]
}
   327c0:	46c0      	nop			; (mov r8, r8)
   327c2:	46bd      	mov	sp, r7
   327c4:	b002      	add	sp, #8
   327c6:	bd80      	pop	{r7, pc}
   327c8:	800000ff 	.word	0x800000ff
   327cc:	ffffff00 	.word	0xffffff00

000327d0 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   327d0:	b580      	push	{r7, lr}
   327d2:	b084      	sub	sp, #16
   327d4:	af00      	add	r7, sp, #0
   327d6:	6078      	str	r0, [r7, #4]
   327d8:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   327da:	683b      	ldr	r3, [r7, #0]
   327dc:	0018      	movs	r0, r3
   327de:	4b0d      	ldr	r3, [pc, #52]	; (32814 <writeCString+0x44>)
   327e0:	4798      	blx	r3
   327e2:	0003      	movs	r3, r0
   327e4:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   327e6:	68fa      	ldr	r2, [r7, #12]
   327e8:	687b      	ldr	r3, [r7, #4]
   327ea:	0011      	movs	r1, r2
   327ec:	0018      	movs	r0, r3
   327ee:	4b0a      	ldr	r3, [pc, #40]	; (32818 <writeCString+0x48>)
   327f0:	4798      	blx	r3
	memcpy(*pptr, string, len);
   327f2:	687b      	ldr	r3, [r7, #4]
   327f4:	681b      	ldr	r3, [r3, #0]
   327f6:	68fa      	ldr	r2, [r7, #12]
   327f8:	6839      	ldr	r1, [r7, #0]
   327fa:	0018      	movs	r0, r3
   327fc:	4b07      	ldr	r3, [pc, #28]	; (3281c <writeCString+0x4c>)
   327fe:	4798      	blx	r3
	*pptr += len;
   32800:	687b      	ldr	r3, [r7, #4]
   32802:	681a      	ldr	r2, [r3, #0]
   32804:	68fb      	ldr	r3, [r7, #12]
   32806:	18d2      	adds	r2, r2, r3
   32808:	687b      	ldr	r3, [r7, #4]
   3280a:	601a      	str	r2, [r3, #0]
}
   3280c:	46c0      	nop			; (mov r8, r8)
   3280e:	46bd      	mov	sp, r7
   32810:	b004      	add	sp, #16
   32812:	bd80      	pop	{r7, pc}
   32814:	00037d03 	.word	0x00037d03
   32818:	00032779 	.word	0x00032779
   3281c:	00037915 	.word	0x00037915

00032820 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   32820:	b580      	push	{r7, lr}
   32822:	b084      	sub	sp, #16
   32824:	af00      	add	r7, sp, #0
   32826:	60f8      	str	r0, [r7, #12]
   32828:	0038      	movs	r0, r7
   3282a:	6001      	str	r1, [r0, #0]
   3282c:	6042      	str	r2, [r0, #4]
   3282e:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   32830:	003b      	movs	r3, r7
   32832:	685b      	ldr	r3, [r3, #4]
   32834:	2b00      	cmp	r3, #0
   32836:	dd17      	ble.n	32868 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   32838:	003b      	movs	r3, r7
   3283a:	685a      	ldr	r2, [r3, #4]
   3283c:	68fb      	ldr	r3, [r7, #12]
   3283e:	0011      	movs	r1, r2
   32840:	0018      	movs	r0, r3
   32842:	4b14      	ldr	r3, [pc, #80]	; (32894 <writeMQTTString+0x74>)
   32844:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   32846:	68fb      	ldr	r3, [r7, #12]
   32848:	6818      	ldr	r0, [r3, #0]
   3284a:	003b      	movs	r3, r7
   3284c:	6899      	ldr	r1, [r3, #8]
   3284e:	003b      	movs	r3, r7
   32850:	685b      	ldr	r3, [r3, #4]
   32852:	001a      	movs	r2, r3
   32854:	4b10      	ldr	r3, [pc, #64]	; (32898 <writeMQTTString+0x78>)
   32856:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   32858:	68fb      	ldr	r3, [r7, #12]
   3285a:	681a      	ldr	r2, [r3, #0]
   3285c:	003b      	movs	r3, r7
   3285e:	685b      	ldr	r3, [r3, #4]
   32860:	18d2      	adds	r2, r2, r3
   32862:	68fb      	ldr	r3, [r7, #12]
   32864:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   32866:	e010      	b.n	3288a <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   32868:	003b      	movs	r3, r7
   3286a:	681b      	ldr	r3, [r3, #0]
   3286c:	2b00      	cmp	r3, #0
   3286e:	d007      	beq.n	32880 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   32870:	003b      	movs	r3, r7
   32872:	681a      	ldr	r2, [r3, #0]
   32874:	68fb      	ldr	r3, [r7, #12]
   32876:	0011      	movs	r1, r2
   32878:	0018      	movs	r0, r3
   3287a:	4b08      	ldr	r3, [pc, #32]	; (3289c <writeMQTTString+0x7c>)
   3287c:	4798      	blx	r3
}
   3287e:	e004      	b.n	3288a <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   32880:	68fb      	ldr	r3, [r7, #12]
   32882:	2100      	movs	r1, #0
   32884:	0018      	movs	r0, r3
   32886:	4b03      	ldr	r3, [pc, #12]	; (32894 <writeMQTTString+0x74>)
   32888:	4798      	blx	r3
}
   3288a:	46c0      	nop			; (mov r8, r8)
   3288c:	46bd      	mov	sp, r7
   3288e:	b004      	add	sp, #16
   32890:	bd80      	pop	{r7, pc}
   32892:	46c0      	nop			; (mov r8, r8)
   32894:	00032779 	.word	0x00032779
   32898:	00037915 	.word	0x00037915
   3289c:	000327d1 	.word	0x000327d1

000328a0 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   328a0:	b580      	push	{r7, lr}
   328a2:	b086      	sub	sp, #24
   328a4:	af00      	add	r7, sp, #0
   328a6:	60f8      	str	r0, [r7, #12]
   328a8:	60b9      	str	r1, [r7, #8]
   328aa:	607a      	str	r2, [r7, #4]
	int rc = 0;
   328ac:	2300      	movs	r3, #0
   328ae:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   328b0:	687a      	ldr	r2, [r7, #4]
   328b2:	68bb      	ldr	r3, [r7, #8]
   328b4:	681b      	ldr	r3, [r3, #0]
   328b6:	1ad3      	subs	r3, r2, r3
   328b8:	2b01      	cmp	r3, #1
   328ba:	dd1b      	ble.n	328f4 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   328bc:	68bb      	ldr	r3, [r7, #8]
   328be:	0018      	movs	r0, r3
   328c0:	4b10      	ldr	r3, [pc, #64]	; (32904 <readMQTTLenString+0x64>)
   328c2:	4798      	blx	r3
   328c4:	0002      	movs	r2, r0
   328c6:	68fb      	ldr	r3, [r7, #12]
   328c8:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   328ca:	68bb      	ldr	r3, [r7, #8]
   328cc:	681a      	ldr	r2, [r3, #0]
   328ce:	68fb      	ldr	r3, [r7, #12]
   328d0:	685b      	ldr	r3, [r3, #4]
   328d2:	18d2      	adds	r2, r2, r3
   328d4:	687b      	ldr	r3, [r7, #4]
   328d6:	429a      	cmp	r2, r3
   328d8:	d80c      	bhi.n	328f4 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   328da:	68bb      	ldr	r3, [r7, #8]
   328dc:	681a      	ldr	r2, [r3, #0]
   328de:	68fb      	ldr	r3, [r7, #12]
   328e0:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   328e2:	68bb      	ldr	r3, [r7, #8]
   328e4:	681a      	ldr	r2, [r3, #0]
   328e6:	68fb      	ldr	r3, [r7, #12]
   328e8:	685b      	ldr	r3, [r3, #4]
   328ea:	18d2      	adds	r2, r2, r3
   328ec:	68bb      	ldr	r3, [r7, #8]
   328ee:	601a      	str	r2, [r3, #0]
			rc = 1;
   328f0:	2301      	movs	r3, #1
   328f2:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   328f4:	68fb      	ldr	r3, [r7, #12]
   328f6:	2200      	movs	r2, #0
   328f8:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   328fa:	697b      	ldr	r3, [r7, #20]
}
   328fc:	0018      	movs	r0, r3
   328fe:	46bd      	mov	sp, r7
   32900:	b006      	add	sp, #24
   32902:	bd80      	pop	{r7, pc}
   32904:	000326f1 	.word	0x000326f1

00032908 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   32908:	b580      	push	{r7, lr}
   3290a:	b086      	sub	sp, #24
   3290c:	af00      	add	r7, sp, #0
   3290e:	1d3b      	adds	r3, r7, #4
   32910:	6018      	str	r0, [r3, #0]
   32912:	6059      	str	r1, [r3, #4]
   32914:	609a      	str	r2, [r3, #8]
	int rc = 0;
   32916:	2300      	movs	r3, #0
   32918:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   3291a:	1d3b      	adds	r3, r7, #4
   3291c:	681b      	ldr	r3, [r3, #0]
   3291e:	2b00      	cmp	r3, #0
   32920:	d007      	beq.n	32932 <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   32922:	1d3b      	adds	r3, r7, #4
   32924:	681b      	ldr	r3, [r3, #0]
   32926:	0018      	movs	r0, r3
   32928:	4b06      	ldr	r3, [pc, #24]	; (32944 <MQTTstrlen+0x3c>)
   3292a:	4798      	blx	r3
   3292c:	0003      	movs	r3, r0
   3292e:	617b      	str	r3, [r7, #20]
   32930:	e002      	b.n	32938 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   32932:	1d3b      	adds	r3, r7, #4
   32934:	685b      	ldr	r3, [r3, #4]
   32936:	617b      	str	r3, [r7, #20]
	return rc;
   32938:	697b      	ldr	r3, [r7, #20]
}
   3293a:	0018      	movs	r0, r3
   3293c:	46bd      	mov	sp, r7
   3293e:	b006      	add	sp, #24
   32940:	bd80      	pop	{r7, pc}
   32942:	46c0      	nop			; (mov r8, r8)
   32944:	00037d03 	.word	0x00037d03

00032948 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   32948:	b580      	push	{r7, lr}
   3294a:	b086      	sub	sp, #24
   3294c:	af00      	add	r7, sp, #0
   3294e:	6078      	str	r0, [r7, #4]
   32950:	6039      	str	r1, [r7, #0]
	int alen = 0,
   32952:	2300      	movs	r3, #0
   32954:	617b      	str	r3, [r7, #20]
		blen = 0;
   32956:	2300      	movs	r3, #0
   32958:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   3295a:	687b      	ldr	r3, [r7, #4]
   3295c:	681b      	ldr	r3, [r3, #0]
   3295e:	2b00      	cmp	r3, #0
   32960:	d00a      	beq.n	32978 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   32962:	687b      	ldr	r3, [r7, #4]
   32964:	681b      	ldr	r3, [r3, #0]
   32966:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   32968:	687b      	ldr	r3, [r7, #4]
   3296a:	681b      	ldr	r3, [r3, #0]
   3296c:	0018      	movs	r0, r3
   3296e:	4b12      	ldr	r3, [pc, #72]	; (329b8 <MQTTPacket_equals+0x70>)
   32970:	4798      	blx	r3
   32972:	0003      	movs	r3, r0
   32974:	617b      	str	r3, [r7, #20]
   32976:	e005      	b.n	32984 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   32978:	687b      	ldr	r3, [r7, #4]
   3297a:	689b      	ldr	r3, [r3, #8]
   3297c:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   3297e:	687b      	ldr	r3, [r7, #4]
   32980:	685b      	ldr	r3, [r3, #4]
   32982:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   32984:	683b      	ldr	r3, [r7, #0]
   32986:	0018      	movs	r0, r3
   32988:	4b0b      	ldr	r3, [pc, #44]	; (329b8 <MQTTPacket_equals+0x70>)
   3298a:	4798      	blx	r3
   3298c:	0003      	movs	r3, r0
   3298e:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   32990:	697a      	ldr	r2, [r7, #20]
   32992:	68fb      	ldr	r3, [r7, #12]
   32994:	429a      	cmp	r2, r3
   32996:	d109      	bne.n	329ac <MQTTPacket_equals+0x64>
   32998:	697a      	ldr	r2, [r7, #20]
   3299a:	6839      	ldr	r1, [r7, #0]
   3299c:	693b      	ldr	r3, [r7, #16]
   3299e:	0018      	movs	r0, r3
   329a0:	4b06      	ldr	r3, [pc, #24]	; (329bc <MQTTPacket_equals+0x74>)
   329a2:	4798      	blx	r3
   329a4:	1e03      	subs	r3, r0, #0
   329a6:	d101      	bne.n	329ac <MQTTPacket_equals+0x64>
   329a8:	2301      	movs	r3, #1
   329aa:	e000      	b.n	329ae <MQTTPacket_equals+0x66>
   329ac:	2300      	movs	r3, #0
}
   329ae:	0018      	movs	r0, r3
   329b0:	46bd      	mov	sp, r7
   329b2:	b006      	add	sp, #24
   329b4:	bd80      	pop	{r7, pc}
   329b6:	46c0      	nop			; (mov r8, r8)
   329b8:	00037d03 	.word	0x00037d03
   329bc:	00037d11 	.word	0x00037d11

000329c0 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   329c0:	b580      	push	{r7, lr}
   329c2:	b086      	sub	sp, #24
   329c4:	af00      	add	r7, sp, #0
   329c6:	60f8      	str	r0, [r7, #12]
   329c8:	0038      	movs	r0, r7
   329ca:	6001      	str	r1, [r0, #0]
   329cc:	6042      	str	r2, [r0, #4]
   329ce:	6083      	str	r3, [r0, #8]
	int len = 0;
   329d0:	2300      	movs	r3, #0
   329d2:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   329d4:	003b      	movs	r3, r7
   329d6:	6818      	ldr	r0, [r3, #0]
   329d8:	6859      	ldr	r1, [r3, #4]
   329da:	689a      	ldr	r2, [r3, #8]
   329dc:	4b09      	ldr	r3, [pc, #36]	; (32a04 <MQTTSerialize_publishLength+0x44>)
   329de:	4798      	blx	r3
   329e0:	0003      	movs	r3, r0
   329e2:	1c9a      	adds	r2, r3, #2
   329e4:	6a3b      	ldr	r3, [r7, #32]
   329e6:	18d3      	adds	r3, r2, r3
   329e8:	697a      	ldr	r2, [r7, #20]
   329ea:	18d3      	adds	r3, r2, r3
   329ec:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   329ee:	68fb      	ldr	r3, [r7, #12]
   329f0:	2b00      	cmp	r3, #0
   329f2:	dd02      	ble.n	329fa <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   329f4:	697b      	ldr	r3, [r7, #20]
   329f6:	3302      	adds	r3, #2
   329f8:	617b      	str	r3, [r7, #20]
	return len;
   329fa:	697b      	ldr	r3, [r7, #20]
}
   329fc:	0018      	movs	r0, r3
   329fe:	46bd      	mov	sp, r7
   32a00:	b006      	add	sp, #24
   32a02:	bd80      	pop	{r7, pc}
   32a04:	00032909 	.word	0x00032909

00032a08 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   32a08:	b590      	push	{r4, r7, lr}
   32a0a:	b08b      	sub	sp, #44	; 0x2c
   32a0c:	af02      	add	r7, sp, #8
   32a0e:	60f8      	str	r0, [r7, #12]
   32a10:	60b9      	str	r1, [r7, #8]
   32a12:	603b      	str	r3, [r7, #0]
   32a14:	1dfb      	adds	r3, r7, #7
   32a16:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   32a18:	68fb      	ldr	r3, [r7, #12]
   32a1a:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   32a1c:	2300      	movs	r3, #0
   32a1e:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   32a20:	2300      	movs	r3, #0
   32a22:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   32a24:	2300      	movs	r3, #0
   32a26:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   32a28:	2308      	movs	r3, #8
   32a2a:	2230      	movs	r2, #48	; 0x30
   32a2c:	4694      	mov	ip, r2
   32a2e:	44bc      	add	ip, r7
   32a30:	4463      	add	r3, ip
   32a32:	6838      	ldr	r0, [r7, #0]
   32a34:	6cba      	ldr	r2, [r7, #72]	; 0x48
   32a36:	9200      	str	r2, [sp, #0]
   32a38:	6819      	ldr	r1, [r3, #0]
   32a3a:	685a      	ldr	r2, [r3, #4]
   32a3c:	689b      	ldr	r3, [r3, #8]
   32a3e:	4c46      	ldr	r4, [pc, #280]	; (32b58 <MQTTSerialize_publish+0x150>)
   32a40:	47a0      	blx	r4
   32a42:	0003      	movs	r3, r0
   32a44:	61bb      	str	r3, [r7, #24]
   32a46:	69bb      	ldr	r3, [r7, #24]
   32a48:	0018      	movs	r0, r3
   32a4a:	4b44      	ldr	r3, [pc, #272]	; (32b5c <MQTTSerialize_publish+0x154>)
   32a4c:	4798      	blx	r3
   32a4e:	0002      	movs	r2, r0
   32a50:	68bb      	ldr	r3, [r7, #8]
   32a52:	429a      	cmp	r2, r3
   32a54:	dd03      	ble.n	32a5e <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   32a56:	2302      	movs	r3, #2
   32a58:	425b      	negs	r3, r3
   32a5a:	61fb      	str	r3, [r7, #28]
		goto exit;
   32a5c:	e077      	b.n	32b4e <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   32a5e:	2310      	movs	r3, #16
   32a60:	18fb      	adds	r3, r7, r3
   32a62:	781a      	ldrb	r2, [r3, #0]
   32a64:	210f      	movs	r1, #15
   32a66:	400a      	ands	r2, r1
   32a68:	1c11      	adds	r1, r2, #0
   32a6a:	2230      	movs	r2, #48	; 0x30
   32a6c:	430a      	orrs	r2, r1
   32a6e:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   32a70:	1dfb      	adds	r3, r7, #7
   32a72:	781b      	ldrb	r3, [r3, #0]
   32a74:	2201      	movs	r2, #1
   32a76:	4013      	ands	r3, r2
   32a78:	b2da      	uxtb	r2, r3
   32a7a:	2310      	movs	r3, #16
   32a7c:	18fb      	adds	r3, r7, r3
   32a7e:	2101      	movs	r1, #1
   32a80:	400a      	ands	r2, r1
   32a82:	00d0      	lsls	r0, r2, #3
   32a84:	781a      	ldrb	r2, [r3, #0]
   32a86:	2108      	movs	r1, #8
   32a88:	438a      	bics	r2, r1
   32a8a:	1c11      	adds	r1, r2, #0
   32a8c:	1c02      	adds	r2, r0, #0
   32a8e:	430a      	orrs	r2, r1
   32a90:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   32a92:	683b      	ldr	r3, [r7, #0]
   32a94:	b2db      	uxtb	r3, r3
   32a96:	1c1a      	adds	r2, r3, #0
   32a98:	2303      	movs	r3, #3
   32a9a:	4013      	ands	r3, r2
   32a9c:	b2da      	uxtb	r2, r3
   32a9e:	2310      	movs	r3, #16
   32aa0:	18fb      	adds	r3, r7, r3
   32aa2:	2103      	movs	r1, #3
   32aa4:	400a      	ands	r2, r1
   32aa6:	1890      	adds	r0, r2, r2
   32aa8:	781a      	ldrb	r2, [r3, #0]
   32aaa:	2106      	movs	r1, #6
   32aac:	438a      	bics	r2, r1
   32aae:	1c11      	adds	r1, r2, #0
   32ab0:	1c02      	adds	r2, r0, #0
   32ab2:	430a      	orrs	r2, r1
   32ab4:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   32ab6:	2330      	movs	r3, #48	; 0x30
   32ab8:	18fb      	adds	r3, r7, r3
   32aba:	781b      	ldrb	r3, [r3, #0]
   32abc:	2201      	movs	r2, #1
   32abe:	4013      	ands	r3, r2
   32ac0:	b2da      	uxtb	r2, r3
   32ac2:	2310      	movs	r3, #16
   32ac4:	18fb      	adds	r3, r7, r3
   32ac6:	2101      	movs	r1, #1
   32ac8:	400a      	ands	r2, r1
   32aca:	0010      	movs	r0, r2
   32acc:	781a      	ldrb	r2, [r3, #0]
   32ace:	2101      	movs	r1, #1
   32ad0:	438a      	bics	r2, r1
   32ad2:	1c11      	adds	r1, r2, #0
   32ad4:	1c02      	adds	r2, r0, #0
   32ad6:	430a      	orrs	r2, r1
   32ad8:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   32ada:	2310      	movs	r3, #16
   32adc:	18fb      	adds	r3, r7, r3
   32ade:	781a      	ldrb	r2, [r3, #0]
   32ae0:	2314      	movs	r3, #20
   32ae2:	18fb      	adds	r3, r7, r3
   32ae4:	0011      	movs	r1, r2
   32ae6:	0018      	movs	r0, r3
   32ae8:	4b1d      	ldr	r3, [pc, #116]	; (32b60 <MQTTSerialize_publish+0x158>)
   32aea:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   32aec:	697b      	ldr	r3, [r7, #20]
   32aee:	69ba      	ldr	r2, [r7, #24]
   32af0:	0011      	movs	r1, r2
   32af2:	0018      	movs	r0, r3
   32af4:	4b1b      	ldr	r3, [pc, #108]	; (32b64 <MQTTSerialize_publish+0x15c>)
   32af6:	4798      	blx	r3
   32af8:	0002      	movs	r2, r0
   32afa:	697b      	ldr	r3, [r7, #20]
   32afc:	189b      	adds	r3, r3, r2
   32afe:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   32b00:	2308      	movs	r3, #8
   32b02:	2230      	movs	r2, #48	; 0x30
   32b04:	4694      	mov	ip, r2
   32b06:	44bc      	add	ip, r7
   32b08:	4463      	add	r3, ip
   32b0a:	2214      	movs	r2, #20
   32b0c:	18b8      	adds	r0, r7, r2
   32b0e:	6819      	ldr	r1, [r3, #0]
   32b10:	685a      	ldr	r2, [r3, #4]
   32b12:	689b      	ldr	r3, [r3, #8]
   32b14:	4c14      	ldr	r4, [pc, #80]	; (32b68 <MQTTSerialize_publish+0x160>)
   32b16:	47a0      	blx	r4

	if (qos > 0)
   32b18:	683b      	ldr	r3, [r7, #0]
   32b1a:	2b00      	cmp	r3, #0
   32b1c:	dd08      	ble.n	32b30 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   32b1e:	2334      	movs	r3, #52	; 0x34
   32b20:	18fb      	adds	r3, r7, r3
   32b22:	881a      	ldrh	r2, [r3, #0]
   32b24:	2314      	movs	r3, #20
   32b26:	18fb      	adds	r3, r7, r3
   32b28:	0011      	movs	r1, r2
   32b2a:	0018      	movs	r0, r3
   32b2c:	4b0f      	ldr	r3, [pc, #60]	; (32b6c <MQTTSerialize_publish+0x164>)
   32b2e:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   32b30:	697b      	ldr	r3, [r7, #20]
   32b32:	6cba      	ldr	r2, [r7, #72]	; 0x48
   32b34:	6c79      	ldr	r1, [r7, #68]	; 0x44
   32b36:	0018      	movs	r0, r3
   32b38:	4b0d      	ldr	r3, [pc, #52]	; (32b70 <MQTTSerialize_publish+0x168>)
   32b3a:	4798      	blx	r3
	ptr += payloadlen;
   32b3c:	697a      	ldr	r2, [r7, #20]
   32b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   32b40:	18d3      	adds	r3, r2, r3
   32b42:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   32b44:	697b      	ldr	r3, [r7, #20]
   32b46:	001a      	movs	r2, r3
   32b48:	68fb      	ldr	r3, [r7, #12]
   32b4a:	1ad3      	subs	r3, r2, r3
   32b4c:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32b4e:	69fb      	ldr	r3, [r7, #28]
}
   32b50:	0018      	movs	r0, r3
   32b52:	46bd      	mov	sp, r7
   32b54:	b009      	add	sp, #36	; 0x24
   32b56:	bd90      	pop	{r4, r7, pc}
   32b58:	000329c1 	.word	0x000329c1
   32b5c:	0003262d 	.word	0x0003262d
   32b60:	0003274f 	.word	0x0003274f
   32b64:	00032535 	.word	0x00032535
   32b68:	00032821 	.word	0x00032821
   32b6c:	00032779 	.word	0x00032779
   32b70:	00037915 	.word	0x00037915

00032b74 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   32b74:	b580      	push	{r7, lr}
   32b76:	b088      	sub	sp, #32
   32b78:	af00      	add	r7, sp, #0
   32b7a:	60f8      	str	r0, [r7, #12]
   32b7c:	60b9      	str	r1, [r7, #8]
   32b7e:	0019      	movs	r1, r3
   32b80:	1dfb      	adds	r3, r7, #7
   32b82:	701a      	strb	r2, [r3, #0]
   32b84:	1dbb      	adds	r3, r7, #6
   32b86:	1c0a      	adds	r2, r1, #0
   32b88:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   32b8a:	2300      	movs	r3, #0
   32b8c:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   32b8e:	2300      	movs	r3, #0
   32b90:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   32b92:	68fb      	ldr	r3, [r7, #12]
   32b94:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   32b96:	68bb      	ldr	r3, [r7, #8]
   32b98:	2b03      	cmp	r3, #3
   32b9a:	dc03      	bgt.n	32ba4 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   32b9c:	2302      	movs	r3, #2
   32b9e:	425b      	negs	r3, r3
   32ba0:	61fb      	str	r3, [r7, #28]
		goto exit;
   32ba2:	e055      	b.n	32c50 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   32ba4:	1dfb      	adds	r3, r7, #7
   32ba6:	781b      	ldrb	r3, [r3, #0]
   32ba8:	220f      	movs	r2, #15
   32baa:	4013      	ands	r3, r2
   32bac:	b2da      	uxtb	r2, r3
   32bae:	2318      	movs	r3, #24
   32bb0:	18fb      	adds	r3, r7, r3
   32bb2:	0110      	lsls	r0, r2, #4
   32bb4:	781a      	ldrb	r2, [r3, #0]
   32bb6:	210f      	movs	r1, #15
   32bb8:	400a      	ands	r2, r1
   32bba:	1c11      	adds	r1, r2, #0
   32bbc:	1c02      	adds	r2, r0, #0
   32bbe:	430a      	orrs	r2, r1
   32bc0:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   32bc2:	1dbb      	adds	r3, r7, #6
   32bc4:	781b      	ldrb	r3, [r3, #0]
   32bc6:	2201      	movs	r2, #1
   32bc8:	4013      	ands	r3, r2
   32bca:	b2da      	uxtb	r2, r3
   32bcc:	2318      	movs	r3, #24
   32bce:	18fb      	adds	r3, r7, r3
   32bd0:	2101      	movs	r1, #1
   32bd2:	400a      	ands	r2, r1
   32bd4:	00d0      	lsls	r0, r2, #3
   32bd6:	781a      	ldrb	r2, [r3, #0]
   32bd8:	2108      	movs	r1, #8
   32bda:	438a      	bics	r2, r1
   32bdc:	1c11      	adds	r1, r2, #0
   32bde:	1c02      	adds	r2, r0, #0
   32be0:	430a      	orrs	r2, r1
   32be2:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   32be4:	1dfb      	adds	r3, r7, #7
   32be6:	781b      	ldrb	r3, [r3, #0]
   32be8:	3b06      	subs	r3, #6
   32bea:	425a      	negs	r2, r3
   32bec:	4153      	adcs	r3, r2
   32bee:	b2db      	uxtb	r3, r3
   32bf0:	1c1a      	adds	r2, r3, #0
   32bf2:	2303      	movs	r3, #3
   32bf4:	4013      	ands	r3, r2
   32bf6:	b2da      	uxtb	r2, r3
   32bf8:	2318      	movs	r3, #24
   32bfa:	18fb      	adds	r3, r7, r3
   32bfc:	2103      	movs	r1, #3
   32bfe:	400a      	ands	r2, r1
   32c00:	1890      	adds	r0, r2, r2
   32c02:	781a      	ldrb	r2, [r3, #0]
   32c04:	2106      	movs	r1, #6
   32c06:	438a      	bics	r2, r1
   32c08:	1c11      	adds	r1, r2, #0
   32c0a:	1c02      	adds	r2, r0, #0
   32c0c:	430a      	orrs	r2, r1
   32c0e:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   32c10:	2318      	movs	r3, #24
   32c12:	18fb      	adds	r3, r7, r3
   32c14:	781a      	ldrb	r2, [r3, #0]
   32c16:	2314      	movs	r3, #20
   32c18:	18fb      	adds	r3, r7, r3
   32c1a:	0011      	movs	r1, r2
   32c1c:	0018      	movs	r0, r3
   32c1e:	4b0f      	ldr	r3, [pc, #60]	; (32c5c <MQTTSerialize_ack+0xe8>)
   32c20:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   32c22:	697b      	ldr	r3, [r7, #20]
   32c24:	2102      	movs	r1, #2
   32c26:	0018      	movs	r0, r3
   32c28:	4b0d      	ldr	r3, [pc, #52]	; (32c60 <MQTTSerialize_ack+0xec>)
   32c2a:	4798      	blx	r3
   32c2c:	0002      	movs	r2, r0
   32c2e:	697b      	ldr	r3, [r7, #20]
   32c30:	189b      	adds	r3, r3, r2
   32c32:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   32c34:	2328      	movs	r3, #40	; 0x28
   32c36:	18fb      	adds	r3, r7, r3
   32c38:	881a      	ldrh	r2, [r3, #0]
   32c3a:	2314      	movs	r3, #20
   32c3c:	18fb      	adds	r3, r7, r3
   32c3e:	0011      	movs	r1, r2
   32c40:	0018      	movs	r0, r3
   32c42:	4b08      	ldr	r3, [pc, #32]	; (32c64 <MQTTSerialize_ack+0xf0>)
   32c44:	4798      	blx	r3
	rc = ptr - buf;
   32c46:	697b      	ldr	r3, [r7, #20]
   32c48:	001a      	movs	r2, r3
   32c4a:	68fb      	ldr	r3, [r7, #12]
   32c4c:	1ad3      	subs	r3, r2, r3
   32c4e:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32c50:	69fb      	ldr	r3, [r7, #28]
}
   32c52:	0018      	movs	r0, r3
   32c54:	46bd      	mov	sp, r7
   32c56:	b008      	add	sp, #32
   32c58:	bd80      	pop	{r7, pc}
   32c5a:	46c0      	nop			; (mov r8, r8)
   32c5c:	0003274f 	.word	0x0003274f
   32c60:	00032535 	.word	0x00032535
   32c64:	00032779 	.word	0x00032779

00032c68 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   32c68:	b580      	push	{r7, lr}
   32c6a:	b084      	sub	sp, #16
   32c6c:	af00      	add	r7, sp, #0
   32c6e:	6078      	str	r0, [r7, #4]
   32c70:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   32c72:	2302      	movs	r3, #2
   32c74:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   32c76:	2300      	movs	r3, #0
   32c78:	60fb      	str	r3, [r7, #12]
   32c7a:	e014      	b.n	32ca6 <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   32c7c:	68fa      	ldr	r2, [r7, #12]
   32c7e:	0013      	movs	r3, r2
   32c80:	005b      	lsls	r3, r3, #1
   32c82:	189b      	adds	r3, r3, r2
   32c84:	009b      	lsls	r3, r3, #2
   32c86:	001a      	movs	r2, r3
   32c88:	683b      	ldr	r3, [r7, #0]
   32c8a:	189b      	adds	r3, r3, r2
   32c8c:	6818      	ldr	r0, [r3, #0]
   32c8e:	6859      	ldr	r1, [r3, #4]
   32c90:	689a      	ldr	r2, [r3, #8]
   32c92:	4b09      	ldr	r3, [pc, #36]	; (32cb8 <MQTTSerialize_subscribeLength+0x50>)
   32c94:	4798      	blx	r3
   32c96:	0003      	movs	r3, r0
   32c98:	3303      	adds	r3, #3
   32c9a:	68ba      	ldr	r2, [r7, #8]
   32c9c:	18d3      	adds	r3, r2, r3
   32c9e:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   32ca0:	68fb      	ldr	r3, [r7, #12]
   32ca2:	3301      	adds	r3, #1
   32ca4:	60fb      	str	r3, [r7, #12]
   32ca6:	68fa      	ldr	r2, [r7, #12]
   32ca8:	687b      	ldr	r3, [r7, #4]
   32caa:	429a      	cmp	r2, r3
   32cac:	dbe6      	blt.n	32c7c <MQTTSerialize_subscribeLength+0x14>
	return len;
   32cae:	68bb      	ldr	r3, [r7, #8]
}
   32cb0:	0018      	movs	r0, r3
   32cb2:	46bd      	mov	sp, r7
   32cb4:	b004      	add	sp, #16
   32cb6:	bd80      	pop	{r7, pc}
   32cb8:	00032909 	.word	0x00032909

00032cbc <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   32cbc:	b590      	push	{r4, r7, lr}
   32cbe:	b08b      	sub	sp, #44	; 0x2c
   32cc0:	af00      	add	r7, sp, #0
   32cc2:	60f8      	str	r0, [r7, #12]
   32cc4:	60b9      	str	r1, [r7, #8]
   32cc6:	0019      	movs	r1, r3
   32cc8:	1dfb      	adds	r3, r7, #7
   32cca:	701a      	strb	r2, [r3, #0]
   32ccc:	1d3b      	adds	r3, r7, #4
   32cce:	1c0a      	adds	r2, r1, #0
   32cd0:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   32cd2:	68fb      	ldr	r3, [r7, #12]
   32cd4:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   32cd6:	2300      	movs	r3, #0
   32cd8:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   32cda:	2300      	movs	r3, #0
   32cdc:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   32cde:	2300      	movs	r3, #0
   32ce0:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   32ce2:	2300      	movs	r3, #0
   32ce4:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   32ce6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   32ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   32cea:	0011      	movs	r1, r2
   32cec:	0018      	movs	r0, r3
   32cee:	4b41      	ldr	r3, [pc, #260]	; (32df4 <MQTTSerialize_subscribe+0x138>)
   32cf0:	4798      	blx	r3
   32cf2:	0003      	movs	r3, r0
   32cf4:	61fb      	str	r3, [r7, #28]
   32cf6:	69fb      	ldr	r3, [r7, #28]
   32cf8:	0018      	movs	r0, r3
   32cfa:	4b3f      	ldr	r3, [pc, #252]	; (32df8 <MQTTSerialize_subscribe+0x13c>)
   32cfc:	4798      	blx	r3
   32cfe:	0002      	movs	r2, r0
   32d00:	68bb      	ldr	r3, [r7, #8]
   32d02:	429a      	cmp	r2, r3
   32d04:	dd03      	ble.n	32d0e <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   32d06:	2302      	movs	r3, #2
   32d08:	425b      	negs	r3, r3
   32d0a:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   32d0c:	e06c      	b.n	32de8 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   32d0e:	2314      	movs	r3, #20
   32d10:	18fb      	adds	r3, r7, r3
   32d12:	2200      	movs	r2, #0
   32d14:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   32d16:	2314      	movs	r3, #20
   32d18:	18fb      	adds	r3, r7, r3
   32d1a:	781a      	ldrb	r2, [r3, #0]
   32d1c:	210f      	movs	r1, #15
   32d1e:	400a      	ands	r2, r1
   32d20:	1c11      	adds	r1, r2, #0
   32d22:	2280      	movs	r2, #128	; 0x80
   32d24:	4252      	negs	r2, r2
   32d26:	430a      	orrs	r2, r1
   32d28:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   32d2a:	1dfb      	adds	r3, r7, #7
   32d2c:	781b      	ldrb	r3, [r3, #0]
   32d2e:	2201      	movs	r2, #1
   32d30:	4013      	ands	r3, r2
   32d32:	b2da      	uxtb	r2, r3
   32d34:	2314      	movs	r3, #20
   32d36:	18fb      	adds	r3, r7, r3
   32d38:	2101      	movs	r1, #1
   32d3a:	400a      	ands	r2, r1
   32d3c:	00d0      	lsls	r0, r2, #3
   32d3e:	781a      	ldrb	r2, [r3, #0]
   32d40:	2108      	movs	r1, #8
   32d42:	438a      	bics	r2, r1
   32d44:	1c11      	adds	r1, r2, #0
   32d46:	1c02      	adds	r2, r0, #0
   32d48:	430a      	orrs	r2, r1
   32d4a:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   32d4c:	2314      	movs	r3, #20
   32d4e:	18fb      	adds	r3, r7, r3
   32d50:	781a      	ldrb	r2, [r3, #0]
   32d52:	2106      	movs	r1, #6
   32d54:	438a      	bics	r2, r1
   32d56:	1c11      	adds	r1, r2, #0
   32d58:	2202      	movs	r2, #2
   32d5a:	430a      	orrs	r2, r1
   32d5c:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   32d5e:	2314      	movs	r3, #20
   32d60:	18fb      	adds	r3, r7, r3
   32d62:	781a      	ldrb	r2, [r3, #0]
   32d64:	2318      	movs	r3, #24
   32d66:	18fb      	adds	r3, r7, r3
   32d68:	0011      	movs	r1, r2
   32d6a:	0018      	movs	r0, r3
   32d6c:	4b23      	ldr	r3, [pc, #140]	; (32dfc <MQTTSerialize_subscribe+0x140>)
   32d6e:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   32d70:	69bb      	ldr	r3, [r7, #24]
   32d72:	69fa      	ldr	r2, [r7, #28]
   32d74:	0011      	movs	r1, r2
   32d76:	0018      	movs	r0, r3
   32d78:	4b21      	ldr	r3, [pc, #132]	; (32e00 <MQTTSerialize_subscribe+0x144>)
   32d7a:	4798      	blx	r3
   32d7c:	0002      	movs	r2, r0
   32d7e:	69bb      	ldr	r3, [r7, #24]
   32d80:	189b      	adds	r3, r3, r2
   32d82:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   32d84:	1d3b      	adds	r3, r7, #4
   32d86:	881a      	ldrh	r2, [r3, #0]
   32d88:	2318      	movs	r3, #24
   32d8a:	18fb      	adds	r3, r7, r3
   32d8c:	0011      	movs	r1, r2
   32d8e:	0018      	movs	r0, r3
   32d90:	4b1c      	ldr	r3, [pc, #112]	; (32e04 <MQTTSerialize_subscribe+0x148>)
   32d92:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   32d94:	2300      	movs	r3, #0
   32d96:	623b      	str	r3, [r7, #32]
   32d98:	e01d      	b.n	32dd6 <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   32d9a:	6a3a      	ldr	r2, [r7, #32]
   32d9c:	0013      	movs	r3, r2
   32d9e:	005b      	lsls	r3, r3, #1
   32da0:	189b      	adds	r3, r3, r2
   32da2:	009b      	lsls	r3, r3, #2
   32da4:	001a      	movs	r2, r3
   32da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   32da8:	189b      	adds	r3, r3, r2
   32daa:	2218      	movs	r2, #24
   32dac:	18b8      	adds	r0, r7, r2
   32dae:	6819      	ldr	r1, [r3, #0]
   32db0:	685a      	ldr	r2, [r3, #4]
   32db2:	689b      	ldr	r3, [r3, #8]
   32db4:	4c14      	ldr	r4, [pc, #80]	; (32e08 <MQTTSerialize_subscribe+0x14c>)
   32db6:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   32db8:	6a3b      	ldr	r3, [r7, #32]
   32dba:	009b      	lsls	r3, r3, #2
   32dbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   32dbe:	18d3      	adds	r3, r2, r3
   32dc0:	681b      	ldr	r3, [r3, #0]
   32dc2:	b2da      	uxtb	r2, r3
   32dc4:	2318      	movs	r3, #24
   32dc6:	18fb      	adds	r3, r7, r3
   32dc8:	0011      	movs	r1, r2
   32dca:	0018      	movs	r0, r3
   32dcc:	4b0b      	ldr	r3, [pc, #44]	; (32dfc <MQTTSerialize_subscribe+0x140>)
   32dce:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   32dd0:	6a3b      	ldr	r3, [r7, #32]
   32dd2:	3301      	adds	r3, #1
   32dd4:	623b      	str	r3, [r7, #32]
   32dd6:	6a3a      	ldr	r2, [r7, #32]
   32dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   32dda:	429a      	cmp	r2, r3
   32ddc:	dbdd      	blt.n	32d9a <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   32dde:	69bb      	ldr	r3, [r7, #24]
   32de0:	001a      	movs	r2, r3
   32de2:	68fb      	ldr	r3, [r7, #12]
   32de4:	1ad3      	subs	r3, r2, r3
   32de6:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   32dea:	0018      	movs	r0, r3
   32dec:	46bd      	mov	sp, r7
   32dee:	b00b      	add	sp, #44	; 0x2c
   32df0:	bd90      	pop	{r4, r7, pc}
   32df2:	46c0      	nop			; (mov r8, r8)
   32df4:	00032c69 	.word	0x00032c69
   32df8:	0003262d 	.word	0x0003262d
   32dfc:	0003274f 	.word	0x0003274f
   32e00:	00032535 	.word	0x00032535
   32e04:	00032779 	.word	0x00032779
   32e08:	00032821 	.word	0x00032821

00032e0c <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   32e0c:	b590      	push	{r4, r7, lr}
   32e0e:	b08b      	sub	sp, #44	; 0x2c
   32e10:	af00      	add	r7, sp, #0
   32e12:	60f8      	str	r0, [r7, #12]
   32e14:	60b9      	str	r1, [r7, #8]
   32e16:	607a      	str	r2, [r7, #4]
   32e18:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   32e1a:	2300      	movs	r3, #0
   32e1c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   32e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   32e20:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   32e22:	2300      	movs	r3, #0
   32e24:	623b      	str	r3, [r7, #32]
	int rc = 0;
   32e26:	2300      	movs	r3, #0
   32e28:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   32e2a:	2318      	movs	r3, #24
   32e2c:	18fb      	adds	r3, r7, r3
   32e2e:	0018      	movs	r0, r3
   32e30:	4b2c      	ldr	r3, [pc, #176]	; (32ee4 <MQTTDeserialize_suback+0xd8>)
   32e32:	4798      	blx	r3
   32e34:	0003      	movs	r3, r0
   32e36:	001a      	movs	r2, r3
   32e38:	231c      	movs	r3, #28
   32e3a:	18fb      	adds	r3, r7, r3
   32e3c:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   32e3e:	231c      	movs	r3, #28
   32e40:	18fb      	adds	r3, r7, r3
   32e42:	781b      	ldrb	r3, [r3, #0]
   32e44:	220f      	movs	r2, #15
   32e46:	4393      	bics	r3, r2
   32e48:	b2db      	uxtb	r3, r3
   32e4a:	2b90      	cmp	r3, #144	; 0x90
   32e4c:	d142      	bne.n	32ed4 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   32e4e:	69bb      	ldr	r3, [r7, #24]
   32e50:	2214      	movs	r2, #20
   32e52:	18ba      	adds	r2, r7, r2
   32e54:	0011      	movs	r1, r2
   32e56:	0018      	movs	r0, r3
   32e58:	4b23      	ldr	r3, [pc, #140]	; (32ee8 <MQTTDeserialize_suback+0xdc>)
   32e5a:	4798      	blx	r3
   32e5c:	0003      	movs	r3, r0
   32e5e:	627b      	str	r3, [r7, #36]	; 0x24
   32e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   32e62:	69bb      	ldr	r3, [r7, #24]
   32e64:	189b      	adds	r3, r3, r2
   32e66:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   32e68:	69bb      	ldr	r3, [r7, #24]
   32e6a:	697a      	ldr	r2, [r7, #20]
   32e6c:	189b      	adds	r3, r3, r2
   32e6e:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   32e70:	6a3b      	ldr	r3, [r7, #32]
   32e72:	69ba      	ldr	r2, [r7, #24]
   32e74:	1a9b      	subs	r3, r3, r2
   32e76:	2b01      	cmp	r3, #1
   32e78:	dd2e      	ble.n	32ed8 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   32e7a:	2318      	movs	r3, #24
   32e7c:	18fb      	adds	r3, r7, r3
   32e7e:	0018      	movs	r0, r3
   32e80:	4b1a      	ldr	r3, [pc, #104]	; (32eec <MQTTDeserialize_suback+0xe0>)
   32e82:	4798      	blx	r3
   32e84:	0003      	movs	r3, r0
   32e86:	b29a      	uxth	r2, r3
   32e88:	68fb      	ldr	r3, [r7, #12]
   32e8a:	801a      	strh	r2, [r3, #0]

	*count = 0;
   32e8c:	687b      	ldr	r3, [r7, #4]
   32e8e:	2200      	movs	r2, #0
   32e90:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   32e92:	e018      	b.n	32ec6 <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   32e94:	687b      	ldr	r3, [r7, #4]
   32e96:	681a      	ldr	r2, [r3, #0]
   32e98:	68bb      	ldr	r3, [r7, #8]
   32e9a:	429a      	cmp	r2, r3
   32e9c:	dd03      	ble.n	32ea6 <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   32e9e:	2301      	movs	r3, #1
   32ea0:	425b      	negs	r3, r3
   32ea2:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   32ea4:	e019      	b.n	32eda <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   32ea6:	687b      	ldr	r3, [r7, #4]
   32ea8:	681a      	ldr	r2, [r3, #0]
   32eaa:	1c51      	adds	r1, r2, #1
   32eac:	687b      	ldr	r3, [r7, #4]
   32eae:	6019      	str	r1, [r3, #0]
   32eb0:	0013      	movs	r3, r2
   32eb2:	009b      	lsls	r3, r3, #2
   32eb4:	683a      	ldr	r2, [r7, #0]
   32eb6:	18d4      	adds	r4, r2, r3
   32eb8:	2318      	movs	r3, #24
   32eba:	18fb      	adds	r3, r7, r3
   32ebc:	0018      	movs	r0, r3
   32ebe:	4b09      	ldr	r3, [pc, #36]	; (32ee4 <MQTTDeserialize_suback+0xd8>)
   32ec0:	4798      	blx	r3
   32ec2:	0003      	movs	r3, r0
   32ec4:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   32ec6:	69ba      	ldr	r2, [r7, #24]
   32ec8:	6a3b      	ldr	r3, [r7, #32]
   32eca:	429a      	cmp	r2, r3
   32ecc:	d3e2      	bcc.n	32e94 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   32ece:	2301      	movs	r3, #1
   32ed0:	627b      	str	r3, [r7, #36]	; 0x24
   32ed2:	e002      	b.n	32eda <MQTTDeserialize_suback+0xce>
		goto exit;
   32ed4:	46c0      	nop			; (mov r8, r8)
   32ed6:	e000      	b.n	32eda <MQTTDeserialize_suback+0xce>
		goto exit;
   32ed8:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   32edc:	0018      	movs	r0, r3
   32ede:	46bd      	mov	sp, r7
   32ee0:	b00b      	add	sp, #44	; 0x2c
   32ee2:	bd90      	pop	{r4, r7, pc}
   32ee4:	00032723 	.word	0x00032723
   32ee8:	000326bd 	.word	0x000326bd
   32eec:	000326f1 	.word	0x000326f1

00032ef0 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   32ef0:	b580      	push	{r7, lr}
   32ef2:	b082      	sub	sp, #8
   32ef4:	af00      	add	r7, sp, #0
   32ef6:	6078      	str	r0, [r7, #4]
	config->port = 80;
   32ef8:	687b      	ldr	r3, [r7, #4]
   32efa:	2250      	movs	r2, #80	; 0x50
   32efc:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   32efe:	687b      	ldr	r3, [r7, #4]
   32f00:	2200      	movs	r2, #0
   32f02:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   32f04:	687b      	ldr	r3, [r7, #4]
   32f06:	4a0b      	ldr	r2, [pc, #44]	; (32f34 <http_client_get_config_defaults+0x44>)
   32f08:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   32f0a:	687b      	ldr	r3, [r7, #4]
   32f0c:	2200      	movs	r2, #0
   32f0e:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   32f10:	687b      	ldr	r3, [r7, #4]
   32f12:	2200      	movs	r2, #0
   32f14:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   32f16:	687b      	ldr	r3, [r7, #4]
   32f18:	2280      	movs	r2, #128	; 0x80
   32f1a:	0052      	lsls	r2, r2, #1
   32f1c:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   32f1e:	687b      	ldr	r3, [r7, #4]
   32f20:	2252      	movs	r2, #82	; 0x52
   32f22:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   32f24:	687b      	ldr	r3, [r7, #4]
   32f26:	4a04      	ldr	r2, [pc, #16]	; (32f38 <http_client_get_config_defaults+0x48>)
   32f28:	619a      	str	r2, [r3, #24]
}
   32f2a:	46c0      	nop			; (mov r8, r8)
   32f2c:	46bd      	mov	sp, r7
   32f2e:	b002      	add	sp, #8
   32f30:	bd80      	pop	{r7, pc}
   32f32:	46c0      	nop			; (mov r8, r8)
   32f34:	00004e20 	.word	0x00004e20
   32f38:	0003cf18 	.word	0x0003cf18

00032f3c <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   32f3c:	b590      	push	{r4, r7, lr}
   32f3e:	b083      	sub	sp, #12
   32f40:	af00      	add	r7, sp, #0
   32f42:	6078      	str	r0, [r7, #4]
   32f44:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   32f46:	687b      	ldr	r3, [r7, #4]
   32f48:	2b00      	cmp	r3, #0
   32f4a:	d002      	beq.n	32f52 <http_client_init+0x16>
   32f4c:	683b      	ldr	r3, [r7, #0]
   32f4e:	2b00      	cmp	r3, #0
   32f50:	d102      	bne.n	32f58 <http_client_init+0x1c>
		return -EINVAL;
   32f52:	2316      	movs	r3, #22
   32f54:	425b      	negs	r3, r3
   32f56:	e058      	b.n	3300a <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   32f58:	683b      	ldr	r3, [r7, #0]
   32f5a:	691b      	ldr	r3, [r3, #16]
   32f5c:	2b00      	cmp	r3, #0
   32f5e:	d102      	bne.n	32f66 <http_client_init+0x2a>
		return -EINVAL;
   32f60:	2316      	movs	r3, #22
   32f62:	425b      	negs	r3, r3
   32f64:	e051      	b.n	3300a <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   32f66:	683b      	ldr	r3, [r7, #0]
   32f68:	685b      	ldr	r3, [r3, #4]
   32f6a:	2b00      	cmp	r3, #0
   32f6c:	d102      	bne.n	32f74 <http_client_init+0x38>
		return -EINVAL;
   32f6e:	2316      	movs	r3, #22
   32f70:	425b      	negs	r3, r3
   32f72:	e04a      	b.n	3300a <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   32f74:	683b      	ldr	r3, [r7, #0]
   32f76:	695b      	ldr	r3, [r3, #20]
   32f78:	2b51      	cmp	r3, #81	; 0x51
   32f7a:	d802      	bhi.n	32f82 <http_client_init+0x46>
		return -EINVAL;
   32f7c:	2316      	movs	r3, #22
   32f7e:	425b      	negs	r3, r3
   32f80:	e043      	b.n	3300a <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   32f82:	687b      	ldr	r3, [r7, #4]
   32f84:	22e8      	movs	r2, #232	; 0xe8
   32f86:	2100      	movs	r1, #0
   32f88:	0018      	movs	r0, r3
   32f8a:	4b22      	ldr	r3, [pc, #136]	; (33014 <http_client_init+0xd8>)
   32f8c:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   32f8e:	687b      	ldr	r3, [r7, #4]
   32f90:	3350      	adds	r3, #80	; 0x50
   32f92:	6839      	ldr	r1, [r7, #0]
   32f94:	221c      	movs	r2, #28
   32f96:	0018      	movs	r0, r3
   32f98:	4b1f      	ldr	r3, [pc, #124]	; (33018 <http_client_init+0xdc>)
   32f9a:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   32f9c:	687b      	ldr	r3, [r7, #4]
   32f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32fa0:	2b00      	cmp	r3, #0
   32fa2:	d115      	bne.n	32fd0 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   32fa4:	683b      	ldr	r3, [r7, #0]
   32fa6:	691b      	ldr	r3, [r3, #16]
   32fa8:	0018      	movs	r0, r3
   32faa:	4b1c      	ldr	r3, [pc, #112]	; (3301c <http_client_init+0xe0>)
   32fac:	4798      	blx	r3
   32fae:	0003      	movs	r3, r0
   32fb0:	001a      	movs	r2, r3
   32fb2:	687b      	ldr	r3, [r7, #4]
   32fb4:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   32fb6:	687b      	ldr	r3, [r7, #4]
   32fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32fba:	2b00      	cmp	r3, #0
   32fbc:	d102      	bne.n	32fc4 <http_client_init+0x88>
			return -ENOMEM;
   32fbe:	230c      	movs	r3, #12
   32fc0:	425b      	negs	r3, r3
   32fc2:	e022      	b.n	3300a <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   32fc4:	687b      	ldr	r3, [r7, #4]
   32fc6:	2241      	movs	r2, #65	; 0x41
   32fc8:	5c99      	ldrb	r1, [r3, r2]
   32fca:	2004      	movs	r0, #4
   32fcc:	4301      	orrs	r1, r0
   32fce:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   32fd0:	683b      	ldr	r3, [r7, #0]
   32fd2:	891b      	ldrh	r3, [r3, #8]
   32fd4:	2b00      	cmp	r3, #0
   32fd6:	d010      	beq.n	32ffa <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   32fd8:	683b      	ldr	r3, [r7, #0]
   32fda:	6858      	ldr	r0, [r3, #4]
   32fdc:	687a      	ldr	r2, [r7, #4]
   32fde:	4910      	ldr	r1, [pc, #64]	; (33020 <http_client_init+0xe4>)
   32fe0:	2300      	movs	r3, #0
   32fe2:	4c10      	ldr	r4, [pc, #64]	; (33024 <http_client_init+0xe8>)
   32fe4:	47a0      	blx	r4
   32fe6:	0002      	movs	r2, r0
   32fe8:	687b      	ldr	r3, [r7, #4]
   32fea:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   32fec:	687b      	ldr	r3, [r7, #4]
   32fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   32ff0:	2b00      	cmp	r3, #0
   32ff2:	da02      	bge.n	32ffa <http_client_init+0xbe>
			return -ENOSPC;
   32ff4:	231c      	movs	r3, #28
   32ff6:	425b      	negs	r3, r3
   32ff8:	e007      	b.n	3300a <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   32ffa:	687b      	ldr	r3, [r7, #4]
   32ffc:	2200      	movs	r2, #0
   32ffe:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   33000:	687b      	ldr	r3, [r7, #4]
   33002:	22d8      	movs	r2, #216	; 0xd8
   33004:	2100      	movs	r1, #0
   33006:	5099      	str	r1, [r3, r2]

	return 0;
   33008:	2300      	movs	r3, #0
}
   3300a:	0018      	movs	r0, r3
   3300c:	46bd      	mov	sp, r7
   3300e:	b003      	add	sp, #12
   33010:	bd90      	pop	{r4, r7, pc}
   33012:	46c0      	nop			; (mov r8, r8)
   33014:	0003794b 	.word	0x0003794b
   33018:	00037915 	.word	0x00037915
   3301c:	000378ed 	.word	0x000378ed
   33020:	000332ed 	.word	0x000332ed
   33024:	00034991 	.word	0x00034991

00033028 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   33028:	b580      	push	{r7, lr}
   3302a:	b082      	sub	sp, #8
   3302c:	af00      	add	r7, sp, #0
   3302e:	6078      	str	r0, [r7, #4]
   33030:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   33032:	687b      	ldr	r3, [r7, #4]
   33034:	2b00      	cmp	r3, #0
   33036:	d102      	bne.n	3303e <http_client_register_callback+0x16>
		return -EINVAL;
   33038:	2316      	movs	r3, #22
   3303a:	425b      	negs	r3, r3
   3303c:	e003      	b.n	33046 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   3303e:	687b      	ldr	r3, [r7, #4]
   33040:	683a      	ldr	r2, [r7, #0]
   33042:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   33044:	2300      	movs	r3, #0
}
   33046:	0018      	movs	r0, r3
   33048:	46bd      	mov	sp, r7
   3304a:	b002      	add	sp, #8
   3304c:	bd80      	pop	{r7, pc}
	...

00033050 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   33050:	b580      	push	{r7, lr}
   33052:	b082      	sub	sp, #8
   33054:	af00      	add	r7, sp, #0
   33056:	6078      	str	r0, [r7, #4]
	switch (err) {
   33058:	687b      	ldr	r3, [r7, #4]
   3305a:	330e      	adds	r3, #14
   3305c:	2b0e      	cmp	r3, #14
   3305e:	d825      	bhi.n	330ac <_hwerr_to_stderr+0x5c>
   33060:	009a      	lsls	r2, r3, #2
   33062:	4b18      	ldr	r3, [pc, #96]	; (330c4 <_hwerr_to_stderr+0x74>)
   33064:	18d3      	adds	r3, r2, r3
   33066:	681b      	ldr	r3, [r3, #0]
   33068:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   3306a:	2305      	movs	r3, #5
   3306c:	425b      	negs	r3, r3
   3306e:	e024      	b.n	330ba <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   33070:	2302      	movs	r3, #2
   33072:	425b      	negs	r3, r3
   33074:	e021      	b.n	330ba <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   33076:	2370      	movs	r3, #112	; 0x70
   33078:	425b      	negs	r3, r3
   3307a:	e01e      	b.n	330ba <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   3307c:	230c      	movs	r3, #12
   3307e:	425b      	negs	r3, r3
   33080:	e01b      	b.n	330ba <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   33082:	2316      	movs	r3, #22
   33084:	425b      	negs	r3, r3
   33086:	e018      	b.n	330ba <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   33088:	230c      	movs	r3, #12
   3308a:	425b      	negs	r3, r3
   3308c:	e015      	b.n	330ba <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   3308e:	2305      	movs	r3, #5
   33090:	425b      	negs	r3, r3
   33092:	e012      	b.n	330ba <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   33094:	2379      	movs	r3, #121	; 0x79
   33096:	425b      	negs	r3, r3
   33098:	e00f      	b.n	330ba <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   3309a:	2368      	movs	r3, #104	; 0x68
   3309c:	425b      	negs	r3, r3
   3309e:	e00c      	b.n	330ba <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   330a0:	230b      	movs	r3, #11
   330a2:	425b      	negs	r3, r3
   330a4:	e009      	b.n	330ba <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   330a6:	2310      	movs	r3, #16
   330a8:	425b      	negs	r3, r3
   330aa:	e006      	b.n	330ba <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   330ac:	687b      	ldr	r3, [r7, #4]
   330ae:	2b00      	cmp	r3, #0
   330b0:	da02      	bge.n	330b8 <_hwerr_to_stderr+0x68>
				return -EIO;
   330b2:	2305      	movs	r3, #5
   330b4:	425b      	negs	r3, r3
   330b6:	e000      	b.n	330ba <_hwerr_to_stderr+0x6a>
			}
			return 0;
   330b8:	2300      	movs	r3, #0
	}
}
   330ba:	0018      	movs	r0, r3
   330bc:	46bd      	mov	sp, r7
   330be:	b002      	add	sp, #8
   330c0:	bd80      	pop	{r7, pc}
   330c2:	46c0      	nop			; (mov r8, r8)
   330c4:	0003d054 	.word	0x0003d054

000330c8 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   330c8:	b580      	push	{r7, lr}
   330ca:	b08a      	sub	sp, #40	; 0x28
   330cc:	af00      	add	r7, sp, #0
   330ce:	603a      	str	r2, [r7, #0]
   330d0:	1dfb      	adds	r3, r7, #7
   330d2:	1c02      	adds	r2, r0, #0
   330d4:	701a      	strb	r2, [r3, #0]
   330d6:	1dbb      	adds	r3, r7, #6
   330d8:	1c0a      	adds	r2, r1, #0
   330da:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   330dc:	1dfb      	adds	r3, r7, #7
   330de:	2200      	movs	r2, #0
   330e0:	569a      	ldrsb	r2, [r3, r2]
   330e2:	4b4b      	ldr	r3, [pc, #300]	; (33210 <http_client_socket_event_handler+0x148>)
   330e4:	0092      	lsls	r2, r2, #2
   330e6:	58d3      	ldr	r3, [r2, r3]
   330e8:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   330ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   330ec:	2b00      	cmp	r3, #0
   330ee:	d100      	bne.n	330f2 <http_client_socket_event_handler+0x2a>
   330f0:	e08a      	b.n	33208 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   330f2:	1dbb      	adds	r3, r7, #6
   330f4:	781b      	ldrb	r3, [r3, #0]
   330f6:	2b06      	cmp	r3, #6
   330f8:	d040      	beq.n	3317c <http_client_socket_event_handler+0xb4>
   330fa:	2b07      	cmp	r3, #7
   330fc:	d060      	beq.n	331c0 <http_client_socket_event_handler+0xf8>
   330fe:	2b05      	cmp	r3, #5
   33100:	d000      	beq.n	33104 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   33102:	e082      	b.n	3320a <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   33104:	683b      	ldr	r3, [r7, #0]
   33106:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   33108:	6a3b      	ldr	r3, [r7, #32]
   3310a:	785b      	ldrb	r3, [r3, #1]
   3310c:	b25b      	sxtb	r3, r3
   3310e:	001a      	movs	r2, r3
   33110:	230c      	movs	r3, #12
   33112:	18fb      	adds	r3, r7, r3
   33114:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   33116:	6a3b      	ldr	r3, [r7, #32]
   33118:	785b      	ldrb	r3, [r3, #1]
   3311a:	b25b      	sxtb	r3, r3
   3311c:	2b00      	cmp	r3, #0
   3311e:	da0c      	bge.n	3313a <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   33120:	6a3b      	ldr	r3, [r7, #32]
   33122:	785b      	ldrb	r3, [r3, #1]
   33124:	b25b      	sxtb	r3, r3
   33126:	0018      	movs	r0, r3
   33128:	4b3a      	ldr	r3, [pc, #232]	; (33214 <http_client_socket_event_handler+0x14c>)
   3312a:	4798      	blx	r3
   3312c:	0002      	movs	r2, r0
   3312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33130:	0011      	movs	r1, r2
   33132:	0018      	movs	r0, r3
   33134:	4b38      	ldr	r3, [pc, #224]	; (33218 <http_client_socket_event_handler+0x150>)
   33136:	4798      	blx	r3
    	break;
   33138:	e067      	b.n	3320a <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   3313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3313c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3313e:	2b00      	cmp	r3, #0
   33140:	d006      	beq.n	33150 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   33142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33146:	220c      	movs	r2, #12
   33148:	18ba      	adds	r2, r7, r2
   3314a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   3314c:	2100      	movs	r1, #0
   3314e:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   33150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33152:	2203      	movs	r2, #3
   33154:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   33156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33158:	6d58      	ldr	r0, [r3, #84]	; 0x54
   3315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3315c:	6c99      	ldr	r1, [r3, #72]	; 0x48
   3315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33160:	2258      	movs	r2, #88	; 0x58
   33162:	5a9b      	ldrh	r3, [r3, r2]
   33164:	001a      	movs	r2, r3
   33166:	4b2d      	ldr	r3, [pc, #180]	; (3321c <http_client_socket_event_handler+0x154>)
   33168:	4798      	blx	r3
    		_http_client_recv_packet(module);
   3316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3316c:	0018      	movs	r0, r3
   3316e:	4b2c      	ldr	r3, [pc, #176]	; (33220 <http_client_socket_event_handler+0x158>)
   33170:	4798      	blx	r3
			_http_client_request(module);
   33172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33174:	0018      	movs	r0, r3
   33176:	4b2b      	ldr	r3, [pc, #172]	; (33224 <http_client_socket_event_handler+0x15c>)
   33178:	4798      	blx	r3
    	break;
   3317a:	e046      	b.n	3320a <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   3317c:	683b      	ldr	r3, [r7, #0]
   3317e:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   33180:	69fb      	ldr	r3, [r7, #28]
   33182:	2204      	movs	r2, #4
   33184:	5e9b      	ldrsh	r3, [r3, r2]
   33186:	2b00      	cmp	r3, #0
   33188:	dd09      	ble.n	3319e <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   3318a:	69fb      	ldr	r3, [r7, #28]
   3318c:	2204      	movs	r2, #4
   3318e:	5e9b      	ldrsh	r3, [r3, r2]
   33190:	001a      	movs	r2, r3
   33192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33194:	0011      	movs	r1, r2
   33196:	0018      	movs	r0, r3
   33198:	4b23      	ldr	r3, [pc, #140]	; (33228 <http_client_socket_event_handler+0x160>)
   3319a:	4798      	blx	r3
   3319c:	e00b      	b.n	331b6 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   3319e:	69fb      	ldr	r3, [r7, #28]
   331a0:	2204      	movs	r2, #4
   331a2:	5e9b      	ldrsh	r3, [r3, r2]
   331a4:	0018      	movs	r0, r3
   331a6:	4b1b      	ldr	r3, [pc, #108]	; (33214 <http_client_socket_event_handler+0x14c>)
   331a8:	4798      	blx	r3
   331aa:	0002      	movs	r2, r0
   331ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   331ae:	0011      	movs	r1, r2
   331b0:	0018      	movs	r0, r3
   331b2:	4b19      	ldr	r3, [pc, #100]	; (33218 <http_client_socket_event_handler+0x150>)
   331b4:	4798      	blx	r3
		_http_client_recv_packet(module);
   331b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   331b8:	0018      	movs	r0, r3
   331ba:	4b19      	ldr	r3, [pc, #100]	; (33220 <http_client_socket_event_handler+0x158>)
   331bc:	4798      	blx	r3
		break;
   331be:	e024      	b.n	3320a <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   331c0:	231a      	movs	r3, #26
   331c2:	18fb      	adds	r3, r7, r3
   331c4:	683a      	ldr	r2, [r7, #0]
   331c6:	8812      	ldrh	r2, [r2, #0]
   331c8:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   331ca:	231a      	movs	r3, #26
   331cc:	18fb      	adds	r3, r7, r3
   331ce:	2200      	movs	r2, #0
   331d0:	5e9b      	ldrsh	r3, [r3, r2]
   331d2:	2b00      	cmp	r3, #0
   331d4:	da0d      	bge.n	331f2 <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   331d6:	231a      	movs	r3, #26
   331d8:	18fb      	adds	r3, r7, r3
   331da:	2200      	movs	r2, #0
   331dc:	5e9b      	ldrsh	r3, [r3, r2]
   331de:	0018      	movs	r0, r3
   331e0:	4b0c      	ldr	r3, [pc, #48]	; (33214 <http_client_socket_event_handler+0x14c>)
   331e2:	4798      	blx	r3
   331e4:	0002      	movs	r2, r0
   331e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   331e8:	0011      	movs	r1, r2
   331ea:	0018      	movs	r0, r3
   331ec:	4b0a      	ldr	r3, [pc, #40]	; (33218 <http_client_socket_event_handler+0x150>)
   331ee:	4798      	blx	r3
   331f0:	e003      	b.n	331fa <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   331f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   331f4:	0018      	movs	r0, r3
   331f6:	4b0b      	ldr	r3, [pc, #44]	; (33224 <http_client_socket_event_handler+0x15c>)
   331f8:	4798      	blx	r3
		module->sending = 0;
   331fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   331fc:	2241      	movs	r2, #65	; 0x41
   331fe:	5c99      	ldrb	r1, [r3, r2]
   33200:	2001      	movs	r0, #1
   33202:	4381      	bics	r1, r0
   33204:	5499      	strb	r1, [r3, r2]
    	break;
   33206:	e000      	b.n	3320a <http_client_socket_event_handler+0x142>
		return;
   33208:	46c0      	nop			; (mov r8, r8)
	}

}
   3320a:	46bd      	mov	sp, r7
   3320c:	b00a      	add	sp, #40	; 0x28
   3320e:	bd80      	pop	{r7, pc}
   33210:	20004568 	.word	0x20004568
   33214:	00033051 	.word	0x00033051
   33218:	000336c5 	.word	0x000336c5
   3321c:	00034a21 	.word	0x00034a21
   33220:	00033f51 	.word	0x00033f51
   33224:	00033819 	.word	0x00033819
   33228:	00033fb5 	.word	0x00033fb5

0003322c <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   3322c:	b580      	push	{r7, lr}
   3322e:	b088      	sub	sp, #32
   33230:	af00      	add	r7, sp, #0
   33232:	6078      	str	r0, [r7, #4]
   33234:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   33236:	2300      	movs	r3, #0
   33238:	61fb      	str	r3, [r7, #28]
   3323a:	e048      	b.n	332ce <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   3323c:	4b27      	ldr	r3, [pc, #156]	; (332dc <http_client_socket_resolve_handler+0xb0>)
   3323e:	69fa      	ldr	r2, [r7, #28]
   33240:	0092      	lsls	r2, r2, #2
   33242:	58d3      	ldr	r3, [r2, r3]
   33244:	2b00      	cmp	r3, #0
   33246:	d03f      	beq.n	332c8 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   33248:	4b24      	ldr	r3, [pc, #144]	; (332dc <http_client_socket_resolve_handler+0xb0>)
   3324a:	69fa      	ldr	r2, [r7, #28]
   3324c:	0092      	lsls	r2, r2, #2
   3324e:	58d3      	ldr	r3, [r2, r3]
   33250:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   33252:	69bb      	ldr	r3, [r7, #24]
   33254:	1c5a      	adds	r2, r3, #1
   33256:	687b      	ldr	r3, [r7, #4]
   33258:	0011      	movs	r1, r2
   3325a:	0018      	movs	r0, r3
   3325c:	4b20      	ldr	r3, [pc, #128]	; (332e0 <http_client_socket_resolve_handler+0xb4>)
   3325e:	4798      	blx	r3
   33260:	1e03      	subs	r3, r0, #0
   33262:	d131      	bne.n	332c8 <http_client_socket_resolve_handler+0x9c>
   33264:	69bb      	ldr	r3, [r7, #24]
   33266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   33268:	2b01      	cmp	r3, #1
   3326a:	d12d      	bne.n	332c8 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   3326c:	683b      	ldr	r3, [r7, #0]
   3326e:	2b00      	cmp	r3, #0
   33270:	d107      	bne.n	33282 <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   33272:	2376      	movs	r3, #118	; 0x76
   33274:	425a      	negs	r2, r3
   33276:	69bb      	ldr	r3, [r7, #24]
   33278:	0011      	movs	r1, r2
   3327a:	0018      	movs	r0, r3
   3327c:	4b19      	ldr	r3, [pc, #100]	; (332e4 <http_client_socket_resolve_handler+0xb8>)
   3327e:	4798      	blx	r3
					return;
   33280:	e028      	b.n	332d4 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   33282:	2308      	movs	r3, #8
   33284:	18fb      	adds	r3, r7, r3
   33286:	2202      	movs	r2, #2
   33288:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   3328a:	69bb      	ldr	r3, [r7, #24]
   3328c:	2250      	movs	r2, #80	; 0x50
   3328e:	5a9b      	ldrh	r3, [r3, r2]
   33290:	021b      	lsls	r3, r3, #8
   33292:	b21a      	sxth	r2, r3
   33294:	69bb      	ldr	r3, [r7, #24]
   33296:	2150      	movs	r1, #80	; 0x50
   33298:	5a5b      	ldrh	r3, [r3, r1]
   3329a:	0a1b      	lsrs	r3, r3, #8
   3329c:	b29b      	uxth	r3, r3
   3329e:	b21b      	sxth	r3, r3
   332a0:	4313      	orrs	r3, r2
   332a2:	b21b      	sxth	r3, r3
   332a4:	b29a      	uxth	r2, r3
   332a6:	2308      	movs	r3, #8
   332a8:	18fb      	adds	r3, r7, r3
   332aa:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   332ac:	2308      	movs	r3, #8
   332ae:	18fb      	adds	r3, r7, r3
   332b0:	683a      	ldr	r2, [r7, #0]
   332b2:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   332b4:	69bb      	ldr	r3, [r7, #24]
   332b6:	781b      	ldrb	r3, [r3, #0]
   332b8:	b25b      	sxtb	r3, r3
   332ba:	2208      	movs	r2, #8
   332bc:	18b9      	adds	r1, r7, r2
   332be:	2210      	movs	r2, #16
   332c0:	0018      	movs	r0, r3
   332c2:	4b09      	ldr	r3, [pc, #36]	; (332e8 <http_client_socket_resolve_handler+0xbc>)
   332c4:	4798      	blx	r3
				return;
   332c6:	e005      	b.n	332d4 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   332c8:	69fb      	ldr	r3, [r7, #28]
   332ca:	3301      	adds	r3, #1
   332cc:	61fb      	str	r3, [r7, #28]
   332ce:	69fb      	ldr	r3, [r7, #28]
   332d0:	2b06      	cmp	r3, #6
   332d2:	ddb3      	ble.n	3323c <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   332d4:	46bd      	mov	sp, r7
   332d6:	b008      	add	sp, #32
   332d8:	bd80      	pop	{r7, pc}
   332da:	46c0      	nop			; (mov r8, r8)
   332dc:	20004568 	.word	0x20004568
   332e0:	00037ca3 	.word	0x00037ca3
   332e4:	000336c5 	.word	0x000336c5
   332e8:	00027b8d 	.word	0x00027b8d

000332ec <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   332ec:	b580      	push	{r7, lr}
   332ee:	b086      	sub	sp, #24
   332f0:	af00      	add	r7, sp, #0
   332f2:	60f8      	str	r0, [r7, #12]
   332f4:	60b9      	str	r1, [r7, #8]
   332f6:	607a      	str	r2, [r7, #4]
   332f8:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   332fa:	687b      	ldr	r3, [r7, #4]
   332fc:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   332fe:	697b      	ldr	r3, [r7, #20]
   33300:	2b00      	cmp	r3, #0
   33302:	d007      	beq.n	33314 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   33304:	233e      	movs	r3, #62	; 0x3e
   33306:	425a      	negs	r2, r3
   33308:	697b      	ldr	r3, [r7, #20]
   3330a:	0011      	movs	r1, r2
   3330c:	0018      	movs	r0, r3
   3330e:	4b03      	ldr	r3, [pc, #12]	; (3331c <http_client_timer_callback+0x30>)
   33310:	4798      	blx	r3
   33312:	e000      	b.n	33316 <http_client_timer_callback+0x2a>
		return;
   33314:	46c0      	nop			; (mov r8, r8)
}
   33316:	46bd      	mov	sp, r7
   33318:	b006      	add	sp, #24
   3331a:	bd80      	pop	{r7, pc}
   3331c:	000336c5 	.word	0x000336c5

00033320 <_is_ip>:

static int _is_ip(const char *host)
{
   33320:	b580      	push	{r7, lr}
   33322:	b084      	sub	sp, #16
   33324:	af00      	add	r7, sp, #0
   33326:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   33328:	2300      	movs	r3, #0
   3332a:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   3332c:	e03a      	b.n	333a4 <_is_ip+0x84>
		ch = *host++;
   3332e:	687b      	ldr	r3, [r7, #4]
   33330:	1c5a      	adds	r2, r3, #1
   33332:	607a      	str	r2, [r7, #4]
   33334:	220b      	movs	r2, #11
   33336:	18ba      	adds	r2, r7, r2
   33338:	781b      	ldrb	r3, [r3, #0]
   3333a:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   3333c:	230b      	movs	r3, #11
   3333e:	18fb      	adds	r3, r7, r3
   33340:	781b      	ldrb	r3, [r3, #0]
   33342:	2b60      	cmp	r3, #96	; 0x60
   33344:	d904      	bls.n	33350 <_is_ip+0x30>
   33346:	230b      	movs	r3, #11
   33348:	18fb      	adds	r3, r7, r3
   3334a:	781b      	ldrb	r3, [r3, #0]
   3334c:	2b66      	cmp	r3, #102	; 0x66
   3334e:	d913      	bls.n	33378 <_is_ip+0x58>
   33350:	230b      	movs	r3, #11
   33352:	18fb      	adds	r3, r7, r3
   33354:	781b      	ldrb	r3, [r3, #0]
   33356:	2b40      	cmp	r3, #64	; 0x40
   33358:	d904      	bls.n	33364 <_is_ip+0x44>
   3335a:	230b      	movs	r3, #11
   3335c:	18fb      	adds	r3, r7, r3
   3335e:	781b      	ldrb	r3, [r3, #0]
   33360:	2b46      	cmp	r3, #70	; 0x46
   33362:	d909      	bls.n	33378 <_is_ip+0x58>
   33364:	230b      	movs	r3, #11
   33366:	18fb      	adds	r3, r7, r3
   33368:	781b      	ldrb	r3, [r3, #0]
   3336a:	2b3a      	cmp	r3, #58	; 0x3a
   3336c:	d004      	beq.n	33378 <_is_ip+0x58>
   3336e:	230b      	movs	r3, #11
   33370:	18fb      	adds	r3, r7, r3
   33372:	781b      	ldrb	r3, [r3, #0]
   33374:	2b2f      	cmp	r3, #47	; 0x2f
   33376:	d102      	bne.n	3337e <_is_ip+0x5e>
			isv6 = 1;
   33378:	2301      	movs	r3, #1
   3337a:	60fb      	str	r3, [r7, #12]
   3337c:	e012      	b.n	333a4 <_is_ip+0x84>
		} else if (ch == '.') {
   3337e:	230b      	movs	r3, #11
   33380:	18fb      	adds	r3, r7, r3
   33382:	781b      	ldrb	r3, [r3, #0]
   33384:	2b2e      	cmp	r3, #46	; 0x2e
   33386:	d104      	bne.n	33392 <_is_ip+0x72>
			if (isv6) {
   33388:	68fb      	ldr	r3, [r7, #12]
   3338a:	2b00      	cmp	r3, #0
   3338c:	d00a      	beq.n	333a4 <_is_ip+0x84>
				return 0;
   3338e:	2300      	movs	r3, #0
   33390:	e00d      	b.n	333ae <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   33392:	230b      	movs	r3, #11
   33394:	18fb      	adds	r3, r7, r3
   33396:	781b      	ldrb	r3, [r3, #0]
   33398:	2230      	movs	r2, #48	; 0x30
   3339a:	4013      	ands	r3, r2
   3339c:	2b30      	cmp	r3, #48	; 0x30
   3339e:	d001      	beq.n	333a4 <_is_ip+0x84>
			return 0;
   333a0:	2300      	movs	r3, #0
   333a2:	e004      	b.n	333ae <_is_ip+0x8e>
	while (*host != '\0') {
   333a4:	687b      	ldr	r3, [r7, #4]
   333a6:	781b      	ldrb	r3, [r3, #0]
   333a8:	2b00      	cmp	r3, #0
   333aa:	d1c0      	bne.n	3332e <_is_ip+0xe>
		}
	}
	return 1;
   333ac:	2301      	movs	r3, #1
}
   333ae:	0018      	movs	r0, r3
   333b0:	46bd      	mov	sp, r7
   333b2:	b004      	add	sp, #16
   333b4:	bd80      	pop	{r7, pc}
	...

000333b8 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   333b8:	b5b0      	push	{r4, r5, r7, lr}
   333ba:	b08e      	sub	sp, #56	; 0x38
   333bc:	af00      	add	r7, sp, #0
   333be:	60f8      	str	r0, [r7, #12]
   333c0:	60b9      	str	r1, [r7, #8]
   333c2:	603b      	str	r3, [r7, #0]
   333c4:	1dfb      	adds	r3, r7, #7
   333c6:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   333c8:	2337      	movs	r3, #55	; 0x37
   333ca:	18fb      	adds	r3, r7, r3
   333cc:	2200      	movs	r2, #0
   333ce:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   333d0:	2300      	movs	r3, #0
   333d2:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   333d4:	2300      	movs	r3, #0
   333d6:	633b      	str	r3, [r7, #48]	; 0x30
   333d8:	2300      	movs	r3, #0
   333da:	62fb      	str	r3, [r7, #44]	; 0x2c
   333dc:	2300      	movs	r3, #0
   333de:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   333e0:	68fb      	ldr	r3, [r7, #12]
   333e2:	2b00      	cmp	r3, #0
   333e4:	d102      	bne.n	333ec <http_client_send_request+0x34>
		return -EINVAL;
   333e6:	2316      	movs	r3, #22
   333e8:	425b      	negs	r3, r3
   333ea:	e145      	b.n	33678 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   333ec:	68fb      	ldr	r3, [r7, #12]
   333ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   333f0:	2b02      	cmp	r3, #2
   333f2:	d902      	bls.n	333fa <http_client_send_request+0x42>
		return -EBUSY;
   333f4:	2310      	movs	r3, #16
   333f6:	425b      	negs	r3, r3
   333f8:	e13e      	b.n	33678 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   333fa:	49a1      	ldr	r1, [pc, #644]	; (33680 <http_client_send_request+0x2c8>)
   333fc:	68bb      	ldr	r3, [r7, #8]
   333fe:	2207      	movs	r2, #7
   33400:	0018      	movs	r0, r3
   33402:	4ba0      	ldr	r3, [pc, #640]	; (33684 <http_client_send_request+0x2cc>)
   33404:	4798      	blx	r3
   33406:	1e03      	subs	r3, r0, #0
   33408:	d102      	bne.n	33410 <http_client_send_request+0x58>
		i = 7;
   3340a:	2307      	movs	r3, #7
   3340c:	633b      	str	r3, [r7, #48]	; 0x30
   3340e:	e009      	b.n	33424 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   33410:	499d      	ldr	r1, [pc, #628]	; (33688 <http_client_send_request+0x2d0>)
   33412:	68bb      	ldr	r3, [r7, #8]
   33414:	2208      	movs	r2, #8
   33416:	0018      	movs	r0, r3
   33418:	4b9a      	ldr	r3, [pc, #616]	; (33684 <http_client_send_request+0x2cc>)
   3341a:	4798      	blx	r3
   3341c:	1e03      	subs	r3, r0, #0
   3341e:	d101      	bne.n	33424 <http_client_send_request+0x6c>
		i = 8;
   33420:	2308      	movs	r3, #8
   33422:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   33424:	68fb      	ldr	r3, [r7, #12]
   33426:	1c5c      	adds	r4, r3, #1
   33428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3342a:	68ba      	ldr	r2, [r7, #8]
   3342c:	18d5      	adds	r5, r2, r3
   3342e:	68fb      	ldr	r3, [r7, #12]
   33430:	3301      	adds	r3, #1
   33432:	0018      	movs	r0, r3
   33434:	4b95      	ldr	r3, [pc, #596]	; (3368c <http_client_send_request+0x2d4>)
   33436:	4798      	blx	r3
   33438:	0003      	movs	r3, r0
   3343a:	001a      	movs	r2, r3
   3343c:	0029      	movs	r1, r5
   3343e:	0020      	movs	r0, r4
   33440:	4b90      	ldr	r3, [pc, #576]	; (33684 <http_client_send_request+0x2cc>)
   33442:	4798      	blx	r3
   33444:	0003      	movs	r3, r0
   33446:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   33448:	e00d      	b.n	33466 <http_client_send_request+0xae>
		module->host[j++] = url[i];
   3344a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   3344c:	1c5a      	adds	r2, r3, #1
   3344e:	62fa      	str	r2, [r7, #44]	; 0x2c
   33450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   33452:	68b9      	ldr	r1, [r7, #8]
   33454:	188a      	adds	r2, r1, r2
   33456:	7811      	ldrb	r1, [r2, #0]
   33458:	68fa      	ldr	r2, [r7, #12]
   3345a:	18d3      	adds	r3, r2, r3
   3345c:	1c0a      	adds	r2, r1, #0
   3345e:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   33460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   33462:	3301      	adds	r3, #1
   33464:	633b      	str	r3, [r7, #48]	; 0x30
   33466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   33468:	68ba      	ldr	r2, [r7, #8]
   3346a:	18d3      	adds	r3, r2, r3
   3346c:	781b      	ldrb	r3, [r3, #0]
   3346e:	2b00      	cmp	r3, #0
   33470:	d005      	beq.n	3347e <http_client_send_request+0xc6>
   33472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   33474:	68ba      	ldr	r2, [r7, #8]
   33476:	18d3      	adds	r3, r2, r3
   33478:	781b      	ldrb	r3, [r3, #0]
   3347a:	2b2f      	cmp	r3, #47	; 0x2f
   3347c:	d1e5      	bne.n	3344a <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   3347e:	68fa      	ldr	r2, [r7, #12]
   33480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   33482:	18d3      	adds	r3, r2, r3
   33484:	3301      	adds	r3, #1
   33486:	2200      	movs	r2, #0
   33488:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   3348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3348c:	68ba      	ldr	r2, [r7, #8]
   3348e:	18d3      	adds	r3, r2, r3
   33490:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   33492:	68fb      	ldr	r3, [r7, #12]
   33494:	3301      	adds	r3, #1
   33496:	781b      	ldrb	r3, [r3, #0]
   33498:	2b00      	cmp	r3, #0
   3349a:	d102      	bne.n	334a2 <http_client_send_request+0xea>
		return -EINVAL;
   3349c:	2316      	movs	r3, #22
   3349e:	425b      	negs	r3, r3
   334a0:	e0ea      	b.n	33678 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   334a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   334a4:	0018      	movs	r0, r3
   334a6:	4b79      	ldr	r3, [pc, #484]	; (3368c <http_client_send_request+0x2d4>)
   334a8:	4798      	blx	r3
   334aa:	0003      	movs	r3, r0
   334ac:	2b3f      	cmp	r3, #63	; 0x3f
   334ae:	d902      	bls.n	334b6 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   334b0:	235b      	movs	r3, #91	; 0x5b
   334b2:	425b      	negs	r3, r3
   334b4:	e0e0      	b.n	33678 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   334b6:	68fb      	ldr	r3, [r7, #12]
   334b8:	22d4      	movs	r2, #212	; 0xd4
   334ba:	589b      	ldr	r3, [r3, r2]
   334bc:	2b00      	cmp	r3, #0
   334be:	d005      	beq.n	334cc <http_client_send_request+0x114>
		free(module->req.ext_header);
   334c0:	68fb      	ldr	r3, [r7, #12]
   334c2:	22d4      	movs	r2, #212	; 0xd4
   334c4:	589b      	ldr	r3, [r3, r2]
   334c6:	0018      	movs	r0, r3
   334c8:	4b71      	ldr	r3, [pc, #452]	; (33690 <http_client_send_request+0x2d8>)
   334ca:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   334cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   334ce:	2b00      	cmp	r3, #0
   334d0:	d010      	beq.n	334f4 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   334d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   334d4:	0018      	movs	r0, r3
   334d6:	4b6f      	ldr	r3, [pc, #444]	; (33694 <http_client_send_request+0x2dc>)
   334d8:	4798      	blx	r3
   334da:	0003      	movs	r3, r0
   334dc:	0019      	movs	r1, r3
   334de:	68fb      	ldr	r3, [r7, #12]
   334e0:	22d4      	movs	r2, #212	; 0xd4
   334e2:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   334e4:	68fb      	ldr	r3, [r7, #12]
   334e6:	22d4      	movs	r2, #212	; 0xd4
   334e8:	589b      	ldr	r3, [r3, r2]
   334ea:	2b00      	cmp	r3, #0
   334ec:	d106      	bne.n	334fc <http_client_send_request+0x144>
			return -ENOMEM;
   334ee:	230c      	movs	r3, #12
   334f0:	425b      	negs	r3, r3
   334f2:	e0c1      	b.n	33678 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   334f4:	68fb      	ldr	r3, [r7, #12]
   334f6:	22d4      	movs	r2, #212	; 0xd4
   334f8:	2100      	movs	r1, #0
   334fa:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   334fc:	68fb      	ldr	r3, [r7, #12]
   334fe:	2241      	movs	r2, #65	; 0x41
   33500:	5c99      	ldrb	r1, [r3, r2]
   33502:	2001      	movs	r0, #1
   33504:	4381      	bics	r1, r0
   33506:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   33508:	68fb      	ldr	r3, [r7, #12]
   3350a:	2200      	movs	r2, #0
   3350c:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   3350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   33510:	781b      	ldrb	r3, [r3, #0]
   33512:	2b2f      	cmp	r3, #47	; 0x2f
   33514:	d107      	bne.n	33526 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   33516:	68fb      	ldr	r3, [r7, #12]
   33518:	3370      	adds	r3, #112	; 0x70
   3351a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   3351c:	0011      	movs	r1, r2
   3351e:	0018      	movs	r0, r3
   33520:	4b5d      	ldr	r3, [pc, #372]	; (33698 <http_client_send_request+0x2e0>)
   33522:	4798      	blx	r3
   33524:	e00f      	b.n	33546 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   33526:	68fb      	ldr	r3, [r7, #12]
   33528:	2270      	movs	r2, #112	; 0x70
   3352a:	212f      	movs	r1, #47	; 0x2f
   3352c:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   3352e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   33530:	781b      	ldrb	r3, [r3, #0]
   33532:	2b00      	cmp	r3, #0
   33534:	d007      	beq.n	33546 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   33536:	68fb      	ldr	r3, [r7, #12]
   33538:	3370      	adds	r3, #112	; 0x70
   3353a:	3301      	adds	r3, #1
   3353c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   3353e:	0011      	movs	r1, r2
   33540:	0018      	movs	r0, r3
   33542:	4b55      	ldr	r3, [pc, #340]	; (33698 <http_client_send_request+0x2e0>)
   33544:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   33546:	683b      	ldr	r3, [r7, #0]
   33548:	2b00      	cmp	r3, #0
   3354a:	d007      	beq.n	3355c <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   3354c:	68fb      	ldr	r3, [r7, #12]
   3354e:	33b0      	adds	r3, #176	; 0xb0
   33550:	6839      	ldr	r1, [r7, #0]
   33552:	2218      	movs	r2, #24
   33554:	0018      	movs	r0, r3
   33556:	4b51      	ldr	r3, [pc, #324]	; (3369c <http_client_send_request+0x2e4>)
   33558:	4798      	blx	r3
   3355a:	e006      	b.n	3356a <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   3355c:	68fb      	ldr	r3, [r7, #12]
   3355e:	33b0      	adds	r3, #176	; 0xb0
   33560:	2218      	movs	r2, #24
   33562:	2100      	movs	r1, #0
   33564:	0018      	movs	r0, r3
   33566:	4b4e      	ldr	r3, [pc, #312]	; (336a0 <http_client_send_request+0x2e8>)
   33568:	4798      	blx	r3
	}

	module->req.method = method;
   3356a:	68fb      	ldr	r3, [r7, #12]
   3356c:	1dfa      	adds	r2, r7, #7
   3356e:	21c8      	movs	r1, #200	; 0xc8
   33570:	7812      	ldrb	r2, [r2, #0]
   33572:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   33574:	68fb      	ldr	r3, [r7, #12]
   33576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   33578:	2b01      	cmp	r3, #1
   3357a:	d003      	beq.n	33584 <http_client_send_request+0x1cc>
   3357c:	d316      	bcc.n	335ac <http_client_send_request+0x1f4>
   3357e:	2b02      	cmp	r3, #2
   33580:	d004      	beq.n	3358c <http_client_send_request+0x1d4>
   33582:	e074      	b.n	3366e <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   33584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33586:	2b00      	cmp	r3, #0
   33588:	d100      	bne.n	3358c <http_client_send_request+0x1d4>
   3358a:	e073      	b.n	33674 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   3358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3358e:	2b00      	cmp	r3, #0
   33590:	d107      	bne.n	335a2 <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   33592:	68fb      	ldr	r3, [r7, #12]
   33594:	2203      	movs	r2, #3
   33596:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   33598:	68fb      	ldr	r3, [r7, #12]
   3359a:	0018      	movs	r0, r3
   3359c:	4b41      	ldr	r3, [pc, #260]	; (336a4 <http_client_send_request+0x2ec>)
   3359e:	4798      	blx	r3
			break;
   335a0:	e069      	b.n	33676 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   335a2:	68fb      	ldr	r3, [r7, #12]
   335a4:	2100      	movs	r1, #0
   335a6:	0018      	movs	r0, r3
   335a8:	4b3f      	ldr	r3, [pc, #252]	; (336a8 <http_client_send_request+0x2f0>)
   335aa:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   335ac:	68fb      	ldr	r3, [r7, #12]
   335ae:	2252      	movs	r2, #82	; 0x52
   335b0:	5c9b      	ldrb	r3, [r3, r2]
   335b2:	2b00      	cmp	r3, #0
   335b4:	d007      	beq.n	335c6 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   335b6:	2337      	movs	r3, #55	; 0x37
   335b8:	18fb      	adds	r3, r7, r3
   335ba:	2237      	movs	r2, #55	; 0x37
   335bc:	18ba      	adds	r2, r7, r2
   335be:	7812      	ldrb	r2, [r2, #0]
   335c0:	2101      	movs	r1, #1
   335c2:	430a      	orrs	r2, r1
   335c4:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   335c6:	2337      	movs	r3, #55	; 0x37
   335c8:	18fb      	adds	r3, r7, r3
   335ca:	781b      	ldrb	r3, [r3, #0]
   335cc:	001a      	movs	r2, r3
   335ce:	2101      	movs	r1, #1
   335d0:	2002      	movs	r0, #2
   335d2:	4b36      	ldr	r3, [pc, #216]	; (336ac <http_client_send_request+0x2f4>)
   335d4:	4798      	blx	r3
   335d6:	0003      	movs	r3, r0
   335d8:	001a      	movs	r2, r3
   335da:	68fb      	ldr	r3, [r7, #12]
   335dc:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   335de:	68fb      	ldr	r3, [r7, #12]
   335e0:	781b      	ldrb	r3, [r3, #0]
   335e2:	b25b      	sxtb	r3, r3
   335e4:	2b00      	cmp	r3, #0
   335e6:	db3f      	blt.n	33668 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   335e8:	68fb      	ldr	r3, [r7, #12]
   335ea:	781b      	ldrb	r3, [r3, #0]
   335ec:	b25b      	sxtb	r3, r3
   335ee:	001a      	movs	r2, r3
   335f0:	4b2f      	ldr	r3, [pc, #188]	; (336b0 <http_client_send_request+0x2f8>)
   335f2:	0092      	lsls	r2, r2, #2
   335f4:	68f9      	ldr	r1, [r7, #12]
   335f6:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   335f8:	68fb      	ldr	r3, [r7, #12]
   335fa:	3301      	adds	r3, #1
   335fc:	0018      	movs	r0, r3
   335fe:	4b2d      	ldr	r3, [pc, #180]	; (336b4 <http_client_send_request+0x2fc>)
   33600:	4798      	blx	r3
   33602:	1e03      	subs	r3, r0, #0
   33604:	d027      	beq.n	33656 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   33606:	2314      	movs	r3, #20
   33608:	18fb      	adds	r3, r7, r3
   3360a:	2202      	movs	r2, #2
   3360c:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   3360e:	68fb      	ldr	r3, [r7, #12]
   33610:	2250      	movs	r2, #80	; 0x50
   33612:	5a9b      	ldrh	r3, [r3, r2]
   33614:	021b      	lsls	r3, r3, #8
   33616:	b21a      	sxth	r2, r3
   33618:	68fb      	ldr	r3, [r7, #12]
   3361a:	2150      	movs	r1, #80	; 0x50
   3361c:	5a5b      	ldrh	r3, [r3, r1]
   3361e:	0a1b      	lsrs	r3, r3, #8
   33620:	b29b      	uxth	r3, r3
   33622:	b21b      	sxth	r3, r3
   33624:	4313      	orrs	r3, r2
   33626:	b21b      	sxth	r3, r3
   33628:	b29a      	uxth	r2, r3
   3362a:	2314      	movs	r3, #20
   3362c:	18fb      	adds	r3, r7, r3
   3362e:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   33630:	68fb      	ldr	r3, [r7, #12]
   33632:	3301      	adds	r3, #1
   33634:	0018      	movs	r0, r3
   33636:	4b20      	ldr	r3, [pc, #128]	; (336b8 <http_client_send_request+0x300>)
   33638:	4798      	blx	r3
   3363a:	0002      	movs	r2, r0
   3363c:	2314      	movs	r3, #20
   3363e:	18fb      	adds	r3, r7, r3
   33640:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   33642:	68fb      	ldr	r3, [r7, #12]
   33644:	781b      	ldrb	r3, [r3, #0]
   33646:	b25b      	sxtb	r3, r3
   33648:	2214      	movs	r2, #20
   3364a:	18b9      	adds	r1, r7, r2
   3364c:	2210      	movs	r2, #16
   3364e:	0018      	movs	r0, r3
   33650:	4b1a      	ldr	r3, [pc, #104]	; (336bc <http_client_send_request+0x304>)
   33652:	4798      	blx	r3
   33654:	e004      	b.n	33660 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   33656:	68fb      	ldr	r3, [r7, #12]
   33658:	3301      	adds	r3, #1
   3365a:	0018      	movs	r0, r3
   3365c:	4b18      	ldr	r3, [pc, #96]	; (336c0 <http_client_send_request+0x308>)
   3365e:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   33660:	68fb      	ldr	r3, [r7, #12]
   33662:	2201      	movs	r2, #1
   33664:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   33666:	e006      	b.n	33676 <http_client_send_request+0x2be>
			return -ENOSPC;
   33668:	231c      	movs	r3, #28
   3366a:	425b      	negs	r3, r3
   3366c:	e004      	b.n	33678 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   3366e:	230b      	movs	r3, #11
   33670:	425b      	negs	r3, r3
   33672:	e001      	b.n	33678 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   33674:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   33676:	2300      	movs	r3, #0
}
   33678:	0018      	movs	r0, r3
   3367a:	46bd      	mov	sp, r7
   3367c:	b00e      	add	sp, #56	; 0x38
   3367e:	bdb0      	pop	{r4, r5, r7, pc}
   33680:	0003cf24 	.word	0x0003cf24
   33684:	00037d11 	.word	0x00037d11
   33688:	0003cf2c 	.word	0x0003cf2c
   3368c:	00037d03 	.word	0x00037d03
   33690:	00037901 	.word	0x00037901
   33694:	00037cc9 	.word	0x00037cc9
   33698:	00037cb7 	.word	0x00037cb7
   3369c:	00037915 	.word	0x00037915
   336a0:	0003794b 	.word	0x0003794b
   336a4:	00033819 	.word	0x00033819
   336a8:	000336c5 	.word	0x000336c5
   336ac:	00027979 	.word	0x00027979
   336b0:	20004568 	.word	0x20004568
   336b4:	00033321 	.word	0x00033321
   336b8:	000280c5 	.word	0x000280c5
   336bc:	00027b8d 	.word	0x00027b8d
   336c0:	000281cd 	.word	0x000281cd

000336c4 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   336c4:	b580      	push	{r7, lr}
   336c6:	b086      	sub	sp, #24
   336c8:	af00      	add	r7, sp, #0
   336ca:	6078      	str	r0, [r7, #4]
   336cc:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   336ce:	687b      	ldr	r3, [r7, #4]
   336d0:	22c0      	movs	r2, #192	; 0xc0
   336d2:	589b      	ldr	r3, [r3, r2]
   336d4:	2b00      	cmp	r3, #0
   336d6:	d007      	beq.n	336e8 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   336d8:	687b      	ldr	r3, [r7, #4]
   336da:	22c0      	movs	r2, #192	; 0xc0
   336dc:	589b      	ldr	r3, [r3, r2]
   336de:	687a      	ldr	r2, [r7, #4]
   336e0:	21c4      	movs	r1, #196	; 0xc4
   336e2:	5852      	ldr	r2, [r2, r1]
   336e4:	0010      	movs	r0, r2
   336e6:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   336e8:	687b      	ldr	r3, [r7, #4]
   336ea:	33b0      	adds	r3, #176	; 0xb0
   336ec:	2218      	movs	r2, #24
   336ee:	2100      	movs	r1, #0
   336f0:	0018      	movs	r0, r3
   336f2:	4b24      	ldr	r3, [pc, #144]	; (33784 <_http_client_clear_conn+0xc0>)
   336f4:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   336f6:	687b      	ldr	r3, [r7, #4]
   336f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   336fa:	2b00      	cmp	r3, #0
   336fc:	d005      	beq.n	3370a <_http_client_clear_conn+0x46>
		close(module->sock);
   336fe:	687b      	ldr	r3, [r7, #4]
   33700:	781b      	ldrb	r3, [r3, #0]
   33702:	b25b      	sxtb	r3, r3
   33704:	0018      	movs	r0, r3
   33706:	4b20      	ldr	r3, [pc, #128]	; (33788 <_http_client_clear_conn+0xc4>)
   33708:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   3370a:	687b      	ldr	r3, [r7, #4]
   3370c:	781b      	ldrb	r3, [r3, #0]
   3370e:	b25b      	sxtb	r3, r3
   33710:	001a      	movs	r2, r3
   33712:	4b1e      	ldr	r3, [pc, #120]	; (3378c <_http_client_clear_conn+0xc8>)
   33714:	0092      	lsls	r2, r2, #2
   33716:	2100      	movs	r1, #0
   33718:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   3371a:	687b      	ldr	r3, [r7, #4]
   3371c:	336c      	adds	r3, #108	; 0x6c
   3371e:	226c      	movs	r2, #108	; 0x6c
   33720:	2100      	movs	r1, #0
   33722:	0018      	movs	r0, r3
   33724:	4b17      	ldr	r3, [pc, #92]	; (33784 <_http_client_clear_conn+0xc0>)
   33726:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   33728:	687b      	ldr	r3, [r7, #4]
   3372a:	33d8      	adds	r3, #216	; 0xd8
   3372c:	2210      	movs	r2, #16
   3372e:	2100      	movs	r1, #0
   33730:	0018      	movs	r0, r3
   33732:	4b14      	ldr	r3, [pc, #80]	; (33784 <_http_client_clear_conn+0xc0>)
   33734:	4798      	blx	r3
	module->req.state = STATE_INIT;
   33736:	687b      	ldr	r3, [r7, #4]
   33738:	2200      	movs	r2, #0
   3373a:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   3373c:	687b      	ldr	r3, [r7, #4]
   3373e:	22d8      	movs	r2, #216	; 0xd8
   33740:	2100      	movs	r1, #0
   33742:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   33744:	687b      	ldr	r3, [r7, #4]
   33746:	2241      	movs	r2, #65	; 0x41
   33748:	5c99      	ldrb	r1, [r3, r2]
   3374a:	2001      	movs	r0, #1
   3374c:	4381      	bics	r1, r0
   3374e:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   33750:	687b      	ldr	r3, [r7, #4]
   33752:	2241      	movs	r2, #65	; 0x41
   33754:	5c99      	ldrb	r1, [r3, r2]
   33756:	2002      	movs	r0, #2
   33758:	4381      	bics	r1, r0
   3375a:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   3375c:	230c      	movs	r3, #12
   3375e:	18fb      	adds	r3, r7, r3
   33760:	683a      	ldr	r2, [r7, #0]
   33762:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   33764:	687b      	ldr	r3, [r7, #4]
   33766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33768:	2b00      	cmp	r3, #0
   3376a:	d006      	beq.n	3377a <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   3376c:	687b      	ldr	r3, [r7, #4]
   3376e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33770:	220c      	movs	r2, #12
   33772:	18ba      	adds	r2, r7, r2
   33774:	6878      	ldr	r0, [r7, #4]
   33776:	2104      	movs	r1, #4
   33778:	4798      	blx	r3
	}
}
   3377a:	46c0      	nop			; (mov r8, r8)
   3377c:	46bd      	mov	sp, r7
   3377e:	b006      	add	sp, #24
   33780:	bd80      	pop	{r7, pc}
   33782:	46c0      	nop			; (mov r8, r8)
   33784:	0003794b 	.word	0x0003794b
   33788:	00027f85 	.word	0x00027f85
   3378c:	20004568 	.word	0x20004568

00033790 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   33790:	b590      	push	{r4, r7, lr}
   33792:	b087      	sub	sp, #28
   33794:	af00      	add	r7, sp, #0
   33796:	60f8      	str	r0, [r7, #12]
   33798:	60b9      	str	r1, [r7, #8]
   3379a:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   3379c:	68fb      	ldr	r3, [r7, #12]
   3379e:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   337a0:	697b      	ldr	r3, [r7, #20]
   337a2:	2241      	movs	r2, #65	; 0x41
   337a4:	5c99      	ldrb	r1, [r3, r2]
   337a6:	2001      	movs	r0, #1
   337a8:	4301      	orrs	r1, r0
   337aa:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   337ac:	697b      	ldr	r3, [r7, #20]
   337ae:	2000      	movs	r0, #0
   337b0:	5618      	ldrsb	r0, [r3, r0]
   337b2:	687b      	ldr	r3, [r7, #4]
   337b4:	b29a      	uxth	r2, r3
   337b6:	68b9      	ldr	r1, [r7, #8]
   337b8:	2300      	movs	r3, #0
   337ba:	4c14      	ldr	r4, [pc, #80]	; (3380c <_http_client_send_wait+0x7c>)
   337bc:	47a0      	blx	r4
   337be:	0003      	movs	r3, r0
   337c0:	613b      	str	r3, [r7, #16]
   337c2:	693b      	ldr	r3, [r7, #16]
   337c4:	2b00      	cmp	r3, #0
   337c6:	da0f      	bge.n	337e8 <_http_client_send_wait+0x58>
		module->sending = 0;
   337c8:	697b      	ldr	r3, [r7, #20]
   337ca:	2241      	movs	r2, #65	; 0x41
   337cc:	5c99      	ldrb	r1, [r3, r2]
   337ce:	2001      	movs	r0, #1
   337d0:	4381      	bics	r1, r0
   337d2:	5499      	strb	r1, [r3, r2]
		return result;
   337d4:	693b      	ldr	r3, [r7, #16]
   337d6:	e014      	b.n	33802 <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   337d8:	2000      	movs	r0, #0
   337da:	4b0d      	ldr	r3, [pc, #52]	; (33810 <_http_client_send_wait+0x80>)
   337dc:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   337de:	697b      	ldr	r3, [r7, #20]
   337e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   337e2:	0018      	movs	r0, r3
   337e4:	4b0b      	ldr	r3, [pc, #44]	; (33814 <_http_client_send_wait+0x84>)
   337e6:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   337e8:	697b      	ldr	r3, [r7, #20]
   337ea:	2241      	movs	r2, #65	; 0x41
   337ec:	5c9b      	ldrb	r3, [r3, r2]
   337ee:	2201      	movs	r2, #1
   337f0:	4013      	ands	r3, r2
   337f2:	b2db      	uxtb	r3, r3
   337f4:	2b00      	cmp	r3, #0
   337f6:	d003      	beq.n	33800 <_http_client_send_wait+0x70>
   337f8:	697b      	ldr	r3, [r7, #20]
   337fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   337fc:	2b02      	cmp	r3, #2
   337fe:	d8eb      	bhi.n	337d8 <_http_client_send_wait+0x48>
	}

	return 0;
   33800:	2300      	movs	r3, #0
}
   33802:	0018      	movs	r0, r3
   33804:	46bd      	mov	sp, r7
   33806:	b007      	add	sp, #28
   33808:	bd90      	pop	{r4, r7, pc}
   3380a:	46c0      	nop			; (mov r8, r8)
   3380c:	00027ca1 	.word	0x00027ca1
   33810:	0002434d 	.word	0x0002434d
   33814:	00034a9d 	.word	0x00034a9d

00033818 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   33818:	b5f0      	push	{r4, r5, r6, r7, lr}
   3381a:	46c6      	mov	lr, r8
   3381c:	b500      	push	{lr}
   3381e:	b0a0      	sub	sp, #128	; 0x80
   33820:	af02      	add	r7, sp, #8
   33822:	61f8      	str	r0, [r7, #28]
   33824:	4668      	mov	r0, sp
   33826:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   33828:	2318      	movs	r3, #24
   3382a:	2218      	movs	r2, #24
   3382c:	18ba      	adds	r2, r7, r2
   3382e:	18d0      	adds	r0, r2, r3
   33830:	4bbd      	ldr	r3, [pc, #756]	; (33b28 <_http_client_request+0x310>)
   33832:	469c      	mov	ip, r3
   33834:	4663      	mov	r3, ip
   33836:	cb16      	ldmia	r3!, {r1, r2, r4}
   33838:	c016      	stmia	r0!, {r1, r2, r4}
   3383a:	469c      	mov	ip, r3
   3383c:	4663      	mov	r3, ip
   3383e:	681b      	ldr	r3, [r3, #0]
   33840:	469c      	mov	ip, r3
   33842:	4663      	mov	r3, ip
   33844:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   33846:	69f8      	ldr	r0, [r7, #28]
   33848:	6e40      	ldr	r0, [r0, #100]	; 0x64
   3384a:	4684      	mov	ip, r0
   3384c:	2301      	movs	r3, #1
   3384e:	425b      	negs	r3, r3
   33850:	4698      	mov	r8, r3
   33852:	44c4      	add	ip, r8
   33854:	4663      	mov	r3, ip
   33856:	66fb      	str	r3, [r7, #108]	; 0x6c
   33858:	6038      	str	r0, [r7, #0]
   3385a:	2300      	movs	r3, #0
   3385c:	607b      	str	r3, [r7, #4]
   3385e:	6839      	ldr	r1, [r7, #0]
   33860:	687a      	ldr	r2, [r7, #4]
   33862:	000b      	movs	r3, r1
   33864:	0f5b      	lsrs	r3, r3, #29
   33866:	469c      	mov	ip, r3
   33868:	0013      	movs	r3, r2
   3386a:	00db      	lsls	r3, r3, #3
   3386c:	617b      	str	r3, [r7, #20]
   3386e:	4663      	mov	r3, ip
   33870:	697c      	ldr	r4, [r7, #20]
   33872:	431c      	orrs	r4, r3
   33874:	617c      	str	r4, [r7, #20]
   33876:	000b      	movs	r3, r1
   33878:	00db      	lsls	r3, r3, #3
   3387a:	613b      	str	r3, [r7, #16]
   3387c:	0005      	movs	r5, r0
   3387e:	2200      	movs	r2, #0
   33880:	0016      	movs	r6, r2
   33882:	0f6a      	lsrs	r2, r5, #29
   33884:	00f3      	lsls	r3, r6, #3
   33886:	60fb      	str	r3, [r7, #12]
   33888:	68fb      	ldr	r3, [r7, #12]
   3388a:	4313      	orrs	r3, r2
   3388c:	60fb      	str	r3, [r7, #12]
   3388e:	00eb      	lsls	r3, r5, #3
   33890:	60bb      	str	r3, [r7, #8]
   33892:	1dc3      	adds	r3, r0, #7
   33894:	08db      	lsrs	r3, r3, #3
   33896:	00db      	lsls	r3, r3, #3
   33898:	466a      	mov	r2, sp
   3389a:	1ad3      	subs	r3, r2, r3
   3389c:	469d      	mov	sp, r3
   3389e:	ab02      	add	r3, sp, #8
   338a0:	3300      	adds	r3, #0
   338a2:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   338a4:	69fb      	ldr	r3, [r7, #28]
   338a6:	2b00      	cmp	r3, #0
   338a8:	d100      	bne.n	338ac <_http_client_request+0x94>
   338aa:	e346      	b.n	33f3a <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   338ac:	69fb      	ldr	r3, [r7, #28]
   338ae:	2241      	movs	r2, #65	; 0x41
   338b0:	5c9b      	ldrb	r3, [r3, r2]
   338b2:	2201      	movs	r2, #1
   338b4:	4013      	ands	r3, r2
   338b6:	b2db      	uxtb	r3, r3
   338b8:	2b00      	cmp	r3, #0
   338ba:	d000      	beq.n	338be <_http_client_request+0xa6>
   338bc:	e33f      	b.n	33f3e <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   338be:	69fb      	ldr	r3, [r7, #28]
   338c0:	33b0      	adds	r3, #176	; 0xb0
   338c2:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   338c4:	69fb      	ldr	r3, [r7, #28]
   338c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   338c8:	2b03      	cmp	r3, #3
   338ca:	d003      	beq.n	338d4 <_http_client_request+0xbc>
   338cc:	2b04      	cmp	r3, #4
   338ce:	d100      	bne.n	338d2 <_http_client_request+0xba>
   338d0:	e1b3      	b.n	33c3a <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   338d2:	e32f      	b.n	33f34 <_http_client_request+0x71c>
		module->req.content_length = 0;
   338d4:	69fb      	ldr	r3, [r7, #28]
   338d6:	22cc      	movs	r2, #204	; 0xcc
   338d8:	2100      	movs	r1, #0
   338da:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   338dc:	69fb      	ldr	r3, [r7, #28]
   338de:	22d0      	movs	r2, #208	; 0xd0
   338e0:	2100      	movs	r1, #0
   338e2:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   338e4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   338e6:	69fb      	ldr	r3, [r7, #28]
   338e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   338ea:	4c90      	ldr	r4, [pc, #576]	; (33b2c <_http_client_request+0x314>)
   338ec:	2334      	movs	r3, #52	; 0x34
   338ee:	2018      	movs	r0, #24
   338f0:	1838      	adds	r0, r7, r0
   338f2:	18c0      	adds	r0, r0, r3
   338f4:	69fb      	ldr	r3, [r7, #28]
   338f6:	9300      	str	r3, [sp, #0]
   338f8:	0023      	movs	r3, r4
   338fa:	4c8d      	ldr	r4, [pc, #564]	; (33b30 <_http_client_request+0x318>)
   338fc:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   338fe:	69fb      	ldr	r3, [r7, #28]
   33900:	22c8      	movs	r2, #200	; 0xc8
   33902:	5c9b      	ldrb	r3, [r3, r2]
   33904:	2b01      	cmp	r3, #1
   33906:	d10a      	bne.n	3391e <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   33908:	498a      	ldr	r1, [pc, #552]	; (33b34 <_http_client_request+0x31c>)
   3390a:	2334      	movs	r3, #52	; 0x34
   3390c:	2218      	movs	r2, #24
   3390e:	4694      	mov	ip, r2
   33910:	44bc      	add	ip, r7
   33912:	4463      	add	r3, ip
   33914:	2204      	movs	r2, #4
   33916:	0018      	movs	r0, r3
   33918:	4b87      	ldr	r3, [pc, #540]	; (33b38 <_http_client_request+0x320>)
   3391a:	4798      	blx	r3
   3391c:	e04e      	b.n	339bc <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   3391e:	69fb      	ldr	r3, [r7, #28]
   33920:	22c8      	movs	r2, #200	; 0xc8
   33922:	5c9b      	ldrb	r3, [r3, r2]
   33924:	2b02      	cmp	r3, #2
   33926:	d10a      	bne.n	3393e <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   33928:	4984      	ldr	r1, [pc, #528]	; (33b3c <_http_client_request+0x324>)
   3392a:	2334      	movs	r3, #52	; 0x34
   3392c:	2218      	movs	r2, #24
   3392e:	4694      	mov	ip, r2
   33930:	44bc      	add	ip, r7
   33932:	4463      	add	r3, ip
   33934:	2205      	movs	r2, #5
   33936:	0018      	movs	r0, r3
   33938:	4b7f      	ldr	r3, [pc, #508]	; (33b38 <_http_client_request+0x320>)
   3393a:	4798      	blx	r3
   3393c:	e03e      	b.n	339bc <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   3393e:	69fb      	ldr	r3, [r7, #28]
   33940:	22c8      	movs	r2, #200	; 0xc8
   33942:	5c9b      	ldrb	r3, [r3, r2]
   33944:	2b03      	cmp	r3, #3
   33946:	d10a      	bne.n	3395e <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   33948:	497d      	ldr	r1, [pc, #500]	; (33b40 <_http_client_request+0x328>)
   3394a:	2334      	movs	r3, #52	; 0x34
   3394c:	2218      	movs	r2, #24
   3394e:	4694      	mov	ip, r2
   33950:	44bc      	add	ip, r7
   33952:	4463      	add	r3, ip
   33954:	2207      	movs	r2, #7
   33956:	0018      	movs	r0, r3
   33958:	4b77      	ldr	r3, [pc, #476]	; (33b38 <_http_client_request+0x320>)
   3395a:	4798      	blx	r3
   3395c:	e02e      	b.n	339bc <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   3395e:	69fb      	ldr	r3, [r7, #28]
   33960:	22c8      	movs	r2, #200	; 0xc8
   33962:	5c9b      	ldrb	r3, [r3, r2]
   33964:	2b04      	cmp	r3, #4
   33966:	d10a      	bne.n	3397e <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   33968:	4976      	ldr	r1, [pc, #472]	; (33b44 <_http_client_request+0x32c>)
   3396a:	2334      	movs	r3, #52	; 0x34
   3396c:	2218      	movs	r2, #24
   3396e:	4694      	mov	ip, r2
   33970:	44bc      	add	ip, r7
   33972:	4463      	add	r3, ip
   33974:	2204      	movs	r2, #4
   33976:	0018      	movs	r0, r3
   33978:	4b6f      	ldr	r3, [pc, #444]	; (33b38 <_http_client_request+0x320>)
   3397a:	4798      	blx	r3
   3397c:	e01e      	b.n	339bc <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   3397e:	69fb      	ldr	r3, [r7, #28]
   33980:	22c8      	movs	r2, #200	; 0xc8
   33982:	5c9b      	ldrb	r3, [r3, r2]
   33984:	2b05      	cmp	r3, #5
   33986:	d10a      	bne.n	3399e <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   33988:	496f      	ldr	r1, [pc, #444]	; (33b48 <_http_client_request+0x330>)
   3398a:	2334      	movs	r3, #52	; 0x34
   3398c:	2218      	movs	r2, #24
   3398e:	4694      	mov	ip, r2
   33990:	44bc      	add	ip, r7
   33992:	4463      	add	r3, ip
   33994:	2208      	movs	r2, #8
   33996:	0018      	movs	r0, r3
   33998:	4b67      	ldr	r3, [pc, #412]	; (33b38 <_http_client_request+0x320>)
   3399a:	4798      	blx	r3
   3399c:	e00e      	b.n	339bc <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   3399e:	69fb      	ldr	r3, [r7, #28]
   339a0:	22c8      	movs	r2, #200	; 0xc8
   339a2:	5c9b      	ldrb	r3, [r3, r2]
   339a4:	2b06      	cmp	r3, #6
   339a6:	d109      	bne.n	339bc <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   339a8:	4968      	ldr	r1, [pc, #416]	; (33b4c <_http_client_request+0x334>)
   339aa:	2334      	movs	r3, #52	; 0x34
   339ac:	2218      	movs	r2, #24
   339ae:	4694      	mov	ip, r2
   339b0:	44bc      	add	ip, r7
   339b2:	4463      	add	r3, ip
   339b4:	2205      	movs	r2, #5
   339b6:	0018      	movs	r0, r3
   339b8:	4b5f      	ldr	r3, [pc, #380]	; (33b38 <_http_client_request+0x320>)
   339ba:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   339bc:	69fb      	ldr	r3, [r7, #28]
   339be:	3370      	adds	r3, #112	; 0x70
   339c0:	001c      	movs	r4, r3
   339c2:	69fb      	ldr	r3, [r7, #28]
   339c4:	3370      	adds	r3, #112	; 0x70
   339c6:	0018      	movs	r0, r3
   339c8:	4b61      	ldr	r3, [pc, #388]	; (33b50 <_http_client_request+0x338>)
   339ca:	4798      	blx	r3
   339cc:	0002      	movs	r2, r0
   339ce:	2334      	movs	r3, #52	; 0x34
   339d0:	2118      	movs	r1, #24
   339d2:	468c      	mov	ip, r1
   339d4:	44bc      	add	ip, r7
   339d6:	4463      	add	r3, ip
   339d8:	0021      	movs	r1, r4
   339da:	0018      	movs	r0, r3
   339dc:	4b56      	ldr	r3, [pc, #344]	; (33b38 <_http_client_request+0x320>)
   339de:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   339e0:	495c      	ldr	r1, [pc, #368]	; (33b54 <_http_client_request+0x33c>)
   339e2:	2334      	movs	r3, #52	; 0x34
   339e4:	2218      	movs	r2, #24
   339e6:	4694      	mov	ip, r2
   339e8:	44bc      	add	ip, r7
   339ea:	4463      	add	r3, ip
   339ec:	220b      	movs	r2, #11
   339ee:	0018      	movs	r0, r3
   339f0:	4b51      	ldr	r3, [pc, #324]	; (33b38 <_http_client_request+0x320>)
   339f2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   339f4:	4958      	ldr	r1, [pc, #352]	; (33b58 <_http_client_request+0x340>)
   339f6:	2334      	movs	r3, #52	; 0x34
   339f8:	2218      	movs	r2, #24
   339fa:	4694      	mov	ip, r2
   339fc:	44bc      	add	ip, r7
   339fe:	4463      	add	r3, ip
   33a00:	220c      	movs	r2, #12
   33a02:	0018      	movs	r0, r3
   33a04:	4b4c      	ldr	r3, [pc, #304]	; (33b38 <_http_client_request+0x320>)
   33a06:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   33a08:	69fb      	ldr	r3, [r7, #28]
   33a0a:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   33a0c:	69fb      	ldr	r3, [r7, #28]
   33a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   33a10:	0018      	movs	r0, r3
   33a12:	4b4f      	ldr	r3, [pc, #316]	; (33b50 <_http_client_request+0x338>)
   33a14:	4798      	blx	r3
   33a16:	0002      	movs	r2, r0
   33a18:	2334      	movs	r3, #52	; 0x34
   33a1a:	2118      	movs	r1, #24
   33a1c:	468c      	mov	ip, r1
   33a1e:	44bc      	add	ip, r7
   33a20:	4463      	add	r3, ip
   33a22:	0021      	movs	r1, r4
   33a24:	0018      	movs	r0, r3
   33a26:	4b44      	ldr	r3, [pc, #272]	; (33b38 <_http_client_request+0x320>)
   33a28:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   33a2a:	494c      	ldr	r1, [pc, #304]	; (33b5c <_http_client_request+0x344>)
   33a2c:	2334      	movs	r3, #52	; 0x34
   33a2e:	2218      	movs	r2, #24
   33a30:	4694      	mov	ip, r2
   33a32:	44bc      	add	ip, r7
   33a34:	4463      	add	r3, ip
   33a36:	2202      	movs	r2, #2
   33a38:	0018      	movs	r0, r3
   33a3a:	4b3f      	ldr	r3, [pc, #252]	; (33b38 <_http_client_request+0x320>)
   33a3c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   33a3e:	4948      	ldr	r1, [pc, #288]	; (33b60 <_http_client_request+0x348>)
   33a40:	2334      	movs	r3, #52	; 0x34
   33a42:	2218      	movs	r2, #24
   33a44:	4694      	mov	ip, r2
   33a46:	44bc      	add	ip, r7
   33a48:	4463      	add	r3, ip
   33a4a:	2206      	movs	r2, #6
   33a4c:	0018      	movs	r0, r3
   33a4e:	4b3a      	ldr	r3, [pc, #232]	; (33b38 <_http_client_request+0x320>)
   33a50:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   33a52:	69fb      	ldr	r3, [r7, #28]
   33a54:	1c5c      	adds	r4, r3, #1
   33a56:	69fb      	ldr	r3, [r7, #28]
   33a58:	3301      	adds	r3, #1
   33a5a:	0018      	movs	r0, r3
   33a5c:	4b3c      	ldr	r3, [pc, #240]	; (33b50 <_http_client_request+0x338>)
   33a5e:	4798      	blx	r3
   33a60:	0002      	movs	r2, r0
   33a62:	2334      	movs	r3, #52	; 0x34
   33a64:	2118      	movs	r1, #24
   33a66:	468c      	mov	ip, r1
   33a68:	44bc      	add	ip, r7
   33a6a:	4463      	add	r3, ip
   33a6c:	0021      	movs	r1, r4
   33a6e:	0018      	movs	r0, r3
   33a70:	4b31      	ldr	r3, [pc, #196]	; (33b38 <_http_client_request+0x320>)
   33a72:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   33a74:	4939      	ldr	r1, [pc, #228]	; (33b5c <_http_client_request+0x344>)
   33a76:	2334      	movs	r3, #52	; 0x34
   33a78:	2218      	movs	r2, #24
   33a7a:	4694      	mov	ip, r2
   33a7c:	44bc      	add	ip, r7
   33a7e:	4463      	add	r3, ip
   33a80:	2202      	movs	r2, #2
   33a82:	0018      	movs	r0, r3
   33a84:	4b2c      	ldr	r3, [pc, #176]	; (33b38 <_http_client_request+0x320>)
   33a86:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   33a88:	4936      	ldr	r1, [pc, #216]	; (33b64 <_http_client_request+0x34c>)
   33a8a:	2334      	movs	r3, #52	; 0x34
   33a8c:	2218      	movs	r2, #24
   33a8e:	4694      	mov	ip, r2
   33a90:	44bc      	add	ip, r7
   33a92:	4463      	add	r3, ip
   33a94:	2218      	movs	r2, #24
   33a96:	0018      	movs	r0, r3
   33a98:	4b27      	ldr	r3, [pc, #156]	; (33b38 <_http_client_request+0x320>)
   33a9a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   33a9c:	4932      	ldr	r1, [pc, #200]	; (33b68 <_http_client_request+0x350>)
   33a9e:	2334      	movs	r3, #52	; 0x34
   33aa0:	2218      	movs	r2, #24
   33aa2:	4694      	mov	ip, r2
   33aa4:	44bc      	add	ip, r7
   33aa6:	4463      	add	r3, ip
   33aa8:	2213      	movs	r2, #19
   33aaa:	0018      	movs	r0, r3
   33aac:	4b22      	ldr	r3, [pc, #136]	; (33b38 <_http_client_request+0x320>)
   33aae:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   33ab0:	492e      	ldr	r1, [pc, #184]	; (33b6c <_http_client_request+0x354>)
   33ab2:	2334      	movs	r3, #52	; 0x34
   33ab4:	2218      	movs	r2, #24
   33ab6:	4694      	mov	ip, r2
   33ab8:	44bc      	add	ip, r7
   33aba:	4463      	add	r3, ip
   33abc:	2217      	movs	r2, #23
   33abe:	0018      	movs	r0, r3
   33ac0:	4b1d      	ldr	r3, [pc, #116]	; (33b38 <_http_client_request+0x320>)
   33ac2:	4798      	blx	r3
		if (entity->read != NULL) {
   33ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33ac6:	68db      	ldr	r3, [r3, #12]
   33ac8:	2b00      	cmp	r3, #0
   33aca:	d100      	bne.n	33ace <_http_client_request+0x2b6>
   33acc:	e088      	b.n	33be0 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   33ace:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33ad0:	781b      	ldrb	r3, [r3, #0]
   33ad2:	2b00      	cmp	r3, #0
   33ad4:	d00f      	beq.n	33af6 <_http_client_request+0x2de>
				module->req.content_length = -1;
   33ad6:	69fb      	ldr	r3, [r7, #28]
   33ad8:	21cc      	movs	r1, #204	; 0xcc
   33ada:	2201      	movs	r2, #1
   33adc:	4252      	negs	r2, r2
   33ade:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   33ae0:	4923      	ldr	r1, [pc, #140]	; (33b70 <_http_client_request+0x358>)
   33ae2:	2334      	movs	r3, #52	; 0x34
   33ae4:	2218      	movs	r2, #24
   33ae6:	4694      	mov	ip, r2
   33ae8:	44bc      	add	ip, r7
   33aea:	4463      	add	r3, ip
   33aec:	221c      	movs	r2, #28
   33aee:	0018      	movs	r0, r3
   33af0:	4b11      	ldr	r3, [pc, #68]	; (33b38 <_http_client_request+0x320>)
   33af2:	4798      	blx	r3
   33af4:	e074      	b.n	33be0 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   33af6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33af8:	689b      	ldr	r3, [r3, #8]
   33afa:	2b00      	cmp	r3, #0
   33afc:	d070      	beq.n	33be0 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   33afe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33b00:	689a      	ldr	r2, [r3, #8]
   33b02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33b04:	695b      	ldr	r3, [r3, #20]
   33b06:	0018      	movs	r0, r3
   33b08:	4790      	blx	r2
   33b0a:	0001      	movs	r1, r0
   33b0c:	69fb      	ldr	r3, [r7, #28]
   33b0e:	22cc      	movs	r2, #204	; 0xcc
   33b10:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   33b12:	69fb      	ldr	r3, [r7, #28]
   33b14:	22cc      	movs	r2, #204	; 0xcc
   33b16:	589b      	ldr	r3, [r3, r2]
   33b18:	2b00      	cmp	r3, #0
   33b1a:	da2b      	bge.n	33b74 <_http_client_request+0x35c>
					module->req.content_length = 0;
   33b1c:	69fb      	ldr	r3, [r7, #28]
   33b1e:	22cc      	movs	r2, #204	; 0xcc
   33b20:	2100      	movs	r1, #0
   33b22:	5099      	str	r1, [r3, r2]
   33b24:	e05c      	b.n	33be0 <_http_client_request+0x3c8>
   33b26:	46c0      	nop			; (mov r8, r8)
   33b28:	0003d014 	.word	0x0003d014
   33b2c:	00033791 	.word	0x00033791
   33b30:	000346f9 	.word	0x000346f9
   33b34:	0003cf38 	.word	0x0003cf38
   33b38:	00034779 	.word	0x00034779
   33b3c:	0003cf40 	.word	0x0003cf40
   33b40:	0003cf48 	.word	0x0003cf48
   33b44:	0003cf50 	.word	0x0003cf50
   33b48:	0003cf58 	.word	0x0003cf58
   33b4c:	0003cf64 	.word	0x0003cf64
   33b50:	00037d03 	.word	0x00037d03
   33b54:	0003cf6c 	.word	0x0003cf6c
   33b58:	0003cf78 	.word	0x0003cf78
   33b5c:	0003cf88 	.word	0x0003cf88
   33b60:	0003cf8c 	.word	0x0003cf8c
   33b64:	0003cf94 	.word	0x0003cf94
   33b68:	0003cfb0 	.word	0x0003cfb0
   33b6c:	0003cfc4 	.word	0x0003cfc4
   33b70:	0003cfdc 	.word	0x0003cfdc
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   33b74:	69fb      	ldr	r3, [r7, #28]
   33b76:	22cc      	movs	r2, #204	; 0xcc
   33b78:	589b      	ldr	r3, [r3, r2]
   33b7a:	001a      	movs	r2, r3
   33b7c:	49e0      	ldr	r1, [pc, #896]	; (33f00 <_http_client_request+0x6e8>)
   33b7e:	2328      	movs	r3, #40	; 0x28
   33b80:	2018      	movs	r0, #24
   33b82:	4684      	mov	ip, r0
   33b84:	44bc      	add	ip, r7
   33b86:	4463      	add	r3, ip
   33b88:	0018      	movs	r0, r3
   33b8a:	4bde      	ldr	r3, [pc, #888]	; (33f04 <_http_client_request+0x6ec>)
   33b8c:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   33b8e:	49de      	ldr	r1, [pc, #888]	; (33f08 <_http_client_request+0x6f0>)
   33b90:	2334      	movs	r3, #52	; 0x34
   33b92:	2218      	movs	r2, #24
   33b94:	4694      	mov	ip, r2
   33b96:	44bc      	add	ip, r7
   33b98:	4463      	add	r3, ip
   33b9a:	2210      	movs	r2, #16
   33b9c:	0018      	movs	r0, r3
   33b9e:	4bdb      	ldr	r3, [pc, #876]	; (33f0c <_http_client_request+0x6f4>)
   33ba0:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   33ba2:	2328      	movs	r3, #40	; 0x28
   33ba4:	2218      	movs	r2, #24
   33ba6:	4694      	mov	ip, r2
   33ba8:	44bc      	add	ip, r7
   33baa:	4463      	add	r3, ip
   33bac:	0018      	movs	r0, r3
   33bae:	4bd8      	ldr	r3, [pc, #864]	; (33f10 <_http_client_request+0x6f8>)
   33bb0:	4798      	blx	r3
   33bb2:	0002      	movs	r2, r0
   33bb4:	2328      	movs	r3, #40	; 0x28
   33bb6:	2118      	movs	r1, #24
   33bb8:	1879      	adds	r1, r7, r1
   33bba:	18c9      	adds	r1, r1, r3
   33bbc:	2334      	movs	r3, #52	; 0x34
   33bbe:	2018      	movs	r0, #24
   33bc0:	4684      	mov	ip, r0
   33bc2:	44bc      	add	ip, r7
   33bc4:	4463      	add	r3, ip
   33bc6:	0018      	movs	r0, r3
   33bc8:	4bd0      	ldr	r3, [pc, #832]	; (33f0c <_http_client_request+0x6f4>)
   33bca:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   33bcc:	49d1      	ldr	r1, [pc, #836]	; (33f14 <_http_client_request+0x6fc>)
   33bce:	2334      	movs	r3, #52	; 0x34
   33bd0:	2218      	movs	r2, #24
   33bd2:	4694      	mov	ip, r2
   33bd4:	44bc      	add	ip, r7
   33bd6:	4463      	add	r3, ip
   33bd8:	2202      	movs	r2, #2
   33bda:	0018      	movs	r0, r3
   33bdc:	4bcb      	ldr	r3, [pc, #812]	; (33f0c <_http_client_request+0x6f4>)
   33bde:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   33be0:	69fb      	ldr	r3, [r7, #28]
   33be2:	22d4      	movs	r2, #212	; 0xd4
   33be4:	589b      	ldr	r3, [r3, r2]
   33be6:	2b00      	cmp	r3, #0
   33be8:	d012      	beq.n	33c10 <_http_client_request+0x3f8>
				module->req.ext_header,
   33bea:	69fb      	ldr	r3, [r7, #28]
   33bec:	22d4      	movs	r2, #212	; 0xd4
   33bee:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   33bf0:	69fb      	ldr	r3, [r7, #28]
   33bf2:	22d4      	movs	r2, #212	; 0xd4
   33bf4:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   33bf6:	0018      	movs	r0, r3
   33bf8:	4bc5      	ldr	r3, [pc, #788]	; (33f10 <_http_client_request+0x6f8>)
   33bfa:	4798      	blx	r3
   33bfc:	0002      	movs	r2, r0
   33bfe:	2334      	movs	r3, #52	; 0x34
   33c00:	2118      	movs	r1, #24
   33c02:	468c      	mov	ip, r1
   33c04:	44bc      	add	ip, r7
   33c06:	4463      	add	r3, ip
   33c08:	0021      	movs	r1, r4
   33c0a:	0018      	movs	r0, r3
   33c0c:	4bbf      	ldr	r3, [pc, #764]	; (33f0c <_http_client_request+0x6f4>)
   33c0e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   33c10:	49c0      	ldr	r1, [pc, #768]	; (33f14 <_http_client_request+0x6fc>)
   33c12:	2334      	movs	r3, #52	; 0x34
   33c14:	2218      	movs	r2, #24
   33c16:	4694      	mov	ip, r2
   33c18:	44bc      	add	ip, r7
   33c1a:	4463      	add	r3, ip
   33c1c:	2202      	movs	r2, #2
   33c1e:	0018      	movs	r0, r3
   33c20:	4bba      	ldr	r3, [pc, #744]	; (33f0c <_http_client_request+0x6f4>)
   33c22:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   33c24:	2334      	movs	r3, #52	; 0x34
   33c26:	2218      	movs	r2, #24
   33c28:	4694      	mov	ip, r2
   33c2a:	44bc      	add	ip, r7
   33c2c:	4463      	add	r3, ip
   33c2e:	0018      	movs	r0, r3
   33c30:	4bb9      	ldr	r3, [pc, #740]	; (33f18 <_http_client_request+0x700>)
   33c32:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   33c34:	69fb      	ldr	r3, [r7, #28]
   33c36:	2204      	movs	r2, #4
   33c38:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   33c3a:	69fb      	ldr	r3, [r7, #28]
   33c3c:	22cc      	movs	r2, #204	; 0xcc
   33c3e:	589b      	ldr	r3, [r3, r2]
   33c40:	2b00      	cmp	r3, #0
   33c42:	db00      	blt.n	33c46 <_http_client_request+0x42e>
   33c44:	e0c6      	b.n	33dd4 <_http_client_request+0x5bc>
   33c46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33c48:	68db      	ldr	r3, [r3, #12]
   33c4a:	2b00      	cmp	r3, #0
   33c4c:	d100      	bne.n	33c50 <_http_client_request+0x438>
   33c4e:	e0c1      	b.n	33dd4 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   33c50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33c52:	68dc      	ldr	r4, [r3, #12]
   33c54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33c56:	6958      	ldr	r0, [r3, #20]
   33c58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   33c5a:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   33c5c:	69fb      	ldr	r3, [r7, #28]
   33c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   33c60:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   33c62:	69fb      	ldr	r3, [r7, #28]
   33c64:	22d0      	movs	r2, #208	; 0xd0
   33c66:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   33c68:	002a      	movs	r2, r5
   33c6a:	47a0      	blx	r4
   33c6c:	0003      	movs	r3, r0
   33c6e:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   33c70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33c72:	2b00      	cmp	r3, #0
   33c74:	da01      	bge.n	33c7a <_http_client_request+0x462>
				size = 0;
   33c76:	2300      	movs	r3, #0
   33c78:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   33c7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   33c7c:	220a      	movs	r2, #10
   33c7e:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   33c80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   33c82:	220d      	movs	r2, #13
   33c84:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   33c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33c88:	3305      	adds	r3, #5
   33c8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
   33c8c:	210d      	movs	r1, #13
   33c8e:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   33c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33c92:	3306      	adds	r3, #6
   33c94:	6eba      	ldr	r2, [r7, #104]	; 0x68
   33c96:	210a      	movs	r1, #10
   33c98:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   33c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33c9c:	2b00      	cmp	r3, #0
   33c9e:	db14      	blt.n	33cca <_http_client_request+0x4b2>
				ptr = buffer + 2;
   33ca0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   33ca2:	3302      	adds	r3, #2
   33ca4:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   33ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33ca8:	4a9c      	ldr	r2, [pc, #624]	; (33f1c <_http_client_request+0x704>)
   33caa:	4013      	ands	r3, r2
   33cac:	d504      	bpl.n	33cb8 <_http_client_request+0x4a0>
   33cae:	3b01      	subs	r3, #1
   33cb0:	2210      	movs	r2, #16
   33cb2:	4252      	negs	r2, r2
   33cb4:	4313      	orrs	r3, r2
   33cb6:	3301      	adds	r3, #1
   33cb8:	001a      	movs	r2, r3
   33cba:	2318      	movs	r3, #24
   33cbc:	2118      	movs	r1, #24
   33cbe:	468c      	mov	ip, r1
   33cc0:	44bc      	add	ip, r7
   33cc2:	4463      	add	r3, ip
   33cc4:	5c9a      	ldrb	r2, [r3, r2]
   33cc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   33cc8:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   33cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33ccc:	2b0f      	cmp	r3, #15
   33cce:	dd19      	ble.n	33d04 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   33cd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   33cd2:	3301      	adds	r3, #1
   33cd4:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   33cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33cd8:	2b00      	cmp	r3, #0
   33cda:	da00      	bge.n	33cde <_http_client_request+0x4c6>
   33cdc:	330f      	adds	r3, #15
   33cde:	111b      	asrs	r3, r3, #4
   33ce0:	001a      	movs	r2, r3
   33ce2:	4b8e      	ldr	r3, [pc, #568]	; (33f1c <_http_client_request+0x704>)
   33ce4:	4013      	ands	r3, r2
   33ce6:	d504      	bpl.n	33cf2 <_http_client_request+0x4da>
   33ce8:	3b01      	subs	r3, #1
   33cea:	2210      	movs	r2, #16
   33cec:	4252      	negs	r2, r2
   33cee:	4313      	orrs	r3, r2
   33cf0:	3301      	adds	r3, #1
   33cf2:	001a      	movs	r2, r3
   33cf4:	2318      	movs	r3, #24
   33cf6:	2118      	movs	r1, #24
   33cf8:	468c      	mov	ip, r1
   33cfa:	44bc      	add	ip, r7
   33cfc:	4463      	add	r3, ip
   33cfe:	5c9a      	ldrb	r2, [r3, r2]
   33d00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   33d02:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   33d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33d06:	2bff      	cmp	r3, #255	; 0xff
   33d08:	dd18      	ble.n	33d3c <_http_client_request+0x524>
				ptr = buffer;
   33d0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   33d0c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   33d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33d10:	2b00      	cmp	r3, #0
   33d12:	da00      	bge.n	33d16 <_http_client_request+0x4fe>
   33d14:	33ff      	adds	r3, #255	; 0xff
   33d16:	121b      	asrs	r3, r3, #8
   33d18:	001a      	movs	r2, r3
   33d1a:	4b80      	ldr	r3, [pc, #512]	; (33f1c <_http_client_request+0x704>)
   33d1c:	4013      	ands	r3, r2
   33d1e:	d504      	bpl.n	33d2a <_http_client_request+0x512>
   33d20:	3b01      	subs	r3, #1
   33d22:	2210      	movs	r2, #16
   33d24:	4252      	negs	r2, r2
   33d26:	4313      	orrs	r3, r2
   33d28:	3301      	adds	r3, #1
   33d2a:	001a      	movs	r2, r3
   33d2c:	2318      	movs	r3, #24
   33d2e:	2118      	movs	r1, #24
   33d30:	468c      	mov	ip, r1
   33d32:	44bc      	add	ip, r7
   33d34:	4463      	add	r3, ip
   33d36:	5c9a      	ldrb	r2, [r3, r2]
   33d38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   33d3a:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   33d3c:	69fb      	ldr	r3, [r7, #28]
   33d3e:	2000      	movs	r0, #0
   33d40:	5618      	ldrsb	r0, [r3, r0]
   33d42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   33d44:	3303      	adds	r3, #3
   33d46:	001a      	movs	r2, r3
   33d48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   33d4a:	1ad3      	subs	r3, r2, r3
   33d4c:	b29a      	uxth	r2, r3
   33d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33d50:	b29b      	uxth	r3, r3
   33d52:	18d3      	adds	r3, r2, r3
   33d54:	b29b      	uxth	r3, r3
   33d56:	3304      	adds	r3, #4
   33d58:	b29a      	uxth	r2, r3
   33d5a:	6f39      	ldr	r1, [r7, #112]	; 0x70
   33d5c:	2300      	movs	r3, #0
   33d5e:	4c70      	ldr	r4, [pc, #448]	; (33f20 <_http_client_request+0x708>)
   33d60:	47a0      	blx	r4
   33d62:	0003      	movs	r3, r0
   33d64:	663b      	str	r3, [r7, #96]	; 0x60
   33d66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   33d68:	2b00      	cmp	r3, #0
   33d6a:	da07      	bge.n	33d7c <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   33d6c:	2305      	movs	r3, #5
   33d6e:	425a      	negs	r2, r3
   33d70:	69fb      	ldr	r3, [r7, #28]
   33d72:	0011      	movs	r1, r2
   33d74:	0018      	movs	r0, r3
   33d76:	4b6b      	ldr	r3, [pc, #428]	; (33f24 <_http_client_request+0x70c>)
   33d78:	4798      	blx	r3
				return;
   33d7a:	e0e1      	b.n	33f40 <_http_client_request+0x728>
			module->req.sent_length += size;
   33d7c:	69fb      	ldr	r3, [r7, #28]
   33d7e:	22d0      	movs	r2, #208	; 0xd0
   33d80:	589a      	ldr	r2, [r3, r2]
   33d82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33d84:	18d2      	adds	r2, r2, r3
   33d86:	69fb      	ldr	r3, [r7, #28]
   33d88:	21d0      	movs	r1, #208	; 0xd0
   33d8a:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   33d8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33d8e:	2b00      	cmp	r3, #0
   33d90:	d000      	beq.n	33d94 <_http_client_request+0x57c>
   33d92:	e0c9      	b.n	33f28 <_http_client_request+0x710>
				if (module->req.entity.close) {
   33d94:	69fb      	ldr	r3, [r7, #28]
   33d96:	22c0      	movs	r2, #192	; 0xc0
   33d98:	589b      	ldr	r3, [r3, r2]
   33d9a:	2b00      	cmp	r3, #0
   33d9c:	d007      	beq.n	33dae <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   33d9e:	69fb      	ldr	r3, [r7, #28]
   33da0:	22c0      	movs	r2, #192	; 0xc0
   33da2:	589b      	ldr	r3, [r3, r2]
   33da4:	69fa      	ldr	r2, [r7, #28]
   33da6:	21c4      	movs	r1, #196	; 0xc4
   33da8:	5852      	ldr	r2, [r2, r1]
   33daa:	0010      	movs	r0, r2
   33dac:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   33dae:	69fb      	ldr	r3, [r7, #28]
   33db0:	2202      	movs	r2, #2
   33db2:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   33db4:	69fb      	ldr	r3, [r7, #28]
   33db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33db8:	2b00      	cmp	r3, #0
   33dba:	d100      	bne.n	33dbe <_http_client_request+0x5a6>
   33dbc:	e0b5      	b.n	33f2a <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   33dbe:	69fb      	ldr	r3, [r7, #28]
   33dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33dc2:	220c      	movs	r2, #12
   33dc4:	2118      	movs	r1, #24
   33dc6:	468c      	mov	ip, r1
   33dc8:	44bc      	add	ip, r7
   33dca:	4462      	add	r2, ip
   33dcc:	69f8      	ldr	r0, [r7, #28]
   33dce:	2101      	movs	r1, #1
   33dd0:	4798      	blx	r3
				break;
   33dd2:	e0aa      	b.n	33f2a <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   33dd4:	69fb      	ldr	r3, [r7, #28]
   33dd6:	22cc      	movs	r2, #204	; 0xcc
   33dd8:	589b      	ldr	r3, [r3, r2]
   33dda:	2b00      	cmp	r3, #0
   33ddc:	dc00      	bgt.n	33de0 <_http_client_request+0x5c8>
   33dde:	e07c      	b.n	33eda <_http_client_request+0x6c2>
   33de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33de2:	68db      	ldr	r3, [r3, #12]
   33de4:	2b00      	cmp	r3, #0
   33de6:	d100      	bne.n	33dea <_http_client_request+0x5d2>
   33de8:	e077      	b.n	33eda <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   33dea:	69fb      	ldr	r3, [r7, #28]
   33dec:	22d0      	movs	r2, #208	; 0xd0
   33dee:	589a      	ldr	r2, [r3, r2]
   33df0:	69fb      	ldr	r3, [r7, #28]
   33df2:	21cc      	movs	r1, #204	; 0xcc
   33df4:	585b      	ldr	r3, [r3, r1]
   33df6:	429a      	cmp	r2, r3
   33df8:	db1f      	blt.n	33e3a <_http_client_request+0x622>
				if (module->req.entity.close) {
   33dfa:	69fb      	ldr	r3, [r7, #28]
   33dfc:	22c0      	movs	r2, #192	; 0xc0
   33dfe:	589b      	ldr	r3, [r3, r2]
   33e00:	2b00      	cmp	r3, #0
   33e02:	d007      	beq.n	33e14 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   33e04:	69fb      	ldr	r3, [r7, #28]
   33e06:	22c0      	movs	r2, #192	; 0xc0
   33e08:	589b      	ldr	r3, [r3, r2]
   33e0a:	69fa      	ldr	r2, [r7, #28]
   33e0c:	21c4      	movs	r1, #196	; 0xc4
   33e0e:	5852      	ldr	r2, [r2, r1]
   33e10:	0010      	movs	r0, r2
   33e12:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   33e14:	69fb      	ldr	r3, [r7, #28]
   33e16:	2202      	movs	r2, #2
   33e18:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   33e1a:	69fb      	ldr	r3, [r7, #28]
   33e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33e1e:	2b00      	cmp	r3, #0
   33e20:	d100      	bne.n	33e24 <_http_client_request+0x60c>
   33e22:	e084      	b.n	33f2e <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   33e24:	69fb      	ldr	r3, [r7, #28]
   33e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33e28:	220c      	movs	r2, #12
   33e2a:	2118      	movs	r1, #24
   33e2c:	468c      	mov	ip, r1
   33e2e:	44bc      	add	ip, r7
   33e30:	4462      	add	r2, ip
   33e32:	69f8      	ldr	r0, [r7, #28]
   33e34:	2101      	movs	r1, #1
   33e36:	4798      	blx	r3
				break;
   33e38:	e079      	b.n	33f2e <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   33e3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33e3c:	68dc      	ldr	r4, [r3, #12]
   33e3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33e40:	6958      	ldr	r0, [r3, #20]
   33e42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   33e44:	69fb      	ldr	r3, [r7, #28]
   33e46:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   33e48:	69fb      	ldr	r3, [r7, #28]
   33e4a:	22d0      	movs	r2, #208	; 0xd0
   33e4c:	589b      	ldr	r3, [r3, r2]
   33e4e:	002a      	movs	r2, r5
   33e50:	47a0      	blx	r4
   33e52:	0003      	movs	r3, r0
   33e54:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   33e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33e58:	2b00      	cmp	r3, #0
   33e5a:	da0d      	bge.n	33e78 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   33e5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33e5e:	2b00      	cmp	r3, #0
   33e60:	d102      	bne.n	33e68 <_http_client_request+0x650>
   33e62:	234d      	movs	r3, #77	; 0x4d
   33e64:	425b      	negs	r3, r3
   33e66:	e001      	b.n	33e6c <_http_client_request+0x654>
   33e68:	2305      	movs	r3, #5
   33e6a:	425b      	negs	r3, r3
   33e6c:	69fa      	ldr	r2, [r7, #28]
   33e6e:	0019      	movs	r1, r3
   33e70:	0010      	movs	r0, r2
   33e72:	4b2c      	ldr	r3, [pc, #176]	; (33f24 <_http_client_request+0x70c>)
   33e74:	4798      	blx	r3
			if (size < 0) {
   33e76:	e057      	b.n	33f28 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   33e78:	69fb      	ldr	r3, [r7, #28]
   33e7a:	22cc      	movs	r2, #204	; 0xcc
   33e7c:	589a      	ldr	r2, [r3, r2]
   33e7e:	69fb      	ldr	r3, [r7, #28]
   33e80:	21d0      	movs	r1, #208	; 0xd0
   33e82:	585b      	ldr	r3, [r3, r1]
   33e84:	1ad2      	subs	r2, r2, r3
   33e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33e88:	429a      	cmp	r2, r3
   33e8a:	da07      	bge.n	33e9c <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   33e8c:	69fb      	ldr	r3, [r7, #28]
   33e8e:	22cc      	movs	r2, #204	; 0xcc
   33e90:	589a      	ldr	r2, [r3, r2]
   33e92:	69fb      	ldr	r3, [r7, #28]
   33e94:	21d0      	movs	r1, #208	; 0xd0
   33e96:	585b      	ldr	r3, [r3, r1]
   33e98:	1ad3      	subs	r3, r2, r3
   33e9a:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   33e9c:	69fb      	ldr	r3, [r7, #28]
   33e9e:	2000      	movs	r0, #0
   33ea0:	5618      	ldrsb	r0, [r3, r0]
   33ea2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   33ea4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33ea6:	b29a      	uxth	r2, r3
   33ea8:	2300      	movs	r3, #0
   33eaa:	4c1d      	ldr	r4, [pc, #116]	; (33f20 <_http_client_request+0x708>)
   33eac:	47a0      	blx	r4
   33eae:	0003      	movs	r3, r0
   33eb0:	663b      	str	r3, [r7, #96]	; 0x60
   33eb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   33eb4:	2b00      	cmp	r3, #0
   33eb6:	da07      	bge.n	33ec8 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   33eb8:	2305      	movs	r3, #5
   33eba:	425a      	negs	r2, r3
   33ebc:	69fb      	ldr	r3, [r7, #28]
   33ebe:	0011      	movs	r1, r2
   33ec0:	0018      	movs	r0, r3
   33ec2:	4b18      	ldr	r3, [pc, #96]	; (33f24 <_http_client_request+0x70c>)
   33ec4:	4798      	blx	r3
					return;
   33ec6:	e03b      	b.n	33f40 <_http_client_request+0x728>
				module->req.sent_length += size;
   33ec8:	69fb      	ldr	r3, [r7, #28]
   33eca:	22d0      	movs	r2, #208	; 0xd0
   33ecc:	589a      	ldr	r2, [r3, r2]
   33ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   33ed0:	18d2      	adds	r2, r2, r3
   33ed2:	69fb      	ldr	r3, [r7, #28]
   33ed4:	21d0      	movs	r1, #208	; 0xd0
   33ed6:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   33ed8:	e026      	b.n	33f28 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   33eda:	69fb      	ldr	r3, [r7, #28]
   33edc:	2202      	movs	r2, #2
   33ede:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   33ee0:	69fb      	ldr	r3, [r7, #28]
   33ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33ee4:	2b00      	cmp	r3, #0
   33ee6:	d024      	beq.n	33f32 <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   33ee8:	69fb      	ldr	r3, [r7, #28]
   33eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33eec:	220c      	movs	r2, #12
   33eee:	2118      	movs	r1, #24
   33ef0:	468c      	mov	ip, r1
   33ef2:	44bc      	add	ip, r7
   33ef4:	4462      	add	r2, ip
   33ef6:	69f8      	ldr	r0, [r7, #28]
   33ef8:	2101      	movs	r1, #1
   33efa:	4798      	blx	r3
			break;
   33efc:	e019      	b.n	33f32 <_http_client_request+0x71a>
   33efe:	46c0      	nop			; (mov r8, r8)
   33f00:	0003cffc 	.word	0x0003cffc
   33f04:	00037c09 	.word	0x00037c09
   33f08:	0003d000 	.word	0x0003d000
   33f0c:	00034779 	.word	0x00034779
   33f10:	00037d03 	.word	0x00037d03
   33f14:	0003cf88 	.word	0x0003cf88
   33f18:	000347b5 	.word	0x000347b5
   33f1c:	8000000f 	.word	0x8000000f
   33f20:	00027ca1 	.word	0x00027ca1
   33f24:	000336c5 	.word	0x000336c5
		break;
   33f28:	e004      	b.n	33f34 <_http_client_request+0x71c>
				break;
   33f2a:	46c0      	nop			; (mov r8, r8)
   33f2c:	e002      	b.n	33f34 <_http_client_request+0x71c>
				break;
   33f2e:	46c0      	nop			; (mov r8, r8)
   33f30:	e000      	b.n	33f34 <_http_client_request+0x71c>
			break;
   33f32:	46c0      	nop			; (mov r8, r8)
   33f34:	69bb      	ldr	r3, [r7, #24]
   33f36:	469d      	mov	sp, r3
   33f38:	e004      	b.n	33f44 <_http_client_request+0x72c>
		return;
   33f3a:	46c0      	nop			; (mov r8, r8)
   33f3c:	e000      	b.n	33f40 <_http_client_request+0x728>
		return;
   33f3e:	46c0      	nop			; (mov r8, r8)
   33f40:	69bb      	ldr	r3, [r7, #24]
   33f42:	469d      	mov	sp, r3
	}
}
   33f44:	46bd      	mov	sp, r7
   33f46:	b01e      	add	sp, #120	; 0x78
   33f48:	bc04      	pop	{r2}
   33f4a:	4690      	mov	r8, r2
   33f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33f4e:	46c0      	nop			; (mov r8, r8)

00033f50 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   33f50:	b590      	push	{r4, r7, lr}
   33f52:	b083      	sub	sp, #12
   33f54:	af00      	add	r7, sp, #0
   33f56:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   33f58:	687b      	ldr	r3, [r7, #4]
   33f5a:	2b00      	cmp	r3, #0
   33f5c:	d021      	beq.n	33fa2 <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   33f5e:	687b      	ldr	r3, [r7, #4]
   33f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   33f62:	687b      	ldr	r3, [r7, #4]
   33f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   33f66:	429a      	cmp	r2, r3
   33f68:	d307      	bcc.n	33f7a <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   33f6a:	238b      	movs	r3, #139	; 0x8b
   33f6c:	425a      	negs	r2, r3
   33f6e:	687b      	ldr	r3, [r7, #4]
   33f70:	0011      	movs	r1, r2
   33f72:	0018      	movs	r0, r3
   33f74:	4b0d      	ldr	r3, [pc, #52]	; (33fac <_http_client_recv_packet+0x5c>)
   33f76:	4798      	blx	r3
		return;
   33f78:	e014      	b.n	33fa4 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   33f7a:	687b      	ldr	r3, [r7, #4]
   33f7c:	2000      	movs	r0, #0
   33f7e:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   33f80:	687b      	ldr	r3, [r7, #4]
   33f82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   33f84:	687b      	ldr	r3, [r7, #4]
   33f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   33f88:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   33f8a:	687b      	ldr	r3, [r7, #4]
   33f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   33f8e:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   33f90:	687b      	ldr	r3, [r7, #4]
   33f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   33f94:	b29b      	uxth	r3, r3
   33f96:	1ad3      	subs	r3, r2, r3
   33f98:	b29a      	uxth	r2, r3
   33f9a:	2300      	movs	r3, #0
   33f9c:	4c04      	ldr	r4, [pc, #16]	; (33fb0 <_http_client_recv_packet+0x60>)
   33f9e:	47a0      	blx	r4
   33fa0:	e000      	b.n	33fa4 <_http_client_recv_packet+0x54>
		return;
   33fa2:	46c0      	nop			; (mov r8, r8)
}
   33fa4:	46bd      	mov	sp, r7
   33fa6:	b003      	add	sp, #12
   33fa8:	bd90      	pop	{r4, r7, pc}
   33faa:	46c0      	nop			; (mov r8, r8)
   33fac:	000336c5 	.word	0x000336c5
   33fb0:	00027e05 	.word	0x00027e05

00033fb4 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   33fb4:	b580      	push	{r7, lr}
   33fb6:	b082      	sub	sp, #8
   33fb8:	af00      	add	r7, sp, #0
   33fba:	6078      	str	r0, [r7, #4]
   33fbc:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   33fbe:	687b      	ldr	r3, [r7, #4]
   33fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   33fc2:	683b      	ldr	r3, [r7, #0]
   33fc4:	18d2      	adds	r2, r2, r3
   33fc6:	687b      	ldr	r3, [r7, #4]
   33fc8:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   33fca:	687b      	ldr	r3, [r7, #4]
   33fcc:	2258      	movs	r2, #88	; 0x58
   33fce:	5a9b      	ldrh	r3, [r3, r2]
   33fd0:	2b00      	cmp	r3, #0
   33fd2:	d007      	beq.n	33fe4 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   33fd4:	687b      	ldr	r3, [r7, #4]
   33fd6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   33fd8:	687b      	ldr	r3, [r7, #4]
   33fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   33fdc:	0019      	movs	r1, r3
   33fde:	0010      	movs	r0, r2
   33fe0:	4b06      	ldr	r3, [pc, #24]	; (33ffc <_http_client_recved_packet+0x48>)
   33fe2:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   33fe4:	46c0      	nop			; (mov r8, r8)
   33fe6:	687b      	ldr	r3, [r7, #4]
   33fe8:	0018      	movs	r0, r3
   33fea:	4b05      	ldr	r3, [pc, #20]	; (34000 <_http_client_recved_packet+0x4c>)
   33fec:	4798      	blx	r3
   33fee:	1e03      	subs	r3, r0, #0
   33ff0:	d1f9      	bne.n	33fe6 <_http_client_recved_packet+0x32>
}
   33ff2:	46c0      	nop			; (mov r8, r8)
   33ff4:	46bd      	mov	sp, r7
   33ff6:	b002      	add	sp, #8
   33ff8:	bd80      	pop	{r7, pc}
   33ffa:	46c0      	nop			; (mov r8, r8)
   33ffc:	00034a71 	.word	0x00034a71
   34000:	00034005 	.word	0x00034005

00034004 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   34004:	b580      	push	{r7, lr}
   34006:	b082      	sub	sp, #8
   34008:	af00      	add	r7, sp, #0
   3400a:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   3400c:	687b      	ldr	r3, [r7, #4]
   3400e:	22d8      	movs	r2, #216	; 0xd8
   34010:	589b      	ldr	r3, [r3, r2]
   34012:	2b00      	cmp	r3, #0
   34014:	d002      	beq.n	3401c <_http_client_handle_response+0x18>
   34016:	2b01      	cmp	r3, #1
   34018:	d006      	beq.n	34028 <_http_client_handle_response+0x24>
   3401a:	e00b      	b.n	34034 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   3401c:	687b      	ldr	r3, [r7, #4]
   3401e:	0018      	movs	r0, r3
   34020:	4b07      	ldr	r3, [pc, #28]	; (34040 <_http_client_handle_response+0x3c>)
   34022:	4798      	blx	r3
   34024:	0003      	movs	r3, r0
   34026:	e006      	b.n	34036 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   34028:	687b      	ldr	r3, [r7, #4]
   3402a:	0018      	movs	r0, r3
   3402c:	4b05      	ldr	r3, [pc, #20]	; (34044 <_http_client_handle_response+0x40>)
   3402e:	4798      	blx	r3
   34030:	0003      	movs	r3, r0
   34032:	e000      	b.n	34036 <_http_client_handle_response+0x32>
	}
	return 0;
   34034:	2300      	movs	r3, #0
}
   34036:	0018      	movs	r0, r3
   34038:	46bd      	mov	sp, r7
   3403a:	b002      	add	sp, #8
   3403c:	bd80      	pop	{r7, pc}
   3403e:	46c0      	nop			; (mov r8, r8)
   34040:	00034049 	.word	0x00034049
   34044:	00034501 	.word	0x00034501

00034048 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   34048:	b590      	push	{r4, r7, lr}
   3404a:	b08b      	sub	sp, #44	; 0x2c
   3404c:	af00      	add	r7, sp, #0
   3404e:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   34050:	687b      	ldr	r3, [r7, #4]
   34052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   34054:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   34056:	4b9a      	ldr	r3, [pc, #616]	; (342c0 <_http_client_handle_header+0x278>)
   34058:	681a      	ldr	r2, [r3, #0]
   3405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3405c:	0011      	movs	r1, r2
   3405e:	0018      	movs	r0, r3
   34060:	4b98      	ldr	r3, [pc, #608]	; (342c4 <_http_client_handle_header+0x27c>)
   34062:	4798      	blx	r3
   34064:	0003      	movs	r3, r0
   34066:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   34068:	69bb      	ldr	r3, [r7, #24]
   3406a:	2b00      	cmp	r3, #0
   3406c:	d007      	beq.n	3407e <_http_client_handle_header+0x36>
   3406e:	687b      	ldr	r3, [r7, #4]
   34070:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   34072:	687b      	ldr	r3, [r7, #4]
   34074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   34076:	18d2      	adds	r2, r2, r3
   34078:	69bb      	ldr	r3, [r7, #24]
   3407a:	429a      	cmp	r2, r3
   3407c:	d807      	bhi.n	3408e <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   3407e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   34080:	687b      	ldr	r3, [r7, #4]
   34082:	0011      	movs	r1, r2
   34084:	0018      	movs	r0, r3
   34086:	4b90      	ldr	r3, [pc, #576]	; (342c8 <_http_client_handle_header+0x280>)
   34088:	4798      	blx	r3
			return 0;
   3408a:	2300      	movs	r3, #0
   3408c:	e114      	b.n	342b8 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   3408e:	4b8c      	ldr	r3, [pc, #560]	; (342c0 <_http_client_handle_header+0x278>)
   34090:	681c      	ldr	r4, [r3, #0]
   34092:	4b8b      	ldr	r3, [pc, #556]	; (342c0 <_http_client_handle_header+0x278>)
   34094:	681b      	ldr	r3, [r3, #0]
   34096:	0018      	movs	r0, r3
   34098:	4b8c      	ldr	r3, [pc, #560]	; (342cc <_http_client_handle_header+0x284>)
   3409a:	4798      	blx	r3
   3409c:	0002      	movs	r2, r0
   3409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   340a0:	0021      	movs	r1, r4
   340a2:	0018      	movs	r0, r3
   340a4:	4b8a      	ldr	r3, [pc, #552]	; (342d0 <_http_client_handle_header+0x288>)
   340a6:	4798      	blx	r3
   340a8:	1e03      	subs	r3, r0, #0
   340aa:	d15d      	bne.n	34168 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   340ac:	4b84      	ldr	r3, [pc, #528]	; (342c0 <_http_client_handle_header+0x278>)
   340ae:	681b      	ldr	r3, [r3, #0]
   340b0:	0018      	movs	r0, r3
   340b2:	4b86      	ldr	r3, [pc, #536]	; (342cc <_http_client_handle_header+0x284>)
   340b4:	4798      	blx	r3
   340b6:	0002      	movs	r2, r0
   340b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   340ba:	189a      	adds	r2, r3, r2
   340bc:	687b      	ldr	r3, [r7, #4]
   340be:	0011      	movs	r1, r2
   340c0:	0018      	movs	r0, r3
   340c2:	4b81      	ldr	r3, [pc, #516]	; (342c8 <_http_client_handle_header+0x280>)
   340c4:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   340c6:	687b      	ldr	r3, [r7, #4]
   340c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   340ca:	2b00      	cmp	r3, #0
   340cc:	d046      	beq.n	3415c <_http_client_handle_header+0x114>
   340ce:	687b      	ldr	r3, [r7, #4]
   340d0:	22e4      	movs	r2, #228	; 0xe4
   340d2:	5a9b      	ldrh	r3, [r3, r2]
   340d4:	2b00      	cmp	r3, #0
   340d6:	d041      	beq.n	3415c <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   340d8:	687b      	ldr	r3, [r7, #4]
   340da:	22dc      	movs	r2, #220	; 0xdc
   340dc:	589b      	ldr	r3, [r3, r2]
   340de:	2b00      	cmp	r3, #0
   340e0:	da19      	bge.n	34116 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   340e2:	687b      	ldr	r3, [r7, #4]
   340e4:	22e4      	movs	r2, #228	; 0xe4
   340e6:	5a9a      	ldrh	r2, [r3, r2]
   340e8:	230c      	movs	r3, #12
   340ea:	18fb      	adds	r3, r7, r3
   340ec:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   340ee:	230c      	movs	r3, #12
   340f0:	18fb      	adds	r3, r7, r3
   340f2:	2201      	movs	r2, #1
   340f4:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   340f6:	687b      	ldr	r3, [r7, #4]
   340f8:	22e0      	movs	r2, #224	; 0xe0
   340fa:	2100      	movs	r1, #0
   340fc:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   340fe:	230c      	movs	r3, #12
   34100:	18fb      	adds	r3, r7, r3
   34102:	2200      	movs	r2, #0
   34104:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   34106:	687b      	ldr	r3, [r7, #4]
   34108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3410a:	220c      	movs	r2, #12
   3410c:	18ba      	adds	r2, r7, r2
   3410e:	6878      	ldr	r0, [r7, #4]
   34110:	2102      	movs	r1, #2
   34112:	4798      	blx	r3
   34114:	e022      	b.n	3415c <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   34116:	687b      	ldr	r3, [r7, #4]
   34118:	22dc      	movs	r2, #220	; 0xdc
   3411a:	589a      	ldr	r2, [r3, r2]
   3411c:	687b      	ldr	r3, [r7, #4]
   3411e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   34120:	429a      	cmp	r2, r3
   34122:	dd1b      	ble.n	3415c <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   34124:	687b      	ldr	r3, [r7, #4]
   34126:	22e4      	movs	r2, #228	; 0xe4
   34128:	5a9a      	ldrh	r2, [r3, r2]
   3412a:	230c      	movs	r3, #12
   3412c:	18fb      	adds	r3, r7, r3
   3412e:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   34130:	687b      	ldr	r3, [r7, #4]
   34132:	22dc      	movs	r2, #220	; 0xdc
   34134:	589b      	ldr	r3, [r3, r2]
   34136:	001a      	movs	r2, r3
   34138:	230c      	movs	r3, #12
   3413a:	18fb      	adds	r3, r7, r3
   3413c:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   3413e:	230c      	movs	r3, #12
   34140:	18fb      	adds	r3, r7, r3
   34142:	2200      	movs	r2, #0
   34144:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   34146:	687b      	ldr	r3, [r7, #4]
   34148:	22e0      	movs	r2, #224	; 0xe0
   3414a:	2100      	movs	r1, #0
   3414c:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   3414e:	687b      	ldr	r3, [r7, #4]
   34150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34152:	220c      	movs	r2, #12
   34154:	18ba      	adds	r2, r7, r2
   34156:	6878      	ldr	r0, [r7, #4]
   34158:	2102      	movs	r1, #2
   3415a:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   3415c:	687b      	ldr	r3, [r7, #4]
   3415e:	22d8      	movs	r2, #216	; 0xd8
   34160:	2101      	movs	r1, #1
   34162:	5099      	str	r1, [r3, r2]
			return 1;
   34164:	2301      	movs	r3, #1
   34166:	e0a7      	b.n	342b8 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   34168:	495a      	ldr	r1, [pc, #360]	; (342d4 <_http_client_handle_header+0x28c>)
   3416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3416c:	2210      	movs	r2, #16
   3416e:	0018      	movs	r0, r3
   34170:	4b57      	ldr	r3, [pc, #348]	; (342d0 <_http_client_handle_header+0x288>)
   34172:	4798      	blx	r3
   34174:	1e03      	subs	r3, r0, #0
   34176:	d109      	bne.n	3418c <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   34178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3417a:	3310      	adds	r3, #16
   3417c:	0018      	movs	r0, r3
   3417e:	4b56      	ldr	r3, [pc, #344]	; (342d8 <_http_client_handle_header+0x290>)
   34180:	4798      	blx	r3
   34182:	0001      	movs	r1, r0
   34184:	687b      	ldr	r3, [r7, #4]
   34186:	22dc      	movs	r2, #220	; 0xdc
   34188:	5099      	str	r1, [r3, r2]
   3418a:	e08b      	b.n	342a4 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   3418c:	4953      	ldr	r1, [pc, #332]	; (342dc <_http_client_handle_header+0x294>)
   3418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34190:	2213      	movs	r2, #19
   34192:	0018      	movs	r0, r3
   34194:	4b4e      	ldr	r3, [pc, #312]	; (342d0 <_http_client_handle_header+0x288>)
   34196:	4798      	blx	r3
   34198:	1e03      	subs	r3, r0, #0
   3419a:	d127      	bne.n	341ec <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   3419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3419e:	3313      	adds	r3, #19
   341a0:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   341a2:	e01e      	b.n	341e2 <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   341a4:	6a3b      	ldr	r3, [r7, #32]
   341a6:	781b      	ldrb	r3, [r3, #0]
   341a8:	2b20      	cmp	r3, #32
   341aa:	d103      	bne.n	341b4 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   341ac:	6a3b      	ldr	r3, [r7, #32]
   341ae:	3301      	adds	r3, #1
   341b0:	623b      	str	r3, [r7, #32]
   341b2:	e016      	b.n	341e2 <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   341b4:	6a3b      	ldr	r3, [r7, #32]
   341b6:	781b      	ldrb	r3, [r3, #0]
   341b8:	2b43      	cmp	r3, #67	; 0x43
   341ba:	d003      	beq.n	341c4 <_http_client_handle_header+0x17c>
   341bc:	6a3b      	ldr	r3, [r7, #32]
   341be:	781b      	ldrb	r3, [r3, #0]
   341c0:	2b63      	cmp	r3, #99	; 0x63
   341c2:	d105      	bne.n	341d0 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   341c4:	687b      	ldr	r3, [r7, #4]
   341c6:	21cc      	movs	r1, #204	; 0xcc
   341c8:	2201      	movs	r2, #1
   341ca:	4252      	negs	r2, r2
   341cc:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   341ce:	e069      	b.n	342a4 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   341d0:	2386      	movs	r3, #134	; 0x86
   341d2:	425a      	negs	r2, r3
   341d4:	687b      	ldr	r3, [r7, #4]
   341d6:	0011      	movs	r1, r2
   341d8:	0018      	movs	r0, r3
   341da:	4b41      	ldr	r3, [pc, #260]	; (342e0 <_http_client_handle_header+0x298>)
   341dc:	4798      	blx	r3
					return 0;
   341de:	2300      	movs	r3, #0
   341e0:	e06a      	b.n	342b8 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   341e2:	69ba      	ldr	r2, [r7, #24]
   341e4:	6a3b      	ldr	r3, [r7, #32]
   341e6:	429a      	cmp	r2, r3
   341e8:	d8dc      	bhi.n	341a4 <_http_client_handle_header+0x15c>
   341ea:	e05b      	b.n	342a4 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   341ec:	493d      	ldr	r1, [pc, #244]	; (342e4 <_http_client_handle_header+0x29c>)
   341ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   341f0:	220c      	movs	r2, #12
   341f2:	0018      	movs	r0, r3
   341f4:	4b36      	ldr	r3, [pc, #216]	; (342d0 <_http_client_handle_header+0x288>)
   341f6:	4798      	blx	r3
   341f8:	1e03      	subs	r3, r0, #0
   341fa:	d126      	bne.n	3424a <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   341fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   341fe:	330c      	adds	r3, #12
   34200:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   34202:	e01d      	b.n	34240 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   34204:	69fb      	ldr	r3, [r7, #28]
   34206:	781b      	ldrb	r3, [r3, #0]
   34208:	2b20      	cmp	r3, #32
   3420a:	d103      	bne.n	34214 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   3420c:	69fb      	ldr	r3, [r7, #28]
   3420e:	3301      	adds	r3, #1
   34210:	61fb      	str	r3, [r7, #28]
   34212:	e015      	b.n	34240 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   34214:	69fb      	ldr	r3, [r7, #28]
   34216:	781b      	ldrb	r3, [r3, #0]
   34218:	2b4b      	cmp	r3, #75	; 0x4b
   3421a:	d003      	beq.n	34224 <_http_client_handle_header+0x1dc>
   3421c:	69fb      	ldr	r3, [r7, #28]
   3421e:	781b      	ldrb	r3, [r3, #0]
   34220:	2b6b      	cmp	r3, #107	; 0x6b
   34222:	d106      	bne.n	34232 <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   34224:	687b      	ldr	r3, [r7, #4]
   34226:	2241      	movs	r2, #65	; 0x41
   34228:	5c99      	ldrb	r1, [r3, r2]
   3422a:	2002      	movs	r0, #2
   3422c:	4301      	orrs	r1, r0
   3422e:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   34230:	e038      	b.n	342a4 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   34232:	687b      	ldr	r3, [r7, #4]
   34234:	2241      	movs	r2, #65	; 0x41
   34236:	5c99      	ldrb	r1, [r3, r2]
   34238:	2002      	movs	r0, #2
   3423a:	4381      	bics	r1, r0
   3423c:	5499      	strb	r1, [r3, r2]
				break;
   3423e:	e031      	b.n	342a4 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   34240:	69ba      	ldr	r2, [r7, #24]
   34242:	69fb      	ldr	r3, [r7, #28]
   34244:	429a      	cmp	r2, r3
   34246:	d8dd      	bhi.n	34204 <_http_client_handle_header+0x1bc>
   34248:	e02c      	b.n	342a4 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   3424a:	4927      	ldr	r1, [pc, #156]	; (342e8 <_http_client_handle_header+0x2a0>)
   3424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3424e:	2205      	movs	r2, #5
   34250:	0018      	movs	r0, r3
   34252:	4b1f      	ldr	r3, [pc, #124]	; (342d0 <_http_client_handle_header+0x288>)
   34254:	4798      	blx	r3
   34256:	1e03      	subs	r3, r0, #0
   34258:	d124      	bne.n	342a4 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   3425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3425c:	3309      	adds	r3, #9
   3425e:	0018      	movs	r0, r3
   34260:	4b1d      	ldr	r3, [pc, #116]	; (342d8 <_http_client_handle_header+0x290>)
   34262:	4798      	blx	r3
   34264:	0003      	movs	r3, r0
   34266:	b299      	uxth	r1, r3
   34268:	687b      	ldr	r3, [r7, #4]
   3426a:	22e4      	movs	r2, #228	; 0xe4
   3426c:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   3426e:	687b      	ldr	r3, [r7, #4]
   34270:	22dc      	movs	r2, #220	; 0xdc
   34272:	2100      	movs	r1, #0
   34274:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   34276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34278:	3305      	adds	r3, #5
   3427a:	781b      	ldrb	r3, [r3, #0]
   3427c:	2b31      	cmp	r3, #49	; 0x31
   3427e:	d804      	bhi.n	3428a <_http_client_handle_header+0x242>
   34280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34282:	3307      	adds	r3, #7
   34284:	781b      	ldrb	r3, [r3, #0]
   34286:	2b30      	cmp	r3, #48	; 0x30
   34288:	d906      	bls.n	34298 <_http_client_handle_header+0x250>
				module->permanent = 1;
   3428a:	687b      	ldr	r3, [r7, #4]
   3428c:	2241      	movs	r2, #65	; 0x41
   3428e:	5c99      	ldrb	r1, [r3, r2]
   34290:	2002      	movs	r0, #2
   34292:	4301      	orrs	r1, r0
   34294:	5499      	strb	r1, [r3, r2]
   34296:	e005      	b.n	342a4 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   34298:	687b      	ldr	r3, [r7, #4]
   3429a:	2241      	movs	r2, #65	; 0x41
   3429c:	5c99      	ldrb	r1, [r3, r2]
   3429e:	2002      	movs	r0, #2
   342a0:	4381      	bics	r1, r0
   342a2:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   342a4:	4b06      	ldr	r3, [pc, #24]	; (342c0 <_http_client_handle_header+0x278>)
   342a6:	681b      	ldr	r3, [r3, #0]
   342a8:	0018      	movs	r0, r3
   342aa:	4b08      	ldr	r3, [pc, #32]	; (342cc <_http_client_handle_header+0x284>)
   342ac:	4798      	blx	r3
   342ae:	0002      	movs	r2, r0
   342b0:	69bb      	ldr	r3, [r7, #24]
   342b2:	189b      	adds	r3, r3, r2
   342b4:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   342b6:	e6ce      	b.n	34056 <_http_client_handle_header+0xe>
	}
}
   342b8:	0018      	movs	r0, r3
   342ba:	46bd      	mov	sp, r7
   342bc:	b00b      	add	sp, #44	; 0x2c
   342be:	bd90      	pop	{r4, r7, pc}
   342c0:	20000134 	.word	0x20000134
   342c4:	00037d81 	.word	0x00037d81
   342c8:	000346ad 	.word	0x000346ad
   342cc:	00037d03 	.word	0x00037d03
   342d0:	00037d11 	.word	0x00037d11
   342d4:	0003d000 	.word	0x0003d000
   342d8:	00037899 	.word	0x00037899
   342dc:	0003d024 	.word	0x0003d024
   342e0:	000336c5 	.word	0x000336c5
   342e4:	0003d038 	.word	0x0003d038
   342e8:	0003d048 	.word	0x0003d048

000342ec <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   342ec:	b580      	push	{r7, lr}
   342ee:	b088      	sub	sp, #32
   342f0:	af00      	add	r7, sp, #0
   342f2:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   342f4:	687b      	ldr	r3, [r7, #4]
   342f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   342f8:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   342fa:	2300      	movs	r3, #0
   342fc:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   342fe:	687b      	ldr	r3, [r7, #4]
   34300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   34302:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   34304:	687b      	ldr	r3, [r7, #4]
   34306:	22e0      	movs	r2, #224	; 0xe0
   34308:	589b      	ldr	r3, [r3, r2]
   3430a:	2b00      	cmp	r3, #0
   3430c:	db71      	blt.n	343f2 <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   3430e:	687b      	ldr	r3, [r7, #4]
   34310:	22e0      	movs	r2, #224	; 0xe0
   34312:	589b      	ldr	r3, [r3, r2]
   34314:	2b00      	cmp	r3, #0
   34316:	d134      	bne.n	34382 <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   34318:	687b      	ldr	r3, [r7, #4]
   3431a:	22d8      	movs	r2, #216	; 0xd8
   3431c:	2100      	movs	r1, #0
   3431e:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   34320:	687b      	ldr	r3, [r7, #4]
   34322:	22e4      	movs	r2, #228	; 0xe4
   34324:	2100      	movs	r1, #0
   34326:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   34328:	2308      	movs	r3, #8
   3432a:	18fb      	adds	r3, r7, r3
   3432c:	2201      	movs	r2, #1
   3432e:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   34330:	2308      	movs	r3, #8
   34332:	18fb      	adds	r3, r7, r3
   34334:	2200      	movs	r2, #0
   34336:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   34338:	2308      	movs	r3, #8
   3433a:	18fb      	adds	r3, r7, r3
   3433c:	2200      	movs	r2, #0
   3433e:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   34340:	687b      	ldr	r3, [r7, #4]
   34342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34344:	2b00      	cmp	r3, #0
   34346:	d006      	beq.n	34356 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   34348:	687b      	ldr	r3, [r7, #4]
   3434a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3434c:	2208      	movs	r2, #8
   3434e:	18ba      	adds	r2, r7, r2
   34350:	6878      	ldr	r0, [r7, #4]
   34352:	2103      	movs	r1, #3
   34354:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   34356:	687b      	ldr	r3, [r7, #4]
   34358:	2241      	movs	r2, #65	; 0x41
   3435a:	5c9b      	ldrb	r3, [r3, r2]
   3435c:	2202      	movs	r2, #2
   3435e:	4013      	ands	r3, r2
   34360:	b2db      	uxtb	r3, r3
   34362:	2b00      	cmp	r3, #0
   34364:	d105      	bne.n	34372 <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   34366:	687b      	ldr	r3, [r7, #4]
   34368:	2100      	movs	r1, #0
   3436a:	0018      	movs	r0, r3
   3436c:	4b62      	ldr	r3, [pc, #392]	; (344f8 <_http_client_read_chuked_entity+0x20c>)
   3436e:	4798      	blx	r3
					return;
   34370:	e0bf      	b.n	344f2 <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   34372:	697b      	ldr	r3, [r7, #20]
   34374:	1c9a      	adds	r2, r3, #2
   34376:	687b      	ldr	r3, [r7, #4]
   34378:	0011      	movs	r1, r2
   3437a:	0018      	movs	r0, r3
   3437c:	4b5f      	ldr	r3, [pc, #380]	; (344fc <_http_client_read_chuked_entity+0x210>)
   3437e:	4798      	blx	r3
   34380:	e0b2      	b.n	344e8 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   34382:	687b      	ldr	r3, [r7, #4]
   34384:	22e0      	movs	r2, #224	; 0xe0
   34386:	589a      	ldr	r2, [r3, r2]
   34388:	69fb      	ldr	r3, [r7, #28]
   3438a:	429a      	cmp	r2, r3
   3438c:	dd00      	ble.n	34390 <_http_client_read_chuked_entity+0xa4>
   3438e:	e0ab      	b.n	344e8 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   34390:	687b      	ldr	r3, [r7, #4]
   34392:	22e0      	movs	r2, #224	; 0xe0
   34394:	589b      	ldr	r3, [r3, r2]
   34396:	001a      	movs	r2, r3
   34398:	2308      	movs	r3, #8
   3439a:	18fb      	adds	r3, r7, r3
   3439c:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   3439e:	2308      	movs	r3, #8
   343a0:	18fb      	adds	r3, r7, r3
   343a2:	697a      	ldr	r2, [r7, #20]
   343a4:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   343a6:	2308      	movs	r3, #8
   343a8:	18fb      	adds	r3, r7, r3
   343aa:	2200      	movs	r2, #0
   343ac:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   343ae:	687b      	ldr	r3, [r7, #4]
   343b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   343b2:	2b00      	cmp	r3, #0
   343b4:	d006      	beq.n	343c4 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   343b6:	687b      	ldr	r3, [r7, #4]
   343b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   343ba:	2208      	movs	r2, #8
   343bc:	18ba      	adds	r2, r7, r2
   343be:	6878      	ldr	r0, [r7, #4]
   343c0:	2103      	movs	r1, #3
   343c2:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   343c4:	687b      	ldr	r3, [r7, #4]
   343c6:	22e0      	movs	r2, #224	; 0xe0
   343c8:	589b      	ldr	r3, [r3, r2]
   343ca:	3302      	adds	r3, #2
   343cc:	697a      	ldr	r2, [r7, #20]
   343ce:	18d2      	adds	r2, r2, r3
   343d0:	687b      	ldr	r3, [r7, #4]
   343d2:	0011      	movs	r1, r2
   343d4:	0018      	movs	r0, r3
   343d6:	4b49      	ldr	r3, [pc, #292]	; (344fc <_http_client_read_chuked_entity+0x210>)
   343d8:	4798      	blx	r3
				length = (int)module->recved_size;
   343da:	687b      	ldr	r3, [r7, #4]
   343dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   343de:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   343e0:	687b      	ldr	r3, [r7, #4]
   343e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   343e4:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   343e6:	687b      	ldr	r3, [r7, #4]
   343e8:	21e0      	movs	r1, #224	; 0xe0
   343ea:	2201      	movs	r2, #1
   343ec:	4252      	negs	r2, r2
   343ee:	505a      	str	r2, [r3, r1]
   343f0:	e07a      	b.n	344e8 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   343f2:	687b      	ldr	r3, [r7, #4]
   343f4:	22e0      	movs	r2, #224	; 0xe0
   343f6:	2100      	movs	r1, #0
   343f8:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   343fa:	e05a      	b.n	344b2 <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   343fc:	697b      	ldr	r3, [r7, #20]
   343fe:	781b      	ldrb	r3, [r3, #0]
   34400:	2b0a      	cmp	r3, #10
   34402:	d106      	bne.n	34412 <_http_client_read_chuked_entity+0x126>
					buffer++;
   34404:	697b      	ldr	r3, [r7, #20]
   34406:	3301      	adds	r3, #1
   34408:	617b      	str	r3, [r7, #20]
					length--;
   3440a:	69fb      	ldr	r3, [r7, #28]
   3440c:	3b01      	subs	r3, #1
   3440e:	61fb      	str	r3, [r7, #28]
					break;
   34410:	e052      	b.n	344b8 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   34412:	69bb      	ldr	r3, [r7, #24]
   34414:	2b00      	cmp	r3, #0
   34416:	d145      	bne.n	344a4 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   34418:	697b      	ldr	r3, [r7, #20]
   3441a:	781b      	ldrb	r3, [r3, #0]
   3441c:	2b2f      	cmp	r3, #47	; 0x2f
   3441e:	d910      	bls.n	34442 <_http_client_read_chuked_entity+0x156>
   34420:	697b      	ldr	r3, [r7, #20]
   34422:	781b      	ldrb	r3, [r3, #0]
   34424:	2b39      	cmp	r3, #57	; 0x39
   34426:	d80c      	bhi.n	34442 <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   34428:	687b      	ldr	r3, [r7, #4]
   3442a:	22e0      	movs	r2, #224	; 0xe0
   3442c:	589b      	ldr	r3, [r3, r2]
   3442e:	011b      	lsls	r3, r3, #4
   34430:	697a      	ldr	r2, [r7, #20]
   34432:	7812      	ldrb	r2, [r2, #0]
   34434:	189b      	adds	r3, r3, r2
   34436:	3b30      	subs	r3, #48	; 0x30
   34438:	001a      	movs	r2, r3
   3443a:	687b      	ldr	r3, [r7, #4]
   3443c:	21e0      	movs	r1, #224	; 0xe0
   3443e:	505a      	str	r2, [r3, r1]
   34440:	e031      	b.n	344a6 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   34442:	697b      	ldr	r3, [r7, #20]
   34444:	781b      	ldrb	r3, [r3, #0]
   34446:	2b60      	cmp	r3, #96	; 0x60
   34448:	d910      	bls.n	3446c <_http_client_read_chuked_entity+0x180>
   3444a:	697b      	ldr	r3, [r7, #20]
   3444c:	781b      	ldrb	r3, [r3, #0]
   3444e:	2b66      	cmp	r3, #102	; 0x66
   34450:	d80c      	bhi.n	3446c <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   34452:	687b      	ldr	r3, [r7, #4]
   34454:	22e0      	movs	r2, #224	; 0xe0
   34456:	589b      	ldr	r3, [r3, r2]
   34458:	011b      	lsls	r3, r3, #4
   3445a:	697a      	ldr	r2, [r7, #20]
   3445c:	7812      	ldrb	r2, [r2, #0]
   3445e:	189b      	adds	r3, r3, r2
   34460:	3b61      	subs	r3, #97	; 0x61
   34462:	001a      	movs	r2, r3
   34464:	687b      	ldr	r3, [r7, #4]
   34466:	21e0      	movs	r1, #224	; 0xe0
   34468:	505a      	str	r2, [r3, r1]
   3446a:	e01c      	b.n	344a6 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   3446c:	697b      	ldr	r3, [r7, #20]
   3446e:	781b      	ldrb	r3, [r3, #0]
   34470:	2b40      	cmp	r3, #64	; 0x40
   34472:	d910      	bls.n	34496 <_http_client_read_chuked_entity+0x1aa>
   34474:	697b      	ldr	r3, [r7, #20]
   34476:	781b      	ldrb	r3, [r3, #0]
   34478:	2b46      	cmp	r3, #70	; 0x46
   3447a:	d80c      	bhi.n	34496 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   3447c:	687b      	ldr	r3, [r7, #4]
   3447e:	22e0      	movs	r2, #224	; 0xe0
   34480:	589b      	ldr	r3, [r3, r2]
   34482:	011b      	lsls	r3, r3, #4
   34484:	697a      	ldr	r2, [r7, #20]
   34486:	7812      	ldrb	r2, [r2, #0]
   34488:	189b      	adds	r3, r3, r2
   3448a:	3b41      	subs	r3, #65	; 0x41
   3448c:	001a      	movs	r2, r3
   3448e:	687b      	ldr	r3, [r7, #4]
   34490:	21e0      	movs	r1, #224	; 0xe0
   34492:	505a      	str	r2, [r3, r1]
   34494:	e007      	b.n	344a6 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   34496:	697b      	ldr	r3, [r7, #20]
   34498:	781b      	ldrb	r3, [r3, #0]
   3449a:	2b3b      	cmp	r3, #59	; 0x3b
   3449c:	d103      	bne.n	344a6 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   3449e:	2301      	movs	r3, #1
   344a0:	61bb      	str	r3, [r7, #24]
   344a2:	e000      	b.n	344a6 <_http_client_read_chuked_entity+0x1ba>
					continue;
   344a4:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   344a6:	697b      	ldr	r3, [r7, #20]
   344a8:	3301      	adds	r3, #1
   344aa:	617b      	str	r3, [r7, #20]
   344ac:	69fb      	ldr	r3, [r7, #28]
   344ae:	3b01      	subs	r3, #1
   344b0:	61fb      	str	r3, [r7, #28]
   344b2:	69fb      	ldr	r3, [r7, #28]
   344b4:	2b00      	cmp	r3, #0
   344b6:	dca1      	bgt.n	343fc <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   344b8:	687b      	ldr	r3, [r7, #4]
   344ba:	22e0      	movs	r2, #224	; 0xe0
   344bc:	589a      	ldr	r2, [r3, r2]
   344be:	687b      	ldr	r3, [r7, #4]
   344c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   344c2:	429a      	cmp	r2, r3
   344c4:	dd07      	ble.n	344d6 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   344c6:	238b      	movs	r3, #139	; 0x8b
   344c8:	425a      	negs	r2, r3
   344ca:	687b      	ldr	r3, [r7, #4]
   344cc:	0011      	movs	r1, r2
   344ce:	0018      	movs	r0, r3
   344d0:	4b09      	ldr	r3, [pc, #36]	; (344f8 <_http_client_read_chuked_entity+0x20c>)
   344d2:	4798      	blx	r3
				return;
   344d4:	e00d      	b.n	344f2 <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   344d6:	69fb      	ldr	r3, [r7, #28]
   344d8:	2b00      	cmp	r3, #0
   344da:	d105      	bne.n	344e8 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   344dc:	687b      	ldr	r3, [r7, #4]
   344de:	21e0      	movs	r1, #224	; 0xe0
   344e0:	2201      	movs	r2, #1
   344e2:	4252      	negs	r2, r2
   344e4:	505a      	str	r2, [r3, r1]
				return;
   344e6:	e004      	b.n	344f2 <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   344e8:	687b      	ldr	r3, [r7, #4]
   344ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   344ec:	2b00      	cmp	r3, #0
   344ee:	d000      	beq.n	344f2 <_http_client_read_chuked_entity+0x206>
   344f0:	e708      	b.n	34304 <_http_client_read_chuked_entity+0x18>
}
   344f2:	46bd      	mov	sp, r7
   344f4:	b008      	add	sp, #32
   344f6:	bd80      	pop	{r7, pc}
   344f8:	000336c5 	.word	0x000336c5
   344fc:	000346ad 	.word	0x000346ad

00034500 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   34500:	b580      	push	{r7, lr}
   34502:	b086      	sub	sp, #24
   34504:	af00      	add	r7, sp, #0
   34506:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   34508:	687b      	ldr	r3, [r7, #4]
   3450a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3450c:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   3450e:	687b      	ldr	r3, [r7, #4]
   34510:	22dc      	movs	r2, #220	; 0xdc
   34512:	589b      	ldr	r3, [r3, r2]
   34514:	2b00      	cmp	r3, #0
   34516:	db58      	blt.n	345ca <_http_client_handle_entity+0xca>
   34518:	687b      	ldr	r3, [r7, #4]
   3451a:	22dc      	movs	r2, #220	; 0xdc
   3451c:	589a      	ldr	r2, [r3, r2]
   3451e:	687b      	ldr	r3, [r7, #4]
   34520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   34522:	429a      	cmp	r2, r3
   34524:	dc51      	bgt.n	345ca <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   34526:	687b      	ldr	r3, [r7, #4]
   34528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3452a:	0019      	movs	r1, r3
   3452c:	687b      	ldr	r3, [r7, #4]
   3452e:	22dc      	movs	r2, #220	; 0xdc
   34530:	589b      	ldr	r3, [r3, r2]
   34532:	4299      	cmp	r1, r3
   34534:	da00      	bge.n	34538 <_http_client_handle_entity+0x38>
   34536:	e0a9      	b.n	3468c <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   34538:	687b      	ldr	r3, [r7, #4]
   3453a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3453c:	2b00      	cmp	r3, #0
   3453e:	d020      	beq.n	34582 <_http_client_handle_entity+0x82>
   34540:	687b      	ldr	r3, [r7, #4]
   34542:	22e4      	movs	r2, #228	; 0xe4
   34544:	5a9b      	ldrh	r3, [r3, r2]
   34546:	2b00      	cmp	r3, #0
   34548:	d01b      	beq.n	34582 <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   3454a:	687b      	ldr	r3, [r7, #4]
   3454c:	22e4      	movs	r2, #228	; 0xe4
   3454e:	5a9a      	ldrh	r2, [r3, r2]
   34550:	2308      	movs	r3, #8
   34552:	18fb      	adds	r3, r7, r3
   34554:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   34556:	2308      	movs	r3, #8
   34558:	18fb      	adds	r3, r7, r3
   3455a:	2200      	movs	r2, #0
   3455c:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   3455e:	687b      	ldr	r3, [r7, #4]
   34560:	22dc      	movs	r2, #220	; 0xdc
   34562:	589b      	ldr	r3, [r3, r2]
   34564:	001a      	movs	r2, r3
   34566:	2308      	movs	r3, #8
   34568:	18fb      	adds	r3, r7, r3
   3456a:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   3456c:	2308      	movs	r3, #8
   3456e:	18fb      	adds	r3, r7, r3
   34570:	697a      	ldr	r2, [r7, #20]
   34572:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   34574:	687b      	ldr	r3, [r7, #4]
   34576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34578:	2208      	movs	r2, #8
   3457a:	18ba      	adds	r2, r7, r2
   3457c:	6878      	ldr	r0, [r7, #4]
   3457e:	2102      	movs	r1, #2
   34580:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   34582:	687b      	ldr	r3, [r7, #4]
   34584:	22d8      	movs	r2, #216	; 0xd8
   34586:	2100      	movs	r1, #0
   34588:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   3458a:	687b      	ldr	r3, [r7, #4]
   3458c:	22e4      	movs	r2, #228	; 0xe4
   3458e:	2100      	movs	r1, #0
   34590:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   34592:	687b      	ldr	r3, [r7, #4]
   34594:	2241      	movs	r2, #65	; 0x41
   34596:	5c9b      	ldrb	r3, [r3, r2]
   34598:	2202      	movs	r2, #2
   3459a:	4013      	ands	r3, r2
   3459c:	b2db      	uxtb	r3, r3
   3459e:	2b00      	cmp	r3, #0
   345a0:	d105      	bne.n	345ae <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   345a2:	687b      	ldr	r3, [r7, #4]
   345a4:	2100      	movs	r1, #0
   345a6:	0018      	movs	r0, r3
   345a8:	4b3b      	ldr	r3, [pc, #236]	; (34698 <_http_client_handle_entity+0x198>)
   345aa:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   345ac:	e06e      	b.n	3468c <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   345ae:	687b      	ldr	r3, [r7, #4]
   345b0:	22dc      	movs	r2, #220	; 0xdc
   345b2:	589b      	ldr	r3, [r3, r2]
   345b4:	001a      	movs	r2, r3
   345b6:	697b      	ldr	r3, [r7, #20]
   345b8:	189a      	adds	r2, r3, r2
   345ba:	687b      	ldr	r3, [r7, #4]
   345bc:	0011      	movs	r1, r2
   345be:	0018      	movs	r0, r3
   345c0:	4b36      	ldr	r3, [pc, #216]	; (3469c <_http_client_handle_entity+0x19c>)
   345c2:	4798      	blx	r3
				return module->recved_size;
   345c4:	687b      	ldr	r3, [r7, #4]
   345c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   345c8:	e061      	b.n	3468e <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   345ca:	687b      	ldr	r3, [r7, #4]
   345cc:	22dc      	movs	r2, #220	; 0xdc
   345ce:	589b      	ldr	r3, [r3, r2]
   345d0:	2b00      	cmp	r3, #0
   345d2:	db57      	blt.n	34684 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   345d4:	687b      	ldr	r3, [r7, #4]
   345d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   345d8:	2308      	movs	r3, #8
   345da:	18fb      	adds	r3, r7, r3
   345dc:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   345de:	2308      	movs	r3, #8
   345e0:	18fb      	adds	r3, r7, r3
   345e2:	697a      	ldr	r2, [r7, #20]
   345e4:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   345e6:	687b      	ldr	r3, [r7, #4]
   345e8:	22e0      	movs	r2, #224	; 0xe0
   345ea:	589a      	ldr	r2, [r3, r2]
   345ec:	687b      	ldr	r3, [r7, #4]
   345ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   345f0:	18d2      	adds	r2, r2, r3
   345f2:	687b      	ldr	r3, [r7, #4]
   345f4:	21e0      	movs	r1, #224	; 0xe0
   345f6:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   345f8:	687b      	ldr	r3, [r7, #4]
   345fa:	22dc      	movs	r2, #220	; 0xdc
   345fc:	589a      	ldr	r2, [r3, r2]
   345fe:	687b      	ldr	r3, [r7, #4]
   34600:	21e0      	movs	r1, #224	; 0xe0
   34602:	585b      	ldr	r3, [r3, r1]
   34604:	429a      	cmp	r2, r3
   34606:	dc0c      	bgt.n	34622 <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   34608:	687b      	ldr	r3, [r7, #4]
   3460a:	22d8      	movs	r2, #216	; 0xd8
   3460c:	2100      	movs	r1, #0
   3460e:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   34610:	687b      	ldr	r3, [r7, #4]
   34612:	22e4      	movs	r2, #228	; 0xe4
   34614:	2100      	movs	r1, #0
   34616:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   34618:	2308      	movs	r3, #8
   3461a:	18fb      	adds	r3, r7, r3
   3461c:	2201      	movs	r2, #1
   3461e:	721a      	strb	r2, [r3, #8]
   34620:	e003      	b.n	3462a <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   34622:	2308      	movs	r3, #8
   34624:	18fb      	adds	r3, r7, r3
   34626:	2200      	movs	r2, #0
   34628:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   3462a:	687b      	ldr	r3, [r7, #4]
   3462c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3462e:	2b00      	cmp	r3, #0
   34630:	d006      	beq.n	34640 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   34632:	687b      	ldr	r3, [r7, #4]
   34634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34636:	2208      	movs	r2, #8
   34638:	18ba      	adds	r2, r7, r2
   3463a:	6878      	ldr	r0, [r7, #4]
   3463c:	2103      	movs	r1, #3
   3463e:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   34640:	2308      	movs	r3, #8
   34642:	18fb      	adds	r3, r7, r3
   34644:	7a1b      	ldrb	r3, [r3, #8]
   34646:	2b01      	cmp	r3, #1
   34648:	d112      	bne.n	34670 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   3464a:	687b      	ldr	r3, [r7, #4]
   3464c:	2241      	movs	r2, #65	; 0x41
   3464e:	5c9b      	ldrb	r3, [r3, r2]
   34650:	2202      	movs	r2, #2
   34652:	4013      	ands	r3, r2
   34654:	b2db      	uxtb	r3, r3
   34656:	2b00      	cmp	r3, #0
   34658:	d10a      	bne.n	34670 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   3465a:	4b11      	ldr	r3, [pc, #68]	; (346a0 <_http_client_handle_entity+0x1a0>)
   3465c:	0018      	movs	r0, r3
   3465e:	4b11      	ldr	r3, [pc, #68]	; (346a4 <_http_client_handle_entity+0x1a4>)
   34660:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   34662:	687b      	ldr	r3, [r7, #4]
   34664:	2100      	movs	r1, #0
   34666:	0018      	movs	r0, r3
   34668:	4b0b      	ldr	r3, [pc, #44]	; (34698 <_http_client_handle_entity+0x198>)
   3466a:	4798      	blx	r3
					return 0;
   3466c:	2300      	movs	r3, #0
   3466e:	e00e      	b.n	3468e <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   34670:	687b      	ldr	r3, [r7, #4]
   34672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   34674:	697a      	ldr	r2, [r7, #20]
   34676:	18d2      	adds	r2, r2, r3
   34678:	687b      	ldr	r3, [r7, #4]
   3467a:	0011      	movs	r1, r2
   3467c:	0018      	movs	r0, r3
   3467e:	4b07      	ldr	r3, [pc, #28]	; (3469c <_http_client_handle_entity+0x19c>)
   34680:	4798      	blx	r3
   34682:	e003      	b.n	3468c <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   34684:	687b      	ldr	r3, [r7, #4]
   34686:	0018      	movs	r0, r3
   34688:	4b07      	ldr	r3, [pc, #28]	; (346a8 <_http_client_handle_entity+0x1a8>)
   3468a:	4798      	blx	r3
		}
	}

	return 0;
   3468c:	2300      	movs	r3, #0
}
   3468e:	0018      	movs	r0, r3
   34690:	46bd      	mov	sp, r7
   34692:	b006      	add	sp, #24
   34694:	bd80      	pop	{r7, pc}
   34696:	46c0      	nop			; (mov r8, r8)
   34698:	000336c5 	.word	0x000336c5
   3469c:	000346ad 	.word	0x000346ad
   346a0:	0003d050 	.word	0x0003d050
   346a4:	00037b6d 	.word	0x00037b6d
   346a8:	000342ed 	.word	0x000342ed

000346ac <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   346ac:	b580      	push	{r7, lr}
   346ae:	b084      	sub	sp, #16
   346b0:	af00      	add	r7, sp, #0
   346b2:	6078      	str	r0, [r7, #4]
   346b4:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   346b6:	687b      	ldr	r3, [r7, #4]
   346b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   346ba:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   346bc:	687b      	ldr	r3, [r7, #4]
   346be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   346c0:	001a      	movs	r2, r3
   346c2:	683b      	ldr	r3, [r7, #0]
   346c4:	1ad2      	subs	r2, r2, r3
   346c6:	68fb      	ldr	r3, [r7, #12]
   346c8:	18d3      	adds	r3, r2, r3
   346ca:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   346cc:	68bb      	ldr	r3, [r7, #8]
   346ce:	2b00      	cmp	r3, #0
   346d0:	dd09      	ble.n	346e6 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   346d2:	68ba      	ldr	r2, [r7, #8]
   346d4:	6839      	ldr	r1, [r7, #0]
   346d6:	68fb      	ldr	r3, [r7, #12]
   346d8:	0018      	movs	r0, r3
   346da:	4b06      	ldr	r3, [pc, #24]	; (346f4 <_http_client_move_buffer+0x48>)
   346dc:	4798      	blx	r3
		module->recved_size = remain;
   346de:	68ba      	ldr	r2, [r7, #8]
   346e0:	687b      	ldr	r3, [r7, #4]
   346e2:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   346e4:	e002      	b.n	346ec <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   346e6:	687b      	ldr	r3, [r7, #4]
   346e8:	2200      	movs	r2, #0
   346ea:	645a      	str	r2, [r3, #68]	; 0x44
}
   346ec:	46c0      	nop			; (mov r8, r8)
   346ee:	46bd      	mov	sp, r7
   346f0:	b004      	add	sp, #16
   346f2:	bd80      	pop	{r7, pc}
   346f4:	00037927 	.word	0x00037927

000346f8 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   346f8:	b580      	push	{r7, lr}
   346fa:	b084      	sub	sp, #16
   346fc:	af00      	add	r7, sp, #0
   346fe:	60f8      	str	r0, [r7, #12]
   34700:	60b9      	str	r1, [r7, #8]
   34702:	607a      	str	r2, [r7, #4]
   34704:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   34706:	68fb      	ldr	r3, [r7, #12]
   34708:	687a      	ldr	r2, [r7, #4]
   3470a:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   3470c:	68fb      	ldr	r3, [r7, #12]
   3470e:	68ba      	ldr	r2, [r7, #8]
   34710:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   34712:	68fb      	ldr	r3, [r7, #12]
   34714:	2200      	movs	r2, #0
   34716:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   34718:	68fb      	ldr	r3, [r7, #12]
   3471a:	683a      	ldr	r2, [r7, #0]
   3471c:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   3471e:	68fb      	ldr	r3, [r7, #12]
   34720:	69ba      	ldr	r2, [r7, #24]
   34722:	60da      	str	r2, [r3, #12]
}
   34724:	46c0      	nop			; (mov r8, r8)
   34726:	46bd      	mov	sp, r7
   34728:	b004      	add	sp, #16
   3472a:	bd80      	pop	{r7, pc}

0003472c <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   3472c:	b580      	push	{r7, lr}
   3472e:	b084      	sub	sp, #16
   34730:	af00      	add	r7, sp, #0
   34732:	6078      	str	r0, [r7, #4]
   34734:	000a      	movs	r2, r1
   34736:	1cfb      	adds	r3, r7, #3
   34738:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   3473a:	687b      	ldr	r3, [r7, #4]
   3473c:	681a      	ldr	r2, [r3, #0]
   3473e:	687b      	ldr	r3, [r7, #4]
   34740:	685b      	ldr	r3, [r3, #4]
   34742:	1ad3      	subs	r3, r2, r3
   34744:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   34746:	68fb      	ldr	r3, [r7, #12]
   34748:	2b00      	cmp	r3, #0
   3474a:	dc03      	bgt.n	34754 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   3474c:	687b      	ldr	r3, [r7, #4]
   3474e:	0018      	movs	r0, r3
   34750:	4b08      	ldr	r3, [pc, #32]	; (34774 <stream_writer_send_8+0x48>)
   34752:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   34754:	687b      	ldr	r3, [r7, #4]
   34756:	6919      	ldr	r1, [r3, #16]
   34758:	687b      	ldr	r3, [r7, #4]
   3475a:	685b      	ldr	r3, [r3, #4]
   3475c:	1c58      	adds	r0, r3, #1
   3475e:	687a      	ldr	r2, [r7, #4]
   34760:	6050      	str	r0, [r2, #4]
   34762:	18cb      	adds	r3, r1, r3
   34764:	1cfa      	adds	r2, r7, #3
   34766:	7812      	ldrb	r2, [r2, #0]
   34768:	701a      	strb	r2, [r3, #0]
}
   3476a:	46c0      	nop			; (mov r8, r8)
   3476c:	46bd      	mov	sp, r7
   3476e:	b004      	add	sp, #16
   34770:	bd80      	pop	{r7, pc}
   34772:	46c0      	nop			; (mov r8, r8)
   34774:	000347b5 	.word	0x000347b5

00034778 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   34778:	b580      	push	{r7, lr}
   3477a:	b084      	sub	sp, #16
   3477c:	af00      	add	r7, sp, #0
   3477e:	60f8      	str	r0, [r7, #12]
   34780:	60b9      	str	r1, [r7, #8]
   34782:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   34784:	e00d      	b.n	347a2 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   34786:	68bb      	ldr	r3, [r7, #8]
   34788:	781b      	ldrb	r3, [r3, #0]
   3478a:	b25a      	sxtb	r2, r3
   3478c:	68fb      	ldr	r3, [r7, #12]
   3478e:	0011      	movs	r1, r2
   34790:	0018      	movs	r0, r3
   34792:	4b07      	ldr	r3, [pc, #28]	; (347b0 <stream_writer_send_buffer+0x38>)
   34794:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   34796:	687b      	ldr	r3, [r7, #4]
   34798:	3b01      	subs	r3, #1
   3479a:	607b      	str	r3, [r7, #4]
   3479c:	68bb      	ldr	r3, [r7, #8]
   3479e:	3301      	adds	r3, #1
   347a0:	60bb      	str	r3, [r7, #8]
   347a2:	687b      	ldr	r3, [r7, #4]
   347a4:	2b00      	cmp	r3, #0
   347a6:	d1ee      	bne.n	34786 <stream_writer_send_buffer+0xe>
	}
}
   347a8:	46c0      	nop			; (mov r8, r8)
   347aa:	46bd      	mov	sp, r7
   347ac:	b004      	add	sp, #16
   347ae:	bd80      	pop	{r7, pc}
   347b0:	0003472d 	.word	0x0003472d

000347b4 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   347b4:	b590      	push	{r4, r7, lr}
   347b6:	b083      	sub	sp, #12
   347b8:	af00      	add	r7, sp, #0
   347ba:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   347bc:	687b      	ldr	r3, [r7, #4]
   347be:	685b      	ldr	r3, [r3, #4]
   347c0:	2b00      	cmp	r3, #0
   347c2:	d00c      	beq.n	347de <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   347c4:	687b      	ldr	r3, [r7, #4]
   347c6:	689c      	ldr	r4, [r3, #8]
   347c8:	687b      	ldr	r3, [r7, #4]
   347ca:	68d8      	ldr	r0, [r3, #12]
   347cc:	687b      	ldr	r3, [r7, #4]
   347ce:	6919      	ldr	r1, [r3, #16]
   347d0:	687b      	ldr	r3, [r7, #4]
   347d2:	685b      	ldr	r3, [r3, #4]
   347d4:	001a      	movs	r2, r3
   347d6:	47a0      	blx	r4
		writer->written = 0;
   347d8:	687b      	ldr	r3, [r7, #4]
   347da:	2200      	movs	r2, #0
   347dc:	605a      	str	r2, [r3, #4]
	}
}
   347de:	46c0      	nop			; (mov r8, r8)
   347e0:	46bd      	mov	sp, r7
   347e2:	b003      	add	sp, #12
   347e4:	bd90      	pop	{r4, r7, pc}
	...

000347e8 <system_cpu_clock_get_hz>:
 * generic clock and the set CPU bus divider.
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
   347e8:	b580      	push	{r7, lr}
   347ea:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   347ec:	2000      	movs	r0, #0
   347ee:	4b05      	ldr	r3, [pc, #20]	; (34804 <system_cpu_clock_get_hz+0x1c>)
   347f0:	4798      	blx	r3
   347f2:	0002      	movs	r2, r0
   347f4:	4b04      	ldr	r3, [pc, #16]	; (34808 <system_cpu_clock_get_hz+0x20>)
   347f6:	7a1b      	ldrb	r3, [r3, #8]
   347f8:	b2db      	uxtb	r3, r3
   347fa:	40da      	lsrs	r2, r3
   347fc:	0013      	movs	r3, r2
}
   347fe:	0018      	movs	r0, r3
   34800:	46bd      	mov	sp, r7
   34802:	bd80      	pop	{r7, pc}
   34804:	0002c1c9 	.word	0x0002c1c9
   34808:	40000400 	.word	0x40000400

0003480c <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   3480c:	b580      	push	{r7, lr}
   3480e:	b084      	sub	sp, #16
   34810:	af00      	add	r7, sp, #0
   34812:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   34814:	687b      	ldr	r3, [r7, #4]
   34816:	681b      	ldr	r3, [r3, #0]
   34818:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   3481a:	46c0      	nop			; (mov r8, r8)
   3481c:	68fb      	ldr	r3, [r7, #12]
   3481e:	689b      	ldr	r3, [r3, #8]
   34820:	2202      	movs	r2, #2
   34822:	4013      	ands	r3, r2
   34824:	d1fa      	bne.n	3481c <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   34826:	68fb      	ldr	r3, [r7, #12]
   34828:	681b      	ldr	r3, [r3, #0]
   3482a:	2202      	movs	r2, #2
   3482c:	431a      	orrs	r2, r3
   3482e:	68fb      	ldr	r3, [r7, #12]
   34830:	601a      	str	r2, [r3, #0]
}
   34832:	46c0      	nop			; (mov r8, r8)
   34834:	46bd      	mov	sp, r7
   34836:	b004      	add	sp, #16
   34838:	bd80      	pop	{r7, pc}
	...

0003483c <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   3483c:	b580      	push	{r7, lr}
   3483e:	b082      	sub	sp, #8
   34840:	af00      	add	r7, sp, #0
   34842:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   34844:	4b04      	ldr	r3, [pc, #16]	; (34858 <sw_timer_tcc_callback+0x1c>)
   34846:	681b      	ldr	r3, [r3, #0]
   34848:	1c5a      	adds	r2, r3, #1
   3484a:	4b03      	ldr	r3, [pc, #12]	; (34858 <sw_timer_tcc_callback+0x1c>)
   3484c:	601a      	str	r2, [r3, #0]
}
   3484e:	46c0      	nop			; (mov r8, r8)
   34850:	46bd      	mov	sp, r7
   34852:	b002      	add	sp, #8
   34854:	bd80      	pop	{r7, pc}
   34856:	46c0      	nop			; (mov r8, r8)
   34858:	20004584 	.word	0x20004584

0003485c <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   3485c:	b580      	push	{r7, lr}
   3485e:	b082      	sub	sp, #8
   34860:	af00      	add	r7, sp, #0
   34862:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   34864:	687b      	ldr	r3, [r7, #4]
   34866:	2264      	movs	r2, #100	; 0x64
   34868:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   3486a:	687b      	ldr	r3, [r7, #4]
   3486c:	2200      	movs	r2, #0
   3486e:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   34870:	687b      	ldr	r3, [r7, #4]
   34872:	2200      	movs	r2, #0
   34874:	705a      	strb	r2, [r3, #1]
}
   34876:	46c0      	nop			; (mov r8, r8)
   34878:	46bd      	mov	sp, r7
   3487a:	b002      	add	sp, #8
   3487c:	bd80      	pop	{r7, pc}
	...

00034880 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   34880:	b590      	push	{r4, r7, lr}
   34882:	b0b1      	sub	sp, #196	; 0xc4
   34884:	af00      	add	r7, sp, #0
   34886:	6078      	str	r0, [r7, #4]
   34888:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   3488a:	230c      	movs	r3, #12
   3488c:	18fb      	adds	r3, r7, r3
   3488e:	4a2e      	ldr	r2, [pc, #184]	; (34948 <sw_timer_init+0xc8>)
   34890:	ca13      	ldmia	r2!, {r0, r1, r4}
   34892:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   34894:	683b      	ldr	r3, [r7, #0]
   34896:	885b      	ldrh	r3, [r3, #2]
   34898:	001a      	movs	r2, r3
   3489a:	687b      	ldr	r3, [r7, #4]
   3489c:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   3489e:	687b      	ldr	r3, [r7, #4]
   348a0:	3314      	adds	r3, #20
   348a2:	22bc      	movs	r2, #188	; 0xbc
   348a4:	18ba      	adds	r2, r7, r2
   348a6:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   348a8:	683b      	ldr	r3, [r7, #0]
   348aa:	781b      	ldrb	r3, [r3, #0]
   348ac:	001a      	movs	r2, r3
   348ae:	230c      	movs	r3, #12
   348b0:	18fb      	adds	r3, r7, r3
   348b2:	0092      	lsls	r2, r2, #2
   348b4:	58d2      	ldr	r2, [r2, r3]
   348b6:	2318      	movs	r3, #24
   348b8:	18fb      	adds	r3, r7, r3
   348ba:	0011      	movs	r1, r2
   348bc:	0018      	movs	r0, r3
   348be:	4b23      	ldr	r3, [pc, #140]	; (3494c <sw_timer_init+0xcc>)
   348c0:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   348c2:	4b23      	ldr	r3, [pc, #140]	; (34950 <sw_timer_init+0xd0>)
   348c4:	4798      	blx	r3
   348c6:	0004      	movs	r4, r0
   348c8:	683b      	ldr	r3, [r7, #0]
   348ca:	885b      	ldrh	r3, [r3, #2]
   348cc:	001a      	movs	r2, r3
   348ce:	4b21      	ldr	r3, [pc, #132]	; (34954 <sw_timer_init+0xd4>)
   348d0:	0011      	movs	r1, r2
   348d2:	22fa      	movs	r2, #250	; 0xfa
   348d4:	0210      	lsls	r0, r2, #8
   348d6:	4798      	blx	r3
   348d8:	0003      	movs	r3, r0
   348da:	001a      	movs	r2, r3
   348dc:	4b1e      	ldr	r3, [pc, #120]	; (34958 <sw_timer_init+0xd8>)
   348de:	0011      	movs	r1, r2
   348e0:	0020      	movs	r0, r4
   348e2:	4798      	blx	r3
   348e4:	0003      	movs	r3, r0
   348e6:	001a      	movs	r2, r3
   348e8:	2318      	movs	r3, #24
   348ea:	18fb      	adds	r3, r7, r3
   348ec:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   348ee:	2318      	movs	r3, #24
   348f0:	18fb      	adds	r3, r7, r3
   348f2:	2205      	movs	r2, #5
   348f4:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   348f6:	683b      	ldr	r3, [r7, #0]
   348f8:	781b      	ldrb	r3, [r3, #0]
   348fa:	001a      	movs	r2, r3
   348fc:	230c      	movs	r3, #12
   348fe:	18fb      	adds	r3, r7, r3
   34900:	0092      	lsls	r2, r2, #2
   34902:	58d1      	ldr	r1, [r2, r3]
   34904:	2318      	movs	r3, #24
   34906:	18fa      	adds	r2, r7, r3
   34908:	23bc      	movs	r3, #188	; 0xbc
   3490a:	18fb      	adds	r3, r7, r3
   3490c:	681b      	ldr	r3, [r3, #0]
   3490e:	0018      	movs	r0, r3
   34910:	4b12      	ldr	r3, [pc, #72]	; (3495c <sw_timer_init+0xdc>)
   34912:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   34914:	683b      	ldr	r3, [r7, #0]
   34916:	785b      	ldrb	r3, [r3, #1]
   34918:	3308      	adds	r3, #8
   3491a:	b2da      	uxtb	r2, r3
   3491c:	4910      	ldr	r1, [pc, #64]	; (34960 <sw_timer_init+0xe0>)
   3491e:	23bc      	movs	r3, #188	; 0xbc
   34920:	18fb      	adds	r3, r7, r3
   34922:	681b      	ldr	r3, [r3, #0]
   34924:	0018      	movs	r0, r3
   34926:	4b0f      	ldr	r3, [pc, #60]	; (34964 <sw_timer_init+0xe4>)
   34928:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   3492a:	683b      	ldr	r3, [r7, #0]
   3492c:	785b      	ldrb	r3, [r3, #1]
   3492e:	3308      	adds	r3, #8
   34930:	b2da      	uxtb	r2, r3
   34932:	23bc      	movs	r3, #188	; 0xbc
   34934:	18fb      	adds	r3, r7, r3
   34936:	681b      	ldr	r3, [r3, #0]
   34938:	0011      	movs	r1, r2
   3493a:	0018      	movs	r0, r3
   3493c:	4b0a      	ldr	r3, [pc, #40]	; (34968 <sw_timer_init+0xe8>)
   3493e:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   34940:	46c0      	nop			; (mov r8, r8)
   34942:	46bd      	mov	sp, r7
   34944:	b031      	add	sp, #196	; 0xc4
   34946:	bd90      	pop	{r4, r7, pc}
   34948:	0003d090 	.word	0x0003d090
   3494c:	0002c761 	.word	0x0002c761
   34950:	000347e9 	.word	0x000347e9
   34954:	00034f29 	.word	0x00034f29
   34958:	00034e15 	.word	0x00034e15
   3495c:	0002cdbd 	.word	0x0002cdbd
   34960:	0003483d 	.word	0x0003483d
   34964:	0002d1d5 	.word	0x0002d1d5
   34968:	0002d215 	.word	0x0002d215

0003496c <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   3496c:	b580      	push	{r7, lr}
   3496e:	b084      	sub	sp, #16
   34970:	af00      	add	r7, sp, #0
   34972:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   34974:	687b      	ldr	r3, [r7, #4]
   34976:	3314      	adds	r3, #20
   34978:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   3497a:	68fb      	ldr	r3, [r7, #12]
   3497c:	0018      	movs	r0, r3
   3497e:	4b03      	ldr	r3, [pc, #12]	; (3498c <sw_timer_enable+0x20>)
   34980:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   34982:	46c0      	nop			; (mov r8, r8)
   34984:	46bd      	mov	sp, r7
   34986:	b004      	add	sp, #16
   34988:	bd80      	pop	{r7, pc}
   3498a:	46c0      	nop			; (mov r8, r8)
   3498c:	0003480d 	.word	0x0003480d

00034990 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   34990:	b580      	push	{r7, lr}
   34992:	b086      	sub	sp, #24
   34994:	af00      	add	r7, sp, #0
   34996:	60f8      	str	r0, [r7, #12]
   34998:	60b9      	str	r1, [r7, #8]
   3499a:	607a      	str	r2, [r7, #4]
   3499c:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3499e:	2300      	movs	r3, #0
   349a0:	617b      	str	r3, [r7, #20]
   349a2:	e032      	b.n	34a0a <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   349a4:	68f9      	ldr	r1, [r7, #12]
   349a6:	697a      	ldr	r2, [r7, #20]
   349a8:	0013      	movs	r3, r2
   349aa:	009b      	lsls	r3, r3, #2
   349ac:	189b      	adds	r3, r3, r2
   349ae:	009b      	lsls	r3, r3, #2
   349b0:	5c5b      	ldrb	r3, [r3, r1]
   349b2:	07db      	lsls	r3, r3, #31
   349b4:	0fdb      	lsrs	r3, r3, #31
   349b6:	b2db      	uxtb	r3, r3
   349b8:	2b00      	cmp	r3, #0
   349ba:	d123      	bne.n	34a04 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   349bc:	697a      	ldr	r2, [r7, #20]
   349be:	0013      	movs	r3, r2
   349c0:	009b      	lsls	r3, r3, #2
   349c2:	189b      	adds	r3, r3, r2
   349c4:	009b      	lsls	r3, r3, #2
   349c6:	68fa      	ldr	r2, [r7, #12]
   349c8:	18d3      	adds	r3, r2, r3
   349ca:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   349cc:	693b      	ldr	r3, [r7, #16]
   349ce:	68ba      	ldr	r2, [r7, #8]
   349d0:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   349d2:	693b      	ldr	r3, [r7, #16]
   349d4:	781a      	ldrb	r2, [r3, #0]
   349d6:	2102      	movs	r1, #2
   349d8:	438a      	bics	r2, r1
   349da:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   349dc:	693b      	ldr	r3, [r7, #16]
   349de:	687a      	ldr	r2, [r7, #4]
   349e0:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   349e2:	68fb      	ldr	r3, [r7, #12]
   349e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   349e6:	4b0d      	ldr	r3, [pc, #52]	; (34a1c <sw_timer_register_callback+0x8c>)
   349e8:	0011      	movs	r1, r2
   349ea:	6838      	ldr	r0, [r7, #0]
   349ec:	4798      	blx	r3
   349ee:	0003      	movs	r3, r0
   349f0:	001a      	movs	r2, r3
   349f2:	693b      	ldr	r3, [r7, #16]
   349f4:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   349f6:	693b      	ldr	r3, [r7, #16]
   349f8:	781a      	ldrb	r2, [r3, #0]
   349fa:	2101      	movs	r1, #1
   349fc:	430a      	orrs	r2, r1
   349fe:	701a      	strb	r2, [r3, #0]
			return index;
   34a00:	697b      	ldr	r3, [r7, #20]
   34a02:	e007      	b.n	34a14 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   34a04:	697b      	ldr	r3, [r7, #20]
   34a06:	3301      	adds	r3, #1
   34a08:	617b      	str	r3, [r7, #20]
   34a0a:	697b      	ldr	r3, [r7, #20]
   34a0c:	2b00      	cmp	r3, #0
   34a0e:	ddc9      	ble.n	349a4 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   34a10:	2301      	movs	r3, #1
   34a12:	425b      	negs	r3, r3
}
   34a14:	0018      	movs	r0, r3
   34a16:	46bd      	mov	sp, r7
   34a18:	b006      	add	sp, #24
   34a1a:	bd80      	pop	{r7, pc}
   34a1c:	00034e15 	.word	0x00034e15

00034a20 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   34a20:	b580      	push	{r7, lr}
   34a22:	b086      	sub	sp, #24
   34a24:	af00      	add	r7, sp, #0
   34a26:	60f8      	str	r0, [r7, #12]
   34a28:	60b9      	str	r1, [r7, #8]
   34a2a:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   34a2c:	68ba      	ldr	r2, [r7, #8]
   34a2e:	0013      	movs	r3, r2
   34a30:	009b      	lsls	r3, r3, #2
   34a32:	189b      	adds	r3, r3, r2
   34a34:	009b      	lsls	r3, r3, #2
   34a36:	68fa      	ldr	r2, [r7, #12]
   34a38:	18d3      	adds	r3, r2, r3
   34a3a:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   34a3c:	697b      	ldr	r3, [r7, #20]
   34a3e:	781a      	ldrb	r2, [r3, #0]
   34a40:	2102      	movs	r1, #2
   34a42:	430a      	orrs	r2, r1
   34a44:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   34a46:	68fb      	ldr	r3, [r7, #12]
   34a48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   34a4a:	4b07      	ldr	r3, [pc, #28]	; (34a68 <sw_timer_enable_callback+0x48>)
   34a4c:	0011      	movs	r1, r2
   34a4e:	6878      	ldr	r0, [r7, #4]
   34a50:	4798      	blx	r3
   34a52:	0003      	movs	r3, r0
   34a54:	001a      	movs	r2, r3
   34a56:	4b05      	ldr	r3, [pc, #20]	; (34a6c <sw_timer_enable_callback+0x4c>)
   34a58:	681b      	ldr	r3, [r3, #0]
   34a5a:	18d2      	adds	r2, r2, r3
   34a5c:	697b      	ldr	r3, [r7, #20]
   34a5e:	611a      	str	r2, [r3, #16]
}
   34a60:	46c0      	nop			; (mov r8, r8)
   34a62:	46bd      	mov	sp, r7
   34a64:	b006      	add	sp, #24
   34a66:	bd80      	pop	{r7, pc}
   34a68:	00034e15 	.word	0x00034e15
   34a6c:	20004584 	.word	0x20004584

00034a70 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   34a70:	b580      	push	{r7, lr}
   34a72:	b084      	sub	sp, #16
   34a74:	af00      	add	r7, sp, #0
   34a76:	6078      	str	r0, [r7, #4]
   34a78:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   34a7a:	683a      	ldr	r2, [r7, #0]
   34a7c:	0013      	movs	r3, r2
   34a7e:	009b      	lsls	r3, r3, #2
   34a80:	189b      	adds	r3, r3, r2
   34a82:	009b      	lsls	r3, r3, #2
   34a84:	687a      	ldr	r2, [r7, #4]
   34a86:	18d3      	adds	r3, r2, r3
   34a88:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   34a8a:	68fb      	ldr	r3, [r7, #12]
   34a8c:	781a      	ldrb	r2, [r3, #0]
   34a8e:	2102      	movs	r1, #2
   34a90:	438a      	bics	r2, r1
   34a92:	701a      	strb	r2, [r3, #0]
}
   34a94:	46c0      	nop			; (mov r8, r8)
   34a96:	46bd      	mov	sp, r7
   34a98:	b004      	add	sp, #16
   34a9a:	bd80      	pop	{r7, pc}

00034a9c <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   34a9c:	b590      	push	{r4, r7, lr}
   34a9e:	b085      	sub	sp, #20
   34aa0:	af00      	add	r7, sp, #0
   34aa2:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   34aa4:	2300      	movs	r3, #0
   34aa6:	60fb      	str	r3, [r7, #12]
   34aa8:	e053      	b.n	34b52 <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   34aaa:	6879      	ldr	r1, [r7, #4]
   34aac:	68fa      	ldr	r2, [r7, #12]
   34aae:	0013      	movs	r3, r2
   34ab0:	009b      	lsls	r3, r3, #2
   34ab2:	189b      	adds	r3, r3, r2
   34ab4:	009b      	lsls	r3, r3, #2
   34ab6:	5c5b      	ldrb	r3, [r3, r1]
   34ab8:	07db      	lsls	r3, r3, #31
   34aba:	0fdb      	lsrs	r3, r3, #31
   34abc:	b2db      	uxtb	r3, r3
   34abe:	2b00      	cmp	r3, #0
   34ac0:	d044      	beq.n	34b4c <sw_timer_task+0xb0>
   34ac2:	6879      	ldr	r1, [r7, #4]
   34ac4:	68fa      	ldr	r2, [r7, #12]
   34ac6:	0013      	movs	r3, r2
   34ac8:	009b      	lsls	r3, r3, #2
   34aca:	189b      	adds	r3, r3, r2
   34acc:	009b      	lsls	r3, r3, #2
   34ace:	5c5b      	ldrb	r3, [r3, r1]
   34ad0:	079b      	lsls	r3, r3, #30
   34ad2:	0fdb      	lsrs	r3, r3, #31
   34ad4:	b2db      	uxtb	r3, r3
   34ad6:	2b00      	cmp	r3, #0
   34ad8:	d038      	beq.n	34b4c <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   34ada:	68fa      	ldr	r2, [r7, #12]
   34adc:	0013      	movs	r3, r2
   34ade:	009b      	lsls	r3, r3, #2
   34ae0:	189b      	adds	r3, r3, r2
   34ae2:	009b      	lsls	r3, r3, #2
   34ae4:	687a      	ldr	r2, [r7, #4]
   34ae6:	18d3      	adds	r3, r2, r3
   34ae8:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   34aea:	68bb      	ldr	r3, [r7, #8]
   34aec:	691a      	ldr	r2, [r3, #16]
   34aee:	4b1c      	ldr	r3, [pc, #112]	; (34b60 <sw_timer_task+0xc4>)
   34af0:	681b      	ldr	r3, [r3, #0]
   34af2:	1ad3      	subs	r3, r2, r3
   34af4:	d52a      	bpl.n	34b4c <sw_timer_task+0xb0>
   34af6:	68bb      	ldr	r3, [r7, #8]
   34af8:	781b      	ldrb	r3, [r3, #0]
   34afa:	2204      	movs	r2, #4
   34afc:	4013      	ands	r3, r2
   34afe:	b2db      	uxtb	r3, r3
   34b00:	2b00      	cmp	r3, #0
   34b02:	d123      	bne.n	34b4c <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   34b04:	68bb      	ldr	r3, [r7, #8]
   34b06:	781a      	ldrb	r2, [r3, #0]
   34b08:	2104      	movs	r1, #4
   34b0a:	430a      	orrs	r2, r1
   34b0c:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   34b0e:	68bb      	ldr	r3, [r7, #8]
   34b10:	68db      	ldr	r3, [r3, #12]
   34b12:	2b00      	cmp	r3, #0
   34b14:	d007      	beq.n	34b26 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   34b16:	68bb      	ldr	r3, [r7, #8]
   34b18:	68da      	ldr	r2, [r3, #12]
   34b1a:	4b11      	ldr	r3, [pc, #68]	; (34b60 <sw_timer_task+0xc4>)
   34b1c:	681b      	ldr	r3, [r3, #0]
   34b1e:	18d2      	adds	r2, r2, r3
   34b20:	68bb      	ldr	r3, [r7, #8]
   34b22:	611a      	str	r2, [r3, #16]
   34b24:	e004      	b.n	34b30 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   34b26:	68bb      	ldr	r3, [r7, #8]
   34b28:	781a      	ldrb	r2, [r3, #0]
   34b2a:	2102      	movs	r1, #2
   34b2c:	438a      	bics	r2, r1
   34b2e:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   34b30:	68bb      	ldr	r3, [r7, #8]
   34b32:	685c      	ldr	r4, [r3, #4]
   34b34:	68bb      	ldr	r3, [r7, #8]
   34b36:	689a      	ldr	r2, [r3, #8]
   34b38:	68bb      	ldr	r3, [r7, #8]
   34b3a:	68db      	ldr	r3, [r3, #12]
   34b3c:	68f9      	ldr	r1, [r7, #12]
   34b3e:	6878      	ldr	r0, [r7, #4]
   34b40:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   34b42:	68bb      	ldr	r3, [r7, #8]
   34b44:	781a      	ldrb	r2, [r3, #0]
   34b46:	2104      	movs	r1, #4
   34b48:	438a      	bics	r2, r1
   34b4a:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   34b4c:	68fb      	ldr	r3, [r7, #12]
   34b4e:	3301      	adds	r3, #1
   34b50:	60fb      	str	r3, [r7, #12]
   34b52:	68fb      	ldr	r3, [r7, #12]
   34b54:	2b00      	cmp	r3, #0
   34b56:	dda8      	ble.n	34aaa <sw_timer_task+0xe>
			}
		}
	}
}
   34b58:	46c0      	nop			; (mov r8, r8)
   34b5a:	46bd      	mov	sp, r7
   34b5c:	b005      	add	sp, #20
   34b5e:	bd90      	pop	{r4, r7, pc}
   34b60:	20004584 	.word	0x20004584

00034b64 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   34b64:	b580      	push	{r7, lr}
   34b66:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   34b68:	4b06      	ldr	r3, [pc, #24]	; (34b84 <main+0x20>)
   34b6a:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   34b6c:	4b06      	ldr	r3, [pc, #24]	; (34b88 <main+0x24>)
   34b6e:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   34b70:	2001      	movs	r0, #1
   34b72:	4b06      	ldr	r3, [pc, #24]	; (34b8c <main+0x28>)
   34b74:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   34b76:	4b06      	ldr	r3, [pc, #24]	; (34b90 <main+0x2c>)
   34b78:	4798      	blx	r3

    return 0;  // Will not get here
   34b7a:	2300      	movs	r3, #0
}
   34b7c:	0018      	movs	r0, r3
   34b7e:	46bd      	mov	sp, r7
   34b80:	bd80      	pop	{r7, pc}
   34b82:	46c0      	nop			; (mov r8, r8)
   34b84:	0002c655 	.word	0x0002c655
   34b88:	00020175 	.word	0x00020175
   34b8c:	0001a83d 	.word	0x0001a83d
   34b90:	0001e7cd 	.word	0x0001e7cd

00034b94 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   34b94:	b580      	push	{r7, lr}
   34b96:	b082      	sub	sp, #8
   34b98:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   34b9a:	4b22      	ldr	r3, [pc, #136]	; (34c24 <vApplicationDaemonTaskStartupHook+0x90>)
   34b9c:	0018      	movs	r0, r3
   34b9e:	4b22      	ldr	r3, [pc, #136]	; (34c28 <vApplicationDaemonTaskStartupHook+0x94>)
   34ba0:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   34ba2:	4b22      	ldr	r3, [pc, #136]	; (34c2c <vApplicationDaemonTaskStartupHook+0x98>)
   34ba4:	0018      	movs	r0, r3
   34ba6:	4b20      	ldr	r3, [pc, #128]	; (34c28 <vApplicationDaemonTaskStartupHook+0x94>)
   34ba8:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   34baa:	4b21      	ldr	r3, [pc, #132]	; (34c30 <vApplicationDaemonTaskStartupHook+0x9c>)
   34bac:	4798      	blx	r3
   34bae:	1e03      	subs	r3, r0, #0
   34bb0:	d004      	beq.n	34bbc <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   34bb2:	4b20      	ldr	r3, [pc, #128]	; (34c34 <vApplicationDaemonTaskStartupHook+0xa0>)
   34bb4:	0018      	movs	r0, r3
   34bb6:	4b1c      	ldr	r3, [pc, #112]	; (34c28 <vApplicationDaemonTaskStartupHook+0x94>)
   34bb8:	4798      	blx	r3
   34bba:	e003      	b.n	34bc4 <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   34bbc:	4b1e      	ldr	r3, [pc, #120]	; (34c38 <vApplicationDaemonTaskStartupHook+0xa4>)
   34bbe:	0018      	movs	r0, r3
   34bc0:	4b19      	ldr	r3, [pc, #100]	; (34c28 <vApplicationDaemonTaskStartupHook+0x94>)
   34bc2:	4798      	blx	r3
    } else {
        SerialConsoleWriteString("Initialized Seesaw!\r\n");
    }*/

   
    uint8_t whoamI = 0;
   34bc4:	1dfb      	adds	r3, r7, #7
   34bc6:	2200      	movs	r2, #0
   34bc8:	701a      	strb	r2, [r3, #0]
    (lsm6dso_device_id_get(GetImuStruct(), &whoamI));
   34bca:	4b1c      	ldr	r3, [pc, #112]	; (34c3c <vApplicationDaemonTaskStartupHook+0xa8>)
   34bcc:	4798      	blx	r3
   34bce:	0002      	movs	r2, r0
   34bd0:	1dfb      	adds	r3, r7, #7
   34bd2:	0019      	movs	r1, r3
   34bd4:	0010      	movs	r0, r2
   34bd6:	4b1a      	ldr	r3, [pc, #104]	; (34c40 <vApplicationDaemonTaskStartupHook+0xac>)
   34bd8:	4798      	blx	r3

    if (whoamI != LSM6DSO_ID) {
   34bda:	1dfb      	adds	r3, r7, #7
   34bdc:	781b      	ldrb	r3, [r3, #0]
   34bde:	2b6c      	cmp	r3, #108	; 0x6c
   34be0:	d004      	beq.n	34bec <vApplicationDaemonTaskStartupHook+0x58>
        SerialConsoleWriteString("Cannot find IMU!\r\n");
   34be2:	4b18      	ldr	r3, [pc, #96]	; (34c44 <vApplicationDaemonTaskStartupHook+0xb0>)
   34be4:	0018      	movs	r0, r3
   34be6:	4b10      	ldr	r3, [pc, #64]	; (34c28 <vApplicationDaemonTaskStartupHook+0x94>)
   34be8:	4798      	blx	r3
   34bea:	e010      	b.n	34c0e <vApplicationDaemonTaskStartupHook+0x7a>
    } else {
        SerialConsoleWriteString("IMU found!\r\n");
   34bec:	4b16      	ldr	r3, [pc, #88]	; (34c48 <vApplicationDaemonTaskStartupHook+0xb4>)
   34bee:	0018      	movs	r0, r3
   34bf0:	4b0d      	ldr	r3, [pc, #52]	; (34c28 <vApplicationDaemonTaskStartupHook+0x94>)
   34bf2:	4798      	blx	r3
        if (InitImu() == 0) {
   34bf4:	4b15      	ldr	r3, [pc, #84]	; (34c4c <vApplicationDaemonTaskStartupHook+0xb8>)
   34bf6:	4798      	blx	r3
   34bf8:	1e03      	subs	r3, r0, #0
   34bfa:	d104      	bne.n	34c06 <vApplicationDaemonTaskStartupHook+0x72>
            SerialConsoleWriteString("IMU initialized!\r\n");
   34bfc:	4b14      	ldr	r3, [pc, #80]	; (34c50 <vApplicationDaemonTaskStartupHook+0xbc>)
   34bfe:	0018      	movs	r0, r3
   34c00:	4b09      	ldr	r3, [pc, #36]	; (34c28 <vApplicationDaemonTaskStartupHook+0x94>)
   34c02:	4798      	blx	r3
   34c04:	e003      	b.n	34c0e <vApplicationDaemonTaskStartupHook+0x7a>
        } else {
            SerialConsoleWriteString("Could not initialize IMU\r\n");
   34c06:	4b13      	ldr	r3, [pc, #76]	; (34c54 <vApplicationDaemonTaskStartupHook+0xc0>)
   34c08:	0018      	movs	r0, r3
   34c0a:	4b07      	ldr	r3, [pc, #28]	; (34c28 <vApplicationDaemonTaskStartupHook+0x94>)
   34c0c:	4798      	blx	r3
    SerialConsoleWriteString("Initializing distance sensor\r\n");
    InitializeDistanceSensor();
    SerialConsoleWriteString("Distance sensor initialized\r\n");
	*/

    StartTasks();
   34c0e:	4b12      	ldr	r3, [pc, #72]	; (34c58 <vApplicationDaemonTaskStartupHook+0xc4>)
   34c10:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   34c12:	4b12      	ldr	r3, [pc, #72]	; (34c5c <vApplicationDaemonTaskStartupHook+0xc8>)
   34c14:	681b      	ldr	r3, [r3, #0]
   34c16:	0018      	movs	r0, r3
   34c18:	4b11      	ldr	r3, [pc, #68]	; (34c60 <vApplicationDaemonTaskStartupHook+0xcc>)
   34c1a:	4798      	blx	r3
}
   34c1c:	46c0      	nop			; (mov r8, r8)
   34c1e:	46bd      	mov	sp, r7
   34c20:	b002      	add	sp, #8
   34c22:	bd80      	pop	{r7, pc}
   34c24:	0003d09c 	.word	0x0003d09c
   34c28:	000201e5 	.word	0x000201e5
   34c2c:	0003d0c0 	.word	0x0003d0c0
   34c30:	0001581d 	.word	0x0001581d
   34c34:	0003d0d8 	.word	0x0003d0d8
   34c38:	0003d0fc 	.word	0x0003d0fc
   34c3c:	00016a51 	.word	0x00016a51
   34c40:	00016655 	.word	0x00016655
   34c44:	0003d118 	.word	0x0003d118
   34c48:	0003d12c 	.word	0x0003d12c
   34c4c:	00016a61 	.word	0x00016a61
   34c50:	0003d13c 	.word	0x0003d13c
   34c54:	0003d150 	.word	0x0003d150
   34c58:	00034c65 	.word	0x00034c65
   34c5c:	2000458c 	.word	0x2000458c
   34c60:	0001e671 	.word	0x0001e671

00034c64 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   34c64:	b590      	push	{r4, r7, lr}
   34c66:	b083      	sub	sp, #12
   34c68:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   34c6a:	4b44      	ldr	r3, [pc, #272]	; (34d7c <StartTasks+0x118>)
   34c6c:	4798      	blx	r3
   34c6e:	0003      	movs	r3, r0
   34c70:	4a43      	ldr	r2, [pc, #268]	; (34d80 <StartTasks+0x11c>)
   34c72:	4844      	ldr	r0, [pc, #272]	; (34d84 <StartTasks+0x120>)
   34c74:	2140      	movs	r1, #64	; 0x40
   34c76:	4c44      	ldr	r4, [pc, #272]	; (34d88 <StartTasks+0x124>)
   34c78:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   34c7a:	4b42      	ldr	r3, [pc, #264]	; (34d84 <StartTasks+0x120>)
   34c7c:	0018      	movs	r0, r3
   34c7e:	4b43      	ldr	r3, [pc, #268]	; (34d8c <StartTasks+0x128>)
   34c80:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   34c82:	23c8      	movs	r3, #200	; 0xc8
   34c84:	005a      	lsls	r2, r3, #1
   34c86:	4942      	ldr	r1, [pc, #264]	; (34d90 <StartTasks+0x12c>)
   34c88:	4842      	ldr	r0, [pc, #264]	; (34d94 <StartTasks+0x130>)
   34c8a:	4b43      	ldr	r3, [pc, #268]	; (34d98 <StartTasks+0x134>)
   34c8c:	9301      	str	r3, [sp, #4]
   34c8e:	2304      	movs	r3, #4
   34c90:	9300      	str	r3, [sp, #0]
   34c92:	2300      	movs	r3, #0
   34c94:	4c41      	ldr	r4, [pc, #260]	; (34d9c <StartTasks+0x138>)
   34c96:	47a0      	blx	r4
   34c98:	0003      	movs	r3, r0
   34c9a:	2b01      	cmp	r3, #1
   34c9c:	d003      	beq.n	34ca6 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   34c9e:	4b40      	ldr	r3, [pc, #256]	; (34da0 <StartTasks+0x13c>)
   34ca0:	0018      	movs	r0, r3
   34ca2:	4b3a      	ldr	r3, [pc, #232]	; (34d8c <StartTasks+0x128>)
   34ca4:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   34ca6:	4b35      	ldr	r3, [pc, #212]	; (34d7c <StartTasks+0x118>)
   34ca8:	4798      	blx	r3
   34caa:	0003      	movs	r3, r0
   34cac:	4a3d      	ldr	r2, [pc, #244]	; (34da4 <StartTasks+0x140>)
   34cae:	4835      	ldr	r0, [pc, #212]	; (34d84 <StartTasks+0x120>)
   34cb0:	2140      	movs	r1, #64	; 0x40
   34cb2:	4c35      	ldr	r4, [pc, #212]	; (34d88 <StartTasks+0x124>)
   34cb4:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   34cb6:	4b33      	ldr	r3, [pc, #204]	; (34d84 <StartTasks+0x120>)
   34cb8:	0018      	movs	r0, r3
   34cba:	4b34      	ldr	r3, [pc, #208]	; (34d8c <StartTasks+0x128>)
   34cbc:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   34cbe:	23fa      	movs	r3, #250	; 0xfa
   34cc0:	009a      	lsls	r2, r3, #2
   34cc2:	4939      	ldr	r1, [pc, #228]	; (34da8 <StartTasks+0x144>)
   34cc4:	4839      	ldr	r0, [pc, #228]	; (34dac <StartTasks+0x148>)
   34cc6:	4b3a      	ldr	r3, [pc, #232]	; (34db0 <StartTasks+0x14c>)
   34cc8:	9301      	str	r3, [sp, #4]
   34cca:	2303      	movs	r3, #3
   34ccc:	9300      	str	r3, [sp, #0]
   34cce:	2300      	movs	r3, #0
   34cd0:	4c32      	ldr	r4, [pc, #200]	; (34d9c <StartTasks+0x138>)
   34cd2:	47a0      	blx	r4
   34cd4:	0003      	movs	r3, r0
   34cd6:	2b01      	cmp	r3, #1
   34cd8:	d003      	beq.n	34ce2 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   34cda:	4b36      	ldr	r3, [pc, #216]	; (34db4 <StartTasks+0x150>)
   34cdc:	0018      	movs	r0, r3
   34cde:	4b2b      	ldr	r3, [pc, #172]	; (34d8c <StartTasks+0x128>)
   34ce0:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   34ce2:	4b26      	ldr	r3, [pc, #152]	; (34d7c <StartTasks+0x118>)
   34ce4:	4798      	blx	r3
   34ce6:	0003      	movs	r3, r0
   34ce8:	4a33      	ldr	r2, [pc, #204]	; (34db8 <StartTasks+0x154>)
   34cea:	4826      	ldr	r0, [pc, #152]	; (34d84 <StartTasks+0x120>)
   34cec:	2140      	movs	r1, #64	; 0x40
   34cee:	4c26      	ldr	r4, [pc, #152]	; (34d88 <StartTasks+0x124>)
   34cf0:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   34cf2:	4b24      	ldr	r3, [pc, #144]	; (34d84 <StartTasks+0x120>)
   34cf4:	0018      	movs	r0, r3
   34cf6:	4b25      	ldr	r3, [pc, #148]	; (34d8c <StartTasks+0x128>)
   34cf8:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   34cfa:	23c8      	movs	r3, #200	; 0xc8
   34cfc:	005a      	lsls	r2, r3, #1
   34cfe:	492f      	ldr	r1, [pc, #188]	; (34dbc <StartTasks+0x158>)
   34d00:	482f      	ldr	r0, [pc, #188]	; (34dc0 <StartTasks+0x15c>)
   34d02:	4b30      	ldr	r3, [pc, #192]	; (34dc4 <StartTasks+0x160>)
   34d04:	9301      	str	r3, [sp, #4]
   34d06:	2304      	movs	r3, #4
   34d08:	9300      	str	r3, [sp, #0]
   34d0a:	2300      	movs	r3, #0
   34d0c:	4c23      	ldr	r4, [pc, #140]	; (34d9c <StartTasks+0x138>)
   34d0e:	47a0      	blx	r4
   34d10:	0003      	movs	r3, r0
   34d12:	2b01      	cmp	r3, #1
   34d14:	d003      	beq.n	34d1e <StartTasks+0xba>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   34d16:	4b2c      	ldr	r3, [pc, #176]	; (34dc8 <StartTasks+0x164>)
   34d18:	0018      	movs	r0, r3
   34d1a:	4b1c      	ldr	r3, [pc, #112]	; (34d8c <StartTasks+0x128>)
   34d1c:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   34d1e:	4b17      	ldr	r3, [pc, #92]	; (34d7c <StartTasks+0x118>)
   34d20:	4798      	blx	r3
   34d22:	0003      	movs	r3, r0
   34d24:	4a29      	ldr	r2, [pc, #164]	; (34dcc <StartTasks+0x168>)
   34d26:	4817      	ldr	r0, [pc, #92]	; (34d84 <StartTasks+0x120>)
   34d28:	2140      	movs	r1, #64	; 0x40
   34d2a:	4c17      	ldr	r4, [pc, #92]	; (34d88 <StartTasks+0x124>)
   34d2c:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   34d2e:	4b15      	ldr	r3, [pc, #84]	; (34d84 <StartTasks+0x120>)
   34d30:	0018      	movs	r0, r3
   34d32:	4b16      	ldr	r3, [pc, #88]	; (34d8c <StartTasks+0x128>)
   34d34:	4798      	blx	r3

    if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   34d36:	2380      	movs	r3, #128	; 0x80
   34d38:	005a      	lsls	r2, r3, #1
   34d3a:	4925      	ldr	r1, [pc, #148]	; (34dd0 <StartTasks+0x16c>)
   34d3c:	4825      	ldr	r0, [pc, #148]	; (34dd4 <StartTasks+0x170>)
   34d3e:	4b26      	ldr	r3, [pc, #152]	; (34dd8 <StartTasks+0x174>)
   34d40:	9301      	str	r3, [sp, #4]
   34d42:	2304      	movs	r3, #4
   34d44:	9300      	str	r3, [sp, #0]
   34d46:	2300      	movs	r3, #0
   34d48:	4c14      	ldr	r4, [pc, #80]	; (34d9c <StartTasks+0x138>)
   34d4a:	47a0      	blx	r4
   34d4c:	0003      	movs	r3, r0
   34d4e:	2b01      	cmp	r3, #1
   34d50:	d003      	beq.n	34d5a <StartTasks+0xf6>
        SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   34d52:	4b22      	ldr	r3, [pc, #136]	; (34ddc <StartTasks+0x178>)
   34d54:	0018      	movs	r0, r3
   34d56:	4b0d      	ldr	r3, [pc, #52]	; (34d8c <StartTasks+0x128>)
   34d58:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   34d5a:	4b08      	ldr	r3, [pc, #32]	; (34d7c <StartTasks+0x118>)
   34d5c:	4798      	blx	r3
   34d5e:	0003      	movs	r3, r0
   34d60:	4a1f      	ldr	r2, [pc, #124]	; (34de0 <StartTasks+0x17c>)
   34d62:	4808      	ldr	r0, [pc, #32]	; (34d84 <StartTasks+0x120>)
   34d64:	2140      	movs	r1, #64	; 0x40
   34d66:	4c08      	ldr	r4, [pc, #32]	; (34d88 <StartTasks+0x124>)
   34d68:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   34d6a:	4b06      	ldr	r3, [pc, #24]	; (34d84 <StartTasks+0x120>)
   34d6c:	0018      	movs	r0, r3
   34d6e:	4b07      	ldr	r3, [pc, #28]	; (34d8c <StartTasks+0x128>)
   34d70:	4798      	blx	r3
}
   34d72:	46c0      	nop			; (mov r8, r8)
   34d74:	46bd      	mov	sp, r7
   34d76:	b001      	add	sp, #4
   34d78:	bd90      	pop	{r4, r7, pc}
   34d7a:	46c0      	nop			; (mov r8, r8)
   34d7c:	0001c7b1 	.word	0x0001c7b1
   34d80:	0003d16c 	.word	0x0003d16c
   34d84:	20005ac8 	.word	0x20005ac8
   34d88:	00037ba5 	.word	0x00037ba5
   34d8c:	000201e5 	.word	0x000201e5
   34d90:	0003d190 	.word	0x0003d190
   34d94:	00014c3d 	.word	0x00014c3d
   34d98:	20004588 	.word	0x20004588
   34d9c:	0001e1f5 	.word	0x0001e1f5
   34da0:	0003d19c 	.word	0x0003d19c
   34da4:	0003d1c8 	.word	0x0003d1c8
   34da8:	0003d1e8 	.word	0x0003d1e8
   34dac:	000194bd 	.word	0x000194bd
   34db0:	20004590 	.word	0x20004590
   34db4:	0003d1f4 	.word	0x0003d1f4
   34db8:	0003d220 	.word	0x0003d220
   34dbc:	0003d240 	.word	0x0003d240
   34dc0:	00017d8d 	.word	0x00017d8d
   34dc4:	20004594 	.word	0x20004594
   34dc8:	0003d248 	.word	0x0003d248
   34dcc:	0003d274 	.word	0x0003d274
   34dd0:	0003d298 	.word	0x0003d298
   34dd4:	0001533d 	.word	0x0001533d
   34dd8:	20004598 	.word	0x20004598
   34ddc:	0003d2a8 	.word	0x0003d2a8
   34de0:	0003d2d8 	.word	0x0003d2d8

00034de4 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   34de4:	b580      	push	{r7, lr}
   34de6:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   34de8:	4b02      	ldr	r3, [pc, #8]	; (34df4 <vApplicationMallocFailedHook+0x10>)
   34dea:	0018      	movs	r0, r3
   34dec:	4b02      	ldr	r3, [pc, #8]	; (34df8 <vApplicationMallocFailedHook+0x14>)
   34dee:	4798      	blx	r3
    while (1)
   34df0:	e7fe      	b.n	34df0 <vApplicationMallocFailedHook+0xc>
   34df2:	46c0      	nop			; (mov r8, r8)
   34df4:	0003d300 	.word	0x0003d300
   34df8:	000201e5 	.word	0x000201e5

00034dfc <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   34dfc:	b580      	push	{r7, lr}
   34dfe:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   34e00:	4b02      	ldr	r3, [pc, #8]	; (34e0c <vApplicationStackOverflowHook+0x10>)
   34e02:	0018      	movs	r0, r3
   34e04:	4b02      	ldr	r3, [pc, #8]	; (34e10 <vApplicationStackOverflowHook+0x14>)
   34e06:	4798      	blx	r3
    while (1)
   34e08:	e7fe      	b.n	34e08 <vApplicationStackOverflowHook+0xc>
   34e0a:	46c0      	nop			; (mov r8, r8)
   34e0c:	0003d32c 	.word	0x0003d32c
   34e10:	000201e5 	.word	0x000201e5

00034e14 <__udivsi3>:
   34e14:	2200      	movs	r2, #0
   34e16:	0843      	lsrs	r3, r0, #1
   34e18:	428b      	cmp	r3, r1
   34e1a:	d374      	bcc.n	34f06 <__udivsi3+0xf2>
   34e1c:	0903      	lsrs	r3, r0, #4
   34e1e:	428b      	cmp	r3, r1
   34e20:	d35f      	bcc.n	34ee2 <__udivsi3+0xce>
   34e22:	0a03      	lsrs	r3, r0, #8
   34e24:	428b      	cmp	r3, r1
   34e26:	d344      	bcc.n	34eb2 <__udivsi3+0x9e>
   34e28:	0b03      	lsrs	r3, r0, #12
   34e2a:	428b      	cmp	r3, r1
   34e2c:	d328      	bcc.n	34e80 <__udivsi3+0x6c>
   34e2e:	0c03      	lsrs	r3, r0, #16
   34e30:	428b      	cmp	r3, r1
   34e32:	d30d      	bcc.n	34e50 <__udivsi3+0x3c>
   34e34:	22ff      	movs	r2, #255	; 0xff
   34e36:	0209      	lsls	r1, r1, #8
   34e38:	ba12      	rev	r2, r2
   34e3a:	0c03      	lsrs	r3, r0, #16
   34e3c:	428b      	cmp	r3, r1
   34e3e:	d302      	bcc.n	34e46 <__udivsi3+0x32>
   34e40:	1212      	asrs	r2, r2, #8
   34e42:	0209      	lsls	r1, r1, #8
   34e44:	d065      	beq.n	34f12 <__udivsi3+0xfe>
   34e46:	0b03      	lsrs	r3, r0, #12
   34e48:	428b      	cmp	r3, r1
   34e4a:	d319      	bcc.n	34e80 <__udivsi3+0x6c>
   34e4c:	e000      	b.n	34e50 <__udivsi3+0x3c>
   34e4e:	0a09      	lsrs	r1, r1, #8
   34e50:	0bc3      	lsrs	r3, r0, #15
   34e52:	428b      	cmp	r3, r1
   34e54:	d301      	bcc.n	34e5a <__udivsi3+0x46>
   34e56:	03cb      	lsls	r3, r1, #15
   34e58:	1ac0      	subs	r0, r0, r3
   34e5a:	4152      	adcs	r2, r2
   34e5c:	0b83      	lsrs	r3, r0, #14
   34e5e:	428b      	cmp	r3, r1
   34e60:	d301      	bcc.n	34e66 <__udivsi3+0x52>
   34e62:	038b      	lsls	r3, r1, #14
   34e64:	1ac0      	subs	r0, r0, r3
   34e66:	4152      	adcs	r2, r2
   34e68:	0b43      	lsrs	r3, r0, #13
   34e6a:	428b      	cmp	r3, r1
   34e6c:	d301      	bcc.n	34e72 <__udivsi3+0x5e>
   34e6e:	034b      	lsls	r3, r1, #13
   34e70:	1ac0      	subs	r0, r0, r3
   34e72:	4152      	adcs	r2, r2
   34e74:	0b03      	lsrs	r3, r0, #12
   34e76:	428b      	cmp	r3, r1
   34e78:	d301      	bcc.n	34e7e <__udivsi3+0x6a>
   34e7a:	030b      	lsls	r3, r1, #12
   34e7c:	1ac0      	subs	r0, r0, r3
   34e7e:	4152      	adcs	r2, r2
   34e80:	0ac3      	lsrs	r3, r0, #11
   34e82:	428b      	cmp	r3, r1
   34e84:	d301      	bcc.n	34e8a <__udivsi3+0x76>
   34e86:	02cb      	lsls	r3, r1, #11
   34e88:	1ac0      	subs	r0, r0, r3
   34e8a:	4152      	adcs	r2, r2
   34e8c:	0a83      	lsrs	r3, r0, #10
   34e8e:	428b      	cmp	r3, r1
   34e90:	d301      	bcc.n	34e96 <__udivsi3+0x82>
   34e92:	028b      	lsls	r3, r1, #10
   34e94:	1ac0      	subs	r0, r0, r3
   34e96:	4152      	adcs	r2, r2
   34e98:	0a43      	lsrs	r3, r0, #9
   34e9a:	428b      	cmp	r3, r1
   34e9c:	d301      	bcc.n	34ea2 <__udivsi3+0x8e>
   34e9e:	024b      	lsls	r3, r1, #9
   34ea0:	1ac0      	subs	r0, r0, r3
   34ea2:	4152      	adcs	r2, r2
   34ea4:	0a03      	lsrs	r3, r0, #8
   34ea6:	428b      	cmp	r3, r1
   34ea8:	d301      	bcc.n	34eae <__udivsi3+0x9a>
   34eaa:	020b      	lsls	r3, r1, #8
   34eac:	1ac0      	subs	r0, r0, r3
   34eae:	4152      	adcs	r2, r2
   34eb0:	d2cd      	bcs.n	34e4e <__udivsi3+0x3a>
   34eb2:	09c3      	lsrs	r3, r0, #7
   34eb4:	428b      	cmp	r3, r1
   34eb6:	d301      	bcc.n	34ebc <__udivsi3+0xa8>
   34eb8:	01cb      	lsls	r3, r1, #7
   34eba:	1ac0      	subs	r0, r0, r3
   34ebc:	4152      	adcs	r2, r2
   34ebe:	0983      	lsrs	r3, r0, #6
   34ec0:	428b      	cmp	r3, r1
   34ec2:	d301      	bcc.n	34ec8 <__udivsi3+0xb4>
   34ec4:	018b      	lsls	r3, r1, #6
   34ec6:	1ac0      	subs	r0, r0, r3
   34ec8:	4152      	adcs	r2, r2
   34eca:	0943      	lsrs	r3, r0, #5
   34ecc:	428b      	cmp	r3, r1
   34ece:	d301      	bcc.n	34ed4 <__udivsi3+0xc0>
   34ed0:	014b      	lsls	r3, r1, #5
   34ed2:	1ac0      	subs	r0, r0, r3
   34ed4:	4152      	adcs	r2, r2
   34ed6:	0903      	lsrs	r3, r0, #4
   34ed8:	428b      	cmp	r3, r1
   34eda:	d301      	bcc.n	34ee0 <__udivsi3+0xcc>
   34edc:	010b      	lsls	r3, r1, #4
   34ede:	1ac0      	subs	r0, r0, r3
   34ee0:	4152      	adcs	r2, r2
   34ee2:	08c3      	lsrs	r3, r0, #3
   34ee4:	428b      	cmp	r3, r1
   34ee6:	d301      	bcc.n	34eec <__udivsi3+0xd8>
   34ee8:	00cb      	lsls	r3, r1, #3
   34eea:	1ac0      	subs	r0, r0, r3
   34eec:	4152      	adcs	r2, r2
   34eee:	0883      	lsrs	r3, r0, #2
   34ef0:	428b      	cmp	r3, r1
   34ef2:	d301      	bcc.n	34ef8 <__udivsi3+0xe4>
   34ef4:	008b      	lsls	r3, r1, #2
   34ef6:	1ac0      	subs	r0, r0, r3
   34ef8:	4152      	adcs	r2, r2
   34efa:	0843      	lsrs	r3, r0, #1
   34efc:	428b      	cmp	r3, r1
   34efe:	d301      	bcc.n	34f04 <__udivsi3+0xf0>
   34f00:	004b      	lsls	r3, r1, #1
   34f02:	1ac0      	subs	r0, r0, r3
   34f04:	4152      	adcs	r2, r2
   34f06:	1a41      	subs	r1, r0, r1
   34f08:	d200      	bcs.n	34f0c <__udivsi3+0xf8>
   34f0a:	4601      	mov	r1, r0
   34f0c:	4152      	adcs	r2, r2
   34f0e:	4610      	mov	r0, r2
   34f10:	4770      	bx	lr
   34f12:	e7ff      	b.n	34f14 <__udivsi3+0x100>
   34f14:	b501      	push	{r0, lr}
   34f16:	2000      	movs	r0, #0
   34f18:	f000 f8f0 	bl	350fc <__aeabi_idiv0>
   34f1c:	bd02      	pop	{r1, pc}
   34f1e:	46c0      	nop			; (mov r8, r8)

00034f20 <__aeabi_uidivmod>:
   34f20:	2900      	cmp	r1, #0
   34f22:	d0f7      	beq.n	34f14 <__udivsi3+0x100>
   34f24:	e776      	b.n	34e14 <__udivsi3>
   34f26:	4770      	bx	lr

00034f28 <__divsi3>:
   34f28:	4603      	mov	r3, r0
   34f2a:	430b      	orrs	r3, r1
   34f2c:	d47f      	bmi.n	3502e <__divsi3+0x106>
   34f2e:	2200      	movs	r2, #0
   34f30:	0843      	lsrs	r3, r0, #1
   34f32:	428b      	cmp	r3, r1
   34f34:	d374      	bcc.n	35020 <__divsi3+0xf8>
   34f36:	0903      	lsrs	r3, r0, #4
   34f38:	428b      	cmp	r3, r1
   34f3a:	d35f      	bcc.n	34ffc <__divsi3+0xd4>
   34f3c:	0a03      	lsrs	r3, r0, #8
   34f3e:	428b      	cmp	r3, r1
   34f40:	d344      	bcc.n	34fcc <__divsi3+0xa4>
   34f42:	0b03      	lsrs	r3, r0, #12
   34f44:	428b      	cmp	r3, r1
   34f46:	d328      	bcc.n	34f9a <__divsi3+0x72>
   34f48:	0c03      	lsrs	r3, r0, #16
   34f4a:	428b      	cmp	r3, r1
   34f4c:	d30d      	bcc.n	34f6a <__divsi3+0x42>
   34f4e:	22ff      	movs	r2, #255	; 0xff
   34f50:	0209      	lsls	r1, r1, #8
   34f52:	ba12      	rev	r2, r2
   34f54:	0c03      	lsrs	r3, r0, #16
   34f56:	428b      	cmp	r3, r1
   34f58:	d302      	bcc.n	34f60 <__divsi3+0x38>
   34f5a:	1212      	asrs	r2, r2, #8
   34f5c:	0209      	lsls	r1, r1, #8
   34f5e:	d065      	beq.n	3502c <__divsi3+0x104>
   34f60:	0b03      	lsrs	r3, r0, #12
   34f62:	428b      	cmp	r3, r1
   34f64:	d319      	bcc.n	34f9a <__divsi3+0x72>
   34f66:	e000      	b.n	34f6a <__divsi3+0x42>
   34f68:	0a09      	lsrs	r1, r1, #8
   34f6a:	0bc3      	lsrs	r3, r0, #15
   34f6c:	428b      	cmp	r3, r1
   34f6e:	d301      	bcc.n	34f74 <__divsi3+0x4c>
   34f70:	03cb      	lsls	r3, r1, #15
   34f72:	1ac0      	subs	r0, r0, r3
   34f74:	4152      	adcs	r2, r2
   34f76:	0b83      	lsrs	r3, r0, #14
   34f78:	428b      	cmp	r3, r1
   34f7a:	d301      	bcc.n	34f80 <__divsi3+0x58>
   34f7c:	038b      	lsls	r3, r1, #14
   34f7e:	1ac0      	subs	r0, r0, r3
   34f80:	4152      	adcs	r2, r2
   34f82:	0b43      	lsrs	r3, r0, #13
   34f84:	428b      	cmp	r3, r1
   34f86:	d301      	bcc.n	34f8c <__divsi3+0x64>
   34f88:	034b      	lsls	r3, r1, #13
   34f8a:	1ac0      	subs	r0, r0, r3
   34f8c:	4152      	adcs	r2, r2
   34f8e:	0b03      	lsrs	r3, r0, #12
   34f90:	428b      	cmp	r3, r1
   34f92:	d301      	bcc.n	34f98 <__divsi3+0x70>
   34f94:	030b      	lsls	r3, r1, #12
   34f96:	1ac0      	subs	r0, r0, r3
   34f98:	4152      	adcs	r2, r2
   34f9a:	0ac3      	lsrs	r3, r0, #11
   34f9c:	428b      	cmp	r3, r1
   34f9e:	d301      	bcc.n	34fa4 <__divsi3+0x7c>
   34fa0:	02cb      	lsls	r3, r1, #11
   34fa2:	1ac0      	subs	r0, r0, r3
   34fa4:	4152      	adcs	r2, r2
   34fa6:	0a83      	lsrs	r3, r0, #10
   34fa8:	428b      	cmp	r3, r1
   34faa:	d301      	bcc.n	34fb0 <__divsi3+0x88>
   34fac:	028b      	lsls	r3, r1, #10
   34fae:	1ac0      	subs	r0, r0, r3
   34fb0:	4152      	adcs	r2, r2
   34fb2:	0a43      	lsrs	r3, r0, #9
   34fb4:	428b      	cmp	r3, r1
   34fb6:	d301      	bcc.n	34fbc <__divsi3+0x94>
   34fb8:	024b      	lsls	r3, r1, #9
   34fba:	1ac0      	subs	r0, r0, r3
   34fbc:	4152      	adcs	r2, r2
   34fbe:	0a03      	lsrs	r3, r0, #8
   34fc0:	428b      	cmp	r3, r1
   34fc2:	d301      	bcc.n	34fc8 <__divsi3+0xa0>
   34fc4:	020b      	lsls	r3, r1, #8
   34fc6:	1ac0      	subs	r0, r0, r3
   34fc8:	4152      	adcs	r2, r2
   34fca:	d2cd      	bcs.n	34f68 <__divsi3+0x40>
   34fcc:	09c3      	lsrs	r3, r0, #7
   34fce:	428b      	cmp	r3, r1
   34fd0:	d301      	bcc.n	34fd6 <__divsi3+0xae>
   34fd2:	01cb      	lsls	r3, r1, #7
   34fd4:	1ac0      	subs	r0, r0, r3
   34fd6:	4152      	adcs	r2, r2
   34fd8:	0983      	lsrs	r3, r0, #6
   34fda:	428b      	cmp	r3, r1
   34fdc:	d301      	bcc.n	34fe2 <__divsi3+0xba>
   34fde:	018b      	lsls	r3, r1, #6
   34fe0:	1ac0      	subs	r0, r0, r3
   34fe2:	4152      	adcs	r2, r2
   34fe4:	0943      	lsrs	r3, r0, #5
   34fe6:	428b      	cmp	r3, r1
   34fe8:	d301      	bcc.n	34fee <__divsi3+0xc6>
   34fea:	014b      	lsls	r3, r1, #5
   34fec:	1ac0      	subs	r0, r0, r3
   34fee:	4152      	adcs	r2, r2
   34ff0:	0903      	lsrs	r3, r0, #4
   34ff2:	428b      	cmp	r3, r1
   34ff4:	d301      	bcc.n	34ffa <__divsi3+0xd2>
   34ff6:	010b      	lsls	r3, r1, #4
   34ff8:	1ac0      	subs	r0, r0, r3
   34ffa:	4152      	adcs	r2, r2
   34ffc:	08c3      	lsrs	r3, r0, #3
   34ffe:	428b      	cmp	r3, r1
   35000:	d301      	bcc.n	35006 <__divsi3+0xde>
   35002:	00cb      	lsls	r3, r1, #3
   35004:	1ac0      	subs	r0, r0, r3
   35006:	4152      	adcs	r2, r2
   35008:	0883      	lsrs	r3, r0, #2
   3500a:	428b      	cmp	r3, r1
   3500c:	d301      	bcc.n	35012 <__divsi3+0xea>
   3500e:	008b      	lsls	r3, r1, #2
   35010:	1ac0      	subs	r0, r0, r3
   35012:	4152      	adcs	r2, r2
   35014:	0843      	lsrs	r3, r0, #1
   35016:	428b      	cmp	r3, r1
   35018:	d301      	bcc.n	3501e <__divsi3+0xf6>
   3501a:	004b      	lsls	r3, r1, #1
   3501c:	1ac0      	subs	r0, r0, r3
   3501e:	4152      	adcs	r2, r2
   35020:	1a41      	subs	r1, r0, r1
   35022:	d200      	bcs.n	35026 <__divsi3+0xfe>
   35024:	4601      	mov	r1, r0
   35026:	4152      	adcs	r2, r2
   35028:	4610      	mov	r0, r2
   3502a:	4770      	bx	lr
   3502c:	e05d      	b.n	350ea <__divsi3+0x1c2>
   3502e:	0fca      	lsrs	r2, r1, #31
   35030:	d000      	beq.n	35034 <__divsi3+0x10c>
   35032:	4249      	negs	r1, r1
   35034:	1003      	asrs	r3, r0, #32
   35036:	d300      	bcc.n	3503a <__divsi3+0x112>
   35038:	4240      	negs	r0, r0
   3503a:	4053      	eors	r3, r2
   3503c:	2200      	movs	r2, #0
   3503e:	469c      	mov	ip, r3
   35040:	0903      	lsrs	r3, r0, #4
   35042:	428b      	cmp	r3, r1
   35044:	d32d      	bcc.n	350a2 <__divsi3+0x17a>
   35046:	0a03      	lsrs	r3, r0, #8
   35048:	428b      	cmp	r3, r1
   3504a:	d312      	bcc.n	35072 <__divsi3+0x14a>
   3504c:	22fc      	movs	r2, #252	; 0xfc
   3504e:	0189      	lsls	r1, r1, #6
   35050:	ba12      	rev	r2, r2
   35052:	0a03      	lsrs	r3, r0, #8
   35054:	428b      	cmp	r3, r1
   35056:	d30c      	bcc.n	35072 <__divsi3+0x14a>
   35058:	0189      	lsls	r1, r1, #6
   3505a:	1192      	asrs	r2, r2, #6
   3505c:	428b      	cmp	r3, r1
   3505e:	d308      	bcc.n	35072 <__divsi3+0x14a>
   35060:	0189      	lsls	r1, r1, #6
   35062:	1192      	asrs	r2, r2, #6
   35064:	428b      	cmp	r3, r1
   35066:	d304      	bcc.n	35072 <__divsi3+0x14a>
   35068:	0189      	lsls	r1, r1, #6
   3506a:	d03a      	beq.n	350e2 <__divsi3+0x1ba>
   3506c:	1192      	asrs	r2, r2, #6
   3506e:	e000      	b.n	35072 <__divsi3+0x14a>
   35070:	0989      	lsrs	r1, r1, #6
   35072:	09c3      	lsrs	r3, r0, #7
   35074:	428b      	cmp	r3, r1
   35076:	d301      	bcc.n	3507c <__divsi3+0x154>
   35078:	01cb      	lsls	r3, r1, #7
   3507a:	1ac0      	subs	r0, r0, r3
   3507c:	4152      	adcs	r2, r2
   3507e:	0983      	lsrs	r3, r0, #6
   35080:	428b      	cmp	r3, r1
   35082:	d301      	bcc.n	35088 <__divsi3+0x160>
   35084:	018b      	lsls	r3, r1, #6
   35086:	1ac0      	subs	r0, r0, r3
   35088:	4152      	adcs	r2, r2
   3508a:	0943      	lsrs	r3, r0, #5
   3508c:	428b      	cmp	r3, r1
   3508e:	d301      	bcc.n	35094 <__divsi3+0x16c>
   35090:	014b      	lsls	r3, r1, #5
   35092:	1ac0      	subs	r0, r0, r3
   35094:	4152      	adcs	r2, r2
   35096:	0903      	lsrs	r3, r0, #4
   35098:	428b      	cmp	r3, r1
   3509a:	d301      	bcc.n	350a0 <__divsi3+0x178>
   3509c:	010b      	lsls	r3, r1, #4
   3509e:	1ac0      	subs	r0, r0, r3
   350a0:	4152      	adcs	r2, r2
   350a2:	08c3      	lsrs	r3, r0, #3
   350a4:	428b      	cmp	r3, r1
   350a6:	d301      	bcc.n	350ac <__divsi3+0x184>
   350a8:	00cb      	lsls	r3, r1, #3
   350aa:	1ac0      	subs	r0, r0, r3
   350ac:	4152      	adcs	r2, r2
   350ae:	0883      	lsrs	r3, r0, #2
   350b0:	428b      	cmp	r3, r1
   350b2:	d301      	bcc.n	350b8 <__divsi3+0x190>
   350b4:	008b      	lsls	r3, r1, #2
   350b6:	1ac0      	subs	r0, r0, r3
   350b8:	4152      	adcs	r2, r2
   350ba:	d2d9      	bcs.n	35070 <__divsi3+0x148>
   350bc:	0843      	lsrs	r3, r0, #1
   350be:	428b      	cmp	r3, r1
   350c0:	d301      	bcc.n	350c6 <__divsi3+0x19e>
   350c2:	004b      	lsls	r3, r1, #1
   350c4:	1ac0      	subs	r0, r0, r3
   350c6:	4152      	adcs	r2, r2
   350c8:	1a41      	subs	r1, r0, r1
   350ca:	d200      	bcs.n	350ce <__divsi3+0x1a6>
   350cc:	4601      	mov	r1, r0
   350ce:	4663      	mov	r3, ip
   350d0:	4152      	adcs	r2, r2
   350d2:	105b      	asrs	r3, r3, #1
   350d4:	4610      	mov	r0, r2
   350d6:	d301      	bcc.n	350dc <__divsi3+0x1b4>
   350d8:	4240      	negs	r0, r0
   350da:	2b00      	cmp	r3, #0
   350dc:	d500      	bpl.n	350e0 <__divsi3+0x1b8>
   350de:	4249      	negs	r1, r1
   350e0:	4770      	bx	lr
   350e2:	4663      	mov	r3, ip
   350e4:	105b      	asrs	r3, r3, #1
   350e6:	d300      	bcc.n	350ea <__divsi3+0x1c2>
   350e8:	4240      	negs	r0, r0
   350ea:	b501      	push	{r0, lr}
   350ec:	2000      	movs	r0, #0
   350ee:	f000 f805 	bl	350fc <__aeabi_idiv0>
   350f2:	bd02      	pop	{r1, pc}

000350f4 <__aeabi_idivmod>:
   350f4:	2900      	cmp	r1, #0
   350f6:	d0f8      	beq.n	350ea <__divsi3+0x1c2>
   350f8:	e716      	b.n	34f28 <__divsi3>
   350fa:	4770      	bx	lr

000350fc <__aeabi_idiv0>:
   350fc:	4770      	bx	lr
   350fe:	46c0      	nop			; (mov r8, r8)

00035100 <__aeabi_cdrcmple>:
   35100:	4684      	mov	ip, r0
   35102:	1c10      	adds	r0, r2, #0
   35104:	4662      	mov	r2, ip
   35106:	468c      	mov	ip, r1
   35108:	1c19      	adds	r1, r3, #0
   3510a:	4663      	mov	r3, ip
   3510c:	e000      	b.n	35110 <__aeabi_cdcmpeq>
   3510e:	46c0      	nop			; (mov r8, r8)

00035110 <__aeabi_cdcmpeq>:
   35110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   35112:	f001 fc57 	bl	369c4 <__ledf2>
   35116:	2800      	cmp	r0, #0
   35118:	d401      	bmi.n	3511e <__aeabi_cdcmpeq+0xe>
   3511a:	2100      	movs	r1, #0
   3511c:	42c8      	cmn	r0, r1
   3511e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00035120 <__aeabi_dcmpeq>:
   35120:	b510      	push	{r4, lr}
   35122:	f001 fbb1 	bl	36888 <__eqdf2>
   35126:	4240      	negs	r0, r0
   35128:	3001      	adds	r0, #1
   3512a:	bd10      	pop	{r4, pc}

0003512c <__aeabi_dcmplt>:
   3512c:	b510      	push	{r4, lr}
   3512e:	f001 fc49 	bl	369c4 <__ledf2>
   35132:	2800      	cmp	r0, #0
   35134:	db01      	blt.n	3513a <__aeabi_dcmplt+0xe>
   35136:	2000      	movs	r0, #0
   35138:	bd10      	pop	{r4, pc}
   3513a:	2001      	movs	r0, #1
   3513c:	bd10      	pop	{r4, pc}
   3513e:	46c0      	nop			; (mov r8, r8)

00035140 <__aeabi_dcmple>:
   35140:	b510      	push	{r4, lr}
   35142:	f001 fc3f 	bl	369c4 <__ledf2>
   35146:	2800      	cmp	r0, #0
   35148:	dd01      	ble.n	3514e <__aeabi_dcmple+0xe>
   3514a:	2000      	movs	r0, #0
   3514c:	bd10      	pop	{r4, pc}
   3514e:	2001      	movs	r0, #1
   35150:	bd10      	pop	{r4, pc}
   35152:	46c0      	nop			; (mov r8, r8)

00035154 <__aeabi_dcmpgt>:
   35154:	b510      	push	{r4, lr}
   35156:	f001 fbd1 	bl	368fc <__gedf2>
   3515a:	2800      	cmp	r0, #0
   3515c:	dc01      	bgt.n	35162 <__aeabi_dcmpgt+0xe>
   3515e:	2000      	movs	r0, #0
   35160:	bd10      	pop	{r4, pc}
   35162:	2001      	movs	r0, #1
   35164:	bd10      	pop	{r4, pc}
   35166:	46c0      	nop			; (mov r8, r8)

00035168 <__aeabi_dcmpge>:
   35168:	b510      	push	{r4, lr}
   3516a:	f001 fbc7 	bl	368fc <__gedf2>
   3516e:	2800      	cmp	r0, #0
   35170:	da01      	bge.n	35176 <__aeabi_dcmpge+0xe>
   35172:	2000      	movs	r0, #0
   35174:	bd10      	pop	{r4, pc}
   35176:	2001      	movs	r0, #1
   35178:	bd10      	pop	{r4, pc}
   3517a:	46c0      	nop			; (mov r8, r8)

0003517c <__aeabi_ldivmod>:
   3517c:	2b00      	cmp	r3, #0
   3517e:	d115      	bne.n	351ac <__aeabi_ldivmod+0x30>
   35180:	2a00      	cmp	r2, #0
   35182:	d113      	bne.n	351ac <__aeabi_ldivmod+0x30>
   35184:	2900      	cmp	r1, #0
   35186:	db06      	blt.n	35196 <__aeabi_ldivmod+0x1a>
   35188:	dc01      	bgt.n	3518e <__aeabi_ldivmod+0x12>
   3518a:	2800      	cmp	r0, #0
   3518c:	d006      	beq.n	3519c <__aeabi_ldivmod+0x20>
   3518e:	2000      	movs	r0, #0
   35190:	43c0      	mvns	r0, r0
   35192:	0841      	lsrs	r1, r0, #1
   35194:	e002      	b.n	3519c <__aeabi_ldivmod+0x20>
   35196:	2180      	movs	r1, #128	; 0x80
   35198:	0609      	lsls	r1, r1, #24
   3519a:	2000      	movs	r0, #0
   3519c:	b407      	push	{r0, r1, r2}
   3519e:	4802      	ldr	r0, [pc, #8]	; (351a8 <__aeabi_ldivmod+0x2c>)
   351a0:	a101      	add	r1, pc, #4	; (adr r1, 351a8 <__aeabi_ldivmod+0x2c>)
   351a2:	1840      	adds	r0, r0, r1
   351a4:	9002      	str	r0, [sp, #8]
   351a6:	bd03      	pop	{r0, r1, pc}
   351a8:	ffffff55 	.word	0xffffff55
   351ac:	b403      	push	{r0, r1}
   351ae:	4668      	mov	r0, sp
   351b0:	b501      	push	{r0, lr}
   351b2:	9802      	ldr	r0, [sp, #8]
   351b4:	f000 f84e 	bl	35254 <__gnu_ldivmod_helper>
   351b8:	9b01      	ldr	r3, [sp, #4]
   351ba:	469e      	mov	lr, r3
   351bc:	b002      	add	sp, #8
   351be:	bc0c      	pop	{r2, r3}
   351c0:	4770      	bx	lr
   351c2:	46c0      	nop			; (mov r8, r8)

000351c4 <__aeabi_lmul>:
   351c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   351c6:	46ce      	mov	lr, r9
   351c8:	4647      	mov	r7, r8
   351ca:	0415      	lsls	r5, r2, #16
   351cc:	0c2d      	lsrs	r5, r5, #16
   351ce:	002e      	movs	r6, r5
   351d0:	b580      	push	{r7, lr}
   351d2:	0407      	lsls	r7, r0, #16
   351d4:	0c14      	lsrs	r4, r2, #16
   351d6:	0c3f      	lsrs	r7, r7, #16
   351d8:	4699      	mov	r9, r3
   351da:	0c03      	lsrs	r3, r0, #16
   351dc:	437e      	muls	r6, r7
   351de:	435d      	muls	r5, r3
   351e0:	4367      	muls	r7, r4
   351e2:	4363      	muls	r3, r4
   351e4:	197f      	adds	r7, r7, r5
   351e6:	0c34      	lsrs	r4, r6, #16
   351e8:	19e4      	adds	r4, r4, r7
   351ea:	469c      	mov	ip, r3
   351ec:	42a5      	cmp	r5, r4
   351ee:	d903      	bls.n	351f8 <__aeabi_lmul+0x34>
   351f0:	2380      	movs	r3, #128	; 0x80
   351f2:	025b      	lsls	r3, r3, #9
   351f4:	4698      	mov	r8, r3
   351f6:	44c4      	add	ip, r8
   351f8:	464b      	mov	r3, r9
   351fa:	4351      	muls	r1, r2
   351fc:	4343      	muls	r3, r0
   351fe:	0436      	lsls	r6, r6, #16
   35200:	0c36      	lsrs	r6, r6, #16
   35202:	0c25      	lsrs	r5, r4, #16
   35204:	0424      	lsls	r4, r4, #16
   35206:	4465      	add	r5, ip
   35208:	19a4      	adds	r4, r4, r6
   3520a:	1859      	adds	r1, r3, r1
   3520c:	1949      	adds	r1, r1, r5
   3520e:	0020      	movs	r0, r4
   35210:	bc0c      	pop	{r2, r3}
   35212:	4690      	mov	r8, r2
   35214:	4699      	mov	r9, r3
   35216:	bdf0      	pop	{r4, r5, r6, r7, pc}

00035218 <__aeabi_d2uiz>:
   35218:	b570      	push	{r4, r5, r6, lr}
   3521a:	2200      	movs	r2, #0
   3521c:	4b0c      	ldr	r3, [pc, #48]	; (35250 <__aeabi_d2uiz+0x38>)
   3521e:	0004      	movs	r4, r0
   35220:	000d      	movs	r5, r1
   35222:	f7ff ffa1 	bl	35168 <__aeabi_dcmpge>
   35226:	2800      	cmp	r0, #0
   35228:	d104      	bne.n	35234 <__aeabi_d2uiz+0x1c>
   3522a:	0020      	movs	r0, r4
   3522c:	0029      	movs	r1, r5
   3522e:	f002 f9c1 	bl	375b4 <__aeabi_d2iz>
   35232:	bd70      	pop	{r4, r5, r6, pc}
   35234:	4b06      	ldr	r3, [pc, #24]	; (35250 <__aeabi_d2uiz+0x38>)
   35236:	2200      	movs	r2, #0
   35238:	0020      	movs	r0, r4
   3523a:	0029      	movs	r1, r5
   3523c:	f001 fea4 	bl	36f88 <__aeabi_dsub>
   35240:	f002 f9b8 	bl	375b4 <__aeabi_d2iz>
   35244:	2380      	movs	r3, #128	; 0x80
   35246:	061b      	lsls	r3, r3, #24
   35248:	469c      	mov	ip, r3
   3524a:	4460      	add	r0, ip
   3524c:	e7f1      	b.n	35232 <__aeabi_d2uiz+0x1a>
   3524e:	46c0      	nop			; (mov r8, r8)
   35250:	41e00000 	.word	0x41e00000

00035254 <__gnu_ldivmod_helper>:
   35254:	b5f0      	push	{r4, r5, r6, r7, lr}
   35256:	b083      	sub	sp, #12
   35258:	0016      	movs	r6, r2
   3525a:	001f      	movs	r7, r3
   3525c:	9000      	str	r0, [sp, #0]
   3525e:	9101      	str	r1, [sp, #4]
   35260:	f002 fa32 	bl	376c8 <__divdi3>
   35264:	0004      	movs	r4, r0
   35266:	000d      	movs	r5, r1
   35268:	0002      	movs	r2, r0
   3526a:	000b      	movs	r3, r1
   3526c:	0030      	movs	r0, r6
   3526e:	0039      	movs	r1, r7
   35270:	f7ff ffa8 	bl	351c4 <__aeabi_lmul>
   35274:	9a00      	ldr	r2, [sp, #0]
   35276:	9b01      	ldr	r3, [sp, #4]
   35278:	1a12      	subs	r2, r2, r0
   3527a:	418b      	sbcs	r3, r1
   3527c:	9908      	ldr	r1, [sp, #32]
   3527e:	0020      	movs	r0, r4
   35280:	600a      	str	r2, [r1, #0]
   35282:	604b      	str	r3, [r1, #4]
   35284:	0029      	movs	r1, r5
   35286:	b003      	add	sp, #12
   35288:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3528a:	46c0      	nop			; (mov r8, r8)

0003528c <__aeabi_fdiv>:
   3528c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3528e:	4657      	mov	r7, sl
   35290:	464e      	mov	r6, r9
   35292:	46de      	mov	lr, fp
   35294:	4645      	mov	r5, r8
   35296:	b5e0      	push	{r5, r6, r7, lr}
   35298:	0244      	lsls	r4, r0, #9
   3529a:	0043      	lsls	r3, r0, #1
   3529c:	0fc6      	lsrs	r6, r0, #31
   3529e:	b083      	sub	sp, #12
   352a0:	1c0f      	adds	r7, r1, #0
   352a2:	0a64      	lsrs	r4, r4, #9
   352a4:	0e1b      	lsrs	r3, r3, #24
   352a6:	46b2      	mov	sl, r6
   352a8:	d053      	beq.n	35352 <__aeabi_fdiv+0xc6>
   352aa:	2bff      	cmp	r3, #255	; 0xff
   352ac:	d027      	beq.n	352fe <__aeabi_fdiv+0x72>
   352ae:	2280      	movs	r2, #128	; 0x80
   352b0:	00e4      	lsls	r4, r4, #3
   352b2:	04d2      	lsls	r2, r2, #19
   352b4:	4314      	orrs	r4, r2
   352b6:	227f      	movs	r2, #127	; 0x7f
   352b8:	4252      	negs	r2, r2
   352ba:	4690      	mov	r8, r2
   352bc:	4498      	add	r8, r3
   352be:	2300      	movs	r3, #0
   352c0:	4699      	mov	r9, r3
   352c2:	469b      	mov	fp, r3
   352c4:	027d      	lsls	r5, r7, #9
   352c6:	0078      	lsls	r0, r7, #1
   352c8:	0ffb      	lsrs	r3, r7, #31
   352ca:	0a6d      	lsrs	r5, r5, #9
   352cc:	0e00      	lsrs	r0, r0, #24
   352ce:	9300      	str	r3, [sp, #0]
   352d0:	d024      	beq.n	3531c <__aeabi_fdiv+0x90>
   352d2:	28ff      	cmp	r0, #255	; 0xff
   352d4:	d046      	beq.n	35364 <__aeabi_fdiv+0xd8>
   352d6:	2380      	movs	r3, #128	; 0x80
   352d8:	2100      	movs	r1, #0
   352da:	00ed      	lsls	r5, r5, #3
   352dc:	04db      	lsls	r3, r3, #19
   352de:	431d      	orrs	r5, r3
   352e0:	387f      	subs	r0, #127	; 0x7f
   352e2:	4647      	mov	r7, r8
   352e4:	1a38      	subs	r0, r7, r0
   352e6:	464f      	mov	r7, r9
   352e8:	430f      	orrs	r7, r1
   352ea:	00bf      	lsls	r7, r7, #2
   352ec:	46b9      	mov	r9, r7
   352ee:	0033      	movs	r3, r6
   352f0:	9a00      	ldr	r2, [sp, #0]
   352f2:	4f87      	ldr	r7, [pc, #540]	; (35510 <__aeabi_fdiv+0x284>)
   352f4:	4053      	eors	r3, r2
   352f6:	464a      	mov	r2, r9
   352f8:	58ba      	ldr	r2, [r7, r2]
   352fa:	9301      	str	r3, [sp, #4]
   352fc:	4697      	mov	pc, r2
   352fe:	2c00      	cmp	r4, #0
   35300:	d14e      	bne.n	353a0 <__aeabi_fdiv+0x114>
   35302:	2308      	movs	r3, #8
   35304:	4699      	mov	r9, r3
   35306:	33f7      	adds	r3, #247	; 0xf7
   35308:	4698      	mov	r8, r3
   3530a:	3bfd      	subs	r3, #253	; 0xfd
   3530c:	469b      	mov	fp, r3
   3530e:	027d      	lsls	r5, r7, #9
   35310:	0078      	lsls	r0, r7, #1
   35312:	0ffb      	lsrs	r3, r7, #31
   35314:	0a6d      	lsrs	r5, r5, #9
   35316:	0e00      	lsrs	r0, r0, #24
   35318:	9300      	str	r3, [sp, #0]
   3531a:	d1da      	bne.n	352d2 <__aeabi_fdiv+0x46>
   3531c:	2d00      	cmp	r5, #0
   3531e:	d126      	bne.n	3536e <__aeabi_fdiv+0xe2>
   35320:	2000      	movs	r0, #0
   35322:	2101      	movs	r1, #1
   35324:	0033      	movs	r3, r6
   35326:	9a00      	ldr	r2, [sp, #0]
   35328:	4f7a      	ldr	r7, [pc, #488]	; (35514 <__aeabi_fdiv+0x288>)
   3532a:	4053      	eors	r3, r2
   3532c:	4642      	mov	r2, r8
   3532e:	1a10      	subs	r0, r2, r0
   35330:	464a      	mov	r2, r9
   35332:	430a      	orrs	r2, r1
   35334:	0092      	lsls	r2, r2, #2
   35336:	58ba      	ldr	r2, [r7, r2]
   35338:	001d      	movs	r5, r3
   3533a:	4697      	mov	pc, r2
   3533c:	9b00      	ldr	r3, [sp, #0]
   3533e:	002c      	movs	r4, r5
   35340:	469a      	mov	sl, r3
   35342:	468b      	mov	fp, r1
   35344:	465b      	mov	r3, fp
   35346:	2b02      	cmp	r3, #2
   35348:	d131      	bne.n	353ae <__aeabi_fdiv+0x122>
   3534a:	4653      	mov	r3, sl
   3534c:	21ff      	movs	r1, #255	; 0xff
   3534e:	2400      	movs	r4, #0
   35350:	e038      	b.n	353c4 <__aeabi_fdiv+0x138>
   35352:	2c00      	cmp	r4, #0
   35354:	d117      	bne.n	35386 <__aeabi_fdiv+0xfa>
   35356:	2304      	movs	r3, #4
   35358:	4699      	mov	r9, r3
   3535a:	2300      	movs	r3, #0
   3535c:	4698      	mov	r8, r3
   3535e:	3301      	adds	r3, #1
   35360:	469b      	mov	fp, r3
   35362:	e7af      	b.n	352c4 <__aeabi_fdiv+0x38>
   35364:	20ff      	movs	r0, #255	; 0xff
   35366:	2d00      	cmp	r5, #0
   35368:	d10b      	bne.n	35382 <__aeabi_fdiv+0xf6>
   3536a:	2102      	movs	r1, #2
   3536c:	e7da      	b.n	35324 <__aeabi_fdiv+0x98>
   3536e:	0028      	movs	r0, r5
   35370:	f002 f98c 	bl	3768c <__clzsi2>
   35374:	1f43      	subs	r3, r0, #5
   35376:	409d      	lsls	r5, r3
   35378:	2376      	movs	r3, #118	; 0x76
   3537a:	425b      	negs	r3, r3
   3537c:	1a18      	subs	r0, r3, r0
   3537e:	2100      	movs	r1, #0
   35380:	e7af      	b.n	352e2 <__aeabi_fdiv+0x56>
   35382:	2103      	movs	r1, #3
   35384:	e7ad      	b.n	352e2 <__aeabi_fdiv+0x56>
   35386:	0020      	movs	r0, r4
   35388:	f002 f980 	bl	3768c <__clzsi2>
   3538c:	1f43      	subs	r3, r0, #5
   3538e:	409c      	lsls	r4, r3
   35390:	2376      	movs	r3, #118	; 0x76
   35392:	425b      	negs	r3, r3
   35394:	1a1b      	subs	r3, r3, r0
   35396:	4698      	mov	r8, r3
   35398:	2300      	movs	r3, #0
   3539a:	4699      	mov	r9, r3
   3539c:	469b      	mov	fp, r3
   3539e:	e791      	b.n	352c4 <__aeabi_fdiv+0x38>
   353a0:	230c      	movs	r3, #12
   353a2:	4699      	mov	r9, r3
   353a4:	33f3      	adds	r3, #243	; 0xf3
   353a6:	4698      	mov	r8, r3
   353a8:	3bfc      	subs	r3, #252	; 0xfc
   353aa:	469b      	mov	fp, r3
   353ac:	e78a      	b.n	352c4 <__aeabi_fdiv+0x38>
   353ae:	2b03      	cmp	r3, #3
   353b0:	d100      	bne.n	353b4 <__aeabi_fdiv+0x128>
   353b2:	e0a5      	b.n	35500 <__aeabi_fdiv+0x274>
   353b4:	4655      	mov	r5, sl
   353b6:	2b01      	cmp	r3, #1
   353b8:	d000      	beq.n	353bc <__aeabi_fdiv+0x130>
   353ba:	e081      	b.n	354c0 <__aeabi_fdiv+0x234>
   353bc:	2301      	movs	r3, #1
   353be:	2100      	movs	r1, #0
   353c0:	2400      	movs	r4, #0
   353c2:	402b      	ands	r3, r5
   353c4:	0264      	lsls	r4, r4, #9
   353c6:	05c9      	lsls	r1, r1, #23
   353c8:	0a60      	lsrs	r0, r4, #9
   353ca:	07db      	lsls	r3, r3, #31
   353cc:	4308      	orrs	r0, r1
   353ce:	4318      	orrs	r0, r3
   353d0:	b003      	add	sp, #12
   353d2:	bc3c      	pop	{r2, r3, r4, r5}
   353d4:	4690      	mov	r8, r2
   353d6:	4699      	mov	r9, r3
   353d8:	46a2      	mov	sl, r4
   353da:	46ab      	mov	fp, r5
   353dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   353de:	2480      	movs	r4, #128	; 0x80
   353e0:	2300      	movs	r3, #0
   353e2:	03e4      	lsls	r4, r4, #15
   353e4:	21ff      	movs	r1, #255	; 0xff
   353e6:	e7ed      	b.n	353c4 <__aeabi_fdiv+0x138>
   353e8:	21ff      	movs	r1, #255	; 0xff
   353ea:	2400      	movs	r4, #0
   353ec:	e7ea      	b.n	353c4 <__aeabi_fdiv+0x138>
   353ee:	2301      	movs	r3, #1
   353f0:	1a59      	subs	r1, r3, r1
   353f2:	291b      	cmp	r1, #27
   353f4:	dd66      	ble.n	354c4 <__aeabi_fdiv+0x238>
   353f6:	9a01      	ldr	r2, [sp, #4]
   353f8:	4013      	ands	r3, r2
   353fa:	2100      	movs	r1, #0
   353fc:	2400      	movs	r4, #0
   353fe:	e7e1      	b.n	353c4 <__aeabi_fdiv+0x138>
   35400:	2380      	movs	r3, #128	; 0x80
   35402:	03db      	lsls	r3, r3, #15
   35404:	421c      	tst	r4, r3
   35406:	d038      	beq.n	3547a <__aeabi_fdiv+0x1ee>
   35408:	421d      	tst	r5, r3
   3540a:	d051      	beq.n	354b0 <__aeabi_fdiv+0x224>
   3540c:	431c      	orrs	r4, r3
   3540e:	0264      	lsls	r4, r4, #9
   35410:	0a64      	lsrs	r4, r4, #9
   35412:	0033      	movs	r3, r6
   35414:	21ff      	movs	r1, #255	; 0xff
   35416:	e7d5      	b.n	353c4 <__aeabi_fdiv+0x138>
   35418:	0163      	lsls	r3, r4, #5
   3541a:	016c      	lsls	r4, r5, #5
   3541c:	42a3      	cmp	r3, r4
   3541e:	d23b      	bcs.n	35498 <__aeabi_fdiv+0x20c>
   35420:	261b      	movs	r6, #27
   35422:	2100      	movs	r1, #0
   35424:	3801      	subs	r0, #1
   35426:	2501      	movs	r5, #1
   35428:	001f      	movs	r7, r3
   3542a:	0049      	lsls	r1, r1, #1
   3542c:	005b      	lsls	r3, r3, #1
   3542e:	2f00      	cmp	r7, #0
   35430:	db01      	blt.n	35436 <__aeabi_fdiv+0x1aa>
   35432:	429c      	cmp	r4, r3
   35434:	d801      	bhi.n	3543a <__aeabi_fdiv+0x1ae>
   35436:	1b1b      	subs	r3, r3, r4
   35438:	4329      	orrs	r1, r5
   3543a:	3e01      	subs	r6, #1
   3543c:	2e00      	cmp	r6, #0
   3543e:	d1f3      	bne.n	35428 <__aeabi_fdiv+0x19c>
   35440:	001c      	movs	r4, r3
   35442:	1e63      	subs	r3, r4, #1
   35444:	419c      	sbcs	r4, r3
   35446:	430c      	orrs	r4, r1
   35448:	0001      	movs	r1, r0
   3544a:	317f      	adds	r1, #127	; 0x7f
   3544c:	2900      	cmp	r1, #0
   3544e:	ddce      	ble.n	353ee <__aeabi_fdiv+0x162>
   35450:	0763      	lsls	r3, r4, #29
   35452:	d004      	beq.n	3545e <__aeabi_fdiv+0x1d2>
   35454:	230f      	movs	r3, #15
   35456:	4023      	ands	r3, r4
   35458:	2b04      	cmp	r3, #4
   3545a:	d000      	beq.n	3545e <__aeabi_fdiv+0x1d2>
   3545c:	3404      	adds	r4, #4
   3545e:	0123      	lsls	r3, r4, #4
   35460:	d503      	bpl.n	3546a <__aeabi_fdiv+0x1de>
   35462:	0001      	movs	r1, r0
   35464:	4b2c      	ldr	r3, [pc, #176]	; (35518 <__aeabi_fdiv+0x28c>)
   35466:	3180      	adds	r1, #128	; 0x80
   35468:	401c      	ands	r4, r3
   3546a:	29fe      	cmp	r1, #254	; 0xfe
   3546c:	dd0d      	ble.n	3548a <__aeabi_fdiv+0x1fe>
   3546e:	2301      	movs	r3, #1
   35470:	9a01      	ldr	r2, [sp, #4]
   35472:	21ff      	movs	r1, #255	; 0xff
   35474:	4013      	ands	r3, r2
   35476:	2400      	movs	r4, #0
   35478:	e7a4      	b.n	353c4 <__aeabi_fdiv+0x138>
   3547a:	2380      	movs	r3, #128	; 0x80
   3547c:	03db      	lsls	r3, r3, #15
   3547e:	431c      	orrs	r4, r3
   35480:	0264      	lsls	r4, r4, #9
   35482:	0a64      	lsrs	r4, r4, #9
   35484:	0033      	movs	r3, r6
   35486:	21ff      	movs	r1, #255	; 0xff
   35488:	e79c      	b.n	353c4 <__aeabi_fdiv+0x138>
   3548a:	2301      	movs	r3, #1
   3548c:	9a01      	ldr	r2, [sp, #4]
   3548e:	01a4      	lsls	r4, r4, #6
   35490:	0a64      	lsrs	r4, r4, #9
   35492:	b2c9      	uxtb	r1, r1
   35494:	4013      	ands	r3, r2
   35496:	e795      	b.n	353c4 <__aeabi_fdiv+0x138>
   35498:	1b1b      	subs	r3, r3, r4
   3549a:	261a      	movs	r6, #26
   3549c:	2101      	movs	r1, #1
   3549e:	e7c2      	b.n	35426 <__aeabi_fdiv+0x19a>
   354a0:	9b00      	ldr	r3, [sp, #0]
   354a2:	468b      	mov	fp, r1
   354a4:	469a      	mov	sl, r3
   354a6:	2400      	movs	r4, #0
   354a8:	e74c      	b.n	35344 <__aeabi_fdiv+0xb8>
   354aa:	0263      	lsls	r3, r4, #9
   354ac:	d5e5      	bpl.n	3547a <__aeabi_fdiv+0x1ee>
   354ae:	2500      	movs	r5, #0
   354b0:	2480      	movs	r4, #128	; 0x80
   354b2:	03e4      	lsls	r4, r4, #15
   354b4:	432c      	orrs	r4, r5
   354b6:	0264      	lsls	r4, r4, #9
   354b8:	0a64      	lsrs	r4, r4, #9
   354ba:	9b00      	ldr	r3, [sp, #0]
   354bc:	21ff      	movs	r1, #255	; 0xff
   354be:	e781      	b.n	353c4 <__aeabi_fdiv+0x138>
   354c0:	9501      	str	r5, [sp, #4]
   354c2:	e7c1      	b.n	35448 <__aeabi_fdiv+0x1bc>
   354c4:	0023      	movs	r3, r4
   354c6:	2020      	movs	r0, #32
   354c8:	40cb      	lsrs	r3, r1
   354ca:	1a41      	subs	r1, r0, r1
   354cc:	408c      	lsls	r4, r1
   354ce:	1e61      	subs	r1, r4, #1
   354d0:	418c      	sbcs	r4, r1
   354d2:	431c      	orrs	r4, r3
   354d4:	0763      	lsls	r3, r4, #29
   354d6:	d004      	beq.n	354e2 <__aeabi_fdiv+0x256>
   354d8:	230f      	movs	r3, #15
   354da:	4023      	ands	r3, r4
   354dc:	2b04      	cmp	r3, #4
   354de:	d000      	beq.n	354e2 <__aeabi_fdiv+0x256>
   354e0:	3404      	adds	r4, #4
   354e2:	0163      	lsls	r3, r4, #5
   354e4:	d505      	bpl.n	354f2 <__aeabi_fdiv+0x266>
   354e6:	2301      	movs	r3, #1
   354e8:	9a01      	ldr	r2, [sp, #4]
   354ea:	2101      	movs	r1, #1
   354ec:	4013      	ands	r3, r2
   354ee:	2400      	movs	r4, #0
   354f0:	e768      	b.n	353c4 <__aeabi_fdiv+0x138>
   354f2:	2301      	movs	r3, #1
   354f4:	9a01      	ldr	r2, [sp, #4]
   354f6:	01a4      	lsls	r4, r4, #6
   354f8:	0a64      	lsrs	r4, r4, #9
   354fa:	4013      	ands	r3, r2
   354fc:	2100      	movs	r1, #0
   354fe:	e761      	b.n	353c4 <__aeabi_fdiv+0x138>
   35500:	2380      	movs	r3, #128	; 0x80
   35502:	03db      	lsls	r3, r3, #15
   35504:	431c      	orrs	r4, r3
   35506:	0264      	lsls	r4, r4, #9
   35508:	0a64      	lsrs	r4, r4, #9
   3550a:	4653      	mov	r3, sl
   3550c:	21ff      	movs	r1, #255	; 0xff
   3550e:	e759      	b.n	353c4 <__aeabi_fdiv+0x138>
   35510:	0003d354 	.word	0x0003d354
   35514:	0003d394 	.word	0x0003d394
   35518:	f7ffffff 	.word	0xf7ffffff

0003551c <__aeabi_fmul>:
   3551c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3551e:	4657      	mov	r7, sl
   35520:	464e      	mov	r6, r9
   35522:	4645      	mov	r5, r8
   35524:	46de      	mov	lr, fp
   35526:	b5e0      	push	{r5, r6, r7, lr}
   35528:	0247      	lsls	r7, r0, #9
   3552a:	0046      	lsls	r6, r0, #1
   3552c:	4688      	mov	r8, r1
   3552e:	0a7f      	lsrs	r7, r7, #9
   35530:	0e36      	lsrs	r6, r6, #24
   35532:	0fc4      	lsrs	r4, r0, #31
   35534:	2e00      	cmp	r6, #0
   35536:	d047      	beq.n	355c8 <__aeabi_fmul+0xac>
   35538:	2eff      	cmp	r6, #255	; 0xff
   3553a:	d024      	beq.n	35586 <__aeabi_fmul+0x6a>
   3553c:	00fb      	lsls	r3, r7, #3
   3553e:	2780      	movs	r7, #128	; 0x80
   35540:	04ff      	lsls	r7, r7, #19
   35542:	431f      	orrs	r7, r3
   35544:	2300      	movs	r3, #0
   35546:	4699      	mov	r9, r3
   35548:	469a      	mov	sl, r3
   3554a:	3e7f      	subs	r6, #127	; 0x7f
   3554c:	4643      	mov	r3, r8
   3554e:	025d      	lsls	r5, r3, #9
   35550:	0058      	lsls	r0, r3, #1
   35552:	0fdb      	lsrs	r3, r3, #31
   35554:	0a6d      	lsrs	r5, r5, #9
   35556:	0e00      	lsrs	r0, r0, #24
   35558:	4698      	mov	r8, r3
   3555a:	d043      	beq.n	355e4 <__aeabi_fmul+0xc8>
   3555c:	28ff      	cmp	r0, #255	; 0xff
   3555e:	d03b      	beq.n	355d8 <__aeabi_fmul+0xbc>
   35560:	00eb      	lsls	r3, r5, #3
   35562:	2580      	movs	r5, #128	; 0x80
   35564:	2200      	movs	r2, #0
   35566:	04ed      	lsls	r5, r5, #19
   35568:	431d      	orrs	r5, r3
   3556a:	387f      	subs	r0, #127	; 0x7f
   3556c:	1836      	adds	r6, r6, r0
   3556e:	1c73      	adds	r3, r6, #1
   35570:	4641      	mov	r1, r8
   35572:	469b      	mov	fp, r3
   35574:	464b      	mov	r3, r9
   35576:	4061      	eors	r1, r4
   35578:	4313      	orrs	r3, r2
   3557a:	2b0f      	cmp	r3, #15
   3557c:	d864      	bhi.n	35648 <__aeabi_fmul+0x12c>
   3557e:	4875      	ldr	r0, [pc, #468]	; (35754 <__aeabi_fmul+0x238>)
   35580:	009b      	lsls	r3, r3, #2
   35582:	58c3      	ldr	r3, [r0, r3]
   35584:	469f      	mov	pc, r3
   35586:	2f00      	cmp	r7, #0
   35588:	d142      	bne.n	35610 <__aeabi_fmul+0xf4>
   3558a:	2308      	movs	r3, #8
   3558c:	4699      	mov	r9, r3
   3558e:	3b06      	subs	r3, #6
   35590:	26ff      	movs	r6, #255	; 0xff
   35592:	469a      	mov	sl, r3
   35594:	e7da      	b.n	3554c <__aeabi_fmul+0x30>
   35596:	4641      	mov	r1, r8
   35598:	2a02      	cmp	r2, #2
   3559a:	d028      	beq.n	355ee <__aeabi_fmul+0xd2>
   3559c:	2a03      	cmp	r2, #3
   3559e:	d100      	bne.n	355a2 <__aeabi_fmul+0x86>
   355a0:	e0ce      	b.n	35740 <__aeabi_fmul+0x224>
   355a2:	2a01      	cmp	r2, #1
   355a4:	d000      	beq.n	355a8 <__aeabi_fmul+0x8c>
   355a6:	e0ac      	b.n	35702 <__aeabi_fmul+0x1e6>
   355a8:	4011      	ands	r1, r2
   355aa:	2000      	movs	r0, #0
   355ac:	2200      	movs	r2, #0
   355ae:	b2cc      	uxtb	r4, r1
   355b0:	0240      	lsls	r0, r0, #9
   355b2:	05d2      	lsls	r2, r2, #23
   355b4:	0a40      	lsrs	r0, r0, #9
   355b6:	07e4      	lsls	r4, r4, #31
   355b8:	4310      	orrs	r0, r2
   355ba:	4320      	orrs	r0, r4
   355bc:	bc3c      	pop	{r2, r3, r4, r5}
   355be:	4690      	mov	r8, r2
   355c0:	4699      	mov	r9, r3
   355c2:	46a2      	mov	sl, r4
   355c4:	46ab      	mov	fp, r5
   355c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   355c8:	2f00      	cmp	r7, #0
   355ca:	d115      	bne.n	355f8 <__aeabi_fmul+0xdc>
   355cc:	2304      	movs	r3, #4
   355ce:	4699      	mov	r9, r3
   355d0:	3b03      	subs	r3, #3
   355d2:	2600      	movs	r6, #0
   355d4:	469a      	mov	sl, r3
   355d6:	e7b9      	b.n	3554c <__aeabi_fmul+0x30>
   355d8:	20ff      	movs	r0, #255	; 0xff
   355da:	2202      	movs	r2, #2
   355dc:	2d00      	cmp	r5, #0
   355de:	d0c5      	beq.n	3556c <__aeabi_fmul+0x50>
   355e0:	2203      	movs	r2, #3
   355e2:	e7c3      	b.n	3556c <__aeabi_fmul+0x50>
   355e4:	2d00      	cmp	r5, #0
   355e6:	d119      	bne.n	3561c <__aeabi_fmul+0x100>
   355e8:	2000      	movs	r0, #0
   355ea:	2201      	movs	r2, #1
   355ec:	e7be      	b.n	3556c <__aeabi_fmul+0x50>
   355ee:	2401      	movs	r4, #1
   355f0:	22ff      	movs	r2, #255	; 0xff
   355f2:	400c      	ands	r4, r1
   355f4:	2000      	movs	r0, #0
   355f6:	e7db      	b.n	355b0 <__aeabi_fmul+0x94>
   355f8:	0038      	movs	r0, r7
   355fa:	f002 f847 	bl	3768c <__clzsi2>
   355fe:	2676      	movs	r6, #118	; 0x76
   35600:	1f43      	subs	r3, r0, #5
   35602:	409f      	lsls	r7, r3
   35604:	2300      	movs	r3, #0
   35606:	4276      	negs	r6, r6
   35608:	1a36      	subs	r6, r6, r0
   3560a:	4699      	mov	r9, r3
   3560c:	469a      	mov	sl, r3
   3560e:	e79d      	b.n	3554c <__aeabi_fmul+0x30>
   35610:	230c      	movs	r3, #12
   35612:	4699      	mov	r9, r3
   35614:	3b09      	subs	r3, #9
   35616:	26ff      	movs	r6, #255	; 0xff
   35618:	469a      	mov	sl, r3
   3561a:	e797      	b.n	3554c <__aeabi_fmul+0x30>
   3561c:	0028      	movs	r0, r5
   3561e:	f002 f835 	bl	3768c <__clzsi2>
   35622:	1f43      	subs	r3, r0, #5
   35624:	409d      	lsls	r5, r3
   35626:	2376      	movs	r3, #118	; 0x76
   35628:	425b      	negs	r3, r3
   3562a:	1a18      	subs	r0, r3, r0
   3562c:	2200      	movs	r2, #0
   3562e:	e79d      	b.n	3556c <__aeabi_fmul+0x50>
   35630:	2080      	movs	r0, #128	; 0x80
   35632:	2400      	movs	r4, #0
   35634:	03c0      	lsls	r0, r0, #15
   35636:	22ff      	movs	r2, #255	; 0xff
   35638:	e7ba      	b.n	355b0 <__aeabi_fmul+0x94>
   3563a:	003d      	movs	r5, r7
   3563c:	4652      	mov	r2, sl
   3563e:	e7ab      	b.n	35598 <__aeabi_fmul+0x7c>
   35640:	003d      	movs	r5, r7
   35642:	0021      	movs	r1, r4
   35644:	4652      	mov	r2, sl
   35646:	e7a7      	b.n	35598 <__aeabi_fmul+0x7c>
   35648:	0c3b      	lsrs	r3, r7, #16
   3564a:	469c      	mov	ip, r3
   3564c:	042a      	lsls	r2, r5, #16
   3564e:	0c12      	lsrs	r2, r2, #16
   35650:	0c2b      	lsrs	r3, r5, #16
   35652:	0014      	movs	r4, r2
   35654:	4660      	mov	r0, ip
   35656:	4665      	mov	r5, ip
   35658:	043f      	lsls	r7, r7, #16
   3565a:	0c3f      	lsrs	r7, r7, #16
   3565c:	437c      	muls	r4, r7
   3565e:	4342      	muls	r2, r0
   35660:	435d      	muls	r5, r3
   35662:	437b      	muls	r3, r7
   35664:	0c27      	lsrs	r7, r4, #16
   35666:	189b      	adds	r3, r3, r2
   35668:	18ff      	adds	r7, r7, r3
   3566a:	42ba      	cmp	r2, r7
   3566c:	d903      	bls.n	35676 <__aeabi_fmul+0x15a>
   3566e:	2380      	movs	r3, #128	; 0x80
   35670:	025b      	lsls	r3, r3, #9
   35672:	469c      	mov	ip, r3
   35674:	4465      	add	r5, ip
   35676:	0424      	lsls	r4, r4, #16
   35678:	043a      	lsls	r2, r7, #16
   3567a:	0c24      	lsrs	r4, r4, #16
   3567c:	1912      	adds	r2, r2, r4
   3567e:	0193      	lsls	r3, r2, #6
   35680:	1e5c      	subs	r4, r3, #1
   35682:	41a3      	sbcs	r3, r4
   35684:	0c3f      	lsrs	r7, r7, #16
   35686:	0e92      	lsrs	r2, r2, #26
   35688:	197d      	adds	r5, r7, r5
   3568a:	431a      	orrs	r2, r3
   3568c:	01ad      	lsls	r5, r5, #6
   3568e:	4315      	orrs	r5, r2
   35690:	012b      	lsls	r3, r5, #4
   35692:	d504      	bpl.n	3569e <__aeabi_fmul+0x182>
   35694:	2301      	movs	r3, #1
   35696:	465e      	mov	r6, fp
   35698:	086a      	lsrs	r2, r5, #1
   3569a:	401d      	ands	r5, r3
   3569c:	4315      	orrs	r5, r2
   3569e:	0032      	movs	r2, r6
   356a0:	327f      	adds	r2, #127	; 0x7f
   356a2:	2a00      	cmp	r2, #0
   356a4:	dd25      	ble.n	356f2 <__aeabi_fmul+0x1d6>
   356a6:	076b      	lsls	r3, r5, #29
   356a8:	d004      	beq.n	356b4 <__aeabi_fmul+0x198>
   356aa:	230f      	movs	r3, #15
   356ac:	402b      	ands	r3, r5
   356ae:	2b04      	cmp	r3, #4
   356b0:	d000      	beq.n	356b4 <__aeabi_fmul+0x198>
   356b2:	3504      	adds	r5, #4
   356b4:	012b      	lsls	r3, r5, #4
   356b6:	d503      	bpl.n	356c0 <__aeabi_fmul+0x1a4>
   356b8:	0032      	movs	r2, r6
   356ba:	4b27      	ldr	r3, [pc, #156]	; (35758 <__aeabi_fmul+0x23c>)
   356bc:	3280      	adds	r2, #128	; 0x80
   356be:	401d      	ands	r5, r3
   356c0:	2afe      	cmp	r2, #254	; 0xfe
   356c2:	dc94      	bgt.n	355ee <__aeabi_fmul+0xd2>
   356c4:	2401      	movs	r4, #1
   356c6:	01a8      	lsls	r0, r5, #6
   356c8:	0a40      	lsrs	r0, r0, #9
   356ca:	b2d2      	uxtb	r2, r2
   356cc:	400c      	ands	r4, r1
   356ce:	e76f      	b.n	355b0 <__aeabi_fmul+0x94>
   356d0:	2080      	movs	r0, #128	; 0x80
   356d2:	03c0      	lsls	r0, r0, #15
   356d4:	4207      	tst	r7, r0
   356d6:	d007      	beq.n	356e8 <__aeabi_fmul+0x1cc>
   356d8:	4205      	tst	r5, r0
   356da:	d105      	bne.n	356e8 <__aeabi_fmul+0x1cc>
   356dc:	4328      	orrs	r0, r5
   356de:	0240      	lsls	r0, r0, #9
   356e0:	0a40      	lsrs	r0, r0, #9
   356e2:	4644      	mov	r4, r8
   356e4:	22ff      	movs	r2, #255	; 0xff
   356e6:	e763      	b.n	355b0 <__aeabi_fmul+0x94>
   356e8:	4338      	orrs	r0, r7
   356ea:	0240      	lsls	r0, r0, #9
   356ec:	0a40      	lsrs	r0, r0, #9
   356ee:	22ff      	movs	r2, #255	; 0xff
   356f0:	e75e      	b.n	355b0 <__aeabi_fmul+0x94>
   356f2:	2401      	movs	r4, #1
   356f4:	1aa3      	subs	r3, r4, r2
   356f6:	2b1b      	cmp	r3, #27
   356f8:	dd05      	ble.n	35706 <__aeabi_fmul+0x1ea>
   356fa:	400c      	ands	r4, r1
   356fc:	2200      	movs	r2, #0
   356fe:	2000      	movs	r0, #0
   35700:	e756      	b.n	355b0 <__aeabi_fmul+0x94>
   35702:	465e      	mov	r6, fp
   35704:	e7cb      	b.n	3569e <__aeabi_fmul+0x182>
   35706:	002a      	movs	r2, r5
   35708:	2020      	movs	r0, #32
   3570a:	40da      	lsrs	r2, r3
   3570c:	1ac3      	subs	r3, r0, r3
   3570e:	409d      	lsls	r5, r3
   35710:	002b      	movs	r3, r5
   35712:	1e5d      	subs	r5, r3, #1
   35714:	41ab      	sbcs	r3, r5
   35716:	4313      	orrs	r3, r2
   35718:	075a      	lsls	r2, r3, #29
   3571a:	d004      	beq.n	35726 <__aeabi_fmul+0x20a>
   3571c:	220f      	movs	r2, #15
   3571e:	401a      	ands	r2, r3
   35720:	2a04      	cmp	r2, #4
   35722:	d000      	beq.n	35726 <__aeabi_fmul+0x20a>
   35724:	3304      	adds	r3, #4
   35726:	015a      	lsls	r2, r3, #5
   35728:	d504      	bpl.n	35734 <__aeabi_fmul+0x218>
   3572a:	2401      	movs	r4, #1
   3572c:	2201      	movs	r2, #1
   3572e:	400c      	ands	r4, r1
   35730:	2000      	movs	r0, #0
   35732:	e73d      	b.n	355b0 <__aeabi_fmul+0x94>
   35734:	2401      	movs	r4, #1
   35736:	019b      	lsls	r3, r3, #6
   35738:	0a58      	lsrs	r0, r3, #9
   3573a:	400c      	ands	r4, r1
   3573c:	2200      	movs	r2, #0
   3573e:	e737      	b.n	355b0 <__aeabi_fmul+0x94>
   35740:	2080      	movs	r0, #128	; 0x80
   35742:	2401      	movs	r4, #1
   35744:	03c0      	lsls	r0, r0, #15
   35746:	4328      	orrs	r0, r5
   35748:	0240      	lsls	r0, r0, #9
   3574a:	0a40      	lsrs	r0, r0, #9
   3574c:	400c      	ands	r4, r1
   3574e:	22ff      	movs	r2, #255	; 0xff
   35750:	e72e      	b.n	355b0 <__aeabi_fmul+0x94>
   35752:	46c0      	nop			; (mov r8, r8)
   35754:	0003d3d4 	.word	0x0003d3d4
   35758:	f7ffffff 	.word	0xf7ffffff

0003575c <__aeabi_fsub>:
   3575c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3575e:	464f      	mov	r7, r9
   35760:	46d6      	mov	lr, sl
   35762:	4646      	mov	r6, r8
   35764:	0044      	lsls	r4, r0, #1
   35766:	b5c0      	push	{r6, r7, lr}
   35768:	0fc2      	lsrs	r2, r0, #31
   3576a:	0247      	lsls	r7, r0, #9
   3576c:	0248      	lsls	r0, r1, #9
   3576e:	0a40      	lsrs	r0, r0, #9
   35770:	4684      	mov	ip, r0
   35772:	4666      	mov	r6, ip
   35774:	0a7b      	lsrs	r3, r7, #9
   35776:	0048      	lsls	r0, r1, #1
   35778:	0fc9      	lsrs	r1, r1, #31
   3577a:	469a      	mov	sl, r3
   3577c:	0e24      	lsrs	r4, r4, #24
   3577e:	0015      	movs	r5, r2
   35780:	00db      	lsls	r3, r3, #3
   35782:	0e00      	lsrs	r0, r0, #24
   35784:	4689      	mov	r9, r1
   35786:	00f6      	lsls	r6, r6, #3
   35788:	28ff      	cmp	r0, #255	; 0xff
   3578a:	d100      	bne.n	3578e <__aeabi_fsub+0x32>
   3578c:	e08f      	b.n	358ae <__aeabi_fsub+0x152>
   3578e:	2101      	movs	r1, #1
   35790:	464f      	mov	r7, r9
   35792:	404f      	eors	r7, r1
   35794:	0039      	movs	r1, r7
   35796:	4291      	cmp	r1, r2
   35798:	d066      	beq.n	35868 <__aeabi_fsub+0x10c>
   3579a:	1a22      	subs	r2, r4, r0
   3579c:	2a00      	cmp	r2, #0
   3579e:	dc00      	bgt.n	357a2 <__aeabi_fsub+0x46>
   357a0:	e09d      	b.n	358de <__aeabi_fsub+0x182>
   357a2:	2800      	cmp	r0, #0
   357a4:	d13d      	bne.n	35822 <__aeabi_fsub+0xc6>
   357a6:	2e00      	cmp	r6, #0
   357a8:	d100      	bne.n	357ac <__aeabi_fsub+0x50>
   357aa:	e08b      	b.n	358c4 <__aeabi_fsub+0x168>
   357ac:	1e51      	subs	r1, r2, #1
   357ae:	2900      	cmp	r1, #0
   357b0:	d000      	beq.n	357b4 <__aeabi_fsub+0x58>
   357b2:	e0b5      	b.n	35920 <__aeabi_fsub+0x1c4>
   357b4:	2401      	movs	r4, #1
   357b6:	1b9b      	subs	r3, r3, r6
   357b8:	015a      	lsls	r2, r3, #5
   357ba:	d544      	bpl.n	35846 <__aeabi_fsub+0xea>
   357bc:	019b      	lsls	r3, r3, #6
   357be:	099f      	lsrs	r7, r3, #6
   357c0:	0038      	movs	r0, r7
   357c2:	f001 ff63 	bl	3768c <__clzsi2>
   357c6:	3805      	subs	r0, #5
   357c8:	4087      	lsls	r7, r0
   357ca:	4284      	cmp	r4, r0
   357cc:	dd00      	ble.n	357d0 <__aeabi_fsub+0x74>
   357ce:	e096      	b.n	358fe <__aeabi_fsub+0x1a2>
   357d0:	1b04      	subs	r4, r0, r4
   357d2:	003a      	movs	r2, r7
   357d4:	2020      	movs	r0, #32
   357d6:	3401      	adds	r4, #1
   357d8:	40e2      	lsrs	r2, r4
   357da:	1b04      	subs	r4, r0, r4
   357dc:	40a7      	lsls	r7, r4
   357de:	003b      	movs	r3, r7
   357e0:	1e5f      	subs	r7, r3, #1
   357e2:	41bb      	sbcs	r3, r7
   357e4:	2400      	movs	r4, #0
   357e6:	4313      	orrs	r3, r2
   357e8:	075a      	lsls	r2, r3, #29
   357ea:	d004      	beq.n	357f6 <__aeabi_fsub+0x9a>
   357ec:	220f      	movs	r2, #15
   357ee:	401a      	ands	r2, r3
   357f0:	2a04      	cmp	r2, #4
   357f2:	d000      	beq.n	357f6 <__aeabi_fsub+0x9a>
   357f4:	3304      	adds	r3, #4
   357f6:	015a      	lsls	r2, r3, #5
   357f8:	d527      	bpl.n	3584a <__aeabi_fsub+0xee>
   357fa:	3401      	adds	r4, #1
   357fc:	2cff      	cmp	r4, #255	; 0xff
   357fe:	d100      	bne.n	35802 <__aeabi_fsub+0xa6>
   35800:	e079      	b.n	358f6 <__aeabi_fsub+0x19a>
   35802:	2201      	movs	r2, #1
   35804:	019b      	lsls	r3, r3, #6
   35806:	0a5b      	lsrs	r3, r3, #9
   35808:	b2e4      	uxtb	r4, r4
   3580a:	402a      	ands	r2, r5
   3580c:	025b      	lsls	r3, r3, #9
   3580e:	05e4      	lsls	r4, r4, #23
   35810:	0a58      	lsrs	r0, r3, #9
   35812:	07d2      	lsls	r2, r2, #31
   35814:	4320      	orrs	r0, r4
   35816:	4310      	orrs	r0, r2
   35818:	bc1c      	pop	{r2, r3, r4}
   3581a:	4690      	mov	r8, r2
   3581c:	4699      	mov	r9, r3
   3581e:	46a2      	mov	sl, r4
   35820:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35822:	2cff      	cmp	r4, #255	; 0xff
   35824:	d0e0      	beq.n	357e8 <__aeabi_fsub+0x8c>
   35826:	2180      	movs	r1, #128	; 0x80
   35828:	04c9      	lsls	r1, r1, #19
   3582a:	430e      	orrs	r6, r1
   3582c:	2a1b      	cmp	r2, #27
   3582e:	dc7b      	bgt.n	35928 <__aeabi_fsub+0x1cc>
   35830:	0031      	movs	r1, r6
   35832:	2020      	movs	r0, #32
   35834:	40d1      	lsrs	r1, r2
   35836:	1a82      	subs	r2, r0, r2
   35838:	4096      	lsls	r6, r2
   3583a:	1e72      	subs	r2, r6, #1
   3583c:	4196      	sbcs	r6, r2
   3583e:	430e      	orrs	r6, r1
   35840:	1b9b      	subs	r3, r3, r6
   35842:	015a      	lsls	r2, r3, #5
   35844:	d4ba      	bmi.n	357bc <__aeabi_fsub+0x60>
   35846:	075a      	lsls	r2, r3, #29
   35848:	d1d0      	bne.n	357ec <__aeabi_fsub+0x90>
   3584a:	2201      	movs	r2, #1
   3584c:	08df      	lsrs	r7, r3, #3
   3584e:	402a      	ands	r2, r5
   35850:	2cff      	cmp	r4, #255	; 0xff
   35852:	d133      	bne.n	358bc <__aeabi_fsub+0x160>
   35854:	2f00      	cmp	r7, #0
   35856:	d100      	bne.n	3585a <__aeabi_fsub+0xfe>
   35858:	e0a8      	b.n	359ac <__aeabi_fsub+0x250>
   3585a:	2380      	movs	r3, #128	; 0x80
   3585c:	03db      	lsls	r3, r3, #15
   3585e:	433b      	orrs	r3, r7
   35860:	025b      	lsls	r3, r3, #9
   35862:	0a5b      	lsrs	r3, r3, #9
   35864:	24ff      	movs	r4, #255	; 0xff
   35866:	e7d1      	b.n	3580c <__aeabi_fsub+0xb0>
   35868:	1a21      	subs	r1, r4, r0
   3586a:	2900      	cmp	r1, #0
   3586c:	dd4c      	ble.n	35908 <__aeabi_fsub+0x1ac>
   3586e:	2800      	cmp	r0, #0
   35870:	d02a      	beq.n	358c8 <__aeabi_fsub+0x16c>
   35872:	2cff      	cmp	r4, #255	; 0xff
   35874:	d0b8      	beq.n	357e8 <__aeabi_fsub+0x8c>
   35876:	2080      	movs	r0, #128	; 0x80
   35878:	04c0      	lsls	r0, r0, #19
   3587a:	4306      	orrs	r6, r0
   3587c:	291b      	cmp	r1, #27
   3587e:	dd00      	ble.n	35882 <__aeabi_fsub+0x126>
   35880:	e0af      	b.n	359e2 <__aeabi_fsub+0x286>
   35882:	0030      	movs	r0, r6
   35884:	2720      	movs	r7, #32
   35886:	40c8      	lsrs	r0, r1
   35888:	1a79      	subs	r1, r7, r1
   3588a:	408e      	lsls	r6, r1
   3588c:	1e71      	subs	r1, r6, #1
   3588e:	418e      	sbcs	r6, r1
   35890:	4306      	orrs	r6, r0
   35892:	199b      	adds	r3, r3, r6
   35894:	0159      	lsls	r1, r3, #5
   35896:	d5d6      	bpl.n	35846 <__aeabi_fsub+0xea>
   35898:	3401      	adds	r4, #1
   3589a:	2cff      	cmp	r4, #255	; 0xff
   3589c:	d100      	bne.n	358a0 <__aeabi_fsub+0x144>
   3589e:	e085      	b.n	359ac <__aeabi_fsub+0x250>
   358a0:	2201      	movs	r2, #1
   358a2:	497a      	ldr	r1, [pc, #488]	; (35a8c <__aeabi_fsub+0x330>)
   358a4:	401a      	ands	r2, r3
   358a6:	085b      	lsrs	r3, r3, #1
   358a8:	400b      	ands	r3, r1
   358aa:	4313      	orrs	r3, r2
   358ac:	e79c      	b.n	357e8 <__aeabi_fsub+0x8c>
   358ae:	2e00      	cmp	r6, #0
   358b0:	d000      	beq.n	358b4 <__aeabi_fsub+0x158>
   358b2:	e770      	b.n	35796 <__aeabi_fsub+0x3a>
   358b4:	e76b      	b.n	3578e <__aeabi_fsub+0x32>
   358b6:	1e3b      	subs	r3, r7, #0
   358b8:	d1c5      	bne.n	35846 <__aeabi_fsub+0xea>
   358ba:	2200      	movs	r2, #0
   358bc:	027b      	lsls	r3, r7, #9
   358be:	0a5b      	lsrs	r3, r3, #9
   358c0:	b2e4      	uxtb	r4, r4
   358c2:	e7a3      	b.n	3580c <__aeabi_fsub+0xb0>
   358c4:	0014      	movs	r4, r2
   358c6:	e78f      	b.n	357e8 <__aeabi_fsub+0x8c>
   358c8:	2e00      	cmp	r6, #0
   358ca:	d04d      	beq.n	35968 <__aeabi_fsub+0x20c>
   358cc:	1e48      	subs	r0, r1, #1
   358ce:	2800      	cmp	r0, #0
   358d0:	d157      	bne.n	35982 <__aeabi_fsub+0x226>
   358d2:	199b      	adds	r3, r3, r6
   358d4:	2401      	movs	r4, #1
   358d6:	015a      	lsls	r2, r3, #5
   358d8:	d5b5      	bpl.n	35846 <__aeabi_fsub+0xea>
   358da:	2402      	movs	r4, #2
   358dc:	e7e0      	b.n	358a0 <__aeabi_fsub+0x144>
   358de:	2a00      	cmp	r2, #0
   358e0:	d125      	bne.n	3592e <__aeabi_fsub+0x1d2>
   358e2:	1c62      	adds	r2, r4, #1
   358e4:	b2d2      	uxtb	r2, r2
   358e6:	2a01      	cmp	r2, #1
   358e8:	dd72      	ble.n	359d0 <__aeabi_fsub+0x274>
   358ea:	1b9f      	subs	r7, r3, r6
   358ec:	017a      	lsls	r2, r7, #5
   358ee:	d535      	bpl.n	3595c <__aeabi_fsub+0x200>
   358f0:	1af7      	subs	r7, r6, r3
   358f2:	000d      	movs	r5, r1
   358f4:	e764      	b.n	357c0 <__aeabi_fsub+0x64>
   358f6:	2201      	movs	r2, #1
   358f8:	2300      	movs	r3, #0
   358fa:	402a      	ands	r2, r5
   358fc:	e786      	b.n	3580c <__aeabi_fsub+0xb0>
   358fe:	003b      	movs	r3, r7
   35900:	4a63      	ldr	r2, [pc, #396]	; (35a90 <__aeabi_fsub+0x334>)
   35902:	1a24      	subs	r4, r4, r0
   35904:	4013      	ands	r3, r2
   35906:	e76f      	b.n	357e8 <__aeabi_fsub+0x8c>
   35908:	2900      	cmp	r1, #0
   3590a:	d16c      	bne.n	359e6 <__aeabi_fsub+0x28a>
   3590c:	1c61      	adds	r1, r4, #1
   3590e:	b2c8      	uxtb	r0, r1
   35910:	2801      	cmp	r0, #1
   35912:	dd4e      	ble.n	359b2 <__aeabi_fsub+0x256>
   35914:	29ff      	cmp	r1, #255	; 0xff
   35916:	d049      	beq.n	359ac <__aeabi_fsub+0x250>
   35918:	199b      	adds	r3, r3, r6
   3591a:	085b      	lsrs	r3, r3, #1
   3591c:	000c      	movs	r4, r1
   3591e:	e763      	b.n	357e8 <__aeabi_fsub+0x8c>
   35920:	2aff      	cmp	r2, #255	; 0xff
   35922:	d041      	beq.n	359a8 <__aeabi_fsub+0x24c>
   35924:	000a      	movs	r2, r1
   35926:	e781      	b.n	3582c <__aeabi_fsub+0xd0>
   35928:	2601      	movs	r6, #1
   3592a:	1b9b      	subs	r3, r3, r6
   3592c:	e789      	b.n	35842 <__aeabi_fsub+0xe6>
   3592e:	2c00      	cmp	r4, #0
   35930:	d01c      	beq.n	3596c <__aeabi_fsub+0x210>
   35932:	28ff      	cmp	r0, #255	; 0xff
   35934:	d021      	beq.n	3597a <__aeabi_fsub+0x21e>
   35936:	2480      	movs	r4, #128	; 0x80
   35938:	04e4      	lsls	r4, r4, #19
   3593a:	4252      	negs	r2, r2
   3593c:	4323      	orrs	r3, r4
   3593e:	2a1b      	cmp	r2, #27
   35940:	dd00      	ble.n	35944 <__aeabi_fsub+0x1e8>
   35942:	e096      	b.n	35a72 <__aeabi_fsub+0x316>
   35944:	001c      	movs	r4, r3
   35946:	2520      	movs	r5, #32
   35948:	40d4      	lsrs	r4, r2
   3594a:	1aaa      	subs	r2, r5, r2
   3594c:	4093      	lsls	r3, r2
   3594e:	1e5a      	subs	r2, r3, #1
   35950:	4193      	sbcs	r3, r2
   35952:	4323      	orrs	r3, r4
   35954:	1af3      	subs	r3, r6, r3
   35956:	0004      	movs	r4, r0
   35958:	000d      	movs	r5, r1
   3595a:	e72d      	b.n	357b8 <__aeabi_fsub+0x5c>
   3595c:	2f00      	cmp	r7, #0
   3595e:	d000      	beq.n	35962 <__aeabi_fsub+0x206>
   35960:	e72e      	b.n	357c0 <__aeabi_fsub+0x64>
   35962:	2200      	movs	r2, #0
   35964:	2400      	movs	r4, #0
   35966:	e7a9      	b.n	358bc <__aeabi_fsub+0x160>
   35968:	000c      	movs	r4, r1
   3596a:	e73d      	b.n	357e8 <__aeabi_fsub+0x8c>
   3596c:	2b00      	cmp	r3, #0
   3596e:	d058      	beq.n	35a22 <__aeabi_fsub+0x2c6>
   35970:	43d2      	mvns	r2, r2
   35972:	2a00      	cmp	r2, #0
   35974:	d0ee      	beq.n	35954 <__aeabi_fsub+0x1f8>
   35976:	28ff      	cmp	r0, #255	; 0xff
   35978:	d1e1      	bne.n	3593e <__aeabi_fsub+0x1e2>
   3597a:	0033      	movs	r3, r6
   3597c:	24ff      	movs	r4, #255	; 0xff
   3597e:	000d      	movs	r5, r1
   35980:	e732      	b.n	357e8 <__aeabi_fsub+0x8c>
   35982:	29ff      	cmp	r1, #255	; 0xff
   35984:	d010      	beq.n	359a8 <__aeabi_fsub+0x24c>
   35986:	0001      	movs	r1, r0
   35988:	e778      	b.n	3587c <__aeabi_fsub+0x120>
   3598a:	2b00      	cmp	r3, #0
   3598c:	d06e      	beq.n	35a6c <__aeabi_fsub+0x310>
   3598e:	24ff      	movs	r4, #255	; 0xff
   35990:	2e00      	cmp	r6, #0
   35992:	d100      	bne.n	35996 <__aeabi_fsub+0x23a>
   35994:	e728      	b.n	357e8 <__aeabi_fsub+0x8c>
   35996:	2280      	movs	r2, #128	; 0x80
   35998:	4651      	mov	r1, sl
   3599a:	03d2      	lsls	r2, r2, #15
   3599c:	4211      	tst	r1, r2
   3599e:	d003      	beq.n	359a8 <__aeabi_fsub+0x24c>
   359a0:	4661      	mov	r1, ip
   359a2:	4211      	tst	r1, r2
   359a4:	d100      	bne.n	359a8 <__aeabi_fsub+0x24c>
   359a6:	0033      	movs	r3, r6
   359a8:	24ff      	movs	r4, #255	; 0xff
   359aa:	e71d      	b.n	357e8 <__aeabi_fsub+0x8c>
   359ac:	24ff      	movs	r4, #255	; 0xff
   359ae:	2300      	movs	r3, #0
   359b0:	e72c      	b.n	3580c <__aeabi_fsub+0xb0>
   359b2:	2c00      	cmp	r4, #0
   359b4:	d1e9      	bne.n	3598a <__aeabi_fsub+0x22e>
   359b6:	2b00      	cmp	r3, #0
   359b8:	d063      	beq.n	35a82 <__aeabi_fsub+0x326>
   359ba:	2e00      	cmp	r6, #0
   359bc:	d100      	bne.n	359c0 <__aeabi_fsub+0x264>
   359be:	e713      	b.n	357e8 <__aeabi_fsub+0x8c>
   359c0:	199b      	adds	r3, r3, r6
   359c2:	015a      	lsls	r2, r3, #5
   359c4:	d400      	bmi.n	359c8 <__aeabi_fsub+0x26c>
   359c6:	e73e      	b.n	35846 <__aeabi_fsub+0xea>
   359c8:	4a31      	ldr	r2, [pc, #196]	; (35a90 <__aeabi_fsub+0x334>)
   359ca:	000c      	movs	r4, r1
   359cc:	4013      	ands	r3, r2
   359ce:	e70b      	b.n	357e8 <__aeabi_fsub+0x8c>
   359d0:	2c00      	cmp	r4, #0
   359d2:	d11e      	bne.n	35a12 <__aeabi_fsub+0x2b6>
   359d4:	2b00      	cmp	r3, #0
   359d6:	d12f      	bne.n	35a38 <__aeabi_fsub+0x2dc>
   359d8:	2e00      	cmp	r6, #0
   359da:	d04f      	beq.n	35a7c <__aeabi_fsub+0x320>
   359dc:	0033      	movs	r3, r6
   359de:	000d      	movs	r5, r1
   359e0:	e702      	b.n	357e8 <__aeabi_fsub+0x8c>
   359e2:	2601      	movs	r6, #1
   359e4:	e755      	b.n	35892 <__aeabi_fsub+0x136>
   359e6:	2c00      	cmp	r4, #0
   359e8:	d11f      	bne.n	35a2a <__aeabi_fsub+0x2ce>
   359ea:	2b00      	cmp	r3, #0
   359ec:	d043      	beq.n	35a76 <__aeabi_fsub+0x31a>
   359ee:	43c9      	mvns	r1, r1
   359f0:	2900      	cmp	r1, #0
   359f2:	d00b      	beq.n	35a0c <__aeabi_fsub+0x2b0>
   359f4:	28ff      	cmp	r0, #255	; 0xff
   359f6:	d039      	beq.n	35a6c <__aeabi_fsub+0x310>
   359f8:	291b      	cmp	r1, #27
   359fa:	dc44      	bgt.n	35a86 <__aeabi_fsub+0x32a>
   359fc:	001c      	movs	r4, r3
   359fe:	2720      	movs	r7, #32
   35a00:	40cc      	lsrs	r4, r1
   35a02:	1a79      	subs	r1, r7, r1
   35a04:	408b      	lsls	r3, r1
   35a06:	1e59      	subs	r1, r3, #1
   35a08:	418b      	sbcs	r3, r1
   35a0a:	4323      	orrs	r3, r4
   35a0c:	199b      	adds	r3, r3, r6
   35a0e:	0004      	movs	r4, r0
   35a10:	e740      	b.n	35894 <__aeabi_fsub+0x138>
   35a12:	2b00      	cmp	r3, #0
   35a14:	d11a      	bne.n	35a4c <__aeabi_fsub+0x2f0>
   35a16:	2e00      	cmp	r6, #0
   35a18:	d124      	bne.n	35a64 <__aeabi_fsub+0x308>
   35a1a:	2780      	movs	r7, #128	; 0x80
   35a1c:	2200      	movs	r2, #0
   35a1e:	03ff      	lsls	r7, r7, #15
   35a20:	e71b      	b.n	3585a <__aeabi_fsub+0xfe>
   35a22:	0033      	movs	r3, r6
   35a24:	0004      	movs	r4, r0
   35a26:	000d      	movs	r5, r1
   35a28:	e6de      	b.n	357e8 <__aeabi_fsub+0x8c>
   35a2a:	28ff      	cmp	r0, #255	; 0xff
   35a2c:	d01e      	beq.n	35a6c <__aeabi_fsub+0x310>
   35a2e:	2480      	movs	r4, #128	; 0x80
   35a30:	04e4      	lsls	r4, r4, #19
   35a32:	4249      	negs	r1, r1
   35a34:	4323      	orrs	r3, r4
   35a36:	e7df      	b.n	359f8 <__aeabi_fsub+0x29c>
   35a38:	2e00      	cmp	r6, #0
   35a3a:	d100      	bne.n	35a3e <__aeabi_fsub+0x2e2>
   35a3c:	e6d4      	b.n	357e8 <__aeabi_fsub+0x8c>
   35a3e:	1b9f      	subs	r7, r3, r6
   35a40:	017a      	lsls	r2, r7, #5
   35a42:	d400      	bmi.n	35a46 <__aeabi_fsub+0x2ea>
   35a44:	e737      	b.n	358b6 <__aeabi_fsub+0x15a>
   35a46:	1af3      	subs	r3, r6, r3
   35a48:	000d      	movs	r5, r1
   35a4a:	e6cd      	b.n	357e8 <__aeabi_fsub+0x8c>
   35a4c:	24ff      	movs	r4, #255	; 0xff
   35a4e:	2e00      	cmp	r6, #0
   35a50:	d100      	bne.n	35a54 <__aeabi_fsub+0x2f8>
   35a52:	e6c9      	b.n	357e8 <__aeabi_fsub+0x8c>
   35a54:	2280      	movs	r2, #128	; 0x80
   35a56:	4650      	mov	r0, sl
   35a58:	03d2      	lsls	r2, r2, #15
   35a5a:	4210      	tst	r0, r2
   35a5c:	d0a4      	beq.n	359a8 <__aeabi_fsub+0x24c>
   35a5e:	4660      	mov	r0, ip
   35a60:	4210      	tst	r0, r2
   35a62:	d1a1      	bne.n	359a8 <__aeabi_fsub+0x24c>
   35a64:	0033      	movs	r3, r6
   35a66:	000d      	movs	r5, r1
   35a68:	24ff      	movs	r4, #255	; 0xff
   35a6a:	e6bd      	b.n	357e8 <__aeabi_fsub+0x8c>
   35a6c:	0033      	movs	r3, r6
   35a6e:	24ff      	movs	r4, #255	; 0xff
   35a70:	e6ba      	b.n	357e8 <__aeabi_fsub+0x8c>
   35a72:	2301      	movs	r3, #1
   35a74:	e76e      	b.n	35954 <__aeabi_fsub+0x1f8>
   35a76:	0033      	movs	r3, r6
   35a78:	0004      	movs	r4, r0
   35a7a:	e6b5      	b.n	357e8 <__aeabi_fsub+0x8c>
   35a7c:	2700      	movs	r7, #0
   35a7e:	2200      	movs	r2, #0
   35a80:	e71c      	b.n	358bc <__aeabi_fsub+0x160>
   35a82:	0033      	movs	r3, r6
   35a84:	e6b0      	b.n	357e8 <__aeabi_fsub+0x8c>
   35a86:	2301      	movs	r3, #1
   35a88:	e7c0      	b.n	35a0c <__aeabi_fsub+0x2b0>
   35a8a:	46c0      	nop			; (mov r8, r8)
   35a8c:	7dffffff 	.word	0x7dffffff
   35a90:	fbffffff 	.word	0xfbffffff

00035a94 <__aeabi_f2iz>:
   35a94:	0241      	lsls	r1, r0, #9
   35a96:	0043      	lsls	r3, r0, #1
   35a98:	0fc2      	lsrs	r2, r0, #31
   35a9a:	0a49      	lsrs	r1, r1, #9
   35a9c:	0e1b      	lsrs	r3, r3, #24
   35a9e:	2000      	movs	r0, #0
   35aa0:	2b7e      	cmp	r3, #126	; 0x7e
   35aa2:	dd0d      	ble.n	35ac0 <__aeabi_f2iz+0x2c>
   35aa4:	2b9d      	cmp	r3, #157	; 0x9d
   35aa6:	dc0c      	bgt.n	35ac2 <__aeabi_f2iz+0x2e>
   35aa8:	2080      	movs	r0, #128	; 0x80
   35aaa:	0400      	lsls	r0, r0, #16
   35aac:	4301      	orrs	r1, r0
   35aae:	2b95      	cmp	r3, #149	; 0x95
   35ab0:	dc0a      	bgt.n	35ac8 <__aeabi_f2iz+0x34>
   35ab2:	2096      	movs	r0, #150	; 0x96
   35ab4:	1ac3      	subs	r3, r0, r3
   35ab6:	40d9      	lsrs	r1, r3
   35ab8:	4248      	negs	r0, r1
   35aba:	2a00      	cmp	r2, #0
   35abc:	d100      	bne.n	35ac0 <__aeabi_f2iz+0x2c>
   35abe:	0008      	movs	r0, r1
   35ac0:	4770      	bx	lr
   35ac2:	4b03      	ldr	r3, [pc, #12]	; (35ad0 <__aeabi_f2iz+0x3c>)
   35ac4:	18d0      	adds	r0, r2, r3
   35ac6:	e7fb      	b.n	35ac0 <__aeabi_f2iz+0x2c>
   35ac8:	3b96      	subs	r3, #150	; 0x96
   35aca:	4099      	lsls	r1, r3
   35acc:	e7f4      	b.n	35ab8 <__aeabi_f2iz+0x24>
   35ace:	46c0      	nop			; (mov r8, r8)
   35ad0:	7fffffff 	.word	0x7fffffff

00035ad4 <__aeabi_i2f>:
   35ad4:	b570      	push	{r4, r5, r6, lr}
   35ad6:	2800      	cmp	r0, #0
   35ad8:	d030      	beq.n	35b3c <__aeabi_i2f+0x68>
   35ada:	17c3      	asrs	r3, r0, #31
   35adc:	18c4      	adds	r4, r0, r3
   35ade:	405c      	eors	r4, r3
   35ae0:	0fc5      	lsrs	r5, r0, #31
   35ae2:	0020      	movs	r0, r4
   35ae4:	f001 fdd2 	bl	3768c <__clzsi2>
   35ae8:	239e      	movs	r3, #158	; 0x9e
   35aea:	1a1b      	subs	r3, r3, r0
   35aec:	2b96      	cmp	r3, #150	; 0x96
   35aee:	dc0d      	bgt.n	35b0c <__aeabi_i2f+0x38>
   35af0:	2296      	movs	r2, #150	; 0x96
   35af2:	1ad2      	subs	r2, r2, r3
   35af4:	4094      	lsls	r4, r2
   35af6:	002a      	movs	r2, r5
   35af8:	0264      	lsls	r4, r4, #9
   35afa:	0a64      	lsrs	r4, r4, #9
   35afc:	b2db      	uxtb	r3, r3
   35afe:	0264      	lsls	r4, r4, #9
   35b00:	05db      	lsls	r3, r3, #23
   35b02:	0a60      	lsrs	r0, r4, #9
   35b04:	07d2      	lsls	r2, r2, #31
   35b06:	4318      	orrs	r0, r3
   35b08:	4310      	orrs	r0, r2
   35b0a:	bd70      	pop	{r4, r5, r6, pc}
   35b0c:	2b99      	cmp	r3, #153	; 0x99
   35b0e:	dc19      	bgt.n	35b44 <__aeabi_i2f+0x70>
   35b10:	2299      	movs	r2, #153	; 0x99
   35b12:	1ad2      	subs	r2, r2, r3
   35b14:	2a00      	cmp	r2, #0
   35b16:	dd29      	ble.n	35b6c <__aeabi_i2f+0x98>
   35b18:	4094      	lsls	r4, r2
   35b1a:	0022      	movs	r2, r4
   35b1c:	4c14      	ldr	r4, [pc, #80]	; (35b70 <__aeabi_i2f+0x9c>)
   35b1e:	4014      	ands	r4, r2
   35b20:	0751      	lsls	r1, r2, #29
   35b22:	d004      	beq.n	35b2e <__aeabi_i2f+0x5a>
   35b24:	210f      	movs	r1, #15
   35b26:	400a      	ands	r2, r1
   35b28:	2a04      	cmp	r2, #4
   35b2a:	d000      	beq.n	35b2e <__aeabi_i2f+0x5a>
   35b2c:	3404      	adds	r4, #4
   35b2e:	0162      	lsls	r2, r4, #5
   35b30:	d413      	bmi.n	35b5a <__aeabi_i2f+0x86>
   35b32:	01a4      	lsls	r4, r4, #6
   35b34:	0a64      	lsrs	r4, r4, #9
   35b36:	b2db      	uxtb	r3, r3
   35b38:	002a      	movs	r2, r5
   35b3a:	e7e0      	b.n	35afe <__aeabi_i2f+0x2a>
   35b3c:	2200      	movs	r2, #0
   35b3e:	2300      	movs	r3, #0
   35b40:	2400      	movs	r4, #0
   35b42:	e7dc      	b.n	35afe <__aeabi_i2f+0x2a>
   35b44:	2205      	movs	r2, #5
   35b46:	0021      	movs	r1, r4
   35b48:	1a12      	subs	r2, r2, r0
   35b4a:	40d1      	lsrs	r1, r2
   35b4c:	22b9      	movs	r2, #185	; 0xb9
   35b4e:	1ad2      	subs	r2, r2, r3
   35b50:	4094      	lsls	r4, r2
   35b52:	1e62      	subs	r2, r4, #1
   35b54:	4194      	sbcs	r4, r2
   35b56:	430c      	orrs	r4, r1
   35b58:	e7da      	b.n	35b10 <__aeabi_i2f+0x3c>
   35b5a:	4b05      	ldr	r3, [pc, #20]	; (35b70 <__aeabi_i2f+0x9c>)
   35b5c:	002a      	movs	r2, r5
   35b5e:	401c      	ands	r4, r3
   35b60:	239f      	movs	r3, #159	; 0x9f
   35b62:	01a4      	lsls	r4, r4, #6
   35b64:	1a1b      	subs	r3, r3, r0
   35b66:	0a64      	lsrs	r4, r4, #9
   35b68:	b2db      	uxtb	r3, r3
   35b6a:	e7c8      	b.n	35afe <__aeabi_i2f+0x2a>
   35b6c:	0022      	movs	r2, r4
   35b6e:	e7d5      	b.n	35b1c <__aeabi_i2f+0x48>
   35b70:	fbffffff 	.word	0xfbffffff

00035b74 <__aeabi_ui2f>:
   35b74:	b510      	push	{r4, lr}
   35b76:	1e04      	subs	r4, r0, #0
   35b78:	d027      	beq.n	35bca <__aeabi_ui2f+0x56>
   35b7a:	f001 fd87 	bl	3768c <__clzsi2>
   35b7e:	239e      	movs	r3, #158	; 0x9e
   35b80:	1a1b      	subs	r3, r3, r0
   35b82:	2b96      	cmp	r3, #150	; 0x96
   35b84:	dc0a      	bgt.n	35b9c <__aeabi_ui2f+0x28>
   35b86:	2296      	movs	r2, #150	; 0x96
   35b88:	1ad2      	subs	r2, r2, r3
   35b8a:	4094      	lsls	r4, r2
   35b8c:	0264      	lsls	r4, r4, #9
   35b8e:	0a64      	lsrs	r4, r4, #9
   35b90:	b2db      	uxtb	r3, r3
   35b92:	0264      	lsls	r4, r4, #9
   35b94:	05db      	lsls	r3, r3, #23
   35b96:	0a60      	lsrs	r0, r4, #9
   35b98:	4318      	orrs	r0, r3
   35b9a:	bd10      	pop	{r4, pc}
   35b9c:	2b99      	cmp	r3, #153	; 0x99
   35b9e:	dc17      	bgt.n	35bd0 <__aeabi_ui2f+0x5c>
   35ba0:	2299      	movs	r2, #153	; 0x99
   35ba2:	1ad2      	subs	r2, r2, r3
   35ba4:	2a00      	cmp	r2, #0
   35ba6:	dd27      	ble.n	35bf8 <__aeabi_ui2f+0x84>
   35ba8:	4094      	lsls	r4, r2
   35baa:	0022      	movs	r2, r4
   35bac:	4c13      	ldr	r4, [pc, #76]	; (35bfc <__aeabi_ui2f+0x88>)
   35bae:	4014      	ands	r4, r2
   35bb0:	0751      	lsls	r1, r2, #29
   35bb2:	d004      	beq.n	35bbe <__aeabi_ui2f+0x4a>
   35bb4:	210f      	movs	r1, #15
   35bb6:	400a      	ands	r2, r1
   35bb8:	2a04      	cmp	r2, #4
   35bba:	d000      	beq.n	35bbe <__aeabi_ui2f+0x4a>
   35bbc:	3404      	adds	r4, #4
   35bbe:	0162      	lsls	r2, r4, #5
   35bc0:	d412      	bmi.n	35be8 <__aeabi_ui2f+0x74>
   35bc2:	01a4      	lsls	r4, r4, #6
   35bc4:	0a64      	lsrs	r4, r4, #9
   35bc6:	b2db      	uxtb	r3, r3
   35bc8:	e7e3      	b.n	35b92 <__aeabi_ui2f+0x1e>
   35bca:	2300      	movs	r3, #0
   35bcc:	2400      	movs	r4, #0
   35bce:	e7e0      	b.n	35b92 <__aeabi_ui2f+0x1e>
   35bd0:	22b9      	movs	r2, #185	; 0xb9
   35bd2:	0021      	movs	r1, r4
   35bd4:	1ad2      	subs	r2, r2, r3
   35bd6:	4091      	lsls	r1, r2
   35bd8:	000a      	movs	r2, r1
   35bda:	1e51      	subs	r1, r2, #1
   35bdc:	418a      	sbcs	r2, r1
   35bde:	2105      	movs	r1, #5
   35be0:	1a09      	subs	r1, r1, r0
   35be2:	40cc      	lsrs	r4, r1
   35be4:	4314      	orrs	r4, r2
   35be6:	e7db      	b.n	35ba0 <__aeabi_ui2f+0x2c>
   35be8:	4b04      	ldr	r3, [pc, #16]	; (35bfc <__aeabi_ui2f+0x88>)
   35bea:	401c      	ands	r4, r3
   35bec:	239f      	movs	r3, #159	; 0x9f
   35bee:	01a4      	lsls	r4, r4, #6
   35bf0:	1a1b      	subs	r3, r3, r0
   35bf2:	0a64      	lsrs	r4, r4, #9
   35bf4:	b2db      	uxtb	r3, r3
   35bf6:	e7cc      	b.n	35b92 <__aeabi_ui2f+0x1e>
   35bf8:	0022      	movs	r2, r4
   35bfa:	e7d7      	b.n	35bac <__aeabi_ui2f+0x38>
   35bfc:	fbffffff 	.word	0xfbffffff

00035c00 <__aeabi_dadd>:
   35c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35c02:	4645      	mov	r5, r8
   35c04:	46de      	mov	lr, fp
   35c06:	4657      	mov	r7, sl
   35c08:	464e      	mov	r6, r9
   35c0a:	030c      	lsls	r4, r1, #12
   35c0c:	b5e0      	push	{r5, r6, r7, lr}
   35c0e:	004e      	lsls	r6, r1, #1
   35c10:	0fc9      	lsrs	r1, r1, #31
   35c12:	4688      	mov	r8, r1
   35c14:	000d      	movs	r5, r1
   35c16:	0a61      	lsrs	r1, r4, #9
   35c18:	0f44      	lsrs	r4, r0, #29
   35c1a:	430c      	orrs	r4, r1
   35c1c:	00c7      	lsls	r7, r0, #3
   35c1e:	0319      	lsls	r1, r3, #12
   35c20:	0058      	lsls	r0, r3, #1
   35c22:	0fdb      	lsrs	r3, r3, #31
   35c24:	469b      	mov	fp, r3
   35c26:	0a4b      	lsrs	r3, r1, #9
   35c28:	0f51      	lsrs	r1, r2, #29
   35c2a:	430b      	orrs	r3, r1
   35c2c:	0d76      	lsrs	r6, r6, #21
   35c2e:	0d40      	lsrs	r0, r0, #21
   35c30:	0019      	movs	r1, r3
   35c32:	00d2      	lsls	r2, r2, #3
   35c34:	45d8      	cmp	r8, fp
   35c36:	d100      	bne.n	35c3a <__aeabi_dadd+0x3a>
   35c38:	e0ae      	b.n	35d98 <__aeabi_dadd+0x198>
   35c3a:	1a35      	subs	r5, r6, r0
   35c3c:	2d00      	cmp	r5, #0
   35c3e:	dc00      	bgt.n	35c42 <__aeabi_dadd+0x42>
   35c40:	e0f6      	b.n	35e30 <__aeabi_dadd+0x230>
   35c42:	2800      	cmp	r0, #0
   35c44:	d10f      	bne.n	35c66 <__aeabi_dadd+0x66>
   35c46:	4313      	orrs	r3, r2
   35c48:	d100      	bne.n	35c4c <__aeabi_dadd+0x4c>
   35c4a:	e0db      	b.n	35e04 <__aeabi_dadd+0x204>
   35c4c:	1e6b      	subs	r3, r5, #1
   35c4e:	2b00      	cmp	r3, #0
   35c50:	d000      	beq.n	35c54 <__aeabi_dadd+0x54>
   35c52:	e137      	b.n	35ec4 <__aeabi_dadd+0x2c4>
   35c54:	1aba      	subs	r2, r7, r2
   35c56:	4297      	cmp	r7, r2
   35c58:	41bf      	sbcs	r7, r7
   35c5a:	1a64      	subs	r4, r4, r1
   35c5c:	427f      	negs	r7, r7
   35c5e:	1be4      	subs	r4, r4, r7
   35c60:	2601      	movs	r6, #1
   35c62:	0017      	movs	r7, r2
   35c64:	e024      	b.n	35cb0 <__aeabi_dadd+0xb0>
   35c66:	4bc6      	ldr	r3, [pc, #792]	; (35f80 <__aeabi_dadd+0x380>)
   35c68:	429e      	cmp	r6, r3
   35c6a:	d04d      	beq.n	35d08 <__aeabi_dadd+0x108>
   35c6c:	2380      	movs	r3, #128	; 0x80
   35c6e:	041b      	lsls	r3, r3, #16
   35c70:	4319      	orrs	r1, r3
   35c72:	2d38      	cmp	r5, #56	; 0x38
   35c74:	dd00      	ble.n	35c78 <__aeabi_dadd+0x78>
   35c76:	e107      	b.n	35e88 <__aeabi_dadd+0x288>
   35c78:	2d1f      	cmp	r5, #31
   35c7a:	dd00      	ble.n	35c7e <__aeabi_dadd+0x7e>
   35c7c:	e138      	b.n	35ef0 <__aeabi_dadd+0x2f0>
   35c7e:	2020      	movs	r0, #32
   35c80:	1b43      	subs	r3, r0, r5
   35c82:	469a      	mov	sl, r3
   35c84:	000b      	movs	r3, r1
   35c86:	4650      	mov	r0, sl
   35c88:	4083      	lsls	r3, r0
   35c8a:	4699      	mov	r9, r3
   35c8c:	0013      	movs	r3, r2
   35c8e:	4648      	mov	r0, r9
   35c90:	40eb      	lsrs	r3, r5
   35c92:	4318      	orrs	r0, r3
   35c94:	0003      	movs	r3, r0
   35c96:	4650      	mov	r0, sl
   35c98:	4082      	lsls	r2, r0
   35c9a:	1e50      	subs	r0, r2, #1
   35c9c:	4182      	sbcs	r2, r0
   35c9e:	40e9      	lsrs	r1, r5
   35ca0:	431a      	orrs	r2, r3
   35ca2:	1aba      	subs	r2, r7, r2
   35ca4:	1a61      	subs	r1, r4, r1
   35ca6:	4297      	cmp	r7, r2
   35ca8:	41a4      	sbcs	r4, r4
   35caa:	0017      	movs	r7, r2
   35cac:	4264      	negs	r4, r4
   35cae:	1b0c      	subs	r4, r1, r4
   35cb0:	0223      	lsls	r3, r4, #8
   35cb2:	d562      	bpl.n	35d7a <__aeabi_dadd+0x17a>
   35cb4:	0264      	lsls	r4, r4, #9
   35cb6:	0a65      	lsrs	r5, r4, #9
   35cb8:	2d00      	cmp	r5, #0
   35cba:	d100      	bne.n	35cbe <__aeabi_dadd+0xbe>
   35cbc:	e0df      	b.n	35e7e <__aeabi_dadd+0x27e>
   35cbe:	0028      	movs	r0, r5
   35cc0:	f001 fce4 	bl	3768c <__clzsi2>
   35cc4:	0003      	movs	r3, r0
   35cc6:	3b08      	subs	r3, #8
   35cc8:	2b1f      	cmp	r3, #31
   35cca:	dd00      	ble.n	35cce <__aeabi_dadd+0xce>
   35ccc:	e0d2      	b.n	35e74 <__aeabi_dadd+0x274>
   35cce:	2220      	movs	r2, #32
   35cd0:	003c      	movs	r4, r7
   35cd2:	1ad2      	subs	r2, r2, r3
   35cd4:	409d      	lsls	r5, r3
   35cd6:	40d4      	lsrs	r4, r2
   35cd8:	409f      	lsls	r7, r3
   35cda:	4325      	orrs	r5, r4
   35cdc:	429e      	cmp	r6, r3
   35cde:	dd00      	ble.n	35ce2 <__aeabi_dadd+0xe2>
   35ce0:	e0c4      	b.n	35e6c <__aeabi_dadd+0x26c>
   35ce2:	1b9e      	subs	r6, r3, r6
   35ce4:	1c73      	adds	r3, r6, #1
   35ce6:	2b1f      	cmp	r3, #31
   35ce8:	dd00      	ble.n	35cec <__aeabi_dadd+0xec>
   35cea:	e0f1      	b.n	35ed0 <__aeabi_dadd+0x2d0>
   35cec:	2220      	movs	r2, #32
   35cee:	0038      	movs	r0, r7
   35cf0:	0029      	movs	r1, r5
   35cf2:	1ad2      	subs	r2, r2, r3
   35cf4:	40d8      	lsrs	r0, r3
   35cf6:	4091      	lsls	r1, r2
   35cf8:	4097      	lsls	r7, r2
   35cfa:	002c      	movs	r4, r5
   35cfc:	4301      	orrs	r1, r0
   35cfe:	1e78      	subs	r0, r7, #1
   35d00:	4187      	sbcs	r7, r0
   35d02:	40dc      	lsrs	r4, r3
   35d04:	2600      	movs	r6, #0
   35d06:	430f      	orrs	r7, r1
   35d08:	077b      	lsls	r3, r7, #29
   35d0a:	d009      	beq.n	35d20 <__aeabi_dadd+0x120>
   35d0c:	230f      	movs	r3, #15
   35d0e:	403b      	ands	r3, r7
   35d10:	2b04      	cmp	r3, #4
   35d12:	d005      	beq.n	35d20 <__aeabi_dadd+0x120>
   35d14:	1d3b      	adds	r3, r7, #4
   35d16:	42bb      	cmp	r3, r7
   35d18:	41bf      	sbcs	r7, r7
   35d1a:	427f      	negs	r7, r7
   35d1c:	19e4      	adds	r4, r4, r7
   35d1e:	001f      	movs	r7, r3
   35d20:	0223      	lsls	r3, r4, #8
   35d22:	d52c      	bpl.n	35d7e <__aeabi_dadd+0x17e>
   35d24:	4b96      	ldr	r3, [pc, #600]	; (35f80 <__aeabi_dadd+0x380>)
   35d26:	3601      	adds	r6, #1
   35d28:	429e      	cmp	r6, r3
   35d2a:	d100      	bne.n	35d2e <__aeabi_dadd+0x12e>
   35d2c:	e09a      	b.n	35e64 <__aeabi_dadd+0x264>
   35d2e:	4645      	mov	r5, r8
   35d30:	4b94      	ldr	r3, [pc, #592]	; (35f84 <__aeabi_dadd+0x384>)
   35d32:	08ff      	lsrs	r7, r7, #3
   35d34:	401c      	ands	r4, r3
   35d36:	0760      	lsls	r0, r4, #29
   35d38:	0576      	lsls	r6, r6, #21
   35d3a:	0264      	lsls	r4, r4, #9
   35d3c:	4307      	orrs	r7, r0
   35d3e:	0b24      	lsrs	r4, r4, #12
   35d40:	0d76      	lsrs	r6, r6, #21
   35d42:	2100      	movs	r1, #0
   35d44:	0324      	lsls	r4, r4, #12
   35d46:	0b23      	lsrs	r3, r4, #12
   35d48:	0d0c      	lsrs	r4, r1, #20
   35d4a:	4a8f      	ldr	r2, [pc, #572]	; (35f88 <__aeabi_dadd+0x388>)
   35d4c:	0524      	lsls	r4, r4, #20
   35d4e:	431c      	orrs	r4, r3
   35d50:	4014      	ands	r4, r2
   35d52:	0533      	lsls	r3, r6, #20
   35d54:	4323      	orrs	r3, r4
   35d56:	005b      	lsls	r3, r3, #1
   35d58:	07ed      	lsls	r5, r5, #31
   35d5a:	085b      	lsrs	r3, r3, #1
   35d5c:	432b      	orrs	r3, r5
   35d5e:	0038      	movs	r0, r7
   35d60:	0019      	movs	r1, r3
   35d62:	bc3c      	pop	{r2, r3, r4, r5}
   35d64:	4690      	mov	r8, r2
   35d66:	4699      	mov	r9, r3
   35d68:	46a2      	mov	sl, r4
   35d6a:	46ab      	mov	fp, r5
   35d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35d6e:	4664      	mov	r4, ip
   35d70:	4304      	orrs	r4, r0
   35d72:	d100      	bne.n	35d76 <__aeabi_dadd+0x176>
   35d74:	e211      	b.n	3619a <__aeabi_dadd+0x59a>
   35d76:	0004      	movs	r4, r0
   35d78:	4667      	mov	r7, ip
   35d7a:	077b      	lsls	r3, r7, #29
   35d7c:	d1c6      	bne.n	35d0c <__aeabi_dadd+0x10c>
   35d7e:	4645      	mov	r5, r8
   35d80:	0760      	lsls	r0, r4, #29
   35d82:	08ff      	lsrs	r7, r7, #3
   35d84:	4307      	orrs	r7, r0
   35d86:	08e4      	lsrs	r4, r4, #3
   35d88:	4b7d      	ldr	r3, [pc, #500]	; (35f80 <__aeabi_dadd+0x380>)
   35d8a:	429e      	cmp	r6, r3
   35d8c:	d030      	beq.n	35df0 <__aeabi_dadd+0x1f0>
   35d8e:	0324      	lsls	r4, r4, #12
   35d90:	0576      	lsls	r6, r6, #21
   35d92:	0b24      	lsrs	r4, r4, #12
   35d94:	0d76      	lsrs	r6, r6, #21
   35d96:	e7d4      	b.n	35d42 <__aeabi_dadd+0x142>
   35d98:	1a33      	subs	r3, r6, r0
   35d9a:	469a      	mov	sl, r3
   35d9c:	2b00      	cmp	r3, #0
   35d9e:	dd78      	ble.n	35e92 <__aeabi_dadd+0x292>
   35da0:	2800      	cmp	r0, #0
   35da2:	d031      	beq.n	35e08 <__aeabi_dadd+0x208>
   35da4:	4876      	ldr	r0, [pc, #472]	; (35f80 <__aeabi_dadd+0x380>)
   35da6:	4286      	cmp	r6, r0
   35da8:	d0ae      	beq.n	35d08 <__aeabi_dadd+0x108>
   35daa:	2080      	movs	r0, #128	; 0x80
   35dac:	0400      	lsls	r0, r0, #16
   35dae:	4301      	orrs	r1, r0
   35db0:	4653      	mov	r3, sl
   35db2:	2b38      	cmp	r3, #56	; 0x38
   35db4:	dc00      	bgt.n	35db8 <__aeabi_dadd+0x1b8>
   35db6:	e0e9      	b.n	35f8c <__aeabi_dadd+0x38c>
   35db8:	430a      	orrs	r2, r1
   35dba:	1e51      	subs	r1, r2, #1
   35dbc:	418a      	sbcs	r2, r1
   35dbe:	2100      	movs	r1, #0
   35dc0:	19d2      	adds	r2, r2, r7
   35dc2:	42ba      	cmp	r2, r7
   35dc4:	41bf      	sbcs	r7, r7
   35dc6:	1909      	adds	r1, r1, r4
   35dc8:	427c      	negs	r4, r7
   35dca:	0017      	movs	r7, r2
   35dcc:	190c      	adds	r4, r1, r4
   35dce:	0223      	lsls	r3, r4, #8
   35dd0:	d5d3      	bpl.n	35d7a <__aeabi_dadd+0x17a>
   35dd2:	4b6b      	ldr	r3, [pc, #428]	; (35f80 <__aeabi_dadd+0x380>)
   35dd4:	3601      	adds	r6, #1
   35dd6:	429e      	cmp	r6, r3
   35dd8:	d100      	bne.n	35ddc <__aeabi_dadd+0x1dc>
   35dda:	e13a      	b.n	36052 <__aeabi_dadd+0x452>
   35ddc:	2001      	movs	r0, #1
   35dde:	4b69      	ldr	r3, [pc, #420]	; (35f84 <__aeabi_dadd+0x384>)
   35de0:	401c      	ands	r4, r3
   35de2:	087b      	lsrs	r3, r7, #1
   35de4:	4007      	ands	r7, r0
   35de6:	431f      	orrs	r7, r3
   35de8:	07e0      	lsls	r0, r4, #31
   35dea:	4307      	orrs	r7, r0
   35dec:	0864      	lsrs	r4, r4, #1
   35dee:	e78b      	b.n	35d08 <__aeabi_dadd+0x108>
   35df0:	0023      	movs	r3, r4
   35df2:	433b      	orrs	r3, r7
   35df4:	d100      	bne.n	35df8 <__aeabi_dadd+0x1f8>
   35df6:	e1cb      	b.n	36190 <__aeabi_dadd+0x590>
   35df8:	2280      	movs	r2, #128	; 0x80
   35dfa:	0312      	lsls	r2, r2, #12
   35dfc:	4314      	orrs	r4, r2
   35dfe:	0324      	lsls	r4, r4, #12
   35e00:	0b24      	lsrs	r4, r4, #12
   35e02:	e79e      	b.n	35d42 <__aeabi_dadd+0x142>
   35e04:	002e      	movs	r6, r5
   35e06:	e77f      	b.n	35d08 <__aeabi_dadd+0x108>
   35e08:	0008      	movs	r0, r1
   35e0a:	4310      	orrs	r0, r2
   35e0c:	d100      	bne.n	35e10 <__aeabi_dadd+0x210>
   35e0e:	e0b4      	b.n	35f7a <__aeabi_dadd+0x37a>
   35e10:	1e58      	subs	r0, r3, #1
   35e12:	2800      	cmp	r0, #0
   35e14:	d000      	beq.n	35e18 <__aeabi_dadd+0x218>
   35e16:	e0de      	b.n	35fd6 <__aeabi_dadd+0x3d6>
   35e18:	18ba      	adds	r2, r7, r2
   35e1a:	42ba      	cmp	r2, r7
   35e1c:	419b      	sbcs	r3, r3
   35e1e:	1864      	adds	r4, r4, r1
   35e20:	425b      	negs	r3, r3
   35e22:	18e4      	adds	r4, r4, r3
   35e24:	0017      	movs	r7, r2
   35e26:	2601      	movs	r6, #1
   35e28:	0223      	lsls	r3, r4, #8
   35e2a:	d5a6      	bpl.n	35d7a <__aeabi_dadd+0x17a>
   35e2c:	2602      	movs	r6, #2
   35e2e:	e7d5      	b.n	35ddc <__aeabi_dadd+0x1dc>
   35e30:	2d00      	cmp	r5, #0
   35e32:	d16e      	bne.n	35f12 <__aeabi_dadd+0x312>
   35e34:	1c70      	adds	r0, r6, #1
   35e36:	0540      	lsls	r0, r0, #21
   35e38:	0d40      	lsrs	r0, r0, #21
   35e3a:	2801      	cmp	r0, #1
   35e3c:	dc00      	bgt.n	35e40 <__aeabi_dadd+0x240>
   35e3e:	e0f9      	b.n	36034 <__aeabi_dadd+0x434>
   35e40:	1ab8      	subs	r0, r7, r2
   35e42:	4684      	mov	ip, r0
   35e44:	4287      	cmp	r7, r0
   35e46:	4180      	sbcs	r0, r0
   35e48:	1ae5      	subs	r5, r4, r3
   35e4a:	4240      	negs	r0, r0
   35e4c:	1a2d      	subs	r5, r5, r0
   35e4e:	0228      	lsls	r0, r5, #8
   35e50:	d400      	bmi.n	35e54 <__aeabi_dadd+0x254>
   35e52:	e089      	b.n	35f68 <__aeabi_dadd+0x368>
   35e54:	1bd7      	subs	r7, r2, r7
   35e56:	42ba      	cmp	r2, r7
   35e58:	4192      	sbcs	r2, r2
   35e5a:	1b1c      	subs	r4, r3, r4
   35e5c:	4252      	negs	r2, r2
   35e5e:	1aa5      	subs	r5, r4, r2
   35e60:	46d8      	mov	r8, fp
   35e62:	e729      	b.n	35cb8 <__aeabi_dadd+0xb8>
   35e64:	4645      	mov	r5, r8
   35e66:	2400      	movs	r4, #0
   35e68:	2700      	movs	r7, #0
   35e6a:	e76a      	b.n	35d42 <__aeabi_dadd+0x142>
   35e6c:	4c45      	ldr	r4, [pc, #276]	; (35f84 <__aeabi_dadd+0x384>)
   35e6e:	1af6      	subs	r6, r6, r3
   35e70:	402c      	ands	r4, r5
   35e72:	e749      	b.n	35d08 <__aeabi_dadd+0x108>
   35e74:	003d      	movs	r5, r7
   35e76:	3828      	subs	r0, #40	; 0x28
   35e78:	4085      	lsls	r5, r0
   35e7a:	2700      	movs	r7, #0
   35e7c:	e72e      	b.n	35cdc <__aeabi_dadd+0xdc>
   35e7e:	0038      	movs	r0, r7
   35e80:	f001 fc04 	bl	3768c <__clzsi2>
   35e84:	3020      	adds	r0, #32
   35e86:	e71d      	b.n	35cc4 <__aeabi_dadd+0xc4>
   35e88:	430a      	orrs	r2, r1
   35e8a:	1e51      	subs	r1, r2, #1
   35e8c:	418a      	sbcs	r2, r1
   35e8e:	2100      	movs	r1, #0
   35e90:	e707      	b.n	35ca2 <__aeabi_dadd+0xa2>
   35e92:	2b00      	cmp	r3, #0
   35e94:	d000      	beq.n	35e98 <__aeabi_dadd+0x298>
   35e96:	e0f3      	b.n	36080 <__aeabi_dadd+0x480>
   35e98:	1c70      	adds	r0, r6, #1
   35e9a:	0543      	lsls	r3, r0, #21
   35e9c:	0d5b      	lsrs	r3, r3, #21
   35e9e:	2b01      	cmp	r3, #1
   35ea0:	dc00      	bgt.n	35ea4 <__aeabi_dadd+0x2a4>
   35ea2:	e0ad      	b.n	36000 <__aeabi_dadd+0x400>
   35ea4:	4b36      	ldr	r3, [pc, #216]	; (35f80 <__aeabi_dadd+0x380>)
   35ea6:	4298      	cmp	r0, r3
   35ea8:	d100      	bne.n	35eac <__aeabi_dadd+0x2ac>
   35eaa:	e0d1      	b.n	36050 <__aeabi_dadd+0x450>
   35eac:	18ba      	adds	r2, r7, r2
   35eae:	42ba      	cmp	r2, r7
   35eb0:	41bf      	sbcs	r7, r7
   35eb2:	1864      	adds	r4, r4, r1
   35eb4:	427f      	negs	r7, r7
   35eb6:	19e4      	adds	r4, r4, r7
   35eb8:	07e7      	lsls	r7, r4, #31
   35eba:	0852      	lsrs	r2, r2, #1
   35ebc:	4317      	orrs	r7, r2
   35ebe:	0864      	lsrs	r4, r4, #1
   35ec0:	0006      	movs	r6, r0
   35ec2:	e721      	b.n	35d08 <__aeabi_dadd+0x108>
   35ec4:	482e      	ldr	r0, [pc, #184]	; (35f80 <__aeabi_dadd+0x380>)
   35ec6:	4285      	cmp	r5, r0
   35ec8:	d100      	bne.n	35ecc <__aeabi_dadd+0x2cc>
   35eca:	e093      	b.n	35ff4 <__aeabi_dadd+0x3f4>
   35ecc:	001d      	movs	r5, r3
   35ece:	e6d0      	b.n	35c72 <__aeabi_dadd+0x72>
   35ed0:	0029      	movs	r1, r5
   35ed2:	3e1f      	subs	r6, #31
   35ed4:	40f1      	lsrs	r1, r6
   35ed6:	2b20      	cmp	r3, #32
   35ed8:	d100      	bne.n	35edc <__aeabi_dadd+0x2dc>
   35eda:	e08d      	b.n	35ff8 <__aeabi_dadd+0x3f8>
   35edc:	2240      	movs	r2, #64	; 0x40
   35ede:	1ad3      	subs	r3, r2, r3
   35ee0:	409d      	lsls	r5, r3
   35ee2:	432f      	orrs	r7, r5
   35ee4:	1e7d      	subs	r5, r7, #1
   35ee6:	41af      	sbcs	r7, r5
   35ee8:	2400      	movs	r4, #0
   35eea:	430f      	orrs	r7, r1
   35eec:	2600      	movs	r6, #0
   35eee:	e744      	b.n	35d7a <__aeabi_dadd+0x17a>
   35ef0:	002b      	movs	r3, r5
   35ef2:	0008      	movs	r0, r1
   35ef4:	3b20      	subs	r3, #32
   35ef6:	40d8      	lsrs	r0, r3
   35ef8:	0003      	movs	r3, r0
   35efa:	2d20      	cmp	r5, #32
   35efc:	d100      	bne.n	35f00 <__aeabi_dadd+0x300>
   35efe:	e07d      	b.n	35ffc <__aeabi_dadd+0x3fc>
   35f00:	2040      	movs	r0, #64	; 0x40
   35f02:	1b45      	subs	r5, r0, r5
   35f04:	40a9      	lsls	r1, r5
   35f06:	430a      	orrs	r2, r1
   35f08:	1e51      	subs	r1, r2, #1
   35f0a:	418a      	sbcs	r2, r1
   35f0c:	2100      	movs	r1, #0
   35f0e:	431a      	orrs	r2, r3
   35f10:	e6c7      	b.n	35ca2 <__aeabi_dadd+0xa2>
   35f12:	2e00      	cmp	r6, #0
   35f14:	d050      	beq.n	35fb8 <__aeabi_dadd+0x3b8>
   35f16:	4e1a      	ldr	r6, [pc, #104]	; (35f80 <__aeabi_dadd+0x380>)
   35f18:	42b0      	cmp	r0, r6
   35f1a:	d057      	beq.n	35fcc <__aeabi_dadd+0x3cc>
   35f1c:	2680      	movs	r6, #128	; 0x80
   35f1e:	426b      	negs	r3, r5
   35f20:	4699      	mov	r9, r3
   35f22:	0436      	lsls	r6, r6, #16
   35f24:	4334      	orrs	r4, r6
   35f26:	464b      	mov	r3, r9
   35f28:	2b38      	cmp	r3, #56	; 0x38
   35f2a:	dd00      	ble.n	35f2e <__aeabi_dadd+0x32e>
   35f2c:	e0d6      	b.n	360dc <__aeabi_dadd+0x4dc>
   35f2e:	2b1f      	cmp	r3, #31
   35f30:	dd00      	ble.n	35f34 <__aeabi_dadd+0x334>
   35f32:	e135      	b.n	361a0 <__aeabi_dadd+0x5a0>
   35f34:	2620      	movs	r6, #32
   35f36:	1af5      	subs	r5, r6, r3
   35f38:	0026      	movs	r6, r4
   35f3a:	40ae      	lsls	r6, r5
   35f3c:	46b2      	mov	sl, r6
   35f3e:	003e      	movs	r6, r7
   35f40:	40de      	lsrs	r6, r3
   35f42:	46ac      	mov	ip, r5
   35f44:	0035      	movs	r5, r6
   35f46:	4656      	mov	r6, sl
   35f48:	432e      	orrs	r6, r5
   35f4a:	4665      	mov	r5, ip
   35f4c:	40af      	lsls	r7, r5
   35f4e:	1e7d      	subs	r5, r7, #1
   35f50:	41af      	sbcs	r7, r5
   35f52:	40dc      	lsrs	r4, r3
   35f54:	4337      	orrs	r7, r6
   35f56:	1bd7      	subs	r7, r2, r7
   35f58:	42ba      	cmp	r2, r7
   35f5a:	4192      	sbcs	r2, r2
   35f5c:	1b0c      	subs	r4, r1, r4
   35f5e:	4252      	negs	r2, r2
   35f60:	1aa4      	subs	r4, r4, r2
   35f62:	0006      	movs	r6, r0
   35f64:	46d8      	mov	r8, fp
   35f66:	e6a3      	b.n	35cb0 <__aeabi_dadd+0xb0>
   35f68:	4664      	mov	r4, ip
   35f6a:	4667      	mov	r7, ip
   35f6c:	432c      	orrs	r4, r5
   35f6e:	d000      	beq.n	35f72 <__aeabi_dadd+0x372>
   35f70:	e6a2      	b.n	35cb8 <__aeabi_dadd+0xb8>
   35f72:	2500      	movs	r5, #0
   35f74:	2600      	movs	r6, #0
   35f76:	2700      	movs	r7, #0
   35f78:	e706      	b.n	35d88 <__aeabi_dadd+0x188>
   35f7a:	001e      	movs	r6, r3
   35f7c:	e6c4      	b.n	35d08 <__aeabi_dadd+0x108>
   35f7e:	46c0      	nop			; (mov r8, r8)
   35f80:	000007ff 	.word	0x000007ff
   35f84:	ff7fffff 	.word	0xff7fffff
   35f88:	800fffff 	.word	0x800fffff
   35f8c:	2b1f      	cmp	r3, #31
   35f8e:	dc63      	bgt.n	36058 <__aeabi_dadd+0x458>
   35f90:	2020      	movs	r0, #32
   35f92:	1ac3      	subs	r3, r0, r3
   35f94:	0008      	movs	r0, r1
   35f96:	4098      	lsls	r0, r3
   35f98:	469c      	mov	ip, r3
   35f9a:	4683      	mov	fp, r0
   35f9c:	4653      	mov	r3, sl
   35f9e:	0010      	movs	r0, r2
   35fa0:	40d8      	lsrs	r0, r3
   35fa2:	0003      	movs	r3, r0
   35fa4:	4658      	mov	r0, fp
   35fa6:	4318      	orrs	r0, r3
   35fa8:	4663      	mov	r3, ip
   35faa:	409a      	lsls	r2, r3
   35fac:	1e53      	subs	r3, r2, #1
   35fae:	419a      	sbcs	r2, r3
   35fb0:	4653      	mov	r3, sl
   35fb2:	4302      	orrs	r2, r0
   35fb4:	40d9      	lsrs	r1, r3
   35fb6:	e703      	b.n	35dc0 <__aeabi_dadd+0x1c0>
   35fb8:	0026      	movs	r6, r4
   35fba:	433e      	orrs	r6, r7
   35fbc:	d006      	beq.n	35fcc <__aeabi_dadd+0x3cc>
   35fbe:	43eb      	mvns	r3, r5
   35fc0:	4699      	mov	r9, r3
   35fc2:	2b00      	cmp	r3, #0
   35fc4:	d0c7      	beq.n	35f56 <__aeabi_dadd+0x356>
   35fc6:	4e94      	ldr	r6, [pc, #592]	; (36218 <__aeabi_dadd+0x618>)
   35fc8:	42b0      	cmp	r0, r6
   35fca:	d1ac      	bne.n	35f26 <__aeabi_dadd+0x326>
   35fcc:	000c      	movs	r4, r1
   35fce:	0017      	movs	r7, r2
   35fd0:	0006      	movs	r6, r0
   35fd2:	46d8      	mov	r8, fp
   35fd4:	e698      	b.n	35d08 <__aeabi_dadd+0x108>
   35fd6:	4b90      	ldr	r3, [pc, #576]	; (36218 <__aeabi_dadd+0x618>)
   35fd8:	459a      	cmp	sl, r3
   35fda:	d00b      	beq.n	35ff4 <__aeabi_dadd+0x3f4>
   35fdc:	4682      	mov	sl, r0
   35fde:	e6e7      	b.n	35db0 <__aeabi_dadd+0x1b0>
   35fe0:	2800      	cmp	r0, #0
   35fe2:	d000      	beq.n	35fe6 <__aeabi_dadd+0x3e6>
   35fe4:	e09e      	b.n	36124 <__aeabi_dadd+0x524>
   35fe6:	0018      	movs	r0, r3
   35fe8:	4310      	orrs	r0, r2
   35fea:	d100      	bne.n	35fee <__aeabi_dadd+0x3ee>
   35fec:	e0e9      	b.n	361c2 <__aeabi_dadd+0x5c2>
   35fee:	001c      	movs	r4, r3
   35ff0:	0017      	movs	r7, r2
   35ff2:	46d8      	mov	r8, fp
   35ff4:	4e88      	ldr	r6, [pc, #544]	; (36218 <__aeabi_dadd+0x618>)
   35ff6:	e687      	b.n	35d08 <__aeabi_dadd+0x108>
   35ff8:	2500      	movs	r5, #0
   35ffa:	e772      	b.n	35ee2 <__aeabi_dadd+0x2e2>
   35ffc:	2100      	movs	r1, #0
   35ffe:	e782      	b.n	35f06 <__aeabi_dadd+0x306>
   36000:	0023      	movs	r3, r4
   36002:	433b      	orrs	r3, r7
   36004:	2e00      	cmp	r6, #0
   36006:	d000      	beq.n	3600a <__aeabi_dadd+0x40a>
   36008:	e0ab      	b.n	36162 <__aeabi_dadd+0x562>
   3600a:	2b00      	cmp	r3, #0
   3600c:	d100      	bne.n	36010 <__aeabi_dadd+0x410>
   3600e:	e0e7      	b.n	361e0 <__aeabi_dadd+0x5e0>
   36010:	000b      	movs	r3, r1
   36012:	4313      	orrs	r3, r2
   36014:	d100      	bne.n	36018 <__aeabi_dadd+0x418>
   36016:	e677      	b.n	35d08 <__aeabi_dadd+0x108>
   36018:	18ba      	adds	r2, r7, r2
   3601a:	42ba      	cmp	r2, r7
   3601c:	41bf      	sbcs	r7, r7
   3601e:	1864      	adds	r4, r4, r1
   36020:	427f      	negs	r7, r7
   36022:	19e4      	adds	r4, r4, r7
   36024:	0223      	lsls	r3, r4, #8
   36026:	d400      	bmi.n	3602a <__aeabi_dadd+0x42a>
   36028:	e0f2      	b.n	36210 <__aeabi_dadd+0x610>
   3602a:	4b7c      	ldr	r3, [pc, #496]	; (3621c <__aeabi_dadd+0x61c>)
   3602c:	0017      	movs	r7, r2
   3602e:	401c      	ands	r4, r3
   36030:	0006      	movs	r6, r0
   36032:	e669      	b.n	35d08 <__aeabi_dadd+0x108>
   36034:	0020      	movs	r0, r4
   36036:	4338      	orrs	r0, r7
   36038:	2e00      	cmp	r6, #0
   3603a:	d1d1      	bne.n	35fe0 <__aeabi_dadd+0x3e0>
   3603c:	2800      	cmp	r0, #0
   3603e:	d15b      	bne.n	360f8 <__aeabi_dadd+0x4f8>
   36040:	001c      	movs	r4, r3
   36042:	4314      	orrs	r4, r2
   36044:	d100      	bne.n	36048 <__aeabi_dadd+0x448>
   36046:	e0a8      	b.n	3619a <__aeabi_dadd+0x59a>
   36048:	001c      	movs	r4, r3
   3604a:	0017      	movs	r7, r2
   3604c:	46d8      	mov	r8, fp
   3604e:	e65b      	b.n	35d08 <__aeabi_dadd+0x108>
   36050:	0006      	movs	r6, r0
   36052:	2400      	movs	r4, #0
   36054:	2700      	movs	r7, #0
   36056:	e697      	b.n	35d88 <__aeabi_dadd+0x188>
   36058:	4650      	mov	r0, sl
   3605a:	000b      	movs	r3, r1
   3605c:	3820      	subs	r0, #32
   3605e:	40c3      	lsrs	r3, r0
   36060:	4699      	mov	r9, r3
   36062:	4653      	mov	r3, sl
   36064:	2b20      	cmp	r3, #32
   36066:	d100      	bne.n	3606a <__aeabi_dadd+0x46a>
   36068:	e095      	b.n	36196 <__aeabi_dadd+0x596>
   3606a:	2340      	movs	r3, #64	; 0x40
   3606c:	4650      	mov	r0, sl
   3606e:	1a1b      	subs	r3, r3, r0
   36070:	4099      	lsls	r1, r3
   36072:	430a      	orrs	r2, r1
   36074:	1e51      	subs	r1, r2, #1
   36076:	418a      	sbcs	r2, r1
   36078:	464b      	mov	r3, r9
   3607a:	2100      	movs	r1, #0
   3607c:	431a      	orrs	r2, r3
   3607e:	e69f      	b.n	35dc0 <__aeabi_dadd+0x1c0>
   36080:	2e00      	cmp	r6, #0
   36082:	d130      	bne.n	360e6 <__aeabi_dadd+0x4e6>
   36084:	0026      	movs	r6, r4
   36086:	433e      	orrs	r6, r7
   36088:	d067      	beq.n	3615a <__aeabi_dadd+0x55a>
   3608a:	43db      	mvns	r3, r3
   3608c:	469a      	mov	sl, r3
   3608e:	2b00      	cmp	r3, #0
   36090:	d01c      	beq.n	360cc <__aeabi_dadd+0x4cc>
   36092:	4e61      	ldr	r6, [pc, #388]	; (36218 <__aeabi_dadd+0x618>)
   36094:	42b0      	cmp	r0, r6
   36096:	d060      	beq.n	3615a <__aeabi_dadd+0x55a>
   36098:	4653      	mov	r3, sl
   3609a:	2b38      	cmp	r3, #56	; 0x38
   3609c:	dd00      	ble.n	360a0 <__aeabi_dadd+0x4a0>
   3609e:	e096      	b.n	361ce <__aeabi_dadd+0x5ce>
   360a0:	2b1f      	cmp	r3, #31
   360a2:	dd00      	ble.n	360a6 <__aeabi_dadd+0x4a6>
   360a4:	e09f      	b.n	361e6 <__aeabi_dadd+0x5e6>
   360a6:	2620      	movs	r6, #32
   360a8:	1af3      	subs	r3, r6, r3
   360aa:	0026      	movs	r6, r4
   360ac:	409e      	lsls	r6, r3
   360ae:	469c      	mov	ip, r3
   360b0:	46b3      	mov	fp, r6
   360b2:	4653      	mov	r3, sl
   360b4:	003e      	movs	r6, r7
   360b6:	40de      	lsrs	r6, r3
   360b8:	0033      	movs	r3, r6
   360ba:	465e      	mov	r6, fp
   360bc:	431e      	orrs	r6, r3
   360be:	4663      	mov	r3, ip
   360c0:	409f      	lsls	r7, r3
   360c2:	1e7b      	subs	r3, r7, #1
   360c4:	419f      	sbcs	r7, r3
   360c6:	4653      	mov	r3, sl
   360c8:	40dc      	lsrs	r4, r3
   360ca:	4337      	orrs	r7, r6
   360cc:	18bf      	adds	r7, r7, r2
   360ce:	4297      	cmp	r7, r2
   360d0:	4192      	sbcs	r2, r2
   360d2:	1864      	adds	r4, r4, r1
   360d4:	4252      	negs	r2, r2
   360d6:	18a4      	adds	r4, r4, r2
   360d8:	0006      	movs	r6, r0
   360da:	e678      	b.n	35dce <__aeabi_dadd+0x1ce>
   360dc:	4327      	orrs	r7, r4
   360de:	1e7c      	subs	r4, r7, #1
   360e0:	41a7      	sbcs	r7, r4
   360e2:	2400      	movs	r4, #0
   360e4:	e737      	b.n	35f56 <__aeabi_dadd+0x356>
   360e6:	4e4c      	ldr	r6, [pc, #304]	; (36218 <__aeabi_dadd+0x618>)
   360e8:	42b0      	cmp	r0, r6
   360ea:	d036      	beq.n	3615a <__aeabi_dadd+0x55a>
   360ec:	2680      	movs	r6, #128	; 0x80
   360ee:	425b      	negs	r3, r3
   360f0:	0436      	lsls	r6, r6, #16
   360f2:	469a      	mov	sl, r3
   360f4:	4334      	orrs	r4, r6
   360f6:	e7cf      	b.n	36098 <__aeabi_dadd+0x498>
   360f8:	0018      	movs	r0, r3
   360fa:	4310      	orrs	r0, r2
   360fc:	d100      	bne.n	36100 <__aeabi_dadd+0x500>
   360fe:	e603      	b.n	35d08 <__aeabi_dadd+0x108>
   36100:	1ab8      	subs	r0, r7, r2
   36102:	4684      	mov	ip, r0
   36104:	4567      	cmp	r7, ip
   36106:	41ad      	sbcs	r5, r5
   36108:	1ae0      	subs	r0, r4, r3
   3610a:	426d      	negs	r5, r5
   3610c:	1b40      	subs	r0, r0, r5
   3610e:	0205      	lsls	r5, r0, #8
   36110:	d400      	bmi.n	36114 <__aeabi_dadd+0x514>
   36112:	e62c      	b.n	35d6e <__aeabi_dadd+0x16e>
   36114:	1bd7      	subs	r7, r2, r7
   36116:	42ba      	cmp	r2, r7
   36118:	4192      	sbcs	r2, r2
   3611a:	1b1c      	subs	r4, r3, r4
   3611c:	4252      	negs	r2, r2
   3611e:	1aa4      	subs	r4, r4, r2
   36120:	46d8      	mov	r8, fp
   36122:	e5f1      	b.n	35d08 <__aeabi_dadd+0x108>
   36124:	0018      	movs	r0, r3
   36126:	4310      	orrs	r0, r2
   36128:	d100      	bne.n	3612c <__aeabi_dadd+0x52c>
   3612a:	e763      	b.n	35ff4 <__aeabi_dadd+0x3f4>
   3612c:	08f8      	lsrs	r0, r7, #3
   3612e:	0767      	lsls	r7, r4, #29
   36130:	4307      	orrs	r7, r0
   36132:	2080      	movs	r0, #128	; 0x80
   36134:	08e4      	lsrs	r4, r4, #3
   36136:	0300      	lsls	r0, r0, #12
   36138:	4204      	tst	r4, r0
   3613a:	d008      	beq.n	3614e <__aeabi_dadd+0x54e>
   3613c:	08dd      	lsrs	r5, r3, #3
   3613e:	4205      	tst	r5, r0
   36140:	d105      	bne.n	3614e <__aeabi_dadd+0x54e>
   36142:	08d2      	lsrs	r2, r2, #3
   36144:	0759      	lsls	r1, r3, #29
   36146:	4311      	orrs	r1, r2
   36148:	000f      	movs	r7, r1
   3614a:	002c      	movs	r4, r5
   3614c:	46d8      	mov	r8, fp
   3614e:	0f7b      	lsrs	r3, r7, #29
   36150:	00e4      	lsls	r4, r4, #3
   36152:	431c      	orrs	r4, r3
   36154:	00ff      	lsls	r7, r7, #3
   36156:	4e30      	ldr	r6, [pc, #192]	; (36218 <__aeabi_dadd+0x618>)
   36158:	e5d6      	b.n	35d08 <__aeabi_dadd+0x108>
   3615a:	000c      	movs	r4, r1
   3615c:	0017      	movs	r7, r2
   3615e:	0006      	movs	r6, r0
   36160:	e5d2      	b.n	35d08 <__aeabi_dadd+0x108>
   36162:	2b00      	cmp	r3, #0
   36164:	d038      	beq.n	361d8 <__aeabi_dadd+0x5d8>
   36166:	000b      	movs	r3, r1
   36168:	4313      	orrs	r3, r2
   3616a:	d100      	bne.n	3616e <__aeabi_dadd+0x56e>
   3616c:	e742      	b.n	35ff4 <__aeabi_dadd+0x3f4>
   3616e:	08f8      	lsrs	r0, r7, #3
   36170:	0767      	lsls	r7, r4, #29
   36172:	4307      	orrs	r7, r0
   36174:	2080      	movs	r0, #128	; 0x80
   36176:	08e4      	lsrs	r4, r4, #3
   36178:	0300      	lsls	r0, r0, #12
   3617a:	4204      	tst	r4, r0
   3617c:	d0e7      	beq.n	3614e <__aeabi_dadd+0x54e>
   3617e:	08cb      	lsrs	r3, r1, #3
   36180:	4203      	tst	r3, r0
   36182:	d1e4      	bne.n	3614e <__aeabi_dadd+0x54e>
   36184:	08d2      	lsrs	r2, r2, #3
   36186:	0749      	lsls	r1, r1, #29
   36188:	4311      	orrs	r1, r2
   3618a:	000f      	movs	r7, r1
   3618c:	001c      	movs	r4, r3
   3618e:	e7de      	b.n	3614e <__aeabi_dadd+0x54e>
   36190:	2700      	movs	r7, #0
   36192:	2400      	movs	r4, #0
   36194:	e5d5      	b.n	35d42 <__aeabi_dadd+0x142>
   36196:	2100      	movs	r1, #0
   36198:	e76b      	b.n	36072 <__aeabi_dadd+0x472>
   3619a:	2500      	movs	r5, #0
   3619c:	2700      	movs	r7, #0
   3619e:	e5f3      	b.n	35d88 <__aeabi_dadd+0x188>
   361a0:	464e      	mov	r6, r9
   361a2:	0025      	movs	r5, r4
   361a4:	3e20      	subs	r6, #32
   361a6:	40f5      	lsrs	r5, r6
   361a8:	464b      	mov	r3, r9
   361aa:	002e      	movs	r6, r5
   361ac:	2b20      	cmp	r3, #32
   361ae:	d02d      	beq.n	3620c <__aeabi_dadd+0x60c>
   361b0:	2540      	movs	r5, #64	; 0x40
   361b2:	1aed      	subs	r5, r5, r3
   361b4:	40ac      	lsls	r4, r5
   361b6:	4327      	orrs	r7, r4
   361b8:	1e7c      	subs	r4, r7, #1
   361ba:	41a7      	sbcs	r7, r4
   361bc:	2400      	movs	r4, #0
   361be:	4337      	orrs	r7, r6
   361c0:	e6c9      	b.n	35f56 <__aeabi_dadd+0x356>
   361c2:	2480      	movs	r4, #128	; 0x80
   361c4:	2500      	movs	r5, #0
   361c6:	0324      	lsls	r4, r4, #12
   361c8:	4e13      	ldr	r6, [pc, #76]	; (36218 <__aeabi_dadd+0x618>)
   361ca:	2700      	movs	r7, #0
   361cc:	e5dc      	b.n	35d88 <__aeabi_dadd+0x188>
   361ce:	4327      	orrs	r7, r4
   361d0:	1e7c      	subs	r4, r7, #1
   361d2:	41a7      	sbcs	r7, r4
   361d4:	2400      	movs	r4, #0
   361d6:	e779      	b.n	360cc <__aeabi_dadd+0x4cc>
   361d8:	000c      	movs	r4, r1
   361da:	0017      	movs	r7, r2
   361dc:	4e0e      	ldr	r6, [pc, #56]	; (36218 <__aeabi_dadd+0x618>)
   361de:	e593      	b.n	35d08 <__aeabi_dadd+0x108>
   361e0:	000c      	movs	r4, r1
   361e2:	0017      	movs	r7, r2
   361e4:	e590      	b.n	35d08 <__aeabi_dadd+0x108>
   361e6:	4656      	mov	r6, sl
   361e8:	0023      	movs	r3, r4
   361ea:	3e20      	subs	r6, #32
   361ec:	40f3      	lsrs	r3, r6
   361ee:	4699      	mov	r9, r3
   361f0:	4653      	mov	r3, sl
   361f2:	2b20      	cmp	r3, #32
   361f4:	d00e      	beq.n	36214 <__aeabi_dadd+0x614>
   361f6:	2340      	movs	r3, #64	; 0x40
   361f8:	4656      	mov	r6, sl
   361fa:	1b9b      	subs	r3, r3, r6
   361fc:	409c      	lsls	r4, r3
   361fe:	4327      	orrs	r7, r4
   36200:	1e7c      	subs	r4, r7, #1
   36202:	41a7      	sbcs	r7, r4
   36204:	464b      	mov	r3, r9
   36206:	2400      	movs	r4, #0
   36208:	431f      	orrs	r7, r3
   3620a:	e75f      	b.n	360cc <__aeabi_dadd+0x4cc>
   3620c:	2400      	movs	r4, #0
   3620e:	e7d2      	b.n	361b6 <__aeabi_dadd+0x5b6>
   36210:	0017      	movs	r7, r2
   36212:	e5b2      	b.n	35d7a <__aeabi_dadd+0x17a>
   36214:	2400      	movs	r4, #0
   36216:	e7f2      	b.n	361fe <__aeabi_dadd+0x5fe>
   36218:	000007ff 	.word	0x000007ff
   3621c:	ff7fffff 	.word	0xff7fffff

00036220 <__aeabi_ddiv>:
   36220:	b5f0      	push	{r4, r5, r6, r7, lr}
   36222:	4657      	mov	r7, sl
   36224:	4645      	mov	r5, r8
   36226:	46de      	mov	lr, fp
   36228:	464e      	mov	r6, r9
   3622a:	b5e0      	push	{r5, r6, r7, lr}
   3622c:	004c      	lsls	r4, r1, #1
   3622e:	030e      	lsls	r6, r1, #12
   36230:	b087      	sub	sp, #28
   36232:	4683      	mov	fp, r0
   36234:	4692      	mov	sl, r2
   36236:	001d      	movs	r5, r3
   36238:	4680      	mov	r8, r0
   3623a:	0b36      	lsrs	r6, r6, #12
   3623c:	0d64      	lsrs	r4, r4, #21
   3623e:	0fcf      	lsrs	r7, r1, #31
   36240:	2c00      	cmp	r4, #0
   36242:	d04f      	beq.n	362e4 <__aeabi_ddiv+0xc4>
   36244:	4b6f      	ldr	r3, [pc, #444]	; (36404 <__aeabi_ddiv+0x1e4>)
   36246:	429c      	cmp	r4, r3
   36248:	d035      	beq.n	362b6 <__aeabi_ddiv+0x96>
   3624a:	2380      	movs	r3, #128	; 0x80
   3624c:	0f42      	lsrs	r2, r0, #29
   3624e:	041b      	lsls	r3, r3, #16
   36250:	00f6      	lsls	r6, r6, #3
   36252:	4313      	orrs	r3, r2
   36254:	4333      	orrs	r3, r6
   36256:	4699      	mov	r9, r3
   36258:	00c3      	lsls	r3, r0, #3
   3625a:	4698      	mov	r8, r3
   3625c:	4b6a      	ldr	r3, [pc, #424]	; (36408 <__aeabi_ddiv+0x1e8>)
   3625e:	2600      	movs	r6, #0
   36260:	469c      	mov	ip, r3
   36262:	2300      	movs	r3, #0
   36264:	4464      	add	r4, ip
   36266:	9303      	str	r3, [sp, #12]
   36268:	032b      	lsls	r3, r5, #12
   3626a:	0b1b      	lsrs	r3, r3, #12
   3626c:	469b      	mov	fp, r3
   3626e:	006b      	lsls	r3, r5, #1
   36270:	0fed      	lsrs	r5, r5, #31
   36272:	4650      	mov	r0, sl
   36274:	0d5b      	lsrs	r3, r3, #21
   36276:	9501      	str	r5, [sp, #4]
   36278:	d05e      	beq.n	36338 <__aeabi_ddiv+0x118>
   3627a:	4a62      	ldr	r2, [pc, #392]	; (36404 <__aeabi_ddiv+0x1e4>)
   3627c:	4293      	cmp	r3, r2
   3627e:	d053      	beq.n	36328 <__aeabi_ddiv+0x108>
   36280:	465a      	mov	r2, fp
   36282:	00d1      	lsls	r1, r2, #3
   36284:	2280      	movs	r2, #128	; 0x80
   36286:	0f40      	lsrs	r0, r0, #29
   36288:	0412      	lsls	r2, r2, #16
   3628a:	4302      	orrs	r2, r0
   3628c:	430a      	orrs	r2, r1
   3628e:	4693      	mov	fp, r2
   36290:	4652      	mov	r2, sl
   36292:	00d1      	lsls	r1, r2, #3
   36294:	4a5c      	ldr	r2, [pc, #368]	; (36408 <__aeabi_ddiv+0x1e8>)
   36296:	4694      	mov	ip, r2
   36298:	2200      	movs	r2, #0
   3629a:	4463      	add	r3, ip
   3629c:	0038      	movs	r0, r7
   3629e:	4068      	eors	r0, r5
   362a0:	4684      	mov	ip, r0
   362a2:	9002      	str	r0, [sp, #8]
   362a4:	1ae4      	subs	r4, r4, r3
   362a6:	4316      	orrs	r6, r2
   362a8:	2e0f      	cmp	r6, #15
   362aa:	d900      	bls.n	362ae <__aeabi_ddiv+0x8e>
   362ac:	e0b4      	b.n	36418 <__aeabi_ddiv+0x1f8>
   362ae:	4b57      	ldr	r3, [pc, #348]	; (3640c <__aeabi_ddiv+0x1ec>)
   362b0:	00b6      	lsls	r6, r6, #2
   362b2:	599b      	ldr	r3, [r3, r6]
   362b4:	469f      	mov	pc, r3
   362b6:	0003      	movs	r3, r0
   362b8:	4333      	orrs	r3, r6
   362ba:	4699      	mov	r9, r3
   362bc:	d16c      	bne.n	36398 <__aeabi_ddiv+0x178>
   362be:	2300      	movs	r3, #0
   362c0:	4698      	mov	r8, r3
   362c2:	3302      	adds	r3, #2
   362c4:	2608      	movs	r6, #8
   362c6:	9303      	str	r3, [sp, #12]
   362c8:	e7ce      	b.n	36268 <__aeabi_ddiv+0x48>
   362ca:	46cb      	mov	fp, r9
   362cc:	4641      	mov	r1, r8
   362ce:	9a03      	ldr	r2, [sp, #12]
   362d0:	9701      	str	r7, [sp, #4]
   362d2:	2a02      	cmp	r2, #2
   362d4:	d165      	bne.n	363a2 <__aeabi_ddiv+0x182>
   362d6:	9b01      	ldr	r3, [sp, #4]
   362d8:	4c4a      	ldr	r4, [pc, #296]	; (36404 <__aeabi_ddiv+0x1e4>)
   362da:	469c      	mov	ip, r3
   362dc:	2300      	movs	r3, #0
   362de:	2200      	movs	r2, #0
   362e0:	4698      	mov	r8, r3
   362e2:	e06b      	b.n	363bc <__aeabi_ddiv+0x19c>
   362e4:	0003      	movs	r3, r0
   362e6:	4333      	orrs	r3, r6
   362e8:	4699      	mov	r9, r3
   362ea:	d04e      	beq.n	3638a <__aeabi_ddiv+0x16a>
   362ec:	2e00      	cmp	r6, #0
   362ee:	d100      	bne.n	362f2 <__aeabi_ddiv+0xd2>
   362f0:	e1bc      	b.n	3666c <__aeabi_ddiv+0x44c>
   362f2:	0030      	movs	r0, r6
   362f4:	f001 f9ca 	bl	3768c <__clzsi2>
   362f8:	0003      	movs	r3, r0
   362fa:	3b0b      	subs	r3, #11
   362fc:	2b1c      	cmp	r3, #28
   362fe:	dd00      	ble.n	36302 <__aeabi_ddiv+0xe2>
   36300:	e1ac      	b.n	3665c <__aeabi_ddiv+0x43c>
   36302:	221d      	movs	r2, #29
   36304:	1ad3      	subs	r3, r2, r3
   36306:	465a      	mov	r2, fp
   36308:	0001      	movs	r1, r0
   3630a:	40da      	lsrs	r2, r3
   3630c:	3908      	subs	r1, #8
   3630e:	408e      	lsls	r6, r1
   36310:	0013      	movs	r3, r2
   36312:	4333      	orrs	r3, r6
   36314:	4699      	mov	r9, r3
   36316:	465b      	mov	r3, fp
   36318:	408b      	lsls	r3, r1
   3631a:	4698      	mov	r8, r3
   3631c:	2300      	movs	r3, #0
   3631e:	4c3c      	ldr	r4, [pc, #240]	; (36410 <__aeabi_ddiv+0x1f0>)
   36320:	2600      	movs	r6, #0
   36322:	1a24      	subs	r4, r4, r0
   36324:	9303      	str	r3, [sp, #12]
   36326:	e79f      	b.n	36268 <__aeabi_ddiv+0x48>
   36328:	4651      	mov	r1, sl
   3632a:	465a      	mov	r2, fp
   3632c:	4311      	orrs	r1, r2
   3632e:	d129      	bne.n	36384 <__aeabi_ddiv+0x164>
   36330:	2200      	movs	r2, #0
   36332:	4693      	mov	fp, r2
   36334:	3202      	adds	r2, #2
   36336:	e7b1      	b.n	3629c <__aeabi_ddiv+0x7c>
   36338:	4659      	mov	r1, fp
   3633a:	4301      	orrs	r1, r0
   3633c:	d01e      	beq.n	3637c <__aeabi_ddiv+0x15c>
   3633e:	465b      	mov	r3, fp
   36340:	2b00      	cmp	r3, #0
   36342:	d100      	bne.n	36346 <__aeabi_ddiv+0x126>
   36344:	e19e      	b.n	36684 <__aeabi_ddiv+0x464>
   36346:	4658      	mov	r0, fp
   36348:	f001 f9a0 	bl	3768c <__clzsi2>
   3634c:	0003      	movs	r3, r0
   3634e:	3b0b      	subs	r3, #11
   36350:	2b1c      	cmp	r3, #28
   36352:	dd00      	ble.n	36356 <__aeabi_ddiv+0x136>
   36354:	e18f      	b.n	36676 <__aeabi_ddiv+0x456>
   36356:	0002      	movs	r2, r0
   36358:	4659      	mov	r1, fp
   3635a:	3a08      	subs	r2, #8
   3635c:	4091      	lsls	r1, r2
   3635e:	468b      	mov	fp, r1
   36360:	211d      	movs	r1, #29
   36362:	1acb      	subs	r3, r1, r3
   36364:	4651      	mov	r1, sl
   36366:	40d9      	lsrs	r1, r3
   36368:	000b      	movs	r3, r1
   3636a:	4659      	mov	r1, fp
   3636c:	430b      	orrs	r3, r1
   3636e:	4651      	mov	r1, sl
   36370:	469b      	mov	fp, r3
   36372:	4091      	lsls	r1, r2
   36374:	4b26      	ldr	r3, [pc, #152]	; (36410 <__aeabi_ddiv+0x1f0>)
   36376:	2200      	movs	r2, #0
   36378:	1a1b      	subs	r3, r3, r0
   3637a:	e78f      	b.n	3629c <__aeabi_ddiv+0x7c>
   3637c:	2300      	movs	r3, #0
   3637e:	2201      	movs	r2, #1
   36380:	469b      	mov	fp, r3
   36382:	e78b      	b.n	3629c <__aeabi_ddiv+0x7c>
   36384:	4651      	mov	r1, sl
   36386:	2203      	movs	r2, #3
   36388:	e788      	b.n	3629c <__aeabi_ddiv+0x7c>
   3638a:	2300      	movs	r3, #0
   3638c:	4698      	mov	r8, r3
   3638e:	3301      	adds	r3, #1
   36390:	2604      	movs	r6, #4
   36392:	2400      	movs	r4, #0
   36394:	9303      	str	r3, [sp, #12]
   36396:	e767      	b.n	36268 <__aeabi_ddiv+0x48>
   36398:	2303      	movs	r3, #3
   3639a:	46b1      	mov	r9, r6
   3639c:	9303      	str	r3, [sp, #12]
   3639e:	260c      	movs	r6, #12
   363a0:	e762      	b.n	36268 <__aeabi_ddiv+0x48>
   363a2:	2a03      	cmp	r2, #3
   363a4:	d100      	bne.n	363a8 <__aeabi_ddiv+0x188>
   363a6:	e25c      	b.n	36862 <__aeabi_ddiv+0x642>
   363a8:	9b01      	ldr	r3, [sp, #4]
   363aa:	2a01      	cmp	r2, #1
   363ac:	d000      	beq.n	363b0 <__aeabi_ddiv+0x190>
   363ae:	e1e4      	b.n	3677a <__aeabi_ddiv+0x55a>
   363b0:	4013      	ands	r3, r2
   363b2:	469c      	mov	ip, r3
   363b4:	2300      	movs	r3, #0
   363b6:	2400      	movs	r4, #0
   363b8:	2200      	movs	r2, #0
   363ba:	4698      	mov	r8, r3
   363bc:	2100      	movs	r1, #0
   363be:	0312      	lsls	r2, r2, #12
   363c0:	0b13      	lsrs	r3, r2, #12
   363c2:	0d0a      	lsrs	r2, r1, #20
   363c4:	0512      	lsls	r2, r2, #20
   363c6:	431a      	orrs	r2, r3
   363c8:	0523      	lsls	r3, r4, #20
   363ca:	4c12      	ldr	r4, [pc, #72]	; (36414 <__aeabi_ddiv+0x1f4>)
   363cc:	4640      	mov	r0, r8
   363ce:	4022      	ands	r2, r4
   363d0:	4313      	orrs	r3, r2
   363d2:	4662      	mov	r2, ip
   363d4:	005b      	lsls	r3, r3, #1
   363d6:	07d2      	lsls	r2, r2, #31
   363d8:	085b      	lsrs	r3, r3, #1
   363da:	4313      	orrs	r3, r2
   363dc:	0019      	movs	r1, r3
   363de:	b007      	add	sp, #28
   363e0:	bc3c      	pop	{r2, r3, r4, r5}
   363e2:	4690      	mov	r8, r2
   363e4:	4699      	mov	r9, r3
   363e6:	46a2      	mov	sl, r4
   363e8:	46ab      	mov	fp, r5
   363ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   363ec:	2300      	movs	r3, #0
   363ee:	2280      	movs	r2, #128	; 0x80
   363f0:	469c      	mov	ip, r3
   363f2:	0312      	lsls	r2, r2, #12
   363f4:	4698      	mov	r8, r3
   363f6:	4c03      	ldr	r4, [pc, #12]	; (36404 <__aeabi_ddiv+0x1e4>)
   363f8:	e7e0      	b.n	363bc <__aeabi_ddiv+0x19c>
   363fa:	2300      	movs	r3, #0
   363fc:	4c01      	ldr	r4, [pc, #4]	; (36404 <__aeabi_ddiv+0x1e4>)
   363fe:	2200      	movs	r2, #0
   36400:	4698      	mov	r8, r3
   36402:	e7db      	b.n	363bc <__aeabi_ddiv+0x19c>
   36404:	000007ff 	.word	0x000007ff
   36408:	fffffc01 	.word	0xfffffc01
   3640c:	0003d414 	.word	0x0003d414
   36410:	fffffc0d 	.word	0xfffffc0d
   36414:	800fffff 	.word	0x800fffff
   36418:	45d9      	cmp	r9, fp
   3641a:	d900      	bls.n	3641e <__aeabi_ddiv+0x1fe>
   3641c:	e139      	b.n	36692 <__aeabi_ddiv+0x472>
   3641e:	d100      	bne.n	36422 <__aeabi_ddiv+0x202>
   36420:	e134      	b.n	3668c <__aeabi_ddiv+0x46c>
   36422:	2300      	movs	r3, #0
   36424:	4646      	mov	r6, r8
   36426:	464d      	mov	r5, r9
   36428:	469a      	mov	sl, r3
   3642a:	3c01      	subs	r4, #1
   3642c:	465b      	mov	r3, fp
   3642e:	0e0a      	lsrs	r2, r1, #24
   36430:	021b      	lsls	r3, r3, #8
   36432:	431a      	orrs	r2, r3
   36434:	020b      	lsls	r3, r1, #8
   36436:	0c17      	lsrs	r7, r2, #16
   36438:	9303      	str	r3, [sp, #12]
   3643a:	0413      	lsls	r3, r2, #16
   3643c:	0c1b      	lsrs	r3, r3, #16
   3643e:	0039      	movs	r1, r7
   36440:	0028      	movs	r0, r5
   36442:	4690      	mov	r8, r2
   36444:	9301      	str	r3, [sp, #4]
   36446:	f7fe fce5 	bl	34e14 <__udivsi3>
   3644a:	0002      	movs	r2, r0
   3644c:	9b01      	ldr	r3, [sp, #4]
   3644e:	4683      	mov	fp, r0
   36450:	435a      	muls	r2, r3
   36452:	0028      	movs	r0, r5
   36454:	0039      	movs	r1, r7
   36456:	4691      	mov	r9, r2
   36458:	f7fe fd62 	bl	34f20 <__aeabi_uidivmod>
   3645c:	0c35      	lsrs	r5, r6, #16
   3645e:	0409      	lsls	r1, r1, #16
   36460:	430d      	orrs	r5, r1
   36462:	45a9      	cmp	r9, r5
   36464:	d90d      	bls.n	36482 <__aeabi_ddiv+0x262>
   36466:	465b      	mov	r3, fp
   36468:	4445      	add	r5, r8
   3646a:	3b01      	subs	r3, #1
   3646c:	45a8      	cmp	r8, r5
   3646e:	d900      	bls.n	36472 <__aeabi_ddiv+0x252>
   36470:	e13a      	b.n	366e8 <__aeabi_ddiv+0x4c8>
   36472:	45a9      	cmp	r9, r5
   36474:	d800      	bhi.n	36478 <__aeabi_ddiv+0x258>
   36476:	e137      	b.n	366e8 <__aeabi_ddiv+0x4c8>
   36478:	2302      	movs	r3, #2
   3647a:	425b      	negs	r3, r3
   3647c:	469c      	mov	ip, r3
   3647e:	4445      	add	r5, r8
   36480:	44e3      	add	fp, ip
   36482:	464b      	mov	r3, r9
   36484:	1aeb      	subs	r3, r5, r3
   36486:	0039      	movs	r1, r7
   36488:	0018      	movs	r0, r3
   3648a:	9304      	str	r3, [sp, #16]
   3648c:	f7fe fcc2 	bl	34e14 <__udivsi3>
   36490:	9b01      	ldr	r3, [sp, #4]
   36492:	0005      	movs	r5, r0
   36494:	4343      	muls	r3, r0
   36496:	0039      	movs	r1, r7
   36498:	9804      	ldr	r0, [sp, #16]
   3649a:	4699      	mov	r9, r3
   3649c:	f7fe fd40 	bl	34f20 <__aeabi_uidivmod>
   364a0:	0433      	lsls	r3, r6, #16
   364a2:	0409      	lsls	r1, r1, #16
   364a4:	0c1b      	lsrs	r3, r3, #16
   364a6:	430b      	orrs	r3, r1
   364a8:	4599      	cmp	r9, r3
   364aa:	d909      	bls.n	364c0 <__aeabi_ddiv+0x2a0>
   364ac:	4443      	add	r3, r8
   364ae:	1e6a      	subs	r2, r5, #1
   364b0:	4598      	cmp	r8, r3
   364b2:	d900      	bls.n	364b6 <__aeabi_ddiv+0x296>
   364b4:	e11a      	b.n	366ec <__aeabi_ddiv+0x4cc>
   364b6:	4599      	cmp	r9, r3
   364b8:	d800      	bhi.n	364bc <__aeabi_ddiv+0x29c>
   364ba:	e117      	b.n	366ec <__aeabi_ddiv+0x4cc>
   364bc:	3d02      	subs	r5, #2
   364be:	4443      	add	r3, r8
   364c0:	464a      	mov	r2, r9
   364c2:	1a9b      	subs	r3, r3, r2
   364c4:	465a      	mov	r2, fp
   364c6:	0412      	lsls	r2, r2, #16
   364c8:	432a      	orrs	r2, r5
   364ca:	9903      	ldr	r1, [sp, #12]
   364cc:	4693      	mov	fp, r2
   364ce:	0c10      	lsrs	r0, r2, #16
   364d0:	0c0a      	lsrs	r2, r1, #16
   364d2:	4691      	mov	r9, r2
   364d4:	0409      	lsls	r1, r1, #16
   364d6:	465a      	mov	r2, fp
   364d8:	0c09      	lsrs	r1, r1, #16
   364da:	464e      	mov	r6, r9
   364dc:	000d      	movs	r5, r1
   364de:	0412      	lsls	r2, r2, #16
   364e0:	0c12      	lsrs	r2, r2, #16
   364e2:	4345      	muls	r5, r0
   364e4:	9105      	str	r1, [sp, #20]
   364e6:	4351      	muls	r1, r2
   364e8:	4372      	muls	r2, r6
   364ea:	4370      	muls	r0, r6
   364ec:	1952      	adds	r2, r2, r5
   364ee:	0c0e      	lsrs	r6, r1, #16
   364f0:	18b2      	adds	r2, r6, r2
   364f2:	4295      	cmp	r5, r2
   364f4:	d903      	bls.n	364fe <__aeabi_ddiv+0x2de>
   364f6:	2580      	movs	r5, #128	; 0x80
   364f8:	026d      	lsls	r5, r5, #9
   364fa:	46ac      	mov	ip, r5
   364fc:	4460      	add	r0, ip
   364fe:	0c15      	lsrs	r5, r2, #16
   36500:	0409      	lsls	r1, r1, #16
   36502:	0412      	lsls	r2, r2, #16
   36504:	0c09      	lsrs	r1, r1, #16
   36506:	1828      	adds	r0, r5, r0
   36508:	1852      	adds	r2, r2, r1
   3650a:	4283      	cmp	r3, r0
   3650c:	d200      	bcs.n	36510 <__aeabi_ddiv+0x2f0>
   3650e:	e0ce      	b.n	366ae <__aeabi_ddiv+0x48e>
   36510:	d100      	bne.n	36514 <__aeabi_ddiv+0x2f4>
   36512:	e0c8      	b.n	366a6 <__aeabi_ddiv+0x486>
   36514:	1a1d      	subs	r5, r3, r0
   36516:	4653      	mov	r3, sl
   36518:	1a9e      	subs	r6, r3, r2
   3651a:	45b2      	cmp	sl, r6
   3651c:	4192      	sbcs	r2, r2
   3651e:	4252      	negs	r2, r2
   36520:	1aab      	subs	r3, r5, r2
   36522:	469a      	mov	sl, r3
   36524:	4598      	cmp	r8, r3
   36526:	d100      	bne.n	3652a <__aeabi_ddiv+0x30a>
   36528:	e117      	b.n	3675a <__aeabi_ddiv+0x53a>
   3652a:	0039      	movs	r1, r7
   3652c:	0018      	movs	r0, r3
   3652e:	f7fe fc71 	bl	34e14 <__udivsi3>
   36532:	9b01      	ldr	r3, [sp, #4]
   36534:	0005      	movs	r5, r0
   36536:	4343      	muls	r3, r0
   36538:	0039      	movs	r1, r7
   3653a:	4650      	mov	r0, sl
   3653c:	9304      	str	r3, [sp, #16]
   3653e:	f7fe fcef 	bl	34f20 <__aeabi_uidivmod>
   36542:	9804      	ldr	r0, [sp, #16]
   36544:	040b      	lsls	r3, r1, #16
   36546:	0c31      	lsrs	r1, r6, #16
   36548:	4319      	orrs	r1, r3
   3654a:	4288      	cmp	r0, r1
   3654c:	d909      	bls.n	36562 <__aeabi_ddiv+0x342>
   3654e:	4441      	add	r1, r8
   36550:	1e6b      	subs	r3, r5, #1
   36552:	4588      	cmp	r8, r1
   36554:	d900      	bls.n	36558 <__aeabi_ddiv+0x338>
   36556:	e107      	b.n	36768 <__aeabi_ddiv+0x548>
   36558:	4288      	cmp	r0, r1
   3655a:	d800      	bhi.n	3655e <__aeabi_ddiv+0x33e>
   3655c:	e104      	b.n	36768 <__aeabi_ddiv+0x548>
   3655e:	3d02      	subs	r5, #2
   36560:	4441      	add	r1, r8
   36562:	9b04      	ldr	r3, [sp, #16]
   36564:	1acb      	subs	r3, r1, r3
   36566:	0018      	movs	r0, r3
   36568:	0039      	movs	r1, r7
   3656a:	9304      	str	r3, [sp, #16]
   3656c:	f7fe fc52 	bl	34e14 <__udivsi3>
   36570:	9b01      	ldr	r3, [sp, #4]
   36572:	4682      	mov	sl, r0
   36574:	4343      	muls	r3, r0
   36576:	0039      	movs	r1, r7
   36578:	9804      	ldr	r0, [sp, #16]
   3657a:	9301      	str	r3, [sp, #4]
   3657c:	f7fe fcd0 	bl	34f20 <__aeabi_uidivmod>
   36580:	9801      	ldr	r0, [sp, #4]
   36582:	040b      	lsls	r3, r1, #16
   36584:	0431      	lsls	r1, r6, #16
   36586:	0c09      	lsrs	r1, r1, #16
   36588:	4319      	orrs	r1, r3
   3658a:	4288      	cmp	r0, r1
   3658c:	d90d      	bls.n	365aa <__aeabi_ddiv+0x38a>
   3658e:	4653      	mov	r3, sl
   36590:	4441      	add	r1, r8
   36592:	3b01      	subs	r3, #1
   36594:	4588      	cmp	r8, r1
   36596:	d900      	bls.n	3659a <__aeabi_ddiv+0x37a>
   36598:	e0e8      	b.n	3676c <__aeabi_ddiv+0x54c>
   3659a:	4288      	cmp	r0, r1
   3659c:	d800      	bhi.n	365a0 <__aeabi_ddiv+0x380>
   3659e:	e0e5      	b.n	3676c <__aeabi_ddiv+0x54c>
   365a0:	2302      	movs	r3, #2
   365a2:	425b      	negs	r3, r3
   365a4:	469c      	mov	ip, r3
   365a6:	4441      	add	r1, r8
   365a8:	44e2      	add	sl, ip
   365aa:	9b01      	ldr	r3, [sp, #4]
   365ac:	042d      	lsls	r5, r5, #16
   365ae:	1ace      	subs	r6, r1, r3
   365b0:	4651      	mov	r1, sl
   365b2:	4329      	orrs	r1, r5
   365b4:	9d05      	ldr	r5, [sp, #20]
   365b6:	464f      	mov	r7, r9
   365b8:	002a      	movs	r2, r5
   365ba:	040b      	lsls	r3, r1, #16
   365bc:	0c08      	lsrs	r0, r1, #16
   365be:	0c1b      	lsrs	r3, r3, #16
   365c0:	435a      	muls	r2, r3
   365c2:	4345      	muls	r5, r0
   365c4:	437b      	muls	r3, r7
   365c6:	4378      	muls	r0, r7
   365c8:	195b      	adds	r3, r3, r5
   365ca:	0c17      	lsrs	r7, r2, #16
   365cc:	18fb      	adds	r3, r7, r3
   365ce:	429d      	cmp	r5, r3
   365d0:	d903      	bls.n	365da <__aeabi_ddiv+0x3ba>
   365d2:	2580      	movs	r5, #128	; 0x80
   365d4:	026d      	lsls	r5, r5, #9
   365d6:	46ac      	mov	ip, r5
   365d8:	4460      	add	r0, ip
   365da:	0c1d      	lsrs	r5, r3, #16
   365dc:	0412      	lsls	r2, r2, #16
   365de:	041b      	lsls	r3, r3, #16
   365e0:	0c12      	lsrs	r2, r2, #16
   365e2:	1828      	adds	r0, r5, r0
   365e4:	189b      	adds	r3, r3, r2
   365e6:	4286      	cmp	r6, r0
   365e8:	d200      	bcs.n	365ec <__aeabi_ddiv+0x3cc>
   365ea:	e093      	b.n	36714 <__aeabi_ddiv+0x4f4>
   365ec:	d100      	bne.n	365f0 <__aeabi_ddiv+0x3d0>
   365ee:	e08e      	b.n	3670e <__aeabi_ddiv+0x4ee>
   365f0:	2301      	movs	r3, #1
   365f2:	4319      	orrs	r1, r3
   365f4:	4ba0      	ldr	r3, [pc, #640]	; (36878 <__aeabi_ddiv+0x658>)
   365f6:	18e3      	adds	r3, r4, r3
   365f8:	2b00      	cmp	r3, #0
   365fa:	dc00      	bgt.n	365fe <__aeabi_ddiv+0x3de>
   365fc:	e099      	b.n	36732 <__aeabi_ddiv+0x512>
   365fe:	074a      	lsls	r2, r1, #29
   36600:	d000      	beq.n	36604 <__aeabi_ddiv+0x3e4>
   36602:	e09e      	b.n	36742 <__aeabi_ddiv+0x522>
   36604:	465a      	mov	r2, fp
   36606:	01d2      	lsls	r2, r2, #7
   36608:	d506      	bpl.n	36618 <__aeabi_ddiv+0x3f8>
   3660a:	465a      	mov	r2, fp
   3660c:	4b9b      	ldr	r3, [pc, #620]	; (3687c <__aeabi_ddiv+0x65c>)
   3660e:	401a      	ands	r2, r3
   36610:	2380      	movs	r3, #128	; 0x80
   36612:	4693      	mov	fp, r2
   36614:	00db      	lsls	r3, r3, #3
   36616:	18e3      	adds	r3, r4, r3
   36618:	4a99      	ldr	r2, [pc, #612]	; (36880 <__aeabi_ddiv+0x660>)
   3661a:	4293      	cmp	r3, r2
   3661c:	dd68      	ble.n	366f0 <__aeabi_ddiv+0x4d0>
   3661e:	2301      	movs	r3, #1
   36620:	9a02      	ldr	r2, [sp, #8]
   36622:	4c98      	ldr	r4, [pc, #608]	; (36884 <__aeabi_ddiv+0x664>)
   36624:	401a      	ands	r2, r3
   36626:	2300      	movs	r3, #0
   36628:	4694      	mov	ip, r2
   3662a:	4698      	mov	r8, r3
   3662c:	2200      	movs	r2, #0
   3662e:	e6c5      	b.n	363bc <__aeabi_ddiv+0x19c>
   36630:	2280      	movs	r2, #128	; 0x80
   36632:	464b      	mov	r3, r9
   36634:	0312      	lsls	r2, r2, #12
   36636:	4213      	tst	r3, r2
   36638:	d00a      	beq.n	36650 <__aeabi_ddiv+0x430>
   3663a:	465b      	mov	r3, fp
   3663c:	4213      	tst	r3, r2
   3663e:	d106      	bne.n	3664e <__aeabi_ddiv+0x42e>
   36640:	431a      	orrs	r2, r3
   36642:	0312      	lsls	r2, r2, #12
   36644:	0b12      	lsrs	r2, r2, #12
   36646:	46ac      	mov	ip, r5
   36648:	4688      	mov	r8, r1
   3664a:	4c8e      	ldr	r4, [pc, #568]	; (36884 <__aeabi_ddiv+0x664>)
   3664c:	e6b6      	b.n	363bc <__aeabi_ddiv+0x19c>
   3664e:	464b      	mov	r3, r9
   36650:	431a      	orrs	r2, r3
   36652:	0312      	lsls	r2, r2, #12
   36654:	0b12      	lsrs	r2, r2, #12
   36656:	46bc      	mov	ip, r7
   36658:	4c8a      	ldr	r4, [pc, #552]	; (36884 <__aeabi_ddiv+0x664>)
   3665a:	e6af      	b.n	363bc <__aeabi_ddiv+0x19c>
   3665c:	0003      	movs	r3, r0
   3665e:	465a      	mov	r2, fp
   36660:	3b28      	subs	r3, #40	; 0x28
   36662:	409a      	lsls	r2, r3
   36664:	2300      	movs	r3, #0
   36666:	4691      	mov	r9, r2
   36668:	4698      	mov	r8, r3
   3666a:	e657      	b.n	3631c <__aeabi_ddiv+0xfc>
   3666c:	4658      	mov	r0, fp
   3666e:	f001 f80d 	bl	3768c <__clzsi2>
   36672:	3020      	adds	r0, #32
   36674:	e640      	b.n	362f8 <__aeabi_ddiv+0xd8>
   36676:	0003      	movs	r3, r0
   36678:	4652      	mov	r2, sl
   3667a:	3b28      	subs	r3, #40	; 0x28
   3667c:	409a      	lsls	r2, r3
   3667e:	2100      	movs	r1, #0
   36680:	4693      	mov	fp, r2
   36682:	e677      	b.n	36374 <__aeabi_ddiv+0x154>
   36684:	f001 f802 	bl	3768c <__clzsi2>
   36688:	3020      	adds	r0, #32
   3668a:	e65f      	b.n	3634c <__aeabi_ddiv+0x12c>
   3668c:	4588      	cmp	r8, r1
   3668e:	d200      	bcs.n	36692 <__aeabi_ddiv+0x472>
   36690:	e6c7      	b.n	36422 <__aeabi_ddiv+0x202>
   36692:	464b      	mov	r3, r9
   36694:	07de      	lsls	r6, r3, #31
   36696:	085d      	lsrs	r5, r3, #1
   36698:	4643      	mov	r3, r8
   3669a:	085b      	lsrs	r3, r3, #1
   3669c:	431e      	orrs	r6, r3
   3669e:	4643      	mov	r3, r8
   366a0:	07db      	lsls	r3, r3, #31
   366a2:	469a      	mov	sl, r3
   366a4:	e6c2      	b.n	3642c <__aeabi_ddiv+0x20c>
   366a6:	2500      	movs	r5, #0
   366a8:	4592      	cmp	sl, r2
   366aa:	d300      	bcc.n	366ae <__aeabi_ddiv+0x48e>
   366ac:	e733      	b.n	36516 <__aeabi_ddiv+0x2f6>
   366ae:	9e03      	ldr	r6, [sp, #12]
   366b0:	4659      	mov	r1, fp
   366b2:	46b4      	mov	ip, r6
   366b4:	44e2      	add	sl, ip
   366b6:	45b2      	cmp	sl, r6
   366b8:	41ad      	sbcs	r5, r5
   366ba:	426d      	negs	r5, r5
   366bc:	4445      	add	r5, r8
   366be:	18eb      	adds	r3, r5, r3
   366c0:	3901      	subs	r1, #1
   366c2:	4598      	cmp	r8, r3
   366c4:	d207      	bcs.n	366d6 <__aeabi_ddiv+0x4b6>
   366c6:	4298      	cmp	r0, r3
   366c8:	d900      	bls.n	366cc <__aeabi_ddiv+0x4ac>
   366ca:	e07f      	b.n	367cc <__aeabi_ddiv+0x5ac>
   366cc:	d100      	bne.n	366d0 <__aeabi_ddiv+0x4b0>
   366ce:	e0bc      	b.n	3684a <__aeabi_ddiv+0x62a>
   366d0:	1a1d      	subs	r5, r3, r0
   366d2:	468b      	mov	fp, r1
   366d4:	e71f      	b.n	36516 <__aeabi_ddiv+0x2f6>
   366d6:	4598      	cmp	r8, r3
   366d8:	d1fa      	bne.n	366d0 <__aeabi_ddiv+0x4b0>
   366da:	9d03      	ldr	r5, [sp, #12]
   366dc:	4555      	cmp	r5, sl
   366de:	d9f2      	bls.n	366c6 <__aeabi_ddiv+0x4a6>
   366e0:	4643      	mov	r3, r8
   366e2:	468b      	mov	fp, r1
   366e4:	1a1d      	subs	r5, r3, r0
   366e6:	e716      	b.n	36516 <__aeabi_ddiv+0x2f6>
   366e8:	469b      	mov	fp, r3
   366ea:	e6ca      	b.n	36482 <__aeabi_ddiv+0x262>
   366ec:	0015      	movs	r5, r2
   366ee:	e6e7      	b.n	364c0 <__aeabi_ddiv+0x2a0>
   366f0:	465a      	mov	r2, fp
   366f2:	08c9      	lsrs	r1, r1, #3
   366f4:	0752      	lsls	r2, r2, #29
   366f6:	430a      	orrs	r2, r1
   366f8:	055b      	lsls	r3, r3, #21
   366fa:	4690      	mov	r8, r2
   366fc:	0d5c      	lsrs	r4, r3, #21
   366fe:	465a      	mov	r2, fp
   36700:	2301      	movs	r3, #1
   36702:	9902      	ldr	r1, [sp, #8]
   36704:	0252      	lsls	r2, r2, #9
   36706:	4019      	ands	r1, r3
   36708:	0b12      	lsrs	r2, r2, #12
   3670a:	468c      	mov	ip, r1
   3670c:	e656      	b.n	363bc <__aeabi_ddiv+0x19c>
   3670e:	2b00      	cmp	r3, #0
   36710:	d100      	bne.n	36714 <__aeabi_ddiv+0x4f4>
   36712:	e76f      	b.n	365f4 <__aeabi_ddiv+0x3d4>
   36714:	4446      	add	r6, r8
   36716:	1e4a      	subs	r2, r1, #1
   36718:	45b0      	cmp	r8, r6
   3671a:	d929      	bls.n	36770 <__aeabi_ddiv+0x550>
   3671c:	0011      	movs	r1, r2
   3671e:	4286      	cmp	r6, r0
   36720:	d000      	beq.n	36724 <__aeabi_ddiv+0x504>
   36722:	e765      	b.n	365f0 <__aeabi_ddiv+0x3d0>
   36724:	9a03      	ldr	r2, [sp, #12]
   36726:	4293      	cmp	r3, r2
   36728:	d000      	beq.n	3672c <__aeabi_ddiv+0x50c>
   3672a:	e761      	b.n	365f0 <__aeabi_ddiv+0x3d0>
   3672c:	e762      	b.n	365f4 <__aeabi_ddiv+0x3d4>
   3672e:	2101      	movs	r1, #1
   36730:	4249      	negs	r1, r1
   36732:	2001      	movs	r0, #1
   36734:	1ac2      	subs	r2, r0, r3
   36736:	2a38      	cmp	r2, #56	; 0x38
   36738:	dd21      	ble.n	3677e <__aeabi_ddiv+0x55e>
   3673a:	9b02      	ldr	r3, [sp, #8]
   3673c:	4003      	ands	r3, r0
   3673e:	469c      	mov	ip, r3
   36740:	e638      	b.n	363b4 <__aeabi_ddiv+0x194>
   36742:	220f      	movs	r2, #15
   36744:	400a      	ands	r2, r1
   36746:	2a04      	cmp	r2, #4
   36748:	d100      	bne.n	3674c <__aeabi_ddiv+0x52c>
   3674a:	e75b      	b.n	36604 <__aeabi_ddiv+0x3e4>
   3674c:	000a      	movs	r2, r1
   3674e:	1d11      	adds	r1, r2, #4
   36750:	4291      	cmp	r1, r2
   36752:	4192      	sbcs	r2, r2
   36754:	4252      	negs	r2, r2
   36756:	4493      	add	fp, r2
   36758:	e754      	b.n	36604 <__aeabi_ddiv+0x3e4>
   3675a:	4b47      	ldr	r3, [pc, #284]	; (36878 <__aeabi_ddiv+0x658>)
   3675c:	18e3      	adds	r3, r4, r3
   3675e:	2b00      	cmp	r3, #0
   36760:	dde5      	ble.n	3672e <__aeabi_ddiv+0x50e>
   36762:	2201      	movs	r2, #1
   36764:	4252      	negs	r2, r2
   36766:	e7f2      	b.n	3674e <__aeabi_ddiv+0x52e>
   36768:	001d      	movs	r5, r3
   3676a:	e6fa      	b.n	36562 <__aeabi_ddiv+0x342>
   3676c:	469a      	mov	sl, r3
   3676e:	e71c      	b.n	365aa <__aeabi_ddiv+0x38a>
   36770:	42b0      	cmp	r0, r6
   36772:	d839      	bhi.n	367e8 <__aeabi_ddiv+0x5c8>
   36774:	d06e      	beq.n	36854 <__aeabi_ddiv+0x634>
   36776:	0011      	movs	r1, r2
   36778:	e73a      	b.n	365f0 <__aeabi_ddiv+0x3d0>
   3677a:	9302      	str	r3, [sp, #8]
   3677c:	e73a      	b.n	365f4 <__aeabi_ddiv+0x3d4>
   3677e:	2a1f      	cmp	r2, #31
   36780:	dc3c      	bgt.n	367fc <__aeabi_ddiv+0x5dc>
   36782:	2320      	movs	r3, #32
   36784:	1a9b      	subs	r3, r3, r2
   36786:	000c      	movs	r4, r1
   36788:	4658      	mov	r0, fp
   3678a:	4099      	lsls	r1, r3
   3678c:	4098      	lsls	r0, r3
   3678e:	1e4b      	subs	r3, r1, #1
   36790:	4199      	sbcs	r1, r3
   36792:	465b      	mov	r3, fp
   36794:	40d4      	lsrs	r4, r2
   36796:	40d3      	lsrs	r3, r2
   36798:	4320      	orrs	r0, r4
   3679a:	4308      	orrs	r0, r1
   3679c:	001a      	movs	r2, r3
   3679e:	0743      	lsls	r3, r0, #29
   367a0:	d009      	beq.n	367b6 <__aeabi_ddiv+0x596>
   367a2:	230f      	movs	r3, #15
   367a4:	4003      	ands	r3, r0
   367a6:	2b04      	cmp	r3, #4
   367a8:	d005      	beq.n	367b6 <__aeabi_ddiv+0x596>
   367aa:	0001      	movs	r1, r0
   367ac:	1d08      	adds	r0, r1, #4
   367ae:	4288      	cmp	r0, r1
   367b0:	419b      	sbcs	r3, r3
   367b2:	425b      	negs	r3, r3
   367b4:	18d2      	adds	r2, r2, r3
   367b6:	0213      	lsls	r3, r2, #8
   367b8:	d53a      	bpl.n	36830 <__aeabi_ddiv+0x610>
   367ba:	2301      	movs	r3, #1
   367bc:	9a02      	ldr	r2, [sp, #8]
   367be:	2401      	movs	r4, #1
   367c0:	401a      	ands	r2, r3
   367c2:	2300      	movs	r3, #0
   367c4:	4694      	mov	ip, r2
   367c6:	4698      	mov	r8, r3
   367c8:	2200      	movs	r2, #0
   367ca:	e5f7      	b.n	363bc <__aeabi_ddiv+0x19c>
   367cc:	2102      	movs	r1, #2
   367ce:	4249      	negs	r1, r1
   367d0:	468c      	mov	ip, r1
   367d2:	9d03      	ldr	r5, [sp, #12]
   367d4:	44e3      	add	fp, ip
   367d6:	46ac      	mov	ip, r5
   367d8:	44e2      	add	sl, ip
   367da:	45aa      	cmp	sl, r5
   367dc:	41ad      	sbcs	r5, r5
   367de:	426d      	negs	r5, r5
   367e0:	4445      	add	r5, r8
   367e2:	18ed      	adds	r5, r5, r3
   367e4:	1a2d      	subs	r5, r5, r0
   367e6:	e696      	b.n	36516 <__aeabi_ddiv+0x2f6>
   367e8:	1e8a      	subs	r2, r1, #2
   367ea:	9903      	ldr	r1, [sp, #12]
   367ec:	004d      	lsls	r5, r1, #1
   367ee:	428d      	cmp	r5, r1
   367f0:	4189      	sbcs	r1, r1
   367f2:	4249      	negs	r1, r1
   367f4:	4441      	add	r1, r8
   367f6:	1876      	adds	r6, r6, r1
   367f8:	9503      	str	r5, [sp, #12]
   367fa:	e78f      	b.n	3671c <__aeabi_ddiv+0x4fc>
   367fc:	201f      	movs	r0, #31
   367fe:	4240      	negs	r0, r0
   36800:	1ac3      	subs	r3, r0, r3
   36802:	4658      	mov	r0, fp
   36804:	40d8      	lsrs	r0, r3
   36806:	0003      	movs	r3, r0
   36808:	2a20      	cmp	r2, #32
   3680a:	d028      	beq.n	3685e <__aeabi_ddiv+0x63e>
   3680c:	2040      	movs	r0, #64	; 0x40
   3680e:	465d      	mov	r5, fp
   36810:	1a82      	subs	r2, r0, r2
   36812:	4095      	lsls	r5, r2
   36814:	4329      	orrs	r1, r5
   36816:	1e4a      	subs	r2, r1, #1
   36818:	4191      	sbcs	r1, r2
   3681a:	4319      	orrs	r1, r3
   3681c:	2307      	movs	r3, #7
   3681e:	2200      	movs	r2, #0
   36820:	400b      	ands	r3, r1
   36822:	d009      	beq.n	36838 <__aeabi_ddiv+0x618>
   36824:	230f      	movs	r3, #15
   36826:	2200      	movs	r2, #0
   36828:	400b      	ands	r3, r1
   3682a:	0008      	movs	r0, r1
   3682c:	2b04      	cmp	r3, #4
   3682e:	d1bd      	bne.n	367ac <__aeabi_ddiv+0x58c>
   36830:	0001      	movs	r1, r0
   36832:	0753      	lsls	r3, r2, #29
   36834:	0252      	lsls	r2, r2, #9
   36836:	0b12      	lsrs	r2, r2, #12
   36838:	08c9      	lsrs	r1, r1, #3
   3683a:	4319      	orrs	r1, r3
   3683c:	2301      	movs	r3, #1
   3683e:	4688      	mov	r8, r1
   36840:	9902      	ldr	r1, [sp, #8]
   36842:	2400      	movs	r4, #0
   36844:	4019      	ands	r1, r3
   36846:	468c      	mov	ip, r1
   36848:	e5b8      	b.n	363bc <__aeabi_ddiv+0x19c>
   3684a:	4552      	cmp	r2, sl
   3684c:	d8be      	bhi.n	367cc <__aeabi_ddiv+0x5ac>
   3684e:	468b      	mov	fp, r1
   36850:	2500      	movs	r5, #0
   36852:	e660      	b.n	36516 <__aeabi_ddiv+0x2f6>
   36854:	9d03      	ldr	r5, [sp, #12]
   36856:	429d      	cmp	r5, r3
   36858:	d3c6      	bcc.n	367e8 <__aeabi_ddiv+0x5c8>
   3685a:	0011      	movs	r1, r2
   3685c:	e762      	b.n	36724 <__aeabi_ddiv+0x504>
   3685e:	2500      	movs	r5, #0
   36860:	e7d8      	b.n	36814 <__aeabi_ddiv+0x5f4>
   36862:	2280      	movs	r2, #128	; 0x80
   36864:	465b      	mov	r3, fp
   36866:	0312      	lsls	r2, r2, #12
   36868:	431a      	orrs	r2, r3
   3686a:	9b01      	ldr	r3, [sp, #4]
   3686c:	0312      	lsls	r2, r2, #12
   3686e:	0b12      	lsrs	r2, r2, #12
   36870:	469c      	mov	ip, r3
   36872:	4688      	mov	r8, r1
   36874:	4c03      	ldr	r4, [pc, #12]	; (36884 <__aeabi_ddiv+0x664>)
   36876:	e5a1      	b.n	363bc <__aeabi_ddiv+0x19c>
   36878:	000003ff 	.word	0x000003ff
   3687c:	feffffff 	.word	0xfeffffff
   36880:	000007fe 	.word	0x000007fe
   36884:	000007ff 	.word	0x000007ff

00036888 <__eqdf2>:
   36888:	b5f0      	push	{r4, r5, r6, r7, lr}
   3688a:	464f      	mov	r7, r9
   3688c:	4646      	mov	r6, r8
   3688e:	46d6      	mov	lr, sl
   36890:	005c      	lsls	r4, r3, #1
   36892:	b5c0      	push	{r6, r7, lr}
   36894:	031f      	lsls	r7, r3, #12
   36896:	0fdb      	lsrs	r3, r3, #31
   36898:	469a      	mov	sl, r3
   3689a:	4b17      	ldr	r3, [pc, #92]	; (368f8 <__eqdf2+0x70>)
   3689c:	030e      	lsls	r6, r1, #12
   3689e:	004d      	lsls	r5, r1, #1
   368a0:	4684      	mov	ip, r0
   368a2:	4680      	mov	r8, r0
   368a4:	0b36      	lsrs	r6, r6, #12
   368a6:	0d6d      	lsrs	r5, r5, #21
   368a8:	0fc9      	lsrs	r1, r1, #31
   368aa:	4691      	mov	r9, r2
   368ac:	0b3f      	lsrs	r7, r7, #12
   368ae:	0d64      	lsrs	r4, r4, #21
   368b0:	2001      	movs	r0, #1
   368b2:	429d      	cmp	r5, r3
   368b4:	d008      	beq.n	368c8 <__eqdf2+0x40>
   368b6:	429c      	cmp	r4, r3
   368b8:	d001      	beq.n	368be <__eqdf2+0x36>
   368ba:	42a5      	cmp	r5, r4
   368bc:	d00b      	beq.n	368d6 <__eqdf2+0x4e>
   368be:	bc1c      	pop	{r2, r3, r4}
   368c0:	4690      	mov	r8, r2
   368c2:	4699      	mov	r9, r3
   368c4:	46a2      	mov	sl, r4
   368c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   368c8:	4663      	mov	r3, ip
   368ca:	4333      	orrs	r3, r6
   368cc:	d1f7      	bne.n	368be <__eqdf2+0x36>
   368ce:	42ac      	cmp	r4, r5
   368d0:	d1f5      	bne.n	368be <__eqdf2+0x36>
   368d2:	433a      	orrs	r2, r7
   368d4:	d1f3      	bne.n	368be <__eqdf2+0x36>
   368d6:	2001      	movs	r0, #1
   368d8:	42be      	cmp	r6, r7
   368da:	d1f0      	bne.n	368be <__eqdf2+0x36>
   368dc:	45c8      	cmp	r8, r9
   368de:	d1ee      	bne.n	368be <__eqdf2+0x36>
   368e0:	4551      	cmp	r1, sl
   368e2:	d007      	beq.n	368f4 <__eqdf2+0x6c>
   368e4:	2d00      	cmp	r5, #0
   368e6:	d1ea      	bne.n	368be <__eqdf2+0x36>
   368e8:	4663      	mov	r3, ip
   368ea:	431e      	orrs	r6, r3
   368ec:	0030      	movs	r0, r6
   368ee:	1e46      	subs	r6, r0, #1
   368f0:	41b0      	sbcs	r0, r6
   368f2:	e7e4      	b.n	368be <__eqdf2+0x36>
   368f4:	2000      	movs	r0, #0
   368f6:	e7e2      	b.n	368be <__eqdf2+0x36>
   368f8:	000007ff 	.word	0x000007ff

000368fc <__gedf2>:
   368fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   368fe:	4645      	mov	r5, r8
   36900:	46de      	mov	lr, fp
   36902:	4657      	mov	r7, sl
   36904:	464e      	mov	r6, r9
   36906:	b5e0      	push	{r5, r6, r7, lr}
   36908:	031f      	lsls	r7, r3, #12
   3690a:	0b3d      	lsrs	r5, r7, #12
   3690c:	4f2c      	ldr	r7, [pc, #176]	; (369c0 <__gedf2+0xc4>)
   3690e:	030e      	lsls	r6, r1, #12
   36910:	004c      	lsls	r4, r1, #1
   36912:	46ab      	mov	fp, r5
   36914:	005d      	lsls	r5, r3, #1
   36916:	4684      	mov	ip, r0
   36918:	0b36      	lsrs	r6, r6, #12
   3691a:	0d64      	lsrs	r4, r4, #21
   3691c:	0fc9      	lsrs	r1, r1, #31
   3691e:	4690      	mov	r8, r2
   36920:	0d6d      	lsrs	r5, r5, #21
   36922:	0fdb      	lsrs	r3, r3, #31
   36924:	42bc      	cmp	r4, r7
   36926:	d02a      	beq.n	3697e <__gedf2+0x82>
   36928:	4f25      	ldr	r7, [pc, #148]	; (369c0 <__gedf2+0xc4>)
   3692a:	42bd      	cmp	r5, r7
   3692c:	d02d      	beq.n	3698a <__gedf2+0x8e>
   3692e:	2c00      	cmp	r4, #0
   36930:	d10f      	bne.n	36952 <__gedf2+0x56>
   36932:	4330      	orrs	r0, r6
   36934:	0007      	movs	r7, r0
   36936:	4681      	mov	r9, r0
   36938:	4278      	negs	r0, r7
   3693a:	4178      	adcs	r0, r7
   3693c:	b2c0      	uxtb	r0, r0
   3693e:	2d00      	cmp	r5, #0
   36940:	d117      	bne.n	36972 <__gedf2+0x76>
   36942:	465f      	mov	r7, fp
   36944:	433a      	orrs	r2, r7
   36946:	d114      	bne.n	36972 <__gedf2+0x76>
   36948:	464b      	mov	r3, r9
   3694a:	2000      	movs	r0, #0
   3694c:	2b00      	cmp	r3, #0
   3694e:	d00a      	beq.n	36966 <__gedf2+0x6a>
   36950:	e006      	b.n	36960 <__gedf2+0x64>
   36952:	2d00      	cmp	r5, #0
   36954:	d102      	bne.n	3695c <__gedf2+0x60>
   36956:	4658      	mov	r0, fp
   36958:	4302      	orrs	r2, r0
   3695a:	d001      	beq.n	36960 <__gedf2+0x64>
   3695c:	4299      	cmp	r1, r3
   3695e:	d018      	beq.n	36992 <__gedf2+0x96>
   36960:	4248      	negs	r0, r1
   36962:	2101      	movs	r1, #1
   36964:	4308      	orrs	r0, r1
   36966:	bc3c      	pop	{r2, r3, r4, r5}
   36968:	4690      	mov	r8, r2
   3696a:	4699      	mov	r9, r3
   3696c:	46a2      	mov	sl, r4
   3696e:	46ab      	mov	fp, r5
   36970:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36972:	2800      	cmp	r0, #0
   36974:	d0f2      	beq.n	3695c <__gedf2+0x60>
   36976:	2001      	movs	r0, #1
   36978:	3b01      	subs	r3, #1
   3697a:	4318      	orrs	r0, r3
   3697c:	e7f3      	b.n	36966 <__gedf2+0x6a>
   3697e:	0037      	movs	r7, r6
   36980:	4307      	orrs	r7, r0
   36982:	d0d1      	beq.n	36928 <__gedf2+0x2c>
   36984:	2002      	movs	r0, #2
   36986:	4240      	negs	r0, r0
   36988:	e7ed      	b.n	36966 <__gedf2+0x6a>
   3698a:	465f      	mov	r7, fp
   3698c:	4317      	orrs	r7, r2
   3698e:	d0ce      	beq.n	3692e <__gedf2+0x32>
   36990:	e7f8      	b.n	36984 <__gedf2+0x88>
   36992:	42ac      	cmp	r4, r5
   36994:	dce4      	bgt.n	36960 <__gedf2+0x64>
   36996:	da03      	bge.n	369a0 <__gedf2+0xa4>
   36998:	1e48      	subs	r0, r1, #1
   3699a:	2101      	movs	r1, #1
   3699c:	4308      	orrs	r0, r1
   3699e:	e7e2      	b.n	36966 <__gedf2+0x6a>
   369a0:	455e      	cmp	r6, fp
   369a2:	d8dd      	bhi.n	36960 <__gedf2+0x64>
   369a4:	d006      	beq.n	369b4 <__gedf2+0xb8>
   369a6:	2000      	movs	r0, #0
   369a8:	455e      	cmp	r6, fp
   369aa:	d2dc      	bcs.n	36966 <__gedf2+0x6a>
   369ac:	2301      	movs	r3, #1
   369ae:	1e48      	subs	r0, r1, #1
   369b0:	4318      	orrs	r0, r3
   369b2:	e7d8      	b.n	36966 <__gedf2+0x6a>
   369b4:	45c4      	cmp	ip, r8
   369b6:	d8d3      	bhi.n	36960 <__gedf2+0x64>
   369b8:	2000      	movs	r0, #0
   369ba:	45c4      	cmp	ip, r8
   369bc:	d3f6      	bcc.n	369ac <__gedf2+0xb0>
   369be:	e7d2      	b.n	36966 <__gedf2+0x6a>
   369c0:	000007ff 	.word	0x000007ff

000369c4 <__ledf2>:
   369c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   369c6:	464e      	mov	r6, r9
   369c8:	4645      	mov	r5, r8
   369ca:	46de      	mov	lr, fp
   369cc:	4657      	mov	r7, sl
   369ce:	005c      	lsls	r4, r3, #1
   369d0:	b5e0      	push	{r5, r6, r7, lr}
   369d2:	031f      	lsls	r7, r3, #12
   369d4:	0fdb      	lsrs	r3, r3, #31
   369d6:	4699      	mov	r9, r3
   369d8:	4b2a      	ldr	r3, [pc, #168]	; (36a84 <__ledf2+0xc0>)
   369da:	030e      	lsls	r6, r1, #12
   369dc:	004d      	lsls	r5, r1, #1
   369de:	0fc9      	lsrs	r1, r1, #31
   369e0:	4684      	mov	ip, r0
   369e2:	0b36      	lsrs	r6, r6, #12
   369e4:	0d6d      	lsrs	r5, r5, #21
   369e6:	468b      	mov	fp, r1
   369e8:	4690      	mov	r8, r2
   369ea:	0b3f      	lsrs	r7, r7, #12
   369ec:	0d64      	lsrs	r4, r4, #21
   369ee:	429d      	cmp	r5, r3
   369f0:	d020      	beq.n	36a34 <__ledf2+0x70>
   369f2:	4b24      	ldr	r3, [pc, #144]	; (36a84 <__ledf2+0xc0>)
   369f4:	429c      	cmp	r4, r3
   369f6:	d022      	beq.n	36a3e <__ledf2+0x7a>
   369f8:	2d00      	cmp	r5, #0
   369fa:	d112      	bne.n	36a22 <__ledf2+0x5e>
   369fc:	4330      	orrs	r0, r6
   369fe:	4243      	negs	r3, r0
   36a00:	4143      	adcs	r3, r0
   36a02:	b2db      	uxtb	r3, r3
   36a04:	2c00      	cmp	r4, #0
   36a06:	d01f      	beq.n	36a48 <__ledf2+0x84>
   36a08:	2b00      	cmp	r3, #0
   36a0a:	d00c      	beq.n	36a26 <__ledf2+0x62>
   36a0c:	464b      	mov	r3, r9
   36a0e:	2001      	movs	r0, #1
   36a10:	3b01      	subs	r3, #1
   36a12:	4303      	orrs	r3, r0
   36a14:	0018      	movs	r0, r3
   36a16:	bc3c      	pop	{r2, r3, r4, r5}
   36a18:	4690      	mov	r8, r2
   36a1a:	4699      	mov	r9, r3
   36a1c:	46a2      	mov	sl, r4
   36a1e:	46ab      	mov	fp, r5
   36a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36a22:	2c00      	cmp	r4, #0
   36a24:	d016      	beq.n	36a54 <__ledf2+0x90>
   36a26:	45cb      	cmp	fp, r9
   36a28:	d017      	beq.n	36a5a <__ledf2+0x96>
   36a2a:	465b      	mov	r3, fp
   36a2c:	4259      	negs	r1, r3
   36a2e:	2301      	movs	r3, #1
   36a30:	430b      	orrs	r3, r1
   36a32:	e7ef      	b.n	36a14 <__ledf2+0x50>
   36a34:	0031      	movs	r1, r6
   36a36:	2302      	movs	r3, #2
   36a38:	4301      	orrs	r1, r0
   36a3a:	d1eb      	bne.n	36a14 <__ledf2+0x50>
   36a3c:	e7d9      	b.n	369f2 <__ledf2+0x2e>
   36a3e:	0039      	movs	r1, r7
   36a40:	2302      	movs	r3, #2
   36a42:	4311      	orrs	r1, r2
   36a44:	d1e6      	bne.n	36a14 <__ledf2+0x50>
   36a46:	e7d7      	b.n	369f8 <__ledf2+0x34>
   36a48:	433a      	orrs	r2, r7
   36a4a:	d1dd      	bne.n	36a08 <__ledf2+0x44>
   36a4c:	2300      	movs	r3, #0
   36a4e:	2800      	cmp	r0, #0
   36a50:	d0e0      	beq.n	36a14 <__ledf2+0x50>
   36a52:	e7ea      	b.n	36a2a <__ledf2+0x66>
   36a54:	433a      	orrs	r2, r7
   36a56:	d1e6      	bne.n	36a26 <__ledf2+0x62>
   36a58:	e7e7      	b.n	36a2a <__ledf2+0x66>
   36a5a:	42a5      	cmp	r5, r4
   36a5c:	dce5      	bgt.n	36a2a <__ledf2+0x66>
   36a5e:	db05      	blt.n	36a6c <__ledf2+0xa8>
   36a60:	42be      	cmp	r6, r7
   36a62:	d8e2      	bhi.n	36a2a <__ledf2+0x66>
   36a64:	d007      	beq.n	36a76 <__ledf2+0xb2>
   36a66:	2300      	movs	r3, #0
   36a68:	42be      	cmp	r6, r7
   36a6a:	d2d3      	bcs.n	36a14 <__ledf2+0x50>
   36a6c:	4659      	mov	r1, fp
   36a6e:	2301      	movs	r3, #1
   36a70:	3901      	subs	r1, #1
   36a72:	430b      	orrs	r3, r1
   36a74:	e7ce      	b.n	36a14 <__ledf2+0x50>
   36a76:	45c4      	cmp	ip, r8
   36a78:	d8d7      	bhi.n	36a2a <__ledf2+0x66>
   36a7a:	2300      	movs	r3, #0
   36a7c:	45c4      	cmp	ip, r8
   36a7e:	d3f5      	bcc.n	36a6c <__ledf2+0xa8>
   36a80:	e7c8      	b.n	36a14 <__ledf2+0x50>
   36a82:	46c0      	nop			; (mov r8, r8)
   36a84:	000007ff 	.word	0x000007ff

00036a88 <__aeabi_dmul>:
   36a88:	b5f0      	push	{r4, r5, r6, r7, lr}
   36a8a:	4657      	mov	r7, sl
   36a8c:	4645      	mov	r5, r8
   36a8e:	46de      	mov	lr, fp
   36a90:	464e      	mov	r6, r9
   36a92:	b5e0      	push	{r5, r6, r7, lr}
   36a94:	030c      	lsls	r4, r1, #12
   36a96:	4698      	mov	r8, r3
   36a98:	004e      	lsls	r6, r1, #1
   36a9a:	0b23      	lsrs	r3, r4, #12
   36a9c:	b087      	sub	sp, #28
   36a9e:	0007      	movs	r7, r0
   36aa0:	4692      	mov	sl, r2
   36aa2:	469b      	mov	fp, r3
   36aa4:	0d76      	lsrs	r6, r6, #21
   36aa6:	0fcd      	lsrs	r5, r1, #31
   36aa8:	2e00      	cmp	r6, #0
   36aaa:	d06b      	beq.n	36b84 <__aeabi_dmul+0xfc>
   36aac:	4b6d      	ldr	r3, [pc, #436]	; (36c64 <__aeabi_dmul+0x1dc>)
   36aae:	429e      	cmp	r6, r3
   36ab0:	d035      	beq.n	36b1e <__aeabi_dmul+0x96>
   36ab2:	2480      	movs	r4, #128	; 0x80
   36ab4:	465b      	mov	r3, fp
   36ab6:	0f42      	lsrs	r2, r0, #29
   36ab8:	0424      	lsls	r4, r4, #16
   36aba:	00db      	lsls	r3, r3, #3
   36abc:	4314      	orrs	r4, r2
   36abe:	431c      	orrs	r4, r3
   36ac0:	00c3      	lsls	r3, r0, #3
   36ac2:	4699      	mov	r9, r3
   36ac4:	4b68      	ldr	r3, [pc, #416]	; (36c68 <__aeabi_dmul+0x1e0>)
   36ac6:	46a3      	mov	fp, r4
   36ac8:	469c      	mov	ip, r3
   36aca:	2300      	movs	r3, #0
   36acc:	2700      	movs	r7, #0
   36ace:	4466      	add	r6, ip
   36ad0:	9302      	str	r3, [sp, #8]
   36ad2:	4643      	mov	r3, r8
   36ad4:	031c      	lsls	r4, r3, #12
   36ad6:	005a      	lsls	r2, r3, #1
   36ad8:	0fdb      	lsrs	r3, r3, #31
   36ada:	4650      	mov	r0, sl
   36adc:	0b24      	lsrs	r4, r4, #12
   36ade:	0d52      	lsrs	r2, r2, #21
   36ae0:	4698      	mov	r8, r3
   36ae2:	d100      	bne.n	36ae6 <__aeabi_dmul+0x5e>
   36ae4:	e076      	b.n	36bd4 <__aeabi_dmul+0x14c>
   36ae6:	4b5f      	ldr	r3, [pc, #380]	; (36c64 <__aeabi_dmul+0x1dc>)
   36ae8:	429a      	cmp	r2, r3
   36aea:	d06d      	beq.n	36bc8 <__aeabi_dmul+0x140>
   36aec:	2380      	movs	r3, #128	; 0x80
   36aee:	0f41      	lsrs	r1, r0, #29
   36af0:	041b      	lsls	r3, r3, #16
   36af2:	430b      	orrs	r3, r1
   36af4:	495c      	ldr	r1, [pc, #368]	; (36c68 <__aeabi_dmul+0x1e0>)
   36af6:	00e4      	lsls	r4, r4, #3
   36af8:	468c      	mov	ip, r1
   36afa:	431c      	orrs	r4, r3
   36afc:	00c3      	lsls	r3, r0, #3
   36afe:	2000      	movs	r0, #0
   36b00:	4462      	add	r2, ip
   36b02:	4641      	mov	r1, r8
   36b04:	18b6      	adds	r6, r6, r2
   36b06:	4069      	eors	r1, r5
   36b08:	1c72      	adds	r2, r6, #1
   36b0a:	9101      	str	r1, [sp, #4]
   36b0c:	4694      	mov	ip, r2
   36b0e:	4307      	orrs	r7, r0
   36b10:	2f0f      	cmp	r7, #15
   36b12:	d900      	bls.n	36b16 <__aeabi_dmul+0x8e>
   36b14:	e0b0      	b.n	36c78 <__aeabi_dmul+0x1f0>
   36b16:	4a55      	ldr	r2, [pc, #340]	; (36c6c <__aeabi_dmul+0x1e4>)
   36b18:	00bf      	lsls	r7, r7, #2
   36b1a:	59d2      	ldr	r2, [r2, r7]
   36b1c:	4697      	mov	pc, r2
   36b1e:	465b      	mov	r3, fp
   36b20:	4303      	orrs	r3, r0
   36b22:	4699      	mov	r9, r3
   36b24:	d000      	beq.n	36b28 <__aeabi_dmul+0xa0>
   36b26:	e087      	b.n	36c38 <__aeabi_dmul+0x1b0>
   36b28:	2300      	movs	r3, #0
   36b2a:	469b      	mov	fp, r3
   36b2c:	3302      	adds	r3, #2
   36b2e:	2708      	movs	r7, #8
   36b30:	9302      	str	r3, [sp, #8]
   36b32:	e7ce      	b.n	36ad2 <__aeabi_dmul+0x4a>
   36b34:	4642      	mov	r2, r8
   36b36:	9201      	str	r2, [sp, #4]
   36b38:	2802      	cmp	r0, #2
   36b3a:	d067      	beq.n	36c0c <__aeabi_dmul+0x184>
   36b3c:	2803      	cmp	r0, #3
   36b3e:	d100      	bne.n	36b42 <__aeabi_dmul+0xba>
   36b40:	e20e      	b.n	36f60 <__aeabi_dmul+0x4d8>
   36b42:	2801      	cmp	r0, #1
   36b44:	d000      	beq.n	36b48 <__aeabi_dmul+0xc0>
   36b46:	e162      	b.n	36e0e <__aeabi_dmul+0x386>
   36b48:	2300      	movs	r3, #0
   36b4a:	2400      	movs	r4, #0
   36b4c:	2200      	movs	r2, #0
   36b4e:	4699      	mov	r9, r3
   36b50:	9901      	ldr	r1, [sp, #4]
   36b52:	4001      	ands	r1, r0
   36b54:	b2cd      	uxtb	r5, r1
   36b56:	2100      	movs	r1, #0
   36b58:	0312      	lsls	r2, r2, #12
   36b5a:	0d0b      	lsrs	r3, r1, #20
   36b5c:	0b12      	lsrs	r2, r2, #12
   36b5e:	051b      	lsls	r3, r3, #20
   36b60:	4313      	orrs	r3, r2
   36b62:	4a43      	ldr	r2, [pc, #268]	; (36c70 <__aeabi_dmul+0x1e8>)
   36b64:	0524      	lsls	r4, r4, #20
   36b66:	4013      	ands	r3, r2
   36b68:	431c      	orrs	r4, r3
   36b6a:	0064      	lsls	r4, r4, #1
   36b6c:	07ed      	lsls	r5, r5, #31
   36b6e:	0864      	lsrs	r4, r4, #1
   36b70:	432c      	orrs	r4, r5
   36b72:	4648      	mov	r0, r9
   36b74:	0021      	movs	r1, r4
   36b76:	b007      	add	sp, #28
   36b78:	bc3c      	pop	{r2, r3, r4, r5}
   36b7a:	4690      	mov	r8, r2
   36b7c:	4699      	mov	r9, r3
   36b7e:	46a2      	mov	sl, r4
   36b80:	46ab      	mov	fp, r5
   36b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36b84:	4303      	orrs	r3, r0
   36b86:	4699      	mov	r9, r3
   36b88:	d04f      	beq.n	36c2a <__aeabi_dmul+0x1a2>
   36b8a:	465b      	mov	r3, fp
   36b8c:	2b00      	cmp	r3, #0
   36b8e:	d100      	bne.n	36b92 <__aeabi_dmul+0x10a>
   36b90:	e189      	b.n	36ea6 <__aeabi_dmul+0x41e>
   36b92:	4658      	mov	r0, fp
   36b94:	f000 fd7a 	bl	3768c <__clzsi2>
   36b98:	0003      	movs	r3, r0
   36b9a:	3b0b      	subs	r3, #11
   36b9c:	2b1c      	cmp	r3, #28
   36b9e:	dd00      	ble.n	36ba2 <__aeabi_dmul+0x11a>
   36ba0:	e17a      	b.n	36e98 <__aeabi_dmul+0x410>
   36ba2:	221d      	movs	r2, #29
   36ba4:	1ad3      	subs	r3, r2, r3
   36ba6:	003a      	movs	r2, r7
   36ba8:	0001      	movs	r1, r0
   36baa:	465c      	mov	r4, fp
   36bac:	40da      	lsrs	r2, r3
   36bae:	3908      	subs	r1, #8
   36bb0:	408c      	lsls	r4, r1
   36bb2:	0013      	movs	r3, r2
   36bb4:	408f      	lsls	r7, r1
   36bb6:	4323      	orrs	r3, r4
   36bb8:	469b      	mov	fp, r3
   36bba:	46b9      	mov	r9, r7
   36bbc:	2300      	movs	r3, #0
   36bbe:	4e2d      	ldr	r6, [pc, #180]	; (36c74 <__aeabi_dmul+0x1ec>)
   36bc0:	2700      	movs	r7, #0
   36bc2:	1a36      	subs	r6, r6, r0
   36bc4:	9302      	str	r3, [sp, #8]
   36bc6:	e784      	b.n	36ad2 <__aeabi_dmul+0x4a>
   36bc8:	4653      	mov	r3, sl
   36bca:	4323      	orrs	r3, r4
   36bcc:	d12a      	bne.n	36c24 <__aeabi_dmul+0x19c>
   36bce:	2400      	movs	r4, #0
   36bd0:	2002      	movs	r0, #2
   36bd2:	e796      	b.n	36b02 <__aeabi_dmul+0x7a>
   36bd4:	4653      	mov	r3, sl
   36bd6:	4323      	orrs	r3, r4
   36bd8:	d020      	beq.n	36c1c <__aeabi_dmul+0x194>
   36bda:	2c00      	cmp	r4, #0
   36bdc:	d100      	bne.n	36be0 <__aeabi_dmul+0x158>
   36bde:	e157      	b.n	36e90 <__aeabi_dmul+0x408>
   36be0:	0020      	movs	r0, r4
   36be2:	f000 fd53 	bl	3768c <__clzsi2>
   36be6:	0003      	movs	r3, r0
   36be8:	3b0b      	subs	r3, #11
   36bea:	2b1c      	cmp	r3, #28
   36bec:	dd00      	ble.n	36bf0 <__aeabi_dmul+0x168>
   36bee:	e149      	b.n	36e84 <__aeabi_dmul+0x3fc>
   36bf0:	211d      	movs	r1, #29
   36bf2:	1acb      	subs	r3, r1, r3
   36bf4:	4651      	mov	r1, sl
   36bf6:	0002      	movs	r2, r0
   36bf8:	40d9      	lsrs	r1, r3
   36bfa:	4653      	mov	r3, sl
   36bfc:	3a08      	subs	r2, #8
   36bfe:	4094      	lsls	r4, r2
   36c00:	4093      	lsls	r3, r2
   36c02:	430c      	orrs	r4, r1
   36c04:	4a1b      	ldr	r2, [pc, #108]	; (36c74 <__aeabi_dmul+0x1ec>)
   36c06:	1a12      	subs	r2, r2, r0
   36c08:	2000      	movs	r0, #0
   36c0a:	e77a      	b.n	36b02 <__aeabi_dmul+0x7a>
   36c0c:	2501      	movs	r5, #1
   36c0e:	9b01      	ldr	r3, [sp, #4]
   36c10:	4c14      	ldr	r4, [pc, #80]	; (36c64 <__aeabi_dmul+0x1dc>)
   36c12:	401d      	ands	r5, r3
   36c14:	2300      	movs	r3, #0
   36c16:	2200      	movs	r2, #0
   36c18:	4699      	mov	r9, r3
   36c1a:	e79c      	b.n	36b56 <__aeabi_dmul+0xce>
   36c1c:	2400      	movs	r4, #0
   36c1e:	2200      	movs	r2, #0
   36c20:	2001      	movs	r0, #1
   36c22:	e76e      	b.n	36b02 <__aeabi_dmul+0x7a>
   36c24:	4653      	mov	r3, sl
   36c26:	2003      	movs	r0, #3
   36c28:	e76b      	b.n	36b02 <__aeabi_dmul+0x7a>
   36c2a:	2300      	movs	r3, #0
   36c2c:	469b      	mov	fp, r3
   36c2e:	3301      	adds	r3, #1
   36c30:	2704      	movs	r7, #4
   36c32:	2600      	movs	r6, #0
   36c34:	9302      	str	r3, [sp, #8]
   36c36:	e74c      	b.n	36ad2 <__aeabi_dmul+0x4a>
   36c38:	2303      	movs	r3, #3
   36c3a:	4681      	mov	r9, r0
   36c3c:	270c      	movs	r7, #12
   36c3e:	9302      	str	r3, [sp, #8]
   36c40:	e747      	b.n	36ad2 <__aeabi_dmul+0x4a>
   36c42:	2280      	movs	r2, #128	; 0x80
   36c44:	2300      	movs	r3, #0
   36c46:	2500      	movs	r5, #0
   36c48:	0312      	lsls	r2, r2, #12
   36c4a:	4699      	mov	r9, r3
   36c4c:	4c05      	ldr	r4, [pc, #20]	; (36c64 <__aeabi_dmul+0x1dc>)
   36c4e:	e782      	b.n	36b56 <__aeabi_dmul+0xce>
   36c50:	465c      	mov	r4, fp
   36c52:	464b      	mov	r3, r9
   36c54:	9802      	ldr	r0, [sp, #8]
   36c56:	e76f      	b.n	36b38 <__aeabi_dmul+0xb0>
   36c58:	465c      	mov	r4, fp
   36c5a:	464b      	mov	r3, r9
   36c5c:	9501      	str	r5, [sp, #4]
   36c5e:	9802      	ldr	r0, [sp, #8]
   36c60:	e76a      	b.n	36b38 <__aeabi_dmul+0xb0>
   36c62:	46c0      	nop			; (mov r8, r8)
   36c64:	000007ff 	.word	0x000007ff
   36c68:	fffffc01 	.word	0xfffffc01
   36c6c:	0003d454 	.word	0x0003d454
   36c70:	800fffff 	.word	0x800fffff
   36c74:	fffffc0d 	.word	0xfffffc0d
   36c78:	464a      	mov	r2, r9
   36c7a:	4649      	mov	r1, r9
   36c7c:	0c17      	lsrs	r7, r2, #16
   36c7e:	0c1a      	lsrs	r2, r3, #16
   36c80:	041b      	lsls	r3, r3, #16
   36c82:	0c1b      	lsrs	r3, r3, #16
   36c84:	0408      	lsls	r0, r1, #16
   36c86:	0019      	movs	r1, r3
   36c88:	0c00      	lsrs	r0, r0, #16
   36c8a:	4341      	muls	r1, r0
   36c8c:	0015      	movs	r5, r2
   36c8e:	4688      	mov	r8, r1
   36c90:	0019      	movs	r1, r3
   36c92:	437d      	muls	r5, r7
   36c94:	4379      	muls	r1, r7
   36c96:	9503      	str	r5, [sp, #12]
   36c98:	4689      	mov	r9, r1
   36c9a:	0029      	movs	r1, r5
   36c9c:	0015      	movs	r5, r2
   36c9e:	4345      	muls	r5, r0
   36ca0:	444d      	add	r5, r9
   36ca2:	9502      	str	r5, [sp, #8]
   36ca4:	4645      	mov	r5, r8
   36ca6:	0c2d      	lsrs	r5, r5, #16
   36ca8:	46aa      	mov	sl, r5
   36caa:	9d02      	ldr	r5, [sp, #8]
   36cac:	4455      	add	r5, sl
   36cae:	45a9      	cmp	r9, r5
   36cb0:	d906      	bls.n	36cc0 <__aeabi_dmul+0x238>
   36cb2:	468a      	mov	sl, r1
   36cb4:	2180      	movs	r1, #128	; 0x80
   36cb6:	0249      	lsls	r1, r1, #9
   36cb8:	4689      	mov	r9, r1
   36cba:	44ca      	add	sl, r9
   36cbc:	4651      	mov	r1, sl
   36cbe:	9103      	str	r1, [sp, #12]
   36cc0:	0c29      	lsrs	r1, r5, #16
   36cc2:	9104      	str	r1, [sp, #16]
   36cc4:	4641      	mov	r1, r8
   36cc6:	0409      	lsls	r1, r1, #16
   36cc8:	042d      	lsls	r5, r5, #16
   36cca:	0c09      	lsrs	r1, r1, #16
   36ccc:	4688      	mov	r8, r1
   36cce:	0029      	movs	r1, r5
   36cd0:	0c25      	lsrs	r5, r4, #16
   36cd2:	0424      	lsls	r4, r4, #16
   36cd4:	4441      	add	r1, r8
   36cd6:	0c24      	lsrs	r4, r4, #16
   36cd8:	9105      	str	r1, [sp, #20]
   36cda:	0021      	movs	r1, r4
   36cdc:	4341      	muls	r1, r0
   36cde:	4688      	mov	r8, r1
   36ce0:	0021      	movs	r1, r4
   36ce2:	4379      	muls	r1, r7
   36ce4:	468a      	mov	sl, r1
   36ce6:	4368      	muls	r0, r5
   36ce8:	4641      	mov	r1, r8
   36cea:	4450      	add	r0, sl
   36cec:	4681      	mov	r9, r0
   36cee:	0c08      	lsrs	r0, r1, #16
   36cf0:	4448      	add	r0, r9
   36cf2:	436f      	muls	r7, r5
   36cf4:	4582      	cmp	sl, r0
   36cf6:	d903      	bls.n	36d00 <__aeabi_dmul+0x278>
   36cf8:	2180      	movs	r1, #128	; 0x80
   36cfa:	0249      	lsls	r1, r1, #9
   36cfc:	4689      	mov	r9, r1
   36cfe:	444f      	add	r7, r9
   36d00:	0c01      	lsrs	r1, r0, #16
   36d02:	4689      	mov	r9, r1
   36d04:	0039      	movs	r1, r7
   36d06:	4449      	add	r1, r9
   36d08:	9102      	str	r1, [sp, #8]
   36d0a:	4641      	mov	r1, r8
   36d0c:	040f      	lsls	r7, r1, #16
   36d0e:	9904      	ldr	r1, [sp, #16]
   36d10:	0c3f      	lsrs	r7, r7, #16
   36d12:	4688      	mov	r8, r1
   36d14:	0400      	lsls	r0, r0, #16
   36d16:	19c0      	adds	r0, r0, r7
   36d18:	4480      	add	r8, r0
   36d1a:	4641      	mov	r1, r8
   36d1c:	9104      	str	r1, [sp, #16]
   36d1e:	4659      	mov	r1, fp
   36d20:	0c0f      	lsrs	r7, r1, #16
   36d22:	0409      	lsls	r1, r1, #16
   36d24:	0c09      	lsrs	r1, r1, #16
   36d26:	4688      	mov	r8, r1
   36d28:	4359      	muls	r1, r3
   36d2a:	468a      	mov	sl, r1
   36d2c:	0039      	movs	r1, r7
   36d2e:	4351      	muls	r1, r2
   36d30:	4689      	mov	r9, r1
   36d32:	4641      	mov	r1, r8
   36d34:	434a      	muls	r2, r1
   36d36:	4651      	mov	r1, sl
   36d38:	0c09      	lsrs	r1, r1, #16
   36d3a:	468b      	mov	fp, r1
   36d3c:	437b      	muls	r3, r7
   36d3e:	18d2      	adds	r2, r2, r3
   36d40:	445a      	add	r2, fp
   36d42:	4293      	cmp	r3, r2
   36d44:	d903      	bls.n	36d4e <__aeabi_dmul+0x2c6>
   36d46:	2380      	movs	r3, #128	; 0x80
   36d48:	025b      	lsls	r3, r3, #9
   36d4a:	469b      	mov	fp, r3
   36d4c:	44d9      	add	r9, fp
   36d4e:	4651      	mov	r1, sl
   36d50:	0409      	lsls	r1, r1, #16
   36d52:	0c09      	lsrs	r1, r1, #16
   36d54:	468a      	mov	sl, r1
   36d56:	4641      	mov	r1, r8
   36d58:	4361      	muls	r1, r4
   36d5a:	437c      	muls	r4, r7
   36d5c:	0c13      	lsrs	r3, r2, #16
   36d5e:	0412      	lsls	r2, r2, #16
   36d60:	444b      	add	r3, r9
   36d62:	4452      	add	r2, sl
   36d64:	46a1      	mov	r9, r4
   36d66:	468a      	mov	sl, r1
   36d68:	003c      	movs	r4, r7
   36d6a:	4641      	mov	r1, r8
   36d6c:	436c      	muls	r4, r5
   36d6e:	434d      	muls	r5, r1
   36d70:	4651      	mov	r1, sl
   36d72:	444d      	add	r5, r9
   36d74:	0c0f      	lsrs	r7, r1, #16
   36d76:	197d      	adds	r5, r7, r5
   36d78:	45a9      	cmp	r9, r5
   36d7a:	d903      	bls.n	36d84 <__aeabi_dmul+0x2fc>
   36d7c:	2180      	movs	r1, #128	; 0x80
   36d7e:	0249      	lsls	r1, r1, #9
   36d80:	4688      	mov	r8, r1
   36d82:	4444      	add	r4, r8
   36d84:	9f04      	ldr	r7, [sp, #16]
   36d86:	9903      	ldr	r1, [sp, #12]
   36d88:	46b8      	mov	r8, r7
   36d8a:	4441      	add	r1, r8
   36d8c:	468b      	mov	fp, r1
   36d8e:	4583      	cmp	fp, r0
   36d90:	4180      	sbcs	r0, r0
   36d92:	4241      	negs	r1, r0
   36d94:	4688      	mov	r8, r1
   36d96:	4651      	mov	r1, sl
   36d98:	0408      	lsls	r0, r1, #16
   36d9a:	042f      	lsls	r7, r5, #16
   36d9c:	0c00      	lsrs	r0, r0, #16
   36d9e:	183f      	adds	r7, r7, r0
   36da0:	4658      	mov	r0, fp
   36da2:	9902      	ldr	r1, [sp, #8]
   36da4:	1810      	adds	r0, r2, r0
   36da6:	4689      	mov	r9, r1
   36da8:	4290      	cmp	r0, r2
   36daa:	4192      	sbcs	r2, r2
   36dac:	444f      	add	r7, r9
   36dae:	46ba      	mov	sl, r7
   36db0:	4252      	negs	r2, r2
   36db2:	4699      	mov	r9, r3
   36db4:	4693      	mov	fp, r2
   36db6:	44c2      	add	sl, r8
   36db8:	44d1      	add	r9, sl
   36dba:	44cb      	add	fp, r9
   36dbc:	428f      	cmp	r7, r1
   36dbe:	41bf      	sbcs	r7, r7
   36dc0:	45c2      	cmp	sl, r8
   36dc2:	4189      	sbcs	r1, r1
   36dc4:	4599      	cmp	r9, r3
   36dc6:	419b      	sbcs	r3, r3
   36dc8:	4593      	cmp	fp, r2
   36dca:	4192      	sbcs	r2, r2
   36dcc:	427f      	negs	r7, r7
   36dce:	4249      	negs	r1, r1
   36dd0:	0c2d      	lsrs	r5, r5, #16
   36dd2:	4252      	negs	r2, r2
   36dd4:	430f      	orrs	r7, r1
   36dd6:	425b      	negs	r3, r3
   36dd8:	4313      	orrs	r3, r2
   36dda:	197f      	adds	r7, r7, r5
   36ddc:	18ff      	adds	r7, r7, r3
   36dde:	465b      	mov	r3, fp
   36de0:	193c      	adds	r4, r7, r4
   36de2:	0ddb      	lsrs	r3, r3, #23
   36de4:	9a05      	ldr	r2, [sp, #20]
   36de6:	0264      	lsls	r4, r4, #9
   36de8:	431c      	orrs	r4, r3
   36dea:	0243      	lsls	r3, r0, #9
   36dec:	4313      	orrs	r3, r2
   36dee:	1e5d      	subs	r5, r3, #1
   36df0:	41ab      	sbcs	r3, r5
   36df2:	465a      	mov	r2, fp
   36df4:	0dc0      	lsrs	r0, r0, #23
   36df6:	4303      	orrs	r3, r0
   36df8:	0252      	lsls	r2, r2, #9
   36dfa:	4313      	orrs	r3, r2
   36dfc:	01e2      	lsls	r2, r4, #7
   36dfe:	d556      	bpl.n	36eae <__aeabi_dmul+0x426>
   36e00:	2001      	movs	r0, #1
   36e02:	085a      	lsrs	r2, r3, #1
   36e04:	4003      	ands	r3, r0
   36e06:	4313      	orrs	r3, r2
   36e08:	07e2      	lsls	r2, r4, #31
   36e0a:	4313      	orrs	r3, r2
   36e0c:	0864      	lsrs	r4, r4, #1
   36e0e:	485a      	ldr	r0, [pc, #360]	; (36f78 <__aeabi_dmul+0x4f0>)
   36e10:	4460      	add	r0, ip
   36e12:	2800      	cmp	r0, #0
   36e14:	dd4d      	ble.n	36eb2 <__aeabi_dmul+0x42a>
   36e16:	075a      	lsls	r2, r3, #29
   36e18:	d009      	beq.n	36e2e <__aeabi_dmul+0x3a6>
   36e1a:	220f      	movs	r2, #15
   36e1c:	401a      	ands	r2, r3
   36e1e:	2a04      	cmp	r2, #4
   36e20:	d005      	beq.n	36e2e <__aeabi_dmul+0x3a6>
   36e22:	1d1a      	adds	r2, r3, #4
   36e24:	429a      	cmp	r2, r3
   36e26:	419b      	sbcs	r3, r3
   36e28:	425b      	negs	r3, r3
   36e2a:	18e4      	adds	r4, r4, r3
   36e2c:	0013      	movs	r3, r2
   36e2e:	01e2      	lsls	r2, r4, #7
   36e30:	d504      	bpl.n	36e3c <__aeabi_dmul+0x3b4>
   36e32:	2080      	movs	r0, #128	; 0x80
   36e34:	4a51      	ldr	r2, [pc, #324]	; (36f7c <__aeabi_dmul+0x4f4>)
   36e36:	00c0      	lsls	r0, r0, #3
   36e38:	4014      	ands	r4, r2
   36e3a:	4460      	add	r0, ip
   36e3c:	4a50      	ldr	r2, [pc, #320]	; (36f80 <__aeabi_dmul+0x4f8>)
   36e3e:	4290      	cmp	r0, r2
   36e40:	dd00      	ble.n	36e44 <__aeabi_dmul+0x3bc>
   36e42:	e6e3      	b.n	36c0c <__aeabi_dmul+0x184>
   36e44:	2501      	movs	r5, #1
   36e46:	08db      	lsrs	r3, r3, #3
   36e48:	0762      	lsls	r2, r4, #29
   36e4a:	431a      	orrs	r2, r3
   36e4c:	0264      	lsls	r4, r4, #9
   36e4e:	9b01      	ldr	r3, [sp, #4]
   36e50:	4691      	mov	r9, r2
   36e52:	0b22      	lsrs	r2, r4, #12
   36e54:	0544      	lsls	r4, r0, #21
   36e56:	0d64      	lsrs	r4, r4, #21
   36e58:	401d      	ands	r5, r3
   36e5a:	e67c      	b.n	36b56 <__aeabi_dmul+0xce>
   36e5c:	2280      	movs	r2, #128	; 0x80
   36e5e:	4659      	mov	r1, fp
   36e60:	0312      	lsls	r2, r2, #12
   36e62:	4211      	tst	r1, r2
   36e64:	d008      	beq.n	36e78 <__aeabi_dmul+0x3f0>
   36e66:	4214      	tst	r4, r2
   36e68:	d106      	bne.n	36e78 <__aeabi_dmul+0x3f0>
   36e6a:	4322      	orrs	r2, r4
   36e6c:	0312      	lsls	r2, r2, #12
   36e6e:	0b12      	lsrs	r2, r2, #12
   36e70:	4645      	mov	r5, r8
   36e72:	4699      	mov	r9, r3
   36e74:	4c43      	ldr	r4, [pc, #268]	; (36f84 <__aeabi_dmul+0x4fc>)
   36e76:	e66e      	b.n	36b56 <__aeabi_dmul+0xce>
   36e78:	465b      	mov	r3, fp
   36e7a:	431a      	orrs	r2, r3
   36e7c:	0312      	lsls	r2, r2, #12
   36e7e:	0b12      	lsrs	r2, r2, #12
   36e80:	4c40      	ldr	r4, [pc, #256]	; (36f84 <__aeabi_dmul+0x4fc>)
   36e82:	e668      	b.n	36b56 <__aeabi_dmul+0xce>
   36e84:	0003      	movs	r3, r0
   36e86:	4654      	mov	r4, sl
   36e88:	3b28      	subs	r3, #40	; 0x28
   36e8a:	409c      	lsls	r4, r3
   36e8c:	2300      	movs	r3, #0
   36e8e:	e6b9      	b.n	36c04 <__aeabi_dmul+0x17c>
   36e90:	f000 fbfc 	bl	3768c <__clzsi2>
   36e94:	3020      	adds	r0, #32
   36e96:	e6a6      	b.n	36be6 <__aeabi_dmul+0x15e>
   36e98:	0003      	movs	r3, r0
   36e9a:	3b28      	subs	r3, #40	; 0x28
   36e9c:	409f      	lsls	r7, r3
   36e9e:	2300      	movs	r3, #0
   36ea0:	46bb      	mov	fp, r7
   36ea2:	4699      	mov	r9, r3
   36ea4:	e68a      	b.n	36bbc <__aeabi_dmul+0x134>
   36ea6:	f000 fbf1 	bl	3768c <__clzsi2>
   36eaa:	3020      	adds	r0, #32
   36eac:	e674      	b.n	36b98 <__aeabi_dmul+0x110>
   36eae:	46b4      	mov	ip, r6
   36eb0:	e7ad      	b.n	36e0e <__aeabi_dmul+0x386>
   36eb2:	2501      	movs	r5, #1
   36eb4:	1a2a      	subs	r2, r5, r0
   36eb6:	2a38      	cmp	r2, #56	; 0x38
   36eb8:	dd06      	ble.n	36ec8 <__aeabi_dmul+0x440>
   36eba:	9b01      	ldr	r3, [sp, #4]
   36ebc:	2400      	movs	r4, #0
   36ebe:	401d      	ands	r5, r3
   36ec0:	2300      	movs	r3, #0
   36ec2:	2200      	movs	r2, #0
   36ec4:	4699      	mov	r9, r3
   36ec6:	e646      	b.n	36b56 <__aeabi_dmul+0xce>
   36ec8:	2a1f      	cmp	r2, #31
   36eca:	dc21      	bgt.n	36f10 <__aeabi_dmul+0x488>
   36ecc:	2520      	movs	r5, #32
   36ece:	0020      	movs	r0, r4
   36ed0:	1aad      	subs	r5, r5, r2
   36ed2:	001e      	movs	r6, r3
   36ed4:	40ab      	lsls	r3, r5
   36ed6:	40a8      	lsls	r0, r5
   36ed8:	40d6      	lsrs	r6, r2
   36eda:	1e5d      	subs	r5, r3, #1
   36edc:	41ab      	sbcs	r3, r5
   36ede:	4330      	orrs	r0, r6
   36ee0:	4318      	orrs	r0, r3
   36ee2:	40d4      	lsrs	r4, r2
   36ee4:	0743      	lsls	r3, r0, #29
   36ee6:	d009      	beq.n	36efc <__aeabi_dmul+0x474>
   36ee8:	230f      	movs	r3, #15
   36eea:	4003      	ands	r3, r0
   36eec:	2b04      	cmp	r3, #4
   36eee:	d005      	beq.n	36efc <__aeabi_dmul+0x474>
   36ef0:	0003      	movs	r3, r0
   36ef2:	1d18      	adds	r0, r3, #4
   36ef4:	4298      	cmp	r0, r3
   36ef6:	419b      	sbcs	r3, r3
   36ef8:	425b      	negs	r3, r3
   36efa:	18e4      	adds	r4, r4, r3
   36efc:	0223      	lsls	r3, r4, #8
   36efe:	d521      	bpl.n	36f44 <__aeabi_dmul+0x4bc>
   36f00:	2501      	movs	r5, #1
   36f02:	9b01      	ldr	r3, [sp, #4]
   36f04:	2401      	movs	r4, #1
   36f06:	401d      	ands	r5, r3
   36f08:	2300      	movs	r3, #0
   36f0a:	2200      	movs	r2, #0
   36f0c:	4699      	mov	r9, r3
   36f0e:	e622      	b.n	36b56 <__aeabi_dmul+0xce>
   36f10:	251f      	movs	r5, #31
   36f12:	0021      	movs	r1, r4
   36f14:	426d      	negs	r5, r5
   36f16:	1a28      	subs	r0, r5, r0
   36f18:	40c1      	lsrs	r1, r0
   36f1a:	0008      	movs	r0, r1
   36f1c:	2a20      	cmp	r2, #32
   36f1e:	d01d      	beq.n	36f5c <__aeabi_dmul+0x4d4>
   36f20:	355f      	adds	r5, #95	; 0x5f
   36f22:	1aaa      	subs	r2, r5, r2
   36f24:	4094      	lsls	r4, r2
   36f26:	4323      	orrs	r3, r4
   36f28:	1e5c      	subs	r4, r3, #1
   36f2a:	41a3      	sbcs	r3, r4
   36f2c:	2507      	movs	r5, #7
   36f2e:	4303      	orrs	r3, r0
   36f30:	401d      	ands	r5, r3
   36f32:	2200      	movs	r2, #0
   36f34:	2d00      	cmp	r5, #0
   36f36:	d009      	beq.n	36f4c <__aeabi_dmul+0x4c4>
   36f38:	220f      	movs	r2, #15
   36f3a:	2400      	movs	r4, #0
   36f3c:	401a      	ands	r2, r3
   36f3e:	0018      	movs	r0, r3
   36f40:	2a04      	cmp	r2, #4
   36f42:	d1d6      	bne.n	36ef2 <__aeabi_dmul+0x46a>
   36f44:	0003      	movs	r3, r0
   36f46:	0765      	lsls	r5, r4, #29
   36f48:	0264      	lsls	r4, r4, #9
   36f4a:	0b22      	lsrs	r2, r4, #12
   36f4c:	08db      	lsrs	r3, r3, #3
   36f4e:	432b      	orrs	r3, r5
   36f50:	2501      	movs	r5, #1
   36f52:	4699      	mov	r9, r3
   36f54:	9b01      	ldr	r3, [sp, #4]
   36f56:	2400      	movs	r4, #0
   36f58:	401d      	ands	r5, r3
   36f5a:	e5fc      	b.n	36b56 <__aeabi_dmul+0xce>
   36f5c:	2400      	movs	r4, #0
   36f5e:	e7e2      	b.n	36f26 <__aeabi_dmul+0x49e>
   36f60:	2280      	movs	r2, #128	; 0x80
   36f62:	2501      	movs	r5, #1
   36f64:	0312      	lsls	r2, r2, #12
   36f66:	4322      	orrs	r2, r4
   36f68:	9901      	ldr	r1, [sp, #4]
   36f6a:	0312      	lsls	r2, r2, #12
   36f6c:	0b12      	lsrs	r2, r2, #12
   36f6e:	400d      	ands	r5, r1
   36f70:	4699      	mov	r9, r3
   36f72:	4c04      	ldr	r4, [pc, #16]	; (36f84 <__aeabi_dmul+0x4fc>)
   36f74:	e5ef      	b.n	36b56 <__aeabi_dmul+0xce>
   36f76:	46c0      	nop			; (mov r8, r8)
   36f78:	000003ff 	.word	0x000003ff
   36f7c:	feffffff 	.word	0xfeffffff
   36f80:	000007fe 	.word	0x000007fe
   36f84:	000007ff 	.word	0x000007ff

00036f88 <__aeabi_dsub>:
   36f88:	b5f0      	push	{r4, r5, r6, r7, lr}
   36f8a:	4646      	mov	r6, r8
   36f8c:	46d6      	mov	lr, sl
   36f8e:	464f      	mov	r7, r9
   36f90:	030c      	lsls	r4, r1, #12
   36f92:	b5c0      	push	{r6, r7, lr}
   36f94:	0fcd      	lsrs	r5, r1, #31
   36f96:	004e      	lsls	r6, r1, #1
   36f98:	0a61      	lsrs	r1, r4, #9
   36f9a:	0f44      	lsrs	r4, r0, #29
   36f9c:	430c      	orrs	r4, r1
   36f9e:	00c1      	lsls	r1, r0, #3
   36fa0:	0058      	lsls	r0, r3, #1
   36fa2:	0d40      	lsrs	r0, r0, #21
   36fa4:	4684      	mov	ip, r0
   36fa6:	468a      	mov	sl, r1
   36fa8:	000f      	movs	r7, r1
   36faa:	0319      	lsls	r1, r3, #12
   36fac:	0f50      	lsrs	r0, r2, #29
   36fae:	0a49      	lsrs	r1, r1, #9
   36fb0:	4301      	orrs	r1, r0
   36fb2:	48c6      	ldr	r0, [pc, #792]	; (372cc <__aeabi_dsub+0x344>)
   36fb4:	0d76      	lsrs	r6, r6, #21
   36fb6:	46a8      	mov	r8, r5
   36fb8:	0fdb      	lsrs	r3, r3, #31
   36fba:	00d2      	lsls	r2, r2, #3
   36fbc:	4584      	cmp	ip, r0
   36fbe:	d100      	bne.n	36fc2 <__aeabi_dsub+0x3a>
   36fc0:	e0d8      	b.n	37174 <__aeabi_dsub+0x1ec>
   36fc2:	2001      	movs	r0, #1
   36fc4:	4043      	eors	r3, r0
   36fc6:	42ab      	cmp	r3, r5
   36fc8:	d100      	bne.n	36fcc <__aeabi_dsub+0x44>
   36fca:	e0a6      	b.n	3711a <__aeabi_dsub+0x192>
   36fcc:	4660      	mov	r0, ip
   36fce:	1a35      	subs	r5, r6, r0
   36fd0:	2d00      	cmp	r5, #0
   36fd2:	dc00      	bgt.n	36fd6 <__aeabi_dsub+0x4e>
   36fd4:	e105      	b.n	371e2 <__aeabi_dsub+0x25a>
   36fd6:	2800      	cmp	r0, #0
   36fd8:	d110      	bne.n	36ffc <__aeabi_dsub+0x74>
   36fda:	000b      	movs	r3, r1
   36fdc:	4313      	orrs	r3, r2
   36fde:	d100      	bne.n	36fe2 <__aeabi_dsub+0x5a>
   36fe0:	e0d7      	b.n	37192 <__aeabi_dsub+0x20a>
   36fe2:	1e6b      	subs	r3, r5, #1
   36fe4:	2b00      	cmp	r3, #0
   36fe6:	d000      	beq.n	36fea <__aeabi_dsub+0x62>
   36fe8:	e14b      	b.n	37282 <__aeabi_dsub+0x2fa>
   36fea:	4653      	mov	r3, sl
   36fec:	1a9f      	subs	r7, r3, r2
   36fee:	45ba      	cmp	sl, r7
   36ff0:	4180      	sbcs	r0, r0
   36ff2:	1a64      	subs	r4, r4, r1
   36ff4:	4240      	negs	r0, r0
   36ff6:	1a24      	subs	r4, r4, r0
   36ff8:	2601      	movs	r6, #1
   36ffa:	e01e      	b.n	3703a <__aeabi_dsub+0xb2>
   36ffc:	4bb3      	ldr	r3, [pc, #716]	; (372cc <__aeabi_dsub+0x344>)
   36ffe:	429e      	cmp	r6, r3
   37000:	d048      	beq.n	37094 <__aeabi_dsub+0x10c>
   37002:	2380      	movs	r3, #128	; 0x80
   37004:	041b      	lsls	r3, r3, #16
   37006:	4319      	orrs	r1, r3
   37008:	2d38      	cmp	r5, #56	; 0x38
   3700a:	dd00      	ble.n	3700e <__aeabi_dsub+0x86>
   3700c:	e119      	b.n	37242 <__aeabi_dsub+0x2ba>
   3700e:	2d1f      	cmp	r5, #31
   37010:	dd00      	ble.n	37014 <__aeabi_dsub+0x8c>
   37012:	e14c      	b.n	372ae <__aeabi_dsub+0x326>
   37014:	2320      	movs	r3, #32
   37016:	000f      	movs	r7, r1
   37018:	1b5b      	subs	r3, r3, r5
   3701a:	0010      	movs	r0, r2
   3701c:	409a      	lsls	r2, r3
   3701e:	409f      	lsls	r7, r3
   37020:	40e8      	lsrs	r0, r5
   37022:	1e53      	subs	r3, r2, #1
   37024:	419a      	sbcs	r2, r3
   37026:	40e9      	lsrs	r1, r5
   37028:	4307      	orrs	r7, r0
   3702a:	4317      	orrs	r7, r2
   3702c:	4653      	mov	r3, sl
   3702e:	1bdf      	subs	r7, r3, r7
   37030:	1a61      	subs	r1, r4, r1
   37032:	45ba      	cmp	sl, r7
   37034:	41a4      	sbcs	r4, r4
   37036:	4264      	negs	r4, r4
   37038:	1b0c      	subs	r4, r1, r4
   3703a:	0223      	lsls	r3, r4, #8
   3703c:	d400      	bmi.n	37040 <__aeabi_dsub+0xb8>
   3703e:	e0c5      	b.n	371cc <__aeabi_dsub+0x244>
   37040:	0264      	lsls	r4, r4, #9
   37042:	0a65      	lsrs	r5, r4, #9
   37044:	2d00      	cmp	r5, #0
   37046:	d100      	bne.n	3704a <__aeabi_dsub+0xc2>
   37048:	e0f6      	b.n	37238 <__aeabi_dsub+0x2b0>
   3704a:	0028      	movs	r0, r5
   3704c:	f000 fb1e 	bl	3768c <__clzsi2>
   37050:	0003      	movs	r3, r0
   37052:	3b08      	subs	r3, #8
   37054:	2b1f      	cmp	r3, #31
   37056:	dd00      	ble.n	3705a <__aeabi_dsub+0xd2>
   37058:	e0e9      	b.n	3722e <__aeabi_dsub+0x2a6>
   3705a:	2220      	movs	r2, #32
   3705c:	003c      	movs	r4, r7
   3705e:	1ad2      	subs	r2, r2, r3
   37060:	409d      	lsls	r5, r3
   37062:	40d4      	lsrs	r4, r2
   37064:	409f      	lsls	r7, r3
   37066:	4325      	orrs	r5, r4
   37068:	429e      	cmp	r6, r3
   3706a:	dd00      	ble.n	3706e <__aeabi_dsub+0xe6>
   3706c:	e0db      	b.n	37226 <__aeabi_dsub+0x29e>
   3706e:	1b9e      	subs	r6, r3, r6
   37070:	1c73      	adds	r3, r6, #1
   37072:	2b1f      	cmp	r3, #31
   37074:	dd00      	ble.n	37078 <__aeabi_dsub+0xf0>
   37076:	e10a      	b.n	3728e <__aeabi_dsub+0x306>
   37078:	2220      	movs	r2, #32
   3707a:	0038      	movs	r0, r7
   3707c:	1ad2      	subs	r2, r2, r3
   3707e:	0029      	movs	r1, r5
   37080:	4097      	lsls	r7, r2
   37082:	002c      	movs	r4, r5
   37084:	4091      	lsls	r1, r2
   37086:	40d8      	lsrs	r0, r3
   37088:	1e7a      	subs	r2, r7, #1
   3708a:	4197      	sbcs	r7, r2
   3708c:	40dc      	lsrs	r4, r3
   3708e:	2600      	movs	r6, #0
   37090:	4301      	orrs	r1, r0
   37092:	430f      	orrs	r7, r1
   37094:	077b      	lsls	r3, r7, #29
   37096:	d009      	beq.n	370ac <__aeabi_dsub+0x124>
   37098:	230f      	movs	r3, #15
   3709a:	403b      	ands	r3, r7
   3709c:	2b04      	cmp	r3, #4
   3709e:	d005      	beq.n	370ac <__aeabi_dsub+0x124>
   370a0:	1d3b      	adds	r3, r7, #4
   370a2:	42bb      	cmp	r3, r7
   370a4:	41bf      	sbcs	r7, r7
   370a6:	427f      	negs	r7, r7
   370a8:	19e4      	adds	r4, r4, r7
   370aa:	001f      	movs	r7, r3
   370ac:	0223      	lsls	r3, r4, #8
   370ae:	d525      	bpl.n	370fc <__aeabi_dsub+0x174>
   370b0:	4b86      	ldr	r3, [pc, #536]	; (372cc <__aeabi_dsub+0x344>)
   370b2:	3601      	adds	r6, #1
   370b4:	429e      	cmp	r6, r3
   370b6:	d100      	bne.n	370ba <__aeabi_dsub+0x132>
   370b8:	e0af      	b.n	3721a <__aeabi_dsub+0x292>
   370ba:	4b85      	ldr	r3, [pc, #532]	; (372d0 <__aeabi_dsub+0x348>)
   370bc:	2501      	movs	r5, #1
   370be:	401c      	ands	r4, r3
   370c0:	4643      	mov	r3, r8
   370c2:	0762      	lsls	r2, r4, #29
   370c4:	08ff      	lsrs	r7, r7, #3
   370c6:	0264      	lsls	r4, r4, #9
   370c8:	0576      	lsls	r6, r6, #21
   370ca:	4317      	orrs	r7, r2
   370cc:	0b24      	lsrs	r4, r4, #12
   370ce:	0d76      	lsrs	r6, r6, #21
   370d0:	401d      	ands	r5, r3
   370d2:	2100      	movs	r1, #0
   370d4:	0324      	lsls	r4, r4, #12
   370d6:	0b23      	lsrs	r3, r4, #12
   370d8:	0d0c      	lsrs	r4, r1, #20
   370da:	4a7e      	ldr	r2, [pc, #504]	; (372d4 <__aeabi_dsub+0x34c>)
   370dc:	0524      	lsls	r4, r4, #20
   370de:	431c      	orrs	r4, r3
   370e0:	4014      	ands	r4, r2
   370e2:	0533      	lsls	r3, r6, #20
   370e4:	4323      	orrs	r3, r4
   370e6:	005b      	lsls	r3, r3, #1
   370e8:	07ed      	lsls	r5, r5, #31
   370ea:	085b      	lsrs	r3, r3, #1
   370ec:	432b      	orrs	r3, r5
   370ee:	0038      	movs	r0, r7
   370f0:	0019      	movs	r1, r3
   370f2:	bc1c      	pop	{r2, r3, r4}
   370f4:	4690      	mov	r8, r2
   370f6:	4699      	mov	r9, r3
   370f8:	46a2      	mov	sl, r4
   370fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   370fc:	2501      	movs	r5, #1
   370fe:	4643      	mov	r3, r8
   37100:	0762      	lsls	r2, r4, #29
   37102:	08ff      	lsrs	r7, r7, #3
   37104:	4317      	orrs	r7, r2
   37106:	08e4      	lsrs	r4, r4, #3
   37108:	401d      	ands	r5, r3
   3710a:	4b70      	ldr	r3, [pc, #448]	; (372cc <__aeabi_dsub+0x344>)
   3710c:	429e      	cmp	r6, r3
   3710e:	d036      	beq.n	3717e <__aeabi_dsub+0x1f6>
   37110:	0324      	lsls	r4, r4, #12
   37112:	0576      	lsls	r6, r6, #21
   37114:	0b24      	lsrs	r4, r4, #12
   37116:	0d76      	lsrs	r6, r6, #21
   37118:	e7db      	b.n	370d2 <__aeabi_dsub+0x14a>
   3711a:	4663      	mov	r3, ip
   3711c:	1af3      	subs	r3, r6, r3
   3711e:	2b00      	cmp	r3, #0
   37120:	dc00      	bgt.n	37124 <__aeabi_dsub+0x19c>
   37122:	e094      	b.n	3724e <__aeabi_dsub+0x2c6>
   37124:	4660      	mov	r0, ip
   37126:	2800      	cmp	r0, #0
   37128:	d035      	beq.n	37196 <__aeabi_dsub+0x20e>
   3712a:	4868      	ldr	r0, [pc, #416]	; (372cc <__aeabi_dsub+0x344>)
   3712c:	4286      	cmp	r6, r0
   3712e:	d0b1      	beq.n	37094 <__aeabi_dsub+0x10c>
   37130:	2780      	movs	r7, #128	; 0x80
   37132:	043f      	lsls	r7, r7, #16
   37134:	4339      	orrs	r1, r7
   37136:	2b38      	cmp	r3, #56	; 0x38
   37138:	dc00      	bgt.n	3713c <__aeabi_dsub+0x1b4>
   3713a:	e0fd      	b.n	37338 <__aeabi_dsub+0x3b0>
   3713c:	430a      	orrs	r2, r1
   3713e:	0017      	movs	r7, r2
   37140:	2100      	movs	r1, #0
   37142:	1e7a      	subs	r2, r7, #1
   37144:	4197      	sbcs	r7, r2
   37146:	4457      	add	r7, sl
   37148:	4557      	cmp	r7, sl
   3714a:	4180      	sbcs	r0, r0
   3714c:	1909      	adds	r1, r1, r4
   3714e:	4244      	negs	r4, r0
   37150:	190c      	adds	r4, r1, r4
   37152:	0223      	lsls	r3, r4, #8
   37154:	d53a      	bpl.n	371cc <__aeabi_dsub+0x244>
   37156:	4b5d      	ldr	r3, [pc, #372]	; (372cc <__aeabi_dsub+0x344>)
   37158:	3601      	adds	r6, #1
   3715a:	429e      	cmp	r6, r3
   3715c:	d100      	bne.n	37160 <__aeabi_dsub+0x1d8>
   3715e:	e14b      	b.n	373f8 <__aeabi_dsub+0x470>
   37160:	2201      	movs	r2, #1
   37162:	4b5b      	ldr	r3, [pc, #364]	; (372d0 <__aeabi_dsub+0x348>)
   37164:	401c      	ands	r4, r3
   37166:	087b      	lsrs	r3, r7, #1
   37168:	4017      	ands	r7, r2
   3716a:	431f      	orrs	r7, r3
   3716c:	07e2      	lsls	r2, r4, #31
   3716e:	4317      	orrs	r7, r2
   37170:	0864      	lsrs	r4, r4, #1
   37172:	e78f      	b.n	37094 <__aeabi_dsub+0x10c>
   37174:	0008      	movs	r0, r1
   37176:	4310      	orrs	r0, r2
   37178:	d000      	beq.n	3717c <__aeabi_dsub+0x1f4>
   3717a:	e724      	b.n	36fc6 <__aeabi_dsub+0x3e>
   3717c:	e721      	b.n	36fc2 <__aeabi_dsub+0x3a>
   3717e:	0023      	movs	r3, r4
   37180:	433b      	orrs	r3, r7
   37182:	d100      	bne.n	37186 <__aeabi_dsub+0x1fe>
   37184:	e1b9      	b.n	374fa <__aeabi_dsub+0x572>
   37186:	2280      	movs	r2, #128	; 0x80
   37188:	0312      	lsls	r2, r2, #12
   3718a:	4314      	orrs	r4, r2
   3718c:	0324      	lsls	r4, r4, #12
   3718e:	0b24      	lsrs	r4, r4, #12
   37190:	e79f      	b.n	370d2 <__aeabi_dsub+0x14a>
   37192:	002e      	movs	r6, r5
   37194:	e77e      	b.n	37094 <__aeabi_dsub+0x10c>
   37196:	0008      	movs	r0, r1
   37198:	4310      	orrs	r0, r2
   3719a:	d100      	bne.n	3719e <__aeabi_dsub+0x216>
   3719c:	e0ca      	b.n	37334 <__aeabi_dsub+0x3ac>
   3719e:	1e58      	subs	r0, r3, #1
   371a0:	4684      	mov	ip, r0
   371a2:	2800      	cmp	r0, #0
   371a4:	d000      	beq.n	371a8 <__aeabi_dsub+0x220>
   371a6:	e0e7      	b.n	37378 <__aeabi_dsub+0x3f0>
   371a8:	4452      	add	r2, sl
   371aa:	4552      	cmp	r2, sl
   371ac:	4180      	sbcs	r0, r0
   371ae:	1864      	adds	r4, r4, r1
   371b0:	4240      	negs	r0, r0
   371b2:	1824      	adds	r4, r4, r0
   371b4:	0017      	movs	r7, r2
   371b6:	2601      	movs	r6, #1
   371b8:	0223      	lsls	r3, r4, #8
   371ba:	d507      	bpl.n	371cc <__aeabi_dsub+0x244>
   371bc:	2602      	movs	r6, #2
   371be:	e7cf      	b.n	37160 <__aeabi_dsub+0x1d8>
   371c0:	4664      	mov	r4, ip
   371c2:	432c      	orrs	r4, r5
   371c4:	d100      	bne.n	371c8 <__aeabi_dsub+0x240>
   371c6:	e1b3      	b.n	37530 <__aeabi_dsub+0x5a8>
   371c8:	002c      	movs	r4, r5
   371ca:	4667      	mov	r7, ip
   371cc:	077b      	lsls	r3, r7, #29
   371ce:	d000      	beq.n	371d2 <__aeabi_dsub+0x24a>
   371d0:	e762      	b.n	37098 <__aeabi_dsub+0x110>
   371d2:	0763      	lsls	r3, r4, #29
   371d4:	08ff      	lsrs	r7, r7, #3
   371d6:	431f      	orrs	r7, r3
   371d8:	2501      	movs	r5, #1
   371da:	4643      	mov	r3, r8
   371dc:	08e4      	lsrs	r4, r4, #3
   371de:	401d      	ands	r5, r3
   371e0:	e793      	b.n	3710a <__aeabi_dsub+0x182>
   371e2:	2d00      	cmp	r5, #0
   371e4:	d178      	bne.n	372d8 <__aeabi_dsub+0x350>
   371e6:	1c75      	adds	r5, r6, #1
   371e8:	056d      	lsls	r5, r5, #21
   371ea:	0d6d      	lsrs	r5, r5, #21
   371ec:	2d01      	cmp	r5, #1
   371ee:	dc00      	bgt.n	371f2 <__aeabi_dsub+0x26a>
   371f0:	e0f2      	b.n	373d8 <__aeabi_dsub+0x450>
   371f2:	4650      	mov	r0, sl
   371f4:	1a80      	subs	r0, r0, r2
   371f6:	4582      	cmp	sl, r0
   371f8:	41bf      	sbcs	r7, r7
   371fa:	1a65      	subs	r5, r4, r1
   371fc:	427f      	negs	r7, r7
   371fe:	1bed      	subs	r5, r5, r7
   37200:	4684      	mov	ip, r0
   37202:	0228      	lsls	r0, r5, #8
   37204:	d400      	bmi.n	37208 <__aeabi_dsub+0x280>
   37206:	e08c      	b.n	37322 <__aeabi_dsub+0x39a>
   37208:	4650      	mov	r0, sl
   3720a:	1a17      	subs	r7, r2, r0
   3720c:	42ba      	cmp	r2, r7
   3720e:	4192      	sbcs	r2, r2
   37210:	1b0c      	subs	r4, r1, r4
   37212:	4255      	negs	r5, r2
   37214:	1b65      	subs	r5, r4, r5
   37216:	4698      	mov	r8, r3
   37218:	e714      	b.n	37044 <__aeabi_dsub+0xbc>
   3721a:	2501      	movs	r5, #1
   3721c:	4643      	mov	r3, r8
   3721e:	2400      	movs	r4, #0
   37220:	401d      	ands	r5, r3
   37222:	2700      	movs	r7, #0
   37224:	e755      	b.n	370d2 <__aeabi_dsub+0x14a>
   37226:	4c2a      	ldr	r4, [pc, #168]	; (372d0 <__aeabi_dsub+0x348>)
   37228:	1af6      	subs	r6, r6, r3
   3722a:	402c      	ands	r4, r5
   3722c:	e732      	b.n	37094 <__aeabi_dsub+0x10c>
   3722e:	003d      	movs	r5, r7
   37230:	3828      	subs	r0, #40	; 0x28
   37232:	4085      	lsls	r5, r0
   37234:	2700      	movs	r7, #0
   37236:	e717      	b.n	37068 <__aeabi_dsub+0xe0>
   37238:	0038      	movs	r0, r7
   3723a:	f000 fa27 	bl	3768c <__clzsi2>
   3723e:	3020      	adds	r0, #32
   37240:	e706      	b.n	37050 <__aeabi_dsub+0xc8>
   37242:	430a      	orrs	r2, r1
   37244:	0017      	movs	r7, r2
   37246:	2100      	movs	r1, #0
   37248:	1e7a      	subs	r2, r7, #1
   3724a:	4197      	sbcs	r7, r2
   3724c:	e6ee      	b.n	3702c <__aeabi_dsub+0xa4>
   3724e:	2b00      	cmp	r3, #0
   37250:	d000      	beq.n	37254 <__aeabi_dsub+0x2cc>
   37252:	e0e5      	b.n	37420 <__aeabi_dsub+0x498>
   37254:	1c73      	adds	r3, r6, #1
   37256:	469c      	mov	ip, r3
   37258:	055b      	lsls	r3, r3, #21
   3725a:	0d5b      	lsrs	r3, r3, #21
   3725c:	2b01      	cmp	r3, #1
   3725e:	dc00      	bgt.n	37262 <__aeabi_dsub+0x2da>
   37260:	e09f      	b.n	373a2 <__aeabi_dsub+0x41a>
   37262:	4b1a      	ldr	r3, [pc, #104]	; (372cc <__aeabi_dsub+0x344>)
   37264:	459c      	cmp	ip, r3
   37266:	d100      	bne.n	3726a <__aeabi_dsub+0x2e2>
   37268:	e0c5      	b.n	373f6 <__aeabi_dsub+0x46e>
   3726a:	4452      	add	r2, sl
   3726c:	4552      	cmp	r2, sl
   3726e:	4180      	sbcs	r0, r0
   37270:	1864      	adds	r4, r4, r1
   37272:	4240      	negs	r0, r0
   37274:	1824      	adds	r4, r4, r0
   37276:	07e7      	lsls	r7, r4, #31
   37278:	0852      	lsrs	r2, r2, #1
   3727a:	4317      	orrs	r7, r2
   3727c:	0864      	lsrs	r4, r4, #1
   3727e:	4666      	mov	r6, ip
   37280:	e708      	b.n	37094 <__aeabi_dsub+0x10c>
   37282:	4812      	ldr	r0, [pc, #72]	; (372cc <__aeabi_dsub+0x344>)
   37284:	4285      	cmp	r5, r0
   37286:	d100      	bne.n	3728a <__aeabi_dsub+0x302>
   37288:	e085      	b.n	37396 <__aeabi_dsub+0x40e>
   3728a:	001d      	movs	r5, r3
   3728c:	e6bc      	b.n	37008 <__aeabi_dsub+0x80>
   3728e:	0029      	movs	r1, r5
   37290:	3e1f      	subs	r6, #31
   37292:	40f1      	lsrs	r1, r6
   37294:	2b20      	cmp	r3, #32
   37296:	d100      	bne.n	3729a <__aeabi_dsub+0x312>
   37298:	e07f      	b.n	3739a <__aeabi_dsub+0x412>
   3729a:	2240      	movs	r2, #64	; 0x40
   3729c:	1ad3      	subs	r3, r2, r3
   3729e:	409d      	lsls	r5, r3
   372a0:	432f      	orrs	r7, r5
   372a2:	1e7d      	subs	r5, r7, #1
   372a4:	41af      	sbcs	r7, r5
   372a6:	2400      	movs	r4, #0
   372a8:	430f      	orrs	r7, r1
   372aa:	2600      	movs	r6, #0
   372ac:	e78e      	b.n	371cc <__aeabi_dsub+0x244>
   372ae:	002b      	movs	r3, r5
   372b0:	000f      	movs	r7, r1
   372b2:	3b20      	subs	r3, #32
   372b4:	40df      	lsrs	r7, r3
   372b6:	2d20      	cmp	r5, #32
   372b8:	d071      	beq.n	3739e <__aeabi_dsub+0x416>
   372ba:	2340      	movs	r3, #64	; 0x40
   372bc:	1b5d      	subs	r5, r3, r5
   372be:	40a9      	lsls	r1, r5
   372c0:	430a      	orrs	r2, r1
   372c2:	1e51      	subs	r1, r2, #1
   372c4:	418a      	sbcs	r2, r1
   372c6:	2100      	movs	r1, #0
   372c8:	4317      	orrs	r7, r2
   372ca:	e6af      	b.n	3702c <__aeabi_dsub+0xa4>
   372cc:	000007ff 	.word	0x000007ff
   372d0:	ff7fffff 	.word	0xff7fffff
   372d4:	800fffff 	.word	0x800fffff
   372d8:	2e00      	cmp	r6, #0
   372da:	d03e      	beq.n	3735a <__aeabi_dsub+0x3d2>
   372dc:	4eb3      	ldr	r6, [pc, #716]	; (375ac <__aeabi_dsub+0x624>)
   372de:	45b4      	cmp	ip, r6
   372e0:	d045      	beq.n	3736e <__aeabi_dsub+0x3e6>
   372e2:	2680      	movs	r6, #128	; 0x80
   372e4:	0436      	lsls	r6, r6, #16
   372e6:	426d      	negs	r5, r5
   372e8:	4334      	orrs	r4, r6
   372ea:	2d38      	cmp	r5, #56	; 0x38
   372ec:	dd00      	ble.n	372f0 <__aeabi_dsub+0x368>
   372ee:	e0a8      	b.n	37442 <__aeabi_dsub+0x4ba>
   372f0:	2d1f      	cmp	r5, #31
   372f2:	dd00      	ble.n	372f6 <__aeabi_dsub+0x36e>
   372f4:	e11f      	b.n	37536 <__aeabi_dsub+0x5ae>
   372f6:	2620      	movs	r6, #32
   372f8:	0027      	movs	r7, r4
   372fa:	4650      	mov	r0, sl
   372fc:	1b76      	subs	r6, r6, r5
   372fe:	40b7      	lsls	r7, r6
   37300:	40e8      	lsrs	r0, r5
   37302:	4307      	orrs	r7, r0
   37304:	4650      	mov	r0, sl
   37306:	40b0      	lsls	r0, r6
   37308:	1e46      	subs	r6, r0, #1
   3730a:	41b0      	sbcs	r0, r6
   3730c:	40ec      	lsrs	r4, r5
   3730e:	4338      	orrs	r0, r7
   37310:	1a17      	subs	r7, r2, r0
   37312:	42ba      	cmp	r2, r7
   37314:	4192      	sbcs	r2, r2
   37316:	1b0c      	subs	r4, r1, r4
   37318:	4252      	negs	r2, r2
   3731a:	1aa4      	subs	r4, r4, r2
   3731c:	4666      	mov	r6, ip
   3731e:	4698      	mov	r8, r3
   37320:	e68b      	b.n	3703a <__aeabi_dsub+0xb2>
   37322:	4664      	mov	r4, ip
   37324:	4667      	mov	r7, ip
   37326:	432c      	orrs	r4, r5
   37328:	d000      	beq.n	3732c <__aeabi_dsub+0x3a4>
   3732a:	e68b      	b.n	37044 <__aeabi_dsub+0xbc>
   3732c:	2500      	movs	r5, #0
   3732e:	2600      	movs	r6, #0
   37330:	2700      	movs	r7, #0
   37332:	e6ea      	b.n	3710a <__aeabi_dsub+0x182>
   37334:	001e      	movs	r6, r3
   37336:	e6ad      	b.n	37094 <__aeabi_dsub+0x10c>
   37338:	2b1f      	cmp	r3, #31
   3733a:	dc60      	bgt.n	373fe <__aeabi_dsub+0x476>
   3733c:	2720      	movs	r7, #32
   3733e:	1af8      	subs	r0, r7, r3
   37340:	000f      	movs	r7, r1
   37342:	4684      	mov	ip, r0
   37344:	4087      	lsls	r7, r0
   37346:	0010      	movs	r0, r2
   37348:	40d8      	lsrs	r0, r3
   3734a:	4307      	orrs	r7, r0
   3734c:	4660      	mov	r0, ip
   3734e:	4082      	lsls	r2, r0
   37350:	1e50      	subs	r0, r2, #1
   37352:	4182      	sbcs	r2, r0
   37354:	40d9      	lsrs	r1, r3
   37356:	4317      	orrs	r7, r2
   37358:	e6f5      	b.n	37146 <__aeabi_dsub+0x1be>
   3735a:	0026      	movs	r6, r4
   3735c:	4650      	mov	r0, sl
   3735e:	4306      	orrs	r6, r0
   37360:	d005      	beq.n	3736e <__aeabi_dsub+0x3e6>
   37362:	43ed      	mvns	r5, r5
   37364:	2d00      	cmp	r5, #0
   37366:	d0d3      	beq.n	37310 <__aeabi_dsub+0x388>
   37368:	4e90      	ldr	r6, [pc, #576]	; (375ac <__aeabi_dsub+0x624>)
   3736a:	45b4      	cmp	ip, r6
   3736c:	d1bd      	bne.n	372ea <__aeabi_dsub+0x362>
   3736e:	000c      	movs	r4, r1
   37370:	0017      	movs	r7, r2
   37372:	4666      	mov	r6, ip
   37374:	4698      	mov	r8, r3
   37376:	e68d      	b.n	37094 <__aeabi_dsub+0x10c>
   37378:	488c      	ldr	r0, [pc, #560]	; (375ac <__aeabi_dsub+0x624>)
   3737a:	4283      	cmp	r3, r0
   3737c:	d00b      	beq.n	37396 <__aeabi_dsub+0x40e>
   3737e:	4663      	mov	r3, ip
   37380:	e6d9      	b.n	37136 <__aeabi_dsub+0x1ae>
   37382:	2d00      	cmp	r5, #0
   37384:	d000      	beq.n	37388 <__aeabi_dsub+0x400>
   37386:	e096      	b.n	374b6 <__aeabi_dsub+0x52e>
   37388:	0008      	movs	r0, r1
   3738a:	4310      	orrs	r0, r2
   3738c:	d100      	bne.n	37390 <__aeabi_dsub+0x408>
   3738e:	e0e2      	b.n	37556 <__aeabi_dsub+0x5ce>
   37390:	000c      	movs	r4, r1
   37392:	0017      	movs	r7, r2
   37394:	4698      	mov	r8, r3
   37396:	4e85      	ldr	r6, [pc, #532]	; (375ac <__aeabi_dsub+0x624>)
   37398:	e67c      	b.n	37094 <__aeabi_dsub+0x10c>
   3739a:	2500      	movs	r5, #0
   3739c:	e780      	b.n	372a0 <__aeabi_dsub+0x318>
   3739e:	2100      	movs	r1, #0
   373a0:	e78e      	b.n	372c0 <__aeabi_dsub+0x338>
   373a2:	0023      	movs	r3, r4
   373a4:	4650      	mov	r0, sl
   373a6:	4303      	orrs	r3, r0
   373a8:	2e00      	cmp	r6, #0
   373aa:	d000      	beq.n	373ae <__aeabi_dsub+0x426>
   373ac:	e0a8      	b.n	37500 <__aeabi_dsub+0x578>
   373ae:	2b00      	cmp	r3, #0
   373b0:	d100      	bne.n	373b4 <__aeabi_dsub+0x42c>
   373b2:	e0de      	b.n	37572 <__aeabi_dsub+0x5ea>
   373b4:	000b      	movs	r3, r1
   373b6:	4313      	orrs	r3, r2
   373b8:	d100      	bne.n	373bc <__aeabi_dsub+0x434>
   373ba:	e66b      	b.n	37094 <__aeabi_dsub+0x10c>
   373bc:	4452      	add	r2, sl
   373be:	4552      	cmp	r2, sl
   373c0:	4180      	sbcs	r0, r0
   373c2:	1864      	adds	r4, r4, r1
   373c4:	4240      	negs	r0, r0
   373c6:	1824      	adds	r4, r4, r0
   373c8:	0017      	movs	r7, r2
   373ca:	0223      	lsls	r3, r4, #8
   373cc:	d400      	bmi.n	373d0 <__aeabi_dsub+0x448>
   373ce:	e6fd      	b.n	371cc <__aeabi_dsub+0x244>
   373d0:	4b77      	ldr	r3, [pc, #476]	; (375b0 <__aeabi_dsub+0x628>)
   373d2:	4666      	mov	r6, ip
   373d4:	401c      	ands	r4, r3
   373d6:	e65d      	b.n	37094 <__aeabi_dsub+0x10c>
   373d8:	0025      	movs	r5, r4
   373da:	4650      	mov	r0, sl
   373dc:	4305      	orrs	r5, r0
   373de:	2e00      	cmp	r6, #0
   373e0:	d1cf      	bne.n	37382 <__aeabi_dsub+0x3fa>
   373e2:	2d00      	cmp	r5, #0
   373e4:	d14f      	bne.n	37486 <__aeabi_dsub+0x4fe>
   373e6:	000c      	movs	r4, r1
   373e8:	4314      	orrs	r4, r2
   373ea:	d100      	bne.n	373ee <__aeabi_dsub+0x466>
   373ec:	e0a0      	b.n	37530 <__aeabi_dsub+0x5a8>
   373ee:	000c      	movs	r4, r1
   373f0:	0017      	movs	r7, r2
   373f2:	4698      	mov	r8, r3
   373f4:	e64e      	b.n	37094 <__aeabi_dsub+0x10c>
   373f6:	4666      	mov	r6, ip
   373f8:	2400      	movs	r4, #0
   373fa:	2700      	movs	r7, #0
   373fc:	e685      	b.n	3710a <__aeabi_dsub+0x182>
   373fe:	001f      	movs	r7, r3
   37400:	0008      	movs	r0, r1
   37402:	3f20      	subs	r7, #32
   37404:	40f8      	lsrs	r0, r7
   37406:	0007      	movs	r7, r0
   37408:	2b20      	cmp	r3, #32
   3740a:	d100      	bne.n	3740e <__aeabi_dsub+0x486>
   3740c:	e08e      	b.n	3752c <__aeabi_dsub+0x5a4>
   3740e:	2040      	movs	r0, #64	; 0x40
   37410:	1ac3      	subs	r3, r0, r3
   37412:	4099      	lsls	r1, r3
   37414:	430a      	orrs	r2, r1
   37416:	1e51      	subs	r1, r2, #1
   37418:	418a      	sbcs	r2, r1
   3741a:	2100      	movs	r1, #0
   3741c:	4317      	orrs	r7, r2
   3741e:	e692      	b.n	37146 <__aeabi_dsub+0x1be>
   37420:	2e00      	cmp	r6, #0
   37422:	d114      	bne.n	3744e <__aeabi_dsub+0x4c6>
   37424:	0026      	movs	r6, r4
   37426:	4650      	mov	r0, sl
   37428:	4306      	orrs	r6, r0
   3742a:	d062      	beq.n	374f2 <__aeabi_dsub+0x56a>
   3742c:	43db      	mvns	r3, r3
   3742e:	2b00      	cmp	r3, #0
   37430:	d15c      	bne.n	374ec <__aeabi_dsub+0x564>
   37432:	1887      	adds	r7, r0, r2
   37434:	4297      	cmp	r7, r2
   37436:	4192      	sbcs	r2, r2
   37438:	1864      	adds	r4, r4, r1
   3743a:	4252      	negs	r2, r2
   3743c:	18a4      	adds	r4, r4, r2
   3743e:	4666      	mov	r6, ip
   37440:	e687      	b.n	37152 <__aeabi_dsub+0x1ca>
   37442:	4650      	mov	r0, sl
   37444:	4320      	orrs	r0, r4
   37446:	1e44      	subs	r4, r0, #1
   37448:	41a0      	sbcs	r0, r4
   3744a:	2400      	movs	r4, #0
   3744c:	e760      	b.n	37310 <__aeabi_dsub+0x388>
   3744e:	4e57      	ldr	r6, [pc, #348]	; (375ac <__aeabi_dsub+0x624>)
   37450:	45b4      	cmp	ip, r6
   37452:	d04e      	beq.n	374f2 <__aeabi_dsub+0x56a>
   37454:	2680      	movs	r6, #128	; 0x80
   37456:	0436      	lsls	r6, r6, #16
   37458:	425b      	negs	r3, r3
   3745a:	4334      	orrs	r4, r6
   3745c:	2b38      	cmp	r3, #56	; 0x38
   3745e:	dd00      	ble.n	37462 <__aeabi_dsub+0x4da>
   37460:	e07f      	b.n	37562 <__aeabi_dsub+0x5da>
   37462:	2b1f      	cmp	r3, #31
   37464:	dd00      	ble.n	37468 <__aeabi_dsub+0x4e0>
   37466:	e08b      	b.n	37580 <__aeabi_dsub+0x5f8>
   37468:	2620      	movs	r6, #32
   3746a:	0027      	movs	r7, r4
   3746c:	4650      	mov	r0, sl
   3746e:	1af6      	subs	r6, r6, r3
   37470:	40b7      	lsls	r7, r6
   37472:	40d8      	lsrs	r0, r3
   37474:	4307      	orrs	r7, r0
   37476:	4650      	mov	r0, sl
   37478:	40b0      	lsls	r0, r6
   3747a:	1e46      	subs	r6, r0, #1
   3747c:	41b0      	sbcs	r0, r6
   3747e:	4307      	orrs	r7, r0
   37480:	40dc      	lsrs	r4, r3
   37482:	18bf      	adds	r7, r7, r2
   37484:	e7d6      	b.n	37434 <__aeabi_dsub+0x4ac>
   37486:	000d      	movs	r5, r1
   37488:	4315      	orrs	r5, r2
   3748a:	d100      	bne.n	3748e <__aeabi_dsub+0x506>
   3748c:	e602      	b.n	37094 <__aeabi_dsub+0x10c>
   3748e:	4650      	mov	r0, sl
   37490:	1a80      	subs	r0, r0, r2
   37492:	4582      	cmp	sl, r0
   37494:	41bf      	sbcs	r7, r7
   37496:	1a65      	subs	r5, r4, r1
   37498:	427f      	negs	r7, r7
   3749a:	1bed      	subs	r5, r5, r7
   3749c:	4684      	mov	ip, r0
   3749e:	0228      	lsls	r0, r5, #8
   374a0:	d400      	bmi.n	374a4 <__aeabi_dsub+0x51c>
   374a2:	e68d      	b.n	371c0 <__aeabi_dsub+0x238>
   374a4:	4650      	mov	r0, sl
   374a6:	1a17      	subs	r7, r2, r0
   374a8:	42ba      	cmp	r2, r7
   374aa:	4192      	sbcs	r2, r2
   374ac:	1b0c      	subs	r4, r1, r4
   374ae:	4252      	negs	r2, r2
   374b0:	1aa4      	subs	r4, r4, r2
   374b2:	4698      	mov	r8, r3
   374b4:	e5ee      	b.n	37094 <__aeabi_dsub+0x10c>
   374b6:	000d      	movs	r5, r1
   374b8:	4315      	orrs	r5, r2
   374ba:	d100      	bne.n	374be <__aeabi_dsub+0x536>
   374bc:	e76b      	b.n	37396 <__aeabi_dsub+0x40e>
   374be:	4650      	mov	r0, sl
   374c0:	0767      	lsls	r7, r4, #29
   374c2:	08c0      	lsrs	r0, r0, #3
   374c4:	4307      	orrs	r7, r0
   374c6:	2080      	movs	r0, #128	; 0x80
   374c8:	08e4      	lsrs	r4, r4, #3
   374ca:	0300      	lsls	r0, r0, #12
   374cc:	4204      	tst	r4, r0
   374ce:	d007      	beq.n	374e0 <__aeabi_dsub+0x558>
   374d0:	08cd      	lsrs	r5, r1, #3
   374d2:	4205      	tst	r5, r0
   374d4:	d104      	bne.n	374e0 <__aeabi_dsub+0x558>
   374d6:	002c      	movs	r4, r5
   374d8:	4698      	mov	r8, r3
   374da:	08d7      	lsrs	r7, r2, #3
   374dc:	0749      	lsls	r1, r1, #29
   374de:	430f      	orrs	r7, r1
   374e0:	0f7b      	lsrs	r3, r7, #29
   374e2:	00e4      	lsls	r4, r4, #3
   374e4:	431c      	orrs	r4, r3
   374e6:	00ff      	lsls	r7, r7, #3
   374e8:	4e30      	ldr	r6, [pc, #192]	; (375ac <__aeabi_dsub+0x624>)
   374ea:	e5d3      	b.n	37094 <__aeabi_dsub+0x10c>
   374ec:	4e2f      	ldr	r6, [pc, #188]	; (375ac <__aeabi_dsub+0x624>)
   374ee:	45b4      	cmp	ip, r6
   374f0:	d1b4      	bne.n	3745c <__aeabi_dsub+0x4d4>
   374f2:	000c      	movs	r4, r1
   374f4:	0017      	movs	r7, r2
   374f6:	4666      	mov	r6, ip
   374f8:	e5cc      	b.n	37094 <__aeabi_dsub+0x10c>
   374fa:	2700      	movs	r7, #0
   374fc:	2400      	movs	r4, #0
   374fe:	e5e8      	b.n	370d2 <__aeabi_dsub+0x14a>
   37500:	2b00      	cmp	r3, #0
   37502:	d039      	beq.n	37578 <__aeabi_dsub+0x5f0>
   37504:	000b      	movs	r3, r1
   37506:	4313      	orrs	r3, r2
   37508:	d100      	bne.n	3750c <__aeabi_dsub+0x584>
   3750a:	e744      	b.n	37396 <__aeabi_dsub+0x40e>
   3750c:	08c0      	lsrs	r0, r0, #3
   3750e:	0767      	lsls	r7, r4, #29
   37510:	4307      	orrs	r7, r0
   37512:	2080      	movs	r0, #128	; 0x80
   37514:	08e4      	lsrs	r4, r4, #3
   37516:	0300      	lsls	r0, r0, #12
   37518:	4204      	tst	r4, r0
   3751a:	d0e1      	beq.n	374e0 <__aeabi_dsub+0x558>
   3751c:	08cb      	lsrs	r3, r1, #3
   3751e:	4203      	tst	r3, r0
   37520:	d1de      	bne.n	374e0 <__aeabi_dsub+0x558>
   37522:	08d7      	lsrs	r7, r2, #3
   37524:	0749      	lsls	r1, r1, #29
   37526:	430f      	orrs	r7, r1
   37528:	001c      	movs	r4, r3
   3752a:	e7d9      	b.n	374e0 <__aeabi_dsub+0x558>
   3752c:	2100      	movs	r1, #0
   3752e:	e771      	b.n	37414 <__aeabi_dsub+0x48c>
   37530:	2500      	movs	r5, #0
   37532:	2700      	movs	r7, #0
   37534:	e5e9      	b.n	3710a <__aeabi_dsub+0x182>
   37536:	002e      	movs	r6, r5
   37538:	0027      	movs	r7, r4
   3753a:	3e20      	subs	r6, #32
   3753c:	40f7      	lsrs	r7, r6
   3753e:	2d20      	cmp	r5, #32
   37540:	d02f      	beq.n	375a2 <__aeabi_dsub+0x61a>
   37542:	2640      	movs	r6, #64	; 0x40
   37544:	1b75      	subs	r5, r6, r5
   37546:	40ac      	lsls	r4, r5
   37548:	4650      	mov	r0, sl
   3754a:	4320      	orrs	r0, r4
   3754c:	1e44      	subs	r4, r0, #1
   3754e:	41a0      	sbcs	r0, r4
   37550:	2400      	movs	r4, #0
   37552:	4338      	orrs	r0, r7
   37554:	e6dc      	b.n	37310 <__aeabi_dsub+0x388>
   37556:	2480      	movs	r4, #128	; 0x80
   37558:	2500      	movs	r5, #0
   3755a:	0324      	lsls	r4, r4, #12
   3755c:	4e13      	ldr	r6, [pc, #76]	; (375ac <__aeabi_dsub+0x624>)
   3755e:	2700      	movs	r7, #0
   37560:	e5d3      	b.n	3710a <__aeabi_dsub+0x182>
   37562:	4650      	mov	r0, sl
   37564:	4320      	orrs	r0, r4
   37566:	0007      	movs	r7, r0
   37568:	1e78      	subs	r0, r7, #1
   3756a:	4187      	sbcs	r7, r0
   3756c:	2400      	movs	r4, #0
   3756e:	18bf      	adds	r7, r7, r2
   37570:	e760      	b.n	37434 <__aeabi_dsub+0x4ac>
   37572:	000c      	movs	r4, r1
   37574:	0017      	movs	r7, r2
   37576:	e58d      	b.n	37094 <__aeabi_dsub+0x10c>
   37578:	000c      	movs	r4, r1
   3757a:	0017      	movs	r7, r2
   3757c:	4e0b      	ldr	r6, [pc, #44]	; (375ac <__aeabi_dsub+0x624>)
   3757e:	e589      	b.n	37094 <__aeabi_dsub+0x10c>
   37580:	001e      	movs	r6, r3
   37582:	0027      	movs	r7, r4
   37584:	3e20      	subs	r6, #32
   37586:	40f7      	lsrs	r7, r6
   37588:	2b20      	cmp	r3, #32
   3758a:	d00c      	beq.n	375a6 <__aeabi_dsub+0x61e>
   3758c:	2640      	movs	r6, #64	; 0x40
   3758e:	1af3      	subs	r3, r6, r3
   37590:	409c      	lsls	r4, r3
   37592:	4650      	mov	r0, sl
   37594:	4320      	orrs	r0, r4
   37596:	1e44      	subs	r4, r0, #1
   37598:	41a0      	sbcs	r0, r4
   3759a:	4307      	orrs	r7, r0
   3759c:	2400      	movs	r4, #0
   3759e:	18bf      	adds	r7, r7, r2
   375a0:	e748      	b.n	37434 <__aeabi_dsub+0x4ac>
   375a2:	2400      	movs	r4, #0
   375a4:	e7d0      	b.n	37548 <__aeabi_dsub+0x5c0>
   375a6:	2400      	movs	r4, #0
   375a8:	e7f3      	b.n	37592 <__aeabi_dsub+0x60a>
   375aa:	46c0      	nop			; (mov r8, r8)
   375ac:	000007ff 	.word	0x000007ff
   375b0:	ff7fffff 	.word	0xff7fffff

000375b4 <__aeabi_d2iz>:
   375b4:	b530      	push	{r4, r5, lr}
   375b6:	4d13      	ldr	r5, [pc, #76]	; (37604 <__aeabi_d2iz+0x50>)
   375b8:	030a      	lsls	r2, r1, #12
   375ba:	004b      	lsls	r3, r1, #1
   375bc:	0b12      	lsrs	r2, r2, #12
   375be:	0d5b      	lsrs	r3, r3, #21
   375c0:	0fc9      	lsrs	r1, r1, #31
   375c2:	2400      	movs	r4, #0
   375c4:	42ab      	cmp	r3, r5
   375c6:	dd10      	ble.n	375ea <__aeabi_d2iz+0x36>
   375c8:	4c0f      	ldr	r4, [pc, #60]	; (37608 <__aeabi_d2iz+0x54>)
   375ca:	42a3      	cmp	r3, r4
   375cc:	dc0f      	bgt.n	375ee <__aeabi_d2iz+0x3a>
   375ce:	2480      	movs	r4, #128	; 0x80
   375d0:	4d0e      	ldr	r5, [pc, #56]	; (3760c <__aeabi_d2iz+0x58>)
   375d2:	0364      	lsls	r4, r4, #13
   375d4:	4322      	orrs	r2, r4
   375d6:	1aed      	subs	r5, r5, r3
   375d8:	2d1f      	cmp	r5, #31
   375da:	dd0b      	ble.n	375f4 <__aeabi_d2iz+0x40>
   375dc:	480c      	ldr	r0, [pc, #48]	; (37610 <__aeabi_d2iz+0x5c>)
   375de:	1ac3      	subs	r3, r0, r3
   375e0:	40da      	lsrs	r2, r3
   375e2:	4254      	negs	r4, r2
   375e4:	2900      	cmp	r1, #0
   375e6:	d100      	bne.n	375ea <__aeabi_d2iz+0x36>
   375e8:	0014      	movs	r4, r2
   375ea:	0020      	movs	r0, r4
   375ec:	bd30      	pop	{r4, r5, pc}
   375ee:	4b09      	ldr	r3, [pc, #36]	; (37614 <__aeabi_d2iz+0x60>)
   375f0:	18cc      	adds	r4, r1, r3
   375f2:	e7fa      	b.n	375ea <__aeabi_d2iz+0x36>
   375f4:	4c08      	ldr	r4, [pc, #32]	; (37618 <__aeabi_d2iz+0x64>)
   375f6:	40e8      	lsrs	r0, r5
   375f8:	46a4      	mov	ip, r4
   375fa:	4463      	add	r3, ip
   375fc:	409a      	lsls	r2, r3
   375fe:	4302      	orrs	r2, r0
   37600:	e7ef      	b.n	375e2 <__aeabi_d2iz+0x2e>
   37602:	46c0      	nop			; (mov r8, r8)
   37604:	000003fe 	.word	0x000003fe
   37608:	0000041d 	.word	0x0000041d
   3760c:	00000433 	.word	0x00000433
   37610:	00000413 	.word	0x00000413
   37614:	7fffffff 	.word	0x7fffffff
   37618:	fffffbed 	.word	0xfffffbed

0003761c <__aeabi_ui2d>:
   3761c:	b510      	push	{r4, lr}
   3761e:	1e04      	subs	r4, r0, #0
   37620:	d028      	beq.n	37674 <__aeabi_ui2d+0x58>
   37622:	f000 f833 	bl	3768c <__clzsi2>
   37626:	4b15      	ldr	r3, [pc, #84]	; (3767c <__aeabi_ui2d+0x60>)
   37628:	4a15      	ldr	r2, [pc, #84]	; (37680 <__aeabi_ui2d+0x64>)
   3762a:	1a1b      	subs	r3, r3, r0
   3762c:	1ad2      	subs	r2, r2, r3
   3762e:	2a1f      	cmp	r2, #31
   37630:	dd15      	ble.n	3765e <__aeabi_ui2d+0x42>
   37632:	4a14      	ldr	r2, [pc, #80]	; (37684 <__aeabi_ui2d+0x68>)
   37634:	1ad2      	subs	r2, r2, r3
   37636:	4094      	lsls	r4, r2
   37638:	2200      	movs	r2, #0
   3763a:	0324      	lsls	r4, r4, #12
   3763c:	055b      	lsls	r3, r3, #21
   3763e:	0b24      	lsrs	r4, r4, #12
   37640:	0d5b      	lsrs	r3, r3, #21
   37642:	2100      	movs	r1, #0
   37644:	0010      	movs	r0, r2
   37646:	0324      	lsls	r4, r4, #12
   37648:	0d0a      	lsrs	r2, r1, #20
   3764a:	0b24      	lsrs	r4, r4, #12
   3764c:	0512      	lsls	r2, r2, #20
   3764e:	4322      	orrs	r2, r4
   37650:	4c0d      	ldr	r4, [pc, #52]	; (37688 <__aeabi_ui2d+0x6c>)
   37652:	051b      	lsls	r3, r3, #20
   37654:	4022      	ands	r2, r4
   37656:	4313      	orrs	r3, r2
   37658:	005b      	lsls	r3, r3, #1
   3765a:	0859      	lsrs	r1, r3, #1
   3765c:	bd10      	pop	{r4, pc}
   3765e:	0021      	movs	r1, r4
   37660:	4091      	lsls	r1, r2
   37662:	000a      	movs	r2, r1
   37664:	210b      	movs	r1, #11
   37666:	1a08      	subs	r0, r1, r0
   37668:	40c4      	lsrs	r4, r0
   3766a:	055b      	lsls	r3, r3, #21
   3766c:	0324      	lsls	r4, r4, #12
   3766e:	0b24      	lsrs	r4, r4, #12
   37670:	0d5b      	lsrs	r3, r3, #21
   37672:	e7e6      	b.n	37642 <__aeabi_ui2d+0x26>
   37674:	2300      	movs	r3, #0
   37676:	2400      	movs	r4, #0
   37678:	2200      	movs	r2, #0
   3767a:	e7e2      	b.n	37642 <__aeabi_ui2d+0x26>
   3767c:	0000041e 	.word	0x0000041e
   37680:	00000433 	.word	0x00000433
   37684:	00000413 	.word	0x00000413
   37688:	800fffff 	.word	0x800fffff

0003768c <__clzsi2>:
   3768c:	211c      	movs	r1, #28
   3768e:	2301      	movs	r3, #1
   37690:	041b      	lsls	r3, r3, #16
   37692:	4298      	cmp	r0, r3
   37694:	d301      	bcc.n	3769a <__clzsi2+0xe>
   37696:	0c00      	lsrs	r0, r0, #16
   37698:	3910      	subs	r1, #16
   3769a:	0a1b      	lsrs	r3, r3, #8
   3769c:	4298      	cmp	r0, r3
   3769e:	d301      	bcc.n	376a4 <__clzsi2+0x18>
   376a0:	0a00      	lsrs	r0, r0, #8
   376a2:	3908      	subs	r1, #8
   376a4:	091b      	lsrs	r3, r3, #4
   376a6:	4298      	cmp	r0, r3
   376a8:	d301      	bcc.n	376ae <__clzsi2+0x22>
   376aa:	0900      	lsrs	r0, r0, #4
   376ac:	3904      	subs	r1, #4
   376ae:	a202      	add	r2, pc, #8	; (adr r2, 376b8 <__clzsi2+0x2c>)
   376b0:	5c10      	ldrb	r0, [r2, r0]
   376b2:	1840      	adds	r0, r0, r1
   376b4:	4770      	bx	lr
   376b6:	46c0      	nop			; (mov r8, r8)
   376b8:	02020304 	.word	0x02020304
   376bc:	01010101 	.word	0x01010101
	...

000376c8 <__divdi3>:
   376c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   376ca:	464e      	mov	r6, r9
   376cc:	4657      	mov	r7, sl
   376ce:	46de      	mov	lr, fp
   376d0:	4645      	mov	r5, r8
   376d2:	b5e0      	push	{r5, r6, r7, lr}
   376d4:	0006      	movs	r6, r0
   376d6:	2000      	movs	r0, #0
   376d8:	000f      	movs	r7, r1
   376da:	b083      	sub	sp, #12
   376dc:	0019      	movs	r1, r3
   376de:	4681      	mov	r9, r0
   376e0:	2f00      	cmp	r7, #0
   376e2:	da00      	bge.n	376e6 <__divdi3+0x1e>
   376e4:	e08c      	b.n	37800 <__divdi3+0x138>
   376e6:	2900      	cmp	r1, #0
   376e8:	da00      	bge.n	376ec <__divdi3+0x24>
   376ea:	e080      	b.n	377ee <__divdi3+0x126>
   376ec:	0034      	movs	r4, r6
   376ee:	003d      	movs	r5, r7
   376f0:	4692      	mov	sl, r2
   376f2:	4698      	mov	r8, r3
   376f4:	42bb      	cmp	r3, r7
   376f6:	d869      	bhi.n	377cc <__divdi3+0x104>
   376f8:	d066      	beq.n	377c8 <__divdi3+0x100>
   376fa:	4641      	mov	r1, r8
   376fc:	4650      	mov	r0, sl
   376fe:	f000 f8bf 	bl	37880 <__clzdi2>
   37702:	4683      	mov	fp, r0
   37704:	0039      	movs	r1, r7
   37706:	0030      	movs	r0, r6
   37708:	f000 f8ba 	bl	37880 <__clzdi2>
   3770c:	465b      	mov	r3, fp
   3770e:	1a1b      	subs	r3, r3, r0
   37710:	469c      	mov	ip, r3
   37712:	3b20      	subs	r3, #32
   37714:	469b      	mov	fp, r3
   37716:	d500      	bpl.n	3771a <__divdi3+0x52>
   37718:	e087      	b.n	3782a <__divdi3+0x162>
   3771a:	4651      	mov	r1, sl
   3771c:	4658      	mov	r0, fp
   3771e:	4081      	lsls	r1, r0
   37720:	000b      	movs	r3, r1
   37722:	4651      	mov	r1, sl
   37724:	4660      	mov	r0, ip
   37726:	4081      	lsls	r1, r0
   37728:	000a      	movs	r2, r1
   3772a:	42bb      	cmp	r3, r7
   3772c:	d900      	bls.n	37730 <__divdi3+0x68>
   3772e:	e072      	b.n	37816 <__divdi3+0x14e>
   37730:	d06e      	beq.n	37810 <__divdi3+0x148>
   37732:	0034      	movs	r4, r6
   37734:	003d      	movs	r5, r7
   37736:	4659      	mov	r1, fp
   37738:	1aa4      	subs	r4, r4, r2
   3773a:	419d      	sbcs	r5, r3
   3773c:	2900      	cmp	r1, #0
   3773e:	da00      	bge.n	37742 <__divdi3+0x7a>
   37740:	e08a      	b.n	37858 <__divdi3+0x190>
   37742:	2100      	movs	r1, #0
   37744:	2000      	movs	r0, #0
   37746:	2601      	movs	r6, #1
   37748:	9000      	str	r0, [sp, #0]
   3774a:	9101      	str	r1, [sp, #4]
   3774c:	4659      	mov	r1, fp
   3774e:	408e      	lsls	r6, r1
   37750:	9601      	str	r6, [sp, #4]
   37752:	4661      	mov	r1, ip
   37754:	2601      	movs	r6, #1
   37756:	408e      	lsls	r6, r1
   37758:	4661      	mov	r1, ip
   3775a:	9600      	str	r6, [sp, #0]
   3775c:	2900      	cmp	r1, #0
   3775e:	d061      	beq.n	37824 <__divdi3+0x15c>
   37760:	07d9      	lsls	r1, r3, #31
   37762:	0856      	lsrs	r6, r2, #1
   37764:	430e      	orrs	r6, r1
   37766:	085f      	lsrs	r7, r3, #1
   37768:	4661      	mov	r1, ip
   3776a:	2201      	movs	r2, #1
   3776c:	2300      	movs	r3, #0
   3776e:	e00c      	b.n	3778a <__divdi3+0xc2>
   37770:	42af      	cmp	r7, r5
   37772:	d101      	bne.n	37778 <__divdi3+0xb0>
   37774:	42a6      	cmp	r6, r4
   37776:	d80a      	bhi.n	3778e <__divdi3+0xc6>
   37778:	1ba4      	subs	r4, r4, r6
   3777a:	41bd      	sbcs	r5, r7
   3777c:	1924      	adds	r4, r4, r4
   3777e:	416d      	adcs	r5, r5
   37780:	3901      	subs	r1, #1
   37782:	18a4      	adds	r4, r4, r2
   37784:	415d      	adcs	r5, r3
   37786:	2900      	cmp	r1, #0
   37788:	d006      	beq.n	37798 <__divdi3+0xd0>
   3778a:	42af      	cmp	r7, r5
   3778c:	d9f0      	bls.n	37770 <__divdi3+0xa8>
   3778e:	3901      	subs	r1, #1
   37790:	1924      	adds	r4, r4, r4
   37792:	416d      	adcs	r5, r5
   37794:	2900      	cmp	r1, #0
   37796:	d1f8      	bne.n	3778a <__divdi3+0xc2>
   37798:	465b      	mov	r3, fp
   3779a:	9800      	ldr	r0, [sp, #0]
   3779c:	9901      	ldr	r1, [sp, #4]
   3779e:	1900      	adds	r0, r0, r4
   377a0:	4169      	adcs	r1, r5
   377a2:	2b00      	cmp	r3, #0
   377a4:	db4d      	blt.n	37842 <__divdi3+0x17a>
   377a6:	002e      	movs	r6, r5
   377a8:	40de      	lsrs	r6, r3
   377aa:	4663      	mov	r3, ip
   377ac:	002c      	movs	r4, r5
   377ae:	40dc      	lsrs	r4, r3
   377b0:	465b      	mov	r3, fp
   377b2:	2b00      	cmp	r3, #0
   377b4:	db5b      	blt.n	3786e <__divdi3+0x1a6>
   377b6:	0034      	movs	r4, r6
   377b8:	409c      	lsls	r4, r3
   377ba:	0023      	movs	r3, r4
   377bc:	4664      	mov	r4, ip
   377be:	40a6      	lsls	r6, r4
   377c0:	0032      	movs	r2, r6
   377c2:	1a80      	subs	r0, r0, r2
   377c4:	4199      	sbcs	r1, r3
   377c6:	e003      	b.n	377d0 <__divdi3+0x108>
   377c8:	42b2      	cmp	r2, r6
   377ca:	d996      	bls.n	376fa <__divdi3+0x32>
   377cc:	2000      	movs	r0, #0
   377ce:	2100      	movs	r1, #0
   377d0:	464b      	mov	r3, r9
   377d2:	2b00      	cmp	r3, #0
   377d4:	d004      	beq.n	377e0 <__divdi3+0x118>
   377d6:	0003      	movs	r3, r0
   377d8:	000c      	movs	r4, r1
   377da:	2100      	movs	r1, #0
   377dc:	4258      	negs	r0, r3
   377de:	41a1      	sbcs	r1, r4
   377e0:	b003      	add	sp, #12
   377e2:	bc3c      	pop	{r2, r3, r4, r5}
   377e4:	4690      	mov	r8, r2
   377e6:	4699      	mov	r9, r3
   377e8:	46a2      	mov	sl, r4
   377ea:	46ab      	mov	fp, r5
   377ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   377ee:	4649      	mov	r1, r9
   377f0:	43c9      	mvns	r1, r1
   377f2:	0010      	movs	r0, r2
   377f4:	4689      	mov	r9, r1
   377f6:	0019      	movs	r1, r3
   377f8:	2300      	movs	r3, #0
   377fa:	4242      	negs	r2, r0
   377fc:	418b      	sbcs	r3, r1
   377fe:	e775      	b.n	376ec <__divdi3+0x24>
   37800:	0034      	movs	r4, r6
   37802:	003d      	movs	r5, r7
   37804:	3801      	subs	r0, #1
   37806:	2700      	movs	r7, #0
   37808:	4266      	negs	r6, r4
   3780a:	41af      	sbcs	r7, r5
   3780c:	4681      	mov	r9, r0
   3780e:	e76a      	b.n	376e6 <__divdi3+0x1e>
   37810:	42b1      	cmp	r1, r6
   37812:	d800      	bhi.n	37816 <__divdi3+0x14e>
   37814:	e78d      	b.n	37732 <__divdi3+0x6a>
   37816:	2100      	movs	r1, #0
   37818:	2000      	movs	r0, #0
   3781a:	9000      	str	r0, [sp, #0]
   3781c:	9101      	str	r1, [sp, #4]
   3781e:	4661      	mov	r1, ip
   37820:	2900      	cmp	r1, #0
   37822:	d19d      	bne.n	37760 <__divdi3+0x98>
   37824:	9800      	ldr	r0, [sp, #0]
   37826:	9901      	ldr	r1, [sp, #4]
   37828:	e7d2      	b.n	377d0 <__divdi3+0x108>
   3782a:	4662      	mov	r2, ip
   3782c:	4640      	mov	r0, r8
   3782e:	2320      	movs	r3, #32
   37830:	4651      	mov	r1, sl
   37832:	4090      	lsls	r0, r2
   37834:	1a9b      	subs	r3, r3, r2
   37836:	40d9      	lsrs	r1, r3
   37838:	0003      	movs	r3, r0
   3783a:	9100      	str	r1, [sp, #0]
   3783c:	9900      	ldr	r1, [sp, #0]
   3783e:	430b      	orrs	r3, r1
   37840:	e76f      	b.n	37722 <__divdi3+0x5a>
   37842:	4662      	mov	r2, ip
   37844:	2320      	movs	r3, #32
   37846:	1a9b      	subs	r3, r3, r2
   37848:	002a      	movs	r2, r5
   3784a:	409a      	lsls	r2, r3
   3784c:	0026      	movs	r6, r4
   3784e:	0013      	movs	r3, r2
   37850:	4662      	mov	r2, ip
   37852:	40d6      	lsrs	r6, r2
   37854:	431e      	orrs	r6, r3
   37856:	e7a8      	b.n	377aa <__divdi3+0xe2>
   37858:	4661      	mov	r1, ip
   3785a:	2620      	movs	r6, #32
   3785c:	2701      	movs	r7, #1
   3785e:	1a76      	subs	r6, r6, r1
   37860:	2000      	movs	r0, #0
   37862:	2100      	movs	r1, #0
   37864:	40f7      	lsrs	r7, r6
   37866:	9000      	str	r0, [sp, #0]
   37868:	9101      	str	r1, [sp, #4]
   3786a:	9701      	str	r7, [sp, #4]
   3786c:	e771      	b.n	37752 <__divdi3+0x8a>
   3786e:	4662      	mov	r2, ip
   37870:	2320      	movs	r3, #32
   37872:	0035      	movs	r5, r6
   37874:	4094      	lsls	r4, r2
   37876:	1a9b      	subs	r3, r3, r2
   37878:	40dd      	lsrs	r5, r3
   3787a:	0023      	movs	r3, r4
   3787c:	432b      	orrs	r3, r5
   3787e:	e79d      	b.n	377bc <__divdi3+0xf4>

00037880 <__clzdi2>:
   37880:	b510      	push	{r4, lr}
   37882:	2900      	cmp	r1, #0
   37884:	d103      	bne.n	3788e <__clzdi2+0xe>
   37886:	f7ff ff01 	bl	3768c <__clzsi2>
   3788a:	3020      	adds	r0, #32
   3788c:	e002      	b.n	37894 <__clzdi2+0x14>
   3788e:	1c08      	adds	r0, r1, #0
   37890:	f7ff fefc 	bl	3768c <__clzsi2>
   37894:	bd10      	pop	{r4, pc}
   37896:	46c0      	nop			; (mov r8, r8)

00037898 <atoi>:
   37898:	b510      	push	{r4, lr}
   3789a:	220a      	movs	r2, #10
   3789c:	2100      	movs	r1, #0
   3789e:	f000 fb0d 	bl	37ebc <strtol>
   378a2:	bd10      	pop	{r4, pc}

000378a4 <__libc_init_array>:
   378a4:	b570      	push	{r4, r5, r6, lr}
   378a6:	2600      	movs	r6, #0
   378a8:	4d0c      	ldr	r5, [pc, #48]	; (378dc <__libc_init_array+0x38>)
   378aa:	4c0d      	ldr	r4, [pc, #52]	; (378e0 <__libc_init_array+0x3c>)
   378ac:	1b64      	subs	r4, r4, r5
   378ae:	10a4      	asrs	r4, r4, #2
   378b0:	42a6      	cmp	r6, r4
   378b2:	d109      	bne.n	378c8 <__libc_init_array+0x24>
   378b4:	2600      	movs	r6, #0
   378b6:	f005 febf 	bl	3d638 <_init>
   378ba:	4d0a      	ldr	r5, [pc, #40]	; (378e4 <__libc_init_array+0x40>)
   378bc:	4c0a      	ldr	r4, [pc, #40]	; (378e8 <__libc_init_array+0x44>)
   378be:	1b64      	subs	r4, r4, r5
   378c0:	10a4      	asrs	r4, r4, #2
   378c2:	42a6      	cmp	r6, r4
   378c4:	d105      	bne.n	378d2 <__libc_init_array+0x2e>
   378c6:	bd70      	pop	{r4, r5, r6, pc}
   378c8:	00b3      	lsls	r3, r6, #2
   378ca:	58eb      	ldr	r3, [r5, r3]
   378cc:	4798      	blx	r3
   378ce:	3601      	adds	r6, #1
   378d0:	e7ee      	b.n	378b0 <__libc_init_array+0xc>
   378d2:	00b3      	lsls	r3, r6, #2
   378d4:	58eb      	ldr	r3, [r5, r3]
   378d6:	4798      	blx	r3
   378d8:	3601      	adds	r6, #1
   378da:	e7f2      	b.n	378c2 <__libc_init_array+0x1e>
   378dc:	0003d644 	.word	0x0003d644
   378e0:	0003d644 	.word	0x0003d644
   378e4:	0003d644 	.word	0x0003d644
   378e8:	0003d648 	.word	0x0003d648

000378ec <malloc>:
   378ec:	b510      	push	{r4, lr}
   378ee:	4b03      	ldr	r3, [pc, #12]	; (378fc <malloc+0x10>)
   378f0:	0001      	movs	r1, r0
   378f2:	6818      	ldr	r0, [r3, #0]
   378f4:	f000 f87c 	bl	379f0 <_malloc_r>
   378f8:	bd10      	pop	{r4, pc}
   378fa:	46c0      	nop			; (mov r8, r8)
   378fc:	20000138 	.word	0x20000138

00037900 <free>:
   37900:	b510      	push	{r4, lr}
   37902:	4b03      	ldr	r3, [pc, #12]	; (37910 <free+0x10>)
   37904:	0001      	movs	r1, r0
   37906:	6818      	ldr	r0, [r3, #0]
   37908:	f000 f828 	bl	3795c <_free_r>
   3790c:	bd10      	pop	{r4, pc}
   3790e:	46c0      	nop			; (mov r8, r8)
   37910:	20000138 	.word	0x20000138

00037914 <memcpy>:
   37914:	2300      	movs	r3, #0
   37916:	b510      	push	{r4, lr}
   37918:	429a      	cmp	r2, r3
   3791a:	d100      	bne.n	3791e <memcpy+0xa>
   3791c:	bd10      	pop	{r4, pc}
   3791e:	5ccc      	ldrb	r4, [r1, r3]
   37920:	54c4      	strb	r4, [r0, r3]
   37922:	3301      	adds	r3, #1
   37924:	e7f8      	b.n	37918 <memcpy+0x4>

00037926 <memmove>:
   37926:	b510      	push	{r4, lr}
   37928:	4288      	cmp	r0, r1
   3792a:	d902      	bls.n	37932 <memmove+0xc>
   3792c:	188b      	adds	r3, r1, r2
   3792e:	4298      	cmp	r0, r3
   37930:	d308      	bcc.n	37944 <memmove+0x1e>
   37932:	2300      	movs	r3, #0
   37934:	429a      	cmp	r2, r3
   37936:	d007      	beq.n	37948 <memmove+0x22>
   37938:	5ccc      	ldrb	r4, [r1, r3]
   3793a:	54c4      	strb	r4, [r0, r3]
   3793c:	3301      	adds	r3, #1
   3793e:	e7f9      	b.n	37934 <memmove+0xe>
   37940:	5c8b      	ldrb	r3, [r1, r2]
   37942:	5483      	strb	r3, [r0, r2]
   37944:	3a01      	subs	r2, #1
   37946:	d2fb      	bcs.n	37940 <memmove+0x1a>
   37948:	bd10      	pop	{r4, pc}

0003794a <memset>:
   3794a:	0003      	movs	r3, r0
   3794c:	1882      	adds	r2, r0, r2
   3794e:	4293      	cmp	r3, r2
   37950:	d100      	bne.n	37954 <memset+0xa>
   37952:	4770      	bx	lr
   37954:	7019      	strb	r1, [r3, #0]
   37956:	3301      	adds	r3, #1
   37958:	e7f9      	b.n	3794e <memset+0x4>
	...

0003795c <_free_r>:
   3795c:	b570      	push	{r4, r5, r6, lr}
   3795e:	0005      	movs	r5, r0
   37960:	2900      	cmp	r1, #0
   37962:	d010      	beq.n	37986 <_free_r+0x2a>
   37964:	1f0c      	subs	r4, r1, #4
   37966:	6823      	ldr	r3, [r4, #0]
   37968:	2b00      	cmp	r3, #0
   3796a:	da00      	bge.n	3796e <_free_r+0x12>
   3796c:	18e4      	adds	r4, r4, r3
   3796e:	0028      	movs	r0, r5
   37970:	f000 fdd8 	bl	38524 <__malloc_lock>
   37974:	4a1d      	ldr	r2, [pc, #116]	; (379ec <_free_r+0x90>)
   37976:	6813      	ldr	r3, [r2, #0]
   37978:	2b00      	cmp	r3, #0
   3797a:	d105      	bne.n	37988 <_free_r+0x2c>
   3797c:	6063      	str	r3, [r4, #4]
   3797e:	6014      	str	r4, [r2, #0]
   37980:	0028      	movs	r0, r5
   37982:	f000 fdd0 	bl	38526 <__malloc_unlock>
   37986:	bd70      	pop	{r4, r5, r6, pc}
   37988:	42a3      	cmp	r3, r4
   3798a:	d909      	bls.n	379a0 <_free_r+0x44>
   3798c:	6821      	ldr	r1, [r4, #0]
   3798e:	1860      	adds	r0, r4, r1
   37990:	4283      	cmp	r3, r0
   37992:	d1f3      	bne.n	3797c <_free_r+0x20>
   37994:	6818      	ldr	r0, [r3, #0]
   37996:	685b      	ldr	r3, [r3, #4]
   37998:	1841      	adds	r1, r0, r1
   3799a:	6021      	str	r1, [r4, #0]
   3799c:	e7ee      	b.n	3797c <_free_r+0x20>
   3799e:	0013      	movs	r3, r2
   379a0:	685a      	ldr	r2, [r3, #4]
   379a2:	2a00      	cmp	r2, #0
   379a4:	d001      	beq.n	379aa <_free_r+0x4e>
   379a6:	42a2      	cmp	r2, r4
   379a8:	d9f9      	bls.n	3799e <_free_r+0x42>
   379aa:	6819      	ldr	r1, [r3, #0]
   379ac:	1858      	adds	r0, r3, r1
   379ae:	42a0      	cmp	r0, r4
   379b0:	d10b      	bne.n	379ca <_free_r+0x6e>
   379b2:	6820      	ldr	r0, [r4, #0]
   379b4:	1809      	adds	r1, r1, r0
   379b6:	1858      	adds	r0, r3, r1
   379b8:	6019      	str	r1, [r3, #0]
   379ba:	4282      	cmp	r2, r0
   379bc:	d1e0      	bne.n	37980 <_free_r+0x24>
   379be:	6810      	ldr	r0, [r2, #0]
   379c0:	6852      	ldr	r2, [r2, #4]
   379c2:	1841      	adds	r1, r0, r1
   379c4:	6019      	str	r1, [r3, #0]
   379c6:	605a      	str	r2, [r3, #4]
   379c8:	e7da      	b.n	37980 <_free_r+0x24>
   379ca:	42a0      	cmp	r0, r4
   379cc:	d902      	bls.n	379d4 <_free_r+0x78>
   379ce:	230c      	movs	r3, #12
   379d0:	602b      	str	r3, [r5, #0]
   379d2:	e7d5      	b.n	37980 <_free_r+0x24>
   379d4:	6821      	ldr	r1, [r4, #0]
   379d6:	1860      	adds	r0, r4, r1
   379d8:	4282      	cmp	r2, r0
   379da:	d103      	bne.n	379e4 <_free_r+0x88>
   379dc:	6810      	ldr	r0, [r2, #0]
   379de:	6852      	ldr	r2, [r2, #4]
   379e0:	1841      	adds	r1, r0, r1
   379e2:	6021      	str	r1, [r4, #0]
   379e4:	6062      	str	r2, [r4, #4]
   379e6:	605c      	str	r4, [r3, #4]
   379e8:	e7ca      	b.n	37980 <_free_r+0x24>
   379ea:	46c0      	nop			; (mov r8, r8)
   379ec:	2000459c 	.word	0x2000459c

000379f0 <_malloc_r>:
   379f0:	2303      	movs	r3, #3
   379f2:	b570      	push	{r4, r5, r6, lr}
   379f4:	1ccd      	adds	r5, r1, #3
   379f6:	439d      	bics	r5, r3
   379f8:	3508      	adds	r5, #8
   379fa:	0006      	movs	r6, r0
   379fc:	2d0c      	cmp	r5, #12
   379fe:	d21e      	bcs.n	37a3e <_malloc_r+0x4e>
   37a00:	250c      	movs	r5, #12
   37a02:	42a9      	cmp	r1, r5
   37a04:	d81d      	bhi.n	37a42 <_malloc_r+0x52>
   37a06:	0030      	movs	r0, r6
   37a08:	f000 fd8c 	bl	38524 <__malloc_lock>
   37a0c:	4a25      	ldr	r2, [pc, #148]	; (37aa4 <_malloc_r+0xb4>)
   37a0e:	6814      	ldr	r4, [r2, #0]
   37a10:	0021      	movs	r1, r4
   37a12:	2900      	cmp	r1, #0
   37a14:	d119      	bne.n	37a4a <_malloc_r+0x5a>
   37a16:	4c24      	ldr	r4, [pc, #144]	; (37aa8 <_malloc_r+0xb8>)
   37a18:	6823      	ldr	r3, [r4, #0]
   37a1a:	2b00      	cmp	r3, #0
   37a1c:	d103      	bne.n	37a26 <_malloc_r+0x36>
   37a1e:	0030      	movs	r0, r6
   37a20:	f000 f8ae 	bl	37b80 <_sbrk_r>
   37a24:	6020      	str	r0, [r4, #0]
   37a26:	0029      	movs	r1, r5
   37a28:	0030      	movs	r0, r6
   37a2a:	f000 f8a9 	bl	37b80 <_sbrk_r>
   37a2e:	1c43      	adds	r3, r0, #1
   37a30:	d12c      	bne.n	37a8c <_malloc_r+0x9c>
   37a32:	230c      	movs	r3, #12
   37a34:	0030      	movs	r0, r6
   37a36:	6033      	str	r3, [r6, #0]
   37a38:	f000 fd75 	bl	38526 <__malloc_unlock>
   37a3c:	e003      	b.n	37a46 <_malloc_r+0x56>
   37a3e:	2d00      	cmp	r5, #0
   37a40:	dadf      	bge.n	37a02 <_malloc_r+0x12>
   37a42:	230c      	movs	r3, #12
   37a44:	6033      	str	r3, [r6, #0]
   37a46:	2000      	movs	r0, #0
   37a48:	bd70      	pop	{r4, r5, r6, pc}
   37a4a:	680b      	ldr	r3, [r1, #0]
   37a4c:	1b5b      	subs	r3, r3, r5
   37a4e:	d41a      	bmi.n	37a86 <_malloc_r+0x96>
   37a50:	2b0b      	cmp	r3, #11
   37a52:	d903      	bls.n	37a5c <_malloc_r+0x6c>
   37a54:	600b      	str	r3, [r1, #0]
   37a56:	18cc      	adds	r4, r1, r3
   37a58:	6025      	str	r5, [r4, #0]
   37a5a:	e003      	b.n	37a64 <_malloc_r+0x74>
   37a5c:	428c      	cmp	r4, r1
   37a5e:	d10e      	bne.n	37a7e <_malloc_r+0x8e>
   37a60:	6863      	ldr	r3, [r4, #4]
   37a62:	6013      	str	r3, [r2, #0]
   37a64:	0030      	movs	r0, r6
   37a66:	f000 fd5e 	bl	38526 <__malloc_unlock>
   37a6a:	0020      	movs	r0, r4
   37a6c:	2207      	movs	r2, #7
   37a6e:	300b      	adds	r0, #11
   37a70:	1d23      	adds	r3, r4, #4
   37a72:	4390      	bics	r0, r2
   37a74:	1ac3      	subs	r3, r0, r3
   37a76:	d0e7      	beq.n	37a48 <_malloc_r+0x58>
   37a78:	425a      	negs	r2, r3
   37a7a:	50e2      	str	r2, [r4, r3]
   37a7c:	e7e4      	b.n	37a48 <_malloc_r+0x58>
   37a7e:	684b      	ldr	r3, [r1, #4]
   37a80:	6063      	str	r3, [r4, #4]
   37a82:	000c      	movs	r4, r1
   37a84:	e7ee      	b.n	37a64 <_malloc_r+0x74>
   37a86:	000c      	movs	r4, r1
   37a88:	6849      	ldr	r1, [r1, #4]
   37a8a:	e7c2      	b.n	37a12 <_malloc_r+0x22>
   37a8c:	2303      	movs	r3, #3
   37a8e:	1cc4      	adds	r4, r0, #3
   37a90:	439c      	bics	r4, r3
   37a92:	42a0      	cmp	r0, r4
   37a94:	d0e0      	beq.n	37a58 <_malloc_r+0x68>
   37a96:	1a21      	subs	r1, r4, r0
   37a98:	0030      	movs	r0, r6
   37a9a:	f000 f871 	bl	37b80 <_sbrk_r>
   37a9e:	1c43      	adds	r3, r0, #1
   37aa0:	d1da      	bne.n	37a58 <_malloc_r+0x68>
   37aa2:	e7c6      	b.n	37a32 <_malloc_r+0x42>
   37aa4:	2000459c 	.word	0x2000459c
   37aa8:	200045a0 	.word	0x200045a0

00037aac <_puts_r>:
   37aac:	b570      	push	{r4, r5, r6, lr}
   37aae:	0005      	movs	r5, r0
   37ab0:	000e      	movs	r6, r1
   37ab2:	2800      	cmp	r0, #0
   37ab4:	d004      	beq.n	37ac0 <_puts_r+0x14>
   37ab6:	6983      	ldr	r3, [r0, #24]
   37ab8:	2b00      	cmp	r3, #0
   37aba:	d101      	bne.n	37ac0 <_puts_r+0x14>
   37abc:	f000 fc0e 	bl	382dc <__sinit>
   37ac0:	69ab      	ldr	r3, [r5, #24]
   37ac2:	68ac      	ldr	r4, [r5, #8]
   37ac4:	2b00      	cmp	r3, #0
   37ac6:	d102      	bne.n	37ace <_puts_r+0x22>
   37ac8:	0028      	movs	r0, r5
   37aca:	f000 fc07 	bl	382dc <__sinit>
   37ace:	4b24      	ldr	r3, [pc, #144]	; (37b60 <_puts_r+0xb4>)
   37ad0:	429c      	cmp	r4, r3
   37ad2:	d10f      	bne.n	37af4 <_puts_r+0x48>
   37ad4:	686c      	ldr	r4, [r5, #4]
   37ad6:	89a3      	ldrh	r3, [r4, #12]
   37ad8:	071b      	lsls	r3, r3, #28
   37ada:	d502      	bpl.n	37ae2 <_puts_r+0x36>
   37adc:	6923      	ldr	r3, [r4, #16]
   37ade:	2b00      	cmp	r3, #0
   37ae0:	d120      	bne.n	37b24 <_puts_r+0x78>
   37ae2:	0021      	movs	r1, r4
   37ae4:	0028      	movs	r0, r5
   37ae6:	f000 fa8b 	bl	38000 <__swsetup_r>
   37aea:	2800      	cmp	r0, #0
   37aec:	d01a      	beq.n	37b24 <_puts_r+0x78>
   37aee:	2001      	movs	r0, #1
   37af0:	4240      	negs	r0, r0
   37af2:	bd70      	pop	{r4, r5, r6, pc}
   37af4:	4b1b      	ldr	r3, [pc, #108]	; (37b64 <_puts_r+0xb8>)
   37af6:	429c      	cmp	r4, r3
   37af8:	d101      	bne.n	37afe <_puts_r+0x52>
   37afa:	68ac      	ldr	r4, [r5, #8]
   37afc:	e7eb      	b.n	37ad6 <_puts_r+0x2a>
   37afe:	4b1a      	ldr	r3, [pc, #104]	; (37b68 <_puts_r+0xbc>)
   37b00:	429c      	cmp	r4, r3
   37b02:	d1e8      	bne.n	37ad6 <_puts_r+0x2a>
   37b04:	68ec      	ldr	r4, [r5, #12]
   37b06:	e7e6      	b.n	37ad6 <_puts_r+0x2a>
   37b08:	3b01      	subs	r3, #1
   37b0a:	3601      	adds	r6, #1
   37b0c:	60a3      	str	r3, [r4, #8]
   37b0e:	2b00      	cmp	r3, #0
   37b10:	da04      	bge.n	37b1c <_puts_r+0x70>
   37b12:	69a2      	ldr	r2, [r4, #24]
   37b14:	4293      	cmp	r3, r2
   37b16:	db16      	blt.n	37b46 <_puts_r+0x9a>
   37b18:	290a      	cmp	r1, #10
   37b1a:	d014      	beq.n	37b46 <_puts_r+0x9a>
   37b1c:	6823      	ldr	r3, [r4, #0]
   37b1e:	1c5a      	adds	r2, r3, #1
   37b20:	6022      	str	r2, [r4, #0]
   37b22:	7019      	strb	r1, [r3, #0]
   37b24:	7831      	ldrb	r1, [r6, #0]
   37b26:	68a3      	ldr	r3, [r4, #8]
   37b28:	2900      	cmp	r1, #0
   37b2a:	d1ed      	bne.n	37b08 <_puts_r+0x5c>
   37b2c:	3b01      	subs	r3, #1
   37b2e:	60a3      	str	r3, [r4, #8]
   37b30:	2b00      	cmp	r3, #0
   37b32:	da0f      	bge.n	37b54 <_puts_r+0xa8>
   37b34:	0022      	movs	r2, r4
   37b36:	310a      	adds	r1, #10
   37b38:	0028      	movs	r0, r5
   37b3a:	f000 fa0b 	bl	37f54 <__swbuf_r>
   37b3e:	1c43      	adds	r3, r0, #1
   37b40:	d0d5      	beq.n	37aee <_puts_r+0x42>
   37b42:	200a      	movs	r0, #10
   37b44:	e7d5      	b.n	37af2 <_puts_r+0x46>
   37b46:	0022      	movs	r2, r4
   37b48:	0028      	movs	r0, r5
   37b4a:	f000 fa03 	bl	37f54 <__swbuf_r>
   37b4e:	1c43      	adds	r3, r0, #1
   37b50:	d1e8      	bne.n	37b24 <_puts_r+0x78>
   37b52:	e7cc      	b.n	37aee <_puts_r+0x42>
   37b54:	200a      	movs	r0, #10
   37b56:	6823      	ldr	r3, [r4, #0]
   37b58:	1c5a      	adds	r2, r3, #1
   37b5a:	6022      	str	r2, [r4, #0]
   37b5c:	7018      	strb	r0, [r3, #0]
   37b5e:	e7c8      	b.n	37af2 <_puts_r+0x46>
   37b60:	0003d4b8 	.word	0x0003d4b8
   37b64:	0003d4d8 	.word	0x0003d4d8
   37b68:	0003d498 	.word	0x0003d498

00037b6c <puts>:
   37b6c:	b510      	push	{r4, lr}
   37b6e:	4b03      	ldr	r3, [pc, #12]	; (37b7c <puts+0x10>)
   37b70:	0001      	movs	r1, r0
   37b72:	6818      	ldr	r0, [r3, #0]
   37b74:	f7ff ff9a 	bl	37aac <_puts_r>
   37b78:	bd10      	pop	{r4, pc}
   37b7a:	46c0      	nop			; (mov r8, r8)
   37b7c:	20000138 	.word	0x20000138

00037b80 <_sbrk_r>:
   37b80:	2300      	movs	r3, #0
   37b82:	b570      	push	{r4, r5, r6, lr}
   37b84:	4c06      	ldr	r4, [pc, #24]	; (37ba0 <_sbrk_r+0x20>)
   37b86:	0005      	movs	r5, r0
   37b88:	0008      	movs	r0, r1
   37b8a:	6023      	str	r3, [r4, #0]
   37b8c:	f7f5 fcfe 	bl	2d58c <_sbrk>
   37b90:	1c43      	adds	r3, r0, #1
   37b92:	d103      	bne.n	37b9c <_sbrk_r+0x1c>
   37b94:	6823      	ldr	r3, [r4, #0]
   37b96:	2b00      	cmp	r3, #0
   37b98:	d000      	beq.n	37b9c <_sbrk_r+0x1c>
   37b9a:	602b      	str	r3, [r5, #0]
   37b9c:	bd70      	pop	{r4, r5, r6, pc}
   37b9e:	46c0      	nop			; (mov r8, r8)
   37ba0:	20005b08 	.word	0x20005b08

00037ba4 <sniprintf>:
   37ba4:	b40c      	push	{r2, r3}
   37ba6:	b530      	push	{r4, r5, lr}
   37ba8:	4b16      	ldr	r3, [pc, #88]	; (37c04 <sniprintf+0x60>)
   37baa:	b09d      	sub	sp, #116	; 0x74
   37bac:	1e0c      	subs	r4, r1, #0
   37bae:	681d      	ldr	r5, [r3, #0]
   37bb0:	da08      	bge.n	37bc4 <sniprintf+0x20>
   37bb2:	238b      	movs	r3, #139	; 0x8b
   37bb4:	2001      	movs	r0, #1
   37bb6:	602b      	str	r3, [r5, #0]
   37bb8:	4240      	negs	r0, r0
   37bba:	b01d      	add	sp, #116	; 0x74
   37bbc:	bc30      	pop	{r4, r5}
   37bbe:	bc08      	pop	{r3}
   37bc0:	b002      	add	sp, #8
   37bc2:	4718      	bx	r3
   37bc4:	2382      	movs	r3, #130	; 0x82
   37bc6:	a902      	add	r1, sp, #8
   37bc8:	009b      	lsls	r3, r3, #2
   37bca:	818b      	strh	r3, [r1, #12]
   37bcc:	2300      	movs	r3, #0
   37bce:	9002      	str	r0, [sp, #8]
   37bd0:	6108      	str	r0, [r1, #16]
   37bd2:	429c      	cmp	r4, r3
   37bd4:	d000      	beq.n	37bd8 <sniprintf+0x34>
   37bd6:	1e63      	subs	r3, r4, #1
   37bd8:	608b      	str	r3, [r1, #8]
   37bda:	614b      	str	r3, [r1, #20]
   37bdc:	2301      	movs	r3, #1
   37bde:	425b      	negs	r3, r3
   37be0:	81cb      	strh	r3, [r1, #14]
   37be2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   37be4:	ab21      	add	r3, sp, #132	; 0x84
   37be6:	0028      	movs	r0, r5
   37be8:	9301      	str	r3, [sp, #4]
   37bea:	f000 fcff 	bl	385ec <_svfiprintf_r>
   37bee:	1c43      	adds	r3, r0, #1
   37bf0:	da01      	bge.n	37bf6 <sniprintf+0x52>
   37bf2:	238b      	movs	r3, #139	; 0x8b
   37bf4:	602b      	str	r3, [r5, #0]
   37bf6:	2c00      	cmp	r4, #0
   37bf8:	d0df      	beq.n	37bba <sniprintf+0x16>
   37bfa:	2300      	movs	r3, #0
   37bfc:	9a02      	ldr	r2, [sp, #8]
   37bfe:	7013      	strb	r3, [r2, #0]
   37c00:	e7db      	b.n	37bba <sniprintf+0x16>
   37c02:	46c0      	nop			; (mov r8, r8)
   37c04:	20000138 	.word	0x20000138

00037c08 <siprintf>:
   37c08:	b40e      	push	{r1, r2, r3}
   37c0a:	b510      	push	{r4, lr}
   37c0c:	b09d      	sub	sp, #116	; 0x74
   37c0e:	a902      	add	r1, sp, #8
   37c10:	9002      	str	r0, [sp, #8]
   37c12:	6108      	str	r0, [r1, #16]
   37c14:	480b      	ldr	r0, [pc, #44]	; (37c44 <siprintf+0x3c>)
   37c16:	2482      	movs	r4, #130	; 0x82
   37c18:	6088      	str	r0, [r1, #8]
   37c1a:	6148      	str	r0, [r1, #20]
   37c1c:	2001      	movs	r0, #1
   37c1e:	4240      	negs	r0, r0
   37c20:	ab1f      	add	r3, sp, #124	; 0x7c
   37c22:	81c8      	strh	r0, [r1, #14]
   37c24:	4808      	ldr	r0, [pc, #32]	; (37c48 <siprintf+0x40>)
   37c26:	cb04      	ldmia	r3!, {r2}
   37c28:	00a4      	lsls	r4, r4, #2
   37c2a:	6800      	ldr	r0, [r0, #0]
   37c2c:	9301      	str	r3, [sp, #4]
   37c2e:	818c      	strh	r4, [r1, #12]
   37c30:	f000 fcdc 	bl	385ec <_svfiprintf_r>
   37c34:	2300      	movs	r3, #0
   37c36:	9a02      	ldr	r2, [sp, #8]
   37c38:	7013      	strb	r3, [r2, #0]
   37c3a:	b01d      	add	sp, #116	; 0x74
   37c3c:	bc10      	pop	{r4}
   37c3e:	bc08      	pop	{r3}
   37c40:	b003      	add	sp, #12
   37c42:	4718      	bx	r3
   37c44:	7fffffff 	.word	0x7fffffff
   37c48:	20000138 	.word	0x20000138

00037c4c <strcasecmp>:
   37c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37c4e:	0007      	movs	r7, r0
   37c50:	000e      	movs	r6, r1
   37c52:	783c      	ldrb	r4, [r7, #0]
   37c54:	f000 fbda 	bl	3840c <__locale_ctype_ptr>
   37c58:	2203      	movs	r2, #3
   37c5a:	1900      	adds	r0, r0, r4
   37c5c:	7843      	ldrb	r3, [r0, #1]
   37c5e:	4013      	ands	r3, r2
   37c60:	2b01      	cmp	r3, #1
   37c62:	d100      	bne.n	37c66 <strcasecmp+0x1a>
   37c64:	3420      	adds	r4, #32
   37c66:	7835      	ldrb	r5, [r6, #0]
   37c68:	f000 fbd0 	bl	3840c <__locale_ctype_ptr>
   37c6c:	2203      	movs	r2, #3
   37c6e:	1940      	adds	r0, r0, r5
   37c70:	7843      	ldrb	r3, [r0, #1]
   37c72:	4013      	ands	r3, r2
   37c74:	2b01      	cmp	r3, #1
   37c76:	d100      	bne.n	37c7a <strcasecmp+0x2e>
   37c78:	3520      	adds	r5, #32
   37c7a:	1b60      	subs	r0, r4, r5
   37c7c:	d103      	bne.n	37c86 <strcasecmp+0x3a>
   37c7e:	3701      	adds	r7, #1
   37c80:	3601      	adds	r6, #1
   37c82:	2d00      	cmp	r5, #0
   37c84:	d1e5      	bne.n	37c52 <strcasecmp+0x6>
   37c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00037c88 <strcat>:
   37c88:	0002      	movs	r2, r0
   37c8a:	b510      	push	{r4, lr}
   37c8c:	7813      	ldrb	r3, [r2, #0]
   37c8e:	2b00      	cmp	r3, #0
   37c90:	d105      	bne.n	37c9e <strcat+0x16>
   37c92:	5ccc      	ldrb	r4, [r1, r3]
   37c94:	54d4      	strb	r4, [r2, r3]
   37c96:	3301      	adds	r3, #1
   37c98:	2c00      	cmp	r4, #0
   37c9a:	d1fa      	bne.n	37c92 <strcat+0xa>
   37c9c:	bd10      	pop	{r4, pc}
   37c9e:	3201      	adds	r2, #1
   37ca0:	e7f4      	b.n	37c8c <strcat+0x4>

00037ca2 <strcmp>:
   37ca2:	7802      	ldrb	r2, [r0, #0]
   37ca4:	780b      	ldrb	r3, [r1, #0]
   37ca6:	2a00      	cmp	r2, #0
   37ca8:	d003      	beq.n	37cb2 <strcmp+0x10>
   37caa:	3001      	adds	r0, #1
   37cac:	3101      	adds	r1, #1
   37cae:	429a      	cmp	r2, r3
   37cb0:	d0f7      	beq.n	37ca2 <strcmp>
   37cb2:	1ad0      	subs	r0, r2, r3
   37cb4:	4770      	bx	lr

00037cb6 <strcpy>:
   37cb6:	1c03      	adds	r3, r0, #0
   37cb8:	780a      	ldrb	r2, [r1, #0]
   37cba:	3101      	adds	r1, #1
   37cbc:	701a      	strb	r2, [r3, #0]
   37cbe:	3301      	adds	r3, #1
   37cc0:	2a00      	cmp	r2, #0
   37cc2:	d1f9      	bne.n	37cb8 <strcpy+0x2>
   37cc4:	4770      	bx	lr
	...

00037cc8 <strdup>:
   37cc8:	b510      	push	{r4, lr}
   37cca:	4b03      	ldr	r3, [pc, #12]	; (37cd8 <strdup+0x10>)
   37ccc:	0001      	movs	r1, r0
   37cce:	6818      	ldr	r0, [r3, #0]
   37cd0:	f000 f804 	bl	37cdc <_strdup_r>
   37cd4:	bd10      	pop	{r4, pc}
   37cd6:	46c0      	nop			; (mov r8, r8)
   37cd8:	20000138 	.word	0x20000138

00037cdc <_strdup_r>:
   37cdc:	b570      	push	{r4, r5, r6, lr}
   37cde:	0005      	movs	r5, r0
   37ce0:	0008      	movs	r0, r1
   37ce2:	000e      	movs	r6, r1
   37ce4:	f000 f80d 	bl	37d02 <strlen>
   37ce8:	1c44      	adds	r4, r0, #1
   37cea:	0021      	movs	r1, r4
   37cec:	0028      	movs	r0, r5
   37cee:	f7ff fe7f 	bl	379f0 <_malloc_r>
   37cf2:	1e05      	subs	r5, r0, #0
   37cf4:	d003      	beq.n	37cfe <_strdup_r+0x22>
   37cf6:	0022      	movs	r2, r4
   37cf8:	0031      	movs	r1, r6
   37cfa:	f7ff fe0b 	bl	37914 <memcpy>
   37cfe:	0028      	movs	r0, r5
   37d00:	bd70      	pop	{r4, r5, r6, pc}

00037d02 <strlen>:
   37d02:	2300      	movs	r3, #0
   37d04:	5cc2      	ldrb	r2, [r0, r3]
   37d06:	3301      	adds	r3, #1
   37d08:	2a00      	cmp	r2, #0
   37d0a:	d1fb      	bne.n	37d04 <strlen+0x2>
   37d0c:	1e58      	subs	r0, r3, #1
   37d0e:	4770      	bx	lr

00037d10 <strncmp>:
   37d10:	2300      	movs	r3, #0
   37d12:	b530      	push	{r4, r5, lr}
   37d14:	429a      	cmp	r2, r3
   37d16:	d00a      	beq.n	37d2e <strncmp+0x1e>
   37d18:	3a01      	subs	r2, #1
   37d1a:	5cc4      	ldrb	r4, [r0, r3]
   37d1c:	5ccd      	ldrb	r5, [r1, r3]
   37d1e:	42ac      	cmp	r4, r5
   37d20:	d104      	bne.n	37d2c <strncmp+0x1c>
   37d22:	429a      	cmp	r2, r3
   37d24:	d002      	beq.n	37d2c <strncmp+0x1c>
   37d26:	3301      	adds	r3, #1
   37d28:	2c00      	cmp	r4, #0
   37d2a:	d1f6      	bne.n	37d1a <strncmp+0xa>
   37d2c:	1b63      	subs	r3, r4, r5
   37d2e:	0018      	movs	r0, r3
   37d30:	bd30      	pop	{r4, r5, pc}

00037d32 <strncpy>:
   37d32:	b570      	push	{r4, r5, r6, lr}
   37d34:	0004      	movs	r4, r0
   37d36:	2a00      	cmp	r2, #0
   37d38:	d100      	bne.n	37d3c <strncpy+0xa>
   37d3a:	bd70      	pop	{r4, r5, r6, pc}
   37d3c:	780d      	ldrb	r5, [r1, #0]
   37d3e:	1e56      	subs	r6, r2, #1
   37d40:	1c63      	adds	r3, r4, #1
   37d42:	7025      	strb	r5, [r4, #0]
   37d44:	3101      	adds	r1, #1
   37d46:	2d00      	cmp	r5, #0
   37d48:	d105      	bne.n	37d56 <strncpy+0x24>
   37d4a:	18a4      	adds	r4, r4, r2
   37d4c:	429c      	cmp	r4, r3
   37d4e:	d0f4      	beq.n	37d3a <strncpy+0x8>
   37d50:	701d      	strb	r5, [r3, #0]
   37d52:	3301      	adds	r3, #1
   37d54:	e7fa      	b.n	37d4c <strncpy+0x1a>
   37d56:	001c      	movs	r4, r3
   37d58:	0032      	movs	r2, r6
   37d5a:	e7ec      	b.n	37d36 <strncpy+0x4>

00037d5c <strrchr>:
   37d5c:	b570      	push	{r4, r5, r6, lr}
   37d5e:	000d      	movs	r5, r1
   37d60:	2400      	movs	r4, #0
   37d62:	2900      	cmp	r1, #0
   37d64:	d105      	bne.n	37d72 <strrchr+0x16>
   37d66:	f000 ff19 	bl	38b9c <strchr>
   37d6a:	0004      	movs	r4, r0
   37d6c:	e006      	b.n	37d7c <strrchr+0x20>
   37d6e:	001c      	movs	r4, r3
   37d70:	1c58      	adds	r0, r3, #1
   37d72:	0029      	movs	r1, r5
   37d74:	f000 ff12 	bl	38b9c <strchr>
   37d78:	1e03      	subs	r3, r0, #0
   37d7a:	d1f8      	bne.n	37d6e <strrchr+0x12>
   37d7c:	0020      	movs	r0, r4
   37d7e:	bd70      	pop	{r4, r5, r6, pc}

00037d80 <strstr>:
   37d80:	b510      	push	{r4, lr}
   37d82:	0002      	movs	r2, r0
   37d84:	7800      	ldrb	r0, [r0, #0]
   37d86:	2800      	cmp	r0, #0
   37d88:	d104      	bne.n	37d94 <strstr+0x14>
   37d8a:	7809      	ldrb	r1, [r1, #0]
   37d8c:	2900      	cmp	r1, #0
   37d8e:	d00d      	beq.n	37dac <strstr+0x2c>
   37d90:	bd10      	pop	{r4, pc}
   37d92:	3201      	adds	r2, #1
   37d94:	7810      	ldrb	r0, [r2, #0]
   37d96:	2800      	cmp	r0, #0
   37d98:	d0fa      	beq.n	37d90 <strstr+0x10>
   37d9a:	2300      	movs	r3, #0
   37d9c:	5cc8      	ldrb	r0, [r1, r3]
   37d9e:	2800      	cmp	r0, #0
   37da0:	d004      	beq.n	37dac <strstr+0x2c>
   37da2:	5cd4      	ldrb	r4, [r2, r3]
   37da4:	4284      	cmp	r4, r0
   37da6:	d1f4      	bne.n	37d92 <strstr+0x12>
   37da8:	3301      	adds	r3, #1
   37daa:	e7f7      	b.n	37d9c <strstr+0x1c>
   37dac:	0010      	movs	r0, r2
   37dae:	e7ef      	b.n	37d90 <strstr+0x10>

00037db0 <_strtol_l.isra.0>:
   37db0:	b5f0      	push	{r4, r5, r6, r7, lr}
   37db2:	001f      	movs	r7, r3
   37db4:	000e      	movs	r6, r1
   37db6:	b087      	sub	sp, #28
   37db8:	9005      	str	r0, [sp, #20]
   37dba:	9103      	str	r1, [sp, #12]
   37dbc:	9202      	str	r2, [sp, #8]
   37dbe:	980c      	ldr	r0, [sp, #48]	; 0x30
   37dc0:	7834      	ldrb	r4, [r6, #0]
   37dc2:	f000 fb20 	bl	38406 <__locale_ctype_ptr_l>
   37dc6:	2208      	movs	r2, #8
   37dc8:	1900      	adds	r0, r0, r4
   37dca:	7843      	ldrb	r3, [r0, #1]
   37dcc:	1c75      	adds	r5, r6, #1
   37dce:	4013      	ands	r3, r2
   37dd0:	d10c      	bne.n	37dec <_strtol_l.isra.0+0x3c>
   37dd2:	2c2d      	cmp	r4, #45	; 0x2d
   37dd4:	d10c      	bne.n	37df0 <_strtol_l.isra.0+0x40>
   37dd6:	3301      	adds	r3, #1
   37dd8:	782c      	ldrb	r4, [r5, #0]
   37dda:	9301      	str	r3, [sp, #4]
   37ddc:	1cb5      	adds	r5, r6, #2
   37dde:	2f00      	cmp	r7, #0
   37de0:	d00c      	beq.n	37dfc <_strtol_l.isra.0+0x4c>
   37de2:	2f10      	cmp	r7, #16
   37de4:	d114      	bne.n	37e10 <_strtol_l.isra.0+0x60>
   37de6:	2c30      	cmp	r4, #48	; 0x30
   37de8:	d00a      	beq.n	37e00 <_strtol_l.isra.0+0x50>
   37dea:	e011      	b.n	37e10 <_strtol_l.isra.0+0x60>
   37dec:	002e      	movs	r6, r5
   37dee:	e7e6      	b.n	37dbe <_strtol_l.isra.0+0xe>
   37df0:	9301      	str	r3, [sp, #4]
   37df2:	2c2b      	cmp	r4, #43	; 0x2b
   37df4:	d1f3      	bne.n	37dde <_strtol_l.isra.0+0x2e>
   37df6:	782c      	ldrb	r4, [r5, #0]
   37df8:	1cb5      	adds	r5, r6, #2
   37dfa:	e7f0      	b.n	37dde <_strtol_l.isra.0+0x2e>
   37dfc:	2c30      	cmp	r4, #48	; 0x30
   37dfe:	d12f      	bne.n	37e60 <_strtol_l.isra.0+0xb0>
   37e00:	2220      	movs	r2, #32
   37e02:	782b      	ldrb	r3, [r5, #0]
   37e04:	4393      	bics	r3, r2
   37e06:	2b58      	cmp	r3, #88	; 0x58
   37e08:	d151      	bne.n	37eae <_strtol_l.isra.0+0xfe>
   37e0a:	2710      	movs	r7, #16
   37e0c:	786c      	ldrb	r4, [r5, #1]
   37e0e:	3502      	adds	r5, #2
   37e10:	9b01      	ldr	r3, [sp, #4]
   37e12:	4a29      	ldr	r2, [pc, #164]	; (37eb8 <_strtol_l.isra.0+0x108>)
   37e14:	0039      	movs	r1, r7
   37e16:	189e      	adds	r6, r3, r2
   37e18:	0030      	movs	r0, r6
   37e1a:	f7fd f881 	bl	34f20 <__aeabi_uidivmod>
   37e1e:	0030      	movs	r0, r6
   37e20:	9104      	str	r1, [sp, #16]
   37e22:	0039      	movs	r1, r7
   37e24:	f7fc fff6 	bl	34e14 <__udivsi3>
   37e28:	2101      	movs	r1, #1
   37e2a:	2300      	movs	r3, #0
   37e2c:	4249      	negs	r1, r1
   37e2e:	0002      	movs	r2, r0
   37e30:	468c      	mov	ip, r1
   37e32:	0018      	movs	r0, r3
   37e34:	0021      	movs	r1, r4
   37e36:	3930      	subs	r1, #48	; 0x30
   37e38:	2909      	cmp	r1, #9
   37e3a:	d813      	bhi.n	37e64 <_strtol_l.isra.0+0xb4>
   37e3c:	000c      	movs	r4, r1
   37e3e:	42a7      	cmp	r7, r4
   37e40:	dd1c      	ble.n	37e7c <_strtol_l.isra.0+0xcc>
   37e42:	1c59      	adds	r1, r3, #1
   37e44:	d009      	beq.n	37e5a <_strtol_l.isra.0+0xaa>
   37e46:	4663      	mov	r3, ip
   37e48:	4282      	cmp	r2, r0
   37e4a:	d306      	bcc.n	37e5a <_strtol_l.isra.0+0xaa>
   37e4c:	d102      	bne.n	37e54 <_strtol_l.isra.0+0xa4>
   37e4e:	9904      	ldr	r1, [sp, #16]
   37e50:	42a1      	cmp	r1, r4
   37e52:	db02      	blt.n	37e5a <_strtol_l.isra.0+0xaa>
   37e54:	2301      	movs	r3, #1
   37e56:	4378      	muls	r0, r7
   37e58:	1820      	adds	r0, r4, r0
   37e5a:	782c      	ldrb	r4, [r5, #0]
   37e5c:	3501      	adds	r5, #1
   37e5e:	e7e9      	b.n	37e34 <_strtol_l.isra.0+0x84>
   37e60:	270a      	movs	r7, #10
   37e62:	e7d5      	b.n	37e10 <_strtol_l.isra.0+0x60>
   37e64:	0021      	movs	r1, r4
   37e66:	3941      	subs	r1, #65	; 0x41
   37e68:	2919      	cmp	r1, #25
   37e6a:	d801      	bhi.n	37e70 <_strtol_l.isra.0+0xc0>
   37e6c:	3c37      	subs	r4, #55	; 0x37
   37e6e:	e7e6      	b.n	37e3e <_strtol_l.isra.0+0x8e>
   37e70:	0021      	movs	r1, r4
   37e72:	3961      	subs	r1, #97	; 0x61
   37e74:	2919      	cmp	r1, #25
   37e76:	d801      	bhi.n	37e7c <_strtol_l.isra.0+0xcc>
   37e78:	3c57      	subs	r4, #87	; 0x57
   37e7a:	e7e0      	b.n	37e3e <_strtol_l.isra.0+0x8e>
   37e7c:	1c5a      	adds	r2, r3, #1
   37e7e:	d108      	bne.n	37e92 <_strtol_l.isra.0+0xe2>
   37e80:	9a05      	ldr	r2, [sp, #20]
   37e82:	3323      	adds	r3, #35	; 0x23
   37e84:	6013      	str	r3, [r2, #0]
   37e86:	9b02      	ldr	r3, [sp, #8]
   37e88:	0030      	movs	r0, r6
   37e8a:	2b00      	cmp	r3, #0
   37e8c:	d10b      	bne.n	37ea6 <_strtol_l.isra.0+0xf6>
   37e8e:	b007      	add	sp, #28
   37e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   37e92:	9a01      	ldr	r2, [sp, #4]
   37e94:	2a00      	cmp	r2, #0
   37e96:	d000      	beq.n	37e9a <_strtol_l.isra.0+0xea>
   37e98:	4240      	negs	r0, r0
   37e9a:	9a02      	ldr	r2, [sp, #8]
   37e9c:	2a00      	cmp	r2, #0
   37e9e:	d0f6      	beq.n	37e8e <_strtol_l.isra.0+0xde>
   37ea0:	9a03      	ldr	r2, [sp, #12]
   37ea2:	2b00      	cmp	r3, #0
   37ea4:	d000      	beq.n	37ea8 <_strtol_l.isra.0+0xf8>
   37ea6:	1e6a      	subs	r2, r5, #1
   37ea8:	9b02      	ldr	r3, [sp, #8]
   37eaa:	601a      	str	r2, [r3, #0]
   37eac:	e7ef      	b.n	37e8e <_strtol_l.isra.0+0xde>
   37eae:	2430      	movs	r4, #48	; 0x30
   37eb0:	2f00      	cmp	r7, #0
   37eb2:	d1ad      	bne.n	37e10 <_strtol_l.isra.0+0x60>
   37eb4:	3708      	adds	r7, #8
   37eb6:	e7ab      	b.n	37e10 <_strtol_l.isra.0+0x60>
   37eb8:	7fffffff 	.word	0x7fffffff

00037ebc <strtol>:
   37ebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   37ebe:	0013      	movs	r3, r2
   37ec0:	4a06      	ldr	r2, [pc, #24]	; (37edc <strtol+0x20>)
   37ec2:	0005      	movs	r5, r0
   37ec4:	6810      	ldr	r0, [r2, #0]
   37ec6:	6a04      	ldr	r4, [r0, #32]
   37ec8:	2c00      	cmp	r4, #0
   37eca:	d100      	bne.n	37ece <strtol+0x12>
   37ecc:	4c04      	ldr	r4, [pc, #16]	; (37ee0 <strtol+0x24>)
   37ece:	000a      	movs	r2, r1
   37ed0:	9400      	str	r4, [sp, #0]
   37ed2:	0029      	movs	r1, r5
   37ed4:	f7ff ff6c 	bl	37db0 <_strtol_l.isra.0>
   37ed8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   37eda:	46c0      	nop			; (mov r8, r8)
   37edc:	20000138 	.word	0x20000138
   37ee0:	2000019c 	.word	0x2000019c

00037ee4 <_vsniprintf_r>:
   37ee4:	b530      	push	{r4, r5, lr}
   37ee6:	0014      	movs	r4, r2
   37ee8:	b09b      	sub	sp, #108	; 0x6c
   37eea:	0005      	movs	r5, r0
   37eec:	001a      	movs	r2, r3
   37eee:	2c00      	cmp	r4, #0
   37ef0:	da05      	bge.n	37efe <_vsniprintf_r+0x1a>
   37ef2:	238b      	movs	r3, #139	; 0x8b
   37ef4:	6003      	str	r3, [r0, #0]
   37ef6:	2001      	movs	r0, #1
   37ef8:	4240      	negs	r0, r0
   37efa:	b01b      	add	sp, #108	; 0x6c
   37efc:	bd30      	pop	{r4, r5, pc}
   37efe:	2382      	movs	r3, #130	; 0x82
   37f00:	4668      	mov	r0, sp
   37f02:	009b      	lsls	r3, r3, #2
   37f04:	8183      	strh	r3, [r0, #12]
   37f06:	2300      	movs	r3, #0
   37f08:	9100      	str	r1, [sp, #0]
   37f0a:	9104      	str	r1, [sp, #16]
   37f0c:	429c      	cmp	r4, r3
   37f0e:	d000      	beq.n	37f12 <_vsniprintf_r+0x2e>
   37f10:	1e63      	subs	r3, r4, #1
   37f12:	9302      	str	r3, [sp, #8]
   37f14:	9305      	str	r3, [sp, #20]
   37f16:	2301      	movs	r3, #1
   37f18:	4669      	mov	r1, sp
   37f1a:	425b      	negs	r3, r3
   37f1c:	81cb      	strh	r3, [r1, #14]
   37f1e:	0028      	movs	r0, r5
   37f20:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   37f22:	f000 fb63 	bl	385ec <_svfiprintf_r>
   37f26:	1c43      	adds	r3, r0, #1
   37f28:	da01      	bge.n	37f2e <_vsniprintf_r+0x4a>
   37f2a:	238b      	movs	r3, #139	; 0x8b
   37f2c:	602b      	str	r3, [r5, #0]
   37f2e:	2c00      	cmp	r4, #0
   37f30:	d0e3      	beq.n	37efa <_vsniprintf_r+0x16>
   37f32:	2300      	movs	r3, #0
   37f34:	9a00      	ldr	r2, [sp, #0]
   37f36:	7013      	strb	r3, [r2, #0]
   37f38:	e7df      	b.n	37efa <_vsniprintf_r+0x16>
	...

00037f3c <vsniprintf>:
   37f3c:	b507      	push	{r0, r1, r2, lr}
   37f3e:	9300      	str	r3, [sp, #0]
   37f40:	0013      	movs	r3, r2
   37f42:	000a      	movs	r2, r1
   37f44:	0001      	movs	r1, r0
   37f46:	4802      	ldr	r0, [pc, #8]	; (37f50 <vsniprintf+0x14>)
   37f48:	6800      	ldr	r0, [r0, #0]
   37f4a:	f7ff ffcb 	bl	37ee4 <_vsniprintf_r>
   37f4e:	bd0e      	pop	{r1, r2, r3, pc}
   37f50:	20000138 	.word	0x20000138

00037f54 <__swbuf_r>:
   37f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37f56:	0005      	movs	r5, r0
   37f58:	000e      	movs	r6, r1
   37f5a:	0014      	movs	r4, r2
   37f5c:	2800      	cmp	r0, #0
   37f5e:	d004      	beq.n	37f6a <__swbuf_r+0x16>
   37f60:	6983      	ldr	r3, [r0, #24]
   37f62:	2b00      	cmp	r3, #0
   37f64:	d101      	bne.n	37f6a <__swbuf_r+0x16>
   37f66:	f000 f9b9 	bl	382dc <__sinit>
   37f6a:	4b22      	ldr	r3, [pc, #136]	; (37ff4 <__swbuf_r+0xa0>)
   37f6c:	429c      	cmp	r4, r3
   37f6e:	d12d      	bne.n	37fcc <__swbuf_r+0x78>
   37f70:	686c      	ldr	r4, [r5, #4]
   37f72:	69a3      	ldr	r3, [r4, #24]
   37f74:	60a3      	str	r3, [r4, #8]
   37f76:	89a3      	ldrh	r3, [r4, #12]
   37f78:	071b      	lsls	r3, r3, #28
   37f7a:	d531      	bpl.n	37fe0 <__swbuf_r+0x8c>
   37f7c:	6923      	ldr	r3, [r4, #16]
   37f7e:	2b00      	cmp	r3, #0
   37f80:	d02e      	beq.n	37fe0 <__swbuf_r+0x8c>
   37f82:	6823      	ldr	r3, [r4, #0]
   37f84:	6922      	ldr	r2, [r4, #16]
   37f86:	b2f7      	uxtb	r7, r6
   37f88:	1a98      	subs	r0, r3, r2
   37f8a:	6963      	ldr	r3, [r4, #20]
   37f8c:	b2f6      	uxtb	r6, r6
   37f8e:	4298      	cmp	r0, r3
   37f90:	db05      	blt.n	37f9e <__swbuf_r+0x4a>
   37f92:	0021      	movs	r1, r4
   37f94:	0028      	movs	r0, r5
   37f96:	f000 f933 	bl	38200 <_fflush_r>
   37f9a:	2800      	cmp	r0, #0
   37f9c:	d126      	bne.n	37fec <__swbuf_r+0x98>
   37f9e:	68a3      	ldr	r3, [r4, #8]
   37fa0:	3001      	adds	r0, #1
   37fa2:	3b01      	subs	r3, #1
   37fa4:	60a3      	str	r3, [r4, #8]
   37fa6:	6823      	ldr	r3, [r4, #0]
   37fa8:	1c5a      	adds	r2, r3, #1
   37faa:	6022      	str	r2, [r4, #0]
   37fac:	701f      	strb	r7, [r3, #0]
   37fae:	6963      	ldr	r3, [r4, #20]
   37fb0:	4298      	cmp	r0, r3
   37fb2:	d004      	beq.n	37fbe <__swbuf_r+0x6a>
   37fb4:	89a3      	ldrh	r3, [r4, #12]
   37fb6:	07db      	lsls	r3, r3, #31
   37fb8:	d51a      	bpl.n	37ff0 <__swbuf_r+0x9c>
   37fba:	2e0a      	cmp	r6, #10
   37fbc:	d118      	bne.n	37ff0 <__swbuf_r+0x9c>
   37fbe:	0021      	movs	r1, r4
   37fc0:	0028      	movs	r0, r5
   37fc2:	f000 f91d 	bl	38200 <_fflush_r>
   37fc6:	2800      	cmp	r0, #0
   37fc8:	d012      	beq.n	37ff0 <__swbuf_r+0x9c>
   37fca:	e00f      	b.n	37fec <__swbuf_r+0x98>
   37fcc:	4b0a      	ldr	r3, [pc, #40]	; (37ff8 <__swbuf_r+0xa4>)
   37fce:	429c      	cmp	r4, r3
   37fd0:	d101      	bne.n	37fd6 <__swbuf_r+0x82>
   37fd2:	68ac      	ldr	r4, [r5, #8]
   37fd4:	e7cd      	b.n	37f72 <__swbuf_r+0x1e>
   37fd6:	4b09      	ldr	r3, [pc, #36]	; (37ffc <__swbuf_r+0xa8>)
   37fd8:	429c      	cmp	r4, r3
   37fda:	d1ca      	bne.n	37f72 <__swbuf_r+0x1e>
   37fdc:	68ec      	ldr	r4, [r5, #12]
   37fde:	e7c8      	b.n	37f72 <__swbuf_r+0x1e>
   37fe0:	0021      	movs	r1, r4
   37fe2:	0028      	movs	r0, r5
   37fe4:	f000 f80c 	bl	38000 <__swsetup_r>
   37fe8:	2800      	cmp	r0, #0
   37fea:	d0ca      	beq.n	37f82 <__swbuf_r+0x2e>
   37fec:	2601      	movs	r6, #1
   37fee:	4276      	negs	r6, r6
   37ff0:	0030      	movs	r0, r6
   37ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   37ff4:	0003d4b8 	.word	0x0003d4b8
   37ff8:	0003d4d8 	.word	0x0003d4d8
   37ffc:	0003d498 	.word	0x0003d498

00038000 <__swsetup_r>:
   38000:	4b36      	ldr	r3, [pc, #216]	; (380dc <__swsetup_r+0xdc>)
   38002:	b570      	push	{r4, r5, r6, lr}
   38004:	681d      	ldr	r5, [r3, #0]
   38006:	0006      	movs	r6, r0
   38008:	000c      	movs	r4, r1
   3800a:	2d00      	cmp	r5, #0
   3800c:	d005      	beq.n	3801a <__swsetup_r+0x1a>
   3800e:	69ab      	ldr	r3, [r5, #24]
   38010:	2b00      	cmp	r3, #0
   38012:	d102      	bne.n	3801a <__swsetup_r+0x1a>
   38014:	0028      	movs	r0, r5
   38016:	f000 f961 	bl	382dc <__sinit>
   3801a:	4b31      	ldr	r3, [pc, #196]	; (380e0 <__swsetup_r+0xe0>)
   3801c:	429c      	cmp	r4, r3
   3801e:	d10f      	bne.n	38040 <__swsetup_r+0x40>
   38020:	686c      	ldr	r4, [r5, #4]
   38022:	230c      	movs	r3, #12
   38024:	5ee2      	ldrsh	r2, [r4, r3]
   38026:	b293      	uxth	r3, r2
   38028:	0719      	lsls	r1, r3, #28
   3802a:	d42d      	bmi.n	38088 <__swsetup_r+0x88>
   3802c:	06d9      	lsls	r1, r3, #27
   3802e:	d411      	bmi.n	38054 <__swsetup_r+0x54>
   38030:	2309      	movs	r3, #9
   38032:	2001      	movs	r0, #1
   38034:	6033      	str	r3, [r6, #0]
   38036:	3337      	adds	r3, #55	; 0x37
   38038:	4313      	orrs	r3, r2
   3803a:	81a3      	strh	r3, [r4, #12]
   3803c:	4240      	negs	r0, r0
   3803e:	bd70      	pop	{r4, r5, r6, pc}
   38040:	4b28      	ldr	r3, [pc, #160]	; (380e4 <__swsetup_r+0xe4>)
   38042:	429c      	cmp	r4, r3
   38044:	d101      	bne.n	3804a <__swsetup_r+0x4a>
   38046:	68ac      	ldr	r4, [r5, #8]
   38048:	e7eb      	b.n	38022 <__swsetup_r+0x22>
   3804a:	4b27      	ldr	r3, [pc, #156]	; (380e8 <__swsetup_r+0xe8>)
   3804c:	429c      	cmp	r4, r3
   3804e:	d1e8      	bne.n	38022 <__swsetup_r+0x22>
   38050:	68ec      	ldr	r4, [r5, #12]
   38052:	e7e6      	b.n	38022 <__swsetup_r+0x22>
   38054:	075b      	lsls	r3, r3, #29
   38056:	d513      	bpl.n	38080 <__swsetup_r+0x80>
   38058:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3805a:	2900      	cmp	r1, #0
   3805c:	d008      	beq.n	38070 <__swsetup_r+0x70>
   3805e:	0023      	movs	r3, r4
   38060:	3344      	adds	r3, #68	; 0x44
   38062:	4299      	cmp	r1, r3
   38064:	d002      	beq.n	3806c <__swsetup_r+0x6c>
   38066:	0030      	movs	r0, r6
   38068:	f7ff fc78 	bl	3795c <_free_r>
   3806c:	2300      	movs	r3, #0
   3806e:	6363      	str	r3, [r4, #52]	; 0x34
   38070:	2224      	movs	r2, #36	; 0x24
   38072:	89a3      	ldrh	r3, [r4, #12]
   38074:	4393      	bics	r3, r2
   38076:	81a3      	strh	r3, [r4, #12]
   38078:	2300      	movs	r3, #0
   3807a:	6063      	str	r3, [r4, #4]
   3807c:	6923      	ldr	r3, [r4, #16]
   3807e:	6023      	str	r3, [r4, #0]
   38080:	2308      	movs	r3, #8
   38082:	89a2      	ldrh	r2, [r4, #12]
   38084:	4313      	orrs	r3, r2
   38086:	81a3      	strh	r3, [r4, #12]
   38088:	6923      	ldr	r3, [r4, #16]
   3808a:	2b00      	cmp	r3, #0
   3808c:	d10b      	bne.n	380a6 <__swsetup_r+0xa6>
   3808e:	21a0      	movs	r1, #160	; 0xa0
   38090:	2280      	movs	r2, #128	; 0x80
   38092:	89a3      	ldrh	r3, [r4, #12]
   38094:	0089      	lsls	r1, r1, #2
   38096:	0092      	lsls	r2, r2, #2
   38098:	400b      	ands	r3, r1
   3809a:	4293      	cmp	r3, r2
   3809c:	d003      	beq.n	380a6 <__swsetup_r+0xa6>
   3809e:	0021      	movs	r1, r4
   380a0:	0030      	movs	r0, r6
   380a2:	f000 f9e9 	bl	38478 <__smakebuf_r>
   380a6:	2301      	movs	r3, #1
   380a8:	89a2      	ldrh	r2, [r4, #12]
   380aa:	4013      	ands	r3, r2
   380ac:	d011      	beq.n	380d2 <__swsetup_r+0xd2>
   380ae:	2300      	movs	r3, #0
   380b0:	60a3      	str	r3, [r4, #8]
   380b2:	6963      	ldr	r3, [r4, #20]
   380b4:	425b      	negs	r3, r3
   380b6:	61a3      	str	r3, [r4, #24]
   380b8:	2000      	movs	r0, #0
   380ba:	6923      	ldr	r3, [r4, #16]
   380bc:	4283      	cmp	r3, r0
   380be:	d1be      	bne.n	3803e <__swsetup_r+0x3e>
   380c0:	230c      	movs	r3, #12
   380c2:	5ee2      	ldrsh	r2, [r4, r3]
   380c4:	0613      	lsls	r3, r2, #24
   380c6:	d5ba      	bpl.n	3803e <__swsetup_r+0x3e>
   380c8:	2340      	movs	r3, #64	; 0x40
   380ca:	4313      	orrs	r3, r2
   380cc:	81a3      	strh	r3, [r4, #12]
   380ce:	3801      	subs	r0, #1
   380d0:	e7b5      	b.n	3803e <__swsetup_r+0x3e>
   380d2:	0792      	lsls	r2, r2, #30
   380d4:	d400      	bmi.n	380d8 <__swsetup_r+0xd8>
   380d6:	6963      	ldr	r3, [r4, #20]
   380d8:	60a3      	str	r3, [r4, #8]
   380da:	e7ed      	b.n	380b8 <__swsetup_r+0xb8>
   380dc:	20000138 	.word	0x20000138
   380e0:	0003d4b8 	.word	0x0003d4b8
   380e4:	0003d4d8 	.word	0x0003d4d8
   380e8:	0003d498 	.word	0x0003d498

000380ec <__sflush_r>:
   380ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   380ee:	898a      	ldrh	r2, [r1, #12]
   380f0:	0005      	movs	r5, r0
   380f2:	000c      	movs	r4, r1
   380f4:	0713      	lsls	r3, r2, #28
   380f6:	d460      	bmi.n	381ba <__sflush_r+0xce>
   380f8:	684b      	ldr	r3, [r1, #4]
   380fa:	2b00      	cmp	r3, #0
   380fc:	dc04      	bgt.n	38108 <__sflush_r+0x1c>
   380fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   38100:	2b00      	cmp	r3, #0
   38102:	dc01      	bgt.n	38108 <__sflush_r+0x1c>
   38104:	2000      	movs	r0, #0
   38106:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   38108:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   3810a:	2f00      	cmp	r7, #0
   3810c:	d0fa      	beq.n	38104 <__sflush_r+0x18>
   3810e:	2300      	movs	r3, #0
   38110:	682e      	ldr	r6, [r5, #0]
   38112:	602b      	str	r3, [r5, #0]
   38114:	2380      	movs	r3, #128	; 0x80
   38116:	015b      	lsls	r3, r3, #5
   38118:	401a      	ands	r2, r3
   3811a:	d034      	beq.n	38186 <__sflush_r+0x9a>
   3811c:	6d60      	ldr	r0, [r4, #84]	; 0x54
   3811e:	89a3      	ldrh	r3, [r4, #12]
   38120:	075b      	lsls	r3, r3, #29
   38122:	d506      	bpl.n	38132 <__sflush_r+0x46>
   38124:	6863      	ldr	r3, [r4, #4]
   38126:	1ac0      	subs	r0, r0, r3
   38128:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3812a:	2b00      	cmp	r3, #0
   3812c:	d001      	beq.n	38132 <__sflush_r+0x46>
   3812e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   38130:	1ac0      	subs	r0, r0, r3
   38132:	0002      	movs	r2, r0
   38134:	6a21      	ldr	r1, [r4, #32]
   38136:	2300      	movs	r3, #0
   38138:	0028      	movs	r0, r5
   3813a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   3813c:	47b8      	blx	r7
   3813e:	89a1      	ldrh	r1, [r4, #12]
   38140:	1c43      	adds	r3, r0, #1
   38142:	d106      	bne.n	38152 <__sflush_r+0x66>
   38144:	682b      	ldr	r3, [r5, #0]
   38146:	2b1d      	cmp	r3, #29
   38148:	d831      	bhi.n	381ae <__sflush_r+0xc2>
   3814a:	4a2c      	ldr	r2, [pc, #176]	; (381fc <__sflush_r+0x110>)
   3814c:	40da      	lsrs	r2, r3
   3814e:	07d3      	lsls	r3, r2, #31
   38150:	d52d      	bpl.n	381ae <__sflush_r+0xc2>
   38152:	2300      	movs	r3, #0
   38154:	6063      	str	r3, [r4, #4]
   38156:	6923      	ldr	r3, [r4, #16]
   38158:	6023      	str	r3, [r4, #0]
   3815a:	04cb      	lsls	r3, r1, #19
   3815c:	d505      	bpl.n	3816a <__sflush_r+0x7e>
   3815e:	1c43      	adds	r3, r0, #1
   38160:	d102      	bne.n	38168 <__sflush_r+0x7c>
   38162:	682b      	ldr	r3, [r5, #0]
   38164:	2b00      	cmp	r3, #0
   38166:	d100      	bne.n	3816a <__sflush_r+0x7e>
   38168:	6560      	str	r0, [r4, #84]	; 0x54
   3816a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3816c:	602e      	str	r6, [r5, #0]
   3816e:	2900      	cmp	r1, #0
   38170:	d0c8      	beq.n	38104 <__sflush_r+0x18>
   38172:	0023      	movs	r3, r4
   38174:	3344      	adds	r3, #68	; 0x44
   38176:	4299      	cmp	r1, r3
   38178:	d002      	beq.n	38180 <__sflush_r+0x94>
   3817a:	0028      	movs	r0, r5
   3817c:	f7ff fbee 	bl	3795c <_free_r>
   38180:	2000      	movs	r0, #0
   38182:	6360      	str	r0, [r4, #52]	; 0x34
   38184:	e7bf      	b.n	38106 <__sflush_r+0x1a>
   38186:	2301      	movs	r3, #1
   38188:	6a21      	ldr	r1, [r4, #32]
   3818a:	0028      	movs	r0, r5
   3818c:	47b8      	blx	r7
   3818e:	1c43      	adds	r3, r0, #1
   38190:	d1c5      	bne.n	3811e <__sflush_r+0x32>
   38192:	682b      	ldr	r3, [r5, #0]
   38194:	2b00      	cmp	r3, #0
   38196:	d0c2      	beq.n	3811e <__sflush_r+0x32>
   38198:	2b1d      	cmp	r3, #29
   3819a:	d001      	beq.n	381a0 <__sflush_r+0xb4>
   3819c:	2b16      	cmp	r3, #22
   3819e:	d101      	bne.n	381a4 <__sflush_r+0xb8>
   381a0:	602e      	str	r6, [r5, #0]
   381a2:	e7af      	b.n	38104 <__sflush_r+0x18>
   381a4:	2340      	movs	r3, #64	; 0x40
   381a6:	89a2      	ldrh	r2, [r4, #12]
   381a8:	4313      	orrs	r3, r2
   381aa:	81a3      	strh	r3, [r4, #12]
   381ac:	e7ab      	b.n	38106 <__sflush_r+0x1a>
   381ae:	2340      	movs	r3, #64	; 0x40
   381b0:	430b      	orrs	r3, r1
   381b2:	2001      	movs	r0, #1
   381b4:	81a3      	strh	r3, [r4, #12]
   381b6:	4240      	negs	r0, r0
   381b8:	e7a5      	b.n	38106 <__sflush_r+0x1a>
   381ba:	690f      	ldr	r7, [r1, #16]
   381bc:	2f00      	cmp	r7, #0
   381be:	d0a1      	beq.n	38104 <__sflush_r+0x18>
   381c0:	680b      	ldr	r3, [r1, #0]
   381c2:	600f      	str	r7, [r1, #0]
   381c4:	1bdb      	subs	r3, r3, r7
   381c6:	9301      	str	r3, [sp, #4]
   381c8:	2300      	movs	r3, #0
   381ca:	0792      	lsls	r2, r2, #30
   381cc:	d100      	bne.n	381d0 <__sflush_r+0xe4>
   381ce:	694b      	ldr	r3, [r1, #20]
   381d0:	60a3      	str	r3, [r4, #8]
   381d2:	9b01      	ldr	r3, [sp, #4]
   381d4:	2b00      	cmp	r3, #0
   381d6:	dc00      	bgt.n	381da <__sflush_r+0xee>
   381d8:	e794      	b.n	38104 <__sflush_r+0x18>
   381da:	9b01      	ldr	r3, [sp, #4]
   381dc:	003a      	movs	r2, r7
   381de:	6a21      	ldr	r1, [r4, #32]
   381e0:	0028      	movs	r0, r5
   381e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   381e4:	47b0      	blx	r6
   381e6:	2800      	cmp	r0, #0
   381e8:	dc03      	bgt.n	381f2 <__sflush_r+0x106>
   381ea:	2340      	movs	r3, #64	; 0x40
   381ec:	89a2      	ldrh	r2, [r4, #12]
   381ee:	4313      	orrs	r3, r2
   381f0:	e7df      	b.n	381b2 <__sflush_r+0xc6>
   381f2:	9b01      	ldr	r3, [sp, #4]
   381f4:	183f      	adds	r7, r7, r0
   381f6:	1a1b      	subs	r3, r3, r0
   381f8:	9301      	str	r3, [sp, #4]
   381fa:	e7ea      	b.n	381d2 <__sflush_r+0xe6>
   381fc:	20400001 	.word	0x20400001

00038200 <_fflush_r>:
   38200:	690b      	ldr	r3, [r1, #16]
   38202:	b570      	push	{r4, r5, r6, lr}
   38204:	0005      	movs	r5, r0
   38206:	000c      	movs	r4, r1
   38208:	2b00      	cmp	r3, #0
   3820a:	d101      	bne.n	38210 <_fflush_r+0x10>
   3820c:	2000      	movs	r0, #0
   3820e:	bd70      	pop	{r4, r5, r6, pc}
   38210:	2800      	cmp	r0, #0
   38212:	d004      	beq.n	3821e <_fflush_r+0x1e>
   38214:	6983      	ldr	r3, [r0, #24]
   38216:	2b00      	cmp	r3, #0
   38218:	d101      	bne.n	3821e <_fflush_r+0x1e>
   3821a:	f000 f85f 	bl	382dc <__sinit>
   3821e:	4b0b      	ldr	r3, [pc, #44]	; (3824c <_fflush_r+0x4c>)
   38220:	429c      	cmp	r4, r3
   38222:	d109      	bne.n	38238 <_fflush_r+0x38>
   38224:	686c      	ldr	r4, [r5, #4]
   38226:	220c      	movs	r2, #12
   38228:	5ea3      	ldrsh	r3, [r4, r2]
   3822a:	2b00      	cmp	r3, #0
   3822c:	d0ee      	beq.n	3820c <_fflush_r+0xc>
   3822e:	0021      	movs	r1, r4
   38230:	0028      	movs	r0, r5
   38232:	f7ff ff5b 	bl	380ec <__sflush_r>
   38236:	e7ea      	b.n	3820e <_fflush_r+0xe>
   38238:	4b05      	ldr	r3, [pc, #20]	; (38250 <_fflush_r+0x50>)
   3823a:	429c      	cmp	r4, r3
   3823c:	d101      	bne.n	38242 <_fflush_r+0x42>
   3823e:	68ac      	ldr	r4, [r5, #8]
   38240:	e7f1      	b.n	38226 <_fflush_r+0x26>
   38242:	4b04      	ldr	r3, [pc, #16]	; (38254 <_fflush_r+0x54>)
   38244:	429c      	cmp	r4, r3
   38246:	d1ee      	bne.n	38226 <_fflush_r+0x26>
   38248:	68ec      	ldr	r4, [r5, #12]
   3824a:	e7ec      	b.n	38226 <_fflush_r+0x26>
   3824c:	0003d4b8 	.word	0x0003d4b8
   38250:	0003d4d8 	.word	0x0003d4d8
   38254:	0003d498 	.word	0x0003d498

00038258 <_cleanup_r>:
   38258:	b510      	push	{r4, lr}
   3825a:	4902      	ldr	r1, [pc, #8]	; (38264 <_cleanup_r+0xc>)
   3825c:	f000 f8b2 	bl	383c4 <_fwalk_reent>
   38260:	bd10      	pop	{r4, pc}
   38262:	46c0      	nop			; (mov r8, r8)
   38264:	00038201 	.word	0x00038201

00038268 <std.isra.0>:
   38268:	2300      	movs	r3, #0
   3826a:	b510      	push	{r4, lr}
   3826c:	0004      	movs	r4, r0
   3826e:	6003      	str	r3, [r0, #0]
   38270:	6043      	str	r3, [r0, #4]
   38272:	6083      	str	r3, [r0, #8]
   38274:	8181      	strh	r1, [r0, #12]
   38276:	6643      	str	r3, [r0, #100]	; 0x64
   38278:	81c2      	strh	r2, [r0, #14]
   3827a:	6103      	str	r3, [r0, #16]
   3827c:	6143      	str	r3, [r0, #20]
   3827e:	6183      	str	r3, [r0, #24]
   38280:	0019      	movs	r1, r3
   38282:	2208      	movs	r2, #8
   38284:	305c      	adds	r0, #92	; 0x5c
   38286:	f7ff fb60 	bl	3794a <memset>
   3828a:	4b05      	ldr	r3, [pc, #20]	; (382a0 <std.isra.0+0x38>)
   3828c:	6224      	str	r4, [r4, #32]
   3828e:	6263      	str	r3, [r4, #36]	; 0x24
   38290:	4b04      	ldr	r3, [pc, #16]	; (382a4 <std.isra.0+0x3c>)
   38292:	62a3      	str	r3, [r4, #40]	; 0x28
   38294:	4b04      	ldr	r3, [pc, #16]	; (382a8 <std.isra.0+0x40>)
   38296:	62e3      	str	r3, [r4, #44]	; 0x2c
   38298:	4b04      	ldr	r3, [pc, #16]	; (382ac <std.isra.0+0x44>)
   3829a:	6323      	str	r3, [r4, #48]	; 0x30
   3829c:	bd10      	pop	{r4, pc}
   3829e:	46c0      	nop			; (mov r8, r8)
   382a0:	00038b05 	.word	0x00038b05
   382a4:	00038b2d 	.word	0x00038b2d
   382a8:	00038b65 	.word	0x00038b65
   382ac:	00038b91 	.word	0x00038b91

000382b0 <__sfmoreglue>:
   382b0:	b570      	push	{r4, r5, r6, lr}
   382b2:	2568      	movs	r5, #104	; 0x68
   382b4:	1e4a      	subs	r2, r1, #1
   382b6:	4355      	muls	r5, r2
   382b8:	000e      	movs	r6, r1
   382ba:	0029      	movs	r1, r5
   382bc:	3174      	adds	r1, #116	; 0x74
   382be:	f7ff fb97 	bl	379f0 <_malloc_r>
   382c2:	1e04      	subs	r4, r0, #0
   382c4:	d008      	beq.n	382d8 <__sfmoreglue+0x28>
   382c6:	2100      	movs	r1, #0
   382c8:	002a      	movs	r2, r5
   382ca:	6001      	str	r1, [r0, #0]
   382cc:	6046      	str	r6, [r0, #4]
   382ce:	300c      	adds	r0, #12
   382d0:	60a0      	str	r0, [r4, #8]
   382d2:	3268      	adds	r2, #104	; 0x68
   382d4:	f7ff fb39 	bl	3794a <memset>
   382d8:	0020      	movs	r0, r4
   382da:	bd70      	pop	{r4, r5, r6, pc}

000382dc <__sinit>:
   382dc:	6983      	ldr	r3, [r0, #24]
   382de:	b513      	push	{r0, r1, r4, lr}
   382e0:	0004      	movs	r4, r0
   382e2:	2b00      	cmp	r3, #0
   382e4:	d128      	bne.n	38338 <__sinit+0x5c>
   382e6:	6483      	str	r3, [r0, #72]	; 0x48
   382e8:	64c3      	str	r3, [r0, #76]	; 0x4c
   382ea:	6503      	str	r3, [r0, #80]	; 0x50
   382ec:	4b13      	ldr	r3, [pc, #76]	; (3833c <__sinit+0x60>)
   382ee:	4a14      	ldr	r2, [pc, #80]	; (38340 <__sinit+0x64>)
   382f0:	681b      	ldr	r3, [r3, #0]
   382f2:	6282      	str	r2, [r0, #40]	; 0x28
   382f4:	9301      	str	r3, [sp, #4]
   382f6:	4298      	cmp	r0, r3
   382f8:	d101      	bne.n	382fe <__sinit+0x22>
   382fa:	2301      	movs	r3, #1
   382fc:	6183      	str	r3, [r0, #24]
   382fe:	0020      	movs	r0, r4
   38300:	f000 f820 	bl	38344 <__sfp>
   38304:	6060      	str	r0, [r4, #4]
   38306:	0020      	movs	r0, r4
   38308:	f000 f81c 	bl	38344 <__sfp>
   3830c:	60a0      	str	r0, [r4, #8]
   3830e:	0020      	movs	r0, r4
   38310:	f000 f818 	bl	38344 <__sfp>
   38314:	2200      	movs	r2, #0
   38316:	60e0      	str	r0, [r4, #12]
   38318:	2104      	movs	r1, #4
   3831a:	6860      	ldr	r0, [r4, #4]
   3831c:	f7ff ffa4 	bl	38268 <std.isra.0>
   38320:	2201      	movs	r2, #1
   38322:	2109      	movs	r1, #9
   38324:	68a0      	ldr	r0, [r4, #8]
   38326:	f7ff ff9f 	bl	38268 <std.isra.0>
   3832a:	2202      	movs	r2, #2
   3832c:	2112      	movs	r1, #18
   3832e:	68e0      	ldr	r0, [r4, #12]
   38330:	f7ff ff9a 	bl	38268 <std.isra.0>
   38334:	2301      	movs	r3, #1
   38336:	61a3      	str	r3, [r4, #24]
   38338:	bd13      	pop	{r0, r1, r4, pc}
   3833a:	46c0      	nop			; (mov r8, r8)
   3833c:	0003d494 	.word	0x0003d494
   38340:	00038259 	.word	0x00038259

00038344 <__sfp>:
   38344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38346:	4b1e      	ldr	r3, [pc, #120]	; (383c0 <__sfp+0x7c>)
   38348:	0007      	movs	r7, r0
   3834a:	681e      	ldr	r6, [r3, #0]
   3834c:	69b3      	ldr	r3, [r6, #24]
   3834e:	2b00      	cmp	r3, #0
   38350:	d102      	bne.n	38358 <__sfp+0x14>
   38352:	0030      	movs	r0, r6
   38354:	f7ff ffc2 	bl	382dc <__sinit>
   38358:	3648      	adds	r6, #72	; 0x48
   3835a:	68b4      	ldr	r4, [r6, #8]
   3835c:	6873      	ldr	r3, [r6, #4]
   3835e:	3b01      	subs	r3, #1
   38360:	d504      	bpl.n	3836c <__sfp+0x28>
   38362:	6833      	ldr	r3, [r6, #0]
   38364:	2b00      	cmp	r3, #0
   38366:	d007      	beq.n	38378 <__sfp+0x34>
   38368:	6836      	ldr	r6, [r6, #0]
   3836a:	e7f6      	b.n	3835a <__sfp+0x16>
   3836c:	220c      	movs	r2, #12
   3836e:	5ea5      	ldrsh	r5, [r4, r2]
   38370:	2d00      	cmp	r5, #0
   38372:	d00d      	beq.n	38390 <__sfp+0x4c>
   38374:	3468      	adds	r4, #104	; 0x68
   38376:	e7f2      	b.n	3835e <__sfp+0x1a>
   38378:	2104      	movs	r1, #4
   3837a:	0038      	movs	r0, r7
   3837c:	f7ff ff98 	bl	382b0 <__sfmoreglue>
   38380:	6030      	str	r0, [r6, #0]
   38382:	2800      	cmp	r0, #0
   38384:	d1f0      	bne.n	38368 <__sfp+0x24>
   38386:	230c      	movs	r3, #12
   38388:	0004      	movs	r4, r0
   3838a:	603b      	str	r3, [r7, #0]
   3838c:	0020      	movs	r0, r4
   3838e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38390:	2301      	movs	r3, #1
   38392:	0020      	movs	r0, r4
   38394:	425b      	negs	r3, r3
   38396:	81e3      	strh	r3, [r4, #14]
   38398:	3302      	adds	r3, #2
   3839a:	81a3      	strh	r3, [r4, #12]
   3839c:	6665      	str	r5, [r4, #100]	; 0x64
   3839e:	6025      	str	r5, [r4, #0]
   383a0:	60a5      	str	r5, [r4, #8]
   383a2:	6065      	str	r5, [r4, #4]
   383a4:	6125      	str	r5, [r4, #16]
   383a6:	6165      	str	r5, [r4, #20]
   383a8:	61a5      	str	r5, [r4, #24]
   383aa:	2208      	movs	r2, #8
   383ac:	0029      	movs	r1, r5
   383ae:	305c      	adds	r0, #92	; 0x5c
   383b0:	f7ff facb 	bl	3794a <memset>
   383b4:	6365      	str	r5, [r4, #52]	; 0x34
   383b6:	63a5      	str	r5, [r4, #56]	; 0x38
   383b8:	64a5      	str	r5, [r4, #72]	; 0x48
   383ba:	64e5      	str	r5, [r4, #76]	; 0x4c
   383bc:	e7e6      	b.n	3838c <__sfp+0x48>
   383be:	46c0      	nop			; (mov r8, r8)
   383c0:	0003d494 	.word	0x0003d494

000383c4 <_fwalk_reent>:
   383c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   383c6:	0004      	movs	r4, r0
   383c8:	0007      	movs	r7, r0
   383ca:	2600      	movs	r6, #0
   383cc:	9101      	str	r1, [sp, #4]
   383ce:	3448      	adds	r4, #72	; 0x48
   383d0:	2c00      	cmp	r4, #0
   383d2:	d101      	bne.n	383d8 <_fwalk_reent+0x14>
   383d4:	0030      	movs	r0, r6
   383d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   383d8:	6863      	ldr	r3, [r4, #4]
   383da:	68a5      	ldr	r5, [r4, #8]
   383dc:	9300      	str	r3, [sp, #0]
   383de:	9b00      	ldr	r3, [sp, #0]
   383e0:	3b01      	subs	r3, #1
   383e2:	9300      	str	r3, [sp, #0]
   383e4:	d501      	bpl.n	383ea <_fwalk_reent+0x26>
   383e6:	6824      	ldr	r4, [r4, #0]
   383e8:	e7f2      	b.n	383d0 <_fwalk_reent+0xc>
   383ea:	89ab      	ldrh	r3, [r5, #12]
   383ec:	2b01      	cmp	r3, #1
   383ee:	d908      	bls.n	38402 <_fwalk_reent+0x3e>
   383f0:	220e      	movs	r2, #14
   383f2:	5eab      	ldrsh	r3, [r5, r2]
   383f4:	3301      	adds	r3, #1
   383f6:	d004      	beq.n	38402 <_fwalk_reent+0x3e>
   383f8:	0029      	movs	r1, r5
   383fa:	0038      	movs	r0, r7
   383fc:	9b01      	ldr	r3, [sp, #4]
   383fe:	4798      	blx	r3
   38400:	4306      	orrs	r6, r0
   38402:	3568      	adds	r5, #104	; 0x68
   38404:	e7eb      	b.n	383de <_fwalk_reent+0x1a>

00038406 <__locale_ctype_ptr_l>:
   38406:	30ec      	adds	r0, #236	; 0xec
   38408:	6800      	ldr	r0, [r0, #0]
   3840a:	4770      	bx	lr

0003840c <__locale_ctype_ptr>:
   3840c:	4b04      	ldr	r3, [pc, #16]	; (38420 <__locale_ctype_ptr+0x14>)
   3840e:	681b      	ldr	r3, [r3, #0]
   38410:	6a1b      	ldr	r3, [r3, #32]
   38412:	2b00      	cmp	r3, #0
   38414:	d100      	bne.n	38418 <__locale_ctype_ptr+0xc>
   38416:	4b03      	ldr	r3, [pc, #12]	; (38424 <__locale_ctype_ptr+0x18>)
   38418:	33ec      	adds	r3, #236	; 0xec
   3841a:	6818      	ldr	r0, [r3, #0]
   3841c:	4770      	bx	lr
   3841e:	46c0      	nop			; (mov r8, r8)
   38420:	20000138 	.word	0x20000138
   38424:	2000019c 	.word	0x2000019c

00038428 <__swhatbuf_r>:
   38428:	b570      	push	{r4, r5, r6, lr}
   3842a:	000e      	movs	r6, r1
   3842c:	001d      	movs	r5, r3
   3842e:	230e      	movs	r3, #14
   38430:	5ec9      	ldrsh	r1, [r1, r3]
   38432:	b090      	sub	sp, #64	; 0x40
   38434:	0014      	movs	r4, r2
   38436:	2900      	cmp	r1, #0
   38438:	da07      	bge.n	3844a <__swhatbuf_r+0x22>
   3843a:	2300      	movs	r3, #0
   3843c:	602b      	str	r3, [r5, #0]
   3843e:	89b3      	ldrh	r3, [r6, #12]
   38440:	061b      	lsls	r3, r3, #24
   38442:	d411      	bmi.n	38468 <__swhatbuf_r+0x40>
   38444:	2380      	movs	r3, #128	; 0x80
   38446:	00db      	lsls	r3, r3, #3
   38448:	e00f      	b.n	3846a <__swhatbuf_r+0x42>
   3844a:	aa01      	add	r2, sp, #4
   3844c:	f000 fbe6 	bl	38c1c <_fstat_r>
   38450:	2800      	cmp	r0, #0
   38452:	dbf2      	blt.n	3843a <__swhatbuf_r+0x12>
   38454:	22f0      	movs	r2, #240	; 0xf0
   38456:	9b02      	ldr	r3, [sp, #8]
   38458:	0212      	lsls	r2, r2, #8
   3845a:	4013      	ands	r3, r2
   3845c:	4a05      	ldr	r2, [pc, #20]	; (38474 <__swhatbuf_r+0x4c>)
   3845e:	189b      	adds	r3, r3, r2
   38460:	425a      	negs	r2, r3
   38462:	4153      	adcs	r3, r2
   38464:	602b      	str	r3, [r5, #0]
   38466:	e7ed      	b.n	38444 <__swhatbuf_r+0x1c>
   38468:	2340      	movs	r3, #64	; 0x40
   3846a:	2000      	movs	r0, #0
   3846c:	6023      	str	r3, [r4, #0]
   3846e:	b010      	add	sp, #64	; 0x40
   38470:	bd70      	pop	{r4, r5, r6, pc}
   38472:	46c0      	nop			; (mov r8, r8)
   38474:	ffffe000 	.word	0xffffe000

00038478 <__smakebuf_r>:
   38478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3847a:	2602      	movs	r6, #2
   3847c:	898b      	ldrh	r3, [r1, #12]
   3847e:	0005      	movs	r5, r0
   38480:	000c      	movs	r4, r1
   38482:	4233      	tst	r3, r6
   38484:	d006      	beq.n	38494 <__smakebuf_r+0x1c>
   38486:	0023      	movs	r3, r4
   38488:	3347      	adds	r3, #71	; 0x47
   3848a:	6023      	str	r3, [r4, #0]
   3848c:	6123      	str	r3, [r4, #16]
   3848e:	2301      	movs	r3, #1
   38490:	6163      	str	r3, [r4, #20]
   38492:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   38494:	ab01      	add	r3, sp, #4
   38496:	466a      	mov	r2, sp
   38498:	f7ff ffc6 	bl	38428 <__swhatbuf_r>
   3849c:	9900      	ldr	r1, [sp, #0]
   3849e:	0007      	movs	r7, r0
   384a0:	0028      	movs	r0, r5
   384a2:	f7ff faa5 	bl	379f0 <_malloc_r>
   384a6:	2800      	cmp	r0, #0
   384a8:	d108      	bne.n	384bc <__smakebuf_r+0x44>
   384aa:	220c      	movs	r2, #12
   384ac:	5ea3      	ldrsh	r3, [r4, r2]
   384ae:	059a      	lsls	r2, r3, #22
   384b0:	d4ef      	bmi.n	38492 <__smakebuf_r+0x1a>
   384b2:	2203      	movs	r2, #3
   384b4:	4393      	bics	r3, r2
   384b6:	431e      	orrs	r6, r3
   384b8:	81a6      	strh	r6, [r4, #12]
   384ba:	e7e4      	b.n	38486 <__smakebuf_r+0xe>
   384bc:	4b0f      	ldr	r3, [pc, #60]	; (384fc <__smakebuf_r+0x84>)
   384be:	62ab      	str	r3, [r5, #40]	; 0x28
   384c0:	2380      	movs	r3, #128	; 0x80
   384c2:	89a2      	ldrh	r2, [r4, #12]
   384c4:	6020      	str	r0, [r4, #0]
   384c6:	4313      	orrs	r3, r2
   384c8:	81a3      	strh	r3, [r4, #12]
   384ca:	9b00      	ldr	r3, [sp, #0]
   384cc:	6120      	str	r0, [r4, #16]
   384ce:	6163      	str	r3, [r4, #20]
   384d0:	9b01      	ldr	r3, [sp, #4]
   384d2:	2b00      	cmp	r3, #0
   384d4:	d00d      	beq.n	384f2 <__smakebuf_r+0x7a>
   384d6:	230e      	movs	r3, #14
   384d8:	5ee1      	ldrsh	r1, [r4, r3]
   384da:	0028      	movs	r0, r5
   384dc:	f000 fbb0 	bl	38c40 <_isatty_r>
   384e0:	2800      	cmp	r0, #0
   384e2:	d006      	beq.n	384f2 <__smakebuf_r+0x7a>
   384e4:	2203      	movs	r2, #3
   384e6:	89a3      	ldrh	r3, [r4, #12]
   384e8:	4393      	bics	r3, r2
   384ea:	001a      	movs	r2, r3
   384ec:	2301      	movs	r3, #1
   384ee:	4313      	orrs	r3, r2
   384f0:	81a3      	strh	r3, [r4, #12]
   384f2:	89a0      	ldrh	r0, [r4, #12]
   384f4:	4338      	orrs	r0, r7
   384f6:	81a0      	strh	r0, [r4, #12]
   384f8:	e7cb      	b.n	38492 <__smakebuf_r+0x1a>
   384fa:	46c0      	nop			; (mov r8, r8)
   384fc:	00038259 	.word	0x00038259

00038500 <__ascii_mbtowc>:
   38500:	b082      	sub	sp, #8
   38502:	2900      	cmp	r1, #0
   38504:	d100      	bne.n	38508 <__ascii_mbtowc+0x8>
   38506:	a901      	add	r1, sp, #4
   38508:	1e10      	subs	r0, r2, #0
   3850a:	d006      	beq.n	3851a <__ascii_mbtowc+0x1a>
   3850c:	2b00      	cmp	r3, #0
   3850e:	d006      	beq.n	3851e <__ascii_mbtowc+0x1e>
   38510:	7813      	ldrb	r3, [r2, #0]
   38512:	600b      	str	r3, [r1, #0]
   38514:	7810      	ldrb	r0, [r2, #0]
   38516:	1e43      	subs	r3, r0, #1
   38518:	4198      	sbcs	r0, r3
   3851a:	b002      	add	sp, #8
   3851c:	4770      	bx	lr
   3851e:	2002      	movs	r0, #2
   38520:	4240      	negs	r0, r0
   38522:	e7fa      	b.n	3851a <__ascii_mbtowc+0x1a>

00038524 <__malloc_lock>:
   38524:	4770      	bx	lr

00038526 <__malloc_unlock>:
   38526:	4770      	bx	lr

00038528 <__ssputs_r>:
   38528:	b5f0      	push	{r4, r5, r6, r7, lr}
   3852a:	688e      	ldr	r6, [r1, #8]
   3852c:	b085      	sub	sp, #20
   3852e:	0007      	movs	r7, r0
   38530:	000c      	movs	r4, r1
   38532:	9203      	str	r2, [sp, #12]
   38534:	9301      	str	r3, [sp, #4]
   38536:	429e      	cmp	r6, r3
   38538:	d839      	bhi.n	385ae <__ssputs_r+0x86>
   3853a:	2390      	movs	r3, #144	; 0x90
   3853c:	898a      	ldrh	r2, [r1, #12]
   3853e:	00db      	lsls	r3, r3, #3
   38540:	421a      	tst	r2, r3
   38542:	d034      	beq.n	385ae <__ssputs_r+0x86>
   38544:	2503      	movs	r5, #3
   38546:	6909      	ldr	r1, [r1, #16]
   38548:	6823      	ldr	r3, [r4, #0]
   3854a:	1a5b      	subs	r3, r3, r1
   3854c:	9302      	str	r3, [sp, #8]
   3854e:	6963      	ldr	r3, [r4, #20]
   38550:	9802      	ldr	r0, [sp, #8]
   38552:	435d      	muls	r5, r3
   38554:	0feb      	lsrs	r3, r5, #31
   38556:	195d      	adds	r5, r3, r5
   38558:	9b01      	ldr	r3, [sp, #4]
   3855a:	106d      	asrs	r5, r5, #1
   3855c:	3301      	adds	r3, #1
   3855e:	181b      	adds	r3, r3, r0
   38560:	42ab      	cmp	r3, r5
   38562:	d900      	bls.n	38566 <__ssputs_r+0x3e>
   38564:	001d      	movs	r5, r3
   38566:	0553      	lsls	r3, r2, #21
   38568:	d532      	bpl.n	385d0 <__ssputs_r+0xa8>
   3856a:	0029      	movs	r1, r5
   3856c:	0038      	movs	r0, r7
   3856e:	f7ff fa3f 	bl	379f0 <_malloc_r>
   38572:	1e06      	subs	r6, r0, #0
   38574:	d109      	bne.n	3858a <__ssputs_r+0x62>
   38576:	230c      	movs	r3, #12
   38578:	603b      	str	r3, [r7, #0]
   3857a:	2340      	movs	r3, #64	; 0x40
   3857c:	2001      	movs	r0, #1
   3857e:	89a2      	ldrh	r2, [r4, #12]
   38580:	4240      	negs	r0, r0
   38582:	4313      	orrs	r3, r2
   38584:	81a3      	strh	r3, [r4, #12]
   38586:	b005      	add	sp, #20
   38588:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3858a:	9a02      	ldr	r2, [sp, #8]
   3858c:	6921      	ldr	r1, [r4, #16]
   3858e:	f7ff f9c1 	bl	37914 <memcpy>
   38592:	89a3      	ldrh	r3, [r4, #12]
   38594:	4a14      	ldr	r2, [pc, #80]	; (385e8 <__ssputs_r+0xc0>)
   38596:	401a      	ands	r2, r3
   38598:	2380      	movs	r3, #128	; 0x80
   3859a:	4313      	orrs	r3, r2
   3859c:	81a3      	strh	r3, [r4, #12]
   3859e:	9b02      	ldr	r3, [sp, #8]
   385a0:	6126      	str	r6, [r4, #16]
   385a2:	18f6      	adds	r6, r6, r3
   385a4:	6026      	str	r6, [r4, #0]
   385a6:	6165      	str	r5, [r4, #20]
   385a8:	9e01      	ldr	r6, [sp, #4]
   385aa:	1aed      	subs	r5, r5, r3
   385ac:	60a5      	str	r5, [r4, #8]
   385ae:	9b01      	ldr	r3, [sp, #4]
   385b0:	42b3      	cmp	r3, r6
   385b2:	d200      	bcs.n	385b6 <__ssputs_r+0x8e>
   385b4:	001e      	movs	r6, r3
   385b6:	0032      	movs	r2, r6
   385b8:	9903      	ldr	r1, [sp, #12]
   385ba:	6820      	ldr	r0, [r4, #0]
   385bc:	f7ff f9b3 	bl	37926 <memmove>
   385c0:	68a3      	ldr	r3, [r4, #8]
   385c2:	2000      	movs	r0, #0
   385c4:	1b9b      	subs	r3, r3, r6
   385c6:	60a3      	str	r3, [r4, #8]
   385c8:	6823      	ldr	r3, [r4, #0]
   385ca:	199e      	adds	r6, r3, r6
   385cc:	6026      	str	r6, [r4, #0]
   385ce:	e7da      	b.n	38586 <__ssputs_r+0x5e>
   385d0:	002a      	movs	r2, r5
   385d2:	0038      	movs	r0, r7
   385d4:	f000 fb65 	bl	38ca2 <_realloc_r>
   385d8:	1e06      	subs	r6, r0, #0
   385da:	d1e0      	bne.n	3859e <__ssputs_r+0x76>
   385dc:	6921      	ldr	r1, [r4, #16]
   385de:	0038      	movs	r0, r7
   385e0:	f7ff f9bc 	bl	3795c <_free_r>
   385e4:	e7c7      	b.n	38576 <__ssputs_r+0x4e>
   385e6:	46c0      	nop			; (mov r8, r8)
   385e8:	fffffb7f 	.word	0xfffffb7f

000385ec <_svfiprintf_r>:
   385ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   385ee:	b09f      	sub	sp, #124	; 0x7c
   385f0:	9002      	str	r0, [sp, #8]
   385f2:	9305      	str	r3, [sp, #20]
   385f4:	898b      	ldrh	r3, [r1, #12]
   385f6:	000f      	movs	r7, r1
   385f8:	0016      	movs	r6, r2
   385fa:	061b      	lsls	r3, r3, #24
   385fc:	d511      	bpl.n	38622 <_svfiprintf_r+0x36>
   385fe:	690b      	ldr	r3, [r1, #16]
   38600:	2b00      	cmp	r3, #0
   38602:	d10e      	bne.n	38622 <_svfiprintf_r+0x36>
   38604:	2140      	movs	r1, #64	; 0x40
   38606:	f7ff f9f3 	bl	379f0 <_malloc_r>
   3860a:	6038      	str	r0, [r7, #0]
   3860c:	6138      	str	r0, [r7, #16]
   3860e:	2800      	cmp	r0, #0
   38610:	d105      	bne.n	3861e <_svfiprintf_r+0x32>
   38612:	230c      	movs	r3, #12
   38614:	9a02      	ldr	r2, [sp, #8]
   38616:	3801      	subs	r0, #1
   38618:	6013      	str	r3, [r2, #0]
   3861a:	b01f      	add	sp, #124	; 0x7c
   3861c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3861e:	2340      	movs	r3, #64	; 0x40
   38620:	617b      	str	r3, [r7, #20]
   38622:	2300      	movs	r3, #0
   38624:	ad06      	add	r5, sp, #24
   38626:	616b      	str	r3, [r5, #20]
   38628:	3320      	adds	r3, #32
   3862a:	766b      	strb	r3, [r5, #25]
   3862c:	3310      	adds	r3, #16
   3862e:	76ab      	strb	r3, [r5, #26]
   38630:	0034      	movs	r4, r6
   38632:	7823      	ldrb	r3, [r4, #0]
   38634:	2b00      	cmp	r3, #0
   38636:	d147      	bne.n	386c8 <_svfiprintf_r+0xdc>
   38638:	1ba3      	subs	r3, r4, r6
   3863a:	9304      	str	r3, [sp, #16]
   3863c:	d00d      	beq.n	3865a <_svfiprintf_r+0x6e>
   3863e:	1ba3      	subs	r3, r4, r6
   38640:	0032      	movs	r2, r6
   38642:	0039      	movs	r1, r7
   38644:	9802      	ldr	r0, [sp, #8]
   38646:	f7ff ff6f 	bl	38528 <__ssputs_r>
   3864a:	1c43      	adds	r3, r0, #1
   3864c:	d100      	bne.n	38650 <_svfiprintf_r+0x64>
   3864e:	e0b5      	b.n	387bc <_svfiprintf_r+0x1d0>
   38650:	696a      	ldr	r2, [r5, #20]
   38652:	9b04      	ldr	r3, [sp, #16]
   38654:	4694      	mov	ip, r2
   38656:	4463      	add	r3, ip
   38658:	616b      	str	r3, [r5, #20]
   3865a:	7823      	ldrb	r3, [r4, #0]
   3865c:	2b00      	cmp	r3, #0
   3865e:	d100      	bne.n	38662 <_svfiprintf_r+0x76>
   38660:	e0ac      	b.n	387bc <_svfiprintf_r+0x1d0>
   38662:	2201      	movs	r2, #1
   38664:	2300      	movs	r3, #0
   38666:	4252      	negs	r2, r2
   38668:	606a      	str	r2, [r5, #4]
   3866a:	a902      	add	r1, sp, #8
   3866c:	3254      	adds	r2, #84	; 0x54
   3866e:	1852      	adds	r2, r2, r1
   38670:	3401      	adds	r4, #1
   38672:	602b      	str	r3, [r5, #0]
   38674:	60eb      	str	r3, [r5, #12]
   38676:	60ab      	str	r3, [r5, #8]
   38678:	7013      	strb	r3, [r2, #0]
   3867a:	65ab      	str	r3, [r5, #88]	; 0x58
   3867c:	4e58      	ldr	r6, [pc, #352]	; (387e0 <_svfiprintf_r+0x1f4>)
   3867e:	2205      	movs	r2, #5
   38680:	7821      	ldrb	r1, [r4, #0]
   38682:	0030      	movs	r0, r6
   38684:	f000 fb02 	bl	38c8c <memchr>
   38688:	1c62      	adds	r2, r4, #1
   3868a:	2800      	cmp	r0, #0
   3868c:	d120      	bne.n	386d0 <_svfiprintf_r+0xe4>
   3868e:	6829      	ldr	r1, [r5, #0]
   38690:	06cb      	lsls	r3, r1, #27
   38692:	d504      	bpl.n	3869e <_svfiprintf_r+0xb2>
   38694:	2353      	movs	r3, #83	; 0x53
   38696:	ae02      	add	r6, sp, #8
   38698:	3020      	adds	r0, #32
   3869a:	199b      	adds	r3, r3, r6
   3869c:	7018      	strb	r0, [r3, #0]
   3869e:	070b      	lsls	r3, r1, #28
   386a0:	d504      	bpl.n	386ac <_svfiprintf_r+0xc0>
   386a2:	2353      	movs	r3, #83	; 0x53
   386a4:	202b      	movs	r0, #43	; 0x2b
   386a6:	ae02      	add	r6, sp, #8
   386a8:	199b      	adds	r3, r3, r6
   386aa:	7018      	strb	r0, [r3, #0]
   386ac:	7823      	ldrb	r3, [r4, #0]
   386ae:	2b2a      	cmp	r3, #42	; 0x2a
   386b0:	d016      	beq.n	386e0 <_svfiprintf_r+0xf4>
   386b2:	2000      	movs	r0, #0
   386b4:	210a      	movs	r1, #10
   386b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   386b8:	7822      	ldrb	r2, [r4, #0]
   386ba:	3a30      	subs	r2, #48	; 0x30
   386bc:	2a09      	cmp	r2, #9
   386be:	d955      	bls.n	3876c <_svfiprintf_r+0x180>
   386c0:	2800      	cmp	r0, #0
   386c2:	d015      	beq.n	386f0 <_svfiprintf_r+0x104>
   386c4:	9309      	str	r3, [sp, #36]	; 0x24
   386c6:	e013      	b.n	386f0 <_svfiprintf_r+0x104>
   386c8:	2b25      	cmp	r3, #37	; 0x25
   386ca:	d0b5      	beq.n	38638 <_svfiprintf_r+0x4c>
   386cc:	3401      	adds	r4, #1
   386ce:	e7b0      	b.n	38632 <_svfiprintf_r+0x46>
   386d0:	2301      	movs	r3, #1
   386d2:	1b80      	subs	r0, r0, r6
   386d4:	4083      	lsls	r3, r0
   386d6:	6829      	ldr	r1, [r5, #0]
   386d8:	0014      	movs	r4, r2
   386da:	430b      	orrs	r3, r1
   386dc:	602b      	str	r3, [r5, #0]
   386de:	e7cd      	b.n	3867c <_svfiprintf_r+0x90>
   386e0:	9b05      	ldr	r3, [sp, #20]
   386e2:	1d18      	adds	r0, r3, #4
   386e4:	681b      	ldr	r3, [r3, #0]
   386e6:	9005      	str	r0, [sp, #20]
   386e8:	2b00      	cmp	r3, #0
   386ea:	db39      	blt.n	38760 <_svfiprintf_r+0x174>
   386ec:	9309      	str	r3, [sp, #36]	; 0x24
   386ee:	0014      	movs	r4, r2
   386f0:	7823      	ldrb	r3, [r4, #0]
   386f2:	2b2e      	cmp	r3, #46	; 0x2e
   386f4:	d10b      	bne.n	3870e <_svfiprintf_r+0x122>
   386f6:	7863      	ldrb	r3, [r4, #1]
   386f8:	1c62      	adds	r2, r4, #1
   386fa:	2b2a      	cmp	r3, #42	; 0x2a
   386fc:	d13e      	bne.n	3877c <_svfiprintf_r+0x190>
   386fe:	9b05      	ldr	r3, [sp, #20]
   38700:	3402      	adds	r4, #2
   38702:	1d1a      	adds	r2, r3, #4
   38704:	681b      	ldr	r3, [r3, #0]
   38706:	9205      	str	r2, [sp, #20]
   38708:	2b00      	cmp	r3, #0
   3870a:	db34      	blt.n	38776 <_svfiprintf_r+0x18a>
   3870c:	9307      	str	r3, [sp, #28]
   3870e:	4e35      	ldr	r6, [pc, #212]	; (387e4 <_svfiprintf_r+0x1f8>)
   38710:	7821      	ldrb	r1, [r4, #0]
   38712:	2203      	movs	r2, #3
   38714:	0030      	movs	r0, r6
   38716:	f000 fab9 	bl	38c8c <memchr>
   3871a:	2800      	cmp	r0, #0
   3871c:	d006      	beq.n	3872c <_svfiprintf_r+0x140>
   3871e:	2340      	movs	r3, #64	; 0x40
   38720:	1b80      	subs	r0, r0, r6
   38722:	4083      	lsls	r3, r0
   38724:	682a      	ldr	r2, [r5, #0]
   38726:	3401      	adds	r4, #1
   38728:	4313      	orrs	r3, r2
   3872a:	602b      	str	r3, [r5, #0]
   3872c:	7821      	ldrb	r1, [r4, #0]
   3872e:	2206      	movs	r2, #6
   38730:	482d      	ldr	r0, [pc, #180]	; (387e8 <_svfiprintf_r+0x1fc>)
   38732:	1c66      	adds	r6, r4, #1
   38734:	7629      	strb	r1, [r5, #24]
   38736:	f000 faa9 	bl	38c8c <memchr>
   3873a:	2800      	cmp	r0, #0
   3873c:	d046      	beq.n	387cc <_svfiprintf_r+0x1e0>
   3873e:	4b2b      	ldr	r3, [pc, #172]	; (387ec <_svfiprintf_r+0x200>)
   38740:	2b00      	cmp	r3, #0
   38742:	d12f      	bne.n	387a4 <_svfiprintf_r+0x1b8>
   38744:	6829      	ldr	r1, [r5, #0]
   38746:	9b05      	ldr	r3, [sp, #20]
   38748:	2207      	movs	r2, #7
   3874a:	05c9      	lsls	r1, r1, #23
   3874c:	d528      	bpl.n	387a0 <_svfiprintf_r+0x1b4>
   3874e:	189b      	adds	r3, r3, r2
   38750:	4393      	bics	r3, r2
   38752:	3308      	adds	r3, #8
   38754:	9305      	str	r3, [sp, #20]
   38756:	696b      	ldr	r3, [r5, #20]
   38758:	9a03      	ldr	r2, [sp, #12]
   3875a:	189b      	adds	r3, r3, r2
   3875c:	616b      	str	r3, [r5, #20]
   3875e:	e767      	b.n	38630 <_svfiprintf_r+0x44>
   38760:	425b      	negs	r3, r3
   38762:	60eb      	str	r3, [r5, #12]
   38764:	2302      	movs	r3, #2
   38766:	430b      	orrs	r3, r1
   38768:	602b      	str	r3, [r5, #0]
   3876a:	e7c0      	b.n	386ee <_svfiprintf_r+0x102>
   3876c:	434b      	muls	r3, r1
   3876e:	3401      	adds	r4, #1
   38770:	189b      	adds	r3, r3, r2
   38772:	2001      	movs	r0, #1
   38774:	e7a0      	b.n	386b8 <_svfiprintf_r+0xcc>
   38776:	2301      	movs	r3, #1
   38778:	425b      	negs	r3, r3
   3877a:	e7c7      	b.n	3870c <_svfiprintf_r+0x120>
   3877c:	2300      	movs	r3, #0
   3877e:	0014      	movs	r4, r2
   38780:	200a      	movs	r0, #10
   38782:	001a      	movs	r2, r3
   38784:	606b      	str	r3, [r5, #4]
   38786:	7821      	ldrb	r1, [r4, #0]
   38788:	3930      	subs	r1, #48	; 0x30
   3878a:	2909      	cmp	r1, #9
   3878c:	d903      	bls.n	38796 <_svfiprintf_r+0x1aa>
   3878e:	2b00      	cmp	r3, #0
   38790:	d0bd      	beq.n	3870e <_svfiprintf_r+0x122>
   38792:	9207      	str	r2, [sp, #28]
   38794:	e7bb      	b.n	3870e <_svfiprintf_r+0x122>
   38796:	4342      	muls	r2, r0
   38798:	3401      	adds	r4, #1
   3879a:	1852      	adds	r2, r2, r1
   3879c:	2301      	movs	r3, #1
   3879e:	e7f2      	b.n	38786 <_svfiprintf_r+0x19a>
   387a0:	3307      	adds	r3, #7
   387a2:	e7d5      	b.n	38750 <_svfiprintf_r+0x164>
   387a4:	ab05      	add	r3, sp, #20
   387a6:	9300      	str	r3, [sp, #0]
   387a8:	003a      	movs	r2, r7
   387aa:	4b11      	ldr	r3, [pc, #68]	; (387f0 <_svfiprintf_r+0x204>)
   387ac:	0029      	movs	r1, r5
   387ae:	9802      	ldr	r0, [sp, #8]
   387b0:	e000      	b.n	387b4 <_svfiprintf_r+0x1c8>
   387b2:	bf00      	nop
   387b4:	9003      	str	r0, [sp, #12]
   387b6:	9b03      	ldr	r3, [sp, #12]
   387b8:	3301      	adds	r3, #1
   387ba:	d1cc      	bne.n	38756 <_svfiprintf_r+0x16a>
   387bc:	89bb      	ldrh	r3, [r7, #12]
   387be:	980b      	ldr	r0, [sp, #44]	; 0x2c
   387c0:	065b      	lsls	r3, r3, #25
   387c2:	d400      	bmi.n	387c6 <_svfiprintf_r+0x1da>
   387c4:	e729      	b.n	3861a <_svfiprintf_r+0x2e>
   387c6:	2001      	movs	r0, #1
   387c8:	4240      	negs	r0, r0
   387ca:	e726      	b.n	3861a <_svfiprintf_r+0x2e>
   387cc:	ab05      	add	r3, sp, #20
   387ce:	9300      	str	r3, [sp, #0]
   387d0:	003a      	movs	r2, r7
   387d2:	4b07      	ldr	r3, [pc, #28]	; (387f0 <_svfiprintf_r+0x204>)
   387d4:	0029      	movs	r1, r5
   387d6:	9802      	ldr	r0, [sp, #8]
   387d8:	f000 f87a 	bl	388d0 <_printf_i>
   387dc:	e7ea      	b.n	387b4 <_svfiprintf_r+0x1c8>
   387de:	46c0      	nop			; (mov r8, r8)
   387e0:	0003d502 	.word	0x0003d502
   387e4:	0003d508 	.word	0x0003d508
   387e8:	0003d50c 	.word	0x0003d50c
   387ec:	00000000 	.word	0x00000000
   387f0:	00038529 	.word	0x00038529

000387f4 <_printf_common>:
   387f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   387f6:	0015      	movs	r5, r2
   387f8:	9301      	str	r3, [sp, #4]
   387fa:	688a      	ldr	r2, [r1, #8]
   387fc:	690b      	ldr	r3, [r1, #16]
   387fe:	9000      	str	r0, [sp, #0]
   38800:	000c      	movs	r4, r1
   38802:	4293      	cmp	r3, r2
   38804:	da00      	bge.n	38808 <_printf_common+0x14>
   38806:	0013      	movs	r3, r2
   38808:	0022      	movs	r2, r4
   3880a:	602b      	str	r3, [r5, #0]
   3880c:	3243      	adds	r2, #67	; 0x43
   3880e:	7812      	ldrb	r2, [r2, #0]
   38810:	2a00      	cmp	r2, #0
   38812:	d001      	beq.n	38818 <_printf_common+0x24>
   38814:	3301      	adds	r3, #1
   38816:	602b      	str	r3, [r5, #0]
   38818:	6823      	ldr	r3, [r4, #0]
   3881a:	069b      	lsls	r3, r3, #26
   3881c:	d502      	bpl.n	38824 <_printf_common+0x30>
   3881e:	682b      	ldr	r3, [r5, #0]
   38820:	3302      	adds	r3, #2
   38822:	602b      	str	r3, [r5, #0]
   38824:	2706      	movs	r7, #6
   38826:	6823      	ldr	r3, [r4, #0]
   38828:	401f      	ands	r7, r3
   3882a:	d027      	beq.n	3887c <_printf_common+0x88>
   3882c:	0023      	movs	r3, r4
   3882e:	3343      	adds	r3, #67	; 0x43
   38830:	781b      	ldrb	r3, [r3, #0]
   38832:	1e5a      	subs	r2, r3, #1
   38834:	4193      	sbcs	r3, r2
   38836:	6822      	ldr	r2, [r4, #0]
   38838:	0692      	lsls	r2, r2, #26
   3883a:	d430      	bmi.n	3889e <_printf_common+0xaa>
   3883c:	0022      	movs	r2, r4
   3883e:	9901      	ldr	r1, [sp, #4]
   38840:	3243      	adds	r2, #67	; 0x43
   38842:	9800      	ldr	r0, [sp, #0]
   38844:	9e08      	ldr	r6, [sp, #32]
   38846:	47b0      	blx	r6
   38848:	1c43      	adds	r3, r0, #1
   3884a:	d025      	beq.n	38898 <_printf_common+0xa4>
   3884c:	2306      	movs	r3, #6
   3884e:	6820      	ldr	r0, [r4, #0]
   38850:	682a      	ldr	r2, [r5, #0]
   38852:	68e1      	ldr	r1, [r4, #12]
   38854:	4003      	ands	r3, r0
   38856:	2500      	movs	r5, #0
   38858:	2b04      	cmp	r3, #4
   3885a:	d103      	bne.n	38864 <_printf_common+0x70>
   3885c:	1a8d      	subs	r5, r1, r2
   3885e:	43eb      	mvns	r3, r5
   38860:	17db      	asrs	r3, r3, #31
   38862:	401d      	ands	r5, r3
   38864:	68a3      	ldr	r3, [r4, #8]
   38866:	6922      	ldr	r2, [r4, #16]
   38868:	4293      	cmp	r3, r2
   3886a:	dd01      	ble.n	38870 <_printf_common+0x7c>
   3886c:	1a9b      	subs	r3, r3, r2
   3886e:	18ed      	adds	r5, r5, r3
   38870:	2700      	movs	r7, #0
   38872:	42bd      	cmp	r5, r7
   38874:	d120      	bne.n	388b8 <_printf_common+0xc4>
   38876:	2000      	movs	r0, #0
   38878:	e010      	b.n	3889c <_printf_common+0xa8>
   3887a:	3701      	adds	r7, #1
   3887c:	68e3      	ldr	r3, [r4, #12]
   3887e:	682a      	ldr	r2, [r5, #0]
   38880:	1a9b      	subs	r3, r3, r2
   38882:	429f      	cmp	r7, r3
   38884:	dad2      	bge.n	3882c <_printf_common+0x38>
   38886:	0022      	movs	r2, r4
   38888:	2301      	movs	r3, #1
   3888a:	3219      	adds	r2, #25
   3888c:	9901      	ldr	r1, [sp, #4]
   3888e:	9800      	ldr	r0, [sp, #0]
   38890:	9e08      	ldr	r6, [sp, #32]
   38892:	47b0      	blx	r6
   38894:	1c43      	adds	r3, r0, #1
   38896:	d1f0      	bne.n	3887a <_printf_common+0x86>
   38898:	2001      	movs	r0, #1
   3889a:	4240      	negs	r0, r0
   3889c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   3889e:	2030      	movs	r0, #48	; 0x30
   388a0:	18e1      	adds	r1, r4, r3
   388a2:	3143      	adds	r1, #67	; 0x43
   388a4:	7008      	strb	r0, [r1, #0]
   388a6:	0021      	movs	r1, r4
   388a8:	1c5a      	adds	r2, r3, #1
   388aa:	3145      	adds	r1, #69	; 0x45
   388ac:	7809      	ldrb	r1, [r1, #0]
   388ae:	18a2      	adds	r2, r4, r2
   388b0:	3243      	adds	r2, #67	; 0x43
   388b2:	3302      	adds	r3, #2
   388b4:	7011      	strb	r1, [r2, #0]
   388b6:	e7c1      	b.n	3883c <_printf_common+0x48>
   388b8:	0022      	movs	r2, r4
   388ba:	2301      	movs	r3, #1
   388bc:	321a      	adds	r2, #26
   388be:	9901      	ldr	r1, [sp, #4]
   388c0:	9800      	ldr	r0, [sp, #0]
   388c2:	9e08      	ldr	r6, [sp, #32]
   388c4:	47b0      	blx	r6
   388c6:	1c43      	adds	r3, r0, #1
   388c8:	d0e6      	beq.n	38898 <_printf_common+0xa4>
   388ca:	3701      	adds	r7, #1
   388cc:	e7d1      	b.n	38872 <_printf_common+0x7e>
	...

000388d0 <_printf_i>:
   388d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   388d2:	b08b      	sub	sp, #44	; 0x2c
   388d4:	9206      	str	r2, [sp, #24]
   388d6:	000a      	movs	r2, r1
   388d8:	3243      	adds	r2, #67	; 0x43
   388da:	9307      	str	r3, [sp, #28]
   388dc:	9005      	str	r0, [sp, #20]
   388de:	9204      	str	r2, [sp, #16]
   388e0:	7e0a      	ldrb	r2, [r1, #24]
   388e2:	000c      	movs	r4, r1
   388e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   388e6:	2a6e      	cmp	r2, #110	; 0x6e
   388e8:	d100      	bne.n	388ec <_printf_i+0x1c>
   388ea:	e08f      	b.n	38a0c <_printf_i+0x13c>
   388ec:	d817      	bhi.n	3891e <_printf_i+0x4e>
   388ee:	2a63      	cmp	r2, #99	; 0x63
   388f0:	d02c      	beq.n	3894c <_printf_i+0x7c>
   388f2:	d808      	bhi.n	38906 <_printf_i+0x36>
   388f4:	2a00      	cmp	r2, #0
   388f6:	d100      	bne.n	388fa <_printf_i+0x2a>
   388f8:	e099      	b.n	38a2e <_printf_i+0x15e>
   388fa:	2a58      	cmp	r2, #88	; 0x58
   388fc:	d054      	beq.n	389a8 <_printf_i+0xd8>
   388fe:	0026      	movs	r6, r4
   38900:	3642      	adds	r6, #66	; 0x42
   38902:	7032      	strb	r2, [r6, #0]
   38904:	e029      	b.n	3895a <_printf_i+0x8a>
   38906:	2a64      	cmp	r2, #100	; 0x64
   38908:	d001      	beq.n	3890e <_printf_i+0x3e>
   3890a:	2a69      	cmp	r2, #105	; 0x69
   3890c:	d1f7      	bne.n	388fe <_printf_i+0x2e>
   3890e:	6821      	ldr	r1, [r4, #0]
   38910:	681a      	ldr	r2, [r3, #0]
   38912:	0608      	lsls	r0, r1, #24
   38914:	d523      	bpl.n	3895e <_printf_i+0x8e>
   38916:	1d11      	adds	r1, r2, #4
   38918:	6019      	str	r1, [r3, #0]
   3891a:	6815      	ldr	r5, [r2, #0]
   3891c:	e025      	b.n	3896a <_printf_i+0x9a>
   3891e:	2a73      	cmp	r2, #115	; 0x73
   38920:	d100      	bne.n	38924 <_printf_i+0x54>
   38922:	e088      	b.n	38a36 <_printf_i+0x166>
   38924:	d808      	bhi.n	38938 <_printf_i+0x68>
   38926:	2a6f      	cmp	r2, #111	; 0x6f
   38928:	d029      	beq.n	3897e <_printf_i+0xae>
   3892a:	2a70      	cmp	r2, #112	; 0x70
   3892c:	d1e7      	bne.n	388fe <_printf_i+0x2e>
   3892e:	2220      	movs	r2, #32
   38930:	6809      	ldr	r1, [r1, #0]
   38932:	430a      	orrs	r2, r1
   38934:	6022      	str	r2, [r4, #0]
   38936:	e003      	b.n	38940 <_printf_i+0x70>
   38938:	2a75      	cmp	r2, #117	; 0x75
   3893a:	d020      	beq.n	3897e <_printf_i+0xae>
   3893c:	2a78      	cmp	r2, #120	; 0x78
   3893e:	d1de      	bne.n	388fe <_printf_i+0x2e>
   38940:	0022      	movs	r2, r4
   38942:	2178      	movs	r1, #120	; 0x78
   38944:	3245      	adds	r2, #69	; 0x45
   38946:	7011      	strb	r1, [r2, #0]
   38948:	4a6c      	ldr	r2, [pc, #432]	; (38afc <_printf_i+0x22c>)
   3894a:	e030      	b.n	389ae <_printf_i+0xde>
   3894c:	000e      	movs	r6, r1
   3894e:	681a      	ldr	r2, [r3, #0]
   38950:	3642      	adds	r6, #66	; 0x42
   38952:	1d11      	adds	r1, r2, #4
   38954:	6019      	str	r1, [r3, #0]
   38956:	6813      	ldr	r3, [r2, #0]
   38958:	7033      	strb	r3, [r6, #0]
   3895a:	2301      	movs	r3, #1
   3895c:	e079      	b.n	38a52 <_printf_i+0x182>
   3895e:	0649      	lsls	r1, r1, #25
   38960:	d5d9      	bpl.n	38916 <_printf_i+0x46>
   38962:	1d11      	adds	r1, r2, #4
   38964:	6019      	str	r1, [r3, #0]
   38966:	2300      	movs	r3, #0
   38968:	5ed5      	ldrsh	r5, [r2, r3]
   3896a:	2d00      	cmp	r5, #0
   3896c:	da03      	bge.n	38976 <_printf_i+0xa6>
   3896e:	232d      	movs	r3, #45	; 0x2d
   38970:	9a04      	ldr	r2, [sp, #16]
   38972:	426d      	negs	r5, r5
   38974:	7013      	strb	r3, [r2, #0]
   38976:	4b62      	ldr	r3, [pc, #392]	; (38b00 <_printf_i+0x230>)
   38978:	270a      	movs	r7, #10
   3897a:	9303      	str	r3, [sp, #12]
   3897c:	e02f      	b.n	389de <_printf_i+0x10e>
   3897e:	6820      	ldr	r0, [r4, #0]
   38980:	6819      	ldr	r1, [r3, #0]
   38982:	0605      	lsls	r5, r0, #24
   38984:	d503      	bpl.n	3898e <_printf_i+0xbe>
   38986:	1d08      	adds	r0, r1, #4
   38988:	6018      	str	r0, [r3, #0]
   3898a:	680d      	ldr	r5, [r1, #0]
   3898c:	e005      	b.n	3899a <_printf_i+0xca>
   3898e:	0640      	lsls	r0, r0, #25
   38990:	d5f9      	bpl.n	38986 <_printf_i+0xb6>
   38992:	680d      	ldr	r5, [r1, #0]
   38994:	1d08      	adds	r0, r1, #4
   38996:	6018      	str	r0, [r3, #0]
   38998:	b2ad      	uxth	r5, r5
   3899a:	4b59      	ldr	r3, [pc, #356]	; (38b00 <_printf_i+0x230>)
   3899c:	2708      	movs	r7, #8
   3899e:	9303      	str	r3, [sp, #12]
   389a0:	2a6f      	cmp	r2, #111	; 0x6f
   389a2:	d018      	beq.n	389d6 <_printf_i+0x106>
   389a4:	270a      	movs	r7, #10
   389a6:	e016      	b.n	389d6 <_printf_i+0x106>
   389a8:	3145      	adds	r1, #69	; 0x45
   389aa:	700a      	strb	r2, [r1, #0]
   389ac:	4a54      	ldr	r2, [pc, #336]	; (38b00 <_printf_i+0x230>)
   389ae:	9203      	str	r2, [sp, #12]
   389b0:	681a      	ldr	r2, [r3, #0]
   389b2:	6821      	ldr	r1, [r4, #0]
   389b4:	1d10      	adds	r0, r2, #4
   389b6:	6018      	str	r0, [r3, #0]
   389b8:	6815      	ldr	r5, [r2, #0]
   389ba:	0608      	lsls	r0, r1, #24
   389bc:	d522      	bpl.n	38a04 <_printf_i+0x134>
   389be:	07cb      	lsls	r3, r1, #31
   389c0:	d502      	bpl.n	389c8 <_printf_i+0xf8>
   389c2:	2320      	movs	r3, #32
   389c4:	4319      	orrs	r1, r3
   389c6:	6021      	str	r1, [r4, #0]
   389c8:	2710      	movs	r7, #16
   389ca:	2d00      	cmp	r5, #0
   389cc:	d103      	bne.n	389d6 <_printf_i+0x106>
   389ce:	2320      	movs	r3, #32
   389d0:	6822      	ldr	r2, [r4, #0]
   389d2:	439a      	bics	r2, r3
   389d4:	6022      	str	r2, [r4, #0]
   389d6:	0023      	movs	r3, r4
   389d8:	2200      	movs	r2, #0
   389da:	3343      	adds	r3, #67	; 0x43
   389dc:	701a      	strb	r2, [r3, #0]
   389de:	6863      	ldr	r3, [r4, #4]
   389e0:	60a3      	str	r3, [r4, #8]
   389e2:	2b00      	cmp	r3, #0
   389e4:	db5c      	blt.n	38aa0 <_printf_i+0x1d0>
   389e6:	2204      	movs	r2, #4
   389e8:	6821      	ldr	r1, [r4, #0]
   389ea:	4391      	bics	r1, r2
   389ec:	6021      	str	r1, [r4, #0]
   389ee:	2d00      	cmp	r5, #0
   389f0:	d158      	bne.n	38aa4 <_printf_i+0x1d4>
   389f2:	9e04      	ldr	r6, [sp, #16]
   389f4:	2b00      	cmp	r3, #0
   389f6:	d064      	beq.n	38ac2 <_printf_i+0x1f2>
   389f8:	0026      	movs	r6, r4
   389fa:	9b03      	ldr	r3, [sp, #12]
   389fc:	3642      	adds	r6, #66	; 0x42
   389fe:	781b      	ldrb	r3, [r3, #0]
   38a00:	7033      	strb	r3, [r6, #0]
   38a02:	e05e      	b.n	38ac2 <_printf_i+0x1f2>
   38a04:	0648      	lsls	r0, r1, #25
   38a06:	d5da      	bpl.n	389be <_printf_i+0xee>
   38a08:	b2ad      	uxth	r5, r5
   38a0a:	e7d8      	b.n	389be <_printf_i+0xee>
   38a0c:	6809      	ldr	r1, [r1, #0]
   38a0e:	681a      	ldr	r2, [r3, #0]
   38a10:	0608      	lsls	r0, r1, #24
   38a12:	d505      	bpl.n	38a20 <_printf_i+0x150>
   38a14:	1d11      	adds	r1, r2, #4
   38a16:	6019      	str	r1, [r3, #0]
   38a18:	6813      	ldr	r3, [r2, #0]
   38a1a:	6962      	ldr	r2, [r4, #20]
   38a1c:	601a      	str	r2, [r3, #0]
   38a1e:	e006      	b.n	38a2e <_printf_i+0x15e>
   38a20:	0649      	lsls	r1, r1, #25
   38a22:	d5f7      	bpl.n	38a14 <_printf_i+0x144>
   38a24:	1d11      	adds	r1, r2, #4
   38a26:	6019      	str	r1, [r3, #0]
   38a28:	6813      	ldr	r3, [r2, #0]
   38a2a:	8aa2      	ldrh	r2, [r4, #20]
   38a2c:	801a      	strh	r2, [r3, #0]
   38a2e:	2300      	movs	r3, #0
   38a30:	9e04      	ldr	r6, [sp, #16]
   38a32:	6123      	str	r3, [r4, #16]
   38a34:	e054      	b.n	38ae0 <_printf_i+0x210>
   38a36:	681a      	ldr	r2, [r3, #0]
   38a38:	1d11      	adds	r1, r2, #4
   38a3a:	6019      	str	r1, [r3, #0]
   38a3c:	6816      	ldr	r6, [r2, #0]
   38a3e:	2100      	movs	r1, #0
   38a40:	6862      	ldr	r2, [r4, #4]
   38a42:	0030      	movs	r0, r6
   38a44:	f000 f922 	bl	38c8c <memchr>
   38a48:	2800      	cmp	r0, #0
   38a4a:	d001      	beq.n	38a50 <_printf_i+0x180>
   38a4c:	1b80      	subs	r0, r0, r6
   38a4e:	6060      	str	r0, [r4, #4]
   38a50:	6863      	ldr	r3, [r4, #4]
   38a52:	6123      	str	r3, [r4, #16]
   38a54:	2300      	movs	r3, #0
   38a56:	9a04      	ldr	r2, [sp, #16]
   38a58:	7013      	strb	r3, [r2, #0]
   38a5a:	e041      	b.n	38ae0 <_printf_i+0x210>
   38a5c:	6923      	ldr	r3, [r4, #16]
   38a5e:	0032      	movs	r2, r6
   38a60:	9906      	ldr	r1, [sp, #24]
   38a62:	9805      	ldr	r0, [sp, #20]
   38a64:	9d07      	ldr	r5, [sp, #28]
   38a66:	47a8      	blx	r5
   38a68:	1c43      	adds	r3, r0, #1
   38a6a:	d043      	beq.n	38af4 <_printf_i+0x224>
   38a6c:	6823      	ldr	r3, [r4, #0]
   38a6e:	2500      	movs	r5, #0
   38a70:	079b      	lsls	r3, r3, #30
   38a72:	d40f      	bmi.n	38a94 <_printf_i+0x1c4>
   38a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
   38a76:	68e0      	ldr	r0, [r4, #12]
   38a78:	4298      	cmp	r0, r3
   38a7a:	da3d      	bge.n	38af8 <_printf_i+0x228>
   38a7c:	0018      	movs	r0, r3
   38a7e:	e03b      	b.n	38af8 <_printf_i+0x228>
   38a80:	0022      	movs	r2, r4
   38a82:	2301      	movs	r3, #1
   38a84:	3219      	adds	r2, #25
   38a86:	9906      	ldr	r1, [sp, #24]
   38a88:	9805      	ldr	r0, [sp, #20]
   38a8a:	9e07      	ldr	r6, [sp, #28]
   38a8c:	47b0      	blx	r6
   38a8e:	1c43      	adds	r3, r0, #1
   38a90:	d030      	beq.n	38af4 <_printf_i+0x224>
   38a92:	3501      	adds	r5, #1
   38a94:	68e3      	ldr	r3, [r4, #12]
   38a96:	9a09      	ldr	r2, [sp, #36]	; 0x24
   38a98:	1a9b      	subs	r3, r3, r2
   38a9a:	429d      	cmp	r5, r3
   38a9c:	dbf0      	blt.n	38a80 <_printf_i+0x1b0>
   38a9e:	e7e9      	b.n	38a74 <_printf_i+0x1a4>
   38aa0:	2d00      	cmp	r5, #0
   38aa2:	d0a9      	beq.n	389f8 <_printf_i+0x128>
   38aa4:	9e04      	ldr	r6, [sp, #16]
   38aa6:	0028      	movs	r0, r5
   38aa8:	0039      	movs	r1, r7
   38aaa:	f7fc fa39 	bl	34f20 <__aeabi_uidivmod>
   38aae:	9b03      	ldr	r3, [sp, #12]
   38ab0:	3e01      	subs	r6, #1
   38ab2:	5c5b      	ldrb	r3, [r3, r1]
   38ab4:	0028      	movs	r0, r5
   38ab6:	7033      	strb	r3, [r6, #0]
   38ab8:	0039      	movs	r1, r7
   38aba:	f7fc f9ab 	bl	34e14 <__udivsi3>
   38abe:	1e05      	subs	r5, r0, #0
   38ac0:	d1f1      	bne.n	38aa6 <_printf_i+0x1d6>
   38ac2:	2f08      	cmp	r7, #8
   38ac4:	d109      	bne.n	38ada <_printf_i+0x20a>
   38ac6:	6823      	ldr	r3, [r4, #0]
   38ac8:	07db      	lsls	r3, r3, #31
   38aca:	d506      	bpl.n	38ada <_printf_i+0x20a>
   38acc:	6863      	ldr	r3, [r4, #4]
   38ace:	6922      	ldr	r2, [r4, #16]
   38ad0:	4293      	cmp	r3, r2
   38ad2:	dc02      	bgt.n	38ada <_printf_i+0x20a>
   38ad4:	2330      	movs	r3, #48	; 0x30
   38ad6:	3e01      	subs	r6, #1
   38ad8:	7033      	strb	r3, [r6, #0]
   38ada:	9b04      	ldr	r3, [sp, #16]
   38adc:	1b9b      	subs	r3, r3, r6
   38ade:	6123      	str	r3, [r4, #16]
   38ae0:	9b07      	ldr	r3, [sp, #28]
   38ae2:	aa09      	add	r2, sp, #36	; 0x24
   38ae4:	9300      	str	r3, [sp, #0]
   38ae6:	0021      	movs	r1, r4
   38ae8:	9b06      	ldr	r3, [sp, #24]
   38aea:	9805      	ldr	r0, [sp, #20]
   38aec:	f7ff fe82 	bl	387f4 <_printf_common>
   38af0:	1c43      	adds	r3, r0, #1
   38af2:	d1b3      	bne.n	38a5c <_printf_i+0x18c>
   38af4:	2001      	movs	r0, #1
   38af6:	4240      	negs	r0, r0
   38af8:	b00b      	add	sp, #44	; 0x2c
   38afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   38afc:	0003d524 	.word	0x0003d524
   38b00:	0003d513 	.word	0x0003d513

00038b04 <__sread>:
   38b04:	b570      	push	{r4, r5, r6, lr}
   38b06:	000c      	movs	r4, r1
   38b08:	250e      	movs	r5, #14
   38b0a:	5f49      	ldrsh	r1, [r1, r5]
   38b0c:	f000 f8f0 	bl	38cf0 <_read_r>
   38b10:	2800      	cmp	r0, #0
   38b12:	db03      	blt.n	38b1c <__sread+0x18>
   38b14:	6d63      	ldr	r3, [r4, #84]	; 0x54
   38b16:	181b      	adds	r3, r3, r0
   38b18:	6563      	str	r3, [r4, #84]	; 0x54
   38b1a:	bd70      	pop	{r4, r5, r6, pc}
   38b1c:	89a3      	ldrh	r3, [r4, #12]
   38b1e:	4a02      	ldr	r2, [pc, #8]	; (38b28 <__sread+0x24>)
   38b20:	4013      	ands	r3, r2
   38b22:	81a3      	strh	r3, [r4, #12]
   38b24:	e7f9      	b.n	38b1a <__sread+0x16>
   38b26:	46c0      	nop			; (mov r8, r8)
   38b28:	ffffefff 	.word	0xffffefff

00038b2c <__swrite>:
   38b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38b2e:	001f      	movs	r7, r3
   38b30:	898b      	ldrh	r3, [r1, #12]
   38b32:	0005      	movs	r5, r0
   38b34:	000c      	movs	r4, r1
   38b36:	0016      	movs	r6, r2
   38b38:	05db      	lsls	r3, r3, #23
   38b3a:	d505      	bpl.n	38b48 <__swrite+0x1c>
   38b3c:	230e      	movs	r3, #14
   38b3e:	5ec9      	ldrsh	r1, [r1, r3]
   38b40:	2200      	movs	r2, #0
   38b42:	2302      	movs	r3, #2
   38b44:	f000 f88e 	bl	38c64 <_lseek_r>
   38b48:	89a3      	ldrh	r3, [r4, #12]
   38b4a:	4a05      	ldr	r2, [pc, #20]	; (38b60 <__swrite+0x34>)
   38b4c:	0028      	movs	r0, r5
   38b4e:	4013      	ands	r3, r2
   38b50:	81a3      	strh	r3, [r4, #12]
   38b52:	0032      	movs	r2, r6
   38b54:	230e      	movs	r3, #14
   38b56:	5ee1      	ldrsh	r1, [r4, r3]
   38b58:	003b      	movs	r3, r7
   38b5a:	f000 f839 	bl	38bd0 <_write_r>
   38b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38b60:	ffffefff 	.word	0xffffefff

00038b64 <__sseek>:
   38b64:	b570      	push	{r4, r5, r6, lr}
   38b66:	000c      	movs	r4, r1
   38b68:	250e      	movs	r5, #14
   38b6a:	5f49      	ldrsh	r1, [r1, r5]
   38b6c:	f000 f87a 	bl	38c64 <_lseek_r>
   38b70:	89a3      	ldrh	r3, [r4, #12]
   38b72:	1c42      	adds	r2, r0, #1
   38b74:	d103      	bne.n	38b7e <__sseek+0x1a>
   38b76:	4a05      	ldr	r2, [pc, #20]	; (38b8c <__sseek+0x28>)
   38b78:	4013      	ands	r3, r2
   38b7a:	81a3      	strh	r3, [r4, #12]
   38b7c:	bd70      	pop	{r4, r5, r6, pc}
   38b7e:	2280      	movs	r2, #128	; 0x80
   38b80:	0152      	lsls	r2, r2, #5
   38b82:	4313      	orrs	r3, r2
   38b84:	81a3      	strh	r3, [r4, #12]
   38b86:	6560      	str	r0, [r4, #84]	; 0x54
   38b88:	e7f8      	b.n	38b7c <__sseek+0x18>
   38b8a:	46c0      	nop			; (mov r8, r8)
   38b8c:	ffffefff 	.word	0xffffefff

00038b90 <__sclose>:
   38b90:	b510      	push	{r4, lr}
   38b92:	230e      	movs	r3, #14
   38b94:	5ec9      	ldrsh	r1, [r1, r3]
   38b96:	f000 f82f 	bl	38bf8 <_close_r>
   38b9a:	bd10      	pop	{r4, pc}

00038b9c <strchr>:
   38b9c:	b2c9      	uxtb	r1, r1
   38b9e:	7803      	ldrb	r3, [r0, #0]
   38ba0:	2b00      	cmp	r3, #0
   38ba2:	d004      	beq.n	38bae <strchr+0x12>
   38ba4:	4299      	cmp	r1, r3
   38ba6:	d100      	bne.n	38baa <strchr+0xe>
   38ba8:	4770      	bx	lr
   38baa:	3001      	adds	r0, #1
   38bac:	e7f7      	b.n	38b9e <strchr+0x2>
   38bae:	424b      	negs	r3, r1
   38bb0:	4159      	adcs	r1, r3
   38bb2:	4249      	negs	r1, r1
   38bb4:	4008      	ands	r0, r1
   38bb6:	e7f7      	b.n	38ba8 <strchr+0xc>

00038bb8 <__ascii_wctomb>:
   38bb8:	1e0b      	subs	r3, r1, #0
   38bba:	d004      	beq.n	38bc6 <__ascii_wctomb+0xe>
   38bbc:	2aff      	cmp	r2, #255	; 0xff
   38bbe:	d904      	bls.n	38bca <__ascii_wctomb+0x12>
   38bc0:	238a      	movs	r3, #138	; 0x8a
   38bc2:	6003      	str	r3, [r0, #0]
   38bc4:	3b8b      	subs	r3, #139	; 0x8b
   38bc6:	0018      	movs	r0, r3
   38bc8:	4770      	bx	lr
   38bca:	700a      	strb	r2, [r1, #0]
   38bcc:	2301      	movs	r3, #1
   38bce:	e7fa      	b.n	38bc6 <__ascii_wctomb+0xe>

00038bd0 <_write_r>:
   38bd0:	b570      	push	{r4, r5, r6, lr}
   38bd2:	0005      	movs	r5, r0
   38bd4:	0008      	movs	r0, r1
   38bd6:	0011      	movs	r1, r2
   38bd8:	2200      	movs	r2, #0
   38bda:	4c06      	ldr	r4, [pc, #24]	; (38bf4 <_write_r+0x24>)
   38bdc:	6022      	str	r2, [r4, #0]
   38bde:	001a      	movs	r2, r3
   38be0:	f7f4 fc9e 	bl	2d520 <_write>
   38be4:	1c43      	adds	r3, r0, #1
   38be6:	d103      	bne.n	38bf0 <_write_r+0x20>
   38be8:	6823      	ldr	r3, [r4, #0]
   38bea:	2b00      	cmp	r3, #0
   38bec:	d000      	beq.n	38bf0 <_write_r+0x20>
   38bee:	602b      	str	r3, [r5, #0]
   38bf0:	bd70      	pop	{r4, r5, r6, pc}
   38bf2:	46c0      	nop			; (mov r8, r8)
   38bf4:	20005b08 	.word	0x20005b08

00038bf8 <_close_r>:
   38bf8:	2300      	movs	r3, #0
   38bfa:	b570      	push	{r4, r5, r6, lr}
   38bfc:	4c06      	ldr	r4, [pc, #24]	; (38c18 <_close_r+0x20>)
   38bfe:	0005      	movs	r5, r0
   38c00:	0008      	movs	r0, r1
   38c02:	6023      	str	r3, [r4, #0]
   38c04:	f7f4 fce0 	bl	2d5c8 <_close>
   38c08:	1c43      	adds	r3, r0, #1
   38c0a:	d103      	bne.n	38c14 <_close_r+0x1c>
   38c0c:	6823      	ldr	r3, [r4, #0]
   38c0e:	2b00      	cmp	r3, #0
   38c10:	d000      	beq.n	38c14 <_close_r+0x1c>
   38c12:	602b      	str	r3, [r5, #0]
   38c14:	bd70      	pop	{r4, r5, r6, pc}
   38c16:	46c0      	nop			; (mov r8, r8)
   38c18:	20005b08 	.word	0x20005b08

00038c1c <_fstat_r>:
   38c1c:	2300      	movs	r3, #0
   38c1e:	b570      	push	{r4, r5, r6, lr}
   38c20:	4c06      	ldr	r4, [pc, #24]	; (38c3c <_fstat_r+0x20>)
   38c22:	0005      	movs	r5, r0
   38c24:	0008      	movs	r0, r1
   38c26:	0011      	movs	r1, r2
   38c28:	6023      	str	r3, [r4, #0]
   38c2a:	f7f4 fcd7 	bl	2d5dc <_fstat>
   38c2e:	1c43      	adds	r3, r0, #1
   38c30:	d103      	bne.n	38c3a <_fstat_r+0x1e>
   38c32:	6823      	ldr	r3, [r4, #0]
   38c34:	2b00      	cmp	r3, #0
   38c36:	d000      	beq.n	38c3a <_fstat_r+0x1e>
   38c38:	602b      	str	r3, [r5, #0]
   38c3a:	bd70      	pop	{r4, r5, r6, pc}
   38c3c:	20005b08 	.word	0x20005b08

00038c40 <_isatty_r>:
   38c40:	2300      	movs	r3, #0
   38c42:	b570      	push	{r4, r5, r6, lr}
   38c44:	4c06      	ldr	r4, [pc, #24]	; (38c60 <_isatty_r+0x20>)
   38c46:	0005      	movs	r5, r0
   38c48:	0008      	movs	r0, r1
   38c4a:	6023      	str	r3, [r4, #0]
   38c4c:	f7f4 fcd4 	bl	2d5f8 <_isatty>
   38c50:	1c43      	adds	r3, r0, #1
   38c52:	d103      	bne.n	38c5c <_isatty_r+0x1c>
   38c54:	6823      	ldr	r3, [r4, #0]
   38c56:	2b00      	cmp	r3, #0
   38c58:	d000      	beq.n	38c5c <_isatty_r+0x1c>
   38c5a:	602b      	str	r3, [r5, #0]
   38c5c:	bd70      	pop	{r4, r5, r6, pc}
   38c5e:	46c0      	nop			; (mov r8, r8)
   38c60:	20005b08 	.word	0x20005b08

00038c64 <_lseek_r>:
   38c64:	b570      	push	{r4, r5, r6, lr}
   38c66:	0005      	movs	r5, r0
   38c68:	0008      	movs	r0, r1
   38c6a:	0011      	movs	r1, r2
   38c6c:	2200      	movs	r2, #0
   38c6e:	4c06      	ldr	r4, [pc, #24]	; (38c88 <_lseek_r+0x24>)
   38c70:	6022      	str	r2, [r4, #0]
   38c72:	001a      	movs	r2, r3
   38c74:	f7f4 fcc9 	bl	2d60a <_lseek>
   38c78:	1c43      	adds	r3, r0, #1
   38c7a:	d103      	bne.n	38c84 <_lseek_r+0x20>
   38c7c:	6823      	ldr	r3, [r4, #0]
   38c7e:	2b00      	cmp	r3, #0
   38c80:	d000      	beq.n	38c84 <_lseek_r+0x20>
   38c82:	602b      	str	r3, [r5, #0]
   38c84:	bd70      	pop	{r4, r5, r6, pc}
   38c86:	46c0      	nop			; (mov r8, r8)
   38c88:	20005b08 	.word	0x20005b08

00038c8c <memchr>:
   38c8c:	b2c9      	uxtb	r1, r1
   38c8e:	1882      	adds	r2, r0, r2
   38c90:	4290      	cmp	r0, r2
   38c92:	d101      	bne.n	38c98 <memchr+0xc>
   38c94:	2000      	movs	r0, #0
   38c96:	4770      	bx	lr
   38c98:	7803      	ldrb	r3, [r0, #0]
   38c9a:	428b      	cmp	r3, r1
   38c9c:	d0fb      	beq.n	38c96 <memchr+0xa>
   38c9e:	3001      	adds	r0, #1
   38ca0:	e7f6      	b.n	38c90 <memchr+0x4>

00038ca2 <_realloc_r>:
   38ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38ca4:	0007      	movs	r7, r0
   38ca6:	000d      	movs	r5, r1
   38ca8:	0016      	movs	r6, r2
   38caa:	2900      	cmp	r1, #0
   38cac:	d105      	bne.n	38cba <_realloc_r+0x18>
   38cae:	0011      	movs	r1, r2
   38cb0:	f7fe fe9e 	bl	379f0 <_malloc_r>
   38cb4:	0004      	movs	r4, r0
   38cb6:	0020      	movs	r0, r4
   38cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38cba:	2a00      	cmp	r2, #0
   38cbc:	d103      	bne.n	38cc6 <_realloc_r+0x24>
   38cbe:	f7fe fe4d 	bl	3795c <_free_r>
   38cc2:	0034      	movs	r4, r6
   38cc4:	e7f7      	b.n	38cb6 <_realloc_r+0x14>
   38cc6:	f000 f827 	bl	38d18 <_malloc_usable_size_r>
   38cca:	002c      	movs	r4, r5
   38ccc:	4286      	cmp	r6, r0
   38cce:	d9f2      	bls.n	38cb6 <_realloc_r+0x14>
   38cd0:	0031      	movs	r1, r6
   38cd2:	0038      	movs	r0, r7
   38cd4:	f7fe fe8c 	bl	379f0 <_malloc_r>
   38cd8:	1e04      	subs	r4, r0, #0
   38cda:	d0ec      	beq.n	38cb6 <_realloc_r+0x14>
   38cdc:	0029      	movs	r1, r5
   38cde:	0032      	movs	r2, r6
   38ce0:	f7fe fe18 	bl	37914 <memcpy>
   38ce4:	0029      	movs	r1, r5
   38ce6:	0038      	movs	r0, r7
   38ce8:	f7fe fe38 	bl	3795c <_free_r>
   38cec:	e7e3      	b.n	38cb6 <_realloc_r+0x14>
	...

00038cf0 <_read_r>:
   38cf0:	b570      	push	{r4, r5, r6, lr}
   38cf2:	0005      	movs	r5, r0
   38cf4:	0008      	movs	r0, r1
   38cf6:	0011      	movs	r1, r2
   38cf8:	2200      	movs	r2, #0
   38cfa:	4c06      	ldr	r4, [pc, #24]	; (38d14 <_read_r+0x24>)
   38cfc:	6022      	str	r2, [r4, #0]
   38cfe:	001a      	movs	r2, r3
   38d00:	f7f4 fbe4 	bl	2d4cc <_read>
   38d04:	1c43      	adds	r3, r0, #1
   38d06:	d103      	bne.n	38d10 <_read_r+0x20>
   38d08:	6823      	ldr	r3, [r4, #0]
   38d0a:	2b00      	cmp	r3, #0
   38d0c:	d000      	beq.n	38d10 <_read_r+0x20>
   38d0e:	602b      	str	r3, [r5, #0]
   38d10:	bd70      	pop	{r4, r5, r6, pc}
   38d12:	46c0      	nop			; (mov r8, r8)
   38d14:	20005b08 	.word	0x20005b08

00038d18 <_malloc_usable_size_r>:
   38d18:	1f0b      	subs	r3, r1, #4
   38d1a:	681b      	ldr	r3, [r3, #0]
   38d1c:	1f18      	subs	r0, r3, #4
   38d1e:	2b00      	cmp	r3, #0
   38d20:	da01      	bge.n	38d26 <_malloc_usable_size_r+0xe>
   38d22:	580b      	ldr	r3, [r1, r0]
   38d24:	18c0      	adds	r0, r0, r3
   38d26:	4770      	bx	lr
   38d28:	04020100 	.word	0x04020100
   38d2c:	00001008 	.word	0x00001008
   38d30:	7fffffff 	.word	0x7fffffff
   38d34:	7fffffff 	.word	0x7fffffff
   38d38:	7fffffff 	.word	0x7fffffff
   38d3c:	7fffffff 	.word	0x7fffffff
   38d40:	7fffffff 	.word	0x7fffffff
   38d44:	7eb851ea 	.word	0x7eb851ea
   38d48:	7fffffff 	.word	0x7fffffff
   38d4c:	7ef9db21 	.word	0x7ef9db21
   38d50:	7fffffff 	.word	0x7fffffff
   38d54:	7fffffff 	.word	0x7fffffff
   38d58:	7fbe76c7 	.word	0x7fbe76c7
   38d5c:	7f5c28f4 	.word	0x7f5c28f4
   38d60:	7fffffff 	.word	0x7fffffff
   38d64:	7eb851ea 	.word	0x7eb851ea
   38d68:	7fffffff 	.word	0x7fffffff
   38d6c:	7fffffff 	.word	0x7fffffff
   38d70:	f4240000 	.word	0xf4240000
   38d74:	7a120000 	.word	0x7a120000
   38d78:	3d090000 	.word	0x3d090000
   38d7c:	1e848000 	.word	0x1e848000
   38d80:	0f3e58ff 	.word	0x0f3e58ff
   38d84:	07938c54 	.word	0x07938c54
   38d88:	03d09000 	.word	0x03d09000
   38d8c:	01ec3810 	.word	0x01ec3810
   38d90:	00f46290 	.word	0x00f46290
   38d94:	007a1200 	.word	0x007a1200
   38d98:	003d0900 	.word	0x003d0900
   38d9c:	001e8480 	.word	0x001e8480
   38da0:	000f4240 	.word	0x000f4240
   38da4:	0007a120 	.word	0x0007a120
   38da8:	0003d090 	.word	0x0003d090
   38dac:	0001e848 	.word	0x0001e848

00038db0 <pcWelcomeMessage>:
   38db0:	65657246 534f5452 494c4320 540a0d2e     FreeRTOS CLI...T
   38dc0:	20657079 706c6548 206f7420 77656976     ype Help to view
   38dd0:	6c206120 20747369 7220666f 73696765      a list of regis
   38de0:	65726574 6f632064 6e616d6d 0d2e7364     tered commands..
   38df0:	0000000a 00756d69 3a756d69 74655220     ....imu.imu: Ret
   38e00:	736e7275 76206120 65756c61 6f726620     urns a value fro
   38e10:	6874206d 4d492065 000a0d55 00007766     m the IMU...fw..
   38e20:	203a7766 6e776f44 64616f6c 66206120     fw: Download a f
   38e30:	20656c69 20646e61 66726570 206d726f     ile and perform 
   38e40:	46206e61 70752057 65746164 00000a0d     an FW update....
   38e50:	00706172 3a706172 69684320 6573656e     rap.rap: Chinese
   38e60:	73654220 61522074 72657070 00000a0d      Best Rapper....
   38e70:	636c6c63 00000064 636c6c63 43203a64     cllcd...cllcd: C
   38e80:	7261656c 54465420 72635320 0d6e6565     lear TFT Screen.
   38e90:	0000000a 6b636f6c 00000000 6b636f6c     ....lock....lock
   38ea0:	6f6c203a 74206b63 64206568 21726f6f     : lock the door!
   38eb0:	00000a0d 6f6c6e75 00006b63 6f6c6e75     ....unlock..unlo
   38ec0:	203a6b63 6f6c6e75 74206b63 64206568     ck: unlock the d
   38ed0:	21726f6f 00000a0d 65736572 00000074     oor!....reset...
   38ee0:	65736572 52203a74 74657365 68742073     reset: Resets th
   38ef0:	65642065 65636976 00000a0d 64746567     e device....getd
   38f00:	61747369 0065636e 64746567 61747369     istance.getdista
   38f10:	3a65636e 74655220 736e7275 65687420     nce: Returns the
   38f20:	73696420 636e6174 72662065 74206d6f      distance from t
   38f30:	55206568 30312d53 65532030 726f736e     he US-100 Sensor
   38f40:	000a0d2e 656d6167 00000000 656d6167     ....game....game
   38f50:	6553203a 2073646e 6d6d7564 61672079     : Sends dummy ga
   38f60:	6420656d 0d617461 0000000a 00633269     me data.....i2c.
   38f70:	3a633269 61635320 4920736e 62204332     i2c: Scans I2C b
   38f80:	0a0d7375 00000000 00656d62 3a656d62     us......bme.bme:
   38f90:	69725020 6f20746e 62207475 7320656d      Print out bme s
   38fa0:	6f736e65 61642072 0a0d6174 00000000     ensor data......
   38fb0:	00736c63 3a736c63 656c4320 20737261     cls.cls: Clears 
   38fc0:	20656874 6d726574 6c616e69 72637320     the terminal scr
   38fd0:	0d6e6565 0000000a 6c756f43 6f6e2064     een.....Could no
   38fe0:	6c612074 61636f6c 73206574 70616d65     t allocate semap
   38ff0:	65726f68 00000a0d 00000a0d 0000616f     hore........oa..
   39000:	325b6325 003e0d4b 00082008 65636341     %c[2K.>.. ..Acce
   39010:	6172656c 6e6f6974 676d5b20 20583a5d     leration [mg]:X 
   39020:	59096425 09642520 6425205a 00000a0d     %d.Y %d.Z %d....
   39030:	64206f4e 20617461 64616572 53202179     No data ready! S
   39040:	69646e65 6420676e 796d6d75 74616420     ending dummy dat
   39050:	0a0d2061 00000000 325b6325 0000004a     a ......%c[2J...
   39060:	64757453 73746e65 206f7420 6c6c6966     Students to fill
   39070:	74756f20 00000021 736e6553 4520726f      out!...Sensor E
   39080:	726f7272 21642520 00000a0d 74736944     rror %d!....Dist
   39090:	65636e61 6425203a 0d6d6d20 0000000a     ance: %d mm.....
   390a0:	74736944 65636e61 74614420 514d2061     Distance Data MQ
   390b0:	50205454 0d74736f 0000000a 6d6d7544     TT Post.....Dumm
   390c0:	61472079 4420656d 20617461 5454514d     y Game Data MQTT
   390d0:	736f5020 000a0d74 31202030 20322020      Post...0  1  2 
   390e0:	20203320 35202034 20362020 20203720      3  4  5  6  7  
   390f0:	39202038 20612020 20206220 64202063     8  9  a  b  c  d
   39100:	20652020 0a0d6620 00000000 78323025       e  f......%02x
   39110:	0000203a 78323025 00000020              : ..%02x ...

0003911c <xImuGetCommand>:
   3911c:	00038df4 00038df8 00014fc9 00000000     .........O......

0003912c <xOTAUCommand>:
   3912c:	00038e1c 00038e20 00015175 00000000     .... ...uQ......

0003913c <xLock>:
   3913c:	00038e94 00038e9c 000152dd 00000000     .........R......

0003914c <xUNLock>:
   3914c:	00038eb4 00038ebc 000152fd 00000000     .........R......

0003915c <xResetCommand>:
   3915c:	00038ed8 00038ee0 00015195 00000000     .........Q......

0003916c <xI2cScan>:
   3916c:	00038f6c 00038f70 000151b5 00000000     l...p....Q......

0003917c <xBME>:
   3917c:	00038f88 00038f8c 0001531d 00000000     .........S......

0003918c <xClearScreen>:
   3918c:	00038fb0 00038fb4 0001512d 00000000     ........-Q......
   3919c:	35455345 2d203631 6e6f4320 6c6f7274     ESE516 - Control
   391ac:	696e4920 6f432074 0a0d6564 00000000      Init Code......
   391bc:	4f525245 6e492052 61697469 697a696c     ERROR Initializi
   391cc:	4320676e 72746e6f 44206c6f 20617461     ng Control Data 
   391dc:	75657571 0d217365 0000000a 746e6f43     queues!.....Cont
   391ec:	206c6f72 65726854 203a6461 736e6f43     rol Thread: Cons
   391fc:	64656d75 6d616720 61702065 74656b63     umed game packet
   3920c:	000a0d21 746e6f43 206c6f72 65726854     !...Control Thre
   3921c:	203a6461 6c756f43 6f6e2064 65732074     ad: Could not se
   3922c:	6720646e 20656d61 6b636170 0d217465     nd game packet!.
   3923c:	0000000a                                ....

00039240 <msgKeypadGetCount>:
   39240:	00000410 6f727245 6e692072 61697469     ....Error initia
   39250:	697a696c 5320676e 61736565 722f2177     lizing Seesaw!/r
   39260:	00006e2f 6f727245 2f722f72 0000006e     /n..Error/r/n...
   39270:	6e756f46 65532064 77617365 2f722f21     Found Seesaw!/r/
   39280:	0000006e 6c756f43 6f6e2064 72772074     n...Could not wr
   39290:	20657469 73656553 70207761 2f216e69     ite Seesaw pin!/
   392a0:	006e2f72 6c756f43 6f6e2064 65732074     r/n.Could not se
   392b0:	65732074 77617365 6f654e20 65786970     t seesaw Neopixe
   392c0:	7073206c 21646565 6e2f722f 00000000     l speed!/r/n....
   392d0:	6c756f43 6f6e2064 65732074 65732074     Could not set se
   392e0:	77617365 6f654e20 65786970 756e206c     esaw Neopixel nu
   392f0:	7265626d 20666f20 69766564 2f736563     mber of devices/
   39300:	006e2f72 6f727245 65722072 6e696461     r/n.Error readin
   39310:	65532067 77617365 756f6320 2173746e     g Seesaw counts!
   39320:	6e2f722f 00000000 00001010 0000050e     /r/n............
   39330:	6c756f43 6f6e2064 6e692074 61697469     Could not initia
   39340:	657a696c 79654b20 21646170 6e2f722f     lize Keypad!/r/n
   39350:	00000000                                ....

00039354 <ASCII>:
   39354:	00000000 5f000000 07000000 14000700     ......._........
   39364:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   39374:	00502255 00000305 41221c00 22410000     U"P......."A..A"
   39384:	0814001c 0814083e 08083e08 00305000     ....>....>...P0.
   39394:	08080800 60000808 20000060 02040810     .......``.. ....
   393a4:	4549513e 7f42003e 61420040 21464951     >QIE>.B.@.BaQIF!
   393b4:	314b4541 7f121418 45452710 4a3c3945     AEK1.....'EEE9<J
   393c4:	01304949 03050971 49494936 49490636     II0.q...6III6.II
   393d4:	36001e29 00000036 00003656 41221408     )..66...V6...."A
   393e4:	14141400 41001414 02081422 06095101     .......A"....Q..
   393f4:	41794932 11117e3e 497f7e11 3e364949     2IyA>~...~.III6>
   39404:	22414141 2241417f 49497f1c 097f4149     AAA".AA"..IIIA..
   39414:	3e010909 7a494941 0808087f 7f41007f     ...>AIIz......A.
   39424:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   39434:	0c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   39444:	0909097f 51413e06 097f5e21 46462919     .....>AQ!^...)FF
   39454:	31494949 017f0101 40403f01 201f3f40     III1.....?@@@?. 
   39464:	3f1f2040 3f403840 14081463 70080763     @ .?@8@?c...c..p
   39474:	51610708 00434549 0041417f 10080402     ..aQIEC..AA.....
   39484:	41410020 0204007f 40040201 40404040      .AA.......@@@@@
   39494:	04020100 54542000 487f7854 38384444     ..... TTTx.HDD88
   394a4:	20444444 48444438 5454387f 7e081854     DDD 8DDH.8TTT..~
   394b4:	0c020109 3e525252 0404087f 7d440078     ....RRR>....x.D}
   394c4:	40200040 7f003d44 00442810 407f4100     @. @D=...(D..A.@
   394d4:	18047c00 087c7804 38780404 38444444     .|...x|...x8DDD8
   394e4:	1414147c 14140808 087c7c18 48080404     |........||....H
   394f4:	20545454 40443f04 40403c20 201c7c20     TTT .?D@ <@@ |. 
   39504:	3c1c2040 3c403040 28102844 50500c44     @ .<@0@<D(.(D.PP
   39514:	64443c50 00444c54 00413608 007f0000     P<DdTLD..6A.....
   39524:	36410000 08100008 00081008 06090906     ..A6............
   39534:	49464957 20736920 6e6e6f43 65746365     WIFI is Connecte
   39544:	20202164 00002020 636c6557 20656d6f     d!    ..Welcome 
   39554:	656d6f68 00000021 63746157 676f4468     home!...WatchDog
   39564:	61745320 3a737574 636f4c20 2064656b      Status: Locked 
   39574:	00000020 63746157 676f4468 61745320      ...WatchDog Sta
   39584:	3a737574 6c6e5520 656b636f 00000064     tus: Unlocked...
   39594:	706d6554 74617265 3a657275 20642520     Temperature: %d 
   395a4:	00000043 696d7548 79746964 6425203a     C...Humidity: %d
   395b4:	00252520 73657250 65727573 6425203a      %%.Pressure: %d
   395c4:	61506820 00000000 6b6f6d53 25203a65      hPa....Smoke: %
   395d4:	25252064 00000000 54204955 206b7361     d %%....UI Task 
   395e4:	72617453 21646574 00000000              Started!....

000395f0 <main_mqtt_broker>:
   395f0:	6b6f7262 682e7265 6d657669 6f632e71     broker.hivemq.co
   39600:	0000006d 64333025 00000000 72617473     m...%03d....star
   39610:	6f645f74 6f6c6e77 203a6461 20434d4d     t_download: MMC 
   39620:	726f7473 20656761 20746f6e 64616572     storage not read
   39630:	0a0d2e79 00000000 72617473 6f645f74     y.......start_do
   39640:	6f6c6e77 203a6461 462d6957 73692069     wnload: Wi-Fi is
   39650:	746f6e20 6e6f6320 7463656e 0d2e6465      not connected..
   39660:	0000000a 72617473 6f645f74 6f6c6e77     ....start_downlo
   39670:	203a6461 75716572 20747365 73207369     ad: request is s
   39680:	20746e65 65726c61 2e796461 00000a0d     ent already.....
   39690:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   396a0:	6e6e7572 20676e69 6e776f64 64616f6c     running download
   396b0:	726c6120 79646165 000a0d2e 72617473      already....star
   396c0:	6f645f74 6f6c6e77 203a6461 646e6573     t_download: send
   396d0:	20676e69 50545448 71657220 74736575     ing HTTP request
   396e0:	0d2e2e2e 0000000a 70747468 2f2f3a73     ........https://
   396f0:	2e777777 73616573 6570752e 652e6e6e     www.seas.upenn.e
   39700:	7e2f7564 61676465 492f6372 702e546f     du/~edgarc/IoT.p
   39710:	00006664 726f7473 69665f65 705f656c     df..store_file_p
   39720:	656b6361 65203a74 7974706d 74616420     acket: empty dat
   39730:	0a0d2e61 00000000 726f7473 69665f65     a.......store_fi
   39740:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   39750:	656d616e 20736920 61766e69 2e64696c     name is invalid.
   39760:	776f4420 616f6c6e 61632064 6c65636e      Download cancel
   39770:	0d2e6465 0000000a 726f7473 69665f65     ed......store_fi
   39780:	705f656c 656b6361 63203a74 74616572     le_packet: creat
   39790:	20676e69 656c6966 73255b20 000a0d5d     ing file [%s]...
   397a0:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   397b0:	66203a74 20656c69 61657263 6e6f6974     t: file creation
   397c0:	72726520 2021726f 3a746572 0a0d6425      error! ret:%d..
   397d0:	00000000 726f7473 69665f65 705f656c     ....store_file_p
   397e0:	656b6361 66203a74 20656c69 74697277     acket: file writ
   397f0:	72652065 2c726f72 776f6420 616f6c6e     e error, downloa
   39800:	61632064 6c65636e 0d2e6465 0000000a     d canceled......
   39810:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   39820:	72203a74 69656365 5b646576 5d756c25     t: received[%lu]
   39830:	6966202c 7320656c 5b657a69 5d756c25     , file size[%lu]
   39840:	00000a0d 726f7473 69665f65 705f656c     ....store_file_p
   39850:	656b6361 66203a74 20656c69 6e776f64     acket: file down
   39860:	64616f6c 73206465 65636375 75667373     loaded successfu
   39870:	2e796c6c 00000a0d 70747468 696c635f     lly.....http_cli
   39880:	5f746e65 6c6c6163 6b636162 5448203a     ent_callback: HT
   39890:	63205054 6e65696c 6f732074 74656b63     TP client socket
   398a0:	6e6f6320 7463656e 0d2e6465 0000000a      connected......
   398b0:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   398c0:	6b636162 6572203a 73657571 6f632074     back: request co
   398d0:	656c706d 2e646574 00000a0d 70747468     mpleted.....http
   398e0:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   398f0:	6572203a 76696563 72206465 6f707365     : received respo
   39900:	2065736e 64207525 20617461 657a6973     nse %u data size
   39910:	0d752520 0000000a 70747468 696c635f      %u.....http_cli
   39920:	5f746e65 6c6c6163 6b636162 6964203a     ent_callback: di
   39930:	6e6f6373 7463656e 206e6f69 73616572     sconnection reas
   39940:	253a6e6f 000a0d64 6f736572 5f65766c     on:%d...resolve_
   39950:	203a6263 49207325 64612050 73657264     cb: %s IP addres
   39960:	73692073 2e642520 252e6425 64252e64     s is %d.%d.%d.%d
   39970:	0a0d0a0d 00000000 69666977 3a62635f     ........wifi_cb:
   39980:	4d324d20 4649575f 4f435f49 43454e4e      M2M_WIFI_CONNEC
   39990:	0d444554 0000000a 69666977 3a62635f     TED.....wifi_cb:
   399a0:	4d324d20 4649575f 49445f49 4e4f4353      M2M_WIFI_DISCON
   399b0:	5443454e 0a0d4445 00000000 69666957     NECTED......Wifi
   399c0:	20736920 20746f6e 6e6e6f43 65746365      is not Connecte
   399d0:	00002164 6e6e6570 30343731 69666977     d!..penn1740wifi
   399e0:	00000000 50726941 4e6e6e65 442d7465     ....AirPennNet-D
   399f0:	63697665 00000065 69666977 3a62635f     evice...wifi_cb:
   39a00:	20504920 72646461 20737365 25207369      IP address is %
   39a10:	75252e75 2e75252e 0a0d7525 00000000     u.%u.%u.%u......
   39a20:	6f727245 6f632072 63656e6e 676e6974     Error connecting
   39a30:	206f7420 5454514d 6f724220 2172656b      to MQTT Broker!
   39a40:	00000a0d 74696e69 6f74735f 65676172     ....init_storage
   39a50:	6c70203a 65736165 756c7020 6e612067     : please plug an
   39a60:	2f445320 20434d4d 64726163 206e6920      SD/MMC card in 
   39a70:	746f6c73 0d2e2e2e 0000000a 74696e69     slot........init
   39a80:	6f74735f 65676172 4453203a 72614320     _storage: SD Car
   39a90:	6e692064 6c617473 6166206c 64656c69     d install failed
   39aa0:	000a0d2e 74696e69 6f74735f 65676172     ....init_storage
   39ab0:	7274203a 6e752079 67756c70 646e6120     : try unplug and
   39ac0:	2d657220 67756c70 65687420 72616320      re-plug the car
   39ad0:	0a0d2e64 00000000 74696e69 6f74735f     d.......init_sto
   39ae0:	65676172 6f6d203a 69746e75 5320676e     rage: mounting S
   39af0:	61632044 2e2e6472 000a0d2e 74696e69     D card......init
   39b00:	6f74735f 65676172 4453203a 72616320     _storage: SD car
   39b10:	6f6d2064 20746e75 6c696166 20216465     d mount failed! 
   39b20:	73657228 29642520 00000a0d 74696e69     (res %d)....init
   39b30:	6f74735f 65676172 4453203a 72616320     _storage: SD car
   39b40:	6f6d2064 20746e75 0d2e4b4f 0000000a     d mount OK......
   39b50:	666e6f63 72756769 74685f65 635f7074     configure_http_c
   39b60:	6e65696c 48203a74 20505454 65696c63     lient: HTTP clie
   39b70:	6920746e 6974696e 7a696c61 6f697461     nt initializatio
   39b80:	6166206e 64656c69 72282021 25207365     n failed! (res %
   39b90:	0a0d2964 00000000 25200a0d 00732a2e     d)........ %.*s.
   39ba0:	28626772 00000000 47520a0d 64252042     rgb(......RGB %d
   39bb0:	20642520 0a0d6425 00000000 43544157      %d %d......WATC
   39bc0:	474f4448 5245535f 00004f56 65757274     HDOG_SERVO..true
   39bd0:	00000000 736c6166 00000065 6167227b     ....false...{"ga
   39be0:	3a22656d 0000005b 61470a0d 6d20656d     me":[.....Game m
   39bf0:	61737365 72206567 69656365 21646576     essage received!
   39c00:	00000a0d 732a2e25 00000000 61500a0d     ....%.*s......Pa
   39c10:	64657372 6d6f4320 646e616d 0000203a     rsed Command: ..
   39c20:	002c6425 65530a0d 7020746e 2079616c     %d,...Sent play 
   39c30:	63206f74 72746e6f 0d216c6f 0000000a     to control!.....
   39c40:	61470a0d 6d20656d 61737365 72206567     ..Game message r
   39c50:	69656365 20646576 20747562 20746f6e     eceived but not 
   39c60:	65646e75 6f747372 0d21646f 0000000a     understood!.....
   39c70:	4d490a0d 6f742055 20636970 65636572     ..IMU topic rece
   39c80:	64657669 000a0d21 4d420a0d 6f742045     ived!.....BME to
   39c90:	20636970 65636572 64657669 000a0d21     pic received!...
   39ca0:	69440a0d 6e617473 74206563 6369706f     ..Distance topic
   39cb0:	63657220 65766965 0a0d2164 00000000      received!......
   39cc0:	203e3e20 00000000 4c5f3150 455f4445      >> ....P1_LED_E
   39cd0:	31354553 30545f36 00000000 6f430a0d     SE516_T0......Co
   39ce0:	63656e6e 676e6974 206f7420 6b6f7242     nnecting to Brok
   39cf0:	2e2e7265 0000002e 657a694c 36373839     er......Lize9876
   39d00:	32333435 00000031 00706f6b 5454514d     54321...kop.MQTT
   39d10:	72452020 20726f72 4f4e202d 6f432054       Error - NOT Co
   39d20:	63656e6e 20646574 62206f74 656b6f72     nnected to broke
   39d30:	000a0d72 5454514d 6e6f4320 7463656e     r...MQTT Connect
   39d40:	74206465 7262206f 72656b6f 00000a0d     ed to broker....
   39d50:	6e6e6f43 20746365 6c696166 206f7420     Connect fail to 
   39d60:	76726573 25287265 20212973 72746572     server(%s)! retr
   39d70:	74692079 74756120 74616d6f 6c616369     y it automatical
   39d80:	0d2e796c 0000000a 5454514d 6e6f4320     ly......MQTT Con
   39d90:	7463656e 0a0d6465 00000000 5454514d     nected......MQTT
   39da0:	6f726220 2072656b 6c636564 20656e69      broker decline 
   39db0:	72756f79 63636120 21737365 72726520     your access! err
   39dc0:	6320726f 2065646f 0a0d6425 00000000     or code %d......
   39dd0:	5454514d 73696420 6e6e6f63 65746365     MQTT disconnecte
   39de0:	000a0d64 5454514d 696e6920 6c616974     d...MQTT initial
   39df0:	74617a69 206e6f69 6c696166 202e6465     ization failed. 
   39e00:	6f727245 6f632072 69206564 25282073     Error code is (%
   39e10:	0a0d2964 00000000 5454514d 67657220     d)......MQTT reg
   39e20:	65747369 61632072 61626c6c 66206b63     ister callback f
   39e30:	656c6961 45202e64 726f7272 646f6320     ailed. Error cod
   39e40:	73692065 64252820 000a0d29 2264227b     e is (%d)...{"d"
   39e50:	74227b3a 22706d65 7d64253a 0000007d     :{"temp":%d}}...
   39e60:	4941465b 72205d4c 25207365 000a0d64     [FAIL] res %d...
   39e70:	67616c46 78742e41 64612074 21646564     FlagA.txt added!
   39e80:	00000a0d 6c463a30 2e416761 00747874     ....0:FlagA.txt.
   39e90:	6e6e6f43 65746365 6f742064 54514d20     Connected to MQT
   39ea0:	72422054 72656b6f 000a0d21 6d69227b     T Broker!...{"im
   39eb0:	3a227875 202c6425 756d6922 203a2279     ux":%d, "imuy": 
   39ec0:	202c6425 756d6922 203a227a 007d6425     %d, "imuz": %d}.
   39ed0:	495f3150 455f554d 31354553 30545f36     P1_IMU_ESE516_T0
   39ee0:	00000000 6574227b 3a22706d 202c6425     ....{"temp":%d, 
   39ef0:	6d756822 25203a22 22202c64 22657270     "hum": %d, "pre"
   39f00:	6425203a 7722202c 3a227261 2c642520     : %d, "war": %d,
   39f10:	61672220 203a2273 007d6425 43544157      "gas": %d}.WATC
   39f20:	474f4448 4e45535f 00524f53 00006425     HDOG_SENSOR.%d..
   39f30:	00007d5d 00000a0d 475f3250 5f454d41     ]}......P2_GAME_
   39f40:	35455345 545f3631 00000030 4f525245     ESE516_T0...ERRO
   39f50:	6e492052 61697469 697a696c 5720676e     R Initializing W
   39f60:	20696669 61746144 65757120 21736575     ifi Data queues!
   39f70:	00000a0d 35455345 2d203631 66695720     ....ESE516 - Wif
   39f80:	6e492069 43207469 0d65646f 0000000a     i Init Code.....
   39f90:	6e69616d 326d203a 69775f6d 695f6966     main: m2m_wifi_i
   39fa0:	2074696e 6c6c6163 72726520 2021726f     nit call error! 
   39fb0:	73657228 29642520 00000a0d 6e69616d     (res %d)....main
   39fc0:	6f63203a 63656e6e 676e6974 206f7420     : connecting to 
   39fd0:	69466957 20504120 2e2e7325 000a0d2e     WiFi AP %s......
   39fe0:	545f3150 45504d45 55544152 455f4552     P1_TEMPERATURE_E
   39ff0:	31354553 30545f36 00000000 5454514d     SE516_T0....MQTT
   3a000:	6e657320 73252064 00000a0d 000187c4      send %s........
   3a010:	000187d0 000187e2 00018838 00018858     ........8...X...
   3a020:	706c6568 00000000 65680a0d 0d3a706c     help......help:.
   3a030:	694c200a 20737473 206c6c61 20656874     . Lists all the 
   3a040:	69676572 72657473 63206465 616d6d6f     registered comma
   3a050:	0d73646e 000a0d0a 6f636e49 63657272     nds.....Incorrec
   3a060:	6f632074 6e616d6d 61702064 656d6172     t command parame
   3a070:	28726574 202e2973 746e4520 22207265     ter(s).  Enter "
   3a080:	706c6568 6f742022 65697620 20612077     help" to view a 
   3a090:	7473696c 20666f20 69617661 6c62616c     list of availabl
   3a0a0:	6f632065 6e616d6d 0d2e7364 000a0d0a     e commands......
   3a0b0:	6d6d6f43 20646e61 20746f6e 6f636572     Command not reco
   3a0c0:	73696e67 202e6465 746e4520 27207265     gnised.  Enter '
   3a0d0:	706c6568 6f742027 65697620 20612077     help' to view a 
   3a0e0:	7473696c 20666f20 69617661 6c62616c     list of availabl
   3a0f0:	6f632065 6e616d6d 0d2e7364 000a0d0a     e commands......

0003a100 <xHelpCommand>:
   3a100:	0003a020 0003a028 0001a451 00000000      ...(...Q.......
   3a110:	61725476 6e456563 656c6261 43525428     vTraceEnable(TRC
   3a120:	4154535f 415f5452 54494157 534f485f     _START_AWAIT_HOS
   3a130:	6e202954 6120746f 776f6c6c 69206465     T) not allowed i
   3a140:	6e53206e 68737061 6d20746f 0065646f     n Snapshot mode.
   3a150:	78656e55 74636570 61206465 6d756772     Unexpected argum
   3a160:	20746e65 76206f74 63617254 616e4565     ent to vTraceEna
   3a170:	20656c62 616e7328 6f687370 6f6d2074     ble (snapshot mo
   3a180:	00296564 74437a54 00006c72 20746f4e     de).TzCtrl..Not 
   3a190:	756f6e65 54206867 204b5341 646e6168     enough TASK hand
   3a1a0:	2073656c 6e69202d 61657263 54206573     les - increase T
   3a1b0:	435f4352 4e5f4746 4b534154 206e6920     RC_CFG_NTASK in 
   3a1c0:	53637274 7370616e 43746f68 69666e6f     trcSnapshotConfi
   3a1d0:	00682e67 20746f4e 756f6e65 49206867     g.h.Not enough I
   3a1e0:	68205253 6c646e61 2d207365 636e6920     SR handles - inc
   3a1f0:	73616572 52542065 46435f43 494e5f47     rease TRC_CFG_NI
   3a200:	69205253 7274206e 616e5363 6f687370     SR in trcSnapsho
   3a210:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   3a220:	756f6e65 53206867 50414d45 45524f48     enough SEMAPHORE
   3a230:	6e616820 73656c64 69202d20 6572636e      handles - incre
   3a240:	20657361 5f435254 5f474643 4d45534e     ase TRC_CFG_NSEM
   3a250:	4f485041 69204552 7274206e 616e5363     APHORE in trcSna
   3a260:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
   3a270:	20746f4e 756f6e65 4d206867 58455455     Not enough MUTEX
   3a280:	6e616820 73656c64 69202d20 6572636e      handles - incre
   3a290:	20657361 5f435254 5f474643 54554d4e     ase TRC_CFG_NMUT
   3a2a0:	69205845 7274206e 616e5363 6f687370     EX in trcSnapsho
   3a2b0:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   3a2c0:	756f6e65 51206867 45554555 6e616820     enough QUEUE han
   3a2d0:	73656c64 69202d20 6572636e 20657361     dles - increase 
   3a2e0:	5f435254 5f474643 4555514e 69204555     TRC_CFG_NQUEUE i
   3a2f0:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
   3a300:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
   3a310:	54206867 52454d49 6e616820 73656c64     gh TIMER handles
   3a320:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   3a330:	5f474643 4d49544e 69205245 7274206e     CFG_NTIMER in tr
   3a340:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   3a350:	00000068 20746f4e 756f6e65 45206867     h...Not enough E
   3a360:	544e4556 554f5247 61682050 656c646e     VENTGROUP handle
   3a370:	202d2073 72636e69 65736165 43525420     s - increase TRC
   3a380:	4746435f 56454e5f 47544e45 50554f52     _CFG_NEVENTGROUP
   3a390:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
   3a3a0:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
   3a3b0:	53206867 41455254 4655424d 20524546     gh STREAMBUFFER 
   3a3c0:	646e6168 2073656c 6e69202d 61657263     handles - increa
   3a3d0:	54206573 435f4352 4e5f4746 45525453     se TRC_CFG_NSTRE
   3a3e0:	55424d41 52454646 206e6920 53637274     AMBUFFER in trcS
   3a3f0:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
   3a400:	20746f4e 756f6e65 4d206867 41535345     Not enough MESSA
   3a410:	55424547 52454646 6e616820 73656c64     GEBUFFER handles
   3a420:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   3a430:	5f474643 53454d4e 45474153 46465542     CFG_NMESSAGEBUFF
   3a440:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
   3a450:	6e6f4374 2e676966 00000068 547a7370     tConfig.h...pszT
   3a460:	65636172 45746547 726f7272 646e6148     raceGetErrorHand
   3a470:	3a73656c 766e4920 64696c61 6a626f20     les: Invalid obj
   3a480:	63746365 7373616c 00000021 0001ab76     ectclass!...v...
   3a490:	0001ab6e 0001ab72 0001ab66 0001ab6a     n...r...f...j...
   3a4a0:	0001ab7a 0001ab7e 0001ab82 0001ab86     z...~...........
   3a4b0:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   3a4c0:	64726f63 6e207265 6920746f 6974696e     corder not initi
   3a4d0:	7a696c61 202e6465 20657355 61725476     alized. Use vTra
   3a4e0:	6e456563 656c6261 69202928 6574736e     ceEnable() inste
   3a4f0:	00216461 61747328 70757472 00000029     ad!.(startup)...
   3a500:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   3a510:	64726f63 6e207265 6920746f 6974696e     corder not initi
   3a520:	7a696c61 202c6465 6c6c6163 72547620     alized, call vTr
   3a530:	45656361 6c62616e 20292865 73726966     aceEnable() firs
   3a540:	00002174 43415254 53415f45 54524553     t!..TRACE_ASSERT
   3a550:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   3a560:	7265706f 73656974 6e49203a 696c6176     operties: Invali
   3a570:	61762064 2065756c 20726f66 646e6168     d value for hand
   3a580:	0000656c 43415254 53415f45 54524553     le..TRACE_ASSERT
   3a590:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   3a5a0:	7265706f 73656974 616e203a 3d20656d     operties: name =
   3a5b0:	554e203d 00004c4c 61725476 74536563     = NULL..vTraceSt
   3a5c0:	4965726f 65425253 206e6967 6572202d     oreISRBegin - re
   3a5d0:	64726f63 62207265 21797375 65655320     corder busy! See
   3a5e0:	646f6320 6f632065 6e656d6d 00002e74      code comment...
   3a5f0:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   3a600:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   3a610:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   3a620:	6c646e61 4e282065 294c4c55 00000000     andle (NULL)....
   3a630:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   3a640:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   3a650:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   3a660:	6c646e61 3e282065 53494e20 00002952     andle (> NISR)..
   3a670:	206f6f54 796e616d 73656e20 20646574     Too many nested 
   3a680:	65746e69 70757272 00217374 61725476     interrupts!.vTra
   3a690:	74536563 4965726f 6e455253 202d2064     ceStoreISREnd - 
   3a6a0:	6f636572 72656472 73756220 53202179     recorder busy! S
   3a6b0:	63206565 2065646f 6d6d6f63 2e746e65     ee code comment.
   3a6c0:	00000000 616d6e55 65686374 61632064     ....Unmatched ca
   3a6d0:	74206c6c 5476206f 65636172 726f7453     ll to vTraceStor
   3a6e0:	52534965 20646e45 53496e28 74636152     eISREnd (nISRact
   3a6f0:	20657669 30203d3d 7865202c 74636570     ive == 0, expect
   3a700:	3e206465 00293020 43415254 53415f45     ed > 0).TRACE_AS
   3a710:	54524553 7277203a 49657469 3a38746e     SERT: writeInt8:
   3a720:	66756220 20726566 4e203d3d 004c4c55      buffer == NULL.
   3a730:	43415254 53415f45 54524553 7277203a     TRACE_ASSERT: wr
   3a740:	49657469 3631746e 7562203a 72656666     iteInt16: buffer
   3a750:	203d3d20 4c4c554e 00000000 43415254      == NULL....TRAC
   3a760:	53415f45 54524553 7277203a 49657469     E_ASSERT: writeI
   3a770:	3233746e 7562203a 72656666 203d3d20     nt32: buffer == 
   3a780:	4c4c554e 00000000 61725476 72506563     NULL....vTracePr
   3a790:	46746e69 54202d20 6d206f6f 20796e61     intF - Too many 
   3a7a0:	75677261 746e656d 6d202c73 31207861     arguments, max 1
   3a7b0:	6c612035 65776f6c 00002164 61725476     5 allowed!..vTra
   3a7c0:	72506563 46746e69 54202d20 6c206f6f     cePrintF - Too l
   3a7d0:	65677261 67726120 6e656d75 202c7374     arge arguments, 
   3a7e0:	2078616d 62203233 20657479 6f6c6c61     max 32 byte allo
   3a7f0:	21646577 00000000 43415254 53415f45     wed!....TRACE_AS
   3a800:	54524553 5476203a 65636172 69725056     SERT: vTraceVPri
   3a810:	3a46746e 726f6620 5374616d 3d207274     ntF: formatStr =
   3a820:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   3a830:	54524553 5478203a 65636172 69676552     SERT: xTraceRegi
   3a840:	72657473 69727453 203a676e 6562616c     sterString: labe
   3a850:	3d3d206c 4c554e20 0000004c 43415254     l == NULL...TRAC
   3a860:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a870:	74536563 5465726f 526b7361 79646165     ceStoreTaskReady
   3a880:	6e49203a 696c6176 61762064 2065756c     : Invalid value 
   3a890:	20726f66 646e6168 0000656c 6f636552     for handle..Reco
   3a8a0:	72656472 73756220 202d2079 68676968     rder busy - high
   3a8b0:	69727020 7469726f 53492079 73752052      priority ISR us
   3a8c0:	20676e69 63737973 3f6c6c61 29312820     ing syscall? (1)
   3a8d0:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3a8e0:	7270203a 61725476 74536563 4c65726f     : prvTraceStoreL
   3a8f0:	6f50776f 3a726577 766e4920 64696c61     owPower: Invalid
   3a900:	616c6620 61762067 0065756c 43415254      flag value.TRAC
   3a910:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a920:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   3a930:	65203a6c 65646f63 203d3e20 46467830     l: ecode >= 0xFF
   3a940:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3a950:	7270203a 61725476 74536563 4b65726f     : prvTraceStoreK
   3a960:	656e7265 6c61436c 6f203a6c 63656a62     ernelCall: objec
   3a970:	616c4374 3e207373 5254203d 5f454341     tClass >= TRACE_
   3a980:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   3a990:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3a9a0:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   3a9b0:	49203a6c 6c61766e 76206469 65756c61     l: Invalid value
   3a9c0:	726f6620 6a626f20 4e746365 65626d75      for objectNumbe
   3a9d0:	00000072 6f636552 72656472 73756220     r...Recorder bus
   3a9e0:	202d2079 68676968 69727020 7469726f     y - high priorit
   3a9f0:	53492079 73752052 20676e69 63737973     y ISR using sysc
   3aa00:	3f6c6c61 29322820 00000000 43415254     all? (2)....TRAC
   3aa10:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3aa20:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   3aa30:	7469576c 72615068 203a6d61 63747665     lWithParam: evtc
   3aa40:	2065646f 30203d3e 00464678 43415254     ode >= 0xFF.TRAC
   3aa50:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3aa60:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   3aa70:	7469576c 72615068 203a6d61 656a626f     lWithParam: obje
   3aa80:	6c437463 20737361 54203d3e 45434152     ctClass >= TRACE
   3aa90:	4c434e5f 45535341 00000053 43415254     _NCLASSES...TRAC
   3aaa0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3aab0:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   3aac0:	7469576c 72615068 203a6d61 61766e49     lWithParam: Inva
   3aad0:	2064696c 756c6176 6f662065 626f2072     lid value for ob
   3aae0:	7463656a 626d754e 00007265 6f636552     jectNumber..Reco
   3aaf0:	72656472 73756220 202d2079 68676968     rder busy - high
   3ab00:	69727020 7469726f 53492079 73752052      priority ISR us
   3ab10:	20676e69 63737973 3f6c6c61 29332820     ing syscall? (3)
   3ab20:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3ab30:	7270203a 61725476 65476563 72615074     : prvTraceGetPar
   3ab40:	203a6d61 61766e49 2064696c 756c6176     am: Invalid valu
   3ab50:	6f662065 61702072 5f6d6172 0078616d     e for param_max.
   3ab60:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3ab70:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   3ab80:	6c61436c 7469576c 6d754e68 63697265     lCallWithNumeric
   3ab90:	61726150 6c6e4f6d 49203a79 6c61766e     ParamOnly: Inval
   3aba0:	76206469 65756c61 726f6620 74766520     id value for evt
   3abb0:	65646f63 00000000 6f636552 72656472     code....Recorder
   3abc0:	73756220 202d2079 68676968 69727020      busy - high pri
   3abd0:	7469726f 53492079 73752052 20676e69     ority ISR using 
   3abe0:	63737973 3f6c6c61 29342820 00000000     syscall? (4)....
   3abf0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3ac00:	61725476 74536563 5465726f 736b7361     vTraceStoreTasks
   3ac10:	63746977 49203a68 6c61766e 76206469     witch: Invalid v
   3ac20:	65756c61 726f6620 73617420 61685f6b     alue for task_ha
   3ac30:	656c646e 00000000 43415254 53415f45     ndle....TRACE_AS
   3ac40:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   3ac50:	4f65726f 63656a62 6d614e74 436e4f65     oreObjectNameOnC
   3ac60:	65736f6c 6e657645 6f203a74 63656a62     loseEvent: objec
   3ac70:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   3ac80:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   3ac90:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3aca0:	74536563 4f65726f 63656a62 6d614e74     ceStoreObjectNam
   3acb0:	436e4f65 65736f6c 6e657645 49203a74     eOnCloseEvent: I
   3acc0:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   3acd0:	6e616820 00656c64 43415254 53415f45      handle.TRACE_AS
   3ace0:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   3acf0:	4f65726f 63656a62 6f725074 74726570     oreObjectPropert
   3ad00:	4f736569 6f6c436e 76456573 3a746e65     iesOnCloseEvent:
   3ad10:	6a626f20 63746365 7373616c 203d3e20      objectclass >= 
   3ad20:	43415254 434e5f45 5353414c 00005345     TRACE_NCLASSES..
   3ad30:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3ad40:	61725476 74536563 4f65726f 63656a62     vTraceStoreObjec
   3ad50:	6f725074 74726570 4f736569 6f6c436e     tPropertiesOnClo
   3ad60:	76456573 3a746e65 766e4920 64696c61     seEvent: Invalid
   3ad70:	6c617620 66206575 6820726f 6c646e61      value for handl
   3ad80:	00000065 43415254 53415f45 54524553     e...TRACE_ASSERT
   3ad90:	7270203a 61725476 65536563 69725074     : prvTraceSetPri
   3ada0:	7469726f 6f725079 74726570 6f203a79     orityProperty: o
   3adb0:	63656a62 616c6374 3e207373 5254203d     bjectclass >= TR
   3adc0:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
   3add0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3ade0:	61725476 65536563 69725074 7469726f     vTraceSetPriorit
   3adf0:	6f725079 74726570 49203a79 6c61766e     yProperty: Inval
   3ae00:	76206469 65756c61 726f6620 00646920     id value for id.
   3ae10:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3ae20:	61725476 65476563 69725074 7469726f     vTraceGetPriorit
   3ae30:	6f725079 74726570 6f203a79 63656a62     yProperty: objec
   3ae40:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   3ae50:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   3ae60:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3ae70:	65476563 69725074 7469726f 6f725079     ceGetPriorityPro
   3ae80:	74726570 49203a79 6c61766e 76206469     perty: Invalid v
   3ae90:	65756c61 726f6620 00646920 43415254     alue for id.TRAC
   3aea0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3aeb0:	65536563 6a624f74 53746365 65746174     ceSetObjectState
   3aec0:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   3aed0:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   3aee0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3aef0:	61725476 65536563 6a624f74 53746365     vTraceSetObjectS
   3af00:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   3af10:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   3af20:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3af30:	65476563 6a624f74 53746365 65746174     ceGetObjectState
   3af40:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   3af50:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   3af60:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3af70:	61725476 65476563 6a624f74 53746365     vTraceGetObjectS
   3af80:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   3af90:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   3afa0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   3afb0:	65536563 73615474 736e496b 636e6174     ceSetTaskInstanc
   3afc0:	6e694665 65687369 49203a64 6c61766e     eFinished: Inval
   3afd0:	76206469 65756c61 726f6620 6e616820     id value for han
   3afe0:	00656c64 63617254 65522065 64726f63     dle.Trace Record
   3aff0:	44207265 006f6d65 65747441 2074706d     er Demo.Attempt 
   3b000:	69206f74 7865646e 74756f20 65646973     to index outside
   3b010:	65766520 6220746e 65666675 00002172      event buffer!..
   3b020:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   3b030:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   3b040:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   3b050:	6a626f20 63746365 7373616c 00000000      objectclass....
   3b060:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   3b070:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   3b080:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   3b090:	6a626f20 68746365 6c646e61 00000065      objecthandle...
   3b0a0:	656a624f 74207463 656c6261 6f6f6c20     Object table loo
   3b0b0:	2070756b 68746977 766e6920 64696c61     kup with invalid
   3b0c0:	6a626f20 20746365 646e6168 6f20656c      object handle o
   3b0d0:	626f2072 7463656a 616c6320 00217373     r object class!.
   3b0e0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3b0f0:	61725476 65476563 6a624f74 48746365     vTraceGetObjectH
   3b100:	6c646e61 49203a65 6c61766e 76206469     andle: Invalid v
   3b110:	65756c61 726f6620 6a626f20 63746365     alue for objectc
   3b120:	7373616c 00000000 43415254 53415f45     lass....TRACE_AS
   3b130:	54524553 7270203a 61725476 72466563     SERT: prvTraceFr
   3b140:	624f6565 7463656a 646e6148 203a656c     eeObjectHandle: 
   3b150:	61766e49 2064696c 756c6176 6f662065     Invalid value fo
   3b160:	626f2072 7463656a 73616c63 00000073     r objectclass...
   3b170:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3b180:	61725476 72466563 624f6565 7463656a     vTraceFreeObject
   3b190:	646e6148 203a656c 61766e49 2064696c     Handle: Invalid 
   3b1a0:	756c6176 6f662065 61682072 656c646e     value for handle
   3b1b0:	00000000 65747441 2074706d 66206f74     ....Attempt to f
   3b1c0:	20656572 65726f6d 6e616820 73656c64     ree more handles
   3b1d0:	61687420 6c61206e 61636f6c 21646574      than allocated!
   3b1e0:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3b1f0:	7270203a 61725476 65536563 6a624f74     : prvTraceSetObj
   3b200:	4e746365 3a656d61 6d616e20 3d3d2065     ectName: name ==
   3b210:	4c554e20 0000004c 656c6c49 206c6167      NULL...Illegal 
   3b220:	656a626f 63207463 7373616c 206e6920     object class in 
   3b230:	54767270 65636172 4f746553 63656a62     prvTraceSetObjec
   3b240:	6d614e74 00000065 656c6c49 206c6167     tName...Illegal 
   3b250:	646e6168 2820656c 69202930 7270206e     handle (0) in pr
   3b260:	61725476 65536563 6a624f74 4e746365     vTraceSetObjectN
   3b270:	2e656d61 00000000 43415254 53415f45     ame.....TRACE_AS
   3b280:	54524553 7270203a 61725476 704f6563     SERT: prvTraceOp
   3b290:	79536e65 6c6f626d 616e203a 3d20656d     enSymbol: name =
   3b2a0:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   3b2b0:	54524553 7270203a 65684376 61446b63     SERT: prvCheckDa
   3b2c0:	6f546174 764f6542 72777265 65747469     taToBeOverwritte
   3b2d0:	726f466e 746c754d 746e4569 76457972     nForMultiEntryEv
   3b2e0:	73746e65 6f6e203a 746e4566 73656972     ents: nofEntries
   3b2f0:	68436f54 206b6365 30203d3d 00000000     ToCheck == 0....
   3b300:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3b310:	61725476 65476563 53544474 6e49203a     vTraceGetDTS: In
   3b320:	696c6176 61762064 2065756c 20726f66     valid value for 
   3b330:	61726170 616d5f6d 53544478 00000000     param_maxDTS....
   3b340:	20646142 61726170 616d5f6d 53544478     Bad param_maxDTS
   3b350:	206e6920 54767270 65636172 44746547      in prvTraceGetD
   3b360:	00005354 43415254 53415f45 54524553     TS..TRACE_ASSERT
   3b370:	7270203a 61725476 6f4c6563 70756b6f     : prvTraceLookup
   3b380:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   3b390:	616e203a 3d20656d 554e203d 00004c4c     : name == NULL..
   3b3a0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   3b3b0:	61725476 6f4c6563 70756b6f 626d7953     vTraceLookupSymb
   3b3c0:	61546c6f 45656c62 7972746e 656c203a     olTableEntry: le
   3b3d0:	3d3d206e 00003020 43415254 53415f45     n == 0..TRACE_AS
   3b3e0:	54524553 7270203a 61725476 72436563     SERT: prvTraceCr
   3b3f0:	65746165 626d7953 61546c6f 45656c62     eateSymbolTableE
   3b400:	7972746e 616e203a 3d20656d 554e203d     ntry: name == NU
   3b410:	00004c4c 43415254 53415f45 54524553     LL..TRACE_ASSERT
   3b420:	7270203a 61725476 72436563 65746165     : prvTraceCreate
   3b430:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   3b440:	656c203a 3d3d206e 00003020 626d7953     : len == 0..Symb
   3b450:	74206c6f 656c6261 6c756620 49202e6c     ol table full. I
   3b460:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
   3b470:	424d5953 545f4c4f 454c4241 5a49535f     SYMBOL_TABLE_SIZ
   3b480:	6e692045 63727420 666e6f43 682e6769     E in trcConfig.h
   3b490:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   3b4a0:	7270203a 61725476 65476563 65684374     : prvTraceGetChe
   3b4b0:	75736b63 70203a6d 656d616e 203d3d20     cksum: pname == 
   3b4c0:	4c4c554e 00000000 43415254 53415f45     NULL....TRACE_AS
   3b4d0:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   3b4e0:	65684374 75736b63 70203a6d 20637263     tChecksum: pcrc 
   3b4f0:	4e203d3d 004c4c55 43415254 53415f45     == NULL.TRACE_AS
   3b500:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   3b510:	65684374 75736b63 70203a6d 676e656c     tChecksum: pleng
   3b520:	3d206874 554e203d 00004c4c 454c4449     th == NULL..IDLE
   3b530:	00000000 20726d54 00637653 0001fc18     ....Tmr Svc.....
   3b540:	0001fc18 0001fc18 0001fca6 0001fc70     ............p...
   3b550:	0001fc9a 0001fc18 0001fc18 0001fca6     ................
   3b560:	0001fc70                                p...

0003b564 <sd_mmc_trans_units>:
   3b564:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0003b580 <sd_trans_multipliers>:
   3b580:	00000000 0000000a 0000000c 0000000d     ................
   3b590:	0000000f 00000014 00000019 0000001e     ................
   3b5a0:	00000023 00000028 0000002d 00000032     #...(...-...2...
   3b5b0:	00000037 0000003c 00000046 00000050     7...<...F...P...

0003b5c0 <mmc_trans_multipliers>:
   3b5c0:	00000000 0000000a 0000000c 0000000d     ................
   3b5d0:	0000000f 00000014 0000001a 0000001e     ................
   3b5e0:	00000023 00000028 0000002d 00000034     #...(...-...4...
   3b5f0:	00000037 0000003c 00000046 00000050     7...<...F...P...
   3b600:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   3b610:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   3b620:	6320746c 000a646d 0000000d              lt cmd......

0003b62c <__FUNCTION__.17031>:
   3b62c:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   3b63c:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   3b64c:	20676e69 6e776f64 0a2e2e2e 00000000     ing down........
   3b65c:	0000000d 50504128 52452829 255b2952     ....(APP)(ERR)[%
   3b66c:	255b5d73 00005d64 46494828 69614629     s][%d]..(HIF)Fai
   3b67c:	6f74206c 6b617720 74207075 63206568     l to wakup the c
   3b68c:	0a706968 00000000 66696828 49572029     hip.....(hif) WI
   3b69c:	485f4946 5f54534f 5f564352 4c525443     FI_HOST_RCV_CTRL
   3b6ac:	6220315f 66207375 0a6c6961 00000000     _1 bus fail.....
   3b6bc:	66696828 64612029 73657264 75622073     (hif) address bu
   3b6cc:	61662073 000a6c69 66696828 6f432029     s fail..(hif) Co
   3b6dc:	70757272 20646574 6b636170 53207465     rrupted packet S
   3b6ec:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   3b6fc:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   3b70c:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   3b71c:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   3b72c:	65747369 0a646572 00000000 6b6f6353     istered.....Scok
   3b73c:	63207465 626c6c61 206b6361 6e207369     et callback is n
   3b74c:	7220746f 73696765 65726574 00000a64     ot registered...
   3b75c:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   3b76c:	20746f6e 69676572 72657473 000a6465     not registered..
   3b77c:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   3b78c:	6e207369 7220746f 73696765 65726574     is not registere
   3b79c:	00000a64 6d676953 61632061 61626c6c     d...Sigma callba
   3b7ac:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   3b7bc:	64657265 0000000a 66696828 6e692029     ered....(hif) in
   3b7cc:	696c6176 72672064 2070756f 000a4449     valid group ID..
   3b7dc:	66696828 6f682029 61207473 64207070     (hif) host app d
   3b7ec:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   3b7fc:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   3b80c:	72572029 20676e6f 657a6953 0000000a     ) Wrong Size....
   3b81c:	66696828 61462029 2065736c 65746e69     (hif) False inte
   3b82c:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
   3b83c:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
   3b84c:	7265746e 74707572 67657220 0000000a     nterrupt reg....
   3b85c:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
   3b86c:	656c646e 746e6920 75727265 25207470     ndle interrupt %
   3b87c:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
   3b88c:	66696820 6365725f 65766965 6e49203a      hif_receive: In
   3b89c:	696c6176 72612064 656d7567 000a746e     valid argument..
   3b8ac:	20505041 75716552 65747365 69532064     APP Requested Si
   3b8bc:	6920657a 616c2073 72656772 61687420     ze is larger tha
   3b8cc:	6874206e 65722065 65766963 75622064     n the recived bu
   3b8dc:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
   3b8ec:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
   3b8fc:	65747365 64412064 73657264 65622073     ested Address be
   3b90c:	646e6f79 65687420 63657220 64657669     yond the recived
   3b91c:	66756220 20726566 72646461 20737365      buffer address 
   3b92c:	20646e61 676e656c 000a6874 20705247     and length..GRp 
   3b93c:	6425203f 0000000a 00023d44 00023d14     ? %d....D=...=..
   3b94c:	00023d0c 00023d24 00023d1c 00023d3c     .=..$=...=..<=..
   3b95c:	00023d2c 00023d34                       ,=..4=..

0003b964 <__FUNCTION__.17899>:
   3b964:	5f666968 646e6573 00000000              hif_send....

0003b970 <__FUNCTION__.17909>:
   3b970:	5f666968 00727369                       hif_isr.

0003b978 <__FUNCTION__.17918>:
   3b978:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0003b988 <__FUNCTION__.17930>:
   3b988:	5f666968 65636572 00657669              hif_receive.

0003b994 <__FUNCTION__.17946>:
   3b994:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   3b9a4:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   3b9b4:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   3b9c4:	75252e75 2075252e 000a2022 0000000d     u.%u.%u " ......
   3b9d4:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   3b9e4:	00005d64 20514552 20746f4e 69666564     d]..REQ Not defi
   3b9f4:	2064656e 000a6425 41564e49 2044494c     ned %d..INVALID 
   3ba04:	4e494f50 0a524554 00000000 41564e49     POINTER.....INVA
   3ba14:	2044494c 44495353 0000000a 41564e49     LID SSID....INVA
   3ba24:	2044494c 000a4843 41564e49 2044494c     LID CH..INVALID 
   3ba34:	50434844 52455320 20524556 000a5049     DHCP SERVER IP..
   3ba44:	41564e49 2044494c 2059454b 45444e49     INVALID KEY INDE
   3ba54:	00000a58 41564e49 2044494c 2059454b     X...INVALID KEY 
   3ba64:	49525453 5320474e 0a455a49 00000000     STRING SIZE.....
   3ba74:	41564e49 2044494c 2059454b 455a4953     INVALID KEY SIZE
   3ba84:	0000000a 41564e49 2044494c 20415057     ....INVALID WPA 
   3ba94:	2059454b 455a4953 0000000a 41564e49     KEY SIZE....INVA
   3baa4:	2044494c 48545541 49544e45 49544143     LID AUTHENTICATI
   3bab4:	4d204e4f 0a45444f 00000000 41564e49     ON MODE.....INVA
   3bac4:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   3bad4:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   3bae4:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   3baf4:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   3bb04:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   3bb14:	73747365 72657020 61637320 6c73206e     ests per scan sl
   3bb24:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   3bb34:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   3bb44:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
   3bb54:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   3bb64:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   3bb74:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   3bb84:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   3bb94:	6e694d20 69726420 20726576 20726576      Min driver ver 
   3bba4:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   3bbb4:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   3bbc4:	0000000a 303a3831 35333a39 00000000     ....18:09:35....
   3bbd4:	2079614d 32203220 00333230 76697244     May  2 2023.Driv
   3bbe4:	62207265 746c6975 20746120 25097325     er built at %s.%
   3bbf4:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   3bc04:	7277616d 65562065 6f697372 00000a6e     mawre Version...
   3bc14:	2079654b 6e207369 7620746f 64696c61     Key is not valid
   3bc24:	0000000a 61766e49 2064696c 0a79654b     ....Invalid Key.
   3bc34:	00000000 44495353 4e454c20 564e4920     ....SSID LEN INV
   3bc44:	44494c41 0000000a 49204843 4c41564e     ALID....CH INVAL
   3bc54:	000a4449 61766e49 2064696c 20706557     ID..Invalid Wep 
   3bc64:	2079656b 65646e69 64252078 0000000a     key index %d....
   3bc74:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
   3bc84:	676e656c 25206874 00000a64 6f636e49     length %d...Inco
   3bc94:	63657272 53502074 656b204b 656c2079     rrect PSK key le
   3bca4:	6874676e 0000000a 65646e75 656e6966     ngth....undefine
   3bcb4:	65732064 79742063 000a6570 5f53505f     d sec type.._PS_
   3bcc4:	56524553 205f5245 6e207369 6420746f     SERVER_ is not d
   3bcd4:	6e696665 000a6465 7473694c 63206e65     efined..Listen c
   3bce4:	6e6e6168 73206c65 6c756f68 6e6f2064     hannel should on
   3bcf4:	6220796c 324d2065 49575f4d 435f4946     ly be M2M_WIFI_C
   3bd04:	2f315f48 31312f36 00000a20 45574f50     H_1/6/11 ...POWE
   3bd14:	41532052 25204556 00000a64 41564e49     R SAVE %d...INVA
   3bd24:	2044494c 414d4f44 4e204e49 0a454d41     LID DOMAIN NAME.
   3bd34:	00000000 474e5250 66754220 20726566     ....PRNG Buffer 
   3bd44:	65637865 64656465 78616d20 6d756d69     exceeded maximum
   3bd54:	7a697320 64252065 20726f20 4c4c554e      size %d or NULL
   3bd64:	66754220 0a726566 00000000               Buffer.....

0003bd70 <__FUNCTION__.17881>:
   3bd70:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0003bd7c <__FUNCTION__.17910>:
   3bd7c:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0003bd8c <__FUNCTION__.17941>:
   3bd8c:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   3bd9c:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   3bdac:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   3bdbc:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   3bdcc:	0000000d 6c696146 74206465 6177206f     ....Failed to wa
   3bddc:	2070756b 20656874 70696863 0000000a     kup the chip....
   3bdec:	50504128 4e492829 00294f46 76697244     (APP)(INFO).Driv
   3bdfc:	65567265 666e4972 30203a6f 38302578     erVerInfo: 0x%08
   3be0c:	000a786c 6c696166 74206465 6564206f     lx..failed to de
   3be1c:	696e692d 6c616974 0a657a69 00000000     -initialize.....

0003be2c <__FUNCTION__.17738>:
   3be2c:	70696863 6b61775f 00000065              chip_wake...

0003be38 <__FUNCTION__.17787>:
   3be38:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   3be48:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   3be58:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   3be68:	6e69206c 62207469 000a7375 0000000d     l init bus......
   3be78:	50504128 4e492829 00294f46 70696843     (APP)(INFO).Chip
   3be88:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
   3be98:	74206465 6e65206f 656c6261 746e6920     ed to enable int
   3bea8:	75727265 2e737470 00000a2e 696d6e5b     errupts.....[nmi
   3beb8:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
   3bec8:	2074696e 6c696166 0000000a 696d6e5b     nit fail....[nmi
   3bed8:	6f747320 203a5d70 20495053 73616c66      stop]: SPI flas
   3bee8:	69642068 6c626173 61662065 000a6c69     h disable fail..
   3bef8:	696d6e5b 6f747320 203a5d70 6c696166     [nmi stop]: fail
   3bf08:	696e6920 75622074 00000a73               init bus...

0003bf14 <__FUNCTION__.17785>:
   3bf14:	645f6d6e 695f7672 0074696e              nm_drv_init.

0003bf20 <__FUNCTION__.17792>:
   3bf20:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

0003bf30 <crc7_syndrome_table>:
   3bf30:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   3bf40:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   3bf50:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   3bf60:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   3bf70:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   3bf80:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   3bf90:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   3bfa0:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   3bfb0:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   3bfc0:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   3bfd0:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   3bfe0:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   3bff0:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   3c000:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   3c010:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   3c020:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   3c030:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   3c040:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   3c050:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   3c060:	73756220 72726520 2e2e726f 00000a2e      bus error......
   3c070:	0000000d 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3c080:	656c6961 75622064 72652073 2e726f72     ailed bus error.
   3c090:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3c0a0:	656c6961 61642064 72206174 6f707365     ailed data respo
   3c0b0:	2065736e 64616572 7825202c 20782520     nse read, %x %x 
   3c0c0:	000a7825 696d6e5b 69707320 46203a5d     %x..[nmi spi]: F
   3c0d0:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   3c0e0:	72206573 2c646165 73756220 72726520     se read, bus err
   3c0f0:	2e2e726f 00000a2e 696d6e5b 69707320     or......[nmi spi
   3c100:	73203a5d 62206970 65666675 69732072     ]: spi buffer si
   3c110:	7420657a 73206f6f 6c6c616d 64252820     ze too small (%d
   3c120:	25282029 000a2964 696d6e5b 69707320     ) (%d)..[nmi spi
   3c130:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   3c140:	6e6f7073 202c6573 20646d63 32302528     sponse, cmd (%02
   3c150:	202c2978 70736572 30252820 0a297832     x), resp (%02x).
   3c160:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3c170:	656c6961 6d632064 74732064 20657461     ailed cmd state 
   3c180:	70736572 65736e6f 61747320 28206574     response state (
   3c190:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   3c1a0:	45203a5d 726f7272 6164202c 72206174     ]: Error, data r
   3c1b0:	20646165 70736572 65736e6f 30252820     ead response (%0
   3c1c0:	0a297832 00000000 696d6e5b 69707320     2x).....[nmi spi
   3c1d0:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   3c1e0:	6877206e 72206e65 69646165 6420676e     n when reading d
   3c1f0:	2e617461 0000000a 696d6e5b 69707320     ata.....[nmi spi
   3c200:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   3c210:	6877206e 72206e65 69646165 6320676e     n when reading c
   3c220:	0a2e6372 00000000 696d6e5b 69707320     rc......[nmi spi
   3c230:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   3c240:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   3c250:	726f7272 0a2e2e2e 00000000 696d6e5b     rror........[nmi
   3c260:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   3c270:	62206174 6b636f6c 63726320 61657220     ta block crc rea
   3c280:	62202c64 65207375 726f7272 0a2e2e2e     d, bus error....
   3c290:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3c2a0:	656c6961 61642064 72206174 6f707365     ailed data respo
   3c2b0:	2065736e 64616572 7562202c 72652073     nse read, bus er
   3c2c0:	2e726f72 000a2e2e 696d6e5b 69707320     ror.....[nmi spi
   3c2d0:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   3c2e0:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   3c2f0:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   3c300:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   3c310:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   3c320:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
   3c330:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   3c340:	61642064 62206174 6b636f6c 69727720     d data block wri
   3c350:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   3c360:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3c370:	656c6961 61642064 62206174 6b636f6c     ailed data block
   3c380:	63726320 69727720 202c6574 20737562      crc write, bus 
   3c390:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
   3c3a0:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   3c3b0:	77202c64 65746972 67657220 30252820     d, write reg (%0
   3c3c0:	2e297838 000a2e2e 65736552 6e612074     8x).....Reset an
   3c3d0:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   3c3e0:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   3c3f0:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   3c400:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
   3c410:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   3c420:	656c6961 6c622064 206b636f 61746164     ailed block data
   3c430:	69727720 2e2e6574 00000a2e 65736552      write......Rese
   3c440:	6e612074 65722064 20797274 25206425     t and retry %d %
   3c450:	2520786c 00000a64 696d6e5b 69707320     lx %d...[nmi spi
   3c460:	46203a5d 656c6961 6d632064 72202c64     ]: Failed cmd, r
   3c470:	20646165 20676572 38302528 2e2e2978     ead reg (%08x)..
   3c480:	00000a2e 65736552 6e612074 65722064     ....Reset and re
   3c490:	20797274 25206425 000a786c 696d6e5b     try %d %lx..[nmi
   3c4a0:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   3c4b0:	72202c64 20646165 636f6c62 2528206b     d, read block (%
   3c4c0:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
   3c4d0:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   3c4e0:	6e726574 72206c61 20646165 746f7270     ternal read prot
   3c4f0:	6c6f636f 74697720 52432068 6e6f2043     ocol with CRC on
   3c500:	6572202c 69727974 7720676e 20687469     , retyring with 
   3c510:	20435243 2e66666f 000a2e2e 696d6e5b     CRC off.....[nmi
   3c520:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   3c530:	6e726574 72206c61 20646165 746f7270     ternal read prot
   3c540:	6c6f636f 0a2e2e2e 00000000 696d6e5b     ocol........[nmi
   3c550:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   3c560:	6e726574 77206c61 65746972 6f727020     ternal write pro
   3c570:	6f636f74 6572206c 2e2e2e67 0000000a     tocol reg.......
   3c580:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   3c590:	20646d63 64616572 69686320 64692070     cmd read chip id
   3c5a0:	0a2e2e2e 00000000 0002596c 0002596c     ........lY..lY..
   3c5b0:	000259fc 000258c0 00025906 00025928     .Y...X...Y..(Y..
   3c5c0:	000259ae 000259ae 00025a68 00025894     .Y...Y..hZ...X..
   3c5d0:	00025ac2 00025ac2 00025ac2 00025ac2     .Z...Z...Z...Z..
   3c5e0:	0002594a 00025ecc 00025ecc 00025f54     JY...^...^..T_..
   3c5f0:	00025e30 00025e72 00025e90 00025f0a     0^..r^...^..._..
   3c600:	00025f0a 00025fb6 00025e08 00026006     ._..._...^...`..
   3c610:	00026006 00026006 00026006 00025eae     .`...`...`...^..

0003c620 <__FUNCTION__.17060>:
   3c620:	5f697073 00646d63                       spi_cmd.

0003c628 <__FUNCTION__.17067>:
   3c628:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0003c638 <__FUNCTION__.17076>:
   3c638:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0003c644 <__FUNCTION__.17109>:
   3c644:	5f697073 5f646d63 706d6f63 6574656c     spi_cmd_complete
   3c654:	00000000                                ....

0003c658 <__FUNCTION__.17155>:
   3c658:	5f697073 61746164 6972775f 00006574     spi_data_write..

0003c668 <__FUNCTION__.17167>:
   3c668:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0003c678 <__FUNCTION__.17178>:
   3c678:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0003c688 <__FUNCTION__.17190>:
   3c688:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0003c698 <__FUNCTION__.17201>:
   3c698:	735f6d6e 725f6970 00646165              nm_spi_read.

0003c6a4 <__FUNCTION__.17222>:
   3c6a4:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   3c6b4:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   3c6c4:	6e657272 253c2074 000a3e64 0000000d     rrent <%d>......
   3c6d4:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   3c6e4:	4449206e 25203d20 000a0d64 6b636f53     n ID = %d...Sock
   3c6f4:	206f7420 656c6564 3c206574 0a3e6425      to delete <%d>.
   3c704:	00000000 50504128 52452829 255b2952     ....(APP)(ERR)[%
   3c714:	255b5d73 00005d64 20494e53 65637845     s][%d]..SNI Exce
   3c724:	20736465 2078614d 676e654c 000a6874     eds Max Length..
   3c734:	6e6b6e55 206e776f 204c5353 6b636f53     Unknown SSL Sock
   3c744:	4f207465 6f697470 6425206e 0000000a     et Option %d....
   3c754:	20746f4e 204c5353 6b636f53 000a7465     Not SSL Socket..
   3c764:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
   3c774:	22302074 00000000                       t 0"....

0003c77c <lun_desc>:
   3c77c:	0002163d 00021695 000216e1 0002172d     =...........-...
   3c78c:	0002175d 000217e1 00021871 0003c764     ].......q...d...
   3c79c:	42000800 42000c00 42001000 42001400     ...B...B...B...B
   3c7ac:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
   3c7bc:	0002b946 0002b9c0 0002b9c0 0002b964     F...........d...
   3c7cc:	0002b95e 0002b96a 0002b94c 0002b970     ^...j...L...p...
   3c7dc:	0002b9a6 0002bba8 0002bbf8 0002bbf8     ................
   3c7ec:	0002bbf4 0002bb9a 0002bbba 0002bb8a     ................
   3c7fc:	0002bbcc 0002bbde 0002bc46 0002bc74     ........F...t...
   3c80c:	0002bc74 0002bc70 0002bc40 0002bc4c     t...p...@...L...
   3c81c:	0002bc3a 0002bc52 0002bc58              :...R...X...

0003c828 <tcc_modules>:
   3c828:	42002000 42002400 42002800              . .B.$.B.(.B

0003c834 <_tcc_gclk_ids>:
   3c834:	001b1a1a                                ....

0003c838 <_tcc_apbcmasks>:
   3c838:	00000100 00000200 00000400              ............

0003c844 <_tcc_maxs>:
   3c844:	00ffffff 00ffffff 0000ffff              ............

0003c850 <_tcc_cc_nums>:
   3c850:	00020204                                ....

0003c854 <_tcc_ow_nums>:
   3c854:	00020408                                ....

0003c858 <_tcc_intflag>:
   3c858:	00000001 00000002 00000004 00000008     ................
   3c868:	00001000 00002000 00004000 00008000     ..... ...@......
   3c878:	00010000 00020000 00040000 00080000     ................

0003c888 <LfnOfs>:
   3c888:	07050301 12100e09 1c181614 0000001e     ................
   3c898:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   3c8a8:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
   3c8b8:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
   3c8c8:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
   3c8d8:	20205441 00202020                       AT     .

0003c8e0 <excvt.4558>:
   3c8e0:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   3c8f0:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   3c900:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   3c910:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   3c920:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   3c930:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   3c940:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   3c950:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0003c960 <Tbl>:
   3c960:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   3c970:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   3c980:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   3c990:	00d600ff 00f800dc 00d800a3 019200d7     ................
   3c9a0:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   3c9b0:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   3c9c0:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   3c9d0:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   3c9e0:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   3c9f0:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   3ca00:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   3ca10:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   3ca20:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   3ca30:	00da00de 00d900db 00dd00fd 00b400af     ................
   3ca40:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   3ca50:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0003ca60 <tbl_lower.4308>:
   3ca60:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   3ca70:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   3ca80:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   3ca90:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   3caa0:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   3cab0:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   3cac0:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   3cad0:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   3cae0:	01050103 01090107 010d010b 0111010f     ................
   3caf0:	01150113 01190117 011d011b 0121011f     ..............!.
   3cb00:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   3cb10:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   3cb20:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   3cb30:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   3cb40:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   3cb50:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   3cb60:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   3cb70:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   3cb80:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   3cb90:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   3cba0:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   3cbb0:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   3cbc0:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   3cbd0:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   3cbe0:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   3cbf0:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   3cc00:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   3cc10:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   3cc20:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   3cc30:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0003cc40 <tbl_upper.4309>:
   3cc40:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   3cc50:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   3cc60:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   3cc70:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   3cc80:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   3cc90:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   3cca0:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   3ccb0:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   3ccc0:	01040102 01080106 010c010a 0110010e     ................
   3ccd0:	01140112 01180116 011c011a 0120011e     .............. .
   3cce0:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   3ccf0:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   3cd00:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   3cd10:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   3cd20:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   3cd30:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   3cd40:	03940393 03960395 03980397 039a0399     ................
   3cd50:	039c039b 039e039d 03a0039f 03a303a1     ................
   3cd60:	03a503a4 03a703a6 03a903a8 041003aa     ................
   3cd70:	04120411 04140413 04160415 04180417     ................
   3cd80:	041a0419 041c041b 041e041d 0420041f     .............. .
   3cd90:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   3cda0:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   3cdb0:	04030402 04050404 04070406 04090408     ................
   3cdc0:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   3cdd0:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   3cde0:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   3cdf0:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   3ce00:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   3ce10:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   3ce20:	00030fb2 00030fb2 00030fb2 00030e40     ............@...
   3ce30:	00030fb2 00030f2a 00030fb2 00030fb2     ....*...........
   3ce40:	00030fb2 00030fb2 00030fb2 00030fb2     ................
   3ce50:	00030fb2 00030fa4 4354514d 00000000     ........MQTC....
   3ce60:	00000004 00000000 00000000 00000000     ................
   3ce70:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   3ceb0:	4354514d 00000000 00000004 00000000     MQTC............
	...
   3cec8:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   3cf08:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   3cf18:	656d7461 2e312f6c 00322e30 70747468     atmel/1.0.2.http
   3cf28:	002f2f3a 70747468 2f2f3a73 00000000     ://.https://....
   3cf38:	20544547 00000000 54534f50 00000020     GET ....POST ...
   3cf48:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   3cf58:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   3cf68:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   3cf78:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   3cf88:	00000a0d 74736f48 0000203a 6e6e6f43     ....Host: ..Conn
   3cf98:	69746365 203a6e6f 7065654b 696c412d     ection: Keep-Ali
   3cfa8:	0a0d6576 00000000 65636341 452d7470     ve......Accept-E
   3cfb8:	646f636e 3a676e69 000a0d20 65636341     ncoding: ...Acce
   3cfc8:	432d7470 73726168 203a7465 2d667475     pt-Charset: utf-
   3cfd8:	000a0d38 6e617254 72656673 636e452d     8...Transfer-Enc
   3cfe8:	6e69646f 63203a67 6b6e7568 0a0d6465     oding: chunked..
   3cff8:	00000000 00007525 746e6f43 2d746e65     ....%u..Content-
   3d008:	676e654c 203a6874 00000000 33323130     Length: ....0123
   3d018:	37363534 62613938 66656463 6e617254     456789abcdefTran
   3d028:	72656673 636e452d 6e69646f 00203a67     sfer-Encoding: .
   3d038:	6e6e6f43 69746365 203a6e6f 00000000     Connection: ....
   3d048:	50545448 0000002f 00000d31 000330a6     HTTP/...1....0..
   3d058:	000330a0 0003309a 00033094 000330ac     .0...0...0...0..
   3d068:	0003308e 000330ac 00033088 00033082     .0...0...0...0..
   3d078:	000330ac 0003307c 0003307c 00033076     .0..|0..|0..v0..
   3d088:	00033070 0003306a 42002000 42002400     p0..j0... .B.$.B
   3d098:	42002800 0a0d0a0d 2d2d2d2d 4553452d     .(.B....-----ESE
   3d0a8:	20363135 6e69614d 6f725020 6d617267     516 Main Program
   3d0b8:	2d2d2d2d 000a0d2d 0a0d0a0d 74696e49     -----.......Init
   3d0c8:	696c6169 4820657a 2e2e2e57 00000a0d     ialize HW.......
   3d0d8:	6f727245 6e692072 61697469 697a696c     Error initializi
   3d0e8:	4920676e 44204332 65766972 0a0d2172     ng I2C Driver!..
   3d0f8:	00000000 74696e49 696c6169 2064657a     ....Initialized 
   3d108:	20433249 76697244 0d217265 0000000a     I2C Driver!.....
   3d118:	6e6e6143 6620746f 20646e69 21554d49     Cannot find IMU!
   3d128:	00000a0d 20554d49 6e756f66 0a0d2164     ....IMU found!..
   3d138:	00000000 20554d49 74696e69 696c6169     ....IMU initiali
   3d148:	2164657a 00000a0d 6c756f43 6f6e2064     zed!....Could no
   3d158:	6e692074 61697469 657a696c 554d4920     t initialize IMU
   3d168:	00000a0d 70616548 66656220 2065726f     ....Heap before 
   3d178:	72617473 676e6974 73617420 203a736b     starting tasks: 
   3d188:	0a0d6425 00000000 5f494c43 4b534154     %d......CLI_TASK
   3d198:	00000000 3a525245 494c4320 73617420     ....ERR: CLI tas
   3d1a8:	6f63206b 20646c75 20746f6e 69206562     k could not be i
   3d1b8:	6974696e 7a696c61 0d216465 0000000a     nitialized!.....
   3d1c8:	70616548 74666120 73207265 74726174     Heap after start
   3d1d8:	20676e69 3a494c43 0d642520 0000000a     ing CLI: %d.....
   3d1e8:	49464957 5341545f 0000004b 3a525245     WIFI_TASK...ERR:
   3d1f8:	46495720 61742049 63206b73 646c756f      WIFI task could
   3d208:	746f6e20 20656220 74696e69 696c6169      not be initiali
   3d218:	2164657a 00000a0d 70616548 74666120     zed!....Heap aft
   3d228:	73207265 74726174 20676e69 49464957     er starting WIFI
   3d238:	6425203a 00000a0d 54204955 006b7361     : %d....UI Task.
   3d248:	3a525245 20495520 6b736174 756f6320     ERR: UI task cou
   3d258:	6e20646c 6220746f 6e692065 61697469     ld not be initia
   3d268:	657a696c 0a0d2164 00000000 70616548     lized!......Heap
   3d278:	74666120 73207265 74726174 20676e69      after starting 
   3d288:	54204955 3a6b7361 0d642520 0000000a     UI Task: %d.....
   3d298:	746e6f43 206c6f72 6b736154 00000000     Control Task....
   3d2a8:	3a525245 6e6f4320 6c6f7274 73617420     ERR: Control tas
   3d2b8:	6f63206b 20646c75 20746f6e 69206562     k could not be i
   3d2c8:	6974696e 7a696c61 0d216465 0000000a     nitialized!.....
   3d2d8:	70616548 74666120 73207265 74726174     Heap after start
   3d2e8:	20676e69 746e6f43 206c6f72 6b736154     ing Control Task
   3d2f8:	6425203a 00000a0d 6f727245 6e6f2072     : %d....Error on
   3d308:	6d656d20 2079726f 6f6c6c61 69746163      memory allocati
   3d318:	6f206e6f 5246206e 54524545 0d21534f     on on FREERTOS!.
   3d328:	0000000a 6f727245 6e6f2072 61747320     ....Error on sta
   3d338:	6f206b63 66726576 20776f6c 46206e6f     ck overflow on F
   3d348:	52454552 21534f54 00000a0d 00035418     REERTOS!.....T..
   3d358:	000353e8 000353fa 0003533c 000353fa     .S...S..<S...S..
   3d368:	000353de 000353fa 0003533c 000353e8     .S...S..<S...S..
   3d378:	000353e8 000353de 0003533c 00035344     .S...S..<S..DS..
   3d388:	00035344 00035344 00035400 000353e8     DS..DS...T...S..
   3d398:	000353e8 000353bc 000354a0 000353bc     .S...S...T...S..
   3d3a8:	000353de 000353bc 000354a0 000353e8     .S...S...T...S..
   3d3b8:	000353e8 000353de 000354a0 00035344     .S...S...T..DS..
   3d3c8:	00035344 00035344 000354aa 00035648     DS..DS...T..HV..
   3d3d8:	00035598 00035598 00035596 0003563a     .U...U...U..:V..
   3d3e8:	0003563a 00035630 00035596 0003563a     :V..0V...U..:V..
   3d3f8:	00035630 0003563a 00035596 00035640     0V..:V...U..@V..
   3d408:	00035640 00035640 000356d0 00036418     @V..@V...V...d..
   3d418:	000363fa 000363b4 000362d2 000363b4     .c...c...b...c..
   3d428:	000363ec 000363b4 000362d2 000363fa     .c...c...b...c..
   3d438:	000363fa 000363ec 000362d2 000362ca     .c...c...b...b..
   3d448:	000362ca 000362ca 00036630 00036c78     .b...b..0f..xl..
   3d458:	00036b38 00036b38 00036b34 00036c50     8k..8k..4k..Pl..
   3d468:	00036c50 00036c42 00036b34 00036c50     Pl..Bl..4k..Pl..
   3d478:	00036c42 00036c50 00036b34 00036c58     Bl..Pl..4k..Xl..
   3d488:	00036c58 00036c58 00036e5c              Xl..Xl..\n..

0003d494 <_global_impure_ptr>:
   3d494:	2000013c                                <.. 

0003d498 <__sf_fake_stderr>:
	...

0003d4b8 <__sf_fake_stdin>:
	...

0003d4d8 <__sf_fake_stdout>:
	...
   3d4f8:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   3d508:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   3d518:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   3d528:	37363534 62613938 66656463 20200000              456789abcdef.

0003d535 <_ctype_>:
   3d535:	20202000 20202020 28282020 20282828     .         ((((( 
   3d545:	20202020 20202020 20202020 20202020                     
   3d555:	10108820 10101010 10101010 10101010      ...............
   3d565:	04040410 04040404 10040404 10101010     ................
   3d575:	41411010 41414141 01010101 01010101     ..AAAAAA........
   3d585:	01010101 01010101 01010101 10101010     ................
   3d595:	42421010 42424242 02020202 02020202     ..BBBBBB........
   3d5a5:	02020202 02020202 02020202 10101010     ................
   3d5b5:	00000020 00000000 00000000 00000000      ...............
	...

0003d638 <_init>:
   3d638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d63a:	46c0      	nop			; (mov r8, r8)
   3d63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3d63e:	bc08      	pop	{r3}
   3d640:	469e      	mov	lr, r3
   3d642:	4770      	bx	lr

0003d644 <__init_array_start>:
   3d644:	000120dd 	.word	0x000120dd

0003d648 <_fini>:
   3d648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d64a:	46c0      	nop			; (mov r8, r8)
   3d64c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3d64e:	bc08      	pop	{r3}
   3d650:	469e      	mov	lr, r3
   3d652:	4770      	bx	lr

0003d654 <__fini_array_start>:
   3d654:	000120b5 	.word	0x000120b5
